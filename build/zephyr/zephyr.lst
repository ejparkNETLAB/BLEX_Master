
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
}

static uint8_t discovery_callback(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr,
			       struct bt_gatt_discover_params *params)
{
   0:	2000d4c0 	.word	0x2000d4c0
   4:	0000769d 	.word	0x0000769d
   8:	0001fde1 	.word	0x0001fde1
   c:	000076d9 	.word	0x000076d9
  10:	000076d9 	.word	0x000076d9
	if (!attr) {
  14:	000076d9 	.word	0x000076d9
		LOG_DBG("NULL attribute");
  18:	000076d9 	.word	0x000076d9
	...
		LOG_DBG("Attr: handle %u", attr->handle);
	}
	bool flag_ej = false;
	int i;
	for(i = 0; i <CONFIG_BT_MAX_CONN && flag_ej == false;)
		if (conn == bt_gatt_dm_inst[i].conn) {
  2c:	00007421 	.word	0x00007421
  30:	000076d9 	.word	0x000076d9
  34:	00000000 	.word	0x00000000
	if(!flag_ej){
		LOG_ERR("Unexpected conn object. Aborting.");

		return BT_GATT_ITER_STOP;
	}
	switch (params->type) {
  38:	000073d9 	.word	0x000073d9
  3c:	0001ec31 	.word	0x0001ec31

00000040 <_irq_vector_table>:
	if (!attr) {
  40:	0000765d 0001930d 0000765d 0000765d     ]v......]v..]v..
		LOG_DBG("Attr: handle %u", attr->handle);
  50:	0000765d 0000765d 0000765d 0000765d     ]v..]v..]v..]v..
	for(i = 0; i <CONFIG_BT_MAX_CONN && flag_ej == false;)
  60:	0000765d 0000765d 0000765d 0000765d     ]v..]v..]v..]v..
	switch (params->type) {
  70:	0000765d 0000765d 0000765d 0000765d     ]v..]v..]v..]v..
		discovery_complete_not_found(dm);
  80:	0000765d 0000765d 0000765d 0000765d     ]v..]v..]v..]v..
	if (!attr) {
  90:	0000765d 0000765d 0000765d 0000765d     ]v..]v..]v..]v..
			LOG_DBG("Starting characteristic discovery");
  a0:	0000765d 0000765d 0000765d 0000765d     ]v..]v..]v..]v..
			int err = bt_gatt_discover(dm->conn,
  b0:	0000765d 0000765d 0000765d 0000765d     ]v..]v..]v..]v..
  c0:	0000765d 0000765d 0000765d 0000765d     ]v..]v..]v..]v..
				LOG_ERR("Characteristic discover failed,"
  d0:	0000765d 0000765d 0000765d 0000765d     ]v..]v..]v..]v..
	struct bt_gatt_service_val *service_val = attr->user_data;
  e0:	0000765d 0000765d 0000765d 0000765d     ]v..]v..]v..]v..
		LOG_ERR("Not enough memory for service attribute.");
  f0:	0000765d 0000765d 0000765d 0000765d     ]v..]v..]v..]v..

Disassembly of section text:

00000100 <__aeabi_drsub>:
				discovery_complete_error(dm, err);
     100:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
	LOG_DBG("Service detected, handles range: <%u, %u>",
     104:	e002      	b.n	10c <__adddf3>
     106:	bf00      	nop

00000108 <__aeabi_dsub>:
     108:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000010c <__adddf3>:
     10c:	b530      	push	{r4, r5, lr}
     10e:	ea4f 0441 	mov.w	r4, r1, lsl #1
     112:	ea4f 0543 	mov.w	r5, r3, lsl #1
     116:	ea94 0f05 	teq	r4, r5
		bt_gatt_dm_attr_service_val(cur_attr);
     11a:	bf08      	it	eq
     11c:	ea90 0f02 	teqeq	r0, r2
	memcpy(cur_service_val, service_val, sizeof(*cur_service_val));
     120:	bf1f      	itttt	ne
     122:	ea54 0c00 	orrsne.w	ip, r4, r0
     126:	ea55 0c02 	orrsne.w	ip, r5, r2
	cur_service_val->uuid = uuid_store(dm, cur_service_val->uuid);
     12a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     12e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     132:	f000 80e2 	beq.w	2fa <CONFIG_UART_MUX_RX_STACK_SIZE+0xfa>
     136:	ea4f 5454 	mov.w	r4, r4, lsr #21
		LOG_ERR("Not enough memory for service attribute data.");
     13a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     13e:	bfb8      	it	lt
     140:	426d      	neglt	r5, r5
     142:	dd0c      	ble.n	15e <CONFIG_IDLE_STACK_SIZE+0x1e>
		discovery_complete_error(dm, -ENOMEM);
     144:	442c      	add	r4, r5
     146:	ea80 0202 	eor.w	r2, r0, r2
		discovery_complete_error(dm, -ENOMEM);
     14a:	ea81 0303 	eor.w	r3, r1, r3
		return BT_GATT_ITER_STOP;
     14e:	ea82 0000 	eor.w	r0, r2, r0
	dm->discover_params.uuid         = NULL;
     152:	ea83 0101 	eor.w	r1, r3, r1
	dm->discover_params.type         = BT_GATT_DISCOVER_ATTRIBUTE;
     156:	ea80 0202 	eor.w	r2, r0, r2
	dm->discover_params.start_handle = cur_attr->handle + 1;//here
     15a:	ea81 0303 	eor.w	r3, r1, r3
	LOG_DBG("Starting descriptors discovery");
     15e:	2d36      	cmp	r5, #54	; 0x36
	dm->discover_params.start_handle = cur_attr->handle + 1;//here
     160:	bf88      	it	hi
     162:	bd30      	pophi	{r4, r5, pc}
	dm->discover_params.end_handle   = cur_service_val->end_handle;
     164:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     168:	ea4f 3101 	mov.w	r1, r1, lsl #12
	LOG_DBG("Starting descriptors discovery");
     16c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
	err = bt_gatt_discover(dm->conn, &(dm->discover_params));
     170:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     174:	d002      	beq.n	17c <CONFIG_IDLE_STACK_SIZE+0x3c>
     176:	4240      	negs	r0, r0
     178:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     17c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
	if (err) {
     180:	ea4f 3303 	mov.w	r3, r3, lsl #12
     184:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
		LOG_ERR("Descriptor discover failed, error: %d.", err);
     188:	d002      	beq.n	190 <CONFIG_IDLE_STACK_SIZE+0x50>
     18a:	4252      	negs	r2, r2
     18c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     190:	ea94 0f05 	teq	r4, r5
		discovery_complete(dm);
     194:	f000 80a7 	beq.w	2e6 <CONFIG_UART_MUX_RX_STACK_SIZE+0xe6>
		return BT_GATT_ITER_STOP;
     198:	f1a4 0401 	sub.w	r4, r4, #1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
     19c:	f1d5 0e20 	rsbs	lr, r5, #32
     1a0:	db0d      	blt.n	1be <CONFIG_IDLE_STACK_SIZE+0x7e>
     1a2:	fa02 fc0e 	lsl.w	ip, r2, lr
     1a6:	fa22 f205 	lsr.w	r2, r2, r5
     1aa:	1880      	adds	r0, r0, r2
     1ac:	f141 0100 	adc.w	r1, r1, #0
     1b0:	fa03 f20e 	lsl.w	r2, r3, lr
		cur_attr = attr_store(dm, attr, sizeof(struct bt_gatt_chrc));
     1b4:	1880      	adds	r0, r0, r2
		cur_attr = attr_store(dm, attr, 0);
     1b6:	fa43 f305 	asr.w	r3, r3, r5
     1ba:	4159      	adcs	r1, r3
     1bc:	e00e      	b.n	1dc <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x1c>
     1be:	f1a5 0520 	sub.w	r5, r5, #32
	return BT_GATT_ITER_CONTINUE;
     1c2:	f10e 0e20 	add.w	lr, lr, #32
		__ASSERT(false, "Unknown param type.");
		break;
	}

	return BT_GATT_ITER_STOP;
}
     1c6:	2a01      	cmp	r2, #1
     1c8:	fa03 fc0e 	lsl.w	ip, r3, lr
		cur_attr = attr_store(dm, attr, 0);
     1cc:	bf28      	it	cs
     1ce:	f04c 0c02 	orrcs.w	ip, ip, #2
		LOG_ERR("Not enough memory for next attribute descriptor"
     1d2:	fa43 f305 	asr.w	r3, r3, r5
     1d6:	18c0      	adds	r0, r0, r3
     1d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
	cur_attr = attr_find_by_handle(dm, attr->handle);
     1dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     1e0:	d507      	bpl.n	1f2 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x32>
     1e2:	f04f 0e00 	mov.w	lr, #0
	if (!cur_attr) {
     1e6:	f1dc 0c00 	rsbs	ip, ip, #0
		discovery_complete_error(dm, -ESRCH);
     1ea:	eb7e 0000 	sbcs.w	r0, lr, r0
		discovery_complete_error(dm, -ENOMEM);
     1ee:	eb6e 0101 	sbc.w	r1, lr, r1
	gatt_chrc = attr->user_data;
     1f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
	cur_gatt_chrc = bt_gatt_dm_attr_chrc_val(cur_attr);
     1f6:	d31b      	bcc.n	230 <CONFIG_UART_MUX_RX_STACK_SIZE+0x30>
     1f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
	memcpy(cur_gatt_chrc, gatt_chrc, sizeof(*cur_gatt_chrc));
     1fc:	d30c      	bcc.n	218 <CONFIG_UART_MUX_RX_STACK_SIZE+0x18>
     1fe:	0849      	lsrs	r1, r1, #1
     200:	ea5f 0030 	movs.w	r0, r0, rrx
	cur_gatt_chrc->uuid = uuid_store(dm, cur_gatt_chrc->uuid);
     204:	ea4f 0c3c 	mov.w	ip, ip, rrx
     208:	f104 0401 	add.w	r4, r4, #1
     20c:	ea4f 5244 	mov.w	r2, r4, lsl #21
	if (!cur_gatt_chrc->uuid) {
     210:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
		discovery_complete_error(dm, -ENOMEM);
     214:	f080 809a 	bcs.w	34c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x4c>
     218:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     21c:	bf08      	it	eq
     21e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     222:	f150 0000 	adcs.w	r0, r0, #0
     226:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     22a:	ea41 0105 	orr.w	r1, r1, r5
     22e:	bd30      	pop	{r4, r5, pc}
     230:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     234:	4140      	adcs	r0, r0
     236:	eb41 0101 	adc.w	r1, r1, r1
     23a:	3c01      	subs	r4, #1
     23c:	bf28      	it	cs
     23e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     242:	d2e9      	bcs.n	218 <CONFIG_UART_MUX_RX_STACK_SIZE+0x18>
     244:	f091 0f00 	teq	r1, #0
     248:	bf04      	itt	eq
     24a:	4601      	moveq	r1, r0
     24c:	2000      	moveq	r0, #0
     24e:	fab1 f381 	clz	r3, r1
     252:	bf08      	it	eq
     254:	3320      	addeq	r3, #32
     256:	f1a3 030b 	sub.w	r3, r3, #11
     25a:	f1b3 0220 	subs.w	r2, r3, #32
     25e:	da0c      	bge.n	27a <CONFIG_UART_MUX_RX_STACK_SIZE+0x7a>
     260:	320c      	adds	r2, #12
     262:	dd08      	ble.n	276 <CONFIG_UART_MUX_RX_STACK_SIZE+0x76>
     264:	f102 0c14 	add.w	ip, r2, #20
     268:	f1c2 020c 	rsb	r2, r2, #12
     26c:	fa01 f00c 	lsl.w	r0, r1, ip
     270:	fa21 f102 	lsr.w	r1, r1, r2
     274:	e00c      	b.n	290 <CONFIG_UART_MUX_RX_STACK_SIZE+0x90>
     276:	f102 0214 	add.w	r2, r2, #20
     27a:	bfd8      	it	le
     27c:	f1c2 0c20 	rsble	ip, r2, #32
     280:	fa01 f102 	lsl.w	r1, r1, r2
     284:	fa20 fc0c 	lsr.w	ip, r0, ip
     288:	bfdc      	itt	le
     28a:	ea41 010c 	orrle.w	r1, r1, ip
     28e:	4090      	lslle	r0, r2
     290:	1ae4      	subs	r4, r4, r3
     292:	bfa2      	ittt	ge
     294:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     298:	4329      	orrge	r1, r5
     29a:	bd30      	popge	{r4, r5, pc}
     29c:	ea6f 0404 	mvn.w	r4, r4
     2a0:	3c1f      	subs	r4, #31
     2a2:	da1c      	bge.n	2de <CONFIG_UART_MUX_RX_STACK_SIZE+0xde>
     2a4:	340c      	adds	r4, #12
     2a6:	dc0e      	bgt.n	2c6 <CONFIG_UART_MUX_RX_STACK_SIZE+0xc6>
     2a8:	f104 0414 	add.w	r4, r4, #20
     2ac:	f1c4 0220 	rsb	r2, r4, #32
     2b0:	fa20 f004 	lsr.w	r0, r0, r4
     2b4:	fa01 f302 	lsl.w	r3, r1, r2
     2b8:	ea40 0003 	orr.w	r0, r0, r3
     2bc:	fa21 f304 	lsr.w	r3, r1, r4
     2c0:	ea45 0103 	orr.w	r1, r5, r3
     2c4:	bd30      	pop	{r4, r5, pc}
     2c6:	f1c4 040c 	rsb	r4, r4, #12
     2ca:	f1c4 0220 	rsb	r2, r4, #32
     2ce:	fa20 f002 	lsr.w	r0, r0, r2
     2d2:	fa01 f304 	lsl.w	r3, r1, r4
     2d6:	ea40 0003 	orr.w	r0, r0, r3
     2da:	4629      	mov	r1, r5
     2dc:	bd30      	pop	{r4, r5, pc}
     2de:	fa21 f004 	lsr.w	r0, r1, r4
     2e2:	4629      	mov	r1, r5
     2e4:	bd30      	pop	{r4, r5, pc}
     2e6:	f094 0f00 	teq	r4, #0
     2ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     2ee:	bf06      	itte	eq
     2f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     2f4:	3401      	addeq	r4, #1
     2f6:	3d01      	subne	r5, #1
     2f8:	e74e      	b.n	198 <CONFIG_IDLE_STACK_SIZE+0x58>
     2fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     2fe:	bf18      	it	ne
     300:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     304:	d029      	beq.n	35a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x5a>
     306:	ea94 0f05 	teq	r4, r5
     30a:	bf08      	it	eq
     30c:	ea90 0f02 	teqeq	r0, r2
     310:	d005      	beq.n	31e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x1e>
     312:	ea54 0c00 	orrs.w	ip, r4, r0
     316:	bf04      	itt	eq
     318:	4619      	moveq	r1, r3
     31a:	4610      	moveq	r0, r2
     31c:	bd30      	pop	{r4, r5, pc}
     31e:	ea91 0f03 	teq	r1, r3
     322:	bf1e      	ittt	ne
     324:	2100      	movne	r1, #0
     326:	2000      	movne	r0, #0
     328:	bd30      	popne	{r4, r5, pc}
     32a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     32e:	d105      	bne.n	33c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x3c>
     330:	0040      	lsls	r0, r0, #1
     332:	4149      	adcs	r1, r1
     334:	bf28      	it	cs
     336:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     33a:	bd30      	pop	{r4, r5, pc}
     33c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     340:	bf3c      	itt	cc
     342:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     346:	bd30      	popcc	{r4, r5, pc}
     348:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     34c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     350:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     354:	f04f 0000 	mov.w	r0, #0
     358:	bd30      	pop	{r4, r5, pc}
     35a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     35e:	bf1a      	itte	ne
     360:	4619      	movne	r1, r3
     362:	4610      	movne	r0, r2
     364:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     368:	bf1c      	itt	ne
     36a:	460b      	movne	r3, r1
     36c:	4602      	movne	r2, r0
     36e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     372:	bf06      	itte	eq
     374:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     378:	ea91 0f03 	teqeq	r1, r3
     37c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     380:	bd30      	pop	{r4, r5, pc}
     382:	bf00      	nop

00000384 <__aeabi_ui2d>:
     384:	f090 0f00 	teq	r0, #0
     388:	bf04      	itt	eq
     38a:	2100      	moveq	r1, #0
     38c:	4770      	bxeq	lr
     38e:	b530      	push	{r4, r5, lr}
     390:	f44f 6480 	mov.w	r4, #1024	; 0x400
     394:	f104 0432 	add.w	r4, r4, #50	; 0x32
     398:	f04f 0500 	mov.w	r5, #0
     39c:	f04f 0100 	mov.w	r1, #0
     3a0:	e750      	b.n	244 <CONFIG_UART_MUX_RX_STACK_SIZE+0x44>
     3a2:	bf00      	nop

000003a4 <__aeabi_i2d>:
     3a4:	f090 0f00 	teq	r0, #0
     3a8:	bf04      	itt	eq
     3aa:	2100      	moveq	r1, #0
     3ac:	4770      	bxeq	lr
     3ae:	b530      	push	{r4, r5, lr}
     3b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
     3b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
     3b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     3bc:	bf48      	it	mi
     3be:	4240      	negmi	r0, r0
     3c0:	f04f 0100 	mov.w	r1, #0
     3c4:	e73e      	b.n	244 <CONFIG_UART_MUX_RX_STACK_SIZE+0x44>
     3c6:	bf00      	nop

000003c8 <__aeabi_f2d>:
     3c8:	0042      	lsls	r2, r0, #1
     3ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
     3ce:	ea4f 0131 	mov.w	r1, r1, rrx
     3d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
     3d6:	bf1f      	itttt	ne
     3d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     3dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     3e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     3e4:	4770      	bxne	lr
     3e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     3ea:	bf08      	it	eq
     3ec:	4770      	bxeq	lr
     3ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     3f2:	bf04      	itt	eq
     3f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     3f8:	4770      	bxeq	lr
     3fa:	b530      	push	{r4, r5, lr}
     3fc:	f44f 7460 	mov.w	r4, #896	; 0x380
     400:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     404:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     408:	e71c      	b.n	244 <CONFIG_UART_MUX_RX_STACK_SIZE+0x44>
     40a:	bf00      	nop

0000040c <__aeabi_ul2d>:
     40c:	ea50 0201 	orrs.w	r2, r0, r1
     410:	bf08      	it	eq
     412:	4770      	bxeq	lr
     414:	b530      	push	{r4, r5, lr}
     416:	f04f 0500 	mov.w	r5, #0
     41a:	e00a      	b.n	432 <__aeabi_l2d+0x16>

0000041c <__aeabi_l2d>:
     41c:	ea50 0201 	orrs.w	r2, r0, r1
     420:	bf08      	it	eq
     422:	4770      	bxeq	lr
     424:	b530      	push	{r4, r5, lr}
     426:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     42a:	d502      	bpl.n	432 <__aeabi_l2d+0x16>
     42c:	4240      	negs	r0, r0
     42e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     432:	f44f 6480 	mov.w	r4, #1024	; 0x400
     436:	f104 0432 	add.w	r4, r4, #50	; 0x32
     43a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     43e:	f43f aed8 	beq.w	1f2 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x32>
     442:	f04f 0203 	mov.w	r2, #3
     446:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     44a:	bf18      	it	ne
     44c:	3203      	addne	r2, #3
     44e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     452:	bf18      	it	ne
     454:	3203      	addne	r2, #3
     456:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     45a:	f1c2 0320 	rsb	r3, r2, #32
     45e:	fa00 fc03 	lsl.w	ip, r0, r3
     462:	fa20 f002 	lsr.w	r0, r0, r2
     466:	fa01 fe03 	lsl.w	lr, r1, r3
     46a:	ea40 000e 	orr.w	r0, r0, lr
     46e:	fa21 f102 	lsr.w	r1, r1, r2
     472:	4414      	add	r4, r2
     474:	e6bd      	b.n	1f2 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x32>
     476:	bf00      	nop

00000478 <__aeabi_dmul>:
     478:	b570      	push	{r4, r5, r6, lr}
     47a:	f04f 0cff 	mov.w	ip, #255	; 0xff
     47e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     482:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     486:	bf1d      	ittte	ne
     488:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     48c:	ea94 0f0c 	teqne	r4, ip
     490:	ea95 0f0c 	teqne	r5, ip
     494:	f000 f8de 	bleq	654 <CONFIG_BT_COMPANY_ID+0x63>
     498:	442c      	add	r4, r5
     49a:	ea81 0603 	eor.w	r6, r1, r3
     49e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     4a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     4a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     4aa:	bf18      	it	ne
     4ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     4b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     4b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     4b8:	d038      	beq.n	52c <__aeabi_dmul+0xb4>
     4ba:	fba0 ce02 	umull	ip, lr, r0, r2
     4be:	f04f 0500 	mov.w	r5, #0
     4c2:	fbe1 e502 	umlal	lr, r5, r1, r2
     4c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     4ca:	fbe0 e503 	umlal	lr, r5, r0, r3
     4ce:	f04f 0600 	mov.w	r6, #0
     4d2:	fbe1 5603 	umlal	r5, r6, r1, r3
     4d6:	f09c 0f00 	teq	ip, #0
     4da:	bf18      	it	ne
     4dc:	f04e 0e01 	orrne.w	lr, lr, #1
     4e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     4e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     4e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     4ec:	d204      	bcs.n	4f8 <__aeabi_dmul+0x80>
     4ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     4f2:	416d      	adcs	r5, r5
     4f4:	eb46 0606 	adc.w	r6, r6, r6
     4f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     4fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     500:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     504:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     508:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     50c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     510:	bf88      	it	hi
     512:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     516:	d81e      	bhi.n	556 <__aeabi_dmul+0xde>
     518:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     51c:	bf08      	it	eq
     51e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     522:	f150 0000 	adcs.w	r0, r0, #0
     526:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     52a:	bd70      	pop	{r4, r5, r6, pc}
     52c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     530:	ea46 0101 	orr.w	r1, r6, r1
     534:	ea40 0002 	orr.w	r0, r0, r2
     538:	ea81 0103 	eor.w	r1, r1, r3
     53c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     540:	bfc2      	ittt	gt
     542:	ebd4 050c 	rsbsgt	r5, r4, ip
     546:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     54a:	bd70      	popgt	{r4, r5, r6, pc}
     54c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     550:	f04f 0e00 	mov.w	lr, #0
     554:	3c01      	subs	r4, #1
     556:	f300 80ab 	bgt.w	6b0 <CONFIG_BT_COMPANY_ID+0xbf>
     55a:	f114 0f36 	cmn.w	r4, #54	; 0x36
     55e:	bfde      	ittt	le
     560:	2000      	movle	r0, #0
     562:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     566:	bd70      	pople	{r4, r5, r6, pc}
     568:	f1c4 0400 	rsb	r4, r4, #0
     56c:	3c20      	subs	r4, #32
     56e:	da35      	bge.n	5dc <__aeabi_dmul+0x164>
     570:	340c      	adds	r4, #12
     572:	dc1b      	bgt.n	5ac <__aeabi_dmul+0x134>
     574:	f104 0414 	add.w	r4, r4, #20
     578:	f1c4 0520 	rsb	r5, r4, #32
     57c:	fa00 f305 	lsl.w	r3, r0, r5
     580:	fa20 f004 	lsr.w	r0, r0, r4
     584:	fa01 f205 	lsl.w	r2, r1, r5
     588:	ea40 0002 	orr.w	r0, r0, r2
     58c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     590:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     594:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     598:	fa21 f604 	lsr.w	r6, r1, r4
     59c:	eb42 0106 	adc.w	r1, r2, r6
     5a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5a4:	bf08      	it	eq
     5a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5aa:	bd70      	pop	{r4, r5, r6, pc}
     5ac:	f1c4 040c 	rsb	r4, r4, #12
     5b0:	f1c4 0520 	rsb	r5, r4, #32
     5b4:	fa00 f304 	lsl.w	r3, r0, r4
     5b8:	fa20 f005 	lsr.w	r0, r0, r5
     5bc:	fa01 f204 	lsl.w	r2, r1, r4
     5c0:	ea40 0002 	orr.w	r0, r0, r2
     5c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     5cc:	f141 0100 	adc.w	r1, r1, #0
     5d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5d4:	bf08      	it	eq
     5d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5da:	bd70      	pop	{r4, r5, r6, pc}
     5dc:	f1c4 0520 	rsb	r5, r4, #32
     5e0:	fa00 f205 	lsl.w	r2, r0, r5
     5e4:	ea4e 0e02 	orr.w	lr, lr, r2
     5e8:	fa20 f304 	lsr.w	r3, r0, r4
     5ec:	fa01 f205 	lsl.w	r2, r1, r5
     5f0:	ea43 0302 	orr.w	r3, r3, r2
     5f4:	fa21 f004 	lsr.w	r0, r1, r4
     5f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5fc:	fa21 f204 	lsr.w	r2, r1, r4
     600:	ea20 0002 	bic.w	r0, r0, r2
     604:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     608:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     60c:	bf08      	it	eq
     60e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     612:	bd70      	pop	{r4, r5, r6, pc}
     614:	f094 0f00 	teq	r4, #0
     618:	d10f      	bne.n	63a <CONFIG_BT_COMPANY_ID+0x49>
     61a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     61e:	0040      	lsls	r0, r0, #1
     620:	eb41 0101 	adc.w	r1, r1, r1
     624:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     628:	bf08      	it	eq
     62a:	3c01      	subeq	r4, #1
     62c:	d0f7      	beq.n	61e <CONFIG_BT_COMPANY_ID+0x2d>
     62e:	ea41 0106 	orr.w	r1, r1, r6
     632:	f095 0f00 	teq	r5, #0
     636:	bf18      	it	ne
     638:	4770      	bxne	lr
     63a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     63e:	0052      	lsls	r2, r2, #1
     640:	eb43 0303 	adc.w	r3, r3, r3
     644:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     648:	bf08      	it	eq
     64a:	3d01      	subeq	r5, #1
     64c:	d0f7      	beq.n	63e <CONFIG_BT_COMPANY_ID+0x4d>
     64e:	ea43 0306 	orr.w	r3, r3, r6
     652:	4770      	bx	lr
     654:	ea94 0f0c 	teq	r4, ip
     658:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     65c:	bf18      	it	ne
     65e:	ea95 0f0c 	teqne	r5, ip
     662:	d00c      	beq.n	67e <CONFIG_BT_COMPANY_ID+0x8d>
     664:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     668:	bf18      	it	ne
     66a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     66e:	d1d1      	bne.n	614 <CONFIG_BT_COMPANY_ID+0x23>
     670:	ea81 0103 	eor.w	r1, r1, r3
     674:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     678:	f04f 0000 	mov.w	r0, #0
     67c:	bd70      	pop	{r4, r5, r6, pc}
     67e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     682:	bf06      	itte	eq
     684:	4610      	moveq	r0, r2
     686:	4619      	moveq	r1, r3
     688:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     68c:	d019      	beq.n	6c2 <CONFIG_BT_COMPANY_ID+0xd1>
     68e:	ea94 0f0c 	teq	r4, ip
     692:	d102      	bne.n	69a <CONFIG_BT_COMPANY_ID+0xa9>
     694:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     698:	d113      	bne.n	6c2 <CONFIG_BT_COMPANY_ID+0xd1>
     69a:	ea95 0f0c 	teq	r5, ip
     69e:	d105      	bne.n	6ac <CONFIG_BT_COMPANY_ID+0xbb>
     6a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     6a4:	bf1c      	itt	ne
     6a6:	4610      	movne	r0, r2
     6a8:	4619      	movne	r1, r3
     6aa:	d10a      	bne.n	6c2 <CONFIG_BT_COMPANY_ID+0xd1>
     6ac:	ea81 0103 	eor.w	r1, r1, r3
     6b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     6b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     6bc:	f04f 0000 	mov.w	r0, #0
     6c0:	bd70      	pop	{r4, r5, r6, pc}
     6c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     6ca:	bd70      	pop	{r4, r5, r6, pc}

000006cc <__aeabi_ddiv>:
     6cc:	b570      	push	{r4, r5, r6, lr}
     6ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
     6d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     6d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     6da:	bf1d      	ittte	ne
     6dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     6e0:	ea94 0f0c 	teqne	r4, ip
     6e4:	ea95 0f0c 	teqne	r5, ip
     6e8:	f000 f8a7 	bleq	83a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x3a>
     6ec:	eba4 0405 	sub.w	r4, r4, r5
     6f0:	ea81 0e03 	eor.w	lr, r1, r3
     6f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     6f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
     6fc:	f000 8088 	beq.w	810 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x10>
     700:	ea4f 3303 	mov.w	r3, r3, lsl #12
     704:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     708:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     70c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     710:	ea4f 2202 	mov.w	r2, r2, lsl #8
     714:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     718:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     71c:	ea4f 2600 	mov.w	r6, r0, lsl #8
     720:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     724:	429d      	cmp	r5, r3
     726:	bf08      	it	eq
     728:	4296      	cmpeq	r6, r2
     72a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     72e:	f504 7440 	add.w	r4, r4, #768	; 0x300
     732:	d202      	bcs.n	73a <__aeabi_ddiv+0x6e>
     734:	085b      	lsrs	r3, r3, #1
     736:	ea4f 0232 	mov.w	r2, r2, rrx
     73a:	1ab6      	subs	r6, r6, r2
     73c:	eb65 0503 	sbc.w	r5, r5, r3
     740:	085b      	lsrs	r3, r3, #1
     742:	ea4f 0232 	mov.w	r2, r2, rrx
     746:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     74a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     74e:	ebb6 0e02 	subs.w	lr, r6, r2
     752:	eb75 0e03 	sbcs.w	lr, r5, r3
     756:	bf22      	ittt	cs
     758:	1ab6      	subcs	r6, r6, r2
     75a:	4675      	movcs	r5, lr
     75c:	ea40 000c 	orrcs.w	r0, r0, ip
     760:	085b      	lsrs	r3, r3, #1
     762:	ea4f 0232 	mov.w	r2, r2, rrx
     766:	ebb6 0e02 	subs.w	lr, r6, r2
     76a:	eb75 0e03 	sbcs.w	lr, r5, r3
     76e:	bf22      	ittt	cs
     770:	1ab6      	subcs	r6, r6, r2
     772:	4675      	movcs	r5, lr
     774:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     778:	085b      	lsrs	r3, r3, #1
     77a:	ea4f 0232 	mov.w	r2, r2, rrx
     77e:	ebb6 0e02 	subs.w	lr, r6, r2
     782:	eb75 0e03 	sbcs.w	lr, r5, r3
     786:	bf22      	ittt	cs
     788:	1ab6      	subcs	r6, r6, r2
     78a:	4675      	movcs	r5, lr
     78c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     790:	085b      	lsrs	r3, r3, #1
     792:	ea4f 0232 	mov.w	r2, r2, rrx
     796:	ebb6 0e02 	subs.w	lr, r6, r2
     79a:	eb75 0e03 	sbcs.w	lr, r5, r3
     79e:	bf22      	ittt	cs
     7a0:	1ab6      	subcs	r6, r6, r2
     7a2:	4675      	movcs	r5, lr
     7a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     7a8:	ea55 0e06 	orrs.w	lr, r5, r6
     7ac:	d018      	beq.n	7e0 <__aeabi_ddiv+0x114>
     7ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
     7b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     7b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
     7ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     7be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     7c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     7c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     7ca:	d1c0      	bne.n	74e <__aeabi_ddiv+0x82>
     7cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7d0:	d10b      	bne.n	7ea <__aeabi_ddiv+0x11e>
     7d2:	ea41 0100 	orr.w	r1, r1, r0
     7d6:	f04f 0000 	mov.w	r0, #0
     7da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     7de:	e7b6      	b.n	74e <__aeabi_ddiv+0x82>
     7e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7e4:	bf04      	itt	eq
     7e6:	4301      	orreq	r1, r0
     7e8:	2000      	moveq	r0, #0
     7ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     7ee:	bf88      	it	hi
     7f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     7f4:	f63f aeaf 	bhi.w	556 <__aeabi_dmul+0xde>
     7f8:	ebb5 0c03 	subs.w	ip, r5, r3
     7fc:	bf04      	itt	eq
     7fe:	ebb6 0c02 	subseq.w	ip, r6, r2
     802:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     806:	f150 0000 	adcs.w	r0, r0, #0
     80a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     80e:	bd70      	pop	{r4, r5, r6, pc}
     810:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     814:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     818:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     81c:	bfc2      	ittt	gt
     81e:	ebd4 050c 	rsbsgt	r5, r4, ip
     822:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     826:	bd70      	popgt	{r4, r5, r6, pc}
     828:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     82c:	f04f 0e00 	mov.w	lr, #0
     830:	3c01      	subs	r4, #1
     832:	e690      	b.n	556 <__aeabi_dmul+0xde>
     834:	ea45 0e06 	orr.w	lr, r5, r6
     838:	e68d      	b.n	556 <__aeabi_dmul+0xde>
     83a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     83e:	ea94 0f0c 	teq	r4, ip
     842:	bf08      	it	eq
     844:	ea95 0f0c 	teqeq	r5, ip
     848:	f43f af3b 	beq.w	6c2 <CONFIG_BT_COMPANY_ID+0xd1>
     84c:	ea94 0f0c 	teq	r4, ip
     850:	d10a      	bne.n	868 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x68>
     852:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     856:	f47f af34 	bne.w	6c2 <CONFIG_BT_COMPANY_ID+0xd1>
     85a:	ea95 0f0c 	teq	r5, ip
     85e:	f47f af25 	bne.w	6ac <CONFIG_BT_COMPANY_ID+0xbb>
     862:	4610      	mov	r0, r2
     864:	4619      	mov	r1, r3
     866:	e72c      	b.n	6c2 <CONFIG_BT_COMPANY_ID+0xd1>
     868:	ea95 0f0c 	teq	r5, ip
     86c:	d106      	bne.n	87c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x7c>
     86e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     872:	f43f aefd 	beq.w	670 <CONFIG_BT_COMPANY_ID+0x7f>
     876:	4610      	mov	r0, r2
     878:	4619      	mov	r1, r3
     87a:	e722      	b.n	6c2 <CONFIG_BT_COMPANY_ID+0xd1>
     87c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     880:	bf18      	it	ne
     882:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     886:	f47f aec5 	bne.w	614 <CONFIG_BT_COMPANY_ID+0x23>
     88a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     88e:	f47f af0d 	bne.w	6ac <CONFIG_BT_COMPANY_ID+0xbb>
     892:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     896:	f47f aeeb 	bne.w	670 <CONFIG_BT_COMPANY_ID+0x7f>
     89a:	e712      	b.n	6c2 <CONFIG_BT_COMPANY_ID+0xd1>

0000089c <__gedf2>:
     89c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
     8a0:	e006      	b.n	8b0 <__cmpdf2+0x4>
     8a2:	bf00      	nop

000008a4 <__ledf2>:
     8a4:	f04f 0c01 	mov.w	ip, #1
     8a8:	e002      	b.n	8b0 <__cmpdf2+0x4>
     8aa:	bf00      	nop

000008ac <__cmpdf2>:
     8ac:	f04f 0c01 	mov.w	ip, #1
     8b0:	f84d cd04 	str.w	ip, [sp, #-4]!
     8b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     8b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     8bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     8c0:	bf18      	it	ne
     8c2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
     8c6:	d01b      	beq.n	900 <__cmpdf2+0x54>
     8c8:	b001      	add	sp, #4
     8ca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
     8ce:	bf0c      	ite	eq
     8d0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
     8d4:	ea91 0f03 	teqne	r1, r3
     8d8:	bf02      	ittt	eq
     8da:	ea90 0f02 	teqeq	r0, r2
     8de:	2000      	moveq	r0, #0
     8e0:	4770      	bxeq	lr
     8e2:	f110 0f00 	cmn.w	r0, #0
     8e6:	ea91 0f03 	teq	r1, r3
     8ea:	bf58      	it	pl
     8ec:	4299      	cmppl	r1, r3
     8ee:	bf08      	it	eq
     8f0:	4290      	cmpeq	r0, r2
     8f2:	bf2c      	ite	cs
     8f4:	17d8      	asrcs	r0, r3, #31
     8f6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
     8fa:	f040 0001 	orr.w	r0, r0, #1
     8fe:	4770      	bx	lr
     900:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     908:	d102      	bne.n	910 <__cmpdf2+0x64>
     90a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     90e:	d107      	bne.n	920 <__cmpdf2+0x74>
     910:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     914:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     918:	d1d6      	bne.n	8c8 <__cmpdf2+0x1c>
     91a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     91e:	d0d3      	beq.n	8c8 <__cmpdf2+0x1c>
     920:	f85d 0b04 	ldr.w	r0, [sp], #4
     924:	4770      	bx	lr
     926:	bf00      	nop

00000928 <__aeabi_cdrcmple>:
     928:	4684      	mov	ip, r0
     92a:	4610      	mov	r0, r2
     92c:	4662      	mov	r2, ip
     92e:	468c      	mov	ip, r1
     930:	4619      	mov	r1, r3
     932:	4663      	mov	r3, ip
     934:	e000      	b.n	938 <__aeabi_cdcmpeq>
     936:	bf00      	nop

00000938 <__aeabi_cdcmpeq>:
     938:	b501      	push	{r0, lr}
     93a:	f7ff ffb7 	bl	8ac <__cmpdf2>
     93e:	2800      	cmp	r0, #0
     940:	bf48      	it	mi
     942:	f110 0f00 	cmnmi.w	r0, #0
     946:	bd01      	pop	{r0, pc}

00000948 <__aeabi_dcmpeq>:
     948:	f84d ed08 	str.w	lr, [sp, #-8]!
     94c:	f7ff fff4 	bl	938 <__aeabi_cdcmpeq>
     950:	bf0c      	ite	eq
     952:	2001      	moveq	r0, #1
     954:	2000      	movne	r0, #0
     956:	f85d fb08 	ldr.w	pc, [sp], #8
     95a:	bf00      	nop

0000095c <__aeabi_dcmplt>:
     95c:	f84d ed08 	str.w	lr, [sp, #-8]!
     960:	f7ff ffea 	bl	938 <__aeabi_cdcmpeq>
     964:	bf34      	ite	cc
     966:	2001      	movcc	r0, #1
     968:	2000      	movcs	r0, #0
     96a:	f85d fb08 	ldr.w	pc, [sp], #8
     96e:	bf00      	nop

00000970 <__aeabi_dcmple>:
     970:	f84d ed08 	str.w	lr, [sp, #-8]!
     974:	f7ff ffe0 	bl	938 <__aeabi_cdcmpeq>
     978:	bf94      	ite	ls
     97a:	2001      	movls	r0, #1
     97c:	2000      	movhi	r0, #0
     97e:	f85d fb08 	ldr.w	pc, [sp], #8
     982:	bf00      	nop

00000984 <__aeabi_dcmpge>:
     984:	f84d ed08 	str.w	lr, [sp, #-8]!
     988:	f7ff ffce 	bl	928 <__aeabi_cdrcmple>
     98c:	bf94      	ite	ls
     98e:	2001      	movls	r0, #1
     990:	2000      	movhi	r0, #0
     992:	f85d fb08 	ldr.w	pc, [sp], #8
     996:	bf00      	nop

00000998 <__aeabi_dcmpgt>:
     998:	f84d ed08 	str.w	lr, [sp, #-8]!
     99c:	f7ff ffc4 	bl	928 <__aeabi_cdrcmple>
     9a0:	bf34      	ite	cc
     9a2:	2001      	movcc	r0, #1
     9a4:	2000      	movcs	r0, #0
     9a6:	f85d fb08 	ldr.w	pc, [sp], #8
     9aa:	bf00      	nop

000009ac <__aeabi_d2iz>:
     9ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
     9b0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     9b4:	d215      	bcs.n	9e2 <__aeabi_d2iz+0x36>
     9b6:	d511      	bpl.n	9dc <__aeabi_d2iz+0x30>
     9b8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     9bc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     9c0:	d912      	bls.n	9e8 <__aeabi_d2iz+0x3c>
     9c2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     9c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     9ca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     9ce:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     9d2:	fa23 f002 	lsr.w	r0, r3, r2
     9d6:	bf18      	it	ne
     9d8:	4240      	negne	r0, r0
     9da:	4770      	bx	lr
     9dc:	f04f 0000 	mov.w	r0, #0
     9e0:	4770      	bx	lr
     9e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     9e6:	d105      	bne.n	9f4 <__aeabi_d2iz+0x48>
     9e8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
     9ec:	bf08      	it	eq
     9ee:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
     9f2:	4770      	bx	lr
     9f4:	f04f 0000 	mov.w	r0, #0
     9f8:	4770      	bx	lr
     9fa:	bf00      	nop

000009fc <__aeabi_d2uiz>:
     9fc:	004a      	lsls	r2, r1, #1
     9fe:	d211      	bcs.n	a24 <__aeabi_d2uiz+0x28>
     a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     a04:	d211      	bcs.n	a2a <__aeabi_d2uiz+0x2e>
     a06:	d50d      	bpl.n	a24 <__aeabi_d2uiz+0x28>
     a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     a10:	d40e      	bmi.n	a30 <__aeabi_d2uiz+0x34>
     a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     a1e:	fa23 f002 	lsr.w	r0, r3, r2
     a22:	4770      	bx	lr
     a24:	f04f 0000 	mov.w	r0, #0
     a28:	4770      	bx	lr
     a2a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     a2e:	d102      	bne.n	a36 <__aeabi_d2uiz+0x3a>
     a30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     a34:	4770      	bx	lr
     a36:	f04f 0000 	mov.w	r0, #0
     a3a:	4770      	bx	lr

00000a3c <__aeabi_uldivmod>:
     a3c:	b953      	cbnz	r3, a54 <__aeabi_uldivmod+0x18>
     a3e:	b94a      	cbnz	r2, a54 <__aeabi_uldivmod+0x18>
     a40:	2900      	cmp	r1, #0
     a42:	bf08      	it	eq
     a44:	2800      	cmpeq	r0, #0
     a46:	bf1c      	itt	ne
     a48:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     a4c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     a50:	f000 b96e 	b.w	d30 <__aeabi_idiv0>
     a54:	f1ad 0c08 	sub.w	ip, sp, #8
     a58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     a5c:	f000 f806 	bl	a6c <__udivmoddi4>
     a60:	f8dd e004 	ldr.w	lr, [sp, #4]
     a64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     a68:	b004      	add	sp, #16
     a6a:	4770      	bx	lr

00000a6c <__udivmoddi4>:
     a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     a70:	9d08      	ldr	r5, [sp, #32]
     a72:	460e      	mov	r6, r1
     a74:	4604      	mov	r4, r0
     a76:	468c      	mov	ip, r1
     a78:	2b00      	cmp	r3, #0
     a7a:	f040 8081 	bne.w	b80 <__udivmoddi4+0x114>
     a7e:	428a      	cmp	r2, r1
     a80:	4617      	mov	r7, r2
     a82:	d945      	bls.n	b10 <__udivmoddi4+0xa4>
     a84:	fab2 f282 	clz	r2, r2
     a88:	b14a      	cbz	r2, a9e <__udivmoddi4+0x32>
     a8a:	f1c2 0120 	rsb	r1, r2, #32
     a8e:	fa06 f302 	lsl.w	r3, r6, r2
     a92:	fa20 f101 	lsr.w	r1, r0, r1
     a96:	4097      	lsls	r7, r2
     a98:	ea41 0c03 	orr.w	ip, r1, r3
     a9c:	4094      	lsls	r4, r2
     a9e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     aa2:	0c23      	lsrs	r3, r4, #16
     aa4:	fbbc f6fe 	udiv	r6, ip, lr
     aa8:	b2b9      	uxth	r1, r7
     aaa:	fb0e cc16 	mls	ip, lr, r6, ip
     aae:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     ab2:	fb06 f001 	mul.w	r0, r6, r1
     ab6:	4298      	cmp	r0, r3
     ab8:	d909      	bls.n	ace <__udivmoddi4+0x62>
     aba:	18fb      	adds	r3, r7, r3
     abc:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
     ac0:	f080 8115 	bcs.w	cee <__udivmoddi4+0x282>
     ac4:	4298      	cmp	r0, r3
     ac6:	f240 8112 	bls.w	cee <__udivmoddi4+0x282>
     aca:	3e02      	subs	r6, #2
     acc:	443b      	add	r3, r7
     ace:	1a1b      	subs	r3, r3, r0
     ad0:	b2a4      	uxth	r4, r4
     ad2:	fbb3 f0fe 	udiv	r0, r3, lr
     ad6:	fb0e 3310 	mls	r3, lr, r0, r3
     ada:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     ade:	fb00 f101 	mul.w	r1, r0, r1
     ae2:	42a1      	cmp	r1, r4
     ae4:	d909      	bls.n	afa <__udivmoddi4+0x8e>
     ae6:	193c      	adds	r4, r7, r4
     ae8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     aec:	f080 8101 	bcs.w	cf2 <__udivmoddi4+0x286>
     af0:	42a1      	cmp	r1, r4
     af2:	f240 80fe 	bls.w	cf2 <__udivmoddi4+0x286>
     af6:	3802      	subs	r0, #2
     af8:	443c      	add	r4, r7
     afa:	1a64      	subs	r4, r4, r1
     afc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     b00:	2100      	movs	r1, #0
     b02:	b11d      	cbz	r5, b0c <__udivmoddi4+0xa0>
     b04:	40d4      	lsrs	r4, r2
     b06:	2300      	movs	r3, #0
     b08:	e9c5 4300 	strd	r4, r3, [r5]
     b0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     b10:	b902      	cbnz	r2, b14 <__udivmoddi4+0xa8>
     b12:	deff      	udf	#255	; 0xff
     b14:	fab2 f282 	clz	r2, r2
     b18:	2a00      	cmp	r2, #0
     b1a:	d14f      	bne.n	bbc <__udivmoddi4+0x150>
     b1c:	1bcb      	subs	r3, r1, r7
     b1e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     b22:	fa1f f887 	uxth.w	r8, r7
     b26:	2101      	movs	r1, #1
     b28:	fbb3 fcfe 	udiv	ip, r3, lr
     b2c:	0c26      	lsrs	r6, r4, #16
     b2e:	fb0e 331c 	mls	r3, lr, ip, r3
     b32:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
     b36:	fb08 f30c 	mul.w	r3, r8, ip
     b3a:	42b3      	cmp	r3, r6
     b3c:	d907      	bls.n	b4e <__udivmoddi4+0xe2>
     b3e:	19be      	adds	r6, r7, r6
     b40:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     b44:	d202      	bcs.n	b4c <__udivmoddi4+0xe0>
     b46:	42b3      	cmp	r3, r6
     b48:	f200 80eb 	bhi.w	d22 <__udivmoddi4+0x2b6>
     b4c:	4684      	mov	ip, r0
     b4e:	1af6      	subs	r6, r6, r3
     b50:	b2a3      	uxth	r3, r4
     b52:	fbb6 f0fe 	udiv	r0, r6, lr
     b56:	fb0e 6610 	mls	r6, lr, r0, r6
     b5a:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
     b5e:	fb08 f800 	mul.w	r8, r8, r0
     b62:	45a0      	cmp	r8, r4
     b64:	d907      	bls.n	b76 <__udivmoddi4+0x10a>
     b66:	193c      	adds	r4, r7, r4
     b68:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     b6c:	d202      	bcs.n	b74 <__udivmoddi4+0x108>
     b6e:	45a0      	cmp	r8, r4
     b70:	f200 80d2 	bhi.w	d18 <__udivmoddi4+0x2ac>
     b74:	4618      	mov	r0, r3
     b76:	eba4 0408 	sub.w	r4, r4, r8
     b7a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     b7e:	e7c0      	b.n	b02 <__udivmoddi4+0x96>
     b80:	428b      	cmp	r3, r1
     b82:	d908      	bls.n	b96 <__udivmoddi4+0x12a>
     b84:	2d00      	cmp	r5, #0
     b86:	f000 80af 	beq.w	ce8 <__udivmoddi4+0x27c>
     b8a:	2100      	movs	r1, #0
     b8c:	e9c5 0600 	strd	r0, r6, [r5]
     b90:	4608      	mov	r0, r1
     b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     b96:	fab3 f183 	clz	r1, r3
     b9a:	2900      	cmp	r1, #0
     b9c:	d149      	bne.n	c32 <__udivmoddi4+0x1c6>
     b9e:	42b3      	cmp	r3, r6
     ba0:	d302      	bcc.n	ba8 <__udivmoddi4+0x13c>
     ba2:	4282      	cmp	r2, r0
     ba4:	f200 80bb 	bhi.w	d1e <__udivmoddi4+0x2b2>
     ba8:	1a84      	subs	r4, r0, r2
     baa:	eb66 0303 	sbc.w	r3, r6, r3
     bae:	2001      	movs	r0, #1
     bb0:	469c      	mov	ip, r3
     bb2:	2d00      	cmp	r5, #0
     bb4:	d0aa      	beq.n	b0c <__udivmoddi4+0xa0>
     bb6:	e9c5 4c00 	strd	r4, ip, [r5]
     bba:	e7a7      	b.n	b0c <__udivmoddi4+0xa0>
     bbc:	f1c2 0320 	rsb	r3, r2, #32
     bc0:	4097      	lsls	r7, r2
     bc2:	40d8      	lsrs	r0, r3
     bc4:	4091      	lsls	r1, r2
     bc6:	40de      	lsrs	r6, r3
     bc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     bcc:	4308      	orrs	r0, r1
     bce:	ea4f 4c10 	mov.w	ip, r0, lsr #16
     bd2:	fbb6 f1fe 	udiv	r1, r6, lr
     bd6:	fa1f f887 	uxth.w	r8, r7
     bda:	fb0e 6611 	mls	r6, lr, r1, r6
     bde:	ea4c 4606 	orr.w	r6, ip, r6, lsl #16
     be2:	fb01 f308 	mul.w	r3, r1, r8
     be6:	42b3      	cmp	r3, r6
     be8:	fa04 f402 	lsl.w	r4, r4, r2
     bec:	d909      	bls.n	c02 <__udivmoddi4+0x196>
     bee:	19be      	adds	r6, r7, r6
     bf0:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
     bf4:	f080 808e 	bcs.w	d14 <__udivmoddi4+0x2a8>
     bf8:	42b3      	cmp	r3, r6
     bfa:	f240 808b 	bls.w	d14 <__udivmoddi4+0x2a8>
     bfe:	3902      	subs	r1, #2
     c00:	443e      	add	r6, r7
     c02:	1af3      	subs	r3, r6, r3
     c04:	b286      	uxth	r6, r0
     c06:	fbb3 f0fe 	udiv	r0, r3, lr
     c0a:	fb0e 3310 	mls	r3, lr, r0, r3
     c0e:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
     c12:	fb00 f308 	mul.w	r3, r0, r8
     c16:	42b3      	cmp	r3, r6
     c18:	d907      	bls.n	c2a <__udivmoddi4+0x1be>
     c1a:	19be      	adds	r6, r7, r6
     c1c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
     c20:	d274      	bcs.n	d0c <__udivmoddi4+0x2a0>
     c22:	42b3      	cmp	r3, r6
     c24:	d972      	bls.n	d0c <__udivmoddi4+0x2a0>
     c26:	3802      	subs	r0, #2
     c28:	443e      	add	r6, r7
     c2a:	1af3      	subs	r3, r6, r3
     c2c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     c30:	e77a      	b.n	b28 <__udivmoddi4+0xbc>
     c32:	f1c1 0720 	rsb	r7, r1, #32
     c36:	fa03 f401 	lsl.w	r4, r3, r1
     c3a:	fa22 f307 	lsr.w	r3, r2, r7
     c3e:	431c      	orrs	r4, r3
     c40:	fa20 f907 	lsr.w	r9, r0, r7
     c44:	fa06 f301 	lsl.w	r3, r6, r1
     c48:	ea4f 4c14 	mov.w	ip, r4, lsr #16
     c4c:	40fe      	lsrs	r6, r7
     c4e:	ea49 0903 	orr.w	r9, r9, r3
     c52:	ea4f 4319 	mov.w	r3, r9, lsr #16
     c56:	fbb6 fefc 	udiv	lr, r6, ip
     c5a:	fa1f f884 	uxth.w	r8, r4
     c5e:	fb0c 661e 	mls	r6, ip, lr, r6
     c62:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
     c66:	fb0e fa08 	mul.w	sl, lr, r8
     c6a:	45b2      	cmp	sl, r6
     c6c:	fa02 f201 	lsl.w	r2, r2, r1
     c70:	fa00 f301 	lsl.w	r3, r0, r1
     c74:	d908      	bls.n	c88 <__udivmoddi4+0x21c>
     c76:	19a6      	adds	r6, r4, r6
     c78:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
     c7c:	d248      	bcs.n	d10 <__udivmoddi4+0x2a4>
     c7e:	45b2      	cmp	sl, r6
     c80:	d946      	bls.n	d10 <__udivmoddi4+0x2a4>
     c82:	f1ae 0e02 	sub.w	lr, lr, #2
     c86:	4426      	add	r6, r4
     c88:	eba6 060a 	sub.w	r6, r6, sl
     c8c:	fa1f f989 	uxth.w	r9, r9
     c90:	fbb6 f0fc 	udiv	r0, r6, ip
     c94:	fb0c 6610 	mls	r6, ip, r0, r6
     c98:	ea49 4606 	orr.w	r6, r9, r6, lsl #16
     c9c:	fb00 f808 	mul.w	r8, r0, r8
     ca0:	45b0      	cmp	r8, r6
     ca2:	d907      	bls.n	cb4 <__udivmoddi4+0x248>
     ca4:	19a6      	adds	r6, r4, r6
     ca6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
     caa:	d22d      	bcs.n	d08 <__udivmoddi4+0x29c>
     cac:	45b0      	cmp	r8, r6
     cae:	d92b      	bls.n	d08 <__udivmoddi4+0x29c>
     cb0:	3802      	subs	r0, #2
     cb2:	4426      	add	r6, r4
     cb4:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     cb8:	eba6 0608 	sub.w	r6, r6, r8
     cbc:	fba0 8902 	umull	r8, r9, r0, r2
     cc0:	454e      	cmp	r6, r9
     cc2:	46c4      	mov	ip, r8
     cc4:	46ce      	mov	lr, r9
     cc6:	d318      	bcc.n	cfa <__udivmoddi4+0x28e>
     cc8:	d015      	beq.n	cf6 <__udivmoddi4+0x28a>
     cca:	b375      	cbz	r5, d2a <__udivmoddi4+0x2be>
     ccc:	ebb3 020c 	subs.w	r2, r3, ip
     cd0:	eb66 060e 	sbc.w	r6, r6, lr
     cd4:	fa06 f707 	lsl.w	r7, r6, r7
     cd8:	fa22 f301 	lsr.w	r3, r2, r1
     cdc:	40ce      	lsrs	r6, r1
     cde:	431f      	orrs	r7, r3
     ce0:	e9c5 7600 	strd	r7, r6, [r5]
     ce4:	2100      	movs	r1, #0
     ce6:	e711      	b.n	b0c <__udivmoddi4+0xa0>
     ce8:	4629      	mov	r1, r5
     cea:	4628      	mov	r0, r5
     cec:	e70e      	b.n	b0c <__udivmoddi4+0xa0>
     cee:	4666      	mov	r6, ip
     cf0:	e6ed      	b.n	ace <__udivmoddi4+0x62>
     cf2:	4618      	mov	r0, r3
     cf4:	e701      	b.n	afa <__udivmoddi4+0x8e>
     cf6:	4543      	cmp	r3, r8
     cf8:	d2e7      	bcs.n	cca <__udivmoddi4+0x25e>
     cfa:	ebb8 0c02 	subs.w	ip, r8, r2
     cfe:	eb69 0404 	sbc.w	r4, r9, r4
     d02:	3801      	subs	r0, #1
     d04:	46a6      	mov	lr, r4
     d06:	e7e0      	b.n	cca <__udivmoddi4+0x25e>
     d08:	4660      	mov	r0, ip
     d0a:	e7d3      	b.n	cb4 <__udivmoddi4+0x248>
     d0c:	4660      	mov	r0, ip
     d0e:	e78c      	b.n	c2a <__udivmoddi4+0x1be>
     d10:	4686      	mov	lr, r0
     d12:	e7b9      	b.n	c88 <__udivmoddi4+0x21c>
     d14:	4661      	mov	r1, ip
     d16:	e774      	b.n	c02 <__udivmoddi4+0x196>
     d18:	3802      	subs	r0, #2
     d1a:	443c      	add	r4, r7
     d1c:	e72b      	b.n	b76 <__udivmoddi4+0x10a>
     d1e:	4608      	mov	r0, r1
     d20:	e747      	b.n	bb2 <__udivmoddi4+0x146>
     d22:	f1ac 0c02 	sub.w	ip, ip, #2
     d26:	443e      	add	r6, r7
     d28:	e711      	b.n	b4e <__udivmoddi4+0xe2>
     d2a:	4629      	mov	r1, r5
     d2c:	e6ee      	b.n	b0c <__udivmoddi4+0xa0>
     d2e:	bf00      	nop

00000d30 <__aeabi_idiv0>:
     d30:	4770      	bx	lr
     d32:	bf00      	nop
     d34:	0000      	movs	r0, r0
	...

00000d38 <hci_init>:
	}
}
#endif /* CONFIG_BT_HCI_VS_EXT */

static int hci_init(void)
{
     d38:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
     d3a:	4d45      	ldr	r5, [pc, #276]	; (e50 <hci_init+0x118>)
     d3c:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
     d40:	6899      	ldr	r1, [r3, #8]
     d42:	f011 0101 	ands.w	r1, r1, #1
{
     d46:	b089      	sub	sp, #36	; 0x24
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
     d48:	d121      	bne.n	d8e <hci_init+0x56>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
     d4a:	aa03      	add	r2, sp, #12
     d4c:	f640 4003 	movw	r0, #3075	; 0xc03
     d50:	f007 ffa0 	bl	8c94 <bt_hci_cmd_send_sync>
		if (err) {
     d54:	4604      	mov	r4, r0
     d56:	2800      	cmp	r0, #0
     d58:	d176      	bne.n	e48 <hci_init+0x110>
		hci_reset_complete(rsp);
     d5a:	9b03      	ldr	r3, [sp, #12]
	uint8_t status = buf->data[0];
     d5c:	689b      	ldr	r3, [r3, #8]
	if (status) {
     d5e:	781b      	ldrb	r3, [r3, #0]
     d60:	b993      	cbnz	r3, d88 <hci_init+0x50>
	scan_dev_found_cb = NULL;
     d62:	4a3c      	ldr	r2, [pc, #240]	; (e54 <hci_init+0x11c>)
     d64:	6013      	str	r3, [r2, #0]
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
     d66:	f105 0398 	add.w	r3, r5, #152	; 0x98
     d6a:	4618      	mov	r0, r3
     d6c:	f01f f9a0 	bl	200b0 <atomic_get>
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
     d70:	f3bf 8f5b 	dmb	ish
     d74:	f000 0005 	and.w	r0, r0, #5
     d78:	e853 2f00 	ldrex	r2, [r3]
     d7c:	e843 0100 	strex	r1, r0, [r3]
     d80:	2900      	cmp	r1, #0
     d82:	d1f9      	bne.n	d78 <hci_init+0x40>
     d84:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
     d88:	9803      	ldr	r0, [sp, #12]
     d8a:	f01a fea5 	bl	1bad8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
     d8e:	aa03      	add	r2, sp, #12
     d90:	2100      	movs	r1, #0
     d92:	f241 0003 	movw	r0, #4099	; 0x1003
     d96:	f007 ff7d 	bl	8c94 <bt_hci_cmd_send_sync>
	if (err) {
     d9a:	4604      	mov	r4, r0
     d9c:	2800      	cmp	r0, #0
     d9e:	d153      	bne.n	e48 <hci_init+0x110>
	read_local_features_complete(rsp);
     da0:	9b03      	ldr	r3, [sp, #12]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
     da2:	482d      	ldr	r0, [pc, #180]	; (e58 <hci_init+0x120>)
     da4:	6899      	ldr	r1, [r3, #8]
     da6:	2208      	movs	r2, #8
     da8:	3101      	adds	r1, #1
     daa:	f01f f860 	bl	1fe6e <memcpy>
	net_buf_unref(rsp);
     dae:	9803      	ldr	r0, [sp, #12]
     db0:	f01a fe92 	bl	1bad8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
     db4:	4621      	mov	r1, r4
     db6:	aa03      	add	r2, sp, #12
     db8:	f241 0001 	movw	r0, #4097	; 0x1001
     dbc:	f007 ff6a 	bl	8c94 <bt_hci_cmd_send_sync>
	if (err) {
     dc0:	4604      	mov	r4, r0
     dc2:	2800      	cmp	r0, #0
     dc4:	d140      	bne.n	e48 <hci_init+0x110>
	read_local_ver_complete(rsp);
     dc6:	9803      	ldr	r0, [sp, #12]
     dc8:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
     dca:	785a      	ldrb	r2, [r3, #1]
     dcc:	f885 2038 	strb.w	r2, [r5, #56]	; 0x38
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
     dd0:	78d9      	ldrb	r1, [r3, #3]
     dd2:	789a      	ldrb	r2, [r3, #2]
     dd4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
     dd8:	876a      	strh	r2, [r5, #58]	; 0x3a
	bt_dev.lmp_version = rp->lmp_version;
     dda:	791a      	ldrb	r2, [r3, #4]
     ddc:	f885 2039 	strb.w	r2, [r5, #57]	; 0x39
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
     de0:	7a19      	ldrb	r1, [r3, #8]
     de2:	79da      	ldrb	r2, [r3, #7]
     de4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
     de8:	87aa      	strh	r2, [r5, #60]	; 0x3c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
     dea:	795a      	ldrb	r2, [r3, #5]
     dec:	799b      	ldrb	r3, [r3, #6]
     dee:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
     df2:	87eb      	strh	r3, [r5, #62]	; 0x3e
	net_buf_unref(rsp);
     df4:	f01a fe70 	bl	1bad8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
     df8:	4621      	mov	r1, r4
     dfa:	aa03      	add	r2, sp, #12
     dfc:	f241 0002 	movw	r0, #4098	; 0x1002
     e00:	f007 ff48 	bl	8c94 <bt_hci_cmd_send_sync>
	if (err) {
     e04:	4604      	mov	r4, r0
     e06:	b9f8      	cbnz	r0, e48 <hci_init+0x110>
	read_supported_commands_complete(rsp);
     e08:	9b03      	ldr	r3, [sp, #12]
	memcpy(bt_dev.supported_commands, rp->commands,
     e0a:	4814      	ldr	r0, [pc, #80]	; (e5c <hci_init+0x124>)
     e0c:	6899      	ldr	r1, [r3, #8]
     e0e:	2240      	movs	r2, #64	; 0x40
     e10:	3101      	adds	r1, #1
     e12:	f01f f82c 	bl	1fe6e <memcpy>
		bt_dev.supported_commands[34] |= 0x04;
     e16:	f895 306a 	ldrb.w	r3, [r5, #106]	; 0x6a
	net_buf_unref(rsp);
     e1a:	9803      	ldr	r0, [sp, #12]
		bt_dev.supported_commands[34] |= 0x04;
     e1c:	f043 0306 	orr.w	r3, r3, #6
     e20:	f885 306a 	strb.w	r3, [r5, #106]	; 0x6a
	net_buf_unref(rsp);
     e24:	f01a fe58 	bl	1bad8 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
     e28:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
     e2c:	065b      	lsls	r3, r3, #25
     e2e:	d41d      	bmi.n	e6c <hci_init+0x134>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
     e30:	4b0b      	ldr	r3, [pc, #44]	; (e60 <hci_init+0x128>)
     e32:	490c      	ldr	r1, [pc, #48]	; (e64 <hci_init+0x12c>)
		BT_ERR("Non-LE capable controller detected!");
     e34:	480c      	ldr	r0, [pc, #48]	; (e68 <hci_init+0x130>)
     e36:	1ac9      	subs	r1, r1, r3
     e38:	08c9      	lsrs	r1, r1, #3
     e3a:	0189      	lsls	r1, r1, #6
     e3c:	f041 0101 	orr.w	r1, r1, #1
     e40:	f01d fb43 	bl	1e4ca <log_0>
		return -ENODEV;
     e44:	f06f 0412 	mvn.w	r4, #18
			return err;
		}
	}

	return 0;
}
     e48:	4620      	mov	r0, r4
     e4a:	b009      	add	sp, #36	; 0x24
     e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e4e:	bf00      	nop
     e50:	20000000 	.word	0x20000000
     e54:	200021ec 	.word	0x200021ec
     e58:	20000040 	.word	0x20000040
     e5c:	20000048 	.word	0x20000048
     e60:	000236e8 	.word	0x000236e8
     e64:	000237a8 	.word	0x000237a8
     e68:	00025ee5 	.word	0x00025ee5
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
     e6c:	4621      	mov	r1, r4
     e6e:	aa03      	add	r2, sp, #12
     e70:	f242 0003 	movw	r0, #8195	; 0x2003
     e74:	f007 ff0e 	bl	8c94 <bt_hci_cmd_send_sync>
	if (err) {
     e78:	4604      	mov	r4, r0
     e7a:	2800      	cmp	r0, #0
     e7c:	d1e4      	bne.n	e48 <hci_init+0x110>
	read_le_features_complete(rsp);
     e7e:	9b03      	ldr	r3, [sp, #12]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
     e80:	48a5      	ldr	r0, [pc, #660]	; (1118 <CONFIG_BT_RX_STACK_SIZE+0x118>)
     e82:	6899      	ldr	r1, [r3, #8]
     e84:	2208      	movs	r2, #8
     e86:	3101      	adds	r1, #1
     e88:	f01e fff1 	bl	1fe6e <memcpy>
	net_buf_unref(rsp);
     e8c:	9803      	ldr	r0, [sp, #12]
     e8e:	f01a fe23 	bl	1bad8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
     e92:	4621      	mov	r1, r4
     e94:	aa03      	add	r2, sp, #12
     e96:	f242 0002 	movw	r0, #8194	; 0x2002
     e9a:	f007 fefb 	bl	8c94 <bt_hci_cmd_send_sync>
	if (err) {
     e9e:	4604      	mov	r4, r0
     ea0:	2800      	cmp	r0, #0
     ea2:	d1d1      	bne.n	e48 <hci_init+0x110>
	le_read_buffer_size_complete(rsp);
     ea4:	9b03      	ldr	r3, [sp, #12]
     ea6:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.mtu = sys_le16_to_cpu(rp->le_max_len);
     ea8:	f8b3 2001 	ldrh.w	r2, [r3, #1]
     eac:	f8a5 20b0 	strh.w	r2, [r5, #176]	; 0xb0
     eb0:	b291      	uxth	r1, r2
	if (!bt_dev.le.mtu) {
     eb2:	b121      	cbz	r1, ebe <hci_init+0x186>
	k_sem_init(&bt_dev.le.pkts, rp->le_max_num, rp->le_max_num);
     eb4:	78da      	ldrb	r2, [r3, #3]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, *(uintptr_t *)&initial_count, *(uintptr_t *)&limit, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
     eb6:	4899      	ldr	r0, [pc, #612]	; (111c <CONFIG_BT_RX_STACK_SIZE+0x11c>)
     eb8:	4611      	mov	r1, r2
     eba:	f022 f896 	bl	22fea <z_impl_k_sem_init>
	net_buf_unref(rsp);
     ebe:	9803      	ldr	r0, [sp, #12]
     ec0:	f01a fe0a 	bl	1bad8 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
     ec4:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
     ec8:	f016 0620 	ands.w	r6, r6, #32
     ecc:	f000 80ff 	beq.w	10ce <CONFIG_BT_RX_STACK_SIZE+0xce>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
     ed0:	f895 3064 	ldrb.w	r3, [r5, #100]	; 0x64
     ed4:	071f      	lsls	r7, r3, #28
     ed6:	d511      	bpl.n	efc <hci_init+0x1c4>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
     ed8:	aa03      	add	r2, sp, #12
     eda:	2100      	movs	r1, #0
     edc:	f242 001c 	movw	r0, #8220	; 0x201c
     ee0:	f007 fed8 	bl	8c94 <bt_hci_cmd_send_sync>
		if (err) {
     ee4:	4604      	mov	r4, r0
     ee6:	2800      	cmp	r0, #0
     ee8:	d1ae      	bne.n	e48 <hci_init+0x110>
		le_read_supp_states_complete(rsp);
     eea:	9803      	ldr	r0, [sp, #12]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
     eec:	6883      	ldr	r3, [r0, #8]
     eee:	f853 2f01 	ldr.w	r2, [r3, #1]!
     ef2:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
     ef4:	e9c5 232a 	strd	r2, r3, [r5, #168]	; 0xa8
		net_buf_unref(rsp);
     ef8:	f01a fdee 	bl	1bad8 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
     efc:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
     f00:	069e      	lsls	r6, r3, #26
     f02:	d524      	bpl.n	f4e <hci_init+0x216>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
     f04:	a902      	add	r1, sp, #8
     f06:	f10d 0006 	add.w	r0, sp, #6
     f0a:	f007 ff3b 	bl	8d84 <hci_le_read_max_data_len>
		if (err) {
     f0e:	4604      	mov	r4, r0
     f10:	2800      	cmp	r0, #0
     f12:	d199      	bne.n	e48 <hci_init+0x110>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
     f14:	2104      	movs	r1, #4
     f16:	f242 0024 	movw	r0, #8228	; 0x2024
     f1a:	f007 fd5f 	bl	89dc <bt_hci_cmd_create>
		if (!buf) {
     f1e:	4606      	mov	r6, r0
     f20:	2800      	cmp	r0, #0
     f22:	f000 80db 	beq.w	10dc <CONFIG_BT_RX_STACK_SIZE+0xdc>
		cp = net_buf_add(buf, sizeof(*cp));
     f26:	2104      	movs	r1, #4
     f28:	3008      	adds	r0, #8
     f2a:	f021 fb31 	bl	22590 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
     f2e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     f32:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
     f34:	f8bd 3008 	ldrh.w	r3, [sp, #8]
     f38:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
     f3a:	4622      	mov	r2, r4
     f3c:	4631      	mov	r1, r6
     f3e:	f242 0024 	movw	r0, #8228	; 0x2024
     f42:	f007 fea7 	bl	8c94 <bt_hci_cmd_send_sync>
		if (err) {
     f46:	4604      	mov	r4, r0
     f48:	2800      	cmp	r0, #0
     f4a:	f47f af7d 	bne.w	e48 <hci_init+0x110>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
     f4e:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
     f52:	065c      	lsls	r4, r3, #25
     f54:	d510      	bpl.n	f78 <hci_init+0x240>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
     f56:	aa03      	add	r2, sp, #12
     f58:	2100      	movs	r1, #0
     f5a:	f242 002a 	movw	r0, #8234	; 0x202a
     f5e:	f007 fe99 	bl	8c94 <bt_hci_cmd_send_sync>
		if (err) {
     f62:	4604      	mov	r4, r0
     f64:	2800      	cmp	r0, #0
     f66:	f47f af6f 	bne.w	e48 <hci_init+0x110>
		le_read_resolving_list_size_complete(rsp);
     f6a:	9803      	ldr	r0, [sp, #12]
	bt_dev.le.rl_size = rp->rl_size;
     f6c:	6883      	ldr	r3, [r0, #8]
     f6e:	785b      	ldrb	r3, [r3, #1]
     f70:	f885 30cc 	strb.w	r3, [r5, #204]	; 0xcc
		net_buf_unref(rsp);
     f74:	f01a fdb0 	bl	1bad8 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
     f78:	2108      	movs	r1, #8
     f7a:	f242 0001 	movw	r0, #8193	; 0x2001
     f7e:	f007 fd2d 	bl	89dc <bt_hci_cmd_create>
	if (!buf) {
     f82:	4604      	mov	r4, r0
     f84:	2800      	cmp	r0, #0
     f86:	f000 80a9 	beq.w	10dc <CONFIG_BT_RX_STACK_SIZE+0xdc>
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
     f8a:	2108      	movs	r1, #8
     f8c:	4408      	add	r0, r1
     f8e:	f021 faff 	bl	22590 <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
     f92:	f895 10a0 	ldrb.w	r1, [r5, #160]	; 0xa0
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
     f96:	f011 0f40 	tst.w	r1, #64	; 0x40
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
     f9a:	4602      	mov	r2, r0
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
     f9c:	f240 2302 	movw	r3, #514	; 0x202
     fa0:	bf08      	it	eq
     fa2:	2303      	moveq	r3, #3
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
     fa4:	0788      	lsls	r0, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
     fa6:	bf4c      	ite	mi
     fa8:	f043 002c 	orrmi.w	r0, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
     fac:	f043 000c 	orrpl.w	r0, r3, #12
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
     fb0:	f895 30a1 	ldrb.w	r3, [r5, #161]	; 0xa1
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
     fb4:	068f      	lsls	r7, r1, #26
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
     fb6:	bf48      	it	mi
     fb8:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
     fbc:	f013 0f09 	tst.w	r3, #9
	if (IS_ENABLED(CONFIG_BT_ECC) &&
     fc0:	f895 306a 	ldrb.w	r3, [r5, #106]	; 0x6a
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
     fc4:	bf18      	it	ne
     fc6:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_ECC) &&
     fca:	f003 0306 	and.w	r3, r3, #6
	if (IS_ENABLED(CONFIG_BT_SMP) &&
     fce:	07ce      	lsls	r6, r1, #31
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
     fd0:	bf48      	it	mi
     fd2:	f040 0010 	orrmi.w	r0, r0, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
     fd6:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
     fd8:	bf08      	it	eq
     fda:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
     fde:	2100      	movs	r1, #0
     fe0:	f01f f8a9 	bl	20136 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
     fe4:	4621      	mov	r1, r4
     fe6:	2200      	movs	r2, #0
     fe8:	f242 0001 	movw	r0, #8193	; 0x2001
     fec:	f007 fe52 	bl	8c94 <bt_hci_cmd_send_sync>
	if (err) {
     ff0:	4604      	mov	r4, r0
     ff2:	2800      	cmp	r0, #0
     ff4:	f47f af28 	bne.w	e48 <hci_init+0x110>
	if (BT_FEAT_BREDR(bt_dev.features)) {
     ff8:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
     ffc:	0698      	lsls	r0, r3, #26
     ffe:	d41e      	bmi.n	103e <CONFIG_BT_RX_STACK_SIZE+0x3e>
	if (bt_dev.le.mtu) {
    1000:	f8b5 10b0 	ldrh.w	r1, [r5, #176]	; 0xb0
    1004:	b9d9      	cbnz	r1, 103e <CONFIG_BT_RX_STACK_SIZE+0x3e>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    1006:	aa03      	add	r2, sp, #12
    1008:	f241 0005 	movw	r0, #4101	; 0x1005
    100c:	f007 fe42 	bl	8c94 <bt_hci_cmd_send_sync>
	if (err) {
    1010:	4604      	mov	r4, r0
    1012:	2800      	cmp	r0, #0
    1014:	f47f af18 	bne.w	e48 <hci_init+0x110>
	if (bt_dev.le.mtu) {
    1018:	f8b5 30b0 	ldrh.w	r3, [r5, #176]	; 0xb0
    101c:	b963      	cbnz	r3, 1038 <CONFIG_BT_RX_STACK_SIZE+0x38>
	read_buffer_size_complete(rsp);
    101e:	9b03      	ldr	r3, [sp, #12]
    1020:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.mtu = sys_le16_to_cpu(rp->acl_max_len);
    1022:	785a      	ldrb	r2, [r3, #1]
    1024:	7899      	ldrb	r1, [r3, #2]
    1026:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    102a:	f8a5 20b0 	strh.w	r2, [r5, #176]	; 0xb0
	k_sem_init(&bt_dev.le.pkts, pkts, pkts);
    102e:	889a      	ldrh	r2, [r3, #4]
    1030:	483a      	ldr	r0, [pc, #232]	; (111c <CONFIG_BT_RX_STACK_SIZE+0x11c>)
    1032:	4611      	mov	r1, r2
    1034:	f021 ffd9 	bl	22fea <z_impl_k_sem_init>
	net_buf_unref(rsp);
    1038:	9803      	ldr	r0, [sp, #12]
    103a:	f01a fd4d 	bl	1bad8 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    103e:	2108      	movs	r1, #8
    1040:	f640 4001 	movw	r0, #3073	; 0xc01
    1044:	f007 fcca 	bl	89dc <bt_hci_cmd_create>
	if (!buf) {
    1048:	4604      	mov	r4, r0
    104a:	2800      	cmp	r0, #0
    104c:	d046      	beq.n	10dc <CONFIG_BT_RX_STACK_SIZE+0xdc>
	ev = net_buf_add(buf, sizeof(*ev));
    104e:	2108      	movs	r1, #8
    1050:	4408      	add	r0, r1
    1052:	f021 fa9d 	bl	22590 <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    1056:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
    105a:	07d9      	lsls	r1, r3, #31
	ev = net_buf_add(buf, sizeof(*ev));
    105c:	4602      	mov	r2, r0
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    105e:	d552      	bpl.n	1106 <CONFIG_BT_RX_STACK_SIZE+0x106>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
    1060:	a12b      	add	r1, pc, #172	; (adr r1, 1110 <CONFIG_BT_RX_STACK_SIZE+0x110>)
    1062:	e9d1 0100 	ldrd	r0, r1, [r1]
	sys_put_le64(mask, ev->events);
    1066:	f01f f866 	bl	20136 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    106a:	4621      	mov	r1, r4
    106c:	2200      	movs	r2, #0
    106e:	f640 4001 	movw	r0, #3073	; 0xc01
    1072:	f007 fe0f 	bl	8c94 <bt_hci_cmd_send_sync>
	if (err) {
    1076:	4604      	mov	r4, r0
    1078:	2800      	cmp	r0, #0
    107a:	f47f aee5 	bne.w	e48 <hci_init+0x110>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    107e:	4601      	mov	r1, r0
    1080:	aa02      	add	r2, sp, #8
    1082:	f64f 4001 	movw	r0, #64513	; 0xfc01
    1086:	f007 fe05 	bl	8c94 <bt_hci_cmd_send_sync>
	if (err) {
    108a:	4e25      	ldr	r6, [pc, #148]	; (1120 <CONFIG_BT_RX_STACK_SIZE+0x120>)
    108c:	4b25      	ldr	r3, [pc, #148]	; (1124 <CONFIG_BT_RX_STACK_SIZE+0x124>)
    108e:	1af6      	subs	r6, r6, r3
    1090:	08f6      	lsrs	r6, r6, #3
    1092:	01b6      	lsls	r6, r6, #6
    1094:	2800      	cmp	r0, #0
    1096:	d04d      	beq.n	1134 <CONFIG_BT_RX_STACK_SIZE+0x134>
		BT_WARN("Vendor HCI extensions not available");
    1098:	4823      	ldr	r0, [pc, #140]	; (1128 <CONFIG_BT_RX_STACK_SIZE+0x128>)
    109a:	f046 0102 	orr.w	r1, r6, #2
			BT_WARN("Failed to read supported vendor features");
    109e:	f01d fa14 	bl	1e4ca <log_0>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    10a2:	79eb      	ldrb	r3, [r5, #7]
    10a4:	2b00      	cmp	r3, #0
    10a6:	f47f aecf 	bne.w	e48 <hci_init+0x110>
		bt_setup_public_id_addr();
    10aa:	f008 feff 	bl	9eac <bt_setup_public_id_addr>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    10ae:	79eb      	ldrb	r3, [r5, #7]
    10b0:	2b00      	cmp	r3, #0
    10b2:	f47f aec9 	bne.w	e48 <hci_init+0x110>
		err = bt_setup_random_id_addr();
    10b6:	f008 ffa3 	bl	a000 <bt_setup_random_id_addr>
		if (err) {
    10ba:	4604      	mov	r4, r0
    10bc:	2800      	cmp	r0, #0
    10be:	f000 80a6 	beq.w	120e <CONFIG_BT_RX_STACK_SIZE+0x20e>
			BT_ERR("Unable to set identity address");
    10c2:	481a      	ldr	r0, [pc, #104]	; (112c <CONFIG_BT_RX_STACK_SIZE+0x12c>)
    10c4:	f046 0101 	orr.w	r1, r6, #1
			BT_ERR("Unable to set random address");
    10c8:	f01d f9ff 	bl	1e4ca <log_0>
			return err;
    10cc:	e6bc      	b.n	e48 <hci_init+0x110>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    10ce:	2102      	movs	r1, #2
    10d0:	f640 406d 	movw	r0, #3181	; 0xc6d
    10d4:	f007 fc82 	bl	89dc <bt_hci_cmd_create>
		if (!buf) {
    10d8:	4604      	mov	r4, r0
    10da:	b910      	cbnz	r0, 10e2 <CONFIG_BT_RX_STACK_SIZE+0xe2>
		return -ENOBUFS;
    10dc:	f06f 0436 	mvn.w	r4, #54	; 0x36
    10e0:	e6b2      	b.n	e48 <hci_init+0x110>
		cp_le = net_buf_add(buf, sizeof(*cp_le));
    10e2:	2102      	movs	r1, #2
    10e4:	3008      	adds	r0, #8
    10e6:	f021 fa53 	bl	22590 <net_buf_simple_add>
		cp_le->le = 0x01;
    10ea:	2301      	movs	r3, #1
    10ec:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    10ee:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    10f0:	4621      	mov	r1, r4
    10f2:	4632      	mov	r2, r6
    10f4:	f640 406d 	movw	r0, #3181	; 0xc6d
    10f8:	f007 fdcc 	bl	8c94 <bt_hci_cmd_send_sync>
		if (err) {
    10fc:	4604      	mov	r4, r0
    10fe:	2800      	cmp	r0, #0
    1100:	f43f aee6 	beq.w	ed0 <hci_init+0x198>
    1104:	e6a0      	b.n	e48 <hci_init+0x110>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
    1106:	480a      	ldr	r0, [pc, #40]	; (1130 <CONFIG_BT_RX_STACK_SIZE+0x130>)
    1108:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    110c:	e7ab      	b.n	1066 <CONFIG_BT_RX_STACK_SIZE+0x66>
    110e:	bf00      	nop
    1110:	02008890 	.word	0x02008890
    1114:	20008000 	.word	0x20008000
    1118:	200000a0 	.word	0x200000a0
    111c:	200000b4 	.word	0x200000b4
    1120:	000237a8 	.word	0x000237a8
    1124:	000236e8 	.word	0x000236e8
    1128:	00025f09 	.word	0x00025f09
    112c:	00025fdd 	.word	0x00025fdd
    1130:	02008810 	.word	0x02008810
	rp.info = (void *)rsp->data;
    1134:	9b02      	ldr	r3, [sp, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
    1136:	483b      	ldr	r0, [pc, #236]	; (1224 <CONFIG_BT_RX_STACK_SIZE+0x224>)
	rp.info = (void *)rsp->data;
    1138:	689f      	ldr	r7, [r3, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
    113a:	f8b7 2001 	ldrh.w	r2, [r7, #1]
	if (platform < ARRAY_SIZE(plat_str)) {
    113e:	2a03      	cmp	r2, #3
		return plat_str[platform];
    1140:	bf96      	itet	ls
    1142:	4939      	ldrls	r1, [pc, #228]	; (1228 <CONFIG_BT_RX_STACK_SIZE+0x228>)
	return "unknown";
    1144:	4939      	ldrhi	r1, [pc, #228]	; (122c <CONFIG_BT_RX_STACK_SIZE+0x22c>)
		return plat_str[platform];
    1146:	f851 1022 	ldrls.w	r1, [r1, r2, lsl #2]
	BT_INFO("HW Platform: %s (0x%04x)",
    114a:	f046 0303 	orr.w	r3, r6, #3
    114e:	f01d f9dd 	bl	1e50c <log_2>
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    1152:	f8b7 1001 	ldrh.w	r1, [r7, #1]
	BT_INFO("HW Variant: %s (0x%04x)",
    1156:	f8b7 2003 	ldrh.w	r2, [r7, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    115a:	2902      	cmp	r1, #2
	BT_INFO("HW Variant: %s (0x%04x)",
    115c:	f046 0303 	orr.w	r3, r6, #3
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    1160:	d12e      	bne.n	11c0 <CONFIG_BT_RX_STACK_SIZE+0x1c0>
	if (variant < ARRAY_SIZE(nordic_str)) {
    1162:	2a03      	cmp	r2, #3
    1164:	d82c      	bhi.n	11c0 <CONFIG_BT_RX_STACK_SIZE+0x1c0>
		return nordic_str[variant];
    1166:	4932      	ldr	r1, [pc, #200]	; (1230 <CONFIG_BT_RX_STACK_SIZE+0x230>)
    1168:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
	BT_INFO("HW Variant: %s (0x%04x)",
    116c:	4831      	ldr	r0, [pc, #196]	; (1234 <CONFIG_BT_RX_STACK_SIZE+0x234>)
    116e:	f01d f9cd 	bl	1e50c <log_2>
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    1172:	797a      	ldrb	r2, [r7, #5]
    1174:	4830      	ldr	r0, [pc, #192]	; (1238 <CONFIG_BT_RX_STACK_SIZE+0x238>)
	if (variant < ARRAY_SIZE(var_str)) {
    1176:	2a03      	cmp	r2, #3
		return var_str[variant];
    1178:	bf96      	itet	ls
    117a:	4930      	ldrls	r1, [pc, #192]	; (123c <CONFIG_BT_RX_STACK_SIZE+0x23c>)
	return "unknown";
    117c:	492b      	ldrhi	r1, [pc, #172]	; (122c <CONFIG_BT_RX_STACK_SIZE+0x22c>)
		return var_str[variant];
    117e:	f851 1022 	ldrls.w	r1, [r1, r2, lsl #2]
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    1182:	e9cd 1203 	strd	r1, r2, [sp, #12]
    1186:	79ba      	ldrb	r2, [r7, #6]
    1188:	9205      	str	r2, [sp, #20]
    118a:	f8b7 2007 	ldrh.w	r2, [r7, #7]
    118e:	9206      	str	r2, [sp, #24]
    1190:	f8d7 2009 	ldr.w	r2, [r7, #9]
    1194:	9207      	str	r2, [sp, #28]
    1196:	f046 0303 	orr.w	r3, r6, #3
    119a:	2205      	movs	r2, #5
    119c:	a903      	add	r1, sp, #12
    119e:	f01d f9ea 	bl	1e576 <log_n>
	net_buf_unref(rsp);
    11a2:	9802      	ldr	r0, [sp, #8]
    11a4:	f01a fc98 	bl	1bad8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    11a8:	aa02      	add	r2, sp, #8
    11aa:	2100      	movs	r1, #0
    11ac:	f64f 4002 	movw	r0, #64514	; 0xfc02
    11b0:	f007 fd70 	bl	8c94 <bt_hci_cmd_send_sync>
	if (err) {
    11b4:	4607      	mov	r7, r0
    11b6:	b128      	cbz	r0, 11c4 <CONFIG_BT_RX_STACK_SIZE+0x1c4>
		BT_WARN("Failed to read supported vendor commands");
    11b8:	4821      	ldr	r0, [pc, #132]	; (1240 <CONFIG_BT_RX_STACK_SIZE+0x240>)
    11ba:	f046 0102 	orr.w	r1, r6, #2
    11be:	e76e      	b.n	109e <CONFIG_BT_RX_STACK_SIZE+0x9e>
		return "unknown";
    11c0:	491a      	ldr	r1, [pc, #104]	; (122c <CONFIG_BT_RX_STACK_SIZE+0x22c>)
    11c2:	e7d3      	b.n	116c <CONFIG_BT_RX_STACK_SIZE+0x16c>
	rp.cmds = (void *)rsp->data;
    11c4:	9b02      	ldr	r3, [sp, #8]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    11c6:	481f      	ldr	r0, [pc, #124]	; (1244 <CONFIG_BT_RX_STACK_SIZE+0x244>)
    11c8:	6899      	ldr	r1, [r3, #8]
    11ca:	2202      	movs	r2, #2
    11cc:	3101      	adds	r1, #1
    11ce:	f01e fe4e 	bl	1fe6e <memcpy>
	net_buf_unref(rsp);
    11d2:	9802      	ldr	r0, [sp, #8]
    11d4:	f01a fc80 	bl	1bad8 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    11d8:	f895 3089 	ldrb.w	r3, [r5, #137]	; 0x89
    11dc:	075b      	lsls	r3, r3, #29
    11de:	f57f af60 	bpl.w	10a2 <CONFIG_BT_RX_STACK_SIZE+0xa2>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    11e2:	aa02      	add	r2, sp, #8
    11e4:	4639      	mov	r1, r7
    11e6:	f64f 4003 	movw	r0, #64515	; 0xfc03
    11ea:	f007 fd53 	bl	8c94 <bt_hci_cmd_send_sync>
		if (err) {
    11ee:	b118      	cbz	r0, 11f8 <CONFIG_BT_RX_STACK_SIZE+0x1f8>
			BT_WARN("Failed to read supported vendor features");
    11f0:	4815      	ldr	r0, [pc, #84]	; (1248 <CONFIG_BT_RX_STACK_SIZE+0x248>)
    11f2:	f046 0102 	orr.w	r1, r6, #2
    11f6:	e752      	b.n	109e <CONFIG_BT_RX_STACK_SIZE+0x9e>
		rp.feat = (void *)rsp->data;
    11f8:	9b02      	ldr	r3, [sp, #8]
		memcpy(bt_dev.vs_features, rp.feat->features,
    11fa:	4814      	ldr	r0, [pc, #80]	; (124c <CONFIG_BT_RX_STACK_SIZE+0x24c>)
    11fc:	6899      	ldr	r1, [r3, #8]
    11fe:	2201      	movs	r2, #1
    1200:	4411      	add	r1, r2
    1202:	f01e fe34 	bl	1fe6e <memcpy>
		net_buf_unref(rsp);
    1206:	9802      	ldr	r0, [sp, #8]
    1208:	f01a fc66 	bl	1bad8 <net_buf_unref>
    120c:	e749      	b.n	10a2 <CONFIG_BT_RX_STACK_SIZE+0xa2>
		err = set_random_address(&bt_dev.id_addr[0].a);
    120e:	4810      	ldr	r0, [pc, #64]	; (1250 <CONFIG_BT_RX_STACK_SIZE+0x250>)
    1210:	f007 fde2 	bl	8dd8 <set_random_address>
		if (err) {
    1214:	4604      	mov	r4, r0
    1216:	2800      	cmp	r0, #0
    1218:	f43f ae16 	beq.w	e48 <hci_init+0x110>
			BT_ERR("Unable to set random address");
    121c:	480d      	ldr	r0, [pc, #52]	; (1254 <CONFIG_BT_RX_STACK_SIZE+0x254>)
    121e:	f046 0101 	orr.w	r1, r6, #1
    1222:	e751      	b.n	10c8 <CONFIG_BT_RX_STACK_SIZE+0xc8>
    1224:	00025f2d 	.word	0x00025f2d
    1228:	00023c5c 	.word	0x00023c5c
    122c:	00025807 	.word	0x00025807
    1230:	00023c24 	.word	0x00023c24
    1234:	00025f46 	.word	0x00025f46
    1238:	00025f5e 	.word	0x00025f5e
    123c:	00023c8c 	.word	0x00023c8c
    1240:	00025f8b 	.word	0x00025f8b
    1244:	20000089 	.word	0x20000089
    1248:	00025fb4 	.word	0x00025fb4
    124c:	20000088 	.word	0x20000088
    1250:	20000001 	.word	0x20000001
    1254:	00025ffc 	.word	0x00025ffc

00001258 <ll_scan_params_set>:

static struct ll_scan_set ll_scan[BT_CTLR_SCAN_SET];

uint8_t ll_scan_params_set(uint8_t type, uint16_t interval, uint16_t window,
			uint8_t own_addr_type, uint8_t filter_policy)
{
    1258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
struct ll_scan_set *ull_scan_is_disabled_get(uint8_t handle)
{
	struct ll_scan_set *scan;

	scan = ull_scan_set_get(handle);
	if (!scan || scan->is_enabled) {
    125a:	4e19      	ldr	r6, [pc, #100]	; (12c0 <ll_scan_params_set+0x68>)
{
    125c:	f89d 4018 	ldrb.w	r4, [sp, #24]
	if (!scan || scan->is_enabled) {
    1260:	f896 5048 	ldrb.w	r5, [r6, #72]	; 0x48
    1264:	f015 0701 	ands.w	r7, r5, #1
    1268:	d121      	bne.n	12ae <ll_scan_params_set+0x56>
	lll->filter_policy = filter_policy;
    126a:	f896 c032 	ldrb.w	ip, [r6, #50]	; 0x32
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window * 625U);
    126e:	f8df e054 	ldr.w	lr, [pc, #84]	; 12c4 <ll_scan_params_set+0x6c>
	lll->interval = interval;
    1272:	f8a6 1042 	strh.w	r1, [r6, #66]	; 0x42
	lll->filter_policy = filter_policy;
    1276:	00e4      	lsls	r4, r4, #3
    1278:	f004 0418 	and.w	r4, r4, #24
    127c:	f00c 0c67 	and.w	ip, ip, #103	; 0x67
    1280:	ea44 14c0 	orr.w	r4, r4, r0, lsl #7
	scan->own_addr_type = own_addr_type;
    1284:	f363 0542 	bfi	r5, r3, #1, #2
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window * 625U);
    1288:	fba2 010e 	umull	r0, r1, r2, lr
	lll->filter_policy = filter_policy;
    128c:	ea44 040c 	orr.w	r4, r4, ip
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window * 625U);
    1290:	2391      	movs	r3, #145	; 0x91
    1292:	fb03 1102 	mla	r1, r3, r2, r1
	scan->own_addr_type = own_addr_type;
    1296:	f886 5048 	strb.w	r5, [r6, #72]	; 0x48
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window * 625U);
    129a:	a307      	add	r3, pc, #28	; (adr r3, 12b8 <ll_scan_params_set+0x60>)
    129c:	e9d3 2300 	ldrd	r2, r3, [r3]
	lll->filter_policy = filter_policy;
    12a0:	f886 4032 	strb.w	r4, [r6, #50]	; 0x32
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window * 625U);
    12a4:	f7ff fbca 	bl	a3c <__aeabi_uldivmod>
    12a8:	6470      	str	r0, [r6, #68]	; 0x44
}
    12aa:	4638      	mov	r0, r7
    12ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    12ae:	270c      	movs	r7, #12
}
    12b0:	4638      	mov	r0, r7
    12b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    12b4:	f3af 8000 	nop.w
    12b8:	1afd498d 	.word	0x1afd498d
    12bc:	00000007 	.word	0x00000007
    12c0:	20003e8c 	.word	0x20003e8c
    12c4:	84e72a00 	.word	0x84e72a00

000012c8 <ull_scan_params_set>:
{
    12c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    12ca:	f89d 4018 	ldrb.w	r4, [sp, #24]
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window * 625U);
    12ce:	4e10      	ldr	r6, [pc, #64]	; (1310 <ull_scan_params_set+0x48>)
{
    12d0:	4605      	mov	r5, r0
	lll->filter_policy = filter_policy;
    12d2:	00e4      	lsls	r4, r4, #3
    12d4:	7d80      	ldrb	r0, [r0, #22]
	lll->interval = interval;
    12d6:	84ea      	strh	r2, [r5, #38]	; 0x26
	lll->filter_policy = filter_policy;
    12d8:	f004 0418 	and.w	r4, r4, #24
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window * 625U);
    12dc:	fba3 6706 	umull	r6, r7, r3, r6
	lll->filter_policy = filter_policy;
    12e0:	f000 0067 	and.w	r0, r0, #103	; 0x67
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window * 625U);
    12e4:	2291      	movs	r2, #145	; 0x91
	lll->filter_policy = filter_policy;
    12e6:	ea44 11c1 	orr.w	r1, r4, r1, lsl #7
    12ea:	4301      	orrs	r1, r0
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window * 625U);
    12ec:	fb02 7703 	mla	r7, r2, r3, r7
	lll->filter_policy = filter_policy;
    12f0:	75a9      	strb	r1, [r5, #22]
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window * 625U);
    12f2:	a305      	add	r3, pc, #20	; (adr r3, 1308 <ull_scan_params_set+0x40>)
    12f4:	e9d3 2300 	ldrd	r2, r3, [r3]
    12f8:	4630      	mov	r0, r6
    12fa:	4639      	mov	r1, r7
    12fc:	f7ff fb9e 	bl	a3c <__aeabi_uldivmod>
    1300:	62a8      	str	r0, [r5, #40]	; 0x28
}
    1302:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1304:	f3af 8000 	nop.w
    1308:	1afd498d 	.word	0x1afd498d
    130c:	00000007 	.word	0x00000007
    1310:	84e72a00 	.word	0x84e72a00
    1314:	00000000 	.word	0x00000000

00001318 <ull_scan_enable>:
{
    1318:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	lll->chan = 0;
    131c:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
{
    1320:	4604      	mov	r4, r0
	ll_addr_get(lll->init_addr_type, lll->init_addr);
    1322:	f100 0135 	add.w	r1, r0, #53	; 0x35
	lll->init_addr_type = scan->own_addr_type;
    1326:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
    132a:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
    132e:	f3c0 0040 	ubfx	r0, r0, #1, #1
{
    1332:	b08d      	sub	sp, #52	; 0x34
	lll->init_addr_type = scan->own_addr_type;
    1334:	f360 1386 	bfi	r3, r0, #6, #1
    1338:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
	volatile uint32_t ret_cb = TICKER_STATUS_BUSY;
    133c:	2302      	movs	r3, #2
    133e:	930b      	str	r3, [sp, #44]	; 0x2c
	ll_addr_get(lll->init_addr_type, lll->init_addr);
    1340:	f010 fb54 	bl	119ec <ll_addr_get>
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval * 625U);
    1344:	f8b4 6042 	ldrh.w	r6, [r4, #66]	; 0x42
static inline void lll_hdr_init(void *lll, void *parent)
{
	struct lll_hdr *hdr = lll;

	hdr->parent = parent;
	hdr->is_stop = 0U;
    1348:	f894 3020 	ldrb.w	r3, [r4, #32]
    134c:	483c      	ldr	r0, [pc, #240]	; (1440 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb8>)
	hdr->parent = parent;
    134e:	61e4      	str	r4, [r4, #28]
	return hdr->ref--;
}

static inline void ull_hdr_init(struct ull_hdr *hdr)
{
	hdr->disabled_cb = hdr->disabled_param = NULL;
    1350:	2500      	movs	r5, #0
    1352:	fba6 0100 	umull	r0, r1, r6, r0
	hdr->is_stop = 0U;
    1356:	f365 0300 	bfi	r3, r5, #0, #1
    135a:	2291      	movs	r2, #145	; 0x91
    135c:	fb02 1106 	mla	r1, r2, r6, r1
    1360:	e9c4 5505 	strd	r5, r5, [r4, #20]
    1364:	f884 3020 	strb.w	r3, [r4, #32]
    1368:	a333      	add	r3, pc, #204	; (adr r3, 1438 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb0>)
    136a:	e9d3 2300 	ldrd	r2, r3, [r3]
    136e:	f7ff fb65 	bl	a3c <__aeabi_uldivmod>
	if ((lll->ticks_window +
    1372:	6c63      	ldr	r3, [r4, #68]	; 0x44
	scan->evt.ticks_active_to_start = 0U;
    1374:	6065      	str	r5, [r4, #4]
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval * 625U);
    1376:	4606      	mov	r6, r0
	if ((lll->ticks_window +
    1378:	3309      	adds	r3, #9
	    (ticks_interval -
    137a:	f1a6 0231 	sub.w	r2, r6, #49	; 0x31
	if ((lll->ticks_window +
    137e:	4293      	cmp	r3, r2
	scan->evt.ticks_xtal_to_start =
    1380:	f04f 0131 	mov.w	r1, #49	; 0x31
		scan->evt.ticks_slot =
    1384:	bf32      	itee	cc
    1386:	60e3      	strcc	r3, [r4, #12]
		scan->evt.ticks_slot =
    1388:	60e2      	strcs	r2, [r4, #12]
		lll->ticks_window = 0;
    138a:	6465      	strcs	r5, [r4, #68]	; 0x44
	scan->evt.ticks_preempt_to_start =
    138c:	60a5      	str	r5, [r4, #8]
	scan->evt.ticks_xtal_to_start =
    138e:	6021      	str	r1, [r4, #0]
	ticks_anchor = ticker_ticks_now_get();
    1390:	f010 fb2a 	bl	119e8 <ticker_ticks_now_get>
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
    1394:	4d2b      	ldr	r5, [pc, #172]	; (1444 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xbc>)
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1396:	9406      	str	r4, [sp, #24]
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval * 625U),
    1398:	f8b4 8042 	ldrh.w	r8, [r4, #66]	; 0x42
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
    139c:	492a      	ldr	r1, [pc, #168]	; (1448 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc0>)
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    139e:	f8df c0b0 	ldr.w	ip, [pc, #176]	; 1450 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc8>
    13a2:	4a2a      	ldr	r2, [pc, #168]	; (144c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc4>)
	ticks_anchor = ticker_ticks_now_get();
    13a4:	4607      	mov	r7, r0
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
    13a6:	1b65      	subs	r5, r4, r5
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval * 625U),
    13a8:	4825      	ldr	r0, [pc, #148]	; (1440 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb8>)
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
    13aa:	08ad      	lsrs	r5, r5, #2
    13ac:	fba1 3505 	umull	r3, r5, r1, r5
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval * 625U),
    13b0:	fba8 0100 	umull	r0, r1, r8, r0
    13b4:	2391      	movs	r3, #145	; 0x91
    13b6:	fb03 1108 	mla	r1, r3, r8, r1
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    13ba:	68e3      	ldr	r3, [r4, #12]
    13bc:	9304      	str	r3, [sp, #16]
    13be:	f10d 082c 	add.w	r8, sp, #44	; 0x2c
    13c2:	f8cd c01c 	str.w	ip, [sp, #28]
    13c6:	9205      	str	r2, [sp, #20]
    13c8:	f04f 0c0a 	mov.w	ip, #10
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval * 625U),
    13cc:	a31a      	add	r3, pc, #104	; (adr r3, 1438 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb0>)
    13ce:	e9d3 2300 	ldrd	r2, r3, [r3]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    13d2:	f8cd c00c 	str.w	ip, [sp, #12]
    13d6:	f8cd 8020 	str.w	r8, [sp, #32]
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval * 625U),
    13da:	f7ff fb2f 	bl	a3c <__aeabi_uldivmod>
    13de:	4610      	mov	r0, r2
    13e0:	4619      	mov	r1, r3
    13e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    13e6:	2300      	movs	r3, #0
    13e8:	f7ff fb28 	bl	a3c <__aeabi_uldivmod>
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
    13ec:	086d      	lsrs	r5, r5, #1
			   TICKER_USER_ID_THREAD, TICKER_ID_SCAN_BASE + handle,
    13ee:	3502      	adds	r5, #2
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    13f0:	2100      	movs	r1, #0
    13f2:	b2ed      	uxtb	r5, r5
    13f4:	462a      	mov	r2, r5
    13f6:	e9cd 6001 	strd	r6, r0, [sp, #4]
    13fa:	463b      	mov	r3, r7
    13fc:	9100      	str	r1, [sp, #0]
    13fe:	4608      	mov	r0, r1
    1400:	2103      	movs	r1, #3
    1402:	f010 fa3f 	bl	11884 <ticker_start>
	ret = ull_ticker_status_take(ret, &ret_cb);
    1406:	4641      	mov	r1, r8
    1408:	f013 f868 	bl	144dc <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
    140c:	4605      	mov	r5, r0
    140e:	b960      	cbnz	r0, 142a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa2>
	scan->is_enabled = 1U;
    1410:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    1414:	f043 0301 	orr.w	r3, r3, #1
    1418:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
		ull_filter_adv_scan_state_cb(BIT(1));
    141c:	2002      	movs	r0, #2
    141e:	f017 f9f3 	bl	18808 <ull_filter_adv_scan_state_cb>
	return 0;
    1422:	4628      	mov	r0, r5
}
    1424:	b00d      	add	sp, #52	; 0x34
    1426:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    142a:	200c      	movs	r0, #12
}
    142c:	b00d      	add	sp, #52	; 0x34
    142e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1432:	bf00      	nop
    1434:	f3af 8000 	nop.w
    1438:	1afd498d 	.word	0x1afd498d
    143c:	00000007 	.word	0x00000007
    1440:	84e72a00 	.word	0x84e72a00
    1444:	20003e8c 	.word	0x20003e8c
    1448:	1af286bd 	.word	0x1af286bd
    144c:	000147d1 	.word	0x000147d1
    1450:	000144d1 	.word	0x000144d1
    1454:	00000000 	.word	0x00000000

00001458 <ull_conn_llcp>:

	return 0;
}

int ull_conn_llcp(struct ll_conn *conn, uint32_t ticks_at_expire, uint16_t lazy)
{
    1458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	LL_ASSERT(conn->lll.handle != 0xFFFF);
    145c:	8d86      	ldrh	r6, [r0, #44]	; 0x2c
    145e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1462:	429e      	cmp	r6, r3
{
    1464:	b08d      	sub	sp, #52	; 0x34
    1466:	4604      	mov	r4, r0
    1468:	468a      	mov	sl, r1
    146a:	4691      	mov	r9, r2
	LL_ASSERT(conn->lll.handle != 0xFFFF);
    146c:	f000 8115 	beq.w	169a <ull_conn_llcp+0x242>
#ifndef _ASMLANGUAGE
extern uint32_t z_timer_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
    1470:	f005 fd66 	bl	6f40 <z_timer_cycle_get_32>
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
    1474:	4bb5      	ldr	r3, [pc, #724]	; (174c <ull_conn_llcp+0x2f4>)
#if (defined CONFIG_BLEX)||(defined CONFIG_CSR)||(defined CONFIG_BCM)
	/* BLEX: We calculate the connection event of each connection */
	int conn_handle = conn->lll.handle;
	/* BLEX: This function is called whenever the connection event start. So the timing is an anchor point*/
	anchor_points[conn_handle] = (uint32_t)k_cyc_to_ns_floor64(k_cycle_get_32())/NSEC_PER_USEC/USEC_PER_MSEC;
    1476:	4ab6      	ldr	r2, [pc, #728]	; (1750 <ull_conn_llcp+0x2f8>)
	else if(scheduled_handle_cnt ==2 && conn_handle == 2)scheduled_handle_cnt =3;
#endif

	/* BLEX: If a connection is blocked by another connection, the ull_conn_done function, which is called whenever the connection event ends, is not called.
		So, in this case, the connection event length can be miscalculated and the code below fixs this maloperation. */
	if(BLEX_cnt2 == old_BLEX_cnt2) {
    1478:	4fb6      	ldr	r7, [pc, #728]	; (1754 <ull_conn_llcp+0x2fc>)
	anchor_points[conn_handle] = (uint32_t)k_cyc_to_ns_floor64(k_cycle_get_32())/NSEC_PER_USEC/USEC_PER_MSEC;
    147a:	4db7      	ldr	r5, [pc, #732]	; (1758 <ull_conn_llcp+0x300>)
		stop_cycle[old_handle] = k_cycle_get_32();
    147c:	f8df b310 	ldr.w	fp, [pc, #784]	; 1790 <ull_conn_llcp+0x338>
    1480:	fba0 0103 	umull	r0, r1, r0, r3
    1484:	0bc3      	lsrs	r3, r0, #15
    1486:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
	if(BLEX_cnt2 == old_BLEX_cnt2) {
    148a:	49b4      	ldr	r1, [pc, #720]	; (175c <ull_conn_llcp+0x304>)
    148c:	6838      	ldr	r0, [r7, #0]
	anchor_points[conn_handle] = (uint32_t)k_cyc_to_ns_floor64(k_cycle_get_32())/NSEC_PER_USEC/USEC_PER_MSEC;
    148e:	fba2 2303 	umull	r2, r3, r2, r3
	if(BLEX_cnt2 == old_BLEX_cnt2) {
    1492:	680a      	ldr	r2, [r1, #0]
	anchor_points[conn_handle] = (uint32_t)k_cyc_to_ns_floor64(k_cycle_get_32())/NSEC_PER_USEC/USEC_PER_MSEC;
    1494:	0c9b      	lsrs	r3, r3, #18
	if(BLEX_cnt2 == old_BLEX_cnt2) {
    1496:	4290      	cmp	r0, r2
	anchor_points[conn_handle] = (uint32_t)k_cyc_to_ns_floor64(k_cycle_get_32())/NSEC_PER_USEC/USEC_PER_MSEC;
    1498:	f845 3026 	str.w	r3, [r5, r6, lsl #2]
	if(BLEX_cnt2 == old_BLEX_cnt2) {
    149c:	f000 80e8 	beq.w	1670 <ull_conn_llcp+0x218>
		BLEX_cnt2 ++;
		array4[old_handle] ++;
	}
	else 
		old_BLEX_cnt2 = BLEX_cnt2;
    14a0:	f8db 5000 	ldr.w	r5, [fp]
    14a4:	6008      	str	r0, [r1, #0]

	/* BLEX: We calculate the previous connection's event length here, because sometimes the previous connection is blocked by current connection */
	if(old_handle >=0 && old_handle < CONFIG_BT_MAX_CONN ){
    14a6:	2d03      	cmp	r5, #3
    14a8:	d925      	bls.n	14f6 <ull_conn_llcp+0x9e>
    14aa:	4fad      	ldr	r7, [pc, #692]	; (1760 <ull_conn_llcp+0x308>)
			if(avg_conn_evt_length[old_handle] == 0)  avg_conn_evt_length[old_handle] = (uint32_t)k_cyc_to_ns_floor64(stop_cycle[old_handle]-start_cycle[old_handle])/NSEC_PER_USEC/USEC_PER_MSEC;
			else avg_conn_evt_length[old_handle] = (avg_conn_evt_length[old_handle]*(100-ewma)+(uint32_t)k_cyc_to_ns_floor64(stop_cycle[old_handle]-start_cycle[old_handle])/NSEC_PER_USEC/USEC_PER_MSEC*ewma+50)/100;
		}
	}
	/* BLEX: We update the previous connection's connection event length calculation count */
	handle_cnt[old_handle]++;
    14ac:	4aad      	ldr	r2, [pc, #692]	; (1764 <ull_conn_llcp+0x30c>)
	old_handle = conn_handle;
    14ae:	f8cb 6000 	str.w	r6, [fp]
	handle_cnt[old_handle]++;
    14b2:	f852 3025 	ldr.w	r3, [r2, r5, lsl #2]
    14b6:	3301      	adds	r3, #1
    14b8:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
    14bc:	f005 fd40 	bl	6f40 <z_timer_cycle_get_32>

#endif
	/* Check if no other procedure with instant is requested and not in
	 * Encryption setup.
	 */
	if ((conn->llcp_ack == conn->llcp_req) &&
    14c0:	f894 50c0 	ldrb.w	r5, [r4, #192]	; 0xc0
    14c4:	f894 30bf 	ldrb.w	r3, [r4, #191]	; 0xbf
	start_cycle[conn_handle] = k_cycle_get_32();
    14c8:	f847 0036 	str.w	r0, [r7, r6, lsl #3]
    14cc:	eb07 02c6 	add.w	r2, r7, r6, lsl #3
    14d0:	2100      	movs	r1, #0
	if ((conn->llcp_ack == conn->llcp_req) &&
    14d2:	429d      	cmp	r5, r3
	start_cycle[conn_handle] = k_cycle_get_32();
    14d4:	6051      	str	r1, [r2, #4]
	if ((conn->llcp_ack == conn->llcp_req) &&
    14d6:	d055      	beq.n	1584 <ull_conn_llcp+0x12c>
		}

		/* Check if procedures with instant or encryption setup is requested or
		 * active.
		 */
		if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
    14d8:	1b5b      	subs	r3, r3, r5
    14da:	f003 0303 	and.w	r3, r3, #3
    14de:	2b02      	cmp	r3, #2
    14e0:	d062      	beq.n	15a8 <ull_conn_llcp+0x150>
					break;
			}
		}

		/* Terminate Procedure Request */
		if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
    14e2:	f894 2105 	ldrb.w	r2, [r4, #261]	; 0x105
    14e6:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
    14ea:	429a      	cmp	r2, r3
    14ec:	d177      	bne.n	15de <ull_conn_llcp+0x186>
				if (conn->procedure_expire <= 1U) {
					conn->procedure_expire++;
				}
			}
	}
	return 0;
    14ee:	2000      	movs	r0, #0
}
    14f0:	b00d      	add	sp, #52	; 0x34
    14f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if((uint32_t)k_cyc_to_ns_floor64(stop_cycle[old_handle]-start_cycle[old_handle])/NSEC_PER_USEC/USEC_PER_MSEC> 0 && (uint32_t)k_cyc_to_ns_floor64(stop_cycle[old_handle]-start_cycle[old_handle])/NSEC_PER_USEC/USEC_PER_MSEC<=conn_int_table[old_handle]*1.25){
    14f6:	4b9c      	ldr	r3, [pc, #624]	; (1768 <ull_conn_llcp+0x310>)
    14f8:	4f99      	ldr	r7, [pc, #612]	; (1760 <ull_conn_llcp+0x308>)
    14fa:	4994      	ldr	r1, [pc, #592]	; (174c <ull_conn_llcp+0x2f4>)
    14fc:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
    1500:	eb07 0ec5 	add.w	lr, r7, r5, lsl #3
    1504:	681a      	ldr	r2, [r3, #0]
    1506:	f8de c000 	ldr.w	ip, [lr]
    150a:	6858      	ldr	r0, [r3, #4]
    150c:	f8de 3004 	ldr.w	r3, [lr, #4]
    1510:	ebb2 020c 	subs.w	r2, r2, ip
    1514:	eb60 0003 	sbc.w	r0, r0, r3
    1518:	fba2 2301 	umull	r2, r3, r2, r1
    151c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    1520:	fb01 3300 	mla	r3, r1, r0, r3
    1524:	930b      	str	r3, [sp, #44]	; 0x2c
    1526:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    152a:	4a90      	ldr	r2, [pc, #576]	; (176c <ull_conn_llcp+0x314>)
    152c:	ea4f 38d0 	mov.w	r8, r0, lsr #15
    1530:	ea48 4841 	orr.w	r8, r8, r1, lsl #17
    1534:	4590      	cmp	r8, r2
    1536:	d9b9      	bls.n	14ac <ull_conn_llcp+0x54>
    1538:	4b85      	ldr	r3, [pc, #532]	; (1750 <ull_conn_llcp+0x2f8>)
    153a:	fba3 3808 	umull	r3, r8, r3, r8
    153e:	ea4f 4898 	mov.w	r8, r8, lsr #18
    1542:	4640      	mov	r0, r8
    1544:	f7fe ff1e 	bl	384 <__aeabi_ui2d>
    1548:	460b      	mov	r3, r1
    154a:	4989      	ldr	r1, [pc, #548]	; (1770 <ull_conn_llcp+0x318>)
    154c:	4602      	mov	r2, r0
    154e:	f851 0025 	ldr.w	r0, [r1, r5, lsl #2]
    1552:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    1556:	f7fe ff15 	bl	384 <__aeabi_ui2d>
    155a:	4b86      	ldr	r3, [pc, #536]	; (1774 <ull_conn_llcp+0x31c>)
    155c:	2200      	movs	r2, #0
    155e:	f7fe ff8b 	bl	478 <__aeabi_dmul>
    1562:	4602      	mov	r2, r0
    1564:	460b      	mov	r3, r1
    1566:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    156a:	f7ff fa01 	bl	970 <__aeabi_dcmple>
    156e:	2800      	cmp	r0, #0
    1570:	d09c      	beq.n	14ac <ull_conn_llcp+0x54>
			if(avg_conn_evt_length[old_handle] == 0)  avg_conn_evt_length[old_handle] = (uint32_t)k_cyc_to_ns_floor64(stop_cycle[old_handle]-start_cycle[old_handle])/NSEC_PER_USEC/USEC_PER_MSEC;
    1572:	4981      	ldr	r1, [pc, #516]	; (1778 <ull_conn_llcp+0x320>)
    1574:	f851 3025 	ldr.w	r3, [r1, r5, lsl #2]
    1578:	2b00      	cmp	r3, #0
    157a:	f040 83f4 	bne.w	1d66 <ull_conn_llcp+0x90e>
    157e:	f841 8025 	str.w	r8, [r1, r5, lsl #2]
    1582:	e793      	b.n	14ac <ull_conn_llcp+0x54>
			!conn->llcp_enc.pause_rx) {
    1584:	f894 212a 	ldrb.w	r2, [r4, #298]	; 0x12a
	if ((conn->llcp_ack == conn->llcp_req) &&
    1588:	f012 0701 	ands.w	r7, r2, #1
    158c:	d1a9      	bne.n	14e2 <ull_conn_llcp+0x8a>
			if (conn->llcp_cu.ack != conn->llcp_cu.req) {
    158e:	f894 10dd 	ldrb.w	r1, [r4, #221]	; 0xdd
    1592:	f894 00dc 	ldrb.w	r0, [r4, #220]	; 0xdc
    1596:	4288      	cmp	r0, r1
    1598:	f000 83f6 	beq.w	1d88 <ull_conn_llcp+0x930>
				conn->llcp_ack -= 2U;
    159c:	1eab      	subs	r3, r5, #2
				conn->llcp_type = LLCP_CONN_UPD;
    159e:	2201      	movs	r2, #1
				conn->llcp_ack -= 2U;
    15a0:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
				conn->llcp_type = LLCP_CONN_UPD;
    15a4:	f884 20c1 	strb.w	r2, [r4, #193]	; 0xc1
			} else if (conn->llcp_length.ack != conn->llcp_length.req) {
    15a8:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
    15ac:	f894 2171 	ldrb.w	r2, [r4, #369]	; 0x171
    15b0:	429a      	cmp	r2, r3
    15b2:	d006      	beq.n	15c2 <ull_conn_llcp+0x16a>
				if ((conn->llcp_length.state ==
    15b4:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
    15b8:	f002 0106 	and.w	r1, r2, #6
    15bc:	2904      	cmp	r1, #4
    15be:	f000 8428 	beq.w	1e12 <ull_conn_llcp+0x9ba>
			switch (conn->llcp_type) {
    15c2:	f894 50c1 	ldrb.w	r5, [r4, #193]	; 0xc1
    15c6:	1e6b      	subs	r3, r5, #1
    15c8:	2b05      	cmp	r3, #5
    15ca:	f200 83bd 	bhi.w	1d48 <ull_conn_llcp+0x8f0>
    15ce:	e8df f013 	tbh	[pc, r3, lsl #1]
    15d2:	0195      	.short	0x0195
    15d4:	00e10165 	.word	0x00e10165
    15d8:	007f03bb 	.word	0x007f03bb
    15dc:	02ff      	.short	0x02ff
			tx = mem_acquire(&mem_conn_tx_ctrl.free);
    15de:	4867      	ldr	r0, [pc, #412]	; (177c <ull_conn_llcp+0x324>)
    15e0:	f00e fcec 	bl	ffbc <mem_acquire>
			if (tx) {
    15e4:	b358      	cbz	r0, 163e <ull_conn_llcp+0x1e6>
				conn->llcp_terminate.ack = conn->llcp_terminate.req;
    15e6:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
    15ea:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
				pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    15ee:	7903      	ldrb	r3, [r0, #4]
				pdu_tx->len = offsetof(struct pdu_data_llctrl,
    15f0:	2202      	movs	r2, #2
				pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    15f2:	f043 0303 	orr.w	r3, r3, #3
				pdu_tx->len = offsetof(struct pdu_data_llctrl,
    15f6:	7142      	strb	r2, [r0, #5]
				pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    15f8:	7103      	strb	r3, [r0, #4]
				pdu_tx->llctrl.opcode =
    15fa:	71c2      	strb	r2, [r0, #7]
		struct node_tx *tx, bool pause)
{
	/* check if a packet was tx-ed and not acked by peer */
	if (
			/* data/ctrl packet is in the head */
			conn->tx_head &&
    15fc:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
				pdu_tx->llctrl.terminate_ind.error_code =
    1600:	f894 2106 	ldrb.w	r2, [r4, #262]	; 0x106
    1604:	7202      	strb	r2, [r0, #8]
	if (
    1606:	b333      	cbz	r3, 1656 <ull_conn_llcp+0x1fe>
#if defined(CONFIG_BT_CTLR_LE_ENC)
			!conn->llcp_enc.pause_tx &&
    1608:	f894 212a 	ldrb.w	r2, [r4, #298]	; 0x12a
			conn->tx_head &&
    160c:	0791      	lsls	r1, r2, #30
    160e:	d422      	bmi.n	1656 <ull_conn_llcp+0x1fe>
#endif /* CONFIG_BT_CTLR_LE_ENC */
#if defined(CONFIG_BT_CTLR_PHY)
			!conn->llcp_phy.pause_tx &&
    1610:	f894 2183 	ldrb.w	r2, [r4, #387]	; 0x183
    1614:	07d2      	lsls	r2, r2, #31
    1616:	d41e      	bmi.n	1656 <ull_conn_llcp+0x1fe>

		/* if data transmitted once, keep it at head of the tx list,
		 * as we will insert a ctrl after it, hence advance the
		 * data pointer
		 */
		if (conn->tx_head == conn->tx_data) {
    1618:	f8d4 2194 	ldr.w	r2, [r4, #404]	; 0x194
    161c:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    161e:	bf04      	itt	eq
    1620:	681a      	ldreq	r2, [r3, #0]
    1622:	f8c4 2194 	streq.w	r2, [r4, #404]	; 0x194
		}

		/* if no ctrl packet already queued, new ctrl added will be
		 * the ctrl pointer and is inserted after head.
		 */
		if (!conn->tx_ctrl) {
    1626:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    162a:	b9c2      	cbnz	r2, 165e <ull_conn_llcp+0x206>
			tx->next = conn->tx_head->next;
    162c:	681a      	ldr	r2, [r3, #0]
    162e:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    1630:	6018      	str	r0, [r3, #0]
			 * control PDU in Encryption Procedure that is not
			 * implicitly paused, will set the control and control
			 * last marker.
			 */
			if (!pause) {
				conn->tx_ctrl = tx;
    1632:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
    1634:	e9c4 0063 	strd	r0, r0, [r4, #396]	; 0x18c
			ctrl_tx_last_enqueue(conn, tx);
		}
	}

	/* Update last pointer if ctrl added at end of tx list */
	if (!tx->next) {
    1638:	b90b      	cbnz	r3, 163e <ull_conn_llcp+0x1e6>
		conn->tx_data_last = tx;
    163a:	f8c4 0198 	str.w	r0, [r4, #408]	; 0x198
			if (!conn->procedure_expire) {
    163e:	f8b4 00b0 	ldrh.w	r0, [r4, #176]	; 0xb0
    1642:	2800      	cmp	r0, #0
    1644:	f47f af53 	bne.w	14ee <ull_conn_llcp+0x96>
				conn->procedure_expire = conn->supervision_reload;
    1648:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
				if (conn->procedure_expire <= 1U) {
    164c:	2b01      	cmp	r3, #1
    164e:	d933      	bls.n	16b8 <ull_conn_llcp+0x260>
				conn->procedure_expire = conn->supervision_reload;
    1650:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
    1654:	e74b      	b.n	14ee <ull_conn_llcp+0x96>
		if (!conn->tx_ctrl) {
    1656:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    165a:	2a00      	cmp	r2, #0
    165c:	d032      	beq.n	16c4 <ull_conn_llcp+0x26c>
	tx->next = conn->tx_ctrl_last->next;
    165e:	f8d4 3190 	ldr.w	r3, [r4, #400]	; 0x190
    1662:	681a      	ldr	r2, [r3, #0]
    1664:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    1666:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
    1668:	f8c4 0190 	str.w	r0, [r4, #400]	; 0x190
    166c:	6803      	ldr	r3, [r0, #0]
}
    166e:	e7e3      	b.n	1638 <ull_conn_llcp+0x1e0>
    1670:	f005 fc66 	bl	6f40 <z_timer_cycle_get_32>
		stop_cycle[old_handle] = k_cycle_get_32();
    1674:	f8db 5000 	ldr.w	r5, [fp]
    1678:	4b3b      	ldr	r3, [pc, #236]	; (1768 <ull_conn_llcp+0x310>)
		array4[old_handle] ++;
    167a:	4941      	ldr	r1, [pc, #260]	; (1780 <ull_conn_llcp+0x328>)
		stop_cycle[old_handle] = k_cycle_get_32();
    167c:	f843 0035 	str.w	r0, [r3, r5, lsl #3]
    1680:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
    1684:	2000      	movs	r0, #0
		array4[old_handle] ++;
    1686:	f851 2025 	ldr.w	r2, [r1, r5, lsl #2]
		stop_cycle[old_handle] = k_cycle_get_32();
    168a:	6058      	str	r0, [r3, #4]
		BLEX_cnt2 ++;
    168c:	683b      	ldr	r3, [r7, #0]
		array4[old_handle] ++;
    168e:	3201      	adds	r2, #1
		BLEX_cnt2 ++;
    1690:	3301      	adds	r3, #1
		array4[old_handle] ++;
    1692:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
		BLEX_cnt2 ++;
    1696:	603b      	str	r3, [r7, #0]
		array4[old_handle] ++;
    1698:	e705      	b.n	14a6 <ull_conn_llcp+0x4e>
	LL_ASSERT(conn->lll.handle != 0xFFFF);
    169a:	4a3a      	ldr	r2, [pc, #232]	; (1784 <ull_conn_llcp+0x32c>)
    169c:	493a      	ldr	r1, [pc, #232]	; (1788 <ull_conn_llcp+0x330>)
    169e:	483b      	ldr	r0, [pc, #236]	; (178c <ull_conn_llcp+0x334>)
    16a0:	f240 3371 	movw	r3, #881	; 0x371
    16a4:	f01c fc51 	bl	1df4a <printk>
    16a8:	4040      	eors	r0, r0
    16aa:	f380 8811 	msr	BASEPRI, r0
    16ae:	f04f 0003 	mov.w	r0, #3
    16b2:	df02      	svc	2
    16b4:	8da6      	ldrh	r6, [r4, #44]	; 0x2c
    16b6:	e6db      	b.n	1470 <ull_conn_llcp+0x18>
					conn->procedure_expire++;
    16b8:	3301      	adds	r3, #1
    16ba:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
}
    16be:	b00d      	add	sp, #52	; 0x34
    16c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			tx->next = conn->tx_head;
    16c4:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    16c6:	e9c4 0062 	strd	r0, r0, [r4, #392]	; 0x188
				conn->tx_ctrl_last = tx;
    16ca:	f8c4 0190 	str.w	r0, [r4, #400]	; 0x190
    16ce:	e7b3      	b.n	1638 <ull_conn_llcp+0x1e0>
#if defined(CONFIG_BT_CTLR_LE_PING)
	static inline void event_ping_prep(struct ll_conn *conn)
	{
		struct node_tx *tx;

		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    16d0:	482a      	ldr	r0, [pc, #168]	; (177c <ull_conn_llcp+0x324>)
    16d2:	f00e fc73 	bl	ffbc <mem_acquire>
		if (tx) {
    16d6:	2800      	cmp	r0, #0
    16d8:	f43f af03 	beq.w	14e2 <ull_conn_llcp+0x8a>
			struct pdu_data *pdu_ctrl_tx = (void *)tx->pdu;

			/* procedure request acked */
			conn->llcp_ack = conn->llcp_req;
    16dc:	f894 30bf 	ldrb.w	r3, [r4, #191]	; 0xbf
    16e0:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0

			/* place the ping req packet as next in tx queue */
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
    16e4:	2301      	movs	r3, #1
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    16e6:	7902      	ldrb	r2, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
    16e8:	7143      	strb	r3, [r0, #5]
			conn->tx_head &&
    16ea:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    16ee:	f042 0203 	orr.w	r2, r2, #3
				sizeof(struct pdu_data_llctrl_ping_req);
			pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
    16f2:	2112      	movs	r1, #18
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    16f4:	7102      	strb	r2, [r0, #4]
			pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
    16f6:	71c1      	strb	r1, [r0, #7]
	if (
    16f8:	2b00      	cmp	r3, #0
    16fa:	f000 8606 	beq.w	230a <ull_conn_llcp+0xeb2>
			!conn->llcp_enc.pause_tx &&
    16fe:	f894 212a 	ldrb.w	r2, [r4, #298]	; 0x12a
			conn->tx_head &&
    1702:	0792      	lsls	r2, r2, #30
    1704:	f100 8601 	bmi.w	230a <ull_conn_llcp+0xeb2>
			!conn->llcp_phy.pause_tx &&
    1708:	f894 2183 	ldrb.w	r2, [r4, #387]	; 0x183
    170c:	07d7      	lsls	r7, r2, #31
    170e:	f100 85fc 	bmi.w	230a <ull_conn_llcp+0xeb2>
		if (conn->tx_head == conn->tx_data) {
    1712:	f8d4 2194 	ldr.w	r2, [r4, #404]	; 0x194
    1716:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    1718:	bf04      	itt	eq
    171a:	681a      	ldreq	r2, [r3, #0]
    171c:	f8c4 2194 	streq.w	r2, [r4, #404]	; 0x194
		if (!conn->tx_ctrl) {
    1720:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    1724:	2a00      	cmp	r2, #0
    1726:	f001 8355 	beq.w	2dd4 <ull_conn_llcp+0x197c>
	tx->next = conn->tx_ctrl_last->next;
    172a:	f8d4 3190 	ldr.w	r3, [r4, #400]	; 0x190
    172e:	681a      	ldr	r2, [r3, #0]
    1730:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    1732:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
    1734:	f8c4 0190 	str.w	r0, [r4, #400]	; 0x190
    1738:	6803      	ldr	r3, [r0, #0]
	if (!tx->next) {
    173a:	2b00      	cmp	r3, #0
    173c:	f000 87d0 	beq.w	26e0 <ull_conn_llcp+0x1288>
			ctrl_tx_enqueue(conn, tx);

			/* Start Procedure Timeout (TODO: this shall not replace
			 * terminate procedure)
			 */
			conn->procedure_expire = conn->procedure_reload;
    1740:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
    1744:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
    1748:	e6cb      	b.n	14e2 <ull_conn_llcp+0x8a>
    174a:	bf00      	nop
    174c:	3b9aca00 	.word	0x3b9aca00
    1750:	431bde83 	.word	0x431bde83
    1754:	200004ac 	.word	0x200004ac
    1758:	20003ef0 	.word	0x20003ef0
    175c:	20008304 	.word	0x20008304
    1760:	20001ad8 	.word	0x20001ad8
    1764:	200075bc 	.word	0x200075bc
    1768:	20001af8 	.word	0x20001af8
    176c:	000f423f 	.word	0x000f423f
    1770:	20005f24 	.word	0x20005f24
    1774:	3ff40000 	.word	0x3ff40000
    1778:	20005f10 	.word	0x20005f10
    177c:	2000802c 	.word	0x2000802c
    1780:	20005f00 	.word	0x20005f00
    1784:	0002442c 	.word	0x0002442c
    1788:	00024578 	.word	0x00024578
    178c:	00023fe4 	.word	0x00023fe4
    1790:	20008308 	.word	0x20008308
	if (conn->llcp.encryption.state) {
    1794:	f894 30c4 	ldrb.w	r3, [r4, #196]	; 0xc4
    1798:	f013 0603 	ands.w	r6, r3, #3
    179c:	f000 84b2 	beq.w	2104 <ull_conn_llcp+0xcac>
		if (lll->role &&
    17a0:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
    17a4:	2b00      	cmp	r3, #0
    17a6:	f6bf ae9c 	bge.w	14e2 <ull_conn_llcp+0x8a>
    17aa:	2e01      	cmp	r6, #1
    17ac:	f47f ae99 	bne.w	14e2 <ull_conn_llcp+0x8a>
	{
		struct pdu_data *pdu_ctrl_tx;
		struct node_tx *tx;

		/* acquire tx mem */
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    17b0:	4851      	ldr	r0, [pc, #324]	; (18f8 <ull_conn_llcp+0x4a0>)
    17b2:	f00e fc03 	bl	ffbc <mem_acquire>
		if (!tx) {
    17b6:	4605      	mov	r5, r0
    17b8:	2800      	cmp	r0, #0
    17ba:	f43f ae92 	beq.w	14e2 <ull_conn_llcp+0x8a>
			return -ENOBUFS;
		}

		pdu_ctrl_tx = (void *)tx->pdu;
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    17be:	7903      	ldrb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
    17c0:	220d      	movs	r2, #13
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    17c2:	f043 0303 	orr.w	r3, r3, #3
			sizeof(struct pdu_data_llctrl_enc_rsp);
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
    17c6:	2704      	movs	r7, #4
		BUILD_ASSERT(offsetof(__typeof(pdu_ctrl_tx->llctrl.enc_rsp), ivs) ==
				(offsetof(__typeof(pdu_ctrl_tx->llctrl.enc_rsp), skds) +
				 sizeof(pdu_ctrl_tx->llctrl.enc_rsp.skds)));

		/* NOTE: if not sufficient random numbers, ignore waiting */
		lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_rsp.skds,
    17c8:	f100 0608 	add.w	r6, r0, #8
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    17cc:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
    17ce:	7142      	strb	r2, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
    17d0:	71c7      	strb	r7, [r0, #7]
		lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_rsp.skds,
    17d2:	210c      	movs	r1, #12
    17d4:	4630      	mov	r0, r6
    17d6:	f017 ffb7 	bl	19748 <lll_csrand_isr_get>
				sizeof(pdu_ctrl_tx->llctrl.enc_rsp.skds) +
				sizeof(pdu_ctrl_tx->llctrl.enc_rsp.ivs));

		/* things from slave stored for session key calculation */
		memcpy(&conn->llcp.encryption.skd[8],
    17da:	4631      	mov	r1, r6
    17dc:	2208      	movs	r2, #8
    17de:	f104 00ce 	add.w	r0, r4, #206	; 0xce
    17e2:	f01e fb44 	bl	1fe6e <memcpy>
				&pdu_ctrl_tx->llctrl.enc_rsp.skds[0], 8);
		memcpy(&conn->lll.ccm_rx.iv[4],
    17e6:	463a      	mov	r2, r7
    17e8:	f105 0110 	add.w	r1, r5, #16
    17ec:	f104 0080 	add.w	r0, r4, #128	; 0x80
    17f0:	f01e fb3d 	bl	1fe6e <memcpy>
			conn->tx_head &&
    17f4:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
	if (
    17f8:	2b00      	cmp	r3, #0
    17fa:	f001 80dc 	beq.w	29b6 <ull_conn_llcp+0x155e>
			!conn->llcp_enc.pause_tx &&
    17fe:	f894 212a 	ldrb.w	r2, [r4, #298]	; 0x12a
			conn->tx_head &&
    1802:	0797      	lsls	r7, r2, #30
    1804:	f101 80d7 	bmi.w	29b6 <ull_conn_llcp+0x155e>
			!conn->llcp_phy.pause_tx &&
    1808:	f894 2183 	ldrb.w	r2, [r4, #387]	; 0x183
    180c:	07d6      	lsls	r6, r2, #31
    180e:	f101 80d2 	bmi.w	29b6 <ull_conn_llcp+0x155e>
		if (conn->tx_head == conn->tx_data) {
    1812:	f8d4 2194 	ldr.w	r2, [r4, #404]	; 0x194
    1816:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    1818:	bf04      	itt	eq
    181a:	681a      	ldreq	r2, [r3, #0]
    181c:	f8c4 2194 	streq.w	r2, [r4, #404]	; 0x194
		if (!conn->tx_ctrl) {
    1820:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    1824:	2a00      	cmp	r2, #0
    1826:	f001 8321 	beq.w	2e6c <ull_conn_llcp+0x1a14>
	tx->next = conn->tx_ctrl_last->next;
    182a:	f8d4 3190 	ldr.w	r3, [r4, #400]	; 0x190
    182e:	681a      	ldr	r2, [r3, #0]
    1830:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
    1832:	601d      	str	r5, [r3, #0]
	conn->tx_ctrl_last = tx;
    1834:	f8c4 5190 	str.w	r5, [r4, #400]	; 0x190
    1838:	682b      	ldr	r3, [r5, #0]
	if (!tx->next) {
    183a:	2b00      	cmp	r3, #0
    183c:	f001 82b2 	beq.w	2da4 <ull_conn_llcp+0x194c>
			rx = ll_pdu_rx_alloc();
    1840:	f012 fdfe 	bl	14440 <ll_pdu_rx_alloc>
			if (!rx) {
    1844:	4605      	mov	r5, r0
    1846:	2800      	cmp	r0, #0
    1848:	f43f ae4b 	beq.w	14e2 <ull_conn_llcp+0x8a>
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    184c:	7f2b      	ldrb	r3, [r5, #28]
			rx->hdr.handle = conn->lll.handle;
    184e:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
    1850:	80ea      	strh	r2, [r5, #6]
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    1852:	f043 0303 	orr.w	r3, r3, #3
			rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1856:	2602      	movs	r6, #2
			pdu->len = offsetof(struct pdu_data_llctrl, enc_req) +
    1858:	2117      	movs	r1, #23
			pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    185a:	2203      	movs	r2, #3
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    185c:	772b      	strb	r3, [r5, #28]
			pdu->len = offsetof(struct pdu_data_llctrl, enc_req) +
    185e:	7769      	strb	r1, [r5, #29]
			pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    1860:	77ea      	strb	r2, [r5, #31]
			memcpy(&pdu->llctrl.enc_req.rand[0],
    1862:	f204 112d 	addw	r1, r4, #301	; 0x12d
    1866:	2208      	movs	r2, #8
			rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1868:	712e      	strb	r6, [r5, #4]
			memcpy(&pdu->llctrl.enc_req.rand[0],
    186a:	f105 0020 	add.w	r0, r5, #32
    186e:	f01e fafe 	bl	1fe6e <memcpy>
			pdu->llctrl.enc_req.ediv[0] = conn->llcp_enc.ediv[0];
    1872:	f894 312b 	ldrb.w	r3, [r4, #299]	; 0x12b
    1876:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
			pdu->llctrl.enc_req.ediv[1] = conn->llcp_enc.ediv[1];
    187a:	f894 312c 	ldrb.w	r3, [r4, #300]	; 0x12c
    187e:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
			ll_rx_put(rx->hdr.link, rx);
    1882:	6828      	ldr	r0, [r5, #0]
    1884:	4629      	mov	r1, r5
    1886:	f012 fda7 	bl	143d8 <ll_rx_put>
			ll_rx_sched();
    188a:	f012 fdaf 	bl	143ec <ll_rx_sched>
			conn->llcp.encryption.state = LLCP_ENC_STATE_LTK_WAIT;
    188e:	f894 30c4 	ldrb.w	r3, [r4, #196]	; 0xc4
    1892:	f366 0301 	bfi	r3, r6, #0, #2
    1896:	f884 30c4 	strb.w	r3, [r4, #196]	; 0xc4
    189a:	e622      	b.n	14e2 <ull_conn_llcp+0x8a>
						event_counter = lll->event_counter +
    189c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    189e:	8e61      	ldrh	r1, [r4, #50]	; 0x32
	if (conn->llcp.chan_map.initiate) {
    18a0:	f894 20c4 	ldrb.w	r2, [r4, #196]	; 0xc4
						event_counter = lll->event_counter +
    18a4:	440b      	add	r3, r1
							lll->latency_prepare + lazy;
    18a6:	4499      	add	r9, r3
	if (conn->llcp.chan_map.initiate) {
    18a8:	07d0      	lsls	r0, r2, #31
						event_counter = lll->event_counter +
    18aa:	fa1f f989 	uxth.w	r9, r9
	if (conn->llcp.chan_map.initiate) {
    18ae:	f100 836f 	bmi.w	1f90 <ull_conn_llcp+0xb38>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
    18b2:	f8b4 30ca 	ldrh.w	r3, [r4, #202]	; 0xca
    18b6:	eba9 0903 	sub.w	r9, r9, r3
    18ba:	f419 4f00 	tst.w	r9, #32768	; 0x8000
    18be:	f47f ae10 	bne.w	14e2 <ull_conn_llcp+0x8a>
		conn->llcp_ack = conn->llcp_req;
    18c2:	f894 30bf 	ldrb.w	r3, [r4, #191]	; 0xbf
    18c6:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
		memcpy(&lll->data_chan_map[0],
    18ca:	f104 0538 	add.w	r5, r4, #56	; 0x38
    18ce:	2205      	movs	r2, #5
    18d0:	f104 01c5 	add.w	r1, r4, #197	; 0xc5
    18d4:	4628      	mov	r0, r5
    18d6:	f01e faca 	bl	1fe6e <memcpy>
			util_ones_count_get(&lll->data_chan_map[0],
    18da:	4628      	mov	r0, r5
    18dc:	2105      	movs	r1, #5
    18de:	f00e fd3b 	bl	10358 <util_ones_count_get>
		lll->data_chan_count =
    18e2:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
		conn->chm_updated = 1U;
    18e6:	2201      	movs	r2, #1
		lll->data_chan_count =
    18e8:	f360 0305 	bfi	r3, r0, #0, #6
    18ec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
		conn->chm_updated = 1U;
    18f0:	f884 219c 	strb.w	r2, [r4, #412]	; 0x19c
    18f4:	e5f5      	b.n	14e2 <ull_conn_llcp+0x8a>
    18f6:	bf00      	nop
    18f8:	2000802c 	.word	0x2000802c
	conn_upd = conn_upd_curr;
    18fc:	4ea6      	ldr	r6, [pc, #664]	; (1b98 <ull_conn_llcp+0x740>)
	if (!conn_upd) {
    18fe:	6833      	ldr	r3, [r6, #0]
    1900:	2b00      	cmp	r3, #0
    1902:	f000 845a 	beq.w	21ba <ull_conn_llcp+0xd62>
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    1906:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
    1908:	8e62      	ldrh	r2, [r4, #50]	; 0x32
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    190a:	f894 30de 	ldrb.w	r3, [r4, #222]	; 0xde
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    190e:	4415      	add	r5, r2
    1910:	444d      	add	r5, r9
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    1912:	f013 0303 	ands.w	r3, r3, #3
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    1916:	b2ad      	uxth	r5, r5
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    1918:	f040 82cc 	bne.w	1eb4 <ull_conn_llcp+0xa5c>
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
    191c:	f8b4 70c4 	ldrh.w	r7, [r4, #196]	; 0xc4
    1920:	1bea      	subs	r2, r5, r7
    1922:	fa1f f882 	uxth.w	r8, r2
	} else if (instant_latency <= 0x7FFF) {
    1926:	0412      	lsls	r2, r2, #16
    1928:	f53f addb 	bmi.w	14e2 <ull_conn_llcp+0x8a>
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    192c:	f894 1148 	ldrb.w	r1, [r4, #328]	; 0x148
    1930:	f894 2149 	ldrb.w	r2, [r4, #329]	; 0x149
		conn->llcp_cu.ack = conn->llcp_cu.req;
    1934:	f894 00dc 	ldrb.w	r0, [r4, #220]	; 0xdc
    1938:	f884 00dd 	strb.w	r0, [r4, #221]	; 0xdd
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    193c:	428a      	cmp	r2, r1
		conn->llcp_ack = conn->llcp_req;
    193e:	f894 00bf 	ldrb.w	r0, [r4, #191]	; 0xbf
    1942:	f884 00c0 	strb.w	r0, [r4, #192]	; 0xc0
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    1946:	d009      	beq.n	195c <ull_conn_llcp+0x504>
				(conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
    1948:	f894 214a 	ldrb.w	r2, [r4, #330]	; 0x14a
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    194c:	f002 0207 	and.w	r2, r2, #7
    1950:	2a05      	cmp	r2, #5
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    1952:	bf04      	itt	eq
    1954:	f884 1149 	strbeq.w	r1, [r4, #329]	; 0x149
			conn->procedure_expire = 0U;
    1958:	f8a4 30b0 	strheq.w	r3, [r4, #176]	; 0xb0
		if (conn_upd_curr == conn) {
    195c:	6833      	ldr	r3, [r6, #0]
    195e:	429c      	cmp	r4, r3
	conn_upd_curr = NULL;
    1960:	bf04      	itt	eq
    1962:	2300      	moveq	r3, #0
    1964:	6033      	streq	r3, [r6, #0]
		rx = conn->llcp_rx;
    1966:	f8d4 60d8 	ldr.w	r6, [r4, #216]	; 0xd8
		LL_ASSERT(rx && rx->hdr.link);
    196a:	2e00      	cmp	r6, #0
    196c:	f000 84f7 	beq.w	235e <ull_conn_llcp+0xf06>
    1970:	6830      	ldr	r0, [r6, #0]
    1972:	2800      	cmp	r0, #0
    1974:	f000 84f3 	beq.w	235e <ull_conn_llcp+0xf06>
		if ((conn->llcp_cu.interval != lll->interval) ||
    1978:	f8b4 30e0 	ldrh.w	r3, [r4, #224]	; 0xe0
    197c:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
		conn->llcp_rx = rx->hdr.link->mem;
    197e:	6841      	ldr	r1, [r0, #4]
    1980:	f8c4 10d8 	str.w	r1, [r4, #216]	; 0xd8
		if ((conn->llcp_cu.interval != lll->interval) ||
    1984:	4293      	cmp	r3, r2
    1986:	f8b4 10e2 	ldrh.w	r1, [r4, #226]	; 0xe2
    198a:	f8b4 c0e4 	ldrh.w	ip, [r4, #228]	; 0xe4
    198e:	f000 85dd 	beq.w	254c <ull_conn_llcp+0x10f4>
			rx->hdr.handle = lll->handle;
    1992:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
    1994:	80f2      	strh	r2, [r6, #6]
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    1996:	f04f 0e0b 	mov.w	lr, #11
			cu->status = 0x00;
    199a:	2200      	movs	r2, #0
			cu->interval = conn->llcp_cu.interval;
    199c:	83f3      	strh	r3, [r6, #30]
			cu->latency = conn->llcp_cu.latency;
    199e:	8431      	strh	r1, [r6, #32]
			cu->timeout = conn->llcp_cu.timeout;
    19a0:	f8a6 c022 	strh.w	ip, [r6, #34]	; 0x22
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    19a4:	f886 e004 	strb.w	lr, [r6, #4]
			cu->status = 0x00;
    19a8:	7732      	strb	r2, [r6, #28]
		ll_rx_put(rx->hdr.link, rx);
    19aa:	4631      	mov	r1, r6
    19ac:	f012 fd14 	bl	143d8 <ll_rx_put>
		ll_rx_sched();
    19b0:	f012 fd1c 	bl	143ec <ll_rx_sched>
		conn_interval_old = instant_latency * lll->interval;
    19b4:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
		latency = conn_interval_old / conn->llcp_cu.interval;
    19b6:	f8b4 60e0 	ldrh.w	r6, [r4, #224]	; 0xe0
		conn_interval_old = instant_latency * lll->interval;
    19ba:	fb13 f308 	smulbb	r3, r3, r8
    19be:	b29b      	uxth	r3, r3
		latency = conn_interval_old / conn->llcp_cu.interval;
    19c0:	fbb3 f1f6 	udiv	r1, r3, r6
		conn_interval_new = latency * conn->llcp_cu.interval;
    19c4:	fb16 f201 	smulbb	r2, r6, r1
    19c8:	b292      	uxth	r2, r2
		if (conn_interval_new > conn_interval_old) {
    19ca:	4293      	cmp	r3, r2
		latency = conn_interval_old / conn->llcp_cu.interval;
    19cc:	fa1f f881 	uxth.w	r8, r1
		if (conn_interval_new > conn_interval_old) {
    19d0:	f080 84a7 	bcs.w	2322 <ull_conn_llcp+0xeca>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
    19d4:	1ad3      	subs	r3, r2, r3
    19d6:	4871      	ldr	r0, [pc, #452]	; (1b9c <ull_conn_llcp+0x744>)
    19d8:	f240 42e2 	movw	r2, #1250	; 0x4e2
    19dc:	fb02 f303 	mul.w	r3, r2, r3
    19e0:	fba3 0100 	umull	r0, r1, r3, r0
    19e4:	a36a      	add	r3, pc, #424	; (adr r3, 1b90 <ull_conn_llcp+0x738>)
    19e6:	e9d3 2300 	ldrd	r2, r3, [r3]
    19ea:	f7ff f827 	bl	a3c <__aeabi_uldivmod>
    19ee:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    19f2:	4482      	add	sl, r0
		lll->latency_prepare += lazy;
    19f4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
		lll->latency_prepare -= (instant_latency - latency);
    19f6:	1b7d      	subs	r5, r7, r5
		lll->latency_prepare += lazy;
    19f8:	4499      	add	r9, r3
		} else if (!lll->role) {
    19fa:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
		lll->latency_prepare -= (instant_latency - latency);
    19fe:	44a8      	add	r8, r5
    1a00:	44c8      	add	r8, r9
		} else if (!lll->role) {
    1a02:	2b00      	cmp	r3, #0
		conn_interval_us = conn->llcp_cu.interval * 1250U;
    1a04:	f240 49e2 	movw	r9, #1250	; 0x4e2
		lll->latency_prepare -= (instant_latency - latency);
    1a08:	f8a4 8032 	strh.w	r8, [r4, #50]	; 0x32
		conn_interval_us = conn->llcp_cu.interval * 1250U;
    1a0c:	fb09 f806 	mul.w	r8, r9, r6
		} else if (!lll->role) {
    1a10:	f2c0 85eb 	blt.w	25ea <ull_conn_llcp+0x1192>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    1a14:	4f61      	ldr	r7, [pc, #388]	; (1b9c <ull_conn_llcp+0x744>)
    1a16:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
    1a1a:	a35d      	add	r3, pc, #372	; (adr r3, 1b90 <ull_conn_llcp+0x738>)
    1a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
    1a20:	fba0 0107 	umull	r0, r1, r0, r7
    1a24:	f7ff f80a 	bl	a3c <__aeabi_uldivmod>
    1a28:	4684      	mov	ip, r0
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0*1250U);
    1a2a:	f8b4 0158 	ldrh.w	r0, [r4, #344]	; 0x158
    1a2e:	fb09 f000 	mul.w	r0, r9, r0
    1a32:	a357      	add	r3, pc, #348	; (adr r3, 1b90 <ull_conn_llcp+0x738>)
    1a34:	e9d3 2300 	ldrd	r2, r3, [r3]
    1a38:	fba0 0107 	umull	r0, r1, r0, r7
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    1a3c:	f02c 477f 	bic.w	r7, ip, #4278190080	; 0xff000000
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0*1250U);
    1a40:	f7fe fffc 	bl	a3c <__aeabi_uldivmod>
			need_schedule_update = need_schedule_cnt;
    1a44:	4956      	ldr	r1, [pc, #344]	; (1ba0 <ull_conn_llcp+0x748>)
    1a46:	4b57      	ldr	r3, [pc, #348]	; (1ba4 <ull_conn_llcp+0x74c>)
			need_conn_update = false;
    1a48:	4a57      	ldr	r2, [pc, #348]	; (1ba8 <ull_conn_llcp+0x750>)
			need_schedule_update = need_schedule_cnt;
    1a4a:	6809      	ldr	r1, [r1, #0]
    1a4c:	6019      	str	r1, [r3, #0]
			conn->llcp_conn_param.offset0 = 0;
    1a4e:	2300      	movs	r3, #0
			ticks_win_offset += 1U;
    1a50:	3701      	adds	r7, #1
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0*1250U);
    1a52:	4482      	add	sl, r0
			need_conn_update = false;
    1a54:	7013      	strb	r3, [r2, #0]
			conn->llcp_conn_param.offset0 = 0;
    1a56:	f8a4 3158 	strh.w	r3, [r4, #344]	; 0x158
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    1a5a:	f8b4 20e4 	ldrh.w	r2, [r4, #228]	; 0xe4
		lll->latency = conn->llcp_cu.latency;
    1a5e:	f8b4 00e2 	ldrh.w	r0, [r4, #226]	; 0xe2
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1a62:	4b52      	ldr	r3, [pc, #328]	; (1bac <ull_conn_llcp+0x754>)
		lll->interval = conn->llcp_cu.interval;
    1a64:	85e6      	strh	r6, [r4, #46]	; 0x2e
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    1a66:	f242 7610 	movw	r6, #10000	; 0x2710
    1a6a:	fb06 8202 	mla	r2, r6, r2, r8
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    1a6e:	4950      	ldr	r1, [pc, #320]	; (1bb0 <ull_conn_llcp+0x758>)
		lll->latency = conn->llcp_cu.latency;
    1a70:	8620      	strh	r0, [r4, #48]	; 0x30
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1a72:	4443      	add	r3, r8
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1a74:	1d86      	adds	r6, r0, #6
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    1a76:	3a01      	subs	r2, #1
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1a78:	fbb3 f3f8 	udiv	r3, r3, r8
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    1a7c:	fbb2 f2f8 	udiv	r2, r2, r8
    1a80:	f8a4 20aa 	strh.w	r2, [r4, #170]	; 0xaa
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1a84:	b29a      	uxth	r2, r3
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1a86:	42b2      	cmp	r2, r6
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    1a88:	4441      	add	r1, r8
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1a8a:	f8a4 20b6 	strh.w	r2, [r4, #182]	; 0xb6
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    1a8e:	fbb1 f1f8 	udiv	r1, r1, r8
    1a92:	f8a4 10ae 	strh.w	r1, [r4, #174]	; 0xae
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1a96:	dd02      	ble.n	1a9e <ull_conn_llcp+0x646>
			(conn->apto_reload - (lll->latency + 6)) :
    1a98:	1a12      	subs	r2, r2, r0
    1a9a:	3a06      	subs	r2, #6
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1a9c:	b292      	uxth	r2, r2
		if (conn->llcp_cu.cmd) {
    1a9e:	f894 30de 	ldrb.w	r3, [r4, #222]	; 0xde
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1aa2:	f8a4 20b2 	strh.w	r2, [r4, #178]	; 0xb2
		if (conn->llcp_cu.cmd) {
    1aa6:	075d      	lsls	r5, r3, #29
			conn->supervision_expire = 0U;
    1aa8:	bf44      	itt	mi
    1aaa:	2300      	movmi	r3, #0
    1aac:	f8a4 30ac 	strhmi.w	r3, [r4, #172]	; 0xac
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
    1ab0:	2102      	movs	r1, #2
    1ab2:	2001      	movs	r0, #1
    1ab4:	f019 fd8e 	bl	1b5d4 <mayfly_is_enabled>
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
    1ab8:	2200      	movs	r2, #0
    1aba:	2102      	movs	r1, #2
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
    1abc:	4606      	mov	r6, r0
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
    1abe:	2001      	movs	r0, #1
    1ac0:	f00e fb20 	bl	10104 <mayfly_enable>
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
    1ac4:	493b      	ldr	r1, [pc, #236]	; (1bb4 <ull_conn_llcp+0x75c>)
    1ac6:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
    1aca:	4620      	mov	r0, r4
    1acc:	f00e faac 	bl	10028 <mem_index_get>
		ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    1ad0:	1cc2      	adds	r2, r0, #3
    1ad2:	fa5f fb82 	uxtb.w	fp, r2
		ticker_status =	ticker_stop(TICKER_INSTANCE_ID_CTLR,
    1ad6:	4b38      	ldr	r3, [pc, #224]	; (1bb8 <ull_conn_llcp+0x760>)
    1ad8:	9400      	str	r4, [sp, #0]
    1ada:	465a      	mov	r2, fp
    1adc:	2101      	movs	r1, #1
    1ade:	2000      	movs	r0, #0
    1ae0:	f00f ff3c 	bl	1195c <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    1ae4:	f030 0302 	bics.w	r3, r0, #2
    1ae8:	d00c      	beq.n	1b04 <ull_conn_llcp+0x6ac>
    1aea:	4a34      	ldr	r2, [pc, #208]	; (1bbc <ull_conn_llcp+0x764>)
    1aec:	4934      	ldr	r1, [pc, #208]	; (1bc0 <ull_conn_llcp+0x768>)
    1aee:	4835      	ldr	r0, [pc, #212]	; (1bc4 <ull_conn_llcp+0x76c>)
    1af0:	f640 5336 	movw	r3, #3382	; 0xd36
    1af4:	f01c fa29 	bl	1df4a <printk>
    1af8:	4040      	eors	r0, r0
    1afa:	f380 8811 	msr	BASEPRI, r0
    1afe:	f04f 0003 	mov.w	r0, #3
    1b02:	df02      	svc	2
					HAL_TICKER_US_TO_TICKS(periodic_us),
    1b04:	4925      	ldr	r1, [pc, #148]	; (1b9c <ull_conn_llcp+0x744>)
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1b06:	68e3      	ldr	r3, [r4, #12]
    1b08:	4a2f      	ldr	r2, [pc, #188]	; (1bc8 <ull_conn_llcp+0x770>)
    1b0a:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 1bcc <ull_conn_llcp+0x774>
    1b0e:	9304      	str	r3, [sp, #16]
					HAL_TICKER_US_TO_TICKS(periodic_us),
    1b10:	fba8 8901 	umull	r8, r9, r8, r1
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1b14:	2500      	movs	r5, #0
    1b16:	9207      	str	r2, [sp, #28]
					HAL_TICKER_REMAINDER(periodic_us),
    1b18:	4640      	mov	r0, r8
    1b1a:	a31d      	add	r3, pc, #116	; (adr r3, 1b90 <ull_conn_llcp+0x738>)
    1b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
    1b20:	4649      	mov	r1, r9
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1b22:	f8cd c014 	str.w	ip, [sp, #20]
    1b26:	9408      	str	r4, [sp, #32]
    1b28:	9406      	str	r4, [sp, #24]
    1b2a:	9503      	str	r5, [sp, #12]
					HAL_TICKER_REMAINDER(periodic_us),
    1b2c:	f7fe ff86 	bl	a3c <__aeabi_uldivmod>
    1b30:	4610      	mov	r0, r2
    1b32:	4619      	mov	r1, r3
    1b34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1b38:	2300      	movs	r3, #0
    1b3a:	f7fe ff7f 	bl	a3c <__aeabi_uldivmod>
					HAL_TICKER_US_TO_TICKS(periodic_us),
    1b3e:	a314      	add	r3, pc, #80	; (adr r3, 1b90 <ull_conn_llcp+0x738>)
    1b40:	e9d3 2300 	ldrd	r2, r3, [r3]
					HAL_TICKER_REMAINDER(periodic_us),
    1b44:	4604      	mov	r4, r0
					HAL_TICKER_US_TO_TICKS(periodic_us),
    1b46:	4649      	mov	r1, r9
    1b48:	4640      	mov	r0, r8
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1b4a:	9402      	str	r4, [sp, #8]
					HAL_TICKER_US_TO_TICKS(periodic_us),
    1b4c:	f7fe ff76 	bl	a3c <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1b50:	4653      	mov	r3, sl
					HAL_TICKER_US_TO_TICKS(periodic_us),
    1b52:	9001      	str	r0, [sp, #4]
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1b54:	9700      	str	r7, [sp, #0]
    1b56:	4628      	mov	r0, r5
    1b58:	465a      	mov	r2, fp
    1b5a:	2101      	movs	r1, #1
    1b5c:	f00f fe92 	bl	11884 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    1b60:	f030 0302 	bics.w	r3, r0, #2
    1b64:	d00c      	beq.n	1b80 <ull_conn_llcp+0x728>
    1b66:	4a15      	ldr	r2, [pc, #84]	; (1bbc <ull_conn_llcp+0x764>)
    1b68:	4915      	ldr	r1, [pc, #84]	; (1bc0 <ull_conn_llcp+0x768>)
    1b6a:	4816      	ldr	r0, [pc, #88]	; (1bc4 <ull_conn_llcp+0x76c>)
    1b6c:	f44f 6355 	mov.w	r3, #3408	; 0xd50
    1b70:	f01c f9eb 	bl	1df4a <printk>
    1b74:	4040      	eors	r0, r0
    1b76:	f380 8811 	msr	BASEPRI, r0
    1b7a:	f04f 0003 	mov.w	r0, #3
    1b7e:	df02      	svc	2
		if (mayfly_was_enabled) {
    1b80:	2e00      	cmp	r6, #0
    1b82:	f040 84fc 	bne.w	257e <ull_conn_llcp+0x1126>
							return -ECANCELED;
    1b86:	f06f 0047 	mvn.w	r0, #71	; 0x47
    1b8a:	e4b1      	b.n	14f0 <ull_conn_llcp+0x98>
    1b8c:	f3af 8000 	nop.w
    1b90:	1afd498d 	.word	0x1afd498d
    1b94:	00000007 	.word	0x00000007
    1b98:	200075a4 	.word	0x200075a4
    1b9c:	3b9aca00 	.word	0x3b9aca00
    1ba0:	20000608 	.word	0x20000608
    1ba4:	2000060c 	.word	0x2000060c
    1ba8:	2000a862 	.word	0x2000a862
    1bac:	01c9c37f 	.word	0x01c9c37f
    1bb0:	026259ff 	.word	0x026259ff
    1bb4:	20006f24 	.word	0x20006f24
    1bb8:	00014e1d 	.word	0x00014e1d
    1bbc:	0002442c 	.word	0x0002442c
    1bc0:	000245a8 	.word	0x000245a8
    1bc4:	00023fe4 	.word	0x00023fe4
    1bc8:	00014dc5 	.word	0x00014dc5
    1bcc:	00017c69 	.word	0x00017c69
						event_counter = lll->event_counter +
    1bd0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    1bd2:	8e62      	ldrh	r2, [r4, #50]	; 0x32
		if (conn->llcp.phy_upd_ind.initiate) {
    1bd4:	f894 50c4 	ldrb.w	r5, [r4, #196]	; 0xc4
						event_counter = lll->event_counter +
    1bd8:	4413      	add	r3, r2
							lll->latency_prepare + lazy;
    1bda:	4499      	add	r9, r3
		if (conn->llcp.phy_upd_ind.initiate) {
    1bdc:	07ee      	lsls	r6, r5, #31
						event_counter = lll->event_counter +
    1bde:	fa1f f989 	uxth.w	r9, r9
		if (conn->llcp.phy_upd_ind.initiate) {
    1be2:	46ab      	mov	fp, r5
    1be4:	f100 8232 	bmi.w	204c <ull_conn_llcp+0xbf4>
		} else if (((event_counter - conn->llcp.phy_upd_ind.instant) &
    1be8:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    1bec:	eba9 0903 	sub.w	r9, r9, r3
    1bf0:	f419 4f00 	tst.w	r9, #32768	; 0x8000
    1bf4:	f47f ac75 	bne.w	14e2 <ull_conn_llcp+0x8a>
			old_rx = lll->phy_rx;
    1bf8:	f894 2049 	ldrb.w	r2, [r4, #73]	; 0x49
		if (!conn->common.fex_valid ||
    1bfc:	f894 30be 	ldrb.w	r3, [r4, #190]	; 0xbe
			old_tx = lll->phy_tx;
    1c00:	f894 a048 	ldrb.w	sl, [r4, #72]	; 0x48
			conn->llcp_ack = conn->llcp_req;
    1c04:	f894 10bf 	ldrb.w	r1, [r4, #191]	; 0xbf
			uint16_t eff_rx_time = lll->max_rx_time;
    1c08:	f8b4 8046 	ldrh.w	r8, [r4, #70]	; 0x46
    1c0c:	f8b4 60bc 	ldrh.w	r6, [r4, #188]	; 0xbc
			conn->llcp_ack = conn->llcp_req;
    1c10:	f884 10c0 	strb.w	r1, [r4, #192]	; 0xc0
			old_rx = lll->phy_rx;
    1c14:	f002 0207 	and.w	r2, r2, #7
		if (!conn->common.fex_valid ||
    1c18:	07df      	lsls	r7, r3, #31
			old_rx = lll->phy_rx;
    1c1a:	920a      	str	r2, [sp, #40]	; 0x28
			old_tx = lll->phy_tx;
    1c1c:	f00a 0a07 	and.w	sl, sl, #7
		feature_coded_phy = (conn->llcp_feature.features_conn &
    1c20:	f8d4 20f4 	ldr.w	r2, [r4, #244]	; 0xf4
		if (!conn->common.fex_valid ||
    1c24:	f140 8390 	bpl.w	2348 <ull_conn_llcp+0xef0>
    1c28:	0510      	lsls	r0, r2, #20
    1c2a:	f140 838d 	bpl.w	2348 <ull_conn_llcp+0xef0>
			tx_time = MIN(PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED),
    1c2e:	f244 2990 	movw	r9, #17040	; 0x4290
    1c32:	454e      	cmp	r6, r9
    1c34:	bf28      	it	cs
    1c36:	464e      	movcs	r6, r9
			tx_time = MAX(PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M), tx_time);
    1c38:	f5b6 7fa4 	cmp.w	r6, #328	; 0x148
    1c3c:	bf38      	it	cc
    1c3e:	f44f 76a4 	movcc.w	r6, #328	; 0x148
			if (conn->llcp.phy_upd_ind.tx) {
    1c42:	f015 0f1c 	tst.w	r5, #28
    1c46:	f040 84a3 	bne.w	2590 <ull_conn_llcp+0x1138>
			uint16_t eff_tx_time = lll->max_tx_time;
    1c4a:	f8b4 7044 	ldrh.w	r7, [r4, #68]	; 0x44
			if (conn->llcp.phy_upd_ind.rx) {
    1c4e:	f015 0fe0 	tst.w	r5, #224	; 0xe0
    1c52:	d00c      	beq.n	1c6e <ull_conn_llcp+0x816>
				lll->phy_rx = conn->llcp.phy_upd_ind.rx;
    1c54:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
					calc_eff_time(lll->max_rx_octets, lll->phy_rx,
    1c58:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
				lll->phy_rx = conn->llcp.phy_upd_ind.rx;
    1c5c:	0969      	lsrs	r1, r5, #5
    1c5e:	f361 0302 	bfi	r3, r1, #0, #3
    1c62:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
					calc_eff_time(lll->max_rx_octets, lll->phy_rx,
    1c66:	464a      	mov	r2, r9
    1c68:	f012 ff6e 	bl	14b48 <calc_eff_time>
    1c6c:	4680      	mov	r8, r0
			lll->phy_flags = conn->phy_pref_flags;
    1c6e:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
    1c72:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
			rx = conn->llcp_rx;
    1c76:	f8d4 50d8 	ldr.w	r5, [r4, #216]	; 0xd8
			lll->phy_flags = conn->phy_pref_flags;
    1c7a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    1c7e:	f363 02c3 	bfi	r2, r3, #3, #1
    1c82:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
			LL_ASSERT(rx && rx->hdr.link);
    1c86:	2d00      	cmp	r5, #0
    1c88:	f000 849d 	beq.w	25c6 <ull_conn_llcp+0x116e>
    1c8c:	6828      	ldr	r0, [r5, #0]
    1c8e:	2800      	cmp	r0, #0
    1c90:	f000 8499 	beq.w	25c6 <ull_conn_llcp+0x116e>
			conn->llcp_rx = rx->hdr.link->mem;
    1c94:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
    1c98:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
    1c9c:	6841      	ldr	r1, [r0, #4]
    1c9e:	f8c4 10d8 	str.w	r1, [r4, #216]	; 0xd8
			if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
    1ca2:	f01b 0f02 	tst.w	fp, #2
    1ca6:	f3c2 0c02 	ubfx	ip, r2, #0, #3
    1caa:	f3c3 0102 	ubfx	r1, r3, #0, #3
    1cae:	f002 0207 	and.w	r2, r2, #7
    1cb2:	f003 0307 	and.w	r3, r3, #7
    1cb6:	d102      	bne.n	1cbe <ull_conn_llcp+0x866>
    1cb8:	4592      	cmp	sl, r2
    1cba:	f000 869f 	beq.w	29fc <ull_conn_llcp+0x15a4>
			rx->hdr.handle = lll->handle;
    1cbe:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    1cc0:	80eb      	strh	r3, [r5, #6]
			rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    1cc2:	220f      	movs	r2, #15
			upd->status = 0U;
    1cc4:	2300      	movs	r3, #0
			upd->rx = lll->phy_rx;
    1cc6:	77a9      	strb	r1, [r5, #30]
			upd->tx = lll->phy_tx;
    1cc8:	f885 c01d 	strb.w	ip, [r5, #29]
			rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    1ccc:	712a      	strb	r2, [r5, #4]
			upd->status = 0U;
    1cce:	772b      	strb	r3, [r5, #28]
			ll_rx_put(rx->hdr.link, rx);
    1cd0:	4629      	mov	r1, r5
    1cd2:	f012 fb81 	bl	143d8 <ll_rx_put>
			rx = conn->llcp_rx;
    1cd6:	f8d4 50d8 	ldr.w	r5, [r4, #216]	; 0xd8
			LL_ASSERT(rx && rx->hdr.link);
    1cda:	2d00      	cmp	r5, #0
    1cdc:	f000 84f0 	beq.w	26c0 <ull_conn_llcp+0x1268>
    1ce0:	6828      	ldr	r0, [r5, #0]
    1ce2:	2800      	cmp	r0, #0
    1ce4:	f000 84ec 	beq.w	26c0 <ull_conn_llcp+0x1268>
			if ((eff_tx_time <= lll->max_tx_time) &&
    1ce8:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
			conn->llcp_rx = rx->hdr.link->mem;
    1cec:	6842      	ldr	r2, [r0, #4]
    1cee:	f8c4 20d8 	str.w	r2, [r4, #216]	; 0xd8
			if ((eff_tx_time <= lll->max_tx_time) &&
    1cf2:	42bb      	cmp	r3, r7
    1cf4:	d308      	bcc.n	1d08 <ull_conn_llcp+0x8b0>
    1cf6:	429e      	cmp	r6, r3
    1cf8:	d306      	bcc.n	1d08 <ull_conn_llcp+0x8b0>
					(eff_rx_time <= lll->max_rx_time) &&
    1cfa:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
					(lll->max_tx_time <= max_tx_time) &&
    1cfe:	4543      	cmp	r3, r8
    1d00:	d302      	bcc.n	1d08 <ull_conn_llcp+0x8b0>
					(eff_rx_time <= lll->max_rx_time) &&
    1d02:	4599      	cmp	r9, r3
    1d04:	f080 868f 	bcs.w	2a26 <ull_conn_llcp+0x15ce>
			lll->max_tx_time = eff_tx_time;
    1d08:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
			lll->max_rx_time = eff_rx_time;
    1d0c:	f8a4 8046 	strh.w	r8, [r4, #70]	; 0x46
			pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
    1d10:	7f2b      	ldrb	r3, [r5, #28]
			rx->hdr.handle = lll->handle;
    1d12:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
    1d14:	80ea      	strh	r2, [r5, #6]
			pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
    1d16:	f043 0303 	orr.w	r3, r3, #3
			rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1d1a:	2102      	movs	r1, #2
			pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
    1d1c:	2209      	movs	r2, #9
			rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1d1e:	7129      	strb	r1, [r5, #4]
			pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
    1d20:	772b      	strb	r3, [r5, #28]
			pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
    1d22:	776a      	strb	r2, [r5, #29]
			lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
    1d24:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
			lr->max_tx_octets = sys_cpu_to_le16(lll->max_tx_octets);
    1d28:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
			lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
    1d2c:	842b      	strh	r3, [r5, #32]
			pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    1d2e:	2315      	movs	r3, #21
			lr->max_tx_octets = sys_cpu_to_le16(lll->max_tx_octets);
    1d30:	84aa      	strh	r2, [r5, #36]	; 0x24
			pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    1d32:	77eb      	strb	r3, [r5, #31]
			ll_rx_put(rx->hdr.link, rx);
    1d34:	4629      	mov	r1, r5
			lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
    1d36:	f8a5 8022 	strh.w	r8, [r5, #34]	; 0x22
			lr->max_tx_time = sys_cpu_to_le16(lll->max_tx_time);
    1d3a:	84ef      	strh	r7, [r5, #38]	; 0x26
			ll_rx_put(rx->hdr.link, rx);
    1d3c:	f012 fb4c 	bl	143d8 <ll_rx_put>
			ll_rx_sched();
    1d40:	f012 fb54 	bl	143ec <ll_rx_sched>
    1d44:	f7ff bbcd 	b.w	14e2 <ull_conn_llcp+0x8a>
					LL_ASSERT(0);
    1d48:	4ab9      	ldr	r2, [pc, #740]	; (2030 <ull_conn_llcp+0xbd8>)
    1d4a:	49ba      	ldr	r1, [pc, #744]	; (2034 <ull_conn_llcp+0xbdc>)
    1d4c:	48ba      	ldr	r0, [pc, #744]	; (2038 <ull_conn_llcp+0xbe0>)
    1d4e:	f240 431a 	movw	r3, #1050	; 0x41a
    1d52:	f01c f8fa 	bl	1df4a <printk>
    1d56:	4040      	eors	r0, r0
    1d58:	f380 8811 	msr	BASEPRI, r0
    1d5c:	f04f 0003 	mov.w	r0, #3
    1d60:	df02      	svc	2
					break;
    1d62:	f7ff bbbe 	b.w	14e2 <ull_conn_llcp+0x8a>
			else avg_conn_evt_length[old_handle] = (avg_conn_evt_length[old_handle]*(100-ewma)+(uint32_t)k_cyc_to_ns_floor64(stop_cycle[old_handle]-start_cycle[old_handle])/NSEC_PER_USEC/USEC_PER_MSEC*ewma+50)/100;
    1d66:	4ab5      	ldr	r2, [pc, #724]	; (203c <ull_conn_llcp+0xbe4>)
    1d68:	48b5      	ldr	r0, [pc, #724]	; (2040 <ull_conn_llcp+0xbe8>)
    1d6a:	6812      	ldr	r2, [r2, #0]
    1d6c:	f1c2 0c64 	rsb	ip, r2, #100	; 0x64
    1d70:	fb03 f30c 	mul.w	r3, r3, ip
    1d74:	3332      	adds	r3, #50	; 0x32
    1d76:	fb08 3302 	mla	r3, r8, r2, r3
    1d7a:	fba0 2303 	umull	r2, r3, r0, r3
    1d7e:	095b      	lsrs	r3, r3, #5
    1d80:	f841 3025 	str.w	r3, [r1, r5, lsl #2]
    1d84:	f7ff bb92 	b.w	14ac <ull_conn_llcp+0x54>
			} else if (conn->llcp_feature.ack != conn->llcp_feature.req) {
    1d88:	f894 00f1 	ldrb.w	r0, [r4, #241]	; 0xf1
    1d8c:	f894 60f0 	ldrb.w	r6, [r4, #240]	; 0xf0
    1d90:	42b0      	cmp	r0, r6
    1d92:	d155      	bne.n	1e40 <ull_conn_llcp+0x9e8>
			} else if (conn->llcp_version.ack != conn->llcp_version.req) {
    1d94:	f894 00fd 	ldrb.w	r0, [r4, #253]	; 0xfd
    1d98:	f894 60fc 	ldrb.w	r6, [r4, #252]	; 0xfc
    1d9c:	42b0      	cmp	r0, r6
    1d9e:	f000 82fd 	beq.w	239c <ull_conn_llcp+0xf44>
		if (!((conn->llcp_version.ack - conn->llcp_version.req) & 0x01)) {
    1da2:	1b80      	subs	r0, r0, r6
    1da4:	07c1      	lsls	r1, r0, #31
    1da6:	f57f ab9c 	bpl.w	14e2 <ull_conn_llcp+0x8a>
		if (conn->llcp_version.tx == 0U) {
    1daa:	f894 30fe 	ldrb.w	r3, [r4, #254]	; 0xfe
    1dae:	07da      	lsls	r2, r3, #31
    1db0:	f140 873b 	bpl.w	2c2a <ull_conn_llcp+0x17d2>
		} else if (conn->llcp_version.rx) {
    1db4:	079d      	lsls	r5, r3, #30
    1db6:	f140 8729 	bpl.w	2c0c <ull_conn_llcp+0x17b4>
			rx = ll_pdu_rx_alloc();
    1dba:	f012 fb41 	bl	14440 <ll_pdu_rx_alloc>
			if (!rx) {
    1dbe:	4601      	mov	r1, r0
    1dc0:	2800      	cmp	r0, #0
    1dc2:	d071      	beq.n	1ea8 <ull_conn_llcp+0xa50>
			conn->llcp_version.ack = conn->llcp_version.req;
    1dc4:	f894 30fc 	ldrb.w	r3, [r4, #252]	; 0xfc
    1dc8:	f884 30fd 	strb.w	r3, [r4, #253]	; 0xfd
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    1dcc:	7f03      	ldrb	r3, [r0, #28]
			rx->hdr.handle = conn->lll.handle;
    1dce:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
    1dd0:	80c2      	strh	r2, [r0, #6]
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    1dd2:	f043 0303 	orr.w	r3, r3, #3
    1dd6:	770b      	strb	r3, [r1, #28]
			rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1dd8:	2002      	movs	r0, #2
			pdu->len = offsetof(struct pdu_data_llctrl, version_ind) +
    1dda:	2206      	movs	r2, #6
			pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    1ddc:	230c      	movs	r3, #12
			rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1dde:	7108      	strb	r0, [r1, #4]
			pdu->len = offsetof(struct pdu_data_llctrl, version_ind) +
    1de0:	774a      	strb	r2, [r1, #29]
			pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    1de2:	77cb      	strb	r3, [r1, #31]
			pdu->llctrl.version_ind.version_number =
    1de4:	f894 00ff 	ldrb.w	r0, [r4, #255]	; 0xff
			pdu->llctrl.version_ind.sub_version_number =
    1de8:	f8b4 3102 	ldrh.w	r3, [r4, #258]	; 0x102
			pdu->llctrl.version_ind.company_id =
    1dec:	f8b4 2100 	ldrh.w	r2, [r4, #256]	; 0x100
    1df0:	f8a1 2021 	strh.w	r2, [r1, #33]	; 0x21
			pdu->llctrl.version_ind.version_number =
    1df4:	f881 0020 	strb.w	r0, [r1, #32]
			pdu->llctrl.version_ind.sub_version_number =
    1df8:	f8a1 3023 	strh.w	r3, [r1, #35]	; 0x23
			ll_rx_put(rx->hdr.link, rx);
    1dfc:	6808      	ldr	r0, [r1, #0]
    1dfe:	f012 faeb 	bl	143d8 <ll_rx_put>
			ll_rx_sched();
    1e02:	f012 faf3 	bl	143ec <ll_rx_sched>
    1e06:	f894 30bf 	ldrb.w	r3, [r4, #191]	; 0xbf
    1e0a:	f894 50c0 	ldrb.w	r5, [r4, #192]	; 0xc0
    1e0e:	f7ff bb63 	b.w	14d8 <ull_conn_llcp+0x80>
		switch (conn->llcp_length.state) {
    1e12:	f002 0107 	and.w	r1, r2, #7
    1e16:	2906      	cmp	r1, #6
    1e18:	f201 816d 	bhi.w	30f6 <ull_conn_llcp+0x1c9e>
    1e1c:	a001      	add	r0, pc, #4	; (adr r0, 1e24 <ull_conn_llcp+0x9cc>)
    1e1e:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    1e22:	bf00      	nop
    1e24:	00002241 	.word	0x00002241
    1e28:	000015c3 	.word	0x000015c3
    1e2c:	000015c3 	.word	0x000015c3
    1e30:	000015c3 	.word	0x000015c3
    1e34:	000021c1 	.word	0x000021c1
    1e38:	000021c1 	.word	0x000021c1
    1e3c:	000015c3 	.word	0x000015c3
		if (!((conn->llcp_feature.ack - conn->llcp_feature.req) & 0x01)) {
    1e40:	1b80      	subs	r0, r0, r6
    1e42:	07c6      	lsls	r6, r0, #31
    1e44:	f57f ab4d 	bpl.w	14e2 <ull_conn_llcp+0x8a>
		if (conn->common.fex_valid) {
    1e48:	f894 10be 	ldrb.w	r1, [r4, #190]	; 0xbe
    1e4c:	f011 0501 	ands.w	r5, r1, #1
    1e50:	f000 83dd 	beq.w	260e <ull_conn_llcp+0x11b6>
			rx = ll_pdu_rx_alloc();
    1e54:	f012 faf4 	bl	14440 <ll_pdu_rx_alloc>
			if (!rx) {
    1e58:	4605      	mov	r5, r0
    1e5a:	b328      	cbz	r0, 1ea8 <ull_conn_llcp+0xa50>
			conn->llcp_feature.ack = conn->llcp_feature.req;
    1e5c:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
    1e60:	f884 30f1 	strb.w	r3, [r4, #241]	; 0xf1
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    1e64:	7f03      	ldrb	r3, [r0, #28]
			rx->hdr.handle = conn->lll.handle;
    1e66:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
    1e68:	80c2      	strh	r2, [r0, #6]
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    1e6a:	f043 0303 	orr.w	r3, r3, #3
			pdu->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    1e6e:	2209      	movs	r2, #9
			rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1e70:	2002      	movs	r0, #2
			(void)memset(&pdu->llctrl.feature_rsp.features[0], 0x00,
    1e72:	4639      	mov	r1, r7
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    1e74:	772b      	strb	r3, [r5, #28]
			rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1e76:	7128      	strb	r0, [r5, #4]
			pdu->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    1e78:	776a      	strb	r2, [r5, #29]
			pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
    1e7a:	77ea      	strb	r2, [r5, #31]
			(void)memset(&pdu->llctrl.feature_rsp.features[0], 0x00,
    1e7c:	f105 0020 	add.w	r0, r5, #32
    1e80:	2208      	movs	r2, #8
    1e82:	f01e f81f 	bl	1fec4 <memset>
			sys_put_le24(conn->llcp_feature.features_peer,
    1e86:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
	dst[0] = val;
    1e8a:	f885 3020 	strb.w	r3, [r5, #32]
	dst[1] = val >> 8;
    1e8e:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[2] = val >> 16;
    1e92:	0c1b      	lsrs	r3, r3, #16
	dst[1] = val >> 8;
    1e94:	f885 2021 	strb.w	r2, [r5, #33]	; 0x21
	dst[2] = val >> 16;
    1e98:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
			ll_rx_put(rx->hdr.link, rx);
    1e9c:	4629      	mov	r1, r5
		ll_rx_put(rx->hdr.link, rx);
    1e9e:	6808      	ldr	r0, [r1, #0]
    1ea0:	f012 fa9a 	bl	143d8 <ll_rx_put>
		ll_rx_sched();
    1ea4:	f012 faa2 	bl	143ec <ll_rx_sched>
			return;
    1ea8:	f894 30bf 	ldrb.w	r3, [r4, #191]	; 0xbf
    1eac:	f894 50c0 	ldrb.w	r5, [r4, #192]	; 0xc0
    1eb0:	f7ff bb12 	b.w	14d8 <ull_conn_llcp+0x80>
		rx = ll_pdu_rx_alloc_peek(1);
    1eb4:	2001      	movs	r0, #1
    1eb6:	f012 fa9f 	bl	143f8 <ll_pdu_rx_alloc_peek>
		if (!rx) {
    1eba:	4607      	mov	r7, r0
    1ebc:	2800      	cmp	r0, #0
    1ebe:	f43f ab10 	beq.w	14e2 <ull_conn_llcp+0x8a>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1ec2:	4860      	ldr	r0, [pc, #384]	; (2044 <ull_conn_llcp+0xbec>)
    1ec4:	f00e f87a 	bl	ffbc <mem_acquire>
		if (!tx) {
    1ec8:	4606      	mov	r6, r0
    1eca:	2800      	cmp	r0, #0
    1ecc:	f43f ab09 	beq.w	14e2 <ull_conn_llcp+0x8a>
		(void)ll_pdu_rx_alloc();
    1ed0:	f012 fab6 	bl	14440 <ll_pdu_rx_alloc>
	conn->llcp.conn_upd.instant = event_counter + conn->lll.latency + 6;
    1ed4:	8e23      	ldrh	r3, [r4, #48]	; 0x30
		rx->hdr.link->mem = conn->llcp_rx;
    1ed6:	683a      	ldr	r2, [r7, #0]
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    1ed8:	f894 00de 	ldrb.w	r0, [r4, #222]	; 0xde
	conn->llcp.conn_upd.instant = event_counter + conn->lll.latency + 6;
    1edc:	442b      	add	r3, r5
    1ede:	3306      	adds	r3, #6
    1ee0:	b299      	uxth	r1, r3
		rx->hdr.link->mem = conn->llcp_rx;
    1ee2:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
    1ee6:	6053      	str	r3, [r2, #4]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1ee8:	7932      	ldrb	r2, [r6, #4]
	conn->llcp.conn_upd.instant = event_counter + conn->lll.latency + 6;
    1eea:	f8a4 10c4 	strh.w	r1, [r4, #196]	; 0xc4
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    1eee:	f36f 0001 	bfc	r0, #0, #2
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    1ef2:	230c      	movs	r3, #12
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    1ef4:	f884 00de 	strb.w	r0, [r4, #222]	; 0xde
		conn->llcp_rx = rx;
    1ef8:	f8c4 70d8 	str.w	r7, [r4, #216]	; 0xd8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1efc:	f042 0203 	orr.w	r2, r2, #3
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    1f00:	7173      	strb	r3, [r6, #5]
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us / 1250U);
    1f02:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
			conn->tx_head &&
    1f06:	f8d4 0188 	ldr.w	r0, [r4, #392]	; 0x188
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us / 1250U);
    1f0a:	4d4f      	ldr	r5, [pc, #316]	; (2048 <ull_conn_llcp+0xbf0>)
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1f0c:	7132      	strb	r2, [r6, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    1f0e:	2200      	movs	r2, #0
    1f10:	71f2      	strb	r2, [r6, #7]
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us / 1250U);
    1f12:	fba5 2303 	umull	r2, r3, r5, r3
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size = conn->llcp_cu.win_size;
    1f16:	f894 50ec 	ldrb.w	r5, [r4, #236]	; 0xec
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
    1f1a:	f8b4 20e0 	ldrh.w	r2, [r4, #224]	; 0xe0
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size = conn->llcp_cu.win_size;
    1f1e:	7235      	strb	r5, [r6, #8]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_offset =
    1f20:	f3c3 238f 	ubfx	r3, r3, #10, #16
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    1f24:	f8b4 50e2 	ldrh.w	r5, [r4, #226]	; 0xe2
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
    1f28:	f8a6 200b 	strh.w	r2, [r6, #11]
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
    1f2c:	f8b4 20e4 	ldrh.w	r2, [r4, #228]	; 0xe4
    1f30:	f8a6 200f 	strh.w	r2, [r6, #15]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    1f34:	f8a6 500d 	strh.w	r5, [r6, #13]
	pdu_ctrl_tx->llctrl.conn_update_ind.instant =
    1f38:	f8a6 1011 	strh.w	r1, [r6, #17]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_offset =
    1f3c:	f8a6 3009 	strh.w	r3, [r6, #9]
	if (
    1f40:	2800      	cmp	r0, #0
    1f42:	f000 8335 	beq.w	25b0 <ull_conn_llcp+0x1158>
			!conn->llcp_enc.pause_tx &&
    1f46:	f894 312a 	ldrb.w	r3, [r4, #298]	; 0x12a
			conn->tx_head &&
    1f4a:	079d      	lsls	r5, r3, #30
    1f4c:	f100 8330 	bmi.w	25b0 <ull_conn_llcp+0x1158>
			!conn->llcp_phy.pause_tx &&
    1f50:	f894 3183 	ldrb.w	r3, [r4, #387]	; 0x183
    1f54:	07d9      	lsls	r1, r3, #31
    1f56:	f100 832b 	bmi.w	25b0 <ull_conn_llcp+0x1158>
		if (conn->tx_head == conn->tx_data) {
    1f5a:	f8d4 3194 	ldr.w	r3, [r4, #404]	; 0x194
    1f5e:	4298      	cmp	r0, r3
			conn->tx_data = conn->tx_data->next;
    1f60:	bf04      	itt	eq
    1f62:	6803      	ldreq	r3, [r0, #0]
    1f64:	f8c4 3194 	streq.w	r3, [r4, #404]	; 0x194
		if (!conn->tx_ctrl) {
    1f68:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
    1f6c:	2b00      	cmp	r3, #0
    1f6e:	f000 8747 	beq.w	2e00 <ull_conn_llcp+0x19a8>
	tx->next = conn->tx_ctrl_last->next;
    1f72:	f8d4 3190 	ldr.w	r3, [r4, #400]	; 0x190
    1f76:	681a      	ldr	r2, [r3, #0]
    1f78:	6032      	str	r2, [r6, #0]
	conn->tx_ctrl_last->next = tx;
    1f7a:	601e      	str	r6, [r3, #0]
	conn->tx_ctrl_last = tx;
    1f7c:	f8c4 6190 	str.w	r6, [r4, #400]	; 0x190
    1f80:	6830      	ldr	r0, [r6, #0]
	if (!tx->next) {
    1f82:	2800      	cmp	r0, #0
    1f84:	f47f aaad 	bne.w	14e2 <ull_conn_llcp+0x8a>
		conn->tx_data_last = tx;
    1f88:	f8c4 6198 	str.w	r6, [r4, #408]	; 0x198
    1f8c:	f7ff baa9 	b.w	14e2 <ull_conn_llcp+0x8a>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1f90:	482c      	ldr	r0, [pc, #176]	; (2044 <ull_conn_llcp+0xbec>)
    1f92:	f00e f813 	bl	ffbc <mem_acquire>
		if (tx) {
    1f96:	4605      	mov	r5, r0
    1f98:	2800      	cmp	r0, #0
    1f9a:	f43f aaa2 	beq.w	14e2 <ull_conn_llcp+0x8a>
			conn->llcp.chan_map.instant = event_counter +
    1f9e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1fa0:	7902      	ldrb	r2, [r0, #4]
			conn->llcp.chan_map.initiate = 0U;
    1fa2:	f894 10c4 	ldrb.w	r1, [r4, #196]	; 0xc4
			conn->llcp.chan_map.instant = event_counter +
    1fa6:	4499      	add	r9, r3
				conn->lll.latency + 6;
    1fa8:	f109 0306 	add.w	r3, r9, #6
			conn->llcp.chan_map.instant = event_counter +
    1fac:	f8a4 30ca 	strh.w	r3, [r4, #202]	; 0xca
			conn->llcp.chan_map.initiate = 0U;
    1fb0:	f36f 0100 	bfc	r1, #0, #1
			pdu_ctrl_tx->llctrl.opcode =
    1fb4:	2301      	movs	r3, #1
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1fb6:	f042 0203 	orr.w	r2, r2, #3
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    1fba:	2008      	movs	r0, #8
			conn->llcp.chan_map.initiate = 0U;
    1fbc:	f884 10c4 	strb.w	r1, [r4, #196]	; 0xc4
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1fc0:	712a      	strb	r2, [r5, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    1fc2:	7168      	strb	r0, [r5, #5]
			pdu_ctrl_tx->llctrl.opcode =
    1fc4:	71eb      	strb	r3, [r5, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
    1fc6:	2205      	movs	r2, #5
    1fc8:	f104 01c5 	add.w	r1, r4, #197	; 0xc5
    1fcc:	1828      	adds	r0, r5, r0
    1fce:	f01d ff4e 	bl	1fe6e <memcpy>
			conn->tx_head &&
    1fd2:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
    1fd6:	f8b4 20ca 	ldrh.w	r2, [r4, #202]	; 0xca
    1fda:	f8a5 200d 	strh.w	r2, [r5, #13]
	if (
    1fde:	2b00      	cmp	r3, #0
    1fe0:	f000 83a2 	beq.w	2728 <ull_conn_llcp+0x12d0>
			!conn->llcp_enc.pause_tx &&
    1fe4:	f894 212a 	ldrb.w	r2, [r4, #298]	; 0x12a
			conn->tx_head &&
    1fe8:	0791      	lsls	r1, r2, #30
    1fea:	f100 839d 	bmi.w	2728 <ull_conn_llcp+0x12d0>
			!conn->llcp_phy.pause_tx &&
    1fee:	f894 2183 	ldrb.w	r2, [r4, #387]	; 0x183
    1ff2:	07d2      	lsls	r2, r2, #31
    1ff4:	f100 8398 	bmi.w	2728 <ull_conn_llcp+0x12d0>
		if (conn->tx_head == conn->tx_data) {
    1ff8:	f8d4 2194 	ldr.w	r2, [r4, #404]	; 0x194
    1ffc:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    1ffe:	bf04      	itt	eq
    2000:	681a      	ldreq	r2, [r3, #0]
    2002:	f8c4 2194 	streq.w	r2, [r4, #404]	; 0x194
		if (!conn->tx_ctrl) {
    2006:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    200a:	2a00      	cmp	r2, #0
    200c:	f000 871e 	beq.w	2e4c <ull_conn_llcp+0x19f4>
	tx->next = conn->tx_ctrl_last->next;
    2010:	f8d4 3190 	ldr.w	r3, [r4, #400]	; 0x190
    2014:	681a      	ldr	r2, [r3, #0]
    2016:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
    2018:	601d      	str	r5, [r3, #0]
	conn->tx_ctrl_last = tx;
    201a:	f8c4 5190 	str.w	r5, [r4, #400]	; 0x190
    201e:	682b      	ldr	r3, [r5, #0]
	if (!tx->next) {
    2020:	2b00      	cmp	r3, #0
    2022:	f47f aa5e 	bne.w	14e2 <ull_conn_llcp+0x8a>
		conn->tx_data_last = tx;
    2026:	f8c4 5198 	str.w	r5, [r4, #408]	; 0x198
    202a:	f7ff ba5a 	b.w	14e2 <ull_conn_llcp+0x8a>
    202e:	bf00      	nop
    2030:	0002442c 	.word	0x0002442c
    2034:	00024054 	.word	0x00024054
    2038:	00023fe4 	.word	0x00023fe4
    203c:	200004b4 	.word	0x200004b4
    2040:	51eb851f 	.word	0x51eb851f
    2044:	2000802c 	.word	0x2000802c
    2048:	d1b71759 	.word	0xd1b71759
			rx = ll_pdu_rx_alloc_peek(2);
    204c:	2002      	movs	r0, #2
    204e:	f012 f9d3 	bl	143f8 <ll_pdu_rx_alloc_peek>
			if (!rx) {
    2052:	4605      	mov	r5, r0
    2054:	2800      	cmp	r0, #0
    2056:	f43f aa44 	beq.w	14e2 <ull_conn_llcp+0x8a>
			tx = mem_acquire(&mem_conn_tx_ctrl.free);
    205a:	48cb      	ldr	r0, [pc, #812]	; (2388 <ull_conn_llcp+0xf30>)
    205c:	f00d ffae 	bl	ffbc <mem_acquire>
			if (!tx) {
    2060:	4607      	mov	r7, r0
    2062:	2800      	cmp	r0, #0
    2064:	f43f aa3d 	beq.w	14e2 <ull_conn_llcp+0x8a>
			conn->llcp.phy_upd_ind.initiate = 0U;
    2068:	f894 30c4 	ldrb.w	r3, [r4, #196]	; 0xc4
    206c:	f36f 0300 	bfc	r3, #0, #1
			if (!((conn->llcp.phy_upd_ind.tx |
    2070:	f3c3 0682 	ubfx	r6, r3, #2, #3
							conn->llcp.phy_upd_ind.rx) & 0x07)) {
    2074:	f3c3 1242 	ubfx	r2, r3, #5, #3
			if (!((conn->llcp.phy_upd_ind.tx |
    2078:	4316      	orrs	r6, r2
			conn->llcp.phy_upd_ind.initiate = 0U;
    207a:	f884 30c4 	strb.w	r3, [r4, #196]	; 0xc4
			if (!((conn->llcp.phy_upd_ind.tx |
    207e:	b2db      	uxtb	r3, r3
    2080:	f040 85a5 	bne.w	2bce <ull_conn_llcp+0x1776>
				conn->llcp_ack = conn->llcp_req;
    2084:	f894 20bf 	ldrb.w	r2, [r4, #191]	; 0xbf
				conn->llcp.phy_upd_ind.instant = 0U;
    2088:	f8a4 60c6 	strh.w	r6, [r4, #198]	; 0xc6
				if (conn->llcp.phy_upd_ind.cmd) {
    208c:	0798      	lsls	r0, r3, #30
				conn->llcp_ack = conn->llcp_req;
    208e:	f884 20c0 	strb.w	r2, [r4, #192]	; 0xc0
				if (conn->llcp.phy_upd_ind.cmd) {
    2092:	f100 8650 	bmi.w	2d36 <ull_conn_llcp+0x18de>
    2096:	4633      	mov	r3, r6
    2098:	4631      	mov	r1, r6
			pdu_ctrl_tx->len =
    209a:	2205      	movs	r2, #5
    209c:	717a      	strb	r2, [r7, #5]
			ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
    209e:	723e      	strb	r6, [r7, #8]
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    20a0:	793a      	ldrb	r2, [r7, #4]
			ind->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
    20a2:	727b      	strb	r3, [r7, #9]
			conn->tx_head &&
    20a4:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
			ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
    20a8:	8179      	strh	r1, [r7, #10]
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    20aa:	f042 0203 	orr.w	r2, r2, #3
			pdu_ctrl_tx->llctrl.opcode =
    20ae:	2118      	movs	r1, #24
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    20b0:	713a      	strb	r2, [r7, #4]
			pdu_ctrl_tx->llctrl.opcode =
    20b2:	71f9      	strb	r1, [r7, #7]
	if (
    20b4:	2b00      	cmp	r3, #0
    20b6:	f000 8317 	beq.w	26e8 <ull_conn_llcp+0x1290>
			!conn->llcp_enc.pause_tx &&
    20ba:	f894 212a 	ldrb.w	r2, [r4, #298]	; 0x12a
			conn->tx_head &&
    20be:	0791      	lsls	r1, r2, #30
    20c0:	f100 8312 	bmi.w	26e8 <ull_conn_llcp+0x1290>
			!conn->llcp_phy.pause_tx &&
    20c4:	f894 2183 	ldrb.w	r2, [r4, #387]	; 0x183
    20c8:	07d2      	lsls	r2, r2, #31
    20ca:	f100 830d 	bmi.w	26e8 <ull_conn_llcp+0x1290>
		if (conn->tx_head == conn->tx_data) {
    20ce:	f8d4 2194 	ldr.w	r2, [r4, #404]	; 0x194
    20d2:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    20d4:	bf04      	itt	eq
    20d6:	681a      	ldreq	r2, [r3, #0]
    20d8:	f8c4 2194 	streq.w	r2, [r4, #404]	; 0x194
		if (!conn->tx_ctrl) {
    20dc:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    20e0:	2a00      	cmp	r2, #0
    20e2:	f000 8695 	beq.w	2e10 <ull_conn_llcp+0x19b8>
	tx->next = conn->tx_ctrl_last->next;
    20e6:	f8d4 3190 	ldr.w	r3, [r4, #400]	; 0x190
    20ea:	681a      	ldr	r2, [r3, #0]
    20ec:	603a      	str	r2, [r7, #0]
	conn->tx_ctrl_last->next = tx;
    20ee:	601f      	str	r7, [r3, #0]
	conn->tx_ctrl_last = tx;
    20f0:	f8c4 7190 	str.w	r7, [r4, #400]	; 0x190
    20f4:	683b      	ldr	r3, [r7, #0]
	if (!tx->next) {
    20f6:	2b00      	cmp	r3, #0
    20f8:	f47f a9f3 	bne.w	14e2 <ull_conn_llcp+0x8a>
		conn->tx_data_last = tx;
    20fc:	f8c4 7198 	str.w	r7, [r4, #408]	; 0x198
    2100:	f7ff b9ef 	b.w	14e2 <ull_conn_llcp+0x8a>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    2104:	48a0      	ldr	r0, [pc, #640]	; (2388 <ull_conn_llcp+0xf30>)
    2106:	f00d ff59 	bl	ffbc <mem_acquire>
	if (!tx) {
    210a:	4607      	mov	r7, r0
    210c:	2800      	cmp	r0, #0
    210e:	f43f a9e8 	beq.w	14e2 <ull_conn_llcp+0x8a>
	if (!lll->role) {
    2112:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
    2116:	2b00      	cmp	r3, #0
	pdu_ctrl_tx = (void *)tx->pdu;
    2118:	f100 0804 	add.w	r8, r0, #4
	if (!lll->role) {
    211c:	f280 83eb 	bge.w	28f6 <ull_conn_llcp+0x149e>
		else if (!lll->enc_rx) {
    2120:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
    2124:	0719      	lsls	r1, r3, #28
    2126:	f100 85c5 	bmi.w	2cb4 <ull_conn_llcp+0x185c>
			if (conn->llcp.encryption.error_code) {
    212a:	f894 60c5 	ldrb.w	r6, [r4, #197]	; 0xc5
    212e:	2e00      	cmp	r6, #0
    2130:	f000 8482 	beq.w	2a38 <ull_conn_llcp+0x15e0>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    2134:	7903      	ldrb	r3, [r0, #4]
	if (conn->common.fex_valid &&
    2136:	f894 20be 	ldrb.w	r2, [r4, #190]	; 0xbe
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    213a:	f043 0303 	orr.w	r3, r3, #3
	if (conn->common.fex_valid &&
    213e:	07d2      	lsls	r2, r2, #31
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    2140:	7103      	strb	r3, [r0, #4]
	if (conn->common.fex_valid &&
    2142:	f140 85e4 	bpl.w	2d0e <ull_conn_llcp+0x18b6>
			(conn->llcp_feature.features_conn &
    2146:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
	if (conn->common.fex_valid &&
    214a:	075b      	lsls	r3, r3, #29
    214c:	f140 85df 	bpl.w	2d0e <ull_conn_llcp+0x18b6>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    2150:	2211      	movs	r2, #17
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    2152:	2303      	movs	r3, #3
		p->error_code = conn->llcp.encryption.error_code;
    2154:	7246      	strb	r6, [r0, #9]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    2156:	71c2      	strb	r2, [r0, #7]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    2158:	7203      	strb	r3, [r0, #8]
	pdu->len += offsetof(struct pdu_data_llctrl, reject_ind);
    215a:	717d      	strb	r5, [r7, #5]
			conn->tx_head &&
    215c:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
	conn->llcp.encryption.error_code = 0U;
    2160:	2200      	movs	r2, #0
    2162:	f884 20c5 	strb.w	r2, [r4, #197]	; 0xc5
	if (
    2166:	2b00      	cmp	r3, #0
    2168:	f000 84b0 	beq.w	2acc <ull_conn_llcp+0x1674>
			!conn->llcp_enc.pause_tx &&
    216c:	f894 212a 	ldrb.w	r2, [r4, #298]	; 0x12a
			conn->tx_head &&
    2170:	0796      	lsls	r6, r2, #30
    2172:	f100 84ab 	bmi.w	2acc <ull_conn_llcp+0x1674>
			!conn->llcp_phy.pause_tx &&
    2176:	f894 2183 	ldrb.w	r2, [r4, #387]	; 0x183
    217a:	07d5      	lsls	r5, r2, #31
    217c:	f100 84a6 	bmi.w	2acc <ull_conn_llcp+0x1674>
		if (conn->tx_head == conn->tx_data) {
    2180:	f8d4 2194 	ldr.w	r2, [r4, #404]	; 0x194
    2184:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    2186:	bf04      	itt	eq
    2188:	681a      	ldreq	r2, [r3, #0]
    218a:	f8c4 2194 	streq.w	r2, [r4, #404]	; 0x194
		if (!conn->tx_ctrl) {
    218e:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    2192:	2a00      	cmp	r2, #0
    2194:	f000 869b 	beq.w	2ece <ull_conn_llcp+0x1a76>
	tx->next = conn->tx_ctrl_last->next;
    2198:	f8d4 3190 	ldr.w	r3, [r4, #400]	; 0x190
    219c:	681a      	ldr	r2, [r3, #0]
    219e:	603a      	str	r2, [r7, #0]
	conn->tx_ctrl_last->next = tx;
    21a0:	601f      	str	r7, [r3, #0]
	conn->tx_ctrl_last = tx;
    21a2:	f8c4 7190 	str.w	r7, [r4, #400]	; 0x190
	if (!tx->next) {
    21a6:	683b      	ldr	r3, [r7, #0]
    21a8:	2b00      	cmp	r3, #0
    21aa:	f000 850c 	beq.w	2bc6 <ull_conn_llcp+0x176e>
		conn->llcp_ack = conn->llcp_req;
    21ae:	f894 30bf 	ldrb.w	r3, [r4, #191]	; 0xbf
    21b2:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
    21b6:	f7ff b994 	b.w	14e2 <ull_conn_llcp+0x8a>
		conn_upd_curr = conn;
    21ba:	6034      	str	r4, [r6, #0]
    21bc:	f7ff bba3 	b.w	1906 <ull_conn_llcp+0x4ae>
					if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
    21c0:	f002 0207 	and.w	r2, r2, #7
					lll->max_rx_octets = conn->llcp_length.rx_octets;
    21c4:	f8b4 c174 	ldrh.w	ip, [r4, #372]	; 0x174
					lll->max_rx_time = conn->llcp_length.rx_time;
    21c8:	f8b4 1178 	ldrh.w	r1, [r4, #376]	; 0x178
					tx_octets = conn->llcp_length.tx_octets;
    21cc:	f8b4 7176 	ldrh.w	r7, [r4, #374]	; 0x176
					uint16_t tx_time = conn->llcp_length.tx_time;
    21d0:	f8b4 617a 	ldrh.w	r6, [r4, #378]	; 0x17a
					lll->max_rx_octets = conn->llcp_length.rx_octets;
    21d4:	f8a4 c042 	strh.w	ip, [r4, #66]	; 0x42
					if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
    21d8:	2a04      	cmp	r2, #4
					lll->max_rx_time = conn->llcp_length.rx_time;
    21da:	f8a4 1046 	strh.w	r1, [r4, #70]	; 0x46
					if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
    21de:	f000 8495 	beq.w	2b0c <ull_conn_llcp+0x16b4>
						conn->llcp_length.state =
    21e2:	f894 3172 	ldrb.w	r3, [r4, #370]	; 0x172
    21e6:	2206      	movs	r2, #6
    21e8:	f362 0302 	bfi	r3, r2, #0, #3
    21ec:	f884 3172 	strb.w	r3, [r4, #370]	; 0x172
					rx = conn->llcp_rx;
    21f0:	f8d4 50d8 	ldr.w	r5, [r4, #216]	; 0xd8
					LL_ASSERT(rx && rx->hdr.link);
    21f4:	2d00      	cmp	r5, #0
    21f6:	f000 8475 	beq.w	2ae4 <ull_conn_llcp+0x168c>
    21fa:	6828      	ldr	r0, [r5, #0]
    21fc:	2800      	cmp	r0, #0
    21fe:	f000 8471 	beq.w	2ae4 <ull_conn_llcp+0x168c>
					pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    2202:	7f2b      	ldrb	r3, [r5, #28]
					conn->llcp_rx = rx->hdr.link->mem;
    2204:	6842      	ldr	r2, [r0, #4]
					rx->hdr.handle = conn->lll.handle;
    2206:	f8b4 e02c 	ldrh.w	lr, [r4, #44]	; 0x2c
					conn->llcp_rx = rx->hdr.link->mem;
    220a:	f8c4 20d8 	str.w	r2, [r4, #216]	; 0xd8
					pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    220e:	f043 0303 	orr.w	r3, r3, #3
					rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    2212:	2202      	movs	r2, #2
					pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    2214:	772b      	strb	r3, [r5, #28]
					pdu_ctrl_rx->len =
    2216:	f04f 0809 	mov.w	r8, #9
					pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    221a:	2315      	movs	r3, #21
					rx->hdr.handle = conn->lll.handle;
    221c:	f8a5 e006 	strh.w	lr, [r5, #6]
					lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
    2220:	f8a5 c020 	strh.w	ip, [r5, #32]
					lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
    2224:	8469      	strh	r1, [r5, #34]	; 0x22
					rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    2226:	712a      	strb	r2, [r5, #4]
					pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    2228:	77eb      	strb	r3, [r5, #31]
					ll_rx_put(rx->hdr.link, rx);
    222a:	4629      	mov	r1, r5
					lr->max_tx_octets = sys_cpu_to_le16(tx_octets);
    222c:	84af      	strh	r7, [r5, #36]	; 0x24
					lr->max_tx_time = sys_cpu_to_le16(tx_time);
    222e:	84ee      	strh	r6, [r5, #38]	; 0x26
					pdu_ctrl_rx->len =
    2230:	f885 801d 	strb.w	r8, [r5, #29]
					ll_rx_put(rx->hdr.link, rx);
    2234:	f012 f8d0 	bl	143d8 <ll_rx_put>
					ll_rx_sched();
    2238:	f012 f8d8 	bl	143ec <ll_rx_sched>
				break;
    223c:	f7ff b9c1 	b.w	15c2 <ull_conn_llcp+0x16a>
					tx = mem_acquire(&mem_conn_tx_ctrl.free);
    2240:	4851      	ldr	r0, [pc, #324]	; (2388 <ull_conn_llcp+0xf30>)
    2242:	f00d febb 	bl	ffbc <mem_acquire>
					if (!tx) {
    2246:	2800      	cmp	r0, #0
    2248:	f43f a9bb 	beq.w	15c2 <ull_conn_llcp+0x16a>
					conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    224c:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
					conn->default_tx_octets = conn->llcp_length.tx_octets;
    2250:	f8b4 1176 	ldrh.w	r1, [r4, #374]	; 0x176
					conn->default_tx_time = conn->llcp_length.tx_time;
    2254:	f8b4 317a 	ldrh.w	r3, [r4, #378]	; 0x17a
					conn->default_tx_octets = conn->llcp_length.tx_octets;
    2258:	f8a4 10ba 	strh.w	r1, [r4, #186]	; 0xba
					conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    225c:	2501      	movs	r5, #1
					conn->default_tx_time = conn->llcp_length.tx_time;
    225e:	f8a4 30bc 	strh.w	r3, [r4, #188]	; 0xbc
					conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    2262:	f365 0202 	bfi	r2, r5, #0, #3
					pdu_ctrl_tx->len =
    2266:	2509      	movs	r5, #9
					conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    2268:	f884 2172 	strb.w	r2, [r4, #370]	; 0x172
					pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    226c:	7902      	ldrb	r2, [r0, #4]
					pdu_ctrl_tx->len =
    226e:	7145      	strb	r5, [r0, #5]
		if (!conn->common.fex_valid ||
    2270:	f894 50be 	ldrb.w	r5, [r4, #190]	; 0xbe
					lr->max_tx_octets = sys_cpu_to_le16(conn->default_tx_octets);
    2274:	8181      	strh	r1, [r0, #12]
					pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2276:	f042 0203 	orr.w	r2, r2, #3
					lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
    227a:	2100      	movs	r1, #0
		feature_coded_phy = (conn->llcp_feature.features_conn &
    227c:	f8d4 70f4 	ldr.w	r7, [r4, #244]	; 0xf4
					pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2280:	7102      	strb	r2, [r0, #4]
					pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
    2282:	2614      	movs	r6, #20
					lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
    2284:	f06f 0204 	mvn.w	r2, #4
    2288:	7241      	strb	r1, [r0, #9]
		if (!conn->common.fex_valid ||
    228a:	07e9      	lsls	r1, r5, #31
					pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
    228c:	71c6      	strb	r6, [r0, #7]
					lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
    228e:	7202      	strb	r2, [r0, #8]
		if (!conn->common.fex_valid ||
    2290:	f140 8326 	bpl.w	28e0 <ull_conn_llcp+0x1488>
    2294:	053a      	lsls	r2, r7, #20
    2296:	f140 8323 	bpl.w	28e0 <ull_conn_llcp+0x1488>
			tx_time = MIN(PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED),
    229a:	f244 2290 	movw	r2, #17040	; 0x4290
    229e:	4293      	cmp	r3, r2
    22a0:	bf28      	it	cs
    22a2:	4613      	movcs	r3, r2
			tx_time = MAX(PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M), tx_time);
    22a4:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
    22a8:	bf38      	it	cc
    22aa:	f44f 73a4 	movcc.w	r3, #328	; 0x148
			conn->tx_head &&
    22ae:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
					lr->max_rx_time = sys_cpu_to_le16(rx_time);
    22b2:	8142      	strh	r2, [r0, #10]
					lr->max_tx_time = sys_cpu_to_le16(tx_time);
    22b4:	81c3      	strh	r3, [r0, #14]
	if (
    22b6:	2900      	cmp	r1, #0
    22b8:	f000 8241 	beq.w	273e <ull_conn_llcp+0x12e6>
			!conn->llcp_enc.pause_tx &&
    22bc:	f894 312a 	ldrb.w	r3, [r4, #298]	; 0x12a
			conn->tx_head &&
    22c0:	079f      	lsls	r7, r3, #30
    22c2:	f100 823c 	bmi.w	273e <ull_conn_llcp+0x12e6>
			!conn->llcp_phy.pause_tx &&
    22c6:	f894 3183 	ldrb.w	r3, [r4, #387]	; 0x183
    22ca:	07de      	lsls	r6, r3, #31
    22cc:	f100 8237 	bmi.w	273e <ull_conn_llcp+0x12e6>
		if (conn->tx_head == conn->tx_data) {
    22d0:	f8d4 3194 	ldr.w	r3, [r4, #404]	; 0x194
    22d4:	4299      	cmp	r1, r3
			conn->tx_data = conn->tx_data->next;
    22d6:	bf04      	itt	eq
    22d8:	680b      	ldreq	r3, [r1, #0]
    22da:	f8c4 3194 	streq.w	r3, [r4, #404]	; 0x194
		if (!conn->tx_ctrl) {
    22de:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
    22e2:	2b00      	cmp	r3, #0
    22e4:	f000 85ba 	beq.w	2e5c <ull_conn_llcp+0x1a04>
	tx->next = conn->tx_ctrl_last->next;
    22e8:	f8d4 3190 	ldr.w	r3, [r4, #400]	; 0x190
    22ec:	681a      	ldr	r2, [r3, #0]
    22ee:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    22f0:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
    22f2:	f8c4 0190 	str.w	r0, [r4, #400]	; 0x190
    22f6:	6801      	ldr	r1, [r0, #0]
	if (!tx->next) {
    22f8:	2900      	cmp	r1, #0
    22fa:	f000 850e 	beq.w	2d1a <ull_conn_llcp+0x18c2>
					conn->procedure_expire = conn->procedure_reload;
    22fe:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
    2302:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
				break;
    2306:	f7ff b95c 	b.w	15c2 <ull_conn_llcp+0x16a>
		if (!conn->tx_ctrl) {
    230a:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    230e:	2a00      	cmp	r2, #0
    2310:	f47f aa0b 	bne.w	172a <ull_conn_llcp+0x2d2>
			tx->next = conn->tx_head;
    2314:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    2316:	e9c4 0062 	strd	r0, r0, [r4, #392]	; 0x188
				conn->tx_ctrl_last = tx;
    231a:	f8c4 0190 	str.w	r0, [r4, #400]	; 0x190
    231e:	f7ff ba0c 	b.w	173a <ull_conn_llcp+0x2e2>
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    2322:	fb06 3311 	mls	r3, r6, r1, r3
    2326:	f240 42e2 	movw	r2, #1250	; 0x4e2
    232a:	4818      	ldr	r0, [pc, #96]	; (238c <ull_conn_llcp+0xf34>)
    232c:	b29b      	uxth	r3, r3
    232e:	fb02 f303 	mul.w	r3, r2, r3
    2332:	fba3 0100 	umull	r0, r1, r3, r0
    2336:	a312      	add	r3, pc, #72	; (adr r3, 2380 <ull_conn_llcp+0xf28>)
    2338:	e9d3 2300 	ldrd	r2, r3, [r3]
    233c:	f7fe fb7e 	bl	a3c <__aeabi_uldivmod>
    2340:	ebaa 0a00 	sub.w	sl, sl, r0
    2344:	f7ff bb56 	b.w	19f4 <ull_conn_llcp+0x59c>
			tx_time = MAX(MIN(PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_1M),
    2348:	f640 0948 	movw	r9, #2120	; 0x848
    234c:	454e      	cmp	r6, r9
    234e:	bf28      	it	cs
    2350:	464e      	movcs	r6, r9
    2352:	f5b6 7fa4 	cmp.w	r6, #328	; 0x148
    2356:	bf38      	it	cc
    2358:	f44f 76a4 	movcc.w	r6, #328	; 0x148
    235c:	e471      	b.n	1c42 <ull_conn_llcp+0x7ea>
		LL_ASSERT(rx && rx->hdr.link);
    235e:	4a0c      	ldr	r2, [pc, #48]	; (2390 <ull_conn_llcp+0xf38>)
    2360:	490c      	ldr	r1, [pc, #48]	; (2394 <ull_conn_llcp+0xf3c>)
    2362:	480d      	ldr	r0, [pc, #52]	; (2398 <ull_conn_llcp+0xf40>)
    2364:	f640 438f 	movw	r3, #3215	; 0xc8f
    2368:	f01b fdef 	bl	1df4a <printk>
    236c:	4040      	eors	r0, r0
    236e:	f380 8811 	msr	BASEPRI, r0
    2372:	f04f 0003 	mov.w	r0, #3
    2376:	df02      	svc	2
    2378:	6830      	ldr	r0, [r6, #0]
    237a:	f7ff bafd 	b.w	1978 <ull_conn_llcp+0x520>
    237e:	bf00      	nop
    2380:	1afd498d 	.word	0x1afd498d
    2384:	00000007 	.word	0x00000007
    2388:	2000802c 	.word	0x2000802c
    238c:	3b9aca00 	.word	0x3b9aca00
    2390:	0002442c 	.word	0x0002442c
    2394:	00024594 	.word	0x00024594
    2398:	00023fe4 	.word	0x00023fe4
			} else if (conn->llcp_conn_param.ack !=
    239c:	f894 6149 	ldrb.w	r6, [r4, #329]	; 0x149
    23a0:	f894 0148 	ldrb.w	r0, [r4, #328]	; 0x148
    23a4:	4286      	cmp	r6, r0
    23a6:	f000 81d5 	beq.w	2754 <ull_conn_llcp+0x12fc>
		conn_upd = conn_upd_curr;
    23aa:	4ed5      	ldr	r6, [pc, #852]	; (2700 <ull_conn_llcp+0x12a8>)
    23ac:	6830      	ldr	r0, [r6, #0]
		if (conn_upd && (conn_upd != conn)) {
    23ae:	2800      	cmp	r0, #0
    23b0:	f000 84e1 	beq.w	2d76 <ull_conn_llcp+0x191e>
    23b4:	4284      	cmp	r4, r0
    23b6:	f47f a894 	bne.w	14e2 <ull_conn_llcp+0x8a>
		switch (conn->llcp_conn_param.state) {
    23ba:	f894 014a 	ldrb.w	r0, [r4, #330]	; 0x14a
    23be:	f000 0007 	and.w	r0, r0, #7
    23c2:	2805      	cmp	r0, #5
    23c4:	f200 8691 	bhi.w	30ea <ull_conn_llcp+0x1c92>
    23c8:	a701      	add	r7, pc, #4	; (adr r7, 23d0 <ull_conn_llcp+0xf78>)
    23ca:	f857 f020 	ldr.w	pc, [r7, r0, lsl #2]
    23ce:	bf00      	nop
    23d0:	000024c7 	.word	0x000024c7
    23d4:	00002439 	.word	0x00002439
    23d8:	000023e9 	.word	0x000023e9
    23dc:	000014d9 	.word	0x000014d9
    23e0:	000014d9 	.word	0x000014d9
    23e4:	000014d9 	.word	0x000014d9
		if (conn->llcp_enc.pause_tx) {
    23e8:	0790      	lsls	r0, r2, #30
    23ea:	f53f a87a 	bmi.w	14e2 <ull_conn_llcp+0x8a>
		rx = ll_pdu_rx_alloc();
    23ee:	f012 f827 	bl	14440 <ll_pdu_rx_alloc>
		if (!rx) {
    23f2:	4601      	mov	r1, r0
    23f4:	2800      	cmp	r0, #0
    23f6:	f43f ad57 	beq.w	1ea8 <ull_conn_llcp+0xa50>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    23fa:	7f03      	ldrb	r3, [r0, #28]
		conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    23fc:	f894 214a 	ldrb.w	r2, [r4, #330]	; 0x14a
    2400:	2003      	movs	r0, #3
    2402:	f360 0202 	bfi	r2, r0, #0, #3
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    2406:	4303      	orrs	r3, r0
		conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    2408:	f884 214a 	strb.w	r2, [r4, #330]	; 0x14a
		rx->hdr.handle = conn->lll.handle;
    240c:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    240e:	770b      	strb	r3, [r1, #28]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    2410:	2502      	movs	r5, #2
		pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    2412:	2318      	movs	r3, #24
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    2414:	710d      	strb	r5, [r1, #4]
		pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    2416:	774b      	strb	r3, [r1, #29]
		p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
    2418:	f8b4 214c 	ldrh.w	r2, [r4, #332]	; 0x14c
		p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
    241c:	f8b4 314e 	ldrh.w	r3, [r4, #334]	; 0x14e
		rx->hdr.handle = conn->lll.handle;
    2420:	80c8      	strh	r0, [r1, #6]
		p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
    2422:	f8b4 0150 	ldrh.w	r0, [r4, #336]	; 0x150
		p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
    2426:	840a      	strh	r2, [r1, #32]
		p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
    2428:	f8b4 2152 	ldrh.w	r2, [r4, #338]	; 0x152
		p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
    242c:	844b      	strh	r3, [r1, #34]	; 0x22
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    242e:	230f      	movs	r3, #15
		p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
    2430:	8488      	strh	r0, [r1, #36]	; 0x24
		p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
    2432:	84ca      	strh	r2, [r1, #38]	; 0x26
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    2434:	77cb      	strb	r3, [r1, #31]
    2436:	e532      	b.n	1e9e <ull_conn_llcp+0xa46>
		need_schedule_update = need_schedule_cnt;
    2438:	48b2      	ldr	r0, [pc, #712]	; (2704 <ull_conn_llcp+0x12ac>)
    243a:	4ab3      	ldr	r2, [pc, #716]	; (2708 <ull_conn_llcp+0x12b0>)
		need_conn_update = false;
    243c:	4bb3      	ldr	r3, [pc, #716]	; (270c <ull_conn_llcp+0x12b4>)
		if (conn->llcp_conn_param.status) {
    243e:	f894 514b 	ldrb.w	r5, [r4, #331]	; 0x14b
		need_schedule_update = need_schedule_cnt;
    2442:	6800      	ldr	r0, [r0, #0]
    2444:	6010      	str	r0, [r2, #0]
		need_conn_update = false;
    2446:	2700      	movs	r7, #0
    2448:	701f      	strb	r7, [r3, #0]
		if (conn->llcp_conn_param.status) {
    244a:	2d00      	cmp	r5, #0
    244c:	f040 8546 	bne.w	2edc <ull_conn_llcp+0x1a84>
		if (!conn->lll.role) {
    2450:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
    2454:	2b00      	cmp	r3, #0
    2456:	f2c0 856f 	blt.w	2f38 <ull_conn_llcp+0x1ae0>
			conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    245a:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
			if (conn->llcp_conn_param.preferred_periodicity) {
    245e:	f894 2154 	ldrb.w	r2, [r4, #340]	; 0x154
			conn->llcp_cu.win_offset_us = 0U;
    2462:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
			conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    2466:	2005      	movs	r0, #5
    2468:	f360 0302 	bfi	r3, r0, #0, #3
			conn->llcp_cu.win_size = 1U;
    246c:	2001      	movs	r0, #1
			conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    246e:	f884 314a 	strb.w	r3, [r4, #330]	; 0x14a
			conn->llcp_cu.win_size = 1U;
    2472:	f884 00ec 	strb.w	r0, [r4, #236]	; 0xec
			if (conn->llcp_conn_param.preferred_periodicity) {
    2476:	2a00      	cmp	r2, #0
    2478:	f000 8625 	beq.w	30c6 <ull_conn_llcp+0x1c6e>
					((conn->llcp_conn_param.interval_min /
    247c:	f8b4 314c 	ldrh.w	r3, [r4, #332]	; 0x14c
    2480:	fbb3 f3f2 	udiv	r3, r3, r2
					  conn->llcp_conn_param.preferred_periodicity) +
    2484:	4403      	add	r3, r0
				conn->llcp_cu.interval =
    2486:	fb13 f302 	smulbb	r3, r3, r2
    248a:	b29b      	uxth	r3, r3
			conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
    248c:	f894 214a 	ldrb.w	r2, [r4, #330]	; 0x14a
			conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
    2490:	f894 00de 	ldrb.w	r0, [r4, #222]	; 0xde
    2494:	f8a4 30e0 	strh.w	r3, [r4, #224]	; 0xe0
			conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
    2498:	f3c2 03c0 	ubfx	r3, r2, #3, #1
			conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
    249c:	009b      	lsls	r3, r3, #2
    249e:	f020 0207 	bic.w	r2, r0, #7
    24a2:	f043 0302 	orr.w	r3, r3, #2
    24a6:	4313      	orrs	r3, r2
			conn->llcp_cu.latency = conn->llcp_conn_param.latency;
    24a8:	f8b4 0150 	ldrh.w	r0, [r4, #336]	; 0x150
			conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
    24ac:	f8b4 2152 	ldrh.w	r2, [r4, #338]	; 0x152
			conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
    24b0:	f884 30de 	strb.w	r3, [r4, #222]	; 0xde
			conn->llcp_cu.ack--;
    24b4:	3901      	subs	r1, #1
    24b6:	f884 10dd 	strb.w	r1, [r4, #221]	; 0xdd
			conn->llcp_cu.latency = conn->llcp_conn_param.latency;
    24ba:	f8a4 00e2 	strh.w	r0, [r4, #226]	; 0xe2
			conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
    24be:	f8a4 20e4 	strh.w	r2, [r4, #228]	; 0xe4
			return;
    24c2:	f7ff b80e 	b.w	14e2 <ull_conn_llcp+0x8a>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    24c6:	4892      	ldr	r0, [pc, #584]	; (2710 <ull_conn_llcp+0x12b8>)
				event_counter = lll->event_counter +
    24c8:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
					lll->latency_prepare + lazy;
    24ca:	8e67      	ldrh	r7, [r4, #50]	; 0x32
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    24cc:	f00d fd76 	bl	ffbc <mem_acquire>
		if (!tx) {
    24d0:	4601      	mov	r1, r0
    24d2:	2800      	cmp	r0, #0
    24d4:	f43f ace8 	beq.w	1ea8 <ull_conn_llcp+0xa50>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
    24d8:	f894 214a 	ldrb.w	r2, [r4, #330]	; 0x14a
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    24dc:	7903      	ldrb	r3, [r0, #4]
		conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
    24de:	2004      	movs	r0, #4
    24e0:	f360 0202 	bfi	r2, r0, #0, #3
    24e4:	f884 214a 	strb.w	r2, [r4, #330]	; 0x14a
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    24e8:	f043 0303 	orr.w	r3, r3, #3
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    24ec:	2218      	movs	r2, #24
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    24ee:	710b      	strb	r3, [r1, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    24f0:	714a      	strb	r2, [r1, #5]
		p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
    24f2:	f8b4 014c 	ldrh.w	r0, [r4, #332]	; 0x14c
				event_counter = lll->event_counter +
    24f6:	19eb      	adds	r3, r5, r7
		p->preferred_periodicity = 0U;
    24f8:	2200      	movs	r2, #0
		p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
    24fa:	f8b4 514e 	ldrh.w	r5, [r4, #334]	; 0x14e
		p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
    24fe:	f8b4 7152 	ldrh.w	r7, [r4, #338]	; 0x152
		p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
    2502:	8108      	strh	r0, [r1, #8]
		p->reference_conn_event_count = sys_cpu_to_le16(event_counter);
    2504:	444b      	add	r3, r9
		p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
    2506:	f8b4 0150 	ldrh.w	r0, [r4, #336]	; 0x150
		p->preferred_periodicity = 0U;
    250a:	740a      	strb	r2, [r1, #16]
		p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
    250c:	814d      	strh	r5, [r1, #10]
		p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
    250e:	8188      	strh	r0, [r1, #12]
		p->offset0 = sys_cpu_to_le16((uint16_t)(conn->llcp_conn_param.offset0));
    2510:	f8b4 5158 	ldrh.w	r5, [r4, #344]	; 0x158
		p->reference_conn_event_count = sys_cpu_to_le16(event_counter);
    2514:	f8a1 3011 	strh.w	r3, [r1, #17]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    2518:	200f      	movs	r0, #15
		p->offset1 = sys_cpu_to_le16(0xffff);
    251a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    251e:	71c8      	strb	r0, [r1, #7]
		p->offset1 = sys_cpu_to_le16(0xffff);
    2520:	754b      	strb	r3, [r1, #21]
    2522:	758b      	strb	r3, [r1, #22]
		p->offset2 = sys_cpu_to_le16(0xffff);
    2524:	75cb      	strb	r3, [r1, #23]
    2526:	760b      	strb	r3, [r1, #24]
		p->offset3 = sys_cpu_to_le16(0xffff);
    2528:	764b      	strb	r3, [r1, #25]
    252a:	768b      	strb	r3, [r1, #26]
		p->offset4 = sys_cpu_to_le16(0xffff);
    252c:	76cb      	strb	r3, [r1, #27]
    252e:	770b      	strb	r3, [r1, #28]
		p->offset5 = sys_cpu_to_le16(0xffff);
    2530:	774b      	strb	r3, [r1, #29]
    2532:	778b      	strb	r3, [r1, #30]
		p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
    2534:	81cf      	strh	r7, [r1, #14]
		p->offset0 = sys_cpu_to_le16((uint16_t)(conn->llcp_conn_param.offset0));
    2536:	f8a1 5013 	strh.w	r5, [r1, #19]
	ctrl_tx_pause_enqueue(conn, tx, false);
    253a:	4620      	mov	r0, r4
    253c:	f012 fb6e 	bl	14c1c <ctrl_tx_pause_enqueue>
		conn->procedure_expire = conn->procedure_reload;
    2540:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
		conn_upd_curr = conn;
    2544:	6034      	str	r4, [r6, #0]
		conn->procedure_expire = conn->procedure_reload;
    2546:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
    254a:	e4ad      	b.n	1ea8 <ull_conn_llcp+0xa50>
		if ((conn->llcp_cu.interval != lll->interval) ||
    254c:	8e22      	ldrh	r2, [r4, #48]	; 0x30
    254e:	428a      	cmp	r2, r1
    2550:	f47f aa1f 	bne.w	1992 <ull_conn_llcp+0x53a>
				(RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
    2554:	f240 42e2 	movw	r2, #1250	; 0x4e2
    2558:	fb02 fb03 	mul.w	fp, r2, r3
    255c:	f242 7210 	movw	r2, #10000	; 0x2710
				(conn->llcp_cu.latency != lll->latency) ||
    2560:	f8b4 e0aa 	ldrh.w	lr, [r4, #170]	; 0xaa
				(RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
    2564:	fb02 b20c 	mla	r2, r2, ip, fp
    2568:	3a01      	subs	r2, #1
    256a:	fbb2 f2fb 	udiv	r2, r2, fp
				(conn->llcp_cu.latency != lll->latency) ||
    256e:	b292      	uxth	r2, r2
    2570:	4596      	cmp	lr, r2
    2572:	f47f aa0e 	bne.w	1992 <ull_conn_llcp+0x53a>
			rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    2576:	2303      	movs	r3, #3
    2578:	7133      	strb	r3, [r6, #4]
    257a:	f7ff ba16 	b.w	19aa <ull_conn_llcp+0x552>
			mayfly_enable(TICKER_USER_ID_ULL_HIGH,
    257e:	2201      	movs	r2, #1
    2580:	4610      	mov	r0, r2
    2582:	2102      	movs	r1, #2
    2584:	f00d fdbe 	bl	10104 <mayfly_enable>
							return -ECANCELED;
    2588:	f06f 0047 	mvn.w	r0, #71	; 0x47
    258c:	f7fe bfb0 	b.w	14f0 <ull_conn_llcp+0x98>
				lll->phy_tx = conn->llcp.phy_upd_ind.tx;
    2590:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
				eff_tx_time = calc_eff_time(lll->max_tx_octets,
    2594:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
				lll->phy_tx = conn->llcp.phy_upd_ind.tx;
    2598:	f3c5 0182 	ubfx	r1, r5, #2, #3
    259c:	f361 0302 	bfi	r3, r1, #0, #3
    25a0:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
				eff_tx_time = calc_eff_time(lll->max_tx_octets,
    25a4:	4632      	mov	r2, r6
    25a6:	f012 facf 	bl	14b48 <calc_eff_time>
    25aa:	4607      	mov	r7, r0
    25ac:	f7ff bb4f 	b.w	1c4e <ull_conn_llcp+0x7f6>
		if (!conn->tx_ctrl) {
    25b0:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
    25b4:	2b00      	cmp	r3, #0
    25b6:	f47f acdc 	bne.w	1f72 <ull_conn_llcp+0xb1a>
			tx->next = conn->tx_head;
    25ba:	6030      	str	r0, [r6, #0]
				conn->tx_ctrl = tx;
    25bc:	e9c4 6662 	strd	r6, r6, [r4, #392]	; 0x188
				conn->tx_ctrl_last = tx;
    25c0:	f8c4 6190 	str.w	r6, [r4, #400]	; 0x190
    25c4:	e4dd      	b.n	1f82 <ull_conn_llcp+0xb2a>
			LL_ASSERT(rx && rx->hdr.link);
    25c6:	4a53      	ldr	r2, [pc, #332]	; (2714 <ull_conn_llcp+0x12bc>)
    25c8:	4953      	ldr	r1, [pc, #332]	; (2718 <ull_conn_llcp+0x12c0>)
    25ca:	4854      	ldr	r0, [pc, #336]	; (271c <ull_conn_llcp+0x12c4>)
    25cc:	f241 230e 	movw	r3, #4622	; 0x120e
    25d0:	f01b fcbb 	bl	1df4a <printk>
    25d4:	4040      	eors	r0, r0
    25d6:	f380 8811 	msr	BASEPRI, r0
    25da:	f04f 0003 	mov.w	r0, #3
    25de:	df02      	svc	2
    25e0:	6828      	ldr	r0, [r5, #0]
    25e2:	f894 b0c4 	ldrb.w	fp, [r4, #196]	; 0xc4
    25e6:	f7ff bb55 	b.w	1c94 <ull_conn_llcp+0x83c>
			LL_ASSERT(0);
    25ea:	4a4a      	ldr	r2, [pc, #296]	; (2714 <ull_conn_llcp+0x12bc>)
    25ec:	494c      	ldr	r1, [pc, #304]	; (2720 <ull_conn_llcp+0x12c8>)
    25ee:	484b      	ldr	r0, [pc, #300]	; (271c <ull_conn_llcp+0x12c4>)
    25f0:	f640 5307 	movw	r3, #3335	; 0xd07
    25f4:	f01b fca9 	bl	1df4a <printk>
    25f8:	4040      	eors	r0, r0
    25fa:	f380 8811 	msr	BASEPRI, r0
    25fe:	f04f 0003 	mov.w	r0, #3
    2602:	df02      	svc	2
		uint32_t ticks_win_offset = 0;
    2604:	2700      	movs	r7, #0
    2606:	f8b4 60e0 	ldrh.w	r6, [r4, #224]	; 0xe0
    260a:	f7ff ba26 	b.w	1a5a <ull_conn_llcp+0x602>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    260e:	4840      	ldr	r0, [pc, #256]	; (2710 <ull_conn_llcp+0x12b8>)
    2610:	f00d fcd4 	bl	ffbc <mem_acquire>
		if (tx) {
    2614:	4606      	mov	r6, r0
    2616:	2800      	cmp	r0, #0
    2618:	f43f ac46 	beq.w	1ea8 <ull_conn_llcp+0xa50>
			conn->llcp_feature.ack--;
    261c:	f894 30f1 	ldrb.w	r3, [r4, #241]	; 0xf1
			conn->llcp_feature.features_conn = LL_FEAT;
    2620:	4a40      	ldr	r2, [pc, #256]	; (2724 <ull_conn_llcp+0x12cc>)
    2622:	f8c4 20f4 	str.w	r2, [r4, #244]	; 0xf4
			conn->llcp_feature.ack--;
    2626:	3b01      	subs	r3, #1
			pdu->len = offsetof(struct pdu_data_llctrl, feature_req) +
    2628:	2209      	movs	r2, #9
			conn->llcp_feature.ack--;
    262a:	f884 30f1 	strb.w	r3, [r4, #241]	; 0xf1
			pdu->len = offsetof(struct pdu_data_llctrl, feature_req) +
    262e:	7142      	strb	r2, [r0, #5]
			pdu->llctrl.opcode = !conn->lll.role ?
    2630:	f994 203d 	ldrsb.w	r2, [r4, #61]	; 0x3d
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    2634:	7903      	ldrb	r3, [r0, #4]
			pdu->llctrl.opcode = !conn->lll.role ?
    2636:	2a00      	cmp	r2, #0
    2638:	bfac      	ite	ge
    263a:	2208      	movge	r2, #8
    263c:	220e      	movlt	r2, #14
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    263e:	f043 0303 	orr.w	r3, r3, #3
			pdu->llctrl.opcode = !conn->lll.role ?
    2642:	71c2      	strb	r2, [r0, #7]
			(void)memset(&pdu->llctrl.feature_req.features[0],
    2644:	2208      	movs	r2, #8
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    2646:	7103      	strb	r3, [r0, #4]
			(void)memset(&pdu->llctrl.feature_req.features[0],
    2648:	4629      	mov	r1, r5
    264a:	4410      	add	r0, r2
    264c:	f01d fc3a 	bl	1fec4 <memset>
			sys_put_le24(conn->llcp_feature.features_conn,
    2650:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
	dst[0] = val;
    2654:	7233      	strb	r3, [r6, #8]
	dst[1] = val >> 8;
    2656:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[2] = val >> 16;
    265a:	0c1b      	lsrs	r3, r3, #16
	dst[1] = val >> 8;
    265c:	7272      	strb	r2, [r6, #9]
	dst[2] = val >> 16;
    265e:	72b3      	strb	r3, [r6, #10]
			conn->tx_head &&
    2660:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
	if (
    2664:	2b00      	cmp	r3, #0
    2666:	f000 81b2 	beq.w	29ce <ull_conn_llcp+0x1576>
			!conn->llcp_enc.pause_tx &&
    266a:	f894 212a 	ldrb.w	r2, [r4, #298]	; 0x12a
			conn->tx_head &&
    266e:	0795      	lsls	r5, r2, #30
    2670:	f100 81ad 	bmi.w	29ce <ull_conn_llcp+0x1576>
			!conn->llcp_phy.pause_tx &&
    2674:	f894 2183 	ldrb.w	r2, [r4, #387]	; 0x183
    2678:	07d0      	lsls	r0, r2, #31
    267a:	f100 81a8 	bmi.w	29ce <ull_conn_llcp+0x1576>
		if (conn->tx_head == conn->tx_data) {
    267e:	f8d4 2194 	ldr.w	r2, [r4, #404]	; 0x194
    2682:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    2684:	bf04      	itt	eq
    2686:	681a      	ldreq	r2, [r3, #0]
    2688:	f8c4 2194 	streq.w	r2, [r4, #404]	; 0x194
		if (!conn->tx_ctrl) {
    268c:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    2690:	2a00      	cmp	r2, #0
    2692:	f000 8414 	beq.w	2ebe <ull_conn_llcp+0x1a66>
	tx->next = conn->tx_ctrl_last->next;
    2696:	f8d4 3190 	ldr.w	r3, [r4, #400]	; 0x190
    269a:	681a      	ldr	r2, [r3, #0]
    269c:	6032      	str	r2, [r6, #0]
	conn->tx_ctrl_last->next = tx;
    269e:	601e      	str	r6, [r3, #0]
	conn->tx_ctrl_last = tx;
    26a0:	f8c4 6190 	str.w	r6, [r4, #400]	; 0x190
    26a4:	6833      	ldr	r3, [r6, #0]
	if (!tx->next) {
    26a6:	2b00      	cmp	r3, #0
    26a8:	f000 8380 	beq.w	2dac <ull_conn_llcp+0x1954>
					conn->procedure_expire = conn->procedure_reload;
    26ac:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
    26b0:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
				break;
    26b4:	f894 50c0 	ldrb.w	r5, [r4, #192]	; 0xc0
    26b8:	f894 30bf 	ldrb.w	r3, [r4, #191]	; 0xbf
    26bc:	f7fe bf0c 	b.w	14d8 <ull_conn_llcp+0x80>
			LL_ASSERT(rx && rx->hdr.link);
    26c0:	4a14      	ldr	r2, [pc, #80]	; (2714 <ull_conn_llcp+0x12bc>)
    26c2:	4915      	ldr	r1, [pc, #84]	; (2718 <ull_conn_llcp+0x12c0>)
    26c4:	4815      	ldr	r0, [pc, #84]	; (271c <ull_conn_llcp+0x12c4>)
    26c6:	f241 233a 	movw	r3, #4666	; 0x123a
    26ca:	f01b fc3e 	bl	1df4a <printk>
    26ce:	4040      	eors	r0, r0
    26d0:	f380 8811 	msr	BASEPRI, r0
    26d4:	f04f 0003 	mov.w	r0, #3
    26d8:	df02      	svc	2
    26da:	6828      	ldr	r0, [r5, #0]
    26dc:	f7ff bb04 	b.w	1ce8 <ull_conn_llcp+0x890>
		conn->tx_data_last = tx;
    26e0:	f8c4 0198 	str.w	r0, [r4, #408]	; 0x198
    26e4:	f7ff b82c 	b.w	1740 <ull_conn_llcp+0x2e8>
		if (!conn->tx_ctrl) {
    26e8:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    26ec:	2a00      	cmp	r2, #0
    26ee:	f47f acfa 	bne.w	20e6 <ull_conn_llcp+0xc8e>
			tx->next = conn->tx_head;
    26f2:	603b      	str	r3, [r7, #0]
				conn->tx_ctrl = tx;
    26f4:	e9c4 7762 	strd	r7, r7, [r4, #392]	; 0x188
				conn->tx_ctrl_last = tx;
    26f8:	f8c4 7190 	str.w	r7, [r4, #400]	; 0x190
    26fc:	e4fb      	b.n	20f6 <ull_conn_llcp+0xc9e>
    26fe:	bf00      	nop
    2700:	200075a4 	.word	0x200075a4
    2704:	20000608 	.word	0x20000608
    2708:	2000060c 	.word	0x2000060c
    270c:	2000a862 	.word	0x2000a862
    2710:	2000802c 	.word	0x2000802c
    2714:	0002442c 	.word	0x0002442c
    2718:	00024594 	.word	0x00024594
    271c:	00023fe4 	.word	0x00023fe4
    2720:	00024054 	.word	0x00024054
    2724:	000148ff 	.word	0x000148ff
		if (!conn->tx_ctrl) {
    2728:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    272c:	2a00      	cmp	r2, #0
    272e:	f47f ac6f 	bne.w	2010 <ull_conn_llcp+0xbb8>
			tx->next = conn->tx_head;
    2732:	602b      	str	r3, [r5, #0]
				conn->tx_ctrl = tx;
    2734:	e9c4 5562 	strd	r5, r5, [r4, #392]	; 0x188
				conn->tx_ctrl_last = tx;
    2738:	f8c4 5190 	str.w	r5, [r4, #400]	; 0x190
    273c:	e470      	b.n	2020 <ull_conn_llcp+0xbc8>
		if (!conn->tx_ctrl) {
    273e:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
    2742:	2b00      	cmp	r3, #0
    2744:	f47f add0 	bne.w	22e8 <ull_conn_llcp+0xe90>
			tx->next = conn->tx_head;
    2748:	6001      	str	r1, [r0, #0]
				conn->tx_ctrl = tx;
    274a:	e9c4 0062 	strd	r0, r0, [r4, #392]	; 0x188
				conn->tx_ctrl_last = tx;
    274e:	f8c4 0190 	str.w	r0, [r4, #400]	; 0x190
    2752:	e5d1      	b.n	22f8 <ull_conn_llcp+0xea0>
			} else if (conn->llcp_length.ack != conn->llcp_length.req) {
    2754:	f894 0170 	ldrb.w	r0, [r4, #368]	; 0x170
    2758:	f894 2171 	ldrb.w	r2, [r4, #369]	; 0x171
    275c:	4282      	cmp	r2, r0
    275e:	f000 81e9 	beq.w	2b34 <ull_conn_llcp+0x16dc>
		switch (conn->llcp_length.state) {
    2762:	f894 1172 	ldrb.w	r1, [r4, #370]	; 0x172
    2766:	f001 0207 	and.w	r2, r1, #7
    276a:	2a06      	cmp	r2, #6
    276c:	f200 84c0 	bhi.w	30f0 <ull_conn_llcp+0x1c98>
    2770:	a601      	add	r6, pc, #4	; (adr r6, 2778 <ull_conn_llcp+0x1320>)
    2772:	f856 f022 	ldr.w	pc, [r6, r2, lsl #2]
    2776:	bf00      	nop
    2778:	0000281d 	.word	0x0000281d
    277c:	000014d9 	.word	0x000014d9
    2780:	000014d9 	.word	0x000014d9
    2784:	000014d9 	.word	0x000014d9
    2788:	00002795 	.word	0x00002795
    278c:	00002795 	.word	0x00002795
    2790:	000014d9 	.word	0x000014d9
					lll->max_rx_octets = conn->llcp_length.rx_octets;
    2794:	f8b4 3174 	ldrh.w	r3, [r4, #372]	; 0x174
    2798:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
					if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
    279c:	f001 0307 	and.w	r3, r1, #7
					lll->max_rx_time = conn->llcp_length.rx_time;
    27a0:	f8b4 2178 	ldrh.w	r2, [r4, #376]	; 0x178
					tx_octets = conn->llcp_length.tx_octets;
    27a4:	f8b4 7176 	ldrh.w	r7, [r4, #374]	; 0x176
					uint16_t tx_time = conn->llcp_length.tx_time;
    27a8:	f8b4 617a 	ldrh.w	r6, [r4, #378]	; 0x17a
					lll->max_rx_time = conn->llcp_length.rx_time;
    27ac:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
					if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
    27b0:	2b04      	cmp	r3, #4
    27b2:	f000 837a 	beq.w	2eaa <ull_conn_llcp+0x1a52>
						conn->llcp_length.state =
    27b6:	460b      	mov	r3, r1
    27b8:	2206      	movs	r2, #6
    27ba:	f362 0302 	bfi	r3, r2, #0, #3
    27be:	f884 3172 	strb.w	r3, [r4, #370]	; 0x172
					rx = conn->llcp_rx;
    27c2:	f8d4 50d8 	ldr.w	r5, [r4, #216]	; 0xd8
					LL_ASSERT(rx && rx->hdr.link);
    27c6:	2d00      	cmp	r5, #0
    27c8:	f000 8360 	beq.w	2e8c <ull_conn_llcp+0x1a34>
    27cc:	6828      	ldr	r0, [r5, #0]
    27ce:	2800      	cmp	r0, #0
    27d0:	f000 835c 	beq.w	2e8c <ull_conn_llcp+0x1a34>
					pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    27d4:	7f2b      	ldrb	r3, [r5, #28]
					conn->llcp_rx = rx->hdr.link->mem;
    27d6:	6842      	ldr	r2, [r0, #4]
					rx->hdr.handle = conn->lll.handle;
    27d8:	f8b4 c02c 	ldrh.w	ip, [r4, #44]	; 0x2c
					conn->llcp_rx = rx->hdr.link->mem;
    27dc:	f8c4 20d8 	str.w	r2, [r4, #216]	; 0xd8
					pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    27e0:	f043 0303 	orr.w	r3, r3, #3
    27e4:	772b      	strb	r3, [r5, #28]
					rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    27e6:	2202      	movs	r2, #2
					pdu_ctrl_rx->len =
    27e8:	2309      	movs	r3, #9
    27ea:	776b      	strb	r3, [r5, #29]
					rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    27ec:	712a      	strb	r2, [r5, #4]
					lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
    27ee:	f8b4 1042 	ldrh.w	r1, [r4, #66]	; 0x42
					lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
    27f2:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
    27f6:	846a      	strh	r2, [r5, #34]	; 0x22
					pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    27f8:	2315      	movs	r3, #21
    27fa:	77eb      	strb	r3, [r5, #31]
					rx->hdr.handle = conn->lll.handle;
    27fc:	f8a5 c006 	strh.w	ip, [r5, #6]
					lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
    2800:	8429      	strh	r1, [r5, #32]
					lr->max_tx_octets = sys_cpu_to_le16(tx_octets);
    2802:	84af      	strh	r7, [r5, #36]	; 0x24
					ll_rx_put(rx->hdr.link, rx);
    2804:	4629      	mov	r1, r5
					lr->max_tx_time = sys_cpu_to_le16(tx_time);
    2806:	84ee      	strh	r6, [r5, #38]	; 0x26
					ll_rx_put(rx->hdr.link, rx);
    2808:	f011 fde6 	bl	143d8 <ll_rx_put>
					ll_rx_sched();
    280c:	f011 fdee 	bl	143ec <ll_rx_sched>
				break;
    2810:	f894 30bf 	ldrb.w	r3, [r4, #191]	; 0xbf
    2814:	f894 50c0 	ldrb.w	r5, [r4, #192]	; 0xc0
    2818:	f7fe be5e 	b.w	14d8 <ull_conn_llcp+0x80>
					tx = mem_acquire(&mem_conn_tx_ctrl.free);
    281c:	48c1      	ldr	r0, [pc, #772]	; (2b24 <ull_conn_llcp+0x16cc>)
    281e:	f00d fbcd 	bl	ffbc <mem_acquire>
					if (!tx) {
    2822:	2800      	cmp	r0, #0
    2824:	f43f ab40 	beq.w	1ea8 <ull_conn_llcp+0xa50>
					conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    2828:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
					conn->default_tx_octets = conn->llcp_length.tx_octets;
    282c:	f8b4 1176 	ldrh.w	r1, [r4, #374]	; 0x176
					conn->default_tx_time = conn->llcp_length.tx_time;
    2830:	f8b4 317a 	ldrh.w	r3, [r4, #378]	; 0x17a
					conn->default_tx_octets = conn->llcp_length.tx_octets;
    2834:	f8a4 10ba 	strh.w	r1, [r4, #186]	; 0xba
					conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    2838:	2501      	movs	r5, #1
					conn->default_tx_time = conn->llcp_length.tx_time;
    283a:	f8a4 30bc 	strh.w	r3, [r4, #188]	; 0xbc
					conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    283e:	f365 0202 	bfi	r2, r5, #0, #3
    2842:	f884 2172 	strb.w	r2, [r4, #370]	; 0x172
					pdu_ctrl_tx->len =
    2846:	2509      	movs	r5, #9
					pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2848:	7902      	ldrb	r2, [r0, #4]
					pdu_ctrl_tx->len =
    284a:	7145      	strb	r5, [r0, #5]
		if (!conn->common.fex_valid ||
    284c:	f894 50be 	ldrb.w	r5, [r4, #190]	; 0xbe
					lr->max_tx_octets = sys_cpu_to_le16(conn->default_tx_octets);
    2850:	8181      	strh	r1, [r0, #12]
					pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2852:	f042 0203 	orr.w	r2, r2, #3
					pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
    2856:	2114      	movs	r1, #20
					pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2858:	7102      	strb	r2, [r0, #4]
		feature_coded_phy = (conn->llcp_feature.features_conn &
    285a:	f8d4 20f4 	ldr.w	r2, [r4, #244]	; 0xf4
					pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
    285e:	71c1      	strb	r1, [r0, #7]
					lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
    2860:	f06f 0104 	mvn.w	r1, #4
    2864:	2600      	movs	r6, #0
    2866:	7201      	strb	r1, [r0, #8]
		if (!conn->common.fex_valid ||
    2868:	07e9      	lsls	r1, r5, #31
					lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
    286a:	7246      	strb	r6, [r0, #9]
		if (!conn->common.fex_valid ||
    286c:	f140 82e3 	bpl.w	2e36 <ull_conn_llcp+0x19de>
    2870:	0517      	lsls	r7, r2, #20
    2872:	f140 82e0 	bpl.w	2e36 <ull_conn_llcp+0x19de>
			tx_time = MIN(PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED),
    2876:	f244 2290 	movw	r2, #17040	; 0x4290
    287a:	4293      	cmp	r3, r2
    287c:	bf28      	it	cs
    287e:	4613      	movcs	r3, r2
			tx_time = MAX(PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M), tx_time);
    2880:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
    2884:	bf38      	it	cc
    2886:	f44f 73a4 	movcc.w	r3, #328	; 0x148
			conn->tx_head &&
    288a:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
					lr->max_rx_time = sys_cpu_to_le16(rx_time);
    288e:	8142      	strh	r2, [r0, #10]
					lr->max_tx_time = sys_cpu_to_le16(tx_time);
    2890:	81c3      	strh	r3, [r0, #14]
	if (
    2892:	2900      	cmp	r1, #0
    2894:	f000 82c4 	beq.w	2e20 <ull_conn_llcp+0x19c8>
			!conn->llcp_enc.pause_tx &&
    2898:	f894 312a 	ldrb.w	r3, [r4, #298]	; 0x12a
			conn->tx_head &&
    289c:	079e      	lsls	r6, r3, #30
    289e:	f100 82bf 	bmi.w	2e20 <ull_conn_llcp+0x19c8>
			!conn->llcp_phy.pause_tx &&
    28a2:	f894 3183 	ldrb.w	r3, [r4, #387]	; 0x183
    28a6:	07dd      	lsls	r5, r3, #31
    28a8:	f100 82ba 	bmi.w	2e20 <ull_conn_llcp+0x19c8>
		if (conn->tx_head == conn->tx_data) {
    28ac:	f8d4 3194 	ldr.w	r3, [r4, #404]	; 0x194
    28b0:	4299      	cmp	r1, r3
			conn->tx_data = conn->tx_data->next;
    28b2:	bf04      	itt	eq
    28b4:	680b      	ldreq	r3, [r1, #0]
    28b6:	f8c4 3194 	streq.w	r3, [r4, #404]	; 0x194
		if (!conn->tx_ctrl) {
    28ba:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
    28be:	2b00      	cmp	r3, #0
    28c0:	f000 8405 	beq.w	30ce <ull_conn_llcp+0x1c76>
	tx->next = conn->tx_ctrl_last->next;
    28c4:	f8d4 3190 	ldr.w	r3, [r4, #400]	; 0x190
    28c8:	681a      	ldr	r2, [r3, #0]
    28ca:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    28cc:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
    28ce:	f8c4 0190 	str.w	r0, [r4, #400]	; 0x190
	if (!tx->next) {
    28d2:	6803      	ldr	r3, [r0, #0]
    28d4:	2b00      	cmp	r3, #0
    28d6:	f47f aee9 	bne.w	26ac <ull_conn_llcp+0x1254>
		conn->tx_data_last = tx;
    28da:	f8c4 0198 	str.w	r0, [r4, #408]	; 0x198
    28de:	e6e5      	b.n	26ac <ull_conn_llcp+0x1254>
			tx_time = MAX(MIN(PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_1M),
    28e0:	f640 0248 	movw	r2, #2120	; 0x848
    28e4:	4293      	cmp	r3, r2
    28e6:	bf28      	it	cs
    28e8:	4613      	movcs	r3, r2
    28ea:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
    28ee:	bf38      	it	cc
    28f0:	f44f 73a4 	movcc.w	r3, #328	; 0x148
    28f4:	e4db      	b.n	22ae <ull_conn_llcp+0xe56>
		ecb_encrypt(&conn->llcp_enc.ltk[0],
    28f6:	f104 0563 	add.w	r5, r4, #99	; 0x63
    28fa:	462b      	mov	r3, r5
    28fc:	4632      	mov	r2, r6
    28fe:	f104 01c6 	add.w	r1, r4, #198	; 0xc6
    2902:	f204 1035 	addw	r0, r4, #309	; 0x135
    2906:	f018 f8df 	bl	1aac8 <ecb_encrypt>
		memcpy(&lll->ccm_tx.key[0], &lll->ccm_rx.key[0],
    290a:	4629      	mov	r1, r5
    290c:	2210      	movs	r2, #16
    290e:	f104 0084 	add.w	r0, r4, #132	; 0x84
    2912:	f01d faac 	bl	1fe6e <memcpy>
		memcpy(&lll->ccm_tx.iv[0], &lll->ccm_rx.iv[0],
    2916:	2208      	movs	r2, #8
    2918:	f104 017c 	add.w	r1, r4, #124	; 0x7c
    291c:	f104 009d 	add.w	r0, r4, #157	; 0x9d
    2920:	f01d faa5 	bl	1fe6e <memcpy>
		lll->ccm_rx.direction = 0;
    2924:	f894 007b 	ldrb.w	r0, [r4, #123]	; 0x7b
		lll->ccm_tx.direction = 1;
    2928:	f894 209c 	ldrb.w	r2, [r4, #156]	; 0x9c
		lll->enc_rx = 1;
    292c:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
		lll->ccm_rx.counter = 0;
    2930:	f884 6073 	strb.w	r6, [r4, #115]	; 0x73
		lll->enc_rx = 1;
    2934:	f043 0308 	orr.w	r3, r3, #8
		lll->ccm_rx.direction = 0;
    2938:	f366 0000 	bfi	r0, r6, #0, #1
		lll->ccm_tx.direction = 1;
    293c:	f042 0201 	orr.w	r2, r2, #1
		lll->ccm_rx.direction = 0;
    2940:	f884 007b 	strb.w	r0, [r4, #123]	; 0x7b
		lll->enc_rx = 1;
    2944:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
		lll->ccm_rx.counter = 0;
    2948:	f884 6074 	strb.w	r6, [r4, #116]	; 0x74
    294c:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
    2950:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
    2954:	f884 6077 	strb.w	r6, [r4, #119]	; 0x77
    2958:	f884 6078 	strb.w	r6, [r4, #120]	; 0x78
    295c:	f884 6079 	strb.w	r6, [r4, #121]	; 0x79
    2960:	f884 607a 	strb.w	r6, [r4, #122]	; 0x7a
		lll->ccm_tx.counter = 0;
    2964:	f8c4 6094 	str.w	r6, [r4, #148]	; 0x94
		start_enc_rsp_send(conn, pdu_ctrl_tx);
    2968:	4641      	mov	r1, r8
		lll->ccm_tx.counter = 0;
    296a:	f8c4 6098 	str.w	r6, [r4, #152]	; 0x98
		lll->ccm_tx.direction = 1;
    296e:	f884 209c 	strb.w	r2, [r4, #156]	; 0x9c
		start_enc_rsp_send(conn, pdu_ctrl_tx);
    2972:	4620      	mov	r0, r4
    2974:	f012 fb22 	bl	14fbc <start_enc_rsp_send>
			conn->tx_head &&
    2978:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
	if (
    297c:	b393      	cbz	r3, 29e4 <ull_conn_llcp+0x158c>
			!conn->llcp_enc.pause_tx &&
    297e:	f894 212a 	ldrb.w	r2, [r4, #298]	; 0x12a
			conn->tx_head &&
    2982:	0795      	lsls	r5, r2, #30
    2984:	d42e      	bmi.n	29e4 <ull_conn_llcp+0x158c>
			!conn->llcp_phy.pause_tx &&
    2986:	f894 2183 	ldrb.w	r2, [r4, #387]	; 0x183
    298a:	07d0      	lsls	r0, r2, #31
    298c:	d42a      	bmi.n	29e4 <ull_conn_llcp+0x158c>
		if (conn->tx_head == conn->tx_data) {
    298e:	f8d4 2194 	ldr.w	r2, [r4, #404]	; 0x194
    2992:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    2994:	bf04      	itt	eq
    2996:	681a      	ldreq	r2, [r3, #0]
    2998:	f8c4 2194 	streq.w	r2, [r4, #404]	; 0x194
		if (!conn->tx_ctrl) {
    299c:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    29a0:	2a00      	cmp	r2, #0
    29a2:	f47f abf9 	bne.w	2198 <ull_conn_llcp+0xd40>
			tx->next = conn->tx_head->next;
    29a6:	681a      	ldr	r2, [r3, #0]
    29a8:	603a      	str	r2, [r7, #0]
			conn->tx_head->next = tx;
    29aa:	601f      	str	r7, [r3, #0]
				conn->tx_ctrl = tx;
    29ac:	683b      	ldr	r3, [r7, #0]
				conn->tx_ctrl_last = tx;
    29ae:	e9c4 7763 	strd	r7, r7, [r4, #396]	; 0x18c
    29b2:	f7ff bbf9 	b.w	21a8 <ull_conn_llcp+0xd50>
		if (!conn->tx_ctrl) {
    29b6:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    29ba:	2a00      	cmp	r2, #0
    29bc:	f47e af35 	bne.w	182a <ull_conn_llcp+0x3d2>
			tx->next = conn->tx_head;
    29c0:	602b      	str	r3, [r5, #0]
				conn->tx_ctrl = tx;
    29c2:	e9c4 5562 	strd	r5, r5, [r4, #392]	; 0x188
				conn->tx_ctrl_last = tx;
    29c6:	f8c4 5190 	str.w	r5, [r4, #400]	; 0x190
    29ca:	f7fe bf36 	b.w	183a <ull_conn_llcp+0x3e2>
		if (!conn->tx_ctrl) {
    29ce:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    29d2:	2a00      	cmp	r2, #0
    29d4:	f47f ae5f 	bne.w	2696 <ull_conn_llcp+0x123e>
			tx->next = conn->tx_head;
    29d8:	6033      	str	r3, [r6, #0]
				conn->tx_ctrl = tx;
    29da:	e9c4 6662 	strd	r6, r6, [r4, #392]	; 0x188
				conn->tx_ctrl_last = tx;
    29de:	f8c4 6190 	str.w	r6, [r4, #400]	; 0x190
    29e2:	e660      	b.n	26a6 <ull_conn_llcp+0x124e>
		if (!conn->tx_ctrl) {
    29e4:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    29e8:	2a00      	cmp	r2, #0
    29ea:	f47f abd5 	bne.w	2198 <ull_conn_llcp+0xd40>
			tx->next = conn->tx_head;
    29ee:	603b      	str	r3, [r7, #0]
				conn->tx_ctrl = tx;
    29f0:	e9c4 7762 	strd	r7, r7, [r4, #392]	; 0x188
				conn->tx_ctrl_last = tx;
    29f4:	f8c4 7190 	str.w	r7, [r4, #400]	; 0x190
    29f8:	f7ff bbd6 	b.w	21a8 <ull_conn_llcp+0xd50>
			if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
    29fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    29fe:	429a      	cmp	r2, r3
    2a00:	f47f a95d 	bne.w	1cbe <ull_conn_llcp+0x866>
				rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    2a04:	2303      	movs	r3, #3
    2a06:	712b      	strb	r3, [r5, #4]
				ll_rx_put(rx->hdr.link, rx);
    2a08:	4629      	mov	r1, r5
    2a0a:	f011 fce5 	bl	143d8 <ll_rx_put>
					rx = conn->llcp_rx;
    2a0e:	f8d4 50d8 	ldr.w	r5, [r4, #216]	; 0xd8
					LL_ASSERT(rx && rx->hdr.link);
    2a12:	2d00      	cmp	r5, #0
    2a14:	f000 8281 	beq.w	2f1a <ull_conn_llcp+0x1ac2>
    2a18:	6828      	ldr	r0, [r5, #0]
    2a1a:	2800      	cmp	r0, #0
    2a1c:	f000 827d 	beq.w	2f1a <ull_conn_llcp+0x1ac2>
					conn->llcp_rx = rx->hdr.link->mem;
    2a20:	6843      	ldr	r3, [r0, #4]
    2a22:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
				rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    2a26:	2303      	movs	r3, #3
    2a28:	712b      	strb	r3, [r5, #4]
				ll_rx_put(rx->hdr.link, rx);
    2a2a:	4629      	mov	r1, r5
    2a2c:	f011 fcd4 	bl	143d8 <ll_rx_put>
				ll_rx_sched();
    2a30:	f011 fcdc 	bl	143ec <ll_rx_sched>
				return;
    2a34:	f7fe bd55 	b.w	14e2 <ull_conn_llcp+0x8a>
				ecb_encrypt(&conn->llcp_enc.ltk[0],
    2a38:	f104 0563 	add.w	r5, r4, #99	; 0x63
    2a3c:	462b      	mov	r3, r5
    2a3e:	4632      	mov	r2, r6
    2a40:	f104 01c6 	add.w	r1, r4, #198	; 0xc6
    2a44:	f204 1035 	addw	r0, r4, #309	; 0x135
    2a48:	f018 f83e 	bl	1aac8 <ecb_encrypt>
				memcpy(&lll->ccm_tx.key[0],
    2a4c:	4629      	mov	r1, r5
    2a4e:	2210      	movs	r2, #16
    2a50:	f104 0084 	add.w	r0, r4, #132	; 0x84
    2a54:	f01d fa0b 	bl	1fe6e <memcpy>
				memcpy(&lll->ccm_tx.iv[0], &lll->ccm_rx.iv[0],
    2a58:	2208      	movs	r2, #8
    2a5a:	f104 017c 	add.w	r1, r4, #124	; 0x7c
    2a5e:	f104 009d 	add.w	r0, r4, #157	; 0x9d
    2a62:	f01d fa04 	bl	1fe6e <memcpy>
				lll->ccm_rx.direction = 1U;
    2a66:	f894 207b 	ldrb.w	r2, [r4, #123]	; 0x7b
				lll->ccm_tx.direction = 0U;
    2a6a:	f894 109c 	ldrb.w	r1, [r4, #156]	; 0x9c
				lll->enc_rx = 1U;
    2a6e:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
				lll->ccm_rx.counter = 0U;
    2a72:	f884 6073 	strb.w	r6, [r4, #115]	; 0x73
				lll->ccm_rx.direction = 1U;
    2a76:	f042 0201 	orr.w	r2, r2, #1
				lll->ccm_tx.direction = 0U;
    2a7a:	f366 0100 	bfi	r1, r6, #0, #1
				lll->enc_rx = 1U;
    2a7e:	f043 0308 	orr.w	r3, r3, #8
				pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    2a82:	2001      	movs	r0, #1
				lll->ccm_rx.direction = 1U;
    2a84:	f884 207b 	strb.w	r2, [r4, #123]	; 0x7b
				lll->ccm_tx.direction = 0U;
    2a88:	f884 109c 	strb.w	r1, [r4, #156]	; 0x9c
				lll->enc_rx = 1U;
    2a8c:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
				lll->ccm_rx.counter = 0U;
    2a90:	f884 6074 	strb.w	r6, [r4, #116]	; 0x74
    2a94:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
    2a98:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
    2a9c:	f884 6077 	strb.w	r6, [r4, #119]	; 0x77
    2aa0:	f884 6078 	strb.w	r6, [r4, #120]	; 0x78
    2aa4:	f884 6079 	strb.w	r6, [r4, #121]	; 0x79
    2aa8:	f884 607a 	strb.w	r6, [r4, #122]	; 0x7a
				lll->ccm_tx.counter = 0U;
    2aac:	f8c4 6094 	str.w	r6, [r4, #148]	; 0x94
    2ab0:	f8c4 6098 	str.w	r6, [r4, #152]	; 0x98
				pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2ab4:	793a      	ldrb	r2, [r7, #4]
				pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    2ab6:	7178      	strb	r0, [r7, #5]
			conn->tx_head &&
    2ab8:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
				pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2abc:	f042 0203 	orr.w	r2, r2, #3
				pdu_ctrl_tx->llctrl.opcode =
    2ac0:	2105      	movs	r1, #5
				pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2ac2:	713a      	strb	r2, [r7, #4]
				pdu_ctrl_tx->llctrl.opcode =
    2ac4:	71f9      	strb	r1, [r7, #7]
	if (
    2ac6:	2b00      	cmp	r3, #0
    2ac8:	f47f ab50 	bne.w	216c <ull_conn_llcp+0xd14>
		if (!conn->tx_ctrl) {
    2acc:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    2ad0:	2a00      	cmp	r2, #0
    2ad2:	f47f ab61 	bne.w	2198 <ull_conn_llcp+0xd40>
			tx->next = conn->tx_head;
    2ad6:	603b      	str	r3, [r7, #0]
				conn->tx_ctrl = tx;
    2ad8:	e9c4 7762 	strd	r7, r7, [r4, #392]	; 0x188
				conn->tx_ctrl_last = tx;
    2adc:	f8c4 7190 	str.w	r7, [r4, #400]	; 0x190
    2ae0:	f7ff bb61 	b.w	21a6 <ull_conn_llcp+0xd4e>
					LL_ASSERT(rx && rx->hdr.link);
    2ae4:	4a10      	ldr	r2, [pc, #64]	; (2b28 <ull_conn_llcp+0x16d0>)
    2ae6:	4911      	ldr	r1, [pc, #68]	; (2b2c <ull_conn_llcp+0x16d4>)
    2ae8:	4811      	ldr	r0, [pc, #68]	; (2b30 <ull_conn_llcp+0x16d8>)
    2aea:	f241 03de 	movw	r3, #4318	; 0x10de
    2aee:	f01b fa2c 	bl	1df4a <printk>
    2af2:	4040      	eors	r0, r0
    2af4:	f380 8811 	msr	BASEPRI, r0
    2af8:	f04f 0003 	mov.w	r0, #3
    2afc:	df02      	svc	2
    2afe:	6828      	ldr	r0, [r5, #0]
    2b00:	f8b4 c042 	ldrh.w	ip, [r4, #66]	; 0x42
    2b04:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
    2b08:	f7ff bb7b 	b.w	2202 <ull_conn_llcp+0xdaa>
						if (!conn->llcp_length.cache.tx_octets) {
    2b0c:	f8b4 217c 	ldrh.w	r2, [r4, #380]	; 0x17c
    2b10:	2a00      	cmp	r2, #0
    2b12:	f040 814e 	bne.w	2db2 <ull_conn_llcp+0x195a>
							conn->llcp_length.ack = conn->llcp_length.req;
    2b16:	f884 3171 	strb.w	r3, [r4, #369]	; 0x171
							conn->procedure_expire = 0U;
    2b1a:	f8a4 20b0 	strh.w	r2, [r4, #176]	; 0xb0
    2b1e:	f7ff bb67 	b.w	21f0 <ull_conn_llcp+0xd98>
    2b22:	bf00      	nop
    2b24:	2000802c 	.word	0x2000802c
    2b28:	0002442c 	.word	0x0002442c
    2b2c:	00024594 	.word	0x00024594
    2b30:	00023fe4 	.word	0x00023fe4
			} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
    2b34:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
    2b38:	f894 2181 	ldrb.w	r2, [r4, #385]	; 0x181
    2b3c:	429a      	cmp	r2, r3
    2b3e:	f43e acd0 	beq.w	14e2 <ull_conn_llcp+0x8a>
		switch (conn->llcp_phy.state) {
    2b42:	f894 2182 	ldrb.w	r2, [r4, #386]	; 0x182
    2b46:	f002 0103 	and.w	r1, r2, #3
    2b4a:	2903      	cmp	r1, #3
    2b4c:	f000 8243 	beq.w	2fd6 <ull_conn_llcp+0x1b7e>
    2b50:	2900      	cmp	r1, #0
    2b52:	f47e acc6 	bne.w	14e2 <ull_conn_llcp+0x8a>
					tx = mem_acquire(&mem_conn_tx_ctrl.free);
    2b56:	48c9      	ldr	r0, [pc, #804]	; (2e7c <ull_conn_llcp+0x1a24>)
    2b58:	f00d fa30 	bl	ffbc <mem_acquire>
					if (!tx) {
    2b5c:	4601      	mov	r1, r0
    2b5e:	2800      	cmp	r0, #0
    2b60:	f43f a9a2 	beq.w	1ea8 <ull_conn_llcp+0xa50>
					conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    2b64:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
					conn->phy_pref_tx = conn->llcp_phy.tx;
    2b68:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
					conn->phy_pref_flags = conn->llcp_phy.flags;
    2b6c:	f894 5183 	ldrb.w	r5, [r4, #387]	; 0x183
					conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    2b70:	2001      	movs	r0, #1
    2b72:	f360 0301 	bfi	r3, r0, #0, #2
					conn->phy_pref_tx = conn->llcp_phy.tx;
    2b76:	f3c3 0082 	ubfx	r0, r3, #2, #3
    2b7a:	f360 0202 	bfi	r2, r0, #0, #3
					conn->phy_pref_rx = conn->llcp_phy.rx;
    2b7e:	f3c3 1042 	ubfx	r0, r3, #5, #3
    2b82:	f360 1206 	bfi	r2, r0, #4, #3
					conn->phy_pref_flags = conn->llcp_phy.flags;
    2b86:	f3c5 0540 	ubfx	r5, r5, #1, #1
					pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2b8a:	7908      	ldrb	r0, [r1, #4]
					conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    2b8c:	f884 3182 	strb.w	r3, [r4, #386]	; 0x182
					conn->phy_pref_flags = conn->llcp_phy.flags;
    2b90:	f365 02c3 	bfi	r2, r5, #3, #1
    2b94:	f884 2184 	strb.w	r2, [r4, #388]	; 0x184
					pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2b98:	f040 0003 	orr.w	r0, r0, #3
					conn->phy_pref_tx = conn->llcp_phy.tx;
    2b9c:	f3c3 0682 	ubfx	r6, r3, #2, #3
					pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    2ba0:	2216      	movs	r2, #22
					conn->phy_pref_rx = conn->llcp_phy.rx;
    2ba2:	f3c3 1342 	ubfx	r3, r3, #5, #3
					pdu_ctrl_tx->len =
    2ba6:	2503      	movs	r5, #3
					pr->rx_phys = conn->llcp_phy.rx;
    2ba8:	724b      	strb	r3, [r1, #9]
					pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2baa:	7108      	strb	r0, [r1, #4]
					pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    2bac:	71ca      	strb	r2, [r1, #7]
					pr->tx_phys = conn->llcp_phy.tx;
    2bae:	720e      	strb	r6, [r1, #8]
					pdu_ctrl_tx->len =
    2bb0:	714d      	strb	r5, [r1, #5]
	ctrl_tx_pause_enqueue(conn, tx, false);
    2bb2:	2200      	movs	r2, #0
    2bb4:	4620      	mov	r0, r4
    2bb6:	f012 f831 	bl	14c1c <ctrl_tx_pause_enqueue>
					conn->procedure_expire = conn->procedure_reload;
    2bba:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
    2bbe:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
				break;
    2bc2:	f7ff b971 	b.w	1ea8 <ull_conn_llcp+0xa50>
		conn->tx_data_last = tx;
    2bc6:	f8c4 7198 	str.w	r7, [r4, #408]	; 0x198
    2bca:	f7ff baf0 	b.w	21ae <ull_conn_llcp+0xd56>
				conn->llcp.phy_upd_ind.instant = event_counter +
    2bce:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    2bd0:	4499      	add	r9, r3
					lll->latency +
    2bd2:	f109 0306 	add.w	r3, r9, #6
				conn->llcp.phy_upd_ind.instant = event_counter +
    2bd6:	f8a4 30c6 	strh.w	r3, [r4, #198]	; 0xc6
				(void)ll_pdu_rx_alloc();
    2bda:	f011 fc31 	bl	14440 <ll_pdu_rx_alloc>
				rx->hdr.link->mem = conn->llcp_rx;
    2bde:	682b      	ldr	r3, [r5, #0]
    2be0:	f8d4 20d8 	ldr.w	r2, [r4, #216]	; 0xd8
    2be4:	605a      	str	r2, [r3, #4]
				conn->llcp_rx = rx;
    2be6:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
				rx = ll_pdu_rx_alloc();
    2bea:	f011 fc29 	bl	14440 <ll_pdu_rx_alloc>
				rx->hdr.link->mem = conn->llcp_rx;
    2bee:	6803      	ldr	r3, [r0, #0]
    2bf0:	f8d4 20d8 	ldr.w	r2, [r4, #216]	; 0xd8
    2bf4:	605a      	str	r2, [r3, #4]
				conn->llcp_rx = rx;
    2bf6:	f894 30c4 	ldrb.w	r3, [r4, #196]	; 0xc4
    2bfa:	f8b4 10c6 	ldrh.w	r1, [r4, #198]	; 0xc6
    2bfe:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
    2c02:	f3c3 0682 	ubfx	r6, r3, #2, #3
    2c06:	095b      	lsrs	r3, r3, #5
    2c08:	f7ff ba47 	b.w	209a <ull_conn_llcp+0xc42>
			LL_ASSERT(0);
    2c0c:	f640 63fa 	movw	r3, #3834	; 0xefa
				LL_ASSERT(0);
    2c10:	4a9b      	ldr	r2, [pc, #620]	; (2e80 <ull_conn_llcp+0x1a28>)
    2c12:	499c      	ldr	r1, [pc, #624]	; (2e84 <ull_conn_llcp+0x1a2c>)
    2c14:	489c      	ldr	r0, [pc, #624]	; (2e88 <ull_conn_llcp+0x1a30>)
    2c16:	f01b f998 	bl	1df4a <printk>
    2c1a:	4040      	eors	r0, r0
    2c1c:	f380 8811 	msr	BASEPRI, r0
    2c20:	f04f 0003 	mov.w	r0, #3
    2c24:	df02      	svc	2
				break;
    2c26:	f7ff b93f 	b.w	1ea8 <ull_conn_llcp+0xa50>
			tx = mem_acquire(&mem_conn_tx_ctrl.free);
    2c2a:	4894      	ldr	r0, [pc, #592]	; (2e7c <ull_conn_llcp+0x1a24>)
    2c2c:	f00d f9c6 	bl	ffbc <mem_acquire>
			if (tx) {
    2c30:	2800      	cmp	r0, #0
    2c32:	f43f a939 	beq.w	1ea8 <ull_conn_llcp+0xa50>
				conn->llcp_version.ack--;
    2c36:	f894 20fd 	ldrb.w	r2, [r4, #253]	; 0xfd
				conn->llcp_version.tx = 1U;
    2c3a:	f894 30fe 	ldrb.w	r3, [r4, #254]	; 0xfe
				conn->llcp_version.ack--;
    2c3e:	3a01      	subs	r2, #1
    2c40:	f884 20fd 	strb.w	r2, [r4, #253]	; 0xfd
				pdu->ll_id = PDU_DATA_LLID_CTRL;
    2c44:	7902      	ldrb	r2, [r0, #4]
				conn->llcp_version.tx = 1U;
    2c46:	f043 0301 	orr.w	r3, r3, #1
				pdu->len =
    2c4a:	2106      	movs	r1, #6
				conn->llcp_version.tx = 1U;
    2c4c:	f884 30fe 	strb.w	r3, [r4, #254]	; 0xfe
				pdu->ll_id = PDU_DATA_LLID_CTRL;
    2c50:	f042 0203 	orr.w	r2, r2, #3
				pdu->len =
    2c54:	7141      	strb	r1, [r0, #5]
			conn->tx_head &&
    2c56:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
				pdu->ll_id = PDU_DATA_LLID_CTRL;
    2c5a:	7102      	strb	r2, [r0, #4]
				pdu->llctrl.version_ind.version_number =
    2c5c:	210b      	movs	r1, #11
				pdu->llctrl.version_ind.company_id = cid;
    2c5e:	f06f 020e 	mvn.w	r2, #14
				pdu->llctrl.opcode =
    2c62:	250c      	movs	r5, #12
				pdu->llctrl.version_ind.version_number =
    2c64:	7201      	strb	r1, [r0, #8]
				pdu->llctrl.version_ind.company_id = cid;
    2c66:	7242      	strb	r2, [r0, #9]
    2c68:	2105      	movs	r1, #5
				pdu->llctrl.version_ind.sub_version_number = svn;
    2c6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
				pdu->llctrl.opcode =
    2c6e:	71c5      	strb	r5, [r0, #7]
				pdu->llctrl.version_ind.company_id = cid;
    2c70:	7281      	strb	r1, [r0, #10]
				pdu->llctrl.version_ind.sub_version_number = svn;
    2c72:	72c2      	strb	r2, [r0, #11]
    2c74:	7302      	strb	r2, [r0, #12]
	if (
    2c76:	2b00      	cmp	r3, #0
    2c78:	f000 80b4 	beq.w	2de4 <ull_conn_llcp+0x198c>
			!conn->llcp_enc.pause_tx &&
    2c7c:	f894 212a 	ldrb.w	r2, [r4, #298]	; 0x12a
			conn->tx_head &&
    2c80:	0797      	lsls	r7, r2, #30
    2c82:	f100 80af 	bmi.w	2de4 <ull_conn_llcp+0x198c>
			!conn->llcp_phy.pause_tx &&
    2c86:	f894 2183 	ldrb.w	r2, [r4, #387]	; 0x183
    2c8a:	07d6      	lsls	r6, r2, #31
    2c8c:	f100 80aa 	bmi.w	2de4 <ull_conn_llcp+0x198c>
		if (conn->tx_head == conn->tx_data) {
    2c90:	f8d4 2194 	ldr.w	r2, [r4, #404]	; 0x194
    2c94:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    2c96:	bf04      	itt	eq
    2c98:	681a      	ldreq	r2, [r3, #0]
    2c9a:	f8c4 2194 	streq.w	r2, [r4, #404]	; 0x194
		if (!conn->tx_ctrl) {
    2c9e:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    2ca2:	2a00      	cmp	r2, #0
    2ca4:	f47f ae0e 	bne.w	28c4 <ull_conn_llcp+0x146c>
			tx->next = conn->tx_head->next;
    2ca8:	681a      	ldr	r2, [r3, #0]
    2caa:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    2cac:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last = tx;
    2cae:	e9c4 0063 	strd	r0, r0, [r4, #396]	; 0x18c
    2cb2:	e60e      	b.n	28d2 <ull_conn_llcp+0x147a>
			start_enc_rsp_send(conn, pdu_ctrl_tx);
    2cb4:	4641      	mov	r1, r8
    2cb6:	4620      	mov	r0, r4
    2cb8:	f012 f980 	bl	14fbc <start_enc_rsp_send>
			conn->tx_head &&
    2cbc:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
	if (
    2cc0:	b37b      	cbz	r3, 2d22 <ull_conn_llcp+0x18ca>
			!conn->llcp_enc.pause_tx &&
    2cc2:	f894 212a 	ldrb.w	r2, [r4, #298]	; 0x12a
			conn->tx_head &&
    2cc6:	0790      	lsls	r0, r2, #30
    2cc8:	d42b      	bmi.n	2d22 <ull_conn_llcp+0x18ca>
			!conn->llcp_phy.pause_tx &&
    2cca:	f894 2183 	ldrb.w	r2, [r4, #387]	; 0x183
    2cce:	07d1      	lsls	r1, r2, #31
    2cd0:	d427      	bmi.n	2d22 <ull_conn_llcp+0x18ca>
		if (conn->tx_head == conn->tx_data) {
    2cd2:	f8d4 2194 	ldr.w	r2, [r4, #404]	; 0x194
    2cd6:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    2cd8:	bf04      	itt	eq
    2cda:	681a      	ldreq	r2, [r3, #0]
    2cdc:	f8c4 2194 	streq.w	r2, [r4, #404]	; 0x194
		if (!conn->tx_ctrl) {
    2ce0:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    2ce4:	2a00      	cmp	r2, #0
    2ce6:	f000 8170 	beq.w	2fca <ull_conn_llcp+0x1b72>
	tx->next = conn->tx_ctrl_last->next;
    2cea:	f8d4 3190 	ldr.w	r3, [r4, #400]	; 0x190
    2cee:	681a      	ldr	r2, [r3, #0]
    2cf0:	603a      	str	r2, [r7, #0]
	conn->tx_ctrl_last->next = tx;
    2cf2:	601f      	str	r7, [r3, #0]
	conn->tx_ctrl_last = tx;
    2cf4:	f8c4 7190 	str.w	r7, [r4, #400]	; 0x190
	if (!tx->next) {
    2cf8:	683b      	ldr	r3, [r7, #0]
    2cfa:	2b00      	cmp	r3, #0
    2cfc:	d07d      	beq.n	2dfa <ull_conn_llcp+0x19a2>
			conn->llcp_enc.pause_rx = 0U;
    2cfe:	f894 312a 	ldrb.w	r3, [r4, #298]	; 0x12a
    2d02:	f023 0303 	bic.w	r3, r3, #3
    2d06:	f884 312a 	strb.w	r3, [r4, #298]	; 0x12a
    2d0a:	f7ff ba50 	b.w	21ae <ull_conn_llcp+0xd56>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    2d0e:	230d      	movs	r3, #13
		p->error_code =	conn->llcp.encryption.error_code;
    2d10:	723e      	strb	r6, [r7, #8]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    2d12:	71fb      	strb	r3, [r7, #7]
		p->error_code =	conn->llcp.encryption.error_code;
    2d14:	2502      	movs	r5, #2
    2d16:	f7ff ba20 	b.w	215a <ull_conn_llcp+0xd02>
		conn->tx_data_last = tx;
    2d1a:	f8c4 0198 	str.w	r0, [r4, #408]	; 0x198
    2d1e:	f7ff baee 	b.w	22fe <ull_conn_llcp+0xea6>
		if (!conn->tx_ctrl) {
    2d22:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    2d26:	2a00      	cmp	r2, #0
    2d28:	d1df      	bne.n	2cea <ull_conn_llcp+0x1892>
			tx->next = conn->tx_head;
    2d2a:	603b      	str	r3, [r7, #0]
				conn->tx_ctrl = tx;
    2d2c:	e9c4 7762 	strd	r7, r7, [r4, #392]	; 0x188
				conn->tx_ctrl_last = tx;
    2d30:	f8c4 7190 	str.w	r7, [r4, #400]	; 0x190
    2d34:	e7e0      	b.n	2cf8 <ull_conn_llcp+0x18a0>
					(void)ll_pdu_rx_alloc();
    2d36:	f011 fb83 	bl	14440 <ll_pdu_rx_alloc>
					rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    2d3a:	230f      	movs	r3, #15
					rx->hdr.handle = lll->handle;
    2d3c:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
					upd->status = 0U;
    2d3e:	772e      	strb	r6, [r5, #28]
					rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    2d40:	712b      	strb	r3, [r5, #4]
					upd->tx = lll->phy_tx;
    2d42:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
					ll_rx_put(rx->hdr.link, rx);
    2d46:	6828      	ldr	r0, [r5, #0]
					rx->hdr.handle = lll->handle;
    2d48:	80ea      	strh	r2, [r5, #6]
					upd->tx = lll->phy_tx;
    2d4a:	f3c3 0302 	ubfx	r3, r3, #0, #3
    2d4e:	776b      	strb	r3, [r5, #29]
					upd->rx = lll->phy_rx;
    2d50:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
    2d54:	f3c3 0302 	ubfx	r3, r3, #0, #3
    2d58:	77ab      	strb	r3, [r5, #30]
					ll_rx_put(rx->hdr.link, rx);
    2d5a:	4629      	mov	r1, r5
    2d5c:	f011 fb3c 	bl	143d8 <ll_rx_put>
					ll_rx_sched();
    2d60:	f011 fb44 	bl	143ec <ll_rx_sched>
    2d64:	f894 30c4 	ldrb.w	r3, [r4, #196]	; 0xc4
    2d68:	f8b4 10c6 	ldrh.w	r1, [r4, #198]	; 0xc6
    2d6c:	f3c3 0682 	ubfx	r6, r3, #2, #3
    2d70:	095b      	lsrs	r3, r3, #5
    2d72:	f7ff b992 	b.w	209a <ull_conn_llcp+0xc42>
		switch (conn->llcp_conn_param.state) {
    2d76:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
    2d7a:	f003 0307 	and.w	r3, r3, #7
    2d7e:	2b05      	cmp	r3, #5
    2d80:	f200 81b3 	bhi.w	30ea <ull_conn_llcp+0x1c92>
    2d84:	a001      	add	r0, pc, #4	; (adr r0, 2d8c <ull_conn_llcp+0x1934>)
    2d86:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
    2d8a:	bf00      	nop
    2d8c:	000024c7 	.word	0x000024c7
    2d90:	00002439 	.word	0x00002439
    2d94:	000023e9 	.word	0x000023e9
    2d98:	000014e3 	.word	0x000014e3
    2d9c:	000014e3 	.word	0x000014e3
    2da0:	000014e3 	.word	0x000014e3
		conn->tx_data_last = tx;
    2da4:	f8c4 5198 	str.w	r5, [r4, #408]	; 0x198
    2da8:	f7fe bd4a 	b.w	1840 <ull_conn_llcp+0x3e8>
    2dac:	f8c4 6198 	str.w	r6, [r4, #408]	; 0x198
			conn->procedure_expire = conn->procedure_reload;
    2db0:	e47c      	b.n	26ac <ull_conn_llcp+0x1254>
							conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    2db2:	f894 0172 	ldrb.w	r0, [r4, #370]	; 0x172
							conn->llcp_length.tx_time =
    2db6:	f8b4 517e 	ldrh.w	r5, [r4, #382]	; 0x17e
							conn->llcp_length.tx_octets =
    2dba:	f8a4 2176 	strh.w	r2, [r4, #374]	; 0x176
							conn->llcp_length.cache.tx_octets = 0;
    2dbe:	2300      	movs	r3, #0
							conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    2dc0:	f363 0002 	bfi	r0, r3, #0, #3
    2dc4:	f884 0172 	strb.w	r0, [r4, #370]	; 0x172
							conn->llcp_length.cache.tx_octets = 0;
    2dc8:	f8a4 317c 	strh.w	r3, [r4, #380]	; 0x17c
							conn->llcp_length.tx_time =
    2dcc:	f8a4 517a 	strh.w	r5, [r4, #378]	; 0x17a
							conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    2dd0:	f7ff ba0e 	b.w	21f0 <ull_conn_llcp+0xd98>
			tx->next = conn->tx_head->next;
    2dd4:	681a      	ldr	r2, [r3, #0]
    2dd6:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    2dd8:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl = tx;
    2dda:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
    2ddc:	e9c4 0063 	strd	r0, r0, [r4, #396]	; 0x18c
    2de0:	f7fe bcab 	b.w	173a <ull_conn_llcp+0x2e2>
		if (!conn->tx_ctrl) {
    2de4:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    2de8:	2a00      	cmp	r2, #0
    2dea:	f47f ad6b 	bne.w	28c4 <ull_conn_llcp+0x146c>
			tx->next = conn->tx_head;
    2dee:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    2df0:	e9c4 0062 	strd	r0, r0, [r4, #392]	; 0x188
				conn->tx_ctrl_last = tx;
    2df4:	f8c4 0190 	str.w	r0, [r4, #400]	; 0x190
    2df8:	e56b      	b.n	28d2 <ull_conn_llcp+0x147a>
		conn->tx_data_last = tx;
    2dfa:	f8c4 7198 	str.w	r7, [r4, #408]	; 0x198
    2dfe:	e77e      	b.n	2cfe <ull_conn_llcp+0x18a6>
			tx->next = conn->tx_head->next;
    2e00:	6803      	ldr	r3, [r0, #0]
    2e02:	6033      	str	r3, [r6, #0]
			conn->tx_head->next = tx;
    2e04:	6006      	str	r6, [r0, #0]
				conn->tx_ctrl = tx;
    2e06:	6830      	ldr	r0, [r6, #0]
				conn->tx_ctrl_last = tx;
    2e08:	e9c4 6663 	strd	r6, r6, [r4, #396]	; 0x18c
    2e0c:	f7ff b8b9 	b.w	1f82 <ull_conn_llcp+0xb2a>
			tx->next = conn->tx_head->next;
    2e10:	681a      	ldr	r2, [r3, #0]
    2e12:	603a      	str	r2, [r7, #0]
			conn->tx_head->next = tx;
    2e14:	601f      	str	r7, [r3, #0]
				conn->tx_ctrl = tx;
    2e16:	683b      	ldr	r3, [r7, #0]
				conn->tx_ctrl_last = tx;
    2e18:	e9c4 7763 	strd	r7, r7, [r4, #396]	; 0x18c
    2e1c:	f7ff b96b 	b.w	20f6 <ull_conn_llcp+0xc9e>
		if (!conn->tx_ctrl) {
    2e20:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
    2e24:	2b00      	cmp	r3, #0
    2e26:	f47f ad4d 	bne.w	28c4 <ull_conn_llcp+0x146c>
			tx->next = conn->tx_head;
    2e2a:	6001      	str	r1, [r0, #0]
				conn->tx_ctrl = tx;
    2e2c:	e9c4 0062 	strd	r0, r0, [r4, #392]	; 0x188
				conn->tx_ctrl_last = tx;
    2e30:	f8c4 0190 	str.w	r0, [r4, #400]	; 0x190
    2e34:	e54d      	b.n	28d2 <ull_conn_llcp+0x147a>
			tx_time = MAX(MIN(PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_1M),
    2e36:	f640 0248 	movw	r2, #2120	; 0x848
    2e3a:	4293      	cmp	r3, r2
    2e3c:	bf28      	it	cs
    2e3e:	4613      	movcs	r3, r2
    2e40:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
    2e44:	bf38      	it	cc
    2e46:	f44f 73a4 	movcc.w	r3, #328	; 0x148
    2e4a:	e51e      	b.n	288a <ull_conn_llcp+0x1432>
			tx->next = conn->tx_head->next;
    2e4c:	681a      	ldr	r2, [r3, #0]
    2e4e:	602a      	str	r2, [r5, #0]
			conn->tx_head->next = tx;
    2e50:	601d      	str	r5, [r3, #0]
				conn->tx_ctrl = tx;
    2e52:	682b      	ldr	r3, [r5, #0]
				conn->tx_ctrl_last = tx;
    2e54:	e9c4 5563 	strd	r5, r5, [r4, #396]	; 0x18c
    2e58:	f7ff b8e2 	b.w	2020 <ull_conn_llcp+0xbc8>
			tx->next = conn->tx_head->next;
    2e5c:	680b      	ldr	r3, [r1, #0]
    2e5e:	6003      	str	r3, [r0, #0]
			conn->tx_head->next = tx;
    2e60:	6008      	str	r0, [r1, #0]
				conn->tx_ctrl = tx;
    2e62:	6801      	ldr	r1, [r0, #0]
				conn->tx_ctrl_last = tx;
    2e64:	e9c4 0063 	strd	r0, r0, [r4, #396]	; 0x18c
    2e68:	f7ff ba46 	b.w	22f8 <ull_conn_llcp+0xea0>
			tx->next = conn->tx_head->next;
    2e6c:	681a      	ldr	r2, [r3, #0]
    2e6e:	602a      	str	r2, [r5, #0]
			conn->tx_head->next = tx;
    2e70:	601d      	str	r5, [r3, #0]
				conn->tx_ctrl = tx;
    2e72:	682b      	ldr	r3, [r5, #0]
				conn->tx_ctrl_last = tx;
    2e74:	e9c4 5563 	strd	r5, r5, [r4, #396]	; 0x18c
    2e78:	f7fe bcdf 	b.w	183a <ull_conn_llcp+0x3e2>
    2e7c:	2000802c 	.word	0x2000802c
    2e80:	0002442c 	.word	0x0002442c
    2e84:	00024054 	.word	0x00024054
    2e88:	00023fe4 	.word	0x00023fe4
					LL_ASSERT(rx && rx->hdr.link);
    2e8c:	4aa1      	ldr	r2, [pc, #644]	; (3114 <ull_conn_llcp+0x1cbc>)
    2e8e:	49a2      	ldr	r1, [pc, #648]	; (3118 <ull_conn_llcp+0x1cc0>)
    2e90:	48a2      	ldr	r0, [pc, #648]	; (311c <ull_conn_llcp+0x1cc4>)
    2e92:	f241 03de 	movw	r3, #4318	; 0x10de
    2e96:	f01b f858 	bl	1df4a <printk>
    2e9a:	4040      	eors	r0, r0
    2e9c:	f380 8811 	msr	BASEPRI, r0
    2ea0:	f04f 0003 	mov.w	r0, #3
    2ea4:	df02      	svc	2
    2ea6:	6828      	ldr	r0, [r5, #0]
    2ea8:	e494      	b.n	27d4 <ull_conn_llcp+0x137c>
						if (!conn->llcp_length.cache.tx_octets) {
    2eaa:	f8b4 217c 	ldrh.w	r2, [r4, #380]	; 0x17c
    2eae:	2a00      	cmp	r2, #0
    2eb0:	f040 80d3 	bne.w	305a <ull_conn_llcp+0x1c02>
							conn->llcp_length.ack = conn->llcp_length.req;
    2eb4:	f884 0171 	strb.w	r0, [r4, #369]	; 0x171
							conn->procedure_expire = 0U;
    2eb8:	f8a4 20b0 	strh.w	r2, [r4, #176]	; 0xb0
    2ebc:	e481      	b.n	27c2 <ull_conn_llcp+0x136a>
			tx->next = conn->tx_head->next;
    2ebe:	681a      	ldr	r2, [r3, #0]
    2ec0:	6032      	str	r2, [r6, #0]
			conn->tx_head->next = tx;
    2ec2:	601e      	str	r6, [r3, #0]
				conn->tx_ctrl = tx;
    2ec4:	6833      	ldr	r3, [r6, #0]
				conn->tx_ctrl_last = tx;
    2ec6:	e9c4 6663 	strd	r6, r6, [r4, #396]	; 0x18c
    2eca:	f7ff bbec 	b.w	26a6 <ull_conn_llcp+0x124e>
			tx->next = conn->tx_head->next;
    2ece:	681a      	ldr	r2, [r3, #0]
    2ed0:	603a      	str	r2, [r7, #0]
			conn->tx_head->next = tx;
    2ed2:	601f      	str	r7, [r3, #0]
				conn->tx_ctrl_last = tx;
    2ed4:	e9c4 7763 	strd	r7, r7, [r4, #396]	; 0x18c
    2ed8:	f7ff b965 	b.w	21a6 <ull_conn_llcp+0xd4e>
			tx = mem_acquire(&mem_conn_tx_ctrl.free);
    2edc:	4890      	ldr	r0, [pc, #576]	; (3120 <ull_conn_llcp+0x1cc8>)
    2ede:	f00d f86d 	bl	ffbc <mem_acquire>
			if (!tx) {
    2ee2:	4601      	mov	r1, r0
    2ee4:	2800      	cmp	r0, #0
    2ee6:	f43e afdf 	beq.w	1ea8 <ull_conn_llcp+0xa50>
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    2eea:	7903      	ldrb	r3, [r0, #4]
    2eec:	f043 0303 	orr.w	r3, r3, #3
    2ef0:	710b      	strb	r3, [r1, #4]
			pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    2ef2:	2011      	movs	r0, #17
			pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    2ef4:	2203      	movs	r2, #3
			rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    2ef6:	230f      	movs	r3, #15
			pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    2ef8:	71c8      	strb	r0, [r1, #7]
			pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    2efa:	714a      	strb	r2, [r1, #5]
			rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    2efc:	720b      	strb	r3, [r1, #8]
			rej->error_code = conn->llcp_conn_param.status;
    2efe:	f894 314b 	ldrb.w	r3, [r4, #331]	; 0x14b
    2f02:	724b      	strb	r3, [r1, #9]
	ctrl_tx_pause_enqueue(conn, tx, false);
    2f04:	463a      	mov	r2, r7
    2f06:	4620      	mov	r0, r4
    2f08:	f011 fe88 	bl	14c1c <ctrl_tx_pause_enqueue>
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    2f0c:	f894 3148 	ldrb.w	r3, [r4, #328]	; 0x148
	conn_upd_curr = NULL;
    2f10:	6037      	str	r7, [r6, #0]
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    2f12:	f884 3149 	strb.w	r3, [r4, #329]	; 0x149
    2f16:	f7fe bfc7 	b.w	1ea8 <ull_conn_llcp+0xa50>
					LL_ASSERT(rx && rx->hdr.link);
    2f1a:	4a7e      	ldr	r2, [pc, #504]	; (3114 <ull_conn_llcp+0x1cbc>)
    2f1c:	497e      	ldr	r1, [pc, #504]	; (3118 <ull_conn_llcp+0x1cc0>)
    2f1e:	487f      	ldr	r0, [pc, #508]	; (311c <ull_conn_llcp+0x1cc4>)
    2f20:	f241 231d 	movw	r3, #4637	; 0x121d
    2f24:	f01b f811 	bl	1df4a <printk>
    2f28:	4040      	eors	r0, r0
    2f2a:	f380 8811 	msr	BASEPRI, r0
    2f2e:	f04f 0003 	mov.w	r0, #3
    2f32:	df02      	svc	2
    2f34:	6828      	ldr	r0, [r5, #0]
    2f36:	e573      	b.n	2a20 <ull_conn_llcp+0x15c8>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    2f38:	4879      	ldr	r0, [pc, #484]	; (3120 <ull_conn_llcp+0x1cc8>)
    2f3a:	f00d f83f 	bl	ffbc <mem_acquire>
		if (!tx) {
    2f3e:	4601      	mov	r1, r0
    2f40:	2800      	cmp	r0, #0
    2f42:	f43e afb1 	beq.w	1ea8 <ull_conn_llcp+0xa50>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    2f46:	7903      	ldrb	r3, [r0, #4]
		pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
    2f48:	2218      	movs	r2, #24
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    2f4a:	f043 0303 	orr.w	r3, r3, #3
    2f4e:	7103      	strb	r3, [r0, #4]
		pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
    2f50:	7142      	strb	r2, [r0, #5]
		rsp->interval_min =
    2f52:	f8b4 214c 	ldrh.w	r2, [r4, #332]	; 0x14c
		rsp->interval_max =
    2f56:	f8b4 314e 	ldrh.w	r3, [r4, #334]	; 0x14e
		rsp->latency =
    2f5a:	f8b4 0150 	ldrh.w	r0, [r4, #336]	; 0x150
		rsp->interval_min =
    2f5e:	810a      	strh	r2, [r1, #8]
		rsp->timeout =
    2f60:	f8b4 2152 	ldrh.w	r2, [r4, #338]	; 0x152
		rsp->interval_max =
    2f64:	814b      	strh	r3, [r1, #10]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
    2f66:	2310      	movs	r3, #16
		rsp->latency =
    2f68:	8188      	strh	r0, [r1, #12]
		rsp->timeout =
    2f6a:	81ca      	strh	r2, [r1, #14]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
    2f6c:	71cb      	strb	r3, [r1, #7]
		rsp->preferred_periodicity =
    2f6e:	f894 3154 	ldrb.w	r3, [r4, #340]	; 0x154
    2f72:	740b      	strb	r3, [r1, #16]
		rsp->reference_conn_event_count =
    2f74:	f8b4 3156 	ldrh.w	r3, [r4, #342]	; 0x156
		rsp->offset0 = sys_cpu_to_le16(conn->llcp_conn_param.offset0);
    2f78:	f8b4 0158 	ldrh.w	r0, [r4, #344]	; 0x158
		rsp->offset1 = sys_cpu_to_le16(conn->llcp_conn_param.offset1);
    2f7c:	f8b4 215a 	ldrh.w	r2, [r4, #346]	; 0x15a
		rsp->reference_conn_event_count =
    2f80:	f8a1 3011 	strh.w	r3, [r1, #17]
		rsp->offset2 = sys_cpu_to_le16(conn->llcp_conn_param.offset2);
    2f84:	f8b4 315c 	ldrh.w	r3, [r4, #348]	; 0x15c
		rsp->offset0 = sys_cpu_to_le16(conn->llcp_conn_param.offset0);
    2f88:	f8a1 0013 	strh.w	r0, [r1, #19]
		rsp->offset3 = sys_cpu_to_le16(conn->llcp_conn_param.offset3);
    2f8c:	f8b4 015e 	ldrh.w	r0, [r4, #350]	; 0x15e
		rsp->offset1 = sys_cpu_to_le16(conn->llcp_conn_param.offset1);
    2f90:	f8a1 2015 	strh.w	r2, [r1, #21]
		rsp->offset4 = sys_cpu_to_le16(conn->llcp_conn_param.offset4);
    2f94:	f8b4 2160 	ldrh.w	r2, [r4, #352]	; 0x160
		rsp->offset2 = sys_cpu_to_le16(conn->llcp_conn_param.offset2);
    2f98:	f8a1 3017 	strh.w	r3, [r1, #23]
		rsp->offset5 = sys_cpu_to_le16(conn->llcp_conn_param.offset5);
    2f9c:	f8b4 3162 	ldrh.w	r3, [r4, #354]	; 0x162
    2fa0:	f8a1 301d 	strh.w	r3, [r1, #29]
		rsp->offset3 = sys_cpu_to_le16(conn->llcp_conn_param.offset3);
    2fa4:	f8a1 0019 	strh.w	r0, [r1, #25]
		rsp->offset4 = sys_cpu_to_le16(conn->llcp_conn_param.offset4);
    2fa8:	f8a1 201b 	strh.w	r2, [r1, #27]
	ctrl_tx_pause_enqueue(conn, tx, false);
    2fac:	4620      	mov	r0, r4
    2fae:	462a      	mov	r2, r5
    2fb0:	f011 fe34 	bl	14c1c <ctrl_tx_pause_enqueue>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    2fb4:	f894 3148 	ldrb.w	r3, [r4, #328]	; 0x148
	conn_upd_curr = NULL;
    2fb8:	6035      	str	r5, [r6, #0]
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    2fba:	f884 3149 	strb.w	r3, [r4, #329]	; 0x149
	conn_upd_curr = NULL;
    2fbe:	f894 50c0 	ldrb.w	r5, [r4, #192]	; 0xc0
    2fc2:	f894 30bf 	ldrb.w	r3, [r4, #191]	; 0xbf
}
    2fc6:	f7fe ba87 	b.w	14d8 <ull_conn_llcp+0x80>
			tx->next = conn->tx_head->next;
    2fca:	681a      	ldr	r2, [r3, #0]
    2fcc:	603a      	str	r2, [r7, #0]
			conn->tx_head->next = tx;
    2fce:	601f      	str	r7, [r3, #0]
				conn->tx_ctrl_last = tx;
    2fd0:	e9c4 7763 	strd	r7, r7, [r4, #396]	; 0x18c
    2fd4:	e690      	b.n	2cf8 <ull_conn_llcp+0x18a0>
					conn->llcp_phy.ack = conn->llcp_phy.req;
    2fd6:	f884 3181 	strb.w	r3, [r4, #385]	; 0x181
					if (conn->llcp_phy.tx & BIT(1)) {
    2fda:	f3c2 0382 	ubfx	r3, r2, #2, #3
    2fde:	0712      	lsls	r2, r2, #28
    2fe0:	d553      	bpl.n	308a <ull_conn_llcp+0x1c32>
						conn->llcp_phy.tx = BIT(1);
    2fe2:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
    2fe6:	2202      	movs	r2, #2
    2fe8:	f362 0384 	bfi	r3, r2, #2, #3
    2fec:	f884 3182 	strb.w	r3, [r4, #386]	; 0x182
					if (conn->llcp_phy.rx & BIT(1)) {
    2ff0:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
    2ff4:	065e      	lsls	r6, r3, #25
    2ff6:	ea4f 1253 	mov.w	r2, r3, lsr #5
    2ffa:	d53e      	bpl.n	307a <ull_conn_llcp+0x1c22>
						conn->llcp_phy.rx = BIT(1);
    2ffc:	2202      	movs	r2, #2
    2ffe:	f362 1347 	bfi	r3, r2, #5, #3
    3002:	f884 3182 	strb.w	r3, [r4, #386]	; 0x182
					if (conn->llcp_phy.tx != conn->lll.phy_tx) {
    3006:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
    300a:	f894 6048 	ldrb.w	r6, [r4, #72]	; 0x48
					if (conn->llcp_phy.rx != conn->lll.phy_rx) {
    300e:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
					conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    3012:	f894 2183 	ldrb.w	r2, [r4, #387]	; 0x183
					if (conn->llcp_phy.tx != conn->lll.phy_tx) {
    3016:	f3c3 0182 	ubfx	r1, r3, #2, #3
    301a:	f006 0607 	and.w	r6, r6, #7
					if (conn->llcp_phy.rx != conn->lll.phy_rx) {
    301e:	f000 0007 	and.w	r0, r0, #7
					conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    3022:	f3c2 0280 	ubfx	r2, r2, #2, #1
						conn->llcp.phy_upd_ind.tx = 0U;
    3026:	428e      	cmp	r6, r1
    3028:	bf08      	it	eq
    302a:	2100      	moveq	r1, #0
					conn->llcp.phy_upd_ind.initiate = 1U;
    302c:	0052      	lsls	r2, r2, #1
						conn->llcp.phy_upd_ind.rx = 0U;
    302e:	ebb0 1f53 	cmp.w	r0, r3, lsr #5
					conn->llcp.phy_upd_ind.initiate = 1U;
    3032:	f042 0201 	orr.w	r2, r2, #1
					if (conn->llcp_phy.rx != conn->lll.phy_rx) {
    3036:	ea4f 1353 	mov.w	r3, r3, lsr #5
						conn->llcp.phy_upd_ind.rx = 0U;
    303a:	bf08      	it	eq
    303c:	2300      	moveq	r3, #0
					conn->llcp.phy_upd_ind.initiate = 1U;
    303e:	ea42 1243 	orr.w	r2, r2, r3, lsl #5
    3042:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
					conn->llcp_ack -= 2U;
    3046:	1eab      	subs	r3, r5, #2
					conn->llcp_type = LLCP_PHY_UPD;
    3048:	2106      	movs	r1, #6
					conn->llcp_ack -= 2U;
    304a:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
					conn->llcp.phy_upd_ind.initiate = 1U;
    304e:	f884 20c4 	strb.w	r2, [r4, #196]	; 0xc4
					conn->llcp_type = LLCP_PHY_UPD;
    3052:	f884 10c1 	strb.w	r1, [r4, #193]	; 0xc1
			} else if (conn->llcp_length.ack != conn->llcp_length.req) {
    3056:	f7fe bab4 	b.w	15c2 <ull_conn_llcp+0x16a>
							conn->llcp_length.cache.tx_octets = 0;
    305a:	2000      	movs	r0, #0
							conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    305c:	460b      	mov	r3, r1
    305e:	f360 0302 	bfi	r3, r0, #0, #3
							conn->llcp_length.tx_octets =
    3062:	f8a4 2176 	strh.w	r2, [r4, #374]	; 0x176
							conn->llcp_length.tx_time =
    3066:	f8b4 217e 	ldrh.w	r2, [r4, #382]	; 0x17e
							conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    306a:	f884 3172 	strb.w	r3, [r4, #370]	; 0x172
							conn->llcp_length.cache.tx_octets = 0;
    306e:	f8a4 017c 	strh.w	r0, [r4, #380]	; 0x17c
							conn->llcp_length.tx_time =
    3072:	f8a4 217a 	strh.w	r2, [r4, #378]	; 0x17a
							conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    3076:	f7ff bba4 	b.w	27c2 <ull_conn_llcp+0x136a>
					} else if (conn->llcp_phy.rx & BIT(0)) {
    307a:	07d0      	lsls	r0, r2, #31
    307c:	d50f      	bpl.n	309e <ull_conn_llcp+0x1c46>
						conn->llcp_phy.rx = BIT(0);
    307e:	2201      	movs	r2, #1
    3080:	f362 1347 	bfi	r3, r2, #5, #3
    3084:	f884 3182 	strb.w	r3, [r4, #386]	; 0x182
    3088:	e7bd      	b.n	3006 <ull_conn_llcp+0x1bae>
					} else if (conn->llcp_phy.tx & BIT(0)) {
    308a:	07df      	lsls	r7, r3, #31
    308c:	d510      	bpl.n	30b0 <ull_conn_llcp+0x1c58>
						conn->llcp_phy.tx = BIT(0);
    308e:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
    3092:	2201      	movs	r2, #1
    3094:	f362 0384 	bfi	r3, r2, #2, #3
    3098:	f884 3182 	strb.w	r3, [r4, #386]	; 0x182
    309c:	e7a8      	b.n	2ff0 <ull_conn_llcp+0x1b98>
					} else if (conn->llcp_phy.rx & BIT(2)) {
    309e:	f012 0204 	ands.w	r2, r2, #4
						conn->llcp_phy.rx = BIT(2);
    30a2:	bf18      	it	ne
    30a4:	2204      	movne	r2, #4
						conn->llcp_phy.rx = 0U;
    30a6:	f362 1347 	bfi	r3, r2, #5, #3
    30aa:	f884 3182 	strb.w	r3, [r4, #386]	; 0x182
    30ae:	e7aa      	b.n	3006 <ull_conn_llcp+0x1bae>
					} else if (conn->llcp_phy.tx & BIT(2)) {
    30b0:	f013 0304 	ands.w	r3, r3, #4
    30b4:	d012      	beq.n	30dc <ull_conn_llcp+0x1c84>
						conn->llcp_phy.tx = BIT(2);
    30b6:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
    30ba:	2204      	movs	r2, #4
    30bc:	f362 0384 	bfi	r3, r2, #2, #3
    30c0:	f884 3182 	strb.w	r3, [r4, #386]	; 0x182
    30c4:	e794      	b.n	2ff0 <ull_conn_llcp+0x1b98>
					conn->llcp_conn_param.interval_max;
    30c6:	f8b4 314e 	ldrh.w	r3, [r4, #334]	; 0x14e
    30ca:	f7ff b9df 	b.w	248c <ull_conn_llcp+0x1034>
			tx->next = conn->tx_head->next;
    30ce:	680b      	ldr	r3, [r1, #0]
    30d0:	6003      	str	r3, [r0, #0]
			conn->tx_head->next = tx;
    30d2:	6008      	str	r0, [r1, #0]
				conn->tx_ctrl_last = tx;
    30d4:	e9c4 0063 	strd	r0, r0, [r4, #396]	; 0x18c
    30d8:	f7ff bbfb 	b.w	28d2 <ull_conn_llcp+0x147a>
						conn->llcp_phy.tx = 0U;
    30dc:	f894 2182 	ldrb.w	r2, [r4, #386]	; 0x182
    30e0:	f363 0284 	bfi	r2, r3, #2, #3
    30e4:	f884 2182 	strb.w	r2, [r4, #386]	; 0x182
    30e8:	e782      	b.n	2ff0 <ull_conn_llcp+0x1b98>
				LL_ASSERT(0);
    30ea:	f241 030a 	movw	r3, #4106	; 0x100a
    30ee:	e58f      	b.n	2c10 <ull_conn_llcp+0x17b8>
				LL_ASSERT(0);
    30f0:	f241 1306 	movw	r3, #4358	; 0x1106
    30f4:	e58c      	b.n	2c10 <ull_conn_llcp+0x17b8>
    30f6:	4a07      	ldr	r2, [pc, #28]	; (3114 <ull_conn_llcp+0x1cbc>)
    30f8:	490a      	ldr	r1, [pc, #40]	; (3124 <ull_conn_llcp+0x1ccc>)
    30fa:	4808      	ldr	r0, [pc, #32]	; (311c <ull_conn_llcp+0x1cc4>)
    30fc:	f241 1306 	movw	r3, #4358	; 0x1106
    3100:	f01a ff23 	bl	1df4a <printk>
    3104:	4040      	eors	r0, r0
    3106:	f380 8811 	msr	BASEPRI, r0
    310a:	f04f 0003 	mov.w	r0, #3
    310e:	df02      	svc	2
				break;
    3110:	f7fe ba57 	b.w	15c2 <ull_conn_llcp+0x16a>
    3114:	0002442c 	.word	0x0002442c
    3118:	00024594 	.word	0x00024594
    311c:	00023fe4 	.word	0x00023fe4
    3120:	2000802c 	.word	0x2000802c
    3124:	00024054 	.word	0x00024054

00003128 <ull_conn_done>:
{
    3128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    312c:	b0b7      	sub	sp, #220	; 0xdc
    312e:	4604      	mov	r4, r0
    3130:	af08      	add	r7, sp, #32
    3132:	62b8      	str	r0, [r7, #40]	; 0x28
    3134:	f003 ff04 	bl	6f40 <z_timer_cycle_get_32>
	struct lll_conn *lll = (void *)HDR_ULL2LLL(done->param);
    3138:	69e2      	ldr	r2, [r4, #28]
    313a:	62fa      	str	r2, [r7, #44]	; 0x2c
	if (lll->handle == 0xFFFF) {
    313c:	8b93      	ldrh	r3, [r2, #28]
    313e:	65bb      	str	r3, [r7, #88]	; 0x58
    3140:	4619      	mov	r1, r3
    3142:	f64f 73ff 	movw	r3, #65535	; 0xffff
    3146:	4299      	cmp	r1, r3
    3148:	f000 8428 	beq.w	399c <ull_conn_done+0x874>
	if((done->extra.crc_valid)){
    314c:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
	struct ll_conn *conn = (void *)HDR_LLL2EVT(lll);
    3150:	68d2      	ldr	r2, [r2, #12]
    3152:	663a      	str	r2, [r7, #96]	; 0x60
	if((done->extra.crc_valid)){
    3154:	2b00      	cmp	r3, #0
    3156:	f040 8692 	bne.w	3e7e <ull_conn_done+0xd56>
		BLEX_cnt2 ++;
    315a:	4c6e      	ldr	r4, [pc, #440]	; (3314 <ull_conn_done+0x1ec>)
		stop_cycle[conn_handle] = 0 ;
    315c:	6dbd      	ldr	r5, [r7, #88]	; 0x58
    315e:	496e      	ldr	r1, [pc, #440]	; (3318 <ull_conn_done+0x1f0>)
		BLEX_cnt2 ++;
    3160:	6823      	ldr	r3, [r4, #0]
		stop_cycle[conn_handle] = 0 ;
    3162:	2000      	movs	r0, #0
    3164:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
    3168:	e9c1 0000 	strd	r0, r0, [r1]
		BLEX_cnt2 ++;
    316c:	3301      	adds	r3, #1
    316e:	6023      	str	r3, [r4, #0]
		stop_cycle[conn_handle] = 0 ;
    3170:	4602      	mov	r2, r0
    3172:	00ec      	lsls	r4, r5, #3
	delta[conn_handle] = stop_cycle[conn_handle]-start_cycle[conn_handle];
    3174:	4b69      	ldr	r3, [pc, #420]	; (331c <ull_conn_done+0x1f4>)
    3176:	4d6a      	ldr	r5, [pc, #424]	; (3320 <ull_conn_done+0x1f8>)
	delta_ms[conn_handle] = (uint32_t)k_cyc_to_ns_floor64(delta[conn_handle])/NSEC_PER_USEC/USEC_PER_MSEC;
    3178:	4e6a      	ldr	r6, [pc, #424]	; (3324 <ull_conn_done+0x1fc>)
	delta[conn_handle] = stop_cycle[conn_handle]-start_cycle[conn_handle];
    317a:	4423      	add	r3, r4
    317c:	e9d3 1c00 	ldrd	r1, ip, [r3]
    3180:	1a43      	subs	r3, r0, r1
    3182:	fba3 8905 	umull	r8, r9, r3, r5
    3186:	eb62 020c 	sbc.w	r2, r2, ip
    318a:	fb05 9902 	mla	r9, r5, r2, r9
    318e:	ea4f 30d8 	mov.w	r0, r8, lsr #15
    3192:	f8df c1cc 	ldr.w	ip, [pc, #460]	; 3360 <ull_conn_done+0x238>
	delta_ms[conn_handle] = (uint32_t)k_cyc_to_ns_floor64(delta[conn_handle])/NSEC_PER_USEC/USEC_PER_MSEC;
    3196:	4d64      	ldr	r5, [pc, #400]	; (3328 <ull_conn_done+0x200>)
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    3198:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 3364 <ull_conn_done+0x23c>
    319c:	ea40 4049 	orr.w	r0, r0, r9, lsl #17
	delta_ms[conn_handle] = (uint32_t)k_cyc_to_ns_floor64(delta[conn_handle])/NSEC_PER_USEC/USEC_PER_MSEC;
    31a0:	fba6 0100 	umull	r0, r1, r6, r0
	conn_int_table[conn_handle] = conn->lll.interval;
    31a4:	4e61      	ldr	r6, [pc, #388]	; (332c <ull_conn_done+0x204>)
    31a6:	6e38      	ldr	r0, [r7, #96]	; 0x60
    31a8:	667e      	str	r6, [r7, #100]	; 0x64
	delta[conn_handle] = stop_cycle[conn_handle]-start_cycle[conn_handle];
    31aa:	4464      	add	r4, ip
	conn_int_table[conn_handle] = conn->lll.interval;
    31ac:	f8b0 e02e 	ldrh.w	lr, [r0, #46]	; 0x2e
    31b0:	485f      	ldr	r0, [pc, #380]	; (3330 <ull_conn_done+0x208>)
    31b2:	61f8      	str	r0, [r7, #28]
    31b4:	46b4      	mov	ip, r6
	delta[conn_handle] = stop_cycle[conn_handle]-start_cycle[conn_handle];
    31b6:	e9c4 3200 	strd	r3, r2, [r4]
	conn_int_table[conn_handle] = conn->lll.interval;
    31ba:	6dbe      	ldr	r6, [r7, #88]	; 0x58
	delta_ms[conn_handle] = (uint32_t)k_cyc_to_ns_floor64(delta[conn_handle])/NSEC_PER_USEC/USEC_PER_MSEC;
    31bc:	0c89      	lsrs	r1, r1, #18
    31be:	f845 1026 	str.w	r1, [r5, r6, lsl #2]
	conn_int_table[conn_handle] = conn->lll.interval;
    31c2:	f84c e026 	str.w	lr, [ip, r6, lsl #2]
	delta_ms[conn_handle] = (uint32_t)k_cyc_to_ns_floor64(delta[conn_handle])/NSEC_PER_USEC/USEC_PER_MSEC;
    31c6:	4605      	mov	r5, r0
		for(disconnected_handle = 0; disconnected_handle < CONFIG_BT_MAX_CONN; disconnected_handle++){
    31c8:	2600      	movs	r6, #0
			if(scheduled_handles[disconnected_handle] && !ll_connected_get(disconnected_handle)){
    31ca:	f815 4b01 	ldrb.w	r4, [r5], #1
    31ce:	2c00      	cmp	r4, #0
    31d0:	f040 83e8 	bne.w	39a4 <ull_conn_done+0x87c>
		for(disconnected_handle = 0; disconnected_handle < CONFIG_BT_MAX_CONN; disconnected_handle++){
    31d4:	3601      	adds	r6, #1
    31d6:	2e04      	cmp	r6, #4
    31d8:	d1f7      	bne.n	31ca <ull_conn_done+0xa2>
    31da:	4b56      	ldr	r3, [pc, #344]	; (3334 <ull_conn_done+0x20c>)
    31dc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		bool disconnected = false;
    31e0:	2400      	movs	r4, #0
		max_conn_int = conn_int_table[0];
    31e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    31e4:	4954      	ldr	r1, [pc, #336]	; (3338 <ull_conn_done+0x210>)
    31e6:	f8d3 c000 	ldr.w	ip, [r3]
		int old_max_conn_int = max_conn_int;
    31ea:	4b54      	ldr	r3, [pc, #336]	; (333c <ull_conn_done+0x214>)
    31ec:	681a      	ldr	r2, [r3, #0]
    31ee:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
		int old_max_conn_index = max_conn_index;
    31f2:	4a53      	ldr	r2, [pc, #332]	; (3340 <ull_conn_done+0x218>)
		max_conn_int = conn_int_table[0];
    31f4:	f8c3 c000 	str.w	ip, [r3]
		int old_max_conn_index = max_conn_index;
    31f8:	6810      	ldr	r0, [r2, #0]
    31fa:	6478      	str	r0, [r7, #68]	; 0x44
		max_conn_index = 0;
    31fc:	2300      	movs	r3, #0
    31fe:	461d      	mov	r5, r3
    3200:	6013      	str	r3, [r2, #0]
    3202:	469e      	mov	lr, r3
    3204:	46e1      	mov	r9, ip
		for(int j = 1; j <CONFIG_BT_MAX_CONN; j ++)
    3206:	2301      	movs	r3, #1
			if(conn_int_table[j] > max_conn_int && 2048%conn_int_table[j] == 0 ){
    3208:	f44f 6800 	mov.w	r8, #2048	; 0x800
    320c:	f851 2b04 	ldr.w	r2, [r1], #4
    3210:	454a      	cmp	r2, r9
    3212:	d90a      	bls.n	322a <ull_conn_done+0x102>
    3214:	fbb8 f0f2 	udiv	r0, r8, r2
    3218:	fb02 f000 	mul.w	r0, r2, r0
    321c:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    3220:	d103      	bne.n	322a <ull_conn_done+0x102>
				max_conn_int = conn_int_table[j];
    3222:	4691      	mov	r9, r2
				max_conn_index = j;
    3224:	461d      	mov	r5, r3
				max_conn_int = conn_int_table[j];
    3226:	f04f 0e01 	mov.w	lr, #1
		for(int j = 1; j <CONFIG_BT_MAX_CONN; j ++)
    322a:	3301      	adds	r3, #1
    322c:	2b04      	cmp	r3, #4
    322e:	d1ed      	bne.n	320c <ull_conn_done+0xe4>
    3230:	f1be 0f00 	cmp.w	lr, #0
    3234:	f000 861c 	beq.w	3e70 <ull_conn_done+0xd48>
		if(max_conn_int != 0)
    3238:	4b40      	ldr	r3, [pc, #256]	; (333c <ull_conn_done+0x214>)
    323a:	f8c3 9000 	str.w	r9, [r3]
    323e:	4b40      	ldr	r3, [pc, #256]	; (3340 <ull_conn_done+0x218>)
    3240:	601d      	str	r5, [r3, #0]
    3242:	f1b9 0f00 	cmp.w	r9, #0
    3246:	d00d      	beq.n	3264 <ull_conn_done+0x13c>
			M_num = 4000/max_conn_int/1.25;
    3248:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
    324c:	fb90 f0f9 	sdiv	r0, r0, r9
    3250:	f7fd f8a8 	bl	3a4 <__aeabi_i2d>
    3254:	4b3b      	ldr	r3, [pc, #236]	; (3344 <ull_conn_done+0x21c>)
    3256:	4d3c      	ldr	r5, [pc, #240]	; (3348 <ull_conn_done+0x220>)
    3258:	2200      	movs	r2, #0
    325a:	f7fd fa37 	bl	6cc <__aeabi_ddiv>
    325e:	f7fd fbcd 	bl	9fc <__aeabi_d2uiz>
    3262:	6028      	str	r0, [r5, #0]
		if(disconnected && scheduled_handle_cnt != 0){	
    3264:	2c00      	cmp	r4, #0
    3266:	f000 80ef 	beq.w	3448 <ull_conn_done+0x320>
    326a:	4b38      	ldr	r3, [pc, #224]	; (334c <ull_conn_done+0x224>)
    326c:	681b      	ldr	r3, [r3, #0]
    326e:	2b00      	cmp	r3, #0
    3270:	f000 80ea 	beq.w	3448 <ull_conn_done+0x320>
    3274:	4c36      	ldr	r4, [pc, #216]	; (3350 <ull_conn_done+0x228>)
    3276:	492d      	ldr	r1, [pc, #180]	; (332c <ull_conn_done+0x204>)
    3278:	1f22      	subs	r2, r4, #4
			int new_table_size = 0;
    327a:	2300      	movs	r3, #0
				if(scheduled_handles[i] == true){
    327c:	f812 0b01 	ldrb.w	r0, [r2], #1
    3280:	b118      	cbz	r0, 328a <ull_conn_done+0x162>
					new_table_size += max_conn_int/conn_int_table[i];
    3282:	6808      	ldr	r0, [r1, #0]
    3284:	fbb9 f0f0 	udiv	r0, r9, r0
    3288:	4403      	add	r3, r0
			for(int i = 0; i < CONFIG_BT_MAX_CONN; i ++){
    328a:	42a2      	cmp	r2, r4
    328c:	f101 0104 	add.w	r1, r1, #4
    3290:	d1f4      	bne.n	327c <ull_conn_done+0x154>
			new_table_size *= 2;
    3292:	005b      	lsls	r3, r3, #1
			for(; new_table_size > temp_table_size; temp_table_size *=2);
    3294:	2b01      	cmp	r3, #1
			int temp_table_size = 1;
    3296:	f04f 0b01 	mov.w	fp, #1
			for(; new_table_size > temp_table_size; temp_table_size *=2);
    329a:	dd03      	ble.n	32a4 <ull_conn_done+0x17c>
    329c:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
    32a0:	455b      	cmp	r3, fp
    32a2:	dcfb      	bgt.n	329c <ull_conn_done+0x174>
			for(int i =0; i < table_size; i ++){
    32a4:	4b2b      	ldr	r3, [pc, #172]	; (3354 <ull_conn_done+0x22c>)
    32a6:	627b      	str	r3, [r7, #36]	; 0x24
    32a8:	681c      	ldr	r4, [r3, #0]
    32aa:	2c00      	cmp	r4, #0
    32ac:	dd0c      	ble.n	32c8 <ull_conn_done+0x1a0>
    32ae:	4b2a      	ldr	r3, [pc, #168]	; (3358 <ull_conn_done+0x230>)
					array0[i] =-1;
    32b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    32b4:	eb03 0184 	add.w	r1, r3, r4, lsl #2
				if(array0[i] == disconnected_handle){
    32b8:	f853 2b04 	ldr.w	r2, [r3], #4
    32bc:	42b2      	cmp	r2, r6
					array0[i] =-1;
    32be:	bf08      	it	eq
    32c0:	f843 0c04 	streq.w	r0, [r3, #-4]
			for(int i =0; i < table_size; i ++){
    32c4:	4299      	cmp	r1, r3
    32c6:	d1f7      	bne.n	32b8 <ull_conn_done+0x190>
			for(int i = 1; i < table_size/new_table_size; i*=2) scale_factor ++;
    32c8:	fb94 f2fb 	sdiv	r2, r4, fp
    32cc:	2a01      	cmp	r2, #1
    32ce:	bfc8      	it	gt
    32d0:	2301      	movgt	r3, #1
    32d2:	dd02      	ble.n	32da <ull_conn_done+0x1b2>
    32d4:	005b      	lsls	r3, r3, #1
    32d6:	4293      	cmp	r3, r2
    32d8:	dbfc      	blt.n	32d4 <ull_conn_done+0x1ac>
			if(disconnected_handle == first_handle){
    32da:	4b20      	ldr	r3, [pc, #128]	; (335c <ull_conn_done+0x234>)
    32dc:	66fb      	str	r3, [r7, #108]	; 0x6c
    32de:	681d      	ldr	r5, [r3, #0]
    32e0:	42b5      	cmp	r5, r6
    32e2:	f000 8749 	beq.w	4178 <ull_conn_done+0x1050>
			int old_old_repeated_size = old_max_conn_int/conn_int_table[first_handle];
    32e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    32e8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
    32ec:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    32f0:	fbb2 fef3 	udiv	lr, r2, r3
			for (int i = 0; i <old_old_repeated_size ; i ++){
    32f4:	f1be 0f00 	cmp.w	lr, #0
			int old_old_repeated_size = old_max_conn_int/conn_int_table[first_handle];
    32f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			for (int i = 0; i <old_old_repeated_size ; i ++){
    32fc:	dd65      	ble.n	33ca <ull_conn_done+0x2a2>
				for(int j =1 ; j<table_size/old_old_repeated_size;j ++){
    32fe:	fb94 f1fe 	sdiv	r1, r4, lr
    3302:	f04f 0c00 	mov.w	ip, #0
							array0[(i+1)*table_size/old_old_repeated_size-1] = -1;
    3306:	e9c7 b91d 	strd	fp, r9, [r7, #116]	; 0x74
    330a:	4813      	ldr	r0, [pc, #76]	; (3358 <ull_conn_done+0x230>)
    330c:	46e1      	mov	r9, ip
    330e:	46a2      	mov	sl, r4
    3310:	e042      	b.n	3398 <ull_conn_done+0x270>
    3312:	bf00      	nop
    3314:	200004ac 	.word	0x200004ac
    3318:	20001af8 	.word	0x20001af8
    331c:	20001ad8 	.word	0x20001ad8
    3320:	3b9aca00 	.word	0x3b9aca00
    3324:	431bde83 	.word	0x431bde83
    3328:	200075a8 	.word	0x200075a8
    332c:	20005f24 	.word	0x20005f24
    3330:	2000831c 	.word	0x2000831c
    3334:	200075bc 	.word	0x200075bc
    3338:	20005f28 	.word	0x20005f28
    333c:	200075d8 	.word	0x200075d8
    3340:	200075d4 	.word	0x200075d4
    3344:	3ff40000 	.word	0x3ff40000
    3348:	200004b0 	.word	0x200004b0
    334c:	20008318 	.word	0x20008318
    3350:	20008320 	.word	0x20008320
    3354:	20008320 	.word	0x20008320
    3358:	20003f00 	.word	0x20003f00
    335c:	200075b8 	.word	0x200075b8
    3360:	20001ab8 	.word	0x20001ab8
    3364:	20006f24 	.word	0x20006f24
					else if(array0[i*table_size/old_old_repeated_size+j-1] >CONFIG_BT_MAX_CONN && array0[i*table_size/old_old_repeated_size+j] > CONFIG_BT_MAX_CONN){
    3368:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
    336c:	f102 0801 	add.w	r8, r2, #1
    3370:	f850 b02b 	ldr.w	fp, [r0, fp, lsl #2]
    3374:	f1bb 0f04 	cmp.w	fp, #4
    3378:	f240 85e2 	bls.w	3f40 <ull_conn_done+0xe18>
    337c:	2c04      	cmp	r4, #4
    337e:	f240 85df 	bls.w	3f40 <ull_conn_done+0xe18>
						if(array0[i*table_size/old_old_repeated_size+j+1] < CONFIG_BT_MAX_CONN && j+1 != table_size/old_old_repeated_size){
    3382:	1c5c      	adds	r4, r3, #1
    3384:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
    3388:	2c03      	cmp	r4, #3
    338a:	f200 85d9 	bhi.w	3f40 <ull_conn_done+0xe18>
    338e:	4541      	cmp	r1, r8
    3390:	f040 85d9 	bne.w	3f46 <ull_conn_done+0xe1e>
			for (int i = 0; i <old_old_repeated_size ; i ++){
    3394:	45ce      	cmp	lr, r9
    3396:	d015      	beq.n	33c4 <ull_conn_done+0x29c>
				array0[i*table_size/old_old_repeated_size] = array0[0];
    3398:	fb9c f6fe 	sdiv	r6, ip, lr
    339c:	6803      	ldr	r3, [r0, #0]
    339e:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
				for(int j =1 ; j<table_size/old_old_repeated_size;j ++){
    33a2:	2901      	cmp	r1, #1
    33a4:	f109 0901 	add.w	r9, r9, #1
    33a8:	44d4      	add	ip, sl
    33aa:	bfc8      	it	gt
    33ac:	2201      	movgt	r2, #1
    33ae:	ddf1      	ble.n	3394 <ull_conn_done+0x26c>
					if(array0[i*table_size/old_old_repeated_size+j] == first_handle) 
    33b0:	18b3      	adds	r3, r6, r2
    33b2:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
    33b6:	42ac      	cmp	r4, r5
    33b8:	d1d6      	bne.n	3368 <ull_conn_done+0x240>
    33ba:	1c4a      	adds	r2, r1, #1
				for(int j =1 ; j<table_size/old_old_repeated_size;j ++){
    33bc:	4291      	cmp	r1, r2
    33be:	dcf7      	bgt.n	33b0 <ull_conn_done+0x288>
			for (int i = 0; i <old_old_repeated_size ; i ++){
    33c0:	45ce      	cmp	lr, r9
    33c2:	d1e9      	bne.n	3398 <ull_conn_done+0x270>
    33c4:	e9d7 b91d 	ldrd	fp, r9, [r7, #116]	; 0x74
    33c8:	4654      	mov	r4, sl
			for (int i = 0; i <max_conn_int/conn_int_table[first_handle]; i ++){
    33ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    33ce:	fbb9 f6f3 	udiv	r6, r9, r3
    33d2:	454b      	cmp	r3, r9
    33d4:	bf88      	it	hi
    33d6:	2600      	movhi	r6, #0
    33d8:	d821      	bhi.n	341e <ull_conn_done+0x2f6>
				for(int j = 0; j < new_table_size/(max_conn_int/conn_int_table[first_handle]); j ++){
    33da:	fbbb f5f6 	udiv	r5, fp, r6
    33de:	f04f 0c00 	mov.w	ip, #0
    33e2:	f8df a2b4 	ldr.w	sl, [pc, #692]	; 3698 <ull_conn_done+0x570>
    33e6:	46e1      	mov	r9, ip
			for (int i = 0; i <max_conn_int/conn_int_table[first_handle]; i ++){
    33e8:	46e0      	mov	r8, ip
				for(int j = 0; j < new_table_size/(max_conn_int/conn_int_table[first_handle]); j ++){
    33ea:	455e      	cmp	r6, fp
				int point = i*new_table_size/(max_conn_int/conn_int_table[first_handle]);
    33ec:	fbb9 f2f6 	udiv	r2, r9, r6
				for(int j = 0; j < new_table_size/(max_conn_int/conn_int_table[first_handle]); j ++){
    33f0:	d80f      	bhi.n	3412 <ull_conn_done+0x2ea>
					array0[j+point] = array0[j+i*table_size/(old_max_conn_int/conn_int_table[first_handle])]; 
    33f2:	fbbc f1fe 	udiv	r1, ip, lr
    33f6:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
    33fa:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
    33fe:	3a04      	subs	r2, #4
    3400:	3904      	subs	r1, #4
				for(int j = 0; j < new_table_size/(max_conn_int/conn_int_table[first_handle]); j ++){
    3402:	2300      	movs	r3, #0
    3404:	3301      	adds	r3, #1
					array0[j+point] = array0[j+i*table_size/(old_max_conn_int/conn_int_table[first_handle])]; 
    3406:	f851 0f04 	ldr.w	r0, [r1, #4]!
    340a:	f842 0f04 	str.w	r0, [r2, #4]!
				for(int j = 0; j < new_table_size/(max_conn_int/conn_int_table[first_handle]); j ++){
    340e:	42ab      	cmp	r3, r5
    3410:	d3f8      	bcc.n	3404 <ull_conn_done+0x2dc>
			for (int i = 0; i <max_conn_int/conn_int_table[first_handle]; i ++){
    3412:	f108 0801 	add.w	r8, r8, #1
    3416:	45b0      	cmp	r8, r6
    3418:	44d9      	add	r9, fp
    341a:	44a4      	add	ip, r4
    341c:	d3e5      	bcc.n	33ea <ull_conn_done+0x2c2>
			for(int i = new_table_size; i<table_size; i ++) array0[i] = -1;
    341e:	45a3      	cmp	fp, r4
    3420:	da0d      	bge.n	343e <ull_conn_done+0x316>
    3422:	499d      	ldr	r1, [pc, #628]	; (3698 <ull_conn_done+0x570>)
    3424:	ea4f 038b 	mov.w	r3, fp, lsl #2
    3428:	1f0a      	subs	r2, r1, #4
    342a:	3b04      	subs	r3, #4
    342c:	eb02 0484 	add.w	r4, r2, r4, lsl #2
    3430:	440b      	add	r3, r1
    3432:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3436:	f843 2f04 	str.w	r2, [r3, #4]!
    343a:	429c      	cmp	r4, r3
    343c:	d1fb      	bne.n	3436 <ull_conn_done+0x30e>
			repeated_size = max_conn_int/conn_int_table[first_handle];
    343e:	4b97      	ldr	r3, [pc, #604]	; (369c <ull_conn_done+0x574>)
			table_size = new_table_size;
    3440:	6a7a      	ldr	r2, [r7, #36]	; 0x24
			repeated_size = max_conn_int/conn_int_table[first_handle];
    3442:	601e      	str	r6, [r3, #0]
			table_size = new_table_size;
    3444:	f8c2 b000 	str.w	fp, [r2]
		if(!scheduled_handles[conn_handle] && handle_cnt[conn_handle] > 0 && 2048%(conn->lll.interval) == 0){
    3448:	4995      	ldr	r1, [pc, #596]	; (36a0 <ull_conn_done+0x578>)
    344a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    344c:	5cc9      	ldrb	r1, [r1, r3]
    344e:	2900      	cmp	r1, #0
    3450:	f040 821b 	bne.w	388a <ull_conn_done+0x762>
    3454:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
    3458:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    345c:	2b00      	cmp	r3, #0
    345e:	f000 8214 	beq.w	388a <ull_conn_done+0x762>
    3462:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3464:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    3466:	f44f 6200 	mov.w	r2, #2048	; 0x800
    346a:	fbb2 f2f3 	udiv	r2, r2, r3
    346e:	fb03 f302 	mul.w	r3, r3, r2
    3472:	f5d3 6300 	rsbs	r3, r3, #2048	; 0x800
    3476:	623b      	str	r3, [r7, #32]
    3478:	f040 85bb 	bne.w	3ff2 <ull_conn_done+0xeca>
				temp_anchor_points[i] = anchor_points[i];
    347c:	4989      	ldr	r1, [pc, #548]	; (36a4 <ull_conn_done+0x57c>)
    347e:	4b8a      	ldr	r3, [pc, #552]	; (36a8 <ull_conn_done+0x580>)
    3480:	680a      	ldr	r2, [r1, #0]
			if(scheduled_handle_cnt == 0) first_handle = conn_handle;
    3482:	488a      	ldr	r0, [pc, #552]	; (36ac <ull_conn_done+0x584>)
				temp_anchor_points[i] = anchor_points[i];
    3484:	601a      	str	r2, [r3, #0]
    3486:	684a      	ldr	r2, [r1, #4]
    3488:	605a      	str	r2, [r3, #4]
			if(scheduled_handle_cnt == 0) first_handle = conn_handle;
    348a:	6806      	ldr	r6, [r0, #0]
				temp_anchor_points[i] = anchor_points[i];
    348c:	688a      	ldr	r2, [r1, #8]
    348e:	609a      	str	r2, [r3, #8]
    3490:	68ca      	ldr	r2, [r1, #12]
    3492:	60da      	str	r2, [r3, #12]
    3494:	6179      	str	r1, [r7, #20]
			if(scheduled_handle_cnt == 0) first_handle = conn_handle;
    3496:	4b86      	ldr	r3, [pc, #536]	; (36b0 <ull_conn_done+0x588>)
    3498:	2e00      	cmp	r6, #0
    349a:	f001 8122 	beq.w	46e2 <ull_conn_done+0x15ba>
    349e:	681a      	ldr	r2, [r3, #0]
			repeated_size = max_conn_int/conn_int_table[first_handle];
    34a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
			old_repeated_size = repeated_size;
    34a2:	f8df 81f8 	ldr.w	r8, [pc, #504]	; 369c <ull_conn_done+0x574>
			old_table_size = table_size;	
    34a6:	4d83      	ldr	r5, [pc, #524]	; (36b4 <ull_conn_done+0x58c>)
    34a8:	4c83      	ldr	r4, [pc, #524]	; (36b8 <ull_conn_done+0x590>)
			repeated_size = max_conn_int/conn_int_table[first_handle];
    34aa:	f853 c022 	ldr.w	ip, [r3, r2, lsl #2]
    34ae:	667c      	str	r4, [r7, #100]	; 0x64
			old_repeated_size = repeated_size;
    34b0:	4b82      	ldr	r3, [pc, #520]	; (36bc <ull_conn_done+0x594>)
    34b2:	4c83      	ldr	r4, [pc, #524]	; (36c0 <ull_conn_done+0x598>)
    34b4:	f8d8 2000 	ldr.w	r2, [r8]
			old_table_size = table_size;	
    34b8:	627d      	str	r5, [r7, #36]	; 0x24
    34ba:	682d      	ldr	r5, [r5, #0]
    34bc:	64bd      	str	r5, [r7, #72]	; 0x48
			old_repeated_size = repeated_size;
    34be:	601a      	str	r2, [r3, #0]
			scheduled_handles[conn_handle] = true;
    34c0:	6dbd      	ldr	r5, [r7, #88]	; 0x58
			old_table_size = table_size;	
    34c2:	4980      	ldr	r1, [pc, #512]	; (36c4 <ull_conn_done+0x59c>)
			need_update_dummy = false;
    34c4:	f8df e20c 	ldr.w	lr, [pc, #524]	; 36d4 <ull_conn_done+0x5ac>
			old_repeated_size = repeated_size;
    34c8:	66fa      	str	r2, [r7, #108]	; 0x6c
			scheduled_handles[conn_handle] = true;
    34ca:	1f23      	subs	r3, r4, #4
			scheduled_handle_cnt ++;
    34cc:	3601      	adds	r6, #1
    34ce:	6006      	str	r6, [r0, #0]
			scheduled_handles[conn_handle] = true;
    34d0:	2001      	movs	r0, #1
    34d2:	5558      	strb	r0, [r3, r5]
			repeated_size = max_conn_int/conn_int_table[first_handle];
    34d4:	487c      	ldr	r0, [pc, #496]	; (36c8 <ull_conn_done+0x5a0>)
			old_table_size = table_size;	
    34d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
			repeated_size = max_conn_int/conn_int_table[first_handle];
    34d8:	6800      	ldr	r0, [r0, #0]
			old_table_size = table_size;	
    34da:	600b      	str	r3, [r1, #0]
			need_update_dummy = false;
    34dc:	2200      	movs	r2, #0
    34de:	4976      	ldr	r1, [pc, #472]	; (36b8 <ull_conn_done+0x590>)
			repeated_size = max_conn_int/conn_int_table[first_handle];
    34e0:	fbb0 f3fc 	udiv	r3, r0, ip
			scheduled_handles[conn_handle] = true;
    34e4:	4615      	mov	r5, r2
			repeated_size = max_conn_int/conn_int_table[first_handle];
    34e6:	63bb      	str	r3, [r7, #56]	; 0x38
			need_update_dummy = false;
    34e8:	f88e 2000 	strb.w	r2, [lr]
			repeated_size = max_conn_int/conn_int_table[first_handle];
    34ec:	f8c8 3000 	str.w	r3, [r8]
    34f0:	60b8      	str	r0, [r7, #8]
			scheduled_handles[conn_handle] = true;
    34f2:	4613      	mov	r3, r2
    34f4:	4684      	mov	ip, r0
    34f6:	1f22      	subs	r2, r4, #4
				if(scheduled_handles[i] == true){
    34f8:	f812 0b01 	ldrb.w	r0, [r2], #1
    34fc:	b120      	cbz	r0, 3508 <ull_conn_done+0x3e0>
					table_size += max_conn_int/conn_int_table[i];
    34fe:	4605      	mov	r5, r0
    3500:	6808      	ldr	r0, [r1, #0]
    3502:	fbbc f0f0 	udiv	r0, ip, r0
    3506:	4403      	add	r3, r0
			for(int i = 0; i < CONFIG_BT_MAX_CONN; i ++){
    3508:	4294      	cmp	r4, r2
    350a:	f101 0104 	add.w	r1, r1, #4
    350e:	d1f3      	bne.n	34f8 <ull_conn_done+0x3d0>
    3510:	2d00      	cmp	r5, #0
    3512:	f001 8258 	beq.w	49c6 <ull_conn_done+0x189e>
    3516:	005b      	lsls	r3, r3, #1
			for(; table_size > temp_table_size; temp_table_size *=2);
    3518:	2b01      	cmp	r3, #1
    351a:	f341 8254 	ble.w	49c6 <ull_conn_done+0x189e>
			int temp_table_size = 1;
    351e:	2201      	movs	r2, #1
			for(; table_size > temp_table_size; temp_table_size *=2);
    3520:	0052      	lsls	r2, r2, #1
    3522:	429a      	cmp	r2, r3
    3524:	dbfc      	blt.n	3520 <ull_conn_done+0x3f8>
			table_size = temp_table_size;
    3526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3528:	653a      	str	r2, [r7, #80]	; 0x50
			if(scheduled_handle_cnt == 1){
    352a:	2e01      	cmp	r6, #1
			table_size = temp_table_size;
    352c:	4615      	mov	r5, r2
    352e:	601a      	str	r2, [r3, #0]
			if(scheduled_handle_cnt == 1){
    3530:	f001 8235 	beq.w	499e <ull_conn_done+0x1876>
				int temp_array[table_size], temp_temp_array[table_size];
    3534:	0092      	lsls	r2, r2, #2
    3536:	3207      	adds	r2, #7
    3538:	f022 0207 	bic.w	r2, r2, #7
			else{
    353c:	f8c7 d004 	str.w	sp, [r7, #4]
				int temp_array[table_size], temp_temp_array[table_size];
    3540:	ebad 0d02 	sub.w	sp, sp, r2
    3544:	a808      	add	r0, sp, #32
    3546:	4e61      	ldr	r6, [pc, #388]	; (36cc <ull_conn_done+0x5a4>)
    3548:	4953      	ldr	r1, [pc, #332]	; (3698 <ull_conn_done+0x570>)
    354a:	63fe      	str	r6, [r7, #60]	; 0x3c
    354c:	ebad 0d02 	sub.w	sp, sp, r2
    3550:	aa08      	add	r2, sp, #32
				for( int i = 0; i < table_size; i ++){
    3552:	2300      	movs	r3, #0
				int temp_array[table_size], temp_temp_array[table_size];
    3554:	6378      	str	r0, [r7, #52]	; 0x34
    3556:	633a      	str	r2, [r7, #48]	; 0x30
				for( int i = 0; i < table_size; i ++){
    3558:	1f04      	subs	r4, r0, #4
    355a:	4632      	mov	r2, r6
    355c:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
    3560:	a807      	add	r0, sp, #28
					array1[i] = 0;
    3562:	461e      	mov	r6, r3
					array0[i] = -1;
    3564:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
    3568:	46ac      	mov	ip, r5
					temp_array[i] = array0[i];
    356a:	680d      	ldr	r5, [r1, #0]
    356c:	f844 5f04 	str.w	r5, [r4, #4]!
				for( int i = 0; i < table_size; i ++){
    3570:	3301      	adds	r3, #1
					temp_temp_array[i] = array1[i];
    3572:	6815      	ldr	r5, [r2, #0]
					array0[i] = -1;
    3574:	f841 eb04 	str.w	lr, [r1], #4
				for( int i = 0; i < table_size; i ++){
    3578:	4563      	cmp	r3, ip
					temp_temp_array[i] = array1[i];
    357a:	f840 5f04 	str.w	r5, [r0, #4]!
					array1[i] = 0;
    357e:	f842 6b04 	str.w	r6, [r2], #4
				for( int i = 0; i < table_size; i ++){
    3582:	dbf2      	blt.n	356a <ull_conn_done+0x442>
				for(int k = 0; k < repeated_size/old_repeated_size; k ++)
    3584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3586:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    3588:	fb93 f3f2 	sdiv	r3, r3, r2
    358c:	2b00      	cmp	r3, #0
    358e:	613b      	str	r3, [r7, #16]
    3590:	dd7c      	ble.n	368c <ull_conn_done+0x564>
    3592:	2300      	movs	r3, #0
    3594:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    3596:	61bb      	str	r3, [r7, #24]
    3598:	643b      	str	r3, [r7, #64]	; 0x40
    359a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    359c:	fb03 f302 	mul.w	r3, r3, r2
    35a0:	60fb      	str	r3, [r7, #12]
					for(int j = 0; j <old_repeated_size; j ++)
    35a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    35a4:	2b00      	cmp	r3, #0
    35a6:	dd67      	ble.n	3678 <ull_conn_done+0x550>
						for(int i = 0; i < old_table_size/old_repeated_size; i ++){
    35a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
    35aa:	fb92 f3f3 	sdiv	r3, r2, r3
    35ae:	66bb      	str	r3, [r7, #104]	; 0x68
					for(int j = 0; j <old_repeated_size; j ++)
    35b0:	2300      	movs	r3, #0
							array0[i+j*table_size/repeated_size+k*table_size*old_repeated_size/repeated_size] = temp_array[i+j*old_table_size/old_repeated_size];
    35b2:	e9c7 331d 	strd	r3, r3, [r7, #116]	; 0x74
					for(int j = 0; j <old_repeated_size; j ++)
    35b6:	673b      	str	r3, [r7, #112]	; 0x70
						for(int i = 0; i < old_table_size/old_repeated_size; i ++){
    35b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    35ba:	2b00      	cmp	r3, #0
    35bc:	dd4e      	ble.n	365c <ull_conn_done+0x534>
							array0[i+j*table_size/repeated_size+k*table_size*old_repeated_size/repeated_size] = temp_array[i+j*old_table_size/old_repeated_size];
    35be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    35c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    35c2:	4619      	mov	r1, r3
    35c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    35c6:	fb91 f8f3 	sdiv	r8, r1, r3
    35ca:	fb92 f3f3 	sdiv	r3, r2, r3
    35ce:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    35d0:	4498      	add	r8, r3
    35d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    35d4:	fb93 f6f2 	sdiv	r6, r3, r2
							array1[i+j*table_size/repeated_size+k*table_size*old_repeated_size/repeated_size] = temp_temp_array[i+j*old_table_size/old_repeated_size]+i*conn_int_table[old_max_conn_index]*1.25;
    35d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    35da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    35dc:	ea4f 0888 	mov.w	r8, r8, lsl #2
    35e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    35e4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    35e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    35ec:	f1a8 0804 	sub.w	r8, r8, #4
    35f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    35f2:	eb02 0b08 	add.w	fp, r2, r8
    35f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    35f8:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
    35fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    35fe:	4490      	add	r8, r2
    3600:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    3602:	4433      	add	r3, r6
    3604:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3608:	f1aa 0a04 	sub.w	sl, sl, #4
    360c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    3610:	eb02 0686 	add.w	r6, r2, r6, lsl #2
    3614:	f04f 0900 	mov.w	r9, #0
							array0[i+j*table_size/repeated_size+k*table_size*old_repeated_size/repeated_size] = temp_array[i+j*old_table_size/old_repeated_size];
    3618:	f856 3b04 	ldr.w	r3, [r6], #4
    361c:	f84b 3f04 	str.w	r3, [fp, #4]!
							array1[i+j*table_size/repeated_size+k*table_size*old_repeated_size/repeated_size] = temp_temp_array[i+j*old_table_size/old_repeated_size]+i*conn_int_table[old_max_conn_index]*1.25;
    3620:	f85a 0f04 	ldr.w	r0, [sl, #4]!
    3624:	f7fc febe 	bl	3a4 <__aeabi_i2d>
    3628:	4604      	mov	r4, r0
    362a:	4648      	mov	r0, r9
    362c:	460d      	mov	r5, r1
    362e:	f7fc fea9 	bl	384 <__aeabi_ui2d>
    3632:	4b27      	ldr	r3, [pc, #156]	; (36d0 <ull_conn_done+0x5a8>)
    3634:	2200      	movs	r2, #0
    3636:	f7fc ff1f 	bl	478 <__aeabi_dmul>
    363a:	460b      	mov	r3, r1
    363c:	4602      	mov	r2, r0
    363e:	4629      	mov	r1, r5
    3640:	4620      	mov	r0, r4
    3642:	f7fc fd63 	bl	10c <__adddf3>
    3646:	f7fd f9d9 	bl	9fc <__aeabi_d2uiz>
    364a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
    364e:	f848 0f04 	str.w	r0, [r8, #4]!
						for(int i = 0; i < old_table_size/old_repeated_size; i ++){
    3652:	4499      	add	r9, r3
    3654:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
    3658:	429e      	cmp	r6, r3
    365a:	d1dd      	bne.n	3618 <ull_conn_done+0x4f0>
					for(int j = 0; j <old_repeated_size; j ++)
    365c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
    365e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    3660:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    3662:	440a      	add	r2, r1
    3664:	677a      	str	r2, [r7, #116]	; 0x74
    3666:	6d39      	ldr	r1, [r7, #80]	; 0x50
    3668:	6fba      	ldr	r2, [r7, #120]	; 0x78
    366a:	440a      	add	r2, r1
    366c:	67ba      	str	r2, [r7, #120]	; 0x78
    366e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    3670:	3301      	adds	r3, #1
    3672:	429a      	cmp	r2, r3
    3674:	673b      	str	r3, [r7, #112]	; 0x70
    3676:	d19f      	bne.n	35b8 <ull_conn_done+0x490>
				for(int k = 0; k < repeated_size/old_repeated_size; k ++)
    3678:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    367a:	68f9      	ldr	r1, [r7, #12]
    367c:	69bb      	ldr	r3, [r7, #24]
    367e:	440a      	add	r2, r1
    3680:	643a      	str	r2, [r7, #64]	; 0x40
    3682:	693a      	ldr	r2, [r7, #16]
    3684:	3301      	adds	r3, #1
    3686:	4293      	cmp	r3, r2
    3688:	61bb      	str	r3, [r7, #24]
    368a:	d18a      	bne.n	35a2 <ull_conn_done+0x47a>
    368c:	4b02      	ldr	r3, [pc, #8]	; (3698 <ull_conn_done+0x570>)
				int standard_anchor_point =0;
    368e:	6c79      	ldr	r1, [r7, #68]	; 0x44
    3690:	6d38      	ldr	r0, [r7, #80]	; 0x50
    3692:	f04f 0b00 	mov.w	fp, #0
    3696:	e024      	b.n	36e2 <ull_conn_done+0x5ba>
    3698:	20003f00 	.word	0x20003f00
    369c:	20008314 	.word	0x20008314
    36a0:	2000831c 	.word	0x2000831c
    36a4:	20003ef0 	.word	0x20003ef0
    36a8:	20008324 	.word	0x20008324
    36ac:	20008318 	.word	0x20008318
    36b0:	200075b8 	.word	0x200075b8
    36b4:	20008320 	.word	0x20008320
    36b8:	20005f24 	.word	0x20005f24
    36bc:	2000830c 	.word	0x2000830c
    36c0:	20008320 	.word	0x20008320
    36c4:	20008310 	.word	0x20008310
    36c8:	200075d8 	.word	0x200075d8
    36cc:	20004f00 	.word	0x20004f00
    36d0:	3ff40000 	.word	0x3ff40000
    36d4:	2000a863 	.word	0x2000a863
				for(; standard_anchor_point <table_size; standard_anchor_point ++)
    36d8:	f10b 0b01 	add.w	fp, fp, #1
    36dc:	4558      	cmp	r0, fp
    36de:	f001 8165 	beq.w	49ac <ull_conn_done+0x1884>
					if(old_max_conn_index ==array0[standard_anchor_point]) break;
    36e2:	f853 2b04 	ldr.w	r2, [r3], #4
    36e6:	428a      	cmp	r2, r1
    36e8:	d1f6      	bne.n	36d8 <ull_conn_done+0x5b0>
				uint32_t standard_point = array1[standard_anchor_point] = anchor_points[old_max_conn_index];
    36ea:	697b      	ldr	r3, [r7, #20]
    36ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    36ee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    36f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    36f4:	f841 302b 	str.w	r3, [r1, fp, lsl #2]
    36f8:	66fb      	str	r3, [r7, #108]	; 0x6c
    36fa:	4bbd      	ldr	r3, [pc, #756]	; (39f0 <ull_conn_done+0x8c8>)
    36fc:	673b      	str	r3, [r7, #112]	; 0x70
						for(int k = standard_anchor_point; k < standard_anchor_point +table_size && j <max_conn_int/conn_int_table[i]; k ++){
    36fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    3700:	4abc      	ldr	r2, [pc, #752]	; (39f4 <ull_conn_done+0x8cc>)
    3702:	617a      	str	r2, [r7, #20]
    3704:	445b      	add	r3, fp
    3706:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
				for(int i =0; i <CONFIG_BT_MAX_CONN; i ++){
    370a:	f04f 0a00 	mov.w	sl, #0
						for(int k = standard_anchor_point; k < standard_anchor_point +table_size && j <max_conn_int/conn_int_table[i]; k ++){
    370e:	67bb      	str	r3, [r7, #120]	; 0x78
								array1[k%table_size] = anchor_points[i] + conn_int_table[i]*1.25*j;
    3710:	f8c7 b048 	str.w	fp, [r7, #72]	; 0x48
					if(scheduled_handles[i] == true && i != old_max_conn_index){
    3714:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    3716:	f812 3b01 	ldrb.w	r3, [r2], #1
    371a:	673a      	str	r2, [r7, #112]	; 0x70
    371c:	2b00      	cmp	r3, #0
    371e:	f001 8001 	beq.w	4724 <ull_conn_done+0x15fc>
    3722:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3724:	4553      	cmp	r3, sl
    3726:	f000 87fd 	beq.w	4724 <ull_conn_done+0x15fc>
						while(anchor_points[i] + conn_int_table[i] < standard_point) anchor_points[i] += conn_int_table[i]*1.25;
    372a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
    372e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    3730:	681e      	ldr	r6, [r3, #0]
    3732:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    3734:	f853 b02a 	ldr.w	fp, [r3, sl, lsl #2]
    3738:	eb0b 0306 	add.w	r3, fp, r6
    373c:	429a      	cmp	r2, r3
    373e:	d91a      	bls.n	3776 <ull_conn_done+0x64e>
    3740:	4658      	mov	r0, fp
    3742:	f7fc fe1f 	bl	384 <__aeabi_ui2d>
    3746:	4bac      	ldr	r3, [pc, #688]	; (39f8 <ull_conn_done+0x8d0>)
    3748:	2200      	movs	r2, #0
    374a:	f7fc fe95 	bl	478 <__aeabi_dmul>
    374e:	4604      	mov	r4, r0
    3750:	4630      	mov	r0, r6
    3752:	6efe      	ldr	r6, [r7, #108]	; 0x6c
    3754:	460d      	mov	r5, r1
    3756:	f7fc fe15 	bl	384 <__aeabi_ui2d>
    375a:	462b      	mov	r3, r5
    375c:	4622      	mov	r2, r4
    375e:	f7fc fcd5 	bl	10c <__adddf3>
    3762:	f7fd f94b 	bl	9fc <__aeabi_d2uiz>
    3766:	eb00 030b 	add.w	r3, r0, fp
    376a:	429e      	cmp	r6, r3
    376c:	d8f3      	bhi.n	3756 <ull_conn_done+0x62e>
    376e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
    3772:	4606      	mov	r6, r0
    3774:	6018      	str	r0, [r3, #0]
						while(anchor_points[i] > standard_point + conn_int_table[i]) anchor_points[i] -= conn_int_table[i]*1.25;
    3776:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    3778:	eb03 080b 	add.w	r8, r3, fp
    377c:	45b0      	cmp	r8, r6
    377e:	d217      	bcs.n	37b0 <ull_conn_done+0x688>
    3780:	4658      	mov	r0, fp
    3782:	f7fc fdff 	bl	384 <__aeabi_ui2d>
    3786:	4b9c      	ldr	r3, [pc, #624]	; (39f8 <ull_conn_done+0x8d0>)
    3788:	2200      	movs	r2, #0
    378a:	f7fc fe75 	bl	478 <__aeabi_dmul>
    378e:	4604      	mov	r4, r0
    3790:	460d      	mov	r5, r1
    3792:	4630      	mov	r0, r6
    3794:	f7fc fdf6 	bl	384 <__aeabi_ui2d>
    3798:	4622      	mov	r2, r4
    379a:	462b      	mov	r3, r5
    379c:	f7fc fcb4 	bl	108 <__aeabi_dsub>
    37a0:	f7fd f92c 	bl	9fc <__aeabi_d2uiz>
    37a4:	4540      	cmp	r0, r8
    37a6:	d8f5      	bhi.n	3794 <ull_conn_done+0x66c>
    37a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
    37ac:	4606      	mov	r6, r0
    37ae:	6018      	str	r0, [r3, #0]
						if(anchor_points[i] < standard_point) anchor_points[i] += conn_int_table[i]*1.25;
    37b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    37b2:	42b3      	cmp	r3, r6
    37b4:	d916      	bls.n	37e4 <ull_conn_done+0x6bc>
    37b6:	4658      	mov	r0, fp
    37b8:	f7fc fde4 	bl	384 <__aeabi_ui2d>
    37bc:	4b8e      	ldr	r3, [pc, #568]	; (39f8 <ull_conn_done+0x8d0>)
    37be:	2200      	movs	r2, #0
    37c0:	f7fc fe5a 	bl	478 <__aeabi_dmul>
    37c4:	4604      	mov	r4, r0
    37c6:	4630      	mov	r0, r6
    37c8:	460d      	mov	r5, r1
    37ca:	f7fc fddb 	bl	384 <__aeabi_ui2d>
    37ce:	460b      	mov	r3, r1
    37d0:	4602      	mov	r2, r0
    37d2:	4629      	mov	r1, r5
    37d4:	4620      	mov	r0, r4
    37d6:	f7fc fc99 	bl	10c <__adddf3>
    37da:	f7fd f90f 	bl	9fc <__aeabi_d2uiz>
    37de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
    37e2:	6018      	str	r0, [r3, #0]
						for(int k = standard_anchor_point; k < standard_anchor_point +table_size && j <max_conn_int/conn_int_table[i]; k ++){
    37e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    37e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
    37e8:	4293      	cmp	r3, r2
    37ea:	f340 879b 	ble.w	4724 <ull_conn_done+0x15fc>
    37ee:	68bb      	ldr	r3, [r7, #8]
    37f0:	fbb3 f2fb 	udiv	r2, r3, fp
    37f4:	455b      	cmp	r3, fp
    37f6:	677a      	str	r2, [r7, #116]	; 0x74
    37f8:	f0c0 8794 	bcc.w	4724 <ull_conn_done+0x15fc>
    37fc:	f8c7 b068 	str.w	fp, [r7, #104]	; 0x68
    3800:	f8c7 a088 	str.w	sl, [r7, #136]	; 0x88
    3804:	6cbc      	ldr	r4, [r7, #72]	; 0x48
    3806:	f8d7 a050 	ldr.w	sl, [r7, #80]	; 0x50
    380a:	f8d7 b080 	ldr.w	fp, [r7, #128]	; 0x80
    380e:	2600      	movs	r6, #0
    3810:	e008      	b.n	3824 <ull_conn_done+0x6fc>
    3812:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    3814:	3401      	adds	r4, #1
    3816:	42a3      	cmp	r3, r4
    3818:	f000 8782 	beq.w	4720 <ull_conn_done+0x15f8>
    381c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    381e:	429e      	cmp	r6, r3
    3820:	f080 877e 	bcs.w	4720 <ull_conn_done+0x15f8>
							if(array0[k%table_size] == i){
    3824:	fbb4 f5fa 	udiv	r5, r4, sl
    3828:	fb0a 4515 	mls	r5, sl, r5, r4
    382c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
    3830:	f85b 3025 	ldr.w	r3, [fp, r5, lsl #2]
    3834:	4293      	cmp	r3, r2
    3836:	d1ec      	bne.n	3812 <ull_conn_done+0x6ea>
								array1[k%table_size] = anchor_points[i] + conn_int_table[i]*1.25*j;
    3838:	6eb8      	ldr	r0, [r7, #104]	; 0x68
    383a:	f7fc fda3 	bl	384 <__aeabi_ui2d>
    383e:	4b6e      	ldr	r3, [pc, #440]	; (39f8 <ull_conn_done+0x8d0>)
    3840:	2200      	movs	r2, #0
    3842:	f7fc fe19 	bl	478 <__aeabi_dmul>
    3846:	4680      	mov	r8, r0
    3848:	4630      	mov	r0, r6
    384a:	4689      	mov	r9, r1
    384c:	f7fc fdaa 	bl	3a4 <__aeabi_i2d>
    3850:	4602      	mov	r2, r0
    3852:	460b      	mov	r3, r1
    3854:	4640      	mov	r0, r8
    3856:	4649      	mov	r1, r9
    3858:	f7fc fe0e 	bl	478 <__aeabi_dmul>
    385c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
    3860:	4680      	mov	r8, r0
    3862:	6818      	ldr	r0, [r3, #0]
    3864:	4689      	mov	r9, r1
    3866:	f7fc fd8d 	bl	384 <__aeabi_ui2d>
    386a:	4602      	mov	r2, r0
    386c:	460b      	mov	r3, r1
    386e:	4640      	mov	r0, r8
    3870:	4649      	mov	r1, r9
    3872:	f7fc fc4b 	bl	10c <__adddf3>
    3876:	f7fd f8c1 	bl	9fc <__aeabi_d2uiz>
								if(k>=table_size) array1[k%table_size] = array1[k%table_size] - max_conn_int*1.25;
    387a:	45a2      	cmp	sl, r4
    387c:	f341 8077 	ble.w	496e <ull_conn_done+0x1846>
								array1[k%table_size] = anchor_points[i] + conn_int_table[i]*1.25*j;
    3880:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    3882:	f842 0025 	str.w	r0, [r2, r5, lsl #2]
								j++;
    3886:	3601      	adds	r6, #1
    3888:	e7c3      	b.n	3812 <ull_conn_done+0x6ea>
    388a:	4b5c      	ldr	r3, [pc, #368]	; (39fc <ull_conn_done+0x8d4>)
    388c:	4c5c      	ldr	r4, [pc, #368]	; (3a00 <ull_conn_done+0x8d8>)
    388e:	6818      	ldr	r0, [r3, #0]
    3890:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
		if( start || (!need_update_dummy && handle_cnt[max_conn_index] > 1 && handle_cnt[max_conn_index] % M_num == 0  && conn_handle == max_conn_index && anchor_points[conn_handle] != 0 && scheduled_handles[conn_handle])){
    3894:	4b5b      	ldr	r3, [pc, #364]	; (3a04 <ull_conn_done+0x8dc>)
    3896:	6825      	ldr	r5, [r4, #0]
    3898:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
    389c:	781c      	ldrb	r4, [r3, #0]
    389e:	fbb2 f3f5 	udiv	r3, r2, r5
    38a2:	fb05 2313 	mls	r3, r5, r3, r2
    38a6:	2c00      	cmp	r4, #0
    38a8:	f000 80b6 	beq.w	3a18 <ull_conn_done+0x8f0>
		else if(handle_cnt[max_conn_index]%M_num ==2) {
    38ac:	2b02      	cmp	r3, #2
    38ae:	f000 82f6 	beq.w	3e9e <ull_conn_done+0xd76>
	switch (done->extra.mic_state) {
    38b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    38b4:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
    38b8:	2b01      	cmp	r3, #1
    38ba:	f000 82fe 	beq.w	3eba <ull_conn_done+0xd92>
    38be:	2b02      	cmp	r3, #2
    38c0:	f000 835e 	beq.w	3f80 <ull_conn_done+0xe58>
    38c4:	2b00      	cmp	r3, #0
    38c6:	f000 8366 	beq.w	3f96 <ull_conn_done+0xe6e>
	reason_peer = conn->llcp_terminate.reason_peer;
    38ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    38cc:	f893 1107 	ldrb.w	r1, [r3, #263]	; 0x107
	if (reason_peer && (
    38d0:	2900      	cmp	r1, #0
    38d2:	f040 81c9 	bne.w	3c68 <ull_conn_done+0xb40>
	latency_event = lll->latency_event;
    38d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    38d8:	8c9e      	ldrh	r6, [r3, #36]	; 0x24
	if (done->extra.trx_cnt) {
    38da:	6abb      	ldr	r3, [r7, #40]	; 0x28
    38dc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
	elapsed_event = latency_event + 1;
    38de:	1c75      	adds	r5, r6, #1
    38e0:	b2ad      	uxth	r5, r5
	if (done->extra.trx_cnt) {
    38e2:	2b00      	cmp	r3, #0
    38e4:	f040 81d6 	bne.w	3c94 <ull_conn_done+0xb6c>
	if (done->extra.crc_valid) {
    38e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    38ea:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
    38ee:	2b00      	cmp	r3, #0
    38f0:	f040 81da 	bne.w	3ca8 <ull_conn_done+0xb80>
	else if (conn->connect_expire) {
    38f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    38f6:	f8b2 30a8 	ldrh.w	r3, [r2, #168]	; 0xa8
    38fa:	2b00      	cmp	r3, #0
    38fc:	f000 82e4 	beq.w	3ec8 <ull_conn_done+0xda0>
		if (conn->connect_expire > elapsed_event) {
    3900:	42ab      	cmp	r3, r5
    3902:	f241 8057 	bls.w	49b4 <ull_conn_done+0x188c>
			conn->connect_expire -= elapsed_event;
    3906:	1b5b      	subs	r3, r3, r5
    3908:	f8b2 40ac 	ldrh.w	r4, [r2, #172]	; 0xac
    390c:	f8a2 30a8 	strh.w	r3, [r2, #168]	; 0xa8
	if (conn->supervision_expire) {
    3910:	2c00      	cmp	r4, #0
    3912:	f000 81cd 	beq.w	3cb0 <ull_conn_done+0xb88>
		if (conn->supervision_expire > elapsed_event) {
    3916:	42a5      	cmp	r5, r4
    3918:	f080 86dd 	bcs.w	46d6 <ull_conn_done+0x15ae>
			conn->supervision_expire -= elapsed_event;
    391c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    391e:	1b64      	subs	r4, r4, r5
    3920:	b2a4      	uxth	r4, r4
    3922:	f8a2 40ac 	strh.w	r4, [r2, #172]	; 0xac
			lll->latency_event = 0;
    3926:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    3928:	2300      	movs	r3, #0
    392a:	8493      	strh	r3, [r2, #36]	; 0x24
	if (conn->apto_expire != 0U) {
    392c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    392e:	f8b2 30b8 	ldrh.w	r3, [r2, #184]	; 0xb8
	force = 0U;
    3932:	2c06      	cmp	r4, #6
    3934:	bf8c      	ite	hi
    3936:	2400      	movhi	r4, #0
    3938:	2401      	movls	r4, #1
	if (conn->apto_expire != 0U) {
    393a:	2b00      	cmp	r3, #0
    393c:	f040 81be 	bne.w	3cbc <ull_conn_done+0xb94>
	if (conn->appto_expire != 0U) {
    3940:	6e38      	ldr	r0, [r7, #96]	; 0x60
    3942:	f8b0 20b4 	ldrh.w	r2, [r0, #180]	; 0xb4
    3946:	f890 30bf 	ldrb.w	r3, [r0, #191]	; 0xbf
    394a:	f890 10c0 	ldrb.w	r1, [r0, #192]	; 0xc0
    394e:	b162      	cbz	r2, 396a <ull_conn_done+0x842>
		if (conn->appto_expire > elapsed_event) {
    3950:	42aa      	cmp	r2, r5
    3952:	f200 82c4 	bhi.w	3ede <ull_conn_done+0xdb6>
			if ((conn->procedure_expire == 0U) &&
    3956:	6e3d      	ldr	r5, [r7, #96]	; 0x60
    3958:	f8b5 20b0 	ldrh.w	r2, [r5, #176]	; 0xb0
			conn->appto_expire = 0U;
    395c:	2000      	movs	r0, #0
    395e:	f8a5 00b4 	strh.w	r0, [r5, #180]	; 0xb4
			if ((conn->procedure_expire == 0U) &&
    3962:	b912      	cbnz	r2, 396a <ull_conn_done+0x842>
    3964:	428b      	cmp	r3, r1
    3966:	f000 86d3 	beq.w	4710 <ull_conn_done+0x15e8>
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
    396a:	1a5b      	subs	r3, r3, r1
    396c:	f003 0303 	and.w	r3, r3, #3
    3970:	2b02      	cmp	r3, #2
    3972:	f000 82bd 	beq.w	3ef0 <ull_conn_done+0xdc8>
				 (conn->llcp_type == LLCP_CHAN_MAP))) ||
    3976:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3978:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
    397c:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
    3980:	429a      	cmp	r2, r3
    3982:	f000 832e 	beq.w	3fe2 <ull_conn_done+0xeba>
		lll->latency_event = 0;
    3986:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    3988:	2300      	movs	r3, #0
    398a:	8493      	strh	r3, [r2, #36]	; 0x24
	if ((force) || (latency_event != lll->latency_event)) {
    398c:	2c00      	cmp	r4, #0
    398e:	f040 8245 	bne.w	3e1c <ull_conn_done+0xcf4>
    3992:	2e00      	cmp	r6, #0
    3994:	f040 8242 	bne.w	3e1c <ull_conn_done+0xcf4>
    3998:	f003 fad2 	bl	6f40 <z_timer_cycle_get_32>
}
    399c:	37bc      	adds	r7, #188	; 0xbc
    399e:	46bd      	mov	sp, r7
    39a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    39a4:	fa1f f986 	uxth.w	r9, r6
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    39a8:	464a      	mov	r2, r9
    39aa:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
    39ae:	4640      	mov	r0, r8
    39b0:	f00c fb36 	bl	10020 <mem_get>
	if (conn->lll.handle != handle) {
    39b4:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
    39b6:	454b      	cmp	r3, r9
    39b8:	f43f ac0c 	beq.w	31d4 <ull_conn_done+0xac>
				scheduled_handle_cnt --;
    39bc:	4a12      	ldr	r2, [pc, #72]	; (3a08 <ull_conn_done+0x8e0>)
				handle_cnt[disconnected_handle] =0;
    39be:	4d13      	ldr	r5, [pc, #76]	; (3a0c <ull_conn_done+0x8e4>)
				scheduled_handle_cnt --;
    39c0:	6813      	ldr	r3, [r2, #0]
				need_conn_update = false;
    39c2:	4813      	ldr	r0, [pc, #76]	; (3a10 <ull_conn_done+0x8e8>)
				handle_cnt[disconnected_handle] =0;
    39c4:	f8c7 5090 	str.w	r5, [r7, #144]	; 0x90
				scheduled_handle_cnt --;
    39c8:	3b01      	subs	r3, #1
    39ca:	6013      	str	r3, [r2, #0]
				scheduled_handles[disconnected_handle] = false;
    39cc:	2300      	movs	r3, #0
				handle_cnt[disconnected_handle] =0;
    39ce:	f845 3026 	str.w	r3, [r5, r6, lsl #2]
				need_conn_update = false;
    39d2:	7003      	strb	r3, [r0, #0]
				scheduled_handles[disconnected_handle] = false;
    39d4:	4d06      	ldr	r5, [pc, #24]	; (39f0 <ull_conn_done+0x8c8>)
				disconnected_interval = conn_int_table[disconnected_handle];
    39d6:	6e78      	ldr	r0, [r7, #100]	; 0x64
				update_is_possible = true;
    39d8:	490e      	ldr	r1, [pc, #56]	; (3a14 <ull_conn_done+0x8ec>)
				scheduled_handles[disconnected_handle] = false;
    39da:	55ab      	strb	r3, [r5, r6]
				update_is_possible = true;
    39dc:	2201      	movs	r2, #1
				disconnected_interval = conn_int_table[disconnected_handle];
    39de:	f850 5026 	ldr.w	r5, [r0, r6, lsl #2]
    39e2:	67bd      	str	r5, [r7, #120]	; 0x78
				conn_int_table[disconnected_handle] = 0;
    39e4:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
				update_is_possible = true;
    39e8:	700a      	strb	r2, [r1, #0]
				break;
    39ea:	f7ff bbfa 	b.w	31e2 <ull_conn_done+0xba>
    39ee:	bf00      	nop
    39f0:	2000831c 	.word	0x2000831c
    39f4:	20003ef0 	.word	0x20003ef0
    39f8:	3ff40000 	.word	0x3ff40000
    39fc:	200075d4 	.word	0x200075d4
    3a00:	200004b0 	.word	0x200004b0
    3a04:	2000a863 	.word	0x2000a863
    3a08:	20008318 	.word	0x20008318
    3a0c:	200075bc 	.word	0x200075bc
    3a10:	2000a862 	.word	0x2000a862
    3a14:	2000a864 	.word	0x2000a864
    3a18:	4cac      	ldr	r4, [pc, #688]	; (3ccc <ull_conn_done+0xba4>)
		if( start || (!need_update_dummy && handle_cnt[max_conn_index] > 1 && handle_cnt[max_conn_index] % M_num == 0  && conn_handle == max_conn_index && anchor_points[conn_handle] != 0 && scheduled_handles[conn_handle])){
    3a1a:	2a01      	cmp	r2, #1
    3a1c:	6826      	ldr	r6, [r4, #0]
    3a1e:	f240 816d 	bls.w	3cfc <ull_conn_done+0xbd4>
    3a22:	2b00      	cmp	r3, #0
    3a24:	f040 816a 	bne.w	3cfc <ull_conn_done+0xbd4>
    3a28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    3a2a:	4283      	cmp	r3, r0
    3a2c:	f47f af41 	bne.w	38b2 <ull_conn_done+0x78a>
    3a30:	4ba7      	ldr	r3, [pc, #668]	; (3cd0 <ull_conn_done+0xba8>)
    3a32:	6dba      	ldr	r2, [r7, #88]	; 0x58
    3a34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3a38:	2b00      	cmp	r3, #0
    3a3a:	f43f af3a 	beq.w	38b2 <ull_conn_done+0x78a>
    3a3e:	2900      	cmp	r1, #0
    3a40:	f43f af37 	beq.w	38b2 <ull_conn_done+0x78a>
			if(need_schedule_update != 0)
    3a44:	b10e      	cbz	r6, 3a4a <ull_conn_done+0x922>
				need_schedule_update --;
    3a46:	3e01      	subs	r6, #1
    3a48:	6026      	str	r6, [r4, #0]
			for(int i = 0; i < CONFIG_BT_MAX_CONN; i ++)
    3a4a:	4ba2      	ldr	r3, [pc, #648]	; (3cd4 <ull_conn_done+0xbac>)
										flag = true;
    3a4c:	4aa2      	ldr	r2, [pc, #648]	; (3cd8 <ull_conn_done+0xbb0>)
    3a4e:	f103 0410 	add.w	r4, r3, #16
			bool flag = false;
    3a52:	2000      	movs	r0, #0
				if(handle_cnt[i] < 1 && scheduled_handles[i]) flag = true;
    3a54:	f853 1b04 	ldr.w	r1, [r3], #4
    3a58:	b919      	cbnz	r1, 3a62 <ull_conn_done+0x93a>
    3a5a:	7811      	ldrb	r1, [r2, #0]
    3a5c:	2900      	cmp	r1, #0
    3a5e:	bf18      	it	ne
    3a60:	4608      	movne	r0, r1
			for(int i = 0; i < CONFIG_BT_MAX_CONN; i ++)
    3a62:	429c      	cmp	r4, r3
    3a64:	f102 0201 	add.w	r2, r2, #1
    3a68:	d1f4      	bne.n	3a54 <ull_conn_done+0x92c>
			if(!flag){
    3a6a:	2800      	cmp	r0, #0
    3a6c:	f47f af21 	bne.w	38b2 <ull_conn_done+0x78a>
				for(; flag && standard_anchor_point <table_size; standard_anchor_point ++)
    3a70:	4b9a      	ldr	r3, [pc, #616]	; (3cdc <ull_conn_done+0xbb4>)
    3a72:	627b      	str	r3, [r7, #36]	; 0x24
    3a74:	461a      	mov	r2, r3
				need_calculation = false;
    3a76:	4b9a      	ldr	r3, [pc, #616]	; (3ce0 <ull_conn_done+0xbb8>)
				for(; flag && standard_anchor_point <table_size; standard_anchor_point ++)
    3a78:	f8d2 9000 	ldr.w	r9, [r2]
    3a7c:	4a99      	ldr	r2, [pc, #612]	; (3ce4 <ull_conn_done+0xbbc>)
				need_calculation = false;
    3a7e:	7018      	strb	r0, [r3, #0]
				for(; flag && standard_anchor_point <table_size; standard_anchor_point ++)
    3a80:	6811      	ldr	r1, [r2, #0]
    3a82:	6779      	str	r1, [r7, #116]	; 0x74
    3a84:	f1b9 0f00 	cmp.w	r9, #0
    3a88:	f340 87c5 	ble.w	4a16 <ull_conn_done+0x18ee>
    3a8c:	4b96      	ldr	r3, [pc, #600]	; (3ce8 <ull_conn_done+0xbc0>)
				int standard_anchor_point =0;
    3a8e:	4680      	mov	r8, r0
    3a90:	e004      	b.n	3a9c <ull_conn_done+0x974>
				for(; flag && standard_anchor_point <table_size; standard_anchor_point ++)
    3a92:	f108 0801 	add.w	r8, r8, #1
    3a96:	45c1      	cmp	r9, r8
    3a98:	f000 8792 	beq.w	49c0 <ull_conn_done+0x1898>
					if(max_conn_index ==array0[standard_anchor_point]) {
    3a9c:	f853 2b04 	ldr.w	r2, [r3], #4
    3aa0:	428a      	cmp	r2, r1
    3aa2:	d1f6      	bne.n	3a92 <ull_conn_done+0x96a>
				for(int i = 0; i <CONFIG_BT_MAX_CONN; i ++) temp_anchor_points[i] = anchor_points[i];
    3aa4:	4c8a      	ldr	r4, [pc, #552]	; (3cd0 <ull_conn_done+0xba8>)
				uint32_t standard_point = anchor_points[max_conn_index];
    3aa6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
				array1[standard_anchor_point] = anchor_points[max_conn_index];
    3aa8:	4b90      	ldr	r3, [pc, #576]	; (3cec <ull_conn_done+0xbc4>)
				uint32_t standard_point = anchor_points[max_conn_index];
    3aaa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
				for(int i = 0; i <CONFIG_BT_MAX_CONN; i ++) temp_anchor_points[i] = anchor_points[i];
    3aae:	4d90      	ldr	r5, [pc, #576]	; (3cf0 <ull_conn_done+0xbc8>)
				array1[standard_anchor_point] = anchor_points[max_conn_index];
    3ab0:	f843 2028 	str.w	r2, [r3, r8, lsl #2]
				for(int i = 0; i <CONFIG_BT_MAX_CONN; i ++) temp_anchor_points[i] = anchor_points[i];
    3ab4:	e9d4 0100 	ldrd	r0, r1, [r4]
				array1[standard_anchor_point] = anchor_points[max_conn_index];
    3ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
				uint32_t standard_point = anchor_points[max_conn_index];
    3aba:	673a      	str	r2, [r7, #112]	; 0x70
				for(int i = 0; i <CONFIG_BT_MAX_CONN; i ++) temp_anchor_points[i] = anchor_points[i];
    3abc:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
						for(int k = standard_anchor_point; k < standard_anchor_point +table_size && j <max_conn_int/conn_int_table[i]; k ++){
    3ac0:	4e8c      	ldr	r6, [pc, #560]	; (3cf4 <ull_conn_done+0xbcc>)
    3ac2:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
				for(int i = 0; i <CONFIG_BT_MAX_CONN; i ++) temp_anchor_points[i] = anchor_points[i];
    3ac6:	e9c5 0100 	strd	r0, r1, [r5]
    3aca:	e9c5 2302 	strd	r2, r3, [r5, #8]
						for(int k = standard_anchor_point; k < standard_anchor_point +table_size && j <max_conn_int/conn_int_table[i]; k ++){
    3ace:	6836      	ldr	r6, [r6, #0]
    3ad0:	66be      	str	r6, [r7, #104]	; 0x68
				for(int i =0; i <CONFIG_BT_MAX_CONN; i ++){
    3ad2:	2300      	movs	r3, #0
						for(int k = standard_anchor_point; k < standard_anchor_point +table_size && j <max_conn_int/conn_int_table[i]; k ++){
    3ad4:	eb08 0209 	add.w	r2, r8, r9
    3ad8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
    3adc:	f8c7 906c 	str.w	r9, [r7, #108]	; 0x6c
    3ae0:	469b      	mov	fp, r3
    3ae2:	f8c7 8050 	str.w	r8, [r7, #80]	; 0x50
					if(scheduled_handles[i] == true && i != max_conn_index){
    3ae6:	69fa      	ldr	r2, [r7, #28]
    3ae8:	f812 3b01 	ldrb.w	r3, [r2], #1
    3aec:	61fa      	str	r2, [r7, #28]
    3aee:	2b00      	cmp	r3, #0
    3af0:	f000 82b4 	beq.w	405c <ull_conn_done+0xf34>
    3af4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    3af6:	459b      	cmp	fp, r3
    3af8:	f000 82b0 	beq.w	405c <ull_conn_done+0xf34>
						while(anchor_points[i] + conn_int_table[i]*1.25 < standard_point) anchor_points[i] += conn_int_table[i]*1.25;
    3afc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
    3b00:	681e      	ldr	r6, [r3, #0]
    3b02:	4630      	mov	r0, r6
    3b04:	f7fc fc3e 	bl	384 <__aeabi_ui2d>
    3b08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    3b0a:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
    3b0e:	65bb      	str	r3, [r7, #88]	; 0x58
    3b10:	4604      	mov	r4, r0
    3b12:	4618      	mov	r0, r3
    3b14:	460d      	mov	r5, r1
    3b16:	f7fc fc35 	bl	384 <__aeabi_ui2d>
    3b1a:	4b77      	ldr	r3, [pc, #476]	; (3cf8 <ull_conn_done+0xbd0>)
    3b1c:	2200      	movs	r2, #0
    3b1e:	f7fc fcab 	bl	478 <__aeabi_dmul>
    3b22:	4602      	mov	r2, r0
    3b24:	460b      	mov	r3, r1
    3b26:	e9c7 011e 	strd	r0, r1, [r7, #120]	; 0x78
    3b2a:	4620      	mov	r0, r4
    3b2c:	4629      	mov	r1, r5
    3b2e:	f7fc faed 	bl	10c <__adddf3>
    3b32:	4680      	mov	r8, r0
    3b34:	6f38      	ldr	r0, [r7, #112]	; 0x70
    3b36:	4689      	mov	r9, r1
    3b38:	f7fc fc24 	bl	384 <__aeabi_ui2d>
    3b3c:	4602      	mov	r2, r0
    3b3e:	460b      	mov	r3, r1
    3b40:	4640      	mov	r0, r8
    3b42:	4649      	mov	r1, r9
    3b44:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
    3b48:	f7fc ff08 	bl	95c <__aeabi_dcmplt>
    3b4c:	b1e8      	cbz	r0, 3b8a <ull_conn_done+0xa62>
    3b4e:	f8c7 b048 	str.w	fp, [r7, #72]	; 0x48
    3b52:	e9d7 ab1e 	ldrd	sl, fp, [r7, #120]	; 0x78
    3b56:	4649      	mov	r1, r9
    3b58:	4640      	mov	r0, r8
    3b5a:	f7fc ff4f 	bl	9fc <__aeabi_d2uiz>
    3b5e:	4606      	mov	r6, r0
    3b60:	f7fc fc10 	bl	384 <__aeabi_ui2d>
    3b64:	4652      	mov	r2, sl
    3b66:	465b      	mov	r3, fp
    3b68:	4604      	mov	r4, r0
    3b6a:	460d      	mov	r5, r1
    3b6c:	f7fc face 	bl	10c <__adddf3>
    3b70:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
    3b74:	4680      	mov	r8, r0
    3b76:	4689      	mov	r9, r1
    3b78:	f7fc fef0 	bl	95c <__aeabi_dcmplt>
    3b7c:	2800      	cmp	r0, #0
    3b7e:	d1ea      	bne.n	3b56 <ull_conn_done+0xa2e>
    3b80:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
    3b84:	f8d7 b048 	ldr.w	fp, [r7, #72]	; 0x48
    3b88:	601e      	str	r6, [r3, #0]
						while(anchor_points[i] > standard_point + conn_int_table[i]*1.25) anchor_points[i] -= conn_int_table[i]*1.25;
    3b8a:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
    3b8e:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
    3b92:	f7fc fabb 	bl	10c <__adddf3>
    3b96:	4622      	mov	r2, r4
    3b98:	462b      	mov	r3, r5
    3b9a:	4680      	mov	r8, r0
    3b9c:	4689      	mov	r9, r1
    3b9e:	f7fc fedd 	bl	95c <__aeabi_dcmplt>
    3ba2:	b1d8      	cbz	r0, 3bdc <ull_conn_done+0xab4>
    3ba4:	f8c7 b088 	str.w	fp, [r7, #136]	; 0x88
    3ba8:	e9d7 ab1e 	ldrd	sl, fp, [r7, #120]	; 0x78
    3bac:	4652      	mov	r2, sl
    3bae:	465b      	mov	r3, fp
    3bb0:	4620      	mov	r0, r4
    3bb2:	4629      	mov	r1, r5
    3bb4:	f7fc faa8 	bl	108 <__aeabi_dsub>
    3bb8:	f7fc ff20 	bl	9fc <__aeabi_d2uiz>
    3bbc:	4606      	mov	r6, r0
    3bbe:	f7fc fbe1 	bl	384 <__aeabi_ui2d>
    3bc2:	4642      	mov	r2, r8
    3bc4:	464b      	mov	r3, r9
    3bc6:	4604      	mov	r4, r0
    3bc8:	460d      	mov	r5, r1
    3bca:	f7fc fee5 	bl	998 <__aeabi_dcmpgt>
    3bce:	2800      	cmp	r0, #0
    3bd0:	d1ec      	bne.n	3bac <ull_conn_done+0xa84>
    3bd2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
    3bd6:	f8d7 b088 	ldr.w	fp, [r7, #136]	; 0x88
    3bda:	601e      	str	r6, [r3, #0]
						if(anchor_points[i] < standard_point) anchor_points[i] += conn_int_table[i]*1.25;
    3bdc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    3bde:	42b3      	cmp	r3, r6
    3be0:	f200 8583 	bhi.w	46ea <ull_conn_done+0x15c2>
						for(int k = standard_anchor_point; k < standard_anchor_point +table_size && j <max_conn_int/conn_int_table[i]; k ++){
    3be4:	6d3c      	ldr	r4, [r7, #80]	; 0x50
    3be6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    3bea:	4294      	cmp	r4, r2
    3bec:	f280 8236 	bge.w	405c <ull_conn_done+0xf34>
    3bf0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3bf2:	6dba      	ldr	r2, [r7, #88]	; 0x58
    3bf4:	f8d7 a06c 	ldr.w	sl, [r7, #108]	; 0x6c
    3bf8:	fbb3 f3f2 	udiv	r3, r3, r2
    3bfc:	2600      	movs	r6, #0
    3bfe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    3c02:	e005      	b.n	3c10 <ull_conn_done+0xae8>
    3c04:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    3c08:	3401      	adds	r4, #1
    3c0a:	42a3      	cmp	r3, r4
    3c0c:	f000 8226 	beq.w	405c <ull_conn_done+0xf34>
    3c10:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
    3c14:	42b3      	cmp	r3, r6
    3c16:	f240 8221 	bls.w	405c <ull_conn_done+0xf34>
							if(array0[k%table_size] == i){
    3c1a:	fb94 f5fa 	sdiv	r5, r4, sl
    3c1e:	4b32      	ldr	r3, [pc, #200]	; (3ce8 <ull_conn_done+0xbc0>)
    3c20:	fb0a 4515 	mls	r5, sl, r5, r4
    3c24:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    3c28:	455b      	cmp	r3, fp
    3c2a:	d1eb      	bne.n	3c04 <ull_conn_done+0xadc>
								array1[k%table_size] = anchor_points[i] + conn_int_table[i]*1.25*j;
    3c2c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
    3c30:	6818      	ldr	r0, [r3, #0]
    3c32:	f7fc fba7 	bl	384 <__aeabi_ui2d>
    3c36:	4680      	mov	r8, r0
    3c38:	4630      	mov	r0, r6
    3c3a:	4689      	mov	r9, r1
    3c3c:	f7fc fbb2 	bl	3a4 <__aeabi_i2d>
    3c40:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
    3c44:	f7fc fc18 	bl	478 <__aeabi_dmul>
    3c48:	4602      	mov	r2, r0
    3c4a:	460b      	mov	r3, r1
    3c4c:	4640      	mov	r0, r8
    3c4e:	4649      	mov	r1, r9
    3c50:	f7fc fa5c 	bl	10c <__adddf3>
    3c54:	f7fc fed2 	bl	9fc <__aeabi_d2uiz>
								if(k>=table_size) array1[k%table_size] = array1[k%table_size] - max_conn_int*1.25;
    3c58:	45a2      	cmp	sl, r4
    3c5a:	f340 826f 	ble.w	413c <ull_conn_done+0x1014>
								array1[k%table_size] = anchor_points[i] + conn_int_table[i]*1.25*j;
    3c5e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    3c60:	f842 0025 	str.w	r0, [r2, r5, lsl #2]
								j++;
    3c64:	3601      	adds	r6, #1
    3c66:	e7cd      	b.n	3c04 <ull_conn_done+0xadc>
				0 ||
    3c68:	f893 30be 	ldrb.w	r3, [r3, #190]	; 0xbe
	if (reason_peer && (
    3c6c:	079a      	lsls	r2, r3, #30
    3c6e:	f100 818b 	bmi.w	3f88 <ull_conn_done+0xe60>
				conn->master.terminate_ack ||
    3c72:	293d      	cmp	r1, #61	; 0x3d
    3c74:	f000 8188 	beq.w	3f88 <ull_conn_done+0xe60>
	latency_event = lll->latency_event;
    3c78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    3c7a:	8c96      	ldrh	r6, [r2, #36]	; 0x24
	if (done->extra.trx_cnt) {
    3c7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3c7e:	8c92      	ldrh	r2, [r2, #36]	; 0x24
	elapsed_event = latency_event + 1;
    3c80:	1c75      	adds	r5, r6, #1
    3c82:	b2ad      	uxth	r5, r5
	if (done->extra.trx_cnt) {
    3c84:	2a00      	cmp	r2, #0
    3c86:	f43f ae2f 	beq.w	38e8 <ull_conn_done+0x7c0>
			conn->master.terminate_ack = 1;
    3c8a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    3c8c:	f043 0302 	orr.w	r3, r3, #2
    3c90:	f882 30be 	strb.w	r3, [r2, #190]	; 0xbe
	if (done->extra.crc_valid) {
    3c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
		conn->connect_expire = 0U;
    3c96:	6e39      	ldr	r1, [r7, #96]	; 0x60
	if (done->extra.crc_valid) {
    3c98:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
		conn->connect_expire = 0U;
    3c9c:	2200      	movs	r2, #0
    3c9e:	f8a1 20a8 	strh.w	r2, [r1, #168]	; 0xa8
	if (done->extra.crc_valid) {
    3ca2:	2b00      	cmp	r3, #0
    3ca4:	f000 8110 	beq.w	3ec8 <ull_conn_done+0xda0>
		conn->supervision_expire = 0U;
    3ca8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3caa:	2400      	movs	r4, #0
    3cac:	f8a3 40ac 	strh.w	r4, [r3, #172]	; 0xac
	if (conn->apto_expire != 0U) {
    3cb0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    3cb2:	f8b2 30b8 	ldrh.w	r3, [r2, #184]	; 0xb8
    3cb6:	2b00      	cmp	r3, #0
    3cb8:	f43f ae42 	beq.w	3940 <ull_conn_done+0x818>
		if (conn->apto_expire > elapsed_event) {
    3cbc:	42ab      	cmp	r3, r5
    3cbe:	f240 811f 	bls.w	3f00 <ull_conn_done+0xdd8>
			conn->apto_expire -= elapsed_event;
    3cc2:	1b5b      	subs	r3, r3, r5
    3cc4:	f8a2 30b8 	strh.w	r3, [r2, #184]	; 0xb8
    3cc8:	e63a      	b.n	3940 <ull_conn_done+0x818>
    3cca:	bf00      	nop
    3ccc:	2000060c 	.word	0x2000060c
    3cd0:	20003ef0 	.word	0x20003ef0
    3cd4:	200075bc 	.word	0x200075bc
    3cd8:	2000831c 	.word	0x2000831c
    3cdc:	20008320 	.word	0x20008320
    3ce0:	2000a861 	.word	0x2000a861
    3ce4:	200075d4 	.word	0x200075d4
    3ce8:	20003f00 	.word	0x20003f00
    3cec:	20004f00 	.word	0x20004f00
    3cf0:	20008324 	.word	0x20008324
    3cf4:	200075d8 	.word	0x200075d8
    3cf8:	3ff40000 	.word	0x3ff40000
		else if( need_schedule_update == 0 && !need_update_dummy && handle_cnt[max_conn_index]%M_num == 1  && conn_handle == max_conn_index && anchor_points[conn_handle] != 0 && scheduled_handles[conn_handle]){
    3cfc:	2e00      	cmp	r6, #0
    3cfe:	f47f add5 	bne.w	38ac <ull_conn_done+0x784>
    3d02:	2b01      	cmp	r3, #1
    3d04:	f47f add2 	bne.w	38ac <ull_conn_done+0x784>
    3d08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    3d0a:	4283      	cmp	r3, r0
    3d0c:	f47f add1 	bne.w	38b2 <ull_conn_done+0x78a>
    3d10:	4abf      	ldr	r2, [pc, #764]	; (4010 <ull_conn_done+0xee8>)
    3d12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    3d14:	617a      	str	r2, [r7, #20]
    3d16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3d1a:	2b00      	cmp	r3, #0
    3d1c:	f43f adc9 	beq.w	38b2 <ull_conn_done+0x78a>
    3d20:	2900      	cmp	r1, #0
    3d22:	f43f adc6 	beq.w	38b2 <ull_conn_done+0x78a>
			if(conn_int_table[scheduled_handle_cnt-1] >0){
    3d26:	4bbb      	ldr	r3, [pc, #748]	; (4014 <ull_conn_done+0xeec>)
    3d28:	6e78      	ldr	r0, [r7, #100]	; 0x64
    3d2a:	681b      	ldr	r3, [r3, #0]
    3d2c:	3b01      	subs	r3, #1
    3d2e:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
    3d32:	2d00      	cmp	r5, #0
    3d34:	f43f adbd 	beq.w	38b2 <ull_conn_done+0x78a>
				if( handle_cnt[scheduled_handle_cnt-1] >40000/conn_int_table[scheduled_handle_cnt-1]/1.25) {
    3d38:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
    3d3c:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
    3d40:	f7fc fb20 	bl	384 <__aeabi_ui2d>
    3d44:	4602      	mov	r2, r0
    3d46:	f649 4040 	movw	r0, #40000	; 0x9c40
    3d4a:	fbb0 f0f5 	udiv	r0, r0, r5
    3d4e:	4614      	mov	r4, r2
    3d50:	460d      	mov	r5, r1
    3d52:	f7fc fb17 	bl	384 <__aeabi_ui2d>
    3d56:	4bb0      	ldr	r3, [pc, #704]	; (4018 <ull_conn_done+0xef0>)
    3d58:	2200      	movs	r2, #0
    3d5a:	f7fc fcb7 	bl	6cc <__aeabi_ddiv>
    3d5e:	4602      	mov	r2, r0
    3d60:	460b      	mov	r3, r1
    3d62:	4620      	mov	r0, r4
    3d64:	4629      	mov	r1, r5
    3d66:	f7fc fe17 	bl	998 <__aeabi_dcmpgt>
    3d6a:	2800      	cmp	r0, #0
    3d6c:	f43f ada1 	beq.w	38b2 <ull_conn_done+0x78a>
					for(int i = 0; i <CONFIG_BT_MAX_CONN; i ++) anchor_points[i] = temp_anchor_points[i];
    3d70:	4baa      	ldr	r3, [pc, #680]	; (401c <ull_conn_done+0xef4>)
							while(anchor_points[i] < anchor_points[first_handle]) anchor_points[i] += conn_int_table[i]*1.25;
    3d72:	4cab      	ldr	r4, [pc, #684]	; (4020 <ull_conn_done+0xef8>)
    3d74:	66fc      	str	r4, [r7, #108]	; 0x6c
					for(int i = 0; i <CONFIG_BT_MAX_CONN; i ++) anchor_points[i] = temp_anchor_points[i];
    3d76:	e9d3 0100 	ldrd	r0, r1, [r3]
    3d7a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
							while(anchor_points[i] < anchor_points[first_handle]) anchor_points[i] += conn_int_table[i]*1.25;
    3d7e:	f8d4 b000 	ldr.w	fp, [r4]
					for(int i = 0; i <CONFIG_BT_MAX_CONN; i ++) anchor_points[i] = temp_anchor_points[i];
    3d82:	4ca3      	ldr	r4, [pc, #652]	; (4010 <ull_conn_done+0xee8>)
							scheduled_dist[i] = (anchor_points[i]-anchor_points[first_handle])%((uint32_t)(conn_int_table[first_handle]*1.25));
    3d84:	4da4      	ldr	r5, [pc, #656]	; (4018 <ull_conn_done+0xef0>)
					for(int i = 0; i <CONFIG_BT_MAX_CONN; i ++) anchor_points[i] = temp_anchor_points[i];
    3d86:	60e3      	str	r3, [r4, #12]
					need_conn_update = false;
    3d88:	4ba6      	ldr	r3, [pc, #664]	; (4024 <ull_conn_done+0xefc>)
					for(int i = 0; i <CONFIG_BT_MAX_CONN; i ++) anchor_points[i] = temp_anchor_points[i];
    3d8a:	6020      	str	r0, [r4, #0]
					need_conn_update = false;
    3d8c:	701e      	strb	r6, [r3, #0]
					for(int i = 0; i <CONFIG_BT_MAX_CONN; i ++){
    3d8e:	f107 0398 	add.w	r3, r7, #152	; 0x98
					for(int i = 0; i <CONFIG_BT_MAX_CONN; i ++) anchor_points[i] = temp_anchor_points[i];
    3d92:	6061      	str	r1, [r4, #4]
    3d94:	60a2      	str	r2, [r4, #8]
    3d96:	46a2      	mov	sl, r4
					for(int i = 0; i <CONFIG_BT_MAX_CONN; i ++){
    3d98:	46b0      	mov	r8, r6
    3d9a:	64bb      	str	r3, [r7, #72]	; 0x48
							while(anchor_points[i] < anchor_points[first_handle]) anchor_points[i] += conn_int_table[i]*1.25;
    3d9c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    3da0:	f107 09a8 	add.w	r9, r7, #168	; 0xa8
							scheduled_dist[i] = (anchor_points[i]-anchor_points[first_handle])%((uint32_t)(conn_int_table[first_handle]*1.25));
    3da4:	2400      	movs	r4, #0
						if(scheduled_handles[i] == false) scheduled_dist[i] = -1;
    3da6:	69fa      	ldr	r2, [r7, #28]
    3da8:	f812 3b01 	ldrb.w	r3, [r2], #1
    3dac:	61fa      	str	r2, [r7, #28]
						schedule[i] = i;
    3dae:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
    3db2:	f842 8b04 	str.w	r8, [r2], #4
    3db6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
						if(scheduled_handles[i] == false) scheduled_dist[i] = -1;
    3dba:	2b00      	cmp	r3, #0
    3dbc:	f041 80d4 	bne.w	4f68 <ull_conn_done+0x1e40>
    3dc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3dc4:	f8c9 3000 	str.w	r3, [r9]
					for(int i = 0; i <CONFIG_BT_MAX_CONN; i ++){
    3dc8:	f108 0801 	add.w	r8, r8, #1
    3dcc:	f1b8 0f04 	cmp.w	r8, #4
    3dd0:	f109 0904 	add.w	r9, r9, #4
    3dd4:	f10a 0a04 	add.w	sl, sl, #4
    3dd8:	d1e5      	bne.n	3da6 <ull_conn_done+0xc7e>
    3dda:	f107 0398 	add.w	r3, r7, #152	; 0x98
					for(int i = 0; i <CONFIG_BT_MAX_CONN; i ++){
    3dde:	2100      	movs	r1, #0
    3de0:	f107 06a8 	add.w	r6, r7, #168	; 0xa8
						for(int j = i+1; j < CONFIG_BT_MAX_CONN; j ++){			
    3de4:	3101      	adds	r1, #1
    3de6:	2904      	cmp	r1, #4
    3de8:	f000 864b 	beq.w	4a82 <ull_conn_done+0x195a>
    3dec:	1d18      	adds	r0, r3, #4
    3dee:	4602      	mov	r2, r0
							if(scheduled_dist[schedule[i]] > scheduled_dist[schedule[j]]){
    3df0:	f852 5b04 	ldr.w	r5, [r2], #4
    3df4:	681c      	ldr	r4, [r3, #0]
    3df6:	f107 0cb8 	add.w	ip, r7, #184	; 0xb8
    3dfa:	eb0c 0e84 	add.w	lr, ip, r4, lsl #2
    3dfe:	eb0c 0c85 	add.w	ip, ip, r5, lsl #2
    3e02:	f85e ec10 	ldr.w	lr, [lr, #-16]
    3e06:	f85c cc10 	ldr.w	ip, [ip, #-16]
    3e0a:	45e6      	cmp	lr, ip
								schedule[i] = schedule[j];
    3e0c:	bf84      	itt	hi
    3e0e:	601d      	strhi	r5, [r3, #0]
								schedule[j] = temp;
    3e10:	f842 4c04 	strhi.w	r4, [r2, #-4]
						for(int j = i+1; j < CONFIG_BT_MAX_CONN; j ++){			
    3e14:	42b2      	cmp	r2, r6
    3e16:	d1eb      	bne.n	3df0 <ull_conn_done+0xcc8>
    3e18:	4603      	mov	r3, r0
    3e1a:	e7e3      	b.n	3de4 <ull_conn_done+0xcbc>
		lazy = lll->latency_event + 1;
    3e1c:	2101      	movs	r1, #1
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
    3e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
    3e20:	4881      	ldr	r0, [pc, #516]	; (4028 <ull_conn_done+0xf00>)
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
    3e22:	7f1a      	ldrb	r2, [r3, #28]
		struct ll_conn *conn = lll->hdr.parent;
    3e24:	68dd      	ldr	r5, [r3, #12]
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
    3e26:	9506      	str	r5, [sp, #24]
    3e28:	2300      	movs	r3, #0
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
    3e2a:	3203      	adds	r2, #3
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
    3e2c:	e9cd 1403 	strd	r1, r4, [sp, #12]
    3e30:	e9cd 3301 	strd	r3, r3, [sp, #4]
    3e34:	9005      	str	r0, [sp, #20]
    3e36:	9300      	str	r3, [sp, #0]
    3e38:	4618      	mov	r0, r3
    3e3a:	b2d2      	uxtb	r2, r2
    3e3c:	2101      	movs	r1, #1
    3e3e:	f00d fd3d 	bl	118bc <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    3e42:	f030 0302 	bics.w	r3, r0, #2
    3e46:	f43f ada7 	beq.w	3998 <ull_conn_done+0x870>
    3e4a:	f010 fb6d 	bl	14528 <ull_disable_mark_get>
    3e4e:	4285      	cmp	r5, r0
    3e50:	f43f ada2 	beq.w	3998 <ull_conn_done+0x870>
    3e54:	4a75      	ldr	r2, [pc, #468]	; (402c <ull_conn_done+0xf04>)
    3e56:	4976      	ldr	r1, [pc, #472]	; (4030 <ull_conn_done+0xf08>)
    3e58:	4876      	ldr	r0, [pc, #472]	; (4034 <ull_conn_done+0xf0c>)
    3e5a:	f240 73b2 	movw	r3, #1970	; 0x7b2
    3e5e:	f01a f874 	bl	1df4a <printk>
    3e62:	4040      	eors	r0, r0
    3e64:	f380 8811 	msr	BASEPRI, r0
    3e68:	f04f 0003 	mov.w	r0, #3
    3e6c:	df02      	svc	2
    3e6e:	e593      	b.n	3998 <ull_conn_done+0x870>
		for(int j = 1; j <CONFIG_BT_MAX_CONN; j ++)
    3e70:	46e1      	mov	r9, ip
		if(max_conn_int != 0)
    3e72:	f1b9 0f00 	cmp.w	r9, #0
    3e76:	f43f a9f5 	beq.w	3264 <ull_conn_done+0x13c>
    3e7a:	f7ff b9e5 	b.w	3248 <ull_conn_done+0x120>
		BLEX_cnt2 ++;
    3e7e:	4c6e      	ldr	r4, [pc, #440]	; (4038 <ull_conn_done+0xf10>)
    3e80:	f003 f85e 	bl	6f40 <z_timer_cycle_get_32>
    3e84:	6822      	ldr	r2, [r4, #0]
		stop_cycle[conn_handle] = k_cycle_get_32();
    3e86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    3e88:	496c      	ldr	r1, [pc, #432]	; (403c <ull_conn_done+0xf14>)
		BLEX_cnt2 ++;
    3e8a:	3201      	adds	r2, #1
    3e8c:	6022      	str	r2, [r4, #0]
		stop_cycle[conn_handle] = k_cycle_get_32();
    3e8e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    3e92:	2200      	movs	r2, #0
    3e94:	e9c1 0200 	strd	r0, r2, [r1]
    3e98:	00dc      	lsls	r4, r3, #3
    3e9a:	f7ff b96b 	b.w	3174 <ull_conn_done+0x4c>
			BLEX_cnt4 ++;
    3e9e:	4a68      	ldr	r2, [pc, #416]	; (4040 <ull_conn_done+0xf18>)
    3ea0:	6813      	ldr	r3, [r2, #0]
    3ea2:	3301      	adds	r3, #1
			if(BLEX_cnt4 == 1) BLEX_start = (uint32_t)k_cyc_to_ns_floor64(k_cycle_get_32());
    3ea4:	2b01      	cmp	r3, #1
			BLEX_cnt4 ++;
    3ea6:	6013      	str	r3, [r2, #0]
			if(BLEX_cnt4 == 1) BLEX_start = (uint32_t)k_cyc_to_ns_floor64(k_cycle_get_32());
    3ea8:	d03f      	beq.n	3f2a <ull_conn_done+0xe02>
    3eaa:	f003 f849 	bl	6f40 <z_timer_cycle_get_32>
	switch (done->extra.mic_state) {
    3eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3eb0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
    3eb4:	2b01      	cmp	r3, #1
    3eb6:	f47f ad02 	bne.w	38be <ull_conn_done+0x796>
			conn->appto_expire = conn->apto_expire = 0U;
    3eba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    3ebc:	2300      	movs	r3, #0
    3ebe:	f8a2 30b8 	strh.w	r3, [r2, #184]	; 0xb8
    3ec2:	f8a2 30b4 	strh.w	r3, [r2, #180]	; 0xb4
			break;
    3ec6:	e500      	b.n	38ca <ull_conn_done+0x7a2>
		if (!conn->supervision_expire) {
    3ec8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3eca:	f8b3 40ac 	ldrh.w	r4, [r3, #172]	; 0xac
    3ece:	2c00      	cmp	r4, #0
    3ed0:	f47f ad21 	bne.w	3916 <ull_conn_done+0x7ee>
			conn->supervision_expire = conn->supervision_reload;
    3ed4:	f8b3 40aa 	ldrh.w	r4, [r3, #170]	; 0xaa
    3ed8:	f8a3 40ac 	strh.w	r4, [r3, #172]	; 0xac
    3edc:	e518      	b.n	3910 <ull_conn_done+0x7e8>
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
    3ede:	1a5b      	subs	r3, r3, r1
    3ee0:	f003 0303 	and.w	r3, r3, #3
			conn->appto_expire -= elapsed_event;
    3ee4:	1b52      	subs	r2, r2, r5
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
    3ee6:	2b02      	cmp	r3, #2
			conn->appto_expire -= elapsed_event;
    3ee8:	f8a0 20b4 	strh.w	r2, [r0, #180]	; 0xb4
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
    3eec:	f47f ad43 	bne.w	3976 <ull_conn_done+0x84e>
    3ef0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3ef2:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
    3ef6:	3b01      	subs	r3, #1
    3ef8:	2b01      	cmp	r3, #1
    3efa:	f63f ad3c 	bhi.w	3976 <ull_conn_done+0x84e>
    3efe:	e542      	b.n	3986 <ull_conn_done+0x85e>
			rx = ll_pdu_rx_alloc();
    3f00:	f010 fa9e 	bl	14440 <ll_pdu_rx_alloc>
			if (rx) {
    3f04:	4601      	mov	r1, r0
    3f06:	2800      	cmp	r0, #0
    3f08:	f000 83fc 	beq.w	4704 <ull_conn_done+0x15dc>
				conn->apto_expire = 0U;
    3f0c:	6e38      	ldr	r0, [r7, #96]	; 0x60
				rx->handle = lll->handle;
    3f0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
				conn->apto_expire = 0U;
    3f10:	2300      	movs	r3, #0
				rx->handle = lll->handle;
    3f12:	8b92      	ldrh	r2, [r2, #28]
				conn->apto_expire = 0U;
    3f14:	f8a0 30b8 	strh.w	r3, [r0, #184]	; 0xb8
				rx->type = NODE_RX_TYPE_APTO;
    3f18:	230d      	movs	r3, #13
				ll_rx_put(rx->link, rx);
    3f1a:	6808      	ldr	r0, [r1, #0]
				rx->handle = lll->handle;
    3f1c:	80ca      	strh	r2, [r1, #6]
				rx->type = NODE_RX_TYPE_APTO;
    3f1e:	710b      	strb	r3, [r1, #4]
				ll_rx_put(rx->link, rx);
    3f20:	f010 fa5a 	bl	143d8 <ll_rx_put>
				ll_rx_sched();
    3f24:	f010 fa62 	bl	143ec <ll_rx_sched>
    3f28:	e50a      	b.n	3940 <ull_conn_done+0x818>
    3f2a:	f003 f809 	bl	6f40 <z_timer_cycle_get_32>
    3f2e:	4a45      	ldr	r2, [pc, #276]	; (4044 <ull_conn_done+0xf1c>)
			if(BLEX_cnt4 == 1) BLEX_start = (uint32_t)k_cyc_to_ns_floor64(k_cycle_get_32());
    3f30:	4945      	ldr	r1, [pc, #276]	; (4048 <ull_conn_done+0xf20>)
    3f32:	fba0 3402 	umull	r3, r4, r0, r2
    3f36:	0bda      	lsrs	r2, r3, #15
    3f38:	ea42 4244 	orr.w	r2, r2, r4, lsl #17
    3f3c:	600a      	str	r2, [r1, #0]
    3f3e:	e4b8      	b.n	38b2 <ull_conn_done+0x78a>
    3f40:	4642      	mov	r2, r8
    3f42:	f7ff ba3b 	b.w	33bc <ull_conn_done+0x294>
							for(int k = i*table_size/old_old_repeated_size+j; k< (i+1)*table_size/old_old_repeated_size-1; k ++){
    3f46:	fb9c f8fe 	sdiv	r8, ip, lr
    3f4a:	f108 3bff 	add.w	fp, r8, #4294967295	; 0xffffffff
    3f4e:	455b      	cmp	r3, fp
    3f50:	da0f      	bge.n	3f72 <ull_conn_done+0xe4a>
    3f52:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    3f56:	3b04      	subs	r3, #4
    3f58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    3f5c:	4b3b      	ldr	r3, [pc, #236]	; (404c <ull_conn_done+0xf24>)
    3f5e:	eb03 0888 	add.w	r8, r3, r8, lsl #2
    3f62:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
    3f66:	e000      	b.n	3f6a <ull_conn_done+0xe42>
    3f68:	689c      	ldr	r4, [r3, #8]
								array0[k] = array0[k+1];
    3f6a:	f843 4f04 	str.w	r4, [r3, #4]!
							for(int k = i*table_size/old_old_repeated_size+j; k< (i+1)*table_size/old_old_repeated_size-1; k ++){
    3f6e:	4598      	cmp	r8, r3
    3f70:	d1fa      	bne.n	3f68 <ull_conn_done+0xe40>
							array0[(i+1)*table_size/old_old_repeated_size-1] = -1;
    3f72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3f76:	f840 302b 	str.w	r3, [r0, fp, lsl #2]
							j-= 2;
    3f7a:	441a      	add	r2, r3
    3f7c:	f7ff ba1e 	b.w	33bc <ull_conn_done+0x294>
			conn->llcp_terminate.reason_peer =
    3f80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3f82:	213d      	movs	r1, #61	; 0x3d
    3f84:	f883 1107 	strb.w	r1, [r3, #263]	; 0x107
		conn_cleanup(conn, reason_peer);
    3f88:	6e38      	ldr	r0, [r7, #96]	; 0x60
    3f8a:	f013 f99b 	bl	172c4 <conn_cleanup>
}
    3f8e:	37bc      	adds	r7, #188	; 0xbc
    3f90:	46bd      	mov	sp, r7
    3f92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (lll->enc_rx || conn->llcp_enc.pause_rx) {
    3f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3f98:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
    3f9c:	0718      	lsls	r0, r3, #28
    3f9e:	d405      	bmi.n	3fac <ull_conn_done+0xe84>
    3fa0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3fa2:	f893 312a 	ldrb.w	r3, [r3, #298]	; 0x12a
    3fa6:	07d9      	lsls	r1, r3, #31
    3fa8:	f57f ac8f 	bpl.w	38ca <ull_conn_done+0x7a2>
						(lll->latency + 6)) ?
    3fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
				appto_reload_new = (conn->apto_reload >
    3fae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
						(lll->latency + 6)) ?
    3fb0:	8c1b      	ldrh	r3, [r3, #32]
				appto_reload_new = (conn->apto_reload >
    3fb2:	f8b2 20b6 	ldrh.w	r2, [r2, #182]	; 0xb6
				if (conn->appto_reload != appto_reload_new) {
    3fb6:	6e38      	ldr	r0, [r7, #96]	; 0x60
						(lll->latency + 6)) ?
    3fb8:	1d99      	adds	r1, r3, #6
				appto_reload_new = (conn->apto_reload >
    3fba:	428a      	cmp	r2, r1
					(conn->apto_reload -
    3fbc:	bfc4      	itt	gt
    3fbe:	1ad3      	subgt	r3, r2, r3
    3fc0:	3b06      	subgt	r3, #6
				if (conn->appto_reload != appto_reload_new) {
    3fc2:	f8b0 10b2 	ldrh.w	r1, [r0, #178]	; 0xb2
				appto_reload_new = (conn->apto_reload >
    3fc6:	bfcc      	ite	gt
    3fc8:	b29b      	uxthgt	r3, r3
    3fca:	4613      	movle	r3, r2
				if (conn->appto_reload != appto_reload_new) {
    3fcc:	4299      	cmp	r1, r3
    3fce:	f000 80cc 	beq.w	416a <ull_conn_done+0x1042>
					conn->appto_reload = appto_reload_new;
    3fd2:	f8a0 30b2 	strh.w	r3, [r0, #178]	; 0xb2
					conn->appto_expire = conn->appto_reload;
    3fd6:	6e39      	ldr	r1, [r7, #96]	; 0x60
    3fd8:	f8a1 30b4 	strh.w	r3, [r1, #180]	; 0xb4
					conn->apto_expire = conn->apto_reload;
    3fdc:	f8a1 20b8 	strh.w	r2, [r1, #184]	; 0xb8
    3fe0:	e473      	b.n	38ca <ull_conn_done+0x7a2>
    3fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3fe4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
	if ((force) || (latency_event != lll->latency_event)) {
    3fe6:	2c00      	cmp	r4, #0
    3fe8:	f000 8541 	beq.w	4a6e <ull_conn_done+0x1946>
		lazy = lll->latency_event + 1;
    3fec:	3301      	adds	r3, #1
    3fee:	b299      	uxth	r1, r3
	if ((ticks_drift_plus != 0U) || (ticks_drift_minus != 0U) ||
    3ff0:	e715      	b.n	3e1e <ull_conn_done+0xcf6>
		else if(!scheduled_handles[conn_handle] && !unscheduled_handles[conn_handle] && handle_cnt[conn_handle] > 0 && 2048%(conn->lll.interval) != 0){
    3ff2:	4a17      	ldr	r2, [pc, #92]	; (4050 <ull_conn_done+0xf28>)
    3ff4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    3ff6:	5cd3      	ldrb	r3, [r2, r3]
    3ff8:	2b00      	cmp	r3, #0
    3ffa:	f47f ac46 	bne.w	388a <ull_conn_done+0x762>
			need_update_dummy = false;
    3ffe:	4915      	ldr	r1, [pc, #84]	; (4054 <ull_conn_done+0xf2c>)
    4000:	4c15      	ldr	r4, [pc, #84]	; (4058 <ull_conn_done+0xf30>)
    4002:	700b      	strb	r3, [r1, #0]
			unscheduled_handles[conn_handle] = true;
    4004:	6db9      	ldr	r1, [r7, #88]	; 0x58
    4006:	6826      	ldr	r6, [r4, #0]
    4008:	2301      	movs	r3, #1
    400a:	5453      	strb	r3, [r2, r1]
		if( start || (!need_update_dummy && handle_cnt[max_conn_index] > 1 && handle_cnt[max_conn_index] % M_num == 0  && conn_handle == max_conn_index && anchor_points[conn_handle] != 0 && scheduled_handles[conn_handle])){
    400c:	e51a      	b.n	3a44 <ull_conn_done+0x91c>
    400e:	bf00      	nop
    4010:	20003ef0 	.word	0x20003ef0
    4014:	20008318 	.word	0x20008318
    4018:	3ff40000 	.word	0x3ff40000
    401c:	20008324 	.word	0x20008324
    4020:	200075b8 	.word	0x200075b8
    4024:	2000a862 	.word	0x2000a862
    4028:	00014e75 	.word	0x00014e75
    402c:	0002442c 	.word	0x0002442c
    4030:	000245d8 	.word	0x000245d8
    4034:	00023fe4 	.word	0x00023fe4
    4038:	200004ac 	.word	0x200004ac
    403c:	20001af8 	.word	0x20001af8
    4040:	20003ee8 	.word	0x20003ee8
    4044:	3b9aca00 	.word	0x3b9aca00
    4048:	20003eec 	.word	0x20003eec
    404c:	20003ef8 	.word	0x20003ef8
    4050:	20009358 	.word	0x20009358
    4054:	2000a863 	.word	0x2000a863
    4058:	2000060c 	.word	0x2000060c
				for(int i =0; i <CONFIG_BT_MAX_CONN; i ++){
    405c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
    4060:	f10b 0b01 	add.w	fp, fp, #1
    4064:	3304      	adds	r3, #4
    4066:	f1bb 0f04 	cmp.w	fp, #4
    406a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    406e:	f47f ad3a 	bne.w	3ae6 <ull_conn_done+0x9be>
    4072:	f8d7 906c 	ldr.w	r9, [r7, #108]	; 0x6c
				for(int i =1; i<table_size; i ++)
    4076:	f1b9 0f01 	cmp.w	r9, #1
    407a:	f109 31ff 	add.w	r1, r9, #4294967295	; 0xffffffff
    407e:	f340 84de 	ble.w	4a3e <ull_conn_done+0x1916>
    4082:	4b9f      	ldr	r3, [pc, #636]	; (4300 <ull_conn_done+0x11d8>)
    4084:	4a9f      	ldr	r2, [pc, #636]	; (4304 <ull_conn_done+0x11dc>)
						if(array0[i-1] != -1) array1[i] = array1[i-1] + avg_conn_evt_length[array0[i-1]];
    4086:	4ea0      	ldr	r6, [pc, #640]	; (4308 <ull_conn_done+0x11e0>)
    4088:	1f18      	subs	r0, r3, #4
    408a:	eb00 0089 	add.w	r0, r0, r9, lsl #2
					if(array0[i] == -1)
    408e:	f853 4f04 	ldr.w	r4, [r3, #4]!
    4092:	3401      	adds	r4, #1
    4094:	d10a      	bne.n	40ac <ull_conn_done+0xf84>
						if(array0[i-1] != -1) array1[i] = array1[i-1] + avg_conn_evt_length[array0[i-1]];
    4096:	f853 4c04 	ldr.w	r4, [r3, #-4]
    409a:	6815      	ldr	r5, [r2, #0]
    409c:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    40a0:	bf17      	itett	ne
    40a2:	f856 4024 	ldrne.w	r4, [r6, r4, lsl #2]
						else array1[i] = array1[i-1];
    40a6:	6055      	streq	r5, [r2, #4]
						if(array0[i-1] != -1) array1[i] = array1[i-1] + avg_conn_evt_length[array0[i-1]];
    40a8:	1964      	addne	r4, r4, r5
    40aa:	6054      	strne	r4, [r2, #4]
				for(int i =1; i<table_size; i ++)
    40ac:	4298      	cmp	r0, r3
    40ae:	f102 0204 	add.w	r2, r2, #4
    40b2:	d1ec      	bne.n	408e <ull_conn_done+0xf66>
    40b4:	4893      	ldr	r0, [pc, #588]	; (4304 <ull_conn_done+0x11dc>)
    40b6:	4a95      	ldr	r2, [pc, #596]	; (430c <ull_conn_done+0x11e4>)
						for(int k = standard_anchor_point; k < standard_anchor_point +table_size && j <max_conn_int/conn_int_table[i]; k ++){
    40b8:	2300      	movs	r3, #0
				for (int i =0; i <table_size; i ++){
    40ba:	3301      	adds	r3, #1
					temp_array1[i] = array1[i];
    40bc:	f850 4b04 	ldr.w	r4, [r0], #4
    40c0:	f842 4b04 	str.w	r4, [r2], #4
				for (int i =0; i <table_size; i ++){
    40c4:	4599      	cmp	r9, r3
    40c6:	dcf8      	bgt.n	40ba <ull_conn_done+0xf92>
				for(int i = 0; i < table_size-1; i ++){
    40c8:	2900      	cmp	r1, #0
    40ca:	f340 812a 	ble.w	4322 <ull_conn_done+0x11fa>
    40ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    40d0:	4b8b      	ldr	r3, [pc, #556]	; (4300 <ull_conn_done+0x11d8>)
						array1[i+1] =array1[i] + avg_conn_evt_length[array0[i]];
    40d2:	4e8d      	ldr	r6, [pc, #564]	; (4308 <ull_conn_done+0x11e0>)
    40d4:	4d8e      	ldr	r5, [pc, #568]	; (4310 <ull_conn_done+0x11e8>)
    40d6:	f109 4e80 	add.w	lr, r9, #1073741824	; 0x40000000
    40da:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
    40de:	eb03 0c8e 	add.w	ip, r3, lr, lsl #2
				for(int i = 0; i < table_size-1; i ++){
    40e2:	2400      	movs	r4, #0
    40e4:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
						array0[i+1] = -1;
    40e8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    40ec:	4693      	mov	fp, r2
    40ee:	e002      	b.n	40f6 <ull_conn_done+0xfce>
				for(int i = 0; i < table_size-1; i ++){
    40f0:	428c      	cmp	r4, r1
    40f2:	f280 8113 	bge.w	431c <ull_conn_done+0x11f4>
					if(array0[i] != -1 && array0[i+1] != -1 ){
    40f6:	f853 2b04 	ldr.w	r2, [r3], #4
    40fa:	3201      	adds	r2, #1
    40fc:	f104 0401 	add.w	r4, r4, #1
    4100:	d0f6      	beq.n	40f0 <ull_conn_done+0xfc8>
    4102:	681a      	ldr	r2, [r3, #0]
    4104:	3201      	adds	r2, #1
    4106:	d0f3      	beq.n	40f0 <ull_conn_done+0xfc8>
						for(int k= table_size-1; k > i+1; k --){
    4108:	428c      	cmp	r4, r1
    410a:	da0b      	bge.n	4124 <ull_conn_done+0xffc>
    410c:	46f2      	mov	sl, lr
    410e:	4660      	mov	r0, ip
							array0[k] = array0[k-1];
    4110:	f850 2c04 	ldr.w	r2, [r0, #-4]
    4114:	f840 2904 	str.w	r2, [r0], #-4
							array1[k] = array1[k-1];
    4118:	f85a 2c04 	ldr.w	r2, [sl, #-4]
    411c:	f84a 2904 	str.w	r2, [sl], #-4
						for(int k= table_size-1; k > i+1; k --){
    4120:	4283      	cmp	r3, r0
    4122:	d1f5      	bne.n	4110 <ull_conn_done+0xfe8>
						array1[i+1] =array1[i] + avg_conn_evt_length[array0[i]];
    4124:	f853 0c04 	ldr.w	r0, [r3, #-4]
    4128:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
    412c:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
						array0[i+1] = -1;
    4130:	f8c3 8000 	str.w	r8, [r3]
						array1[i+1] =array1[i] + avg_conn_evt_length[array0[i]];
    4134:	4402      	add	r2, r0
    4136:	f84b 2024 	str.w	r2, [fp, r4, lsl #2]
    413a:	e7d9      	b.n	40f0 <ull_conn_done+0xfc8>
								if(k>=table_size) array1[k%table_size] = array1[k%table_size] - max_conn_int*1.25;
    413c:	f7fc f922 	bl	384 <__aeabi_ui2d>
    4140:	4680      	mov	r8, r0
    4142:	6eb8      	ldr	r0, [r7, #104]	; 0x68
    4144:	4689      	mov	r9, r1
    4146:	f7fc f92d 	bl	3a4 <__aeabi_i2d>
    414a:	4b72      	ldr	r3, [pc, #456]	; (4314 <ull_conn_done+0x11ec>)
    414c:	2200      	movs	r2, #0
    414e:	f7fc f993 	bl	478 <__aeabi_dmul>
    4152:	460b      	mov	r3, r1
    4154:	4602      	mov	r2, r0
    4156:	4649      	mov	r1, r9
    4158:	4640      	mov	r0, r8
    415a:	f7fb ffd5 	bl	108 <__aeabi_dsub>
    415e:	f7fc fc4d 	bl	9fc <__aeabi_d2uiz>
    4162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    4164:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
    4168:	e57c      	b.n	3c64 <ull_conn_done+0xb3c>
				if (conn->apto_expire == 0U) {
    416a:	6e39      	ldr	r1, [r7, #96]	; 0x60
    416c:	f8b1 10b8 	ldrh.w	r1, [r1, #184]	; 0xb8
    4170:	2900      	cmp	r1, #0
    4172:	f47f abaa 	bne.w	38ca <ull_conn_done+0x7a2>
    4176:	e72e      	b.n	3fd6 <ull_conn_done+0xeae>
				uint32_t temp_temp_array[table_size];
    4178:	00a2      	lsls	r2, r4, #2
    417a:	1dd3      	adds	r3, r2, #7
    417c:	f023 0107 	bic.w	r1, r3, #7
			if(disconnected_handle == first_handle){
    4180:	f8c7 d050 	str.w	sp, [r7, #80]	; 0x50
				for(int i = 0; i<table_size; i ++) temp_temp_array[i] = array0[i];
    4184:	2c00      	cmp	r4, #0
				uint32_t temp_temp_array[table_size];
    4186:	ebad 0d01 	sub.w	sp, sp, r1
    418a:	66bb      	str	r3, [r7, #104]	; 0x68
    418c:	ab08      	add	r3, sp, #32
				for(int i = 0; i<table_size; i ++) temp_temp_array[i] = array0[i];
    418e:	f340 8448 	ble.w	4a22 <ull_conn_done+0x18fa>
    4192:	495b      	ldr	r1, [pc, #364]	; (4300 <ull_conn_done+0x11d8>)
    4194:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
    4198:	3a04      	subs	r2, #4
    419a:	1898      	adds	r0, r3, r2
    419c:	3b04      	subs	r3, #4
    419e:	460a      	mov	r2, r1
    41a0:	f852 1b04 	ldr.w	r1, [r2], #4
    41a4:	f843 1f04 	str.w	r1, [r3, #4]!
    41a8:	4283      	cmp	r3, r0
    41aa:	d1f9      	bne.n	41a0 <ull_conn_done+0x1078>
				for(int i =1; i < table_size; i ++){
    41ac:	2c01      	cmp	r4, #1
				int old_old_repeated_size = (old_max_conn_int/disconnected_interval);
    41ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
    41b2:	6fba      	ldr	r2, [r7, #120]	; 0x78
    41b4:	fb93 f3f2 	sdiv	r3, r3, r2
				for(int i =1; i < table_size; i ++){
    41b8:	f000 8447 	beq.w	4a4a <ull_conn_done+0x1922>
					temp_i = i/(table_size/old_old_repeated_size);
    41bc:	fb94 f3f3 	sdiv	r3, r4, r3
					uint32_t old_gap = array1[i]-array1[0]-minus_gap;
    41c0:	4a50      	ldr	r2, [pc, #320]	; (4304 <ull_conn_done+0x11dc>)
					uint32_t minus_gap = disconnected_interval*temp_i*1.25;
    41c2:	f8c7 b048 	str.w	fp, [r7, #72]	; 0x48
				int new_first_handle_index=-1;
    41c6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
					uint32_t old_gap = array1[i]-array1[0]-minus_gap;
    41ca:	6811      	ldr	r1, [r2, #0]
					uint32_t minus_gap = disconnected_interval*temp_i*1.25;
    41cc:	677d      	str	r5, [r7, #116]	; 0x74
    41ce:	4692      	mov	sl, r2
				uint32_t new_gap = -1;
    41d0:	462a      	mov	r2, r5
					uint32_t minus_gap = disconnected_interval*temp_i*1.25;
    41d2:	673d      	str	r5, [r7, #112]	; 0x70
				for(int i =1; i < table_size; i ++){
    41d4:	f04f 0901 	mov.w	r9, #1
					uint32_t minus_gap = disconnected_interval*temp_i*1.25;
    41d8:	460e      	mov	r6, r1
    41da:	461d      	mov	r5, r3
    41dc:	4693      	mov	fp, r2
    41de:	6fba      	ldr	r2, [r7, #120]	; 0x78
					uint32_t old_gap = array1[i]-array1[0]-minus_gap;
    41e0:	f85a 3f04 	ldr.w	r3, [sl, #4]!
					temp_i = i/(table_size/old_old_repeated_size);
    41e4:	fb99 f0f5 	sdiv	r0, r9, r5
					uint32_t minus_gap = disconnected_interval*temp_i*1.25;
    41e8:	fb02 f000 	mul.w	r0, r2, r0
					uint32_t old_gap = array1[i]-array1[0]-minus_gap;
    41ec:	eba3 0806 	sub.w	r8, r3, r6
					uint32_t minus_gap = disconnected_interval*temp_i*1.25;
    41f0:	f7fc f8d8 	bl	3a4 <__aeabi_i2d>
    41f4:	4b47      	ldr	r3, [pc, #284]	; (4314 <ull_conn_done+0x11ec>)
    41f6:	2200      	movs	r2, #0
    41f8:	f7fc f93e 	bl	478 <__aeabi_dmul>
    41fc:	f7fc fbfe 	bl	9fc <__aeabi_d2uiz>
					uint32_t old_gap = array1[i]-array1[0]-minus_gap;
    4200:	eba8 0800 	sub.w	r8, r8, r0
					if(old_gap<new_gap && array0[i] < CONFIG_BT_MAX_CONN){
    4204:	45d8      	cmp	r8, fp
    4206:	d209      	bcs.n	421c <ull_conn_done+0x10f4>
    4208:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    420c:	f853 3029 	ldr.w	r3, [r3, r9, lsl #2]
    4210:	2b03      	cmp	r3, #3
    4212:	d803      	bhi.n	421c <ull_conn_done+0x10f4>
						new_first_handle = array0[i];
    4214:	677b      	str	r3, [r7, #116]	; 0x74
    4216:	46c3      	mov	fp, r8
    4218:	f8c7 9070 	str.w	r9, [r7, #112]	; 0x70
				for(int i =1; i < table_size; i ++){
    421c:	f109 0901 	add.w	r9, r9, #1
    4220:	45a1      	cmp	r9, r4
    4222:	d1dc      	bne.n	41de <ull_conn_done+0x10b6>
				int temp_temp_temp_array[table_size];	
    4224:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    4226:	f8d7 b048 	ldr.w	fp, [r7, #72]	; 0x48
				int new_repeated_size = (old_max_conn_int/conn_int_table[new_first_handle]);					
    422a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
				int temp_temp_temp_array[table_size];	
    422e:	f023 0307 	bic.w	r3, r3, #7
    4232:	e9d7 561c 	ldrd	r5, r6, [r7, #112]	; 0x70
    4236:	ebad 0d03 	sub.w	sp, sp, r3
				int new_repeated_size = (old_max_conn_int/conn_int_table[new_first_handle]);					
    423a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
				int temp_temp_temp_array[table_size];	
    423c:	a908      	add	r1, sp, #32
				int new_repeated_size = (old_max_conn_int/conn_int_table[new_first_handle]);					
    423e:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
    4242:	fbb2 faf3 	udiv	sl, r2, r3
				for(int i = 0; i <table_size; i ++) {	
    4246:	4a2e      	ldr	r2, [pc, #184]	; (4300 <ull_conn_done+0x11d8>)
    4248:	1f08      	subs	r0, r1, #4
				int new_first_handle = -1;
    424a:	2300      	movs	r3, #0
					array0[i] = -1;
    424c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    4250:	468e      	mov	lr, r1
				for(int i = 0; i <table_size; i ++) {	
    4252:	3301      	adds	r3, #1
					temp_temp_temp_array[i] = array0[i];
    4254:	6811      	ldr	r1, [r2, #0]
    4256:	f840 1f04 	str.w	r1, [r0, #4]!
				for(int i = 0; i <table_size; i ++) {	
    425a:	42a3      	cmp	r3, r4
					array0[i] = -1;
    425c:	f842 cb04 	str.w	ip, [r2], #4
				for(int i = 0; i <table_size; i ++) {	
    4260:	dbf7      	blt.n	4252 <ull_conn_done+0x112a>
    4262:	4671      	mov	r1, lr
				for(int i = 0; i <new_repeated_size; i ++){
    4264:	f1ba 0f00 	cmp.w	sl, #0
    4268:	dd3e      	ble.n	42e8 <ull_conn_done+0x11c0>
    426a:	fb94 f0fa 	sdiv	r0, r4, sl
    426e:	4b24      	ldr	r3, [pc, #144]	; (4300 <ull_conn_done+0x11d8>)
    4270:	f8c7 b080 	str.w	fp, [r7, #128]	; 0x80
    4274:	f04f 0e00 	mov.w	lr, #0
    4278:	46f0      	mov	r8, lr
    427a:	4699      	mov	r9, r3
					while( temp_temp_temp_array[temp_j%table_size] != new_first_handle) temp_j ++;
    427c:	fb95 f3f4 	sdiv	r3, r5, r4
    4280:	fb04 5313 	mls	r3, r4, r3, r5
    4284:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    4288:	429e      	cmp	r6, r3
    428a:	d008      	beq.n	429e <ull_conn_done+0x1176>
    428c:	3501      	adds	r5, #1
    428e:	fb95 f3f4 	sdiv	r3, r5, r4
    4292:	fb04 5313 	mls	r3, r4, r3, r5
    4296:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    429a:	42b3      	cmp	r3, r6
    429c:	d1f6      	bne.n	428c <ull_conn_done+0x1164>
					array0[i*table_size/new_repeated_size] = new_first_handle;
    429e:	fb9e fcfa 	sdiv	ip, lr, sl
					for(int j = 1; j < table_size/new_repeated_size; j ++){
    42a2:	2801      	cmp	r0, #1
					array0[i*table_size/new_repeated_size] = new_first_handle;
    42a4:	f849 602c 	str.w	r6, [r9, ip, lsl #2]
					for(int j = 1; j < table_size/new_repeated_size; j ++){
    42a8:	bfc8      	it	gt
    42aa:	2301      	movgt	r3, #1
    42ac:	dd13      	ble.n	42d6 <ull_conn_done+0x11ae>
						if(temp_temp_temp_array[(temp_j+j)%table_size] == new_first_handle){
    42ae:	eb03 0b05 	add.w	fp, r3, r5
    42b2:	fb9b f2f4 	sdiv	r2, fp, r4
    42b6:	fb04 b212 	mls	r2, r4, r2, fp
							array0[i*table_size/new_repeated_size+j] = temp_temp_temp_array[(temp_j+j)%table_size];
    42ba:	eb0c 0b03 	add.w	fp, ip, r3
						if(temp_temp_temp_array[(temp_j+j)%table_size] == new_first_handle){
    42be:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    42c2:	42b2      	cmp	r2, r6
    42c4:	bf08      	it	eq
    42c6:	4603      	moveq	r3, r0
					for(int j = 1; j < table_size/new_repeated_size; j ++){
    42c8:	f103 0301 	add.w	r3, r3, #1
							array0[i*table_size/new_repeated_size+j] = temp_temp_temp_array[(temp_j+j)%table_size];
    42cc:	bf18      	it	ne
    42ce:	f849 202b 	strne.w	r2, [r9, fp, lsl #2]
					for(int j = 1; j < table_size/new_repeated_size; j ++){
    42d2:	4283      	cmp	r3, r0
    42d4:	dbeb      	blt.n	42ae <ull_conn_done+0x1186>
				for(int i = 0; i <new_repeated_size; i ++){
    42d6:	f108 0801 	add.w	r8, r8, #1
    42da:	45d0      	cmp	r8, sl
					temp_j ++;
    42dc:	f105 0501 	add.w	r5, r5, #1
				for(int i = 0; i <new_repeated_size; i ++){
    42e0:	44a6      	add	lr, r4
    42e2:	d1cb      	bne.n	427c <ull_conn_done+0x1154>
    42e4:	f8d7 b080 	ldr.w	fp, [r7, #128]	; 0x80
				first_handle = new_first_handle;
    42e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    42ea:	601e      	str	r6, [r3, #0]
    42ec:	681d      	ldr	r5, [r3, #0]
    42ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    42f0:	f8d7 d050 	ldr.w	sp, [r7, #80]	; 0x50
    42f4:	681c      	ldr	r4, [r3, #0]
    42f6:	4b08      	ldr	r3, [pc, #32]	; (4318 <ull_conn_done+0x11f0>)
    42f8:	f8d3 9000 	ldr.w	r9, [r3]
    42fc:	f7fe bff3 	b.w	32e6 <ull_conn_done+0x1be>
    4300:	20003f00 	.word	0x20003f00
    4304:	20004f00 	.word	0x20004f00
    4308:	20005f10 	.word	0x20005f10
    430c:	20008334 	.word	0x20008334
    4310:	20004efc 	.word	0x20004efc
    4314:	3ff40000 	.word	0x3ff40000
    4318:	200075d8 	.word	0x200075d8
				for (int i =0; i <table_size; i ++){
    431c:	f1b9 0f00 	cmp.w	r9, #0
    4320:	dd09      	ble.n	4336 <ull_conn_done+0x120e>
    4322:	499c      	ldr	r1, [pc, #624]	; (4594 <ull_conn_done+0x146c>)
    4324:	4a9c      	ldr	r2, [pc, #624]	; (4598 <ull_conn_done+0x1470>)
						for(int k= table_size-1; k > i+1; k --){
    4326:	2300      	movs	r3, #0
				for (int i =0; i <table_size; i ++){
    4328:	3301      	adds	r3, #1
					temp_array1[i] = array1[i];
    432a:	f851 0b04 	ldr.w	r0, [r1], #4
    432e:	f842 0b04 	str.w	r0, [r2], #4
				for (int i =0; i <table_size; i ++){
    4332:	4599      	cmp	r9, r3
    4334:	dcf8      	bgt.n	4328 <ull_conn_done+0x1200>
				for(int need_cell_cnt = 1; need_cell_cnt< 2048/max_conn_int; need_cell_cnt *= 2){
    4336:	6eba      	ldr	r2, [r7, #104]	; 0x68
    4338:	f44f 6300 	mov.w	r3, #2048	; 0x800
    433c:	fb93 f3f2 	sdiv	r3, r3, r2
    4340:	2b01      	cmp	r3, #1
    4342:	4b96      	ldr	r3, [pc, #600]	; (459c <ull_conn_done+0x1474>)
    4344:	61fb      	str	r3, [r7, #28]
    4346:	f340 8369 	ble.w	4a1c <ull_conn_done+0x18f4>
    434a:	4a95      	ldr	r2, [pc, #596]	; (45a0 <ull_conn_done+0x1478>)
    434c:	643a      	str	r2, [r7, #64]	; 0x40
    434e:	4a95      	ldr	r2, [pc, #596]	; (45a4 <ull_conn_done+0x147c>)
    4350:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
    4354:	647b      	str	r3, [r7, #68]	; 0x44
				int need_cell_cnt_index = 0;
    4356:	2200      	movs	r2, #0
				for(int need_cell_cnt = 1; need_cell_cnt< 2048/max_conn_int; need_cell_cnt *= 2){
    4358:	2301      	movs	r3, #1
				int need_cell_cnt_index = 0;
    435a:	63ba      	str	r2, [r7, #56]	; 0x38
				for(int need_cell_cnt = 1; need_cell_cnt< 2048/max_conn_int; need_cell_cnt *= 2){
    435c:	667b      	str	r3, [r7, #100]	; 0x64
					while(array0[i]!=-1){
    435e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    4362:	681b      	ldr	r3, [r3, #0]
    4364:	3301      	adds	r3, #1
					int i = 0;
    4366:	bf08      	it	eq
    4368:	2500      	moveq	r5, #0
					while(array0[i]!=-1){
    436a:	d007      	beq.n	437c <ull_conn_done+0x1254>
    436c:	4b8d      	ldr	r3, [pc, #564]	; (45a4 <ull_conn_done+0x147c>)
					int i = 0;
    436e:	2500      	movs	r5, #0
					while(array0[i]!=-1){
    4370:	f853 2f04 	ldr.w	r2, [r3, #4]!
    4374:	3201      	adds	r2, #1
						i++;
    4376:	f105 0501 	add.w	r5, r5, #1
					while(array0[i]!=-1){
    437a:	d1f9      	bne.n	4370 <ull_conn_done+0x1248>
					uint32_t temp_temp_max_empty_cell_size[table_size];
    437c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    437e:	f8c7 d030 	str.w	sp, [r7, #48]	; 0x30
    4382:	681e      	ldr	r6, [r3, #0]
    4384:	00b3      	lsls	r3, r6, #2
    4386:	3307      	adds	r3, #7
    4388:	f023 0307 	bic.w	r3, r3, #7
    438c:	ebad 0d03 	sub.w	sp, sp, r3
					for(int j = 0; j <table_size; j ++) temp_temp_max_empty_cell_size[j] = -1;
    4390:	2e00      	cmp	r6, #0
					uint32_t temp_temp_max_empty_cell_size[table_size];
    4392:	f106 33ff 	add.w	r3, r6, #4294967295	; 0xffffffff
    4396:	ac08      	add	r4, sp, #32
    4398:	63fb      	str	r3, [r7, #60]	; 0x3c
					for(int j = 0; j <table_size; j ++) temp_temp_max_empty_cell_size[j] = -1;
    439a:	f340 8192 	ble.w	46c2 <ull_conn_done+0x159a>
    439e:	1f23      	subs	r3, r4, #4
    43a0:	623b      	str	r3, [r7, #32]
    43a2:	461a      	mov	r2, r3
    43a4:	2300      	movs	r3, #0
    43a6:	3301      	adds	r3, #1
    43a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    43ac:	429e      	cmp	r6, r3
    43ae:	f842 1f04 	str.w	r1, [r2, #4]!
    43b2:	d1f8      	bne.n	43a6 <ull_conn_done+0x127e>
					for(; i <table_size; i ++){
    43b4:	6eb8      	ldr	r0, [r7, #104]	; 0x68
    43b6:	f7fb fff5 	bl	3a4 <__aeabi_i2d>
    43ba:	4b7b      	ldr	r3, [pc, #492]	; (45a8 <ull_conn_done+0x1480>)
    43bc:	2200      	movs	r2, #0
    43be:	f7fc f85b 	bl	478 <__aeabi_dmul>
    43c2:	42ae      	cmp	r6, r5
    43c4:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58
    43c8:	f340 80f2 	ble.w	45b0 <ull_conn_done+0x1488>
    43cc:	00ab      	lsls	r3, r5, #2
    43ce:	1f1a      	subs	r2, r3, #4
    43d0:	18e3      	adds	r3, r4, r3
								temp_temp_max_empty_cell_size[i] = temp_array1[0] +max_conn_int*1.25 - temp_array1[i];
    43d2:	4971      	ldr	r1, [pc, #452]	; (4598 <ull_conn_done+0x1470>)
    43d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    43d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    43dc:	6809      	ldr	r1, [r1, #0]
    43de:	6379      	str	r1, [r7, #52]	; 0x34
    43e0:	4413      	add	r3, r2
    43e2:	66fb      	str	r3, [r7, #108]	; 0x6c
    43e4:	f8c7 5088 	str.w	r5, [r7, #136]	; 0x88
    43e8:	e00f      	b.n	440a <ull_conn_done+0x12e2>
							temp_temp_max_empty_cell_size[i] = -1;
    43ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
    43ee:	461a      	mov	r2, r3
    43f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    43f4:	6013      	str	r3, [r2, #0]
					for(; i <table_size; i ++){
    43f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
    43fa:	3304      	adds	r3, #4
    43fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    4400:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
    4404:	429e      	cmp	r6, r3
    4406:	f340 80d3 	ble.w	45b0 <ull_conn_done+0x1488>
						if(array0[i] == -1){
    440a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    440c:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
    4410:	f852 3f04 	ldr.w	r3, [r2, #4]!
    4414:	66fa      	str	r2, [r7, #108]	; 0x6c
    4416:	3301      	adds	r3, #1
    4418:	460a      	mov	r2, r1
    441a:	f101 0101 	add.w	r1, r1, #1
    441e:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
    4422:	d1e2      	bne.n	43ea <ull_conn_done+0x12c2>
							if(i==table_size-1){
    4424:	4b61      	ldr	r3, [pc, #388]	; (45ac <ull_conn_done+0x1484>)
    4426:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
    442a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    442c:	4293      	cmp	r3, r2
    442e:	f000 8128 	beq.w	4682 <ull_conn_done+0x155a>
								temp_temp_max_empty_cell_size[i] = temp_array1[i+1] - temp_array1[i];
    4432:	4b59      	ldr	r3, [pc, #356]	; (4598 <ull_conn_done+0x1470>)
    4434:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
    4438:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    443c:	1b00      	subs	r0, r0, r4
							for(int j = 1; j <need_cell_cnt; j ++){
    443e:	6e7d      	ldr	r5, [r7, #100]	; 0x64
    4440:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
    4444:	2d01      	cmp	r5, #1
    4446:	6018      	str	r0, [r3, #0]
    4448:	d0d5      	beq.n	43f6 <ull_conn_done+0x12ce>
								int k =temp_array1[i]+j*max_conn_int*1.25/need_cell_cnt;
    444a:	4620      	mov	r0, r4
    444c:	f7fb ff9a 	bl	384 <__aeabi_ui2d>
    4450:	4602      	mov	r2, r0
    4452:	460b      	mov	r3, r1
								while(k > temp_array1[0] + max_conn_int*1.25) k -= max_conn_int*1.25;
    4454:	6b78      	ldr	r0, [r7, #52]	; 0x34
								int k =temp_array1[i]+j*max_conn_int*1.25/need_cell_cnt;
    4456:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
								while(k > temp_array1[0] + max_conn_int*1.25) k -= max_conn_int*1.25;
    445a:	f7fb ff93 	bl	384 <__aeabi_ui2d>
    445e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
    4462:	f7fb fe53 	bl	10c <__adddf3>
    4466:	4682      	mov	sl, r0
    4468:	4628      	mov	r0, r5
    446a:	468b      	mov	fp, r1
    446c:	f7fb ff9a 	bl	3a4 <__aeabi_i2d>
    4470:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
    4474:	2301      	movs	r3, #1
    4476:	6ebd      	ldr	r5, [r7, #104]	; 0x68
    4478:	67bb      	str	r3, [r7, #120]	; 0x78
								int k =temp_array1[i]+j*max_conn_int*1.25/need_cell_cnt;
    447a:	4628      	mov	r0, r5
    447c:	f7fb ff92 	bl	3a4 <__aeabi_i2d>
    4480:	4b49      	ldr	r3, [pc, #292]	; (45a8 <ull_conn_done+0x1480>)
    4482:	2200      	movs	r2, #0
    4484:	f7fb fff8 	bl	478 <__aeabi_dmul>
    4488:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
    448c:	f7fc f91e 	bl	6cc <__aeabi_ddiv>
    4490:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
    4494:	f7fb fe3a 	bl	10c <__adddf3>
    4498:	f7fc fa88 	bl	9ac <__aeabi_d2iz>
    449c:	4604      	mov	r4, r0
								while(k > temp_array1[0] + max_conn_int*1.25) k -= max_conn_int*1.25;
    449e:	f7fb ff81 	bl	3a4 <__aeabi_i2d>
    44a2:	4652      	mov	r2, sl
    44a4:	465b      	mov	r3, fp
    44a6:	4680      	mov	r8, r0
    44a8:	4689      	mov	r9, r1
    44aa:	f7fc fa75 	bl	998 <__aeabi_dcmpgt>
    44ae:	b1c0      	cbz	r0, 44e2 <ull_conn_done+0x13ba>
    44b0:	e9c7 561c 	strd	r5, r6, [r7, #112]	; 0x70
    44b4:	e9d7 5616 	ldrd	r5, r6, [r7, #88]	; 0x58
    44b8:	462a      	mov	r2, r5
    44ba:	4633      	mov	r3, r6
    44bc:	4640      	mov	r0, r8
    44be:	4649      	mov	r1, r9
    44c0:	f7fb fe22 	bl	108 <__aeabi_dsub>
    44c4:	f7fc fa72 	bl	9ac <__aeabi_d2iz>
    44c8:	4604      	mov	r4, r0
    44ca:	f7fb ff6b 	bl	3a4 <__aeabi_i2d>
    44ce:	4652      	mov	r2, sl
    44d0:	465b      	mov	r3, fp
    44d2:	4680      	mov	r8, r0
    44d4:	4689      	mov	r9, r1
    44d6:	f7fc fa5f 	bl	998 <__aeabi_dcmpgt>
    44da:	2800      	cmp	r0, #0
    44dc:	d1ec      	bne.n	44b8 <ull_conn_done+0x1390>
    44de:	e9d7 561c 	ldrd	r5, r6, [r7, #112]	; 0x70
    44e2:	4a2d      	ldr	r2, [pc, #180]	; (4598 <ull_conn_done+0x1470>)
								int k_int = 0;
    44e4:	2300      	movs	r3, #0
    44e6:	e001      	b.n	44ec <ull_conn_done+0x13c4>
								while(temp_array1[k_int+1] <= k && k_int+1 < table_size) k_int ++;//1008 add =
    44e8:	42b3      	cmp	r3, r6
    44ea:	da06      	bge.n	44fa <ull_conn_done+0x13d2>
    44ec:	f852 1f04 	ldr.w	r1, [r2, #4]!
    44f0:	42a1      	cmp	r1, r4
    44f2:	4618      	mov	r0, r3
    44f4:	f103 0301 	add.w	r3, r3, #1
    44f8:	d9f6      	bls.n	44e8 <ull_conn_done+0x13c0>
								if(array0[k_int] == -1){	//1008
    44fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    44fe:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    4502:	3301      	adds	r3, #1
    4504:	d00e      	beq.n	4524 <ull_conn_done+0x13fc>
									temp_temp_max_empty_cell_size[i] = -1;
    4506:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
    450a:	461a      	mov	r2, r3
    450c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4510:	6013      	str	r3, [r2, #0]
							for(int j = 1; j <need_cell_cnt; j ++){
    4512:	6eba      	ldr	r2, [r7, #104]	; 0x68
    4514:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    4516:	4415      	add	r5, r2
    4518:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    451a:	3301      	adds	r3, #1
    451c:	4293      	cmp	r3, r2
    451e:	67bb      	str	r3, [r7, #120]	; 0x78
    4520:	d1ab      	bne.n	447a <ull_conn_done+0x1352>
    4522:	e768      	b.n	43f6 <ull_conn_done+0x12ce>
    4524:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    4528:	1c43      	adds	r3, r0, #1
    452a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    452e:	e002      	b.n	4536 <ull_conn_done+0x140e>
									while(array0[k_int+1] == -1 &&k_int+1<table_size) k_int ++;
    4530:	42b3      	cmp	r3, r6
    4532:	da06      	bge.n	4542 <ull_conn_done+0x141a>
    4534:	3301      	adds	r3, #1
    4536:	f852 1b04 	ldr.w	r1, [r2], #4
    453a:	3101      	adds	r1, #1
    453c:	4684      	mov	ip, r0
    453e:	4618      	mov	r0, r3
    4540:	d0f6      	beq.n	4530 <ull_conn_done+0x1408>
									if(array0[k_int] == -1){
    4542:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    4546:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
    454a:	3201      	adds	r2, #1
    454c:	d1e1      	bne.n	4512 <ull_conn_done+0x13ea>
										if(k_int==table_size-1)
    454e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    4550:	4562      	cmp	r2, ip
    4552:	f000 80ab 	beq.w	46ac <ull_conn_done+0x1584>
											temp_size = temp_array1[(k_int+1)]- k;
    4556:	4a10      	ldr	r2, [pc, #64]	; (4598 <ull_conn_done+0x1470>)
    4558:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    455c:	1b1c      	subs	r4, r3, r4
    455e:	46a0      	mov	r8, r4
										if(temp_size < temp_temp_max_empty_cell_size[i] && temp_size<max_conn_int*1.25 &&temp_size>0&& temp_temp_max_empty_cell_size[i]!=-1) temp_temp_max_empty_cell_size[i] = temp_size;
    4560:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
    4564:	f8d3 9000 	ldr.w	r9, [r3]
    4568:	45a1      	cmp	r9, r4
    456a:	d9d2      	bls.n	4512 <ull_conn_done+0x13ea>
    456c:	4640      	mov	r0, r8
    456e:	f7fb ff19 	bl	3a4 <__aeabi_i2d>
    4572:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
    4576:	f7fc f9f1 	bl	95c <__aeabi_dcmplt>
    457a:	2800      	cmp	r0, #0
    457c:	d0c9      	beq.n	4512 <ull_conn_done+0x13ea>
    457e:	f1b8 0f00 	cmp.w	r8, #0
    4582:	ddc6      	ble.n	4512 <ull_conn_done+0x13ea>
    4584:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
    4588:	d0c3      	beq.n	4512 <ull_conn_done+0x13ea>
    458a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
    458e:	601c      	str	r4, [r3, #0]
    4590:	e7bf      	b.n	4512 <ull_conn_done+0x13ea>
    4592:	bf00      	nop
    4594:	20004f00 	.word	0x20004f00
    4598:	20008334 	.word	0x20008334
    459c:	200075dc 	.word	0x200075dc
    45a0:	20009334 	.word	0x20009334
    45a4:	20003f00 	.word	0x20003f00
    45a8:	3ff40000 	.word	0x3ff40000
    45ac:	20008330 	.word	0x20008330
					max_empty_cell[need_cell_cnt_index] = -1;
    45b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    45b2:	f8d7 8020 	ldr.w	r8, [r7, #32]
								int k_int = 0;
    45b6:	f8d7 9040 	ldr.w	r9, [r7, #64]	; 0x40
					max_empty_cell[need_cell_cnt_index] = -1;
    45ba:	461a      	mov	r2, r3
    45bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    45c0:	6013      	str	r3, [r2, #0]
					temp_max_empty_cell_size[need_cell_cnt_index] = 0;
    45c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
								int k_int = 0;
    45c4:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
					temp_max_empty_cell_size[need_cell_cnt_index] = 0;
    45c8:	461a      	mov	r2, r3
    45ca:	2300      	movs	r3, #0
    45cc:	6013      	str	r3, [r2, #0]
								int k_int = 0;
    45ce:	2400      	movs	r4, #0
						if((temp_temp_max_empty_cell_size[k] < max_conn_int*1.25 && temp_temp_max_empty_cell_size[k] > 0 && temp_max_empty_cell_size[need_cell_cnt_index] < temp_temp_max_empty_cell_size[k])) {
    45d0:	f858 5f04 	ldr.w	r5, [r8, #4]!
    45d4:	4628      	mov	r0, r5
    45d6:	f7fb fed5 	bl	384 <__aeabi_ui2d>
    45da:	4652      	mov	r2, sl
    45dc:	465b      	mov	r3, fp
    45de:	f7fc f9bd 	bl	95c <__aeabi_dcmplt>
    45e2:	b140      	cbz	r0, 45f6 <ull_conn_done+0x14ce>
    45e4:	b13d      	cbz	r5, 45f6 <ull_conn_done+0x14ce>
    45e6:	f8d9 3000 	ldr.w	r3, [r9]
    45ea:	429d      	cmp	r5, r3
    45ec:	d903      	bls.n	45f6 <ull_conn_done+0x14ce>
							max_empty_cell[need_cell_cnt_index] = k;
    45ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
							temp_max_empty_cell_size[need_cell_cnt_index] = temp_temp_max_empty_cell_size[k];
    45f0:	f8c9 5000 	str.w	r5, [r9]
							max_empty_cell[need_cell_cnt_index] = k;
    45f4:	601c      	str	r4, [r3, #0]
					for(int k = 0; k <table_size; k ++){
    45f6:	3401      	adds	r4, #1
    45f8:	42a6      	cmp	r6, r4
    45fa:	dce9      	bgt.n	45d0 <ull_conn_done+0x14a8>
				for(int need_cell_cnt = 1; need_cell_cnt< 2048/max_conn_int; need_cell_cnt *= 2){
    45fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    45fe:	f8d7 d030 	ldr.w	sp, [r7, #48]	; 0x30
    4602:	005a      	lsls	r2, r3, #1
					need_cell_cnt_index ++;
    4604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
				for(int need_cell_cnt = 1; need_cell_cnt< 2048/max_conn_int; need_cell_cnt *= 2){
    4606:	667a      	str	r2, [r7, #100]	; 0x64
					need_cell_cnt_index ++;
    4608:	3301      	adds	r3, #1
    460a:	63bb      	str	r3, [r7, #56]	; 0x38
				for(int need_cell_cnt = 1; need_cell_cnt< 2048/max_conn_int; need_cell_cnt *= 2){
    460c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    460e:	3304      	adds	r3, #4
    4610:	647b      	str	r3, [r7, #68]	; 0x44
    4612:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4614:	3304      	adds	r3, #4
    4616:	643b      	str	r3, [r7, #64]	; 0x40
    4618:	4bc5      	ldr	r3, [pc, #788]	; (4930 <ull_conn_done+0x1808>)
    461a:	681b      	ldr	r3, [r3, #0]
    461c:	66bb      	str	r3, [r7, #104]	; 0x68
    461e:	4619      	mov	r1, r3
    4620:	f44f 6300 	mov.w	r3, #2048	; 0x800
    4624:	fb93 f3f1 	sdiv	r3, r3, r1
    4628:	4293      	cmp	r3, r2
    462a:	f73f ae98 	bgt.w	435e <ull_conn_done+0x1236>
				for(int i = need_cell_cnt_index; i <need_cell_size; i ++)
    462e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4630:	2b08      	cmp	r3, #8
    4632:	dc0b      	bgt.n	464c <ull_conn_done+0x1524>
    4634:	69fb      	ldr	r3, [r7, #28]
    4636:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    4638:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    463c:	3b04      	subs	r3, #4
					max_empty_cell[i] = -1;
    463e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
				for(int i = need_cell_cnt_index; i <need_cell_size; i ++)
    4642:	3101      	adds	r1, #1
    4644:	2909      	cmp	r1, #9
					max_empty_cell[i] = -1;
    4646:	f843 2f04 	str.w	r2, [r3, #4]!
				for(int i = need_cell_cnt_index; i <need_cell_size; i ++)
    464a:	d1fa      	bne.n	4642 <ull_conn_done+0x151a>
    464c:	48b9      	ldr	r0, [pc, #740]	; (4934 <ull_conn_done+0x180c>)
    464e:	4dba      	ldr	r5, [pc, #744]	; (4938 <ull_conn_done+0x1810>)
    4650:	f100 0624 	add.w	r6, r0, #36	; 0x24
    4654:	f06f 4c40 	mvn.w	ip, #3221225472	; 0xc0000000
					for(int j = max_empty_cell[i]; j >= 0; j --)
    4658:	f850 3f04 	ldr.w	r3, [r0, #4]!
    465c:	2b00      	cmp	r3, #0
    465e:	db0c      	blt.n	467a <ull_conn_done+0x1552>
    4660:	eb03 020c 	add.w	r2, r3, ip
    4664:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
    4668:	eb05 0282 	add.w	r2, r5, r2, lsl #2
						if(temp_array1[j] == temp_array1[max_empty_cell[i]]) max_empty_cell[i] = j;
    466c:	6003      	str	r3, [r0, #0]
					for(int j = max_empty_cell[i]; j >= 0; j --)
    466e:	3b01      	subs	r3, #1
    4670:	d303      	bcc.n	467a <ull_conn_done+0x1552>
    4672:	f852 1904 	ldr.w	r1, [r2], #-4
						if(temp_array1[j] == temp_array1[max_empty_cell[i]]) max_empty_cell[i] = j;
    4676:	428c      	cmp	r4, r1
    4678:	d0f8      	beq.n	466c <ull_conn_done+0x1544>
				for(int i = 0; i<need_cell_size; i ++){
    467a:	4286      	cmp	r6, r0
    467c:	d1ec      	bne.n	4658 <ull_conn_done+0x1530>
    467e:	f7ff b918 	b.w	38b2 <ull_conn_done+0x78a>
								temp_temp_max_empty_cell_size[i] = temp_array1[0] +max_conn_int*1.25 - temp_array1[i];
    4682:	6b78      	ldr	r0, [r7, #52]	; 0x34
    4684:	f7fb fe7e 	bl	384 <__aeabi_ui2d>
    4688:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
    468c:	f7fb fd3e 	bl	10c <__adddf3>
    4690:	4680      	mov	r8, r0
    4692:	4620      	mov	r0, r4
    4694:	4689      	mov	r9, r1
    4696:	f7fb fe75 	bl	384 <__aeabi_ui2d>
    469a:	4602      	mov	r2, r0
    469c:	460b      	mov	r3, r1
    469e:	4640      	mov	r0, r8
    46a0:	4649      	mov	r1, r9
    46a2:	f7fb fd31 	bl	108 <__aeabi_dsub>
    46a6:	f7fc f9a9 	bl	9fc <__aeabi_d2uiz>
    46aa:	e6c8      	b.n	443e <ull_conn_done+0x1316>
											temp_size = temp_array1[0] +max_conn_int*1.25 - k;
    46ac:	4642      	mov	r2, r8
    46ae:	464b      	mov	r3, r9
    46b0:	4650      	mov	r0, sl
    46b2:	4659      	mov	r1, fp
    46b4:	f7fb fd28 	bl	108 <__aeabi_dsub>
    46b8:	f7fc f978 	bl	9ac <__aeabi_d2iz>
    46bc:	4680      	mov	r8, r0
    46be:	4604      	mov	r4, r0
    46c0:	e74e      	b.n	4560 <ull_conn_done+0x1438>
					max_empty_cell[need_cell_cnt_index] = -1;
    46c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    46c4:	461a      	mov	r2, r3
    46c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    46ca:	6013      	str	r3, [r2, #0]
					temp_max_empty_cell_size[need_cell_cnt_index] = 0;
    46cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    46ce:	461a      	mov	r2, r3
    46d0:	2300      	movs	r3, #0
    46d2:	6013      	str	r3, [r2, #0]
					for(int k = 0; k <table_size; k ++){
    46d4:	e792      	b.n	45fc <ull_conn_done+0x14d4>
			conn_cleanup(conn, BT_HCI_ERR_CONN_TIMEOUT);
    46d6:	6e38      	ldr	r0, [r7, #96]	; 0x60
    46d8:	2108      	movs	r1, #8
    46da:	f012 fdf3 	bl	172c4 <conn_cleanup>
			return;
    46de:	f7ff b95d 	b.w	399c <ull_conn_done+0x874>
			if(scheduled_handle_cnt == 0) first_handle = conn_handle;
    46e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
    46e4:	601a      	str	r2, [r3, #0]
    46e6:	f7fe bedb 	b.w	34a0 <ull_conn_done+0x378>
						if(anchor_points[i] < standard_point) anchor_points[i] += conn_int_table[i]*1.25;
    46ea:	462b      	mov	r3, r5
    46ec:	4622      	mov	r2, r4
    46ee:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
    46f2:	f7fb fd0b 	bl	10c <__adddf3>
    46f6:	f7fc f981 	bl	9fc <__aeabi_d2uiz>
    46fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
    46fe:	6018      	str	r0, [r3, #0]
    4700:	f7ff ba70 	b.w	3be4 <ull_conn_done+0xabc>
				conn->apto_expire = 1U;
    4704:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    4706:	2301      	movs	r3, #1
    4708:	f8a2 30b8 	strh.w	r3, [r2, #184]	; 0xb8
    470c:	f7ff b918 	b.w	3940 <ull_conn_done+0x818>
				conn->llcp_ack -= 2U;
    4710:	3b02      	subs	r3, #2
				conn->llcp_type = LLCP_PING;
    4712:	2205      	movs	r2, #5
				conn->llcp_ack -= 2U;
    4714:	f885 30c0 	strb.w	r3, [r5, #192]	; 0xc0
				conn->llcp_type = LLCP_PING;
    4718:	f885 20c1 	strb.w	r2, [r5, #193]	; 0xc1
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
    471c:	f7ff b92b 	b.w	3976 <ull_conn_done+0x84e>
    4720:	f8d7 a088 	ldr.w	sl, [r7, #136]	; 0x88
				for(int i =0; i <CONFIG_BT_MAX_CONN; i ++){
    4724:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
    4728:	f10a 0a01 	add.w	sl, sl, #1
    472c:	3304      	adds	r3, #4
    472e:	f1ba 0f04 	cmp.w	sl, #4
    4732:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    4736:	f47e afed 	bne.w	3714 <ull_conn_done+0x5ec>
				for(int i =1; i<table_size; i ++)
    473a:	6d39      	ldr	r1, [r7, #80]	; 0x50
    473c:	2901      	cmp	r1, #1
    473e:	d017      	beq.n	4770 <ull_conn_done+0x1648>
    4740:	4b7e      	ldr	r3, [pc, #504]	; (493c <ull_conn_done+0x1814>)
    4742:	4a7f      	ldr	r2, [pc, #508]	; (4940 <ull_conn_done+0x1818>)
						if(array0[i-1] != -1) array1[i] = array1[i-1] + avg_conn_evt_length[array0[i-1]];
    4744:	4c7f      	ldr	r4, [pc, #508]	; (4944 <ull_conn_done+0x181c>)
    4746:	1f18      	subs	r0, r3, #4
    4748:	eb00 0081 	add.w	r0, r0, r1, lsl #2
					if(array0[i] == -1)
    474c:	f853 1f04 	ldr.w	r1, [r3, #4]!
    4750:	3101      	adds	r1, #1
    4752:	d109      	bne.n	4768 <ull_conn_done+0x1640>
						if(array0[i-1] != -1) array1[i] = array1[i-1] + avg_conn_evt_length[array0[i-1]];
    4754:	f853 1c04 	ldr.w	r1, [r3, #-4]
    4758:	6815      	ldr	r5, [r2, #0]
    475a:	1c4e      	adds	r6, r1, #1
    475c:	bf17      	itett	ne
    475e:	f854 1021 	ldrne.w	r1, [r4, r1, lsl #2]
						else array1[i] = array1[i-1];
    4762:	6055      	streq	r5, [r2, #4]
						if(array0[i-1] != -1) array1[i] = array1[i-1] + avg_conn_evt_length[array0[i-1]];
    4764:	1949      	addne	r1, r1, r5
    4766:	6051      	strne	r1, [r2, #4]
				for(int i =1; i<table_size; i ++)
    4768:	4298      	cmp	r0, r3
    476a:	f102 0204 	add.w	r2, r2, #4
    476e:	d1ed      	bne.n	474c <ull_conn_done+0x1624>
    4770:	4973      	ldr	r1, [pc, #460]	; (4940 <ull_conn_done+0x1818>)
    4772:	4a71      	ldr	r2, [pc, #452]	; (4938 <ull_conn_done+0x1810>)
    4774:	6d3c      	ldr	r4, [r7, #80]	; 0x50
						for(int k = standard_anchor_point; k < standard_anchor_point +table_size && j <max_conn_int/conn_int_table[i]; k ++){
    4776:	2300      	movs	r3, #0
				for (int i =0; i <table_size; i ++){
    4778:	3301      	adds	r3, #1
					temp_array1[i] = array1[i];
    477a:	f851 0b04 	ldr.w	r0, [r1], #4
    477e:	f842 0b04 	str.w	r0, [r2], #4
				for (int i =0; i <table_size; i ++){
    4782:	429c      	cmp	r4, r3
    4784:	dcf8      	bgt.n	4778 <ull_conn_done+0x1650>
				for(int i = 0; i <max_conn_int/conn_int_table[conn_handle]; i ++){
    4786:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    4788:	6dba      	ldr	r2, [r7, #88]	; 0x58
    478a:	68be      	ldr	r6, [r7, #8]
    478c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    4790:	4286      	cmp	r6, r0
    4792:	f0c0 8092 	bcc.w	48ba <ull_conn_done+0x1792>
    4796:	f8d7 b03c 	ldr.w	fp, [r7, #60]	; 0x3c
					uint32_t anchor_point = anchor_points[conn_handle] + i*conn_int_table[conn_handle]*1.25;
    479a:	6a3b      	ldr	r3, [r7, #32]
    479c:	fb00 f003 	mul.w	r0, r0, r3
    47a0:	f7fb fdf0 	bl	384 <__aeabi_ui2d>
    47a4:	4b68      	ldr	r3, [pc, #416]	; (4948 <ull_conn_done+0x1820>)
    47a6:	2200      	movs	r2, #0
    47a8:	f7fb fe66 	bl	478 <__aeabi_dmul>
    47ac:	697b      	ldr	r3, [r7, #20]
    47ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
    47b0:	4604      	mov	r4, r0
    47b2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    47b6:	460d      	mov	r5, r1
    47b8:	f7fb fde4 	bl	384 <__aeabi_ui2d>
    47bc:	4602      	mov	r2, r0
    47be:	460b      	mov	r3, r1
    47c0:	4620      	mov	r0, r4
    47c2:	4629      	mov	r1, r5
    47c4:	f7fb fca2 	bl	10c <__adddf3>
    47c8:	f7fc f918 	bl	9fc <__aeabi_d2uiz>
    47cc:	4682      	mov	sl, r0
					while(anchor_point > array1[0]+max_conn_int*1.25) {
    47ce:	f7fb fdd9 	bl	384 <__aeabi_ui2d>
    47d2:	4604      	mov	r4, r0
    47d4:	4630      	mov	r0, r6
    47d6:	460d      	mov	r5, r1
    47d8:	f7fb fde4 	bl	3a4 <__aeabi_i2d>
    47dc:	4b5a      	ldr	r3, [pc, #360]	; (4948 <ull_conn_done+0x1820>)
    47de:	f8db 6000 	ldr.w	r6, [fp]
    47e2:	2200      	movs	r2, #0
    47e4:	f7fb fe48 	bl	478 <__aeabi_dmul>
    47e8:	4680      	mov	r8, r0
    47ea:	4689      	mov	r9, r1
    47ec:	4630      	mov	r0, r6
    47ee:	f7fb fdc9 	bl	384 <__aeabi_ui2d>
    47f2:	4642      	mov	r2, r8
    47f4:	464b      	mov	r3, r9
    47f6:	e9c7 8924 	strd	r8, r9, [r7, #144]	; 0x90
    47fa:	f7fb fc87 	bl	10c <__adddf3>
    47fe:	4622      	mov	r2, r4
    4800:	462b      	mov	r3, r5
    4802:	4680      	mov	r8, r0
    4804:	4689      	mov	r9, r1
    4806:	f7fc f8a9 	bl	95c <__aeabi_dcmplt>
    480a:	b1e8      	cbz	r0, 4848 <ull_conn_done+0x1720>
    480c:	f8c7 b078 	str.w	fp, [r7, #120]	; 0x78
    4810:	e9d7 ab24 	ldrd	sl, fp, [r7, #144]	; 0x90
    4814:	f8c7 6088 	str.w	r6, [r7, #136]	; 0x88
						anchor_point = anchor_point - max_conn_int*1.25;
    4818:	4652      	mov	r2, sl
    481a:	465b      	mov	r3, fp
    481c:	4620      	mov	r0, r4
    481e:	4629      	mov	r1, r5
    4820:	f7fb fc72 	bl	108 <__aeabi_dsub>
    4824:	f7fc f8ea 	bl	9fc <__aeabi_d2uiz>
    4828:	4606      	mov	r6, r0
					while(anchor_point > array1[0]+max_conn_int*1.25) {
    482a:	f7fb fdab 	bl	384 <__aeabi_ui2d>
    482e:	4642      	mov	r2, r8
    4830:	464b      	mov	r3, r9
    4832:	4604      	mov	r4, r0
    4834:	460d      	mov	r5, r1
    4836:	f7fc f8af 	bl	998 <__aeabi_dcmpgt>
    483a:	2800      	cmp	r0, #0
    483c:	d1ec      	bne.n	4818 <ull_conn_done+0x16f0>
    483e:	46b2      	mov	sl, r6
    4840:	f8d7 b078 	ldr.w	fp, [r7, #120]	; 0x78
    4844:	f8d7 6088 	ldr.w	r6, [r7, #136]	; 0x88
					for(int j =1; j <table_size+1; j ++){
    4848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    484a:	681c      	ldr	r4, [r3, #0]
    484c:	1c61      	adds	r1, r4, #1
    484e:	2901      	cmp	r1, #1
    4850:	f340 8080 	ble.w	4954 <ull_conn_done+0x182c>
    4854:	6dbd      	ldr	r5, [r7, #88]	; 0x58
    4856:	f8d7 c080 	ldr.w	ip, [r7, #128]	; 0x80
					bool flag = false;
    485a:	2000      	movs	r0, #0
					for(int j =1; j <table_size+1; j ++){
    485c:	2301      	movs	r3, #1
    485e:	e011      	b.n	4884 <ull_conn_done+0x175c>
							if( (array1[j] > anchor_point&& j < table_size) || j ==table_size){
    4860:	429c      	cmp	r4, r3
    4862:	dd15      	ble.n	4890 <ull_conn_done+0x1768>
								if(array0[j-1] == -1){
    4864:	1e5a      	subs	r2, r3, #1
    4866:	f85c 6022 	ldr.w	r6, [ip, r2, lsl #2]
    486a:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
    486e:	d02d      	beq.n	48cc <ull_conn_done+0x17a4>
								else if(array0[j] == -1)
    4870:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
    4874:	3201      	adds	r2, #1
    4876:	d052      	beq.n	491e <ull_conn_done+0x17f6>
					for(int j =1; j <table_size+1; j ++){
    4878:	1c5a      	adds	r2, r3, #1
    487a:	428a      	cmp	r2, r1
    487c:	da0d      	bge.n	489a <ull_conn_done+0x1772>
    487e:	f85b 6023 	ldr.w	r6, [fp, r3, lsl #2]
    4882:	4613      	mov	r3, r2
						if(array1[j-1] <= anchor_point){
    4884:	45b2      	cmp	sl, r6
    4886:	d3f7      	bcc.n	4878 <ull_conn_done+0x1750>
							if( (array1[j] > anchor_point&& j < table_size) || j ==table_size){
    4888:	f85b 2023 	ldr.w	r2, [fp, r3, lsl #2]
    488c:	4552      	cmp	r2, sl
    488e:	d8e7      	bhi.n	4860 <ull_conn_done+0x1738>
    4890:	429c      	cmp	r4, r3
    4892:	d0e7      	beq.n	4864 <ull_conn_done+0x173c>
					for(int j =1; j <table_size+1; j ++){
    4894:	1c5a      	adds	r2, r3, #1
    4896:	428a      	cmp	r2, r1
    4898:	dbf1      	blt.n	487e <ull_conn_done+0x1756>
					if(!flag) {
    489a:	2800      	cmp	r0, #0
    489c:	d05a      	beq.n	4954 <ull_conn_done+0x182c>
				for(int i = 0; i <max_conn_int/conn_int_table[conn_handle]; i ++){
    489e:	4b24      	ldr	r3, [pc, #144]	; (4930 <ull_conn_done+0x1808>)
    48a0:	6a3a      	ldr	r2, [r7, #32]
    48a2:	681e      	ldr	r6, [r3, #0]
    48a4:	6db9      	ldr	r1, [r7, #88]	; 0x58
    48a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    48a8:	3201      	adds	r2, #1
    48aa:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
    48ae:	fbb6 f3f0 	udiv	r3, r6, r0
    48b2:	4293      	cmp	r3, r2
    48b4:	623a      	str	r2, [r7, #32]
    48b6:	f63f af70 	bhi.w	479a <ull_conn_done+0x1672>
    48ba:	f8d7 d004 	ldr.w	sp, [r7, #4]
			update_signal = true;
    48be:	4b23      	ldr	r3, [pc, #140]	; (494c <ull_conn_done+0x1824>)
    48c0:	4c23      	ldr	r4, [pc, #140]	; (4950 <ull_conn_done+0x1828>)
    48c2:	2201      	movs	r2, #1
    48c4:	6826      	ldr	r6, [r4, #0]
    48c6:	701a      	strb	r2, [r3, #0]
		if( start || (!need_update_dummy && handle_cnt[max_conn_index] > 1 && handle_cnt[max_conn_index] % M_num == 0  && conn_handle == max_conn_index && anchor_points[conn_handle] != 0 && scheduled_handles[conn_handle])){
    48c8:	f7ff b8bc 	b.w	3a44 <ull_conn_done+0x91c>
									if((array0[j-2] != conn_handle&& j>1)|| j == 1) {
    48cc:	1e9e      	subs	r6, r3, #2
    48ce:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
    48d2:	42ae      	cmp	r6, r5
    48d4:	d001      	beq.n	48da <ull_conn_done+0x17b2>
    48d6:	2b01      	cmp	r3, #1
    48d8:	dc03      	bgt.n	48e2 <ull_conn_done+0x17ba>
    48da:	2b01      	cmp	r3, #1
    48dc:	d1cc      	bne.n	4878 <ull_conn_done+0x1750>
    48de:	f85c 6c04 	ldr.w	r6, [ip, #-4]
    48e2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    48e6:	3b03      	subs	r3, #3
    48e8:	eb0b 0083 	add.w	r0, fp, r3, lsl #2
    48ec:	3008      	adds	r0, #8
    48ee:	eb0c 0e83 	add.w	lr, ip, r3, lsl #2
    48f2:	e007      	b.n	4904 <ull_conn_done+0x17dc>
										while(array0[j-2] == -1 && array1[j-2] == array1[j-1] && j-2>=0)
    48f4:	e953 6301 	ldrd	r6, r3, [r3, #-4]
    48f8:	429e      	cmp	r6, r3
    48fa:	d10b      	bne.n	4914 <ull_conn_done+0x17ec>
    48fc:	1c53      	adds	r3, r2, #1
    48fe:	d009      	beq.n	4914 <ull_conn_done+0x17ec>
    4900:	f85e 6904 	ldr.w	r6, [lr], #-4
    4904:	3601      	adds	r6, #1
    4906:	4603      	mov	r3, r0
    4908:	4690      	mov	r8, r2
    490a:	f1a0 0004 	sub.w	r0, r0, #4
    490e:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
    4912:	d0ef      	beq.n	48f4 <ull_conn_done+0x17cc>
										array0[j-1] = conn_handle;
    4914:	f84c 5028 	str.w	r5, [ip, r8, lsl #2]
    4918:	460b      	mov	r3, r1
										flag = true;
    491a:	2001      	movs	r0, #1
    491c:	e7ac      	b.n	4878 <ull_conn_done+0x1750>
									if((array0[j-1] != conn_handle&& j>0)|| j == 0) {
    491e:	42ae      	cmp	r6, r5
    4920:	d022      	beq.n	4968 <ull_conn_done+0x1840>
    4922:	2b00      	cmp	r3, #0
    4924:	dd20      	ble.n	4968 <ull_conn_done+0x1840>
										array0[j] = conn_handle;
    4926:	f84c 5023 	str.w	r5, [ip, r3, lsl #2]
										flag = true;
    492a:	2001      	movs	r0, #1
										array0[j] = conn_handle;
    492c:	460b      	mov	r3, r1
    492e:	e7a3      	b.n	4878 <ull_conn_done+0x1750>
    4930:	200075d8 	.word	0x200075d8
    4934:	200075d8 	.word	0x200075d8
    4938:	20008334 	.word	0x20008334
    493c:	20003f00 	.word	0x20003f00
    4940:	20004f00 	.word	0x20004f00
    4944:	20005f10 	.word	0x20005f10
    4948:	3ff40000 	.word	0x3ff40000
    494c:	2000a865 	.word	0x2000a865
    4950:	2000060c 	.word	0x2000060c
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    4954:	6dba      	ldr	r2, [r7, #88]	; 0x58
    4956:	489a      	ldr	r0, [pc, #616]	; (4bc0 <ull_conn_done+0x1a98>)
    4958:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
    495c:	f00b fb60 	bl	10020 <mem_get>
						conn_cleanup(ll_conn_get(conn_handle), BT_HCI_ERR_CONN_FAIL_TO_ESTAB);
    4960:	213e      	movs	r1, #62	; 0x3e
    4962:	f012 fcaf 	bl	172c4 <conn_cleanup>
    4966:	e79a      	b.n	489e <ull_conn_done+0x1776>
									if((array0[j-1] != conn_handle&& j>0)|| j == 0) {
    4968:	2b00      	cmp	r3, #0
    496a:	d185      	bne.n	4878 <ull_conn_done+0x1750>
    496c:	e7db      	b.n	4926 <ull_conn_done+0x17fe>
								if(k>=table_size) array1[k%table_size] = array1[k%table_size] - max_conn_int*1.25;
    496e:	f7fb fd09 	bl	384 <__aeabi_ui2d>
    4972:	4680      	mov	r8, r0
    4974:	68b8      	ldr	r0, [r7, #8]
    4976:	4689      	mov	r9, r1
    4978:	f7fb fd14 	bl	3a4 <__aeabi_i2d>
    497c:	4b91      	ldr	r3, [pc, #580]	; (4bc4 <ull_conn_done+0x1a9c>)
    497e:	2200      	movs	r2, #0
    4980:	f7fb fd7a 	bl	478 <__aeabi_dmul>
    4984:	460b      	mov	r3, r1
    4986:	4602      	mov	r2, r0
    4988:	4649      	mov	r1, r9
    498a:	4640      	mov	r0, r8
    498c:	f7fb fbbc 	bl	108 <__aeabi_dsub>
    4990:	f7fc f834 	bl	9fc <__aeabi_d2uiz>
    4994:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    4996:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
    499a:	f7fe bf74 	b.w	3886 <ull_conn_done+0x75e>
				array0[0] = conn_handle;
    499e:	4a8a      	ldr	r2, [pc, #552]	; (4bc8 <ull_conn_done+0x1aa0>)
    49a0:	6db8      	ldr	r0, [r7, #88]	; 0x58
				array0[1] = -1;
    49a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    49a6:	e9c2 0300 	strd	r0, r3, [r2]
    49aa:	e788      	b.n	48be <ull_conn_done+0x1796>
    49ac:	f8d7 b050 	ldr.w	fp, [r7, #80]	; 0x50
    49b0:	f7fe be9b 	b.w	36ea <ull_conn_done+0x5c2>
			conn_cleanup(conn, BT_HCI_ERR_CONN_FAIL_TO_ESTAB);
    49b4:	6e38      	ldr	r0, [r7, #96]	; 0x60
    49b6:	213e      	movs	r1, #62	; 0x3e
    49b8:	f012 fc84 	bl	172c4 <conn_cleanup>
			return;
    49bc:	f7fe bfee 	b.w	399c <ull_conn_done+0x874>
    49c0:	46c8      	mov	r8, r9
    49c2:	f7ff b86f 	b.w	3aa4 <ull_conn_done+0x97c>
			table_size = temp_table_size;
    49c6:	2301      	movs	r3, #1
    49c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
			if(scheduled_handle_cnt == 1){
    49ca:	429e      	cmp	r6, r3
			table_size = temp_table_size;
    49cc:	6013      	str	r3, [r2, #0]
			if(scheduled_handle_cnt == 1){
    49ce:	d0e6      	beq.n	499e <ull_conn_done+0x1876>
					temp_array[i] = array0[i];
    49d0:	4c7d      	ldr	r4, [pc, #500]	; (4bc8 <ull_conn_done+0x1aa0>)
					temp_temp_array[i] = array1[i];
    49d2:	4d7e      	ldr	r5, [pc, #504]	; (4bcc <ull_conn_done+0x1aa4>)
					temp_array[i] = array0[i];
    49d4:	6822      	ldr	r2, [r4, #0]
					temp_temp_array[i] = array1[i];
    49d6:	6829      	ldr	r1, [r5, #0]
					temp_array[i] = array0[i];
    49d8:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
					array1[i] = 0;
    49dc:	2200      	movs	r2, #0
					array0[i] = -1;
    49de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
					temp_temp_array[i] = array1[i];
    49e2:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
					array1[i] = 0;
    49e6:	602a      	str	r2, [r5, #0]
				for(int k = 0; k < repeated_size/old_repeated_size; k ++)
    49e8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
    49ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
    49ec:	fb92 f2f1 	sdiv	r2, r2, r1
    49f0:	2a00      	cmp	r2, #0
					temp_array[i] = array0[i];
    49f2:	f8c7 4080 	str.w	r4, [r7, #128]	; 0x80
					temp_temp_array[i] = array1[i];
    49f6:	63fd      	str	r5, [r7, #60]	; 0x3c
					array0[i] = -1;
    49f8:	6020      	str	r0, [r4, #0]
			else{
    49fa:	f8c7 d004 	str.w	sp, [r7, #4]
				for(int k = 0; k < repeated_size/old_repeated_size; k ++)
    49fe:	613a      	str	r2, [r7, #16]
			int temp_table_size = 1;
    4a00:	653b      	str	r3, [r7, #80]	; 0x50
				for(int k = 0; k < repeated_size/old_repeated_size; k ++)
    4a02:	f77e ae43 	ble.w	368c <ull_conn_done+0x564>
				int temp_array[table_size], temp_temp_array[table_size];
    4a06:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
    4a0a:	633b      	str	r3, [r7, #48]	; 0x30
    4a0c:	f107 0398 	add.w	r3, r7, #152	; 0x98
    4a10:	637b      	str	r3, [r7, #52]	; 0x34
    4a12:	f7fe bdbe 	b.w	3592 <ull_conn_done+0x46a>
				int standard_anchor_point =0;
    4a16:	4680      	mov	r8, r0
    4a18:	f7ff b844 	b.w	3aa4 <ull_conn_done+0x97c>
				int need_cell_cnt_index = 0;
    4a1c:	2300      	movs	r3, #0
    4a1e:	63bb      	str	r3, [r7, #56]	; 0x38
    4a20:	e608      	b.n	4634 <ull_conn_done+0x150c>
				int new_repeated_size = (old_max_conn_int/conn_int_table[new_first_handle]);					
    4a22:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    4a24:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
    4a28:	f853 3c04 	ldr.w	r3, [r3, #-4]
    4a2c:	fbb2 faf3 	udiv	sl, r2, r3
				int temp_temp_temp_array[table_size];	
    4a30:	ebad 0d01 	sub.w	sp, sp, r1
				int new_first_handle_index=-1;
    4a34:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
				int temp_temp_temp_array[table_size];	
    4a38:	a908      	add	r1, sp, #32
				int new_first_handle = -1;
    4a3a:	462e      	mov	r6, r5
    4a3c:	e412      	b.n	4264 <ull_conn_done+0x113c>
				for (int i =0; i <table_size; i ++){
    4a3e:	f43f ab39 	beq.w	40b4 <ull_conn_done+0xf8c>
				for(int i = 0; i < table_size-1; i ++){
    4a42:	2900      	cmp	r1, #0
    4a44:	f73f ab43 	bgt.w	40ce <ull_conn_done+0xfa6>
    4a48:	e475      	b.n	4336 <ull_conn_done+0x120e>
				int temp_temp_temp_array[table_size];	
    4a4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
				int new_repeated_size = (old_max_conn_int/conn_int_table[new_first_handle]);					
    4a4c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
				int temp_temp_temp_array[table_size];	
    4a50:	f023 0307 	bic.w	r3, r3, #7
    4a54:	ebad 0d03 	sub.w	sp, sp, r3
				int new_repeated_size = (old_max_conn_int/conn_int_table[new_first_handle]);					
    4a58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
				int new_first_handle_index=-1;
    4a5a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
				int new_repeated_size = (old_max_conn_int/conn_int_table[new_first_handle]);					
    4a5e:	f853 3c04 	ldr.w	r3, [r3, #-4]
    4a62:	fbb2 faf3 	udiv	sl, r2, r3
				int temp_temp_temp_array[table_size];	
    4a66:	a908      	add	r1, sp, #32
				int new_first_handle = -1;
    4a68:	462e      	mov	r6, r5
    4a6a:	f7ff bbec 	b.w	4246 <ull_conn_done+0x111e>
	if ((force) || (latency_event != lll->latency_event)) {
    4a6e:	429e      	cmp	r6, r3
    4a70:	f43e af92 	beq.w	3998 <ull_conn_done+0x870>
		lazy = lll->latency_event + 1;
    4a74:	3301      	adds	r3, #1
    4a76:	b299      	uxth	r1, r3
	if ((ticks_drift_plus != 0U) || (ticks_drift_minus != 0U) ||
    4a78:	2900      	cmp	r1, #0
    4a7a:	f43e af8d 	beq.w	3998 <ull_conn_done+0x870>
    4a7e:	f7ff b9ce 	b.w	3e1e <ull_conn_done+0xcf6>
					for(int i = 0; i <CONFIG_BT_MAX_CONN; i ++){
    4a82:	4b53      	ldr	r3, [pc, #332]	; (4bd0 <ull_conn_done+0x1aa8>)
    4a84:	681b      	ldr	r3, [r3, #0]
    4a86:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    4a8a:	4b52      	ldr	r3, [pc, #328]	; (4bd4 <ull_conn_done+0x1aac>)
    4a8c:	681b      	ldr	r3, [r3, #0]
    4a8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
					for(int i = 0; i <CONFIG_BT_MAX_CONN && !need_conn_update; i ++){
    4a92:	2300      	movs	r3, #0
    4a94:	65bb      	str	r3, [r7, #88]	; 0x58
						int handle_now = schedule[i];
    4a96:	6cba      	ldr	r2, [r7, #72]	; 0x48
    4a98:	f852 3b04 	ldr.w	r3, [r2], #4
    4a9c:	64ba      	str	r2, [r7, #72]	; 0x48
						if(scheduled_handles[handle_now] == false) i = CONFIG_BT_MAX_CONN;
    4a9e:	4a4e      	ldr	r2, [pc, #312]	; (4bd8 <ull_conn_done+0x1ab0>)
						int handle_now = schedule[i];
    4aa0:	67bb      	str	r3, [r7, #120]	; 0x78
						if(scheduled_handles[handle_now] == false) i = CONFIG_BT_MAX_CONN;
    4aa2:	5cd3      	ldrb	r3, [r2, r3]
    4aa4:	2b00      	cmp	r3, #0
    4aa6:	f040 809d 	bne.w	4be4 <ull_conn_done+0x1abc>
					for(int i = 0; i <CONFIG_BT_MAX_CONN && !need_conn_update ; i ++){
    4aaa:	4b4c      	ldr	r3, [pc, #304]	; (4bdc <ull_conn_done+0x1ab4>)
					for(int i = 0; i <CONFIG_BT_MAX_CONN; i++) array4[i] = 0;
    4aac:	494c      	ldr	r1, [pc, #304]	; (4be0 <ull_conn_done+0x1ab8>)
					for(int i = 0; i <CONFIG_BT_MAX_CONN && !need_conn_update ; i ++){
    4aae:	781a      	ldrb	r2, [r3, #0]
							if(scheduled_handles[handle_now] && handle_now != first_handle ){
    4ab0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    4ab2:	681b      	ldr	r3, [r3, #0]
    4ab4:	67bb      	str	r3, [r7, #120]	; 0x78
					for(int i = 0; i <CONFIG_BT_MAX_CONN; i++) array4[i] = 0;
    4ab6:	2300      	movs	r3, #0
    4ab8:	e9c1 3300 	strd	r3, r3, [r1]
    4abc:	e9c1 3302 	strd	r3, r3, [r1, #8]
					for(int i = 0; i <CONFIG_BT_MAX_CONN && !need_conn_update ; i ++){
    4ac0:	4699      	mov	r9, r3
								if(min_gap <max_conn_int*1.25 && min_gap > gap+1){
    4ac2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
    4ac6:	3301      	adds	r3, #1
    4ac8:	677b      	str	r3, [r7, #116]	; 0x74
					for(int i = 0; i <CONFIG_BT_MAX_CONN && !need_conn_update ; i ++){
    4aca:	2a00      	cmp	r2, #0
    4acc:	f47e aef1 	bne.w	38b2 <ull_conn_done+0x78a>
						int handle_now = schedule[i];
    4ad0:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
    4ad4:	eb03 0389 	add.w	r3, r3, r9, lsl #2
    4ad8:	f853 8c20 	ldr.w	r8, [r3, #-32]
						while(!scheduled_handles[handle_now] && i <CONFIG_BT_MAX_CONN){
    4adc:	4b3e      	ldr	r3, [pc, #248]	; (4bd8 <ull_conn_done+0x1ab0>)
    4ade:	f813 3008 	ldrb.w	r3, [r3, r8]
    4ae2:	b9ab      	cbnz	r3, 4b10 <ull_conn_done+0x19e8>
    4ae4:	f1b9 0f03 	cmp.w	r9, #3
    4ae8:	dc5f      	bgt.n	4baa <ull_conn_done+0x1a82>
    4aea:	f109 0301 	add.w	r3, r9, #1
    4aee:	f107 0298 	add.w	r2, r7, #152	; 0x98
    4af2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    4af6:	e003      	b.n	4b00 <ull_conn_done+0x19d8>
    4af8:	2b04      	cmp	r3, #4
    4afa:	f43e aeda 	beq.w	38b2 <ull_conn_done+0x78a>
    4afe:	3301      	adds	r3, #1
							handle_now = schedule[i];
    4b00:	f852 1b04 	ldr.w	r1, [r2], #4
						while(!scheduled_handles[handle_now] && i <CONFIG_BT_MAX_CONN){
    4b04:	4834      	ldr	r0, [pc, #208]	; (4bd8 <ull_conn_done+0x1ab0>)
    4b06:	5c40      	ldrb	r0, [r0, r1]
							handle_now = schedule[i];
    4b08:	4688      	mov	r8, r1
							i ++;
    4b0a:	4699      	mov	r9, r3
						while(!scheduled_handles[handle_now] && i <CONFIG_BT_MAX_CONN){
    4b0c:	2800      	cmp	r0, #0
    4b0e:	d0f3      	beq.n	4af8 <ull_conn_done+0x19d0>
						if(i != CONFIG_BT_MAX_CONN){
    4b10:	f1b9 0f04 	cmp.w	r9, #4
    4b14:	f43e aecd 	beq.w	38b2 <ull_conn_done+0x78a>
							if(scheduled_handles[handle_now] && handle_now != first_handle ){
    4b18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    4b1a:	4543      	cmp	r3, r8
    4b1c:	d045      	beq.n	4baa <ull_conn_done+0x1a82>
								if(conn_int_table[handle_now] !=0)
    4b1e:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
    4b22:	f7fb fc3f 	bl	3a4 <__aeabi_i2d>
    4b26:	4b27      	ldr	r3, [pc, #156]	; (4bc4 <ull_conn_done+0x1a9c>)
    4b28:	6e7c      	ldr	r4, [r7, #100]	; 0x64
    4b2a:	2200      	movs	r2, #0
    4b2c:	f7fb fca4 	bl	478 <__aeabi_dmul>
    4b30:	f854 4028 	ldr.w	r4, [r4, r8, lsl #2]
    4b34:	e9c7 0120 	strd	r0, r1, [r7, #128]	; 0x80
    4b38:	2c00      	cmp	r4, #0
    4b3a:	f040 8260 	bne.w	4ffe <ull_conn_done+0x1ed6>
									for(int j = 0; j <max_conn_int/conn_int_table[handle_now]; j ++){
    4b3e:	f20f 0b78 	addw	fp, pc, #120	; 0x78
    4b42:	e9db ab00 	ldrd	sl, fp, [fp]
								uint32_t min_gap = -1;
    4b46:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
								if(min_gap <max_conn_int*1.25 && min_gap > gap+1){
    4b4a:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
    4b4e:	4650      	mov	r0, sl
    4b50:	4659      	mov	r1, fp
    4b52:	f7fb ff03 	bl	95c <__aeabi_dcmplt>
    4b56:	b340      	cbz	r0, 4baa <ull_conn_done+0x1a82>
    4b58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    4b5a:	42b3      	cmp	r3, r6
    4b5c:	d225      	bcs.n	4baa <ull_conn_done+0x1a82>
									min_gap = conn_int_table[handle_now]*1.25+gap-min_gap;
    4b5e:	4620      	mov	r0, r4
    4b60:	f7fb fc10 	bl	384 <__aeabi_ui2d>
    4b64:	4b17      	ldr	r3, [pc, #92]	; (4bc4 <ull_conn_done+0x1a9c>)
    4b66:	2200      	movs	r2, #0
    4b68:	f7fb fc86 	bl	478 <__aeabi_dmul>
    4b6c:	4605      	mov	r5, r0
    4b6e:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
    4b72:	460e      	mov	r6, r1
    4b74:	f7fb fc16 	bl	3a4 <__aeabi_i2d>
    4b78:	4602      	mov	r2, r0
    4b7a:	460b      	mov	r3, r1
    4b7c:	4628      	mov	r0, r5
    4b7e:	4631      	mov	r1, r6
    4b80:	f7fb fac4 	bl	10c <__adddf3>
    4b84:	4652      	mov	r2, sl
    4b86:	465b      	mov	r3, fp
    4b88:	f7fb fabe 	bl	108 <__aeabi_dsub>
    4b8c:	f7fb ff36 	bl	9fc <__aeabi_d2uiz>
									min_gap =(4*min_gap+4)/5;
    4b90:	1c42      	adds	r2, r0, #1
    4b92:	0092      	lsls	r2, r2, #2
    4b94:	2305      	movs	r3, #5
    4b96:	fbb2 f3f3 	udiv	r3, r2, r3
									if(min_gap>=conn_int_table[handle_now]) min_gap-=conn_int_table[handle_now];
    4b9a:	429c      	cmp	r4, r3
    4b9c:	f200 821b 	bhi.w	4fd6 <ull_conn_done+0x1eae>
									if(min_gap > 0 && min_gap <conn_int_table[handle_now]){
    4ba0:	1b1b      	subs	r3, r3, r4
    4ba2:	d002      	beq.n	4baa <ull_conn_done+0x1a82>
    4ba4:	429c      	cmp	r4, r3
    4ba6:	f200 8219 	bhi.w	4fdc <ull_conn_done+0x1eb4>
					for(int i = 0; i <CONFIG_BT_MAX_CONN && !need_conn_update ; i ++){
    4baa:	f109 0901 	add.w	r9, r9, #1
    4bae:	f1b9 0f03 	cmp.w	r9, #3
    4bb2:	dd8d      	ble.n	4ad0 <ull_conn_done+0x19a8>
    4bb4:	f7fe be7d 	b.w	38b2 <ull_conn_done+0x78a>
    4bb8:	ffe00000 	.word	0xffe00000
    4bbc:	41efffff 	.word	0x41efffff
    4bc0:	20006f24 	.word	0x20006f24
    4bc4:	3ff40000 	.word	0x3ff40000
    4bc8:	20003f00 	.word	0x20003f00
    4bcc:	20004f00 	.word	0x20004f00
    4bd0:	200075d8 	.word	0x200075d8
    4bd4:	200004b8 	.word	0x200004b8
    4bd8:	2000831c 	.word	0x2000831c
    4bdc:	2000a862 	.word	0x2000a862
    4be0:	20005f00 	.word	0x20005f00
							int interval = conn_int_table[handle_now];
    4be4:	6fba      	ldr	r2, [r7, #120]	; 0x78
    4be6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    4be8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    4bec:	63bb      	str	r3, [r7, #56]	; 0x38
							for(int j = 0; j < max_conn_int/interval && !need_conn_update; j ++){
    4bee:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
    4bf2:	fb92 f3f3 	sdiv	r3, r2, r3
    4bf6:	2b00      	cmp	r3, #0
    4bf8:	f340 8185 	ble.w	4f06 <ull_conn_done+0x1dde>
    4bfc:	f8df a360 	ldr.w	sl, [pc, #864]	; 4f60 <ull_conn_done+0x1e38>
    4c00:	f8df 9360 	ldr.w	r9, [pc, #864]	; 4f64 <ull_conn_done+0x1e3c>
							int temp_i = 0;
    4c04:	f04f 0b00 	mov.w	fp, #0
							for(int j = 0; j < max_conn_int/interval && !need_conn_update; j ++){
    4c08:	f8c7 b044 	str.w	fp, [r7, #68]	; 0x44
    4c0c:	4656      	mov	r6, sl
    4c0e:	46da      	mov	sl, fp
    4c10:	46cb      	mov	fp, r9
								while(array0[temp_i] != handle_now) temp_i ++;
    4c12:	f856 302a 	ldr.w	r3, [r6, sl, lsl #2]
    4c16:	6fba      	ldr	r2, [r7, #120]	; 0x78
    4c18:	429a      	cmp	r2, r3
    4c1a:	bf08      	it	eq
    4c1c:	4654      	moveq	r4, sl
    4c1e:	d00b      	beq.n	4c38 <ull_conn_done+0x1b10>
    4c20:	f10a 0301 	add.w	r3, sl, #1
    4c24:	6fb9      	ldr	r1, [r7, #120]	; 0x78
    4c26:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    4c2a:	4654      	mov	r4, sl
    4c2c:	f853 2b04 	ldr.w	r2, [r3], #4
    4c30:	4291      	cmp	r1, r2
    4c32:	f104 0401 	add.w	r4, r4, #1
    4c36:	d1f9      	bne.n	4c2c <ull_conn_done+0x1b04>
								int temp_temp_i = temp_i+1;
    4c38:	f104 0a01 	add.w	sl, r4, #1
								if(array0[temp_temp_i] > CONFIG_BT_MAX_CONN)
    4c3c:	4bbd      	ldr	r3, [pc, #756]	; (4f34 <ull_conn_done+0x1e0c>)
    4c3e:	f856 502a 	ldr.w	r5, [r6, sl, lsl #2]
    4c42:	681b      	ldr	r3, [r3, #0]
    4c44:	673b      	str	r3, [r7, #112]	; 0x70
    4c46:	2d04      	cmp	r5, #4
    4c48:	d851      	bhi.n	4cee <ull_conn_done+0x1bc6>
								int temp_temp_i = temp_i+1;
    4c4a:	4653      	mov	r3, sl
								if(temp_temp_i >= table_size) temp = array1[0] + max_conn_int*1.25;
    4c4c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    4c4e:	4293      	cmp	r3, r2
    4c50:	da5b      	bge.n	4d0a <ull_conn_done+0x1be2>
								else temp = array1[temp_temp_i];
    4c52:	f85b 2023 	ldr.w	r2, [fp, r3, lsl #2]
								if((((temp- array1[temp_i+1] < gap_1 || array1[temp_i+1]>temp) && array0[temp_i+1] >CONFIG_BT_MAX_CONN))||( array1[temp_i+1]<array1[temp_i]+ avg_conn_evt_length[handle_now]+gap_1  && array0[temp_i+1] <CONFIG_BT_MAX_CONN)  ||(array4[temp_i]>50*40/conn_int_table[handle_now]/1.25 && conn_int_table[handle_now] !=0)){
    4c56:	4bb8      	ldr	r3, [pc, #736]	; (4f38 <ull_conn_done+0x1e10>)
    4c58:	f85b 102a 	ldr.w	r1, [fp, sl, lsl #2]
    4c5c:	681b      	ldr	r3, [r3, #0]
    4c5e:	1a50      	subs	r0, r2, r1
    4c60:	4298      	cmp	r0, r3
    4c62:	d301      	bcc.n	4c68 <ull_conn_done+0x1b40>
    4c64:	4291      	cmp	r1, r2
    4c66:	d901      	bls.n	4c6c <ull_conn_done+0x1b44>
    4c68:	2d04      	cmp	r5, #4
    4c6a:	d866      	bhi.n	4d3a <ull_conn_done+0x1c12>
    4c6c:	f85b 2024 	ldr.w	r2, [fp, r4, lsl #2]
    4c70:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
    4c74:	48b1      	ldr	r0, [pc, #708]	; (4f3c <ull_conn_done+0x1e14>)
    4c76:	6fba      	ldr	r2, [r7, #120]	; 0x78
    4c78:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
    4c7c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    4c80:	4403      	add	r3, r0
    4c82:	4413      	add	r3, r2
    4c84:	4299      	cmp	r1, r3
    4c86:	d201      	bcs.n	4c8c <ull_conn_done+0x1b64>
    4c88:	2d03      	cmp	r5, #3
    4c8a:	d956      	bls.n	4d3a <ull_conn_done+0x1c12>
    4c8c:	4bac      	ldr	r3, [pc, #688]	; (4f40 <ull_conn_done+0x1e18>)
    4c8e:	6fba      	ldr	r2, [r7, #120]	; 0x78
    4c90:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    4c94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    4c96:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
    4c9a:	f7fb fb73 	bl	384 <__aeabi_ui2d>
    4c9e:	4680      	mov	r8, r0
    4ca0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    4ca4:	fbb0 f0f5 	udiv	r0, r0, r5
    4ca8:	4689      	mov	r9, r1
    4caa:	f7fb fb6b 	bl	384 <__aeabi_ui2d>
    4cae:	4ba5      	ldr	r3, [pc, #660]	; (4f44 <ull_conn_done+0x1e1c>)
    4cb0:	2200      	movs	r2, #0
    4cb2:	f7fb fd0b 	bl	6cc <__aeabi_ddiv>
    4cb6:	4602      	mov	r2, r0
    4cb8:	460b      	mov	r3, r1
    4cba:	4640      	mov	r0, r8
    4cbc:	4649      	mov	r1, r9
    4cbe:	f7fb fe6b 	bl	998 <__aeabi_dcmpgt>
    4cc2:	b108      	cbz	r0, 4cc8 <ull_conn_done+0x1ba0>
    4cc4:	2d00      	cmp	r5, #0
    4cc6:	d138      	bne.n	4d3a <ull_conn_done+0x1c12>
    4cc8:	46a2      	mov	sl, r4
							for(int j = 0; j < max_conn_int/interval && !need_conn_update; j ++){
    4cca:	6c79      	ldr	r1, [r7, #68]	; 0x44
    4ccc:	4b9e      	ldr	r3, [pc, #632]	; (4f48 <ull_conn_done+0x1e20>)
    4cce:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    4cd0:	681a      	ldr	r2, [r3, #0]
    4cd2:	4b9e      	ldr	r3, [pc, #632]	; (4f4c <ull_conn_done+0x1e24>)
    4cd4:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
    4cd8:	3101      	adds	r1, #1
    4cda:	fb92 f2f0 	sdiv	r2, r2, r0
    4cde:	428a      	cmp	r2, r1
    4ce0:	781b      	ldrb	r3, [r3, #0]
    4ce2:	6479      	str	r1, [r7, #68]	; 0x44
    4ce4:	f340 8111 	ble.w	4f0a <ull_conn_done+0x1de2>
    4ce8:	2b00      	cmp	r3, #0
    4cea:	d092      	beq.n	4c12 <ull_conn_done+0x1aea>
    4cec:	e6dd      	b.n	4aaa <ull_conn_done+0x1982>
    4cee:	1ca2      	adds	r2, r4, #2
    4cf0:	eb06 0282 	add.w	r2, r6, r2, lsl #2
								int temp_temp_i = temp_i+1;
    4cf4:	4653      	mov	r3, sl
    4cf6:	e003      	b.n	4d00 <ull_conn_done+0x1bd8>
									while(array0[temp_temp_i] > CONFIG_BT_MAX_CONN && temp_temp_i < table_size) temp_temp_i ++;
    4cf8:	f852 1b04 	ldr.w	r1, [r2], #4
    4cfc:	2904      	cmp	r1, #4
    4cfe:	d9a5      	bls.n	4c4c <ull_conn_done+0x1b24>
    4d00:	6f39      	ldr	r1, [r7, #112]	; 0x70
    4d02:	428b      	cmp	r3, r1
    4d04:	f103 0301 	add.w	r3, r3, #1
    4d08:	dbf6      	blt.n	4cf8 <ull_conn_done+0x1bd0>
								if(temp_temp_i >= table_size) temp = array1[0] + max_conn_int*1.25;
    4d0a:	f8db 0000 	ldr.w	r0, [fp]
    4d0e:	f7fb fb39 	bl	384 <__aeabi_ui2d>
    4d12:	4680      	mov	r8, r0
    4d14:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
    4d18:	4689      	mov	r9, r1
    4d1a:	f7fb fb43 	bl	3a4 <__aeabi_i2d>
    4d1e:	4b89      	ldr	r3, [pc, #548]	; (4f44 <ull_conn_done+0x1e1c>)
    4d20:	2200      	movs	r2, #0
    4d22:	f7fb fba9 	bl	478 <__aeabi_dmul>
    4d26:	4602      	mov	r2, r0
    4d28:	460b      	mov	r3, r1
    4d2a:	4640      	mov	r0, r8
    4d2c:	4649      	mov	r1, r9
    4d2e:	f7fb f9ed 	bl	10c <__adddf3>
    4d32:	f7fb fe63 	bl	9fc <__aeabi_d2uiz>
    4d36:	4602      	mov	r2, r0
    4d38:	e78d      	b.n	4c56 <ull_conn_done+0x1b2e>
												if(!((array1[temp_j+1]-array1[temp_j]>gap && temp_j+1 < table_size) ||(array1[0]+max_conn_int*1.25-array1[temp_j]>gap && temp_j+1 == table_size))){
    4d3a:	f8db 3000 	ldr.w	r3, [fp]
    4d3e:	643b      	str	r3, [r7, #64]	; 0x40
									int temp_gap = 0;
    4d40:	2300      	movs	r3, #0
    4d42:	677b      	str	r3, [r7, #116]	; 0x74
												if(!((array1[temp_j+1]-array1[temp_j]>gap && temp_j+1 < table_size) ||(array1[0]+max_conn_int*1.25-array1[temp_j]>gap && temp_j+1 == table_size))){
    4d44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    4d46:	f8c7 a080 	str.w	sl, [r7, #128]	; 0x80
    4d4a:	461d      	mov	r5, r3
    4d4c:	3301      	adds	r3, #1
    4d4e:	633b      	str	r3, [r7, #48]	; 0x30
    4d50:	46b2      	mov	sl, r6
    4d52:	f107 0298 	add.w	r2, r7, #152	; 0x98
    4d56:	6db8      	ldr	r0, [r7, #88]	; 0x58
    4d58:	462b      	mov	r3, r5
    4d5a:	eb02 0285 	add.w	r2, r2, r5, lsl #2
										if((scheduled_handles[schedule[k]])&& k != i){
    4d5e:	f852 5b04 	ldr.w	r5, [r2], #4
    4d62:	497b      	ldr	r1, [pc, #492]	; (4f50 <ull_conn_done+0x1e28>)
    4d64:	5d49      	ldrb	r1, [r1, r5]
    4d66:	b149      	cbz	r1, 4d7c <ull_conn_done+0x1c54>
    4d68:	4298      	cmp	r0, r3
    4d6a:	d10a      	bne.n	4d82 <ull_conn_done+0x1c5a>
    4d6c:	6b39      	ldr	r1, [r7, #48]	; 0x30
									for(k = i; !is_possible && k <CONFIG_BT_MAX_CONN; k ++){
    4d6e:	1c43      	adds	r3, r0, #1
    4d70:	2904      	cmp	r1, #4
    4d72:	d1f4      	bne.n	4d5e <ull_conn_done+0x1c36>
    4d74:	4656      	mov	r6, sl
    4d76:	f8d7 a080 	ldr.w	sl, [r7, #128]	; 0x80
    4d7a:	e7a6      	b.n	4cca <ull_conn_done+0x1ba2>
    4d7c:	3301      	adds	r3, #1
    4d7e:	4619      	mov	r1, r3
    4d80:	e7f6      	b.n	4d70 <ull_conn_done+0x1c48>
    4d82:	637b      	str	r3, [r7, #52]	; 0x34
											for(int l = 0; l < max_conn_int/conn_int_table[temp_handle] && is_possible;l++){
    4d84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    4d86:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
    4d8a:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    4d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
    4d90:	428b      	cmp	r3, r1
    4d92:	fbb1 f2f3 	udiv	r2, r1, r3
    4d96:	66ba      	str	r2, [r7, #104]	; 0x68
    4d98:	d87b      	bhi.n	4e92 <ull_conn_done+0x1d6a>
											int temp_j = 0;
    4d9a:	2100      	movs	r1, #0
											for(int l = 0; l < max_conn_int/conn_int_table[temp_handle] && is_possible;l++){
    4d9c:	6539      	str	r1, [r7, #80]	; 0x50
												while(array0[temp_j] != schedule[k]) temp_j ++;
    4d9e:	f85a 3021 	ldr.w	r3, [sl, r1, lsl #2]
    4da2:	429d      	cmp	r5, r3
    4da4:	d009      	beq.n	4dba <ull_conn_done+0x1c92>
    4da6:	1c4b      	adds	r3, r1, #1
    4da8:	eb0a 0283 	add.w	r2, sl, r3, lsl #2
    4dac:	e000      	b.n	4db0 <ull_conn_done+0x1c88>
    4dae:	3301      	adds	r3, #1
    4db0:	f852 0b04 	ldr.w	r0, [r2], #4
    4db4:	4285      	cmp	r5, r0
    4db6:	4619      	mov	r1, r3
    4db8:	d1f9      	bne.n	4dae <ull_conn_done+0x1c86>
												if(array0[temp_j+1] > CONFIG_BT_MAX_CONN)
    4dba:	1c4c      	adds	r4, r1, #1
    4dbc:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
    4dc0:	2b04      	cmp	r3, #4
    4dc2:	f200 8087 	bhi.w	4ed4 <ull_conn_done+0x1dac>
												if(!((array1[temp_j+1]-array1[temp_j]>gap && temp_j+1 < table_size) ||(array1[0]+max_conn_int*1.25-array1[temp_j]>gap && temp_j+1 == table_size))){
    4dc6:	f85b 6021 	ldr.w	r6, [fp, r1, lsl #2]
    4dca:	f85b 3024 	ldr.w	r3, [fp, r4, lsl #2]
    4dce:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
    4dd2:	1b9b      	subs	r3, r3, r6
    4dd4:	4293      	cmp	r3, r2
    4dd6:	d912      	bls.n	4dfe <ull_conn_done+0x1cd6>
    4dd8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    4dda:	42a2      	cmp	r2, r4
    4ddc:	dd0f      	ble.n	4dfe <ull_conn_done+0x1cd6>
														if(temp_gap >= array1[temp_j+1]-array1[temp_j] || l == 0 ) temp_gap = array1[temp_j+1]-array1[temp_j];
    4dde:	6f79      	ldr	r1, [r7, #116]	; 0x74
    4de0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    4de2:	428b      	cmp	r3, r1
    4de4:	f102 0601 	add.w	r6, r2, #1
    4de8:	f240 8087 	bls.w	4efa <ull_conn_done+0x1dd2>
    4dec:	2a00      	cmp	r2, #0
    4dee:	f000 8084 	beq.w	4efa <ull_conn_done+0x1dd2>
											for(int l = 0; l < max_conn_int/conn_int_table[temp_handle] && is_possible;l++){
    4df2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    4df4:	42b3      	cmp	r3, r6
    4df6:	d94c      	bls.n	4e92 <ull_conn_done+0x1d6a>
    4df8:	653e      	str	r6, [r7, #80]	; 0x50
    4dfa:	4621      	mov	r1, r4
    4dfc:	e7cf      	b.n	4d9e <ull_conn_done+0x1c76>
												if(!((array1[temp_j+1]-array1[temp_j]>gap && temp_j+1 < table_size) ||(array1[0]+max_conn_int*1.25-array1[temp_j]>gap && temp_j+1 == table_size))){
    4dfe:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
    4e02:	f7fb facf 	bl	3a4 <__aeabi_i2d>
    4e06:	4b4f      	ldr	r3, [pc, #316]	; (4f44 <ull_conn_done+0x1e1c>)
    4e08:	2200      	movs	r2, #0
    4e0a:	f7fb fb35 	bl	478 <__aeabi_dmul>
    4e0e:	4680      	mov	r8, r0
    4e10:	6c38      	ldr	r0, [r7, #64]	; 0x40
    4e12:	4689      	mov	r9, r1
    4e14:	f7fb fab6 	bl	384 <__aeabi_ui2d>
    4e18:	4602      	mov	r2, r0
    4e1a:	460b      	mov	r3, r1
    4e1c:	4640      	mov	r0, r8
    4e1e:	4649      	mov	r1, r9
    4e20:	f7fb f974 	bl	10c <__adddf3>
    4e24:	4680      	mov	r8, r0
    4e26:	4630      	mov	r0, r6
    4e28:	4689      	mov	r9, r1
    4e2a:	f7fb faab 	bl	384 <__aeabi_ui2d>
    4e2e:	4602      	mov	r2, r0
    4e30:	460b      	mov	r3, r1
    4e32:	4640      	mov	r0, r8
    4e34:	4649      	mov	r1, r9
    4e36:	f7fb f967 	bl	108 <__aeabi_dsub>
    4e3a:	4680      	mov	r8, r0
    4e3c:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
    4e40:	4689      	mov	r9, r1
    4e42:	f7fb faaf 	bl	3a4 <__aeabi_i2d>
    4e46:	4602      	mov	r2, r0
    4e48:	460b      	mov	r3, r1
    4e4a:	4640      	mov	r0, r8
    4e4c:	4649      	mov	r1, r9
    4e4e:	f7fb fda3 	bl	998 <__aeabi_dcmpgt>
    4e52:	b928      	cbnz	r0, 4e60 <ull_conn_done+0x1d38>
									for(k = i; !is_possible && k <CONFIG_BT_MAX_CONN; k ++){
    4e54:	6b7d      	ldr	r5, [r7, #52]	; 0x34
    4e56:	3501      	adds	r5, #1
    4e58:	2d03      	cmp	r5, #3
    4e5a:	f77f af7a 	ble.w	4d52 <ull_conn_done+0x1c2a>
    4e5e:	e789      	b.n	4d74 <ull_conn_done+0x1c4c>
												if(!((array1[temp_j+1]-array1[temp_j]>gap && temp_j+1 < table_size) ||(array1[0]+max_conn_int*1.25-array1[temp_j]>gap && temp_j+1 == table_size))){
    4e60:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    4e62:	42a3      	cmp	r3, r4
    4e64:	d1f6      	bne.n	4e54 <ull_conn_done+0x1d2c>
														if(temp_gap >= array1[0]+max_conn_int*1.25-array1[temp_j] || l==0) temp_gap = array1[0]+max_conn_int*1.25-array1[temp_j];
    4e66:	6f78      	ldr	r0, [r7, #116]	; 0x74
    4e68:	f7fb fa9c 	bl	3a4 <__aeabi_i2d>
    4e6c:	460b      	mov	r3, r1
    4e6e:	4602      	mov	r2, r0
    4e70:	4649      	mov	r1, r9
    4e72:	4640      	mov	r0, r8
    4e74:	f7fb fd7c 	bl	970 <__aeabi_dcmple>
    4e78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    4e7a:	1c5e      	adds	r6, r3, #1
    4e7c:	b908      	cbnz	r0, 4e82 <ull_conn_done+0x1d5a>
    4e7e:	2b00      	cmp	r3, #0
    4e80:	d1b7      	bne.n	4df2 <ull_conn_done+0x1cca>
    4e82:	4640      	mov	r0, r8
    4e84:	4649      	mov	r1, r9
    4e86:	f7fb fd91 	bl	9ac <__aeabi_d2iz>
											for(int l = 0; l < max_conn_int/conn_int_table[temp_handle] && is_possible;l++){
    4e8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
														if(temp_gap >= array1[0]+max_conn_int*1.25-array1[temp_j] || l==0) temp_gap = array1[0]+max_conn_int*1.25-array1[temp_j];
    4e8c:	6778      	str	r0, [r7, #116]	; 0x74
											for(int l = 0; l < max_conn_int/conn_int_table[temp_handle] && is_possible;l++){
    4e8e:	42b3      	cmp	r3, r6
    4e90:	d8b2      	bhi.n	4df8 <ull_conn_done+0x1cd0>
										need_gap = temp_gap-need_gap;
    4e92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    4e94:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
    4e98:	1a9a      	subs	r2, r3, r2
										need_gap =(need_gap)*4/5;
    4e9a:	0092      	lsls	r2, r2, #2
										if(need_gap>0&& need_gap<conn_int_table[temp_handle]){	
    4e9c:	2a04      	cmp	r2, #4
    4e9e:	4656      	mov	r6, sl
    4ea0:	f8d7 a080 	ldr.w	sl, [r7, #128]	; 0x80
    4ea4:	f67f af11 	bls.w	4cca <ull_conn_done+0x1ba2>
										need_gap =(need_gap)*4/5;
    4ea8:	4b2a      	ldr	r3, [pc, #168]	; (4f54 <ull_conn_done+0x1e2c>)
										if(need_gap>0&& need_gap<conn_int_table[temp_handle]){	
    4eaa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
										need_gap =(need_gap)*4/5;
    4eac:	fba3 3202 	umull	r3, r2, r3, r2
										if(need_gap>0&& need_gap<conn_int_table[temp_handle]){	
    4eb0:	ebb1 0f92 	cmp.w	r1, r2, lsr #2
										need_gap =(need_gap)*4/5;
    4eb4:	ea4f 0392 	mov.w	r3, r2, lsr #2
										if(need_gap>0&& need_gap<conn_int_table[temp_handle]){	
    4eb8:	f67f af07 	bls.w	4cca <ull_conn_done+0x1ba2>
											if(!ll_conn_update_BLEX(temp_handle, 0, 0, need_gap)&& need_gap >0){
    4ebc:	2200      	movs	r2, #0
    4ebe:	b29b      	uxth	r3, r3
    4ec0:	b2a8      	uxth	r0, r5
    4ec2:	4611      	mov	r1, r2
    4ec4:	f010 fa2c 	bl	15320 <ll_conn_update_BLEX>
    4ec8:	b348      	cbz	r0, 4f1e <ull_conn_done+0x1df6>
    4eca:	4b23      	ldr	r3, [pc, #140]	; (4f58 <ull_conn_done+0x1e30>)
    4ecc:	681b      	ldr	r3, [r3, #0]
    4ece:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    4ed2:	e6fa      	b.n	4cca <ull_conn_done+0x1ba2>
    4ed4:	1c8b      	adds	r3, r1, #2
    4ed6:	6f3e      	ldr	r6, [r7, #112]	; 0x70
    4ed8:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
    4edc:	e000      	b.n	4ee0 <ull_conn_done+0x1db8>
													while(array0[temp_j+1] > CONFIG_BT_MAX_CONN && temp_j+1 < table_size) temp_j ++;
    4ede:	4614      	mov	r4, r2
    4ee0:	42b4      	cmp	r4, r6
    4ee2:	f104 0201 	add.w	r2, r4, #1
    4ee6:	da06      	bge.n	4ef6 <ull_conn_done+0x1dce>
    4ee8:	f853 0b04 	ldr.w	r0, [r3], #4
    4eec:	2804      	cmp	r0, #4
    4eee:	4621      	mov	r1, r4
    4ef0:	d8f5      	bhi.n	4ede <ull_conn_done+0x1db6>
    4ef2:	4614      	mov	r4, r2
    4ef4:	e767      	b.n	4dc6 <ull_conn_done+0x1c9e>
    4ef6:	1c4c      	adds	r4, r1, #1
    4ef8:	e765      	b.n	4dc6 <ull_conn_done+0x1c9e>
														if(temp_gap >= array1[temp_j+1]-array1[temp_j] || l == 0 ) temp_gap = array1[temp_j+1]-array1[temp_j];
    4efa:	677b      	str	r3, [r7, #116]	; 0x74
											for(int l = 0; l < max_conn_int/conn_int_table[temp_handle] && is_possible;l++){
    4efc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    4efe:	42b3      	cmp	r3, r6
    4f00:	f63f af7a 	bhi.w	4df8 <ull_conn_done+0x1cd0>
    4f04:	e7c5      	b.n	4e92 <ull_conn_done+0x1d6a>
    4f06:	4b11      	ldr	r3, [pc, #68]	; (4f4c <ull_conn_done+0x1e24>)
    4f08:	781b      	ldrb	r3, [r3, #0]
					for(int i = 0; i <CONFIG_BT_MAX_CONN && !need_conn_update; i ++){
    4f0a:	6dba      	ldr	r2, [r7, #88]	; 0x58
    4f0c:	3201      	adds	r2, #1
    4f0e:	2a04      	cmp	r2, #4
    4f10:	65ba      	str	r2, [r7, #88]	; 0x58
    4f12:	f43f adca 	beq.w	4aaa <ull_conn_done+0x1982>
    4f16:	2b00      	cmp	r3, #0
    4f18:	f43f adbd 	beq.w	4a96 <ull_conn_done+0x196e>
    4f1c:	e5c5      	b.n	4aaa <ull_conn_done+0x1982>
												BLEX_cnt4 = 0;
    4f1e:	4a0f      	ldr	r2, [pc, #60]	; (4f5c <ull_conn_done+0x1e34>)
    4f20:	4b0d      	ldr	r3, [pc, #52]	; (4f58 <ull_conn_done+0x1e30>)
    4f22:	6010      	str	r0, [r2, #0]
    4f24:	681b      	ldr	r3, [r3, #0]
												need_conn_update =true;
    4f26:	4a09      	ldr	r2, [pc, #36]	; (4f4c <ull_conn_done+0x1e24>)
    4f28:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    4f2c:	2301      	movs	r3, #1
    4f2e:	7013      	strb	r3, [r2, #0]
												BLEX_cnt4 = 0;
    4f30:	e6cb      	b.n	4cca <ull_conn_done+0x1ba2>
    4f32:	bf00      	nop
    4f34:	20008320 	.word	0x20008320
    4f38:	200004bc 	.word	0x200004bc
    4f3c:	20005f10 	.word	0x20005f10
    4f40:	20005f00 	.word	0x20005f00
    4f44:	3ff40000 	.word	0x3ff40000
    4f48:	200075d8 	.word	0x200075d8
    4f4c:	2000a862 	.word	0x2000a862
    4f50:	2000831c 	.word	0x2000831c
    4f54:	cccccccd 	.word	0xcccccccd
    4f58:	200004b8 	.word	0x200004b8
    4f5c:	20003ee8 	.word	0x20003ee8
    4f60:	20003f00 	.word	0x20003f00
    4f64:	20004f00 	.word	0x20004f00
							while(anchor_points[i] < anchor_points[first_handle]) anchor_points[i] += conn_int_table[i]*1.25;
    4f68:	697b      	ldr	r3, [r7, #20]
    4f6a:	f8da 6000 	ldr.w	r6, [sl]
    4f6e:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
    4f72:	429e      	cmp	r6, r3
    4f74:	d21b      	bcs.n	4fae <ull_conn_done+0x1e86>
    4f76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    4f78:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
    4f7c:	f7fb fa02 	bl	384 <__aeabi_ui2d>
    4f80:	4622      	mov	r2, r4
    4f82:	462b      	mov	r3, r5
    4f84:	f7fb fa78 	bl	478 <__aeabi_dmul>
    4f88:	e9c7 0122 	strd	r0, r1, [r7, #136]	; 0x88
    4f8c:	4630      	mov	r0, r6
    4f8e:	f7fb f9f9 	bl	384 <__aeabi_ui2d>
    4f92:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
    4f96:	f7fb f8b9 	bl	10c <__adddf3>
    4f9a:	f7fb fd2f 	bl	9fc <__aeabi_d2uiz>
    4f9e:	697b      	ldr	r3, [r7, #20]
    4fa0:	f8ca 0000 	str.w	r0, [sl]
    4fa4:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
    4fa8:	4298      	cmp	r0, r3
    4faa:	d3f0      	bcc.n	4f8e <ull_conn_done+0x1e66>
    4fac:	4606      	mov	r6, r0
							scheduled_dist[i] = (anchor_points[i]-anchor_points[first_handle])%((uint32_t)(conn_int_table[first_handle]*1.25));
    4fae:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    4fb0:	f852 002b 	ldr.w	r0, [r2, fp, lsl #2]
    4fb4:	1af6      	subs	r6, r6, r3
    4fb6:	f7fb f9e5 	bl	384 <__aeabi_ui2d>
    4fba:	462b      	mov	r3, r5
    4fbc:	4622      	mov	r2, r4
    4fbe:	f7fb fa5b 	bl	478 <__aeabi_dmul>
    4fc2:	f7fb fd1b 	bl	9fc <__aeabi_d2uiz>
    4fc6:	fbb6 f3f0 	udiv	r3, r6, r0
    4fca:	fb03 6610 	mls	r6, r3, r0, r6
    4fce:	f8c9 6000 	str.w	r6, [r9]
    4fd2:	f7fe bef9 	b.w	3dc8 <ull_conn_done+0xca0>
									if(min_gap > 0 && min_gap <conn_int_table[handle_now]){
    4fd6:	2a04      	cmp	r2, #4
    4fd8:	f67f ade7 	bls.w	4baa <ull_conn_done+0x1a82>
										if(!ll_conn_update_BLEX(handle_now, 0, 0, min_gap) && min_gap > 0){
    4fdc:	2200      	movs	r2, #0
    4fde:	b29b      	uxth	r3, r3
    4fe0:	fa1f f088 	uxth.w	r0, r8
    4fe4:	4611      	mov	r1, r2
    4fe6:	f010 f99b 	bl	15320 <ll_conn_update_BLEX>
    4fea:	2800      	cmp	r0, #0
    4fec:	f47e ac61 	bne.w	38b2 <ull_conn_done+0x78a>
											BLEX_cnt4 = 0;
    4ff0:	4926      	ldr	r1, [pc, #152]	; (508c <ull_conn_done+0x1f64>)
											need_conn_update =true;
    4ff2:	4b27      	ldr	r3, [pc, #156]	; (5090 <ull_conn_done+0x1f68>)
											BLEX_cnt4 = 0;
    4ff4:	6008      	str	r0, [r1, #0]
											need_conn_update =true;
    4ff6:	2201      	movs	r2, #1
    4ff8:	701a      	strb	r2, [r3, #0]
											BLEX_cnt4 = 0;
    4ffa:	f7fe bc5a 	b.w	38b2 <ull_conn_done+0x78a>
									for(int j = 0; j <max_conn_int/conn_int_table[handle_now]; j ++){
    4ffe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
    5002:	fbb3 f2f4 	udiv	r2, r3, r4
    5006:	429c      	cmp	r4, r3
    5008:	673a      	str	r2, [r7, #112]	; 0x70
    500a:	f63f ad98 	bhi.w	4b3e <ull_conn_done+0x1a16>
    500e:	f04f 0b00 	mov.w	fp, #0
								int temp_i = 1;
    5012:	2501      	movs	r5, #1
								uint32_t min_gap = -1;
    5014:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    5018:	46a2      	mov	sl, r4
										while(array0[temp_i] != handle_now){
    501a:	4b1e      	ldr	r3, [pc, #120]	; (5094 <ull_conn_done+0x1f6c>)
    501c:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    5020:	4543      	cmp	r3, r8
    5022:	bf08      	it	eq
    5024:	f105 32ff 	addeq.w	r2, r5, #4294967295	; 0xffffffff
    5028:	d00b      	beq.n	5042 <ull_conn_done+0x1f1a>
    502a:	4a1a      	ldr	r2, [pc, #104]	; (5094 <ull_conn_done+0x1f6c>)
    502c:	1c6b      	adds	r3, r5, #1
    502e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
    5032:	e000      	b.n	5036 <ull_conn_done+0x1f0e>
    5034:	3301      	adds	r3, #1
    5036:	f851 0b04 	ldr.w	r0, [r1], #4
    503a:	4540      	cmp	r0, r8
    503c:	462a      	mov	r2, r5
											temp_i ++;
    503e:	461d      	mov	r5, r3
										while(array0[temp_i] != handle_now){
    5040:	d1f8      	bne.n	5034 <ull_conn_done+0x1f0c>
										if(array0[temp_i-1] > CONFIG_BT_MAX_CONN && temp_gap < max_conn_int*1.25 && temp_gap>0){
    5042:	4b14      	ldr	r3, [pc, #80]	; (5094 <ull_conn_done+0x1f6c>)
										uint32_t temp_gap = array1[temp_i]-array1[temp_i-1];
    5044:	4814      	ldr	r0, [pc, #80]	; (5098 <ull_conn_done+0x1f70>)
										if(array0[temp_i-1] > CONFIG_BT_MAX_CONN && temp_gap < max_conn_int*1.25 && temp_gap>0){
    5046:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
										uint32_t temp_gap = array1[temp_i]-array1[temp_i-1];
    504a:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
    504e:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
										if(array0[temp_i-1] > CONFIG_BT_MAX_CONN && temp_gap < max_conn_int*1.25 && temp_gap>0){
    5052:	2904      	cmp	r1, #4
    5054:	d90c      	bls.n	5070 <ull_conn_done+0x1f48>
										uint32_t temp_gap = array1[temp_i]-array1[temp_i-1];
    5056:	1ae4      	subs	r4, r4, r3
										if(array0[temp_i-1] > CONFIG_BT_MAX_CONN && temp_gap < max_conn_int*1.25 && temp_gap>0){
    5058:	4620      	mov	r0, r4
    505a:	f7fb f993 	bl	384 <__aeabi_ui2d>
    505e:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
    5062:	f7fb fc7b 	bl	95c <__aeabi_dcmplt>
    5066:	b118      	cbz	r0, 5070 <ull_conn_done+0x1f48>
    5068:	b114      	cbz	r4, 5070 <ull_conn_done+0x1f48>
											if(temp_gap<min_gap) min_gap = temp_gap;
    506a:	42a6      	cmp	r6, r4
    506c:	bf28      	it	cs
    506e:	4626      	movcs	r6, r4
									for(int j = 0; j <max_conn_int/conn_int_table[handle_now]; j ++){
    5070:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    5072:	f10b 0b01 	add.w	fp, fp, #1
    5076:	455b      	cmp	r3, fp
										temp_i ++;
    5078:	f105 0501 	add.w	r5, r5, #1
									for(int j = 0; j <max_conn_int/conn_int_table[handle_now]; j ++){
    507c:	d8cd      	bhi.n	501a <ull_conn_done+0x1ef2>
    507e:	4630      	mov	r0, r6
    5080:	f7fb f980 	bl	384 <__aeabi_ui2d>
    5084:	4654      	mov	r4, sl
    5086:	468b      	mov	fp, r1
    5088:	4682      	mov	sl, r0
    508a:	e55e      	b.n	4b4a <ull_conn_done+0x1a22>
    508c:	20003ee8 	.word	0x20003ee8
    5090:	2000a862 	.word	0x2000a862
    5094:	20003f00 	.word	0x20003f00
    5098:	20004f00 	.word	0x20004f00
    509c:	00000000 	.word	0x00000000

000050a0 <ull_master_setup>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

void ull_master_setup(memq_link_t *link, struct node_rx_hdr *rx,
		      struct node_rx_ftr *ftr, struct lll_conn *lll)
{
    50a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    50a4:	4617      	mov	r7, r2
	uint32_t ready_delay_us;
	uint8_t peer_addr_type;
	uint32_t ticker_status;
	uint8_t chan_sel;

	((struct lll_scan *)ftr->param)->conn = NULL;
    50a6:	6812      	ldr	r2, [r2, #0]

	pdu_tx = (void *)((struct node_rx_pdu *)rx)->pdu;

	uint16_t win_offset;
	win_offset = sys_le16_to_cpu(pdu_tx->connect_ind.win_offset);
	peer_addr_type = pdu_tx->rx_addr;
    50a8:	f891 c01c 	ldrb.w	ip, [r1, #28]
	scan = ((struct lll_scan *)ftr->param)->hdr.parent;
    50ac:	f8d2 9000 	ldr.w	r9, [r2]
{
    50b0:	460c      	mov	r4, r1
	((struct lll_scan *)ftr->param)->conn = NULL;
    50b2:	f04f 0a00 	mov.w	sl, #0
{
    50b6:	b091      	sub	sp, #68	; 0x44
	((struct lll_scan *)ftr->param)->conn = NULL;
    50b8:	f8c2 a008 	str.w	sl, [r2, #8]
{
    50bc:	461d      	mov	r5, r3
	win_offset = sys_le16_to_cpu(pdu_tx->connect_ind.win_offset);
    50be:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    50c0:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
	memcpy(peer_addr, &pdu_tx->connect_ind.adv_addr[0], BDADDR_SIZE);
    50c4:	3124      	adds	r1, #36	; 0x24
	peer_addr_type = pdu_tx->rx_addr;
    50c6:	f3cc 13c0 	ubfx	r3, ip, #7, #1
	memcpy(peer_addr, &pdu_tx->connect_ind.adv_addr[0], BDADDR_SIZE);
    50ca:	2206      	movs	r2, #6
{
    50cc:	4680      	mov	r8, r0
	memcpy(peer_addr, &pdu_tx->connect_ind.adv_addr[0], BDADDR_SIZE);
    50ce:	a80e      	add	r0, sp, #56	; 0x38
	peer_addr_type = pdu_tx->rx_addr;
    50d0:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
	conn = lll->hdr.parent;
    50d4:	682e      	ldr	r6, [r5, #0]
	memcpy(peer_addr, &pdu_tx->connect_ind.adv_addr[0], BDADDR_SIZE);
    50d6:	f01a feca 	bl	1fe6e <memcpy>

	/* This is the chan sel bit from the received adv pdu */
	chan_sel = pdu_tx->chan_sel;
    50da:	7f23      	ldrb	r3, [r4, #28]

	cc = (void *)pdu_tx;
	cc->status = 0U;
    50dc:	f8a4 a01c 	strh.w	sl, [r4, #28]
	cc->role = 0U;

#if defined(CONFIG_BT_CTLR_PRIVACY)
	uint8_t rl_idx = ftr->rl_idx;

	if (ftr->lrpa_used) {
    50e0:	7c79      	ldrb	r1, [r7, #17]
	uint8_t rl_idx = ftr->rl_idx;
    50e2:	f897 a012 	ldrb.w	sl, [r7, #18]
	chan_sel = pdu_tx->chan_sel;
    50e6:	f3c3 1240 	ubfx	r2, r3, #5, #1
	if (ftr->lrpa_used) {
    50ea:	f011 0101 	ands.w	r1, r1, #1
	chan_sel = pdu_tx->chan_sel;
    50ee:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
    50f2:	920a      	str	r2, [sp, #40]	; 0x28
	if (ftr->lrpa_used) {
    50f4:	f104 002b 	add.w	r0, r4, #43	; 0x2b
		memcpy(&cc->local_rpa[0], &pdu_tx->connect_ind.init_addr[0],
    50f8:	f04f 0206 	mov.w	r2, #6
	if (ftr->lrpa_used) {
    50fc:	f000 80f3 	beq.w	52e6 <ull_master_setup+0x246>
		memcpy(&cc->local_rpa[0], &pdu_tx->connect_ind.init_addr[0],
    5100:	f104 011e 	add.w	r1, r4, #30
    5104:	f01a feb3 	bl	1fe6e <memcpy>
		       BDADDR_SIZE);
	} else {
		memset(&cc->local_rpa[0], 0x0, BDADDR_SIZE);
	}

	if (rl_idx != FILTER_IDX_NONE) {
    5108:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    510c:	f104 0325 	add.w	r3, r4, #37	; 0x25
    5110:	f104 0b1f 	add.w	fp, r4, #31
    5114:	f000 80f1 	beq.w	52fa <ull_master_setup+0x25a>
		/* Store identity address */
		ll_rl_id_addr_get(rl_idx, &cc->peer_addr_type,
    5118:	465a      	mov	r2, fp
    511a:	4650      	mov	r0, sl
    511c:	f104 011e 	add.w	r1, r4, #30
    5120:	930d      	str	r3, [sp, #52]	; 0x34
    5122:	f013 facb 	bl	186bc <ll_rl_id_addr_get>
				  &cc->peer_addr[0]);
		/* Mark it as identity address from RPA (0x02, 0x03) */
		cc->peer_addr_type += 2;
    5126:	7fa2      	ldrb	r2, [r4, #30]

		/* Store peer RPA */
		memcpy(&cc->peer_rpa[0], &peer_addr[0], BDADDR_SIZE);
    5128:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		cc->peer_addr_type += 2;
    512a:	3202      	adds	r2, #2
    512c:	77a2      	strb	r2, [r4, #30]
		memcpy(&cc->peer_rpa[0], &peer_addr[0], BDADDR_SIZE);
    512e:	a90e      	add	r1, sp, #56	; 0x38
    5130:	4618      	mov	r0, r3
    5132:	2206      	movs	r2, #6
    5134:	f01a fe9b 	bl	1fe6e <memcpy>
#endif /* CONFIG_BT_CTLR_PRIVACY */
		cc->peer_addr_type = peer_addr_type;
		memcpy(cc->peer_addr, &peer_addr[0], BDADDR_SIZE);
	}

	cc->interval = lll->interval;
    5138:	8a6b      	ldrh	r3, [r5, #18]
	cc->latency = lll->latency;
    513a:	8aaa      	ldrh	r2, [r5, #20]
	cc->interval = lll->interval;
    513c:	8663      	strh	r3, [r4, #50]	; 0x32
	cc->timeout = scan->lll.conn_timeout;
    513e:	f8b9 3030 	ldrh.w	r3, [r9, #48]	; 0x30
    5142:	86e3      	strh	r3, [r4, #54]	; 0x36
	cc->latency = lll->latency;
    5144:	86a2      	strh	r2, [r4, #52]	; 0x34
	cc->sca = lll_conn_sca_local_get();
    5146:	f015 f83f 	bl	1a1c8 <lll_conn_sca_local_get>
    514a:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38

	lll->handle = ll_conn_handle_get(conn);
    514e:	4630      	mov	r0, r6
    5150:	f010 f884 	bl	1525c <ll_conn_handle_get>
    5154:	4603      	mov	r3, r0
    5156:	8228      	strh	r0, [r5, #16]
		 * rx node.
		 */
		rx_csa = (void *)ftr->extra;

		/* Enqueue the connection event */
		ll_rx_put(link, rx);
    5158:	4621      	mov	r1, r4
	rx->handle = lll->handle;
    515a:	80e3      	strh	r3, [r4, #6]
		ll_rx_put(link, rx);
    515c:	4640      	mov	r0, r8
		rx_csa = (void *)ftr->extra;
    515e:	687c      	ldr	r4, [r7, #4]
		ll_rx_put(link, rx);
    5160:	f00f f93a 	bl	143d8 <ll_rx_put>

		/* use the rx node for CSA event */
		rx = (void *)rx_csa;
		link = rx->link;

		rx->handle = lll->handle;
    5164:	8a2b      	ldrh	r3, [r5, #16]
    5166:	80e3      	strh	r3, [r4, #6]
		rx->type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    5168:	230e      	movs	r3, #14
    516a:	7123      	strb	r3, [r4, #4]

		cs = (void *)rx_csa->pdu;

		if (chan_sel) {
    516c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		link = rx->link;
    516e:	6820      	ldr	r0, [r4, #0]
		if (chan_sel) {
    5170:	2b00      	cmp	r3, #0
    5172:	f000 80b4 	beq.w	52de <ull_master_setup+0x23e>
			uint16_t aa_ls = ((uint16_t)lll->access_addr[1] << 8) |
    5176:	f895 e009 	ldrb.w	lr, [r5, #9]
				      lll->access_addr[0];
    517a:	7a2b      	ldrb	r3, [r5, #8]
			uint16_t aa_ms = ((uint16_t)lll->access_addr[3] << 8) |
    517c:	f895 c00b 	ldrb.w	ip, [r5, #11]
				      lll->access_addr[2];
    5180:	7aa9      	ldrb	r1, [r5, #10]

			lll->data_chan_sel = 1;
    5182:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
			uint16_t aa_ms = ((uint16_t)lll->access_addr[3] << 8) |
    5186:	ea41 210c 	orr.w	r1, r1, ip, lsl #8
			uint16_t aa_ls = ((uint16_t)lll->access_addr[1] << 8) |
    518a:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
			lll->data_chan_id = aa_ms ^ aa_ls;
    518e:	404b      	eors	r3, r1
			lll->data_chan_sel = 1;
    5190:	f042 0240 	orr.w	r2, r2, #64	; 0x40

			cs->csa = 0x01;
    5194:	2101      	movs	r1, #1
			lll->data_chan_id = aa_ms ^ aa_ls;
    5196:	846b      	strh	r3, [r5, #34]	; 0x22
			lll->data_chan_sel = 1;
    5198:	f885 2021 	strb.w	r2, [r5, #33]	; 0x21
			cs->csa = 0x01;
    519c:	7721      	strb	r1, [r4, #28]
		} else {
			cs->csa = 0x00;
		}
	}

	ll_rx_put(link, rx);
    519e:	4621      	mov	r1, r4
    51a0:	f00f f91a 	bl	143d8 <ll_rx_put>
	ll_rx_sched();
    51a4:	f00f f922 	bl	143ec <ll_rx_sched>


#if defined(CONFIG_BT_CTLR_PHY)
	ready_delay_us = lll_radio_tx_ready_delay_get(lll->phy_tx,
						      lll->phy_flags);
    51a8:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
	conn->evt.ticks_xtal_to_start =
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_XTAL_US);
	conn->evt.ticks_preempt_to_start =
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_PREEMPT_MIN_US);
	conn->evt.ticks_slot =
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    51ac:	f8df 8188 	ldr.w	r8, [pc, #392]	; 5338 <ull_master_setup+0x298>
	ready_delay_us = lll_radio_tx_ready_delay_get(lll->phy_tx,
    51b0:	f3c0 01c0 	ubfx	r1, r0, #3, #1
    51b4:	f000 0007 	and.w	r0, r0, #7
    51b8:	f014 fc12 	bl	199e0 <lll_radio_tx_ready_delay_get>
	conn->evt.ticks_active_to_start = 0U;
    51bc:	2400      	movs	r4, #0
	ready_delay_us = lll_radio_tx_ready_delay_get(lll->phy_tx,
    51be:	4683      	mov	fp, r0
	conn->evt.ticks_xtal_to_start =
    51c0:	2331      	movs	r3, #49	; 0x31
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    51c2:	f200 4052 	addw	r0, r0, #1106	; 0x452
	conn->evt.ticks_xtal_to_start =
    51c6:	6033      	str	r3, [r6, #0]
	conn->evt.ticks_preempt_to_start =
    51c8:	e9c6 4401 	strd	r4, r4, [r6, #4]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    51cc:	a352      	add	r3, pc, #328	; (adr r3, 5318 <ull_master_setup+0x278>)
    51ce:	e9d3 2300 	ldrd	r2, r3, [r3]
    51d2:	fba0 0108 	umull	r0, r1, r0, r8
    51d6:	f7fb fc31 	bl	a3c <__aeabi_uldivmod>
    51da:	68fa      	ldr	r2, [r7, #12]
	}

	conn_interval_us = lll->interval * 1250;
	conn_offset_us = ftr->radio_end_us;
	/* BLEX: we modified zephyr code to update winoffset according to Bluetooth specification */
	conn_offset_us += ((uint64_t)win_offset +1)*1250U; 
    51dc:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
	conn_interval_us = lll->interval * 1250;
    51e0:	8a6b      	ldrh	r3, [r5, #18]
    51e2:	f240 4ae2 	movw	sl, #1250	; 0x4e2
	conn_offset_us += ((uint64_t)win_offset +1)*1250U; 
    51e6:	fb0a a501 	mla	r5, sl, r1, sl
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    51ea:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    51ee:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
	conn->evt.ticks_slot =
    51f2:	60f0      	str	r0, [r6, #12]

#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	/* disable ticker job, in order to chain stop and start to avoid RTC
	 * being stopped if no tickers active.
	 */
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    51f4:	2102      	movs	r1, #2
	conn_offset_us -= EVENT_OVERHEAD_START_US;
    51f6:	4415      	add	r5, r2
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    51f8:	2001      	movs	r0, #1
    51fa:	4622      	mov	r2, r4
	conn_interval_us = lll->interval * 1250;
    51fc:	fb0a fa03 	mul.w	sl, sl, r3
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    5200:	f00a ff80 	bl	10104 <mayfly_enable>
#endif

	/* Stop Scanner */
	ticker_id_scan = TICKER_ID_SCAN_BASE + ull_scan_handle_get(scan);
    5204:	4648      	mov	r0, r9
    5206:	f00f fc0d 	bl	14a24 <ull_scan_handle_get>
    520a:	1c82      	adds	r2, r0, #2
    520c:	b2d2      	uxtb	r2, r2
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    520e:	4b44      	ldr	r3, [pc, #272]	; (5320 <ull_master_setup+0x280>)
				    TICKER_USER_ID_ULL_HIGH,
				    ticker_id_scan, ticker_op_stop_scan_cb,
				    (void *)(uint32_t)ticker_id_scan);
    5210:	9200      	str	r2, [sp, #0]
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    5212:	2101      	movs	r1, #1
    5214:	4620      	mov	r0, r4
    5216:	f00c fba1 	bl	1195c <ticker_stop>

	/* Scanner stop can expire while here in this ISR.
	 * Deferred attempt to stop can fail as it would have
	 * expired, hence ignore failure.
	 */
	ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
    521a:	2201      	movs	r2, #1
    521c:	4611      	mov	r1, r2
    521e:	4623      	mov	r3, r4
    5220:	9400      	str	r4, [sp, #0]
    5222:	4620      	mov	r0, r4
    5224:	f00c fb9a 	bl	1195c <ticker_stop>
		    TICKER_ID_SCAN_STOP, NULL, NULL);

	/* Start master */
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    5228:	4630      	mov	r0, r6
    522a:	f010 f817 	bl	1525c <ll_conn_handle_get>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    522e:	9606      	str	r6, [sp, #24]
    5230:	4a3c      	ldr	r2, [pc, #240]	; (5324 <ull_master_setup+0x284>)
    5232:	4b3d      	ldr	r3, [pc, #244]	; (5328 <ull_master_setup+0x288>)
    5234:	68bf      	ldr	r7, [r7, #8]
    5236:	9207      	str	r2, [sp, #28]
    5238:	f240 21ca 	movw	r1, #714	; 0x2ca
    523c:	9108      	str	r1, [sp, #32]
    523e:	9305      	str	r3, [sp, #20]
    5240:	68f3      	ldr	r3, [r6, #12]
    5242:	9304      	str	r3, [sp, #16]
	conn_offset_us -= ready_delay_us;
    5244:	eba5 050b 	sub.w	r5, r5, fp
				     TICKER_USER_ID_ULL_HIGH,
				     ticker_id_conn,
				     ftr->ticks_anchor - ticks_slot_offset,
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    5248:	fb8a ab08 	smull	sl, fp, sl, r8
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    524c:	f100 0c03 	add.w	ip, r0, #3
				     HAL_TICKER_REMAINDER(conn_interval_us),
    5250:	a331      	add	r3, pc, #196	; (adr r3, 5318 <ull_master_setup+0x278>)
    5252:	e9d3 2300 	ldrd	r2, r3, [r3]
    5256:	4650      	mov	r0, sl
    5258:	4659      	mov	r1, fp
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    525a:	fa5f f68c 	uxtb.w	r6, ip
    525e:	9403      	str	r4, [sp, #12]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    5260:	f7fb fbec 	bl	a3c <__aeabi_uldivmod>
    5264:	4610      	mov	r0, r2
    5266:	4619      	mov	r1, r3
    5268:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    526c:	2300      	movs	r3, #0
    526e:	f7fb fbe5 	bl	a3c <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    5272:	a329      	add	r3, pc, #164	; (adr r3, 5318 <ull_master_setup+0x278>)
    5274:	e9d3 2300 	ldrd	r2, r3, [r3]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    5278:	4684      	mov	ip, r0
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    527a:	4659      	mov	r1, fp
    527c:	4650      	mov	r0, sl
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    527e:	f8cd c008 	str.w	ip, [sp, #8]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    5282:	f7fb fbdb 	bl	a3c <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    5286:	a324      	add	r3, pc, #144	; (adr r3, 5318 <ull_master_setup+0x278>)
    5288:	e9d3 2300 	ldrd	r2, r3, [r3]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    528c:	4684      	mov	ip, r0
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    528e:	fba5 0108 	umull	r0, r1, r5, r8
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    5292:	f8cd c004 	str.w	ip, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    5296:	f7fb fbd1 	bl	a3c <__aeabi_uldivmod>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    529a:	3f31      	subs	r7, #49	; 0x31
    529c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    52a0:	463b      	mov	r3, r7
    52a2:	9000      	str	r0, [sp, #0]
    52a4:	4632      	mov	r2, r6
    52a6:	4620      	mov	r0, r4
    52a8:	2101      	movs	r1, #1
    52aa:	f00c faeb 	bl	11884 <ticker_start>
				     TICKER_NULL_LAZY,
				     (conn->evt.ticks_slot +
				      ticks_slot_overhead),
				     ull_master_ticker_cb, conn, ticker_op_cb,
				     (void *)__LINE__);
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    52ae:	f030 0302 	bics.w	r3, r0, #2
    52b2:	d00c      	beq.n	52ce <ull_master_setup+0x22e>
    52b4:	4a1d      	ldr	r2, [pc, #116]	; (532c <ull_master_setup+0x28c>)
    52b6:	491e      	ldr	r1, [pc, #120]	; (5330 <ull_master_setup+0x290>)
    52b8:	481e      	ldr	r0, [pc, #120]	; (5334 <ull_master_setup+0x294>)
    52ba:	f240 23cb 	movw	r3, #715	; 0x2cb
    52be:	f018 fe44 	bl	1df4a <printk>
    52c2:	4040      	eors	r0, r0
    52c4:	f380 8811 	msr	BASEPRI, r0
    52c8:	f04f 0003 	mov.w	r0, #3
    52cc:	df02      	svc	2

#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	/* enable ticker job, irrespective of disabled in this function so
	 * first connection event can be scheduled as soon as possible.
	 */
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
    52ce:	2201      	movs	r2, #1
    52d0:	4610      	mov	r0, r2
    52d2:	2102      	movs	r1, #2
    52d4:	f00a ff16 	bl	10104 <mayfly_enable>
#endif
}
    52d8:	b011      	add	sp, #68	; 0x44
    52da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			cs->csa = 0x00;
    52de:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    52e2:	7723      	strb	r3, [r4, #28]
    52e4:	e75b      	b.n	519e <ull_master_setup+0xfe>
		memset(&cc->local_rpa[0], 0x0, BDADDR_SIZE);
    52e6:	f01a fded 	bl	1fec4 <memset>
	if (rl_idx != FILTER_IDX_NONE) {
    52ea:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    52ee:	f104 0325 	add.w	r3, r4, #37	; 0x25
    52f2:	f104 0b1f 	add.w	fp, r4, #31
    52f6:	f47f af0f 	bne.w	5118 <ull_master_setup+0x78>
		memset(&cc->peer_rpa[0], 0x0, BDADDR_SIZE);
    52fa:	4618      	mov	r0, r3
    52fc:	2206      	movs	r2, #6
    52fe:	2100      	movs	r1, #0
    5300:	f01a fde0 	bl	1fec4 <memset>
		cc->peer_addr_type = peer_addr_type;
    5304:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    5308:	77a3      	strb	r3, [r4, #30]
		memcpy(cc->peer_addr, &peer_addr[0], BDADDR_SIZE);
    530a:	a90e      	add	r1, sp, #56	; 0x38
    530c:	4658      	mov	r0, fp
    530e:	2206      	movs	r2, #6
    5310:	f01a fdad 	bl	1fe6e <memcpy>
    5314:	e710      	b.n	5138 <ull_master_setup+0x98>
    5316:	bf00      	nop
    5318:	1afd498d 	.word	0x1afd498d
    531c:	00000007 	.word	0x00000007
    5320:	00017c35 	.word	0x00017c35
    5324:	00017c39 	.word	0x00017c39
    5328:	00017c69 	.word	0x00017c69
    532c:	00024678 	.word	0x00024678
    5330:	000245a8 	.word	0x000245a8
    5334:	00023fe4 	.word	0x00023fe4
    5338:	3b9aca00 	.word	0x3b9aca00
    533c:	00000000 	.word	0x00000000

00005340 <isr_rx>:

	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
}

static void isr_rx(void *param)
{
    5340:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5344:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CTLR_PROFILE_ISR)) {
		lll_prof_latency_capture();
	}

	/* Read radio status and events */
	trx_done = radio_is_done();
    5346:	f015 fe5b 	bl	1b000 <radio_is_done>
	if (trx_done) {
    534a:	f010 0fff 	tst.w	r0, #255	; 0xff
    534e:	d109      	bne.n	5364 <isr_rx+0x24>
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0U;
		devmatch_id = irkmatch_id = 0xFF;
	}

	/* Clear radio status and events */
	lll_isr_status_reset();
    5350:	f014 fb5a 	bl	19a08 <lll_isr_status_reset>
			return;
		}
	}

isr_rx_do_close:
	radio_isr_set(isr_done, lll);
    5354:	4621      	mov	r1, r4
    5356:	48cc      	ldr	r0, [pc, #816]	; (5688 <isr_rx+0x348>)
    5358:	f015 fd18 	bl	1ad8c <radio_isr_set>
	radio_disable();
}
    535c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	radio_disable();
    5360:	f015 be20 	b.w	1afa4 <radio_disable>
		crc_ok = radio_crc_is_valid();
    5364:	f015 fe6c 	bl	1b040 <radio_crc_is_valid>
    5368:	b2c6      	uxtb	r6, r0
		devmatch_ok = radio_filter_has_match();
    536a:	f015 fef3 	bl	1b154 <radio_filter_has_match>
    536e:	b2c5      	uxtb	r5, r0
		devmatch_id = radio_filter_match_get();
    5370:	f015 fefa 	bl	1b168 <radio_filter_match_get>
    5374:	4680      	mov	r8, r0
		irkmatch_ok = radio_ar_has_match();
    5376:	f016 f8f9 	bl	1b56c <radio_ar_has_match>
    537a:	b2c7      	uxtb	r7, r0
		irkmatch_id = radio_ar_match_get();
    537c:	f016 f8e4 	bl	1b548 <radio_ar_match_get>
    5380:	4681      	mov	r9, r0
		rssi_ready = radio_rssi_is_ready();
    5382:	f015 feaf 	bl	1b0e4 <radio_rssi_is_ready>
    5386:	4682      	mov	sl, r0
	lll_isr_status_reset();
    5388:	f014 fb3e 	bl	19a08 <lll_isr_status_reset>
	rl_idx = devmatch_ok ?
    538c:	2d00      	cmp	r5, #0
    538e:	f040 809a 	bne.w	54c6 <isr_rx+0x186>
    5392:	2f00      	cmp	r7, #0
    5394:	f040 80aa 	bne.w	54ec <isr_rx+0x1ac>
    5398:	f04f 08ff 	mov.w	r8, #255	; 0xff
	if (crc_ok && isr_rx_scan_check(lll, irkmatch_ok, devmatch_ok,
    539c:	2e00      	cmp	r6, #0
    539e:	d0d9      	beq.n	5354 <isr_rx+0x14>

static inline bool isr_rx_scan_check(struct lll_scan *lll, uint8_t irkmatch_ok,
				     uint8_t devmatch_ok, uint8_t rl_idx)
{
#if defined(CONFIG_BT_CTLR_PRIVACY)
	return (((lll->filter_policy & 0x01) == 0) &&
    53a0:	7da3      	ldrb	r3, [r4, #22]
		 (!devmatch_ok || ull_filter_lll_rl_idx_allowed(irkmatch_ok,
								rl_idx))) ||
    53a2:	0719      	lsls	r1, r3, #28
    53a4:	f100 8098 	bmi.w	54d8 <isr_rx+0x198>
	return (((lll->filter_policy & 0x01) == 0) &&
    53a8:	2d00      	cmp	r5, #0
    53aa:	f040 813a 	bne.w	5622 <isr_rx+0x2e2>
{
	struct node_rx_pdu *node_rx;
	struct pdu_adv *pdu_adv_rx;
	bool dir_report = false;

	node_rx = ull_pdu_rx_alloc_peek(1);
    53ae:	2001      	movs	r0, #1
    53b0:	f00f f91c 	bl	145ec <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
    53b4:	4605      	mov	r5, r0
    53b6:	2800      	cmp	r0, #0
    53b8:	f000 814d 	beq.w	5656 <isr_rx+0x316>
	pdu_adv_rx = (void *)node_rx->pdu;

	if (0) {
#if defined(CONFIG_BT_CENTRAL)
	/* Initiator */
	} else if ((lll->conn) &&
    53bc:	68a3      	ldr	r3, [r4, #8]
		rssi_ready = radio_rssi_is_ready();
    53be:	fa5f fa8a 	uxtb.w	sl, sl
	} else if ((lll->conn) &&
    53c2:	2b00      	cmp	r3, #0
    53c4:	f000 80c3 	beq.w	554e <isr_rx+0x20e>
}

static inline bool isr_scan_init_check(struct lll_scan *lll,
				       struct pdu_adv *pdu, uint8_t rl_idx)
{
	return ((((lll->filter_policy & 0x01) != 0U) ||
    53c8:	7da3      	ldrb	r3, [r4, #22]
		 isr_scan_init_adva_check(lll, pdu, rl_idx)) &&
    53ca:	071a      	lsls	r2, r3, #28
    53cc:	f140 8135 	bpl.w	563a <isr_rx+0x2fa>
		(((pdu->type == PDU_ADV_TYPE_ADV_IND) &&
    53d0:	7f28      	ldrb	r0, [r5, #28]
		 isr_scan_init_adva_check(lll, pdu, rl_idx)) &&
    53d2:	f010 030f 	ands.w	r3, r0, #15
    53d6:	f040 808f 	bne.w	54f8 <isr_rx+0x1b8>
		(((pdu->type == PDU_ADV_TYPE_ADV_IND) &&
    53da:	7f6b      	ldrb	r3, [r5, #29]
    53dc:	2b25      	cmp	r3, #37	; 0x25
    53de:	f200 80fd 	bhi.w	55dc <isr_rx+0x29c>
			rx = ull_pdu_rx_alloc_peek(4);
    53e2:	2004      	movs	r0, #4
    53e4:	f00f f902 	bl	145ec <ull_pdu_rx_alloc_peek>
		if (!rx) {
    53e8:	2800      	cmp	r0, #0
    53ea:	d0b3      	beq.n	5354 <isr_rx+0x14>
		pdu_end_us = radio_tmr_end_get();
    53ec:	f015 ffc6 	bl	1b37c <radio_tmr_end_get>
		if (!lll->ticks_window) {
    53f0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
		pdu_end_us = radio_tmr_end_get();
    53f2:	4606      	mov	r6, r0
		if (!lll->ticks_window) {
    53f4:	b943      	cbnz	r3, 5408 <isr_rx+0xc8>
			scan_interval_us = lll->interval * 625U;
    53f6:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
    53f8:	f240 2371 	movw	r3, #625	; 0x271
    53fc:	fb03 f302 	mul.w	r3, r3, r2
			pdu_end_us %= scan_interval_us;
    5400:	fbb0 f2f3 	udiv	r2, r0, r3
    5404:	fb03 0612 	mls	r6, r3, r2, r0
		if (pdu_end_us > (HAL_TICKER_TICKS_TO_US(evt->ticks_slot) -
    5408:	6823      	ldr	r3, [r4, #0]
    540a:	48a0      	ldr	r0, [pc, #640]	; (568c <isr_rx+0x34c>)
    540c:	68db      	ldr	r3, [r3, #12]
    540e:	2207      	movs	r2, #7
    5410:	fba3 0100 	umull	r0, r1, r3, r0
    5414:	fb02 1103 	mla	r1, r2, r3, r1
    5418:	a399      	add	r3, pc, #612	; (adr r3, 5680 <isr_rx+0x340>)
    541a:	e9d3 2300 	ldrd	r2, r3, [r3]
    541e:	f7fb fb0d 	bl	a3c <__aeabi_uldivmod>
				  EVENT_IFS_US - 352 - EVENT_OVERHEAD_START_US -
    5422:	f2a0 3342 	subw	r3, r0, #834	; 0x342
		if (pdu_end_us > (HAL_TICKER_TICKS_TO_US(evt->ticks_slot) -
    5426:	42b3      	cmp	r3, r6
    5428:	d394      	bcc.n	5354 <isr_rx+0x14>
		radio_switch_complete_and_disable();
    542a:	f015 fe35 	bl	1b098 <radio_switch_complete_and_disable>
		lll_conn = lll->conn;
    542e:	f8d4 9008 	ldr.w	r9, [r4, #8]
		pdu_tx = (void *)radio_pkt_scratch_get();
    5432:	f015 fe13 	bl	1b05c <radio_pkt_scratch_get>
		pdu_tx->rx_addr = pdu_adv_rx->tx_addr;
    5436:	7f2b      	ldrb	r3, [r5, #28]
		pdu_tx->type = PDU_ADV_TYPE_CONNECT_IND;
    5438:	7802      	ldrb	r2, [r0, #0]
		pdu_tx->rx_addr = pdu_adv_rx->tx_addr;
    543a:	f3c3 1380 	ubfx	r3, r3, #6, #1
		pdu_tx->type = PDU_ADV_TYPE_CONNECT_IND;
    543e:	01db      	lsls	r3, r3, #7
    5440:	f002 0250 	and.w	r2, r2, #80	; 0x50
    5444:	f043 0325 	orr.w	r3, r3, #37	; 0x25
    5448:	4313      	orrs	r3, r2
		pdu_tx->len = sizeof(struct pdu_adv_connect_ind);
    544a:	2222      	movs	r2, #34	; 0x22
		pdu_tx->type = PDU_ADV_TYPE_CONNECT_IND;
    544c:	7003      	strb	r3, [r0, #0]
		pdu_tx->len = sizeof(struct pdu_adv_connect_ind);
    544e:	7042      	strb	r2, [r0, #1]
		pdu_tx = (void *)radio_pkt_scratch_get();
    5450:	4606      	mov	r6, r0
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
    5452:	4640      	mov	r0, r8
    5454:	f013 fde6 	bl	19024 <ull_filter_lll_lrpa_get>
		if (lll->rpa_gen && lrpa) {
    5458:	7de3      	ldrb	r3, [r4, #23]
    545a:	07da      	lsls	r2, r3, #31
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
    545c:	4683      	mov	fp, r0
		if (lll->rpa_gen && lrpa) {
    545e:	f106 0002 	add.w	r0, r6, #2
    5462:	f140 8171 	bpl.w	5748 <isr_rx+0x408>
    5466:	f1bb 0f00 	cmp.w	fp, #0
    546a:	f000 816d 	beq.w	5748 <isr_rx+0x408>
			pdu_tx->tx_addr = 1;
    546e:	7833      	ldrb	r3, [r6, #0]
    5470:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    5474:	7033      	strb	r3, [r6, #0]
			memcpy(&pdu_tx->connect_ind.init_addr[0], lrpa->val,
    5476:	2206      	movs	r2, #6
    5478:	4659      	mov	r1, fp
    547a:	f01a fcf8 	bl	1fe6e <memcpy>
		memcpy(&pdu_tx->connect_ind.adv_addr[0],
    547e:	2206      	movs	r2, #6
    5480:	f105 011e 	add.w	r1, r5, #30
    5484:	f106 0008 	add.w	r0, r6, #8
    5488:	f01a fcf1 	bl	1fe6e <memcpy>
		memcpy(&pdu_tx->connect_ind.access_addr[0],
    548c:	2204      	movs	r2, #4
    548e:	f109 0108 	add.w	r1, r9, #8
    5492:	f106 000e 	add.w	r0, r6, #14
    5496:	f01a fcea 	bl	1fe6e <memcpy>
		memcpy(&pdu_tx->connect_ind.crc_init[0],
    549a:	2203      	movs	r2, #3
    549c:	f109 010c 	add.w	r1, r9, #12
    54a0:	f106 0012 	add.w	r0, r6, #18
    54a4:	f01a fce3 	bl	1fe6e <memcpy>
		pdu_tx->connect_ind.win_size = 1;
    54a8:	2301      	movs	r3, #1
    54aa:	7573      	strb	r3, [r6, #21]
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    54ac:	f015 ff66 	bl	1b37c <radio_tmr_end_get>
    54b0:	4682      	mov	sl, r0
			win_offset_dummy = set_winoffset(lll_conn);
    54b2:	4648      	mov	r0, r9
    54b4:	f012 fae6 	bl	17a84 <set_winoffset>
    54b8:	b283      	uxth	r3, r0
			if(win_offset_dummy > 2048){
    54ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    54be:	f240 8166 	bls.w	578e <isr_rx+0x44e>
}
    54c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		 ull_filter_lll_rl_idx(!!(lll->filter_policy & 0x01),
    54c6:	7da0      	ldrb	r0, [r4, #22]
    54c8:	fa5f f188 	uxtb.w	r1, r8
    54cc:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    54d0:	f013 fdc6 	bl	19060 <ull_filter_lll_rl_idx>
    54d4:	4680      	mov	r8, r0
    54d6:	e761      	b.n	539c <isr_rx+0x5c>
		(((lll->filter_policy & 0x01) != 0) &&
    54d8:	2d00      	cmp	r5, #0
    54da:	f47f af68 	bne.w	53ae <isr_rx+0x6e>
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(rl_idx)));
    54de:	4640      	mov	r0, r8
    54e0:	f013 fe7a 	bl	191d8 <ull_filter_lll_irk_whitelisted>
    54e4:	2800      	cmp	r0, #0
    54e6:	f47f af62 	bne.w	53ae <isr_rx+0x6e>
    54ea:	e733      	b.n	5354 <isr_rx+0x14>
		 irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
    54ec:	fa5f f089 	uxtb.w	r0, r9
    54f0:	f013 fe20 	bl	19134 <ull_filter_lll_rl_irk_idx>
    54f4:	4680      	mov	r8, r0
    54f6:	e751      	b.n	539c <isr_rx+0x5c>
		  (pdu->len <= sizeof(struct pdu_adv_adv_ind))) ||
    54f8:	2b01      	cmp	r3, #1
    54fa:	d149      	bne.n	5590 <isr_rx+0x250>
		 ((pdu->type == PDU_ADV_TYPE_DIRECT_IND) &&
    54fc:	7f6b      	ldrb	r3, [r5, #29]
    54fe:	2b0c      	cmp	r3, #12
    5500:	f47f af28 	bne.w	5354 <isr_rx+0x14>
				       struct pdu_adv *pdu, uint8_t rl_idx,
				       bool *dir_report)
{
#if defined(CONFIG_BT_CTLR_PRIVACY)
	if (ull_filter_lll_rl_addr_resolve(pdu->rx_addr,
					   pdu->direct_ind.tgt_addr, rl_idx)) {
    5504:	f105 0624 	add.w	r6, r5, #36	; 0x24
	if (ull_filter_lll_rl_addr_resolve(pdu->rx_addr,
    5508:	09c0      	lsrs	r0, r0, #7
    550a:	4631      	mov	r1, r6
    550c:	4642      	mov	r2, r8
    550e:	f013 fed3 	bl	192b8 <ull_filter_lll_rl_addr_resolve>
    5512:	2800      	cmp	r0, #0
    5514:	f47f af65 	bne.w	53e2 <isr_rx+0xa2>
		return true;
	} else if (init && lll->rpa_gen &&
    5518:	7de3      	ldrb	r3, [r4, #23]
    551a:	07db      	lsls	r3, r3, #31
    551c:	f100 81ce 	bmi.w	58bc <isr_rx+0x57c>
		 */
		return false;
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */

	return (((lll->init_addr_type == pdu->rx_addr) &&
    5520:	7da3      	ldrb	r3, [r4, #22]
    5522:	7f28      	ldrb	r0, [r5, #28]
		!memcmp(lll->init_addr, pdu->direct_ind.tgt_addr,
			BDADDR_SIZE))) ||
    5524:	f3c3 1280 	ubfx	r2, r3, #6, #1
    5528:	ebb2 1fd0 	cmp.w	r2, r0, lsr #7
    552c:	f000 81ef 	beq.w	590e <isr_rx+0x5ce>

static inline bool isr_scan_tgta_rpa_check(struct lll_scan *lll,
					   struct pdu_adv *pdu,
					   bool *dir_report)
{
	if (((lll->filter_policy & 0x02) != 0U) &&
    5530:	f3c3 03c1 	ubfx	r3, r3, #3, #2
    5534:	0798      	lsls	r0, r3, #30
    5536:	d50a      	bpl.n	554e <isr_rx+0x20e>
    5538:	f995 301c 	ldrsb.w	r3, [r5, #28]
    553c:	2b00      	cmp	r3, #0
    553e:	da06      	bge.n	554e <isr_rx+0x20e>
	    (pdu->rx_addr != 0) &&
    5540:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
    5544:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    5548:	2b40      	cmp	r3, #64	; 0x40
    554a:	f43f af4a 	beq.w	53e2 <isr_rx+0xa2>
    554e:	7f28      	ldrb	r0, [r5, #28]
	} else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    5550:	f010 030f 	ands.w	r3, r0, #15
    5554:	d11c      	bne.n	5590 <isr_rx+0x250>
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    5556:	7f6b      	ldrb	r3, [r5, #29]
    5558:	2b25      	cmp	r3, #37	; 0x25
    555a:	f63f aefb 	bhi.w	5354 <isr_rx+0x14>
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind)) &&
    555e:	f994 2016 	ldrsb.w	r2, [r4, #22]
    5562:	2a00      	cmp	r2, #0
    5564:	f2c0 809a 	blt.w	569c <isr_rx+0x35c>
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    5568:	2b25      	cmp	r3, #37	; 0x25
	bool dir_report = false;
    556a:	bf98      	it	ls
    556c:	2600      	movls	r6, #0
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    556e:	d835      	bhi.n	55dc <isr_rx+0x29c>
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
    5570:	2b00      	cmp	r3, #0
    5572:	f43f aeef 	beq.w	5354 <isr_rx+0x14>
		 (pdu_adv_rx->len != 0) &&
    5576:	68a3      	ldr	r3, [r4, #8]
    5578:	2b00      	cmp	r3, #0
    557a:	f47f aeeb 	bne.w	5354 <isr_rx+0x14>
		err = isr_rx_scan_report(lll, rssi_ready,
    557e:	2f00      	cmp	r7, #0
    5580:	bf14      	ite	ne
    5582:	4641      	movne	r1, r8
    5584:	21ff      	moveq	r1, #255	; 0xff
    5586:	4632      	mov	r2, r6
    5588:	4650      	mov	r0, sl
    558a:	f014 fd61 	bl	1a050 <isr_rx_scan_report.isra.0>
		if (err) {
    558e:	e6e1      	b.n	5354 <isr_rx+0x14>
	} else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    5590:	2b06      	cmp	r3, #6
    5592:	d06e      	beq.n	5672 <isr_rx+0x332>
	else if (((((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    5594:	2b02      	cmp	r3, #2
    5596:	f000 80d5 	beq.w	5744 <isr_rx+0x404>
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind))) ||
    559a:	2b01      	cmp	r3, #1
    559c:	d11e      	bne.n	55dc <isr_rx+0x29c>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
    559e:	7f6b      	ldrb	r3, [r5, #29]
    55a0:	2b0c      	cmp	r3, #12
    55a2:	f47f aed7 	bne.w	5354 <isr_rx+0x14>
					   pdu->direct_ind.tgt_addr, rl_idx)) {
    55a6:	f105 0924 	add.w	r9, r5, #36	; 0x24
	if (ull_filter_lll_rl_addr_resolve(pdu->rx_addr,
    55aa:	09c0      	lsrs	r0, r0, #7
    55ac:	4649      	mov	r1, r9
    55ae:	4642      	mov	r2, r8
    55b0:	f013 fe82 	bl	192b8 <ull_filter_lll_rl_addr_resolve>
    55b4:	4606      	mov	r6, r0
    55b6:	bb88      	cbnz	r0, 561c <isr_rx+0x2dc>
	return (((lll->init_addr_type == pdu->rx_addr) &&
    55b8:	7da3      	ldrb	r3, [r4, #22]
    55ba:	7f28      	ldrb	r0, [r5, #28]
			BDADDR_SIZE))) ||
    55bc:	f3c3 1280 	ubfx	r2, r3, #6, #1
    55c0:	ebb2 1fd0 	cmp.w	r2, r0, lsr #7
    55c4:	f000 819a 	beq.w	58fc <isr_rx+0x5bc>
	if (((lll->filter_policy & 0x02) != 0U) &&
    55c8:	f3c3 03c1 	ubfx	r3, r3, #3, #2
    55cc:	0798      	lsls	r0, r3, #30
    55ce:	d504      	bpl.n	55da <isr_rx+0x29a>
    55d0:	f995 301c 	ldrsb.w	r3, [r5, #28]
    55d4:	2b00      	cmp	r3, #0
    55d6:	f2c0 8187 	blt.w	58e8 <isr_rx+0x5a8>
    55da:	7f28      	ldrb	r0, [r5, #28]
					&dir_report))) ||
    55dc:	f000 000f 	and.w	r0, r0, #15
    55e0:	2804      	cmp	r0, #4
    55e2:	f47f aeb7 	bne.w	5354 <isr_rx+0x14>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
    55e6:	7f6b      	ldrb	r3, [r5, #29]
    55e8:	2b25      	cmp	r3, #37	; 0x25
    55ea:	f63f aeb3 	bhi.w	5354 <isr_rx+0x14>
		   (lll->state != 0U) &&
    55ee:	7da3      	ldrb	r3, [r4, #22]
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_scan_rsp)) &&
    55f0:	07da      	lsls	r2, r3, #31
    55f2:	f57f aeaf 	bpl.w	5354 <isr_rx+0x14>
	return false;
}

static inline bool isr_scan_rsp_adva_matches(struct pdu_adv *srsp)
{
	struct pdu_adv *sreq = (void *)radio_pkt_scratch_get();
    55f6:	f015 fd31 	bl	1b05c <radio_pkt_scratch_get>

	return ((sreq->rx_addr == srsp->tx_addr) &&
    55fa:	7f2b      	ldrb	r3, [r5, #28]
    55fc:	7802      	ldrb	r2, [r0, #0]
    55fe:	f3c3 1380 	ubfx	r3, r3, #6, #1
    5602:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    5606:	f47f aea5 	bne.w	5354 <isr_rx+0x14>
		(memcmp(&sreq->scan_req.adv_addr[0],
    560a:	3008      	adds	r0, #8
    560c:	2206      	movs	r2, #6
    560e:	f105 011e 	add.w	r1, r5, #30
    5612:	f01a fc1c 	bl	1fe4e <memcmp>
	return ((sreq->rx_addr == srsp->tx_addr) &&
    5616:	2800      	cmp	r0, #0
    5618:	f47f ae9c 	bne.w	5354 <isr_rx+0x14>
    561c:	7f6b      	ldrb	r3, [r5, #29]
	bool dir_report = false;
    561e:	2600      	movs	r6, #0
    5620:	e7a6      	b.n	5570 <isr_rx+0x230>
		 (!devmatch_ok || ull_filter_lll_rl_idx_allowed(irkmatch_ok,
    5622:	4641      	mov	r1, r8
    5624:	4638      	mov	r0, r7
    5626:	f013 fe13 	bl	19250 <ull_filter_lll_rl_idx_allowed>
    562a:	2800      	cmp	r0, #0
    562c:	f47f aebf 	bne.w	53ae <isr_rx+0x6e>
		(((lll->filter_policy & 0x01) != 0) &&
    5630:	7da3      	ldrb	r3, [r4, #22]
								rl_idx))) ||
    5632:	071b      	lsls	r3, r3, #28
    5634:	f57f ae8e 	bpl.w	5354 <isr_rx+0x14>
    5638:	e6b9      	b.n	53ae <isr_rx+0x6e>
	if (rl_idx != FILTER_IDX_NONE) {
    563a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    563e:	f000 8090 	beq.w	5762 <isr_rx+0x422>
		return (rl_idx == lll->rl_idx);
    5642:	7e23      	ldrb	r3, [r4, #24]
    5644:	eba3 0308 	sub.w	r3, r3, r8
    5648:	fab3 f383 	clz	r3, r3
    564c:	095b      	lsrs	r3, r3, #5
	return ((((lll->filter_policy & 0x01) != 0U) ||
    564e:	2b00      	cmp	r3, #0
    5650:	f47f aebe 	bne.w	53d0 <isr_rx+0x90>
    5654:	e77b      	b.n	554e <isr_rx+0x20e>
	LL_ASSERT(node_rx);
    5656:	4a0e      	ldr	r2, [pc, #56]	; (5690 <isr_rx+0x350>)
    5658:	490e      	ldr	r1, [pc, #56]	; (5694 <isr_rx+0x354>)
    565a:	480f      	ldr	r0, [pc, #60]	; (5698 <isr_rx+0x358>)
    565c:	f240 2396 	movw	r3, #662	; 0x296
    5660:	f018 fc73 	bl	1df4a <printk>
    5664:	4040      	eors	r0, r0
    5666:	f380 8811 	msr	BASEPRI, r0
    566a:	f04f 0003 	mov.w	r0, #3
    566e:	df02      	svc	2
    5670:	e6a4      	b.n	53bc <isr_rx+0x7c>
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    5672:	7f6b      	ldrb	r3, [r5, #29]
    5674:	2b25      	cmp	r3, #37	; 0x25
    5676:	f67f af72 	bls.w	555e <isr_rx+0x21e>
    567a:	e7af      	b.n	55dc <isr_rx+0x29c>
    567c:	f3af 8000 	nop.w
    5680:	3b9aca00 	.word	0x3b9aca00
    5684:	00000000 	.word	0x00000000
    5688:	00019dad 	.word	0x00019dad
    568c:	1afd498d 	.word	0x1afd498d
    5690:	00024a28 	.word	0x00024a28
    5694:	00024a74 	.word	0x00024a74
    5698:	00023fe4 	.word	0x00023fe4
		   lll->type &&
    569c:	68a2      	ldr	r2, [r4, #8]
    569e:	2a00      	cmp	r2, #0
    56a0:	f47f af62 	bne.w	5568 <isr_rx+0x228>
		radio_tmr_tifs_set(EVENT_IFS_US);
    56a4:	2096      	movs	r0, #150	; 0x96
    56a6:	f015 fd75 	bl	1b194 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    56aa:	2000      	movs	r0, #0
    56ac:	f015 fcda 	bl	1b064 <radio_switch_complete_and_rx>
		err = isr_rx_scan_report(lll, rssi_ready,
    56b0:	2f00      	cmp	r7, #0
    56b2:	bf14      	ite	ne
    56b4:	4641      	movne	r1, r8
    56b6:	21ff      	moveq	r1, #255	; 0xff
    56b8:	4650      	mov	r0, sl
    56ba:	2200      	movs	r2, #0
    56bc:	f014 fcc8 	bl	1a050 <isr_rx_scan_report.isra.0>
		if (err) {
    56c0:	2800      	cmp	r0, #0
    56c2:	f47f ae47 	bne.w	5354 <isr_rx+0x14>
		pdu_tx = (void *)radio_pkt_scratch_get();
    56c6:	f015 fcc9 	bl	1b05c <radio_pkt_scratch_get>
		pdu_tx->rx_addr = pdu_adv_rx->tx_addr;
    56ca:	7f2b      	ldrb	r3, [r5, #28]
		pdu_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    56cc:	7802      	ldrb	r2, [r0, #0]
		pdu_tx->rx_addr = pdu_adv_rx->tx_addr;
    56ce:	f3c3 1380 	ubfx	r3, r3, #6, #1
		pdu_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    56d2:	01db      	lsls	r3, r3, #7
		pdu_tx = (void *)radio_pkt_scratch_get();
    56d4:	4606      	mov	r6, r0
		pdu_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    56d6:	f002 0270 	and.w	r2, r2, #112	; 0x70
    56da:	f043 0303 	orr.w	r3, r3, #3
    56de:	4313      	orrs	r3, r2
		pdu_tx->len = sizeof(struct pdu_adv_scan_req);
    56e0:	220c      	movs	r2, #12
		pdu_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    56e2:	7033      	strb	r3, [r6, #0]
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
    56e4:	4640      	mov	r0, r8
		pdu_tx->len = sizeof(struct pdu_adv_scan_req);
    56e6:	7072      	strb	r2, [r6, #1]
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
    56e8:	f013 fc9c 	bl	19024 <ull_filter_lll_lrpa_get>
		if (lll->rpa_gen && lrpa) {
    56ec:	7de3      	ldrb	r3, [r4, #23]
    56ee:	07df      	lsls	r7, r3, #31
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
    56f0:	4601      	mov	r1, r0
		if (lll->rpa_gen && lrpa) {
    56f2:	f140 80ea 	bpl.w	58ca <isr_rx+0x58a>
    56f6:	2800      	cmp	r0, #0
    56f8:	f000 80e7 	beq.w	58ca <isr_rx+0x58a>
			pdu_tx->tx_addr = 1;
    56fc:	7833      	ldrb	r3, [r6, #0]
    56fe:	4630      	mov	r0, r6
    5700:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    5704:	f800 3b02 	strb.w	r3, [r0], #2
			memcpy(&pdu_tx->scan_req.scan_addr[0], lrpa->val,
    5708:	2206      	movs	r2, #6
    570a:	f01a fbb0 	bl	1fe6e <memcpy>
		memcpy(&pdu_tx->scan_req.adv_addr[0],
    570e:	f105 011e 	add.w	r1, r5, #30
    5712:	2206      	movs	r2, #6
    5714:	f106 0008 	add.w	r0, r6, #8
    5718:	f01a fba9 	bl	1fe6e <memcpy>
		radio_pkt_tx_set(pdu_tx);
    571c:	4630      	mov	r0, r6
    571e:	f015 fc1b 	bl	1af58 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    5722:	f015 fc63 	bl	1afec <radio_is_ready>
    5726:	2800      	cmp	r0, #0
    5728:	f040 80fc 	bne.w	5924 <isr_rx+0x5e4>
		radio_tmr_end_capture();
    572c:	f015 fe1e 	bl	1b36c <radio_tmr_end_capture>
		lll->state = 1U;
    5730:	7da3      	ldrb	r3, [r4, #22]
		radio_isr_set(isr_tx, lll);
    5732:	4884      	ldr	r0, [pc, #528]	; (5944 <isr_rx+0x604>)
		lll->state = 1U;
    5734:	f043 0301 	orr.w	r3, r3, #1
    5738:	75a3      	strb	r3, [r4, #22]
		radio_isr_set(isr_tx, lll);
    573a:	4621      	mov	r1, r4
}
    573c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		radio_isr_set(isr_tx, lll);
    5740:	f015 bb24 	b.w	1ad8c <radio_isr_set>
    5744:	7f6b      	ldrb	r3, [r5, #29]
    5746:	e70f      	b.n	5568 <isr_rx+0x228>
			pdu_tx->tx_addr = lll->init_addr_type;
    5748:	7da3      	ldrb	r3, [r4, #22]
    574a:	7832      	ldrb	r2, [r6, #0]
    574c:	f3c3 1380 	ubfx	r3, r3, #6, #1
    5750:	f363 1286 	bfi	r2, r3, #6, #1
    5754:	7032      	strb	r2, [r6, #0]
			memcpy(&pdu_tx->connect_ind.init_addr[0],
    5756:	f104 0119 	add.w	r1, r4, #25
    575a:	2206      	movs	r2, #6
    575c:	f01a fb87 	bl	1fe6e <memcpy>
    5760:	e68d      	b.n	547e <isr_rx+0x13e>
	return ((lll->adv_addr_type == pdu->tx_addr) &&
    5762:	7f28      	ldrb	r0, [r5, #28]
    5764:	f3c3 1340 	ubfx	r3, r3, #5, #1
    5768:	f3c0 1280 	ubfx	r2, r0, #6, #1
    576c:	4293      	cmp	r3, r2
    576e:	f47f aeef 	bne.w	5550 <isr_rx+0x210>
		!memcmp(lll->adv_addr, &pdu->adv_ind.addr[0], BDADDR_SIZE));
    5772:	2206      	movs	r2, #6
    5774:	f105 011e 	add.w	r1, r5, #30
    5778:	f104 001f 	add.w	r0, r4, #31
    577c:	f01a fb67 	bl	1fe4e <memcmp>
	return ((lll->adv_addr_type == pdu->tx_addr) &&
    5780:	fab0 f380 	clz	r3, r0
    5784:	095b      	lsrs	r3, r3, #5
	return ((((lll->filter_policy & 0x01) != 0U) ||
    5786:	2b00      	cmp	r3, #0
    5788:	f47f ae22 	bne.w	53d0 <isr_rx+0x90>
    578c:	e6df      	b.n	554e <isr_rx+0x20e>
		pdu_tx->connect_ind.interval =
    578e:	f8b9 0012 	ldrh.w	r0, [r9, #18]
		pdu_tx->connect_ind.latency =
    5792:	f8b9 1014 	ldrh.w	r1, [r9, #20]
		pdu_tx->connect_ind.timeout =
    5796:	8aa2      	ldrh	r2, [r4, #20]
    5798:	83b2      	strh	r2, [r6, #28]
			pdu_tx->connect_ind.win_offset = sys_cpu_to_le16(win_offset_dummy);
    579a:	82f3      	strh	r3, [r6, #22]
		pdu_tx->connect_ind.interval =
    579c:	8330      	strh	r0, [r6, #24]
		pdu_tx->connect_ind.latency =
    579e:	8371      	strh	r1, [r6, #26]
		memcpy(&pdu_tx->connect_ind.chan_map[0],
    57a0:	2205      	movs	r2, #5
    57a2:	f109 011c 	add.w	r1, r9, #28
    57a6:	f106 001e 	add.w	r0, r6, #30
    57aa:	f01a fb60 	bl	1fe6e <memcpy>
		pdu_tx->connect_ind.hop = lll_conn->data_chan_hop;
    57ae:	f899 2022 	ldrb.w	r2, [r9, #34]	; 0x22
    57b2:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
    57b6:	f362 0304 	bfi	r3, r2, #0, #5
    57ba:	f886 3023 	strb.w	r3, [r6, #35]	; 0x23
		pdu_tx->connect_ind.sca = lll_conn_sca_local_get();
    57be:	f014 fd03 	bl	1a1c8 <lll_conn_sca_local_get>
    57c2:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
    57c6:	f360 1347 	bfi	r3, r0, #5, #3
    57ca:	f886 3023 	strb.w	r3, [r6, #35]	; 0x23
		radio_pkt_tx_set(pdu_tx);
    57ce:	4630      	mov	r0, r6
    57d0:	f015 fbc2 	bl	1af58 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    57d4:	f015 fc0a 	bl	1afec <radio_is_ready>
    57d8:	2800      	cmp	r0, #0
    57da:	d161      	bne.n	58a0 <isr_rx+0x560>
		radio_isr_set(isr_cleanup, lll);
    57dc:	485a      	ldr	r0, [pc, #360]	; (5948 <isr_rx+0x608>)
    57de:	4621      	mov	r1, r4
    57e0:	f015 fad4 	bl	1ad8c <radio_isr_set>
}

static inline int lll_stop(void *lll)
{
	struct lll_hdr *hdr = lll;
	int ret = !!hdr->is_stop;
    57e4:	7923      	ldrb	r3, [r4, #4]

	hdr->is_stop = 1U;
    57e6:	f043 0201 	orr.w	r2, r3, #1
		LL_ASSERT(!ret);
    57ea:	07db      	lsls	r3, r3, #31
    57ec:	7122      	strb	r2, [r4, #4]
    57ee:	d449      	bmi.n	5884 <isr_rx+0x544>
		rx = ull_pdu_rx_alloc();
    57f0:	f00e ff1a 	bl	14628 <ull_pdu_rx_alloc>
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    57f4:	2309      	movs	r3, #9
		rx = ull_pdu_rx_alloc();
    57f6:	4681      	mov	r9, r0
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    57f8:	7103      	strb	r3, [r0, #4]
		rx->hdr.handle = 0xffff;
    57fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
		memcpy(rx->pdu, pdu_tx, (offsetof(struct pdu_adv, connect_ind) +
    57fe:	2224      	movs	r2, #36	; 0x24
		uint8_t pdu_adv_rx_chan_sel = pdu_adv_rx->chan_sel;
    5800:	7f2d      	ldrb	r5, [r5, #28]
		rx->hdr.handle = 0xffff;
    5802:	80c3      	strh	r3, [r0, #6]
		memcpy(rx->pdu, pdu_tx, (offsetof(struct pdu_adv, connect_ind) +
    5804:	4631      	mov	r1, r6
    5806:	301c      	adds	r0, #28
    5808:	f01a fb31 	bl	1fe6e <memcpy>
		pdu_adv_rx->chan_sel = pdu_adv_rx_chan_sel;
    580c:	f899 301c 	ldrb.w	r3, [r9, #28]
		ftr->param = lll;
    5810:	f8c9 4008 	str.w	r4, [r9, #8]
		uint8_t pdu_adv_rx_chan_sel = pdu_adv_rx->chan_sel;
    5814:	f3c5 1540 	ubfx	r5, r5, #5, #1
		pdu_adv_rx->chan_sel = pdu_adv_rx_chan_sel;
    5818:	f365 1345 	bfi	r3, r5, #5, #1
    581c:	f889 301c 	strb.w	r3, [r9, #28]
		ftr->ticks_anchor = radio_tmr_start_get();
    5820:	f015 fd6a 	bl	1b2f8 <radio_tmr_start_get>
				    radio_tx_chain_delay_get(0, 0);
    5824:	2100      	movs	r1, #0
		ftr->ticks_anchor = radio_tmr_start_get();
    5826:	f8c9 0010 	str.w	r0, [r9, #16]
				    radio_tx_chain_delay_get(0, 0);
    582a:	4608      	mov	r0, r1
    582c:	f015 fba4 	bl	1af78 <radio_tx_chain_delay_get>
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
    5830:	2f00      	cmp	r7, #0
    5832:	bf08      	it	eq
    5834:	f04f 08ff 	moveq.w	r8, #255	; 0xff
    5838:	f889 801a 	strb.w	r8, [r9, #26]
		ftr->lrpa_used = lll->rpa_gen && lrpa;
    583c:	7de2      	ldrb	r2, [r4, #23]
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    583e:	f50a 6adb 	add.w	sl, sl, #1752	; 0x6d8
		ftr->radio_end_us = conn_space_us -
    5842:	ebaa 0000 	sub.w	r0, sl, r0
		ftr->lrpa_used = lll->rpa_gen && lrpa;
    5846:	f012 0201 	ands.w	r2, r2, #1
		ftr->radio_end_us = conn_space_us -
    584a:	f8c9 0014 	str.w	r0, [r9, #20]
		ftr->lrpa_used = lll->rpa_gen && lrpa;
    584e:	d017      	beq.n	5880 <isr_rx+0x540>
    5850:	f1bb 0b00 	subs.w	fp, fp, #0
    5854:	bf18      	it	ne
    5856:	f04f 0b01 	movne.w	fp, #1
    585a:	f899 3019 	ldrb.w	r3, [r9, #25]
    585e:	f36b 0300 	bfi	r3, fp, #0, #1
    5862:	f889 3019 	strb.w	r3, [r9, #25]
			ftr->extra = ull_pdu_rx_alloc();
    5866:	f00e fedf 	bl	14628 <ull_pdu_rx_alloc>
		ull_rx_put(rx->hdr.link, rx);
    586a:	4649      	mov	r1, r9
			ftr->extra = ull_pdu_rx_alloc();
    586c:	f8c9 000c 	str.w	r0, [r9, #12]
		ull_rx_put(rx->hdr.link, rx);
    5870:	f8d9 0000 	ldr.w	r0, [r9]
    5874:	f00e fef0 	bl	14658 <ull_rx_put>
}
    5878:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		ull_rx_sched();
    587c:	f00e befc 	b.w	14678 <ull_rx_sched>
    5880:	4693      	mov	fp, r2
    5882:	e7ea      	b.n	585a <isr_rx+0x51a>
		LL_ASSERT(!ret);
    5884:	4a31      	ldr	r2, [pc, #196]	; (594c <isr_rx+0x60c>)
    5886:	4932      	ldr	r1, [pc, #200]	; (5950 <isr_rx+0x610>)
    5888:	4832      	ldr	r0, [pc, #200]	; (5954 <isr_rx+0x614>)
    588a:	f240 333e 	movw	r3, #830	; 0x33e
    588e:	f018 fb5c 	bl	1df4a <printk>
    5892:	4040      	eors	r0, r0
    5894:	f380 8811 	msr	BASEPRI, r0
    5898:	f04f 0003 	mov.w	r0, #3
    589c:	df02      	svc	2
    589e:	e7a7      	b.n	57f0 <isr_rx+0x4b0>
		LL_ASSERT(!radio_is_ready());
    58a0:	4a2a      	ldr	r2, [pc, #168]	; (594c <isr_rx+0x60c>)
    58a2:	492d      	ldr	r1, [pc, #180]	; (5958 <isr_rx+0x618>)
    58a4:	482b      	ldr	r0, [pc, #172]	; (5954 <isr_rx+0x614>)
    58a6:	f44f 7346 	mov.w	r3, #792	; 0x318
    58aa:	f018 fb4e 	bl	1df4a <printk>
    58ae:	4040      	eors	r0, r0
    58b0:	f380 8811 	msr	BASEPRI, r0
    58b4:	f04f 0003 	mov.w	r0, #3
    58b8:	df02      	svc	2
    58ba:	e78f      	b.n	57dc <isr_rx+0x49c>
		   ull_filter_lll_lrpa_get(rl_idx)) {
    58bc:	4640      	mov	r0, r8
    58be:	f013 fbb1 	bl	19024 <ull_filter_lll_lrpa_get>
	} else if (init && lll->rpa_gen &&
    58c2:	2800      	cmp	r0, #0
    58c4:	f47f ae43 	bne.w	554e <isr_rx+0x20e>
    58c8:	e62a      	b.n	5520 <isr_rx+0x1e0>
			pdu_tx->tx_addr = lll->init_addr_type;
    58ca:	7da3      	ldrb	r3, [r4, #22]
    58cc:	7832      	ldrb	r2, [r6, #0]
    58ce:	f3c3 1380 	ubfx	r3, r3, #6, #1
    58d2:	4630      	mov	r0, r6
    58d4:	f363 1286 	bfi	r2, r3, #6, #1
    58d8:	f800 2b02 	strb.w	r2, [r0], #2
			memcpy(&pdu_tx->scan_req.scan_addr[0],
    58dc:	f104 0119 	add.w	r1, r4, #25
    58e0:	2206      	movs	r2, #6
    58e2:	f01a fac4 	bl	1fe6e <memcpy>
    58e6:	e712      	b.n	570e <isr_rx+0x3ce>
	    (pdu->rx_addr != 0) &&
    58e8:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
    58ec:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    58f0:	2b40      	cmp	r3, #64	; 0x40
    58f2:	f47f ae72 	bne.w	55da <isr_rx+0x29a>
    58f6:	7f6b      	ldrb	r3, [r5, #29]
			*dir_report = true;
    58f8:	2601      	movs	r6, #1
    58fa:	e639      	b.n	5570 <isr_rx+0x230>
		!memcmp(lll->init_addr, pdu->direct_ind.tgt_addr,
    58fc:	4649      	mov	r1, r9
    58fe:	2206      	movs	r2, #6
    5900:	f104 0019 	add.w	r0, r4, #25
    5904:	f01a faa3 	bl	1fe4e <memcmp>
	return (((lll->init_addr_type == pdu->rx_addr) &&
    5908:	b1d0      	cbz	r0, 5940 <isr_rx+0x600>
    590a:	7da3      	ldrb	r3, [r4, #22]
    590c:	e65c      	b.n	55c8 <isr_rx+0x288>
		!memcmp(lll->init_addr, pdu->direct_ind.tgt_addr,
    590e:	4631      	mov	r1, r6
    5910:	2206      	movs	r2, #6
    5912:	f104 0019 	add.w	r0, r4, #25
    5916:	f01a fa9a 	bl	1fe4e <memcmp>
	return (((lll->init_addr_type == pdu->rx_addr) &&
    591a:	2800      	cmp	r0, #0
    591c:	f43f ad61 	beq.w	53e2 <isr_rx+0xa2>
    5920:	7da3      	ldrb	r3, [r4, #22]
    5922:	e605      	b.n	5530 <isr_rx+0x1f0>
		LL_ASSERT(!radio_is_ready());
    5924:	4a09      	ldr	r2, [pc, #36]	; (594c <isr_rx+0x60c>)
    5926:	490c      	ldr	r1, [pc, #48]	; (5958 <isr_rx+0x618>)
    5928:	480a      	ldr	r0, [pc, #40]	; (5954 <isr_rx+0x614>)
    592a:	f240 3399 	movw	r3, #921	; 0x399
    592e:	f018 fb0c 	bl	1df4a <printk>
    5932:	4040      	eors	r0, r0
    5934:	f380 8811 	msr	BASEPRI, r0
    5938:	f04f 0003 	mov.w	r0, #3
    593c:	df02      	svc	2
    593e:	e6f5      	b.n	572c <isr_rx+0x3ec>
    5940:	7f6b      	ldrb	r3, [r5, #29]
    5942:	e615      	b.n	5570 <isr_rx+0x230>
    5944:	00019dc9 	.word	0x00019dc9
    5948:	00019ff1 	.word	0x00019ff1
    594c:	00024a28 	.word	0x00024a28
    5950:	000242a0 	.word	0x000242a0
    5954:	00023fe4 	.word	0x00023fe4
    5958:	00024a98 	.word	0x00024a98

0000595c <throughput_received>:
}
static void throughput_received(const struct bt_gatt_throughput_metrics *met)
{
	static uint32_t kb;

	if (met->write_len == 0) {
    595c:	6843      	ldr	r3, [r0, #4]
    595e:	4a05      	ldr	r2, [pc, #20]	; (5974 <throughput_received+0x18>)
    5960:	b90b      	cbnz	r3, 5966 <throughput_received+0xa>
		kb = 0;
    5962:	6013      	str	r3, [r2, #0]

		return;
    5964:	4770      	bx	lr
	}

	if ((met->write_len / 1024) != kb) {
    5966:	6810      	ldr	r0, [r2, #0]
    5968:	0a99      	lsrs	r1, r3, #10
    596a:	ebb0 2f93 	cmp.w	r0, r3, lsr #10
		kb = (met->write_len / 1024);
    596e:	bf18      	it	ne
    5970:	6011      	strne	r1, [r2, #0]
	}
}
    5972:	4770      	bx	lr
    5974:	20001d78 	.word	0x20001d78

00005978 <throughput_send>:
static void throughput_send(const struct bt_gatt_throughput_metrics *met)
{
    5978:	b507      	push	{r0, r1, r2, lr}
	printk("\n[peer] received %u bytes (%u KB)"
    597a:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
    597e:	9300      	str	r3, [sp, #0]
    5980:	6803      	ldr	r3, [r0, #0]
    5982:	4803      	ldr	r0, [pc, #12]	; (5990 <throughput_send+0x18>)
    5984:	0a8a      	lsrs	r2, r1, #10
    5986:	f018 fae0 	bl	1df4a <printk>
			" in %u GATT writes at %u bps\n",
			met->write_len, met->write_len / 1024,
			met->write_count, met->write_rate);
}
    598a:	b003      	add	sp, #12
    598c:	f85d fb04 	ldr.w	pc, [sp], #4
    5990:	00024e6b 	.word	0x00024e6b

00005994 <throughput_read>:
{
    5994:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
		if(default_conn[i] == conn){
    5998:	4e10      	ldr	r6, [pc, #64]	; (59dc <throughput_read+0x48>)
			printk("\n[peer]round %u: received %u bytes (%u KB)"
    599a:	4f11      	ldr	r7, [pc, #68]	; (59e0 <throughput_read+0x4c>)
    599c:	f8df 8048 	ldr.w	r8, [pc, #72]	; 59e8 <throughput_read+0x54>
{
    59a0:	4605      	mov	r5, r0
    59a2:	460c      	mov	r4, r1
	for(i = 0; i <CONFIG_BT_MAX_CONN; i ++)
    59a4:	2300      	movs	r3, #0
		if(default_conn[i] == conn){
    59a6:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
    59aa:	42aa      	cmp	r2, r5
    59ac:	d10b      	bne.n	59c6 <throughput_read+0x32>
			printk("\n[peer]round %u: received %u bytes (%u KB)"
    59ae:	6862      	ldr	r2, [r4, #4]
    59b0:	9302      	str	r3, [sp, #8]
    59b2:	68a3      	ldr	r3, [r4, #8]
    59b4:	9301      	str	r3, [sp, #4]
    59b6:	6823      	ldr	r3, [r4, #0]
    59b8:	9300      	str	r3, [sp, #0]
    59ba:	6839      	ldr	r1, [r7, #0]
    59bc:	0a93      	lsrs	r3, r2, #10
    59be:	4640      	mov	r0, r8
    59c0:	f018 fac3 	bl	1df4a <printk>
			i = CONFIG_BT_MAX_CONN;
    59c4:	2304      	movs	r3, #4
	for(i = 0; i <CONFIG_BT_MAX_CONN; i ++)
    59c6:	3301      	adds	r3, #1
    59c8:	2b03      	cmp	r3, #3
    59ca:	ddec      	ble.n	59a6 <throughput_read+0x12>
	test_ready = true;
    59cc:	4b05      	ldr	r3, [pc, #20]	; (59e4 <throughput_read+0x50>)
    59ce:	2201      	movs	r2, #1
}
    59d0:	2000      	movs	r0, #0
	test_ready = true;
    59d2:	701a      	strb	r2, [r3, #0]
}
    59d4:	b004      	add	sp, #16
    59d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    59da:	bf00      	nop
    59dc:	20001cf4 	.word	0x20001cf4
    59e0:	20001cf0 	.word	0x20001cf0
    59e4:	20000734 	.word	0x20000734
    59e8:	00024eaa 	.word	0x00024eaa

000059ec <disconnected>:
	}

	printk("[peer]Scanning successfully started\n");
}
static void disconnected(struct bt_conn *conn, uint8_t reason)
{
    59ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    59f0:	b088      	sub	sp, #32
    59f2:	4605      	mov	r5, r0
	struct bt_conn_info info = {0};
    59f4:	221c      	movs	r2, #28
    59f6:	2100      	movs	r1, #0
    59f8:	a801      	add	r0, sp, #4
    59fa:	f01a fa63 	bl	1fec4 <memset>
	int err;

	for(int i = 0; i<CONFIG_BT_MAX_CONN; i ++)
		if(conn == default_conn[i]){
    59fe:	4e11      	ldr	r6, [pc, #68]	; (5a44 <disconnected+0x58>)
			printk("[peer]disconnected\n");
    5a00:	4f11      	ldr	r7, [pc, #68]	; (5a48 <disconnected+0x5c>)
			bt_conn_unref(conn);
			default_conn[i] = NULL;
			cnt = 0;
    5a02:	f8df 804c 	ldr.w	r8, [pc, #76]	; 5a50 <disconnected+0x64>
	for(int i = 0; i<CONFIG_BT_MAX_CONN; i ++)
    5a06:	2400      	movs	r4, #0
		if(conn == default_conn[i]){
    5a08:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
    5a0c:	42ab      	cmp	r3, r5
    5a0e:	d10f      	bne.n	5a30 <disconnected+0x44>
			printk("[peer]disconnected\n");
    5a10:	4638      	mov	r0, r7
    5a12:	f018 fa9a 	bl	1df4a <printk>
			bt_conn_unref(conn);
    5a16:	4628      	mov	r0, r5
    5a18:	f01a fded 	bl	205f6 <bt_conn_unref>
			iter -= 1;
    5a1c:	4a0b      	ldr	r2, [pc, #44]	; (5a4c <disconnected+0x60>)
			default_conn[i] = NULL;
    5a1e:	2300      	movs	r3, #0
    5a20:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
			cnt = 0;
    5a24:	f8c8 3000 	str.w	r3, [r8]
			iter -= 1;
    5a28:	6813      	ldr	r3, [r2, #0]
    5a2a:	3b01      	subs	r3, #1
    5a2c:	6013      	str	r3, [r2, #0]
			i = CONFIG_BT_MAX_CONN;
    5a2e:	2404      	movs	r4, #4
	for(int i = 0; i<CONFIG_BT_MAX_CONN; i ++)
    5a30:	3401      	adds	r4, #1
    5a32:	2c03      	cmp	r4, #3
    5a34:	dde8      	ble.n	5a08 <disconnected+0x1c>
		}
	err = bt_conn_get_info(conn, &info);
    5a36:	a901      	add	r1, sp, #4
    5a38:	4628      	mov	r0, r5
    5a3a:	f005 fa07 	bl	ae4c <bt_conn_get_info>
	}

	/* Re-connect using same roles */
	if (info.role == BT_CONN_ROLE_MASTER) {
	}
}
    5a3e:	b008      	add	sp, #32
    5a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5a44:	20001cf4 	.word	0x20001cf4
    5a48:	00024f00 	.word	0x00024f00
    5a4c:	20001d74 	.word	0x20001d74
    5a50:	20001cf0 	.word	0x20001cf0

00005a54 <eir_found>:
{
    5a54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	switch (data->type) {
    5a58:	7803      	ldrb	r3, [r0, #0]
    5a5a:	3b02      	subs	r3, #2
    5a5c:	2b01      	cmp	r3, #1
{
    5a5e:	b089      	sub	sp, #36	; 0x24
    5a60:	4680      	mov	r8, r0
    5a62:	460f      	mov	r7, r1
	switch (data->type) {
    5a64:	d903      	bls.n	5a6e <eir_found+0x1a>
	return true;
    5a66:	2001      	movs	r0, #1
}
    5a68:	b009      	add	sp, #36	; 0x24
    5a6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (data->data_len % sizeof(uint16_t) != 0U) {
    5a6e:	7844      	ldrb	r4, [r0, #1]
    5a70:	f014 0401 	ands.w	r4, r4, #1
    5a74:	d1f7      	bne.n	5a66 <eir_found+0x12>
					printk("WRONG UUID\n");
    5a76:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 5b1c <eir_found+0xc8>
			for (i = 0; i < data->data_len; i += sizeof(uint16_t)) {
    5a7a:	f898 3001 	ldrb.w	r3, [r8, #1]
    5a7e:	429c      	cmp	r4, r3
    5a80:	daf1      	bge.n	5a66 <eir_found+0x12>
				memcpy(&u16, &data->data[i], sizeof(u16));
    5a82:	f8d8 1004 	ldr.w	r1, [r8, #4]
    5a86:	2202      	movs	r2, #2
    5a88:	4421      	add	r1, r4
    5a8a:	eb0d 0002 	add.w	r0, sp, r2
    5a8e:	f01a f9ee 	bl	1fe6e <memcpy>
				if (bt_uuid_cmp(uuid, BT_UUID_HRS)) {
    5a92:	ae04      	add	r6, sp, #16
				uuid = BT_UUID_DECLARE_16(sys_le16_to_cpu(u16));
    5a94:	2300      	movs	r3, #0
    5a96:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    5a9a:	f88d 3004 	strb.w	r3, [sp, #4]
				if (bt_uuid_cmp(uuid, BT_UUID_HRS)) {
    5a9e:	f88d 3010 	strb.w	r3, [sp, #16]
    5aa2:	4631      	mov	r1, r6
    5aa4:	f641 030d 	movw	r3, #6157	; 0x180d
    5aa8:	a801      	add	r0, sp, #4
				uuid = BT_UUID_DECLARE_16(sys_le16_to_cpu(u16));
    5aaa:	f8ad 2006 	strh.w	r2, [sp, #6]
				if (bt_uuid_cmp(uuid, BT_UUID_HRS)) {
    5aae:	f8ad 3012 	strh.w	r3, [sp, #18]
    5ab2:	f01a faab 	bl	2000c <bt_uuid_cmp>
    5ab6:	4605      	mov	r5, r0
    5ab8:	b120      	cbz	r0, 5ac4 <eir_found+0x70>
					printk("WRONG UUID\n");
    5aba:	4648      	mov	r0, r9
    5abc:	f018 fa45 	bl	1df4a <printk>
			for (i = 0; i < data->data_len; i += sizeof(uint16_t)) {
    5ac0:	3402      	adds	r4, #2
    5ac2:	e7da      	b.n	5a7a <eir_found+0x26>
				param = BT_LE_CONN_PARAM_DEFAULT;
    5ac4:	4c14      	ldr	r4, [pc, #80]	; (5b18 <eir_found+0xc4>)
					if(default_conn[i] == NULL && i == 0){
    5ac6:	f8df 8058 	ldr.w	r8, [pc, #88]	; 5b20 <eir_found+0xcc>
				param = BT_LE_CONN_PARAM_DEFAULT;
    5aca:	6820      	ldr	r0, [r4, #0]
    5acc:	6861      	ldr	r1, [r4, #4]
    5ace:	ab02      	add	r3, sp, #8
    5ad0:	c303      	stmia	r3!, {r0, r1}
						err = bt_conn_le_create(addr, BT_CONN_LE_CREATE_CONN,
    5ad2:	3408      	adds	r4, #8
					if(default_conn[i] == NULL && i == 0){
    5ad4:	f858 3025 	ldr.w	r3, [r8, r5, lsl #2]
    5ad8:	b973      	cbnz	r3, 5af8 <eir_found+0xa4>
    5ada:	b995      	cbnz	r5, 5b02 <eir_found+0xae>
						err = bt_le_scan_stop();
    5adc:	f004 fba8 	bl	a230 <bt_le_scan_stop>
						if (err) {
    5ae0:	b950      	cbnz	r0, 5af8 <eir_found+0xa4>
						err = bt_conn_le_create(addr, BT_CONN_LE_CREATE_CONN,
    5ae2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    5ae6:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    5aea:	4643      	mov	r3, r8
						err = bt_conn_le_create(addr, BT_CONN_LE_CREATE_CONN,
    5aec:	aa02      	add	r2, sp, #8
    5aee:	4631      	mov	r1, r6
    5af0:	4638      	mov	r0, r7
    5af2:	f005 f9d7 	bl	aea4 <bt_conn_le_create>
						i = CONFIG_BT_MAX_CONN;
    5af6:	2504      	movs	r5, #4
				for(int i = 0; i <CONFIG_BT_MAX_CONN; i ++){
    5af8:	3501      	adds	r5, #1
    5afa:	2d03      	cmp	r5, #3
    5afc:	ddea      	ble.n	5ad4 <eir_found+0x80>
				return false;
    5afe:	2000      	movs	r0, #0
    5b00:	e7b2      	b.n	5a68 <eir_found+0x14>
						err = bt_le_scan_stop();
    5b02:	f004 fb95 	bl	a230 <bt_le_scan_stop>
						if (err) {
    5b06:	2800      	cmp	r0, #0
    5b08:	d1f6      	bne.n	5af8 <eir_found+0xa4>
						err = bt_conn_le_create(addr, BT_CONN_LE_CREATE_CONN,
    5b0a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    5b0e:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    5b12:	eb08 0385 	add.w	r3, r8, r5, lsl #2
    5b16:	e7e9      	b.n	5aec <eir_found+0x98>
    5b18:	00023840 	.word	0x00023840
    5b1c:	00024f14 	.word	0x00024f14
    5b20:	20001cf4 	.word	0x20001cf4

00005b24 <bt_addr_le_to_str.constprop.0>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    5b24:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    5b26:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    5b28:	b08a      	sub	sp, #40	; 0x28
    5b2a:	4604      	mov	r4, r0
    5b2c:	460e      	mov	r6, r1
    5b2e:	ad07      	add	r5, sp, #28
    5b30:	2b03      	cmp	r3, #3
    5b32:	d820      	bhi.n	5b76 <bt_addr_le_to_str.constprop.0+0x52>
    5b34:	e8df f003 	tbb	[pc, r3]
    5b38:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    5b3c:	4911      	ldr	r1, [pc, #68]	; (5b84 <bt_addr_le_to_str.constprop.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    5b3e:	4628      	mov	r0, r5
    5b40:	f01a f955 	bl	1fdee <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    5b44:	7863      	ldrb	r3, [r4, #1]
    5b46:	9304      	str	r3, [sp, #16]
    5b48:	78a3      	ldrb	r3, [r4, #2]
    5b4a:	9303      	str	r3, [sp, #12]
    5b4c:	78e3      	ldrb	r3, [r4, #3]
    5b4e:	9302      	str	r3, [sp, #8]
    5b50:	7923      	ldrb	r3, [r4, #4]
    5b52:	9301      	str	r3, [sp, #4]
    5b54:	7963      	ldrb	r3, [r4, #5]
    5b56:	9300      	str	r3, [sp, #0]
    5b58:	4a0b      	ldr	r2, [pc, #44]	; (5b88 <bt_addr_le_to_str.constprop.0+0x64>)
    5b5a:	79a3      	ldrb	r3, [r4, #6]
    5b5c:	9505      	str	r5, [sp, #20]
    5b5e:	211e      	movs	r1, #30
    5b60:	4630      	mov	r0, r6
    5b62:	f018 f9ff 	bl	1df64 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
    5b66:	b00a      	add	sp, #40	; 0x28
    5b68:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    5b6a:	4908      	ldr	r1, [pc, #32]	; (5b8c <bt_addr_le_to_str.constprop.0+0x68>)
    5b6c:	e7e7      	b.n	5b3e <bt_addr_le_to_str.constprop.0+0x1a>
		strcpy(type, "public-id");
    5b6e:	4908      	ldr	r1, [pc, #32]	; (5b90 <bt_addr_le_to_str.constprop.0+0x6c>)
    5b70:	e7e5      	b.n	5b3e <bt_addr_le_to_str.constprop.0+0x1a>
		strcpy(type, "random-id");
    5b72:	4908      	ldr	r1, [pc, #32]	; (5b94 <bt_addr_le_to_str.constprop.0+0x70>)
    5b74:	e7e3      	b.n	5b3e <bt_addr_le_to_str.constprop.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    5b76:	4a08      	ldr	r2, [pc, #32]	; (5b98 <bt_addr_le_to_str.constprop.0+0x74>)
    5b78:	210a      	movs	r1, #10
    5b7a:	4628      	mov	r0, r5
    5b7c:	f018 f9f2 	bl	1df64 <snprintk>
		break;
    5b80:	e7e0      	b.n	5b44 <bt_addr_le_to_str.constprop.0+0x20>
    5b82:	bf00      	nop
    5b84:	00024f20 	.word	0x00024f20
    5b88:	00024f42 	.word	0x00024f42
    5b8c:	00024f27 	.word	0x00024f27
    5b90:	00024f2e 	.word	0x00024f2e
    5b94:	00024f38 	.word	0x00024f38
    5b98:	00026be6 	.word	0x00026be6

00005b9c <connected>:
{
    5b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    5b9e:	b091      	sub	sp, #68	; 0x44
    5ba0:	4604      	mov	r4, r0
	struct bt_conn_info info = {0};
    5ba2:	221c      	movs	r2, #28
{
    5ba4:	460e      	mov	r6, r1
	struct bt_conn_info info = {0};
    5ba6:	a801      	add	r0, sp, #4
    5ba8:	2100      	movs	r1, #0
    5baa:	f01a f98b 	bl	1fec4 <memset>
	err = bt_conn_get_info(conn, &info);
    5bae:	a901      	add	r1, sp, #4
    5bb0:	4620      	mov	r0, r4
    5bb2:	f005 f94b 	bl	ae4c <bt_conn_get_info>
	if (err) {
    5bb6:	4605      	mov	r5, r0
    5bb8:	b998      	cbnz	r0, 5be2 <connected+0x46>
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    5bba:	4620      	mov	r0, r4
    5bbc:	f01a fd1e 	bl	205fc <bt_conn_get_dst>
    5bc0:	a908      	add	r1, sp, #32
    5bc2:	f7ff ffaf 	bl	5b24 <bt_addr_le_to_str.constprop.0>
	if (hci_err) {
    5bc6:	b176      	cbz	r6, 5be6 <connected+0x4a>
    5bc8:	4f0a      	ldr	r7, [pc, #40]	; (5bf4 <connected+0x58>)
    5bca:	2604      	movs	r6, #4
			if(default_conn[i] == conn){
    5bcc:	f857 3b04 	ldr.w	r3, [r7], #4
    5bd0:	42a3      	cmp	r3, r4
    5bd2:	d104      	bne.n	5bde <connected+0x42>
				bt_conn_unref(default_conn[i]);
    5bd4:	4620      	mov	r0, r4
    5bd6:	f01a fd0e 	bl	205f6 <bt_conn_unref>
				default_conn[i] = NULL;
    5bda:	f847 5c04 	str.w	r5, [r7, #-4]
		for(int i = 0; i < CONFIG_BT_MAX_CONN; i ++)
    5bde:	3e01      	subs	r6, #1
    5be0:	d1f4      	bne.n	5bcc <connected+0x30>
}
    5be2:	b011      	add	sp, #68	; 0x44
    5be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	printk("[peer] Conn. interval is %u units\n", info.le.interval);
    5be6:	f8bd 1018 	ldrh.w	r1, [sp, #24]
    5bea:	4803      	ldr	r0, [pc, #12]	; (5bf8 <connected+0x5c>)
    5bec:	f018 f9ad 	bl	1df4a <printk>
	int i;
    5bf0:	e7f7      	b.n	5be2 <connected+0x46>
    5bf2:	bf00      	nop
    5bf4:	20001cf4 	.word	0x20001cf4
    5bf8:	00024f65 	.word	0x00024f65

00005bfc <device_found>:
{
    5bfc:	b570      	push	{r4, r5, r6, lr}
    5bfe:	b088      	sub	sp, #32
    5c00:	4616      	mov	r6, r2
	bt_addr_le_to_str(addr, dev, sizeof(dev));
    5c02:	4669      	mov	r1, sp
{
    5c04:	4605      	mov	r5, r0
    5c06:	461c      	mov	r4, r3
	bt_addr_le_to_str(addr, dev, sizeof(dev));
    5c08:	f7ff ff8c 	bl	5b24 <bt_addr_le_to_str.constprop.0>
	if (type == BT_GAP_ADV_TYPE_ADV_IND ||
    5c0c:	2e01      	cmp	r6, #1
    5c0e:	d804      	bhi.n	5c1a <device_found+0x1e>
		bt_data_parse(ad, eir_found, (void *)addr);
    5c10:	4903      	ldr	r1, [pc, #12]	; (5c20 <device_found+0x24>)
    5c12:	462a      	mov	r2, r5
    5c14:	4620      	mov	r0, r4
    5c16:	f003 ff19 	bl	9a4c <bt_data_parse>
}
    5c1a:	b008      	add	sp, #32
    5c1c:	bd70      	pop	{r4, r5, r6, pc}
    5c1e:	bf00      	nop
    5c20:	00005a55 	.word	0x00005a55

00005c24 <start_scan>:
{
    5c24:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if(iter < conn_cnt) nodes_ready = false;
    5c26:	4b0f      	ldr	r3, [pc, #60]	; (5c64 <start_scan+0x40>)
    5c28:	681a      	ldr	r2, [r3, #0]
    5c2a:	4b0f      	ldr	r3, [pc, #60]	; (5c68 <start_scan+0x44>)
    5c2c:	681b      	ldr	r3, [r3, #0]
    5c2e:	429a      	cmp	r2, r3
    5c30:	bfbe      	ittt	lt
    5c32:	4b0e      	ldrlt	r3, [pc, #56]	; (5c6c <start_scan+0x48>)
    5c34:	2200      	movlt	r2, #0
    5c36:	701a      	strblt	r2, [r3, #0]
	struct bt_le_scan_param scan_param = {
    5c38:	2100      	movs	r1, #0
    5c3a:	2214      	movs	r2, #20
    5c3c:	a801      	add	r0, sp, #4
    5c3e:	f01a f941 	bl	1fec4 <memset>
    5c42:	2301      	movs	r3, #1
    5c44:	f88d 3004 	strb.w	r3, [sp, #4]
	err = bt_le_scan_start(&scan_param, device_found);
    5c48:	4909      	ldr	r1, [pc, #36]	; (5c70 <start_scan+0x4c>)
	struct bt_le_scan_param scan_param = {
    5c4a:	4b0a      	ldr	r3, [pc, #40]	; (5c74 <start_scan+0x50>)
    5c4c:	9303      	str	r3, [sp, #12]
	err = bt_le_scan_start(&scan_param, device_found);
    5c4e:	a801      	add	r0, sp, #4
    5c50:	f004 fa96 	bl	a180 <bt_le_scan_start>
	if (err) {
    5c54:	b910      	cbnz	r0, 5c5c <start_scan+0x38>
	printk("[peer]Scanning successfully started\n");
    5c56:	4808      	ldr	r0, [pc, #32]	; (5c78 <start_scan+0x54>)
    5c58:	f018 f977 	bl	1df4a <printk>
}
    5c5c:	b007      	add	sp, #28
    5c5e:	f85d fb04 	ldr.w	pc, [sp], #4
    5c62:	bf00      	nop
    5c64:	20001d74 	.word	0x20001d74
    5c68:	20000134 	.word	0x20000134
    5c6c:	2000a2e6 	.word	0x2000a2e6
    5c70:	00005bfd 	.word	0x00005bfd
    5c74:	00300060 	.word	0x00300060
    5c78:	00024f88 	.word	0x00024f88

00005c7c <main>:
	/* reject peer conn param request */
	return false;
}

void main(void)
{
    5c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		.connected = connected,
		.disconnected = disconnected,
		.le_param_req = le_param_req,
	};

	bt_conn_cb_register(&conn_callbacks);
    5c7e:	4821      	ldr	r0, [pc, #132]	; (5d04 <main+0x88>)
    5c80:	f004 fd78 	bl	a774 <bt_conn_cb_register>

	err = bt_enable(NULL);
    5c84:	2000      	movs	r0, #0
    5c86:	f004 f9e7 	bl	a058 <bt_enable>
	if (err) {
    5c8a:	2800      	cmp	r0, #0
    5c8c:	d138      	bne.n	5d00 <main+0x84>
		return;
	}
	for(int i = 0; i<CONFIG_BT_MAX_CONN; i ++){
		default_conn[i] = NULL;
    5c8e:	4c1e      	ldr	r4, [pc, #120]	; (5d08 <main+0x8c>)
	}

	for(int i = 0; i <CONFIG_BT_MAX_CONN; i ++){
		err = bt_gatt_throughput_init(&gatt_throughput[i], &throughput_cb);
    5c90:	491e      	ldr	r1, [pc, #120]	; (5d0c <main+0x90>)
		default_conn[i] = NULL;
    5c92:	e9c4 0000 	strd	r0, r0, [r4]
    5c96:	e9c4 0002 	strd	r0, r0, [r4, #8]
		err = bt_gatt_throughput_init(&gatt_throughput[i], &throughput_cb);
    5c9a:	481d      	ldr	r0, [pc, #116]	; (5d10 <main+0x94>)
    5c9c:	f000 f898 	bl	5dd0 <bt_gatt_throughput_init>
    5ca0:	491a      	ldr	r1, [pc, #104]	; (5d0c <main+0x90>)
    5ca2:	481c      	ldr	r0, [pc, #112]	; (5d14 <main+0x98>)
    5ca4:	f000 f894 	bl	5dd0 <bt_gatt_throughput_init>
    5ca8:	4918      	ldr	r1, [pc, #96]	; (5d0c <main+0x90>)
    5caa:	481b      	ldr	r0, [pc, #108]	; (5d18 <main+0x9c>)
    5cac:	f000 f890 	bl	5dd0 <bt_gatt_throughput_init>
    5cb0:	4916      	ldr	r1, [pc, #88]	; (5d0c <main+0x90>)
    5cb2:	481a      	ldr	r0, [pc, #104]	; (5d1c <main+0xa0>)
    5cb4:	f000 f88c 	bl	5dd0 <bt_gatt_throughput_init>
	}

	if (err) {
    5cb8:	bb10      	cbnz	r0, 5d00 <main+0x84>
		return;
	}
	test_ready = true;
    5cba:	4b19      	ldr	r3, [pc, #100]	; (5d20 <main+0xa4>)
    5cbc:	2201      	movs	r2, #1
    5cbe:	701a      	strb	r2, [r3, #0]
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
    5cc0:	f44f 757a 	mov.w	r5, #1000	; 0x3e8

	for ( ;;) {
		if(default_conn[CONFIG_BT_MAX_CONN-1] == NULL)
			start_scan();
		uint32_t stamp = k_uptime_get_32();
		while(k_uptime_get_32()-stamp < 15000);
    5cc4:	f643 2697 	movw	r6, #14999	; 0x3a97
		if(default_conn[CONFIG_BT_MAX_CONN-1] == NULL)
    5cc8:	68e3      	ldr	r3, [r4, #12]
    5cca:	b90b      	cbnz	r3, 5cd0 <main+0x54>
			start_scan();
    5ccc:	f7ff ffaa 	bl	5c24 <start_scan>
	return z_impl_k_uptime_ticks();
    5cd0:	f01d fa6f 	bl	231b2 <z_impl_k_uptime_ticks>
    5cd4:	460b      	mov	r3, r1
    5cd6:	fba0 0105 	umull	r0, r1, r0, r5
    5cda:	fb05 1103 	mla	r1, r5, r3, r1
    5cde:	0bc7      	lsrs	r7, r0, #15
    5ce0:	ea47 4741 	orr.w	r7, r7, r1, lsl #17
    5ce4:	f01d fa65 	bl	231b2 <z_impl_k_uptime_ticks>
    5ce8:	460b      	mov	r3, r1
    5cea:	fba0 0105 	umull	r0, r1, r0, r5
    5cee:	fb05 1103 	mla	r1, r5, r3, r1
    5cf2:	0bc3      	lsrs	r3, r0, #15
    5cf4:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
		while(k_uptime_get_32()-stamp < 15000);
    5cf8:	1bdb      	subs	r3, r3, r7
    5cfa:	42b3      	cmp	r3, r6
    5cfc:	d9f2      	bls.n	5ce4 <main+0x68>
    5cfe:	e7e3      	b.n	5cc8 <main+0x4c>
	}

}
    5d00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5d02:	bf00      	nop
    5d04:	20000118 	.word	0x20000118
    5d08:	20001cf4 	.word	0x20001cf4
    5d0c:	00023908 	.word	0x00023908
    5d10:	20001d04 	.word	0x20001d04
    5d14:	20001d20 	.word	0x20001d20
    5d18:	20001d3c 	.word	0x20001d3c
    5d1c:	20001d58 	.word	0x20001d58
    5d20:	20000734 	.word	0x20000734

00005d24 <write_callback>:
}

static ssize_t write_callback(struct bt_conn *conn,
			      const struct bt_gatt_attr *attr, const void *buf,
			      uint16_t len, uint16_t offset, uint8_t flags)
{
    5d24:	b538      	push	{r3, r4, r5, lr}
	static uint32_t clock_cycles;
	static uint32_t kb;

	uint64_t delta;

	struct bt_gatt_throughput_metrics *met_data = attr->user_data;
    5d26:	68cd      	ldr	r5, [r1, #12]
{
    5d28:	461c      	mov	r4, r3
#ifndef _ASMLANGUAGE
extern uint32_t z_timer_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
    5d2a:	f001 f909 	bl	6f40 <z_timer_cycle_get_32>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    5d2e:	4b09      	ldr	r3, [pc, #36]	; (5d54 <write_callback+0x30>)
    5d30:	4a09      	ldr	r2, [pc, #36]	; (5d58 <write_callback+0x34>)

	delta = k_cycle_get_32() - clock_cycles;
	delta = k_cyc_to_ns_floor64(delta);
	LOG_DBG("Received data.");
    5d32:	490a      	ldr	r1, [pc, #40]	; (5d5c <write_callback+0x38>)
    5d34:	480a      	ldr	r0, [pc, #40]	; (5d60 <write_callback+0x3c>)
    5d36:	1ad2      	subs	r2, r2, r3
    5d38:	08d2      	lsrs	r2, r2, #3
    5d3a:	0192      	lsls	r2, r2, #6
    5d3c:	f042 0204 	orr.w	r2, r2, #4
    5d40:	f018 fbd0 	bl	1e4e4 <log_1>

	if (callbacks->data_received) {
    5d44:	4b07      	ldr	r3, [pc, #28]	; (5d64 <write_callback+0x40>)
    5d46:	681b      	ldr	r3, [r3, #0]
    5d48:	685b      	ldr	r3, [r3, #4]
    5d4a:	b10b      	cbz	r3, 5d50 <write_callback+0x2c>
		callbacks->data_received(met_data);
    5d4c:	4628      	mov	r0, r5
    5d4e:	4798      	blx	r3
	}

	return len;
}
    5d50:	4620      	mov	r0, r4
    5d52:	bd38      	pop	{r3, r4, r5, pc}
    5d54:	000236e8 	.word	0x000236e8
    5d58:	000237a0 	.word	0x000237a0
    5d5c:	00024fe2 	.word	0x00024fe2
    5d60:	00024fad 	.word	0x00024fad
    5d64:	20001d7c 	.word	0x20001d7c

00005d68 <read_callback>:
			     const struct bt_gatt_attr *attr, void *buf,
			     uint16_t len, uint16_t offset)
{
	const struct bt_gatt_throughput_metrics *metrics = attr->user_data;

	len = MIN(sizeof(struct bt_gatt_throughput_metrics), len);
    5d68:	2b0c      	cmp	r3, #12
{
    5d6a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	len = MIN(sizeof(struct bt_gatt_throughput_metrics), len);
    5d6e:	bf28      	it	cs
    5d70:	230c      	movcs	r3, #12
    5d72:	461e      	mov	r6, r3

	if (callbacks->data_send) {
    5d74:	4b11      	ldr	r3, [pc, #68]	; (5dbc <read_callback+0x54>)
    5d76:	681b      	ldr	r3, [r3, #0]
    5d78:	689b      	ldr	r3, [r3, #8]
{
    5d7a:	4607      	mov	r7, r0
    5d7c:	460d      	mov	r5, r1
    5d7e:	4690      	mov	r8, r2
	if (callbacks->data_send) {
    5d80:	b10b      	cbz	r3, 5d86 <read_callback+0x1e>
		callbacks->data_send(metrics);
    5d82:	68c8      	ldr	r0, [r1, #12]
    5d84:	4798      	blx	r3
    5d86:	4a0e      	ldr	r2, [pc, #56]	; (5dc0 <read_callback+0x58>)
    5d88:	4c0e      	ldr	r4, [pc, #56]	; (5dc4 <read_callback+0x5c>)
	}

	LOG_DBG("Data send.");
    5d8a:	490f      	ldr	r1, [pc, #60]	; (5dc8 <read_callback+0x60>)
    5d8c:	480f      	ldr	r0, [pc, #60]	; (5dcc <read_callback+0x64>)
    5d8e:	1aa4      	subs	r4, r4, r2
    5d90:	08e4      	lsrs	r4, r4, #3
    5d92:	01a4      	lsls	r4, r4, #6
    5d94:	f044 0204 	orr.w	r2, r4, #4
    5d98:	f018 fba4 	bl	1e4e4 <log_1>

	return bt_gatt_attr_read(
    5d9c:	68eb      	ldr	r3, [r5, #12]
    5d9e:	9301      	str	r3, [sp, #4]
    5da0:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    5da4:	9300      	str	r3, [sp, #0]
    5da6:	9602      	str	r6, [sp, #8]
    5da8:	4633      	mov	r3, r6
    5daa:	4642      	mov	r2, r8
    5dac:	4629      	mov	r1, r5
    5dae:	4638      	mov	r0, r7
    5db0:	f01b fdeb 	bl	2198a <bt_gatt_attr_read>
		conn, attr, buf, len, offset, attr->user_data, len);
}
    5db4:	b004      	add	sp, #16
    5db6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5dba:	bf00      	nop
    5dbc:	20001d7c 	.word	0x20001d7c
    5dc0:	000236e8 	.word	0x000236e8
    5dc4:	000237a0 	.word	0x000237a0
    5dc8:	00024ff1 	.word	0x00024ff1
    5dcc:	00024fc0 	.word	0x00024fc0

00005dd0 <bt_gatt_throughput_init>:
		);

int bt_gatt_throughput_init(struct bt_gatt_throughput *throughput,
			    const struct bt_gatt_throughput_cb *cb)
{
	if (!throughput || !cb) {
    5dd0:	b120      	cbz	r0, 5ddc <bt_gatt_throughput_init+0xc>
    5dd2:	b119      	cbz	r1, 5ddc <bt_gatt_throughput_init+0xc>
		return -EINVAL;
	}

	callbacks = cb;
    5dd4:	4b03      	ldr	r3, [pc, #12]	; (5de4 <bt_gatt_throughput_init+0x14>)

	return 0;
    5dd6:	2000      	movs	r0, #0
	callbacks = cb;
    5dd8:	6019      	str	r1, [r3, #0]
	return 0;
    5dda:	4770      	bx	lr
		return -EINVAL;
    5ddc:	f06f 0015 	mvn.w	r0, #21
}
    5de0:	4770      	bx	lr
    5de2:	bf00      	nop
    5de4:	20001d7c 	.word	0x20001d7c

00005de8 <print_digits>:
}
#endif /* CONFIG_PRINTK */

static void print_digits(out_func_t out, void *ctx, printk_val_t num, int base,
			 bool pad_before, char pad_char, int min_width)
{
    5de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5dec:	b087      	sub	sp, #28
    5dee:	460f      	mov	r7, r1
    5df0:	4619      	mov	r1, r3
	char buf[DIGITS_BUFLEN];
	int i;

	/* Print it backwards into the end of the buffer, low digits first */
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
		buf[i] = "0123456789abcdef"[num % base];
    5df2:	9b10      	ldr	r3, [sp, #64]	; 0x40
{
    5df4:	f89d b044 	ldrb.w	fp, [sp, #68]	; 0x44
    5df8:	f89d a048 	ldrb.w	sl, [sp, #72]	; 0x48
		buf[i] = "0123456789abcdef"[num % base];
    5dfc:	4c1f      	ldr	r4, [pc, #124]	; (5e7c <print_digits+0x94>)
{
    5dfe:	4606      	mov	r6, r0
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
    5e00:	2514      	movs	r5, #20
{
    5e02:	4610      	mov	r0, r2
		buf[i] = "0123456789abcdef"[num % base];
    5e04:	4698      	mov	r8, r3
    5e06:	ea4f 79e3 	mov.w	r9, r3, asr #31
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
    5e0a:	ea50 0301 	orrs.w	r3, r0, r1
    5e0e:	d119      	bne.n	5e44 <print_digits+0x5c>
		num /= base;
	}

	if (i == DIGITS_BUFLEN - 1) {
    5e10:	2d14      	cmp	r5, #20
		buf[i] = '0';
	} else {
		i++;
	}

	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
    5e12:	9c13      	ldr	r4, [sp, #76]	; 0x4c
		i++;
    5e14:	bf14      	ite	ne
    5e16:	3501      	addne	r5, #1
		buf[i] = '0';
    5e18:	2330      	moveq	r3, #48	; 0x30
	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
    5e1a:	442c      	add	r4, r5
		buf[i] = '0';
    5e1c:	bf08      	it	eq
    5e1e:	f88d 3014 	strbeq.w	r3, [sp, #20]
	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
    5e22:	2c15      	cmp	r4, #21
    5e24:	d01b      	beq.n	5e5e <print_digits+0x76>
    5e26:	3c15      	subs	r4, #21

	for (/**/; pad > 0 && pad_before; pad--) {
    5e28:	2c00      	cmp	r4, #0
    5e2a:	dc1a      	bgt.n	5e62 <print_digits+0x7a>
		out(pad_char, ctx);
	}
	for (/**/; i < DIGITS_BUFLEN; i++) {
		out(buf[i], ctx);
    5e2c:	f81d 0005 	ldrb.w	r0, [sp, r5]
    5e30:	4639      	mov	r1, r7
	for (/**/; i < DIGITS_BUFLEN; i++) {
    5e32:	3501      	adds	r5, #1
		out(buf[i], ctx);
    5e34:	47b0      	blx	r6
	for (/**/; i < DIGITS_BUFLEN; i++) {
    5e36:	2d15      	cmp	r5, #21
    5e38:	d1f8      	bne.n	5e2c <print_digits+0x44>
	}
	for (/**/; pad > 0; pad--) {
    5e3a:	2c00      	cmp	r4, #0
    5e3c:	dc19      	bgt.n	5e72 <print_digits+0x8a>
		out(pad_char, ctx);
	}
}
    5e3e:	b007      	add	sp, #28
    5e40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf[i] = "0123456789abcdef"[num % base];
    5e44:	4642      	mov	r2, r8
    5e46:	464b      	mov	r3, r9
    5e48:	f7fa fdf8 	bl	a3c <__aeabi_uldivmod>
    5e4c:	5ca2      	ldrb	r2, [r4, r2]
    5e4e:	f80d 2005 	strb.w	r2, [sp, r5]
    5e52:	4684      	mov	ip, r0
    5e54:	460b      	mov	r3, r1
		num /= base;
    5e56:	4660      	mov	r0, ip
    5e58:	4619      	mov	r1, r3
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
    5e5a:	3d01      	subs	r5, #1
    5e5c:	e7d5      	b.n	5e0a <print_digits+0x22>
	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
    5e5e:	2400      	movs	r4, #0
	for (/**/; i < DIGITS_BUFLEN; i++) {
    5e60:	e7e4      	b.n	5e2c <print_digits+0x44>
	for (/**/; pad > 0 && pad_before; pad--) {
    5e62:	f1bb 0f00 	cmp.w	fp, #0
    5e66:	d0e1      	beq.n	5e2c <print_digits+0x44>
		out(pad_char, ctx);
    5e68:	4639      	mov	r1, r7
    5e6a:	4650      	mov	r0, sl
    5e6c:	47b0      	blx	r6
	for (/**/; pad > 0 && pad_before; pad--) {
    5e6e:	3c01      	subs	r4, #1
    5e70:	e7da      	b.n	5e28 <print_digits+0x40>
		out(pad_char, ctx);
    5e72:	4639      	mov	r1, r7
    5e74:	4650      	mov	r0, sl
    5e76:	47b0      	blx	r6
	for (/**/; pad > 0; pad--) {
    5e78:	3c01      	subs	r4, #1
    5e7a:	e7de      	b.n	5e3a <print_digits+0x52>
    5e7c:	00024fff 	.word	0x00024fff

00005e80 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    5e80:	680b      	ldr	r3, [r1, #0]
    5e82:	3301      	adds	r3, #1
    5e84:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    5e86:	4b01      	ldr	r3, [pc, #4]	; (5e8c <char_out+0xc>)
    5e88:	681b      	ldr	r3, [r3, #0]
    5e8a:	4718      	bx	r3
    5e8c:	20000140 	.word	0x20000140

00005e90 <__printk_hook_install>:
	_char_out = fn;
    5e90:	4b01      	ldr	r3, [pc, #4]	; (5e98 <__printk_hook_install+0x8>)
    5e92:	6018      	str	r0, [r3, #0]
}
    5e94:	4770      	bx	lr
    5e96:	bf00      	nop
    5e98:	20000140 	.word	0x20000140

00005e9c <z_vprintk>:
{
    5e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char length_mod = 0;
    5ea0:	2600      	movs	r6, #0
{
    5ea2:	b087      	sub	sp, #28
    5ea4:	4605      	mov	r5, r0
    5ea6:	468b      	mov	fp, r1
    5ea8:	461c      	mov	r4, r3
	while (*fmt) {
    5eaa:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
	int min_width = -1;
    5eae:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
    5eb2:	4637      	mov	r7, r6
			might_format = 0;
    5eb4:	2300      	movs	r3, #0
					break;
    5eb6:	e007      	b.n	5ec8 <z_vprintk+0x2c>
		if (!might_format) {
    5eb8:	b96b      	cbnz	r3, 5ed6 <z_vprintk+0x3a>
			if (*fmt != '%') {
    5eba:	2825      	cmp	r0, #37	; 0x25
    5ebc:	f000 80fc 	beq.w	60b8 <z_vprintk+0x21c>
				out((int)*fmt, ctx);
    5ec0:	4659      	mov	r1, fp
    5ec2:	9304      	str	r3, [sp, #16]
    5ec4:	47a8      	blx	r5
    5ec6:	9b04      	ldr	r3, [sp, #16]
	while (*fmt) {
    5ec8:	f819 0f01 	ldrb.w	r0, [r9, #1]!
    5ecc:	2800      	cmp	r0, #0
    5ece:	d1f3      	bne.n	5eb8 <z_vprintk+0x1c>
}
    5ed0:	b007      	add	sp, #28
    5ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
    5ed6:	287a      	cmp	r0, #122	; 0x7a
    5ed8:	d80a      	bhi.n	5ef0 <z_vprintk+0x54>
    5eda:	2862      	cmp	r0, #98	; 0x62
    5edc:	d810      	bhi.n	5f00 <z_vprintk+0x64>
    5ede:	2830      	cmp	r0, #48	; 0x30
    5ee0:	d052      	beq.n	5f88 <z_vprintk+0xec>
    5ee2:	d845      	bhi.n	5f70 <z_vprintk+0xd4>
    5ee4:	2825      	cmp	r0, #37	; 0x25
    5ee6:	f000 80e5 	beq.w	60b4 <z_vprintk+0x218>
    5eea:	282d      	cmp	r0, #45	; 0x2d
    5eec:	f000 80ea 	beq.w	60c4 <z_vprintk+0x228>
					out((int)'%', ctx);
    5ef0:	4659      	mov	r1, fp
    5ef2:	2025      	movs	r0, #37	; 0x25
    5ef4:	47a8      	blx	r5
					out((int)*fmt, ctx);
    5ef6:	f899 0000 	ldrb.w	r0, [r9]
    5efa:	4659      	mov	r1, fp
    5efc:	47a8      	blx	r5
    5efe:	e7d9      	b.n	5eb4 <z_vprintk+0x18>
    5f00:	f1a0 0263 	sub.w	r2, r0, #99	; 0x63
    5f04:	2a17      	cmp	r2, #23
    5f06:	d8f3      	bhi.n	5ef0 <z_vprintk+0x54>
    5f08:	a101      	add	r1, pc, #4	; (adr r1, 5f10 <z_vprintk+0x74>)
    5f0a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    5f0e:	bf00      	nop
    5f10:	000060ad 	.word	0x000060ad
    5f14:	00005fd1 	.word	0x00005fd1
    5f18:	00005ef1 	.word	0x00005ef1
    5f1c:	00005ef1 	.word	0x00005ef1
    5f20:	00005ef1 	.word	0x00005ef1
    5f24:	00005fb3 	.word	0x00005fb3
    5f28:	00005fd1 	.word	0x00005fd1
    5f2c:	00005ef1 	.word	0x00005ef1
    5f30:	00005ef1 	.word	0x00005ef1
    5f34:	00005fb3 	.word	0x00005fb3
    5f38:	00005ef1 	.word	0x00005ef1
    5f3c:	00005ef1 	.word	0x00005ef1
    5f40:	00005ef1 	.word	0x00005ef1
    5f44:	00006035 	.word	0x00006035
    5f48:	00005ef1 	.word	0x00005ef1
    5f4c:	00005ef1 	.word	0x00005ef1
    5f50:	00006077 	.word	0x00006077
    5f54:	00005ef1 	.word	0x00005ef1
    5f58:	00005fd1 	.word	0x00005fd1
    5f5c:	00005ef1 	.word	0x00005ef1
    5f60:	00005ef1 	.word	0x00005ef1
    5f64:	00005f79 	.word	0x00005f79
    5f68:	00005ef1 	.word	0x00005ef1
    5f6c:	00005fb3 	.word	0x00005fb3
			switch (*fmt) {
    5f70:	2839      	cmp	r0, #57	; 0x39
    5f72:	d915      	bls.n	5fa0 <z_vprintk+0x104>
    5f74:	2858      	cmp	r0, #88	; 0x58
    5f76:	d1bb      	bne.n	5ef0 <z_vprintk+0x54>
				if (*fmt == 'p') {
    5f78:	f899 3000 	ldrb.w	r3, [r9]
    5f7c:	2b70      	cmp	r3, #112	; 0x70
    5f7e:	d163      	bne.n	6048 <z_vprintk+0x1ac>
					x = va_arg(ap, unsigned int);
    5f80:	f854 2b04 	ldr.w	r2, [r4], #4
    5f84:	2300      	movs	r3, #0
    5f86:	e06a      	b.n	605e <z_vprintk+0x1c2>
				if (min_width < 0 && padding == PAD_NONE) {
    5f88:	f1b8 0f00 	cmp.w	r8, #0
    5f8c:	da0b      	bge.n	5fa6 <z_vprintk+0x10a>
    5f8e:	2f00      	cmp	r7, #0
    5f90:	f000 809a 	beq.w	60c8 <z_vprintk+0x22c>
					min_width = *fmt - '0';
    5f94:	f1a0 0830 	sub.w	r8, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
    5f98:	2f00      	cmp	r7, #0
    5f9a:	bf08      	it	eq
    5f9c:	2702      	moveq	r7, #2
    5f9e:	e793      	b.n	5ec8 <z_vprintk+0x2c>
				if (min_width < 0) {
    5fa0:	f1b8 0f00 	cmp.w	r8, #0
    5fa4:	dbf6      	blt.n	5f94 <z_vprintk+0xf8>
					min_width = 10 * min_width + *fmt - '0';
    5fa6:	220a      	movs	r2, #10
    5fa8:	fb02 0808 	mla	r8, r2, r8, r0
    5fac:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
    5fb0:	e7f2      	b.n	5f98 <z_vprintk+0xfc>
				if (*fmt == 'h' && length_mod == 'h') {
    5fb2:	2868      	cmp	r0, #104	; 0x68
    5fb4:	d103      	bne.n	5fbe <z_vprintk+0x122>
    5fb6:	2e68      	cmp	r6, #104	; 0x68
    5fb8:	d106      	bne.n	5fc8 <z_vprintk+0x12c>
					length_mod = 'H';
    5fba:	2648      	movs	r6, #72	; 0x48
    5fbc:	e784      	b.n	5ec8 <z_vprintk+0x2c>
				} else if (*fmt == 'l' && length_mod == 'l') {
    5fbe:	286c      	cmp	r0, #108	; 0x6c
    5fc0:	d102      	bne.n	5fc8 <z_vprintk+0x12c>
    5fc2:	2e6c      	cmp	r6, #108	; 0x6c
    5fc4:	f000 8082 	beq.w	60cc <z_vprintk+0x230>
				} else if (length_mod == 0) {
    5fc8:	2e00      	cmp	r6, #0
    5fca:	d191      	bne.n	5ef0 <z_vprintk+0x54>
    5fcc:	4606      	mov	r6, r0
    5fce:	e77b      	b.n	5ec8 <z_vprintk+0x2c>
				if (length_mod == 'z') {
    5fd0:	2e7a      	cmp	r6, #122	; 0x7a
    5fd2:	d103      	bne.n	5fdc <z_vprintk+0x140>
					d = va_arg(ap, int);
    5fd4:	f854 2b04 	ldr.w	r2, [r4], #4
    5fd8:	17d3      	asrs	r3, r2, #31
    5fda:	e008      	b.n	5fee <z_vprintk+0x152>
				} else if (length_mod == 'l') {
    5fdc:	2e6c      	cmp	r6, #108	; 0x6c
    5fde:	d0f9      	beq.n	5fd4 <z_vprintk+0x138>
				} else if (length_mod == 'L') {
    5fe0:	2e4c      	cmp	r6, #76	; 0x4c
    5fe2:	d1f7      	bne.n	5fd4 <z_vprintk+0x138>
					long long lld = va_arg(ap, long long);
    5fe4:	3407      	adds	r4, #7
    5fe6:	f024 0407 	bic.w	r4, r4, #7
					d = (printk_val_t) lld;
    5fea:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				if (*fmt != 'u' && negative(d)) {
    5fee:	2875      	cmp	r0, #117	; 0x75
    5ff0:	d00f      	beq.n	6012 <z_vprintk+0x176>
    5ff2:	2a00      	cmp	r2, #0
    5ff4:	f173 0100 	sbcs.w	r1, r3, #0
    5ff8:	da0b      	bge.n	6012 <z_vprintk+0x176>
					out((int)'-', ctx);
    5ffa:	4659      	mov	r1, fp
    5ffc:	202d      	movs	r0, #45	; 0x2d
    5ffe:	e9cd 2304 	strd	r2, r3, [sp, #16]
    6002:	47a8      	blx	r5
					d = -d;
    6004:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    6008:	4252      	negs	r2, r2
    600a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
					min_width--;
    600e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
	print_digits(out, ctx, num, 10, padding != PAD_SPACE_AFTER,
    6012:	1ef9      	subs	r1, r7, #3
    6014:	bf18      	it	ne
    6016:	2101      	movne	r1, #1
    6018:	2f01      	cmp	r7, #1
    601a:	bf0c      	ite	eq
    601c:	2030      	moveq	r0, #48	; 0x30
    601e:	2020      	movne	r0, #32
    6020:	e9cd 0802 	strd	r0, r8, [sp, #8]
    6024:	9101      	str	r1, [sp, #4]
    6026:	210a      	movs	r1, #10
	print_digits(out, ctx, num, 16, padding != PAD_SPACE_AFTER,
    6028:	9100      	str	r1, [sp, #0]
    602a:	4628      	mov	r0, r5
    602c:	4659      	mov	r1, fp
    602e:	f7ff fedb 	bl	5de8 <print_digits>
    6032:	e73f      	b.n	5eb4 <z_vprintk+0x18>
				out('0', ctx);
    6034:	4659      	mov	r1, fp
    6036:	2030      	movs	r0, #48	; 0x30
    6038:	47a8      	blx	r5
				out('x', ctx);
    603a:	4659      	mov	r1, fp
    603c:	2078      	movs	r0, #120	; 0x78
    603e:	47a8      	blx	r5
				min_width = sizeof(void *) * 2;
    6040:	f04f 0808 	mov.w	r8, #8
				padding = PAD_ZERO_BEFORE;
    6044:	2701      	movs	r7, #1
    6046:	e797      	b.n	5f78 <z_vprintk+0xdc>
				} else if (length_mod == 'l') {
    6048:	2e6c      	cmp	r6, #108	; 0x6c
    604a:	d099      	beq.n	5f80 <z_vprintk+0xe4>
				} else if (length_mod == 'L') {
    604c:	2e4c      	cmp	r6, #76	; 0x4c
    604e:	d197      	bne.n	5f80 <z_vprintk+0xe4>
					x = va_arg(ap, unsigned long long);
    6050:	1de3      	adds	r3, r4, #7
    6052:	f023 0307 	bic.w	r3, r3, #7
    6056:	461c      	mov	r4, r3
    6058:	685b      	ldr	r3, [r3, #4]
    605a:	f854 2b08 	ldr.w	r2, [r4], #8
	print_digits(out, ctx, num, 16, padding != PAD_SPACE_AFTER,
    605e:	1ef9      	subs	r1, r7, #3
    6060:	bf18      	it	ne
    6062:	2101      	movne	r1, #1
    6064:	2f01      	cmp	r7, #1
    6066:	bf0c      	ite	eq
    6068:	2030      	moveq	r0, #48	; 0x30
    606a:	2020      	movne	r0, #32
    606c:	9101      	str	r1, [sp, #4]
    606e:	e9cd 0802 	strd	r0, r8, [sp, #8]
    6072:	2110      	movs	r1, #16
    6074:	e7d8      	b.n	6028 <z_vprintk+0x18c>
				char *s = va_arg(ap, char *);
    6076:	46a2      	mov	sl, r4
    6078:	f85a 3b04 	ldr.w	r3, [sl], #4
				while (*s) {
    607c:	461c      	mov	r4, r3
    607e:	4621      	mov	r1, r4
    6080:	f814 0b01 	ldrb.w	r0, [r4], #1
    6084:	b940      	cbnz	r0, 6098 <z_vprintk+0x1fc>
				if (padding == PAD_SPACE_AFTER) {
    6086:	2f03      	cmp	r7, #3
    6088:	d122      	bne.n	60d0 <z_vprintk+0x234>
					int remaining = min_width - (s - start);
    608a:	1acc      	subs	r4, r1, r3
    608c:	eba8 0404 	sub.w	r4, r8, r4
					while (remaining-- > 0) {
    6090:	2c00      	cmp	r4, #0
    6092:	dc06      	bgt.n	60a2 <z_vprintk+0x206>
				char *s = va_arg(ap, char *);
    6094:	4654      	mov	r4, sl
    6096:	e70d      	b.n	5eb4 <z_vprintk+0x18>
					out((int)(*s++), ctx);
    6098:	4659      	mov	r1, fp
    609a:	9304      	str	r3, [sp, #16]
    609c:	47a8      	blx	r5
    609e:	9b04      	ldr	r3, [sp, #16]
    60a0:	e7ed      	b.n	607e <z_vprintk+0x1e2>
						out(' ', ctx);
    60a2:	4659      	mov	r1, fp
    60a4:	2020      	movs	r0, #32
    60a6:	47a8      	blx	r5
    60a8:	3c01      	subs	r4, #1
    60aa:	e7f1      	b.n	6090 <z_vprintk+0x1f4>
				out(c, ctx);
    60ac:	f854 0b04 	ldr.w	r0, [r4], #4
    60b0:	4659      	mov	r1, fp
    60b2:	e723      	b.n	5efc <z_vprintk+0x60>
				out((int)'%', ctx);
    60b4:	4659      	mov	r1, fp
    60b6:	e721      	b.n	5efc <z_vprintk+0x60>
				length_mod = 0;
    60b8:	461e      	mov	r6, r3
				padding = PAD_NONE;
    60ba:	461f      	mov	r7, r3
				min_width = -1;
    60bc:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
				might_format = 1;
    60c0:	2301      	movs	r3, #1
    60c2:	e701      	b.n	5ec8 <z_vprintk+0x2c>
			switch (*fmt) {
    60c4:	2703      	movs	r7, #3
    60c6:	e6ff      	b.n	5ec8 <z_vprintk+0x2c>
					padding = PAD_ZERO_BEFORE;
    60c8:	2701      	movs	r7, #1
    60ca:	e6fd      	b.n	5ec8 <z_vprintk+0x2c>
					length_mod = 'L';
    60cc:	264c      	movs	r6, #76	; 0x4c
    60ce:	e6fb      	b.n	5ec8 <z_vprintk+0x2c>
				char *s = va_arg(ap, char *);
    60d0:	4654      	mov	r4, sl
			might_format = 0;
    60d2:	4603      	mov	r3, r0
    60d4:	e6f8      	b.n	5ec8 <z_vprintk+0x2c>
    60d6:	bf00      	nop

000060d8 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    60d8:	b507      	push	{r0, r1, r2, lr}
    60da:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    60dc:	2100      	movs	r1, #0
{
    60de:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    60e0:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	z_vprintk(char_out, &ctx, fmt, ap);
    60e2:	4803      	ldr	r0, [pc, #12]	; (60f0 <vprintk+0x18>)
    60e4:	a901      	add	r1, sp, #4
    60e6:	f7ff fed9 	bl	5e9c <z_vprintk>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    60ea:	b003      	add	sp, #12
    60ec:	f85d fb04 	ldr.w	pc, [sp], #4
    60f0:	00005e81 	.word	0x00005e81

000060f4 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    60f4:	b530      	push	{r4, r5, lr}
    60f6:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    60f8:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    60fc:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    60fe:	2500      	movs	r5, #0

	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    6100:	4805      	ldr	r0, [pc, #20]	; (6118 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    6102:	9503      	str	r5, [sp, #12]
	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    6104:	a901      	add	r1, sp, #4
    6106:	f7ff fec9 	bl	5e9c <z_vprintk>

	if (ctx.count < ctx.max) {
    610a:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    610e:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    6110:	bfb8      	it	lt
    6112:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    6114:	b005      	add	sp, #20
    6116:	bd30      	pop	{r4, r5, pc}
    6118:	0001df25 	.word	0x0001df25

0000611c <enable_logger>:

K_THREAD_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(struct device *arg)
{
    611c:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    611e:	4910      	ldr	r1, [pc, #64]	; (6160 <enable_logger+0x44>)
    6120:	4810      	ldr	r0, [pc, #64]	; (6164 <enable_logger+0x48>)
{
    6122:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    6124:	2200      	movs	r2, #0
    6126:	f01d f86f 	bl	23208 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    612a:	4d0f      	ldr	r5, [pc, #60]	; (6168 <enable_logger+0x4c>)
    612c:	490f      	ldr	r1, [pc, #60]	; (616c <enable_logger+0x50>)
    612e:	2200      	movs	r2, #0
    6130:	2300      	movs	r3, #0
    6132:	e9cd 2306 	strd	r2, r3, [sp, #24]
    6136:	2400      	movs	r4, #0
    6138:	230e      	movs	r3, #14
    613a:	e9cd 3403 	strd	r3, r4, [sp, #12]
    613e:	e9cd 4401 	strd	r4, r4, [sp, #4]
    6142:	4b0b      	ldr	r3, [pc, #44]	; (6170 <enable_logger+0x54>)
    6144:	9400      	str	r4, [sp, #0]
    6146:	f44f 7240 	mov.w	r2, #768	; 0x300
    614a:	4628      	mov	r0, r5
    614c:	f017 fb9e 	bl	1d88c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    6150:	4908      	ldr	r1, [pc, #32]	; (6174 <enable_logger+0x58>)
    6152:	4628      	mov	r0, r5
    6154:	f01c ff61 	bl	2301a <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    6158:	4620      	mov	r0, r4
    615a:	b009      	add	sp, #36	; 0x24
    615c:	bd30      	pop	{r4, r5, pc}
    615e:	bf00      	nop
    6160:	00006179 	.word	0x00006179
    6164:	20000a18 	.word	0x20000a18
    6168:	20000a50 	.word	0x20000a50
    616c:	2000afb0 	.word	0x2000afb0
    6170:	00006591 	.word	0x00006591
    6174:	00025010 	.word	0x00025010

00006178 <log_process_thread_timer_expiry_fn>:
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    6178:	4801      	ldr	r0, [pc, #4]	; (6180 <log_process_thread_timer_expiry_fn+0x8>)
    617a:	f017 baf9 	b.w	1d770 <z_impl_k_sem_give>
    617e:	bf00      	nop
    6180:	20000860 	.word	0x20000860

00006184 <log_core_init>:
{
    6184:	b508      	push	{r3, lr}
		log_msg_pool_init();
    6186:	f000 fa65 	bl	6654 <log_msg_pool_init>
		log_list_init(&list);
    618a:	4809      	ldr	r0, [pc, #36]	; (61b0 <log_core_init+0x2c>)
    618c:	f018 f95a 	bl	1e444 <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
    6190:	2304      	movs	r3, #4
    6192:	2228      	movs	r2, #40	; 0x28
    6194:	4907      	ldr	r1, [pc, #28]	; (61b4 <log_core_init+0x30>)
    6196:	4808      	ldr	r0, [pc, #32]	; (61b8 <log_core_init+0x34>)
    6198:	f01c fd04 	bl	22ba4 <k_mem_slab_init>
		timestamp_func = k_cycle_get_32_wrapper;
    619c:	4b07      	ldr	r3, [pc, #28]	; (61bc <log_core_init+0x38>)
    619e:	4a08      	ldr	r2, [pc, #32]	; (61c0 <log_core_init+0x3c>)
    61a0:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
    61a2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
}
    61a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	log_output_timestamp_freq_set(freq);
    61aa:	f000 bc97 	b.w	6adc <log_output_timestamp_freq_set>
    61ae:	bf00      	nop
    61b0:	20001d98 	.word	0x20001d98
    61b4:	2000ee00 	.word	0x2000ee00
    61b8:	20001da0 	.word	0x20001da0
    61bc:	20000144 	.word	0x20000144
    61c0:	0001e483 	.word	0x0001e483

000061c4 <dropped_notify>:
{
    61c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    61c6:	4b0f      	ldr	r3, [pc, #60]	; (6204 <dropped_notify+0x40>)
    61c8:	f3bf 8f5b 	dmb	ish
    61cc:	2500      	movs	r5, #0
    61ce:	e853 7f00 	ldrex	r7, [r3]
    61d2:	e843 5200 	strex	r2, r5, [r3]
    61d6:	2a00      	cmp	r2, #0
    61d8:	d1f9      	bne.n	61ce <dropped_notify+0xa>
    61da:	f3bf 8f5b 	dmb	ish
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    61de:	4c0a      	ldr	r4, [pc, #40]	; (6208 <dropped_notify+0x44>)
    61e0:	4e0a      	ldr	r6, [pc, #40]	; (620c <dropped_notify+0x48>)
    61e2:	1b36      	subs	r6, r6, r4
    61e4:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    61e6:	42b5      	cmp	r5, r6
    61e8:	db00      	blt.n	61ec <dropped_notify+0x28>
}
    61ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    61ec:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    61ee:	795b      	ldrb	r3, [r3, #5]
    61f0:	b12b      	cbz	r3, 61fe <dropped_notify+0x3a>
	if (backend->api->dropped != NULL) {
    61f2:	6823      	ldr	r3, [r4, #0]
    61f4:	68db      	ldr	r3, [r3, #12]
    61f6:	b113      	cbz	r3, 61fe <dropped_notify+0x3a>
		backend->api->dropped(backend, cnt);
    61f8:	4639      	mov	r1, r7
    61fa:	4620      	mov	r0, r4
    61fc:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    61fe:	3501      	adds	r5, #1
    6200:	3410      	adds	r4, #16
    6202:	e7f0      	b.n	61e6 <dropped_notify+0x22>
    6204:	20001d90 	.word	0x20001d90
    6208:	00023818 	.word	0x00023818
    620c:	00023838 	.word	0x00023838

00006210 <log_dropped>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    6210:	4b06      	ldr	r3, [pc, #24]	; (622c <log_dropped+0x1c>)
    6212:	f3bf 8f5b 	dmb	ish
    6216:	e853 2f00 	ldrex	r2, [r3]
    621a:	3201      	adds	r2, #1
    621c:	e843 2100 	strex	r1, r2, [r3]
    6220:	2900      	cmp	r1, #0
    6222:	d1f8      	bne.n	6216 <log_dropped+0x6>
    6224:	f3bf 8f5b 	dmb	ish
}
    6228:	4770      	bx	lr
    622a:	bf00      	nop
    622c:	20001d90 	.word	0x20001d90

00006230 <log_source_name_get>:
    6230:	4a04      	ldr	r2, [pc, #16]	; (6244 <log_source_name_get+0x14>)
    6232:	4b05      	ldr	r3, [pc, #20]	; (6248 <log_source_name_get+0x18>)
    6234:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    6236:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    623a:	bf34      	ite	cc
    623c:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
    6240:	2000      	movcs	r0, #0
}
    6242:	4770      	bx	lr
    6244:	000236e8 	.word	0x000236e8
    6248:	00023818 	.word	0x00023818

0000624c <log_backend_enable>:
	id += backend - log_backend_get(0);
    624c:	4b09      	ldr	r3, [pc, #36]	; (6274 <log_backend_enable+0x28>)
	log_backend_id_set(backend, id);
    624e:	6842      	ldr	r2, [r0, #4]
	id += backend - log_backend_get(0);
    6250:	1ac3      	subs	r3, r0, r3
    6252:	111b      	asrs	r3, r3, #4
    6254:	3301      	adds	r3, #1
{
    6256:	b510      	push	{r4, lr}
	log_backend_id_set(backend, id);
    6258:	7113      	strb	r3, [r2, #4]
	log_backend_activate(backend, ctx);
    625a:	6843      	ldr	r3, [r0, #4]
	if (!backend_attached) {
    625c:	4c06      	ldr	r4, [pc, #24]	; (6278 <log_backend_enable+0x2c>)
	backend->cb->ctx = ctx;
    625e:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    6260:	2201      	movs	r2, #1
    6262:	715a      	strb	r2, [r3, #5]
    6264:	7822      	ldrb	r2, [r4, #0]
    6266:	b912      	cbnz	r2, 626e <log_backend_enable+0x22>
    6268:	4804      	ldr	r0, [pc, #16]	; (627c <log_backend_enable+0x30>)
    626a:	f017 fa81 	bl	1d770 <z_impl_k_sem_give>
	backend_attached = true;
    626e:	2301      	movs	r3, #1
    6270:	7023      	strb	r3, [r4, #0]
}
    6272:	bd10      	pop	{r4, pc}
    6274:	00023818 	.word	0x00023818
    6278:	2000a2e7 	.word	0x2000a2e7
    627c:	20000860 	.word	0x20000860

00006280 <log_init>:
{
    6280:	b570      	push	{r4, r5, r6, lr}
    6282:	4b11      	ldr	r3, [pc, #68]	; (62c8 <log_init+0x48>)
    6284:	f3bf 8f5b 	dmb	ish
    6288:	e853 5f00 	ldrex	r5, [r3]
    628c:	1c6a      	adds	r2, r5, #1
    628e:	e843 2100 	strex	r1, r2, [r3]
    6292:	2900      	cmp	r1, #0
    6294:	d1f8      	bne.n	6288 <log_init+0x8>
    6296:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    629a:	b92d      	cbnz	r5, 62a8 <log_init+0x28>
	return __log_backends_end - __log_backends_start;
    629c:	4c0b      	ldr	r4, [pc, #44]	; (62cc <log_init+0x4c>)
    629e:	4e0c      	ldr	r6, [pc, #48]	; (62d0 <log_init+0x50>)
    62a0:	1b36      	subs	r6, r6, r4
    62a2:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
    62a4:	42b5      	cmp	r5, r6
    62a6:	db00      	blt.n	62aa <log_init+0x2a>
}
    62a8:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    62aa:	7b23      	ldrb	r3, [r4, #12]
    62ac:	b143      	cbz	r3, 62c0 <log_init+0x40>
			if (backend->api->init != NULL) {
    62ae:	6823      	ldr	r3, [r4, #0]
    62b0:	695b      	ldr	r3, [r3, #20]
    62b2:	b103      	cbz	r3, 62b6 <log_init+0x36>
				backend->api->init();
    62b4:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
    62b6:	2204      	movs	r2, #4
    62b8:	2100      	movs	r1, #0
    62ba:	4620      	mov	r0, r4
    62bc:	f7ff ffc6 	bl	624c <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    62c0:	3501      	adds	r5, #1
    62c2:	3410      	adds	r4, #16
    62c4:	e7ee      	b.n	62a4 <log_init+0x24>
    62c6:	bf00      	nop
    62c8:	20001d94 	.word	0x20001d94
    62cc:	00023818 	.word	0x00023818
    62d0:	00023838 	.word	0x00023838

000062d4 <log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
    62d4:	4b16      	ldr	r3, [pc, #88]	; (6330 <log_strdup+0x5c>)
    62d6:	4298      	cmp	r0, r3
{
    62d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    62da:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    62dc:	d302      	bcc.n	62e4 <log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
    62de:	4b15      	ldr	r3, [pc, #84]	; (6334 <log_strdup+0x60>)
    62e0:	4298      	cmp	r0, r3
    62e2:	d320      	bcc.n	6326 <log_strdup+0x52>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
    62e4:	4814      	ldr	r0, [pc, #80]	; (6338 <log_strdup+0x64>)
    62e6:	2200      	movs	r2, #0
    62e8:	2300      	movs	r3, #0
    62ea:	a901      	add	r1, sp, #4
    62ec:	f016 fd8c 	bl	1ce08 <k_mem_slab_alloc>
	if (err != 0) {
    62f0:	4605      	mov	r5, r0
    62f2:	b9d8      	cbnz	r0, 632c <log_strdup+0x58>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    62f4:	2201      	movs	r2, #1
    62f6:	9b01      	ldr	r3, [sp, #4]
    62f8:	f3bf 8f5b 	dmb	ish
    62fc:	e853 1f00 	ldrex	r1, [r3]
    6300:	e843 2000 	strex	r0, r2, [r3]
    6304:	2800      	cmp	r0, #0
    6306:	d1f9      	bne.n	62fc <log_strdup+0x28>
    6308:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
    630c:	9801      	ldr	r0, [sp, #4]
    630e:	4621      	mov	r1, r4
    6310:	221f      	movs	r2, #31
    6312:	3004      	adds	r0, #4
    6314:	f019 fd75 	bl	1fe02 <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
    6318:	9c01      	ldr	r4, [sp, #4]
    631a:	237e      	movs	r3, #126	; 0x7e
    631c:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	dup->buf[sizeof(dup->buf) - 1] = '\0';
    6320:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
	return dup->buf;
    6324:	3404      	adds	r4, #4
}
    6326:	4620      	mov	r0, r4
    6328:	b003      	add	sp, #12
    632a:	bd30      	pop	{r4, r5, pc}
		return (char *)log_strdup_fail_msg;
    632c:	4c03      	ldr	r4, [pc, #12]	; (633c <log_strdup+0x68>)
    632e:	e7fa      	b.n	6326 <log_strdup+0x52>
    6330:	000234ac 	.word	0x000234ac
    6334:	00026ebc 	.word	0x00026ebc
    6338:	20001da0 	.word	0x20001da0
    633c:	00025018 	.word	0x00025018

00006340 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
    6340:	b148      	cbz	r0, 6356 <log_is_strdup+0x16>
    6342:	4b05      	ldr	r3, [pc, #20]	; (6358 <log_is_strdup+0x18>)
    6344:	4298      	cmp	r0, r3
    6346:	d305      	bcc.n	6354 <log_is_strdup+0x14>
    6348:	33a0      	adds	r3, #160	; 0xa0
    634a:	4298      	cmp	r0, r3
    634c:	bf2c      	ite	cs
    634e:	2000      	movcs	r0, #0
    6350:	2001      	movcc	r0, #1
    6352:	4770      	bx	lr
    6354:	2000      	movs	r0, #0
}
    6356:	4770      	bx	lr
    6358:	2000ee00 	.word	0x2000ee00

0000635c <z_impl_log_process>:
{
    635c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
    6360:	4b4c      	ldr	r3, [pc, #304]	; (6494 <z_impl_log_process+0x138>)
    6362:	781b      	ldrb	r3, [r3, #0]
{
    6364:	b085      	sub	sp, #20
    6366:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
    6368:	b903      	cbnz	r3, 636c <z_impl_log_process+0x10>
    636a:	b360      	cbz	r0, 63c6 <z_impl_log_process+0x6a>
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
    636c:	f04f 0320 	mov.w	r3, #32
    6370:	f3ef 8611 	mrs	r6, BASEPRI
    6374:	f383 8811 	msr	BASEPRI, r3
    6378:	f3bf 8f6f 	isb	sy
	msg = log_list_head_get(&list);
    637c:	4846      	ldr	r0, [pc, #280]	; (6498 <z_impl_log_process+0x13c>)
    637e:	f018 f871 	bl	1e464 <log_list_head_get>
    6382:	4605      	mov	r5, r0
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    6384:	f386 8811 	msr	BASEPRI, r6
    6388:	f3bf 8f6f 	isb	sy
	if (msg != NULL) {
    638c:	b178      	cbz	r0, 63ae <z_impl_log_process+0x52>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    638e:	f3bf 8f5b 	dmb	ish
    6392:	4b42      	ldr	r3, [pc, #264]	; (649c <z_impl_log_process+0x140>)
    6394:	e853 2f00 	ldrex	r2, [r3]
    6398:	3a01      	subs	r2, #1
    639a:	e843 2100 	strex	r1, r2, [r3]
    639e:	2900      	cmp	r1, #0
    63a0:	d1f8      	bne.n	6394 <z_impl_log_process+0x38>
    63a2:	f3bf 8f5b 	dmb	ish
	if (!bypass) {
    63a6:	b194      	cbz	r4, 63ce <z_impl_log_process+0x72>
	log_msg_put(msg);
    63a8:	4628      	mov	r0, r5
    63aa:	f018 f972 	bl	1e692 <log_msg_put>
	if (!bypass && dropped_cnt) {
    63ae:	b924      	cbnz	r4, 63ba <z_impl_log_process+0x5e>
    63b0:	4b3b      	ldr	r3, [pc, #236]	; (64a0 <z_impl_log_process+0x144>)
    63b2:	681b      	ldr	r3, [r3, #0]
    63b4:	b10b      	cbz	r3, 63ba <z_impl_log_process+0x5e>
		dropped_notify();
    63b6:	f7ff ff05 	bl	61c4 <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
    63ba:	4837      	ldr	r0, [pc, #220]	; (6498 <z_impl_log_process+0x13c>)
    63bc:	f018 f850 	bl	1e460 <log_list_head_peek>
    63c0:	1e04      	subs	r4, r0, #0
    63c2:	bf18      	it	ne
    63c4:	2401      	movne	r4, #1
}
    63c6:	4620      	mov	r0, r4
    63c8:	b005      	add	sp, #20
    63ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
    63ce:	4b35      	ldr	r3, [pc, #212]	; (64a4 <z_impl_log_process+0x148>)
		if (IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
    63d0:	781b      	ldrb	r3, [r3, #0]
    63d2:	b9cb      	cbnz	r3, 6408 <z_impl_log_process+0xac>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    63d4:	7a2b      	ldrb	r3, [r5, #8]
	if (!log_msg_is_std(msg)) {
    63d6:	07db      	lsls	r3, r3, #31
    63d8:	d416      	bmi.n	6408 <z_impl_log_process+0xac>
	msg_str = log_msg_str_get(msg);
    63da:	f018 f96d 	bl	1e6b8 <log_msg_str_get>
    63de:	4680      	mov	r8, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    63e0:	4628      	mov	r0, r5
    63e2:	f018 f934 	bl	1e64e <log_msg_nargs_get>
    63e6:	4601      	mov	r1, r0
    63e8:	4640      	mov	r0, r8
    63ea:	f018 f84e 	bl	1e48a <z_log_get_s_mask>
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    63ee:	4f2e      	ldr	r7, [pc, #184]	; (64a8 <z_impl_log_process+0x14c>)
    63f0:	4b2e      	ldr	r3, [pc, #184]	; (64ac <z_impl_log_process+0x150>)
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    63f2:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 64c8 <z_impl_log_process+0x16c>
    63f6:	1bdb      	subs	r3, r3, r7
    63f8:	08db      	lsrs	r3, r3, #3
    63fa:	9303      	str	r3, [sp, #12]
    63fc:	4b2c      	ldr	r3, [pc, #176]	; (64b0 <z_impl_log_process+0x154>)
    63fe:	1bdb      	subs	r3, r3, r7
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    6400:	4606      	mov	r6, r0
    6402:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
	while (mask) {
    6406:	b936      	cbnz	r6, 6416 <z_impl_log_process+0xba>
    6408:	4e2a      	ldr	r6, [pc, #168]	; (64b4 <z_impl_log_process+0x158>)
    640a:	4f2b      	ldr	r7, [pc, #172]	; (64b8 <z_impl_log_process+0x15c>)
    640c:	1bbf      	subs	r7, r7, r6
    640e:	113f      	asrs	r7, r7, #4
    6410:	f04f 0800 	mov.w	r8, #0
    6414:	e03a      	b.n	648c <z_impl_log_process+0x130>
		idx = 31 - __builtin_clz(mask);
    6416:	fab6 f186 	clz	r1, r6
    641a:	f1c1 091f 	rsb	r9, r1, #31
		str = (const char *)log_msg_arg_get(msg, idx);
    641e:	4649      	mov	r1, r9
    6420:	4628      	mov	r0, r5
    6422:	f018 f917 	bl	1e654 <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
    6426:	4b25      	ldr	r3, [pc, #148]	; (64bc <z_impl_log_process+0x160>)
    6428:	4298      	cmp	r0, r3
		str = (const char *)log_msg_arg_get(msg, idx);
    642a:	4601      	mov	r1, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    642c:	d302      	bcc.n	6434 <z_impl_log_process+0xd8>
		if (!is_rodata(str) && !log_is_strdup(str) &&
    642e:	4b24      	ldr	r3, [pc, #144]	; (64c0 <z_impl_log_process+0x164>)
    6430:	4298      	cmp	r0, r3
    6432:	d31a      	bcc.n	646a <z_impl_log_process+0x10e>
    6434:	4608      	mov	r0, r1
    6436:	f7ff ff83 	bl	6340 <log_is_strdup>
    643a:	4602      	mov	r2, r0
    643c:	b9a8      	cbnz	r0, 646a <z_impl_log_process+0x10e>
    643e:	4b21      	ldr	r3, [pc, #132]	; (64c4 <z_impl_log_process+0x168>)
    6440:	4299      	cmp	r1, r3
    6442:	d012      	beq.n	646a <z_impl_log_process+0x10e>
	return msg->hdr.ids.source_id;
    6444:	896b      	ldrh	r3, [r5, #10]
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    6446:	9803      	ldr	r0, [sp, #12]
    6448:	0999      	lsrs	r1, r3, #6
    644a:	ebb0 1f93 	cmp.w	r0, r3, lsr #6
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    644e:	ea4f 138a 	mov.w	r3, sl, lsl #6
    6452:	f043 0301 	orr.w	r3, r3, #1
	return __log_const_start[source_id].name;
    6456:	bf88      	it	hi
    6458:	f857 2031 	ldrhi.w	r2, [r7, r1, lsl #3]
    645c:	f8ad 3000 	strh.w	r3, [sp]
    6460:	4649      	mov	r1, r9
    6462:	4643      	mov	r3, r8
    6464:	4658      	mov	r0, fp
    6466:	f018 f86a 	bl	1e53e <log_3>
		mask &= ~BIT(idx);
    646a:	2101      	movs	r1, #1
    646c:	fa01 f109 	lsl.w	r1, r1, r9
    6470:	ea26 0601 	bic.w	r6, r6, r1
    6474:	e7c7      	b.n	6406 <z_impl_log_process+0xaa>
	return backend->cb->active;
    6476:	6873      	ldr	r3, [r6, #4]
			if (log_backend_is_active(backend) &&
    6478:	795b      	ldrb	r3, [r3, #5]
    647a:	b123      	cbz	r3, 6486 <z_impl_log_process+0x12a>
	backend->api->put(backend, msg);
    647c:	6833      	ldr	r3, [r6, #0]
    647e:	4629      	mov	r1, r5
    6480:	681b      	ldr	r3, [r3, #0]
    6482:	4630      	mov	r0, r6
    6484:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    6486:	f108 0801 	add.w	r8, r8, #1
    648a:	3610      	adds	r6, #16
    648c:	45b8      	cmp	r8, r7
    648e:	dbf2      	blt.n	6476 <z_impl_log_process+0x11a>
    6490:	e78a      	b.n	63a8 <z_impl_log_process+0x4c>
    6492:	bf00      	nop
    6494:	2000a2e7 	.word	0x2000a2e7
    6498:	20001d98 	.word	0x20001d98
    649c:	20001d8c 	.word	0x20001d8c
    64a0:	20001d90 	.word	0x20001d90
    64a4:	2000a2e8 	.word	0x2000a2e8
    64a8:	000236e8 	.word	0x000236e8
    64ac:	00023818 	.word	0x00023818
    64b0:	000237e0 	.word	0x000237e0
    64b4:	00023818 	.word	0x00023818
    64b8:	00023838 	.word	0x00023838
    64bc:	000234ac 	.word	0x000234ac
    64c0:	00026ebc 	.word	0x00026ebc
    64c4:	00025018 	.word	0x00025018
    64c8:	00025032 	.word	0x00025032

000064cc <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
    64cc:	4b29      	ldr	r3, [pc, #164]	; (6574 <msg_finalize+0xa8>)
{
    64ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
    64d0:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
    64d2:	8141      	strh	r1, [r0, #10]
{
    64d4:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    64d6:	4798      	blx	r3
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    64d8:	4d27      	ldr	r5, [pc, #156]	; (6578 <msg_finalize+0xac>)
    64da:	60e0      	str	r0, [r4, #12]
    64dc:	f3bf 8f5b 	dmb	ish
    64e0:	e855 3f00 	ldrex	r3, [r5]
    64e4:	3301      	adds	r3, #1
    64e6:	e845 3200 	strex	r2, r3, [r5]
    64ea:	2a00      	cmp	r2, #0
    64ec:	d1f8      	bne.n	64e0 <msg_finalize+0x14>
    64ee:	f3bf 8f5b 	dmb	ish
	__asm__ volatile(
    64f2:	f04f 0320 	mov.w	r3, #32
    64f6:	f3ef 8611 	mrs	r6, BASEPRI
    64fa:	f383 8811 	msr	BASEPRI, r3
    64fe:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    6502:	481e      	ldr	r0, [pc, #120]	; (657c <msg_finalize+0xb0>)
    6504:	4621      	mov	r1, r4
    6506:	f017 ffa1 	bl	1e44c <log_list_add_tail>
	__asm__ volatile(
    650a:	f386 8811 	msr	BASEPRI, r6
    650e:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
    6512:	4b1b      	ldr	r3, [pc, #108]	; (6580 <msg_finalize+0xb4>)
    6514:	781b      	ldrb	r3, [r3, #0]
    6516:	b183      	cbz	r3, 653a <msg_finalize+0x6e>
	__asm__ volatile(
    6518:	f04f 0320 	mov.w	r3, #32
    651c:	f3ef 8411 	mrs	r4, BASEPRI
    6520:	f383 8811 	msr	BASEPRI, r3
    6524:	f3bf 8f6f 	isb	sy
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    6528:	2000      	movs	r0, #0
    652a:	f7ff ff17 	bl	635c <z_impl_log_process>
	__asm__ volatile(
    652e:	f384 8811 	msr	BASEPRI, r4
    6532:	f3bf 8f6f 	isb	sy
}
    6536:	b002      	add	sp, #8
    6538:	bd70      	pop	{r4, r5, r6, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
    653a:	4a12      	ldr	r2, [pc, #72]	; (6584 <msg_finalize+0xb8>)
    653c:	682b      	ldr	r3, [r5, #0]
    653e:	6812      	ldr	r2, [r2, #0]
    6540:	2a00      	cmp	r2, #0
    6542:	d0f8      	beq.n	6536 <msg_finalize+0x6a>
    6544:	2b01      	cmp	r3, #1
    6546:	d10a      	bne.n	655e <msg_finalize+0x92>
	z_impl_k_timer_start(timer, duration, period);
    6548:	2200      	movs	r2, #0
    654a:	2300      	movs	r3, #0
    654c:	e9cd 2300 	strd	r2, r3, [sp]
    6550:	480d      	ldr	r0, [pc, #52]	; (6588 <msg_finalize+0xbc>)
    6552:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    6556:	2300      	movs	r3, #0
    6558:	f017 fbfc 	bl	1dd54 <z_impl_k_timer_start>
    655c:	e7eb      	b.n	6536 <msg_finalize+0x6a>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    655e:	2b0a      	cmp	r3, #10
    6560:	d1e9      	bne.n	6536 <msg_finalize+0x6a>
	z_impl_k_timer_stop(timer);
    6562:	4809      	ldr	r0, [pc, #36]	; (6588 <msg_finalize+0xbc>)
    6564:	f01c fe5c 	bl	23220 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    6568:	4808      	ldr	r0, [pc, #32]	; (658c <msg_finalize+0xc0>)
}
    656a:	b002      	add	sp, #8
    656c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6570:	f017 b8fe 	b.w	1d770 <z_impl_k_sem_give>
    6574:	20000144 	.word	0x20000144
    6578:	20001d8c 	.word	0x20001d8c
    657c:	20001d98 	.word	0x20001d98
    6580:	2000a2e8 	.word	0x2000a2e8
    6584:	20001dbc 	.word	0x20001dbc
    6588:	20000a18 	.word	0x20000a18
    658c:	20000860 	.word	0x20000860

00006590 <log_process_thread_func>:
{
    6590:	b510      	push	{r4, lr}
	log_init();
    6592:	f7ff fe75 	bl	6280 <log_init>
	return z_impl_k_current_get();
    6596:	f017 f8e5 	bl	1d764 <z_impl_k_current_get>
	proc_tid = process_tid;
    659a:	4b0c      	ldr	r3, [pc, #48]	; (65cc <log_process_thread_func+0x3c>)
    659c:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    659e:	b130      	cbz	r0, 65ae <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    65a0:	4b0b      	ldr	r3, [pc, #44]	; (65d0 <log_process_thread_func+0x40>)
	    process_tid &&
    65a2:	681b      	ldr	r3, [r3, #0]
    65a4:	2b09      	cmp	r3, #9
    65a6:	dd02      	ble.n	65ae <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
    65a8:	480a      	ldr	r0, [pc, #40]	; (65d4 <log_process_thread_func+0x44>)
    65aa:	f017 f8e1 	bl	1d770 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
    65ae:	4c09      	ldr	r4, [pc, #36]	; (65d4 <log_process_thread_func+0x44>)
    65b0:	2000      	movs	r0, #0
    65b2:	f7ff fed3 	bl	635c <z_impl_log_process>
		if (log_process(false) == false) {
    65b6:	2800      	cmp	r0, #0
    65b8:	d1fa      	bne.n	65b0 <log_process_thread_func+0x20>
    65ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    65be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    65c2:	4620      	mov	r0, r4
    65c4:	f017 f8fa 	bl	1d7bc <z_impl_k_sem_take>
    65c8:	e7f2      	b.n	65b0 <log_process_thread_func+0x20>
    65ca:	bf00      	nop
    65cc:	20001dbc 	.word	0x20001dbc
    65d0:	20001d8c 	.word	0x20001d8c
    65d4:	20000860 	.word	0x20000860

000065d8 <z_impl_log_panic>:
{
    65d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    65da:	4f0e      	ldr	r7, [pc, #56]	; (6614 <z_impl_log_panic+0x3c>)
    65dc:	783d      	ldrb	r5, [r7, #0]
    65de:	b975      	cbnz	r5, 65fe <z_impl_log_panic+0x26>
	return __log_backends_end - __log_backends_start;
    65e0:	4c0d      	ldr	r4, [pc, #52]	; (6618 <z_impl_log_panic+0x40>)
    65e2:	4e0e      	ldr	r6, [pc, #56]	; (661c <z_impl_log_panic+0x44>)
	log_init();
    65e4:	f7ff fe4c 	bl	6280 <log_init>
    65e8:	1b36      	subs	r6, r6, r4
    65ea:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    65ec:	42b5      	cmp	r5, r6
    65ee:	db07      	blt.n	6600 <z_impl_log_panic+0x28>
    65f0:	2000      	movs	r0, #0
    65f2:	f7ff feb3 	bl	635c <z_impl_log_process>
		while (log_process(false) == true) {
    65f6:	2800      	cmp	r0, #0
    65f8:	d1fa      	bne.n	65f0 <z_impl_log_panic+0x18>
	panic_mode = true;
    65fa:	2301      	movs	r3, #1
    65fc:	703b      	strb	r3, [r7, #0]
}
    65fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    6600:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    6602:	795b      	ldrb	r3, [r3, #5]
    6604:	b11b      	cbz	r3, 660e <z_impl_log_panic+0x36>
	backend->api->panic(backend);
    6606:	6823      	ldr	r3, [r4, #0]
    6608:	4620      	mov	r0, r4
    660a:	691b      	ldr	r3, [r3, #16]
    660c:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    660e:	3501      	adds	r5, #1
    6610:	3410      	adds	r4, #16
    6612:	e7eb      	b.n	65ec <z_impl_log_panic+0x14>
    6614:	2000a2e8 	.word	0x2000a2e8
    6618:	00023818 	.word	0x00023818
    661c:	00023838 	.word	0x00023838

00006620 <log_free>:
{
    6620:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
    6622:	3804      	subs	r0, #4
    6624:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    6626:	f3bf 8f5b 	dmb	ish
    662a:	e850 3f00 	ldrex	r3, [r0]
    662e:	1e5a      	subs	r2, r3, #1
    6630:	e840 2100 	strex	r1, r2, [r0]
    6634:	2900      	cmp	r1, #0
    6636:	d1f8      	bne.n	662a <log_free+0xa>
    6638:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
    663c:	2b01      	cmp	r3, #1
    663e:	d103      	bne.n	6648 <log_free+0x28>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
    6640:	4803      	ldr	r0, [pc, #12]	; (6650 <log_free+0x30>)
    6642:	a901      	add	r1, sp, #4
    6644:	f016 fc12 	bl	1ce6c <k_mem_slab_free>
}
    6648:	b003      	add	sp, #12
    664a:	f85d fb04 	ldr.w	pc, [sp], #4
    664e:	bf00      	nop
    6650:	20001da0 	.word	0x20001da0

00006654 <log_msg_pool_init>:
static uint8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
    6654:	2320      	movs	r3, #32
    6656:	4902      	ldr	r1, [pc, #8]	; (6660 <log_msg_pool_init+0xc>)
    6658:	4802      	ldr	r0, [pc, #8]	; (6664 <log_msg_pool_init+0x10>)
    665a:	461a      	mov	r2, r3
    665c:	f01c baa2 	b.w	22ba4 <k_mem_slab_init>
    6660:	2000eea0 	.word	0x2000eea0
    6664:	20001dc0 	.word	0x20001dc0

00006668 <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
    6668:	b537      	push	{r0, r1, r2, r4, r5, lr}
	union log_msg_chunk *msg = NULL;
    666a:	2300      	movs	r3, #0

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
    666c:	4d09      	ldr	r5, [pc, #36]	; (6694 <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
    666e:	9301      	str	r3, [sp, #4]
    6670:	2001      	movs	r0, #1
    6672:	f7ff fe73 	bl	635c <z_impl_log_process>
    6676:	4604      	mov	r4, r0
			log_dropped();
    6678:	f7ff fdca 	bl	6210 <log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
    667c:	2200      	movs	r2, #0
    667e:	2300      	movs	r3, #0
    6680:	a901      	add	r1, sp, #4
    6682:	4628      	mov	r0, r5
    6684:	f016 fbc0 	bl	1ce08 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
    6688:	b108      	cbz	r0, 668e <log_msg_no_space_handle+0x26>
    668a:	2c00      	cmp	r4, #0
    668c:	d1f0      	bne.n	6670 <log_msg_no_space_handle+0x8>
	} else {
		log_dropped();
	}
	return msg;

}
    668e:	9801      	ldr	r0, [sp, #4]
    6690:	b003      	add	sp, #12
    6692:	bd30      	pop	{r4, r5, pc}
    6694:	20001dc0 	.word	0x20001dc0

00006698 <log_msg_chunk_alloc>:
{
    6698:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
    669a:	2300      	movs	r3, #0
    669c:	9301      	str	r3, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    669e:	4807      	ldr	r0, [pc, #28]	; (66bc <log_msg_chunk_alloc+0x24>)
    66a0:	2200      	movs	r2, #0
    66a2:	2300      	movs	r3, #0
    66a4:	a901      	add	r1, sp, #4
    66a6:	f016 fbaf 	bl	1ce08 <k_mem_slab_alloc>
	if (err != 0) {
    66aa:	b110      	cbz	r0, 66b2 <log_msg_chunk_alloc+0x1a>
		msg = log_msg_no_space_handle();
    66ac:	f7ff ffdc 	bl	6668 <log_msg_no_space_handle>
    66b0:	9001      	str	r0, [sp, #4]
}
    66b2:	9801      	ldr	r0, [sp, #4]
    66b4:	b003      	add	sp, #12
    66b6:	f85d fb04 	ldr.w	pc, [sp], #4
    66ba:	bf00      	nop
    66bc:	20001dc0 	.word	0x20001dc0

000066c0 <msg_free>:
{
    66c0:	b5f0      	push	{r4, r5, r6, r7, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    66c2:	7a03      	ldrb	r3, [r0, #8]
	}
}

uint32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
    66c4:	7a45      	ldrb	r5, [r0, #9]
{
    66c6:	b085      	sub	sp, #20
	return msg->hdr.params.std.nargs;
    66c8:	092d      	lsrs	r5, r5, #4
{
    66ca:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
    66cc:	07d8      	lsls	r0, r3, #31
    66ce:	d41c      	bmi.n	670a <msg_free+0x4a>
    66d0:	b1dd      	cbz	r5, 670a <msg_free+0x4a>
		uint32_t smask = 0;
    66d2:	2400      	movs	r4, #0
		for (i = 0; i < nargs; i++) {
    66d4:	4626      	mov	r6, r4
			void *buf = (void *)log_msg_arg_get(msg, i);
    66d6:	9801      	ldr	r0, [sp, #4]
    66d8:	4631      	mov	r1, r6
    66da:	f017 ffbb 	bl	1e654 <log_msg_arg_get>
    66de:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
    66e0:	f7ff fe2e 	bl	6340 <log_is_strdup>
    66e4:	b170      	cbz	r0, 6704 <msg_free+0x44>
				if (smask == 0) {
    66e6:	b934      	cbnz	r4, 66f6 <msg_free+0x36>
					smask = z_log_get_s_mask(
    66e8:	9b01      	ldr	r3, [sp, #4]
    66ea:	4629      	mov	r1, r5
    66ec:	6918      	ldr	r0, [r3, #16]
    66ee:	f017 fecc 	bl	1e48a <z_log_get_s_mask>
					if (smask == 0) {
    66f2:	4604      	mov	r4, r0
    66f4:	b148      	cbz	r0, 670a <msg_free+0x4a>
				if (smask & BIT(i)) {
    66f6:	fa24 f306 	lsr.w	r3, r4, r6
    66fa:	07d9      	lsls	r1, r3, #31
    66fc:	d502      	bpl.n	6704 <msg_free+0x44>
					log_free(buf);
    66fe:	4638      	mov	r0, r7
    6700:	f7ff ff8e 	bl	6620 <log_free>
		for (i = 0; i < nargs; i++) {
    6704:	3601      	adds	r6, #1
    6706:	42ae      	cmp	r6, r5
    6708:	d3e5      	bcc.n	66d6 <msg_free+0x16>
	if (msg->hdr.params.generic.ext == 1) {
    670a:	9b01      	ldr	r3, [sp, #4]
    670c:	7a1a      	ldrb	r2, [r3, #8]
    670e:	0792      	lsls	r2, r2, #30
    6710:	d504      	bpl.n	671c <msg_free+0x5c>
		cont_free(msg->payload.ext.next);
    6712:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    6714:	4c08      	ldr	r4, [pc, #32]	; (6738 <msg_free+0x78>)
    6716:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
    6718:	9b03      	ldr	r3, [sp, #12]
    671a:	b92b      	cbnz	r3, 6728 <msg_free+0x68>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
    671c:	4806      	ldr	r0, [pc, #24]	; (6738 <msg_free+0x78>)
    671e:	a901      	add	r1, sp, #4
    6720:	f016 fba4 	bl	1ce6c <k_mem_slab_free>
}
    6724:	b005      	add	sp, #20
    6726:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = cont->next;
    6728:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    672a:	a903      	add	r1, sp, #12
    672c:	4620      	mov	r0, r4
    672e:	f016 fb9d 	bl	1ce6c <k_mem_slab_free>
		cont = next;
    6732:	9503      	str	r5, [sp, #12]
    6734:	e7f0      	b.n	6718 <msg_free+0x58>
    6736:	bf00      	nop
    6738:	20001dc0 	.word	0x20001dc0

0000673c <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
    673c:	b40e      	push	{r1, r2, r3}
    673e:	b503      	push	{r0, r1, lr}
    6740:	ab03      	add	r3, sp, #12
    6742:	4601      	mov	r1, r0
    6744:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(args, fmt);
#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = z_prf(out_func, (void *)log_output, (char *)fmt, args);
#else
	z_vprintk(out_func, (void *)log_output, fmt, args);
    6748:	4804      	ldr	r0, [pc, #16]	; (675c <print_formatted+0x20>)
	va_start(args, fmt);
    674a:	9301      	str	r3, [sp, #4]
	z_vprintk(out_func, (void *)log_output, fmt, args);
    674c:	f7ff fba6 	bl	5e9c <z_vprintk>
#endif
	va_end(args);

	return length;
}
    6750:	2000      	movs	r0, #0
    6752:	b002      	add	sp, #8
    6754:	f85d eb04 	ldr.w	lr, [sp], #4
    6758:	b003      	add	sp, #12
    675a:	4770      	bx	lr
    675c:	0001ea61 	.word	0x0001ea61

00006760 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *log_output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, uint16_t source_id)
{
    6760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6764:	b085      	sub	sp, #20
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
    6766:	f011 0402 	ands.w	r4, r1, #2
{
    676a:	4690      	mov	r8, r2
    676c:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
    6770:	4606      	mov	r6, r0
    6772:	461a      	mov	r2, r3
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    6774:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    6778:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
    677c:	d007      	beq.n	678e <prefix_print+0x2e>
	if (!format) {
    677e:	f011 0f44 	tst.w	r1, #68	; 0x44
    6782:	d137      	bne.n	67f4 <prefix_print+0x94>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
    6784:	4932      	ldr	r1, [pc, #200]	; (6850 <prefix_print+0xf0>)
    6786:	f7ff ffd9 	bl	673c <print_formatted>
			length = print_formatted(log_output,
    678a:	4601      	mov	r1, r0
		length += timestamp_print(log_output, flags, timestamp);
    678c:	460c      	mov	r4, r1
	if (color) {
    678e:	f1b9 0f00 	cmp.w	r9, #0
    6792:	d00a      	beq.n	67aa <prefix_print+0x4a>
		const char *color = start && (colors[level] != NULL) ?
    6794:	4b2f      	ldr	r3, [pc, #188]	; (6854 <prefix_print+0xf4>)
		print_formatted(log_output, "%s", color);
    6796:	4930      	ldr	r1, [pc, #192]	; (6858 <prefix_print+0xf8>)
		const char *color = start && (colors[level] != NULL) ?
    6798:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(log_output, "%s", color);
    679c:	4b2f      	ldr	r3, [pc, #188]	; (685c <prefix_print+0xfc>)
    679e:	4630      	mov	r0, r6
    67a0:	2a00      	cmp	r2, #0
    67a2:	bf08      	it	eq
    67a4:	461a      	moveq	r2, r3
    67a6:	f7ff ffc9 	bl	673c <print_formatted>
	if (level_on) {
    67aa:	b13d      	cbz	r5, 67bc <prefix_print+0x5c>
		total += print_formatted(log_output, "<%s> ", severity[level]);
    67ac:	4b2c      	ldr	r3, [pc, #176]	; (6860 <prefix_print+0x100>)
    67ae:	492d      	ldr	r1, [pc, #180]	; (6864 <prefix_print+0x104>)
    67b0:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
    67b4:	4630      	mov	r0, r6
    67b6:	f7ff ffc1 	bl	673c <print_formatted>
    67ba:	4605      	mov	r5, r0
	total += print_formatted(log_output,
    67bc:	f1b8 0f00 	cmp.w	r8, #0
    67c0:	d043      	beq.n	684a <prefix_print+0xea>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    67c2:	2301      	movs	r3, #1
    67c4:	fa03 f707 	lsl.w	r7, r3, r7
	total += print_formatted(log_output,
    67c8:	4b27      	ldr	r3, [pc, #156]	; (6868 <prefix_print+0x108>)
    67ca:	f017 0f10 	tst.w	r7, #16
    67ce:	4f27      	ldr	r7, [pc, #156]	; (686c <prefix_print+0x10c>)
    67d0:	bf18      	it	ne
    67d2:	461f      	movne	r7, r3
    67d4:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
    67d8:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    67dc:	f7ff fd28 	bl	6230 <log_source_name_get>
    67e0:	4639      	mov	r1, r7
    67e2:	4602      	mov	r2, r0
    67e4:	4630      	mov	r0, r6
    67e6:	f7ff ffa9 	bl	673c <print_formatted>
    67ea:	4428      	add	r0, r5
		length += ids_print(log_output, level_on, func_on,
				    domain_id, source_id, level);
	}

	return length;
}
    67ec:	4420      	add	r0, r4
    67ee:	b005      	add	sp, #20
    67f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
    67f4:	4b1e      	ldr	r3, [pc, #120]	; (6870 <prefix_print+0x110>)
    67f6:	6819      	ldr	r1, [r3, #0]
    67f8:	2900      	cmp	r1, #0
    67fa:	d0c7      	beq.n	678c <prefix_print+0x2c>
		timestamp /= timestamp_div;
    67fc:	4b1d      	ldr	r3, [pc, #116]	; (6874 <prefix_print+0x114>)
    67fe:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
    6802:	681b      	ldr	r3, [r3, #0]
    6804:	fbb2 f3f3 	udiv	r3, r2, r3
		ms = (remainder * 1000U) / freq;
    6808:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
		seconds = timestamp / freq;
    680c:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
    6810:	fbb4 f2fe 	udiv	r2, r4, lr
    6814:	fb0e 4e12 	mls	lr, lr, r2, r4
		remainder = timestamp % freq;
    6818:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
    681c:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
    6820:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    6824:	fbb4 fbf1 	udiv	fp, r4, r1
    6828:	fb01 441b 	mls	r4, r1, fp, r4
    682c:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
    6830:	fbbe f3fa 	udiv	r3, lr, sl
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    6834:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(log_output,
    6838:	e9cd b101 	strd	fp, r1, [sp, #4]
    683c:	fb0a e113 	mls	r1, sl, r3, lr
    6840:	9100      	str	r1, [sp, #0]
    6842:	490d      	ldr	r1, [pc, #52]	; (6878 <prefix_print+0x118>)
    6844:	f7ff ff7a 	bl	673c <print_formatted>
    6848:	e79f      	b.n	678a <prefix_print+0x2a>
	total += print_formatted(log_output,
    684a:	4f08      	ldr	r7, [pc, #32]	; (686c <prefix_print+0x10c>)
    684c:	e7c2      	b.n	67d4 <prefix_print+0x74>
    684e:	bf00      	nop
    6850:	00025083 	.word	0x00025083
    6854:	00023950 	.word	0x00023950
    6858:	00025dbc 	.word	0x00025dbc
    685c:	00025075 	.word	0x00025075
    6860:	00023964 	.word	0x00023964
    6864:	000250a8 	.word	0x000250a8
    6868:	0002507f 	.word	0x0002507f
    686c:	0002507a 	.word	0x0002507a
    6870:	20001ddc 	.word	0x20001ddc
    6874:	20001de0 	.word	0x20001de0
    6878:	0002508c 	.word	0x0002508c

0000687c <postfix_print>:

static void postfix_print(const struct log_output *log_output,
			  uint32_t flags, uint8_t level)
{
    687c:	b538      	push	{r3, r4, r5, lr}
    687e:	460c      	mov	r4, r1
	if (color) {
    6880:	07e1      	lsls	r1, r4, #31
{
    6882:	4605      	mov	r5, r0
	if (color) {
    6884:	d503      	bpl.n	688e <postfix_print+0x12>
		print_formatted(log_output, "%s", color);
    6886:	4a08      	ldr	r2, [pc, #32]	; (68a8 <postfix_print+0x2c>)
    6888:	4908      	ldr	r1, [pc, #32]	; (68ac <postfix_print+0x30>)
    688a:	f7ff ff57 	bl	673c <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    688e:	06e2      	lsls	r2, r4, #27
    6890:	d408      	bmi.n	68a4 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    6892:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    6894:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
    6896:	bf4c      	ite	mi
    6898:	4905      	ldrmi	r1, [pc, #20]	; (68b0 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    689a:	4906      	ldrpl	r1, [pc, #24]	; (68b4 <postfix_print+0x38>)
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(log_output, flags);
}
    689c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
    68a0:	f7ff bf4c 	b.w	673c <print_formatted>
}
    68a4:	bd38      	pop	{r3, r4, r5, pc}
    68a6:	bf00      	nop
    68a8:	00025075 	.word	0x00025075
    68ac:	00025dbc 	.word	0x00025dbc
    68b0:	000250af 	.word	0x000250af
    68b4:	000250ae 	.word	0x000250ae

000068b8 <hexdump_line_print>:
{
    68b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    68bc:	461d      	mov	r5, r3
    68be:	9b08      	ldr	r3, [sp, #32]
    68c0:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    68c2:	06da      	lsls	r2, r3, #27
{
    68c4:	4604      	mov	r4, r0
    68c6:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    68c8:	d405      	bmi.n	68d6 <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    68ca:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    68cc:	bf4c      	ite	mi
    68ce:	492a      	ldrmi	r1, [pc, #168]	; (6978 <hexdump_line_print+0xc0>)
		print_formatted(ctx, "\r\n");
    68d0:	492a      	ldrpl	r1, [pc, #168]	; (697c <hexdump_line_print+0xc4>)
    68d2:	f7ff ff33 	bl	673c <print_formatted>
		print_formatted(log_output, " ");
    68d6:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 6984 <hexdump_line_print+0xcc>
{
    68da:	f04f 0800 	mov.w	r8, #0
	for (int i = 0; i < prefix_offset; i++) {
    68de:	45a8      	cmp	r8, r5
    68e0:	db2a      	blt.n	6938 <hexdump_line_print+0x80>
			print_formatted(log_output, "   ");
    68e2:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 6988 <hexdump_line_print+0xd0>
			print_formatted(log_output, "%02x ", data[i]);
    68e6:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 698c <hexdump_line_print+0xd4>
			print_formatted(log_output, " ");
    68ea:	f8df a098 	ldr.w	sl, [pc, #152]	; 6984 <hexdump_line_print+0xcc>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    68ee:	2500      	movs	r5, #0
		if (i < length) {
    68f0:	42bd      	cmp	r5, r7
    68f2:	d22f      	bcs.n	6954 <hexdump_line_print+0x9c>
			print_formatted(log_output, "%02x ", data[i]);
    68f4:	5d72      	ldrb	r2, [r6, r5]
    68f6:	4649      	mov	r1, r9
    68f8:	4620      	mov	r0, r4
    68fa:	f7ff ff1f 	bl	673c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    68fe:	3501      	adds	r5, #1
    6900:	2d10      	cmp	r5, #16
    6902:	d120      	bne.n	6946 <hexdump_line_print+0x8e>
	print_formatted(log_output, "|");
    6904:	491e      	ldr	r1, [pc, #120]	; (6980 <hexdump_line_print+0xc8>)
			print_formatted(log_output, " ");
    6906:	f8df 807c 	ldr.w	r8, [pc, #124]	; 6984 <hexdump_line_print+0xcc>
			print_formatted(log_output, "%c",
    690a:	f8df 9084 	ldr.w	r9, [pc, #132]	; 6990 <hexdump_line_print+0xd8>
	print_formatted(log_output, "|");
    690e:	4620      	mov	r0, r4
    6910:	f7ff ff14 	bl	673c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    6914:	2500      	movs	r5, #0
		if (i < length) {
    6916:	42af      	cmp	r7, r5
    6918:	d928      	bls.n	696c <hexdump_line_print+0xb4>
			      isprint((int)c) ? c : '.');
    691a:	5d72      	ldrb	r2, [r6, r5]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isprint(int c)
{
	return (int)((((unsigned)c) >= ' ') &&
    691c:	f1a2 0320 	sub.w	r3, r2, #32
			print_formatted(log_output, "%c",
    6920:	2b5f      	cmp	r3, #95	; 0x5f
    6922:	bf28      	it	cs
    6924:	222e      	movcs	r2, #46	; 0x2e
    6926:	4649      	mov	r1, r9
    6928:	4620      	mov	r0, r4
    692a:	f7ff ff07 	bl	673c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    692e:	3501      	adds	r5, #1
    6930:	2d10      	cmp	r5, #16
    6932:	d114      	bne.n	695e <hexdump_line_print+0xa6>
}
    6934:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, " ");
    6938:	4649      	mov	r1, r9
    693a:	4620      	mov	r0, r4
    693c:	f7ff fefe 	bl	673c <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    6940:	f108 0801 	add.w	r8, r8, #1
    6944:	e7cb      	b.n	68de <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
    6946:	076a      	lsls	r2, r5, #29
    6948:	d1d2      	bne.n	68f0 <hexdump_line_print+0x38>
			print_formatted(log_output, " ");
    694a:	4651      	mov	r1, sl
    694c:	4620      	mov	r0, r4
    694e:	f7ff fef5 	bl	673c <print_formatted>
    6952:	e7cd      	b.n	68f0 <hexdump_line_print+0x38>
			print_formatted(log_output, "   ");
    6954:	4641      	mov	r1, r8
    6956:	4620      	mov	r0, r4
    6958:	f7ff fef0 	bl	673c <print_formatted>
    695c:	e7cf      	b.n	68fe <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
    695e:	076b      	lsls	r3, r5, #29
    6960:	d1d9      	bne.n	6916 <hexdump_line_print+0x5e>
			print_formatted(log_output, " ");
    6962:	4641      	mov	r1, r8
    6964:	4620      	mov	r0, r4
    6966:	f7ff fee9 	bl	673c <print_formatted>
    696a:	e7d4      	b.n	6916 <hexdump_line_print+0x5e>
			print_formatted(log_output, " ");
    696c:	4641      	mov	r1, r8
    696e:	4620      	mov	r0, r4
    6970:	f7ff fee4 	bl	673c <print_formatted>
    6974:	e7db      	b.n	692e <hexdump_line_print+0x76>
    6976:	bf00      	nop
    6978:	000250af 	.word	0x000250af
    697c:	000250ae 	.word	0x000250ae
    6980:	000250bb 	.word	0x000250bb
    6984:	000250b9 	.word	0x000250b9
    6988:	000250b7 	.word	0x000250b7
    698c:	000250b1 	.word	0x000250b1
    6990:	000250bd 	.word	0x000250bd

00006994 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *log_output,
			    struct log_msg *msg,
			    uint32_t flags)
{
    6994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
    6998:	7a8b      	ldrb	r3, [r1, #10]
		log_output_msg_syst_process(log_output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    699a:	f013 0807 	ands.w	r8, r3, #7
{
    699e:	4617      	mov	r7, r2
    69a0:	b08a      	sub	sp, #40	; 0x28
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    69a2:	7a0a      	ldrb	r2, [r1, #8]
    69a4:	4605      	mov	r5, r0
    69a6:	460e      	mov	r6, r1
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    69a8:	d020      	beq.n	69ec <log_output_msg_process+0x58>
	return msg->hdr.ids.source_id;
    69aa:	8949      	ldrh	r1, [r1, #10]
    69ac:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    69b0:	0989      	lsrs	r1, r1, #6
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    69b2:	43d2      	mvns	r2, r2
    69b4:	e9cd 8300 	strd	r8, r3, [sp]
    69b8:	9102      	str	r1, [sp, #8]
    69ba:	68f3      	ldr	r3, [r6, #12]
    69bc:	f002 0201 	and.w	r2, r2, #1
    69c0:	4639      	mov	r1, r7
    69c2:	f7ff fecd 	bl	6760 <prefix_print>
    69c6:	4681      	mov	r9, r0
    69c8:	7a34      	ldrb	r4, [r6, #8]
    69ca:	43e4      	mvns	r4, r4
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
    69cc:	f014 0401 	ands.w	r4, r4, #1
    69d0:	d00e      	beq.n	69f0 <log_output_msg_process+0x5c>
		std_print(msg, log_output);
    69d2:	4629      	mov	r1, r5
    69d4:	4630      	mov	r0, r6
    69d6:	f017 fed9 	bl	1e78c <std_print>
		raw_string_print(msg, log_output);
	} else {
		hexdump_print(msg, log_output, prefix_offset, flags);
	}

	if (!raw_string) {
    69da:	f1b8 0f00 	cmp.w	r8, #0
    69de:	d02b      	beq.n	6a38 <log_output_msg_process+0xa4>
		postfix_print(log_output, flags, level);
    69e0:	4642      	mov	r2, r8
    69e2:	4639      	mov	r1, r7
    69e4:	4628      	mov	r0, r5
    69e6:	f7ff ff49 	bl	687c <postfix_print>
    69ea:	e025      	b.n	6a38 <log_output_msg_process+0xa4>
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    69ec:	46c1      	mov	r9, r8
    69ee:	e7eb      	b.n	69c8 <log_output_msg_process+0x34>
	} else if (raw_string) {
    69f0:	f1b8 0f00 	cmp.w	r8, #0
    69f4:	d126      	bne.n	6a44 <log_output_msg_process+0xb0>
	size_t offset = 0;
    69f6:	4627      	mov	r7, r4
		length = log_output->size;
    69f8:	68eb      	ldr	r3, [r5, #12]
    69fa:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
    69fc:	aa06      	add	r2, sp, #24
    69fe:	463b      	mov	r3, r7
    6a00:	68a9      	ldr	r1, [r5, #8]
    6a02:	4630      	mov	r0, r6
    6a04:	f017 feae 	bl	1e764 <log_msg_hexdump_data_get>
		log_output->control_block->offset = length;
    6a08:	9a06      	ldr	r2, [sp, #24]
    6a0a:	686b      	ldr	r3, [r5, #4]
    6a0c:	601a      	str	r2, [r3, #0]
		if (length != 0) {
    6a0e:	b13a      	cbz	r2, 6a20 <log_output_msg_process+0x8c>
			eol = (log_output->buf[length - 1] == '\n');
    6a10:	68ab      	ldr	r3, [r5, #8]
    6a12:	4413      	add	r3, r2
    6a14:	f813 4c01 	ldrb.w	r4, [r3, #-1]
    6a18:	f1a4 030a 	sub.w	r3, r4, #10
    6a1c:	425c      	negs	r4, r3
    6a1e:	415c      	adcs	r4, r3
		log_output_flush(log_output);
    6a20:	4628      	mov	r0, r5
    6a22:	f018 f810 	bl	1ea46 <log_output_flush>
		offset += length;
    6a26:	9b06      	ldr	r3, [sp, #24]
    6a28:	441f      	add	r7, r3
	} while (length > 0);
    6a2a:	2b00      	cmp	r3, #0
    6a2c:	d1e4      	bne.n	69f8 <log_output_msg_process+0x64>
	if (eol) {
    6a2e:	b11c      	cbz	r4, 6a38 <log_output_msg_process+0xa4>
		print_formatted(log_output, "\r");
    6a30:	4913      	ldr	r1, [pc, #76]	; (6a80 <log_output_msg_process+0xec>)
    6a32:	4628      	mov	r0, r5
    6a34:	f7ff fe82 	bl	673c <print_formatted>
	}

	log_output_flush(log_output);
    6a38:	4628      	mov	r0, r5
    6a3a:	f018 f804 	bl	1ea46 <log_output_flush>
}
    6a3e:	b00a      	add	sp, #40	; 0x28
    6a40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	print_formatted(log_output, "%s", log_msg_str_get(msg));
    6a44:	4630      	mov	r0, r6
    6a46:	f017 fe37 	bl	1e6b8 <log_msg_str_get>
    6a4a:	490e      	ldr	r1, [pc, #56]	; (6a84 <log_output_msg_process+0xf0>)
    6a4c:	4602      	mov	r2, r0
    6a4e:	4628      	mov	r0, r5
    6a50:	f7ff fe74 	bl	673c <print_formatted>
		length = sizeof(buf);
    6a54:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    6a58:	aa05      	add	r2, sp, #20
    6a5a:	4623      	mov	r3, r4
    6a5c:	a906      	add	r1, sp, #24
    6a5e:	4630      	mov	r0, r6
		length = sizeof(buf);
    6a60:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    6a64:	f017 fe7e 	bl	1e764 <log_msg_hexdump_data_get>
		if (length) {
    6a68:	9a05      	ldr	r2, [sp, #20]
    6a6a:	2a00      	cmp	r2, #0
    6a6c:	d0b8      	beq.n	69e0 <log_output_msg_process+0x4c>
			hexdump_line_print(log_output, buf, length,
    6a6e:	464b      	mov	r3, r9
    6a70:	9700      	str	r7, [sp, #0]
    6a72:	a906      	add	r1, sp, #24
    6a74:	4628      	mov	r0, r5
    6a76:	f7ff ff1f 	bl	68b8 <hexdump_line_print>
			offset += length;
    6a7a:	9b05      	ldr	r3, [sp, #20]
    6a7c:	441c      	add	r4, r3
		length = sizeof(buf);
    6a7e:	e7eb      	b.n	6a58 <log_output_msg_process+0xc4>
    6a80:	000250c0 	.word	0x000250c0
    6a84:	00025dbc 	.word	0x00025dbc

00006a88 <log_output_dropped_process>:
	postfix_print(log_output, flags, level);
	log_output_flush(log_output);
}

void log_output_dropped_process(const struct log_output *log_output, uint32_t cnt)
{
    6a88:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = log_output->func;
	struct device *dev = (struct device *)log_output->control_block->ctx;
    6a8a:	e9d0 4300 	ldrd	r4, r3, [r0]
    6a8e:	685d      	ldr	r5, [r3, #4]

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    6a90:	4a0f      	ldr	r2, [pc, #60]	; (6ad0 <log_output_dropped_process+0x48>)
    6a92:	f242 730f 	movw	r3, #9999	; 0x270f
    6a96:	428b      	cmp	r3, r1
    6a98:	bf28      	it	cs
    6a9a:	460b      	movcs	r3, r1
    6a9c:	4668      	mov	r0, sp
    6a9e:	2105      	movs	r1, #5
    6aa0:	f017 fa60 	bl	1df64 <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1, dev);
    6aa4:	462b      	mov	r3, r5
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    6aa6:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1, dev);
    6aa8:	490a      	ldr	r1, [pc, #40]	; (6ad4 <log_output_dropped_process+0x4c>)
    6aaa:	4620      	mov	r0, r4
    6aac:	220b      	movs	r2, #11
    6aae:	f017 fe60 	bl	1e772 <buffer_write>
	buffer_write(outf, buf, len, dev);
    6ab2:	462b      	mov	r3, r5
    6ab4:	4632      	mov	r2, r6
    6ab6:	4669      	mov	r1, sp
    6ab8:	4620      	mov	r0, r4
    6aba:	f017 fe5a 	bl	1e772 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1, dev);
    6abe:	4906      	ldr	r1, [pc, #24]	; (6ad8 <log_output_dropped_process+0x50>)
    6ac0:	462b      	mov	r3, r5
    6ac2:	221b      	movs	r2, #27
    6ac4:	4620      	mov	r0, r4
    6ac6:	f017 fe54 	bl	1e772 <buffer_write>
}
    6aca:	b002      	add	sp, #8
    6acc:	bd70      	pop	{r4, r5, r6, pc}
    6ace:	bf00      	nop
    6ad0:	00026931 	.word	0x00026931
    6ad4:	000250fe 	.word	0x000250fe
    6ad8:	000250e2 	.word	0x000250e2

00006adc <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    6adc:	4a08      	ldr	r2, [pc, #32]	; (6b00 <log_output_timestamp_freq_set+0x24>)
{
    6ade:	b510      	push	{r4, lr}
	timestamp_div = 1U;
    6ae0:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    6ae2:	4c08      	ldr	r4, [pc, #32]	; (6b04 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    6ae4:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    6ae6:	2100      	movs	r1, #0
    6ae8:	42a0      	cmp	r0, r4
    6aea:	d804      	bhi.n	6af6 <log_output_timestamp_freq_set+0x1a>
    6aec:	b101      	cbz	r1, 6af0 <log_output_timestamp_freq_set+0x14>
    6aee:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    6af0:	4b05      	ldr	r3, [pc, #20]	; (6b08 <log_output_timestamp_freq_set+0x2c>)
    6af2:	6018      	str	r0, [r3, #0]
}
    6af4:	bd10      	pop	{r4, pc}
		frequency /= 2U;
    6af6:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    6af8:	005b      	lsls	r3, r3, #1
    6afa:	2101      	movs	r1, #1
    6afc:	e7f4      	b.n	6ae8 <log_output_timestamp_freq_set+0xc>
    6afe:	bf00      	nop
    6b00:	20001de0 	.word	0x20001de0
    6b04:	000f4240 	.word	0x000f4240
    6b08:	20001ddc 	.word	0x20001ddc

00006b0c <panic>:
 * @param log_output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const log_output)
{
	log_output_flush(log_output);
    6b0c:	4801      	ldr	r0, [pc, #4]	; (6b14 <panic+0x8>)
    6b0e:	f017 bf9a 	b.w	1ea46 <log_output_flush>
    6b12:	bf00      	nop
    6b14:	00023990 	.word	0x00023990

00006b18 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const log_output, uint32_t cnt)
{
	log_output_dropped_process(log_output, cnt);
    6b18:	4801      	ldr	r0, [pc, #4]	; (6b20 <dropped+0x8>)
    6b1a:	f7ff bfb5 	b.w	6a88 <log_output_dropped_process>
    6b1e:	bf00      	nop
    6b20:	00023990 	.word	0x00023990

00006b24 <log_backend_uart_init>:

	log_backend_std_put(&log_output, flag, msg);
}

static void log_backend_uart_init(void)
{
    6b24:	b508      	push	{r3, lr}
	if (z_syscall_trap()) {
		return (struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    6b26:	4803      	ldr	r0, [pc, #12]	; (6b34 <log_backend_uart_init+0x10>)
    6b28:	f015 ffb4 	bl	1ca94 <z_impl_device_get_binding>
 * @param ctx		User context.
 */
static inline void log_output_ctx_set(const struct log_output *log_output,
				      void *ctx)
{
	log_output->control_block->ctx = ctx;
    6b2c:	4b02      	ldr	r3, [pc, #8]	; (6b38 <log_backend_uart_init+0x14>)
    6b2e:	6058      	str	r0, [r3, #4]

	dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
	assert(dev);

	log_output_ctx_set(&log_output, dev);
}
    6b30:	bd08      	pop	{r3, pc}
    6b32:	bf00      	nop
    6b34:	0002510a 	.word	0x0002510a
    6b38:	20001dec 	.word	0x20001dec

00006b3c <put>:
{
    6b3c:	b510      	push	{r4, lr}
	log_msg_get(msg);
    6b3e:	4608      	mov	r0, r1
    6b40:	460c      	mov	r4, r1
    6b42:	f017 fd77 	bl	1e634 <log_msg_get>
	log_output_msg_process(log_output, msg, flags);
    6b46:	4805      	ldr	r0, [pc, #20]	; (6b5c <put+0x20>)
    6b48:	4621      	mov	r1, r4
    6b4a:	220f      	movs	r2, #15
    6b4c:	f7ff ff22 	bl	6994 <log_output_msg_process>
	log_msg_put(msg);
    6b50:	4620      	mov	r0, r4
}
    6b52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6b56:	f017 bd9c 	b.w	1e692 <log_msg_put>
    6b5a:	bf00      	nop
    6b5c:	00023990 	.word	0x00023990

00006b60 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    6b60:	4b01      	ldr	r3, [pc, #4]	; (6b68 <log_backend_rtt_init+0x8>)
    6b62:	2201      	movs	r2, #1
    6b64:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    6b66:	4770      	bx	lr
    6b68:	2000a2fa 	.word	0x2000a2fa

00006b6c <panic>:

static void panic(struct log_backend const *const backend)
{
	panic_mode = true;
    6b6c:	4b02      	ldr	r3, [pc, #8]	; (6b78 <panic+0xc>)
	log_output_flush(log_output);
    6b6e:	4803      	ldr	r0, [pc, #12]	; (6b7c <panic+0x10>)
    6b70:	2201      	movs	r2, #1
    6b72:	701a      	strb	r2, [r3, #0]
    6b74:	f017 bf67 	b.w	1ea46 <log_output_flush>
    6b78:	2000a2fb 	.word	0x2000a2fb
    6b7c:	000239b8 	.word	0x000239b8

00006b80 <dropped>:
	log_output_dropped_process(log_output, cnt);
    6b80:	4801      	ldr	r0, [pc, #4]	; (6b88 <dropped+0x8>)
    6b82:	f7ff bf81 	b.w	6a88 <log_output_dropped_process>
    6b86:	bf00      	nop
    6b88:	000239b8 	.word	0x000239b8

00006b8c <put>:
{
    6b8c:	b510      	push	{r4, lr}
	log_msg_get(msg);
    6b8e:	4608      	mov	r0, r1
    6b90:	460c      	mov	r4, r1
    6b92:	f017 fd4f 	bl	1e634 <log_msg_get>
	log_output_msg_process(log_output, msg, flags);
    6b96:	4805      	ldr	r0, [pc, #20]	; (6bac <put+0x20>)
    6b98:	4621      	mov	r1, r4
    6b9a:	220f      	movs	r2, #15
    6b9c:	f7ff fefa 	bl	6994 <log_output_msg_process>
	log_msg_put(msg);
    6ba0:	4620      	mov	r0, r4
}
    6ba2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6ba6:	f017 bd74 	b.w	1e692 <log_msg_put>
    6baa:	bf00      	nop
    6bac:	000239b8 	.word	0x000239b8

00006bb0 <on_failed_write.part.0>:
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
    6bb0:	4b05      	ldr	r3, [pc, #20]	; (6bc8 <on_failed_write.part.0+0x18>)
	} else if (is_sync_mode()) {
    6bb2:	781b      	ldrb	r3, [r3, #0]
    6bb4:	b11b      	cbz	r3, 6bbe <on_failed_write.part.0+0xe>
	z_impl_k_busy_wait(usec_to_wait);
    6bb6:	f241 3088 	movw	r0, #5000	; 0x1388
    6bba:	f01c ba2c 	b.w	23016 <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
    6bbe:	20a4      	movs	r0, #164	; 0xa4
    6bc0:	2100      	movs	r1, #0
    6bc2:	f016 bdaf 	b.w	1d724 <z_impl_k_sleep>
    6bc6:	bf00      	nop
    6bc8:	2000a2fb 	.word	0x2000a2fb

00006bcc <data_out_block_mode>:
{
    6bcc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
    6bd0:	f8df 9090 	ldr.w	r9, [pc, #144]	; 6c64 <data_out_block_mode+0x98>
	return z_impl_k_mutex_lock(mutex, timeout);
    6bd4:	f8df b090 	ldr.w	fp, [pc, #144]	; 6c68 <data_out_block_mode+0x9c>
{
    6bd8:	4607      	mov	r7, r0
    6bda:	460e      	mov	r6, r1
	int retry_cnt = CONFIG_LOG_BACKEND_RTT_RETRY_CNT;
    6bdc:	2404      	movs	r4, #4
    6bde:	46ca      	mov	sl, r9
		if (!is_sync_mode()) {
    6be0:	f899 3000 	ldrb.w	r3, [r9]
    6be4:	b933      	cbnz	r3, 6bf4 <data_out_block_mode+0x28>
    6be6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6bea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6bee:	4658      	mov	r0, fp
    6bf0:	f016 f97c 	bl	1ceec <z_impl_k_mutex_lock>
		ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    6bf4:	4632      	mov	r2, r6
    6bf6:	4639      	mov	r1, r7
    6bf8:	2000      	movs	r0, #0
    6bfa:	f000 f9eb 	bl	6fd4 <SEGGER_RTT_WriteSkipNoLock>
		if (!is_sync_mode()) {
    6bfe:	f89a 3000 	ldrb.w	r3, [sl]
		ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    6c02:	4680      	mov	r8, r0
		if (!is_sync_mode()) {
    6c04:	b913      	cbnz	r3, 6c0c <data_out_block_mode+0x40>
	return z_impl_k_mutex_unlock(mutex);
    6c06:	4658      	mov	r0, fp
    6c08:	f016 f9e8 	bl	1cfdc <z_impl_k_mutex_unlock>
		if (ret) {
    6c0c:	4d14      	ldr	r5, [pc, #80]	; (6c60 <data_out_block_mode+0x94>)
    6c0e:	f1b8 0f00 	cmp.w	r8, #0
    6c12:	d018      	beq.n	6c46 <data_out_block_mode+0x7a>
	host_present = true;
    6c14:	2301      	movs	r3, #1
    6c16:	702b      	strb	r3, [r5, #0]
	if (is_panic_mode()) {
    6c18:	f89a 3000 	ldrb.w	r3, [sl]
    6c1c:	b933      	cbnz	r3, 6c2c <data_out_block_mode+0x60>
}
    6c1e:	4630      	mov	r0, r6
    6c20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (retry_cnt == 0) {
    6c24:	b95c      	cbnz	r4, 6c3e <data_out_block_mode+0x72>
		host_present = false;
    6c26:	702c      	strb	r4, [r5, #0]
    6c28:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    6c2c:	2000      	movs	r0, #0
    6c2e:	f000 fa1d 	bl	706c <SEGGER_RTT_HasDataUp>
    6c32:	2800      	cmp	r0, #0
    6c34:	d0f3      	beq.n	6c1e <data_out_block_mode+0x52>
    6c36:	782b      	ldrb	r3, [r5, #0]
    6c38:	2b00      	cmp	r3, #0
    6c3a:	d1f3      	bne.n	6c24 <data_out_block_mode+0x58>
    6c3c:	e7ef      	b.n	6c1e <data_out_block_mode+0x52>
			on_failed_write(retry_cnt--);
    6c3e:	3c01      	subs	r4, #1
    6c40:	f7ff ffb6 	bl	6bb0 <on_failed_write.part.0>
    6c44:	e7f2      	b.n	6c2c <data_out_block_mode+0x60>
		} else if (host_present) {
    6c46:	782b      	ldrb	r3, [r5, #0]
    6c48:	b113      	cbz	r3, 6c50 <data_out_block_mode+0x84>
	if (retry_cnt == 0) {
    6c4a:	3c01      	subs	r4, #1
    6c4c:	d104      	bne.n	6c58 <data_out_block_mode+0x8c>
		host_present = false;
    6c4e:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
    6c50:	782b      	ldrb	r3, [r5, #0]
    6c52:	2b00      	cmp	r3, #0
    6c54:	d1c4      	bne.n	6be0 <data_out_block_mode+0x14>
    6c56:	e7e2      	b.n	6c1e <data_out_block_mode+0x52>
    6c58:	f7ff ffaa 	bl	6bb0 <on_failed_write.part.0>
    6c5c:	e7f8      	b.n	6c50 <data_out_block_mode+0x84>
    6c5e:	bf00      	nop
    6c60:	2000a2fa 	.word	0x2000a2fa
    6c64:	2000a2fb 	.word	0x2000a2fb
    6c68:	20000834 	.word	0x20000834

00006c6c <console_out>:

static int console_out(int c)
{
#ifdef CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS

	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
    6c6c:	4b0a      	ldr	r3, [pc, #40]	; (6c98 <console_out+0x2c>)
{
    6c6e:	b570      	push	{r4, r5, r6, lr}
	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
    6c70:	b2c6      	uxtb	r6, r0
    6c72:	681b      	ldr	r3, [r3, #0]
{
    6c74:	4604      	mov	r4, r0
	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
    6c76:	4630      	mov	r0, r6
    6c78:	4798      	blx	r3

	if (handled_by_debug_server) {
    6c7a:	2801      	cmp	r0, #1
    6c7c:	d00a      	beq.n	6c94 <console_out+0x28>
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    6c7e:	2c0a      	cmp	r4, #10
    6c80:	4d06      	ldr	r5, [pc, #24]	; (6c9c <console_out+0x30>)
    6c82:	d103      	bne.n	6c8c <console_out+0x20>
		uart_poll_out(uart_console_dev, '\r');
    6c84:	6828      	ldr	r0, [r5, #0]
    6c86:	210d      	movs	r1, #13
    6c88:	f017 ff15 	bl	1eab6 <uart_poll_out>
	}
	uart_poll_out(uart_console_dev, c);
    6c8c:	6828      	ldr	r0, [r5, #0]
    6c8e:	4631      	mov	r1, r6
    6c90:	f017 ff11 	bl	1eab6 <uart_poll_out>

	return c;
}
    6c94:	4620      	mov	r0, r4
    6c96:	bd70      	pop	{r4, r5, r6, pc}
    6c98:	20000148 	.word	0x20000148
    6c9c:	20001e0c 	.word	0x20001e0c

00006ca0 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    6ca0:	b510      	push	{r4, lr}
    6ca2:	4807      	ldr	r0, [pc, #28]	; (6cc0 <uart_console_init+0x20>)
	__stdout_hook_install(console_out);
    6ca4:	4c07      	ldr	r4, [pc, #28]	; (6cc4 <uart_console_init+0x24>)
    6ca6:	f015 fef5 	bl	1ca94 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    6caa:	4b07      	ldr	r3, [pc, #28]	; (6cc8 <uart_console_init+0x28>)
    6cac:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
    6cae:	4620      	mov	r0, r4
    6cb0:	f001 f828 	bl	7d04 <__stdout_hook_install>
	__printk_hook_install(console_out);
    6cb4:	4620      	mov	r0, r4
    6cb6:	f7ff f8eb 	bl	5e90 <__printk_hook_install>
#endif

	uart_console_hook_install();

	return 0;
}
    6cba:	2000      	movs	r0, #0
    6cbc:	bd10      	pop	{r4, pc}
    6cbe:	bf00      	nop
    6cc0:	0002510a 	.word	0x0002510a
    6cc4:	00006c6d 	.word	0x00006c6d
    6cc8:	20001e0c 	.word	0x20001e0c

00006ccc <clkstarted_handle.constprop.0>:
DEVICE_AND_API_INIT(clock_nrf, DT_INST_LABEL(0),
		    clk_init, &data, &config, PRE_KERNEL_1,
		    CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &clock_control_api);

static void clkstarted_handle(struct device *dev,
    6ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			      enum clock_control_nrf_type type)
{
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    6cce:	4e12      	ldr	r6, [pc, #72]	; (6d18 <clkstarted_handle.constprop.0+0x4c>)
    6cd0:	68f3      	ldr	r3, [r6, #12]
	struct clock_control_async_data *async_data;

	DBG(dev, type, "Clock started");
	sub_data->started = true;
    6cd2:	240c      	movs	r4, #12
    6cd4:	fb04 3400 	mla	r4, r4, r0, r3
    6cd8:	2301      	movs	r3, #1
static void clkstarted_handle(struct device *dev,
    6cda:	4605      	mov	r5, r0
	sub_data->started = true;
    6cdc:	7263      	strb	r3, [r4, #9]
	__asm__ volatile(
    6cde:	f04f 0320 	mov.w	r3, #32
    6ce2:	f3ef 8111 	mrs	r1, BASEPRI
    6ce6:	f383 8811 	msr	BASEPRI, r3
    6cea:	f3bf 8f6f 	isb	sy
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_slist_is_empty(sys_slist_t *list);

Z_GENLIST_IS_EMPTY(slist)
    6cee:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    6cf0:	b12b      	cbz	r3, 6cfe <clkstarted_handle.constprop.0+0x32>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    6cf2:	6860      	ldr	r0, [r4, #4]
    6cf4:	681a      	ldr	r2, [r3, #0]
	list->head = node;
    6cf6:	6022      	str	r2, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    6cf8:	4283      	cmp	r3, r0
	list->tail = node;
    6cfa:	bf08      	it	eq
    6cfc:	6062      	streq	r2, [r4, #4]
	__asm__ volatile(
    6cfe:	f381 8811 	msr	BASEPRI, r1
    6d02:	f3bf 8f6f 	isb	sy

	while ((async_data = list_get(&sub_data->list)) != NULL) {
    6d06:	b903      	cbnz	r3, 6d0a <clkstarted_handle.constprop.0+0x3e>
		async_data->cb(dev, (clock_control_subsys_t)type,
				async_data->user_data);
	}
}
    6d08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		async_data->cb(dev, (clock_control_subsys_t)type,
    6d0a:	e9d3 7201 	ldrd	r7, r2, [r3, #4]
    6d0e:	4629      	mov	r1, r5
    6d10:	4630      	mov	r0, r6
    6d12:	47b8      	blx	r7
    6d14:	e7e3      	b.n	6cde <clkstarted_handle.constprop.0+0x12>
    6d16:	bf00      	nop
    6d18:	20000748 	.word	0x20000748

00006d1c <nrf_power_clock_isr>:
#endif
}

NRF_STATIC_INLINE bool nrf_clock_event_check(NRF_CLOCK_Type const * p_reg, nrf_clock_event_t event)
{
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    6d1c:	4b15      	ldr	r3, [pc, #84]	; (6d74 <nrf_power_clock_isr+0x58>)
	}
#endif
}

void nrf_power_clock_isr(void *arg)
{
    6d1e:	b507      	push	{r0, r1, r2, lr}
    6d20:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
    6d22:	b182      	cbz	r2, 6d46 <nrf_power_clock_isr+0x2a>
    return p_reg->INTENSET & mask;
    6d24:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    6d28:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
    6d2c:	07d1      	lsls	r1, r2, #31
    6d2e:	d50a      	bpl.n	6d46 <nrf_power_clock_isr+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6d30:	2200      	movs	r2, #0
    6d32:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    6d34:	681b      	ldr	r3, [r3, #0]
    6d36:	9300      	str	r3, [sp, #0]
    (void)dummy;
    6d38:	9b00      	ldr	r3, [sp, #0]
	struct device *dev = DEVICE_GET(clock_nrf);

	if (clock_event_check_and_clean(NRF_CLOCK_EVENT_HFCLKSTARTED,
					NRF_CLOCK_INT_HF_STARTED_MASK)) {
		struct nrf_clock_control_sub_data *data =
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    6d3a:	4b0f      	ldr	r3, [pc, #60]	; (6d78 <nrf_power_clock_isr+0x5c>)

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (!data->started) {
    6d3c:	68db      	ldr	r3, [r3, #12]
    6d3e:	7a58      	ldrb	r0, [r3, #9]
    6d40:	b908      	cbnz	r0, 6d46 <nrf_power_clock_isr+0x2a>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    6d42:	f7ff ffc3 	bl	6ccc <clkstarted_handle.constprop.0>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    6d46:	4b0d      	ldr	r3, [pc, #52]	; (6d7c <nrf_power_clock_isr+0x60>)
    6d48:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
    6d4a:	b182      	cbz	r2, 6d6e <nrf_power_clock_isr+0x52>
    return p_reg->INTENSET & mask;
    6d4c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    6d50:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
    6d54:	0792      	lsls	r2, r2, #30
    6d56:	d50a      	bpl.n	6d6e <nrf_power_clock_isr+0x52>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6d58:	2200      	movs	r2, #0
    6d5a:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    6d5c:	681b      	ldr	r3, [r3, #0]
    6d5e:	9301      	str	r3, [sp, #4]
    (void)dummy;
    6d60:	9b01      	ldr	r3, [sp, #4]
					NRF_CLOCK_INT_LF_STARTED_MASK)) {
		if (IS_ENABLED(
			CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
			z_nrf_clock_calibration_lfclk_started();
		}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    6d62:	2001      	movs	r0, #1
	usb_power_isr();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
		z_nrf_clock_calibration_isr();
	}
}
    6d64:	b003      	add	sp, #12
    6d66:	f85d eb04 	ldr.w	lr, [sp], #4
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    6d6a:	f7ff bfaf 	b.w	6ccc <clkstarted_handle.constprop.0>
}
    6d6e:	b003      	add	sp, #12
    6d70:	f85d fb04 	ldr.w	pc, [sp], #4
    6d74:	40000100 	.word	0x40000100
    6d78:	20000748 	.word	0x20000748
    6d7c:	40000104 	.word	0x40000104

00006d80 <handle_next_tick_case>:
 * counter progresses during that time it means that 1 tick elapsed and
 * interrupt is set pending.
 */
static void handle_next_tick_case(uint32_t t)
{
	set_comparator(t + 2);
    6d80:	1c82      	adds	r2, r0, #2

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    6d82:	4b08      	ldr	r3, [pc, #32]	; (6da4 <handle_next_tick_case+0x24>)
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    6d84:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    6d88:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
#endif
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    6d8c:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	while (t != counter()) {
    6d90:	4290      	cmp	r0, r2
    6d92:	d100      	bne.n	6d96 <handle_next_tick_case+0x16>
		 * generated. Trigger interrupt.
		 */
		t = counter();
		set_comparator(t + 2);
	}
}
    6d94:	4770      	bx	lr
    6d96:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		set_comparator(t + 2);
    6d9a:	1c82      	adds	r2, r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    6d9c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    6da0:	e7f2      	b.n	6d88 <handle_next_tick_case+0x8>
    6da2:	bf00      	nop
    6da4:	40011000 	.word	0x40011000

00006da8 <event_clear>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    6da8:	4b04      	ldr	r3, [pc, #16]	; (6dbc <event_clear+0x14>)
    6daa:	2200      	movs	r2, #0
{
    6dac:	b082      	sub	sp, #8
    6dae:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    6db0:	681b      	ldr	r3, [r3, #0]
    6db2:	9301      	str	r3, [sp, #4]
    (void)dummy;
    6db4:	9b01      	ldr	r3, [sp, #4]
}
    6db6:	b002      	add	sp, #8
    6db8:	4770      	bx	lr
    6dba:	bf00      	nop
    6dbc:	40011140 	.word	0x40011140

00006dc0 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(void *arg)
{
    6dc0:	b508      	push	{r3, lr}
	ARG_UNUSED(arg);
	event_clear();
    6dc2:	f7ff fff1 	bl	6da8 <event_clear>
    return p_reg->CC[ch];
    6dc6:	4b07      	ldr	r3, [pc, #28]	; (6de4 <rtc_nrf_isr+0x24>)

	uint32_t t = get_comparator();
	uint32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
    6dc8:	4a07      	ldr	r2, [pc, #28]	; (6de8 <rtc_nrf_isr+0x28>)
    6dca:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
    6dce:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    6dd0:	1ac0      	subs	r0, r0, r3
    6dd2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    6dd6:	4403      	add	r3, r0
    6dd8:	6013      	str	r3, [r2, #0]
		 */
		set_absolute_ticks(last_count + CYC_PER_TICK);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : (dticks > 0));
}
    6dda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : (dticks > 0));
    6dde:	f016 bf0b 	b.w	1dbf8 <z_clock_announce>
    6de2:	bf00      	nop
    6de4:	40011000 	.word	0x40011000
    6de8:	20001e28 	.word	0x20001e28

00006dec <z_clock_driver_init>:

int z_clock_driver_init(struct device *device)
{
    6dec:	b538      	push	{r3, r4, r5, lr}
    6dee:	4814      	ldr	r0, [pc, #80]	; (6e40 <z_clock_driver_init+0x54>)
    6df0:	f015 fe50 	bl	1ca94 <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_LABEL(DT_INST(0, nordic_nrf_clock)));
	if (!clock) {
    6df4:	b300      	cbz	r0, 6e38 <z_clock_driver_init+0x4c>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
    6df6:	6883      	ldr	r3, [r0, #8]
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
    6df8:	4d12      	ldr	r5, [pc, #72]	; (6e44 <z_clock_driver_init+0x58>)
    6dfa:	681b      	ldr	r3, [r3, #0]
    6dfc:	2101      	movs	r1, #1
    6dfe:	2400      	movs	r4, #0
    6e00:	4798      	blx	r3
    6e02:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508

	clock_control_on(clock, CLOCK_CONTROL_NRF_SUBSYS_LF);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	event_clear();
    6e06:	f7ff ffcf 	bl	6da8 <event_clear>
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6e0a:	4b0f      	ldr	r3, [pc, #60]	; (6e48 <z_clock_driver_init+0x5c>)
    6e0c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    6e10:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    p_reg->INTENSET = mask;
    6e14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    6e18:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
	NVIC_ClearPendingIRQ(RTC_IRQn);
	int_enable();

	IRQ_CONNECT(RTC_IRQn, 1, rtc_nrf_isr, 0, 0);
    6e1c:	4622      	mov	r2, r4
    6e1e:	2101      	movs	r1, #1
    6e20:	2011      	movs	r0, #17
    6e22:	f000 fb3f 	bl	74a4 <z_arm_irq_priority_set>
	irq_enable(RTC_IRQn);
    6e26:	2011      	movs	r0, #17
    6e28:	f000 fb0a 	bl	7440 <arch_irq_enable>
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    6e2c:	4a07      	ldr	r2, [pc, #28]	; (6e4c <z_clock_driver_init+0x60>)
    6e2e:	2301      	movs	r3, #1
    6e30:	6013      	str	r3, [r2, #0]

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	return 0;
    6e32:	4620      	mov	r0, r4
    6e34:	602b      	str	r3, [r5, #0]
}
    6e36:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
    6e38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6e3c:	e7fb      	b.n	6e36 <z_clock_driver_init+0x4a>
    6e3e:	bf00      	nop
    6e40:	00025138 	.word	0x00025138
    6e44:	40011000 	.word	0x40011000
    6e48:	e000e100 	.word	0xe000e100
    6e4c:	40011008 	.word	0x40011008

00006e50 <z_clock_set_timeout>:

void z_clock_set_timeout(int32_t ticks, bool idle)
{
    6e50:	b570      	push	{r4, r5, r6, lr}
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
	ticks = MAX(MIN(ticks - 1, (int32_t)MAX_TICKS), 0);

	uint32_t unannounced = counter_sub(counter(), last_count);
    6e52:	4b2a      	ldr	r3, [pc, #168]	; (6efc <z_clock_set_timeout+0xac>)
     return p_reg->COUNTER;
    6e54:	4c2a      	ldr	r4, [pc, #168]	; (6f00 <z_clock_set_timeout+0xb0>)
    6e56:	6819      	ldr	r1, [r3, #0]
    6e58:	f8d4 2504 	ldr.w	r2, [r4, #1284]	; 0x504
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    6e5c:	4d29      	ldr	r5, [pc, #164]	; (6f04 <z_clock_set_timeout+0xb4>)
	return (a - b) & COUNTER_MAX;
    6e5e:	1a52      	subs	r2, r2, r1
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    6e60:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    6e64:	bf08      	it	eq
    6e66:	4628      	moveq	r0, r5
	return (a - b) & COUNTER_MAX;
    6e68:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
    6e6c:	0212      	lsls	r2, r2, #8
    6e6e:	d434      	bmi.n	6eda <z_clock_set_timeout+0x8a>
	ticks = MAX(MIN(ticks - 1, (int32_t)MAX_TICKS), 0);
    6e70:	3801      	subs	r0, #1
    6e72:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    6e76:	42a8      	cmp	r0, r5
    6e78:	bfa8      	it	ge
    6e7a:	4628      	movge	r0, r5
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    6e7c:	3301      	adds	r3, #1
    p_reg->INTENCLR = mask;
    6e7e:	f44f 3680 	mov.w	r6, #65536	; 0x10000
    6e82:	4418      	add	r0, r3
    6e84:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
    6e88:	42a8      	cmp	r0, r5
    6e8a:	bf94      	ite	ls
    6e8c:	180d      	addls	r5, r1, r0
    6e8e:	194d      	addhi	r5, r1, r5
     return p_reg->COUNTER;
    6e90:	f8d4 0504 	ldr.w	r0, [r4, #1284]	; 0x504
    return p_reg->CC[ch];
    6e94:	f8d4 1540 	ldr.w	r1, [r4, #1344]	; 0x540
	event_clear();
    6e98:	f7ff ff86 	bl	6da8 <event_clear>
	return (a - b) & COUNTER_MAX;
    6e9c:	1a09      	subs	r1, r1, r0
    6e9e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    6ea2:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
	if (counter_sub(prev_val, now) == 1) {
    6ea6:	2901      	cmp	r1, #1
    p_reg->CC[ch] = cc_val;
    6ea8:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    6eac:	f8c4 6344 	str.w	r6, [r4, #836]	; 0x344
    6eb0:	d104      	bne.n	6ebc <z_clock_set_timeout+0x6c>
	z_impl_k_busy_wait(usec_to_wait);
    6eb2:	200f      	movs	r0, #15
    6eb4:	f01c f8af 	bl	23016 <z_impl_k_busy_wait>
		event_clear();
    6eb8:	f7ff ff76 	bl	6da8 <event_clear>
    6ebc:	4b12      	ldr	r3, [pc, #72]	; (6f08 <z_clock_set_timeout+0xb8>)
    6ebe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    6ec2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
     return p_reg->COUNTER;
    6ec6:	f8d4 0504 	ldr.w	r0, [r4, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    6eca:	1a2b      	subs	r3, r5, r0
    6ecc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	if (diff == 1) {
    6ed0:	2b01      	cmp	r3, #1
    6ed2:	d104      	bne.n	6ede <z_clock_set_timeout+0x8e>
		handle_next_tick_case(t);
    6ed4:	f7ff ff54 	bl	6d80 <handle_next_tick_case>
    6ed8:	e00b      	b.n	6ef2 <z_clock_set_timeout+0xa2>
		ticks = 0;
    6eda:	2000      	movs	r0, #0
    6edc:	e7ce      	b.n	6e7c <z_clock_set_timeout+0x2c>
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    6ede:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    6ee2:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
     return p_reg->COUNTER;
    6ee6:	f8d4 0504 	ldr.w	r0, [r4, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    6eea:	1a2d      	subs	r5, r5, r0
    6eec:	3d02      	subs	r5, #2
	if (diff > MAX_TICKS) {
    6eee:	022b      	lsls	r3, r5, #8
    6ef0:	d4f0      	bmi.n	6ed4 <z_clock_set_timeout+0x84>
    p_reg->INTENSET = mask;
    6ef2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    6ef6:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
	set_protected_absolute_ticks(cyc);
}
    6efa:	bd70      	pop	{r4, r5, r6, pc}
    6efc:	20001e28 	.word	0x20001e28
    6f00:	40011000 	.word	0x40011000
    6f04:	007fffff 	.word	0x007fffff
    6f08:	e000e100 	.word	0xe000e100

00006f0c <z_clock_elapsed>:
	__asm__ volatile(
    6f0c:	f04f 0220 	mov.w	r2, #32
    6f10:	f3ef 8311 	mrs	r3, BASEPRI
    6f14:	f382 8811 	msr	BASEPRI, r2
    6f18:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
    6f1c:	4a06      	ldr	r2, [pc, #24]	; (6f38 <z_clock_elapsed+0x2c>)
    6f1e:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    6f22:	4a06      	ldr	r2, [pc, #24]	; (6f3c <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
    6f24:	6812      	ldr	r2, [r2, #0]
    6f26:	1a80      	subs	r0, r0, r2
    6f28:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
    6f2c:	f383 8811 	msr	BASEPRI, r3
    6f30:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    6f34:	4770      	bx	lr
    6f36:	bf00      	nop
    6f38:	40011000 	.word	0x40011000
    6f3c:	20001e28 	.word	0x20001e28

00006f40 <z_timer_cycle_get_32>:
	__asm__ volatile(
    6f40:	f04f 0320 	mov.w	r3, #32
    6f44:	f3ef 8211 	mrs	r2, BASEPRI
    6f48:	f383 8811 	msr	BASEPRI, r3
    6f4c:	f3bf 8f6f 	isb	sy

uint32_t z_timer_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
    6f50:	4906      	ldr	r1, [pc, #24]	; (6f6c <z_timer_cycle_get_32+0x2c>)
    6f52:	4b07      	ldr	r3, [pc, #28]	; (6f70 <z_timer_cycle_get_32+0x30>)
    6f54:	6808      	ldr	r0, [r1, #0]
    6f56:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
    6f5a:	f382 8811 	msr	BASEPRI, r2
    6f5e:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
    6f62:	1a1b      	subs	r3, r3, r0
    6f64:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
    6f68:	4418      	add	r0, r3
    6f6a:	4770      	bx	lr
    6f6c:	20001e28 	.word	0x20001e28
    6f70:	40011000 	.word	0x40011000

00006f74 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
    6f74:	b510      	push	{r4, lr}
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    6f76:	4c11      	ldr	r4, [pc, #68]	; (6fbc <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    6f78:	4a11      	ldr	r2, [pc, #68]	; (6fc0 <_DoInit+0x4c>)
    6f7a:	61a2      	str	r2, [r4, #24]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    6f7c:	2303      	movs	r3, #3
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    6f7e:	e9c4 3304 	strd	r3, r3, [r4, #16]
  p->aUp[0].pBuffer       = _acUpBuffer;
    6f82:	4b10      	ldr	r3, [pc, #64]	; (6fc4 <_DoInit+0x50>)
    6f84:	61e3      	str	r3, [r4, #28]
  p->aUp[0].WrOff         = 0u;
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    6f86:	6622      	str	r2, [r4, #96]	; 0x60
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    6f88:	f44f 6380 	mov.w	r3, #1024	; 0x400
  p->aDown[0].pBuffer       = _acDownBuffer;
    6f8c:	4a0e      	ldr	r2, [pc, #56]	; (6fc8 <_DoInit+0x54>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
    6f8e:	490f      	ldr	r1, [pc, #60]	; (6fcc <_DoInit+0x58>)
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    6f90:	6223      	str	r3, [r4, #32]
  p->aDown[0].pBuffer       = _acDownBuffer;
    6f92:	6662      	str	r2, [r4, #100]	; 0x64
  p->aUp[0].RdOff         = 0u;
    6f94:	2300      	movs	r3, #0
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    6f96:	2210      	movs	r2, #16
  strcpy(&p->acID[7], "RTT");
    6f98:	1de0      	adds	r0, r4, #7
  p->aUp[0].RdOff         = 0u;
    6f9a:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    6f9c:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    6f9e:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].RdOff         = 0u;
    6fa0:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    6fa2:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    6fa4:	6763      	str	r3, [r4, #116]	; 0x74
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    6fa6:	66a2      	str	r2, [r4, #104]	; 0x68
  strcpy(&p->acID[7], "RTT");
    6fa8:	f018 ff21 	bl	1fdee <strcpy>
  strcpy(&p->acID[0], "SEGGER");
    6fac:	4908      	ldr	r1, [pc, #32]	; (6fd0 <_DoInit+0x5c>)
    6fae:	4620      	mov	r0, r4
    6fb0:	f018 ff1d 	bl	1fdee <strcpy>
  p->acID[6] = ' ';
    6fb4:	2320      	movs	r3, #32
    6fb6:	71a3      	strb	r3, [r4, #6]
}
    6fb8:	bd10      	pop	{r4, pc}
    6fba:	bf00      	nop
    6fbc:	20001e2c 	.word	0x20001e2c
    6fc0:	00025162 	.word	0x00025162
    6fc4:	2000a30c 	.word	0x2000a30c
    6fc8:	2000a2fc 	.word	0x2000a2fc
    6fcc:	0002516b 	.word	0x0002516b
    6fd0:	0002516f 	.word	0x0002516f

00006fd4 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    6fd4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  RdOff = pRing->RdOff;
    6fd8:	4f23      	ldr	r7, [pc, #140]	; (7068 <SEGGER_RTT_WriteSkipNoLock+0x94>)
    6fda:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    6fde:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
    6fe0:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    6fe4:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
    6fe6:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    6fe8:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    6fea:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    6fec:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    6fee:	d834      	bhi.n	705a <SEGGER_RTT_WriteSkipNoLock+0x86>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    6ff0:	f8d2 a020 	ldr.w	sl, [r2, #32]
    6ff4:	ebaa 0905 	sub.w	r9, sl, r5
    6ff8:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {                            // Case 1)?
    6ffc:	4294      	cmp	r4, r2
    6ffe:	d811      	bhi.n	7024 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
    7000:	f04f 0918 	mov.w	r9, #24
    7004:	fb06 9309 	mla	r3, r6, r9, r9
    7008:	443b      	add	r3, r7
    700a:	4622      	mov	r2, r4
    700c:	6858      	ldr	r0, [r3, #4]
    700e:	4641      	mov	r1, r8
    7010:	4428      	add	r0, r5
    7012:	f018 ff2c 	bl	1fe6e <memcpy>
      pRing->WrOff = WrOff + NumBytes;
    7016:	fb09 7606 	mla	r6, r9, r6, r7
    701a:	442c      	add	r4, r5
      // Therefore, check if 2nd memcpy is necessary at all
      //
      if (NumBytes) {
        memcpy(pRing->pBuffer, pData + Rem, NumBytes);
      }
      pRing->WrOff = NumBytes;
    701c:	6274      	str	r4, [r6, #36]	; 0x24
      return 1;
    701e:	2001      	movs	r0, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
    7020:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
    7024:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    7026:	429c      	cmp	r4, r3
    7028:	d81b      	bhi.n	7062 <SEGGER_RTT_WriteSkipNoLock+0x8e>
      memcpy(pRing->pBuffer + WrOff, pData, Rem);       // Copy 1st chunk
    702a:	fb00 bb0b 	mla	fp, r0, fp, fp
    702e:	44bb      	add	fp, r7
    7030:	464a      	mov	r2, r9
    7032:	f8db 0004 	ldr.w	r0, [fp, #4]
    7036:	442c      	add	r4, r5
    7038:	4428      	add	r0, r5
    703a:	f018 ff18 	bl	1fe6e <memcpy>
      if (NumBytes) {
    703e:	ebb4 040a 	subs.w	r4, r4, sl
    7042:	d006      	beq.n	7052 <SEGGER_RTT_WriteSkipNoLock+0x7e>
        memcpy(pRing->pBuffer, pData + Rem, NumBytes);
    7044:	f8db 0004 	ldr.w	r0, [fp, #4]
    7048:	4622      	mov	r2, r4
    704a:	eb08 0109 	add.w	r1, r8, r9
    704e:	f018 ff0e 	bl	1fe6e <memcpy>
      pRing->WrOff = NumBytes;
    7052:	2018      	movs	r0, #24
    7054:	fb00 7606 	mla	r6, r0, r6, r7
    7058:	e7e0      	b.n	701c <SEGGER_RTT_WriteSkipNoLock+0x48>
    Avail = RdOff - WrOff - 1u;
    705a:	3b01      	subs	r3, #1
    705c:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    705e:	42a3      	cmp	r3, r4
    7060:	d2ce      	bcs.n	7000 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
    7062:	2000      	movs	r0, #0
    7064:	e7dc      	b.n	7020 <SEGGER_RTT_WriteSkipNoLock+0x4c>
    7066:	bf00      	nop
    7068:	20001e2c 	.word	0x20001e2c

0000706c <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  v = pRing->RdOff;
    706c:	4b03      	ldr	r3, [pc, #12]	; (707c <SEGGER_RTT_HasDataUp+0x10>)
    706e:	2218      	movs	r2, #24
    7070:	fb02 3300 	mla	r3, r2, r0, r3
    7074:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
    7076:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    7078:	1a80      	subs	r0, r0, r2
    707a:	4770      	bx	lr
    707c:	20001e2c 	.word	0x20001e2c

00007080 <uECC_get_rng>:
}

uECC_RNG_Function uECC_get_rng(void)
{
	return g_rng_function;
}
    7080:	4b01      	ldr	r3, [pc, #4]	; (7088 <uECC_get_rng+0x8>)
    7082:	6818      	ldr	r0, [r3, #0]
    7084:	4770      	bx	lr
    7086:	bf00      	nop
    7088:	2000014c 	.word	0x2000014c

0000708c <vli_mmod_fast_secp256r1>:
{
	return &curve_secp256r1;
}

void vli_mmod_fast_secp256r1(unsigned int *result, unsigned int*product)
{
    708c:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int tmp[NUM_ECC_WORDS];
	int carry;

	/* t */
	uECC_vli_set(result, product, NUM_ECC_WORDS);
    708e:	2208      	movs	r2, #8
{
    7090:	b089      	sub	sp, #36	; 0x24
    7092:	460c      	mov	r4, r1
    7094:	4606      	mov	r6, r0
	uECC_vli_set(result, product, NUM_ECC_WORDS);
    7096:	f017 ff96 	bl	1efc6 <uECC_vli_set>

	/* s1 */
	tmp[0] = tmp[1] = tmp[2] = 0;
	tmp[3] = product[11];
    709a:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    709c:	9303      	str	r3, [sp, #12]
	tmp[4] = product[12];
    709e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    70a0:	9304      	str	r3, [sp, #16]
	tmp[5] = product[13];
    70a2:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    70a4:	9305      	str	r3, [sp, #20]
	tmp[6] = product[14];
    70a6:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    70a8:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
    70aa:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    70ac:	9307      	str	r3, [sp, #28]
	tmp[0] = tmp[1] = tmp[2] = 0;
    70ae:	2700      	movs	r7, #0
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    70b0:	2308      	movs	r3, #8
    70b2:	466a      	mov	r2, sp
    70b4:	4669      	mov	r1, sp
    70b6:	4668      	mov	r0, sp
	tmp[0] = tmp[1] = tmp[2] = 0;
    70b8:	e9cd 7701 	strd	r7, r7, [sp, #4]
    70bc:	9700      	str	r7, [sp, #0]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    70be:	f017 fe84 	bl	1edca <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    70c2:	2308      	movs	r3, #8
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    70c4:	4605      	mov	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    70c6:	466a      	mov	r2, sp
    70c8:	4631      	mov	r1, r6
    70ca:	4630      	mov	r0, r6
    70cc:	f017 fe7d 	bl	1edca <uECC_vli_add>

	/* s2 */
	tmp[3] = product[12];
    70d0:	6b23      	ldr	r3, [r4, #48]	; 0x30
    70d2:	9303      	str	r3, [sp, #12]
	tmp[4] = product[13];
    70d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
    70d6:	9304      	str	r3, [sp, #16]
	tmp[5] = product[14];
    70d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    70da:	9305      	str	r3, [sp, #20]
	tmp[6] = product[15];
    70dc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    70de:	4405      	add	r5, r0
	tmp[7] = 0;
    70e0:	e9cd 3706 	strd	r3, r7, [sp, #24]
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    70e4:	466a      	mov	r2, sp
    70e6:	2308      	movs	r3, #8
    70e8:	4669      	mov	r1, sp
    70ea:	4668      	mov	r0, sp
    70ec:	f017 fe6d 	bl	1edca <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    70f0:	4631      	mov	r1, r6
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    70f2:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    70f4:	2308      	movs	r3, #8
    70f6:	466a      	mov	r2, sp
    70f8:	4630      	mov	r0, r6
    70fa:	f017 fe66 	bl	1edca <uECC_vli_add>

	/* s3 */
	tmp[0] = product[8];
    70fe:	6a23      	ldr	r3, [r4, #32]
    7100:	9300      	str	r3, [sp, #0]
	tmp[1] = product[9];
    7102:	6a63      	ldr	r3, [r4, #36]	; 0x24
    7104:	9301      	str	r3, [sp, #4]
	tmp[2] = product[10];
    7106:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    7108:	9302      	str	r3, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[14];
    710a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    710c:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
    710e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    7110:	9307      	str	r3, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    7112:	4405      	add	r5, r0
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    7114:	2308      	movs	r3, #8
    7116:	466a      	mov	r2, sp
    7118:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
    711a:	e9cd 7704 	strd	r7, r7, [sp, #16]
    711e:	9703      	str	r7, [sp, #12]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    7120:	f017 fe53 	bl	1edca <uECC_vli_add>

	/* s4 */
	tmp[0] = product[9];
    7124:	6a63      	ldr	r3, [r4, #36]	; 0x24
    7126:	9300      	str	r3, [sp, #0]
	tmp[1] = product[10];
    7128:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[2] = product[11];
	tmp[3] = product[13];
	tmp[4] = product[14];
    712a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
	tmp[1] = product[10];
    712c:	9301      	str	r3, [sp, #4]
	tmp[2] = product[11];
    712e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    7130:	9302      	str	r3, [sp, #8]
	tmp[4] = product[14];
    7132:	9204      	str	r2, [sp, #16]
	tmp[3] = product[13];
    7134:	6b63      	ldr	r3, [r4, #52]	; 0x34
	tmp[5] = product[15];
    7136:	6be2      	ldr	r2, [r4, #60]	; 0x3c
	tmp[3] = product[13];
    7138:	9303      	str	r3, [sp, #12]
	tmp[6] = product[13];
    713a:	e9cd 2305 	strd	r2, r3, [sp, #20]
	tmp[7] = product[8];
    713e:	6a23      	ldr	r3, [r4, #32]
    7140:	9307      	str	r3, [sp, #28]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    7142:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    7144:	2308      	movs	r3, #8
    7146:	466a      	mov	r2, sp
    7148:	4630      	mov	r0, r6
    714a:	f017 fe3e 	bl	1edca <uECC_vli_add>

	/* d1 */
	tmp[0] = product[11];
    714e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    7150:	9300      	str	r3, [sp, #0]
	tmp[1] = product[12];
    7152:	6b23      	ldr	r3, [r4, #48]	; 0x30
    7154:	9301      	str	r3, [sp, #4]
	tmp[2] = product[13];
    7156:	6b63      	ldr	r3, [r4, #52]	; 0x34
    7158:	9302      	str	r3, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[8];
    715a:	6a23      	ldr	r3, [r4, #32]
    715c:	9306      	str	r3, [sp, #24]
	tmp[7] = product[10];
    715e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    7160:	9307      	str	r3, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    7162:	4405      	add	r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    7164:	2308      	movs	r3, #8
    7166:	466a      	mov	r2, sp
    7168:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
    716a:	e9cd 7704 	strd	r7, r7, [sp, #16]
    716e:	9703      	str	r7, [sp, #12]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    7170:	f017 ff5f 	bl	1f032 <uECC_vli_sub>

	/* d2 */
	tmp[0] = product[12];
    7174:	6b23      	ldr	r3, [r4, #48]	; 0x30
    7176:	9300      	str	r3, [sp, #0]
	tmp[1] = product[13];
    7178:	6b63      	ldr	r3, [r4, #52]	; 0x34
    717a:	9301      	str	r3, [sp, #4]
	tmp[2] = product[14];
    717c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    717e:	9302      	str	r3, [sp, #8]
	tmp[3] = product[15];
    7180:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    7182:	9303      	str	r3, [sp, #12]
	tmp[4] = tmp[5] = 0;
	tmp[6] = product[9];
    7184:	6a63      	ldr	r3, [r4, #36]	; 0x24
    7186:	9306      	str	r3, [sp, #24]
	tmp[7] = product[11];
    7188:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    718a:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    718c:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    718e:	2308      	movs	r3, #8
    7190:	466a      	mov	r2, sp
    7192:	4630      	mov	r0, r6
	tmp[4] = tmp[5] = 0;
    7194:	e9cd 7704 	strd	r7, r7, [sp, #16]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    7198:	f017 ff4b 	bl	1f032 <uECC_vli_sub>

	/* d3 */
	tmp[0] = product[13];
    719c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    719e:	9300      	str	r3, [sp, #0]
	tmp[1] = product[14];
    71a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    71a2:	9301      	str	r3, [sp, #4]
	tmp[2] = product[15];
    71a4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    71a6:	9302      	str	r3, [sp, #8]
	tmp[3] = product[8];
    71a8:	6a23      	ldr	r3, [r4, #32]
    71aa:	9303      	str	r3, [sp, #12]
	tmp[4] = product[9];
    71ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
    71ae:	9304      	str	r3, [sp, #16]
	tmp[5] = product[10];
    71b0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[6] = 0;
    71b2:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[12];
    71b6:	6b23      	ldr	r3, [r4, #48]	; 0x30
    71b8:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    71ba:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    71bc:	2308      	movs	r3, #8
    71be:	466a      	mov	r2, sp
    71c0:	4630      	mov	r0, r6
    71c2:	f017 ff36 	bl	1f032 <uECC_vli_sub>

	/* d4 */
	tmp[0] = product[14];
    71c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    71c8:	9300      	str	r3, [sp, #0]
	tmp[1] = product[15];
    71ca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	tmp[2] = 0;
    71cc:	e9cd 3701 	strd	r3, r7, [sp, #4]
	tmp[3] = product[9];
    71d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    71d2:	9303      	str	r3, [sp, #12]
	tmp[4] = product[10];
    71d4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    71d6:	9304      	str	r3, [sp, #16]
	tmp[5] = product[11];
    71d8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	tmp[6] = 0;
    71da:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[13];
    71de:	6b63      	ldr	r3, [r4, #52]	; 0x34
    71e0:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    71e2:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    71e4:	2308      	movs	r3, #8
    71e6:	466a      	mov	r2, sp
    71e8:	4630      	mov	r0, r6
    71ea:	f017 ff22 	bl	1f032 <uECC_vli_sub>

	if (carry < 0) {
    71ee:	1a2d      	subs	r5, r5, r0
    71f0:	d410      	bmi.n	7214 <vli_mmod_fast_secp256r1+0x188>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
		}
		while (carry < 0);
	} else  {
		while (carry || 
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
    71f2:	4c0d      	ldr	r4, [pc, #52]	; (7228 <vli_mmod_fast_secp256r1+0x19c>)
		while (carry || 
    71f4:	b935      	cbnz	r5, 7204 <vli_mmod_fast_secp256r1+0x178>
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
    71f6:	2208      	movs	r2, #8
    71f8:	4631      	mov	r1, r6
    71fa:	4620      	mov	r0, r4
    71fc:	f017 feef 	bl	1efde <uECC_vli_cmp_unsafe>
		while (carry || 
    7200:	2801      	cmp	r0, #1
    7202:	d00f      	beq.n	7224 <vli_mmod_fast_secp256r1+0x198>
			carry -= uECC_vli_sub(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
    7204:	2308      	movs	r3, #8
    7206:	4622      	mov	r2, r4
    7208:	4631      	mov	r1, r6
    720a:	4630      	mov	r0, r6
    720c:	f017 ff11 	bl	1f032 <uECC_vli_sub>
    7210:	1a2d      	subs	r5, r5, r0
    7212:	e7ef      	b.n	71f4 <vli_mmod_fast_secp256r1+0x168>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
    7214:	4a04      	ldr	r2, [pc, #16]	; (7228 <vli_mmod_fast_secp256r1+0x19c>)
    7216:	2308      	movs	r3, #8
    7218:	4631      	mov	r1, r6
    721a:	4630      	mov	r0, r6
    721c:	f017 fdd5 	bl	1edca <uECC_vli_add>
		while (carry < 0);
    7220:	182d      	adds	r5, r5, r0
    7222:	d4f8      	bmi.n	7216 <vli_mmod_fast_secp256r1+0x18a>
		}
	}
}
    7224:	b009      	add	sp, #36	; 0x24
    7226:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7228:	000239f0 	.word	0x000239f0

0000722c <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
    722c:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
    722e:	4e26      	ldr	r6, [pc, #152]	; (72c8 <tc_aes128_set_encrypt_key+0x9c>)
{
    7230:	4607      	mov	r7, r0
    7232:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    7234:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
    7236:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    7238:	ad01      	add	r5, sp, #4
    723a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    723c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    723e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    7240:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    7244:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
    7248:	4638      	mov	r0, r7
    724a:	2f00      	cmp	r7, #0
    724c:	d038      	beq.n	72c0 <tc_aes128_set_encrypt_key+0x94>
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
    724e:	2c00      	cmp	r4, #0
    7250:	d038      	beq.n	72c4 <tc_aes128_set_encrypt_key+0x98>
    7252:	1f38      	subs	r0, r7, #4
    7254:	4621      	mov	r1, r4
    7256:	4602      	mov	r2, r0
    7258:	3410      	adds	r4, #16
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    725a:	784b      	ldrb	r3, [r1, #1]
    725c:	780d      	ldrb	r5, [r1, #0]
    725e:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    7260:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    7264:	78cd      	ldrb	r5, [r1, #3]
    7266:	432b      	orrs	r3, r5
    7268:	788d      	ldrb	r5, [r1, #2]
    726a:	3104      	adds	r1, #4
    726c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
    7270:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    7272:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    7276:	d1f0      	bne.n	725a <tc_aes128_set_encrypt_key+0x2e>
	}

	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
    7278:	4c14      	ldr	r4, [pc, #80]	; (72cc <tc_aes128_set_encrypt_key+0xa0>)
    727a:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
    727c:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    727e:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    7280:	d116      	bne.n	72b0 <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    7282:	f3c3 4207 	ubfx	r2, r3, #16, #8
    7286:	5ca5      	ldrb	r5, [r4, r2]
    7288:	0e1a      	lsrs	r2, r3, #24
    728a:	5ca2      	ldrb	r2, [r4, r2]
    728c:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    7290:	f3c3 2507 	ubfx	r5, r3, #8, #8
    7294:	b2db      	uxtb	r3, r3
    7296:	5d65      	ldrb	r5, [r4, r5]
    7298:	5ce3      	ldrb	r3, [r4, r3]
    729a:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    729e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    72a2:	ad0c      	add	r5, sp, #48	; 0x30
    72a4:	f021 0303 	bic.w	r3, r1, #3
    72a8:	442b      	add	r3, r5
    72aa:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    72ae:	4053      	eors	r3, r2
		}
		s->words[i] = s->words[i-Nk] ^ t;
    72b0:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    72b4:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    72b6:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    72b8:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    72ba:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    72bc:	d1de      	bne.n	727c <tc_aes128_set_encrypt_key+0x50>
	}

	return TC_CRYPTO_SUCCESS;
    72be:	2001      	movs	r0, #1
}
    72c0:	b00d      	add	sp, #52	; 0x34
    72c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    72c4:	4620      	mov	r0, r4
    72c6:	e7fb      	b.n	72c0 <tc_aes128_set_encrypt_key+0x94>
    72c8:	00023858 	.word	0x00023858
    72cc:	00025176 	.word	0x00025176

000072d0 <tc_aes_encrypt>:
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
	(void) _copy(s, sizeof(t), t, sizeof(t));
}

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
    72d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    72d4:	4615      	mov	r5, r2
    72d6:	b089      	sub	sp, #36	; 0x24
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
    72d8:	4606      	mov	r6, r0
    72da:	2800      	cmp	r0, #0
    72dc:	d058      	beq.n	7390 <tc_aes_encrypt+0xc0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
    72de:	2900      	cmp	r1, #0
    72e0:	d059      	beq.n	7396 <tc_aes_encrypt+0xc6>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
    72e2:	2a00      	cmp	r2, #0
    72e4:	d059      	beq.n	739a <tc_aes_encrypt+0xca>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
    72e6:	2310      	movs	r3, #16
    72e8:	460a      	mov	r2, r1
    72ea:	4668      	mov	r0, sp
    72ec:	4619      	mov	r1, r3
    72ee:	f017 fca8 	bl	1ec42 <_copy>
	add_round_key(state, s->words);
    72f2:	4629      	mov	r1, r5
    72f4:	4668      	mov	r0, sp
		s[i] = sbox[s[i]];
    72f6:	4c2a      	ldr	r4, [pc, #168]	; (73a0 <tc_aes_encrypt+0xd0>)
	add_round_key(state, s->words);
    72f8:	f018 fbad 	bl	1fa56 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
    72fc:	f105 0710 	add.w	r7, r5, #16
    7300:	46a1      	mov	r9, r4
    7302:	35a0      	adds	r5, #160	; 0xa0
	for (i = 0; i < (Nb * Nk); ++i) {
    7304:	46e8      	mov	r8, sp
{
    7306:	466a      	mov	r2, sp
    7308:	2310      	movs	r3, #16
		s[i] = sbox[s[i]];
    730a:	7811      	ldrb	r1, [r2, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    730c:	3b01      	subs	r3, #1
		s[i] = sbox[s[i]];
    730e:	5c61      	ldrb	r1, [r4, r1]
    7310:	f802 1b01 	strb.w	r1, [r2], #1
	for (i = 0; i < (Nb * Nk); ++i) {
    7314:	d1f9      	bne.n	730a <tc_aes_encrypt+0x3a>
		sub_bytes(state);
		shift_rows(state);
    7316:	4668      	mov	r0, sp
    7318:	f018 fbe2 	bl	1fae0 <shift_rows>
	mult_row_column(t, s);
    731c:	4669      	mov	r1, sp
    731e:	a804      	add	r0, sp, #16
    7320:	f018 fc17 	bl	1fb52 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
    7324:	a901      	add	r1, sp, #4
    7326:	a805      	add	r0, sp, #20
    7328:	f018 fc13 	bl	1fb52 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
    732c:	a902      	add	r1, sp, #8
    732e:	a806      	add	r0, sp, #24
    7330:	f018 fc0f 	bl	1fb52 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
    7334:	a903      	add	r1, sp, #12
    7336:	a807      	add	r0, sp, #28
    7338:	f018 fc0b 	bl	1fb52 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
    733c:	2310      	movs	r3, #16
    733e:	4619      	mov	r1, r3
    7340:	eb0d 0203 	add.w	r2, sp, r3
    7344:	4668      	mov	r0, sp
    7346:	f017 fc7c 	bl	1ec42 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
    734a:	4639      	mov	r1, r7
    734c:	4668      	mov	r0, sp
    734e:	3710      	adds	r7, #16
    7350:	f018 fb81 	bl	1fa56 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
    7354:	42af      	cmp	r7, r5
    7356:	d1d5      	bne.n	7304 <tc_aes_encrypt+0x34>
    7358:	2410      	movs	r4, #16
		s[i] = sbox[s[i]];
    735a:	f898 3000 	ldrb.w	r3, [r8]
	for (i = 0; i < (Nb * Nk); ++i) {
    735e:	3c01      	subs	r4, #1
		s[i] = sbox[s[i]];
    7360:	f819 3003 	ldrb.w	r3, [r9, r3]
    7364:	f808 3b01 	strb.w	r3, [r8], #1
	for (i = 0; i < (Nb * Nk); ++i) {
    7368:	d1f7      	bne.n	735a <tc_aes_encrypt+0x8a>
	}

	sub_bytes(state);
	shift_rows(state);
    736a:	4668      	mov	r0, sp
    736c:	f018 fbb8 	bl	1fae0 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
    7370:	4629      	mov	r1, r5
    7372:	4668      	mov	r0, sp
    7374:	f018 fb6f 	bl	1fa56 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
    7378:	2310      	movs	r3, #16
    737a:	4619      	mov	r1, r3
    737c:	466a      	mov	r2, sp
    737e:	4630      	mov	r0, r6
    7380:	f017 fc5f 	bl	1ec42 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
    7384:	4668      	mov	r0, sp
    7386:	2210      	movs	r2, #16
    7388:	4621      	mov	r1, r4
    738a:	f017 fc67 	bl	1ec5c <_set>

	return TC_CRYPTO_SUCCESS;
    738e:	2001      	movs	r0, #1
}
    7390:	b009      	add	sp, #36	; 0x24
    7392:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
    7396:	4608      	mov	r0, r1
    7398:	e7fa      	b.n	7390 <tc_aes_encrypt+0xc0>
    739a:	4610      	mov	r0, r2
    739c:	e7f8      	b.n	7390 <tc_aes_encrypt+0xc0>
    739e:	bf00      	nop
    73a0:	00025176 	.word	0x00025176

000073a4 <arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    73a4:	4a09      	ldr	r2, [pc, #36]	; (73cc <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    73a6:	490a      	ldr	r1, [pc, #40]	; (73d0 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    73a8:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    73aa:	6809      	ldr	r1, [r1, #0]
    73ac:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    73ae:	4909      	ldr	r1, [pc, #36]	; (73d4 <arch_swap+0x30>)
	_current->arch.basepri = key;
    73b0:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    73b2:	684b      	ldr	r3, [r1, #4]
    73b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    73b8:	604b      	str	r3, [r1, #4]
    73ba:	2300      	movs	r3, #0
    73bc:	f383 8811 	msr	BASEPRI, r3
    73c0:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    73c4:	6893      	ldr	r3, [r2, #8]
}
    73c6:	6f98      	ldr	r0, [r3, #120]	; 0x78
    73c8:	4770      	bx	lr
    73ca:	bf00      	nop
    73cc:	2000a260 	.word	0x2000a260
    73d0:	00024e48 	.word	0x00024e48
    73d4:	e000ed00 	.word	0xe000ed00

000073d8 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    73d8:	490f      	ldr	r1, [pc, #60]	; (7418 <z_arm_pendsv+0x40>)
    ldr r2, [r1, #_kernel_offset_to_current]
    73da:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    73dc:	f04f 0038 	mov.w	r0, #56	; 0x38
    add r0, r2
    73e0:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    73e2:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    73e6:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    73ea:	2020      	movs	r0, #32
    msr BASEPRI, r0
    73ec:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    73f0:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    73f4:	4f09      	ldr	r7, [pc, #36]	; (741c <z_arm_pendsv+0x44>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    73f6:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    73fa:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    73fc:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    73fe:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    7400:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    7402:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    7404:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    7406:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    740a:	f102 0038 	add.w	r0, r2, #56	; 0x38
    ldmia r0, {v1-v8, ip}
    740e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    7412:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    7416:	4770      	bx	lr
    ldr r1, =_kernel
    7418:	2000a260 	.word	0x2000a260
    ldr v4, =_SCS_ICSR
    741c:	e000ed04 	.word	0xe000ed04

00007420 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    7420:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    7424:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    7426:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    742a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    742e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    7430:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    7434:	2902      	cmp	r1, #2
    beq _oops
    7436:	d0ff      	beq.n	7438 <_oops>

00007438 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    7438:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    743a:	f018 fccd 	bl	1fdd8 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    743e:	bd01      	pop	{r0, pc}

00007440 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    7440:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    7442:	2b00      	cmp	r3, #0
    7444:	db08      	blt.n	7458 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7446:	2201      	movs	r2, #1
    7448:	f000 001f 	and.w	r0, r0, #31
    744c:	fa02 f000 	lsl.w	r0, r2, r0
    7450:	095b      	lsrs	r3, r3, #5
    7452:	4a02      	ldr	r2, [pc, #8]	; (745c <arch_irq_enable+0x1c>)
    7454:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    7458:	4770      	bx	lr
    745a:	bf00      	nop
    745c:	e000e100 	.word	0xe000e100

00007460 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    7460:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    7462:	2b00      	cmp	r3, #0
    7464:	db0d      	blt.n	7482 <arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7466:	2201      	movs	r2, #1
    7468:	095b      	lsrs	r3, r3, #5
    746a:	f000 001f 	and.w	r0, r0, #31
    746e:	fa02 f000 	lsl.w	r0, r2, r0
    7472:	3320      	adds	r3, #32
    7474:	4a03      	ldr	r2, [pc, #12]	; (7484 <arch_irq_disable+0x24>)
    7476:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    747a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    747e:	f3bf 8f6f 	isb	sy
}
    7482:	4770      	bx	lr
    7484:	e000e100 	.word	0xe000e100

00007488 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    7488:	4b05      	ldr	r3, [pc, #20]	; (74a0 <arch_irq_is_enabled+0x18>)
    748a:	0942      	lsrs	r2, r0, #5
    748c:	f000 001f 	and.w	r0, r0, #31
    7490:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    7494:	2301      	movs	r3, #1
    7496:	fa03 f000 	lsl.w	r0, r3, r0
}
    749a:	4010      	ands	r0, r2
    749c:	4770      	bx	lr
    749e:	bf00      	nop
    74a0:	e000e100 	.word	0xe000e100

000074a4 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    74a4:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    74a6:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    74a8:	bfa8      	it	ge
    74aa:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
    74ae:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    74b2:	bfb8      	it	lt
    74b4:	4b06      	ldrlt	r3, [pc, #24]	; (74d0 <z_arm_irq_priority_set+0x2c>)
    74b6:	ea4f 1141 	mov.w	r1, r1, lsl #5
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    74ba:	bfac      	ite	ge
    74bc:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    74c0:	f000 000f 	andlt.w	r0, r0, #15
    74c4:	b2c9      	uxtb	r1, r1
    74c6:	bfb4      	ite	lt
    74c8:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    74ca:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    74ce:	4770      	bx	lr
    74d0:	e000ed14 	.word	0xe000ed14

000074d4 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
    74d4:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    74d6:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    74d8:	4b04      	ldr	r3, [pc, #16]	; (74ec <_arch_isr_direct_pm+0x18>)
    74da:	6a18      	ldr	r0, [r3, #32]
    74dc:	b118      	cbz	r0, 74e6 <_arch_isr_direct_pm+0x12>
		int32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    74de:	2200      	movs	r2, #0
    74e0:	621a      	str	r2, [r3, #32]
		z_sys_power_save_idle_exit(idle_val);
    74e2:	f01b fad8 	bl	22a96 <z_sys_power_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    74e6:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    74e8:	bd08      	pop	{r3, pc}
    74ea:	bf00      	nop
    74ec:	2000a260 	.word	0x2000a260

000074f0 <arch_new_thread>:
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     size_t stackSize, k_thread_entry_t pEntry,
		     void *parameter1, void *parameter2, void *parameter3,
		     int priority, unsigned int options)
{
    74f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    74f4:	460e      	mov	r6, r1
    74f6:	4605      	mov	r5, r0
			- MPU_GUARD_ALIGN_AND_SIZE;
		stackSize -= MPU_GUARD_ALIGN_AND_SIZE_FLOAT
			- MPU_GUARD_ALIGN_AND_SIZE;
	}
#endif
	stackEnd = pStackMem + stackSize;
    74f8:	188c      	adds	r4, r1, r2
	ARG_UNUSED(stack);
	ARG_UNUSED(stack_size);
	ARG_UNUSED(thread);
#endif
#ifdef CONFIG_INIT_STACKS
	memset(stack, 0xaa, stack_size);
    74fa:	4630      	mov	r0, r6
    74fc:	21aa      	movs	r1, #170	; 0xaa
{
    74fe:	4617      	mov	r7, r2
    7500:	4698      	mov	r8, r3
    7502:	f018 fcdf 	bl	1fec4 <memset>
	pInitCtx->basic.pc = (uint32_t)z_thread_entry;
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
    7506:	4b0d      	ldr	r3, [pc, #52]	; (753c <arch_new_thread+0x4c>)
	pInitCtx = (struct __esf *)(Z_STACK_PTR_ALIGN(stackEnd -
    7508:	f1a4 0220 	sub.w	r2, r4, #32
    750c:	f022 0207 	bic.w	r2, r2, #7
	pInitCtx->basic.pc &= 0xfffffffe;
    7510:	f023 0301 	bic.w	r3, r3, #1
#endif
#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (uintptr_t)stack;
	thread->stack_info.size = stack_size;
    7514:	e9c5 671a 	strd	r6, r7, [r5, #104]	; 0x68
    7518:	6193      	str	r3, [r2, #24]
#endif

	pInitCtx->basic.a1 = (uint32_t)pEntry;
	pInitCtx->basic.a2 = (uint32_t)parameter1;
    751a:	9b06      	ldr	r3, [sp, #24]
    751c:	6053      	str	r3, [r2, #4]
	pInitCtx->basic.a3 = (uint32_t)parameter2;
    751e:	9b07      	ldr	r3, [sp, #28]
    7520:	6093      	str	r3, [r2, #8]
	pInitCtx->basic.a4 = (uint32_t)parameter3;
    7522:	9b08      	ldr	r3, [sp, #32]
    7524:	60d3      	str	r3, [r2, #12]

#if defined(CONFIG_CPU_CORTEX_M)
	pInitCtx->basic.xpsr =
    7526:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    752a:	61d3      	str	r3, [r2, #28]
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)pInitCtx;

	thread->arch.basepri = 0;
    752c:	2300      	movs	r3, #0
	pInitCtx->basic.a1 = (uint32_t)pEntry;
    752e:	f8c2 8000 	str.w	r8, [r2]
	thread->callee_saved.psp = (uint32_t)pInitCtx;
    7532:	65aa      	str	r2, [r5, #88]	; 0x58
	thread->arch.basepri = 0;
    7534:	676b      	str	r3, [r5, #116]	; 0x74

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    7536:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    753a:	bf00      	nop
    753c:	0001df7f 	.word	0x0001df7f

00007540 <arch_switch_to_main_thread>:

void arch_switch_to_main_thread(struct k_thread *main_thread,
				k_thread_stack_t *main_stack,
				size_t main_stack_size,
				k_thread_entry_t _main)
{
    7540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7542:	4606      	mov	r6, r0
    7544:	460c      	mov	r4, r1
    7546:	4617      	mov	r7, r2
    7548:	461d      	mov	r5, r3
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    754a:	f000 fb13 	bl	7b74 <z_arm_configure_static_mpu_regions>
	start_of_main_stack =
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;

	start_of_main_stack = (char *)Z_STACK_PTR_ALIGN(start_of_main_stack);

	_current = main_thread;
    754e:	4b09      	ldr	r3, [pc, #36]	; (7574 <arch_switch_to_main_thread+0x34>)
	start_of_main_stack =
    7550:	443c      	add	r4, r7
	start_of_main_stack = (char *)Z_STACK_PTR_ALIGN(start_of_main_stack);
    7552:	f024 0407 	bic.w	r4, r4, #7
	_current = main_thread;
    7556:	609e      	str	r6, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    7558:	4628      	mov	r0, r5
    755a:	f384 8809 	msr	PSP, r4
    755e:	2100      	movs	r1, #0
    7560:	b663      	cpsie	if
    7562:	f381 8811 	msr	BASEPRI, r1
    7566:	f3bf 8f6f 	isb	sy
    756a:	2200      	movs	r2, #0
    756c:	2300      	movs	r3, #0
    756e:	f016 fd06 	bl	1df7e <z_thread_entry>
	:
	: "r" (_main), "r" (start_of_main_stack)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    7572:	bf00      	nop
    7574:	2000a260 	.word	0x2000a260

00007578 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    7578:	4901      	ldr	r1, [pc, #4]	; (7580 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    757a:	2210      	movs	r2, #16
	str	r2, [r1]
    757c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    757e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    7580:	e000ed10 	.word	0xe000ed10

00007584 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    7584:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    7586:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    7588:	f380 8811 	msr	BASEPRI, r0
	isb
    758c:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    7590:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    7594:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    7596:	b662      	cpsie	i
	isb
    7598:	f3bf 8f6f 	isb	sy

	bx	lr
    759c:	4770      	bx	lr
    759e:	bf00      	nop

000075a0 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    75a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    75a2:	4606      	mov	r6, r0

	if (esf != NULL) {
    75a4:	460c      	mov	r4, r1
    75a6:	b301      	cbz	r1, 75ea <z_arm_fatal_error+0x4a>
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    75a8:	4b13      	ldr	r3, [pc, #76]	; (75f8 <z_arm_fatal_error+0x58>)
    75aa:	4d14      	ldr	r5, [pc, #80]	; (75fc <z_arm_fatal_error+0x5c>)
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    75ac:	4814      	ldr	r0, [pc, #80]	; (7600 <z_arm_fatal_error+0x60>)
    75ae:	1aed      	subs	r5, r5, r3
    75b0:	08ed      	lsrs	r5, r5, #3
    75b2:	01ad      	lsls	r5, r5, #6
    75b4:	f045 0501 	orr.w	r5, r5, #1
    75b8:	f8ad 5000 	strh.w	r5, [sp]
    75bc:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
    75c0:	6809      	ldr	r1, [r1, #0]
    75c2:	f016 ffbc 	bl	1e53e <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    75c6:	f8ad 5000 	strh.w	r5, [sp]
    75ca:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    75ce:	68e1      	ldr	r1, [r4, #12]
    75d0:	480c      	ldr	r0, [pc, #48]	; (7604 <z_arm_fatal_error+0x64>)
    75d2:	f016 ffb4 	bl	1e53e <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    75d6:	69e1      	ldr	r1, [r4, #28]
    75d8:	480b      	ldr	r0, [pc, #44]	; (7608 <z_arm_fatal_error+0x68>)
    75da:	462a      	mov	r2, r5
    75dc:	f016 ff82 	bl	1e4e4 <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    75e0:	69a1      	ldr	r1, [r4, #24]
    75e2:	480a      	ldr	r0, [pc, #40]	; (760c <z_arm_fatal_error+0x6c>)
    75e4:	462a      	mov	r2, r5
    75e6:	f016 ff7d 	bl	1e4e4 <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    75ea:	4621      	mov	r1, r4
    75ec:	4630      	mov	r0, r6
}
    75ee:	b002      	add	sp, #8
    75f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
    75f4:	f015 ba8a 	b.w	1cb0c <z_fatal_error>
    75f8:	000236e8 	.word	0x000236e8
    75fc:	000237f8 	.word	0x000237f8
    7600:	00025276 	.word	0x00025276
    7604:	000252a5 	.word	0x000252a5
    7608:	000252d4 	.word	0x000252d4
    760c:	000252e3 	.word	0x000252e3

00007610 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    7610:	bf30      	wfi
    b z_SysNmiOnReset
    7612:	f7ff bffd 	b.w	7610 <z_SysNmiOnReset>
    7616:	bf00      	nop

00007618 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    7618:	4a0e      	ldr	r2, [pc, #56]	; (7654 <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    761a:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    761c:	4b0e      	ldr	r3, [pc, #56]	; (7658 <z_arm_prep_c+0x40>)
    761e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    7622:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    7624:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7628:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    762c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    7630:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    7634:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    7638:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    763c:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    7640:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    7644:	f015 fade 	bl	1cc04 <z_bss_zero>
	z_data_copy();
    7648:	f015 fae6 	bl	1cc18 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    764c:	f000 fa60 	bl	7b10 <z_arm_interrupt_init>
	z_cstart();
    7650:	f015 fb20 	bl	1cc94 <z_cstart>
    7654:	00000000 	.word	0x00000000
    7658:	e000ed00 	.word	0xe000ed00

0000765c <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    765c:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    765e:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    7660:	4a0b      	ldr	r2, [pc, #44]	; (7690 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    7662:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    7664:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    7666:	bf1e      	ittt	ne
	movne	r1, #0
    7668:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    766a:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
    766c:	f01b fa13 	blne	22a96 <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    7670:	b662      	cpsie	i
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    7672:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    7676:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    767a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    767e:	4905      	ldr	r1, [pc, #20]	; (7694 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    7680:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    7682:	c909      	ldmia	r1!, {r0, r3}
#ifdef CONFIG_EXECUTION_BENCHMARKING
	push {r0, r3}	/* Save r0 and r3 into stack */
	bl read_timer_end_of_isr
	pop {r0, r3}	/* Restore r0 and r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
    7684:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    7686:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    768a:	4903      	ldr	r1, [pc, #12]	; (7698 <_isr_wrapper+0x3c>)
	bx r1
    768c:	4708      	bx	r1
    768e:	0000      	.short	0x0000
	ldr r2, =_kernel
    7690:	2000a260 	.word	0x2000a260
	ldr r1, =_sw_isr_table
    7694:	0002352c 	.word	0x0002352c
	ldr r1, =z_arm_int_exit
    7698:	00007af5 	.word	0x00007af5

0000769c <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    769c:	f018 fc38 	bl	1ff10 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    76a0:	2020      	movs	r0, #32
    msr BASEPRI, r0
    76a2:	f380 8811 	msr	BASEPRI, r0
    /* board-specific watchdog initialization is necessary */
    bl z_arm_watchdog_init
#endif

#ifdef CONFIG_INIT_STACKS
    ldr r0, =z_interrupt_stacks
    76a6:	480b      	ldr	r0, [pc, #44]	; (76d4 <__start+0x38>)
    ldr r1, =0xaa
    76a8:	f04f 01aa 	mov.w	r1, #170	; 0xaa
    ldr r2, =CONFIG_ISR_STACK_SIZE
    76ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
    bl memset
    76b0:	f018 fc08 	bl	1fec4 <memset>

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    76b4:	4807      	ldr	r0, [pc, #28]	; (76d4 <__start+0x38>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    76b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    76ba:	1840      	adds	r0, r0, r1
    msr PSP, r0
    76bc:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    76c0:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    76c4:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    76c6:	4308      	orrs	r0, r1
    msr CONTROL, r0
    76c8:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    76cc:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    76d0:	f7ff ffa2 	bl	7618 <z_arm_prep_c>
    ldr r0, =z_interrupt_stacks
    76d4:	2000d600 	.word	0x2000d600

000076d8 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    76d8:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    76dc:	f3ef 8109 	mrs	r1, PSP
	mov r2, lr /* EXC_RETURN */
    76e0:	4672      	mov	r2, lr

	push {r0, lr}
    76e2:	b501      	push	{r0, lr}

	bl z_arm_fault
    76e4:	f000 f932 	bl	794c <z_arm_fault>

	pop {r0, pc}
    76e8:	bd01      	pop	{r0, pc}
    76ea:	bf00      	nop

000076ec <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    76ec:	b570      	push	{r4, r5, r6, lr}
    76ee:	4b23      	ldr	r3, [pc, #140]	; (777c <usage_fault.isra.0+0x90>)
    76f0:	4c23      	ldr	r4, [pc, #140]	; (7780 <usage_fault.isra.0+0x94>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    76f2:	4d24      	ldr	r5, [pc, #144]	; (7784 <usage_fault.isra.0+0x98>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    76f4:	4824      	ldr	r0, [pc, #144]	; (7788 <usage_fault.isra.0+0x9c>)
    76f6:	1ae4      	subs	r4, r4, r3
    76f8:	08e4      	lsrs	r4, r4, #3
    76fa:	01a4      	lsls	r4, r4, #6
    76fc:	f044 0601 	orr.w	r6, r4, #1
    7700:	4631      	mov	r1, r6
    7702:	f016 fee2 	bl	1e4ca <log_0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    7706:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    7708:	0193      	lsls	r3, r2, #6
    770a:	d503      	bpl.n	7714 <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Division by zero");
    770c:	481f      	ldr	r0, [pc, #124]	; (778c <usage_fault.isra.0+0xa0>)
    770e:	4631      	mov	r1, r6
    7710:	f016 fedb 	bl	1e4ca <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    7714:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7716:	01dd      	lsls	r5, r3, #7
    7718:	d504      	bpl.n	7724 <usage_fault.isra.0+0x38>
		PR_FAULT_INFO("  Unaligned memory access");
    771a:	481d      	ldr	r0, [pc, #116]	; (7790 <usage_fault.isra.0+0xa4>)
    771c:	f044 0101 	orr.w	r1, r4, #1
    7720:	f016 fed3 	bl	1e4ca <log_0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    7724:	4d17      	ldr	r5, [pc, #92]	; (7784 <usage_fault.isra.0+0x98>)
    7726:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    7728:	0310      	lsls	r0, r2, #12
    772a:	d504      	bpl.n	7736 <usage_fault.isra.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
    772c:	4819      	ldr	r0, [pc, #100]	; (7794 <usage_fault.isra.0+0xa8>)
    772e:	f044 0101 	orr.w	r1, r4, #1
    7732:	f016 feca 	bl	1e4ca <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    7736:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7738:	0359      	lsls	r1, r3, #13
    773a:	d504      	bpl.n	7746 <usage_fault.isra.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    773c:	4816      	ldr	r0, [pc, #88]	; (7798 <usage_fault.isra.0+0xac>)
    773e:	f044 0101 	orr.w	r1, r4, #1
    7742:	f016 fec2 	bl	1e4ca <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    7746:	4d0f      	ldr	r5, [pc, #60]	; (7784 <usage_fault.isra.0+0x98>)
    7748:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    774a:	0392      	lsls	r2, r2, #14
    774c:	d504      	bpl.n	7758 <usage_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    774e:	4813      	ldr	r0, [pc, #76]	; (779c <usage_fault.isra.0+0xb0>)
    7750:	f044 0101 	orr.w	r1, r4, #1
    7754:	f016 feb9 	bl	1e4ca <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    7758:	6aab      	ldr	r3, [r5, #40]	; 0x28
    775a:	03db      	lsls	r3, r3, #15
    775c:	d504      	bpl.n	7768 <usage_fault.isra.0+0x7c>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    775e:	4810      	ldr	r0, [pc, #64]	; (77a0 <usage_fault.isra.0+0xb4>)
    7760:	f044 0101 	orr.w	r1, r4, #1
    7764:	f016 feb1 	bl	1e4ca <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    7768:	4a06      	ldr	r2, [pc, #24]	; (7784 <usage_fault.isra.0+0x98>)
    776a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    776c:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    7770:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    7774:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    7776:	2000      	movs	r0, #0
    7778:	bd70      	pop	{r4, r5, r6, pc}
    777a:	bf00      	nop
    777c:	000236e8 	.word	0x000236e8
    7780:	000237f8 	.word	0x000237f8
    7784:	e000ed00 	.word	0xe000ed00
    7788:	00025311 	.word	0x00025311
    778c:	00025329 	.word	0x00025329
    7790:	0002533c 	.word	0x0002533c
    7794:	00025356 	.word	0x00025356
    7798:	00025374 	.word	0x00025374
    779c:	00025399 	.word	0x00025399
    77a0:	000253b3 	.word	0x000253b3

000077a4 <mem_manage_fault.isra.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    77a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    77a8:	4b27      	ldr	r3, [pc, #156]	; (7848 <mem_manage_fault.isra.0+0xa4>)
    77aa:	4c28      	ldr	r4, [pc, #160]	; (784c <mem_manage_fault.isra.0+0xa8>)
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    77ac:	4d28      	ldr	r5, [pc, #160]	; (7850 <mem_manage_fault.isra.0+0xac>)
    77ae:	1ae4      	subs	r4, r4, r3
    77b0:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
    77b2:	01a4      	lsls	r4, r4, #6
    77b4:	f044 0801 	orr.w	r8, r4, #1
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    77b8:	4607      	mov	r7, r0
    77ba:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    77bc:	4825      	ldr	r0, [pc, #148]	; (7854 <mem_manage_fault.isra.0+0xb0>)
    77be:	4641      	mov	r1, r8
    77c0:	f016 fe83 	bl	1e4ca <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    77c4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    77c6:	06d1      	lsls	r1, r2, #27
    77c8:	d503      	bpl.n	77d2 <mem_manage_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    77ca:	4823      	ldr	r0, [pc, #140]	; (7858 <mem_manage_fault.isra.0+0xb4>)
    77cc:	4641      	mov	r1, r8
    77ce:	f016 fe7c 	bl	1e4ca <log_0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    77d2:	6aab      	ldr	r3, [r5, #40]	; 0x28
    77d4:	071a      	lsls	r2, r3, #28
    77d6:	d504      	bpl.n	77e2 <mem_manage_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
    77d8:	4820      	ldr	r0, [pc, #128]	; (785c <mem_manage_fault.isra.0+0xb8>)
    77da:	f044 0101 	orr.w	r1, r4, #1
    77de:	f016 fe74 	bl	1e4ca <log_0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    77e2:	4d1b      	ldr	r5, [pc, #108]	; (7850 <mem_manage_fault.isra.0+0xac>)
    77e4:	6aab      	ldr	r3, [r5, #40]	; 0x28
    77e6:	079b      	lsls	r3, r3, #30
    77e8:	d512      	bpl.n	7810 <mem_manage_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Data Access Violation");
    77ea:	f044 0801 	orr.w	r8, r4, #1
    77ee:	481c      	ldr	r0, [pc, #112]	; (7860 <mem_manage_fault.isra.0+0xbc>)
    77f0:	4641      	mov	r1, r8
    77f2:	f016 fe6a 	bl	1e4ca <log_0>
		mmfar = SCB->MMFAR;
    77f6:	6b69      	ldr	r1, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    77f8:	6aab      	ldr	r3, [r5, #40]	; 0x28
    77fa:	0618      	lsls	r0, r3, #24
    77fc:	d508      	bpl.n	7810 <mem_manage_fault.isra.0+0x6c>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    77fe:	4819      	ldr	r0, [pc, #100]	; (7864 <mem_manage_fault.isra.0+0xc0>)
    7800:	4642      	mov	r2, r8
    7802:	f016 fe6f 	bl	1e4e4 <log_1>
			if (from_hard_fault) {
    7806:	b11f      	cbz	r7, 7810 <mem_manage_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    7808:	6aab      	ldr	r3, [r5, #40]	; 0x28
    780a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    780e:	62ab      	str	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    7810:	4d0f      	ldr	r5, [pc, #60]	; (7850 <mem_manage_fault.isra.0+0xac>)
    7812:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    7814:	07d2      	lsls	r2, r2, #31
    7816:	d504      	bpl.n	7822 <mem_manage_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Instruction Access Violation");
    7818:	4813      	ldr	r0, [pc, #76]	; (7868 <mem_manage_fault.isra.0+0xc4>)
    781a:	f044 0101 	orr.w	r1, r4, #1
    781e:	f016 fe54 	bl	1e4ca <log_0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    7822:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7824:	069b      	lsls	r3, r3, #26
    7826:	d504      	bpl.n	7832 <mem_manage_fault.isra.0+0x8e>
		PR_FAULT_INFO(
    7828:	4810      	ldr	r0, [pc, #64]	; (786c <mem_manage_fault.isra.0+0xc8>)
    782a:	f044 0101 	orr.w	r1, r4, #1
    782e:	f016 fe4c 	bl	1e4ca <log_0>
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    7832:	4b07      	ldr	r3, [pc, #28]	; (7850 <mem_manage_fault.isra.0+0xac>)
    7834:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    7836:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    7838:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    783a:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    783e:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    7840:	7030      	strb	r0, [r6, #0]
}
    7842:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7846:	bf00      	nop
    7848:	000236e8 	.word	0x000236e8
    784c:	000237f8 	.word	0x000237f8
    7850:	e000ed00 	.word	0xe000ed00
    7854:	000253de 	.word	0x000253de
    7858:	000253f4 	.word	0x000253f4
    785c:	00025427 	.word	0x00025427
    7860:	0002543a 	.word	0x0002543a
    7864:	00025452 	.word	0x00025452
    7868:	00025468 	.word	0x00025468
    786c:	00025487 	.word	0x00025487

00007870 <bus_fault.isra.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    7870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7874:	4b2a      	ldr	r3, [pc, #168]	; (7920 <bus_fault.isra.0+0xb0>)
    7876:	4c2b      	ldr	r4, [pc, #172]	; (7924 <bus_fault.isra.0+0xb4>)
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    7878:	4d2b      	ldr	r5, [pc, #172]	; (7928 <bus_fault.isra.0+0xb8>)
    787a:	1ae4      	subs	r4, r4, r3
    787c:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
    787e:	01a4      	lsls	r4, r4, #6
    7880:	f044 0801 	orr.w	r8, r4, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    7884:	4607      	mov	r7, r0
    7886:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    7888:	4828      	ldr	r0, [pc, #160]	; (792c <bus_fault.isra.0+0xbc>)
    788a:	4641      	mov	r1, r8
    788c:	f016 fe1d 	bl	1e4ca <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    7890:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    7892:	04d1      	lsls	r1, r2, #19
    7894:	d503      	bpl.n	789e <bus_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error");
    7896:	4826      	ldr	r0, [pc, #152]	; (7930 <bus_fault.isra.0+0xc0>)
    7898:	4641      	mov	r1, r8
    789a:	f016 fe16 	bl	1e4ca <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    789e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    78a0:	051a      	lsls	r2, r3, #20
    78a2:	d504      	bpl.n	78ae <bus_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
    78a4:	4823      	ldr	r0, [pc, #140]	; (7934 <bus_fault.isra.0+0xc4>)
    78a6:	f044 0101 	orr.w	r1, r4, #1
    78aa:	f016 fe0e 	bl	1e4ca <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    78ae:	4d1e      	ldr	r5, [pc, #120]	; (7928 <bus_fault.isra.0+0xb8>)
    78b0:	6aab      	ldr	r3, [r5, #40]	; 0x28
    78b2:	059b      	lsls	r3, r3, #22
    78b4:	d512      	bpl.n	78dc <bus_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Precise data bus error");
    78b6:	f044 0801 	orr.w	r8, r4, #1
    78ba:	481f      	ldr	r0, [pc, #124]	; (7938 <bus_fault.isra.0+0xc8>)
    78bc:	4641      	mov	r1, r8
    78be:	f016 fe04 	bl	1e4ca <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
    78c2:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    78c4:	6aab      	ldr	r3, [r5, #40]	; 0x28
    78c6:	0418      	lsls	r0, r3, #16
    78c8:	d508      	bpl.n	78dc <bus_fault.isra.0+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    78ca:	481c      	ldr	r0, [pc, #112]	; (793c <bus_fault.isra.0+0xcc>)
    78cc:	4642      	mov	r2, r8
    78ce:	f016 fe09 	bl	1e4e4 <log_1>
			if (from_hard_fault) {
    78d2:	b11f      	cbz	r7, 78dc <bus_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    78d4:	6aab      	ldr	r3, [r5, #40]	; 0x28
    78d6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    78da:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    78dc:	4d12      	ldr	r5, [pc, #72]	; (7928 <bus_fault.isra.0+0xb8>)
    78de:	6aab      	ldr	r3, [r5, #40]	; 0x28
    78e0:	0559      	lsls	r1, r3, #21
    78e2:	d504      	bpl.n	78ee <bus_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Imprecise data bus error");
    78e4:	4816      	ldr	r0, [pc, #88]	; (7940 <bus_fault.isra.0+0xd0>)
    78e6:	f044 0101 	orr.w	r1, r4, #1
    78ea:	f016 fdee 	bl	1e4ca <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    78ee:	6aab      	ldr	r3, [r5, #40]	; 0x28
    78f0:	05da      	lsls	r2, r3, #23
    78f2:	d50d      	bpl.n	7910 <bus_fault.isra.0+0xa0>
		PR_FAULT_INFO("  Instruction bus error");
    78f4:	4813      	ldr	r0, [pc, #76]	; (7944 <bus_fault.isra.0+0xd4>)
    78f6:	f044 0101 	orr.w	r1, r4, #1
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    78fa:	f016 fde6 	bl	1e4ca <log_0>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    78fe:	4a0a      	ldr	r2, [pc, #40]	; (7928 <bus_fault.isra.0+0xb8>)
    7900:	6a93      	ldr	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    7902:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    7904:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    7908:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    790a:	7030      	strb	r0, [r6, #0]
}
    790c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    7910:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7912:	049b      	lsls	r3, r3, #18
    7914:	d5f3      	bpl.n	78fe <bus_fault.isra.0+0x8e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    7916:	480c      	ldr	r0, [pc, #48]	; (7948 <bus_fault.isra.0+0xd8>)
    7918:	f044 0101 	orr.w	r1, r4, #1
    791c:	e7ed      	b.n	78fa <bus_fault.isra.0+0x8a>
    791e:	bf00      	nop
    7920:	000236e8 	.word	0x000236e8
    7924:	000237f8 	.word	0x000237f8
    7928:	e000ed00 	.word	0xe000ed00
    792c:	000254b6 	.word	0x000254b6
    7930:	000254cc 	.word	0x000254cc
    7934:	00025427 	.word	0x00025427
    7938:	000254dd 	.word	0x000254dd
    793c:	000254f6 	.word	0x000254f6
    7940:	0002550b 	.word	0x0002550b
    7944:	00025526 	.word	0x00025526
    7948:	00025487 	.word	0x00025487

0000794c <z_arm_fault>:
 * @param psp PSP value immediately after the exception occurred
 * @param exc_return EXC_RETURN value present in LR after exception entry.
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return)
{
    794c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    7950:	4b56      	ldr	r3, [pc, #344]	; (7aac <z_arm_fault+0x160>)
    7952:	685e      	ldr	r6, [r3, #4]
{
    7954:	b08a      	sub	sp, #40	; 0x28
    7956:	460f      	mov	r7, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    7958:	f3c6 0408 	ubfx	r4, r6, #0, #9
    795c:	2500      	movs	r5, #0
    795e:	f385 8811 	msr	BASEPRI, r5
    7962:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    7966:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    796a:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    796e:	d10d      	bne.n	798c <z_arm_fault+0x40>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    7970:	f002 030c 	and.w	r3, r2, #12
    7974:	2b08      	cmp	r3, #8
    7976:	d10b      	bne.n	7990 <z_arm_fault+0x44>
    7978:	494d      	ldr	r1, [pc, #308]	; (7ab0 <z_arm_fault+0x164>)
    797a:	4b4e      	ldr	r3, [pc, #312]	; (7ab4 <z_arm_fault+0x168>)
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    797c:	484e      	ldr	r0, [pc, #312]	; (7ab8 <z_arm_fault+0x16c>)
    797e:	1ac9      	subs	r1, r1, r3
    7980:	08c9      	lsrs	r1, r1, #3
    7982:	0189      	lsls	r1, r1, #6
    7984:	f041 0101 	orr.w	r1, r1, #1
    7988:	f016 fd9f 	bl	1e4ca <log_0>
		return NULL;
    798c:	462f      	mov	r7, r5
    798e:	e003      	b.n	7998 <z_arm_fault+0x4c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    7990:	0712      	lsls	r2, r2, #28
    7992:	d401      	bmi.n	7998 <z_arm_fault+0x4c>
			ptr_esf = (z_arch_esf_t *)msp;
    7994:	4607      	mov	r7, r0
			*nested_exc = true;
    7996:	2501      	movs	r5, #1
	*recoverable = false;
    7998:	2300      	movs	r3, #0
    799a:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    799e:	1ee3      	subs	r3, r4, #3
    79a0:	2b09      	cmp	r3, #9
    79a2:	d86a      	bhi.n	7a7a <z_arm_fault+0x12e>
    79a4:	e8df f003 	tbb	[pc, r3]
    79a8:	3c5c5805 	.word	0x3c5c5805
    79ac:	69696969 	.word	0x69696969
    79b0:	6069      	.short	0x6069
    79b2:	4b40      	ldr	r3, [pc, #256]	; (7ab4 <z_arm_fault+0x168>)
    79b4:	4e3e      	ldr	r6, [pc, #248]	; (7ab0 <z_arm_fault+0x164>)
	PR_FAULT_INFO("***** HARD FAULT *****");
    79b6:	4841      	ldr	r0, [pc, #260]	; (7abc <z_arm_fault+0x170>)
    79b8:	1af6      	subs	r6, r6, r3
    79ba:	08f6      	lsrs	r6, r6, #3
    79bc:	01b6      	lsls	r6, r6, #6
    79be:	f046 0601 	orr.w	r6, r6, #1
    79c2:	4631      	mov	r1, r6
    79c4:	f016 fd81 	bl	1e4ca <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    79c8:	4b38      	ldr	r3, [pc, #224]	; (7aac <z_arm_fault+0x160>)
    79ca:	6adc      	ldr	r4, [r3, #44]	; 0x2c
	*recoverable = false;
    79cc:	f04f 0800 	mov.w	r8, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    79d0:	f014 0402 	ands.w	r4, r4, #2
	*recoverable = false;
    79d4:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    79d8:	d005      	beq.n	79e6 <z_arm_fault+0x9a>
		PR_EXC("  Bus fault on vector table read");
    79da:	4839      	ldr	r0, [pc, #228]	; (7ac0 <z_arm_fault+0x174>)
    79dc:	4631      	mov	r1, r6
	PR_FAULT_INFO(
    79de:	f016 fd74 	bl	1e4ca <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    79e2:	2400      	movs	r4, #0
}
    79e4:	e01f      	b.n	7a26 <z_arm_fault+0xda>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    79e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    79e8:	005b      	lsls	r3, r3, #1
    79ea:	d51c      	bpl.n	7a26 <z_arm_fault+0xda>
		PR_EXC("  Fault escalation (see below)");
    79ec:	4835      	ldr	r0, [pc, #212]	; (7ac4 <z_arm_fault+0x178>)
    79ee:	4631      	mov	r1, r6
    79f0:	f016 fd6b 	bl	1e4ca <log_0>
		if (SCB_MMFSR != 0) {
    79f4:	4b34      	ldr	r3, [pc, #208]	; (7ac8 <z_arm_fault+0x17c>)
    79f6:	781b      	ldrb	r3, [r3, #0]
    79f8:	b12b      	cbz	r3, 7a06 <z_arm_fault+0xba>
			reason = mem_manage_fault(esf, 1, recoverable);
    79fa:	f10d 0107 	add.w	r1, sp, #7
    79fe:	2001      	movs	r0, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    7a00:	f7ff fed0 	bl	77a4 <mem_manage_fault.isra.0>
    7a04:	e00e      	b.n	7a24 <z_arm_fault+0xd8>
		} else if (SCB_BFSR != 0) {
    7a06:	4b31      	ldr	r3, [pc, #196]	; (7acc <z_arm_fault+0x180>)
    7a08:	781b      	ldrb	r3, [r3, #0]
    7a0a:	b12b      	cbz	r3, 7a18 <z_arm_fault+0xcc>
			reason = bus_fault(esf, 1, recoverable);
    7a0c:	f10d 0107 	add.w	r1, sp, #7
    7a10:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    7a12:	f7ff ff2d 	bl	7870 <bus_fault.isra.0>
    7a16:	e005      	b.n	7a24 <z_arm_fault+0xd8>
		} else if (SCB_UFSR != 0) {
    7a18:	4b2d      	ldr	r3, [pc, #180]	; (7ad0 <z_arm_fault+0x184>)
    7a1a:	881b      	ldrh	r3, [r3, #0]
    7a1c:	b29b      	uxth	r3, r3
    7a1e:	b113      	cbz	r3, 7a26 <z_arm_fault+0xda>
			reason = usage_fault(esf);
    7a20:	f7ff fe64 	bl	76ec <usage_fault.isra.0>
    7a24:	4604      	mov	r4, r0
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
		"ESF could not be retrieved successfully. Shall never occur.");

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    7a26:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7a2a:	b993      	cbnz	r3, 7a52 <z_arm_fault+0x106>
		return;
	}

	/* Copy ESF */
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    7a2c:	2220      	movs	r2, #32
    7a2e:	4639      	mov	r1, r7
    7a30:	a802      	add	r0, sp, #8
    7a32:	f018 fa1c 	bl	1fe6e <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    7a36:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7a38:	b39d      	cbz	r5, 7aa2 <z_arm_fault+0x156>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    7a3a:	f3c3 0208 	ubfx	r2, r3, #0, #9
    7a3e:	b922      	cbnz	r2, 7a4a <z_arm_fault+0xfe>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    7a40:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    7a44:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    7a48:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    7a4a:	a902      	add	r1, sp, #8
    7a4c:	4620      	mov	r0, r4
    7a4e:	f7ff fda7 	bl	75a0 <z_arm_fatal_error>
}
    7a52:	b00a      	add	sp, #40	; 0x28
    7a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    7a58:	f10d 0107 	add.w	r1, sp, #7
    7a5c:	2000      	movs	r0, #0
    7a5e:	e7cf      	b.n	7a00 <z_arm_fault+0xb4>
		reason = bus_fault(esf, 0, recoverable);
    7a60:	f10d 0107 	add.w	r1, sp, #7
    7a64:	2000      	movs	r0, #0
    7a66:	e7d4      	b.n	7a12 <z_arm_fault+0xc6>
    7a68:	4911      	ldr	r1, [pc, #68]	; (7ab0 <z_arm_fault+0x164>)
    7a6a:	4b12      	ldr	r3, [pc, #72]	; (7ab4 <z_arm_fault+0x168>)
	PR_FAULT_INFO(
    7a6c:	4819      	ldr	r0, [pc, #100]	; (7ad4 <z_arm_fault+0x188>)
    7a6e:	1ac9      	subs	r1, r1, r3
    7a70:	08c9      	lsrs	r1, r1, #3
    7a72:	0189      	lsls	r1, r1, #6
    7a74:	f041 0101 	orr.w	r1, r1, #1
    7a78:	e7b1      	b.n	79de <z_arm_fault+0x92>
    7a7a:	4a0e      	ldr	r2, [pc, #56]	; (7ab4 <z_arm_fault+0x168>)
    7a7c:	4b0c      	ldr	r3, [pc, #48]	; (7ab0 <z_arm_fault+0x164>)
	PR_FAULT_INFO("***** %s %d) *****",
    7a7e:	4816      	ldr	r0, [pc, #88]	; (7ad8 <z_arm_fault+0x18c>)
    7a80:	4916      	ldr	r1, [pc, #88]	; (7adc <z_arm_fault+0x190>)
    7a82:	1a9b      	subs	r3, r3, r2
    7a84:	08db      	lsrs	r3, r3, #3
    7a86:	f416 7ff8 	tst.w	r6, #496	; 0x1f0
    7a8a:	ea4f 1383 	mov.w	r3, r3, lsl #6
    7a8e:	bf18      	it	ne
    7a90:	4601      	movne	r1, r0
    7a92:	f043 0301 	orr.w	r3, r3, #1
    7a96:	4812      	ldr	r0, [pc, #72]	; (7ae0 <z_arm_fault+0x194>)
    7a98:	f1a4 0210 	sub.w	r2, r4, #16
    7a9c:	f016 fd36 	bl	1e50c <log_2>
    7aa0:	e79f      	b.n	79e2 <z_arm_fault+0x96>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    7aa2:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    7aa6:	f023 0301 	bic.w	r3, r3, #1
    7aaa:	e7cd      	b.n	7a48 <z_arm_fault+0xfc>
    7aac:	e000ed00 	.word	0xe000ed00
    7ab0:	000237f8 	.word	0x000237f8
    7ab4:	000236e8 	.word	0x000236e8
    7ab8:	0002553e 	.word	0x0002553e
    7abc:	00025569 	.word	0x00025569
    7ac0:	00025580 	.word	0x00025580
    7ac4:	000255a1 	.word	0x000255a1
    7ac8:	e000ed28 	.word	0xe000ed28
    7acc:	e000ed29 	.word	0xe000ed29
    7ad0:	e000ed2a 	.word	0xe000ed2a
    7ad4:	000255c0 	.word	0x000255c0
    7ad8:	0002560b 	.word	0x0002560b
    7adc:	000255f6 	.word	0x000255f6
    7ae0:	00025624 	.word	0x00025624

00007ae4 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    7ae4:	4a02      	ldr	r2, [pc, #8]	; (7af0 <z_arm_fault_init+0xc>)
    7ae6:	6953      	ldr	r3, [r2, #20]
    7ae8:	f043 0310 	orr.w	r3, r3, #16
    7aec:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    7aee:	4770      	bx	lr
    7af0:	e000ed00 	.word	0xe000ed00

00007af4 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    7af4:	4b04      	ldr	r3, [pc, #16]	; (7b08 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    7af6:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    7af8:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
    7afa:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    7afc:	d003      	beq.n	7b06 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    7afe:	4903      	ldr	r1, [pc, #12]	; (7b0c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    7b00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    7b04:	600a      	str	r2, [r1, #0]

00007b06 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    7b06:	4770      	bx	lr
	ldr r3, =_kernel
    7b08:	2000a260 	.word	0x2000a260
	ldr r1, =_SCS_ICSR
    7b0c:	e000ed04 	.word	0xe000ed04

00007b10 <z_arm_interrupt_init>:
    7b10:	4804      	ldr	r0, [pc, #16]	; (7b24 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    7b12:	2300      	movs	r3, #0
    7b14:	2120      	movs	r1, #32
    7b16:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    7b18:	3301      	adds	r3, #1
    7b1a:	2b30      	cmp	r3, #48	; 0x30
    7b1c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    7b20:	d1f9      	bne.n	7b16 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    7b22:	4770      	bx	lr
    7b24:	e000e100 	.word	0xe000e100

00007b28 <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
    7b28:	b538      	push	{r3, r4, r5, lr}
    7b2a:	4604      	mov	r4, r0
	__asm__ volatile(
    7b2c:	f04f 0320 	mov.w	r3, #32
    7b30:	f3ef 8511 	mrs	r5, BASEPRI
    7b34:	f383 8811 	msr	BASEPRI, r3
    7b38:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	z_thread_single_abort(thread);
    7b3c:	f015 fc76 	bl	1d42c <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
    7b40:	4b0a      	ldr	r3, [pc, #40]	; (7b6c <z_impl_k_thread_abort+0x44>)
    7b42:	689b      	ldr	r3, [r3, #8]
    7b44:	42a3      	cmp	r3, r4
    7b46:	d10b      	bne.n	7b60 <z_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    7b48:	4b09      	ldr	r3, [pc, #36]	; (7b70 <z_impl_k_thread_abort+0x48>)
    7b4a:	685a      	ldr	r2, [r3, #4]
    7b4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
    7b50:	b912      	cbnz	r2, 7b58 <z_impl_k_thread_abort+0x30>
	int ret;
	z_check_stack_sentinel();
#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = arch_swap(key);
    7b52:	4628      	mov	r0, r5
    7b54:	f7ff fc26 	bl	73a4 <arch_swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    7b58:	685a      	ldr	r2, [r3, #4]
    7b5a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    7b5e:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
    7b60:	4628      	mov	r0, r5
}
    7b62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
    7b66:	f01b b950 	b.w	22e0a <z_reschedule_irqlock>
    7b6a:	bf00      	nop
    7b6c:	2000a260 	.word	0x2000a260
    7b70:	e000ed00 	.word	0xe000ed00

00007b74 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    7b74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		.size = (uint32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
    7b76:	4b08      	ldr	r3, [pc, #32]	; (7b98 <z_arm_configure_static_mpu_regions+0x24>)
    7b78:	9301      	str	r3, [sp, #4]
    7b7a:	4b08      	ldr	r3, [pc, #32]	; (7b9c <z_arm_configure_static_mpu_regions+0x28>)
    7b7c:	9302      	str	r3, [sp, #8]
    7b7e:	4b08      	ldr	r3, [pc, #32]	; (7ba0 <z_arm_configure_static_mpu_regions+0x2c>)
    7b80:	9303      	str	r3, [sp, #12]

	/* Define a constant array of k_mem_partition objects
	 * to hold the configuration of the respective static
	 * MPU regions.
	 */
	const struct k_mem_partition *static_regions[] = {
    7b82:	ab01      	add	r3, sp, #4
    7b84:	9300      	str	r3, [sp, #0]
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    7b86:	4a07      	ldr	r2, [pc, #28]	; (7ba4 <z_arm_configure_static_mpu_regions+0x30>)
    7b88:	4b07      	ldr	r3, [pc, #28]	; (7ba8 <z_arm_configure_static_mpu_regions+0x34>)
    7b8a:	2101      	movs	r1, #1
    7b8c:	4668      	mov	r0, sp
    7b8e:	f000 f8af 	bl	7cf0 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    7b92:	b005      	add	sp, #20
    7b94:	f85d fb04 	ldr.w	pc, [sp], #4
    7b98:	20000000 	.word	0x20000000
    7b9c:	00000000 	.word	0x00000000
    7ba0:	060b0000 	.word	0x060b0000
    7ba4:	20000000 	.word	0x20000000
    7ba8:	20040000 	.word	0x20040000

00007bac <mpu_configure_regions>:
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
    7bac:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 7c6c <mpu_configure_regions+0xc0>
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct k_mem_partition
	*regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    7bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7bb2:	4606      	mov	r6, r0
    7bb4:	460f      	mov	r7, r1
	int i;
	int reg_index = start_reg_index;
    7bb6:	4610      	mov	r0, r2

	for (i = 0; i < regions_num; i++) {
    7bb8:	2100      	movs	r1, #0
    7bba:	42b9      	cmp	r1, r7
    7bbc:	da1b      	bge.n	7bf6 <mpu_configure_regions+0x4a>
		if (regions[i]->size == 0U) {
    7bbe:	f856 e021 	ldr.w	lr, [r6, r1, lsl #2]
    7bc2:	f8de 4004 	ldr.w	r4, [lr, #4]
    7bc6:	2c00      	cmp	r4, #0
    7bc8:	d046      	beq.n	7c58 <mpu_configure_regions+0xac>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    7bca:	b1ab      	cbz	r3, 7bf8 <mpu_configure_regions+0x4c>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1)) == 0U)
    7bcc:	1e65      	subs	r5, r4, #1
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    7bce:	422c      	tst	r4, r5
    7bd0:	d105      	bne.n	7bde <mpu_configure_regions+0x32>
		&&
    7bd2:	2c1f      	cmp	r4, #31
    7bd4:	d903      	bls.n	7bde <mpu_configure_regions+0x32>
		((part->start & (part->size - 1)) == 0U);
    7bd6:	f8de 2000 	ldr.w	r2, [lr]
		&&
    7bda:	4215      	tst	r5, r2
    7bdc:	d00c      	beq.n	7bf8 <mpu_configure_regions+0x4c>
    7bde:	4a1f      	ldr	r2, [pc, #124]	; (7c5c <mpu_configure_regions+0xb0>)
    7be0:	4b1f      	ldr	r3, [pc, #124]	; (7c60 <mpu_configure_regions+0xb4>)
				(!mpu_partition_is_valid(regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    7be2:	4820      	ldr	r0, [pc, #128]	; (7c64 <mpu_configure_regions+0xb8>)
    7be4:	1ad2      	subs	r2, r2, r3
    7be6:	08d2      	lsrs	r2, r2, #3
    7be8:	0192      	lsls	r2, r2, #6
    7bea:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    7bee:	f016 fc79 	bl	1e4e4 <log_1>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, regions[i]);
    7bf2:	f06f 0015 	mvn.w	r0, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    7bf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    7bf8:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, regions[i]);
    7bfa:	b2c5      	uxtb	r5, r0
	region_conf.base = new_region->start;
    7bfc:	f8de 2000 	ldr.w	r2, [lr]
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
    7c00:	f8de 0008 	ldr.w	r0, [lr, #8]
    7c04:	d916      	bls.n	7c34 <mpu_configure_regions+0x88>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
    7c06:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    7c0a:	d815      	bhi.n	7c38 <mpu_configure_regions+0x8c>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    7c0c:	3c01      	subs	r4, #1
    7c0e:	fab4 f484 	clz	r4, r4
    7c12:	f1c4 041f 	rsb	r4, r4, #31
    7c16:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1)) {
    7c18:	2d07      	cmp	r5, #7
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    7c1a:	ea44 0400 	orr.w	r4, r4, r0
    7c1e:	d90d      	bls.n	7c3c <mpu_configure_regions+0x90>
    7c20:	4a0e      	ldr	r2, [pc, #56]	; (7c5c <mpu_configure_regions+0xb0>)
    7c22:	4b0f      	ldr	r3, [pc, #60]	; (7c60 <mpu_configure_regions+0xb4>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    7c24:	4810      	ldr	r0, [pc, #64]	; (7c68 <mpu_configure_regions+0xbc>)
    7c26:	1ad2      	subs	r2, r2, r3
    7c28:	08d2      	lsrs	r2, r2, #3
    7c2a:	0192      	lsls	r2, r2, #6
    7c2c:	f042 0201 	orr.w	r2, r2, #1
    7c30:	4629      	mov	r1, r5
    7c32:	e7dc      	b.n	7bee <mpu_configure_regions+0x42>
		return REGION_32B;
    7c34:	2408      	movs	r4, #8
    7c36:	e7ef      	b.n	7c18 <mpu_configure_regions+0x6c>
		return REGION_4G;
    7c38:	243e      	movs	r4, #62	; 0x3e
    7c3a:	e7ed      	b.n	7c18 <mpu_configure_regions+0x6c>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    7c3c:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
    7c40:	432a      	orrs	r2, r5
    7c42:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    7c46:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
    7c4a:	f8cc 5008 	str.w	r5, [ip, #8]
		reg_index++;
    7c4e:	1c68      	adds	r0, r5, #1
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    7c50:	f8cc 200c 	str.w	r2, [ip, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    7c54:	f8cc 4010 	str.w	r4, [ip, #16]
	for (i = 0; i < regions_num; i++) {
    7c58:	3101      	adds	r1, #1
    7c5a:	e7ae      	b.n	7bba <mpu_configure_regions+0xe>
    7c5c:	000237e8 	.word	0x000237e8
    7c60:	000236e8 	.word	0x000236e8
    7c64:	0002563b 	.word	0x0002563b
    7c68:	0002565e 	.word	0x0002565e
    7c6c:	e000ed90 	.word	0xe000ed90

00007c70 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    7c70:	4b03      	ldr	r3, [pc, #12]	; (7c80 <arm_core_mpu_enable+0x10>)
    7c72:	2205      	movs	r2, #5
    7c74:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    7c76:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7c7a:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    7c7e:	4770      	bx	lr
    7c80:	e000ed90 	.word	0xe000ed90

00007c84 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    7c84:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    7c88:	4b01      	ldr	r3, [pc, #4]	; (7c90 <arm_core_mpu_disable+0xc>)
    7c8a:	2200      	movs	r2, #0
    7c8c:	605a      	str	r2, [r3, #4]
}
    7c8e:	4770      	bx	lr
    7c90:	e000ed90 	.word	0xe000ed90

00007c94 <arm_mpu_init>:
 */
static int arm_mpu_init(struct device *arg)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    7c94:	4913      	ldr	r1, [pc, #76]	; (7ce4 <arm_mpu_init+0x50>)
    7c96:	6808      	ldr	r0, [r1, #0]
    7c98:	2808      	cmp	r0, #8
{
    7c9a:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    7c9c:	d81e      	bhi.n	7cdc <arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    7c9e:	f7ff fff1 	bl	7c84 <arm_core_mpu_disable>
	MPU->RNR = index;
    7ca2:	4c11      	ldr	r4, [pc, #68]	; (7ce8 <arm_mpu_init+0x54>)
    7ca4:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    7ca6:	2200      	movs	r2, #0
    7ca8:	4290      	cmp	r0, r2
    7caa:	f101 010c 	add.w	r1, r1, #12
    7cae:	d105      	bne.n	7cbc <arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    7cb0:	4b0e      	ldr	r3, [pc, #56]	; (7cec <arm_mpu_init+0x58>)
    7cb2:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    7cb4:	f7ff ffdc 	bl	7c70 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
    7cb8:	2000      	movs	r0, #0
}
    7cba:	bd10      	pop	{r4, pc}
    7cbc:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    7cbe:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    7cc2:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    7cc6:	4313      	orrs	r3, r2
    7cc8:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    7ccc:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    7cce:	f851 3c04 	ldr.w	r3, [r1, #-4]
    7cd2:	f043 0301 	orr.w	r3, r3, #1
    7cd6:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    7cd8:	3201      	adds	r2, #1
    7cda:	e7e5      	b.n	7ca8 <arm_mpu_init+0x14>
		return -1;
    7cdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    7ce0:	e7eb      	b.n	7cba <arm_mpu_init+0x26>
    7ce2:	bf00      	nop
    7ce4:	00023a9c 	.word	0x00023a9c
    7ce8:	e000ed90 	.word	0xe000ed90
    7cec:	2000a70c 	.word	0x2000a70c

00007cf0 <arm_core_mpu_configure_static_mpu_regions>:
{
    7cf0:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    7cf2:	4c03      	ldr	r4, [pc, #12]	; (7d00 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    7cf4:	2301      	movs	r3, #1
    7cf6:	7822      	ldrb	r2, [r4, #0]
    7cf8:	f7ff ff58 	bl	7bac <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    7cfc:	7020      	strb	r0, [r4, #0]
}
    7cfe:	bd10      	pop	{r4, pc}
    7d00:	2000a70c 	.word	0x2000a70c

00007d04 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    7d04:	4b01      	ldr	r3, [pc, #4]	; (7d0c <__stdout_hook_install+0x8>)
    7d06:	6018      	str	r0, [r3, #0]
}
    7d08:	4770      	bx	lr
    7d0a:	bf00      	nop
    7d0c:	20000150 	.word	0x20000150

00007d10 <nordicsemi_nrf52_init>:
    7d10:	f04f 0320 	mov.w	r3, #32
    7d14:	f3ef 8211 	mrs	r2, BASEPRI
    7d18:	f383 8811 	msr	BASEPRI, r3
    7d1c:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    7d20:	4906      	ldr	r1, [pc, #24]	; (7d3c <nordicsemi_nrf52_init+0x2c>)
    7d22:	2301      	movs	r3, #1
    7d24:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    7d28:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    7d2c:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    7d30:	f382 8811 	msr	BASEPRI, r2
    7d34:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    7d38:	2000      	movs	r0, #0
    7d3a:	4770      	bx	lr
    7d3c:	4001e000 	.word	0x4001e000

00007d40 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    7d40:	b120      	cbz	r0, 7d4c <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    7d42:	4b03      	ldr	r3, [pc, #12]	; (7d50 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    7d44:	0180      	lsls	r0, r0, #6
    7d46:	f043 0301 	orr.w	r3, r3, #1
    7d4a:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    7d4c:	4770      	bx	lr
    7d4e:	bf00      	nop
    7d50:	00023900 	.word	0x00023900

00007d54 <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
    7d54:	4b0e      	ldr	r3, [pc, #56]	; (7d90 <bt_hex_real+0x3c>)
    7d56:	2940      	cmp	r1, #64	; 0x40
{
    7d58:	b570      	push	{r4, r5, r6, lr}
	len = MIN(len, (sizeof(str) - 1) / 2);
    7d5a:	bf28      	it	cs
    7d5c:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
    7d5e:	4c0d      	ldr	r4, [pc, #52]	; (7d94 <bt_hex_real+0x40>)
    7d60:	1846      	adds	r6, r0, r1
    7d62:	461d      	mov	r5, r3
	for (i = 0; i < len; i++) {
    7d64:	42b0      	cmp	r0, r6
    7d66:	f103 0302 	add.w	r3, r3, #2
    7d6a:	d104      	bne.n	7d76 <bt_hex_real+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    7d6c:	2300      	movs	r3, #0
    7d6e:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
    7d72:	4807      	ldr	r0, [pc, #28]	; (7d90 <bt_hex_real+0x3c>)
    7d74:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
    7d76:	7802      	ldrb	r2, [r0, #0]
    7d78:	0912      	lsrs	r2, r2, #4
    7d7a:	5ca2      	ldrb	r2, [r4, r2]
    7d7c:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    7d80:	f810 2b01 	ldrb.w	r2, [r0], #1
    7d84:	f002 020f 	and.w	r2, r2, #15
    7d88:	5ca2      	ldrb	r2, [r4, r2]
    7d8a:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
    7d8e:	e7e9      	b.n	7d64 <bt_hex_real+0x10>
    7d90:	2000a70d 	.word	0x2000a70d
    7d94:	00025697 	.word	0x00025697

00007d98 <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
    7d98:	b530      	push	{r4, r5, lr}
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    7d9a:	7803      	ldrb	r3, [r0, #0]
    7d9c:	b08b      	sub	sp, #44	; 0x2c
    7d9e:	4604      	mov	r4, r0
    7da0:	ad07      	add	r5, sp, #28
    7da2:	2b03      	cmp	r3, #3
    7da4:	d821      	bhi.n	7dea <bt_addr_le_str_real+0x52>
    7da6:	e8df f003 	tbb	[pc, r3]
    7daa:	1a02      	.short	0x1a02
    7dac:	1e1c      	.short	0x1e1c
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    7dae:	4912      	ldr	r1, [pc, #72]	; (7df8 <bt_addr_le_str_real+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    7db0:	4628      	mov	r0, r5
    7db2:	f018 f81c 	bl	1fdee <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    7db6:	7863      	ldrb	r3, [r4, #1]
    7db8:	9304      	str	r3, [sp, #16]
    7dba:	78a3      	ldrb	r3, [r4, #2]
    7dbc:	9303      	str	r3, [sp, #12]
    7dbe:	78e3      	ldrb	r3, [r4, #3]
    7dc0:	9302      	str	r3, [sp, #8]
    7dc2:	7923      	ldrb	r3, [r4, #4]
    7dc4:	9301      	str	r3, [sp, #4]
    7dc6:	7963      	ldrb	r3, [r4, #5]
    7dc8:	9300      	str	r3, [sp, #0]
    7dca:	4a0c      	ldr	r2, [pc, #48]	; (7dfc <bt_addr_le_str_real+0x64>)
    7dcc:	79a3      	ldrb	r3, [r4, #6]
    7dce:	9505      	str	r5, [sp, #20]
    7dd0:	211e      	movs	r1, #30
    7dd2:	480b      	ldr	r0, [pc, #44]	; (7e00 <bt_addr_le_str_real+0x68>)
    7dd4:	f016 f8c6 	bl	1df64 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
    7dd8:	4809      	ldr	r0, [pc, #36]	; (7e00 <bt_addr_le_str_real+0x68>)
    7dda:	b00b      	add	sp, #44	; 0x2c
    7ddc:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
    7dde:	4909      	ldr	r1, [pc, #36]	; (7e04 <bt_addr_le_str_real+0x6c>)
    7de0:	e7e6      	b.n	7db0 <bt_addr_le_str_real+0x18>
		strcpy(type, "public-id");
    7de2:	4909      	ldr	r1, [pc, #36]	; (7e08 <bt_addr_le_str_real+0x70>)
    7de4:	e7e4      	b.n	7db0 <bt_addr_le_str_real+0x18>
		strcpy(type, "random-id");
    7de6:	4909      	ldr	r1, [pc, #36]	; (7e0c <bt_addr_le_str_real+0x74>)
    7de8:	e7e2      	b.n	7db0 <bt_addr_le_str_real+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    7dea:	4a09      	ldr	r2, [pc, #36]	; (7e10 <bt_addr_le_str_real+0x78>)
    7dec:	210a      	movs	r1, #10
    7dee:	4628      	mov	r0, r5
    7df0:	f016 f8b8 	bl	1df64 <snprintk>
		break;
    7df4:	e7df      	b.n	7db6 <bt_addr_le_str_real+0x1e>
    7df6:	bf00      	nop
    7df8:	00024f20 	.word	0x00024f20
    7dfc:	00024f42 	.word	0x00024f42
    7e00:	2000a78e 	.word	0x2000a78e
    7e04:	00024f27 	.word	0x00024f27
    7e08:	00024f2e 	.word	0x00024f2e
    7e0c:	00024f38 	.word	0x00024f38
    7e10:	00026be6 	.word	0x00026be6

00007e14 <ecc_thread>:

	bt_recv(buf);
}

static void ecc_thread(void *p1, void *p2, void *p3)
{
    7e14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7e18:	4b64      	ldr	r3, [pc, #400]	; (7fac <ecc_thread+0x198>)
    7e1a:	4d65      	ldr	r5, [pc, #404]	; (7fb0 <ecc_thread+0x19c>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7e1c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 7fd0 <ecc_thread+0x1bc>
	return z_impl_k_sem_take(sem, timeout);
    7e20:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 7fd4 <ecc_thread+0x1c0>
    7e24:	1aed      	subs	r5, r5, r3
    7e26:	08ed      	lsrs	r5, r5, #3
    7e28:	4647      	mov	r7, r8
    7e2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7e2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7e32:	4648      	mov	r0, r9
    7e34:	f015 fcc2 	bl	1d7bc <z_impl_k_sem_take>
    7e38:	f3bf 8f5b 	dmb	ish
    7e3c:	f8d8 4000 	ldr.w	r4, [r8]
    7e40:	f3bf 8f5b 	dmb	ish
	while (true) {
		k_sem_take(&cmd_sem, K_FOREVER);

		if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    7e44:	f014 0401 	ands.w	r4, r4, #1
    7e48:	d05a      	beq.n	7f00 <ecc_thread+0xec>
		rc = uECC_make_key(ecc.pk, ecc.private_key, &curve_secp256r1);
    7e4a:	f8df a17c 	ldr.w	sl, [pc, #380]	; 7fc8 <ecc_thread+0x1b4>
    7e4e:	4c59      	ldr	r4, [pc, #356]	; (7fb4 <ecc_thread+0x1a0>)
	} while (memcmp(ecc.private_key, debug_private_key, 32) == 0);
    7e50:	4e59      	ldr	r6, [pc, #356]	; (7fb8 <ecc_thread+0x1a4>)
		rc = uECC_make_key(ecc.pk, ecc.private_key, &curve_secp256r1);
    7e52:	485a      	ldr	r0, [pc, #360]	; (7fbc <ecc_thread+0x1a8>)
    7e54:	4652      	mov	r2, sl
    7e56:	4621      	mov	r1, r4
    7e58:	f016 ff0b 	bl	1ec72 <uECC_make_key>
		if (rc == TC_CRYPTO_FAIL) {
    7e5c:	bbe8      	cbnz	r0, 7eda <ecc_thread+0xc6>
			BT_ERR("Failed to create ECC public/private pair");
    7e5e:	01a9      	lsls	r1, r5, #6
    7e60:	4857      	ldr	r0, [pc, #348]	; (7fc0 <ecc_thread+0x1ac>)
    7e62:	f041 0101 	orr.w	r1, r1, #1
    7e66:	f016 fb30 	bl	1e4ca <log_0>
			return BT_HCI_ERR_UNSPECIFIED;
    7e6a:	f04f 0a1f 	mov.w	sl, #31
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    7e6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7e72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7e76:	2001      	movs	r0, #1
    7e78:	f002 f9f0 	bl	a25c <bt_buf_get_rx>
	hdr = net_buf_add(buf, sizeof(*hdr));
    7e7c:	f100 0608 	add.w	r6, r0, #8
    7e80:	2102      	movs	r1, #2
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    7e82:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    7e84:	4630      	mov	r0, r6
    7e86:	f01a fb83 	bl	22590 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
    7e8a:	233e      	movs	r3, #62	; 0x3e
    7e8c:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
    7e8e:	2342      	movs	r3, #66	; 0x42
    7e90:	7043      	strb	r3, [r0, #1]
	meta = net_buf_add(buf, sizeof(*meta));
    7e92:	2101      	movs	r1, #1
    7e94:	4630      	mov	r0, r6
    7e96:	f01a fb7b 	bl	22590 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
    7e9a:	2308      	movs	r3, #8
    7e9c:	7003      	strb	r3, [r0, #0]
	evt = net_buf_add(buf, sizeof(*evt));
    7e9e:	2141      	movs	r1, #65	; 0x41
    7ea0:	4630      	mov	r0, r6
    7ea2:	f01a fb75 	bl	22590 <net_buf_simple_add>
    7ea6:	4606      	mov	r6, r0
	evt->status = status;
    7ea8:	f800 ab01 	strb.w	sl, [r0], #1
	if (status) {
    7eac:	f1ba 0f00 	cmp.w	sl, #0
    7eb0:	d01d      	beq.n	7eee <ecc_thread+0xda>
		(void)memset(evt->key, 0, sizeof(evt->key));
    7eb2:	2240      	movs	r2, #64	; 0x40
    7eb4:	2100      	movs	r1, #0
    7eb6:	f018 f805 	bl	1fec4 <memset>
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7eba:	f3bf 8f5b 	dmb	ish
    7ebe:	e857 3f00 	ldrex	r3, [r7]
    7ec2:	f023 0301 	bic.w	r3, r3, #1
    7ec6:	e847 3200 	strex	r2, r3, [r7]
    7eca:	2a00      	cmp	r2, #0
    7ecc:	d1f7      	bne.n	7ebe <ecc_thread+0xaa>
    7ece:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
    7ed2:	4620      	mov	r0, r4
	bt_recv(buf);
    7ed4:	f001 fe1c 	bl	9b10 <bt_recv>
	while (true) {
    7ed8:	e7a7      	b.n	7e2a <ecc_thread+0x16>
	} while (memcmp(ecc.private_key, debug_private_key, 32) == 0);
    7eda:	2220      	movs	r2, #32
    7edc:	4631      	mov	r1, r6
    7ede:	4620      	mov	r0, r4
    7ee0:	f017 ffb5 	bl	1fe4e <memcmp>
    7ee4:	2800      	cmp	r0, #0
    7ee6:	d0b4      	beq.n	7e52 <ecc_thread+0x3e>
	return 0;
    7ee8:	f04f 0a00 	mov.w	sl, #0
    7eec:	e7bf      	b.n	7e6e <ecc_thread+0x5a>
		sys_memcpy_swap(evt->key, ecc.pk, 32);
    7eee:	4933      	ldr	r1, [pc, #204]	; (7fbc <ecc_thread+0x1a8>)
    7ef0:	f018 f87b 	bl	1ffea <sys_memcpy_swap.constprop.0>
		sys_memcpy_swap(&evt->key[32], &ecc.pk[32], 32);
    7ef4:	4933      	ldr	r1, [pc, #204]	; (7fc4 <ecc_thread+0x1b0>)
    7ef6:	f106 0021 	add.w	r0, r6, #33	; 0x21
    7efa:	f018 f876 	bl	1ffea <sys_memcpy_swap.constprop.0>
    7efe:	e7dc      	b.n	7eba <ecc_thread+0xa6>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7f00:	f3bf 8f5b 	dmb	ish
    7f04:	f8d8 3000 	ldr.w	r3, [r8]
    7f08:	f3bf 8f5b 	dmb	ish
			emulate_le_p256_public_key_cmd();
		} else if (atomic_test_bit(flags, PENDING_DHKEY)) {
    7f0c:	079b      	lsls	r3, r3, #30
    7f0e:	d58c      	bpl.n	7e2a <ecc_thread+0x16>
	ret = uECC_valid_public_key(ecc.pk, &curve_secp256r1);
    7f10:	492d      	ldr	r1, [pc, #180]	; (7fc8 <ecc_thread+0x1b4>)
    7f12:	482a      	ldr	r0, [pc, #168]	; (7fbc <ecc_thread+0x1a8>)
    7f14:	f017 fd7c 	bl	1fa10 <uECC_valid_public_key>
	if (ret < 0) {
    7f18:	1e01      	subs	r1, r0, #0
    7f1a:	da38      	bge.n	7f8e <ecc_thread+0x17a>
		BT_ERR("public key is not valid (ret %d)", ret);
    7f1c:	01aa      	lsls	r2, r5, #6
    7f1e:	482b      	ldr	r0, [pc, #172]	; (7fcc <ecc_thread+0x1b8>)
    7f20:	f042 0201 	orr.w	r2, r2, #1
    7f24:	f016 fade 	bl	1e4e4 <log_1>
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    7f28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7f2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7f30:	2001      	movs	r0, #1
    7f32:	f002 f993 	bl	a25c <bt_buf_get_rx>
	hdr = net_buf_add(buf, sizeof(*hdr));
    7f36:	f100 0a08 	add.w	sl, r0, #8
    7f3a:	2102      	movs	r1, #2
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    7f3c:	4606      	mov	r6, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    7f3e:	4650      	mov	r0, sl
    7f40:	f01a fb26 	bl	22590 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
    7f44:	233e      	movs	r3, #62	; 0x3e
    7f46:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
    7f48:	2322      	movs	r3, #34	; 0x22
    7f4a:	7043      	strb	r3, [r0, #1]
	meta = net_buf_add(buf, sizeof(*meta));
    7f4c:	2101      	movs	r1, #1
    7f4e:	4650      	mov	r0, sl
    7f50:	f01a fb1e 	bl	22590 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
    7f54:	2309      	movs	r3, #9
    7f56:	7003      	strb	r3, [r0, #0]
	evt = net_buf_add(buf, sizeof(*evt));
    7f58:	2121      	movs	r1, #33	; 0x21
    7f5a:	4650      	mov	r0, sl
    7f5c:	f01a fb18 	bl	22590 <net_buf_simple_add>
    7f60:	4603      	mov	r3, r0
	if (ret == TC_CRYPTO_FAIL) {
    7f62:	3001      	adds	r0, #1
    7f64:	b9e4      	cbnz	r4, 7fa0 <ecc_thread+0x18c>
		evt->status = BT_HCI_ERR_UNSPECIFIED;
    7f66:	221f      	movs	r2, #31
    7f68:	701a      	strb	r2, [r3, #0]
		(void)memset(evt->dhkey, 0, sizeof(evt->dhkey));
    7f6a:	4621      	mov	r1, r4
    7f6c:	2220      	movs	r2, #32
    7f6e:	f017 ffa9 	bl	1fec4 <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7f72:	f3bf 8f5b 	dmb	ish
    7f76:	e857 3f00 	ldrex	r3, [r7]
    7f7a:	f023 0302 	bic.w	r3, r3, #2
    7f7e:	e847 3200 	strex	r2, r3, [r7]
    7f82:	2a00      	cmp	r2, #0
    7f84:	d1f7      	bne.n	7f76 <ecc_thread+0x162>
    7f86:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
    7f8a:	4630      	mov	r0, r6
    7f8c:	e7a2      	b.n	7ed4 <ecc_thread+0xc0>
		ret = uECC_shared_secret(ecc.pk, ecc.private_key, ecc.dhkey,
    7f8e:	4a0b      	ldr	r2, [pc, #44]	; (7fbc <ecc_thread+0x1a8>)
    7f90:	4b0d      	ldr	r3, [pc, #52]	; (7fc8 <ecc_thread+0x1b4>)
    7f92:	f1a2 0120 	sub.w	r1, r2, #32
    7f96:	4610      	mov	r0, r2
    7f98:	f016 feba 	bl	1ed10 <uECC_shared_secret>
    7f9c:	4604      	mov	r4, r0
    7f9e:	e7c3      	b.n	7f28 <ecc_thread+0x114>
		evt->status = 0U;
    7fa0:	2200      	movs	r2, #0
		sys_memcpy_swap(evt->dhkey, ecc.dhkey, sizeof(ecc.dhkey));
    7fa2:	4906      	ldr	r1, [pc, #24]	; (7fbc <ecc_thread+0x1a8>)
		evt->status = 0U;
    7fa4:	701a      	strb	r2, [r3, #0]
		sys_memcpy_swap(evt->dhkey, ecc.dhkey, sizeof(ecc.dhkey));
    7fa6:	f018 f820 	bl	1ffea <sys_memcpy_swap.constprop.0>
    7faa:	e7e2      	b.n	7f72 <ecc_thread+0x15e>
    7fac:	000236e8 	.word	0x000236e8
    7fb0:	000237b0 	.word	0x000237b0
    7fb4:	2000a7ac 	.word	0x2000a7ac
    7fb8:	00023b6c 	.word	0x00023b6c
    7fbc:	2000a7cc 	.word	0x2000a7cc
    7fc0:	000256af 	.word	0x000256af
    7fc4:	2000a7ec 	.word	0x2000a7ec
    7fc8:	00023abc 	.word	0x00023abc
    7fcc:	000256d8 	.word	0x000256d8
    7fd0:	20001ed4 	.word	0x20001ed4
    7fd4:	20000848 	.word	0x20000848

00007fd8 <bt_hci_ecc_send>:

	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
}

int bt_hci_ecc_send(struct net_buf *buf)
{
    7fd8:	b570      	push	{r4, r5, r6, lr}
	 * pointer to an enum causes issues on qemu_x86 because the true
	 * size is 8-bit, but the enum is 32-bit on qemu_x86. So we put in
	 * a temporary cast to 8-bit to ensure only 8 bits are read from
	 * the pointer.
	 */
	return (enum bt_buf_type)(*(uint8_t *)net_buf_user_data(buf));
    7fda:	7d05      	ldrb	r5, [r0, #20]
    7fdc:	4604      	mov	r4, r0
	if (bt_buf_get_type(buf) == BT_BUF_CMD) {
    7fde:	b9ad      	cbnz	r5, 800c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc>
		struct bt_hci_cmd_hdr *chdr = (void *)buf->data;
    7fe0:	6883      	ldr	r3, [r0, #8]

		switch (sys_le16_to_cpu(chdr->opcode)) {
    7fe2:	881a      	ldrh	r2, [r3, #0]
    7fe4:	f242 0125 	movw	r1, #8229	; 0x2025
    7fe8:	428a      	cmp	r2, r1
    7fea:	d017      	beq.n	801c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1c>
    7fec:	f242 0126 	movw	r1, #8230	; 0x2026
    7ff0:	428a      	cmp	r2, r1
    7ff2:	d03c      	beq.n	806e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6e>
    7ff4:	f242 0101 	movw	r1, #8193	; 0x2001
    7ff8:	428a      	cmp	r2, r1
    7ffa:	d107      	bne.n	800c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc>
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
    7ffc:	78da      	ldrb	r2, [r3, #3]
    7ffe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    8002:	70da      	strb	r2, [r3, #3]
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
    8004:	791a      	ldrb	r2, [r3, #4]
    8006:	f022 0201 	bic.w	r2, r2, #1
    800a:	711a      	strb	r2, [r3, #4]
		default:
			break;
		}
	}

	return bt_dev.drv->send(buf);
    800c:	4b31      	ldr	r3, [pc, #196]	; (80d4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd4>)
    800e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    8012:	4620      	mov	r0, r4
    8014:	691b      	ldr	r3, [r3, #16]
}
    8016:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_dev.drv->send(buf);
    801a:	4718      	bx	r3
			net_buf_pull(buf, sizeof(*chdr));
    801c:	2103      	movs	r1, #3
    801e:	3008      	adds	r0, #8
    8020:	f01a faeb 	bl	225fa <net_buf_simple_pull>
	net_buf_unref(buf);
    8024:	4620      	mov	r0, r4
    8026:	f013 fd57 	bl	1bad8 <net_buf_unref>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    802a:	f3bf 8f5b 	dmb	ish
    802e:	4b2a      	ldr	r3, [pc, #168]	; (80d8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd8>)
    8030:	681a      	ldr	r2, [r3, #0]
    8032:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_DHKEY)) {
    8036:	0790      	lsls	r0, r2, #30
    8038:	d507      	bpl.n	804a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4a>
		status = BT_HCI_ERR_CMD_DISALLOWED;
    803a:	250c      	movs	r5, #12
	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
    803c:	4629      	mov	r1, r5
    803e:	f242 0025 	movw	r0, #8229	; 0x2025
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY, status);
    8042:	f017 ffae 	bl	1ffa2 <send_cmd_status>
}
    8046:	2000      	movs	r0, #0
    8048:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    804a:	f3bf 8f5b 	dmb	ish
    804e:	e853 2f00 	ldrex	r2, [r3]
    8052:	f042 0101 	orr.w	r1, r2, #1
    8056:	e843 1000 	strex	r0, r1, [r3]
    805a:	2800      	cmp	r0, #0
    805c:	d1f7      	bne.n	804e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4e>
    805e:	f3bf 8f5b 	dmb	ish
	} else if (atomic_test_and_set_bit(flags, PENDING_PUB_KEY)) {
    8062:	07d1      	lsls	r1, r2, #31
    8064:	d4e9      	bmi.n	803a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3a>
	z_impl_k_sem_give(sem);
    8066:	481d      	ldr	r0, [pc, #116]	; (80dc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xdc>)
    8068:	f015 fb82 	bl	1d770 <z_impl_k_sem_give>
}
    806c:	e7e6      	b.n	803c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3c>
			net_buf_pull(buf, sizeof(*chdr));
    806e:	2103      	movs	r1, #3
    8070:	3008      	adds	r0, #8
    8072:	f01a fac2 	bl	225fa <net_buf_simple_pull>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    8076:	f3bf 8f5b 	dmb	ish
    807a:	4b17      	ldr	r3, [pc, #92]	; (80d8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd8>)
    807c:	681a      	ldr	r2, [r3, #0]
    807e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    8082:	07d2      	lsls	r2, r2, #31
    8084:	d507      	bpl.n	8096 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x96>
		status = BT_HCI_ERR_CMD_DISALLOWED;
    8086:	250c      	movs	r5, #12
	net_buf_unref(buf);
    8088:	4620      	mov	r0, r4
    808a:	f013 fd25 	bl	1bad8 <net_buf_unref>
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY, status);
    808e:	4629      	mov	r1, r5
    8090:	f242 0026 	movw	r0, #8230	; 0x2026
    8094:	e7d5      	b.n	8042 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x42>
	if (buf->len < sizeof(struct bt_hci_cp_le_generate_dhkey)) {
    8096:	89a2      	ldrh	r2, [r4, #12]
    8098:	2a3f      	cmp	r2, #63	; 0x3f
    809a:	d919      	bls.n	80d0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd0>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    809c:	f3bf 8f5b 	dmb	ish
    80a0:	e853 2f00 	ldrex	r2, [r3]
    80a4:	f042 0102 	orr.w	r1, r2, #2
    80a8:	e843 1000 	strex	r0, r1, [r3]
    80ac:	2800      	cmp	r0, #0
    80ae:	d1f7      	bne.n	80a0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa0>
    80b0:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(flags, PENDING_DHKEY)) {
    80b4:	0793      	lsls	r3, r2, #30
    80b6:	d4e6      	bmi.n	8086 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x86>
	cmd = (void *)buf->data;
    80b8:	68a1      	ldr	r1, [r4, #8]
	sys_memcpy_swap(ecc.pk, cmd->key, 32);
    80ba:	4809      	ldr	r0, [pc, #36]	; (80e0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe0>)
    80bc:	f017 ff95 	bl	1ffea <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&ecc.pk[32], &cmd->key[32], 32);
    80c0:	4808      	ldr	r0, [pc, #32]	; (80e4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe4>)
    80c2:	3120      	adds	r1, #32
    80c4:	f017 ff91 	bl	1ffea <sys_memcpy_swap.constprop.0>
	z_impl_k_sem_give(sem);
    80c8:	4804      	ldr	r0, [pc, #16]	; (80dc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xdc>)
    80ca:	f015 fb51 	bl	1d770 <z_impl_k_sem_give>
}
    80ce:	e7db      	b.n	8088 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x88>
		status = BT_HCI_ERR_INVALID_PARAM;
    80d0:	2512      	movs	r5, #18
    80d2:	e7d9      	b.n	8088 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x88>
    80d4:	20000000 	.word	0x20000000
    80d8:	20001ed4 	.word	0x20001ed4
    80dc:	20000848 	.word	0x20000848
    80e0:	2000a7cc 	.word	0x2000a7cc
    80e4:	2000a7ec 	.word	0x2000a7ec

000080e8 <bt_hci_ecc_init>:
{
	return !bt_rand(dst, len);
}

void bt_hci_ecc_init(void)
{
    80e8:	b510      	push	{r4, lr}
    80ea:	b088      	sub	sp, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    80ec:	4c0c      	ldr	r4, [pc, #48]	; (8120 <bt_hci_ecc_init+0x38>)
    80ee:	490d      	ldr	r1, [pc, #52]	; (8124 <bt_hci_ecc_init+0x3c>)
    80f0:	2200      	movs	r2, #0
    80f2:	2300      	movs	r3, #0
    80f4:	e9cd 2306 	strd	r2, r3, [sp, #24]
    80f8:	2300      	movs	r3, #0
    80fa:	220a      	movs	r2, #10
    80fc:	e9cd 2303 	strd	r2, r3, [sp, #12]
    8100:	e9cd 3301 	strd	r3, r3, [sp, #4]
    8104:	9300      	str	r3, [sp, #0]
    8106:	f240 424c 	movw	r2, #1100	; 0x44c
    810a:	4b07      	ldr	r3, [pc, #28]	; (8128 <bt_hci_ecc_init+0x40>)
    810c:	4620      	mov	r0, r4
    810e:	f015 fbbd 	bl	1d88c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    8112:	4906      	ldr	r1, [pc, #24]	; (812c <bt_hci_ecc_init+0x44>)
    8114:	4620      	mov	r0, r4
	k_thread_create(&ecc_thread_data, ecc_thread_stack,
			K_THREAD_STACK_SIZEOF(ecc_thread_stack), ecc_thread,
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecc_thread_data, "BT ECC");
}
    8116:	b008      	add	sp, #32
    8118:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    811c:	f01a bf7d 	b.w	2301a <z_impl_k_thread_name_set>
    8120:	20000ad0 	.word	0x20000ad0
    8124:	2000b2b0 	.word	0x2000b2b0
    8128:	00007e15 	.word	0x00007e15
    812c:	000256f9 	.word	0x000256f9

00008130 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    8130:	b4f0      	push	{r4, r5, r6, r7}
	switch (src->type) {
    8132:	7802      	ldrb	r2, [r0, #0]
    8134:	2a01      	cmp	r2, #1
{
    8136:	4604      	mov	r4, r0
    8138:	460b      	mov	r3, r1
	switch (src->type) {
    813a:	d016      	beq.n	816a <uuid_to_uuid128+0x3a>
    813c:	2a02      	cmp	r2, #2
    813e:	d02c      	beq.n	819a <uuid_to_uuid128+0x6a>
    8140:	b98a      	cbnz	r2, 8166 <uuid_to_uuid128+0x36>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
    8142:	4a19      	ldr	r2, [pc, #100]	; (81a8 <uuid_to_uuid128+0x78>)
    8144:	460d      	mov	r5, r1
    8146:	f102 0710 	add.w	r7, r2, #16
    814a:	6810      	ldr	r0, [r2, #0]
    814c:	6851      	ldr	r1, [r2, #4]
    814e:	462e      	mov	r6, r5
    8150:	c603      	stmia	r6!, {r0, r1}
    8152:	3208      	adds	r2, #8
    8154:	42ba      	cmp	r2, r7
    8156:	4635      	mov	r5, r6
    8158:	d1f7      	bne.n	814a <uuid_to_uuid128+0x1a>
    815a:	7812      	ldrb	r2, [r2, #0]
    815c:	7032      	strb	r2, [r6, #0]
		sys_put_le16(BT_UUID_16(src)->val,
    815e:	8862      	ldrh	r2, [r4, #2]
	dst[0] = val;
    8160:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    8162:	0a12      	lsrs	r2, r2, #8
    8164:	739a      	strb	r2, [r3, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    8166:	bcf0      	pop	{r4, r5, r6, r7}
    8168:	4770      	bx	lr
		*dst = uuid128_base;
    816a:	4a0f      	ldr	r2, [pc, #60]	; (81a8 <uuid_to_uuid128+0x78>)
    816c:	460d      	mov	r5, r1
    816e:	f102 0710 	add.w	r7, r2, #16
    8172:	6810      	ldr	r0, [r2, #0]
    8174:	6851      	ldr	r1, [r2, #4]
    8176:	462e      	mov	r6, r5
    8178:	c603      	stmia	r6!, {r0, r1}
    817a:	3208      	adds	r2, #8
    817c:	42ba      	cmp	r2, r7
    817e:	4635      	mov	r5, r6
    8180:	d1f7      	bne.n	8172 <uuid_to_uuid128+0x42>
    8182:	7812      	ldrb	r2, [r2, #0]
    8184:	7032      	strb	r2, [r6, #0]
		sys_put_le32(BT_UUID_32(src)->val,
    8186:	6862      	ldr	r2, [r4, #4]
	dst[0] = val;
    8188:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    818a:	f3c2 2107 	ubfx	r1, r2, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
    818e:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
    8190:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
    8192:	0a12      	lsrs	r2, r2, #8
    8194:	7399      	strb	r1, [r3, #14]
    8196:	741a      	strb	r2, [r3, #16]
}
    8198:	e7e5      	b.n	8166 <uuid_to_uuid128+0x36>
		memcpy(dst, src, sizeof(*dst));
    819a:	4601      	mov	r1, r0
}
    819c:	bcf0      	pop	{r4, r5, r6, r7}
		memcpy(dst, src, sizeof(*dst));
    819e:	2211      	movs	r2, #17
    81a0:	4618      	mov	r0, r3
    81a2:	f017 be64 	b.w	1fe6e <memcpy>
    81a6:	bf00      	nop
    81a8:	0002570b 	.word	0x0002570b

000081ac <le_dhkey_complete>:
{
    81ac:	b510      	push	{r4, lr}
	if (dh_key_cb) {
    81ae:	4c06      	ldr	r4, [pc, #24]	; (81c8 <le_dhkey_complete+0x1c>)
    81b0:	6822      	ldr	r2, [r4, #0]
    81b2:	b132      	cbz	r2, 81c2 <le_dhkey_complete+0x16>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
    81b4:	6880      	ldr	r0, [r0, #8]
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    81b6:	7803      	ldrb	r3, [r0, #0]
    81b8:	b923      	cbnz	r3, 81c4 <le_dhkey_complete+0x18>
    81ba:	3001      	adds	r0, #1
    81bc:	4790      	blx	r2
		dh_key_cb = NULL;
    81be:	2300      	movs	r3, #0
    81c0:	6023      	str	r3, [r4, #0]
}
    81c2:	bd10      	pop	{r4, pc}
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    81c4:	2000      	movs	r0, #0
    81c6:	e7f9      	b.n	81bc <le_dhkey_complete+0x10>
    81c8:	200021d8 	.word	0x200021d8

000081cc <ver_str>:
{
    81cc:	b570      	push	{r4, r5, r6, lr}
	const char * const str[] = {
    81ce:	4d0b      	ldr	r5, [pc, #44]	; (81fc <ver_str+0x30>)
{
    81d0:	4606      	mov	r6, r0
	const char * const str[] = {
    81d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
    81d4:	b08c      	sub	sp, #48	; 0x30
	const char * const str[] = {
    81d6:	466c      	mov	r4, sp
    81d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    81da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    81dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    81de:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    81e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (ver < ARRAY_SIZE(str)) {
    81e6:	2e0b      	cmp	r6, #11
		return str[ver];
    81e8:	bf9b      	ittet	ls
    81ea:	ab0c      	addls	r3, sp, #48	; 0x30
    81ec:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
	return "unknown";
    81f0:	4803      	ldrhi	r0, [pc, #12]	; (8200 <ver_str+0x34>)
		return str[ver];
    81f2:	f856 0c30 	ldrls.w	r0, [r6, #-48]
}
    81f6:	b00c      	add	sp, #48	; 0x30
    81f8:	bd70      	pop	{r4, r5, r6, pc}
    81fa:	bf00      	nop
    81fc:	00023884 	.word	0x00023884
    8200:	00025807 	.word	0x00025807

00008204 <hci_data_buf_overflow>:
    8204:	4905      	ldr	r1, [pc, #20]	; (821c <hci_data_buf_overflow+0x18>)
    8206:	4a06      	ldr	r2, [pc, #24]	; (8220 <hci_data_buf_overflow+0x1c>)
	struct bt_hci_evt_data_buf_overflow *evt = (void *)buf->data;
    8208:	6883      	ldr	r3, [r0, #8]
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
    820a:	4806      	ldr	r0, [pc, #24]	; (8224 <hci_data_buf_overflow+0x20>)
    820c:	1a52      	subs	r2, r2, r1
    820e:	08d2      	lsrs	r2, r2, #3
    8210:	0192      	lsls	r2, r2, #6
    8212:	7819      	ldrb	r1, [r3, #0]
    8214:	f042 0202 	orr.w	r2, r2, #2
    8218:	f016 b964 	b.w	1e4e4 <log_1>
    821c:	000236e8 	.word	0x000236e8
    8220:	000237a8 	.word	0x000237a8
    8224:	0002580f 	.word	0x0002580f

00008228 <le_pkey_complete>:
{
    8228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
    822a:	6886      	ldr	r6, [r0, #8]
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    822c:	480f      	ldr	r0, [pc, #60]	; (826c <le_pkey_complete+0x44>)
    822e:	f06f 0110 	mvn.w	r1, #16
    8232:	f017 ff46 	bl	200c2 <atomic_and>
	if (!evt->status) {
    8236:	7833      	ldrb	r3, [r6, #0]
    8238:	b943      	cbnz	r3, 824c <le_pkey_complete+0x24>
		memcpy(pub_key, evt->key, 64);
    823a:	1c71      	adds	r1, r6, #1
    823c:	480c      	ldr	r0, [pc, #48]	; (8270 <le_pkey_complete+0x48>)
    823e:	2240      	movs	r2, #64	; 0x40
    8240:	f017 fe15 	bl	1fe6e <memcpy>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    8244:	4809      	ldr	r0, [pc, #36]	; (826c <le_pkey_complete+0x44>)
    8246:	2108      	movs	r1, #8
    8248:	f017 ff4a 	bl	200e0 <atomic_or>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    824c:	4d09      	ldr	r5, [pc, #36]	; (8274 <le_pkey_complete+0x4c>)
		cb->func(evt->status ? NULL : pub_key);
    824e:	4f08      	ldr	r7, [pc, #32]	; (8270 <le_pkey_complete+0x48>)
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    8250:	682c      	ldr	r4, [r5, #0]
    8252:	b90c      	cbnz	r4, 8258 <le_pkey_complete+0x30>
	pub_key_cb = NULL;
    8254:	602c      	str	r4, [r5, #0]
}
    8256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		cb->func(evt->status ? NULL : pub_key);
    8258:	7832      	ldrb	r2, [r6, #0]
    825a:	6823      	ldr	r3, [r4, #0]
    825c:	2a00      	cmp	r2, #0
    825e:	bf0c      	ite	eq
    8260:	4638      	moveq	r0, r7
    8262:	2000      	movne	r0, #0
    8264:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    8266:	6864      	ldr	r4, [r4, #4]
    8268:	e7f3      	b.n	8252 <le_pkey_complete+0x2a>
    826a:	bf00      	nop
    826c:	20000098 	.word	0x20000098
    8270:	2000a80c 	.word	0x2000a80c
    8274:	200021dc 	.word	0x200021dc

00008278 <le_data_len_change>:
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    8278:	6883      	ldr	r3, [r0, #8]
{
    827a:	b510      	push	{r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    827c:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
    827e:	4620      	mov	r0, r4
    8280:	f002 fd42 	bl	ad08 <bt_conn_lookup_handle>
	if (!conn) {
    8284:	b960      	cbnz	r0, 82a0 <le_data_len_change+0x28>
    8286:	4a08      	ldr	r2, [pc, #32]	; (82a8 <le_data_len_change+0x30>)
    8288:	4b08      	ldr	r3, [pc, #32]	; (82ac <le_data_len_change+0x34>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    828a:	4809      	ldr	r0, [pc, #36]	; (82b0 <le_data_len_change+0x38>)
    828c:	1ad2      	subs	r2, r2, r3
    828e:	08d2      	lsrs	r2, r2, #3
    8290:	0192      	lsls	r2, r2, #6
    8292:	4621      	mov	r1, r4
    8294:	f042 0201 	orr.w	r2, r2, #1
}
    8298:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    829c:	f016 b922 	b.w	1e4e4 <log_1>
}
    82a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
    82a4:	f018 b9a7 	b.w	205f6 <bt_conn_unref>
    82a8:	000237a8 	.word	0x000237a8
    82ac:	000236e8 	.word	0x000236e8
    82b0:	00025837 	.word	0x00025837

000082b4 <le_conn_update_complete>:
{
    82b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
    82b6:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    82b8:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    82bc:	4630      	mov	r0, r6
    82be:	f002 fd23 	bl	ad08 <bt_conn_lookup_handle>
	if (!conn) {
    82c2:	4604      	mov	r4, r0
    82c4:	b960      	cbnz	r0, 82e0 <le_conn_update_complete+0x2c>
    82c6:	4a1e      	ldr	r2, [pc, #120]	; (8340 <le_conn_update_complete+0x8c>)
    82c8:	4b1e      	ldr	r3, [pc, #120]	; (8344 <le_conn_update_complete+0x90>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    82ca:	481f      	ldr	r0, [pc, #124]	; (8348 <le_conn_update_complete+0x94>)
    82cc:	1ad2      	subs	r2, r2, r3
    82ce:	08d2      	lsrs	r2, r2, #3
    82d0:	0192      	lsls	r2, r2, #6
    82d2:	f042 0201 	orr.w	r2, r2, #1
    82d6:	4631      	mov	r1, r6
    82d8:	f016 f904 	bl	1e4e4 <log_1>
}
    82dc:	b002      	add	sp, #8
    82de:	bd70      	pop	{r4, r5, r6, pc}
	if (!evt->status) {
    82e0:	782b      	ldrb	r3, [r5, #0]
    82e2:	b9bb      	cbnz	r3, 8314 <le_conn_update_complete+0x60>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    82e4:	792a      	ldrb	r2, [r5, #4]
    82e6:	78eb      	ldrb	r3, [r5, #3]
    82e8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    82ec:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    82f0:	79aa      	ldrb	r2, [r5, #6]
    82f2:	796b      	ldrb	r3, [r5, #5]
    82f4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    82f8:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    82fc:	79eb      	ldrb	r3, [r5, #7]
    82fe:	7a2a      	ldrb	r2, [r5, #8]
    8300:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    8304:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
    8308:	f002 f9b4 	bl	a674 <notify_le_param_updated>
	bt_conn_unref(conn);
    830c:	4620      	mov	r0, r4
    830e:	f018 f972 	bl	205f6 <bt_conn_unref>
    8312:	e7e3      	b.n	82dc <le_conn_update_complete+0x28>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
    8314:	2b1a      	cmp	r3, #26
    8316:	d1f9      	bne.n	830c <le_conn_update_complete+0x58>
    8318:	78c3      	ldrb	r3, [r0, #3]
    831a:	2b01      	cmp	r3, #1
    831c:	d1f6      	bne.n	830c <le_conn_update_complete+0x58>
		   !atomic_test_and_set_bit(conn->flags,
    831e:	210a      	movs	r1, #10
    8320:	3004      	adds	r0, #4
    8322:	f017 fefd 	bl	20120 <atomic_test_and_set_bit>
		   conn->role == BT_HCI_ROLE_SLAVE &&
    8326:	2800      	cmp	r0, #0
    8328:	d1f0      	bne.n	830c <le_conn_update_complete+0x58>
		param.interval_min = conn->le.interval_min;
    832a:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    832e:	9300      	str	r3, [sp, #0]
		bt_l2cap_update_conn_param(conn, &param);
    8330:	4669      	mov	r1, sp
		param.latency = conn->le.pending_latency;
    8332:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
    8336:	9301      	str	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
    8338:	4620      	mov	r0, r4
    833a:	f018 fc9a 	bl	20c72 <bt_l2cap_update_conn_param>
    833e:	e7e5      	b.n	830c <le_conn_update_complete+0x58>
    8340:	000237a8 	.word	0x000237a8
    8344:	000236e8 	.word	0x000236e8
    8348:	00025837 	.word	0x00025837

0000834c <hci_vendor_event>:
{
    834c:	b510      	push	{r4, lr}
    834e:	4a0a      	ldr	r2, [pc, #40]	; (8378 <hci_vendor_event+0x2c>)
    8350:	4c0a      	ldr	r4, [pc, #40]	; (837c <hci_vendor_event+0x30>)
		BT_WARN("Unhandled vendor-specific event: %s",
    8352:	8981      	ldrh	r1, [r0, #12]
    8354:	6880      	ldr	r0, [r0, #8]
    8356:	1aa4      	subs	r4, r4, r2
    8358:	f7ff fcfc 	bl	7d54 <bt_hex_real>
    835c:	f7fd ffba 	bl	62d4 <log_strdup>
    8360:	08e4      	lsrs	r4, r4, #3
    8362:	01a4      	lsls	r4, r4, #6
    8364:	f044 0402 	orr.w	r4, r4, #2
    8368:	4601      	mov	r1, r0
    836a:	4622      	mov	r2, r4
    836c:	4804      	ldr	r0, [pc, #16]	; (8380 <hci_vendor_event+0x34>)
}
    836e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
    8372:	f016 b8b7 	b.w	1e4e4 <log_1>
    8376:	bf00      	nop
    8378:	000236e8 	.word	0x000236e8
    837c:	000237a8 	.word	0x000237a8
    8380:	0002585b 	.word	0x0002585b

00008384 <update_sec_level>:
{
    8384:	b510      	push	{r4, lr}
	if (!conn->encrypt) {
    8386:	7ac3      	ldrb	r3, [r0, #11]
{
    8388:	4604      	mov	r4, r0
	if (!conn->encrypt) {
    838a:	b913      	cbnz	r3, 8392 <update_sec_level+0xe>
		conn->sec_level = BT_SECURITY_L1;
    838c:	2301      	movs	r3, #1
    838e:	7243      	strb	r3, [r0, #9]
}
    8390:	bd10      	pop	{r4, pc}
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
    8392:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
    8396:	b1fb      	cbz	r3, 83d8 <update_sec_level+0x54>
    8398:	7b5a      	ldrb	r2, [r3, #13]
    839a:	07d1      	lsls	r1, r2, #31
    839c:	d51c      	bpl.n	83d8 <update_sec_level+0x54>
		if (conn->le.keys->flags & BT_KEYS_SC &&
    839e:	06d2      	lsls	r2, r2, #27
    83a0:	d518      	bpl.n	83d4 <update_sec_level+0x50>
    83a2:	7b1b      	ldrb	r3, [r3, #12]
    83a4:	2b10      	cmp	r3, #16
    83a6:	d115      	bne.n	83d4 <update_sec_level+0x50>
			conn->sec_level = BT_SECURITY_L4;
    83a8:	2304      	movs	r3, #4
		conn->sec_level = BT_SECURITY_L2;
    83aa:	7263      	strb	r3, [r4, #9]
	if (conn->required_sec_level > conn->sec_level) {
    83ac:	7aa2      	ldrb	r2, [r4, #10]
    83ae:	7a63      	ldrb	r3, [r4, #9]
    83b0:	429a      	cmp	r2, r3
    83b2:	d9ed      	bls.n	8390 <update_sec_level+0xc>
    83b4:	4b09      	ldr	r3, [pc, #36]	; (83dc <update_sec_level+0x58>)
    83b6:	490a      	ldr	r1, [pc, #40]	; (83e0 <update_sec_level+0x5c>)
		BT_ERR("Failed to set required security level");
    83b8:	480a      	ldr	r0, [pc, #40]	; (83e4 <update_sec_level+0x60>)
    83ba:	1ac9      	subs	r1, r1, r3
    83bc:	08c9      	lsrs	r1, r1, #3
    83be:	0189      	lsls	r1, r1, #6
    83c0:	f041 0101 	orr.w	r1, r1, #1
    83c4:	f016 f881 	bl	1e4ca <log_0>
		bt_conn_disconnect(conn, BT_HCI_ERR_AUTH_FAIL);
    83c8:	4620      	mov	r0, r4
    83ca:	2105      	movs	r1, #5
}
    83cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_conn_disconnect(conn, BT_HCI_ERR_AUTH_FAIL);
    83d0:	f002 be8c 	b.w	b0ec <bt_conn_disconnect>
			conn->sec_level = BT_SECURITY_L3;
    83d4:	2303      	movs	r3, #3
    83d6:	e7e8      	b.n	83aa <update_sec_level+0x26>
		conn->sec_level = BT_SECURITY_L2;
    83d8:	2302      	movs	r3, #2
    83da:	e7e6      	b.n	83aa <update_sec_level+0x26>
    83dc:	000236e8 	.word	0x000236e8
    83e0:	000237a8 	.word	0x000237a8
    83e4:	0002587f 	.word	0x0002587f

000083e8 <hci_encrypt_key_refresh_complete>:
{
    83e8:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
    83ea:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    83ec:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    83f0:	4630      	mov	r0, r6
    83f2:	f002 fc89 	bl	ad08 <bt_conn_lookup_handle>
	if (!conn) {
    83f6:	4604      	mov	r4, r0
    83f8:	b960      	cbnz	r0, 8414 <hci_encrypt_key_refresh_complete+0x2c>
    83fa:	4a18      	ldr	r2, [pc, #96]	; (845c <hci_encrypt_key_refresh_complete+0x74>)
    83fc:	4b18      	ldr	r3, [pc, #96]	; (8460 <hci_encrypt_key_refresh_complete+0x78>)
		BT_ERR("Unable to look up conn with handle %u", handle);
    83fe:	4819      	ldr	r0, [pc, #100]	; (8464 <hci_encrypt_key_refresh_complete+0x7c>)
    8400:	1ad2      	subs	r2, r2, r3
    8402:	08d2      	lsrs	r2, r2, #3
    8404:	0192      	lsls	r2, r2, #6
    8406:	4631      	mov	r1, r6
    8408:	f042 0201 	orr.w	r2, r2, #1
}
    840c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    8410:	f016 b868 	b.w	1e4e4 <log_1>
	if (evt->status) {
    8414:	7829      	ldrb	r1, [r5, #0]
    8416:	b189      	cbz	r1, 843c <hci_encrypt_key_refresh_complete+0x54>
	conn->required_sec_level = conn->sec_level;
    8418:	7a43      	ldrb	r3, [r0, #9]
    841a:	7283      	strb	r3, [r0, #10]
		bt_l2cap_encrypt_change(conn, evt->status);
    841c:	f018 fbc1 	bl	20ba2 <bt_l2cap_encrypt_change>
		bt_conn_security_changed(conn, security_err_get(evt->status));
    8420:	782b      	ldrb	r3, [r5, #0]
	switch (hci_err) {
    8422:	2b29      	cmp	r3, #41	; 0x29
    8424:	bf9a      	itte	ls
    8426:	4a10      	ldrls	r2, [pc, #64]	; (8468 <hci_encrypt_key_refresh_complete+0x80>)
    8428:	5cd1      	ldrbls	r1, [r2, r3]
		bt_conn_security_changed(conn, security_err_get(evt->status));
    842a:	2108      	movhi	r1, #8
	bt_conn_security_changed(conn, BT_SECURITY_ERR_SUCCESS);
    842c:	4620      	mov	r0, r4
    842e:	f002 f98f 	bl	a750 <bt_conn_security_changed>
	bt_conn_unref(conn);
    8432:	4620      	mov	r0, r4
}
    8434:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    8438:	f018 b8dd 	b.w	205f6 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
    843c:	7883      	ldrb	r3, [r0, #2]
    843e:	2b01      	cmp	r3, #1
    8440:	d104      	bne.n	844c <hci_encrypt_key_refresh_complete+0x64>
		bt_smp_update_keys(conn);
    8442:	f007 fc51 	bl	fce8 <bt_smp_update_keys>
		update_sec_level(conn);
    8446:	4620      	mov	r0, r4
    8448:	f7ff ff9c 	bl	8384 <update_sec_level>
	conn->required_sec_level = conn->sec_level;
    844c:	7a63      	ldrb	r3, [r4, #9]
    844e:	72a3      	strb	r3, [r4, #10]
	bt_l2cap_encrypt_change(conn, evt->status);
    8450:	7829      	ldrb	r1, [r5, #0]
    8452:	4620      	mov	r0, r4
    8454:	f018 fba5 	bl	20ba2 <bt_l2cap_encrypt_change>
	bt_conn_security_changed(conn, BT_SECURITY_ERR_SUCCESS);
    8458:	2100      	movs	r1, #0
    845a:	e7e7      	b.n	842c <hci_encrypt_key_refresh_complete+0x44>
    845c:	000237a8 	.word	0x000237a8
    8460:	000236e8 	.word	0x000236e8
    8464:	000258a5 	.word	0x000258a5
    8468:	0002609d 	.word	0x0002609d

0000846c <hci_encrypt_change>:
{
    846c:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
    846e:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    8470:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    8474:	4630      	mov	r0, r6
    8476:	f002 fc47 	bl	ad08 <bt_conn_lookup_handle>
	if (!conn) {
    847a:	4604      	mov	r4, r0
    847c:	b960      	cbnz	r0, 8498 <hci_encrypt_change+0x2c>
    847e:	4a1a      	ldr	r2, [pc, #104]	; (84e8 <hci_encrypt_change+0x7c>)
    8480:	4b1a      	ldr	r3, [pc, #104]	; (84ec <hci_encrypt_change+0x80>)
		BT_ERR("Unable to look up conn with handle %u", handle);
    8482:	481b      	ldr	r0, [pc, #108]	; (84f0 <hci_encrypt_change+0x84>)
    8484:	1ad2      	subs	r2, r2, r3
    8486:	08d2      	lsrs	r2, r2, #3
    8488:	0192      	lsls	r2, r2, #6
    848a:	4631      	mov	r1, r6
    848c:	f042 0201 	orr.w	r2, r2, #1
}
    8490:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    8494:	f016 b826 	b.w	1e4e4 <log_1>
	if (evt->status) {
    8498:	7829      	ldrb	r1, [r5, #0]
    849a:	b189      	cbz	r1, 84c0 <hci_encrypt_change+0x54>
	conn->required_sec_level = conn->sec_level;
    849c:	7a43      	ldrb	r3, [r0, #9]
    849e:	7283      	strb	r3, [r0, #10]
		bt_l2cap_encrypt_change(conn, evt->status);
    84a0:	f018 fb7f 	bl	20ba2 <bt_l2cap_encrypt_change>
		bt_conn_security_changed(conn, security_err_get(evt->status));
    84a4:	782b      	ldrb	r3, [r5, #0]
	switch (hci_err) {
    84a6:	2b29      	cmp	r3, #41	; 0x29
    84a8:	bf9a      	itte	ls
    84aa:	4a12      	ldrls	r2, [pc, #72]	; (84f4 <hci_encrypt_change+0x88>)
    84ac:	5cd1      	ldrbls	r1, [r2, r3]
		bt_conn_security_changed(conn, security_err_get(evt->status));
    84ae:	2108      	movhi	r1, #8
	bt_conn_security_changed(conn, BT_SECURITY_ERR_SUCCESS);
    84b0:	4620      	mov	r0, r4
    84b2:	f002 f94d 	bl	a750 <bt_conn_security_changed>
	bt_conn_unref(conn);
    84b6:	4620      	mov	r0, r4
}
    84b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    84bc:	f018 b89b 	b.w	205f6 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
    84c0:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
    84c2:	78eb      	ldrb	r3, [r5, #3]
    84c4:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
    84c6:	2a01      	cmp	r2, #1
    84c8:	d105      	bne.n	84d6 <hci_encrypt_change+0x6a>
		if (conn->encrypt) {
    84ca:	b10b      	cbz	r3, 84d0 <hci_encrypt_change+0x64>
			bt_smp_update_keys(conn);
    84cc:	f007 fc0c 	bl	fce8 <bt_smp_update_keys>
		update_sec_level(conn);
    84d0:	4620      	mov	r0, r4
    84d2:	f7ff ff57 	bl	8384 <update_sec_level>
	conn->required_sec_level = conn->sec_level;
    84d6:	7a63      	ldrb	r3, [r4, #9]
    84d8:	72a3      	strb	r3, [r4, #10]
	bt_l2cap_encrypt_change(conn, evt->status);
    84da:	7829      	ldrb	r1, [r5, #0]
    84dc:	4620      	mov	r0, r4
    84de:	f018 fb60 	bl	20ba2 <bt_l2cap_encrypt_change>
	bt_conn_security_changed(conn, BT_SECURITY_ERR_SUCCESS);
    84e2:	2100      	movs	r1, #0
    84e4:	e7e4      	b.n	84b0 <hci_encrypt_change+0x44>
    84e6:	bf00      	nop
    84e8:	000237a8 	.word	0x000237a8
    84ec:	000236e8 	.word	0x000236e8
    84f0:	000258a5 	.word	0x000258a5
    84f4:	0002609d 	.word	0x0002609d

000084f8 <handle_event>:
{
    84f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    84fa:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    84fe:	4605      	mov	r5, r0
    8500:	4608      	mov	r0, r1
		if (handler->event != event) {
    8502:	7811      	ldrb	r1, [r2, #0]
    8504:	42a9      	cmp	r1, r5
    8506:	d01a      	beq.n	853e <handle_event+0x46>
	for (i = 0; i < num_handlers; i++) {
    8508:	3208      	adds	r2, #8
    850a:	429a      	cmp	r2, r3
    850c:	d1f9      	bne.n	8502 <handle_event+0xa>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
    850e:	8986      	ldrh	r6, [r0, #12]
    8510:	4b16      	ldr	r3, [pc, #88]	; (856c <handle_event+0x74>)
    8512:	4c17      	ldr	r4, [pc, #92]	; (8570 <handle_event+0x78>)
    8514:	6880      	ldr	r0, [r0, #8]
    8516:	4631      	mov	r1, r6
    8518:	1ae4      	subs	r4, r4, r3
    851a:	f7ff fc1b 	bl	7d54 <bt_hex_real>
    851e:	f7fd fed9 	bl	62d4 <log_strdup>
    8522:	08e4      	lsrs	r4, r4, #3
    8524:	01a4      	lsls	r4, r4, #6
    8526:	f044 0402 	orr.w	r4, r4, #2
    852a:	4603      	mov	r3, r0
    852c:	f8ad 4000 	strh.w	r4, [sp]
    8530:	4810      	ldr	r0, [pc, #64]	; (8574 <handle_event+0x7c>)
    8532:	4632      	mov	r2, r6
    8534:	4629      	mov	r1, r5
    8536:	f016 f802 	bl	1e53e <log_3>
}
    853a:	b002      	add	sp, #8
    853c:	bd70      	pop	{r4, r5, r6, pc}
		if (buf->len < handler->min_len) {
    853e:	8981      	ldrh	r1, [r0, #12]
    8540:	7853      	ldrb	r3, [r2, #1]
    8542:	428b      	cmp	r3, r1
    8544:	d90d      	bls.n	8562 <handle_event+0x6a>
    8546:	4a09      	ldr	r2, [pc, #36]	; (856c <handle_event+0x74>)
    8548:	4b09      	ldr	r3, [pc, #36]	; (8570 <handle_event+0x78>)
			BT_ERR("Too small (%u bytes) event 0x%02x",
    854a:	480b      	ldr	r0, [pc, #44]	; (8578 <handle_event+0x80>)
    854c:	1a9b      	subs	r3, r3, r2
    854e:	08db      	lsrs	r3, r3, #3
    8550:	019b      	lsls	r3, r3, #6
    8552:	f043 0301 	orr.w	r3, r3, #1
    8556:	462a      	mov	r2, r5
}
    8558:	b002      	add	sp, #8
    855a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Too small (%u bytes) event 0x%02x",
    855e:	f015 bfd5 	b.w	1e50c <log_2>
		handler->handler(buf);
    8562:	6853      	ldr	r3, [r2, #4]
}
    8564:	b002      	add	sp, #8
    8566:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		handler->handler(buf);
    856a:	4718      	bx	r3
    856c:	000236e8 	.word	0x000236e8
    8570:	000237a8 	.word	0x000237a8
    8574:	000258ed 	.word	0x000258ed
    8578:	000258cb 	.word	0x000258cb

0000857c <hci_le_meta_event>:
{
    857c:	b510      	push	{r4, lr}
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    857e:	2101      	movs	r1, #1
{
    8580:	4604      	mov	r4, r0
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    8582:	3008      	adds	r0, #8
    8584:	f01a f841 	bl	2260a <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    8588:	4621      	mov	r1, r4
    858a:	4a03      	ldr	r2, [pc, #12]	; (8598 <hci_le_meta_event+0x1c>)
    858c:	7800      	ldrb	r0, [r0, #0]
}
    858e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    8592:	230b      	movs	r3, #11
    8594:	f7ff bfb0 	b.w	84f8 <handle_event>
    8598:	00023b8c 	.word	0x00023b8c

0000859c <hci_cmd_done>:
{
    859c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    85a0:	4607      	mov	r7, r0
    85a2:	b085      	sub	sp, #20
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    85a4:	7990      	ldrb	r0, [r2, #6]
    85a6:	4e34      	ldr	r6, [pc, #208]	; (8678 <hci_cmd_done+0xdc>)
{
    85a8:	4688      	mov	r8, r1
    85aa:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    85ac:	f013 f9d8 	bl	1b960 <net_buf_pool_get>
    85b0:	4286      	cmp	r6, r0
    85b2:	d016      	beq.n	85e2 <hci_cmd_done+0x46>
    85b4:	4b31      	ldr	r3, [pc, #196]	; (867c <hci_cmd_done+0xe0>)
    85b6:	4d32      	ldr	r5, [pc, #200]	; (8680 <hci_cmd_done+0xe4>)
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    85b8:	79a0      	ldrb	r0, [r4, #6]
    85ba:	9700      	str	r7, [sp, #0]
    85bc:	1aed      	subs	r5, r5, r3
    85be:	08ed      	lsrs	r5, r5, #3
    85c0:	9001      	str	r0, [sp, #4]
    85c2:	f013 f9cd 	bl	1b960 <net_buf_pool_get>
    85c6:	01ad      	lsls	r5, r5, #6
    85c8:	f045 0502 	orr.w	r5, r5, #2
    85cc:	e9cd 0602 	strd	r0, r6, [sp, #8]
    85d0:	462b      	mov	r3, r5
    85d2:	482c      	ldr	r0, [pc, #176]	; (8684 <hci_cmd_done+0xe8>)
    85d4:	2204      	movs	r2, #4
    85d6:	4669      	mov	r1, sp
    85d8:	f015 ffcd 	bl	1e576 <log_n>
}
    85dc:	b005      	add	sp, #20
    85de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (cmd(buf)->opcode != opcode) {
    85e2:	4620      	mov	r0, r4
    85e4:	f013 f9c4 	bl	1b970 <net_buf_id>
    85e8:	4d27      	ldr	r5, [pc, #156]	; (8688 <hci_cmd_done+0xec>)
    85ea:	f04f 090c 	mov.w	r9, #12
    85ee:	fb09 5300 	mla	r3, r9, r0, r5
    85f2:	885b      	ldrh	r3, [r3, #2]
    85f4:	42bb      	cmp	r3, r7
    85f6:	d011      	beq.n	861c <hci_cmd_done+0x80>
    85f8:	4b20      	ldr	r3, [pc, #128]	; (867c <hci_cmd_done+0xe0>)
    85fa:	4e21      	ldr	r6, [pc, #132]	; (8680 <hci_cmd_done+0xe4>)
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    85fc:	4620      	mov	r0, r4
    85fe:	1af6      	subs	r6, r6, r3
    8600:	f013 f9b6 	bl	1b970 <net_buf_id>
    8604:	08f6      	lsrs	r6, r6, #3
    8606:	fb09 5000 	mla	r0, r9, r0, r5
    860a:	01b6      	lsls	r6, r6, #6
    860c:	f046 0602 	orr.w	r6, r6, #2
    8610:	8842      	ldrh	r2, [r0, #2]
    8612:	481e      	ldr	r0, [pc, #120]	; (868c <hci_cmd_done+0xf0>)
    8614:	4633      	mov	r3, r6
    8616:	4639      	mov	r1, r7
    8618:	f015 ff78 	bl	1e50c <log_2>
	if (cmd(buf)->state && !status) {
    861c:	4620      	mov	r0, r4
    861e:	f013 f9a7 	bl	1b970 <net_buf_id>
    8622:	260c      	movs	r6, #12
    8624:	fb06 5000 	mla	r0, r6, r0, r5
    8628:	6843      	ldr	r3, [r0, #4]
    862a:	b16b      	cbz	r3, 8648 <hci_cmd_done+0xac>
    862c:	f1b8 0f00 	cmp.w	r8, #0
    8630:	d10a      	bne.n	8648 <hci_cmd_done+0xac>
		struct cmd_state_set *update = cmd(buf)->state;
    8632:	4620      	mov	r0, r4
    8634:	f013 f99c 	bl	1b970 <net_buf_id>
    8638:	fb06 5000 	mla	r0, r6, r0, r5
    863c:	6843      	ldr	r3, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
    863e:	e9d3 0100 	ldrd	r0, r1, [r3]
    8642:	7a1a      	ldrb	r2, [r3, #8]
    8644:	f017 fd5b 	bl	200fe <atomic_set_bit_to>
	if (cmd(buf)->sync) {
    8648:	4620      	mov	r0, r4
    864a:	f013 f991 	bl	1b970 <net_buf_id>
    864e:	260c      	movs	r6, #12
    8650:	fb06 5000 	mla	r0, r6, r0, r5
    8654:	6883      	ldr	r3, [r0, #8]
    8656:	2b00      	cmp	r3, #0
    8658:	d0c0      	beq.n	85dc <hci_cmd_done+0x40>
		cmd(buf)->status = status;
    865a:	4620      	mov	r0, r4
    865c:	f013 f988 	bl	1b970 <net_buf_id>
    8660:	4370      	muls	r0, r6
    8662:	f805 8000 	strb.w	r8, [r5, r0]
		k_sem_give(cmd(buf)->sync);
    8666:	4620      	mov	r0, r4
    8668:	f013 f982 	bl	1b970 <net_buf_id>
    866c:	fb06 5500 	mla	r5, r6, r0, r5
    8670:	68a8      	ldr	r0, [r5, #8]
	z_impl_k_sem_give(sem);
    8672:	f015 f87d 	bl	1d770 <z_impl_k_sem_give>
}
    8676:	e7b1      	b.n	85dc <hci_cmd_done+0x40>
    8678:	20000978 	.word	0x20000978
    867c:	000236e8 	.word	0x000236e8
    8680:	000237a8 	.word	0x000237a8
    8684:	0002590f 	.word	0x0002590f
    8688:	20001ed8 	.word	0x20001ed8
    868c:	00025944 	.word	0x00025944

00008690 <id_find>:
	memcpy(addrs, bt_dev.id_addr, to_copy * sizeof(bt_addr_le_t));
	*count = to_copy;
}

static int id_find(const bt_addr_le_t *addr)
{
    8690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    8692:	4f0b      	ldr	r7, [pc, #44]	; (86c0 <id_find+0x30>)
{
    8694:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
    8696:	2500      	movs	r5, #0
    8698:	79fb      	ldrb	r3, [r7, #7]
    869a:	b2ec      	uxtb	r4, r5
    869c:	42a3      	cmp	r3, r4
    869e:	d802      	bhi.n	86a6 <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    86a0:	f06f 0401 	mvn.w	r4, #1
    86a4:	e009      	b.n	86ba <id_find+0x2a>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
    86a6:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
}

static inline int bt_addr_le_cmp(const bt_addr_le_t *a, const bt_addr_le_t *b)
{
	return memcmp(a, b, sizeof(*a));
    86aa:	2207      	movs	r2, #7
    86ac:	4439      	add	r1, r7
    86ae:	4630      	mov	r0, r6
    86b0:	f017 fbcd 	bl	1fe4e <memcmp>
    86b4:	3501      	adds	r5, #1
    86b6:	2800      	cmp	r0, #0
    86b8:	d1ee      	bne.n	8698 <id_find+0x8>
}
    86ba:	4620      	mov	r0, r4
    86bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    86be:	bf00      	nop
    86c0:	20000000 	.word	0x20000000

000086c4 <hci_tx_thread>:
{
    86c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    86c8:	4d51      	ldr	r5, [pc, #324]	; (8810 <hci_tx_thread+0x14c>)
    86ca:	4b52      	ldr	r3, [pc, #328]	; (8814 <hci_tx_thread+0x150>)
		events[0].state = K_POLL_STATE_NOT_READY;
    86cc:	f8df 914c 	ldr.w	r9, [pc, #332]	; 881c <hci_tx_thread+0x158>
		BT_ASSERT(err == 0);
    86d0:	f8df a174 	ldr.w	sl, [pc, #372]	; 8848 <hci_tx_thread+0x184>
    86d4:	1aed      	subs	r5, r5, r3
    86d6:	08ed      	lsrs	r5, r5, #3
		events[0].state = K_POLL_STATE_NOT_READY;
    86d8:	f8d9 300c 	ldr.w	r3, [r9, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    86dc:	484e      	ldr	r0, [pc, #312]	; (8818 <hci_tx_thread+0x154>)
		events[0].state = K_POLL_STATE_NOT_READY;
    86de:	f36f 3310 	bfc	r3, #12, #5
    86e2:	f8c9 300c 	str.w	r3, [r9, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    86e6:	f002 f953 	bl	a990 <bt_conn_prepare_events>
    86ea:	1c47      	adds	r7, r0, #1
		parm0.val = timeout;
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
    86ec:	484b      	ldr	r0, [pc, #300]	; (881c <hci_tx_thread+0x158>)
    86ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    86f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    86f6:	4639      	mov	r1, r7
    86f8:	f015 fb88 	bl	1de0c <z_impl_k_poll>
		BT_ASSERT(err == 0);
    86fc:	b160      	cbz	r0, 8718 <hci_tx_thread+0x54>
    86fe:	4948      	ldr	r1, [pc, #288]	; (8820 <hci_tx_thread+0x15c>)
    8700:	4848      	ldr	r0, [pc, #288]	; (8824 <hci_tx_thread+0x160>)
    8702:	f241 43f0 	movw	r3, #5360	; 0x14f0
    8706:	4652      	mov	r2, sl
    8708:	f015 fc1f 	bl	1df4a <printk>
    870c:	4040      	eors	r0, r0
    870e:	f380 8811 	msr	BASEPRI, r0
    8712:	f04f 0003 	mov.w	r0, #3
    8716:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    8718:	4e43      	ldr	r6, [pc, #268]	; (8828 <hci_tx_thread+0x164>)
{
    871a:	f8df 8100 	ldr.w	r8, [pc, #256]	; 881c <hci_tx_thread+0x158>
    871e:	f106 0bd0 	add.w	fp, r6, #208	; 0xd0
	for (; count; ev++, count--) {
    8722:	b917      	cbnz	r7, 872a <hci_tx_thread+0x66>
	z_impl_k_yield();
    8724:	f014 ffb0 	bl	1d688 <z_impl_k_yield>
	while (1) {
    8728:	e7d6      	b.n	86d8 <hci_tx_thread+0x14>
		switch (ev->state) {
    872a:	f8d8 100c 	ldr.w	r1, [r8, #12]
    872e:	f3c1 3104 	ubfx	r1, r1, #12, #5
    8732:	2901      	cmp	r1, #1
    8734:	d959      	bls.n	87ea <hci_tx_thread+0x126>
    8736:	2904      	cmp	r1, #4
    8738:	d163      	bne.n	8802 <hci_tx_thread+0x13e>
			if (ev->tag == BT_EVENT_CMD_TX) {
    873a:	f898 300c 	ldrb.w	r3, [r8, #12]
    873e:	2b00      	cmp	r3, #0
    8740:	d157      	bne.n	87f2 <hci_tx_thread+0x12e>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    8742:	483a      	ldr	r0, [pc, #232]	; (882c <hci_tx_thread+0x168>)
    8744:	2200      	movs	r2, #0
    8746:	2300      	movs	r3, #0
    8748:	f019 febf 	bl	224ca <net_buf_get>
	BT_ASSERT(buf);
    874c:	4604      	mov	r4, r0
    874e:	b960      	cbnz	r0, 876a <hci_tx_thread+0xa6>
    8750:	4937      	ldr	r1, [pc, #220]	; (8830 <hci_tx_thread+0x16c>)
    8752:	4834      	ldr	r0, [pc, #208]	; (8824 <hci_tx_thread+0x160>)
    8754:	f241 4392 	movw	r3, #5266	; 0x1492
    8758:	4652      	mov	r2, sl
    875a:	f015 fbf6 	bl	1df4a <printk>
    875e:	4040      	eors	r0, r0
    8760:	f380 8811 	msr	BASEPRI, r0
    8764:	f04f 0003 	mov.w	r0, #3
    8768:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    876a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    876e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    8772:	4658      	mov	r0, fp
    8774:	f015 f822 	bl	1d7bc <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    8778:	f8d6 30e8 	ldr.w	r3, [r6, #232]	; 0xe8
    877c:	b163      	cbz	r3, 8798 <hci_tx_thread+0xd4>
		BT_ERR("Uncleared pending sent_cmd");
    877e:	01a9      	lsls	r1, r5, #6
    8780:	482c      	ldr	r0, [pc, #176]	; (8834 <hci_tx_thread+0x170>)
    8782:	f041 0101 	orr.w	r1, r1, #1
    8786:	f015 fea0 	bl	1e4ca <log_0>
		net_buf_unref(bt_dev.sent_cmd);
    878a:	f8d6 00e8 	ldr.w	r0, [r6, #232]	; 0xe8
    878e:	f013 f9a3 	bl	1bad8 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    8792:	2300      	movs	r3, #0
    8794:	f8c6 30e8 	str.w	r3, [r6, #232]	; 0xe8
	bt_dev.sent_cmd = net_buf_ref(buf);
    8798:	4620      	mov	r0, r4
    879a:	f019 fec7 	bl	2252c <net_buf_ref>
    879e:	f8c6 00e8 	str.w	r0, [r6, #232]	; 0xe8
		return bt_hci_ecc_send(buf);
    87a2:	4620      	mov	r0, r4
    87a4:	f7ff fc18 	bl	7fd8 <bt_hci_ecc_send>
	if (err) {
    87a8:	4601      	mov	r1, r0
    87aa:	b1f0      	cbz	r0, 87ea <hci_tx_thread+0x126>
		BT_ERR("Unable to send to driver (err %d)", err);
    87ac:	01aa      	lsls	r2, r5, #6
    87ae:	4822      	ldr	r0, [pc, #136]	; (8838 <hci_tx_thread+0x174>)
    87b0:	f042 0201 	orr.w	r2, r2, #1
    87b4:	f015 fe96 	bl	1e4e4 <log_1>
	z_impl_k_sem_give(sem);
    87b8:	4820      	ldr	r0, [pc, #128]	; (883c <hci_tx_thread+0x178>)
    87ba:	f014 ffd9 	bl	1d770 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
    87be:	4620      	mov	r0, r4
    87c0:	f013 f8d6 	bl	1b970 <net_buf_id>
    87c4:	4b1e      	ldr	r3, [pc, #120]	; (8840 <hci_tx_thread+0x17c>)
    87c6:	220c      	movs	r2, #12
    87c8:	fb02 3000 	mla	r0, r2, r0, r3
    87cc:	211f      	movs	r1, #31
    87ce:	8840      	ldrh	r0, [r0, #2]
    87d0:	4622      	mov	r2, r4
    87d2:	f7ff fee3 	bl	859c <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    87d6:	f8d6 00e8 	ldr.w	r0, [r6, #232]	; 0xe8
    87da:	f013 f97d 	bl	1bad8 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    87de:	2300      	movs	r3, #0
		net_buf_unref(buf);
    87e0:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
    87e2:	f8c6 30e8 	str.w	r3, [r6, #232]	; 0xe8
		net_buf_unref(buf);
    87e6:	f013 f977 	bl	1bad8 <net_buf_unref>
	for (; count; ev++, count--) {
    87ea:	f108 0814 	add.w	r8, r8, #20
    87ee:	3f01      	subs	r7, #1
    87f0:	e797      	b.n	8722 <hci_tx_thread+0x5e>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    87f2:	2b01      	cmp	r3, #1
    87f4:	d1f9      	bne.n	87ea <hci_tx_thread+0x126>
					conn = CONTAINER_OF(ev->fifo,
    87f6:	f8d8 0010 	ldr.w	r0, [r8, #16]
					bt_conn_process_tx(conn);
    87fa:	3834      	subs	r0, #52	; 0x34
    87fc:	f002 fd22 	bl	b244 <bt_conn_process_tx>
    8800:	e7f3      	b.n	87ea <hci_tx_thread+0x126>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    8802:	01aa      	lsls	r2, r5, #6
    8804:	480f      	ldr	r0, [pc, #60]	; (8844 <hci_tx_thread+0x180>)
    8806:	f042 0202 	orr.w	r2, r2, #2
    880a:	f015 fe6b 	bl	1e4e4 <log_1>
    880e:	e7ec      	b.n	87ea <hci_tx_thread+0x126>
    8810:	000237a8 	.word	0x000237a8
    8814:	000236e8 	.word	0x000236e8
    8818:	20000168 	.word	0x20000168
    881c:	20000154 	.word	0x20000154
    8820:	000259ab 	.word	0x000259ab
    8824:	000259b4 	.word	0x000259b4
    8828:	20000000 	.word	0x20000000
    882c:	200000ec 	.word	0x200000ec
    8830:	00026d75 	.word	0x00026d75
    8834:	000259d1 	.word	0x000259d1
    8838:	000259ec 	.word	0x000259ec
    883c:	200000d0 	.word	0x200000d0
    8840:	20001ed8 	.word	0x20001ed8
    8844:	00025a0e 	.word	0x00025a0e
    8848:	00025977 	.word	0x00025977

0000884c <hci_num_completed_packets>:
{
    884c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8850:	4b46      	ldr	r3, [pc, #280]	; (896c <hci_num_completed_packets+0x120>)
    8852:	4d47      	ldr	r5, [pc, #284]	; (8970 <hci_num_completed_packets+0x124>)
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
    8854:	f8d0 8008 	ldr.w	r8, [r0, #8]
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
					  struct k_work *work)
{
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
		k_queue_append(&work_q->queue, work);
    8858:	f8df a120 	ldr.w	sl, [pc, #288]	; 897c <hci_num_completed_packets+0x130>
    885c:	1aed      	subs	r5, r5, r3
	for (i = 0; i < evt->num_handles; i++) {
    885e:	2600      	movs	r6, #0
    8860:	08ed      	lsrs	r5, r5, #3
			tx->pending_no_cb = 0U;
    8862:	46b1      	mov	r9, r6
	for (i = 0; i < evt->num_handles; i++) {
    8864:	f898 3000 	ldrb.w	r3, [r8]
    8868:	429e      	cmp	r6, r3
    886a:	db02      	blt.n	8872 <hci_num_completed_packets+0x26>
}
    886c:	b003      	add	sp, #12
    886e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
    8872:	eb08 0386 	add.w	r3, r8, r6, lsl #2
    8876:	f8b3 1001 	ldrh.w	r1, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    887a:	f8b3 7003 	ldrh.w	r7, [r3, #3]
	__asm__ volatile(
    887e:	f04f 0320 	mov.w	r3, #32
    8882:	f3ef 8b11 	mrs	fp, BASEPRI
    8886:	f383 8811 	msr	BASEPRI, r3
    888a:	f3bf 8f6f 	isb	sy
		conn = bt_conn_lookup_handle(handle);
    888e:	4608      	mov	r0, r1
    8890:	9101      	str	r1, [sp, #4]
    8892:	f002 fa39 	bl	ad08 <bt_conn_lookup_handle>
		if (!conn) {
    8896:	9901      	ldr	r1, [sp, #4]
    8898:	4604      	mov	r4, r0
    889a:	b958      	cbnz	r0, 88b4 <hci_num_completed_packets+0x68>
	__asm__ volatile(
    889c:	f38b 8811 	msr	BASEPRI, fp
    88a0:	f3bf 8f6f 	isb	sy
			BT_ERR("No connection for handle %u", handle);
    88a4:	01aa      	lsls	r2, r5, #6
    88a6:	4833      	ldr	r0, [pc, #204]	; (8974 <hci_num_completed_packets+0x128>)
    88a8:	f042 0201 	orr.w	r2, r2, #1
    88ac:	f015 fe1a 	bl	1e4e4 <log_1>
	for (i = 0; i < evt->num_handles; i++) {
    88b0:	3601      	adds	r6, #1
    88b2:	e7d7      	b.n	8864 <hci_num_completed_packets+0x18>
    88b4:	f38b 8811 	msr	BASEPRI, fp
    88b8:	f3bf 8f6f 	isb	sy
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    88bc:	f100 0b28 	add.w	fp, r0, #40	; 0x28
		while (count--) {
    88c0:	b357      	cbz	r7, 8918 <hci_num_completed_packets+0xcc>
	__asm__ volatile(
    88c2:	f04f 0320 	mov.w	r3, #32
    88c6:	f3ef 8211 	mrs	r2, BASEPRI
    88ca:	f383 8811 	msr	BASEPRI, r3
    88ce:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
    88d2:	69e3      	ldr	r3, [r4, #28]
    88d4:	b16b      	cbz	r3, 88f2 <hci_num_completed_packets+0xa6>
				conn->pending_no_cb--;
    88d6:	3b01      	subs	r3, #1
    88d8:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    88da:	f382 8811 	msr	BASEPRI, r2
    88de:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
    88e2:	4620      	mov	r0, r4
    88e4:	f001 fec2 	bl	a66c <bt_conn_get_pkts>
    88e8:	3f01      	subs	r7, #1
    88ea:	f014 ff41 	bl	1d770 <z_impl_k_sem_give>
    88ee:	b2bf      	uxth	r7, r7
    88f0:	e7e6      	b.n	88c0 <hci_num_completed_packets+0x74>
Z_GENLIST_IS_EMPTY(slist)
    88f2:	6963      	ldr	r3, [r4, #20]
Z_GENLIST_GET(slist, snode)
    88f4:	b12b      	cbz	r3, 8902 <hci_num_completed_packets+0xb6>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    88f6:	69a1      	ldr	r1, [r4, #24]
    88f8:	6818      	ldr	r0, [r3, #0]
	list->head = node;
    88fa:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    88fc:	428b      	cmp	r3, r1
	list->tail = node;
    88fe:	bf08      	it	eq
    8900:	61a0      	streq	r0, [r4, #24]
    8902:	f382 8811 	msr	BASEPRI, r2
    8906:	f3bf 8f6f 	isb	sy
			if (!node) {
    890a:	b94b      	cbnz	r3, 8920 <hci_num_completed_packets+0xd4>
				BT_ERR("packets count mismatch");
    890c:	01a9      	lsls	r1, r5, #6
    890e:	481a      	ldr	r0, [pc, #104]	; (8978 <hci_num_completed_packets+0x12c>)
    8910:	f041 0101 	orr.w	r1, r1, #1
    8914:	f015 fdd9 	bl	1e4ca <log_0>
		bt_conn_unref(conn);
    8918:	4620      	mov	r0, r4
    891a:	f017 fe6c 	bl	205f6 <bt_conn_unref>
    891e:	e7c7      	b.n	88b0 <hci_num_completed_packets+0x64>
	__asm__ volatile(
    8920:	f04f 0220 	mov.w	r2, #32
    8924:	f3ef 8111 	mrs	r1, BASEPRI
    8928:	f382 8811 	msr	BASEPRI, r2
    892c:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
    8930:	68da      	ldr	r2, [r3, #12]
    8932:	61e2      	str	r2, [r4, #28]
	parent->next = child;
    8934:	f8c3 9000 	str.w	r9, [r3]
Z_GENLIST_APPEND(slist, snode)
    8938:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
    893a:	f8c3 900c 	str.w	r9, [r3, #12]
    893e:	b98a      	cbnz	r2, 8964 <hci_num_completed_packets+0x118>
	list->head = node;
    8940:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
    8944:	f381 8811 	msr	BASEPRI, r1
    8948:	f3bf 8f6f 	isb	sy
    894c:	2100      	movs	r1, #0
    894e:	f104 0030 	add.w	r0, r4, #48	; 0x30
    8952:	f017 fbe5 	bl	20120 <atomic_test_and_set_bit>
    8956:	2800      	cmp	r0, #0
    8958:	d1c3      	bne.n	88e2 <hci_num_completed_packets+0x96>
		k_queue_append(&work_q->queue, work);
    895a:	4659      	mov	r1, fp
    895c:	4650      	mov	r0, sl
    895e:	f01a f9d1 	bl	22d04 <k_queue_append>
    8962:	e7be      	b.n	88e2 <hci_num_completed_packets+0x96>
	parent->next = child;
    8964:	6013      	str	r3, [r2, #0]
	list->tail = node;
    8966:	6263      	str	r3, [r4, #36]	; 0x24
}
    8968:	e7ec      	b.n	8944 <hci_num_completed_packets+0xf8>
    896a:	bf00      	nop
    896c:	000236e8 	.word	0x000236e8
    8970:	000237a8 	.word	0x000237a8
    8974:	00025a2f 	.word	0x00025a2f
    8978:	00025a4b 	.word	0x00025a4b
    897c:	20001c50 	.word	0x20001c50

00008980 <hci_cmd_status>:
{
    8980:	b538      	push	{r3, r4, r5, lr}
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    8982:	2104      	movs	r1, #4
{
    8984:	4604      	mov	r4, r0
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    8986:	3008      	adds	r0, #8
    8988:	f019 fe3f 	bl	2260a <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    898c:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    898e:	7801      	ldrb	r1, [r0, #0]
    8990:	8840      	ldrh	r0, [r0, #2]
    8992:	4622      	mov	r2, r4
    8994:	f7ff fe02 	bl	859c <hci_cmd_done>
	if (ncmd) {
    8998:	b125      	cbz	r5, 89a4 <hci_cmd_status+0x24>
    899a:	4803      	ldr	r0, [pc, #12]	; (89a8 <hci_cmd_status+0x28>)
}
    899c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    89a0:	f014 bee6 	b.w	1d770 <z_impl_k_sem_give>
    89a4:	bd38      	pop	{r3, r4, r5, pc}
    89a6:	bf00      	nop
    89a8:	200000d0 	.word	0x200000d0

000089ac <hci_cmd_complete>:
{
    89ac:	b538      	push	{r3, r4, r5, lr}
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    89ae:	2103      	movs	r1, #3
{
    89b0:	4604      	mov	r4, r0
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    89b2:	3008      	adds	r0, #8
    89b4:	f019 fe29 	bl	2260a <net_buf_simple_pull_mem>
	status = buf->data[0];
    89b8:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
    89ba:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
    89bc:	7819      	ldrb	r1, [r3, #0]
    89be:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    89c2:	4622      	mov	r2, r4
    89c4:	f7ff fdea 	bl	859c <hci_cmd_done>
	if (ncmd) {
    89c8:	b125      	cbz	r5, 89d4 <hci_cmd_complete+0x28>
    89ca:	4803      	ldr	r0, [pc, #12]	; (89d8 <hci_cmd_complete+0x2c>)
}
    89cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    89d0:	f014 bece 	b.w	1d770 <z_impl_k_sem_give>
    89d4:	bd38      	pop	{r3, r4, r5, pc}
    89d6:	bf00      	nop
    89d8:	200000d0 	.word	0x200000d0

000089dc <bt_hci_cmd_create>:
{
    89dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    89e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    89e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
{
    89e8:	4605      	mov	r5, r0
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    89ea:	4816      	ldr	r0, [pc, #88]	; (8a44 <bt_hci_cmd_create+0x68>)
	cmd(buf)->opcode = opcode;
    89ec:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8a48 <bt_hci_cmd_create+0x6c>
{
    89f0:	460e      	mov	r6, r1
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    89f2:	f019 fd65 	bl	224c0 <net_buf_alloc_fixed>
    89f6:	4604      	mov	r4, r0
	net_buf_reserve(buf, BT_BUF_RESERVE);
    89f8:	f100 0b08 	add.w	fp, r0, #8
    89fc:	2100      	movs	r1, #0
	*(uint8_t *)net_buf_user_data(buf) = type;
    89fe:	2700      	movs	r7, #0
    8a00:	4658      	mov	r0, fp
    8a02:	f019 fd82 	bl	2250a <net_buf_simple_reserve>
    8a06:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
    8a08:	4620      	mov	r0, r4
    8a0a:	f012 ffb1 	bl	1b970 <net_buf_id>
    8a0e:	f04f 0a0c 	mov.w	sl, #12
    8a12:	fb0a 8000 	mla	r0, sl, r0, r8
    8a16:	8045      	strh	r5, [r0, #2]
	cmd(buf)->sync = NULL;
    8a18:	4620      	mov	r0, r4
    8a1a:	f012 ffa9 	bl	1b970 <net_buf_id>
    8a1e:	fb0a 8000 	mla	r0, sl, r0, r8
    8a22:	6087      	str	r7, [r0, #8]
	cmd(buf)->state = NULL;
    8a24:	4620      	mov	r0, r4
    8a26:	f012 ffa3 	bl	1b970 <net_buf_id>
    8a2a:	fb0a 8000 	mla	r0, sl, r0, r8
	hdr = net_buf_add(buf, sizeof(*hdr));
    8a2e:	2103      	movs	r1, #3
	cmd(buf)->state = NULL;
    8a30:	6047      	str	r7, [r0, #4]
	hdr = net_buf_add(buf, sizeof(*hdr));
    8a32:	4658      	mov	r0, fp
    8a34:	f019 fdac 	bl	22590 <net_buf_simple_add>
	hdr->param_len = param_len;
    8a38:	7086      	strb	r6, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    8a3a:	8005      	strh	r5, [r0, #0]
}
    8a3c:	4620      	mov	r0, r4
    8a3e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8a42:	bf00      	nop
    8a44:	20000978 	.word	0x20000978
    8a48:	20001ed8 	.word	0x20001ed8

00008a4c <bt_hci_cmd_send>:
{
    8a4c:	b538      	push	{r3, r4, r5, lr}
    8a4e:	4605      	mov	r5, r0
	if (!buf) {
    8a50:	460c      	mov	r4, r1
    8a52:	b919      	cbnz	r1, 8a5c <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
    8a54:	f7ff ffc2 	bl	89dc <bt_hci_cmd_create>
		if (!buf) {
    8a58:	4604      	mov	r4, r0
    8a5a:	b1f0      	cbz	r0, 8a9a <bt_hci_cmd_send+0x4e>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    8a5c:	f640 4335 	movw	r3, #3125	; 0xc35
    8a60:	429d      	cmp	r5, r3
    8a62:	d114      	bne.n	8a8e <bt_hci_cmd_send+0x42>
		return bt_hci_ecc_send(buf);
    8a64:	4620      	mov	r0, r4
    8a66:	f7ff fab7 	bl	7fd8 <bt_hci_ecc_send>
		if (err) {
    8a6a:	4605      	mov	r5, r0
    8a6c:	b168      	cbz	r0, 8a8a <bt_hci_cmd_send+0x3e>
    8a6e:	4b0c      	ldr	r3, [pc, #48]	; (8aa0 <bt_hci_cmd_send+0x54>)
    8a70:	4a0c      	ldr	r2, [pc, #48]	; (8aa4 <bt_hci_cmd_send+0x58>)
    8a72:	1ad2      	subs	r2, r2, r3
    8a74:	08d2      	lsrs	r2, r2, #3
			BT_ERR("Unable to send to driver (err %d)", err);
    8a76:	0192      	lsls	r2, r2, #6
    8a78:	4601      	mov	r1, r0
    8a7a:	f042 0201 	orr.w	r2, r2, #1
    8a7e:	480a      	ldr	r0, [pc, #40]	; (8aa8 <bt_hci_cmd_send+0x5c>)
    8a80:	f015 fd30 	bl	1e4e4 <log_1>
			net_buf_unref(buf);
    8a84:	4620      	mov	r0, r4
    8a86:	f013 f827 	bl	1bad8 <net_buf_unref>
}
    8a8a:	4628      	mov	r0, r5
    8a8c:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    8a8e:	4807      	ldr	r0, [pc, #28]	; (8aac <bt_hci_cmd_send+0x60>)
    8a90:	4621      	mov	r1, r4
    8a92:	f019 fd3e 	bl	22512 <net_buf_put>
	return 0;
    8a96:	2500      	movs	r5, #0
    8a98:	e7f7      	b.n	8a8a <bt_hci_cmd_send+0x3e>
			return -ENOBUFS;
    8a9a:	f06f 0536 	mvn.w	r5, #54	; 0x36
    8a9e:	e7f4      	b.n	8a8a <bt_hci_cmd_send+0x3e>
    8aa0:	000236e8 	.word	0x000236e8
    8aa4:	000237a8 	.word	0x000237a8
    8aa8:	000259ec 	.word	0x000259ec
    8aac:	200000ec 	.word	0x200000ec

00008ab0 <le_ltk_request>:
{
    8ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
    8ab2:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    8ab4:	882e      	ldrh	r6, [r5, #0]
    8ab6:	b2b7      	uxth	r7, r6
{
    8ab8:	b087      	sub	sp, #28
	conn = bt_conn_lookup_handle(handle);
    8aba:	4638      	mov	r0, r7
    8abc:	f002 f924 	bl	ad08 <bt_conn_lookup_handle>
	if (!conn) {
    8ac0:	4604      	mov	r4, r0
    8ac2:	b960      	cbnz	r0, 8ade <le_ltk_request+0x2e>
    8ac4:	4a26      	ldr	r2, [pc, #152]	; (8b60 <le_ltk_request+0xb0>)
    8ac6:	4b27      	ldr	r3, [pc, #156]	; (8b64 <le_ltk_request+0xb4>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    8ac8:	4827      	ldr	r0, [pc, #156]	; (8b68 <le_ltk_request+0xb8>)
    8aca:	1ad2      	subs	r2, r2, r3
    8acc:	08d2      	lsrs	r2, r2, #3
    8ace:	0192      	lsls	r2, r2, #6
    8ad0:	f042 0201 	orr.w	r2, r2, #1
    8ad4:	4639      	mov	r1, r7
    8ad6:	f015 fd05 	bl	1e4e4 <log_1>
}
    8ada:	b007      	add	sp, #28
    8adc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
    8ade:	af02      	add	r7, sp, #8
    8ae0:	f8d5 2002 	ldr.w	r2, [r5, #2]
    8ae4:	f8d5 3006 	ldr.w	r3, [r5, #6]
    8ae8:	9701      	str	r7, [sp, #4]
    8aea:	8969      	ldrh	r1, [r5, #10]
    8aec:	9100      	str	r1, [sp, #0]
    8aee:	f019 fbb0 	bl	22252 <bt_smp_request_ltk>
    8af2:	b320      	cbz	r0, 8b3e <le_ltk_request+0x8e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    8af4:	2112      	movs	r1, #18
    8af6:	f242 001a 	movw	r0, #8218	; 0x201a
    8afa:	f7ff ff6f 	bl	89dc <bt_hci_cmd_create>
	if (!buf) {
    8afe:	4605      	mov	r5, r0
    8b00:	b968      	cbnz	r0, 8b1e <le_ltk_request+0x6e>
    8b02:	4917      	ldr	r1, [pc, #92]	; (8b60 <le_ltk_request+0xb0>)
    8b04:	4b17      	ldr	r3, [pc, #92]	; (8b64 <le_ltk_request+0xb4>)
		BT_ERR("Out of command buffers");
    8b06:	4819      	ldr	r0, [pc, #100]	; (8b6c <le_ltk_request+0xbc>)
    8b08:	1ac9      	subs	r1, r1, r3
    8b0a:	08c9      	lsrs	r1, r1, #3
    8b0c:	0189      	lsls	r1, r1, #6
    8b0e:	f041 0101 	orr.w	r1, r1, #1
    8b12:	f015 fcda 	bl	1e4ca <log_0>
	bt_conn_unref(conn);
    8b16:	4620      	mov	r0, r4
    8b18:	f017 fd6d 	bl	205f6 <bt_conn_unref>
    8b1c:	e7dd      	b.n	8ada <le_ltk_request+0x2a>
	cp = net_buf_add(buf, sizeof(*cp));
    8b1e:	2112      	movs	r1, #18
    8b20:	3008      	adds	r0, #8
    8b22:	f019 fd35 	bl	22590 <net_buf_simple_add>
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
    8b26:	4639      	mov	r1, r7
	cp->handle = sys_cpu_to_le16(handle);
    8b28:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
    8b2c:	2210      	movs	r2, #16
    8b2e:	f017 f99e 	bl	1fe6e <memcpy>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
    8b32:	4629      	mov	r1, r5
    8b34:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    8b38:	f7ff ff88 	bl	8a4c <bt_hci_cmd_send>
    8b3c:	e7eb      	b.n	8b16 <le_ltk_request+0x66>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
    8b3e:	2102      	movs	r1, #2
    8b40:	f242 001b 	movw	r0, #8219	; 0x201b
    8b44:	f7ff ff4a 	bl	89dc <bt_hci_cmd_create>
	if (!buf) {
    8b48:	4605      	mov	r5, r0
    8b4a:	2800      	cmp	r0, #0
    8b4c:	d0d9      	beq.n	8b02 <le_ltk_request+0x52>
	cp = net_buf_add(buf, sizeof(*cp));
    8b4e:	2102      	movs	r1, #2
    8b50:	3008      	adds	r0, #8
    8b52:	f019 fd1d 	bl	22590 <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    8b56:	4629      	mov	r1, r5
	cp->handle = sys_cpu_to_le16(handle);
    8b58:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    8b5a:	f242 001b 	movw	r0, #8219	; 0x201b
    8b5e:	e7eb      	b.n	8b38 <le_ltk_request+0x88>
    8b60:	000237a8 	.word	0x000237a8
    8b64:	000236e8 	.word	0x000236e8
    8b68:	00025837 	.word	0x00025837
    8b6c:	00025a62 	.word	0x00025a62

00008b70 <le_conn_param_neg_reply>:
{
    8b70:	b570      	push	{r4, r5, r6, lr}
    8b72:	4606      	mov	r6, r0
    8b74:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    8b76:	f242 0021 	movw	r0, #8225	; 0x2021
    8b7a:	2103      	movs	r1, #3
    8b7c:	f7ff ff2e 	bl	89dc <bt_hci_cmd_create>
	if (!buf) {
    8b80:	4604      	mov	r4, r0
    8b82:	b958      	cbnz	r0, 8b9c <le_conn_param_neg_reply+0x2c>
    8b84:	490c      	ldr	r1, [pc, #48]	; (8bb8 <le_conn_param_neg_reply+0x48>)
    8b86:	4b0d      	ldr	r3, [pc, #52]	; (8bbc <le_conn_param_neg_reply+0x4c>)
		BT_ERR("Unable to allocate buffer");
    8b88:	480d      	ldr	r0, [pc, #52]	; (8bc0 <le_conn_param_neg_reply+0x50>)
    8b8a:	1ac9      	subs	r1, r1, r3
    8b8c:	08c9      	lsrs	r1, r1, #3
    8b8e:	0189      	lsls	r1, r1, #6
}
    8b90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to allocate buffer");
    8b94:	f041 0101 	orr.w	r1, r1, #1
    8b98:	f015 bc97 	b.w	1e4ca <log_0>
	cp = net_buf_add(buf, sizeof(*cp));
    8b9c:	2103      	movs	r1, #3
    8b9e:	3008      	adds	r0, #8
    8ba0:	f019 fcf6 	bl	22590 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
    8ba4:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
    8ba6:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    8ba8:	4621      	mov	r1, r4
    8baa:	f242 0021 	movw	r0, #8225	; 0x2021
}
    8bae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    8bb2:	f7ff bf4b 	b.w	8a4c <bt_hci_cmd_send>
    8bb6:	bf00      	nop
    8bb8:	000237a8 	.word	0x000237a8
    8bbc:	000236e8 	.word	0x000236e8
    8bc0:	00025a79 	.word	0x00025a79

00008bc4 <le_conn_param_req>:
{
    8bc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
    8bc6:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    8bc8:	78d9      	ldrb	r1, [r3, #3]
    8bca:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    8bcc:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    8bce:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    8bd2:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    8bd6:	7959      	ldrb	r1, [r3, #5]
    8bd8:	791a      	ldrb	r2, [r3, #4]
    8bda:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    8bde:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
    8be2:	799a      	ldrb	r2, [r3, #6]
    8be4:	79d9      	ldrb	r1, [r3, #7]
    8be6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    8bea:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
    8bee:	7a1a      	ldrb	r2, [r3, #8]
    8bf0:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
    8bf2:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
    8bf4:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
    8bf8:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
    8bfa:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
    8bfe:	f002 f883 	bl	ad08 <bt_conn_lookup_handle>
	if (!conn) {
    8c02:	4606      	mov	r6, r0
    8c04:	b980      	cbnz	r0, 8c28 <le_conn_param_req+0x64>
    8c06:	4b20      	ldr	r3, [pc, #128]	; (8c88 <le_conn_param_req+0xc4>)
    8c08:	4a20      	ldr	r2, [pc, #128]	; (8c8c <le_conn_param_req+0xc8>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    8c0a:	4821      	ldr	r0, [pc, #132]	; (8c90 <le_conn_param_req+0xcc>)
    8c0c:	1ad2      	subs	r2, r2, r3
    8c0e:	08d2      	lsrs	r2, r2, #3
    8c10:	0192      	lsls	r2, r2, #6
    8c12:	4621      	mov	r1, r4
    8c14:	f042 0201 	orr.w	r2, r2, #1
    8c18:	f015 fc64 	bl	1e4e4 <log_1>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
    8c1c:	2102      	movs	r1, #2
    8c1e:	4620      	mov	r0, r4
    8c20:	f7ff ffa6 	bl	8b70 <le_conn_param_neg_reply>
}
    8c24:	b003      	add	sp, #12
    8c26:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
    8c28:	4669      	mov	r1, sp
    8c2a:	f001 fd57 	bl	a6dc <le_param_req>
    8c2e:	b938      	cbnz	r0, 8c40 <le_conn_param_req+0x7c>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
    8c30:	211e      	movs	r1, #30
    8c32:	4620      	mov	r0, r4
    8c34:	f7ff ff9c 	bl	8b70 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    8c38:	4630      	mov	r0, r6
    8c3a:	f017 fcdc 	bl	205f6 <bt_conn_unref>
    8c3e:	e7f1      	b.n	8c24 <le_conn_param_req+0x60>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    8c40:	210e      	movs	r1, #14
    8c42:	f242 0020 	movw	r0, #8224	; 0x2020
    8c46:	f7ff fec9 	bl	89dc <bt_hci_cmd_create>
	if (!buf) {
    8c4a:	4605      	mov	r5, r0
    8c4c:	2800      	cmp	r0, #0
    8c4e:	d0f3      	beq.n	8c38 <le_conn_param_req+0x74>
	cp = net_buf_add(buf, sizeof(*cp));
    8c50:	210e      	movs	r1, #14
    8c52:	3008      	adds	r0, #8
    8c54:	f019 fc9c 	bl	22590 <net_buf_simple_add>
	(void)memset(cp, 0, sizeof(*cp));
    8c58:	220e      	movs	r2, #14
	cp = net_buf_add(buf, sizeof(*cp));
    8c5a:	4604      	mov	r4, r0
	(void)memset(cp, 0, sizeof(*cp));
    8c5c:	2100      	movs	r1, #0
    8c5e:	f017 f931 	bl	1fec4 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    8c62:	f8bd 3000 	ldrh.w	r3, [sp]
    8c66:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    8c68:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    8c6c:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    8c6e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    8c72:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    8c74:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
    8c78:	8027      	strh	r7, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    8c7a:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    8c7c:	4629      	mov	r1, r5
    8c7e:	f242 0020 	movw	r0, #8224	; 0x2020
    8c82:	f7ff fee3 	bl	8a4c <bt_hci_cmd_send>
    8c86:	e7d7      	b.n	8c38 <le_conn_param_req+0x74>
    8c88:	000236e8 	.word	0x000236e8
    8c8c:	000237a8 	.word	0x000237a8
    8c90:	00025837 	.word	0x00025837

00008c94 <bt_hci_cmd_send_sync>:
{
    8c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8c98:	4607      	mov	r7, r0
    8c9a:	b086      	sub	sp, #24
    8c9c:	4615      	mov	r5, r2
	if (!buf) {
    8c9e:	460c      	mov	r4, r1
    8ca0:	b921      	cbnz	r1, 8cac <bt_hci_cmd_send_sync+0x18>
		buf = bt_hci_cmd_create(opcode, 0);
    8ca2:	f7ff fe9b 	bl	89dc <bt_hci_cmd_create>
		if (!buf) {
    8ca6:	4604      	mov	r4, r0
    8ca8:	2800      	cmp	r0, #0
    8caa:	d055      	beq.n	8d58 <bt_hci_cmd_send_sync+0xc4>
	return z_impl_k_sem_init(sem, initial_count, limit);
    8cac:	2201      	movs	r2, #1
    8cae:	2100      	movs	r1, #0
    8cb0:	4668      	mov	r0, sp
    8cb2:	f01a f99a 	bl	22fea <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    8cb6:	4620      	mov	r0, r4
    8cb8:	f012 fe5a 	bl	1b970 <net_buf_id>
    8cbc:	4e28      	ldr	r6, [pc, #160]	; (8d60 <bt_hci_cmd_send_sync+0xcc>)
    8cbe:	230c      	movs	r3, #12
    8cc0:	fb03 6000 	mla	r0, r3, r0, r6
    8cc4:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_ref(buf);
    8cc8:	4620      	mov	r0, r4
    8cca:	f019 fc2f 	bl	2252c <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    8cce:	4825      	ldr	r0, [pc, #148]	; (8d64 <bt_hci_cmd_send_sync+0xd0>)
    8cd0:	4621      	mov	r1, r4
    8cd2:	f019 fc1e 	bl	22512 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    8cd6:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    8cda:	2300      	movs	r3, #0
    8cdc:	4668      	mov	r0, sp
    8cde:	f014 fd6d 	bl	1d7bc <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
    8ce2:	4680      	mov	r8, r0
    8ce4:	b180      	cbz	r0, 8d08 <bt_hci_cmd_send_sync+0x74>
    8ce6:	4a20      	ldr	r2, [pc, #128]	; (8d68 <bt_hci_cmd_send_sync+0xd4>)
    8ce8:	4920      	ldr	r1, [pc, #128]	; (8d6c <bt_hci_cmd_send_sync+0xd8>)
    8cea:	4821      	ldr	r0, [pc, #132]	; (8d70 <bt_hci_cmd_send_sync+0xdc>)
    8cec:	f44f 73b9 	mov.w	r3, #370	; 0x172
    8cf0:	f015 f92b 	bl	1df4a <printk>
    8cf4:	481f      	ldr	r0, [pc, #124]	; (8d74 <bt_hci_cmd_send_sync+0xe0>)
    8cf6:	4641      	mov	r1, r8
    8cf8:	f015 f927 	bl	1df4a <printk>
    8cfc:	4040      	eors	r0, r0
    8cfe:	f380 8811 	msr	BASEPRI, r0
    8d02:	f04f 0003 	mov.w	r0, #3
    8d06:	df02      	svc	2
	status = cmd(buf)->status;
    8d08:	4620      	mov	r0, r4
    8d0a:	f012 fe31 	bl	1b970 <net_buf_id>
    8d0e:	230c      	movs	r3, #12
    8d10:	4343      	muls	r3, r0
    8d12:	5cf6      	ldrb	r6, [r6, r3]
	if (status) {
    8d14:	b1be      	cbz	r6, 8d46 <bt_hci_cmd_send_sync+0xb2>
    8d16:	4a18      	ldr	r2, [pc, #96]	; (8d78 <bt_hci_cmd_send_sync+0xe4>)
    8d18:	4b18      	ldr	r3, [pc, #96]	; (8d7c <bt_hci_cmd_send_sync+0xe8>)
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
    8d1a:	4819      	ldr	r0, [pc, #100]	; (8d80 <bt_hci_cmd_send_sync+0xec>)
    8d1c:	1a9b      	subs	r3, r3, r2
    8d1e:	08db      	lsrs	r3, r3, #3
    8d20:	019b      	lsls	r3, r3, #6
    8d22:	f043 0302 	orr.w	r3, r3, #2
    8d26:	4632      	mov	r2, r6
    8d28:	4639      	mov	r1, r7
    8d2a:	f015 fbef 	bl	1e50c <log_2>
		net_buf_unref(buf);
    8d2e:	4620      	mov	r0, r4
    8d30:	f012 fed2 	bl	1bad8 <net_buf_unref>
			return -EIO;
    8d34:	2e09      	cmp	r6, #9
    8d36:	bf0c      	ite	eq
    8d38:	f06f 003c 	mvneq.w	r0, #60	; 0x3c
    8d3c:	f06f 0004 	mvnne.w	r0, #4
}
    8d40:	b006      	add	sp, #24
    8d42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (rsp) {
    8d46:	b115      	cbz	r5, 8d4e <bt_hci_cmd_send_sync+0xba>
		*rsp = buf;
    8d48:	602c      	str	r4, [r5, #0]
	return 0;
    8d4a:	4630      	mov	r0, r6
    8d4c:	e7f8      	b.n	8d40 <bt_hci_cmd_send_sync+0xac>
		net_buf_unref(buf);
    8d4e:	4620      	mov	r0, r4
    8d50:	f012 fec2 	bl	1bad8 <net_buf_unref>
	return 0;
    8d54:	4628      	mov	r0, r5
    8d56:	e7f3      	b.n	8d40 <bt_hci_cmd_send_sync+0xac>
			return -ENOBUFS;
    8d58:	f06f 0036 	mvn.w	r0, #54	; 0x36
    8d5c:	e7f0      	b.n	8d40 <bt_hci_cmd_send_sync+0xac>
    8d5e:	bf00      	nop
    8d60:	20001ed8 	.word	0x20001ed8
    8d64:	200000ec 	.word	0x200000ec
    8d68:	00025977 	.word	0x00025977
    8d6c:	000259ab 	.word	0x000259ab
    8d70:	000259b4 	.word	0x000259b4
    8d74:	00025a93 	.word	0x00025a93
    8d78:	000236e8 	.word	0x000236e8
    8d7c:	000237a8 	.word	0x000237a8
    8d80:	00025ab3 	.word	0x00025ab3

00008d84 <hci_le_read_max_data_len>:
{
    8d84:	b573      	push	{r0, r1, r4, r5, r6, lr}
    8d86:	4606      	mov	r6, r0
    8d88:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    8d8a:	aa01      	add	r2, sp, #4
    8d8c:	2100      	movs	r1, #0
    8d8e:	f242 002f 	movw	r0, #8239	; 0x202f
    8d92:	f7ff ff7f 	bl	8c94 <bt_hci_cmd_send_sync>
	if (err) {
    8d96:	4604      	mov	r4, r0
    8d98:	b160      	cbz	r0, 8db4 <hci_le_read_max_data_len+0x30>
    8d9a:	490c      	ldr	r1, [pc, #48]	; (8dcc <hci_le_read_max_data_len+0x48>)
    8d9c:	4b0c      	ldr	r3, [pc, #48]	; (8dd0 <hci_le_read_max_data_len+0x4c>)
		BT_ERR("Failed to read DLE max data len");
    8d9e:	480d      	ldr	r0, [pc, #52]	; (8dd4 <hci_le_read_max_data_len+0x50>)
    8da0:	1ac9      	subs	r1, r1, r3
    8da2:	08c9      	lsrs	r1, r1, #3
    8da4:	0189      	lsls	r1, r1, #6
    8da6:	f041 0101 	orr.w	r1, r1, #1
    8daa:	f015 fb8e 	bl	1e4ca <log_0>
}
    8dae:	4620      	mov	r0, r4
    8db0:	b002      	add	sp, #8
    8db2:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    8db4:	9801      	ldr	r0, [sp, #4]
    8db6:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    8db8:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    8dbc:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
    8dbe:	f8b3 3003 	ldrh.w	r3, [r3, #3]
    8dc2:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
    8dc4:	f012 fe88 	bl	1bad8 <net_buf_unref>
	return 0;
    8dc8:	e7f1      	b.n	8dae <hci_le_read_max_data_len+0x2a>
    8dca:	bf00      	nop
    8dcc:	000237a8 	.word	0x000237a8
    8dd0:	000236e8 	.word	0x000236e8
    8dd4:	00025acf 	.word	0x00025acf

00008dd8 <set_random_address>:
{
    8dd8:	b570      	push	{r4, r5, r6, lr}
	return memcmp(a, b, sizeof(*a));
    8dda:	4e15      	ldr	r6, [pc, #84]	; (8e30 <set_random_address+0x58>)
    8ddc:	2206      	movs	r2, #6
    8dde:	f106 0131 	add.w	r1, r6, #49	; 0x31
    8de2:	4605      	mov	r5, r0
    8de4:	f017 f833 	bl	1fe4e <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    8de8:	4604      	mov	r4, r0
    8dea:	b1e0      	cbz	r0, 8e26 <set_random_address+0x4e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    8dec:	2106      	movs	r1, #6
    8dee:	f242 0005 	movw	r0, #8197	; 0x2005
    8df2:	f7ff fdf3 	bl	89dc <bt_hci_cmd_create>
	if (!buf) {
    8df6:	4604      	mov	r4, r0
    8df8:	b1b8      	cbz	r0, 8e2a <set_random_address+0x52>
	net_buf_add_mem(buf, addr, sizeof(*addr));
    8dfa:	2206      	movs	r2, #6
    8dfc:	4629      	mov	r1, r5
    8dfe:	3008      	adds	r0, #8
    8e00:	f019 fbcc 	bl	2259c <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    8e04:	4621      	mov	r1, r4
    8e06:	2200      	movs	r2, #0
    8e08:	f242 0005 	movw	r0, #8197	; 0x2005
    8e0c:	f7ff ff42 	bl	8c94 <bt_hci_cmd_send_sync>
	if (err) {
    8e10:	4604      	mov	r4, r0
    8e12:	b940      	cbnz	r0, 8e26 <set_random_address+0x4e>
}

static inline void bt_addr_copy(bt_addr_t *dst, const bt_addr_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    8e14:	2206      	movs	r2, #6
    8e16:	4629      	mov	r1, r5
    8e18:	f106 0031 	add.w	r0, r6, #49	; 0x31
    8e1c:	f017 f827 	bl	1fe6e <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    8e20:	2301      	movs	r3, #1
    8e22:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
}
    8e26:	4620      	mov	r0, r4
    8e28:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    8e2a:	f06f 0436 	mvn.w	r4, #54	; 0x36
    8e2e:	e7fa      	b.n	8e26 <set_random_address+0x4e>
    8e30:	20000000 	.word	0x20000000

00008e34 <le_create_conn_set_random_addr.isra.0>:
static int le_create_conn_set_random_addr(bool use_filter, uint8_t *own_addr_type)
    8e34:	b538      	push	{r3, r4, r5, lr}
		if (addr->type == BT_ADDR_LE_RANDOM) {
    8e36:	4c07      	ldr	r4, [pc, #28]	; (8e54 <le_create_conn_set_random_addr.isra.0+0x20>)
    8e38:	7823      	ldrb	r3, [r4, #0]
    8e3a:	2b01      	cmp	r3, #1
static int le_create_conn_set_random_addr(bool use_filter, uint8_t *own_addr_type)
    8e3c:	4605      	mov	r5, r0
		if (addr->type == BT_ADDR_LE_RANDOM) {
    8e3e:	d003      	beq.n	8e48 <le_create_conn_set_random_addr.isra.0+0x14>
		*own_addr_type = addr->type;
    8e40:	7823      	ldrb	r3, [r4, #0]
    8e42:	702b      	strb	r3, [r5, #0]
	return 0;
    8e44:	2000      	movs	r0, #0
}
    8e46:	bd38      	pop	{r3, r4, r5, pc}
			err = set_random_address(&addr->a);
    8e48:	1c60      	adds	r0, r4, #1
    8e4a:	f7ff ffc5 	bl	8dd8 <set_random_address>
			if (err) {
    8e4e:	2800      	cmp	r0, #0
    8e50:	d0f6      	beq.n	8e40 <le_create_conn_set_random_addr.isra.0+0xc>
    8e52:	e7f8      	b.n	8e46 <le_create_conn_set_random_addr.isra.0+0x12>
    8e54:	20000000 	.word	0x20000000

00008e58 <set_le_adv_enable_legacy>:
{
    8e58:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    8e5a:	4606      	mov	r6, r0
    8e5c:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    8e5e:	f242 000a 	movw	r0, #8202	; 0x200a
    8e62:	2101      	movs	r1, #1
    8e64:	f7ff fdba 	bl	89dc <bt_hci_cmd_create>
	if (!buf) {
    8e68:	4604      	mov	r4, r0
    8e6a:	b1e8      	cbz	r0, 8ea8 <set_le_adv_enable_legacy+0x50>
	if (enable) {
    8e6c:	3008      	adds	r0, #8
    8e6e:	b1cd      	cbz	r5, 8ea4 <set_le_adv_enable_legacy+0x4c>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
    8e70:	2101      	movs	r1, #1
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    8e72:	f019 fb9c 	bl	225ae <net_buf_simple_add_u8>
	cmd_state_set_init(&state, adv->flags, BT_ADV_ENABLED, enable);
    8e76:	3614      	adds	r6, #20
	state->bit = bit;
    8e78:	2306      	movs	r3, #6
	cmd(buf)->state = &state;
    8e7a:	4620      	mov	r0, r4
	state->bit = bit;
    8e7c:	9302      	str	r3, [sp, #8]
	state->target = target;
    8e7e:	9601      	str	r6, [sp, #4]
	state->val = val;
    8e80:	f88d 500c 	strb.w	r5, [sp, #12]
	cmd(buf)->state = &state;
    8e84:	f012 fd74 	bl	1b970 <net_buf_id>
    8e88:	4b09      	ldr	r3, [pc, #36]	; (8eb0 <set_le_adv_enable_legacy+0x58>)
    8e8a:	220c      	movs	r2, #12
    8e8c:	fb02 3000 	mla	r0, r2, r0, r3
    8e90:	ab01      	add	r3, sp, #4
    8e92:	6043      	str	r3, [r0, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    8e94:	2200      	movs	r2, #0
    8e96:	4621      	mov	r1, r4
    8e98:	f242 000a 	movw	r0, #8202	; 0x200a
    8e9c:	f7ff fefa 	bl	8c94 <bt_hci_cmd_send_sync>
}
    8ea0:	b004      	add	sp, #16
    8ea2:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    8ea4:	4629      	mov	r1, r5
    8ea6:	e7e4      	b.n	8e72 <set_le_adv_enable_legacy+0x1a>
		return -ENOBUFS;
    8ea8:	f06f 0036 	mvn.w	r0, #54	; 0x36
    8eac:	e7f8      	b.n	8ea0 <set_le_adv_enable_legacy+0x48>
    8eae:	bf00      	nop
    8eb0:	20001ed8 	.word	0x20001ed8

00008eb4 <set_le_scan_enable_legacy>:
{
    8eb4:	b530      	push	{r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    8eb6:	2102      	movs	r1, #2
{
    8eb8:	b085      	sub	sp, #20
    8eba:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    8ebc:	f242 000c 	movw	r0, #8204	; 0x200c
    8ec0:	f7ff fd8c 	bl	89dc <bt_hci_cmd_create>
	if (!buf) {
    8ec4:	4605      	mov	r5, r0
    8ec6:	b348      	cbz	r0, 8f1c <set_le_scan_enable_legacy+0x68>
	cp = net_buf_add(buf, sizeof(*cp));
    8ec8:	2102      	movs	r1, #2
    8eca:	3008      	adds	r0, #8
    8ecc:	f019 fb60 	bl	22590 <net_buf_simple_add>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    8ed0:	2c01      	cmp	r4, #1
	cp = net_buf_add(buf, sizeof(*cp));
    8ed2:	4603      	mov	r3, r0
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    8ed4:	d11f      	bne.n	8f16 <set_le_scan_enable_legacy+0x62>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    8ed6:	4813      	ldr	r0, [pc, #76]	; (8f24 <set_le_scan_enable_legacy+0x70>)
    8ed8:	f017 f8ea 	bl	200b0 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    8edc:	f3c0 2000 	ubfx	r0, r0, #8, #1
    8ee0:	7058      	strb	r0, [r3, #1]
	cp->enable = enable;
    8ee2:	701c      	strb	r4, [r3, #0]
	state->target = target;
    8ee4:	4b0f      	ldr	r3, [pc, #60]	; (8f24 <set_le_scan_enable_legacy+0x70>)
    8ee6:	9301      	str	r3, [sp, #4]
	cmd_state_set_init(&state, bt_dev.flags, BT_DEV_SCANNING,
    8ee8:	f004 0401 	and.w	r4, r4, #1
	state->bit = bit;
    8eec:	2305      	movs	r3, #5
	cmd(buf)->state = &state;
    8eee:	4628      	mov	r0, r5
	state->bit = bit;
    8ef0:	9302      	str	r3, [sp, #8]
	cmd_state_set_init(&state, bt_dev.flags, BT_DEV_SCANNING,
    8ef2:	f88d 400c 	strb.w	r4, [sp, #12]
	cmd(buf)->state = &state;
    8ef6:	f012 fd3b 	bl	1b970 <net_buf_id>
    8efa:	4b0b      	ldr	r3, [pc, #44]	; (8f28 <set_le_scan_enable_legacy+0x74>)
    8efc:	220c      	movs	r2, #12
    8efe:	fb02 3000 	mla	r0, r2, r0, r3
    8f02:	ab01      	add	r3, sp, #4
    8f04:	6043      	str	r3, [r0, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    8f06:	2200      	movs	r2, #0
    8f08:	4629      	mov	r1, r5
    8f0a:	f242 000c 	movw	r0, #8204	; 0x200c
    8f0e:	f7ff fec1 	bl	8c94 <bt_hci_cmd_send_sync>
}
    8f12:	b005      	add	sp, #20
    8f14:	bd30      	pop	{r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    8f16:	2200      	movs	r2, #0
    8f18:	7042      	strb	r2, [r0, #1]
    8f1a:	e7e2      	b.n	8ee2 <set_le_scan_enable_legacy+0x2e>
		return -ENOBUFS;
    8f1c:	f06f 0036 	mvn.w	r0, #54	; 0x36
    8f20:	e7f7      	b.n	8f12 <set_le_scan_enable_legacy+0x5e>
    8f22:	bf00      	nop
    8f24:	20000098 	.word	0x20000098
    8f28:	20001ed8 	.word	0x20001ed8

00008f2c <start_le_scan_legacy>:
{
    8f2c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    8f2e:	4605      	mov	r5, r0
    8f30:	460e      	mov	r6, r1
    8f32:	4614      	mov	r4, r2
	(void)memset(&set_param, 0, sizeof(set_param));
    8f34:	2100      	movs	r1, #0
    8f36:	2207      	movs	r2, #7
    8f38:	4668      	mov	r0, sp
    8f3a:	f016 ffc3 	bl	1fec4 <memset>
		*own_addr_type = bt_dev.id_addr[0].type;
    8f3e:	481f      	ldr	r0, [pc, #124]	; (8fbc <start_le_scan_legacy+0x90>)
	set_param.scan_type = scan_type;
    8f40:	f88d 5000 	strb.w	r5, [sp]
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_NO_WHITELIST;
    8f44:	2300      	movs	r3, #0
    8f46:	f88d 3006 	strb.w	r3, [sp, #6]
		*own_addr_type = bt_dev.id_addr[0].type;
    8f4a:	f810 3b2c 	ldrb.w	r3, [r0], #44
	set_param.interval = sys_cpu_to_le16(interval);
    8f4e:	f8ad 6001 	strh.w	r6, [sp, #1]
	set_param.window = sys_cpu_to_le16(window);
    8f52:	f8ad 4003 	strh.w	r4, [sp, #3]
		*own_addr_type = bt_dev.id_addr[0].type;
    8f56:	f88d 3005 	strb.w	r3, [sp, #5]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    8f5a:	f017 f8a9 	bl	200b0 <atomic_get>
		    adv && !atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    8f5e:	0642      	lsls	r2, r0, #25
    8f60:	d406      	bmi.n	8f70 <start_le_scan_legacy+0x44>
			err = le_set_private_addr(BT_ID_DEFAULT);
    8f62:	f017 f8f8 	bl	20156 <le_adv_set_private_addr.isra.0>
			if (err) {
    8f66:	4604      	mov	r4, r0
    8f68:	bb10      	cbnz	r0, 8fb0 <start_le_scan_legacy+0x84>
			*own_addr_type = BT_ADDR_LE_RANDOM;
    8f6a:	2301      	movs	r3, #1
    8f6c:	f88d 3005 	strb.w	r3, [sp, #5]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    8f70:	2107      	movs	r1, #7
    8f72:	f242 000b 	movw	r0, #8203	; 0x200b
    8f76:	f7ff fd31 	bl	89dc <bt_hci_cmd_create>
	if (!buf) {
    8f7a:	4604      	mov	r4, r0
    8f7c:	b1d8      	cbz	r0, 8fb6 <start_le_scan_legacy+0x8a>
	net_buf_add_mem(buf, &set_param, sizeof(set_param));
    8f7e:	2207      	movs	r2, #7
    8f80:	4669      	mov	r1, sp
    8f82:	3008      	adds	r0, #8
    8f84:	f019 fb0a 	bl	2259c <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_PARAM, buf, NULL);
    8f88:	4621      	mov	r1, r4
    8f8a:	2200      	movs	r2, #0
    8f8c:	f242 000b 	movw	r0, #8203	; 0x200b
    8f90:	f7ff fe80 	bl	8c94 <bt_hci_cmd_send_sync>
	if (err) {
    8f94:	4604      	mov	r4, r0
    8f96:	b958      	cbnz	r0, 8fb0 <start_le_scan_legacy+0x84>
	return set_le_scan_enable_legacy(enable);
    8f98:	2001      	movs	r0, #1
    8f9a:	f7ff ff8b 	bl	8eb4 <set_le_scan_enable_legacy>
	if (err) {
    8f9e:	4604      	mov	r4, r0
    8fa0:	b930      	cbnz	r0, 8fb0 <start_le_scan_legacy+0x84>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_ACTIVE_SCAN, active_scan);
    8fa2:	1e6b      	subs	r3, r5, #1
    8fa4:	425a      	negs	r2, r3
    8fa6:	4806      	ldr	r0, [pc, #24]	; (8fc0 <start_le_scan_legacy+0x94>)
    8fa8:	415a      	adcs	r2, r3
    8faa:	2107      	movs	r1, #7
    8fac:	f017 f8a7 	bl	200fe <atomic_set_bit_to>
}
    8fb0:	4620      	mov	r0, r4
    8fb2:	b002      	add	sp, #8
    8fb4:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    8fb6:	f06f 0436 	mvn.w	r4, #54	; 0x36
    8fba:	e7f9      	b.n	8fb0 <start_le_scan_legacy+0x84>
    8fbc:	20000000 	.word	0x20000000
    8fc0:	20000098 	.word	0x20000098

00008fc4 <bt_le_create_conn_legacy>:
{
    8fc4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    8fc8:	4606      	mov	r6, r0
	err = le_create_conn_set_random_addr(use_filter, &own_addr_type);
    8fca:	f10d 0003 	add.w	r0, sp, #3
    8fce:	f7ff ff31 	bl	8e34 <le_create_conn_set_random_addr.isra.0>
	if (err) {
    8fd2:	4605      	mov	r5, r0
    8fd4:	2800      	cmp	r0, #0
    8fd6:	d150      	bne.n	907a <bt_le_create_conn_legacy+0xb6>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
    8fd8:	2119      	movs	r1, #25
    8fda:	f242 000d 	movw	r0, #8205	; 0x200d
    8fde:	f7ff fcfd 	bl	89dc <bt_hci_cmd_create>
	if (!buf) {
    8fe2:	4607      	mov	r7, r0
    8fe4:	2800      	cmp	r0, #0
    8fe6:	d04f      	beq.n	9088 <bt_le_create_conn_legacy+0xc4>
	cp = net_buf_add(buf, sizeof(*cp));
    8fe8:	2119      	movs	r1, #25
    8fea:	3008      	adds	r0, #8
    8fec:	f019 fad0 	bl	22590 <net_buf_simple_add>
	memset(cp, 0, sizeof(*cp));
    8ff0:	4629      	mov	r1, r5
	cp = net_buf_add(buf, sizeof(*cp));
    8ff2:	4604      	mov	r4, r0
	memset(cp, 0, sizeof(*cp));
    8ff4:	2219      	movs	r2, #25
    8ff6:	f016 ff65 	bl	1fec4 <memset>
		if (!bt_dev.le.rl_size ||
    8ffa:	4d25      	ldr	r5, [pc, #148]	; (9090 <bt_le_create_conn_legacy+0xcc>)
	cp->own_addr_type = own_addr_type;
    8ffc:	f89d 3003 	ldrb.w	r3, [sp, #3]
    9000:	7323      	strb	r3, [r4, #12]
		if (!bt_dev.le.rl_size ||
    9002:	f895 30cc 	ldrb.w	r3, [r5, #204]	; 0xcc
    9006:	2b00      	cmp	r3, #0
    9008:	d03b      	beq.n	9082 <bt_le_create_conn_legacy+0xbe>
    900a:	f895 20cd 	ldrb.w	r2, [r5, #205]	; 0xcd
    900e:	429a      	cmp	r2, r3
    9010:	d837      	bhi.n	9082 <bt_le_create_conn_legacy+0xbe>
		const bt_addr_le_t *peer_addr = &conn->le.dst;
    9012:	f106 0188 	add.w	r1, r6, #136	; 0x88
		bt_addr_le_copy(&cp->peer_addr, peer_addr);
    9016:	1d60      	adds	r0, r4, #5
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_DIRECT;
    9018:	f04f 0800 	mov.w	r8, #0
		bt_addr_le_copy(&cp->peer_addr, peer_addr);
    901c:	f017 f84e 	bl	200bc <bt_addr_le_copy>
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_DIRECT;
    9020:	f884 8004 	strb.w	r8, [r4, #4]
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
    9024:	89ab      	ldrh	r3, [r5, #12]
    9026:	8023      	strh	r3, [r4, #0]
	cp->scan_window = sys_cpu_to_le16(bt_dev.create_param.window);
    9028:	89eb      	ldrh	r3, [r5, #14]
    902a:	8063      	strh	r3, [r4, #2]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
    902c:	f8b6 30a0 	ldrh.w	r3, [r6, #160]	; 0xa0
    9030:	f8a4 300d 	strh.w	r3, [r4, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
    9034:	f8b6 30a2 	ldrh.w	r3, [r6, #162]	; 0xa2
    9038:	f8a4 300f 	strh.w	r3, [r4, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
    903c:	f8b6 30a4 	ldrh.w	r3, [r6, #164]	; 0xa4
    9040:	f8a4 3011 	strh.w	r3, [r4, #17]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
    9044:	f8b6 30a6 	ldrh.w	r3, [r6, #166]	; 0xa6
    9048:	f8a4 3013 	strh.w	r3, [r4, #19]
	state->target = target;
    904c:	4b11      	ldr	r3, [pc, #68]	; (9094 <bt_le_create_conn_legacy+0xd0>)
    904e:	9301      	str	r3, [sp, #4]
	state->bit = bit;
    9050:	230b      	movs	r3, #11
    9052:	9302      	str	r3, [sp, #8]
	cmd(buf)->state = &state;
    9054:	4638      	mov	r0, r7
	state->val = val;
    9056:	2301      	movs	r3, #1
    9058:	f88d 300c 	strb.w	r3, [sp, #12]
	cmd(buf)->state = &state;
    905c:	f012 fc88 	bl	1b970 <net_buf_id>
    9060:	4b0d      	ldr	r3, [pc, #52]	; (9098 <bt_le_create_conn_legacy+0xd4>)
    9062:	220c      	movs	r2, #12
    9064:	fb02 3000 	mla	r0, r2, r0, r3
    9068:	ab01      	add	r3, sp, #4
    906a:	6043      	str	r3, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    906c:	4642      	mov	r2, r8
    906e:	4639      	mov	r1, r7
    9070:	f242 000d 	movw	r0, #8205	; 0x200d
    9074:	f7ff fe0e 	bl	8c94 <bt_hci_cmd_send_sync>
    9078:	4605      	mov	r5, r0
}
    907a:	4628      	mov	r0, r5
    907c:	b004      	add	sp, #16
    907e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			peer_addr = &conn->le.resp_addr;
    9082:	f106 0196 	add.w	r1, r6, #150	; 0x96
    9086:	e7c6      	b.n	9016 <bt_le_create_conn_legacy+0x52>
		return -ENOBUFS;
    9088:	f06f 0536 	mvn.w	r5, #54	; 0x36
    908c:	e7f5      	b.n	907a <bt_le_create_conn_legacy+0xb6>
    908e:	bf00      	nop
    9090:	20000000 	.word	0x20000000
    9094:	20000098 	.word	0x20000098
    9098:	20001ed8 	.word	0x20001ed8

0000909c <bt_le_create_conn_cancel>:
{
    909c:	b530      	push	{r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
    909e:	2100      	movs	r1, #0
{
    90a0:	b085      	sub	sp, #20
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
    90a2:	f242 000e 	movw	r0, #8206	; 0x200e
    90a6:	f7ff fc99 	bl	89dc <bt_hci_cmd_create>
	state->target = target;
    90aa:	4b0c      	ldr	r3, [pc, #48]	; (90dc <bt_le_create_conn_cancel+0x40>)
    90ac:	9301      	str	r3, [sp, #4]
	state->val = val;
    90ae:	2500      	movs	r5, #0
	state->bit = bit;
    90b0:	230b      	movs	r3, #11
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
    90b2:	4604      	mov	r4, r0
	state->bit = bit;
    90b4:	9302      	str	r3, [sp, #8]
	state->val = val;
    90b6:	f88d 500c 	strb.w	r5, [sp, #12]
	cmd(buf)->state = &state;
    90ba:	f012 fc59 	bl	1b970 <net_buf_id>
    90be:	4b08      	ldr	r3, [pc, #32]	; (90e0 <bt_le_create_conn_cancel+0x44>)
    90c0:	220c      	movs	r2, #12
    90c2:	fb02 3000 	mla	r0, r2, r0, r3
    90c6:	ab01      	add	r3, sp, #4
    90c8:	6043      	str	r3, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN_CANCEL, buf, NULL);
    90ca:	462a      	mov	r2, r5
    90cc:	4621      	mov	r1, r4
    90ce:	f242 000e 	movw	r0, #8206	; 0x200e
    90d2:	f7ff fddf 	bl	8c94 <bt_hci_cmd_send_sync>
}
    90d6:	b005      	add	sp, #20
    90d8:	bd30      	pop	{r4, r5, pc}
    90da:	bf00      	nop
    90dc:	20000098 	.word	0x20000098
    90e0:	20001ed8 	.word	0x20001ed8

000090e4 <conn_auto_initiate>:
{
    90e4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    90e6:	7b43      	ldrb	r3, [r0, #13]
    90e8:	2b06      	cmp	r3, #6
{
    90ea:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
    90ec:	d11e      	bne.n	912c <conn_auto_initiate+0x48>
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
    90ee:	1d06      	adds	r6, r0, #4
    90f0:	4630      	mov	r0, r6
    90f2:	f016 ffdd 	bl	200b0 <atomic_get>
    90f6:	0480      	lsls	r0, r0, #18
    90f8:	d41a      	bmi.n	9130 <conn_auto_initiate+0x4c>
    90fa:	78e3      	ldrb	r3, [r4, #3]
    90fc:	b123      	cbz	r3, 9108 <conn_auto_initiate+0x24>
	     BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features))) {
    90fe:	4b2e      	ldr	r3, [pc, #184]	; (91b8 <conn_auto_initiate+0xd4>)
	    ((conn->role == BT_HCI_ROLE_MASTER) ||
    9100:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
    9104:	0719      	lsls	r1, r3, #28
    9106:	d513      	bpl.n	9130 <conn_auto_initiate+0x4c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    9108:	2102      	movs	r1, #2
    910a:	f242 0016 	movw	r0, #8214	; 0x2016
    910e:	f7ff fc65 	bl	89dc <bt_hci_cmd_create>
	if (!buf) {
    9112:	4605      	mov	r5, r0
    9114:	b160      	cbz	r0, 9130 <conn_auto_initiate+0x4c>
	cp = net_buf_add(buf, sizeof(*cp));
    9116:	2102      	movs	r1, #2
    9118:	3008      	adds	r0, #8
    911a:	f019 fa39 	bl	22590 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    911e:	8823      	ldrh	r3, [r4, #0]
    9120:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    9122:	4629      	mov	r1, r5
    9124:	f242 0016 	movw	r0, #8214	; 0x2016
    9128:	f7ff fc90 	bl	8a4c <bt_hci_cmd_send>
}
    912c:	b004      	add	sp, #16
    912e:	bd70      	pop	{r4, r5, r6, pc}
    9130:	4630      	mov	r0, r6
    9132:	f016 ffbd 	bl	200b0 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    9136:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    913a:	4d1f      	ldr	r5, [pc, #124]	; (91b8 <conn_auto_initiate+0xd4>)
    913c:	f3c0 3100 	ubfx	r1, r0, #12, #1
    9140:	d11a      	bne.n	9178 <conn_auto_initiate+0x94>
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
    9142:	f895 30a1 	ldrb.w	r3, [r5, #161]	; 0xa1
    9146:	07da      	lsls	r2, r3, #31
    9148:	d516      	bpl.n	9178 <conn_auto_initiate+0x94>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
    914a:	2302      	movs	r3, #2
    914c:	9100      	str	r1, [sp, #0]
    914e:	461a      	mov	r2, r3
    9150:	4620      	mov	r0, r4
    9152:	f017 f8c5 	bl	202e0 <bt_le_set_phy>
		if (!err) {
    9156:	4601      	mov	r1, r0
    9158:	b920      	cbnz	r0, 9164 <conn_auto_initiate+0x80>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    915a:	2180      	movs	r1, #128	; 0x80
    915c:	4630      	mov	r0, r6
    915e:	f016 ffbf 	bl	200e0 <atomic_or>
			return;
    9162:	e7e3      	b.n	912c <conn_auto_initiate+0x48>
    9164:	4a15      	ldr	r2, [pc, #84]	; (91bc <conn_auto_initiate+0xd8>)
    9166:	4b16      	ldr	r3, [pc, #88]	; (91c0 <conn_auto_initiate+0xdc>)
		BT_ERR("Failed to set LE PHY (%d)", err);
    9168:	4816      	ldr	r0, [pc, #88]	; (91c4 <conn_auto_initiate+0xe0>)
    916a:	1ad2      	subs	r2, r2, r3
    916c:	08d2      	lsrs	r2, r2, #3
    916e:	0192      	lsls	r2, r2, #6
    9170:	f042 0201 	orr.w	r2, r2, #1
    9174:	f015 f9b6 	bl	1e4e4 <log_1>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
    9178:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
    917c:	069b      	lsls	r3, r3, #26
    917e:	d5d5      	bpl.n	912c <conn_auto_initiate+0x48>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    9180:	f10d 010e 	add.w	r1, sp, #14
    9184:	a803      	add	r0, sp, #12
    9186:	f7ff fdfd 	bl	8d84 <hci_le_read_max_data_len>
		if (!err) {
    918a:	2800      	cmp	r0, #0
    918c:	d1ce      	bne.n	912c <conn_auto_initiate+0x48>
			err = bt_le_set_data_len(conn, tx_octets, tx_time);
    918e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    9192:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    9196:	4620      	mov	r0, r4
    9198:	f017 f885 	bl	202a6 <bt_le_set_data_len>
			if (err) {
    919c:	4601      	mov	r1, r0
    919e:	2800      	cmp	r0, #0
    91a0:	d0c4      	beq.n	912c <conn_auto_initiate+0x48>
    91a2:	4b07      	ldr	r3, [pc, #28]	; (91c0 <conn_auto_initiate+0xdc>)
    91a4:	4a05      	ldr	r2, [pc, #20]	; (91bc <conn_auto_initiate+0xd8>)
				BT_ERR("Failed to set data len (%d)", err);
    91a6:	4808      	ldr	r0, [pc, #32]	; (91c8 <conn_auto_initiate+0xe4>)
    91a8:	1ad2      	subs	r2, r2, r3
    91aa:	08d2      	lsrs	r2, r2, #3
    91ac:	0192      	lsls	r2, r2, #6
    91ae:	f042 0201 	orr.w	r2, r2, #1
    91b2:	f015 f997 	bl	1e4e4 <log_1>
    91b6:	e7b9      	b.n	912c <conn_auto_initiate+0x48>
    91b8:	20000000 	.word	0x20000000
    91bc:	000237a8 	.word	0x000237a8
    91c0:	000236e8 	.word	0x000236e8
    91c4:	00025b01 	.word	0x00025b01
    91c8:	00025b1b 	.word	0x00025b1b

000091cc <le_phy_update_complete>:
{
    91cc:	b538      	push	{r3, r4, r5, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    91ce:	6883      	ldr	r3, [r0, #8]
    91d0:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    91d4:	4628      	mov	r0, r5
    91d6:	f001 fd97 	bl	ad08 <bt_conn_lookup_handle>
	if (!conn) {
    91da:	4604      	mov	r4, r0
    91dc:	b960      	cbnz	r0, 91f8 <le_phy_update_complete+0x2c>
    91de:	4b11      	ldr	r3, [pc, #68]	; (9224 <le_phy_update_complete+0x58>)
    91e0:	4a11      	ldr	r2, [pc, #68]	; (9228 <le_phy_update_complete+0x5c>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    91e2:	4812      	ldr	r0, [pc, #72]	; (922c <le_phy_update_complete+0x60>)
    91e4:	1ad2      	subs	r2, r2, r3
    91e6:	08d2      	lsrs	r2, r2, #3
    91e8:	0192      	lsls	r2, r2, #6
    91ea:	4629      	mov	r1, r5
    91ec:	f042 0201 	orr.w	r2, r2, #1
}
    91f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    91f4:	f015 b976 	b.w	1e4e4 <log_1>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    91f8:	1d05      	adds	r5, r0, #4
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    91fa:	f06f 0180 	mvn.w	r1, #128	; 0x80
    91fe:	4628      	mov	r0, r5
    9200:	f016 ff5f 	bl	200c2 <atomic_and>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    9204:	0603      	lsls	r3, r0, #24
    9206:	d507      	bpl.n	9218 <le_phy_update_complete+0x4c>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    9208:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    920c:	4628      	mov	r0, r5
    920e:	f016 ff67 	bl	200e0 <atomic_or>
		conn_auto_initiate(conn);
    9212:	4620      	mov	r0, r4
    9214:	f7ff ff66 	bl	90e4 <conn_auto_initiate>
	bt_conn_unref(conn);
    9218:	4620      	mov	r0, r4
}
    921a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    921e:	f017 b9ea 	b.w	205f6 <bt_conn_unref>
    9222:	bf00      	nop
    9224:	000236e8 	.word	0x000236e8
    9228:	000237a8 	.word	0x000237a8
    922c:	00025837 	.word	0x00025837

00009230 <le_remote_feat_complete>:
{
    9230:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
    9232:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    9234:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    9238:	4630      	mov	r0, r6
    923a:	f001 fd65 	bl	ad08 <bt_conn_lookup_handle>
	if (!conn) {
    923e:	4604      	mov	r4, r0
    9240:	b960      	cbnz	r0, 925c <le_remote_feat_complete+0x2c>
    9242:	4a10      	ldr	r2, [pc, #64]	; (9284 <le_remote_feat_complete+0x54>)
    9244:	4b10      	ldr	r3, [pc, #64]	; (9288 <le_remote_feat_complete+0x58>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    9246:	4811      	ldr	r0, [pc, #68]	; (928c <le_remote_feat_complete+0x5c>)
    9248:	1ad2      	subs	r2, r2, r3
    924a:	08d2      	lsrs	r2, r2, #3
    924c:	0192      	lsls	r2, r2, #6
    924e:	4631      	mov	r1, r6
    9250:	f042 0201 	orr.w	r2, r2, #1
}
    9254:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    9258:	f015 b944 	b.w	1e4e4 <log_1>
	if (!evt->status) {
    925c:	782b      	ldrb	r3, [r5, #0]
    925e:	b923      	cbnz	r3, 926a <le_remote_feat_complete+0x3a>
		memcpy(conn->le.features, evt->features,
    9260:	2208      	movs	r2, #8
    9262:	1ce9      	adds	r1, r5, #3
    9264:	30ac      	adds	r0, #172	; 0xac
    9266:	f016 fe02 	bl	1fe6e <memcpy>
    926a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    926e:	1d20      	adds	r0, r4, #4
    9270:	f016 ff36 	bl	200e0 <atomic_or>
	conn_auto_initiate(conn);
    9274:	4620      	mov	r0, r4
    9276:	f7ff ff35 	bl	90e4 <conn_auto_initiate>
	bt_conn_unref(conn);
    927a:	4620      	mov	r0, r4
}
    927c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    9280:	f017 b9b9 	b.w	205f6 <bt_conn_unref>
    9284:	000237a8 	.word	0x000237a8
    9288:	000236e8 	.word	0x000236e8
    928c:	00025837 	.word	0x00025837

00009290 <bt_id_add>:
{
    9290:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    9294:	4f63      	ldr	r7, [pc, #396]	; (9424 <bt_id_add+0x194>)
    9296:	f897 20cc 	ldrb.w	r2, [r7, #204]	; 0xcc
    929a:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
{
    929e:	4604      	mov	r4, r0
    92a0:	463d      	mov	r5, r7
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    92a2:	b10a      	cbz	r2, 92a8 <bt_id_add+0x18>
    92a4:	429a      	cmp	r2, r3
    92a6:	d209      	bcs.n	92bc <bt_id_add+0x2c>
		bt_dev.le.rl_entries++;
    92a8:	3301      	adds	r3, #1
    92aa:	f885 30cd 	strb.w	r3, [r5, #205]	; 0xcd
		keys->state |= BT_KEYS_ID_ADDED;
    92ae:	7a23      	ldrb	r3, [r4, #8]
    92b0:	f043 0304 	orr.w	r3, r3, #4
    92b4:	7223      	strb	r3, [r4, #8]
}
    92b6:	b002      	add	sp, #8
    92b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
    92bc:	2100      	movs	r1, #0
    92be:	2205      	movs	r2, #5
    92c0:	4608      	mov	r0, r1
    92c2:	f001 fd91 	bl	ade8 <bt_conn_lookup_state_le>
	if (conn) {
    92c6:	4606      	mov	r6, r0
    92c8:	b168      	cbz	r0, 92e6 <bt_id_add+0x56>
    92ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    92ce:	f107 0098 	add.w	r0, r7, #152	; 0x98
    92d2:	f016 ff05 	bl	200e0 <atomic_or>
	keys->state |= flag;
    92d6:	7a23      	ldrb	r3, [r4, #8]
    92d8:	f043 0301 	orr.w	r3, r3, #1
    92dc:	7223      	strb	r3, [r4, #8]
		bt_conn_unref(conn);
    92de:	4630      	mov	r0, r6
    92e0:	f017 f989 	bl	205f6 <bt_conn_unref>
		return;
    92e4:	e7e7      	b.n	92b6 <bt_id_add+0x26>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    92e6:	f107 0098 	add.w	r0, r7, #152	; 0x98
    92ea:	f016 fee1 	bl	200b0 <atomic_get>
	func(&bt_dev.adv, data);
    92ee:	4631      	mov	r1, r6
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    92f0:	f3c0 1740 	ubfx	r7, r0, #5, #1
    92f4:	f105 0018 	add.w	r0, r5, #24
    92f8:	f016 ff3f 	bl	2017a <adv_pause_enabled>
	if (scan_enabled) {
    92fc:	b117      	cbz	r7, 9304 <bt_id_add+0x74>
		set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    92fe:	4630      	mov	r0, r6
    9300:	f016 ffa9 	bl	20256 <set_le_scan_enable>
	if (bt_dev.le.rl_entries) {
    9304:	f895 30cd 	ldrb.w	r3, [r5, #205]	; 0xcd
    9308:	b173      	cbz	r3, 9328 <bt_id_add+0x98>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
    930a:	2000      	movs	r0, #0
    930c:	f016 ff8b 	bl	20226 <addr_res_enable>
		if (err) {
    9310:	b150      	cbz	r0, 9328 <bt_id_add+0x98>
    9312:	4945      	ldr	r1, [pc, #276]	; (9428 <bt_id_add+0x198>)
    9314:	4b45      	ldr	r3, [pc, #276]	; (942c <bt_id_add+0x19c>)
			BT_WARN("Failed to disable address resolution");
    9316:	4846      	ldr	r0, [pc, #280]	; (9430 <bt_id_add+0x1a0>)
    9318:	1ac9      	subs	r1, r1, r3
    931a:	08c9      	lsrs	r1, r1, #3
    931c:	0189      	lsls	r1, r1, #6
    931e:	f041 0102 	orr.w	r1, r1, #2
		BT_WARN("Set privacy mode command is not supported");
    9322:	f015 f8d2 	bl	1e4ca <log_0>
	if (err) {
    9326:	e023      	b.n	9370 <bt_id_add+0xe0>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
    9328:	f895 20cd 	ldrb.w	r2, [r5, #205]	; 0xcd
    932c:	f895 30cc 	ldrb.w	r3, [r5, #204]	; 0xcc
    9330:	429a      	cmp	r2, r3
    9332:	d129      	bne.n	9388 <bt_id_add+0xf8>
    9334:	4b3d      	ldr	r3, [pc, #244]	; (942c <bt_id_add+0x19c>)
    9336:	4e3c      	ldr	r6, [pc, #240]	; (9428 <bt_id_add+0x198>)
		BT_WARN("Resolving list size exceeded. Switching to host.");
    9338:	483e      	ldr	r0, [pc, #248]	; (9434 <bt_id_add+0x1a4>)
    933a:	1af6      	subs	r6, r6, r3
    933c:	08f6      	lsrs	r6, r6, #3
    933e:	01b6      	lsls	r6, r6, #6
    9340:	f046 0102 	orr.w	r1, r6, #2
    9344:	f015 f8c1 	bl	1e4ca <log_0>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
    9348:	2200      	movs	r2, #0
    934a:	4611      	mov	r1, r2
    934c:	f242 0029 	movw	r0, #8233	; 0x2029
    9350:	f7ff fca0 	bl	8c94 <bt_hci_cmd_send_sync>
		if (err) {
    9354:	b118      	cbz	r0, 935e <bt_id_add+0xce>
			BT_ERR("Failed to clear resolution list");
    9356:	4838      	ldr	r0, [pc, #224]	; (9438 <bt_id_add+0x1a8>)
    9358:	f046 0101 	orr.w	r1, r6, #1
    935c:	e7e1      	b.n	9322 <bt_id_add+0x92>
		bt_dev.le.rl_entries++;
    935e:	f895 30cd 	ldrb.w	r3, [r5, #205]	; 0xcd
    9362:	3301      	adds	r3, #1
    9364:	f885 30cd 	strb.w	r3, [r5, #205]	; 0xcd
		keys->state |= BT_KEYS_ID_ADDED;
    9368:	7a23      	ldrb	r3, [r4, #8]
    936a:	f043 0304 	orr.w	r3, r3, #4
    936e:	7223      	strb	r3, [r4, #8]
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
    9370:	2001      	movs	r0, #1
    9372:	f016 ff58 	bl	20226 <addr_res_enable>
	if (scan_enabled) {
    9376:	b117      	cbz	r7, 937e <bt_id_add+0xee>
		set_le_scan_enable(BT_HCI_LE_SCAN_ENABLE);
    9378:	2001      	movs	r0, #1
    937a:	f016 ff6c 	bl	20256 <set_le_scan_enable>
	func(&bt_dev.adv, data);
    937e:	482f      	ldr	r0, [pc, #188]	; (943c <bt_id_add+0x1ac>)
    9380:	2100      	movs	r1, #0
    9382:	f016 ff0f 	bl	201a4 <adv_unpause_enabled>
}
    9386:	e796      	b.n	92b6 <bt_id_add+0x26>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
    9388:	f104 0801 	add.w	r8, r4, #1
    938c:	f104 012a 	add.w	r1, r4, #42	; 0x2a
    9390:	4640      	mov	r0, r8
    9392:	f016 ff17 	bl	201c4 <hci_id_add.isra.0>
	if (err) {
    9396:	4606      	mov	r6, r0
    9398:	b140      	cbz	r0, 93ac <bt_id_add+0x11c>
    939a:	4923      	ldr	r1, [pc, #140]	; (9428 <bt_id_add+0x198>)
    939c:	4b23      	ldr	r3, [pc, #140]	; (942c <bt_id_add+0x19c>)
		BT_ERR("Failed to add IRK to controller");
    939e:	4828      	ldr	r0, [pc, #160]	; (9440 <bt_id_add+0x1b0>)
    93a0:	1ac9      	subs	r1, r1, r3
    93a2:	08c9      	lsrs	r1, r1, #3
    93a4:	0189      	lsls	r1, r1, #6
    93a6:	f041 0101 	orr.w	r1, r1, #1
    93aa:	e7ba      	b.n	9322 <bt_id_add+0x92>
	bt_dev.le.rl_entries++;
    93ac:	f895 30cd 	ldrb.w	r3, [r5, #205]	; 0xcd
    93b0:	3301      	adds	r3, #1
    93b2:	f885 30cd 	strb.w	r3, [r5, #205]	; 0xcd
	keys->state |= BT_KEYS_ID_ADDED;
    93b6:	7a23      	ldrb	r3, [r4, #8]
    93b8:	f043 0304 	orr.w	r3, r3, #4
    93bc:	7223      	strb	r3, [r4, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
    93be:	f895 306f 	ldrb.w	r3, [r5, #111]	; 0x6f
    93c2:	075b      	lsls	r3, r3, #29
    93c4:	d408      	bmi.n	93d8 <bt_id_add+0x148>
    93c6:	4918      	ldr	r1, [pc, #96]	; (9428 <bt_id_add+0x198>)
    93c8:	4b18      	ldr	r3, [pc, #96]	; (942c <bt_id_add+0x19c>)
		BT_WARN("Set privacy mode command is not supported");
    93ca:	481e      	ldr	r0, [pc, #120]	; (9444 <bt_id_add+0x1b4>)
    93cc:	1ac9      	subs	r1, r1, r3
    93ce:	08c9      	lsrs	r1, r1, #3
    93d0:	0189      	lsls	r1, r1, #6
    93d2:	f041 0102 	orr.w	r1, r1, #2
    93d6:	e7a4      	b.n	9322 <bt_id_add+0x92>
	bt_addr_le_copy(&cp.id_addr, addr);
    93d8:	4641      	mov	r1, r8
    93da:	4668      	mov	r0, sp
    93dc:	f016 fe6e 	bl	200bc <bt_addr_le_copy>
	cp.mode = mode;
    93e0:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
    93e2:	2108      	movs	r1, #8
    93e4:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
    93e8:	f88d 3007 	strb.w	r3, [sp, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
    93ec:	f7ff faf6 	bl	89dc <bt_hci_cmd_create>
	if (!buf) {
    93f0:	4604      	mov	r4, r0
    93f2:	b940      	cbnz	r0, 9406 <bt_id_add+0x176>
    93f4:	490c      	ldr	r1, [pc, #48]	; (9428 <bt_id_add+0x198>)
    93f6:	4b0d      	ldr	r3, [pc, #52]	; (942c <bt_id_add+0x19c>)
		BT_ERR("Failed to set privacy mode");
    93f8:	4813      	ldr	r0, [pc, #76]	; (9448 <bt_id_add+0x1b8>)
    93fa:	1ac9      	subs	r1, r1, r3
    93fc:	08c9      	lsrs	r1, r1, #3
    93fe:	0189      	lsls	r1, r1, #6
    9400:	f041 0101 	orr.w	r1, r1, #1
    9404:	e78d      	b.n	9322 <bt_id_add+0x92>
	net_buf_add_mem(buf, &cp, sizeof(cp));
    9406:	2208      	movs	r2, #8
    9408:	4669      	mov	r1, sp
    940a:	4410      	add	r0, r2
    940c:	f019 f8c6 	bl	2259c <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
    9410:	4632      	mov	r2, r6
    9412:	4621      	mov	r1, r4
    9414:	f242 004e 	movw	r0, #8270	; 0x204e
    9418:	f7ff fc3c 	bl	8c94 <bt_hci_cmd_send_sync>
	if (err) {
    941c:	2800      	cmp	r0, #0
    941e:	d0a7      	beq.n	9370 <bt_id_add+0xe0>
    9420:	e7e8      	b.n	93f4 <bt_id_add+0x164>
    9422:	bf00      	nop
    9424:	20000000 	.word	0x20000000
    9428:	000237a8 	.word	0x000237a8
    942c:	000236e8 	.word	0x000236e8
    9430:	00025b37 	.word	0x00025b37
    9434:	00025b5c 	.word	0x00025b5c
    9438:	00025b8d 	.word	0x00025b8d
    943c:	20000018 	.word	0x20000018
    9440:	00025bad 	.word	0x00025bad
    9444:	00025bcd 	.word	0x00025bcd
    9448:	00025bf7 	.word	0x00025bf7

0000944c <bt_id_del>:
{
    944c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!bt_dev.le.rl_size ||
    9450:	4e4c      	ldr	r6, [pc, #304]	; (9584 <bt_id_del+0x138>)
    9452:	f896 20cc 	ldrb.w	r2, [r6, #204]	; 0xcc
    9456:	f896 30cd 	ldrb.w	r3, [r6, #205]	; 0xcd
{
    945a:	4604      	mov	r4, r0
    945c:	4635      	mov	r5, r6
	if (!bt_dev.le.rl_size ||
    945e:	b112      	cbz	r2, 9466 <bt_id_del+0x1a>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
    9460:	3201      	adds	r2, #1
	if (!bt_dev.le.rl_size ||
    9462:	4293      	cmp	r3, r2
    9464:	dd08      	ble.n	9478 <bt_id_del+0x2c>
		bt_dev.le.rl_entries--;
    9466:	3b01      	subs	r3, #1
    9468:	f885 30cd 	strb.w	r3, [r5, #205]	; 0xcd
		keys->state &= ~BT_KEYS_ID_ADDED;
    946c:	7a23      	ldrb	r3, [r4, #8]
    946e:	f023 0304 	bic.w	r3, r3, #4
    9472:	7223      	strb	r3, [r4, #8]
}
    9474:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
    9478:	2100      	movs	r1, #0
    947a:	2205      	movs	r2, #5
    947c:	4608      	mov	r0, r1
    947e:	f001 fcb3 	bl	ade8 <bt_conn_lookup_state_le>
	if (conn) {
    9482:	4607      	mov	r7, r0
    9484:	b170      	cbz	r0, 94a4 <bt_id_del+0x58>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    9486:	f106 0098 	add.w	r0, r6, #152	; 0x98
    948a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    948e:	f016 fe27 	bl	200e0 <atomic_or>
	keys->state |= flag;
    9492:	7a23      	ldrb	r3, [r4, #8]
    9494:	f043 0302 	orr.w	r3, r3, #2
    9498:	7223      	strb	r3, [r4, #8]
		bt_conn_unref(conn);
    949a:	4638      	mov	r0, r7
}
    949c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		bt_conn_unref(conn);
    94a0:	f017 b8a9 	b.w	205f6 <bt_conn_unref>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    94a4:	f106 0098 	add.w	r0, r6, #152	; 0x98
    94a8:	f016 fe02 	bl	200b0 <atomic_get>
	func(&bt_dev.adv, data);
    94ac:	4639      	mov	r1, r7
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    94ae:	f3c0 1640 	ubfx	r6, r0, #5, #1
    94b2:	f105 0018 	add.w	r0, r5, #24
    94b6:	f016 fe60 	bl	2017a <adv_pause_enabled>
	if (scan_enabled) {
    94ba:	b116      	cbz	r6, 94c2 <bt_id_del+0x76>
		set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    94bc:	4638      	mov	r0, r7
    94be:	f016 feca 	bl	20256 <set_le_scan_enable>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
    94c2:	2000      	movs	r0, #0
    94c4:	f016 feaf 	bl	20226 <addr_res_enable>
	if (err) {
    94c8:	4607      	mov	r7, r0
    94ca:	b1d0      	cbz	r0, 9502 <bt_id_del+0xb6>
    94cc:	4a2e      	ldr	r2, [pc, #184]	; (9588 <bt_id_del+0x13c>)
    94ce:	4b2f      	ldr	r3, [pc, #188]	; (958c <bt_id_del+0x140>)
    94d0:	1ad2      	subs	r2, r2, r3
    94d2:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Disabling address resolution failed (err %d)", err);
    94d4:	0192      	lsls	r2, r2, #6
    94d6:	4601      	mov	r1, r0
    94d8:	f042 0201 	orr.w	r2, r2, #1
    94dc:	482c      	ldr	r0, [pc, #176]	; (9590 <bt_id_del+0x144>)
    94de:	f015 f801 	bl	1e4e4 <log_1>
	if (bt_dev.le.rl_entries) {
    94e2:	f895 30cd 	ldrb.w	r3, [r5, #205]	; 0xcd
    94e6:	b113      	cbz	r3, 94ee <bt_id_del+0xa2>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
    94e8:	2001      	movs	r0, #1
    94ea:	f016 fe9c 	bl	20226 <addr_res_enable>
	if (scan_enabled) {
    94ee:	b116      	cbz	r6, 94f6 <bt_id_del+0xaa>
		set_le_scan_enable(BT_HCI_LE_SCAN_ENABLE);
    94f0:	2001      	movs	r0, #1
    94f2:	f016 feb0 	bl	20256 <set_le_scan_enable>
}
    94f6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	func(&bt_dev.adv, data);
    94fa:	4826      	ldr	r0, [pc, #152]	; (9594 <bt_id_del+0x148>)
    94fc:	2100      	movs	r1, #0
    94fe:	f016 be51 	b.w	201a4 <adv_unpause_enabled>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    9502:	f895 30cd 	ldrb.w	r3, [r5, #205]	; 0xcd
    9506:	f895 20cc 	ldrb.w	r2, [r5, #204]	; 0xcc
    950a:	429a      	cmp	r2, r3
    950c:	d20c      	bcs.n	9528 <bt_id_del+0xdc>
		bt_dev.le.rl_entries--;
    950e:	3b01      	subs	r3, #1
    9510:	f885 30cd 	strb.w	r3, [r5, #205]	; 0xcd
		keys->state &= ~BT_KEYS_ID_ADDED;
    9514:	7a23      	ldrb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    9516:	4920      	ldr	r1, [pc, #128]	; (9598 <bt_id_del+0x14c>)
		keys->state &= ~BT_KEYS_ID_ADDED;
    9518:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    951c:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
    951e:	7223      	strb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    9520:	2002      	movs	r0, #2
    9522:	f006 fcaf 	bl	fe84 <bt_keys_foreach>
		goto done;
    9526:	e7dc      	b.n	94e2 <bt_id_del+0x96>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
    9528:	2107      	movs	r1, #7
    952a:	f242 0028 	movw	r0, #8232	; 0x2028
    952e:	f7ff fa55 	bl	89dc <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
    9532:	f104 0901 	add.w	r9, r4, #1
	if (!buf) {
    9536:	4680      	mov	r8, r0
    9538:	b950      	cbnz	r0, 9550 <bt_id_del+0x104>
    953a:	4b14      	ldr	r3, [pc, #80]	; (958c <bt_id_del+0x140>)
    953c:	4912      	ldr	r1, [pc, #72]	; (9588 <bt_id_del+0x13c>)
		BT_ERR("Failed to remove IRK from controller");
    953e:	4817      	ldr	r0, [pc, #92]	; (959c <bt_id_del+0x150>)
    9540:	1ac9      	subs	r1, r1, r3
    9542:	08c9      	lsrs	r1, r1, #3
    9544:	0189      	lsls	r1, r1, #6
    9546:	f041 0101 	orr.w	r1, r1, #1
    954a:	f014 ffbe 	bl	1e4ca <log_0>
		goto done;
    954e:	e7c8      	b.n	94e2 <bt_id_del+0x96>
	cp = net_buf_add(buf, sizeof(*cp));
    9550:	2107      	movs	r1, #7
    9552:	3008      	adds	r0, #8
    9554:	f019 f81c 	bl	22590 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
    9558:	4649      	mov	r1, r9
    955a:	f016 fdaf 	bl	200bc <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
    955e:	463a      	mov	r2, r7
    9560:	4641      	mov	r1, r8
    9562:	f242 0028 	movw	r0, #8232	; 0x2028
    9566:	f7ff fb95 	bl	8c94 <bt_hci_cmd_send_sync>
	if (err) {
    956a:	2800      	cmp	r0, #0
    956c:	d1e5      	bne.n	953a <bt_id_del+0xee>
	bt_dev.le.rl_entries--;
    956e:	f895 30cd 	ldrb.w	r3, [r5, #205]	; 0xcd
    9572:	3b01      	subs	r3, #1
    9574:	f885 30cd 	strb.w	r3, [r5, #205]	; 0xcd
	keys->state &= ~BT_KEYS_ID_ADDED;
    9578:	7a23      	ldrb	r3, [r4, #8]
    957a:	f023 0304 	bic.w	r3, r3, #4
    957e:	7223      	strb	r3, [r4, #8]
    9580:	e7af      	b.n	94e2 <bt_id_del+0x96>
    9582:	bf00      	nop
    9584:	20000000 	.word	0x20000000
    9588:	000237a8 	.word	0x000237a8
    958c:	000236e8 	.word	0x000236e8
    9590:	00025c12 	.word	0x00025c12
    9594:	20000018 	.word	0x20000018
    9598:	00020215 	.word	0x00020215
    959c:	00025c3f 	.word	0x00025c3f

000095a0 <bt_le_scan_update>:
{
    95a0:	b570      	push	{r4, r5, r6, lr}
    95a2:	4606      	mov	r6, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    95a4:	481c      	ldr	r0, [pc, #112]	; (9618 <bt_le_scan_update+0x78>)
    95a6:	f016 fd83 	bl	200b0 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    95aa:	0641      	lsls	r1, r0, #25
    95ac:	f3c0 1380 	ubfx	r3, r0, #6, #1
    95b0:	d501      	bpl.n	95b6 <bt_le_scan_update+0x16>
			return 0;
    95b2:	2000      	movs	r0, #0
    95b4:	e02c      	b.n	9610 <bt_le_scan_update+0x70>
    95b6:	4818      	ldr	r0, [pc, #96]	; (9618 <bt_le_scan_update+0x78>)
    95b8:	f016 fd7a 	bl	200b0 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    95bc:	0682      	lsls	r2, r0, #26
    95be:	d422      	bmi.n	9606 <bt_le_scan_update+0x66>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
    95c0:	2100      	movs	r1, #0
    95c2:	2205      	movs	r2, #5
    95c4:	4608      	mov	r0, r1
    95c6:	f001 fc0f 	bl	ade8 <bt_conn_lookup_state_le>
		if (conn) {
    95ca:	4604      	mov	r4, r0
    95cc:	bb08      	cbnz	r0, 9612 <bt_le_scan_update+0x72>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
    95ce:	2201      	movs	r2, #1
    95d0:	4601      	mov	r1, r0
    95d2:	f001 fc09 	bl	ade8 <bt_conn_lookup_state_le>
		if (!conn) {
    95d6:	4605      	mov	r5, r0
    95d8:	2800      	cmp	r0, #0
    95da:	d0ea      	beq.n	95b2 <bt_le_scan_update+0x12>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    95dc:	f44f 7180 	mov.w	r1, #256	; 0x100
    95e0:	480d      	ldr	r0, [pc, #52]	; (9618 <bt_le_scan_update+0x78>)
    95e2:	f016 fd7d 	bl	200e0 <atomic_or>
		bt_conn_unref(conn);
    95e6:	4628      	mov	r0, r5
    95e8:	f017 f805 	bl	205f6 <bt_conn_unref>
		window = CONFIG_BT_BACKGROUND_SCAN_WINDOW;
    95ec:	2e00      	cmp	r6, #0
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    95ee:	4620      	mov	r0, r4
    95f0:	bf18      	it	ne
    95f2:	2230      	movne	r2, #48	; 0x30
}
    95f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    95f8:	bf0a      	itet	eq
    95fa:	2212      	moveq	r2, #18
    95fc:	2160      	movne	r1, #96	; 0x60
    95fe:	f44f 6100 	moveq.w	r1, #2048	; 0x800
    9602:	f7ff bc93 	b.w	8f2c <start_le_scan_legacy>
	return set_le_scan_enable_legacy(enable);
    9606:	4618      	mov	r0, r3
    9608:	f7ff fc54 	bl	8eb4 <set_le_scan_enable_legacy>
		if (err) {
    960c:	2800      	cmp	r0, #0
    960e:	d0d7      	beq.n	95c0 <bt_le_scan_update+0x20>
}
    9610:	bd70      	pop	{r4, r5, r6, pc}
			bt_conn_unref(conn);
    9612:	f016 fff0 	bl	205f6 <bt_conn_unref>
    9616:	e7cc      	b.n	95b2 <bt_le_scan_update+0x12>
    9618:	20000098 	.word	0x20000098

0000961c <hci_disconn_complete>:
{
    961c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    961e:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
    9620:	7835      	ldrb	r5, [r6, #0]
    9622:	bb6d      	cbnz	r5, 9680 <hci_disconn_complete+0x64>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    9624:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
    9628:	4638      	mov	r0, r7
    962a:	f001 fb6d 	bl	ad08 <bt_conn_lookup_handle>
	if (!conn) {
    962e:	4604      	mov	r4, r0
    9630:	b960      	cbnz	r0, 964c <hci_disconn_complete+0x30>
    9632:	4b14      	ldr	r3, [pc, #80]	; (9684 <hci_disconn_complete+0x68>)
    9634:	4a14      	ldr	r2, [pc, #80]	; (9688 <hci_disconn_complete+0x6c>)
		BT_ERR("Unable to look up conn with handle %u", handle);
    9636:	4815      	ldr	r0, [pc, #84]	; (968c <hci_disconn_complete+0x70>)
    9638:	1ad2      	subs	r2, r2, r3
    963a:	08d2      	lsrs	r2, r2, #3
    963c:	0192      	lsls	r2, r2, #6
    963e:	4639      	mov	r1, r7
    9640:	f042 0201 	orr.w	r2, r2, #1
}
    9644:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    9648:	f014 bf4c 	b.w	1e4e4 <log_1>
	conn->err = evt->reason;
    964c:	78f3      	ldrb	r3, [r6, #3]
    964e:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    9650:	4629      	mov	r1, r5
    9652:	f001 fa59 	bl	ab08 <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
    9656:	78a1      	ldrb	r1, [r4, #2]
	conn->handle = 0U;
    9658:	8025      	strh	r5, [r4, #0]
	if (conn->type != BT_CONN_TYPE_LE) {
    965a:	2901      	cmp	r1, #1
    965c:	d004      	beq.n	9668 <hci_disconn_complete+0x4c>
	bt_conn_unref(conn);
    965e:	4620      	mov	r0, r4
}
    9660:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
    9664:	f016 bfc7 	b.w	205f6 <bt_conn_unref>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    9668:	1d20      	adds	r0, r4, #4
    966a:	f016 fd21 	bl	200b0 <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    966e:	07c3      	lsls	r3, r0, #31
    9670:	d5f5      	bpl.n	965e <hci_disconn_complete+0x42>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    9672:	4620      	mov	r0, r4
    9674:	f001 fa48 	bl	ab08 <bt_conn_set_state>
		bt_le_scan_update(false);
    9678:	4628      	mov	r0, r5
    967a:	f7ff ff91 	bl	95a0 <bt_le_scan_update>
    967e:	e7ee      	b.n	965e <hci_disconn_complete+0x42>
}
    9680:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9682:	bf00      	nop
    9684:	000236e8 	.word	0x000236e8
    9688:	000237a8 	.word	0x000237a8
    968c:	000258a5 	.word	0x000258a5

00009690 <le_adv_report>:
{
    9690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t num_reports = net_buf_pull_u8(buf);
    9694:	f100 0708 	add.w	r7, r0, #8
{
    9698:	b08f      	sub	sp, #60	; 0x3c
    969a:	4604      	mov	r4, r0
	uint8_t num_reports = net_buf_pull_u8(buf);
    969c:	4638      	mov	r0, r7
    969e:	f018 ffbc 	bl	2261a <net_buf_simple_pull_u8>
    96a2:	f8df 91e0 	ldr.w	r9, [pc, #480]	; 9884 <le_adv_report+0x1f4>
	if (scan_dev_found_cb) {
    96a6:	f8df b1e0 	ldr.w	fp, [pc, #480]	; 9888 <le_adv_report+0x1f8>
	uint8_t num_reports = net_buf_pull_u8(buf);
    96aa:	9002      	str	r0, [sp, #8]
	while (num_reports--) {
    96ac:	9b02      	ldr	r3, [sp, #8]
    96ae:	b163      	cbz	r3, 96ca <le_adv_report+0x3a>
		if (buf->len < sizeof(*evt)) {
    96b0:	89a3      	ldrh	r3, [r4, #12]
    96b2:	2b08      	cmp	r3, #8
    96b4:	d80c      	bhi.n	96d0 <le_adv_report+0x40>
    96b6:	496e      	ldr	r1, [pc, #440]	; (9870 <le_adv_report+0x1e0>)
    96b8:	4b6e      	ldr	r3, [pc, #440]	; (9874 <le_adv_report+0x1e4>)
			BT_ERR("Unexpected end of buffer");
    96ba:	486f      	ldr	r0, [pc, #444]	; (9878 <le_adv_report+0x1e8>)
    96bc:	1ac9      	subs	r1, r1, r3
    96be:	08c9      	lsrs	r1, r1, #3
    96c0:	0189      	lsls	r1, r1, #6
    96c2:	f041 0101 	orr.w	r1, r1, #1
    96c6:	f014 ff00 	bl	1e4ca <log_0>
}
    96ca:	b00f      	add	sp, #60	; 0x3c
    96cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		evt = net_buf_pull_mem(buf, sizeof(*evt));
    96d0:	2109      	movs	r1, #9
    96d2:	4638      	mov	r0, r7
    96d4:	f018 ff99 	bl	2260a <net_buf_simple_pull_mem>
		adv_info.rssi = evt->data[evt->length];
    96d8:	7a03      	ldrb	r3, [r0, #8]
    96da:	9301      	str	r3, [sp, #4]
    96dc:	18c3      	adds	r3, r0, r3
		evt = net_buf_pull_mem(buf, sizeof(*evt));
    96de:	4606      	mov	r6, r0
		adv_info.rssi = evt->data[evt->length];
    96e0:	7a5b      	ldrb	r3, [r3, #9]
    96e2:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
    96e6:	2301      	movs	r3, #1
    96e8:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
    96ec:	237f      	movs	r3, #127	; 0x7f
    96ee:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
		adv_info.sid = BT_GAP_SID_INVALID;
    96f2:	23ff      	movs	r3, #255	; 0xff
    96f4:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		adv_info.adv_type = evt->evt_type;
    96f8:	7803      	ldrb	r3, [r0, #0]
    96fa:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
	switch (evt_type) {
    96fe:	2b04      	cmp	r3, #4
    9700:	bf96      	itet	ls
    9702:	4a5e      	ldrls	r2, [pc, #376]	; (987c <le_adv_report+0x1ec>)
		adv_info.adv_type = evt->evt_type;
    9704:	2300      	movhi	r3, #0
    9706:	5cd3      	ldrbls	r3, [r2, r3]
		adv_info.adv_props = get_adv_props(evt->evt_type);
    9708:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
		le_adv_recv(&evt->addr, &adv_info, buf, evt->length);
    970c:	f100 0a01 	add.w	sl, r0, #1
    9710:	4648      	mov	r0, r9
    9712:	f016 fccd 	bl	200b0 <atomic_get>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
    9716:	0645      	lsls	r5, r0, #25
    9718:	d50d      	bpl.n	9736 <le_adv_report+0xa6>
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
    971a:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
    971e:	0758      	lsls	r0, r3, #29
    9720:	d509      	bpl.n	9736 <le_adv_report+0xa6>
		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
    9722:	7a31      	ldrb	r1, [r6, #8]
    9724:	4638      	mov	r0, r7
    9726:	3101      	adds	r1, #1
    9728:	f018 ff67 	bl	225fa <net_buf_simple_pull>
    972c:	9b02      	ldr	r3, [sp, #8]
    972e:	1e58      	subs	r0, r3, #1
    9730:	b2c3      	uxtb	r3, r0
    9732:	9302      	str	r3, [sp, #8]
    9734:	e7ba      	b.n	96ac <le_adv_report+0x1c>
	if (addr->type == BT_ADDR_LE_PUBLIC_ID ||
    9736:	7873      	ldrb	r3, [r6, #1]
    9738:	1e9a      	subs	r2, r3, #2
    973a:	2a01      	cmp	r2, #1
    973c:	f10d 081c 	add.w	r8, sp, #28
    9740:	d853      	bhi.n	97ea <le_adv_report+0x15a>
		bt_addr_le_copy(&id_addr, addr);
    9742:	4651      	mov	r1, sl
    9744:	4640      	mov	r0, r8
    9746:	f016 fcb9 	bl	200bc <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    974a:	f89d 301c 	ldrb.w	r3, [sp, #28]
    974e:	3b02      	subs	r3, #2
    9750:	f88d 301c 	strb.w	r3, [sp, #28]
	if (scan_dev_found_cb) {
    9754:	f8db 3000 	ldr.w	r3, [fp]
	info->addr = &id_addr;
    9758:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	if (scan_dev_found_cb) {
    975c:	b1bb      	cbz	r3, 978e <le_adv_report+0xfe>
 * @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
    975e:	4638      	mov	r0, r7
    9760:	f018 ff6b 	bl	2263a <net_buf_simple_headroom>
	state->len = buf->len;
    9764:	89a3      	ldrh	r3, [r4, #12]
    9766:	9304      	str	r3, [sp, #16]
		buf->len = len;
    9768:	9b01      	ldr	r3, [sp, #4]
	state->offset = net_buf_simple_headroom(buf);
    976a:	9003      	str	r0, [sp, #12]
    976c:	81a3      	strh	r3, [r4, #12]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type,
    976e:	4640      	mov	r0, r8
    9770:	463b      	mov	r3, r7
    9772:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
    9776:	f99d 1031 	ldrsb.w	r1, [sp, #49]	; 0x31
    977a:	f8db 5000 	ldr.w	r5, [fp]
    977e:	47a8      	blx	r5
 * @param state Stored state.
 */
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
					  struct net_buf_simple_state *state)
{
	buf->data = buf->__buf + state->offset;
    9780:	9b03      	ldr	r3, [sp, #12]
    9782:	6920      	ldr	r0, [r4, #16]
    9784:	fa10 f083 	uxtah	r0, r0, r3
	buf->len = state->len;
    9788:	9b04      	ldr	r3, [sp, #16]
	buf->data = buf->__buf + state->offset;
    978a:	60a0      	str	r0, [r4, #8]
	buf->len = state->len;
    978c:	81a3      	strh	r3, [r4, #12]
	SYS_SLIST_FOR_EACH_CONTAINER(&scan_cbs, listener, node) {
    978e:	4b3c      	ldr	r3, [pc, #240]	; (9880 <le_adv_report+0x1f0>)
    9790:	681d      	ldr	r5, [r3, #0]
    9792:	2d00      	cmp	r5, #0
    9794:	d13a      	bne.n	980c <le_adv_report+0x17c>
    9796:	4648      	mov	r0, r9
	check_pending_conn(&id_addr, addr, info->adv_props);
    9798:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
    979c:	f016 fc88 	bl	200b0 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    97a0:	0641      	lsls	r1, r0, #25
    97a2:	f3c0 1580 	ubfx	r5, r0, #6, #1
    97a6:	d4bc      	bmi.n	9722 <le_adv_report+0x92>
	if (!(adv_props & BT_HCI_LE_ADV_EVT_TYPE_CONN)) {
    97a8:	07da      	lsls	r2, r3, #31
    97aa:	d5ba      	bpl.n	9722 <le_adv_report+0x92>
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, id_addr,
    97ac:	4641      	mov	r1, r8
    97ae:	2201      	movs	r2, #1
    97b0:	4628      	mov	r0, r5
    97b2:	f001 fb19 	bl	ade8 <bt_conn_lookup_state_le>
	if (!conn) {
    97b6:	4680      	mov	r8, r0
    97b8:	2800      	cmp	r0, #0
    97ba:	d0b2      	beq.n	9722 <le_adv_report+0x92>
    97bc:	4648      	mov	r0, r9
    97be:	f016 fc77 	bl	200b0 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    97c2:	0683      	lsls	r3, r0, #26
    97c4:	d440      	bmi.n	9848 <le_adv_report+0x1b8>
	bt_addr_le_copy(&conn->le.resp_addr, addr);
    97c6:	f108 0096 	add.w	r0, r8, #150	; 0x96
    97ca:	4651      	mov	r1, sl
    97cc:	f016 fc76 	bl	200bc <bt_addr_le_copy>
	return bt_le_create_conn_legacy(conn);
    97d0:	4640      	mov	r0, r8
    97d2:	f7ff fbf7 	bl	8fc4 <bt_le_create_conn_legacy>
	if (bt_le_create_conn(conn)) {
    97d6:	2800      	cmp	r0, #0
    97d8:	d13b      	bne.n	9852 <le_adv_report+0x1c2>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
    97da:	4640      	mov	r0, r8
    97dc:	2105      	movs	r1, #5
    97de:	f001 f993 	bl	ab08 <bt_conn_set_state>
	bt_conn_unref(conn);
    97e2:	4640      	mov	r0, r8
    97e4:	f016 ff07 	bl	205f6 <bt_conn_unref>
	return;
    97e8:	e79b      	b.n	9722 <le_adv_report+0x92>
	} else if (addr->type == BT_HCI_PEER_ADDR_ANONYMOUS) {
    97ea:	2bff      	cmp	r3, #255	; 0xff
    97ec:	d108      	bne.n	9800 <le_adv_report+0x170>
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
    97ee:	2300      	movs	r3, #0
    97f0:	9309      	str	r3, [sp, #36]	; 0x24
    97f2:	a909      	add	r1, sp, #36	; 0x24
    97f4:	f8cd 3027 	str.w	r3, [sp, #39]	; 0x27
		bt_addr_le_copy(&id_addr,
    97f8:	4640      	mov	r0, r8
    97fa:	f016 fc5f 	bl	200bc <bt_addr_le_copy>
    97fe:	e7a9      	b.n	9754 <le_adv_report+0xc4>
    9800:	4651      	mov	r1, sl
    9802:	2000      	movs	r0, #0
    9804:	f016 fd29 	bl	2025a <bt_lookup_id_addr>
    9808:	4601      	mov	r1, r0
    980a:	e7f5      	b.n	97f8 <le_adv_report+0x168>
	SYS_SLIST_FOR_EACH_CONTAINER(&scan_cbs, listener, node) {
    980c:	3d08      	subs	r5, #8
    980e:	2d00      	cmp	r5, #0
    9810:	d0c1      	beq.n	9796 <le_adv_report+0x106>
	state->offset = net_buf_simple_headroom(buf);
    9812:	4638      	mov	r0, r7
    9814:	f018 ff11 	bl	2263a <net_buf_simple_headroom>
	state->len = buf->len;
    9818:	89a3      	ldrh	r3, [r4, #12]
    981a:	9304      	str	r3, [sp, #16]
		buf->len = len;
    981c:	9b01      	ldr	r3, [sp, #4]
    981e:	81a3      	strh	r3, [r4, #12]
		listener->recv(info, &buf->b);
    9820:	462b      	mov	r3, r5
	state->offset = net_buf_simple_headroom(buf);
    9822:	9003      	str	r0, [sp, #12]
    9824:	f853 2b08 	ldr.w	r2, [r3], #8
    9828:	9305      	str	r3, [sp, #20]
    982a:	a80b      	add	r0, sp, #44	; 0x2c
    982c:	4639      	mov	r1, r7
    982e:	4790      	blx	r2
	buf->data = buf->__buf + state->offset;
    9830:	9b03      	ldr	r3, [sp, #12]
    9832:	6920      	ldr	r0, [r4, #16]
    9834:	fa10 f083 	uxtah	r0, r0, r3
	buf->len = state->len;
    9838:	9b04      	ldr	r3, [sp, #16]
    983a:	81a3      	strh	r3, [r4, #12]
Z_GENLIST_PEEK_NEXT(slist, snode)
    983c:	9b05      	ldr	r3, [sp, #20]
	buf->data = buf->__buf + state->offset;
    983e:	60a0      	str	r0, [r4, #8]
    9840:	2b00      	cmp	r3, #0
    9842:	d0a8      	beq.n	9796 <le_adv_report+0x106>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    9844:	68ad      	ldr	r5, [r5, #8]
	return node->next;
    9846:	e7a4      	b.n	9792 <le_adv_report+0x102>
	return set_le_scan_enable_legacy(enable);
    9848:	4628      	mov	r0, r5
    984a:	f7ff fb33 	bl	8eb4 <set_le_scan_enable_legacy>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    984e:	2800      	cmp	r0, #0
    9850:	d0b9      	beq.n	97c6 <le_adv_report+0x136>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    9852:	231f      	movs	r3, #31
    9854:	f888 300c 	strb.w	r3, [r8, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    9858:	2100      	movs	r1, #0
    985a:	4640      	mov	r0, r8
    985c:	f001 f954 	bl	ab08 <bt_conn_set_state>
	bt_conn_unref(conn);
    9860:	4640      	mov	r0, r8
    9862:	f016 fec8 	bl	205f6 <bt_conn_unref>
	bt_le_scan_update(false);
    9866:	2000      	movs	r0, #0
    9868:	f7ff fe9a 	bl	95a0 <bt_le_scan_update>
    986c:	e759      	b.n	9722 <le_adv_report+0x92>
    986e:	bf00      	nop
    9870:	000237a8 	.word	0x000237a8
    9874:	000236e8 	.word	0x000236e8
    9878:	00025c64 	.word	0x00025c64
    987c:	000260c7 	.word	0x000260c7
    9880:	200021e4 	.word	0x200021e4
    9884:	20000098 	.word	0x20000098
    9888:	200021ec 	.word	0x200021ec

0000988c <enh_conn_complete>:
{
    988c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    9890:	f8b0 8001 	ldrh.w	r8, [r0, #1]
{
    9894:	4604      	mov	r4, r0
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    9896:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
    989a:	4864      	ldr	r0, [pc, #400]	; (9a2c <enh_conn_complete+0x1a0>)
    989c:	f016 fc11 	bl	200c2 <atomic_and>
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
    98a0:	0442      	lsls	r2, r0, #17
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    98a2:	fa1f f688 	uxth.w	r6, r8
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
    98a6:	d504      	bpl.n	98b2 <enh_conn_complete+0x26>
			bt_keys_foreach(BT_KEYS_IRK, pending_id_update, NULL);
    98a8:	4961      	ldr	r1, [pc, #388]	; (9a30 <enh_conn_complete+0x1a4>)
    98aa:	2200      	movs	r2, #0
    98ac:	2002      	movs	r0, #2
    98ae:	f006 fae9 	bl	fe84 <bt_keys_foreach>
	if (evt->status) {
    98b2:	7825      	ldrb	r5, [r4, #0]
    98b4:	b3ad      	cbz	r5, 9922 <enh_conn_complete+0x96>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    98b6:	2d02      	cmp	r5, #2
    98b8:	d127      	bne.n	990a <enh_conn_complete+0x7e>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
    98ba:	2100      	movs	r1, #0
    98bc:	2205      	movs	r2, #5
    98be:	4608      	mov	r0, r1
    98c0:	f001 fa92 	bl	ade8 <bt_conn_lookup_state_le>
	if (!conn) {
    98c4:	4604      	mov	r4, r0
    98c6:	b978      	cbnz	r0, 98e8 <enh_conn_complete+0x5c>
    98c8:	495a      	ldr	r1, [pc, #360]	; (9a34 <enh_conn_complete+0x1a8>)
    98ca:	4b5b      	ldr	r3, [pc, #364]	; (9a38 <enh_conn_complete+0x1ac>)
		BT_ERR("No pending master connection");
    98cc:	485b      	ldr	r0, [pc, #364]	; (9a3c <enh_conn_complete+0x1b0>)
    98ce:	1ac9      	subs	r1, r1, r3
    98d0:	08c9      	lsrs	r1, r1, #3
    98d2:	0189      	lsls	r1, r1, #6
    98d4:	f041 0101 	orr.w	r1, r1, #1
    98d8:	f014 fdf7 	bl	1e4ca <log_0>
			bt_le_scan_update(false);
    98dc:	2000      	movs	r0, #0
    98de:	f7ff fe5f 	bl	95a0 <bt_le_scan_update>
}
    98e2:	b004      	add	sp, #16
    98e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn->err = BT_HCI_ERR_UNKNOWN_CONN_ID;
    98e8:	7305      	strb	r5, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    98ea:	2100      	movs	r1, #0
    98ec:	f001 f90c 	bl	ab08 <bt_conn_set_state>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    98f0:	1d20      	adds	r0, r4, #4
    98f2:	f016 fbdd 	bl	200b0 <atomic_get>
		if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    98f6:	07c3      	lsls	r3, r0, #31
    98f8:	d503      	bpl.n	9902 <enh_conn_complete+0x76>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    98fa:	2101      	movs	r1, #1
    98fc:	4620      	mov	r0, r4
    98fe:	f001 f903 	bl	ab08 <bt_conn_set_state>
	bt_conn_unref(conn);
    9902:	4620      	mov	r0, r4
    9904:	f016 fe77 	bl	205f6 <bt_conn_unref>
    9908:	e7e8      	b.n	98dc <enh_conn_complete+0x50>
    990a:	4b4b      	ldr	r3, [pc, #300]	; (9a38 <enh_conn_complete+0x1ac>)
    990c:	4a49      	ldr	r2, [pc, #292]	; (9a34 <enh_conn_complete+0x1a8>)
		BT_WARN("Unexpected status 0x%02x", evt->status);
    990e:	484c      	ldr	r0, [pc, #304]	; (9a40 <enh_conn_complete+0x1b4>)
    9910:	1ad2      	subs	r2, r2, r3
    9912:	08d2      	lsrs	r2, r2, #3
    9914:	0192      	lsls	r2, r2, #6
    9916:	f042 0202 	orr.w	r2, r2, #2
    991a:	4629      	mov	r1, r5
    991c:	f014 fde2 	bl	1e4e4 <log_1>
		return;
    9920:	e7df      	b.n	98e2 <enh_conn_complete+0x56>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    9922:	7923      	ldrb	r3, [r4, #4]
    9924:	3b02      	subs	r3, #2
    9926:	2b01      	cmp	r3, #1
    9928:	f104 0704 	add.w	r7, r4, #4
    992c:	d831      	bhi.n	9992 <enh_conn_complete+0x106>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    992e:	4639      	mov	r1, r7
    9930:	a802      	add	r0, sp, #8
    9932:	f016 fbc3 	bl	200bc <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    9936:	f89d 3008 	ldrb.w	r3, [sp, #8]
    993a:	2206      	movs	r2, #6
    993c:	3b02      	subs	r3, #2
    993e:	f104 0111 	add.w	r1, r4, #17
    9942:	f10d 0001 	add.w	r0, sp, #1
    9946:	f88d 3008 	strb.w	r3, [sp, #8]
    994a:	f016 fa90 	bl	1fe6e <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    994e:	2301      	movs	r3, #1
    9950:	f88d 3000 	strb.w	r3, [sp]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && role == BT_HCI_ROLE_MASTER) {
    9954:	78e0      	ldrb	r0, [r4, #3]
    9956:	b960      	cbnz	r0, 9972 <enh_conn_complete+0xe6>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
    9958:	2205      	movs	r2, #5
    995a:	a902      	add	r1, sp, #8
    995c:	f001 fa44 	bl	ade8 <bt_conn_lookup_state_le>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    9960:	78e3      	ldrb	r3, [r4, #3]
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
    9962:	4605      	mov	r5, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    9964:	b923      	cbnz	r3, 9970 <enh_conn_complete+0xe4>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    9966:	4831      	ldr	r0, [pc, #196]	; (9a2c <enh_conn_complete+0x1a0>)
    9968:	f46f 6100 	mvn.w	r1, #2048	; 0x800
    996c:	f016 fba9 	bl	200c2 <atomic_and>
	if (!conn) {
    9970:	bb15      	cbnz	r5, 99b8 <enh_conn_complete+0x12c>
    9972:	4b31      	ldr	r3, [pc, #196]	; (9a38 <enh_conn_complete+0x1ac>)
    9974:	4a2f      	ldr	r2, [pc, #188]	; (9a34 <enh_conn_complete+0x1a8>)
		BT_ERR("Unable to add new conn for handle %u", handle);
    9976:	4833      	ldr	r0, [pc, #204]	; (9a44 <enh_conn_complete+0x1b8>)
    9978:	1ad2      	subs	r2, r2, r3
    997a:	08d2      	lsrs	r2, r2, #3
    997c:	0192      	lsls	r2, r2, #6
    997e:	4631      	mov	r1, r6
    9980:	f042 0201 	orr.w	r2, r2, #1
    9984:	f014 fdae 	bl	1e4e4 <log_1>
		bt_hci_disconnect(handle, BT_HCI_ERR_MEM_CAPACITY_EXCEEDED);
    9988:	2107      	movs	r1, #7
    998a:	4630      	mov	r0, r6
    998c:	f016 fc71 	bl	20272 <bt_hci_disconnect>
		return;
    9990:	e7a7      	b.n	98e2 <enh_conn_complete+0x56>
		uint8_t id = evt->role == BT_HCI_ROLE_SLAVE ? bt_dev.adv_conn_id :
    9992:	78e3      	ldrb	r3, [r4, #3]
    9994:	2b01      	cmp	r3, #1
    9996:	bf04      	itt	eq
    9998:	4b2b      	ldreq	r3, [pc, #172]	; (9a48 <enh_conn_complete+0x1bc>)
    999a:	f893 5037 	ldrbeq.w	r5, [r3, #55]	; 0x37
		bt_addr_le_copy(&id_addr,
    999e:	4639      	mov	r1, r7
    99a0:	4628      	mov	r0, r5
    99a2:	f016 fc5a 	bl	2025a <bt_lookup_id_addr>
    99a6:	4601      	mov	r1, r0
    99a8:	a802      	add	r0, sp, #8
    99aa:	f016 fb87 	bl	200bc <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
    99ae:	4639      	mov	r1, r7
    99b0:	4668      	mov	r0, sp
    99b2:	f016 fb83 	bl	200bc <bt_addr_le_copy>
    99b6:	e7cd      	b.n	9954 <enh_conn_complete+0xc8>
	conn->handle = handle;
    99b8:	4628      	mov	r0, r5
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    99ba:	a902      	add	r1, sp, #8
	conn->handle = handle;
    99bc:	f820 8b88 	strh.w	r8, [r0], #136
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    99c0:	f016 fb7c 	bl	200bc <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    99c4:	7e22      	ldrb	r2, [r4, #24]
    99c6:	7de3      	ldrb	r3, [r4, #23]
    99c8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    99cc:	f8a5 309e 	strh.w	r3, [r5, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    99d0:	7ea2      	ldrb	r2, [r4, #26]
    99d2:	7e63      	ldrb	r3, [r4, #25]
    99d4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    99d8:	f8a5 30a4 	strh.w	r3, [r5, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    99dc:	7f22      	ldrb	r2, [r4, #28]
    99de:	7ee3      	ldrb	r3, [r4, #27]
    99e0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    99e4:	f8a5 30a6 	strh.w	r3, [r5, #166]	; 0xa6
	conn->role = evt->role;
    99e8:	78e3      	ldrb	r3, [r4, #3]
    99ea:	70eb      	strb	r3, [r5, #3]
	conn->err = 0U;
    99ec:	2200      	movs	r2, #0
    99ee:	732a      	strb	r2, [r5, #12]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    99f0:	b96b      	cbnz	r3, 9a0e <enh_conn_complete+0x182>
		bt_addr_le_copy(&conn->le.resp_addr, &peer_addr);
    99f2:	4669      	mov	r1, sp
    99f4:	f105 0096 	add.w	r0, r5, #150	; 0x96
    99f8:	f016 fb60 	bl	200bc <bt_addr_le_copy>
					&bt_dev.id_addr[conn->id]);
    99fc:	7a29      	ldrb	r1, [r5, #8]
			bt_addr_le_copy(&conn->le.init_addr,
    99fe:	4b12      	ldr	r3, [pc, #72]	; (9a48 <enh_conn_complete+0x1bc>)
					&bt_dev.id_addr[conn->id]);
    9a00:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
			bt_addr_le_copy(&conn->le.init_addr,
    9a04:	4419      	add	r1, r3
    9a06:	f105 008f 	add.w	r0, r5, #143	; 0x8f
    9a0a:	f016 fb57 	bl	200bc <bt_addr_le_copy>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    9a0e:	2106      	movs	r1, #6
    9a10:	4628      	mov	r0, r5
    9a12:	f001 f879 	bl	ab08 <bt_conn_set_state>
	conn_auto_initiate(conn);
    9a16:	4628      	mov	r0, r5
    9a18:	f7ff fb64 	bl	90e4 <conn_auto_initiate>
	bt_conn_unref(conn);
    9a1c:	4628      	mov	r0, r5
    9a1e:	f016 fdea 	bl	205f6 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    9a22:	78eb      	ldrb	r3, [r5, #3]
    9a24:	2b00      	cmp	r3, #0
    9a26:	f47f af5c 	bne.w	98e2 <enh_conn_complete+0x56>
    9a2a:	e757      	b.n	98dc <enh_conn_complete+0x50>
    9a2c:	20000098 	.word	0x20000098
    9a30:	0002036d 	.word	0x0002036d
    9a34:	000237a8 	.word	0x000237a8
    9a38:	000236e8 	.word	0x000236e8
    9a3c:	00025c7d 	.word	0x00025c7d
    9a40:	00025c9a 	.word	0x00025c9a
    9a44:	00025cb3 	.word	0x00025cb3
    9a48:	20000000 	.word	0x20000000

00009a4c <bt_data_parse>:
{
    9a4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9a4e:	4604      	mov	r4, r0
    9a50:	460e      	mov	r6, r1
    9a52:	4617      	mov	r7, r2
	while (ad->len > 1) {
    9a54:	88a3      	ldrh	r3, [r4, #4]
    9a56:	2b01      	cmp	r3, #1
    9a58:	d912      	bls.n	9a80 <bt_data_parse+0x34>
		len = net_buf_simple_pull_u8(ad);
    9a5a:	4620      	mov	r0, r4
    9a5c:	f018 fddd 	bl	2261a <net_buf_simple_pull_u8>
		if (len == 0U) {
    9a60:	4605      	mov	r5, r0
    9a62:	b168      	cbz	r0, 9a80 <bt_data_parse+0x34>
		if (len > ad->len) {
    9a64:	88a2      	ldrh	r2, [r4, #4]
    9a66:	b283      	uxth	r3, r0
    9a68:	429a      	cmp	r2, r3
    9a6a:	d20b      	bcs.n	9a84 <bt_data_parse+0x38>
    9a6c:	490f      	ldr	r1, [pc, #60]	; (9aac <bt_data_parse+0x60>)
    9a6e:	4b10      	ldr	r3, [pc, #64]	; (9ab0 <bt_data_parse+0x64>)
			BT_WARN("Malformed data");
    9a70:	4810      	ldr	r0, [pc, #64]	; (9ab4 <bt_data_parse+0x68>)
    9a72:	1ac9      	subs	r1, r1, r3
    9a74:	08c9      	lsrs	r1, r1, #3
    9a76:	0189      	lsls	r1, r1, #6
    9a78:	f041 0102 	orr.w	r1, r1, #2
    9a7c:	f014 fd25 	bl	1e4ca <log_0>
}
    9a80:	b003      	add	sp, #12
    9a82:	bdf0      	pop	{r4, r5, r6, r7, pc}
		data.type = net_buf_simple_pull_u8(ad);
    9a84:	4620      	mov	r0, r4
    9a86:	f018 fdc8 	bl	2261a <net_buf_simple_pull_u8>
		data.data_len = len - 1;
    9a8a:	3d01      	subs	r5, #1
		data.data = ad->data;
    9a8c:	6823      	ldr	r3, [r4, #0]
		data.type = net_buf_simple_pull_u8(ad);
    9a8e:	f88d 0000 	strb.w	r0, [sp]
		if (!func(&data, user_data)) {
    9a92:	4639      	mov	r1, r7
    9a94:	4668      	mov	r0, sp
		data.data_len = len - 1;
    9a96:	f88d 5001 	strb.w	r5, [sp, #1]
		data.data = ad->data;
    9a9a:	9301      	str	r3, [sp, #4]
		if (!func(&data, user_data)) {
    9a9c:	47b0      	blx	r6
    9a9e:	2800      	cmp	r0, #0
    9aa0:	d0ee      	beq.n	9a80 <bt_data_parse+0x34>
		net_buf_simple_pull(ad, len - 1);
    9aa2:	4629      	mov	r1, r5
    9aa4:	4620      	mov	r0, r4
    9aa6:	f018 fda8 	bl	225fa <net_buf_simple_pull>
    9aaa:	e7d3      	b.n	9a54 <bt_data_parse+0x8>
    9aac:	000237a8 	.word	0x000237a8
    9ab0:	000236e8 	.word	0x000236e8
    9ab4:	00025cd8 	.word	0x00025cd8

00009ab8 <id_create.isra.0>:

static void id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
    9ab8:	b530      	push	{r4, r5, lr}
    9aba:	4d14      	ldr	r5, [pc, #80]	; (9b0c <id_create.isra.0+0x54>)
    9abc:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    9ac0:	b085      	sub	sp, #20
    9ac2:	4405      	add	r5, r0
{
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    9ac4:	460c      	mov	r4, r1
    9ac6:	b179      	cbz	r1, 9ae8 <id_create.isra.0+0x30>
    9ac8:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    9aca:	2207      	movs	r2, #7
    9acc:	4669      	mov	r1, sp
    9ace:	4620      	mov	r0, r4
    9ad0:	9300      	str	r3, [sp, #0]
    9ad2:	f8cd 3003 	str.w	r3, [sp, #3]
    9ad6:	f016 f9ba 	bl	1fe4e <memcmp>
    9ada:	b128      	cbz	r0, 9ae8 <id_create.isra.0+0x30>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    9adc:	4621      	mov	r1, r4
    9ade:	4628      	mov	r0, r5
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    9ae0:	f016 faec 	bl	200bc <bt_addr_le_copy>
	 */
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}
}
    9ae4:	b005      	add	sp, #20
    9ae6:	bd30      	pop	{r4, r5, pc}
			bt_addr_le_create_static(&new_addr);
    9ae8:	a802      	add	r0, sp, #8
    9aea:	f016 fc8a 	bl	20402 <bt_addr_le_create_static>
		} while (id_find(&new_addr) >= 0);
    9aee:	a802      	add	r0, sp, #8
    9af0:	f7fe fdce 	bl	8690 <id_find>
    9af4:	2800      	cmp	r0, #0
    9af6:	daf7      	bge.n	9ae8 <id_create.isra.0+0x30>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    9af8:	a902      	add	r1, sp, #8
    9afa:	4628      	mov	r0, r5
    9afc:	f016 fade 	bl	200bc <bt_addr_le_copy>
		if (addr) {
    9b00:	2c00      	cmp	r4, #0
    9b02:	d0ef      	beq.n	9ae4 <id_create.isra.0+0x2c>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    9b04:	4629      	mov	r1, r5
    9b06:	4620      	mov	r0, r4
    9b08:	e7ea      	b.n	9ae0 <id_create.isra.0+0x28>
    9b0a:	bf00      	nop
    9b0c:	20000000 	.word	0x20000000

00009b10 <bt_recv>:
{
    9b10:	b570      	push	{r4, r5, r6, lr}
	return (enum bt_buf_type)(*(uint8_t *)net_buf_user_data(buf));
    9b12:	7d01      	ldrb	r1, [r0, #20]
	switch (bt_buf_get_type(buf)) {
    9b14:	2901      	cmp	r1, #1
{
    9b16:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    9b18:	d04b      	beq.n	9bb2 <bt_recv+0xa2>
    9b1a:	2903      	cmp	r1, #3
    9b1c:	d17b      	bne.n	9c16 <bt_recv+0x106>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    9b1e:	8983      	ldrh	r3, [r0, #12]
    9b20:	2b03      	cmp	r3, #3
    9b22:	d80c      	bhi.n	9b3e <bt_recv+0x2e>
    9b24:	4a44      	ldr	r2, [pc, #272]	; (9c38 <bt_recv+0x128>)
    9b26:	4945      	ldr	r1, [pc, #276]	; (9c3c <bt_recv+0x12c>)
    9b28:	4845      	ldr	r0, [pc, #276]	; (9c40 <bt_recv+0x130>)
    9b2a:	f240 5306 	movw	r3, #1286	; 0x506
    9b2e:	f014 fa0c 	bl	1df4a <printk>
    9b32:	4040      	eors	r0, r0
    9b34:	f380 8811 	msr	BASEPRI, r0
    9b38:	f04f 0003 	mov.w	r0, #3
    9b3c:	df02      	svc	2
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    9b3e:	2104      	movs	r1, #4
    9b40:	f104 0008 	add.w	r0, r4, #8
    9b44:	f018 fd61 	bl	2260a <net_buf_simple_pull_mem>
	if (buf->len != len) {
    9b48:	89a1      	ldrh	r1, [r4, #12]
	len = sys_le16_to_cpu(hdr->len);
    9b4a:	8842      	ldrh	r2, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    9b4c:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    9b4e:	23ff      	movs	r3, #255	; 0xff
	acl(buf)->handle = bt_acl_handle(handle);
    9b50:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
    9b54:	428a      	cmp	r2, r1
	acl(buf)->handle = bt_acl_handle(handle);
    9b56:	82e0      	strh	r0, [r4, #22]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    9b58:	7563      	strb	r3, [r4, #21]
	if (buf->len != len) {
    9b5a:	d00d      	beq.n	9b78 <bt_recv+0x68>
    9b5c:	4839      	ldr	r0, [pc, #228]	; (9c44 <bt_recv+0x134>)
    9b5e:	4b3a      	ldr	r3, [pc, #232]	; (9c48 <bt_recv+0x138>)
    9b60:	1a1b      	subs	r3, r3, r0
    9b62:	08db      	lsrs	r3, r3, #3
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    9b64:	019b      	lsls	r3, r3, #6
    9b66:	4839      	ldr	r0, [pc, #228]	; (9c4c <bt_recv+0x13c>)
    9b68:	f043 0301 	orr.w	r3, r3, #1
    9b6c:	f014 fcce 	bl	1e50c <log_2>
	net_buf_unref(buf);
    9b70:	4620      	mov	r0, r4
    9b72:	f011 ffb1 	bl	1bad8 <net_buf_unref>
    9b76:	e01a      	b.n	9bae <bt_recv+0x9e>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    9b78:	f001 f8c6 	bl	ad08 <bt_conn_lookup_handle>
	if (!conn) {
    9b7c:	4605      	mov	r5, r0
    9b7e:	b958      	cbnz	r0, 9b98 <bt_recv+0x88>
    9b80:	4b30      	ldr	r3, [pc, #192]	; (9c44 <bt_recv+0x134>)
    9b82:	4a31      	ldr	r2, [pc, #196]	; (9c48 <bt_recv+0x138>)
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    9b84:	8ae1      	ldrh	r1, [r4, #22]
    9b86:	4832      	ldr	r0, [pc, #200]	; (9c50 <bt_recv+0x140>)
    9b88:	1ad2      	subs	r2, r2, r3
    9b8a:	08d2      	lsrs	r2, r2, #3
    9b8c:	0192      	lsls	r2, r2, #6
    9b8e:	f042 0201 	orr.w	r2, r2, #1
    9b92:	f014 fca7 	bl	1e4e4 <log_1>
		net_buf_unref(buf);
    9b96:	e7eb      	b.n	9b70 <bt_recv+0x60>
	acl(buf)->index = bt_conn_index(conn);
    9b98:	f001 fbbc 	bl	b314 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
    9b9c:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
    9b9e:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    9ba0:	4621      	mov	r1, r4
    9ba2:	4628      	mov	r0, r5
    9ba4:	f000 fdee 	bl	a784 <bt_conn_recv>
	bt_conn_unref(conn);
    9ba8:	4628      	mov	r0, r5
    9baa:	f016 fd24 	bl	205f6 <bt_conn_unref>
		return 0;
    9bae:	2000      	movs	r0, #0
}
    9bb0:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
    9bb2:	8983      	ldrh	r3, [r0, #12]
    9bb4:	2b01      	cmp	r3, #1
    9bb6:	d80c      	bhi.n	9bd2 <bt_recv+0xc2>
    9bb8:	4a1f      	ldr	r2, [pc, #124]	; (9c38 <bt_recv+0x128>)
    9bba:	4920      	ldr	r1, [pc, #128]	; (9c3c <bt_recv+0x12c>)
    9bbc:	4820      	ldr	r0, [pc, #128]	; (9c40 <bt_recv+0x130>)
    9bbe:	f241 437f 	movw	r3, #5247	; 0x147f
    9bc2:	f014 f9c2 	bl	1df4a <printk>
    9bc6:	4040      	eors	r0, r0
    9bc8:	f380 8811 	msr	BASEPRI, r0
    9bcc:	f04f 0003 	mov.w	r0, #3
    9bd0:	df02      	svc	2
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    9bd2:	2102      	movs	r1, #2
    9bd4:	f104 0008 	add.w	r0, r4, #8
    9bd8:	f018 fd17 	bl	2260a <net_buf_simple_pull_mem>
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    9bdc:	7802      	ldrb	r2, [r0, #0]
    9bde:	2a1a      	cmp	r2, #26
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    9be0:	4605      	mov	r5, r0
 * @return true if the event can be processed in the RX thread, false
 *         if it cannot.
 */
static inline bool bt_hci_evt_is_prio(uint8_t evt)
{
	switch (evt) {
    9be2:	d811      	bhi.n	9c08 <bt_recv+0xf8>
    9be4:	2301      	movs	r3, #1
    9be6:	4093      	lsls	r3, r2
    9be8:	4a1a      	ldr	r2, [pc, #104]	; (9c54 <bt_recv+0x144>)
    9bea:	4213      	tst	r3, r2
    9bec:	d00c      	beq.n	9c08 <bt_recv+0xf8>
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    9bee:	4a12      	ldr	r2, [pc, #72]	; (9c38 <bt_recv+0x128>)
    9bf0:	4919      	ldr	r1, [pc, #100]	; (9c58 <bt_recv+0x148>)
    9bf2:	4813      	ldr	r0, [pc, #76]	; (9c40 <bt_recv+0x130>)
    9bf4:	f241 4383 	movw	r3, #5251	; 0x1483
    9bf8:	f014 f9a7 	bl	1df4a <printk>
    9bfc:	4040      	eors	r0, r0
    9bfe:	f380 8811 	msr	BASEPRI, r0
    9c02:	f04f 0003 	mov.w	r0, #3
    9c06:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    9c08:	4a14      	ldr	r2, [pc, #80]	; (9c5c <bt_recv+0x14c>)
    9c0a:	7828      	ldrb	r0, [r5, #0]
    9c0c:	2305      	movs	r3, #5
    9c0e:	4621      	mov	r1, r4
    9c10:	f7fe fc72 	bl	84f8 <handle_event>
    9c14:	e7ac      	b.n	9b70 <bt_recv+0x60>
    9c16:	4b0b      	ldr	r3, [pc, #44]	; (9c44 <bt_recv+0x134>)
    9c18:	4a0b      	ldr	r2, [pc, #44]	; (9c48 <bt_recv+0x138>)
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    9c1a:	4811      	ldr	r0, [pc, #68]	; (9c60 <bt_recv+0x150>)
    9c1c:	1ad2      	subs	r2, r2, r3
    9c1e:	08d2      	lsrs	r2, r2, #3
    9c20:	0192      	lsls	r2, r2, #6
    9c22:	f042 0201 	orr.w	r2, r2, #1
    9c26:	f014 fc5d 	bl	1e4e4 <log_1>
		net_buf_unref(buf);
    9c2a:	4620      	mov	r0, r4
    9c2c:	f011 ff54 	bl	1bad8 <net_buf_unref>
		return -EINVAL;
    9c30:	f06f 0015 	mvn.w	r0, #21
    9c34:	e7bc      	b.n	9bb0 <bt_recv+0xa0>
    9c36:	bf00      	nop
    9c38:	00025977 	.word	0x00025977
    9c3c:	00025ce7 	.word	0x00025ce7
    9c40:	000259b4 	.word	0x000259b4
    9c44:	000236e8 	.word	0x000236e8
    9c48:	000237a8 	.word	0x000237a8
    9c4c:	00025d00 	.word	0x00025d00
    9c50:	00025d24 	.word	0x00025d24
    9c54:	0408c000 	.word	0x0408c000
    9c58:	00025d46 	.word	0x00025d46
    9c5c:	00023c34 	.word	0x00023c34
    9c60:	00025d64 	.word	0x00025d64

00009c64 <bt_recv_prio>:
{
    9c64:	b538      	push	{r3, r4, r5, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    9c66:	7d03      	ldrb	r3, [r0, #20]
    9c68:	2b01      	cmp	r3, #1
{
    9c6a:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    9c6c:	d00c      	beq.n	9c88 <bt_recv_prio+0x24>
    9c6e:	4a21      	ldr	r2, [pc, #132]	; (9cf4 <bt_recv_prio+0x90>)
    9c70:	4921      	ldr	r1, [pc, #132]	; (9cf8 <bt_recv_prio+0x94>)
    9c72:	4822      	ldr	r0, [pc, #136]	; (9cfc <bt_recv_prio+0x98>)
    9c74:	f641 1304 	movw	r3, #6404	; 0x1904
    9c78:	f014 f967 	bl	1df4a <printk>
    9c7c:	4040      	eors	r0, r0
    9c7e:	f380 8811 	msr	BASEPRI, r0
    9c82:	f04f 0003 	mov.w	r0, #3
    9c86:	df02      	svc	2
	BT_ASSERT(buf->len >= sizeof(*hdr));
    9c88:	89a3      	ldrh	r3, [r4, #12]
    9c8a:	2b01      	cmp	r3, #1
    9c8c:	d80c      	bhi.n	9ca8 <bt_recv_prio+0x44>
    9c8e:	4a19      	ldr	r2, [pc, #100]	; (9cf4 <bt_recv_prio+0x90>)
    9c90:	491b      	ldr	r1, [pc, #108]	; (9d00 <bt_recv_prio+0x9c>)
    9c92:	481a      	ldr	r0, [pc, #104]	; (9cfc <bt_recv_prio+0x98>)
    9c94:	f641 1305 	movw	r3, #6405	; 0x1905
    9c98:	f014 f957 	bl	1df4a <printk>
    9c9c:	4040      	eors	r0, r0
    9c9e:	f380 8811 	msr	BASEPRI, r0
    9ca2:	f04f 0003 	mov.w	r0, #3
    9ca6:	df02      	svc	2
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    9ca8:	2102      	movs	r1, #2
    9caa:	f104 0008 	add.w	r0, r4, #8
    9cae:	f018 fcac 	bl	2260a <net_buf_simple_pull_mem>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    9cb2:	7802      	ldrb	r2, [r0, #0]
    9cb4:	2a1a      	cmp	r2, #26
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    9cb6:	4605      	mov	r5, r0
    9cb8:	d804      	bhi.n	9cc4 <bt_recv_prio+0x60>
    9cba:	2301      	movs	r3, #1
    9cbc:	4093      	lsls	r3, r2
    9cbe:	4a11      	ldr	r2, [pc, #68]	; (9d04 <bt_recv_prio+0xa0>)
    9cc0:	4213      	tst	r3, r2
    9cc2:	d10c      	bne.n	9cde <bt_recv_prio+0x7a>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    9cc4:	4a0b      	ldr	r2, [pc, #44]	; (9cf4 <bt_recv_prio+0x90>)
    9cc6:	4910      	ldr	r1, [pc, #64]	; (9d08 <bt_recv_prio+0xa4>)
    9cc8:	480c      	ldr	r0, [pc, #48]	; (9cfc <bt_recv_prio+0x98>)
    9cca:	f641 1308 	movw	r3, #6408	; 0x1908
    9cce:	f014 f93c 	bl	1df4a <printk>
    9cd2:	4040      	eors	r0, r0
    9cd4:	f380 8811 	msr	BASEPRI, r0
    9cd8:	f04f 0003 	mov.w	r0, #3
    9cdc:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
    9cde:	4a0b      	ldr	r2, [pc, #44]	; (9d0c <bt_recv_prio+0xa8>)
    9ce0:	7828      	ldrb	r0, [r5, #0]
    9ce2:	2304      	movs	r3, #4
    9ce4:	4621      	mov	r1, r4
    9ce6:	f7fe fc07 	bl	84f8 <handle_event>
	net_buf_unref(buf);
    9cea:	4620      	mov	r0, r4
    9cec:	f011 fef4 	bl	1bad8 <net_buf_unref>
}
    9cf0:	2000      	movs	r0, #0
    9cf2:	bd38      	pop	{r3, r4, r5, pc}
    9cf4:	00025977 	.word	0x00025977
    9cf8:	00025d78 	.word	0x00025d78
    9cfc:	000259b4 	.word	0x000259b4
    9d00:	00025ce7 	.word	0x00025ce7
    9d04:	0408c000 	.word	0x0408c000
    9d08:	00025d47 	.word	0x00025d47
    9d0c:	00023c6c 	.word	0x00023c6c

00009d10 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    9d10:	4a08      	ldr	r2, [pc, #32]	; (9d34 <bt_hci_driver_register+0x24>)
{
    9d12:	4603      	mov	r3, r0
	if (bt_dev.drv) {
    9d14:	f8d2 0104 	ldr.w	r0, [r2, #260]	; 0x104
    9d18:	b930      	cbnz	r0, 9d28 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    9d1a:	68d9      	ldr	r1, [r3, #12]
    9d1c:	b139      	cbz	r1, 9d2e <bt_hci_driver_register+0x1e>
    9d1e:	6919      	ldr	r1, [r3, #16]
    9d20:	b129      	cbz	r1, 9d2e <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    9d22:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
	return 0;
    9d26:	4770      	bx	lr
		return -EALREADY;
    9d28:	f06f 0044 	mvn.w	r0, #68	; 0x44
    9d2c:	4770      	bx	lr
		return -EINVAL;
    9d2e:	f06f 0015 	mvn.w	r0, #21
}
    9d32:	4770      	bx	lr
    9d34:	20000000 	.word	0x20000000

00009d38 <bt_finalize_init>:
{
    9d38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    9d3c:	4c2d      	ldr	r4, [pc, #180]	; (9df4 <bt_finalize_init+0xbc>)
    9d3e:	4d2e      	ldr	r5, [pc, #184]	; (9df8 <bt_finalize_init+0xc0>)
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    9d40:	4e2e      	ldr	r6, [pc, #184]	; (9dfc <bt_finalize_init+0xc4>)
		BT_INFO("Identity[%d]: %s",
    9d42:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 9e14 <bt_finalize_init+0xdc>
{
    9d46:	b087      	sub	sp, #28
    9d48:	2102      	movs	r1, #2
    9d4a:	f104 0098 	add.w	r0, r4, #152	; 0x98
    9d4e:	f016 f9c7 	bl	200e0 <atomic_or>
		bt_le_scan_update(false);
    9d52:	2000      	movs	r0, #0
    9d54:	f7ff fc24 	bl	95a0 <bt_le_scan_update>
    9d58:	4b29      	ldr	r3, [pc, #164]	; (9e00 <bt_finalize_init+0xc8>)
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    9d5a:	492a      	ldr	r1, [pc, #168]	; (9e04 <bt_finalize_init+0xcc>)
    9d5c:	1aed      	subs	r5, r5, r3
    9d5e:	79e3      	ldrb	r3, [r4, #7]
    9d60:	4620      	mov	r0, r4
    9d62:	2b01      	cmp	r3, #1
    9d64:	bf88      	it	hi
    9d66:	460e      	movhi	r6, r1
    9d68:	f7fe f816 	bl	7d98 <bt_addr_le_str_real>
    9d6c:	f7fc fab2 	bl	62d4 <log_strdup>
    9d70:	08ed      	lsrs	r5, r5, #3
    9d72:	01ad      	lsls	r5, r5, #6
    9d74:	f045 0703 	orr.w	r7, r5, #3
    9d78:	4602      	mov	r2, r0
    9d7a:	4631      	mov	r1, r6
    9d7c:	4822      	ldr	r0, [pc, #136]	; (9e08 <bt_finalize_init+0xd0>)
    9d7e:	463b      	mov	r3, r7
    9d80:	f014 fbc4 	bl	1e50c <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
    9d84:	46a0      	mov	r8, r4
    9d86:	2601      	movs	r6, #1
    9d88:	79e3      	ldrb	r3, [r4, #7]
    9d8a:	429e      	cmp	r6, r3
    9d8c:	f108 0807 	add.w	r8, r8, #7
    9d90:	db22      	blt.n	9dd8 <bt_finalize_init+0xa0>
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
    9d92:	f894 6038 	ldrb.w	r6, [r4, #56]	; 0x38
    9d96:	4630      	mov	r0, r6
    9d98:	f7fe fa18 	bl	81cc <ver_str>
    9d9c:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
    9d9e:	9304      	str	r3, [sp, #16]
    9da0:	f045 0503 	orr.w	r5, r5, #3
    9da4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
    9da6:	9305      	str	r3, [sp, #20]
    9da8:	e9cd 0602 	strd	r0, r6, [sp, #8]
    9dac:	462b      	mov	r3, r5
    9dae:	a902      	add	r1, sp, #8
    9db0:	2204      	movs	r2, #4
    9db2:	4816      	ldr	r0, [pc, #88]	; (9e0c <bt_finalize_init+0xd4>)
    9db4:	f014 fbdf 	bl	1e576 <log_n>
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
    9db8:	f894 6039 	ldrb.w	r6, [r4, #57]	; 0x39
    9dbc:	4630      	mov	r0, r6
    9dbe:	f7fe fa05 	bl	81cc <ver_str>
    9dc2:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
    9dc4:	f8ad 5000 	strh.w	r5, [sp]
    9dc8:	4601      	mov	r1, r0
    9dca:	4632      	mov	r2, r6
    9dcc:	4810      	ldr	r0, [pc, #64]	; (9e10 <bt_finalize_init+0xd8>)
    9dce:	f014 fbb6 	bl	1e53e <log_3>
}
    9dd2:	b007      	add	sp, #28
    9dd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		BT_INFO("Identity[%d]: %s",
    9dd8:	4640      	mov	r0, r8
    9dda:	f7fd ffdd 	bl	7d98 <bt_addr_le_str_real>
    9dde:	f7fc fa79 	bl	62d4 <log_strdup>
    9de2:	4631      	mov	r1, r6
    9de4:	4602      	mov	r2, r0
    9de6:	463b      	mov	r3, r7
    9de8:	4648      	mov	r0, r9
    9dea:	f014 fb8f 	bl	1e50c <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
    9dee:	3601      	adds	r6, #1
    9df0:	e7ca      	b.n	9d88 <bt_finalize_init+0x50>
    9df2:	bf00      	nop
    9df4:	20000000 	.word	0x20000000
    9df8:	000237a8 	.word	0x000237a8
    9dfc:	000250b0 	.word	0x000250b0
    9e00:	000236e8 	.word	0x000236e8
    9e04:	00025d9b 	.word	0x00025d9b
    9e08:	00025d9f 	.word	0x00025d9f
    9e0c:	00025dbf 	.word	0x00025dbf
    9e10:	00025dfd 	.word	0x00025dfd
    9e14:	00025dae 	.word	0x00025dae

00009e18 <bt_get_name>:
}
    9e18:	4800      	ldr	r0, [pc, #0]	; (9e1c <bt_get_name+0x4>)
    9e1a:	4770      	bx	lr
    9e1c:	00025aef 	.word	0x00025aef

00009e20 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
    9e20:	b537      	push	{r0, r1, r2, r4, r5, lr}
    9e22:	460c      	mov	r4, r1
	int new_id;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    9e24:	4605      	mov	r5, r0
    9e26:	b918      	cbnz	r0, 9e30 <bt_id_create+0x10>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
    9e28:	b34c      	cbz	r4, 9e7e <bt_id_create+0x5e>
		return -EINVAL;
    9e2a:	f06f 0415 	mvn.w	r4, #21
    9e2e:	e023      	b.n	9e78 <bt_id_create+0x58>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    9e30:	2300      	movs	r3, #0
    9e32:	2207      	movs	r2, #7
    9e34:	4669      	mov	r1, sp
    9e36:	9300      	str	r3, [sp, #0]
    9e38:	f8cd 3003 	str.w	r3, [sp, #3]
    9e3c:	f016 f807 	bl	1fe4e <memcmp>
    9e40:	2800      	cmp	r0, #0
    9e42:	d0f1      	beq.n	9e28 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
    9e44:	782b      	ldrb	r3, [r5, #0]
    9e46:	2b01      	cmp	r3, #1
    9e48:	d104      	bne.n	9e54 <bt_id_create+0x34>
    9e4a:	79ab      	ldrb	r3, [r5, #6]
    9e4c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    9e50:	2bc0      	cmp	r3, #192	; 0xc0
    9e52:	d00a      	beq.n	9e6a <bt_id_create+0x4a>
    9e54:	4b11      	ldr	r3, [pc, #68]	; (9e9c <bt_id_create+0x7c>)
    9e56:	4912      	ldr	r1, [pc, #72]	; (9ea0 <bt_id_create+0x80>)
			BT_ERR("Only static random identity address supported");
    9e58:	4812      	ldr	r0, [pc, #72]	; (9ea4 <bt_id_create+0x84>)
    9e5a:	1ac9      	subs	r1, r1, r3
    9e5c:	08c9      	lsrs	r1, r1, #3
    9e5e:	0189      	lsls	r1, r1, #6
    9e60:	f041 0101 	orr.w	r1, r1, #1
    9e64:	f014 fb31 	bl	1e4ca <log_0>
			return -EINVAL;
    9e68:	e7df      	b.n	9e2a <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
    9e6a:	4628      	mov	r0, r5
    9e6c:	f7fe fc10 	bl	8690 <id_find>
    9e70:	2800      	cmp	r0, #0
    9e72:	dbd9      	blt.n	9e28 <bt_id_create+0x8>
			return -EALREADY;
    9e74:	f06f 0444 	mvn.w	r4, #68	; 0x44

	new_id = bt_dev.id_count++;
	id_create(new_id, addr, irk);

	return new_id;
}
    9e78:	4620      	mov	r0, r4
    9e7a:	b003      	add	sp, #12
    9e7c:	bd30      	pop	{r4, r5, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
    9e7e:	4b0a      	ldr	r3, [pc, #40]	; (9ea8 <bt_id_create+0x88>)
    9e80:	79dc      	ldrb	r4, [r3, #7]
    9e82:	2c01      	cmp	r4, #1
    9e84:	d006      	beq.n	9e94 <bt_id_create+0x74>
	new_id = bt_dev.id_count++;
    9e86:	1c62      	adds	r2, r4, #1
	id_create(new_id, addr, irk);
    9e88:	4629      	mov	r1, r5
    9e8a:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
    9e8c:	71da      	strb	r2, [r3, #7]
	id_create(new_id, addr, irk);
    9e8e:	f7ff fe13 	bl	9ab8 <id_create.isra.0>
	return new_id;
    9e92:	e7f1      	b.n	9e78 <bt_id_create+0x58>
		return -ENOMEM;
    9e94:	f06f 040b 	mvn.w	r4, #11
    9e98:	e7ee      	b.n	9e78 <bt_id_create+0x58>
    9e9a:	bf00      	nop
    9e9c:	000236e8 	.word	0x000236e8
    9ea0:	000237a8 	.word	0x000237a8
    9ea4:	00025e24 	.word	0x00025e24
    9ea8:	20000000 	.word	0x20000000

00009eac <bt_setup_public_id_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

void bt_setup_public_id_addr(void)
{
    9eac:	b570      	push	{r4, r5, r6, lr}
    9eae:	b086      	sub	sp, #24
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    9eb0:	aa01      	add	r2, sp, #4
    9eb2:	2100      	movs	r1, #0
    9eb4:	f241 0009 	movw	r0, #4105	; 0x1009
    9eb8:	f7fe feec 	bl	8c94 <bt_hci_cmd_send_sync>
	if (err) {
    9ebc:	4e1f      	ldr	r6, [pc, #124]	; (9f3c <bt_setup_public_id_addr+0x90>)
    9ebe:	4604      	mov	r4, r0
    9ec0:	b168      	cbz	r0, 9ede <bt_setup_public_id_addr+0x32>
    9ec2:	491f      	ldr	r1, [pc, #124]	; (9f40 <bt_setup_public_id_addr+0x94>)
    9ec4:	4b1f      	ldr	r3, [pc, #124]	; (9f44 <bt_setup_public_id_addr+0x98>)
		BT_WARN("Failed to read public address");
    9ec6:	4820      	ldr	r0, [pc, #128]	; (9f48 <bt_setup_public_id_addr+0x9c>)
    9ec8:	1ac9      	subs	r1, r1, r3
    9eca:	08c9      	lsrs	r1, r1, #3
    9ecc:	0189      	lsls	r1, r1, #6
    9ece:	f041 0102 	orr.w	r1, r1, #2
    9ed2:	f014 fafa 	bl	1e4ca <log_0>
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_read_public_addr(&addr);
    9ed6:	2300      	movs	r3, #0
    9ed8:	71f3      	strb	r3, [r6, #7]
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	id_create(BT_ID_DEFAULT, &addr, irk);
}
    9eda:	b006      	add	sp, #24
    9edc:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    9ede:	9b01      	ldr	r3, [sp, #4]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    9ee0:	689d      	ldr	r5, [r3, #8]
    9ee2:	9004      	str	r0, [sp, #16]
    9ee4:	3501      	adds	r5, #1
    9ee6:	f8ad 0014 	strh.w	r0, [sp, #20]
	return memcmp(a, b, sizeof(*a));
    9eea:	2206      	movs	r2, #6
    9eec:	a904      	add	r1, sp, #16
    9eee:	4628      	mov	r0, r5
    9ef0:	f015 ffad 	bl	1fe4e <memcmp>
    9ef4:	b918      	cbnz	r0, 9efe <bt_setup_public_id_addr+0x52>
		net_buf_unref(rsp);
    9ef6:	9801      	ldr	r0, [sp, #4]
    9ef8:	f011 fdee 	bl	1bad8 <net_buf_unref>
    9efc:	e7eb      	b.n	9ed6 <bt_setup_public_id_addr+0x2a>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
    9efe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9f02:	2206      	movs	r2, #6
    9f04:	a902      	add	r1, sp, #8
    9f06:	4628      	mov	r0, r5
    9f08:	9302      	str	r3, [sp, #8]
    9f0a:	f8ad 300c 	strh.w	r3, [sp, #12]
    9f0e:	f015 ff9e 	bl	1fe4e <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    9f12:	2800      	cmp	r0, #0
    9f14:	d0ef      	beq.n	9ef6 <bt_setup_public_id_addr+0x4a>
	memcpy(dst, src, sizeof(*dst));
    9f16:	4629      	mov	r1, r5
    9f18:	2206      	movs	r2, #6
    9f1a:	f10d 0011 	add.w	r0, sp, #17
    9f1e:	f015 ffa6 	bl	1fe6e <memcpy>
	net_buf_unref(rsp);
    9f22:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
    9f24:	f88d 4010 	strb.w	r4, [sp, #16]
	net_buf_unref(rsp);
    9f28:	f011 fdd6 	bl	1bad8 <net_buf_unref>
	bt_dev.id_count = bt_read_public_addr(&addr);
    9f2c:	2301      	movs	r3, #1
	id_create(BT_ID_DEFAULT, &addr, irk);
    9f2e:	a904      	add	r1, sp, #16
    9f30:	4620      	mov	r0, r4
	bt_dev.id_count = bt_read_public_addr(&addr);
    9f32:	71f3      	strb	r3, [r6, #7]
	id_create(BT_ID_DEFAULT, &addr, irk);
    9f34:	f7ff fdc0 	bl	9ab8 <id_create.isra.0>
    9f38:	e7cf      	b.n	9eda <bt_setup_public_id_addr+0x2e>
    9f3a:	bf00      	nop
    9f3c:	20000000 	.word	0x20000000
    9f40:	000237a8 	.word	0x000237a8
    9f44:	000236e8 	.word	0x000236e8
    9f48:	00025e52 	.word	0x00025e52

00009f4c <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
    9f4c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    9f50:	4b25      	ldr	r3, [pc, #148]	; (9fe8 <bt_read_static_addr+0x9c>)
    9f52:	f893 408a 	ldrb.w	r4, [r3, #138]	; 0x8a
    9f56:	f014 0401 	ands.w	r4, r4, #1
{
    9f5a:	4607      	mov	r7, r0
    9f5c:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    9f5e:	d10a      	bne.n	9f76 <bt_read_static_addr+0x2a>
    9f60:	4922      	ldr	r1, [pc, #136]	; (9fec <bt_read_static_addr+0xa0>)
    9f62:	4b23      	ldr	r3, [pc, #140]	; (9ff0 <bt_read_static_addr+0xa4>)
		BT_WARN("Read Static Addresses command not available");
    9f64:	4823      	ldr	r0, [pc, #140]	; (9ff4 <bt_read_static_addr+0xa8>)
    9f66:	1ac9      	subs	r1, r1, r3
    9f68:	08c9      	lsrs	r1, r1, #3
    9f6a:	0189      	lsls	r1, r1, #6
    9f6c:	f041 0102 	orr.w	r1, r1, #2
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
	}

	net_buf_unref(rsp);
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
    9f70:	f014 faab 	bl	1e4ca <log_0>
    9f74:	e012      	b.n	9f9c <bt_read_static_addr+0x50>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
    9f76:	aa01      	add	r2, sp, #4
    9f78:	2100      	movs	r1, #0
    9f7a:	f64f 4009 	movw	r0, #64521	; 0xfc09
    9f7e:	f7fe fe89 	bl	8c94 <bt_hci_cmd_send_sync>
	if (err) {
    9f82:	4605      	mov	r5, r0
    9f84:	b170      	cbz	r0, 9fa4 <bt_read_static_addr+0x58>
    9f86:	4b1a      	ldr	r3, [pc, #104]	; (9ff0 <bt_read_static_addr+0xa4>)
    9f88:	4918      	ldr	r1, [pc, #96]	; (9fec <bt_read_static_addr+0xa0>)
		BT_WARN("Failed to read static addresses");
    9f8a:	481b      	ldr	r0, [pc, #108]	; (9ff8 <bt_read_static_addr+0xac>)
    9f8c:	1ac9      	subs	r1, r1, r3
    9f8e:	08c9      	lsrs	r1, r1, #3
    9f90:	0189      	lsls	r1, r1, #6
    9f92:	f041 0102 	orr.w	r1, r1, #2
    9f96:	f014 fa98 	bl	1e4ca <log_0>
		return 0;
    9f9a:	2400      	movs	r4, #0
	}

	return cnt;
}
    9f9c:	4620      	mov	r0, r4
    9f9e:	b002      	add	sp, #8
    9fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	rp = (void *)rsp->data;
    9fa4:	9b01      	ldr	r3, [sp, #4]
    9fa6:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
    9fa8:	785c      	ldrb	r4, [r3, #1]
    9faa:	42b4      	cmp	r4, r6
    9fac:	bf28      	it	cs
    9fae:	4634      	movcs	r4, r6
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    9fb0:	f04f 0816 	mov.w	r8, #22
    9fb4:	1c9e      	adds	r6, r3, #2
	for (i = 0; i < cnt; i++) {
    9fb6:	42a5      	cmp	r5, r4
    9fb8:	db0d      	blt.n	9fd6 <bt_read_static_addr+0x8a>
	net_buf_unref(rsp);
    9fba:	9801      	ldr	r0, [sp, #4]
    9fbc:	f011 fd8c 	bl	1bad8 <net_buf_unref>
	if (!cnt) {
    9fc0:	2c00      	cmp	r4, #0
    9fc2:	d1eb      	bne.n	9f9c <bt_read_static_addr+0x50>
    9fc4:	4909      	ldr	r1, [pc, #36]	; (9fec <bt_read_static_addr+0xa0>)
    9fc6:	4b0a      	ldr	r3, [pc, #40]	; (9ff0 <bt_read_static_addr+0xa4>)
		BT_WARN("No static addresses stored in controller");
    9fc8:	480c      	ldr	r0, [pc, #48]	; (9ffc <bt_read_static_addr+0xb0>)
    9fca:	1ac9      	subs	r1, r1, r3
    9fcc:	08c9      	lsrs	r1, r1, #3
    9fce:	0189      	lsls	r1, r1, #6
    9fd0:	f041 0102 	orr.w	r1, r1, #2
    9fd4:	e7cc      	b.n	9f70 <bt_read_static_addr+0x24>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    9fd6:	fb08 7005 	mla	r0, r8, r5, r7
    9fda:	2216      	movs	r2, #22
    9fdc:	4631      	mov	r1, r6
    9fde:	f015 ff46 	bl	1fe6e <memcpy>
	for (i = 0; i < cnt; i++) {
    9fe2:	3501      	adds	r5, #1
    9fe4:	e7e7      	b.n	9fb6 <bt_read_static_addr+0x6a>
    9fe6:	bf00      	nop
    9fe8:	20000000 	.word	0x20000000
    9fec:	000237a8 	.word	0x000237a8
    9ff0:	000236e8 	.word	0x000236e8
    9ff4:	00025e70 	.word	0x00025e70
    9ff8:	00025e9c 	.word	0x00025e9c
    9ffc:	00025ebc 	.word	0x00025ebc

0000a000 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
    a000:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
    a002:	4d14      	ldr	r5, [pc, #80]	; (a054 <bt_setup_random_id_addr+0x54>)
    a004:	79ec      	ldrb	r4, [r5, #7]
{
    a006:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
    a008:	b9f4      	cbnz	r4, a048 <bt_setup_random_id_addr+0x48>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
    a00a:	2101      	movs	r1, #1
    a00c:	a802      	add	r0, sp, #8
    a00e:	f7ff ff9d 	bl	9f4c <bt_read_static_addr>
    a012:	71e8      	strb	r0, [r5, #7]

		if (bt_dev.id_count) {
    a014:	b1c0      	cbz	r0, a048 <bt_setup_random_id_addr+0x48>
					atomic_set_bit(bt_dev.flags,
						       BT_DEV_STORE_ID);
				}
#endif /* CONFIG_BT_PRIVACY */

				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
    a016:	2716      	movs	r7, #22
    a018:	e00f      	b.n	a03a <bt_setup_random_id_addr+0x3a>
    a01a:	ab02      	add	r3, sp, #8
    a01c:	fb07 3106 	mla	r1, r7, r6, r3
    a020:	2206      	movs	r2, #6
    a022:	f10d 0001 	add.w	r0, sp, #1
    a026:	f015 ff22 	bl	1fe6e <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
    a02a:	2301      	movs	r3, #1

				id_create(i, &addr, irk);
    a02c:	4669      	mov	r1, sp
    a02e:	4630      	mov	r0, r6
				addr.type = BT_ADDR_LE_RANDOM;
    a030:	f88d 3000 	strb.w	r3, [sp]
				id_create(i, &addr, irk);
    a034:	f7ff fd40 	bl	9ab8 <id_create.isra.0>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
    a038:	3401      	adds	r4, #1
    a03a:	79eb      	ldrb	r3, [r5, #7]
    a03c:	b2e6      	uxtb	r6, r4
    a03e:	42b3      	cmp	r3, r6
    a040:	d8eb      	bhi.n	a01a <bt_setup_random_id_addr+0x1a>
			}

			return 0;
    a042:	2000      	movs	r0, #0
	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
}
    a044:	b009      	add	sp, #36	; 0x24
    a046:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return bt_id_create(NULL, NULL);
    a048:	2100      	movs	r1, #0
    a04a:	4608      	mov	r0, r1
    a04c:	f7ff fee8 	bl	9e20 <bt_id_create>
    a050:	e7f8      	b.n	a044 <bt_setup_random_id_addr+0x44>
    a052:	bf00      	nop
    a054:	20000000 	.word	0x20000000

0000a058 <bt_enable>:
{
    a058:	b570      	push	{r4, r5, r6, lr}
	if (!bt_dev.drv) {
    a05a:	4d33      	ldr	r5, [pc, #204]	; (a128 <bt_enable+0xd0>)
    a05c:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
{
    a060:	b088      	sub	sp, #32
    a062:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    a064:	b973      	cbnz	r3, a084 <bt_enable+0x2c>
    a066:	4b31      	ldr	r3, [pc, #196]	; (a12c <bt_enable+0xd4>)
    a068:	4931      	ldr	r1, [pc, #196]	; (a130 <bt_enable+0xd8>)
		BT_ERR("No HCI driver registered");
    a06a:	4832      	ldr	r0, [pc, #200]	; (a134 <bt_enable+0xdc>)
    a06c:	1ac9      	subs	r1, r1, r3
    a06e:	08c9      	lsrs	r1, r1, #3
    a070:	0189      	lsls	r1, r1, #6
    a072:	f041 0101 	orr.w	r1, r1, #1
    a076:	f014 fa28 	bl	1e4ca <log_0>
		return -ENODEV;
    a07a:	f06f 0412 	mvn.w	r4, #18
}
    a07e:	4620      	mov	r0, r4
    a080:	b008      	add	sp, #32
    a082:	bd70      	pop	{r4, r5, r6, pc}
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    a084:	2100      	movs	r1, #0
    a086:	f105 0098 	add.w	r0, r5, #152	; 0x98
    a08a:	f016 f849 	bl	20120 <atomic_test_and_set_bit>
    a08e:	2800      	cmp	r0, #0
    a090:	d146      	bne.n	a120 <bt_enable+0xc8>
	ready_cb = cb;
    a092:	4b29      	ldr	r3, [pc, #164]	; (a138 <bt_enable+0xe0>)
    a094:	601e      	str	r6, [r3, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    a096:	2200      	movs	r2, #0
    a098:	2300      	movs	r3, #0
    a09a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    a09e:	f06f 0308 	mvn.w	r3, #8
    a0a2:	e9cd 0302 	strd	r0, r3, [sp, #8]
    a0a6:	e9cd 0000 	strd	r0, r0, [sp]
    a0aa:	9004      	str	r0, [sp, #16]
    a0ac:	4b23      	ldr	r3, [pc, #140]	; (a13c <bt_enable+0xe4>)
    a0ae:	4924      	ldr	r1, [pc, #144]	; (a140 <bt_enable+0xe8>)
    a0b0:	4824      	ldr	r0, [pc, #144]	; (a144 <bt_enable+0xec>)
    a0b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
    a0b6:	f013 fbe9 	bl	1d88c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    a0ba:	4923      	ldr	r1, [pc, #140]	; (a148 <bt_enable+0xf0>)
    a0bc:	4821      	ldr	r0, [pc, #132]	; (a144 <bt_enable+0xec>)
    a0be:	f018 ffac 	bl	2301a <z_impl_k_thread_name_set>
		bt_hci_ecc_init();
    a0c2:	f7fe f811 	bl	80e8 <bt_hci_ecc_init>
	err = bt_dev.drv->open();
    a0c6:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    a0ca:	68db      	ldr	r3, [r3, #12]
    a0cc:	4798      	blx	r3
	if (err) {
    a0ce:	4604      	mov	r4, r0
    a0d0:	b158      	cbz	r0, a0ea <bt_enable+0x92>
    a0d2:	4b16      	ldr	r3, [pc, #88]	; (a12c <bt_enable+0xd4>)
    a0d4:	4a16      	ldr	r2, [pc, #88]	; (a130 <bt_enable+0xd8>)
    a0d6:	1ad2      	subs	r2, r2, r3
    a0d8:	08d2      	lsrs	r2, r2, #3
		BT_ERR("HCI driver open failed (%d)", err);
    a0da:	0192      	lsls	r2, r2, #6
    a0dc:	4601      	mov	r1, r0
    a0de:	f042 0201 	orr.w	r2, r2, #1
    a0e2:	481a      	ldr	r0, [pc, #104]	; (a14c <bt_enable+0xf4>)
    a0e4:	f014 f9fe 	bl	1e4e4 <log_1>
		return err;
    a0e8:	e7c9      	b.n	a07e <bt_enable+0x26>
	if (!cb) {
    a0ea:	b966      	cbnz	r6, a106 <bt_enable+0xae>
	err = hci_init();
    a0ec:	f7f6 fe24 	bl	d38 <hci_init>
	if (err) {
    a0f0:	4604      	mov	r4, r0
    a0f2:	2800      	cmp	r0, #0
    a0f4:	d1c3      	bne.n	a07e <bt_enable+0x26>
		err = bt_conn_init();
    a0f6:	f001 f933 	bl	b360 <bt_conn_init>
		if (err) {
    a0fa:	4604      	mov	r4, r0
    a0fc:	2800      	cmp	r0, #0
    a0fe:	d1be      	bne.n	a07e <bt_enable+0x26>
	bt_finalize_init();
    a100:	f7ff fe1a 	bl	9d38 <bt_finalize_init>
	return 0;
    a104:	e7bb      	b.n	a07e <bt_enable+0x26>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    a106:	4601      	mov	r1, r0
    a108:	f105 0094 	add.w	r0, r5, #148	; 0x94
    a10c:	f016 f808 	bl	20120 <atomic_test_and_set_bit>
    a110:	2800      	cmp	r0, #0
    a112:	d1b4      	bne.n	a07e <bt_enable+0x26>
		k_queue_append(&work_q->queue, work);
    a114:	480e      	ldr	r0, [pc, #56]	; (a150 <bt_enable+0xf8>)
    a116:	f105 018c 	add.w	r1, r5, #140	; 0x8c
    a11a:	f018 fdf3 	bl	22d04 <k_queue_append>
    a11e:	e7ae      	b.n	a07e <bt_enable+0x26>
		return -EALREADY;
    a120:	f06f 0444 	mvn.w	r4, #68	; 0x44
    a124:	e7ab      	b.n	a07e <bt_enable+0x26>
    a126:	bf00      	nop
    a128:	20000000 	.word	0x20000000
    a12c:	000236e8 	.word	0x000236e8
    a130:	000237a8 	.word	0x000237a8
    a134:	00026019 	.word	0x00026019
    a138:	200021e0 	.word	0x200021e0
    a13c:	000086c5 	.word	0x000086c5
    a140:	2000b700 	.word	0x2000b700
    a144:	20000b50 	.word	0x20000b50
    a148:	00026032 	.word	0x00026032
    a14c:	00026038 	.word	0x00026038
    a150:	20001c50 	.word	0x20001c50

0000a154 <init_work>:
{
    a154:	b510      	push	{r4, lr}
	err = hci_init();
    a156:	f7f6 fdef 	bl	d38 <hci_init>
	if (err) {
    a15a:	4604      	mov	r4, r0
    a15c:	b928      	cbnz	r0, a16a <init_work+0x16>
		err = bt_conn_init();
    a15e:	f001 f8ff 	bl	b360 <bt_conn_init>
		if (err) {
    a162:	4604      	mov	r4, r0
    a164:	b908      	cbnz	r0, a16a <init_work+0x16>
	bt_finalize_init();
    a166:	f7ff fde7 	bl	9d38 <bt_finalize_init>
	if (ready_cb) {
    a16a:	4b04      	ldr	r3, [pc, #16]	; (a17c <init_work+0x28>)
    a16c:	681b      	ldr	r3, [r3, #0]
    a16e:	b11b      	cbz	r3, a178 <init_work+0x24>
		ready_cb(err);
    a170:	4620      	mov	r0, r4
}
    a172:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    a176:	4718      	bx	r3
}
    a178:	bd10      	pop	{r4, pc}
    a17a:	bf00      	nop
    a17c:	200021e0 	.word	0x200021e0

0000a180 <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
    a180:	b570      	push	{r4, r5, r6, lr}
    a182:	4605      	mov	r5, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    a184:	4828      	ldr	r0, [pc, #160]	; (a228 <bt_le_scan_start+0xa8>)
    a186:	460e      	mov	r6, r1
    a188:	f015 ff92 	bl	200b0 <atomic_get>

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    a18c:	0781      	lsls	r1, r0, #30
    a18e:	d53f      	bpl.n	a210 <bt_le_scan_start+0x90>
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
    a190:	782b      	ldrb	r3, [r5, #0]
    a192:	2b01      	cmp	r3, #1
    a194:	d83f      	bhi.n	a216 <bt_le_scan_start+0x96>
	if (param->options & ~(BT_LE_SCAN_OPT_FILTER_DUPLICATE |
    a196:	686b      	ldr	r3, [r5, #4]
    a198:	f033 030f 	bics.w	r3, r3, #15
    a19c:	d13b      	bne.n	a216 <bt_le_scan_start+0x96>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
    a19e:	8929      	ldrh	r1, [r5, #8]
    a1a0:	1f0b      	subs	r3, r1, #4
    a1a2:	b29b      	uxth	r3, r3
    a1a4:	f643 70fc 	movw	r0, #16380	; 0x3ffc
    a1a8:	4283      	cmp	r3, r0
    a1aa:	d834      	bhi.n	a216 <bt_le_scan_start+0x96>
	if (param->window < 0x0004 || param->window > 0x4000) {
    a1ac:	896a      	ldrh	r2, [r5, #10]
    a1ae:	1f13      	subs	r3, r2, #4
    a1b0:	b29b      	uxth	r3, r3
    a1b2:	4283      	cmp	r3, r0
    a1b4:	d82f      	bhi.n	a216 <bt_le_scan_start+0x96>
	if (param->window > param->interval) {
    a1b6:	4291      	cmp	r1, r2
    a1b8:	d32d      	bcc.n	a216 <bt_le_scan_start+0x96>
	if (param->type && !bt_le_scan_random_addr_check()) {
		return -EINVAL;
	}

	/* Return if active scan is already enabled */
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    a1ba:	481b      	ldr	r0, [pc, #108]	; (a228 <bt_le_scan_start+0xa8>)
    a1bc:	2106      	movs	r1, #6
    a1be:	f015 ffaf 	bl	20120 <atomic_test_and_set_bit>
    a1c2:	4603      	mov	r3, r0
    a1c4:	bb50      	cbnz	r0, a21c <bt_le_scan_start+0x9c>
    a1c6:	4818      	ldr	r0, [pc, #96]	; (a228 <bt_le_scan_start+0xa8>)
    a1c8:	f015 ff72 	bl	200b0 <atomic_get>
		return -EALREADY;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    a1cc:	0682      	lsls	r2, r0, #26
    a1ce:	d50b      	bpl.n	a1e8 <bt_le_scan_start+0x68>
	return set_le_scan_enable_legacy(enable);
    a1d0:	4618      	mov	r0, r3
    a1d2:	f7fe fe6f 	bl	8eb4 <set_le_scan_enable_legacy>
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
		if (err) {
    a1d6:	4604      	mov	r4, r0
    a1d8:	b130      	cbz	r0, a1e8 <bt_le_scan_start+0x68>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    a1da:	4813      	ldr	r0, [pc, #76]	; (a228 <bt_le_scan_start+0xa8>)
    a1dc:	f06f 0140 	mvn.w	r1, #64	; 0x40
    a1e0:	f015 ff6f 	bl	200c2 <atomic_and>
	}

	scan_dev_found_cb = cb;

	return 0;
}
    a1e4:	4620      	mov	r0, r4
    a1e6:	bd70      	pop	{r4, r5, r6, pc}
	atomic_set_bit_to(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP,
    a1e8:	686a      	ldr	r2, [r5, #4]
    a1ea:	480f      	ldr	r0, [pc, #60]	; (a228 <bt_le_scan_start+0xa8>)
    a1ec:	f002 0201 	and.w	r2, r2, #1
    a1f0:	2108      	movs	r1, #8
    a1f2:	f015 ff84 	bl	200fe <atomic_set_bit_to>
		if (param->timeout) {
    a1f6:	89ab      	ldrh	r3, [r5, #12]
    a1f8:	b99b      	cbnz	r3, a222 <bt_le_scan_start+0xa2>
		err = start_le_scan_legacy(param->type, param->interval,
    a1fa:	896a      	ldrh	r2, [r5, #10]
    a1fc:	8929      	ldrh	r1, [r5, #8]
    a1fe:	7828      	ldrb	r0, [r5, #0]
    a200:	f7fe fe94 	bl	8f2c <start_le_scan_legacy>
	if (err) {
    a204:	4604      	mov	r4, r0
    a206:	2800      	cmp	r0, #0
    a208:	d1e7      	bne.n	a1da <bt_le_scan_start+0x5a>
	scan_dev_found_cb = cb;
    a20a:	4b08      	ldr	r3, [pc, #32]	; (a22c <bt_le_scan_start+0xac>)
    a20c:	601e      	str	r6, [r3, #0]
	return 0;
    a20e:	e7e9      	b.n	a1e4 <bt_le_scan_start+0x64>
		return -EAGAIN;
    a210:	f06f 040a 	mvn.w	r4, #10
    a214:	e7e6      	b.n	a1e4 <bt_le_scan_start+0x64>
		return -EINVAL;
    a216:	f06f 0415 	mvn.w	r4, #21
    a21a:	e7e3      	b.n	a1e4 <bt_le_scan_start+0x64>
		return -EALREADY;
    a21c:	f06f 0444 	mvn.w	r4, #68	; 0x44
    a220:	e7e0      	b.n	a1e4 <bt_le_scan_start+0x64>
			return -ENOTSUP;
    a222:	f06f 0422 	mvn.w	r4, #34	; 0x22
    a226:	e7dd      	b.n	a1e4 <bt_le_scan_start+0x64>
    a228:	20000098 	.word	0x20000098
    a22c:	200021ec 	.word	0x200021ec

0000a230 <bt_le_scan_stop>:

int bt_le_scan_stop(void)
{
    a230:	b508      	push	{r3, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    a232:	4808      	ldr	r0, [pc, #32]	; (a254 <bt_le_scan_stop+0x24>)
    a234:	f06f 0140 	mvn.w	r1, #64	; 0x40
    a238:	f015 ff43 	bl	200c2 <atomic_and>
	/* Return if active scanning is already disabled */
	if (!atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    a23c:	0643      	lsls	r3, r0, #25
    a23e:	d506      	bpl.n	a24e <bt_le_scan_stop+0x1e>
		return -EALREADY;
	}

	scan_dev_found_cb = NULL;
    a240:	4b05      	ldr	r3, [pc, #20]	; (a258 <bt_le_scan_stop+0x28>)
    a242:	2000      	movs	r0, #0
    a244:	6018      	str	r0, [r3, #0]
		pending_id_keys_update();
#endif
	}

	return bt_le_scan_update(false);
}
    a246:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_le_scan_update(false);
    a24a:	f7ff b9a9 	b.w	95a0 <bt_le_scan_update>
}
    a24e:	f06f 0044 	mvn.w	r0, #68	; 0x44
    a252:	bd08      	pop	{r3, pc}
    a254:	20000098 	.word	0x20000098
    a258:	200021ec 	.word	0x200021ec

0000a25c <bt_buf_get_rx>:
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_HOST_CHAN_CLASSIF,
				    buf, NULL);
}

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
    a25c:	b538      	push	{r3, r4, r5, lr}
    a25e:	4605      	mov	r5, r0
		buf = net_buf_alloc(&hci_rx_pool, timeout);
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
    a260:	4805      	ldr	r0, [pc, #20]	; (a278 <bt_buf_get_rx+0x1c>)
    a262:	f018 f92d 	bl	224c0 <net_buf_alloc_fixed>
#endif

	if (buf) {
    a266:	4604      	mov	r4, r0
    a268:	b120      	cbz	r0, a274 <bt_buf_get_rx+0x18>
		net_buf_reserve(buf, BT_BUF_RESERVE);
    a26a:	2100      	movs	r1, #0
    a26c:	3008      	adds	r0, #8
    a26e:	f018 f94c 	bl	2250a <net_buf_simple_reserve>
	*(uint8_t *)net_buf_user_data(buf) = type;
    a272:	7525      	strb	r5, [r4, #20]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    a274:	4620      	mov	r0, r4
    a276:	bd38      	pop	{r3, r4, r5, pc}
    a278:	200009a0 	.word	0x200009a0

0000a27c <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
    a27c:	b570      	push	{r4, r5, r6, lr}
    a27e:	4602      	mov	r2, r0
    a280:	460b      	mov	r3, r1
	__asm__ volatile(
    a282:	f04f 0120 	mov.w	r1, #32
    a286:	f3ef 8511 	mrs	r5, BASEPRI
    a28a:	f381 8811 	msr	BASEPRI, r1
    a28e:	f3bf 8f6f 	isb	sy
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    a292:	480c      	ldr	r0, [pc, #48]	; (a2c4 <bt_buf_get_cmd_complete+0x48>)
	bt_dev.sent_cmd = NULL;
    a294:	2100      	movs	r1, #0
	buf = bt_dev.sent_cmd;
    a296:	f8d0 40e8 	ldr.w	r4, [r0, #232]	; 0xe8
	bt_dev.sent_cmd = NULL;
    a29a:	f8c0 10e8 	str.w	r1, [r0, #232]	; 0xe8
	__asm__ volatile(
    a29e:	f385 8811 	msr	BASEPRI, r5
    a2a2:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    a2a6:	b924      	cbnz	r4, a2b2 <bt_buf_get_cmd_complete+0x36>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    a2a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    a2ac:	2001      	movs	r0, #1
    a2ae:	f7ff bfd5 	b.w	a25c <bt_buf_get_rx>
    a2b2:	2301      	movs	r3, #1
		net_buf_reserve(buf, BT_BUF_RESERVE);
    a2b4:	f104 0008 	add.w	r0, r4, #8
    a2b8:	7523      	strb	r3, [r4, #20]
		buf->len = 0U;
    a2ba:	81a1      	strh	r1, [r4, #12]
		net_buf_reserve(buf, BT_BUF_RESERVE);
    a2bc:	f018 f925 	bl	2250a <net_buf_simple_reserve>
}
    a2c0:	4620      	mov	r0, r4
    a2c2:	bd70      	pop	{r4, r5, r6, pc}
    a2c4:	20000000 	.word	0x20000000

0000a2c8 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable, k_timeout_t timeout)
{
    a2c8:	b570      	push	{r4, r5, r6, lr}
    a2ca:	4604      	mov	r4, r0
	switch (evt) {
    a2cc:	2c0f      	cmp	r4, #15
{
    a2ce:	460d      	mov	r5, r1
    a2d0:	4610      	mov	r0, r2
    a2d2:	4619      	mov	r1, r3
	switch (evt) {
    a2d4:	d805      	bhi.n	a2e2 <bt_buf_get_evt+0x1a>
    a2d6:	2c0d      	cmp	r4, #13
    a2d8:	d912      	bls.n	a300 <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_DISCARDABLE_BUF_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
    a2da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
    a2de:	f7ff bfcd 	b.w	a27c <bt_buf_get_cmd_complete>
	switch (evt) {
    a2e2:	2c13      	cmp	r4, #19
    a2e4:	d10c      	bne.n	a300 <bt_buf_get_evt+0x38>
			buf = net_buf_alloc(&num_complete_pool, timeout);
    a2e6:	480b      	ldr	r0, [pc, #44]	; (a314 <bt_buf_get_evt+0x4c>)
			buf = net_buf_alloc(&discardable_pool, timeout);
    a2e8:	f018 f8ea 	bl	224c0 <net_buf_alloc_fixed>
			if (buf) {
    a2ec:	4604      	mov	r4, r0
    a2ee:	b128      	cbz	r0, a2fc <bt_buf_get_evt+0x34>
				net_buf_reserve(buf, BT_BUF_RESERVE);
    a2f0:	2100      	movs	r1, #0
    a2f2:	3008      	adds	r0, #8
    a2f4:	f018 f909 	bl	2250a <net_buf_simple_reserve>
    a2f8:	2301      	movs	r3, #1
    a2fa:	7523      	strb	r3, [r4, #20]
}
    a2fc:	4620      	mov	r0, r4
    a2fe:	bd70      	pop	{r4, r5, r6, pc}
			buf = net_buf_alloc(&discardable_pool, timeout);
    a300:	4602      	mov	r2, r0
    a302:	460b      	mov	r3, r1
		if (discardable) {
    a304:	b10d      	cbz	r5, a30a <bt_buf_get_evt+0x42>
			buf = net_buf_alloc(&discardable_pool, timeout);
    a306:	4804      	ldr	r0, [pc, #16]	; (a318 <bt_buf_get_evt+0x50>)
    a308:	e7ee      	b.n	a2e8 <bt_buf_get_evt+0x20>
}
    a30a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    a30e:	2001      	movs	r0, #1
    a310:	f7ff bfa4 	b.w	a25c <bt_buf_get_rx>
    a314:	200009c8 	.word	0x200009c8
    a318:	20000928 	.word	0x20000928

0000a31c <bt_pub_key_gen>:
}
#endif /* CONFIG_BT_BREDR */

#if defined(CONFIG_BT_ECC)
int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
    a31c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
    a31e:	4d21      	ldr	r5, [pc, #132]	; (a3a4 <bt_pub_key_gen+0x88>)
    a320:	f895 306a 	ldrb.w	r3, [r5, #106]	; 0x6a
    a324:	f003 0306 	and.w	r3, r3, #6
    a328:	2b06      	cmp	r3, #6
    a32a:	d00d      	beq.n	a348 <bt_pub_key_gen+0x2c>
    a32c:	4b1e      	ldr	r3, [pc, #120]	; (a3a8 <bt_pub_key_gen+0x8c>)
    a32e:	491f      	ldr	r1, [pc, #124]	; (a3ac <bt_pub_key_gen+0x90>)
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		BT_WARN("ECC HCI commands not available");
    a330:	481f      	ldr	r0, [pc, #124]	; (a3b0 <bt_pub_key_gen+0x94>)
    a332:	1ac9      	subs	r1, r1, r3
    a334:	08c9      	lsrs	r1, r1, #3
    a336:	0189      	lsls	r1, r1, #6
    a338:	f041 0102 	orr.w	r1, r1, #2
    a33c:	f014 f8c5 	bl	1e4ca <log_0>
		return -ENOTSUP;
    a340:	f06f 0422 	mvn.w	r4, #34	; 0x22
		pub_key_cb = NULL;
		return err;
	}

	return 0;
}
    a344:	4620      	mov	r0, r4
    a346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	new_cb->_next = pub_key_cb;
    a348:	4e1a      	ldr	r6, [pc, #104]	; (a3b4 <bt_pub_key_gen+0x98>)
    a34a:	6833      	ldr	r3, [r6, #0]
    a34c:	6043      	str	r3, [r0, #4]
	pub_key_cb = new_cb;
    a34e:	6030      	str	r0, [r6, #0]
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    a350:	2104      	movs	r1, #4
    a352:	f105 0098 	add.w	r0, r5, #152	; 0x98
    a356:	f015 fee3 	bl	20120 <atomic_test_and_set_bit>
    a35a:	4607      	mov	r7, r0
    a35c:	bb00      	cbnz	r0, a3a0 <bt_pub_key_gen+0x84>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    a35e:	f06f 0108 	mvn.w	r1, #8
    a362:	f105 0098 	add.w	r0, r5, #152	; 0x98
    a366:	f015 feac 	bl	200c2 <atomic_and>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
    a36a:	463a      	mov	r2, r7
    a36c:	4639      	mov	r1, r7
    a36e:	f242 0025 	movw	r0, #8229	; 0x2025
    a372:	f7fe fc8f 	bl	8c94 <bt_hci_cmd_send_sync>
	if (err) {
    a376:	4604      	mov	r4, r0
    a378:	2800      	cmp	r0, #0
    a37a:	d0e3      	beq.n	a344 <bt_pub_key_gen+0x28>
    a37c:	4b0a      	ldr	r3, [pc, #40]	; (a3a8 <bt_pub_key_gen+0x8c>)
    a37e:	490b      	ldr	r1, [pc, #44]	; (a3ac <bt_pub_key_gen+0x90>)
		BT_ERR("Sending LE P256 Public Key command failed");
    a380:	480d      	ldr	r0, [pc, #52]	; (a3b8 <bt_pub_key_gen+0x9c>)
    a382:	1ac9      	subs	r1, r1, r3
    a384:	08c9      	lsrs	r1, r1, #3
    a386:	0189      	lsls	r1, r1, #6
    a388:	f041 0101 	orr.w	r1, r1, #1
    a38c:	f014 f89d 	bl	1e4ca <log_0>
    a390:	f06f 0110 	mvn.w	r1, #16
    a394:	f105 0098 	add.w	r0, r5, #152	; 0x98
    a398:	f015 fe93 	bl	200c2 <atomic_and>
		pub_key_cb = NULL;
    a39c:	6037      	str	r7, [r6, #0]
		return err;
    a39e:	e7d1      	b.n	a344 <bt_pub_key_gen+0x28>
		return 0;
    a3a0:	2400      	movs	r4, #0
    a3a2:	e7cf      	b.n	a344 <bt_pub_key_gen+0x28>
    a3a4:	20000000 	.word	0x20000000
    a3a8:	000236e8 	.word	0x000236e8
    a3ac:	000237a8 	.word	0x000237a8
    a3b0:	00026054 	.word	0x00026054
    a3b4:	200021dc 	.word	0x200021dc
    a3b8:	00026073 	.word	0x00026073

0000a3bc <bt_pub_key_get>:

const uint8_t *bt_pub_key_get(void)
{
    a3bc:	b508      	push	{r3, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    a3be:	4804      	ldr	r0, [pc, #16]	; (a3d0 <bt_pub_key_get+0x14>)
    a3c0:	f015 fe76 	bl	200b0 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
    a3c4:	f010 0f08 	tst.w	r0, #8
		return pub_key;
	}

	return NULL;
}
    a3c8:	4802      	ldr	r0, [pc, #8]	; (a3d4 <bt_pub_key_get+0x18>)
    a3ca:	bf08      	it	eq
    a3cc:	2000      	moveq	r0, #0
    a3ce:	bd08      	pop	{r3, pc}
    a3d0:	20000098 	.word	0x20000098
    a3d4:	2000a80c 	.word	0x2000a80c

0000a3d8 <bt_dh_key_gen>:

int bt_dh_key_gen(const uint8_t remote_pk[64], bt_dh_key_cb_t cb)
{
    a3d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_cp_le_generate_dhkey *cp;
	struct net_buf *buf;
	int err;

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    a3da:	4d1a      	ldr	r5, [pc, #104]	; (a444 <bt_dh_key_gen+0x6c>)
    a3dc:	682b      	ldr	r3, [r5, #0]
{
    a3de:	4606      	mov	r6, r0
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    a3e0:	b113      	cbz	r3, a3e8 <bt_dh_key_gen+0x10>
		return -EBUSY;
    a3e2:	f06f 000f 	mvn.w	r0, #15
		dh_key_cb = NULL;
		return err;
	}

	return 0;
}
    a3e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a3e8:	4817      	ldr	r0, [pc, #92]	; (a448 <bt_dh_key_gen+0x70>)
    a3ea:	f015 fe61 	bl	200b0 <atomic_get>
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    a3ee:	06c2      	lsls	r2, r0, #27
    a3f0:	f3c0 1700 	ubfx	r7, r0, #4, #1
    a3f4:	d4f5      	bmi.n	a3e2 <bt_dh_key_gen+0xa>
    a3f6:	4814      	ldr	r0, [pc, #80]	; (a448 <bt_dh_key_gen+0x70>)
    a3f8:	f015 fe5a 	bl	200b0 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
    a3fc:	0703      	lsls	r3, r0, #28
    a3fe:	d51d      	bpl.n	a43c <bt_dh_key_gen+0x64>
	dh_key_cb = cb;
    a400:	6029      	str	r1, [r5, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
    a402:	f242 0026 	movw	r0, #8230	; 0x2026
    a406:	2140      	movs	r1, #64	; 0x40
    a408:	f7fe fae8 	bl	89dc <bt_hci_cmd_create>
	if (!buf) {
    a40c:	4604      	mov	r4, r0
    a40e:	b918      	cbnz	r0, a418 <bt_dh_key_gen+0x40>
		dh_key_cb = NULL;
    a410:	6028      	str	r0, [r5, #0]
		return -ENOBUFS;
    a412:	f06f 0036 	mvn.w	r0, #54	; 0x36
    a416:	e7e6      	b.n	a3e6 <bt_dh_key_gen+0xe>
	cp = net_buf_add(buf, sizeof(*cp));
    a418:	2140      	movs	r1, #64	; 0x40
    a41a:	3008      	adds	r0, #8
    a41c:	f018 f8b8 	bl	22590 <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
    a420:	2240      	movs	r2, #64	; 0x40
    a422:	4631      	mov	r1, r6
    a424:	f015 fd23 	bl	1fe6e <memcpy>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
    a428:	463a      	mov	r2, r7
    a42a:	4621      	mov	r1, r4
    a42c:	f242 0026 	movw	r0, #8230	; 0x2026
    a430:	f7fe fc30 	bl	8c94 <bt_hci_cmd_send_sync>
	if (err) {
    a434:	2800      	cmp	r0, #0
    a436:	d0d6      	beq.n	a3e6 <bt_dh_key_gen+0xe>
		dh_key_cb = NULL;
    a438:	602f      	str	r7, [r5, #0]
		return err;
    a43a:	e7d4      	b.n	a3e6 <bt_dh_key_gen+0xe>
		return -EADDRNOTAVAIL;
    a43c:	f06f 0030 	mvn.w	r0, #48	; 0x30
    a440:	e7d1      	b.n	a3e6 <bt_dh_key_gen+0xe>
    a442:	bf00      	nop
    a444:	200021d8 	.word	0x200021d8
    a448:	20000098 	.word	0x20000098

0000a44c <tx_free>:
	return bt_l2cap_update_conn_param(conn, param);
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
    a44c:	2300      	movs	r3, #0
	tx->user_data = NULL;
    a44e:	e9c0 3301 	strd	r3, r3, [r0, #4]
{
    a452:	4601      	mov	r1, r0
	tx->pending_no_cb = 0U;
    a454:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
    a456:	4801      	ldr	r0, [pc, #4]	; (a45c <tx_free+0x10>)
    a458:	f018 bc54 	b.w	22d04 <k_queue_append>
    a45c:	200008a8 	.word	0x200008a8

0000a460 <notify_connected>:
{
    a460:	b538      	push	{r3, r4, r5, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
    a462:	4b09      	ldr	r3, [pc, #36]	; (a488 <notify_connected+0x28>)
    a464:	681d      	ldr	r5, [r3, #0]
{
    a466:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    a468:	7b21      	ldrb	r1, [r4, #12]
    a46a:	b92d      	cbnz	r5, a478 <notify_connected+0x18>
	if (!conn->err) {
    a46c:	b951      	cbnz	r1, a484 <notify_connected+0x24>
		bt_gatt_connected(conn);
    a46e:	4620      	mov	r0, r4
}
    a470:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_gatt_connected(conn);
    a474:	f004 b8a8 	b.w	e5c8 <bt_gatt_connected>
		if (cb->connected) {
    a478:	682b      	ldr	r3, [r5, #0]
    a47a:	b10b      	cbz	r3, a480 <notify_connected+0x20>
			cb->connected(conn, conn->err);
    a47c:	4620      	mov	r0, r4
    a47e:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    a480:	69ad      	ldr	r5, [r5, #24]
    a482:	e7f1      	b.n	a468 <notify_connected+0x8>
}
    a484:	bd38      	pop	{r3, r4, r5, pc}
    a486:	bf00      	nop
    a488:	200021f4 	.word	0x200021f4

0000a48c <send_frag>:
	return 0;
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, uint8_t flags,
		      bool always_consume)
{
    a48c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn_tx *tx = tx_data(buf)->tx;
    a490:	694d      	ldr	r5, [r1, #20]
{
    a492:	4604      	mov	r4, r0
    a494:	460e      	mov	r6, r1
    a496:	4691      	mov	r9, r2
    a498:	461f      	mov	r7, r3
	return z_impl_k_sem_take(sem, timeout);
    a49a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a49e:	4843      	ldr	r0, [pc, #268]	; (a5ac <send_frag+0x120>)
    a4a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    a4a4:	f013 f98a 	bl	1d7bc <z_impl_k_sem_take>

	/* Wait until the controller can accept ACL packets */
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
    a4a8:	7b63      	ldrb	r3, [r4, #13]
    a4aa:	2b06      	cmp	r3, #6
    a4ac:	d14e      	bne.n	a54c <send_frag+0xc0>
		goto fail;
	}

	hdr = net_buf_push(buf, sizeof(*hdr));
    a4ae:	2104      	movs	r1, #4
    a4b0:	f106 0008 	add.w	r0, r6, #8
    a4b4:	f018 f88d 	bl	225d2 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    a4b8:	8822      	ldrh	r2, [r4, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    a4ba:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    a4bc:	ea42 3209 	orr.w	r2, r2, r9, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    a4c0:	3b04      	subs	r3, #4
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    a4c2:	8002      	strh	r2, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    a4c4:	8043      	strh	r3, [r0, #2]
	__asm__ volatile(
    a4c6:	f04f 0320 	mov.w	r3, #32
    a4ca:	f3ef 8211 	mrs	r2, BASEPRI
    a4ce:	f383 8811 	msr	BASEPRI, r3
    a4d2:	f3bf 8f6f 	isb	sy

	/* Add to pending, it must be done before bt_buf_set_type */
	key = irq_lock();
	if (tx) {
    a4d6:	2d00      	cmp	r5, #0
    a4d8:	d04a      	beq.n	a570 <send_frag+0xe4>
	parent->next = child;
    a4da:	2300      	movs	r3, #0
    a4dc:	602b      	str	r3, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
    a4de:	69a3      	ldr	r3, [r4, #24]
    a4e0:	2b00      	cmp	r3, #0
    a4e2:	d142      	bne.n	a56a <send_frag+0xde>
	list->head = node;
    a4e4:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
    a4e8:	f382 8811 	msr	BASEPRI, r2
    a4ec:	f3bf 8f6f 	isb	sy
    a4f0:	2302      	movs	r3, #2
    a4f2:	7533      	strb	r3, [r6, #20]
	}
	irq_unlock(key);

	bt_buf_set_type(buf, BT_BUF_ACL_OUT);

	err = bt_send(buf);
    a4f4:	4630      	mov	r0, r6
    a4f6:	f015 ff92 	bl	2041e <bt_send>
	if (err) {
    a4fa:	4601      	mov	r1, r0
    a4fc:	2800      	cmp	r0, #0
    a4fe:	d053      	beq.n	a5a8 <send_frag+0x11c>
    a500:	4b2b      	ldr	r3, [pc, #172]	; (a5b0 <send_frag+0x124>)
    a502:	4a2c      	ldr	r2, [pc, #176]	; (a5b4 <send_frag+0x128>)
		BT_ERR("Unable to send to driver (err %d)", err);
    a504:	482c      	ldr	r0, [pc, #176]	; (a5b8 <send_frag+0x12c>)
    a506:	1ad2      	subs	r2, r2, r3
    a508:	08d2      	lsrs	r2, r2, #3
    a50a:	0192      	lsls	r2, r2, #6
    a50c:	f042 0201 	orr.w	r2, r2, #1
    a510:	f013 ffe8 	bl	1e4e4 <log_1>
	__asm__ volatile(
    a514:	f04f 0320 	mov.w	r3, #32
    a518:	f3ef 8111 	mrs	r1, BASEPRI
    a51c:	f383 8811 	msr	BASEPRI, r3
    a520:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		/* Roll back the pending TX info */
		if (tx) {
    a524:	2d00      	cmp	r5, #0
    a526:	d039      	beq.n	a59c <send_frag+0x110>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    a528:	6963      	ldr	r3, [r4, #20]
    a52a:	2200      	movs	r2, #0
    a52c:	b153      	cbz	r3, a544 <send_frag+0xb8>
    a52e:	429d      	cmp	r5, r3
    a530:	d131      	bne.n	a596 <send_frag+0x10a>
Z_GENLIST_REMOVE(slist, snode)
    a532:	682b      	ldr	r3, [r5, #0]
    a534:	bb4a      	cbnz	r2, a58a <send_frag+0xfe>
    a536:	69a2      	ldr	r2, [r4, #24]
	list->head = node;
    a538:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
    a53a:	4295      	cmp	r5, r2
    a53c:	d100      	bne.n	a540 <send_frag+0xb4>
	list->tail = node;
    a53e:	61a3      	str	r3, [r4, #24]
	parent->next = child;
    a540:	2300      	movs	r3, #0
    a542:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
    a544:	f381 8811 	msr	BASEPRI, r1
    a548:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    a54c:	4817      	ldr	r0, [pc, #92]	; (a5ac <send_frag+0x120>)
    a54e:	f013 f90f 	bl	1d770 <z_impl_k_sem_give>

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (tx) {
    a552:	b115      	cbz	r5, a55a <send_frag+0xce>
		tx_free(tx);
    a554:	4628      	mov	r0, r5
    a556:	f7ff ff79 	bl	a44c <tx_free>
	}

	if (always_consume) {
    a55a:	b11f      	cbz	r7, a564 <send_frag+0xd8>
		net_buf_unref(buf);
    a55c:	4630      	mov	r0, r6
    a55e:	f011 fabb 	bl	1bad8 <net_buf_unref>
	}
	return false;
    a562:	2700      	movs	r7, #0
}
    a564:	4638      	mov	r0, r7
    a566:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    a56a:	601d      	str	r5, [r3, #0]
	list->tail = node;
    a56c:	61a5      	str	r5, [r4, #24]
}
    a56e:	e7bb      	b.n	a4e8 <send_frag+0x5c>
		tail_tx = (void *)sys_slist_peek_tail(&conn->tx_pending);
    a570:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
    a572:	b133      	cbz	r3, a582 <send_frag+0xf6>
			pending_no_cb = &tail_tx->pending_no_cb;
    a574:	f103 080c 	add.w	r8, r3, #12
    a578:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
    a57a:	3301      	adds	r3, #1
    a57c:	f8c8 3000 	str.w	r3, [r8]
    a580:	e7b2      	b.n	a4e8 <send_frag+0x5c>
			pending_no_cb = &conn->pending_no_cb;
    a582:	69e3      	ldr	r3, [r4, #28]
    a584:	f104 081c 	add.w	r8, r4, #28
    a588:	e7f7      	b.n	a57a <send_frag+0xee>
	parent->next = child;
    a58a:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    a58c:	69a3      	ldr	r3, [r4, #24]
    a58e:	429d      	cmp	r5, r3
	list->tail = node;
    a590:	bf08      	it	eq
    a592:	61a2      	streq	r2, [r4, #24]
}
    a594:	e7d4      	b.n	a540 <send_frag+0xb4>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    a596:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    a598:	681b      	ldr	r3, [r3, #0]
    a59a:	e7c7      	b.n	a52c <send_frag+0xa0>
			(*pending_no_cb)--;
    a59c:	f8d8 3000 	ldr.w	r3, [r8]
    a5a0:	3b01      	subs	r3, #1
    a5a2:	f8c8 3000 	str.w	r3, [r8]
    a5a6:	e7cd      	b.n	a544 <send_frag+0xb8>
	return true;
    a5a8:	2701      	movs	r7, #1
    a5aa:	e7db      	b.n	a564 <send_frag+0xd8>
    a5ac:	200000b4 	.word	0x200000b4
    a5b0:	000236e8 	.word	0x000236e8
    a5b4:	000236f0 	.word	0x000236f0
    a5b8:	000259ec 	.word	0x000259ec

0000a5bc <conn_update_timeout>:
{
    a5bc:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
    a5be:	f810 3c4b 	ldrb.w	r3, [r0, #-75]
{
    a5c2:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED) {
    a5c4:	b9a3      	cbnz	r3, a5f0 <conn_update_timeout+0x34>
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, update_work);
    a5c6:	f1a0 0658 	sub.w	r6, r0, #88	; 0x58
		bt_l2cap_disconnected(conn);
    a5ca:	4630      	mov	r0, r6
    a5cc:	f016 f9bc 	bl	20948 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
    a5d0:	4b14      	ldr	r3, [pc, #80]	; (a624 <conn_update_timeout+0x68>)
    a5d2:	681d      	ldr	r5, [r3, #0]
    a5d4:	b925      	cbnz	r5, a5e0 <conn_update_timeout+0x24>
	return conn;
}

void bt_conn_unref(struct bt_conn *conn)
{
	atomic_val_t old = atomic_dec(&conn->ref);
    a5d6:	1f20      	subs	r0, r4, #4
}
    a5d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	atomic_val_t old = atomic_dec(&conn->ref);
    a5dc:	f015 bf3b 	b.w	20456 <atomic_dec>
		if (cb->disconnected) {
    a5e0:	686b      	ldr	r3, [r5, #4]
    a5e2:	b11b      	cbz	r3, a5ec <conn_update_timeout+0x30>
			cb->disconnected(conn, conn->err);
    a5e4:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
    a5e8:	4630      	mov	r0, r6
    a5ea:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    a5ec:	69ad      	ldr	r5, [r5, #24]
    a5ee:	e7f1      	b.n	a5d4 <conn_update_timeout+0x18>
	if (conn->type != BT_CONN_TYPE_LE) {
    a5f0:	f810 3c56 	ldrb.w	r3, [r0, #-86]
    a5f4:	2b01      	cmp	r3, #1
    a5f6:	d114      	bne.n	a622 <conn_update_timeout+0x66>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    a5f8:	f810 3c55 	ldrb.w	r3, [r0, #-85]
    a5fc:	b91b      	cbnz	r3, a606 <conn_update_timeout+0x4a>
}
    a5fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_le_create_conn_cancel();
    a602:	f7fe bd4b 	b.w	909c <bt_le_create_conn_cancel>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    a606:	f1a0 0454 	sub.w	r4, r0, #84	; 0x54
    a60a:	f3bf 8f5b 	dmb	ish
    a60e:	e854 3f00 	ldrex	r3, [r4]
    a612:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    a616:	e844 3200 	strex	r2, r3, [r4]
    a61a:	2a00      	cmp	r2, #0
    a61c:	d1f7      	bne.n	a60e <conn_update_timeout+0x52>
    a61e:	f3bf 8f5b 	dmb	ish
}
    a622:	bd70      	pop	{r4, r5, r6, pc}
    a624:	200021f4 	.word	0x200021f4

0000a628 <conn_cleanup>:
{
    a628:	b570      	push	{r4, r5, r6, lr}
    a62a:	4604      	mov	r4, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
    a62c:	f100 0634 	add.w	r6, r0, #52	; 0x34
    a630:	2200      	movs	r2, #0
    a632:	2300      	movs	r3, #0
    a634:	4630      	mov	r0, r6
    a636:	f017 ff48 	bl	224ca <net_buf_get>
    a63a:	4605      	mov	r5, r0
    a63c:	b958      	cbnz	r0, a656 <conn_cleanup+0x2e>
	bt_conn_reset_rx_state(conn);
    a63e:	4620      	mov	r0, r4
    a640:	f015 fefe 	bl	20440 <bt_conn_reset_rx_state>
 * @retval -EADDRINUSE Work item is pending on a different workqueue.
 */
static inline int k_delayed_work_submit(struct k_delayed_work *work,
					k_timeout_t delay)
{
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    a644:	f104 0158 	add.w	r1, r4, #88	; 0x58
    a648:	4807      	ldr	r0, [pc, #28]	; (a668 <conn_cleanup+0x40>)
}
    a64a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a64e:	2200      	movs	r2, #0
    a650:	2300      	movs	r3, #0
    a652:	f013 b9cb 	b.w	1d9ec <k_delayed_work_submit_to_queue>
		if (tx_data(buf)->tx) {
    a656:	6968      	ldr	r0, [r5, #20]
    a658:	b108      	cbz	r0, a65e <conn_cleanup+0x36>
			tx_free(tx_data(buf)->tx);
    a65a:	f7ff fef7 	bl	a44c <tx_free>
		net_buf_unref(buf);
    a65e:	4628      	mov	r0, r5
    a660:	f011 fa3a 	bl	1bad8 <net_buf_unref>
    a664:	e7e4      	b.n	a630 <conn_cleanup+0x8>
    a666:	bf00      	nop
    a668:	20001c50 	.word	0x20001c50

0000a66c <bt_conn_get_pkts>:
}
    a66c:	4800      	ldr	r0, [pc, #0]	; (a670 <bt_conn_get_pkts+0x4>)
    a66e:	4770      	bx	lr
    a670:	200000b4 	.word	0x200000b4

0000a674 <notify_le_param_updated>:
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    a674:	1d03      	adds	r3, r0, #4
{
    a676:	b570      	push	{r4, r5, r6, lr}
    a678:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    a67a:	4618      	mov	r0, r3
    a67c:	f015 feda 	bl	20434 <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    a680:	0582      	lsls	r2, r0, #22
    a682:	d519      	bpl.n	a6b8 <notify_le_param_updated+0x44>
	    conn->le.interval >= conn->le.interval_min &&
    a684:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    a688:	f8b4 10a0 	ldrh.w	r1, [r4, #160]	; 0xa0
    a68c:	4291      	cmp	r1, r2
    a68e:	d813      	bhi.n	a6b8 <notify_le_param_updated+0x44>
	    conn->le.interval >= conn->le.interval_min &&
    a690:	f8b4 10a2 	ldrh.w	r1, [r4, #162]	; 0xa2
    a694:	4291      	cmp	r1, r2
    a696:	d30f      	bcc.n	a6b8 <notify_le_param_updated+0x44>
	    conn->le.latency == conn->le.pending_latency &&
    a698:	e9d4 1229 	ldrd	r1, r2, [r4, #164]	; 0xa4
    a69c:	4291      	cmp	r1, r2
    a69e:	d10b      	bne.n	a6b8 <notify_le_param_updated+0x44>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    a6a0:	f3bf 8f5b 	dmb	ish
    a6a4:	e853 2f00 	ldrex	r2, [r3]
    a6a8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    a6ac:	e843 2100 	strex	r1, r2, [r3]
    a6b0:	2900      	cmp	r1, #0
    a6b2:	d1f7      	bne.n	a6a4 <notify_le_param_updated+0x30>
    a6b4:	f3bf 8f5b 	dmb	ish
	for (cb = callback_list; cb; cb = cb->_next) {
    a6b8:	4b07      	ldr	r3, [pc, #28]	; (a6d8 <notify_le_param_updated+0x64>)
    a6ba:	681d      	ldr	r5, [r3, #0]
    a6bc:	b905      	cbnz	r5, a6c0 <notify_le_param_updated+0x4c>
}
    a6be:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
    a6c0:	68ee      	ldr	r6, [r5, #12]
    a6c2:	b13e      	cbz	r6, a6d4 <notify_le_param_updated+0x60>
			cb->le_param_updated(conn, conn->le.interval,
    a6c4:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    a6c8:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
    a6cc:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
    a6d0:	4620      	mov	r0, r4
    a6d2:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    a6d4:	69ad      	ldr	r5, [r5, #24]
    a6d6:	e7f1      	b.n	a6bc <notify_le_param_updated+0x48>
    a6d8:	200021f4 	.word	0x200021f4

0000a6dc <le_param_req>:
{
    a6dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a6de:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
    a6e0:	4608      	mov	r0, r1
{
    a6e2:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    a6e4:	f015 fe22 	bl	2032c <bt_le_conn_params_valid>
    a6e8:	4604      	mov	r4, r0
    a6ea:	b910      	cbnz	r0, a6f2 <le_param_req+0x16>
		return false;
    a6ec:	2400      	movs	r4, #0
}
    a6ee:	4620      	mov	r0, r4
    a6f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    a6f2:	4b09      	ldr	r3, [pc, #36]	; (a718 <le_param_req+0x3c>)
    a6f4:	681e      	ldr	r6, [r3, #0]
    a6f6:	2e00      	cmp	r6, #0
    a6f8:	d0f9      	beq.n	a6ee <le_param_req+0x12>
		if (!cb->le_param_req) {
    a6fa:	68b3      	ldr	r3, [r6, #8]
    a6fc:	b90b      	cbnz	r3, a702 <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
    a6fe:	69b6      	ldr	r6, [r6, #24]
    a700:	e7f9      	b.n	a6f6 <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
    a702:	4629      	mov	r1, r5
    a704:	4638      	mov	r0, r7
    a706:	4798      	blx	r3
    a708:	2800      	cmp	r0, #0
    a70a:	d0ef      	beq.n	a6ec <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
    a70c:	4628      	mov	r0, r5
    a70e:	f015 fe0d 	bl	2032c <bt_le_conn_params_valid>
    a712:	2800      	cmp	r0, #0
    a714:	d1f3      	bne.n	a6fe <le_param_req+0x22>
    a716:	e7e9      	b.n	a6ec <le_param_req+0x10>
    a718:	200021f4 	.word	0x200021f4

0000a71c <bt_conn_identity_resolved>:
{
    a71c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->role == BT_HCI_ROLE_MASTER) {
    a71e:	78c3      	ldrb	r3, [r0, #3]
{
    a720:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_MASTER) {
    a722:	b93b      	cbnz	r3, a734 <bt_conn_identity_resolved+0x18>
		rpa = &conn->le.resp_addr;
    a724:	f100 0696 	add.w	r6, r0, #150	; 0x96
	for (cb = callback_list; cb; cb = cb->_next) {
    a728:	4b08      	ldr	r3, [pc, #32]	; (a74c <bt_conn_identity_resolved+0x30>)
    a72a:	681d      	ldr	r5, [r3, #0]
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    a72c:	f104 0788 	add.w	r7, r4, #136	; 0x88
	for (cb = callback_list; cb; cb = cb->_next) {
    a730:	b91d      	cbnz	r5, a73a <bt_conn_identity_resolved+0x1e>
}
    a732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rpa = &conn->le.init_addr;
    a734:	f100 068f 	add.w	r6, r0, #143	; 0x8f
    a738:	e7f6      	b.n	a728 <bt_conn_identity_resolved+0xc>
		if (cb->identity_resolved) {
    a73a:	692b      	ldr	r3, [r5, #16]
    a73c:	b11b      	cbz	r3, a746 <bt_conn_identity_resolved+0x2a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    a73e:	463a      	mov	r2, r7
    a740:	4631      	mov	r1, r6
    a742:	4620      	mov	r0, r4
    a744:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    a746:	69ad      	ldr	r5, [r5, #24]
    a748:	e7f2      	b.n	a730 <bt_conn_identity_resolved+0x14>
    a74a:	bf00      	nop
    a74c:	200021f4 	.word	0x200021f4

0000a750 <bt_conn_security_changed>:
	for (cb = callback_list; cb; cb = cb->_next) {
    a750:	4b07      	ldr	r3, [pc, #28]	; (a770 <bt_conn_security_changed+0x20>)
{
    a752:	b570      	push	{r4, r5, r6, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
    a754:	681c      	ldr	r4, [r3, #0]
{
    a756:	4605      	mov	r5, r0
    a758:	460e      	mov	r6, r1
	for (cb = callback_list; cb; cb = cb->_next) {
    a75a:	b904      	cbnz	r4, a75e <bt_conn_security_changed+0xe>
}
    a75c:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->security_changed) {
    a75e:	6963      	ldr	r3, [r4, #20]
    a760:	b11b      	cbz	r3, a76a <bt_conn_security_changed+0x1a>
			cb->security_changed(conn, conn->sec_level, err);
    a762:	7a69      	ldrb	r1, [r5, #9]
    a764:	4632      	mov	r2, r6
    a766:	4628      	mov	r0, r5
    a768:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    a76a:	69a4      	ldr	r4, [r4, #24]
    a76c:	e7f5      	b.n	a75a <bt_conn_security_changed+0xa>
    a76e:	bf00      	nop
    a770:	200021f4 	.word	0x200021f4

0000a774 <bt_conn_cb_register>:
	cb->_next = callback_list;
    a774:	4b02      	ldr	r3, [pc, #8]	; (a780 <bt_conn_cb_register+0xc>)
    a776:	681a      	ldr	r2, [r3, #0]
    a778:	6182      	str	r2, [r0, #24]
	callback_list = cb;
    a77a:	6018      	str	r0, [r3, #0]
}
    a77c:	4770      	bx	lr
    a77e:	bf00      	nop
    a780:	200021f4 	.word	0x200021f4

0000a784 <bt_conn_recv>:
{
    a784:	b570      	push	{r4, r5, r6, lr}
    a786:	4616      	mov	r6, r2
    a788:	4604      	mov	r4, r0
    a78a:	460d      	mov	r5, r1
	tx_notify(conn);
    a78c:	f015 fe7d 	bl	2048a <tx_notify>
	switch (flags) {
    a790:	2e01      	cmp	r6, #1
    a792:	d01b      	beq.n	a7cc <bt_conn_recv+0x48>
    a794:	2e02      	cmp	r6, #2
    a796:	d16c      	bne.n	a872 <bt_conn_recv+0xee>
		len = sys_le16_to_cpu(hdr->len);
    a798:	68ab      	ldr	r3, [r5, #8]
    a79a:	881e      	ldrh	r6, [r3, #0]
		if (conn->rx_len) {
    a79c:	89e3      	ldrh	r3, [r4, #14]
    a79e:	b163      	cbz	r3, a7ba <bt_conn_recv+0x36>
    a7a0:	4b3d      	ldr	r3, [pc, #244]	; (a898 <bt_conn_recv+0x114>)
    a7a2:	493e      	ldr	r1, [pc, #248]	; (a89c <bt_conn_recv+0x118>)
			BT_ERR("Unexpected first L2CAP frame");
    a7a4:	483e      	ldr	r0, [pc, #248]	; (a8a0 <bt_conn_recv+0x11c>)
    a7a6:	1ac9      	subs	r1, r1, r3
    a7a8:	08c9      	lsrs	r1, r1, #3
    a7aa:	0189      	lsls	r1, r1, #6
    a7ac:	f041 0101 	orr.w	r1, r1, #1
    a7b0:	f013 fe8b 	bl	1e4ca <log_0>
			bt_conn_reset_rx_state(conn);
    a7b4:	4620      	mov	r0, r4
    a7b6:	f015 fe43 	bl	20440 <bt_conn_reset_rx_state>
		conn->rx_len = (sizeof(*hdr) + len) - buf->len;
    a7ba:	89ab      	ldrh	r3, [r5, #12]
    a7bc:	1af3      	subs	r3, r6, r3
    a7be:	3304      	adds	r3, #4
    a7c0:	b29b      	uxth	r3, r3
    a7c2:	81e3      	strh	r3, [r4, #14]
		if (conn->rx_len) {
    a7c4:	2b00      	cmp	r3, #0
    a7c6:	d043      	beq.n	a850 <bt_conn_recv+0xcc>
			conn->rx = buf;
    a7c8:	6125      	str	r5, [r4, #16]
}
    a7ca:	bd70      	pop	{r4, r5, r6, pc}
		if (!conn->rx_len) {
    a7cc:	89e3      	ldrh	r3, [r4, #14]
    a7ce:	b98b      	cbnz	r3, a7f4 <bt_conn_recv+0x70>
    a7d0:	4932      	ldr	r1, [pc, #200]	; (a89c <bt_conn_recv+0x118>)
    a7d2:	4b31      	ldr	r3, [pc, #196]	; (a898 <bt_conn_recv+0x114>)
			BT_ERR("Unexpected L2CAP continuation");
    a7d4:	4833      	ldr	r0, [pc, #204]	; (a8a4 <bt_conn_recv+0x120>)
    a7d6:	1ac9      	subs	r1, r1, r3
    a7d8:	08c9      	lsrs	r1, r1, #3
    a7da:	0189      	lsls	r1, r1, #6
    a7dc:	f041 0101 	orr.w	r1, r1, #1
			BT_ERR("L2CAP data overflow");
    a7e0:	f013 fe73 	bl	1e4ca <log_0>
			bt_conn_reset_rx_state(conn);
    a7e4:	4620      	mov	r0, r4
    a7e6:	f015 fe2b 	bl	20440 <bt_conn_reset_rx_state>
			net_buf_unref(buf);
    a7ea:	4628      	mov	r0, r5
}
    a7ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
    a7f0:	f011 b972 	b.w	1bad8 <net_buf_unref>
		if (buf->len > conn->rx_len) {
    a7f4:	89ae      	ldrh	r6, [r5, #12]
    a7f6:	42b3      	cmp	r3, r6
    a7f8:	d208      	bcs.n	a80c <bt_conn_recv+0x88>
    a7fa:	4928      	ldr	r1, [pc, #160]	; (a89c <bt_conn_recv+0x118>)
    a7fc:	4b26      	ldr	r3, [pc, #152]	; (a898 <bt_conn_recv+0x114>)
			BT_ERR("L2CAP data overflow");
    a7fe:	482a      	ldr	r0, [pc, #168]	; (a8a8 <bt_conn_recv+0x124>)
    a800:	1ac9      	subs	r1, r1, r3
    a802:	08c9      	lsrs	r1, r1, #3
    a804:	0189      	lsls	r1, r1, #6
    a806:	f041 0101 	orr.w	r1, r1, #1
    a80a:	e7e9      	b.n	a7e0 <bt_conn_recv+0x5c>
		if (buf->len > net_buf_tailroom(conn->rx)) {
    a80c:	6920      	ldr	r0, [r4, #16]
    a80e:	3008      	adds	r0, #8
    a810:	f017 ff17 	bl	22642 <net_buf_simple_tailroom>
    a814:	4286      	cmp	r6, r0
    a816:	d908      	bls.n	a82a <bt_conn_recv+0xa6>
    a818:	4920      	ldr	r1, [pc, #128]	; (a89c <bt_conn_recv+0x118>)
    a81a:	4b1f      	ldr	r3, [pc, #124]	; (a898 <bt_conn_recv+0x114>)
			BT_ERR("Not enough buffer space for L2CAP data");
    a81c:	4823      	ldr	r0, [pc, #140]	; (a8ac <bt_conn_recv+0x128>)
    a81e:	1ac9      	subs	r1, r1, r3
    a820:	08c9      	lsrs	r1, r1, #3
    a822:	0189      	lsls	r1, r1, #6
    a824:	f041 0101 	orr.w	r1, r1, #1
    a828:	e7da      	b.n	a7e0 <bt_conn_recv+0x5c>
		net_buf_add_mem(conn->rx, buf->data, buf->len);
    a82a:	6920      	ldr	r0, [r4, #16]
    a82c:	89aa      	ldrh	r2, [r5, #12]
    a82e:	68a9      	ldr	r1, [r5, #8]
    a830:	3008      	adds	r0, #8
    a832:	f017 feb3 	bl	2259c <net_buf_simple_add_mem>
		conn->rx_len -= buf->len;
    a836:	89e3      	ldrh	r3, [r4, #14]
    a838:	89aa      	ldrh	r2, [r5, #12]
    a83a:	1a9b      	subs	r3, r3, r2
    a83c:	81e3      	strh	r3, [r4, #14]
		net_buf_unref(buf);
    a83e:	4628      	mov	r0, r5
    a840:	f011 f94a 	bl	1bad8 <net_buf_unref>
		if (conn->rx_len) {
    a844:	89e3      	ldrh	r3, [r4, #14]
    a846:	2b00      	cmp	r3, #0
    a848:	d1bf      	bne.n	a7ca <bt_conn_recv+0x46>
		buf = conn->rx;
    a84a:	6925      	ldr	r5, [r4, #16]
		conn->rx_len = 0U;
    a84c:	81e3      	strh	r3, [r4, #14]
		conn->rx = NULL;
    a84e:	6123      	str	r3, [r4, #16]
	len = sys_le16_to_cpu(hdr->len);
    a850:	68ab      	ldr	r3, [r5, #8]
	if (sizeof(*hdr) + len != buf->len) {
    a852:	89aa      	ldrh	r2, [r5, #12]
    a854:	8819      	ldrh	r1, [r3, #0]
    a856:	1d0b      	adds	r3, r1, #4
    a858:	4293      	cmp	r3, r2
    a85a:	d016      	beq.n	a88a <bt_conn_recv+0x106>
    a85c:	480e      	ldr	r0, [pc, #56]	; (a898 <bt_conn_recv+0x114>)
    a85e:	4b0f      	ldr	r3, [pc, #60]	; (a89c <bt_conn_recv+0x118>)
    a860:	1a1b      	subs	r3, r3, r0
    a862:	08db      	lsrs	r3, r3, #3
		BT_ERR("ACL len mismatch (%u != %u)", len, buf->len);
    a864:	019b      	lsls	r3, r3, #6
    a866:	4812      	ldr	r0, [pc, #72]	; (a8b0 <bt_conn_recv+0x12c>)
    a868:	f043 0301 	orr.w	r3, r3, #1
    a86c:	f013 fe4e 	bl	1e50c <log_2>
		net_buf_unref(buf);
    a870:	e7bb      	b.n	a7ea <bt_conn_recv+0x66>
    a872:	4a09      	ldr	r2, [pc, #36]	; (a898 <bt_conn_recv+0x114>)
    a874:	4b09      	ldr	r3, [pc, #36]	; (a89c <bt_conn_recv+0x118>)
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
    a876:	480f      	ldr	r0, [pc, #60]	; (a8b4 <bt_conn_recv+0x130>)
    a878:	1a9b      	subs	r3, r3, r2
    a87a:	08db      	lsrs	r3, r3, #3
    a87c:	019b      	lsls	r3, r3, #6
    a87e:	f043 0201 	orr.w	r2, r3, #1
    a882:	4631      	mov	r1, r6
    a884:	f013 fe2e 	bl	1e4e4 <log_1>
		bt_conn_reset_rx_state(conn);
    a888:	e7ac      	b.n	a7e4 <bt_conn_recv+0x60>
	bt_l2cap_recv(conn, buf);
    a88a:	4629      	mov	r1, r5
    a88c:	4620      	mov	r0, r4
}
    a88e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf);
    a892:	f001 ba19 	b.w	bcc8 <bt_l2cap_recv>
    a896:	bf00      	nop
    a898:	000236e8 	.word	0x000236e8
    a89c:	000236f0 	.word	0x000236f0
    a8a0:	000260cc 	.word	0x000260cc
    a8a4:	000260e9 	.word	0x000260e9
    a8a8:	00026107 	.word	0x00026107
    a8ac:	0002611b 	.word	0x0002611b
    a8b0:	00026160 	.word	0x00026160
    a8b4:	00026142 	.word	0x00026142

0000a8b8 <bt_conn_send_cb>:
{
    a8b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a8bc:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
    a8be:	7b43      	ldrb	r3, [r0, #13]
    a8c0:	2b06      	cmp	r3, #6
{
    a8c2:	4606      	mov	r6, r0
    a8c4:	460d      	mov	r5, r1
    a8c6:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
    a8c8:	d00f      	beq.n	a8ea <bt_conn_send_cb+0x32>
    a8ca:	4b2a      	ldr	r3, [pc, #168]	; (a974 <bt_conn_send_cb+0xbc>)
    a8cc:	492a      	ldr	r1, [pc, #168]	; (a978 <bt_conn_send_cb+0xc0>)
		BT_ERR("not connected!");
    a8ce:	482b      	ldr	r0, [pc, #172]	; (a97c <bt_conn_send_cb+0xc4>)
    a8d0:	1ac9      	subs	r1, r1, r3
    a8d2:	08c9      	lsrs	r1, r1, #3
    a8d4:	0189      	lsls	r1, r1, #6
    a8d6:	f041 0101 	orr.w	r1, r1, #1
    a8da:	f013 fdf6 	bl	1e4ca <log_0>
		net_buf_unref(buf);
    a8de:	4628      	mov	r0, r5
    a8e0:	f011 f8fa 	bl	1bad8 <net_buf_unref>
			return -ENOTCONN;
    a8e4:	f06f 0038 	mvn.w	r0, #56	; 0x38
    a8e8:	e020      	b.n	a92c <bt_conn_send_cb+0x74>
	if (cb) {
    a8ea:	2a00      	cmp	r2, #0
    a8ec:	d040      	beq.n	a970 <bt_conn_send_cb+0xb8>
	return z_impl_k_current_get();
    a8ee:	f012 ff39 	bl	1d764 <z_impl_k_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
    a8f2:	4b23      	ldr	r3, [pc, #140]	; (a980 <bt_conn_send_cb+0xc8>)
    a8f4:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
    a8f6:	4823      	ldr	r0, [pc, #140]	; (a984 <bt_conn_send_cb+0xcc>)
    a8f8:	bf07      	ittee	eq
    a8fa:	2200      	moveq	r2, #0
    a8fc:	2300      	moveq	r3, #0
    a8fe:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
    a902:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
    a906:	f012 fbaf 	bl	1d068 <z_impl_k_queue_get>
    a90a:	4604      	mov	r4, r0
		if (!tx) {
    a90c:	b980      	cbnz	r0, a930 <bt_conn_send_cb+0x78>
    a90e:	4b19      	ldr	r3, [pc, #100]	; (a974 <bt_conn_send_cb+0xbc>)
    a910:	4919      	ldr	r1, [pc, #100]	; (a978 <bt_conn_send_cb+0xc0>)
			BT_ERR("Unable to allocate TX context");
    a912:	481d      	ldr	r0, [pc, #116]	; (a988 <bt_conn_send_cb+0xd0>)
    a914:	1ac9      	subs	r1, r1, r3
    a916:	08c9      	lsrs	r1, r1, #3
    a918:	0189      	lsls	r1, r1, #6
    a91a:	f041 0101 	orr.w	r1, r1, #1
    a91e:	f013 fdd4 	bl	1e4ca <log_0>
			net_buf_unref(buf);
    a922:	4628      	mov	r0, r5
    a924:	f011 f8d8 	bl	1bad8 <net_buf_unref>
			return -ENOBUFS;
    a928:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    a92c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
    a930:	7b73      	ldrb	r3, [r6, #13]
    a932:	2b06      	cmp	r3, #6
    a934:	d010      	beq.n	a958 <bt_conn_send_cb+0xa0>
    a936:	4b0f      	ldr	r3, [pc, #60]	; (a974 <bt_conn_send_cb+0xbc>)
    a938:	490f      	ldr	r1, [pc, #60]	; (a978 <bt_conn_send_cb+0xc0>)
			BT_WARN("Disconnected while allocating context");
    a93a:	4814      	ldr	r0, [pc, #80]	; (a98c <bt_conn_send_cb+0xd4>)
    a93c:	1ac9      	subs	r1, r1, r3
    a93e:	08c9      	lsrs	r1, r1, #3
    a940:	0189      	lsls	r1, r1, #6
    a942:	f041 0102 	orr.w	r1, r1, #2
    a946:	f013 fdc0 	bl	1e4ca <log_0>
			net_buf_unref(buf);
    a94a:	4628      	mov	r0, r5
    a94c:	f011 f8c4 	bl	1bad8 <net_buf_unref>
			tx_free(tx);
    a950:	4620      	mov	r0, r4
    a952:	f7ff fd7b 	bl	a44c <tx_free>
    a956:	e7c5      	b.n	a8e4 <bt_conn_send_cb+0x2c>
		tx->pending_no_cb = 0U;
    a958:	2300      	movs	r3, #0
		tx->user_data = user_data;
    a95a:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
    a95e:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
    a960:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
    a962:	f106 0034 	add.w	r0, r6, #52	; 0x34
    a966:	4629      	mov	r1, r5
    a968:	f017 fdd3 	bl	22512 <net_buf_put>
	return 0;
    a96c:	2000      	movs	r0, #0
    a96e:	e7dd      	b.n	a92c <bt_conn_send_cb+0x74>
		tx_data(buf)->tx = NULL;
    a970:	614a      	str	r2, [r1, #20]
    a972:	e7f6      	b.n	a962 <bt_conn_send_cb+0xaa>
    a974:	000236e8 	.word	0x000236e8
    a978:	000236f0 	.word	0x000236f0
    a97c:	0002617c 	.word	0x0002617c
    a980:	20001c68 	.word	0x20001c68
    a984:	200008a8 	.word	0x200008a8
    a988:	0002618b 	.word	0x0002618b
    a98c:	000261a9 	.word	0x000261a9

0000a990 <bt_conn_prepare_events>:
{
    a990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	conn_change.signaled = 0U;
    a994:	4b21      	ldr	r3, [pc, #132]	; (aa1c <bt_conn_prepare_events+0x8c>)
    a996:	4e22      	ldr	r6, [pc, #136]	; (aa20 <bt_conn_prepare_events+0x90>)
    a998:	2400      	movs	r4, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    a99a:	4622      	mov	r2, r4
    a99c:	2101      	movs	r1, #1
{
    a99e:	4607      	mov	r7, r0
	conn_change.signaled = 0U;
    a9a0:	609c      	str	r4, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    a9a2:	f018 fd60 	bl	23466 <k_poll_event_init>
    a9a6:	2501      	movs	r5, #1
		k_poll_event_init(&events[ev_count],
    a9a8:	f04f 0914 	mov.w	r9, #20
			conn_cleanup(conn);
    a9ac:	f1a6 0a54 	sub.w	sl, r6, #84	; 0x54
		if (!atomic_get(&conn->ref)) {
    a9b0:	4630      	mov	r0, r6
    a9b2:	f015 fd3f 	bl	20434 <atomic_get>
    a9b6:	b1b8      	cbz	r0, a9e8 <bt_conn_prepare_events+0x58>
		if (conn->state == BT_CONN_DISCONNECTED &&
    a9b8:	f816 3c47 	ldrb.w	r3, [r6, #-71]
    a9bc:	b9e3      	cbnz	r3, a9f8 <bt_conn_prepare_events+0x68>
    a9be:	f3bf 8f5b 	dmb	ish
    a9c2:	f1a6 0350 	sub.w	r3, r6, #80	; 0x50
    a9c6:	e853 2f00 	ldrex	r2, [r3]
    a9ca:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    a9ce:	e843 1000 	strex	r0, r1, [r3]
    a9d2:	2800      	cmp	r0, #0
    a9d4:	d1f7      	bne.n	a9c6 <bt_conn_prepare_events+0x36>
    a9d6:	f3bf 8f5b 	dmb	ish
    a9da:	0653      	lsls	r3, r2, #25
    a9dc:	d50c      	bpl.n	a9f8 <bt_conn_prepare_events+0x68>
			conn_cleanup(conn);
    a9de:	20b8      	movs	r0, #184	; 0xb8
    a9e0:	fb00 a004 	mla	r0, r0, r4, sl
    a9e4:	f7ff fe20 	bl	a628 <conn_cleanup>
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    a9e8:	3401      	adds	r4, #1
    a9ea:	2c04      	cmp	r4, #4
    a9ec:	f106 06b8 	add.w	r6, r6, #184	; 0xb8
    a9f0:	d1de      	bne.n	a9b0 <bt_conn_prepare_events+0x20>
}
    a9f2:	4628      	mov	r0, r5
    a9f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (conn->state != BT_CONN_CONNECTED) {
    a9f8:	f816 3c47 	ldrb.w	r3, [r6, #-71]
    a9fc:	2b06      	cmp	r3, #6
    a9fe:	d1f3      	bne.n	a9e8 <bt_conn_prepare_events+0x58>
		k_poll_event_init(&events[ev_count],
    aa00:	fb09 7805 	mla	r8, r9, r5, r7
    aa04:	f1a6 0320 	sub.w	r3, r6, #32
    aa08:	2200      	movs	r2, #0
    aa0a:	2104      	movs	r1, #4
    aa0c:	4640      	mov	r0, r8
    aa0e:	f018 fd2a 	bl	23466 <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_QUEUE;
    aa12:	2301      	movs	r3, #1
    aa14:	3501      	adds	r5, #1
    aa16:	f888 300c 	strb.w	r3, [r8, #12]
    aa1a:	e7e5      	b.n	a9e8 <bt_conn_prepare_events+0x58>
    aa1c:	200001cc 	.word	0x200001cc
    aa20:	20000c24 	.word	0x20000c24

0000aa24 <bt_conn_add_le>:
{
    aa24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    aa28:	4682      	mov	sl, r0
		if (!atomic_get(&conns[i].ref)) {
    aa2a:	4832      	ldr	r0, [pc, #200]	; (aaf4 <bt_conn_add_le+0xd0>)
    aa2c:	4d32      	ldr	r5, [pc, #200]	; (aaf8 <bt_conn_add_le+0xd4>)
{
    aa2e:	4689      	mov	r9, r1
		if (!atomic_get(&conns[i].ref)) {
    aa30:	f015 fd00 	bl	20434 <atomic_get>
    aa34:	4604      	mov	r4, r0
    aa36:	2800      	cmp	r0, #0
    aa38:	d04b      	beq.n	aad2 <bt_conn_add_le+0xae>
    aa3a:	f505 7086 	add.w	r0, r5, #268	; 0x10c
    aa3e:	f015 fcf9 	bl	20434 <atomic_get>
    aa42:	2800      	cmp	r0, #0
    aa44:	d049      	beq.n	aada <bt_conn_add_le+0xb6>
    aa46:	f505 70e2 	add.w	r0, r5, #452	; 0x1c4
    aa4a:	f015 fcf3 	bl	20434 <atomic_get>
    aa4e:	2800      	cmp	r0, #0
    aa50:	d048      	beq.n	aae4 <bt_conn_add_le+0xc0>
    aa52:	f505 701f 	add.w	r0, r5, #636	; 0x27c
    aa56:	f015 fced 	bl	20434 <atomic_get>
    aa5a:	2800      	cmp	r0, #0
    aa5c:	d148      	bne.n	aaf0 <bt_conn_add_le+0xcc>
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    aa5e:	2403      	movs	r4, #3
    aa60:	f44f 760a 	mov.w	r6, #552	; 0x228
		if (!atomic_get(&conns[i].ref)) {
    aa64:	f505 7b1f 	add.w	fp, r5, #636	; 0x27c
			conn = &conns[i];
    aa68:	19af      	adds	r7, r5, r6
	(void)memset(conn, 0, sizeof(*conn));
    aa6a:	22b8      	movs	r2, #184	; 0xb8
    aa6c:	2100      	movs	r1, #0
    aa6e:	4638      	mov	r0, r7
    aa70:	f015 fa28 	bl	1fec4 <memset>
	k_delayed_work_init(&conn->update_work, conn_update_timeout);
    aa74:	f106 0058 	add.w	r0, r6, #88	; 0x58
    aa78:	4920      	ldr	r1, [pc, #128]	; (aafc <bt_conn_add_le+0xd8>)
    aa7a:	4428      	add	r0, r5
    aa7c:	f018 fb38 	bl	230f0 <k_delayed_work_init>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    aa80:	4a1f      	ldr	r2, [pc, #124]	; (ab00 <bt_conn_add_le+0xdc>)
    aa82:	2300      	movs	r3, #0
    aa84:	e9c7 230b 	strd	r2, r3, [r7, #44]	; 0x2c
    aa88:	62bb      	str	r3, [r7, #40]	; 0x28
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    aa8a:	f04f 0801 	mov.w	r8, #1
    aa8e:	f3bf 8f5b 	dmb	ish
    aa92:	e85b 3f00 	ldrex	r3, [fp]
    aa96:	e84b 8200 	strex	r2, r8, [fp]
    aa9a:	2a00      	cmp	r2, #0
    aa9c:	d1f9      	bne.n	aa92 <bt_conn_add_le+0x6e>
    aa9e:	f3bf 8f5b 	dmb	ish
	conn->id = id;
    aaa2:	20b8      	movs	r0, #184	; 0xb8
    aaa4:	fb00 5404 	mla	r4, r0, r4, r5
	bt_addr_le_copy(&conn->le.dst, peer);
    aaa8:	f106 0088 	add.w	r0, r6, #136	; 0x88
	conn->id = id;
    aaac:	f884 a008 	strb.w	sl, [r4, #8]
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    aab0:	2207      	movs	r2, #7
    aab2:	4649      	mov	r1, r9
    aab4:	4428      	add	r0, r5
    aab6:	f015 f9da 	bl	1fe6e <memcpy>
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    aaba:	4b12      	ldr	r3, [pc, #72]	; (ab04 <bt_conn_add_le+0xe0>)
	conn->sec_level = BT_SECURITY_L1;
    aabc:	f884 8009 	strb.w	r8, [r4, #9]
	conn->required_sec_level = BT_SECURITY_L1;
    aac0:	f884 800a 	strb.w	r8, [r4, #10]
	conn->type = BT_CONN_TYPE_LE;
    aac4:	f884 8002 	strb.w	r8, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    aac8:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
}
    aacc:	4638      	mov	r0, r7
    aace:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!atomic_get(&conns[i].ref)) {
    aad2:	4606      	mov	r6, r0
    aad4:	f105 0b54 	add.w	fp, r5, #84	; 0x54
    aad8:	e7c6      	b.n	aa68 <bt_conn_add_le+0x44>
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    aada:	2401      	movs	r4, #1
		if (!atomic_get(&conns[i].ref)) {
    aadc:	26b8      	movs	r6, #184	; 0xb8
    aade:	f505 7b86 	add.w	fp, r5, #268	; 0x10c
    aae2:	e7c1      	b.n	aa68 <bt_conn_add_le+0x44>
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    aae4:	2402      	movs	r4, #2
		if (!atomic_get(&conns[i].ref)) {
    aae6:	f44f 76b8 	mov.w	r6, #368	; 0x170
    aaea:	f505 7be2 	add.w	fp, r5, #452	; 0x1c4
    aaee:	e7bb      	b.n	aa68 <bt_conn_add_le+0x44>
		return NULL;
    aaf0:	2700      	movs	r7, #0
    aaf2:	e7eb      	b.n	aacc <bt_conn_add_le+0xa8>
    aaf4:	20000c24 	.word	0x20000c24
    aaf8:	20000bd0 	.word	0x20000bd0
    aafc:	0000a5bd 	.word	0x0000a5bd
    ab00:	000204d1 	.word	0x000204d1
    ab04:	00280018 	.word	0x00280018

0000ab08 <bt_conn_set_state>:
{
    ab08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (conn->state == state) {
    ab0c:	7b45      	ldrb	r5, [r0, #13]
    ab0e:	428d      	cmp	r5, r1
{
    ab10:	4604      	mov	r4, r0
    ab12:	460e      	mov	r6, r1
	if (conn->state == state) {
    ab14:	d112      	bne.n	ab3c <bt_conn_set_state+0x34>
    ab16:	4b72      	ldr	r3, [pc, #456]	; (ace0 <bt_conn_set_state+0x1d8>)
    ab18:	4a72      	ldr	r2, [pc, #456]	; (ace4 <bt_conn_set_state+0x1dc>)
		BT_WARN("no transition %s", state2str(state));
    ab1a:	4873      	ldr	r0, [pc, #460]	; (ace8 <bt_conn_set_state+0x1e0>)
    ab1c:	2d07      	cmp	r5, #7
    ab1e:	eba2 0203 	sub.w	r2, r2, r3
    ab22:	bf96      	itet	ls
    ab24:	4b71      	ldrls	r3, [pc, #452]	; (acec <bt_conn_set_state+0x1e4>)
    ab26:	4972      	ldrhi	r1, [pc, #456]	; (acf0 <bt_conn_set_state+0x1e8>)
    ab28:	f853 1025 	ldrls.w	r1, [r3, r5, lsl #2]
    ab2c:	08d2      	lsrs	r2, r2, #3
    ab2e:	0192      	lsls	r2, r2, #6
    ab30:	f042 0202 	orr.w	r2, r2, #2
}
    ab34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_WARN("no valid (%u) state was set", state);
    ab38:	f013 bcd4 	b.w	1e4e4 <log_1>
	conn->state = state;
    ab3c:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
    ab3e:	b15d      	cbz	r5, ab58 <bt_conn_set_state+0x50>
    ab40:	2d05      	cmp	r5, #5
    ab42:	d00d      	beq.n	ab60 <bt_conn_set_state+0x58>
	switch (conn->state) {
    ab44:	7b63      	ldrb	r3, [r4, #13]
    ab46:	2b07      	cmp	r3, #7
    ab48:	f200 80bd 	bhi.w	acc6 <bt_conn_set_state+0x1be>
    ab4c:	e8df f003 	tbb	[pc, r3]
    ab50:	c5c5c526 	.word	0xc5c5c526
    ab54:	c50f9dc5 	.word	0xc50f9dc5
	atomic_val_t old = atomic_inc(&conn->ref);
    ab58:	3054      	adds	r0, #84	; 0x54
    ab5a:	f015 fc89 	bl	20470 <atomic_inc>
	return conn;
    ab5e:	e7f1      	b.n	ab44 <bt_conn_set_state+0x3c>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    ab60:	7883      	ldrb	r3, [r0, #2]
    ab62:	2b01      	cmp	r3, #1
    ab64:	d1ee      	bne.n	ab44 <bt_conn_set_state+0x3c>
			k_delayed_work_cancel(&conn->update_work);
    ab66:	3058      	adds	r0, #88	; 0x58
    ab68:	f018 faca 	bl	23100 <k_delayed_work_cancel>
    ab6c:	e7ea      	b.n	ab44 <bt_conn_set_state+0x3c>
		if (conn->type == BT_CONN_TYPE_SCO) {
    ab6e:	78a3      	ldrb	r3, [r4, #2]
    ab70:	2b04      	cmp	r3, #4
    ab72:	f000 80b2 	beq.w	acda <bt_conn_set_state+0x1d2>
	z_impl_k_queue_init(queue);
    ab76:	f104 0034 	add.w	r0, r4, #52	; 0x34
    ab7a:	f018 f8b7 	bl	22cec <z_impl_k_queue_init>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&signal, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(signal, result);
    ab7e:	2100      	movs	r1, #0
    ab80:	485c      	ldr	r0, [pc, #368]	; (acf4 <bt_conn_set_state+0x1ec>)
    ab82:	f013 f9a3 	bl	1decc <z_impl_k_poll_signal_raise>
	list->head = NULL;
    ab86:	2300      	movs	r3, #0
		bt_l2cap_connected(conn);
    ab88:	4620      	mov	r0, r4
	list->tail = NULL;
    ab8a:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
    ab8e:	f000 fec3 	bl	b918 <bt_l2cap_connected>
		notify_connected(conn);
    ab92:	4620      	mov	r0, r4
}
    ab94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify_connected(conn);
    ab98:	f7ff bc62 	b.w	a460 <notify_connected>
		if (conn->type == BT_CONN_TYPE_SCO) {
    ab9c:	78a3      	ldrb	r3, [r4, #2]
    ab9e:	2b04      	cmp	r3, #4
    aba0:	d105      	bne.n	abae <bt_conn_set_state+0xa6>
	atomic_val_t old = atomic_dec(&conn->ref);
    aba2:	f104 0054 	add.w	r0, r4, #84	; 0x54
}
    aba6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	atomic_val_t old = atomic_dec(&conn->ref);
    abaa:	f015 bc54 	b.w	20456 <atomic_dec>
		switch (old_state) {
    abae:	3d01      	subs	r5, #1
    abb0:	2d06      	cmp	r5, #6
    abb2:	f200 8092 	bhi.w	acda <bt_conn_set_state+0x1d2>
    abb6:	a301      	add	r3, pc, #4	; (adr r3, abbc <bt_conn_set_state+0xb4>)
    abb8:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
    abbc:	0000ac7d 	.word	0x0000ac7d
    abc0:	0000aba3 	.word	0x0000aba3
    abc4:	0000aba3 	.word	0x0000aba3
    abc8:	0000ac7d 	.word	0x0000ac7d
    abcc:	0000ac7d 	.word	0x0000ac7d
    abd0:	0000abd9 	.word	0x0000abd9
    abd4:	0000abd9 	.word	0x0000abd9
	z_impl_k_sem_give(sem);
    abd8:	4d47      	ldr	r5, [pc, #284]	; (acf8 <bt_conn_set_state+0x1f0>)
		tx->pending_no_cb = 0U;
    abda:	2600      	movs	r6, #0
	__asm__ volatile(
    abdc:	f04f 0320 	mov.w	r3, #32
    abe0:	f3ef 8211 	mrs	r2, BASEPRI
    abe4:	f383 8811 	msr	BASEPRI, r3
    abe8:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
    abec:	69e3      	ldr	r3, [r4, #28]
    abee:	b14b      	cbz	r3, ac04 <bt_conn_set_state+0xfc>
			conn->pending_no_cb--;
    abf0:	3b01      	subs	r3, #1
    abf2:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    abf4:	f382 8811 	msr	BASEPRI, r2
    abf8:	f3bf 8f6f 	isb	sy
    abfc:	4628      	mov	r0, r5
    abfe:	f012 fdb7 	bl	1d770 <z_impl_k_sem_give>
}
    ac02:	e7eb      	b.n	abdc <bt_conn_set_state+0xd4>
Z_GENLIST_IS_EMPTY(slist)
    ac04:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
    ac06:	b128      	cbz	r0, ac14 <bt_conn_set_state+0x10c>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    ac08:	69a1      	ldr	r1, [r4, #24]
    ac0a:	6803      	ldr	r3, [r0, #0]
	list->head = node;
    ac0c:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    ac0e:	4288      	cmp	r0, r1
	list->tail = node;
    ac10:	bf08      	it	eq
    ac12:	61a3      	streq	r3, [r4, #24]
    ac14:	f382 8811 	msr	BASEPRI, r2
    ac18:	f3bf 8f6f 	isb	sy
		if (!node) {
    ac1c:	b188      	cbz	r0, ac42 <bt_conn_set_state+0x13a>
	__asm__ volatile(
    ac1e:	f04f 0220 	mov.w	r2, #32
    ac22:	f3ef 8311 	mrs	r3, BASEPRI
    ac26:	f382 8811 	msr	BASEPRI, r2
    ac2a:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
    ac2e:	68c2      	ldr	r2, [r0, #12]
    ac30:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
    ac32:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
    ac34:	f383 8811 	msr	BASEPRI, r3
    ac38:	f3bf 8f6f 	isb	sy
		tx_free(tx);
    ac3c:	f7ff fc06 	bl	a44c <tx_free>
    ac40:	e7dc      	b.n	abfc <bt_conn_set_state+0xf4>
			tx_notify(conn);
    ac42:	4620      	mov	r0, r4
    ac44:	f015 fc21 	bl	2048a <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
    ac48:	78a3      	ldrb	r3, [r4, #2]
    ac4a:	2b01      	cmp	r3, #1
    ac4c:	d103      	bne.n	ac56 <bt_conn_set_state+0x14e>
				k_delayed_work_cancel(&conn->update_work);
    ac4e:	f104 0058 	add.w	r0, r4, #88	; 0x58
    ac52:	f018 fa55 	bl	23100 <k_delayed_work_cancel>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    ac56:	f3bf 8f5b 	dmb	ish
    ac5a:	3404      	adds	r4, #4
    ac5c:	e854 3f00 	ldrex	r3, [r4]
    ac60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ac64:	e844 3200 	strex	r2, r3, [r4]
    ac68:	2a00      	cmp	r2, #0
    ac6a:	d1f7      	bne.n	ac5c <bt_conn_set_state+0x154>
    ac6c:	f3bf 8f5b 	dmb	ish
	return z_impl_k_poll_signal_raise(signal, result);
    ac70:	4820      	ldr	r0, [pc, #128]	; (acf4 <bt_conn_set_state+0x1ec>)
}
    ac72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ac76:	2100      	movs	r1, #0
    ac78:	f013 b928 	b.w	1decc <z_impl_k_poll_signal_raise>
			if (conn->err) {
    ac7c:	7b23      	ldrb	r3, [r4, #12]
    ac7e:	2b00      	cmp	r3, #0
    ac80:	d08f      	beq.n	aba2 <bt_conn_set_state+0x9a>
				notify_connected(conn);
    ac82:	4620      	mov	r0, r4
    ac84:	f7ff fbec 	bl	a460 <notify_connected>
    ac88:	e78b      	b.n	aba2 <bt_conn_set_state+0x9a>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    ac8a:	78a3      	ldrb	r3, [r4, #2]
    ac8c:	2b01      	cmp	r3, #1
    ac8e:	d124      	bne.n	acda <bt_conn_set_state+0x1d2>
				K_MSEC(10 * bt_dev.create_param.timeout));
    ac90:	4b1a      	ldr	r3, [pc, #104]	; (acfc <bt_conn_set_state+0x1f4>)
    ac92:	8a9b      	ldrh	r3, [r3, #20]
    ac94:	210a      	movs	r1, #10
    ac96:	4359      	muls	r1, r3
    ac98:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    ac9c:	f240 36e7 	movw	r6, #999	; 0x3e7
    aca0:	2700      	movs	r7, #0
    aca2:	fbc0 6701 	smlal	r6, r7, r0, r1
    aca6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    acaa:	2300      	movs	r3, #0
    acac:	4630      	mov	r0, r6
    acae:	4639      	mov	r1, r7
    acb0:	f7f5 fec4 	bl	a3c <__aeabi_uldivmod>
    acb4:	4602      	mov	r2, r0
    acb6:	460b      	mov	r3, r1
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    acb8:	4811      	ldr	r0, [pc, #68]	; (ad00 <bt_conn_set_state+0x1f8>)
    acba:	f104 0158 	add.w	r1, r4, #88	; 0x58
}
    acbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    acc2:	f012 be93 	b.w	1d9ec <k_delayed_work_submit_to_queue>
    acc6:	4a07      	ldr	r2, [pc, #28]	; (ace4 <bt_conn_set_state+0x1dc>)
    acc8:	4b05      	ldr	r3, [pc, #20]	; (ace0 <bt_conn_set_state+0x1d8>)
		BT_WARN("no valid (%u) state was set", state);
    acca:	480e      	ldr	r0, [pc, #56]	; (ad04 <bt_conn_set_state+0x1fc>)
    accc:	1ad2      	subs	r2, r2, r3
    acce:	08d2      	lsrs	r2, r2, #3
    acd0:	0192      	lsls	r2, r2, #6
    acd2:	f042 0202 	orr.w	r2, r2, #2
    acd6:	4631      	mov	r1, r6
    acd8:	e72c      	b.n	ab34 <bt_conn_set_state+0x2c>
}
    acda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    acde:	bf00      	nop
    ace0:	000236e8 	.word	0x000236e8
    ace4:	000236f0 	.word	0x000236f0
    ace8:	000261d9 	.word	0x000261d9
    acec:	00023c9c 	.word	0x00023c9c
    acf0:	000261cf 	.word	0x000261cf
    acf4:	200001cc 	.word	0x200001cc
    acf8:	200000b4 	.word	0x200000b4
    acfc:	20000000 	.word	0x20000000
    ad00:	20001c50 	.word	0x20001c50
    ad04:	000261ea 	.word	0x000261ea

0000ad08 <bt_conn_lookup_handle>:
{
    ad08:	b510      	push	{r4, lr}
    ad0a:	4b0f      	ldr	r3, [pc, #60]	; (ad48 <bt_conn_lookup_handle+0x40>)
    ad0c:	4601      	mov	r1, r0
    ad0e:	2200      	movs	r2, #0
		if (!atomic_get(&conns[i].ref)) {
    ad10:	4618      	mov	r0, r3
    ad12:	f015 fb8f 	bl	20434 <atomic_get>
    ad16:	b178      	cbz	r0, ad38 <bt_conn_lookup_handle+0x30>
		if (conns[i].state != BT_CONN_CONNECTED &&
    ad18:	f813 0c47 	ldrb.w	r0, [r3, #-71]
    ad1c:	3806      	subs	r0, #6
    ad1e:	2801      	cmp	r0, #1
    ad20:	d80a      	bhi.n	ad38 <bt_conn_lookup_handle+0x30>
		if (conns[i].handle == handle) {
    ad22:	f833 0c54 	ldrh.w	r0, [r3, #-84]
    ad26:	4288      	cmp	r0, r1
    ad28:	d106      	bne.n	ad38 <bt_conn_lookup_handle+0x30>
			return bt_conn_ref(&conns[i]);
    ad2a:	4c08      	ldr	r4, [pc, #32]	; (ad4c <bt_conn_lookup_handle+0x44>)
	atomic_val_t old = atomic_inc(&conn->ref);
    ad2c:	4618      	mov	r0, r3
			return bt_conn_ref(&conns[i]);
    ad2e:	4414      	add	r4, r2
	atomic_val_t old = atomic_inc(&conn->ref);
    ad30:	f015 fb9e 	bl	20470 <atomic_inc>
}
    ad34:	4620      	mov	r0, r4
    ad36:	bd10      	pop	{r4, pc}
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    ad38:	32b8      	adds	r2, #184	; 0xb8
    ad3a:	f5b2 7f38 	cmp.w	r2, #736	; 0x2e0
    ad3e:	f103 03b8 	add.w	r3, r3, #184	; 0xb8
    ad42:	d1e5      	bne.n	ad10 <bt_conn_lookup_handle+0x8>
	return NULL;
    ad44:	2400      	movs	r4, #0
    ad46:	e7f5      	b.n	ad34 <bt_conn_lookup_handle+0x2c>
    ad48:	20000c24 	.word	0x20000c24
    ad4c:	20000bd0 	.word	0x20000bd0

0000ad50 <bt_conn_lookup_addr_le>:
{
    ad50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ad54:	4c10      	ldr	r4, [pc, #64]	; (ad98 <bt_conn_lookup_addr_le+0x48>)
    ad56:	4607      	mov	r7, r0
    ad58:	4688      	mov	r8, r1
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    ad5a:	2600      	movs	r6, #0
		if (!atomic_get(&conns[i].ref)) {
    ad5c:	4620      	mov	r0, r4
    ad5e:	f015 fb69 	bl	20434 <atomic_get>
    ad62:	b188      	cbz	r0, ad88 <bt_conn_lookup_addr_le+0x38>
		if (conns[i].type != BT_CONN_TYPE_LE) {
    ad64:	f814 3c52 	ldrb.w	r3, [r4, #-82]
    ad68:	2b01      	cmp	r3, #1
    ad6a:	d10d      	bne.n	ad88 <bt_conn_lookup_addr_le+0x38>
		if (bt_conn_is_peer_addr_le(&conns[i], id, peer)) {
    ad6c:	f1a4 0554 	sub.w	r5, r4, #84	; 0x54
    ad70:	4642      	mov	r2, r8
    ad72:	4639      	mov	r1, r7
    ad74:	4628      	mov	r0, r5
    ad76:	f015 fc1e 	bl	205b6 <bt_conn_is_peer_addr_le>
    ad7a:	b128      	cbz	r0, ad88 <bt_conn_lookup_addr_le+0x38>
	atomic_val_t old = atomic_inc(&conn->ref);
    ad7c:	4620      	mov	r0, r4
    ad7e:	f015 fb77 	bl	20470 <atomic_inc>
}
    ad82:	4628      	mov	r0, r5
    ad84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    ad88:	3601      	adds	r6, #1
    ad8a:	2e04      	cmp	r6, #4
    ad8c:	f104 04b8 	add.w	r4, r4, #184	; 0xb8
    ad90:	d1e4      	bne.n	ad5c <bt_conn_lookup_addr_le+0xc>
	return NULL;
    ad92:	2500      	movs	r5, #0
    ad94:	e7f5      	b.n	ad82 <bt_conn_lookup_addr_le+0x32>
    ad96:	bf00      	nop
    ad98:	20000c24 	.word	0x20000c24

0000ad9c <bt_conn_exists_le>:
{
    ad9c:	b510      	push	{r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
    ad9e:	f7ff ffd7 	bl	ad50 <bt_conn_lookup_addr_le>
	if (conn) {
    ada2:	4604      	mov	r4, r0
    ada4:	b1a8      	cbz	r0, add2 <bt_conn_exists_le+0x36>
    ada6:	4b0b      	ldr	r3, [pc, #44]	; (add4 <bt_conn_exists_le+0x38>)
    ada8:	4a0b      	ldr	r2, [pc, #44]	; (add8 <bt_conn_exists_le+0x3c>)
    adaa:	1ad2      	subs	r2, r2, r3
		BT_WARN("Found valid connection in %s state",
    adac:	7b43      	ldrb	r3, [r0, #13]
    adae:	480b      	ldr	r0, [pc, #44]	; (addc <bt_conn_exists_le+0x40>)
    adb0:	2b07      	cmp	r3, #7
    adb2:	bf96      	itet	ls
    adb4:	490a      	ldrls	r1, [pc, #40]	; (ade0 <bt_conn_exists_le+0x44>)
    adb6:	490b      	ldrhi	r1, [pc, #44]	; (ade4 <bt_conn_exists_le+0x48>)
    adb8:	f851 1023 	ldrls.w	r1, [r1, r3, lsl #2]
    adbc:	08d2      	lsrs	r2, r2, #3
    adbe:	0192      	lsls	r2, r2, #6
    adc0:	f042 0202 	orr.w	r2, r2, #2
    adc4:	f013 fb8e 	bl	1e4e4 <log_1>
	atomic_val_t old = atomic_dec(&conn->ref);
    adc8:	f104 0054 	add.w	r0, r4, #84	; 0x54
    adcc:	f015 fb43 	bl	20456 <atomic_dec>
		return true;
    add0:	2001      	movs	r0, #1
}
    add2:	bd10      	pop	{r4, pc}
    add4:	000236e8 	.word	0x000236e8
    add8:	000236f0 	.word	0x000236f0
    addc:	00026206 	.word	0x00026206
    ade0:	00023c9c 	.word	0x00023c9c
    ade4:	000261cf 	.word	0x000261cf

0000ade8 <bt_conn_lookup_state_le>:
{
    ade8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    adec:	4c16      	ldr	r4, [pc, #88]	; (ae48 <bt_conn_lookup_state_le+0x60>)
    adee:	4607      	mov	r7, r0
    adf0:	4688      	mov	r8, r1
    adf2:	4691      	mov	r9, r2
    adf4:	2600      	movs	r6, #0
    adf6:	4625      	mov	r5, r4
		if (!atomic_get(&conns[i].ref)) {
    adf8:	f104 0a54 	add.w	sl, r4, #84	; 0x54
    adfc:	4650      	mov	r0, sl
    adfe:	f015 fb19 	bl	20434 <atomic_get>
    ae02:	b1c8      	cbz	r0, ae38 <bt_conn_lookup_state_le+0x50>
		if (conns[i].type != BT_CONN_TYPE_LE) {
    ae04:	78a3      	ldrb	r3, [r4, #2]
    ae06:	2b01      	cmp	r3, #1
    ae08:	d116      	bne.n	ae38 <bt_conn_lookup_state_le+0x50>
		if (peer && !bt_conn_is_peer_addr_le(&conns[i], id, peer)) {
    ae0a:	f1b8 0f00 	cmp.w	r8, #0
    ae0e:	d10c      	bne.n	ae2a <bt_conn_lookup_state_le+0x42>
		if (conns[i].state == state && conns[i].id == id) {
    ae10:	7b63      	ldrb	r3, [r4, #13]
    ae12:	454b      	cmp	r3, r9
    ae14:	d110      	bne.n	ae38 <bt_conn_lookup_state_le+0x50>
    ae16:	7a23      	ldrb	r3, [r4, #8]
    ae18:	42bb      	cmp	r3, r7
    ae1a:	d10d      	bne.n	ae38 <bt_conn_lookup_state_le+0x50>
	atomic_val_t old = atomic_inc(&conn->ref);
    ae1c:	4650      	mov	r0, sl
			return bt_conn_ref(&conns[i]);
    ae1e:	4435      	add	r5, r6
	atomic_val_t old = atomic_inc(&conn->ref);
    ae20:	f015 fb26 	bl	20470 <atomic_inc>
}
    ae24:	4628      	mov	r0, r5
    ae26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (peer && !bt_conn_is_peer_addr_le(&conns[i], id, peer)) {
    ae2a:	4642      	mov	r2, r8
    ae2c:	4639      	mov	r1, r7
    ae2e:	4620      	mov	r0, r4
    ae30:	f015 fbc1 	bl	205b6 <bt_conn_is_peer_addr_le>
    ae34:	2800      	cmp	r0, #0
    ae36:	d1eb      	bne.n	ae10 <bt_conn_lookup_state_le+0x28>
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    ae38:	36b8      	adds	r6, #184	; 0xb8
    ae3a:	f5b6 7f38 	cmp.w	r6, #736	; 0x2e0
    ae3e:	f104 04b8 	add.w	r4, r4, #184	; 0xb8
    ae42:	d1d9      	bne.n	adf8 <bt_conn_lookup_state_le+0x10>
	return NULL;
    ae44:	2500      	movs	r5, #0
    ae46:	e7ed      	b.n	ae24 <bt_conn_lookup_state_le+0x3c>
    ae48:	20000bd0 	.word	0x20000bd0

0000ae4c <bt_conn_get_info>:
{
	return &conn->le.dst;
}

int bt_conn_get_info(const struct bt_conn *conn, struct bt_conn_info *info)
{
    ae4c:	b510      	push	{r4, lr}
	info->type = conn->type;
    ae4e:	7882      	ldrb	r2, [r0, #2]
    ae50:	700a      	strb	r2, [r1, #0]
	info->role = conn->role;
    ae52:	78c4      	ldrb	r4, [r0, #3]
    ae54:	704c      	strb	r4, [r1, #1]
	info->id = conn->id;
    ae56:	7a03      	ldrb	r3, [r0, #8]
    ae58:	708b      	strb	r3, [r1, #2]

	switch (conn->type) {
    ae5a:	2a01      	cmp	r2, #1
    ae5c:	d11c      	bne.n	ae98 <bt_conn_get_info+0x4c>
	case BT_CONN_TYPE_LE:
		info->le.dst = &conn->le.dst;
    ae5e:	f100 0288 	add.w	r2, r0, #136	; 0x88
    ae62:	608a      	str	r2, [r1, #8]
		info->le.src = &bt_dev.id_addr[conn->id];
    ae64:	4a0e      	ldr	r2, [pc, #56]	; (aea0 <bt_conn_get_info+0x54>)
    ae66:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    ae6a:	4413      	add	r3, r2
    ae6c:	604b      	str	r3, [r1, #4]
		if (conn->role == BT_HCI_ROLE_MASTER) {
    ae6e:	f100 0296 	add.w	r2, r0, #150	; 0x96
    ae72:	f100 038f 	add.w	r3, r0, #143	; 0x8f
    ae76:	b964      	cbnz	r4, ae92 <bt_conn_get_info+0x46>
			info->le.local = &conn->le.init_addr;
			info->le.remote = &conn->le.resp_addr;
    ae78:	e9c1 3203 	strd	r3, r2, [r1, #12]
		} else {
			info->le.local = &conn->le.resp_addr;
			info->le.remote = &conn->le.init_addr;
		}
		info->le.interval = conn->le.interval;
    ae7c:	f8b0 309e 	ldrh.w	r3, [r0, #158]	; 0x9e
    ae80:	828b      	strh	r3, [r1, #20]
		info->le.latency = conn->le.latency;
    ae82:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
    ae86:	82cb      	strh	r3, [r1, #22]
		info->le.timeout = conn->le.timeout;
    ae88:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
    ae8c:	830b      	strh	r3, [r1, #24]
		info->le.phy = &conn->le.phy;
#endif
#if defined(CONFIG_BT_USER_DATA_LEN_UPDATE)
		info->le.data_len = &conn->le.data_len;
#endif
		return 0;
    ae8e:	2000      	movs	r0, #0
		return 0;
#endif
	}

	return -EINVAL;
}
    ae90:	bd10      	pop	{r4, pc}
			info->le.remote = &conn->le.init_addr;
    ae92:	e9c1 2303 	strd	r2, r3, [r1, #12]
    ae96:	e7f1      	b.n	ae7c <bt_conn_get_info+0x30>
	return -EINVAL;
    ae98:	f06f 0015 	mvn.w	r0, #21
    ae9c:	e7f8      	b.n	ae90 <bt_conn_get_info+0x44>
    ae9e:	bf00      	nop
    aea0:	20000000 	.word	0x20000000

0000aea4 <bt_conn_le_create>:

int bt_conn_le_create(const bt_addr_le_t *peer,
		      const struct bt_conn_le_create_param *create_param,
		      const struct bt_le_conn_param *conn_param,
		      struct bt_conn **ret_conn)
{
    aea4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    aea8:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    aeaa:	4852      	ldr	r0, [pc, #328]	; (aff4 <bt_conn_le_create+0x150>)
    aeac:	460f      	mov	r7, r1
    aeae:	4615      	mov	r5, r2
    aeb0:	461e      	mov	r6, r3
    aeb2:	f015 fabf 	bl	20434 <atomic_get>
	struct bt_conn *conn;
	bt_addr_le_t dst;
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    aeb6:	0781      	lsls	r1, r0, #30
    aeb8:	f140 8092 	bpl.w	afe0 <bt_conn_le_create+0x13c>
		return -EAGAIN;
	}

	if (!bt_le_conn_params_valid(conn_param)) {
    aebc:	4610      	mov	r0, r2
    aebe:	f015 fa35 	bl	2032c <bt_le_conn_params_valid>
    aec2:	b928      	cbnz	r0, aed0 <bt_conn_le_create+0x2c>
		return -EINVAL;
    aec4:	f06f 0515 	mvn.w	r5, #21
		return err;
	}

	*ret_conn = conn;
	return 0;
}
    aec8:	4628      	mov	r0, r5
    aeca:	b002      	add	sp, #8
    aecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    aed0:	4848      	ldr	r0, [pc, #288]	; (aff4 <bt_conn_le_create+0x150>)
    aed2:	f015 faaf 	bl	20434 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    aed6:	0642      	lsls	r2, r0, #25
    aed8:	d4f4      	bmi.n	aec4 <bt_conn_le_create+0x20>
    aeda:	4846      	ldr	r0, [pc, #280]	; (aff4 <bt_conn_le_create+0x150>)
    aedc:	f015 faaa 	bl	20434 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_INITIATING)) {
    aee0:	0503      	lsls	r3, r0, #20
    aee2:	f3c0 28c0 	ubfx	r8, r0, #11, #1
    aee6:	d47e      	bmi.n	afe6 <bt_conn_le_create+0x142>
	if (!bt_le_scan_random_addr_check()) {
    aee8:	f015 f9bf 	bl	2026a <bt_le_scan_random_addr_check>
    aeec:	2800      	cmp	r0, #0
    aeee:	d0e9      	beq.n	aec4 <bt_conn_le_create+0x20>
	if (bt_conn_exists_le(BT_ID_DEFAULT, peer)) {
    aef0:	4621      	mov	r1, r4
    aef2:	4640      	mov	r0, r8
    aef4:	f7ff ff52 	bl	ad9c <bt_conn_exists_le>
    aef8:	2800      	cmp	r0, #0
    aefa:	d1e3      	bne.n	aec4 <bt_conn_le_create+0x20>
	if (peer->type == BT_ADDR_LE_PUBLIC_ID ||
    aefc:	7823      	ldrb	r3, [r4, #0]
    aefe:	3b02      	subs	r3, #2
    af00:	2b01      	cmp	r3, #1
    af02:	d84b      	bhi.n	af9c <bt_conn_le_create+0xf8>
    af04:	2207      	movs	r2, #7
    af06:	4621      	mov	r1, r4
    af08:	4668      	mov	r0, sp
    af0a:	f014 ffb0 	bl	1fe6e <memcpy>
		dst.type -= BT_ADDR_LE_PUBLIC_ID;
    af0e:	f89d 3000 	ldrb.w	r3, [sp]
    af12:	3b02      	subs	r3, #2
    af14:	f88d 3000 	strb.w	r3, [sp]
	conn = bt_conn_add_le(BT_ID_DEFAULT, &dst);
    af18:	4669      	mov	r1, sp
    af1a:	2000      	movs	r0, #0
    af1c:	f7ff fd82 	bl	aa24 <bt_conn_add_le>
	if (!conn) {
    af20:	4604      	mov	r4, r0
    af22:	2800      	cmp	r0, #0
    af24:	d062      	beq.n	afec <bt_conn_le_create+0x148>
	conn->le.interval_min = param->interval_min;
    af26:	882b      	ldrh	r3, [r5, #0]
    af28:	f8a0 30a0 	strh.w	r3, [r0, #160]	; 0xa0
	conn->le.interval_max = param->interval_max;
    af2c:	886b      	ldrh	r3, [r5, #2]
    af2e:	f8a0 30a2 	strh.w	r3, [r0, #162]	; 0xa2
	conn->le.latency = param->latency;
    af32:	88ab      	ldrh	r3, [r5, #4]
    af34:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
	conn->le.timeout = param->timeout;
    af38:	88eb      	ldrh	r3, [r5, #6]
    af3a:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
	bt_dev.create_param = *param;
    af3e:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
    af42:	4d2d      	ldr	r5, [pc, #180]	; (aff8 <bt_conn_le_create+0x154>)
    af44:	f105 0c08 	add.w	ip, r5, #8
    af48:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		(bt_dev.create_param.timeout != 0) ?
    af4c:	8aab      	ldrh	r3, [r5, #20]
	bt_dev.create_param.timeout =
    af4e:	2b00      	cmp	r3, #0
    af50:	bf08      	it	eq
    af52:	f44f 7396 	moveq.w	r3, #300	; 0x12c
    af56:	82ab      	strh	r3, [r5, #20]
		(bt_dev.create_param.interval_coded != 0) ?
    af58:	8a2b      	ldrh	r3, [r5, #16]
    af5a:	462a      	mov	r2, r5
	bt_dev.create_param.interval_coded =
    af5c:	b903      	cbnz	r3, af60 <bt_conn_le_create+0xbc>
    af5e:	89ab      	ldrh	r3, [r5, #12]
    af60:	8213      	strh	r3, [r2, #16]
		(bt_dev.create_param.window_coded != 0) ?
    af62:	8a53      	ldrh	r3, [r2, #18]
	bt_dev.create_param.window_coded =
    af64:	b903      	cbnz	r3, af68 <bt_conn_le_create+0xc4>
    af66:	89d3      	ldrh	r3, [r2, #14]
    af68:	8253      	strh	r3, [r2, #18]
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    af6a:	f892 30cc 	ldrb.w	r3, [r2, #204]	; 0xcc
    af6e:	b11b      	cbz	r3, af78 <bt_conn_le_create+0xd4>
    af70:	f892 20cd 	ldrb.w	r2, [r2, #205]	; 0xcd
    af74:	429a      	cmp	r2, r3
    af76:	d91a      	bls.n	afae <bt_conn_le_create+0x10a>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    af78:	2101      	movs	r1, #1
    af7a:	4620      	mov	r0, r4
    af7c:	f7ff fdc4 	bl	ab08 <bt_conn_set_state>
		err = bt_le_scan_update(true);
    af80:	2001      	movs	r0, #1
    af82:	f7fe fb0d 	bl	95a0 <bt_le_scan_update>
		if (err) {
    af86:	4605      	mov	r5, r0
    af88:	b340      	cbz	r0, afdc <bt_conn_le_create+0x138>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    af8a:	4620      	mov	r0, r4
    af8c:	2100      	movs	r1, #0
    af8e:	f7ff fdbb 	bl	ab08 <bt_conn_set_state>
	atomic_val_t old = atomic_dec(&conn->ref);
    af92:	f104 0054 	add.w	r0, r4, #84	; 0x54
    af96:	f015 fa5e 	bl	20456 <atomic_dec>
			return err;
    af9a:	e795      	b.n	aec8 <bt_conn_le_create+0x24>
		bt_addr_le_copy(&dst, bt_lookup_id_addr(BT_ID_DEFAULT, peer));
    af9c:	4621      	mov	r1, r4
    af9e:	f015 f95c 	bl	2025a <bt_lookup_id_addr>
    afa2:	2207      	movs	r2, #7
    afa4:	4601      	mov	r1, r0
    afa6:	4668      	mov	r0, sp
    afa8:	f014 ff61 	bl	1fe6e <memcpy>
}
    afac:	e7b4      	b.n	af18 <bt_conn_le_create+0x74>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
    afae:	2105      	movs	r1, #5
    afb0:	4620      	mov	r0, r4
    afb2:	f7ff fda9 	bl	ab08 <bt_conn_set_state>
	err = bt_le_create_conn(conn);
    afb6:	4620      	mov	r0, r4
    afb8:	f015 f959 	bl	2026e <bt_le_create_conn>
	if (err) {
    afbc:	4605      	mov	r5, r0
    afbe:	b168      	cbz	r0, afdc <bt_conn_le_create+0x138>
		conn->err = 0;
    afc0:	2600      	movs	r6, #0
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    afc2:	4631      	mov	r1, r6
    afc4:	4620      	mov	r0, r4
		conn->err = 0;
    afc6:	7326      	strb	r6, [r4, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    afc8:	f7ff fd9e 	bl	ab08 <bt_conn_set_state>
	atomic_val_t old = atomic_dec(&conn->ref);
    afcc:	f104 0054 	add.w	r0, r4, #84	; 0x54
    afd0:	f015 fa41 	bl	20456 <atomic_dec>
		bt_le_scan_update(false);
    afd4:	4630      	mov	r0, r6
    afd6:	f7fe fae3 	bl	95a0 <bt_le_scan_update>
		return err;
    afda:	e775      	b.n	aec8 <bt_conn_le_create+0x24>
	*ret_conn = conn;
    afdc:	6034      	str	r4, [r6, #0]
	return 0;
    afde:	e773      	b.n	aec8 <bt_conn_le_create+0x24>
		return -EAGAIN;
    afe0:	f06f 050a 	mvn.w	r5, #10
    afe4:	e770      	b.n	aec8 <bt_conn_le_create+0x24>
		return -EALREADY;
    afe6:	f06f 0544 	mvn.w	r5, #68	; 0x44
    afea:	e76d      	b.n	aec8 <bt_conn_le_create+0x24>
		return -ENOMEM;
    afec:	f06f 050b 	mvn.w	r5, #11
    aff0:	e76a      	b.n	aec8 <bt_conn_le_create+0x24>
    aff2:	bf00      	nop
    aff4:	20000098 	.word	0x20000098
    aff8:	20000000 	.word	0x20000000

0000affc <bt_le_set_auto_conn>:

#if !defined(CONFIG_BT_WHITELIST)
int bt_le_set_auto_conn(const bt_addr_le_t *addr,
			const struct bt_le_conn_param *param)
{
    affc:	b570      	push	{r4, r5, r6, lr}
    affe:	4606      	mov	r6, r0
    b000:	4839      	ldr	r0, [pc, #228]	; (b0e8 <bt_le_set_auto_conn+0xec>)
    b002:	460d      	mov	r5, r1
    b004:	f015 fa16 	bl	20434 <atomic_get>
	struct bt_conn *conn;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    b008:	0780      	lsls	r0, r0, #30
    b00a:	d566      	bpl.n	b0da <bt_le_set_auto_conn+0xde>
		return -EAGAIN;
	}

	if (param && !bt_le_conn_params_valid(param)) {
    b00c:	b929      	cbnz	r1, b01a <bt_le_set_auto_conn+0x1e>
		return -EINVAL;
	}

	if (!bt_le_scan_random_addr_check()) {
    b00e:	f015 f92c 	bl	2026a <bt_le_scan_random_addr_check>
    b012:	b940      	cbnz	r0, b026 <bt_le_set_auto_conn+0x2a>
		return -EINVAL;
    b014:	f06f 0015 	mvn.w	r0, #21
	}

	bt_conn_unref(conn);

	return 0;
}
    b018:	bd70      	pop	{r4, r5, r6, pc}
	if (param && !bt_le_conn_params_valid(param)) {
    b01a:	4608      	mov	r0, r1
    b01c:	f015 f986 	bl	2032c <bt_le_conn_params_valid>
    b020:	2800      	cmp	r0, #0
    b022:	d1f4      	bne.n	b00e <bt_le_set_auto_conn+0x12>
    b024:	e7f6      	b.n	b014 <bt_le_set_auto_conn+0x18>
	conn = bt_conn_lookup_addr_le(BT_ID_DEFAULT, addr);
    b026:	4631      	mov	r1, r6
    b028:	2000      	movs	r0, #0
    b02a:	f7ff fe91 	bl	ad50 <bt_conn_lookup_addr_le>
	if (!conn) {
    b02e:	4604      	mov	r4, r0
    b030:	b928      	cbnz	r0, b03e <bt_le_set_auto_conn+0x42>
		conn = bt_conn_add_le(BT_ID_DEFAULT, addr);
    b032:	4631      	mov	r1, r6
    b034:	f7ff fcf6 	bl	aa24 <bt_conn_add_le>
		if (!conn) {
    b038:	4604      	mov	r4, r0
    b03a:	2800      	cmp	r0, #0
    b03c:	d050      	beq.n	b0e0 <bt_le_set_auto_conn+0xe4>
	if (param) {
    b03e:	1d23      	adds	r3, r4, #4
    b040:	f104 0654 	add.w	r6, r4, #84	; 0x54
    b044:	b385      	cbz	r5, b0a8 <bt_le_set_auto_conn+0xac>
	conn->le.interval_min = param->interval_min;
    b046:	882a      	ldrh	r2, [r5, #0]
    b048:	f8a4 20a0 	strh.w	r2, [r4, #160]	; 0xa0
	conn->le.interval_max = param->interval_max;
    b04c:	886a      	ldrh	r2, [r5, #2]
    b04e:	f8a4 20a2 	strh.w	r2, [r4, #162]	; 0xa2
	conn->le.latency = param->latency;
    b052:	88aa      	ldrh	r2, [r5, #4]
    b054:	f8a4 20a4 	strh.w	r2, [r4, #164]	; 0xa4
	conn->le.timeout = param->timeout;
    b058:	88ea      	ldrh	r2, [r5, #6]
    b05a:	f8a4 20a6 	strh.w	r2, [r4, #166]	; 0xa6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b05e:	f3bf 8f5b 	dmb	ish
    b062:	e853 2f00 	ldrex	r2, [r3]
    b066:	f042 0101 	orr.w	r1, r2, #1
    b06a:	e843 1000 	strex	r0, r1, [r3]
    b06e:	2800      	cmp	r0, #0
    b070:	d1f7      	bne.n	b062 <bt_le_set_auto_conn+0x66>
    b072:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_and_set_bit(conn->flags,
    b076:	07d1      	lsls	r1, r2, #31
    b078:	d402      	bmi.n	b080 <bt_le_set_auto_conn+0x84>
	atomic_val_t old = atomic_inc(&conn->ref);
    b07a:	4630      	mov	r0, r6
    b07c:	f015 f9f8 	bl	20470 <atomic_inc>
	if (conn->state == BT_CONN_DISCONNECTED &&
    b080:	7b63      	ldrb	r3, [r4, #13]
    b082:	b963      	cbnz	r3, b09e <bt_le_set_auto_conn+0xa2>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    b084:	4818      	ldr	r0, [pc, #96]	; (b0e8 <bt_le_set_auto_conn+0xec>)
    b086:	f015 f9d5 	bl	20434 <atomic_get>
    b08a:	0783      	lsls	r3, r0, #30
    b08c:	d507      	bpl.n	b09e <bt_le_set_auto_conn+0xa2>
		if (param) {
    b08e:	b11d      	cbz	r5, b098 <bt_le_set_auto_conn+0x9c>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    b090:	2101      	movs	r1, #1
    b092:	4620      	mov	r0, r4
    b094:	f7ff fd38 	bl	ab08 <bt_conn_set_state>
		bt_le_scan_update(false);
    b098:	2000      	movs	r0, #0
    b09a:	f7fe fa81 	bl	95a0 <bt_le_scan_update>
	atomic_val_t old = atomic_dec(&conn->ref);
    b09e:	4630      	mov	r0, r6
    b0a0:	f015 f9d9 	bl	20456 <atomic_dec>
	return 0;
    b0a4:	2000      	movs	r0, #0
    b0a6:	e7b7      	b.n	b018 <bt_le_set_auto_conn+0x1c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    b0a8:	f3bf 8f5b 	dmb	ish
    b0ac:	e853 2f00 	ldrex	r2, [r3]
    b0b0:	f022 0101 	bic.w	r1, r2, #1
    b0b4:	e843 1000 	strex	r0, r1, [r3]
    b0b8:	2800      	cmp	r0, #0
    b0ba:	d1f7      	bne.n	b0ac <bt_le_set_auto_conn+0xb0>
    b0bc:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_clear_bit(conn->flags,
    b0c0:	07d2      	lsls	r2, r2, #31
    b0c2:	d5dd      	bpl.n	b080 <bt_le_set_auto_conn+0x84>
	atomic_val_t old = atomic_dec(&conn->ref);
    b0c4:	4630      	mov	r0, r6
    b0c6:	f015 f9c6 	bl	20456 <atomic_dec>
			if (conn->state == BT_CONN_CONNECT_SCAN) {
    b0ca:	7b63      	ldrb	r3, [r4, #13]
    b0cc:	2b01      	cmp	r3, #1
    b0ce:	d1d7      	bne.n	b080 <bt_le_set_auto_conn+0x84>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    b0d0:	4629      	mov	r1, r5
    b0d2:	4620      	mov	r0, r4
    b0d4:	f7ff fd18 	bl	ab08 <bt_conn_set_state>
    b0d8:	e7d2      	b.n	b080 <bt_le_set_auto_conn+0x84>
		return -EAGAIN;
    b0da:	f06f 000a 	mvn.w	r0, #10
    b0de:	e79b      	b.n	b018 <bt_le_set_auto_conn+0x1c>
			return -ENOMEM;
    b0e0:	f06f 000b 	mvn.w	r0, #11
    b0e4:	e798      	b.n	b018 <bt_le_set_auto_conn+0x1c>
    b0e6:	bf00      	nop
    b0e8:	20000098 	.word	0x20000098

0000b0ec <bt_conn_disconnect>:
{
    b0ec:	b538      	push	{r3, r4, r5, lr}
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    b0ee:	7883      	ldrb	r3, [r0, #2]
    b0f0:	2b01      	cmp	r3, #1
{
    b0f2:	4604      	mov	r4, r0
    b0f4:	460d      	mov	r5, r1
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    b0f6:	d103      	bne.n	b100 <bt_conn_disconnect+0x14>
		bt_le_set_auto_conn(&conn->le.dst, NULL);
    b0f8:	2100      	movs	r1, #0
    b0fa:	3088      	adds	r0, #136	; 0x88
    b0fc:	f7ff ff7e 	bl	affc <bt_le_set_auto_conn>
	switch (conn->state) {
    b100:	7b63      	ldrb	r3, [r4, #13]
    b102:	3b01      	subs	r3, #1
    b104:	2b06      	cmp	r3, #6
    b106:	d805      	bhi.n	b114 <bt_conn_disconnect+0x28>
    b108:	e8df f003 	tbb	[pc, r3]
    b10c:	12040408 	.word	0x12040408
    b110:	2a22      	.short	0x2a22
    b112:	10          	.byte	0x10
    b113:	00          	.byte	0x00
    b114:	f06f 0538 	mvn.w	r5, #56	; 0x38
}
    b118:	4628      	mov	r0, r5
    b11a:	bd38      	pop	{r3, r4, r5, pc}
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    b11c:	4620      	mov	r0, r4
		conn->err = reason;
    b11e:	7325      	strb	r5, [r4, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    b120:	2100      	movs	r1, #0
    b122:	f7ff fcf1 	bl	ab08 <bt_conn_set_state>
			bt_le_scan_update(false);
    b126:	2000      	movs	r0, #0
    b128:	f7fe fa3a 	bl	95a0 <bt_le_scan_update>
		return 0;
    b12c:	2500      	movs	r5, #0
    b12e:	e7f3      	b.n	b118 <bt_conn_disconnect+0x2c>
    b130:	4911      	ldr	r1, [pc, #68]	; (b178 <bt_conn_disconnect+0x8c>)
    b132:	4b12      	ldr	r3, [pc, #72]	; (b17c <bt_conn_disconnect+0x90>)
		BT_WARN("Deprecated: Use bt_le_adv_stop instead");
    b134:	4812      	ldr	r0, [pc, #72]	; (b180 <bt_conn_disconnect+0x94>)
    b136:	1a5b      	subs	r3, r3, r1
    b138:	08db      	lsrs	r3, r3, #3
    b13a:	019b      	lsls	r3, r3, #6
    b13c:	f043 0102 	orr.w	r1, r3, #2
    b140:	f013 f9c3 	bl	1e4ca <log_0>
		conn->err = reason;
    b144:	7325      	strb	r5, [r4, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    b146:	2100      	movs	r1, #0
    b148:	4620      	mov	r0, r4
    b14a:	f7ff fcdd 	bl	ab08 <bt_conn_set_state>
		return 0;
    b14e:	e7ed      	b.n	b12c <bt_conn_disconnect+0x40>
			k_delayed_work_cancel(&conn->update_work);
    b150:	f104 0058 	add.w	r0, r4, #88	; 0x58
    b154:	f017 ffd4 	bl	23100 <k_delayed_work_cancel>
}
    b158:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			return bt_le_create_conn_cancel();
    b15c:	f7fd bf9e 	b.w	909c <bt_le_create_conn_cancel>
	err = bt_hci_disconnect(conn->handle, reason);
    b160:	4629      	mov	r1, r5
    b162:	8820      	ldrh	r0, [r4, #0]
    b164:	f015 f885 	bl	20272 <bt_hci_disconnect>
	if (err) {
    b168:	4605      	mov	r5, r0
    b16a:	2800      	cmp	r0, #0
    b16c:	d1d4      	bne.n	b118 <bt_conn_disconnect+0x2c>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT);
    b16e:	2107      	movs	r1, #7
    b170:	4620      	mov	r0, r4
    b172:	f7ff fcc9 	bl	ab08 <bt_conn_set_state>
	return 0;
    b176:	e7cf      	b.n	b118 <bt_conn_disconnect+0x2c>
    b178:	000236e8 	.word	0x000236e8
    b17c:	000236f0 	.word	0x000236f0
    b180:	00026229 	.word	0x00026229

0000b184 <bt_conn_create_pdu_timeout>:
						 const char *func, int line)
#else
struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
					   size_t reserve, k_timeout_t timeout)
#endif
{
    b184:	b538      	push	{r3, r4, r5, lr}
    b186:	460d      	mov	r5, r1
	} else {
#if defined(CONFIG_NET_BUF_LOG)
		buf = net_buf_alloc_fixed_debug(pool, timeout, func,
							line);
#else
		buf = net_buf_alloc(pool, timeout);
    b188:	490c      	ldr	r1, [pc, #48]	; (b1bc <bt_conn_create_pdu_timeout+0x38>)
    b18a:	2800      	cmp	r0, #0
    b18c:	bf08      	it	eq
    b18e:	4608      	moveq	r0, r1
    b190:	f017 f996 	bl	224c0 <net_buf_alloc_fixed>
#endif
	}

	if (!buf) {
    b194:	4604      	mov	r4, r0
    b196:	b958      	cbnz	r0, b1b0 <bt_conn_create_pdu_timeout+0x2c>
    b198:	4909      	ldr	r1, [pc, #36]	; (b1c0 <bt_conn_create_pdu_timeout+0x3c>)
    b19a:	4b0a      	ldr	r3, [pc, #40]	; (b1c4 <bt_conn_create_pdu_timeout+0x40>)
		BT_WARN("Unable to allocate buffer within timeout");
    b19c:	480a      	ldr	r0, [pc, #40]	; (b1c8 <bt_conn_create_pdu_timeout+0x44>)
    b19e:	1ac9      	subs	r1, r1, r3
    b1a0:	08c9      	lsrs	r1, r1, #3
    b1a2:	0189      	lsls	r1, r1, #6
    b1a4:	f041 0102 	orr.w	r1, r1, #2
    b1a8:	f013 f98f 	bl	1e4ca <log_0>

	reserve += sizeof(struct bt_hci_acl_hdr) + BT_BUF_RESERVE;
	net_buf_reserve(buf, reserve);

	return buf;
}
    b1ac:	4620      	mov	r0, r4
    b1ae:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_reserve(buf, reserve);
    b1b0:	1d29      	adds	r1, r5, #4
    b1b2:	3008      	adds	r0, #8
    b1b4:	f017 f9a9 	bl	2250a <net_buf_simple_reserve>
	return buf;
    b1b8:	e7f8      	b.n	b1ac <bt_conn_create_pdu_timeout+0x28>
    b1ba:	bf00      	nop
    b1bc:	200008d8 	.word	0x200008d8
    b1c0:	000236f0 	.word	0x000236f0
    b1c4:	000236e8 	.word	0x000236e8
    b1c8:	00026250 	.word	0x00026250

0000b1cc <bt_conn_create_frag_timeout>:
{
    b1cc:	4601      	mov	r1, r0
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
    b1ce:	4801      	ldr	r0, [pc, #4]	; (b1d4 <bt_conn_create_frag_timeout+0x8>)
    b1d0:	f7ff bfd8 	b.w	b184 <bt_conn_create_pdu_timeout>
    b1d4:	20000950 	.word	0x20000950

0000b1d8 <create_frag.isra.0>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    b1d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b1dc:	4606      	mov	r6, r0
	frag = bt_conn_create_frag(0);
    b1de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    b1e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    b1e6:	2000      	movs	r0, #0
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    b1e8:	460c      	mov	r4, r1
	frag = bt_conn_create_frag(0);
    b1ea:	f7ff ffef 	bl	b1cc <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
    b1ee:	7833      	ldrb	r3, [r6, #0]
    b1f0:	2b06      	cmp	r3, #6
	frag = bt_conn_create_frag(0);
    b1f2:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
    b1f4:	f04f 0600 	mov.w	r6, #0
    b1f8:	d005      	beq.n	b206 <create_frag.isra.0+0x2e>
		net_buf_unref(frag);
    b1fa:	f010 fc6d 	bl	1bad8 <net_buf_unref>
		return NULL;
    b1fe:	4635      	mov	r5, r6
}
    b200:	4628      	mov	r0, r5
    b202:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
    b206:	6146      	str	r6, [r0, #20]
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    b208:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.mtu;
    b20c:	4e0c      	ldr	r6, [pc, #48]	; (b240 <create_frag.isra.0+0x68>)
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    b20e:	4638      	mov	r0, r7
    b210:	f8b6 80b0 	ldrh.w	r8, [r6, #176]	; 0xb0
    b214:	f017 fa15 	bl	22642 <net_buf_simple_tailroom>
    b218:	4580      	cmp	r8, r0
    b21a:	d20c      	bcs.n	b236 <create_frag.isra.0+0x5e>
	return bt_dev.le.mtu;
    b21c:	f8b6 60b0 	ldrh.w	r6, [r6, #176]	; 0xb0
	net_buf_add_mem(frag, buf->data, frag_len);
    b220:	f854 1f08 	ldr.w	r1, [r4, #8]!
    b224:	4632      	mov	r2, r6
    b226:	4638      	mov	r0, r7
    b228:	f017 f9b8 	bl	2259c <net_buf_simple_add_mem>
	net_buf_pull(buf, frag_len);
    b22c:	4631      	mov	r1, r6
    b22e:	4620      	mov	r0, r4
    b230:	f017 f9e3 	bl	225fa <net_buf_simple_pull>
	return frag;
    b234:	e7e4      	b.n	b200 <create_frag.isra.0+0x28>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    b236:	4638      	mov	r0, r7
    b238:	f017 fa03 	bl	22642 <net_buf_simple_tailroom>
    b23c:	b286      	uxth	r6, r0
    b23e:	e7ef      	b.n	b220 <create_frag.isra.0+0x48>
    b240:	20000000 	.word	0x20000000

0000b244 <bt_conn_process_tx>:
{
    b244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
    b246:	7b43      	ldrb	r3, [r0, #13]
{
    b248:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
    b24a:	b993      	cbnz	r3, b272 <bt_conn_process_tx+0x2e>
    b24c:	f3bf 8f5b 	dmb	ish
    b250:	1d03      	adds	r3, r0, #4
    b252:	e853 2f00 	ldrex	r2, [r3]
    b256:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    b25a:	e843 1400 	strex	r4, r1, [r3]
    b25e:	2c00      	cmp	r4, #0
    b260:	d1f7      	bne.n	b252 <bt_conn_process_tx+0xe>
    b262:	f3bf 8f5b 	dmb	ish
    b266:	0653      	lsls	r3, r2, #25
    b268:	d503      	bpl.n	b272 <bt_conn_process_tx+0x2e>
}
    b26a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		conn_cleanup(conn);
    b26e:	f7ff b9db 	b.w	a628 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    b272:	2200      	movs	r2, #0
    b274:	2300      	movs	r3, #0
    b276:	f105 0034 	add.w	r0, r5, #52	; 0x34
    b27a:	f017 f926 	bl	224ca <net_buf_get>
	BT_ASSERT(buf);
    b27e:	4604      	mov	r4, r0
    b280:	b960      	cbnz	r0, b29c <bt_conn_process_tx+0x58>
    b282:	4a20      	ldr	r2, [pc, #128]	; (b304 <bt_conn_process_tx+0xc0>)
    b284:	4920      	ldr	r1, [pc, #128]	; (b308 <bt_conn_process_tx+0xc4>)
    b286:	4821      	ldr	r0, [pc, #132]	; (b30c <bt_conn_process_tx+0xc8>)
    b288:	f240 6326 	movw	r3, #1574	; 0x626
    b28c:	f012 fe5d 	bl	1df4a <printk>
    b290:	4040      	eors	r0, r0
    b292:	f380 8811 	msr	BASEPRI, r0
    b296:	f04f 0003 	mov.w	r0, #3
    b29a:	df02      	svc	2
	return bt_dev.le.mtu;
    b29c:	4f1c      	ldr	r7, [pc, #112]	; (b310 <bt_conn_process_tx+0xcc>)
	if (buf->len <= conn_mtu(conn)) {
    b29e:	89a1      	ldrh	r1, [r4, #12]
    b2a0:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
    b2a4:	4291      	cmp	r1, r2
    b2a6:	d807      	bhi.n	b2b8 <bt_conn_process_tx+0x74>
		return send_frag(conn, buf, BT_ACL_START_NO_FLUSH, false);
    b2a8:	2300      	movs	r3, #0
    b2aa:	461a      	mov	r2, r3
	return send_frag(conn, buf, BT_ACL_CONT, false);
    b2ac:	4621      	mov	r1, r4
    b2ae:	4628      	mov	r0, r5
    b2b0:	f7ff f8ec 	bl	a48c <send_frag>
	if (!send_buf(conn, buf)) {
    b2b4:	b140      	cbz	r0, b2c8 <bt_conn_process_tx+0x84>
}
    b2b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	frag = create_frag(conn, buf);
    b2b8:	f105 060d 	add.w	r6, r5, #13
    b2bc:	4621      	mov	r1, r4
    b2be:	4630      	mov	r0, r6
    b2c0:	f7ff ff8a 	bl	b1d8 <create_frag.isra.0>
	if (!frag) {
    b2c4:	4601      	mov	r1, r0
    b2c6:	b920      	cbnz	r0, b2d2 <bt_conn_process_tx+0x8e>
		net_buf_unref(buf);
    b2c8:	4620      	mov	r0, r4
}
    b2ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		net_buf_unref(buf);
    b2ce:	f010 bc03 	b.w	1bad8 <net_buf_unref>
	if (!send_frag(conn, frag, BT_ACL_START_NO_FLUSH, true)) {
    b2d2:	2301      	movs	r3, #1
    b2d4:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    b2d6:	4628      	mov	r0, r5
    b2d8:	f7ff f8d8 	bl	a48c <send_frag>
    b2dc:	2800      	cmp	r0, #0
    b2de:	d0f3      	beq.n	b2c8 <bt_conn_process_tx+0x84>
	while (buf->len > conn_mtu(conn)) {
    b2e0:	89a2      	ldrh	r2, [r4, #12]
    b2e2:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
    b2e6:	429a      	cmp	r2, r3
    b2e8:	d802      	bhi.n	b2f0 <bt_conn_process_tx+0xac>
	return send_frag(conn, buf, BT_ACL_CONT, false);
    b2ea:	2300      	movs	r3, #0
    b2ec:	2201      	movs	r2, #1
    b2ee:	e7dd      	b.n	b2ac <bt_conn_process_tx+0x68>
		frag = create_frag(conn, buf);
    b2f0:	4621      	mov	r1, r4
    b2f2:	4630      	mov	r0, r6
    b2f4:	f7ff ff70 	bl	b1d8 <create_frag.isra.0>
		if (!frag) {
    b2f8:	4601      	mov	r1, r0
    b2fa:	2800      	cmp	r0, #0
    b2fc:	d0e4      	beq.n	b2c8 <bt_conn_process_tx+0x84>
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    b2fe:	2301      	movs	r3, #1
    b300:	461a      	mov	r2, r3
    b302:	e7e8      	b.n	b2d6 <bt_conn_process_tx+0x92>
    b304:	00026279 	.word	0x00026279
    b308:	00026d75 	.word	0x00026d75
    b30c:	000259b4 	.word	0x000259b4
    b310:	20000000 	.word	0x20000000

0000b314 <bt_conn_index>:
}
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

uint8_t bt_conn_index(struct bt_conn *conn)
{
	uint8_t index = conn - conns;
    b314:	4b03      	ldr	r3, [pc, #12]	; (b324 <bt_conn_index+0x10>)
    b316:	1ac0      	subs	r0, r0, r3
    b318:	4b03      	ldr	r3, [pc, #12]	; (b328 <bt_conn_index+0x14>)
    b31a:	10c0      	asrs	r0, r0, #3
    b31c:	4358      	muls	r0, r3

	__ASSERT(index < CONFIG_BT_MAX_CONN, "Invalid bt_conn pointer");
	return index;
}
    b31e:	b2c0      	uxtb	r0, r0
    b320:	4770      	bx	lr
    b322:	bf00      	nop
    b324:	20000bd0 	.word	0x20000bd0
    b328:	e9bd37a7 	.word	0xe9bd37a7

0000b32c <bt_conn_lookup_index>:

struct bt_conn *bt_conn_lookup_index(uint8_t index)
{
	struct bt_conn *conn;

	if (index >= ARRAY_SIZE(conns)) {
    b32c:	2803      	cmp	r0, #3
{
    b32e:	b510      	push	{r4, lr}
	if (index >= ARRAY_SIZE(conns)) {
    b330:	d902      	bls.n	b338 <bt_conn_lookup_index+0xc>
		return NULL;
    b332:	2400      	movs	r4, #0
	if (!atomic_get(&conn->ref)) {
		return NULL;
	}

	return bt_conn_ref(conn);
}
    b334:	4620      	mov	r0, r4
    b336:	bd10      	pop	{r4, pc}
	conn = &conns[index];
    b338:	23b8      	movs	r3, #184	; 0xb8
    b33a:	fb10 f303 	smulbb	r3, r0, r3
	if (!atomic_get(&conn->ref)) {
    b33e:	4c07      	ldr	r4, [pc, #28]	; (b35c <bt_conn_lookup_index+0x30>)
    b340:	f103 0154 	add.w	r1, r3, #84	; 0x54
    b344:	4421      	add	r1, r4
    b346:	4608      	mov	r0, r1
    b348:	f015 f874 	bl	20434 <atomic_get>
    b34c:	2800      	cmp	r0, #0
    b34e:	d0f0      	beq.n	b332 <bt_conn_lookup_index+0x6>
	atomic_val_t old = atomic_inc(&conn->ref);
    b350:	4608      	mov	r0, r1
	conn = &conns[index];
    b352:	441c      	add	r4, r3
	atomic_val_t old = atomic_inc(&conn->ref);
    b354:	f015 f88c 	bl	20470 <atomic_inc>
	return bt_conn_ref(conn);
    b358:	e7ec      	b.n	b334 <bt_conn_lookup_index+0x8>
    b35a:	bf00      	nop
    b35c:	20000bd0 	.word	0x20000bd0

0000b360 <bt_conn_init>:

int bt_conn_init(void)
{
    b360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b362:	4d17      	ldr	r5, [pc, #92]	; (b3c0 <bt_conn_init+0x60>)
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
    b364:	4e17      	ldr	r6, [pc, #92]	; (b3c4 <bt_conn_init+0x64>)
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
    b366:	2400      	movs	r4, #0
		k_fifo_put(&free_tx, &conn_tx[i]);
    b368:	4629      	mov	r1, r5
    b36a:	4630      	mov	r0, r6
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
    b36c:	3401      	adds	r4, #1
		k_fifo_put(&free_tx, &conn_tx[i]);
    b36e:	f017 fcc9 	bl	22d04 <k_queue_append>
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
    b372:	2c0a      	cmp	r4, #10
    b374:	f105 0510 	add.w	r5, r5, #16
    b378:	d1f6      	bne.n	b368 <bt_conn_init+0x8>
	}

	bt_att_init();
    b37a:	f015 fffc 	bl	21376 <bt_att_init>

	err = bt_smp_init();
    b37e:	f004 fd43 	bl	fe08 <bt_smp_init>
	if (err) {
    b382:	4604      	mov	r4, r0
    b384:	b9d0      	cbnz	r0, b3bc <bt_conn_init+0x5c>
		return err;
	}

	bt_l2cap_init();
    b386:	f015 fc95 	bl	20cb4 <bt_l2cap_init>

	/* Initialize background scan */
	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		for (i = 0; i < ARRAY_SIZE(conns); i++) {
    b38a:	4d0f      	ldr	r5, [pc, #60]	; (b3c8 <bt_conn_init+0x68>)
    b38c:	4626      	mov	r6, r4

#if !defined(CONFIG_BT_WHITELIST)
			if (atomic_test_bit(conn->flags,
					    BT_CONN_AUTO_CONNECT)) {
				/* Only the default identity is supported */
				conn->id = BT_ID_DEFAULT;
    b38e:	4627      	mov	r7, r4
			if (!atomic_get(&conn->ref)) {
    b390:	4628      	mov	r0, r5
    b392:	f015 f84f 	bl	20434 <atomic_get>
    b396:	b160      	cbz	r0, b3b2 <bt_conn_init+0x52>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    b398:	f1a5 0050 	sub.w	r0, r5, #80	; 0x50
    b39c:	f015 f84a 	bl	20434 <atomic_get>
			if (atomic_test_bit(conn->flags,
    b3a0:	07c3      	lsls	r3, r0, #31
    b3a2:	d506      	bpl.n	b3b2 <bt_conn_init+0x52>
				conn->id = BT_ID_DEFAULT;
    b3a4:	f805 7c4c 	strb.w	r7, [r5, #-76]
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    b3a8:	2101      	movs	r1, #1
    b3aa:	f1a5 0054 	sub.w	r0, r5, #84	; 0x54
    b3ae:	f7ff fbab 	bl	ab08 <bt_conn_set_state>
		for (i = 0; i < ARRAY_SIZE(conns); i++) {
    b3b2:	3601      	adds	r6, #1
    b3b4:	2e04      	cmp	r6, #4
    b3b6:	f105 05b8 	add.w	r5, r5, #184	; 0xb8
    b3ba:	d1e9      	bne.n	b390 <bt_conn_init+0x30>
#endif /* !defined(CONFIG_BT_WHITELIST) */
		}
	}

	return 0;
}
    b3bc:	4620      	mov	r0, r4
    b3be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b3c0:	200021f8 	.word	0x200021f8
    b3c4:	200008a8 	.word	0x200008a8
    b3c8:	20000c24 	.word	0x20000c24

0000b3cc <get_ident>:

static uint8_t get_ident(void)
{
	static uint8_t ident;

	ident++;
    b3cc:	4b04      	ldr	r3, [pc, #16]	; (b3e0 <get_ident+0x14>)
    b3ce:	781a      	ldrb	r2, [r3, #0]
    b3d0:	3201      	adds	r2, #1
	/* handle integer overflow (0 is not valid) */
	if (!ident) {
    b3d2:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
    b3d6:	bf08      	it	eq
    b3d8:	2201      	moveq	r2, #1
    b3da:	701a      	strb	r2, [r3, #0]
	}

	return ident;
}
    b3dc:	7818      	ldrb	r0, [r3, #0]
    b3de:	4770      	bx	lr
    b3e0:	2000a84c 	.word	0x2000a84c

0000b3e4 <l2cap_server_lookup_psm>:
#if defined(CONFIG_BT_L2CAP_DYNAMIC_CHANNEL)
static struct bt_l2cap_server *l2cap_server_lookup_psm(uint16_t psm)
{
	struct bt_l2cap_server *server;

	SYS_SLIST_FOR_EACH_CONTAINER(&servers, server, node) {
    b3e4:	4a08      	ldr	r2, [pc, #32]	; (b408 <l2cap_server_lookup_psm+0x24>)
{
    b3e6:	4603      	mov	r3, r0
	SYS_SLIST_FOR_EACH_CONTAINER(&servers, server, node) {
    b3e8:	6810      	ldr	r0, [r2, #0]
    b3ea:	b158      	cbz	r0, b404 <l2cap_server_lookup_psm+0x20>
    b3ec:	3808      	subs	r0, #8
    b3ee:	b900      	cbnz	r0, b3f2 <l2cap_server_lookup_psm+0xe>
    b3f0:	4770      	bx	lr
		if (server->psm == psm) {
    b3f2:	8802      	ldrh	r2, [r0, #0]
    b3f4:	429a      	cmp	r2, r3
    b3f6:	d005      	beq.n	b404 <l2cap_server_lookup_psm+0x20>
Z_GENLIST_PEEK_NEXT(slist, snode)
    b3f8:	f110 0208 	adds.w	r2, r0, #8
    b3fc:	d001      	beq.n	b402 <l2cap_server_lookup_psm+0x1e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    b3fe:	6880      	ldr	r0, [r0, #8]
    b400:	e7f3      	b.n	b3ea <l2cap_server_lookup_psm+0x6>
			return server;
		}
	}

	return NULL;
    b402:	4610      	mov	r0, r2
}
    b404:	4770      	bx	lr
    b406:	bf00      	nop
    b408:	20002298 	.word	0x20002298

0000b40c <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    b40c:	4b0f      	ldr	r3, [pc, #60]	; (b44c <l2cap_accept+0x40>)
{
    b40e:	b570      	push	{r4, r5, r6, lr}
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
    b410:	2200      	movs	r2, #0
{
    b412:	4604      	mov	r4, r0
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
    b414:	26c0      	movs	r6, #192	; 0xc0
		if (l2cap->chan.chan.conn) {
    b416:	fb06 f502 	mul.w	r5, r6, r2
    b41a:	58e8      	ldr	r0, [r5, r3]
    b41c:	b180      	cbz	r0, b440 <l2cap_accept+0x34>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
    b41e:	3201      	adds	r2, #1
    b420:	2a04      	cmp	r2, #4
    b422:	d1f8      	bne.n	b416 <l2cap_accept+0xa>
    b424:	4b0a      	ldr	r3, [pc, #40]	; (b450 <l2cap_accept+0x44>)
    b426:	4a0b      	ldr	r2, [pc, #44]	; (b454 <l2cap_accept+0x48>)
		*chan = &l2cap->chan.chan;

		return 0;
	}

	BT_ERR("No available L2CAP context for conn %p", conn);
    b428:	480b      	ldr	r0, [pc, #44]	; (b458 <l2cap_accept+0x4c>)
    b42a:	1ad2      	subs	r2, r2, r3
    b42c:	08d2      	lsrs	r2, r2, #3
    b42e:	0192      	lsls	r2, r2, #6
    b430:	f042 0201 	orr.w	r2, r2, #1
    b434:	4621      	mov	r1, r4
    b436:	f013 f855 	bl	1e4e4 <log_1>

	return -ENOMEM;
    b43a:	f06f 000b 	mvn.w	r0, #11
    b43e:	e003      	b.n	b448 <l2cap_accept+0x3c>
		l2cap->chan.chan.ops = &ops;
    b440:	442b      	add	r3, r5
    b442:	4a06      	ldr	r2, [pc, #24]	; (b45c <l2cap_accept+0x50>)
    b444:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
    b446:	600b      	str	r3, [r1, #0]
}
    b448:	bd70      	pop	{r4, r5, r6, pc}
    b44a:	bf00      	nop
    b44c:	20000eb0 	.word	0x20000eb0
    b450:	000236e8 	.word	0x000236e8
    b454:	000237c0 	.word	0x000237c0
    b458:	000262f2 	.word	0x000262f2
    b45c:	00023cec 	.word	0x00023cec

0000b460 <l2cap_create_le_sig_pdu.isra.0>:
	if (code == BT_L2CAP_DISCONN_REQ) {
    b460:	2806      	cmp	r0, #6
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    b462:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b464:	4605      	mov	r5, r0
    b466:	460f      	mov	r7, r1
	return bt_conn_create_pdu_timeout(pool,
    b468:	4811      	ldr	r0, [pc, #68]	; (b4b0 <l2cap_create_le_sig_pdu.isra.0+0x50>)
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    b46a:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
    b46c:	f04f 0300 	mov.w	r3, #0
    b470:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    b474:	f04f 0104 	mov.w	r1, #4
    b478:	bf18      	it	ne
    b47a:	2000      	movne	r0, #0
    b47c:	f7ff fe82 	bl	b184 <bt_conn_create_pdu_timeout>
	if (!buf) {
    b480:	4604      	mov	r4, r0
    b482:	b960      	cbnz	r0, b49e <l2cap_create_le_sig_pdu.isra.0+0x3e>
    b484:	4a0b      	ldr	r2, [pc, #44]	; (b4b4 <l2cap_create_le_sig_pdu.isra.0+0x54>)
    b486:	4b0c      	ldr	r3, [pc, #48]	; (b4b8 <l2cap_create_le_sig_pdu.isra.0+0x58>)
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
    b488:	480c      	ldr	r0, [pc, #48]	; (b4bc <l2cap_create_le_sig_pdu.isra.0+0x5c>)
    b48a:	1ad2      	subs	r2, r2, r3
    b48c:	08d2      	lsrs	r2, r2, #3
    b48e:	0192      	lsls	r2, r2, #6
    b490:	f042 0201 	orr.w	r2, r2, #1
    b494:	4629      	mov	r1, r5
    b496:	f013 f825 	bl	1e4e4 <log_1>
}
    b49a:	4620      	mov	r0, r4
    b49c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	hdr = net_buf_add(buf, sizeof(*hdr));
    b49e:	2104      	movs	r1, #4
    b4a0:	3008      	adds	r0, #8
    b4a2:	f017 f875 	bl	22590 <net_buf_simple_add>
	hdr->code = code;
    b4a6:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
    b4a8:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    b4aa:	8046      	strh	r6, [r0, #2]
	return buf;
    b4ac:	e7f5      	b.n	b49a <l2cap_create_le_sig_pdu.isra.0+0x3a>
    b4ae:	bf00      	nop
    b4b0:	20000900 	.word	0x20000900
    b4b4:	000237c0 	.word	0x000237c0
    b4b8:	000236e8 	.word	0x000236e8
    b4bc:	00026319 	.word	0x00026319

0000b4c0 <l2cap_chan_tx_init>:
{
    b4c0:	b538      	push	{r3, r4, r5, lr}
	(void)memset(&chan->tx, 0, sizeof(chan->tx));
    b4c2:	220c      	movs	r2, #12
{
    b4c4:	4604      	mov	r4, r0
	(void)memset(&chan->tx, 0, sizeof(chan->tx));
    b4c6:	2100      	movs	r1, #0
    b4c8:	305c      	adds	r0, #92	; 0x5c
    b4ca:	f014 fcfb 	bl	1fec4 <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    b4ce:	f3bf 8f5b 	dmb	ish
    b4d2:	f104 0364 	add.w	r3, r4, #100	; 0x64
    b4d6:	2500      	movs	r5, #0
    b4d8:	e853 2f00 	ldrex	r2, [r3]
    b4dc:	e843 5100 	strex	r1, r5, [r3]
    b4e0:	2900      	cmp	r1, #0
    b4e2:	d1f9      	bne.n	b4d8 <l2cap_chan_tx_init+0x18>
    b4e4:	f3bf 8f5b 	dmb	ish
	z_impl_k_queue_init(queue);
    b4e8:	f104 0068 	add.w	r0, r4, #104	; 0x68
    b4ec:	f017 fbfe 	bl	22cec <z_impl_k_queue_init>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    b4f0:	4b02      	ldr	r3, [pc, #8]	; (b4fc <l2cap_chan_tx_init+0x3c>)
    b4f2:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
    b4f6:	e9c4 3522 	strd	r3, r5, [r4, #136]	; 0x88
}
    b4fa:	bd38      	pop	{r3, r4, r5, pc}
    b4fc:	00020a2f 	.word	0x00020a2f

0000b500 <k_work_submit_to_queue.constprop.0>:
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
    b500:	4601      	mov	r1, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b502:	f100 0308 	add.w	r3, r0, #8
    b506:	f3bf 8f5b 	dmb	ish
    b50a:	e853 2f00 	ldrex	r2, [r3]
    b50e:	f042 0001 	orr.w	r0, r2, #1
    b512:	e843 0c00 	strex	ip, r0, [r3]
    b516:	f1bc 0f00 	cmp.w	ip, #0
    b51a:	d1f6      	bne.n	b50a <k_work_submit_to_queue.constprop.0+0xa>
    b51c:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    b520:	07d3      	lsls	r3, r2, #31
    b522:	d402      	bmi.n	b52a <k_work_submit_to_queue.constprop.0+0x2a>
		k_queue_append(&work_q->queue, work);
    b524:	4801      	ldr	r0, [pc, #4]	; (b52c <k_work_submit_to_queue.constprop.0+0x2c>)
    b526:	f017 bbed 	b.w	22d04 <k_queue_append>
}
    b52a:	4770      	bx	lr
    b52c:	20001c50 	.word	0x20001c50

0000b530 <l2cap_rtx_timeout>:
{
    b530:	b538      	push	{r3, r4, r5, lr}
    b532:	4a10      	ldr	r2, [pc, #64]	; (b574 <l2cap_rtx_timeout+0x44>)
    b534:	4b10      	ldr	r3, [pc, #64]	; (b578 <l2cap_rtx_timeout+0x48>)
	struct bt_conn *conn = chan->chan.conn;
    b536:	f850 5c10 	ldr.w	r5, [r0, #-16]
    b53a:	1ad2      	subs	r2, r2, r3
    b53c:	08d2      	lsrs	r2, r2, #3
	struct bt_l2cap_le_chan *chan = LE_CHAN_RTX(work);
    b53e:	f1a0 0410 	sub.w	r4, r0, #16
	BT_ERR("chan %p timeout", chan);
    b542:	0192      	lsls	r2, r2, #6
    b544:	480d      	ldr	r0, [pc, #52]	; (b57c <l2cap_rtx_timeout+0x4c>)
    b546:	f042 0201 	orr.w	r2, r2, #1
    b54a:	4621      	mov	r1, r4
    b54c:	f012 ffca 	bl	1e4e4 <log_1>
	bt_l2cap_chan_remove(conn, &chan->chan);
    b550:	4628      	mov	r0, r5
    b552:	4621      	mov	r1, r4
    b554:	f015 f9c5 	bl	208e2 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
    b558:	4620      	mov	r0, r4
		bt_l2cap_chan_del(&chan->chan);
    b55a:	f015 f9db 	bl	20914 <bt_l2cap_chan_del>
	while ((chan = l2cap_remove_ident(conn, chan->chan.ident))) {
    b55e:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
    b562:	2201      	movs	r2, #1
    b564:	4628      	mov	r0, r5
    b566:	f015 f88b 	bl	20680 <__l2cap_lookup_ident>
    b56a:	4604      	mov	r4, r0
    b56c:	2800      	cmp	r0, #0
    b56e:	d1f4      	bne.n	b55a <l2cap_rtx_timeout+0x2a>
}
    b570:	bd38      	pop	{r3, r4, r5, pc}
    b572:	bf00      	nop
    b574:	000237c0 	.word	0x000237c0
    b578:	000236e8 	.word	0x000236e8
    b57c:	00026341 	.word	0x00026341

0000b580 <l2cap_chan_le_send>:
{
    b580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b584:	4606      	mov	r6, r0
    b586:	b085      	sub	sp, #20
    b588:	460d      	mov	r5, r1
    b58a:	4617      	mov	r7, r2
	if (!test_and_dec(&ch->tx.credits)) {
    b58c:	f100 0864 	add.w	r8, r0, #100	; 0x64
		old_value = atomic_get(target);
    b590:	4640      	mov	r0, r8
    b592:	f015 f8bd 	bl	20710 <atomic_get>
		if (!old_value) {
    b596:	2800      	cmp	r0, #0
    b598:	f000 80c6 	beq.w	b728 <l2cap_chan_le_send+0x1a8>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    b59c:	f3bf 8f5b 	dmb	ish
		new_value = old_value - 1;
    b5a0:	1e43      	subs	r3, r0, #1
    b5a2:	e858 2f00 	ldrex	r2, [r8]
    b5a6:	4282      	cmp	r2, r0
    b5a8:	d103      	bne.n	b5b2 <l2cap_chan_le_send+0x32>
    b5aa:	e848 3100 	strex	r1, r3, [r8]
    b5ae:	2900      	cmp	r1, #0
    b5b0:	d1f7      	bne.n	b5a2 <l2cap_chan_le_send+0x22>
    b5b2:	f3bf 8f5b 	dmb	ish
	} while (atomic_cas(target, old_value, new_value) == 0);
    b5b6:	d1eb      	bne.n	b590 <l2cap_chan_le_send+0x10>
	net_buf_simple_save(&buf->b, &state);
    b5b8:	f105 0b08 	add.w	fp, r5, #8
	state->offset = net_buf_simple_headroom(buf);
    b5bc:	4658      	mov	r0, fp
    b5be:	f017 f83c 	bl	2263a <net_buf_simple_headroom>
	state->len = buf->len;
    b5c2:	f8b5 a00c 	ldrh.w	sl, [r5, #12]
	if (buf->len + sdu_hdr_len > ch->tx.mps) {
    b5c6:	f8b6 3060 	ldrh.w	r3, [r6, #96]	; 0x60
	state->offset = net_buf_simple_headroom(buf);
    b5ca:	9002      	str	r0, [sp, #8]
    b5cc:	eb0a 0207 	add.w	r2, sl, r7
    b5d0:	429a      	cmp	r2, r3
    b5d2:	d81e      	bhi.n	b612 <l2cap_chan_le_send+0x92>
	if (net_buf_headroom(buf) >= headroom && !buf->frags) {
    b5d4:	4658      	mov	r0, fp
    b5d6:	f017 f830 	bl	2263a <net_buf_simple_headroom>
	headroom = BT_L2CAP_CHAN_SEND_RESERVE + sdu_hdr_len;
    b5da:	f107 0308 	add.w	r3, r7, #8
	if (net_buf_headroom(buf) >= headroom && !buf->frags) {
    b5de:	b29b      	uxth	r3, r3
    b5e0:	4298      	cmp	r0, r3
    b5e2:	d316      	bcc.n	b612 <l2cap_chan_le_send+0x92>
    b5e4:	682b      	ldr	r3, [r5, #0]
    b5e6:	b9a3      	cbnz	r3, b612 <l2cap_chan_le_send+0x92>
		if (sdu_hdr_len) {
    b5e8:	b137      	cbz	r7, b5f8 <l2cap_chan_le_send+0x78>
			net_buf_push_le16(buf, net_buf_frags_len(buf));
    b5ea:	4628      	mov	r0, r5
    b5ec:	f015 f840 	bl	20670 <net_buf_frags_len>
    b5f0:	b281      	uxth	r1, r0
    b5f2:	4658      	mov	r0, fp
    b5f4:	f016 fff5 	bl	225e2 <net_buf_simple_push_le16>
		return net_buf_ref(buf);
    b5f8:	4628      	mov	r0, r5
    b5fa:	f016 ff97 	bl	2252c <net_buf_ref>
	if (!seg) {
    b5fe:	4604      	mov	r4, r0
    b600:	2800      	cmp	r0, #0
    b602:	d138      	bne.n	b676 <l2cap_chan_le_send+0xf6>
	return atomic_add(target, 1);
    b604:	2101      	movs	r1, #1
    b606:	4640      	mov	r0, r8
    b608:	f015 f888 	bl	2071c <atomic_add>
		return -EAGAIN;
    b60c:	f06f 070a 	mvn.w	r7, #10
    b610:	e084      	b.n	b71c <l2cap_chan_le_send+0x19c>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    b612:	79a8      	ldrb	r0, [r5, #6]
    b614:	f010 f9a4 	bl	1b960 <net_buf_pool_get>
	seg = net_buf_alloc(pool, K_NO_WAIT);
    b618:	2200      	movs	r2, #0
    b61a:	2300      	movs	r3, #0
    b61c:	f016 ff50 	bl	224c0 <net_buf_alloc_fixed>
	if (seg) {
    b620:	4604      	mov	r4, r0
    b622:	2800      	cmp	r0, #0
    b624:	d055      	beq.n	b6d2 <l2cap_chan_le_send+0x152>
		net_buf_reserve(seg, BT_L2CAP_CHAN_SEND_RESERVE);
    b626:	2108      	movs	r1, #8
    b628:	4408      	add	r0, r1
    b62a:	f016 ff6e 	bl	2250a <net_buf_simple_reserve>
	if (sdu_hdr_len) {
    b62e:	f104 0908 	add.w	r9, r4, #8
    b632:	b137      	cbz	r7, b642 <l2cap_chan_le_send+0xc2>
		net_buf_add_le16(seg, net_buf_frags_len(buf));
    b634:	4628      	mov	r0, r5
    b636:	f015 f81b 	bl	20670 <net_buf_frags_len>
    b63a:	b281      	uxth	r1, r0
    b63c:	4648      	mov	r0, r9
    b63e:	f016 ffbe 	bl	225be <net_buf_simple_add_le16>
	len = MIN(net_buf_tailroom(seg), ch->tx.mps - sdu_hdr_len);
    b642:	4648      	mov	r0, r9
    b644:	f016 fffd 	bl	22642 <net_buf_simple_tailroom>
    b648:	f8b6 1060 	ldrh.w	r1, [r6, #96]	; 0x60
    b64c:	1bc9      	subs	r1, r1, r7
    b64e:	4288      	cmp	r0, r1
    b650:	d248      	bcs.n	b6e4 <l2cap_chan_le_send+0x164>
    b652:	4648      	mov	r0, r9
    b654:	f016 fff5 	bl	22642 <net_buf_simple_tailroom>
    b658:	b282      	uxth	r2, r0
	len = MIN(buf->len, len);
    b65a:	89a9      	ldrh	r1, [r5, #12]
	net_buf_add_mem(seg, buf->data, len);
    b65c:	428a      	cmp	r2, r1
    b65e:	bf28      	it	cs
    b660:	460a      	movcs	r2, r1
    b662:	4648      	mov	r0, r9
    b664:	68a9      	ldr	r1, [r5, #8]
    b666:	9203      	str	r2, [sp, #12]
    b668:	f016 ff98 	bl	2259c <net_buf_simple_add_mem>
	net_buf_pull(buf, len);
    b66c:	9a03      	ldr	r2, [sp, #12]
    b66e:	4658      	mov	r0, fp
    b670:	4611      	mov	r1, r2
    b672:	f016 ffc2 	bl	225fa <net_buf_simple_pull>
	len = seg->len - sdu_hdr_len;
    b676:	89a2      	ldrh	r2, [r4, #12]
    b678:	f8b6 105c 	ldrh.w	r1, [r6, #92]	; 0x5c
	if ((buf == seg || !buf->len) && ch->chan.ops->sent) {
    b67c:	42a5      	cmp	r5, r4
	len = seg->len - sdu_hdr_len;
    b67e:	eba2 0707 	sub.w	r7, r2, r7
	if ((buf == seg || !buf->len) && ch->chan.ops->sent) {
    b682:	d001      	beq.n	b688 <l2cap_chan_le_send+0x108>
    b684:	89ab      	ldrh	r3, [r5, #12]
    b686:	bb7b      	cbnz	r3, b6e8 <l2cap_chan_le_send+0x168>
    b688:	6873      	ldr	r3, [r6, #4]
    b68a:	695b      	ldr	r3, [r3, #20]
    b68c:	b363      	cbz	r3, b6e8 <l2cap_chan_le_send+0x168>
		err = bt_l2cap_send_cb(ch->chan.conn, ch->tx.cid, seg,
    b68e:	4b2c      	ldr	r3, [pc, #176]	; (b740 <l2cap_chan_le_send+0x1c0>)
    b690:	9600      	str	r6, [sp, #0]
		err = bt_l2cap_send_cb(ch->chan.conn, ch->tx.cid, seg,
    b692:	4622      	mov	r2, r4
    b694:	6830      	ldr	r0, [r6, #0]
    b696:	f015 f970 	bl	2097a <bt_l2cap_send_cb>
    b69a:	4604      	mov	r4, r0
	if (err) {
    b69c:	b338      	cbz	r0, b6ee <l2cap_chan_le_send+0x16e>
    b69e:	4b29      	ldr	r3, [pc, #164]	; (b744 <l2cap_chan_le_send+0x1c4>)
    b6a0:	4a29      	ldr	r2, [pc, #164]	; (b748 <l2cap_chan_le_send+0x1c8>)
    b6a2:	1ad2      	subs	r2, r2, r3
    b6a4:	08d2      	lsrs	r2, r2, #3
		BT_WARN("Unable to send seg %d", err);
    b6a6:	0192      	lsls	r2, r2, #6
    b6a8:	4601      	mov	r1, r0
    b6aa:	f042 0202 	orr.w	r2, r2, #2
    b6ae:	4827      	ldr	r0, [pc, #156]	; (b74c <l2cap_chan_le_send+0x1cc>)
    b6b0:	f012 ff18 	bl	1e4e4 <log_1>
    b6b4:	2101      	movs	r1, #1
    b6b6:	4640      	mov	r0, r8
    b6b8:	f015 f830 	bl	2071c <atomic_add>
		if (err == -ENOBUFS) {
    b6bc:	f114 0f37 	cmn.w	r4, #55	; 0x37
    b6c0:	d130      	bne.n	b724 <l2cap_chan_le_send+0x1a4>
	buf->data = buf->__buf + state->offset;
    b6c2:	6928      	ldr	r0, [r5, #16]
    b6c4:	9b02      	ldr	r3, [sp, #8]
	buf->len = state->len;
    b6c6:	f8a5 a00c 	strh.w	sl, [r5, #12]
	buf->data = buf->__buf + state->offset;
    b6ca:	fa10 f083 	uxtah	r0, r0, r3
    b6ce:	60a8      	str	r0, [r5, #8]
	buf->len = state->len;
    b6d0:	e79c      	b.n	b60c <l2cap_chan_le_send+0x8c>
	return bt_conn_create_pdu_timeout(pool,
    b6d2:	2200      	movs	r2, #0
    b6d4:	2300      	movs	r3, #0
    b6d6:	2104      	movs	r1, #4
    b6d8:	f7ff fd54 	bl	b184 <bt_conn_create_pdu_timeout>
	if (!seg) {
    b6dc:	4604      	mov	r4, r0
    b6de:	2800      	cmp	r0, #0
    b6e0:	d1a5      	bne.n	b62e <l2cap_chan_le_send+0xae>
    b6e2:	e78f      	b.n	b604 <l2cap_chan_le_send+0x84>
	len = MIN(net_buf_tailroom(seg), ch->tx.mps - sdu_hdr_len);
    b6e4:	b28a      	uxth	r2, r1
    b6e6:	e7b8      	b.n	b65a <l2cap_chan_le_send+0xda>
		err = bt_l2cap_send_cb(ch->chan.conn, ch->tx.cid, seg,
    b6e8:	4b19      	ldr	r3, [pc, #100]	; (b750 <l2cap_chan_le_send+0x1d0>)
    b6ea:	9600      	str	r6, [sp, #0]
    b6ec:	e7d1      	b.n	b692 <l2cap_chan_le_send+0x112>
	if (!atomic_get(&ch->tx.credits)) {
    b6ee:	4640      	mov	r0, r8
    b6f0:	f015 f80e 	bl	20710 <atomic_get>
    b6f4:	b990      	cbnz	r0, b71c <l2cap_chan_le_send+0x19c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    b6f6:	f3bf 8f5b 	dmb	ish
		atomic_clear_bit(ch->chan.status, BT_L2CAP_STATUS_OUT);
    b6fa:	f106 0140 	add.w	r1, r6, #64	; 0x40
    b6fe:	e851 3f00 	ldrex	r3, [r1]
    b702:	f023 0301 	bic.w	r3, r3, #1
    b706:	e841 3200 	strex	r2, r3, [r1]
    b70a:	2a00      	cmp	r2, #0
    b70c:	d1f7      	bne.n	b6fe <l2cap_chan_le_send+0x17e>
    b70e:	f3bf 8f5b 	dmb	ish
		if (ch->chan.ops->status) {
    b712:	6873      	ldr	r3, [r6, #4]
    b714:	699b      	ldr	r3, [r3, #24]
    b716:	b10b      	cbz	r3, b71c <l2cap_chan_le_send+0x19c>
			ch->chan.ops->status(&ch->chan, ch->chan.status);
    b718:	4630      	mov	r0, r6
    b71a:	4798      	blx	r3
}
    b71c:	4638      	mov	r0, r7
    b71e:	b005      	add	sp, #20
    b720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b724:	4627      	mov	r7, r4
    b726:	e7f9      	b.n	b71c <l2cap_chan_le_send+0x19c>
    b728:	4b06      	ldr	r3, [pc, #24]	; (b744 <l2cap_chan_le_send+0x1c4>)
    b72a:	4907      	ldr	r1, [pc, #28]	; (b748 <l2cap_chan_le_send+0x1c8>)
		BT_WARN("No credits to transmit packet");
    b72c:	4809      	ldr	r0, [pc, #36]	; (b754 <l2cap_chan_le_send+0x1d4>)
    b72e:	1ac9      	subs	r1, r1, r3
    b730:	08c9      	lsrs	r1, r1, #3
    b732:	0189      	lsls	r1, r1, #6
    b734:	f041 0102 	orr.w	r1, r1, #2
    b738:	f012 fec7 	bl	1e4ca <log_0>
    b73c:	e766      	b.n	b60c <l2cap_chan_le_send+0x8c>
    b73e:	bf00      	nop
    b740:	000208cb 	.word	0x000208cb
    b744:	000236e8 	.word	0x000236e8
    b748:	000237c0 	.word	0x000237c0
    b74c:	00026351 	.word	0x00026351
    b750:	000208c5 	.word	0x000208c5
    b754:	00026367 	.word	0x00026367

0000b758 <l2cap_chan_send_req>:
{
    b758:	b538      	push	{r3, r4, r5, lr}
    b75a:	4604      	mov	r4, r0
    b75c:	460d      	mov	r5, r1
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    b75e:	f100 0110 	add.w	r1, r0, #16
    b762:	4804      	ldr	r0, [pc, #16]	; (b774 <l2cap_chan_send_req+0x1c>)
    b764:	f012 f942 	bl	1d9ec <k_delayed_work_submit_to_queue>
	bt_l2cap_send(chan->conn, BT_L2CAP_CID_LE_SIG, buf);
    b768:	6820      	ldr	r0, [r4, #0]
    b76a:	4629      	mov	r1, r5
}
    b76c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_l2cap_send(chan->conn, BT_L2CAP_CID_LE_SIG, buf);
    b770:	f015 b97f 	b.w	20a72 <bt_l2cap_send.constprop.0>
    b774:	20001c50 	.word	0x20001c50

0000b778 <l2cap_chan_send_credits.isra.0>:
static void l2cap_chan_send_credits(struct bt_l2cap_le_chan *chan,
    b778:	b570      	push	{r4, r5, r6, lr}
    b77a:	f8b0 6056 	ldrh.w	r6, [r0, #86]	; 0x56
    b77e:	428e      	cmp	r6, r1
    b780:	bf28      	it	cs
    b782:	460e      	movcs	r6, r1
    b784:	4604      	mov	r4, r0
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_LE_CREDITS, get_ident(),
    b786:	f7ff fe21 	bl	b3cc <get_ident>
    b78a:	2204      	movs	r2, #4
    b78c:	4601      	mov	r1, r0
    b78e:	2016      	movs	r0, #22
    b790:	f7ff fe66 	bl	b460 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
    b794:	4605      	mov	r5, r0
    b796:	2800      	cmp	r0, #0
    b798:	d146      	bne.n	b828 <l2cap_chan_send_credits.isra.0+0xb0>
    b79a:	4b2e      	ldr	r3, [pc, #184]	; (b854 <l2cap_chan_send_credits.isra.0+0xdc>)
    b79c:	492e      	ldr	r1, [pc, #184]	; (b858 <l2cap_chan_send_credits.isra.0+0xe0>)
		BT_ERR("Unable to send credits update");
    b79e:	482f      	ldr	r0, [pc, #188]	; (b85c <l2cap_chan_send_credits.isra.0+0xe4>)
    b7a0:	1ac9      	subs	r1, r1, r3
    b7a2:	08c9      	lsrs	r1, r1, #3
    b7a4:	0189      	lsls	r1, r1, #6
    b7a6:	f041 0101 	orr.w	r1, r1, #1
	atomic_set_bit(chan->status, BT_L2CAP_STATUS_SHUTDOWN);
    b7aa:	f104 0640 	add.w	r6, r4, #64	; 0x40
		BT_ERR("Unable to send credits update");
    b7ae:	f012 fe8c 	bl	1e4ca <log_0>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b7b2:	f3bf 8f5b 	dmb	ish
    b7b6:	e856 3f00 	ldrex	r3, [r6]
    b7ba:	f043 0302 	orr.w	r3, r3, #2
    b7be:	e846 3200 	strex	r2, r3, [r6]
    b7c2:	2a00      	cmp	r2, #0
    b7c4:	d1f7      	bne.n	b7b6 <l2cap_chan_send_credits.isra.0+0x3e>
    b7c6:	f3bf 8f5b 	dmb	ish
	if (ch->_sdu) {
    b7ca:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    b7ce:	b128      	cbz	r0, b7dc <l2cap_chan_send_credits.isra.0+0x64>
		net_buf_unref(ch->_sdu);
    b7d0:	f010 f982 	bl	1bad8 <net_buf_unref>
		ch->_sdu = NULL;
    b7d4:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
		ch->_sdu_len = 0U;
    b7d8:	f8a4 5094 	strh.w	r5, [r4, #148]	; 0x94
	if (ch->tx_buf) {
    b7dc:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    b7e0:	b120      	cbz	r0, b7ec <l2cap_chan_send_credits.isra.0+0x74>
		net_buf_unref(ch->tx_buf);
    b7e2:	f010 f979 	bl	1bad8 <net_buf_unref>
		ch->tx_buf = NULL;
    b7e6:	2300      	movs	r3, #0
    b7e8:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	while ((buf = net_buf_get(&ch->tx_queue, K_NO_WAIT))) {
    b7ec:	f104 0568 	add.w	r5, r4, #104	; 0x68
    b7f0:	2200      	movs	r2, #0
    b7f2:	2300      	movs	r3, #0
    b7f4:	4628      	mov	r0, r5
    b7f6:	f016 fe68 	bl	224ca <net_buf_get>
    b7fa:	b978      	cbnz	r0, b81c <l2cap_chan_send_credits.isra.0+0xa4>
	while ((buf = net_buf_get(&ch->rx_queue, K_NO_WAIT))) {
    b7fc:	f104 05a4 	add.w	r5, r4, #164	; 0xa4
    b800:	2200      	movs	r2, #0
    b802:	2300      	movs	r3, #0
    b804:	4628      	mov	r0, r5
    b806:	f016 fe60 	bl	224ca <net_buf_get>
    b80a:	b950      	cbnz	r0, b822 <l2cap_chan_send_credits.isra.0+0xaa>
	if (chan->ops->status) {
    b80c:	6863      	ldr	r3, [r4, #4]
    b80e:	699b      	ldr	r3, [r3, #24]
    b810:	b1f3      	cbz	r3, b850 <l2cap_chan_send_credits.isra.0+0xd8>
		chan->ops->status(chan, chan->status);
    b812:	4631      	mov	r1, r6
    b814:	4620      	mov	r0, r4
}
    b816:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		chan->ops->status(chan, chan->status);
    b81a:	4718      	bx	r3
		net_buf_unref(buf);
    b81c:	f010 f95c 	bl	1bad8 <net_buf_unref>
    b820:	e7e6      	b.n	b7f0 <l2cap_chan_send_credits.isra.0+0x78>
		net_buf_unref(buf);
    b822:	f010 f959 	bl	1bad8 <net_buf_unref>
    b826:	e7eb      	b.n	b800 <l2cap_chan_send_credits.isra.0+0x88>
	atomic_add(&chan->rx.credits, credits);
    b828:	4631      	mov	r1, r6
    b82a:	f104 0058 	add.w	r0, r4, #88	; 0x58
    b82e:	f014 ff75 	bl	2071c <atomic_add>
	ev = net_buf_add(buf, sizeof(*ev));
    b832:	2104      	movs	r1, #4
    b834:	f105 0008 	add.w	r0, r5, #8
    b838:	f016 feaa 	bl	22590 <net_buf_simple_add>
	ev->cid = sys_cpu_to_le16(chan->rx.cid);
    b83c:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
    b840:	8003      	strh	r3, [r0, #0]
	ev->credits = sys_cpu_to_le16(credits);
    b842:	8046      	strh	r6, [r0, #2]
	bt_l2cap_send(chan->chan.conn, BT_L2CAP_CID_LE_SIG, buf);
    b844:	4629      	mov	r1, r5
    b846:	6820      	ldr	r0, [r4, #0]
}
    b848:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_send(chan->chan.conn, BT_L2CAP_CID_LE_SIG, buf);
    b84c:	f015 b911 	b.w	20a72 <bt_l2cap_send.constprop.0>
}
    b850:	bd70      	pop	{r4, r5, r6, pc}
    b852:	bf00      	nop
    b854:	000236e8 	.word	0x000236e8
    b858:	000237c0 	.word	0x000237c0
    b85c:	00026385 	.word	0x00026385

0000b860 <l2cap_chan_add>:
	if (ch->rx.cid > 0) {
    b860:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
{
    b864:	b570      	push	{r4, r5, r6, lr}
    b866:	4605      	mov	r5, r0
    b868:	460c      	mov	r4, r1
    b86a:	4616      	mov	r6, r2
	if (ch->rx.cid > 0) {
    b86c:	b933      	cbnz	r3, b87c <l2cap_chan_add+0x1c>
	for (cid = L2CAP_LE_CID_DYN_START; cid <= L2CAP_LE_CID_DYN_END; cid++) {
    b86e:	2140      	movs	r1, #64	; 0x40
		if (!bt_l2cap_le_lookup_rx_cid(conn, cid)) {
    b870:	4628      	mov	r0, r5
    b872:	f015 f9ee 	bl	20c52 <bt_l2cap_le_lookup_rx_cid>
    b876:	bb78      	cbnz	r0, b8d8 <l2cap_chan_add+0x78>
			ch->rx.cid = cid;
    b878:	f8a4 1050 	strh.w	r1, [r4, #80]	; 0x50
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    b87c:	4921      	ldr	r1, [pc, #132]	; (b904 <l2cap_chan_add+0xa4>)
    b87e:	f104 0010 	add.w	r0, r4, #16
    b882:	f017 fc35 	bl	230f0 <k_delayed_work_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    b886:	f3bf 8f5b 	dmb	ish
    b88a:	f104 0340 	add.w	r3, r4, #64	; 0x40
    b88e:	2200      	movs	r2, #0
    b890:	e853 1f00 	ldrex	r1, [r3]
    b894:	e843 2000 	strex	r0, r2, [r3]
    b898:	2800      	cmp	r0, #0
    b89a:	d1f9      	bne.n	b890 <l2cap_chan_add+0x30>
    b89c:	f3bf 8f5b 	dmb	ish
	parent->next = child;
    b8a0:	60a2      	str	r2, [r4, #8]
Z_GENLIST_APPEND(slist, snode)
    b8a2:	6d2a      	ldr	r2, [r5, #80]	; 0x50
	sys_slist_append(&conn->channels, &chan->node);
    b8a4:	f104 0308 	add.w	r3, r4, #8
    b8a8:	bb32      	cbnz	r2, b8f8 <l2cap_chan_add+0x98>
	list->head = node;
    b8aa:	e9c5 3313 	strd	r3, r3, [r5, #76]	; 0x4c
	if (L2CAP_LE_CID_IS_DYN(ch->rx.cid)) {
    b8ae:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
	chan->conn = conn;
    b8b2:	6025      	str	r5, [r4, #0]
	if (L2CAP_LE_CID_IS_DYN(ch->rx.cid)) {
    b8b4:	3b40      	subs	r3, #64	; 0x40
    b8b6:	2b3f      	cmp	r3, #63	; 0x3f
	chan->destroy = destroy;
    b8b8:	60e6      	str	r6, [r4, #12]
	if (L2CAP_LE_CID_IS_DYN(ch->rx.cid)) {
    b8ba:	d820      	bhi.n	b8fe <l2cap_chan_add+0x9e>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    b8bc:	4a12      	ldr	r2, [pc, #72]	; (b908 <l2cap_chan_add+0xa8>)
    b8be:	2300      	movs	r3, #0
    b8c0:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
    b8c4:	e9c4 2327 	strd	r2, r3, [r4, #156]	; 0x9c
    b8c8:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
    b8cc:	f017 fa0e 	bl	22cec <z_impl_k_queue_init>
	chan->state = state;
    b8d0:	2001      	movs	r0, #1
    b8d2:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
}
    b8d6:	bd70      	pop	{r4, r5, r6, pc}
	for (cid = L2CAP_LE_CID_DYN_START; cid <= L2CAP_LE_CID_DYN_END; cid++) {
    b8d8:	3101      	adds	r1, #1
    b8da:	b289      	uxth	r1, r1
    b8dc:	2980      	cmp	r1, #128	; 0x80
    b8de:	d1c7      	bne.n	b870 <l2cap_chan_add+0x10>
    b8e0:	4b0a      	ldr	r3, [pc, #40]	; (b90c <l2cap_chan_add+0xac>)
    b8e2:	490b      	ldr	r1, [pc, #44]	; (b910 <l2cap_chan_add+0xb0>)
		BT_ERR("Unable to allocate L2CAP CID");
    b8e4:	480b      	ldr	r0, [pc, #44]	; (b914 <l2cap_chan_add+0xb4>)
    b8e6:	1ac9      	subs	r1, r1, r3
    b8e8:	08c9      	lsrs	r1, r1, #3
    b8ea:	0189      	lsls	r1, r1, #6
    b8ec:	f041 0101 	orr.w	r1, r1, #1
    b8f0:	f012 fdeb 	bl	1e4ca <log_0>
		return false;
    b8f4:	2000      	movs	r0, #0
    b8f6:	e7ee      	b.n	b8d6 <l2cap_chan_add+0x76>
	parent->next = child;
    b8f8:	6013      	str	r3, [r2, #0]
	list->tail = node;
    b8fa:	652b      	str	r3, [r5, #80]	; 0x50
}
    b8fc:	e7d7      	b.n	b8ae <l2cap_chan_add+0x4e>
	return true;
    b8fe:	2001      	movs	r0, #1
    b900:	e7e9      	b.n	b8d6 <l2cap_chan_add+0x76>
    b902:	bf00      	nop
    b904:	0000b531 	.word	0x0000b531
    b908:	00020d0d 	.word	0x00020d0d
    b90c:	000236e8 	.word	0x000236e8
    b910:	000237c0 	.word	0x000237c0
    b914:	000263a3 	.word	0x000263a3

0000b918 <bt_l2cap_connected>:
{
    b918:	b573      	push	{r0, r1, r4, r5, r6, lr}
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    b91a:	4c1a      	ldr	r4, [pc, #104]	; (b984 <bt_l2cap_connected+0x6c>)
    b91c:	4e1a      	ldr	r6, [pc, #104]	; (b988 <bt_l2cap_connected+0x70>)
{
    b91e:	4605      	mov	r5, r0
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    b920:	42b4      	cmp	r4, r6
    b922:	d301      	bcc.n	b928 <bt_l2cap_connected+0x10>
}
    b924:	b002      	add	sp, #8
    b926:	bd70      	pop	{r4, r5, r6, pc}
		if (fchan->accept(conn, &chan) < 0) {
    b928:	6863      	ldr	r3, [r4, #4]
    b92a:	a901      	add	r1, sp, #4
    b92c:	4628      	mov	r0, r5
    b92e:	4798      	blx	r3
    b930:	2800      	cmp	r0, #0
    b932:	db25      	blt.n	b980 <bt_l2cap_connected+0x68>
		ch = BT_L2CAP_LE_CHAN(chan);
    b934:	9901      	ldr	r1, [sp, #4]
		ch->rx.cid = fchan->cid;
    b936:	8823      	ldrh	r3, [r4, #0]
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
    b938:	68a2      	ldr	r2, [r4, #8]
		ch->rx.cid = fchan->cid;
    b93a:	f8a1 3050 	strh.w	r3, [r1, #80]	; 0x50
		ch->tx.cid = fchan->cid;
    b93e:	f8a1 305c 	strh.w	r3, [r1, #92]	; 0x5c
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
    b942:	4628      	mov	r0, r5
    b944:	f7ff ff8c 	bl	b860 <l2cap_chan_add>
    b948:	2800      	cmp	r0, #0
    b94a:	d0eb      	beq.n	b924 <bt_l2cap_connected+0xc>
		if (chan->ops->connected) {
    b94c:	9801      	ldr	r0, [sp, #4]
    b94e:	6843      	ldr	r3, [r0, #4]
    b950:	681b      	ldr	r3, [r3, #0]
    b952:	b103      	cbz	r3, b956 <bt_l2cap_connected+0x3e>
			chan->ops->connected(chan);
    b954:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b956:	9b01      	ldr	r3, [sp, #4]
    b958:	f3bf 8f5b 	dmb	ish
    b95c:	3340      	adds	r3, #64	; 0x40
    b95e:	e853 2f00 	ldrex	r2, [r3]
    b962:	f042 0201 	orr.w	r2, r2, #1
    b966:	e843 2100 	strex	r1, r2, [r3]
    b96a:	2900      	cmp	r1, #0
    b96c:	d1f7      	bne.n	b95e <bt_l2cap_connected+0x46>
    b96e:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
    b972:	9801      	ldr	r0, [sp, #4]
    b974:	6843      	ldr	r3, [r0, #4]
    b976:	699b      	ldr	r3, [r3, #24]
    b978:	b113      	cbz	r3, b980 <bt_l2cap_connected+0x68>
			chan->ops->status(chan, chan->status);
    b97a:	f100 0140 	add.w	r1, r0, #64	; 0x40
    b97e:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    b980:	340c      	adds	r4, #12
    b982:	e7cd      	b.n	b920 <bt_l2cap_connected+0x8>
    b984:	000236ac 	.word	0x000236ac
    b988:	000236d0 	.word	0x000236d0

0000b98c <l2cap_chan_accept>:
{
    b98c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b990:	4699      	mov	r9, r3
	if (!L2CAP_LE_CID_IS_DYN(scid)) {
    b992:	f1a2 0340 	sub.w	r3, r2, #64	; 0x40
    b996:	2b3f      	cmp	r3, #63	; 0x3f
{
    b998:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
    b99c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    b99e:	4683      	mov	fp, r0
    b9a0:	460f      	mov	r7, r1
    b9a2:	4690      	mov	r8, r2
	if (!L2CAP_LE_CID_IS_DYN(scid)) {
    b9a4:	d853      	bhi.n	ba4e <l2cap_chan_accept+0xc2>
	*chan = bt_l2cap_le_lookup_tx_cid(conn, scid);
    b9a6:	4611      	mov	r1, r2
    b9a8:	f015 f943 	bl	20c32 <bt_l2cap_le_lookup_tx_cid>
    b9ac:	4606      	mov	r6, r0
    b9ae:	6028      	str	r0, [r5, #0]
	if (*chan) {
    b9b0:	2800      	cmp	r0, #0
    b9b2:	d14e      	bne.n	ba52 <l2cap_chan_accept+0xc6>
	err = server->accept(conn, chan);
    b9b4:	687b      	ldr	r3, [r7, #4]
    b9b6:	4629      	mov	r1, r5
    b9b8:	4658      	mov	r0, fp
    b9ba:	4798      	blx	r3
	if (err < 0) {
    b9bc:	1e04      	subs	r4, r0, #0
    b9be:	da13      	bge.n	b9e8 <l2cap_chan_accept+0x5c>
	switch (err) {
    b9c0:	f114 0f0c 	cmn.w	r4, #12
    b9c4:	d049      	beq.n	ba5a <l2cap_chan_accept+0xce>
    b9c6:	f114 0f0b 	cmn.w	r4, #11
    b9ca:	da08      	bge.n	b9de <l2cap_chan_accept+0x52>
    b9cc:	f114 0f23 	cmn.w	r4, #35	; 0x23
    b9d0:	d041      	beq.n	ba56 <l2cap_chan_accept+0xca>
    b9d2:	340d      	adds	r4, #13
    b9d4:	bf14      	ite	ne
    b9d6:	200b      	movne	r0, #11
    b9d8:	2006      	moveq	r0, #6
}
    b9da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (err) {
    b9de:	3401      	adds	r4, #1
		return BT_L2CAP_LE_ERR_KEY_SIZE;
    b9e0:	bf14      	ite	ne
    b9e2:	200b      	movne	r0, #11
    b9e4:	2007      	moveq	r0, #7
    b9e6:	e7f8      	b.n	b9da <l2cap_chan_accept+0x4e>
	(*chan)->required_sec_level = server->sec_level;
    b9e8:	682b      	ldr	r3, [r5, #0]
    b9ea:	78ba      	ldrb	r2, [r7, #2]
    b9ec:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	if (!l2cap_chan_add(conn, *chan, l2cap_chan_destroy)) {
    b9f0:	6829      	ldr	r1, [r5, #0]
    b9f2:	4a1c      	ldr	r2, [pc, #112]	; (ba64 <l2cap_chan_accept+0xd8>)
    b9f4:	4658      	mov	r0, fp
    b9f6:	f7ff ff33 	bl	b860 <l2cap_chan_add>
    b9fa:	b370      	cbz	r0, ba5a <l2cap_chan_accept+0xce>
	ch = BT_L2CAP_LE_CHAN(*chan);
    b9fc:	682c      	ldr	r4, [r5, #0]
	l2cap_chan_tx_init(ch);
    b9fe:	4620      	mov	r0, r4
    ba00:	f7ff fd5e 	bl	b4c0 <l2cap_chan_tx_init>
	ch->tx.mps = mps;
    ba04:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    ba08:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	l2cap_chan_tx_give_credits(ch, credits);
    ba0c:	4651      	mov	r1, sl
    ba0e:	4620      	mov	r0, r4
	ch->tx.cid = scid;
    ba10:	f8a4 805c 	strh.w	r8, [r4, #92]	; 0x5c
	ch->tx.mtu = mtu;
    ba14:	f8a4 905e 	strh.w	r9, [r4, #94]	; 0x5e
	ch->tx.init_credits = credits;
    ba18:	f8a4 a062 	strh.w	sl, [r4, #98]	; 0x62
	l2cap_chan_tx_give_credits(ch, credits);
    ba1c:	f014 fee5 	bl	207ea <l2cap_chan_tx_give_credits>
	l2cap_chan_rx_init(ch);
    ba20:	4620      	mov	r0, r4
    ba22:	f014 feb7 	bl	20794 <l2cap_chan_rx_init>
	atomic_add(&chan->rx.credits, credits);
    ba26:	f8b4 1056 	ldrh.w	r1, [r4, #86]	; 0x56
    ba2a:	f104 0058 	add.w	r0, r4, #88	; 0x58
    ba2e:	f014 fe75 	bl	2071c <atomic_add>
	(*chan)->psm = server->psm;
    ba32:	682b      	ldr	r3, [r5, #0]
    ba34:	883a      	ldrh	r2, [r7, #0]
    ba36:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	chan->state = state;
    ba3a:	2203      	movs	r2, #3
    ba3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	if ((*chan)->ops->connected) {
    ba40:	6828      	ldr	r0, [r5, #0]
    ba42:	6843      	ldr	r3, [r0, #4]
    ba44:	681b      	ldr	r3, [r3, #0]
    ba46:	b153      	cbz	r3, ba5e <l2cap_chan_accept+0xd2>
		(*chan)->ops->connected(*chan);
    ba48:	4798      	blx	r3
	return BT_L2CAP_LE_SUCCESS;
    ba4a:	4630      	mov	r0, r6
    ba4c:	e7c5      	b.n	b9da <l2cap_chan_accept+0x4e>
		return BT_L2CAP_LE_ERR_INVALID_SCID;
    ba4e:	2009      	movs	r0, #9
    ba50:	e7c3      	b.n	b9da <l2cap_chan_accept+0x4e>
		return BT_L2CAP_LE_ERR_SCID_IN_USE;
    ba52:	200a      	movs	r0, #10
    ba54:	e7c1      	b.n	b9da <l2cap_chan_accept+0x4e>
		return BT_L2CAP_LE_ERR_PSM_NOT_SUPP;
    ba56:	2002      	movs	r0, #2
    ba58:	e7bf      	b.n	b9da <l2cap_chan_accept+0x4e>
		return BT_L2CAP_LE_ERR_NO_RESOURCES;
    ba5a:	2004      	movs	r0, #4
    ba5c:	e7bd      	b.n	b9da <l2cap_chan_accept+0x4e>
	return BT_L2CAP_LE_SUCCESS;
    ba5e:	4618      	mov	r0, r3
    ba60:	e7bb      	b.n	b9da <l2cap_chan_accept+0x4e>
    ba62:	bf00      	nop
    ba64:	00020739 	.word	0x00020739

0000ba68 <l2cap_chan_le_recv_seg>:
{
    ba68:	b570      	push	{r4, r5, r6, lr}
    ba6a:	460d      	mov	r5, r1
	len = net_buf_frags_len(chan->_sdu);
    ba6c:	f8d0 1090 	ldr.w	r1, [r0, #144]	; 0x90
{
    ba70:	b086      	sub	sp, #24
	uint16_t seg = 0U;
    ba72:	2300      	movs	r3, #0
{
    ba74:	4604      	mov	r4, r0
	len = net_buf_frags_len(chan->_sdu);
    ba76:	4608      	mov	r0, r1
	uint16_t seg = 0U;
    ba78:	f8ad 3016 	strh.w	r3, [sp, #22]
	len = net_buf_frags_len(chan->_sdu);
    ba7c:	f014 fdf8 	bl	20670 <net_buf_frags_len>
	if (len) {
    ba80:	b283      	uxth	r3, r0
	len = net_buf_frags_len(chan->_sdu);
    ba82:	4606      	mov	r6, r0
	if (len) {
    ba84:	b12b      	cbz	r3, ba92 <l2cap_chan_le_recv_seg+0x2a>
		memcpy(&seg, net_buf_user_data(chan->_sdu), sizeof(seg));
    ba86:	2202      	movs	r2, #2
    ba88:	3114      	adds	r1, #20
    ba8a:	f10d 0016 	add.w	r0, sp, #22
    ba8e:	f014 f9ee 	bl	1fe6e <memcpy>
	if (len + buf->len > chan->_sdu_len) {
    ba92:	89a8      	ldrh	r0, [r5, #12]
    ba94:	f8b4 3094 	ldrh.w	r3, [r4, #148]	; 0x94
    ba98:	fa10 f686 	uxtah	r6, r0, r6
    ba9c:	429e      	cmp	r6, r3
    ba9e:	dd0e      	ble.n	babe <l2cap_chan_le_recv_seg+0x56>
    baa0:	4945      	ldr	r1, [pc, #276]	; (bbb8 <l2cap_chan_le_recv_seg+0x150>)
    baa2:	4b46      	ldr	r3, [pc, #280]	; (bbbc <l2cap_chan_le_recv_seg+0x154>)
		BT_ERR("SDU length mismatch");
    baa4:	4846      	ldr	r0, [pc, #280]	; (bbc0 <l2cap_chan_le_recv_seg+0x158>)
    baa6:	1ac9      	subs	r1, r1, r3
    baa8:	08c9      	lsrs	r1, r1, #3
    baaa:	0189      	lsls	r1, r1, #6
    baac:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Unable to store SDU");
    bab0:	f012 fd0b 	bl	1e4ca <log_0>
		bt_l2cap_chan_disconnect(&chan->chan);
    bab4:	4620      	mov	r0, r4
    bab6:	f015 f8fe 	bl	20cb6 <bt_l2cap_chan_disconnect>
}
    baba:	b006      	add	sp, #24
    babc:	bd70      	pop	{r4, r5, r6, pc}
	seg++;
    babe:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 *
 * @return Pointer to the user data of the buffer.
 */
static inline void *net_buf_user_data(const struct net_buf *buf)
{
	return (void *)buf->user_data;
    bac2:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    bac6:	3301      	adds	r3, #1
	memcpy(net_buf_user_data(chan->_sdu), &seg, sizeof(seg));
    bac8:	2202      	movs	r2, #2
    baca:	f10d 0116 	add.w	r1, sp, #22
    bace:	3014      	adds	r0, #20
	seg++;
    bad0:	f8ad 3016 	strh.w	r3, [sp, #22]
	memcpy(net_buf_user_data(chan->_sdu), &seg, sizeof(seg));
    bad4:	f014 f9cb 	bl	1fe6e <memcpy>
	len = net_buf_append_bytes(chan->_sdu, buf->len, buf->data, K_NO_WAIT,
    bad8:	4b3a      	ldr	r3, [pc, #232]	; (bbc4 <l2cap_chan_le_recv_seg+0x15c>)
    bada:	9302      	str	r3, [sp, #8]
    badc:	2200      	movs	r2, #0
    bade:	2300      	movs	r3, #0
    bae0:	e9cd 2300 	strd	r2, r3, [sp]
    bae4:	9403      	str	r4, [sp, #12]
    bae6:	68aa      	ldr	r2, [r5, #8]
    bae8:	89a9      	ldrh	r1, [r5, #12]
    baea:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    baee:	f016 fdb0 	bl	22652 <net_buf_append_bytes>
	if (len != buf->len) {
    baf2:	89ab      	ldrh	r3, [r5, #12]
    baf4:	b280      	uxth	r0, r0
    baf6:	4283      	cmp	r3, r0
    baf8:	d008      	beq.n	bb0c <l2cap_chan_le_recv_seg+0xa4>
    bafa:	492f      	ldr	r1, [pc, #188]	; (bbb8 <l2cap_chan_le_recv_seg+0x150>)
    bafc:	4b2f      	ldr	r3, [pc, #188]	; (bbbc <l2cap_chan_le_recv_seg+0x154>)
		BT_ERR("Unable to store SDU");
    bafe:	4832      	ldr	r0, [pc, #200]	; (bbc8 <l2cap_chan_le_recv_seg+0x160>)
    bb00:	1ac9      	subs	r1, r1, r3
    bb02:	08c9      	lsrs	r1, r1, #3
    bb04:	0189      	lsls	r1, r1, #6
    bb06:	f041 0101 	orr.w	r1, r1, #1
    bb0a:	e7d1      	b.n	bab0 <l2cap_chan_le_recv_seg+0x48>
	if (net_buf_frags_len(chan->_sdu) < chan->_sdu_len) {
    bb0c:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
    bb10:	4630      	mov	r0, r6
    bb12:	f014 fdad 	bl	20670 <net_buf_frags_len>
    bb16:	f8b4 3094 	ldrh.w	r3, [r4, #148]	; 0x94
    bb1a:	4298      	cmp	r0, r3
    bb1c:	d225      	bcs.n	bb6a <l2cap_chan_le_recv_seg+0x102>
		if (!atomic_get(&chan->rx.credits) &&
    bb1e:	f104 0358 	add.w	r3, r4, #88	; 0x58
    bb22:	4618      	mov	r0, r3
    bb24:	f014 fdf4 	bl	20710 <atomic_get>
    bb28:	2800      	cmp	r0, #0
    bb2a:	d1c6      	bne.n	baba <l2cap_chan_le_recv_seg+0x52>
    bb2c:	f8b4 1056 	ldrh.w	r1, [r4, #86]	; 0x56
    bb30:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    bb34:	4291      	cmp	r1, r2
    bb36:	d1c0      	bne.n	baba <l2cap_chan_le_recv_seg+0x52>
	atomic_val_t old_credits = atomic_get(&chan->rx.credits);
    bb38:	4618      	mov	r0, r3
    bb3a:	f014 fde9 	bl	20710 <atomic_get>
    bb3e:	4606      	mov	r6, r0
	credits = ((chan->_sdu_len - net_buf_frags_len(buf)) +
    bb40:	4628      	mov	r0, r5
    bb42:	f014 fd95 	bl	20670 <net_buf_frags_len>
    bb46:	f8b4 1054 	ldrh.w	r1, [r4, #84]	; 0x54
    bb4a:	f8b4 3094 	ldrh.w	r3, [r4, #148]	; 0x94
    bb4e:	440b      	add	r3, r1
    bb50:	3b01      	subs	r3, #1
    bb52:	1a1b      	subs	r3, r3, r0
		   (chan->rx.mps - 1)) / chan->rx.mps;
    bb54:	fbb3 f1f1 	udiv	r1, r3, r1
	if (credits < old_credits) {
    bb58:	b28b      	uxth	r3, r1
    bb5a:	429e      	cmp	r6, r3
    bb5c:	dcad      	bgt.n	baba <l2cap_chan_le_recv_seg+0x52>
	credits -= old_credits;
    bb5e:	1b89      	subs	r1, r1, r6
	l2cap_chan_send_credits(chan, buf, credits);
    bb60:	b289      	uxth	r1, r1
    bb62:	4620      	mov	r0, r4
    bb64:	f7ff fe08 	bl	b778 <l2cap_chan_send_credits.isra.0>
    bb68:	e7a7      	b.n	baba <l2cap_chan_le_recv_seg+0x52>
	chan->_sdu = NULL;
    bb6a:	2300      	movs	r3, #0
    bb6c:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
	chan->_sdu_len = 0U;
    bb70:	f8a4 3094 	strh.w	r3, [r4, #148]	; 0x94
	err = chan->chan.ops->recv(&chan->chan, buf);
    bb74:	6863      	ldr	r3, [r4, #4]
	l2cap_chan_le_recv_sdu(chan, buf, seg);
    bb76:	f8bd 5016 	ldrh.w	r5, [sp, #22]
	err = chan->chan.ops->recv(&chan->chan, buf);
    bb7a:	691b      	ldr	r3, [r3, #16]
    bb7c:	4631      	mov	r1, r6
    bb7e:	4620      	mov	r0, r4
    bb80:	4798      	blx	r3
	if (err < 0) {
    bb82:	1e01      	subs	r1, r0, #0
    bb84:	da13      	bge.n	bbae <l2cap_chan_le_recv_seg+0x146>
		if (err != -EINPROGRESS) {
    bb86:	f111 0f44 	cmn.w	r1, #68	; 0x44
    bb8a:	d096      	beq.n	baba <l2cap_chan_le_recv_seg+0x52>
    bb8c:	4b0b      	ldr	r3, [pc, #44]	; (bbbc <l2cap_chan_le_recv_seg+0x154>)
    bb8e:	4a0a      	ldr	r2, [pc, #40]	; (bbb8 <l2cap_chan_le_recv_seg+0x150>)
			BT_ERR("err %d", err);
    bb90:	480e      	ldr	r0, [pc, #56]	; (bbcc <l2cap_chan_le_recv_seg+0x164>)
    bb92:	1ad2      	subs	r2, r2, r3
    bb94:	08d2      	lsrs	r2, r2, #3
    bb96:	0192      	lsls	r2, r2, #6
    bb98:	f042 0201 	orr.w	r2, r2, #1
    bb9c:	f012 fca2 	bl	1e4e4 <log_1>
			bt_l2cap_chan_disconnect(&chan->chan);
    bba0:	4620      	mov	r0, r4
    bba2:	f015 f888 	bl	20cb6 <bt_l2cap_chan_disconnect>
	net_buf_unref(buf);
    bba6:	4630      	mov	r0, r6
    bba8:	f00f ff96 	bl	1bad8 <net_buf_unref>
    bbac:	e785      	b.n	baba <l2cap_chan_le_recv_seg+0x52>
	l2cap_chan_send_credits(chan, buf, seg);
    bbae:	4629      	mov	r1, r5
    bbb0:	4620      	mov	r0, r4
    bbb2:	f7ff fde1 	bl	b778 <l2cap_chan_send_credits.isra.0>
    bbb6:	e7f6      	b.n	bba6 <l2cap_chan_le_recv_seg+0x13e>
    bbb8:	000237c0 	.word	0x000237c0
    bbbc:	000236e8 	.word	0x000236e8
    bbc0:	000263c0 	.word	0x000263c0
    bbc4:	000206fd 	.word	0x000206fd
    bbc8:	000263d4 	.word	0x000263d4
    bbcc:	000263e8 	.word	0x000263e8

0000bbd0 <l2cap_chan_le_recv>:
{
    bbd0:	b570      	push	{r4, r5, r6, lr}
	if (!test_and_dec(&chan->rx.credits)) {
    bbd2:	f100 0358 	add.w	r3, r0, #88	; 0x58
{
    bbd6:	4604      	mov	r4, r0
    bbd8:	460d      	mov	r5, r1
		old_value = atomic_get(target);
    bbda:	4618      	mov	r0, r3
    bbdc:	f014 fd98 	bl	20710 <atomic_get>
		if (!old_value) {
    bbe0:	2800      	cmp	r0, #0
    bbe2:	d05b      	beq.n	bc9c <l2cap_chan_le_recv+0xcc>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    bbe4:	f3bf 8f5b 	dmb	ish
		new_value = old_value - 1;
    bbe8:	1e42      	subs	r2, r0, #1
    bbea:	e853 1f00 	ldrex	r1, [r3]
    bbee:	4281      	cmp	r1, r0
    bbf0:	d103      	bne.n	bbfa <l2cap_chan_le_recv+0x2a>
    bbf2:	e843 2600 	strex	r6, r2, [r3]
    bbf6:	2e00      	cmp	r6, #0
    bbf8:	d1f7      	bne.n	bbea <l2cap_chan_le_recv+0x1a>
    bbfa:	f3bf 8f5b 	dmb	ish
	} while (atomic_cas(target, old_value, new_value) == 0);
    bbfe:	d1ec      	bne.n	bbda <l2cap_chan_le_recv+0xa>
	if (chan->_sdu) {
    bc00:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    bc04:	bb33      	cbnz	r3, bc54 <l2cap_chan_le_recv+0x84>
	sdu_len = net_buf_pull_le16(buf);
    bc06:	f105 0008 	add.w	r0, r5, #8
    bc0a:	f016 fd0e 	bl	2262a <net_buf_simple_pull_le16>
	if (sdu_len > chan->rx.mtu) {
    bc0e:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
    bc12:	4283      	cmp	r3, r0
	sdu_len = net_buf_pull_le16(buf);
    bc14:	4606      	mov	r6, r0
	if (sdu_len > chan->rx.mtu) {
    bc16:	d20a      	bcs.n	bc2e <l2cap_chan_le_recv+0x5e>
    bc18:	4925      	ldr	r1, [pc, #148]	; (bcb0 <l2cap_chan_le_recv+0xe0>)
    bc1a:	4b26      	ldr	r3, [pc, #152]	; (bcb4 <l2cap_chan_le_recv+0xe4>)
		BT_ERR("Invalid SDU length");
    bc1c:	4826      	ldr	r0, [pc, #152]	; (bcb8 <l2cap_chan_le_recv+0xe8>)
    bc1e:	1ac9      	subs	r1, r1, r3
    bc20:	08c9      	lsrs	r1, r1, #3
    bc22:	0189      	lsls	r1, r1, #6
    bc24:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("No credits to receive packet");
    bc28:	f012 fc4f 	bl	1e4ca <log_0>
    bc2c:	e02b      	b.n	bc86 <l2cap_chan_le_recv+0xb6>
	if (chan->chan.ops->alloc_buf) {
    bc2e:	6863      	ldr	r3, [r4, #4]
    bc30:	68da      	ldr	r2, [r3, #12]
    bc32:	b1aa      	cbz	r2, bc60 <l2cap_chan_le_recv+0x90>
		chan->_sdu = chan->chan.ops->alloc_buf(&chan->chan);
    bc34:	4620      	mov	r0, r4
    bc36:	4790      	blx	r2
    bc38:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
		if (!chan->_sdu) {
    bc3c:	b940      	cbnz	r0, bc50 <l2cap_chan_le_recv+0x80>
    bc3e:	491c      	ldr	r1, [pc, #112]	; (bcb0 <l2cap_chan_le_recv+0xe0>)
    bc40:	4b1c      	ldr	r3, [pc, #112]	; (bcb4 <l2cap_chan_le_recv+0xe4>)
			BT_ERR("Unable to allocate buffer for SDU");
    bc42:	481e      	ldr	r0, [pc, #120]	; (bcbc <l2cap_chan_le_recv+0xec>)
    bc44:	1ac9      	subs	r1, r1, r3
    bc46:	08c9      	lsrs	r1, r1, #3
    bc48:	0189      	lsls	r1, r1, #6
    bc4a:	f041 0101 	orr.w	r1, r1, #1
    bc4e:	e7eb      	b.n	bc28 <l2cap_chan_le_recv+0x58>
		chan->_sdu_len = sdu_len;
    bc50:	f8a4 6094 	strh.w	r6, [r4, #148]	; 0x94
		l2cap_chan_le_recv_seg(chan, buf);
    bc54:	4629      	mov	r1, r5
    bc56:	4620      	mov	r0, r4
}
    bc58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		l2cap_chan_le_recv_seg(chan, buf);
    bc5c:	f7ff bf04 	b.w	ba68 <l2cap_chan_le_recv_seg>
	err = chan->chan.ops->recv(&chan->chan, buf);
    bc60:	4629      	mov	r1, r5
    bc62:	691b      	ldr	r3, [r3, #16]
    bc64:	4620      	mov	r0, r4
    bc66:	4798      	blx	r3
	if (err) {
    bc68:	4601      	mov	r1, r0
    bc6a:	b188      	cbz	r0, bc90 <l2cap_chan_le_recv+0xc0>
		if (err != -EINPROGRESS) {
    bc6c:	f110 0f44 	cmn.w	r0, #68	; 0x44
    bc70:	d01d      	beq.n	bcae <l2cap_chan_le_recv+0xde>
    bc72:	4a0f      	ldr	r2, [pc, #60]	; (bcb0 <l2cap_chan_le_recv+0xe0>)
    bc74:	4b0f      	ldr	r3, [pc, #60]	; (bcb4 <l2cap_chan_le_recv+0xe4>)
			BT_ERR("err %d", err);
    bc76:	4812      	ldr	r0, [pc, #72]	; (bcc0 <l2cap_chan_le_recv+0xf0>)
    bc78:	1ad2      	subs	r2, r2, r3
    bc7a:	08d2      	lsrs	r2, r2, #3
    bc7c:	0192      	lsls	r2, r2, #6
    bc7e:	f042 0201 	orr.w	r2, r2, #1
    bc82:	f012 fc2f 	bl	1e4e4 <log_1>
		bt_l2cap_chan_disconnect(&chan->chan);
    bc86:	4620      	mov	r0, r4
}
    bc88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_l2cap_chan_disconnect(&chan->chan);
    bc8c:	f015 b813 	b.w	20cb6 <bt_l2cap_chan_disconnect>
	l2cap_chan_send_credits(chan, buf, 1);
    bc90:	4620      	mov	r0, r4
    bc92:	2101      	movs	r1, #1
}
    bc94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	l2cap_chan_send_credits(chan, buf, 1);
    bc98:	f7ff bd6e 	b.w	b778 <l2cap_chan_send_credits.isra.0>
    bc9c:	4904      	ldr	r1, [pc, #16]	; (bcb0 <l2cap_chan_le_recv+0xe0>)
    bc9e:	4b05      	ldr	r3, [pc, #20]	; (bcb4 <l2cap_chan_le_recv+0xe4>)
		BT_ERR("No credits to receive packet");
    bca0:	4808      	ldr	r0, [pc, #32]	; (bcc4 <l2cap_chan_le_recv+0xf4>)
    bca2:	1ac9      	subs	r1, r1, r3
    bca4:	08c9      	lsrs	r1, r1, #3
    bca6:	0189      	lsls	r1, r1, #6
    bca8:	f041 0101 	orr.w	r1, r1, #1
    bcac:	e7bc      	b.n	bc28 <l2cap_chan_le_recv+0x58>
}
    bcae:	bd70      	pop	{r4, r5, r6, pc}
    bcb0:	000237c0 	.word	0x000237c0
    bcb4:	000236e8 	.word	0x000236e8
    bcb8:	000263ef 	.word	0x000263ef
    bcbc:	00026402 	.word	0x00026402
    bcc0:	000263e8 	.word	0x000263e8
    bcc4:	00026424 	.word	0x00026424

0000bcc8 <bt_l2cap_recv>:
{
    bcc8:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
    bcca:	898b      	ldrh	r3, [r1, #12]
    bccc:	2b03      	cmp	r3, #3
{
    bcce:	4605      	mov	r5, r0
    bcd0:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
    bcd2:	d80a      	bhi.n	bcea <bt_l2cap_recv+0x22>
    bcd4:	492e      	ldr	r1, [pc, #184]	; (bd90 <bt_l2cap_recv+0xc8>)
    bcd6:	4b2f      	ldr	r3, [pc, #188]	; (bd94 <bt_l2cap_recv+0xcc>)
		BT_ERR("Too small L2CAP PDU received");
    bcd8:	482f      	ldr	r0, [pc, #188]	; (bd98 <bt_l2cap_recv+0xd0>)
    bcda:	1ac9      	subs	r1, r1, r3
    bcdc:	08c9      	lsrs	r1, r1, #3
    bcde:	0189      	lsls	r1, r1, #6
    bce0:	f041 0101 	orr.w	r1, r1, #1
		BT_WARN("Ignoring data received while channel has shutdown");
    bce4:	f012 fbf1 	bl	1e4ca <log_0>
		net_buf_unref(buf);
    bce8:	e014      	b.n	bd14 <bt_l2cap_recv+0x4c>
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    bcea:	2104      	movs	r1, #4
    bcec:	f104 0008 	add.w	r0, r4, #8
    bcf0:	f016 fc8b 	bl	2260a <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
    bcf4:	8841      	ldrh	r1, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
    bcf6:	4628      	mov	r0, r5
    bcf8:	f014 ffab 	bl	20c52 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    bcfc:	4605      	mov	r5, r0
    bcfe:	b970      	cbnz	r0, bd1e <bt_l2cap_recv+0x56>
    bd00:	4a23      	ldr	r2, [pc, #140]	; (bd90 <bt_l2cap_recv+0xc8>)
    bd02:	4b24      	ldr	r3, [pc, #144]	; (bd94 <bt_l2cap_recv+0xcc>)
		BT_WARN("Ignoring data for unknown CID 0x%04x", cid);
    bd04:	4825      	ldr	r0, [pc, #148]	; (bd9c <bt_l2cap_recv+0xd4>)
    bd06:	1ad2      	subs	r2, r2, r3
    bd08:	08d2      	lsrs	r2, r2, #3
    bd0a:	0192      	lsls	r2, r2, #6
    bd0c:	f042 0202 	orr.w	r2, r2, #2
    bd10:	f012 fbe8 	bl	1e4e4 <log_1>
	net_buf_unref(buf);
    bd14:	4620      	mov	r0, r4
}
    bd16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
    bd1a:	f00f bedd 	b.w	1bad8 <net_buf_unref>
	if (L2CAP_LE_CID_IS_DYN(ch->rx.cid)) {
    bd1e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
    bd22:	3b40      	subs	r3, #64	; 0x40
    bd24:	2b3f      	cmp	r3, #63	; 0x3f
    bd26:	d82e      	bhi.n	bd86 <bt_l2cap_recv+0xbe>
	if (chan->chan.state == BT_L2CAP_DISCONNECT) {
    bd28:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
    bd2c:	2b04      	cmp	r3, #4
    bd2e:	d108      	bne.n	bd42 <bt_l2cap_recv+0x7a>
    bd30:	4917      	ldr	r1, [pc, #92]	; (bd90 <bt_l2cap_recv+0xc8>)
    bd32:	4b18      	ldr	r3, [pc, #96]	; (bd94 <bt_l2cap_recv+0xcc>)
		BT_WARN("Ignoring data received while disconnecting");
    bd34:	481a      	ldr	r0, [pc, #104]	; (bda0 <bt_l2cap_recv+0xd8>)
    bd36:	1ac9      	subs	r1, r1, r3
    bd38:	08c9      	lsrs	r1, r1, #3
    bd3a:	0189      	lsls	r1, r1, #6
    bd3c:	f041 0102 	orr.w	r1, r1, #2
    bd40:	e7d0      	b.n	bce4 <bt_l2cap_recv+0x1c>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    bd42:	3040      	adds	r0, #64	; 0x40
    bd44:	f014 fce4 	bl	20710 <atomic_get>
	if (atomic_test_bit(chan->chan.status, BT_L2CAP_STATUS_SHUTDOWN)) {
    bd48:	0783      	lsls	r3, r0, #30
    bd4a:	d508      	bpl.n	bd5e <bt_l2cap_recv+0x96>
    bd4c:	4910      	ldr	r1, [pc, #64]	; (bd90 <bt_l2cap_recv+0xc8>)
    bd4e:	4b11      	ldr	r3, [pc, #68]	; (bd94 <bt_l2cap_recv+0xcc>)
		BT_WARN("Ignoring data received while channel has shutdown");
    bd50:	4814      	ldr	r0, [pc, #80]	; (bda4 <bt_l2cap_recv+0xdc>)
    bd52:	1ac9      	subs	r1, r1, r3
    bd54:	08c9      	lsrs	r1, r1, #3
    bd56:	0189      	lsls	r1, r1, #6
    bd58:	f041 0102 	orr.w	r1, r1, #2
    bd5c:	e7c2      	b.n	bce4 <bt_l2cap_recv+0x1c>
	if (!L2CAP_LE_PSM_IS_DYN(chan->chan.psm)) {
    bd5e:	f8b5 3046 	ldrh.w	r3, [r5, #70]	; 0x46
    bd62:	3b80      	subs	r3, #128	; 0x80
    bd64:	2b7f      	cmp	r3, #127	; 0x7f
		l2cap_chan_le_recv(chan, buf);
    bd66:	4621      	mov	r1, r4
	if (!L2CAP_LE_PSM_IS_DYN(chan->chan.psm)) {
    bd68:	d903      	bls.n	bd72 <bt_l2cap_recv+0xaa>
		l2cap_chan_le_recv(chan, buf);
    bd6a:	4628      	mov	r0, r5
    bd6c:	f7ff ff30 	bl	bbd0 <l2cap_chan_le_recv>
		net_buf_unref(buf);
    bd70:	e7d0      	b.n	bd14 <bt_l2cap_recv+0x4c>
	net_buf_put(&chan->rx_queue, buf);
    bd72:	f105 00a4 	add.w	r0, r5, #164	; 0xa4
    bd76:	f016 fbcc 	bl	22512 <net_buf_put>
	k_work_submit_to_queue(&k_sys_work_q, work);
    bd7a:	f105 0098 	add.w	r0, r5, #152	; 0x98
}
    bd7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    bd82:	f7ff bbbd 	b.w	b500 <k_work_submit_to_queue.constprop.0>
	chan->ops->recv(chan, buf);
    bd86:	6843      	ldr	r3, [r0, #4]
    bd88:	4621      	mov	r1, r4
    bd8a:	691b      	ldr	r3, [r3, #16]
    bd8c:	4798      	blx	r3
    bd8e:	e7c1      	b.n	bd14 <bt_l2cap_recv+0x4c>
    bd90:	000237c0 	.word	0x000237c0
    bd94:	000236e8 	.word	0x000236e8
    bd98:	00026441 	.word	0x00026441
    bd9c:	0002645e 	.word	0x0002645e
    bda0:	00026483 	.word	0x00026483
    bda4:	000264ae 	.word	0x000264ae

0000bda8 <l2cap_recv>:
{
    bda8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (buf->len < sizeof(*hdr)) {
    bdac:	898b      	ldrh	r3, [r1, #12]
    bdae:	2b03      	cmp	r3, #3
{
    bdb0:	b091      	sub	sp, #68	; 0x44
    bdb2:	4606      	mov	r6, r0
    bdb4:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    bdb6:	d80a      	bhi.n	bdce <l2cap_recv+0x26>
    bdb8:	49b3      	ldr	r1, [pc, #716]	; (c088 <l2cap_recv+0x2e0>)
    bdba:	4bb4      	ldr	r3, [pc, #720]	; (c08c <l2cap_recv+0x2e4>)
		BT_ERR("Too small L2CAP signaling PDU");
    bdbc:	48b4      	ldr	r0, [pc, #720]	; (c090 <l2cap_recv+0x2e8>)
    bdbe:	1ac9      	subs	r1, r1, r3
    bdc0:	08c9      	lsrs	r1, r1, #3
    bdc2:	0189      	lsls	r1, r1, #6
    bdc4:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Too small ecred reconf req packet size");
    bdc8:	f012 fb7f 	bl	1e4ca <log_0>
		return;
    bdcc:	e014      	b.n	bdf8 <l2cap_recv+0x50>
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    bdce:	f101 0908 	add.w	r9, r1, #8
    bdd2:	4648      	mov	r0, r9
    bdd4:	2104      	movs	r1, #4
    bdd6:	f016 fc18 	bl	2260a <net_buf_simple_pull_mem>
	if (buf->len != len) {
    bdda:	89a9      	ldrh	r1, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
    bddc:	8842      	ldrh	r2, [r0, #2]
	if (buf->len != len) {
    bdde:	428a      	cmp	r2, r1
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    bde0:	4607      	mov	r7, r0
	if (buf->len != len) {
    bde2:	d00d      	beq.n	be00 <l2cap_recv+0x58>
    bde4:	48a9      	ldr	r0, [pc, #676]	; (c08c <l2cap_recv+0x2e4>)
    bde6:	4ba8      	ldr	r3, [pc, #672]	; (c088 <l2cap_recv+0x2e0>)
    bde8:	1a1b      	subs	r3, r3, r0
    bdea:	08db      	lsrs	r3, r3, #3
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
    bdec:	019b      	lsls	r3, r3, #6
    bdee:	48a9      	ldr	r0, [pc, #676]	; (c094 <l2cap_recv+0x2ec>)
    bdf0:	f043 0301 	orr.w	r3, r3, #1
    bdf4:	f012 fb8a 	bl	1e50c <log_2>
}
    bdf8:	2000      	movs	r0, #0
    bdfa:	b011      	add	sp, #68	; 0x44
    bdfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!hdr->ident) {
    be00:	7844      	ldrb	r4, [r0, #1]
    be02:	b944      	cbnz	r4, be16 <l2cap_recv+0x6e>
    be04:	49a0      	ldr	r1, [pc, #640]	; (c088 <l2cap_recv+0x2e0>)
    be06:	4ba1      	ldr	r3, [pc, #644]	; (c08c <l2cap_recv+0x2e4>)
		BT_ERR("Invalid ident value in L2CAP PDU");
    be08:	48a3      	ldr	r0, [pc, #652]	; (c098 <l2cap_recv+0x2f0>)
    be0a:	1ac9      	subs	r1, r1, r3
    be0c:	08c9      	lsrs	r1, r1, #3
    be0e:	0189      	lsls	r1, r1, #6
    be10:	f041 0101 	orr.w	r1, r1, #1
    be14:	e7d8      	b.n	bdc8 <l2cap_recv+0x20>
	switch (hdr->code) {
    be16:	7803      	ldrb	r3, [r0, #0]
    be18:	1e5a      	subs	r2, r3, #1
    be1a:	2a18      	cmp	r2, #24
    be1c:	f200 8383 	bhi.w	c526 <l2cap_recv+0x77e>
    be20:	e8df f012 	tbh	[pc, r2, lsl #1]
    be24:	03810188 	.word	0x03810188
    be28:	03810381 	.word	0x03810381
    be2c:	00ec0381 	.word	0x00ec0381
    be30:	03810127 	.word	0x03810127
    be34:	03810381 	.word	0x03810381
    be38:	03810381 	.word	0x03810381
    be3c:	03810381 	.word	0x03810381
    be40:	03810381 	.word	0x03810381
    be44:	03310381 	.word	0x03310381
    be48:	00240019 	.word	0x00240019
    be4c:	01500089 	.word	0x01500089
    be50:	0242018e 	.word	0x0242018e
    be54:	02e0      	.short	0x02e0
	if (buf->len < sizeof(*rsp)) {
    be56:	2901      	cmp	r1, #1
    be58:	d8ce      	bhi.n	bdf8 <l2cap_recv+0x50>
    be5a:	498b      	ldr	r1, [pc, #556]	; (c088 <l2cap_recv+0x2e0>)
    be5c:	4b8b      	ldr	r3, [pc, #556]	; (c08c <l2cap_recv+0x2e4>)
		BT_ERR("Too small LE conn param rsp");
    be5e:	488f      	ldr	r0, [pc, #572]	; (c09c <l2cap_recv+0x2f4>)
    be60:	1ac9      	subs	r1, r1, r3
    be62:	08c9      	lsrs	r1, r1, #3
    be64:	0189      	lsls	r1, r1, #6
    be66:	f041 0101 	orr.w	r1, r1, #1
    be6a:	e7ad      	b.n	bdc8 <l2cap_recv+0x20>
	if (buf->len < sizeof(*req)) {
    be6c:	2909      	cmp	r1, #9
    be6e:	d808      	bhi.n	be82 <l2cap_recv+0xda>
    be70:	4985      	ldr	r1, [pc, #532]	; (c088 <l2cap_recv+0x2e0>)
    be72:	4b86      	ldr	r3, [pc, #536]	; (c08c <l2cap_recv+0x2e4>)
		BT_ERR("Too small LE conn req packet size");
    be74:	488a      	ldr	r0, [pc, #552]	; (c0a0 <l2cap_recv+0x2f8>)
    be76:	1ac9      	subs	r1, r1, r3
    be78:	08c9      	lsrs	r1, r1, #3
    be7a:	0189      	lsls	r1, r1, #6
    be7c:	f041 0101 	orr.w	r1, r1, #1
    be80:	e7a2      	b.n	bdc8 <l2cap_recv+0x20>
	struct bt_l2cap_le_conn_req *req = (void *)buf->data;
    be82:	68ab      	ldr	r3, [r5, #8]
	mtu = sys_le16_to_cpu(req->mtu);
    be84:	f8b3 b004 	ldrh.w	fp, [r3, #4]
	if (mtu < L2CAP_LE_MIN_MTU || mps < L2CAP_LE_MIN_MTU) {
    be88:	f1bb 0f16 	cmp.w	fp, #22
    be8c:	d902      	bls.n	be94 <l2cap_recv+0xec>
	mps = sys_le16_to_cpu(req->mps);
    be8e:	88df      	ldrh	r7, [r3, #6]
	if (mtu < L2CAP_LE_MIN_MTU || mps < L2CAP_LE_MIN_MTU) {
    be90:	2f16      	cmp	r7, #22
    be92:	d808      	bhi.n	bea6 <l2cap_recv+0xfe>
    be94:	497c      	ldr	r1, [pc, #496]	; (c088 <l2cap_recv+0x2e0>)
    be96:	4b7d      	ldr	r3, [pc, #500]	; (c08c <l2cap_recv+0x2e4>)
		BT_ERR("Invalid LE-Conn Req params");
    be98:	4882      	ldr	r0, [pc, #520]	; (c0a4 <l2cap_recv+0x2fc>)
    be9a:	1ac9      	subs	r1, r1, r3
    be9c:	08c9      	lsrs	r1, r1, #3
    be9e:	0189      	lsls	r1, r1, #6
    bea0:	f041 0101 	orr.w	r1, r1, #1
    bea4:	e790      	b.n	bdc8 <l2cap_recv+0x20>
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_LE_CONN_RSP, ident,
    bea6:	220a      	movs	r2, #10
    bea8:	4621      	mov	r1, r4
    beaa:	2015      	movs	r0, #21
		le_conn_req(l2cap, hdr->ident, buf);
    beac:	6836      	ldr	r6, [r6, #0]
	psm = sys_le16_to_cpu(req->psm);
    beae:	f8b3 a000 	ldrh.w	sl, [r3]
	scid = sys_le16_to_cpu(req->scid);
    beb2:	f8b3 8002 	ldrh.w	r8, [r3, #2]
	credits = sys_le16_to_cpu(req->credits);
    beb6:	f8b3 9008 	ldrh.w	r9, [r3, #8]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_LE_CONN_RSP, ident,
    beba:	f7ff fad1 	bl	b460 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
    bebe:	4605      	mov	r5, r0
    bec0:	2800      	cmp	r0, #0
    bec2:	d099      	beq.n	bdf8 <l2cap_recv+0x50>
	rsp = net_buf_add(buf, sizeof(*rsp));
    bec4:	210a      	movs	r1, #10
    bec6:	3008      	adds	r0, #8
    bec8:	f016 fb62 	bl	22590 <net_buf_simple_add>
	(void)memset(rsp, 0, sizeof(*rsp));
    becc:	2100      	movs	r1, #0
    bece:	220a      	movs	r2, #10
	rsp = net_buf_add(buf, sizeof(*rsp));
    bed0:	4604      	mov	r4, r0
	(void)memset(rsp, 0, sizeof(*rsp));
    bed2:	f013 fff7 	bl	1fec4 <memset>
	server = l2cap_server_lookup_psm(psm);
    bed6:	4650      	mov	r0, sl
    bed8:	f7ff fa84 	bl	b3e4 <l2cap_server_lookup_psm>
	if (!server) {
    bedc:	4601      	mov	r1, r0
    bede:	b928      	cbnz	r0, beec <l2cap_recv+0x144>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_LE_ERR_PSM_NOT_SUPP);
    bee0:	2302      	movs	r3, #2
    bee2:	7223      	strb	r3, [r4, #8]
    bee4:	7260      	strb	r0, [r4, #9]
	bt_l2cap_send(conn, BT_L2CAP_CID_LE_SIG, buf);
    bee6:	4629      	mov	r1, r5
	bt_l2cap_send(conn, BT_L2CAP_CID_LE_SIG, buf);
    bee8:	4630      	mov	r0, r6
    beea:	e0bf      	b.n	c06c <l2cap_recv+0x2c4>
	if (conn->sec_level < server->sec_level) {
    beec:	7a72      	ldrb	r2, [r6, #9]
    beee:	7883      	ldrb	r3, [r0, #2]
    bef0:	429a      	cmp	r2, r3
    bef2:	d204      	bcs.n	befe <l2cap_recv+0x156>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_LE_ERR_AUTHENTICATION);
    bef4:	2305      	movs	r3, #5
    bef6:	7223      	strb	r3, [r4, #8]
    bef8:	2300      	movs	r3, #0
    befa:	7263      	strb	r3, [r4, #9]
		goto rsp;
    befc:	e7f3      	b.n	bee6 <l2cap_recv+0x13e>
	result = l2cap_chan_accept(conn, server, scid, mtu, mps, credits,
    befe:	ab0b      	add	r3, sp, #44	; 0x2c
    bf00:	e9cd 9301 	strd	r9, r3, [sp, #4]
    bf04:	9700      	str	r7, [sp, #0]
    bf06:	465b      	mov	r3, fp
    bf08:	4642      	mov	r2, r8
    bf0a:	4630      	mov	r0, r6
    bf0c:	f7ff fd3e 	bl	b98c <l2cap_chan_accept>
	if (result != BT_L2CAP_LE_SUCCESS) {
    bf10:	b108      	cbz	r0, bf16 <l2cap_recv+0x16e>
		rsp->result = sys_cpu_to_le16(result);
    bf12:	8120      	strh	r0, [r4, #8]
		goto rsp;
    bf14:	e7e7      	b.n	bee6 <l2cap_recv+0x13e>
	ch = BT_L2CAP_LE_CHAN(chan);
    bf16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	rsp->dcid = sys_cpu_to_le16(ch->rx.cid);
    bf18:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
    bf1c:	8022      	strh	r2, [r4, #0]
	rsp->mps = sys_cpu_to_le16(ch->rx.mps);
    bf1e:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
    bf22:	80a2      	strh	r2, [r4, #4]
	rsp->mtu = sys_cpu_to_le16(ch->rx.mtu);
    bf24:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
	rsp->credits = sys_cpu_to_le16(ch->rx.init_credits);
    bf28:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
	rsp->mtu = sys_cpu_to_le16(ch->rx.mtu);
    bf2c:	8062      	strh	r2, [r4, #2]
	rsp->credits = sys_cpu_to_le16(ch->rx.init_credits);
    bf2e:	80e3      	strh	r3, [r4, #6]
	rsp->result = BT_L2CAP_LE_SUCCESS;
    bf30:	7220      	strb	r0, [r4, #8]
    bf32:	7260      	strb	r0, [r4, #9]
    bf34:	e7d7      	b.n	bee6 <l2cap_recv+0x13e>
	if (buf->len < sizeof(*rsp)) {
    bf36:	2909      	cmp	r1, #9
    bf38:	d808      	bhi.n	bf4c <l2cap_recv+0x1a4>
    bf3a:	4953      	ldr	r1, [pc, #332]	; (c088 <l2cap_recv+0x2e0>)
    bf3c:	4b53      	ldr	r3, [pc, #332]	; (c08c <l2cap_recv+0x2e4>)
		BT_ERR("Too small LE conn rsp packet size");
    bf3e:	485a      	ldr	r0, [pc, #360]	; (c0a8 <l2cap_recv+0x300>)
    bf40:	1ac9      	subs	r1, r1, r3
    bf42:	08c9      	lsrs	r1, r1, #3
    bf44:	0189      	lsls	r1, r1, #6
    bf46:	f041 0101 	orr.w	r1, r1, #1
    bf4a:	e73d      	b.n	bdc8 <l2cap_recv+0x20>
	struct bt_l2cap_le_conn_rsp *rsp = (void *)buf->data;
    bf4c:	68ab      	ldr	r3, [r5, #8]
		le_conn_rsp(l2cap, hdr->ident, buf);
    bf4e:	6837      	ldr	r7, [r6, #0]
	result = sys_le16_to_cpu(rsp->result);
    bf50:	891e      	ldrh	r6, [r3, #8]
	dcid = sys_le16_to_cpu(rsp->dcid);
    bf52:	f8b3 b000 	ldrh.w	fp, [r3]
	mtu = sys_le16_to_cpu(rsp->mtu);
    bf56:	f8b3 a002 	ldrh.w	sl, [r3, #2]
	mps = sys_le16_to_cpu(rsp->mps);
    bf5a:	f8b3 9004 	ldrh.w	r9, [r3, #4]
	credits = sys_le16_to_cpu(rsp->credits);
    bf5e:	f8b3 8006 	ldrh.w	r8, [r3, #6]
	if (result == BT_L2CAP_LE_SUCCESS ||
    bf62:	f026 0308 	bic.w	r3, r6, #8
    bf66:	b2a1      	uxth	r1, r4
    bf68:	b10b      	cbz	r3, bf6e <l2cap_recv+0x1c6>
    bf6a:	2e05      	cmp	r6, #5
    bf6c:	d111      	bne.n	bf92 <l2cap_recv+0x1ea>
		chan = l2cap_lookup_ident(conn, ident);
    bf6e:	2200      	movs	r2, #0
		chan = l2cap_remove_ident(conn, ident);
    bf70:	4638      	mov	r0, r7
    bf72:	f014 fb85 	bl	20680 <__l2cap_lookup_ident>
    bf76:	4605      	mov	r5, r0
	if (!chan) {
    bf78:	b968      	cbnz	r0, bf96 <l2cap_recv+0x1ee>
    bf7a:	4b44      	ldr	r3, [pc, #272]	; (c08c <l2cap_recv+0x2e4>)
    bf7c:	4a42      	ldr	r2, [pc, #264]	; (c088 <l2cap_recv+0x2e0>)
		BT_ERR("Cannot find channel for ident %u", ident);
    bf7e:	484b      	ldr	r0, [pc, #300]	; (c0ac <l2cap_recv+0x304>)
    bf80:	1ad2      	subs	r2, r2, r3
    bf82:	08d2      	lsrs	r2, r2, #3
    bf84:	0192      	lsls	r2, r2, #6
    bf86:	f042 0201 	orr.w	r2, r2, #1
    bf8a:	4621      	mov	r1, r4
    bf8c:	f012 faaa 	bl	1e4e4 <log_1>
		return;
    bf90:	e732      	b.n	bdf8 <l2cap_recv+0x50>
		chan = l2cap_remove_ident(conn, ident);
    bf92:	2201      	movs	r2, #1
    bf94:	e7ec      	b.n	bf70 <l2cap_recv+0x1c8>
	k_delayed_work_cancel(&chan->chan.rtx_work);
    bf96:	3010      	adds	r0, #16
    bf98:	f017 f8b2 	bl	23100 <k_delayed_work_cancel>
	chan->chan.ident = 0U;
    bf9c:	2300      	movs	r3, #0
	switch (result) {
    bf9e:	2e05      	cmp	r6, #5
	chan->chan.ident = 0U;
    bfa0:	f885 3048 	strb.w	r3, [r5, #72]	; 0x48
	switch (result) {
    bfa4:	d01b      	beq.n	bfde <l2cap_recv+0x236>
    bfa6:	2e08      	cmp	r6, #8
    bfa8:	d019      	beq.n	bfde <l2cap_recv+0x236>
    bfaa:	bb1e      	cbnz	r6, bff4 <l2cap_recv+0x24c>
	chan->state = state;
    bfac:	2303      	movs	r3, #3
    bfae:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
		if (chan->chan.ops->connected) {
    bfb2:	686b      	ldr	r3, [r5, #4]
		chan->tx.cid = dcid;
    bfb4:	f8a5 b05c 	strh.w	fp, [r5, #92]	; 0x5c
		if (chan->chan.ops->connected) {
    bfb8:	681b      	ldr	r3, [r3, #0]
		chan->tx.mtu = mtu;
    bfba:	f8a5 a05e 	strh.w	sl, [r5, #94]	; 0x5e
		chan->tx.mps = mps;
    bfbe:	f8a5 9060 	strh.w	r9, [r5, #96]	; 0x60
		if (chan->chan.ops->connected) {
    bfc2:	b10b      	cbz	r3, bfc8 <l2cap_recv+0x220>
			chan->chan.ops->connected(&chan->chan);
    bfc4:	4628      	mov	r0, r5
    bfc6:	4798      	blx	r3
		l2cap_chan_tx_give_credits(chan, credits);
    bfc8:	4641      	mov	r1, r8
    bfca:	4628      	mov	r0, r5
    bfcc:	f014 fc0d 	bl	207ea <l2cap_chan_tx_give_credits>
	atomic_add(&chan->rx.credits, credits);
    bfd0:	f8b5 1056 	ldrh.w	r1, [r5, #86]	; 0x56
    bfd4:	f105 0058 	add.w	r0, r5, #88	; 0x58
    bfd8:	f014 fba0 	bl	2071c <atomic_add>
}
    bfdc:	e70c      	b.n	bdf8 <l2cap_recv+0x50>
		if (l2cap_change_security(chan, result) == 0) {
    bfde:	4631      	mov	r1, r6
    bfe0:	4628      	mov	r0, r5
    bfe2:	f014 fc1f 	bl	20824 <l2cap_change_security>
    bfe6:	2800      	cmp	r0, #0
    bfe8:	f43f af06 	beq.w	bdf8 <l2cap_recv+0x50>
		bt_l2cap_chan_remove(conn, &chan->chan);
    bfec:	4629      	mov	r1, r5
    bfee:	4638      	mov	r0, r7
    bff0:	f014 fc77 	bl	208e2 <bt_l2cap_chan_remove>
		bt_l2cap_chan_del(&chan->chan);
    bff4:	4628      	mov	r0, r5
	bt_l2cap_chan_del(&chan->chan);
    bff6:	f014 fc8d 	bl	20914 <bt_l2cap_chan_del>
    bffa:	e6fd      	b.n	bdf8 <l2cap_recv+0x50>
	if (buf->len < sizeof(*req)) {
    bffc:	2903      	cmp	r1, #3
    bffe:	f67f af37 	bls.w	be70 <l2cap_recv+0xc8>
		le_disconn_req(l2cap, hdr->ident, buf);
    c002:	6837      	ldr	r7, [r6, #0]
	struct bt_l2cap_disconn_req *req = (void *)buf->data;
    c004:	68ae      	ldr	r6, [r5, #8]
	chan = l2cap_remove_rx_cid(conn, dcid);
    c006:	4638      	mov	r0, r7
    c008:	8831      	ldrh	r1, [r6, #0]
    c00a:	f014 fb56 	bl	206ba <l2cap_remove_rx_cid>
	if (!chan) {
    c00e:	4605      	mov	r5, r0
    c010:	b9a0      	cbnz	r0, c03c <l2cap_recv+0x294>
		data.scid = req->scid;
    c012:	78f2      	ldrb	r2, [r6, #3]
    c014:	78b3      	ldrb	r3, [r6, #2]
    c016:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    c01a:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
		data.dcid = req->dcid;
    c01e:	7872      	ldrb	r2, [r6, #1]
    c020:	7833      	ldrb	r3, [r6, #0]
    c022:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    c026:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_INVALID_CID, &data,
    c02a:	2304      	movs	r3, #4
    c02c:	9300      	str	r3, [sp, #0]
    c02e:	2202      	movs	r2, #2
    c030:	ab0b      	add	r3, sp, #44	; 0x2c
    c032:	4621      	mov	r1, r4
    c034:	4638      	mov	r0, r7
		l2cap_send_reject(chan->conn, hdr->ident,
    c036:	f014 fd26 	bl	20a86 <l2cap_send_reject>
		break;
    c03a:	e6dd      	b.n	bdf8 <l2cap_recv+0x50>
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_DISCONN_RSP, ident,
    c03c:	4621      	mov	r1, r4
    c03e:	2204      	movs	r2, #4
    c040:	2007      	movs	r0, #7
    c042:	f7ff fa0d 	bl	b460 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
    c046:	4604      	mov	r4, r0
    c048:	2800      	cmp	r0, #0
    c04a:	f43f aed5 	beq.w	bdf8 <l2cap_recv+0x50>
	rsp = net_buf_add(buf, sizeof(*rsp));
    c04e:	2104      	movs	r1, #4
    c050:	3008      	adds	r0, #8
    c052:	f016 fa9d 	bl	22590 <net_buf_simple_add>
	rsp->dcid = sys_cpu_to_le16(chan->rx.cid);
    c056:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
    c05a:	8003      	strh	r3, [r0, #0]
	rsp->scid = sys_cpu_to_le16(chan->tx.cid);
    c05c:	f8b5 305c 	ldrh.w	r3, [r5, #92]	; 0x5c
    c060:	8043      	strh	r3, [r0, #2]
	bt_l2cap_chan_del(&chan->chan);
    c062:	4628      	mov	r0, r5
    c064:	f014 fc56 	bl	20914 <bt_l2cap_chan_del>
	bt_l2cap_send(conn, BT_L2CAP_CID_LE_SIG, buf);
    c068:	4621      	mov	r1, r4
    c06a:	4638      	mov	r0, r7
	bt_l2cap_send(conn, BT_L2CAP_CID_LE_SIG, buf);
    c06c:	f014 fd01 	bl	20a72 <bt_l2cap_send.constprop.0>
    c070:	e6c2      	b.n	bdf8 <l2cap_recv+0x50>
	if (buf->len < sizeof(*rsp)) {
    c072:	2903      	cmp	r1, #3
    c074:	d81e      	bhi.n	c0b4 <l2cap_recv+0x30c>
    c076:	4904      	ldr	r1, [pc, #16]	; (c088 <l2cap_recv+0x2e0>)
    c078:	4b04      	ldr	r3, [pc, #16]	; (c08c <l2cap_recv+0x2e4>)
		BT_ERR("Too small LE disconn rsp packet size");
    c07a:	480d      	ldr	r0, [pc, #52]	; (c0b0 <l2cap_recv+0x308>)
    c07c:	1ac9      	subs	r1, r1, r3
    c07e:	08c9      	lsrs	r1, r1, #3
    c080:	0189      	lsls	r1, r1, #6
    c082:	f041 0101 	orr.w	r1, r1, #1
    c086:	e69f      	b.n	bdc8 <l2cap_recv+0x20>
    c088:	000237c0 	.word	0x000237c0
    c08c:	000236e8 	.word	0x000236e8
    c090:	000264e0 	.word	0x000264e0
    c094:	000264fe 	.word	0x000264fe
    c098:	0002651f 	.word	0x0002651f
    c09c:	00026540 	.word	0x00026540
    c0a0:	0002655c 	.word	0x0002655c
    c0a4:	0002657e 	.word	0x0002657e
    c0a8:	00026599 	.word	0x00026599
    c0ac:	000265bb 	.word	0x000265bb
    c0b0:	000265dc 	.word	0x000265dc
	scid = sys_le16_to_cpu(rsp->scid);
    c0b4:	68ab      	ldr	r3, [r5, #8]
	chan = l2cap_remove_rx_cid(conn, scid);
    c0b6:	6830      	ldr	r0, [r6, #0]
    c0b8:	8859      	ldrh	r1, [r3, #2]
    c0ba:	f014 fafe 	bl	206ba <l2cap_remove_rx_cid>
	if (!chan) {
    c0be:	2800      	cmp	r0, #0
    c0c0:	d199      	bne.n	bff6 <l2cap_recv+0x24e>
    c0c2:	e699      	b.n	bdf8 <l2cap_recv+0x50>
	if (buf->len < sizeof(*ev)) {
    c0c4:	2903      	cmp	r1, #3
    c0c6:	d808      	bhi.n	c0da <l2cap_recv+0x332>
    c0c8:	49b9      	ldr	r1, [pc, #740]	; (c3b0 <l2cap_recv+0x608>)
    c0ca:	4bba      	ldr	r3, [pc, #744]	; (c3b4 <l2cap_recv+0x60c>)
		BT_ERR("Too small LE Credits packet size");
    c0cc:	48ba      	ldr	r0, [pc, #744]	; (c3b8 <l2cap_recv+0x610>)
    c0ce:	1ac9      	subs	r1, r1, r3
    c0d0:	08c9      	lsrs	r1, r1, #3
    c0d2:	0189      	lsls	r1, r1, #6
    c0d4:	f041 0101 	orr.w	r1, r1, #1
    c0d8:	e676      	b.n	bdc8 <l2cap_recv+0x20>
	struct bt_l2cap_le_credits *ev = (void *)buf->data;
    c0da:	68aa      	ldr	r2, [r5, #8]
	chan = bt_l2cap_le_lookup_tx_cid(conn, cid);
    c0dc:	6830      	ldr	r0, [r6, #0]
    c0de:	8811      	ldrh	r1, [r2, #0]
    c0e0:	f014 fda7 	bl	20c32 <bt_l2cap_le_lookup_tx_cid>
	if (!chan) {
    c0e4:	4604      	mov	r4, r0
    c0e6:	b940      	cbnz	r0, c0fa <l2cap_recv+0x352>
    c0e8:	49b1      	ldr	r1, [pc, #708]	; (c3b0 <l2cap_recv+0x608>)
    c0ea:	4bb2      	ldr	r3, [pc, #712]	; (c3b4 <l2cap_recv+0x60c>)
		BT_ERR("Unable to find channel of LE Credits packet");
    c0ec:	48b3      	ldr	r0, [pc, #716]	; (c3bc <l2cap_recv+0x614>)
    c0ee:	1ac9      	subs	r1, r1, r3
    c0f0:	08c9      	lsrs	r1, r1, #3
    c0f2:	0189      	lsls	r1, r1, #6
    c0f4:	f041 0101 	orr.w	r1, r1, #1
    c0f8:	e666      	b.n	bdc8 <l2cap_recv+0x20>
	if (atomic_get(&ch->tx.credits) + credits > UINT16_MAX) {
    c0fa:	3064      	adds	r0, #100	; 0x64
	credits = sys_le16_to_cpu(ev->credits);
    c0fc:	8851      	ldrh	r1, [r2, #2]
	if (atomic_get(&ch->tx.credits) + credits > UINT16_MAX) {
    c0fe:	f014 fb07 	bl	20710 <atomic_get>
    c102:	4408      	add	r0, r1
    c104:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    c108:	db0d      	blt.n	c126 <l2cap_recv+0x37e>
    c10a:	4baa      	ldr	r3, [pc, #680]	; (c3b4 <l2cap_recv+0x60c>)
    c10c:	49a8      	ldr	r1, [pc, #672]	; (c3b0 <l2cap_recv+0x608>)
		BT_ERR("Credits overflow");
    c10e:	48ac      	ldr	r0, [pc, #688]	; (c3c0 <l2cap_recv+0x618>)
    c110:	1ac9      	subs	r1, r1, r3
    c112:	08c9      	lsrs	r1, r1, #3
    c114:	0189      	lsls	r1, r1, #6
    c116:	f041 0101 	orr.w	r1, r1, #1
    c11a:	f012 f9d6 	bl	1e4ca <log_0>
		bt_l2cap_chan_disconnect(chan);
    c11e:	4620      	mov	r0, r4
    c120:	f014 fdc9 	bl	20cb6 <bt_l2cap_chan_disconnect>
		return;
    c124:	e668      	b.n	bdf8 <l2cap_recv+0x50>
	l2cap_chan_tx_give_credits(ch, credits);
    c126:	4620      	mov	r0, r4
    c128:	f014 fb5f 	bl	207ea <l2cap_chan_tx_give_credits>
	l2cap_chan_tx_resume(ch);
    c12c:	4620      	mov	r0, r4
    c12e:	f014 fbb7 	bl	208a0 <l2cap_chan_tx_resume>
    c132:	e661      	b.n	bdf8 <l2cap_recv+0x50>
	chan = l2cap_remove_ident(conn, ident);
    c134:	6830      	ldr	r0, [r6, #0]
    c136:	2201      	movs	r2, #1
    c138:	4621      	mov	r1, r4
    c13a:	f014 faa1 	bl	20680 <__l2cap_lookup_ident>
    c13e:	e7be      	b.n	c0be <l2cap_recv+0x316>
	if (buf->len < sizeof(*req)) {
    c140:	2907      	cmp	r1, #7
		le_ecred_conn_req(l2cap, hdr->ident, buf);
    c142:	f8d6 a000 	ldr.w	sl, [r6]
	if (buf->len < sizeof(*req)) {
    c146:	d811      	bhi.n	c16c <l2cap_recv+0x3c4>
    c148:	4b9a      	ldr	r3, [pc, #616]	; (c3b4 <l2cap_recv+0x60c>)
    c14a:	4999      	ldr	r1, [pc, #612]	; (c3b0 <l2cap_recv+0x608>)
		BT_ERR("Too small LE conn req packet size");
    c14c:	489d      	ldr	r0, [pc, #628]	; (c3c4 <l2cap_recv+0x61c>)
    c14e:	1ac9      	subs	r1, r1, r3
    c150:	08c9      	lsrs	r1, r1, #3
    c152:	0189      	lsls	r1, r1, #6
    c154:	f041 0101 	orr.w	r1, r1, #1
    c158:	f012 f9b7 	bl	1e4ca <log_0>
		goto response;
    c15c:	2600      	movs	r6, #0
		result = BT_L2CAP_LE_ERR_INVALID_PARAMS;
    c15e:	f04f 0b0c 	mov.w	fp, #12
		i = buf->len / sizeof(scid);
    c162:	f8b5 800c 	ldrh.w	r8, [r5, #12]
    c166:	ea4f 0858 	mov.w	r8, r8, lsr #1
    c16a:	e04b      	b.n	c204 <l2cap_recv+0x45c>
	req = net_buf_pull_mem(buf, sizeof(*req));
    c16c:	2108      	movs	r1, #8
    c16e:	4648      	mov	r0, r9
    c170:	f016 fa4b 	bl	2260a <net_buf_simple_pull_mem>
	mtu = sys_le16_to_cpu(req->mtu);
    c174:	8843      	ldrh	r3, [r0, #2]
    c176:	9304      	str	r3, [sp, #16]
	if (mtu < L2CAP_ECRED_MIN_MTU || mps < L2CAP_ECRED_MIN_MTU) {
    c178:	2b3f      	cmp	r3, #63	; 0x3f
	req = net_buf_pull_mem(buf, sizeof(*req));
    c17a:	4606      	mov	r6, r0
	if (mtu < L2CAP_ECRED_MIN_MTU || mps < L2CAP_ECRED_MIN_MTU) {
    c17c:	d903      	bls.n	c186 <l2cap_recv+0x3de>
	mps = sys_le16_to_cpu(req->mps);
    c17e:	8883      	ldrh	r3, [r0, #4]
    c180:	9305      	str	r3, [sp, #20]
	if (mtu < L2CAP_ECRED_MIN_MTU || mps < L2CAP_ECRED_MIN_MTU) {
    c182:	2b3f      	cmp	r3, #63	; 0x3f
    c184:	d80d      	bhi.n	c1a2 <l2cap_recv+0x3fa>
    c186:	4b8b      	ldr	r3, [pc, #556]	; (c3b4 <l2cap_recv+0x60c>)
    c188:	4989      	ldr	r1, [pc, #548]	; (c3b0 <l2cap_recv+0x608>)
		BT_ERR("Invalid ecred conn req params");
    c18a:	488f      	ldr	r0, [pc, #572]	; (c3c8 <l2cap_recv+0x620>)
    c18c:	1ac9      	subs	r1, r1, r3
    c18e:	08c9      	lsrs	r1, r1, #3
    c190:	0189      	lsls	r1, r1, #6
    c192:	f041 0101 	orr.w	r1, r1, #1
    c196:	f012 f998 	bl	1e4ca <log_0>
		goto response;
    c19a:	2600      	movs	r6, #0
		result = BT_L2CAP_LE_ERR_UNACCEPT_PARAMS;
    c19c:	f04f 0b0b 	mov.w	fp, #11
		goto response;
    c1a0:	e7df      	b.n	c162 <l2cap_recv+0x3ba>
	server = l2cap_server_lookup_psm(psm);
    c1a2:	8800      	ldrh	r0, [r0, #0]
    c1a4:	f7ff f91e 	bl	b3e4 <l2cap_server_lookup_psm>
	if (!server) {
    c1a8:	4601      	mov	r1, r0
    c1aa:	2800      	cmp	r0, #0
    c1ac:	d068      	beq.n	c280 <l2cap_recv+0x4d8>
	if (conn->sec_level < server->sec_level) {
    c1ae:	f89a 2009 	ldrb.w	r2, [sl, #9]
    c1b2:	7883      	ldrb	r3, [r0, #2]
    c1b4:	429a      	cmp	r2, r3
    c1b6:	d367      	bcc.n	c288 <l2cap_recv+0x4e0>
	credits = sys_le16_to_cpu(req->credits);
    c1b8:	88f3      	ldrh	r3, [r6, #6]
    c1ba:	9306      	str	r3, [sp, #24]
    c1bc:	2700      	movs	r7, #0
	uint16_t psm, mtu, mps, credits, result = BT_L2CAP_LE_ERR_INVALID_SCID;
    c1be:	f04f 0b09 	mov.w	fp, #9
	struct bt_l2cap_le_chan *ch = NULL;
    c1c2:	463e      	mov	r6, r7
	while (buf->len >= sizeof(scid)) {
    c1c4:	89aa      	ldrh	r2, [r5, #12]
    c1c6:	2a01      	cmp	r2, #1
    c1c8:	46b8      	mov	r8, r7
    c1ca:	d919      	bls.n	c200 <l2cap_recv+0x458>
		scid = net_buf_pull_le16(buf);
    c1cc:	4648      	mov	r0, r9
    c1ce:	9107      	str	r1, [sp, #28]
    c1d0:	f016 fa2b 	bl	2262a <net_buf_simple_pull_le16>
		result = l2cap_chan_accept(conn, server, scid, mtu, mps,
    c1d4:	ab0b      	add	r3, sp, #44	; 0x2c
    c1d6:	eb03 0387 	add.w	r3, r3, r7, lsl #2
    c1da:	9302      	str	r3, [sp, #8]
    c1dc:	9b06      	ldr	r3, [sp, #24]
    c1de:	9301      	str	r3, [sp, #4]
    c1e0:	9b05      	ldr	r3, [sp, #20]
    c1e2:	9907      	ldr	r1, [sp, #28]
    c1e4:	9300      	str	r3, [sp, #0]
		scid = net_buf_pull_le16(buf);
    c1e6:	4602      	mov	r2, r0
		result = l2cap_chan_accept(conn, server, scid, mtu, mps,
    c1e8:	9b04      	ldr	r3, [sp, #16]
    c1ea:	4650      	mov	r0, sl
    c1ec:	f7ff fbce 	bl	b98c <l2cap_chan_accept>
		switch (result) {
    c1f0:	9907      	ldr	r1, [sp, #28]
    c1f2:	4683      	mov	fp, r0
    c1f4:	b3b0      	cbz	r0, c264 <l2cap_recv+0x4bc>
    c1f6:	f1a0 0209 	sub.w	r2, r0, #9
    c1fa:	b292      	uxth	r2, r2
    c1fc:	2a01      	cmp	r2, #1
    c1fe:	d93b      	bls.n	c278 <l2cap_recv+0x4d0>
	if (!i) {
    c200:	2f00      	cmp	r7, #0
    c202:	d0ae      	beq.n	c162 <l2cap_recv+0x3ba>
				      sizeof(*rsp) + (sizeof(scid) * i));
    c204:	f108 0204 	add.w	r2, r8, #4
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_ECRED_CONN_RSP, ident,
    c208:	0052      	lsls	r2, r2, #1
    c20a:	b292      	uxth	r2, r2
    c20c:	4621      	mov	r1, r4
    c20e:	2018      	movs	r0, #24
    c210:	f7ff f926 	bl	b460 <l2cap_create_le_sig_pdu.isra.0>
	rsp = net_buf_add(buf, sizeof(*rsp));
    c214:	f100 0708 	add.w	r7, r0, #8
    c218:	2108      	movs	r1, #8
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_ECRED_CONN_RSP, ident,
    c21a:	4605      	mov	r5, r0
	rsp = net_buf_add(buf, sizeof(*rsp));
    c21c:	4638      	mov	r0, r7
    c21e:	f016 f9b7 	bl	22590 <net_buf_simple_add>
	(void)memset(rsp, 0, sizeof(*rsp));
    c222:	2208      	movs	r2, #8
    c224:	2100      	movs	r1, #0
	rsp = net_buf_add(buf, sizeof(*rsp));
    c226:	4604      	mov	r4, r0
	(void)memset(rsp, 0, sizeof(*rsp));
    c228:	f013 fe4c 	bl	1fec4 <memset>
	if (result == BT_L2CAP_LE_ERR_UNACCEPT_PARAMS ||
    c22c:	f1ab 0102 	sub.w	r1, fp, #2
    c230:	b28a      	uxth	r2, r1
    c232:	2a09      	cmp	r2, #9
    c234:	ea4f 0848 	mov.w	r8, r8, lsl #1
    c238:	d82a      	bhi.n	c290 <l2cap_recv+0x4e8>
    c23a:	f240 2109 	movw	r1, #521	; 0x209
    c23e:	40d1      	lsrs	r1, r2
    c240:	43c9      	mvns	r1, r1
    c242:	f011 0101 	ands.w	r1, r1, #1
    c246:	d123      	bne.n	c290 <l2cap_recv+0x4e8>
		memset(dcid, 0, sizeof(scid) * i);
    c248:	4642      	mov	r2, r8
    c24a:	a808      	add	r0, sp, #32
    c24c:	f013 fe3a 	bl	1fec4 <memset>
	net_buf_add_mem(buf, dcid, sizeof(scid) * i);
    c250:	a908      	add	r1, sp, #32
    c252:	4642      	mov	r2, r8
    c254:	4638      	mov	r0, r7
    c256:	f016 f9a1 	bl	2259c <net_buf_simple_add_mem>
	rsp->result = sys_cpu_to_le16(result);
    c25a:	f8a4 b006 	strh.w	fp, [r4, #6]
	bt_l2cap_send(conn, BT_L2CAP_CID_LE_SIG, buf);
    c25e:	4629      	mov	r1, r5
    c260:	4650      	mov	r0, sl
    c262:	e703      	b.n	c06c <l2cap_recv+0x2c4>
			ch = BT_L2CAP_LE_CHAN(chan[i]);
    c264:	ab0b      	add	r3, sp, #44	; 0x2c
    c266:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
			dcid[i++] = sys_cpu_to_le16(ch->rx.cid);
    c26a:	f8b6 2050 	ldrh.w	r2, [r6, #80]	; 0x50
    c26e:	ab08      	add	r3, sp, #32
			dcid[i++] = 0x0000;
    c270:	f823 2017 	strh.w	r2, [r3, r7, lsl #1]
			continue;
    c274:	3701      	adds	r7, #1
    c276:	e7a5      	b.n	c1c4 <l2cap_recv+0x41c>
			dcid[i++] = 0x0000;
    c278:	ab08      	add	r3, sp, #32
    c27a:	f04f 0200 	mov.w	r2, #0
    c27e:	e7f7      	b.n	c270 <l2cap_recv+0x4c8>
    c280:	4606      	mov	r6, r0
		result = BT_L2CAP_LE_ERR_PSM_NOT_SUPP;
    c282:	f04f 0b02 	mov.w	fp, #2
    c286:	e76c      	b.n	c162 <l2cap_recv+0x3ba>
    c288:	2600      	movs	r6, #0
		result = BT_L2CAP_LE_ERR_AUTHENTICATION;
    c28a:	f04f 0b05 	mov.w	fp, #5
    c28e:	e768      	b.n	c162 <l2cap_recv+0x3ba>
	} else if (ch) {
    c290:	2e00      	cmp	r6, #0
    c292:	d0dd      	beq.n	c250 <l2cap_recv+0x4a8>
		rsp->mps = sys_cpu_to_le16(ch->rx.mps);
    c294:	f8b6 2054 	ldrh.w	r2, [r6, #84]	; 0x54
    c298:	8062      	strh	r2, [r4, #2]
		rsp->mtu = sys_cpu_to_le16(ch->rx.mtu);
    c29a:	f8b6 2052 	ldrh.w	r2, [r6, #82]	; 0x52
    c29e:	8022      	strh	r2, [r4, #0]
		rsp->credits = sys_cpu_to_le16(ch->rx.init_credits);
    c2a0:	f8b6 2056 	ldrh.w	r2, [r6, #86]	; 0x56
    c2a4:	80a2      	strh	r2, [r4, #4]
    c2a6:	e7d3      	b.n	c250 <l2cap_recv+0x4a8>
	if (buf->len < sizeof(*rsp)) {
    c2a8:	2907      	cmp	r1, #7
    c2aa:	d808      	bhi.n	c2be <l2cap_recv+0x516>
    c2ac:	4940      	ldr	r1, [pc, #256]	; (c3b0 <l2cap_recv+0x608>)
    c2ae:	4b41      	ldr	r3, [pc, #260]	; (c3b4 <l2cap_recv+0x60c>)
		BT_ERR("Too small ecred conn rsp packet size");
    c2b0:	4846      	ldr	r0, [pc, #280]	; (c3cc <l2cap_recv+0x624>)
    c2b2:	1ac9      	subs	r1, r1, r3
    c2b4:	08c9      	lsrs	r1, r1, #3
    c2b6:	0189      	lsls	r1, r1, #6
    c2b8:	f041 0101 	orr.w	r1, r1, #1
    c2bc:	e584      	b.n	bdc8 <l2cap_recv+0x20>
	rsp = net_buf_pull_mem(buf, sizeof(*rsp));
    c2be:	2108      	movs	r1, #8
    c2c0:	4648      	mov	r0, r9
		le_ecred_conn_rsp(l2cap, hdr->ident, buf);
    c2c2:	6836      	ldr	r6, [r6, #0]
	rsp = net_buf_pull_mem(buf, sizeof(*rsp));
    c2c4:	f016 f9a1 	bl	2260a <net_buf_simple_pull_mem>
	result = sys_le16_to_cpu(rsp->result);
    c2c8:	88c7      	ldrh	r7, [r0, #6]
	switch (result) {
    c2ca:	b2a4      	uxth	r4, r4
    c2cc:	2f0a      	cmp	r7, #10
    c2ce:	f200 8081 	bhi.w	c3d4 <l2cap_recv+0x62c>
    c2d2:	e8df f007 	tbb	[pc, r7]
    c2d6:	7f06      	.short	0x7f06
    c2d8:	39067f7f 	.word	0x39067f7f
    c2dc:	06397f7f 	.word	0x06397f7f
    c2e0:	06          	.byte	0x06
    c2e1:	00          	.byte	0x00
	mtu = sys_le16_to_cpu(rsp->mtu);
    c2e2:	8807      	ldrh	r7, [r0, #0]
	mps = sys_le16_to_cpu(rsp->mps);
    c2e4:	f8b0 8002 	ldrh.w	r8, [r0, #2]
	credits = sys_le16_to_cpu(rsp->credits);
    c2e8:	f8b0 a004 	ldrh.w	sl, [r0, #4]
	chan->state = state;
    c2ec:	f04f 0b03 	mov.w	fp, #3
		while ((chan = l2cap_lookup_ident(conn, ident))) {
    c2f0:	2200      	movs	r2, #0
    c2f2:	4621      	mov	r1, r4
    c2f4:	4630      	mov	r0, r6
    c2f6:	f014 f9c3 	bl	20680 <__l2cap_lookup_ident>
    c2fa:	4605      	mov	r5, r0
    c2fc:	2800      	cmp	r0, #0
    c2fe:	f43f ad7b 	beq.w	bdf8 <l2cap_recv+0x50>
			k_delayed_work_cancel(&chan->chan.rtx_work);
    c302:	f105 0010 	add.w	r0, r5, #16
    c306:	f016 fefb 	bl	23100 <k_delayed_work_cancel>
			dcid = net_buf_pull_le16(buf);
    c30a:	4648      	mov	r0, r9
    c30c:	f016 f98d 	bl	2262a <net_buf_simple_pull_le16>
			if (!dcid) {
    c310:	4601      	mov	r1, r0
    c312:	bb10      	cbnz	r0, c35a <l2cap_recv+0x5b2>
				bt_l2cap_chan_remove(conn, &chan->chan);
    c314:	4630      	mov	r0, r6
    c316:	4629      	mov	r1, r5
    c318:	f014 fae3 	bl	208e2 <bt_l2cap_chan_remove>
				bt_l2cap_chan_del(&chan->chan);
    c31c:	4628      	mov	r0, r5
    c31e:	f014 faf9 	bl	20914 <bt_l2cap_chan_del>
				continue;
    c322:	e7e5      	b.n	c2f0 <l2cap_recv+0x548>
			k_delayed_work_cancel(&chan->chan.rtx_work);
    c324:	f105 0010 	add.w	r0, r5, #16
    c328:	f016 feea 	bl	23100 <k_delayed_work_cancel>
			if (!l2cap_change_security(chan, result)) {
    c32c:	4639      	mov	r1, r7
    c32e:	4628      	mov	r0, r5
    c330:	f014 fa78 	bl	20824 <l2cap_change_security>
    c334:	2800      	cmp	r0, #0
    c336:	f43f ad5f 	beq.w	bdf8 <l2cap_recv+0x50>
			bt_l2cap_chan_remove(conn, &chan->chan);
    c33a:	4630      	mov	r0, r6
    c33c:	4629      	mov	r1, r5
    c33e:	f014 fad0 	bl	208e2 <bt_l2cap_chan_remove>
			bt_l2cap_chan_del(&chan->chan);
    c342:	4628      	mov	r0, r5
    c344:	f014 fae6 	bl	20914 <bt_l2cap_chan_del>
		while ((chan = l2cap_lookup_ident(conn, ident))) {
    c348:	2200      	movs	r2, #0
    c34a:	4621      	mov	r1, r4
    c34c:	4630      	mov	r0, r6
    c34e:	f014 f997 	bl	20680 <__l2cap_lookup_ident>
    c352:	4605      	mov	r5, r0
    c354:	2800      	cmp	r0, #0
    c356:	d1e5      	bne.n	c324 <l2cap_recv+0x57c>
    c358:	e54e      	b.n	bdf8 <l2cap_recv+0x50>
			c = bt_l2cap_le_lookup_tx_cid(conn, dcid);
    c35a:	4630      	mov	r0, r6
    c35c:	f014 fc69 	bl	20c32 <bt_l2cap_le_lookup_tx_cid>
			if (c) {
    c360:	b160      	cbz	r0, c37c <l2cap_recv+0x5d4>
    c362:	9004      	str	r0, [sp, #16]
				bt_l2cap_chan_remove(conn, &chan->chan);
    c364:	4629      	mov	r1, r5
    c366:	4630      	mov	r0, r6
    c368:	f014 fabb 	bl	208e2 <bt_l2cap_chan_remove>
				bt_l2cap_chan_del(&chan->chan);
    c36c:	4628      	mov	r0, r5
    c36e:	f014 fad1 	bl	20914 <bt_l2cap_chan_del>
				bt_l2cap_chan_disconnect(c);
    c372:	9b04      	ldr	r3, [sp, #16]
    c374:	4618      	mov	r0, r3
    c376:	f014 fc9e 	bl	20cb6 <bt_l2cap_chan_disconnect>
				continue;
    c37a:	e7b9      	b.n	c2f0 <l2cap_recv+0x548>
			if (chan->chan.ops->connected) {
    c37c:	686b      	ldr	r3, [r5, #4]
			chan->chan.ident = 0U;
    c37e:	f885 0048 	strb.w	r0, [r5, #72]	; 0x48
	chan->state = state;
    c382:	f885 b044 	strb.w	fp, [r5, #68]	; 0x44
			if (chan->chan.ops->connected) {
    c386:	681b      	ldr	r3, [r3, #0]
			chan->tx.cid = dcid;
    c388:	f8a5 105c 	strh.w	r1, [r5, #92]	; 0x5c
			chan->tx.mtu = mtu;
    c38c:	f8a5 705e 	strh.w	r7, [r5, #94]	; 0x5e
			chan->tx.mps = mps;
    c390:	f8a5 8060 	strh.w	r8, [r5, #96]	; 0x60
			if (chan->chan.ops->connected) {
    c394:	b10b      	cbz	r3, c39a <l2cap_recv+0x5f2>
				chan->chan.ops->connected(&chan->chan);
    c396:	4628      	mov	r0, r5
    c398:	4798      	blx	r3
			l2cap_chan_tx_give_credits(chan, credits);
    c39a:	4651      	mov	r1, sl
    c39c:	4628      	mov	r0, r5
    c39e:	f014 fa24 	bl	207ea <l2cap_chan_tx_give_credits>
	atomic_add(&chan->rx.credits, credits);
    c3a2:	f8b5 1056 	ldrh.w	r1, [r5, #86]	; 0x56
    c3a6:	f105 0058 	add.w	r0, r5, #88	; 0x58
    c3aa:	f014 f9b7 	bl	2071c <atomic_add>
}
    c3ae:	e79f      	b.n	c2f0 <l2cap_recv+0x548>
    c3b0:	000237c0 	.word	0x000237c0
    c3b4:	000236e8 	.word	0x000236e8
    c3b8:	00026601 	.word	0x00026601
    c3bc:	00026622 	.word	0x00026622
    c3c0:	0002664e 	.word	0x0002664e
    c3c4:	0002655c 	.word	0x0002655c
    c3c8:	0002665f 	.word	0x0002665f
    c3cc:	0002667d 	.word	0x0002667d
			bt_l2cap_chan_del(&chan->chan);
    c3d0:	f014 faa0 	bl	20914 <bt_l2cap_chan_del>
		while ((chan = l2cap_remove_ident(conn, ident))) {
    c3d4:	2201      	movs	r2, #1
    c3d6:	4621      	mov	r1, r4
    c3d8:	4630      	mov	r0, r6
    c3da:	f014 f951 	bl	20680 <__l2cap_lookup_ident>
    c3de:	2800      	cmp	r0, #0
    c3e0:	d1f6      	bne.n	c3d0 <l2cap_recv+0x628>
    c3e2:	e509      	b.n	bdf8 <l2cap_recv+0x50>
	if (buf->len < sizeof(*req)) {
    c3e4:	2903      	cmp	r1, #3
    c3e6:	d808      	bhi.n	c3fa <l2cap_recv+0x652>
    c3e8:	4957      	ldr	r1, [pc, #348]	; (c548 <l2cap_recv+0x7a0>)
    c3ea:	4b58      	ldr	r3, [pc, #352]	; (c54c <l2cap_recv+0x7a4>)
		BT_ERR("Too small ecred reconf req packet size");
    c3ec:	4858      	ldr	r0, [pc, #352]	; (c550 <l2cap_recv+0x7a8>)
    c3ee:	1ac9      	subs	r1, r1, r3
    c3f0:	08c9      	lsrs	r1, r1, #3
    c3f2:	0189      	lsls	r1, r1, #6
    c3f4:	f041 0101 	orr.w	r1, r1, #1
    c3f8:	e4e6      	b.n	bdc8 <l2cap_recv+0x20>
	req = net_buf_pull_mem(buf, sizeof(*req));
    c3fa:	2104      	movs	r1, #4
    c3fc:	4648      	mov	r0, r9
		le_ecred_reconf_req(l2cap, hdr->ident, buf);
    c3fe:	6836      	ldr	r6, [r6, #0]
	req = net_buf_pull_mem(buf, sizeof(*req));
    c400:	f016 f903 	bl	2260a <net_buf_simple_pull_mem>
	mtu = sys_le16_to_cpu(req->mtu);
    c404:	f8b0 8000 	ldrh.w	r8, [r0]
	if (mtu < L2CAP_ECRED_MIN_MTU) {
    c408:	f1b8 0f3f 	cmp.w	r8, #63	; 0x3f
    c40c:	d904      	bls.n	c418 <l2cap_recv+0x670>
	mps = sys_le16_to_cpu(req->mps);
    c40e:	f8b0 a002 	ldrh.w	sl, [r0, #2]
	if (mps < L2CAP_ECRED_MIN_MTU) {
    c412:	f1ba 0f3f 	cmp.w	sl, #63	; 0x3f
    c416:	d825      	bhi.n	c464 <l2cap_recv+0x6bc>
		result = BT_L2CAP_RECONF_INVALID_MTU;
    c418:	2501      	movs	r5, #1
    c41a:	e027      	b.n	c46c <l2cap_recv+0x6c4>
		scid = net_buf_pull_le16(buf);
    c41c:	4648      	mov	r0, r9
    c41e:	f016 f904 	bl	2262a <net_buf_simple_pull_le16>
		if (!scid) {
    c422:	4601      	mov	r1, r0
    c424:	b1f0      	cbz	r0, c464 <l2cap_recv+0x6bc>
		chan = bt_l2cap_le_lookup_tx_cid(conn, scid);
    c426:	4630      	mov	r0, r6
    c428:	f014 fc03 	bl	20c32 <bt_l2cap_le_lookup_tx_cid>
		if (!chan) {
    c42c:	4607      	mov	r7, r0
    c42e:	b1c8      	cbz	r0, c464 <l2cap_recv+0x6bc>
		if (BT_L2CAP_LE_CHAN(chan)->tx.mtu > mtu) {
    c430:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
    c434:	4590      	cmp	r8, r2
    c436:	d211      	bcs.n	c45c <l2cap_recv+0x6b4>
    c438:	4b44      	ldr	r3, [pc, #272]	; (c54c <l2cap_recv+0x7a4>)
    c43a:	4d43      	ldr	r5, [pc, #268]	; (c548 <l2cap_recv+0x7a0>)
    c43c:	1aed      	subs	r5, r5, r3
    c43e:	08ed      	lsrs	r5, r5, #3
			BT_ERR("chan %p decreased MTU %u -> %u", chan,
    c440:	01ad      	lsls	r5, r5, #6
    c442:	f045 0501 	orr.w	r5, r5, #1
    c446:	4601      	mov	r1, r0
    c448:	f8ad 5000 	strh.w	r5, [sp]
    c44c:	4841      	ldr	r0, [pc, #260]	; (c554 <l2cap_recv+0x7ac>)
    c44e:	4643      	mov	r3, r8
    c450:	f012 f875 	bl	1e53e <log_3>
			bt_l2cap_chan_disconnect(chan);
    c454:	4638      	mov	r0, r7
    c456:	f014 fc2e 	bl	20cb6 <bt_l2cap_chan_disconnect>
			goto response;
    c45a:	e7dd      	b.n	c418 <l2cap_recv+0x670>
		BT_L2CAP_LE_CHAN(chan)->tx.mtu = mtu;
    c45c:	f8a0 805e 	strh.w	r8, [r0, #94]	; 0x5e
		BT_L2CAP_LE_CHAN(chan)->tx.mps = mps;
    c460:	f8a0 a060 	strh.w	sl, [r0, #96]	; 0x60
	while (buf->len >= sizeof(scid)) {
    c464:	89ab      	ldrh	r3, [r5, #12]
    c466:	2b01      	cmp	r3, #1
    c468:	d8d8      	bhi.n	c41c <l2cap_recv+0x674>
	result = BT_L2CAP_RECONF_SUCCESS;
    c46a:	2500      	movs	r5, #0
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_ECRED_RECONF_RSP, ident,
    c46c:	4621      	mov	r1, r4
    c46e:	2202      	movs	r2, #2
    c470:	201a      	movs	r0, #26
    c472:	f7fe fff5 	bl	b460 <l2cap_create_le_sig_pdu.isra.0>
	rsp = net_buf_add(buf, sizeof(*rsp));
    c476:	2102      	movs	r1, #2
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_ECRED_RECONF_RSP, ident,
    c478:	4604      	mov	r4, r0
	rsp = net_buf_add(buf, sizeof(*rsp));
    c47a:	3008      	adds	r0, #8
    c47c:	f016 f888 	bl	22590 <net_buf_simple_add>
	bt_l2cap_send(conn, BT_L2CAP_CID_LE_SIG, buf);
    c480:	4621      	mov	r1, r4
	rsp->result = sys_cpu_to_le16(result);
    c482:	8005      	strh	r5, [r0, #0]
	bt_l2cap_send(conn, BT_L2CAP_CID_LE_SIG, buf);
    c484:	e530      	b.n	bee8 <l2cap_recv+0x140>
	if (buf->len < sizeof(*req)) {
    c486:	2907      	cmp	r1, #7
    c488:	d808      	bhi.n	c49c <l2cap_recv+0x6f4>
    c48a:	492f      	ldr	r1, [pc, #188]	; (c548 <l2cap_recv+0x7a0>)
    c48c:	4b2f      	ldr	r3, [pc, #188]	; (c54c <l2cap_recv+0x7a4>)
		BT_ERR("Too small LE conn update param req");
    c48e:	4832      	ldr	r0, [pc, #200]	; (c558 <l2cap_recv+0x7b0>)
    c490:	1ac9      	subs	r1, r1, r3
    c492:	08c9      	lsrs	r1, r1, #3
    c494:	0189      	lsls	r1, r1, #6
    c496:	f041 0101 	orr.w	r1, r1, #1
    c49a:	e495      	b.n	bdc8 <l2cap_recv+0x20>
			le_conn_param_update_req(l2cap, hdr->ident, buf);
    c49c:	6836      	ldr	r6, [r6, #0]
	if (conn->role != BT_HCI_ROLE_MASTER) {
    c49e:	78f3      	ldrb	r3, [r6, #3]
    c4a0:	b12b      	cbz	r3, c4ae <l2cap_recv+0x706>
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_NOT_UNDERSTOOD,
    c4a2:	2300      	movs	r3, #0
    c4a4:	9300      	str	r3, [sp, #0]
    c4a6:	461a      	mov	r2, r3
    c4a8:	4621      	mov	r1, r4
    c4aa:	4630      	mov	r0, r6
    c4ac:	e5c3      	b.n	c036 <l2cap_recv+0x28e>
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
    c4ae:	68ab      	ldr	r3, [r5, #8]
	param.interval_min = sys_le16_to_cpu(req->min_interval);
    c4b0:	7859      	ldrb	r1, [r3, #1]
    c4b2:	781a      	ldrb	r2, [r3, #0]
    c4b4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    c4b8:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
	param.interval_max = sys_le16_to_cpu(req->max_interval);
    c4bc:	78d9      	ldrb	r1, [r3, #3]
    c4be:	789a      	ldrb	r2, [r3, #2]
    c4c0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    c4c4:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
	param.latency = sys_le16_to_cpu(req->latency);
    c4c8:	7959      	ldrb	r1, [r3, #5]
    c4ca:	791a      	ldrb	r2, [r3, #4]
    c4cc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    c4d0:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
	param.timeout = sys_le16_to_cpu(req->timeout);
    c4d4:	799a      	ldrb	r2, [r3, #6]
    c4d6:	79db      	ldrb	r3, [r3, #7]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    c4d8:	4621      	mov	r1, r4
	param.timeout = sys_le16_to_cpu(req->timeout);
    c4da:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    c4de:	2013      	movs	r0, #19
    c4e0:	2202      	movs	r2, #2
	param.timeout = sys_le16_to_cpu(req->timeout);
    c4e2:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    c4e6:	f7fe ffbb 	bl	b460 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
    c4ea:	4604      	mov	r4, r0
    c4ec:	2800      	cmp	r0, #0
    c4ee:	f43f ac83 	beq.w	bdf8 <l2cap_recv+0x50>
	accepted = le_param_req(conn, &param);
    c4f2:	a90b      	add	r1, sp, #44	; 0x2c
    c4f4:	4630      	mov	r0, r6
    c4f6:	f7fe f8f1 	bl	a6dc <le_param_req>
	rsp = net_buf_add(buf, sizeof(*rsp));
    c4fa:	2102      	movs	r1, #2
	accepted = le_param_req(conn, &param);
    c4fc:	4605      	mov	r5, r0
	rsp = net_buf_add(buf, sizeof(*rsp));
    c4fe:	f104 0008 	add.w	r0, r4, #8
    c502:	f016 f845 	bl	22590 <net_buf_simple_add>
	if (accepted) {
    c506:	f085 0301 	eor.w	r3, r5, #1
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
    c50a:	b2db      	uxtb	r3, r3
    c50c:	8003      	strh	r3, [r0, #0]
	bt_l2cap_send(conn, BT_L2CAP_CID_LE_SIG, buf);
    c50e:	4621      	mov	r1, r4
    c510:	4630      	mov	r0, r6
    c512:	f014 faae 	bl	20a72 <bt_l2cap_send.constprop.0>
	if (accepted) {
    c516:	2d00      	cmp	r5, #0
    c518:	f43f ac6e 	beq.w	bdf8 <l2cap_recv+0x50>
		bt_conn_le_conn_update(conn, &param);
    c51c:	a90b      	add	r1, sp, #44	; 0x2c
    c51e:	4630      	mov	r0, r6
    c520:	f014 f86e 	bl	20600 <bt_conn_le_conn_update>
    c524:	e468      	b.n	bdf8 <l2cap_recv+0x50>
    c526:	4909      	ldr	r1, [pc, #36]	; (c54c <l2cap_recv+0x7a4>)
    c528:	4a07      	ldr	r2, [pc, #28]	; (c548 <l2cap_recv+0x7a0>)
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
    c52a:	480c      	ldr	r0, [pc, #48]	; (c55c <l2cap_recv+0x7b4>)
    c52c:	1a52      	subs	r2, r2, r1
    c52e:	08d2      	lsrs	r2, r2, #3
    c530:	0192      	lsls	r2, r2, #6
    c532:	4619      	mov	r1, r3
    c534:	f042 0202 	orr.w	r2, r2, #2
    c538:	f011 ffd4 	bl	1e4e4 <log_1>
		l2cap_send_reject(chan->conn, hdr->ident,
    c53c:	2300      	movs	r3, #0
    c53e:	7879      	ldrb	r1, [r7, #1]
    c540:	9300      	str	r3, [sp, #0]
    c542:	6830      	ldr	r0, [r6, #0]
    c544:	461a      	mov	r2, r3
    c546:	e576      	b.n	c036 <l2cap_recv+0x28e>
    c548:	000237c0 	.word	0x000237c0
    c54c:	000236e8 	.word	0x000236e8
    c550:	000266a2 	.word	0x000266a2
    c554:	000266c9 	.word	0x000266c9
    c558:	000266e8 	.word	0x000266e8
    c55c:	0002670b 	.word	0x0002670b

0000c560 <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
    c560:	4b02      	ldr	r3, [pc, #8]	; (c56c <att_cfm_sent+0xc>)
    c562:	f8c1 3128 	str.w	r3, [r1, #296]	; 0x128

	att_sent(conn, user_data);
    c566:	f014 bc13 	b.w	20d90 <att_sent>
    c56a:	bf00      	nop
    c56c:	0002102f 	.word	0x0002102f

0000c570 <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
    c570:	4b02      	ldr	r3, [pc, #8]	; (c57c <att_rsp_sent+0xc>)
    c572:	f8c1 3128 	str.w	r3, [r1, #296]	; 0x128

	att_sent(conn, user_data);
    c576:	f014 bc0b 	b.w	20d90 <att_sent>
    c57a:	bf00      	nop
    c57c:	0002104b 	.word	0x0002104b

0000c580 <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
    c580:	4b02      	ldr	r3, [pc, #8]	; (c58c <att_req_sent+0xc>)
    c582:	f8c1 3128 	str.w	r3, [r1, #296]	; 0x128

	att_sent(conn, user_data);
    c586:	f014 bc03 	b.w	20d90 <att_sent>
    c58a:	bf00      	nop
    c58c:	0000c8d9 	.word	0x0000c8d9

0000c590 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
    c590:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
    c592:	3808      	subs	r0, #8
    c594:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
    c596:	a901      	add	r1, sp, #4
    c598:	4802      	ldr	r0, [pc, #8]	; (c5a4 <bt_att_released+0x14>)
    c59a:	f010 fc67 	bl	1ce6c <k_mem_slab_free>
}
    c59e:	b003      	add	sp, #12
    c5a0:	f85d fb04 	ldr.w	pc, [sp], #4
    c5a4:	200007d4 	.word	0x200007d4

0000c5a8 <read_group_cb>:
{
    c5a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    c5aa:	b085      	sub	sp, #20
	struct bt_att_chan *chan = data->chan;
    c5ac:	680e      	ldr	r6, [r1, #0]
{
    c5ae:	4605      	mov	r5, r0
    c5b0:	460c      	mov	r4, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    c5b2:	2700      	movs	r7, #0
    c5b4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    c5b8:	6800      	ldr	r0, [r0, #0]
    c5ba:	f88d 7008 	strb.w	r7, [sp, #8]
    c5be:	a902      	add	r1, sp, #8
    c5c0:	f8ad 300a 	strh.w	r3, [sp, #10]
    c5c4:	f013 fd22 	bl	2000c <bt_uuid_cmp>
    c5c8:	b1a0      	cbz	r0, c5f4 <read_group_cb+0x4c>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    c5ca:	f642 0301 	movw	r3, #10241	; 0x2801
    c5ce:	6828      	ldr	r0, [r5, #0]
    c5d0:	f88d 700c 	strb.w	r7, [sp, #12]
    c5d4:	a903      	add	r1, sp, #12
    c5d6:	f8ad 300e 	strh.w	r3, [sp, #14]
    c5da:	f013 fd17 	bl	2000c <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    c5de:	b148      	cbz	r0, c5f4 <read_group_cb+0x4c>
		if (data->group &&
    c5e0:	6923      	ldr	r3, [r4, #16]
    c5e2:	b123      	cbz	r3, c5ee <read_group_cb+0x46>
		    attr->handle > sys_le16_to_cpu(data->group->end_handle)) {
    c5e4:	8a2a      	ldrh	r2, [r5, #16]
		if (data->group &&
    c5e6:	8859      	ldrh	r1, [r3, #2]
    c5e8:	4291      	cmp	r1, r2
    c5ea:	d200      	bcs.n	c5ee <read_group_cb+0x46>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    c5ec:	805a      	strh	r2, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    c5ee:	2001      	movs	r0, #1
}
    c5f0:	b005      	add	sp, #20
    c5f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    c5f4:	6861      	ldr	r1, [r4, #4]
    c5f6:	6828      	ldr	r0, [r5, #0]
    c5f8:	f013 fd08 	bl	2000c <bt_uuid_cmp>
    c5fc:	b110      	cbz	r0, c604 <read_group_cb+0x5c>
		data->group = NULL;
    c5fe:	2300      	movs	r3, #0
    c600:	6123      	str	r3, [r4, #16]
    c602:	e7f4      	b.n	c5ee <read_group_cb+0x46>
	if (data->rsp->len &&
    c604:	68e3      	ldr	r3, [r4, #12]
    c606:	68a0      	ldr	r0, [r4, #8]
    c608:	781a      	ldrb	r2, [r3, #0]
    c60a:	b13a      	cbz	r2, c61c <read_group_cb+0x74>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
    c60c:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
    c610:	8981      	ldrh	r1, [r0, #12]
    c612:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
    c614:	4293      	cmp	r3, r2
    c616:	da01      	bge.n	c61c <read_group_cb+0x74>
		return BT_GATT_ITER_STOP;
    c618:	2000      	movs	r0, #0
    c61a:	e7e9      	b.n	c5f0 <read_group_cb+0x48>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    c61c:	2104      	movs	r1, #4
    c61e:	3008      	adds	r0, #8
    c620:	f015 ffb6 	bl	22590 <net_buf_simple_add>
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    c624:	8a2b      	ldrh	r3, [r5, #16]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    c626:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    c628:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    c62a:	8043      	strh	r3, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    c62c:	4b07      	ldr	r3, [pc, #28]	; (c64c <read_group_cb+0xa4>)
    c62e:	9300      	str	r3, [sp, #0]
    c630:	68a2      	ldr	r2, [r4, #8]
    c632:	9401      	str	r4, [sp, #4]
    c634:	2300      	movs	r3, #0
    c636:	4629      	mov	r1, r5
    c638:	4630      	mov	r0, r6
    c63a:	f014 fc5d 	bl	20ef8 <att_chan_read>
	if (read < 0) {
    c63e:	2800      	cmp	r0, #0
    c640:	dbea      	blt.n	c618 <read_group_cb+0x70>
	if (!data->group) {
    c642:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
    c644:	3800      	subs	r0, #0
    c646:	bf18      	it	ne
    c648:	2001      	movne	r0, #1
    c64a:	e7d1      	b.n	c5f0 <read_group_cb+0x48>
    c64c:	0002100f 	.word	0x0002100f

0000c650 <read_type_cb>:
{
    c650:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
    c654:	f8d1 8000 	ldr.w	r8, [r1]
{
    c658:	4606      	mov	r6, r0
    c65a:	460c      	mov	r4, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    c65c:	6800      	ldr	r0, [r0, #0]
    c65e:	6849      	ldr	r1, [r1, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
    c660:	f8d8 5008 	ldr.w	r5, [r8, #8]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    c664:	f013 fcd2 	bl	2000c <bt_uuid_cmp>
    c668:	4607      	mov	r7, r0
    c66a:	2800      	cmp	r0, #0
    c66c:	d13e      	bne.n	c6ec <read_type_cb+0x9c>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    c66e:	4628      	mov	r0, r5
    c670:	2215      	movs	r2, #21
    c672:	4631      	mov	r1, r6
    c674:	f015 f9de 	bl	21a34 <bt_gatt_check_perm>
    c678:	4605      	mov	r5, r0
    c67a:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    c67c:	b148      	cbz	r0, c692 <read_type_cb+0x42>
		if (data->rsp->len) {
    c67e:	68e3      	ldr	r3, [r4, #12]
    c680:	781b      	ldrb	r3, [r3, #0]
    c682:	b923      	cbnz	r3, c68e <read_type_cb+0x3e>
		return BT_GATT_ITER_STOP;
    c684:	2500      	movs	r5, #0
}
    c686:	4628      	mov	r0, r5
    c688:	b002      	add	sp, #8
    c68a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			data->err = 0x00;
    c68e:	7527      	strb	r7, [r4, #20]
    c690:	e7f8      	b.n	c684 <read_type_cb+0x34>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    c692:	68a0      	ldr	r0, [r4, #8]
    c694:	f015 ff4e 	bl	22534 <net_buf_frag_last>
    c698:	2102      	movs	r1, #2
    c69a:	3008      	adds	r0, #8
    c69c:	f015 ff78 	bl	22590 <net_buf_simple_add>
	data->item->handle = sys_cpu_to_le16(attr->handle);
    c6a0:	8a33      	ldrh	r3, [r6, #16]
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    c6a2:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(attr->handle);
    c6a4:	8003      	strh	r3, [r0, #0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    c6a6:	4b12      	ldr	r3, [pc, #72]	; (c6f0 <read_type_cb+0xa0>)
    c6a8:	9300      	str	r3, [sp, #0]
    c6aa:	68a2      	ldr	r2, [r4, #8]
    c6ac:	9401      	str	r4, [sp, #4]
    c6ae:	462b      	mov	r3, r5
    c6b0:	4631      	mov	r1, r6
    c6b2:	4640      	mov	r0, r8
    c6b4:	f014 fc20 	bl	20ef8 <att_chan_read>
	if (read < 0) {
    c6b8:	2800      	cmp	r0, #0
    c6ba:	da07      	bge.n	c6cc <read_type_cb+0x7c>
	if (err < 0 && err >= -0xff) {
    c6bc:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
    c6c0:	bf26      	itte	cs
    c6c2:	4240      	negcs	r0, r0
    c6c4:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
    c6c6:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
    c6c8:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
    c6ca:	e7dc      	b.n	c686 <read_type_cb+0x36>
	if (!data->item) {
    c6cc:	6923      	ldr	r3, [r4, #16]
    c6ce:	2b00      	cmp	r3, #0
    c6d0:	d0d8      	beq.n	c684 <read_type_cb+0x34>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    c6d2:	68a0      	ldr	r0, [r4, #8]
    c6d4:	f014 fb54 	bl	20d80 <net_buf_frags_len>
    c6d8:	f8b8 5066 	ldrh.w	r5, [r8, #102]	; 0x66
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    c6dc:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    c6de:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    c6e0:	7818      	ldrb	r0, [r3, #0]
    c6e2:	4285      	cmp	r5, r0
    c6e4:	bf94      	ite	ls
    c6e6:	2500      	movls	r5, #0
    c6e8:	2501      	movhi	r5, #1
    c6ea:	e7cc      	b.n	c686 <read_type_cb+0x36>
		return BT_GATT_ITER_CONTINUE;
    c6ec:	2501      	movs	r5, #1
    c6ee:	e7ca      	b.n	c686 <read_type_cb+0x36>
    c6f0:	00020d9d 	.word	0x00020d9d

0000c6f4 <find_type_cb>:
{
    c6f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_att_chan *chan = data->chan;
    c6f8:	680f      	ldr	r7, [r1, #0]
{
    c6fa:	b090      	sub	sp, #64	; 0x40
    c6fc:	4606      	mov	r6, r0
    c6fe:	460d      	mov	r5, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    c700:	2400      	movs	r4, #0
    c702:	f642 0301 	movw	r3, #10241	; 0x2801
    c706:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
    c708:	f8d7 8008 	ldr.w	r8, [r7, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    c70c:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
    c710:	a90b      	add	r1, sp, #44	; 0x2c
    c712:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    c716:	f013 fc79 	bl	2000c <bt_uuid_cmp>
    c71a:	2800      	cmp	r0, #0
    c71c:	d06a      	beq.n	c7f4 <find_type_cb+0x100>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
    c71e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    c722:	6830      	ldr	r0, [r6, #0]
    c724:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
    c728:	a90b      	add	r1, sp, #44	; 0x2c
    c72a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    c72e:	f013 fc6d 	bl	2000c <bt_uuid_cmp>
    c732:	4604      	mov	r4, r0
    c734:	b150      	cbz	r0, c74c <find_type_cb+0x58>
		if (data->group &&
    c736:	68ab      	ldr	r3, [r5, #8]
    c738:	b123      	cbz	r3, c744 <find_type_cb+0x50>
		    attr->handle > sys_le16_to_cpu(data->group->end_handle)) {
    c73a:	8a32      	ldrh	r2, [r6, #16]
		if (data->group &&
    c73c:	8859      	ldrh	r1, [r3, #2]
    c73e:	4291      	cmp	r1, r2
    c740:	d200      	bcs.n	c744 <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    c742:	805a      	strh	r2, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
    c744:	2001      	movs	r0, #1
}
    c746:	b010      	add	sp, #64	; 0x40
    c748:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
    c74c:	6869      	ldr	r1, [r5, #4]
    c74e:	4608      	mov	r0, r1
    c750:	f014 fb16 	bl	20d80 <net_buf_frags_len>
    c754:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
    c758:	1a1b      	subs	r3, r3, r0
    c75a:	2b03      	cmp	r3, #3
    c75c:	d922      	bls.n	c7a4 <find_type_cb+0xb0>
	frag = net_buf_frag_last(data->buf);
    c75e:	4608      	mov	r0, r1
    c760:	f015 fee8 	bl	22534 <net_buf_frag_last>
    c764:	4604      	mov	r4, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
    c766:	6868      	ldr	r0, [r5, #4]
    c768:	f014 fb0a 	bl	20d80 <net_buf_frags_len>
    c76c:	f8b7 9066 	ldrh.w	r9, [r7, #102]	; 0x66
    c770:	f104 0a08 	add.w	sl, r4, #8
    c774:	eba9 0900 	sub.w	r9, r9, r0
    c778:	4650      	mov	r0, sl
    c77a:	f015 ff62 	bl	22642 <net_buf_simple_tailroom>
    c77e:	4581      	cmp	r9, r0
    c780:	d212      	bcs.n	c7a8 <find_type_cb+0xb4>
    c782:	6868      	ldr	r0, [r5, #4]
    c784:	f014 fafc 	bl	20d80 <net_buf_frags_len>
    c788:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
    c78c:	1a18      	subs	r0, r3, r0
	if (!len) {
    c78e:	b998      	cbnz	r0, c7b8 <find_type_cb+0xc4>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
    c790:	686b      	ldr	r3, [r5, #4]
    c792:	7998      	ldrb	r0, [r3, #6]
    c794:	f00f f8e4 	bl	1b960 <net_buf_pool_get>
    c798:	2200      	movs	r2, #0
    c79a:	2300      	movs	r3, #0
    c79c:	f015 fe90 	bl	224c0 <net_buf_alloc_fixed>
		if (!frag) {
    c7a0:	4604      	mov	r4, r0
    c7a2:	b928      	cbnz	r0, c7b0 <find_type_cb+0xbc>
		return BT_GATT_ITER_STOP;
    c7a4:	4620      	mov	r0, r4
    c7a6:	e7ce      	b.n	c746 <find_type_cb+0x52>
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
    c7a8:	4650      	mov	r0, sl
    c7aa:	f015 ff4a 	bl	22642 <net_buf_simple_tailroom>
    c7ae:	e7ee      	b.n	c78e <find_type_cb+0x9a>
		net_buf_frag_add(data->buf, frag);
    c7b0:	4601      	mov	r1, r0
    c7b2:	6868      	ldr	r0, [r5, #4]
    c7b4:	f015 fecf 	bl	22556 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
    c7b8:	2300      	movs	r3, #0
    c7ba:	6877      	ldr	r7, [r6, #4]
    c7bc:	9300      	str	r3, [sp, #0]
    c7be:	aa02      	add	r2, sp, #8
    c7c0:	2310      	movs	r3, #16
    c7c2:	4631      	mov	r1, r6
    c7c4:	4640      	mov	r0, r8
    c7c6:	47b8      	blx	r7
	if (read < 0) {
    c7c8:	1e07      	subs	r7, r0, #0
    c7ca:	db13      	blt.n	c7f4 <find_type_cb+0x100>
	if (read != data->value_len) {
    c7cc:	7c2a      	ldrb	r2, [r5, #16]
    c7ce:	68e8      	ldr	r0, [r5, #12]
    c7d0:	42ba      	cmp	r2, r7
    c7d2:	d034      	beq.n	c83e <find_type_cb+0x14a>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
    c7d4:	4601      	mov	r1, r0
    c7d6:	a80b      	add	r0, sp, #44	; 0x2c
    c7d8:	f013 fc42 	bl	20060 <bt_uuid_create>
    c7dc:	b968      	cbnz	r0, c7fa <find_type_cb+0x106>
    c7de:	4a1a      	ldr	r2, [pc, #104]	; (c848 <find_type_cb+0x154>)
    c7e0:	4b1a      	ldr	r3, [pc, #104]	; (c84c <find_type_cb+0x158>)
			BT_WARN("Unable to create UUID: size %u", data->value_len);
    c7e2:	7c29      	ldrb	r1, [r5, #16]
    c7e4:	481a      	ldr	r0, [pc, #104]	; (c850 <find_type_cb+0x15c>)
    c7e6:	1ad2      	subs	r2, r2, r3
    c7e8:	08d2      	lsrs	r2, r2, #3
    c7ea:	0192      	lsls	r2, r2, #6
    c7ec:	f042 0202 	orr.w	r2, r2, #2
			BT_WARN("Unable to create UUID: size %d", read);
    c7f0:	f011 fe78 	bl	1e4e4 <log_1>
	data->group = NULL;
    c7f4:	2300      	movs	r3, #0
    c7f6:	60ab      	str	r3, [r5, #8]
    c7f8:	e7a4      	b.n	c744 <find_type_cb+0x50>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
    c7fa:	b2fa      	uxtb	r2, r7
    c7fc:	a902      	add	r1, sp, #8
    c7fe:	a806      	add	r0, sp, #24
    c800:	f013 fc2e 	bl	20060 <bt_uuid_create>
    c804:	b948      	cbnz	r0, c81a <find_type_cb+0x126>
    c806:	4a10      	ldr	r2, [pc, #64]	; (c848 <find_type_cb+0x154>)
    c808:	4b10      	ldr	r3, [pc, #64]	; (c84c <find_type_cb+0x158>)
			BT_WARN("Unable to create UUID: size %d", read);
    c80a:	4812      	ldr	r0, [pc, #72]	; (c854 <find_type_cb+0x160>)
    c80c:	1ad2      	subs	r2, r2, r3
    c80e:	08d2      	lsrs	r2, r2, #3
    c810:	0192      	lsls	r2, r2, #6
    c812:	f042 0202 	orr.w	r2, r2, #2
    c816:	4639      	mov	r1, r7
    c818:	e7ea      	b.n	c7f0 <find_type_cb+0xfc>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
    c81a:	a906      	add	r1, sp, #24
    c81c:	a80b      	add	r0, sp, #44	; 0x2c
    c81e:	f013 fbf5 	bl	2000c <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
    c822:	2800      	cmp	r0, #0
    c824:	d1e6      	bne.n	c7f4 <find_type_cb+0x100>
	data->err = 0x00;
    c826:	2300      	movs	r3, #0
    c828:	746b      	strb	r3, [r5, #17]
	data->group = net_buf_add(frag, sizeof(*data->group));
    c82a:	2104      	movs	r1, #4
    c82c:	f104 0008 	add.w	r0, r4, #8
    c830:	f015 feae 	bl	22590 <net_buf_simple_add>
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    c834:	8a33      	ldrh	r3, [r6, #16]
	data->group = net_buf_add(frag, sizeof(*data->group));
    c836:	60a8      	str	r0, [r5, #8]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    c838:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    c83a:	8043      	strh	r3, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
    c83c:	e782      	b.n	c744 <find_type_cb+0x50>
	} else if (memcmp(data->value, uuid, read)) {
    c83e:	a902      	add	r1, sp, #8
    c840:	f013 fb05 	bl	1fe4e <memcmp>
    c844:	e7ed      	b.n	c822 <find_type_cb+0x12e>
    c846:	bf00      	nop
    c848:	000236e8 	.word	0x000236e8
    c84c:	000236e8 	.word	0x000236e8
    c850:	00026739 	.word	0x00026739
    c854:	00026758 	.word	0x00026758

0000c858 <att_get>:
{
    c858:	b510      	push	{r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    c85a:	7b43      	ldrb	r3, [r0, #13]
    c85c:	2b06      	cmp	r3, #6
    c85e:	d00b      	beq.n	c878 <att_get+0x20>
    c860:	4918      	ldr	r1, [pc, #96]	; (c8c4 <att_get+0x6c>)
    c862:	4b19      	ldr	r3, [pc, #100]	; (c8c8 <att_get+0x70>)
		BT_WARN("Not connected");
    c864:	4819      	ldr	r0, [pc, #100]	; (c8cc <att_get+0x74>)
    c866:	1ac9      	subs	r1, r1, r3
    c868:	08c9      	lsrs	r1, r1, #3
    c86a:	0189      	lsls	r1, r1, #6
    c86c:	f041 0102 	orr.w	r1, r1, #2
		BT_WARN("ATT channel flagged as disconnected");
    c870:	f011 fe2b 	bl	1e4ca <log_0>
		return NULL;
    c874:	2400      	movs	r4, #0
    c876:	e00e      	b.n	c896 <att_get+0x3e>
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
    c878:	2104      	movs	r1, #4
    c87a:	f014 f9ea 	bl	20c52 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    c87e:	4604      	mov	r4, r0
    c880:	b958      	cbnz	r0, c89a <att_get+0x42>
    c882:	4910      	ldr	r1, [pc, #64]	; (c8c4 <att_get+0x6c>)
    c884:	4b10      	ldr	r3, [pc, #64]	; (c8c8 <att_get+0x70>)
		BT_ERR("Unable to find ATT channel");
    c886:	4812      	ldr	r0, [pc, #72]	; (c8d0 <att_get+0x78>)
    c888:	1ac9      	subs	r1, r1, r3
    c88a:	08c9      	lsrs	r1, r1, #3
    c88c:	0189      	lsls	r1, r1, #6
    c88e:	f041 0101 	orr.w	r1, r1, #1
    c892:	f011 fe1a 	bl	1e4ca <log_0>
}
    c896:	4620      	mov	r0, r4
    c898:	bd10      	pop	{r4, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c89a:	f3bf 8f5b 	dmb	ish
    c89e:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
    c8a2:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
    c8a6:	075b      	lsls	r3, r3, #29
    c8a8:	d508      	bpl.n	c8bc <att_get+0x64>
    c8aa:	4906      	ldr	r1, [pc, #24]	; (c8c4 <att_get+0x6c>)
    c8ac:	4b06      	ldr	r3, [pc, #24]	; (c8c8 <att_get+0x70>)
		BT_WARN("ATT channel flagged as disconnected");
    c8ae:	4809      	ldr	r0, [pc, #36]	; (c8d4 <att_get+0x7c>)
    c8b0:	1ac9      	subs	r1, r1, r3
    c8b2:	08c9      	lsrs	r1, r1, #3
    c8b4:	0189      	lsls	r1, r1, #6
    c8b6:	f041 0102 	orr.w	r1, r1, #2
    c8ba:	e7d9      	b.n	c870 <att_get+0x18>
	return att_chan->att;
    c8bc:	f850 4c08 	ldr.w	r4, [r0, #-8]
    c8c0:	e7e9      	b.n	c896 <att_get+0x3e>
    c8c2:	bf00      	nop
    c8c4:	000236e8 	.word	0x000236e8
    c8c8:	000236e8 	.word	0x000236e8
    c8cc:	00026777 	.word	0x00026777
    c8d0:	00026785 	.word	0x00026785
    c8d4:	000267a0 	.word	0x000267a0

0000c8d8 <chan_req_sent>:
	if (chan->req) {
    c8d8:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
    c8dc:	b13b      	cbz	r3, c8ee <chan_req_sent+0x16>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    c8de:	f100 01e8 	add.w	r1, r0, #232	; 0xe8
    c8e2:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    c8e6:	4802      	ldr	r0, [pc, #8]	; (c8f0 <chan_req_sent+0x18>)
    c8e8:	2300      	movs	r3, #0
    c8ea:	f011 b87f 	b.w	1d9ec <k_delayed_work_submit_to_queue>
}
    c8ee:	4770      	bx	lr
    c8f0:	20001c50 	.word	0x20001c50

0000c8f4 <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
    c8f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    c8f6:	2300      	movs	r3, #0
{
    c8f8:	4606      	mov	r6, r0
    c8fa:	460f      	mov	r7, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    c8fc:	482c      	ldr	r0, [pc, #176]	; (c9b0 <bt_att_accept+0xbc>)
    c8fe:	2200      	movs	r2, #0
    c900:	4669      	mov	r1, sp
    c902:	f010 fa81 	bl	1ce08 <k_mem_slab_alloc>
    c906:	4604      	mov	r4, r0
    c908:	b178      	cbz	r0, c92a <bt_att_accept+0x36>
    c90a:	4a2a      	ldr	r2, [pc, #168]	; (c9b4 <bt_att_accept+0xc0>)
    c90c:	4b2a      	ldr	r3, [pc, #168]	; (c9b8 <bt_att_accept+0xc4>)
		BT_ERR("No available ATT context for conn %p", conn);
    c90e:	482b      	ldr	r0, [pc, #172]	; (c9bc <bt_att_accept+0xc8>)
    c910:	1ad2      	subs	r2, r2, r3
    c912:	08d2      	lsrs	r2, r2, #3
    c914:	0192      	lsls	r2, r2, #6
    c916:	f042 0201 	orr.w	r2, r2, #1
    c91a:	4631      	mov	r1, r6
		BT_ERR("No available ATT channel for conn %p", att->conn);
    c91c:	f011 fde2 	bl	1e4e4 <log_1>
	sys_slist_init(&att->reqs);
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
    c920:	f06f 040b 	mvn.w	r4, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
    c924:	4620      	mov	r0, r4
    c926:	b003      	add	sp, #12
    c928:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)memset(att, 0, sizeof(*att));
    c92a:	4601      	mov	r1, r0
    c92c:	2244      	movs	r2, #68	; 0x44
    c92e:	9800      	ldr	r0, [sp, #0]
    c930:	f013 fac8 	bl	1fec4 <memset>
	att->conn = conn;
    c934:	9d00      	ldr	r5, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    c936:	4822      	ldr	r0, [pc, #136]	; (c9c0 <bt_att_accept+0xcc>)
	list->tail = NULL;
    c938:	60ac      	str	r4, [r5, #8]
	list->head = NULL;
    c93a:	e9c5 6400 	strd	r6, r4, [r5]
	list->tail = NULL;
    c93e:	e9c5 440f 	strd	r4, r4, [r5, #60]	; 0x3c
    c942:	2200      	movs	r2, #0
    c944:	2300      	movs	r3, #0
    c946:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
    c948:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    c94a:	f010 fa5d 	bl	1ce08 <k_mem_slab_alloc>
    c94e:	4604      	mov	r4, r0
    c950:	b148      	cbz	r0, c966 <bt_att_accept+0x72>
    c952:	4a18      	ldr	r2, [pc, #96]	; (c9b4 <bt_att_accept+0xc0>)
    c954:	4b18      	ldr	r3, [pc, #96]	; (c9b8 <bt_att_accept+0xc4>)
		BT_ERR("No available ATT channel for conn %p", att->conn);
    c956:	6829      	ldr	r1, [r5, #0]
    c958:	481a      	ldr	r0, [pc, #104]	; (c9c4 <bt_att_accept+0xd0>)
    c95a:	1ad2      	subs	r2, r2, r3
    c95c:	08d2      	lsrs	r2, r2, #3
    c95e:	0192      	lsls	r2, r2, #6
    c960:	f042 0201 	orr.w	r2, r2, #1
    c964:	e7da      	b.n	c91c <bt_att_accept+0x28>
	(void)memset(chan, 0, sizeof(*chan));
    c966:	4601      	mov	r1, r0
    c968:	f44f 729c 	mov.w	r2, #312	; 0x138
    c96c:	9801      	ldr	r0, [sp, #4]
    c96e:	f013 faa9 	bl	1fec4 <memset>
	chan->chan.chan.ops = &ops;
    c972:	9801      	ldr	r0, [sp, #4]
    c974:	4b14      	ldr	r3, [pc, #80]	; (c9c8 <bt_att_accept+0xd4>)
    c976:	60c3      	str	r3, [r0, #12]
    c978:	30d0      	adds	r0, #208	; 0xd0
    c97a:	f016 f9b7 	bl	22cec <z_impl_k_queue_init>
	k_sem_init(&chan->tx_sem, CONFIG_BT_ATT_TX_MAX, CONFIG_BT_ATT_TX_MAX);
    c97e:	9801      	ldr	r0, [sp, #4]
    c980:	f500 708c 	add.w	r0, r0, #280	; 0x118
	return z_impl_k_sem_init(sem, initial_count, limit);
    c984:	220a      	movs	r2, #10
    c986:	4611      	mov	r1, r2
    c988:	f016 fb2f 	bl	22fea <z_impl_k_sem_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    c98c:	9b01      	ldr	r3, [sp, #4]
    c98e:	f3bf 8f5b 	dmb	ish
    c992:	33c8      	adds	r3, #200	; 0xc8
    c994:	e853 2f00 	ldrex	r2, [r3]
    c998:	e843 4100 	strex	r1, r4, [r3]
    c99c:	2900      	cmp	r1, #0
    c99e:	d1f9      	bne.n	c994 <bt_att_accept+0xa0>
    c9a0:	f3bf 8f5b 	dmb	ish
	chan->att = att;
    c9a4:	9b01      	ldr	r3, [sp, #4]
    c9a6:	f843 5b08 	str.w	r5, [r3], #8
	*ch = &chan->chan.chan;
    c9aa:	603b      	str	r3, [r7, #0]
	return 0;
    c9ac:	e7ba      	b.n	c924 <bt_att_accept+0x30>
    c9ae:	bf00      	nop
    c9b0:	200007b8 	.word	0x200007b8
    c9b4:	000236e8 	.word	0x000236e8
    c9b8:	000236e8 	.word	0x000236e8
    c9bc:	000267c4 	.word	0x000267c4
    c9c0:	200007d4 	.word	0x200007d4
    c9c4:	000267e9 	.word	0x000267e9
    c9c8:	200001dc 	.word	0x200001dc

0000c9cc <bt_att_connected>:
{
    c9cc:	b538      	push	{r3, r4, r5, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    c9ce:	2104      	movs	r1, #4
{
    c9d0:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    c9d2:	6800      	ldr	r0, [r0, #0]
    c9d4:	f014 f92d 	bl	20c32 <bt_l2cap_le_lookup_tx_cid>
	struct bt_att *att = att_chan->att;
    c9d8:	f850 5c08 	ldr.w	r5, [r0, #-8]
	if (sys_slist_is_empty(&att->chans)) {
    c9dc:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    c9de:	b93b      	cbnz	r3, c9f0 <bt_att_connected+0x24>
	z_impl_k_queue_init(queue);
    c9e0:	f105 000c 	add.w	r0, r5, #12
    c9e4:	f016 f982 	bl	22cec <z_impl_k_queue_init>
    c9e8:	f105 0024 	add.w	r0, r5, #36	; 0x24
    c9ec:	f016 f97e 	bl	22cec <z_impl_k_queue_init>
Z_GENLIST_PREPEND(slist, snode)
    c9f0:	6bea      	ldr	r2, [r5, #60]	; 0x3c
	parent->next = child;
    c9f2:	f8c4 212c 	str.w	r2, [r4, #300]	; 0x12c
Z_GENLIST_PREPEND(slist, snode)
    c9f6:	6c2a      	ldr	r2, [r5, #64]	; 0x40
	sys_slist_prepend(&att->chans, &chan->node);
    c9f8:	f504 7396 	add.w	r3, r4, #300	; 0x12c
	list->head = node;
    c9fc:	63eb      	str	r3, [r5, #60]	; 0x3c
Z_GENLIST_PREPEND(slist, snode)
    c9fe:	b902      	cbnz	r2, ca02 <bt_att_connected+0x36>
	list->tail = node;
    ca00:	642b      	str	r3, [r5, #64]	; 0x40
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    ca02:	f3bf 8f5b 	dmb	ish
    ca06:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
	k_delayed_work_init(&att_chan->timeout_work, att_timeout);
    ca0a:	4908      	ldr	r1, [pc, #32]	; (ca2c <bt_att_connected+0x60>)
    ca0c:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
    ca10:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    ca12:	bf5e      	ittt	pl
    ca14:	2317      	movpl	r3, #23
    ca16:	f8a4 305e 	strhpl.w	r3, [r4, #94]	; 0x5e
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    ca1a:	f8a4 3052 	strhpl.w	r3, [r4, #82]	; 0x52
	k_delayed_work_init(&att_chan->timeout_work, att_timeout);
    ca1e:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
}
    ca22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_delayed_work_init(&att_chan->timeout_work, att_timeout);
    ca26:	f016 bb63 	b.w	230f0 <k_delayed_work_init>
    ca2a:	bf00      	nop
    ca2c:	0000d7ad 	.word	0x0000d7ad

0000ca30 <prep_write_cb>:
{
    ca30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ca32:	460c      	mov	r4, r1
    ca34:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
    ca36:	4601      	mov	r1, r0
    ca38:	222a      	movs	r2, #42	; 0x2a
    ca3a:	6820      	ldr	r0, [r4, #0]
    ca3c:	f014 fffa 	bl	21a34 <bt_gatt_check_perm>
    ca40:	4605      	mov	r5, r0
    ca42:	7420      	strb	r0, [r4, #16]
	if (data->err) {
    ca44:	2800      	cmp	r0, #0
    ca46:	d12d      	bne.n	caa4 <prep_write_cb+0x74>
	if (!(attr->perm & BT_GATT_PERM_PREPARE_WRITE)) {
    ca48:	7cb3      	ldrb	r3, [r6, #18]
    ca4a:	065b      	lsls	r3, r3, #25
    ca4c:	d514      	bpl.n	ca78 <prep_write_cb+0x48>
	write = attr->write(data->conn, attr, data->value, data->len,
    ca4e:	2301      	movs	r3, #1
    ca50:	9301      	str	r3, [sp, #4]
    ca52:	89e3      	ldrh	r3, [r4, #14]
    ca54:	9300      	str	r3, [sp, #0]
    ca56:	68b7      	ldr	r7, [r6, #8]
    ca58:	89a3      	ldrh	r3, [r4, #12]
    ca5a:	68a2      	ldr	r2, [r4, #8]
    ca5c:	6820      	ldr	r0, [r4, #0]
    ca5e:	4631      	mov	r1, r6
    ca60:	47b8      	blx	r7
	if (write != 0) {
    ca62:	b148      	cbz	r0, ca78 <prep_write_cb+0x48>
	if (err < 0 && err >= -0xff) {
    ca64:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
    ca68:	bf26      	itte	cs
    ca6a:	4243      	negcs	r3, r0
    ca6c:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
    ca6e:	230e      	movcc	r3, #14
		data->err = BT_ATT_ERR_PREPARE_QUEUE_FULL;
    ca70:	7423      	strb	r3, [r4, #16]
}
    ca72:	4628      	mov	r0, r5
    ca74:	b003      	add	sp, #12
    ca76:	bdf0      	pop	{r4, r5, r6, r7, pc}
	data->buf = net_buf_alloc(&prep_pool, K_NO_WAIT);
    ca78:	480b      	ldr	r0, [pc, #44]	; (caa8 <prep_write_cb+0x78>)
    ca7a:	2200      	movs	r2, #0
    ca7c:	2300      	movs	r3, #0
    ca7e:	f015 fd1f 	bl	224c0 <net_buf_alloc_fixed>
    ca82:	6060      	str	r0, [r4, #4]
	if (!data->buf) {
    ca84:	b908      	cbnz	r0, ca8a <prep_write_cb+0x5a>
		data->err = BT_ATT_ERR_PREPARE_QUEUE_FULL;
    ca86:	2309      	movs	r3, #9
    ca88:	e7f2      	b.n	ca70 <prep_write_cb+0x40>
	attr_data->handle = attr->handle;
    ca8a:	8a33      	ldrh	r3, [r6, #16]
    ca8c:	8283      	strh	r3, [r0, #20]
	attr_data->offset = data->offset;
    ca8e:	89e3      	ldrh	r3, [r4, #14]
    ca90:	82c3      	strh	r3, [r0, #22]
	net_buf_add_mem(data->buf, data->value, data->len);
    ca92:	89a2      	ldrh	r2, [r4, #12]
    ca94:	68a1      	ldr	r1, [r4, #8]
    ca96:	3008      	adds	r0, #8
    ca98:	f015 fd80 	bl	2259c <net_buf_simple_add_mem>
	data->err = 0U;
    ca9c:	2300      	movs	r3, #0
    ca9e:	7423      	strb	r3, [r4, #16]
	return BT_GATT_ITER_CONTINUE;
    caa0:	2501      	movs	r5, #1
    caa2:	e7e6      	b.n	ca72 <prep_write_cb+0x42>
		return BT_GATT_ITER_STOP;
    caa4:	2500      	movs	r5, #0
    caa6:	e7e4      	b.n	ca72 <prep_write_cb+0x42>
    caa8:	200009f0 	.word	0x200009f0

0000caac <chan_send>:
{
    caac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    caae:	688b      	ldr	r3, [r1, #8]
    cab0:	781b      	ldrb	r3, [r3, #0]
    cab2:	2bd2      	cmp	r3, #210	; 0xd2
{
    cab4:	4604      	mov	r4, r0
    cab6:	460f      	mov	r7, r1
    cab8:	4615      	mov	r5, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    caba:	d115      	bne.n	cae8 <chan_send+0x3c>
		err = bt_smp_sign(chan->att->conn, buf);
    cabc:	6803      	ldr	r3, [r0, #0]
    cabe:	6818      	ldr	r0, [r3, #0]
    cac0:	f015 fc71 	bl	223a6 <bt_smp_sign>
		if (err) {
    cac4:	4606      	mov	r6, r0
    cac6:	b178      	cbz	r0, cae8 <chan_send+0x3c>
    cac8:	491b      	ldr	r1, [pc, #108]	; (cb38 <chan_send+0x8c>)
    caca:	4b1c      	ldr	r3, [pc, #112]	; (cb3c <chan_send+0x90>)
			BT_ERR("Error signing data");
    cacc:	481c      	ldr	r0, [pc, #112]	; (cb40 <chan_send+0x94>)
    cace:	1a5b      	subs	r3, r3, r1
    cad0:	08db      	lsrs	r3, r3, #3
    cad2:	019b      	lsls	r3, r3, #6
    cad4:	f043 0101 	orr.w	r1, r3, #1
    cad8:	f011 fcf7 	bl	1e4ca <log_0>
			net_buf_unref(buf);
    cadc:	4638      	mov	r0, r7
    cade:	f00e fffb 	bl	1bad8 <net_buf_unref>
}
    cae2:	4630      	mov	r0, r6
    cae4:	b003      	add	sp, #12
    cae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chan->sent = cb ? cb : chan_cb(buf);
    cae8:	b955      	cbnz	r5, cb00 <chan_send+0x54>
	switch (att_op_get_type(buf->data[0])) {
    caea:	68bb      	ldr	r3, [r7, #8]
    caec:	7818      	ldrb	r0, [r3, #0]
    caee:	f014 f965 	bl	20dbc <att_op_get_type>
    caf2:	3801      	subs	r0, #1
    caf4:	b2c0      	uxtb	r0, r0
    caf6:	2804      	cmp	r0, #4
    caf8:	bf9c      	itt	ls
    cafa:	4b12      	ldrls	r3, [pc, #72]	; (cb44 <chan_send+0x98>)
    cafc:	f853 5020 	ldrls.w	r5, [r3, r0, lsl #2]
	return bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT, buf,
    cb00:	6823      	ldr	r3, [r4, #0]
	chan->sent = cb ? cb : chan_cb(buf);
    cb02:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
	return bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT, buf,
    cb06:	6818      	ldr	r0, [r3, #0]
	if (cb == chan_rsp_sent) {
    cb08:	4b0f      	ldr	r3, [pc, #60]	; (cb48 <chan_send+0x9c>)
    cb0a:	429d      	cmp	r5, r3
    cb0c:	d010      	beq.n	cb30 <chan_send+0x84>
	} else if (cb == chan_cfm_sent) {
    cb0e:	4b0f      	ldr	r3, [pc, #60]	; (cb4c <chan_send+0xa0>)
    cb10:	429d      	cmp	r5, r3
    cb12:	d00f      	beq.n	cb34 <chan_send+0x88>
		return att_sent;
    cb14:	490e      	ldr	r1, [pc, #56]	; (cb50 <chan_send+0xa4>)
    cb16:	4b0f      	ldr	r3, [pc, #60]	; (cb54 <chan_send+0xa8>)
    cb18:	4a0f      	ldr	r2, [pc, #60]	; (cb58 <chan_send+0xac>)
    cb1a:	428d      	cmp	r5, r1
    cb1c:	bf18      	it	ne
    cb1e:	4613      	movne	r3, r2
				att_cb(chan->sent), &chan->chan.chan);
    cb20:	3408      	adds	r4, #8
	return bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT, buf,
    cb22:	9400      	str	r4, [sp, #0]
    cb24:	463a      	mov	r2, r7
    cb26:	2104      	movs	r1, #4
    cb28:	f013 ff27 	bl	2097a <bt_l2cap_send_cb>
    cb2c:	4606      	mov	r6, r0
    cb2e:	e7d8      	b.n	cae2 <chan_send+0x36>
		return att_rsp_sent;
    cb30:	4b0a      	ldr	r3, [pc, #40]	; (cb5c <chan_send+0xb0>)
    cb32:	e7f5      	b.n	cb20 <chan_send+0x74>
		return att_cfm_sent;
    cb34:	4b0a      	ldr	r3, [pc, #40]	; (cb60 <chan_send+0xb4>)
    cb36:	e7f3      	b.n	cb20 <chan_send+0x74>
    cb38:	000236e8 	.word	0x000236e8
    cb3c:	000236e8 	.word	0x000236e8
    cb40:	0002680e 	.word	0x0002680e
    cb44:	00023d0c 	.word	0x00023d0c
    cb48:	0002104b 	.word	0x0002104b
    cb4c:	0002102f 	.word	0x0002102f
    cb50:	0000c8d9 	.word	0x0000c8d9
    cb54:	0000c581 	.word	0x0000c581
    cb58:	00020d91 	.word	0x00020d91
    cb5c:	0000c571 	.word	0x0000c571
    cb60:	0000c561 	.word	0x0000c561

0000cb64 <bt_att_chan_create_pdu>:
{
    cb64:	b538      	push	{r3, r4, r5, lr}
    cb66:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
    cb68:	f8b0 1066 	ldrh.w	r1, [r0, #102]	; 0x66
    cb6c:	3201      	adds	r2, #1
    cb6e:	428a      	cmp	r2, r1
    cb70:	d90c      	bls.n	cb8c <bt_att_chan_create_pdu+0x28>
    cb72:	481a      	ldr	r0, [pc, #104]	; (cbdc <bt_att_chan_create_pdu+0x78>)
    cb74:	4b1a      	ldr	r3, [pc, #104]	; (cbe0 <bt_att_chan_create_pdu+0x7c>)
    cb76:	1a1b      	subs	r3, r3, r0
    cb78:	08db      	lsrs	r3, r3, #3
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
    cb7a:	019b      	lsls	r3, r3, #6
    cb7c:	4819      	ldr	r0, [pc, #100]	; (cbe4 <bt_att_chan_create_pdu+0x80>)
    cb7e:	f043 0302 	orr.w	r3, r3, #2
    cb82:	f011 fcc3 	bl	1e50c <log_2>
		return NULL;
    cb86:	2400      	movs	r4, #0
}
    cb88:	4620      	mov	r0, r4
    cb8a:	bd38      	pop	{r3, r4, r5, pc}
	switch (att_op_get_type(op)) {
    cb8c:	4628      	mov	r0, r5
    cb8e:	f014 f915 	bl	20dbc <att_op_get_type>
    cb92:	2802      	cmp	r0, #2
    cb94:	d001      	beq.n	cb9a <bt_att_chan_create_pdu+0x36>
    cb96:	2804      	cmp	r0, #4
    cb98:	d114      	bne.n	cbc4 <bt_att_chan_create_pdu+0x60>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
    cb9a:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    cb9e:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
    cba0:	2100      	movs	r1, #0
    cba2:	4608      	mov	r0, r1
    cba4:	f013 fee6 	bl	20974 <bt_l2cap_create_pdu_timeout>
    cba8:	4604      	mov	r4, r0
	if (!buf) {
    cbaa:	b980      	cbnz	r0, cbce <bt_att_chan_create_pdu+0x6a>
    cbac:	4b0b      	ldr	r3, [pc, #44]	; (cbdc <bt_att_chan_create_pdu+0x78>)
    cbae:	4a0c      	ldr	r2, [pc, #48]	; (cbe0 <bt_att_chan_create_pdu+0x7c>)
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
    cbb0:	480d      	ldr	r0, [pc, #52]	; (cbe8 <bt_att_chan_create_pdu+0x84>)
    cbb2:	1ad2      	subs	r2, r2, r3
    cbb4:	08d2      	lsrs	r2, r2, #3
    cbb6:	0192      	lsls	r2, r2, #6
    cbb8:	f042 0201 	orr.w	r2, r2, #1
    cbbc:	4629      	mov	r1, r5
    cbbe:	f011 fc91 	bl	1e4e4 <log_1>
		return NULL;
    cbc2:	e7e1      	b.n	cb88 <bt_att_chan_create_pdu+0x24>
		buf = bt_l2cap_create_pdu(NULL, 0);
    cbc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    cbc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    cbcc:	e7e8      	b.n	cba0 <bt_att_chan_create_pdu+0x3c>
	hdr = net_buf_add(buf, sizeof(*hdr));
    cbce:	2101      	movs	r1, #1
    cbd0:	3008      	adds	r0, #8
    cbd2:	f015 fcdd 	bl	22590 <net_buf_simple_add>
	hdr->code = op;
    cbd6:	7005      	strb	r5, [r0, #0]
	return buf;
    cbd8:	e7d6      	b.n	cb88 <bt_att_chan_create_pdu+0x24>
    cbda:	bf00      	nop
    cbdc:	000236e8 	.word	0x000236e8
    cbe0:	000236e8 	.word	0x000236e8
    cbe4:	00026821 	.word	0x00026821
    cbe8:	00026319 	.word	0x00026319

0000cbec <att_indicate>:
{
    cbec:	b570      	push	{r4, r5, r6, lr}
    cbee:	4604      	mov	r4, r0
	handle = net_buf_pull_le16(buf);
    cbf0:	f101 0008 	add.w	r0, r1, #8
{
    cbf4:	460d      	mov	r5, r1
	handle = net_buf_pull_le16(buf);
    cbf6:	f015 fd18 	bl	2262a <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
    cbfa:	6826      	ldr	r6, [r4, #0]
    cbfc:	89ab      	ldrh	r3, [r5, #12]
    cbfe:	68aa      	ldr	r2, [r5, #8]
	handle = net_buf_pull_le16(buf);
    cc00:	4601      	mov	r1, r0
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
    cc02:	6830      	ldr	r0, [r6, #0]
    cc04:	f014 ffbb 	bl	21b7e <bt_gatt_notification>
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_CONFIRM, 0);
    cc08:	211e      	movs	r1, #30
    cc0a:	2200      	movs	r2, #0
    cc0c:	4620      	mov	r0, r4
    cc0e:	f7ff ffa9 	bl	cb64 <bt_att_chan_create_pdu>
	if (!buf) {
    cc12:	4601      	mov	r1, r0
    cc14:	b118      	cbz	r0, cc1e <att_indicate+0x32>
	bt_att_chan_send_rsp(chan, buf, chan_cfm_sent);
    cc16:	4a03      	ldr	r2, [pc, #12]	; (cc24 <att_indicate+0x38>)
    cc18:	4620      	mov	r0, r4
    cc1a:	f014 fb00 	bl	2121e <bt_att_chan_send_rsp>
}
    cc1e:	2000      	movs	r0, #0
    cc20:	bd70      	pop	{r4, r5, r6, pc}
    cc22:	bf00      	nop
    cc24:	0002102f 	.word	0x0002102f

0000cc28 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
    cc28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cc2c:	4688      	mov	r8, r1
    cc2e:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    cc30:	2101      	movs	r1, #1
    cc32:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
    cc34:	4605      	mov	r5, r0
    cc36:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    cc38:	f7ff ff94 	bl	cb64 <bt_att_chan_create_pdu>
	if (!buf) {
    cc3c:	4604      	mov	r4, r0
    cc3e:	b178      	cbz	r0, cc60 <send_err_rsp.part.0+0x38>
	rsp = net_buf_add(buf, sizeof(*rsp));
    cc40:	2104      	movs	r1, #4
    cc42:	3008      	adds	r0, #8
    cc44:	f015 fca4 	bl	22590 <net_buf_simple_add>
	rsp->request = req;
    cc48:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
    cc4c:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
    cc4e:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
    cc52:	4621      	mov	r1, r4
    cc54:	4628      	mov	r0, r5
    cc56:	4a03      	ldr	r2, [pc, #12]	; (cc64 <send_err_rsp.part.0+0x3c>)
}
    cc58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
    cc5c:	f014 badf 	b.w	2121e <bt_att_chan_send_rsp>
}
    cc60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cc64:	0002104b 	.word	0x0002104b

0000cc68 <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
    cc68:	898b      	ldrh	r3, [r1, #12]
{
    cc6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cc6e:	4604      	mov	r4, r0
    cc70:	4688      	mov	r8, r1
	if (buf->len < sizeof(*hdr)) {
    cc72:	b963      	cbnz	r3, cc8e <bt_att_recv+0x26>
    cc74:	494a      	ldr	r1, [pc, #296]	; (cda0 <bt_att_recv+0x138>)
    cc76:	4b4b      	ldr	r3, [pc, #300]	; (cda4 <bt_att_recv+0x13c>)
		BT_ERR("Too small ATT PDU received");
    cc78:	484b      	ldr	r0, [pc, #300]	; (cda8 <bt_att_recv+0x140>)
    cc7a:	1ac9      	subs	r1, r1, r3
    cc7c:	08c9      	lsrs	r1, r1, #3
    cc7e:	0189      	lsls	r1, r1, #6
    cc80:	f041 0101 	orr.w	r1, r1, #1
			BT_WARN("Ignoring unexpected indication");
    cc84:	f011 fc21 	bl	1e4ca <log_0>
}
    cc88:	2000      	movs	r0, #0
    cc8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    cc8e:	2101      	movs	r1, #1
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
    cc90:	f1a0 0608 	sub.w	r6, r0, #8
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    cc94:	f108 0008 	add.w	r0, r8, #8
    cc98:	f015 fcb7 	bl	2260a <net_buf_simple_pull_mem>
		if (hdr->code == handlers[i].op) {
    cc9c:	4a43      	ldr	r2, [pc, #268]	; (cdac <bt_att_recv+0x144>)
    cc9e:	7801      	ldrb	r1, [r0, #0]
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    cca0:	4605      	mov	r5, r0
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    cca2:	2300      	movs	r3, #0
    cca4:	4694      	mov	ip, r2
		if (hdr->code == handlers[i].op) {
    cca6:	f812 0033 	ldrb.w	r0, [r2, r3, lsl #3]
    ccaa:	4288      	cmp	r0, r1
    ccac:	d11d      	bne.n	ccea <bt_att_recv+0x82>
		if (handler->type == ATT_REQUEST &&
    ccae:	00d8      	lsls	r0, r3, #3
    ccb0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    ccb4:	789f      	ldrb	r7, [r3, #2]
    ccb6:	2f01      	cmp	r7, #1
    ccb8:	d132      	bne.n	cd20 <bt_att_recv+0xb8>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    ccba:	f3bf 8f5b 	dmb	ish
    ccbe:	34c0      	adds	r4, #192	; 0xc0
    ccc0:	e854 3f00 	ldrex	r3, [r4]
    ccc4:	f043 0201 	orr.w	r2, r3, #1
    ccc8:	e844 2100 	strex	r1, r2, [r4]
    cccc:	2900      	cmp	r1, #0
    ccce:	d1f7      	bne.n	ccc0 <bt_att_recv+0x58>
    ccd0:	f3bf 8f5b 	dmb	ish
    ccd4:	07da      	lsls	r2, r3, #31
    ccd6:	d53d      	bpl.n	cd54 <bt_att_recv+0xec>
    ccd8:	4931      	ldr	r1, [pc, #196]	; (cda0 <bt_att_recv+0x138>)
    ccda:	4b32      	ldr	r3, [pc, #200]	; (cda4 <bt_att_recv+0x13c>)
			BT_WARN("Ignoring unexpected request");
    ccdc:	4834      	ldr	r0, [pc, #208]	; (cdb0 <bt_att_recv+0x148>)
    ccde:	1ac9      	subs	r1, r1, r3
    cce0:	08c9      	lsrs	r1, r1, #3
    cce2:	0189      	lsls	r1, r1, #6
    cce4:	f041 0102 	orr.w	r1, r1, #2
    cce8:	e7cc      	b.n	cc84 <bt_att_recv+0x1c>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    ccea:	3301      	adds	r3, #1
    ccec:	2b1c      	cmp	r3, #28
    ccee:	d1da      	bne.n	cca6 <bt_att_recv+0x3e>
    ccf0:	4b2c      	ldr	r3, [pc, #176]	; (cda4 <bt_att_recv+0x13c>)
    ccf2:	4a2b      	ldr	r2, [pc, #172]	; (cda0 <bt_att_recv+0x138>)
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
    ccf4:	482f      	ldr	r0, [pc, #188]	; (cdb4 <bt_att_recv+0x14c>)
    ccf6:	1ad2      	subs	r2, r2, r3
    ccf8:	08d2      	lsrs	r2, r2, #3
    ccfa:	0192      	lsls	r2, r2, #6
    ccfc:	f042 0202 	orr.w	r2, r2, #2
    cd00:	f011 fbf0 	bl	1e4e4 <log_1>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
    cd04:	7829      	ldrb	r1, [r5, #0]
    cd06:	4608      	mov	r0, r1
    cd08:	f014 f858 	bl	20dbc <att_op_get_type>
    cd0c:	2800      	cmp	r0, #0
    cd0e:	d0bb      	beq.n	cc88 <bt_att_recv+0x20>
	if (!req) {
    cd10:	2900      	cmp	r1, #0
    cd12:	d0b9      	beq.n	cc88 <bt_att_recv+0x20>
    cd14:	2306      	movs	r3, #6
    cd16:	2200      	movs	r2, #0
    cd18:	4630      	mov	r0, r6
    cd1a:	f7ff ff85 	bl	cc28 <send_err_rsp.part.0>
    cd1e:	e7b3      	b.n	cc88 <bt_att_recv+0x20>
		} else if (handler->type == ATT_INDICATION &&
    cd20:	2f05      	cmp	r7, #5
    cd22:	d117      	bne.n	cd54 <bt_att_recv+0xec>
    cd24:	f3bf 8f5b 	dmb	ish
    cd28:	34c0      	adds	r4, #192	; 0xc0
    cd2a:	e854 3f00 	ldrex	r3, [r4]
    cd2e:	f043 0202 	orr.w	r2, r3, #2
    cd32:	e844 2100 	strex	r1, r2, [r4]
    cd36:	2900      	cmp	r1, #0
    cd38:	d1f7      	bne.n	cd2a <bt_att_recv+0xc2>
    cd3a:	f3bf 8f5b 	dmb	ish
    cd3e:	079b      	lsls	r3, r3, #30
    cd40:	d508      	bpl.n	cd54 <bt_att_recv+0xec>
    cd42:	4917      	ldr	r1, [pc, #92]	; (cda0 <bt_att_recv+0x138>)
    cd44:	4b17      	ldr	r3, [pc, #92]	; (cda4 <bt_att_recv+0x13c>)
			BT_WARN("Ignoring unexpected indication");
    cd46:	481c      	ldr	r0, [pc, #112]	; (cdb8 <bt_att_recv+0x150>)
    cd48:	1ac9      	subs	r1, r1, r3
    cd4a:	08c9      	lsrs	r1, r1, #3
    cd4c:	0189      	lsls	r1, r1, #6
    cd4e:	f041 0102 	orr.w	r1, r1, #2
    cd52:	e797      	b.n	cc84 <bt_att_recv+0x1c>
	if (buf->len < handler->expect_len) {
    cd54:	eb0c 0300 	add.w	r3, ip, r0
    cd58:	f8b8 100c 	ldrh.w	r1, [r8, #12]
    cd5c:	785a      	ldrb	r2, [r3, #1]
    cd5e:	428a      	cmp	r2, r1
    cd60:	d90e      	bls.n	cd80 <bt_att_recv+0x118>
    cd62:	4a10      	ldr	r2, [pc, #64]	; (cda4 <bt_att_recv+0x13c>)
    cd64:	4b0e      	ldr	r3, [pc, #56]	; (cda0 <bt_att_recv+0x138>)
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    cd66:	4815      	ldr	r0, [pc, #84]	; (cdbc <bt_att_recv+0x154>)
    cd68:	1a9b      	subs	r3, r3, r2
    cd6a:	08db      	lsrs	r3, r3, #3
    cd6c:	019b      	lsls	r3, r3, #6
    cd6e:	782a      	ldrb	r2, [r5, #0]
    cd70:	f043 0301 	orr.w	r3, r3, #1
    cd74:	f011 fbca 	bl	1e50c <log_2>
	if (handler->type == ATT_REQUEST && err) {
    cd78:	2f01      	cmp	r7, #1
    cd7a:	d185      	bne.n	cc88 <bt_att_recv+0x20>
		err = BT_ATT_ERR_INVALID_PDU;
    cd7c:	2304      	movs	r3, #4
    cd7e:	e00a      	b.n	cd96 <bt_att_recv+0x12e>
		err = handler->func(att_chan, buf);
    cd80:	685b      	ldr	r3, [r3, #4]
    cd82:	4641      	mov	r1, r8
    cd84:	4630      	mov	r0, r6
    cd86:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
    cd88:	2f01      	cmp	r7, #1
		err = handler->func(att_chan, buf);
    cd8a:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
    cd8c:	f47f af7c 	bne.w	cc88 <bt_att_recv+0x20>
    cd90:	2800      	cmp	r0, #0
    cd92:	f43f af79 	beq.w	cc88 <bt_att_recv+0x20>
		send_err_rsp(att_chan, hdr->code, 0, err);
    cd96:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
    cd98:	2900      	cmp	r1, #0
    cd9a:	f43f af75 	beq.w	cc88 <bt_att_recv+0x20>
    cd9e:	e7ba      	b.n	cd16 <bt_att_recv+0xae>
    cda0:	000236e8 	.word	0x000236e8
    cda4:	000236e8 	.word	0x000236e8
    cda8:	00026846 	.word	0x00026846
    cdac:	00023d20 	.word	0x00023d20
    cdb0:	00026861 	.word	0x00026861
    cdb4:	000268bb 	.word	0x000268bb
    cdb8:	0002687d 	.word	0x0002687d
    cdbc:	0002689c 	.word	0x0002689c

0000cdc0 <att_write_rsp>:
{
    cdc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cdc4:	461f      	mov	r7, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    cdc6:	6803      	ldr	r3, [r0, #0]
    cdc8:	460e      	mov	r6, r1
    cdca:	3900      	subs	r1, #0
{
    cdcc:	b086      	sub	sp, #24
    cdce:	4605      	mov	r5, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    cdd0:	bf18      	it	ne
    cdd2:	2101      	movne	r1, #1
    cdd4:	6818      	ldr	r0, [r3, #0]
{
    cdd6:	4690      	mov	r8, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    cdd8:	f014 fefd 	bl	21bd6 <bt_gatt_change_aware>
    cddc:	2800      	cmp	r0, #0
    cdde:	d04e      	beq.n	ce7e <att_write_rsp+0xbe>
	if (!handle) {
    cde0:	2f00      	cmp	r7, #0
    cde2:	d04e      	beq.n	ce82 <att_write_rsp+0xc2>
	(void)memset(&data, 0, sizeof(data));
    cde4:	2218      	movs	r2, #24
    cde6:	2100      	movs	r1, #0
    cde8:	4668      	mov	r0, sp
    cdea:	f013 f86b 	bl	1fec4 <memset>
	if (rsp) {
    cdee:	f1b8 0f00 	cmp.w	r8, #0
    cdf2:	d126      	bne.n	ce42 <att_write_rsp+0x82>
	data.conn = chan->att->conn;
    cdf4:	682b      	ldr	r3, [r5, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    cdf6:	4a24      	ldr	r2, [pc, #144]	; (ce88 <att_write_rsp+0xc8>)
	data.conn = chan->att->conn;
    cdf8:	681b      	ldr	r3, [r3, #0]
    cdfa:	9300      	str	r3, [sp, #0]
	data.offset = offset;
    cdfc:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    ce00:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
    ce04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ce06:	9303      	str	r3, [sp, #12]
	data.len = len;
    ce08:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    ce0c:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    ce10:	2301      	movs	r3, #1
    ce12:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    ce16:	4639      	mov	r1, r7
    ce18:	466b      	mov	r3, sp
    ce1a:	4638      	mov	r0, r7
	data.req = req;
    ce1c:	f88d 6008 	strb.w	r6, [sp, #8]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    ce20:	f014 f812 	bl	20e48 <bt_gatt_foreach_attr>
	if (data.err) {
    ce24:	f89d 4014 	ldrb.w	r4, [sp, #20]
    ce28:	b30c      	cbz	r4, ce6e <att_write_rsp+0xae>
		if (rsp) {
    ce2a:	f1b8 0f00 	cmp.w	r8, #0
    ce2e:	d019      	beq.n	ce64 <att_write_rsp+0xa4>
			net_buf_unref(data.buf);
    ce30:	9801      	ldr	r0, [sp, #4]
    ce32:	f00e fe51 	bl	1bad8 <net_buf_unref>
	if (!req) {
    ce36:	b976      	cbnz	r6, ce56 <att_write_rsp+0x96>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    ce38:	2400      	movs	r4, #0
}
    ce3a:	4620      	mov	r0, r4
    ce3c:	b006      	add	sp, #24
    ce3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
    ce42:	2200      	movs	r2, #0
    ce44:	4641      	mov	r1, r8
    ce46:	4628      	mov	r0, r5
    ce48:	f7ff fe8c 	bl	cb64 <bt_att_chan_create_pdu>
    ce4c:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
    ce4e:	2800      	cmp	r0, #0
    ce50:	d1d0      	bne.n	cdf4 <att_write_rsp+0x34>
			return BT_ATT_ERR_UNLIKELY;
    ce52:	240e      	movs	r4, #14
    ce54:	e7f1      	b.n	ce3a <att_write_rsp+0x7a>
    ce56:	f89d 3014 	ldrb.w	r3, [sp, #20]
    ce5a:	463a      	mov	r2, r7
    ce5c:	4631      	mov	r1, r6
    ce5e:	4628      	mov	r0, r5
    ce60:	f7ff fee2 	bl	cc28 <send_err_rsp.part.0>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    ce64:	2e18      	cmp	r6, #24
    ce66:	d1e7      	bne.n	ce38 <att_write_rsp+0x78>
    ce68:	f89d 4014 	ldrb.w	r4, [sp, #20]
    ce6c:	e7e5      	b.n	ce3a <att_write_rsp+0x7a>
	if (data.buf) {
    ce6e:	9901      	ldr	r1, [sp, #4]
    ce70:	2900      	cmp	r1, #0
    ce72:	d0e1      	beq.n	ce38 <att_write_rsp+0x78>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    ce74:	4a05      	ldr	r2, [pc, #20]	; (ce8c <att_write_rsp+0xcc>)
    ce76:	4628      	mov	r0, r5
    ce78:	f014 f9d1 	bl	2121e <bt_att_chan_send_rsp>
    ce7c:	e7dd      	b.n	ce3a <att_write_rsp+0x7a>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    ce7e:	2412      	movs	r4, #18
    ce80:	e7db      	b.n	ce3a <att_write_rsp+0x7a>
		return BT_ATT_ERR_INVALID_HANDLE;
    ce82:	2401      	movs	r4, #1
    ce84:	e7d9      	b.n	ce3a <att_write_rsp+0x7a>
    ce86:	bf00      	nop
    ce88:	00021067 	.word	0x00021067
    ce8c:	0002104b 	.word	0x0002104b

0000ce90 <bt_att_create_pdu>:
{
    ce90:	b570      	push	{r4, r5, r6, lr}
    ce92:	460e      	mov	r6, r1
    ce94:	4615      	mov	r5, r2
	att = att_get(conn);
    ce96:	f7ff fcdf 	bl	c858 <att_get>
	if (!att) {
    ce9a:	b1c0      	cbz	r0, cece <bt_att_create_pdu+0x3e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    ce9c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
	return list->head;
    ce9e:	1c69      	adds	r1, r5, #1
    cea0:	b15b      	cbz	r3, ceba <bt_att_create_pdu+0x2a>
    cea2:	f5b3 709a 	subs.w	r0, r3, #308	; 0x134
    cea6:	d008      	beq.n	ceba <bt_att_create_pdu+0x2a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    cea8:	681b      	ldr	r3, [r3, #0]
    ceaa:	b10b      	cbz	r3, ceb0 <bt_att_create_pdu+0x20>
    ceac:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
		if (len + sizeof(op) > chan->chan.tx.mtu) {
    ceb0:	f8b0 2066 	ldrh.w	r2, [r0, #102]	; 0x66
    ceb4:	4291      	cmp	r1, r2
    ceb6:	d90c      	bls.n	ced2 <bt_att_create_pdu+0x42>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    ceb8:	b98b      	cbnz	r3, cede <bt_att_create_pdu+0x4e>
    ceba:	4a0e      	ldr	r2, [pc, #56]	; (cef4 <bt_att_create_pdu+0x64>)
    cebc:	4b0e      	ldr	r3, [pc, #56]	; (cef8 <bt_att_create_pdu+0x68>)
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
    cebe:	480f      	ldr	r0, [pc, #60]	; (cefc <bt_att_create_pdu+0x6c>)
    cec0:	1ad2      	subs	r2, r2, r3
    cec2:	08d2      	lsrs	r2, r2, #3
    cec4:	0192      	lsls	r2, r2, #6
    cec6:	f042 0202 	orr.w	r2, r2, #2
    ceca:	f011 fb0b 	bl	1e4e4 <log_1>
}
    cece:	2000      	movs	r0, #0
    ced0:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
    ced2:	462a      	mov	r2, r5
    ced4:	4631      	mov	r1, r6
}
    ced6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
    ceda:	f7ff be43 	b.w	cb64 <bt_att_chan_create_pdu>
Z_GENLIST_PEEK_NEXT(slist, snode)
    cede:	f513 749a 	adds.w	r4, r3, #308	; 0x134
    cee2:	d004      	beq.n	ceee <bt_att_create_pdu+0x5e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    cee4:	f8d3 4134 	ldr.w	r4, [r3, #308]	; 0x134
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    cee8:	b10c      	cbz	r4, ceee <bt_att_create_pdu+0x5e>
    ceea:	f5a4 749a 	sub.w	r4, r4, #308	; 0x134
{
    ceee:	4618      	mov	r0, r3
    cef0:	4623      	mov	r3, r4
    cef2:	e7dd      	b.n	ceb0 <bt_att_create_pdu+0x20>
    cef4:	000236e8 	.word	0x000236e8
    cef8:	000236e8 	.word	0x000236e8
    cefc:	000268d5 	.word	0x000268d5

0000cf00 <att_exec_write_req>:
{
    cf00:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return att_exec_write_rsp(chan, req->flags);
    cf04:	688b      	ldr	r3, [r1, #8]
	struct bt_conn *conn = chan->chan.chan.conn;
    cf06:	6887      	ldr	r7, [r0, #8]
	return att_exec_write_rsp(chan, req->flags);
    cf08:	f893 8000 	ldrb.w	r8, [r3]
{
    cf0c:	4606      	mov	r6, r0
	uint8_t err = 0U;
    cf0e:	2400      	movs	r4, #0
	while ((buf = net_buf_get(&chan->att->prep_queue, K_NO_WAIT))) {
    cf10:	6830      	ldr	r0, [r6, #0]
    cf12:	2200      	movs	r2, #0
    cf14:	2300      	movs	r3, #0
    cf16:	3024      	adds	r0, #36	; 0x24
    cf18:	f015 fad7 	bl	224ca <net_buf_get>
    cf1c:	4605      	mov	r5, r0
    cf1e:	b978      	cbnz	r0, cf40 <att_exec_write_req+0x40>
	if (err) {
    cf20:	bb54      	cbnz	r4, cf78 <att_exec_write_req+0x78>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_EXEC_WRITE_RSP, 0);
    cf22:	2119      	movs	r1, #25
    cf24:	4622      	mov	r2, r4
    cf26:	4638      	mov	r0, r7
    cf28:	f7ff ffb2 	bl	ce90 <bt_att_create_pdu>
	if (!buf) {
    cf2c:	4601      	mov	r1, r0
    cf2e:	b328      	cbz	r0, cf7c <att_exec_write_req+0x7c>
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
    cf30:	4a13      	ldr	r2, [pc, #76]	; (cf80 <att_exec_write_req+0x80>)
    cf32:	4630      	mov	r0, r6
    cf34:	f014 f973 	bl	2121e <bt_att_chan_send_rsp>
}
    cf38:	4620      	mov	r0, r4
    cf3a:	b004      	add	sp, #16
    cf3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!err && flags == BT_ATT_FLAG_EXEC) {
    cf40:	b9b4      	cbnz	r4, cf70 <att_exec_write_req+0x70>
    cf42:	f1b8 0f01 	cmp.w	r8, #1
    cf46:	d113      	bne.n	cf70 <att_exec_write_req+0x70>
			err = att_write_rsp(chan, BT_ATT_OP_EXEC_WRITE_REQ, 0,
    cf48:	89aa      	ldrh	r2, [r5, #12]
    cf4a:	8aab      	ldrh	r3, [r5, #20]
    cf4c:	9202      	str	r2, [sp, #8]
    cf4e:	68aa      	ldr	r2, [r5, #8]
    cf50:	9201      	str	r2, [sp, #4]
    cf52:	8aea      	ldrh	r2, [r5, #22]
    cf54:	9200      	str	r2, [sp, #0]
    cf56:	2118      	movs	r1, #24
    cf58:	4622      	mov	r2, r4
    cf5a:	4630      	mov	r0, r6
    cf5c:	f7ff ff30 	bl	cdc0 <att_write_rsp>
			if (err) {
    cf60:	4604      	mov	r4, r0
    cf62:	b128      	cbz	r0, cf70 <att_exec_write_req+0x70>
	if (!req) {
    cf64:	4603      	mov	r3, r0
    cf66:	8aaa      	ldrh	r2, [r5, #20]
    cf68:	2118      	movs	r1, #24
    cf6a:	4630      	mov	r0, r6
    cf6c:	f7ff fe5c 	bl	cc28 <send_err_rsp.part.0>
		net_buf_unref(buf);
    cf70:	4628      	mov	r0, r5
    cf72:	f00e fdb1 	bl	1bad8 <net_buf_unref>
    cf76:	e7cb      	b.n	cf10 <att_exec_write_req+0x10>
		return 0;
    cf78:	4604      	mov	r4, r0
    cf7a:	e7dd      	b.n	cf38 <att_exec_write_req+0x38>
		return BT_ATT_ERR_UNLIKELY;
    cf7c:	240e      	movs	r4, #14
    cf7e:	e7db      	b.n	cf38 <att_exec_write_req+0x38>
    cf80:	0002104b 	.word	0x0002104b

0000cf84 <att_prepare_write_req>:
{
    cf84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cf88:	460c      	mov	r4, r1
    cf8a:	b087      	sub	sp, #28
    cf8c:	4605      	mov	r5, r0
	req = net_buf_pull_mem(buf, sizeof(*req));
    cf8e:	2104      	movs	r1, #4
    cf90:	f104 0008 	add.w	r0, r4, #8
    cf94:	f015 fb39 	bl	2260a <net_buf_simple_pull_mem>
	struct bt_conn *conn = chan->chan.chan.conn;
    cf98:	f8d5 b008 	ldr.w	fp, [r5, #8]
	handle = sys_le16_to_cpu(req->handle);
    cf9c:	f8b0 a000 	ldrh.w	sl, [r0]
	offset = sys_le16_to_cpu(req->offset);
    cfa0:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	return att_prep_write_rsp(chan, handle, offset, buf->data, buf->len);
    cfa4:	f8d4 8008 	ldr.w	r8, [r4, #8]
    cfa8:	89a7      	ldrh	r7, [r4, #12]
	if (!bt_gatt_change_aware(conn, true)) {
    cfaa:	2101      	movs	r1, #1
    cfac:	4658      	mov	r0, fp
	handle = sys_le16_to_cpu(req->handle);
    cfae:	fa1f f68a 	uxth.w	r6, sl
	if (!bt_gatt_change_aware(conn, true)) {
    cfb2:	f014 fe10 	bl	21bd6 <bt_gatt_change_aware>
    cfb6:	2800      	cmp	r0, #0
    cfb8:	d04b      	beq.n	d052 <att_prepare_write_req+0xce>
	if (!handle) {
    cfba:	2e00      	cmp	r6, #0
    cfbc:	d04b      	beq.n	d056 <att_prepare_write_req+0xd2>
	(void)memset(&data, 0, sizeof(data));
    cfbe:	2214      	movs	r2, #20
    cfc0:	2100      	movs	r1, #0
    cfc2:	a801      	add	r0, sp, #4
    cfc4:	f012 ff7e 	bl	1fec4 <memset>
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    cfc8:	2301      	movs	r3, #1
    cfca:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
    cfce:	4a24      	ldr	r2, [pc, #144]	; (d060 <att_prepare_write_req+0xdc>)
	data.conn = conn;
    cfd0:	f8cd b004 	str.w	fp, [sp, #4]
	data.len = len;
    cfd4:	b2ff      	uxtb	r7, r7
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
    cfd6:	ab01      	add	r3, sp, #4
    cfd8:	4631      	mov	r1, r6
    cfda:	4630      	mov	r0, r6
	data.offset = offset;
    cfdc:	f8ad 9012 	strh.w	r9, [sp, #18]
	data.value = value;
    cfe0:	f8cd 800c 	str.w	r8, [sp, #12]
	data.len = len;
    cfe4:	f8ad 7010 	strh.w	r7, [sp, #16]
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
    cfe8:	f013 ff2e 	bl	20e48 <bt_gatt_foreach_attr>
	if (data.err) {
    cfec:	f89d 4014 	ldrb.w	r4, [sp, #20]
    cff0:	b154      	cbz	r4, d008 <att_prepare_write_req+0x84>
	if (!req) {
    cff2:	4623      	mov	r3, r4
    cff4:	4632      	mov	r2, r6
    cff6:	2116      	movs	r1, #22
    cff8:	4628      	mov	r0, r5
    cffa:	f7ff fe15 	bl	cc28 <send_err_rsp.part.0>
		return 0;
    cffe:	2400      	movs	r4, #0
}
    d000:	4620      	mov	r0, r4
    d002:	b007      	add	sp, #28
    d004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	net_buf_put(&chan->att->prep_queue, data.buf);
    d008:	6828      	ldr	r0, [r5, #0]
    d00a:	9902      	ldr	r1, [sp, #8]
    d00c:	3024      	adds	r0, #36	; 0x24
    d00e:	f015 fa80 	bl	22512 <net_buf_put>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_PREPARE_WRITE_RSP, 0);
    d012:	4622      	mov	r2, r4
    d014:	2117      	movs	r1, #23
    d016:	4658      	mov	r0, fp
    d018:	f7ff ff3a 	bl	ce90 <bt_att_create_pdu>
    d01c:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    d01e:	b1e0      	cbz	r0, d05a <att_prepare_write_req+0xd6>
	rsp = net_buf_add(data.buf, sizeof(*rsp));
    d020:	2104      	movs	r1, #4
    d022:	3008      	adds	r0, #8
    d024:	f015 fab4 	bl	22590 <net_buf_simple_add>
    d028:	4606      	mov	r6, r0
	rsp->handle = sys_cpu_to_le16(handle);
    d02a:	f8a0 a000 	strh.w	sl, [r0]
	rsp->offset = sys_cpu_to_le16(offset);
    d02e:	f8a0 9002 	strh.w	r9, [r0, #2]
	net_buf_add(data.buf, len);
    d032:	9802      	ldr	r0, [sp, #8]
    d034:	4639      	mov	r1, r7
    d036:	3008      	adds	r0, #8
    d038:	f015 faaa 	bl	22590 <net_buf_simple_add>
	memcpy(rsp->value, value, len);
    d03c:	463a      	mov	r2, r7
    d03e:	4641      	mov	r1, r8
    d040:	1d30      	adds	r0, r6, #4
    d042:	f012 ff14 	bl	1fe6e <memcpy>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    d046:	4a07      	ldr	r2, [pc, #28]	; (d064 <att_prepare_write_req+0xe0>)
    d048:	9902      	ldr	r1, [sp, #8]
    d04a:	4628      	mov	r0, r5
    d04c:	f014 f8e7 	bl	2121e <bt_att_chan_send_rsp>
	return 0;
    d050:	e7d6      	b.n	d000 <att_prepare_write_req+0x7c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    d052:	2412      	movs	r4, #18
    d054:	e7d4      	b.n	d000 <att_prepare_write_req+0x7c>
		return BT_ATT_ERR_INVALID_HANDLE;
    d056:	2401      	movs	r4, #1
    d058:	e7d2      	b.n	d000 <att_prepare_write_req+0x7c>
		return BT_ATT_ERR_UNLIKELY;
    d05a:	240e      	movs	r4, #14
    d05c:	e7d0      	b.n	d000 <att_prepare_write_req+0x7c>
    d05e:	bf00      	nop
    d060:	0000ca31 	.word	0x0000ca31
    d064:	0002104b 	.word	0x0002104b

0000d068 <att_read_group_req>:
{
    d068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    d06c:	7b0c      	ldrb	r4, [r1, #12]
    d06e:	3c04      	subs	r4, #4
    d070:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    d072:	2c02      	cmp	r4, #2
{
    d074:	4605      	mov	r5, r0
    d076:	b08c      	sub	sp, #48	; 0x30
    d078:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    d07a:	d001      	beq.n	d080 <att_read_group_req+0x18>
    d07c:	2c10      	cmp	r4, #16
    d07e:	d16f      	bne.n	d160 <att_read_group_req+0xf8>
	req = net_buf_pull_mem(buf, sizeof(*req));
    d080:	2104      	movs	r1, #4
    d082:	3008      	adds	r0, #8
    d084:	f015 fac1 	bl	2260a <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    d088:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
    d08c:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    d08e:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    d090:	1d01      	adds	r1, r0, #4
    d092:	4622      	mov	r2, r4
    d094:	4640      	mov	r0, r8
    d096:	f012 ffe3 	bl	20060 <bt_uuid_create>
    d09a:	2800      	cmp	r0, #0
    d09c:	d062      	beq.n	d164 <att_read_group_req+0xfc>
	if (!start || !end) {
    d09e:	2e00      	cmp	r6, #0
    d0a0:	d03a      	beq.n	d118 <att_read_group_req+0xb0>
    d0a2:	2400      	movs	r4, #0
    d0a4:	2f00      	cmp	r7, #0
    d0a6:	d036      	beq.n	d116 <att_read_group_req+0xae>
	if (start > end) {
    d0a8:	42be      	cmp	r6, r7
    d0aa:	d835      	bhi.n	d118 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    d0ac:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    d0b0:	a901      	add	r1, sp, #4
    d0b2:	4640      	mov	r0, r8
    d0b4:	f88d 4004 	strb.w	r4, [sp, #4]
    d0b8:	f8ad 3006 	strh.w	r3, [sp, #6]
    d0bc:	f012 ffa6 	bl	2000c <bt_uuid_cmp>
    d0c0:	2800      	cmp	r0, #0
    d0c2:	d134      	bne.n	d12e <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
    d0c4:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    d0c6:	2214      	movs	r2, #20
    d0c8:	2100      	movs	r1, #0
    d0ca:	a807      	add	r0, sp, #28
    d0cc:	f012 fefa 	bl	1fec4 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    d0d0:	2201      	movs	r2, #1
    d0d2:	2111      	movs	r1, #17
    d0d4:	4620      	mov	r0, r4
    d0d6:	f7ff fedb 	bl	ce90 <bt_att_create_pdu>
    d0da:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
    d0dc:	2800      	cmp	r0, #0
    d0de:	d041      	beq.n	d164 <att_read_group_req+0xfc>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    d0e0:	2101      	movs	r1, #1
    d0e2:	3008      	adds	r0, #8
	data.uuid = uuid;
    d0e4:	e9cd 5807 	strd	r5, r8, [sp, #28]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    d0e8:	f015 fa52 	bl	22590 <net_buf_simple_add>
	data.rsp->len = 0U;
    d0ec:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    d0f0:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    d0f2:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
    d0f4:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    d0f8:	4a1b      	ldr	r2, [pc, #108]	; (d168 <att_read_group_req+0x100>)
	data.group = NULL;
    d0fa:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    d0fe:	4639      	mov	r1, r7
    d100:	4630      	mov	r0, r6
    d102:	f013 fea1 	bl	20e48 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    d106:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d108:	781c      	ldrb	r4, [r3, #0]
    d10a:	bb1c      	cbnz	r4, d154 <att_read_group_req+0xec>
		net_buf_unref(data.buf);
    d10c:	9809      	ldr	r0, [sp, #36]	; 0x24
    d10e:	f00e fce3 	bl	1bad8 <net_buf_unref>
	if (!req) {
    d112:	230a      	movs	r3, #10
    d114:	e018      	b.n	d148 <att_read_group_req+0xe0>
			*err = 0U;
    d116:	463e      	mov	r6, r7
	if (!req) {
    d118:	2301      	movs	r3, #1
    d11a:	4632      	mov	r2, r6
    d11c:	2110      	movs	r1, #16
    d11e:	4628      	mov	r0, r5
    d120:	f7ff fd82 	bl	cc28 <send_err_rsp.part.0>
		return 0;
    d124:	2400      	movs	r4, #0
}
    d126:	4620      	mov	r0, r4
    d128:	b00c      	add	sp, #48	; 0x30
    d12a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    d12e:	f642 0301 	movw	r3, #10241	; 0x2801
    d132:	a907      	add	r1, sp, #28
    d134:	4640      	mov	r0, r8
    d136:	f88d 401c 	strb.w	r4, [sp, #28]
    d13a:	f8ad 301e 	strh.w	r3, [sp, #30]
    d13e:	f012 ff65 	bl	2000c <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    d142:	2800      	cmp	r0, #0
    d144:	d0be      	beq.n	d0c4 <att_read_group_req+0x5c>
	if (!req) {
    d146:	2310      	movs	r3, #16
    d148:	4632      	mov	r2, r6
    d14a:	2110      	movs	r1, #16
    d14c:	4628      	mov	r0, r5
    d14e:	f7ff fd6b 	bl	cc28 <send_err_rsp.part.0>
		return 0;
    d152:	e7e8      	b.n	d126 <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    d154:	4a05      	ldr	r2, [pc, #20]	; (d16c <att_read_group_req+0x104>)
    d156:	9909      	ldr	r1, [sp, #36]	; 0x24
    d158:	4628      	mov	r0, r5
    d15a:	f014 f860 	bl	2121e <bt_att_chan_send_rsp>
	return 0;
    d15e:	e7e1      	b.n	d124 <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
    d160:	2404      	movs	r4, #4
    d162:	e7e0      	b.n	d126 <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
    d164:	240e      	movs	r4, #14
    d166:	e7de      	b.n	d126 <att_read_group_req+0xbe>
    d168:	0000c5a9 	.word	0x0000c5a9
    d16c:	0002104b 	.word	0x0002104b

0000d170 <att_read_mult_req>:
{
    d170:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    d174:	6886      	ldr	r6, [r0, #8]
{
    d176:	b087      	sub	sp, #28
	(void)memset(&data, 0, sizeof(data));
    d178:	2214      	movs	r2, #20
{
    d17a:	4604      	mov	r4, r0
    d17c:	460d      	mov	r5, r1
	(void)memset(&data, 0, sizeof(data));
    d17e:	a801      	add	r0, sp, #4
    d180:	2100      	movs	r1, #0
    d182:	f012 fe9f 	bl	1fec4 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    d186:	2200      	movs	r2, #0
    d188:	210f      	movs	r1, #15
    d18a:	4630      	mov	r0, r6
    d18c:	f7ff fe80 	bl	ce90 <bt_att_create_pdu>
    d190:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    d192:	b360      	cbz	r0, d1ee <att_read_mult_req+0x7e>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    d194:	f8df 9060 	ldr.w	r9, [pc, #96]	; d1f8 <att_read_mult_req+0x88>
	data.chan = chan;
    d198:	9401      	str	r4, [sp, #4]
		handle = net_buf_pull_le16(buf);
    d19a:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    d19e:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
    d1a2:	89ab      	ldrh	r3, [r5, #12]
    d1a4:	2b01      	cmp	r3, #1
    d1a6:	d805      	bhi.n	d1b4 <att_read_mult_req+0x44>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    d1a8:	4a12      	ldr	r2, [pc, #72]	; (d1f4 <att_read_mult_req+0x84>)
    d1aa:	9903      	ldr	r1, [sp, #12]
    d1ac:	4620      	mov	r0, r4
    d1ae:	f014 f836 	bl	2121e <bt_att_chan_send_rsp>
    d1b2:	e018      	b.n	d1e6 <att_read_mult_req+0x76>
		handle = net_buf_pull_le16(buf);
    d1b4:	4638      	mov	r0, r7
    d1b6:	f015 fa38 	bl	2262a <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    d1ba:	ab01      	add	r3, sp, #4
    d1bc:	464a      	mov	r2, r9
    d1be:	4601      	mov	r1, r0
		handle = net_buf_pull_le16(buf);
    d1c0:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    d1c2:	f88d 8014 	strb.w	r8, [sp, #20]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    d1c6:	f013 fe3f 	bl	20e48 <bt_gatt_foreach_attr>
		if (data.err) {
    d1ca:	f89d 3014 	ldrb.w	r3, [sp, #20]
    d1ce:	2b00      	cmp	r3, #0
    d1d0:	d0e7      	beq.n	d1a2 <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
    d1d2:	9803      	ldr	r0, [sp, #12]
    d1d4:	f00e fc80 	bl	1bad8 <net_buf_unref>
	if (!req) {
    d1d8:	f89d 3014 	ldrb.w	r3, [sp, #20]
    d1dc:	4632      	mov	r2, r6
    d1de:	210e      	movs	r1, #14
    d1e0:	4620      	mov	r0, r4
    d1e2:	f7ff fd21 	bl	cc28 <send_err_rsp.part.0>
	return 0;
    d1e6:	2000      	movs	r0, #0
}
    d1e8:	b007      	add	sp, #28
    d1ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
    d1ee:	200e      	movs	r0, #14
    d1f0:	e7fa      	b.n	d1e8 <att_read_mult_req+0x78>
    d1f2:	bf00      	nop
    d1f4:	0002104b 	.word	0x0002104b
    d1f8:	000210c3 	.word	0x000210c3

0000d1fc <att_read_rsp>:
{
    d1fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    d200:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
    d204:	b086      	sub	sp, #24
    d206:	4605      	mov	r5, r0
    d208:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
    d20a:	4640      	mov	r0, r8
    d20c:	2101      	movs	r1, #1
{
    d20e:	4614      	mov	r4, r2
    d210:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
    d212:	f014 fce0 	bl	21bd6 <bt_gatt_change_aware>
    d216:	b390      	cbz	r0, d27e <att_read_rsp+0x82>
	if (!handle) {
    d218:	b39e      	cbz	r6, d282 <att_read_rsp+0x86>
	(void)memset(&data, 0, sizeof(data));
    d21a:	2214      	movs	r2, #20
    d21c:	2100      	movs	r1, #0
    d21e:	a801      	add	r0, sp, #4
    d220:	f012 fe50 	bl	1fec4 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    d224:	2200      	movs	r2, #0
    d226:	4621      	mov	r1, r4
    d228:	4640      	mov	r0, r8
    d22a:	f7ff fe31 	bl	ce90 <bt_att_create_pdu>
    d22e:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    d230:	b348      	cbz	r0, d286 <att_read_rsp+0x8a>
	data.offset = offset;
    d232:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    d236:	f8ad 3008 	strh.w	r3, [sp, #8]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    d23a:	2301      	movs	r3, #1
    d23c:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    d240:	4a12      	ldr	r2, [pc, #72]	; (d28c <att_read_rsp+0x90>)
	data.chan = chan;
    d242:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    d244:	ab01      	add	r3, sp, #4
    d246:	4631      	mov	r1, r6
    d248:	4630      	mov	r0, r6
    d24a:	f013 fdfd 	bl	20e48 <bt_gatt_foreach_attr>
	if (data.err) {
    d24e:	f89d 4014 	ldrb.w	r4, [sp, #20]
    d252:	b174      	cbz	r4, d272 <att_read_rsp+0x76>
		net_buf_unref(data.buf);
    d254:	9803      	ldr	r0, [sp, #12]
    d256:	f00e fc3f 	bl	1bad8 <net_buf_unref>
	if (!req) {
    d25a:	f89d 3014 	ldrb.w	r3, [sp, #20]
    d25e:	4632      	mov	r2, r6
    d260:	4639      	mov	r1, r7
    d262:	4628      	mov	r0, r5
    d264:	f7ff fce0 	bl	cc28 <send_err_rsp.part.0>
		return 0;
    d268:	2400      	movs	r4, #0
}
    d26a:	4620      	mov	r0, r4
    d26c:	b006      	add	sp, #24
    d26e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    d272:	4a07      	ldr	r2, [pc, #28]	; (d290 <att_read_rsp+0x94>)
    d274:	9903      	ldr	r1, [sp, #12]
    d276:	4628      	mov	r0, r5
    d278:	f013 ffd1 	bl	2121e <bt_att_chan_send_rsp>
	return 0;
    d27c:	e7f5      	b.n	d26a <att_read_rsp+0x6e>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    d27e:	2412      	movs	r4, #18
    d280:	e7f3      	b.n	d26a <att_read_rsp+0x6e>
		return BT_ATT_ERR_INVALID_HANDLE;
    d282:	2401      	movs	r4, #1
    d284:	e7f1      	b.n	d26a <att_read_rsp+0x6e>
		return BT_ATT_ERR_UNLIKELY;
    d286:	240e      	movs	r4, #14
    d288:	e7ef      	b.n	d26a <att_read_rsp+0x6e>
    d28a:	bf00      	nop
    d28c:	000210c3 	.word	0x000210c3
    d290:	0002104b 	.word	0x0002104b

0000d294 <att_read_type_req>:
{
    d294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    d298:	7b0c      	ldrb	r4, [r1, #12]
    d29a:	3c04      	subs	r4, #4
    d29c:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    d29e:	2c02      	cmp	r4, #2
{
    d2a0:	4605      	mov	r5, r0
    d2a2:	b08c      	sub	sp, #48	; 0x30
    d2a4:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    d2a6:	d001      	beq.n	d2ac <att_read_type_req+0x18>
    d2a8:	2c10      	cmp	r4, #16
    d2aa:	d150      	bne.n	d34e <att_read_type_req+0xba>
	req = net_buf_pull_mem(buf, sizeof(*req));
    d2ac:	2104      	movs	r1, #4
    d2ae:	3008      	adds	r0, #8
    d2b0:	f015 f9ab 	bl	2260a <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    d2b4:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
    d2b8:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    d2ba:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    d2bc:	1d01      	adds	r1, r0, #4
    d2be:	4622      	mov	r2, r4
    d2c0:	4640      	mov	r0, r8
    d2c2:	f012 fecd 	bl	20060 <bt_uuid_create>
    d2c6:	b188      	cbz	r0, d2ec <att_read_type_req+0x58>
	if (!start || !end) {
    d2c8:	b19e      	cbz	r6, d2f2 <att_read_type_req+0x5e>
    d2ca:	b18f      	cbz	r7, d2f0 <att_read_type_req+0x5c>
	if (start > end) {
    d2cc:	42b7      	cmp	r7, r6
    d2ce:	d310      	bcc.n	d2f2 <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
    d2d0:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
    d2d2:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    d2d4:	2100      	movs	r1, #0
    d2d6:	eb0d 0002 	add.w	r0, sp, r2
    d2da:	f012 fdf3 	bl	1fec4 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    d2de:	2201      	movs	r2, #1
    d2e0:	2109      	movs	r1, #9
    d2e2:	4620      	mov	r0, r4
    d2e4:	f7ff fdd4 	bl	ce90 <bt_att_create_pdu>
    d2e8:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
    d2ea:	b968      	cbnz	r0, d308 <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
    d2ec:	240e      	movs	r4, #14
    d2ee:	e007      	b.n	d300 <att_read_type_req+0x6c>
			*err = 0U;
    d2f0:	463e      	mov	r6, r7
	if (!req) {
    d2f2:	2301      	movs	r3, #1
    d2f4:	4632      	mov	r2, r6
    d2f6:	2108      	movs	r1, #8
    d2f8:	4628      	mov	r0, r5
    d2fa:	f7ff fc95 	bl	cc28 <send_err_rsp.part.0>
		return 0;
    d2fe:	2400      	movs	r4, #0
}
    d300:	4620      	mov	r0, r4
    d302:	b00c      	add	sp, #48	; 0x30
    d304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    d308:	2101      	movs	r1, #1
    d30a:	3008      	adds	r0, #8
	data.uuid = uuid;
    d30c:	e9cd 5806 	strd	r5, r8, [sp, #24]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    d310:	f015 f93e 	bl	22590 <net_buf_simple_add>
	data.rsp->len = 0U;
    d314:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    d318:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    d31a:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    d31c:	4a0d      	ldr	r2, [pc, #52]	; (d354 <att_read_type_req+0xc0>)
	data.rsp->len = 0U;
    d31e:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    d322:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    d324:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    d328:	4630      	mov	r0, r6
    d32a:	ab06      	add	r3, sp, #24
    d32c:	f013 fd8c 	bl	20e48 <bt_gatt_foreach_attr>
	if (data.err) {
    d330:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
    d334:	b12c      	cbz	r4, d342 <att_read_type_req+0xae>
		net_buf_unref(data.buf);
    d336:	9808      	ldr	r0, [sp, #32]
    d338:	f00e fbce 	bl	1bad8 <net_buf_unref>
	if (!req) {
    d33c:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    d340:	e7d8      	b.n	d2f4 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    d342:	4a05      	ldr	r2, [pc, #20]	; (d358 <att_read_type_req+0xc4>)
    d344:	9908      	ldr	r1, [sp, #32]
    d346:	4628      	mov	r0, r5
    d348:	f013 ff69 	bl	2121e <bt_att_chan_send_rsp>
	return 0;
    d34c:	e7d8      	b.n	d300 <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
    d34e:	2404      	movs	r4, #4
    d350:	e7d6      	b.n	d300 <att_read_type_req+0x6c>
    d352:	bf00      	nop
    d354:	0000c651 	.word	0x0000c651
    d358:	0002104b 	.word	0x0002104b

0000d35c <att_find_type_req>:
{
    d35c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d360:	4688      	mov	r8, r1
    d362:	b086      	sub	sp, #24
    d364:	4605      	mov	r5, r0
	req = net_buf_pull_mem(buf, sizeof(*req));
    d366:	2106      	movs	r1, #6
    d368:	f108 0008 	add.w	r0, r8, #8
    d36c:	f015 f94d 	bl	2260a <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
    d370:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
    d372:	b317      	cbz	r7, d3ba <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
    d374:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
    d378:	f1b9 0f00 	cmp.w	r9, #0
    d37c:	d01c      	beq.n	d3b8 <att_find_type_req+0x5c>
	if (start > end) {
    d37e:	454f      	cmp	r7, r9
    d380:	d81b      	bhi.n	d3ba <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
    d382:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    d384:	f8ad 3002 	strh.w	r3, [sp, #2]
    d388:	2400      	movs	r4, #0
    d38a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    d38e:	a901      	add	r1, sp, #4
    d390:	4668      	mov	r0, sp
	value = buf->data;
    d392:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    d396:	f88d 4000 	strb.w	r4, [sp]
    d39a:	f88d 4004 	strb.w	r4, [sp, #4]
    d39e:	f8ad 3006 	strh.w	r3, [sp, #6]
    d3a2:	f012 fe33 	bl	2000c <bt_uuid_cmp>
    d3a6:	4606      	mov	r6, r0
    d3a8:	b190      	cbz	r0, d3d0 <att_find_type_req+0x74>
	if (!req) {
    d3aa:	230a      	movs	r3, #10
    d3ac:	463a      	mov	r2, r7
    d3ae:	2106      	movs	r1, #6
    d3b0:	4628      	mov	r0, r5
    d3b2:	f7ff fc39 	bl	cc28 <send_err_rsp.part.0>
		return 0;
    d3b6:	e007      	b.n	d3c8 <att_find_type_req+0x6c>
			*err = 0U;
    d3b8:	464f      	mov	r7, r9
	if (!req) {
    d3ba:	2301      	movs	r3, #1
    d3bc:	463a      	mov	r2, r7
    d3be:	2106      	movs	r1, #6
    d3c0:	4628      	mov	r0, r5
    d3c2:	f7ff fc31 	bl	cc28 <send_err_rsp.part.0>
		return 0;
    d3c6:	2400      	movs	r4, #0
}
    d3c8:	4620      	mov	r0, r4
    d3ca:	b006      	add	sp, #24
    d3cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    d3d0:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
    d3d4:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    d3d8:	4601      	mov	r1, r0
    d3da:	2214      	movs	r2, #20
    d3dc:	a801      	add	r0, sp, #4
    d3de:	f012 fd71 	bl	1fec4 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    d3e2:	4632      	mov	r2, r6
    d3e4:	2107      	movs	r1, #7
    d3e6:	4640      	mov	r0, r8
    d3e8:	f7ff fd52 	bl	ce90 <bt_att_create_pdu>
    d3ec:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    d3ee:	b1e0      	cbz	r0, d42a <att_find_type_req+0xce>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    d3f0:	230a      	movs	r3, #10
    d3f2:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    d3f6:	4a0e      	ldr	r2, [pc, #56]	; (d430 <att_find_type_req+0xd4>)
	data.value_len = value_len;
    d3f8:	f88d 4014 	strb.w	r4, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    d3fc:	ab01      	add	r3, sp, #4
    d3fe:	4649      	mov	r1, r9
    d400:	4638      	mov	r0, r7
	data.value = value;
    d402:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
    d406:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    d408:	f013 fd1e 	bl	20e48 <bt_gatt_foreach_attr>
	if (data.err) {
    d40c:	f89d 4015 	ldrb.w	r4, [sp, #21]
    d410:	b12c      	cbz	r4, d41e <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
    d412:	9802      	ldr	r0, [sp, #8]
    d414:	f00e fb60 	bl	1bad8 <net_buf_unref>
	if (!req) {
    d418:	f89d 3015 	ldrb.w	r3, [sp, #21]
    d41c:	e7ce      	b.n	d3bc <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    d41e:	4a05      	ldr	r2, [pc, #20]	; (d434 <att_find_type_req+0xd8>)
    d420:	9902      	ldr	r1, [sp, #8]
    d422:	4628      	mov	r0, r5
    d424:	f013 fefb 	bl	2121e <bt_att_chan_send_rsp>
	return 0;
    d428:	e7ce      	b.n	d3c8 <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
    d42a:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    d42c:	e7cc      	b.n	d3c8 <att_find_type_req+0x6c>
    d42e:	bf00      	nop
    d430:	0000c6f5 	.word	0x0000c6f5
    d434:	0002104b 	.word	0x0002104b

0000d438 <att_find_info_req>:
{
    d438:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
    d43a:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
    d43c:	881e      	ldrh	r6, [r3, #0]
{
    d43e:	b085      	sub	sp, #20
    d440:	4605      	mov	r5, r0
	if (!start || !end) {
    d442:	b19e      	cbz	r6, d46c <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
    d444:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
    d446:	b184      	cbz	r4, d46a <att_find_info_req+0x32>
	if (start > end) {
    d448:	42b4      	cmp	r4, r6
    d44a:	d30f      	bcc.n	d46c <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
    d44c:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
    d44e:	2210      	movs	r2, #16
    d450:	2100      	movs	r1, #0
    d452:	4668      	mov	r0, sp
    d454:	f012 fd36 	bl	1fec4 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    d458:	2200      	movs	r2, #0
    d45a:	2105      	movs	r1, #5
    d45c:	4638      	mov	r0, r7
    d45e:	f7ff fd17 	bl	ce90 <bt_att_create_pdu>
    d462:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
    d464:	b958      	cbnz	r0, d47e <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
    d466:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
    d468:	e007      	b.n	d47a <att_find_info_req+0x42>
			*err = 0U;
    d46a:	4626      	mov	r6, r4
	if (!req) {
    d46c:	2301      	movs	r3, #1
    d46e:	4632      	mov	r2, r6
    d470:	2104      	movs	r1, #4
    d472:	4628      	mov	r0, r5
    d474:	f7ff fbd8 	bl	cc28 <send_err_rsp.part.0>
	return 0;
    d478:	2000      	movs	r0, #0
}
    d47a:	b005      	add	sp, #20
    d47c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    d47e:	4621      	mov	r1, r4
    d480:	4a09      	ldr	r2, [pc, #36]	; (d4a8 <att_find_info_req+0x70>)
	data.chan = chan;
    d482:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    d484:	466b      	mov	r3, sp
    d486:	4630      	mov	r0, r6
    d488:	f013 fcde 	bl	20e48 <bt_gatt_foreach_attr>
	if (!data.rsp) {
    d48c:	9c02      	ldr	r4, [sp, #8]
    d48e:	b924      	cbnz	r4, d49a <att_find_info_req+0x62>
		net_buf_unref(data.buf);
    d490:	9801      	ldr	r0, [sp, #4]
    d492:	f00e fb21 	bl	1bad8 <net_buf_unref>
	if (!req) {
    d496:	230a      	movs	r3, #10
    d498:	e7e9      	b.n	d46e <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    d49a:	4a04      	ldr	r2, [pc, #16]	; (d4ac <att_find_info_req+0x74>)
    d49c:	9901      	ldr	r1, [sp, #4]
    d49e:	4628      	mov	r0, r5
    d4a0:	f013 febd 	bl	2121e <bt_att_chan_send_rsp>
    d4a4:	e7e8      	b.n	d478 <att_find_info_req+0x40>
    d4a6:	bf00      	nop
    d4a8:	00020e5f 	.word	0x00020e5f
    d4ac:	0002104b 	.word	0x0002104b

0000d4b0 <att_mtu_req>:
{
    d4b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
    d4b2:	6803      	ldr	r3, [r0, #0]
{
    d4b4:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
    d4b6:	6818      	ldr	r0, [r3, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    d4b8:	f3bf 8f5b 	dmb	ish
    d4bc:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
    d4c0:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
    d4c4:	f3c3 04c0 	ubfx	r4, r3, #3, #1
    d4c8:	071b      	lsls	r3, r3, #28
    d4ca:	d41f      	bmi.n	d50c <att_mtu_req+0x5c>
	mtu_client = sys_le16_to_cpu(req->mtu);
    d4cc:	688b      	ldr	r3, [r1, #8]
    d4ce:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    d4d0:	2e16      	cmp	r6, #22
    d4d2:	d91d      	bls.n	d510 <att_mtu_req+0x60>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
    d4d4:	2202      	movs	r2, #2
    d4d6:	2103      	movs	r1, #3
    d4d8:	f7ff fcda 	bl	ce90 <bt_att_create_pdu>
	if (!pdu) {
    d4dc:	4607      	mov	r7, r0
    d4de:	b1c8      	cbz	r0, d514 <att_mtu_req+0x64>
	rsp = net_buf_add(pdu, sizeof(*rsp));
    d4e0:	2102      	movs	r1, #2
    d4e2:	3008      	adds	r0, #8
    d4e4:	f015 f854 	bl	22590 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
    d4e8:	f06f 0308 	mvn.w	r3, #8
    d4ec:	7003      	strb	r3, [r0, #0]
    d4ee:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
    d4f0:	4a09      	ldr	r2, [pc, #36]	; (d518 <att_mtu_req+0x68>)
    d4f2:	4628      	mov	r0, r5
    d4f4:	4639      	mov	r1, r7
    d4f6:	f013 fe92 	bl	2121e <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
    d4fa:	2ef7      	cmp	r6, #247	; 0xf7
    d4fc:	bf28      	it	cs
    d4fe:	26f7      	movcs	r6, #247	; 0xf7
    d500:	f8a5 605a 	strh.w	r6, [r5, #90]	; 0x5a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
    d504:	f8a5 6066 	strh.w	r6, [r5, #102]	; 0x66
	return 0;
    d508:	4620      	mov	r0, r4
}
    d50a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
    d50c:	2006      	movs	r0, #6
    d50e:	e7fc      	b.n	d50a <att_mtu_req+0x5a>
		return BT_ATT_ERR_INVALID_PDU;
    d510:	2004      	movs	r0, #4
    d512:	e7fa      	b.n	d50a <att_mtu_req+0x5a>
		return BT_ATT_ERR_UNLIKELY;
    d514:	200e      	movs	r0, #14
    d516:	e7f8      	b.n	d50a <att_mtu_req+0x5a>
    d518:	0002104b 	.word	0x0002104b

0000d51c <bt_att_req_alloc>:

	return mtu;
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
    d51c:	b513      	push	{r0, r1, r4, lr}
    d51e:	4602      	mov	r2, r0
    d520:	460b      	mov	r3, r1
	struct bt_att_req *req = NULL;

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    d522:	4808      	ldr	r0, [pc, #32]	; (d544 <bt_att_req_alloc+0x28>)
    d524:	a901      	add	r1, sp, #4
	struct bt_att_req *req = NULL;
    d526:	2400      	movs	r4, #0
    d528:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    d52a:	f00f fc6d 	bl	1ce08 <k_mem_slab_alloc>
    d52e:	4601      	mov	r1, r0
    d530:	b930      	cbnz	r0, d540 <bt_att_req_alloc+0x24>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
    d532:	9801      	ldr	r0, [sp, #4]
    d534:	221c      	movs	r2, #28
    d536:	f012 fcc5 	bl	1fec4 <memset>

	return req;
    d53a:	9801      	ldr	r0, [sp, #4]
}
    d53c:	b002      	add	sp, #8
    d53e:	bd10      	pop	{r4, pc}
		return NULL;
    d540:	4620      	mov	r0, r4
    d542:	e7fb      	b.n	d53c <bt_att_req_alloc+0x20>
    d544:	200007f0 	.word	0x200007f0

0000d548 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
    d548:	b507      	push	{r0, r1, r2, lr}
    d54a:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	k_mem_slab_free(&req_slab, (void **)&req);
    d54c:	a901      	add	r1, sp, #4
    d54e:	4803      	ldr	r0, [pc, #12]	; (d55c <bt_att_req_free+0x14>)
    d550:	f00f fc8c 	bl	1ce6c <k_mem_slab_free>
}
    d554:	b003      	add	sp, #12
    d556:	f85d fb04 	ldr.w	pc, [sp], #4
    d55a:	bf00      	nop
    d55c:	200007f0 	.word	0x200007f0

0000d560 <att_handle_rsp>:
{
    d560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d564:	4605      	mov	r5, r0
    d566:	b085      	sub	sp, #20
	k_delayed_work_cancel(&chan->timeout_work);
    d568:	30e8      	adds	r0, #232	; 0xe8
{
    d56a:	4689      	mov	r9, r1
    d56c:	4692      	mov	sl, r2
    d56e:	4698      	mov	r8, r3
	k_delayed_work_cancel(&chan->timeout_work);
    d570:	f015 fdc6 	bl	23100 <k_delayed_work_cancel>
	if (!chan->req) {
    d574:	f8d5 40cc 	ldr.w	r4, [r5, #204]	; 0xcc
    d578:	bb64      	cbnz	r4, d5d4 <att_handle_rsp+0x74>
    d57a:	4932      	ldr	r1, [pc, #200]	; (d644 <att_handle_rsp+0xe4>)
    d57c:	4b32      	ldr	r3, [pc, #200]	; (d648 <att_handle_rsp+0xe8>)
		BT_WARN("No pending ATT request");
    d57e:	4833      	ldr	r0, [pc, #204]	; (d64c <att_handle_rsp+0xec>)
    d580:	1ac9      	subs	r1, r1, r3
    d582:	08c9      	lsrs	r1, r1, #3
    d584:	0189      	lsls	r1, r1, #6
    d586:	f041 0102 	orr.w	r1, r1, #2
    d58a:	f010 ff9e 	bl	1e4ca <log_0>
	att_process(chan->att);
    d58e:	f8d5 b000 	ldr.w	fp, [r5]
	node = sys_slist_get(&att->reqs);
    d592:	f10b 0004 	add.w	r0, fp, #4
    d596:	f013 fbce 	bl	20d36 <sys_slist_get>
	if (!node) {
    d59a:	4607      	mov	r7, r0
    d59c:	2800      	cmp	r0, #0
    d59e:	d039      	beq.n	d614 <att_handle_rsp+0xb4>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    d5a0:	f8db 203c 	ldr.w	r2, [fp, #60]	; 0x3c
    d5a4:	b15a      	cbz	r2, d5be <att_handle_rsp+0x5e>
    d5a6:	f5b2 709a 	subs.w	r0, r2, #308	; 0x134
    d5aa:	d008      	beq.n	d5be <att_handle_rsp+0x5e>
    d5ac:	6816      	ldr	r6, [r2, #0]
    d5ae:	b10e      	cbz	r6, d5b4 <att_handle_rsp+0x54>
    d5b0:	f5a6 769a 	sub.w	r6, r6, #308	; 0x134
		if (!chan->req) {
    d5b4:	f8d0 20cc 	ldr.w	r2, [r0, #204]	; 0xcc
    d5b8:	b33a      	cbz	r2, d60a <att_handle_rsp+0xaa>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    d5ba:	2e00      	cmp	r6, #0
    d5bc:	d137      	bne.n	d62e <att_handle_rsp+0xce>
Z_GENLIST_PREPEND(slist, snode)
    d5be:	f8db 2004 	ldr.w	r2, [fp, #4]
	parent->next = child;
    d5c2:	603a      	str	r2, [r7, #0]
Z_GENLIST_PREPEND(slist, snode)
    d5c4:	f8db 2008 	ldr.w	r2, [fp, #8]
	list->head = node;
    d5c8:	f8cb 7004 	str.w	r7, [fp, #4]
Z_GENLIST_PREPEND(slist, snode)
    d5cc:	bb12      	cbnz	r2, d614 <att_handle_rsp+0xb4>
	list->tail = node;
    d5ce:	f8cb 7008 	str.w	r7, [fp, #8]
}
    d5d2:	e01f      	b.n	d614 <att_handle_rsp+0xb4>
	if (chan->req == &cancel) {
    d5d4:	4b1e      	ldr	r3, [pc, #120]	; (d650 <att_handle_rsp+0xf0>)
    d5d6:	429c      	cmp	r4, r3
    d5d8:	d103      	bne.n	d5e2 <att_handle_rsp+0x82>
		chan->req = NULL;
    d5da:	2400      	movs	r4, #0
    d5dc:	f8c5 40cc 	str.w	r4, [r5, #204]	; 0xcc
		goto process;
    d5e0:	e7d5      	b.n	d58e <att_handle_rsp+0x2e>
	if (chan->req->buf) {
    d5e2:	6920      	ldr	r0, [r4, #16]
    d5e4:	b128      	cbz	r0, d5f2 <att_handle_rsp+0x92>
		net_buf_unref(chan->req->buf);
    d5e6:	f00e fa77 	bl	1bad8 <net_buf_unref>
		chan->req->buf = NULL;
    d5ea:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
    d5ee:	2200      	movs	r2, #0
    d5f0:	611a      	str	r2, [r3, #16]
	func = chan->req->func;
    d5f2:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
	chan->req->func = NULL;
    d5f6:	2600      	movs	r6, #0
	func = chan->req->func;
    d5f8:	6844      	ldr	r4, [r0, #4]
	params = chan->req->user_data;
    d5fa:	6983      	ldr	r3, [r0, #24]
	chan->req->func = NULL;
    d5fc:	6046      	str	r6, [r0, #4]
	params = chan->req->user_data;
    d5fe:	9303      	str	r3, [sp, #12]
	att_req_destroy(chan->req);
    d600:	f013 febb 	bl	2137a <att_req_destroy>
	chan->req = NULL;
    d604:	f8c5 60cc 	str.w	r6, [r5, #204]	; 0xcc
    d608:	e7c1      	b.n	d58e <att_handle_rsp+0x2e>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
    d60a:	4639      	mov	r1, r7
    d60c:	f013 fdb3 	bl	21176 <bt_att_chan_req_send>
    d610:	2800      	cmp	r0, #0
    d612:	dbd2      	blt.n	d5ba <att_handle_rsp+0x5a>
	if (func) {
    d614:	b13c      	cbz	r4, d626 <att_handle_rsp+0xc6>
		func(chan->att->conn, err, pdu, len, params);
    d616:	9b03      	ldr	r3, [sp, #12]
    d618:	6828      	ldr	r0, [r5, #0]
    d61a:	9300      	str	r3, [sp, #0]
    d61c:	6800      	ldr	r0, [r0, #0]
    d61e:	4653      	mov	r3, sl
    d620:	464a      	mov	r2, r9
    d622:	4641      	mov	r1, r8
    d624:	47a0      	blx	r4
}
    d626:	2000      	movs	r0, #0
    d628:	b005      	add	sp, #20
    d62a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
    d62e:	f516 729a 	adds.w	r2, r6, #308	; 0x134
    d632:	d004      	beq.n	d63e <att_handle_rsp+0xde>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    d634:	f8d6 2134 	ldr.w	r2, [r6, #308]	; 0x134
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    d638:	b10a      	cbz	r2, d63e <att_handle_rsp+0xde>
    d63a:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
	bt_att_func_t func = NULL;
    d63e:	4630      	mov	r0, r6
    d640:	4616      	mov	r6, r2
    d642:	e7b7      	b.n	d5b4 <att_handle_rsp+0x54>
    d644:	000236e8 	.word	0x000236e8
    d648:	000236e8 	.word	0x000236e8
    d64c:	000268f0 	.word	0x000268f0
    d650:	200022a0 	.word	0x200022a0

0000d654 <att_error_rsp>:
	if (!chan->req || chan->req == &cancel) {
    d654:	f8d0 20cc 	ldr.w	r2, [r0, #204]	; 0xcc
{
    d658:	b570      	push	{r4, r5, r6, lr}
    d65a:	4604      	mov	r4, r0
	if (!chan->req || chan->req == &cancel) {
    d65c:	b352      	cbz	r2, d6b4 <att_error_rsp+0x60>
    d65e:	4b1a      	ldr	r3, [pc, #104]	; (d6c8 <att_error_rsp+0x74>)
    d660:	429a      	cmp	r2, r3
    d662:	d027      	beq.n	d6b4 <att_error_rsp+0x60>
	if (chan->req->buf) {
    d664:	6913      	ldr	r3, [r2, #16]
	rsp = (void *)buf->data;
    d666:	6888      	ldr	r0, [r1, #8]
	if (chan->req->buf) {
    d668:	b12b      	cbz	r3, d676 <att_error_rsp+0x22>
	buf->data = buf->__buf + state->offset;
    d66a:	8995      	ldrh	r5, [r2, #12]
    d66c:	6919      	ldr	r1, [r3, #16]
    d66e:	4429      	add	r1, r5
    d670:	6099      	str	r1, [r3, #8]
	buf->len = state->len;
    d672:	89d1      	ldrh	r1, [r2, #14]
    d674:	8199      	strh	r1, [r3, #12]
	if (chan->req->retrying) {
    d676:	7d13      	ldrb	r3, [r2, #20]
	err = rsp->error;
    d678:	78c5      	ldrb	r5, [r0, #3]
	if (chan->req->retrying) {
    d67a:	b9e3      	cbnz	r3, d6b6 <att_error_rsp+0x62>
	switch (err) {
    d67c:	2d05      	cmp	r5, #5
	if (!att_change_security(chan->chan.chan.conn, err)) {
    d67e:	68a0      	ldr	r0, [r4, #8]
	switch (err) {
    d680:	d006      	beq.n	d690 <att_error_rsp+0x3c>
    d682:	2d0f      	cmp	r5, #15
    d684:	d117      	bne.n	d6b6 <att_error_rsp+0x62>
		if (conn->sec_level >= BT_SECURITY_L2)
    d686:	7a43      	ldrb	r3, [r0, #9]
    d688:	2b01      	cmp	r3, #1
    d68a:	d814      	bhi.n	d6b6 <att_error_rsp+0x62>
		sec = BT_SECURITY_L2;
    d68c:	2102      	movs	r1, #2
    d68e:	e007      	b.n	d6a0 <att_error_rsp+0x4c>
		if (conn->sec_level < BT_SECURITY_L2) {
    d690:	7a43      	ldrb	r3, [r0, #9]
    d692:	2b01      	cmp	r3, #1
    d694:	d9fa      	bls.n	d68c <att_error_rsp+0x38>
		} else if (conn->sec_level < BT_SECURITY_L3) {
    d696:	2b02      	cmp	r3, #2
    d698:	d00a      	beq.n	d6b0 <att_error_rsp+0x5c>
		} else if (conn->sec_level < BT_SECURITY_L4) {
    d69a:	2b03      	cmp	r3, #3
    d69c:	d10b      	bne.n	d6b6 <att_error_rsp+0x62>
			sec = BT_SECURITY_L4;
    d69e:	2104      	movs	r1, #4
	return bt_conn_set_security(conn, sec);
    d6a0:	f012 ff54 	bl	2054c <bt_conn_set_security>
	if (!att_change_security(chan->chan.chan.conn, err)) {
    d6a4:	b938      	cbnz	r0, d6b6 <att_error_rsp+0x62>
		chan->req->retrying = true;
    d6a6:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
    d6aa:	2201      	movs	r2, #1
    d6ac:	751a      	strb	r2, [r3, #20]
}
    d6ae:	bd70      	pop	{r4, r5, r6, pc}
			sec = BT_SECURITY_L3;
    d6b0:	2103      	movs	r1, #3
    d6b2:	e7f5      	b.n	d6a0 <att_error_rsp+0x4c>
		err = BT_ATT_ERR_UNLIKELY;
    d6b4:	250e      	movs	r5, #14
	return att_handle_rsp(chan, NULL, 0, err);
    d6b6:	2200      	movs	r2, #0
    d6b8:	462b      	mov	r3, r5
    d6ba:	4620      	mov	r0, r4
    d6bc:	4611      	mov	r1, r2
}
    d6be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return att_handle_rsp(chan, NULL, 0, err);
    d6c2:	f7ff bf4d 	b.w	d560 <att_handle_rsp>
    d6c6:	bf00      	nop
    d6c8:	200022a0 	.word	0x200022a0

0000d6cc <bt_att_encrypt_change>:
{
    d6cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d6d0:	4605      	mov	r5, r0
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
    d6d2:	f1a0 0608 	sub.w	r6, r0, #8
	if (hci_status) {
    d6d6:	460c      	mov	r4, r1
    d6d8:	b139      	cbz	r1, d6ea <bt_att_encrypt_change+0x1e>
		att_handle_rsp(att_chan, NULL, 0, BT_ATT_ERR_AUTHENTICATION);
    d6da:	2200      	movs	r2, #0
    d6dc:	4630      	mov	r0, r6
    d6de:	2305      	movs	r3, #5
}
    d6e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		att_handle_rsp(att_chan, NULL, 0, BT_ATT_ERR_AUTHENTICATION);
    d6e4:	4611      	mov	r1, r2
    d6e6:	f7ff bf3b 	b.w	d560 <att_handle_rsp>
	struct bt_conn *conn = ch->chan.conn;
    d6ea:	6807      	ldr	r7, [r0, #0]
	bt_gatt_encrypt_change(conn);
    d6ec:	4638      	mov	r0, r7
    d6ee:	f000 ffab 	bl	e648 <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
    d6f2:	7a7b      	ldrb	r3, [r7, #9]
    d6f4:	2b01      	cmp	r3, #1
    d6f6:	d018      	beq.n	d72a <bt_att_encrypt_change+0x5e>
	if (!att_chan->req || !att_chan->req->retrying) {
    d6f8:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
    d6fc:	b1ab      	cbz	r3, d72a <bt_att_encrypt_change+0x5e>
    d6fe:	7d1a      	ldrb	r2, [r3, #20]
    d700:	b19a      	cbz	r2, d72a <bt_att_encrypt_change+0x5e>
	bt_att_chan_send_rsp(att_chan, att_chan->req->buf,
    d702:	6919      	ldr	r1, [r3, #16]
	switch (att_op_get_type(buf->data[0])) {
    d704:	688b      	ldr	r3, [r1, #8]
    d706:	7818      	ldrb	r0, [r3, #0]
    d708:	f013 fb58 	bl	20dbc <att_op_get_type>
    d70c:	1e43      	subs	r3, r0, #1
    d70e:	b2db      	uxtb	r3, r3
    d710:	2b04      	cmp	r3, #4
    d712:	bf96      	itet	ls
    d714:	4a06      	ldrls	r2, [pc, #24]	; (d730 <bt_att_encrypt_change+0x64>)
    d716:	4622      	movhi	r2, r4
    d718:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
	bt_att_chan_send_rsp(att_chan, att_chan->req->buf,
    d71c:	4630      	mov	r0, r6
    d71e:	f013 fd7e 	bl	2121e <bt_att_chan_send_rsp>
	att_chan->req->buf = NULL;
    d722:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
    d726:	2200      	movs	r2, #0
    d728:	611a      	str	r2, [r3, #16]
}
    d72a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d72e:	bf00      	nop
    d730:	00023d0c 	.word	0x00023d0c

0000d734 <att_reset>:
{
    d734:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    d736:	9003      	str	r0, [sp, #12]
	while ((buf = net_buf_get(&att->prep_queue, K_NO_WAIT))) {
    d738:	9803      	ldr	r0, [sp, #12]
    d73a:	2200      	movs	r2, #0
    d73c:	2300      	movs	r3, #0
    d73e:	3024      	adds	r0, #36	; 0x24
    d740:	f014 fec3 	bl	224ca <net_buf_get>
    d744:	b980      	cbnz	r0, d768 <att_reset+0x34>
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
    d746:	9803      	ldr	r0, [sp, #12]
    d748:	2200      	movs	r2, #0
    d74a:	2300      	movs	r3, #0
    d74c:	300c      	adds	r0, #12
    d74e:	f014 febc 	bl	224ca <net_buf_get>
    d752:	b960      	cbnz	r0, d76e <att_reset+0x3a>
	att->conn = NULL;
    d754:	9a03      	ldr	r2, [sp, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    d756:	6855      	ldr	r5, [r2, #4]
	att->conn = NULL;
    d758:	6010      	str	r0, [r2, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    d75a:	b95d      	cbnz	r5, d774 <att_reset+0x40>
	k_mem_slab_free(&att_slab, (void **)&att);
    d75c:	4812      	ldr	r0, [pc, #72]	; (d7a8 <att_reset+0x74>)
    d75e:	a903      	add	r1, sp, #12
    d760:	f00f fb84 	bl	1ce6c <k_mem_slab_free>
}
    d764:	b004      	add	sp, #16
    d766:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
    d768:	f00e f9b6 	bl	1bad8 <net_buf_unref>
    d76c:	e7e4      	b.n	d738 <att_reset+0x4>
		net_buf_unref(buf);
    d76e:	f00e f9b3 	bl	1bad8 <net_buf_unref>
    d772:	e7e8      	b.n	d746 <att_reset+0x12>
	return node->next;
    d774:	682c      	ldr	r4, [r5, #0]
    d776:	2c00      	cmp	r4, #0
    d778:	bf38      	it	cc
    d77a:	2400      	movcc	r4, #0
		if (req->func) {
    d77c:	686e      	ldr	r6, [r5, #4]
    d77e:	b136      	cbz	r6, d78e <att_reset+0x5a>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
    d780:	69ab      	ldr	r3, [r5, #24]
    d782:	9300      	str	r3, [sp, #0]
    d784:	2300      	movs	r3, #0
    d786:	461a      	mov	r2, r3
    d788:	210e      	movs	r1, #14
    d78a:	4618      	mov	r0, r3
    d78c:	47b0      	blx	r6
		att_req_destroy(req);
    d78e:	4628      	mov	r0, r5
    d790:	f013 fdf3 	bl	2137a <att_req_destroy>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    d794:	2c00      	cmp	r4, #0
    d796:	d0e1      	beq.n	d75c <att_reset+0x28>
    d798:	6823      	ldr	r3, [r4, #0]
    d79a:	2b00      	cmp	r3, #0
    d79c:	bf38      	it	cc
    d79e:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    d7a0:	4625      	mov	r5, r4
    d7a2:	461c      	mov	r4, r3
    d7a4:	e7ea      	b.n	d77c <att_reset+0x48>
    d7a6:	bf00      	nop
    d7a8:	200007b8 	.word	0x200007b8

0000d7ac <att_timeout>:
    d7ac:	4b0e      	ldr	r3, [pc, #56]	; (d7e8 <att_timeout+0x3c>)
    d7ae:	490f      	ldr	r1, [pc, #60]	; (d7ec <att_timeout+0x40>)
{
    d7b0:	b570      	push	{r4, r5, r6, lr}
    d7b2:	1ac9      	subs	r1, r1, r3
	struct bt_att *att = chan->att;
    d7b4:	4605      	mov	r5, r0
    d7b6:	08c9      	lsrs	r1, r1, #3
    d7b8:	f855 6de8 	ldr.w	r6, [r5, #-232]!
	BT_ERR("ATT Timeout");
    d7bc:	0189      	lsls	r1, r1, #6
    d7be:	f041 0101 	orr.w	r1, r1, #1
{
    d7c2:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
    d7c4:	480a      	ldr	r0, [pc, #40]	; (d7f0 <att_timeout+0x44>)
    d7c6:	f010 fe80 	bl	1e4ca <log_0>
	att_chan_detach(chan);
    d7ca:	4628      	mov	r0, r5
    d7cc:	f013 fe13 	bl	213f6 <att_chan_detach>
	if (!sys_slist_is_empty(&att->chans)) {
    d7d0:	6bf5      	ldr	r5, [r6, #60]	; 0x3c
    d7d2:	b945      	cbnz	r5, d7e6 <att_timeout+0x3a>
	att_reset(att);
    d7d4:	4630      	mov	r0, r6
    d7d6:	f7ff ffad 	bl	d734 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    d7da:	f854 0ce0 	ldr.w	r0, [r4, #-224]
    d7de:	f000 ff69 	bl	e6b4 <bt_gatt_disconnected>
	ch->chan.conn = NULL;
    d7e2:	f844 5ce0 	str.w	r5, [r4, #-224]
}
    d7e6:	bd70      	pop	{r4, r5, r6, pc}
    d7e8:	000236e8 	.word	0x000236e8
    d7ec:	000236e8 	.word	0x000236e8
    d7f0:	00026907 	.word	0x00026907

0000d7f4 <bt_att_req_cancel>:

	return true;
}

void bt_att_req_cancel(struct bt_conn *conn, struct bt_att_req *req)
{
    d7f4:	b510      	push	{r4, lr}
    d7f6:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan, *tmp;

	BT_DBG("req %p", req);

	if (!conn || !req) {
    d7f8:	b348      	cbz	r0, d84e <bt_att_req_cancel+0x5a>
    d7fa:	b341      	cbz	r1, d84e <bt_att_req_cancel+0x5a>
		return;
	}

	att = att_get(conn);
    d7fc:	f7ff f82c 	bl	c858 <att_get>
	if (!att) {
    d800:	b328      	cbz	r0, d84e <bt_att_req_cancel+0x5a>
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    d802:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    d804:	b15b      	cbz	r3, d81e <bt_att_req_cancel+0x2a>
    d806:	f5b3 719a 	subs.w	r1, r3, #308	; 0x134
    d80a:	d008      	beq.n	d81e <bt_att_req_cancel+0x2a>
    d80c:	681b      	ldr	r3, [r3, #0]
    d80e:	b10b      	cbz	r3, d814 <bt_att_req_cancel+0x20>
    d810:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
	if (chan->req != req) {
    d814:	f8d1 20cc 	ldr.w	r2, [r1, #204]	; 0xcc
    d818:	4294      	cmp	r4, r2
    d81a:	d005      	beq.n	d828 <bt_att_req_cancel+0x34>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    d81c:	b963      	cbnz	r3, d838 <bt_att_req_cancel+0x44>
			return;
		}
	}

	/* Remove request from the list */
	sys_slist_find_and_remove(&att->reqs, &req->node);
    d81e:	4621      	mov	r1, r4
    d820:	3004      	adds	r0, #4
    d822:	f013 fa92 	bl	20d4a <sys_slist_find_and_remove>
    d826:	e002      	b.n	d82e <bt_att_req_cancel+0x3a>
	chan->req = &cancel;
    d828:	4b09      	ldr	r3, [pc, #36]	; (d850 <bt_att_req_cancel+0x5c>)
    d82a:	f8c1 30cc 	str.w	r3, [r1, #204]	; 0xcc

	att_req_destroy(req);
    d82e:	4620      	mov	r0, r4
}
    d830:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	att_req_destroy(req);
    d834:	f013 bda1 	b.w	2137a <att_req_destroy>
Z_GENLIST_PEEK_NEXT(slist, snode)
    d838:	f513 729a 	adds.w	r2, r3, #308	; 0x134
    d83c:	d004      	beq.n	d848 <bt_att_req_cancel+0x54>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    d83e:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    d842:	b10a      	cbz	r2, d848 <bt_att_req_cancel+0x54>
    d844:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
{
    d848:	4619      	mov	r1, r3
    d84a:	4613      	mov	r3, r2
    d84c:	e7e2      	b.n	d814 <bt_att_req_cancel+0x20>
}
    d84e:	bd10      	pop	{r4, pc}
    d850:	200022a0 	.word	0x200022a0

0000d854 <find_static_attr>:

	return BT_GATT_ITER_CONTINUE;
}

static uint16_t find_static_attr(const struct bt_gatt_attr *attr)
{
    d854:	b5f0      	push	{r4, r5, r6, r7, lr}
    d856:	490f      	ldr	r1, [pc, #60]	; (d894 <find_static_attr+0x40>)
	uint16_t handle = 1;

	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    d858:	4f0f      	ldr	r7, [pc, #60]	; (d898 <find_static_attr+0x44>)
{
    d85a:	4604      	mov	r4, r0
	uint16_t handle = 1;
    d85c:	2501      	movs	r5, #1
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
			if (attr == &static_svc->attrs[i]) {
    d85e:	f04f 0c14 	mov.w	ip, #20
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    d862:	f1a1 0308 	sub.w	r3, r1, #8
    d866:	42bb      	cmp	r3, r7
    d868:	d211      	bcs.n	d88e <find_static_attr+0x3a>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
    d86a:	f851 6c04 	ldr.w	r6, [r1, #-4]
    d86e:	2200      	movs	r2, #0
    d870:	e006      	b.n	d880 <find_static_attr+0x2c>
			if (attr == &static_svc->attrs[i]) {
    d872:	f851 3c08 	ldr.w	r3, [r1, #-8]
    d876:	fb0c 3302 	mla	r3, ip, r2, r3
    d87a:	429c      	cmp	r4, r3
    d87c:	d008      	beq.n	d890 <find_static_attr+0x3c>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
    d87e:	3201      	adds	r2, #1
    d880:	18ab      	adds	r3, r5, r2
    d882:	4296      	cmp	r6, r2
    d884:	b298      	uxth	r0, r3
    d886:	d1f4      	bne.n	d872 <find_static_attr+0x1e>
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    d888:	3108      	adds	r1, #8
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
    d88a:	4605      	mov	r5, r0
    d88c:	e7e9      	b.n	d862 <find_static_attr+0xe>
				return handle;
			}
		}
	}

	return 0;
    d88e:	2000      	movs	r0, #0
}
    d890:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d892:	bf00      	nop
    d894:	000236d8 	.word	0x000236d8
    d898:	000236e8 	.word	0x000236e8

0000d89c <notify_mult_process>:

	return ret;
}

static void notify_mult_process(struct k_work *work)
{
    d89c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d89e:	4d0a      	ldr	r5, [pc, #40]	; (d8c8 <notify_mult_process+0x2c>)
	int i;

	/* Send to any connection with an allocated buffer */
	for (i = 0; i < ARRAY_SIZE(nfy_mult); i++) {
    d8a0:	2400      	movs	r4, #0
		struct net_buf **buf = &nfy_mult[i];

		if (*buf) {
    d8a2:	682b      	ldr	r3, [r5, #0]
    d8a4:	462f      	mov	r7, r5
    d8a6:	3504      	adds	r5, #4
    d8a8:	b14b      	cbz	r3, d8be <notify_mult_process+0x22>
			struct bt_conn *conn = bt_conn_lookup_index(i);
    d8aa:	b2e0      	uxtb	r0, r4
    d8ac:	f7fd fd3e 	bl	b32c <bt_conn_lookup_index>

			gatt_notify_mult_send(conn, buf);
    d8b0:	4639      	mov	r1, r7
			struct bt_conn *conn = bt_conn_lookup_index(i);
    d8b2:	4606      	mov	r6, r0
			gatt_notify_mult_send(conn, buf);
    d8b4:	f013 fed4 	bl	21660 <gatt_notify_mult_send>
			bt_conn_unref(conn);
    d8b8:	4630      	mov	r0, r6
    d8ba:	f012 fe9c 	bl	205f6 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(nfy_mult); i++) {
    d8be:	3401      	adds	r4, #1
    d8c0:	2c04      	cmp	r4, #4
    d8c2:	d1ee      	bne.n	d8a2 <notify_mult_process+0x6>
		}
	}
}
    d8c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d8c6:	bf00      	nop
    d8c8:	20002310 	.word	0x20002310

0000d8cc <gatt_send.constprop.0>:
	struct bt_gatt_indicate_params *params = user_data;

	params->func(conn, params->attr, err);
}

static int gatt_send(struct bt_conn *conn, struct net_buf *buf,
    d8cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d8d0:	4606      	mov	r6, r0
    d8d2:	4688      	mov	r8, r1
    d8d4:	4617      	mov	r7, r2
		     bt_att_func_t func, void *params,
		     bt_att_destroy_t destroy)
{
	int err;

	if (params) {
    d8d6:	461c      	mov	r4, r3
    d8d8:	b34b      	cbz	r3, d92e <gatt_send.constprop.0+0x62>
		struct bt_att_req *req;

		/* Allocate new request */
		req = bt_att_req_alloc(BT_ATT_TIMEOUT);
    d8da:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
    d8de:	2100      	movs	r1, #0
    d8e0:	f7ff fe1c 	bl	d51c <bt_att_req_alloc>
		if (!req) {
    d8e4:	4605      	mov	r5, r0
    d8e6:	b920      	cbnz	r0, d8f2 <gatt_send.constprop.0+0x26>
			return -ENOMEM;
    d8e8:	f06f 040b 	mvn.w	r4, #11
	if (err) {
		BT_ERR("Error sending ATT PDU: %d", err);
	}

	return err;
}
    d8ec:	4620      	mov	r0, r4
    d8ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		req->destroy = destroy;
    d8f2:	2300      	movs	r3, #0
		req->user_data = params;
    d8f4:	6184      	str	r4, [r0, #24]
		req->buf = buf;
    d8f6:	f8c0 8010 	str.w	r8, [r0, #16]
		req->func = func;
    d8fa:	6047      	str	r7, [r0, #4]
		req->destroy = destroy;
    d8fc:	6083      	str	r3, [r0, #8]
		err = bt_att_req_send(conn, req);
    d8fe:	4601      	mov	r1, r0
    d900:	4630      	mov	r0, r6
    d902:	f013 fdfa 	bl	214fa <bt_att_req_send>
		if (err) {
    d906:	4604      	mov	r4, r0
    d908:	2800      	cmp	r0, #0
    d90a:	d0ef      	beq.n	d8ec <gatt_send.constprop.0+0x20>
			bt_att_req_free(req);
    d90c:	4628      	mov	r0, r5
    d90e:	f7ff fe1b 	bl	d548 <bt_att_req_free>
	if (err) {
    d912:	2c00      	cmp	r4, #0
    d914:	d0ea      	beq.n	d8ec <gatt_send.constprop.0+0x20>
    d916:	4b08      	ldr	r3, [pc, #32]	; (d938 <gatt_send.constprop.0+0x6c>)
    d918:	4a08      	ldr	r2, [pc, #32]	; (d93c <gatt_send.constprop.0+0x70>)
		BT_ERR("Error sending ATT PDU: %d", err);
    d91a:	4809      	ldr	r0, [pc, #36]	; (d940 <gatt_send.constprop.0+0x74>)
    d91c:	1ad2      	subs	r2, r2, r3
    d91e:	08d2      	lsrs	r2, r2, #3
    d920:	0192      	lsls	r2, r2, #6
    d922:	f042 0201 	orr.w	r2, r2, #1
    d926:	4621      	mov	r1, r4
    d928:	f010 fddc 	bl	1e4e4 <log_1>
    d92c:	e7de      	b.n	d8ec <gatt_send.constprop.0+0x20>
		err = bt_att_send(conn, buf, NULL, NULL);
    d92e:	461a      	mov	r2, r3
    d930:	f013 fd99 	bl	21466 <bt_att_send>
    d934:	4604      	mov	r4, r0
    d936:	e7ec      	b.n	d912 <gatt_send.constprop.0+0x46>
    d938:	000236e8 	.word	0x000236e8
    d93c:	00023790 	.word	0x00023790
    d940:	0002691a 	.word	0x0002691a

0000d944 <gatt_indicate>:

static int gatt_indicate(struct bt_conn *conn, uint16_t handle,
			 struct bt_gatt_indicate_params *params)
{
    d944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d948:	4614      	mov	r4, r2
		return -EAGAIN;
	}
#endif

	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
				sizeof(*ind) + params->len);
    d94a:	8a12      	ldrh	r2, [r2, #16]
{
    d94c:	4689      	mov	r9, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    d94e:	3202      	adds	r2, #2
    d950:	211d      	movs	r1, #29
{
    d952:	4607      	mov	r7, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    d954:	f7ff fa9c 	bl	ce90 <bt_att_create_pdu>
	if (!buf) {
    d958:	4605      	mov	r5, r0
    d95a:	b1e8      	cbz	r0, d998 <gatt_indicate+0x54>
		return -ENOMEM;
	}

	BT_DBG("conn %p handle 0x%04x", conn, handle);

	ind = net_buf_add(buf, sizeof(*ind));
    d95c:	f100 0808 	add.w	r8, r0, #8
    d960:	2102      	movs	r1, #2
    d962:	4640      	mov	r0, r8
    d964:	f014 fe14 	bl	22590 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
    d968:	4606      	mov	r6, r0

	net_buf_add(buf, params->len);
    d96a:	8a21      	ldrh	r1, [r4, #16]
	ind->handle = sys_cpu_to_le16(handle);
    d96c:	f826 9b02 	strh.w	r9, [r6], #2
	net_buf_add(buf, params->len);
    d970:	4640      	mov	r0, r8
    d972:	f014 fe0d 	bl	22590 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
    d976:	8a22      	ldrh	r2, [r4, #16]
    d978:	68e1      	ldr	r1, [r4, #12]
    d97a:	4630      	mov	r0, r6
    d97c:	f012 fa77 	bl	1fe6e <memcpy>

	if (!params->func) {
    d980:	68a3      	ldr	r3, [r4, #8]
    d982:	b933      	cbnz	r3, d992 <gatt_indicate+0x4e>
		return gatt_send(conn, buf, NULL, NULL, NULL);
    d984:	461a      	mov	r2, r3
	}

	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
    d986:	4629      	mov	r1, r5
    d988:	4638      	mov	r0, r7
}
    d98a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
    d98e:	f7ff bf9d 	b.w	d8cc <gatt_send.constprop.0>
    d992:	4a08      	ldr	r2, [pc, #32]	; (d9b4 <gatt_indicate+0x70>)
    d994:	4623      	mov	r3, r4
    d996:	e7f6      	b.n	d986 <gatt_indicate+0x42>
    d998:	4b07      	ldr	r3, [pc, #28]	; (d9b8 <gatt_indicate+0x74>)
    d99a:	4908      	ldr	r1, [pc, #32]	; (d9bc <gatt_indicate+0x78>)
		BT_WARN("No buffer available to send indication");
    d99c:	4808      	ldr	r0, [pc, #32]	; (d9c0 <gatt_indicate+0x7c>)
    d99e:	1ac9      	subs	r1, r1, r3
    d9a0:	08c9      	lsrs	r1, r1, #3
    d9a2:	0189      	lsls	r1, r1, #6
    d9a4:	f041 0102 	orr.w	r1, r1, #2
    d9a8:	f010 fd8f 	bl	1e4ca <log_0>
}
    d9ac:	f06f 000b 	mvn.w	r0, #11
    d9b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d9b4:	0002159b 	.word	0x0002159b
    d9b8:	000236e8 	.word	0x000236e8
    d9bc:	00023790 	.word	0x00023790
    d9c0:	00026934 	.word	0x00026934

0000d9c4 <gatt_sub_find_free>:
}

#if defined(CONFIG_BT_GATT_CLIENT)
static struct gatt_sub *gatt_sub_find_free(struct bt_conn *conn,
					   struct gatt_sub **free_sub)
{
    d9c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    d9c8:	4680      	mov	r8, r0
	int i;

	if (free_sub) {
    d9ca:	460c      	mov	r4, r1
    d9cc:	b109      	cbz	r1, d9d2 <gatt_sub_find_free+0xe>
		*free_sub = NULL;
    d9ce:	2300      	movs	r3, #0
    d9d0:	600b      	str	r3, [r1, #0]
    d9d2:	4d10      	ldr	r5, [pc, #64]	; (da14 <gatt_sub_find_free+0x50>)
{
    d9d4:	2700      	movs	r7, #0
	}

	for (i = 0; i < ARRAY_SIZE(subscriptions); i++) {
		struct gatt_sub *sub = &subscriptions[i];
    d9d6:	462e      	mov	r6, r5

		if (bt_conn_is_peer_addr_le(conn, sub->id, &sub->peer)) {
    d9d8:	4640      	mov	r0, r8
    d9da:	f816 1b01 	ldrb.w	r1, [r6], #1
    d9de:	4632      	mov	r2, r6
		struct gatt_sub *sub = &subscriptions[i];
    d9e0:	46a9      	mov	r9, r5
		if (bt_conn_is_peer_addr_le(conn, sub->id, &sub->peer)) {
    d9e2:	f012 fde8 	bl	205b6 <bt_conn_is_peer_addr_le>
    d9e6:	b988      	cbnz	r0, da0c <gatt_sub_find_free+0x48>
			return sub;
		} else if (free_sub &&
    d9e8:	b14c      	cbz	r4, d9fe <gatt_sub_find_free+0x3a>
			   !bt_addr_le_cmp(BT_ADDR_LE_ANY, &sub->peer)) {
    d9ea:	9000      	str	r0, [sp, #0]
	return memcmp(a, b, sizeof(*a));
    d9ec:	2207      	movs	r2, #7
    d9ee:	f8cd 0003 	str.w	r0, [sp, #3]
    d9f2:	4631      	mov	r1, r6
    d9f4:	4668      	mov	r0, sp
    d9f6:	f012 fa2a 	bl	1fe4e <memcmp>
		} else if (free_sub &&
    d9fa:	b900      	cbnz	r0, d9fe <gatt_sub_find_free+0x3a>
			*free_sub = sub;
    d9fc:	6025      	str	r5, [r4, #0]
	for (i = 0; i < ARRAY_SIZE(subscriptions); i++) {
    d9fe:	3701      	adds	r7, #1
    da00:	2f05      	cmp	r7, #5
    da02:	f105 0510 	add.w	r5, r5, #16
    da06:	d1e6      	bne.n	d9d6 <gatt_sub_find_free+0x12>
		}
	}

	return NULL;
    da08:	f04f 0900 	mov.w	r9, #0
}
    da0c:	4648      	mov	r0, r9
    da0e:	b003      	add	sp, #12
    da10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    da14:	20002370 	.word	0x20002370

0000da18 <find_sc_cfg>:
{
    da18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    da1c:	4c0e      	ldr	r4, [pc, #56]	; (da58 <find_sc_cfg+0x40>)
    da1e:	4607      	mov	r7, r0
    da20:	4688      	mov	r8, r1
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    da22:	2600      	movs	r6, #0
    da24:	4625      	mov	r5, r4
    da26:	f04f 090c 	mov.w	r9, #12
		if (id == sc_cfg[i].id &&
    da2a:	7823      	ldrb	r3, [r4, #0]
    da2c:	42bb      	cmp	r3, r7
    da2e:	d10b      	bne.n	da48 <find_sc_cfg+0x30>
    da30:	2207      	movs	r2, #7
    da32:	4641      	mov	r1, r8
    da34:	1c60      	adds	r0, r4, #1
    da36:	fb09 fa06 	mul.w	sl, r9, r6
    da3a:	f012 fa08 	bl	1fe4e <memcmp>
    da3e:	b918      	cbnz	r0, da48 <find_sc_cfg+0x30>
			return &sc_cfg[i];
    da40:	eb05 000a 	add.w	r0, r5, sl
}
    da44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    da48:	3601      	adds	r6, #1
    da4a:	2e05      	cmp	r6, #5
    da4c:	f104 040c 	add.w	r4, r4, #12
    da50:	d1eb      	bne.n	da2a <find_sc_cfg+0x12>
	return NULL;
    da52:	2000      	movs	r0, #0
    da54:	e7f6      	b.n	da44 <find_sc_cfg+0x2c>
    da56:	bf00      	nop
    da58:	2000a2a2 	.word	0x2000a2a2

0000da5c <sc_save>:
{
    da5c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    da60:	4680      	mov	r8, r0
    da62:	460f      	mov	r7, r1
    da64:	4616      	mov	r6, r2
    da66:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
    da68:	f7ff ffd6 	bl	da18 <find_sc_cfg>
	if (!cfg) {
    da6c:	4604      	mov	r4, r0
    da6e:	b9c8      	cbnz	r0, daa4 <sc_save+0x48>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
    da70:	4669      	mov	r1, sp
    da72:	9000      	str	r0, [sp, #0]
    da74:	f8cd 0003 	str.w	r0, [sp, #3]
    da78:	f7ff ffce 	bl	da18 <find_sc_cfg>
		if (!cfg) {
    da7c:	4604      	mov	r4, r0
    da7e:	b960      	cbnz	r0, da9a <sc_save+0x3e>
    da80:	490f      	ldr	r1, [pc, #60]	; (dac0 <sc_save+0x64>)
    da82:	4b10      	ldr	r3, [pc, #64]	; (dac4 <sc_save+0x68>)
			BT_ERR("unable to save SC: no cfg left");
    da84:	4810      	ldr	r0, [pc, #64]	; (dac8 <sc_save+0x6c>)
    da86:	1ac9      	subs	r1, r1, r3
    da88:	08c9      	lsrs	r1, r1, #3
    da8a:	0189      	lsls	r1, r1, #6
    da8c:	f041 0101 	orr.w	r1, r1, #1
    da90:	f010 fd1b 	bl	1e4ca <log_0>
}
    da94:	b002      	add	sp, #8
    da96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg->id = id;
    da9a:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
    da9e:	4639      	mov	r1, r7
    daa0:	f013 fddb 	bl	2165a <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
    daa4:	8922      	ldrh	r2, [r4, #8]
    daa6:	8963      	ldrh	r3, [r4, #10]
    daa8:	b91a      	cbnz	r2, dab2 <sc_save+0x56>
    daaa:	b923      	cbnz	r3, dab6 <sc_save+0x5a>
		cfg->data.start = start;
    daac:	8126      	strh	r6, [r4, #8]
		*end = new_end;
    daae:	8165      	strh	r5, [r4, #10]
    dab0:	e7f0      	b.n	da94 <sc_save+0x38>
	if (new_start >= *start && new_end <= *end) {
    dab2:	4296      	cmp	r6, r2
    dab4:	d302      	bcc.n	dabc <sc_save+0x60>
    dab6:	429d      	cmp	r5, r3
    dab8:	d9ec      	bls.n	da94 <sc_save+0x38>
    daba:	e7f8      	b.n	daae <sc_save+0x52>
		*start = new_start;
    dabc:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
    dabe:	e7fa      	b.n	dab6 <sc_save+0x5a>
    dac0:	00023790 	.word	0x00023790
    dac4:	000236e8 	.word	0x000236e8
    dac8:	0002695b 	.word	0x0002695b

0000dacc <find_cf_cfg>:
{
    dacc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    dace:	4d0f      	ldr	r5, [pc, #60]	; (db0c <find_cf_cfg+0x40>)
    dad0:	4604      	mov	r4, r0
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
    dad2:	2600      	movs	r6, #0
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
    dad4:	462f      	mov	r7, r5
		if (!conn) {
    dad6:	1c68      	adds	r0, r5, #1
    dad8:	b954      	cbnz	r4, daf0 <find_cf_cfg+0x24>
    dada:	2207      	movs	r2, #7
    dadc:	4669      	mov	r1, sp
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    dade:	9400      	str	r4, [sp, #0]
    dae0:	f8cd 4003 	str.w	r4, [sp, #3]
    dae4:	f012 f9b3 	bl	1fe4e <memcmp>
    dae8:	b948      	cbnz	r0, dafe <find_cf_cfg+0x32>
}
    daea:	4638      	mov	r0, r7
    daec:	b003      	add	sp, #12
    daee:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    daf0:	4602      	mov	r2, r0
    daf2:	7829      	ldrb	r1, [r5, #0]
    daf4:	4620      	mov	r0, r4
    daf6:	f012 fd5e 	bl	205b6 <bt_conn_is_peer_addr_le>
    dafa:	2800      	cmp	r0, #0
    dafc:	d1f5      	bne.n	daea <find_cf_cfg+0x1e>
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
    dafe:	3601      	adds	r6, #1
    db00:	2e05      	cmp	r6, #5
    db02:	f105 0510 	add.w	r5, r5, #16
    db06:	d1e5      	bne.n	dad4 <find_cf_cfg+0x8>
	return NULL;
    db08:	2700      	movs	r7, #0
    db0a:	e7ee      	b.n	daea <find_cf_cfg+0x1e>
    db0c:	200022bc 	.word	0x200022bc

0000db10 <gatt_notify>:
{
    db10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    db14:	4680      	mov	r8, r0
    db16:	4689      	mov	r9, r1
    db18:	4614      	mov	r4, r2
	cfg = find_cf_cfg(conn);
    db1a:	f7ff ffd7 	bl	dacc <find_cf_cfg>
	if (!cfg) {
    db1e:	2800      	cmp	r0, #0
    db20:	d06f      	beq.n	dc02 <gatt_notify+0xf2>
	if (gatt_cf_notify_multi(conn)) {
    db22:	7a03      	ldrb	r3, [r0, #8]
    db24:	075b      	lsls	r3, r3, #29
    db26:	d56c      	bpl.n	dc02 <gatt_notify+0xf2>
	struct net_buf **buf = &nfy_mult[bt_conn_index(conn)];
    db28:	4640      	mov	r0, r8
    db2a:	f7fd fbf3 	bl	b314 <bt_conn_index>
	if (*buf && ((net_buf_tailroom(*buf) < sizeof(*nfy) + params->len) ||
    db2e:	4e47      	ldr	r6, [pc, #284]	; (dc4c <gatt_notify+0x13c>)
	struct net_buf **buf = &nfy_mult[bt_conn_index(conn)];
    db30:	4607      	mov	r7, r0
	if (*buf && ((net_buf_tailroom(*buf) < sizeof(*nfy) + params->len) ||
    db32:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
    db36:	b9b0      	cbnz	r0, db66 <gatt_notify+0x56>
					 sizeof(*nfy) + params->len);
    db38:	89a2      	ldrh	r2, [r4, #12]
		*buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY_MULT,
    db3a:	2123      	movs	r1, #35	; 0x23
    db3c:	3204      	adds	r2, #4
    db3e:	4640      	mov	r0, r8
    db40:	f7ff f9a6 	bl	ce90 <bt_att_create_pdu>
    db44:	f846 0027 	str.w	r0, [r6, r7, lsl #2]
		if (!*buf) {
    db48:	2800      	cmp	r0, #0
    db4a:	d155      	bne.n	dbf8 <gatt_notify+0xe8>
    db4c:	4b40      	ldr	r3, [pc, #256]	; (dc50 <gatt_notify+0x140>)
    db4e:	4941      	ldr	r1, [pc, #260]	; (dc54 <gatt_notify+0x144>)
		BT_WARN("No buffer available to send notification");
    db50:	4841      	ldr	r0, [pc, #260]	; (dc58 <gatt_notify+0x148>)
    db52:	1ac9      	subs	r1, r1, r3
    db54:	08c9      	lsrs	r1, r1, #3
    db56:	0189      	lsls	r1, r1, #6
    db58:	f041 0102 	orr.w	r1, r1, #2
    db5c:	f010 fcb5 	bl	1e4ca <log_0>
		return -ENOMEM;
    db60:	f06f 050b 	mvn.w	r5, #11
    db64:	e045      	b.n	dbf2 <gatt_notify+0xe2>
	if (*buf && ((net_buf_tailroom(*buf) < sizeof(*nfy) + params->len) ||
    db66:	3008      	adds	r0, #8
    db68:	f014 fd6b 	bl	22642 <net_buf_simple_tailroom>
    db6c:	89a3      	ldrh	r3, [r4, #12]
    db6e:	3304      	adds	r3, #4
    db70:	4298      	cmp	r0, r3
    db72:	d309      	bcc.n	db88 <gatt_notify+0x78>
	    !nfy_mult_data_match(*buf, params->func, params->user_data))) {
    db74:	f856 3027 	ldr.w	r3, [r6, r7, lsl #2]
	if (*buf && ((net_buf_tailroom(*buf) < sizeof(*nfy) + params->len) ||
    db78:	6922      	ldr	r2, [r4, #16]
    db7a:	6959      	ldr	r1, [r3, #20]
    db7c:	4291      	cmp	r1, r2
    db7e:	d103      	bne.n	db88 <gatt_notify+0x78>
	    !nfy_mult_data_match(*buf, params->func, params->user_data))) {
    db80:	699a      	ldr	r2, [r3, #24]
    db82:	6963      	ldr	r3, [r4, #20]
    db84:	429a      	cmp	r2, r3
    db86:	d00b      	beq.n	dba0 <gatt_notify+0x90>
	struct net_buf **buf = &nfy_mult[bt_conn_index(conn)];
    db88:	b239      	sxth	r1, r7
		ret = gatt_notify_mult_send(conn, buf);
    db8a:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    db8e:	4640      	mov	r0, r8
    db90:	f013 fd66 	bl	21660 <gatt_notify_mult_send>
		if (ret < 0) {
    db94:	1e05      	subs	r5, r0, #0
    db96:	db2c      	blt.n	dbf2 <gatt_notify+0xe2>
	if (!*buf) {
    db98:	f856 3027 	ldr.w	r3, [r6, r7, lsl #2]
    db9c:	2b00      	cmp	r3, #0
    db9e:	d0cb      	beq.n	db38 <gatt_notify+0x28>
	nfy = net_buf_add(*buf, sizeof(*nfy));
    dba0:	f856 0027 	ldr.w	r0, [r6, r7, lsl #2]
    dba4:	2104      	movs	r1, #4
    dba6:	3008      	adds	r0, #8
    dba8:	f014 fcf2 	bl	22590 <net_buf_simple_add>
	nfy->len = sys_cpu_to_le16(params->len);
    dbac:	89a1      	ldrh	r1, [r4, #12]
    dbae:	8041      	strh	r1, [r0, #2]
	nfy = net_buf_add(*buf, sizeof(*nfy));
    dbb0:	4605      	mov	r5, r0
	nfy->handle = sys_cpu_to_le16(handle);
    dbb2:	f8a0 9000 	strh.w	r9, [r0]
	net_buf_add(*buf, params->len);
    dbb6:	f856 0027 	ldr.w	r0, [r6, r7, lsl #2]
    dbba:	3008      	adds	r0, #8
    dbbc:	f014 fce8 	bl	22590 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
    dbc0:	68a1      	ldr	r1, [r4, #8]
    dbc2:	89a2      	ldrh	r2, [r4, #12]
    dbc4:	1d28      	adds	r0, r5, #4
    dbc6:	f012 f952 	bl	1fe6e <memcpy>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    dbca:	f3bf 8f5b 	dmb	ish
    dbce:	4923      	ldr	r1, [pc, #140]	; (dc5c <gatt_notify+0x14c>)
    dbd0:	e851 5f00 	ldrex	r5, [r1]
    dbd4:	f045 0301 	orr.w	r3, r5, #1
    dbd8:	e841 3200 	strex	r2, r3, [r1]
    dbdc:	2a00      	cmp	r2, #0
    dbde:	d1f7      	bne.n	dbd0 <gatt_notify+0xc0>
    dbe0:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    dbe4:	f015 0501 	ands.w	r5, r5, #1
    dbe8:	d12e      	bne.n	dc48 <gatt_notify+0x138>
		k_queue_append(&work_q->queue, work);
    dbea:	481d      	ldr	r0, [pc, #116]	; (dc60 <gatt_notify+0x150>)
    dbec:	3908      	subs	r1, #8
    dbee:	f015 f889 	bl	22d04 <k_queue_append>
}
    dbf2:	4628      	mov	r0, r5
    dbf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		nfy_mult_user_data(*buf)->func = params->func;
    dbf8:	6923      	ldr	r3, [r4, #16]
    dbfa:	6143      	str	r3, [r0, #20]
		nfy_mult_user_data(*buf)->user_data = params->user_data;
    dbfc:	6963      	ldr	r3, [r4, #20]
    dbfe:	6183      	str	r3, [r0, #24]
    dc00:	e7ce      	b.n	dba0 <gatt_notify+0x90>
				sizeof(*nfy) + params->len);
    dc02:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
    dc04:	211b      	movs	r1, #27
    dc06:	3202      	adds	r2, #2
    dc08:	4640      	mov	r0, r8
    dc0a:	f7ff f941 	bl	ce90 <bt_att_create_pdu>
	if (!buf) {
    dc0e:	4605      	mov	r5, r0
    dc10:	2800      	cmp	r0, #0
    dc12:	d09b      	beq.n	db4c <gatt_notify+0x3c>
	nfy = net_buf_add(buf, sizeof(*nfy));
    dc14:	f100 0708 	add.w	r7, r0, #8
    dc18:	2102      	movs	r1, #2
    dc1a:	4638      	mov	r0, r7
    dc1c:	f014 fcb8 	bl	22590 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
    dc20:	4606      	mov	r6, r0
	net_buf_add(buf, params->len);
    dc22:	89a1      	ldrh	r1, [r4, #12]
	nfy->handle = sys_cpu_to_le16(handle);
    dc24:	f826 9b02 	strh.w	r9, [r6], #2
	net_buf_add(buf, params->len);
    dc28:	4638      	mov	r0, r7
    dc2a:	f014 fcb1 	bl	22590 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
    dc2e:	89a2      	ldrh	r2, [r4, #12]
    dc30:	68a1      	ldr	r1, [r4, #8]
    dc32:	4630      	mov	r0, r6
    dc34:	f012 f91b 	bl	1fe6e <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
    dc38:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    dc3c:	4629      	mov	r1, r5
    dc3e:	4640      	mov	r0, r8
}
    dc40:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
    dc44:	f013 bc0f 	b.w	21466 <bt_att_send>
	return 0;
    dc48:	2500      	movs	r5, #0
    dc4a:	e7d2      	b.n	dbf2 <gatt_notify+0xe2>
    dc4c:	20002310 	.word	0x20002310
    dc50:	000236e8 	.word	0x000236e8
    dc54:	00023790 	.word	0x00023790
    dc58:	0002697a 	.word	0x0002697a
    dc5c:	2000022c 	.word	0x2000022c
    dc60:	20001c50 	.word	0x20001c50

0000dc64 <notify_cb>:
{
    dc64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    dc68:	4b38      	ldr	r3, [pc, #224]	; (dd4c <notify_cb+0xe8>)
    dc6a:	6882      	ldr	r2, [r0, #8]
    dc6c:	429a      	cmp	r2, r3
{
    dc6e:	4607      	mov	r7, r0
    dc70:	460d      	mov	r5, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    dc72:	d003      	beq.n	dc7c <notify_cb+0x18>
		return BT_GATT_ITER_CONTINUE;
    dc74:	2001      	movs	r0, #1
}
    dc76:	b003      	add	sp, #12
    dc78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ccc = attr->user_data;
    dc7c:	f8d0 900c 	ldr.w	r9, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
    dc80:	4b33      	ldr	r3, [pc, #204]	; (dd50 <notify_cb+0xec>)
    dc82:	4599      	cmp	r9, r3
    dc84:	d01a      	beq.n	dcbc <notify_cb+0x58>
    dc86:	f109 0601 	add.w	r6, r9, #1
    dc8a:	f109 0a33 	add.w	sl, r9, #51	; 0x33
    dc8e:	f04f 0b00 	mov.w	fp, #0
		if (cfg->value != data->type) {
    dc92:	f8b6 2007 	ldrh.w	r2, [r6, #7]
    dc96:	88ab      	ldrh	r3, [r5, #4]
    dc98:	429a      	cmp	r2, r3
    dc9a:	d10b      	bne.n	dcb4 <notify_cb+0x50>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    dc9c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
    dca0:	4631      	mov	r1, r6
    dca2:	f7fd f855 	bl	ad50 <bt_conn_lookup_addr_le>
		if (!conn) {
    dca6:	4604      	mov	r4, r0
    dca8:	b120      	cbz	r0, dcb4 <notify_cb+0x50>
		if (conn->state != BT_CONN_CONNECTED) {
    dcaa:	7b43      	ldrb	r3, [r0, #13]
    dcac:	2b06      	cmp	r3, #6
    dcae:	d02b      	beq.n	dd08 <notify_cb+0xa4>
			bt_conn_unref(conn);
    dcb0:	f012 fca1 	bl	205f6 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
    dcb4:	360a      	adds	r6, #10
    dcb6:	45b2      	cmp	sl, r6
    dcb8:	d1eb      	bne.n	dc92 <notify_cb+0x2e>
    dcba:	e7db      	b.n	dc74 <notify_cb+0x10>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    dcbc:	2600      	movs	r6, #0
    dcbe:	4c25      	ldr	r4, [pc, #148]	; (dd54 <notify_cb+0xf0>)
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    dcc0:	46b0      	mov	r8, r6
    dcc2:	2207      	movs	r2, #7
    dcc4:	4669      	mov	r1, sp
    dcc6:	4620      	mov	r0, r4
    dcc8:	f8cd 8000 	str.w	r8, [sp]
    dccc:	f8cd 8003 	str.w	r8, [sp, #3]
    dcd0:	f012 f8bd 	bl	1fe4e <memcmp>
    dcd4:	b178      	cbz	r0, dcf6 <notify_cb+0x92>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
    dcd6:	f814 0c01 	ldrb.w	r0, [r4, #-1]
    dcda:	2206      	movs	r2, #6
    dcdc:	4621      	mov	r1, r4
    dcde:	f7fd f883 	bl	ade8 <bt_conn_lookup_state_le>
			if (!conn) {
    dce2:	b970      	cbnz	r0, dd02 <notify_cb+0x9e>
				sc = (struct sc_data *)data->ind_params->data;
    dce4:	68ab      	ldr	r3, [r5, #8]
				sc_save(cfg->id, &cfg->peer,
    dce6:	f814 0c01 	ldrb.w	r0, [r4, #-1]
				sc = (struct sc_data *)data->ind_params->data;
    dcea:	68da      	ldr	r2, [r3, #12]
				sc_save(cfg->id, &cfg->peer,
    dcec:	4621      	mov	r1, r4
    dcee:	8853      	ldrh	r3, [r2, #2]
    dcf0:	8812      	ldrh	r2, [r2, #0]
    dcf2:	f7ff feb3 	bl	da5c <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    dcf6:	3601      	adds	r6, #1
    dcf8:	2e05      	cmp	r6, #5
    dcfa:	f104 040c 	add.w	r4, r4, #12
    dcfe:	d1e0      	bne.n	dcc2 <notify_cb+0x5e>
    dd00:	e7c1      	b.n	dc86 <notify_cb+0x22>
			bt_conn_unref(conn);
    dd02:	f012 fc78 	bl	205f6 <bt_conn_unref>
    dd06:	e7f6      	b.n	dcf6 <notify_cb+0x92>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
    dd08:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
    dd0c:	b123      	cbz	r3, dd18 <notify_cb+0xb4>
    dd0e:	4639      	mov	r1, r7
    dd10:	4798      	blx	r3
    dd12:	b908      	cbnz	r0, dd18 <notify_cb+0xb4>
			bt_conn_unref(conn);
    dd14:	4620      	mov	r0, r4
    dd16:	e7cb      	b.n	dcb0 <notify_cb+0x4c>
		if (data->type == BT_GATT_CCC_INDICATE) {
    dd18:	8a39      	ldrh	r1, [r7, #16]
    dd1a:	88ab      	ldrh	r3, [r5, #4]
    dd1c:	68aa      	ldr	r2, [r5, #8]
    dd1e:	3901      	subs	r1, #1
    dd20:	2b02      	cmp	r3, #2
    dd22:	b289      	uxth	r1, r1
			err = gatt_indicate(conn, attr->handle - 1,
    dd24:	4620      	mov	r0, r4
		if (data->type == BT_GATT_CCC_INDICATE) {
    dd26:	d10b      	bne.n	dd40 <notify_cb+0xdc>
			err = gatt_indicate(conn, attr->handle - 1,
    dd28:	f7ff fe0c 	bl	d944 <gatt_indicate>
			err = gatt_notify(conn, attr->handle - 1,
    dd2c:	4680      	mov	r8, r0
		bt_conn_unref(conn);
    dd2e:	4620      	mov	r0, r4
    dd30:	f012 fc61 	bl	205f6 <bt_conn_unref>
		if (err < 0) {
    dd34:	f1b8 0f00 	cmp.w	r8, #0
    dd38:	db05      	blt.n	dd46 <notify_cb+0xe2>
		data->err = 0;
    dd3a:	f8c5 b000 	str.w	fp, [r5]
    dd3e:	e7b9      	b.n	dcb4 <notify_cb+0x50>
			err = gatt_notify(conn, attr->handle - 1,
    dd40:	f7ff fee6 	bl	db10 <gatt_notify>
    dd44:	e7f2      	b.n	dd2c <notify_cb+0xc8>
			return BT_GATT_ITER_STOP;
    dd46:	2000      	movs	r0, #0
    dd48:	e795      	b.n	dc76 <notify_cb+0x12>
    dd4a:	bf00      	nop
    dd4c:	0000dd59 	.word	0x0000dd59
    dd50:	20000230 	.word	0x20000230
    dd54:	2000a2a3 	.word	0x2000a2a3

0000dd58 <bt_gatt_attr_write_ccc>:
{
    dd58:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    dd5c:	461f      	mov	r7, r3
    dd5e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	struct _bt_gatt_ccc *ccc = attr->user_data;
    dd62:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
    dd66:	4606      	mov	r6, r0
    dd68:	4688      	mov	r8, r1
	if (offset) {
    dd6a:	2b00      	cmp	r3, #0
    dd6c:	d151      	bne.n	de12 <bt_gatt_attr_write_ccc+0xba>
	if (!len || len > sizeof(uint16_t)) {
    dd6e:	1e7b      	subs	r3, r7, #1
    dd70:	2b01      	cmp	r3, #1
    dd72:	d851      	bhi.n	de18 <bt_gatt_attr_write_ccc+0xc0>
	if (len < sizeof(uint16_t)) {
    dd74:	2f01      	cmp	r7, #1
		value = *(uint8_t *)buf;
    dd76:	7815      	ldrb	r5, [r2, #0]
	return ((uint16_t)src[1] << 8) | src[0];
    dd78:	bf18      	it	ne
    dd7a:	7852      	ldrbne	r2, [r2, #1]
	cfg = find_ccc_cfg(conn, ccc);
    dd7c:	4649      	mov	r1, r9
		value = *(uint8_t *)buf;
    dd7e:	bf0c      	ite	eq
    dd80:	b2ad      	uxtheq	r5, r5
    dd82:	ea45 2502 	orrne.w	r5, r5, r2, lsl #8
	cfg = find_ccc_cfg(conn, ccc);
    dd86:	f013 fca7 	bl	216d8 <find_ccc_cfg>
	if (!cfg) {
    dd8a:	4604      	mov	r4, r0
    dd8c:	b9e8      	cbnz	r0, ddca <bt_gatt_attr_write_ccc+0x72>
		if (!value) {
    dd8e:	b91d      	cbnz	r5, dd98 <bt_gatt_attr_write_ccc+0x40>
			return len;
    dd90:	4638      	mov	r0, r7
}
    dd92:	b003      	add	sp, #12
    dd94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
    dd98:	4649      	mov	r1, r9
    dd9a:	f013 fc9d 	bl	216d8 <find_ccc_cfg>
		if (!cfg) {
    dd9e:	4604      	mov	r4, r0
    dda0:	b960      	cbnz	r0, ddbc <bt_gatt_attr_write_ccc+0x64>
    dda2:	4b1f      	ldr	r3, [pc, #124]	; (de20 <bt_gatt_attr_write_ccc+0xc8>)
    dda4:	491f      	ldr	r1, [pc, #124]	; (de24 <bt_gatt_attr_write_ccc+0xcc>)
			BT_WARN("No space to store CCC cfg");
    dda6:	4820      	ldr	r0, [pc, #128]	; (de28 <bt_gatt_attr_write_ccc+0xd0>)
    dda8:	1ac9      	subs	r1, r1, r3
    ddaa:	08c9      	lsrs	r1, r1, #3
    ddac:	0189      	lsls	r1, r1, #6
    ddae:	f041 0102 	orr.w	r1, r1, #2
    ddb2:	f010 fb8a 	bl	1e4ca <log_0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    ddb6:	f06f 0010 	mvn.w	r0, #16
    ddba:	e7ea      	b.n	dd92 <bt_gatt_attr_write_ccc+0x3a>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    ddbc:	f106 0188 	add.w	r1, r6, #136	; 0x88
    ddc0:	3001      	adds	r0, #1
    ddc2:	f013 fc4a 	bl	2165a <bt_addr_le_copy>
		cfg->id = conn->id;
    ddc6:	7a33      	ldrb	r3, [r6, #8]
    ddc8:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
    ddca:	f8d9 3038 	ldr.w	r3, [r9, #56]	; 0x38
    ddce:	b9a3      	cbnz	r3, ddfa <bt_gatt_attr_write_ccc+0xa2>
	if (cfg->value != ccc->value) {
    ddd0:	f8b9 3032 	ldrh.w	r3, [r9, #50]	; 0x32
	cfg->value = value;
    ddd4:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
    ddd6:	42ab      	cmp	r3, r5
    ddd8:	d003      	beq.n	dde2 <bt_gatt_attr_write_ccc+0x8a>
		gatt_ccc_changed(attr, ccc);
    ddda:	4649      	mov	r1, r9
    dddc:	4640      	mov	r0, r8
    ddde:	f013 fbc2 	bl	21566 <gatt_ccc_changed>
	if (!value) {
    dde2:	2d00      	cmp	r5, #0
    dde4:	d1d4      	bne.n	dd90 <bt_gatt_attr_write_ccc+0x38>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
    dde6:	4669      	mov	r1, sp
    dde8:	1c60      	adds	r0, r4, #1
    ddea:	9500      	str	r5, [sp, #0]
    ddec:	f8cd 5003 	str.w	r5, [sp, #3]
    ddf0:	f013 fc33 	bl	2165a <bt_addr_le_copy>
	cfg->id = 0U;
    ddf4:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
    ddf6:	8125      	strh	r5, [r4, #8]
}
    ddf8:	e7ca      	b.n	dd90 <bt_gatt_attr_write_ccc+0x38>
		ssize_t write = ccc->cfg_write(conn, attr, value);
    ddfa:	462a      	mov	r2, r5
    ddfc:	4641      	mov	r1, r8
    ddfe:	4630      	mov	r0, r6
    de00:	4798      	blx	r3
		if (write < 0) {
    de02:	2800      	cmp	r0, #0
    de04:	dbc5      	blt.n	dd92 <bt_gatt_attr_write_ccc+0x3a>
		if (write != sizeof(value) && write != 1) {
    de06:	3801      	subs	r0, #1
    de08:	2801      	cmp	r0, #1
    de0a:	d9e1      	bls.n	ddd0 <bt_gatt_attr_write_ccc+0x78>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
    de0c:	f06f 000d 	mvn.w	r0, #13
    de10:	e7bf      	b.n	dd92 <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    de12:	f06f 0006 	mvn.w	r0, #6
    de16:	e7bc      	b.n	dd92 <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    de18:	f06f 000c 	mvn.w	r0, #12
    de1c:	e7b9      	b.n	dd92 <bt_gatt_attr_write_ccc+0x3a>
    de1e:	bf00      	nop
    de20:	000236e8 	.word	0x000236e8
    de24:	00023790 	.word	0x00023790
    de28:	000269a3 	.word	0x000269a3

0000de2c <gatt_write_ccc.constprop.0>:
		/* Notify with NULL data to complete unsubscribe */
		params->notify(conn, params, NULL, 0);
	}
}

static int gatt_write_ccc(struct bt_conn *conn, uint16_t handle, uint16_t value,
    de2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    de30:	4688      	mov	r8, r1
    de32:	4617      	mov	r7, r2
			  struct bt_gatt_subscribe_params *params)
{
	struct net_buf *buf;
	struct bt_att_write_req *req;

	buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_REQ,
    de34:	2112      	movs	r1, #18
    de36:	2204      	movs	r2, #4
static int gatt_write_ccc(struct bt_conn *conn, uint16_t handle, uint16_t value,
    de38:	4606      	mov	r6, r0
    de3a:	461d      	mov	r5, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_REQ,
    de3c:	f7ff f828 	bl	ce90 <bt_att_create_pdu>
				sizeof(*req) + sizeof(uint16_t));
	if (!buf) {
    de40:	4604      	mov	r4, r0
    de42:	b308      	cbz	r0, de88 <gatt_write_ccc.constprop.0+0x5c>
		return -ENOMEM;
	}

	req = net_buf_add(buf, sizeof(*req));
    de44:	f100 0908 	add.w	r9, r0, #8
    de48:	2102      	movs	r1, #2
    de4a:	4648      	mov	r0, r9
    de4c:	f014 fba0 	bl	22590 <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(handle);
	net_buf_add_le16(buf, value);
    de50:	4639      	mov	r1, r7
	req->handle = sys_cpu_to_le16(handle);
    de52:	f8a0 8000 	strh.w	r8, [r0]
	net_buf_add_le16(buf, value);
    de56:	4648      	mov	r0, r9
    de58:	f014 fbb1 	bl	225be <net_buf_simple_add_le16>
    de5c:	f3bf 8f5b 	dmb	ish
    de60:	f105 030c 	add.w	r3, r5, #12
    de64:	e853 2f00 	ldrex	r2, [r3]
    de68:	f042 0204 	orr.w	r2, r2, #4
    de6c:	e843 2100 	strex	r1, r2, [r3]
    de70:	2900      	cmp	r1, #0
    de72:	d1f7      	bne.n	de64 <gatt_write_ccc.constprop.0+0x38>
    de74:	f3bf 8f5b 	dmb	ish

	BT_DBG("handle 0x%04x value 0x%04x", handle, value);

	atomic_set_bit(params->flags, BT_GATT_SUBSCRIBE_FLAG_WRITE_PENDING);

	return gatt_send(conn, buf, func, params, NULL);
    de78:	462b      	mov	r3, r5
    de7a:	4621      	mov	r1, r4
    de7c:	4630      	mov	r0, r6
    de7e:	4a04      	ldr	r2, [pc, #16]	; (de90 <gatt_write_ccc.constprop.0+0x64>)
}
    de80:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return gatt_send(conn, buf, func, params, NULL);
    de84:	f7ff bd22 	b.w	d8cc <gatt_send.constprop.0>
}
    de88:	f06f 000b 	mvn.w	r0, #11
    de8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    de90:	000218df 	.word	0x000218df

0000de94 <cf_write>:
{
    de94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    de98:	461f      	mov	r7, r3
    de9a:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
    de9e:	2b01      	cmp	r3, #1
{
    dea0:	4680      	mov	r8, r0
    dea2:	4616      	mov	r6, r2
	if (offset > sizeof(cfg->data)) {
    dea4:	d847      	bhi.n	df36 <cf_write+0xa2>
	if (offset + len > sizeof(cfg->data)) {
    dea6:	443b      	add	r3, r7
    dea8:	2b01      	cmp	r3, #1
    deaa:	463d      	mov	r5, r7
    deac:	dc46      	bgt.n	df3c <cf_write+0xa8>
	cfg = find_cf_cfg(conn);
    deae:	f7ff fe0d 	bl	dacc <find_cf_cfg>
	if (!cfg) {
    deb2:	4604      	mov	r4, r0
    deb4:	b990      	cbnz	r0, dedc <cf_write+0x48>
		cfg = find_cf_cfg(NULL);
    deb6:	f7ff fe09 	bl	dacc <find_cf_cfg>
	if (!cfg) {
    deba:	4604      	mov	r4, r0
    debc:	b970      	cbnz	r0, dedc <cf_write+0x48>
    debe:	4b22      	ldr	r3, [pc, #136]	; (df48 <cf_write+0xb4>)
    dec0:	4922      	ldr	r1, [pc, #136]	; (df4c <cf_write+0xb8>)
		BT_WARN("No space to store Client Supported Features");
    dec2:	4823      	ldr	r0, [pc, #140]	; (df50 <cf_write+0xbc>)
    dec4:	1ac9      	subs	r1, r1, r3
    dec6:	08c9      	lsrs	r1, r1, #3
    dec8:	0189      	lsls	r1, r1, #6
    deca:	f041 0102 	orr.w	r1, r1, #2
    dece:	f010 fafc 	bl	1e4ca <log_0>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    ded2:	f06f 0510 	mvn.w	r5, #16
}
    ded6:	4628      	mov	r0, r5
    ded8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
static bool cf_set_value(struct gatt_cf_cfg *cfg, const uint8_t *value, uint16_t len)
    dedc:	4632      	mov	r2, r6
    dede:	eb07 0c06 	add.w	ip, r7, r6
	for (i = 0U; i < len && i <= last_byte; i++) {
    dee2:	4562      	cmp	r2, ip
    dee4:	d114      	bne.n	df10 <cf_write+0x7c>
	for (i = 0U; i < len && i < last_byte; i++) {
    dee6:	b12f      	cbz	r7, def4 <cf_write+0x60>
		cfg->data[i] |= value[i] & (BIT(last_bit + 1) - 1);
    dee8:	7833      	ldrb	r3, [r6, #0]
    deea:	7a22      	ldrb	r2, [r4, #8]
    deec:	f003 0307 	and.w	r3, r3, #7
    def0:	4313      	orrs	r3, r2
    def2:	7223      	strb	r3, [r4, #8]
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    def4:	f108 0188 	add.w	r1, r8, #136	; 0x88
    def8:	1c60      	adds	r0, r4, #1
    defa:	f013 fbae 	bl	2165a <bt_addr_le_copy>
	cfg->id = conn->id;
    defe:	4620      	mov	r0, r4
    df00:	f898 3008 	ldrb.w	r3, [r8, #8]
    df04:	f800 3b0c 	strb.w	r3, [r0], #12
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    df08:	2100      	movs	r1, #0
    df0a:	f013 fc05 	bl	21718 <atomic_set_bit>
	return len;
    df0e:	e7e2      	b.n	ded6 <cf_write+0x42>
		uint8_t chg_bits = value[i] ^ cfg->data[i];
    df10:	f812 1b01 	ldrb.w	r1, [r2], #1
    df14:	7a20      	ldrb	r0, [r4, #8]
    df16:	2300      	movs	r3, #0
    df18:	4041      	eors	r1, r0
			if ((BIT(bit) & chg_bits) &&
    df1a:	fa21 fe03 	lsr.w	lr, r1, r3
    df1e:	f01e 0f01 	tst.w	lr, #1
    df22:	d004      	beq.n	df2e <cf_write+0x9a>
    df24:	fa20 fe03 	lsr.w	lr, r0, r3
    df28:	f01e 0f01 	tst.w	lr, #1
    df2c:	d109      	bne.n	df42 <cf_write+0xae>
		for (bit = 0U; bit <= last_bit; bit++) {
    df2e:	3301      	adds	r3, #1
    df30:	2b03      	cmp	r3, #3
    df32:	d1f2      	bne.n	df1a <cf_write+0x86>
    df34:	e7d5      	b.n	dee2 <cf_write+0x4e>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    df36:	f06f 0506 	mvn.w	r5, #6
    df3a:	e7cc      	b.n	ded6 <cf_write+0x42>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    df3c:	f06f 050c 	mvn.w	r5, #12
    df40:	e7c9      	b.n	ded6 <cf_write+0x42>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
    df42:	f06f 0512 	mvn.w	r5, #18
    df46:	e7c6      	b.n	ded6 <cf_write+0x42>
    df48:	000236e8 	.word	0x000236e8
    df4c:	00023790 	.word	0x00023790
    df50:	000269bd 	.word	0x000269bd

0000df54 <sc_indicate_rsp>:
{
    df54:	b510      	push	{r4, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    df56:	4915      	ldr	r1, [pc, #84]	; (dfac <sc_indicate_rsp+0x58>)
    df58:	f3bf 8f5b 	dmb	ish
    df5c:	4604      	mov	r4, r0
    df5e:	f101 0348 	add.w	r3, r1, #72	; 0x48
    df62:	e853 2f00 	ldrex	r2, [r3]
    df66:	f022 0202 	bic.w	r2, r2, #2
    df6a:	e843 2000 	strex	r0, r2, [r3]
    df6e:	2800      	cmp	r0, #0
    df70:	d1f7      	bne.n	df62 <sc_indicate_rsp+0xe>
    df72:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    df76:	f3bf 8f5b 	dmb	ish
    df7a:	6c8b      	ldr	r3, [r1, #72]	; 0x48
    df7c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    df80:	07da      	lsls	r2, r3, #31
    df82:	d505      	bpl.n	df90 <sc_indicate_rsp+0x3c>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    df84:	480a      	ldr	r0, [pc, #40]	; (dfb0 <sc_indicate_rsp+0x5c>)
    df86:	2200      	movs	r2, #0
    df88:	2300      	movs	r3, #0
    df8a:	3118      	adds	r1, #24
    df8c:	f00f fd2e 	bl	1d9ec <k_delayed_work_submit_to_queue>
	cfg = find_cf_cfg(conn);
    df90:	4620      	mov	r0, r4
    df92:	f7ff fd9b 	bl	dacc <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
    df96:	b140      	cbz	r0, dfaa <sc_indicate_rsp+0x56>
    df98:	7a03      	ldrb	r3, [r0, #8]
    df9a:	07db      	lsls	r3, r3, #31
    df9c:	d505      	bpl.n	dfaa <sc_indicate_rsp+0x56>
}
    df9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    dfa2:	2100      	movs	r1, #0
    dfa4:	300c      	adds	r0, #12
    dfa6:	f013 bbb7 	b.w	21718 <atomic_set_bit>
}
    dfaa:	bd10      	pop	{r4, pc}
    dfac:	200011e0 	.word	0x200011e0
    dfb0:	20001c50 	.word	0x20001c50

0000dfb4 <disconnected_cb>:
{
    dfb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    dfb8:	4b2b      	ldr	r3, [pc, #172]	; (e068 <disconnected_cb+0xb4>)
    dfba:	6882      	ldr	r2, [r0, #8]
    dfbc:	429a      	cmp	r2, r3
{
    dfbe:	4607      	mov	r7, r0
    dfc0:	460e      	mov	r6, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    dfc2:	d12f      	bne.n	e024 <disconnected_cb+0x70>
	ccc = attr->user_data;
    dfc4:	68c5      	ldr	r5, [r0, #12]
	if (!ccc->value) {
    dfc6:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
    dfc8:	b363      	cbz	r3, e024 <disconnected_cb+0x70>
				if (ccc == &sc_ccc) {
    dfca:	f8df b0a0 	ldr.w	fp, [pc, #160]	; e06c <disconnected_cb+0xb8>
    dfce:	1c6c      	adds	r4, r5, #1
    dfd0:	f105 0a33 	add.w	sl, r5, #51	; 0x33
	value_used = false;
    dfd4:	f04f 0800 	mov.w	r8, #0
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    dfd8:	f101 0988 	add.w	r9, r1, #136	; 0x88
		if (!cfg->value) {
    dfdc:	f8b4 3007 	ldrh.w	r3, [r4, #7]
    dfe0:	b19b      	cbz	r3, e00a <disconnected_cb+0x56>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    dfe2:	f814 1c01 	ldrb.w	r1, [r4, #-1]
    dfe6:	4622      	mov	r2, r4
    dfe8:	4630      	mov	r0, r6
    dfea:	f012 fae4 	bl	205b6 <bt_conn_is_peer_addr_le>
    dfee:	b9e8      	cbnz	r0, e02c <disconnected_cb+0x78>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    dff0:	f814 0c01 	ldrb.w	r0, [r4, #-1]
    dff4:	4621      	mov	r1, r4
    dff6:	f7fc feab 	bl	ad50 <bt_conn_lookup_addr_le>
			if (tmp) {
    dffa:	b130      	cbz	r0, e00a <disconnected_cb+0x56>
				if (tmp->state == BT_CONN_CONNECTED) {
    dffc:	7b43      	ldrb	r3, [r0, #13]
					value_used = true;
    dffe:	2b06      	cmp	r3, #6
    e000:	bf08      	it	eq
    e002:	f04f 0801 	moveq.w	r8, #1
				bt_conn_unref(tmp);
    e006:	f012 faf6 	bl	205f6 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
    e00a:	340a      	adds	r4, #10
    e00c:	4554      	cmp	r4, sl
    e00e:	d1e5      	bne.n	dfdc <disconnected_cb+0x28>
	if (!value_used) {
    e010:	f1b8 0f00 	cmp.w	r8, #0
    e014:	d106      	bne.n	e024 <disconnected_cb+0x70>
		if (ccc->cfg_changed) {
    e016:	6b6b      	ldr	r3, [r5, #52]	; 0x34
		ccc->value = 0U;
    e018:	f8a5 8032 	strh.w	r8, [r5, #50]	; 0x32
		if (ccc->cfg_changed) {
    e01c:	b113      	cbz	r3, e024 <disconnected_cb+0x70>
			ccc->cfg_changed(attr, ccc->value);
    e01e:	4641      	mov	r1, r8
    e020:	4638      	mov	r0, r7
    e022:	4798      	blx	r3
}
    e024:	2001      	movs	r0, #1
    e026:	b003      	add	sp, #12
    e028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    e02c:	7a30      	ldrb	r0, [r6, #8]
    e02e:	4649      	mov	r1, r9
    e030:	f012 f9f7 	bl	20422 <bt_addr_le_is_bonded>
    e034:	b990      	cbnz	r0, e05c <disconnected_cb+0xa8>
				if (ccc == &sc_ccc) {
    e036:	455d      	cmp	r5, fp
    e038:	d102      	bne.n	e040 <disconnected_cb+0x8c>
					sc_clear(conn);
    e03a:	4630      	mov	r0, r6
    e03c:	f013 fc82 	bl	21944 <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
    e040:	2300      	movs	r3, #0
    e042:	4669      	mov	r1, sp
    e044:	4620      	mov	r0, r4
    e046:	9300      	str	r3, [sp, #0]
    e048:	f8cd 3003 	str.w	r3, [sp, #3]
    e04c:	f013 fb05 	bl	2165a <bt_addr_le_copy>
	cfg->id = 0U;
    e050:	2300      	movs	r3, #0
    e052:	f804 3c01 	strb.w	r3, [r4, #-1]
	cfg->value = 0U;
    e056:	f8a4 3007 	strh.w	r3, [r4, #7]
}
    e05a:	e7d6      	b.n	e00a <disconnected_cb+0x56>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    e05c:	4649      	mov	r1, r9
    e05e:	4620      	mov	r0, r4
    e060:	f013 fafb 	bl	2165a <bt_addr_le_copy>
    e064:	e7d1      	b.n	e00a <disconnected_cb+0x56>
    e066:	bf00      	nop
    e068:	0000dd59 	.word	0x0000dd59
    e06c:	20000230 	.word	0x20000230

0000e070 <bt_gatt_init>:
{
    e070:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    e072:	4b18      	ldr	r3, [pc, #96]	; (e0d4 <bt_gatt_init+0x64>)
    e074:	f3bf 8f5b 	dmb	ish
    e078:	2201      	movs	r2, #1
    e07a:	e853 1f00 	ldrex	r1, [r3]
    e07e:	2900      	cmp	r1, #0
    e080:	d103      	bne.n	e08a <bt_gatt_init+0x1a>
    e082:	e843 2000 	strex	r0, r2, [r3]
    e086:	2800      	cmp	r0, #0
    e088:	d1f7      	bne.n	e07a <bt_gatt_init+0xa>
    e08a:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
    e08e:	d11f      	bne.n	e0d0 <bt_gatt_init+0x60>
    e090:	4a11      	ldr	r2, [pc, #68]	; (e0d8 <bt_gatt_init+0x68>)
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    e092:	4912      	ldr	r1, [pc, #72]	; (e0dc <bt_gatt_init+0x6c>)
    e094:	8813      	ldrh	r3, [r2, #0]
    e096:	4c12      	ldr	r4, [pc, #72]	; (e0e0 <bt_gatt_init+0x70>)
	if (!atomic_cas(&init, 0, 1)) {
    e098:	2000      	movs	r0, #0
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    e09a:	42a1      	cmp	r1, r4
    e09c:	d312      	bcc.n	e0c4 <bt_gatt_init+0x54>
    e09e:	b100      	cbz	r0, e0a2 <bt_gatt_init+0x32>
    e0a0:	8013      	strh	r3, [r2, #0]
	k_delayed_work_init(&db_hash_work, db_hash_process);
    e0a2:	4910      	ldr	r1, [pc, #64]	; (e0e4 <bt_gatt_init+0x74>)
    e0a4:	4810      	ldr	r0, [pc, #64]	; (e0e8 <bt_gatt_init+0x78>)
    e0a6:	f015 f823 	bl	230f0 <k_delayed_work_init>
    e0aa:	490f      	ldr	r1, [pc, #60]	; (e0e8 <bt_gatt_init+0x78>)
    e0ac:	480f      	ldr	r0, [pc, #60]	; (e0ec <bt_gatt_init+0x7c>)
    e0ae:	f44f 72a4 	mov.w	r2, #328	; 0x148
    e0b2:	2300      	movs	r3, #0
    e0b4:	f00f fc9a 	bl	1d9ec <k_delayed_work_submit_to_queue>
}
    e0b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		k_delayed_work_init(&gatt_sc.work, sc_process);
    e0bc:	490c      	ldr	r1, [pc, #48]	; (e0f0 <bt_gatt_init+0x80>)
    e0be:	480d      	ldr	r0, [pc, #52]	; (e0f4 <bt_gatt_init+0x84>)
    e0c0:	f015 b816 	b.w	230f0 <k_delayed_work_init>
		last_static_handle += svc->attr_count;
    e0c4:	6848      	ldr	r0, [r1, #4]
    e0c6:	4403      	add	r3, r0
    e0c8:	b29b      	uxth	r3, r3
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    e0ca:	3108      	adds	r1, #8
    e0cc:	2001      	movs	r0, #1
    e0ce:	e7e4      	b.n	e09a <bt_gatt_init+0x2a>
}
    e0d0:	bd10      	pop	{r4, pc}
    e0d2:	bf00      	nop
    e0d4:	2000230c 	.word	0x2000230c
    e0d8:	2000a2a0 	.word	0x2000a2a0
    e0dc:	000236d0 	.word	0x000236d0
    e0e0:	000236e8 	.word	0x000236e8
    e0e4:	00021a31 	.word	0x00021a31
    e0e8:	200011b0 	.word	0x200011b0
    e0ec:	20001c50 	.word	0x20001c50
    e0f0:	0000e371 	.word	0x0000e371
    e0f4:	200011f8 	.word	0x200011f8

0000e0f8 <bt_gatt_attr_value_handle>:
{
    e0f8:	b508      	push	{r3, lr}
	if ((attr != NULL)
    e0fa:	b180      	cbz	r0, e11e <bt_gatt_attr_value_handle+0x26>
	    && (attr->read == bt_gatt_attr_read_chrc)) {
    e0fc:	6841      	ldr	r1, [r0, #4]
    e0fe:	4b09      	ldr	r3, [pc, #36]	; (e124 <bt_gatt_attr_value_handle+0x2c>)
    e100:	4299      	cmp	r1, r3
    e102:	d10c      	bne.n	e11e <bt_gatt_attr_value_handle+0x26>
		handle = chrc->value_handle;
    e104:	68c3      	ldr	r3, [r0, #12]
    e106:	889b      	ldrh	r3, [r3, #4]
		if (handle == 0) {
    e108:	b91b      	cbnz	r3, e112 <bt_gatt_attr_value_handle+0x1a>
			handle = (attr->handle ? : find_static_attr(attr)) + 1U;
    e10a:	8a03      	ldrh	r3, [r0, #16]
    e10c:	b11b      	cbz	r3, e116 <bt_gatt_attr_value_handle+0x1e>
    e10e:	3301      	adds	r3, #1
    e110:	b29b      	uxth	r3, r3
}
    e112:	4618      	mov	r0, r3
    e114:	bd08      	pop	{r3, pc}
			handle = (attr->handle ? : find_static_attr(attr)) + 1U;
    e116:	f7ff fb9d 	bl	d854 <find_static_attr>
    e11a:	1c43      	adds	r3, r0, #1
    e11c:	e7f8      	b.n	e110 <bt_gatt_attr_value_handle+0x18>
	uint16_t handle = 0;
    e11e:	2300      	movs	r3, #0
    e120:	e7f7      	b.n	e112 <bt_gatt_attr_value_handle+0x1a>
    e122:	bf00      	nop
    e124:	000219b9 	.word	0x000219b9

0000e128 <bt_gatt_foreach_attr_type>:
{
    e128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e12c:	b089      	sub	sp, #36	; 0x24
    e12e:	4698      	mov	r8, r3
    e130:	f8bd 5048 	ldrh.w	r5, [sp, #72]	; 0x48
    e134:	9101      	str	r1, [sp, #4]
		num_matches = UINT16_MAX;
    e136:	f64f 73ff 	movw	r3, #65535	; 0xffff
    e13a:	2d00      	cmp	r5, #0
    e13c:	bf08      	it	eq
    e13e:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
    e140:	4b26      	ldr	r3, [pc, #152]	; (e1dc <bt_gatt_foreach_attr_type+0xb4>)
    e142:	881b      	ldrh	r3, [r3, #0]
    e144:	4283      	cmp	r3, r0
{
    e146:	4606      	mov	r6, r0
    e148:	4617      	mov	r7, r2
	if (start_handle <= last_static_handle) {
    e14a:	d33c      	bcc.n	e1c6 <bt_gatt_foreach_attr_type+0x9e>
    e14c:	f8df a094 	ldr.w	sl, [pc, #148]	; e1e4 <bt_gatt_foreach_attr_type+0xbc>
		uint16_t handle = 1;
    e150:	2401      	movs	r4, #1
				memcpy(&attr, &static_svc->attrs[i],
    e152:	f04f 0b14 	mov.w	fp, #20
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    e156:	4b22      	ldr	r3, [pc, #136]	; (e1e0 <bt_gatt_foreach_attr_type+0xb8>)
    e158:	f1aa 0208 	sub.w	r2, sl, #8
    e15c:	429a      	cmp	r2, r3
    e15e:	d232      	bcs.n	e1c6 <bt_gatt_foreach_attr_type+0x9e>
			if (handle + static_svc->attr_count < start_handle) {
    e160:	f85a 2c04 	ldr.w	r2, [sl, #-4]
    e164:	4422      	add	r2, r4
    e166:	42b2      	cmp	r2, r6
    e168:	d234      	bcs.n	e1d4 <bt_gatt_foreach_attr_type+0xac>
				handle += static_svc->attr_count;
    e16a:	b294      	uxth	r4, r2
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    e16c:	f10a 0a08 	add.w	sl, sl, #8
    e170:	e7f1      	b.n	e156 <bt_gatt_foreach_attr_type+0x2e>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    e172:	9903      	ldr	r1, [sp, #12]
    e174:	4638      	mov	r0, r7
    e176:	f011 ff49 	bl	2000c <bt_uuid_cmp>
    e17a:	b1c0      	cbz	r0, e1ae <bt_gatt_foreach_attr_type+0x86>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    e17c:	3401      	adds	r4, #1
    e17e:	f109 0901 	add.w	r9, r9, #1
    e182:	b2a4      	uxth	r4, r4
    e184:	f85a 2c04 	ldr.w	r2, [sl, #-4]
    e188:	454a      	cmp	r2, r9
    e18a:	d9ef      	bls.n	e16c <bt_gatt_foreach_attr_type+0x44>
				memcpy(&attr, &static_svc->attrs[i],
    e18c:	f85a 1c08 	ldr.w	r1, [sl, #-8]
    e190:	2214      	movs	r2, #20
    e192:	fb0b 1109 	mla	r1, fp, r9, r1
    e196:	a803      	add	r0, sp, #12
    e198:	f011 fe69 	bl	1fe6e <memcpy>
	if (attr->handle > end_handle) {
    e19c:	9b01      	ldr	r3, [sp, #4]
				attr.handle = handle;
    e19e:	f8ad 401c 	strh.w	r4, [sp, #28]
	if (attr->handle > end_handle) {
    e1a2:	429c      	cmp	r4, r3
    e1a4:	d80f      	bhi.n	e1c6 <bt_gatt_foreach_attr_type+0x9e>
	if (attr->handle < start_handle) {
    e1a6:	42b4      	cmp	r4, r6
    e1a8:	d3e8      	bcc.n	e17c <bt_gatt_foreach_attr_type+0x54>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    e1aa:	2f00      	cmp	r7, #0
    e1ac:	d1e1      	bne.n	e172 <bt_gatt_foreach_attr_type+0x4a>
	if (attr_data && attr_data != attr->user_data) {
    e1ae:	f1b8 0f00 	cmp.w	r8, #0
    e1b2:	d10b      	bne.n	e1cc <bt_gatt_foreach_attr_type+0xa4>
	*num_matches -= 1;
    e1b4:	3d01      	subs	r5, #1
    e1b6:	b2ad      	uxth	r5, r5
	result = func(attr, user_data);
    e1b8:	9914      	ldr	r1, [sp, #80]	; 0x50
    e1ba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    e1bc:	a803      	add	r0, sp, #12
    e1be:	4798      	blx	r3
	if (!*num_matches) {
    e1c0:	b10d      	cbz	r5, e1c6 <bt_gatt_foreach_attr_type+0x9e>
				if (gatt_foreach_iter(&attr, start_handle,
    e1c2:	2800      	cmp	r0, #0
    e1c4:	d1da      	bne.n	e17c <bt_gatt_foreach_attr_type+0x54>
}
    e1c6:	b009      	add	sp, #36	; 0x24
    e1c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (attr_data && attr_data != attr->user_data) {
    e1cc:	9a06      	ldr	r2, [sp, #24]
    e1ce:	4590      	cmp	r8, r2
    e1d0:	d1d4      	bne.n	e17c <bt_gatt_foreach_attr_type+0x54>
    e1d2:	e7ef      	b.n	e1b4 <bt_gatt_foreach_attr_type+0x8c>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    e1d4:	f04f 0900 	mov.w	r9, #0
    e1d8:	e7d4      	b.n	e184 <bt_gatt_foreach_attr_type+0x5c>
    e1da:	bf00      	nop
    e1dc:	2000a2a0 	.word	0x2000a2a0
    e1e0:	000236e8 	.word	0x000236e8
    e1e4:	000236d8 	.word	0x000236d8

0000e1e8 <db_hash_gen.isra.0>:
static void db_hash_gen(bool store)
    e1e8:	b510      	push	{r4, lr}
    e1ea:	b0c8      	sub	sp, #288	; 0x120
	uint8_t key[16] = {};
    e1ec:	2300      	movs	r3, #0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    e1ee:	aa1c      	add	r2, sp, #112	; 0x70
    e1f0:	4669      	mov	r1, sp
    e1f2:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
    e1f4:	e9cd 3300 	strd	r3, r3, [sp]
    e1f8:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    e1fc:	f011 fd1c 	bl	1fc38 <tc_cmac_setup>
    e200:	b958      	cbnz	r0, e21a <db_hash_gen.isra.0+0x32>
    e202:	4917      	ldr	r1, [pc, #92]	; (e260 <db_hash_gen.isra.0+0x78>)
    e204:	4b17      	ldr	r3, [pc, #92]	; (e264 <db_hash_gen.isra.0+0x7c>)
		BT_ERR("Unable to setup AES CMAC");
    e206:	4818      	ldr	r0, [pc, #96]	; (e268 <db_hash_gen.isra.0+0x80>)
    e208:	1ac9      	subs	r1, r1, r3
    e20a:	08c9      	lsrs	r1, r1, #3
    e20c:	0189      	lsls	r1, r1, #6
    e20e:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Unable to calculate hash");
    e212:	f010 f95a 	bl	1e4ca <log_0>
}
    e216:	b048      	add	sp, #288	; 0x120
    e218:	bd10      	pop	{r4, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
    e21a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e21e:	2001      	movs	r0, #1
    e220:	4a12      	ldr	r2, [pc, #72]	; (e26c <db_hash_gen.isra.0+0x84>)
    e222:	ab04      	add	r3, sp, #16
    e224:	f013 fbf9 	bl	21a1a <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
    e228:	4811      	ldr	r0, [pc, #68]	; (e270 <db_hash_gen.isra.0+0x88>)
    e22a:	a904      	add	r1, sp, #16
    e22c:	f011 fd9b 	bl	1fd66 <tc_cmac_final>
    e230:	b940      	cbnz	r0, e244 <db_hash_gen.isra.0+0x5c>
    e232:	490b      	ldr	r1, [pc, #44]	; (e260 <db_hash_gen.isra.0+0x78>)
    e234:	4b0b      	ldr	r3, [pc, #44]	; (e264 <db_hash_gen.isra.0+0x7c>)
		BT_ERR("Unable to calculate hash");
    e236:	480f      	ldr	r0, [pc, #60]	; (e274 <db_hash_gen.isra.0+0x8c>)
    e238:	1ac9      	subs	r1, r1, r3
    e23a:	08c9      	lsrs	r1, r1, #3
    e23c:	0189      	lsls	r1, r1, #6
    e23e:	f041 0101 	orr.w	r1, r1, #1
    e242:	e7e6      	b.n	e212 <db_hash_gen.isra.0+0x2a>
    e244:	4b0a      	ldr	r3, [pc, #40]	; (e270 <db_hash_gen.isra.0+0x88>)
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
    e246:	2208      	movs	r2, #8
    e248:	f103 0110 	add.w	r1, r3, #16
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
    e24c:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
    e24e:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
    e252:	f803 4b01 	strb.w	r4, [r3], #1
	for (i = 0; i < (length/2); i++) {
    e256:	3a01      	subs	r2, #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
    e258:	7008      	strb	r0, [r1, #0]
	for (i = 0; i < (length/2); i++) {
    e25a:	d1f7      	bne.n	e24c <db_hash_gen.isra.0+0x64>
    e25c:	e7db      	b.n	e216 <db_hash_gen.isra.0+0x2e>
    e25e:	bf00      	nop
    e260:	00023790 	.word	0x00023790
    e264:	000236e8 	.word	0x000236e8
    e268:	000269e9 	.word	0x000269e9
    e26c:	000215ab 	.word	0x000215ab
    e270:	2000a84d 	.word	0x2000a84d
    e274:	00026a02 	.word	0x00026a02

0000e278 <bt_gatt_indicate>:
{
    e278:	b5f0      	push	{r4, r5, r6, r7, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    e27a:	4b3a      	ldr	r3, [pc, #232]	; (e364 <bt_gatt_indicate+0xec>)
    e27c:	f3bf 8f5b 	dmb	ish
    e280:	681b      	ldr	r3, [r3, #0]
    e282:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    e286:	079a      	lsls	r2, r3, #30
{
    e288:	b08b      	sub	sp, #44	; 0x2c
    e28a:	4605      	mov	r5, r0
    e28c:	460e      	mov	r6, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    e28e:	d563      	bpl.n	e358 <bt_gatt_indicate+0xe0>
	attr = params->attr;
    e290:	6848      	ldr	r0, [r1, #4]
    e292:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
    e294:	b115      	cbz	r5, e29c <bt_gatt_indicate+0x24>
    e296:	7b6b      	ldrb	r3, [r5, #13]
    e298:	2b06      	cmp	r3, #6
    e29a:	d160      	bne.n	e35e <bt_gatt_indicate+0xe6>
	handle = attr->handle ? : find_static_attr(attr);
    e29c:	8a04      	ldrh	r4, [r0, #16]
    e29e:	b93c      	cbnz	r4, e2b0 <bt_gatt_indicate+0x38>
    e2a0:	f7ff fad8 	bl	d854 <find_static_attr>
	if (!handle) {
    e2a4:	4604      	mov	r4, r0
    e2a6:	b918      	cbnz	r0, e2b0 <bt_gatt_indicate+0x38>
		return -ENOENT;
    e2a8:	f06f 0001 	mvn.w	r0, #1
}
    e2ac:	b00b      	add	sp, #44	; 0x2c
    e2ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (params->uuid) {
    e2b0:	6832      	ldr	r2, [r6, #0]
    e2b2:	b1b2      	cbz	r2, e2e2 <bt_gatt_indicate+0x6a>
		bt_gatt_foreach_attr_type(handle, 0xffff, params->uuid,
    e2b4:	a905      	add	r1, sp, #20
    e2b6:	9102      	str	r1, [sp, #8]
    e2b8:	492b      	ldr	r1, [pc, #172]	; (e368 <bt_gatt_indicate+0xf0>)
    e2ba:	9101      	str	r1, [sp, #4]
    e2bc:	2101      	movs	r1, #1
		attr = NULL;
    e2be:	2300      	movs	r3, #0
		bt_gatt_foreach_attr_type(handle, 0xffff, params->uuid,
    e2c0:	9100      	str	r1, [sp, #0]
    e2c2:	4620      	mov	r0, r4
    e2c4:	f64f 71ff 	movw	r1, #65535	; 0xffff
		attr = NULL;
    e2c8:	9305      	str	r3, [sp, #20]
		bt_gatt_foreach_attr_type(handle, 0xffff, params->uuid,
    e2ca:	f7ff ff2d 	bl	e128 <bt_gatt_foreach_attr_type>
		if (!attr) {
    e2ce:	9805      	ldr	r0, [sp, #20]
    e2d0:	2800      	cmp	r0, #0
    e2d2:	d0e9      	beq.n	e2a8 <bt_gatt_indicate+0x30>
		handle = attr->handle ? : find_static_attr(attr);
    e2d4:	8a04      	ldrh	r4, [r0, #16]
    e2d6:	b924      	cbnz	r4, e2e2 <bt_gatt_indicate+0x6a>
    e2d8:	f7ff fabc 	bl	d854 <find_static_attr>
		if (!handle) {
    e2dc:	4604      	mov	r4, r0
    e2de:	2800      	cmp	r0, #0
    e2e0:	d0e2      	beq.n	e2a8 <bt_gatt_indicate+0x30>
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
    e2e2:	9b05      	ldr	r3, [sp, #20]
    e2e4:	af07      	add	r7, sp, #28
    e2e6:	6818      	ldr	r0, [r3, #0]
    e2e8:	2300      	movs	r3, #0
    e2ea:	f88d 301c 	strb.w	r3, [sp, #28]
    e2ee:	4639      	mov	r1, r7
    e2f0:	f642 0303 	movw	r3, #10243	; 0x2803
    e2f4:	f8ad 301e 	strh.w	r3, [sp, #30]
    e2f8:	f011 fe88 	bl	2000c <bt_uuid_cmp>
    e2fc:	b950      	cbnz	r0, e314 <bt_gatt_indicate+0x9c>
		struct bt_gatt_chrc *chrc = attr->user_data;
    e2fe:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
    e300:	68c3      	ldr	r3, [r0, #12]
    e302:	799b      	ldrb	r3, [r3, #6]
    e304:	069b      	lsls	r3, r3, #26
    e306:	d402      	bmi.n	e30e <bt_gatt_indicate+0x96>
			return -EINVAL;
    e308:	f06f 0015 	mvn.w	r0, #21
    e30c:	e7ce      	b.n	e2ac <bt_gatt_indicate+0x34>
		handle = bt_gatt_attr_value_handle(attr);
    e30e:	f7ff fef3 	bl	e0f8 <bt_gatt_attr_value_handle>
    e312:	4604      	mov	r4, r0
	if (conn) {
    e314:	b12d      	cbz	r5, e322 <bt_gatt_indicate+0xaa>
		return gatt_indicate(conn, handle, params);
    e316:	4632      	mov	r2, r6
    e318:	4621      	mov	r1, r4
    e31a:	4628      	mov	r0, r5
    e31c:	f7ff fb12 	bl	d944 <gatt_indicate>
    e320:	e7c4      	b.n	e2ac <bt_gatt_indicate+0x34>
	data.err = -ENOTCONN;
    e322:	f06f 0338 	mvn.w	r3, #56	; 0x38
    e326:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
    e328:	2302      	movs	r3, #2
    e32a:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(handle, 0xffff, BT_UUID_GATT_CCC, NULL, 1,
    e32e:	f642 1302 	movw	r3, #10498	; 0x2902
    e332:	f8ad 301a 	strh.w	r3, [sp, #26]
    e336:	4b0d      	ldr	r3, [pc, #52]	; (e36c <bt_gatt_indicate+0xf4>)
    e338:	9301      	str	r3, [sp, #4]
    e33a:	2301      	movs	r3, #1
    e33c:	9300      	str	r3, [sp, #0]
    e33e:	4620      	mov	r0, r4
    e340:	9702      	str	r7, [sp, #8]
    e342:	462b      	mov	r3, r5
    e344:	aa06      	add	r2, sp, #24
    e346:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
    e34a:	9609      	str	r6, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(handle, 0xffff, BT_UUID_GATT_CCC, NULL, 1,
    e34c:	f88d 5018 	strb.w	r5, [sp, #24]
    e350:	f7ff feea 	bl	e128 <bt_gatt_foreach_attr_type>
	return data.err;
    e354:	9807      	ldr	r0, [sp, #28]
    e356:	e7a9      	b.n	e2ac <bt_gatt_indicate+0x34>
		return -EAGAIN;
    e358:	f06f 000a 	mvn.w	r0, #10
    e35c:	e7a6      	b.n	e2ac <bt_gatt_indicate+0x34>
		return -ENOTCONN;
    e35e:	f06f 0038 	mvn.w	r0, #56	; 0x38
    e362:	e7a3      	b.n	e2ac <bt_gatt_indicate+0x34>
    e364:	20000098 	.word	0x20000098
    e368:	000216d3 	.word	0x000216d3
    e36c:	0000dc65 	.word	0x0000dc65

0000e370 <sc_process>:
{
    e370:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
    e372:	f850 2c04 	ldr.w	r2, [r0, #-4]
    e376:	9201      	str	r2, [sp, #4]
{
    e378:	4603      	mov	r3, r0
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    e37a:	f1a0 0118 	sub.w	r1, r0, #24
    e37e:	f100 0430 	add.w	r4, r0, #48	; 0x30
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    e382:	f3bf 8f5b 	dmb	ish
    e386:	e854 2f00 	ldrex	r2, [r4]
    e38a:	f022 0201 	bic.w	r2, r2, #1
    e38e:	e844 2000 	strex	r0, r2, [r4]
    e392:	2800      	cmp	r0, #0
    e394:	d1f7      	bne.n	e386 <sc_process+0x16>
    e396:	f3bf 8f5b 	dmb	ish
	sc->params.attr = &_1_gatt_svc.attrs[2];
    e39a:	4a0d      	ldr	r2, [pc, #52]	; (e3d0 <sc_process+0x60>)
    e39c:	f843 2c14 	str.w	r2, [r3, #-20]
	sc->params.func = sc_indicate_rsp;
    e3a0:	4a0c      	ldr	r2, [pc, #48]	; (e3d4 <sc_process+0x64>)
    e3a2:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.data = &sc_range[0];
    e3a6:	aa01      	add	r2, sp, #4
	sc->start = 0U;
    e3a8:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
    e3aa:	f843 2c0c 	str.w	r2, [r3, #-12]
	sc->params.len = sizeof(sc_range);
    e3ae:	2204      	movs	r2, #4
	sc->start = 0U;
    e3b0:	f823 0c04 	strh.w	r0, [r3, #-4]
	sc->end = 0U;
    e3b4:	f823 0c02 	strh.w	r0, [r3, #-2]
	sc->params.len = sizeof(sc_range);
    e3b8:	f823 2c08 	strh.w	r2, [r3, #-8]
	if (bt_gatt_indicate(NULL, &sc->params)) {
    e3bc:	f7ff ff5c 	bl	e278 <bt_gatt_indicate>
    e3c0:	b918      	cbnz	r0, e3ca <sc_process+0x5a>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
    e3c2:	2101      	movs	r1, #1
    e3c4:	4620      	mov	r0, r4
    e3c6:	f013 f9a7 	bl	21718 <atomic_set_bit>
}
    e3ca:	b002      	add	sp, #8
    e3cc:	bd10      	pop	{r4, pc}
    e3ce:	bf00      	nop
    e3d0:	00023e38 	.word	0x00023e38
    e3d4:	0000df55 	.word	0x0000df55

0000e3d8 <update_ccc>:
{
    e3d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    e3dc:	4a41      	ldr	r2, [pc, #260]	; (e4e4 <update_ccc+0x10c>)
{
    e3de:	460f      	mov	r7, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    e3e0:	6881      	ldr	r1, [r0, #8]
    e3e2:	4291      	cmp	r1, r2
{
    e3e4:	b085      	sub	sp, #20
    e3e6:	4682      	mov	sl, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    e3e8:	d178      	bne.n	e4dc <update_ccc+0x104>
    e3ea:	4c3f      	ldr	r4, [pc, #252]	; (e4e8 <update_ccc+0x110>)
    e3ec:	493f      	ldr	r1, [pc, #252]	; (e4ec <update_ccc+0x114>)
	ccc = attr->user_data;
    e3ee:	f8d0 800c 	ldr.w	r8, [r0, #12]
	struct bt_conn *conn = data->conn;
    e3f2:	683d      	ldr	r5, [r7, #0]
				BT_WARN("CCC %p not writable", attr);
    e3f4:	f8df b10c 	ldr.w	fp, [pc, #268]	; e504 <update_ccc+0x12c>
    e3f8:	1a64      	subs	r4, r4, r1
    e3fa:	08e4      	lsrs	r4, r4, #3
    e3fc:	f108 0333 	add.w	r3, r8, #51	; 0x33
    e400:	ea4f 1984 	mov.w	r9, r4, lsl #6
    e404:	f108 0601 	add.w	r6, r8, #1
    e408:	9300      	str	r3, [sp, #0]
    e40a:	f049 0902 	orr.w	r9, r9, #2
		if (!cfg->value ||
    e40e:	f8b6 2007 	ldrh.w	r2, [r6, #7]
    e412:	b19a      	cbz	r2, e43c <update_ccc+0x64>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    e414:	f816 1c01 	ldrb.w	r1, [r6, #-1]
    e418:	4632      	mov	r2, r6
    e41a:	4628      	mov	r0, r5
    e41c:	f012 f8cb 	bl	205b6 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
    e420:	b160      	cbz	r0, e43c <update_ccc+0x64>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
    e422:	222a      	movs	r2, #42	; 0x2a
    e424:	4651      	mov	r1, sl
    e426:	4628      	mov	r0, r5
    e428:	f013 fb04 	bl	21a34 <bt_gatt_check_perm>
		if (err) {
    e42c:	b1d8      	cbz	r0, e466 <update_ccc+0x8e>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
    e42e:	2803      	cmp	r0, #3
    e430:	d109      	bne.n	e446 <update_ccc+0x6e>
				BT_WARN("CCC %p not writable", attr);
    e432:	464a      	mov	r2, r9
    e434:	4651      	mov	r1, sl
    e436:	4658      	mov	r0, fp
    e438:	f010 f854 	bl	1e4e4 <log_1>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
    e43c:	9b00      	ldr	r3, [sp, #0]
    e43e:	360a      	adds	r6, #10
    e440:	429e      	cmp	r6, r3
    e442:	d1e4      	bne.n	e40e <update_ccc+0x36>
    e444:	e04a      	b.n	e4dc <update_ccc+0x104>
				sec = BT_SECURITY_L3;
    e446:	2805      	cmp	r0, #5
    e448:	bf14      	ite	ne
    e44a:	2202      	movne	r2, #2
    e44c:	2203      	moveq	r2, #3
			    bt_conn_get_security(conn) < sec) {
    e44e:	4628      	mov	r0, r5
				sec = BT_SECURITY_L3;
    e450:	9201      	str	r2, [sp, #4]
			    bt_conn_get_security(conn) < sec) {
    e452:	f012 f8ae 	bl	205b2 <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
    e456:	9a01      	ldr	r2, [sp, #4]
    e458:	4282      	cmp	r2, r0
    e45a:	d904      	bls.n	e466 <update_ccc+0x8e>
				if (data->sec < sec) {
    e45c:	7939      	ldrb	r1, [r7, #4]
    e45e:	4291      	cmp	r1, r2
    e460:	d2ec      	bcs.n	e43c <update_ccc+0x64>
					data->sec = sec;
    e462:	713a      	strb	r2, [r7, #4]
    e464:	e7ea      	b.n	e43c <update_ccc+0x64>
		gatt_ccc_changed(attr, ccc);
    e466:	4641      	mov	r1, r8
    e468:	4650      	mov	r0, sl
    e46a:	f013 f87c 	bl	21566 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
    e46e:	4b20      	ldr	r3, [pc, #128]	; (e4f0 <update_ccc+0x118>)
    e470:	4598      	cmp	r8, r3
    e472:	d133      	bne.n	e4dc <update_ccc+0x104>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
    e474:	7a28      	ldrb	r0, [r5, #8]
    e476:	f105 0188 	add.w	r1, r5, #136	; 0x88
    e47a:	f7ff facd 	bl	da18 <find_sc_cfg>
	if (!cfg) {
    e47e:	4606      	mov	r6, r0
    e480:	b360      	cbz	r0, e4dc <update_ccc+0x104>
	if (!(cfg->data.start || cfg->data.end)) {
    e482:	8902      	ldrh	r2, [r0, #8]
    e484:	8943      	ldrh	r3, [r0, #10]
    e486:	ea52 0103 	orrs.w	r1, r2, r3
    e48a:	d027      	beq.n	e4dc <update_ccc+0x104>
	index = bt_conn_index(conn);
    e48c:	4628      	mov	r0, r5
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
    e48e:	f8ad 200c 	strh.w	r2, [sp, #12]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
    e492:	f8ad 300e 	strh.w	r3, [sp, #14]
	index = bt_conn_index(conn);
    e496:	f7fc ff3d 	bl	b314 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
    e49a:	4916      	ldr	r1, [pc, #88]	; (e4f4 <update_ccc+0x11c>)
    e49c:	4a16      	ldr	r2, [pc, #88]	; (e4f8 <update_ccc+0x120>)
    e49e:	2314      	movs	r3, #20
    e4a0:	fb03 1300 	mla	r3, r3, r0, r1
    e4a4:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
    e4a6:	4a15      	ldr	r2, [pc, #84]	; (e4fc <update_ccc+0x124>)
    e4a8:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
    e4aa:	aa03      	add	r2, sp, #12
    e4ac:	60da      	str	r2, [r3, #12]
	sc_restore_params[index].len = sizeof(sc_range);
    e4ae:	2204      	movs	r2, #4
    e4b0:	821a      	strh	r2, [r3, #16]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    e4b2:	b203      	sxth	r3, r0
    e4b4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    e4b8:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    e4bc:	4628      	mov	r0, r5
    e4be:	f7ff fedb 	bl	e278 <bt_gatt_indicate>
    e4c2:	b128      	cbz	r0, e4d0 <update_ccc+0xf8>
		BT_ERR("SC restore indication failed");
    e4c4:	01a1      	lsls	r1, r4, #6
    e4c6:	480e      	ldr	r0, [pc, #56]	; (e500 <update_ccc+0x128>)
    e4c8:	f041 0101 	orr.w	r1, r1, #1
    e4cc:	f00f fffd 	bl	1e4ca <log_0>
	memset(&cfg->data, 0, sizeof(cfg->data));
    e4d0:	2204      	movs	r2, #4
    e4d2:	2100      	movs	r1, #0
    e4d4:	f106 0008 	add.w	r0, r6, #8
    e4d8:	f011 fcf4 	bl	1fec4 <memset>
}
    e4dc:	2001      	movs	r0, #1
    e4de:	b005      	add	sp, #20
    e4e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e4e4:	0000dd59 	.word	0x0000dd59
    e4e8:	00023790 	.word	0x00023790
    e4ec:	000236e8 	.word	0x000236e8
    e4f0:	20000230 	.word	0x20000230
    e4f4:	20002320 	.word	0x20002320
    e4f8:	00023e38 	.word	0x00023e38
    e4fc:	00021735 	.word	0x00021735
    e500:	00026a2f 	.word	0x00026a2f
    e504:	00026a1b 	.word	0x00026a1b

0000e508 <bt_gatt_mult_notification>:
{
    e508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e50c:	460c      	mov	r4, r1
    e50e:	b087      	sub	sp, #28
	sub = gatt_sub_find(conn);
    e510:	2100      	movs	r1, #0
{
    e512:	4682      	mov	sl, r0
    e514:	4616      	mov	r6, r2
	sub = gatt_sub_find(conn);
    e516:	f7ff fa55 	bl	d9c4 <gatt_sub_find_free>
	if (!sub) {
    e51a:	4607      	mov	r7, r0
    e51c:	b1f8      	cbz	r0, e55e <bt_gatt_mult_notification+0x56>
	net_buf_simple_init_with_data(&buf, (void *)data, length);
    e51e:	4632      	mov	r2, r6
    e520:	4621      	mov	r1, r4
    e522:	a803      	add	r0, sp, #12
    e524:	f013 ffeb 	bl	224fe <net_buf_simple_init_with_data>
	while (buf.len > sizeof(*nfy)) {
    e528:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    e52c:	2b04      	cmp	r3, #4
    e52e:	d916      	bls.n	e55e <bt_gatt_mult_notification+0x56>
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
    e530:	2104      	movs	r1, #4
    e532:	a803      	add	r0, sp, #12
    e534:	f014 f869 	bl	2260a <net_buf_simple_pull_mem>
		if (len > buf.len) {
    e538:	f8bd 3010 	ldrh.w	r3, [sp, #16]
		len = sys_cpu_to_le16(nfy->len);
    e53c:	f8b0 8002 	ldrh.w	r8, [r0, #2]
		if (len > buf.len) {
    e540:	4543      	cmp	r3, r8
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
    e542:	4605      	mov	r5, r0
		if (len > buf.len) {
    e544:	d20e      	bcs.n	e564 <bt_gatt_mult_notification+0x5c>
    e546:	4a1d      	ldr	r2, [pc, #116]	; (e5bc <bt_gatt_mult_notification+0xb4>)
    e548:	4b1d      	ldr	r3, [pc, #116]	; (e5c0 <bt_gatt_mult_notification+0xb8>)
			BT_ERR("Invalid data len %u > %u", len, length);
    e54a:	481e      	ldr	r0, [pc, #120]	; (e5c4 <bt_gatt_mult_notification+0xbc>)
    e54c:	1a9b      	subs	r3, r3, r2
    e54e:	08db      	lsrs	r3, r3, #3
    e550:	019b      	lsls	r3, r3, #6
    e552:	f043 0301 	orr.w	r3, r3, #1
    e556:	4632      	mov	r2, r6
    e558:	4641      	mov	r1, r8
    e55a:	f00f ffd7 	bl	1e50c <log_2>
}
    e55e:	b007      	add	sp, #28
    e560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
    e564:	68bb      	ldr	r3, [r7, #8]
    e566:	b31b      	cbz	r3, e5b0 <bt_gatt_mult_notification+0xa8>
    e568:	f1b3 0910 	subs.w	r9, r3, #16
    e56c:	d020      	beq.n	e5b0 <bt_gatt_mult_notification+0xa8>
    e56e:	681c      	ldr	r4, [r3, #0]
    e570:	b104      	cbz	r4, e574 <bt_gatt_mult_notification+0x6c>
    e572:	3c10      	subs	r4, #16
		handle = sys_cpu_to_le16(nfy->handle);
    e574:	462b      	mov	r3, r5
    e576:	f833 bb04 	ldrh.w	fp, [r3], #4
    e57a:	9301      	str	r3, [sp, #4]
			if (handle != params->value_handle) {
    e57c:	f8b9 3004 	ldrh.w	r3, [r9, #4]
    e580:	455b      	cmp	r3, fp
    e582:	d10b      	bne.n	e59c <bt_gatt_mult_notification+0x94>
			if (params->notify(conn, params, nfy->value, len) ==
    e584:	9a01      	ldr	r2, [sp, #4]
    e586:	f8d9 5000 	ldr.w	r5, [r9]
    e58a:	4643      	mov	r3, r8
    e58c:	4649      	mov	r1, r9
    e58e:	4650      	mov	r0, sl
    e590:	47a8      	blx	r5
    e592:	b918      	cbnz	r0, e59c <bt_gatt_mult_notification+0x94>
				bt_gatt_unsubscribe(conn, params);
    e594:	4649      	mov	r1, r9
    e596:	4650      	mov	r0, sl
    e598:	f013 fa77 	bl	21a8a <bt_gatt_unsubscribe>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
    e59c:	b144      	cbz	r4, e5b0 <bt_gatt_mult_notification+0xa8>
Z_GENLIST_PEEK_NEXT(slist, snode)
    e59e:	f114 0310 	adds.w	r3, r4, #16
    e5a2:	d002      	beq.n	e5aa <bt_gatt_mult_notification+0xa2>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    e5a4:	6923      	ldr	r3, [r4, #16]
    e5a6:	b103      	cbz	r3, e5aa <bt_gatt_mult_notification+0xa2>
    e5a8:	3b10      	subs	r3, #16
{
    e5aa:	46a1      	mov	r9, r4
    e5ac:	461c      	mov	r4, r3
    e5ae:	e7e5      	b.n	e57c <bt_gatt_mult_notification+0x74>
		net_buf_simple_pull_mem(&buf, len);
    e5b0:	4641      	mov	r1, r8
    e5b2:	a803      	add	r0, sp, #12
    e5b4:	f014 f829 	bl	2260a <net_buf_simple_pull_mem>
    e5b8:	e7b6      	b.n	e528 <bt_gatt_mult_notification+0x20>
    e5ba:	bf00      	nop
    e5bc:	000236e8 	.word	0x000236e8
    e5c0:	00023790 	.word	0x00023790
    e5c4:	00026a4c 	.word	0x00026a4c

0000e5c8 <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
    e5c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
		}

		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
	}

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    e5ca:	4a1e      	ldr	r2, [pc, #120]	; (e644 <bt_gatt_connected+0x7c>)
	data.conn = conn;
    e5cc:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    e5ce:	f64f 71ff 	movw	r1, #65535	; 0xffff
{
    e5d2:	4605      	mov	r5, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    e5d4:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
    e5d6:	2001      	movs	r0, #1
    e5d8:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    e5dc:	f013 fa1d 	bl	21a1a <bt_gatt_foreach_attr>
	 * client prior to sending an indication or notification. If the client
	 * does not have an LTK indicating that the client has lost the bond,
	 * enabling encryption will fail.
	 */
	if (IS_ENABLED(CONFIG_BT_SMP) &&
	    bt_conn_get_security(conn) < data.sec) {
    e5e0:	4628      	mov	r0, r5
    e5e2:	f011 ffe6 	bl	205b2 <bt_conn_get_security>
    e5e6:	f89d 1004 	ldrb.w	r1, [sp, #4]
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    e5ea:	4288      	cmp	r0, r1
    e5ec:	d202      	bcs.n	e5f4 <bt_gatt_connected+0x2c>
		bt_conn_set_security(conn, data.sec);
    e5ee:	4628      	mov	r0, r5
    e5f0:	f011 ffac 	bl	2054c <bt_conn_set_security>
	sub = gatt_sub_find(conn);
    e5f4:	2100      	movs	r1, #0
    e5f6:	4628      	mov	r0, r5
    e5f8:	f7ff f9e4 	bl	d9c4 <gatt_sub_find_free>
	if (!sub) {
    e5fc:	b128      	cbz	r0, e60a <bt_gatt_connected+0x42>
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
    e5fe:	6884      	ldr	r4, [r0, #8]
    e600:	b11c      	cbz	r4, e60a <bt_gatt_connected+0x42>
    e602:	3c10      	subs	r4, #16
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
    e604:	f105 0688 	add.w	r6, r5, #136	; 0x88
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
    e608:	b90c      	cbnz	r4, e60e <bt_gatt_connected+0x46>
	}

#if defined(CONFIG_BT_GATT_CLIENT)
	add_subscriptions(conn);
#endif /* CONFIG_BT_GATT_CLIENT */
}
    e60a:	b002      	add	sp, #8
    e60c:	bd70      	pop	{r4, r5, r6, pc}
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
    e60e:	7a28      	ldrb	r0, [r5, #8]
    e610:	4631      	mov	r1, r6
    e612:	f011 ff06 	bl	20422 <bt_addr_le_is_bonded>
    e616:	b160      	cbz	r0, e632 <bt_gatt_connected+0x6a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    e618:	f3bf 8f5b 	dmb	ish
    e61c:	68e3      	ldr	r3, [r4, #12]
    e61e:	f3bf 8f5b 	dmb	ish
    e622:	079b      	lsls	r3, r3, #30
    e624:	d405      	bmi.n	e632 <bt_gatt_connected+0x6a>
			gatt_write_ccc(conn, params->ccc_handle, params->value,
    e626:	8922      	ldrh	r2, [r4, #8]
    e628:	88e1      	ldrh	r1, [r4, #6]
    e62a:	4623      	mov	r3, r4
    e62c:	4628      	mov	r0, r5
    e62e:	f7ff fbfd 	bl	de2c <gatt_write_ccc.constprop.0>
Z_GENLIST_PEEK_NEXT(slist, snode)
    e632:	f114 0f10 	cmn.w	r4, #16
    e636:	d0e8      	beq.n	e60a <bt_gatt_connected+0x42>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    e638:	6924      	ldr	r4, [r4, #16]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
    e63a:	2c00      	cmp	r4, #0
    e63c:	d0e5      	beq.n	e60a <bt_gatt_connected+0x42>
    e63e:	3c10      	subs	r4, #16
    e640:	e7e2      	b.n	e608 <bt_gatt_connected+0x40>
    e642:	bf00      	nop
    e644:	0000e3d9 	.word	0x0000e3d9

0000e648 <bt_gatt_encrypt_change>:

void bt_gatt_encrypt_change(struct bt_conn *conn)
{
    e648:	b507      	push	{r0, r1, r2, lr}
	BT_DBG("conn %p", conn);

	data.conn = conn;
	data.sec = BT_SECURITY_L1;

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    e64a:	4a06      	ldr	r2, [pc, #24]	; (e664 <bt_gatt_encrypt_change+0x1c>)
	data.conn = conn;
    e64c:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    e64e:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
    e650:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    e652:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
    e656:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    e65a:	f013 f9de 	bl	21a1a <bt_gatt_foreach_attr>
}
    e65e:	b003      	add	sp, #12
    e660:	f85d fb04 	ldr.w	pc, [sp], #4
    e664:	0000e3d9 	.word	0x0000e3d9

0000e668 <db_hash_read>:
{
    e668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e66a:	4604      	mov	r4, r0
	err = k_delayed_work_cancel(&db_hash_work);
    e66c:	480f      	ldr	r0, [pc, #60]	; (e6ac <db_hash_read+0x44>)
{
    e66e:	f8bd 6018 	ldrh.w	r6, [sp, #24]
    e672:	4615      	mov	r5, r2
    e674:	461f      	mov	r7, r3
	err = k_delayed_work_cancel(&db_hash_work);
    e676:	f014 fd43 	bl	23100 <k_delayed_work_cancel>
	if (!err) {
    e67a:	b908      	cbnz	r0, e680 <db_hash_read+0x18>
		db_hash_gen(true);
    e67c:	f7ff fdb4 	bl	e1e8 <db_hash_gen.isra.0>
	bt_gatt_change_aware(conn, true);
    e680:	2101      	movs	r1, #1
    e682:	4620      	mov	r0, r4
    e684:	f013 faa7 	bl	21bd6 <bt_gatt_change_aware>
	if (offset > value_len) {
    e688:	2e10      	cmp	r6, #16
    e68a:	d80c      	bhi.n	e6a6 <db_hash_read+0x3e>
	len = MIN(buf_len, value_len - offset);
    e68c:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (uint8_t *)value + offset, len);
    e690:	4907      	ldr	r1, [pc, #28]	; (e6b0 <db_hash_read+0x48>)
	len = MIN(buf_len, value_len - offset);
    e692:	42bc      	cmp	r4, r7
    e694:	bfa8      	it	ge
    e696:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
    e698:	4622      	mov	r2, r4
    e69a:	4431      	add	r1, r6
    e69c:	4628      	mov	r0, r5
    e69e:	f011 fbe6 	bl	1fe6e <memcpy>
}
    e6a2:	4620      	mov	r0, r4
    e6a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    e6a6:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash,
    e6aa:	e7fa      	b.n	e6a2 <db_hash_read+0x3a>
    e6ac:	200011b0 	.word	0x200011b0
    e6b0:	2000a84d 	.word	0x2000a84d

0000e6b4 <bt_gatt_disconnected>:
	return 0;

}

void bt_gatt_disconnected(struct bt_conn *conn)
{
    e6b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    e6b8:	4a33      	ldr	r2, [pc, #204]	; (e788 <bt_gatt_disconnected+0xd4>)
    e6ba:	4603      	mov	r3, r0
{
    e6bc:	4604      	mov	r4, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    e6be:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e6c2:	2001      	movs	r0, #1
    e6c4:	f013 f9a9 	bl	21a1a <bt_gatt_foreach_attr>
	sub = gatt_sub_find(conn);
    e6c8:	2100      	movs	r1, #0
    e6ca:	4620      	mov	r0, r4
    e6cc:	f7ff f97a 	bl	d9c4 <gatt_sub_find_free>
	if (!sub) {
    e6d0:	4606      	mov	r6, r0
    e6d2:	b3a8      	cbz	r0, e740 <bt_gatt_disconnected+0x8c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
    e6d4:	6883      	ldr	r3, [r0, #8]
    e6d6:	b39b      	cbz	r3, e740 <bt_gatt_disconnected+0x8c>
    e6d8:	f1b3 0710 	subs.w	r7, r3, #16
    e6dc:	d030      	beq.n	e740 <bt_gatt_disconnected+0x8c>
    e6de:	681d      	ldr	r5, [r3, #0]
    e6e0:	b105      	cbz	r5, e6e4 <bt_gatt_disconnected+0x30>
    e6e2:	3d10      	subs	r5, #16
{
    e6e4:	f04f 0b00 	mov.w	fp, #0
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
    e6e8:	f104 0888 	add.w	r8, r4, #136	; 0x88
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
    e6ec:	f106 0901 	add.w	r9, r6, #1
			params->value = 0U;
    e6f0:	46da      	mov	sl, fp
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
    e6f2:	7a20      	ldrb	r0, [r4, #8]
    e6f4:	4641      	mov	r1, r8
    e6f6:	f011 fe94 	bl	20422 <bt_addr_le_is_bonded>
    e6fa:	b988      	cbnz	r0, e720 <bt_gatt_disconnected+0x6c>
			params->value = 0U;
    e6fc:	f8a7 a008 	strh.w	sl, [r7, #8]
			gatt_sub_remove(conn, sub, prev, params);
    e700:	463b      	mov	r3, r7
    e702:	465a      	mov	r2, fp
    e704:	4631      	mov	r1, r6
    e706:	4620      	mov	r0, r4
    e708:	f013 f8c9 	bl	2189e <gatt_sub_remove>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
    e70c:	b1c5      	cbz	r5, e740 <bt_gatt_disconnected+0x8c>
Z_GENLIST_PEEK_NEXT(slist, snode)
    e70e:	f115 0110 	adds.w	r1, r5, #16
    e712:	d002      	beq.n	e71a <bt_gatt_disconnected+0x66>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    e714:	6929      	ldr	r1, [r5, #16]
    e716:	b101      	cbz	r1, e71a <bt_gatt_disconnected+0x66>
    e718:	3910      	subs	r1, #16
{
    e71a:	462f      	mov	r7, r5
    e71c:	460d      	mov	r5, r1
    e71e:	e7e8      	b.n	e6f2 <bt_gatt_disconnected+0x3e>
    e720:	f3bf 8f5b 	dmb	ish
    e724:	68fb      	ldr	r3, [r7, #12]
    e726:	f3bf 8f5b 	dmb	ish
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
    e72a:	07db      	lsls	r3, r3, #31
    e72c:	d4e6      	bmi.n	e6fc <bt_gatt_disconnected+0x48>
	if (sub->peer.type == BT_ADDR_LE_PUBLIC) {
    e72e:	7873      	ldrb	r3, [r6, #1]
    e730:	b11b      	cbz	r3, e73a <bt_gatt_disconnected+0x86>
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
    e732:	4641      	mov	r1, r8
    e734:	4648      	mov	r0, r9
    e736:	f012 ff90 	bl	2165a <bt_addr_le_copy>
			prev = &params->node;
    e73a:	f107 0b10 	add.w	fp, r7, #16
    e73e:	e7e5      	b.n	e70c <bt_gatt_disconnected+0x58>
	cfg = find_cf_cfg(conn);
    e740:	4620      	mov	r0, r4
    e742:	f7ff f9c3 	bl	dacc <find_cf_cfg>
	if (!cfg) {
    e746:	4605      	mov	r5, r0
    e748:	b1e0      	cbz	r0, e784 <bt_gatt_disconnected+0xd0>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    e74a:	f104 0688 	add.w	r6, r4, #136	; 0x88
    e74e:	7a20      	ldrb	r0, [r4, #8]
    e750:	4631      	mov	r1, r6
    e752:	f011 fe66 	bl	20422 <bt_addr_le_is_bonded>
    e756:	b920      	cbnz	r0, e762 <bt_gatt_disconnected+0xae>
		clear_cf_cfg(cfg);
    e758:	4628      	mov	r0, r5
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
    e75a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		clear_cf_cfg(cfg);
    e75e:	f012 bf9b 	b.w	21698 <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    e762:	1c68      	adds	r0, r5, #1
    e764:	4631      	mov	r1, r6
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    e766:	350c      	adds	r5, #12
    e768:	f012 ff77 	bl	2165a <bt_addr_le_copy>
    e76c:	f3bf 8f5b 	dmb	ish
    e770:	e855 3f00 	ldrex	r3, [r5]
    e774:	f023 0302 	bic.w	r3, r3, #2
    e778:	e845 3200 	strex	r2, r3, [r5]
    e77c:	2a00      	cmp	r2, #0
    e77e:	d1f7      	bne.n	e770 <bt_gatt_disconnected+0xbc>
    e780:	f3bf 8f5b 	dmb	ish
}
    e784:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e788:	0000dfb5 	.word	0x0000dfb5

0000e78c <get_io_capa>:
static const uint8_t *sc_public_key;
static K_SEM_DEFINE(sc_local_pkey_ready, 0, 1);

static uint8_t get_io_capa(void)
{
	if (!bt_auth) {
    e78c:	4b10      	ldr	r3, [pc, #64]	; (e7d0 <get_io_capa+0x44>)
    e78e:	681b      	ldr	r3, [r3, #0]
    e790:	b1bb      	cbz	r3, e7c2 <get_io_capa+0x36>
		goto no_callbacks;
	}

	/* Passkey Confirmation is valid only for LE SC */
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
    e792:	681a      	ldr	r2, [r3, #0]
    e794:	b142      	cbz	r2, e7a8 <get_io_capa+0x1c>
    e796:	6859      	ldr	r1, [r3, #4]
    e798:	b131      	cbz	r1, e7a8 <get_io_capa+0x1c>
    e79a:	6899      	ldr	r1, [r3, #8]
    e79c:	b911      	cbnz	r1, e7a4 <get_io_capa+0x18>
	    (bt_auth->passkey_confirm || !sc_supported)) {
    e79e:	490d      	ldr	r1, [pc, #52]	; (e7d4 <get_io_capa+0x48>)
    e7a0:	7809      	ldrb	r1, [r1, #0]
    e7a2:	b939      	cbnz	r1, e7b4 <get_io_capa+0x28>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
    e7a4:	2004      	movs	r0, #4
    e7a6:	4770      	bx	lr
	}

	/* DisplayYesNo is useful only for LE SC */
	if (sc_supported && bt_auth->passkey_display &&
    e7a8:	490a      	ldr	r1, [pc, #40]	; (e7d4 <get_io_capa+0x48>)
    e7aa:	7809      	ldrb	r1, [r1, #0]
    e7ac:	b111      	cbz	r1, e7b4 <get_io_capa+0x28>
    e7ae:	b10a      	cbz	r2, e7b4 <get_io_capa+0x28>
    e7b0:	6899      	ldr	r1, [r3, #8]
    e7b2:	b941      	cbnz	r1, e7c6 <get_io_capa+0x3a>
	    bt_auth->passkey_confirm) {
		return BT_SMP_IO_DISPLAY_YESNO;
	}

	if (bt_auth->passkey_entry) {
    e7b4:	685b      	ldr	r3, [r3, #4]
    e7b6:	b943      	cbnz	r3, e7ca <get_io_capa+0x3e>
			return BT_SMP_IO_KEYBOARD_ONLY;
		}
	}

	if (bt_auth->passkey_display) {
		return BT_SMP_IO_DISPLAY_ONLY;
    e7b8:	2a00      	cmp	r2, #0
    e7ba:	bf0c      	ite	eq
    e7bc:	2003      	moveq	r0, #3
    e7be:	2000      	movne	r0, #0
    e7c0:	4770      	bx	lr
no_callbacks:
	if (IS_ENABLED(CONFIG_BT_FIXED_PASSKEY) &&
	    fixed_passkey != BT_PASSKEY_INVALID) {
		return BT_SMP_IO_DISPLAY_ONLY;
	} else {
		return BT_SMP_IO_NO_INPUT_OUTPUT;
    e7c2:	2003      	movs	r0, #3
    e7c4:	4770      	bx	lr
		return BT_SMP_IO_DISPLAY_YESNO;
    e7c6:	2001      	movs	r0, #1
    e7c8:	4770      	bx	lr
			return BT_SMP_IO_KEYBOARD_ONLY;
    e7ca:	2002      	movs	r0, #2
	}
}
    e7cc:	4770      	bx	lr
    e7ce:	bf00      	nop
    e7d0:	200021f0 	.word	0x200021f0
    e7d4:	2000a85e 	.word	0x2000a85e

0000e7d8 <smp_ident_info>:
	/* return no error to avoid sending Pairing Failed in response */
	return 0;
}

static uint8_t smp_ident_info(struct bt_smp *smp, struct net_buf *buf)
{
    e7d8:	b570      	push	{r4, r5, r6, lr}
    e7da:	460b      	mov	r3, r1
    e7dc:	4604      	mov	r4, r0
	BT_DBG("");

	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    e7de:	210c      	movs	r1, #12
    e7e0:	30c4      	adds	r0, #196	; 0xc4
    e7e2:	f013 fa44 	bl	21c6e <atomic_test_bit>
    e7e6:	b308      	cbz	r0, e82c <smp_ident_info+0x54>
		struct bt_smp_ident_info *req = (void *)buf->data;
    e7e8:	689e      	ldr	r6, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
    e7ea:	6823      	ldr	r3, [r4, #0]
		struct bt_keys *keys;

		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
    e7ec:	f103 0588 	add.w	r5, r3, #136	; 0x88
    e7f0:	7a19      	ldrb	r1, [r3, #8]
    e7f2:	462a      	mov	r2, r5
    e7f4:	2002      	movs	r0, #2
    e7f6:	f013 fe40 	bl	2247a <bt_keys_get_type>
		if (!keys) {
    e7fa:	b990      	cbnz	r0, e822 <smp_ident_info+0x4a>
    e7fc:	4a0f      	ldr	r2, [pc, #60]	; (e83c <smp_ident_info+0x64>)
    e7fe:	4c10      	ldr	r4, [pc, #64]	; (e840 <smp_ident_info+0x68>)
			BT_ERR("Unable to get keys for %s",
    e800:	4628      	mov	r0, r5
    e802:	1aa4      	subs	r4, r4, r2
    e804:	f7f9 fac8 	bl	7d98 <bt_addr_le_str_real>
    e808:	f7f7 fd64 	bl	62d4 <log_strdup>
    e80c:	08e4      	lsrs	r4, r4, #3
    e80e:	01a4      	lsls	r4, r4, #6
    e810:	f044 0401 	orr.w	r4, r4, #1
    e814:	4601      	mov	r1, r0
    e816:	4622      	mov	r2, r4
    e818:	480a      	ldr	r0, [pc, #40]	; (e844 <smp_ident_info+0x6c>)
    e81a:	f00f fe63 	bl	1e4e4 <log_1>
			       bt_addr_le_str(&conn->le.dst));
			return BT_SMP_ERR_UNSPECIFIED;
    e81e:	2008      	movs	r0, #8
	}

	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);

	return 0;
}
    e820:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(keys->irk.val, req->irk, 16);
    e822:	2210      	movs	r2, #16
    e824:	4631      	mov	r1, r6
    e826:	302a      	adds	r0, #42	; 0x2a
    e828:	f011 fb21 	bl	1fe6e <memcpy>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
    e82c:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    e830:	2109      	movs	r1, #9
    e832:	f013 fa0e 	bl	21c52 <atomic_set_bit>
	return 0;
    e836:	2000      	movs	r0, #0
    e838:	e7f2      	b.n	e820 <smp_ident_info+0x48>
    e83a:	bf00      	nop
    e83c:	000236e8 	.word	0x000236e8
    e840:	000237d0 	.word	0x000237d0
    e844:	00026a74 	.word	0x00026a74

0000e848 <smp_encrypt_info>:
{
    e848:	b570      	push	{r4, r5, r6, lr}
    e84a:	460b      	mov	r3, r1
    e84c:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    e84e:	210c      	movs	r1, #12
    e850:	30c4      	adds	r0, #196	; 0xc4
    e852:	f013 fa0c 	bl	21c6e <atomic_test_bit>
    e856:	b308      	cbz	r0, e89c <smp_encrypt_info+0x54>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
    e858:	689e      	ldr	r6, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
    e85a:	6823      	ldr	r3, [r4, #0]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
    e85c:	f103 0588 	add.w	r5, r3, #136	; 0x88
    e860:	7a19      	ldrb	r1, [r3, #8]
    e862:	462a      	mov	r2, r5
    e864:	2004      	movs	r0, #4
    e866:	f013 fe08 	bl	2247a <bt_keys_get_type>
		if (!keys) {
    e86a:	b990      	cbnz	r0, e892 <smp_encrypt_info+0x4a>
    e86c:	4a0f      	ldr	r2, [pc, #60]	; (e8ac <smp_encrypt_info+0x64>)
    e86e:	4c10      	ldr	r4, [pc, #64]	; (e8b0 <smp_encrypt_info+0x68>)
			BT_ERR("Unable to get keys for %s",
    e870:	4628      	mov	r0, r5
    e872:	1aa4      	subs	r4, r4, r2
    e874:	f7f9 fa90 	bl	7d98 <bt_addr_le_str_real>
    e878:	f7f7 fd2c 	bl	62d4 <log_strdup>
    e87c:	08e4      	lsrs	r4, r4, #3
    e87e:	01a4      	lsls	r4, r4, #6
    e880:	f044 0401 	orr.w	r4, r4, #1
    e884:	4601      	mov	r1, r0
    e886:	4622      	mov	r2, r4
    e888:	480a      	ldr	r0, [pc, #40]	; (e8b4 <smp_encrypt_info+0x6c>)
    e88a:	f00f fe2b 	bl	1e4e4 <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
    e88e:	2008      	movs	r0, #8
}
    e890:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(keys->ltk.val, req->ltk, 16);
    e892:	2210      	movs	r2, #16
    e894:	4631      	mov	r1, r6
    e896:	301a      	adds	r0, #26
    e898:	f011 fae9 	bl	1fe6e <memcpy>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_MASTER_IDENT);
    e89c:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    e8a0:	2107      	movs	r1, #7
    e8a2:	f013 f9d6 	bl	21c52 <atomic_set_bit>
	return 0;
    e8a6:	2000      	movs	r0, #0
    e8a8:	e7f2      	b.n	e890 <smp_encrypt_info+0x48>
    e8aa:	bf00      	nop
    e8ac:	000236e8 	.word	0x000236e8
    e8b0:	000237d0 	.word	0x000237d0
    e8b4:	00026a74 	.word	0x00026a74

0000e8b8 <smp_chan_get>:
{
    e8b8:	b510      	push	{r4, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
    e8ba:	2106      	movs	r1, #6
    e8bc:	f012 f9c9 	bl	20c52 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    e8c0:	4604      	mov	r4, r0
    e8c2:	b948      	cbnz	r0, e8d8 <smp_chan_get+0x20>
    e8c4:	4905      	ldr	r1, [pc, #20]	; (e8dc <smp_chan_get+0x24>)
    e8c6:	4b06      	ldr	r3, [pc, #24]	; (e8e0 <smp_chan_get+0x28>)
		BT_ERR("Unable to find SMP channel");
    e8c8:	4806      	ldr	r0, [pc, #24]	; (e8e4 <smp_chan_get+0x2c>)
    e8ca:	1ac9      	subs	r1, r1, r3
    e8cc:	08c9      	lsrs	r1, r1, #3
    e8ce:	0189      	lsls	r1, r1, #6
    e8d0:	f041 0101 	orr.w	r1, r1, #1
    e8d4:	f00f fdf9 	bl	1e4ca <log_0>
}
    e8d8:	4620      	mov	r0, r4
    e8da:	bd10      	pop	{r4, pc}
    e8dc:	000237d0 	.word	0x000237d0
    e8e0:	000236e8 	.word	0x000236e8
    e8e4:	00026a8e 	.word	0x00026a8e

0000e8e8 <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_smp *smp = &bt_smp_pool[i];

		if (smp->chan.chan.conn) {
    e8e8:	4b0f      	ldr	r3, [pc, #60]	; (e928 <bt_smp_accept+0x40>)
{
    e8ea:	b570      	push	{r4, r5, r6, lr}
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    e8ec:	2200      	movs	r2, #0
{
    e8ee:	4604      	mov	r4, r0
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    e8f0:	f44f 76f0 	mov.w	r6, #480	; 0x1e0
		if (smp->chan.chan.conn) {
    e8f4:	fb06 f502 	mul.w	r5, r6, r2
    e8f8:	58e8      	ldr	r0, [r5, r3]
    e8fa:	b180      	cbz	r0, e91e <bt_smp_accept+0x36>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    e8fc:	3201      	adds	r2, #1
    e8fe:	2a04      	cmp	r2, #4
    e900:	d1f8      	bne.n	e8f4 <bt_smp_accept+0xc>
    e902:	4b0a      	ldr	r3, [pc, #40]	; (e92c <bt_smp_accept+0x44>)
    e904:	4a0a      	ldr	r2, [pc, #40]	; (e930 <bt_smp_accept+0x48>)
		*chan = &smp->chan.chan;

		return 0;
	}

	BT_ERR("No available SMP context for conn %p", conn);
    e906:	480b      	ldr	r0, [pc, #44]	; (e934 <bt_smp_accept+0x4c>)
    e908:	1ad2      	subs	r2, r2, r3
    e90a:	08d2      	lsrs	r2, r2, #3
    e90c:	0192      	lsls	r2, r2, #6
    e90e:	f042 0201 	orr.w	r2, r2, #1
    e912:	4621      	mov	r1, r4
    e914:	f00f fde6 	bl	1e4e4 <log_1>

	return -ENOMEM;
    e918:	f06f 000b 	mvn.w	r0, #11
    e91c:	e003      	b.n	e926 <bt_smp_accept+0x3e>
		smp->chan.chan.ops = &ops;
    e91e:	442b      	add	r3, r5
    e920:	4a05      	ldr	r2, [pc, #20]	; (e938 <bt_smp_accept+0x50>)
    e922:	605a      	str	r2, [r3, #4]
		*chan = &smp->chan.chan;
    e924:	600b      	str	r3, [r1, #0]
}
    e926:	bd70      	pop	{r4, r5, r6, pc}
    e928:	20001230 	.word	0x20001230
    e92c:	000236e8 	.word	0x000236e8
    e930:	000237d0 	.word	0x000237d0
    e934:	00026aa9 	.word	0x00026aa9
    e938:	00023f84 	.word	0x00023f84

0000e93c <smp_send.isra.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
    e93c:	b513      	push	{r0, r1, r4, lr}
    e93e:	4613      	mov	r3, r2
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL);
    e940:	2200      	movs	r2, #0
    e942:	9200      	str	r2, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
    e944:	4604      	mov	r4, r0
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL);
    e946:	460a      	mov	r2, r1
    e948:	6800      	ldr	r0, [r0, #0]
    e94a:	2106      	movs	r1, #6
    e94c:	f012 f815 	bl	2097a <bt_l2cap_send_cb>
    e950:	4805      	ldr	r0, [pc, #20]	; (e968 <smp_send.isra.0+0x2c>)
    e952:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    e956:	2300      	movs	r3, #0
    e958:	f504 71d8 	add.w	r1, r4, #432	; 0x1b0
}
    e95c:	b002      	add	sp, #8
    e95e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e962:	f00f b843 	b.w	1d9ec <k_delayed_work_submit_to_queue>
    e966:	bf00      	nop
    e968:	20001c50 	.word	0x20001c50

0000e96c <compute_and_send_master_dhcheck>:
{
    e96c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	(void)memset(r, 0, sizeof(r));
    e970:	2210      	movs	r2, #16
{
    e972:	b0a2      	sub	sp, #136	; 0x88
    e974:	4604      	mov	r4, r0
	(void)memset(r, 0, sizeof(r));
    e976:	2100      	movs	r1, #0
    e978:	eb0d 0002 	add.w	r0, sp, r2
    e97c:	f011 faa2 	bl	1fec4 <memset>
	switch (smp->method) {
    e980:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    e984:	2b05      	cmp	r3, #5
    e986:	d87d      	bhi.n	ea84 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x24>
    e988:	e8df f003 	tbb	[pc, r3]
    e98c:	09030309 	.word	0x09030309
    e990:	7e7c      	.short	0x7e7c
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
    e992:	2204      	movs	r2, #4
    e994:	f504 71cc 	add.w	r1, r4, #408	; 0x198
    e998:	a804      	add	r0, sp, #16
			memcpy(r, smp->oobd_remote->r, sizeof(r));
    e99a:	f011 fa68 	bl	1fe6e <memcpy>
	uint8_t m[53] = { 0x00, /* counter */
    e99e:	4b4d      	ldr	r3, [pc, #308]	; (ead4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x74>)
		   &smp->chan.chan.conn->le.init_addr,
    e9a0:	6825      	ldr	r5, [r4, #0]
	uint8_t m[53] = { 0x00, /* counter */
    e9a2:	aa14      	add	r2, sp, #80	; 0x50
    e9a4:	f103 0730 	add.w	r7, r3, #48	; 0x30
    e9a8:	6818      	ldr	r0, [r3, #0]
    e9aa:	6859      	ldr	r1, [r3, #4]
    e9ac:	4616      	mov	r6, r2
    e9ae:	c603      	stmia	r6!, {r0, r1}
    e9b0:	3308      	adds	r3, #8
    e9b2:	42bb      	cmp	r3, r7
    e9b4:	4632      	mov	r2, r6
    e9b6:	d1f7      	bne.n	e9a8 <compute_and_send_master_dhcheck+0x3c>
    e9b8:	6818      	ldr	r0, [r3, #0]
    e9ba:	791b      	ldrb	r3, [r3, #4]
    e9bc:	6030      	str	r0, [r6, #0]
    e9be:	7133      	strb	r3, [r6, #4]
	sys_memcpy_swap(ws, w, 32);
    e9c0:	2220      	movs	r2, #32
    e9c2:	f204 1157 	addw	r1, r4, #343	; 0x157
    e9c6:	a80c      	add	r0, sp, #48	; 0x30
    e9c8:	f013 f937 	bl	21c3a <sys_memcpy_swap>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
    e9cc:	4842      	ldr	r0, [pc, #264]	; (ead8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x78>)
    e9ce:	ab08      	add	r3, sp, #32
    e9d0:	2220      	movs	r2, #32
    e9d2:	a90c      	add	r1, sp, #48	; 0x30
    e9d4:	f013 f954 	bl	21c80 <bt_smp_aes_cmac>
	if (err) {
    e9d8:	2800      	cmp	r0, #0
    e9da:	d153      	bne.n	ea84 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x24>
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
    e9dc:	f104 07e7 	add.w	r7, r4, #231	; 0xe7
	sys_memcpy_swap(m + 5, n1, 16);
    e9e0:	2210      	movs	r2, #16
    e9e2:	4639      	mov	r1, r7
    e9e4:	f10d 0055 	add.w	r0, sp, #85	; 0x55
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
    e9e8:	f104 08f7 	add.w	r8, r4, #247	; 0xf7
	sys_memcpy_swap(m + 5, n1, 16);
    e9ec:	f013 f925 	bl	21c3a <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
    e9f0:	2210      	movs	r2, #16
    e9f2:	4641      	mov	r1, r8
    e9f4:	f10d 0065 	add.w	r0, sp, #101	; 0x65
    e9f8:	f013 f91f 	bl	21c3a <sys_memcpy_swap>
	m[37] = a1->type;
    e9fc:	f895 308f 	ldrb.w	r3, [r5, #143]	; 0x8f
    ea00:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
	sys_memcpy_swap(m + 38, a1->a.val, 6);
    ea04:	2206      	movs	r2, #6
    ea06:	f105 0190 	add.w	r1, r5, #144	; 0x90
    ea0a:	f10d 0076 	add.w	r0, sp, #118	; 0x76
    ea0e:	f013 f914 	bl	21c3a <sys_memcpy_swap>
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
    ea12:	f204 1687 	addw	r6, r4, #391	; 0x187
	m[44] = a2->type;
    ea16:	f895 3096 	ldrb.w	r3, [r5, #150]	; 0x96
    ea1a:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
    ea1e:	2206      	movs	r2, #6
    ea20:	f105 0197 	add.w	r1, r5, #151	; 0x97
    ea24:	f10d 007d 	add.w	r0, sp, #125	; 0x7d
    ea28:	f013 f907 	bl	21c3a <sys_memcpy_swap>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
    ea2c:	4633      	mov	r3, r6
    ea2e:	2235      	movs	r2, #53	; 0x35
    ea30:	a914      	add	r1, sp, #80	; 0x50
    ea32:	a808      	add	r0, sp, #32
    ea34:	f013 f924 	bl	21c80 <bt_smp_aes_cmac>
	if (err) {
    ea38:	bb20      	cbnz	r0, ea84 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x24>
	sys_mem_swap(mackey, 16);
    ea3a:	4630      	mov	r0, r6
    ea3c:	f013 f976 	bl	21d2c <sys_mem_swap.constprop.0>
		   smp->tk)) {
    ea40:	f204 1507 	addw	r5, r4, #263	; 0x107
	m[0] = 0x01;
    ea44:	2301      	movs	r3, #1
    ea46:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
    ea4a:	2235      	movs	r2, #53	; 0x35
    ea4c:	462b      	mov	r3, r5
    ea4e:	a914      	add	r1, sp, #80	; 0x50
    ea50:	a808      	add	r0, sp, #32
    ea52:	f013 f915 	bl	21c80 <bt_smp_aes_cmac>
	if (err) {
    ea56:	b9a8      	cbnz	r0, ea84 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x24>
	sys_mem_swap(ltk, 16);
    ea58:	4628      	mov	r0, r5
    ea5a:	f013 f967 	bl	21d2c <sys_mem_swap.constprop.0>
		   &smp->chan.chan.conn->le.init_addr,
    ea5e:	4622      	mov	r2, r4
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
    ea60:	a914      	add	r1, sp, #80	; 0x50
		   &smp->chan.chan.conn->le.init_addr,
    ea62:	f852 3bca 	ldr.w	r3, [r2], #202
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
    ea66:	9103      	str	r1, [sp, #12]
		   &smp->chan.chan.conn->le.resp_addr, e)) {
    ea68:	f103 0196 	add.w	r1, r3, #150	; 0x96
		   &smp->chan.chan.conn->le.init_addr,
    ea6c:	338f      	adds	r3, #143	; 0x8f
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
    ea6e:	e9cd 2300 	strd	r2, r3, [sp]
    ea72:	9102      	str	r1, [sp, #8]
    ea74:	ab04      	add	r3, sp, #16
    ea76:	4642      	mov	r2, r8
    ea78:	4639      	mov	r1, r7
    ea7a:	4630      	mov	r0, r6
    ea7c:	f013 f964 	bl	21d48 <smp_f6>
    ea80:	4605      	mov	r5, r0
    ea82:	b148      	cbz	r0, ea98 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x38>
		return BT_SMP_ERR_UNSPECIFIED;
    ea84:	2008      	movs	r0, #8
    ea86:	e021      	b.n	eacc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x6c>
		if (smp->oobd_remote) {
    ea88:	f8d4 11a4 	ldr.w	r1, [r4, #420]	; 0x1a4
    ea8c:	2900      	cmp	r1, #0
    ea8e:	d086      	beq.n	e99e <compute_and_send_master_dhcheck+0x32>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
    ea90:	2210      	movs	r2, #16
    ea92:	eb0d 0002 	add.w	r0, sp, r2
    ea96:	e780      	b.n	e99a <compute_and_send_master_dhcheck+0x2e>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    ea98:	210d      	movs	r1, #13
    ea9a:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    ea9e:	f013 f8d8 	bl	21c52 <atomic_set_bit>
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
    eaa2:	210d      	movs	r1, #13
    eaa4:	4620      	mov	r0, r4
    eaa6:	f013 f921 	bl	21cec <smp_create_pdu.isra.0>
	if (!buf) {
    eaaa:	4606      	mov	r6, r0
    eaac:	2800      	cmp	r0, #0
    eaae:	d0e9      	beq.n	ea84 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x24>
	req = net_buf_add(buf, sizeof(*req));
    eab0:	2110      	movs	r1, #16
    eab2:	3008      	adds	r0, #8
    eab4:	f013 fd6c 	bl	22590 <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
    eab8:	2210      	movs	r2, #16
    eaba:	a914      	add	r1, sp, #80	; 0x50
    eabc:	f011 f9d7 	bl	1fe6e <memcpy>
	smp_send(smp, buf, NULL, NULL);
    eac0:	4620      	mov	r0, r4
    eac2:	462a      	mov	r2, r5
    eac4:	4631      	mov	r1, r6
    eac6:	f7ff ff39 	bl	e93c <smp_send.isra.0>
	return 0;
    eaca:	4628      	mov	r0, r5
}
    eacc:	b022      	add	sp, #136	; 0x88
    eace:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ead2:	bf00      	nop
    ead4:	000238bb 	.word	0x000238bb
    ead8:	00026d19 	.word	0x00026d19

0000eadc <sc_send_public_key>:
{
    eadc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
    eade:	210c      	movs	r1, #12
{
    eae0:	4605      	mov	r5, r0
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
    eae2:	f013 f903 	bl	21cec <smp_create_pdu.isra.0>
	if (!req_buf) {
    eae6:	4604      	mov	r4, r0
    eae8:	b1b0      	cbz	r0, eb18 <sc_send_public_key+0x3c>
	req = net_buf_add(req_buf, sizeof(*req));
    eaea:	2140      	movs	r1, #64	; 0x40
    eaec:	3008      	adds	r0, #8
    eaee:	f013 fd4f 	bl	22590 <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
    eaf2:	4f0a      	ldr	r7, [pc, #40]	; (eb1c <sc_send_public_key+0x40>)
    eaf4:	2220      	movs	r2, #32
    eaf6:	6839      	ldr	r1, [r7, #0]
	req = net_buf_add(req_buf, sizeof(*req));
    eaf8:	4606      	mov	r6, r0
	memcpy(req->x, sc_public_key, sizeof(req->x));
    eafa:	f011 f9b8 	bl	1fe6e <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
    eafe:	6839      	ldr	r1, [r7, #0]
    eb00:	2220      	movs	r2, #32
    eb02:	4411      	add	r1, r2
    eb04:	18b0      	adds	r0, r6, r2
    eb06:	f011 f9b2 	bl	1fe6e <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
    eb0a:	4628      	mov	r0, r5
    eb0c:	2200      	movs	r2, #0
    eb0e:	4621      	mov	r1, r4
    eb10:	f7ff ff14 	bl	e93c <smp_send.isra.0>
	return 0;
    eb14:	2000      	movs	r0, #0
}
    eb16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    eb18:	2008      	movs	r0, #8
    eb1a:	e7fc      	b.n	eb16 <sc_send_public_key+0x3a>
    eb1c:	200023c0 	.word	0x200023c0

0000eb20 <smp_send_pairing_req>:
{
    eb20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    eb24:	4605      	mov	r5, r0
	smp = smp_chan_get(conn);
    eb26:	f7ff fec7 	bl	e8b8 <smp_chan_get>
	if (!smp) {
    eb2a:	4604      	mov	r4, r0
    eb2c:	2800      	cmp	r0, #0
    eb2e:	f000 80bc 	beq.w	ecaa <smp_send_pairing_req+0x18a>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    eb32:	f100 06c4 	add.w	r6, r0, #196	; 0xc4
    eb36:	2104      	movs	r1, #4
    eb38:	4630      	mov	r0, r6
    eb3a:	f013 f898 	bl	21c6e <atomic_test_bit>
    eb3e:	2800      	cmp	r0, #0
    eb40:	f040 80b6 	bne.w	ecb0 <smp_send_pairing_req+0x190>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    eb44:	2103      	movs	r1, #3
    eb46:	4630      	mov	r0, r6
    eb48:	f013 f891 	bl	21c6e <atomic_test_bit>
    eb4c:	b120      	cbz	r0, eb58 <smp_send_pairing_req+0x38>
		return -EBUSY;
    eb4e:	f06f 050f 	mvn.w	r5, #15
}
    eb52:	4628      	mov	r0, r5
    eb54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
    eb58:	2101      	movs	r1, #1
    eb5a:	4630      	mov	r0, r6
    eb5c:	f013 f887 	bl	21c6e <atomic_test_bit>
    eb60:	2800      	cmp	r0, #0
    eb62:	d1f4      	bne.n	eb4e <smp_send_pairing_req+0x2e>
	if (!sec_level_reachable(conn)) {
    eb64:	7aab      	ldrb	r3, [r5, #10]
	switch (conn->required_sec_level) {
    eb66:	2b03      	cmp	r3, #3
    eb68:	d016      	beq.n	eb98 <smp_send_pairing_req+0x78>
    eb6a:	d805      	bhi.n	eb78 <smp_send_pairing_req+0x58>
    eb6c:	3b01      	subs	r3, #1
    eb6e:	2b01      	cmp	r3, #1
    eb70:	d920      	bls.n	ebb4 <smp_send_pairing_req+0x94>
		return -EINVAL;
    eb72:	f06f 0515 	mvn.w	r5, #21
    eb76:	e7ec      	b.n	eb52 <smp_send_pairing_req+0x32>
	switch (conn->required_sec_level) {
    eb78:	2b04      	cmp	r3, #4
    eb7a:	d1fa      	bne.n	eb72 <smp_send_pairing_req+0x52>
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    eb7c:	f7ff fe06 	bl	e78c <get_io_capa>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
    eb80:	2803      	cmp	r0, #3
    eb82:	d104      	bne.n	eb8e <smp_send_pairing_req+0x6e>
    eb84:	4b4c      	ldr	r3, [pc, #304]	; (ecb8 <smp_send_pairing_req+0x198>)
    eb86:	681b      	ldr	r3, [r3, #0]
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    eb88:	b11b      	cbz	r3, eb92 <smp_send_pairing_req+0x72>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
    eb8a:	68db      	ldr	r3, [r3, #12]
    eb8c:	b343      	cbz	r3, ebe0 <smp_send_pairing_req+0xc0>
    eb8e:	4b4b      	ldr	r3, [pc, #300]	; (ecbc <smp_send_pairing_req+0x19c>)
    eb90:	781b      	ldrb	r3, [r3, #0]
    eb92:	f003 0301 	and.w	r3, r3, #1
    eb96:	e00b      	b.n	ebb0 <smp_send_pairing_req+0x90>
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    eb98:	f7ff fdf8 	bl	e78c <get_io_capa>
    eb9c:	2803      	cmp	r0, #3
    eb9e:	d11d      	bne.n	ebdc <smp_send_pairing_req+0xbc>
		       (bt_auth && bt_auth->oob_data_request);
    eba0:	4b45      	ldr	r3, [pc, #276]	; (ecb8 <smp_send_pairing_req+0x198>)
    eba2:	681b      	ldr	r3, [r3, #0]
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    eba4:	2b00      	cmp	r3, #0
    eba6:	d0e4      	beq.n	eb72 <smp_send_pairing_req+0x52>
		       (bt_auth && bt_auth->oob_data_request);
    eba8:	68db      	ldr	r3, [r3, #12]
    ebaa:	3b00      	subs	r3, #0
    ebac:	bf18      	it	ne
    ebae:	2301      	movne	r3, #1
	if (!sec_level_reachable(conn)) {
    ebb0:	2b00      	cmp	r3, #0
    ebb2:	d0de      	beq.n	eb72 <smp_send_pairing_req+0x52>
	if (!conn->le.keys) {
    ebb4:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    ebb8:	b1a3      	cbz	r3, ebe4 <smp_send_pairing_req+0xc4>
	(void)memset((uint8_t *)smp + sizeof(smp->chan), 0,
    ebba:	f104 0ac0 	add.w	sl, r4, #192	; 0xc0
    ebbe:	22f0      	movs	r2, #240	; 0xf0
    ebc0:	2100      	movs	r1, #0
    ebc2:	4650      	mov	r0, sl
    ebc4:	f011 f97e 	bl	1fec4 <memset>
	if (bt_rand(smp->prnd, 16)) {
    ebc8:	2110      	movs	r1, #16
    ebca:	f104 00e7 	add.w	r0, r4, #231	; 0xe7
    ebce:	f004 fb79 	bl	132c4 <bt_rand>
    ebd2:	4605      	mov	r5, r0
    ebd4:	b190      	cbz	r0, ebfc <smp_send_pairing_req+0xdc>
		return -ENOBUFS;
    ebd6:	f06f 0536 	mvn.w	r5, #54	; 0x36
    ebda:	e7ba      	b.n	eb52 <smp_send_pairing_req+0x32>
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    ebdc:	2301      	movs	r3, #1
    ebde:	e7e7      	b.n	ebb0 <smp_send_pairing_req+0x90>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
    ebe0:	2300      	movs	r3, #0
    ebe2:	e7d6      	b.n	eb92 <smp_send_pairing_req+0x72>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    ebe4:	7a28      	ldrb	r0, [r5, #8]
    ebe6:	f105 0188 	add.w	r1, r5, #136	; 0x88
    ebea:	f001 f923 	bl	fe34 <bt_keys_get_addr>
    ebee:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
    ebf2:	2800      	cmp	r0, #0
    ebf4:	d1e1      	bne.n	ebba <smp_send_pairing_req+0x9a>
			return -ENOMEM;
    ebf6:	f06f 050b 	mvn.w	r5, #11
    ebfa:	e7aa      	b.n	eb52 <smp_send_pairing_req+0x32>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
    ebfc:	2105      	movs	r1, #5
    ebfe:	4650      	mov	r0, sl
    ec00:	f013 f827 	bl	21c52 <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
    ec04:	f7fb fbda 	bl	a3bc <bt_pub_key_get>
    ec08:	4b2d      	ldr	r3, [pc, #180]	; (ecc0 <smp_send_pairing_req+0x1a0>)
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_REQ, sizeof(*req));
    ec0a:	2101      	movs	r1, #1
	sc_public_key = bt_pub_key_get();
    ec0c:	6018      	str	r0, [r3, #0]
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_REQ, sizeof(*req));
    ec0e:	4620      	mov	r0, r4
    ec10:	f013 f86c 	bl	21cec <smp_create_pdu.isra.0>
	if (!req_buf) {
    ec14:	4681      	mov	r9, r0
    ec16:	2800      	cmp	r0, #0
    ec18:	d0dd      	beq.n	ebd6 <smp_send_pairing_req+0xb6>
	req = net_buf_add(req_buf, sizeof(*req));
    ec1a:	2106      	movs	r1, #6
    ec1c:	3008      	adds	r0, #8
    ec1e:	f013 fcb7 	bl	22590 <net_buf_simple_add>
	if (sc_supported) {
    ec22:	4b26      	ldr	r3, [pc, #152]	; (ecbc <smp_send_pairing_req+0x19c>)
    ec24:	781b      	ldrb	r3, [r3, #0]
		auth &= BT_SMP_AUTH_MASK;
    ec26:	2b00      	cmp	r3, #0
    ec28:	bf14      	ite	ne
    ec2a:	f04f 0809 	movne.w	r8, #9
    ec2e:	f04f 0801 	moveq.w	r8, #1
	req = net_buf_add(req_buf, sizeof(*req));
    ec32:	4607      	mov	r7, r0
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
    ec34:	f7ff fdaa 	bl	e78c <get_io_capa>
	if (bondable) {
    ec38:	4b22      	ldr	r3, [pc, #136]	; (ecc4 <smp_send_pairing_req+0x1a4>)
    ec3a:	781b      	ldrb	r3, [r3, #0]
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
    ec3c:	2803      	cmp	r0, #3
		auth |= BT_SMP_AUTH_MITM;
    ec3e:	bf18      	it	ne
    ec40:	f048 0804 	orrne.w	r8, r8, #4
	if (bondable) {
    ec44:	b373      	cbz	r3, eca4 <smp_send_pairing_req+0x184>
		auth |= BT_SMP_AUTH_BONDING;
    ec46:	f048 0801 	orr.w	r8, r8, #1
	req->auth_req = get_auth(conn, BT_SMP_AUTH_DEFAULT);
    ec4a:	f887 8002 	strb.w	r8, [r7, #2]
	req->io_capability = get_io_capa();
    ec4e:	f7ff fd9d 	bl	e78c <get_io_capa>
	req->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
    ec52:	4b1d      	ldr	r3, [pc, #116]	; (ecc8 <smp_send_pairing_req+0x1a8>)
	req->io_capability = get_io_capa();
    ec54:	7038      	strb	r0, [r7, #0]
	req->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
    ec56:	781b      	ldrb	r3, [r3, #0]
    ec58:	707b      	strb	r3, [r7, #1]
	req->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
    ec5a:	2310      	movs	r3, #16
    ec5c:	70fb      	strb	r3, [r7, #3]
	req->resp_key_dist = RECV_KEYS;
    ec5e:	f04f 0803 	mov.w	r8, #3
	req->init_key_dist = SEND_KEYS;
    ec62:	2301      	movs	r3, #1
	smp->local_dist = SEND_KEYS;
    ec64:	f240 3201 	movw	r2, #769	; 0x301
	req->init_key_dist = SEND_KEYS;
    ec68:	713b      	strb	r3, [r7, #4]
	req->resp_key_dist = RECV_KEYS;
    ec6a:	f887 8005 	strb.w	r8, [r7, #5]
	memcpy(smp->preq + 1, req, sizeof(*req));
    ec6e:	4639      	mov	r1, r7
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    ec70:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
	smp->local_dist = SEND_KEYS;
    ec74:	f8a4 21a8 	strh.w	r2, [r4, #424]	; 0x1a8
	memcpy(smp->preq + 1, req, sizeof(*req));
    ec78:	f104 00ca 	add.w	r0, r4, #202	; 0xca
    ec7c:	2206      	movs	r2, #6
    ec7e:	f011 f8f6 	bl	1fe6e <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
    ec82:	2200      	movs	r2, #0
    ec84:	4649      	mov	r1, r9
    ec86:	4620      	mov	r0, r4
    ec88:	f7ff fe58 	bl	e93c <smp_send.isra.0>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RSP);
    ec8c:	4650      	mov	r0, sl
    ec8e:	2102      	movs	r1, #2
    ec90:	f012 ffdf 	bl	21c52 <atomic_set_bit>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
    ec94:	210b      	movs	r1, #11
    ec96:	f012 ffdc 	bl	21c52 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
    ec9a:	4641      	mov	r1, r8
    ec9c:	4630      	mov	r0, r6
    ec9e:	f012 ffd8 	bl	21c52 <atomic_set_bit>
	return 0;
    eca2:	e756      	b.n	eb52 <smp_send_pairing_req+0x32>
		auth &= ~BT_SMP_AUTH_BONDING;
    eca4:	f008 080c 	and.w	r8, r8, #12
    eca8:	e7cf      	b.n	ec4a <smp_send_pairing_req+0x12a>
		return -ENOTCONN;
    ecaa:	f06f 0538 	mvn.w	r5, #56	; 0x38
    ecae:	e750      	b.n	eb52 <smp_send_pairing_req+0x32>
		return -EIO;
    ecb0:	f06f 0504 	mvn.w	r5, #4
    ecb4:	e74d      	b.n	eb52 <smp_send_pairing_req+0x32>
    ecb6:	bf00      	nop
    ecb8:	200021f0 	.word	0x200021f0
    ecbc:	2000a85e 	.word	0x2000a85e
    ecc0:	200023c0 	.word	0x200023c0
    ecc4:	20000746 	.word	0x20000746
    ecc8:	2000a85d 	.word	0x2000a85d

0000eccc <smp_security_request>:
{
    eccc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
    ecce:	4606      	mov	r6, r0
	struct bt_smp_security_request *req = (void *)buf->data;
    ecd0:	688b      	ldr	r3, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
    ecd2:	f856 4bc4 	ldr.w	r4, [r6], #196
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    ecd6:	2103      	movs	r1, #3
    ecd8:	4630      	mov	r0, r6
    ecda:	f012 ffc8 	bl	21c6e <atomic_test_bit>
    ecde:	b108      	cbz	r0, ece4 <smp_security_request+0x18>
	return 0;
    ece0:	2000      	movs	r0, #0
    ece2:	e064      	b.n	edae <smp_security_request+0xe2>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
    ece4:	2101      	movs	r1, #1
    ece6:	4630      	mov	r0, r6
    ece8:	f012 ffc1 	bl	21c6e <atomic_test_bit>
    ecec:	2800      	cmp	r0, #0
    ecee:	d1f7      	bne.n	ece0 <smp_security_request+0x14>
	if (sc_supported) {
    ecf0:	781d      	ldrb	r5, [r3, #0]
    ecf2:	4b32      	ldr	r3, [pc, #200]	; (edbc <smp_security_request+0xf0>)
    ecf4:	781b      	ldrb	r3, [r3, #0]
    ecf6:	b17b      	cbz	r3, ed18 <smp_security_request+0x4c>
		auth = req->auth_req & BT_SMP_AUTH_MASK_SC;
    ecf8:	f005 050f 	and.w	r5, r5, #15
	if (conn->le.keys) {
    ecfc:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
    ed00:	b16b      	cbz	r3, ed1e <smp_security_request+0x52>
		if (!(conn->le.keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
    ed02:	89db      	ldrh	r3, [r3, #14]
    ed04:	f003 0324 	and.w	r3, r3, #36	; 0x24
    ed08:	b9d3      	cbnz	r3, ed40 <smp_security_request+0x74>
	if (smp_send_pairing_req(conn) < 0) {
    ed0a:	4620      	mov	r0, r4
    ed0c:	f7ff ff08 	bl	eb20 <smp_send_pairing_req>
    ed10:	2800      	cmp	r0, #0
    ed12:	db4b      	blt.n	edac <smp_security_request+0xe0>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
    ed14:	210e      	movs	r1, #14
    ed16:	e04d      	b.n	edb4 <smp_security_request+0xe8>
		auth = req->auth_req & BT_SMP_AUTH_MASK;
    ed18:	f005 0507 	and.w	r5, r5, #7
    ed1c:	e7ee      	b.n	ecfc <smp_security_request+0x30>
					     &conn->le.dst);
    ed1e:	f104 0788 	add.w	r7, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
    ed22:	7a21      	ldrb	r1, [r4, #8]
    ed24:	463a      	mov	r2, r7
    ed26:	2020      	movs	r0, #32
    ed28:	f001 f8ba 	bl	fea0 <bt_keys_find>
    ed2c:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
    ed30:	b930      	cbnz	r0, ed40 <smp_security_request+0x74>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK, conn->id,
    ed32:	7a21      	ldrb	r1, [r4, #8]
    ed34:	463a      	mov	r2, r7
    ed36:	2004      	movs	r0, #4
    ed38:	f001 f8b2 	bl	fea0 <bt_keys_find>
    ed3c:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys) {
    ed40:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
    ed44:	2900      	cmp	r1, #0
    ed46:	d0e0      	beq.n	ed0a <smp_security_request+0x3e>
	if ((auth & BT_SMP_AUTH_MITM) &&
    ed48:	076f      	lsls	r7, r5, #29
    ed4a:	d518      	bpl.n	ed7e <smp_security_request+0xb2>
    ed4c:	7b4b      	ldrb	r3, [r1, #13]
    ed4e:	07d8      	lsls	r0, r3, #31
    ed50:	d415      	bmi.n	ed7e <smp_security_request+0xb2>
		if (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT) {
    ed52:	f7ff fd1b 	bl	e78c <get_io_capa>
    ed56:	4a1a      	ldr	r2, [pc, #104]	; (edc0 <smp_security_request+0xf4>)
    ed58:	4b1a      	ldr	r3, [pc, #104]	; (edc4 <smp_security_request+0xf8>)
    ed5a:	1ad2      	subs	r2, r2, r3
    ed5c:	08d2      	lsrs	r2, r2, #3
    ed5e:	2803      	cmp	r0, #3
    ed60:	ea4f 1282 	mov.w	r2, r2, lsl #6
    ed64:	d004      	beq.n	ed70 <smp_security_request+0xa4>
		BT_INFO("New auth requirements: 0x%x, repairing", auth);
    ed66:	4818      	ldr	r0, [pc, #96]	; (edc8 <smp_security_request+0xfc>)
    ed68:	f042 0203 	orr.w	r2, r2, #3
    ed6c:	4629      	mov	r1, r5
    ed6e:	e003      	b.n	ed78 <smp_security_request+0xac>
		BT_WARN("Unsupported auth requirements: 0x%x, repairing",
    ed70:	4816      	ldr	r0, [pc, #88]	; (edcc <smp_security_request+0x100>)
    ed72:	f042 0202 	orr.w	r2, r2, #2
    ed76:	4629      	mov	r1, r5
		BT_INFO("New auth requirements: 0x%x, repairing", auth);
    ed78:	f00f fbb4 	bl	1e4e4 <log_1>
		goto pair;
    ed7c:	e7c5      	b.n	ed0a <smp_security_request+0x3e>
	if ((auth & BT_SMP_AUTH_SC) &&
    ed7e:	072a      	lsls	r2, r5, #28
    ed80:	d508      	bpl.n	ed94 <smp_security_request+0xc8>
    ed82:	89cb      	ldrh	r3, [r1, #14]
    ed84:	069b      	lsls	r3, r3, #26
    ed86:	d405      	bmi.n	ed94 <smp_security_request+0xc8>
    ed88:	4a0d      	ldr	r2, [pc, #52]	; (edc0 <smp_security_request+0xf4>)
    ed8a:	4b0e      	ldr	r3, [pc, #56]	; (edc4 <smp_security_request+0xf8>)
    ed8c:	1ad2      	subs	r2, r2, r3
    ed8e:	08d2      	lsrs	r2, r2, #3
		BT_INFO("New auth requirements: 0x%x, repairing", auth);
    ed90:	0192      	lsls	r2, r2, #6
    ed92:	e7e8      	b.n	ed66 <smp_security_request+0x9a>
	if (bt_conn_le_start_encryption(conn, conn->le.keys->ltk.rand,
    ed94:	7b0b      	ldrb	r3, [r1, #12]
    ed96:	9300      	str	r3, [sp, #0]
    ed98:	f101 0218 	add.w	r2, r1, #24
    ed9c:	f101 031a 	add.w	r3, r1, #26
    eda0:	4620      	mov	r0, r4
    eda2:	3110      	adds	r1, #16
    eda4:	f011 fb97 	bl	204d6 <bt_conn_le_start_encryption>
    eda8:	2800      	cmp	r0, #0
    edaa:	da02      	bge.n	edb2 <smp_security_request+0xe6>
		return BT_SMP_ERR_UNSPECIFIED;
    edac:	2008      	movs	r0, #8
}
    edae:	b003      	add	sp, #12
    edb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    edb2:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
    edb4:	4630      	mov	r0, r6
    edb6:	f012 ff4c 	bl	21c52 <atomic_set_bit>
    edba:	e791      	b.n	ece0 <smp_security_request+0x14>
    edbc:	2000a85e 	.word	0x2000a85e
    edc0:	000237d0 	.word	0x000237d0
    edc4:	000236e8 	.word	0x000236e8
    edc8:	00026ace 	.word	0x00026ace
    edcc:	00026af5 	.word	0x00026af5

0000edd0 <bt_smp_distribute_keys>:
{
    edd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    edd4:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    edd6:	6800      	ldr	r0, [r0, #0]
	if (!keys) {
    edd8:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
{
    eddc:	b089      	sub	sp, #36	; 0x24
	if (!keys) {
    edde:	b9a3      	cbnz	r3, ee0a <bt_smp_distribute_keys+0x3a>
    ede0:	4a48      	ldr	r2, [pc, #288]	; (ef04 <bt_smp_distribute_keys+0x134>)
    ede2:	4c49      	ldr	r4, [pc, #292]	; (ef08 <bt_smp_distribute_keys+0x138>)
		BT_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
    ede4:	3088      	adds	r0, #136	; 0x88
    ede6:	1aa4      	subs	r4, r4, r2
    ede8:	f7f8 ffd6 	bl	7d98 <bt_addr_le_str_real>
    edec:	f7f7 fa72 	bl	62d4 <log_strdup>
    edf0:	08e4      	lsrs	r4, r4, #3
    edf2:	01a4      	lsls	r4, r4, #6
    edf4:	f044 0401 	orr.w	r4, r4, #1
    edf8:	4601      	mov	r1, r0
    edfa:	4622      	mov	r2, r4
    edfc:	4843      	ldr	r0, [pc, #268]	; (ef0c <bt_smp_distribute_keys+0x13c>)
    edfe:	f00f fb71 	bl	1e4e4 <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
    ee02:	2008      	movs	r0, #8
}
    ee04:	b009      	add	sp, #36	; 0x24
    ee06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    ee0a:	f104 07c4 	add.w	r7, r4, #196	; 0xc4
    ee0e:	2105      	movs	r1, #5
    ee10:	4638      	mov	r0, r7
    ee12:	f012 ff2c 	bl	21c6e <atomic_test_bit>
    ee16:	4680      	mov	r8, r0
    ee18:	b9d8      	cbnz	r0, ee52 <bt_smp_distribute_keys+0x82>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
    ee1a:	f894 31a8 	ldrb.w	r3, [r4, #424]	; 0x1a8
    ee1e:	f013 0001 	ands.w	r0, r3, #1
    ee22:	d0ef      	beq.n	ee04 <bt_smp_distribute_keys+0x34>
	struct bt_keys *keys = conn->le.keys;
    ee24:	6823      	ldr	r3, [r4, #0]
		bt_rand((void *)&rand, sizeof(rand));
    ee26:	211a      	movs	r1, #26
    ee28:	a801      	add	r0, sp, #4
	struct bt_keys *keys = conn->le.keys;
    ee2a:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
		bt_rand((void *)&rand, sizeof(rand));
    ee2e:	f004 fa49 	bl	132c4 <bt_rand>
		buf = smp_create_pdu(smp, BT_SMP_CMD_ENCRYPT_INFO,
    ee32:	2106      	movs	r1, #6
    ee34:	4620      	mov	r0, r4
    ee36:	f012 ff59 	bl	21cec <smp_create_pdu.isra.0>
		if (!buf) {
    ee3a:	4606      	mov	r6, r0
    ee3c:	b958      	cbnz	r0, ee56 <bt_smp_distribute_keys+0x86>
    ee3e:	4932      	ldr	r1, [pc, #200]	; (ef08 <bt_smp_distribute_keys+0x138>)
    ee40:	4b30      	ldr	r3, [pc, #192]	; (ef04 <bt_smp_distribute_keys+0x134>)
			BT_ERR("Unable to allocate Encrypt Info buffer");
    ee42:	4833      	ldr	r0, [pc, #204]	; (ef10 <bt_smp_distribute_keys+0x140>)
    ee44:	1ac9      	subs	r1, r1, r3
    ee46:	08c9      	lsrs	r1, r1, #3
    ee48:	0189      	lsls	r1, r1, #6
    ee4a:	f041 0101 	orr.w	r1, r1, #1
			BT_ERR("Unable to allocate Master Ident buffer");
    ee4e:	f00f fb3c 	bl	1e4ca <log_0>
	return 0;
    ee52:	2000      	movs	r0, #0
    ee54:	e7d6      	b.n	ee04 <bt_smp_distribute_keys+0x34>
		info = net_buf_add(buf, sizeof(*info));
    ee56:	2110      	movs	r1, #16
    ee58:	3008      	adds	r0, #8
    ee5a:	f013 fb99 	bl	22590 <net_buf_simple_add>
		memcpy(info->ltk, rand.key, keys->enc_size);
    ee5e:	7b2a      	ldrb	r2, [r5, #12]
    ee60:	a901      	add	r1, sp, #4
		info = net_buf_add(buf, sizeof(*info));
    ee62:	4681      	mov	r9, r0
		memcpy(info->ltk, rand.key, keys->enc_size);
    ee64:	f011 f803 	bl	1fe6e <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
    ee68:	7b28      	ldrb	r0, [r5, #12]
    ee6a:	280f      	cmp	r0, #15
    ee6c:	d805      	bhi.n	ee7a <bt_smp_distribute_keys+0xaa>
			(void)memset(info->ltk + keys->enc_size, 0,
    ee6e:	f1c0 0210 	rsb	r2, r0, #16
    ee72:	4641      	mov	r1, r8
    ee74:	4448      	add	r0, r9
    ee76:	f011 f825 	bl	1fec4 <memset>
		smp_send(smp, buf, NULL, NULL);
    ee7a:	4631      	mov	r1, r6
    ee7c:	2200      	movs	r2, #0
    ee7e:	4620      	mov	r0, r4
    ee80:	f7ff fd5c 	bl	e93c <smp_send.isra.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_MASTER_IDENT,
    ee84:	2107      	movs	r1, #7
    ee86:	4620      	mov	r0, r4
    ee88:	f012 ff30 	bl	21cec <smp_create_pdu.isra.0>
		if (!buf) {
    ee8c:	4606      	mov	r6, r0
    ee8e:	b940      	cbnz	r0, eea2 <bt_smp_distribute_keys+0xd2>
    ee90:	491d      	ldr	r1, [pc, #116]	; (ef08 <bt_smp_distribute_keys+0x138>)
    ee92:	4b1c      	ldr	r3, [pc, #112]	; (ef04 <bt_smp_distribute_keys+0x134>)
			BT_ERR("Unable to allocate Master Ident buffer");
    ee94:	481f      	ldr	r0, [pc, #124]	; (ef14 <bt_smp_distribute_keys+0x144>)
    ee96:	1ac9      	subs	r1, r1, r3
    ee98:	08c9      	lsrs	r1, r1, #3
    ee9a:	0189      	lsls	r1, r1, #6
    ee9c:	f041 0101 	orr.w	r1, r1, #1
    eea0:	e7d5      	b.n	ee4e <bt_smp_distribute_keys+0x7e>
		ident = net_buf_add(buf, sizeof(*ident));
    eea2:	210a      	movs	r1, #10
    eea4:	3008      	adds	r0, #8
    eea6:	f013 fb73 	bl	22590 <net_buf_simple_add>
		memcpy(ident->rand, rand.rand, sizeof(ident->rand));
    eeaa:	2208      	movs	r2, #8
		ident = net_buf_add(buf, sizeof(*ident));
    eeac:	4680      	mov	r8, r0
		memcpy(ident->rand, rand.rand, sizeof(ident->rand));
    eeae:	a905      	add	r1, sp, #20
    eeb0:	3002      	adds	r0, #2
    eeb2:	f010 ffdc 	bl	1fe6e <memcpy>
		memcpy(ident->ediv, rand.ediv, sizeof(ident->ediv));
    eeb6:	2202      	movs	r2, #2
    eeb8:	a907      	add	r1, sp, #28
    eeba:	4640      	mov	r0, r8
    eebc:	f010 ffd7 	bl	1fe6e <memcpy>
		smp_send(smp, buf, smp_ident_sent, NULL);
    eec0:	4631      	mov	r1, r6
    eec2:	4620      	mov	r0, r4
    eec4:	4a14      	ldr	r2, [pc, #80]	; (ef18 <bt_smp_distribute_keys+0x148>)
    eec6:	f7ff fd39 	bl	e93c <smp_send.isra.0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    eeca:	210c      	movs	r1, #12
    eecc:	4638      	mov	r0, r7
    eece:	f012 fece 	bl	21c6e <atomic_test_bit>
    eed2:	2800      	cmp	r0, #0
    eed4:	d0bd      	beq.n	ee52 <bt_smp_distribute_keys+0x82>
			bt_keys_add_type(keys, BT_KEYS_SLAVE_LTK);
    eed6:	4628      	mov	r0, r5
    eed8:	2101      	movs	r1, #1
    eeda:	f013 fade 	bl	2249a <bt_keys_add_type>
			memcpy(keys->slave_ltk.val, rand.key,
    eede:	a901      	add	r1, sp, #4
    eee0:	2210      	movs	r2, #16
    eee2:	f105 004a 	add.w	r0, r5, #74	; 0x4a
    eee6:	f010 ffc2 	bl	1fe6e <memcpy>
			memcpy(keys->slave_ltk.rand, rand.rand,
    eeea:	a905      	add	r1, sp, #20
    eeec:	2208      	movs	r2, #8
    eeee:	f105 0040 	add.w	r0, r5, #64	; 0x40
    eef2:	f010 ffbc 	bl	1fe6e <memcpy>
			memcpy(keys->slave_ltk.ediv, rand.ediv,
    eef6:	2202      	movs	r2, #2
    eef8:	a907      	add	r1, sp, #28
    eefa:	f105 0048 	add.w	r0, r5, #72	; 0x48
    eefe:	f010 ffb6 	bl	1fe6e <memcpy>
    ef02:	e7a6      	b.n	ee52 <bt_smp_distribute_keys+0x82>
    ef04:	000236e8 	.word	0x000236e8
    ef08:	000237d0 	.word	0x000237d0
    ef0c:	00026b24 	.word	0x00026b24
    ef10:	00026b39 	.word	0x00026b39
    ef14:	00026b60 	.word	0x00026b60
    ef18:	00022043 	.word	0x00022043

0000ef1c <smp_pairing_complete>:
{
    ef1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ef1e:	4f22      	ldr	r7, [pc, #136]	; (efa8 <smp_pairing_complete+0x8c>)
    ef20:	4604      	mov	r4, r0
    ef22:	f100 06c4 	add.w	r6, r0, #196	; 0xc4
	if (!status) {
    ef26:	b979      	cbnz	r1, ef48 <smp_pairing_complete+0x2c>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
    ef28:	210c      	movs	r1, #12
    ef2a:	4630      	mov	r0, r6
    ef2c:	f012 fe9f 	bl	21c6e <atomic_test_bit>
		if (bt_auth && bt_auth->pairing_complete) {
    ef30:	683b      	ldr	r3, [r7, #0]
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
    ef32:	4601      	mov	r1, r0
		if (bt_auth && bt_auth->pairing_complete) {
    ef34:	b11b      	cbz	r3, ef3e <smp_pairing_complete+0x22>
    ef36:	699b      	ldr	r3, [r3, #24]
    ef38:	b10b      	cbz	r3, ef3e <smp_pairing_complete+0x22>
			bt_auth->pairing_failed(smp->chan.chan.conn, auth_err);
    ef3a:	6820      	ldr	r0, [r4, #0]
    ef3c:	4798      	blx	r3
	smp_reset(smp);
    ef3e:	4620      	mov	r0, r4
}
    ef40:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	smp_reset(smp);
    ef44:	f013 b831 	b.w	21faa <smp_reset>
	switch (smp_err) {
    ef48:	3901      	subs	r1, #1
    ef4a:	b2c9      	uxtb	r1, r1
    ef4c:	290d      	cmp	r1, #13
    ef4e:	bf9c      	itt	ls
    ef50:	4b16      	ldrls	r3, [pc, #88]	; (efac <smp_pairing_complete+0x90>)
    ef52:	5c5d      	ldrbls	r5, [r3, r1]
		if (smp->chan.chan.conn->le.keys &&
    ef54:	6803      	ldr	r3, [r0, #0]
    ef56:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
	if (!status) {
    ef5a:	bf88      	it	hi
    ef5c:	2508      	movhi	r5, #8
		if (smp->chan.chan.conn->le.keys &&
    ef5e:	b153      	cbz	r3, ef76 <smp_pairing_complete+0x5a>
    ef60:	7b1b      	ldrb	r3, [r3, #12]
    ef62:	b9cb      	cbnz	r3, ef98 <smp_pairing_complete+0x7c>
			bt_keys_clear(smp->chan.chan.conn->le.keys);
    ef64:	6823      	ldr	r3, [r4, #0]
    ef66:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
    ef6a:	f013 fa9a 	bl	224a2 <bt_keys_clear>
			smp->chan.chan.conn->le.keys = NULL;
    ef6e:	6823      	ldr	r3, [r4, #0]
    ef70:	2200      	movs	r2, #0
    ef72:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
    ef76:	2102      	movs	r1, #2
    ef78:	4630      	mov	r0, r6
    ef7a:	f012 fe78 	bl	21c6e <atomic_test_bit>
    ef7e:	b918      	cbnz	r0, ef88 <smp_pairing_complete+0x6c>
			bt_conn_security_changed(smp->chan.chan.conn, auth_err);
    ef80:	6820      	ldr	r0, [r4, #0]
    ef82:	4629      	mov	r1, r5
    ef84:	f7fb fbe4 	bl	a750 <bt_conn_security_changed>
		if (bt_auth && bt_auth->pairing_failed) {
    ef88:	683b      	ldr	r3, [r7, #0]
    ef8a:	2b00      	cmp	r3, #0
    ef8c:	d0d7      	beq.n	ef3e <smp_pairing_complete+0x22>
    ef8e:	69db      	ldr	r3, [r3, #28]
    ef90:	2b00      	cmp	r3, #0
    ef92:	d0d4      	beq.n	ef3e <smp_pairing_complete+0x22>
			bt_auth->pairing_failed(smp->chan.chan.conn, auth_err);
    ef94:	4629      	mov	r1, r5
    ef96:	e7d0      	b.n	ef3a <smp_pairing_complete+0x1e>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
    ef98:	2102      	movs	r1, #2
    ef9a:	4630      	mov	r0, r6
    ef9c:	f012 fe67 	bl	21c6e <atomic_test_bit>
		    (!smp->chan.chan.conn->le.keys->enc_size ||
    efa0:	2800      	cmp	r0, #0
    efa2:	d1df      	bne.n	ef64 <smp_pairing_complete+0x48>
    efa4:	e7e7      	b.n	ef76 <smp_pairing_complete+0x5a>
    efa6:	bf00      	nop
    efa8:	200021f0 	.word	0x200021f0
    efac:	00026cd9 	.word	0x00026cd9

0000efb0 <bt_smp_dhkey_ready>:
{
    efb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    efb4:	4c23      	ldr	r4, [pc, #140]	; (f044 <bt_smp_dhkey_ready+0x94>)
    efb6:	4605      	mov	r5, r0
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    efb8:	2600      	movs	r6, #0
    efba:	f44f 78f0 	mov.w	r8, #480	; 0x1e0
		if (atomic_test_and_clear_bit(bt_smp_pool[i].flags,
    efbe:	2107      	movs	r1, #7
    efc0:	4620      	mov	r0, r4
    efc2:	fb08 f706 	mul.w	r7, r8, r6
    efc6:	f012 ffd8 	bl	21f7a <atomic_test_and_clear_bit>
    efca:	b150      	cbz	r0, efe2 <bt_smp_dhkey_ready+0x32>
			smp = &bt_smp_pool[i];
    efcc:	f8df 8078 	ldr.w	r8, [pc, #120]	; f048 <bt_smp_dhkey_ready+0x98>
    efd0:	eb08 0607 	add.w	r6, r8, r7
	if (!dhkey) {
    efd4:	b965      	cbnz	r5, eff0 <bt_smp_dhkey_ready+0x40>
		smp_error(smp, BT_SMP_ERR_DHKEY_CHECK_FAILED);
    efd6:	210b      	movs	r1, #11
				smp_error(smp, err);
    efd8:	4630      	mov	r0, r6
}
    efda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				smp_error(smp, err);
    efde:	f013 b812 	b.w	22006 <smp_error>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    efe2:	3601      	adds	r6, #1
    efe4:	2e04      	cmp	r6, #4
    efe6:	f504 74f0 	add.w	r4, r4, #480	; 0x1e0
    efea:	d1e8      	bne.n	efbe <bt_smp_dhkey_ready+0xe>
}
    efec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	memcpy(smp->dhkey, dhkey, 32);
    eff0:	f207 1057 	addw	r0, r7, #343	; 0x157
    eff4:	4629      	mov	r1, r5
    eff6:	2220      	movs	r2, #32
    eff8:	4440      	add	r0, r8
    effa:	f010 ff38 	bl	1fe6e <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    effe:	2109      	movs	r1, #9
    f000:	4620      	mov	r0, r4
    f002:	f012 fe34 	bl	21c6e <atomic_test_bit>
    f006:	b128      	cbz	r0, f014 <bt_smp_dhkey_ready+0x64>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    f008:	2108      	movs	r1, #8
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    f00a:	4620      	mov	r0, r4
}
    f00c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    f010:	f012 be1f 	b.w	21c52 <atomic_set_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
    f014:	210f      	movs	r1, #15
    f016:	4620      	mov	r0, r4
    f018:	f012 fe29 	bl	21c6e <atomic_test_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    f01c:	2108      	movs	r1, #8
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
    f01e:	2800      	cmp	r0, #0
    f020:	d1f3      	bne.n	f00a <bt_smp_dhkey_ready+0x5a>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
    f022:	4620      	mov	r0, r4
    f024:	f012 fe23 	bl	21c6e <atomic_test_bit>
    f028:	2800      	cmp	r0, #0
    f02a:	d0df      	beq.n	efec <bt_smp_dhkey_ready+0x3c>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    f02c:	f858 3007 	ldr.w	r3, [r8, r7]
    f030:	78db      	ldrb	r3, [r3, #3]
    f032:	2b00      	cmp	r3, #0
    f034:	d1da      	bne.n	efec <bt_smp_dhkey_ready+0x3c>
			err = compute_and_send_master_dhcheck(smp);
    f036:	4630      	mov	r0, r6
    f038:	f7ff fc98 	bl	e96c <compute_and_send_master_dhcheck>
			if (err) {
    f03c:	4601      	mov	r1, r0
    f03e:	2800      	cmp	r0, #0
    f040:	d0d4      	beq.n	efec <bt_smp_dhkey_ready+0x3c>
    f042:	e7c9      	b.n	efd8 <bt_smp_dhkey_ready+0x28>
    f044:	200012f4 	.word	0x200012f4
    f048:	20001230 	.word	0x20001230

0000f04c <bt_smp_recv>:
{
    f04c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    f04e:	898b      	ldrh	r3, [r1, #12]
{
    f050:	4604      	mov	r4, r0
    f052:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    f054:	b95b      	cbnz	r3, f06e <bt_smp_recv+0x22>
    f056:	4935      	ldr	r1, [pc, #212]	; (f12c <bt_smp_recv+0xe0>)
    f058:	4b35      	ldr	r3, [pc, #212]	; (f130 <bt_smp_recv+0xe4>)
		BT_ERR("Too small SMP PDU received");
    f05a:	4836      	ldr	r0, [pc, #216]	; (f134 <bt_smp_recv+0xe8>)
    f05c:	1ac9      	subs	r1, r1, r3
    f05e:	08c9      	lsrs	r1, r1, #3
    f060:	0189      	lsls	r1, r1, #6
    f062:	f041 0101 	orr.w	r1, r1, #1
    f066:	f00f fa30 	bl	1e4ca <log_0>
}
    f06a:	2000      	movs	r0, #0
    f06c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    f06e:	2101      	movs	r1, #1
    f070:	f105 0008 	add.w	r0, r5, #8
    f074:	f013 fac9 	bl	2260a <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    f078:	2104      	movs	r1, #4
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    f07a:	4606      	mov	r6, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    f07c:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
    f080:	f012 fdf5 	bl	21c6e <atomic_test_bit>
    f084:	7831      	ldrb	r1, [r6, #0]
    f086:	b150      	cbz	r0, f09e <bt_smp_recv+0x52>
    f088:	4b29      	ldr	r3, [pc, #164]	; (f130 <bt_smp_recv+0xe4>)
    f08a:	4a28      	ldr	r2, [pc, #160]	; (f12c <bt_smp_recv+0xe0>)
		BT_WARN("SMP command (code 0x%02x) received after timeout",
    f08c:	482a      	ldr	r0, [pc, #168]	; (f138 <bt_smp_recv+0xec>)
    f08e:	1ad2      	subs	r2, r2, r3
    f090:	08d2      	lsrs	r2, r2, #3
    f092:	0192      	lsls	r2, r2, #6
    f094:	f042 0202 	orr.w	r2, r2, #2
    f098:	f00f fa24 	bl	1e4e4 <log_1>
		return 0;
    f09c:	e7e5      	b.n	f06a <bt_smp_recv+0x1e>
	if (hdr->code >= ARRAY_SIZE(handlers) || !handlers[hdr->code].func) {
    f09e:	290d      	cmp	r1, #13
    f0a0:	d803      	bhi.n	f0aa <bt_smp_recv+0x5e>
    f0a2:	4f26      	ldr	r7, [pc, #152]	; (f13c <bt_smp_recv+0xf0>)
    f0a4:	f857 3031 	ldr.w	r3, [r7, r1, lsl #3]
    f0a8:	b973      	cbnz	r3, f0c8 <bt_smp_recv+0x7c>
    f0aa:	4b21      	ldr	r3, [pc, #132]	; (f130 <bt_smp_recv+0xe4>)
    f0ac:	4a1f      	ldr	r2, [pc, #124]	; (f12c <bt_smp_recv+0xe0>)
		BT_WARN("Unhandled SMP code 0x%02x", hdr->code);
    f0ae:	4824      	ldr	r0, [pc, #144]	; (f140 <bt_smp_recv+0xf4>)
    f0b0:	1ad2      	subs	r2, r2, r3
    f0b2:	08d2      	lsrs	r2, r2, #3
    f0b4:	0192      	lsls	r2, r2, #6
    f0b6:	f042 0202 	orr.w	r2, r2, #2
    f0ba:	f00f fa13 	bl	1e4e4 <log_1>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
    f0be:	2107      	movs	r1, #7
		smp_error(smp, err);
    f0c0:	4620      	mov	r0, r4
    f0c2:	f012 ffa0 	bl	22006 <smp_error>
    f0c6:	e7d0      	b.n	f06a <bt_smp_recv+0x1e>
	if (!atomic_test_and_clear_bit(&smp->allowed_cmds, hdr->code)) {
    f0c8:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    f0cc:	f012 ff55 	bl	21f7a <atomic_test_and_clear_bit>
    f0d0:	7831      	ldrb	r1, [r6, #0]
    f0d2:	b970      	cbnz	r0, f0f2 <bt_smp_recv+0xa6>
    f0d4:	4b16      	ldr	r3, [pc, #88]	; (f130 <bt_smp_recv+0xe4>)
    f0d6:	4a15      	ldr	r2, [pc, #84]	; (f12c <bt_smp_recv+0xe0>)
		BT_WARN("Unexpected SMP code 0x%02x", hdr->code);
    f0d8:	481a      	ldr	r0, [pc, #104]	; (f144 <bt_smp_recv+0xf8>)
    f0da:	1ad2      	subs	r2, r2, r3
    f0dc:	08d2      	lsrs	r2, r2, #3
    f0de:	0192      	lsls	r2, r2, #6
    f0e0:	f042 0202 	orr.w	r2, r2, #2
    f0e4:	f00f f9fe 	bl	1e4e4 <log_1>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
    f0e8:	7833      	ldrb	r3, [r6, #0]
    f0ea:	2b05      	cmp	r3, #5
    f0ec:	d0bd      	beq.n	f06a <bt_smp_recv+0x1e>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    f0ee:	2108      	movs	r1, #8
    f0f0:	e7e6      	b.n	f0c0 <bt_smp_recv+0x74>
	if (buf->len != handlers[hdr->code].expect_len) {
    f0f2:	eb07 03c1 	add.w	r3, r7, r1, lsl #3
    f0f6:	89a8      	ldrh	r0, [r5, #12]
    f0f8:	791b      	ldrb	r3, [r3, #4]
    f0fa:	4283      	cmp	r3, r0
    f0fc:	d00d      	beq.n	f11a <bt_smp_recv+0xce>
    f0fe:	4a0c      	ldr	r2, [pc, #48]	; (f130 <bt_smp_recv+0xe4>)
    f100:	4b0a      	ldr	r3, [pc, #40]	; (f12c <bt_smp_recv+0xe0>)
    f102:	1a9b      	subs	r3, r3, r2
    f104:	08db      	lsrs	r3, r3, #3
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    f106:	019b      	lsls	r3, r3, #6
    f108:	460a      	mov	r2, r1
    f10a:	f043 0301 	orr.w	r3, r3, #1
    f10e:	4601      	mov	r1, r0
    f110:	480d      	ldr	r0, [pc, #52]	; (f148 <bt_smp_recv+0xfc>)
    f112:	f00f f9fb 	bl	1e50c <log_2>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
    f116:	210a      	movs	r1, #10
    f118:	e7d2      	b.n	f0c0 <bt_smp_recv+0x74>
	err = handlers[hdr->code].func(smp, buf);
    f11a:	f857 3031 	ldr.w	r3, [r7, r1, lsl #3]
    f11e:	4620      	mov	r0, r4
    f120:	4629      	mov	r1, r5
    f122:	4798      	blx	r3
	if (err) {
    f124:	4601      	mov	r1, r0
    f126:	2800      	cmp	r0, #0
    f128:	d09f      	beq.n	f06a <bt_smp_recv+0x1e>
    f12a:	e7c9      	b.n	f0c0 <bt_smp_recv+0x74>
    f12c:	000237d0 	.word	0x000237d0
    f130:	000236e8 	.word	0x000236e8
    f134:	00026b87 	.word	0x00026b87
    f138:	00026ba2 	.word	0x00026ba2
    f13c:	00023f14 	.word	0x00023f14
    f140:	00026bd3 	.word	0x00026bd3
    f144:	00026bed 	.word	0x00026bed
    f148:	0002689c 	.word	0x0002689c

0000f14c <bt_smp_pkey_ready>:
	sc_public_key = pkey;
    f14c:	4b18      	ldr	r3, [pc, #96]	; (f1b0 <bt_smp_pkey_ready+0x64>)
{
    f14e:	b570      	push	{r4, r5, r6, lr}
	sc_public_key = pkey;
    f150:	6018      	str	r0, [r3, #0]
	if (!pkey) {
    f152:	b958      	cbnz	r0, f16c <bt_smp_pkey_ready+0x20>
    f154:	4917      	ldr	r1, [pc, #92]	; (f1b4 <bt_smp_pkey_ready+0x68>)
    f156:	4b18      	ldr	r3, [pc, #96]	; (f1b8 <bt_smp_pkey_ready+0x6c>)
		BT_WARN("Public key not available");
    f158:	4818      	ldr	r0, [pc, #96]	; (f1bc <bt_smp_pkey_ready+0x70>)
    f15a:	1ac9      	subs	r1, r1, r3
    f15c:	08c9      	lsrs	r1, r1, #3
    f15e:	0189      	lsls	r1, r1, #6
}
    f160:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_WARN("Public key not available");
    f164:	f041 0102 	orr.w	r1, r1, #2
    f168:	f00f b9af 	b.w	1e4ca <log_0>
	z_impl_k_sem_give(sem);
    f16c:	4814      	ldr	r0, [pc, #80]	; (f1c0 <bt_smp_pkey_ready+0x74>)
    f16e:	4c15      	ldr	r4, [pc, #84]	; (f1c4 <bt_smp_pkey_ready+0x78>)
    f170:	f00e fafe 	bl	1d770 <z_impl_k_sem_give>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    f174:	2500      	movs	r5, #0
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
    f176:	2106      	movs	r1, #6
    f178:	4620      	mov	r0, r4
    f17a:	f012 fd78 	bl	21c6e <atomic_test_bit>
    f17e:	b188      	cbz	r0, f1a4 <bt_smp_pkey_ready+0x58>
		    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    f180:	f854 3cc4 	ldr.w	r3, [r4, #-196]
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    f184:	78db      	ldrb	r3, [r3, #3]
    f186:	b96b      	cbnz	r3, f1a4 <bt_smp_pkey_ready+0x58>
    f188:	f1a4 06c4 	sub.w	r6, r4, #196	; 0xc4
			err = sc_send_public_key(smp);
    f18c:	4630      	mov	r0, r6
    f18e:	f7ff fca5 	bl	eadc <sc_send_public_key>
			if (err) {
    f192:	4601      	mov	r1, r0
    f194:	b110      	cbz	r0, f19c <bt_smp_pkey_ready+0x50>
				smp_error(smp, err);
    f196:	4630      	mov	r0, r6
    f198:	f012 ff35 	bl	22006 <smp_error>
			atomic_set_bit(&smp->allowed_cmds,
    f19c:	210c      	movs	r1, #12
    f19e:	1f20      	subs	r0, r4, #4
    f1a0:	f012 fd57 	bl	21c52 <atomic_set_bit>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    f1a4:	3501      	adds	r5, #1
    f1a6:	2d04      	cmp	r5, #4
    f1a8:	f504 74f0 	add.w	r4, r4, #480	; 0x1e0
    f1ac:	d1e3      	bne.n	f176 <bt_smp_pkey_ready+0x2a>
}
    f1ae:	bd70      	pop	{r4, r5, r6, pc}
    f1b0:	200023c0 	.word	0x200023c0
    f1b4:	000237d0 	.word	0x000237d0
    f1b8:	000236e8 	.word	0x000236e8
    f1bc:	00026c08 	.word	0x00026c08
    f1c0:	20000878 	.word	0x20000878
    f1c4:	200012f4 	.word	0x200012f4

0000f1c8 <smp_timeout>:
    f1c8:	4b0b      	ldr	r3, [pc, #44]	; (f1f8 <smp_timeout+0x30>)
    f1ca:	490c      	ldr	r1, [pc, #48]	; (f1fc <smp_timeout+0x34>)
{
    f1cc:	b510      	push	{r4, lr}
    f1ce:	1ac9      	subs	r1, r1, r3
    f1d0:	08c9      	lsrs	r1, r1, #3
	BT_ERR("SMP Timeout");
    f1d2:	0189      	lsls	r1, r1, #6
{
    f1d4:	4604      	mov	r4, r0
	BT_ERR("SMP Timeout");
    f1d6:	f041 0101 	orr.w	r1, r1, #1
    f1da:	4809      	ldr	r0, [pc, #36]	; (f200 <smp_timeout+0x38>)
    f1dc:	f00f f975 	bl	1e4ca <log_0>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
    f1e0:	f5a4 70d8 	sub.w	r0, r4, #432	; 0x1b0
    f1e4:	2108      	movs	r1, #8
    f1e6:	f7ff fe99 	bl	ef1c <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
    f1ea:	f1a4 00ec 	sub.w	r0, r4, #236	; 0xec
    f1ee:	2104      	movs	r1, #4
}
    f1f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
    f1f4:	f012 bd2d 	b.w	21c52 <atomic_set_bit>
    f1f8:	000236e8 	.word	0x000236e8
    f1fc:	000237d0 	.word	0x000237d0
    f200:	00026c21 	.word	0x00026c21

0000f204 <smp_pairing_failed>:
{
    f204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f206:	4a15      	ldr	r2, [pc, #84]	; (f25c <smp_pairing_failed+0x58>)
    f208:	4b15      	ldr	r3, [pc, #84]	; (f260 <smp_pairing_failed+0x5c>)
	struct bt_smp_pairing_fail *req = (void *)buf->data;
    f20a:	688e      	ldr	r6, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
    f20c:	4605      	mov	r5, r0
    f20e:	1ad2      	subs	r2, r2, r3
    f210:	08d2      	lsrs	r2, r2, #3
    f212:	f855 7bc4 	ldr.w	r7, [r5], #196
	BT_ERR("reason 0x%x", req->reason);
    f216:	7831      	ldrb	r1, [r6, #0]
    f218:	0192      	lsls	r2, r2, #6
{
    f21a:	4604      	mov	r4, r0
	BT_ERR("reason 0x%x", req->reason);
    f21c:	f042 0201 	orr.w	r2, r2, #1
    f220:	4810      	ldr	r0, [pc, #64]	; (f264 <smp_pairing_failed+0x60>)
    f222:	f00f f95f 	bl	1e4e4 <log_1>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
    f226:	2109      	movs	r1, #9
    f228:	4628      	mov	r0, r5
    f22a:	f012 fea6 	bl	21f7a <atomic_test_and_clear_bit>
    f22e:	b140      	cbz	r0, f242 <smp_pairing_failed+0x3e>
		if (bt_auth && bt_auth->cancel) {
    f230:	4b0d      	ldr	r3, [pc, #52]	; (f268 <smp_pairing_failed+0x64>)
    f232:	681b      	ldr	r3, [r3, #0]
    f234:	b963      	cbnz	r3, f250 <smp_pairing_failed+0x4c>
	smp_pairing_complete(smp, req->reason);
    f236:	4620      	mov	r0, r4
    f238:	7831      	ldrb	r1, [r6, #0]
    f23a:	f7ff fe6f 	bl	ef1c <smp_pairing_complete>
}
    f23e:	2000      	movs	r0, #0
    f240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
    f242:	210a      	movs	r1, #10
    f244:	4628      	mov	r0, r5
    f246:	f012 fe98 	bl	21f7a <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
    f24a:	2800      	cmp	r0, #0
    f24c:	d1f0      	bne.n	f230 <smp_pairing_failed+0x2c>
    f24e:	e7f2      	b.n	f236 <smp_pairing_failed+0x32>
		if (bt_auth && bt_auth->cancel) {
    f250:	691b      	ldr	r3, [r3, #16]
    f252:	2b00      	cmp	r3, #0
    f254:	d0ef      	beq.n	f236 <smp_pairing_failed+0x32>
			bt_auth->cancel(conn);
    f256:	4638      	mov	r0, r7
    f258:	4798      	blx	r3
    f25a:	e7ec      	b.n	f236 <smp_pairing_failed+0x32>
    f25c:	000237d0 	.word	0x000237d0
    f260:	000236e8 	.word	0x000236e8
    f264:	00026c2d 	.word	0x00026c2d
    f268:	200021f0 	.word	0x200021f0

0000f26c <smp_master_ident>:
{
    f26c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f270:	460b      	mov	r3, r1
    f272:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    f274:	210c      	movs	r1, #12
	struct bt_conn *conn = smp->chan.chan.conn;
    f276:	f850 6bc4 	ldr.w	r6, [r0], #196
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    f27a:	f012 fcf8 	bl	21c6e <atomic_test_bit>
    f27e:	b380      	cbz	r0, f2e2 <smp_master_ident+0x76>
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
    f280:	f106 0788 	add.w	r7, r6, #136	; 0x88
    f284:	7a31      	ldrb	r1, [r6, #8]
		struct bt_smp_master_ident *req = (void *)buf->data;
    f286:	f8d3 8008 	ldr.w	r8, [r3, #8]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
    f28a:	463a      	mov	r2, r7
    f28c:	2004      	movs	r0, #4
    f28e:	f013 f8f4 	bl	2247a <bt_keys_get_type>
		if (!keys) {
    f292:	4605      	mov	r5, r0
    f294:	b998      	cbnz	r0, f2be <smp_master_ident+0x52>
    f296:	4a25      	ldr	r2, [pc, #148]	; (f32c <smp_master_ident+0xc0>)
    f298:	4c25      	ldr	r4, [pc, #148]	; (f330 <smp_master_ident+0xc4>)
			BT_ERR("Unable to get keys for %s",
    f29a:	4638      	mov	r0, r7
    f29c:	1aa4      	subs	r4, r4, r2
    f29e:	f7f8 fd7b 	bl	7d98 <bt_addr_le_str_real>
    f2a2:	f7f7 f817 	bl	62d4 <log_strdup>
    f2a6:	08e4      	lsrs	r4, r4, #3
    f2a8:	01a4      	lsls	r4, r4, #6
    f2aa:	f044 0401 	orr.w	r4, r4, #1
    f2ae:	4601      	mov	r1, r0
    f2b0:	4622      	mov	r2, r4
    f2b2:	4820      	ldr	r0, [pc, #128]	; (f334 <smp_master_ident+0xc8>)
    f2b4:	f00f f916 	bl	1e4e4 <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
    f2b8:	2008      	movs	r0, #8
}
    f2ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(keys->ltk.ediv, req->ediv, sizeof(keys->ltk.ediv));
    f2be:	2202      	movs	r2, #2
    f2c0:	4641      	mov	r1, r8
    f2c2:	3018      	adds	r0, #24
    f2c4:	f010 fdd3 	bl	1fe6e <memcpy>
		memcpy(keys->ltk.rand, req->rand, sizeof(req->rand));
    f2c8:	2208      	movs	r2, #8
    f2ca:	f108 0102 	add.w	r1, r8, #2
    f2ce:	f105 0010 	add.w	r0, r5, #16
    f2d2:	f010 fdcc 	bl	1fe6e <memcpy>
		smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
    f2d6:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
    f2da:	f023 0301 	bic.w	r3, r3, #1
    f2de:	f884 31a9 	strb.w	r3, [r4, #425]	; 0x1a9
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
    f2e2:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
    f2e6:	079a      	lsls	r2, r3, #30
    f2e8:	d50b      	bpl.n	f302 <smp_master_ident+0x96>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
    f2ea:	2108      	movs	r1, #8
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    f2ec:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    f2f0:	f012 fcaf 	bl	21c52 <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    f2f4:	78f3      	ldrb	r3, [r6, #3]
    f2f6:	b143      	cbz	r3, f30a <smp_master_ident+0x9e>
	if (!smp->local_dist && !smp->remote_dist) {
    f2f8:	f8b4 51a8 	ldrh.w	r5, [r4, #424]	; 0x1a8
    f2fc:	b17d      	cbz	r5, f31e <smp_master_ident+0xb2>
	return 0;
    f2fe:	2000      	movs	r0, #0
    f300:	e7db      	b.n	f2ba <smp_master_ident+0x4e>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    f302:	075b      	lsls	r3, r3, #29
    f304:	d5f6      	bpl.n	f2f4 <smp_master_ident+0x88>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    f306:	210a      	movs	r1, #10
    f308:	e7f0      	b.n	f2ec <smp_master_ident+0x80>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    f30a:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
    f30e:	2b00      	cmp	r3, #0
    f310:	d1f2      	bne.n	f2f8 <smp_master_ident+0x8c>
		err = bt_smp_distribute_keys(smp);
    f312:	4620      	mov	r0, r4
    f314:	f7ff fd5c 	bl	edd0 <bt_smp_distribute_keys>
		if (err) {
    f318:	2800      	cmp	r0, #0
    f31a:	d0ed      	beq.n	f2f8 <smp_master_ident+0x8c>
    f31c:	e7cd      	b.n	f2ba <smp_master_ident+0x4e>
		smp_pairing_complete(smp, 0);
    f31e:	4620      	mov	r0, r4
    f320:	4629      	mov	r1, r5
    f322:	f7ff fdfb 	bl	ef1c <smp_pairing_complete>
	return 0;
    f326:	4628      	mov	r0, r5
    f328:	e7c7      	b.n	f2ba <smp_master_ident+0x4e>
    f32a:	bf00      	nop
    f32c:	000236e8 	.word	0x000236e8
    f330:	000237d0 	.word	0x000237d0
    f334:	00026a74 	.word	0x00026a74

0000f338 <bt_smp_connected>:
{
    f338:	b510      	push	{r4, lr}
	k_delayed_work_init(&smp->work, smp_timeout);
    f33a:	4905      	ldr	r1, [pc, #20]	; (f350 <bt_smp_connected+0x18>)
{
    f33c:	4604      	mov	r4, r0
	k_delayed_work_init(&smp->work, smp_timeout);
    f33e:	f500 70d8 	add.w	r0, r0, #432	; 0x1b0
    f342:	f013 fed5 	bl	230f0 <k_delayed_work_init>
	smp_reset(smp);
    f346:	4620      	mov	r0, r4
}
    f348:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	smp_reset(smp);
    f34c:	f012 be2d 	b.w	21faa <smp_reset>
    f350:	0000f1c9 	.word	0x0000f1c9

0000f354 <smp_send_pairing_confirm>:
{
    f354:	b573      	push	{r0, r1, r4, r5, r6, lr}
	switch (smp->method) {
    f356:	f890 40c8 	ldrb.w	r4, [r0, #200]	; 0xc8
    f35a:	2c02      	cmp	r4, #2
{
    f35c:	4605      	mov	r5, r0
	switch (smp->method) {
    f35e:	d824      	bhi.n	f3aa <smp_send_pairing_confirm+0x56>
    f360:	b14c      	cbz	r4, f376 <smp_send_pairing_confirm+0x22>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    f362:	f890 319c 	ldrb.w	r3, [r0, #412]	; 0x19c
    f366:	f8d0 4198 	ldr.w	r4, [r0, #408]	; 0x198
    f36a:	40dc      	lsrs	r4, r3
    f36c:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
    f370:	f064 047f 	orn	r4, r4, #127	; 0x7f
    f374:	b2e4      	uxtb	r4, r4
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
    f376:	2103      	movs	r1, #3
    f378:	4628      	mov	r0, r5
    f37a:	f012 fcb7 	bl	21cec <smp_create_pdu.isra.0>
	if (!buf) {
    f37e:	4606      	mov	r6, r0
    f380:	b1a8      	cbz	r0, f3ae <smp_send_pairing_confirm+0x5a>
	req = net_buf_add(buf, sizeof(*req));
    f382:	2110      	movs	r1, #16
    f384:	3008      	adds	r0, #8
    f386:	f013 f903 	bl	22590 <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
    f38a:	9000      	str	r0, [sp, #0]
    f38c:	4814      	ldr	r0, [pc, #80]	; (f3e0 <smp_send_pairing_confirm+0x8c>)
    f38e:	4623      	mov	r3, r4
    f390:	6800      	ldr	r0, [r0, #0]
    f392:	f105 02e7 	add.w	r2, r5, #231	; 0xe7
    f396:	f205 1117 	addw	r1, r5, #279	; 0x117
    f39a:	f012 fd89 	bl	21eb0 <smp_f4>
    f39e:	4604      	mov	r4, r0
    f3a0:	b148      	cbz	r0, f3b6 <smp_send_pairing_confirm+0x62>
		net_buf_unref(buf);
    f3a2:	4630      	mov	r0, r6
    f3a4:	f00c fb98 	bl	1bad8 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
    f3a8:	e001      	b.n	f3ae <smp_send_pairing_confirm+0x5a>
	switch (smp->method) {
    f3aa:	2c03      	cmp	r4, #3
    f3ac:	d001      	beq.n	f3b2 <smp_send_pairing_confirm+0x5e>
		return BT_SMP_ERR_UNSPECIFIED;
    f3ae:	2008      	movs	r0, #8
    f3b0:	e014      	b.n	f3dc <smp_send_pairing_confirm+0x88>
	switch (smp->method) {
    f3b2:	2400      	movs	r4, #0
    f3b4:	e7df      	b.n	f376 <smp_send_pairing_confirm+0x22>
	smp_send(smp, buf, NULL, NULL);
    f3b6:	4602      	mov	r2, r0
    f3b8:	4631      	mov	r1, r6
    f3ba:	4628      	mov	r0, r5
    f3bc:	35c4      	adds	r5, #196	; 0xc4
    f3be:	f7ff fabd 	bl	e93c <smp_send.isra.0>
    f3c2:	f3bf 8f5b 	dmb	ish
    f3c6:	e855 3f00 	ldrex	r3, [r5]
    f3ca:	f023 0301 	bic.w	r3, r3, #1
    f3ce:	e845 3200 	strex	r2, r3, [r5]
    f3d2:	2a00      	cmp	r2, #0
    f3d4:	d1f7      	bne.n	f3c6 <smp_send_pairing_confirm+0x72>
    f3d6:	f3bf 8f5b 	dmb	ish
	return 0;
    f3da:	4620      	mov	r0, r4
}
    f3dc:	b002      	add	sp, #8
    f3de:	bd70      	pop	{r4, r5, r6, pc}
    f3e0:	200023c0 	.word	0x200023c0

0000f3e4 <smp_public_key>:
{
    f3e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_smp_public_key *req = (void *)buf->data;
    f3e6:	688e      	ldr	r6, [r1, #8]
	memcpy(smp->pkey, req->x, 32);
    f3e8:	f200 1517 	addw	r5, r0, #279	; 0x117
{
    f3ec:	4604      	mov	r4, r0
	memcpy(smp->pkey, req->x, 32);
    f3ee:	2220      	movs	r2, #32
    f3f0:	4631      	mov	r1, r6
    f3f2:	4628      	mov	r0, r5
    f3f4:	f010 fd3b 	bl	1fe6e <memcpy>
	memcpy(&smp->pkey[32], req->y, 32);
    f3f8:	2220      	movs	r2, #32
    f3fa:	18b1      	adds	r1, r6, r2
    f3fc:	f204 1037 	addw	r0, r4, #311	; 0x137
    f400:	f010 fd35 	bl	1fe6e <memcpy>
	if (memcmp(smp->pkey, sc_debug_public_key, 64) == 0) {
    f404:	495e      	ldr	r1, [pc, #376]	; (f580 <smp_public_key+0x19c>)
    f406:	2240      	movs	r2, #64	; 0x40
    f408:	4628      	mov	r0, r5
    f40a:	f010 fd20 	bl	1fe4e <memcmp>
    f40e:	b128      	cbz	r0, f41c <smp_public_key+0x38>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    f410:	6823      	ldr	r3, [r4, #0]
    f412:	78db      	ldrb	r3, [r3, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    f414:	b353      	cbz	r3, f46c <smp_public_key+0x88>
	return 0;
    f416:	2000      	movs	r0, #0
}
    f418:	b002      	add	sp, #8
    f41a:	bd70      	pop	{r4, r5, r6, pc}
    f41c:	4b59      	ldr	r3, [pc, #356]	; (f584 <smp_public_key+0x1a0>)
    f41e:	495a      	ldr	r1, [pc, #360]	; (f588 <smp_public_key+0x1a4>)
		BT_INFO("Remote is using Debug Public key");
    f420:	485a      	ldr	r0, [pc, #360]	; (f58c <smp_public_key+0x1a8>)
    f422:	1ac9      	subs	r1, r1, r3
    f424:	08c9      	lsrs	r1, r1, #3
    f426:	0189      	lsls	r1, r1, #6
    f428:	f041 0103 	orr.w	r1, r1, #3
    f42c:	f00f f84d 	bl	1e4ca <log_0>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
    f430:	210d      	movs	r1, #13
    f432:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
    f436:	f012 fc0c 	bl	21c52 <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
    f43a:	6826      	ldr	r6, [r4, #0]
	if (!conn->le.keys) {
    f43c:	f8d6 30b4 	ldr.w	r3, [r6, #180]	; 0xb4
    f440:	b933      	cbnz	r3, f450 <smp_public_key+0x6c>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    f442:	7a30      	ldrb	r0, [r6, #8]
    f444:	f106 0188 	add.w	r1, r6, #136	; 0x88
    f448:	f000 fcf4 	bl	fe34 <bt_keys_get_addr>
    f44c:	f8c6 00b4 	str.w	r0, [r6, #180]	; 0xb4
	if (!conn->le.keys ||
    f450:	f8d6 30b4 	ldr.w	r3, [r6, #180]	; 0xb4
    f454:	2b00      	cmp	r3, #0
    f456:	d0db      	beq.n	f410 <smp_public_key+0x2c>
    f458:	89da      	ldrh	r2, [r3, #14]
    f45a:	f002 0224 	and.w	r2, r2, #36	; 0x24
    f45e:	2a00      	cmp	r2, #0
    f460:	d0d6      	beq.n	f410 <smp_public_key+0x2c>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
    f462:	7b5b      	ldrb	r3, [r3, #13]
    f464:	0799      	lsls	r1, r3, #30
    f466:	d5d3      	bpl.n	f410 <smp_public_key+0x2c>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
    f468:	2003      	movs	r0, #3
    f46a:	e7d5      	b.n	f418 <smp_public_key+0x34>
		switch (smp->method) {
    f46c:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    f470:	2b05      	cmp	r3, #5
    f472:	d81a      	bhi.n	f4aa <smp_public_key+0xc6>
    f474:	e8df f003 	tbb	[pc, r3]
    f478:	03134103 	.word	0x03134103
    f47c:	4c19      	.short	0x4c19
			atomic_set_bit(&smp->allowed_cmds,
    f47e:	2103      	movs	r1, #3
    f480:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    f484:	f012 fbe5 	bl	21c52 <atomic_set_bit>
	if (bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready)) {
    f488:	4941      	ldr	r1, [pc, #260]	; (f590 <smp_public_key+0x1ac>)
    f48a:	4628      	mov	r0, r5
    f48c:	f7fa ffa4 	bl	a3d8 <bt_dh_key_gen>
    f490:	b958      	cbnz	r0, f4aa <smp_public_key+0xc6>
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
    f492:	2107      	movs	r1, #7
    f494:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
    f498:	f012 fbdb 	bl	21c52 <atomic_set_bit>
	return 0;
    f49c:	e7bb      	b.n	f416 <smp_public_key+0x32>
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
    f49e:	2104      	movs	r1, #4
    f4a0:	f504 70cc 	add.w	r0, r4, #408	; 0x198
    f4a4:	f003 ff0e 	bl	132c4 <bt_rand>
    f4a8:	b108      	cbz	r0, f4ae <smp_public_key+0xca>
		switch (smp->method) {
    f4aa:	2008      	movs	r0, #8
    f4ac:	e7b4      	b.n	f418 <smp_public_key+0x34>
		smp->passkey %= 1000000;
    f4ae:	f8d4 1198 	ldr.w	r1, [r4, #408]	; 0x198
    f4b2:	4a38      	ldr	r2, [pc, #224]	; (f594 <smp_public_key+0x1b0>)
	if (bt_auth && bt_auth->passkey_display) {
    f4b4:	4e38      	ldr	r6, [pc, #224]	; (f598 <smp_public_key+0x1b4>)
		smp->passkey %= 1000000;
    f4b6:	fbb1 f3f2 	udiv	r3, r1, r2
    f4ba:	fb02 1313 	mls	r3, r2, r3, r1
    f4be:	f8c4 3198 	str.w	r3, [r4, #408]	; 0x198
	if (bt_auth && bt_auth->passkey_display) {
    f4c2:	6833      	ldr	r3, [r6, #0]
	smp->passkey_round = 0U;
    f4c4:	f884 019c 	strb.w	r0, [r4, #412]	; 0x19c
	if (bt_auth && bt_auth->passkey_display) {
    f4c8:	b163      	cbz	r3, f4e4 <smp_public_key+0x100>
    f4ca:	681b      	ldr	r3, [r3, #0]
    f4cc:	b153      	cbz	r3, f4e4 <smp_public_key+0x100>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
    f4ce:	210a      	movs	r1, #10
    f4d0:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
    f4d4:	f012 fbbd 	bl	21c52 <atomic_set_bit>
		bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
    f4d8:	6833      	ldr	r3, [r6, #0]
    f4da:	f8d4 1198 	ldr.w	r1, [r4, #408]	; 0x198
    f4de:	681b      	ldr	r3, [r3, #0]
    f4e0:	6820      	ldr	r0, [r4, #0]
    f4e2:	4798      	blx	r3
			atomic_set_bit(&smp->allowed_cmds,
    f4e4:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    f4e8:	2103      	movs	r1, #3
    f4ea:	f012 fbb2 	bl	21c52 <atomic_set_bit>
			err = smp_send_pairing_confirm(smp);
    f4ee:	4620      	mov	r0, r4
    f4f0:	f7ff ff30 	bl	f354 <smp_send_pairing_confirm>
			if (err) {
    f4f4:	2800      	cmp	r0, #0
    f4f6:	d18f      	bne.n	f418 <smp_public_key+0x34>
    f4f8:	e7c6      	b.n	f488 <smp_public_key+0xa4>
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    f4fa:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
    f4fe:	2109      	movs	r1, #9
    f500:	f012 fba7 	bl	21c52 <atomic_set_bit>
			bt_auth->passkey_entry(smp->chan.chan.conn);
    f504:	4b24      	ldr	r3, [pc, #144]	; (f598 <smp_public_key+0x1b4>)
    f506:	6820      	ldr	r0, [r4, #0]
    f508:	681b      	ldr	r3, [r3, #0]
    f50a:	685b      	ldr	r3, [r3, #4]
    f50c:	4798      	blx	r3
			break;
    f50e:	e7bb      	b.n	f488 <smp_public_key+0xa4>
			if (bt_rand(smp->prnd, 16)) {
    f510:	2110      	movs	r1, #16
    f512:	f104 00e7 	add.w	r0, r4, #231	; 0xe7
    f516:	f003 fed5 	bl	132c4 <bt_rand>
    f51a:	2800      	cmp	r0, #0
    f51c:	d1c5      	bne.n	f4aa <smp_public_key+0xc6>
			if (bt_auth && bt_auth->oob_data_request) {
    f51e:	4e1e      	ldr	r6, [pc, #120]	; (f598 <smp_public_key+0x1b4>)
    f520:	6833      	ldr	r3, [r6, #0]
    f522:	b32b      	cbz	r3, f570 <smp_public_key+0x18c>
    f524:	68db      	ldr	r3, [r3, #12]
    f526:	b31b      	cbz	r3, f570 <smp_public_key+0x18c>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    f528:	6821      	ldr	r1, [r4, #0]
				struct bt_conn_oob_info info = {
    f52a:	4b1c      	ldr	r3, [pc, #112]	; (f59c <smp_public_key+0x1b8>)
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    f52c:	78c9      	ldrb	r1, [r1, #3]
				struct bt_conn_oob_info info = {
    f52e:	881b      	ldrh	r3, [r3, #0]
    f530:	f8ad 3004 	strh.w	r3, [sp, #4]
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
    f534:	f894 20cb 	ldrb.w	r2, [r4, #203]	; 0xcb
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
    f538:	f894 30d2 	ldrb.w	r3, [r4, #210]	; 0xd2
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    f53c:	b939      	cbnz	r1, f54e <smp_public_key+0x16a>
		oob_config = req_oob_present ? BT_CONN_OOB_REMOTE_ONLY :
    f53e:	07d2      	lsls	r2, r2, #31
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
    f540:	f003 0301 	and.w	r3, r3, #1
		oob_config = req_oob_present ? BT_CONN_OOB_REMOTE_ONLY :
    f544:	d416      	bmi.n	f574 <smp_public_key+0x190>
	int oob_config = BT_CONN_OOB_NO_DATA;
    f546:	2b00      	cmp	r3, #0
    f548:	bf08      	it	eq
    f54a:	2003      	moveq	r0, #3
    f54c:	e000      	b.n	f550 <smp_public_key+0x16c>
    f54e:	2003      	movs	r0, #3
				smp->oobd_local = NULL;
    f550:	2300      	movs	r3, #0
				smp->oobd_remote = NULL;
    f552:	e9c4 3368 	strd	r3, r3, [r4, #416]	; 0x1a0
	info->lesc.oob_config = oob_config;
    f556:	f88d 0005 	strb.w	r0, [sp, #5]
				atomic_set_bit(smp->flags,
    f55a:	210b      	movs	r1, #11
    f55c:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
    f560:	f012 fb77 	bl	21c52 <atomic_set_bit>
				bt_auth->oob_data_request(smp->chan.chan.conn,
    f564:	6833      	ldr	r3, [r6, #0]
    f566:	6820      	ldr	r0, [r4, #0]
    f568:	68db      	ldr	r3, [r3, #12]
    f56a:	a901      	add	r1, sp, #4
    f56c:	4798      	blx	r3
			break;
    f56e:	e78b      	b.n	f488 <smp_public_key+0xa4>
				return BT_SMP_ERR_OOB_NOT_AVAIL;
    f570:	2002      	movs	r0, #2
    f572:	e751      	b.n	f418 <smp_public_key+0x34>
				     BT_CONN_OOB_BOTH_PEERS :
    f574:	2b00      	cmp	r3, #0
    f576:	bf0c      	ite	eq
    f578:	2001      	moveq	r0, #1
    f57a:	2002      	movne	r0, #2
    f57c:	e7e8      	b.n	f550 <smp_public_key+0x16c>
    f57e:	bf00      	nop
    f580:	00026d29 	.word	0x00026d29
    f584:	000236e8 	.word	0x000236e8
    f588:	000237d0 	.word	0x000237d0
    f58c:	00026c39 	.word	0x00026c39
    f590:	0000efb1 	.word	0x0000efb1
    f594:	000f4240 	.word	0x000f4240
    f598:	200021f0 	.word	0x200021f0
    f59c:	000238f0 	.word	0x000238f0

0000f5a0 <smp_pairing_rsp>:
{
    f5a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_smp_pairing *rsp = (void *)buf->data;
    f5a4:	688f      	ldr	r7, [r1, #8]
	if ((rsp->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    f5a6:	78fb      	ldrb	r3, [r7, #3]
    f5a8:	3b07      	subs	r3, #7
    f5aa:	2b09      	cmp	r3, #9
{
    f5ac:	4604      	mov	r4, r0
	if ((rsp->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    f5ae:	d904      	bls.n	f5ba <smp_pairing_rsp+0x1a>
		return BT_SMP_ERR_ENC_KEY_SIZE;
    f5b0:	2706      	movs	r7, #6
}
    f5b2:	4638      	mov	r0, r7
    f5b4:	b002      	add	sp, #8
    f5b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	smp->local_dist &= rsp->init_key_dist;
    f5ba:	793a      	ldrb	r2, [r7, #4]
    f5bc:	f890 31a8 	ldrb.w	r3, [r0, #424]	; 0x1a8
	struct bt_conn *conn = smp->chan.chan.conn;
    f5c0:	6806      	ldr	r6, [r0, #0]
	smp->local_dist &= rsp->init_key_dist;
    f5c2:	4013      	ands	r3, r2
    f5c4:	f880 31a8 	strb.w	r3, [r0, #424]	; 0x1a8
	smp->remote_dist &= rsp->resp_key_dist;
    f5c8:	797a      	ldrb	r2, [r7, #5]
    f5ca:	f890 31a9 	ldrb.w	r3, [r0, #425]	; 0x1a9
    f5ce:	4013      	ands	r3, r2
    f5d0:	f880 31a9 	strb.w	r3, [r0, #425]	; 0x1a9
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
    f5d4:	2302      	movs	r3, #2
    f5d6:	f880 30d0 	strb.w	r3, [r0, #208]	; 0xd0
	memcpy(smp->prsp + 1, rsp, sizeof(*rsp));
    f5da:	2206      	movs	r2, #6
    f5dc:	4639      	mov	r1, r7
    f5de:	30d1      	adds	r0, #209	; 0xd1
    f5e0:	f010 fc45 	bl	1fe6e <memcpy>
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    f5e4:	78bb      	ldrb	r3, [r7, #2]
    f5e6:	0718      	lsls	r0, r3, #28
    f5e8:	f104 05c4 	add.w	r5, r4, #196	; 0xc4
    f5ec:	d507      	bpl.n	f5fe <smp_pairing_rsp+0x5e>
    f5ee:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
    f5f2:	0719      	lsls	r1, r3, #28
    f5f4:	d503      	bpl.n	f5fe <smp_pairing_rsp+0x5e>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
    f5f6:	2105      	movs	r1, #5
    f5f8:	4628      	mov	r0, r5
    f5fa:	f012 fb2a 	bl	21c52 <atomic_set_bit>
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
    f5fe:	78bb      	ldrb	r3, [r7, #2]
    f600:	069a      	lsls	r2, r3, #26
    f602:	d507      	bpl.n	f614 <smp_pairing_rsp+0x74>
    f604:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
    f608:	069b      	lsls	r3, r3, #26
    f60a:	d503      	bpl.n	f614 <smp_pairing_rsp+0x74>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
    f60c:	2113      	movs	r1, #19
    f60e:	4628      	mov	r0, r5
    f610:	f012 fb1f 	bl	21c52 <atomic_set_bit>
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
    f614:	78bb      	ldrb	r3, [r7, #2]
    f616:	07d8      	lsls	r0, r3, #31
    f618:	d507      	bpl.n	f62a <smp_pairing_rsp+0x8a>
    f61a:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
    f61e:	07d9      	lsls	r1, r3, #31
    f620:	d503      	bpl.n	f62a <smp_pairing_rsp+0x8a>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
    f622:	210c      	movs	r1, #12
    f624:	4628      	mov	r0, r5
    f626:	f012 fb14 	bl	21c52 <atomic_set_bit>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    f62a:	2105      	movs	r1, #5
    f62c:	4628      	mov	r0, r5
	smp->method = get_pair_method(smp, rsp->io_capability);
    f62e:	783f      	ldrb	r7, [r7, #0]
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    f630:	f012 fb1d 	bl	21c6e <atomic_test_bit>
    f634:	f8d4 8000 	ldr.w	r8, [r4]
    f638:	2800      	cmp	r0, #0
    f63a:	d152      	bne.n	f6e2 <smp_pairing_rsp+0x142>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
    f63c:	2f04      	cmp	r7, #4
    f63e:	d81d      	bhi.n	f67c <smp_pairing_rsp+0xdc>
	if ((req->oob_flag & rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
    f640:	f894 20d2 	ldrb.w	r2, [r4, #210]	; 0xd2
    f644:	f894 30cb 	ldrb.w	r3, [r4, #203]	; 0xcb
    f648:	4013      	ands	r3, r2
    f64a:	07da      	lsls	r2, r3, #31
    f64c:	d466      	bmi.n	f71c <smp_pairing_rsp+0x17c>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    f64e:	f894 00cc 	ldrb.w	r0, [r4, #204]	; 0xcc
    f652:	f894 30d3 	ldrb.w	r3, [r4, #211]	; 0xd3
    f656:	4318      	orrs	r0, r3
    f658:	f010 0004 	ands.w	r0, r0, #4
    f65c:	d00e      	beq.n	f67c <smp_pairing_rsp+0xdc>
	method = gen_method_legacy[remote_io][get_io_capa()];
    f65e:	f7ff f895 	bl	e78c <get_io_capa>
    f662:	4ba8      	ldr	r3, [pc, #672]	; (f904 <smp_pairing_rsp+0x364>)
    f664:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    f668:	441f      	add	r7, r3
    f66a:	5c38      	ldrb	r0, [r7, r0]
	if (method == PASSKEY_ROLE) {
    f66c:	2804      	cmp	r0, #4
    f66e:	d105      	bne.n	f67c <smp_pairing_rsp+0xdc>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    f670:	f898 3003 	ldrb.w	r3, [r8, #3]
			method = PASSKEY_INPUT;
    f674:	2b00      	cmp	r3, #0
    f676:	bf0c      	ite	eq
    f678:	2002      	moveq	r0, #2
    f67a:	2001      	movne	r0, #1
	smp->method = get_pair_method(smp, rsp->io_capability);
    f67c:	f884 00c8 	strb.w	r0, [r4, #200]	; 0xc8
	if (!conn->le.keys) {
    f680:	f8d8 30b4 	ldr.w	r3, [r8, #180]	; 0xb4
    f684:	b93b      	cbnz	r3, f696 <smp_pairing_rsp+0xf6>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    f686:	f898 0008 	ldrb.w	r0, [r8, #8]
    f68a:	f108 0188 	add.w	r1, r8, #136	; 0x88
    f68e:	f000 fbd1 	bl	fe34 <bt_keys_get_addr>
    f692:	f8c8 00b4 	str.w	r0, [r8, #180]	; 0xb4
	if (!conn->le.keys ||
    f696:	f8d8 20b4 	ldr.w	r2, [r8, #180]	; 0xb4
    f69a:	2a00      	cmp	r2, #0
    f69c:	d144      	bne.n	f728 <smp_pairing_rsp+0x188>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    f69e:	2105      	movs	r1, #5
    f6a0:	4628      	mov	r0, r5
    f6a2:	f012 fae4 	bl	21c6e <atomic_test_bit>
    f6a6:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    f6aa:	2800      	cmp	r0, #0
    f6ac:	f040 80e5 	bne.w	f87a <smp_pairing_rsp+0x2da>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    f6b0:	461f      	mov	r7, r3
    f6b2:	2b00      	cmp	r3, #0
    f6b4:	d156      	bne.n	f764 <smp_pairing_rsp+0x1c4>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    f6b6:	210e      	movs	r1, #14
    f6b8:	4628      	mov	r0, r5
    f6ba:	f012 fad8 	bl	21c6e <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    f6be:	2800      	cmp	r0, #0
    f6c0:	d050      	beq.n	f764 <smp_pairing_rsp+0x1c4>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    f6c2:	4e91      	ldr	r6, [pc, #580]	; (f908 <smp_pairing_rsp+0x368>)
    f6c4:	6833      	ldr	r3, [r6, #0]
    f6c6:	2b00      	cmp	r3, #0
    f6c8:	d04c      	beq.n	f764 <smp_pairing_rsp+0x1c4>
	    bt_auth && bt_auth->pairing_confirm) {
    f6ca:	695b      	ldr	r3, [r3, #20]
    f6cc:	2b00      	cmp	r3, #0
    f6ce:	d049      	beq.n	f764 <smp_pairing_rsp+0x1c4>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    f6d0:	4628      	mov	r0, r5
    f6d2:	2109      	movs	r1, #9
    f6d4:	f012 fabd 	bl	21c52 <atomic_set_bit>
		bt_auth->pairing_confirm(smp->chan.chan.conn);
    f6d8:	6833      	ldr	r3, [r6, #0]
    f6da:	6820      	ldr	r0, [r4, #0]
    f6dc:	695b      	ldr	r3, [r3, #20]
    f6de:	4798      	blx	r3
		return 0;
    f6e0:	e767      	b.n	f5b2 <smp_pairing_rsp+0x12>
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
    f6e2:	f894 00cc 	ldrb.w	r0, [r4, #204]	; 0xcc
    f6e6:	f894 20d3 	ldrb.w	r2, [r4, #211]	; 0xd3
    f6ea:	ea00 0302 	and.w	r3, r0, r2
    f6ee:	071b      	lsls	r3, r3, #28
    f6f0:	d506      	bpl.n	f700 <smp_pairing_rsp+0x160>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
    f6f2:	f894 10d2 	ldrb.w	r1, [r4, #210]	; 0xd2
    f6f6:	f894 30cb 	ldrb.w	r3, [r4, #203]	; 0xcb
    f6fa:	430b      	orrs	r3, r1
    f6fc:	07d9      	lsls	r1, r3, #31
    f6fe:	d40f      	bmi.n	f720 <smp_pairing_rsp+0x180>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
    f700:	2f04      	cmp	r7, #4
    f702:	d80f      	bhi.n	f724 <smp_pairing_rsp+0x184>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    f704:	4310      	orrs	r0, r2
    f706:	f010 0004 	ands.w	r0, r0, #4
    f70a:	d0b7      	beq.n	f67c <smp_pairing_rsp+0xdc>
	return gen_method_sc[remote_io][get_io_capa()];
    f70c:	f7ff f83e 	bl	e78c <get_io_capa>
    f710:	4b7e      	ldr	r3, [pc, #504]	; (f90c <smp_pairing_rsp+0x36c>)
    f712:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    f716:	441f      	add	r7, r3
    f718:	5c38      	ldrb	r0, [r7, r0]
    f71a:	e7af      	b.n	f67c <smp_pairing_rsp+0xdc>
		return LEGACY_OOB;
    f71c:	2006      	movs	r0, #6
    f71e:	e7ad      	b.n	f67c <smp_pairing_rsp+0xdc>
			return LE_SC_OOB;
    f720:	2005      	movs	r0, #5
    f722:	e7ab      	b.n	f67c <smp_pairing_rsp+0xdc>
		return JUST_WORKS;
    f724:	2000      	movs	r0, #0
    f726:	e7a9      	b.n	f67c <smp_pairing_rsp+0xdc>
	    !(conn->le.keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
    f728:	89d1      	ldrh	r1, [r2, #14]
	if (!conn->le.keys ||
    f72a:	f011 0f24 	tst.w	r1, #36	; 0x24
    f72e:	d0b6      	beq.n	f69e <smp_pairing_rsp+0xfe>
	return MIN(req->max_key_size, rsp->max_key_size);
    f730:	f894 30d4 	ldrb.w	r3, [r4, #212]	; 0xd4
    f734:	f894 00cd 	ldrb.w	r0, [r4, #205]	; 0xcd
	if (conn->le.keys->enc_size > get_encryption_key_size(smp)) {
    f738:	7b12      	ldrb	r2, [r2, #12]
    f73a:	4283      	cmp	r3, r0
    f73c:	bf28      	it	cs
    f73e:	4603      	movcs	r3, r0
    f740:	429a      	cmp	r2, r3
    f742:	d901      	bls.n	f748 <smp_pairing_rsp+0x1a8>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
    f744:	2703      	movs	r7, #3
    f746:	e734      	b.n	f5b2 <smp_pairing_rsp+0x12>
	if ((conn->le.keys->keys & BT_KEYS_LTK_P256) &&
    f748:	068a      	lsls	r2, r1, #26
    f74a:	d404      	bmi.n	f756 <smp_pairing_rsp+0x1b6>
	if (!IS_ENABLED(CONFIG_BT_SMP_ALLOW_UNAUTH_OVERWRITE) &&
    f74c:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    f750:	2b00      	cmp	r3, #0
    f752:	d1a4      	bne.n	f69e <smp_pairing_rsp+0xfe>
    f754:	e7f6      	b.n	f744 <smp_pairing_rsp+0x1a4>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    f756:	2105      	movs	r1, #5
    f758:	4628      	mov	r0, r5
    f75a:	f012 fa88 	bl	21c6e <atomic_test_bit>
	if ((conn->le.keys->keys & BT_KEYS_LTK_P256) &&
    f75e:	2800      	cmp	r0, #0
    f760:	d1f4      	bne.n	f74c <smp_pairing_rsp+0x1ac>
    f762:	e7ef      	b.n	f744 <smp_pairing_rsp+0x1a4>
	struct bt_conn *conn = smp->chan.chan.conn;
    f764:	6826      	ldr	r6, [r4, #0]
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
    f766:	f106 0188 	add.w	r1, r6, #136	; 0x88
    f76a:	7a30      	ldrb	r0, [r6, #8]
    f76c:	f000 fbe8 	bl	ff40 <bt_keys_find_addr>
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
    f770:	f894 10c8 	ldrb.w	r1, [r4, #200]	; 0xc8
    f774:	b178      	cbz	r0, f796 <smp_pairing_rsp+0x1f6>
    f776:	7b43      	ldrb	r3, [r0, #13]
    f778:	07db      	lsls	r3, r3, #31
    f77a:	d50c      	bpl.n	f796 <smp_pairing_rsp+0x1f6>
    f77c:	b959      	cbnz	r1, f796 <smp_pairing_rsp+0x1f6>
    f77e:	4964      	ldr	r1, [pc, #400]	; (f910 <smp_pairing_rsp+0x370>)
    f780:	4b64      	ldr	r3, [pc, #400]	; (f914 <smp_pairing_rsp+0x374>)
		BT_ERR("JustWorks failed, authenticated keys present");
    f782:	4865      	ldr	r0, [pc, #404]	; (f918 <smp_pairing_rsp+0x378>)
    f784:	1ac9      	subs	r1, r1, r3
    f786:	08c9      	lsrs	r1, r1, #3
    f788:	0189      	lsls	r1, r1, #6
    f78a:	f041 0101 	orr.w	r1, r1, #1
    f78e:	f00e fe9c 	bl	1e4ca <log_0>
				return BT_SMP_ERR_UNSPECIFIED;
    f792:	2708      	movs	r7, #8
    f794:	e70d      	b.n	f5b2 <smp_pairing_rsp+0x12>
	switch (smp->method) {
    f796:	2906      	cmp	r1, #6
    f798:	d85c      	bhi.n	f854 <smp_pairing_rsp+0x2b4>
    f79a:	e8df f001 	tbb	[pc, r1]
    f79e:	5117      	.short	0x5117
    f7a0:	5b5b5b27 	.word	0x5b5b5b27
    f7a4:	04          	.byte	0x04
    f7a5:	00          	.byte	0x00
		if (bt_auth && bt_auth->oob_data_request) {
    f7a6:	4e58      	ldr	r6, [pc, #352]	; (f908 <smp_pairing_rsp+0x368>)
    f7a8:	6833      	ldr	r3, [r6, #0]
    f7aa:	2b00      	cmp	r3, #0
    f7ac:	d05d      	beq.n	f86a <smp_pairing_rsp+0x2ca>
    f7ae:	68db      	ldr	r3, [r3, #12]
    f7b0:	2b00      	cmp	r3, #0
    f7b2:	d05a      	beq.n	f86a <smp_pairing_rsp+0x2ca>
			struct bt_conn_oob_info info = {
    f7b4:	2300      	movs	r3, #0
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    f7b6:	2109      	movs	r1, #9
    f7b8:	4628      	mov	r0, r5
			struct bt_conn_oob_info info = {
    f7ba:	f8ad 3004 	strh.w	r3, [sp, #4]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    f7be:	f012 fa48 	bl	21c52 <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
    f7c2:	6833      	ldr	r3, [r6, #0]
    f7c4:	6820      	ldr	r0, [r4, #0]
    f7c6:	68db      	ldr	r3, [r3, #12]
    f7c8:	a901      	add	r1, sp, #4
    f7ca:	4798      	blx	r3
	if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    f7cc:	2109      	movs	r1, #9
    f7ce:	4628      	mov	r0, r5
    f7d0:	f012 fa4d 	bl	21c6e <atomic_test_bit>
    f7d4:	2800      	cmp	r0, #0
    f7d6:	d14a      	bne.n	f86e <smp_pairing_rsp+0x2ce>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    f7d8:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    f7dc:	2103      	movs	r1, #3
    f7de:	f012 fa38 	bl	21c52 <atomic_set_bit>
		return legacy_send_pairing_confirm(smp);
    f7e2:	4620      	mov	r0, r4
    f7e4:	f012 fcfd 	bl	221e2 <legacy_send_pairing_confirm>
	return sc_send_public_key(smp);
    f7e8:	4607      	mov	r7, r0
    f7ea:	e6e2      	b.n	f5b2 <smp_pairing_rsp+0x12>
			if (bt_rand(&passkey, sizeof(passkey))) {
    f7ec:	2104      	movs	r1, #4
    f7ee:	eb0d 0001 	add.w	r0, sp, r1
    f7f2:	f003 fd67 	bl	132c4 <bt_rand>
    f7f6:	2800      	cmp	r0, #0
    f7f8:	d1cb      	bne.n	f792 <smp_pairing_rsp+0x1f2>
			passkey %= 1000000;
    f7fa:	9901      	ldr	r1, [sp, #4]
    f7fc:	4a47      	ldr	r2, [pc, #284]	; (f91c <smp_pairing_rsp+0x37c>)
		if (bt_auth && bt_auth->passkey_display) {
    f7fe:	4f42      	ldr	r7, [pc, #264]	; (f908 <smp_pairing_rsp+0x368>)
			passkey %= 1000000;
    f800:	fbb1 f3f2 	udiv	r3, r1, r2
    f804:	fb02 1313 	mls	r3, r2, r3, r1
    f808:	9301      	str	r3, [sp, #4]
		if (bt_auth && bt_auth->passkey_display) {
    f80a:	683b      	ldr	r3, [r7, #0]
    f80c:	b153      	cbz	r3, f824 <smp_pairing_rsp+0x284>
    f80e:	681b      	ldr	r3, [r3, #0]
    f810:	b143      	cbz	r3, f824 <smp_pairing_rsp+0x284>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
    f812:	210a      	movs	r1, #10
    f814:	4628      	mov	r0, r5
    f816:	f012 fa1c 	bl	21c52 <atomic_set_bit>
			bt_auth->passkey_display(conn, passkey);
    f81a:	683b      	ldr	r3, [r7, #0]
    f81c:	9901      	ldr	r1, [sp, #4]
    f81e:	681b      	ldr	r3, [r3, #0]
    f820:	4630      	mov	r0, r6
    f822:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
    f824:	9b01      	ldr	r3, [sp, #4]
	dst[0] = val;
    f826:	f884 3107 	strb.w	r3, [r4, #263]	; 0x107
	dst[1] = val >> 8;
    f82a:	f3c3 2207 	ubfx	r2, r3, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
    f82e:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    f830:	f884 3109 	strb.w	r3, [r4, #265]	; 0x109
	dst[1] = val >> 8;
    f834:	0a1b      	lsrs	r3, r3, #8
    f836:	f884 2108 	strb.w	r2, [r4, #264]	; 0x108
    f83a:	f884 310a 	strb.w	r3, [r4, #266]	; 0x10a
	if (ret) {
    f83e:	e7c5      	b.n	f7cc <smp_pairing_rsp+0x22c>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    f840:	4628      	mov	r0, r5
    f842:	2109      	movs	r1, #9
    f844:	f012 fa05 	bl	21c52 <atomic_set_bit>
		bt_auth->passkey_entry(conn);
    f848:	4b2f      	ldr	r3, [pc, #188]	; (f908 <smp_pairing_rsp+0x368>)
    f84a:	681b      	ldr	r3, [r3, #0]
    f84c:	4630      	mov	r0, r6
    f84e:	685b      	ldr	r3, [r3, #4]
    f850:	4798      	blx	r3
	if (ret) {
    f852:	e7bb      	b.n	f7cc <smp_pairing_rsp+0x22c>
    f854:	4b2f      	ldr	r3, [pc, #188]	; (f914 <smp_pairing_rsp+0x374>)
    f856:	4a2e      	ldr	r2, [pc, #184]	; (f910 <smp_pairing_rsp+0x370>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
    f858:	4831      	ldr	r0, [pc, #196]	; (f920 <smp_pairing_rsp+0x380>)
    f85a:	1ad2      	subs	r2, r2, r3
    f85c:	08d2      	lsrs	r2, r2, #3
    f85e:	0192      	lsls	r2, r2, #6
    f860:	f042 0201 	orr.w	r2, r2, #1
    f864:	f00e fe3e 	bl	1e4e4 <log_1>
	if (ret) {
    f868:	e793      	b.n	f792 <smp_pairing_rsp+0x1f2>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
    f86a:	2702      	movs	r7, #2
    f86c:	e6a1      	b.n	f5b2 <smp_pairing_rsp+0x12>
	atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    f86e:	2100      	movs	r1, #0
    f870:	4628      	mov	r0, r5
    f872:	f012 f9ee 	bl	21c52 <atomic_set_bit>
	return 0;
    f876:	2700      	movs	r7, #0
    f878:	e69b      	b.n	f5b2 <smp_pairing_rsp+0x12>
	if ((IS_ENABLED(CONFIG_BT_SMP_SC_ONLY) ||
    f87a:	7ab2      	ldrb	r2, [r6, #10]
    f87c:	2a04      	cmp	r2, #4
    f87e:	461f      	mov	r7, r3
    f880:	d10c      	bne.n	f89c <smp_pairing_rsp+0x2fc>
	     conn->required_sec_level == BT_SECURITY_L4) &&
    f882:	2b00      	cmp	r3, #0
    f884:	f43f af5e 	beq.w	f744 <smp_pairing_rsp+0x1a4>
	return MIN(req->max_key_size, rsp->max_key_size);
    f888:	f894 20cd 	ldrb.w	r2, [r4, #205]	; 0xcd
    f88c:	f894 10d4 	ldrb.w	r1, [r4, #212]	; 0xd4
	     conn->required_sec_level == BT_SECURITY_L4) &&
    f890:	428a      	cmp	r2, r1
    f892:	bf28      	it	cs
    f894:	460a      	movcs	r2, r1
    f896:	2a10      	cmp	r2, #16
    f898:	f47f ae8a 	bne.w	f5b0 <smp_pairing_rsp+0x10>
	smp->local_dist &= SEND_KEYS_SC;
    f89c:	2200      	movs	r2, #0
    f89e:	f884 21a8 	strb.w	r2, [r4, #424]	; 0x1a8
	smp->remote_dist &= RECV_KEYS_SC;
    f8a2:	f894 21a9 	ldrb.w	r2, [r4, #425]	; 0x1a9
    f8a6:	f002 0202 	and.w	r2, r2, #2
    f8aa:	f884 21a9 	strb.w	r2, [r4, #425]	; 0x1a9
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    f8ae:	b95b      	cbnz	r3, f8c8 <smp_pairing_rsp+0x328>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    f8b0:	210e      	movs	r1, #14
    f8b2:	4628      	mov	r0, r5
    f8b4:	f012 f9db 	bl	21c6e <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    f8b8:	b130      	cbz	r0, f8c8 <smp_pairing_rsp+0x328>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    f8ba:	4e13      	ldr	r6, [pc, #76]	; (f908 <smp_pairing_rsp+0x368>)
    f8bc:	6833      	ldr	r3, [r6, #0]
    f8be:	b11b      	cbz	r3, f8c8 <smp_pairing_rsp+0x328>
	    bt_auth && bt_auth->pairing_confirm) {
    f8c0:	695b      	ldr	r3, [r3, #20]
    f8c2:	2b00      	cmp	r3, #0
    f8c4:	f47f af04 	bne.w	f6d0 <smp_pairing_rsp+0x130>
	if (!sc_public_key) {
    f8c8:	4b16      	ldr	r3, [pc, #88]	; (f924 <smp_pairing_rsp+0x384>)
    f8ca:	681f      	ldr	r7, [r3, #0]
    f8cc:	b927      	cbnz	r7, f8d8 <smp_pairing_rsp+0x338>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
    f8ce:	2106      	movs	r1, #6
    f8d0:	4628      	mov	r0, r5
    f8d2:	f012 f9be 	bl	21c52 <atomic_set_bit>
		return 0;
    f8d6:	e66c      	b.n	f5b2 <smp_pairing_rsp+0x12>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
    f8d8:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    f8dc:	210c      	movs	r1, #12
    f8de:	f012 f9b8 	bl	21c52 <atomic_set_bit>
    f8e2:	f3bf 8f5b 	dmb	ish
    f8e6:	e850 3f00 	ldrex	r3, [r0]
    f8ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    f8ee:	e840 3200 	strex	r2, r3, [r0]
    f8f2:	2a00      	cmp	r2, #0
    f8f4:	d1f7      	bne.n	f8e6 <smp_pairing_rsp+0x346>
    f8f6:	f3bf 8f5b 	dmb	ish
	return sc_send_public_key(smp);
    f8fa:	4620      	mov	r0, r4
    f8fc:	f7ff f8ee 	bl	eadc <sc_send_public_key>
    f900:	e772      	b.n	f7e8 <smp_pairing_rsp+0x248>
    f902:	bf00      	nop
    f904:	00026ce7 	.word	0x00026ce7
    f908:	200021f0 	.word	0x200021f0
    f90c:	00026d00 	.word	0x00026d00
    f910:	000237d0 	.word	0x000237d0
    f914:	000236e8 	.word	0x000236e8
    f918:	00026c5a 	.word	0x00026c5a
    f91c:	000f4240 	.word	0x000f4240
    f920:	00026c87 	.word	0x00026c87
    f924:	200023c0 	.word	0x200023c0

0000f928 <smp_pairing_random>:
{
    f928:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f92c:	4604      	mov	r4, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    f92e:	f100 07f7 	add.w	r7, r0, #247	; 0xf7
    f932:	6889      	ldr	r1, [r1, #8]
{
    f934:	b09e      	sub	sp, #120	; 0x78
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    f936:	2210      	movs	r2, #16
    f938:	4638      	mov	r0, r7
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    f93a:	f104 06c4 	add.w	r6, r4, #196	; 0xc4
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    f93e:	f010 fa96 	bl	1fe6e <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    f942:	2105      	movs	r1, #5
    f944:	4630      	mov	r0, r6
    f946:	f012 f992 	bl	21c6e <atomic_test_bit>
    f94a:	f8d4 9000 	ldr.w	r9, [r4]
    f94e:	2800      	cmp	r0, #0
    f950:	d15d      	bne.n	fa0e <smp_pairing_random+0xe6>
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
    f952:	f109 0396 	add.w	r3, r9, #150	; 0x96
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    f956:	f204 1a07 	addw	sl, r4, #263	; 0x107
    f95a:	f10d 0828 	add.w	r8, sp, #40	; 0x28
    f95e:	9301      	str	r3, [sp, #4]
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
    f960:	f109 038f 	add.w	r3, r9, #143	; 0x8f
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    f964:	9300      	str	r3, [sp, #0]
    f966:	f8cd 8008 	str.w	r8, [sp, #8]
    f96a:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
    f96e:	f104 02c9 	add.w	r2, r4, #201	; 0xc9
    f972:	4639      	mov	r1, r7
    f974:	4650      	mov	r0, sl
    f976:	f012 fbd9 	bl	2212c <smp_c1>
	if (err) {
    f97a:	2800      	cmp	r0, #0
    f97c:	d140      	bne.n	fa00 <smp_pairing_random+0xd8>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
    f97e:	2210      	movs	r2, #16
    f980:	4641      	mov	r1, r8
    f982:	f104 00d7 	add.w	r0, r4, #215	; 0xd7
    f986:	f010 fa62 	bl	1fe4e <memcmp>
    f98a:	2800      	cmp	r0, #0
    f98c:	d179      	bne.n	fa82 <smp_pairing_random+0x15a>
	    conn->role == BT_HCI_ROLE_MASTER) {
    f98e:	f899 5003 	ldrb.w	r5, [r9, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    f992:	2d00      	cmp	r5, #0
    f994:	f040 80e1 	bne.w	fb5a <smp_pairing_random+0x232>
	memcpy(out, r2, 8);
    f998:	2208      	movs	r2, #8
    f99a:	f104 01e7 	add.w	r1, r4, #231	; 0xe7
    f99e:	4640      	mov	r0, r8
    f9a0:	f010 fa65 	bl	1fe6e <memcpy>
	memcpy(out + 8, r1, 8);
    f9a4:	2208      	movs	r2, #8
    f9a6:	4639      	mov	r1, r7
    f9a8:	a80c      	add	r0, sp, #48	; 0x30
    f9aa:	f010 fa60 	bl	1fe6e <memcpy>
	return bt_encrypt_le(k, out, out);
    f9ae:	4642      	mov	r2, r8
    f9b0:	4641      	mov	r1, r8
    f9b2:	4650      	mov	r0, sl
    f9b4:	f003 fc88 	bl	132c8 <bt_encrypt_le>
		if (err) {
    f9b8:	bb10      	cbnz	r0, fa00 <smp_pairing_random+0xd8>
		(void)memset(ediv, 0, sizeof(ediv));
    f9ba:	2202      	movs	r2, #2
    f9bc:	4629      	mov	r1, r5
    f9be:	a805      	add	r0, sp, #20
    f9c0:	f010 fa80 	bl	1fec4 <memset>
		(void)memset(rand, 0, sizeof(rand));
    f9c4:	2208      	movs	r2, #8
    f9c6:	4629      	mov	r1, r5
    f9c8:	a806      	add	r0, sp, #24
    f9ca:	f010 fa7b 	bl	1fec4 <memset>
	return MIN(req->max_key_size, rsp->max_key_size);
    f9ce:	f894 20d4 	ldrb.w	r2, [r4, #212]	; 0xd4
    f9d2:	f894 30cd 	ldrb.w	r3, [r4, #205]	; 0xcd
		if (bt_conn_le_start_encryption(conn, rand, ediv, tmp,
    f9d6:	429a      	cmp	r2, r3
    f9d8:	bf94      	ite	ls
    f9da:	9200      	strls	r2, [sp, #0]
    f9dc:	9300      	strhi	r3, [sp, #0]
    f9de:	a906      	add	r1, sp, #24
    f9e0:	4643      	mov	r3, r8
    f9e2:	aa05      	add	r2, sp, #20
    f9e4:	4648      	mov	r0, r9
    f9e6:	f010 fd76 	bl	204d6 <bt_conn_le_start_encryption>
    f9ea:	b158      	cbz	r0, fa04 <smp_pairing_random+0xdc>
    f9ec:	4962      	ldr	r1, [pc, #392]	; (fb78 <smp_pairing_random+0x250>)
    f9ee:	4b63      	ldr	r3, [pc, #396]	; (fb7c <smp_pairing_random+0x254>)
			BT_ERR("Failed to start encryption");
    f9f0:	4863      	ldr	r0, [pc, #396]	; (fb80 <smp_pairing_random+0x258>)
    f9f2:	1ac9      	subs	r1, r1, r3
    f9f4:	08c9      	lsrs	r1, r1, #3
    f9f6:	0189      	lsls	r1, r1, #6
    f9f8:	f041 0101 	orr.w	r1, r1, #1
    f9fc:	f00e fd65 	bl	1e4ca <log_0>
				return BT_SMP_ERR_UNSPECIFIED;
    fa00:	2508      	movs	r5, #8
    fa02:	e03f      	b.n	fa84 <smp_pairing_random+0x15c>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    fa04:	2101      	movs	r1, #1
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    fa06:	4630      	mov	r0, r6
    fa08:	f012 f923 	bl	21c52 <atomic_set_bit>
			return 0;
    fa0c:	e03a      	b.n	fa84 <smp_pairing_random+0x15c>
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    fa0e:	f899 5003 	ldrb.w	r5, [r9, #3]
    fa12:	2d00      	cmp	r5, #0
    fa14:	f040 80ae 	bne.w	fb74 <smp_pairing_random+0x24c>
	switch (smp->method) {
    fa18:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    fa1c:	2b05      	cmp	r3, #5
    fa1e:	d8ef      	bhi.n	fa00 <smp_pairing_random+0xd8>
    fa20:	a201      	add	r2, pc, #4	; (adr r2, fa28 <smp_pairing_random+0x100>)
    fa22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    fa26:	bf00      	nop
    fa28:	0000fa8d 	.word	0x0000fa8d
    fa2c:	0000fa41 	.word	0x0000fa41
    fa30:	0000fa41 	.word	0x0000fa41
    fa34:	0000fa8d 	.word	0x0000fa8d
    fa38:	0000fa01 	.word	0x0000fa01
    fa3c:	0000fb5f 	.word	0x0000fb5f
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    fa40:	f894 219c 	ldrb.w	r2, [r4, #412]	; 0x19c
    fa44:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
    fa48:	40d3      	lsrs	r3, r2
    fa4a:	f003 0301 	and.w	r3, r3, #1
		r |= 0x80;
    fa4e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    fa52:	b2db      	uxtb	r3, r3
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    fa54:	f8df 9134 	ldr.w	r9, [pc, #308]	; fb8c <smp_pairing_random+0x264>
    fa58:	f10d 0828 	add.w	r8, sp, #40	; 0x28
    fa5c:	f204 1a17 	addw	sl, r4, #279	; 0x117
    fa60:	f8cd 8000 	str.w	r8, [sp]
    fa64:	f8d9 1000 	ldr.w	r1, [r9]
    fa68:	463a      	mov	r2, r7
    fa6a:	4650      	mov	r0, sl
    fa6c:	f012 fa20 	bl	21eb0 <smp_f4>
    fa70:	2800      	cmp	r0, #0
    fa72:	d1c5      	bne.n	fa00 <smp_pairing_random+0xd8>
	if (memcmp(smp->pcnf, cfm, 16)) {
    fa74:	2210      	movs	r2, #16
    fa76:	4641      	mov	r1, r8
    fa78:	f104 00d7 	add.w	r0, r4, #215	; 0xd7
    fa7c:	f010 f9e7 	bl	1fe4e <memcmp>
    fa80:	b130      	cbz	r0, fa90 <smp_pairing_random+0x168>
		return BT_SMP_ERR_CONFIRM_FAILED;
    fa82:	2504      	movs	r5, #4
}
    fa84:	4628      	mov	r0, r5
    fa86:	b01e      	add	sp, #120	; 0x78
    fa88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	switch (smp->method) {
    fa8c:	2300      	movs	r3, #0
    fa8e:	e7e1      	b.n	fa54 <smp_pairing_random+0x12c>
		switch (smp->method) {
    fa90:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    fa94:	2b05      	cmp	r3, #5
    fa96:	d8b3      	bhi.n	fa00 <smp_pairing_random+0xd8>
    fa98:	a201      	add	r2, pc, #4	; (adr r2, faa0 <smp_pairing_random+0x178>)
    fa9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    fa9e:	bf00      	nop
    faa0:	0000fb5f 	.word	0x0000fb5f
    faa4:	0000fb2b 	.word	0x0000fb2b
    faa8:	0000fb2b 	.word	0x0000fb2b
    faac:	0000fab9 	.word	0x0000fab9
    fab0:	0000fa01 	.word	0x0000fa01
    fab4:	0000fb5f 	.word	0x0000fb5f
	sys_memcpy_swap(m, u, 32);
    fab8:	f8d9 1000 	ldr.w	r1, [r9]
    fabc:	2220      	movs	r2, #32
    fabe:	4640      	mov	r0, r8
    fac0:	f012 f8bb 	bl	21c3a <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
    fac4:	2220      	movs	r2, #32
    fac6:	4651      	mov	r1, sl
    fac8:	a812      	add	r0, sp, #72	; 0x48
    faca:	f012 f8b6 	bl	21c3a <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
    face:	2210      	movs	r2, #16
    fad0:	4639      	mov	r1, r7
    fad2:	a81a      	add	r0, sp, #104	; 0x68
    fad4:	f012 f8b1 	bl	21c3a <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
    fad8:	2210      	movs	r2, #16
    fada:	f104 01e7 	add.w	r1, r4, #231	; 0xe7
    fade:	a806      	add	r0, sp, #24
    fae0:	f012 f8ab 	bl	21c3a <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
    fae4:	ab06      	add	r3, sp, #24
    fae6:	2250      	movs	r2, #80	; 0x50
    fae8:	4641      	mov	r1, r8
    faea:	4618      	mov	r0, r3
    faec:	f012 f8c8 	bl	21c80 <bt_smp_aes_cmac>
	if (err) {
    faf0:	2800      	cmp	r0, #0
    faf2:	d185      	bne.n	fa00 <smp_pairing_random+0xd8>
	memcpy(passkey, xs + 12, 4);
    faf4:	a909      	add	r1, sp, #36	; 0x24
    faf6:	2204      	movs	r2, #4
    faf8:	a805      	add	r0, sp, #20
    fafa:	f010 f9b8 	bl	1fe6e <memcpy>
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    fafe:	9b05      	ldr	r3, [sp, #20]
    fb00:	4920      	ldr	r1, [pc, #128]	; (fb84 <smp_pairing_random+0x25c>)
    fb02:	ba1b      	rev	r3, r3
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    fb04:	4630      	mov	r0, r6
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    fb06:	fbb3 f2f1 	udiv	r2, r3, r1
    fb0a:	fb01 3312 	mls	r3, r1, r2, r3
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    fb0e:	2109      	movs	r1, #9
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    fb10:	9305      	str	r3, [sp, #20]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    fb12:	f012 f89e 	bl	21c52 <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    fb16:	2108      	movs	r1, #8
    fb18:	f012 f89b 	bl	21c52 <atomic_set_bit>
			bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
    fb1c:	4b1a      	ldr	r3, [pc, #104]	; (fb88 <smp_pairing_random+0x260>)
    fb1e:	9905      	ldr	r1, [sp, #20]
    fb20:	681b      	ldr	r3, [r3, #0]
    fb22:	6820      	ldr	r0, [r4, #0]
    fb24:	689b      	ldr	r3, [r3, #8]
    fb26:	4798      	blx	r3
			return 0;
    fb28:	e7ac      	b.n	fa84 <smp_pairing_random+0x15c>
			smp->passkey_round++;
    fb2a:	f894 319c 	ldrb.w	r3, [r4, #412]	; 0x19c
    fb2e:	3301      	adds	r3, #1
    fb30:	b2db      	uxtb	r3, r3
			if (smp->passkey_round == 20U) {
    fb32:	2b14      	cmp	r3, #20
			smp->passkey_round++;
    fb34:	f884 319c 	strb.w	r3, [r4, #412]	; 0x19c
			if (smp->passkey_round == 20U) {
    fb38:	d011      	beq.n	fb5e <smp_pairing_random+0x236>
			if (bt_rand(smp->prnd, 16)) {
    fb3a:	2110      	movs	r1, #16
    fb3c:	f104 00e7 	add.w	r0, r4, #231	; 0xe7
    fb40:	f003 fbc0 	bl	132c4 <bt_rand>
    fb44:	2800      	cmp	r0, #0
    fb46:	f47f af5b 	bne.w	fa00 <smp_pairing_random+0xd8>
			atomic_set_bit(&smp->allowed_cmds,
    fb4a:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    fb4e:	2103      	movs	r1, #3
    fb50:	f012 f87f 	bl	21c52 <atomic_set_bit>
			return smp_send_pairing_confirm(smp);
    fb54:	4620      	mov	r0, r4
    fb56:	f7ff fbfd 	bl	f354 <smp_send_pairing_confirm>
		return compute_and_send_master_dhcheck(smp);
    fb5a:	4605      	mov	r5, r0
    fb5c:	e792      	b.n	fa84 <smp_pairing_random+0x15c>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
    fb5e:	2107      	movs	r1, #7
    fb60:	4630      	mov	r0, r6
    fb62:	f012 f884 	bl	21c6e <atomic_test_bit>
    fb66:	b108      	cbz	r0, fb6c <smp_pairing_random+0x244>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    fb68:	2108      	movs	r1, #8
    fb6a:	e74c      	b.n	fa06 <smp_pairing_random+0xde>
		return compute_and_send_master_dhcheck(smp);
    fb6c:	4620      	mov	r0, r4
    fb6e:	f7fe fefd 	bl	e96c <compute_and_send_master_dhcheck>
    fb72:	e7f2      	b.n	fb5a <smp_pairing_random+0x232>
	return BT_SMP_ERR_PAIRING_NOTSUPP;
    fb74:	2505      	movs	r5, #5
    fb76:	e785      	b.n	fa84 <smp_pairing_random+0x15c>
    fb78:	000237d0 	.word	0x000237d0
    fb7c:	000236e8 	.word	0x000236e8
    fb80:	00026ca3 	.word	0x00026ca3
    fb84:	000f4240 	.word	0x000f4240
    fb88:	200021f0 	.word	0x200021f0
    fb8c:	200023c0 	.word	0x200023c0

0000fb90 <smp_ident_addr_info>:
{
    fb90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
    fb94:	688e      	ldr	r6, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
    fb96:	6804      	ldr	r4, [r0, #0]
	return BT_ADDR_IS_RPA(&addr->a);
}

static inline bool bt_addr_le_is_identity(const bt_addr_le_t *addr)
{
	if (addr->type == BT_ADDR_LE_PUBLIC) {
    fb98:	7833      	ldrb	r3, [r6, #0]
{
    fb9a:	4605      	mov	r5, r0
    fb9c:	b31b      	cbz	r3, fbe6 <smp_ident_addr_info+0x56>
	if (!bt_addr_le_is_identity(&req->addr)) {
    fb9e:	79b3      	ldrb	r3, [r6, #6]
    fba0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    fba4:	2bc0      	cmp	r3, #192	; 0xc0
    fba6:	d01e      	beq.n	fbe6 <smp_ident_addr_info+0x56>
    fba8:	4b4a      	ldr	r3, [pc, #296]	; (fcd4 <smp_ident_addr_info+0x144>)
    fbaa:	4d4b      	ldr	r5, [pc, #300]	; (fcd8 <smp_ident_addr_info+0x148>)
		BT_ERR("Invalid identity %s", bt_addr_le_str(&req->addr));
    fbac:	4630      	mov	r0, r6
    fbae:	1aed      	subs	r5, r5, r3
    fbb0:	f7f8 f8f2 	bl	7d98 <bt_addr_le_str_real>
    fbb4:	f7f6 fb8e 	bl	62d4 <log_strdup>
    fbb8:	08ed      	lsrs	r5, r5, #3
    fbba:	01ad      	lsls	r5, r5, #6
    fbbc:	f045 0501 	orr.w	r5, r5, #1
    fbc0:	4601      	mov	r1, r0
    fbc2:	462a      	mov	r2, r5
    fbc4:	4845      	ldr	r0, [pc, #276]	; (fcdc <smp_ident_addr_info+0x14c>)
    fbc6:	f00e fc8d 	bl	1e4e4 <log_1>
		BT_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
    fbca:	f104 0088 	add.w	r0, r4, #136	; 0x88
    fbce:	f7f8 f8e3 	bl	7d98 <bt_addr_le_str_real>
    fbd2:	f7f6 fb7f 	bl	62d4 <log_strdup>
    fbd6:	462a      	mov	r2, r5
    fbd8:	4601      	mov	r1, r0
    fbda:	4841      	ldr	r0, [pc, #260]	; (fce0 <smp_ident_addr_info+0x150>)
    fbdc:	f00e fc82 	bl	1e4e4 <log_1>
		return BT_SMP_ERR_INVALID_PARAMS;
    fbe0:	200a      	movs	r0, #10
}
    fbe2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    fbe6:	210c      	movs	r1, #12
    fbe8:	f105 00c4 	add.w	r0, r5, #196	; 0xc4
    fbec:	f012 f83f 	bl	21c6e <atomic_test_bit>
    fbf0:	2800      	cmp	r0, #0
    fbf2:	d048      	beq.n	fc86 <smp_ident_addr_info+0xf6>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
    fbf4:	f104 0788 	add.w	r7, r4, #136	; 0x88
    fbf8:	7a21      	ldrb	r1, [r4, #8]
    fbfa:	463a      	mov	r2, r7
    fbfc:	2002      	movs	r0, #2
    fbfe:	f012 fc3c 	bl	2247a <bt_keys_get_type>
		if (!keys) {
    fc02:	4680      	mov	r8, r0
    fc04:	b990      	cbnz	r0, fc2c <smp_ident_addr_info+0x9c>
    fc06:	4a33      	ldr	r2, [pc, #204]	; (fcd4 <smp_ident_addr_info+0x144>)
    fc08:	4c33      	ldr	r4, [pc, #204]	; (fcd8 <smp_ident_addr_info+0x148>)
			BT_ERR("Unable to get keys for %s",
    fc0a:	4638      	mov	r0, r7
    fc0c:	1aa4      	subs	r4, r4, r2
    fc0e:	f7f8 f8c3 	bl	7d98 <bt_addr_le_str_real>
    fc12:	f7f6 fb5f 	bl	62d4 <log_strdup>
    fc16:	08e4      	lsrs	r4, r4, #3
    fc18:	01a4      	lsls	r4, r4, #6
    fc1a:	f044 0401 	orr.w	r4, r4, #1
    fc1e:	4601      	mov	r1, r0
    fc20:	4622      	mov	r2, r4
    fc22:	4830      	ldr	r0, [pc, #192]	; (fce4 <smp_ident_addr_info+0x154>)
    fc24:	f00e fc5e 	bl	1e4e4 <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
    fc28:	2008      	movs	r0, #8
    fc2a:	e7da      	b.n	fbe2 <smp_ident_addr_info+0x52>
		if (conn->role == BT_HCI_ROLE_MASTER) {
    fc2c:	78e3      	ldrb	r3, [r4, #3]
    fc2e:	2b00      	cmp	r3, #0
    fc30:	d13d      	bne.n	fcae <smp_ident_addr_info+0x11e>
			dst = &conn->le.resp_addr;
    fc32:	f104 0196 	add.w	r1, r4, #150	; 0x96
	if (addr->type != BT_ADDR_LE_RANDOM) {
    fc36:	780b      	ldrb	r3, [r1, #0]
    fc38:	2b01      	cmp	r3, #1
    fc3a:	d121      	bne.n	fc80 <smp_ident_addr_info+0xf0>
		if (bt_addr_le_is_rpa(dst)) {
    fc3c:	798b      	ldrb	r3, [r1, #6]
    fc3e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    fc42:	2b40      	cmp	r3, #64	; 0x40
    fc44:	d11c      	bne.n	fc80 <smp_ident_addr_info+0xf0>
	memcpy(dst, src, sizeof(*dst));
    fc46:	2206      	movs	r2, #6
    fc48:	3101      	adds	r1, #1
    fc4a:	f108 003a 	add.w	r0, r8, #58	; 0x3a
    fc4e:	f010 f90e 	bl	1fe6e <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
    fc52:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
    fc56:	b19b      	cbz	r3, fc80 <smp_ident_addr_info+0xf0>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
    fc58:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
    fc5c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    fc60:	2bc0      	cmp	r3, #192	; 0xc0
    fc62:	d00d      	beq.n	fc80 <smp_ident_addr_info+0xf0>
	memcpy(dst, src, sizeof(*dst));
    fc64:	2207      	movs	r2, #7
    fc66:	4631      	mov	r1, r6
    fc68:	f108 0001 	add.w	r0, r8, #1
    fc6c:	f010 f8ff 	bl	1fe6e <memcpy>
    fc70:	2207      	movs	r2, #7
    fc72:	4631      	mov	r1, r6
    fc74:	4638      	mov	r0, r7
    fc76:	f010 f8fa 	bl	1fe6e <memcpy>
				bt_conn_identity_resolved(conn);
    fc7a:	4620      	mov	r0, r4
    fc7c:	f7fa fd4e 	bl	a71c <bt_conn_identity_resolved>
		bt_id_add(keys);
    fc80:	4640      	mov	r0, r8
    fc82:	f7f9 fb05 	bl	9290 <bt_id_add>
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
    fc86:	f895 31a9 	ldrb.w	r3, [r5, #425]	; 0x1a9
    fc8a:	f023 0202 	bic.w	r2, r3, #2
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    fc8e:	075b      	lsls	r3, r3, #29
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
    fc90:	f885 21a9 	strb.w	r2, [r5, #425]	; 0x1a9
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    fc94:	d504      	bpl.n	fca0 <smp_ident_addr_info+0x110>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    fc96:	210a      	movs	r1, #10
    fc98:	f105 00c0 	add.w	r0, r5, #192	; 0xc0
    fc9c:	f011 ffd9 	bl	21c52 <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    fca0:	78e3      	ldrb	r3, [r4, #3]
    fca2:	b13b      	cbz	r3, fcb4 <smp_ident_addr_info+0x124>
	if (!smp->local_dist && !smp->remote_dist) {
    fca4:	f8b5 41a8 	ldrh.w	r4, [r5, #424]	; 0x1a8
    fca8:	b174      	cbz	r4, fcc8 <smp_ident_addr_info+0x138>
	return 0;
    fcaa:	2000      	movs	r0, #0
    fcac:	e799      	b.n	fbe2 <smp_ident_addr_info+0x52>
			dst = &conn->le.init_addr;
    fcae:	f104 018f 	add.w	r1, r4, #143	; 0x8f
    fcb2:	e7c0      	b.n	fc36 <smp_ident_addr_info+0xa6>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    fcb4:	f895 31a9 	ldrb.w	r3, [r5, #425]	; 0x1a9
    fcb8:	2b00      	cmp	r3, #0
    fcba:	d1f3      	bne.n	fca4 <smp_ident_addr_info+0x114>
		err = bt_smp_distribute_keys(smp);
    fcbc:	4628      	mov	r0, r5
    fcbe:	f7ff f887 	bl	edd0 <bt_smp_distribute_keys>
		if (err) {
    fcc2:	2800      	cmp	r0, #0
    fcc4:	d0ee      	beq.n	fca4 <smp_ident_addr_info+0x114>
    fcc6:	e78c      	b.n	fbe2 <smp_ident_addr_info+0x52>
		smp_pairing_complete(smp, 0);
    fcc8:	4628      	mov	r0, r5
    fcca:	4621      	mov	r1, r4
    fccc:	f7ff f926 	bl	ef1c <smp_pairing_complete>
	return 0;
    fcd0:	4620      	mov	r0, r4
    fcd2:	e786      	b.n	fbe2 <smp_ident_addr_info+0x52>
    fcd4:	000236e8 	.word	0x000236e8
    fcd8:	000237d0 	.word	0x000237d0
    fcdc:	00026cbe 	.word	0x00026cbe
    fce0:	00026b31 	.word	0x00026b31
    fce4:	00026a74 	.word	0x00026a74

0000fce8 <bt_smp_update_keys>:
{
    fce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fcea:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
    fcec:	f7fe fde4 	bl	e8b8 <smp_chan_get>
	if (!smp) {
    fcf0:	4605      	mov	r5, r0
    fcf2:	2800      	cmp	r0, #0
    fcf4:	f000 8081 	beq.w	fdfa <bt_smp_update_keys+0x112>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    fcf8:	f100 06c4 	add.w	r6, r0, #196	; 0xc4
    fcfc:	2103      	movs	r1, #3
    fcfe:	4630      	mov	r0, r6
    fd00:	f011 ffb5 	bl	21c6e <atomic_test_bit>
    fd04:	2800      	cmp	r0, #0
    fd06:	d078      	beq.n	fdfa <bt_smp_update_keys+0x112>
	if (conn->le.keys) {
    fd08:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    fd0c:	b108      	cbz	r0, fd12 <bt_smp_update_keys+0x2a>
		bt_keys_clear(conn->le.keys);
    fd0e:	f012 fbc8 	bl	224a2 <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    fd12:	f104 0788 	add.w	r7, r4, #136	; 0x88
    fd16:	7a20      	ldrb	r0, [r4, #8]
    fd18:	4639      	mov	r1, r7
    fd1a:	f000 f88b 	bl	fe34 <bt_keys_get_addr>
    fd1e:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys) {
    fd22:	b9b0      	cbnz	r0, fd52 <bt_smp_update_keys+0x6a>
    fd24:	4a35      	ldr	r2, [pc, #212]	; (fdfc <bt_smp_update_keys+0x114>)
    fd26:	4c36      	ldr	r4, [pc, #216]	; (fe00 <bt_smp_update_keys+0x118>)
		BT_ERR("Unable to get keys for %s",
    fd28:	4638      	mov	r0, r7
    fd2a:	1aa4      	subs	r4, r4, r2
    fd2c:	f7f8 f834 	bl	7d98 <bt_addr_le_str_real>
    fd30:	f7f6 fad0 	bl	62d4 <log_strdup>
    fd34:	08e4      	lsrs	r4, r4, #3
    fd36:	01a4      	lsls	r4, r4, #6
    fd38:	f044 0401 	orr.w	r4, r4, #1
    fd3c:	4601      	mov	r1, r0
    fd3e:	4622      	mov	r2, r4
    fd40:	4830      	ldr	r0, [pc, #192]	; (fe04 <bt_smp_update_keys+0x11c>)
    fd42:	f00e fbcf 	bl	1e4e4 <log_1>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    fd46:	4628      	mov	r0, r5
    fd48:	2108      	movs	r1, #8
}
    fd4a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    fd4e:	f012 b95a 	b.w	22006 <smp_error>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
    fd52:	210d      	movs	r1, #13
    fd54:	4630      	mov	r0, r6
    fd56:	f011 ff8a 	bl	21c6e <atomic_test_bit>
    fd5a:	b128      	cbz	r0, fd68 <bt_smp_update_keys+0x80>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
    fd5c:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
    fd60:	7b53      	ldrb	r3, [r2, #13]
    fd62:	f043 0302 	orr.w	r3, r3, #2
    fd66:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
    fd68:	f895 20c8 	ldrb.w	r2, [r5, #200]	; 0xc8
    fd6c:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
    fd70:	2a03      	cmp	r2, #3
    fd72:	7b4b      	ldrb	r3, [r1, #13]
    fd74:	d838      	bhi.n	fde8 <bt_smp_update_keys+0x100>
    fd76:	b3d2      	cbz	r2, fdee <bt_smp_update_keys+0x106>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
    fd78:	f043 0301 	orr.w	r3, r3, #1
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
    fd7c:	734b      	strb	r3, [r1, #13]
	return MIN(req->max_key_size, rsp->max_key_size);
    fd7e:	f895 30d4 	ldrb.w	r3, [r5, #212]	; 0xd4
    fd82:	f895 20cd 	ldrb.w	r2, [r5, #205]	; 0xcd
    fd86:	4293      	cmp	r3, r2
    fd88:	bf28      	it	cs
    fd8a:	4613      	movcs	r3, r2
	conn->le.keys->enc_size = get_encryption_key_size(smp);
    fd8c:	730b      	strb	r3, [r1, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    fd8e:	4630      	mov	r0, r6
    fd90:	2105      	movs	r1, #5
    fd92:	f011 ff6c 	bl	21c6e <atomic_test_bit>
    fd96:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
		conn->le.keys->flags |= BT_KEYS_SC;
    fd9a:	7b5a      	ldrb	r2, [r3, #13]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    fd9c:	b350      	cbz	r0, fdf4 <bt_smp_update_keys+0x10c>
		conn->le.keys->flags |= BT_KEYS_SC;
    fd9e:	f042 0210 	orr.w	r2, r2, #16
    fda2:	735a      	strb	r2, [r3, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    fda4:	210c      	movs	r1, #12
    fda6:	4630      	mov	r0, r6
    fda8:	f011 ff61 	bl	21c6e <atomic_test_bit>
    fdac:	b328      	cbz	r0, fdfa <bt_smp_update_keys+0x112>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
    fdae:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    fdb2:	2120      	movs	r1, #32
    fdb4:	f012 fb71 	bl	2249a <bt_keys_add_type>
			memcpy(conn->le.keys->ltk.val, smp->tk,
    fdb8:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    fdbc:	f205 1107 	addw	r1, r5, #263	; 0x107
    fdc0:	2210      	movs	r2, #16
    fdc2:	301a      	adds	r0, #26
    fdc4:	f010 f853 	bl	1fe6e <memcpy>
			(void)memset(conn->le.keys->ltk.rand, 0,
    fdc8:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    fdcc:	2208      	movs	r2, #8
    fdce:	2100      	movs	r1, #0
    fdd0:	3010      	adds	r0, #16
    fdd2:	f010 f877 	bl	1fec4 <memset>
			(void)memset(conn->le.keys->ltk.ediv, 0,
    fdd6:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    fdda:	2202      	movs	r2, #2
}
    fddc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			(void)memset(conn->le.keys->ltk.ediv, 0,
    fde0:	2100      	movs	r1, #0
    fde2:	3018      	adds	r0, #24
    fde4:	f010 b86e 	b.w	1fec4 <memset>
	switch (smp->method) {
    fde8:	3a05      	subs	r2, #5
    fdea:	2a01      	cmp	r2, #1
    fdec:	d9c4      	bls.n	fd78 <bt_smp_update_keys+0x90>
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
    fdee:	f023 0301 	bic.w	r3, r3, #1
    fdf2:	e7c3      	b.n	fd7c <bt_smp_update_keys+0x94>
		conn->le.keys->flags &= ~BT_KEYS_SC;
    fdf4:	f022 0210 	bic.w	r2, r2, #16
    fdf8:	735a      	strb	r2, [r3, #13]
}
    fdfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fdfc:	000236e8 	.word	0x000236e8
    fe00:	000237d0 	.word	0x000237d0
    fe04:	00026a74 	.word	0x00026a74

0000fe08 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
    fe08:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
    fe0a:	4b07      	ldr	r3, [pc, #28]	; (fe28 <bt_smp_init+0x20>)
	}

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
    fe0c:	4807      	ldr	r0, [pc, #28]	; (fe2c <bt_smp_init+0x24>)
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
    fe0e:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
    fe12:	f003 0306 	and.w	r3, r3, #6
    fe16:	1f9a      	subs	r2, r3, #6
    fe18:	4253      	negs	r3, r2
    fe1a:	4153      	adcs	r3, r2
    fe1c:	4a04      	ldr	r2, [pc, #16]	; (fe30 <bt_smp_init+0x28>)
    fe1e:	7013      	strb	r3, [r2, #0]
		bt_pub_key_gen(&pub_key_cb);
    fe20:	f7fa fa7c 	bl	a31c <bt_pub_key_gen>
	}

	return smp_self_test();
}
    fe24:	2000      	movs	r0, #0
    fe26:	bd08      	pop	{r3, pc}
    fe28:	20000000 	.word	0x20000000
    fe2c:	20000270 	.word	0x20000270
    fe30:	2000a85e 	.word	0x2000a85e

0000fe34 <bt_keys_get_addr>:
static uint32_t aging_counter_val;
static struct bt_keys *last_keys_updated;
#endif /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */

struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
{
    fe34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		keys = &key_pool[i];

		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
    fe36:	4c11      	ldr	r4, [pc, #68]	; (fe7c <bt_keys_get_addr+0x48>)
    fe38:	7823      	ldrb	r3, [r4, #0]
    fe3a:	4283      	cmp	r3, r0
{
    fe3c:	4605      	mov	r5, r0
    fe3e:	460e      	mov	r6, r1
    fe40:	4627      	mov	r7, r4
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
    fe42:	d00b      	beq.n	fe5c <bt_keys_get_addr+0x28>
			return keys;
		}

		if (first_free_slot == ARRAY_SIZE(key_pool) &&
		    !bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
    fe44:	2400      	movs	r4, #0
	return memcmp(a, b, sizeof(*a));
    fe46:	480e      	ldr	r0, [pc, #56]	; (fe80 <bt_keys_get_addr+0x4c>)
    fe48:	9400      	str	r4, [sp, #0]
    fe4a:	2207      	movs	r2, #7
    fe4c:	4669      	mov	r1, sp
    fe4e:	f8cd 4003 	str.w	r4, [sp, #3]
    fe52:	f00f fffc 	bl	1fe4e <memcmp>
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
    fe56:	b140      	cbz	r0, fe6a <bt_keys_get_addr+0x36>
		return keys;
	}

	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
    fe58:	4620      	mov	r0, r4
    fe5a:	e00d      	b.n	fe78 <bt_keys_get_addr+0x44>
    fe5c:	2207      	movs	r2, #7
    fe5e:	1c60      	adds	r0, r4, #1
    fe60:	f00f fff5 	bl	1fe4e <memcmp>
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
    fe64:	2800      	cmp	r0, #0
    fe66:	d1ed      	bne.n	fe44 <bt_keys_get_addr+0x10>
    fe68:	e7f6      	b.n	fe58 <bt_keys_get_addr+0x24>
	memcpy(dst, src, sizeof(*dst));
    fe6a:	4805      	ldr	r0, [pc, #20]	; (fe80 <bt_keys_get_addr+0x4c>)
		keys->id = id;
    fe6c:	703d      	strb	r5, [r7, #0]
    fe6e:	2207      	movs	r2, #7
    fe70:	4631      	mov	r1, r6
    fe72:	f00f fffc 	bl	1fe6e <memcpy>
		return keys;
    fe76:	4801      	ldr	r0, [pc, #4]	; (fe7c <bt_keys_get_addr+0x48>)
}
    fe78:	b003      	add	sp, #12
    fe7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fe7c:	200023c4 	.word	0x200023c4
    fe80:	200023c5 	.word	0x200023c5

0000fe84 <bt_keys_foreach>:
	}
}

void bt_keys_foreach(int type, void (*func)(struct bt_keys *keys, void *data),
		     void *data)
{
    fe84:	460b      	mov	r3, r1
    fe86:	4611      	mov	r1, r2
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type)) {
    fe88:	4a04      	ldr	r2, [pc, #16]	; (fe9c <bt_keys_foreach+0x18>)
{
    fe8a:	b410      	push	{r4}
		if ((key_pool[i].keys & type)) {
    fe8c:	89d4      	ldrh	r4, [r2, #14]
    fe8e:	4204      	tst	r4, r0
    fe90:	d002      	beq.n	fe98 <bt_keys_foreach+0x14>
			func(&key_pool[i], data);
		}
	}
}
    fe92:	bc10      	pop	{r4}
			func(&key_pool[i], data);
    fe94:	4610      	mov	r0, r2
    fe96:	4718      	bx	r3
}
    fe98:	bc10      	pop	{r4}
    fe9a:	4770      	bx	lr
    fe9c:	200023c4 	.word	0x200023c4

0000fea0 <bt_keys_find>:

struct bt_keys *bt_keys_find(int type, uint8_t id, const bt_addr_le_t *addr)
{
    fea0:	b510      	push	{r4, lr}
	int i;

	BT_DBG("type %d %s", type, bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
    fea2:	4c09      	ldr	r4, [pc, #36]	; (fec8 <bt_keys_find+0x28>)
{
    fea4:	460b      	mov	r3, r1
    fea6:	4611      	mov	r1, r2
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
    fea8:	89e2      	ldrh	r2, [r4, #14]
    feaa:	4202      	tst	r2, r0
    feac:	d007      	beq.n	febe <bt_keys_find+0x1e>
    feae:	7822      	ldrb	r2, [r4, #0]
    feb0:	429a      	cmp	r2, r3
    feb2:	d104      	bne.n	febe <bt_keys_find+0x1e>
	return memcmp(a, b, sizeof(*a));
    feb4:	2207      	movs	r2, #7
    feb6:	1c60      	adds	r0, r4, #1
    feb8:	f00f ffc9 	bl	1fe4e <memcmp>
    febc:	b108      	cbz	r0, fec2 <bt_keys_find+0x22>
		    !bt_addr_le_cmp(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
    febe:	2000      	movs	r0, #0
}
    fec0:	bd10      	pop	{r4, pc}
			return &key_pool[i];
    fec2:	4620      	mov	r0, r4
    fec4:	e7fc      	b.n	fec0 <bt_keys_find+0x20>
    fec6:	bf00      	nop
    fec8:	200023c4 	.word	0x200023c4

0000fecc <bt_keys_find_irk>:

	return keys;
}

struct bt_keys *bt_keys_find_irk(uint8_t id, const bt_addr_le_t *addr)
{
    fecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
    fece:	780b      	ldrb	r3, [r1, #0]
    fed0:	2b01      	cmp	r3, #1
    fed2:	4607      	mov	r7, r0
    fed4:	460c      	mov	r4, r1
    fed6:	d001      	beq.n	fedc <bt_keys_find_irk+0x10>
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	if (!bt_addr_le_is_rpa(addr)) {
		return NULL;
    fed8:	2000      	movs	r0, #0
	}

	BT_DBG("No IRK for %s", bt_addr_le_str(addr));

	return NULL;
}
    feda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!bt_addr_le_is_rpa(addr)) {
    fedc:	798b      	ldrb	r3, [r1, #6]
    fede:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    fee2:	2b40      	cmp	r3, #64	; 0x40
    fee4:	d1f8      	bne.n	fed8 <bt_keys_find_irk+0xc>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
    fee6:	4d13      	ldr	r5, [pc, #76]	; (ff34 <bt_keys_find_irk+0x68>)
    fee8:	89eb      	ldrh	r3, [r5, #14]
    feea:	f013 0f02 	tst.w	r3, #2
    feee:	462e      	mov	r6, r5
    fef0:	d0f2      	beq.n	fed8 <bt_keys_find_irk+0xc>
		if (key_pool[i].id == id &&
    fef2:	7833      	ldrb	r3, [r6, #0]
    fef4:	42bb      	cmp	r3, r7
    fef6:	d10b      	bne.n	ff10 <bt_keys_find_irk+0x44>
	return memcmp(a, b, sizeof(*a));
    fef8:	2206      	movs	r2, #6
    fefa:	f106 013a 	add.w	r1, r6, #58	; 0x3a
    fefe:	1c60      	adds	r0, r4, #1
    ff00:	f00f ffa5 	bl	1fe4e <memcmp>
    ff04:	b908      	cbnz	r0, ff0a <bt_keys_find_irk+0x3e>
			return &key_pool[i];
    ff06:	4628      	mov	r0, r5
    ff08:	e7e7      	b.n	feda <bt_keys_find_irk+0xe>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
    ff0a:	89f3      	ldrh	r3, [r6, #14]
    ff0c:	079b      	lsls	r3, r3, #30
    ff0e:	d5e3      	bpl.n	fed8 <bt_keys_find_irk+0xc>
		if (key_pool[i].id != id) {
    ff10:	7833      	ldrb	r3, [r6, #0]
    ff12:	42bb      	cmp	r3, r7
    ff14:	d1e0      	bne.n	fed8 <bt_keys_find_irk+0xc>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
    ff16:	3401      	adds	r4, #1
    ff18:	4807      	ldr	r0, [pc, #28]	; (ff38 <bt_keys_find_irk+0x6c>)
    ff1a:	4621      	mov	r1, r4
    ff1c:	f010 f817 	bl	1ff4e <bt_rpa_irk_matches>
    ff20:	2800      	cmp	r0, #0
    ff22:	d0d9      	beq.n	fed8 <bt_keys_find_irk+0xc>
	memcpy(dst, src, sizeof(*dst));
    ff24:	4805      	ldr	r0, [pc, #20]	; (ff3c <bt_keys_find_irk+0x70>)
    ff26:	2206      	movs	r2, #6
    ff28:	4621      	mov	r1, r4
    ff2a:	f00f ffa0 	bl	1fe6e <memcpy>
			return &key_pool[i];
    ff2e:	4801      	ldr	r0, [pc, #4]	; (ff34 <bt_keys_find_irk+0x68>)
}
    ff30:	e7d3      	b.n	feda <bt_keys_find_irk+0xe>
    ff32:	bf00      	nop
    ff34:	200023c4 	.word	0x200023c4
    ff38:	200023ee 	.word	0x200023ee
    ff3c:	200023fe 	.word	0x200023fe

0000ff40 <bt_keys_find_addr>:

struct bt_keys *bt_keys_find_addr(uint8_t id, const bt_addr_le_t *addr)
{
    ff40:	b510      	push	{r4, lr}
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if (key_pool[i].id == id &&
    ff42:	4c06      	ldr	r4, [pc, #24]	; (ff5c <bt_keys_find_addr+0x1c>)
    ff44:	7823      	ldrb	r3, [r4, #0]
    ff46:	4283      	cmp	r3, r0
    ff48:	d104      	bne.n	ff54 <bt_keys_find_addr+0x14>
	return memcmp(a, b, sizeof(*a));
    ff4a:	2207      	movs	r2, #7
    ff4c:	1c60      	adds	r0, r4, #1
    ff4e:	f00f ff7e 	bl	1fe4e <memcmp>
    ff52:	b108      	cbz	r0, ff58 <bt_keys_find_addr+0x18>
		    !bt_addr_le_cmp(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
    ff54:	2000      	movs	r0, #0
}
    ff56:	bd10      	pop	{r4, pc}
			return &key_pool[i];
    ff58:	4620      	mov	r0, r4
    ff5a:	e7fc      	b.n	ff56 <bt_keys_find_addr+0x16>
    ff5c:	200023c4 	.word	0x200023c4

0000ff60 <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, uint16_t mem_size, uint16_t mem_count,
	      void **mem_head)
{
    ff60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ff64:	4614      	mov	r4, r2
	*mem_head = mem_pool;

	/* Store free mem_count after the list's next pointer at an 32-bit
	 * aligned memory location to ensure atomic read/write (in ARM for now).
	 */
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    ff66:	1dc2      	adds	r2, r0, #7
    ff68:	f022 0203 	bic.w	r2, r2, #3

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    ff6c:	1e67      	subs	r7, r4, #1
    ff6e:	b2bf      	uxth	r7, r7
	*mem_head = mem_pool;
    ff70:	6018      	str	r0, [r3, #0]
{
    ff72:	b082      	sub	sp, #8
    ff74:	4605      	mov	r5, r0
    ff76:	460e      	mov	r6, r1
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    ff78:	fb01 0007 	mla	r0, r1, r7, r0
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    ff7c:	8014      	strh	r4, [r2, #0]
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    ff7e:	2100      	movs	r1, #0
    ff80:	2204      	movs	r2, #4
    ff82:	f00f ff9f 	bl	1fec4 <memset>
		     sizeof(mem_pool));
	while (mem_count--) {
    ff86:	b1b7      	cbz	r7, ffb6 <mem_init+0x56>
    ff88:	3c02      	subs	r4, #2
    ff8a:	b2a4      	uxth	r4, r4
    ff8c:	fb04 6306 	mla	r3, r4, r6, r6
    ff90:	fb04 f706 	mul.w	r7, r4, r6
    ff94:	441d      	add	r5, r3
    ff96:	1aff      	subs	r7, r7, r3
    ff98:	f64f 78ff 	movw	r8, #65535	; 0xffff
		uint32_t next;

		next = (uint32_t)((uint8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
    ff9c:	2204      	movs	r2, #4
	while (mem_count--) {
    ff9e:	3c01      	subs	r4, #1
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
    ffa0:	19e8      	adds	r0, r5, r7
    ffa2:	eb0d 0102 	add.w	r1, sp, r2
	while (mem_count--) {
    ffa6:	b2a4      	uxth	r4, r4
		next = (uint32_t)((uint8_t *) mem_pool +
    ffa8:	9501      	str	r5, [sp, #4]
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
    ffaa:	f00f ff60 	bl	1fe6e <memcpy>
	while (mem_count--) {
    ffae:	4544      	cmp	r4, r8
    ffb0:	eba5 0506 	sub.w	r5, r5, r6
    ffb4:	d1f2      	bne.n	ff9c <mem_init+0x3c>
		       (void *)&next, sizeof(next));
	}
}
    ffb6:	b002      	add	sp, #8
    ffb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000ffbc <mem_acquire>:

void *mem_acquire(void **mem_head)
{
    ffbc:	b570      	push	{r4, r5, r6, lr}
	if (*mem_head) {
    ffbe:	6805      	ldr	r5, [r0, #0]
{
    ffc0:	b082      	sub	sp, #8
	if (*mem_head) {
    ffc2:	b195      	cbz	r5, ffea <mem_acquire+0x2e>
		uint16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
    ffc4:	1deb      	adds	r3, r5, #7
    ffc6:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
    ffca:	2204      	movs	r2, #4
    ffcc:	4604      	mov	r4, r0
    ffce:	4629      	mov	r1, r5
    ffd0:	eb0d 0002 	add.w	r0, sp, r2
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
    ffd4:	881e      	ldrh	r6, [r3, #0]
		memcpy(&head, mem, sizeof(head));
    ffd6:	f00f ff4a 	bl	1fe6e <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
    ffda:	9b01      	ldr	r3, [sp, #4]
    ffdc:	b123      	cbz	r3, ffe8 <mem_acquire+0x2c>
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
    ffde:	1dda      	adds	r2, r3, #7
    ffe0:	f022 0203 	bic.w	r2, r2, #3
		free_count--;
    ffe4:	3e01      	subs	r6, #1
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
    ffe6:	8016      	strh	r6, [r2, #0]
				free_count;
		}

		*mem_head = head;
    ffe8:	6023      	str	r3, [r4, #0]
		return mem;
	}

	return NULL;
}
    ffea:	4628      	mov	r0, r5
    ffec:	b002      	add	sp, #8
    ffee:	bd70      	pop	{r4, r5, r6, pc}

0000fff0 <mem_release>:
void mem_release(void *mem, void **mem_head)
{
	uint16_t free_count = 0U;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    fff0:	680b      	ldr	r3, [r1, #0]
{
    fff2:	b570      	push	{r4, r5, r6, lr}
    fff4:	460c      	mov	r4, r1
    fff6:	4605      	mov	r5, r0
	if (*mem_head) {
    fff8:	b183      	cbz	r3, 1001c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1d>
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
    fffa:	3307      	adds	r3, #7
    fffc:	f023 0303 	bic.w	r3, r3, #3
   10000:	881e      	ldrh	r6, [r3, #0]
   10002:	3601      	adds	r6, #1
   10004:	b2b6      	uxth	r6, r6
					       sizeof(mem_head)));
	}
	free_count++;

	memcpy(mem, mem_head, sizeof(mem));
   10006:	2204      	movs	r2, #4
   10008:	4621      	mov	r1, r4
   1000a:	4628      	mov	r0, r5
   1000c:	f00f ff2f 	bl	1fe6e <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((uint16_t *)MROUND((uint8_t *)mem + sizeof(mem))) = free_count;
   10010:	1deb      	adds	r3, r5, #7
   10012:	f023 0303 	bic.w	r3, r3, #3
   10016:	801e      	strh	r6, [r3, #0]

	*mem_head = mem;
   10018:	6025      	str	r5, [r4, #0]
}
   1001a:	bd70      	pop	{r4, r5, r6, pc}
   1001c:	2601      	movs	r6, #1
   1001e:	e7f2      	b.n	10006 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x7>

00010020 <mem_get>:
}

void *mem_get(void *mem_pool, uint16_t mem_size, uint16_t index)
{
	return ((void *)((uint8_t *)mem_pool + (mem_size * index)));
}
   10020:	fb02 0001 	mla	r0, r2, r1, r0
   10024:	4770      	bx	lr
   10026:	bf00      	nop

00010028 <mem_index_get>:

uint16_t mem_index_get(void *mem, void *mem_pool, uint16_t mem_size)
{
	return ((uint16_t)((uint8_t *)mem - (uint8_t *)mem_pool) / mem_size);
   10028:	1a40      	subs	r0, r0, r1
   1002a:	b280      	uxth	r0, r0
}
   1002c:	fbb0 f0f2 	udiv	r0, r0, r2
   10030:	4770      	bx	lr
   10032:	bf00      	nop

00010034 <mem_rcopy>:
 * @details Example: [ 0x11 0x22 0x33 ] -> [ 0x33 0x22 0x11 ]
 */
void mem_rcopy(uint8_t *dst, uint8_t const *src, uint16_t len)
{
	src += len;
	while (len--) {
   10034:	1e53      	subs	r3, r2, #1
	src += len;
   10036:	4411      	add	r1, r2
	while (len--) {
   10038:	b29b      	uxth	r3, r3
   1003a:	b142      	cbz	r2, 1004e <mem_rcopy+0x1a>
   1003c:	43db      	mvns	r3, r3
   1003e:	18ca      	adds	r2, r1, r3
   10040:	3801      	subs	r0, #1
		*dst++ = *--src;
   10042:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
   10046:	f800 3f01 	strb.w	r3, [r0, #1]!
	while (len--) {
   1004a:	4291      	cmp	r1, r2
   1004c:	d1f9      	bne.n	10042 <mem_rcopy+0xe>
	}
}
   1004e:	4770      	bx	lr

00010050 <mem_nz>:
 * @brief Determine if src[0..len-1] contains one or more non-zero bytes
 * @return 0 if all bytes are zero; otherwise 1
 */
uint8_t mem_nz(uint8_t *src, uint16_t len)
{
	while (len--) {
   10050:	4401      	add	r1, r0
   10052:	e002      	b.n	1005a <mem_nz+0xa>
		if (*src++) {
   10054:	f810 3b01 	ldrb.w	r3, [r0], #1
   10058:	b91b      	cbnz	r3, 10062 <mem_nz+0x12>
	while (len--) {
   1005a:	4288      	cmp	r0, r1
   1005c:	d1fa      	bne.n	10054 <mem_nz+0x4>
			return 1;
		}
	}

	return 0;
   1005e:	2000      	movs	r0, #0
   10060:	4770      	bx	lr
			return 1;
   10062:	2001      	movs	r0, #1
}
   10064:	4770      	bx	lr
   10066:	bf00      	nop

00010068 <memq_init>:
 * @return          Initial link-element
 */
memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* Head and tail pointer to the initial link - forms an empty queue */
	*head = *tail = link;
   10068:	6010      	str	r0, [r2, #0]
   1006a:	6008      	str	r0, [r1, #0]

	return link;
}
   1006c:	4770      	bx	lr
   1006e:	bf00      	nop

00010070 <memq_deinit>:
memq_link_t *memq_deinit(memq_link_t **head, memq_link_t **tail)
{
	memq_link_t *old_head;

	/* If head and tail are not equal, then queue is not empty */
	if (*head != *tail) {
   10070:	680a      	ldr	r2, [r1, #0]
{
   10072:	4603      	mov	r3, r0
	if (*head != *tail) {
   10074:	6800      	ldr	r0, [r0, #0]
   10076:	4290      	cmp	r0, r2
		return NULL;
	}

	old_head = *head;
	*head = *tail = NULL;
   10078:	bf05      	ittet	eq
   1007a:	2200      	moveq	r2, #0
   1007c:	600a      	streq	r2, [r1, #0]
		return NULL;
   1007e:	2000      	movne	r0, #0
	*head = *tail = NULL;
   10080:	601a      	streq	r2, [r3, #0]

	return old_head;
}
   10082:	4770      	bx	lr

00010084 <memq_enqueue>:
 * @param mem[in]      The memory payload to be enqueued. Pointed to by old tail
 * @param tail[in,out] Tail of queue. Will be updated to point to link
 * @return             New tail. Note: Does not point to the new mem
 */
memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
   10084:	b410      	push	{r4}
	/* Let the old tail element point to the new tail element */
	(*tail)->next = link;
   10086:	6814      	ldr	r4, [r2, #0]
   10088:	6020      	str	r0, [r4, #0]

	/* Let the old tail element point the the new memory */
	(*tail)->mem = mem;
   1008a:	6814      	ldr	r4, [r2, #0]
   1008c:	6061      	str	r1, [r4, #4]
	 * The new tail-element is not expected to point to anything sensible
	 */
	*tail = link;

	return link;
}
   1008e:	bc10      	pop	{r4}
	*tail = link;
   10090:	6010      	str	r0, [r2, #0]
}
   10092:	4770      	bx	lr

00010094 <memq_peek>:
 * @return         head or NULL if queue is empty
 */
memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* If head and tail are equal, then queue empty */
	if (head == tail) {
   10094:	4288      	cmp	r0, r1
   10096:	d003      	beq.n	100a0 <memq_peek+0xc>
		return NULL;
	}

	/* Extract the head link-element's memory */
	if (mem) {
   10098:	b11a      	cbz	r2, 100a2 <memq_peek+0xe>
		*mem = head->mem;
   1009a:	6843      	ldr	r3, [r0, #4]
   1009c:	6013      	str	r3, [r2, #0]
   1009e:	4770      	bx	lr
		return NULL;
   100a0:	2000      	movs	r0, #0
	}

	return head; /* queue was not empty */
}
   100a2:	4770      	bx	lr

000100a4 <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *old_head;

	/* Use memq peek to get the old head and its mem */
	old_head = memq_peek(*head, tail, mem);
   100a4:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
   100a6:	4283      	cmp	r3, r0
   100a8:	d009      	beq.n	100be <memq_dequeue+0x1a>
	if (mem) {
   100aa:	b12a      	cbz	r2, 100b8 <memq_dequeue+0x14>
		*mem = head->mem;
   100ac:	6858      	ldr	r0, [r3, #4]
   100ae:	6010      	str	r0, [r2, #0]
	if (old_head == NULL) {
		return NULL; /* queue is empty */
	}

	/* Update the head-pointer to point to the new head element */
	*head = old_head->next;
   100b0:	681a      	ldr	r2, [r3, #0]
   100b2:	600a      	str	r2, [r1, #0]

	return old_head;
}
   100b4:	4618      	mov	r0, r3
   100b6:	4770      	bx	lr
	if (old_head == NULL) {
   100b8:	2b00      	cmp	r3, #0
   100ba:	d1f9      	bne.n	100b0 <memq_dequeue+0xc>
   100bc:	e7fa      	b.n	100b4 <memq_dequeue+0x10>
		return NULL; /* queue is empty */
   100be:	2300      	movs	r3, #0
   100c0:	e7f8      	b.n	100b4 <memq_dequeue+0x10>
   100c2:	bf00      	nop

000100c4 <mayfly_init>:
#if defined(MAYFLY_UT)
static uint8_t _state;
#endif /* MAYFLY_UT */

void mayfly_init(void)
{
   100c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   100c8:	f8df 8034 	ldr.w	r8, [pc, #52]	; 10100 <mayfly_init+0x3c>
   100cc:	4e0b      	ldr	r6, [pc, #44]	; (100fc <mayfly_init+0x38>)
   100ce:	270c      	movs	r7, #12
	callee_id = MAYFLY_CALLEE_COUNT;
	while (callee_id--) {
		uint8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
   100d0:	f106 0430 	add.w	r4, r6, #48	; 0x30
{
   100d4:	4645      	mov	r5, r8
			memq_init(&mfl[callee_id][caller_id],
   100d6:	1d22      	adds	r2, r4, #4
   100d8:	4621      	mov	r1, r4
   100da:	4628      	mov	r0, r5
   100dc:	3c0c      	subs	r4, #12
   100de:	f7ff ffc3 	bl	10068 <memq_init>
		while (caller_id--) {
   100e2:	42b4      	cmp	r4, r6
   100e4:	f1a5 0508 	sub.w	r5, r5, #8
   100e8:	d1f5      	bne.n	100d6 <mayfly_init+0x12>
	while (callee_id--) {
   100ea:	3f04      	subs	r7, #4
   100ec:	1d3b      	adds	r3, r7, #4
   100ee:	f1a8 0820 	sub.w	r8, r8, #32
   100f2:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
   100f6:	d1eb      	bne.n	100d0 <mayfly_init+0xc>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
   100f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   100fc:	20002528 	.word	0x20002528
   10100:	20002498 	.word	0x20002498

00010104 <mayfly_enable>:

void mayfly_enable(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
   10104:	b430      	push	{r4, r5}
   10106:	4603      	mov	r3, r0
   10108:	460c      	mov	r4, r1
	if (enable) {
   1010a:	b19a      	cbz	r2, 10134 <mayfly_enable+0x30>
		if (mft[callee_id][caller_id].enable_req ==
   1010c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   10110:	0108      	lsls	r0, r1, #4
   10112:	4d14      	ldr	r5, [pc, #80]	; (10164 <mayfly_enable+0x60>)
   10114:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   10118:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   1011c:	4429      	add	r1, r5
   1011e:	7a48      	ldrb	r0, [r1, #9]
   10120:	7a0d      	ldrb	r5, [r1, #8]
   10122:	42a8      	cmp	r0, r5
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
   10124:	bf04      	itt	eq
   10126:	3001      	addeq	r0, #1
   10128:	7208      	strbeq	r0, [r1, #8]
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
   1012a:	4621      	mov	r1, r4
   1012c:	4618      	mov	r0, r3

			/* pend the callee for execution */
			mayfly_pend(caller_id, callee_id);
		}
	}
}
   1012e:	bc30      	pop	{r4, r5}
		mayfly_enable_cb(caller_id, callee_id, enable);
   10130:	f00b ba30 	b.w	1b594 <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
   10134:	eb01 0241 	add.w	r2, r1, r1, lsl #1
   10138:	4d0a      	ldr	r5, [pc, #40]	; (10164 <mayfly_enable+0x60>)
   1013a:	0112      	lsls	r2, r2, #4
   1013c:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   10140:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   10144:	442b      	add	r3, r5
   10146:	7a9d      	ldrb	r5, [r3, #10]
   10148:	7ada      	ldrb	r2, [r3, #11]
   1014a:	42aa      	cmp	r2, r5
   1014c:	d001      	beq.n	10152 <mayfly_enable+0x4e>
}
   1014e:	bc30      	pop	{r4, r5}
   10150:	4770      	bx	lr
			mfp[callee_id] = 1U;
   10152:	4d05      	ldr	r5, [pc, #20]	; (10168 <mayfly_enable+0x64>)
			mft[callee_id][caller_id].disable_req++;
   10154:	3201      	adds	r2, #1
   10156:	729a      	strb	r2, [r3, #10]
			mfp[callee_id] = 1U;
   10158:	2301      	movs	r3, #1
   1015a:	546b      	strb	r3, [r5, r1]
}
   1015c:	bc30      	pop	{r4, r5}
			mayfly_pend(caller_id, callee_id);
   1015e:	f00b ba77 	b.w	1b650 <mayfly_pend>
   10162:	bf00      	nop
   10164:	200024a4 	.word	0x200024a4
   10168:	200024a0 	.word	0x200024a0

0001016c <mayfly_enqueue>:

uint32_t mayfly_enqueue(uint8_t caller_id, uint8_t callee_id, uint8_t chain,
			struct mayfly *m)
{
   1016c:	b570      	push	{r4, r5, r6, lr}
   1016e:	461c      	mov	r4, r3
   10170:	4606      	mov	r6, r0
   10172:	460d      	mov	r5, r1
	uint8_t state;
	uint8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
   10174:	b322      	cbz	r2, 101c0 <mayfly_enqueue+0x54>
   10176:	7863      	ldrb	r3, [r4, #1]

	/* shadow the ack */
	ack = m->_ack;

	/* already in queue */
	state = (m->_req - ack) & 0x03;
   10178:	7822      	ldrb	r2, [r4, #0]
   1017a:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
   1017c:	f012 0203 	ands.w	r2, r2, #3
   10180:	d005      	beq.n	1018e <mayfly_enqueue+0x22>
		if (chain) {
			if (state != 1U) {
   10182:	2a01      	cmp	r2, #1
   10184:	d040      	beq.n	10208 <mayfly_enqueue+0x9c>
				/* mark as ready in queue */
				m->_req = ack + 1;
   10186:	3301      	adds	r3, #1
   10188:	b2db      	uxtb	r3, r3
   1018a:	7023      	strb	r3, [r4, #0]

				goto mayfly_enqueue_pend;
   1018c:	e00f      	b.n	101ae <mayfly_enqueue+0x42>
		return 0;
	}

	/* new, add as ready in the queue */
	m->_req = ack + 1;
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
   1018e:	2230      	movs	r2, #48	; 0x30
   10190:	2104      	movs	r1, #4
   10192:	fb12 1105 	smlabb	r1, r2, r5, r1
   10196:	220c      	movs	r2, #12
   10198:	fb12 1206 	smlabb	r2, r2, r6, r1
	m->_req = ack + 1;
   1019c:	3301      	adds	r3, #1
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
   1019e:	491b      	ldr	r1, [pc, #108]	; (1020c <mayfly_enqueue+0xa0>)
   101a0:	6860      	ldr	r0, [r4, #4]
	m->_req = ack + 1;
   101a2:	b2db      	uxtb	r3, r3
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
   101a4:	440a      	add	r2, r1
	m->_req = ack + 1;
   101a6:	7023      	strb	r3, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
   101a8:	4621      	mov	r1, r4
   101aa:	f7ff ff6b 	bl	10084 <memq_enqueue>

mayfly_enqueue_pend:
	/* set mayfly callee pending */
	mfp[callee_id] = 1U;
   101ae:	4b18      	ldr	r3, [pc, #96]	; (10210 <mayfly_enqueue+0xa4>)

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
   101b0:	4630      	mov	r0, r6
	mfp[callee_id] = 1U;
   101b2:	2201      	movs	r2, #1
	mayfly_pend(caller_id, callee_id);
   101b4:	4629      	mov	r1, r5
	mfp[callee_id] = 1U;
   101b6:	555a      	strb	r2, [r3, r5]
	mayfly_pend(caller_id, callee_id);
   101b8:	f00b fa4a 	bl	1b650 <mayfly_pend>

	return 0;
   101bc:	2000      	movs	r0, #0
}
   101be:	bd70      	pop	{r4, r5, r6, pc}
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
   101c0:	f00b fa28 	bl	1b614 <mayfly_prio_is_equal>
   101c4:	2800      	cmp	r0, #0
   101c6:	d0d6      	beq.n	10176 <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
   101c8:	4629      	mov	r1, r5
   101ca:	4630      	mov	r0, r6
   101cc:	f00b fa02 	bl	1b5d4 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
   101d0:	2800      	cmp	r0, #0
   101d2:	d0d0      	beq.n	10176 <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
   101d4:	eb05 0245 	add.w	r2, r5, r5, lsl #1
   101d8:	0111      	lsls	r1, r2, #4
   101da:	480c      	ldr	r0, [pc, #48]	; (1020c <mayfly_enqueue+0xa0>)
   101dc:	7863      	ldrb	r3, [r4, #1]
   101de:	eb06 0246 	add.w	r2, r6, r6, lsl #1
   101e2:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   101e6:	4402      	add	r2, r0
		!mayfly_is_enabled(caller_id, callee_id) ||
   101e8:	7a91      	ldrb	r1, [r2, #10]
   101ea:	7ad2      	ldrb	r2, [r2, #11]
   101ec:	4291      	cmp	r1, r2
   101ee:	d1c3      	bne.n	10178 <mayfly_enqueue+0xc>
	state = (m->_req - ack) & 0x03;
   101f0:	7822      	ldrb	r2, [r4, #0]
   101f2:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
   101f4:	0792      	lsls	r2, r2, #30
   101f6:	d002      	beq.n	101fe <mayfly_enqueue+0x92>
		m->_req = ack + 2;
   101f8:	3302      	adds	r3, #2
   101fa:	b2db      	uxtb	r3, r3
   101fc:	7023      	strb	r3, [r4, #0]
		m->fp(m->param);
   101fe:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
   10202:	4798      	blx	r3
		return 0;
   10204:	2000      	movs	r0, #0
}
   10206:	bd70      	pop	{r4, r5, r6, pc}
			return 1;
   10208:	4610      	mov	r0, r2
}
   1020a:	bd70      	pop	{r4, r5, r6, pc}
   1020c:	200024a4 	.word	0x200024a4
   10210:	200024a0 	.word	0x200024a0

00010214 <mayfly_run>:
{
	uint8_t disable = 0U;
	uint8_t enable = 0U;
	uint8_t caller_id;

	if (!mfp[callee_id]) {
   10214:	494e      	ldr	r1, [pc, #312]	; (10350 <mayfly_run+0x13c>)
   10216:	5c0b      	ldrb	r3, [r1, r0]
   10218:	2b00      	cmp	r3, #0
   1021a:	f000 8098 	beq.w	1034e <mayfly_run+0x13a>
{
   1021e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   10222:	4b4c      	ldr	r3, [pc, #304]	; (10354 <mayfly_run+0x140>)
   10224:	f04f 0b3c 	mov.w	fp, #60	; 0x3c
{
   10228:	b087      	sub	sp, #28
		return;
	}
	mfp[callee_id] = 0U;
   1022a:	2200      	movs	r2, #0
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   1022c:	fb0b 3b00 	mla	fp, fp, r0, r3
	mfp[callee_id] = 0U;
   10230:	540a      	strb	r2, [r1, r0]

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
	while (caller_id--) {
   10232:	eb00 0740 	add.w	r7, r0, r0, lsl #1
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   10236:	f10b 0104 	add.w	r1, fp, #4
	uint8_t enable = 0U;
   1023a:	9203      	str	r2, [sp, #12]
   1023c:	eb03 1707 	add.w	r7, r3, r7, lsl #4
	uint8_t disable = 0U;
   10240:	9201      	str	r2, [sp, #4]
	while (caller_id--) {
   10242:	f04f 0903 	mov.w	r9, #3
   10246:	4688      	mov	r8, r1
   10248:	9002      	str	r0, [sp, #8]
		memq_link_t *link;
		struct mayfly *m = 0;
   1024a:	2300      	movs	r3, #0

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
   1024c:	e9d7 0109 	ldrd	r0, r1, [r7, #36]	; 0x24
   10250:	aa05      	add	r2, sp, #20
		struct mayfly *m = 0;
   10252:	9305      	str	r3, [sp, #20]
		link = memq_peek(mft[callee_id][caller_id].head,
   10254:	f7ff ff1e 	bl	10094 <memq_peek>
				 mft[callee_id][caller_id].tail,
				 (void **)&m);
		while (link) {
   10258:	f107 0624 	add.w	r6, r7, #36	; 0x24
   1025c:	4683      	mov	fp, r0
   1025e:	2800      	cmp	r0, #0
   10260:	d034      	beq.n	102cc <mayfly_run+0xb8>
#if defined(MAYFLY_UT)
			_state = 0U;
#endif /* MAYFLY_UT */

			/* execute work if ready */
			state = (m->_req - m->_ack) & 0x03;
   10262:	9c05      	ldr	r4, [sp, #20]
   10264:	7825      	ldrb	r5, [r4, #0]
   10266:	7863      	ldrb	r3, [r4, #1]
   10268:	1aed      	subs	r5, r5, r3
   1026a:	f005 0503 	and.w	r5, r5, #3
			if (state == 1U) {
   1026e:	2d01      	cmp	r5, #1
   10270:	d106      	bne.n	10280 <mayfly_run+0x6c>
#if defined(MAYFLY_UT)
				_state = 1U;
#endif /* MAYFLY_UT */

				/* mark mayfly as ran */
				m->_ack--;
   10272:	3b01      	subs	r3, #1
   10274:	7063      	strb	r3, [r4, #1]

				/* call the mayfly function */
				m->fp(m->param);
   10276:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
   1027a:	4798      	blx	r3
   1027c:	9c05      	ldr	r4, [sp, #20]
   1027e:	7863      	ldrb	r3, [r4, #1]
	req = m->_req;
   10280:	f894 c000 	ldrb.w	ip, [r4]
   10284:	6ab8      	ldr	r0, [r7, #40]	; 0x28
	if (((req - m->_ack) & 0x03) != 1U) {
   10286:	ebac 0303 	sub.w	r3, ip, r3
   1028a:	f003 0303 	and.w	r3, r3, #3
   1028e:	2b01      	cmp	r3, #1
		memq_dequeue(mft[callee_id][caller_id].tail,
   10290:	f04f 0200 	mov.w	r2, #0
   10294:	4631      	mov	r1, r6
	req = m->_req;
   10296:	fa5f fa8c 	uxtb.w	sl, ip
	if (((req - m->_ack) & 0x03) != 1U) {
   1029a:	d00d      	beq.n	102b8 <mayfly_run+0xa4>
		memq_dequeue(mft[callee_id][caller_id].tail,
   1029c:	f7ff ff02 	bl	100a4 <memq_dequeue>
		ack = m->_ack;
   102a0:	7862      	ldrb	r2, [r4, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
   102a2:	7823      	ldrb	r3, [r4, #0]
		m->_link = link;
   102a4:	f8c4 b004 	str.w	fp, [r4, #4]
		if (((m->_req - ack) & 0x03) == 1U) {
   102a8:	1a9b      	subs	r3, r3, r2
   102aa:	f003 0303 	and.w	r3, r3, #3
   102ae:	2b01      	cmp	r3, #1
		m->_ack = req;
   102b0:	f884 a001 	strb.w	sl, [r4, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
   102b4:	d044      	beq.n	10340 <mayfly_run+0x12c>
   102b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28

			/* dequeue if not re-pended */
			dequeue(callee_id, caller_id, link, m);

			/* fetch next mayfly in callee queue, if any */
			link = memq_peek(mft[callee_id][caller_id].head,
   102b8:	4601      	mov	r1, r0
   102ba:	aa05      	add	r2, sp, #20
   102bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
   102be:	f7ff fee9 	bl	10094 <memq_peek>
 */
#if defined(CONFIG_BT_MAYFLY_YIELD_AFTER_CALL)
			/* yield out of mayfly_run if a mayfly function was
			 * called.
			 */
			if (state == 1U) {
   102c2:	2d01      	cmp	r5, #1
			link = memq_peek(mft[callee_id][caller_id].head,
   102c4:	4683      	mov	fp, r0
			if (state == 1U) {
   102c6:	d029      	beq.n	1031c <mayfly_run+0x108>
		while (link) {
   102c8:	2800      	cmp	r0, #0
   102ca:	d1ca      	bne.n	10262 <mayfly_run+0x4e>
				}
			}
#endif
		}

		if (mft[callee_id][caller_id].disable_req !=
   102cc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
   102d0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
   102d4:	429a      	cmp	r2, r3
   102d6:	d003      	beq.n	102e0 <mayfly_run+0xcc>
		    mft[callee_id][caller_id].disable_ack) {
			disable = 1U;

			mft[callee_id][caller_id].disable_ack =
   102d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			disable = 1U;
   102dc:	2301      	movs	r3, #1
   102de:	9301      	str	r3, [sp, #4]
				mft[callee_id][caller_id].disable_req;
		}

		if (mft[callee_id][caller_id].enable_req !=
   102e0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   102e4:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
   102e8:	429a      	cmp	r2, r3
   102ea:	d003      	beq.n	102f4 <mayfly_run+0xe0>
		    mft[callee_id][caller_id].enable_ack) {
			enable = 1U;

			mft[callee_id][caller_id].enable_ack =
   102ec:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			enable = 1U;
   102f0:	2301      	movs	r3, #1
   102f2:	9303      	str	r3, [sp, #12]
	while (caller_id--) {
   102f4:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   102f8:	fa5f f989 	uxtb.w	r9, r9
   102fc:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   10300:	f1a7 070c 	sub.w	r7, r7, #12
   10304:	d1a1      	bne.n	1024a <mayfly_run+0x36>
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
   10306:	e9dd 3a01 	ldrd	r3, sl, [sp, #4]
   1030a:	b1b3      	cbz	r3, 1033a <mayfly_run+0x126>
   1030c:	9b03      	ldr	r3, [sp, #12]
   1030e:	b9a3      	cbnz	r3, 1033a <mayfly_run+0x126>
		mayfly_enable_cb(callee_id, callee_id, 0);
   10310:	461a      	mov	r2, r3
   10312:	4651      	mov	r1, sl
   10314:	4650      	mov	r0, sl
   10316:	f00b f93d 	bl	1b594 <mayfly_enable_cb>
   1031a:	e00e      	b.n	1033a <mayfly_run+0x126>
				if (caller_id || link) {
   1031c:	f1b9 0f00 	cmp.w	r9, #0
   10320:	d101      	bne.n	10326 <mayfly_run+0x112>
   10322:	2800      	cmp	r0, #0
   10324:	d0d2      	beq.n	102cc <mayfly_run+0xb8>
   10326:	f8dd a008 	ldr.w	sl, [sp, #8]
					mfp[callee_id] = 1U;
   1032a:	4a09      	ldr	r2, [pc, #36]	; (10350 <mayfly_run+0x13c>)
   1032c:	2301      	movs	r3, #1
					mayfly_pend(callee_id, callee_id);
   1032e:	4651      	mov	r1, sl
   10330:	4650      	mov	r0, sl
					mfp[callee_id] = 1U;
   10332:	f802 300a 	strb.w	r3, [r2, sl]
					mayfly_pend(callee_id, callee_id);
   10336:	f00b f98b 	bl	1b650 <mayfly_pend>
	}
}
   1033a:	b007      	add	sp, #28
   1033c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			m->_ack = ack;
   10340:	7062      	strb	r2, [r4, #1]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   10342:	4621      	mov	r1, r4
   10344:	4658      	mov	r0, fp
   10346:	4642      	mov	r2, r8
   10348:	f7ff fe9c 	bl	10084 <memq_enqueue>
   1034c:	e7b3      	b.n	102b6 <mayfly_run+0xa2>
   1034e:	4770      	bx	lr
   10350:	200024a0 	.word	0x200024a0
   10354:	200024a4 	.word	0x200024a4

00010358 <util_ones_count_get>:
 */
uint8_t util_ones_count_get(uint8_t *octets, uint8_t octets_len)
{
	uint8_t one_count = 0U;

	while (octets_len--) {
   10358:	b1a1      	cbz	r1, 10384 <util_ones_count_get+0x2c>
   1035a:	1e4b      	subs	r3, r1, #1
   1035c:	b2db      	uxtb	r3, r3
{
   1035e:	b410      	push	{r4}
   10360:	1e41      	subs	r1, r0, #1
   10362:	18c4      	adds	r4, r0, r3
	uint8_t one_count = 0U;
   10364:	2000      	movs	r0, #0
		uint8_t bite;

		bite = *octets;
   10366:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		while (bite) {
   1036a:	b13b      	cbz	r3, 1037c <util_ones_count_get+0x24>
			bite &= (bite - 1);
   1036c:	b25b      	sxtb	r3, r3
   1036e:	1e5a      	subs	r2, r3, #1
   10370:	4013      	ands	r3, r2
			one_count++;
   10372:	3001      	adds	r0, #1
		while (bite) {
   10374:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
			one_count++;
   10378:	b2c0      	uxtb	r0, r0
		while (bite) {
   1037a:	d1f7      	bne.n	1036c <util_ones_count_get+0x14>
	while (octets_len--) {
   1037c:	42a1      	cmp	r1, r4
   1037e:	d1f2      	bne.n	10366 <util_ones_count_get+0xe>
		}
		octets++;
	}

	return one_count;
}
   10380:	bc10      	pop	{r4}
   10382:	4770      	bx	lr
	uint8_t one_count = 0U;
   10384:	4608      	mov	r0, r1
}
   10386:	4770      	bx	lr

00010388 <util_aa_le32>:
 * - It shall have at least three ones in the least significant 8 bits.
 * - It shall have no more than eleven transitions in the least significant 16
 *   bits.
 */
int util_aa_le32(uint8_t *dst)
{
   10388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	/* It shall not be the advertising channel packets Access Address.
	 * It shall not be a sequence that differs from the advertising channel
	 * packets Access Address by only one bit.
	 */
	adv_aa_check = aa ^ PDU_AC_ACCESS_ADDR;
   1038c:	4dad      	ldr	r5, [pc, #692]	; (10644 <util_aa_le32+0x2bc>)
{
   1038e:	b083      	sub	sp, #12
   10390:	4604      	mov	r4, r0
   10392:	2703      	movs	r7, #3
	consecutive_cnt = 1U;
   10394:	2601      	movs	r6, #1
	lll_csrand_get(dst, sizeof(uint32_t));
   10396:	2104      	movs	r1, #4
   10398:	4620      	mov	r0, r4
   1039a:	f009 f9c9 	bl	19730 <lll_csrand_get>
	return ((uint16_t)src[1] << 8) | src[0];
   1039e:	7863      	ldrb	r3, [r4, #1]
   103a0:	78e2      	ldrb	r2, [r4, #3]
   103a2:	f894 c002 	ldrb.w	ip, [r4, #2]
   103a6:	7820      	ldrb	r0, [r4, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   103a8:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8
   103ac:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
	transitions = 0U;
   103b0:	f04f 0800 	mov.w	r8, #0
   103b4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
	ones_count_lsb8 = 0U;
   103b8:	46c3      	mov	fp, r8
	consecutive_bit = (aa >> bit_idx) & 0x01;
   103ba:	ea4f 3cdc 	mov.w	ip, ip, lsr #15
	transitions_lsb16 = 0U;
   103be:	46c1      	mov	r9, r8
	consecutive_bit = (aa >> bit_idx) & 0x01;
   103c0:	231e      	movs	r3, #30
	consecutive_cnt = 1U;
   103c2:	f04f 0a01 	mov.w	sl, #1
   103c6:	e01a      	b.n	103fe <util_aa_le32+0x76>
			transitions++;
   103c8:	f108 0101 	add.w	r1, r8, #1
			if (bit_idx < 15) {
   103cc:	2b0e      	cmp	r3, #14
			transitions++;
   103ce:	b2c9      	uxtb	r1, r1
			if (bit_idx < 15) {
   103d0:	fa5f fc83 	uxtb.w	ip, r3
   103d4:	f240 808a 	bls.w	104ec <util_aa_le32+0x164>
		if ((consecutive_cnt > 6) ||
   103d8:	b3ca      	cbz	r2, 1044e <util_aa_le32+0xc6>
   103da:	4694      	mov	ip, r2
   103dc:	46ce      	mov	lr, r9
		    ((consecutive_cnt < 6) &&
   103de:	2b1c      	cmp	r3, #28
   103e0:	f240 811d 	bls.w	1061e <util_aa_le32+0x296>
		     (((bit_idx < 29) && (transitions < 1)) ||
   103e4:	2b1b      	cmp	r3, #27
   103e6:	f240 80f0 	bls.w	105ca <util_aa_le32+0x242>
		if ((transitions > 24) ||
   103ea:	2919      	cmp	r1, #25
   103ec:	d039      	beq.n	10462 <util_aa_le32+0xda>
					   (ones_count_lsb8 < 3)))) ||
   103ee:	4688      	mov	r8, r1
   103f0:	4692      	mov	sl, r2
		    (transitions_lsb16 > 11) ||
   103f2:	f1be 0f0c 	cmp.w	lr, #12
					   (ones_count_lsb8 < 3)))) ||
   103f6:	46f1      	mov	r9, lr
		    (transitions_lsb16 > 11) ||
   103f8:	d033      	beq.n	10462 <util_aa_le32+0xda>
	while (bit_idx--) {
   103fa:	3b01      	subs	r3, #1
   103fc:	d339      	bcc.n	10472 <util_aa_le32+0xea>
		bit = (aa >> bit_idx) & 0x01;
   103fe:	fa20 f203 	lsr.w	r2, r0, r3
   10402:	f002 0201 	and.w	r2, r2, #1
		if (bit == consecutive_bit) {
   10406:	4562      	cmp	r2, ip
   10408:	d1de      	bne.n	103c8 <util_aa_le32+0x40>
			consecutive_cnt++;
   1040a:	f10a 0201 	add.w	r2, sl, #1
		if ((bit_idx < 8) && consecutive_bit) {
   1040e:	2b07      	cmp	r3, #7
			consecutive_cnt++;
   10410:	b2d2      	uxtb	r2, r2
		if ((bit_idx < 8) && consecutive_bit) {
   10412:	f240 80c4 	bls.w	1059e <util_aa_le32+0x216>
		if ((consecutive_cnt > 6) ||
   10416:	2a06      	cmp	r2, #6
   10418:	d977      	bls.n	1050a <util_aa_le32+0x182>
			if (consecutive_bit) {
   1041a:	fa06 f203 	lsl.w	r2, r6, r3
   1041e:	f1bc 0f00 	cmp.w	ip, #0
   10422:	d051      	beq.n	104c8 <util_aa_le32+0x140>
				aa &= ~BIT(bit_idx);
   10424:	ea20 0002 	bic.w	r0, r0, r2
   10428:	46ce      	mov	lr, r9
				consecutive_bit = 0U;
   1042a:	f04f 0c00 	mov.w	ip, #0
				transitions++;
   1042e:	f108 0101 	add.w	r1, r8, #1
			if (bit_idx < 15) {
   10432:	2b0e      	cmp	r3, #14
				transitions++;
   10434:	b2c9      	uxtb	r1, r1
				consecutive_cnt = 1U;
   10436:	bf88      	it	hi
   10438:	2201      	movhi	r2, #1
			if (bit_idx < 15) {
   1043a:	d8d6      	bhi.n	103ea <util_aa_le32+0x62>
				if (transitions_lsb16 !=
   1043c:	45f1      	cmp	r9, lr
   1043e:	f000 80a1 	beq.w	10584 <util_aa_le32+0x1fc>
		if ((transitions > 24) ||
   10442:	2919      	cmp	r1, #25
   10444:	d00d      	beq.n	10462 <util_aa_le32+0xda>
   10446:	4688      	mov	r8, r1
				consecutive_cnt = 1U;
   10448:	f04f 0a01 	mov.w	sl, #1
   1044c:	e7d5      	b.n	103fa <util_aa_le32+0x72>
		if ((consecutive_cnt > 6) ||
   1044e:	46ce      	mov	lr, r9
			consecutive_cnt = 1U;
   10450:	2201      	movs	r2, #1
		    (!consecutive_bit && (((bit_idx < 6) &&
   10452:	2b05      	cmp	r3, #5
   10454:	d975      	bls.n	10542 <util_aa_le32+0x1ba>
					   (ones_count_lsb8 < 3)))) ||
   10456:	2a06      	cmp	r2, #6
   10458:	d154      	bne.n	10504 <util_aa_le32+0x17c>
		if ((transitions > 24) ||
   1045a:	2919      	cmp	r1, #25
					   (ones_count_lsb8 < 3)))) ||
   1045c:	f04f 0c00 	mov.w	ip, #0
		if ((transitions > 24) ||
   10460:	d1c5      	bne.n	103ee <util_aa_le32+0x66>
			if (consecutive_bit) {
   10462:	3301      	adds	r3, #1
   10464:	fa06 f303 	lsl.w	r3, r6, r3
   10468:	f1bc 0f00 	cmp.w	ip, #0
   1046c:	d053      	beq.n	10516 <util_aa_le32+0x18e>
				aa &= ~(BIT(bit_idx + 1) - 1);
   1046e:	425b      	negs	r3, r3
   10470:	4018      	ands	r0, r3
	adv_aa_check = aa ^ PDU_AC_ACCESS_ADDR;
   10472:	ea80 0305 	eor.w	r3, r0, r5
   10476:	9301      	str	r3, [sp, #4]
	while (octets_len--) {
   10478:	f10d 0c04 	add.w	ip, sp, #4
   1047c:	f10d 0e08 	add.w	lr, sp, #8
	uint8_t one_count = 0U;
   10480:	2200      	movs	r2, #0
		bite = *octets;
   10482:	f81c 3b01 	ldrb.w	r3, [ip], #1
		while (bite) {
   10486:	b13b      	cbz	r3, 10498 <util_aa_le32+0x110>
			bite &= (bite - 1);
   10488:	b25b      	sxtb	r3, r3
   1048a:	1e59      	subs	r1, r3, #1
   1048c:	400b      	ands	r3, r1
			one_count++;
   1048e:	3201      	adds	r2, #1
		while (bite) {
   10490:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
			one_count++;
   10494:	b2d2      	uxtb	r2, r2
		while (bite) {
   10496:	d1f7      	bne.n	10488 <util_aa_le32+0x100>
	while (octets_len--) {
   10498:	45f4      	cmp	ip, lr
   1049a:	d1f2      	bne.n	10482 <util_aa_le32+0xfa>
	if (util_ones_count_get((uint8_t *)&adv_aa_check,
   1049c:	2a01      	cmp	r2, #1
   1049e:	d909      	bls.n	104b4 <util_aa_le32+0x12c>
				sizeof(adv_aa_check)) <= 1) {
		goto again;
	}

	/* It shall not have all four octets equal. */
	if (!((aa & 0xFFFF) ^ (aa >> 16)) &&
   104a0:	b283      	uxth	r3, r0
   104a2:	ebb3 4f10 	cmp.w	r3, r0, lsr #16
   104a6:	ea4f 4210 	mov.w	r2, r0, lsr #16
   104aa:	d137      	bne.n	1051c <util_aa_le32+0x194>
	    !((aa & 0xFF) ^ (aa >> 24))) {
   104ac:	b2c3      	uxtb	r3, r0
	if (!((aa & 0xFFFF) ^ (aa >> 16)) &&
   104ae:	ebb3 6f10 	cmp.w	r3, r0, lsr #24
   104b2:	d133      	bne.n	1051c <util_aa_le32+0x194>
	if (!retry) {
   104b4:	3f01      	subs	r7, #1
   104b6:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
   104ba:	f47f af6c 	bne.w	10396 <util_aa_le32+0xe>
		return -EFAULT;
   104be:	f06f 000d 	mvn.w	r0, #13
	}

	sys_put_le32(aa, dst);

	return 0;
}
   104c2:	b003      	add	sp, #12
   104c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				aa |= BIT(bit_idx);
   104c8:	4310      	orrs	r0, r2
   104ca:	4641      	mov	r1, r8
   104cc:	46ce      	mov	lr, r9
				consecutive_bit = 1U;
   104ce:	f04f 0c01 	mov.w	ip, #1
			if (transitions != transitions_prev) {
   104d2:	4588      	cmp	r8, r1
   104d4:	d0ab      	beq.n	1042e <util_aa_le32+0xa6>
			if (bit_idx < 15) {
   104d6:	2b0e      	cmp	r3, #14
   104d8:	d88b      	bhi.n	103f2 <util_aa_le32+0x6a>
				if (transitions_lsb16 !=
   104da:	45ce      	cmp	lr, r9
   104dc:	d18d      	bne.n	103fa <util_aa_le32+0x72>
   104de:	4641      	mov	r1, r8
					transitions_lsb16++;
   104e0:	f10e 0e01 	add.w	lr, lr, #1
   104e4:	fa5f fe8e 	uxtb.w	lr, lr
   104e8:	4652      	mov	r2, sl
   104ea:	e77e      	b.n	103ea <util_aa_le32+0x62>
				transitions_lsb16++;
   104ec:	f109 0e01 	add.w	lr, r9, #1
		if ((bit_idx < 8) && consecutive_bit) {
   104f0:	f1bc 0f07 	cmp.w	ip, #7
				transitions_lsb16++;
   104f4:	fa5f fe8e 	uxtb.w	lr, lr
		if ((bit_idx < 8) && consecutive_bit) {
   104f8:	f240 8094 	bls.w	10624 <util_aa_le32+0x29c>
		if ((consecutive_cnt > 6) ||
   104fc:	2a00      	cmp	r2, #0
   104fe:	f040 809a 	bne.w	10636 <util_aa_le32+0x2ae>
			consecutive_cnt = 1U;
   10502:	2201      	movs	r2, #1
   10504:	f04f 0c00 	mov.w	ip, #0
   10508:	e769      	b.n	103de <util_aa_le32+0x56>
		if ((consecutive_cnt > 6) ||
   1050a:	f1bc 0f00 	cmp.w	ip, #0
   1050e:	d110      	bne.n	10532 <util_aa_le32+0x1aa>
   10510:	4641      	mov	r1, r8
   10512:	46ce      	mov	lr, r9
   10514:	e79f      	b.n	10456 <util_aa_le32+0xce>
				aa |= (BIT(bit_idx + 1) - 1);
   10516:	3b01      	subs	r3, #1
   10518:	4318      	orrs	r0, r3
   1051a:	e7aa      	b.n	10472 <util_aa_le32+0xea>
	dst[1] = val >> 8;
   1051c:	f3c0 2107 	ubfx	r1, r0, #8, #8
   10520:	0a13      	lsrs	r3, r2, #8
	dst[0] = val;
   10522:	7020      	strb	r0, [r4, #0]
	return 0;
   10524:	2000      	movs	r0, #0
	dst[1] = val >> 8;
   10526:	7061      	strb	r1, [r4, #1]
	dst[0] = val;
   10528:	70a2      	strb	r2, [r4, #2]
	dst[1] = val >> 8;
   1052a:	70e3      	strb	r3, [r4, #3]
}
   1052c:	b003      	add	sp, #12
   1052e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					   (ones_count_lsb8 < 3)))) ||
   10532:	2a06      	cmp	r2, #6
   10534:	d102      	bne.n	1053c <util_aa_le32+0x1b4>
   10536:	4641      	mov	r1, r8
   10538:	46ce      	mov	lr, r9
   1053a:	e758      	b.n	103ee <util_aa_le32+0x66>
   1053c:	4641      	mov	r1, r8
   1053e:	46ce      	mov	lr, r9
   10540:	e74d      	b.n	103de <util_aa_le32+0x56>
		    (!consecutive_bit && (((bit_idx < 6) &&
   10542:	f1bb 0f00 	cmp.w	fp, #0
   10546:	d00c      	beq.n	10562 <util_aa_le32+0x1da>
					   (ones_count_lsb8 < 1)) ||
   10548:	f1bc 0f04 	cmp.w	ip, #4
   1054c:	d883      	bhi.n	10456 <util_aa_le32+0xce>
					  ((bit_idx < 5) &&
   1054e:	f1bb 0f01 	cmp.w	fp, #1
   10552:	d906      	bls.n	10562 <util_aa_le32+0x1da>
					   (ones_count_lsb8 < 2)) ||
   10554:	f1bc 0f03 	cmp.w	ip, #3
   10558:	f63f af7d 	bhi.w	10456 <util_aa_le32+0xce>
					  ((bit_idx < 4) &&
   1055c:	f1bb 0f02 	cmp.w	fp, #2
   10560:	d809      	bhi.n	10576 <util_aa_le32+0x1ee>
				aa |= BIT(bit_idx);
   10562:	fa06 f203 	lsl.w	r2, r6, r3
   10566:	4310      	orrs	r0, r2
					ones_count_lsb8++;
   10568:	f10b 0b01 	add.w	fp, fp, #1
   1056c:	fa5f fb8b 	uxtb.w	fp, fp
				consecutive_bit = 1U;
   10570:	f04f 0c01 	mov.w	ip, #1
   10574:	e7ad      	b.n	104d2 <util_aa_le32+0x14a>
					   (ones_count_lsb8 < 3)))) ||
   10576:	2a06      	cmp	r2, #6
   10578:	f43f af6f 	beq.w	1045a <util_aa_le32+0xd2>
		     (((bit_idx < 29) && (transitions < 1)) ||
   1057c:	b129      	cbz	r1, 1058a <util_aa_le32+0x202>
   1057e:	f04f 0c00 	mov.w	ip, #0
   10582:	e72f      	b.n	103e4 <util_aa_le32+0x5c>
				consecutive_cnt = 1U;
   10584:	f04f 0a01 	mov.w	sl, #1
   10588:	e7aa      	b.n	104e0 <util_aa_le32+0x158>
			if (consecutive_bit) {
   1058a:	fa06 f203 	lsl.w	r2, r6, r3
				if (bit_idx < 8) {
   1058e:	2b07      	cmp	r3, #7
				aa |= BIT(bit_idx);
   10590:	ea40 0002 	orr.w	r0, r0, r2
				consecutive_bit = 1U;
   10594:	bf88      	it	hi
   10596:	f04f 0c01 	movhi.w	ip, #1
				if (bit_idx < 8) {
   1059a:	d89a      	bhi.n	104d2 <util_aa_le32+0x14a>
   1059c:	e7e4      	b.n	10568 <util_aa_le32+0x1e0>
		if ((bit_idx < 8) && consecutive_bit) {
   1059e:	f1bc 0f00 	cmp.w	ip, #0
   105a2:	d02a      	beq.n	105fa <util_aa_le32+0x272>
			ones_count_lsb8++;
   105a4:	f10b 0b01 	add.w	fp, fp, #1
		if ((consecutive_cnt > 6) ||
   105a8:	2a06      	cmp	r2, #6
			ones_count_lsb8++;
   105aa:	fa5f fb8b 	uxtb.w	fp, fp
		if ((consecutive_cnt > 6) ||
   105ae:	d91d      	bls.n	105ec <util_aa_le32+0x264>
				aa &= ~BIT(bit_idx);
   105b0:	fa06 f203 	lsl.w	r2, r6, r3
   105b4:	ea20 0002 	bic.w	r0, r0, r2
   105b8:	4641      	mov	r1, r8
   105ba:	46ce      	mov	lr, r9
					ones_count_lsb8--;
   105bc:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   105c0:	fa5f fb8b 	uxtb.w	fp, fp
				consecutive_bit = 0U;
   105c4:	f04f 0c00 	mov.w	ip, #0
   105c8:	e783      	b.n	104d2 <util_aa_le32+0x14a>
		      ((bit_idx < 28) && (transitions < 2))))) {
   105ca:	2901      	cmp	r1, #1
   105cc:	f63f af0d 	bhi.w	103ea <util_aa_le32+0x62>
			if (consecutive_bit) {
   105d0:	fa06 f203 	lsl.w	r2, r6, r3
   105d4:	f1bc 0f00 	cmp.w	ip, #0
   105d8:	d0d9      	beq.n	1058e <util_aa_le32+0x206>
				if (bit_idx < 8) {
   105da:	2b07      	cmp	r3, #7
				aa &= ~BIT(bit_idx);
   105dc:	ea20 0002 	bic.w	r0, r0, r2
				consecutive_bit = 0U;
   105e0:	bf88      	it	hi
   105e2:	f04f 0c00 	movhi.w	ip, #0
				if (bit_idx < 8) {
   105e6:	f63f af74 	bhi.w	104d2 <util_aa_le32+0x14a>
   105ea:	e7e7      	b.n	105bc <util_aa_le32+0x234>
					   (ones_count_lsb8 < 3)))) ||
   105ec:	d0a3      	beq.n	10536 <util_aa_le32+0x1ae>
		     (((bit_idx < 29) && (transitions < 1)) ||
   105ee:	f1b8 0f00 	cmp.w	r8, #0
   105f2:	d00a      	beq.n	1060a <util_aa_le32+0x282>
   105f4:	4641      	mov	r1, r8
   105f6:	46ce      	mov	lr, r9
   105f8:	e6f4      	b.n	103e4 <util_aa_le32+0x5c>
		if ((consecutive_cnt > 6) ||
   105fa:	2a06      	cmp	r2, #6
   105fc:	d90a      	bls.n	10614 <util_aa_le32+0x28c>
				aa |= BIT(bit_idx);
   105fe:	fa06 f203 	lsl.w	r2, r6, r3
   10602:	4310      	orrs	r0, r2
   10604:	4641      	mov	r1, r8
   10606:	46ce      	mov	lr, r9
   10608:	e7ae      	b.n	10568 <util_aa_le32+0x1e0>
			if (consecutive_bit) {
   1060a:	fa06 f203 	lsl.w	r2, r6, r3
		     (((bit_idx < 29) && (transitions < 1)) ||
   1060e:	4641      	mov	r1, r8
   10610:	46ce      	mov	lr, r9
   10612:	e7e2      	b.n	105da <util_aa_le32+0x252>
		if ((consecutive_cnt > 6) ||
   10614:	4641      	mov	r1, r8
   10616:	46ce      	mov	lr, r9
   10618:	fa5f fc83 	uxtb.w	ip, r3
   1061c:	e719      	b.n	10452 <util_aa_le32+0xca>
		     (((bit_idx < 29) && (transitions < 1)) ||
   1061e:	2900      	cmp	r1, #0
   10620:	d0d6      	beq.n	105d0 <util_aa_le32+0x248>
   10622:	e6df      	b.n	103e4 <util_aa_le32+0x5c>
		if ((bit_idx < 8) && consecutive_bit) {
   10624:	2a00      	cmp	r2, #0
   10626:	f43f af13 	beq.w	10450 <util_aa_le32+0xc8>
			ones_count_lsb8++;
   1062a:	f10b 0b01 	add.w	fp, fp, #1
   1062e:	fa5f fb8b 	uxtb.w	fp, fp
   10632:	4694      	mov	ip, r2
   10634:	e6d6      	b.n	103e4 <util_aa_le32+0x5c>
		      ((bit_idx < 28) && (transitions < 2))))) {
   10636:	2901      	cmp	r1, #1
   10638:	d001      	beq.n	1063e <util_aa_le32+0x2b6>
   1063a:	4694      	mov	ip, r2
   1063c:	e6d5      	b.n	103ea <util_aa_le32+0x62>
			if (consecutive_bit) {
   1063e:	fa01 f203 	lsl.w	r2, r1, r3
   10642:	e7ca      	b.n	105da <util_aa_le32+0x252>
   10644:	8e89bed6 	.word	0x8e89bed6

00010648 <ticker_worker>:
 *
 * @param param Pointer to ticker instance
 *
 */
void ticker_worker(void *param)
{
   10648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1064c:	b08d      	sub	sp, #52	; 0x34
   1064e:	4602      	mov	r2, r0
   10650:	9002      	str	r0, [sp, #8]
	uint32_t ticks_expired;
	uint8_t ticker_id_head;

	/* Defer worker if job running */
	instance->worker_trigger = 1U;
	if (instance->job_guard) {
   10652:	7f80      	ldrb	r0, [r0, #30]
   10654:	9008      	str	r0, [sp, #32]
	instance->worker_trigger = 1U;
   10656:	2301      	movs	r3, #1
   10658:	77d3      	strb	r3, [r2, #31]
	if (instance->job_guard) {
   1065a:	2800      	cmp	r0, #0
   1065c:	f040 80a2 	bne.w	107a4 <ticker_worker+0x15c>
		return;
	}

	/* If no tickers queued (active), do nothing */
	if (instance->ticker_id_head == TICKER_NULL) {
   10660:	7f53      	ldrb	r3, [r2, #29]
   10662:	2bff      	cmp	r3, #255	; 0xff
   10664:	f000 809d 	beq.w	107a2 <ticker_worker+0x15a>
		instance->worker_trigger = 0U;
		return;
	}

	/* Get ticks elapsed since last job execution */
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
   10668:	f00a f9f6 	bl	1aa58 <cntr_cnt_get>
 * @param ticks_now Highest tick count (now)
 * @param ticks_old Tick count to subtract from ticks_now
 */
uint32_t ticker_ticks_diff_get(uint32_t ticks_now, uint32_t ticks_old)
{
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1066c:	9902      	ldr	r1, [sp, #8]
   1066e:	694a      	ldr	r2, [r1, #20]
	if (instance->ticker_id_slot_previous != TICKER_NULL) {
   10670:	7f0b      	ldrb	r3, [r1, #28]
	ticker_id_head = instance->ticker_id_head;
   10672:	f891 b01d 	ldrb.w	fp, [r1, #29]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   10676:	1a80      	subs	r0, r0, r2
	if (instance->ticker_id_slot_previous != TICKER_NULL) {
   10678:	2bff      	cmp	r3, #255	; 0xff
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1067a:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
	if (instance->ticker_id_slot_previous != TICKER_NULL) {
   1067e:	f000 8120 	beq.w	108c2 <ticker_worker+0x27a>
		if (instance->ticks_slot_previous > ticks_elapsed) {
   10682:	698b      	ldr	r3, [r1, #24]
	uint8_t slot_reserved = 0;
   10684:	42bb      	cmp	r3, r7
   10686:	bf94      	ite	ls
   10688:	2300      	movls	r3, #0
   1068a:	2301      	movhi	r3, #1
   1068c:	9304      	str	r3, [sp, #16]
	node = &instance->nodes[0];
   1068e:	9b02      	ldr	r3, [sp, #8]
	while (ticker_id_head != TICKER_NULL) {
   10690:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
	node = &instance->nodes[0];
   10694:	f8d3 8000 	ldr.w	r8, [r3]
	ticks_expired = 0U;
   10698:	f04f 0300 	mov.w	r3, #0
	while (ticker_id_head != TICKER_NULL) {
   1069c:	f000 8114 	beq.w	108c8 <ticker_worker+0x280>
			must_expire_skip = 1U;
   106a0:	469a      	mov	sl, r3
		ticker = &node[ticker_id_head];
   106a2:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
   106a6:	eb08 140b 	add.w	r4, r8, fp, lsl #4
   106aa:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
		ticks_to_expire = ticker->ticks_to_expire;
   106ae:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
   106b0:	42bb      	cmp	r3, r7
   106b2:	d853      	bhi.n	1075c <ticker_worker+0x114>
		if (ticker->ticks_slot != 0U &&
   106b4:	f8d4 c018 	ldr.w	ip, [r4, #24]
		ticker_id_head = ticker->next;
   106b8:	f818 b00b 	ldrb.w	fp, [r8, fp]
		ticks_elapsed -= ticks_to_expire;
   106bc:	1aff      	subs	r7, r7, r3
		ticks_expired += ticks_to_expire;
   106be:	449a      	add	sl, r3
		if (ticker->ticks_slot != 0U &&
   106c0:	f1bc 0f00 	cmp.w	ip, #0
   106c4:	d076      	beq.n	107b4 <ticker_worker+0x16c>
   106c6:	9b04      	ldr	r3, [sp, #16]
   106c8:	2b00      	cmp	r3, #0
   106ca:	d079      	beq.n	107c0 <ticker_worker+0x178>
   106cc:	8be3      	ldrh	r3, [r4, #30]
   106ce:	9303      	str	r3, [sp, #12]
			struct ticker_ext *ext_data = ticker->ext_data;
   106d0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
			if (ext_data &&
   106d2:	b153      	cbz	r3, 106ea <ticker_worker+0xa2>
   106d4:	681a      	ldr	r2, [r3, #0]
   106d6:	b132      	cbz	r2, 106e6 <ticker_worker+0x9e>
			    ext_data->ticks_slot_window != 0U &&
   106d8:	7a1a      	ldrb	r2, [r3, #8]
   106da:	b922      	cbnz	r2, 106e6 <ticker_worker+0x9e>
			    TICKER_RESCHEDULE_STATE_NONE &&
   106dc:	8ba2      	ldrh	r2, [r4, #28]
   106de:	9903      	ldr	r1, [sp, #12]
   106e0:	428a      	cmp	r2, r1
   106e2:	f240 80ea 	bls.w	108ba <ticker_worker+0x272>
				ext_data->reschedule_state =
   106e6:	2200      	movs	r2, #0
   106e8:	721a      	strb	r2, [r3, #8]
			ticker->lazy_current++;
   106ea:	9a03      	ldr	r2, [sp, #12]
			if ((ticker->must_expire == 0U) ||
   106ec:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
			ticker->lazy_current++;
   106f0:	3201      	adds	r2, #1
   106f2:	b292      	uxth	r2, r2
   106f4:	83e2      	strh	r2, [r4, #30]
			if ((ticker->must_expire == 0U) ||
   106f6:	2900      	cmp	r1, #0
   106f8:	d02d      	beq.n	10756 <ticker_worker+0x10e>
   106fa:	8ba1      	ldrh	r1, [r4, #28]
   106fc:	4291      	cmp	r1, r2
   106fe:	d22a      	bcs.n	10756 <ticker_worker+0x10e>
			    (ticker->lazy_periodic >= ticker->lazy_current) ||
   10700:	2b00      	cmp	r3, #0
   10702:	f000 80d8 	beq.w	108b6 <ticker_worker+0x26e>
			    TICKER_RESCHEDULE_PENDING(ticker)) {
   10706:	7a1a      	ldrb	r2, [r3, #8]
   10708:	2a01      	cmp	r2, #1
   1070a:	d024      	beq.n	10756 <ticker_worker+0x10e>
			must_expire_skip = 1U;
   1070c:	2501      	movs	r5, #1
			ticker->ext_data->ticks_drift = 0U;
   1070e:	2200      	movs	r2, #0
   10710:	605a      	str	r2, [r3, #4]
			ticker->ext_data->reschedule_state =
   10712:	721a      	strb	r2, [r3, #8]
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
   10714:	78a2      	ldrb	r2, [r4, #2]
   10716:	7863      	ldrb	r3, [r4, #1]
   10718:	1a9b      	subs	r3, r3, r2
   1071a:	b2db      	uxtb	r3, r3
   1071c:	2b01      	cmp	r3, #1
   1071e:	d11a      	bne.n	10756 <ticker_worker+0x10e>
		if (ticker->timeout_func) {
   10720:	68e6      	ldr	r6, [r4, #12]
		ticker->ack--;
   10722:	3a01      	subs	r2, #1
   10724:	70a2      	strb	r2, [r4, #2]
		if (ticker->timeout_func) {
   10726:	b1b6      	cbz	r6, 10756 <ticker_worker+0x10e>
					   ticks_expired -
   10728:	9b02      	ldr	r3, [sp, #8]
   1072a:	6962      	ldr	r2, [r4, #20]
   1072c:	6958      	ldr	r0, [r3, #20]
			ticker->timeout_func(ticks_at_expire,
   1072e:	6a61      	ldr	r1, [r4, #36]	; 0x24
   10730:	6923      	ldr	r3, [r4, #16]
					   ticks_expired -
   10732:	ebaa 0202 	sub.w	r2, sl, r2
   10736:	4410      	add	r0, r2
			ticks_at_expire = (instance->ticks_current +
   10738:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
   1073c:	2d00      	cmp	r5, #0
   1073e:	f040 80ad 	bne.w	1089c <ticker_worker+0x254>
   10742:	8be2      	ldrh	r2, [r4, #30]
   10744:	47b0      	blx	r6
				if (ticker->ticks_slot != 0U) {
   10746:	69a3      	ldr	r3, [r4, #24]
				ticker->lazy_current = 0U;
   10748:	83e5      	strh	r5, [r4, #30]
					slot_reserved = 1U;
   1074a:	2b00      	cmp	r3, #0
   1074c:	9b04      	ldr	r3, [sp, #16]
				ticker->force = 0U;
   1074e:	70e5      	strb	r5, [r4, #3]
					slot_reserved = 1U;
   10750:	bf18      	it	ne
   10752:	2301      	movne	r3, #1
   10754:	9304      	str	r3, [sp, #16]
	while (ticker_id_head != TICKER_NULL) {
   10756:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   1075a:	d1a2      	bne.n	106a2 <ticker_worker+0x5a>
   1075c:	4650      	mov	r0, sl
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
   1075e:	9a02      	ldr	r2, [sp, #8]
   10760:	7ad3      	ldrb	r3, [r2, #11]
   10762:	7a92      	ldrb	r2, [r2, #10]
   10764:	429a      	cmp	r2, r3
   10766:	d10c      	bne.n	10782 <ticker_worker+0x13a>
	uint8_t idx = *ticks_elapsed_index + 1;
   10768:	3201      	adds	r2, #1
   1076a:	b2d2      	uxtb	r2, r2
	if (idx == DOUBLE_BUFFER_SIZE) {
   1076c:	2a02      	cmp	r2, #2
   1076e:	bf18      	it	ne
   10770:	4613      	movne	r3, r2
	*ticks_elapsed_index = idx;
   10772:	9a02      	ldr	r2, [sp, #8]
   10774:	bf18      	it	ne
   10776:	9308      	strne	r3, [sp, #32]
   10778:	4611      	mov	r1, r2
   1077a:	9a08      	ldr	r2, [sp, #32]
   1077c:	72ca      	strb	r2, [r1, #11]
   1077e:	bf08      	it	eq
   10780:	2300      	moveq	r3, #0
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   10782:	9902      	ldr	r1, [sp, #8]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   10784:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   10786:	eb01 0383 	add.w	r3, r1, r3, lsl #2
	instance->worker_trigger = 0U;
   1078a:	2200      	movs	r2, #0
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   1078c:	60d8      	str	r0, [r3, #12]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   1078e:	46a4      	mov	ip, r4
	instance->worker_trigger = 0U;
   10790:	77ca      	strb	r2, [r1, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   10792:	460b      	mov	r3, r1
   10794:	2201      	movs	r2, #1
   10796:	2104      	movs	r1, #4
   10798:	2003      	movs	r0, #3
}
   1079a:	b00d      	add	sp, #52	; 0x34
   1079c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   107a0:	4760      	bx	ip
		instance->worker_trigger = 0U;
   107a2:	77d0      	strb	r0, [r2, #31]
}
   107a4:	b00d      	add	sp, #52	; 0x34
   107a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   107aa:	e9dd 7a09 	ldrd	r7, sl, [sp, #36]	; 0x24
   107ae:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   107b2:	464c      	mov	r4, r9
		if (ticker->ext_data) {
   107b4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   107b6:	b10b      	cbz	r3, 107bc <ticker_worker+0x174>
   107b8:	2500      	movs	r5, #0
   107ba:	e7a8      	b.n	1070e <ticker_worker+0xc6>
   107bc:	461d      	mov	r5, r3
   107be:	e7a9      	b.n	10714 <ticker_worker+0xcc>
	if ((ticker->priority != TICKER_PRIORITY_CRITICAL) &&
   107c0:	f994 302d 	ldrsb.w	r3, [r4, #45]	; 0x2d
   107c4:	9305      	str	r3, [sp, #20]
   107c6:	3380      	adds	r3, #128	; 0x80
   107c8:	d0f4      	beq.n	107b4 <ticker_worker+0x16c>
   107ca:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   107ce:	d0f1      	beq.n	107b4 <ticker_worker+0x16c>
		int32_t lazy_current = ticker->lazy_current;
   107d0:	8be3      	ldrh	r3, [r4, #30]
		if (lazy_current >= ticker->lazy_periodic) {
   107d2:	8ba2      	ldrh	r2, [r4, #28]
		int32_t lazy_current = ticker->lazy_current;
   107d4:	9303      	str	r3, [sp, #12]
		if (lazy_current >= ticker->lazy_periodic) {
   107d6:	4293      	cmp	r3, r2
			lazy_current -= ticker->lazy_periodic;
   107d8:	bf28      	it	cs
   107da:	1a9b      	subcs	r3, r3, r2
				(lazy_current - ticker->priority);
   107dc:	9905      	ldr	r1, [sp, #20]
		uint32_t current_age = ticker->ticks_periodic +
   107de:	6862      	ldr	r2, [r4, #4]
		uint32_t acc_ticks_to_expire = 0U;
   107e0:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
				(lazy_current - ticker->priority);
   107e4:	1a59      	subs	r1, r3, r1
		uint32_t current_age = ticker->ticks_periodic +
   107e6:	fb03 2302 	mla	r3, r3, r2, r2
   107ea:	9306      	str	r3, [sp, #24]
		uint32_t acc_ticks_to_expire = 0U;
   107ec:	e9cd 7a09 	strd	r7, sl, [sp, #36]	; 0x24
				(lazy_current - ticker->priority);
   107f0:	9107      	str	r1, [sp, #28]
		uint32_t current_age = ticker->ticks_periodic +
   107f2:	465b      	mov	r3, fp
		uint32_t acc_ticks_to_expire = 0U;
   107f4:	2000      	movs	r0, #0
   107f6:	46a1      	mov	r9, r4
   107f8:	9201      	str	r2, [sp, #4]
   107fa:	e02b      	b.n	10854 <ticker_worker+0x20c>
				(ticker->ticks_periodic == 0U) ||
   107fc:	9c01      	ldr	r4, [sp, #4]
					  0U :
   107fe:	ebaa 0e0e 	sub.w	lr, sl, lr
				(ticker->ticks_periodic == 0U) ||
   10802:	2c00      	cmp	r4, #0
   10804:	d045      	beq.n	10892 <ticker_worker+0x24a>
   10806:	9c06      	ldr	r4, [sp, #24]
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
   10808:	fb0a ee06 	mla	lr, sl, r6, lr
				(ticker->ticks_periodic == 0U) ||
   1080c:	4574      	cmp	r4, lr
   1080e:	bf8c      	ite	hi
   10810:	f04f 0e01 	movhi.w	lr, #1
   10814:	f04f 0e00 	movls.w	lr, #0
					(ticker->ticks_periodic != 0U) &&
   10818:	bf34      	ite	cc
   1081a:	f04f 0a01 	movcc.w	sl, #1
   1081e:	f04f 0a00 	movcs.w	sl, #0
			if (!lazy_next_periodic_skip &&
   10822:	42a9      	cmp	r1, r5
			uint8_t next_force = (ticker_next->force > ticker->force);
   10824:	f892 b003 	ldrb.w	fp, [r2, #3]
   10828:	f899 2003 	ldrb.w	r2, [r9, #3]
			if (!lazy_next_periodic_skip &&
   1082c:	d30e      	bcc.n	1084c <ticker_worker+0x204>
   1082e:	4593      	cmp	fp, r2
   10830:	d83b      	bhi.n	108aa <ticker_worker+0x262>
			    (next_force ||
   10832:	f117 0f80 	cmn.w	r7, #128	; 0x80
   10836:	d038      	beq.n	108aa <ticker_worker+0x262>
			     next_is_critical ||
   10838:	9a07      	ldr	r2, [sp, #28]
				(lazy_next - ticker_next->priority) >
   1083a:	1bf6      	subs	r6, r6, r7
			     next_is_critical ||
   1083c:	4296      	cmp	r6, r2
   1083e:	dd02      	ble.n	10846 <ticker_worker+0x1fe>
			     (next_has_priority && !current_is_older) ||
   10840:	f1be 0f00 	cmp.w	lr, #0
   10844:	d031      	beq.n	108aa <ticker_worker+0x262>
   10846:	9a05      	ldr	r2, [sp, #20]
   10848:	42ba      	cmp	r2, r7
   1084a:	d02b      	beq.n	108a4 <ticker_worker+0x25c>
			id_head = ticker_next->next;
   1084c:	f818 3003 	ldrb.w	r3, [r8, r3]
		while (id_head != TICKER_NULL) {
   10850:	2bff      	cmp	r3, #255	; 0xff
   10852:	d0aa      	beq.n	107aa <ticker_worker+0x162>
			struct ticker_node *ticker_next = &nodes[id_head];
   10854:	b21b      	sxth	r3, r3
   10856:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1085a:	eb08 1203 	add.w	r2, r8, r3, lsl #4
   1085e:	011b      	lsls	r3, r3, #4
			acc_ticks_to_expire += ticker_next->ticks_to_expire;
   10860:	f8d2 e008 	ldr.w	lr, [r2, #8]
   10864:	4470      	add	r0, lr
			if (acc_ticks_to_expire > ticker->ticks_slot) {
   10866:	4584      	cmp	ip, r0
   10868:	d39f      	bcc.n	107aa <ticker_worker+0x162>
			if (ticker_next->ticks_slot == 0U) {
   1086a:	6991      	ldr	r1, [r2, #24]
   1086c:	2900      	cmp	r1, #0
   1086e:	d0ed      	beq.n	1084c <ticker_worker+0x204>
			int32_t lazy_next = ticker_next->lazy_current;
   10870:	8bd1      	ldrh	r1, [r2, #30]
				ticker_next->lazy_periodic > lazy_next;
   10872:	8b95      	ldrh	r5, [r2, #28]
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
   10874:	f8d2 a004 	ldr.w	sl, [r2, #4]
				ticker_next->priority;
   10878:	f992 702d 	ldrsb.w	r7, [r2, #45]	; 0x2d
			if (!lazy_next_periodic_skip) {
   1087c:	42a9      	cmp	r1, r5
			int32_t lazy_next = ticker_next->lazy_current;
   1087e:	460e      	mov	r6, r1
				lazy_next -= ticker_next->lazy_periodic;
   10880:	bf28      	it	cs
   10882:	1b4e      	subcs	r6, r1, r5
					  0U :
   10884:	f1ba 0f00 	cmp.w	sl, #0
   10888:	d1b8      	bne.n	107fc <ticker_worker+0x1b4>
				(ticker->ticks_periodic == 0U) ||
   1088a:	9c01      	ldr	r4, [sp, #4]
					  0U :
   1088c:	46d6      	mov	lr, sl
				(ticker->ticks_periodic == 0U) ||
   1088e:	2c00      	cmp	r4, #0
   10890:	d1b9      	bne.n	10806 <ticker_worker+0x1be>
					(ticker->ticks_periodic != 0U) &&
   10892:	f8dd a004 	ldr.w	sl, [sp, #4]
				(ticker->ticks_periodic == 0U) ||
   10896:	f04f 0e01 	mov.w	lr, #1
   1089a:	e7c2      	b.n	10822 <ticker_worker+0x1da>
			ticker->timeout_func(ticks_at_expire,
   1089c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   108a0:	47b0      	blx	r6
			if (must_expire_skip == 0U) {
   108a2:	e758      	b.n	10756 <ticker_worker+0x10e>
			     (equal_priority && next_is_older))) {
   108a4:	f1ba 0f00 	cmp.w	sl, #0
   108a8:	d0d0      	beq.n	1084c <ticker_worker+0x204>
   108aa:	e9dd 7a09 	ldrd	r7, sl, [sp, #36]	; 0x24
   108ae:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   108b2:	464c      	mov	r4, r9
   108b4:	e70c      	b.n	106d0 <ticker_worker+0x88>
			must_expire_skip = 1U;
   108b6:	2501      	movs	r5, #1
   108b8:	e72c      	b.n	10714 <ticker_worker+0xcc>
				ext_data->reschedule_state =
   108ba:	f04f 0201 	mov.w	r2, #1
   108be:	721a      	strb	r2, [r3, #8]
   108c0:	e713      	b.n	106ea <ticker_worker+0xa2>
	uint8_t slot_reserved = 0;
   108c2:	9b08      	ldr	r3, [sp, #32]
   108c4:	9304      	str	r3, [sp, #16]
   108c6:	e6e2      	b.n	1068e <ticker_worker+0x46>
	ticks_expired = 0U;
   108c8:	4618      	mov	r0, r3
   108ca:	e748      	b.n	1075e <ticker_worker+0x116>

000108cc <ticker_job>:
	if (instance->worker_trigger) {
   108cc:	7fc2      	ldrb	r2, [r0, #31]
   108ce:	2a00      	cmp	r2, #0
   108d0:	f040 862f 	bne.w	11532 <ticker_job+0xc66>
{
   108d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   108d8:	7a83      	ldrb	r3, [r0, #10]
   108da:	7ac1      	ldrb	r1, [r0, #11]
{
   108dc:	b08f      	sub	sp, #60	; 0x3c
   108de:	4683      	mov	fp, r0
	ticks_previous = instance->ticks_current;
   108e0:	6940      	ldr	r0, [r0, #20]
   108e2:	9005      	str	r0, [sp, #20]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   108e4:	4299      	cmp	r1, r3
	instance->job_guard = 1U;
   108e6:	f04f 0001 	mov.w	r0, #1
   108ea:	f88b 001e 	strb.w	r0, [fp, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   108ee:	f000 8096 	beq.w	10a1e <ticker_job+0x152>
	uint8_t idx = *ticks_elapsed_index + 1;
   108f2:	4403      	add	r3, r0
   108f4:	b2db      	uxtb	r3, r3
	if (idx == DOUBLE_BUFFER_SIZE) {
   108f6:	2b02      	cmp	r3, #2
		idx = 0U;
   108f8:	bf08      	it	eq
   108fa:	4613      	moveq	r3, r2
		ticks_elapsed =
   108fc:	eb0b 0283 	add.w	r2, fp, r3, lsl #2
	*ticks_elapsed_index = idx;
   10900:	f88b 300a 	strb.w	r3, [fp, #10]
		ticks_elapsed =
   10904:	68d3      	ldr	r3, [r2, #12]
		instance->ticks_current += ticks_elapsed;
   10906:	9a05      	ldr	r2, [sp, #20]
		ticks_elapsed =
   10908:	9302      	str	r3, [sp, #8]
		instance->ticks_current += ticks_elapsed;
   1090a:	18d3      	adds	r3, r2, r3
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
   1090c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   10910:	f8cb 3014 	str.w	r3, [fp, #20]
		flag_elapsed = 1U;
   10914:	2301      	movs	r3, #1
   10916:	930d      	str	r3, [sp, #52]	; 0x34
	count_user = instance->count_user;
   10918:	f89b 3009 	ldrb.w	r3, [fp, #9]
	ticker_id_old_head = instance->ticker_id_head;
   1091c:	f89b 201d 	ldrb.w	r2, [fp, #29]
   10920:	9206      	str	r2, [sp, #24]
	node = &instance->nodes[0];
   10922:	f8db 2000 	ldr.w	r2, [fp]
	users = &instance->users[0];
   10926:	f8db 1004 	ldr.w	r1, [fp, #4]
	count_user = instance->count_user;
   1092a:	9307      	str	r3, [sp, #28]
	node = &instance->nodes[0];
   1092c:	9204      	str	r2, [sp, #16]
	while (count_user--) {
   1092e:	461a      	mov	r2, r3
   10930:	3b01      	subs	r3, #1
	users = &instance->users[0];
   10932:	910c      	str	r1, [sp, #48]	; 0x30
	while (count_user--) {
   10934:	b2db      	uxtb	r3, r3
   10936:	2a00      	cmp	r2, #0
   10938:	f000 8321 	beq.w	10f7e <ticker_job+0x6b2>
   1093c:	eb01 06c3 	add.w	r6, r1, r3, lsl #3
	pending = 0U;
   10940:	2300      	movs	r3, #0
   10942:	9308      	str	r3, [sp, #32]
	insert_head = TICKER_NULL;
   10944:	23ff      	movs	r3, #255	; 0xff
   10946:	9301      	str	r3, [sp, #4]
   10948:	4637      	mov	r7, r6
   1094a:	46d9      	mov	r9, fp
		user_ops = &user->user_op[0];
   1094c:	687b      	ldr	r3, [r7, #4]
   1094e:	9307      	str	r3, [sp, #28]
		while (user->middle != user->last) {
   10950:	f897 c003 	ldrb.w	ip, [r7, #3]
   10954:	78bb      	ldrb	r3, [r7, #2]
   10956:	46ba      	mov	sl, r7
   10958:	9907      	ldr	r1, [sp, #28]
					ticks_used = 0;
   1095a:	4698      	mov	r8, r3
			user_op = &user_ops[user->middle];
   1095c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   10960:	eb03 0282 	add.w	r2, r3, r2, lsl #2
			middle = user->middle + 1;
   10964:	1c58      	adds	r0, r3, #1
		while (user->middle != user->last) {
   10966:	4563      	cmp	r3, ip
			user_op = &user_ops[user->middle];
   10968:	eb01 0582 	add.w	r5, r1, r2, lsl #2
			middle = user->middle + 1;
   1096c:	b2c3      	uxtb	r3, r0
		while (user->middle != user->last) {
   1096e:	f000 8182 	beq.w	10c76 <ticker_job+0x3aa>
			if (middle == user->count_user_op) {
   10972:	f89a 0000 	ldrb.w	r0, [sl]
				middle = 0U;
   10976:	4298      	cmp	r0, r3
   10978:	bf08      	it	eq
   1097a:	2300      	moveq	r3, #0
			user->middle = middle;
   1097c:	f88a 3002 	strb.w	r3, [sl, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
   10980:	f811 2022 	ldrb.w	r2, [r1, r2, lsl #2]
   10984:	2a04      	cmp	r2, #4
   10986:	f240 8174 	bls.w	10c72 <ticker_job+0x3a6>
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
   1098a:	2a07      	cmp	r2, #7
   1098c:	f200 8086 	bhi.w	10a9c <ticker_job+0x1d0>
			ticker = &node[user_op->id];
   10990:	7869      	ldrb	r1, [r5, #1]
   10992:	9c04      	ldr	r4, [sp, #16]
   10994:	eb01 0041 	add.w	r0, r1, r1, lsl #1
   10998:	eb04 1400 	add.w	r4, r4, r0, lsl #4
   1099c:	0100      	lsls	r0, r0, #4
			state = (ticker->req - ticker->ack) & 0xff;
   1099e:	78a7      	ldrb	r7, [r4, #2]
			ticker = &node[user_op->id];
   109a0:	900a      	str	r0, [sp, #40]	; 0x28
			state = (ticker->req - ticker->ack) & 0xff;
   109a2:	7860      	ldrb	r0, [r4, #1]
   109a4:	1bc0      	subs	r0, r0, r7
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
   109a6:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
   109aa:	d077      	beq.n	10a9c <ticker_job+0x1d0>
			    (state == 0U) ||
   109ac:	2a05      	cmp	r2, #5
   109ae:	d065      	beq.n	10a7c <ticker_job+0x1b0>
			if (state == 1U) {
   109b0:	2801      	cmp	r0, #1
   109b2:	d137      	bne.n	10a24 <ticker_job+0x158>
	previous = instance->ticker_id_head;
   109b4:	f899 c01d 	ldrb.w	ip, [r9, #29]
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   109b8:	f8d9 6000 	ldr.w	r6, [r9]
	while (current != TICKER_NULL) {
   109bc:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   109c0:	d017      	beq.n	109f2 <ticker_job+0x126>
		ticker_current = &node[current];
   109c2:	eb0c 004c 	add.w	r0, ip, ip, lsl #1
		if (current == id) {
   109c6:	4561      	cmp	r1, ip
		ticker_current = &node[current];
   109c8:	eb06 1000 	add.w	r0, r6, r0, lsl #4
		if (current == id) {
   109cc:	f000 8090 	beq.w	10af0 <ticker_job+0x224>
	total = 0U;
   109d0:	2300      	movs	r3, #0
   109d2:	e001      	b.n	109d8 <ticker_job+0x10c>
		if (current == id) {
   109d4:	4561      	cmp	r1, ip
   109d6:	d070      	beq.n	10aba <ticker_job+0x1ee>
		total += ticker_current->ticks_to_expire;
   109d8:	46e6      	mov	lr, ip
		current = ticker_current->next;
   109da:	f890 c000 	ldrb.w	ip, [r0]
		total += ticker_current->ticks_to_expire;
   109de:	f8d0 8008 	ldr.w	r8, [r0, #8]
	while (current != TICKER_NULL) {
   109e2:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
		ticker_current = &node[current];
   109e6:	eb0c 004c 	add.w	r0, ip, ip, lsl #1
		total += ticker_current->ticks_to_expire;
   109ea:	4443      	add	r3, r8
		ticker_current = &node[current];
   109ec:	eb06 1000 	add.w	r0, r6, r0, lsl #4
	while (current != TICKER_NULL) {
   109f0:	d1f0      	bne.n	109d4 <ticker_job+0x108>
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   109f2:	2600      	movs	r6, #0
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
   109f4:	2a05      	cmp	r2, #5
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   109f6:	60a6      	str	r6, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
   109f8:	f000 8126 	beq.w	10c48 <ticker_job+0x37c>
		ticker->req = ticker->ack;
   109fc:	7067      	strb	r7, [r4, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
   109fe:	f899 301c 	ldrb.w	r3, [r9, #28]
   10a02:	428b      	cmp	r3, r1
   10a04:	d022      	beq.n	10a4c <ticker_job+0x180>
	if (user_op->fp_op_func) {
   10a06:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   10a08:	2000      	movs	r0, #0
   10a0a:	7028      	strb	r0, [r5, #0]
	user_op->status = status;
   10a0c:	62a8      	str	r0, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
   10a0e:	b10b      	cbz	r3, 10a14 <ticker_job+0x148>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   10a10:	6b29      	ldr	r1, [r5, #48]	; 0x30
   10a12:	4798      	blx	r3
   10a14:	f89a c003 	ldrb.w	ip, [sl, #3]
   10a18:	f89a 3002 	ldrb.w	r3, [sl, #2]
   10a1c:	e79c      	b.n	10958 <ticker_job+0x8c>
		flag_elapsed = 0U;
   10a1e:	920d      	str	r2, [sp, #52]	; 0x34
		ticks_elapsed = 0U;
   10a20:	9202      	str	r2, [sp, #8]
   10a22:	e779      	b.n	10918 <ticker_job+0x4c>
				instance->sched_cb(TICKER_CALL_ID_JOB,
   10a24:	2104      	movs	r1, #4
   10a26:	464b      	mov	r3, r9
   10a28:	2201      	movs	r2, #1
   10a2a:	f8d9 4024 	ldr.w	r4, [r9, #36]	; 0x24
   10a2e:	4608      	mov	r0, r1
   10a30:	47a0      	blx	r4
	while (count_user--) {
   10a32:	9a0c      	ldr	r2, [sp, #48]	; 0x30
				user->middle = prev;
   10a34:	f88a 8002 	strb.w	r8, [sl, #2]
   10a38:	4657      	mov	r7, sl
				pending = 1U;
   10a3a:	2301      	movs	r3, #1
	while (count_user--) {
   10a3c:	42ba      	cmp	r2, r7
				pending = 1U;
   10a3e:	9308      	str	r3, [sp, #32]
   10a40:	f1a7 0308 	sub.w	r3, r7, #8
	while (count_user--) {
   10a44:	f000 811e 	beq.w	10c84 <ticker_job+0x3b8>
   10a48:	461f      	mov	r7, r3
   10a4a:	e77f      	b.n	1094c <ticker_job+0x80>
			instance->ticker_id_slot_previous = TICKER_NULL;
   10a4c:	23ff      	movs	r3, #255	; 0xff
			if (user_op->op == TICKER_USER_OP_TYPE_STOP_ABS) {
   10a4e:	2a07      	cmp	r2, #7
			instance->ticker_id_slot_previous = TICKER_NULL;
   10a50:	f889 301c 	strb.w	r3, [r9, #28]
			if (user_op->op == TICKER_USER_OP_TYPE_STOP_ABS) {
   10a54:	f040 81dd 	bne.w	10e12 <ticker_job+0x546>
				ticks_at_stop =
   10a58:	6868      	ldr	r0, [r5, #4]
			ticks_current = instance->ticks_current;
   10a5a:	f8d9 3014 	ldr.w	r3, [r9, #20]
			if (!((ticks_at_stop - ticks_current) &
   10a5e:	1ac2      	subs	r2, r0, r3
   10a60:	0214      	lsls	r4, r2, #8
   10a62:	f100 81cd 	bmi.w	10e00 <ticker_job+0x534>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   10a66:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
				ticks_used = ticks_elapsed +
   10a6a:	9a02      	ldr	r2, [sp, #8]
   10a6c:	4413      	add	r3, r2
			if (instance->ticks_slot_previous > ticks_used) {
   10a6e:	f8d9 2018 	ldr.w	r2, [r9, #24]
   10a72:	429a      	cmp	r2, r3
				instance->ticks_slot_previous = ticks_used;
   10a74:	bf88      	it	hi
   10a76:	f8c9 3018 	strhi.w	r3, [r9, #24]
   10a7a:	e7c4      	b.n	10a06 <ticker_job+0x13a>
			    ((user_op->op == TICKER_USER_OP_TYPE_UPDATE) &&
   10a7c:	686e      	ldr	r6, [r5, #4]
   10a7e:	2e00      	cmp	r6, #0
   10a80:	d196      	bne.n	109b0 <ticker_job+0xe4>
			     (user_op->params.update.ticks_drift_plus == 0U) &&
   10a82:	68ae      	ldr	r6, [r5, #8]
   10a84:	2e00      	cmp	r6, #0
   10a86:	d193      	bne.n	109b0 <ticker_job+0xe4>
			     (user_op->params.update.ticks_drift_minus == 0U) &&
   10a88:	68ee      	ldr	r6, [r5, #12]
   10a8a:	2e00      	cmp	r6, #0
   10a8c:	d190      	bne.n	109b0 <ticker_job+0xe4>
			     (user_op->params.update.ticks_slot_plus == 0U) &&
   10a8e:	692e      	ldr	r6, [r5, #16]
   10a90:	2e00      	cmp	r6, #0
   10a92:	d18d      	bne.n	109b0 <ticker_job+0xe4>
			     (user_op->params.update.lazy == 0U) &&
   10a94:	696e      	ldr	r6, [r5, #20]
   10a96:	f036 467f 	bics.w	r6, r6, #4278190080	; 0xff000000
   10a9a:	d189      	bne.n	109b0 <ticker_job+0xe4>
	if (user_op->fp_op_func) {
   10a9c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   10a9e:	2100      	movs	r1, #0
	user_op->status = status;
   10aa0:	2001      	movs	r0, #1
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   10aa2:	7029      	strb	r1, [r5, #0]
	user_op->status = status;
   10aa4:	62a8      	str	r0, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
   10aa6:	2a00      	cmp	r2, #0
   10aa8:	f43f af56 	beq.w	10958 <ticker_job+0x8c>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   10aac:	6b29      	ldr	r1, [r5, #48]	; 0x30
   10aae:	4790      	blx	r2
   10ab0:	f89a c003 	ldrb.w	ip, [sl, #3]
   10ab4:	f89a 3002 	ldrb.w	r3, [sl, #2]
   10ab8:	e74e      	b.n	10958 <ticker_job+0x8c>
	if (previous == current) {
   10aba:	eb0e 074e 	add.w	r7, lr, lr, lsl #1
   10abe:	4571      	cmp	r1, lr
   10ac0:	eb06 1707 	add.w	r7, r6, r7, lsl #4
   10ac4:	d016      	beq.n	10af4 <ticker_job+0x228>
	node[previous].next = ticker_current->next;
   10ac6:	7801      	ldrb	r1, [r0, #0]
	timeout = ticker_current->ticks_to_expire;
   10ac8:	f8d0 c008 	ldr.w	ip, [r0, #8]
	node[previous].next = ticker_current->next;
   10acc:	7039      	strb	r1, [r7, #0]
	if (ticker_current->next != TICKER_NULL) {
   10ace:	29ff      	cmp	r1, #255	; 0xff
   10ad0:	d006      	beq.n	10ae0 <ticker_job+0x214>
		node[ticker_current->next].ticks_to_expire += timeout;
   10ad2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   10ad6:	eb06 1101 	add.w	r1, r6, r1, lsl #4
   10ada:	6888      	ldr	r0, [r1, #8]
   10adc:	4460      	add	r0, ip
   10ade:	6088      	str	r0, [r1, #8]
	return (total + timeout);
   10ae0:	eb0c 0603 	add.w	r6, ip, r3
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
   10ae4:	2a05      	cmp	r2, #5
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   10ae6:	60a6      	str	r6, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
   10ae8:	d009      	beq.n	10afe <ticker_job+0x232>
   10aea:	78a7      	ldrb	r7, [r4, #2]
   10aec:	7869      	ldrb	r1, [r5, #1]
   10aee:	e785      	b.n	109fc <ticker_job+0x130>
		if (current == id) {
   10af0:	4607      	mov	r7, r0
	total = 0U;
   10af2:	2300      	movs	r3, #0
		instance->ticker_id_head = ticker_current->next;
   10af4:	7802      	ldrb	r2, [r0, #0]
   10af6:	f889 201d 	strb.w	r2, [r9, #29]
   10afa:	782a      	ldrb	r2, [r5, #0]
   10afc:	e7e3      	b.n	10ac6 <ticker_job+0x1fa>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
   10afe:	f8d9 7014 	ldr.w	r7, [r9, #20]
   10b02:	9703      	str	r7, [sp, #12]
	ticks_now = cntr_cnt_get();
   10b04:	f009 ffa8 	bl	1aa58 <cntr_cnt_get>
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   10b08:	9b02      	ldr	r3, [sp, #8]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   10b0a:	eba0 0c07 	sub.w	ip, r0, r7
   10b0e:	f02c 477f 	bic.w	r7, ip, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   10b12:	443b      	add	r3, r7
	if (ticks_to_expire > ticks_elapsed) {
   10b14:	429e      	cmp	r6, r3
	ticks_now = cntr_cnt_get();
   10b16:	4680      	mov	r8, r0
	if (ticks_to_expire > ticks_elapsed) {
   10b18:	f240 80a2 	bls.w	10c60 <ticker_job+0x394>
		ticks_to_expire -= ticks_elapsed;
   10b1c:	6962      	ldr	r2, [r4, #20]
   10b1e:	1af3      	subs	r3, r6, r3
	if ((ticker->ticks_periodic != 0U) &&
   10b20:	6866      	ldr	r6, [r4, #4]
   10b22:	2e00      	cmp	r6, #0
   10b24:	d053      	beq.n	10bce <ticker_job+0x302>
	    (user_op->params.update.lazy != 0U)) {
   10b26:	8aa8      	ldrh	r0, [r5, #20]
	if ((ticker->ticks_periodic != 0U) &&
   10b28:	2800      	cmp	r0, #0
   10b2a:	d050      	beq.n	10bce <ticker_job+0x302>
		user_op->params.update.lazy--;
   10b2c:	3801      	subs	r0, #1
   10b2e:	b280      	uxth	r0, r0
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   10b30:	429e      	cmp	r6, r3
   10b32:	8be1      	ldrh	r1, [r4, #30]
		user_op->params.update.lazy--;
   10b34:	82a8      	strh	r0, [r5, #20]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   10b36:	d225      	bcs.n	10b84 <ticker_job+0x2b8>
   10b38:	f106 0b01 	add.w	fp, r6, #1
   10b3c:	920b      	str	r2, [sp, #44]	; 0x2c
   10b3e:	e011      	b.n	10b64 <ticker_job+0x298>
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
   10b40:	f100 70e8 	add.w	r0, r0, #30408704	; 0x1d00000
   10b44:	f500 30d4 	add.w	r0, r0, #108544	; 0x1a800
   10b48:	f500 70a5 	add.w	r0, r0, #330	; 0x14a
   10b4c:	46de      	mov	lr, fp
	ticker->remainder_current -= ticker->remainder_periodic;
   10b4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
			ticker->lazy_current--;
   10b50:	3901      	subs	r1, #1
			ticks_to_expire -= ticker->ticks_periodic +
   10b52:	eba3 030e 	sub.w	r3, r3, lr
			ticker->lazy_current--;
   10b56:	b289      	uxth	r1, r1
	ticker->remainder_current -= ticker->remainder_periodic;
   10b58:	1a80      	subs	r0, r0, r2
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   10b5a:	429e      	cmp	r6, r3
			ticker->lazy_current--;
   10b5c:	83e1      	strh	r1, [r4, #30]
	ticker->remainder_current -= ticker->remainder_periodic;
   10b5e:	6260      	str	r0, [r4, #36]	; 0x24
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   10b60:	d20e      	bcs.n	10b80 <ticker_job+0x2b4>
   10b62:	8aa8      	ldrh	r0, [r5, #20]
   10b64:	4288      	cmp	r0, r1
   10b66:	f080 81b2 	bcs.w	10ece <ticker_job+0x602>
					   ticker_remainder_dec(ticker);
   10b6a:	e9d4 2008 	ldrd	r2, r0, [r4, #32]
	if ((ticker->remainder_current >= BIT(31)) ||
   10b6e:	f8df e2d0 	ldr.w	lr, [pc, #720]	; 10e40 <ticker_job+0x574>
					   ticker_remainder_dec(ticker);
   10b72:	9209      	str	r2, [sp, #36]	; 0x24
	if ((ticker->remainder_current >= BIT(31)) ||
   10b74:	4ab1      	ldr	r2, [pc, #708]	; (10e3c <ticker_job+0x570>)
   10b76:	4486      	add	lr, r0
   10b78:	4596      	cmp	lr, r2
   10b7a:	d8e1      	bhi.n	10b40 <ticker_job+0x274>
   10b7c:	46b6      	mov	lr, r6
   10b7e:	e7e6      	b.n	10b4e <ticker_job+0x282>
   10b80:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   10b82:	8aa8      	ldrh	r0, [r5, #20]
		while (ticker->lazy_current < user_op->params.update.lazy) {
   10b84:	4288      	cmp	r0, r1
   10b86:	d921      	bls.n	10bcc <ticker_job+0x300>
					   ticker_remainder_inc(ticker);
   10b88:	6a20      	ldr	r0, [r4, #32]
   10b8a:	9009      	str	r0, [sp, #36]	; 0x24
   10b8c:	f106 0e01 	add.w	lr, r6, #1
   10b90:	920b      	str	r2, [sp, #44]	; 0x2c
   10b92:	e007      	b.n	10ba4 <ticker_job+0x2d8>
	ticker->remainder_current += ticker->remainder_periodic;
   10b94:	6260      	str	r0, [r4, #36]	; 0x24
   10b96:	46b3      	mov	fp, r6
		while (ticker->lazy_current < user_op->params.update.lazy) {
   10b98:	8aa8      	ldrh	r0, [r5, #20]
			ticker->lazy_current++;
   10b9a:	3101      	adds	r1, #1
   10b9c:	b289      	uxth	r1, r1
		while (ticker->lazy_current < user_op->params.update.lazy) {
   10b9e:	4281      	cmp	r1, r0
			ticks_to_expire += ticker->ticks_periodic +
   10ba0:	445b      	add	r3, fp
		while (ticker->lazy_current < user_op->params.update.lazy) {
   10ba2:	d211      	bcs.n	10bc8 <ticker_job+0x2fc>
	ticker->remainder_current += ticker->remainder_periodic;
   10ba4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10ba6:	6a60      	ldr	r0, [r4, #36]	; 0x24
	if ((ticker->remainder_current < BIT(31)) &&
   10ba8:	f8df b294 	ldr.w	fp, [pc, #660]	; 10e40 <ticker_job+0x574>
	ticker->remainder_current += ticker->remainder_periodic;
   10bac:	4410      	add	r0, r2
	if ((ticker->remainder_current < BIT(31)) &&
   10bae:	4aa3      	ldr	r2, [pc, #652]	; (10e3c <ticker_job+0x570>)
   10bb0:	4483      	add	fp, r0
   10bb2:	4593      	cmp	fp, r2
   10bb4:	d8ee      	bhi.n	10b94 <ticker_job+0x2c8>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   10bb6:	f1a0 70e8 	sub.w	r0, r0, #30408704	; 0x1d00000
   10bba:	f5a0 30d4 	sub.w	r0, r0, #108544	; 0x1a800
   10bbe:	f5a0 70a5 	sub.w	r0, r0, #330	; 0x14a
   10bc2:	6260      	str	r0, [r4, #36]	; 0x24
		return 1;
   10bc4:	46f3      	mov	fp, lr
   10bc6:	e7e7      	b.n	10b98 <ticker_job+0x2cc>
   10bc8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   10bca:	83e1      	strh	r1, [r4, #30]
		ticker->lazy_periodic = user_op->params.update.lazy;
   10bcc:	83a0      	strh	r0, [r4, #28]
				user_op->params.update.ticks_drift_minus;
   10bce:	e9d5 0e01 	ldrd	r0, lr, [r5, #4]
	struct ticker_ext *ext_data = ticker->ext_data;
   10bd2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
	ticker->ticks_to_expire = ticks_to_expire +
   10bd4:	4403      	add	r3, r0
	ticker->ticks_to_expire_minus +=
   10bd6:	4472      	add	r2, lr
	ticker->ticks_to_expire = ticks_to_expire +
   10bd8:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus +=
   10bda:	6162      	str	r2, [r4, #20]
	if (ext_data && ext_data->ticks_slot_window != 0U) {
   10bdc:	b136      	cbz	r6, 10bec <ticker_job+0x320>
   10bde:	6831      	ldr	r1, [r6, #0]
   10be0:	b121      	cbz	r1, 10bec <ticker_job+0x320>
			user_op->params.update.ticks_drift_plus -
   10be2:	eba0 000e 	sub.w	r0, r0, lr
		ext_data->ticks_drift =
   10be6:	6070      	str	r0, [r6, #4]
   10be8:	68a3      	ldr	r3, [r4, #8]
   10bea:	6962      	ldr	r2, [r4, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   10bec:	f41c 0f00 	tst.w	ip, #8388608	; 0x800000
   10bf0:	d121      	bne.n	10c36 <ticker_job+0x36a>
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
   10bf2:	443b      	add	r3, r7
	if (ticks_to_expire > ticks_to_expire_minus) {
   10bf4:	4293      	cmp	r3, r2
   10bf6:	d91b      	bls.n	10c30 <ticker_job+0x364>
		ticks_to_expire -= ticks_to_expire_minus;
   10bf8:	1a9b      	subs	r3, r3, r2
		ticks_to_expire_minus = 0U;
   10bfa:	2200      	movs	r2, #0
	ticker->ticks_to_expire = ticks_to_expire;
   10bfc:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   10bfe:	6162      	str	r2, [r4, #20]
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
   10c00:	68e9      	ldr	r1, [r5, #12]
   10c02:	69a3      	ldr	r3, [r4, #24]
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
   10c04:	692a      	ldr	r2, [r5, #16]
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
   10c06:	440b      	add	r3, r1
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
   10c08:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
   10c0a:	bf88      	it	hi
   10c0c:	1a9b      	subhi	r3, r3, r2
	if (user_op->params.update.force != 0U) {
   10c0e:	7daa      	ldrb	r2, [r5, #22]
		ticker->ticks_slot = 0U;
   10c10:	bf98      	it	ls
   10c12:	2300      	movls	r3, #0
   10c14:	61a3      	str	r3, [r4, #24]
	if (user_op->params.update.force != 0U) {
   10c16:	b102      	cbz	r2, 10c1a <ticker_job+0x34e>
		ticker->force = user_op->params.update.force;
   10c18:	70e2      	strb	r2, [r4, #3]
	ticker->next = *insert_head;
   10c1a:	9b04      	ldr	r3, [sp, #16]
   10c1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   10c1e:	4619      	mov	r1, r3
   10c20:	9b01      	ldr	r3, [sp, #4]
   10c22:	548b      	strb	r3, [r1, r2]
		ticker->req++;
   10c24:	7863      	ldrb	r3, [r4, #1]
	*insert_head = user_op->id;
   10c26:	786a      	ldrb	r2, [r5, #1]
   10c28:	9201      	str	r2, [sp, #4]
		ticker->req++;
   10c2a:	3301      	adds	r3, #1
   10c2c:	7063      	strb	r3, [r4, #1]
   10c2e:	e6ea      	b.n	10a06 <ticker_job+0x13a>
   10c30:	1ad2      	subs	r2, r2, r3
		ticks_to_expire = 0U;
   10c32:	2300      	movs	r3, #0
   10c34:	e7e2      	b.n	10bfc <ticker_job+0x330>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   10c36:	9903      	ldr	r1, [sp, #12]
   10c38:	eba1 0708 	sub.w	r7, r1, r8
   10c3c:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
   10c40:	429f      	cmp	r7, r3
   10c42:	d213      	bcs.n	10c6c <ticker_job+0x3a0>
			ticks_to_expire -= delta_current_start;
   10c44:	1bdb      	subs	r3, r3, r7
   10c46:	e7d5      	b.n	10bf4 <ticker_job+0x328>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
   10c48:	f8d9 7014 	ldr.w	r7, [r9, #20]
   10c4c:	9703      	str	r7, [sp, #12]
	ticks_now = cntr_cnt_get();
   10c4e:	f009 ff03 	bl	1aa58 <cntr_cnt_get>
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   10c52:	9b02      	ldr	r3, [sp, #8]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   10c54:	eba0 0c07 	sub.w	ip, r0, r7
   10c58:	f02c 477f 	bic.w	r7, ip, #4278190080	; 0xff000000
	ticks_now = cntr_cnt_get();
   10c5c:	4680      	mov	r8, r0
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   10c5e:	443b      	add	r3, r7
		ticker->ticks_to_expire_minus += ticks_elapsed -
   10c60:	6961      	ldr	r1, [r4, #20]
   10c62:	440b      	add	r3, r1
   10c64:	1b9a      	subs	r2, r3, r6
   10c66:	6162      	str	r2, [r4, #20]
		ticks_to_expire = 0U;
   10c68:	2300      	movs	r3, #0
   10c6a:	e759      	b.n	10b20 <ticker_job+0x254>
			ticks_to_expire_minus +=
   10c6c:	443a      	add	r2, r7
   10c6e:	1ad2      	subs	r2, r2, r3
	if (ticks_to_expire > ticks_to_expire_minus) {
   10c70:	e7df      	b.n	10c32 <ticker_job+0x366>
   10c72:	4698      	mov	r8, r3
   10c74:	e672      	b.n	1095c <ticker_job+0x90>
	while (count_user--) {
   10c76:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   10c78:	4657      	mov	r7, sl
   10c7a:	42ba      	cmp	r2, r7
   10c7c:	f1a7 0308 	sub.w	r3, r7, #8
   10c80:	f47f aee2 	bne.w	10a48 <ticker_job+0x17c>
   10c84:	f899 701d 	ldrb.w	r7, [r9, #29]
   10c88:	9b06      	ldr	r3, [sp, #24]
   10c8a:	1bdb      	subs	r3, r3, r7
   10c8c:	bf18      	it	ne
   10c8e:	2301      	movne	r3, #1
   10c90:	9307      	str	r3, [sp, #28]
	if (flag_elapsed) {
   10c92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10c94:	46cb      	mov	fp, r9
   10c96:	2b00      	cmp	r3, #0
   10c98:	f040 8179 	bne.w	10f8e <ticker_job+0x6c2>
	count_user = instance->count_user;
   10c9c:	f899 2009 	ldrb.w	r2, [r9, #9]
	node = &instance->nodes[0];
   10ca0:	f8d9 3000 	ldr.w	r3, [r9]
	users = &instance->users[0];
   10ca4:	f8d9 1004 	ldr.w	r1, [r9, #4]
	node = &instance->nodes[0];
   10ca8:	9304      	str	r3, [sp, #16]
	while (count_user--) {
   10caa:	1e53      	subs	r3, r2, #1
	users = &instance->users[0];
   10cac:	9109      	str	r1, [sp, #36]	; 0x24
	while (count_user--) {
   10cae:	b2db      	uxtb	r3, r3
   10cb0:	2a00      	cmp	r2, #0
   10cb2:	f000 8110 	beq.w	10ed6 <ticker_job+0x60a>
   10cb6:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   10cba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10cbc:	9303      	str	r3, [sp, #12]
		user_ops = (void *)&user->user_op[0];
   10cbe:	f8d8 3004 	ldr.w	r3, [r8, #4]
		user_ops_first = user->first;
   10cc2:	f898 6001 	ldrb.w	r6, [r8, #1]
		user_ops = (void *)&user->user_op[0];
   10cc6:	9305      	str	r3, [sp, #20]
		while ((insert_head != TICKER_NULL) ||
   10cc8:	9b01      	ldr	r3, [sp, #4]
   10cca:	2bff      	cmp	r3, #255	; 0xff
   10ccc:	d05e      	beq.n	10d8c <ticker_job+0x4c0>
				ticker = &node[id_insert];
   10cce:	f8dd a004 	ldr.w	sl, [sp, #4]
   10cd2:	9b04      	ldr	r3, [sp, #16]
   10cd4:	fa0f f48a 	sxth.w	r4, sl
   10cd8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   10cdc:	ea4f 1c04 	mov.w	ip, r4, lsl #4
   10ce0:	eb03 1404 	add.w	r4, r3, r4, lsl #4
				insert_head = ticker->next;
   10ce4:	f813 300c 	ldrb.w	r3, [r3, ip]
   10ce8:	9301      	str	r3, [sp, #4]
				user_op = NULL;
   10cea:	2500      	movs	r5, #0
	ticker->next = TICKER_NULL;
   10cec:	22ff      	movs	r2, #255	; 0xff
   10cee:	7022      	strb	r2, [r4, #0]
	(void)ticker_enqueue(instance, id_insert);
   10cf0:	f8db 7000 	ldr.w	r7, [fp]
	current = instance->ticker_id_head;
   10cf4:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticker_new = &node[id];
   10cf8:	eb07 000c 	add.w	r0, r7, ip
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   10cfc:	4293      	cmp	r3, r2
	ticks_to_expire = ticker_new->ticks_to_expire;
   10cfe:	6881      	ldr	r1, [r0, #8]
	previous = TICKER_NULL;
   10d00:	bf18      	it	ne
   10d02:	9202      	strne	r2, [sp, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   10d04:	d111      	bne.n	10d2a <ticker_job+0x45e>
   10d06:	e093      	b.n	10e30 <ticker_job+0x564>
		if (ticks_to_expire == 0 && (ticker_new->lazy_current >
   10d08:	ebb1 010c 	subs.w	r1, r1, ip
   10d0c:	d106      	bne.n	10d1c <ticker_job+0x450>
   10d0e:	f8be e01e 	ldrh.w	lr, [lr, #30]
   10d12:	f8b0 901e 	ldrh.w	r9, [r0, #30]
   10d16:	45f1      	cmp	r9, lr
   10d18:	f200 80d6 	bhi.w	10ec8 <ticker_job+0x5fc>
		current = ticker_current->next;
   10d1c:	f817 c002 	ldrb.w	ip, [r7, r2]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   10d20:	9302      	str	r3, [sp, #8]
   10d22:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   10d26:	d077      	beq.n	10e18 <ticker_job+0x54c>
   10d28:	4663      	mov	r3, ip
		(ticker_current = &node[current])->ticks_to_expire))) {
   10d2a:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
   10d2e:	eb07 1e0c 	add.w	lr, r7, ip, lsl #4
   10d32:	ea4f 120c 	mov.w	r2, ip, lsl #4
		(ticks_to_expire_current =
   10d36:	f8de c008 	ldr.w	ip, [lr, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   10d3a:	458c      	cmp	ip, r1
   10d3c:	d9e4      	bls.n	10d08 <ticker_job+0x43c>
   10d3e:	9a02      	ldr	r2, [sp, #8]
	ticker_new->ticks_to_expire = ticks_to_expire;
   10d40:	6081      	str	r1, [r0, #8]
	if (previous == TICKER_NULL) {
   10d42:	2aff      	cmp	r2, #255	; 0xff
	ticker_new->next = current;
   10d44:	7003      	strb	r3, [r0, #0]
	if (previous == TICKER_NULL) {
   10d46:	d16c      	bne.n	10e22 <ticker_job+0x556>
		instance->ticker_id_head = id;
   10d48:	f88b a01d 	strb.w	sl, [fp, #29]
	if (current != TICKER_NULL) {
   10d4c:	2bff      	cmp	r3, #255	; 0xff
   10d4e:	d006      	beq.n	10d5e <ticker_job+0x492>
		node[current].ticks_to_expire -= ticks_to_expire;
   10d50:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   10d54:	eb07 1703 	add.w	r7, r7, r3, lsl #4
   10d58:	68bb      	ldr	r3, [r7, #8]
   10d5a:	1a59      	subs	r1, r3, r1
   10d5c:	60b9      	str	r1, [r7, #8]
	ticker->req = ticker->ack + 1;
   10d5e:	78a3      	ldrb	r3, [r4, #2]
   10d60:	3301      	adds	r3, #1
   10d62:	7063      	strb	r3, [r4, #1]
			if (user_op) {
   10d64:	2d00      	cmp	r5, #0
   10d66:	d0af      	beq.n	10cc8 <ticker_job+0x3fc>
	if (user_op->fp_op_func) {
   10d68:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   10d6a:	9a03      	ldr	r2, [sp, #12]
   10d6c:	702a      	strb	r2, [r5, #0]
	user_op->status = status;
   10d6e:	62aa      	str	r2, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
   10d70:	b113      	cbz	r3, 10d78 <ticker_job+0x4ac>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   10d72:	6b29      	ldr	r1, [r5, #48]	; 0x30
   10d74:	2000      	movs	r0, #0
   10d76:	4798      	blx	r3
				if ((ticker->ticks_periodic == 0U) &&
   10d78:	6863      	ldr	r3, [r4, #4]
   10d7a:	2b00      	cmp	r3, #0
   10d7c:	d1a4      	bne.n	10cc8 <ticker_job+0x3fc>
					ticker->op_context =
   10d7e:	e9d5 230b 	ldrd	r2, r3, [r5, #44]	; 0x2c
   10d82:	e9c4 2308 	strd	r2, r3, [r4, #32]
		while ((insert_head != TICKER_NULL) ||
   10d86:	9b01      	ldr	r3, [sp, #4]
   10d88:	2bff      	cmp	r3, #255	; 0xff
   10d8a:	d1a0      	bne.n	10cce <ticker_job+0x402>
   10d8c:	f898 3002 	ldrb.w	r3, [r8, #2]
   10d90:	42b3      	cmp	r3, r6
   10d92:	d02e      	beq.n	10df2 <ticker_job+0x526>
   10d94:	9f05      	ldr	r7, [sp, #20]
				if (first == user->count_user_op) {
   10d96:	f898 0000 	ldrb.w	r0, [r8]
				user_op = &user_ops[user_ops_first];
   10d9a:	eb06 0246 	add.w	r2, r6, r6, lsl #1
   10d9e:	eb06 0282 	add.w	r2, r6, r2, lsl #2
				first = user_ops_first + 1;
   10da2:	3601      	adds	r6, #1
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   10da4:	f817 1022 	ldrb.w	r1, [r7, r2, lsl #2]
				first = user_ops_first + 1;
   10da8:	b2f6      	uxtb	r6, r6
					first = 0U;
   10daa:	42b0      	cmp	r0, r6
   10dac:	bf08      	it	eq
   10dae:	2600      	moveq	r6, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   10db0:	2904      	cmp	r1, #4
				user_op = &user_ops[user_ops_first];
   10db2:	eb07 0582 	add.w	r5, r7, r2, lsl #2
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   10db6:	d11a      	bne.n	10dee <ticker_job+0x522>
				id_insert = user_op->id;
   10db8:	f895 a001 	ldrb.w	sl, [r5, #1]
				ticker = &node[id_insert];
   10dbc:	9b04      	ldr	r3, [sp, #16]
   10dbe:	eb0a 0c4a 	add.w	ip, sl, sl, lsl #1
   10dc2:	eb03 140c 	add.w	r4, r3, ip, lsl #4
   10dc6:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
				if (((ticker->req -
   10dca:	7861      	ldrb	r1, [r4, #1]
				      ticker->ack) & 0xff) != 0U) {
   10dcc:	78a3      	ldrb	r3, [r4, #2]
				if (((ticker->req -
   10dce:	1ac9      	subs	r1, r1, r3
   10dd0:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
   10dd4:	d036      	beq.n	10e44 <ticker_job+0x578>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   10dd6:	9b03      	ldr	r3, [sp, #12]
   10dd8:	f807 3022 	strb.w	r3, [r7, r2, lsl #2]
	if (user_op->fp_op_func) {
   10ddc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->status = status;
   10dde:	2201      	movs	r2, #1
   10de0:	62aa      	str	r2, [r5, #40]	; 0x28
		user_op->fp_op_func(user_op->status, user_op->op_context);
   10de2:	4610      	mov	r0, r2
	if (user_op->fp_op_func) {
   10de4:	b10b      	cbz	r3, 10dea <ticker_job+0x51e>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   10de6:	6b29      	ldr	r1, [r5, #48]	; 0x30
   10de8:	4798      	blx	r3
		while ((insert_head != TICKER_NULL) ||
   10dea:	f898 3002 	ldrb.w	r3, [r8, #2]
   10dee:	42b3      	cmp	r3, r6
   10df0:	d1d1      	bne.n	10d96 <ticker_job+0x4ca>
	while (count_user--) {
   10df2:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10df4:	4542      	cmp	r2, r8
   10df6:	f1a8 0308 	sub.w	r3, r8, #8
   10dfa:	d06a      	beq.n	10ed2 <ticker_job+0x606>
   10dfc:	4698      	mov	r8, r3
   10dfe:	e75e      	b.n	10cbe <ticker_job+0x3f2>
				if (ticks_elapsed > ticks_used) {
   10e00:	9a02      	ldr	r2, [sp, #8]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   10e02:	1a1b      	subs	r3, r3, r0
   10e04:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				if (ticks_elapsed > ticks_used) {
   10e08:	429a      	cmp	r2, r3
					ticks_used = ticks_elapsed -
   10e0a:	bf8c      	ite	hi
   10e0c:	1ad3      	subhi	r3, r2, r3
					ticks_used = 0;
   10e0e:	2300      	movls	r3, #0
   10e10:	e62d      	b.n	10a6e <ticker_job+0x1a2>
				ticks_at_stop = cntr_cnt_get();
   10e12:	f009 fe21 	bl	1aa58 <cntr_cnt_get>
   10e16:	e620      	b.n	10a5a <ticker_job+0x18e>
	ticker_new->next = current;
   10e18:	461a      	mov	r2, r3
	ticker_new->ticks_to_expire = ticks_to_expire;
   10e1a:	6081      	str	r1, [r0, #8]
	ticker_new->next = current;
   10e1c:	f880 c000 	strb.w	ip, [r0]
   10e20:	4663      	mov	r3, ip
		node[previous].next = id;
   10e22:	b212      	sxth	r2, r2
   10e24:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   10e28:	0112      	lsls	r2, r2, #4
   10e2a:	f807 a002 	strb.w	sl, [r7, r2]
   10e2e:	e78d      	b.n	10d4c <ticker_job+0x480>
	ticker_new->next = current;
   10e30:	f807 300c 	strb.w	r3, [r7, ip]
		instance->ticker_id_head = id;
   10e34:	f88b a01d 	strb.w	sl, [fp, #29]
	if (current != TICKER_NULL) {
   10e38:	e791      	b.n	10d5e <ticker_job+0x492>
   10e3a:	bf00      	nop
   10e3c:	7f172b59 	.word	0x7f172b59
   10e40:	ff172b5a 	.word	0xff172b5a
	ticker->must_expire = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 1U :
   10e44:	8aaf      	ldrh	r7, [r5, #20]
				ticker_job_op_start(ticker, user_op,
   10e46:	f8db e014 	ldr.w	lr, [fp, #20]
	ticker->must_expire = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 1U :
   10e4a:	6a68      	ldr	r0, [r5, #36]	; 0x24
   10e4c:	f64f 79ff 	movw	r9, #65535	; 0xffff
   10e50:	454f      	cmp	r7, r9
   10e52:	e9d5 2303 	ldrd	r2, r3, [r5, #12]
   10e56:	d02e      	beq.n	10eb6 <ticker_job+0x5ea>
   10e58:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
	ticker->ext_data = start->ext_data;
   10e5c:	62a0      	str	r0, [r4, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
   10e5e:	6062      	str	r2, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
   10e60:	6223      	str	r3, [r4, #32]
	ticker->timeout_func = start->fp_timeout_func;
   10e62:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   10e66:	6868      	ldr	r0, [r5, #4]
	ticker->ticks_slot = start->ticks_slot;
   10e68:	61a2      	str	r2, [r4, #24]
	ticker->context = start->context;
   10e6a:	6a2a      	ldr	r2, [r5, #32]
	ticker->lazy_periodic = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 0U :
   10e6c:	83a7      	strh	r7, [r4, #28]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   10e6e:	eba0 070e 	sub.w	r7, r0, lr
	ticker->context = start->context;
   10e72:	e9c4 3203 	strd	r3, r2, [r4, #12]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   10e76:	023a      	lsls	r2, r7, #8
	ticker->ticks_to_expire = start->ticks_first;
   10e78:	68ab      	ldr	r3, [r5, #8]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   10e7a:	d40c      	bmi.n	10e96 <ticker_job+0x5ca>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   10e7c:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
   10e80:	443b      	add	r3, r7
	if (ticks_to_expire > ticks_to_expire_minus) {
   10e82:	b18b      	cbz	r3, 10ea8 <ticker_job+0x5dc>
	ticker->ticks_to_expire = ticks_to_expire;
   10e84:	60a3      	str	r3, [r4, #8]
	ticker->remainder_current = 0U;
   10e86:	9b03      	ldr	r3, [sp, #12]
   10e88:	6263      	str	r3, [r4, #36]	; 0x24
	ticker->lazy_current = 0U;
   10e8a:	83e3      	strh	r3, [r4, #30]
	ticker->force = 1U;
   10e8c:	f04f 0301 	mov.w	r3, #1
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   10e90:	6161      	str	r1, [r4, #20]
	ticker->force = 1U;
   10e92:	70e3      	strb	r3, [r4, #3]
}
   10e94:	e72a      	b.n	10cec <ticker_job+0x420>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   10e96:	ebae 0200 	sub.w	r2, lr, r0
   10e9a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
   10e9e:	4293      	cmp	r3, r2
   10ea0:	d905      	bls.n	10eae <ticker_job+0x5e2>
			ticks_to_expire -= delta_current_start;
   10ea2:	1a9b      	subs	r3, r3, r2
	if (ticks_to_expire > ticks_to_expire_minus) {
   10ea4:	2b00      	cmp	r3, #0
   10ea6:	d1ed      	bne.n	10e84 <ticker_job+0x5b8>
		ticks_to_expire_minus -= ticks_to_expire;
   10ea8:	4619      	mov	r1, r3
		ticks_to_expire = 0U;
   10eaa:	2300      	movs	r3, #0
   10eac:	e7ea      	b.n	10e84 <ticker_job+0x5b8>
			    (delta_current_start - ticks_to_expire);
   10eae:	1ad3      	subs	r3, r2, r3
		ticks_to_expire_minus -= ticks_to_expire;
   10eb0:	4619      	mov	r1, r3
		ticks_to_expire = 0U;
   10eb2:	2300      	movs	r3, #0
   10eb4:	e7e6      	b.n	10e84 <ticker_job+0x5b8>
	ticker->must_expire = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 1U :
   10eb6:	f04f 0701 	mov.w	r7, #1
   10eba:	f884 702c 	strb.w	r7, [r4, #44]	; 0x2c
	ticker->ext_data = start->ext_data;
   10ebe:	62a0      	str	r0, [r4, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
   10ec0:	6062      	str	r2, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
   10ec2:	6223      	str	r3, [r4, #32]
	ticker->lazy_periodic = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 0U :
   10ec4:	460f      	mov	r7, r1
   10ec6:	e7cc      	b.n	10e62 <ticker_job+0x596>
   10ec8:	9a02      	ldr	r2, [sp, #8]
   10eca:	4661      	mov	r1, ip
   10ecc:	e738      	b.n	10d40 <ticker_job+0x474>
   10ece:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   10ed0:	e658      	b.n	10b84 <ticker_job+0x2b8>
   10ed2:	f89b 701d 	ldrb.w	r7, [fp, #29]
	if (instance->ticker_id_head != ticker_id_old_head) {
   10ed6:	9b06      	ldr	r3, [sp, #24]
   10ed8:	42bb      	cmp	r3, r7
   10eda:	f000 8334 	beq.w	11546 <ticker_job+0xc7a>
	if (!pending) {
   10ede:	9b08      	ldr	r3, [sp, #32]
   10ee0:	2b00      	cmp	r3, #0
   10ee2:	f000 8356 	beq.w	11592 <ticker_job+0xcc6>
	instance->job_guard = 0U;
   10ee6:	2300      	movs	r3, #0
   10ee8:	f89b 701d 	ldrb.w	r7, [fp, #29]
   10eec:	f88b 301e 	strb.w	r3, [fp, #30]
	if (instance->ticker_id_head == TICKER_NULL) {
   10ef0:	2fff      	cmp	r7, #255	; 0xff
   10ef2:	f000 83dc 	beq.w	116ae <ticker_job+0xde2>
	if (ticker_id_old_head == TICKER_NULL) {
   10ef6:	9b06      	ldr	r3, [sp, #24]
   10ef8:	2bff      	cmp	r3, #255	; 0xff
   10efa:	f000 83f6 	beq.w	116ea <ticker_job+0xe1e>
	ticks_to_expire = ticker->ticks_to_expire;
   10efe:	f8db 3000 	ldr.w	r3, [fp]
		LL_ASSERT(i);
   10f02:	f8df 9300 	ldr.w	r9, [pc, #768]	; 11204 <ticker_job+0x938>
   10f06:	f8df 8300 	ldr.w	r8, [pc, #768]	; 11208 <ticker_job+0x93c>
   10f0a:	4ebd      	ldr	r6, [pc, #756]	; (11200 <ticker_job+0x934>)
	ticker = &instance->nodes[instance->ticker_id_head];
   10f0c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
	ticks_to_expire = ticker->ticks_to_expire;
   10f10:	eb03 1307 	add.w	r3, r3, r7, lsl #4
	i = 10U;
   10f14:	250a      	movs	r5, #10
	ticks_to_expire = ticker->ticks_to_expire;
   10f16:	689f      	ldr	r7, [r3, #8]
		ctr = cntr_cnt_get();
   10f18:	f009 fd9e 	bl	1aa58 <cntr_cnt_get>
		cc = instance->ticks_current;
   10f1c:	f8db 3014 	ldr.w	r3, [fp, #20]
		instance->trigger_set_cb(cc);
   10f20:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   10f24:	1ac4      	subs	r4, r0, r3
   10f26:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
   10f2a:	3403      	adds	r4, #3
		cc += MAX(ticks_elapsed, ticks_to_expire);
   10f2c:	42bc      	cmp	r4, r7
   10f2e:	bf2c      	ite	cs
   10f30:	191b      	addcs	r3, r3, r4
   10f32:	19db      	addcc	r3, r3, r7
		cc &= HAL_TICKER_CNTR_MASK;
   10f34:	f023 447f 	bic.w	r4, r3, #4278190080	; 0xff000000
		ctr = cntr_cnt_get();
   10f38:	4682      	mov	sl, r0
		instance->trigger_set_cb(cc);
   10f3a:	4620      	mov	r0, r4
   10f3c:	4790      	blx	r2
		ctr_post = cntr_cnt_get();
   10f3e:	f009 fd8b 	bl	1aa58 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   10f42:	eba0 000a 	sub.w	r0, r0, sl
   10f46:	eba4 040a 	sub.w	r4, r4, sl
   10f4a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   10f4e:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
   10f52:	3003      	adds	r0, #3
		  ticker_ticks_diff_get(cc, ctr));
   10f54:	42a0      	cmp	r0, r4
		i--;
   10f56:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
		  ticker_ticks_diff_get(cc, ctr));
   10f5a:	f240 82ff 	bls.w	1155c <ticker_job+0xc90>
		LL_ASSERT(i);
   10f5e:	2d00      	cmp	r5, #0
   10f60:	d1da      	bne.n	10f18 <ticker_job+0x64c>
   10f62:	f640 0391 	movw	r3, #2193	; 0x891
   10f66:	464a      	mov	r2, r9
   10f68:	4641      	mov	r1, r8
   10f6a:	4630      	mov	r0, r6
   10f6c:	f00c ffed 	bl	1df4a <printk>
   10f70:	4040      	eors	r0, r0
   10f72:	f380 8811 	msr	BASEPRI, r0
   10f76:	f04f 0003 	mov.w	r0, #3
   10f7a:	df02      	svc	2
   10f7c:	e7cc      	b.n	10f18 <ticker_job+0x64c>
	if (flag_elapsed) {
   10f7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10f80:	2b00      	cmp	r3, #0
   10f82:	f000 82f9 	beq.w	11578 <ticker_job+0xcac>
	pending = 0U;
   10f86:	9b07      	ldr	r3, [sp, #28]
   10f88:	9308      	str	r3, [sp, #32]
	insert_head = TICKER_NULL;
   10f8a:	23ff      	movs	r3, #255	; 0xff
   10f8c:	9301      	str	r3, [sp, #4]
	ticks_now = cntr_cnt_get();
   10f8e:	f009 fd63 	bl	1aa58 <cntr_cnt_get>
	node = &instance->nodes[0];
   10f92:	f8db 3000 	ldr.w	r3, [fp]
	while (instance->ticker_id_head != TICKER_NULL) {
   10f96:	f89b 501d 	ldrb.w	r5, [fp, #29]
	node = &instance->nodes[0];
   10f9a:	9303      	str	r3, [sp, #12]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   10f9c:	9b05      	ldr	r3, [sp, #20]
	while (instance->ticker_id_head != TICKER_NULL) {
   10f9e:	2dff      	cmp	r5, #255	; 0xff
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   10fa0:	eba0 0003 	sub.w	r0, r0, r3
   10fa4:	f020 487f 	bic.w	r8, r0, #4278190080	; 0xff000000
	while (instance->ticker_id_head != TICKER_NULL) {
   10fa8:	d054      	beq.n	11054 <ticker_job+0x788>
   10faa:	f8dd a008 	ldr.w	sl, [sp, #8]
	ticks_expired = 0U;
   10fae:	f04f 0900 	mov.w	r9, #0
			instance->ticker_id_slot_previous = TICKER_NULL;
   10fb2:	464b      	mov	r3, r9
   10fb4:	46d1      	mov	r9, sl
   10fb6:	46c2      	mov	sl, r8
   10fb8:	4698      	mov	r8, r3
		ticker = &node[id_expired];
   10fba:	9b03      	ldr	r3, [sp, #12]
   10fbc:	eb05 0445 	add.w	r4, r5, r5, lsl #1
   10fc0:	eb03 1404 	add.w	r4, r3, r4, lsl #4
		ticks_to_expire = ticker->ticks_to_expire;
   10fc4:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
   10fc6:	454b      	cmp	r3, r9
   10fc8:	f200 82dc 	bhi.w	11584 <ticker_job+0xcb8>
		is_must_expire_skip = (ticker->must_expire &&
   10fcc:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
		ticks_elapsed -= ticks_to_expire;
   10fd0:	eba9 0903 	sub.w	r9, r9, r3
		ticks_expired += ticks_to_expire;
   10fd4:	4498      	add	r8, r3
		ticks_latency -= ticks_to_expire;
   10fd6:	ebaa 0a03 	sub.w	sl, sl, r3
		is_must_expire_skip = (ticker->must_expire &&
   10fda:	2900      	cmp	r1, #0
   10fdc:	f000 8138 	beq.w	11250 <ticker_job+0x984>
   10fe0:	8be6      	ldrh	r6, [r4, #30]
   10fe2:	3e00      	subs	r6, #0
   10fe4:	bf18      	it	ne
   10fe6:	2601      	movne	r6, #1
		if (instance->ticks_slot_previous > ticks_to_expire) {
   10fe8:	f8db 2018 	ldr.w	r2, [fp, #24]
   10fec:	4293      	cmp	r3, r2
			instance->ticker_id_slot_previous = TICKER_NULL;
   10fee:	bf25      	ittet	cs
   10ff0:	f04f 33ff 	movcs.w	r3, #4294967295	; 0xffffffff
   10ff4:	f88b 301c 	strbcs.w	r3, [fp, #28]
			instance->ticks_slot_previous -= ticks_to_expire;
   10ff8:	1ad3      	subcc	r3, r2, r3
			instance->ticks_slot_previous = 0U;
   10ffa:	2300      	movcs	r3, #0
		if ((ticker->ticks_slot != 0U) &&
   10ffc:	69a7      	ldr	r7, [r4, #24]
			instance->ticks_slot_previous = 0U;
   10ffe:	f8cb 3018 	str.w	r3, [fp, #24]
   11002:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   11004:	6860      	ldr	r0, [r4, #4]
   11006:	f894 c000 	ldrb.w	ip, [r4]
		if ((ticker->ticks_slot != 0U) &&
   1100a:	b147      	cbz	r7, 1101e <ticker_job+0x752>
		    (((ticker->req - ticker->ack) & 0xff) == 2U) &&
   1100c:	7863      	ldrb	r3, [r4, #1]
   1100e:	f894 e002 	ldrb.w	lr, [r4, #2]
   11012:	eba3 030e 	sub.w	r3, r3, lr
   11016:	b2db      	uxtb	r3, r3
		if ((ticker->ticks_slot != 0U) &&
   11018:	2b02      	cmp	r3, #2
   1101a:	f000 8147 	beq.w	112ac <ticker_job+0x9e0>
		ticker->ticks_to_expire = 0U;
   1101e:	2300      	movs	r3, #0
   11020:	60a3      	str	r3, [r4, #8]
		instance->ticker_id_head = ticker->next;
   11022:	f88b c01d 	strb.w	ip, [fp, #29]
		if ((ticker->ticks_periodic != 0U) ||
   11026:	2800      	cmp	r0, #0
   11028:	f040 80d6 	bne.w	111d8 <ticker_job+0x90c>
   1102c:	b11a      	cbz	r2, 11036 <ticker_job+0x76a>
		    TICKER_RESCHEDULE_PENDING(ticker)) {
   1102e:	7a13      	ldrb	r3, [r2, #8]
   11030:	2b01      	cmp	r3, #1
   11032:	f000 8115 	beq.w	11260 <ticker_job+0x994>
			if ((((ticker->req - ticker->ack) & 0xff) == 1U) &&
   11036:	78a2      	ldrb	r2, [r4, #2]
   11038:	7860      	ldrb	r0, [r4, #1]
   1103a:	1a80      	subs	r0, r0, r2
   1103c:	b2c0      	uxtb	r0, r0
   1103e:	2801      	cmp	r0, #1
   11040:	f000 80c2 	beq.w	111c8 <ticker_job+0x8fc>
			ticker->req = ticker->ack;
   11044:	7062      	strb	r2, [r4, #1]
	while (instance->ticker_id_head != TICKER_NULL) {
   11046:	f89b 501d 	ldrb.w	r5, [fp, #29]
   1104a:	2dff      	cmp	r5, #255	; 0xff
   1104c:	d1b5      	bne.n	10fba <ticker_job+0x6ee>
   1104e:	f8db 3000 	ldr.w	r3, [fp]
   11052:	9303      	str	r3, [sp, #12]
			flag_compare_update = 1U;
   11054:	e9dd 4006 	ldrd	r4, r0, [sp, #24]
	count_user = instance->count_user;
   11058:	f89b 2009 	ldrb.w	r2, [fp, #9]
	users = &instance->users[0];
   1105c:	f8db 1004 	ldr.w	r1, [fp, #4]
   11060:	9109      	str	r1, [sp, #36]	; 0x24
	while (count_user--) {
   11062:	1e53      	subs	r3, r2, #1
			flag_compare_update = 1U;
   11064:	42ac      	cmp	r4, r5
   11066:	bf18      	it	ne
   11068:	2001      	movne	r0, #1
   1106a:	9007      	str	r0, [sp, #28]
	while (count_user--) {
   1106c:	b2db      	uxtb	r3, r3
   1106e:	2a00      	cmp	r2, #0
   11070:	f000 818a 	beq.w	11388 <ticker_job+0xabc>
   11074:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
		user_ops = (void *)&user->user_op[0];
   11078:	f8d8 3004 	ldr.w	r3, [r8, #4]
		user_ops_first = user->first;
   1107c:	f898 6001 	ldrb.w	r6, [r8, #1]
		user_ops = (void *)&user->user_op[0];
   11080:	9305      	str	r3, [sp, #20]
		while ((insert_head != TICKER_NULL) ||
   11082:	9b01      	ldr	r3, [sp, #4]
   11084:	2bff      	cmp	r3, #255	; 0xff
   11086:	d062      	beq.n	1114e <ticker_job+0x882>
				ticker = &node[id_insert];
   11088:	f8dd a004 	ldr.w	sl, [sp, #4]
   1108c:	9b03      	ldr	r3, [sp, #12]
   1108e:	fa0f f48a 	sxth.w	r4, sl
   11092:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   11096:	ea4f 1c04 	mov.w	ip, r4, lsl #4
   1109a:	eb03 1404 	add.w	r4, r3, r4, lsl #4
				insert_head = ticker->next;
   1109e:	f813 300c 	ldrb.w	r3, [r3, ip]
   110a2:	9301      	str	r3, [sp, #4]
				user_op = NULL;
   110a4:	2500      	movs	r5, #0
	ticker->next = TICKER_NULL;
   110a6:	22ff      	movs	r2, #255	; 0xff
   110a8:	7022      	strb	r2, [r4, #0]
	(void)ticker_enqueue(instance, id_insert);
   110aa:	f8db 7000 	ldr.w	r7, [fp]
	current = instance->ticker_id_head;
   110ae:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticker_new = &node[id];
   110b2:	eb07 000c 	add.w	r0, r7, ip
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   110b6:	4293      	cmp	r3, r2
	ticks_to_expire = ticker_new->ticks_to_expire;
   110b8:	6881      	ldr	r1, [r0, #8]
	previous = TICKER_NULL;
   110ba:	bf18      	it	ne
   110bc:	9204      	strne	r2, [sp, #16]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   110be:	d112      	bne.n	110e6 <ticker_job+0x81a>
   110c0:	e15a      	b.n	11378 <ticker_job+0xaac>
		if (ticks_to_expire == 0 && (ticker_new->lazy_current >
   110c2:	ebb1 010c 	subs.w	r1, r1, ip
   110c6:	d106      	bne.n	110d6 <ticker_job+0x80a>
   110c8:	f8be e01e 	ldrh.w	lr, [lr, #30]
   110cc:	f8b0 901e 	ldrh.w	r9, [r0, #30]
   110d0:	45f1      	cmp	r9, lr
   110d2:	f200 810c 	bhi.w	112ee <ticker_job+0xa22>
		current = ticker_current->next;
   110d6:	f817 c002 	ldrb.w	ip, [r7, r2]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   110da:	9304      	str	r3, [sp, #16]
   110dc:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   110e0:	f000 80f9 	beq.w	112d6 <ticker_job+0xa0a>
   110e4:	4663      	mov	r3, ip
		(ticker_current = &node[current])->ticks_to_expire))) {
   110e6:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
   110ea:	eb07 1e0c 	add.w	lr, r7, ip, lsl #4
   110ee:	ea4f 120c 	mov.w	r2, ip, lsl #4
		(ticks_to_expire_current =
   110f2:	f8de c008 	ldr.w	ip, [lr, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   110f6:	458c      	cmp	ip, r1
   110f8:	d9e3      	bls.n	110c2 <ticker_job+0x7f6>
   110fa:	9a04      	ldr	r2, [sp, #16]
	ticker_new->ticks_to_expire = ticks_to_expire;
   110fc:	6081      	str	r1, [r0, #8]
	if (previous == TICKER_NULL) {
   110fe:	2aff      	cmp	r2, #255	; 0xff
	ticker_new->next = current;
   11100:	7003      	strb	r3, [r0, #0]
	if (previous == TICKER_NULL) {
   11102:	f040 80ed 	bne.w	112e0 <ticker_job+0xa14>
		instance->ticker_id_head = id;
   11106:	f88b a01d 	strb.w	sl, [fp, #29]
	if (current != TICKER_NULL) {
   1110a:	2bff      	cmp	r3, #255	; 0xff
   1110c:	d006      	beq.n	1111c <ticker_job+0x850>
		node[current].ticks_to_expire -= ticks_to_expire;
   1110e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   11112:	eb07 1703 	add.w	r7, r7, r3, lsl #4
   11116:	68bb      	ldr	r3, [r7, #8]
   11118:	1a59      	subs	r1, r3, r1
   1111a:	60b9      	str	r1, [r7, #8]
	ticker->req = ticker->ack + 1;
   1111c:	78a3      	ldrb	r3, [r4, #2]
   1111e:	3301      	adds	r3, #1
   11120:	7063      	strb	r3, [r4, #1]
			if (user_op) {
   11122:	2d00      	cmp	r5, #0
   11124:	d0ad      	beq.n	11082 <ticker_job+0x7b6>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   11126:	f04f 0200 	mov.w	r2, #0
	if (user_op->fp_op_func) {
   1112a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   1112c:	702a      	strb	r2, [r5, #0]
	user_op->status = status;
   1112e:	2200      	movs	r2, #0
   11130:	62aa      	str	r2, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
   11132:	b113      	cbz	r3, 1113a <ticker_job+0x86e>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   11134:	6b29      	ldr	r1, [r5, #48]	; 0x30
   11136:	4610      	mov	r0, r2
   11138:	4798      	blx	r3
				if ((ticker->ticks_periodic == 0U) &&
   1113a:	6863      	ldr	r3, [r4, #4]
   1113c:	2b00      	cmp	r3, #0
   1113e:	d1a0      	bne.n	11082 <ticker_job+0x7b6>
					ticker->op_context =
   11140:	e9d5 230b 	ldrd	r2, r3, [r5, #44]	; 0x2c
   11144:	e9c4 2308 	strd	r2, r3, [r4, #32]
		while ((insert_head != TICKER_NULL) ||
   11148:	9b01      	ldr	r3, [sp, #4]
   1114a:	2bff      	cmp	r3, #255	; 0xff
   1114c:	d19c      	bne.n	11088 <ticker_job+0x7bc>
   1114e:	f898 3002 	ldrb.w	r3, [r8, #2]
   11152:	42b3      	cmp	r3, r6
   11154:	d030      	beq.n	111b8 <ticker_job+0x8ec>
   11156:	9f05      	ldr	r7, [sp, #20]
				if (first == user->count_user_op) {
   11158:	f898 0000 	ldrb.w	r0, [r8]
				user_op = &user_ops[user_ops_first];
   1115c:	eb06 0246 	add.w	r2, r6, r6, lsl #1
   11160:	eb06 0282 	add.w	r2, r6, r2, lsl #2
				first = user_ops_first + 1;
   11164:	3601      	adds	r6, #1
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   11166:	f817 1022 	ldrb.w	r1, [r7, r2, lsl #2]
				first = user_ops_first + 1;
   1116a:	b2f6      	uxtb	r6, r6
					first = 0U;
   1116c:	42b0      	cmp	r0, r6
   1116e:	bf08      	it	eq
   11170:	2600      	moveq	r6, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   11172:	2904      	cmp	r1, #4
				user_op = &user_ops[user_ops_first];
   11174:	eb07 0582 	add.w	r5, r7, r2, lsl #2
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   11178:	d11c      	bne.n	111b4 <ticker_job+0x8e8>
				id_insert = user_op->id;
   1117a:	f895 a001 	ldrb.w	sl, [r5, #1]
				ticker = &node[id_insert];
   1117e:	9b03      	ldr	r3, [sp, #12]
   11180:	eb0a 0c4a 	add.w	ip, sl, sl, lsl #1
   11184:	eb03 140c 	add.w	r4, r3, ip, lsl #4
   11188:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
				if (((ticker->req -
   1118c:	7861      	ldrb	r1, [r4, #1]
				      ticker->ack) & 0xff) != 0U) {
   1118e:	78a3      	ldrb	r3, [r4, #2]
				if (((ticker->req -
   11190:	1ac9      	subs	r1, r1, r3
   11192:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
   11196:	f000 80ad 	beq.w	112f4 <ticker_job+0xa28>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   1119a:	f04f 0300 	mov.w	r3, #0
   1119e:	f807 3022 	strb.w	r3, [r7, r2, lsl #2]
	if (user_op->fp_op_func) {
   111a2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->status = status;
   111a4:	2201      	movs	r2, #1
   111a6:	62aa      	str	r2, [r5, #40]	; 0x28
		user_op->fp_op_func(user_op->status, user_op->op_context);
   111a8:	4610      	mov	r0, r2
	if (user_op->fp_op_func) {
   111aa:	b10b      	cbz	r3, 111b0 <ticker_job+0x8e4>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   111ac:	6b29      	ldr	r1, [r5, #48]	; 0x30
   111ae:	4798      	blx	r3
		while ((insert_head != TICKER_NULL) ||
   111b0:	f898 3002 	ldrb.w	r3, [r8, #2]
   111b4:	42b3      	cmp	r3, r6
   111b6:	d1cf      	bne.n	11158 <ticker_job+0x88c>
	while (count_user--) {
   111b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   111ba:	4542      	cmp	r2, r8
   111bc:	f1a8 0308 	sub.w	r3, r8, #8
   111c0:	f000 80df 	beq.w	11382 <ticker_job+0xab6>
   111c4:	4698      	mov	r8, r3
   111c6:	e757      	b.n	11078 <ticker_job+0x7ac>
			    ticker->fp_op_func) {
   111c8:	6a23      	ldr	r3, [r4, #32]
			if ((((ticker->req - ticker->ack) & 0xff) == 1U) &&
   111ca:	2b00      	cmp	r3, #0
   111cc:	f43f af3a 	beq.w	11044 <ticker_job+0x778>
				ticker->fp_op_func(TICKER_STATUS_FAILURE,
   111d0:	6a61      	ldr	r1, [r4, #36]	; 0x24
   111d2:	4798      	blx	r3
   111d4:	78a2      	ldrb	r2, [r4, #2]
   111d6:	e735      	b.n	11044 <ticker_job+0x778>
			if (TICKER_RESCHEDULE_PENDING(ticker)) {
   111d8:	b112      	cbz	r2, 111e0 <ticker_job+0x914>
   111da:	7a13      	ldrb	r3, [r2, #8]
   111dc:	2b01      	cmp	r3, #1
   111de:	d03f      	beq.n	11260 <ticker_job+0x994>
				if (!ticker->lazy_current) {
   111e0:	8be3      	ldrh	r3, [r4, #30]
   111e2:	930a      	str	r3, [sp, #40]	; 0x28
   111e4:	2b00      	cmp	r3, #0
   111e6:	d170      	bne.n	112ca <ticker_job+0x9fe>
					lazy_periodic = ticker->lazy_periodic;
   111e8:	8ba3      	ldrh	r3, [r4, #28]
   111ea:	7866      	ldrb	r6, [r4, #1]
   111ec:	9304      	str	r3, [sp, #16]
   111ee:	469e      	mov	lr, r3
				while (count--) {
   111f0:	1c47      	adds	r7, r0, #1
   111f2:	9709      	str	r7, [sp, #36]	; 0x24
   111f4:	e9d4 c208 	ldrd	ip, r2, [r4, #32]
				ticks_to_expire = 0U;
   111f8:	2300      	movs	r3, #0
   111fa:	910b      	str	r1, [sp, #44]	; 0x2c
   111fc:	4677      	mov	r7, lr
   111fe:	e00a      	b.n	11216 <ticker_job+0x94a>
   11200:	00023fe4 	.word	0x00023fe4
   11204:	00023fa4 	.word	0x00023fa4
   11208:	000240a8 	.word	0x000240a8
				while (count--) {
   1120c:	3f01      	subs	r7, #1
   1120e:	4686      	mov	lr, r0
   11210:	1c79      	adds	r1, r7, #1
					ticks_to_expire +=
   11212:	4473      	add	r3, lr
				while (count--) {
   11214:	d012      	beq.n	1123c <ticker_job+0x970>
	if ((ticker->remainder_current < BIT(31)) &&
   11216:	f8df e2d8 	ldr.w	lr, [pc, #728]	; 114f0 <ticker_job+0xc24>
   1121a:	49b4      	ldr	r1, [pc, #720]	; (114ec <ticker_job+0xc20>)
	ticker->remainder_current += ticker->remainder_periodic;
   1121c:	4462      	add	r2, ip
	if ((ticker->remainder_current < BIT(31)) &&
   1121e:	4496      	add	lr, r2
   11220:	458e      	cmp	lr, r1
   11222:	d8f3      	bhi.n	1120c <ticker_job+0x940>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   11224:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
   11228:	f1a2 72e8 	sub.w	r2, r2, #30408704	; 0x1d00000
				while (count--) {
   1122c:	3f01      	subs	r7, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   1122e:	f5a2 32d4 	sub.w	r2, r2, #108544	; 0x1a800
				while (count--) {
   11232:	1c79      	adds	r1, r7, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   11234:	f5a2 72a5 	sub.w	r2, r2, #330	; 0x14a
					ticks_to_expire +=
   11238:	4473      	add	r3, lr
				while (count--) {
   1123a:	d1ec      	bne.n	11216 <ticker_job+0x94a>
   1123c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1123e:	6262      	str	r2, [r4, #36]	; 0x24
				if (!ticker->must_expire) {
   11240:	2900      	cmp	r1, #0
   11242:	f000 814b 	beq.w	114dc <ticker_job+0xc10>
				ticker->lazy_current += (lazy_periodic + lazy);
   11246:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   11248:	9904      	ldr	r1, [sp, #16]
   1124a:	440a      	add	r2, r1
   1124c:	83e2      	strh	r2, [r4, #30]
   1124e:	e009      	b.n	11264 <ticker_job+0x998>
		is_must_expire_skip = (ticker->must_expire &&
   11250:	460e      	mov	r6, r1
   11252:	e6c9      	b.n	10fe8 <ticker_job+0x71c>
		ticker->ticks_to_expire = 0U;
   11254:	60a6      	str	r6, [r4, #8]
		instance->ticker_id_head = ticker->next;
   11256:	f88b c01d 	strb.w	ip, [fp, #29]
		if ((ticker->ticks_periodic != 0U) ||
   1125a:	2800      	cmp	r0, #0
   1125c:	f43f aee7 	beq.w	1102e <ticker_job+0x762>
				ticker->req = ticker->ack;
   11260:	78a6      	ldrb	r6, [r4, #2]
   11262:	464b      	mov	r3, r9
			ticks_to_expire_prep(ticker, instance->ticks_current,
   11264:	9805      	ldr	r0, [sp, #20]
   11266:	f8db 2014 	ldr.w	r2, [fp, #20]
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
   1126a:	6961      	ldr	r1, [r4, #20]
			ticks_to_expire_prep(ticker, instance->ticks_current,
   1126c:	eb00 0708 	add.w	r7, r0, r8
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   11270:	1ab8      	subs	r0, r7, r2
   11272:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   11276:	d10e      	bne.n	11296 <ticker_job+0x9ca>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   11278:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
   1127c:	4403      	add	r3, r0
	if (ticks_to_expire > ticks_to_expire_minus) {
   1127e:	4299      	cmp	r1, r3
   11280:	d211      	bcs.n	112a6 <ticker_job+0x9da>
		ticks_to_expire -= ticks_to_expire_minus;
   11282:	1a5b      	subs	r3, r3, r1
		ticks_to_expire_minus = 0U;
   11284:	2100      	movs	r1, #0
			ticker->next = *insert_head;
   11286:	9a01      	ldr	r2, [sp, #4]
   11288:	7022      	strb	r2, [r4, #0]
			ticker->req++;
   1128a:	3601      	adds	r6, #1
   1128c:	7066      	strb	r6, [r4, #1]
	ticker->ticks_to_expire = ticks_to_expire;
   1128e:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   11290:	6161      	str	r1, [r4, #20]
			ticker->req++;
   11292:	9501      	str	r5, [sp, #4]
   11294:	e6d7      	b.n	11046 <ticker_job+0x77a>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   11296:	1bd2      	subs	r2, r2, r7
   11298:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
   1129c:	429a      	cmp	r2, r3
   1129e:	d211      	bcs.n	112c4 <ticker_job+0x9f8>
			ticks_to_expire -= delta_current_start;
   112a0:	1a9b      	subs	r3, r3, r2
	if (ticks_to_expire > ticks_to_expire_minus) {
   112a2:	4299      	cmp	r1, r3
   112a4:	d3ed      	bcc.n	11282 <ticker_job+0x9b6>
   112a6:	1ac9      	subs	r1, r1, r3
		ticks_to_expire = 0U;
   112a8:	2300      	movs	r3, #0
   112aa:	e7ec      	b.n	11286 <ticker_job+0x9ba>
		    (((ticker->req - ticker->ack) & 0xff) == 2U) &&
   112ac:	2e00      	cmp	r6, #0
   112ae:	f47f aeb6 	bne.w	1101e <ticker_job+0x752>
		    !is_must_expire_skip &&
   112b2:	b112      	cbz	r2, 112ba <ticker_job+0x9ee>
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
   112b4:	7a13      	ldrb	r3, [r2, #8]
   112b6:	2b01      	cmp	r3, #1
   112b8:	d0cc      	beq.n	11254 <ticker_job+0x988>
			instance->ticker_id_slot_previous = id_expired;
   112ba:	f88b 501c 	strb.w	r5, [fp, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
   112be:	f8cb 7018 	str.w	r7, [fp, #24]
   112c2:	e6ac      	b.n	1101e <ticker_job+0x752>
			ticks_to_expire_minus +=
   112c4:	4411      	add	r1, r2
   112c6:	1ac9      	subs	r1, r1, r3
	if (ticks_to_expire > ticks_to_expire_minus) {
   112c8:	e7ee      	b.n	112a8 <ticker_job+0x9dc>
					ticker->req = ticker->ack;
   112ca:	f04f 0e00 	mov.w	lr, #0
   112ce:	78a6      	ldrb	r6, [r4, #2]
					lazy_periodic = 0U;
   112d0:	f8cd e010 	str.w	lr, [sp, #16]
   112d4:	e78c      	b.n	111f0 <ticker_job+0x924>
	ticker_new->next = current;
   112d6:	461a      	mov	r2, r3
	ticker_new->ticks_to_expire = ticks_to_expire;
   112d8:	6081      	str	r1, [r0, #8]
	ticker_new->next = current;
   112da:	f880 c000 	strb.w	ip, [r0]
   112de:	4663      	mov	r3, ip
		node[previous].next = id;
   112e0:	b212      	sxth	r2, r2
   112e2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   112e6:	0112      	lsls	r2, r2, #4
   112e8:	f807 a002 	strb.w	sl, [r7, r2]
   112ec:	e70d      	b.n	1110a <ticker_job+0x83e>
   112ee:	9a04      	ldr	r2, [sp, #16]
   112f0:	4661      	mov	r1, ip
   112f2:	e703      	b.n	110fc <ticker_job+0x830>
	ticker->must_expire = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 1U :
   112f4:	8aaf      	ldrh	r7, [r5, #20]
				ticker_job_op_start(ticker, user_op,
   112f6:	f8db e014 	ldr.w	lr, [fp, #20]
	ticker->must_expire = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 1U :
   112fa:	6a68      	ldr	r0, [r5, #36]	; 0x24
   112fc:	f64f 79ff 	movw	r9, #65535	; 0xffff
   11300:	454f      	cmp	r7, r9
   11302:	e9d5 2303 	ldrd	r2, r3, [r5, #12]
   11306:	d02e      	beq.n	11366 <ticker_job+0xa9a>
   11308:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
	ticker->ext_data = start->ext_data;
   1130c:	62a0      	str	r0, [r4, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
   1130e:	6062      	str	r2, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
   11310:	6223      	str	r3, [r4, #32]
	ticker->timeout_func = start->fp_timeout_func;
   11312:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   11316:	6868      	ldr	r0, [r5, #4]
	ticker->ticks_slot = start->ticks_slot;
   11318:	61a2      	str	r2, [r4, #24]
	ticker->context = start->context;
   1131a:	6a2a      	ldr	r2, [r5, #32]
	ticker->lazy_periodic = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 0U :
   1131c:	83a7      	strh	r7, [r4, #28]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   1131e:	eba0 070e 	sub.w	r7, r0, lr
	ticker->context = start->context;
   11322:	e9c4 3203 	strd	r3, r2, [r4, #12]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   11326:	023a      	lsls	r2, r7, #8
	ticker->ticks_to_expire = start->ticks_first;
   11328:	68ab      	ldr	r3, [r5, #8]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   1132a:	d40c      	bmi.n	11346 <ticker_job+0xa7a>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1132c:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
   11330:	443b      	add	r3, r7
	if (ticks_to_expire > ticks_to_expire_minus) {
   11332:	b18b      	cbz	r3, 11358 <ticker_job+0xa8c>
	ticker->ticks_to_expire = ticks_to_expire;
   11334:	60a3      	str	r3, [r4, #8]
	ticker->remainder_current = 0U;
   11336:	2300      	movs	r3, #0
   11338:	6263      	str	r3, [r4, #36]	; 0x24
	ticker->lazy_current = 0U;
   1133a:	83e3      	strh	r3, [r4, #30]
	ticker->force = 1U;
   1133c:	f04f 0301 	mov.w	r3, #1
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   11340:	6161      	str	r1, [r4, #20]
	ticker->force = 1U;
   11342:	70e3      	strb	r3, [r4, #3]
}
   11344:	e6af      	b.n	110a6 <ticker_job+0x7da>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   11346:	ebae 0200 	sub.w	r2, lr, r0
   1134a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
   1134e:	4293      	cmp	r3, r2
   11350:	d905      	bls.n	1135e <ticker_job+0xa92>
			ticks_to_expire -= delta_current_start;
   11352:	1a9b      	subs	r3, r3, r2
	if (ticks_to_expire > ticks_to_expire_minus) {
   11354:	2b00      	cmp	r3, #0
   11356:	d1ed      	bne.n	11334 <ticker_job+0xa68>
		ticks_to_expire_minus -= ticks_to_expire;
   11358:	4619      	mov	r1, r3
		ticks_to_expire = 0U;
   1135a:	2300      	movs	r3, #0
   1135c:	e7ea      	b.n	11334 <ticker_job+0xa68>
			    (delta_current_start - ticks_to_expire);
   1135e:	1ad3      	subs	r3, r2, r3
		ticks_to_expire_minus -= ticks_to_expire;
   11360:	4619      	mov	r1, r3
		ticks_to_expire = 0U;
   11362:	2300      	movs	r3, #0
   11364:	e7e6      	b.n	11334 <ticker_job+0xa68>
	ticker->must_expire = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 1U :
   11366:	f04f 0701 	mov.w	r7, #1
   1136a:	f884 702c 	strb.w	r7, [r4, #44]	; 0x2c
	ticker->ext_data = start->ext_data;
   1136e:	62a0      	str	r0, [r4, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
   11370:	6062      	str	r2, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
   11372:	6223      	str	r3, [r4, #32]
	ticker->lazy_periodic = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 0U :
   11374:	460f      	mov	r7, r1
   11376:	e7cc      	b.n	11312 <ticker_job+0xa46>
	ticker_new->next = current;
   11378:	f807 300c 	strb.w	r3, [r7, ip]
		instance->ticker_id_head = id;
   1137c:	f88b a01d 	strb.w	sl, [fp, #29]
	if (current != TICKER_NULL) {
   11380:	e6cc      	b.n	1111c <ticker_job+0x850>
   11382:	f8db 3000 	ldr.w	r3, [fp]
   11386:	9303      	str	r3, [sp, #12]
	while (rescheduling) {
   11388:	f89b 701d 	ldrb.w	r7, [fp, #29]
   1138c:	9e03      	ldr	r6, [sp, #12]
	uint8_t  rescheduled = 0U;
   1138e:	2300      	movs	r3, #0
   11390:	46ba      	mov	sl, r7
		while (ticker_id_head != TICKER_NULL) {
   11392:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
   11396:	d010      	beq.n	113ba <ticker_job+0xaee>
   11398:	46d1      	mov	r9, sl
			ticker = &nodes[ticker_id_head];
   1139a:	fa0f f289 	sxth.w	r2, r9
   1139e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   113a2:	eb06 1202 	add.w	r2, r6, r2, lsl #4
			ext_data = ticker->ext_data;
   113a6:	6a97      	ldr	r7, [r2, #40]	; 0x28
			if (ext_data && ext_data->reschedule_state ==
   113a8:	b117      	cbz	r7, 113b0 <ticker_job+0xae4>
   113aa:	7a39      	ldrb	r1, [r7, #8]
   113ac:	2901      	cmp	r1, #1
   113ae:	d014      	beq.n	113da <ticker_job+0xb0e>
			ticker_id_head = ticker->next;
   113b0:	f892 9000 	ldrb.w	r9, [r2]
		while (ticker_id_head != TICKER_NULL) {
   113b4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   113b8:	d1ef      	bne.n	1139a <ticker_job+0xace>
	return rescheduled;
   113ba:	4657      	mov	r7, sl
		if (ticker_job_reschedule_in_window(instance, ticks_elapsed)) {
   113bc:	2b00      	cmp	r3, #0
   113be:	f43f ad8a 	beq.w	10ed6 <ticker_job+0x60a>
	if (instance->ticker_id_head != ticker_id_old_head) {
   113c2:	9a06      	ldr	r2, [sp, #24]
   113c4:	42ba      	cmp	r2, r7
   113c6:	f47f ad8a 	bne.w	10ede <ticker_job+0x612>
	if (!pending) {
   113ca:	9a08      	ldr	r2, [sp, #32]
   113cc:	2a00      	cmp	r2, #0
   113ce:	f000 817c 	beq.w	116ca <ticker_job+0xdfe>
	instance->job_guard = 0U;
   113d2:	2300      	movs	r3, #0
   113d4:	f88b 301e 	strb.w	r3, [fp, #30]
	if (flag_compare_update) {
   113d8:	e58a      	b.n	10ef0 <ticker_job+0x624>
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
   113da:	f89b 301c 	ldrb.w	r3, [fp, #28]
   113de:	2bff      	cmp	r3, #255	; 0xff
   113e0:	d071      	beq.n	114c6 <ticker_job+0xbfa>
			instance->ticks_slot_previous > ticks_elapsed) {
   113e2:	f8db 0018 	ldr.w	r0, [fp, #24]
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
   113e6:	9b02      	ldr	r3, [sp, #8]
   113e8:	4283      	cmp	r3, r0
   113ea:	d26c      	bcs.n	114c6 <ticker_job+0xbfa>
			window_start_ticks = instance->ticks_slot_previous -
   113ec:	1ac0      	subs	r0, r0, r3
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   113ee:	e9d7 4300 	ldrd	r4, r3, [r7]
   113f2:	42a3      	cmp	r3, r4
		ticker_id_iter = nodes[ticker_id_head].next;
   113f4:	f892 c000 	ldrb.w	ip, [r2]
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   113f8:	d26d      	bcs.n	114d6 <ticker_job+0xc0a>
		while (ticker_id_iter != TICKER_NULL &&
   113fa:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
			ticks_slot_window = ext_data->ticks_slot_window -
   113fe:	eba4 0403 	sub.w	r4, r4, r3
		while (ticker_id_iter != TICKER_NULL &&
   11402:	d068      	beq.n	114d6 <ticker_job+0xc0a>
		       ticks_start_offset + ticker->ticks_slot <=
   11404:	6995      	ldr	r5, [r2, #24]
		while (ticker_id_iter != TICKER_NULL &&
   11406:	42ac      	cmp	r4, r5
   11408:	f04f 0300 	mov.w	r3, #0
   1140c:	d333      	bcc.n	11476 <ticker_job+0xbaa>
   1140e:	469e      	mov	lr, r3
   11410:	9501      	str	r5, [sp, #4]
   11412:	4661      	mov	r1, ip
   11414:	9203      	str	r2, [sp, #12]
   11416:	e01d      	b.n	11454 <ticker_job+0xb88>
			if (node->ticks_to_expire >
   11418:	f8d1 8008 	ldr.w	r8, [r1, #8]
					MIN(ticks_slot_window,
   1141c:	f1a8 0304 	sub.w	r3, r8, #4
			if (node->ticks_to_expire >
   11420:	f1b8 0f04 	cmp.w	r8, #4
					MIN(ticks_slot_window,
   11424:	4473      	add	r3, lr
			if (node->ticks_to_expire >
   11426:	d909      	bls.n	1143c <ticker_job+0xb70>
				window_end_ticks =
   11428:	42a3      	cmp	r3, r4
			if (window_end_ticks > ticks_start_offset +
   1142a:	9a01      	ldr	r2, [sp, #4]
				window_end_ticks =
   1142c:	bf28      	it	cs
   1142e:	4623      	movcs	r3, r4
			if (window_end_ticks > ticks_start_offset +
   11430:	4293      	cmp	r3, r2
   11432:	d903      	bls.n	1143c <ticker_job+0xb70>
			if (ticks_to_expire != 0U &&
   11434:	1b5b      	subs	r3, r3, r5
   11436:	d001      	beq.n	1143c <ticker_job+0xb70>
   11438:	4283      	cmp	r3, r0
   1143a:	d21b      	bcs.n	11474 <ticker_job+0xba8>
			window_start_ticks  = node->ticks_to_expire +
   1143c:	6988      	ldr	r0, [r1, #24]
			ticker_id_iter = node->next;
   1143e:	7809      	ldrb	r1, [r1, #0]
			ticks_start_offset += node->ticks_to_expire;
   11440:	44c6      	add	lr, r8
			window_start_ticks  = node->ticks_to_expire +
   11442:	4440      	add	r0, r8
			ticks_to_expire     = ticks_slot_window -
   11444:	1b63      	subs	r3, r4, r5
		       ticks_start_offset + ticker->ticks_slot <=
   11446:	eb0e 0205 	add.w	r2, lr, r5
		while (ticker_id_iter != TICKER_NULL &&
   1144a:	29ff      	cmp	r1, #255	; 0xff
		       ticks_start_offset + ticker->ticks_slot <=
   1144c:	9201      	str	r2, [sp, #4]
		while (ticker_id_iter != TICKER_NULL &&
   1144e:	d011      	beq.n	11474 <ticker_job+0xba8>
   11450:	4294      	cmp	r4, r2
   11452:	d30f      	bcc.n	11474 <ticker_job+0xba8>
			node = &nodes[ticker_id_iter];
   11454:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   11458:	eb06 1101 	add.w	r1, r6, r1, lsl #4
			if (node->ext_data &&
   1145c:	f8d1 8028 	ldr.w	r8, [r1, #40]	; 0x28
   11460:	f1b8 0f00 	cmp.w	r8, #0
   11464:	d0d8      	beq.n	11418 <ticker_job+0xb4c>
   11466:	f898 8008 	ldrb.w	r8, [r8, #8]
   1146a:	f1b8 0f01 	cmp.w	r8, #1
   1146e:	d1d3      	bne.n	11418 <ticker_job+0xb4c>
				ticker_id_iter = node->next;
   11470:	7809      	ldrb	r1, [r1, #0]
				continue;
   11472:	e7e8      	b.n	11446 <ticker_job+0xb7a>
   11474:	9a03      	ldr	r2, [sp, #12]
		ticker->ticks_to_expire = ticks_to_expire;
   11476:	6093      	str	r3, [r2, #8]
   11478:	4664      	mov	r4, ip
   1147a:	f04f 0eff 	mov.w	lr, #255	; 0xff
   1147e:	e000      	b.n	11482 <ticker_job+0xbb6>
   11480:	4604      	mov	r4, r0
			node = &nodes[ticker_id_iter];
   11482:	b221      	sxth	r1, r4
   11484:	eb01 0041 	add.w	r0, r1, r1, lsl #1
   11488:	eb06 1800 	add.w	r8, r6, r0, lsl #4
   1148c:	0100      	lsls	r0, r0, #4
			if (ticker->ticks_to_expire > node->ticks_to_expire) {
   1148e:	f8d8 5008 	ldr.w	r5, [r8, #8]
   11492:	429d      	cmp	r5, r3
   11494:	d24e      	bcs.n	11534 <ticker_job+0xc68>
				ticker->ticks_to_expire -=
   11496:	1b5b      	subs	r3, r3, r5
   11498:	6093      	str	r3, [r2, #8]
			ticker_id_iter = node->next;
   1149a:	5c30      	ldrb	r0, [r6, r0]
		while (ticker_id_iter != TICKER_NULL) {
   1149c:	28ff      	cmp	r0, #255	; 0xff
   1149e:	46a6      	mov	lr, r4
   114a0:	d1ee      	bne.n	11480 <ticker_job+0xbb4>
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
   114a2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   114a6:	0109      	lsls	r1, r1, #4
			instance->ticker_id_head = nodes[ticker_id_head].next;
   114a8:	f88b c01d 	strb.w	ip, [fp, #29]
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
   114ac:	5c73      	ldrb	r3, [r6, r1]
   114ae:	7013      	strb	r3, [r2, #0]
			nodes[ticker_id_prev].next = ticker_id_head;
   114b0:	f806 9001 	strb.w	r9, [r6, r1]
   114b4:	46e2      	mov	sl, ip
		ticker->lazy_current--;
   114b6:	8bd3      	ldrh	r3, [r2, #30]
   114b8:	3b01      	subs	r3, #1
   114ba:	83d3      	strh	r3, [r2, #30]
		ext_data->reschedule_state =
   114bc:	f04f 0202 	mov.w	r2, #2
		rescheduled  = 1U;
   114c0:	2301      	movs	r3, #1
		ext_data->reschedule_state =
   114c2:	723a      	strb	r2, [r7, #8]
		rescheduled  = 1U;
   114c4:	e765      	b.n	11392 <ticker_job+0xac6>
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   114c6:	e9d7 4300 	ldrd	r4, r3, [r7]
   114ca:	42a3      	cmp	r3, r4
		ticker_id_iter = nodes[ticker_id_head].next;
   114cc:	f892 c000 	ldrb.w	ip, [r2]
		window_start_ticks = 0U;
   114d0:	f04f 0000 	mov.w	r0, #0
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   114d4:	d391      	bcc.n	113fa <ticker_job+0xb2e>
		ticker->ticks_to_expire = ticks_to_expire;
   114d6:	2300      	movs	r3, #0
   114d8:	6093      	str	r3, [r2, #8]
		while (ticker_id_iter != TICKER_NULL) {
   114da:	e7ec      	b.n	114b6 <ticker_job+0xbea>
					while (ticks_to_expire <
   114dc:	459a      	cmp	sl, r3
   114de:	f67f aeb2 	bls.w	11246 <ticker_job+0x97a>
   114e2:	f100 0e01 	add.w	lr, r0, #1
   114e6:	9409      	str	r4, [sp, #36]	; 0x24
   114e8:	e00a      	b.n	11500 <ticker_job+0xc34>
   114ea:	bf00      	nop
   114ec:	7f172b59 	.word	0x7f172b59
   114f0:	ff172b5a 	.word	0xff172b5a
   114f4:	4607      	mov	r7, r0
						ticks_to_expire +=
   114f6:	443b      	add	r3, r7
						lazy++;
   114f8:	3101      	adds	r1, #1
					while (ticks_to_expire <
   114fa:	459a      	cmp	sl, r3
						lazy++;
   114fc:	b289      	uxth	r1, r1
					while (ticks_to_expire <
   114fe:	d911      	bls.n	11524 <ticker_job+0xc58>
	if ((ticker->remainder_current < BIT(31)) &&
   11500:	4f81      	ldr	r7, [pc, #516]	; (11708 <ticker_job+0xe3c>)
   11502:	4c82      	ldr	r4, [pc, #520]	; (1170c <ticker_job+0xe40>)
	ticker->remainder_current += ticker->remainder_periodic;
   11504:	4462      	add	r2, ip
	if ((ticker->remainder_current < BIT(31)) &&
   11506:	19d7      	adds	r7, r2, r7
   11508:	42a7      	cmp	r7, r4
   1150a:	d8f3      	bhi.n	114f4 <ticker_job+0xc28>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   1150c:	4677      	mov	r7, lr
   1150e:	f1a2 72e8 	sub.w	r2, r2, #30408704	; 0x1d00000
						ticks_to_expire +=
   11512:	443b      	add	r3, r7
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   11514:	f5a2 32d4 	sub.w	r2, r2, #108544	; 0x1a800
						lazy++;
   11518:	3101      	adds	r1, #1
					while (ticks_to_expire <
   1151a:	459a      	cmp	sl, r3
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   1151c:	f5a2 72a5 	sub.w	r2, r2, #330	; 0x14a
						lazy++;
   11520:	b289      	uxth	r1, r1
					while (ticks_to_expire <
   11522:	d8ed      	bhi.n	11500 <ticker_job+0xc34>
   11524:	9804      	ldr	r0, [sp, #16]
   11526:	9c09      	ldr	r4, [sp, #36]	; 0x24
   11528:	4408      	add	r0, r1
   1152a:	b281      	uxth	r1, r0
   1152c:	9104      	str	r1, [sp, #16]
   1152e:	6262      	str	r2, [r4, #36]	; 0x24
   11530:	e689      	b.n	11246 <ticker_job+0x97a>
   11532:	4770      	bx	lr
				node->ticks_to_expire -=
   11534:	1aeb      	subs	r3, r5, r3
		if (ticker_id_prev != TICKER_NULL) {
   11536:	f1be 0fff 	cmp.w	lr, #255	; 0xff
				node->ticks_to_expire -=
   1153a:	f8c8 3008 	str.w	r3, [r8, #8]
		if (ticker_id_prev != TICKER_NULL) {
   1153e:	d0ba      	beq.n	114b6 <ticker_job+0xbea>
   11540:	fa0f f18e 	sxth.w	r1, lr
   11544:	e7ad      	b.n	114a2 <ticker_job+0xbd6>
	if (!pending) {
   11546:	9b08      	ldr	r3, [sp, #32]
   11548:	2b00      	cmp	r3, #0
   1154a:	f000 80a6 	beq.w	1169a <ticker_job+0xdce>
	instance->job_guard = 0U;
   1154e:	2300      	movs	r3, #0
   11550:	f88b 301e 	strb.w	r3, [fp, #30]
	if (flag_compare_update) {
   11554:	9b07      	ldr	r3, [sp, #28]
   11556:	2b00      	cmp	r3, #0
   11558:	f040 80c4 	bne.w	116e4 <ticker_job+0xe18>
   1155c:	f89b 201f 	ldrb.w	r2, [fp, #31]
	if (instance->worker_trigger) {
   11560:	b16a      	cbz	r2, 1157e <ticker_job+0xcb2>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   11562:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
   11566:	465b      	mov	r3, fp
   11568:	2201      	movs	r2, #1
   1156a:	2103      	movs	r1, #3
   1156c:	2004      	movs	r0, #4
   1156e:	46a4      	mov	ip, r4
}
   11570:	b00f      	add	sp, #60	; 0x3c
   11572:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   11576:	4760      	bx	ip
	instance->job_guard = 0U;
   11578:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1157a:	f88b 301e 	strb.w	r3, [fp, #30]
}
   1157e:	b00f      	add	sp, #60	; 0x3c
   11580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ticker->ticks_to_expire -= ticks_elapsed;
   11584:	eba3 0309 	sub.w	r3, r3, r9
   11588:	60a3      	str	r3, [r4, #8]
			break;
   1158a:	f8db 3000 	ldr.w	r3, [fp]
   1158e:	9303      	str	r3, [sp, #12]
   11590:	e560      	b.n	11054 <ticker_job+0x788>
	count_user = instance->count_user;
   11592:	f89b 3009 	ldrb.w	r3, [fp, #9]
	users = &instance->users[0];
   11596:	f8db 6004 	ldr.w	r6, [fp, #4]
	while (count_user--) {
   1159a:	1e5c      	subs	r4, r3, #1
   1159c:	b2e4      	uxtb	r4, r4
   1159e:	2b00      	cmp	r3, #0
   115a0:	f43f aca1 	beq.w	10ee6 <ticker_job+0x61a>
		flag_compare_update = 1U;
   115a4:	2301      	movs	r3, #1
   115a6:	9307      	str	r3, [sp, #28]
   115a8:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
		uop->status = TICKER_STATUS_SUCCESS;
   115ac:	f04f 0900 	mov.w	r9, #0
		while (user->first != user->last) {
   115b0:	7863      	ldrb	r3, [r4, #1]
   115b2:	78e1      	ldrb	r1, [r4, #3]
		user_op = &user->user_op[0];
   115b4:	6865      	ldr	r5, [r4, #4]
		while (user->first != user->last) {
   115b6:	4299      	cmp	r1, r3
   115b8:	d10c      	bne.n	115d4 <ticker_job+0xd08>
   115ba:	e060      	b.n	1167e <ticker_job+0xdb2>
	switch (uop->op) {
   115bc:	2b01      	cmp	r3, #1
   115be:	d05a      	beq.n	11676 <ticker_job+0xdaa>
			first = user->first + 1;
   115c0:	7863      	ldrb	r3, [r4, #1]
			if (first == user->count_user_op) {
   115c2:	7822      	ldrb	r2, [r4, #0]
			first = user->first + 1;
   115c4:	3301      	adds	r3, #1
   115c6:	b2db      	uxtb	r3, r3
				first = 0U;
   115c8:	429a      	cmp	r2, r3
   115ca:	bf08      	it	eq
   115cc:	2300      	moveq	r3, #0
		while (user->first != user->last) {
   115ce:	4299      	cmp	r1, r3
			user->first = first;
   115d0:	7063      	strb	r3, [r4, #1]
		while (user->first != user->last) {
   115d2:	d054      	beq.n	1167e <ticker_job+0xdb2>
			ticker_job_op_inquire(instance, &user_op[user->first]);
   115d4:	b21b      	sxth	r3, r3
   115d6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   115da:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   115de:	eb05 0283 	add.w	r2, r5, r3, lsl #2
	switch (uop->op) {
   115e2:	f815 3023 	ldrb.w	r3, [r5, r3, lsl #2]
   115e6:	2b02      	cmp	r3, #2
   115e8:	d01b      	beq.n	11622 <ticker_job+0xd56>
   115ea:	2b03      	cmp	r3, #3
   115ec:	d1e6      	bne.n	115bc <ticker_job+0xcf0>
		if (uop->id < instance->count_node) {
   115ee:	7853      	ldrb	r3, [r2, #1]
   115f0:	f89b 1008 	ldrb.w	r1, [fp, #8]
   115f4:	4299      	cmp	r1, r3
   115f6:	d911      	bls.n	1161c <ticker_job+0xd50>
			node[uop->id].priority =
   115f8:	f8db 1000 	ldr.w	r1, [fp]
   115fc:	7910      	ldrb	r0, [r2, #4]
   115fe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   11602:	eb01 1303 	add.w	r3, r1, r3, lsl #4
   11606:	f883 002d 	strb.w	r0, [r3, #45]	; 0x2d
			uop->status = TICKER_STATUS_SUCCESS;
   1160a:	f8c2 9028 	str.w	r9, [r2, #40]	; 0x28
		fp_op_func = uop->fp_op_func;
   1160e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	if (fp_op_func) {
   11610:	b113      	cbz	r3, 11618 <ticker_job+0xd4c>
		fp_op_func(uop->status, uop->op_context);
   11612:	6b11      	ldr	r1, [r2, #48]	; 0x30
   11614:	6a90      	ldr	r0, [r2, #40]	; 0x28
   11616:	4798      	blx	r3
   11618:	78e1      	ldrb	r1, [r4, #3]
   1161a:	e7d1      	b.n	115c0 <ticker_job+0xcf4>
			uop->status = TICKER_STATUS_FAILURE;
   1161c:	2301      	movs	r3, #1
   1161e:	6293      	str	r3, [r2, #40]	; 0x28
   11620:	e7f5      	b.n	1160e <ticker_job+0xd42>
		ticker_by_next_slot_get(instance,
   11622:	e9d2 7001 	ldrd	r7, r0, [r2, #4]
	_ticker_id_head = *ticker_id_head;
   11626:	f897 e000 	ldrb.w	lr, [r7]
		ticker_by_next_slot_get(instance,
   1162a:	f8d2 c00c 	ldr.w	ip, [r2, #12]
	node = instance->nodes;
   1162e:	f8db 1000 	ldr.w	r1, [fp]
	if ((_ticker_id_head == TICKER_NULL) ||
   11632:	f8db 8014 	ldr.w	r8, [fp, #20]
   11636:	f1be 0fff 	cmp.w	lr, #255	; 0xff
   1163a:	d002      	beq.n	11642 <ticker_job+0xd76>
   1163c:	6803      	ldr	r3, [r0, #0]
   1163e:	4543      	cmp	r3, r8
   11640:	d024      	beq.n	1168c <ticker_job+0xdc0>
		_ticker_id_head = instance->ticker_id_head;
   11642:	f89b 301d 	ldrb.w	r3, [fp, #29]
		*ticks_current = instance->ticks_current;
   11646:	f8c0 8000 	str.w	r8, [r0]
		_ticks_to_expire = 0U;
   1164a:	f04f 0e00 	mov.w	lr, #0
   1164e:	e00d      	b.n	1166c <ticker_job+0xda0>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0U)) {
   11650:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   11654:	eb01 1800 	add.w	r8, r1, r0, lsl #4
   11658:	0100      	lsls	r0, r0, #4
   1165a:	f8d8 a008 	ldr.w	sl, [r8, #8]
	while ((_ticker_id_head != TICKER_NULL) &&
   1165e:	f8d8 8018 	ldr.w	r8, [r8, #24]
   11662:	44d6      	add	lr, sl
   11664:	f1b8 0f00 	cmp.w	r8, #0
   11668:	d102      	bne.n	11670 <ticker_job+0xda4>
		_ticker_id_head = ticker->next;
   1166a:	5c0b      	ldrb	r3, [r1, r0]
	while ((_ticker_id_head != TICKER_NULL) &&
   1166c:	2bff      	cmp	r3, #255	; 0xff
   1166e:	d1ef      	bne.n	11650 <ticker_job+0xd84>
	*ticker_id_head = _ticker_id_head;
   11670:	703b      	strb	r3, [r7, #0]
	*ticks_to_expire = _ticks_to_expire;
   11672:	f8cc e000 	str.w	lr, [ip]
		fp_op_func = uop->fp_op_func;
   11676:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
		uop->status = TICKER_STATUS_SUCCESS;
   11678:	f8c2 9028 	str.w	r9, [r2, #40]	; 0x28
		break;
   1167c:	e7c8      	b.n	11610 <ticker_job+0xd44>
	while (count_user--) {
   1167e:	42a6      	cmp	r6, r4
   11680:	f1a4 0308 	sub.w	r3, r4, #8
   11684:	f43f af63 	beq.w	1154e <ticker_job+0xc82>
   11688:	461c      	mov	r4, r3
   1168a:	e791      	b.n	115b0 <ticker_job+0xce4>
		ticker = &node[_ticker_id_head];
   1168c:	eb0e 034e 	add.w	r3, lr, lr, lsl #1
   11690:	011b      	lsls	r3, r3, #4
	_ticks_to_expire = *ticks_to_expire;
   11692:	f8dc e000 	ldr.w	lr, [ip]
		_ticker_id_head = ticker->next;
   11696:	5ccb      	ldrb	r3, [r1, r3]
	while ((_ticker_id_head != TICKER_NULL) &&
   11698:	e7e8      	b.n	1166c <ticker_job+0xda0>
	count_user = instance->count_user;
   1169a:	f89b 3009 	ldrb.w	r3, [fp, #9]
	users = &instance->users[0];
   1169e:	f8db 6004 	ldr.w	r6, [fp, #4]
	while (count_user--) {
   116a2:	1e5c      	subs	r4, r3, #1
   116a4:	b2e4      	uxtb	r4, r4
   116a6:	2b00      	cmp	r3, #0
   116a8:	f47f af7e 	bne.w	115a8 <ticker_job+0xcdc>
   116ac:	e74f      	b.n	1154e <ticker_job+0xc82>
		if (cntr_stop() == 0) {
   116ae:	f009 f9ad 	bl	1aa0c <cntr_stop>
   116b2:	2800      	cmp	r0, #0
   116b4:	f47f af52 	bne.w	1155c <ticker_job+0xc90>
			instance->ticks_slot_previous = 0U;
   116b8:	f8cb 0018 	str.w	r0, [fp, #24]
			instance->ticks_current = cntr_cnt_get();
   116bc:	f009 f9cc 	bl	1aa58 <cntr_cnt_get>
   116c0:	f89b 201f 	ldrb.w	r2, [fp, #31]
   116c4:	f8cb 0014 	str.w	r0, [fp, #20]
   116c8:	e74a      	b.n	11560 <ticker_job+0xc94>
	count_user = instance->count_user;
   116ca:	f89b 2009 	ldrb.w	r2, [fp, #9]
	users = &instance->users[0];
   116ce:	f8db 6004 	ldr.w	r6, [fp, #4]
	while (count_user--) {
   116d2:	1e54      	subs	r4, r2, #1
   116d4:	b2e4      	uxtb	r4, r4
   116d6:	2a00      	cmp	r2, #0
   116d8:	f47f af65 	bne.w	115a6 <ticker_job+0xcda>
	instance->job_guard = 0U;
   116dc:	9b08      	ldr	r3, [sp, #32]
   116de:	f88b 301e 	strb.w	r3, [fp, #30]
	if (flag_compare_update) {
   116e2:	e405      	b.n	10ef0 <ticker_job+0x624>
   116e4:	f89b 701d 	ldrb.w	r7, [fp, #29]
   116e8:	e402      	b.n	10ef0 <ticker_job+0x624>
		ticks_current = cntr_cnt_get();
   116ea:	f009 f9b5 	bl	1aa58 <cntr_cnt_get>
   116ee:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
   116f0:	f009 f97c 	bl	1a9ec <cntr_start>
   116f4:	f89b 701d 	ldrb.w	r7, [fp, #29]
   116f8:	2800      	cmp	r0, #0
   116fa:	f47f ac00 	bne.w	10efe <ticker_job+0x632>
			instance->ticks_current = ticks_current;
   116fe:	f8cb 4014 	str.w	r4, [fp, #20]
   11702:	f7ff bbfc 	b.w	10efe <ticker_job+0x632>
   11706:	bf00      	nop
   11708:	ff172b5a 	.word	0xff172b5a
   1170c:	7f172b59 	.word	0x7f172b59

00011710 <ticker_init>:
{
   11710:	b4f0      	push	{r4, r5, r6, r7}
   11712:	9f04      	ldr	r7, [sp, #16]
   11714:	f89d 4014 	ldrb.w	r4, [sp, #20]
   11718:	9e06      	ldr	r6, [sp, #24]
	if (instance_index >= TICKER_INSTANCE_MAX) {
   1171a:	2800      	cmp	r0, #0
   1171c:	d13e      	bne.n	1179c <ticker_init+0x8c>
	instance->count_node = count_node;
   1171e:	f8df c084 	ldr.w	ip, [pc, #132]	; 117a4 <ticker_init+0x94>
	while (count_node--) {
   11722:	1e4d      	subs	r5, r1, #1
	instance->count_node = count_node;
   11724:	f88c 1008 	strb.w	r1, [ip, #8]
	instance->nodes = node;
   11728:	f8cc 2000 	str.w	r2, [ip]
	while (count_node--) {
   1172c:	b2ed      	uxtb	r5, r5
   1172e:	b149      	cbz	r1, 11744 <ticker_init+0x34>
   11730:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   11734:	eb02 1105 	add.w	r1, r2, r5, lsl #4
   11738:	4291      	cmp	r1, r2
		instance->nodes[count_node].priority = 0;
   1173a:	f881 002d 	strb.w	r0, [r1, #45]	; 0x2d
	while (count_node--) {
   1173e:	f1a1 0130 	sub.w	r1, r1, #48	; 0x30
   11742:	d1f9      	bne.n	11738 <ticker_init+0x28>
	while (count_user--) {
   11744:	1e5a      	subs	r2, r3, #1
	instance->count_user = count_user;
   11746:	f88c 3009 	strb.w	r3, [ip, #9]
	instance->users = user;
   1174a:	f8cc 7004 	str.w	r7, [ip, #4]
	while (count_user--) {
   1174e:	b2d2      	uxtb	r2, r2
   11750:	b17b      	cbz	r3, 11772 <ticker_init+0x62>
   11752:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
		users[count_user].user_op = user_op_;
   11756:	6056      	str	r6, [r2, #4]
		user_op_ += users[count_user].count_user_op;
   11758:	4611      	mov	r1, r2
   1175a:	f812 3908 	ldrb.w	r3, [r2], #-8
   1175e:	eb03 0043 	add.w	r0, r3, r3, lsl #1
		count_op -= users[count_user].count_user_op;
   11762:	1ae4      	subs	r4, r4, r3
	while (count_user--) {
   11764:	428f      	cmp	r7, r1
		user_op_ += users[count_user].count_user_op;
   11766:	eb03 0380 	add.w	r3, r3, r0, lsl #2
		count_op -= users[count_user].count_user_op;
   1176a:	b2e4      	uxtb	r4, r4
		user_op_ += users[count_user].count_user_op;
   1176c:	eb06 0683 	add.w	r6, r6, r3, lsl #2
	while (count_user--) {
   11770:	d1f1      	bne.n	11756 <ticker_init+0x46>
	if (count_op) {
   11772:	b99c      	cbnz	r4, 1179c <ticker_init+0x8c>
	instance->caller_id_get_cb = caller_id_get_cb;
   11774:	9a07      	ldr	r2, [sp, #28]
   11776:	f8cc 2020 	str.w	r2, [ip, #32]
	instance->sched_cb = sched_cb;
   1177a:	9a08      	ldr	r2, [sp, #32]
   1177c:	f8cc 2024 	str.w	r2, [ip, #36]	; 0x24
	instance->ticker_id_slot_previous = TICKER_NULL;
   11780:	f64f 73ff 	movw	r3, #65535	; 0xffff
	instance->trigger_set_cb = trigger_set_cb;
   11784:	9a09      	ldr	r2, [sp, #36]	; 0x24
	instance->ticks_elapsed_first = 0U;
   11786:	f8ac 400a 	strh.w	r4, [ip, #10]
	return TICKER_STATUS_SUCCESS;
   1178a:	4620      	mov	r0, r4
	instance->ticks_slot_previous = 0U;
   1178c:	e9cc 4405 	strd	r4, r4, [ip, #20]
}
   11790:	bcf0      	pop	{r4, r5, r6, r7}
	instance->trigger_set_cb = trigger_set_cb;
   11792:	f8cc 2028 	str.w	r2, [ip, #40]	; 0x28
	instance->ticker_id_slot_previous = TICKER_NULL;
   11796:	f8ac 301c 	strh.w	r3, [ip, #28]
}
   1179a:	4770      	bx	lr
		return TICKER_STATUS_FAILURE;
   1179c:	2001      	movs	r0, #1
}
   1179e:	bcf0      	pop	{r4, r5, r6, r7}
   117a0:	4770      	bx	lr
   117a2:	bf00      	nop
   117a4:	20002564 	.word	0x20002564

000117a8 <ticker_trigger>:
	if (instance->sched_cb) {
   117a8:	4b0a      	ldr	r3, [pc, #40]	; (117d4 <ticker_trigger+0x2c>)
   117aa:	222c      	movs	r2, #44	; 0x2c
   117ac:	fb02 3200 	mla	r2, r2, r0, r3
{
   117b0:	b410      	push	{r4}
	if (instance->sched_cb) {
   117b2:	6a54      	ldr	r4, [r2, #36]	; 0x24
   117b4:	b15c      	cbz	r4, 117ce <ticker_trigger+0x26>
	instance = &_instance[instance_index];
   117b6:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   117ba:	eb00 0042 	add.w	r0, r0, r2, lsl #1
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
   117be:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   117c2:	46a4      	mov	ip, r4
   117c4:	2201      	movs	r2, #1
}
   117c6:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
   117c8:	2103      	movs	r1, #3
   117ca:	2002      	movs	r0, #2
   117cc:	4760      	bx	ip
}
   117ce:	bc10      	pop	{r4}
   117d0:	4770      	bx	lr
   117d2:	bf00      	nop
   117d4:	20002564 	.word	0x20002564

000117d8 <ticker_start_ext>:
{
   117d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   117dc:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 11880 <ticker_start_ext+0xa8>
{
   117e0:	f8bd e02c 	ldrh.w	lr, [sp, #44]	; 0x2c
	user = &instance->users[user_id];
   117e4:	272c      	movs	r7, #44	; 0x2c
   117e6:	fb07 8700 	mla	r7, r7, r0, r8
{
   117ea:	4604      	mov	r4, r0
	user = &instance->users[user_id];
   117ec:	687d      	ldr	r5, [r7, #4]
   117ee:	eb05 0cc1 	add.w	ip, r5, r1, lsl #3
	if (last >= user->count_user_op) {
   117f2:	f815 9031 	ldrb.w	r9, [r5, r1, lsl #3]
	last = user->last + 1;
   117f6:	f89c 6003 	ldrb.w	r6, [ip, #3]
	struct ticker_instance *instance = &_instance[instance_index];
   117fa:	eb04 0584 	add.w	r5, r4, r4, lsl #2
   117fe:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	last = user->last + 1;
   11802:	1c75      	adds	r5, r6, #1
{
   11804:	4608      	mov	r0, r1
	last = user->last + 1;
   11806:	b2ed      	uxtb	r5, r5
	if (last == user->first) {
   11808:	f89c 1001 	ldrb.w	r1, [ip, #1]
		last = 0U;
   1180c:	45a9      	cmp	r9, r5
   1180e:	bf98      	it	ls
   11810:	2500      	movls	r5, #0
	if (last == user->first) {
   11812:	42a9      	cmp	r1, r5
	struct ticker_instance *instance = &_instance[instance_index];
   11814:	eb08 0884 	add.w	r8, r8, r4, lsl #2
	if (last == user->first) {
   11818:	d02f      	beq.n	1187a <ticker_start_ext+0xa2>
	user_op = &user->user_op[user->last];
   1181a:	f8dc 1004 	ldr.w	r1, [ip, #4]
   1181e:	eb06 0446 	add.w	r4, r6, r6, lsl #1
   11822:	eb06 0684 	add.w	r6, r6, r4, lsl #2
   11826:	eb01 0486 	add.w	r4, r1, r6, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_START;
   1182a:	f04f 0904 	mov.w	r9, #4
   1182e:	f801 9026 	strb.w	r9, [r1, r6, lsl #2]
	user_op->params.start.ticks_at_start = ticks_anchor;
   11832:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
   11834:	9b08      	ldr	r3, [sp, #32]
   11836:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
   11838:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1183a:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
   1183c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1183e:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
   11840:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   11842:	61a3      	str	r3, [r4, #24]
	user_op->params.start.ext_data = ext_data;
   11844:	9b11      	ldr	r3, [sp, #68]	; 0x44
   11846:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->params.start.fp_timeout_func = fp_timeout_func;
   11848:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1184a:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
   1184c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1184e:	6223      	str	r3, [r4, #32]
	user_op->fp_op_func = fp_op_func;
   11850:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   11852:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->status = TICKER_STATUS_BUSY;
   11854:	2102      	movs	r1, #2
	user_op->op_context = op_context;
   11856:	9b10      	ldr	r3, [sp, #64]	; 0x40
	user_op->id = ticker_id;
   11858:	7062      	strb	r2, [r4, #1]
	user_op->params.start.lazy = lazy;
   1185a:	f8a4 e014 	strh.w	lr, [r4, #20]
	user_op->op_context = op_context;
   1185e:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   11860:	62a1      	str	r1, [r4, #40]	; 0x28
	user->last = last;
   11862:	f88c 5003 	strb.w	r5, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   11866:	e9d7 3508 	ldrd	r3, r5, [r7, #32]
   1186a:	4798      	blx	r3
   1186c:	4643      	mov	r3, r8
   1186e:	4649      	mov	r1, r9
   11870:	2200      	movs	r2, #0
   11872:	47a8      	blx	r5
	return user_op->status;
   11874:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   11876:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return TICKER_STATUS_FAILURE;
   1187a:	2001      	movs	r0, #1
}
   1187c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   11880:	20002564 	.word	0x20002564

00011884 <ticker_start>:
{
   11884:	b530      	push	{r4, r5, lr}
   11886:	b08b      	sub	sp, #44	; 0x2c
   11888:	e9dd 540e 	ldrd	r5, r4, [sp, #56]	; 0x38
	return ticker_start_ext(instance_index, user_id, ticker_id,
   1188c:	9500      	str	r5, [sp, #0]
{
   1188e:	9d10      	ldr	r5, [sp, #64]	; 0x40
	return ticker_start_ext(instance_index, user_id, ticker_id,
   11890:	9401      	str	r4, [sp, #4]
   11892:	9502      	str	r5, [sp, #8]
{
   11894:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
   11898:	9d12      	ldr	r5, [sp, #72]	; 0x48
	return ticker_start_ext(instance_index, user_id, ticker_id,
   1189a:	9403      	str	r4, [sp, #12]
   1189c:	9504      	str	r5, [sp, #16]
{
   1189e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   118a0:	9d14      	ldr	r5, [sp, #80]	; 0x50
	return ticker_start_ext(instance_index, user_id, ticker_id,
   118a2:	9405      	str	r4, [sp, #20]
   118a4:	9506      	str	r5, [sp, #24]
{
   118a6:	9c15      	ldr	r4, [sp, #84]	; 0x54
   118a8:	9d16      	ldr	r5, [sp, #88]	; 0x58
	return ticker_start_ext(instance_index, user_id, ticker_id,
   118aa:	9407      	str	r4, [sp, #28]
   118ac:	2400      	movs	r4, #0
   118ae:	e9cd 5408 	strd	r5, r4, [sp, #32]
   118b2:	f7ff ff91 	bl	117d8 <ticker_start_ext>
}
   118b6:	b00b      	add	sp, #44	; 0x2c
   118b8:	bd30      	pop	{r4, r5, pc}
   118ba:	bf00      	nop

000118bc <ticker_update>:
	struct ticker_instance *instance = &_instance[instance_index];
   118bc:	f8df c098 	ldr.w	ip, [pc, #152]	; 11958 <ticker_update+0x9c>
{
   118c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->users[user_id];
   118c4:	272c      	movs	r7, #44	; 0x2c
   118c6:	fb07 c700 	mla	r7, r7, r0, ip
{
   118ca:	4604      	mov	r4, r0
	user = &instance->users[user_id];
   118cc:	687d      	ldr	r5, [r7, #4]
{
   118ce:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   118d2:	f89d e030 	ldrb.w	lr, [sp, #48]	; 0x30
   118d6:	4608      	mov	r0, r1
	user = &instance->users[user_id];
   118d8:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
	if (last >= user->count_user_op) {
   118dc:	f815 a030 	ldrb.w	sl, [r5, r0, lsl #3]
	last = user->last + 1;
   118e0:	78ce      	ldrb	r6, [r1, #3]
	if (last == user->first) {
   118e2:	f891 9001 	ldrb.w	r9, [r1, #1]
	struct ticker_instance *instance = &_instance[instance_index];
   118e6:	eb04 0584 	add.w	r5, r4, r4, lsl #2
   118ea:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	last = user->last + 1;
   118ee:	1c75      	adds	r5, r6, #1
   118f0:	b2ed      	uxtb	r5, r5
		last = 0U;
   118f2:	45aa      	cmp	sl, r5
   118f4:	bf98      	it	ls
   118f6:	2500      	movls	r5, #0
	if (last == user->first) {
   118f8:	45a9      	cmp	r9, r5
	struct ticker_instance *instance = &_instance[instance_index];
   118fa:	eb0c 0a84 	add.w	sl, ip, r4, lsl #2
	if (last == user->first) {
   118fe:	d028      	beq.n	11952 <ticker_update+0x96>
	user_op = &user->user_op[user->last];
   11900:	f8d1 c004 	ldr.w	ip, [r1, #4]
   11904:	eb06 0446 	add.w	r4, r6, r6, lsl #1
   11908:	eb06 0684 	add.w	r6, r6, r4, lsl #2
   1190c:	eb0c 0486 	add.w	r4, ip, r6, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
   11910:	f04f 0905 	mov.w	r9, #5
   11914:	f80c 9026 	strb.w	r9, [ip, r6, lsl #2]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
   11918:	6063      	str	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
   1191a:	9b08      	ldr	r3, [sp, #32]
   1191c:	60a3      	str	r3, [r4, #8]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
   1191e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11920:	60e3      	str	r3, [r4, #12]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
   11922:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11924:	6123      	str	r3, [r4, #16]
	user_op->fp_op_func = fp_op_func;
   11926:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   11928:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->status = TICKER_STATUS_BUSY;
   1192a:	2602      	movs	r6, #2
	user_op->op_context = op_context;
   1192c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	user_op->id = ticker_id;
   1192e:	7062      	strb	r2, [r4, #1]
	user_op->params.update.force = force;
   11930:	f884 e016 	strb.w	lr, [r4, #22]
	user_op->op_context = op_context;
   11934:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->params.update.lazy = lazy;
   11936:	f8a4 8014 	strh.w	r8, [r4, #20]
	user_op->status = TICKER_STATUS_BUSY;
   1193a:	62a6      	str	r6, [r4, #40]	; 0x28
	user->last = last;
   1193c:	70cd      	strb	r5, [r1, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   1193e:	e9d7 3508 	ldrd	r3, r5, [r7, #32]
   11942:	4798      	blx	r3
   11944:	4653      	mov	r3, sl
   11946:	2200      	movs	r2, #0
   11948:	2104      	movs	r1, #4
   1194a:	47a8      	blx	r5
	return user_op->status;
   1194c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   1194e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
   11952:	2001      	movs	r0, #1
}
   11954:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11958:	20002564 	.word	0x20002564

0001195c <ticker_stop>:
	struct ticker_instance *instance = &_instance[instance_index];
   1195c:	f8df c084 	ldr.w	ip, [pc, #132]	; 119e4 <ticker_stop+0x88>
{
   11960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	user = &instance->users[user_id];
   11964:	272c      	movs	r7, #44	; 0x2c
   11966:	fb07 c700 	mla	r7, r7, r0, ip
{
   1196a:	4604      	mov	r4, r0
	user = &instance->users[user_id];
   1196c:	687d      	ldr	r5, [r7, #4]
{
   1196e:	4608      	mov	r0, r1
	user = &instance->users[user_id];
   11970:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
	if (last >= user->count_user_op) {
   11974:	f815 8030 	ldrb.w	r8, [r5, r0, lsl #3]
	last = user->last + 1;
   11978:	78ce      	ldrb	r6, [r1, #3]
	if (last == user->first) {
   1197a:	f891 e001 	ldrb.w	lr, [r1, #1]
	struct ticker_instance *instance = &_instance[instance_index];
   1197e:	eb04 0584 	add.w	r5, r4, r4, lsl #2
   11982:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	last = user->last + 1;
   11986:	1c75      	adds	r5, r6, #1
   11988:	b2ed      	uxtb	r5, r5
		last = 0U;
   1198a:	45a8      	cmp	r8, r5
   1198c:	bf98      	it	ls
   1198e:	2500      	movls	r5, #0
	if (last == user->first) {
   11990:	45ae      	cmp	lr, r5
	struct ticker_instance *instance = &_instance[instance_index];
   11992:	eb0c 0484 	add.w	r4, ip, r4, lsl #2
	if (last == user->first) {
   11996:	d021      	beq.n	119dc <ticker_stop+0x80>
	user_op = &user->user_op[user->last];
   11998:	f8d1 c004 	ldr.w	ip, [r1, #4]
   1199c:	eb06 0e46 	add.w	lr, r6, r6, lsl #1
   119a0:	eb06 068e 	add.w	r6, r6, lr, lsl #2
   119a4:	eb0c 0886 	add.w	r8, ip, r6, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_STOP;
   119a8:	f04f 0e06 	mov.w	lr, #6
   119ac:	f80c e026 	strb.w	lr, [ip, r6, lsl #2]
	user_op->fp_op_func = fp_op_func;
   119b0:	f8c8 302c 	str.w	r3, [r8, #44]	; 0x2c
	user_op->status = TICKER_STATUS_BUSY;
   119b4:	2602      	movs	r6, #2
	user_op->op_context = op_context;
   119b6:	9b06      	ldr	r3, [sp, #24]
	user_op->id = ticker_id;
   119b8:	f888 2001 	strb.w	r2, [r8, #1]
	user_op->op_context = op_context;
   119bc:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   119c0:	f8c8 6028 	str.w	r6, [r8, #40]	; 0x28
	user->last = last;
   119c4:	70cd      	strb	r5, [r1, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   119c6:	e9d7 3508 	ldrd	r3, r5, [r7, #32]
   119ca:	4798      	blx	r3
   119cc:	4623      	mov	r3, r4
   119ce:	2200      	movs	r2, #0
   119d0:	2104      	movs	r1, #4
   119d2:	47a8      	blx	r5
	return user_op->status;
   119d4:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
}
   119d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   119dc:	2001      	movs	r0, #1
}
   119de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   119e2:	bf00      	nop
   119e4:	20002564 	.word	0x20002564

000119e8 <ticker_ticks_now_get>:
	return cntr_cnt_get();
   119e8:	f009 b836 	b.w	1aa58 <cntr_cnt_get>

000119ec <ll_addr_get>:
static uint8_t pub_addr[BDADDR_SIZE];
static uint8_t rnd_addr[BDADDR_SIZE];

uint8_t *ll_addr_get(uint8_t addr_type, uint8_t *bdaddr)
{
	if (addr_type > 1) {
   119ec:	2801      	cmp	r0, #1
   119ee:	d813      	bhi.n	11a18 <ll_addr_get+0x2c>
{
   119f0:	b508      	push	{r3, lr}
		return NULL;
	}

	if (addr_type) {
   119f2:	b948      	cbnz	r0, 11a08 <ll_addr_get+0x1c>
		}

		return rnd_addr;
	}

	if (bdaddr) {
   119f4:	b131      	cbz	r1, 11a04 <ll_addr_get+0x18>
		memcpy(bdaddr, pub_addr, BDADDR_SIZE);
   119f6:	4608      	mov	r0, r1
   119f8:	2206      	movs	r2, #6
   119fa:	4909      	ldr	r1, [pc, #36]	; (11a20 <ll_addr_get+0x34>)
   119fc:	f00e fa37 	bl	1fe6e <memcpy>
	}

	return pub_addr;
   11a00:	4807      	ldr	r0, [pc, #28]	; (11a20 <ll_addr_get+0x34>)
}
   11a02:	bd08      	pop	{r3, pc}
	return pub_addr;
   11a04:	4806      	ldr	r0, [pc, #24]	; (11a20 <ll_addr_get+0x34>)
}
   11a06:	bd08      	pop	{r3, pc}
		if (bdaddr) {
   11a08:	b141      	cbz	r1, 11a1c <ll_addr_get+0x30>
			memcpy(bdaddr, rnd_addr, BDADDR_SIZE);
   11a0a:	4608      	mov	r0, r1
   11a0c:	2206      	movs	r2, #6
   11a0e:	4905      	ldr	r1, [pc, #20]	; (11a24 <ll_addr_get+0x38>)
   11a10:	f00e fa2d 	bl	1fe6e <memcpy>
		return rnd_addr;
   11a14:	4803      	ldr	r0, [pc, #12]	; (11a24 <ll_addr_get+0x38>)
}
   11a16:	bd08      	pop	{r3, pc}
		return NULL;
   11a18:	2000      	movs	r0, #0
}
   11a1a:	4770      	bx	lr
		return rnd_addr;
   11a1c:	4801      	ldr	r0, [pc, #4]	; (11a24 <ll_addr_get+0x38>)
}
   11a1e:	bd08      	pop	{r3, pc}
   11a20:	20002590 	.word	0x20002590
   11a24:	20002598 	.word	0x20002598

00011a28 <ll_addr_set>:

uint32_t ll_addr_set(uint8_t addr_type, uint8_t const *const bdaddr)
{
   11a28:	b570      	push	{r4, r5, r6, lr}
   11a2a:	4606      	mov	r6, r0
			return BT_HCI_ERR_CMD_DISALLOWED;
		}
	}

	if (IS_ENABLED(CONFIG_BT_OBSERVER) &&
	    (ull_scan_is_enabled(0) & (BIT(1) | BIT(2)))) {
   11a2c:	2000      	movs	r0, #0
{
   11a2e:	460d      	mov	r5, r1
	    (ull_scan_is_enabled(0) & (BIT(1) | BIT(2)))) {
   11a30:	f003 f820 	bl	14a74 <ull_scan_is_enabled>
	if (IS_ENABLED(CONFIG_BT_OBSERVER) &&
   11a34:	f010 0406 	ands.w	r4, r0, #6
   11a38:	d10c      	bne.n	11a54 <ll_addr_set+0x2c>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	if (addr_type) {
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
   11a3a:	4629      	mov	r1, r5
   11a3c:	2206      	movs	r2, #6
	if (addr_type) {
   11a3e:	b926      	cbnz	r6, 11a4a <ll_addr_set+0x22>
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
   11a40:	4806      	ldr	r0, [pc, #24]	; (11a5c <ll_addr_set+0x34>)
   11a42:	f00e fa14 	bl	1fe6e <memcpy>
	}

	return 0;
}
   11a46:	4620      	mov	r0, r4
   11a48:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
   11a4a:	4805      	ldr	r0, [pc, #20]	; (11a60 <ll_addr_set+0x38>)
   11a4c:	f00e fa0f 	bl	1fe6e <memcpy>
}
   11a50:	4620      	mov	r0, r4
   11a52:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   11a54:	240c      	movs	r4, #12
}
   11a56:	4620      	mov	r0, r4
   11a58:	bd70      	pop	{r4, r5, r6, pc}
   11a5a:	bf00      	nop
   11a5c:	20002590 	.word	0x20002590
   11a60:	20002598 	.word	0x20002598

00011a64 <ll_tx_pwr_lvl_get>:
#include "ull_conn_internal.h"

uint8_t ll_tx_pwr_lvl_get(uint8_t handle_type,
		       uint16_t handle, uint8_t type, int8_t *tx_pwr_lvl)
{
	switch (handle_type) {
   11a64:	2802      	cmp	r0, #2
   11a66:	d001      	beq.n	11a6c <ll_tx_pwr_lvl_get+0x8>
			}
			break;
		}
#endif /* CONFIG_BT_CONN */
		default: {
			return BT_HCI_ERR_UNKNOWN_CMD;
   11a68:	2001      	movs	r0, #1
		}
	}

	return BT_HCI_ERR_SUCCESS;
}
   11a6a:	4770      	bx	lr
{
   11a6c:	b538      	push	{r3, r4, r5, lr}
   11a6e:	4604      	mov	r4, r0
			conn = ll_connected_get(handle);
   11a70:	4608      	mov	r0, r1
   11a72:	461d      	mov	r5, r3
   11a74:	f003 fc02 	bl	1527c <ll_connected_get>
			if (!conn) {
   11a78:	b110      	cbz	r0, 11a80 <ll_tx_pwr_lvl_get+0x1c>
				*tx_pwr_lvl = RADIO_TXP_DEFAULT;
   11a7a:	2000      	movs	r0, #0
   11a7c:	7028      	strb	r0, [r5, #0]
}
   11a7e:	bd38      	pop	{r3, r4, r5, pc}
				return BT_HCI_ERR_UNKNOWN_CONN_ID;
   11a80:	4620      	mov	r0, r4
}
   11a82:	bd38      	pop	{r3, r4, r5, pc}

00011a84 <ll_tx_pwr_get>:
{
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	*min = lll_radio_tx_pwr_min_get();
	*max = lll_radio_tx_pwr_max_get();
#else
	*min = RADIO_TXP_DEFAULT;
   11a84:	2300      	movs	r3, #0
   11a86:	7003      	strb	r3, [r0, #0]
	*max = RADIO_TXP_DEFAULT;
   11a88:	700b      	strb	r3, [r1, #0]
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */
}
   11a8a:	4770      	bx	lr

00011a8c <hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int hci_driver_init(struct device *unused)
{
   11a8c:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
   11a8e:	4802      	ldr	r0, [pc, #8]	; (11a98 <hci_driver_init+0xc>)
   11a90:	f7f8 f93e 	bl	9d10 <bt_hci_driver_register>

	return 0;
}
   11a94:	2000      	movs	r0, #0
   11a96:	bd08      	pop	{r3, pc}
   11a98:	000240d4 	.word	0x000240d4

00011a9c <recv_thread>:
{
   11a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
	return z_impl_k_queue_get(queue, timeout);
   11a9e:	4d37      	ldr	r5, [pc, #220]	; (11b7c <recv_thread+0xe0>)
		LL_ASSERT(0);
   11aa0:	4f37      	ldr	r7, [pc, #220]	; (11b80 <recv_thread+0xe4>)
   11aa2:	4e38      	ldr	r6, [pc, #224]	; (11b84 <recv_thread+0xe8>)
{
   11aa4:	b083      	sub	sp, #12
   11aa6:	e015      	b.n	11ad4 <recv_thread+0x38>
	switch (class) {
   11aa8:	2b00      	cmp	r3, #0
   11aaa:	d13c      	bne.n	11b26 <recv_thread+0x8a>
		LL_ASSERT(0);
   11aac:	4836      	ldr	r0, [pc, #216]	; (11b88 <recv_thread+0xec>)
   11aae:	23b4      	movs	r3, #180	; 0xb4
   11ab0:	463a      	mov	r2, r7
   11ab2:	4631      	mov	r1, r6
   11ab4:	f00c fa49 	bl	1df4a <printk>
   11ab8:	4040      	eors	r0, r0
   11aba:	f380 8811 	msr	BASEPRI, r0
   11abe:	f04f 0003 	mov.w	r0, #3
   11ac2:	df02      	svc	2
	node_rx->hdr.next = NULL;
   11ac4:	9b01      	ldr	r3, [sp, #4]
   11ac6:	2200      	movs	r2, #0
   11ac8:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   11aca:	a801      	add	r0, sp, #4
   11acc:	f002 fae6 	bl	1409c <ll_rx_mem_release>
	z_impl_k_yield();
   11ad0:	f00b fdda 	bl	1d688 <z_impl_k_yield>
	return z_impl_k_queue_get(queue, timeout);
   11ad4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   11ad8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11adc:	4628      	mov	r0, r5
   11ade:	f00b fac3 	bl	1d068 <z_impl_k_queue_get>
		if (node_rx && !buf) {
   11ae2:	2800      	cmp	r0, #0
   11ae4:	d0f4      	beq.n	11ad0 <recv_thread+0x34>
	uint8_t class = node_rx->hdr.user_meta;
   11ae6:	7943      	ldrb	r3, [r0, #5]
	buf = encode_node(node_rx, class);
   11ae8:	9001      	str	r0, [sp, #4]
	switch (class) {
   11aea:	2b04      	cmp	r3, #4
   11aec:	d9dc      	bls.n	11aa8 <recv_thread+0xc>
   11aee:	2b05      	cmp	r3, #5
   11af0:	d1dc      	bne.n	11aac <recv_thread+0x10>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   11af2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   11af6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11afa:	2003      	movs	r0, #3
   11afc:	f7f8 fbae 	bl	a25c <bt_buf_get_rx>
   11b00:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
   11b02:	4601      	mov	r1, r0
   11b04:	9801      	ldr	r0, [sp, #4]
   11b06:	f000 ff31 	bl	1296c <hci_acl_encode>
	node_rx->hdr.next = NULL;
   11b0a:	9b01      	ldr	r3, [sp, #4]
   11b0c:	2200      	movs	r2, #0
   11b0e:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   11b10:	a801      	add	r0, sp, #4
   11b12:	f002 fac3 	bl	1409c <ll_rx_mem_release>
		if (buf) {
   11b16:	2c00      	cmp	r4, #0
   11b18:	d0da      	beq.n	11ad0 <recv_thread+0x34>
			if (buf->len) {
   11b1a:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
   11b1c:	4620      	mov	r0, r4
			if (buf->len) {
   11b1e:	b1db      	cbz	r3, 11b58 <recv_thread+0xbc>
				bt_recv(buf);
   11b20:	f7f7 fff6 	bl	9b10 <bt_recv>
   11b24:	e7d4      	b.n	11ad0 <recv_thread+0x34>
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
   11b26:	2b02      	cmp	r3, #2
   11b28:	d019      	beq.n	11b5e <recv_thread+0xc2>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   11b2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   11b2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11b32:	2001      	movs	r0, #1
   11b34:	f7f8 fb92 	bl	a25c <bt_buf_get_rx>
   11b38:	4604      	mov	r4, r0
		if (buf) {
   11b3a:	9801      	ldr	r0, [sp, #4]
   11b3c:	b1cc      	cbz	r4, 11b72 <recv_thread+0xd6>
			hci_evt_encode(node_rx, buf);
   11b3e:	4621      	mov	r1, r4
   11b40:	f000 ff4e 	bl	129e0 <hci_evt_encode>
	node_rx->hdr.next = NULL;
   11b44:	9b01      	ldr	r3, [sp, #4]
   11b46:	2200      	movs	r2, #0
   11b48:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   11b4a:	a801      	add	r0, sp, #4
   11b4c:	f002 faa6 	bl	1409c <ll_rx_mem_release>
			if (buf->len) {
   11b50:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
   11b52:	4620      	mov	r0, r4
			if (buf->len) {
   11b54:	2b00      	cmp	r3, #0
   11b56:	d1e3      	bne.n	11b20 <recv_thread+0x84>
				net_buf_unref(buf);
   11b58:	f009 ffbe 	bl	1bad8 <net_buf_unref>
   11b5c:	e7b8      	b.n	11ad0 <recv_thread+0x34>
			buf = bt_buf_get_evt(BT_HCI_EVT_UNKNOWN, true,
   11b5e:	2200      	movs	r2, #0
   11b60:	2300      	movs	r3, #0
   11b62:	2101      	movs	r1, #1
   11b64:	2000      	movs	r0, #0
   11b66:	f7f8 fbaf 	bl	a2c8 <bt_buf_get_evt>
   11b6a:	4604      	mov	r4, r0
		if (buf) {
   11b6c:	9801      	ldr	r0, [sp, #4]
   11b6e:	2c00      	cmp	r4, #0
   11b70:	d1e5      	bne.n	11b3e <recv_thread+0xa2>
	node_rx->hdr.next = NULL;
   11b72:	6004      	str	r4, [r0, #0]
	ll_rx_mem_release((void **)&node_rx);
   11b74:	a801      	add	r0, sp, #4
   11b76:	f002 fa91 	bl	1409c <ll_rx_mem_release>
		if (buf) {
   11b7a:	e7a9      	b.n	11ad0 <recv_thread+0x34>
   11b7c:	200008c0 	.word	0x200008c0
   11b80:	00024014 	.word	0x00024014
   11b84:	00024054 	.word	0x00024054
   11b88:	00023fe4 	.word	0x00023fe4

00011b8c <prio_recv_thread>:
{
   11b8c:	b570      	push	{r4, r5, r6, lr}
	return z_impl_k_sem_take(sem, timeout);
   11b8e:	4e1a      	ldr	r6, [pc, #104]	; (11bf8 <prio_recv_thread+0x6c>)
				k_fifo_put(&recv_fifo, node_rx);
   11b90:	4d1a      	ldr	r5, [pc, #104]	; (11bfc <prio_recv_thread+0x70>)
{
   11b92:	b082      	sub	sp, #8
   11b94:	e00c      	b.n	11bb0 <prio_recv_thread+0x24>
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   11b96:	f7f8 fb97 	bl	a2c8 <bt_buf_get_evt>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
   11b9a:	4622      	mov	r2, r4
   11b9c:	f8bd 1002 	ldrh.w	r1, [sp, #2]
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   11ba0:	4604      	mov	r4, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
   11ba2:	f001 fb41 	bl	13228 <hci_num_cmplt_encode>
			bt_recv_prio(buf);
   11ba6:	4620      	mov	r0, r4
   11ba8:	f7f8 f85c 	bl	9c64 <bt_recv_prio>
	z_impl_k_yield();
   11bac:	f00b fd6c 	bl	1d688 <z_impl_k_yield>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   11bb0:	f10d 0102 	add.w	r1, sp, #2
   11bb4:	a801      	add	r0, sp, #4
   11bb6:	f002 f91d 	bl	13df4 <ll_rx_get>
   11bba:	4604      	mov	r4, r0
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   11bbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   11bc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11bc4:	2100      	movs	r1, #0
   11bc6:	2013      	movs	r0, #19
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   11bc8:	2c00      	cmp	r4, #0
   11bca:	d1e4      	bne.n	11b96 <prio_recv_thread+0xa>
		if (node_rx) {
   11bcc:	9b01      	ldr	r3, [sp, #4]
   11bce:	b15b      	cbz	r3, 11be8 <prio_recv_thread+0x5c>
			ll_rx_dequeue();
   11bd0:	f002 f9f6 	bl	13fc0 <ll_rx_dequeue>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   11bd4:	9c01      	ldr	r4, [sp, #4]
   11bd6:	4620      	mov	r0, r4
   11bd8:	f001 fb3e 	bl	13258 <hci_get_class>
				k_fifo_put(&recv_fifo, node_rx);
   11bdc:	9901      	ldr	r1, [sp, #4]
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   11bde:	7160      	strb	r0, [r4, #5]
				k_fifo_put(&recv_fifo, node_rx);
   11be0:	4628      	mov	r0, r5
   11be2:	f011 f88f 	bl	22d04 <k_queue_append>
			continue;
   11be6:	e7e3      	b.n	11bb0 <prio_recv_thread+0x24>
	return z_impl_k_sem_take(sem, timeout);
   11be8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   11bec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11bf0:	4630      	mov	r0, r6
   11bf2:	f00b fde3 	bl	1d7bc <z_impl_k_sem_take>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   11bf6:	e7db      	b.n	11bb0 <prio_recv_thread+0x24>
   11bf8:	20000890 	.word	0x20000890
   11bfc:	200008c0 	.word	0x200008c0

00011c00 <hci_driver_send>:
{
   11c00:	b530      	push	{r4, r5, lr}
	if (!buf->len) {
   11c02:	8983      	ldrh	r3, [r0, #12]
{
   11c04:	b083      	sub	sp, #12
	if (!buf->len) {
   11c06:	2b00      	cmp	r3, #0
   11c08:	d03a      	beq.n	11c80 <hci_driver_send+0x80>
	return (enum bt_buf_type)(*(uint8_t *)net_buf_user_data(buf));
   11c0a:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   11c0c:	4604      	mov	r4, r0
   11c0e:	b31b      	cbz	r3, 11c58 <hci_driver_send+0x58>
   11c10:	2b02      	cmp	r3, #2
   11c12:	d00f      	beq.n	11c34 <hci_driver_send+0x34>
   11c14:	4921      	ldr	r1, [pc, #132]	; (11c9c <hci_driver_send+0x9c>)
   11c16:	4a22      	ldr	r2, [pc, #136]	; (11ca0 <hci_driver_send+0xa0>)
		BT_ERR("Unknown HCI type %u", type);
   11c18:	4822      	ldr	r0, [pc, #136]	; (11ca4 <hci_driver_send+0xa4>)
   11c1a:	1a52      	subs	r2, r2, r1
   11c1c:	08d2      	lsrs	r2, r2, #3
   11c1e:	0192      	lsls	r2, r2, #6
   11c20:	4619      	mov	r1, r3
   11c22:	f042 0201 	orr.w	r2, r2, #1
   11c26:	f00c fc5d 	bl	1e4e4 <log_1>
		return -EINVAL;
   11c2a:	f06f 0515 	mvn.w	r5, #21
}
   11c2e:	4628      	mov	r0, r5
   11c30:	b003      	add	sp, #12
   11c32:	bd30      	pop	{r4, r5, pc}
	err = hci_acl_handle(buf, &evt);
   11c34:	a901      	add	r1, sp, #4
   11c36:	f000 fe01 	bl	1283c <hci_acl_handle>
	if (evt) {
   11c3a:	9b01      	ldr	r3, [sp, #4]
	err = hci_acl_handle(buf, &evt);
   11c3c:	4605      	mov	r5, r0
	if (evt) {
   11c3e:	b113      	cbz	r3, 11c46 <hci_driver_send+0x46>
		bt_recv_prio(evt);
   11c40:	4618      	mov	r0, r3
   11c42:	f7f8 f80f 	bl	9c64 <bt_recv_prio>
	if (!err) {
   11c46:	2d00      	cmp	r5, #0
   11c48:	d1f1      	bne.n	11c2e <hci_driver_send+0x2e>
		net_buf_unref(buf);
   11c4a:	4620      	mov	r0, r4
   11c4c:	f009 ff44 	bl	1bad8 <net_buf_unref>
   11c50:	2500      	movs	r5, #0
}
   11c52:	4628      	mov	r0, r5
   11c54:	b003      	add	sp, #12
   11c56:	bd30      	pop	{r4, r5, pc}
	evt = hci_cmd_handle(buf, (void **) &node_rx);
   11c58:	a901      	add	r1, sp, #4
	struct node_rx_pdu *node_rx = NULL;
   11c5a:	9301      	str	r3, [sp, #4]
	evt = hci_cmd_handle(buf, (void **) &node_rx);
   11c5c:	f000 f9c8 	bl	11ff0 <hci_cmd_handle>
	if (evt) {
   11c60:	2800      	cmp	r0, #0
   11c62:	d0f2      	beq.n	11c4a <hci_driver_send+0x4a>
		bt_recv_prio(evt);
   11c64:	f7f7 fffe 	bl	9c64 <bt_recv_prio>
		if (node_rx) {
   11c68:	9d01      	ldr	r5, [sp, #4]
   11c6a:	2d00      	cmp	r5, #0
   11c6c:	d0ed      	beq.n	11c4a <hci_driver_send+0x4a>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   11c6e:	4628      	mov	r0, r5
   11c70:	f001 faf2 	bl	13258 <hci_get_class>
   11c74:	7168      	strb	r0, [r5, #5]
			k_fifo_put(&recv_fifo, node_rx);
   11c76:	9901      	ldr	r1, [sp, #4]
   11c78:	480b      	ldr	r0, [pc, #44]	; (11ca8 <hci_driver_send+0xa8>)
   11c7a:	f011 f843 	bl	22d04 <k_queue_append>
	if (!err) {
   11c7e:	e7e4      	b.n	11c4a <hci_driver_send+0x4a>
   11c80:	4b06      	ldr	r3, [pc, #24]	; (11c9c <hci_driver_send+0x9c>)
   11c82:	4907      	ldr	r1, [pc, #28]	; (11ca0 <hci_driver_send+0xa0>)
		BT_ERR("Empty HCI packet");
   11c84:	4809      	ldr	r0, [pc, #36]	; (11cac <hci_driver_send+0xac>)
   11c86:	1ac9      	subs	r1, r1, r3
   11c88:	08c9      	lsrs	r1, r1, #3
   11c8a:	0189      	lsls	r1, r1, #6
   11c8c:	f041 0101 	orr.w	r1, r1, #1
   11c90:	f00c fc1b 	bl	1e4ca <log_0>
		return -EINVAL;
   11c94:	f06f 0515 	mvn.w	r5, #21
   11c98:	e7c9      	b.n	11c2e <hci_driver_send+0x2e>
   11c9a:	bf00      	nop
   11c9c:	000236e8 	.word	0x000236e8
   11ca0:	00023728 	.word	0x00023728
   11ca4:	0002406c 	.word	0x0002406c
   11ca8:	200008c0 	.word	0x200008c0
   11cac:	00024058 	.word	0x00024058

00011cb0 <hci_driver_open>:
{
   11cb0:	b5d0      	push	{r4, r6, r7, lr}
	err = ll_init(&sem_prio_recv);
   11cb2:	4822      	ldr	r0, [pc, #136]	; (11d3c <hci_driver_open+0x8c>)
{
   11cb4:	b088      	sub	sp, #32
	err = ll_init(&sem_prio_recv);
   11cb6:	f001 fd95 	bl	137e4 <ll_init>
	if (err) {
   11cba:	4604      	mov	r4, r0
   11cbc:	2800      	cmp	r0, #0
   11cbe:	d12e      	bne.n	11d1e <hci_driver_open+0x6e>
	hci_init(NULL);
   11cc0:	f001 fae0 	bl	13284 <hci_init>
	k_thread_create(&prio_recv_thread_data, prio_recv_thread_stack,
   11cc4:	2600      	movs	r6, #0
   11cc6:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   11cc8:	f06f 0309 	mvn.w	r3, #9
   11ccc:	9303      	str	r3, [sp, #12]
   11cce:	e9cd 6706 	strd	r6, r7, [sp, #24]
   11cd2:	e9cd 4401 	strd	r4, r4, [sp, #4]
   11cd6:	4b1a      	ldr	r3, [pc, #104]	; (11d40 <hci_driver_open+0x90>)
   11cd8:	491a      	ldr	r1, [pc, #104]	; (11d44 <hci_driver_open+0x94>)
   11cda:	9404      	str	r4, [sp, #16]
   11cdc:	9400      	str	r4, [sp, #0]
   11cde:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
   11ce2:	4819      	ldr	r0, [pc, #100]	; (11d48 <hci_driver_open+0x98>)
   11ce4:	f00b fdd2 	bl	1d88c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   11ce8:	4918      	ldr	r1, [pc, #96]	; (11d4c <hci_driver_open+0x9c>)
   11cea:	4817      	ldr	r0, [pc, #92]	; (11d48 <hci_driver_open+0x98>)
   11cec:	f011 f995 	bl	2301a <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   11cf0:	f06f 0307 	mvn.w	r3, #7
   11cf4:	9303      	str	r3, [sp, #12]
   11cf6:	e9cd 6706 	strd	r6, r7, [sp, #24]
   11cfa:	e9cd 4401 	strd	r4, r4, [sp, #4]
   11cfe:	4b14      	ldr	r3, [pc, #80]	; (11d50 <hci_driver_open+0xa0>)
   11d00:	4914      	ldr	r1, [pc, #80]	; (11d54 <hci_driver_open+0xa4>)
   11d02:	9404      	str	r4, [sp, #16]
   11d04:	9400      	str	r4, [sp, #0]
   11d06:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   11d0a:	4813      	ldr	r0, [pc, #76]	; (11d58 <hci_driver_open+0xa8>)
   11d0c:	f00b fdbe 	bl	1d88c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   11d10:	4912      	ldr	r1, [pc, #72]	; (11d5c <hci_driver_open+0xac>)
   11d12:	4811      	ldr	r0, [pc, #68]	; (11d58 <hci_driver_open+0xa8>)
   11d14:	f011 f981 	bl	2301a <z_impl_k_thread_name_set>
}
   11d18:	4620      	mov	r0, r4
   11d1a:	b008      	add	sp, #32
   11d1c:	bdd0      	pop	{r4, r6, r7, pc}
   11d1e:	4b10      	ldr	r3, [pc, #64]	; (11d60 <hci_driver_open+0xb0>)
   11d20:	4a10      	ldr	r2, [pc, #64]	; (11d64 <hci_driver_open+0xb4>)
		BT_ERR("LL initialization failed: %d", err);
   11d22:	4811      	ldr	r0, [pc, #68]	; (11d68 <hci_driver_open+0xb8>)
   11d24:	1ad2      	subs	r2, r2, r3
   11d26:	08d2      	lsrs	r2, r2, #3
   11d28:	0192      	lsls	r2, r2, #6
   11d2a:	f042 0201 	orr.w	r2, r2, #1
   11d2e:	4621      	mov	r1, r4
   11d30:	f00c fbd8 	bl	1e4e4 <log_1>
}
   11d34:	4620      	mov	r0, r4
   11d36:	b008      	add	sp, #32
   11d38:	bdd0      	pop	{r4, r6, r7, pc}
   11d3a:	bf00      	nop
   11d3c:	20000890 	.word	0x20000890
   11d40:	00011b8d 	.word	0x00011b8d
   11d44:	2000bb00 	.word	0x2000bb00
   11d48:	200019b0 	.word	0x200019b0
   11d4c:	000240a0 	.word	0x000240a0
   11d50:	00011a9d 	.word	0x00011a9d
   11d54:	2000bcc0 	.word	0x2000bcc0
   11d58:	20001a30 	.word	0x20001a30
   11d5c:	000240ac 	.word	0x000240ac
   11d60:	000236e8 	.word	0x000236e8
   11d64:	00023728 	.word	0x00023728
   11d68:	00024080 	.word	0x00024080

00011d6c <meta_evt>:
{
	return bt_hci_cmd_status_create(_opcode, status);
}

static void *meta_evt(struct net_buf *buf, uint8_t subevt, uint8_t melen)
{
   11d6c:	b570      	push	{r4, r5, r6, lr}
	hdr = net_buf_add(buf, sizeof(*hdr));
   11d6e:	f100 0408 	add.w	r4, r0, #8
{
   11d72:	460e      	mov	r6, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
   11d74:	4620      	mov	r0, r4
   11d76:	2102      	movs	r1, #2
{
   11d78:	4615      	mov	r5, r2
	hdr = net_buf_add(buf, sizeof(*hdr));
   11d7a:	f010 fc09 	bl	22590 <net_buf_simple_add>
	struct bt_hci_evt_le_meta_event *me;

	hci_evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
   11d7e:	1c6b      	adds	r3, r5, #1
	hdr->evt = evt;
   11d80:	223e      	movs	r2, #62	; 0x3e
   11d82:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
   11d84:	7043      	strb	r3, [r0, #1]
	me = net_buf_add(buf, sizeof(*me));
   11d86:	2101      	movs	r1, #1
   11d88:	4620      	mov	r0, r4
   11d8a:	f010 fc01 	bl	22590 <net_buf_simple_add>
	me->subevent = subevt;
   11d8e:	7006      	strb	r6, [r0, #0]

	return net_buf_add(buf, melen);
   11d90:	4629      	mov	r1, r5
   11d92:	4620      	mov	r0, r4
}
   11d94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return net_buf_add(buf, melen);
   11d98:	f010 bbfa 	b.w	22590 <net_buf_simple_add>

00011d9c <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(uint8_t status, struct pdu_data *pdu_data,
				    uint16_t handle, struct net_buf *buf)
{
   11d9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   11da0:	4c17      	ldr	r4, [pc, #92]	; (11e00 <le_remote_feat_complete+0x64>)
   11da2:	6866      	ldr	r6, [r4, #4]
   11da4:	f04f 0900 	mov.w	r9, #0
   11da8:	464c      	mov	r4, r9
   11daa:	f006 5500 	and.w	r5, r6, #536870912	; 0x20000000
{
   11dae:	4617      	mov	r7, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   11db0:	ea54 0205 	orrs.w	r2, r4, r5
   11db4:	d009      	beq.n	11dca <le_remote_feat_complete+0x2e>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
   11db6:	4a13      	ldr	r2, [pc, #76]	; (11e04 <le_remote_feat_complete+0x68>)
   11db8:	6812      	ldr	r2, [r2, #0]
   11dba:	4606      	mov	r6, r0
   11dbc:	4688      	mov	r8, r1
   11dbe:	f002 0008 	and.w	r0, r2, #8
   11dc2:	4649      	mov	r1, r9
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   11dc4:	ea50 0201 	orrs.w	r2, r0, r1
   11dc8:	d101      	bne.n	11dce <le_remote_feat_complete+0x32>
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
   11dca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
   11dce:	4618      	mov	r0, r3
   11dd0:	220b      	movs	r2, #11
   11dd2:	2104      	movs	r1, #4
   11dd4:	f7ff ffca 	bl	11d6c <meta_evt>
	sep->status = status;
   11dd8:	7006      	strb	r6, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
   11dda:	f8a0 7001 	strh.w	r7, [r0, #1]
	if (!status) {
   11dde:	b93e      	cbnz	r6, 11df0 <le_remote_feat_complete+0x54>
		memcpy(&sep->features[0],
   11de0:	f108 0104 	add.w	r1, r8, #4
   11de4:	3003      	adds	r0, #3
}
   11de6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		memcpy(&sep->features[0],
   11dea:	2208      	movs	r2, #8
   11dec:	f00e b83f 	b.w	1fe6e <memcpy>
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
   11df0:	4649      	mov	r1, r9
   11df2:	3003      	adds	r0, #3
}
   11df4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
   11df8:	2208      	movs	r2, #8
   11dfa:	f00e b863 	b.w	1fec4 <memset>
   11dfe:	bf00      	nop
   11e00:	20000108 	.word	0x20000108
   11e04:	20000110 	.word	0x20000110

00011e08 <encrypt_change.part.0>:
static void encrypt_change(uint8_t err, uint16_t handle,
   11e08:	b570      	push	{r4, r5, r6, lr}
	hdr = net_buf_add(buf, sizeof(*hdr));
   11e0a:	f102 0508 	add.w	r5, r2, #8
static void encrypt_change(uint8_t err, uint16_t handle,
   11e0e:	4604      	mov	r4, r0
   11e10:	460e      	mov	r6, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
   11e12:	4628      	mov	r0, r5
   11e14:	2102      	movs	r1, #2
   11e16:	f010 fbbb 	bl	22590 <net_buf_simple_add>
   11e1a:	4603      	mov	r3, r0
	hdr->evt = evt;
   11e1c:	2208      	movs	r2, #8
	hdr->len = len;
   11e1e:	2104      	movs	r1, #4
	hdr->evt = evt;
   11e20:	701a      	strb	r2, [r3, #0]
	hdr->len = len;
   11e22:	7059      	strb	r1, [r3, #1]
	ep = net_buf_add(buf, sizeof(*ep));
   11e24:	4628      	mov	r0, r5
   11e26:	f010 fbb3 	bl	22590 <net_buf_simple_add>
	ep->encrypt = !err ? 1 : 0;
   11e2a:	fab4 f384 	clz	r3, r4
   11e2e:	095b      	lsrs	r3, r3, #5
	ep->status = err;
   11e30:	7004      	strb	r4, [r0, #0]
	ep->encrypt = !err ? 1 : 0;
   11e32:	70c3      	strb	r3, [r0, #3]
	ep->handle = sys_cpu_to_le16(handle);
   11e34:	f8a0 6001 	strh.w	r6, [r0, #1]
}
   11e38:	bd70      	pop	{r4, r5, r6, pc}
   11e3a:	bf00      	nop

00011e3c <bt_hci_evt_create>:
{
   11e3c:	b570      	push	{r4, r5, r6, lr}
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   11e3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   11e42:	460e      	mov	r6, r1
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   11e44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11e48:	2100      	movs	r1, #0
{
   11e4a:	4605      	mov	r5, r0
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   11e4c:	f7f8 fa3c 	bl	a2c8 <bt_buf_get_evt>
	hdr = net_buf_add(buf, sizeof(*hdr));
   11e50:	2102      	movs	r1, #2
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   11e52:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
   11e54:	3008      	adds	r0, #8
   11e56:	f010 fb9b 	bl	22590 <net_buf_simple_add>
   11e5a:	4603      	mov	r3, r0
}
   11e5c:	4620      	mov	r0, r4
	hdr->len = len;
   11e5e:	705e      	strb	r6, [r3, #1]
	hdr->evt = evt;
   11e60:	701d      	strb	r5, [r3, #0]
}
   11e62:	bd70      	pop	{r4, r5, r6, pc}

00011e64 <bt_hci_cmd_complete_create>:
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   11e64:	3103      	adds	r1, #3
{
   11e66:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   11e68:	b2c9      	uxtb	r1, r1
{
   11e6a:	4605      	mov	r5, r0
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   11e6c:	200e      	movs	r0, #14
   11e6e:	f7ff ffe5 	bl	11e3c <bt_hci_evt_create>
	cc = net_buf_add(buf, sizeof(*cc));
   11e72:	2103      	movs	r1, #3
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   11e74:	4604      	mov	r4, r0
	cc = net_buf_add(buf, sizeof(*cc));
   11e76:	3008      	adds	r0, #8
   11e78:	f010 fb8a 	bl	22590 <net_buf_simple_add>
   11e7c:	4603      	mov	r3, r0
	cc->ncmd = 1U;
   11e7e:	2201      	movs	r2, #1
	cc->opcode = sys_cpu_to_le16(op);
   11e80:	f8a0 5001 	strh.w	r5, [r0, #1]
	cc->ncmd = 1U;
   11e84:	701a      	strb	r2, [r3, #0]
}
   11e86:	4620      	mov	r0, r4
   11e88:	bd38      	pop	{r3, r4, r5, pc}
   11e8a:	bf00      	nop

00011e8c <bt_hci_cmd_status_create>:
{
   11e8c:	b570      	push	{r4, r5, r6, lr}
   11e8e:	4605      	mov	r5, r0
   11e90:	460e      	mov	r6, r1
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
   11e92:	200f      	movs	r0, #15
   11e94:	2104      	movs	r1, #4
   11e96:	f7ff ffd1 	bl	11e3c <bt_hci_evt_create>
	cs = net_buf_add(buf, sizeof(*cs));
   11e9a:	2104      	movs	r1, #4
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
   11e9c:	4604      	mov	r4, r0
	cs = net_buf_add(buf, sizeof(*cs));
   11e9e:	3008      	adds	r0, #8
   11ea0:	f010 fb76 	bl	22590 <net_buf_simple_add>
   11ea4:	4603      	mov	r3, r0
	cs->ncmd = 1U;
   11ea6:	2201      	movs	r2, #1
	cs->status = status;
   11ea8:	7006      	strb	r6, [r0, #0]
	cs->opcode = sys_cpu_to_le16(op);
   11eaa:	8045      	strh	r5, [r0, #2]
	cs->ncmd = 1U;
   11eac:	705a      	strb	r2, [r3, #1]
}
   11eae:	4620      	mov	r0, r4
   11eb0:	bd70      	pop	{r4, r5, r6, pc}
   11eb2:	bf00      	nop

00011eb4 <hci_cmd_complete>:
{
   11eb4:	b538      	push	{r3, r4, r5, lr}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   11eb6:	4b06      	ldr	r3, [pc, #24]	; (11ed0 <hci_cmd_complete+0x1c>)
{
   11eb8:	4605      	mov	r5, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   11eba:	8818      	ldrh	r0, [r3, #0]
{
   11ebc:	460c      	mov	r4, r1
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   11ebe:	f7ff ffd1 	bl	11e64 <bt_hci_cmd_complete_create>
	return net_buf_add(*buf, plen);
   11ec2:	4621      	mov	r1, r4
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   11ec4:	6028      	str	r0, [r5, #0]
}
   11ec6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return net_buf_add(*buf, plen);
   11eca:	3008      	adds	r0, #8
   11ecc:	f010 bb60 	b.w	22590 <net_buf_simple_add>
   11ed0:	2000a2de 	.word	0x2000a2de

00011ed4 <hci_vendor_cmd_handle_common>:
{
   11ed4:	b570      	push	{r4, r5, r6, lr}
   11ed6:	1e43      	subs	r3, r0, #1
   11ed8:	b086      	sub	sp, #24
   11eda:	4614      	mov	r4, r2
   11edc:	2b09      	cmp	r3, #9
   11ede:	d806      	bhi.n	11eee <hci_vendor_cmd_handle_common+0x1a>
   11ee0:	e8df f003 	tbb	[pc, r3]
   11ee4:	05382109 	.word	0x05382109
   11ee8:	53054605 	.word	0x53054605
   11eec:	7667      	.short	0x7667
	return 0;
   11eee:	f06f 0015 	mvn.w	r0, #21
}
   11ef2:	b006      	add	sp, #24
   11ef4:	bd70      	pop	{r4, r5, r6, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp));
   11ef6:	4620      	mov	r0, r4
   11ef8:	210d      	movs	r1, #13
   11efa:	f7ff ffdb 	bl	11eb4 <hci_cmd_complete>
   11efe:	4603      	mov	r3, r0
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   11f00:	2202      	movs	r2, #2
	rp->status = 0x00;
   11f02:	2000      	movs	r0, #0
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
   11f04:	2403      	movs	r4, #3
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
   11f06:	2163      	movs	r1, #99	; 0x63
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
   11f08:	71dc      	strb	r4, [r3, #7]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
   11f0a:	7259      	strb	r1, [r3, #9]
	rp->status = 0x00;
   11f0c:	7018      	strb	r0, [r3, #0]
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   11f0e:	7098      	strb	r0, [r3, #2]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
   11f10:	7118      	strb	r0, [r3, #4]
	rp->fw_variant = 0U;
   11f12:	7158      	strb	r0, [r3, #5]
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
   11f14:	7218      	strb	r0, [r3, #8]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
   11f16:	7298      	strb	r0, [r3, #10]
   11f18:	72d8      	strb	r0, [r3, #11]
   11f1a:	7318      	strb	r0, [r3, #12]
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   11f1c:	705a      	strb	r2, [r3, #1]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
   11f1e:	70da      	strb	r2, [r3, #3]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
   11f20:	719a      	strb	r2, [r3, #6]
}
   11f22:	b006      	add	sp, #24
   11f24:	bd70      	pop	{r4, r5, r6, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp));
   11f26:	4620      	mov	r0, r4
   11f28:	2141      	movs	r1, #65	; 0x41
   11f2a:	f7ff ffc3 	bl	11eb4 <hci_cmd_complete>
	rp->status = 0x00;
   11f2e:	2400      	movs	r4, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
   11f30:	4605      	mov	r5, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   11f32:	4621      	mov	r1, r4
	rp->status = 0x00;
   11f34:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   11f38:	2240      	movs	r2, #64	; 0x40
   11f3a:	f00d ffc3 	bl	1fec4 <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
   11f3e:	786a      	ldrb	r2, [r5, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
   11f40:	78ab      	ldrb	r3, [r5, #2]
	rp->commands[0] |= BIT(5) | BIT(7);
   11f42:	f062 0258 	orn	r2, r2, #88	; 0x58
	rp->commands[1] |= BIT(0) | BIT(1);
   11f46:	f043 0303 	orr.w	r3, r3, #3
	return 0;
   11f4a:	4620      	mov	r0, r4
	rp->commands[0] |= BIT(5) | BIT(7);
   11f4c:	706a      	strb	r2, [r5, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
   11f4e:	70ab      	strb	r3, [r5, #2]
}
   11f50:	b006      	add	sp, #24
   11f52:	bd70      	pop	{r4, r5, r6, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp));
   11f54:	4620      	mov	r0, r4
   11f56:	2109      	movs	r1, #9
   11f58:	f7ff ffac 	bl	11eb4 <hci_cmd_complete>
	rp->status = 0x00;
   11f5c:	2400      	movs	r4, #0
   11f5e:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   11f62:	4621      	mov	r1, r4
   11f64:	2208      	movs	r2, #8
   11f66:	f00d ffad 	bl	1fec4 <memset>
	return 0;
   11f6a:	4620      	mov	r0, r4
}
   11f6c:	b006      	add	sp, #24
   11f6e:	bd70      	pop	{r4, r5, r6, pc}
	ll_addr_set(0, &cmd->bdaddr.val[0]);
   11f70:	6889      	ldr	r1, [r1, #8]
   11f72:	2000      	movs	r0, #0
   11f74:	f7ff fd58 	bl	11a28 <ll_addr_set>
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
   11f78:	4620      	mov	r0, r4
   11f7a:	2101      	movs	r1, #1
   11f7c:	f7ff ff9a 	bl	11eb4 <hci_cmd_complete>
   11f80:	4603      	mov	r3, r0
	ccst->status = 0x00;
   11f82:	2000      	movs	r0, #0
   11f84:	7018      	strb	r0, [r3, #0]
}
   11f86:	b006      	add	sp, #24
   11f88:	bd70      	pop	{r4, r5, r6, pc}
	const char build_info[] = HCI_VS_BUILD_INFO;
   11f8a:	4e18      	ldr	r6, [pc, #96]	; (11fec <hci_vendor_cmd_handle_common+0x118>)
   11f8c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   11f8e:	ad01      	add	r5, sp, #4
   11f90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   11f92:	6833      	ldr	r3, [r6, #0]
   11f94:	802b      	strh	r3, [r5, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
   11f96:	4620      	mov	r0, r4
   11f98:	2113      	movs	r1, #19
   11f9a:	f7ff ff8b 	bl	11eb4 <hci_cmd_complete>
	rp->status = 0x00;
   11f9e:	2400      	movs	r4, #0
   11fa0:	f800 4b01 	strb.w	r4, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
   11fa4:	2212      	movs	r2, #18
   11fa6:	a901      	add	r1, sp, #4
   11fa8:	f00d ff61 	bl	1fe6e <memcpy>
	return 0;
   11fac:	4620      	mov	r0, r4
}
   11fae:	b006      	add	sp, #24
   11fb0:	bd70      	pop	{r4, r5, r6, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp) +
   11fb2:	4620      	mov	r0, r4
   11fb4:	2118      	movs	r1, #24
   11fb6:	f7ff ff7d 	bl	11eb4 <hci_cmd_complete>
	rp->status = 0x00;
   11fba:	2400      	movs	r4, #0
	rp = hci_cmd_complete(evt, sizeof(*rp) +
   11fbc:	4605      	mov	r5, r0
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
   11fbe:	2101      	movs	r1, #1
	rp->status = 0x00;
   11fc0:	f800 4b02 	strb.w	r4, [r0], #2
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
   11fc4:	f009 fc12 	bl	1b7ec <hci_vendor_read_static_addr>
   11fc8:	7068      	strb	r0, [r5, #1]
	return 0;
   11fca:	4620      	mov	r0, r4
}
   11fcc:	b006      	add	sp, #24
   11fce:	bd70      	pop	{r4, r5, r6, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp));
   11fd0:	4620      	mov	r0, r4
   11fd2:	2121      	movs	r1, #33	; 0x21
   11fd4:	f7ff ff6e 	bl	11eb4 <hci_cmd_complete>
	rp->status = 0x00;
   11fd8:	4601      	mov	r1, r0
   11fda:	2400      	movs	r4, #0
   11fdc:	f801 4b11 	strb.w	r4, [r1], #17
	hci_vendor_read_key_hierarchy_roots(rp->ir, rp->er);
   11fe0:	3001      	adds	r0, #1
   11fe2:	f009 fc75 	bl	1b8d0 <hci_vendor_read_key_hierarchy_roots>
	return 0;
   11fe6:	4620      	mov	r0, r4
}
   11fe8:	b006      	add	sp, #24
   11fea:	bd70      	pop	{r4, r5, r6, pc}
   11fec:	000240e8 	.word	0x000240e8

00011ff0 <hci_cmd_handle>:
{
   11ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
   11ff2:	8983      	ldrh	r3, [r0, #12]
{
   11ff4:	b08f      	sub	sp, #60	; 0x3c
	struct net_buf *evt = NULL;
   11ff6:	2500      	movs	r5, #0
	if (cmd->len < sizeof(*chdr)) {
   11ff8:	2b02      	cmp	r3, #2
	struct net_buf *evt = NULL;
   11ffa:	9509      	str	r5, [sp, #36]	; 0x24
	if (cmd->len < sizeof(*chdr)) {
   11ffc:	f240 80bb 	bls.w	12176 <hci_cmd_handle+0x186>
	chdr = net_buf_pull_mem(cmd, sizeof(*chdr));
   12000:	4604      	mov	r4, r0
   12002:	460e      	mov	r6, r1
   12004:	3008      	adds	r0, #8
   12006:	2103      	movs	r1, #3
   12008:	f010 faff 	bl	2260a <net_buf_simple_pull_mem>
	if (cmd->len < chdr->param_len) {
   1200c:	89a2      	ldrh	r2, [r4, #12]
   1200e:	7883      	ldrb	r3, [r0, #2]
   12010:	429a      	cmp	r2, r3
   12012:	f0c0 80e2 	bcc.w	121da <hci_cmd_handle+0x1ea>
	_opcode = sys_le16_to_cpu(chdr->opcode);
   12016:	8805      	ldrh	r5, [r0, #0]
   12018:	4f7f      	ldr	r7, [pc, #508]	; (12218 <hci_cmd_handle+0x228>)
	switch (BT_OGF(_opcode)) {
   1201a:	f5b5 5f10 	cmp.w	r5, #9216	; 0x2400
	_opcode = sys_le16_to_cpu(chdr->opcode);
   1201e:	b2a8      	uxth	r0, r5
   12020:	803d      	strh	r5, [r7, #0]
	ocf = BT_OCF(_opcode);
   12022:	f3c5 0309 	ubfx	r3, r5, #0, #10
	switch (BT_OGF(_opcode)) {
   12026:	ea4f 2295 	mov.w	r2, r5, lsr #10
   1202a:	d26b      	bcs.n	12104 <hci_cmd_handle+0x114>
   1202c:	2a00      	cmp	r2, #0
   1202e:	d073      	beq.n	12118 <hci_cmd_handle+0x128>
   12030:	3a01      	subs	r2, #1
   12032:	2a07      	cmp	r2, #7
   12034:	d870      	bhi.n	12118 <hci_cmd_handle+0x128>
   12036:	e8df f002 	tbb	[pc, r2]
   1203a:	6f90      	.short	0x6f90
   1203c:	6f6f5774 	.word	0x6f6f5774
   12040:	046f      	.short	0x046f
	switch (ocf) {
   12042:	3b01      	subs	r3, #1
   12044:	2b4d      	cmp	r3, #77	; 0x4d
   12046:	d867      	bhi.n	12118 <hci_cmd_handle+0x128>
   12048:	e8df f013 	tbh	[pc, r3, lsl #1]
   1204c:	01720180 	.word	0x01720180
   12050:	00660236 	.word	0x00660236
   12054:	00660231 	.word	0x00660231
   12058:	00660066 	.word	0x00660066
   1205c:	00660066 	.word	0x00660066
   12060:	03760389 	.word	0x03760389
   12064:	034b034f 	.word	0x034b034f
   12068:	0335033f 	.word	0x0335033f
   1206c:	032d0331 	.word	0x032d0331
   12070:	03850395 	.word	0x03850395
   12074:	02770162 	.word	0x02770162
   12078:	02570263 	.word	0x02570263
   1207c:	00660249 	.word	0x00660249
   12080:	02cb0066 	.word	0x02cb0066
   12084:	00660066 	.word	0x00660066
   12088:	02bc0066 	.word	0x02bc0066
   1208c:	02a802b0 	.word	0x02a802b0
   12090:	028c0292 	.word	0x028c0292
   12094:	00660066 	.word	0x00660066
   12098:	03290285 	.word	0x03290285
   1209c:	0313031f 	.word	0x0313031f
   120a0:	02ee0302 	.word	0x02ee0302
   120a4:	022602e1 	.word	0x022602e1
   120a8:	01dd0205 	.word	0x01dd0205
   120ac:	019b01c8 	.word	0x019b01c8
   120b0:	00660066 	.word	0x00660066
   120b4:	00660066 	.word	0x00660066
   120b8:	00660066 	.word	0x00660066
   120bc:	00660066 	.word	0x00660066
   120c0:	00660066 	.word	0x00660066
   120c4:	00660066 	.word	0x00660066
   120c8:	00660066 	.word	0x00660066
   120cc:	00660066 	.word	0x00660066
   120d0:	00660066 	.word	0x00660066
   120d4:	00660066 	.word	0x00660066
   120d8:	00660066 	.word	0x00660066
   120dc:	00660066 	.word	0x00660066
   120e0:	0066018e 	.word	0x0066018e
   120e4:	02800066 	.word	0x02800066
	switch (ocf) {
   120e8:	3b01      	subs	r3, #1
   120ea:	2b08      	cmp	r3, #8
   120ec:	d814      	bhi.n	12118 <hci_cmd_handle+0x128>
   120ee:	e8df f013 	tbh	[pc, r3, lsl #1]
   120f2:	00f8      	.short	0x00f8
   120f4:	0084009f 	.word	0x0084009f
   120f8:	00130013 	.word	0x00130013
   120fc:	00130013 	.word	0x00130013
   12100:	00780013 	.word	0x00780013
	switch (BT_OGF(_opcode)) {
   12104:	2a3f      	cmp	r2, #63	; 0x3f
   12106:	d107      	bne.n	12118 <hci_cmd_handle+0x128>

/* Map vendor command handler directly to common implementation */
inline int hci_vendor_cmd_handle(uint16_t ocf, struct net_buf *cmd,
				 struct net_buf **evt)
{
	return hci_vendor_cmd_handle_common(ocf, cmd, evt);
   12108:	4621      	mov	r1, r4
   1210a:	4618      	mov	r0, r3
   1210c:	aa09      	add	r2, sp, #36	; 0x24
   1210e:	f7ff fee1 	bl	11ed4 <hci_vendor_cmd_handle_common>
	if (err == -EINVAL) {
   12112:	3016      	adds	r0, #22
   12114:	d15f      	bne.n	121d6 <hci_cmd_handle+0x1e6>
   12116:	8838      	ldrh	r0, [r7, #0]
	return bt_hci_cmd_status_create(_opcode, status);
   12118:	2101      	movs	r1, #1
   1211a:	f7ff feb7 	bl	11e8c <bt_hci_cmd_status_create>
}
   1211e:	b00f      	add	sp, #60	; 0x3c
   12120:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (ocf) {
   12122:	2b63      	cmp	r3, #99	; 0x63
   12124:	f000 8343 	beq.w	127ae <hci_cmd_handle+0x7be>
   12128:	d842      	bhi.n	121b0 <hci_cmd_handle+0x1c0>
   1212a:	2b03      	cmp	r3, #3
   1212c:	f000 8356 	beq.w	127dc <hci_cmd_handle+0x7ec>
   12130:	2b2d      	cmp	r3, #45	; 0x2d
   12132:	d12d      	bne.n	12190 <hci_cmd_handle+0x1a0>
		read_tx_power_level(cmd, evt);
   12134:	68a3      	ldr	r3, [r4, #8]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   12136:	2104      	movs	r1, #4
   12138:	a809      	add	r0, sp, #36	; 0x24
	handle = sys_le16_to_cpu(cmd->handle);
   1213a:	881d      	ldrh	r5, [r3, #0]
	type = cmd->type;
   1213c:	789e      	ldrb	r6, [r3, #2]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1213e:	f7ff feb9 	bl	11eb4 <hci_cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
   12142:	b2a9      	uxth	r1, r5
	rp = hci_cmd_complete(evt, sizeof(*rp));
   12144:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(BT_HCI_VS_LL_HANDLE_TYPE_CONN,
   12146:	1cc3      	adds	r3, r0, #3
   12148:	4632      	mov	r2, r6
   1214a:	2002      	movs	r0, #2
   1214c:	f7ff fc8a 	bl	11a64 <ll_tx_pwr_lvl_get>
	rp->status = status;
   12150:	7020      	strb	r0, [r4, #0]
	rp->handle = sys_cpu_to_le16(handle);
   12152:	9809      	ldr	r0, [sp, #36]	; 0x24
   12154:	f8a4 5001 	strh.w	r5, [r4, #1]
}
   12158:	e7e1      	b.n	1211e <hci_cmd_handle+0x12e>
	switch (ocf) {
   1215a:	2b06      	cmp	r3, #6
   1215c:	f000 831d 	beq.w	1279a <hci_cmd_handle+0x7aa>
   12160:	2b1d      	cmp	r3, #29
   12162:	d1d9      	bne.n	12118 <hci_cmd_handle+0x128>
	handle = sys_le16_to_cpu(cmd->handle);
   12164:	68a3      	ldr	r3, [r4, #8]
	status = ll_version_ind_send(handle);
   12166:	8818      	ldrh	r0, [r3, #0]
   12168:	f003 fa3c 	bl	155e4 <ll_version_ind_send>
   1216c:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   1216e:	8838      	ldrh	r0, [r7, #0]
   12170:	f7ff fe8c 	bl	11e8c <bt_hci_cmd_status_create>
}
   12174:	e7d3      	b.n	1211e <hci_cmd_handle+0x12e>
   12176:	4929      	ldr	r1, [pc, #164]	; (1221c <hci_cmd_handle+0x22c>)
   12178:	4b29      	ldr	r3, [pc, #164]	; (12220 <hci_cmd_handle+0x230>)
		BT_ERR("No HCI Command header");
   1217a:	482a      	ldr	r0, [pc, #168]	; (12224 <hci_cmd_handle+0x234>)
   1217c:	1ac9      	subs	r1, r1, r3
   1217e:	08c9      	lsrs	r1, r1, #3
		BT_ERR("Invalid HCI CMD packet length");
   12180:	0189      	lsls	r1, r1, #6
   12182:	f041 0101 	orr.w	r1, r1, #1
   12186:	f00c f9a0 	bl	1e4ca <log_0>
		return NULL;
   1218a:	4628      	mov	r0, r5
}
   1218c:	b00f      	add	sp, #60	; 0x3c
   1218e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (ocf) {
   12190:	2b01      	cmp	r3, #1
   12192:	d1c1      	bne.n	12118 <hci_cmd_handle+0x128>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   12194:	68a1      	ldr	r1, [r4, #8]
	event_mask = sys_get_le64(cmd->events);
   12196:	4a24      	ldr	r2, [pc, #144]	; (12228 <hci_cmd_handle+0x238>)
   12198:	6808      	ldr	r0, [r1, #0]
   1219a:	684c      	ldr	r4, [r1, #4]
   1219c:	6010      	str	r0, [r2, #0]
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
   1219e:	4619      	mov	r1, r3
   121a0:	a809      	add	r0, sp, #36	; 0x24
	event_mask = sys_get_le64(cmd->events);
   121a2:	6054      	str	r4, [r2, #4]
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
   121a4:	f7ff fe86 	bl	11eb4 <hci_cmd_complete>
	ccst->status = 0x00;
   121a8:	2300      	movs	r3, #0
   121aa:	7003      	strb	r3, [r0, #0]
	if (err == -EINVAL) {
   121ac:	9809      	ldr	r0, [sp, #36]	; 0x24
   121ae:	e7b6      	b.n	1211e <hci_cmd_handle+0x12e>
	switch (ocf) {
   121b0:	2b7b      	cmp	r3, #123	; 0x7b
   121b2:	f000 82ff 	beq.w	127b4 <hci_cmd_handle+0x7c4>
   121b6:	2b7c      	cmp	r3, #124	; 0x7c
   121b8:	d1ae      	bne.n	12118 <hci_cmd_handle+0x128>
		write_auth_payload_timeout(cmd, evt);
   121ba:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   121bc:	881d      	ldrh	r5, [r3, #0]
	status = ll_apto_set(handle, auth_payload_timeout);
   121be:	8859      	ldrh	r1, [r3, #2]
   121c0:	4628      	mov	r0, r5
   121c2:	f003 fb3d 	bl	15840 <ll_apto_set>
	status = ll_length_req_send(handle, tx_octets, tx_time);
   121c6:	4604      	mov	r4, r0
	rp = hci_cmd_complete(evt, sizeof(*rp));
   121c8:	2103      	movs	r1, #3
   121ca:	a809      	add	r0, sp, #36	; 0x24
   121cc:	f7ff fe72 	bl	11eb4 <hci_cmd_complete>
	status = ll_length_req_send(handle, tx_octets, tx_time);
   121d0:	7004      	strb	r4, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
   121d2:	f8a0 5001 	strh.w	r5, [r0, #1]
	if (err == -EINVAL) {
   121d6:	9809      	ldr	r0, [sp, #36]	; 0x24
   121d8:	e7a1      	b.n	1211e <hci_cmd_handle+0x12e>
   121da:	4910      	ldr	r1, [pc, #64]	; (1221c <hci_cmd_handle+0x22c>)
   121dc:	4b10      	ldr	r3, [pc, #64]	; (12220 <hci_cmd_handle+0x230>)
		BT_ERR("Invalid HCI CMD packet length");
   121de:	4813      	ldr	r0, [pc, #76]	; (1222c <hci_cmd_handle+0x23c>)
   121e0:	e7cc      	b.n	1217c <hci_cmd_handle+0x18c>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   121e2:	2107      	movs	r1, #7
   121e4:	a809      	add	r0, sp, #36	; 0x24
   121e6:	f7ff fe65 	bl	11eb4 <hci_cmd_complete>
	rp->status = 0x00;
   121ea:	4601      	mov	r1, r0
   121ec:	2000      	movs	r0, #0
   121ee:	f801 0b01 	strb.w	r0, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
   121f2:	f7ff fbfb 	bl	119ec <ll_addr_get>
	if (err == -EINVAL) {
   121f6:	9809      	ldr	r0, [sp, #36]	; 0x24
   121f8:	e791      	b.n	1211e <hci_cmd_handle+0x12e>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   121fa:	2109      	movs	r1, #9
   121fc:	a809      	add	r0, sp, #36	; 0x24
   121fe:	f7ff fe59 	bl	11eb4 <hci_cmd_complete>
	rp->status = 0x00;
   12202:	2100      	movs	r1, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
   12204:	4604      	mov	r4, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   12206:	2208      	movs	r2, #8
	rp->status = 0x00;
   12208:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   1220c:	f00d fe5a 	bl	1fec4 <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
   12210:	2360      	movs	r3, #96	; 0x60
   12212:	9809      	ldr	r0, [sp, #36]	; 0x24
   12214:	7163      	strb	r3, [r4, #5]
	if (err == -EINVAL) {
   12216:	e782      	b.n	1211e <hci_cmd_handle+0x12e>
   12218:	2000a2de 	.word	0x2000a2de
   1221c:	00023720 	.word	0x00023720
   12220:	000236e8 	.word	0x000236e8
   12224:	000240fc 	.word	0x000240fc
   12228:	20000108 	.word	0x20000108
   1222c:	00024114 	.word	0x00024114
	rp = hci_cmd_complete(evt, sizeof(*rp));
   12230:	2141      	movs	r1, #65	; 0x41
   12232:	a809      	add	r0, sp, #36	; 0x24
   12234:	f7ff fe3e 	bl	11eb4 <hci_cmd_complete>
	rp->status = 0x00;
   12238:	2100      	movs	r1, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1223a:	4604      	mov	r4, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   1223c:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
   1223e:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   12242:	f00d fe3f 	bl	1fec4 <memset>
	rp->commands[0] |= BIT(5);
   12246:	7867      	ldrb	r7, [r4, #1]
	rp->commands[5] |= BIT(6) | BIT(7);
   12248:	79a6      	ldrb	r6, [r4, #6]
	rp->commands[10] |= BIT(2);
   1224a:	7ae5      	ldrb	r5, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
   1224c:	7be0      	ldrb	r0, [r4, #15]
	rp->commands[15] |= BIT(1);
   1224e:	7c21      	ldrb	r1, [r4, #16]
	rp->commands[22] |= BIT(2);
   12250:	7de2      	ldrb	r2, [r4, #23]
	rp->commands[25] |= BIT(0) | BIT(1) | BIT(2) | BIT(4);
   12252:	7ea3      	ldrb	r3, [r4, #26]
	rp->commands[26] |= BIT(4) | BIT(5);
   12254:	f894 c01b 	ldrb.w	ip, [r4, #27]
	rp->commands[0] |= BIT(5);
   12258:	f047 0720 	orr.w	r7, r7, #32
   1225c:	7067      	strb	r7, [r4, #1]
	rp->commands[5] |= BIT(6) | BIT(7);
   1225e:	f066 063f 	orn	r6, r6, #63	; 0x3f
	rp->commands[28] |= BIT(3);
   12262:	7f67      	ldrb	r7, [r4, #29]
	rp->commands[5] |= BIT(6) | BIT(7);
   12264:	71a6      	strb	r6, [r4, #6]
	rp->commands[10] |= BIT(2);
   12266:	f045 0504 	orr.w	r5, r5, #4
	rp->commands[14] |= BIT(3) | BIT(5);
   1226a:	f040 0028 	orr.w	r0, r0, #40	; 0x28
	rp->commands[15] |= BIT(1);
   1226e:	f041 0102 	orr.w	r1, r1, #2
	rp->commands[22] |= BIT(2);
   12272:	f042 0204 	orr.w	r2, r2, #4
	rp->commands[25] |= BIT(0) | BIT(1) | BIT(2) | BIT(4);
   12276:	f043 0317 	orr.w	r3, r3, #23
	rp->commands[32] |= BIT(4) | BIT(5);
   1227a:	f894 6021 	ldrb.w	r6, [r4, #33]	; 0x21
	rp->commands[10] |= BIT(2);
   1227e:	72e5      	strb	r5, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
   12280:	73e0      	strb	r0, [r4, #15]
	rp->commands[33] |= BIT(4) | BIT(5);
   12282:	f894 5022 	ldrb.w	r5, [r4, #34]	; 0x22
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
   12286:	f894 0023 	ldrb.w	r0, [r4, #35]	; 0x23
	rp->commands[15] |= BIT(1);
   1228a:	7421      	strb	r1, [r4, #16]
	rp->commands[22] |= BIT(2);
   1228c:	75e2      	strb	r2, [r4, #23]
	rp->commands[35] |= BIT(3);
   1228e:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
	rp->commands[39] |= BIT(2);
   12292:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
	rp->commands[25] |= BIT(0) | BIT(1) | BIT(2) | BIT(4);
   12296:	76a3      	strb	r3, [r4, #26]
	rp->commands[38] |= BIT(7);
   12298:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
	rp->commands[28] |= BIT(0);
   1229c:	f047 0709 	orr.w	r7, r7, #9
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
   122a0:	f060 0006 	orn	r0, r0, #6
	rp->commands[26] |= BIT(4) | BIT(5);
   122a4:	f06c 0c03 	orn	ip, ip, #3
	rp->commands[32] |= BIT(4) | BIT(5);
   122a8:	f046 0630 	orr.w	r6, r6, #48	; 0x30
	rp->commands[33] |= BIT(6) | BIT(7);
   122ac:	f065 050f 	orn	r5, r5, #15
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
   122b0:	f041 017f 	orr.w	r1, r1, #127	; 0x7f
	rp->commands[39] |= BIT(2);
   122b4:	f042 0204 	orr.w	r2, r2, #4
	rp->commands[38] |= BIT(7);
   122b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
	rp->commands[28] |= BIT(0);
   122bc:	7767      	strb	r7, [r4, #29]
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
   122be:	27ff      	movs	r7, #255	; 0xff
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
   122c0:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
	rp->commands[26] |= BIT(4) | BIT(5);
   122c4:	f884 c01b 	strb.w	ip, [r4, #27]
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
   122c8:	9809      	ldr	r0, [sp, #36]	; 0x24
   122ca:	7727      	strb	r7, [r4, #28]
	rp->commands[32] |= BIT(4) | BIT(5);
   122cc:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
	rp->commands[33] |= BIT(6) | BIT(7);
   122d0:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
   122d4:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
	rp->commands[39] |= BIT(2);
   122d8:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	rp->commands[38] |= BIT(7);
   122dc:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	if (err == -EINVAL) {
   122e0:	e71d      	b.n	1211e <hci_cmd_handle+0x12e>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   122e2:	2109      	movs	r1, #9
   122e4:	a809      	add	r0, sp, #36	; 0x24
   122e6:	f7ff fde5 	bl	11eb4 <hci_cmd_complete>
   122ea:	4603      	mov	r3, r0
	rp->status = 0x00;
   122ec:	2200      	movs	r2, #0
	rp->hci_version = LL_VERSION_NUMBER;
   122ee:	200b      	movs	r0, #11
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
   122f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   122f4:	f06f 050e 	mvn.w	r5, #14
   122f8:	2405      	movs	r4, #5
	rp->status = 0x00;
   122fa:	701a      	strb	r2, [r3, #0]
	rp->hci_version = LL_VERSION_NUMBER;
   122fc:	7058      	strb	r0, [r3, #1]
	rp->lmp_version = LL_VERSION_NUMBER;
   122fe:	7118      	strb	r0, [r3, #4]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   12300:	715d      	strb	r5, [r3, #5]
   12302:	9809      	ldr	r0, [sp, #36]	; 0x24
   12304:	719c      	strb	r4, [r3, #6]
	rp->hci_revision = sys_cpu_to_le16(0);
   12306:	709a      	strb	r2, [r3, #2]
   12308:	70da      	strb	r2, [r3, #3]
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
   1230a:	71d9      	strb	r1, [r3, #7]
   1230c:	7219      	strb	r1, [r3, #8]
	if (err == -EINVAL) {
   1230e:	e706      	b.n	1211e <hci_cmd_handle+0x12e>
	handle = sys_le16_to_cpu(cmd->handle);
   12310:	68a3      	ldr	r3, [r4, #8]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   12312:	2108      	movs	r1, #8
   12314:	a809      	add	r0, sp, #36	; 0x24
	handle = sys_le16_to_cpu(cmd->handle);
   12316:	881d      	ldrh	r5, [r3, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   12318:	f7ff fdcc 	bl	11eb4 <hci_cmd_complete>
   1231c:	4604      	mov	r4, r0
	status = ll_chm_get(handle, rp->ch_map);
   1231e:	1ce1      	adds	r1, r4, #3
	handle = sys_le16_to_cpu(cmd->handle);
   12320:	b2a8      	uxth	r0, r5
	status = ll_chm_get(handle, rp->ch_map);
   12322:	f003 f8ff 	bl	15524 <ll_chm_get>
	rp->status = status;
   12326:	7020      	strb	r0, [r4, #0]
	rp->handle = sys_le16_to_cpu(handle);
   12328:	9809      	ldr	r0, [sp, #36]	; 0x24
   1232a:	f8a4 5001 	strh.w	r5, [r4, #1]
	if (err == -EINVAL) {
   1232e:	e6f6      	b.n	1211e <hci_cmd_handle+0x12e>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   12330:	2104      	movs	r1, #4
   12332:	a809      	add	r0, sp, #36	; 0x24
   12334:	f7ff fdbe 	bl	11eb4 <hci_cmd_complete>
	rp->le_max_num = CONFIG_BT_CTLR_TX_BUFFERS;
   12338:	220a      	movs	r2, #10
	rp->status = 0x00;
   1233a:	2300      	movs	r3, #0
	rp->le_max_num = CONFIG_BT_CTLR_TX_BUFFERS;
   1233c:	70c2      	strb	r2, [r0, #3]
	rp->status = 0x00;
   1233e:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(CONFIG_BT_CTLR_TX_BUFFER_SIZE);
   12340:	f06f 0204 	mvn.w	r2, #4
   12344:	7042      	strb	r2, [r0, #1]
   12346:	7083      	strb	r3, [r0, #2]
	if (err == -EINVAL) {
   12348:	9809      	ldr	r0, [sp, #36]	; 0x24
   1234a:	e6e8      	b.n	1211e <hci_cmd_handle+0x12e>
   1234c:	68a2      	ldr	r2, [r4, #8]
	le_event_mask = sys_get_le64(cmd->events);
   1234e:	4bbf      	ldr	r3, [pc, #764]	; (1264c <hci_cmd_handle+0x65c>)
   12350:	6811      	ldr	r1, [r2, #0]
   12352:	6852      	ldr	r2, [r2, #4]
   12354:	605a      	str	r2, [r3, #4]
   12356:	6019      	str	r1, [r3, #0]
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
   12358:	a809      	add	r0, sp, #36	; 0x24
   1235a:	2101      	movs	r1, #1
   1235c:	f7ff fdaa 	bl	11eb4 <hci_cmd_complete>
	ccst->status = 0x00;
   12360:	2300      	movs	r3, #0
   12362:	7003      	strb	r3, [r0, #0]
	if (err == -EINVAL) {
   12364:	9809      	ldr	r0, [sp, #36]	; 0x24
   12366:	e6da      	b.n	1211e <hci_cmd_handle+0x12e>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   12368:	2103      	movs	r1, #3
   1236a:	a809      	add	r0, sp, #36	; 0x24
   1236c:	f7ff fda2 	bl	11eb4 <hci_cmd_complete>
	rp->status = 0x00;
   12370:	4601      	mov	r1, r0
   12372:	2300      	movs	r3, #0
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
   12374:	3001      	adds	r0, #1
	rp->status = 0x00;
   12376:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
   1237a:	f7ff fb83 	bl	11a84 <ll_tx_pwr_get>
	if (err == -EINVAL) {
   1237e:	9809      	ldr	r0, [sp, #36]	; 0x24
   12380:	e6cd      	b.n	1211e <hci_cmd_handle+0x12e>
		le_set_phy(cmd, evt);
   12382:	68a2      	ldr	r2, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   12384:	7894      	ldrb	r4, [r2, #2]
   12386:	78d1      	ldrb	r1, [r2, #3]
	handle = sys_le16_to_cpu(cmd->handle);
   12388:	8816      	ldrh	r6, [r2, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
   1238a:	f8b2 5005 	ldrh.w	r5, [r2, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   1238e:	07e3      	lsls	r3, r4, #31
		cmd->tx_phys |= mask_phys;
   12390:	bf48      	it	mi
   12392:	f041 0105 	orrmi.w	r1, r1, #5
   12396:	7913      	ldrb	r3, [r2, #4]
   12398:	bf48      	it	mi
   1239a:	70d1      	strbmi	r1, [r2, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
   1239c:	07a4      	lsls	r4, r4, #30
		cmd->rx_phys |= mask_phys;
   1239e:	bf44      	itt	mi
   123a0:	f043 0305 	orrmi.w	r3, r3, #5
   123a4:	7113      	strbmi	r3, [r2, #4]
	if ((cmd->tx_phys | cmd->rx_phys) & ~mask_phys) {
   123a6:	ea43 0201 	orr.w	r2, r3, r1
   123aa:	f032 0205 	bics.w	r2, r2, #5
   123ae:	f040 8236 	bne.w	1281e <hci_cmd_handle+0x82e>
	if (!(cmd->tx_phys & 0x07) ||
   123b2:	074c      	lsls	r4, r1, #29
   123b4:	f000 822f 	beq.w	12816 <hci_cmd_handle+0x826>
   123b8:	075a      	lsls	r2, r3, #29
   123ba:	f000 822c 	beq.w	12816 <hci_cmd_handle+0x826>
	if (phy_opts & 0x03) {
   123be:	f015 0203 	ands.w	r2, r5, #3
		phy_opts -= 1U;
   123c2:	bf1c      	itt	ne
   123c4:	f105 35ff 	addne.w	r5, r5, #4294967295	; 0xffffffff
		phy_opts &= 1;
   123c8:	f005 0201 	andne.w	r2, r5, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
   123cc:	4630      	mov	r0, r6
   123ce:	f003 f9bf 	bl	15750 <ll_phy_req_send>
   123d2:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   123d4:	8838      	ldrh	r0, [r7, #0]
   123d6:	f7ff fd59 	bl	11e8c <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
   123da:	e6a0      	b.n	1211e <hci_cmd_handle+0x12e>
		le_set_default_phy(cmd, evt);
   123dc:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   123de:	781a      	ldrb	r2, [r3, #0]
   123e0:	07d1      	lsls	r1, r2, #31
		cmd->tx_phys = 0x07;
   123e2:	bf4a      	itet	mi
   123e4:	2007      	movmi	r0, #7
   123e6:	7858      	ldrbpl	r0, [r3, #1]
   123e8:	7058      	strbmi	r0, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
   123ea:	0792      	lsls	r2, r2, #30
		cmd->rx_phys = 0x07;
   123ec:	bf4a      	itet	mi
   123ee:	2107      	movmi	r1, #7
   123f0:	7899      	ldrbpl	r1, [r3, #2]
   123f2:	7099      	strbmi	r1, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
   123f4:	f003 f9a2 	bl	1573c <ll_phy_default_set>
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
   123f8:	4604      	mov	r4, r0
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
   123fa:	2101      	movs	r1, #1
   123fc:	a809      	add	r0, sp, #36	; 0x24
   123fe:	f7ff fd59 	bl	11eb4 <hci_cmd_complete>
	ccst->status = status;
   12402:	7004      	strb	r4, [r0, #0]
	if (err == -EINVAL) {
   12404:	e6e7      	b.n	121d6 <hci_cmd_handle+0x1e6>
	handle = sys_le16_to_cpu(cmd->handle);
   12406:	68a3      	ldr	r3, [r4, #8]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   12408:	2105      	movs	r1, #5
   1240a:	a809      	add	r0, sp, #36	; 0x24
	handle = sys_le16_to_cpu(cmd->handle);
   1240c:	881d      	ldrh	r5, [r3, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1240e:	f7ff fd51 	bl	11eb4 <hci_cmd_complete>
   12412:	4604      	mov	r4, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
   12414:	1d22      	adds	r2, r4, #4
	handle = sys_le16_to_cpu(cmd->handle);
   12416:	b2a8      	uxth	r0, r5
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
   12418:	1ce1      	adds	r1, r4, #3
   1241a:	f003 f96d 	bl	156f8 <ll_phy_get>
 * @return least significant bit set, 0 if @a op is 0
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
	return __builtin_ffs(op);
   1241e:	78e2      	ldrb	r2, [r4, #3]
   12420:	7923      	ldrb	r3, [r4, #4]
	rp->status = status;
   12422:	7020      	strb	r0, [r4, #0]
   12424:	2a00      	cmp	r2, #0
   12426:	fa92 f2a2 	rbit	r2, r2
   1242a:	fab2 f282 	clz	r2, r2
   1242e:	bf08      	it	eq
   12430:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
   12434:	2b00      	cmp	r3, #0
   12436:	fa93 f3a3 	rbit	r3, r3
   1243a:	fab3 f383 	clz	r3, r3
   1243e:	f102 0201 	add.w	r2, r2, #1
   12442:	bf08      	it	eq
   12444:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
	rp->tx_phy = find_lsb_set(rp->tx_phy);
   12448:	70e2      	strb	r2, [r4, #3]
   1244a:	3301      	adds	r3, #1
   1244c:	9809      	ldr	r0, [sp, #36]	; 0x24
	rp->handle = sys_cpu_to_le16(handle);
   1244e:	f8a4 5001 	strh.w	r5, [r4, #1]
	rp->rx_phy = find_lsb_set(rp->rx_phy);
   12452:	7123      	strb	r3, [r4, #4]
	if (err == -EINVAL) {
   12454:	e663      	b.n	1211e <hci_cmd_handle+0x12e>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   12456:	2109      	movs	r1, #9
   12458:	a809      	add	r0, sp, #36	; 0x24
   1245a:	f7ff fd2b 	bl	11eb4 <hci_cmd_complete>
	ll_length_max_get(&max_tx_octets, &max_tx_time,
   1245e:	ab0a      	add	r3, sp, #40	; 0x28
	rp = hci_cmd_complete(evt, sizeof(*rp));
   12460:	4604      	mov	r4, r0
	ll_length_max_get(&max_tx_octets, &max_tx_time,
   12462:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   12466:	f10d 001e 	add.w	r0, sp, #30
   1246a:	a908      	add	r1, sp, #32
   1246c:	f003 f93a 	bl	156e4 <ll_length_max_get>
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   12470:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
   12474:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   12478:	f8a4 2001 	strh.w	r2, [r4, #1]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   1247c:	f8a4 3003 	strh.w	r3, [r4, #3]
	rp->max_rx_octets = sys_cpu_to_le16(max_rx_octets);
   12480:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
   12484:	f8a4 3005 	strh.w	r3, [r4, #5]
	rp->status = 0x00;
   12488:	2200      	movs	r2, #0
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
   1248a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	rp->status = 0x00;
   1248e:	7022      	strb	r2, [r4, #0]
   12490:	9809      	ldr	r0, [sp, #36]	; 0x24
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
   12492:	f8a4 3007 	strh.w	r3, [r4, #7]
	if (err == -EINVAL) {
   12496:	e642      	b.n	1211e <hci_cmd_handle+0x12e>
	uint16_t timeout = sys_le16_to_cpu(cmd->rpa_timeout);
   12498:	68a3      	ldr	r3, [r4, #8]
	ll_rl_timeout_set(timeout);
   1249a:	8818      	ldrh	r0, [r3, #0]
   1249c:	f006 f9aa 	bl	187f4 <ll_rl_timeout_set>
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
   124a0:	2101      	movs	r1, #1
   124a2:	a809      	add	r0, sp, #36	; 0x24
   124a4:	f7ff fd06 	bl	11eb4 <hci_cmd_complete>
	ccst->status = 0x00;
   124a8:	2300      	movs	r3, #0
   124aa:	7003      	strb	r3, [r0, #0]
	if (err == -EINVAL) {
   124ac:	e693      	b.n	121d6 <hci_cmd_handle+0x1e6>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
   124ae:	68a1      	ldr	r1, [r4, #8]
   124b0:	2001      	movs	r0, #1
   124b2:	f7ff fab9 	bl	11a28 <ll_addr_set>
   124b6:	e79f      	b.n	123f8 <hci_cmd_handle+0x408>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   124b8:	2109      	movs	r1, #9
   124ba:	a809      	add	r0, sp, #36	; 0x24
   124bc:	f7ff fcfa 	bl	11eb4 <hci_cmd_complete>
	rp->status = 0x00;
   124c0:	2100      	movs	r1, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
   124c2:	4604      	mov	r4, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   124c4:	2208      	movs	r2, #8
	rp->status = 0x00;
   124c6:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   124ca:	f00d fcfb 	bl	1fec4 <memset>
	dst[0] = val;
   124ce:	21ff      	movs	r1, #255	; 0xff
	dst[1] = val >> 8;
   124d0:	2248      	movs	r2, #72	; 0x48
	dst[2] = val >> 16;
   124d2:	2301      	movs	r3, #1
	dst[0] = val;
   124d4:	7061      	strb	r1, [r4, #1]
	dst[1] = val >> 8;
   124d6:	70a2      	strb	r2, [r4, #2]
	dst[2] = val >> 16;
   124d8:	70e3      	strb	r3, [r4, #3]
	if (err == -EINVAL) {
   124da:	9809      	ldr	r0, [sp, #36]	; 0x24
   124dc:	e61f      	b.n	1211e <hci_cmd_handle+0x12e>
		le_start_encryption(cmd, evt);
   124de:	68a2      	ldr	r2, [r4, #8]
				 (uint8_t *)&cmd->rand,
   124e0:	4611      	mov	r1, r2
	status = ll_enc_req_send(handle,
   124e2:	f102 030c 	add.w	r3, r2, #12
   124e6:	f831 0b02 	ldrh.w	r0, [r1], #2
   124ea:	320a      	adds	r2, #10
   124ec:	f005 fe94 	bl	18218 <ll_enc_req_send>
   124f0:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   124f2:	8838      	ldrh	r0, [r7, #0]
   124f4:	f7ff fcca 	bl	11e8c <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
   124f8:	e611      	b.n	1211e <hci_cmd_handle+0x12e>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   124fa:	2109      	movs	r1, #9
   124fc:	a809      	add	r0, sp, #36	; 0x24
   124fe:	f7ff fcd9 	bl	11eb4 <hci_cmd_complete>
	rp->status = 0x00;
   12502:	2300      	movs	r3, #0
   12504:	f800 3b01 	strb.w	r3, [r0], #1
	lll_csrand_get(rp->rand, count);
   12508:	2108      	movs	r1, #8
   1250a:	f007 f911 	bl	19730 <lll_csrand_get>
	if (err == -EINVAL) {
   1250e:	9809      	ldr	r0, [sp, #36]	; 0x24
   12510:	e605      	b.n	1211e <hci_cmd_handle+0x12e>
		le_encrypt(cmd, evt);
   12512:	68a0      	ldr	r0, [r4, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
   12514:	aa0a      	add	r2, sp, #40	; 0x28
   12516:	f100 0110 	add.w	r1, r0, #16
   1251a:	2300      	movs	r3, #0
   1251c:	f008 fad4 	bl	1aac8 <ecb_encrypt>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   12520:	2111      	movs	r1, #17
   12522:	a809      	add	r0, sp, #36	; 0x24
   12524:	f7ff fcc6 	bl	11eb4 <hci_cmd_complete>
	rp->status = 0x00;
   12528:	2300      	movs	r3, #0
   1252a:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
   1252e:	a90a      	add	r1, sp, #40	; 0x28
   12530:	2210      	movs	r2, #16
   12532:	f00d fc9c 	bl	1fe6e <memcpy>
	if (err == -EINVAL) {
   12536:	9809      	ldr	r0, [sp, #36]	; 0x24
   12538:	e5f1      	b.n	1211e <hci_cmd_handle+0x12e>
	handle = sys_le16_to_cpu(cmd->handle);
   1253a:	68a3      	ldr	r3, [r4, #8]
	status = ll_feature_req_send(handle);
   1253c:	8818      	ldrh	r0, [r3, #0]
   1253e:	f003 f833 	bl	155a8 <ll_feature_req_send>
   12542:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   12544:	8838      	ldrh	r0, [r7, #0]
   12546:	f7ff fca1 	bl	11e8c <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
   1254a:	e5e8      	b.n	1211e <hci_cmd_handle+0x12e>
		le_set_privacy_mode(cmd, evt);
   1254c:	68a0      	ldr	r0, [r4, #8]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
   1254e:	79c1      	ldrb	r1, [r0, #7]
   12550:	f006 fcbe 	bl	18ed0 <ll_priv_mode_set>
   12554:	e750      	b.n	123f8 <hci_cmd_handle+0x408>
		le_add_dev_to_rl(cmd, evt);
   12556:	68a0      	ldr	r0, [r4, #8]
	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
   12558:	f100 0217 	add.w	r2, r0, #23
   1255c:	1dc1      	adds	r1, r0, #7
   1255e:	f006 fb15 	bl	18b8c <ll_rl_add>
   12562:	e749      	b.n	123f8 <hci_cmd_handle+0x408>
		le_write_default_data_len(cmd, evt);
   12564:	68a3      	ldr	r3, [r4, #8]
	status = ll_length_default_set(max_tx_octets, max_tx_time);
   12566:	8859      	ldrh	r1, [r3, #2]
   12568:	8818      	ldrh	r0, [r3, #0]
   1256a:	f003 f8b1 	bl	156d0 <ll_length_default_set>
   1256e:	e743      	b.n	123f8 <hci_cmd_handle+0x408>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   12570:	2105      	movs	r1, #5
   12572:	a809      	add	r0, sp, #36	; 0x24
   12574:	f7ff fc9e 	bl	11eb4 <hci_cmd_complete>
	ll_length_default_get(&max_tx_octets, &max_tx_time);
   12578:	a90a      	add	r1, sp, #40	; 0x28
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1257a:	4604      	mov	r4, r0
	ll_length_default_get(&max_tx_octets, &max_tx_time);
   1257c:	f10d 0022 	add.w	r0, sp, #34	; 0x22
   12580:	f003 f89a 	bl	156b8 <ll_length_default_get>
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
   12584:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
   12588:	f8a4 3001 	strh.w	r3, [r4, #1]
	rp->status = 0x00;
   1258c:	2200      	movs	r2, #0
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   1258e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	rp->status = 0x00;
   12592:	7022      	strb	r2, [r4, #0]
   12594:	9809      	ldr	r0, [sp, #36]	; 0x24
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   12596:	f8a4 3003 	strh.w	r3, [r4, #3]
	if (err == -EINVAL) {
   1259a:	e5c0      	b.n	1211e <hci_cmd_handle+0x12e>
		le_set_data_len(cmd, evt);
   1259c:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   1259e:	881d      	ldrh	r5, [r3, #0]
	status = ll_length_req_send(handle, tx_octets, tx_time);
   125a0:	889a      	ldrh	r2, [r3, #4]
   125a2:	8859      	ldrh	r1, [r3, #2]
   125a4:	4628      	mov	r0, r5
   125a6:	f003 f83b 	bl	15620 <ll_length_req_send>
   125aa:	e60c      	b.n	121c6 <hci_cmd_handle+0x1d6>
		le_conn_param_req_neg_reply(cmd, evt);
   125ac:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   125ae:	881d      	ldrh	r5, [r3, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   125b0:	789a      	ldrb	r2, [r3, #2]
   125b2:	2300      	movs	r3, #0
   125b4:	e9cd 3301 	strd	r3, r3, [sp, #4]
   125b8:	4628      	mov	r0, r5
   125ba:	9300      	str	r3, [sp, #0]
   125bc:	2102      	movs	r1, #2
   125be:	f002 ff29 	bl	15414 <ll_conn_update>
   125c2:	e600      	b.n	121c6 <hci_cmd_handle+0x1d6>
		le_conn_param_req_reply(cmd, evt);
   125c4:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
   125c6:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   125c8:	8815      	ldrh	r5, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
   125ca:	8853      	ldrh	r3, [r2, #2]
   125cc:	9102      	str	r1, [sp, #8]
   125ce:	88d1      	ldrh	r1, [r2, #6]
   125d0:	9101      	str	r1, [sp, #4]
   125d2:	8892      	ldrh	r2, [r2, #4]
   125d4:	9200      	str	r2, [sp, #0]
   125d6:	4628      	mov	r0, r5
   125d8:	2200      	movs	r2, #0
   125da:	2102      	movs	r1, #2
   125dc:	f002 ff1a 	bl	15414 <ll_conn_update>
   125e0:	e5f1      	b.n	121c6 <hci_cmd_handle+0x1d6>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   125e2:	2109      	movs	r1, #9
   125e4:	a809      	add	r0, sp, #36	; 0x24
   125e6:	f7ff fc65 	bl	11eb4 <hci_cmd_complete>
	dst[0] = val;
   125ea:	2470      	movs	r4, #112	; 0x70
	rp->status = 0x00;
   125ec:	2300      	movs	r3, #0
	dst[1] = val >> 8;
   125ee:	2133      	movs	r1, #51	; 0x33
	dst[0] = val;
   125f0:	220f      	movs	r2, #15
   125f2:	7044      	strb	r4, [r0, #1]
	dst[1] = val >> 8;
   125f4:	7081      	strb	r1, [r0, #2]
	dst[0] = val;
   125f6:	70c2      	strb	r2, [r0, #3]
	dst[1] = val >> 8;
   125f8:	2413      	movs	r4, #19
	dst[0] = val;
   125fa:	213f      	movs	r1, #63	; 0x3f
	dst[1] = val >> 8;
   125fc:	2202      	movs	r2, #2
   125fe:	7003      	strb	r3, [r0, #0]
   12600:	7104      	strb	r4, [r0, #4]
	dst[0] = val;
   12602:	7141      	strb	r1, [r0, #5]
	dst[1] = val >> 8;
   12604:	7182      	strb	r2, [r0, #6]
	dst[0] = val;
   12606:	71c3      	strb	r3, [r0, #7]
	dst[1] = val >> 8;
   12608:	7203      	strb	r3, [r0, #8]
	if (err == -EINVAL) {
   1260a:	9809      	ldr	r0, [sp, #36]	; 0x24
   1260c:	e587      	b.n	1211e <hci_cmd_handle+0x12e>
	uint8_t enable = cmd->enable;
   1260e:	68a3      	ldr	r3, [r4, #8]
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
   12610:	2101      	movs	r1, #1
   12612:	a809      	add	r0, sp, #36	; 0x24
	uint8_t enable = cmd->enable;
   12614:	781d      	ldrb	r5, [r3, #0]
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
   12616:	f7ff fc4d 	bl	11eb4 <hci_cmd_complete>
   1261a:	4604      	mov	r4, r0
	ccst->status = ll_rl_enable(enable);
   1261c:	4628      	mov	r0, r5
   1261e:	f006 f8d3 	bl	187c8 <ll_rl_enable>
   12622:	7020      	strb	r0, [r4, #0]
	if (err == -EINVAL) {
   12624:	9809      	ldr	r0, [sp, #36]	; 0x24
   12626:	e57a      	b.n	1211e <hci_cmd_handle+0x12e>
	memcpy(dst, src, sizeof(*dst));
   12628:	68a1      	ldr	r1, [r4, #8]
   1262a:	2207      	movs	r2, #7
   1262c:	a80a      	add	r0, sp, #40	; 0x28
   1262e:	f00d fc1e 	bl	1fe6e <memcpy>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   12632:	2107      	movs	r1, #7
   12634:	a809      	add	r0, sp, #36	; 0x24
   12636:	f7ff fc3d 	bl	11eb4 <hci_cmd_complete>
   1263a:	4604      	mov	r4, r0
	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
   1263c:	1c61      	adds	r1, r4, #1
   1263e:	a80a      	add	r0, sp, #40	; 0x28
   12640:	f006 fc2a 	bl	18e98 <ll_rl_lrpa_get>
   12644:	7020      	strb	r0, [r4, #0]
	if (err == -EINVAL) {
   12646:	9809      	ldr	r0, [sp, #36]	; 0x24
   12648:	e569      	b.n	1211e <hci_cmd_handle+0x12e>
   1264a:	bf00      	nop
   1264c:	20000110 	.word	0x20000110
   12650:	68a1      	ldr	r1, [r4, #8]
   12652:	2207      	movs	r2, #7
   12654:	a80a      	add	r0, sp, #40	; 0x28
   12656:	f00d fc0a 	bl	1fe6e <memcpy>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1265a:	2107      	movs	r1, #7
   1265c:	a809      	add	r0, sp, #36	; 0x24
   1265e:	f7ff fc29 	bl	11eb4 <hci_cmd_complete>
   12662:	4604      	mov	r4, r0
	rp->status = ll_rl_crpa_get(&peer_id_addr, &rp->peer_rpa);
   12664:	1c61      	adds	r1, r4, #1
   12666:	a80a      	add	r0, sp, #40	; 0x28
   12668:	f006 fbf4 	bl	18e54 <ll_rl_crpa_get>
   1266c:	7020      	strb	r0, [r4, #0]
	if (err == -EINVAL) {
   1266e:	9809      	ldr	r0, [sp, #36]	; 0x24
   12670:	e555      	b.n	1211e <hci_cmd_handle+0x12e>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   12672:	2102      	movs	r1, #2
   12674:	a809      	add	r0, sp, #36	; 0x24
   12676:	f7ff fc1d 	bl	11eb4 <hci_cmd_complete>
   1267a:	4604      	mov	r4, r0
	rp->rl_size = ll_rl_size_get();
   1267c:	f006 f862 	bl	18744 <ll_rl_size_get>
	rp->status = 0x00;
   12680:	2300      	movs	r3, #0
	rp->rl_size = ll_rl_size_get();
   12682:	7060      	strb	r0, [r4, #1]
	rp->status = 0x00;
   12684:	7023      	strb	r3, [r4, #0]
	if (err == -EINVAL) {
   12686:	9809      	ldr	r0, [sp, #36]	; 0x24
   12688:	e549      	b.n	1211e <hci_cmd_handle+0x12e>
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
   1268a:	2101      	movs	r1, #1
   1268c:	a809      	add	r0, sp, #36	; 0x24
   1268e:	f7ff fc11 	bl	11eb4 <hci_cmd_complete>
   12692:	4604      	mov	r4, r0
	ccst->status = ll_rl_clear();
   12694:	f006 f858 	bl	18748 <ll_rl_clear>
   12698:	7020      	strb	r0, [r4, #0]
	if (err == -EINVAL) {
   1269a:	9809      	ldr	r0, [sp, #36]	; 0x24
   1269c:	e53f      	b.n	1211e <hci_cmd_handle+0x12e>
	status = ll_rl_remove(&cmd->peer_id_addr);
   1269e:	68a0      	ldr	r0, [r4, #8]
   126a0:	f006 fb34 	bl	18d0c <ll_rl_remove>
   126a4:	e6a8      	b.n	123f8 <hci_cmd_handle+0x408>
	status = ll_wl_remove(&cmd->addr);
   126a6:	68a0      	ldr	r0, [r4, #8]
   126a8:	f005 ffd2 	bl	18650 <ll_wl_remove>
   126ac:	e6a4      	b.n	123f8 <hci_cmd_handle+0x408>
	status = ll_wl_add(&cmd->addr);
   126ae:	68a0      	ldr	r0, [r4, #8]
   126b0:	f006 fa0c 	bl	18acc <ll_wl_add>
   126b4:	e6a0      	b.n	123f8 <hci_cmd_handle+0x408>
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
   126b6:	2101      	movs	r1, #1
   126b8:	a809      	add	r0, sp, #36	; 0x24
   126ba:	f7ff fbfb 	bl	11eb4 <hci_cmd_complete>
   126be:	4604      	mov	r4, r0
	ccst->status = ll_wl_clear();
   126c0:	f005 ff9a 	bl	185f8 <ll_wl_clear>
   126c4:	7020      	strb	r0, [r4, #0]
	if (err == -EINVAL) {
   126c6:	9809      	ldr	r0, [sp, #36]	; 0x24
   126c8:	e529      	b.n	1211e <hci_cmd_handle+0x12e>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   126ca:	2102      	movs	r1, #2
   126cc:	a809      	add	r0, sp, #36	; 0x24
   126ce:	f7ff fbf1 	bl	11eb4 <hci_cmd_complete>
	rp->status = 0x00;
   126d2:	2300      	movs	r3, #0
   126d4:	7003      	strb	r3, [r0, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   126d6:	4604      	mov	r4, r0
	rp->wl_size = ll_wl_size_get();
   126d8:	f005 ff8c 	bl	185f4 <ll_wl_size_get>
   126dc:	7060      	strb	r0, [r4, #1]
	if (err == -EINVAL) {
   126de:	9809      	ldr	r0, [sp, #36]	; 0x24
   126e0:	e51d      	b.n	1211e <hci_cmd_handle+0x12e>
	status = ll_connect_disable(node_rx);
   126e2:	4630      	mov	r0, r6
   126e4:	f005 fd20 	bl	18128 <ll_connect_disable>
   126e8:	e686      	b.n	123f8 <hci_cmd_handle+0x408>
		le_create_connection(cmd, evt);
   126ea:	68a4      	ldr	r4, [r4, #8]
	scan_interval = sys_le16_to_cpu(cmd->scan_interval);
   126ec:	8820      	ldrh	r0, [r4, #0]
	scan_window = sys_le16_to_cpu(cmd->scan_window);
   126ee:	8861      	ldrh	r1, [r4, #2]
	conn_interval_max = sys_le16_to_cpu(cmd->conn_interval_max);
   126f0:	f8b4 500f 	ldrh.w	r5, [r4, #15]
	conn_latency = sys_le16_to_cpu(cmd->conn_latency);
   126f4:	f8b4 6011 	ldrh.w	r6, [r4, #17]
	supervision_timeout = sys_le16_to_cpu(cmd->supervision_timeout);
   126f8:	f8b4 c013 	ldrh.w	ip, [r4, #19]
	uint16_t conn_interval_min = sys_le16_to_cpu(cmd->conn_interval_min);
   126fc:	f8b4 e00d 	ldrh.w	lr, [r4, #13]
   12700:	2209      	movs	r2, #9
        uint16_t new_interval = 2048;
   12702:	f44f 6300 	mov.w	r3, #2048	; 0x800
                if(new_interval<conn_interval_max) break;
   12706:	429d      	cmp	r5, r3
   12708:	d803      	bhi.n	12712 <hci_cmd_handle+0x722>
        for (int i = 0; i <9; i ++){
   1270a:	3a01      	subs	r2, #1
                new_interval = new_interval/2;
   1270c:	ea4f 0353 	mov.w	r3, r3, lsr #1
        for (int i = 0; i <9; i ++){
   12710:	d1f9      	bne.n	12706 <hci_cmd_handle+0x716>
	status = ll_create_connection(scan_interval, scan_window,
   12712:	7922      	ldrb	r2, [r4, #4]
	if(new_interval>= conn_interval_min)
   12714:	459e      	cmp	lr, r3
   12716:	bf98      	it	ls
   12718:	461d      	movls	r5, r3
	status = ll_create_connection(scan_interval, scan_window,
   1271a:	7963      	ldrb	r3, [r4, #5]
   1271c:	9502      	str	r5, [sp, #8]
   1271e:	e9cd 6c03 	strd	r6, ip, [sp, #12]
				      &cmd->peer_addr.a.val[0],
   12722:	3406      	adds	r4, #6
	status = ll_create_connection(scan_interval, scan_window,
   12724:	79a5      	ldrb	r5, [r4, #6]
   12726:	9501      	str	r5, [sp, #4]
   12728:	9400      	str	r4, [sp, #0]
   1272a:	f005 faf9 	bl	17d20 <ll_create_connection>
   1272e:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   12730:	8838      	ldrh	r0, [r7, #0]
   12732:	f7ff fbab 	bl	11e8c <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
   12736:	e4f2      	b.n	1211e <hci_cmd_handle+0x12e>
		le_set_scan_enable(cmd, evt);
   12738:	68a3      	ldr	r3, [r4, #8]
	if (cmd->enable && cmd->filter_dup) {
   1273a:	7818      	ldrb	r0, [r3, #0]
   1273c:	2800      	cmp	r0, #0
   1273e:	d065      	beq.n	1280c <hci_cmd_handle+0x81c>
   12740:	785b      	ldrb	r3, [r3, #1]
   12742:	2b00      	cmp	r3, #0
   12744:	d062      	beq.n	1280c <hci_cmd_handle+0x81c>
		dup_count = 0;
   12746:	4938      	ldr	r1, [pc, #224]	; (12828 <hci_cmd_handle+0x838>)
		dup_curr = 0U;
   12748:	4a38      	ldr	r2, [pc, #224]	; (1282c <hci_cmd_handle+0x83c>)
		dup_count = 0;
   1274a:	2300      	movs	r3, #0
   1274c:	600b      	str	r3, [r1, #0]
		dup_curr = 0U;
   1274e:	6013      	str	r3, [r2, #0]
	status = ll_scan_enable(cmd->enable);
   12750:	f002 f91e 	bl	14990 <ll_scan_enable>
   12754:	e650      	b.n	123f8 <hci_cmd_handle+0x408>
	status = ll_chm_update(&cmd->ch_map[0]);
   12756:	68a0      	ldr	r0, [r4, #8]
   12758:	f005 fd2c 	bl	181b4 <ll_chm_update>
   1275c:	e64c      	b.n	123f8 <hci_cmd_handle+0x408>
		le_set_scan_param(cmd, evt);
   1275e:	68a4      	ldr	r4, [r4, #8]
	status = ll_scan_params_set(cmd->scan_type, interval, window,
   12760:	7963      	ldrb	r3, [r4, #5]
   12762:	f8b4 2003 	ldrh.w	r2, [r4, #3]
   12766:	f8b4 1001 	ldrh.w	r1, [r4, #1]
   1276a:	7820      	ldrb	r0, [r4, #0]
   1276c:	79a4      	ldrb	r4, [r4, #6]
   1276e:	9400      	str	r4, [sp, #0]
   12770:	f7ee fd72 	bl	1258 <ll_scan_params_set>
   12774:	e640      	b.n	123f8 <hci_cmd_handle+0x408>
		le_conn_update(cmd, evt);
   12776:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_min,
   12778:	8911      	ldrh	r1, [r2, #8]
   1277a:	8853      	ldrh	r3, [r2, #2]
   1277c:	8810      	ldrh	r0, [r2, #0]
   1277e:	9102      	str	r1, [sp, #8]
   12780:	88d1      	ldrh	r1, [r2, #6]
   12782:	9101      	str	r1, [sp, #4]
   12784:	8892      	ldrh	r2, [r2, #4]
   12786:	9200      	str	r2, [sp, #0]
   12788:	2200      	movs	r2, #0
   1278a:	4611      	mov	r1, r2
   1278c:	f002 fe42 	bl	15414 <ll_conn_update>
   12790:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   12792:	8838      	ldrh	r0, [r7, #0]
   12794:	f7ff fb7a 	bl	11e8c <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
   12798:	e4c1      	b.n	1211e <hci_cmd_handle+0x12e>
		disconnect(cmd, evt);
   1279a:	68a3      	ldr	r3, [r4, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
   1279c:	7899      	ldrb	r1, [r3, #2]
   1279e:	8818      	ldrh	r0, [r3, #0]
   127a0:	f002 fee4 	bl	1556c <ll_terminate_ind_send>
   127a4:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   127a6:	8838      	ldrh	r0, [r7, #0]
   127a8:	f7ff fb70 	bl	11e8c <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
   127ac:	e4b7      	b.n	1211e <hci_cmd_handle+0x12e>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   127ae:	68a2      	ldr	r2, [r4, #8]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
   127b0:	4b1f      	ldr	r3, [pc, #124]	; (12830 <hci_cmd_handle+0x840>)
   127b2:	e5cd      	b.n	12350 <hci_cmd_handle+0x360>
	handle = sys_le16_to_cpu(cmd->handle);
   127b4:	68a3      	ldr	r3, [r4, #8]
   127b6:	881d      	ldrh	r5, [r3, #0]
	status = ll_apto_get(handle, &auth_payload_timeout);
   127b8:	a90a      	add	r1, sp, #40	; 0x28
   127ba:	4628      	mov	r0, r5
   127bc:	f003 f81a 	bl	157f4 <ll_apto_get>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   127c0:	2105      	movs	r1, #5
	status = ll_apto_get(handle, &auth_payload_timeout);
   127c2:	4604      	mov	r4, r0
	rp = hci_cmd_complete(evt, sizeof(*rp));
   127c4:	a809      	add	r0, sp, #36	; 0x24
   127c6:	f7ff fb75 	bl	11eb4 <hci_cmd_complete>
	rp->status = status;
   127ca:	7004      	strb	r4, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
   127cc:	f8a0 5001 	strh.w	r5, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
   127d0:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   127d4:	f8a0 3003 	strh.w	r3, [r0, #3]
   127d8:	9809      	ldr	r0, [sp, #36]	; 0x24
}
   127da:	e4a0      	b.n	1211e <hci_cmd_handle+0x12e>
	dup_count = -1;
   127dc:	4812      	ldr	r0, [pc, #72]	; (12828 <hci_cmd_handle+0x838>)
	event_mask = DEFAULT_EVENT_MASK;
   127de:	4915      	ldr	r1, [pc, #84]	; (12834 <hci_cmd_handle+0x844>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   127e0:	4a13      	ldr	r2, [pc, #76]	; (12830 <hci_cmd_handle+0x840>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   127e2:	4b15      	ldr	r3, [pc, #84]	; (12838 <hci_cmd_handle+0x848>)
	dup_count = -1;
   127e4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   127e8:	6004      	str	r4, [r0, #0]
	event_mask = DEFAULT_EVENT_MASK;
   127ea:	f641 75ff 	movw	r5, #8191	; 0x1fff
   127ee:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   127f2:	e9c1 4500 	strd	r4, r5, [r1]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   127f6:	201f      	movs	r0, #31
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   127f8:	2400      	movs	r4, #0
   127fa:	2500      	movs	r5, #0
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   127fc:	2100      	movs	r1, #0
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   127fe:	e9c2 4500 	strd	r4, r5, [r2]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   12802:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
   12806:	f001 f95f 	bl	13ac8 <ll_reset>
		ccst = hci_cmd_complete(evt, sizeof(*ccst));
   1280a:	e649      	b.n	124a0 <hci_cmd_handle+0x4b0>
		dup_count = -1;
   1280c:	4b06      	ldr	r3, [pc, #24]	; (12828 <hci_cmd_handle+0x838>)
   1280e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12812:	601a      	str	r2, [r3, #0]
   12814:	e79c      	b.n	12750 <hci_cmd_handle+0x760>
	return bt_hci_cmd_status_create(_opcode, status);
   12816:	2112      	movs	r1, #18
   12818:	f7ff fb38 	bl	11e8c <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
   1281c:	e47f      	b.n	1211e <hci_cmd_handle+0x12e>
	return bt_hci_cmd_status_create(_opcode, status);
   1281e:	2111      	movs	r1, #17
   12820:	f7ff fb34 	bl	11e8c <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
   12824:	e47b      	b.n	1211e <hci_cmd_handle+0x12e>
   12826:	bf00      	nop
   12828:	200025a4 	.word	0x200025a4
   1282c:	200025a8 	.word	0x200025a8
   12830:	20001ab0 	.word	0x20001ab0
   12834:	20000108 	.word	0x20000108
   12838:	20000110 	.word	0x20000110

0001283c <hci_acl_handle>:
	if (buf->len < sizeof(*acl)) {
   1283c:	8983      	ldrh	r3, [r0, #12]
	*evt = NULL;
   1283e:	2200      	movs	r2, #0
	if (buf->len < sizeof(*acl)) {
   12840:	2b03      	cmp	r3, #3
{
   12842:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	*evt = NULL;
   12846:	600a      	str	r2, [r1, #0]
	if (buf->len < sizeof(*acl)) {
   12848:	d942      	bls.n	128d0 <hci_acl_handle+0x94>
	acl = net_buf_pull_mem(buf, sizeof(*acl));
   1284a:	4605      	mov	r5, r0
   1284c:	460e      	mov	r6, r1
   1284e:	3008      	adds	r0, #8
   12850:	2104      	movs	r1, #4
   12852:	f00f feda 	bl	2260a <net_buf_simple_pull_mem>
	if (buf->len < len) {
   12856:	89ab      	ldrh	r3, [r5, #12]
	len = sys_le16_to_cpu(acl->len);
   12858:	8847      	ldrh	r7, [r0, #2]
	handle = sys_le16_to_cpu(acl->handle);
   1285a:	f8b0 8000 	ldrh.w	r8, [r0]
	if (buf->len < len) {
   1285e:	42bb      	cmp	r3, r7
   12860:	d343      	bcc.n	128ea <hci_acl_handle+0xae>
	node_tx = ll_tx_mem_acquire();
   12862:	f002 fd1f 	bl	152a4 <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
   12866:	ea4f 3318 	mov.w	r3, r8, lsr #12
	if (!node_tx) {
   1286a:	4604      	mov	r4, r0
   1286c:	2800      	cmp	r0, #0
   1286e:	d040      	beq.n	128f2 <hci_acl_handle+0xb6>
	if (bt_acl_flags_bc(flags) != BT_ACL_POINT_TO_POINT) {
   12870:	089a      	lsrs	r2, r3, #2
   12872:	d102      	bne.n	1287a <hci_acl_handle+0x3e>
	switch (bt_acl_flags_pb(flags)) {
   12874:	b333      	cbz	r3, 128c4 <hci_acl_handle+0x88>
   12876:	2b01      	cmp	r3, #1
   12878:	d003      	beq.n	12882 <hci_acl_handle+0x46>
		return -EINVAL;
   1287a:	f06f 0015 	mvn.w	r0, #21
}
   1287e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   12882:	7902      	ldrb	r2, [r0, #4]
   12884:	f363 0201 	bfi	r2, r3, #0, #2
   12888:	7102      	strb	r2, [r0, #4]
	pdu_data->len = len;
   1288a:	7167      	strb	r7, [r4, #5]
	memcpy(&pdu_data->lldata[0], buf->data, len);
   1288c:	68a9      	ldr	r1, [r5, #8]
   1288e:	463a      	mov	r2, r7
   12890:	1de0      	adds	r0, r4, #7
   12892:	f00d faec 	bl	1fe6e <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
   12896:	4621      	mov	r1, r4
   12898:	f3c8 000b 	ubfx	r0, r8, #0, #12
   1289c:	f002 fd0e 	bl	152bc <ll_tx_mem_enqueue>
   128a0:	2800      	cmp	r0, #0
   128a2:	d0ec      	beq.n	1287e <hci_acl_handle+0x42>
   128a4:	4b2a      	ldr	r3, [pc, #168]	; (12950 <hci_acl_handle+0x114>)
   128a6:	492b      	ldr	r1, [pc, #172]	; (12954 <hci_acl_handle+0x118>)
		BT_ERR("Invalid Tx Enqueue");
   128a8:	482b      	ldr	r0, [pc, #172]	; (12958 <hci_acl_handle+0x11c>)
   128aa:	1ac9      	subs	r1, r1, r3
   128ac:	08c9      	lsrs	r1, r1, #3
   128ae:	0189      	lsls	r1, r1, #6
   128b0:	f041 0101 	orr.w	r1, r1, #1
   128b4:	f00b fe09 	bl	1e4ca <log_0>
		ll_tx_mem_release(node_tx);
   128b8:	4620      	mov	r0, r4
   128ba:	f002 fcf9 	bl	152b0 <ll_tx_mem_release>
		return -EINVAL;
   128be:	f06f 0015 	mvn.w	r0, #21
   128c2:	e7dc      	b.n	1287e <hci_acl_handle+0x42>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
   128c4:	7903      	ldrb	r3, [r0, #4]
   128c6:	2202      	movs	r2, #2
   128c8:	f362 0301 	bfi	r3, r2, #0, #2
   128cc:	7103      	strb	r3, [r0, #4]
		break;
   128ce:	e7dc      	b.n	1288a <hci_acl_handle+0x4e>
   128d0:	4920      	ldr	r1, [pc, #128]	; (12954 <hci_acl_handle+0x118>)
   128d2:	4b1f      	ldr	r3, [pc, #124]	; (12950 <hci_acl_handle+0x114>)
		BT_ERR("No HCI ACL header");
   128d4:	4821      	ldr	r0, [pc, #132]	; (1295c <hci_acl_handle+0x120>)
   128d6:	1ac9      	subs	r1, r1, r3
   128d8:	08c9      	lsrs	r1, r1, #3
		BT_ERR("Invalid HCI ACL packet length");
   128da:	0189      	lsls	r1, r1, #6
   128dc:	f041 0101 	orr.w	r1, r1, #1
   128e0:	f00b fdf3 	bl	1e4ca <log_0>
		return -EINVAL;
   128e4:	f06f 0015 	mvn.w	r0, #21
   128e8:	e7c9      	b.n	1287e <hci_acl_handle+0x42>
   128ea:	491a      	ldr	r1, [pc, #104]	; (12954 <hci_acl_handle+0x118>)
   128ec:	4b18      	ldr	r3, [pc, #96]	; (12950 <hci_acl_handle+0x114>)
		BT_ERR("Invalid HCI ACL packet length");
   128ee:	481c      	ldr	r0, [pc, #112]	; (12960 <hci_acl_handle+0x124>)
   128f0:	e7f1      	b.n	128d6 <hci_acl_handle+0x9a>
   128f2:	4b17      	ldr	r3, [pc, #92]	; (12950 <hci_acl_handle+0x114>)
   128f4:	4917      	ldr	r1, [pc, #92]	; (12954 <hci_acl_handle+0x118>)
		BT_ERR("Tx Buffer Overflow");
   128f6:	481b      	ldr	r0, [pc, #108]	; (12964 <hci_acl_handle+0x128>)
   128f8:	1ac9      	subs	r1, r1, r3
   128fa:	08c9      	lsrs	r1, r1, #3
   128fc:	0189      	lsls	r1, r1, #6
   128fe:	f041 0101 	orr.w	r1, r1, #1
   12902:	f00b fde2 	bl	1e4ca <log_0>
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
   12906:	4b18      	ldr	r3, [pc, #96]	; (12968 <hci_acl_handle+0x12c>)
   12908:	6819      	ldr	r1, [r3, #0]
   1290a:	4623      	mov	r3, r4
   1290c:	f001 7200 	and.w	r2, r1, #33554432	; 0x2000000
   12910:	4313      	orrs	r3, r2
   12912:	d102      	bne.n	1291a <hci_acl_handle+0xde>
		return -ENOBUFS;
   12914:	f06f 0036 	mvn.w	r0, #54	; 0x36
   12918:	e7b1      	b.n	1287e <hci_acl_handle+0x42>
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   1291a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1291e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12922:	2001      	movs	r0, #1
   12924:	f7f7 fc9a 	bl	a25c <bt_buf_get_rx>
	hdr = net_buf_add(buf, sizeof(*hdr));
   12928:	2102      	movs	r1, #2
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   1292a:	6030      	str	r0, [r6, #0]
	hdr = net_buf_add(buf, sizeof(*hdr));
   1292c:	3008      	adds	r0, #8
   1292e:	f00f fe2f 	bl	22590 <net_buf_simple_add>
	hdr->len = len;
   12932:	2401      	movs	r4, #1
	hdr->evt = evt;
   12934:	221a      	movs	r2, #26
   12936:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
   12938:	7044      	strb	r4, [r0, #1]
	ep = net_buf_add(*buf, sizeof(*ep));
   1293a:	6830      	ldr	r0, [r6, #0]
   1293c:	4621      	mov	r1, r4
   1293e:	3008      	adds	r0, #8
   12940:	f00f fe26 	bl	22590 <net_buf_simple_add>
   12944:	4603      	mov	r3, r0
		return -ENOBUFS;
   12946:	f06f 0036 	mvn.w	r0, #54	; 0x36
	ep->link_type = BT_OVERFLOW_LINK_ACL;
   1294a:	701c      	strb	r4, [r3, #0]
   1294c:	e797      	b.n	1287e <hci_acl_handle+0x42>
   1294e:	bf00      	nop
   12950:	000236e8 	.word	0x000236e8
   12954:	00023720 	.word	0x00023720
   12958:	0002417c 	.word	0x0002417c
   1295c:	00024134 	.word	0x00024134
   12960:	00024148 	.word	0x00024148
   12964:	00024168 	.word	0x00024168
   12968:	20000108 	.word	0x20000108

0001296c <hci_acl_encode>:
	uint16_t handle;
	uint8_t *data;

	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
   1296c:	7f03      	ldrb	r3, [r0, #28]
   1296e:	f003 0303 	and.w	r3, r3, #3
   12972:	3b01      	subs	r3, #1
   12974:	2b01      	cmp	r3, #1
{
   12976:	b570      	push	{r4, r5, r6, lr}
	switch (pdu_data->ll_id) {
   12978:	d90d      	bls.n	12996 <hci_acl_encode+0x2a>
		}
#endif
		break;

	default:
		LL_ASSERT(0);
   1297a:	4a16      	ldr	r2, [pc, #88]	; (129d4 <hci_acl_encode+0x68>)
   1297c:	4916      	ldr	r1, [pc, #88]	; (129d8 <hci_acl_encode+0x6c>)
   1297e:	4817      	ldr	r0, [pc, #92]	; (129dc <hci_acl_encode+0x70>)
   12980:	f241 038a 	movw	r3, #4234	; 0x108a
   12984:	f00b fae1 	bl	1df4a <printk>
   12988:	4040      	eors	r0, r0
   1298a:	f380 8811 	msr	BASEPRI, r0
   1298e:	f04f 0003 	mov.w	r0, #3
   12992:	df02      	svc	2
		break;
	}
}
   12994:	bd70      	pop	{r4, r5, r6, pc}
   12996:	4604      	mov	r4, r0
		acl = (void *)net_buf_add(buf, sizeof(*acl));
   12998:	f101 0508 	add.w	r5, r1, #8
   1299c:	4628      	mov	r0, r5
   1299e:	2104      	movs	r1, #4
	handle = node_rx->hdr.handle;
   129a0:	88e6      	ldrh	r6, [r4, #6]
		acl = (void *)net_buf_add(buf, sizeof(*acl));
   129a2:	f00f fdf5 	bl	22590 <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
   129a6:	7f23      	ldrb	r3, [r4, #28]
   129a8:	f003 0303 	and.w	r3, r3, #3
   129ac:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
   129ae:	bf0c      	ite	eq
   129b0:	f446 5600 	orreq.w	r6, r6, #8192	; 0x2000
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
   129b4:	f446 5680 	orrne.w	r6, r6, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
   129b8:	8006      	strh	r6, [r0, #0]
		acl->len = sys_cpu_to_le16(pdu_data->len);
   129ba:	7f61      	ldrb	r1, [r4, #29]
   129bc:	8041      	strh	r1, [r0, #2]
		data = (void *)net_buf_add(buf, pdu_data->len);
   129be:	4628      	mov	r0, r5
   129c0:	f00f fde6 	bl	22590 <net_buf_simple_add>
		memcpy(data, pdu_data->lldata, pdu_data->len);
   129c4:	7f62      	ldrb	r2, [r4, #29]
   129c6:	f104 011f 	add.w	r1, r4, #31
}
   129ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(data, pdu_data->lldata, pdu_data->len);
   129ce:	f00d ba4e 	b.w	1fe6e <memcpy>
   129d2:	bf00      	nop
   129d4:	00024190 	.word	0x00024190
   129d8:	00024054 	.word	0x00024054
   129dc:	00023fe4 	.word	0x00023fe4

000129e0 <hci_evt_encode>:
#endif /* CONFIG_BT_CONN */

void hci_evt_encode(struct node_rx_pdu *node_rx, struct net_buf *buf)
{
   129e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct pdu_data *pdu_data = PDU_DATA(node_rx);

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   129e4:	7905      	ldrb	r5, [r0, #4]
   129e6:	88c7      	ldrh	r7, [r0, #6]
   129e8:	2d02      	cmp	r5, #2
{
   129ea:	b08b      	sub	sp, #44	; 0x2c
   129ec:	4604      	mov	r4, r0
   129ee:	460e      	mov	r6, r1
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   129f0:	d010      	beq.n	12a14 <hci_evt_encode+0x34>
	switch (node_rx->hdr.type) {
   129f2:	3d04      	subs	r5, #4
   129f4:	2d0b      	cmp	r5, #11
   129f6:	d860      	bhi.n	12aba <hci_evt_encode+0xda>
   129f8:	e8df f015 	tbh	[pc, r5, lsl #1]
   129fc:	005f006f 	.word	0x005f006f
   12a00:	005f005f 	.word	0x005f005f
   12a04:	0114005f 	.word	0x0114005f
   12a08:	017e015e 	.word	0x017e015e
   12a0c:	01d801be 	.word	0x01d801be
   12a10:	002601ef 	.word	0x002601ef
	switch (pdu_data->llctrl.opcode) {
   12a14:	7fc3      	ldrb	r3, [r0, #31]
   12a16:	3b03      	subs	r3, #3
   12a18:	2b12      	cmp	r3, #18
   12a1a:	f200 81f8 	bhi.w	12e0e <hci_evt_encode+0x42e>
   12a1e:	e8df f013 	tbh	[pc, r3, lsl #1]
   12a22:	026e      	.short	0x026e
   12a24:	01f601f6 	.word	0x01f601f6
   12a28:	02a20294 	.word	0x02a20294
   12a2c:	023901f6 	.word	0x023901f6
   12a30:	01f601f6 	.word	0x01f601f6
   12a34:	024101f6 	.word	0x024101f6
   12a38:	025001f6 	.word	0x025001f6
   12a3c:	01f601f6 	.word	0x01f601f6
   12a40:	01f601f6 	.word	0x01f601f6
   12a44:	01f901f9 	.word	0x01f901f9
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12a48:	4bbd      	ldr	r3, [pc, #756]	; (12d40 <hci_evt_encode+0x360>)
   12a4a:	6858      	ldr	r0, [r3, #4]
   12a4c:	2100      	movs	r1, #0
   12a4e:	460a      	mov	r2, r1
   12a50:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
   12a54:	4313      	orrs	r3, r2
   12a56:	d007      	beq.n	12a68 <hci_evt_encode+0x88>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
   12a58:	4bba      	ldr	r3, [pc, #744]	; (12d44 <hci_evt_encode+0x364>)
   12a5a:	6818      	ldr	r0, [r3, #0]
   12a5c:	460b      	mov	r3, r1
   12a5e:	f400 6200 	and.w	r2, r0, #2048	; 0x800
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12a62:	4313      	orrs	r3, r2
   12a64:	f040 81f6 	bne.w	12e54 <hci_evt_encode+0x474>
   12a68:	7f61      	ldrb	r1, [r4, #29]
   12a6a:	48b7      	ldr	r0, [pc, #732]	; (12d48 <hci_evt_encode+0x368>)
   12a6c:	4bb7      	ldr	r3, [pc, #732]	; (12d4c <hci_evt_encode+0x36c>)
   12a6e:	7fa2      	ldrb	r2, [r4, #30]
		BT_WARN("handle: 0x%04x, status: %x, tx: %x, rx: %x.", handle,
   12a70:	7f25      	ldrb	r5, [r4, #28]
   12a72:	9706      	str	r7, [sp, #24]
   12a74:	2900      	cmp	r1, #0
   12a76:	eba3 0300 	sub.w	r3, r3, r0
   12a7a:	fa91 f1a1 	rbit	r1, r1
   12a7e:	fab1 f181 	clz	r1, r1
   12a82:	ea4f 03d3 	mov.w	r3, r3, lsr #3
   12a86:	bf08      	it	eq
   12a88:	f04f 31ff 	moveq.w	r1, #4294967295	; 0xffffffff
   12a8c:	2a00      	cmp	r2, #0
   12a8e:	fa92 f2a2 	rbit	r2, r2
   12a92:	fab2 f282 	clz	r2, r2
   12a96:	f101 0001 	add.w	r0, r1, #1
   12a9a:	bf08      	it	eq
   12a9c:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
   12aa0:	019b      	lsls	r3, r3, #6
   12aa2:	1c54      	adds	r4, r2, #1
   12aa4:	9008      	str	r0, [sp, #32]
   12aa6:	f043 0302 	orr.w	r3, r3, #2
   12aaa:	48a9      	ldr	r0, [pc, #676]	; (12d50 <hci_evt_encode+0x370>)
   12aac:	9409      	str	r4, [sp, #36]	; 0x24
   12aae:	2204      	movs	r2, #4
   12ab0:	a906      	add	r1, sp, #24
   12ab2:	9507      	str	r5, [sp, #28]
   12ab4:	f00b fd5f 	bl	1e576 <log_n>
		return;
   12ab8:	e00c      	b.n	12ad4 <hci_evt_encode+0xf4>
		LL_ASSERT(0);
   12aba:	f640 7395 	movw	r3, #3989	; 0xf95
		LL_ASSERT(0);
   12abe:	4aa5      	ldr	r2, [pc, #660]	; (12d54 <hci_evt_encode+0x374>)
   12ac0:	49a5      	ldr	r1, [pc, #660]	; (12d58 <hci_evt_encode+0x378>)
   12ac2:	48a6      	ldr	r0, [pc, #664]	; (12d5c <hci_evt_encode+0x37c>)
   12ac4:	f00b fa41 	bl	1df4a <printk>
   12ac8:	4040      	eors	r0, r0
   12aca:	f380 8811 	msr	BASEPRI, r0
   12ace:	f04f 0003 	mov.w	r0, #3
   12ad2:	df02      	svc	2
		encode_control(node_rx, pdu_data, buf);
	} else if (IS_ENABLED(CONFIG_BT_CONN)) {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
   12ad4:	b00b      	add	sp, #44	; 0x2c
   12ad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
   12ada:	4aa1      	ldr	r2, [pc, #644]	; (12d60 <hci_evt_encode+0x380>)
	rssi = -(node_rx->hdr.rx_ftr.rssi);
   12adc:	7e03      	ldrb	r3, [r0, #24]
	if (adv->tx_addr) {
   12ade:	7f05      	ldrb	r5, [r0, #28]
	rl_idx = node_rx->hdr.rx_ftr.rl_idx;
   12ae0:	f890 901a 	ldrb.w	r9, [r0, #26]
	direct = node_rx->hdr.rx_ftr.direct;
   12ae4:	f894 a01b 	ldrb.w	sl, [r4, #27]
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
   12ae8:	e892 0003 	ldmia.w	r2, {r0, r1}
	rssi = -(node_rx->hdr.rx_ftr.rssi);
   12aec:	425b      	negs	r3, r3
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
   12aee:	0c0a      	lsrs	r2, r1, #16
	rssi = -(node_rx->hdr.rx_ftr.rssi);
   12af0:	b25b      	sxtb	r3, r3
	if (adv->tx_addr) {
   12af2:	066f      	lsls	r7, r5, #25
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
   12af4:	9006      	str	r0, [sp, #24]
   12af6:	f8ad 101c 	strh.w	r1, [sp, #28]
   12afa:	f88d 201e 	strb.w	r2, [sp, #30]
	rssi = -(node_rx->hdr.rx_ftr.rssi);
   12afe:	9305      	str	r3, [sp, #20]
	if (adv->tx_addr) {
   12b00:	f100 824a 	bmi.w	12f98 <hci_evt_encode+0x5b8>
	if (direct) {
   12b04:	4b8e      	ldr	r3, [pc, #568]	; (12d40 <hci_evt_encode+0x360>)
   12b06:	6858      	ldr	r0, [r3, #4]
   12b08:	2100      	movs	r1, #0
   12b0a:	460a      	mov	r2, r1
   12b0c:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
   12b10:	f1ba 0f00 	cmp.w	sl, #0
   12b14:	f040 826e 	bne.w	12ff4 <hci_evt_encode+0x614>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12b18:	4313      	orrs	r3, r2
   12b1a:	d0db      	beq.n	12ad4 <hci_evt_encode+0xf4>
	    !(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) {
   12b1c:	4b89      	ldr	r3, [pc, #548]	; (12d44 <hci_evt_encode+0x364>)
   12b1e:	6819      	ldr	r1, [r3, #0]
   12b20:	4653      	mov	r3, sl
   12b22:	f001 0202 	and.w	r2, r1, #2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12b26:	4313      	orrs	r3, r2
   12b28:	d0d4      	beq.n	12ad4 <hci_evt_encode+0xf4>
	if (dup_count >= 0) {
   12b2a:	f8df 8248 	ldr.w	r8, [pc, #584]	; 12d74 <hci_evt_encode+0x394>
   12b2e:	f8d8 2000 	ldr.w	r2, [r8]
   12b32:	2a00      	cmp	r2, #0
   12b34:	db3f      	blt.n	12bb6 <hci_evt_encode+0x1d6>
		for (i = 0; i < dup_count; i++) {
   12b36:	f104 0b1e 	add.w	fp, r4, #30
   12b3a:	d016      	beq.n	12b6a <hci_evt_encode+0x18a>
   12b3c:	4d89      	ldr	r5, [pc, #548]	; (12d64 <hci_evt_encode+0x384>)
   12b3e:	4657      	mov	r7, sl
			if (!memcmp(&adv->adv_ind.addr[0],
   12b40:	2206      	movs	r2, #6
   12b42:	4629      	mov	r1, r5
   12b44:	4658      	mov	r0, fp
   12b46:	f00d f982 	bl	1fe4e <memcmp>
   12b4a:	b938      	cbnz	r0, 12b5c <hci_evt_encode+0x17c>
			    adv->tx_addr == dup_filter[i].addr.type) {
   12b4c:	7f22      	ldrb	r2, [r4, #28]
   12b4e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   12b52:	f3c2 1080 	ubfx	r0, r2, #6, #1
				    sizeof(bt_addr_t)) &&
   12b56:	4288      	cmp	r0, r1
   12b58:	f000 8325 	beq.w	131a6 <hci_evt_encode+0x7c6>
		for (i = 0; i < dup_count; i++) {
   12b5c:	f8d8 2000 	ldr.w	r2, [r8]
   12b60:	3701      	adds	r7, #1
   12b62:	4297      	cmp	r7, r2
   12b64:	f105 0508 	add.w	r5, r5, #8
   12b68:	dbea      	blt.n	12b40 <hci_evt_encode+0x160>
		memcpy(&dup_filter[dup_curr].addr.a.val[0],
   12b6a:	4d7f      	ldr	r5, [pc, #508]	; (12d68 <hci_evt_encode+0x388>)
   12b6c:	4f7f      	ldr	r7, [pc, #508]	; (12d6c <hci_evt_encode+0x38c>)
   12b6e:	682a      	ldr	r2, [r5, #0]
   12b70:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
   12b74:	4659      	mov	r1, fp
   12b76:	1c90      	adds	r0, r2, #2
   12b78:	2206      	movs	r2, #6
   12b7a:	f00d f978 	bl	1fe6e <memcpy>
		dup_filter[dup_curr].addr.type = adv->tx_addr;
   12b7e:	682a      	ldr	r2, [r5, #0]
   12b80:	7f21      	ldrb	r1, [r4, #28]
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   12b82:	f8d8 3000 	ldr.w	r3, [r8]
		dup_filter[dup_curr].addr.type = adv->tx_addr;
   12b86:	eb07 00c2 	add.w	r0, r7, r2, lsl #3
   12b8a:	f3c1 1180 	ubfx	r1, r1, #6, #1
   12b8e:	7041      	strb	r1, [r0, #1]
		dup_filter[dup_curr].mask = BIT(adv->type);
   12b90:	7f20      	ldrb	r0, [r4, #28]
   12b92:	2101      	movs	r1, #1
   12b94:	f000 000f 	and.w	r0, r0, #15
   12b98:	4081      	lsls	r1, r0
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   12b9a:	2b0f      	cmp	r3, #15
		dup_filter[dup_curr].mask = BIT(adv->type);
   12b9c:	f807 1032 	strb.w	r1, [r7, r2, lsl #3]
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   12ba0:	f300 82fe 	bgt.w	131a0 <hci_evt_encode+0x7c0>
			dup_count++;
   12ba4:	1c59      	adds	r1, r3, #1
			dup_curr = dup_count;
   12ba6:	460a      	mov	r2, r1
			dup_count++;
   12ba8:	f8c8 1000 	str.w	r1, [r8]
			dup_curr = dup_count;
   12bac:	6029      	str	r1, [r5, #0]
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   12bae:	2a10      	cmp	r2, #16
			dup_curr = 0U;
   12bb0:	bf04      	itt	eq
   12bb2:	2300      	moveq	r3, #0
   12bb4:	602b      	streq	r3, [r5, #0]
	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
   12bb6:	7f23      	ldrb	r3, [r4, #28]
   12bb8:	f003 030f 	and.w	r3, r3, #15
   12bbc:	2b01      	cmp	r3, #1
   12bbe:	f000 82ec 	beq.w	1319a <hci_evt_encode+0x7ba>
		data_len = (adv->len - BDADDR_SIZE);
   12bc2:	7f63      	ldrb	r3, [r4, #29]
   12bc4:	f1a3 0a06 	sub.w	sl, r3, #6
   12bc8:	fa5f fa8a 	uxtb.w	sl, sl
   12bcc:	3305      	adds	r3, #5
   12bce:	b2da      	uxtb	r2, r3
   12bd0:	4657      	mov	r7, sl
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
   12bd2:	2102      	movs	r1, #2
   12bd4:	4630      	mov	r0, r6
   12bd6:	f7ff f8c9 	bl	11d6c <meta_evt>
	sep->num_reports = 1U;
   12bda:	2301      	movs	r3, #1
   12bdc:	7003      	strb	r3, [r0, #0]
	adv_info->evt_type = c_adv_type[adv->type];
   12bde:	7f23      	ldrb	r3, [r4, #28]
   12be0:	aa0a      	add	r2, sp, #40	; 0x28
   12be2:	f003 030f 	and.w	r3, r3, #15
   12be6:	4413      	add	r3, r2
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
   12be8:	4605      	mov	r5, r0
	adv_info->evt_type = c_adv_type[adv->type];
   12bea:	f813 3c10 	ldrb.w	r3, [r3, #-16]
   12bee:	7043      	strb	r3, [r0, #1]
	if (rl_idx < ll_rl_size_get()) {
   12bf0:	f005 fda8 	bl	18744 <ll_rl_size_get>
   12bf4:	4581      	cmp	r9, r0
   12bf6:	f080 82c5 	bcs.w	13184 <hci_evt_encode+0x7a4>
		ll_rl_id_addr_get(rl_idx, &adv_info->addr.type,
   12bfa:	4648      	mov	r0, r9
   12bfc:	1cea      	adds	r2, r5, #3
   12bfe:	1ca9      	adds	r1, r5, #2
   12c00:	f005 fd5c 	bl	186bc <ll_rl_id_addr_get>
		adv_info->addr.type += 2U;
   12c04:	78ab      	ldrb	r3, [r5, #2]
   12c06:	3302      	adds	r3, #2
   12c08:	70ab      	strb	r3, [r5, #2]
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
   12c0a:	f105 060a 	add.w	r6, r5, #10
	adv_info->length = data_len;
   12c0e:	f885 a009 	strb.w	sl, [r5, #9]
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
   12c12:	f104 0124 	add.w	r1, r4, #36	; 0x24
   12c16:	4630      	mov	r0, r6
   12c18:	463a      	mov	r2, r7
   12c1a:	f00d f928 	bl	1fe6e <memcpy>
	*prssi = rssi;
   12c1e:	9b05      	ldr	r3, [sp, #20]
   12c20:	55f3      	strb	r3, [r6, r7]
   12c22:	e757      	b.n	12ad4 <hci_evt_encode+0xf4>
	uint8_t status = node_rx->status;
   12c24:	7f05      	ldrb	r5, [r0, #28]
	if (!status) {
   12c26:	2d00      	cmp	r5, #0
   12c28:	f000 81ad 	beq.w	12f86 <hci_evt_encode+0x5a6>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12c2c:	4b44      	ldr	r3, [pc, #272]	; (12d40 <hci_evt_encode+0x360>)
   12c2e:	6859      	ldr	r1, [r3, #4]
   12c30:	f04f 0800 	mov.w	r8, #0
   12c34:	4642      	mov	r2, r8
   12c36:	f001 5300 	and.w	r3, r1, #536870912	; 0x20000000
   12c3a:	4313      	orrs	r3, r2
   12c3c:	f43f af4a 	beq.w	12ad4 <hci_evt_encode+0xf4>
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
   12c40:	4b40      	ldr	r3, [pc, #256]	; (12d44 <hci_evt_encode+0x364>)
   12c42:	f8d3 c000 	ldr.w	ip, [r3]
   12c46:	f240 2101 	movw	r1, #513	; 0x201
   12c4a:	ea0c 0201 	and.w	r2, ip, r1
   12c4e:	4643      	mov	r3, r8
   12c50:	4313      	orrs	r3, r2
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
   12c52:	f40c 7000 	and.w	r0, ip, #512	; 0x200
   12c56:	4641      	mov	r1, r8
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
   12c58:	f43f af3c 	beq.w	12ad4 <hci_evt_encode+0xf4>
	if (!status) {
   12c5c:	2d00      	cmp	r5, #0
   12c5e:	f040 81ad 	bne.w	12fbc <hci_evt_encode+0x5dc>
		conn_count++;
   12c62:	4a43      	ldr	r2, [pc, #268]	; (12d70 <hci_evt_encode+0x390>)
   12c64:	6813      	ldr	r3, [r2, #0]
   12c66:	3301      	adds	r3, #1
   12c68:	6013      	str	r3, [r2, #0]
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
   12c6a:	ea50 0301 	orrs.w	r3, r0, r1
   12c6e:	f104 081f 	add.w	r8, r4, #31
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
   12c72:	4630      	mov	r0, r6
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
   12c74:	f040 824e 	bne.w	13114 <hci_evt_encode+0x734>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
   12c78:	2212      	movs	r2, #18
   12c7a:	2101      	movs	r1, #1
   12c7c:	f7ff f876 	bl	11d6c <meta_evt>
	lecc->status = 0x00;
   12c80:	7005      	strb	r5, [r0, #0]
	lecc->handle = sys_cpu_to_le16(handle);
   12c82:	f8a0 7001 	strh.w	r7, [r0, #1]
	lecc->role = node_rx->role;
   12c86:	7f63      	ldrb	r3, [r4, #29]
   12c88:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = node_rx->peer_addr_type & 0x1;
   12c8a:	7fa3      	ldrb	r3, [r4, #30]
   12c8c:	f003 0301 	and.w	r3, r3, #1
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
   12c90:	4606      	mov	r6, r0
	lecc->peer_addr.type = node_rx->peer_addr_type & 0x1;
   12c92:	7103      	strb	r3, [r0, #4]
	memcpy(&lecc->peer_addr.a.val[0], &node_rx->peer_addr[0], BDADDR_SIZE);
   12c94:	4641      	mov	r1, r8
   12c96:	2206      	movs	r2, #6
   12c98:	3005      	adds	r0, #5
   12c9a:	f00d f8e8 	bl	1fe6e <memcpy>
	lecc->supv_timeout = sys_cpu_to_le16(node_rx->timeout);
   12c9e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
	lecc->interval = sys_cpu_to_le16(node_rx->interval);
   12ca0:	8e61      	ldrh	r1, [r4, #50]	; 0x32
	lecc->latency = sys_cpu_to_le16(node_rx->latency);
   12ca2:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   12ca4:	f8a6 200d 	strh.w	r2, [r6, #13]
	lecc->interval = sys_cpu_to_le16(node_rx->interval);
   12ca8:	f8a6 100b 	strh.w	r1, [r6, #11]
	lecc->supv_timeout = sys_cpu_to_le16(node_rx->timeout);
   12cac:	f8a6 300f 	strh.w	r3, [r6, #15]
	lecc->clock_accuracy = node_rx->sca;
   12cb0:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   12cb4:	7473      	strb	r3, [r6, #17]
   12cb6:	e70d      	b.n	12ad4 <hci_evt_encode+0xf4>
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
   12cb8:	4b21      	ldr	r3, [pc, #132]	; (12d40 <hci_evt_encode+0x360>)
   12cba:	6819      	ldr	r1, [r3, #0]
   12cbc:	2500      	movs	r5, #0
   12cbe:	f001 0210 	and.w	r2, r1, #16
   12cc2:	462b      	mov	r3, r5
   12cc4:	4313      	orrs	r3, r2
   12cc6:	f43f af05 	beq.w	12ad4 <hci_evt_encode+0xf4>
	hdr = net_buf_add(buf, sizeof(*hdr));
   12cca:	3608      	adds	r6, #8
   12ccc:	2102      	movs	r1, #2
   12cce:	4630      	mov	r0, r6
   12cd0:	f00f fc5e 	bl	22590 <net_buf_simple_add>
   12cd4:	4603      	mov	r3, r0
	hdr->evt = evt;
   12cd6:	2205      	movs	r2, #5
	hdr->len = len;
   12cd8:	2104      	movs	r1, #4
	hdr->evt = evt;
   12cda:	701a      	strb	r2, [r3, #0]
	hdr->len = len;
   12cdc:	7059      	strb	r1, [r3, #1]
	ep = net_buf_add(buf, sizeof(*ep));
   12cde:	4630      	mov	r0, r6
   12ce0:	f00f fc56 	bl	22590 <net_buf_simple_add>
	conn_count--;
   12ce4:	4a22      	ldr	r2, [pc, #136]	; (12d70 <hci_evt_encode+0x390>)
	ep->status = 0x00;
   12ce6:	7005      	strb	r5, [r0, #0]
	conn_count--;
   12ce8:	6813      	ldr	r3, [r2, #0]
	ep->handle = sys_cpu_to_le16(handle);
   12cea:	f8a0 7001 	strh.w	r7, [r0, #1]
	ep->reason = *((uint8_t *)pdu_data);
   12cee:	7f21      	ldrb	r1, [r4, #28]
   12cf0:	70c1      	strb	r1, [r0, #3]
	conn_count--;
   12cf2:	3b01      	subs	r3, #1
   12cf4:	6013      	str	r3, [r2, #0]
   12cf6:	e6ed      	b.n	12ad4 <hci_evt_encode+0xf4>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12cf8:	4b11      	ldr	r3, [pc, #68]	; (12d40 <hci_evt_encode+0x360>)
   12cfa:	6858      	ldr	r0, [r3, #4]
   12cfc:	2100      	movs	r1, #0
   12cfe:	460a      	mov	r2, r1
   12d00:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
   12d04:	4313      	orrs	r3, r2
   12d06:	f43f aee5 	beq.w	12ad4 <hci_evt_encode+0xf4>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
   12d0a:	4b0e      	ldr	r3, [pc, #56]	; (12d44 <hci_evt_encode+0x364>)
   12d0c:	6818      	ldr	r0, [r3, #0]
   12d0e:	460b      	mov	r3, r1
   12d10:	f000 0204 	and.w	r2, r0, #4
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12d14:	4313      	orrs	r3, r2
   12d16:	f43f aedd 	beq.w	12ad4 <hci_evt_encode+0xf4>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_UPDATE_COMPLETE, sizeof(*sep));
   12d1a:	2209      	movs	r2, #9
   12d1c:	2103      	movs	r1, #3
   12d1e:	4630      	mov	r0, r6
   12d20:	f7ff f824 	bl	11d6c <meta_evt>
	sep->status = cu->status;
   12d24:	7f23      	ldrb	r3, [r4, #28]
   12d26:	7003      	strb	r3, [r0, #0]
	sep->interval = sys_cpu_to_le16(cu->interval);
   12d28:	8be1      	ldrh	r1, [r4, #30]
	sep->latency = sys_cpu_to_le16(cu->latency);
   12d2a:	8c22      	ldrh	r2, [r4, #32]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
   12d2c:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   12d2e:	f8a0 3007 	strh.w	r3, [r0, #7]
	sep->handle = sys_cpu_to_le16(handle);
   12d32:	f8a0 7001 	strh.w	r7, [r0, #1]
	sep->interval = sys_cpu_to_le16(cu->interval);
   12d36:	f8a0 1003 	strh.w	r1, [r0, #3]
	sep->latency = sys_cpu_to_le16(cu->latency);
   12d3a:	f8a0 2005 	strh.w	r2, [r0, #5]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
   12d3e:	e6c9      	b.n	12ad4 <hci_evt_encode+0xf4>
   12d40:	20000108 	.word	0x20000108
   12d44:	20000110 	.word	0x20000110
   12d48:	000236e8 	.word	0x000236e8
   12d4c:	00023720 	.word	0x00023720
   12d50:	000241f4 	.word	0x000241f4
   12d54:	00024190 	.word	0x00024190
   12d58:	00024054 	.word	0x00024054
   12d5c:	00023fe4 	.word	0x00023fe4
   12d60:	000238b4 	.word	0x000238b4
   12d64:	200025ae 	.word	0x200025ae
   12d68:	200025a8 	.word	0x200025a8
   12d6c:	200025ac 	.word	0x200025ac
   12d70:	200025a0 	.word	0x200025a0
   12d74:	200025a4 	.word	0x200025a4
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
   12d78:	4b98      	ldr	r3, [pc, #608]	; (12fdc <hci_evt_encode+0x5fc>)
   12d7a:	6859      	ldr	r1, [r3, #4]
   12d7c:	2400      	movs	r4, #0
   12d7e:	4622      	mov	r2, r4
   12d80:	f401 4300 	and.w	r3, r1, #32768	; 0x8000
   12d84:	4313      	orrs	r3, r2
   12d86:	f43f aea5 	beq.w	12ad4 <hci_evt_encode+0xf4>
	hdr = net_buf_add(buf, sizeof(*hdr));
   12d8a:	3608      	adds	r6, #8
   12d8c:	2102      	movs	r1, #2
   12d8e:	4630      	mov	r0, r6
   12d90:	f00f fbfe 	bl	22590 <net_buf_simple_add>
   12d94:	4603      	mov	r3, r0
	hdr->evt = evt;
   12d96:	2230      	movs	r2, #48	; 0x30
	hdr->len = len;
   12d98:	2103      	movs	r1, #3
	ep = net_buf_add(buf, sizeof(*ep));
   12d9a:	4630      	mov	r0, r6
	hdr->evt = evt;
   12d9c:	701a      	strb	r2, [r3, #0]
	hdr->len = len;
   12d9e:	7059      	strb	r1, [r3, #1]
	ep = net_buf_add(buf, sizeof(*ep));
   12da0:	f00f fbf6 	bl	22590 <net_buf_simple_add>
	ep->status = 0x00;
   12da4:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   12da6:	f8a0 7001 	strh.w	r7, [r0, #1]
   12daa:	e693      	b.n	12ad4 <hci_evt_encode+0xf4>
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
   12dac:	4b8c      	ldr	r3, [pc, #560]	; (12fe0 <hci_evt_encode+0x600>)
   12dae:	6819      	ldr	r1, [r3, #0]
   12db0:	2300      	movs	r3, #0
   12db2:	f401 0200 	and.w	r2, r1, #8388608	; 0x800000
   12db6:	4313      	orrs	r3, r2
   12db8:	f43f ae8c 	beq.w	12ad4 <hci_evt_encode+0xf4>
	hdr = net_buf_add(buf, sizeof(*hdr));
   12dbc:	3608      	adds	r6, #8
   12dbe:	2102      	movs	r1, #2
   12dc0:	4630      	mov	r0, r6
   12dc2:	f00f fbe5 	bl	22590 <net_buf_simple_add>
   12dc6:	4603      	mov	r3, r0
	hdr->evt = evt;
   12dc8:	2257      	movs	r2, #87	; 0x57
	hdr->len = len;
   12dca:	2102      	movs	r1, #2
	ep = net_buf_add(buf, sizeof(*ep));
   12dcc:	4630      	mov	r0, r6
	hdr->evt = evt;
   12dce:	701a      	strb	r2, [r3, #0]
	hdr->len = len;
   12dd0:	7059      	strb	r1, [r3, #1]
	ep = net_buf_add(buf, sizeof(*ep));
   12dd2:	f00f fbdd 	bl	22590 <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
   12dd6:	8007      	strh	r7, [r0, #0]
   12dd8:	e67c      	b.n	12ad4 <hci_evt_encode+0xf4>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12dda:	4b80      	ldr	r3, [pc, #512]	; (12fdc <hci_evt_encode+0x5fc>)
   12ddc:	6858      	ldr	r0, [r3, #4]
   12dde:	2100      	movs	r1, #0
   12de0:	460a      	mov	r2, r1
   12de2:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
   12de6:	4313      	orrs	r3, r2
   12de8:	f43f ae74 	beq.w	12ad4 <hci_evt_encode+0xf4>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
   12dec:	4b7d      	ldr	r3, [pc, #500]	; (12fe4 <hci_evt_encode+0x604>)
   12dee:	6818      	ldr	r0, [r3, #0]
   12df0:	460b      	mov	r3, r1
   12df2:	f400 2200 	and.w	r2, r0, #524288	; 0x80000
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12df6:	4313      	orrs	r3, r2
   12df8:	f43f ae6c 	beq.w	12ad4 <hci_evt_encode+0xf4>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CHAN_SEL_ALGO, sizeof(*sep));
   12dfc:	4630      	mov	r0, r6
   12dfe:	2203      	movs	r2, #3
   12e00:	2114      	movs	r1, #20
   12e02:	f7fe ffb3 	bl	11d6c <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
   12e06:	8007      	strh	r7, [r0, #0]
	sep->chan_sel_algo = cs->csa;
   12e08:	7f23      	ldrb	r3, [r4, #28]
   12e0a:	7083      	strb	r3, [r0, #2]
   12e0c:	e662      	b.n	12ad4 <hci_evt_encode+0xf4>
		LL_ASSERT(0);
   12e0e:	f241 035e 	movw	r3, #4190	; 0x105e
   12e12:	e654      	b.n	12abe <hci_evt_encode+0xde>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12e14:	4b71      	ldr	r3, [pc, #452]	; (12fdc <hci_evt_encode+0x5fc>)
   12e16:	6858      	ldr	r0, [r3, #4]
   12e18:	2100      	movs	r1, #0
   12e1a:	460a      	mov	r2, r1
   12e1c:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
   12e20:	4313      	orrs	r3, r2
   12e22:	f43f ae57 	beq.w	12ad4 <hci_evt_encode+0xf4>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
   12e26:	4b6f      	ldr	r3, [pc, #444]	; (12fe4 <hci_evt_encode+0x604>)
   12e28:	6818      	ldr	r0, [r3, #0]
   12e2a:	460b      	mov	r3, r1
   12e2c:	f000 0240 	and.w	r2, r0, #64	; 0x40
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12e30:	4313      	orrs	r3, r2
   12e32:	f43f ae4f 	beq.w	12ad4 <hci_evt_encode+0xf4>
	sep = meta_evt(buf, BT_HCI_EVT_LE_DATA_LEN_CHANGE, sizeof(*sep));
   12e36:	4630      	mov	r0, r6
   12e38:	220a      	movs	r2, #10
   12e3a:	2107      	movs	r1, #7
   12e3c:	f7fe ff96 	bl	11d6c <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
   12e40:	8007      	strh	r7, [r0, #0]
	sep->max_tx_octets = pdu_data->llctrl.length_rsp.max_tx_octets;
   12e42:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   12e44:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time = pdu_data->llctrl.length_rsp.max_tx_time;
   12e46:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   12e48:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets = pdu_data->llctrl.length_rsp.max_rx_octets;
   12e4a:	8c23      	ldrh	r3, [r4, #32]
   12e4c:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
   12e4e:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   12e50:	8103      	strh	r3, [r0, #8]
   12e52:	e63f      	b.n	12ad4 <hci_evt_encode+0xf4>
	sep = meta_evt(buf, BT_HCI_EVT_LE_PHY_UPDATE_COMPLETE, sizeof(*sep));
   12e54:	2205      	movs	r2, #5
   12e56:	4630      	mov	r0, r6
   12e58:	210c      	movs	r1, #12
   12e5a:	f7fe ff87 	bl	11d6c <meta_evt>
	sep->status = pu->status;
   12e5e:	7f23      	ldrb	r3, [r4, #28]
   12e60:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
   12e62:	f8a0 7001 	strh.w	r7, [r0, #1]
   12e66:	7f62      	ldrb	r2, [r4, #29]
   12e68:	2a00      	cmp	r2, #0
   12e6a:	fa92 f3a2 	rbit	r3, r2
   12e6e:	fab3 f383 	clz	r3, r3
   12e72:	bf08      	it	eq
   12e74:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   12e78:	3301      	adds	r3, #1
	sep->tx_phy = find_lsb_set(pu->tx);
   12e7a:	70c3      	strb	r3, [r0, #3]
   12e7c:	7fa2      	ldrb	r2, [r4, #30]
   12e7e:	fa92 f3a2 	rbit	r3, r2
   12e82:	2a00      	cmp	r2, #0
   12e84:	fab3 f383 	clz	r3, r3
   12e88:	bf08      	it	eq
   12e8a:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   12e8e:	3301      	adds	r3, #1
	sep->rx_phy = find_lsb_set(pu->rx);
   12e90:	7103      	strb	r3, [r0, #4]
   12e92:	e61f      	b.n	12ad4 <hci_evt_encode+0xf4>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
   12e94:	460b      	mov	r3, r1
   12e96:	463a      	mov	r2, r7
   12e98:	f100 011c 	add.w	r1, r0, #28
   12e9c:	2000      	movs	r0, #0
   12e9e:	f7fe ff7d 	bl	11d9c <le_remote_feat_complete>
		break;
   12ea2:	e617      	b.n	12ad4 <hci_evt_encode+0xf4>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
   12ea4:	4b4d      	ldr	r3, [pc, #308]	; (12fdc <hci_evt_encode+0x5fc>)
   12ea6:	6819      	ldr	r1, [r3, #0]
   12ea8:	2300      	movs	r3, #0
   12eaa:	f001 0280 	and.w	r2, r1, #128	; 0x80
   12eae:	4313      	orrs	r3, r2
   12eb0:	f43f ae10 	beq.w	12ad4 <hci_evt_encode+0xf4>
   12eb4:	f890 0020 	ldrb.w	r0, [r0, #32]
   12eb8:	4632      	mov	r2, r6
   12eba:	4639      	mov	r1, r7
   12ebc:	f7fe ffa4 	bl	11e08 <encrypt_change.part.0>
   12ec0:	e608      	b.n	12ad4 <hci_evt_encode+0xf4>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12ec2:	4b46      	ldr	r3, [pc, #280]	; (12fdc <hci_evt_encode+0x5fc>)
   12ec4:	6858      	ldr	r0, [r3, #4]
   12ec6:	2100      	movs	r1, #0
   12ec8:	460a      	mov	r2, r1
   12eca:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
   12ece:	4313      	orrs	r3, r2
   12ed0:	d06a      	beq.n	12fa8 <hci_evt_encode+0x5c8>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
   12ed2:	4b44      	ldr	r3, [pc, #272]	; (12fe4 <hci_evt_encode+0x604>)
   12ed4:	6818      	ldr	r0, [r3, #0]
   12ed6:	460b      	mov	r3, r1
   12ed8:	f000 0220 	and.w	r2, r0, #32
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12edc:	4313      	orrs	r3, r2
   12ede:	d063      	beq.n	12fa8 <hci_evt_encode+0x5c8>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));
   12ee0:	4630      	mov	r0, r6
   12ee2:	220a      	movs	r2, #10
   12ee4:	2106      	movs	r1, #6
   12ee6:	f7fe ff41 	bl	11d6c <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
   12eea:	8007      	strh	r7, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
   12eec:	8c23      	ldrh	r3, [r4, #32]
   12eee:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
   12ef0:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   12ef2:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
   12ef4:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   12ef6:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
   12ef8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   12efa:	8103      	strh	r3, [r0, #8]
   12efc:	e5ea      	b.n	12ad4 <hci_evt_encode+0xf4>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12efe:	4b37      	ldr	r3, [pc, #220]	; (12fdc <hci_evt_encode+0x5fc>)
   12f00:	6858      	ldr	r0, [r3, #4]
   12f02:	2100      	movs	r1, #0
   12f04:	460a      	mov	r2, r1
   12f06:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
   12f0a:	4313      	orrs	r3, r2
   12f0c:	f43f ade2 	beq.w	12ad4 <hci_evt_encode+0xf4>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
   12f10:	4b34      	ldr	r3, [pc, #208]	; (12fe4 <hci_evt_encode+0x604>)
   12f12:	6818      	ldr	r0, [r3, #0]
   12f14:	460b      	mov	r3, r1
   12f16:	f000 0210 	and.w	r2, r0, #16
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12f1a:	4313      	orrs	r3, r2
   12f1c:	f43f adda 	beq.w	12ad4 <hci_evt_encode+0xf4>
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
   12f20:	4630      	mov	r0, r6
   12f22:	220c      	movs	r2, #12
   12f24:	2105      	movs	r1, #5
   12f26:	f7fe ff21 	bl	11d6c <meta_evt>
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
   12f2a:	f104 0120 	add.w	r1, r4, #32
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
   12f2e:	4605      	mov	r5, r0
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
   12f30:	2208      	movs	r2, #8
	sep->handle = sys_cpu_to_le16(handle);
   12f32:	f820 7b02 	strh.w	r7, [r0], #2
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
   12f36:	f00c ff9a 	bl	1fe6e <memcpy>
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(uint16_t));
   12f3a:	f105 000a 	add.w	r0, r5, #10
   12f3e:	f104 0128 	add.w	r1, r4, #40	; 0x28
   12f42:	2202      	movs	r2, #2
   12f44:	f00c ff93 	bl	1fe6e <memcpy>
   12f48:	e5c4      	b.n	12ad4 <hci_evt_encode+0xf4>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
   12f4a:	4b24      	ldr	r3, [pc, #144]	; (12fdc <hci_evt_encode+0x5fc>)
   12f4c:	6819      	ldr	r1, [r3, #0]
   12f4e:	2000      	movs	r0, #0
   12f50:	f001 0280 	and.w	r2, r1, #128	; 0x80
   12f54:	4603      	mov	r3, r0
   12f56:	4313      	orrs	r3, r2
   12f58:	f43f adbc 	beq.w	12ad4 <hci_evt_encode+0xf4>
   12f5c:	4632      	mov	r2, r6
   12f5e:	4639      	mov	r1, r7
   12f60:	f7fe ff52 	bl	11e08 <encrypt_change.part.0>
   12f64:	e5b6      	b.n	12ad4 <hci_evt_encode+0xf4>
		le_unknown_rsp(pdu_data, handle, buf);
   12f66:	f890 1020 	ldrb.w	r1, [r0, #32]
	switch (pdu_data->llctrl.unknown_rsp.type) {
   12f6a:	290e      	cmp	r1, #14
   12f6c:	f000 80cb 	beq.w	13106 <hci_evt_encode+0x726>
   12f70:	4b1d      	ldr	r3, [pc, #116]	; (12fe8 <hci_evt_encode+0x608>)
   12f72:	4a1e      	ldr	r2, [pc, #120]	; (12fec <hci_evt_encode+0x60c>)
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
   12f74:	481e      	ldr	r0, [pc, #120]	; (12ff0 <hci_evt_encode+0x610>)
   12f76:	1ad2      	subs	r2, r2, r3
   12f78:	08d2      	lsrs	r2, r2, #3
   12f7a:	0192      	lsls	r2, r2, #6
   12f7c:	f042 0202 	orr.w	r2, r2, #2
   12f80:	f00b fab0 	bl	1e4e4 <log_1>
   12f84:	e5a6      	b.n	12ad4 <hci_evt_encode+0xf4>
		ll_rl_crpa_set(node_rx->peer_addr_type,
   12f86:	f100 0325 	add.w	r3, r0, #37	; 0x25
   12f8a:	f100 011f 	add.w	r1, r0, #31
   12f8e:	22ff      	movs	r2, #255	; 0xff
   12f90:	7f80      	ldrb	r0, [r0, #30]
   12f92:	f005 ff3b 	bl	18e0c <ll_rl_crpa_set>
   12f96:	e649      	b.n	12c2c <hci_evt_encode+0x24c>
		ll_rl_crpa_set(0x00, NULL, rl_idx, &adv->adv_ind.addr[0]);
   12f98:	2100      	movs	r1, #0
   12f9a:	4608      	mov	r0, r1
   12f9c:	f104 031e 	add.w	r3, r4, #30
   12fa0:	464a      	mov	r2, r9
   12fa2:	f005 ff33 	bl	18e0c <ll_rl_crpa_set>
   12fa6:	e5ad      	b.n	12b04 <hci_evt_encode+0x124>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE, 0,
   12fa8:	2300      	movs	r3, #0
   12faa:	e9cd 3301 	strd	r3, r3, [sp, #4]
   12fae:	4638      	mov	r0, r7
   12fb0:	9300      	str	r3, [sp, #0]
   12fb2:	221a      	movs	r2, #26
   12fb4:	2102      	movs	r1, #2
   12fb6:	f002 fa2d 	bl	15414 <ll_conn_update>
		return;
   12fba:	e58b      	b.n	12ad4 <hci_evt_encode+0xf4>
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
   12fbc:	ea50 0301 	orrs.w	r3, r0, r1
   12fc0:	f040 80d4 	bne.w	1316c <hci_evt_encode+0x78c>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
   12fc4:	2212      	movs	r2, #18
   12fc6:	2101      	movs	r1, #1
   12fc8:	4630      	mov	r0, r6
   12fca:	f7fe fecf 	bl	11d6c <meta_evt>
   12fce:	4604      	mov	r4, r0
		(void)memset(lecc, 0x00, sizeof(*lecc));
   12fd0:	4641      	mov	r1, r8
   12fd2:	2212      	movs	r2, #18
   12fd4:	f00c ff76 	bl	1fec4 <memset>
		lecc->status = status;
   12fd8:	7025      	strb	r5, [r4, #0]
		return;
   12fda:	e57b      	b.n	12ad4 <hci_evt_encode+0xf4>
   12fdc:	20000108 	.word	0x20000108
   12fe0:	20001ab0 	.word	0x20001ab0
   12fe4:	20000110 	.word	0x20000110
   12fe8:	000236e8 	.word	0x000236e8
   12fec:	00023720 	.word	0x00023720
   12ff0:	00024220 	.word	0x00024220
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12ff4:	4313      	orrs	r3, r2
   12ff6:	f43f ad6d 	beq.w	12ad4 <hci_evt_encode+0xf4>
	    !(le_event_mask & BT_EVT_MASK_LE_DIRECT_ADV_REPORT)) {
   12ffa:	4b83      	ldr	r3, [pc, #524]	; (13208 <hci_evt_encode+0x828>)
   12ffc:	6818      	ldr	r0, [r3, #0]
   12ffe:	460b      	mov	r3, r1
   13000:	f400 6280 	and.w	r2, r0, #1024	; 0x400
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   13004:	4313      	orrs	r3, r2
   13006:	f43f ad65 	beq.w	12ad4 <hci_evt_encode+0xf4>
	LL_ASSERT(adv->type == PDU_ADV_TYPE_DIRECT_IND);
   1300a:	7f23      	ldrb	r3, [r4, #28]
   1300c:	f003 030f 	and.w	r3, r3, #15
   13010:	2b01      	cmp	r3, #1
   13012:	d00c      	beq.n	1302e <hci_evt_encode+0x64e>
   13014:	4a7d      	ldr	r2, [pc, #500]	; (1320c <hci_evt_encode+0x82c>)
   13016:	497e      	ldr	r1, [pc, #504]	; (13210 <hci_evt_encode+0x830>)
   13018:	487e      	ldr	r0, [pc, #504]	; (13214 <hci_evt_encode+0x834>)
   1301a:	f640 3348 	movw	r3, #2888	; 0xb48
   1301e:	f00a ff94 	bl	1df4a <printk>
   13022:	4040      	eors	r0, r0
   13024:	f380 8811 	msr	BASEPRI, r0
   13028:	f04f 0003 	mov.w	r0, #3
   1302c:	df02      	svc	2
	if (dup_count >= 0) {
   1302e:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 13224 <hci_evt_encode+0x844>
   13032:	f8d8 2000 	ldr.w	r2, [r8]
   13036:	2a00      	cmp	r2, #0
   13038:	db42      	blt.n	130c0 <hci_evt_encode+0x6e0>
		for (i = 0; i < dup_count; i++) {
   1303a:	f104 0a1e 	add.w	sl, r4, #30
   1303e:	d016      	beq.n	1306e <hci_evt_encode+0x68e>
   13040:	4d75      	ldr	r5, [pc, #468]	; (13218 <hci_evt_encode+0x838>)
   13042:	2700      	movs	r7, #0
			if (!memcmp(&adv->adv_ind.addr[0],
   13044:	2206      	movs	r2, #6
   13046:	4629      	mov	r1, r5
   13048:	4650      	mov	r0, sl
   1304a:	f00c ff00 	bl	1fe4e <memcmp>
   1304e:	b938      	cbnz	r0, 13060 <hci_evt_encode+0x680>
			    adv->tx_addr == dup_filter[i].addr.type) {
   13050:	7f22      	ldrb	r2, [r4, #28]
   13052:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   13056:	f3c2 1080 	ubfx	r0, r2, #6, #1
				    sizeof(bt_addr_t)) &&
   1305a:	4288      	cmp	r0, r1
   1305c:	f000 80c2 	beq.w	131e4 <hci_evt_encode+0x804>
		for (i = 0; i < dup_count; i++) {
   13060:	f8d8 2000 	ldr.w	r2, [r8]
   13064:	3701      	adds	r7, #1
   13066:	4297      	cmp	r7, r2
   13068:	f105 0508 	add.w	r5, r5, #8
   1306c:	dbea      	blt.n	13044 <hci_evt_encode+0x664>
		memcpy(&dup_filter[dup_curr].addr.a.val[0],
   1306e:	4d6b      	ldr	r5, [pc, #428]	; (1321c <hci_evt_encode+0x83c>)
   13070:	4f6b      	ldr	r7, [pc, #428]	; (13220 <hci_evt_encode+0x840>)
   13072:	682a      	ldr	r2, [r5, #0]
   13074:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
   13078:	4651      	mov	r1, sl
   1307a:	1c90      	adds	r0, r2, #2
   1307c:	2206      	movs	r2, #6
   1307e:	f00c fef6 	bl	1fe6e <memcpy>
		dup_filter[dup_curr].addr.type = adv->tx_addr;
   13082:	682a      	ldr	r2, [r5, #0]
   13084:	7f20      	ldrb	r0, [r4, #28]
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   13086:	f8d8 1000 	ldr.w	r1, [r8]
		dup_filter[dup_curr].addr.type = adv->tx_addr;
   1308a:	eb07 0cc2 	add.w	ip, r7, r2, lsl #3
   1308e:	f3c0 1080 	ubfx	r0, r0, #6, #1
   13092:	f88c 0001 	strb.w	r0, [ip, #1]
		dup_filter[dup_curr].mask = BIT(adv->type);
   13096:	f894 c01c 	ldrb.w	ip, [r4, #28]
   1309a:	2001      	movs	r0, #1
   1309c:	f00c 0c0f 	and.w	ip, ip, #15
   130a0:	fa00 f00c 	lsl.w	r0, r0, ip
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   130a4:	290f      	cmp	r1, #15
		dup_filter[dup_curr].mask = BIT(adv->type);
   130a6:	f807 0032 	strb.w	r0, [r7, r2, lsl #3]
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   130aa:	f300 8098 	bgt.w	131de <hci_evt_encode+0x7fe>
			dup_count++;
   130ae:	3101      	adds	r1, #1
			dup_curr = dup_count;
   130b0:	460a      	mov	r2, r1
			dup_count++;
   130b2:	f8c8 1000 	str.w	r1, [r8]
			dup_curr = dup_count;
   130b6:	6029      	str	r1, [r5, #0]
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   130b8:	2a10      	cmp	r2, #16
			dup_curr = 0U;
   130ba:	bf04      	itt	eq
   130bc:	2300      	moveq	r3, #0
   130be:	602b      	streq	r3, [r5, #0]
	drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
   130c0:	2211      	movs	r2, #17
   130c2:	210b      	movs	r1, #11
   130c4:	4630      	mov	r0, r6
   130c6:	f7fe fe51 	bl	11d6c <meta_evt>
	drp->num_reports = 1U;
   130ca:	2301      	movs	r3, #1
   130cc:	7003      	strb	r3, [r0, #0]
	dir_info->evt_type = BT_HCI_ADV_DIRECT_IND;
   130ce:	7043      	strb	r3, [r0, #1]
	drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
   130d0:	4605      	mov	r5, r0
	if (rl_idx < ll_rl_size_get()) {
   130d2:	f005 fb37 	bl	18744 <ll_rl_size_get>
   130d6:	4581      	cmp	r9, r0
   130d8:	d276      	bcs.n	131c8 <hci_evt_encode+0x7e8>
		ll_rl_id_addr_get(rl_idx, &dir_info->addr.type,
   130da:	4648      	mov	r0, r9
   130dc:	1cea      	adds	r2, r5, #3
   130de:	1ca9      	adds	r1, r5, #2
   130e0:	f005 faec 	bl	186bc <ll_rl_id_addr_get>
		dir_info->addr.type += 2U;
   130e4:	78ab      	ldrb	r3, [r5, #2]
   130e6:	3302      	adds	r3, #2
   130e8:	70ab      	strb	r3, [r5, #2]
	dir_info->dir_addr.type = adv->rx_addr;
   130ea:	7f23      	ldrb	r3, [r4, #28]
   130ec:	f3c3 13c0 	ubfx	r3, r3, #7, #1
   130f0:	726b      	strb	r3, [r5, #9]
	memcpy(&dir_info->dir_addr.a.val[0],
   130f2:	f104 0124 	add.w	r1, r4, #36	; 0x24
   130f6:	2206      	movs	r2, #6
   130f8:	f105 000a 	add.w	r0, r5, #10
   130fc:	f00c feb7 	bl	1fe6e <memcpy>
	dir_info->rssi = rssi;
   13100:	9b05      	ldr	r3, [sp, #20]
   13102:	742b      	strb	r3, [r5, #16]
   13104:	e4e6      	b.n	12ad4 <hci_evt_encode+0xf4>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
   13106:	4633      	mov	r3, r6
   13108:	463a      	mov	r2, r7
   1310a:	2100      	movs	r1, #0
   1310c:	201a      	movs	r0, #26
   1310e:	f7fe fe45 	bl	11d9c <le_remote_feat_complete>
		break;
   13112:	e4df      	b.n	12ad4 <hci_evt_encode+0xf4>
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
   13114:	221e      	movs	r2, #30
   13116:	210a      	movs	r1, #10
   13118:	f7fe fe28 	bl	11d6c <meta_evt>
		leecc->status = 0x00;
   1311c:	7005      	strb	r5, [r0, #0]
		leecc->handle = sys_cpu_to_le16(handle);
   1311e:	f8a0 7001 	strh.w	r7, [r0, #1]
		leecc->role = node_rx->role;
   13122:	7f63      	ldrb	r3, [r4, #29]
   13124:	70c3      	strb	r3, [r0, #3]
		leecc->peer_addr.type = node_rx->peer_addr_type;
   13126:	7fa3      	ldrb	r3, [r4, #30]
   13128:	7103      	strb	r3, [r0, #4]
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
   1312a:	4606      	mov	r6, r0
		memcpy(&leecc->peer_addr.a.val[0], &node_rx->peer_addr[0],
   1312c:	4641      	mov	r1, r8
   1312e:	2206      	movs	r2, #6
   13130:	3005      	adds	r0, #5
   13132:	f00c fe9c 	bl	1fe6e <memcpy>
		memcpy(&leecc->local_rpa.val[0], &node_rx->local_rpa[0],
   13136:	2206      	movs	r2, #6
   13138:	f104 012b 	add.w	r1, r4, #43	; 0x2b
   1313c:	f106 000b 	add.w	r0, r6, #11
   13140:	f00c fe95 	bl	1fe6e <memcpy>
		memcpy(&leecc->peer_rpa.val[0], &node_rx->peer_rpa[0],
   13144:	2206      	movs	r2, #6
   13146:	f104 0125 	add.w	r1, r4, #37	; 0x25
   1314a:	f106 0011 	add.w	r0, r6, #17
   1314e:	f00c fe8e 	bl	1fe6e <memcpy>
		leecc->supv_timeout = sys_cpu_to_le16(node_rx->timeout);
   13152:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
		leecc->interval = sys_cpu_to_le16(node_rx->interval);
   13154:	8e61      	ldrh	r1, [r4, #50]	; 0x32
		leecc->latency = sys_cpu_to_le16(node_rx->latency);
   13156:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   13158:	f8a6 2019 	strh.w	r2, [r6, #25]
		leecc->interval = sys_cpu_to_le16(node_rx->interval);
   1315c:	f8a6 1017 	strh.w	r1, [r6, #23]
		leecc->supv_timeout = sys_cpu_to_le16(node_rx->timeout);
   13160:	f8a6 301b 	strh.w	r3, [r6, #27]
		leecc->clock_accuracy = node_rx->sca;
   13164:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   13168:	7773      	strb	r3, [r6, #29]
		return;
   1316a:	e4b3      	b.n	12ad4 <hci_evt_encode+0xf4>
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
   1316c:	221e      	movs	r2, #30
   1316e:	210a      	movs	r1, #10
   13170:	4630      	mov	r0, r6
   13172:	f7fe fdfb 	bl	11d6c <meta_evt>
   13176:	4604      	mov	r4, r0
			(void)memset(leecc, 0x00, sizeof(*leecc));
   13178:	4641      	mov	r1, r8
   1317a:	221e      	movs	r2, #30
   1317c:	f00c fea2 	bl	1fec4 <memset>
			leecc->status = status;
   13180:	7025      	strb	r5, [r4, #0]
			return;
   13182:	e4a7      	b.n	12ad4 <hci_evt_encode+0xf4>
		adv_info->addr.type = adv->tx_addr;
   13184:	7f23      	ldrb	r3, [r4, #28]
   13186:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1318a:	70ab      	strb	r3, [r5, #2]
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
   1318c:	2206      	movs	r2, #6
   1318e:	f104 011e 	add.w	r1, r4, #30
   13192:	1ce8      	adds	r0, r5, #3
   13194:	f00c fe6b 	bl	1fe6e <memcpy>
   13198:	e537      	b.n	12c0a <hci_evt_encode+0x22a>
   1319a:	2700      	movs	r7, #0
   1319c:	220b      	movs	r2, #11
   1319e:	e518      	b.n	12bd2 <hci_evt_encode+0x1f2>
			dup_curr++;
   131a0:	3201      	adds	r2, #1
   131a2:	602a      	str	r2, [r5, #0]
   131a4:	e503      	b.n	12bae <hci_evt_encode+0x1ce>
				if (dup_filter[i].mask & BIT(adv->type)) {
   131a6:	491e      	ldr	r1, [pc, #120]	; (13220 <hci_evt_encode+0x840>)
   131a8:	f811 3037 	ldrb.w	r3, [r1, r7, lsl #3]
   131ac:	f002 020f 	and.w	r2, r2, #15
   131b0:	fa23 f002 	lsr.w	r0, r3, r2
   131b4:	07c0      	lsls	r0, r0, #31
   131b6:	f53f ac8d 	bmi.w	12ad4 <hci_evt_encode+0xf4>
				dup_filter[i].mask |= BIT(adv->type);
   131ba:	2001      	movs	r0, #1
   131bc:	fa00 f202 	lsl.w	r2, r0, r2
   131c0:	4313      	orrs	r3, r2
   131c2:	f801 3037 	strb.w	r3, [r1, r7, lsl #3]
				return false;
   131c6:	e4f6      	b.n	12bb6 <hci_evt_encode+0x1d6>
		dir_info->addr.type = adv->tx_addr;
   131c8:	7f23      	ldrb	r3, [r4, #28]
   131ca:	f3c3 1380 	ubfx	r3, r3, #6, #1
   131ce:	70ab      	strb	r3, [r5, #2]
		memcpy(&dir_info->addr.a.val[0], &adv->direct_ind.adv_addr[0],
   131d0:	2206      	movs	r2, #6
   131d2:	f104 011e 	add.w	r1, r4, #30
   131d6:	1ce8      	adds	r0, r5, #3
   131d8:	f00c fe49 	bl	1fe6e <memcpy>
   131dc:	e785      	b.n	130ea <hci_evt_encode+0x70a>
			dup_curr++;
   131de:	3201      	adds	r2, #1
   131e0:	602a      	str	r2, [r5, #0]
   131e2:	e769      	b.n	130b8 <hci_evt_encode+0x6d8>
				if (dup_filter[i].mask & BIT(adv->type)) {
   131e4:	480e      	ldr	r0, [pc, #56]	; (13220 <hci_evt_encode+0x840>)
   131e6:	f810 3037 	ldrb.w	r3, [r0, r7, lsl #3]
   131ea:	f002 020f 	and.w	r2, r2, #15
   131ee:	fa23 f102 	lsr.w	r1, r3, r2
   131f2:	07cd      	lsls	r5, r1, #31
   131f4:	f53f ac6e 	bmi.w	12ad4 <hci_evt_encode+0xf4>
				dup_filter[i].mask |= BIT(adv->type);
   131f8:	2101      	movs	r1, #1
   131fa:	fa01 f202 	lsl.w	r2, r1, r2
   131fe:	4313      	orrs	r3, r2
   13200:	f800 3037 	strb.w	r3, [r0, r7, lsl #3]
				return false;
   13204:	e75c      	b.n	130c0 <hci_evt_encode+0x6e0>
   13206:	bf00      	nop
   13208:	20000110 	.word	0x20000110
   1320c:	00024190 	.word	0x00024190
   13210:	000241cc 	.word	0x000241cc
   13214:	00023fe4 	.word	0x00023fe4
   13218:	200025ae 	.word	0x200025ae
   1321c:	200025a8 	.word	0x200025a8
   13220:	200025ac 	.word	0x200025ac
   13224:	200025a4 	.word	0x200025a4

00013228 <hci_num_cmplt_encode>:

#if defined(CONFIG_BT_CONN)
void hci_num_cmplt_encode(struct net_buf *buf, uint16_t handle, uint8_t num)
{
   13228:	b570      	push	{r4, r5, r6, lr}
	hdr = net_buf_add(buf, sizeof(*hdr));
   1322a:	f100 0408 	add.w	r4, r0, #8
{
   1322e:	460e      	mov	r6, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
   13230:	4620      	mov	r0, r4
   13232:	2102      	movs	r1, #2
{
   13234:	4615      	mov	r5, r2
	hdr = net_buf_add(buf, sizeof(*hdr));
   13236:	f00f f9ab 	bl	22590 <net_buf_simple_add>
   1323a:	4603      	mov	r3, r0
	hdr->evt = evt;
   1323c:	2213      	movs	r2, #19
	hdr->len = len;
   1323e:	2105      	movs	r1, #5
	hdr->evt = evt;
   13240:	701a      	strb	r2, [r3, #0]
	hdr->len = len;
   13242:	7059      	strb	r1, [r3, #1]
	num_handles = 1U;

	len = (sizeof(*ep) + (sizeof(*hc) * num_handles));
	hci_evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);

	ep = net_buf_add(buf, len);
   13244:	4620      	mov	r0, r4
   13246:	f00f f9a3 	bl	22590 <net_buf_simple_add>
	ep->num_handles = num_handles;
   1324a:	2301      	movs	r3, #1
   1324c:	7003      	strb	r3, [r0, #0]
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
   1324e:	f8a0 6001 	strh.w	r6, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
   13252:	f8a0 5003 	strh.w	r5, [r0, #3]
}
   13256:	bd70      	pop	{r4, r5, r6, pc}

00013258 <hci_get_class>:
{
#if defined(CONFIG_BT_CONN)
	struct pdu_data *pdu_data = PDU_DATA(node_rx);
#endif

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   13258:	7903      	ldrb	r3, [r0, #4]
   1325a:	2b02      	cmp	r3, #2
   1325c:	d008      	beq.n	13270 <hci_get_class+0x18>

		switch (node_rx->hdr.type) {
   1325e:	3b04      	subs	r3, #4
   13260:	b2db      	uxtb	r3, r3
   13262:	2b0b      	cmp	r3, #11
   13264:	d901      	bls.n	1326a <hci_get_class+0x12>
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   13266:	2000      	movs	r0, #0
#else
	} else {
		return HCI_CLASS_NONE;
	}
#endif
}
   13268:	4770      	bx	lr
   1326a:	4a05      	ldr	r2, [pc, #20]	; (13280 <hci_get_class+0x28>)
   1326c:	5cd0      	ldrb	r0, [r2, r3]
   1326e:	4770      	bx	lr
	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
   13270:	7f03      	ldrb	r3, [r0, #28]
   13272:	f003 0303 	and.w	r3, r3, #3
   13276:	2b03      	cmp	r3, #3
		return HCI_CLASS_ACL_DATA;
   13278:	bf0c      	ite	eq
   1327a:	2004      	moveq	r0, #4
   1327c:	2005      	movne	r0, #5
   1327e:	4770      	bx	lr
   13280:	0002423c 	.word	0x0002423c

00013284 <hci_init>:

void hci_init(struct k_poll_signal *signal_host_buf)
{
   13284:	b430      	push	{r4, r5}
	event_mask = DEFAULT_EVENT_MASK;
   13286:	480b      	ldr	r0, [pc, #44]	; (132b4 <hci_init+0x30>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   13288:	490b      	ldr	r1, [pc, #44]	; (132b8 <hci_init+0x34>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   1328a:	4a0c      	ldr	r2, [pc, #48]	; (132bc <hci_init+0x38>)
	dup_count = -1;
   1328c:	4b0c      	ldr	r3, [pc, #48]	; (132c0 <hci_init+0x3c>)
	event_mask = DEFAULT_EVENT_MASK;
   1328e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   13292:	f641 75ff 	movw	r5, #8191	; 0x1fff
   13296:	e9c0 4500 	strd	r4, r5, [r0]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   1329a:	2400      	movs	r4, #0
   1329c:	2500      	movs	r5, #0
   1329e:	e9c1 4500 	strd	r4, r5, [r1]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   132a2:	201f      	movs	r0, #31
   132a4:	2100      	movs	r1, #0
   132a6:	e9c2 0100 	strd	r0, r1, [r2]
	dup_count = -1;
   132aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
}
   132ae:	bc30      	pop	{r4, r5}
	dup_count = -1;
   132b0:	601a      	str	r2, [r3, #0]
}
   132b2:	4770      	bx	lr
   132b4:	20000108 	.word	0x20000108
   132b8:	20001ab0 	.word	0x20001ab0
   132bc:	20000110 	.word	0x20000110
   132c0:	200025a4 	.word	0x200025a4

000132c4 <bt_rand>:
#include "hal/ecb.h"
#include "lll.h"

int bt_rand(void *buf, size_t len)
{
	return lll_csrand_get(buf, len);
   132c4:	f006 ba34 	b.w	19730 <lll_csrand_get>

000132c8 <bt_encrypt_le>:
}

int bt_encrypt_le(const uint8_t key[16], const uint8_t plaintext[16],
		  uint8_t enc_data[16])
{
   132c8:	b508      	push	{r3, lr}
	BT_DBG("key %s", bt_hex(key, 16));
	BT_DBG("plaintext %s", bt_hex(plaintext, 16));

	ecb_encrypt(key, plaintext, enc_data, NULL);
   132ca:	2300      	movs	r3, #0
   132cc:	f007 fbfc 	bl	1aac8 <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
   132d0:	2000      	movs	r0, #0
   132d2:	bd08      	pop	{r3, pc}

000132d4 <perform_lll_reset>:

	return 0;
}

static void perform_lll_reset(void *param)
{
   132d4:	b510      	push	{r4, lr}
   132d6:	4604      	mov	r4, r0
	int err;

	/* Reset LLL */
	err = lll_reset();
   132d8:	f006 fa4a 	bl	19770 <lll_reset>
	LL_ASSERT(!err);
   132dc:	b950      	cbnz	r0, 132f4 <perform_lll_reset+0x20>
	LL_ASSERT(!err);
#endif /* CONFIG_BT_BROADCASTER */

#if defined(CONFIG_BT_OBSERVER)
	/* Reset scan state */
	err = lll_scan_reset();
   132de:	f006 fedf 	bl	1a0a0 <lll_scan_reset>
	LL_ASSERT(!err);
   132e2:	b9c0      	cbnz	r0, 13316 <perform_lll_reset+0x42>
#endif /* CONFIG_BT_OBSERVER */

#if defined(CONFIG_BT_CONN)
	/* Reset conn role */
	err = lll_conn_reset();
   132e4:	f006 ff6e 	bl	1a1c4 <lll_conn_reset>
	LL_ASSERT(!err);
   132e8:	bb30      	cbnz	r0, 13338 <perform_lll_reset+0x64>
	z_impl_k_sem_give(sem);
   132ea:	4620      	mov	r0, r4
#endif /* CONFIG_BT_CONN */

#if !defined(CONFIG_BT_CTLR_ZLI)
	k_sem_give(param);
#endif /* !CONFIG_BT_CTLR_ZLI */
}
   132ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   132f0:	f00a ba3e 	b.w	1d770 <z_impl_k_sem_give>
	LL_ASSERT(!err);
   132f4:	4a19      	ldr	r2, [pc, #100]	; (1335c <perform_lll_reset+0x88>)
   132f6:	491a      	ldr	r1, [pc, #104]	; (13360 <perform_lll_reset+0x8c>)
   132f8:	481a      	ldr	r0, [pc, #104]	; (13364 <perform_lll_reset+0x90>)
   132fa:	f44f 63a0 	mov.w	r3, #1280	; 0x500
   132fe:	f00a fe24 	bl	1df4a <printk>
   13302:	4040      	eors	r0, r0
   13304:	f380 8811 	msr	BASEPRI, r0
   13308:	f04f 0003 	mov.w	r0, #3
   1330c:	df02      	svc	2
	err = lll_scan_reset();
   1330e:	f006 fec7 	bl	1a0a0 <lll_scan_reset>
	LL_ASSERT(!err);
   13312:	2800      	cmp	r0, #0
   13314:	d0e6      	beq.n	132e4 <perform_lll_reset+0x10>
   13316:	4a11      	ldr	r2, [pc, #68]	; (1335c <perform_lll_reset+0x88>)
   13318:	4911      	ldr	r1, [pc, #68]	; (13360 <perform_lll_reset+0x8c>)
   1331a:	4812      	ldr	r0, [pc, #72]	; (13364 <perform_lll_reset+0x90>)
   1331c:	f240 530b 	movw	r3, #1291	; 0x50b
   13320:	f00a fe13 	bl	1df4a <printk>
   13324:	4040      	eors	r0, r0
   13326:	f380 8811 	msr	BASEPRI, r0
   1332a:	f04f 0003 	mov.w	r0, #3
   1332e:	df02      	svc	2
	err = lll_conn_reset();
   13330:	f006 ff48 	bl	1a1c4 <lll_conn_reset>
	LL_ASSERT(!err);
   13334:	2800      	cmp	r0, #0
   13336:	d0d8      	beq.n	132ea <perform_lll_reset+0x16>
   13338:	4a08      	ldr	r2, [pc, #32]	; (1335c <perform_lll_reset+0x88>)
   1333a:	4909      	ldr	r1, [pc, #36]	; (13360 <perform_lll_reset+0x8c>)
   1333c:	4809      	ldr	r0, [pc, #36]	; (13364 <perform_lll_reset+0x90>)
   1333e:	f240 5311 	movw	r3, #1297	; 0x511
   13342:	f00a fe02 	bl	1df4a <printk>
   13346:	4040      	eors	r0, r0
   13348:	f380 8811 	msr	BASEPRI, r0
   1334c:	f04f 0003 	mov.w	r0, #3
   13350:	df02      	svc	2
   13352:	4620      	mov	r0, r4
}
   13354:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13358:	f00a ba0a 	b.w	1d770 <z_impl_k_sem_give>
   1335c:	00024258 	.word	0x00024258
   13360:	00024294 	.word	0x00024294
   13364:	00023fe4 	.word	0x00023fe4

00013368 <disabled_cb>:
   13368:	f00a ba02 	b.w	1d770 <z_impl_k_sem_give>

0001336c <tx_cmplt_get>:
	}
}

#if defined(CONFIG_BT_CONN)
static uint8_t tx_cmplt_get(uint16_t *handle, uint8_t *first, uint8_t last)
{
   1336c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct lll_tx *tx;
	uint8_t cmplt;

	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   13370:	4f2f      	ldr	r7, [pc, #188]	; (13430 <tx_cmplt_get+0xc4>)
					   uint8_t first, uint8_t last, uint8_t *idx)
{
	void *p;
	uint8_t i;

	if (*idx >= count) {
   13372:	780b      	ldrb	r3, [r1, #0]
   13374:	783c      	ldrb	r4, [r7, #0]
{
   13376:	460d      	mov	r5, r1
	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   13378:	7879      	ldrb	r1, [r7, #1]
   1337a:	4299      	cmp	r1, r3
   1337c:	bf9c      	itt	ls
   1337e:	78bb      	ldrbls	r3, [r7, #2]
		*idx = first;
   13380:	702b      	strbls	r3, [r5, #0]
	}

	if (*idx == last) {
   13382:	429a      	cmp	r2, r3
{
   13384:	4683      	mov	fp, r0
   13386:	4692      	mov	sl, r2
   13388:	d045      	beq.n	13416 <tx_cmplt_get+0xaa>
		return NULL;
	}

	i = *idx + 1;
   1338a:	1c5a      	adds	r2, r3, #1
	if (i == count) {
		i = 0U;
	}

	p = (void *)(fifo + (*idx) * size);
   1338c:	4e29      	ldr	r6, [pc, #164]	; (13434 <tx_cmplt_get+0xc8>)
	i = *idx + 1;
   1338e:	b2d2      	uxtb	r2, r2
	p = (void *)(fifo + (*idx) * size);
   13390:	fb13 f304 	smulbb	r3, r3, r4
		i = 0U;
   13394:	4291      	cmp	r1, r2
   13396:	bf08      	it	eq
   13398:	2200      	moveq	r2, #0
				    mfifo_tx_ack.n, mfifo_tx_ack.f, last,
				    first);
	if (!tx) {
   1339a:	18f1      	adds	r1, r6, r3

	*idx = i;
   1339c:	702a      	strb	r2, [r5, #0]
   1339e:	d03a      	beq.n	13416 <tx_cmplt_get+0xaa>
		return 0;
	}

	*handle = tx->handle;
   133a0:	5af3      	ldrh	r3, [r6, r3]
   133a2:	8003      	strh	r3, [r0, #0]
	cmplt = 0U;
   133a4:	f04f 0800 	mov.w	r8, #0
   133a8:	f04f 0901 	mov.w	r9, #1
   133ac:	e022      	b.n	133f4 <tx_cmplt_get+0x88>
		struct node_tx *node_tx;
		struct pdu_data *p;

		node_tx = tx->node;
		p = (void *)node_tx->pdu;
		if (!node_tx || (node_tx == (void *)1) ||
   133ae:	b37b      	cbz	r3, 13410 <tx_cmplt_get+0xa4>
		    (((uint32_t)node_tx & ~3) &&
		     (p->ll_id == PDU_DATA_LLID_DATA_START ||
   133b0:	7903      	ldrb	r3, [r0, #4]
   133b2:	f003 0303 	and.w	r3, r3, #3
		    (((uint32_t)node_tx & ~3) &&
   133b6:	3b01      	subs	r3, #1
   133b8:	2b01      	cmp	r3, #1
   133ba:	d931      	bls.n	13420 <tx_cmplt_get+0xb4>
   133bc:	2302      	movs	r3, #2
   133be:	604b      	str	r3, [r1, #4]
			/* ctrl packet or flushed, hence dont count num cmplt */
			tx->node = (void *)2;
		}

		if (((uint32_t)node_tx & ~3)) {
			ll_tx_mem_release(node_tx);
   133c0:	f001 ff76 	bl	152b0 <ll_tx_mem_release>
	if (*idx >= count) {
   133c4:	782b      	ldrb	r3, [r5, #0]
		}

		tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   133c6:	7879      	ldrb	r1, [r7, #1]
   133c8:	7838      	ldrb	r0, [r7, #0]
   133ca:	4299      	cmp	r1, r3
   133cc:	bf9c      	itt	ls
   133ce:	78bb      	ldrbls	r3, [r7, #2]
		*idx = first;
   133d0:	702b      	strbls	r3, [r5, #0]
	if (*idx == last) {
   133d2:	459a      	cmp	sl, r3
   133d4:	d021      	beq.n	1341a <tx_cmplt_get+0xae>
	i = *idx + 1;
   133d6:	1c5c      	adds	r4, r3, #1
   133d8:	b2e4      	uxtb	r4, r4
	p = (void *)(fifo + (*idx) * size);
   133da:	fb13 f300 	smulbb	r3, r3, r0
		i = 0U;
   133de:	42a1      	cmp	r1, r4
   133e0:	bf08      	it	eq
   133e2:	2400      	moveq	r4, #0
					    mfifo_tx_ack.n, mfifo_tx_ack.f,
					    last, first);
	} while (tx && tx->handle == *handle);
   133e4:	18f1      	adds	r1, r6, r3
	*idx = i;
   133e6:	702c      	strb	r4, [r5, #0]
   133e8:	d017      	beq.n	1341a <tx_cmplt_get+0xae>
   133ea:	5af0      	ldrh	r0, [r6, r3]
   133ec:	f8bb 3000 	ldrh.w	r3, [fp]
   133f0:	4298      	cmp	r0, r3
   133f2:	d112      	bne.n	1341a <tx_cmplt_get+0xae>
		node_tx = tx->node;
   133f4:	6848      	ldr	r0, [r1, #4]
		if (!node_tx || (node_tx == (void *)1) ||
   133f6:	2801      	cmp	r0, #1
   133f8:	f020 0303 	bic.w	r3, r0, #3
   133fc:	d8d7      	bhi.n	133ae <tx_cmplt_get+0x42>
			cmplt++;
   133fe:	f108 0801 	add.w	r8, r8, #1
   13402:	fa5f f888 	uxtb.w	r8, r8
   13406:	f8c1 9004 	str.w	r9, [r1, #4]
		if (((uint32_t)node_tx & ~3)) {
   1340a:	2b00      	cmp	r3, #0
   1340c:	d0da      	beq.n	133c4 <tx_cmplt_get+0x58>
   1340e:	e7d7      	b.n	133c0 <tx_cmplt_get+0x54>
   13410:	2302      	movs	r3, #2
   13412:	604b      	str	r3, [r1, #4]
   13414:	e7d6      	b.n	133c4 <tx_cmplt_get+0x58>
		return 0;
   13416:	f04f 0800 	mov.w	r8, #0

	return cmplt;
}
   1341a:	4640      	mov	r0, r8
   1341c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			cmplt++;
   13420:	f108 0801 	add.w	r8, r8, #1
   13424:	fa5f f888 	uxtb.w	r8, r8
   13428:	f8c1 9004 	str.w	r9, [r1, #4]
		if (((uint32_t)node_tx & ~3)) {
   1342c:	e7c8      	b.n	133c0 <tx_cmplt_get+0x54>
   1342e:	bf00      	nop
   13430:	20000400 	.word	0x20000400
   13434:	20000404 	.word	0x20000404

00013438 <rx_demux>:
		}
}
#endif /* CONFIG_BT_CONN */

static void rx_demux(void *param)
{
   13438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1343c:	4ca7      	ldr	r4, [pc, #668]	; (136dc <rx_demux+0x2a4>)
	k_sem_give(sem_recv);
   1343e:	4ea8      	ldr	r6, [pc, #672]	; (136e0 <rx_demux+0x2a8>)
			static memq_link_t link;
			static struct mayfly mfy = {0, 0, &link, NULL,
						    lll_resume};
			uint32_t ret;

			mfy.param = next;
   13440:	f8df b2c0 	ldr.w	fp, [pc, #704]	; 13704 <rx_demux+0x2cc>
{
   13444:	b087      	sub	sp, #28
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
   13446:	e9d4 0100 	ldrd	r0, r1, [r4]
   1344a:	aa03      	add	r2, sp, #12
   1344c:	f7fc fe22 	bl	10094 <memq_peek>
		if (link) {
   13450:	4607      	mov	r7, r0
   13452:	2800      	cmp	r0, #0
   13454:	d040      	beq.n	134d8 <rx_demux+0xa0>
			LL_ASSERT(rx);
   13456:	9b03      	ldr	r3, [sp, #12]
   13458:	2b00      	cmp	r3, #0
   1345a:	f000 812f 	beq.w	136bc <rx_demux+0x284>
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
   1345e:	7818      	ldrb	r0, [r3, #0]
   13460:	aa04      	add	r2, sp, #16
   13462:	a902      	add	r1, sp, #8
   13464:	f004 f8c8 	bl	175f8 <ull_conn_ack_by_last_peek>
			if (link_tx) {
   13468:	4605      	mov	r5, r0
   1346a:	2800      	cmp	r0, #0
   1346c:	d06a      	beq.n	13544 <rx_demux+0x10c>
				rx_demux_conn_tx_ack(rx->ack_last, handle,
   1346e:	e9dd 1203 	ldrd	r1, r2, [sp, #12]
   13472:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   13476:	f891 9000 	ldrb.w	r9, [r1]
   1347a:	9205      	str	r2, [sp, #20]
   1347c:	f8ad 300a 	strh.w	r3, [sp, #10]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
   13480:	f10d 0814 	add.w	r8, sp, #20
   13484:	f10d 070a 	add.w	r7, sp, #10
		ull_conn_ack_dequeue();
   13488:	f004 f8cc 	bl	17624 <ull_conn_ack_dequeue>
		conn = ull_conn_tx_ack(handle, link, node_tx);
   1348c:	4629      	mov	r1, r5
   1348e:	9a05      	ldr	r2, [sp, #20]
   13490:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   13494:	f004 f90e 	bl	176b4 <ull_conn_tx_ack>
   13498:	4603      	mov	r3, r0
		ull_conn_link_tx_release(link);
   1349a:	4628      	mov	r0, r5
		conn = ull_conn_tx_ack(handle, link, node_tx);
   1349c:	461d      	mov	r5, r3
		ull_conn_link_tx_release(link);
   1349e:	f004 f885 	bl	175ac <ull_conn_link_tx_release>
		ull_conn_tx_demux(1);
   134a2:	2001      	movs	r0, #1
   134a4:	f003 feb8 	bl	17218 <ull_conn_tx_demux>
			ull_conn_tx_lll_enqueue(conn, 1);
   134a8:	2101      	movs	r1, #1
   134aa:	4628      	mov	r0, r5
		if (conn) {
   134ac:	b10d      	cbz	r5, 134b2 <rx_demux+0x7a>
			ull_conn_tx_lll_enqueue(conn, 1);
   134ae:	f003 ff87 	bl	173c0 <ull_conn_tx_lll_enqueue>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
   134b2:	4642      	mov	r2, r8
   134b4:	4639      	mov	r1, r7
   134b6:	4648      	mov	r0, r9
   134b8:	f004 f89e 	bl	175f8 <ull_conn_ack_by_last_peek>
	} while (link);
   134bc:	4605      	mov	r5, r0
   134be:	2800      	cmp	r0, #0
   134c0:	d1e2      	bne.n	13488 <rx_demux+0x50>
	k_sem_give(sem_recv);
   134c2:	6830      	ldr	r0, [r6, #0]
   134c4:	f00a f954 	bl	1d770 <z_impl_k_sem_give>
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
   134c8:	e9d4 0100 	ldrd	r0, r1, [r4]
   134cc:	aa03      	add	r2, sp, #12
   134ce:	f7fc fde1 	bl	10094 <memq_peek>
		if (link) {
   134d2:	4607      	mov	r7, r0
   134d4:	2800      	cmp	r0, #0
   134d6:	d1be      	bne.n	13456 <rx_demux+0x1e>
			link = ull_conn_ack_peek(&ack_last, &handle, &node_tx);
   134d8:	aa04      	add	r2, sp, #16
   134da:	a902      	add	r1, sp, #8
   134dc:	f10d 0007 	add.w	r0, sp, #7
   134e0:	f004 f870 	bl	175c4 <ull_conn_ack_peek>
			if (link) {
   134e4:	4605      	mov	r5, r0
   134e6:	2800      	cmp	r0, #0
   134e8:	d069      	beq.n	135be <rx_demux+0x186>
				rx_demux_conn_tx_ack(ack_last, handle,
   134ea:	9a04      	ldr	r2, [sp, #16]
   134ec:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   134f0:	f89d 9007 	ldrb.w	r9, [sp, #7]
   134f4:	9205      	str	r2, [sp, #20]
   134f6:	f8ad 300a 	strh.w	r3, [sp, #10]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
   134fa:	f10d 0814 	add.w	r8, sp, #20
   134fe:	f10d 070a 	add.w	r7, sp, #10
		ull_conn_ack_dequeue();
   13502:	f004 f88f 	bl	17624 <ull_conn_ack_dequeue>
		conn = ull_conn_tx_ack(handle, link, node_tx);
   13506:	4629      	mov	r1, r5
   13508:	9a05      	ldr	r2, [sp, #20]
   1350a:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   1350e:	f004 f8d1 	bl	176b4 <ull_conn_tx_ack>
   13512:	4603      	mov	r3, r0
		ull_conn_link_tx_release(link);
   13514:	4628      	mov	r0, r5
		conn = ull_conn_tx_ack(handle, link, node_tx);
   13516:	461d      	mov	r5, r3
		ull_conn_link_tx_release(link);
   13518:	f004 f848 	bl	175ac <ull_conn_link_tx_release>
		ull_conn_tx_demux(1);
   1351c:	2001      	movs	r0, #1
   1351e:	f003 fe7b 	bl	17218 <ull_conn_tx_demux>
			ull_conn_tx_lll_enqueue(conn, 1);
   13522:	2101      	movs	r1, #1
   13524:	4628      	mov	r0, r5
		if (conn) {
   13526:	b10d      	cbz	r5, 1352c <rx_demux+0xf4>
			ull_conn_tx_lll_enqueue(conn, 1);
   13528:	f003 ff4a 	bl	173c0 <ull_conn_tx_lll_enqueue>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
   1352c:	4642      	mov	r2, r8
   1352e:	4639      	mov	r1, r7
   13530:	4648      	mov	r0, r9
   13532:	f004 f861 	bl	175f8 <ull_conn_ack_by_last_peek>
	} while (link);
   13536:	4605      	mov	r5, r0
   13538:	2800      	cmp	r0, #0
   1353a:	d1e2      	bne.n	13502 <rx_demux+0xca>
	k_sem_give(sem_recv);
   1353c:	6830      	ldr	r0, [r6, #0]
   1353e:	f00a f917 	bl	1d770 <z_impl_k_sem_give>
			if (nack) {
   13542:	e7c1      	b.n	134c8 <rx_demux+0x90>
				nack = rx_demux_rx(link, rx);
   13544:	9b03      	ldr	r3, [sp, #12]
   13546:	9305      	str	r3, [sp, #20]
	switch (rx->type) {
   13548:	791b      	ldrb	r3, [r3, #4]
   1354a:	3b01      	subs	r3, #1
   1354c:	2b09      	cmp	r3, #9
   1354e:	d806      	bhi.n	1355e <rx_demux+0x126>
   13550:	e8df f003 	tbb	[pc, r3]
   13554:	13052e38 	.word	0x13052e38
   13558:	05050505 	.word	0x05050505
   1355c:	1324      	.short	0x1324
		LL_ASSERT(0);
   1355e:	4a61      	ldr	r2, [pc, #388]	; (136e4 <rx_demux+0x2ac>)
   13560:	4961      	ldr	r1, [pc, #388]	; (136e8 <rx_demux+0x2b0>)
   13562:	4862      	ldr	r0, [pc, #392]	; (136ec <rx_demux+0x2b4>)
   13564:	f44f 63d7 	mov.w	r3, #1720	; 0x6b8
   13568:	f00a fcef 	bl	1df4a <printk>
   1356c:	4040      	eors	r0, r0
   1356e:	f380 8811 	msr	BASEPRI, r0
   13572:	f04f 0003 	mov.w	r0, #3
   13576:	df02      	svc	2
			if (nack) {
   13578:	e765      	b.n	13446 <rx_demux+0xe>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   1357a:	4958      	ldr	r1, [pc, #352]	; (136dc <rx_demux+0x2a4>)
   1357c:	6860      	ldr	r0, [r4, #4]
   1357e:	2200      	movs	r2, #0
   13580:	f7fc fd90 	bl	100a4 <memq_dequeue>
	rx_hdr->ack_last = mfifo_tx_ack.l;
   13584:	4b5a      	ldr	r3, [pc, #360]	; (136f0 <rx_demux+0x2b8>)
		ll_rx_put(link, rx);
   13586:	9905      	ldr	r1, [sp, #20]
	rx_hdr->ack_last = mfifo_tx_ack.l;
   13588:	78db      	ldrb	r3, [r3, #3]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   1358a:	4a5a      	ldr	r2, [pc, #360]	; (136f4 <rx_demux+0x2bc>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
   1358c:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   1358e:	4638      	mov	r0, r7
   13590:	f7fc fd78 	bl	10084 <memq_enqueue>
	k_sem_give(sem_recv);
   13594:	6830      	ldr	r0, [r6, #0]
   13596:	f00a f8eb 	bl	1d770 <z_impl_k_sem_give>
			if (nack) {
   1359a:	e795      	b.n	134c8 <rx_demux+0x90>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   1359c:	494f      	ldr	r1, [pc, #316]	; (136dc <rx_demux+0x2a4>)
   1359e:	6860      	ldr	r0, [r4, #4]
   135a0:	2200      	movs	r2, #0
   135a2:	f7fc fd7f 	bl	100a4 <memq_dequeue>
		ull_conn_setup(link, rx);
   135a6:	9905      	ldr	r1, [sp, #20]
   135a8:	4638      	mov	r0, r7
   135aa:	f002 fa03 	bl	159b4 <ull_conn_setup>
			if (nack) {
   135ae:	e74a      	b.n	13446 <rx_demux+0xe>
		nack = ull_conn_rx(link, (void *)&rx);
   135b0:	a905      	add	r1, sp, #20
   135b2:	4638      	mov	r0, r7
   135b4:	f002 fa20 	bl	159f8 <ull_conn_rx>
		if (nack) {
   135b8:	2800      	cmp	r0, #0
   135ba:	f000 80c8 	beq.w	1374e <rx_demux+0x316>
}
   135be:	b007      	add	sp, #28
   135c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   135c4:	4945      	ldr	r1, [pc, #276]	; (136dc <rx_demux+0x2a4>)
   135c6:	6860      	ldr	r0, [r4, #4]
   135c8:	2200      	movs	r2, #0
   135ca:	f7fc fd6b 	bl	100a4 <memq_dequeue>
		rx_demux_event_done(link, rx);
   135ce:	9d05      	ldr	r5, [sp, #20]
	switch (done->extra.type) {
   135d0:	f895 3020 	ldrb.w	r3, [r5, #32]
	ull_hdr = done->param;
   135d4:	f8d5 a01c 	ldr.w	sl, [r5, #28]
	switch (done->extra.type) {
   135d8:	b17b      	cbz	r3, 135fa <rx_demux+0x1c2>
   135da:	2b01      	cmp	r3, #1
   135dc:	f000 80b3 	beq.w	13746 <rx_demux+0x30e>
		LL_ASSERT(0);
   135e0:	4a40      	ldr	r2, [pc, #256]	; (136e4 <rx_demux+0x2ac>)
   135e2:	4941      	ldr	r1, [pc, #260]	; (136e8 <rx_demux+0x2b0>)
   135e4:	4841      	ldr	r0, [pc, #260]	; (136ec <rx_demux+0x2b4>)
   135e6:	f240 63e9 	movw	r3, #1769	; 0x6e9
   135ea:	f00a fcae 	bl	1df4a <printk>
   135ee:	4040      	eors	r0, r0
   135f0:	f380 8811 	msr	BASEPRI, r0
   135f4:	f04f 0003 	mov.w	r0, #3
   135f8:	df02      	svc	2
	if (!MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
   135fa:	4a3f      	ldr	r2, [pc, #252]	; (136f8 <rx_demux+0x2c0>)
   135fc:	78d1      	ldrb	r1, [r2, #3]
	if (last == count) {
   135fe:	f892 c001 	ldrb.w	ip, [r2, #1]
   13602:	7890      	ldrb	r0, [r2, #2]
	last = last + 1;
   13604:	1c4b      	adds	r3, r1, #1
   13606:	b2db      	uxtb	r3, r3
		last = 0U;
   13608:	459c      	cmp	ip, r3
   1360a:	bf08      	it	eq
   1360c:	2300      	moveq	r3, #0
	if (last == first) {
   1360e:	4298      	cmp	r0, r3
	done->extra.type = 0U;
   13610:	f04f 0c00 	mov.w	ip, #0
   13614:	f885 c020 	strb.w	ip, [r5, #32]
   13618:	f000 80ad 	beq.w	13776 <rx_demux+0x33e>
	done->hdr.link = link;
   1361c:	602f      	str	r7, [r5, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   1361e:	7810      	ldrb	r0, [r2, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   13620:	fb00 2101 	mla	r1, r0, r1, r2
   13624:	604d      	str	r5, [r1, #4]
	*last = idx; /* Commit: Update write index */
   13626:	70d3      	strb	r3, [r2, #3]
	return MFIFO_DEQUEUE_GET(prep);
   13628:	4d34      	ldr	r5, [pc, #208]	; (136fc <rx_demux+0x2c4>)
   1362a:	78ab      	ldrb	r3, [r5, #2]
	if (first == last) {
   1362c:	78ea      	ldrb	r2, [r5, #3]
   1362e:	f895 c000 	ldrb.w	ip, [r5]
   13632:	429a      	cmp	r2, r3
   13634:	d02a      	beq.n	1368c <rx_demux+0x254>
	return (void *)(fifo + first * size);
   13636:	f105 0904 	add.w	r9, r5, #4
   1363a:	fb03 9c0c 	mla	ip, r3, ip, r9
	while (next) {
   1363e:	f1bc 0f00 	cmp.w	ip, #0
   13642:	d023      	beq.n	1368c <rx_demux+0x254>
		uint8_t is_aborted = next->is_aborted;
   13644:	f89c 3020 	ldrb.w	r3, [ip, #32]
		if (!is_aborted) {
   13648:	079a      	lsls	r2, r3, #30
		uint8_t is_aborted = next->is_aborted;
   1364a:	f3c3 0740 	ubfx	r7, r3, #1, #1
		uint8_t is_resume = next->is_resume;
   1364e:	f003 0801 	and.w	r8, r3, #1
		if (!is_aborted) {
   13652:	d559      	bpl.n	13708 <rx_demux+0x2d0>
			ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
					     TICKER_USER_ID_LLL, 0, &mfy);
			LL_ASSERT(!ret);
		}

		MFIFO_DEQUEUE(prep);
   13654:	78ea      	ldrb	r2, [r5, #3]
 * @return              Head buffer; or NULL if queue was empty
 */
static inline void *mfifo_dequeue(uint8_t *fifo, uint8_t size, uint8_t count,
				  uint8_t last, uint8_t *first)
{
	uint8_t _first = *first; /* Copy read-index */
   13656:	78ab      	ldrb	r3, [r5, #2]
   13658:	f895 c000 	ldrb.w	ip, [r5]
   1365c:	7869      	ldrb	r1, [r5, #1]
	void *mem;

	/* Queue is empty if first == last */
	if (_first == last) {
   1365e:	429a      	cmp	r2, r3
   13660:	d014      	beq.n	1368c <rx_demux+0x254>
	 * API 2: fifo is array of void-ptrs
	 */
	mem = *((void **)(fifo + _first * size));

	/* Circular buffer increment read-index modulo 'count' */
	_first += 1U;
   13662:	3301      	adds	r3, #1
   13664:	b2db      	uxtb	r3, r3
	if (_first == count) {
   13666:	4299      	cmp	r1, r3
   13668:	d066      	beq.n	13738 <rx_demux+0x300>
	if (first == last) {
   1366a:	429a      	cmp	r2, r3
		_first = 0U;
	}

	*first = _first; /* Write back read-index */
   1366c:	70ab      	strb	r3, [r5, #2]
	if (first == last) {
   1366e:	d00d      	beq.n	1368c <rx_demux+0x254>
	return (void *)(fifo + first * size);
   13670:	fb03 9c0c 	mla	ip, r3, ip, r9

		next = ull_prepare_dequeue_get();

		if (!next || (!is_aborted && (!is_resume || next->is_resume))) {
   13674:	f1bc 0f00 	cmp.w	ip, #0
   13678:	d008      	beq.n	1368c <rx_demux+0x254>
   1367a:	2f00      	cmp	r7, #0
   1367c:	d1e2      	bne.n	13644 <rx_demux+0x20c>
   1367e:	f1b8 0f00 	cmp.w	r8, #0
   13682:	d003      	beq.n	1368c <rx_demux+0x254>
   13684:	f89c 3020 	ldrb.w	r3, [ip, #32]
   13688:	07db      	lsls	r3, r3, #31
   1368a:	d5db      	bpl.n	13644 <rx_demux+0x20c>
			break;
		}
	}

	/* ull instance will resume, dont decrement ref */
	if (!ull_hdr) {
   1368c:	f1ba 0f00 	cmp.w	sl, #0
   13690:	f43f aed9 	beq.w	13446 <rx_demux+0xe>
		return;
	}

	/* Decrement prepare reference */
	LL_ASSERT(ull_hdr->ref);
   13694:	f89a 3000 	ldrb.w	r3, [sl]
   13698:	2b00      	cmp	r3, #0
   1369a:	d07a      	beq.n	13792 <rx_demux+0x35a>
	return hdr->ref--;
   1369c:	3b01      	subs	r3, #1
   1369e:	b2db      	uxtb	r3, r3
   136a0:	f88a 3000 	strb.w	r3, [sl]
	ull_ref_dec(ull_hdr);

	/* If disable initiated, signal the semaphore */
	if (!ull_hdr->ref && ull_hdr->disabled_cb) {
   136a4:	2b00      	cmp	r3, #0
   136a6:	f47f aece 	bne.w	13446 <rx_demux+0xe>
   136aa:	f8da 3004 	ldr.w	r3, [sl, #4]
   136ae:	2b00      	cmp	r3, #0
   136b0:	f43f aec9 	beq.w	13446 <rx_demux+0xe>
		ull_hdr->disabled_cb(ull_hdr->disabled_param);
   136b4:	f8da 0008 	ldr.w	r0, [sl, #8]
   136b8:	4798      	blx	r3
			if (nack) {
   136ba:	e6c4      	b.n	13446 <rx_demux+0xe>
			LL_ASSERT(rx);
   136bc:	4a09      	ldr	r2, [pc, #36]	; (136e4 <rx_demux+0x2ac>)
   136be:	4910      	ldr	r1, [pc, #64]	; (13700 <rx_demux+0x2c8>)
   136c0:	480a      	ldr	r0, [pc, #40]	; (136ec <rx_demux+0x2b4>)
   136c2:	f240 6304 	movw	r3, #1540	; 0x604
   136c6:	f00a fc40 	bl	1df4a <printk>
   136ca:	4040      	eors	r0, r0
   136cc:	f380 8811 	msr	BASEPRI, r0
   136d0:	f04f 0003 	mov.w	r0, #3
   136d4:	df02      	svc	2
   136d6:	9b03      	ldr	r3, [sp, #12]
   136d8:	e6c1      	b.n	1345e <rx_demux+0x26>
   136da:	bf00      	nop
   136dc:	20003ab0 	.word	0x20003ab0
   136e0:	20003ab8 	.word	0x20003ab8
   136e4:	00024258 	.word	0x00024258
   136e8:	00024054 	.word	0x00024054
   136ec:	00023fe4 	.word	0x00023fe4
   136f0:	20000400 	.word	0x20000400
   136f4:	20003aac 	.word	0x20003aac
   136f8:	20000278 	.word	0x20000278
   136fc:	200002dc 	.word	0x200002dc
   13700:	0002429c 	.word	0x0002429c
   13704:	2000048c 	.word	0x2000048c
			ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   13708:	465b      	mov	r3, fp
   1370a:	463a      	mov	r2, r7
   1370c:	4639      	mov	r1, r7
   1370e:	2001      	movs	r0, #1
			mfy.param = next;
   13710:	f8cb c008 	str.w	ip, [fp, #8]
			ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   13714:	f7fc fd2a 	bl	1016c <mayfly_enqueue>
			LL_ASSERT(!ret);
   13718:	2800      	cmp	r0, #0
   1371a:	d09b      	beq.n	13654 <rx_demux+0x21c>
   1371c:	4a28      	ldr	r2, [pc, #160]	; (137c0 <rx_demux+0x388>)
   1371e:	4929      	ldr	r1, [pc, #164]	; (137c4 <rx_demux+0x38c>)
   13720:	4829      	ldr	r0, [pc, #164]	; (137c8 <rx_demux+0x390>)
   13722:	f240 7301 	movw	r3, #1793	; 0x701
   13726:	f00a fc10 	bl	1df4a <printk>
   1372a:	4040      	eors	r0, r0
   1372c:	f380 8811 	msr	BASEPRI, r0
   13730:	f04f 0003 	mov.w	r0, #3
   13734:	df02      	svc	2
   13736:	e78d      	b.n	13654 <rx_demux+0x21c>
	*first = _first; /* Write back read-index */
   13738:	2300      	movs	r3, #0
   1373a:	70ab      	strb	r3, [r5, #2]
	if (first == last) {
   1373c:	2a00      	cmp	r2, #0
   1373e:	d0a5      	beq.n	1368c <rx_demux+0x254>
	return (void *)(fifo + first * size);
   13740:	f8df c09c 	ldr.w	ip, [pc, #156]	; 137e0 <rx_demux+0x3a8>
   13744:	e799      	b.n	1367a <rx_demux+0x242>
		ull_conn_done(done);
   13746:	4628      	mov	r0, r5
   13748:	f7ef fcee 	bl	3128 <ull_conn_done>
		break;
   1374c:	e755      	b.n	135fa <rx_demux+0x1c2>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   1374e:	491f      	ldr	r1, [pc, #124]	; (137cc <rx_demux+0x394>)
   13750:	4602      	mov	r2, r0
   13752:	6860      	ldr	r0, [r4, #4]
   13754:	f7fc fca6 	bl	100a4 <memq_dequeue>
		if (rx) {
   13758:	9905      	ldr	r1, [sp, #20]
   1375a:	2900      	cmp	r1, #0
   1375c:	f43f ae73 	beq.w	13446 <rx_demux+0xe>
	rx_hdr->ack_last = mfifo_tx_ack.l;
   13760:	4b1b      	ldr	r3, [pc, #108]	; (137d0 <rx_demux+0x398>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   13762:	4a1c      	ldr	r2, [pc, #112]	; (137d4 <rx_demux+0x39c>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
   13764:	78db      	ldrb	r3, [r3, #3]
   13766:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   13768:	4638      	mov	r0, r7
   1376a:	f7fc fc8b 	bl	10084 <memq_enqueue>
	k_sem_give(sem_recv);
   1376e:	6830      	ldr	r0, [r6, #0]
   13770:	f009 fffe 	bl	1d770 <z_impl_k_sem_give>
			if (nack) {
   13774:	e667      	b.n	13446 <rx_demux+0xe>
	LL_ASSERT(release == done);
   13776:	4a12      	ldr	r2, [pc, #72]	; (137c0 <rx_demux+0x388>)
   13778:	4917      	ldr	r1, [pc, #92]	; (137d8 <rx_demux+0x3a0>)
   1377a:	4813      	ldr	r0, [pc, #76]	; (137c8 <rx_demux+0x390>)
   1377c:	f44f 63de 	mov.w	r3, #1776	; 0x6f0
   13780:	f00a fbe3 	bl	1df4a <printk>
   13784:	4040      	eors	r0, r0
   13786:	f380 8811 	msr	BASEPRI, r0
   1378a:	f04f 0003 	mov.w	r0, #3
   1378e:	df02      	svc	2
   13790:	e74a      	b.n	13628 <rx_demux+0x1f0>
	LL_ASSERT(ull_hdr->ref);
   13792:	4a0b      	ldr	r2, [pc, #44]	; (137c0 <rx_demux+0x388>)
   13794:	4911      	ldr	r1, [pc, #68]	; (137dc <rx_demux+0x3a4>)
   13796:	480c      	ldr	r0, [pc, #48]	; (137c8 <rx_demux+0x390>)
   13798:	f240 7313 	movw	r3, #1811	; 0x713
   1379c:	f00a fbd5 	bl	1df4a <printk>
   137a0:	4040      	eors	r0, r0
   137a2:	f380 8811 	msr	BASEPRI, r0
   137a6:	f04f 0003 	mov.w	r0, #3
   137aa:	df02      	svc	2
   137ac:	f89a 3000 	ldrb.w	r3, [sl]
   137b0:	3b01      	subs	r3, #1
   137b2:	b2db      	uxtb	r3, r3
   137b4:	f88a 3000 	strb.w	r3, [sl]
	if (!ull_hdr->ref && ull_hdr->disabled_cb) {
   137b8:	2b00      	cmp	r3, #0
   137ba:	f47f ae44 	bne.w	13446 <rx_demux+0xe>
   137be:	e774      	b.n	136aa <rx_demux+0x272>
   137c0:	00024258 	.word	0x00024258
   137c4:	000242a0 	.word	0x000242a0
   137c8:	00023fe4 	.word	0x00023fe4
   137cc:	20003ab0 	.word	0x20003ab0
   137d0:	20000400 	.word	0x20000400
   137d4:	20003aac 	.word	0x20003aac
   137d8:	000242b8 	.word	0x000242b8
   137dc:	000242a8 	.word	0x000242a8
   137e0:	200002e0 	.word	0x200002e0

000137e4 <ll_init>:
{
   137e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sem_recv = sem_rx;
   137e8:	4b9f      	ldr	r3, [pc, #636]	; (13a68 <ll_init+0x284>)
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   137ea:	4da0      	ldr	r5, [pc, #640]	; (13a6c <ll_init+0x288>)
	sem_recv = sem_rx;
   137ec:	6018      	str	r0, [r3, #0]
{
   137ee:	b086      	sub	sp, #24
	cntr_init();
   137f0:	f007 f8ee 	bl	1a9d0 <cntr_init>
	mayfly_init();
   137f4:	f7fc fc66 	bl	100c4 <mayfly_init>
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   137f8:	489d      	ldr	r0, [pc, #628]	; (13a70 <ll_init+0x28c>)
   137fa:	9005      	str	r0, [sp, #20]
   137fc:	489d      	ldr	r0, [pc, #628]	; (13a74 <ll_init+0x290>)
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   137fe:	4c9e      	ldr	r4, [pc, #632]	; (13a78 <ll_init+0x294>)
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   13800:	4a9e      	ldr	r2, [pc, #632]	; (13a7c <ll_init+0x298>)
   13802:	9204      	str	r2, [sp, #16]
   13804:	e9cd 0502 	strd	r0, r5, [sp, #8]
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   13808:	2103      	movs	r1, #3
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   1380a:	220b      	movs	r2, #11
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
   1380c:	2502      	movs	r5, #2
	ticker_users[MAYFLY_CALL_ID_1][0] = TICKER_USER_ULL_HIGH_OPS;
   1380e:	2304      	movs	r3, #4
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   13810:	9201      	str	r2, [sp, #4]
   13812:	9400      	str	r4, [sp, #0]
   13814:	4a9a      	ldr	r2, [pc, #616]	; (13a80 <ll_init+0x29c>)
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   13816:	7021      	strb	r1, [r4, #0]
	ticker_users[MAYFLY_CALL_ID_1][0] = TICKER_USER_ULL_HIGH_OPS;
   13818:	7223      	strb	r3, [r4, #8]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   1381a:	2107      	movs	r1, #7
   1381c:	2000      	movs	r0, #0
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
   1381e:	7425      	strb	r5, [r4, #16]
	ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
   13820:	7625      	strb	r5, [r4, #24]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   13822:	f7fd ff75 	bl	11710 <ticker_init>
	LL_ASSERT(!err);
   13826:	2800      	cmp	r0, #0
   13828:	f040 80e7 	bne.w	139fa <ll_init+0x216>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1382c:	2201      	movs	r2, #1
   1382e:	2100      	movs	r1, #0
   13830:	4894      	ldr	r0, [pc, #592]	; (13a84 <ll_init+0x2a0>)
   13832:	f00f fbda 	bl	22fea <z_impl_k_sem_init>
	err = lll_init();
   13836:	f005 ff49 	bl	196cc <lll_init>
	if (err) {
   1383a:	4604      	mov	r4, r0
   1383c:	b118      	cbz	r0, 13846 <ll_init+0x62>
}
   1383e:	4620      	mov	r0, r4
   13840:	b006      	add	sp, #24
   13842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
   13846:	4b90      	ldr	r3, [pc, #576]	; (13a88 <ll_init+0x2a4>)
		link = mem_acquire(&mem_link_done.free);
   13848:	f8df 8244 	ldr.w	r8, [pc, #580]	; 13a90 <ll_init+0x2ac>
   1384c:	4d8f      	ldr	r5, [pc, #572]	; (13a8c <ll_init+0x2a8>)
		rx = mem_acquire(&mem_done.free);
   1384e:	4f8e      	ldr	r7, [pc, #568]	; (13a88 <ll_init+0x2a4>)
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
   13850:	1d18      	adds	r0, r3, #4
   13852:	2203      	movs	r2, #3
   13854:	2134      	movs	r1, #52	; 0x34
   13856:	f7fc fb83 	bl	ff60 <mem_init>
	mem_init(mem_link_done.pool, sizeof(memq_link_t), EVENT_DONE_MAX,
   1385a:	4643      	mov	r3, r8
   1385c:	2203      	movs	r2, #3
   1385e:	1d18      	adds	r0, r3, #4
   13860:	2108      	movs	r1, #8
   13862:	f7fc fb7d 	bl	ff60 <mem_init>
	while (MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
   13866:	78ec      	ldrb	r4, [r5, #3]
	if (last == count) {
   13868:	786a      	ldrb	r2, [r5, #1]
   1386a:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   1386c:	3401      	adds	r4, #1
   1386e:	b2e4      	uxtb	r4, r4
		last = 0U;
   13870:	42a2      	cmp	r2, r4
   13872:	bf08      	it	eq
   13874:	2400      	moveq	r4, #0
	if (last == first) {
   13876:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_done.free);
   13878:	4640      	mov	r0, r8
   1387a:	d013      	beq.n	138a4 <ll_init+0xc0>
   1387c:	f7fc fb9e 	bl	ffbc <mem_acquire>
   13880:	4606      	mov	r6, r0
		rx = mem_acquire(&mem_done.free);
   13882:	4638      	mov	r0, r7
		if (!link) {
   13884:	b176      	cbz	r6, 138a4 <ll_init+0xc0>
		rx = mem_acquire(&mem_done.free);
   13886:	f7fc fb99 	bl	ffbc <mem_acquire>
		if (!rx) {
   1388a:	b138      	cbz	r0, 1389c <ll_init+0xb8>
		rx->link = link;
   1388c:	6006      	str	r6, [r0, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   1388e:	78ea      	ldrb	r2, [r5, #3]
   13890:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   13892:	fb02 5303 	mla	r3, r2, r3, r5
   13896:	6058      	str	r0, [r3, #4]
	*last = idx; /* Commit: Update write index */
   13898:	70ec      	strb	r4, [r5, #3]
}
   1389a:	e7e5      	b.n	13868 <ll_init+0x84>
			mem_release(link, &mem_link_done.free);
   1389c:	497c      	ldr	r1, [pc, #496]	; (13a90 <ll_init+0x2ac>)
   1389e:	4630      	mov	r0, r6
   138a0:	f7fc fba6 	bl	fff0 <mem_release>
	mem_init(mem_pdu_rx.pool, (PDU_RX_NODE_POOL_ELEMENT_SIZE),
   138a4:	4b7b      	ldr	r3, [pc, #492]	; (13a94 <ll_init+0x2b0>)
   138a6:	2211      	movs	r2, #17
   138a8:	1d18      	adds	r0, r3, #4
   138aa:	f44f 718e 	mov.w	r1, #284	; 0x11c
   138ae:	f7fc fb57 	bl	ff60 <mem_init>
	mem_init(mem_link_rx.pool, sizeof(memq_link_t),
   138b2:	4b79      	ldr	r3, [pc, #484]	; (13a98 <ll_init+0x2b4>)
   138b4:	2216      	movs	r2, #22
   138b6:	1d18      	adds	r0, r3, #4
   138b8:	2108      	movs	r1, #8
   138ba:	f7fc fb51 	bl	ff60 <mem_init>
	link = mem_acquire(&mem_link_rx.free);
   138be:	4876      	ldr	r0, [pc, #472]	; (13a98 <ll_init+0x2b4>)
   138c0:	f7fc fb7c 	bl	ffbc <mem_acquire>
	LL_ASSERT(link);
   138c4:	4604      	mov	r4, r0
   138c6:	2800      	cmp	r0, #0
   138c8:	f000 80b3 	beq.w	13a32 <ll_init+0x24e>
	MEMQ_INIT(ull_rx, link);
   138cc:	4a73      	ldr	r2, [pc, #460]	; (13a9c <ll_init+0x2b8>)
   138ce:	4620      	mov	r0, r4
   138d0:	1f11      	subs	r1, r2, #4
   138d2:	f7fc fbc9 	bl	10068 <memq_init>
	link = mem_acquire(&mem_link_rx.free);
   138d6:	4870      	ldr	r0, [pc, #448]	; (13a98 <ll_init+0x2b4>)
   138d8:	f7fc fb70 	bl	ffbc <mem_acquire>
	LL_ASSERT(link);
   138dc:	4604      	mov	r4, r0
   138de:	2800      	cmp	r0, #0
   138e0:	f000 8099 	beq.w	13a16 <ll_init+0x232>
	MEMQ_INIT(ll_rx, link);
   138e4:	4a6e      	ldr	r2, [pc, #440]	; (13aa0 <ll_init+0x2bc>)
	mem_link_rx.quota_pdu = RX_CNT;
   138e6:	4d6f      	ldr	r5, [pc, #444]	; (13aa4 <ll_init+0x2c0>)
   138e8:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 13ac4 <ll_init+0x2e0>
		rx = mem_acquire(&mem_pdu_rx.free);
   138ec:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 13a94 <ll_init+0x2b0>
	MEMQ_INIT(ll_rx, link);
   138f0:	4620      	mov	r0, r4
   138f2:	1f11      	subs	r1, r2, #4
	mem_link_rx.quota_pdu = RX_CNT;
   138f4:	462e      	mov	r6, r5
	MEMQ_INIT(ll_rx, link);
   138f6:	f7fc fbb7 	bl	10068 <memq_init>
	mem_link_rx.quota_pdu = RX_CNT;
   138fa:	2310      	movs	r3, #16
   138fc:	f806 3b04 	strb.w	r3, [r6], #4
	while (mem_link_rx.quota_pdu &&
   13900:	f899 4003 	ldrb.w	r4, [r9, #3]
		link->mem = NULL;
   13904:	2700      	movs	r7, #0
	if (last == count) {
   13906:	f899 2001 	ldrb.w	r2, [r9, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   1390a:	f899 3002 	ldrb.w	r3, [r9, #2]
	last = last + 1;
   1390e:	3401      	adds	r4, #1
   13910:	b2e4      	uxtb	r4, r4
		last = 0U;
   13912:	42a2      	cmp	r2, r4
   13914:	bf08      	it	eq
   13916:	2400      	moveq	r4, #0
	if (last == first) {
   13918:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
   1391a:	4630      	mov	r0, r6
   1391c:	d03d      	beq.n	1399a <ll_init+0x1b6>
   1391e:	f7fc fb4d 	bl	ffbc <mem_acquire>
   13922:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   13924:	4640      	mov	r0, r8
		if (!link) {
   13926:	f1ba 0f00 	cmp.w	sl, #0
   1392a:	d033      	beq.n	13994 <ll_init+0x1b0>
		rx = mem_acquire(&mem_pdu_rx.free);
   1392c:	f7fc fb46 	bl	ffbc <mem_acquire>
		if (!rx) {
   13930:	2800      	cmp	r0, #0
   13932:	f000 808c 	beq.w	13a4e <ll_init+0x26a>
		link->mem = NULL;
   13936:	f8ca 7004 	str.w	r7, [sl, #4]
		rx->link = link;
   1393a:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   1393e:	f899 1003 	ldrb.w	r1, [r9, #3]
   13942:	f899 2000 	ldrb.w	r2, [r9]
	mem_link_rx.quota_pdu += delta;
   13946:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   13948:	fb01 9202 	mla	r2, r1, r2, r9
   1394c:	3b01      	subs	r3, #1
   1394e:	b2db      	uxtb	r3, r3
   13950:	6050      	str	r0, [r2, #4]
   13952:	702b      	strb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
   13954:	f889 4003 	strb.w	r4, [r9, #3]
	while (mem_link_rx.quota_pdu &&
   13958:	2b00      	cmp	r3, #0
   1395a:	d1d4      	bne.n	13906 <ll_init+0x122>
	err = lll_scan_init();
   1395c:	f006 fb9e 	bl	1a09c <lll_scan_init>
	if (err) {
   13960:	4604      	mov	r4, r0
   13962:	2800      	cmp	r0, #0
   13964:	f47f af6b 	bne.w	1383e <ll_init+0x5a>
	err = ull_scan_init();
   13968:	f000 ff80 	bl	1486c <ull_scan_init>
	if (err) {
   1396c:	4604      	mov	r4, r0
   1396e:	2800      	cmp	r0, #0
   13970:	f47f af65 	bne.w	1383e <ll_init+0x5a>
	err = lll_conn_init();
   13974:	f006 fc24 	bl	1a1c0 <lll_conn_init>
	if (err) {
   13978:	4604      	mov	r4, r0
   1397a:	2800      	cmp	r0, #0
   1397c:	f47f af5f 	bne.w	1383e <ll_init+0x5a>
	err = ull_conn_init();
   13980:	f001 ff84 	bl	1588c <ull_conn_init>
	if (err) {
   13984:	4604      	mov	r4, r0
   13986:	2800      	cmp	r0, #0
   13988:	f47f af59 	bne.w	1383e <ll_init+0x5a>
		ull_filter_reset(true);
   1398c:	2001      	movs	r0, #1
   1398e:	f005 fad1 	bl	18f34 <ull_filter_reset>
	return  0;
   13992:	e754      	b.n	1383e <ll_init+0x5a>
		printk("overflow3");
   13994:	4844      	ldr	r0, [pc, #272]	; (13aa8 <ll_init+0x2c4>)
   13996:	f00a fad8 	bl	1df4a <printk>
	if (max > mem_link_rx.quota_pdu) {
   1399a:	782b      	ldrb	r3, [r5, #0]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   1399c:	1e5f      	subs	r7, r3, #1
   1399e:	b2ff      	uxtb	r7, r7
   139a0:	2b00      	cmp	r3, #0
   139a2:	d0db      	beq.n	1395c <ll_init+0x178>
   139a4:	4e41      	ldr	r6, [pc, #260]	; (13aac <ll_init+0x2c8>)
		link = mem_acquire(&mem_link_rx.free);
   139a6:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 13a98 <ll_init+0x2b4>
   139aa:	78f4      	ldrb	r4, [r6, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
   139ac:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 13a94 <ll_init+0x2b0>
	if (last == count) {
   139b0:	7872      	ldrb	r2, [r6, #1]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   139b2:	78b3      	ldrb	r3, [r6, #2]
	last = last + 1;
   139b4:	3401      	adds	r4, #1
   139b6:	b2e4      	uxtb	r4, r4
		last = 0U;
   139b8:	42a2      	cmp	r2, r4
   139ba:	bf08      	it	eq
   139bc:	2400      	moveq	r4, #0
	if (last == first) {
   139be:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
   139c0:	4648      	mov	r0, r9
   139c2:	d0cb      	beq.n	1395c <ll_init+0x178>
   139c4:	f7fc fafa 	bl	ffbc <mem_acquire>
   139c8:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   139ca:	4640      	mov	r0, r8
		if (!link) {
   139cc:	f1ba 0f00 	cmp.w	sl, #0
   139d0:	d0c4      	beq.n	1395c <ll_init+0x178>
		rx = mem_acquire(&mem_pdu_rx.free);
   139d2:	f7fc faf3 	bl	ffbc <mem_acquire>
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   139d6:	3f01      	subs	r7, #1
   139d8:	b2ff      	uxtb	r7, r7
		if (!rx) {
   139da:	2800      	cmp	r0, #0
   139dc:	d03f      	beq.n	13a5e <ll_init+0x27a>
		rx->link = link;
   139de:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   139e2:	78f1      	ldrb	r1, [r6, #3]
   139e4:	7832      	ldrb	r2, [r6, #0]
	mem_link_rx.quota_pdu += delta;
   139e6:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   139e8:	fb01 6202 	mla	r2, r1, r2, r6
   139ec:	3b01      	subs	r3, #1
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   139ee:	2fff      	cmp	r7, #255	; 0xff
   139f0:	6050      	str	r0, [r2, #4]
	mem_link_rx.quota_pdu += delta;
   139f2:	702b      	strb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
   139f4:	70f4      	strb	r4, [r6, #3]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   139f6:	d1db      	bne.n	139b0 <ll_init+0x1cc>
   139f8:	e7b0      	b.n	1395c <ll_init+0x178>
	LL_ASSERT(!err);
   139fa:	4a2d      	ldr	r2, [pc, #180]	; (13ab0 <ll_init+0x2cc>)
   139fc:	492d      	ldr	r1, [pc, #180]	; (13ab4 <ll_init+0x2d0>)
   139fe:	482e      	ldr	r0, [pc, #184]	; (13ab8 <ll_init+0x2d4>)
   13a00:	f44f 7396 	mov.w	r3, #300	; 0x12c
   13a04:	f00a faa1 	bl	1df4a <printk>
   13a08:	4040      	eors	r0, r0
   13a0a:	f380 8811 	msr	BASEPRI, r0
   13a0e:	f04f 0003 	mov.w	r0, #3
   13a12:	df02      	svc	2
   13a14:	e70a      	b.n	1382c <ll_init+0x48>
	LL_ASSERT(link);
   13a16:	4a26      	ldr	r2, [pc, #152]	; (13ab0 <ll_init+0x2cc>)
   13a18:	4928      	ldr	r1, [pc, #160]	; (13abc <ll_init+0x2d8>)
   13a1a:	4827      	ldr	r0, [pc, #156]	; (13ab8 <ll_init+0x2d4>)
   13a1c:	f240 43ee 	movw	r3, #1262	; 0x4ee
   13a20:	f00a fa93 	bl	1df4a <printk>
   13a24:	4040      	eors	r0, r0
   13a26:	f380 8811 	msr	BASEPRI, r0
   13a2a:	f04f 0003 	mov.w	r0, #3
   13a2e:	df02      	svc	2
   13a30:	e758      	b.n	138e4 <ll_init+0x100>
	LL_ASSERT(link);
   13a32:	4a1f      	ldr	r2, [pc, #124]	; (13ab0 <ll_init+0x2cc>)
   13a34:	4921      	ldr	r1, [pc, #132]	; (13abc <ll_init+0x2d8>)
   13a36:	4820      	ldr	r0, [pc, #128]	; (13ab8 <ll_init+0x2d4>)
   13a38:	f240 43e7 	movw	r3, #1255	; 0x4e7
   13a3c:	f00a fa85 	bl	1df4a <printk>
   13a40:	4040      	eors	r0, r0
   13a42:	f380 8811 	msr	BASEPRI, r0
   13a46:	f04f 0003 	mov.w	r0, #3
   13a4a:	df02      	svc	2
   13a4c:	e73e      	b.n	138cc <ll_init+0xe8>
		printk("overflow4");
   13a4e:	481c      	ldr	r0, [pc, #112]	; (13ac0 <ll_init+0x2dc>)
   13a50:	f00a fa7b 	bl	1df4a <printk>
			mem_release(link, &mem_link_rx.free);
   13a54:	4910      	ldr	r1, [pc, #64]	; (13a98 <ll_init+0x2b4>)
   13a56:	4650      	mov	r0, sl
   13a58:	f7fc faca 	bl	fff0 <mem_release>
			break;
   13a5c:	e79d      	b.n	1399a <ll_init+0x1b6>
			mem_release(link, &mem_link_rx.free);
   13a5e:	490e      	ldr	r1, [pc, #56]	; (13a98 <ll_init+0x2b4>)
   13a60:	4650      	mov	r0, sl
   13a62:	f7fc fac5 	bl	fff0 <mem_release>
			break;
   13a66:	e779      	b.n	1395c <ll_init+0x178>
   13a68:	20003ab8 	.word	0x20003ab8
   13a6c:	0001b6a1 	.word	0x0001b6a1
   13a70:	0001b7e5 	.word	0x0001b7e5
   13a74:	20003c24 	.word	0x20003c24
   13a78:	20003e60 	.word	0x20003e60
   13a7c:	0001b705 	.word	0x0001b705
   13a80:	20003ad4 	.word	0x20003ad4
   13a84:	20003abc 	.word	0x20003abc
   13a88:	20002654 	.word	0x20002654
   13a8c:	20000278 	.word	0x20000278
   13a90:	200026f4 	.word	0x200026f4
   13a94:	200027c8 	.word	0x200027c8
   13a98:	20002714 	.word	0x20002714
   13a9c:	20003ab4 	.word	0x20003ab4
   13aa0:	20003aac 	.word	0x20003aac
   13aa4:	20002710 	.word	0x20002710
   13aa8:	000242c8 	.word	0x000242c8
   13aac:	200002a0 	.word	0x200002a0
   13ab0:	00024258 	.word	0x00024258
   13ab4:	00024294 	.word	0x00024294
   13ab8:	00023fe4 	.word	0x00023fe4
   13abc:	00024484 	.word	0x00024484
   13ac0:	000242d4 	.word	0x000242d4
   13ac4:	2000028c 	.word	0x2000028c

00013ac8 <ll_reset>:
{
   13ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13acc:	b087      	sub	sp, #28
	err = ull_scan_reset();
   13ace:	f000 ffa3 	bl	14a18 <ull_scan_reset>
	LL_ASSERT(!err);
   13ad2:	2800      	cmp	r0, #0
   13ad4:	f040 80ec 	bne.w	13cb0 <ll_reset+0x1e8>
		err = ll_connect_disable(&rx);
   13ad8:	4668      	mov	r0, sp
   13ada:	f004 fb25 	bl	18128 <ll_connect_disable>
		if (!err) {
   13ade:	2800      	cmp	r0, #0
   13ae0:	f000 80f9 	beq.w	13cd6 <ll_reset+0x20e>
	err = ull_conn_reset();
   13ae4:	f001 fed4 	bl	15890 <ull_conn_reset>
	LL_ASSERT(!err);
   13ae8:	2800      	cmp	r0, #0
   13aea:	f040 8106 	bne.w	13cfa <ll_reset+0x232>
	MFIFO_INIT(tx_ack);
   13aee:	4bac      	ldr	r3, [pc, #688]	; (13da0 <ll_reset+0x2d8>)
	MFIFO_INIT(done);
   13af0:	4eac      	ldr	r6, [pc, #688]	; (13da4 <ll_reset+0x2dc>)
	MFIFO_INIT(pdu_rx_free);
   13af2:	4fad      	ldr	r7, [pc, #692]	; (13da8 <ll_reset+0x2e0>)
	MFIFO_INIT(ll_pdu_rx_free);
   13af4:	4dad      	ldr	r5, [pc, #692]	; (13dac <ll_reset+0x2e4>)
	MFIFO_INIT(tx_ack);
   13af6:	2400      	movs	r4, #0
   13af8:	805c      	strh	r4, [r3, #2]
		ull_filter_reset(false);
   13afa:	4620      	mov	r0, r4
   13afc:	f005 fa1a 	bl	18f34 <ull_filter_reset>
	MFIFO_INIT(prep);
   13b00:	4bab      	ldr	r3, [pc, #684]	; (13db0 <ll_reset+0x2e8>)
	MFIFO_INIT(done);
   13b02:	8074      	strh	r4, [r6, #2]
	MFIFO_INIT(prep);
   13b04:	805c      	strh	r4, [r3, #2]
	MFIFO_INIT(pdu_rx_free);
   13b06:	807c      	strh	r4, [r7, #2]
	MFIFO_INIT(ll_pdu_rx_free);
   13b08:	806c      	strh	r4, [r5, #2]
   13b0a:	2201      	movs	r2, #1
   13b0c:	4621      	mov	r1, r4
   13b0e:	4668      	mov	r0, sp
   13b10:	f00f fa6b 	bl	22fea <z_impl_k_sem_init>
		mfy.param = &sem;
   13b14:	4ba7      	ldr	r3, [pc, #668]	; (13db4 <ll_reset+0x2ec>)
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
   13b16:	4622      	mov	r2, r4
   13b18:	4621      	mov	r1, r4
   13b1a:	2003      	movs	r0, #3
		mfy.param = &sem;
   13b1c:	f8c3 d008 	str.w	sp, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
   13b20:	f7fc fb24 	bl	1016c <mayfly_enqueue>
		LL_ASSERT(!retval);
   13b24:	2800      	cmp	r0, #0
   13b26:	f040 80f6 	bne.w	13d16 <ll_reset+0x24e>
	return z_impl_k_sem_take(sem, timeout);
   13b2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13b2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13b32:	4668      	mov	r0, sp
   13b34:	f009 fe42 	bl	1d7bc <z_impl_k_sem_take>
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
   13b38:	4b9f      	ldr	r3, [pc, #636]	; (13db8 <ll_reset+0x2f0>)
		link = mem_acquire(&mem_link_done.free);
   13b3a:	f8df 9280 	ldr.w	r9, [pc, #640]	; 13dbc <ll_reset+0x2f4>
		rx = mem_acquire(&mem_done.free);
   13b3e:	f8df 8278 	ldr.w	r8, [pc, #632]	; 13db8 <ll_reset+0x2f0>
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
   13b42:	1d18      	adds	r0, r3, #4
   13b44:	2203      	movs	r2, #3
   13b46:	2134      	movs	r1, #52	; 0x34
   13b48:	f7fc fa0a 	bl	ff60 <mem_init>
	mem_init(mem_link_done.pool, sizeof(memq_link_t), EVENT_DONE_MAX,
   13b4c:	464b      	mov	r3, r9
   13b4e:	2203      	movs	r2, #3
   13b50:	1d18      	adds	r0, r3, #4
   13b52:	2108      	movs	r1, #8
   13b54:	f7fc fa04 	bl	ff60 <mem_init>
static inline void done_alloc(void)
   13b58:	78f4      	ldrb	r4, [r6, #3]
	if (last == count) {
   13b5a:	7872      	ldrb	r2, [r6, #1]
	while (MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
   13b5c:	78b3      	ldrb	r3, [r6, #2]
	last = last + 1;
   13b5e:	3401      	adds	r4, #1
   13b60:	b2e4      	uxtb	r4, r4
		last = 0U;
   13b62:	42a2      	cmp	r2, r4
   13b64:	bf08      	it	eq
   13b66:	2400      	moveq	r4, #0
	if (last == first) {
   13b68:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_done.free);
   13b6a:	4648      	mov	r0, r9
   13b6c:	d016      	beq.n	13b9c <ll_reset+0xd4>
   13b6e:	f7fc fa25 	bl	ffbc <mem_acquire>
   13b72:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_done.free);
   13b74:	4640      	mov	r0, r8
		if (!link) {
   13b76:	f1ba 0f00 	cmp.w	sl, #0
   13b7a:	d00f      	beq.n	13b9c <ll_reset+0xd4>
		rx = mem_acquire(&mem_done.free);
   13b7c:	f7fc fa1e 	bl	ffbc <mem_acquire>
		if (!rx) {
   13b80:	b140      	cbz	r0, 13b94 <ll_reset+0xcc>
		rx->link = link;
   13b82:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   13b86:	78f2      	ldrb	r2, [r6, #3]
   13b88:	7833      	ldrb	r3, [r6, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   13b8a:	fb02 6303 	mla	r3, r2, r3, r6
   13b8e:	6058      	str	r0, [r3, #4]
	*last = idx; /* Commit: Update write index */
   13b90:	70f4      	strb	r4, [r6, #3]
}
   13b92:	e7e2      	b.n	13b5a <ll_reset+0x92>
			mem_release(link, &mem_link_done.free);
   13b94:	4989      	ldr	r1, [pc, #548]	; (13dbc <ll_reset+0x2f4>)
   13b96:	4650      	mov	r0, sl
   13b98:	f7fc fa2a 	bl	fff0 <mem_release>
	mem_init(mem_pdu_rx.pool, (PDU_RX_NODE_POOL_ELEMENT_SIZE),
   13b9c:	4b88      	ldr	r3, [pc, #544]	; (13dc0 <ll_reset+0x2f8>)
   13b9e:	2211      	movs	r2, #17
   13ba0:	1d18      	adds	r0, r3, #4
   13ba2:	f44f 718e 	mov.w	r1, #284	; 0x11c
   13ba6:	f7fc f9db 	bl	ff60 <mem_init>
	mem_init(mem_link_rx.pool, sizeof(memq_link_t),
   13baa:	4b86      	ldr	r3, [pc, #536]	; (13dc4 <ll_reset+0x2fc>)
   13bac:	2216      	movs	r2, #22
   13bae:	1d18      	adds	r0, r3, #4
   13bb0:	2108      	movs	r1, #8
   13bb2:	f7fc f9d5 	bl	ff60 <mem_init>
	link = mem_acquire(&mem_link_rx.free);
   13bb6:	4883      	ldr	r0, [pc, #524]	; (13dc4 <ll_reset+0x2fc>)
   13bb8:	f7fc fa00 	bl	ffbc <mem_acquire>
	LL_ASSERT(link);
   13bbc:	4604      	mov	r4, r0
   13bbe:	2800      	cmp	r0, #0
   13bc0:	f000 80c5 	beq.w	13d4e <ll_reset+0x286>
	MEMQ_INIT(ull_rx, link);
   13bc4:	4a80      	ldr	r2, [pc, #512]	; (13dc8 <ll_reset+0x300>)
   13bc6:	4620      	mov	r0, r4
   13bc8:	1f11      	subs	r1, r2, #4
   13bca:	f7fc fa4d 	bl	10068 <memq_init>
	link = mem_acquire(&mem_link_rx.free);
   13bce:	487d      	ldr	r0, [pc, #500]	; (13dc4 <ll_reset+0x2fc>)
   13bd0:	f7fc f9f4 	bl	ffbc <mem_acquire>
	LL_ASSERT(link);
   13bd4:	4604      	mov	r4, r0
   13bd6:	2800      	cmp	r0, #0
   13bd8:	f000 80ab 	beq.w	13d32 <ll_reset+0x26a>
	MEMQ_INIT(ll_rx, link);
   13bdc:	4a7b      	ldr	r2, [pc, #492]	; (13dcc <ll_reset+0x304>)
	mem_link_rx.quota_pdu = RX_CNT;
   13bde:	4e7c      	ldr	r6, [pc, #496]	; (13dd0 <ll_reset+0x308>)
		rx = mem_acquire(&mem_pdu_rx.free);
   13be0:	f8df a1dc 	ldr.w	sl, [pc, #476]	; 13dc0 <ll_reset+0x2f8>
	MEMQ_INIT(ll_rx, link);
   13be4:	4620      	mov	r0, r4
   13be6:	1f11      	subs	r1, r2, #4
	mem_link_rx.quota_pdu = RX_CNT;
   13be8:	46b0      	mov	r8, r6
	MEMQ_INIT(ll_rx, link);
   13bea:	f7fc fa3d 	bl	10068 <memq_init>
	mem_link_rx.quota_pdu = RX_CNT;
   13bee:	2310      	movs	r3, #16
   13bf0:	f808 3b04 	strb.w	r3, [r8], #4
	while (mem_link_rx.quota_pdu &&
   13bf4:	78ec      	ldrb	r4, [r5, #3]
		link->mem = NULL;
   13bf6:	f04f 0900 	mov.w	r9, #0
	if (last == count) {
   13bfa:	786a      	ldrb	r2, [r5, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   13bfc:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   13bfe:	3401      	adds	r4, #1
   13c00:	b2e4      	uxtb	r4, r4
		last = 0U;
   13c02:	42a2      	cmp	r2, r4
   13c04:	bf08      	it	eq
   13c06:	2400      	moveq	r4, #0
	if (last == first) {
   13c08:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
   13c0a:	4640      	mov	r0, r8
   13c0c:	d021      	beq.n	13c52 <ll_reset+0x18a>
   13c0e:	f7fc f9d5 	bl	ffbc <mem_acquire>
   13c12:	4683      	mov	fp, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   13c14:	4650      	mov	r0, sl
		if (!link) {
   13c16:	f1bb 0f00 	cmp.w	fp, #0
   13c1a:	d017      	beq.n	13c4c <ll_reset+0x184>
		rx = mem_acquire(&mem_pdu_rx.free);
   13c1c:	f7fc f9ce 	bl	ffbc <mem_acquire>
		if (!rx) {
   13c20:	2800      	cmp	r0, #0
   13c22:	f000 80a7 	beq.w	13d74 <ll_reset+0x2ac>
		link->mem = NULL;
   13c26:	f8cb 9004 	str.w	r9, [fp, #4]
		rx->link = link;
   13c2a:	f8c0 b000 	str.w	fp, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   13c2e:	78e9      	ldrb	r1, [r5, #3]
   13c30:	782a      	ldrb	r2, [r5, #0]
	mem_link_rx.quota_pdu += delta;
   13c32:	7833      	ldrb	r3, [r6, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   13c34:	fb01 5202 	mla	r2, r1, r2, r5
   13c38:	3b01      	subs	r3, #1
   13c3a:	b2db      	uxtb	r3, r3
   13c3c:	6050      	str	r0, [r2, #4]
   13c3e:	7033      	strb	r3, [r6, #0]
	*last = idx; /* Commit: Update write index */
   13c40:	70ec      	strb	r4, [r5, #3]
	while (mem_link_rx.quota_pdu &&
   13c42:	2b00      	cmp	r3, #0
   13c44:	d1d9      	bne.n	13bfa <ll_reset+0x132>
}
   13c46:	b007      	add	sp, #28
   13c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		printk("overflow3");
   13c4c:	4861      	ldr	r0, [pc, #388]	; (13dd4 <ll_reset+0x30c>)
   13c4e:	f00a f97c 	bl	1df4a <printk>
	if (max > mem_link_rx.quota_pdu) {
   13c52:	7833      	ldrb	r3, [r6, #0]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   13c54:	1e5d      	subs	r5, r3, #1
   13c56:	b2ed      	uxtb	r5, r5
   13c58:	2b00      	cmp	r3, #0
   13c5a:	d0f4      	beq.n	13c46 <ll_reset+0x17e>
   13c5c:	78fc      	ldrb	r4, [r7, #3]
		link = mem_acquire(&mem_link_rx.free);
   13c5e:	f8df 9164 	ldr.w	r9, [pc, #356]	; 13dc4 <ll_reset+0x2fc>
		rx = mem_acquire(&mem_pdu_rx.free);
   13c62:	f8df 815c 	ldr.w	r8, [pc, #348]	; 13dc0 <ll_reset+0x2f8>
	if (last == count) {
   13c66:	787a      	ldrb	r2, [r7, #1]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   13c68:	78bb      	ldrb	r3, [r7, #2]
	last = last + 1;
   13c6a:	3401      	adds	r4, #1
   13c6c:	b2e4      	uxtb	r4, r4
		last = 0U;
   13c6e:	42a2      	cmp	r2, r4
   13c70:	bf08      	it	eq
   13c72:	2400      	moveq	r4, #0
	if (last == first) {
   13c74:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
   13c76:	4648      	mov	r0, r9
   13c78:	d0e5      	beq.n	13c46 <ll_reset+0x17e>
   13c7a:	f7fc f99f 	bl	ffbc <mem_acquire>
   13c7e:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   13c80:	4640      	mov	r0, r8
		if (!link) {
   13c82:	f1ba 0f00 	cmp.w	sl, #0
   13c86:	d0de      	beq.n	13c46 <ll_reset+0x17e>
		rx = mem_acquire(&mem_pdu_rx.free);
   13c88:	f7fc f998 	bl	ffbc <mem_acquire>
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   13c8c:	3d01      	subs	r5, #1
   13c8e:	b2ed      	uxtb	r5, r5
		if (!rx) {
   13c90:	2800      	cmp	r0, #0
   13c92:	d06a      	beq.n	13d6a <ll_reset+0x2a2>
		rx->link = link;
   13c94:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   13c98:	78f9      	ldrb	r1, [r7, #3]
   13c9a:	783a      	ldrb	r2, [r7, #0]
	mem_link_rx.quota_pdu += delta;
   13c9c:	7833      	ldrb	r3, [r6, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   13c9e:	fb01 7202 	mla	r2, r1, r2, r7
   13ca2:	3b01      	subs	r3, #1
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   13ca4:	2dff      	cmp	r5, #255	; 0xff
   13ca6:	6050      	str	r0, [r2, #4]
	mem_link_rx.quota_pdu += delta;
   13ca8:	7033      	strb	r3, [r6, #0]
	*last = idx; /* Commit: Update write index */
   13caa:	70fc      	strb	r4, [r7, #3]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   13cac:	d1db      	bne.n	13c66 <ll_reset+0x19e>
   13cae:	e7ca      	b.n	13c46 <ll_reset+0x17e>
	LL_ASSERT(!err);
   13cb0:	4a49      	ldr	r2, [pc, #292]	; (13dd8 <ll_reset+0x310>)
   13cb2:	494a      	ldr	r1, [pc, #296]	; (13ddc <ll_reset+0x314>)
   13cb4:	484a      	ldr	r0, [pc, #296]	; (13de0 <ll_reset+0x318>)
   13cb6:	f44f 73c0 	mov.w	r3, #384	; 0x180
   13cba:	f00a f946 	bl	1df4a <printk>
   13cbe:	4040      	eors	r0, r0
   13cc0:	f380 8811 	msr	BASEPRI, r0
   13cc4:	f04f 0003 	mov.w	r0, #3
   13cc8:	df02      	svc	2
		err = ll_connect_disable(&rx);
   13cca:	4668      	mov	r0, sp
   13ccc:	f004 fa2c 	bl	18128 <ll_connect_disable>
		if (!err) {
   13cd0:	2800      	cmp	r0, #0
   13cd2:	f47f af07 	bne.w	13ae4 <ll_reset+0x1c>
			scan = ull_scan_is_enabled_get(0);
   13cd6:	f000 feb3 	bl	14a40 <ull_scan_is_enabled_get>
			LL_ASSERT(scan);
   13cda:	4604      	mov	r4, r0
   13cdc:	2800      	cmp	r0, #0
   13cde:	d051      	beq.n	13d84 <ll_reset+0x2bc>
			scan->is_enabled = 0U;
   13ce0:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
			scan->lll.conn = NULL;
   13ce4:	2200      	movs	r2, #0
			scan->is_enabled = 0U;
   13ce6:	f36f 0300 	bfc	r3, #0, #1
   13cea:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
			scan->lll.conn = NULL;
   13cee:	6262      	str	r2, [r4, #36]	; 0x24
	err = ull_conn_reset();
   13cf0:	f001 fdce 	bl	15890 <ull_conn_reset>
	LL_ASSERT(!err);
   13cf4:	2800      	cmp	r0, #0
   13cf6:	f43f aefa 	beq.w	13aee <ll_reset+0x26>
   13cfa:	4a37      	ldr	r2, [pc, #220]	; (13dd8 <ll_reset+0x310>)
   13cfc:	4937      	ldr	r1, [pc, #220]	; (13ddc <ll_reset+0x314>)
   13cfe:	4838      	ldr	r0, [pc, #224]	; (13de0 <ll_reset+0x318>)
   13d00:	f44f 73cd 	mov.w	r3, #410	; 0x19a
   13d04:	f00a f921 	bl	1df4a <printk>
   13d08:	4040      	eors	r0, r0
   13d0a:	f380 8811 	msr	BASEPRI, r0
   13d0e:	f04f 0003 	mov.w	r0, #3
   13d12:	df02      	svc	2
   13d14:	e6eb      	b.n	13aee <ll_reset+0x26>
		LL_ASSERT(!retval);
   13d16:	4a30      	ldr	r2, [pc, #192]	; (13dd8 <ll_reset+0x310>)
   13d18:	4932      	ldr	r1, [pc, #200]	; (13de4 <ll_reset+0x31c>)
   13d1a:	4831      	ldr	r0, [pc, #196]	; (13de0 <ll_reset+0x318>)
   13d1c:	f44f 73e6 	mov.w	r3, #460	; 0x1cc
   13d20:	f00a f913 	bl	1df4a <printk>
   13d24:	4040      	eors	r0, r0
   13d26:	f380 8811 	msr	BASEPRI, r0
   13d2a:	f04f 0003 	mov.w	r0, #3
   13d2e:	df02      	svc	2
   13d30:	e6fb      	b.n	13b2a <ll_reset+0x62>
	LL_ASSERT(link);
   13d32:	4a29      	ldr	r2, [pc, #164]	; (13dd8 <ll_reset+0x310>)
   13d34:	492c      	ldr	r1, [pc, #176]	; (13de8 <ll_reset+0x320>)
   13d36:	482a      	ldr	r0, [pc, #168]	; (13de0 <ll_reset+0x318>)
   13d38:	f240 43ee 	movw	r3, #1262	; 0x4ee
   13d3c:	f00a f905 	bl	1df4a <printk>
   13d40:	4040      	eors	r0, r0
   13d42:	f380 8811 	msr	BASEPRI, r0
   13d46:	f04f 0003 	mov.w	r0, #3
   13d4a:	df02      	svc	2
   13d4c:	e746      	b.n	13bdc <ll_reset+0x114>
	LL_ASSERT(link);
   13d4e:	4a22      	ldr	r2, [pc, #136]	; (13dd8 <ll_reset+0x310>)
   13d50:	4925      	ldr	r1, [pc, #148]	; (13de8 <ll_reset+0x320>)
   13d52:	4823      	ldr	r0, [pc, #140]	; (13de0 <ll_reset+0x318>)
   13d54:	f240 43e7 	movw	r3, #1255	; 0x4e7
   13d58:	f00a f8f7 	bl	1df4a <printk>
   13d5c:	4040      	eors	r0, r0
   13d5e:	f380 8811 	msr	BASEPRI, r0
   13d62:	f04f 0003 	mov.w	r0, #3
   13d66:	df02      	svc	2
   13d68:	e72c      	b.n	13bc4 <ll_reset+0xfc>
			mem_release(link, &mem_link_rx.free);
   13d6a:	4916      	ldr	r1, [pc, #88]	; (13dc4 <ll_reset+0x2fc>)
   13d6c:	4650      	mov	r0, sl
   13d6e:	f7fc f93f 	bl	fff0 <mem_release>
			break;
   13d72:	e768      	b.n	13c46 <ll_reset+0x17e>
		printk("overflow4");
   13d74:	481d      	ldr	r0, [pc, #116]	; (13dec <ll_reset+0x324>)
   13d76:	f00a f8e8 	bl	1df4a <printk>
			mem_release(link, &mem_link_rx.free);
   13d7a:	4912      	ldr	r1, [pc, #72]	; (13dc4 <ll_reset+0x2fc>)
   13d7c:	4658      	mov	r0, fp
   13d7e:	f7fc f937 	bl	fff0 <mem_release>
			break;
   13d82:	e766      	b.n	13c52 <ll_reset+0x18a>
			LL_ASSERT(scan);
   13d84:	4a14      	ldr	r2, [pc, #80]	; (13dd8 <ll_reset+0x310>)
   13d86:	491a      	ldr	r1, [pc, #104]	; (13df0 <ll_reset+0x328>)
   13d88:	4815      	ldr	r0, [pc, #84]	; (13de0 <ll_reset+0x318>)
   13d8a:	f44f 73c7 	mov.w	r3, #398	; 0x18e
   13d8e:	f00a f8dc 	bl	1df4a <printk>
   13d92:	4040      	eors	r0, r0
   13d94:	f380 8811 	msr	BASEPRI, r0
   13d98:	f04f 0003 	mov.w	r0, #3
   13d9c:	df02      	svc	2
   13d9e:	e79f      	b.n	13ce0 <ll_reset+0x218>
   13da0:	20000400 	.word	0x20000400
   13da4:	20000278 	.word	0x20000278
   13da8:	200002a0 	.word	0x200002a0
   13dac:	2000028c 	.word	0x2000028c
   13db0:	200002dc 	.word	0x200002dc
   13db4:	2000045c 	.word	0x2000045c
   13db8:	20002654 	.word	0x20002654
   13dbc:	200026f4 	.word	0x200026f4
   13dc0:	200027c8 	.word	0x200027c8
   13dc4:	20002714 	.word	0x20002714
   13dc8:	20003ab4 	.word	0x20003ab4
   13dcc:	20003aac 	.word	0x20003aac
   13dd0:	20002710 	.word	0x20002710
   13dd4:	000242c8 	.word	0x000242c8
   13dd8:	00024258 	.word	0x00024258
   13ddc:	00024294 	.word	0x00024294
   13de0:	00023fe4 	.word	0x00023fe4
   13de4:	000242e0 	.word	0x000242e0
   13de8:	00024484 	.word	0x00024484
   13dec:	000242d4 	.word	0x000242d4
   13df0:	00024410 	.word	0x00024410

00013df4 <ll_rx_get>:
{
   13df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13df8:	b085      	sub	sp, #20
   13dfa:	e9cd 0100 	strd	r0, r1, [sp]
   13dfe:	4c63      	ldr	r4, [pc, #396]	; (13f8c <ll_rx_get+0x198>)
				mem_release(link, &mem_link_rx.free);
   13e00:	4d63      	ldr	r5, [pc, #396]	; (13f90 <ll_rx_get+0x19c>)
   13e02:	f8df 9194 	ldr.w	r9, [pc, #404]	; 13f98 <ll_rx_get+0x1a4>
	*node_rx = NULL;
   13e06:	9a00      	ldr	r2, [sp, #0]
   13e08:	2300      	movs	r3, #0
   13e0a:	6013      	str	r3, [r2, #0]
	link = memq_peek(memq_ll_rx.head, memq_ll_rx.tail, (void **)&rx);
   13e0c:	e9d9 0100 	ldrd	r0, r1, [r9]
   13e10:	aa03      	add	r2, sp, #12
   13e12:	f7fc f93f 	bl	10094 <memq_peek>
	if (link) {
   13e16:	4607      	mov	r7, r0
   13e18:	2800      	cmp	r0, #0
   13e1a:	f000 80ac 	beq.w	13f76 <ll_rx_get+0x182>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
   13e1e:	9b03      	ldr	r3, [sp, #12]
   13e20:	495c      	ldr	r1, [pc, #368]	; (13f94 <ll_rx_get+0x1a0>)
   13e22:	781a      	ldrb	r2, [r3, #0]
   13e24:	9801      	ldr	r0, [sp, #4]
   13e26:	f7ff faa1 	bl	1336c <tx_cmplt_get>
		if (!cmplt) {
   13e2a:	4603      	mov	r3, r0
   13e2c:	2800      	cmp	r0, #0
   13e2e:	f040 8091 	bne.w	13f54 <ll_rx_get+0x160>
			f = mfifo_tx_ack.f;
   13e32:	78a2      	ldrb	r2, [r4, #2]
   13e34:	f88d 2009 	strb.w	r2, [sp, #9]
				cmplt_curr = tx_cmplt_get(&h, &f,
   13e38:	78e2      	ldrb	r2, [r4, #3]
   13e3a:	f10d 0109 	add.w	r1, sp, #9
   13e3e:	f10d 000a 	add.w	r0, sp, #10
   13e42:	461e      	mov	r6, r3
   13e44:	f7ff fa92 	bl	1336c <tx_cmplt_get>
   13e48:	ea46 0200 	orr.w	r2, r6, r0
			} while ((cmplt_prev != 0U) ||
   13e4c:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
				cmplt_curr = tx_cmplt_get(&h, &f,
   13e50:	4603      	mov	r3, r0
			} while ((cmplt_prev != 0U) ||
   13e52:	d1f1      	bne.n	13e38 <ll_rx_get+0x44>
			if (rx->type == NODE_RX_TYPE_DC_PDU_RELEASE) {
   13e54:	9b03      	ldr	r3, [sp, #12]
   13e56:	7919      	ldrb	r1, [r3, #4]
   13e58:	2903      	cmp	r1, #3
   13e5a:	d178      	bne.n	13f4e <ll_rx_get+0x15a>
				(void)memq_dequeue(memq_ll_rx.tail,
   13e5c:	494e      	ldr	r1, [pc, #312]	; (13f98 <ll_rx_get+0x1a4>)
   13e5e:	f8d9 0004 	ldr.w	r0, [r9, #4]
   13e62:	f7fc f91f 	bl	100a4 <memq_dequeue>
				mem_release(link, &mem_link_rx.free);
   13e66:	494d      	ldr	r1, [pc, #308]	; (13f9c <ll_rx_get+0x1a8>)
   13e68:	4638      	mov	r0, r7
   13e6a:	f7fc f8c1 	bl	fff0 <mem_release>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   13e6e:	782b      	ldrb	r3, [r5, #0]
   13e70:	2b0f      	cmp	r3, #15
   13e72:	d85d      	bhi.n	13f30 <ll_rx_get+0x13c>
	mem_link_rx.quota_pdu += delta;
   13e74:	3301      	adds	r3, #1
				mem_release(rx, &mem_pdu_rx.free);
   13e76:	494a      	ldr	r1, [pc, #296]	; (13fa0 <ll_rx_get+0x1ac>)
   13e78:	9803      	ldr	r0, [sp, #12]
	mem_link_rx.quota_pdu += delta;
   13e7a:	702b      	strb	r3, [r5, #0]
				mem_release(rx, &mem_pdu_rx.free);
   13e7c:	f7fc f8b8 	bl	fff0 <mem_release>
	while (mem_link_rx.quota_pdu &&
   13e80:	782b      	ldrb	r3, [r5, #0]
   13e82:	2b00      	cmp	r3, #0
   13e84:	d0bf      	beq.n	13e06 <ll_rx_get+0x12>
   13e86:	4f47      	ldr	r7, [pc, #284]	; (13fa4 <ll_rx_get+0x1b0>)
		link = mem_acquire(&mem_link_rx.free);
   13e88:	f8df 8110 	ldr.w	r8, [pc, #272]	; 13f9c <ll_rx_get+0x1a8>
   13e8c:	78fe      	ldrb	r6, [r7, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
   13e8e:	f8df a110 	ldr.w	sl, [pc, #272]	; 13fa0 <ll_rx_get+0x1ac>
	if (last == count) {
   13e92:	787a      	ldrb	r2, [r7, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   13e94:	78bb      	ldrb	r3, [r7, #2]
	last = last + 1;
   13e96:	3601      	adds	r6, #1
   13e98:	b2f6      	uxtb	r6, r6
		last = 0U;
   13e9a:	42b2      	cmp	r2, r6
   13e9c:	bf08      	it	eq
   13e9e:	2600      	moveq	r6, #0
	if (last == first) {
   13ea0:	429e      	cmp	r6, r3
		link = mem_acquire(&mem_link_rx.free);
   13ea2:	4640      	mov	r0, r8
   13ea4:	d01f      	beq.n	13ee6 <ll_rx_get+0xf2>
   13ea6:	f7fc f889 	bl	ffbc <mem_acquire>
   13eaa:	4683      	mov	fp, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   13eac:	4650      	mov	r0, sl
		if (!link) {
   13eae:	f1bb 0f00 	cmp.w	fp, #0
   13eb2:	d015      	beq.n	13ee0 <ll_rx_get+0xec>
		rx = mem_acquire(&mem_pdu_rx.free);
   13eb4:	f7fc f882 	bl	ffbc <mem_acquire>
		if (!rx) {
   13eb8:	2800      	cmp	r0, #0
   13eba:	d054      	beq.n	13f66 <ll_rx_get+0x172>
		link->mem = NULL;
   13ebc:	2300      	movs	r3, #0
   13ebe:	f8cb 3004 	str.w	r3, [fp, #4]
		rx->link = link;
   13ec2:	f8c0 b000 	str.w	fp, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   13ec6:	78f9      	ldrb	r1, [r7, #3]
   13ec8:	783a      	ldrb	r2, [r7, #0]
	mem_link_rx.quota_pdu += delta;
   13eca:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   13ecc:	fb01 7202 	mla	r2, r1, r2, r7
   13ed0:	3b01      	subs	r3, #1
   13ed2:	b2db      	uxtb	r3, r3
   13ed4:	6050      	str	r0, [r2, #4]
   13ed6:	702b      	strb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
   13ed8:	70fe      	strb	r6, [r7, #3]
	while (mem_link_rx.quota_pdu &&
   13eda:	2b00      	cmp	r3, #0
   13edc:	d1d9      	bne.n	13e92 <ll_rx_get+0x9e>
   13ede:	e792      	b.n	13e06 <ll_rx_get+0x12>
		printk("overflow3");
   13ee0:	4831      	ldr	r0, [pc, #196]	; (13fa8 <ll_rx_get+0x1b4>)
   13ee2:	f00a f832 	bl	1df4a <printk>
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   13ee6:	782b      	ldrb	r3, [r5, #0]
   13ee8:	2b00      	cmp	r3, #0
   13eea:	d08c      	beq.n	13e06 <ll_rx_get+0x12>
   13eec:	4f2f      	ldr	r7, [pc, #188]	; (13fac <ll_rx_get+0x1b8>)
	last = last + 1;
   13eee:	78fe      	ldrb	r6, [r7, #3]
	if (last == count) {
   13ef0:	787a      	ldrb	r2, [r7, #1]
   13ef2:	78bb      	ldrb	r3, [r7, #2]
	last = last + 1;
   13ef4:	3601      	adds	r6, #1
   13ef6:	b2f6      	uxtb	r6, r6
		last = 0U;
   13ef8:	42b2      	cmp	r2, r6
   13efa:	bf08      	it	eq
   13efc:	2600      	moveq	r6, #0
	if (last == first) {
   13efe:	429e      	cmp	r6, r3
   13f00:	d081      	beq.n	13e06 <ll_rx_get+0x12>
		link = mem_acquire(&mem_link_rx.free);
   13f02:	4826      	ldr	r0, [pc, #152]	; (13f9c <ll_rx_get+0x1a8>)
   13f04:	f7fc f85a 	bl	ffbc <mem_acquire>
		if (!link) {
   13f08:	4680      	mov	r8, r0
   13f0a:	2800      	cmp	r0, #0
   13f0c:	f43f af7b 	beq.w	13e06 <ll_rx_get+0x12>
		rx = mem_acquire(&mem_pdu_rx.free);
   13f10:	4823      	ldr	r0, [pc, #140]	; (13fa0 <ll_rx_get+0x1ac>)
   13f12:	f7fc f853 	bl	ffbc <mem_acquire>
		if (!rx) {
   13f16:	b308      	cbz	r0, 13f5c <ll_rx_get+0x168>
		rx->link = link;
   13f18:	f8c0 8000 	str.w	r8, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   13f1c:	78f9      	ldrb	r1, [r7, #3]
   13f1e:	783a      	ldrb	r2, [r7, #0]
	mem_link_rx.quota_pdu += delta;
   13f20:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   13f22:	fb01 7202 	mla	r2, r1, r2, r7
   13f26:	3b01      	subs	r3, #1
   13f28:	6050      	str	r0, [r2, #4]
   13f2a:	702b      	strb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
   13f2c:	70fe      	strb	r6, [r7, #3]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   13f2e:	e76a      	b.n	13e06 <ll_rx_get+0x12>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   13f30:	4a1f      	ldr	r2, [pc, #124]	; (13fb0 <ll_rx_get+0x1bc>)
   13f32:	4920      	ldr	r1, [pc, #128]	; (13fb4 <ll_rx_get+0x1c0>)
   13f34:	4820      	ldr	r0, [pc, #128]	; (13fb8 <ll_rx_get+0x1c4>)
   13f36:	f240 3393 	movw	r3, #915	; 0x393
   13f3a:	f00a f806 	bl	1df4a <printk>
   13f3e:	4040      	eors	r0, r0
   13f40:	f380 8811 	msr	BASEPRI, r0
   13f44:	f04f 0003 	mov.w	r0, #3
   13f48:	df02      	svc	2
   13f4a:	782b      	ldrb	r3, [r5, #0]
   13f4c:	e792      	b.n	13e74 <ll_rx_get+0x80>
			*node_rx = rx;
   13f4e:	9900      	ldr	r1, [sp, #0]
   13f50:	600b      	str	r3, [r1, #0]
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
   13f52:	4613      	mov	r3, r2
}
   13f54:	4618      	mov	r0, r3
   13f56:	b005      	add	sp, #20
   13f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mem_release(link, &mem_link_rx.free);
   13f5c:	490f      	ldr	r1, [pc, #60]	; (13f9c <ll_rx_get+0x1a8>)
   13f5e:	4640      	mov	r0, r8
   13f60:	f7fc f846 	bl	fff0 <mem_release>
			break;
   13f64:	e74f      	b.n	13e06 <ll_rx_get+0x12>
		printk("overflow4");
   13f66:	4815      	ldr	r0, [pc, #84]	; (13fbc <ll_rx_get+0x1c8>)
   13f68:	f009 ffef 	bl	1df4a <printk>
			mem_release(link, &mem_link_rx.free);
   13f6c:	490b      	ldr	r1, [pc, #44]	; (13f9c <ll_rx_get+0x1a8>)
   13f6e:	4658      	mov	r0, fp
   13f70:	f7fc f83e 	bl	fff0 <mem_release>
			break;
   13f74:	e7b7      	b.n	13ee6 <ll_rx_get+0xf2>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, mfifo_tx_ack.l);
   13f76:	78e2      	ldrb	r2, [r4, #3]
   13f78:	4906      	ldr	r1, [pc, #24]	; (13f94 <ll_rx_get+0x1a0>)
   13f7a:	9801      	ldr	r0, [sp, #4]
   13f7c:	f7ff f9f6 	bl	1336c <tx_cmplt_get>
   13f80:	4603      	mov	r3, r0
}
   13f82:	4618      	mov	r0, r3
   13f84:	b005      	add	sp, #20
   13f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f8a:	bf00      	nop
   13f8c:	20000400 	.word	0x20000400
   13f90:	20002710 	.word	0x20002710
   13f94:	20000402 	.word	0x20000402
   13f98:	20003aa8 	.word	0x20003aa8
   13f9c:	20002714 	.word	0x20002714
   13fa0:	200027c8 	.word	0x200027c8
   13fa4:	2000028c 	.word	0x2000028c
   13fa8:	000242c8 	.word	0x000242c8
   13fac:	200002a0 	.word	0x200002a0
   13fb0:	00024258 	.word	0x00024258
   13fb4:	000242e8 	.word	0x000242e8
   13fb8:	00023fe4 	.word	0x00023fe4
   13fbc:	000242d4 	.word	0x000242d4

00013fc0 <ll_rx_dequeue>:
{
   13fc0:	b510      	push	{r4, lr}
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   13fc2:	492f      	ldr	r1, [pc, #188]	; (14080 <ll_rx_dequeue+0xc0>)
{
   13fc4:	b082      	sub	sp, #8
	struct node_rx_hdr *rx = NULL;
   13fc6:	2300      	movs	r3, #0
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   13fc8:	6848      	ldr	r0, [r1, #4]
	struct node_rx_hdr *rx = NULL;
   13fca:	9301      	str	r3, [sp, #4]
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   13fcc:	aa01      	add	r2, sp, #4
   13fce:	f7fc f869 	bl	100a4 <memq_dequeue>
	LL_ASSERT(link);
   13fd2:	4604      	mov	r4, r0
   13fd4:	2800      	cmp	r0, #0
   13fd6:	d035      	beq.n	14044 <ll_rx_dequeue+0x84>
	mem_release(link, &mem_link_rx.free);
   13fd8:	492a      	ldr	r1, [pc, #168]	; (14084 <ll_rx_dequeue+0xc4>)
   13fda:	4620      	mov	r0, r4
   13fdc:	f7fc f808 	bl	fff0 <mem_release>
	switch (rx->type) {
   13fe0:	9a01      	ldr	r2, [sp, #4]
   13fe2:	7913      	ldrb	r3, [r2, #4]
   13fe4:	2b0f      	cmp	r3, #15
   13fe6:	d80d      	bhi.n	14004 <ll_rx_dequeue+0x44>
   13fe8:	e8df f003 	tbb	[pc, r3]
   13fec:	0c080c08 	.word	0x0c080c08
   13ff0:	0c0c0c08 	.word	0x0c0c0c08
   13ff4:	08081b0c 	.word	0x08081b0c
   13ff8:	08080808 	.word	0x08080808
		LL_ASSERT(rx->type != NODE_RX_TYPE_NONE);
   13ffc:	2b00      	cmp	r3, #0
   13ffe:	d02f      	beq.n	14060 <ll_rx_dequeue+0xa0>
}
   14000:	b002      	add	sp, #8
   14002:	bd10      	pop	{r4, pc}
		LL_ASSERT(0);
   14004:	4a20      	ldr	r2, [pc, #128]	; (14088 <ll_rx_dequeue+0xc8>)
   14006:	4921      	ldr	r1, [pc, #132]	; (1408c <ll_rx_dequeue+0xcc>)
   14008:	4821      	ldr	r0, [pc, #132]	; (14090 <ll_rx_dequeue+0xd0>)
   1400a:	f240 23d2 	movw	r3, #722	; 0x2d2
   1400e:	f009 ff9c 	bl	1df4a <printk>
   14012:	4040      	eors	r0, r0
   14014:	f380 8811 	msr	BASEPRI, r0
   14018:	f04f 0003 	mov.w	r0, #3
   1401c:	df02      	svc	2
}
   1401e:	b002      	add	sp, #8
   14020:	bd10      	pop	{r4, pc}
			struct ll_scan_set *scan = (void *)HDR_LLL2EVT(lll);
   14022:	6893      	ldr	r3, [r2, #8]
   14024:	681b      	ldr	r3, [r3, #0]
			scan->is_enabled = 0U;
   14026:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
   1402a:	f36f 0200 	bfc	r2, #0, #1
   1402e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
			      ull_scan_is_enabled(0) << 1) |
   14032:	2000      	movs	r0, #0
   14034:	f000 fd1e 	bl	14a74 <ull_scan_is_enabled>
			if (!bm) {
   14038:	0040      	lsls	r0, r0, #1
   1403a:	d1e1      	bne.n	14000 <ll_rx_dequeue+0x40>
				ull_filter_adv_scan_state_cb(0);
   1403c:	f004 fbe4 	bl	18808 <ull_filter_adv_scan_state_cb>
}
   14040:	b002      	add	sp, #8
   14042:	bd10      	pop	{r4, pc}
	LL_ASSERT(link);
   14044:	4a10      	ldr	r2, [pc, #64]	; (14088 <ll_rx_dequeue+0xc8>)
   14046:	4913      	ldr	r1, [pc, #76]	; (14094 <ll_rx_dequeue+0xd4>)
   14048:	4811      	ldr	r0, [pc, #68]	; (14090 <ll_rx_dequeue+0xd0>)
   1404a:	f240 232a 	movw	r3, #554	; 0x22a
   1404e:	f009 ff7c 	bl	1df4a <printk>
   14052:	4040      	eors	r0, r0
   14054:	f380 8811 	msr	BASEPRI, r0
   14058:	f04f 0003 	mov.w	r0, #3
   1405c:	df02      	svc	2
   1405e:	e7bb      	b.n	13fd8 <ll_rx_dequeue+0x18>
		LL_ASSERT(rx->type != NODE_RX_TYPE_NONE);
   14060:	4a09      	ldr	r2, [pc, #36]	; (14088 <ll_rx_dequeue+0xc8>)
   14062:	490d      	ldr	r1, [pc, #52]	; (14098 <ll_rx_dequeue+0xd8>)
   14064:	480a      	ldr	r0, [pc, #40]	; (14090 <ll_rx_dequeue+0xd0>)
   14066:	f240 23ce 	movw	r3, #718	; 0x2ce
   1406a:	f009 ff6e 	bl	1df4a <printk>
   1406e:	4040      	eors	r0, r0
   14070:	f380 8811 	msr	BASEPRI, r0
   14074:	f04f 0003 	mov.w	r0, #3
   14078:	df02      	svc	2
}
   1407a:	b002      	add	sp, #8
   1407c:	bd10      	pop	{r4, pc}
   1407e:	bf00      	nop
   14080:	20003aa8 	.word	0x20003aa8
   14084:	20002714 	.word	0x20002714
   14088:	00024258 	.word	0x00024258
   1408c:	00024054 	.word	0x00024054
   14090:	00023fe4 	.word	0x00023fe4
   14094:	00024484 	.word	0x00024484
   14098:	00024320 	.word	0x00024320

0001409c <ll_rx_mem_release>:
{
   1409c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	rx = *node_rx;
   140a0:	6804      	ldr	r4, [r0, #0]
	while (rx) {
   140a2:	4dad      	ldr	r5, [pc, #692]	; (14358 <ll_rx_mem_release+0x2bc>)
{
   140a4:	b083      	sub	sp, #12
   140a6:	4682      	mov	sl, r0
	while (rx) {
   140a8:	2c00      	cmp	r4, #0
   140aa:	d044      	beq.n	14136 <ll_rx_mem_release+0x9a>
			LL_ASSERT(0);
   140ac:	4fab      	ldr	r7, [pc, #684]	; (1435c <ll_rx_mem_release+0x2c0>)
   140ae:	f8df b2e0 	ldr.w	fp, [pc, #736]	; 14390 <ll_rx_mem_release+0x2f4>
   140b2:	4eab      	ldr	r6, [pc, #684]	; (14360 <ll_rx_mem_release+0x2c4>)
   140b4:	9001      	str	r0, [sp, #4]
		rx = rx->next;
   140b6:	46a0      	mov	r8, r4
   140b8:	6824      	ldr	r4, [r4, #0]
		switch (rx_free->type) {
   140ba:	f898 3004 	ldrb.w	r3, [r8, #4]
   140be:	2b0f      	cmp	r3, #15
   140c0:	d86d      	bhi.n	1419e <ll_rx_mem_release+0x102>
   140c2:	e8df f003 	tbb	[pc, r3]
   140c6:	6c1d      	.short	0x6c1d
   140c8:	6c1d6c1d 	.word	0x6c1d6c1d
   140cc:	086c6c6c 	.word	0x086c6c6c
   140d0:	1d1d1d7d 	.word	0x1d1d1d7d
   140d4:	1d1d      	.short	0x1d1d
			} else if (cc->status == BT_HCI_ERR_UNKNOWN_CONN_ID) {
   140d6:	f898 301c 	ldrb.w	r3, [r8, #28]
   140da:	2b02      	cmp	r3, #2
   140dc:	f000 80da 	beq.w	14294 <ll_rx_mem_release+0x1f8>
				LL_ASSERT(!cc->status);
   140e0:	b1e3      	cbz	r3, 1411c <ll_rx_mem_release+0x80>
   140e2:	49a0      	ldr	r1, [pc, #640]	; (14364 <ll_rx_mem_release+0x2c8>)
   140e4:	f240 332a 	movw	r3, #810	; 0x32a
   140e8:	463a      	mov	r2, r7
   140ea:	4630      	mov	r0, r6
   140ec:	f009 ff2d 	bl	1df4a <printk>
   140f0:	4040      	eors	r0, r0
   140f2:	f380 8811 	msr	BASEPRI, r0
   140f6:	f04f 0003 	mov.w	r0, #3
   140fa:	df02      	svc	2
   140fc:	f898 3004 	ldrb.w	r3, [r8, #4]
			LL_ASSERT(rx_free->type != NODE_RX_TYPE_NONE);
   14100:	b963      	cbnz	r3, 1411c <ll_rx_mem_release+0x80>
   14102:	4999      	ldr	r1, [pc, #612]	; (14368 <ll_rx_mem_release+0x2cc>)
   14104:	f240 336d 	movw	r3, #877	; 0x36d
   14108:	463a      	mov	r2, r7
   1410a:	4630      	mov	r0, r6
   1410c:	f009 ff1d 	bl	1df4a <printk>
   14110:	4040      	eors	r0, r0
   14112:	f380 8811 	msr	BASEPRI, r0
   14116:	f04f 0003 	mov.w	r0, #3
   1411a:	df02      	svc	2
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   1411c:	782b      	ldrb	r3, [r5, #0]
   1411e:	2b0f      	cmp	r3, #15
   14120:	d875      	bhi.n	1420e <ll_rx_mem_release+0x172>
	mem_link_rx.quota_pdu += delta;
   14122:	3301      	adds	r3, #1
			mem_release(rx_free, &mem_pdu_rx.free);
   14124:	4991      	ldr	r1, [pc, #580]	; (1436c <ll_rx_mem_release+0x2d0>)
	mem_link_rx.quota_pdu += delta;
   14126:	702b      	strb	r3, [r5, #0]
			mem_release(rx_free, &mem_pdu_rx.free);
   14128:	4640      	mov	r0, r8
   1412a:	f7fb ff61 	bl	fff0 <mem_release>
	while (rx) {
   1412e:	2c00      	cmp	r4, #0
   14130:	d1c1      	bne.n	140b6 <ll_rx_mem_release+0x1a>
   14132:	f8dd a004 	ldr.w	sl, [sp, #4]
	*node_rx = rx;
   14136:	2700      	movs	r7, #0
   14138:	f8ca 7000 	str.w	r7, [sl]
	while (mem_link_rx.quota_pdu &&
   1413c:	782b      	ldrb	r3, [r5, #0]
   1413e:	b35b      	cbz	r3, 14198 <ll_rx_mem_release+0xfc>
   14140:	4e8b      	ldr	r6, [pc, #556]	; (14370 <ll_rx_mem_release+0x2d4>)
		link = mem_acquire(&mem_link_rx.free);
   14142:	f8df 8250 	ldr.w	r8, [pc, #592]	; 14394 <ll_rx_mem_release+0x2f8>
   14146:	78f4      	ldrb	r4, [r6, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
   14148:	f8df 9220 	ldr.w	r9, [pc, #544]	; 1436c <ll_rx_mem_release+0x2d0>
	if (last == count) {
   1414c:	7872      	ldrb	r2, [r6, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   1414e:	78b3      	ldrb	r3, [r6, #2]
	last = last + 1;
   14150:	3401      	adds	r4, #1
   14152:	b2e4      	uxtb	r4, r4
		last = 0U;
   14154:	42a2      	cmp	r2, r4
   14156:	bf08      	it	eq
   14158:	2400      	moveq	r4, #0
	if (last == first) {
   1415a:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
   1415c:	4640      	mov	r0, r8
   1415e:	d068      	beq.n	14232 <ll_rx_mem_release+0x196>
   14160:	f7fb ff2c 	bl	ffbc <mem_acquire>
   14164:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   14166:	4648      	mov	r0, r9
		if (!link) {
   14168:	f1ba 0f00 	cmp.w	sl, #0
   1416c:	d05e      	beq.n	1422c <ll_rx_mem_release+0x190>
		rx = mem_acquire(&mem_pdu_rx.free);
   1416e:	f7fb ff25 	bl	ffbc <mem_acquire>
		if (!rx) {
   14172:	2800      	cmp	r0, #0
   14174:	f000 8110 	beq.w	14398 <ll_rx_mem_release+0x2fc>
		link->mem = NULL;
   14178:	f8ca 7004 	str.w	r7, [sl, #4]
		rx->link = link;
   1417c:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   14180:	78f1      	ldrb	r1, [r6, #3]
   14182:	7832      	ldrb	r2, [r6, #0]
	mem_link_rx.quota_pdu += delta;
   14184:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   14186:	fb01 6202 	mla	r2, r1, r2, r6
   1418a:	3b01      	subs	r3, #1
   1418c:	b2db      	uxtb	r3, r3
   1418e:	6050      	str	r0, [r2, #4]
   14190:	702b      	strb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
   14192:	70f4      	strb	r4, [r6, #3]
	while (mem_link_rx.quota_pdu &&
   14194:	2b00      	cmp	r3, #0
   14196:	d1d9      	bne.n	1414c <ll_rx_mem_release+0xb0>
}
   14198:	b003      	add	sp, #12
   1419a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LL_ASSERT(0);
   1419e:	f240 3387 	movw	r3, #903	; 0x387
   141a2:	463a      	mov	r2, r7
   141a4:	4659      	mov	r1, fp
   141a6:	4630      	mov	r0, r6
   141a8:	f009 fecf 	bl	1df4a <printk>
   141ac:	4040      	eors	r0, r0
   141ae:	f380 8811 	msr	BASEPRI, r0
   141b2:	f04f 0003 	mov.w	r0, #3
   141b6:	df02      	svc	2
	while (rx) {
   141b8:	2c00      	cmp	r4, #0
   141ba:	f47f af7c 	bne.w	140b6 <ll_rx_mem_release+0x1a>
   141be:	e7b8      	b.n	14132 <ll_rx_mem_release+0x96>
			conn = ll_conn_get(rx_free->handle);
   141c0:	f8b8 0006 	ldrh.w	r0, [r8, #6]
   141c4:	f001 f852 	bl	1526c <ll_conn_get>
			LL_ASSERT(!conn->lll.link_tx_free);
   141c8:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
			conn = ll_conn_get(rx_free->handle);
   141ca:	4680      	mov	r8, r0
			LL_ASSERT(!conn->lll.link_tx_free);
   141cc:	b163      	cbz	r3, 141e8 <ll_rx_mem_release+0x14c>
   141ce:	4969      	ldr	r1, [pc, #420]	; (14374 <ll_rx_mem_release+0x2d8>)
   141d0:	f240 337a 	movw	r3, #890	; 0x37a
   141d4:	463a      	mov	r2, r7
   141d6:	4630      	mov	r0, r6
   141d8:	f009 feb7 	bl	1df4a <printk>
   141dc:	4040      	eors	r0, r0
   141de:	f380 8811 	msr	BASEPRI, r0
   141e2:	f04f 0003 	mov.w	r0, #3
   141e6:	df02      	svc	2
			link = memq_deinit(&conn->lll.memq_tx.head,
   141e8:	f108 0150 	add.w	r1, r8, #80	; 0x50
   141ec:	f108 004c 	add.w	r0, r8, #76	; 0x4c
   141f0:	f7fb ff3e 	bl	10070 <memq_deinit>
			LL_ASSERT(link);
   141f4:	4681      	mov	r9, r0
   141f6:	2800      	cmp	r0, #0
   141f8:	f000 8083 	beq.w	14302 <ll_rx_mem_release+0x266>
			conn->lll.link_tx_free = link;
   141fc:	f8c8 905c 	str.w	r9, [r8, #92]	; 0x5c
			ll_conn_release(conn);
   14200:	4640      	mov	r0, r8
   14202:	f001 f825 	bl	15250 <ll_conn_release>
	while (rx) {
   14206:	2c00      	cmp	r4, #0
   14208:	f47f af55 	bne.w	140b6 <ll_rx_mem_release+0x1a>
   1420c:	e791      	b.n	14132 <ll_rx_mem_release+0x96>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   1420e:	495a      	ldr	r1, [pc, #360]	; (14378 <ll_rx_mem_release+0x2dc>)
   14210:	f240 3393 	movw	r3, #915	; 0x393
   14214:	463a      	mov	r2, r7
   14216:	4630      	mov	r0, r6
   14218:	f009 fe97 	bl	1df4a <printk>
   1421c:	4040      	eors	r0, r0
   1421e:	f380 8811 	msr	BASEPRI, r0
   14222:	f04f 0003 	mov.w	r0, #3
   14226:	df02      	svc	2
   14228:	782b      	ldrb	r3, [r5, #0]
   1422a:	e77a      	b.n	14122 <ll_rx_mem_release+0x86>
		printk("overflow3");
   1422c:	4853      	ldr	r0, [pc, #332]	; (1437c <ll_rx_mem_release+0x2e0>)
   1422e:	f009 fe8c 	bl	1df4a <printk>
	if (max > mem_link_rx.quota_pdu) {
   14232:	782b      	ldrb	r3, [r5, #0]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   14234:	1e5f      	subs	r7, r3, #1
   14236:	b2ff      	uxtb	r7, r7
   14238:	2b00      	cmp	r3, #0
   1423a:	d0ad      	beq.n	14198 <ll_rx_mem_release+0xfc>
   1423c:	4e50      	ldr	r6, [pc, #320]	; (14380 <ll_rx_mem_release+0x2e4>)
		link = mem_acquire(&mem_link_rx.free);
   1423e:	f8df 8154 	ldr.w	r8, [pc, #340]	; 14394 <ll_rx_mem_release+0x2f8>
   14242:	78f4      	ldrb	r4, [r6, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
   14244:	f8df 9124 	ldr.w	r9, [pc, #292]	; 1436c <ll_rx_mem_release+0x2d0>
	if (last == count) {
   14248:	7872      	ldrb	r2, [r6, #1]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   1424a:	78b3      	ldrb	r3, [r6, #2]
	last = last + 1;
   1424c:	3401      	adds	r4, #1
   1424e:	b2e4      	uxtb	r4, r4
		last = 0U;
   14250:	42a2      	cmp	r2, r4
   14252:	bf08      	it	eq
   14254:	2400      	moveq	r4, #0
	if (last == first) {
   14256:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
   14258:	4640      	mov	r0, r8
   1425a:	d09d      	beq.n	14198 <ll_rx_mem_release+0xfc>
   1425c:	f7fb feae 	bl	ffbc <mem_acquire>
   14260:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   14262:	4648      	mov	r0, r9
		if (!link) {
   14264:	f1ba 0f00 	cmp.w	sl, #0
   14268:	d096      	beq.n	14198 <ll_rx_mem_release+0xfc>
		rx = mem_acquire(&mem_pdu_rx.free);
   1426a:	f7fb fea7 	bl	ffbc <mem_acquire>
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   1426e:	3f01      	subs	r7, #1
   14270:	b2ff      	uxtb	r7, r7
		if (!rx) {
   14272:	2800      	cmp	r0, #0
   14274:	f000 8098 	beq.w	143a8 <ll_rx_mem_release+0x30c>
		rx->link = link;
   14278:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   1427c:	78f1      	ldrb	r1, [r6, #3]
   1427e:	7832      	ldrb	r2, [r6, #0]
	mem_link_rx.quota_pdu += delta;
   14280:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   14282:	fb01 6202 	mla	r2, r1, r2, r6
   14286:	3b01      	subs	r3, #1
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   14288:	2fff      	cmp	r7, #255	; 0xff
   1428a:	6050      	str	r0, [r2, #4]
	mem_link_rx.quota_pdu += delta;
   1428c:	702b      	strb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
   1428e:	70f4      	strb	r4, [r6, #3]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   14290:	d1da      	bne.n	14248 <ll_rx_mem_release+0x1ac>
   14292:	e781      	b.n	14198 <ll_rx_mem_release+0xfc>
				struct ll_scan_set *scan =
   14294:	f8d8 3008 	ldr.w	r3, [r8, #8]
   14298:	f8d3 a000 	ldr.w	sl, [r3]
				conn_lll = scan->lll.conn;
   1429c:	f8da 8024 	ldr.w	r8, [sl, #36]	; 0x24
				LL_ASSERT(conn_lll);
   142a0:	f1b8 0f00 	cmp.w	r8, #0
   142a4:	d049      	beq.n	1433a <ll_rx_mem_release+0x29e>
				LL_ASSERT(!conn_lll->link_tx_free);
   142a6:	f8d8 3040 	ldr.w	r3, [r8, #64]	; 0x40
				scan->lll.conn = NULL;
   142aa:	2200      	movs	r2, #0
   142ac:	f8ca 2024 	str.w	r2, [sl, #36]	; 0x24
				LL_ASSERT(!conn_lll->link_tx_free);
   142b0:	b163      	cbz	r3, 142cc <ll_rx_mem_release+0x230>
   142b2:	4934      	ldr	r1, [pc, #208]	; (14384 <ll_rx_mem_release+0x2e8>)
   142b4:	f240 3313 	movw	r3, #787	; 0x313
   142b8:	463a      	mov	r2, r7
   142ba:	4630      	mov	r0, r6
   142bc:	f009 fe45 	bl	1df4a <printk>
   142c0:	4040      	eors	r0, r0
   142c2:	f380 8811 	msr	BASEPRI, r0
   142c6:	f04f 0003 	mov.w	r0, #3
   142ca:	df02      	svc	2
				link = memq_deinit(&conn_lll->memq_tx.head,
   142cc:	f108 0134 	add.w	r1, r8, #52	; 0x34
   142d0:	f108 0030 	add.w	r0, r8, #48	; 0x30
   142d4:	f7fb fecc 	bl	10070 <memq_deinit>
				LL_ASSERT(link);
   142d8:	4681      	mov	r9, r0
   142da:	b300      	cbz	r0, 1431e <ll_rx_mem_release+0x282>
				ll_conn_release(conn);
   142dc:	f8d8 0000 	ldr.w	r0, [r8]
				conn_lll->link_tx_free = link;
   142e0:	f8c8 9040 	str.w	r9, [r8, #64]	; 0x40
				ll_conn_release(conn);
   142e4:	f000 ffb4 	bl	15250 <ll_conn_release>
				scan->is_enabled = 0U;
   142e8:	f89a 3048 	ldrb.w	r3, [sl, #72]	; 0x48
   142ec:	f36f 0300 	bfc	r3, #0, #1
   142f0:	f88a 3048 	strb.w	r3, [sl, #72]	; 0x48
					ull_filter_adv_scan_state_cb(0);
   142f4:	2000      	movs	r0, #0
   142f6:	f004 fa87 	bl	18808 <ull_filter_adv_scan_state_cb>
	while (rx) {
   142fa:	2c00      	cmp	r4, #0
   142fc:	f47f aedb 	bne.w	140b6 <ll_rx_mem_release+0x1a>
   14300:	e717      	b.n	14132 <ll_rx_mem_release+0x96>
			LL_ASSERT(link);
   14302:	4921      	ldr	r1, [pc, #132]	; (14388 <ll_rx_mem_release+0x2ec>)
   14304:	f240 337d 	movw	r3, #893	; 0x37d
   14308:	463a      	mov	r2, r7
   1430a:	4630      	mov	r0, r6
   1430c:	f009 fe1d 	bl	1df4a <printk>
   14310:	4040      	eors	r0, r0
   14312:	f380 8811 	msr	BASEPRI, r0
   14316:	f04f 0003 	mov.w	r0, #3
   1431a:	df02      	svc	2
   1431c:	e76e      	b.n	141fc <ll_rx_mem_release+0x160>
				LL_ASSERT(link);
   1431e:	491a      	ldr	r1, [pc, #104]	; (14388 <ll_rx_mem_release+0x2ec>)
   14320:	f240 3316 	movw	r3, #790	; 0x316
   14324:	463a      	mov	r2, r7
   14326:	4630      	mov	r0, r6
   14328:	f009 fe0f 	bl	1df4a <printk>
   1432c:	4040      	eors	r0, r0
   1432e:	f380 8811 	msr	BASEPRI, r0
   14332:	f04f 0003 	mov.w	r0, #3
   14336:	df02      	svc	2
   14338:	e7d0      	b.n	142dc <ll_rx_mem_release+0x240>
				LL_ASSERT(conn_lll);
   1433a:	4914      	ldr	r1, [pc, #80]	; (1438c <ll_rx_mem_release+0x2f0>)
   1433c:	f44f 7344 	mov.w	r3, #784	; 0x310
   14340:	463a      	mov	r2, r7
   14342:	4630      	mov	r0, r6
   14344:	f009 fe01 	bl	1df4a <printk>
   14348:	4040      	eors	r0, r0
   1434a:	f380 8811 	msr	BASEPRI, r0
   1434e:	f04f 0003 	mov.w	r0, #3
   14352:	df02      	svc	2
   14354:	e7a7      	b.n	142a6 <ll_rx_mem_release+0x20a>
   14356:	bf00      	nop
   14358:	20002710 	.word	0x20002710
   1435c:	00024258 	.word	0x00024258
   14360:	00023fe4 	.word	0x00023fe4
   14364:	00024364 	.word	0x00024364
   14368:	00024370 	.word	0x00024370
   1436c:	200027c8 	.word	0x200027c8
   14370:	2000028c 	.word	0x2000028c
   14374:	00024394 	.word	0x00024394
   14378:	000242e8 	.word	0x000242e8
   1437c:	000242c8 	.word	0x000242c8
   14380:	200002a0 	.word	0x200002a0
   14384:	0002434c 	.word	0x0002434c
   14388:	00024484 	.word	0x00024484
   1438c:	00024340 	.word	0x00024340
   14390:	00024054 	.word	0x00024054
   14394:	20002714 	.word	0x20002714
		printk("overflow4");
   14398:	4807      	ldr	r0, [pc, #28]	; (143b8 <ll_rx_mem_release+0x31c>)
   1439a:	f009 fdd6 	bl	1df4a <printk>
			mem_release(link, &mem_link_rx.free);
   1439e:	4907      	ldr	r1, [pc, #28]	; (143bc <ll_rx_mem_release+0x320>)
   143a0:	4650      	mov	r0, sl
   143a2:	f7fb fe25 	bl	fff0 <mem_release>
			break;
   143a6:	e744      	b.n	14232 <ll_rx_mem_release+0x196>
			mem_release(link, &mem_link_rx.free);
   143a8:	4904      	ldr	r1, [pc, #16]	; (143bc <ll_rx_mem_release+0x320>)
   143aa:	4650      	mov	r0, sl
}
   143ac:	b003      	add	sp, #12
   143ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mem_release(link, &mem_link_rx.free);
   143b2:	f7fb be1d 	b.w	fff0 <mem_release>
   143b6:	bf00      	nop
   143b8:	000242d4 	.word	0x000242d4
   143bc:	20002714 	.word	0x20002714

000143c0 <ll_rx_link_alloc>:
	return mem_acquire(&mem_link_rx.free);
   143c0:	4801      	ldr	r0, [pc, #4]	; (143c8 <ll_rx_link_alloc+0x8>)
   143c2:	f7fb bdfb 	b.w	ffbc <mem_acquire>
   143c6:	bf00      	nop
   143c8:	20002714 	.word	0x20002714

000143cc <ll_rx_link_release>:
	mem_release(link, &mem_link_rx.free);
   143cc:	4901      	ldr	r1, [pc, #4]	; (143d4 <ll_rx_link_release+0x8>)
   143ce:	f7fb be0f 	b.w	fff0 <mem_release>
   143d2:	bf00      	nop
   143d4:	20002714 	.word	0x20002714

000143d8 <ll_rx_put>:
	rx_hdr->ack_last = mfifo_tx_ack.l;
   143d8:	4b02      	ldr	r3, [pc, #8]	; (143e4 <ll_rx_put+0xc>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   143da:	4a03      	ldr	r2, [pc, #12]	; (143e8 <ll_rx_put+0x10>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
   143dc:	78db      	ldrb	r3, [r3, #3]
   143de:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   143e0:	f7fb be50 	b.w	10084 <memq_enqueue>
   143e4:	20000400 	.word	0x20000400
   143e8:	20003aac 	.word	0x20003aac

000143ec <ll_rx_sched>:
	k_sem_give(sem_recv);
   143ec:	4b01      	ldr	r3, [pc, #4]	; (143f4 <ll_rx_sched+0x8>)
   143ee:	6818      	ldr	r0, [r3, #0]
	z_impl_k_sem_give(sem);
   143f0:	f009 b9be 	b.w	1d770 <z_impl_k_sem_give>
   143f4:	20003ab8 	.word	0x20003ab8

000143f8 <ll_pdu_rx_alloc_peek>:
{
   143f8:	b510      	push	{r4, lr}
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
   143fa:	4b0f      	ldr	r3, [pc, #60]	; (14438 <ll_pdu_rx_alloc_peek+0x40>)
   143fc:	789a      	ldrb	r2, [r3, #2]
   143fe:	78dc      	ldrb	r4, [r3, #3]
	if (last >= first) {
   14400:	42a2      	cmp	r2, r4
   14402:	d808      	bhi.n	14416 <ll_pdu_rx_alloc_peek+0x1e>
		return last - first;
   14404:	1aa1      	subs	r1, r4, r2
   14406:	b2c9      	uxtb	r1, r1
   14408:	4288      	cmp	r0, r1
   1440a:	d80f      	bhi.n	1442c <ll_pdu_rx_alloc_peek+0x34>
	if (first == last) {
   1440c:	42a2      	cmp	r2, r4
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
   1440e:	7819      	ldrb	r1, [r3, #0]
   14410:	d108      	bne.n	14424 <ll_pdu_rx_alloc_peek+0x2c>
		return NULL; /* Queue is empty */
   14412:	2000      	movs	r0, #0
}
   14414:	bd10      	pop	{r4, pc}
		return count - first + last;
   14416:	7859      	ldrb	r1, [r3, #1]
   14418:	1a89      	subs	r1, r1, r2
   1441a:	4421      	add	r1, r4
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
   1441c:	b2c9      	uxtb	r1, r1
   1441e:	4288      	cmp	r0, r1
   14420:	d804      	bhi.n	1442c <ll_pdu_rx_alloc_peek+0x34>
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
   14422:	7819      	ldrb	r1, [r3, #0]
	return *((void **)(fifo + first * size));
   14424:	fb02 3301 	mla	r3, r2, r1, r3
   14428:	6858      	ldr	r0, [r3, #4]
}
   1442a:	bd10      	pop	{r4, pc}
		printk("overflow1");
   1442c:	4803      	ldr	r0, [pc, #12]	; (1443c <ll_pdu_rx_alloc_peek+0x44>)
   1442e:	f009 fd8c 	bl	1df4a <printk>
		return NULL;
   14432:	2000      	movs	r0, #0
}
   14434:	bd10      	pop	{r4, pc}
   14436:	bf00      	nop
   14438:	2000028c 	.word	0x2000028c
   1443c:	000243ac 	.word	0x000243ac

00014440 <ll_pdu_rx_alloc>:
{
   14440:	b410      	push	{r4}
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
   14442:	4b0a      	ldr	r3, [pc, #40]	; (1446c <ll_pdu_rx_alloc+0x2c>)
	uint8_t _first = *first; /* Copy read-index */
   14444:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
   14446:	78da      	ldrb	r2, [r3, #3]
   14448:	7818      	ldrb	r0, [r3, #0]
   1444a:	785c      	ldrb	r4, [r3, #1]
   1444c:	428a      	cmp	r2, r1
   1444e:	d00a      	beq.n	14466 <ll_pdu_rx_alloc+0x26>
	_first += 1U;
   14450:	1c4a      	adds	r2, r1, #1
   14452:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   14454:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
   14458:	4294      	cmp	r4, r2
   1445a:	bf08      	it	eq
   1445c:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   1445e:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   14460:	709a      	strb	r2, [r3, #2]
}
   14462:	bc10      	pop	{r4}
   14464:	4770      	bx	lr
		return NULL;
   14466:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
   14468:	e7fb      	b.n	14462 <ll_pdu_rx_alloc+0x22>
   1446a:	bf00      	nop
   1446c:	2000028c 	.word	0x2000028c

00014470 <ll_tx_ack_put>:
{
   14470:	b570      	push	{r4, r5, r6, lr}
	idx = MFIFO_ENQUEUE_GET(tx_ack, (void **)&tx);
   14472:	4a13      	ldr	r2, [pc, #76]	; (144c0 <ll_tx_ack_put+0x50>)
   14474:	78d6      	ldrb	r6, [r2, #3]
	if (last == count) {
   14476:	7855      	ldrb	r5, [r2, #1]
   14478:	7894      	ldrb	r4, [r2, #2]
	last = last + 1;
   1447a:	1c73      	adds	r3, r6, #1
   1447c:	b2db      	uxtb	r3, r3
		last = 0U;
   1447e:	429d      	cmp	r5, r3
   14480:	bf08      	it	eq
   14482:	2300      	moveq	r3, #0
	if (last == first) {
   14484:	429c      	cmp	r4, r3
   14486:	d00a      	beq.n	1449e <ll_tx_ack_put+0x2e>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   14488:	4615      	mov	r5, r2
   1448a:	f815 4b04 	ldrb.w	r4, [r5], #4
   1448e:	fb14 f406 	smulbb	r4, r4, r6
	LL_ASSERT(tx);
   14492:	192e      	adds	r6, r5, r4
   14494:	d003      	beq.n	1449e <ll_tx_ack_put+0x2e>
	tx->handle = handle;
   14496:	5328      	strh	r0, [r5, r4]
	*last = idx; /* Commit: Update write index */
   14498:	70d3      	strb	r3, [r2, #3]
	tx->node = node_tx;
   1449a:	6071      	str	r1, [r6, #4]
}
   1449c:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(tx);
   1449e:	4a09      	ldr	r2, [pc, #36]	; (144c4 <ll_tx_ack_put+0x54>)
   144a0:	4909      	ldr	r1, [pc, #36]	; (144c8 <ll_tx_ack_put+0x58>)
   144a2:	480a      	ldr	r0, [pc, #40]	; (144cc <ll_tx_ack_put+0x5c>)
   144a4:	f240 33de 	movw	r3, #990	; 0x3de
   144a8:	f009 fd4f 	bl	1df4a <printk>
   144ac:	4040      	eors	r0, r0
   144ae:	f380 8811 	msr	BASEPRI, r0
   144b2:	f04f 0003 	mov.w	r0, #3
   144b6:	df02      	svc	2
	tx->handle = handle;
   144b8:	2300      	movs	r3, #0
   144ba:	801b      	strh	r3, [r3, #0]
   144bc:	deff      	udf	#255	; 0xff
   144be:	bf00      	nop
   144c0:	20000400 	.word	0x20000400
   144c4:	00024258 	.word	0x00024258
   144c8:	00024478 	.word	0x00024478
   144cc:	00023fe4 	.word	0x00023fe4

000144d0 <ull_ticker_status_give>:
	*((uint32_t volatile *)param) = status;
   144d0:	6008      	str	r0, [r1, #0]
   144d2:	4801      	ldr	r0, [pc, #4]	; (144d8 <ull_ticker_status_give+0x8>)
   144d4:	f009 b94c 	b.w	1d770 <z_impl_k_sem_give>
   144d8:	20003abc 	.word	0x20003abc

000144dc <ull_ticker_status_take>:
{
   144dc:	b510      	push	{r4, lr}
   144de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   144e2:	460c      	mov	r4, r1
   144e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	return z_impl_k_sem_take(sem, timeout);
   144e8:	4802      	ldr	r0, [pc, #8]	; (144f4 <ull_ticker_status_take+0x18>)
   144ea:	f009 f967 	bl	1d7bc <z_impl_k_sem_take>
	return *ret_cb;
   144ee:	6820      	ldr	r0, [r4, #0]
}
   144f0:	bd10      	pop	{r4, pc}
   144f2:	bf00      	nop
   144f4:	20003abc 	.word	0x20003abc

000144f8 <ull_disable_mark>:
	if (!*m) {
   144f8:	4a04      	ldr	r2, [pc, #16]	; (1450c <ull_disable_mark+0x14>)
   144fa:	6813      	ldr	r3, [r2, #0]
   144fc:	b10b      	cbz	r3, 14502 <ull_disable_mark+0xa>
}
   144fe:	4618      	mov	r0, r3
   14500:	4770      	bx	lr
		*m = param;
   14502:	4603      	mov	r3, r0
   14504:	6010      	str	r0, [r2, #0]
}
   14506:	4618      	mov	r0, r3
   14508:	4770      	bx	lr
   1450a:	bf00      	nop
   1450c:	2000264c 	.word	0x2000264c

00014510 <ull_disable_unmark>:
	if (*m && *m == param) {
   14510:	4a04      	ldr	r2, [pc, #16]	; (14524 <ull_disable_unmark+0x14>)
   14512:	6813      	ldr	r3, [r2, #0]
   14514:	b123      	cbz	r3, 14520 <ull_disable_unmark+0x10>
   14516:	4298      	cmp	r0, r3
		*m = NULL;
   14518:	bf06      	itte	eq
   1451a:	2100      	moveq	r1, #0
   1451c:	6011      	streq	r1, [r2, #0]
	return NULL;
   1451e:	2300      	movne	r3, #0
}
   14520:	4618      	mov	r0, r3
   14522:	4770      	bx	lr
   14524:	2000264c 	.word	0x2000264c

00014528 <ull_disable_mark_get>:
	return mark_get(mark_disable);
   14528:	4b01      	ldr	r3, [pc, #4]	; (14530 <ull_disable_mark_get+0x8>)
}
   1452a:	6818      	ldr	r0, [r3, #0]
   1452c:	4770      	bx	lr
   1452e:	bf00      	nop
   14530:	2000264c 	.word	0x2000264c

00014534 <ull_update_mark>:
	if (!*m) {
   14534:	4a04      	ldr	r2, [pc, #16]	; (14548 <ull_update_mark+0x14>)
   14536:	6813      	ldr	r3, [r2, #0]
   14538:	b10b      	cbz	r3, 1453e <ull_update_mark+0xa>
}
   1453a:	4618      	mov	r0, r3
   1453c:	4770      	bx	lr
		*m = param;
   1453e:	4603      	mov	r3, r0
   14540:	6010      	str	r0, [r2, #0]
}
   14542:	4618      	mov	r0, r3
   14544:	4770      	bx	lr
   14546:	bf00      	nop
   14548:	20002650 	.word	0x20002650

0001454c <ull_update_unmark>:
	if (*m && *m == param) {
   1454c:	4a04      	ldr	r2, [pc, #16]	; (14560 <ull_update_unmark+0x14>)
   1454e:	6813      	ldr	r3, [r2, #0]
   14550:	b123      	cbz	r3, 1455c <ull_update_unmark+0x10>
   14552:	4298      	cmp	r0, r3
		*m = NULL;
   14554:	bf06      	itte	eq
   14556:	2100      	moveq	r1, #0
   14558:	6011      	streq	r1, [r2, #0]
	return NULL;
   1455a:	2300      	movne	r3, #0
}
   1455c:	4618      	mov	r0, r3
   1455e:	4770      	bx	lr
   14560:	20002650 	.word	0x20002650

00014564 <ull_update_mark_get>:
	return mark_get(mark_update);
   14564:	4b01      	ldr	r3, [pc, #4]	; (1456c <ull_update_mark_get+0x8>)
}
   14566:	6818      	ldr	r0, [r3, #0]
   14568:	4770      	bx	lr
   1456a:	bf00      	nop
   1456c:	20002650 	.word	0x20002650

00014570 <ull_disable>:
{
   14570:	b530      	push	{r4, r5, lr}
	hdr = HDR_ULL(((struct lll_hdr *)lll)->parent);
   14572:	6805      	ldr	r5, [r0, #0]
	if (!hdr) {
   14574:	f115 0f10 	cmn.w	r5, #16
{
   14578:	b087      	sub	sp, #28
	if (!hdr) {
   1457a:	d00b      	beq.n	14594 <ull_disable+0x24>
	compiler_barrier();
   1457c:	4604      	mov	r4, r0
	return z_impl_k_sem_init(sem, initial_count, limit);
   1457e:	2201      	movs	r2, #1
   14580:	4668      	mov	r0, sp
   14582:	2100      	movs	r1, #0
   14584:	f00e fd31 	bl	22fea <z_impl_k_sem_init>
	if (!hdr->ref) {
   14588:	7c2b      	ldrb	r3, [r5, #16]
	hdr->disabled_cb = disabled_cb;
   1458a:	4a13      	ldr	r2, [pc, #76]	; (145d8 <ull_disable+0x68>)
	hdr->disabled_param = &sem;
   1458c:	f8c5 d018 	str.w	sp, [r5, #24]
	hdr->disabled_cb = disabled_cb;
   14590:	616a      	str	r2, [r5, #20]
	if (!hdr->ref) {
   14592:	b913      	cbnz	r3, 1459a <ull_disable+0x2a>
		return ULL_STATUS_SUCCESS;
   14594:	2000      	movs	r0, #0
}
   14596:	b007      	add	sp, #28
   14598:	bd30      	pop	{r4, r5, pc}
	mfy.param = lll;
   1459a:	4b10      	ldr	r3, [pc, #64]	; (145dc <ull_disable+0x6c>)
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   1459c:	2200      	movs	r2, #0
   1459e:	4611      	mov	r1, r2
   145a0:	2003      	movs	r0, #3
	mfy.param = lll;
   145a2:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   145a4:	f7fb fde2 	bl	1016c <mayfly_enqueue>
	LL_ASSERT(!ret);
   145a8:	b940      	cbnz	r0, 145bc <ull_disable+0x4c>
	return z_impl_k_sem_take(sem, timeout);
   145aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   145ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   145b2:	4668      	mov	r0, sp
   145b4:	f009 f902 	bl	1d7bc <z_impl_k_sem_take>
}
   145b8:	b007      	add	sp, #28
   145ba:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!ret);
   145bc:	4a08      	ldr	r2, [pc, #32]	; (145e0 <ull_disable+0x70>)
   145be:	4909      	ldr	r1, [pc, #36]	; (145e4 <ull_disable+0x74>)
   145c0:	4809      	ldr	r0, [pc, #36]	; (145e8 <ull_disable+0x78>)
   145c2:	f240 4349 	movw	r3, #1097	; 0x449
   145c6:	f009 fcc0 	bl	1df4a <printk>
   145ca:	4040      	eors	r0, r0
   145cc:	f380 8811 	msr	BASEPRI, r0
   145d0:	f04f 0003 	mov.w	r0, #3
   145d4:	df02      	svc	2
   145d6:	e7e8      	b.n	145aa <ull_disable+0x3a>
   145d8:	00013369 	.word	0x00013369
   145dc:	2000046c 	.word	0x2000046c
   145e0:	00024258 	.word	0x00024258
   145e4:	000242a0 	.word	0x000242a0
   145e8:	00023fe4 	.word	0x00023fe4

000145ec <ull_pdu_rx_alloc_peek>:
{
   145ec:	b410      	push	{r4}
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
   145ee:	4b0d      	ldr	r3, [pc, #52]	; (14624 <ull_pdu_rx_alloc_peek+0x38>)
   145f0:	789a      	ldrb	r2, [r3, #2]
   145f2:	78dc      	ldrb	r4, [r3, #3]
	if (last >= first) {
   145f4:	42a2      	cmp	r2, r4
   145f6:	d809      	bhi.n	1460c <ull_pdu_rx_alloc_peek+0x20>
		return last - first;
   145f8:	1aa1      	subs	r1, r4, r2
   145fa:	b2c9      	uxtb	r1, r1
   145fc:	4288      	cmp	r0, r1
   145fe:	d802      	bhi.n	14606 <ull_pdu_rx_alloc_peek+0x1a>
	if (first == last) {
   14600:	42a2      	cmp	r2, r4
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
   14602:	7819      	ldrb	r1, [r3, #0]
   14604:	d109      	bne.n	1461a <ull_pdu_rx_alloc_peek+0x2e>
		return NULL;
   14606:	2000      	movs	r0, #0
}
   14608:	bc10      	pop	{r4}
   1460a:	4770      	bx	lr
		return count - first + last;
   1460c:	7859      	ldrb	r1, [r3, #1]
   1460e:	1a89      	subs	r1, r1, r2
   14610:	4421      	add	r1, r4
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
   14612:	b2c9      	uxtb	r1, r1
   14614:	4288      	cmp	r0, r1
   14616:	d8f6      	bhi.n	14606 <ull_pdu_rx_alloc_peek+0x1a>
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
   14618:	7819      	ldrb	r1, [r3, #0]
}
   1461a:	bc10      	pop	{r4}
	return *((void **)(fifo + first * size));
   1461c:	fb02 3301 	mla	r3, r2, r1, r3
   14620:	6858      	ldr	r0, [r3, #4]
   14622:	4770      	bx	lr
   14624:	200002a0 	.word	0x200002a0

00014628 <ull_pdu_rx_alloc>:
{
   14628:	b410      	push	{r4}
	return MFIFO_DEQUEUE(pdu_rx_free);
   1462a:	4b0a      	ldr	r3, [pc, #40]	; (14654 <ull_pdu_rx_alloc+0x2c>)
	uint8_t _first = *first; /* Copy read-index */
   1462c:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
   1462e:	78da      	ldrb	r2, [r3, #3]
   14630:	7818      	ldrb	r0, [r3, #0]
   14632:	785c      	ldrb	r4, [r3, #1]
   14634:	428a      	cmp	r2, r1
   14636:	d00a      	beq.n	1464e <ull_pdu_rx_alloc+0x26>
	_first += 1U;
   14638:	1c4a      	adds	r2, r1, #1
   1463a:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   1463c:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
   14640:	4294      	cmp	r4, r2
   14642:	bf08      	it	eq
   14644:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   14646:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   14648:	709a      	strb	r2, [r3, #2]
}
   1464a:	bc10      	pop	{r4}
   1464c:	4770      	bx	lr
		return NULL;
   1464e:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE(pdu_rx_free);
   14650:	e7fb      	b.n	1464a <ull_pdu_rx_alloc+0x22>
   14652:	bf00      	nop
   14654:	200002a0 	.word	0x200002a0

00014658 <ull_rx_put>:
{
   14658:	b538      	push	{r3, r4, r5, lr}
   1465a:	460c      	mov	r4, r1
   1465c:	4605      	mov	r5, r0
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   1465e:	f002 ffab 	bl	175b8 <ull_conn_ack_last_idx_get>
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   14662:	4621      	mov	r1, r4
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   14664:	7020      	strb	r0, [r4, #0]
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   14666:	4a03      	ldr	r2, [pc, #12]	; (14674 <ull_rx_put+0x1c>)
   14668:	4628      	mov	r0, r5
}
   1466a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   1466e:	f7fb bd09 	b.w	10084 <memq_enqueue>
   14672:	bf00      	nop
   14674:	20003ab4 	.word	0x20003ab4

00014678 <ull_rx_sched>:
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
   14678:	2201      	movs	r2, #1
   1467a:	4b02      	ldr	r3, [pc, #8]	; (14684 <ull_rx_sched+0xc>)
   1467c:	4611      	mov	r1, r2
   1467e:	2000      	movs	r0, #0
   14680:	f7fb bd74 	b.w	1016c <mayfly_enqueue>
   14684:	2000047c 	.word	0x2000047c

00014688 <ull_prepare_enqueue>:
{
   14688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   1468c:	4e19      	ldr	r6, [pc, #100]	; (146f4 <ull_prepare_enqueue+0x6c>)
{
   1468e:	f89d a024 	ldrb.w	sl, [sp, #36]	; 0x24
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   14692:	78f4      	ldrb	r4, [r6, #3]
	if (last == count) {
   14694:	7877      	ldrb	r7, [r6, #1]
   14696:	f896 c002 	ldrb.w	ip, [r6, #2]
	last = last + 1;
   1469a:	1c65      	adds	r5, r4, #1
   1469c:	b2ed      	uxtb	r5, r5
		last = 0U;
   1469e:	42af      	cmp	r7, r5
   146a0:	bf08      	it	eq
   146a2:	2500      	moveq	r5, #0
	if (last == first) {
   146a4:	45ac      	cmp	ip, r5
   146a6:	d021      	beq.n	146ec <ull_prepare_enqueue+0x64>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   146a8:	4699      	mov	r9, r3
   146aa:	4633      	mov	r3, r6
   146ac:	460f      	mov	r7, r1
   146ae:	4611      	mov	r1, r2
   146b0:	f813 2b04 	ldrb.w	r2, [r3], #4
   146b4:	fb02 3404 	mla	r4, r2, r4, r3
	if (!e) {
   146b8:	b1c4      	cbz	r4, 146ec <ull_prepare_enqueue+0x64>
   146ba:	4680      	mov	r8, r0
	memcpy(&e->prepare_param, prepare_param, sizeof(e->prepare_param));
   146bc:	2210      	movs	r2, #16
   146be:	4620      	mov	r0, r4
   146c0:	f00b fbd5 	bl	1fe6e <memcpy>
	e->is_resume = is_resume;
   146c4:	f894 2020 	ldrb.w	r2, [r4, #32]
	e->prepare_cb = prepare_cb;
   146c8:	f8c4 9010 	str.w	r9, [r4, #16]
	e->is_resume = is_resume;
   146cc:	f00a 0a01 	and.w	sl, sl, #1
   146d0:	f022 0303 	bic.w	r3, r2, #3
   146d4:	ea43 030a 	orr.w	r3, r3, sl
	e->prio = prio;
   146d8:	9a08      	ldr	r2, [sp, #32]
   146da:	61e2      	str	r2, [r4, #28]
	e->abort_cb = abort_cb;
   146dc:	e9c4 8705 	strd	r8, r7, [r4, #20]
	*last = idx; /* Commit: Update write index */
   146e0:	70f5      	strb	r5, [r6, #3]
	e->is_resume = is_resume;
   146e2:	f884 3020 	strb.w	r3, [r4, #32]
	return 0;
   146e6:	2000      	movs	r0, #0
}
   146e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENOBUFS;
   146ec:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
   146f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   146f4:	200002dc 	.word	0x200002dc

000146f8 <ull_prepare_dequeue_get>:
	return MFIFO_DEQUEUE_GET(prep);
   146f8:	4b05      	ldr	r3, [pc, #20]	; (14710 <ull_prepare_dequeue_get+0x18>)
   146fa:	789a      	ldrb	r2, [r3, #2]
	if (first == last) {
   146fc:	78d9      	ldrb	r1, [r3, #3]
   146fe:	7818      	ldrb	r0, [r3, #0]
   14700:	4291      	cmp	r1, r2
	return (void *)(fifo + first * size);
   14702:	bf1a      	itte	ne
   14704:	3304      	addne	r3, #4
   14706:	fb02 3000 	mlane	r0, r2, r0, r3
		return NULL;
   1470a:	2000      	moveq	r0, #0
}
   1470c:	4770      	bx	lr
   1470e:	bf00      	nop
   14710:	200002dc 	.word	0x200002dc

00014714 <ull_prepare_dequeue_iter>:
{
   14714:	b430      	push	{r4, r5}
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   14716:	4b0c      	ldr	r3, [pc, #48]	; (14748 <ull_prepare_dequeue_iter+0x34>)
	if (*idx >= count) {
   14718:	7802      	ldrb	r2, [r0, #0]
   1471a:	785c      	ldrb	r4, [r3, #1]
   1471c:	78dd      	ldrb	r5, [r3, #3]
   1471e:	7819      	ldrb	r1, [r3, #0]
   14720:	4294      	cmp	r4, r2
   14722:	bf9c      	itt	ls
   14724:	789a      	ldrbls	r2, [r3, #2]
		*idx = first;
   14726:	7002      	strbls	r2, [r0, #0]
	if (*idx == last) {
   14728:	4295      	cmp	r5, r2
   1472a:	d00a      	beq.n	14742 <ull_prepare_dequeue_iter+0x2e>
	i = *idx + 1;
   1472c:	1c53      	adds	r3, r2, #1
	p = (void *)(fifo + (*idx) * size);
   1472e:	4d07      	ldr	r5, [pc, #28]	; (1474c <ull_prepare_dequeue_iter+0x38>)
	i = *idx + 1;
   14730:	b2db      	uxtb	r3, r3
		i = 0U;
   14732:	429c      	cmp	r4, r3
   14734:	bf08      	it	eq
   14736:	2300      	moveq	r3, #0
	*idx = i;
   14738:	7003      	strb	r3, [r0, #0]
	p = (void *)(fifo + (*idx) * size);
   1473a:	fb02 5001 	mla	r0, r2, r1, r5
}
   1473e:	bc30      	pop	{r4, r5}
   14740:	4770      	bx	lr
		return NULL;
   14742:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   14744:	e7fb      	b.n	1473e <ull_prepare_dequeue_iter+0x2a>
   14746:	bf00      	nop
   14748:	200002dc 	.word	0x200002dc
   1474c:	200002e0 	.word	0x200002e0

00014750 <ull_event_done_extra_get>:
	evdone = MFIFO_DEQUEUE_PEEK(done);
   14750:	4b06      	ldr	r3, [pc, #24]	; (1476c <ull_event_done_extra_get+0x1c>)
   14752:	7899      	ldrb	r1, [r3, #2]
	if (first == last) {
   14754:	78d8      	ldrb	r0, [r3, #3]
   14756:	781a      	ldrb	r2, [r3, #0]
   14758:	4288      	cmp	r0, r1
   1475a:	d005      	beq.n	14768 <ull_event_done_extra_get+0x18>
	return *((void **)(fifo + first * size));
   1475c:	fb01 3302 	mla	r3, r1, r2, r3
   14760:	6858      	ldr	r0, [r3, #4]
	if (!evdone) {
   14762:	b110      	cbz	r0, 1476a <ull_event_done_extra_get+0x1a>
	return &evdone->extra;
   14764:	3020      	adds	r0, #32
   14766:	4770      	bx	lr
		return NULL;
   14768:	2000      	movs	r0, #0
}
   1476a:	4770      	bx	lr
   1476c:	20000278 	.word	0x20000278

00014770 <ull_event_done>:
{
   14770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	evdone = MFIFO_DEQUEUE(done);
   14772:	4a14      	ldr	r2, [pc, #80]	; (147c4 <ull_event_done+0x54>)
	uint8_t _first = *first; /* Copy read-index */
   14774:	7893      	ldrb	r3, [r2, #2]
	if (_first == last) {
   14776:	78d4      	ldrb	r4, [r2, #3]
   14778:	7811      	ldrb	r1, [r2, #0]
   1477a:	7855      	ldrb	r5, [r2, #1]
   1477c:	429c      	cmp	r4, r3
   1477e:	d01f      	beq.n	147c0 <ull_event_done+0x50>
	mem = *((void **)(fifo + _first * size));
   14780:	fb03 2101 	mla	r1, r3, r1, r2
	_first += 1U;
   14784:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
   14786:	684c      	ldr	r4, [r1, #4]
	_first += 1U;
   14788:	b2db      	uxtb	r3, r3
		_first = 0U;
   1478a:	429d      	cmp	r5, r3
   1478c:	bf08      	it	eq
   1478e:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   14790:	7093      	strb	r3, [r2, #2]
	if (!evdone) {
   14792:	b19c      	cbz	r4, 147bc <ull_event_done+0x4c>
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
   14794:	2501      	movs	r5, #1
	evdone->hdr.link = NULL;
   14796:	2600      	movs	r6, #0
	link = evdone->hdr.link;
   14798:	6827      	ldr	r7, [r4, #0]
	evdone->param = param;
   1479a:	61e0      	str	r0, [r4, #28]
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
   1479c:	7125      	strb	r5, [r4, #4]
	evdone->hdr.link = NULL;
   1479e:	6026      	str	r6, [r4, #0]
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   147a0:	f002 ff0a 	bl	175b8 <ull_conn_ack_last_idx_get>
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   147a4:	4a08      	ldr	r2, [pc, #32]	; (147c8 <ull_event_done+0x58>)
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   147a6:	7020      	strb	r0, [r4, #0]
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   147a8:	4621      	mov	r1, r4
   147aa:	4638      	mov	r0, r7
   147ac:	f7fb fc6a 	bl	10084 <memq_enqueue>
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
   147b0:	4b06      	ldr	r3, [pc, #24]	; (147cc <ull_event_done+0x5c>)
   147b2:	4630      	mov	r0, r6
   147b4:	462a      	mov	r2, r5
   147b6:	4629      	mov	r1, r5
   147b8:	f7fb fcd8 	bl	1016c <mayfly_enqueue>
}
   147bc:	4620      	mov	r0, r4
   147be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return NULL;
   147c0:	2400      	movs	r4, #0
   147c2:	e7fb      	b.n	147bc <ull_event_done+0x4c>
   147c4:	20000278 	.word	0x20000278
   147c8:	20003ab4 	.word	0x20003ab4
   147cc:	2000047c 	.word	0x2000047c

000147d0 <ticker_cb>:
	return 0;
}

static void ticker_cb(uint32_t ticks_at_expire, uint32_t remainder, uint16_t lazy,
		      void *param)
{
   147d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	static int cnt = 0;
	cnt ++;
   147d4:	f8df c090 	ldr.w	ip, [pc, #144]	; 14868 <ticker_cb+0x98>
{
   147d8:	461c      	mov	r4, r3
	return ++hdr->ref;
   147da:	7c1b      	ldrb	r3, [r3, #16]
	cnt ++;
   147dc:	f8dc 5000 	ldr.w	r5, [ip]
   147e0:	3301      	adds	r3, #1
   147e2:	b2db      	uxtb	r3, r3
   147e4:	3501      	adds	r5, #1
{
   147e6:	4680      	mov	r8, r0
   147e8:	460f      	mov	r7, r1
   147ea:	4616      	mov	r6, r2
   147ec:	7423      	strb	r3, [r4, #16]
	cnt ++;
   147ee:	f8cc 5000 	str.w	r5, [ip]

	DEBUG_RADIO_PREPARE_O(1);

	/* Increment prepare reference count */
	ref = ull_ref_inc(&scan->ull);
	LL_ASSERT(ref);
   147f2:	b183      	cbz	r3, 14816 <ticker_cb+0x46>

	/* Append timing parameters */
	p.ticks_at_expire = ticks_at_expire;
   147f4:	4d16      	ldr	r5, [pc, #88]	; (14850 <ticker_cb+0x80>)
	p.remainder = remainder;
	p.lazy = lazy;
	p.param = &scan->lll;
	mfy.param = &p;
   147f6:	4b17      	ldr	r3, [pc, #92]	; (14854 <ticker_cb+0x84>)
	p.ticks_at_expire = ticks_at_expire;
   147f8:	f8c5 8000 	str.w	r8, [r5]

	/* Kick LLL prepare */
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   147fc:	2200      	movs	r2, #0
	p.param = &scan->lll;
   147fe:	341c      	adds	r4, #28
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   14800:	4611      	mov	r1, r2
   14802:	2001      	movs	r0, #1
	mfy.param = &p;
   14804:	609d      	str	r5, [r3, #8]
	p.param = &scan->lll;
   14806:	60ec      	str	r4, [r5, #12]
	p.remainder = remainder;
   14808:	606f      	str	r7, [r5, #4]
	p.lazy = lazy;
   1480a:	812e      	strh	r6, [r5, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1480c:	f7fb fcae 	bl	1016c <mayfly_enqueue>
			     0, &mfy);
	LL_ASSERT(!ret);
   14810:	b978      	cbnz	r0, 14832 <ticker_cb+0x62>

	DEBUG_RADIO_PREPARE_O(1);
}
   14812:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LL_ASSERT(ref);
   14816:	4a10      	ldr	r2, [pc, #64]	; (14858 <ticker_cb+0x88>)
   14818:	4910      	ldr	r1, [pc, #64]	; (1485c <ticker_cb+0x8c>)
   1481a:	4811      	ldr	r0, [pc, #68]	; (14860 <ticker_cb+0x90>)
   1481c:	f44f 73f6 	mov.w	r3, #492	; 0x1ec
   14820:	f009 fb93 	bl	1df4a <printk>
   14824:	4040      	eors	r0, r0
   14826:	f380 8811 	msr	BASEPRI, r0
   1482a:	f04f 0003 	mov.w	r0, #3
   1482e:	df02      	svc	2
   14830:	e7e0      	b.n	147f4 <ticker_cb+0x24>
	LL_ASSERT(!ret);
   14832:	4a09      	ldr	r2, [pc, #36]	; (14858 <ticker_cb+0x88>)
   14834:	490b      	ldr	r1, [pc, #44]	; (14864 <ticker_cb+0x94>)
   14836:	480a      	ldr	r0, [pc, #40]	; (14860 <ticker_cb+0x90>)
   14838:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
   1483c:	f009 fb85 	bl	1df4a <printk>
   14840:	4040      	eors	r0, r0
   14842:	f380 8811 	msr	BASEPRI, r0
   14846:	f04f 0003 	mov.w	r0, #3
   1484a:	df02      	svc	2
}
   1484c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14850:	20003ed8 	.word	0x20003ed8
   14854:	2000049c 	.word	0x2000049c
   14858:	000243c4 	.word	0x000243c4
   1485c:	00024404 	.word	0x00024404
   14860:	00023fe4 	.word	0x00023fe4
   14864:	000242a0 	.word	0x000242a0
   14868:	20003e80 	.word	0x20003e80

0001486c <ull_scan_init>:
}
   1486c:	2000      	movs	r0, #0
   1486e:	4770      	bx	lr

00014870 <ull_scan_disable>:
{
   14870:	b530      	push	{r4, r5, lr}
   14872:	b085      	sub	sp, #20
	volatile uint32_t ret_cb = TICKER_STATUS_BUSY;
   14874:	2302      	movs	r3, #2
{
   14876:	4605      	mov	r5, r0
	mark = ull_disable_mark(scan);
   14878:	4608      	mov	r0, r1
{
   1487a:	460c      	mov	r4, r1
	volatile uint32_t ret_cb = TICKER_STATUS_BUSY;
   1487c:	9303      	str	r3, [sp, #12]
	mark = ull_disable_mark(scan);
   1487e:	f7ff fe3b 	bl	144f8 <ull_disable_mark>
	LL_ASSERT(mark == scan);
   14882:	4284      	cmp	r4, r0
   14884:	d00c      	beq.n	148a0 <ull_scan_disable+0x30>
   14886:	4a2e      	ldr	r2, [pc, #184]	; (14940 <ull_scan_disable+0xd0>)
   14888:	492e      	ldr	r1, [pc, #184]	; (14944 <ull_scan_disable+0xd4>)
   1488a:	482f      	ldr	r0, [pc, #188]	; (14948 <ull_scan_disable+0xd8>)
   1488c:	f240 1375 	movw	r3, #373	; 0x175
   14890:	f009 fb5b 	bl	1df4a <printk>
   14894:	4040      	eors	r0, r0
   14896:	f380 8811 	msr	BASEPRI, r0
   1489a:	f04f 0003 	mov.w	r0, #3
   1489e:	df02      	svc	2
			  TICKER_ID_SCAN_BASE + handle,
   148a0:	1caa      	adds	r2, r5, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   148a2:	ad03      	add	r5, sp, #12
   148a4:	2103      	movs	r1, #3
   148a6:	4b29      	ldr	r3, [pc, #164]	; (1494c <ull_scan_disable+0xdc>)
   148a8:	9500      	str	r5, [sp, #0]
   148aa:	b2d2      	uxtb	r2, r2
   148ac:	2000      	movs	r0, #0
   148ae:	f7fd f855 	bl	1195c <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   148b2:	4629      	mov	r1, r5
   148b4:	f7ff fe12 	bl	144dc <ull_ticker_status_take>
	if (ret) {
   148b8:	bb50      	cbnz	r0, 14910 <ull_scan_disable+0xa0>
	ret = ull_disable(&scan->lll);
   148ba:	f104 001c 	add.w	r0, r4, #28
   148be:	f7ff fe57 	bl	14570 <ull_disable>
	LL_ASSERT(!ret);
   148c2:	b9b8      	cbnz	r0, 148f4 <ull_scan_disable+0x84>
	mark = ull_disable_unmark(scan);
   148c4:	4620      	mov	r0, r4
   148c6:	f7ff fe23 	bl	14510 <ull_disable_unmark>
	LL_ASSERT(mark == scan);
   148ca:	4284      	cmp	r4, r0
   148cc:	d00f      	beq.n	148ee <ull_scan_disable+0x7e>
   148ce:	4a1c      	ldr	r2, [pc, #112]	; (14940 <ull_scan_disable+0xd0>)
   148d0:	491c      	ldr	r1, [pc, #112]	; (14944 <ull_scan_disable+0xd4>)
   148d2:	481d      	ldr	r0, [pc, #116]	; (14948 <ull_scan_disable+0xd8>)
   148d4:	f240 1387 	movw	r3, #391	; 0x187
   148d8:	f009 fb37 	bl	1df4a <printk>
   148dc:	4040      	eors	r0, r0
   148de:	f380 8811 	msr	BASEPRI, r0
   148e2:	f04f 0003 	mov.w	r0, #3
   148e6:	df02      	svc	2
	return 0;
   148e8:	2000      	movs	r0, #0
}
   148ea:	b005      	add	sp, #20
   148ec:	bd30      	pop	{r4, r5, pc}
	return 0;
   148ee:	2000      	movs	r0, #0
}
   148f0:	b005      	add	sp, #20
   148f2:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!ret);
   148f4:	4a12      	ldr	r2, [pc, #72]	; (14940 <ull_scan_disable+0xd0>)
   148f6:	4916      	ldr	r1, [pc, #88]	; (14950 <ull_scan_disable+0xe0>)
   148f8:	4813      	ldr	r0, [pc, #76]	; (14948 <ull_scan_disable+0xd8>)
   148fa:	f44f 73c2 	mov.w	r3, #388	; 0x184
   148fe:	f009 fb24 	bl	1df4a <printk>
   14902:	4040      	eors	r0, r0
   14904:	f380 8811 	msr	BASEPRI, r0
   14908:	f04f 0003 	mov.w	r0, #3
   1490c:	df02      	svc	2
   1490e:	e7d9      	b.n	148c4 <ull_scan_disable+0x54>
		mark = ull_disable_unmark(scan);
   14910:	4620      	mov	r0, r4
   14912:	f7ff fdfd 	bl	14510 <ull_disable_unmark>
		LL_ASSERT(mark == scan);
   14916:	4284      	cmp	r4, r0
   14918:	d00f      	beq.n	1493a <ull_scan_disable+0xca>
   1491a:	4a09      	ldr	r2, [pc, #36]	; (14940 <ull_scan_disable+0xd0>)
   1491c:	4909      	ldr	r1, [pc, #36]	; (14944 <ull_scan_disable+0xd4>)
   1491e:	480a      	ldr	r0, [pc, #40]	; (14948 <ull_scan_disable+0xd8>)
   14920:	f44f 73bf 	mov.w	r3, #382	; 0x17e
   14924:	f009 fb11 	bl	1df4a <printk>
   14928:	4040      	eors	r0, r0
   1492a:	f380 8811 	msr	BASEPRI, r0
   1492e:	f04f 0003 	mov.w	r0, #3
   14932:	df02      	svc	2
		return BT_HCI_ERR_CMD_DISALLOWED;
   14934:	200c      	movs	r0, #12
}
   14936:	b005      	add	sp, #20
   14938:	bd30      	pop	{r4, r5, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1493a:	200c      	movs	r0, #12
}
   1493c:	b005      	add	sp, #20
   1493e:	bd30      	pop	{r4, r5, pc}
   14940:	000243c4 	.word	0x000243c4
   14944:	00024408 	.word	0x00024408
   14948:	00023fe4 	.word	0x00023fe4
   1494c:	000144d1 	.word	0x000144d1
   14950:	000242a0 	.word	0x000242a0

00014954 <disable.constprop.0>:

static uint8_t disable(uint8_t handle)
   14954:	b538      	push	{r3, r4, r5, lr}
	if (!scan || !scan->is_enabled) {
   14956:	4c0d      	ldr	r4, [pc, #52]	; (1498c <disable.constprop.0+0x38>)
   14958:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
   1495c:	07db      	lsls	r3, r3, #31
   1495e:	d501      	bpl.n	14964 <disable.constprop.0+0x10>
	if (!scan) {
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

#if defined(CONFIG_BT_CENTRAL)
	if (scan->lll.conn) {
   14960:	6a60      	ldr	r0, [r4, #36]	; 0x24
   14962:	b110      	cbz	r0, 1496a <disable.constprop.0+0x16>
		return BT_HCI_ERR_CMD_DISALLOWED;
   14964:	250c      	movs	r5, #12
		ull_filter_adv_scan_state_cb(0);
	}
#endif

	return 0;
}
   14966:	4628      	mov	r0, r5
   14968:	bd38      	pop	{r3, r4, r5, pc}
	ret = ull_scan_disable(handle, scan);
   1496a:	4621      	mov	r1, r4
   1496c:	f7ff ff80 	bl	14870 <ull_scan_disable>
	if (ret) {
   14970:	4605      	mov	r5, r0
   14972:	2800      	cmp	r0, #0
   14974:	d1f7      	bne.n	14966 <disable.constprop.0+0x12>
	scan->is_enabled = 0U;
   14976:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
   1497a:	f360 0300 	bfi	r3, r0, #0, #1
   1497e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
		ull_filter_adv_scan_state_cb(0);
   14982:	f003 ff41 	bl	18808 <ull_filter_adv_scan_state_cb>
}
   14986:	4628      	mov	r0, r5
   14988:	bd38      	pop	{r3, r4, r5, pc}
   1498a:	bf00      	nop
   1498c:	20003e8c 	.word	0x20003e8c

00014990 <ll_scan_enable>:
	if (!enable) {
   14990:	b380      	cbz	r0, 149f4 <ll_scan_enable+0x64>
{
   14992:	b538      	push	{r3, r4, r5, lr}
	if (!scan || scan->is_enabled) {
   14994:	4c1f      	ldr	r4, [pc, #124]	; (14a14 <ll_scan_enable+0x84>)
   14996:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
   1499a:	f013 0101 	ands.w	r1, r3, #1
   1499e:	d135      	bne.n	14a0c <ll_scan_enable+0x7c>
	    (scan->own_addr_type & 0x1)) {
   149a0:	f3c3 0541 	ubfx	r5, r3, #1, #2
	if ((IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT) && is_coded_phy &&
   149a4:	079b      	lsls	r3, r3, #30
   149a6:	d50a      	bpl.n	149be <ll_scan_enable+0x2e>
		if (!mem_nz(ll_addr_get(1, NULL), BDADDR_SIZE)) {
   149a8:	2001      	movs	r0, #1
   149aa:	f7fd f81f 	bl	119ec <ll_addr_get>
   149ae:	2106      	movs	r1, #6
   149b0:	f7fb fb4e 	bl	10050 <mem_nz>
   149b4:	b360      	cbz	r0, 14a10 <ll_scan_enable+0x80>
   149b6:	f894 5048 	ldrb.w	r5, [r4, #72]	; 0x48
   149ba:	f3c5 0541 	ubfx	r5, r5, #1, #2
	ull_filter_scan_update(lll->filter_policy);
   149be:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
   149c2:	f3c0 00c1 	ubfx	r0, r0, #3, #2
   149c6:	f003 ff41 	bl	1884c <ull_filter_scan_update>
	lll->rpa_gen = 0;
   149ca:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
	if ((lll->type & 0x1) &&
   149ce:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
	lll->rpa_gen = 0;
   149d2:	f36f 0300 	bfc	r3, #0, #1
	lll->rl_idx = FILTER_IDX_NONE;
   149d6:	21ff      	movs	r1, #255	; 0xff
	lll->rpa_gen = 0;
   149d8:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	if ((lll->type & 0x1) &&
   149dc:	09d3      	lsrs	r3, r2, #7
	lll->rl_idx = FILTER_IDX_NONE;
   149de:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
	if ((lll->type & 0x1) &&
   149e2:	d002      	beq.n	149ea <ll_scan_enable+0x5a>
   149e4:	3d02      	subs	r5, #2
   149e6:	2d01      	cmp	r5, #1
   149e8:	d906      	bls.n	149f8 <ll_scan_enable+0x68>
}
   149ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		err = ull_scan_enable(scan);
   149ee:	4809      	ldr	r0, [pc, #36]	; (14a14 <ll_scan_enable+0x84>)
   149f0:	f7ec bc92 	b.w	1318 <ull_scan_enable>
		err = disable(SCAN_HANDLE_1M);
   149f4:	f7ff bfae 	b.w	14954 <disable.constprop.0>
		ull_filter_rpa_update(false);
   149f8:	2000      	movs	r0, #0
   149fa:	f003 ff41 	bl	18880 <ull_filter_rpa_update>
		lll->rpa_gen = 1;
   149fe:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
   14a02:	f043 0301 	orr.w	r3, r3, #1
   14a06:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   14a0a:	e7ee      	b.n	149ea <ll_scan_enable+0x5a>
		return BT_HCI_ERR_CMD_DISALLOWED;
   14a0c:	200c      	movs	r0, #12
}
   14a0e:	bd38      	pop	{r3, r4, r5, pc}
			return BT_HCI_ERR_INVALID_PARAM;
   14a10:	2012      	movs	r0, #18
}
   14a12:	bd38      	pop	{r3, r4, r5, pc}
   14a14:	20003e8c 	.word	0x20003e8c

00014a18 <ull_scan_reset>:
{
   14a18:	b508      	push	{r3, lr}
		(void)disable(handle);
   14a1a:	f7ff ff9b 	bl	14954 <disable.constprop.0>
}
   14a1e:	2000      	movs	r0, #0
   14a20:	bd08      	pop	{r3, pc}
   14a22:	bf00      	nop

00014a24 <ull_scan_handle_get>:
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
   14a24:	4a04      	ldr	r2, [pc, #16]	; (14a38 <ull_scan_handle_get+0x14>)
   14a26:	4b05      	ldr	r3, [pc, #20]	; (14a3c <ull_scan_handle_get+0x18>)
   14a28:	1a80      	subs	r0, r0, r2
   14a2a:	0880      	lsrs	r0, r0, #2
   14a2c:	fba3 3000 	umull	r3, r0, r3, r0
}
   14a30:	f3c0 0047 	ubfx	r0, r0, #1, #8
   14a34:	4770      	bx	lr
   14a36:	bf00      	nop
   14a38:	20003e8c 	.word	0x20003e8c
   14a3c:	1af286bd 	.word	0x1af286bd

00014a40 <ull_scan_is_enabled_get>:
	if (handle >= BT_CTLR_SCAN_SET) {
   14a40:	b938      	cbnz	r0, 14a52 <ull_scan_is_enabled_get+0x12>
	if (!scan || !scan->is_enabled) {
   14a42:	4805      	ldr	r0, [pc, #20]	; (14a58 <ull_scan_is_enabled_get+0x18>)
   14a44:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
	return &ll_scan[handle];
   14a48:	f013 0f01 	tst.w	r3, #1
   14a4c:	bf08      	it	eq
   14a4e:	2000      	moveq	r0, #0
   14a50:	4770      	bx	lr
		return NULL;
   14a52:	2000      	movs	r0, #0
}
   14a54:	4770      	bx	lr
   14a56:	bf00      	nop
   14a58:	20003e8c 	.word	0x20003e8c

00014a5c <ull_scan_is_disabled_get>:
	if (!scan || scan->is_enabled) {
   14a5c:	4a04      	ldr	r2, [pc, #16]	; (14a70 <ull_scan_is_disabled_get+0x14>)
   14a5e:	f892 3048 	ldrb.w	r3, [r2, #72]	; 0x48
   14a62:	f003 0301 	and.w	r3, r3, #1
   14a66:	4303      	orrs	r3, r0
}
   14a68:	bf0c      	ite	eq
   14a6a:	4610      	moveq	r0, r2
   14a6c:	2000      	movne	r0, #0
   14a6e:	4770      	bx	lr
   14a70:	20003e8c 	.word	0x20003e8c

00014a74 <ull_scan_is_enabled>:
	if (handle >= BT_CTLR_SCAN_SET) {
   14a74:	b988      	cbnz	r0, 14a9a <ull_scan_is_enabled+0x26>
	if (!scan || !scan->is_enabled) {
   14a76:	4a0a      	ldr	r2, [pc, #40]	; (14aa0 <ull_scan_is_enabled+0x2c>)
   14a78:	f892 3048 	ldrb.w	r3, [r2, #72]	; 0x48
   14a7c:	f013 0001 	ands.w	r0, r3, #1
   14a80:	d00c      	beq.n	14a9c <ull_scan_is_enabled+0x28>
	return (((uint32_t)scan->is_enabled << scan->lll.type) |
   14a82:	f892 0032 	ldrb.w	r0, [r2, #50]	; 0x32
		(scan->lll.conn ? BIT(2) : 0) |
   14a86:	6a52      	ldr	r2, [r2, #36]	; 0x24
	return (((uint32_t)scan->is_enabled << scan->lll.type) |
   14a88:	f003 0301 	and.w	r3, r3, #1
   14a8c:	09c0      	lsrs	r0, r0, #7
   14a8e:	fa03 f000 	lsl.w	r0, r3, r0
		(scan->lll.conn ? BIT(2) : 0) |
   14a92:	b11a      	cbz	r2, 14a9c <ull_scan_is_enabled+0x28>
   14a94:	f040 0004 	orr.w	r0, r0, #4
   14a98:	4770      	bx	lr
		return 0;
   14a9a:	2000      	movs	r0, #0
}
   14a9c:	4770      	bx	lr
   14a9e:	bf00      	nop
   14aa0:	20003e8c 	.word	0x20003e8c

00014aa4 <ull_scan_filter_pol_get>:
	if (handle >= BT_CTLR_SCAN_SET) {
   14aa4:	b950      	cbnz	r0, 14abc <ull_scan_filter_pol_get+0x18>
	if (!scan || !scan->is_enabled) {
   14aa6:	4b06      	ldr	r3, [pc, #24]	; (14ac0 <ull_scan_filter_pol_get+0x1c>)
   14aa8:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
   14aac:	f010 0001 	ands.w	r0, r0, #1
   14ab0:	d005      	beq.n	14abe <ull_scan_filter_pol_get+0x1a>
	return scan->lll.filter_policy;
   14ab2:	f893 0032 	ldrb.w	r0, [r3, #50]	; 0x32
   14ab6:	f3c0 00c1 	ubfx	r0, r0, #3, #2
   14aba:	4770      	bx	lr
		return 0;
   14abc:	2000      	movs	r0, #0
}
   14abe:	4770      	bx	lr
   14ac0:	20003e8c 	.word	0x20003e8c

00014ac4 <tx_ull_dequeue>:
{
   14ac4:	b410      	push	{r4}
   14ac6:	e9d0 2462 	ldrd	r2, r4, [r0, #392]	; 0x188
   14aca:	4603      	mov	r3, r0
   14acc:	4608      	mov	r0, r1
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   14ace:	b164      	cbz	r4, 14aea <tx_ull_dequeue+0x26>
	if (conn->tx_head == conn->tx_ctrl) {
   14ad0:	4294      	cmp	r4, r2
   14ad2:	d027      	beq.n	14b24 <tx_ull_dequeue+0x60>
		if (conn->tx_head == conn->tx_data) {
   14ad4:	f8d3 1194 	ldr.w	r1, [r3, #404]	; 0x194
   14ad8:	4291      	cmp	r1, r2
   14ada:	d018      	beq.n	14b0e <tx_ull_dequeue+0x4a>
		conn->tx_head = conn->tx_head->next;
   14adc:	6812      	ldr	r2, [r2, #0]
   14ade:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
		tx->next = NULL;
   14ae2:	2300      	movs	r3, #0
}
   14ae4:	bc10      	pop	{r4}
		tx->next = NULL;
   14ae6:	6003      	str	r3, [r0, #0]
}
   14ae8:	4770      	bx	lr
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   14aea:	f8d3 1194 	ldr.w	r1, [r3, #404]	; 0x194
   14aee:	4291      	cmp	r1, r2
   14af0:	d023      	beq.n	14b3a <tx_ull_dequeue+0x76>
		if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   14af2:	7911      	ldrb	r1, [r2, #4]
   14af4:	f001 0103 	and.w	r1, r1, #3
   14af8:	2903      	cmp	r1, #3
   14afa:	d00d      	beq.n	14b18 <tx_ull_dequeue+0x54>
		conn->tx_head = conn->tx_head->next;
   14afc:	6812      	ldr	r2, [r2, #0]
   14afe:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
			conn->tx_ctrl = NULL;
   14b02:	2200      	movs	r2, #0
			conn->tx_ctrl_last = NULL;
   14b04:	e9c3 2263 	strd	r2, r2, [r3, #396]	; 0x18c
}
   14b08:	bc10      	pop	{r4}
		tx->next = tx;
   14b0a:	6000      	str	r0, [r0, #0]
}
   14b0c:	4770      	bx	lr
   14b0e:	4611      	mov	r1, r2
			conn->tx_data = conn->tx_data->next;
   14b10:	6809      	ldr	r1, [r1, #0]
   14b12:	f8c3 1194 	str.w	r1, [r3, #404]	; 0x194
   14b16:	e7e1      	b.n	14adc <tx_ull_dequeue+0x18>
				((pdu_data_tx->llctrl.opcode !=
   14b18:	79d1      	ldrb	r1, [r2, #7]
		if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   14b1a:	2903      	cmp	r1, #3
   14b1c:	d0de      	beq.n	14adc <tx_ull_dequeue+0x18>
				  PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   14b1e:	290a      	cmp	r1, #10
   14b20:	d1ec      	bne.n	14afc <tx_ull_dequeue+0x38>
   14b22:	e7db      	b.n	14adc <tx_ull_dequeue+0x18>
   14b24:	f8d3 1190 	ldr.w	r1, [r3, #400]	; 0x190
		conn->tx_head = conn->tx_head->next;
   14b28:	6812      	ldr	r2, [r2, #0]
   14b2a:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   14b2e:	42a1      	cmp	r1, r4
			conn->tx_ctrl = conn->tx_head;
   14b30:	bf18      	it	ne
   14b32:	f8c3 218c 	strne.w	r2, [r3, #396]	; 0x18c
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   14b36:	d1e7      	bne.n	14b08 <tx_ull_dequeue+0x44>
   14b38:	e7e3      	b.n	14b02 <tx_ull_dequeue+0x3e>
	if (conn->tx_head == conn->tx_ctrl) {
   14b3a:	2a00      	cmp	r2, #0
   14b3c:	d1e8      	bne.n	14b10 <tx_ull_dequeue+0x4c>
   14b3e:	f8d3 1190 	ldr.w	r1, [r3, #400]	; 0x190
   14b42:	4614      	mov	r4, r2
   14b44:	e7f0      	b.n	14b28 <tx_ull_dequeue+0x64>
   14b46:	bf00      	nop

00014b48 <calc_eff_time>:
		uint16_t time = PKT_US(max_octets, phy);
   14b48:	074b      	lsls	r3, r1, #29
   14b4a:	d50c      	bpl.n	14b66 <calc_eff_time+0x1e>
   14b4c:	0181      	lsls	r1, r0, #6
		eff_time = MIN(eff_time, default_time);
   14b4e:	f501 7074 	add.w	r0, r1, #976	; 0x3d0
   14b52:	4290      	cmp	r0, r2
   14b54:	bf28      	it	cs
   14b56:	4610      	movcs	r0, r2
		eff_time = MAX(eff_time, PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, phy));
   14b58:	f44f 6129 	mov.w	r1, #2704	; 0xa90
   14b5c:	4288      	cmp	r0, r1
   14b5e:	bf38      	it	cc
   14b60:	4608      	movcc	r0, r1
	}
   14b62:	b280      	uxth	r0, r0
   14b64:	4770      	bx	lr
	{
   14b66:	b410      	push	{r4}
		uint16_t time = PKT_US(max_octets, phy);
   14b68:	f100 040d 	add.w	r4, r0, #13
   14b6c:	f001 0003 	and.w	r0, r1, #3
   14b70:	4404      	add	r4, r0
   14b72:	f3c1 0140 	ubfx	r1, r1, #1, #1
   14b76:	00e4      	lsls	r4, r4, #3
   14b78:	40cc      	lsrs	r4, r1
		eff_time = MAX(PDU_DC_PAYLOAD_TIME_MIN, time);
   14b7a:	b2a3      	uxth	r3, r4
   14b7c:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
		eff_time = MAX(eff_time, PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, phy));
   14b80:	f100 0028 	add.w	r0, r0, #40	; 0x28
		eff_time = MAX(PDU_DC_PAYLOAD_TIME_MIN, time);
   14b84:	bf38      	it	cc
   14b86:	f44f 73a4 	movcc.w	r3, #328	; 0x148
		eff_time = MAX(eff_time, PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, phy));
   14b8a:	00c4      	lsls	r4, r0, #3
		eff_time = MIN(eff_time, default_time);
   14b8c:	429a      	cmp	r2, r3
		eff_time = MAX(eff_time, PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, phy));
   14b8e:	fa24 f101 	lsr.w	r1, r4, r1
		eff_time = MIN(eff_time, default_time);
   14b92:	bf28      	it	cs
   14b94:	461a      	movcs	r2, r3
		eff_time = MAX(eff_time, PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, phy));
   14b96:	428a      	cmp	r2, r1
		eff_time = MIN(eff_time, default_time);
   14b98:	4610      	mov	r0, r2
		eff_time = MAX(eff_time, PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, phy));
   14b9a:	bf38      	it	cc
   14b9c:	4608      	movcc	r0, r1
	}
   14b9e:	b280      	uxth	r0, r0
   14ba0:	bc10      	pop	{r4}
   14ba2:	4770      	bx	lr

00014ba4 <init_reset>:
{
   14ba4:	b538      	push	{r3, r4, r5, lr}
	mem_init(conn_pool, sizeof(struct ll_conn),
   14ba6:	4814      	ldr	r0, [pc, #80]	; (14bf8 <init_reset+0x54>)
   14ba8:	4b14      	ldr	r3, [pc, #80]	; (14bfc <init_reset+0x58>)
   14baa:	2204      	movs	r2, #4
   14bac:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   14bb0:	f7fb f9d6 	bl	ff60 <mem_init>
	mem_init(mem_conn_tx.pool, CONN_TX_BUF_SIZE, CONFIG_BT_CTLR_TX_BUFFERS,
   14bb4:	4b12      	ldr	r3, [pc, #72]	; (14c00 <init_reset+0x5c>)
   14bb6:	220a      	movs	r2, #10
   14bb8:	1d18      	adds	r0, r3, #4
   14bba:	f44f 7182 	mov.w	r1, #260	; 0x104
   14bbe:	f7fb f9cf 	bl	ff60 <mem_init>
	mem_init(mem_conn_tx_ctrl.pool, CONN_TX_CTRL_BUF_SIZE,
   14bc2:	4b10      	ldr	r3, [pc, #64]	; (14c04 <init_reset+0x60>)
   14bc4:	2210      	movs	r2, #16
   14bc6:	1d18      	adds	r0, r3, #4
   14bc8:	2120      	movs	r1, #32
   14bca:	f7fb f9c9 	bl	ff60 <mem_init>
	mem_init(mem_link_tx.pool, sizeof(memq_link_t),
   14bce:	4b0e      	ldr	r3, [pc, #56]	; (14c08 <init_reset+0x64>)
   14bd0:	221a      	movs	r2, #26
   14bd2:	1d18      	adds	r0, r3, #4
   14bd4:	2108      	movs	r1, #8
   14bd6:	f7fb f9c3 	bl	ff60 <mem_init>
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   14bda:	4b0c      	ldr	r3, [pc, #48]	; (14c0c <init_reset+0x68>)
	default_phy_tx |= BIT(2);
   14bdc:	490c      	ldr	r1, [pc, #48]	; (14c10 <init_reset+0x6c>)
	default_phy_rx |= BIT(2);
   14bde:	4a0d      	ldr	r2, [pc, #52]	; (14c14 <init_reset+0x70>)
	default_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   14be0:	480d      	ldr	r0, [pc, #52]	; (14c18 <init_reset+0x74>)
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   14be2:	251b      	movs	r5, #27
   14be4:	801d      	strh	r5, [r3, #0]
	default_phy_tx |= BIT(2);
   14be6:	2305      	movs	r3, #5
	default_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   14be8:	f44f 74a4 	mov.w	r4, #328	; 0x148
	default_phy_tx |= BIT(2);
   14bec:	700b      	strb	r3, [r1, #0]
	default_phy_rx |= BIT(2);
   14bee:	7013      	strb	r3, [r2, #0]
	default_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   14bf0:	8004      	strh	r4, [r0, #0]
}
   14bf2:	2000      	movs	r0, #0
   14bf4:	bd38      	pop	{r3, r4, r5, pc}
   14bf6:	bf00      	nop
   14bf8:	20006f24 	.word	0x20006f24
   14bfc:	20005f20 	.word	0x20005f20
   14c00:	20007600 	.word	0x20007600
   14c04:	2000802c 	.word	0x2000802c
   14c08:	20008230 	.word	0x20008230
   14c0c:	2000a2e0 	.word	0x2000a2e0
   14c10:	2000a860 	.word	0x2000a860
   14c14:	2000a85f 	.word	0x2000a85f
   14c18:	2000a2e2 	.word	0x2000a2e2

00014c1c <ctrl_tx_pause_enqueue>:
{
   14c1c:	b538      	push	{r3, r4, r5, lr}
			conn->tx_head &&
   14c1e:	f8d0 3188 	ldr.w	r3, [r0, #392]	; 0x188
{
   14c22:	4604      	mov	r4, r0
   14c24:	460d      	mov	r5, r1
	if (
   14c26:	b11b      	cbz	r3, 14c30 <ctrl_tx_pause_enqueue+0x14>
			!conn->llcp_enc.pause_tx &&
   14c28:	f890 112a 	ldrb.w	r1, [r0, #298]	; 0x12a
			conn->tx_head &&
   14c2c:	0788      	lsls	r0, r1, #30
   14c2e:	d50d      	bpl.n	14c4c <ctrl_tx_pause_enqueue+0x30>
		if (!conn->tx_ctrl) {
   14c30:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
   14c34:	b301      	cbz	r1, 14c78 <ctrl_tx_pause_enqueue+0x5c>
			LL_ASSERT(!pause);
   14c36:	bb4a      	cbnz	r2, 14c8c <ctrl_tx_pause_enqueue+0x70>
	tx->next = conn->tx_ctrl_last->next;
   14c38:	f8d4 3190 	ldr.w	r3, [r4, #400]	; 0x190
   14c3c:	681a      	ldr	r2, [r3, #0]
   14c3e:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
   14c40:	601d      	str	r5, [r3, #0]
	conn->tx_ctrl_last = tx;
   14c42:	f8c4 5190 	str.w	r5, [r4, #400]	; 0x190
   14c46:	682b      	ldr	r3, [r5, #0]
	if (!tx->next) {
   14c48:	b19b      	cbz	r3, 14c72 <ctrl_tx_pause_enqueue+0x56>
}
   14c4a:	bd38      	pop	{r3, r4, r5, pc}
			!conn->llcp_phy.pause_tx &&
   14c4c:	f894 1183 	ldrb.w	r1, [r4, #387]	; 0x183
   14c50:	07c9      	lsls	r1, r1, #31
   14c52:	d4ed      	bmi.n	14c30 <ctrl_tx_pause_enqueue+0x14>
		if (conn->tx_head == conn->tx_data) {
   14c54:	f8d4 1194 	ldr.w	r1, [r4, #404]	; 0x194
   14c58:	428b      	cmp	r3, r1
			conn->tx_data = conn->tx_data->next;
   14c5a:	bf04      	itt	eq
   14c5c:	6819      	ldreq	r1, [r3, #0]
   14c5e:	f8c4 1194 	streq.w	r1, [r4, #404]	; 0x194
		if (!conn->tx_ctrl) {
   14c62:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
   14c66:	b1f9      	cbz	r1, 14ca8 <ctrl_tx_pause_enqueue+0x8c>
			LL_ASSERT(!pause);
   14c68:	2a00      	cmp	r2, #0
   14c6a:	d0e5      	beq.n	14c38 <ctrl_tx_pause_enqueue+0x1c>
   14c6c:	f640 333a 	movw	r3, #2874	; 0xb3a
   14c70:	e00e      	b.n	14c90 <ctrl_tx_pause_enqueue+0x74>
		conn->tx_data_last = tx;
   14c72:	f8c4 5198 	str.w	r5, [r4, #408]	; 0x198
}
   14c76:	bd38      	pop	{r3, r4, r5, pc}
			tx->next = conn->tx_head;
   14c78:	602b      	str	r3, [r5, #0]
			conn->tx_head = tx;
   14c7a:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
			if (!pause) {
   14c7e:	2a00      	cmp	r2, #0
   14c80:	d1e2      	bne.n	14c48 <ctrl_tx_pause_enqueue+0x2c>
				conn->tx_ctrl_last = tx;
   14c82:	e9c4 5563 	strd	r5, r5, [r4, #396]	; 0x18c
	if (!tx->next) {
   14c86:	2b00      	cmp	r3, #0
   14c88:	d1df      	bne.n	14c4a <ctrl_tx_pause_enqueue+0x2e>
   14c8a:	e7f2      	b.n	14c72 <ctrl_tx_pause_enqueue+0x56>
			LL_ASSERT(!pause);
   14c8c:	f640 334c 	movw	r3, #2892	; 0xb4c
   14c90:	4a0b      	ldr	r2, [pc, #44]	; (14cc0 <ctrl_tx_pause_enqueue+0xa4>)
   14c92:	490c      	ldr	r1, [pc, #48]	; (14cc4 <ctrl_tx_pause_enqueue+0xa8>)
   14c94:	480c      	ldr	r0, [pc, #48]	; (14cc8 <ctrl_tx_pause_enqueue+0xac>)
   14c96:	f009 f958 	bl	1df4a <printk>
   14c9a:	4040      	eors	r0, r0
   14c9c:	f380 8811 	msr	BASEPRI, r0
   14ca0:	f04f 0003 	mov.w	r0, #3
   14ca4:	df02      	svc	2
   14ca6:	e7c7      	b.n	14c38 <ctrl_tx_pause_enqueue+0x1c>
			tx->next = conn->tx_head->next;
   14ca8:	6819      	ldr	r1, [r3, #0]
   14caa:	6029      	str	r1, [r5, #0]
			conn->tx_head->next = tx;
   14cac:	601d      	str	r5, [r3, #0]
			if (!pause) {
   14cae:	2a00      	cmp	r2, #0
   14cb0:	d1c9      	bne.n	14c46 <ctrl_tx_pause_enqueue+0x2a>
				conn->tx_ctrl_last = tx;
   14cb2:	e9c4 5563 	strd	r5, r5, [r4, #396]	; 0x18c
   14cb6:	682b      	ldr	r3, [r5, #0]
	if (!tx->next) {
   14cb8:	2b00      	cmp	r3, #0
   14cba:	d1c6      	bne.n	14c4a <ctrl_tx_pause_enqueue+0x2e>
   14cbc:	e7d9      	b.n	14c72 <ctrl_tx_pause_enqueue+0x56>
   14cbe:	bf00      	nop
   14cc0:	0002442c 	.word	0x0002442c
   14cc4:	0002446c 	.word	0x0002446c
   14cc8:	00023fe4 	.word	0x00023fe4

00014ccc <tx_lll_flush>:
{
   14ccc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct ll_conn *conn = (void *)HDR_LLL2EVT(param);
   14cd0:	f8d0 8000 	ldr.w	r8, [r0]
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   14cd4:	4935      	ldr	r1, [pc, #212]	; (14dac <tx_lll_flush+0xe0>)
{
   14cd6:	b083      	sub	sp, #12
   14cd8:	4605      	mov	r5, r0
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   14cda:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   14cde:	4640      	mov	r0, r8
   14ce0:	f7fb f9a2 	bl	10028 <mem_index_get>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   14ce4:	f105 0630 	add.w	r6, r5, #48	; 0x30
	lll_conn_flush(handle, lll);
   14ce8:	4629      	mov	r1, r5
   14cea:	f005 fd9d 	bl	1a828 <lll_conn_flush>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   14cee:	6b68      	ldr	r0, [r5, #52]	; 0x34
   14cf0:	4631      	mov	r1, r6
   14cf2:	aa01      	add	r2, sp, #4
   14cf4:	f7fb f9d6 	bl	100a4 <memq_dequeue>
	while (link) {
   14cf8:	b340      	cbz	r0, 14d4c <tx_lll_flush+0x80>
   14cfa:	4c2d      	ldr	r4, [pc, #180]	; (14db0 <tx_lll_flush+0xe4>)
		lll_tx->handle = 0xFFFF;
   14cfc:	f64f 77ff 	movw	r7, #65535	; 0xffff
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   14d00:	f104 0904 	add.w	r9, r4, #4
		idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   14d04:	78e1      	ldrb	r1, [r4, #3]
	if (last == count) {
   14d06:	f894 c001 	ldrb.w	ip, [r4, #1]
   14d0a:	78a2      	ldrb	r2, [r4, #2]
	last = last + 1;
   14d0c:	1c4b      	adds	r3, r1, #1
   14d0e:	b2db      	uxtb	r3, r3
		last = 0U;
   14d10:	459c      	cmp	ip, r3
   14d12:	bf08      	it	eq
   14d14:	2300      	moveq	r3, #0
	if (last == first) {
   14d16:	429a      	cmp	r2, r3
   14d18:	d038      	beq.n	14d8c <tx_lll_flush+0xc0>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   14d1a:	7822      	ldrb	r2, [r4, #0]
   14d1c:	fb12 f201 	smulbb	r2, r2, r1
		LL_ASSERT(lll_tx);
   14d20:	eb19 0e02 	adds.w	lr, r9, r2
   14d24:	d032      	beq.n	14d8c <tx_lll_flush+0xc0>
		lll_tx->node = tx;
   14d26:	f8dd c004 	ldr.w	ip, [sp, #4]
		lll_tx->handle = 0xFFFF;
   14d2a:	f829 7002 	strh.w	r7, [r9, r2]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
   14d2e:	f8dc 1000 	ldr.w	r1, [ip]
		lll_tx->node = tx;
   14d32:	f8ce c004 	str.w	ip, [lr, #4]
		link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   14d36:	aa01      	add	r2, sp, #4
		link->next = tx->next; /* Indicates ctrl pool or data pool */
   14d38:	6001      	str	r1, [r0, #0]
		tx->next = link;
   14d3a:	f8cc 0000 	str.w	r0, [ip]
		link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   14d3e:	4631      	mov	r1, r6
   14d40:	6b68      	ldr	r0, [r5, #52]	; 0x34
	*last = idx; /* Commit: Update write index */
   14d42:	70e3      	strb	r3, [r4, #3]
   14d44:	f7fb f9ae 	bl	100a4 <memq_dequeue>
	while (link) {
   14d48:	2800      	cmp	r0, #0
   14d4a:	d1db      	bne.n	14d04 <tx_lll_flush+0x38>
	LL_ASSERT(rx->hdr.link);
   14d4c:	f8d8 0108 	ldr.w	r0, [r8, #264]	; 0x108
	rx = (void *)&conn->llcp_terminate.node_rx;
   14d50:	f508 7484 	add.w	r4, r8, #264	; 0x108
	LL_ASSERT(rx->hdr.link);
   14d54:	b150      	cbz	r0, 14d6c <tx_lll_flush+0xa0>
	rx->hdr.link = NULL;
   14d56:	2300      	movs	r3, #0
	ull_rx_put(link, rx);
   14d58:	4621      	mov	r1, r4
	rx->hdr.link = NULL;
   14d5a:	f8c8 3108 	str.w	r3, [r8, #264]	; 0x108
	ull_rx_put(link, rx);
   14d5e:	f7ff fc7b 	bl	14658 <ull_rx_put>
	ull_rx_sched();
   14d62:	f7ff fc89 	bl	14678 <ull_rx_sched>
}
   14d66:	b003      	add	sp, #12
   14d68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(rx->hdr.link);
   14d6c:	4a11      	ldr	r2, [pc, #68]	; (14db4 <tx_lll_flush+0xe8>)
   14d6e:	4912      	ldr	r1, [pc, #72]	; (14db8 <tx_lll_flush+0xec>)
   14d70:	4812      	ldr	r0, [pc, #72]	; (14dbc <tx_lll_flush+0xf0>)
   14d72:	f640 23df 	movw	r3, #2783	; 0xadf
   14d76:	f009 f8e8 	bl	1df4a <printk>
   14d7a:	4040      	eors	r0, r0
   14d7c:	f380 8811 	msr	BASEPRI, r0
   14d80:	f04f 0003 	mov.w	r0, #3
   14d84:	df02      	svc	2
   14d86:	f8d8 0108 	ldr.w	r0, [r8, #264]	; 0x108
   14d8a:	e7e4      	b.n	14d56 <tx_lll_flush+0x8a>
		LL_ASSERT(lll_tx);
   14d8c:	4a09      	ldr	r2, [pc, #36]	; (14db4 <tx_lll_flush+0xe8>)
   14d8e:	490c      	ldr	r1, [pc, #48]	; (14dc0 <tx_lll_flush+0xf4>)
   14d90:	480a      	ldr	r0, [pc, #40]	; (14dbc <tx_lll_flush+0xf0>)
   14d92:	f640 23cb 	movw	r3, #2763	; 0xacb
   14d96:	f009 f8d8 	bl	1df4a <printk>
   14d9a:	4040      	eors	r0, r0
   14d9c:	f380 8811 	msr	BASEPRI, r0
   14da0:	f04f 0003 	mov.w	r0, #3
   14da4:	df02      	svc	2
		lll_tx->handle = 0xFFFF;
   14da6:	2300      	movs	r3, #0
   14da8:	801b      	strh	r3, [r3, #0]
   14daa:	deff      	udf	#255	; 0xff
   14dac:	20006f24 	.word	0x20006f24
   14db0:	200004c0 	.word	0x200004c0
   14db4:	0002442c 	.word	0x0002442c
   14db8:	0002447c 	.word	0x0002447c
   14dbc:	00023fe4 	.word	0x00023fe4
   14dc0:	00024474 	.word	0x00024474

00014dc4 <ticker_start_conn_op_cb>:
{
   14dc4:	b510      	push	{r4, lr}
   14dc6:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   14dc8:	b990      	cbnz	r0, 14df0 <ticker_start_conn_op_cb+0x2c>
	void *p = ull_update_unmark(param);
   14dca:	4620      	mov	r0, r4
   14dcc:	f7ff fbbe 	bl	1454c <ull_update_unmark>
	LL_ASSERT(p == param);
   14dd0:	4284      	cmp	r4, r0
   14dd2:	d00c      	beq.n	14dee <ticker_start_conn_op_cb+0x2a>
   14dd4:	4a0d      	ldr	r2, [pc, #52]	; (14e0c <ticker_start_conn_op_cb+0x48>)
   14dd6:	490e      	ldr	r1, [pc, #56]	; (14e10 <ticker_start_conn_op_cb+0x4c>)
   14dd8:	480e      	ldr	r0, [pc, #56]	; (14e14 <ticker_start_conn_op_cb+0x50>)
   14dda:	f640 2348 	movw	r3, #2632	; 0xa48
   14dde:	f009 f8b4 	bl	1df4a <printk>
   14de2:	4040      	eors	r0, r0
   14de4:	f380 8811 	msr	BASEPRI, r0
   14de8:	f04f 0003 	mov.w	r0, #3
   14dec:	df02      	svc	2
}
   14dee:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   14df0:	4a06      	ldr	r2, [pc, #24]	; (14e0c <ticker_start_conn_op_cb+0x48>)
   14df2:	4909      	ldr	r1, [pc, #36]	; (14e18 <ticker_start_conn_op_cb+0x54>)
   14df4:	4807      	ldr	r0, [pc, #28]	; (14e14 <ticker_start_conn_op_cb+0x50>)
   14df6:	f640 2344 	movw	r3, #2628	; 0xa44
   14dfa:	f009 f8a6 	bl	1df4a <printk>
   14dfe:	4040      	eors	r0, r0
   14e00:	f380 8811 	msr	BASEPRI, r0
   14e04:	f04f 0003 	mov.w	r0, #3
   14e08:	df02      	svc	2
   14e0a:	e7de      	b.n	14dca <ticker_start_conn_op_cb+0x6>
   14e0c:	0002442c 	.word	0x0002442c
   14e10:	00024498 	.word	0x00024498
   14e14:	00023fe4 	.word	0x00023fe4
   14e18:	0002448c 	.word	0x0002448c

00014e1c <ticker_stop_conn_op_cb>:
{
   14e1c:	b510      	push	{r4, lr}
   14e1e:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   14e20:	b990      	cbnz	r0, 14e48 <ticker_stop_conn_op_cb+0x2c>
	void *p = ull_update_mark(param);
   14e22:	4620      	mov	r0, r4
   14e24:	f7ff fb86 	bl	14534 <ull_update_mark>
	LL_ASSERT(p == param);
   14e28:	4284      	cmp	r4, r0
   14e2a:	d00c      	beq.n	14e46 <ticker_stop_conn_op_cb+0x2a>
   14e2c:	4a0d      	ldr	r2, [pc, #52]	; (14e64 <ticker_stop_conn_op_cb+0x48>)
   14e2e:	490e      	ldr	r1, [pc, #56]	; (14e68 <ticker_stop_conn_op_cb+0x4c>)
   14e30:	480e      	ldr	r0, [pc, #56]	; (14e6c <ticker_stop_conn_op_cb+0x50>)
   14e32:	f640 233f 	movw	r3, #2623	; 0xa3f
   14e36:	f009 f888 	bl	1df4a <printk>
   14e3a:	4040      	eors	r0, r0
   14e3c:	f380 8811 	msr	BASEPRI, r0
   14e40:	f04f 0003 	mov.w	r0, #3
   14e44:	df02      	svc	2
}
   14e46:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   14e48:	4a06      	ldr	r2, [pc, #24]	; (14e64 <ticker_stop_conn_op_cb+0x48>)
   14e4a:	4909      	ldr	r1, [pc, #36]	; (14e70 <ticker_stop_conn_op_cb+0x54>)
   14e4c:	4807      	ldr	r0, [pc, #28]	; (14e6c <ticker_stop_conn_op_cb+0x50>)
   14e4e:	f640 233b 	movw	r3, #2619	; 0xa3b
   14e52:	f009 f87a 	bl	1df4a <printk>
   14e56:	4040      	eors	r0, r0
   14e58:	f380 8811 	msr	BASEPRI, r0
   14e5c:	f04f 0003 	mov.w	r0, #3
   14e60:	df02      	svc	2
   14e62:	e7de      	b.n	14e22 <ticker_stop_conn_op_cb+0x6>
   14e64:	0002442c 	.word	0x0002442c
   14e68:	00024498 	.word	0x00024498
   14e6c:	00023fe4 	.word	0x00023fe4
   14e70:	0002448c 	.word	0x0002448c

00014e74 <ticker_update_conn_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   14e74:	b900      	cbnz	r0, 14e78 <ticker_update_conn_op_cb+0x4>
   14e76:	4770      	bx	lr
{
   14e78:	b510      	push	{r4, lr}
   14e7a:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   14e7c:	f7ff fb72 	bl	14564 <ull_update_mark_get>
   14e80:	4284      	cmp	r4, r0
   14e82:	d010      	beq.n	14ea6 <ticker_update_conn_op_cb+0x32>
   14e84:	f7ff fb50 	bl	14528 <ull_disable_mark_get>
   14e88:	4284      	cmp	r4, r0
   14e8a:	d00c      	beq.n	14ea6 <ticker_update_conn_op_cb+0x32>
   14e8c:	4a06      	ldr	r2, [pc, #24]	; (14ea8 <ticker_update_conn_op_cb+0x34>)
   14e8e:	4907      	ldr	r1, [pc, #28]	; (14eac <ticker_update_conn_op_cb+0x38>)
   14e90:	4807      	ldr	r0, [pc, #28]	; (14eb0 <ticker_update_conn_op_cb+0x3c>)
   14e92:	f640 2334 	movw	r3, #2612	; 0xa34
   14e96:	f009 f858 	bl	1df4a <printk>
   14e9a:	4040      	eors	r0, r0
   14e9c:	f380 8811 	msr	BASEPRI, r0
   14ea0:	f04f 0003 	mov.w	r0, #3
   14ea4:	df02      	svc	2
}
   14ea6:	bd10      	pop	{r4, pc}
   14ea8:	0002442c 	.word	0x0002442c
   14eac:	000244a4 	.word	0x000244a4
   14eb0:	00023fe4 	.word	0x00023fe4

00014eb4 <ticker_op_stop_cb>:
{
   14eb4:	b510      	push	{r4, lr}
   14eb6:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   14eb8:	b9b0      	cbnz	r0, 14ee8 <ticker_op_stop_cb+0x34>
	mfy.param = param;
   14eba:	4b12      	ldr	r3, [pc, #72]	; (14f04 <ticker_op_stop_cb+0x50>)
	retval = mayfly_enqueue(TICKER_USER_ID_ULL_LOW, TICKER_USER_ID_LLL, 0,
   14ebc:	2200      	movs	r2, #0
   14ebe:	4611      	mov	r1, r2
   14ec0:	2002      	movs	r0, #2
	mfy.param = param;
   14ec2:	609c      	str	r4, [r3, #8]
	retval = mayfly_enqueue(TICKER_USER_ID_ULL_LOW, TICKER_USER_ID_LLL, 0,
   14ec4:	f7fb f952 	bl	1016c <mayfly_enqueue>
	LL_ASSERT(!retval);
   14ec8:	b900      	cbnz	r0, 14ecc <ticker_op_stop_cb+0x18>
}
   14eca:	bd10      	pop	{r4, pc}
	LL_ASSERT(!retval);
   14ecc:	4a0e      	ldr	r2, [pc, #56]	; (14f08 <ticker_op_stop_cb+0x54>)
   14ece:	490f      	ldr	r1, [pc, #60]	; (14f0c <ticker_op_stop_cb+0x58>)
   14ed0:	480f      	ldr	r0, [pc, #60]	; (14f10 <ticker_op_stop_cb+0x5c>)
   14ed2:	f640 2358 	movw	r3, #2648	; 0xa58
   14ed6:	f009 f838 	bl	1df4a <printk>
   14eda:	4040      	eors	r0, r0
   14edc:	f380 8811 	msr	BASEPRI, r0
   14ee0:	f04f 0003 	mov.w	r0, #3
   14ee4:	df02      	svc	2
}
   14ee6:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   14ee8:	4a07      	ldr	r2, [pc, #28]	; (14f08 <ticker_op_stop_cb+0x54>)
   14eea:	490a      	ldr	r1, [pc, #40]	; (14f14 <ticker_op_stop_cb+0x60>)
   14eec:	4808      	ldr	r0, [pc, #32]	; (14f10 <ticker_op_stop_cb+0x5c>)
   14eee:	f640 2351 	movw	r3, #2641	; 0xa51
   14ef2:	f009 f82a 	bl	1df4a <printk>
   14ef6:	4040      	eors	r0, r0
   14ef8:	f380 8811 	msr	BASEPRI, r0
   14efc:	f04f 0003 	mov.w	r0, #3
   14f00:	df02      	svc	2
   14f02:	e7da      	b.n	14eba <ticker_op_stop_cb+0x6>
   14f04:	200005f8 	.word	0x200005f8
   14f08:	0002442c 	.word	0x0002442c
   14f0c:	000242e0 	.word	0x000242e0
   14f10:	00023fe4 	.word	0x00023fe4
   14f14:	0002448c 	.word	0x0002448c

00014f18 <reject_ext_ind_send.isra.0>:

		return 0;
	}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ) || defined(CONFIG_BT_CTLR_PHY)
	static int reject_ext_ind_send(struct ll_conn *conn, struct node_rx_pdu *rx,
   14f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14f1c:	4605      	mov	r5, r0
	{
		struct pdu_data *pdu_ctrl_tx;
		struct node_tx *tx;

		/* acquire tx mem */
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   14f1e:	4826      	ldr	r0, [pc, #152]	; (14fb8 <reject_ext_ind_send.isra.0+0xa0>)
	static int reject_ext_ind_send(struct ll_conn *conn, struct node_rx_pdu *rx,
   14f20:	460e      	mov	r6, r1
   14f22:	4690      	mov	r8, r2
   14f24:	461f      	mov	r7, r3
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   14f26:	f7fb f849 	bl	ffbc <mem_acquire>
		if (!tx) {
   14f2a:	2800      	cmp	r0, #0
   14f2c:	d041      	beq.n	14fb2 <reject_ext_ind_send.isra.0+0x9a>
			return -ENOBUFS;
		}

		pdu_ctrl_tx = (void *)tx->pdu;
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   14f2e:	2303      	movs	r3, #3
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   14f30:	7904      	ldrb	r4, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   14f32:	7143      	strb	r3, [r0, #5]
			conn->tx_head &&
   14f34:	f8d5 2188 	ldr.w	r2, [r5, #392]	; 0x188
			sizeof(struct pdu_data_llctrl_reject_ext_ind);
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
		pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
   14f38:	f880 8008 	strb.w	r8, [r0, #8]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   14f3c:	4323      	orrs	r3, r4
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   14f3e:	2111      	movs	r1, #17
		pdu_ctrl_tx->llctrl.reject_ext_ind.error_code = error_code;
   14f40:	7247      	strb	r7, [r0, #9]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   14f42:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   14f44:	71c1      	strb	r1, [r0, #7]
	if (
   14f46:	b11a      	cbz	r2, 14f50 <reject_ext_ind_send.isra.0+0x38>
			!conn->llcp_enc.pause_tx &&
   14f48:	f895 312a 	ldrb.w	r3, [r5, #298]	; 0x12a
			conn->tx_head &&
   14f4c:	0799      	lsls	r1, r3, #30
   14f4e:	d510      	bpl.n	14f72 <reject_ext_ind_send.isra.0+0x5a>
		if (!conn->tx_ctrl) {
   14f50:	f8d5 318c 	ldr.w	r3, [r5, #396]	; 0x18c
   14f54:	b33b      	cbz	r3, 14fa6 <reject_ext_ind_send.isra.0+0x8e>
	tx->next = conn->tx_ctrl_last->next;
   14f56:	f8d5 3190 	ldr.w	r3, [r5, #400]	; 0x190
   14f5a:	681a      	ldr	r2, [r3, #0]
   14f5c:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   14f5e:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   14f60:	f8c5 0190 	str.w	r0, [r5, #400]	; 0x190
   14f64:	6802      	ldr	r2, [r0, #0]
	if (!tx->next) {
   14f66:	b1da      	cbz	r2, 14fa0 <reject_ext_ind_send.isra.0+0x88>

		ctrl_tx_enqueue(conn, tx);

		/* Mark for buffer for release */
		rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   14f68:	2303      	movs	r3, #3
   14f6a:	7033      	strb	r3, [r6, #0]

		return 0;
   14f6c:	2000      	movs	r0, #0
	}
   14f6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			!conn->llcp_phy.pause_tx &&
   14f72:	f895 3183 	ldrb.w	r3, [r5, #387]	; 0x183
   14f76:	07db      	lsls	r3, r3, #31
   14f78:	d4ea      	bmi.n	14f50 <reject_ext_ind_send.isra.0+0x38>
		if (conn->tx_head == conn->tx_data) {
   14f7a:	f8d5 3194 	ldr.w	r3, [r5, #404]	; 0x194
   14f7e:	429a      	cmp	r2, r3
			conn->tx_data = conn->tx_data->next;
   14f80:	bf04      	itt	eq
   14f82:	6813      	ldreq	r3, [r2, #0]
   14f84:	f8c5 3194 	streq.w	r3, [r5, #404]	; 0x194
		if (!conn->tx_ctrl) {
   14f88:	f8d5 318c 	ldr.w	r3, [r5, #396]	; 0x18c
   14f8c:	2b00      	cmp	r3, #0
   14f8e:	d1e2      	bne.n	14f56 <reject_ext_ind_send.isra.0+0x3e>
			tx->next = conn->tx_head->next;
   14f90:	6813      	ldr	r3, [r2, #0]
   14f92:	6003      	str	r3, [r0, #0]
			conn->tx_head->next = tx;
   14f94:	6010      	str	r0, [r2, #0]
				conn->tx_ctrl = tx;
   14f96:	6802      	ldr	r2, [r0, #0]
				conn->tx_ctrl_last = tx;
   14f98:	e9c5 0063 	strd	r0, r0, [r5, #396]	; 0x18c
	if (!tx->next) {
   14f9c:	2a00      	cmp	r2, #0
   14f9e:	d1e3      	bne.n	14f68 <reject_ext_ind_send.isra.0+0x50>
		conn->tx_data_last = tx;
   14fa0:	f8c5 0198 	str.w	r0, [r5, #408]	; 0x198
   14fa4:	e7e0      	b.n	14f68 <reject_ext_ind_send.isra.0+0x50>
			tx->next = conn->tx_head;
   14fa6:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
   14fa8:	e9c5 0062 	strd	r0, r0, [r5, #392]	; 0x188
				conn->tx_ctrl_last = tx;
   14fac:	f8c5 0190 	str.w	r0, [r5, #400]	; 0x190
   14fb0:	e7d9      	b.n	14f66 <reject_ext_ind_send.isra.0+0x4e>
			return -ENOBUFS;
   14fb2:	f06f 0036 	mvn.w	r0, #54	; 0x36
   14fb6:	e7da      	b.n	14f6e <reject_ext_ind_send.isra.0+0x56>
   14fb8:	2000802c 	.word	0x2000802c

00014fbc <start_enc_rsp_send>:
	{
   14fbc:	b570      	push	{r4, r5, r6, lr}
   14fbe:	4604      	mov	r4, r0
		if (!pdu_ctrl_tx) {
   14fc0:	b179      	cbz	r1, 14fe2 <start_enc_rsp_send+0x26>
		conn->lll.enc_tx = 1;
   14fc2:	f890 2062 	ldrb.w	r2, [r0, #98]	; 0x62
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   14fc6:	780b      	ldrb	r3, [r1, #0]
		conn->lll.enc_tx = 1;
   14fc8:	f042 0210 	orr.w	r2, r2, #16
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   14fcc:	2601      	movs	r6, #1
		conn->lll.enc_tx = 1;
   14fce:	f880 2062 	strb.w	r2, [r0, #98]	; 0x62
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   14fd2:	f043 0303 	orr.w	r3, r3, #3
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   14fd6:	2506      	movs	r5, #6
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   14fd8:	704e      	strb	r6, [r1, #1]
		return 0;
   14fda:	2000      	movs	r0, #0
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   14fdc:	700b      	strb	r3, [r1, #0]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   14fde:	70cd      	strb	r5, [r1, #3]
	}
   14fe0:	bd70      	pop	{r4, r5, r6, pc}
			tx = mem_acquire(&mem_conn_tx_ctrl.free);
   14fe2:	4826      	ldr	r0, [pc, #152]	; (1507c <start_enc_rsp_send+0xc0>)
   14fe4:	f7fa ffea 	bl	ffbc <mem_acquire>
			if (!tx) {
   14fe8:	2800      	cmp	r0, #0
   14fea:	d043      	beq.n	15074 <start_enc_rsp_send+0xb8>
		conn->lll.enc_tx = 1;
   14fec:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   14ff0:	7902      	ldrb	r2, [r0, #4]
		conn->lll.enc_tx = 1;
   14ff2:	f043 0310 	orr.w	r3, r3, #16
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   14ff6:	2101      	movs	r1, #1
		conn->lll.enc_tx = 1;
   14ff8:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   14ffc:	7141      	strb	r1, [r0, #5]
			conn->tx_head &&
   14ffe:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15002:	f042 0203 	orr.w	r2, r2, #3
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   15006:	2106      	movs	r1, #6
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15008:	7102      	strb	r2, [r0, #4]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   1500a:	71c1      	strb	r1, [r0, #7]
	if (
   1500c:	b1e3      	cbz	r3, 15048 <start_enc_rsp_send+0x8c>
			!conn->llcp_enc.pause_tx &&
   1500e:	f894 212a 	ldrb.w	r2, [r4, #298]	; 0x12a
			conn->tx_head &&
   15012:	0791      	lsls	r1, r2, #30
   15014:	d418      	bmi.n	15048 <start_enc_rsp_send+0x8c>
			!conn->llcp_phy.pause_tx &&
   15016:	f894 2183 	ldrb.w	r2, [r4, #387]	; 0x183
   1501a:	07d2      	lsls	r2, r2, #31
   1501c:	d414      	bmi.n	15048 <start_enc_rsp_send+0x8c>
		if (conn->tx_head == conn->tx_data) {
   1501e:	f8d4 2194 	ldr.w	r2, [r4, #404]	; 0x194
   15022:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   15024:	bf04      	itt	eq
   15026:	681a      	ldreq	r2, [r3, #0]
   15028:	f8c4 2194 	streq.w	r2, [r4, #404]	; 0x194
		if (!conn->tx_ctrl) {
   1502c:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
   15030:	b1ca      	cbz	r2, 15066 <start_enc_rsp_send+0xaa>
	tx->next = conn->tx_ctrl_last->next;
   15032:	f8d4 3190 	ldr.w	r3, [r4, #400]	; 0x190
   15036:	681a      	ldr	r2, [r3, #0]
   15038:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   1503a:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   1503c:	f8c4 0190 	str.w	r0, [r4, #400]	; 0x190
   15040:	6803      	ldr	r3, [r0, #0]
	if (!tx->next) {
   15042:	b163      	cbz	r3, 1505e <start_enc_rsp_send+0xa2>
		return 0;
   15044:	2000      	movs	r0, #0
	}
   15046:	bd70      	pop	{r4, r5, r6, pc}
		if (!conn->tx_ctrl) {
   15048:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
   1504c:	2a00      	cmp	r2, #0
   1504e:	d1f0      	bne.n	15032 <start_enc_rsp_send+0x76>
			tx->next = conn->tx_head;
   15050:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   15052:	e9c4 0062 	strd	r0, r0, [r4, #392]	; 0x188
				conn->tx_ctrl_last = tx;
   15056:	f8c4 0190 	str.w	r0, [r4, #400]	; 0x190
	if (!tx->next) {
   1505a:	2b00      	cmp	r3, #0
   1505c:	d1f2      	bne.n	15044 <start_enc_rsp_send+0x88>
		conn->tx_data_last = tx;
   1505e:	f8c4 0198 	str.w	r0, [r4, #408]	; 0x198
		return 0;
   15062:	4618      	mov	r0, r3
	}
   15064:	bd70      	pop	{r4, r5, r6, pc}
			tx->next = conn->tx_head->next;
   15066:	681a      	ldr	r2, [r3, #0]
   15068:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   1506a:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl = tx;
   1506c:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   1506e:	e9c4 0063 	strd	r0, r0, [r4, #396]	; 0x18c
   15072:	e7e6      	b.n	15042 <start_enc_rsp_send+0x86>
				return -ENOBUFS;
   15074:	f06f 0036 	mvn.w	r0, #54	; 0x36
	}
   15078:	bd70      	pop	{r4, r5, r6, pc}
   1507a:	bf00      	nop
   1507c:	2000802c 	.word	0x2000802c

00015080 <ctrl_tx_sec_enqueue>:
	if (conn->llcp_enc.pause_tx) {
   15080:	f890 312a 	ldrb.w	r3, [r0, #298]	; 0x12a
   15084:	f8d0 218c 	ldr.w	r2, [r0, #396]	; 0x18c
   15088:	079b      	lsls	r3, r3, #30
{
   1508a:	b570      	push	{r4, r5, r6, lr}
   1508c:	4604      	mov	r4, r0
   1508e:	460d      	mov	r5, r1
	if (conn->llcp_enc.pause_tx) {
   15090:	d509      	bpl.n	150a6 <ctrl_tx_sec_enqueue+0x26>
		if (!conn->tx_ctrl) {
   15092:	2a00      	cmp	r2, #0
   15094:	d03d      	beq.n	15112 <ctrl_tx_sec_enqueue+0x92>
			tx->next = conn->tx_ctrl_last->next;
   15096:	f8d0 3190 	ldr.w	r3, [r0, #400]	; 0x190
   1509a:	681a      	ldr	r2, [r3, #0]
   1509c:	600a      	str	r2, [r1, #0]
			conn->tx_ctrl_last->next = tx;
   1509e:	6019      	str	r1, [r3, #0]
		if (!tx->next) {
   150a0:	682b      	ldr	r3, [r5, #0]
   150a2:	b333      	cbz	r3, 150f2 <ctrl_tx_sec_enqueue+0x72>
}
   150a4:	bd70      	pop	{r4, r5, r6, pc}
		if (conn->tx_head) {
   150a6:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
   150aa:	b1e1      	cbz	r1, 150e6 <ctrl_tx_sec_enqueue+0x66>
			if ((conn->llcp_req != conn->llcp_ack) &&
   150ac:	f890 3183 	ldrb.w	r3, [r0, #387]	; 0x183
   150b0:	f890 60bf 	ldrb.w	r6, [r0, #191]	; 0xbf
   150b4:	f890 00c0 	ldrb.w	r0, [r0, #192]	; 0xc0
   150b8:	4286      	cmp	r6, r0
   150ba:	f003 0301 	and.w	r3, r3, #1
   150be:	d003      	beq.n	150c8 <ctrl_tx_sec_enqueue+0x48>
   150c0:	f894 00c1 	ldrb.w	r0, [r4, #193]	; 0xc1
   150c4:	2803      	cmp	r0, #3
   150c6:	d02c      	beq.n	15122 <ctrl_tx_sec_enqueue+0xa2>
			!conn->llcp_phy.pause_tx &&
   150c8:	b9b3      	cbnz	r3, 150f8 <ctrl_tx_sec_enqueue+0x78>
		if (conn->tx_head == conn->tx_data) {
   150ca:	f8d4 3194 	ldr.w	r3, [r4, #404]	; 0x194
   150ce:	4299      	cmp	r1, r3
   150d0:	d045      	beq.n	1515e <ctrl_tx_sec_enqueue+0xde>
		if (!conn->tx_ctrl) {
   150d2:	b99a      	cbnz	r2, 150fc <ctrl_tx_sec_enqueue+0x7c>
			tx->next = conn->tx_head->next;
   150d4:	680b      	ldr	r3, [r1, #0]
   150d6:	602b      	str	r3, [r5, #0]
			conn->tx_head->next = tx;
   150d8:	600d      	str	r5, [r1, #0]
				conn->tx_ctrl_last = tx;
   150da:	e9c4 5563 	strd	r5, r5, [r4, #396]	; 0x18c
   150de:	682b      	ldr	r3, [r5, #0]
		if (!tx->next) {
   150e0:	2b00      	cmp	r3, #0
   150e2:	d1df      	bne.n	150a4 <ctrl_tx_sec_enqueue+0x24>
   150e4:	e005      	b.n	150f2 <ctrl_tx_sec_enqueue+0x72>
		if (!conn->tx_ctrl) {
   150e6:	b94a      	cbnz	r2, 150fc <ctrl_tx_sec_enqueue+0x7c>
			tx->next = conn->tx_head;
   150e8:	602a      	str	r2, [r5, #0]
				conn->tx_ctrl = tx;
   150ea:	e9c0 5562 	strd	r5, r5, [r0, #392]	; 0x188
				conn->tx_ctrl_last = tx;
   150ee:	f8c0 5190 	str.w	r5, [r0, #400]	; 0x190
			conn->tx_data_last = tx;
   150f2:	f8c4 5198 	str.w	r5, [r4, #408]	; 0x198
}
   150f6:	bd70      	pop	{r4, r5, r6, pc}
		if (!conn->tx_ctrl) {
   150f8:	2a00      	cmp	r2, #0
   150fa:	d036      	beq.n	1516a <ctrl_tx_sec_enqueue+0xea>
	tx->next = conn->tx_ctrl_last->next;
   150fc:	f8d4 3190 	ldr.w	r3, [r4, #400]	; 0x190
   15100:	681a      	ldr	r2, [r3, #0]
   15102:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
   15104:	601d      	str	r5, [r3, #0]
	conn->tx_ctrl_last = tx;
   15106:	f8c4 5190 	str.w	r5, [r4, #400]	; 0x190
   1510a:	682b      	ldr	r3, [r5, #0]
		if (!tx->next) {
   1510c:	2b00      	cmp	r3, #0
   1510e:	d1c9      	bne.n	150a4 <ctrl_tx_sec_enqueue+0x24>
   15110:	e7ef      	b.n	150f2 <ctrl_tx_sec_enqueue+0x72>
			tx->next = conn->tx_head;
   15112:	f8d0 3188 	ldr.w	r3, [r0, #392]	; 0x188
   15116:	600b      	str	r3, [r1, #0]
			conn->tx_head = tx;
   15118:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
		if (!tx->next) {
   1511c:	2b00      	cmp	r3, #0
   1511e:	d1c1      	bne.n	150a4 <ctrl_tx_sec_enqueue+0x24>
   15120:	e7e7      	b.n	150f2 <ctrl_tx_sec_enqueue+0x72>
					(pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   15122:	7908      	ldrb	r0, [r1, #4]
					(conn->llcp_type == LLCP_ENCRYPTION) &&
   15124:	f000 0003 	and.w	r0, r0, #3
   15128:	2803      	cmp	r0, #3
   1512a:	d1cd      	bne.n	150c8 <ctrl_tx_sec_enqueue+0x48>
					((pdu_data_tx->llctrl.opcode ==
   1512c:	79c8      	ldrb	r0, [r1, #7]
					(pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   1512e:	2803      	cmp	r0, #3
   15130:	d001      	beq.n	15136 <ctrl_tx_sec_enqueue+0xb6>
					  PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
   15132:	280a      	cmp	r0, #10
   15134:	d1c8      	bne.n	150c8 <ctrl_tx_sec_enqueue+0x48>
			!conn->llcp_phy.pause_tx &&
   15136:	b9f3      	cbnz	r3, 15176 <ctrl_tx_sec_enqueue+0xf6>
		if (conn->tx_head == conn->tx_data) {
   15138:	f8d4 3194 	ldr.w	r3, [r4, #404]	; 0x194
   1513c:	428b      	cmp	r3, r1
   1513e:	d022      	beq.n	15186 <ctrl_tx_sec_enqueue+0x106>
		if (!conn->tx_ctrl) {
   15140:	b332      	cbz	r2, 15190 <ctrl_tx_sec_enqueue+0x110>
			LL_ASSERT(!pause);
   15142:	f640 333a 	movw	r3, #2874	; 0xb3a
			LL_ASSERT(!pause);
   15146:	4a14      	ldr	r2, [pc, #80]	; (15198 <ctrl_tx_sec_enqueue+0x118>)
   15148:	4914      	ldr	r1, [pc, #80]	; (1519c <ctrl_tx_sec_enqueue+0x11c>)
   1514a:	4815      	ldr	r0, [pc, #84]	; (151a0 <ctrl_tx_sec_enqueue+0x120>)
   1514c:	f008 fefd 	bl	1df4a <printk>
   15150:	4040      	eors	r0, r0
   15152:	f380 8811 	msr	BASEPRI, r0
   15156:	f04f 0003 	mov.w	r0, #3
   1515a:	df02      	svc	2
   1515c:	e7ce      	b.n	150fc <ctrl_tx_sec_enqueue+0x7c>
			conn->tx_data = conn->tx_data->next;
   1515e:	680b      	ldr	r3, [r1, #0]
   15160:	f8c4 3194 	str.w	r3, [r4, #404]	; 0x194
		if (!conn->tx_ctrl) {
   15164:	2a00      	cmp	r2, #0
   15166:	d1c9      	bne.n	150fc <ctrl_tx_sec_enqueue+0x7c>
   15168:	e7b4      	b.n	150d4 <ctrl_tx_sec_enqueue+0x54>
			tx->next = conn->tx_head;
   1516a:	6029      	str	r1, [r5, #0]
				conn->tx_ctrl = tx;
   1516c:	e9c4 5562 	strd	r5, r5, [r4, #392]	; 0x188
				conn->tx_ctrl_last = tx;
   15170:	f8c4 5190 	str.w	r5, [r4, #400]	; 0x190
}
   15174:	bd70      	pop	{r4, r5, r6, pc}
		if (!conn->tx_ctrl) {
   15176:	b112      	cbz	r2, 1517e <ctrl_tx_sec_enqueue+0xfe>
			LL_ASSERT(!pause);
   15178:	f640 334c 	movw	r3, #2892	; 0xb4c
   1517c:	e7e3      	b.n	15146 <ctrl_tx_sec_enqueue+0xc6>
			tx->next = conn->tx_head;
   1517e:	6029      	str	r1, [r5, #0]
			conn->tx_head = tx;
   15180:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
}
   15184:	bd70      	pop	{r4, r5, r6, pc}
			conn->tx_data = conn->tx_data->next;
   15186:	680b      	ldr	r3, [r1, #0]
   15188:	f8c4 3194 	str.w	r3, [r4, #404]	; 0x194
		if (!conn->tx_ctrl) {
   1518c:	2a00      	cmp	r2, #0
   1518e:	d1d8      	bne.n	15142 <ctrl_tx_sec_enqueue+0xc2>
			tx->next = conn->tx_head->next;
   15190:	680b      	ldr	r3, [r1, #0]
   15192:	602b      	str	r3, [r5, #0]
			conn->tx_head->next = tx;
   15194:	600d      	str	r5, [r1, #0]
			if (!pause) {
   15196:	e783      	b.n	150a0 <ctrl_tx_sec_enqueue+0x20>
   15198:	0002442c 	.word	0x0002442c
   1519c:	0002446c 	.word	0x0002446c
   151a0:	00023fe4 	.word	0x00023fe4

000151a4 <feature_rsp_send.isra.0>:
	static int feature_rsp_send(struct ll_conn *conn, struct node_rx_pdu *rx,
   151a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   151a6:	4606      	mov	r6, r0
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   151a8:	4824      	ldr	r0, [pc, #144]	; (1523c <feature_rsp_send.isra.0+0x98>)
	static int feature_rsp_send(struct ll_conn *conn, struct node_rx_pdu *rx,
   151aa:	460d      	mov	r5, r1
   151ac:	4617      	mov	r7, r2
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   151ae:	f7fa ff05 	bl	ffbc <mem_acquire>
		if (!tx) {
   151b2:	2800      	cmp	r0, #0
   151b4:	d03e      	beq.n	15234 <feature_rsp_send.isra.0+0x90>
			(features[1] << 8) | (features[2] << 16);
   151b6:	79bb      	ldrb	r3, [r7, #6]
		feat = ~LL_FEAT_BIT_MASK_VALID | features[0] |
   151b8:	7939      	ldrb	r1, [r7, #4]
			(features[1] << 8) | (features[2] << 16);
   151ba:	4a21      	ldr	r2, [pc, #132]	; (15240 <feature_rsp_send.isra.0+0x9c>)
   151bc:	4604      	mov	r4, r0
   151be:	7978      	ldrb	r0, [r7, #5]
   151c0:	041b      	lsls	r3, r3, #16
   151c2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   151c6:	430b      	orrs	r3, r1
		conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   151c8:	f8d6 10f4 	ldr.w	r1, [r6, #244]	; 0xf4
		conn->common.fex_valid = 1U;
   151cc:	f896 00be 	ldrb.w	r0, [r6, #190]	; 0xbe
			(features[1] << 8) | (features[2] << 16);
   151d0:	4313      	orrs	r3, r2
		conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   151d2:	400b      	ands	r3, r1
   151d4:	f3c3 0310 	ubfx	r3, r3, #0, #17
   151d8:	f8c6 30f4 	str.w	r3, [r6, #244]	; 0xf4
			(features[1] << 8) | (features[2] << 16);
   151dc:	79bb      	ldrb	r3, [r7, #6]
   151de:	f897 c005 	ldrb.w	ip, [r7, #5]
		feat = ~LL_FEAT_BIT_MASK_VALID | features[0] |
   151e2:	7939      	ldrb	r1, [r7, #4]
			(features[1] << 8) | (features[2] << 16);
   151e4:	041b      	lsls	r3, r3, #16
   151e6:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
   151ea:	430b      	orrs	r3, r1
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   151ec:	7921      	ldrb	r1, [r4, #4]
			(features[1] << 8) | (features[2] << 16);
   151ee:	4313      	orrs	r3, r2
		feat &= LL_FEAT_BIT_MASK;
   151f0:	f3c3 0310 	ubfx	r3, r3, #0, #17
		pdu_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   151f4:	2709      	movs	r7, #9
		(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   151f6:	2208      	movs	r2, #8
		conn->common.fex_valid = 1U;
   151f8:	f040 0001 	orr.w	r0, r0, #1
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   151fc:	f041 0103 	orr.w	r1, r1, #3
		conn->llcp_feature.features_peer =
   15200:	f8c6 30f8 	str.w	r3, [r6, #248]	; 0xf8
		conn->common.fex_valid = 1U;
   15204:	f886 00be 	strb.w	r0, [r6, #190]	; 0xbe
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   15208:	7121      	strb	r1, [r4, #4]
		(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   1520a:	18a0      	adds	r0, r4, r2
		pdu_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   1520c:	7167      	strb	r7, [r4, #5]
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   1520e:	71e7      	strb	r7, [r4, #7]
		(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   15210:	2100      	movs	r1, #0
   15212:	f00a fe57 	bl	1fec4 <memset>
		feat_result &= 0xFF;
   15216:	f896 30f4 	ldrb.w	r3, [r6, #244]	; 0xf4
	dst[0] = val;
   1521a:	7223      	strb	r3, [r4, #8]
	dst[1] = val >> 8;
   1521c:	2248      	movs	r2, #72	; 0x48
	dst[2] = val >> 16;
   1521e:	2301      	movs	r3, #1
		ctrl_tx_sec_enqueue(conn, tx);
   15220:	4630      	mov	r0, r6
   15222:	72a3      	strb	r3, [r4, #10]
	dst[1] = val >> 8;
   15224:	7262      	strb	r2, [r4, #9]
   15226:	4621      	mov	r1, r4
   15228:	f7ff ff2a 	bl	15080 <ctrl_tx_sec_enqueue>
		rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   1522c:	2303      	movs	r3, #3
   1522e:	702b      	strb	r3, [r5, #0]
		return 0;
   15230:	2000      	movs	r0, #0
	}
   15232:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -ENOBUFS;
   15234:	f06f 0036 	mvn.w	r0, #54	; 0x36
	}
   15238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1523a:	bf00      	nop
   1523c:	2000802c 	.word	0x2000802c
   15240:	fffe30d0 	.word	0xfffe30d0

00015244 <ll_conn_acquire>:
	return mem_acquire(&conn_free);
   15244:	4801      	ldr	r0, [pc, #4]	; (1524c <ll_conn_acquire+0x8>)
   15246:	f7fa beb9 	b.w	ffbc <mem_acquire>
   1524a:	bf00      	nop
   1524c:	20005f20 	.word	0x20005f20

00015250 <ll_conn_release>:
	mem_release(conn, &conn_free);
   15250:	4901      	ldr	r1, [pc, #4]	; (15258 <ll_conn_release+0x8>)
   15252:	f7fa becd 	b.w	fff0 <mem_release>
   15256:	bf00      	nop
   15258:	20005f20 	.word	0x20005f20

0001525c <ll_conn_handle_get>:
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   1525c:	4902      	ldr	r1, [pc, #8]	; (15268 <ll_conn_handle_get+0xc>)
   1525e:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   15262:	f7fa bee1 	b.w	10028 <mem_index_get>
   15266:	bf00      	nop
   15268:	20006f24 	.word	0x20006f24

0001526c <ll_conn_get>:
{
   1526c:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1526e:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   15272:	4801      	ldr	r0, [pc, #4]	; (15278 <ll_conn_get+0xc>)
   15274:	f7fa bed4 	b.w	10020 <mem_get>
   15278:	20006f24 	.word	0x20006f24

0001527c <ll_connected_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   1527c:	2803      	cmp	r0, #3
   1527e:	d80c      	bhi.n	1529a <ll_connected_get+0x1e>
{
   15280:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   15282:	4602      	mov	r2, r0
   15284:	4604      	mov	r4, r0
   15286:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   1528a:	4805      	ldr	r0, [pc, #20]	; (152a0 <ll_connected_get+0x24>)
   1528c:	f7fa fec8 	bl	10020 <mem_get>
	if (conn->lll.handle != handle) {
   15290:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   15292:	42a3      	cmp	r3, r4
		return NULL;
   15294:	bf18      	it	ne
   15296:	2000      	movne	r0, #0
}
   15298:	bd10      	pop	{r4, pc}
		return NULL;
   1529a:	2000      	movs	r0, #0
}
   1529c:	4770      	bx	lr
   1529e:	bf00      	nop
   152a0:	20006f24 	.word	0x20006f24

000152a4 <ll_tx_mem_acquire>:
	return mem_acquire(&mem_conn_tx.free);
   152a4:	4801      	ldr	r0, [pc, #4]	; (152ac <ll_tx_mem_acquire+0x8>)
   152a6:	f7fa be89 	b.w	ffbc <mem_acquire>
   152aa:	bf00      	nop
   152ac:	20007600 	.word	0x20007600

000152b0 <ll_tx_mem_release>:
	mem_release(tx, &mem_conn_tx.free);
   152b0:	4901      	ldr	r1, [pc, #4]	; (152b8 <ll_tx_mem_release+0x8>)
   152b2:	f7fa be9d 	b.w	fff0 <mem_release>
   152b6:	bf00      	nop
   152b8:	20007600 	.word	0x20007600

000152bc <ll_tx_mem_enqueue>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   152bc:	2803      	cmp	r0, #3
   152be:	d825      	bhi.n	1530c <ll_tx_mem_enqueue+0x50>
{
   152c0:	b570      	push	{r4, r5, r6, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   152c2:	4602      	mov	r2, r0
   152c4:	4604      	mov	r4, r0
   152c6:	460d      	mov	r5, r1
   152c8:	4813      	ldr	r0, [pc, #76]	; (15318 <ll_tx_mem_enqueue+0x5c>)
   152ca:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   152ce:	f7fa fea7 	bl	10020 <mem_get>
	if (conn->lll.handle != handle) {
   152d2:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
   152d4:	42a1      	cmp	r1, r4
   152d6:	d116      	bne.n	15306 <ll_tx_mem_enqueue+0x4a>
	idx = MFIFO_ENQUEUE_GET(conn_tx, (void **) &lll_tx);
   152d8:	4a10      	ldr	r2, [pc, #64]	; (1531c <ll_tx_mem_enqueue+0x60>)
   152da:	78d6      	ldrb	r6, [r2, #3]
	if (last == count) {
   152dc:	7854      	ldrb	r4, [r2, #1]
   152de:	7890      	ldrb	r0, [r2, #2]
	last = last + 1;
   152e0:	1c73      	adds	r3, r6, #1
   152e2:	b2db      	uxtb	r3, r3
		last = 0U;
   152e4:	429c      	cmp	r4, r3
   152e6:	bf08      	it	eq
   152e8:	2300      	moveq	r3, #0
	if (last == first) {
   152ea:	4298      	cmp	r0, r3
   152ec:	d011      	beq.n	15312 <ll_tx_mem_enqueue+0x56>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   152ee:	4614      	mov	r4, r2
   152f0:	f814 0b04 	ldrb.w	r0, [r4], #4
   152f4:	fb10 f006 	smulbb	r0, r0, r6
	if (!lll_tx) {
   152f8:	1826      	adds	r6, r4, r0
   152fa:	d00a      	beq.n	15312 <ll_tx_mem_enqueue+0x56>
	lll_tx->handle = handle;
   152fc:	5221      	strh	r1, [r4, r0]
	*last = idx; /* Commit: Update write index */
   152fe:	70d3      	strb	r3, [r2, #3]
	return 0;
   15300:	2000      	movs	r0, #0
	lll_tx->node = tx;
   15302:	6075      	str	r5, [r6, #4]
}
   15304:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   15306:	f06f 0015 	mvn.w	r0, #21
}
   1530a:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   1530c:	f06f 0015 	mvn.w	r0, #21
}
   15310:	4770      	bx	lr
		return -ENOBUFS;
   15312:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
   15316:	bd70      	pop	{r4, r5, r6, pc}
   15318:	20006f24 	.word	0x20006f24
   1531c:	2000059c 	.word	0x2000059c

00015320 <ll_conn_update_BLEX>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   15320:	2803      	cmp	r0, #3
   15322:	d83b      	bhi.n	1539c <ll_conn_update_BLEX+0x7c>
{
   15324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15326:	4604      	mov	r4, r0
   15328:	460d      	mov	r5, r1
   1532a:	4616      	mov	r6, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1532c:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   15330:	4602      	mov	r2, r0
   15332:	4837      	ldr	r0, [pc, #220]	; (15410 <ll_conn_update_BLEX+0xf0>)
   15334:	461f      	mov	r7, r3
   15336:	f7fa fe73 	bl	10020 <mem_get>
	if (conn->lll.handle != handle) {
   1533a:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   1533c:	42a3      	cmp	r3, r4
   1533e:	d12b      	bne.n	15398 <ll_conn_update_BLEX+0x78>
	if (!cmd) {
   15340:	bb05      	cbnz	r5, 15384 <ll_conn_update_BLEX+0x64>
		if (!conn->llcp_conn_param.disabled &&
   15342:	f890 314a 	ldrb.w	r3, [r0, #330]	; 0x14a
   15346:	06d9      	lsls	r1, r3, #27
   15348:	d52a      	bpl.n	153a0 <ll_conn_update_BLEX+0x80>
		} else if (conn->lll.role) {
   1534a:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
   1534e:	2b00      	cmp	r3, #0
   15350:	db5b      	blt.n	1540a <ll_conn_update_BLEX+0xea>
		if (conn->llcp_cu.req != conn->llcp_cu.ack) {
   15352:	f890 20dc 	ldrb.w	r2, [r0, #220]	; 0xdc
   15356:	f890 30dd 	ldrb.w	r3, [r0, #221]	; 0xdd
   1535a:	4293      	cmp	r3, r2
   1535c:	d11c      	bne.n	15398 <ll_conn_update_BLEX+0x78>
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1535e:	f890 10de 	ldrb.w	r1, [r0, #222]	; 0xde
		conn->llcp_cu.req++;
   15362:	1c5a      	adds	r2, r3, #1
		conn->llcp_cu.win_size = 1U;
   15364:	2401      	movs	r4, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   15366:	f021 0107 	bic.w	r1, r1, #7
		conn->llcp_cu.win_offset_us = 0U;
   1536a:	2300      	movs	r3, #0
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1536c:	f041 0105 	orr.w	r1, r1, #5
		conn->llcp_cu.req++;
   15370:	f880 20dc 	strb.w	r2, [r0, #220]	; 0xdc
		conn->llcp_cu.win_size = 1U;
   15374:	f880 40ec 	strb.w	r4, [r0, #236]	; 0xec
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   15378:	f880 10de 	strb.w	r1, [r0, #222]	; 0xde
		conn->llcp_cu.win_offset_us = 0U;
   1537c:	f8c0 30e8 	str.w	r3, [r0, #232]	; 0xe8
	return 0;
   15380:	4618      	mov	r0, r3
}
   15382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		cmd--;
   15384:	1e69      	subs	r1, r5, #1
		if (cmd) {
   15386:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
   1538a:	f890 3148 	ldrb.w	r3, [r0, #328]	; 0x148
   1538e:	f890 2149 	ldrb.w	r2, [r0, #329]	; 0x149
   15392:	d011      	beq.n	153b8 <ll_conn_update_BLEX+0x98>
			if ((conn->llcp_conn_param.req ==
   15394:	4293      	cmp	r3, r2
   15396:	d125      	bne.n	153e4 <ll_conn_update_BLEX+0xc4>
		return BT_HCI_ERR_CMD_DISALLOWED;
   15398:	200c      	movs	r0, #12
}
   1539a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1539c:	200c      	movs	r0, #12
}
   1539e:	4770      	bx	lr
				(!conn->common.fex_valid ||
   153a0:	f890 30be 	ldrb.w	r3, [r0, #190]	; 0xbe
		if (!conn->llcp_conn_param.disabled &&
   153a4:	07da      	lsls	r2, r3, #31
   153a6:	d503      	bpl.n	153b0 <ll_conn_update_BLEX+0x90>
				 (conn->llcp_feature.features_conn &
   153a8:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
				(!conn->common.fex_valid ||
   153ac:	079b      	lsls	r3, r3, #30
   153ae:	d5cc      	bpl.n	1534a <ll_conn_update_BLEX+0x2a>
   153b0:	f890 3148 	ldrb.w	r3, [r0, #328]	; 0x148
   153b4:	f890 2149 	ldrb.w	r2, [r0, #329]	; 0x149
			if (conn->llcp_conn_param.req !=
   153b8:	4293      	cmp	r3, r2
   153ba:	d1ed      	bne.n	15398 <ll_conn_update_BLEX+0x78>
			conn->llcp_conn_param.state = cmd;
   153bc:	f8b0 214a 	ldrh.w	r2, [r0, #330]	; 0x14a
			conn->llcp_conn_param.interval_min = conn->lll.interval;
   153c0:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
			conn->llcp_conn_param.offset0 = offset;
   153c2:	f8a0 7158 	strh.w	r7, [r0, #344]	; 0x158
			conn->llcp_conn_param.state = cmd;
   153c6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
			conn->llcp_conn_param.req++;
   153ca:	3301      	adds	r3, #1
			conn->llcp_conn_param.state = cmd;
   153cc:	f042 0208 	orr.w	r2, r2, #8
			conn->llcp_conn_param.req++;
   153d0:	f880 3148 	strb.w	r3, [r0, #328]	; 0x148
			conn->llcp_conn_param.state = cmd;
   153d4:	f8a0 214a 	strh.w	r2, [r0, #330]	; 0x14a
			conn->llcp_conn_param.interval_min = conn->lll.interval;
   153d8:	f8a0 114c 	strh.w	r1, [r0, #332]	; 0x14c
			conn->llcp_conn_param.interval_max = conn->lll.interval;
   153dc:	f8a0 114e 	strh.w	r1, [r0, #334]	; 0x14e
	return 0;
   153e0:	2000      	movs	r0, #0
}
   153e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					(conn->llcp_conn_param.state !=
   153e4:	f890 314a 	ldrb.w	r3, [r0, #330]	; 0x14a
						conn->llcp_conn_param.ack) ||
   153e8:	f003 0207 	and.w	r2, r3, #7
   153ec:	2a03      	cmp	r2, #3
   153ee:	d1d3      	bne.n	15398 <ll_conn_update_BLEX+0x78>
			conn->llcp_conn_param.state = cmd;
   153f0:	f001 0107 	and.w	r1, r1, #7
   153f4:	f023 030f 	bic.w	r3, r3, #15
   153f8:	f041 0108 	orr.w	r1, r1, #8
   153fc:	4319      	orrs	r1, r3
			conn->llcp_conn_param.status = status;
   153fe:	f880 614b 	strb.w	r6, [r0, #331]	; 0x14b
			conn->llcp_conn_param.state = cmd;
   15402:	f880 114a 	strb.w	r1, [r0, #330]	; 0x14a
	return 0;
   15406:	2000      	movs	r0, #0
}
   15408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   1540a:	201a      	movs	r0, #26
}
   1540c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1540e:	bf00      	nop
   15410:	20006f24 	.word	0x20006f24

00015414 <ll_conn_update>:
{
   15414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (handle >= CONFIG_BT_MAX_CONN) {
   15418:	2803      	cmp	r0, #3
{
   1541a:	f8bd a020 	ldrh.w	sl, [sp, #32]
   1541e:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
   15422:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
	if (handle >= CONFIG_BT_MAX_CONN) {
   15426:	d83f      	bhi.n	154a8 <ll_conn_update+0x94>
   15428:	4604      	mov	r4, r0
   1542a:	460d      	mov	r5, r1
   1542c:	4617      	mov	r7, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1542e:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   15432:	4602      	mov	r2, r0
   15434:	483a      	ldr	r0, [pc, #232]	; (15520 <ll_conn_update+0x10c>)
   15436:	461e      	mov	r6, r3
   15438:	f7fa fdf2 	bl	10020 <mem_get>
	if (conn->lll.handle != handle) {
   1543c:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   1543e:	42a3      	cmp	r3, r4
   15440:	d132      	bne.n	154a8 <ll_conn_update+0x94>
	if (!cmd) {
   15442:	bb3d      	cbnz	r5, 15494 <ll_conn_update+0x80>
		if (!conn->llcp_conn_param.disabled &&
   15444:	f890 314a 	ldrb.w	r3, [r0, #330]	; 0x14a
   15448:	06d9      	lsls	r1, r3, #27
   1544a:	d530      	bpl.n	154ae <ll_conn_update+0x9a>
		} else if (conn->lll.role) {
   1544c:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
   15450:	2b00      	cmp	r3, #0
   15452:	db62      	blt.n	1551a <ll_conn_update+0x106>
		if (conn->llcp_cu.req != conn->llcp_cu.ack) {
   15454:	f890 20dc 	ldrb.w	r2, [r0, #220]	; 0xdc
   15458:	f890 30dd 	ldrb.w	r3, [r0, #221]	; 0xdd
   1545c:	4293      	cmp	r3, r2
   1545e:	d123      	bne.n	154a8 <ll_conn_update+0x94>
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   15460:	f890 20de 	ldrb.w	r2, [r0, #222]	; 0xde
		conn->llcp_cu.interval = interval_max;
   15464:	f8a0 a0e0 	strh.w	sl, [r0, #224]	; 0xe0
		conn->llcp_cu.req++;
   15468:	3301      	adds	r3, #1
		conn->llcp_cu.win_size = 1U;
   1546a:	2101      	movs	r1, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1546c:	f022 0207 	bic.w	r2, r2, #7
		conn->llcp_cu.req++;
   15470:	f880 30dc 	strb.w	r3, [r0, #220]	; 0xdc
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   15474:	f042 0205 	orr.w	r2, r2, #5
		conn->llcp_cu.win_offset_us = 0U;
   15478:	2300      	movs	r3, #0
		conn->llcp_cu.win_size = 1U;
   1547a:	f880 10ec 	strb.w	r1, [r0, #236]	; 0xec
		conn->llcp_cu.latency = latency;
   1547e:	f8a0 90e2 	strh.w	r9, [r0, #226]	; 0xe2
		conn->llcp_cu.timeout = timeout;
   15482:	f8a0 80e4 	strh.w	r8, [r0, #228]	; 0xe4
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   15486:	f880 20de 	strb.w	r2, [r0, #222]	; 0xde
		conn->llcp_cu.win_offset_us = 0U;
   1548a:	f8c0 30e8 	str.w	r3, [r0, #232]	; 0xe8
	return 0;
   1548e:	4618      	mov	r0, r3
}
   15490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		cmd--;
   15494:	3d01      	subs	r5, #1
		if (cmd) {
   15496:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   1549a:	f890 3148 	ldrb.w	r3, [r0, #328]	; 0x148
   1549e:	f890 2149 	ldrb.w	r2, [r0, #329]	; 0x149
   154a2:	d010      	beq.n	154c6 <ll_conn_update+0xb2>
			if ((conn->llcp_conn_param.req ==
   154a4:	4293      	cmp	r3, r2
   154a6:	d125      	bne.n	154f4 <ll_conn_update+0xe0>
		return BT_HCI_ERR_CMD_DISALLOWED;
   154a8:	200c      	movs	r0, #12
}
   154aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				(!conn->common.fex_valid ||
   154ae:	f890 30be 	ldrb.w	r3, [r0, #190]	; 0xbe
		if (!conn->llcp_conn_param.disabled &&
   154b2:	07da      	lsls	r2, r3, #31
   154b4:	d503      	bpl.n	154be <ll_conn_update+0xaa>
				 (conn->llcp_feature.features_conn &
   154b6:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
				(!conn->common.fex_valid ||
   154ba:	079b      	lsls	r3, r3, #30
   154bc:	d5c6      	bpl.n	1544c <ll_conn_update+0x38>
   154be:	f890 3148 	ldrb.w	r3, [r0, #328]	; 0x148
   154c2:	f890 2149 	ldrb.w	r2, [r0, #329]	; 0x149
			if (conn->llcp_conn_param.req !=
   154c6:	4293      	cmp	r3, r2
   154c8:	d1ee      	bne.n	154a8 <ll_conn_update+0x94>
			conn->llcp_conn_param.state = cmd;
   154ca:	f8b0 214a 	ldrh.w	r2, [r0, #330]	; 0x14a
			conn->llcp_conn_param.interval_min = interval_min;
   154ce:	f8a0 614c 	strh.w	r6, [r0, #332]	; 0x14c
			conn->llcp_conn_param.state = cmd;
   154d2:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
			conn->llcp_conn_param.req++;
   154d6:	3301      	adds	r3, #1
			conn->llcp_conn_param.state = cmd;
   154d8:	f042 0208 	orr.w	r2, r2, #8
			conn->llcp_conn_param.req++;
   154dc:	f880 3148 	strb.w	r3, [r0, #328]	; 0x148
			conn->llcp_conn_param.interval_max = interval_max;
   154e0:	f8a0 a14e 	strh.w	sl, [r0, #334]	; 0x14e
			conn->llcp_conn_param.latency = latency;
   154e4:	f8a0 9150 	strh.w	r9, [r0, #336]	; 0x150
			conn->llcp_conn_param.timeout = timeout;
   154e8:	f8a0 8152 	strh.w	r8, [r0, #338]	; 0x152
			conn->llcp_conn_param.state = cmd;
   154ec:	f8a0 214a 	strh.w	r2, [r0, #330]	; 0x14a
	return 0;
   154f0:	2000      	movs	r0, #0
   154f2:	e7da      	b.n	154aa <ll_conn_update+0x96>
					(conn->llcp_conn_param.state !=
   154f4:	f890 314a 	ldrb.w	r3, [r0, #330]	; 0x14a
						conn->llcp_conn_param.ack) ||
   154f8:	f003 0207 	and.w	r2, r3, #7
   154fc:	2a03      	cmp	r2, #3
   154fe:	d1d3      	bne.n	154a8 <ll_conn_update+0x94>
			conn->llcp_conn_param.state = cmd;
   15500:	f005 0507 	and.w	r5, r5, #7
   15504:	f045 0508 	orr.w	r5, r5, #8
   15508:	f023 030f 	bic.w	r3, r3, #15
   1550c:	431d      	orrs	r5, r3
   1550e:	f880 514a 	strb.w	r5, [r0, #330]	; 0x14a
			conn->llcp_conn_param.status = status;
   15512:	f880 714b 	strb.w	r7, [r0, #331]	; 0x14b
	return 0;
   15516:	2000      	movs	r0, #0
   15518:	e7c7      	b.n	154aa <ll_conn_update+0x96>
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   1551a:	201a      	movs	r0, #26
   1551c:	e7c5      	b.n	154aa <ll_conn_update+0x96>
   1551e:	bf00      	nop
   15520:	20006f24 	.word	0x20006f24

00015524 <ll_chm_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   15524:	2803      	cmp	r0, #3
   15526:	d81d      	bhi.n	15564 <ll_chm_get+0x40>
{
   15528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1552a:	4602      	mov	r2, r0
   1552c:	4606      	mov	r6, r0
   1552e:	460d      	mov	r5, r1
   15530:	480d      	ldr	r0, [pc, #52]	; (15568 <ll_chm_get+0x44>)
   15532:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   15536:	f7fa fd73 	bl	10020 <mem_get>
	if (conn->lll.handle != handle) {
   1553a:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   1553c:	42b3      	cmp	r3, r6
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1553e:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
   15540:	d10e      	bne.n	15560 <ll_chm_get+0x3c>
   15542:	f100 0738 	add.w	r7, r0, #56	; 0x38
		conn->chm_updated = 0U;
   15546:	2600      	movs	r6, #0
   15548:	f884 619c 	strb.w	r6, [r4, #412]	; 0x19c
		memcpy(chm, conn->lll.data_chan_map,
   1554c:	2205      	movs	r2, #5
   1554e:	4639      	mov	r1, r7
   15550:	4628      	mov	r0, r5
   15552:	f00a fc8c 	bl	1fe6e <memcpy>
	} while (conn->chm_updated);
   15556:	f894 019c 	ldrb.w	r0, [r4, #412]	; 0x19c
   1555a:	2800      	cmp	r0, #0
   1555c:	d1f4      	bne.n	15548 <ll_chm_get+0x24>
}
   1555e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   15560:	200c      	movs	r0, #12
}
   15562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   15564:	200c      	movs	r0, #12
}
   15566:	4770      	bx	lr
   15568:	20006f24 	.word	0x20006f24

0001556c <ll_terminate_ind_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   1556c:	2803      	cmp	r0, #3
   1556e:	d816      	bhi.n	1559e <ll_terminate_ind_send+0x32>
{
   15570:	b538      	push	{r3, r4, r5, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   15572:	4602      	mov	r2, r0
   15574:	4604      	mov	r4, r0
   15576:	460d      	mov	r5, r1
   15578:	480a      	ldr	r0, [pc, #40]	; (155a4 <ll_terminate_ind_send+0x38>)
   1557a:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   1557e:	f7fa fd4f 	bl	10020 <mem_get>
	if (conn->lll.handle != handle) {
   15582:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   15584:	42a3      	cmp	r3, r4
   15586:	d108      	bne.n	1559a <ll_terminate_ind_send+0x2e>
	conn->llcp_terminate.req++;
   15588:	f890 3104 	ldrb.w	r3, [r0, #260]	; 0x104
	conn->llcp_terminate.reason_own = reason;
   1558c:	f880 5106 	strb.w	r5, [r0, #262]	; 0x106
	conn->llcp_terminate.req++;
   15590:	3301      	adds	r3, #1
   15592:	f880 3104 	strb.w	r3, [r0, #260]	; 0x104
	return 0;
   15596:	2000      	movs	r0, #0
}
   15598:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1559a:	200c      	movs	r0, #12
}
   1559c:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1559e:	200c      	movs	r0, #12
}
   155a0:	4770      	bx	lr
   155a2:	bf00      	nop
   155a4:	20006f24 	.word	0x20006f24

000155a8 <ll_feature_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   155a8:	2803      	cmp	r0, #3
   155aa:	d817      	bhi.n	155dc <ll_feature_req_send+0x34>
{
   155ac:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   155ae:	4602      	mov	r2, r0
   155b0:	4604      	mov	r4, r0
   155b2:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   155b6:	480a      	ldr	r0, [pc, #40]	; (155e0 <ll_feature_req_send+0x38>)
   155b8:	f7fa fd32 	bl	10020 <mem_get>
	if (conn->lll.handle != handle) {
   155bc:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   155be:	42a3      	cmp	r3, r4
   155c0:	d10a      	bne.n	155d8 <ll_feature_req_send+0x30>
	if (conn->llcp_feature.req != conn->llcp_feature.ack) {
   155c2:	f890 20f0 	ldrb.w	r2, [r0, #240]	; 0xf0
   155c6:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   155ca:	4293      	cmp	r3, r2
   155cc:	d104      	bne.n	155d8 <ll_feature_req_send+0x30>
	conn->llcp_feature.req++;
   155ce:	3301      	adds	r3, #1
   155d0:	f880 30f0 	strb.w	r3, [r0, #240]	; 0xf0
	return 0;
   155d4:	2000      	movs	r0, #0
}
   155d6:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   155d8:	200c      	movs	r0, #12
}
   155da:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   155dc:	200c      	movs	r0, #12
}
   155de:	4770      	bx	lr
   155e0:	20006f24 	.word	0x20006f24

000155e4 <ll_version_ind_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   155e4:	2803      	cmp	r0, #3
   155e6:	d817      	bhi.n	15618 <ll_version_ind_send+0x34>
{
   155e8:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   155ea:	4602      	mov	r2, r0
   155ec:	4604      	mov	r4, r0
   155ee:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   155f2:	480a      	ldr	r0, [pc, #40]	; (1561c <ll_version_ind_send+0x38>)
   155f4:	f7fa fd14 	bl	10020 <mem_get>
	if (conn->lll.handle != handle) {
   155f8:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   155fa:	42a3      	cmp	r3, r4
   155fc:	d10a      	bne.n	15614 <ll_version_ind_send+0x30>
	if (conn->llcp_version.req != conn->llcp_version.ack) {
   155fe:	f890 20fc 	ldrb.w	r2, [r0, #252]	; 0xfc
   15602:	f890 30fd 	ldrb.w	r3, [r0, #253]	; 0xfd
   15606:	4293      	cmp	r3, r2
   15608:	d104      	bne.n	15614 <ll_version_ind_send+0x30>
	conn->llcp_version.req++;
   1560a:	3301      	adds	r3, #1
   1560c:	f880 30fc 	strb.w	r3, [r0, #252]	; 0xfc
	return 0;
   15610:	2000      	movs	r0, #0
}
   15612:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   15614:	200c      	movs	r0, #12
}
   15616:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   15618:	200c      	movs	r0, #12
}
   1561a:	4770      	bx	lr
   1561c:	20006f24 	.word	0x20006f24

00015620 <ll_length_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   15620:	2803      	cmp	r0, #3
   15622:	d836      	bhi.n	15692 <ll_length_req_send+0x72>
{
   15624:	b570      	push	{r4, r5, r6, lr}
   15626:	4604      	mov	r4, r0
   15628:	460e      	mov	r6, r1
   1562a:	4615      	mov	r5, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1562c:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   15630:	4602      	mov	r2, r0
   15632:	4820      	ldr	r0, [pc, #128]	; (156b4 <ll_length_req_send+0x94>)
   15634:	f7fa fcf4 	bl	10020 <mem_get>
	if (conn->lll.handle != handle) {
   15638:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   1563a:	42a3      	cmp	r3, r4
   1563c:	d11f      	bne.n	1567e <ll_length_req_send+0x5e>
	if (conn->llcp_length.disabled ||
   1563e:	f890 3172 	ldrb.w	r3, [r0, #370]	; 0x172
   15642:	071c      	lsls	r4, r3, #28
   15644:	d421      	bmi.n	1568a <ll_length_req_send+0x6a>
			(conn->common.fex_valid &&
   15646:	f890 20be 	ldrb.w	r2, [r0, #190]	; 0xbe
	if (conn->llcp_length.disabled ||
   1564a:	07d1      	lsls	r1, r2, #31
   1564c:	d419      	bmi.n	15682 <ll_length_req_send+0x62>
	if (conn->llcp_length.req != conn->llcp_length.ack) {
   1564e:	f890 1170 	ldrb.w	r1, [r0, #368]	; 0x170
   15652:	f890 2171 	ldrb.w	r2, [r0, #369]	; 0x171
   15656:	428a      	cmp	r2, r1
   15658:	d01d      	beq.n	15696 <ll_length_req_send+0x76>
		switch (conn->llcp_length.state) {
   1565a:	f003 0307 	and.w	r3, r3, #7
   1565e:	2b03      	cmp	r3, #3
   15660:	d004      	beq.n	1566c <ll_length_req_send+0x4c>
   15662:	3303      	adds	r3, #3
   15664:	f003 0307 	and.w	r3, r3, #7
   15668:	2b01      	cmp	r3, #1
   1566a:	d810      	bhi.n	1568e <ll_length_req_send+0x6e>
				if (!conn->llcp_length.cache.tx_octets) {
   1566c:	f8b0 317c 	ldrh.w	r3, [r0, #380]	; 0x17c
   15670:	b96b      	cbnz	r3, 1568e <ll_length_req_send+0x6e>
					conn->llcp_length.cache.tx_octets = tx_octets;
   15672:	f8a0 617c 	strh.w	r6, [r0, #380]	; 0x17c
					conn->llcp_length.cache.tx_time = tx_time;
   15676:	f8a0 517e 	strh.w	r5, [r0, #382]	; 0x17e
					return 0;
   1567a:	4618      	mov	r0, r3
}
   1567c:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1567e:	2002      	movs	r0, #2
}
   15680:	bd70      	pop	{r4, r5, r6, pc}
			 !(conn->llcp_feature.features_conn & BIT(BT_LE_FEAT_BIT_DLE)))) {
   15682:	f8d0 20f4 	ldr.w	r2, [r0, #244]	; 0xf4
			(conn->common.fex_valid &&
   15686:	0692      	lsls	r2, r2, #26
   15688:	d4e1      	bmi.n	1564e <ll_length_req_send+0x2e>
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   1568a:	201a      	movs	r0, #26
}
   1568c:	bd70      	pop	{r4, r5, r6, pc}
				return BT_HCI_ERR_CMD_DISALLOWED;
   1568e:	200c      	movs	r0, #12
}
   15690:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15692:	2002      	movs	r0, #2
}
   15694:	4770      	bx	lr
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   15696:	f890 3172 	ldrb.w	r3, [r0, #370]	; 0x172
	conn->llcp_length.tx_octets = tx_octets;
   1569a:	f8a0 6176 	strh.w	r6, [r0, #374]	; 0x176
	conn->llcp_length.req++;
   1569e:	3201      	adds	r2, #1
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   156a0:	f36f 0302 	bfc	r3, #0, #3
	conn->llcp_length.req++;
   156a4:	f880 2170 	strb.w	r2, [r0, #368]	; 0x170
	conn->llcp_length.tx_time = tx_time;
   156a8:	f8a0 517a 	strh.w	r5, [r0, #378]	; 0x17a
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   156ac:	f880 3172 	strb.w	r3, [r0, #370]	; 0x172
	return 0;
   156b0:	2000      	movs	r0, #0
}
   156b2:	bd70      	pop	{r4, r5, r6, pc}
   156b4:	20006f24 	.word	0x20006f24

000156b8 <ll_length_default_get>:
	*max_tx_octets = default_tx_octets;
   156b8:	4a03      	ldr	r2, [pc, #12]	; (156c8 <ll_length_default_get+0x10>)
	*max_tx_time = default_tx_time;
   156ba:	4b04      	ldr	r3, [pc, #16]	; (156cc <ll_length_default_get+0x14>)
	*max_tx_octets = default_tx_octets;
   156bc:	8812      	ldrh	r2, [r2, #0]
	*max_tx_time = default_tx_time;
   156be:	881b      	ldrh	r3, [r3, #0]
	*max_tx_octets = default_tx_octets;
   156c0:	8002      	strh	r2, [r0, #0]
	*max_tx_time = default_tx_time;
   156c2:	800b      	strh	r3, [r1, #0]
}
   156c4:	4770      	bx	lr
   156c6:	bf00      	nop
   156c8:	2000a2e0 	.word	0x2000a2e0
   156cc:	2000a2e2 	.word	0x2000a2e2

000156d0 <ll_length_default_set>:
	default_tx_octets = max_tx_octets;
   156d0:	4a02      	ldr	r2, [pc, #8]	; (156dc <ll_length_default_set+0xc>)
	default_tx_time = max_tx_time;
   156d2:	4b03      	ldr	r3, [pc, #12]	; (156e0 <ll_length_default_set+0x10>)
	default_tx_octets = max_tx_octets;
   156d4:	8010      	strh	r0, [r2, #0]
	default_tx_time = max_tx_time;
   156d6:	8019      	strh	r1, [r3, #0]
}
   156d8:	2000      	movs	r0, #0
   156da:	4770      	bx	lr
   156dc:	2000a2e0 	.word	0x2000a2e0
   156e0:	2000a2e2 	.word	0x2000a2e2

000156e4 <ll_length_max_get>:
{
   156e4:	b430      	push	{r4, r5}
	*max_tx_octets = LL_LENGTH_OCTETS_RX_MAX;
   156e6:	25fb      	movs	r5, #251	; 0xfb
	*max_tx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED);
   156e8:	f244 2490 	movw	r4, #17040	; 0x4290
	*max_tx_octets = LL_LENGTH_OCTETS_RX_MAX;
   156ec:	8005      	strh	r5, [r0, #0]
	*max_rx_octets = LL_LENGTH_OCTETS_RX_MAX;
   156ee:	8015      	strh	r5, [r2, #0]
	*max_tx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED);
   156f0:	800c      	strh	r4, [r1, #0]
	*max_rx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED);
   156f2:	801c      	strh	r4, [r3, #0]
}
   156f4:	bc30      	pop	{r4, r5}
   156f6:	4770      	bx	lr

000156f8 <ll_phy_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   156f8:	2803      	cmp	r0, #3
   156fa:	d81a      	bhi.n	15732 <ll_phy_get+0x3a>
{
   156fc:	b570      	push	{r4, r5, r6, lr}
   156fe:	4604      	mov	r4, r0
   15700:	460d      	mov	r5, r1
   15702:	4616      	mov	r6, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   15704:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   15708:	4602      	mov	r2, r0
   1570a:	480b      	ldr	r0, [pc, #44]	; (15738 <ll_phy_get+0x40>)
   1570c:	f7fa fc88 	bl	10020 <mem_get>
	if (conn->lll.handle != handle) {
   15710:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   15712:	42a3      	cmp	r3, r4
   15714:	d10b      	bne.n	1572e <ll_phy_get+0x36>
	*tx = conn->lll.phy_tx;
   15716:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
   1571a:	f3c3 0302 	ubfx	r3, r3, #0, #3
   1571e:	702b      	strb	r3, [r5, #0]
	*rx = conn->lll.phy_rx;
   15720:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
   15724:	f3c3 0302 	ubfx	r3, r3, #0, #3
   15728:	7033      	strb	r3, [r6, #0]
	return 0;
   1572a:	2000      	movs	r0, #0
}
   1572c:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1572e:	2002      	movs	r0, #2
}
   15730:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15732:	2002      	movs	r0, #2
}
   15734:	4770      	bx	lr
   15736:	bf00      	nop
   15738:	20006f24 	.word	0x20006f24

0001573c <ll_phy_default_set>:
	default_phy_tx = tx;
   1573c:	4a02      	ldr	r2, [pc, #8]	; (15748 <ll_phy_default_set+0xc>)
	default_phy_rx = rx;
   1573e:	4b03      	ldr	r3, [pc, #12]	; (1574c <ll_phy_default_set+0x10>)
	default_phy_tx = tx;
   15740:	7010      	strb	r0, [r2, #0]
	default_phy_rx = rx;
   15742:	7019      	strb	r1, [r3, #0]
}
   15744:	2000      	movs	r0, #0
   15746:	4770      	bx	lr
   15748:	2000a860 	.word	0x2000a860
   1574c:	2000a85f 	.word	0x2000a85f

00015750 <ll_phy_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   15750:	2803      	cmp	r0, #3
   15752:	d84b      	bhi.n	157ec <ll_phy_req_send+0x9c>
{
   15754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15758:	4605      	mov	r5, r0
   1575a:	4688      	mov	r8, r1
   1575c:	4616      	mov	r6, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1575e:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   15762:	4602      	mov	r2, r0
   15764:	4822      	ldr	r0, [pc, #136]	; (157f0 <ll_phy_req_send+0xa0>)
   15766:	461f      	mov	r7, r3
   15768:	f7fa fc5a 	bl	10020 <mem_get>
	if (conn->lll.handle != handle) {
   1576c:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   1576e:	42ab      	cmp	r3, r5
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   15770:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
   15772:	d12d      	bne.n	157d0 <ll_phy_req_send+0x80>
	if (conn->llcp_phy.disabled ||
   15774:	f890 0183 	ldrb.w	r0, [r0, #387]	; 0x183
   15778:	f010 0008 	ands.w	r0, r0, #8
   1577c:	d133      	bne.n	157e6 <ll_phy_req_send+0x96>
			(conn->common.fex_valid &&
   1577e:	f894 30be 	ldrb.w	r3, [r4, #190]	; 0xbe
	if (conn->llcp_phy.disabled ||
   15782:	07db      	lsls	r3, r3, #31
   15784:	d42a      	bmi.n	157dc <ll_phy_req_send+0x8c>
	if ((conn->llcp_req != conn->llcp_ack) ||
   15786:	f894 20bf 	ldrb.w	r2, [r4, #191]	; 0xbf
   1578a:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
   1578e:	429a      	cmp	r2, r3
   15790:	d121      	bne.n	157d6 <ll_phy_req_send+0x86>
			(conn->llcp_phy.req != conn->llcp_phy.ack)) {
   15792:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
	if ((conn->llcp_req != conn->llcp_ack) ||
   15796:	f894 2181 	ldrb.w	r2, [r4, #385]	; 0x181
   1579a:	429a      	cmp	r2, r3
   1579c:	d11b      	bne.n	157d6 <ll_phy_req_send+0x86>
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   1579e:	f008 0107 	and.w	r1, r8, #7
   157a2:	0089      	lsls	r1, r1, #2
   157a4:	f8b4 5182 	ldrh.w	r5, [r4, #386]	; 0x182
   157a8:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
   157ac:	f007 0307 	and.w	r3, r7, #7
   157b0:	ea41 1343 	orr.w	r3, r1, r3, lsl #5
   157b4:	f006 0601 	and.w	r6, r6, #1
   157b8:	ea43 2346 	orr.w	r3, r3, r6, lsl #9
   157bc:	f405 4179 	and.w	r1, r5, #63744	; 0xf900
	conn->llcp_phy.req++;
   157c0:	3201      	adds	r2, #1
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   157c2:	430b      	orrs	r3, r1
	conn->llcp_phy.req++;
   157c4:	f884 2180 	strb.w	r2, [r4, #384]	; 0x180
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   157c8:	f8a4 3182 	strh.w	r3, [r4, #386]	; 0x182
}
   157cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   157d0:	2002      	movs	r0, #2
}
   157d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   157d6:	200c      	movs	r0, #12
}
   157d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			 !(conn->llcp_feature.features_conn & BIT(BT_LE_FEAT_BIT_PHY_2M)) &&
   157dc:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   157e0:	f413 6f10 	tst.w	r3, #2304	; 0x900
   157e4:	d1cf      	bne.n	15786 <ll_phy_req_send+0x36>
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   157e6:	201a      	movs	r0, #26
}
   157e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   157ec:	2002      	movs	r0, #2
}
   157ee:	4770      	bx	lr
   157f0:	20006f24 	.word	0x20006f24

000157f4 <ll_apto_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   157f4:	2803      	cmp	r0, #3
   157f6:	d81d      	bhi.n	15834 <ll_apto_get+0x40>
{
   157f8:	b538      	push	{r3, r4, r5, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   157fa:	4602      	mov	r2, r0
   157fc:	4604      	mov	r4, r0
   157fe:	460d      	mov	r5, r1
   15800:	480d      	ldr	r0, [pc, #52]	; (15838 <ll_apto_get+0x44>)
   15802:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   15806:	f7fa fc0b 	bl	10020 <mem_get>
	if (conn->lll.handle != handle) {
   1580a:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   1580c:	42a3      	cmp	r3, r4
   1580e:	d10f      	bne.n	15830 <ll_apto_get+0x3c>
	*apto = conn->apto_reload * conn->lll.interval * 125U / 1000;
   15810:	f8b0 10b6 	ldrh.w	r1, [r0, #182]	; 0xb6
   15814:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
   15816:	4a09      	ldr	r2, [pc, #36]	; (1583c <ll_apto_get+0x48>)
   15818:	fb03 f301 	mul.w	r3, r3, r1
   1581c:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
   15820:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   15824:	fba2 2303 	umull	r2, r3, r2, r3
   15828:	099b      	lsrs	r3, r3, #6
   1582a:	802b      	strh	r3, [r5, #0]
	return 0;
   1582c:	2000      	movs	r0, #0
}
   1582e:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15830:	2002      	movs	r0, #2
}
   15832:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15834:	2002      	movs	r0, #2
}
   15836:	4770      	bx	lr
   15838:	20006f24 	.word	0x20006f24
   1583c:	10624dd3 	.word	0x10624dd3

00015840 <ll_apto_set>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   15840:	2803      	cmp	r0, #3
   15842:	d81e      	bhi.n	15882 <ll_apto_set+0x42>
{
   15844:	b538      	push	{r3, r4, r5, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   15846:	4602      	mov	r2, r0
   15848:	4605      	mov	r5, r0
   1584a:	460c      	mov	r4, r1
   1584c:	480e      	ldr	r0, [pc, #56]	; (15888 <ll_apto_set+0x48>)
   1584e:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   15852:	f7fa fbe5 	bl	10020 <mem_get>
	if (conn->lll.handle != handle) {
   15856:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
   15858:	42aa      	cmp	r2, r5
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1585a:	4603      	mov	r3, r0
	if (conn->lll.handle != handle) {
   1585c:	d10f      	bne.n	1587e <ll_apto_set+0x3e>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10U * 1000U,
   1585e:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
   15860:	f240 41e2 	movw	r1, #1250	; 0x4e2
   15864:	fb01 f202 	mul.w	r2, r1, r2
   15868:	f242 7110 	movw	r1, #10000	; 0x2710
   1586c:	fb01 2104 	mla	r1, r1, r4, r2
   15870:	3901      	subs	r1, #1
	return 0;
   15872:	2000      	movs	r0, #0
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10U * 1000U,
   15874:	fbb1 f1f2 	udiv	r1, r1, r2
   15878:	f8a3 10b6 	strh.w	r1, [r3, #182]	; 0xb6
}
   1587c:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1587e:	2002      	movs	r0, #2
}
   15880:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15882:	2002      	movs	r0, #2
}
   15884:	4770      	bx	lr
   15886:	bf00      	nop
   15888:	20006f24 	.word	0x20006f24

0001588c <ull_conn_init>:
	err = init_reset();
   1588c:	f7ff b98a 	b.w	14ba4 <init_reset>

00015890 <ull_conn_reset>:
{
   15890:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   15894:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 1597c <ull_conn_reset+0xec>
	LL_ASSERT(mark == conn);
   15898:	4f31      	ldr	r7, [pc, #196]	; (15960 <ull_conn_reset+0xd0>)
   1589a:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 15980 <ull_conn_reset+0xf0>
{
   1589e:	b085      	sub	sp, #20
   158a0:	2500      	movs	r5, #0
   158a2:	ae03      	add	r6, sp, #12
	volatile uint32_t ret_cb = TICKER_STATUS_BUSY;
   158a4:	2302      	movs	r3, #2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   158a6:	b2aa      	uxth	r2, r5
   158a8:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   158ac:	4648      	mov	r0, r9
	volatile uint32_t ret_cb = TICKER_STATUS_BUSY;
   158ae:	9303      	str	r3, [sp, #12]
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   158b0:	f7fa fbb6 	bl	10020 <mem_get>
   158b4:	4604      	mov	r4, r0
	mark = ull_disable_mark(conn);
   158b6:	f7fe fe1f 	bl	144f8 <ull_disable_mark>
	LL_ASSERT(mark == conn);
   158ba:	4284      	cmp	r4, r0
   158bc:	d00c      	beq.n	158d8 <ull_conn_reset+0x48>
   158be:	4829      	ldr	r0, [pc, #164]	; (15964 <ull_conn_reset+0xd4>)
   158c0:	f640 2365 	movw	r3, #2661	; 0xa65
   158c4:	463a      	mov	r2, r7
   158c6:	4641      	mov	r1, r8
   158c8:	f008 fb3f 	bl	1df4a <printk>
   158cc:	4040      	eors	r0, r0
   158ce:	f380 8811 	msr	BASEPRI, r0
   158d2:	f04f 0003 	mov.w	r0, #3
   158d6:	df02      	svc	2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   158d8:	1cea      	adds	r2, r5, #3
   158da:	2103      	movs	r1, #3
   158dc:	4b22      	ldr	r3, [pc, #136]	; (15968 <ull_conn_reset+0xd8>)
   158de:	9600      	str	r6, [sp, #0]
   158e0:	b2d2      	uxtb	r2, r2
   158e2:	2000      	movs	r0, #0
   158e4:	f7fc f83a 	bl	1195c <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   158e8:	4631      	mov	r1, r6
   158ea:	f7fe fdf7 	bl	144dc <ull_ticker_status_take>
	if (!ret) {
   158ee:	b310      	cbz	r0, 15936 <ull_conn_reset+0xa6>
	conn->lll.link_tx_free = NULL;
   158f0:	2300      	movs	r3, #0
   158f2:	65e3      	str	r3, [r4, #92]	; 0x5c
	mark = ull_disable_unmark(conn);
   158f4:	4620      	mov	r0, r4
   158f6:	f7fe fe0b 	bl	14510 <ull_disable_unmark>
	LL_ASSERT(mark == conn);
   158fa:	4284      	cmp	r4, r0
   158fc:	d00c      	beq.n	15918 <ull_conn_reset+0x88>
   158fe:	4819      	ldr	r0, [pc, #100]	; (15964 <ull_conn_reset+0xd4>)
   15900:	f640 2374 	movw	r3, #2676	; 0xa74
   15904:	463a      	mov	r2, r7
   15906:	4641      	mov	r1, r8
   15908:	f008 fb1f 	bl	1df4a <printk>
   1590c:	4040      	eors	r0, r0
   1590e:	f380 8811 	msr	BASEPRI, r0
   15912:	f04f 0003 	mov.w	r0, #3
   15916:	df02      	svc	2
	for (handle = 0U; handle < CONFIG_BT_MAX_CONN; handle++) {
   15918:	3501      	adds	r5, #1
   1591a:	2d04      	cmp	r5, #4
   1591c:	d1c2      	bne.n	158a4 <ull_conn_reset+0x14>
	MFIFO_INIT(conn_ack);
   1591e:	4913      	ldr	r1, [pc, #76]	; (1596c <ull_conn_reset+0xdc>)
	MFIFO_INIT(conn_tx);
   15920:	4813      	ldr	r0, [pc, #76]	; (15970 <ull_conn_reset+0xe0>)
	conn_upd_curr = NULL;
   15922:	4a14      	ldr	r2, [pc, #80]	; (15974 <ull_conn_reset+0xe4>)
	MFIFO_INIT(conn_tx);
   15924:	2300      	movs	r3, #0
   15926:	8043      	strh	r3, [r0, #2]
	MFIFO_INIT(conn_ack);
   15928:	804b      	strh	r3, [r1, #2]
	conn_upd_curr = NULL;
   1592a:	6013      	str	r3, [r2, #0]
	err = init_reset();
   1592c:	f7ff f93a 	bl	14ba4 <init_reset>
}
   15930:	b005      	add	sp, #20
   15932:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		ret = ull_disable(&conn->lll);
   15936:	f104 001c 	add.w	r0, r4, #28
   1593a:	f7fe fe19 	bl	14570 <ull_disable>
		LL_ASSERT(!ret);
   1593e:	2800      	cmp	r0, #0
   15940:	d0d6      	beq.n	158f0 <ull_conn_reset+0x60>
   15942:	490d      	ldr	r1, [pc, #52]	; (15978 <ull_conn_reset+0xe8>)
   15944:	4807      	ldr	r0, [pc, #28]	; (15964 <ull_conn_reset+0xd4>)
   15946:	f640 236e 	movw	r3, #2670	; 0xa6e
   1594a:	463a      	mov	r2, r7
   1594c:	f008 fafd 	bl	1df4a <printk>
   15950:	4040      	eors	r0, r0
   15952:	f380 8811 	msr	BASEPRI, r0
   15956:	f04f 0003 	mov.w	r0, #3
   1595a:	df02      	svc	2
   1595c:	e7c8      	b.n	158f0 <ull_conn_reset+0x60>
   1595e:	bf00      	nop
   15960:	0002442c 	.word	0x0002442c
   15964:	00023fe4 	.word	0x00023fe4
   15968:	000144d1 	.word	0x000144d1
   1596c:	200004c0 	.word	0x200004c0
   15970:	2000059c 	.word	0x2000059c
   15974:	200075a4 	.word	0x200075a4
   15978:	000242a0 	.word	0x000242a0
   1597c:	20006f24 	.word	0x20006f24
   15980:	000244f8 	.word	0x000244f8

00015984 <ull_conn_default_tx_octets_get>:
	return default_tx_octets;
   15984:	4b01      	ldr	r3, [pc, #4]	; (1598c <ull_conn_default_tx_octets_get+0x8>)
}
   15986:	8818      	ldrh	r0, [r3, #0]
   15988:	4770      	bx	lr
   1598a:	bf00      	nop
   1598c:	2000a2e0 	.word	0x2000a2e0

00015990 <ull_conn_default_tx_time_get>:
	return default_tx_time;
   15990:	4b01      	ldr	r3, [pc, #4]	; (15998 <ull_conn_default_tx_time_get+0x8>)
}
   15992:	8818      	ldrh	r0, [r3, #0]
   15994:	4770      	bx	lr
   15996:	bf00      	nop
   15998:	2000a2e2 	.word	0x2000a2e2

0001599c <ull_conn_default_phy_tx_get>:
	return default_phy_tx;
   1599c:	4b01      	ldr	r3, [pc, #4]	; (159a4 <ull_conn_default_phy_tx_get+0x8>)
}
   1599e:	7818      	ldrb	r0, [r3, #0]
   159a0:	4770      	bx	lr
   159a2:	bf00      	nop
   159a4:	2000a860 	.word	0x2000a860

000159a8 <ull_conn_default_phy_rx_get>:
	return default_phy_rx;
   159a8:	4b01      	ldr	r3, [pc, #4]	; (159b0 <ull_conn_default_phy_rx_get+0x8>)
}
   159aa:	7818      	ldrb	r0, [r3, #0]
   159ac:	4770      	bx	lr
   159ae:	bf00      	nop
   159b0:	2000a85f 	.word	0x2000a85f

000159b4 <ull_conn_setup>:
	lll = *((struct lll_conn **)((uint8_t *)ftr->param +
   159b4:	688b      	ldr	r3, [r1, #8]
   159b6:	689b      	ldr	r3, [r3, #8]
{
   159b8:	b510      	push	{r4, lr}
	switch (lll->role) {
   159ba:	f893 4021 	ldrb.w	r4, [r3, #33]	; 0x21
   159be:	09e4      	lsrs	r4, r4, #7
   159c0:	d105      	bne.n	159ce <ull_conn_setup+0x1a>
			ull_master_setup(link, rx, ftr, lll);
   159c2:	460a      	mov	r2, r1
}
   159c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			ull_master_setup(link, rx, ftr, lll);
   159c8:	3208      	adds	r2, #8
   159ca:	f7ef bb69 	b.w	50a0 <ull_master_setup>
			LL_ASSERT(0);
   159ce:	4a07      	ldr	r2, [pc, #28]	; (159ec <ull_conn_setup+0x38>)
   159d0:	4907      	ldr	r1, [pc, #28]	; (159f0 <ull_conn_setup+0x3c>)
   159d2:	4808      	ldr	r0, [pc, #32]	; (159f4 <ull_conn_setup+0x40>)
   159d4:	f44f 734c 	mov.w	r3, #816	; 0x330
   159d8:	f008 fab7 	bl	1df4a <printk>
   159dc:	4040      	eors	r0, r0
   159de:	f380 8811 	msr	BASEPRI, r0
   159e2:	f04f 0003 	mov.w	r0, #3
   159e6:	df02      	svc	2
}
   159e8:	bd10      	pop	{r4, pc}
   159ea:	bf00      	nop
   159ec:	0002442c 	.word	0x0002442c
   159f0:	00024054 	.word	0x00024054
   159f4:	00023fe4 	.word	0x00023fe4

000159f8 <ull_conn_rx>:
{
   159f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	conn = ll_connected_get((*rx)->hdr.handle);
   159fc:	680b      	ldr	r3, [r1, #0]
   159fe:	88de      	ldrh	r6, [r3, #6]
	if (handle >= CONFIG_BT_MAX_CONN) {
   15a00:	2e03      	cmp	r6, #3
{
   15a02:	b085      	sub	sp, #20
	if (handle >= CONFIG_BT_MAX_CONN) {
   15a04:	f200 80f4 	bhi.w	15bf0 <ull_conn_rx+0x1f8>
   15a08:	460c      	mov	r4, r1
   15a0a:	4607      	mov	r7, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   15a0c:	4632      	mov	r2, r6
   15a0e:	48c8      	ldr	r0, [pc, #800]	; (15d30 <ull_conn_rx+0x338>)
   15a10:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   15a14:	f7fa fb04 	bl	10020 <mem_get>
	if (conn->lll.handle != handle) {
   15a18:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   15a1a:	42b3      	cmp	r3, r6
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   15a1c:	4605      	mov	r5, r0
	if (conn->lll.handle != handle) {
   15a1e:	f040 80e6 	bne.w	15bee <ull_conn_rx+0x1f6>
	pdu_rx = (void *)(*rx)->pdu;
   15a22:	6826      	ldr	r6, [r4, #0]
	switch (pdu_rx->ll_id) {
   15a24:	f890 112a 	ldrb.w	r1, [r0, #298]	; 0x12a
   15a28:	7f33      	ldrb	r3, [r6, #28]
   15a2a:	f003 0303 	and.w	r3, r3, #3
   15a2e:	2b03      	cmp	r3, #3
   15a30:	f001 0201 	and.w	r2, r1, #1
   15a34:	f040 80e2 	bne.w	15bfc <ull_conn_rx+0x204>
			struct pdu_data *pdu_rx, struct ll_conn *conn)
	{
		int nack = 0;
		uint8_t opcode;

		opcode = pdu_rx->llctrl.opcode;
   15a38:	f896 801f 	ldrb.w	r8, [r6, #31]

#if defined(CONFIG_BT_CTLR_LE_ENC)
		/* FIXME: do check in individual case to reduce CPU time */
		if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   15a3c:	2a00      	cmp	r2, #0
   15a3e:	f000 80e7 	beq.w	15c10 <ull_conn_rx+0x218>
				  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   15a42:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
   15a46:	2b00      	cmp	r3, #0
   15a48:	f001 0204 	and.w	r2, r1, #4
   15a4c:	f2c0 8176 	blt.w	15d3c <ull_conn_rx+0x344>
		return (!conn->lll.role &&
   15a50:	2a00      	cmp	r2, #0
   15a52:	f000 85ff 	beq.w	16654 <ull_conn_rx+0xc5c>
				 (conn->llcp_enc.refresh &&
   15a56:	f1b8 0f02 	cmp.w	r8, #2
   15a5a:	f000 82e0 	beq.w	1601e <ull_conn_rx+0x626>
				  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   15a5e:	f1b8 0f0b 	cmp.w	r8, #11
   15a62:	f000 8606 	beq.w	16672 <ull_conn_rx+0xc7a>
				  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   15a66:	f1b8 0f04 	cmp.w	r8, #4
   15a6a:	f000 84e6 	beq.w	1643a <ull_conn_rx+0xa42>
				  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   15a6e:	f1b8 0f05 	cmp.w	r8, #5
   15a72:	f000 8505 	beq.w	16480 <ull_conn_rx+0xa88>
   15a76:	f1b8 0f06 	cmp.w	r8, #6
   15a7a:	f000 864e 	beq.w	1671a <ull_conn_rx+0xd22>
			   (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   15a7e:	f1b8 0f0d 	cmp.w	r8, #13
   15a82:	f000 83bb 	beq.w	161fc <ull_conn_rx+0x804>
   15a86:	f1b8 0f11 	cmp.w	r8, #17
   15a8a:	f040 8104 	bne.w	15c96 <ull_conn_rx+0x29e>

				break;
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

			case PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND:
				if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND,
   15a8e:	7f73      	ldrb	r3, [r6, #29]
   15a90:	2b03      	cmp	r3, #3
   15a92:	f040 810b 	bne.w	15cac <ull_conn_rx+0x2b4>
		switch (rej_ext_ind->reject_opcode) {
   15a96:	f896 3020 	ldrb.w	r3, [r6, #32]
   15a9a:	3b03      	subs	r3, #3
   15a9c:	2b13      	cmp	r3, #19
   15a9e:	f200 80b1 	bhi.w	15c04 <ull_conn_rx+0x20c>
   15aa2:	e8df f013 	tbh	[pc, r3, lsl #1]
   15aa6:	0598      	.short	0x0598
   15aa8:	00af00af 	.word	0x00af00af
   15aac:	00af00af 	.word	0x00af00af
   15ab0:	00af00af 	.word	0x00af00af
   15ab4:	00af00af 	.word	0x00af00af
   15ab8:	00af00af 	.word	0x00af00af
   15abc:	055f00af 	.word	0x055f00af
   15ac0:	00af00af 	.word	0x00af00af
   15ac4:	00af00af 	.word	0x00af00af
   15ac8:	00af05b8 	.word	0x00af05b8
   15acc:	052c      	.short	0x052c
				printk("PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP\n");
   15ace:	4899      	ldr	r0, [pc, #612]	; (15d34 <ull_conn_rx+0x33c>)
   15ad0:	f008 fa3b 	bl	1df4a <printk>
				if (conn->lll.role ||
   15ad4:	f995 303d 	ldrsb.w	r3, [r5, #61]	; 0x3d
   15ad8:	2b00      	cmp	r3, #0
   15ada:	f2c0 80e6 	blt.w	15caa <ull_conn_rx+0x2b2>
   15ade:	7f73      	ldrb	r3, [r6, #29]
   15ae0:	2b18      	cmp	r3, #24
   15ae2:	f040 80e2 	bne.w	15caa <ull_conn_rx+0x2b2>
				if (!conn->lll.role &&
   15ae6:	f895 2148 	ldrb.w	r2, [r5, #328]	; 0x148
   15aea:	f895 3149 	ldrb.w	r3, [r5, #329]	; 0x149
   15aee:	429a      	cmp	r2, r3
   15af0:	d07d      	beq.n	15bee <ull_conn_rx+0x1f6>
						(conn->llcp_conn_param.state ==
   15af2:	f895 314a 	ldrb.w	r3, [r5, #330]	; 0x14a
						 conn->llcp_conn_param.ack) &&
   15af6:	f003 0307 	and.w	r3, r3, #7
   15afa:	2b04      	cmp	r3, #4
   15afc:	d177      	bne.n	15bee <ull_conn_rx+0x1f6>
					uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   15afe:	8c37      	ldrh	r7, [r6, #32]
					if ((interval_min < 6) ||
   15b00:	2f05      	cmp	r7, #5
					uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   15b02:	b2ba      	uxth	r2, r7
					if ((interval_min < 6) ||
   15b04:	f241 8173 	bls.w	16dee <ull_conn_rx+0x13f6>
					uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   15b08:	8c70      	ldrh	r0, [r6, #34]	; 0x22
					if ((interval_min < 6) ||
   15b0a:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
					uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   15b0e:	b283      	uxth	r3, r0
					if ((interval_min < 6) ||
   15b10:	f201 816d 	bhi.w	16dee <ull_conn_rx+0x13f6>
							(interval_max > 3200) ||
   15b14:	429a      	cmp	r2, r3
   15b16:	f201 816a 	bhi.w	16dee <ull_conn_rx+0x13f6>
					uint16_t latency = sys_le16_to_cpu(cpr->latency);
   15b1a:	8cb1      	ldrh	r1, [r6, #36]	; 0x24
							(interval_min > interval_max) ||
   15b1c:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
					uint16_t latency = sys_le16_to_cpu(cpr->latency);
   15b20:	fa1f fc81 	uxth.w	ip, r1
							(interval_min > interval_max) ||
   15b24:	f081 8163 	bcs.w	16dee <ull_conn_rx+0x13f6>
					uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
   15b28:	8cf2      	ldrh	r2, [r6, #38]	; 0x26
							(latency > 499) ||
   15b2a:	f1a2 0e0a 	sub.w	lr, r2, #10
   15b2e:	fa1f fe8e 	uxth.w	lr, lr
   15b32:	f640 4976 	movw	r9, #3190	; 0xc76
   15b36:	45ce      	cmp	lr, r9
					uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
   15b38:	fa1f f882 	uxth.w	r8, r2
							(latency > 499) ||
   15b3c:	f201 8157 	bhi.w	16dee <ull_conn_rx+0x13f6>
							 ((latency + 1) * interval_max)) ||
   15b40:	fb0c 3c03 	mla	ip, ip, r3, r3
							(timeout < 10) || (timeout > 3200) ||
   15b44:	ebbc 0f88 	cmp.w	ip, r8, lsl #2
   15b48:	f081 8151 	bcs.w	16dee <ull_conn_rx+0x13f6>
							 ((latency + 1) * interval_max)) ||
   15b4c:	f896 e028 	ldrb.w	lr, [r6, #40]	; 0x28
   15b50:	4573      	cmp	r3, lr
   15b52:	f0c1 814c 	bcc.w	16dee <ull_conn_rx+0x13f6>
					conn->procedure_expire = 0U;
   15b56:	2300      	movs	r3, #0
					conn->llcp_conn_param.timeout =	timeout;
   15b58:	f8a5 2152 	strh.w	r2, [r5, #338]	; 0x152
					conn->llcp_conn_param.interval_min = interval_min;
   15b5c:	f8a5 714c 	strh.w	r7, [r5, #332]	; 0x14c
					conn->llcp_conn_param.interval_max = interval_max;
   15b60:	f8a5 014e 	strh.w	r0, [r5, #334]	; 0x14e
					conn->llcp_conn_param.latency =	latency;
   15b64:	f8a5 1150 	strh.w	r1, [r5, #336]	; 0x150
					conn->llcp_conn_param.preferred_periodicity =
   15b68:	f885 e154 	strb.w	lr, [r5, #340]	; 0x154
					conn->procedure_expire = 0U;
   15b6c:	f8a5 30b0 	strh.w	r3, [r5, #176]	; 0xb0
						sys_le16_to_cpu(cpr->reference_conn_event_count);
   15b70:	f896 102a 	ldrb.w	r1, [r6, #42]	; 0x2a
   15b74:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
					conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   15b78:	f895 214a 	ldrb.w	r2, [r5, #330]	; 0x14a
						sys_le16_to_cpu(cpr->reference_conn_event_count);
   15b7c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
					conn->llcp_conn_param.reference_conn_event_count =
   15b80:	f8a5 3156 	strh.w	r3, [r5, #342]	; 0x156
						sys_le16_to_cpu(cpr->offset0);
   15b84:	f896 102c 	ldrb.w	r1, [r6, #44]	; 0x2c
   15b88:	f896 302b 	ldrb.w	r3, [r6, #43]	; 0x2b
   15b8c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
					conn->llcp_conn_param.offset0 =
   15b90:	f8a5 3158 	strh.w	r3, [r5, #344]	; 0x158
						sys_le16_to_cpu(cpr->offset1);
   15b94:	f896 102e 	ldrb.w	r1, [r6, #46]	; 0x2e
   15b98:	f896 302d 	ldrb.w	r3, [r6, #45]	; 0x2d
   15b9c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
					conn->llcp_conn_param.offset1 =
   15ba0:	f8a5 315a 	strh.w	r3, [r5, #346]	; 0x15a
						sys_le16_to_cpu(cpr->offset2);
   15ba4:	f896 1030 	ldrb.w	r1, [r6, #48]	; 0x30
   15ba8:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
   15bac:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
					conn->llcp_conn_param.offset2 =
   15bb0:	f8a5 315c 	strh.w	r3, [r5, #348]	; 0x15c
						sys_le16_to_cpu(cpr->offset3);
   15bb4:	f896 1032 	ldrb.w	r1, [r6, #50]	; 0x32
   15bb8:	f896 3031 	ldrb.w	r3, [r6, #49]	; 0x31
   15bbc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
					conn->llcp_conn_param.offset3 =
   15bc0:	f8a5 315e 	strh.w	r3, [r5, #350]	; 0x15e
						sys_le16_to_cpu(cpr->offset4);
   15bc4:	f896 1034 	ldrb.w	r1, [r6, #52]	; 0x34
   15bc8:	f896 3033 	ldrb.w	r3, [r6, #51]	; 0x33
   15bcc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
					conn->llcp_conn_param.offset4 =
   15bd0:	f8a5 3160 	strh.w	r3, [r5, #352]	; 0x160
						sys_le16_to_cpu(cpr->offset5);
   15bd4:	f896 3035 	ldrb.w	r3, [r6, #53]	; 0x35
   15bd8:	f896 0036 	ldrb.w	r0, [r6, #54]	; 0x36
					conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   15bdc:	2101      	movs	r1, #1
						sys_le16_to_cpu(cpr->offset5);
   15bde:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
					conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   15be2:	f361 0202 	bfi	r2, r1, #0, #3
					conn->llcp_conn_param.offset5 =
   15be6:	f8a5 3162 	strh.w	r3, [r5, #354]	; 0x162
					conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   15bea:	f885 214a 	strb.w	r2, [r5, #330]	; 0x14a
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   15bee:	6823      	ldr	r3, [r4, #0]
   15bf0:	2203      	movs	r2, #3
   15bf2:	711a      	strb	r2, [r3, #4]
		int nack = 0;
   15bf4:	2000      	movs	r0, #0
}
   15bf6:	b005      	add	sp, #20
   15bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (pdu_rx->ll_id) {
   15bfc:	2b00      	cmp	r3, #0
   15bfe:	d148      	bne.n	15c92 <ull_conn_rx+0x29a>
			if (conn->llcp_enc.pause_rx) {
   15c00:	2a00      	cmp	r2, #0
   15c02:	d141      	bne.n	15c88 <ull_conn_rx+0x290>
			(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   15c04:	2303      	movs	r3, #3
   15c06:	7133      	strb	r3, [r6, #4]
	return 0;
   15c08:	2000      	movs	r0, #0
}
   15c0a:	b005      	add	sp, #20
   15c0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	pdu_rx = (void *)(*rx)->pdu;
   15c10:	f106 021c 	add.w	r2, r6, #28
		switch (opcode) {
   15c14:	f1b8 0f19 	cmp.w	r8, #25
   15c18:	d848      	bhi.n	15cac <ull_conn_rx+0x2b4>
   15c1a:	a301      	add	r3, pc, #4	; (adr r3, 15c20 <ull_conn_rx+0x228>)
   15c1c:	f853 f028 	ldr.w	pc, [r3, r8, lsl #2]
   15c20:	00015f35 	.word	0x00015f35
   15c24:	00016223 	.word	0x00016223
   15c28:	0001601f 	.word	0x0001601f
   15c2c:	000163a9 	.word	0x000163a9
   15c30:	00016431 	.word	0x00016431
   15c34:	00016477 	.word	0x00016477
   15c38:	000164b5 	.word	0x000164b5
   15c3c:	00016295 	.word	0x00016295
   15c40:	0001628b 	.word	0x0001628b
   15c44:	000162e1 	.word	0x000162e1
   15c48:	00016141 	.word	0x00016141
   15c4c:	000164dd 	.word	0x000164dd
   15c50:	0001634b 	.word	0x0001634b
   15c54:	000161fd 	.word	0x000161fd
   15c58:	000161dd 	.word	0x000161dd
   15c5c:	00016119 	.word	0x00016119
   15c60:	00015acf 	.word	0x00015acf
   15c64:	00015a8f 	.word	0x00015a8f
   15c68:	00015f03 	.word	0x00015f03
   15c6c:	00015e11 	.word	0x00015e11
   15c70:	00015da7 	.word	0x00015da7
   15c74:	00015da7 	.word	0x00015da7
   15c78:	00015ea1 	.word	0x00015ea1
   15c7c:	00015e27 	.word	0x00015e27
   15c80:	0001609f 	.word	0x0001609f
   15c84:	00016037 	.word	0x00016037
				conn->llcp_terminate.reason_peer =
   15c88:	233d      	movs	r3, #61	; 0x3d
   15c8a:	f880 3107 	strb.w	r3, [r0, #263]	; 0x107
   15c8e:	6826      	ldr	r6, [r4, #0]
   15c90:	e7b8      	b.n	15c04 <ull_conn_rx+0x20c>
			if (conn->llcp_enc.pause_rx) {
   15c92:	2a00      	cmp	r2, #0
   15c94:	d0b8      	beq.n	15c08 <ull_conn_rx+0x210>
			conn->llcp_terminate.reason_peer =
   15c96:	233d      	movs	r3, #61	; 0x3d
   15c98:	f885 3107 	strb.w	r3, [r5, #263]	; 0x107
			(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   15c9c:	6823      	ldr	r3, [r4, #0]
   15c9e:	2203      	movs	r2, #3
			return 0;
   15ca0:	2000      	movs	r0, #0
			(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   15ca2:	711a      	strb	r2, [r3, #4]
}
   15ca4:	b005      	add	sp, #20
   15ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15caa:	6826      	ldr	r6, [r4, #0]
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   15cac:	4822      	ldr	r0, [pc, #136]	; (15d38 <ull_conn_rx+0x340>)
   15cae:	f7fa f985 	bl	ffbc <mem_acquire>
		if (!tx) {
   15cb2:	2800      	cmp	r0, #0
   15cb4:	f000 85f5 	beq.w	168a2 <ull_conn_rx+0xeaa>
		pdu->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
   15cb8:	2302      	movs	r3, #2
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   15cba:	7902      	ldrb	r2, [r0, #4]
		pdu->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
   15cbc:	7143      	strb	r3, [r0, #5]
			conn->tx_head &&
   15cbe:	f8d5 3188 	ldr.w	r3, [r5, #392]	; 0x188
		pdu->llctrl.unknown_rsp.type = type;
   15cc2:	f880 8008 	strb.w	r8, [r0, #8]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   15cc6:	f042 0203 	orr.w	r2, r2, #3
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   15cca:	2107      	movs	r1, #7
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   15ccc:	7102      	strb	r2, [r0, #4]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   15cce:	71c1      	strb	r1, [r0, #7]
	if (
   15cd0:	b1eb      	cbz	r3, 15d0e <ull_conn_rx+0x316>
			!conn->llcp_enc.pause_tx &&
   15cd2:	f895 212a 	ldrb.w	r2, [r5, #298]	; 0x12a
			conn->tx_head &&
   15cd6:	0791      	lsls	r1, r2, #30
   15cd8:	d419      	bmi.n	15d0e <ull_conn_rx+0x316>
			!conn->llcp_phy.pause_tx &&
   15cda:	f895 2183 	ldrb.w	r2, [r5, #387]	; 0x183
   15cde:	07d2      	lsls	r2, r2, #31
   15ce0:	d415      	bmi.n	15d0e <ull_conn_rx+0x316>
		if (conn->tx_head == conn->tx_data) {
   15ce2:	f8d5 2194 	ldr.w	r2, [r5, #404]	; 0x194
   15ce6:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   15ce8:	bf04      	itt	eq
   15cea:	681a      	ldreq	r2, [r3, #0]
   15cec:	f8c5 2194 	streq.w	r2, [r5, #404]	; 0x194
		if (!conn->tx_ctrl) {
   15cf0:	f8d5 218c 	ldr.w	r2, [r5, #396]	; 0x18c
   15cf4:	b982      	cbnz	r2, 15d18 <ull_conn_rx+0x320>
			tx->next = conn->tx_head->next;
   15cf6:	681a      	ldr	r2, [r3, #0]
   15cf8:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   15cfa:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   15cfc:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   15cfe:	e9c5 0063 	strd	r0, r0, [r5, #396]	; 0x18c
	if (!tx->next) {
   15d02:	2b00      	cmp	r3, #0
   15d04:	f47f af7e 	bne.w	15c04 <ull_conn_rx+0x20c>
		conn->tx_data_last = tx;
   15d08:	f8c5 0198 	str.w	r0, [r5, #408]	; 0x198
		rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   15d0c:	e77a      	b.n	15c04 <ull_conn_rx+0x20c>
		if (!conn->tx_ctrl) {
   15d0e:	f8d5 218c 	ldr.w	r2, [r5, #396]	; 0x18c
   15d12:	2a00      	cmp	r2, #0
   15d14:	f000 84a3 	beq.w	1665e <ull_conn_rx+0xc66>
	tx->next = conn->tx_ctrl_last->next;
   15d18:	f8d5 3190 	ldr.w	r3, [r5, #400]	; 0x190
   15d1c:	681a      	ldr	r2, [r3, #0]
   15d1e:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   15d20:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   15d22:	f8c5 0190 	str.w	r0, [r5, #400]	; 0x190
   15d26:	6803      	ldr	r3, [r0, #0]
	if (!tx->next) {
   15d28:	2b00      	cmp	r3, #0
   15d2a:	f47f af6b 	bne.w	15c04 <ull_conn_rx+0x20c>
   15d2e:	e7eb      	b.n	15d08 <ull_conn_rx+0x310>
   15d30:	20006f24 	.word	0x20006f24
   15d34:	00024508 	.word	0x00024508
   15d38:	2000802c 	.word	0x2000802c
			(conn->lll.role &&
   15d3c:	2a00      	cmp	r2, #0
   15d3e:	f000 8166 	beq.w	1600e <ull_conn_rx+0x616>
			  (conn->llcp_enc.refresh &&
   15d42:	f1b8 0f02 	cmp.w	r8, #2
   15d46:	f000 816a 	beq.w	1601e <ull_conn_rx+0x626>
			   (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   15d4a:	f1b8 0f0b 	cmp.w	r8, #11
   15d4e:	f000 84ea 	beq.w	16726 <ull_conn_rx+0xd2e>
			   (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   15d52:	f1b8 0f03 	cmp.w	r8, #3
   15d56:	f000 832c 	beq.w	163b2 <ull_conn_rx+0x9ba>
			   (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   15d5a:	f1b8 0f06 	cmp.w	r8, #6
   15d5e:	f47f ae8e 	bne.w	15a7e <ull_conn_rx+0x86>
				if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_RSP,
   15d62:	7f73      	ldrb	r3, [r6, #29]
   15d64:	2b01      	cmp	r3, #1
   15d66:	d1a1      	bne.n	15cac <ull_conn_rx+0x2b4>
					if ((conn->llcp_req != conn->llcp_ack) &&
   15d68:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
   15d6c:	f895 30bf 	ldrb.w	r3, [r5, #191]	; 0xbf
   15d70:	4293      	cmp	r3, r2
   15d72:	f001 80d0 	beq.w	16f16 <ull_conn_rx+0x151e>
   15d76:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
   15d7a:	2b03      	cmp	r3, #3
   15d7c:	d196      	bne.n	15cac <ull_conn_rx+0x2b4>
					conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   15d7e:	f895 30c4 	ldrb.w	r3, [r5, #196]	; 0xc4
   15d82:	f36f 0301 	bfc	r3, #0, #2
   15d86:	f885 30c4 	strb.w	r3, [r5, #196]	; 0xc4
				if (conn->llcp_enc.refresh) {
   15d8a:	074e      	lsls	r6, r1, #29
   15d8c:	d506      	bpl.n	15d9c <ull_conn_rx+0x3a4>
					(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   15d8e:	6823      	ldr	r3, [r4, #0]
					conn->llcp_enc.refresh = 0U;
   15d90:	f36f 0182 	bfc	r1, #2, #1
					(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   15d94:	220c      	movs	r2, #12
					conn->llcp_enc.refresh = 0U;
   15d96:	f885 112a 	strb.w	r1, [r5, #298]	; 0x12a
					(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   15d9a:	711a      	strb	r2, [r3, #4]
							break;
					}
				}

				/* Procedure complete */
				conn->procedure_expire = 0U;
   15d9c:	2300      	movs	r3, #0
   15d9e:	f8a5 30b0 	strh.w	r3, [r5, #176]	; 0xb0
		int nack = 0;
   15da2:	4618      	mov	r0, r3
				break;
   15da4:	e727      	b.n	15bf6 <ull_conn_rx+0x1fe>

#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
			case PDU_DATA_LLCTRL_TYPE_LENGTH_RSP:
			case PDU_DATA_LLCTRL_TYPE_LENGTH_REQ:
				if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_LENGTH_REQ,
   15da6:	7f73      	ldrb	r3, [r6, #29]
   15da8:	2b09      	cmp	r3, #9
   15daa:	f47f af7f 	bne.w	15cac <ull_conn_rx+0x2b4>
		if (pdu_rx->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
   15dae:	f1b8 0f14 	cmp.w	r8, #20
   15db2:	f000 84bd 	beq.w	16730 <ull_conn_rx+0xd38>
				((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   15db6:	f890 1170 	ldrb.w	r1, [r0, #368]	; 0x170
		if (/* Local idle, and Peer request then complete the Peer procedure
   15dba:	f890 3171 	ldrb.w	r3, [r0, #369]	; 0x171
		eff_rx_octets = conn->lll.max_rx_octets;
   15dbe:	f8b0 2042 	ldrh.w	r2, [r0, #66]	; 0x42
		eff_tx_octets = conn->lll.max_tx_octets;
   15dc2:	f8b0 9040 	ldrh.w	r9, [r0, #64]	; 0x40
		eff_rx_time = conn->lll.max_rx_time;
   15dc6:	f8b0 a046 	ldrh.w	sl, [r0, #70]	; 0x46
		eff_tx_time = conn->lll.max_tx_time;
   15dca:	f8b0 b044 	ldrh.w	fp, [r0, #68]	; 0x44
				((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   15dce:	9100      	str	r1, [sp, #0]
		if (/* Local idle, and Peer request then complete the Peer procedure
   15dd0:	428b      	cmp	r3, r1
		eff_rx_octets = conn->lll.max_rx_octets;
   15dd2:	9201      	str	r2, [sp, #4]
		if (/* Local idle, and Peer request then complete the Peer procedure
   15dd4:	f001 805a 	beq.w	16e8c <ull_conn_rx+0x1494>
				 ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
   15dd8:	f890 3172 	ldrb.w	r3, [r0, #370]	; 0x172
		struct node_tx *tx = NULL;
   15ddc:	2100      	movs	r1, #0
				   tx) ||
   15dde:	f003 0307 	and.w	r3, r3, #7
   15de2:	2b02      	cmp	r3, #2
   15de4:	f000 84bc 	beq.w	16760 <ull_conn_rx+0xd68>
   15de8:	f896 801f 	ldrb.w	r8, [r6, #31]
			if (pdu_rx->llctrl.opcode != PDU_DATA_LLCTRL_TYPE_LENGTH_RSP) {
   15dec:	f1b8 0f15 	cmp.w	r8, #21
   15df0:	f43f af0a 	beq.w	15c08 <ull_conn_rx+0x210>
				mem_release(tx, &mem_conn_tx_ctrl.free);
   15df4:	4608      	mov	r0, r1
   15df6:	49d0      	ldr	r1, [pc, #832]	; (16138 <ull_conn_rx+0x740>)
   15df8:	f7fa f8fa 	bl	fff0 <mem_release>
				if (conn->llcp_length.state ==
   15dfc:	f895 3172 	ldrb.w	r3, [r5, #370]	; 0x172
   15e00:	f003 0307 	and.w	r3, r3, #7
   15e04:	2b04      	cmp	r3, #4
   15e06:	f47f aeff 	bne.w	15c08 <ull_conn_rx+0x210>
					return -EBUSY;
   15e0a:	f06f 000f 	mvn.w	r0, #15
   15e0e:	e6f2      	b.n	15bf6 <ull_conn_rx+0x1fe>
				if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_RSP, pdu_rx->len)) {
   15e10:	7f73      	ldrb	r3, [r6, #29]
   15e12:	2b01      	cmp	r3, #1
   15e14:	f47f af4a 	bne.w	15cac <ull_conn_rx+0x2b4>
				conn->procedure_expire = 0U;
   15e18:	2300      	movs	r3, #0
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   15e1a:	2203      	movs	r2, #3
				conn->procedure_expire = 0U;
   15e1c:	f8a0 30b0 	strh.w	r3, [r0, #176]	; 0xb0
		int nack = 0;
   15e20:	4618      	mov	r0, r3
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   15e22:	7132      	strb	r2, [r6, #4]
				break;
   15e24:	e6e7      	b.n	15bf6 <ull_conn_rx+0x1fe>
					nack = phy_rsp_send(conn, *rx, pdu_rx);
				}
				break;

			case PDU_DATA_LLCTRL_TYPE_PHY_RSP:
				if (conn->lll.role ||
   15e26:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
   15e2a:	2b00      	cmp	r3, #0
   15e2c:	f6ff af3e 	blt.w	15cac <ull_conn_rx+0x2b4>
   15e30:	7f73      	ldrb	r3, [r6, #29]
   15e32:	2b03      	cmp	r3, #3
   15e34:	f47f af3a 	bne.w	15cac <ull_conn_rx+0x2b4>
						!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_RSP, pdu_rx->len)) {
					goto ull_conn_rx_unknown_rsp_send;
				}

				if (!conn->lll.role &&
   15e38:	f890 2181 	ldrb.w	r2, [r0, #385]	; 0x181
   15e3c:	f890 3180 	ldrb.w	r3, [r0, #384]	; 0x180
   15e40:	429a      	cmp	r2, r3
   15e42:	f43f aedf 	beq.w	15c04 <ull_conn_rx+0x20c>
						(conn->llcp_phy.ack != conn->llcp_phy.req) &&
						(conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
   15e46:	f890 1182 	ldrb.w	r1, [r0, #386]	; 0x182
						(conn->llcp_phy.ack != conn->llcp_phy.req) &&
   15e4a:	f001 0303 	and.w	r3, r1, #3
   15e4e:	2b02      	cmp	r3, #2
   15e50:	f47f aed8 	bne.w	15c04 <ull_conn_rx+0x20c>
					struct pdu_data_llctrl_phy_rsp *p =
						&pdu_rx->llctrl.phy_rsp;

					conn->llcp_phy.state = LLCP_PHY_STATE_UPD;

					conn->llcp_phy.tx &= p->rx_phys;
   15e54:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
					conn->llcp_phy.rx &= p->tx_phys;
   15e58:	f896 2020 	ldrb.w	r2, [r6, #32]
					conn->llcp_phy.tx &= p->rx_phys;
   15e5c:	f3c1 0082 	ubfx	r0, r1, #2, #3
   15e60:	4003      	ands	r3, r0
					conn->llcp_phy.state = LLCP_PHY_STATE_UPD;
   15e62:	009b      	lsls	r3, r3, #2
   15e64:	f043 0303 	orr.w	r3, r3, #3
					conn->llcp_phy.rx &= p->tx_phys;
   15e68:	ea02 1251 	and.w	r2, r2, r1, lsr #5
					conn->llcp_phy.state = LLCP_PHY_STATE_UPD;
   15e6c:	ea43 1342 	orr.w	r3, r3, r2, lsl #5

					if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   15e70:	f013 0f1c 	tst.w	r3, #28
					conn->llcp_phy.state = LLCP_PHY_STATE_UPD;
   15e74:	f885 3182 	strb.w	r3, [r5, #386]	; 0x182
					if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   15e78:	d002      	beq.n	15e80 <ull_conn_rx+0x488>
   15e7a:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   15e7e:	d105      	bne.n	15e8c <ull_conn_rx+0x494>
						conn->llcp_phy.tx = 0;
   15e80:	f895 3182 	ldrb.w	r3, [r5, #386]	; 0x182
   15e84:	f003 0303 	and.w	r3, r3, #3
   15e88:	f885 3182 	strb.w	r3, [r5, #386]	; 0x182
						conn->llcp_phy.rx = 0;
					}

					/* pause data packet tx */
					conn->llcp_phy.pause_tx = 1U;
   15e8c:	f895 3183 	ldrb.w	r3, [r5, #387]	; 0x183

					/* Procedure timeout is stopped */
					conn->procedure_expire = 0U;
   15e90:	2200      	movs	r2, #0
					conn->llcp_phy.pause_tx = 1U;
   15e92:	f043 0301 	orr.w	r3, r3, #1
   15e96:	f885 3183 	strb.w	r3, [r5, #387]	; 0x183
					conn->procedure_expire = 0U;
   15e9a:	f8a5 20b0 	strh.w	r2, [r5, #176]	; 0xb0
				}

				/* Mark for buffer for release */
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   15e9e:	e6b1      	b.n	15c04 <ull_conn_rx+0x20c>
				if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_REQ, pdu_rx->len)) {
   15ea0:	7f73      	ldrb	r3, [r6, #29]
   15ea2:	2b03      	cmp	r3, #3
   15ea4:	f47f af02 	bne.w	15cac <ull_conn_rx+0x2b4>
				if (!conn->lll.role) {
   15ea8:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
   15eac:	2b00      	cmp	r3, #0
   15eae:	f2c0 8505 	blt.w	168bc <ull_conn_rx+0xec4>
					if ((conn->llcp_phy.ack !=
   15eb2:	f890 2181 	ldrb.w	r2, [r0, #385]	; 0x181
								conn->llcp_phy.req) &&
   15eb6:	f890 1180 	ldrb.w	r1, [r0, #384]	; 0x180
					if ((conn->llcp_phy.ack !=
   15eba:	428a      	cmp	r2, r1
   15ebc:	d007      	beq.n	15ece <ull_conn_rx+0x4d6>
							  LLCP_PHY_STATE_RSP_WAIT) ||
   15ebe:	f890 3182 	ldrb.w	r3, [r0, #386]	; 0x182
   15ec2:	f003 0303 	and.w	r3, r3, #3
								conn->llcp_phy.req) &&
   15ec6:	3b01      	subs	r3, #1
   15ec8:	2b02      	cmp	r3, #2
   15eca:	f240 879f 	bls.w	16e0c <ull_conn_rx+0x1414>
					} else if (((((conn->llcp_req - conn->llcp_ack) &
   15ece:	f895 30bf 	ldrb.w	r3, [r5, #191]	; 0xbf
   15ed2:	f895 00c0 	ldrb.w	r0, [r5, #192]	; 0xc0
   15ed6:	1a1b      	subs	r3, r3, r0
   15ed8:	f003 0303 	and.w	r3, r3, #3
   15edc:	2b02      	cmp	r3, #2
   15ede:	f000 869d 	beq.w	16c1c <ull_conn_rx+0x1224>
								 LLCP_ENCRYPTION)) ||
   15ee2:	f895 0148 	ldrb.w	r0, [r5, #328]	; 0x148
   15ee6:	f895 3149 	ldrb.w	r3, [r5, #329]	; 0x149
   15eea:	4298      	cmp	r0, r3
   15eec:	f000 8739 	beq.w	16d62 <ull_conn_rx+0x136a>
						nack = reject_ext_ind_send(conn, *rx,
   15ef0:	1d31      	adds	r1, r6, #4
   15ef2:	4628      	mov	r0, r5
   15ef4:	232a      	movs	r3, #42	; 0x2a
   15ef6:	2216      	movs	r2, #22
}
   15ef8:	b005      	add	sp, #20
   15efa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
						nack = reject_ext_ind_send(conn, *rx,
   15efe:	f7ff b80b 	b.w	14f18 <reject_ext_ind_send.isra.0>
				if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_REQ, pdu_rx->len)) {
   15f02:	7f74      	ldrb	r4, [r6, #29]
   15f04:	2c01      	cmp	r4, #1
   15f06:	f47f aed1 	bne.w	15cac <ull_conn_rx+0x2b4>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   15f0a:	488b      	ldr	r0, [pc, #556]	; (16138 <ull_conn_rx+0x740>)
   15f0c:	f7fa f856 	bl	ffbc <mem_acquire>
		if (!tx) {
   15f10:	4601      	mov	r1, r0
   15f12:	2800      	cmp	r0, #0
   15f14:	f000 84c5 	beq.w	168a2 <ull_conn_rx+0xeaa>
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   15f18:	7903      	ldrb	r3, [r0, #4]
		pdu_tx->len = offsetof(struct pdu_data_llctrl, ping_rsp) +
   15f1a:	7144      	strb	r4, [r0, #5]
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   15f1c:	f043 0303 	orr.w	r3, r3, #3
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   15f20:	2213      	movs	r2, #19
		ctrl_tx_sec_enqueue(conn, tx);
   15f22:	4628      	mov	r0, r5
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   15f24:	710b      	strb	r3, [r1, #4]
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   15f26:	71ca      	strb	r2, [r1, #7]
		ctrl_tx_sec_enqueue(conn, tx);
   15f28:	f7ff f8aa 	bl	15080 <ctrl_tx_sec_enqueue>
		rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   15f2c:	2303      	movs	r3, #3
   15f2e:	7133      	strb	r3, [r6, #4]
		return 0;
   15f30:	2000      	movs	r0, #0
   15f32:	e660      	b.n	15bf6 <ull_conn_rx+0x1fe>
					if (!conn->lll.role ||
   15f34:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
   15f38:	2b00      	cmp	r3, #0
   15f3a:	f6bf aeb7 	bge.w	15cac <ull_conn_rx+0x2b4>
   15f3e:	7f73      	ldrb	r3, [r6, #29]
   15f40:	2b0c      	cmp	r3, #12
   15f42:	f47f aeb3 	bne.w	15cac <ull_conn_rx+0x2b4>
		instant = sys_le16_to_cpu(pdu->llctrl.conn_update_ind.instant);
   15f46:	f8b6 0029 	ldrh.w	r0, [r6, #41]	; 0x29
		if (((instant - conn->lll.event_counter) & 0xFFFF) > 0x7FFF) {
   15f4a:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
   15f4c:	1ac3      	subs	r3, r0, r3
   15f4e:	041b      	lsls	r3, r3, #16
   15f50:	f100 8754 	bmi.w	16dfc <ull_conn_rx+0x1404>
		if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   15f54:	f895 30bf 	ldrb.w	r3, [r5, #191]	; 0xbf
   15f58:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
   15f5c:	1a9b      	subs	r3, r3, r2
   15f5e:	f003 0303 	and.w	r3, r3, #3
   15f62:	2b02      	cmp	r3, #2
   15f64:	f000 877e 	beq.w	16e64 <ull_conn_rx+0x146c>
		if (!conn_upd_curr) {
   15f68:	4b74      	ldr	r3, [pc, #464]	; (1613c <ull_conn_rx+0x744>)
   15f6a:	681a      	ldr	r2, [r3, #0]
   15f6c:	2a00      	cmp	r2, #0
   15f6e:	f000 87c7 	beq.w	16f00 <ull_conn_rx+0x1508>
		conn->llcp_cu.win_size = pdu->llctrl.conn_update_ind.win_size;
   15f72:	f896 3020 	ldrb.w	r3, [r6, #32]
   15f76:	f885 30ec 	strb.w	r3, [r5, #236]	; 0xec
			sys_le16_to_cpu(pdu->llctrl.conn_update_ind.win_offset) * 1250;
   15f7a:	f8b6 1021 	ldrh.w	r1, [r6, #33]	; 0x21
		conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   15f7e:	f895 30de 	ldrb.w	r3, [r5, #222]	; 0xde
			sys_le16_to_cpu(pdu->llctrl.conn_update_ind.win_offset) * 1250;
   15f82:	f240 42e2 	movw	r2, #1250	; 0x4e2
   15f86:	fb02 f201 	mul.w	r2, r2, r1
		conn->llcp_cu.win_offset_us =
   15f8a:	f8c5 20e8 	str.w	r2, [r5, #232]	; 0xe8
			sys_le16_to_cpu(pdu->llctrl.conn_update_ind.interval);
   15f8e:	f896 1024 	ldrb.w	r1, [r6, #36]	; 0x24
   15f92:	f896 2023 	ldrb.w	r2, [r6, #35]	; 0x23
   15f96:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
		conn->llcp_cu.interval =
   15f9a:	f8a5 20e0 	strh.w	r2, [r5, #224]	; 0xe0
			sys_le16_to_cpu(pdu->llctrl.conn_update_ind.latency);
   15f9e:	f896 1026 	ldrb.w	r1, [r6, #38]	; 0x26
   15fa2:	f896 2025 	ldrb.w	r2, [r6, #37]	; 0x25
   15fa6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
		conn->llcp_cu.latency =
   15faa:	f8a5 20e2 	strh.w	r2, [r5, #226]	; 0xe2
			sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   15fae:	f896 1027 	ldrb.w	r1, [r6, #39]	; 0x27
		conn->llcp_cu.ack--;
   15fb2:	f895 20dd 	ldrb.w	r2, [r5, #221]	; 0xdd
			sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   15fb6:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
		conn->llcp.conn_upd.instant = instant;
   15fba:	f8a5 00c4 	strh.w	r0, [r5, #196]	; 0xc4
		conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   15fbe:	f023 0307 	bic.w	r3, r3, #7
		link->mem = conn->llcp_rx;
   15fc2:	f8d5 00d8 	ldr.w	r0, [r5, #216]	; 0xd8
		conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   15fc6:	f043 0304 	orr.w	r3, r3, #4
		conn->llcp_cu.ack--;
   15fca:	3a01      	subs	r2, #1
			sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   15fcc:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
		conn->llcp_cu.ack--;
   15fd0:	f885 20dd 	strb.w	r2, [r5, #221]	; 0xdd
		conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   15fd4:	f885 30de 	strb.w	r3, [r5, #222]	; 0xde
		conn->llcp_cu.timeout =
   15fd8:	f8a5 10e4 	strh.w	r1, [r5, #228]	; 0xe4
		link->mem = conn->llcp_rx;
   15fdc:	6078      	str	r0, [r7, #4]
		(*rx)->hdr.link = link;
   15fde:	6823      	ldr	r3, [r4, #0]
   15fe0:	601f      	str	r7, [r3, #0]
		conn->llcp_rx = *rx;
   15fe2:	6823      	ldr	r3, [r4, #0]
   15fe4:	f8c5 30d8 	str.w	r3, [r5, #216]	; 0xd8
		*rx = NULL;
   15fe8:	2300      	movs	r3, #0
   15fea:	6023      	str	r3, [r4, #0]
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   15fec:	f895 2148 	ldrb.w	r2, [r5, #328]	; 0x148
   15ff0:	f895 3149 	ldrb.w	r3, [r5, #329]	; 0x149
   15ff4:	4293      	cmp	r3, r2
   15ff6:	f43f aed1 	beq.w	15d9c <ull_conn_rx+0x3a4>
				(conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT)) {
   15ffa:	f895 314a 	ldrb.w	r3, [r5, #330]	; 0x14a
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   15ffe:	f003 0307 	and.w	r3, r3, #7
   16002:	2b04      	cmp	r3, #4
   16004:	f47f aeca 	bne.w	15d9c <ull_conn_rx+0x3a4>
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   16008:	f885 2149 	strb.w	r2, [r5, #329]	; 0x149
					if (err) {
   1600c:	e6c6      	b.n	15d9c <ull_conn_rx+0x3a4>
			 ((!conn->llcp_enc.refresh &&
   1600e:	f1b8 0f07 	cmp.w	r8, #7
   16012:	f000 813f 	beq.w	16294 <ull_conn_rx+0x89c>
			   (opcode != PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP) &&
   16016:	f1b8 0f02 	cmp.w	r8, #2
   1601a:	f47f ae9e 	bne.w	15d5a <ull_conn_rx+0x362>
				if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_TERMINATE_IND,
   1601e:	7f73      	ldrb	r3, [r6, #29]
   16020:	2b02      	cmp	r3, #2
   16022:	f47f ae43 	bne.w	15cac <ull_conn_rx+0x2b4>
				terminate_ind_recv(conn, *rx, pdu_rx);
   16026:	f896 3020 	ldrb.w	r3, [r6, #32]
		conn->llcp_terminate.reason_peer = pdu->llctrl.terminate_ind.error_code;
   1602a:	f885 3107 	strb.w	r3, [r5, #263]	; 0x107
		rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   1602e:	2303      	movs	r3, #3
   16030:	7133      	strb	r3, [r6, #4]
		int nack = 0;
   16032:	2000      	movs	r0, #0
	}
   16034:	e5df      	b.n	15bf6 <ull_conn_rx+0x1fe>
				break;
#endif /* CONFIG_BT_CTLR_PHY */

#if defined(CONFIG_BT_CTLR_MIN_USED_CHAN)
			case PDU_DATA_LLCTRL_TYPE_MIN_USED_CHAN_IND:
				if (conn->lll.role ||
   16036:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
   1603a:	2b00      	cmp	r3, #0
   1603c:	f6ff ae36 	blt.w	15cac <ull_conn_rx+0x2b4>
   16040:	7f77      	ldrb	r7, [r6, #29]
   16042:	2f03      	cmp	r7, #3
   16044:	f47f ae32 	bne.w	15cac <ull_conn_rx+0x2b4>
				if (!conn->lll.role) {
					struct pdu_data_llctrl_min_used_chans_ind *p =
						&pdu_rx->llctrl.min_used_chans_ind;

#if defined(CONFIG_BT_CTLR_PHY)
					if (!(p->phys & (conn->lll.phy_tx |
   16048:	f890 1048 	ldrb.w	r1, [r0, #72]	; 0x48
									conn->lll.phy_rx))) {
   1604c:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
					if (!(p->phys & (conn->lll.phy_tx |
   16050:	f896 2020 	ldrb.w	r2, [r6, #32]
   16054:	430b      	orrs	r3, r1
   16056:	f003 0307 	and.w	r3, r3, #7
   1605a:	4213      	tst	r3, r2
   1605c:	f43f add4 	beq.w	15c08 <ull_conn_rx+0x210>
						if (!(p->phys & 0x01)) {
#endif /* !CONFIG_BT_CTLR_PHY */
							break;
						}

						if (((conn->llcp_req - conn->llcp_ack) & 0x03) ==
   16060:	f890 30bf 	ldrb.w	r3, [r0, #191]	; 0xbf
   16064:	f890 20c0 	ldrb.w	r2, [r0, #192]	; 0xc0
   16068:	1a9b      	subs	r3, r3, r2
   1606a:	f003 0303 	and.w	r3, r3, #3
   1606e:	2b02      	cmp	r3, #2
   16070:	f43f adca 	beq.w	15c08 <ull_conn_rx+0x210>
								0x02) {
							break;
						}

						ull_chan_map_get(conn->llcp.chan_map.chm);
   16074:	30c5      	adds	r0, #197	; 0xc5
   16076:	f002 f941 	bl	182fc <ull_chan_map_get>
						/* conn->llcp.chan_map.instant     = 0; */
						conn->llcp.chan_map.initiate = 1U;

						conn->llcp_type = LLCP_CHAN_MAP;
						conn->llcp_ack -= 2U;
   1607a:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
						conn->llcp.chan_map.initiate = 1U;
   1607e:	f895 30c4 	ldrb.w	r3, [r5, #196]	; 0xc4
						conn->llcp_ack -= 2U;
   16082:	3a02      	subs	r2, #2
						conn->llcp_type = LLCP_CHAN_MAP;
   16084:	2102      	movs	r1, #2
						conn->llcp_ack -= 2U;
   16086:	f885 20c0 	strb.w	r2, [r5, #192]	; 0xc0
						conn->llcp_type = LLCP_CHAN_MAP;
   1608a:	f885 10c1 	strb.w	r1, [r5, #193]	; 0xc1
					}

					/* Mark for buffer for release */
					(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   1608e:	6822      	ldr	r2, [r4, #0]
						conn->llcp.chan_map.initiate = 1U;
   16090:	f043 0301 	orr.w	r3, r3, #1
   16094:	f885 30c4 	strb.w	r3, [r5, #196]	; 0xc4
		int nack = 0;
   16098:	2000      	movs	r0, #0
					(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   1609a:	7117      	strb	r7, [r2, #4]

					break;
   1609c:	e5ab      	b.n	15bf6 <ull_conn_rx+0x1fe>
					if (!conn->lll.role ||
   1609e:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
   160a2:	2b00      	cmp	r3, #0
   160a4:	f6bf ae02 	bge.w	15cac <ull_conn_rx+0x2b4>
   160a8:	7f73      	ldrb	r3, [r6, #29]
   160aa:	2b05      	cmp	r3, #5
   160ac:	f47f adfe 	bne.w	15cac <ull_conn_rx+0x2b4>
		if (!((ind->m_to_s_phy | ind->s_to_m_phy) & 0x07)) {
   160b0:	f896 1020 	ldrb.w	r1, [r6, #32]
   160b4:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
   160b8:	ea41 0003 	orr.w	r0, r1, r3
   160bc:	f010 0007 	ands.w	r0, r0, #7
   160c0:	f040 85be 	bne.w	16c40 <ull_conn_rx+0x1248>
			if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   160c4:	f895 1180 	ldrb.w	r1, [r5, #384]	; 0x180
   160c8:	f895 3181 	ldrb.w	r3, [r5, #385]	; 0x181
   160cc:	428b      	cmp	r3, r1
   160ce:	f43f ad99 	beq.w	15c04 <ull_conn_rx+0x20c>
					(conn->llcp_phy.state != LLCP_PHY_STATE_RSP_WAIT)) {
   160d2:	f895 3182 	ldrb.w	r3, [r5, #386]	; 0x182
			if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   160d6:	f003 0303 	and.w	r3, r3, #3
   160da:	2b02      	cmp	r3, #2
   160dc:	f47f ad92 	bne.w	15c04 <ull_conn_rx+0x20c>
			conn->lll.phy_tx_time = conn->lll.phy_tx;
   160e0:	f895 2048 	ldrb.w	r2, [r5, #72]	; 0x48
			conn->llcp_phy.pause_tx = 0U;
   160e4:	f895 3183 	ldrb.w	r3, [r5, #387]	; 0x183
			conn->llcp_phy.ack = conn->llcp_phy.req;
   160e8:	f885 1181 	strb.w	r1, [r5, #385]	; 0x181
			conn->llcp_phy.pause_tx = 0U;
   160ec:	f360 0300 	bfi	r3, r0, #0, #1
			conn->lll.phy_tx_time = conn->lll.phy_tx;
   160f0:	4611      	mov	r1, r2
   160f2:	f362 1106 	bfi	r1, r2, #4, #3
			conn->llcp_phy.pause_tx = 0U;
   160f6:	f885 3183 	strb.w	r3, [r5, #387]	; 0x183
			if (!conn->llcp_phy.cmd) {
   160fa:	f013 0304 	ands.w	r3, r3, #4
			conn->procedure_expire = 0U;
   160fe:	f8a5 00b0 	strh.w	r0, [r5, #176]	; 0xb0
			conn->lll.phy_tx_time = conn->lll.phy_tx;
   16102:	f885 1048 	strb.w	r1, [r5, #72]	; 0x48
   16106:	f3c2 0202 	ubfx	r2, r2, #0, #3
			if (!conn->llcp_phy.cmd) {
   1610a:	f040 87da 	bne.w	170c2 <ull_conn_rx+0x16ca>
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   1610e:	6822      	ldr	r2, [r4, #0]
   16110:	2103      	movs	r1, #3
		int nack = 0;
   16112:	4618      	mov	r0, r3
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   16114:	7111      	strb	r1, [r2, #4]
					if (err) {
   16116:	e56e      	b.n	15bf6 <ull_conn_rx+0x1fe>
				if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ,
   16118:	7f73      	ldrb	r3, [r6, #29]
   1611a:	2b18      	cmp	r3, #24
   1611c:	f47f adc6 	bne.w	15cac <ull_conn_rx+0x2b4>
				if (conn_upd_curr && (conn_upd_curr != conn)) {
   16120:	4f06      	ldr	r7, [pc, #24]	; (1613c <ull_conn_rx+0x744>)
   16122:	683b      	ldr	r3, [r7, #0]
   16124:	2b00      	cmp	r3, #0
   16126:	f000 82bf 	beq.w	166a8 <ull_conn_rx+0xcb0>
   1612a:	4298      	cmp	r0, r3
   1612c:	f000 82bc 	beq.w	166a8 <ull_conn_rx+0xcb0>
					nack = reject_ext_ind_send(conn, *rx,
   16130:	1d31      	adds	r1, r6, #4
   16132:	2320      	movs	r3, #32
   16134:	220f      	movs	r2, #15
   16136:	e6df      	b.n	15ef8 <ull_conn_rx+0x500>
   16138:	2000802c 	.word	0x2000802c
   1613c:	200075a4 	.word	0x200075a4
				if (!conn->lll.role ||
   16140:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
   16144:	2b00      	cmp	r3, #0
   16146:	f6bf adb1 	bge.w	15cac <ull_conn_rx+0x2b4>
   1614a:	7f74      	ldrb	r4, [r6, #29]
   1614c:	2c01      	cmp	r4, #1
   1614e:	f47f adad 	bne.w	15cac <ull_conn_rx+0x2b4>
			tx = mem_acquire(&mem_conn_tx_ctrl.free);
   16152:	48e0      	ldr	r0, [pc, #896]	; (164d4 <ull_conn_rx+0xadc>)
   16154:	f7f9 ff32 	bl	ffbc <mem_acquire>
			if (!tx) {
   16158:	4603      	mov	r3, r0
   1615a:	2800      	cmp	r0, #0
   1615c:	f000 83a1 	beq.w	168a2 <ull_conn_rx+0xeaa>
		conn->llcp_enc.pause_rx = 1U;
   16160:	f895 212a 	ldrb.w	r2, [r5, #298]	; 0x12a
		conn->lll.enc_rx = 0;
   16164:	f895 1062 	ldrb.w	r1, [r5, #98]	; 0x62
		conn->llcp_enc.pause_rx = 1U;
   16168:	f022 0205 	bic.w	r2, r2, #5
		conn->lll.enc_rx = 0;
   1616c:	f36f 01c3 	bfc	r1, #3, #1
   16170:	f885 1062 	strb.w	r1, [r5, #98]	; 0x62
		conn->llcp_enc.pause_rx = 1U;
   16174:	f042 0205 	orr.w	r2, r2, #5
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   16178:	7901      	ldrb	r1, [r0, #4]
		conn->llcp_enc.pause_rx = 1U;
   1617a:	f885 212a 	strb.w	r2, [r5, #298]	; 0x12a
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   1617e:	7144      	strb	r4, [r0, #5]
			conn->tx_head &&
   16180:	f8d5 2188 	ldr.w	r2, [r5, #392]	; 0x188
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   16184:	f041 0103 	orr.w	r1, r1, #3
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
   16188:	200b      	movs	r0, #11
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1618a:	7119      	strb	r1, [r3, #4]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
   1618c:	71d8      	strb	r0, [r3, #7]
	if (
   1618e:	2a00      	cmp	r2, #0
   16190:	f000 82b8 	beq.w	16704 <ull_conn_rx+0xd0c>
			!conn->llcp_enc.pause_tx &&
   16194:	f895 112a 	ldrb.w	r1, [r5, #298]	; 0x12a
			conn->tx_head &&
   16198:	0788      	lsls	r0, r1, #30
   1619a:	f100 82b3 	bmi.w	16704 <ull_conn_rx+0xd0c>
			!conn->llcp_phy.pause_tx &&
   1619e:	f895 1183 	ldrb.w	r1, [r5, #387]	; 0x183
   161a2:	07c9      	lsls	r1, r1, #31
   161a4:	f100 82ae 	bmi.w	16704 <ull_conn_rx+0xd0c>
		if (conn->tx_head == conn->tx_data) {
   161a8:	f8d5 1194 	ldr.w	r1, [r5, #404]	; 0x194
   161ac:	428a      	cmp	r2, r1
			conn->tx_data = conn->tx_data->next;
   161ae:	bf04      	itt	eq
   161b0:	6811      	ldreq	r1, [r2, #0]
   161b2:	f8c5 1194 	streq.w	r1, [r5, #404]	; 0x194
		if (!conn->tx_ctrl) {
   161b6:	f8d5 118c 	ldr.w	r1, [r5, #396]	; 0x18c
   161ba:	2900      	cmp	r1, #0
   161bc:	f000 878d 	beq.w	170da <ull_conn_rx+0x16e2>
	tx->next = conn->tx_ctrl_last->next;
   161c0:	f8d5 2190 	ldr.w	r2, [r5, #400]	; 0x190
   161c4:	6811      	ldr	r1, [r2, #0]
   161c6:	6019      	str	r1, [r3, #0]
	conn->tx_ctrl_last->next = tx;
   161c8:	6013      	str	r3, [r2, #0]
	conn->tx_ctrl_last = tx;
   161ca:	f8c5 3190 	str.w	r3, [r5, #400]	; 0x190
	if (!tx->next) {
   161ce:	681a      	ldr	r2, [r3, #0]
   161d0:	2a00      	cmp	r2, #0
   161d2:	f47f ad17 	bne.w	15c04 <ull_conn_rx+0x20c>
		conn->tx_data_last = tx;
   161d6:	f8c5 3198 	str.w	r3, [r5, #408]	; 0x198
   161da:	e513      	b.n	15c04 <ull_conn_rx+0x20c>
				if (conn->lll.role ||
   161dc:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
   161e0:	2b00      	cmp	r3, #0
   161e2:	f6ff ad63 	blt.w	15cac <ull_conn_rx+0x2b4>
   161e6:	7f73      	ldrb	r3, [r6, #29]
   161e8:	2b09      	cmp	r3, #9
   161ea:	f47f ad5f 	bne.w	15cac <ull_conn_rx+0x2b4>
				nack = feature_rsp_send(conn, *rx, pdu_rx);
   161ee:	1d31      	adds	r1, r6, #4
   161f0:	4628      	mov	r0, r5
}
   161f2:	b005      	add	sp, #20
   161f4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				nack = feature_rsp_send(conn, *rx, pdu_rx);
   161f8:	f7fe bfd4 	b.w	151a4 <feature_rsp_send.isra.0>
				if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_IND, pdu_rx->len)) {
   161fc:	7f73      	ldrb	r3, [r6, #29]
   161fe:	2b02      	cmp	r3, #2
   16200:	f47f ad54 	bne.w	15cac <ull_conn_rx+0x2b4>
				conn->llcp_enc.pause_rx = 0U;
   16204:	f895 212a 	ldrb.w	r2, [r5, #298]	; 0x12a
				conn->llcp_ack = conn->llcp_req;
   16208:	f895 30bf 	ldrb.w	r3, [r5, #191]	; 0xbf
   1620c:	f885 30c0 	strb.w	r3, [r5, #192]	; 0xc0
				conn->llcp_enc.pause_rx = 0U;
   16210:	f022 0203 	bic.w	r2, r2, #3
				conn->procedure_expire = 0U;
   16214:	2300      	movs	r3, #0
				conn->llcp_enc.pause_rx = 0U;
   16216:	f885 212a 	strb.w	r2, [r5, #298]	; 0x12a
				conn->procedure_expire = 0U;
   1621a:	f8a5 30b0 	strh.w	r3, [r5, #176]	; 0xb0
		int nack = 0;
   1621e:	4618      	mov	r0, r3
				break;
   16220:	e4e9      	b.n	15bf6 <ull_conn_rx+0x1fe>
					if (!conn->lll.role ||
   16222:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
   16226:	2b00      	cmp	r3, #0
   16228:	f6bf ad40 	bge.w	15cac <ull_conn_rx+0x2b4>
   1622c:	7f73      	ldrb	r3, [r6, #29]
   1622e:	2b08      	cmp	r3, #8
   16230:	f47f ad3c 	bne.w	15cac <ull_conn_rx+0x2b4>
		instant = sys_le16_to_cpu(pdu->llctrl.chan_map_ind.instant);
   16234:	f8b6 4025 	ldrh.w	r4, [r6, #37]	; 0x25
		if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
   16238:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
   1623a:	1ae3      	subs	r3, r4, r3
   1623c:	041f      	lsls	r7, r3, #16
   1623e:	f100 85dd 	bmi.w	16dfc <ull_conn_rx+0x1404>
		if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   16242:	f890 30bf 	ldrb.w	r3, [r0, #191]	; 0xbf
   16246:	f890 20c0 	ldrb.w	r2, [r0, #192]	; 0xc0
   1624a:	1a9b      	subs	r3, r3, r2
   1624c:	f003 0303 	and.w	r3, r3, #3
   16250:	2b02      	cmp	r3, #2
   16252:	f000 8607 	beq.w	16e64 <ull_conn_rx+0x146c>
		memcpy(&conn->llcp.chan_map.chm[0], &pdu->llctrl.chan_map_ind.chm[0],
   16256:	2205      	movs	r2, #5
   16258:	f106 0120 	add.w	r1, r6, #32
   1625c:	30c5      	adds	r0, #197	; 0xc5
   1625e:	f009 fe06 	bl	1fe6e <memcpy>
		conn->llcp.chan_map.initiate = 0U;
   16262:	f895 20c4 	ldrb.w	r2, [r5, #196]	; 0xc4
		conn->llcp_ack -= 2U;
   16266:	f895 30c0 	ldrb.w	r3, [r5, #192]	; 0xc0
		conn->llcp.chan_map.instant = instant;
   1626a:	f8a5 40ca 	strh.w	r4, [r5, #202]	; 0xca
		conn->llcp_type = LLCP_CHAN_MAP;
   1626e:	2002      	movs	r0, #2
		conn->llcp.chan_map.initiate = 0U;
   16270:	f36f 0200 	bfc	r2, #0, #1
		conn->llcp_ack -= 2U;
   16274:	3b02      	subs	r3, #2
		rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   16276:	2103      	movs	r1, #3
		conn->llcp_type = LLCP_CHAN_MAP;
   16278:	f885 00c1 	strb.w	r0, [r5, #193]	; 0xc1
		conn->llcp.chan_map.initiate = 0U;
   1627c:	f885 20c4 	strb.w	r2, [r5, #196]	; 0xc4
		conn->llcp_ack -= 2U;
   16280:	f885 30c0 	strb.w	r3, [r5, #192]	; 0xc0
		int nack = 0;
   16284:	2000      	movs	r0, #0
		rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   16286:	7131      	strb	r1, [r6, #4]
					if (err) {
   16288:	e4b5      	b.n	15bf6 <ull_conn_rx+0x1fe>
				if (!conn->lll.role ||
   1628a:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
   1628e:	2b00      	cmp	r3, #0
   16290:	dba9      	blt.n	161e6 <ull_conn_rx+0x7ee>
   16292:	e50b      	b.n	15cac <ull_conn_rx+0x2b4>
				if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP,
   16294:	7f73      	ldrb	r3, [r6, #29]
   16296:	2b02      	cmp	r3, #2
   16298:	f47f ad08 	bne.w	15cac <ull_conn_rx+0x2b4>
				} else if ((conn->llcp_conn_param.ack !=
   1629c:	f895 1149 	ldrb.w	r1, [r5, #329]	; 0x149
   162a0:	f895 3148 	ldrb.w	r3, [r5, #328]	; 0x148
   162a4:	f896 2020 	ldrb.w	r2, [r6, #32]
   162a8:	4299      	cmp	r1, r3
   162aa:	d002      	beq.n	162b2 <ull_conn_rx+0x8ba>
							conn->llcp_conn_param.req) &&
   162ac:	2a0f      	cmp	r2, #15
   162ae:	f000 8398 	beq.w	169e2 <ull_conn_rx+0xfea>
				} else if ((conn->llcp_length.req != conn->llcp_length.ack) &&
   162b2:	f895 3170 	ldrb.w	r3, [r5, #368]	; 0x170
   162b6:	f895 1171 	ldrb.w	r1, [r5, #369]	; 0x171
   162ba:	4299      	cmp	r1, r3
   162bc:	d002      	beq.n	162c4 <ull_conn_rx+0x8cc>
   162be:	2a14      	cmp	r2, #20
   162c0:	f000 84a2 	beq.w	16c08 <ull_conn_rx+0x1210>
				} else if ((conn->llcp_phy.req != conn->llcp_phy.ack) &&
   162c4:	f895 1180 	ldrb.w	r1, [r5, #384]	; 0x180
   162c8:	f895 3181 	ldrb.w	r3, [r5, #385]	; 0x181
   162cc:	428b      	cmp	r3, r1
   162ce:	d002      	beq.n	162d6 <ull_conn_rx+0x8de>
   162d0:	2a16      	cmp	r2, #22
   162d2:	f000 8523 	beq.w	16d1c <ull_conn_rx+0x1324>
					switch (llctrl->unknown_rsp.type) {
   162d6:	2a12      	cmp	r2, #18
							(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   162d8:	bf04      	itt	eq
   162da:	2303      	moveq	r3, #3
   162dc:	7133      	strbeq	r3, [r6, #4]
							break;
   162de:	e55d      	b.n	15d9c <ull_conn_rx+0x3a4>
				if ((!IS_ENABLED(CONFIG_BT_CTLR_SLAVE_FEAT_REQ) &&
   162e0:	7f73      	ldrb	r3, [r6, #29]
   162e2:	2b09      	cmp	r3, #9
   162e4:	f47f ace2 	bne.w	15cac <ull_conn_rx+0x2b4>
			(features[1] << 8) | (features[2] << 16);
   162e8:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
   162ec:	f896 0021 	ldrb.w	r0, [r6, #33]	; 0x21
		feat = ~LL_FEAT_BIT_MASK_VALID | features[0] |
   162f0:	f896 2020 	ldrb.w	r2, [r6, #32]
			(features[1] << 8) | (features[2] << 16);
   162f4:	4978      	ldr	r1, [pc, #480]	; (164d8 <ull_conn_rx+0xae0>)
   162f6:	041b      	lsls	r3, r3, #16
   162f8:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   162fc:	4313      	orrs	r3, r2
		conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   162fe:	f8d5 00f4 	ldr.w	r0, [r5, #244]	; 0xf4
		conn->common.fex_valid = 1U;
   16302:	f895 20be 	ldrb.w	r2, [r5, #190]	; 0xbe
			(features[1] << 8) | (features[2] << 16);
   16306:	430b      	orrs	r3, r1
		conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   16308:	4003      	ands	r3, r0
   1630a:	f3c3 0310 	ubfx	r3, r3, #0, #17
   1630e:	f8c5 30f4 	str.w	r3, [r5, #244]	; 0xf4
			(features[1] << 8) | (features[2] << 16);
   16312:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
   16316:	f896 4021 	ldrb.w	r4, [r6, #33]	; 0x21
		feat = ~LL_FEAT_BIT_MASK_VALID | features[0] |
   1631a:	f896 0020 	ldrb.w	r0, [r6, #32]
			(features[1] << 8) | (features[2] << 16);
   1631e:	041b      	lsls	r3, r3, #16
   16320:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
   16324:	4303      	orrs	r3, r0
   16326:	430b      	orrs	r3, r1
		feat &= LL_FEAT_BIT_MASK;
   16328:	f3c3 0310 	ubfx	r3, r3, #0, #17
		conn->llcp_feature.ack = conn->llcp_feature.req;
   1632c:	f895 10f0 	ldrb.w	r1, [r5, #240]	; 0xf0
		conn->llcp_feature.features_peer =
   16330:	f8c5 30f8 	str.w	r3, [r5, #248]	; 0xf8
		conn->common.fex_valid = 1U;
   16334:	f042 0201 	orr.w	r2, r2, #1
		conn->procedure_expire = 0U;
   16338:	2300      	movs	r3, #0
		conn->common.fex_valid = 1U;
   1633a:	f885 20be 	strb.w	r2, [r5, #190]	; 0xbe
		conn->llcp_feature.ack = conn->llcp_feature.req;
   1633e:	f885 10f1 	strb.w	r1, [r5, #241]	; 0xf1
		conn->procedure_expire = 0U;
   16342:	f8a5 30b0 	strh.w	r3, [r5, #176]	; 0xb0
		int nack = 0;
   16346:	4618      	mov	r0, r3
	}
   16348:	e455      	b.n	15bf6 <ull_conn_rx+0x1fe>
				if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_VERSION_IND,
   1634a:	7f74      	ldrb	r4, [r6, #29]
   1634c:	2c06      	cmp	r4, #6
   1634e:	f47f acad 	bne.w	15cac <ull_conn_rx+0x2b4>
		if (!conn->llcp_version.tx) {
   16352:	f890 30fe 	ldrb.w	r3, [r0, #254]	; 0xfe
   16356:	07df      	lsls	r7, r3, #31
   16358:	f140 8399 	bpl.w	16a8e <ull_conn_rx+0x1096>
		} else if (!conn->llcp_version.rx) {
   1635c:	f013 0302 	ands.w	r3, r3, #2
   16360:	f47f ac50 	bne.w	15c04 <ull_conn_rx+0x20c>
			conn->llcp_version.ack = conn->llcp_version.req;
   16364:	f890 20fc 	ldrb.w	r2, [r0, #252]	; 0xfc
			conn->procedure_expire = 0U;
   16368:	f8a0 30b0 	strh.w	r3, [r0, #176]	; 0xb0
			conn->llcp_version.ack = conn->llcp_version.req;
   1636c:	f880 20fd 	strb.w	r2, [r0, #253]	; 0xfd
		conn->llcp_version.version_number = v->version_number;
   16370:	f896 3020 	ldrb.w	r3, [r6, #32]
   16374:	f885 30ff 	strb.w	r3, [r5, #255]	; 0xff
		conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
   16378:	f896 1022 	ldrb.w	r1, [r6, #34]	; 0x22
   1637c:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
		conn->llcp_version.rx = 1U;
   16380:	f895 30fe 	ldrb.w	r3, [r5, #254]	; 0xfe
		conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
   16384:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   16388:	f8a5 2100 	strh.w	r2, [r5, #256]	; 0x100
			sys_le16_to_cpu(v->sub_version_number);
   1638c:	f896 2023 	ldrb.w	r2, [r6, #35]	; 0x23
   16390:	f896 1024 	ldrb.w	r1, [r6, #36]	; 0x24
		conn->llcp_version.rx = 1U;
   16394:	f043 0302 	orr.w	r3, r3, #2
			sys_le16_to_cpu(v->sub_version_number);
   16398:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
		conn->llcp_version.sub_version_number =
   1639c:	f8a5 2102 	strh.w	r2, [r5, #258]	; 0x102
		conn->llcp_version.rx = 1U;
   163a0:	f885 30fe 	strb.w	r3, [r5, #254]	; 0xfe
		return 0;
   163a4:	2000      	movs	r0, #0
   163a6:	e426      	b.n	15bf6 <ull_conn_rx+0x1fe>
				if (!conn->lll.role ||
   163a8:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
   163ac:	2b00      	cmp	r3, #0
   163ae:	f6bf ac7d 	bge.w	15cac <ull_conn_rx+0x2b4>
   163b2:	7f73      	ldrb	r3, [r6, #29]
   163b4:	2b17      	cmp	r3, #23
   163b6:	f47f ac79 	bne.w	15cac <ull_conn_rx+0x2b4>
				memcpy(&conn->llcp_enc.rand[0],
   163ba:	2208      	movs	r2, #8
   163bc:	f106 0120 	add.w	r1, r6, #32
   163c0:	f205 102d 	addw	r0, r5, #301	; 0x12d
   163c4:	f009 fd53 	bl	1fe6e <memcpy>
				conn->llcp_enc.ediv[0] = pdu_rx->llctrl.enc_req.ediv[0];
   163c8:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
   163cc:	f885 312b 	strb.w	r3, [r5, #299]	; 0x12b
				conn->llcp_enc.ediv[1] = pdu_rx->llctrl.enc_req.ediv[1];
   163d0:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
   163d4:	f885 312c 	strb.w	r3, [r5, #300]	; 0x12c
				conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   163d8:	f895 30c4 	ldrb.w	r3, [r5, #196]	; 0xc4
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   163dc:	6821      	ldr	r1, [r4, #0]
				conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   163de:	2201      	movs	r2, #1
   163e0:	f362 0301 	bfi	r3, r2, #0, #2
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   163e4:	2203      	movs	r2, #3
				conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   163e6:	f885 30c4 	strb.w	r3, [r5, #196]	; 0xc4
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   163ea:	710a      	strb	r2, [r1, #4]
				conn->llcp_ack -= 2U;
   163ec:	f895 30c0 	ldrb.w	r3, [r5, #192]	; 0xc0
				conn->llcp_type = LLCP_ENCRYPTION;
   163f0:	f885 20c1 	strb.w	r2, [r5, #193]	; 0xc1
				conn->llcp_ack -= 2U;
   163f4:	3b02      	subs	r3, #2
   163f6:	f885 30c0 	strb.w	r3, [r5, #192]	; 0xc0
				memcpy(&conn->llcp.encryption.skd[0],
   163fa:	2208      	movs	r2, #8
   163fc:	f106 012a 	add.w	r1, r6, #42	; 0x2a
   16400:	f105 00c6 	add.w	r0, r5, #198	; 0xc6
   16404:	f009 fd33 	bl	1fe6e <memcpy>
				memcpy(&conn->lll.ccm_rx.iv[0],
   16408:	2204      	movs	r2, #4
   1640a:	f106 0132 	add.w	r1, r6, #50	; 0x32
   1640e:	f105 007c 	add.w	r0, r5, #124	; 0x7c
   16412:	f009 fd2c 	bl	1fe6e <memcpy>
				conn->llcp_enc.pause_rx = 1U;
   16416:	f895 312a 	ldrb.w	r3, [r5, #298]	; 0x12a
				conn->procedure_expire = conn->procedure_reload;
   1641a:	f8b5 20ae 	ldrh.w	r2, [r5, #174]	; 0xae
   1641e:	f8a5 20b0 	strh.w	r2, [r5, #176]	; 0xb0
				conn->llcp_enc.pause_rx = 1U;
   16422:	f043 0301 	orr.w	r3, r3, #1
   16426:	f885 312a 	strb.w	r3, [r5, #298]	; 0x12a
		int nack = 0;
   1642a:	2000      	movs	r0, #0
				break;
   1642c:	f7ff bbe3 	b.w	15bf6 <ull_conn_rx+0x1fe>
				if (conn->lll.role ||
   16430:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
   16434:	2b00      	cmp	r3, #0
   16436:	f6ff ac39 	blt.w	15cac <ull_conn_rx+0x2b4>
   1643a:	7f73      	ldrb	r3, [r6, #29]
   1643c:	2b0d      	cmp	r3, #13
   1643e:	f47f ac35 	bne.w	15cac <ull_conn_rx+0x2b4>
				memcpy(&conn->llcp.encryption.skd[8],
   16442:	2208      	movs	r2, #8
   16444:	f106 0120 	add.w	r1, r6, #32
   16448:	f105 00ce 	add.w	r0, r5, #206	; 0xce
   1644c:	f009 fd0f 	bl	1fe6e <memcpy>
				memcpy(&conn->lll.ccm_rx.iv[4],
   16450:	f106 0128 	add.w	r1, r6, #40	; 0x28
   16454:	2204      	movs	r2, #4
   16456:	f105 0080 	add.w	r0, r5, #128	; 0x80
   1645a:	f009 fd08 	bl	1fe6e <memcpy>
				conn->llcp_enc.pause_rx = 1U;
   1645e:	f895 312a 	ldrb.w	r3, [r5, #298]	; 0x12a
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   16462:	6822      	ldr	r2, [r4, #0]
				conn->llcp_enc.pause_rx = 1U;
   16464:	f043 0301 	orr.w	r3, r3, #1
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   16468:	2103      	movs	r1, #3
				conn->llcp_enc.pause_rx = 1U;
   1646a:	f885 312a 	strb.w	r3, [r5, #298]	; 0x12a
		int nack = 0;
   1646e:	2000      	movs	r0, #0
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   16470:	7111      	strb	r1, [r2, #4]
				break;
   16472:	f7ff bbc0 	b.w	15bf6 <ull_conn_rx+0x1fe>
				if (conn->lll.role || (conn->llcp_req == conn->llcp_ack) ||
   16476:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
   1647a:	2b00      	cmp	r3, #0
   1647c:	f6ff ac16 	blt.w	15cac <ull_conn_rx+0x2b4>
   16480:	f895 20bf 	ldrb.w	r2, [r5, #191]	; 0xbf
   16484:	f895 30c0 	ldrb.w	r3, [r5, #192]	; 0xc0
   16488:	429a      	cmp	r2, r3
   1648a:	f43f ac0f 	beq.w	15cac <ull_conn_rx+0x2b4>
   1648e:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
   16492:	2b03      	cmp	r3, #3
   16494:	f47f ac0a 	bne.w	15cac <ull_conn_rx+0x2b4>
						(conn->llcp_type != LLCP_ENCRYPTION) ||
   16498:	7f72      	ldrb	r2, [r6, #29]
   1649a:	2a01      	cmp	r2, #1
   1649c:	f47f ac06 	bne.w	15cac <ull_conn_rx+0x2b4>
				conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   164a0:	f895 20c4 	ldrb.w	r2, [r5, #196]	; 0xc4
   164a4:	f36f 0201 	bfc	r2, #0, #2
   164a8:	f885 20c4 	strb.w	r2, [r5, #196]	; 0xc4
		int nack = 0;
   164ac:	2000      	movs	r0, #0
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   164ae:	7133      	strb	r3, [r6, #4]
				break;
   164b0:	f7ff bba1 	b.w	15bf6 <ull_conn_rx+0x1fe>
				if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_RSP,
   164b4:	7f73      	ldrb	r3, [r6, #29]
   164b6:	2b01      	cmp	r3, #1
   164b8:	f47f abf8 	bne.w	15cac <ull_conn_rx+0x2b4>
				if (conn->lll.role) {
   164bc:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
   164c0:	2b00      	cmp	r3, #0
   164c2:	f6ff ac51 	blt.w	15d68 <ull_conn_rx+0x370>
					conn->llcp_enc.pause_rx = 0U;
   164c6:	f895 112a 	ldrb.w	r1, [r5, #298]	; 0x12a
   164ca:	f021 0103 	bic.w	r1, r1, #3
   164ce:	f885 112a 	strb.w	r1, [r5, #298]	; 0x12a
   164d2:	e45a      	b.n	15d8a <ull_conn_rx+0x392>
   164d4:	2000802c 	.word	0x2000802c
   164d8:	fffe30d0 	.word	0xfffe30d0
				if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP,
   164dc:	7f73      	ldrb	r3, [r6, #29]
   164de:	2b01      	cmp	r3, #1
   164e0:	f47f abe4 	bne.w	15cac <ull_conn_rx+0x2b4>
		} else if (!conn->lll.role) {
   164e4:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
   164e8:	2b00      	cmp	r3, #0
   164ea:	f280 80c6 	bge.w	1667a <ull_conn_rx+0xc82>
			conn->lll.enc_tx = 0;
   164ee:	f895 3062 	ldrb.w	r3, [r5, #98]	; 0x62
   164f2:	f36f 1304 	bfc	r3, #4, #1
   164f6:	f885 3062 	strb.w	r3, [r5, #98]	; 0x62
			goto pause_enc_rsp_send_exit;
   164fa:	f7ff bb83 	b.w	15c04 <ull_conn_rx+0x20c>
				if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   164fe:	f895 0180 	ldrb.w	r0, [r5, #384]	; 0x180
   16502:	f895 3181 	ldrb.w	r3, [r5, #385]	; 0x181
   16506:	4283      	cmp	r3, r0
   16508:	f43f ab7c 	beq.w	15c04 <ull_conn_rx+0x20c>
		if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   1650c:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
   16510:	2a23      	cmp	r2, #35	; 0x23
   16512:	d012      	beq.n	1653a <ull_conn_rx+0xb42>
			conn->lll.phy_tx_time = conn->lll.phy_tx;
   16514:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
			conn->llcp_phy.pause_tx = 0U;
   16518:	f895 1183 	ldrb.w	r1, [r5, #387]	; 0x183
			conn->llcp_phy.ack = conn->llcp_phy.req;
   1651c:	f885 0181 	strb.w	r0, [r5, #385]	; 0x181
			conn->lll.phy_tx_time = conn->lll.phy_tx;
   16520:	f3c3 0002 	ubfx	r0, r3, #0, #3
   16524:	f360 1306 	bfi	r3, r0, #4, #3
			conn->llcp_phy.pause_tx = 0U;
   16528:	f36f 0100 	bfc	r1, #0, #1
			conn->procedure_expire = 0U;
   1652c:	2000      	movs	r0, #0
			conn->lll.phy_tx_time = conn->lll.phy_tx;
   1652e:	f885 3048 	strb.w	r3, [r5, #72]	; 0x48
			conn->llcp_phy.pause_tx = 0U;
   16532:	f885 1183 	strb.w	r1, [r5, #387]	; 0x183
			conn->procedure_expire = 0U;
   16536:	f8a5 00b0 	strh.w	r0, [r5, #176]	; 0xb0
		if (!conn->llcp_phy.cmd) {
   1653a:	f895 3183 	ldrb.w	r3, [r5, #387]	; 0x183
   1653e:	0759      	lsls	r1, r3, #29
   16540:	f57f ab60 	bpl.w	15c04 <ull_conn_rx+0x20c>
		rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   16544:	230f      	movs	r3, #15
		p->status = rej_ext_ind->error_code;
   16546:	7732      	strb	r2, [r6, #28]
		rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   16548:	7133      	strb	r3, [r6, #4]
		p->tx = conn->lll.phy_tx;
   1654a:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
   1654e:	f3c3 0302 	ubfx	r3, r3, #0, #3
   16552:	7773      	strb	r3, [r6, #29]
		p->rx = conn->lll.phy_rx;
   16554:	f895 3049 	ldrb.w	r3, [r5, #73]	; 0x49
   16558:	f3c3 0302 	ubfx	r3, r3, #0, #3
   1655c:	77b3      	strb	r3, [r6, #30]
		int nack = 0;
   1655e:	2000      	movs	r0, #0
   16560:	f7ff bb49 	b.w	15bf6 <ull_conn_rx+0x1fe>
				if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   16564:	f895 2149 	ldrb.w	r2, [r5, #329]	; 0x149
   16568:	f895 3148 	ldrb.w	r3, [r5, #328]	; 0x148
   1656c:	429a      	cmp	r2, r3
   1656e:	f43f ab49 	beq.w	15c04 <ull_conn_rx+0x20c>
		need_schedule_update = need_schedule_cnt;
   16572:	48ce      	ldr	r0, [pc, #824]	; (168ac <ull_conn_rx+0xeb4>)
   16574:	4ace      	ldr	r2, [pc, #824]	; (168b0 <ull_conn_rx+0xeb8>)
   16576:	6800      	ldr	r0, [r0, #0]
   16578:	6010      	str	r0, [r2, #0]
		if (!lll->role && (rej_ext_ind->error_code ==
   1657a:	f995 203d 	ldrsb.w	r2, [r5, #61]	; 0x3d
		need_conn_update = false;
   1657e:	49cd      	ldr	r1, [pc, #820]	; (168b4 <ull_conn_rx+0xebc>)
   16580:	2000      	movs	r0, #0
		if (!lll->role && (rej_ext_ind->error_code ==
   16582:	4282      	cmp	r2, r0
		need_conn_update = false;
   16584:	7008      	strb	r0, [r1, #0]
		if (!lll->role && (rej_ext_ind->error_code ==
   16586:	db04      	blt.n	16592 <ull_conn_rx+0xb9a>
   16588:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
   1658c:	2a1a      	cmp	r2, #26
   1658e:	f000 85c5 	beq.w	1711c <ull_conn_rx+0x1724>
		if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
   16592:	f895 214a 	ldrb.w	r2, [r5, #330]	; 0x14a
   16596:	f002 0107 	and.w	r1, r2, #7
   1659a:	2904      	cmp	r1, #4
   1659c:	f000 8566 	beq.w	1706c <ull_conn_rx+0x1674>
		if (!conn->llcp_conn_param.cmd) {
   165a0:	0713      	lsls	r3, r2, #28
   165a2:	f57f ab2f 	bpl.w	15c04 <ull_conn_rx+0x20c>
		cu->status = rej_ext_ind->error_code;
   165a6:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
   165aa:	7733      	strb	r3, [r6, #28]
		rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   165ac:	220b      	movs	r2, #11
   165ae:	7132      	strb	r2, [r6, #4]
		cu->interval = lll->interval;
   165b0:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
		cu->timeout = conn->supervision_reload *
   165b2:	f8b5 20aa 	ldrh.w	r2, [r5, #170]	; 0xaa
		cu->latency = lll->latency;
   165b6:	8e29      	ldrh	r1, [r5, #48]	; 0x30
		cu->interval = lll->interval;
   165b8:	83f3      	strh	r3, [r6, #30]
		cu->timeout = conn->supervision_reload *
   165ba:	fb03 f202 	mul.w	r2, r3, r2
			lll->interval * 125U / 1000;
   165be:	237d      	movs	r3, #125	; 0x7d
   165c0:	fb03 f302 	mul.w	r3, r3, r2
		cu->latency = lll->latency;
   165c4:	8431      	strh	r1, [r6, #32]
			lll->interval * 125U / 1000;
   165c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
		int nack = 0;
   165ca:	2000      	movs	r0, #0
			lll->interval * 125U / 1000;
   165cc:	fbb3 f3f2 	udiv	r3, r3, r2
		cu->timeout = conn->supervision_reload *
   165d0:	8473      	strh	r3, [r6, #34]	; 0x22
		if (err) {
   165d2:	f7ff bb10 	b.w	15bf6 <ull_conn_rx+0x1fe>
				if ((conn->llcp_ack != conn->llcp_req) &&
   165d6:	f895 30bf 	ldrb.w	r3, [r5, #191]	; 0xbf
   165da:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
   165de:	429a      	cmp	r2, r3
   165e0:	f43f ab10 	beq.w	15c04 <ull_conn_rx+0x20c>
   165e4:	f895 20c1 	ldrb.w	r2, [r5, #193]	; 0xc1
   165e8:	2a03      	cmp	r2, #3
   165ea:	f47f ab0b 	bne.w	15c04 <ull_conn_rx+0x20c>
		conn->llcp_enc.pause_rx = 0U;
   165ee:	f895 212a 	ldrb.w	r2, [r5, #298]	; 0x12a
		conn->llcp_ack = conn->llcp_req;
   165f2:	f885 30c0 	strb.w	r3, [r5, #192]	; 0xc0
		conn->llcp_enc.pause_rx = 0U;
   165f6:	f022 0203 	bic.w	r2, r2, #3
		conn->procedure_expire = 0U;
   165fa:	2300      	movs	r3, #0
		conn->llcp_enc.pause_rx = 0U;
   165fc:	f885 212a 	strb.w	r2, [r5, #298]	; 0x12a
		conn->procedure_expire = 0U;
   16600:	f8a5 30b0 	strh.w	r3, [r5, #176]	; 0xb0
		pdu_rx->llctrl.reject_ind.error_code = rej_ext_ind->error_code;
   16604:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
   16608:	f886 2020 	strb.w	r2, [r6, #32]
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   1660c:	220d      	movs	r2, #13
		int nack = 0;
   1660e:	4618      	mov	r0, r3
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   16610:	77f2      	strb	r2, [r6, #31]
		if (err) {
   16612:	f7ff baf0 	b.w	15bf6 <ull_conn_rx+0x1fe>
				if (conn->llcp_length.ack != conn->llcp_length.req) {
   16616:	f895 2170 	ldrb.w	r2, [r5, #368]	; 0x170
   1661a:	f895 3171 	ldrb.w	r3, [r5, #369]	; 0x171
   1661e:	4293      	cmp	r3, r2
   16620:	f43f aaf0 	beq.w	15c04 <ull_conn_rx+0x20c>
		conn->procedure_expire = 0U;
   16624:	2300      	movs	r3, #0
		pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   16626:	2109      	movs	r1, #9
		conn->llcp_length.ack = conn->llcp_length.req;
   16628:	f885 2171 	strb.w	r2, [r5, #369]	; 0x171
		conn->procedure_expire = 0U;
   1662c:	f8a5 30b0 	strh.w	r3, [r5, #176]	; 0xb0
		pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   16630:	7771      	strb	r1, [r6, #29]
		lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
   16632:	f8b5 2042 	ldrh.w	r2, [r5, #66]	; 0x42
		lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
   16636:	f8b5 7040 	ldrh.w	r7, [r5, #64]	; 0x40
		lr->max_rx_time = sys_cpu_to_le16(conn->lll.max_rx_time);
   1663a:	f8b5 4046 	ldrh.w	r4, [r5, #70]	; 0x46
		lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
   1663e:	f8b5 1044 	ldrh.w	r1, [r5, #68]	; 0x44
		lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
   16642:	8432      	strh	r2, [r6, #32]
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   16644:	2215      	movs	r2, #21
		int nack = 0;
   16646:	4618      	mov	r0, r3
		lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
   16648:	84b7      	strh	r7, [r6, #36]	; 0x24
		lr->max_rx_time = sys_cpu_to_le16(conn->lll.max_rx_time);
   1664a:	8474      	strh	r4, [r6, #34]	; 0x22
		lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
   1664c:	84f1      	strh	r1, [r6, #38]	; 0x26
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   1664e:	77f2      	strb	r2, [r6, #31]
		if (err) {
   16650:	f7ff bad1 	b.w	15bf6 <ull_conn_rx+0x1fe>
				((!conn->llcp_enc.refresh &&
   16654:	f1b8 0f02 	cmp.w	r8, #2
   16658:	f47f aa09 	bne.w	15a6e <ull_conn_rx+0x76>
   1665c:	e4df      	b.n	1601e <ull_conn_rx+0x626>
			tx->next = conn->tx_head;
   1665e:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   16660:	e9c5 0062 	strd	r0, r0, [r5, #392]	; 0x188
				conn->tx_ctrl_last = tx;
   16664:	f8c5 0190 	str.w	r0, [r5, #400]	; 0x190
	if (!tx->next) {
   16668:	2b00      	cmp	r3, #0
   1666a:	f47f aacb 	bne.w	15c04 <ull_conn_rx+0x20c>
   1666e:	f7ff bb4b 	b.w	15d08 <ull_conn_rx+0x310>
				if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP,
   16672:	7f73      	ldrb	r3, [r6, #29]
   16674:	2b01      	cmp	r3, #1
   16676:	f47f ab19 	bne.w	15cac <ull_conn_rx+0x2b4>
			tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1667a:	488f      	ldr	r0, [pc, #572]	; (168b8 <ull_conn_rx+0xec0>)
   1667c:	f7f9 fc9e 	bl	ffbc <mem_acquire>
			if (!tx) {
   16680:	4603      	mov	r3, r0
   16682:	2800      	cmp	r0, #0
   16684:	f000 810d 	beq.w	168a2 <ull_conn_rx+0xeaa>
		conn->llcp_enc.pause_rx = 1U;
   16688:	f895 012a 	ldrb.w	r0, [r5, #298]	; 0x12a
		conn->lll.enc_rx = 0;
   1668c:	f895 2062 	ldrb.w	r2, [r5, #98]	; 0x62
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   16690:	7919      	ldrb	r1, [r3, #4]
		conn->llcp_enc.pause_rx = 1U;
   16692:	f040 0001 	orr.w	r0, r0, #1
   16696:	f885 012a 	strb.w	r0, [r5, #298]	; 0x12a
		conn->lll.enc_rx = 0;
   1669a:	f022 0218 	bic.w	r2, r2, #24
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   1669e:	2001      	movs	r0, #1
		conn->lll.enc_rx = 0;
   166a0:	f885 2062 	strb.w	r2, [r5, #98]	; 0x62
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   166a4:	7158      	strb	r0, [r3, #5]
   166a6:	e56b      	b.n	16180 <ull_conn_rx+0x788>
				if (!conn->lll.role) {
   166a8:	f995 c03d 	ldrsb.w	ip, [r5, #61]	; 0x3d
   166ac:	f895 0149 	ldrb.w	r0, [r5, #329]	; 0x149
   166b0:	f895 2148 	ldrb.w	r2, [r5, #328]	; 0x148
   166b4:	9000      	str	r0, [sp, #0]
   166b6:	f1bc 0f00 	cmp.w	ip, #0
   166ba:	f2c0 8176 	blt.w	169aa <ull_conn_rx+0xfb2>
					if ((conn->llcp_conn_param.req !=
   166be:	4290      	cmp	r0, r2
   166c0:	d009      	beq.n	166d6 <ull_conn_rx+0xcde>
							((conn->llcp_conn_param.state ==
   166c2:	f895 214a 	ldrb.w	r2, [r5, #330]	; 0x14a
								conn->llcp_conn_param.ack) &&
   166c6:	f012 0207 	ands.w	r2, r2, #7
   166ca:	f000 8297 	beq.w	16bfc <ull_conn_rx+0x1204>
							  LLCP_CPR_STATE_REQ) ||
   166ce:	3a04      	subs	r2, #4
   166d0:	2a01      	cmp	r2, #1
   166d2:	f240 8293 	bls.w	16bfc <ull_conn_rx+0x1204>
					} else if (((((conn->llcp_req - conn->llcp_ack) &
   166d6:	f895 20bf 	ldrb.w	r2, [r5, #191]	; 0xbf
   166da:	f895 00c0 	ldrb.w	r0, [r5, #192]	; 0xc0
   166de:	1a12      	subs	r2, r2, r0
   166e0:	f002 0203 	and.w	r2, r2, #3
   166e4:	2a02      	cmp	r2, #2
   166e6:	f000 83c1 	beq.w	16e6c <ull_conn_rx+0x1474>
								(conn->llcp_type != LLCP_ENCRYPTION)) ||
   166ea:	f895 0180 	ldrb.w	r0, [r5, #384]	; 0x180
   166ee:	f895 2181 	ldrb.w	r2, [r5, #385]	; 0x181
   166f2:	4290      	cmp	r0, r2
   166f4:	f000 842c 	beq.w	16f50 <ull_conn_rx+0x1558>
						nack = reject_ext_ind_send(conn, *rx,
   166f8:	1d31      	adds	r1, r6, #4
   166fa:	4628      	mov	r0, r5
   166fc:	232a      	movs	r3, #42	; 0x2a
   166fe:	220f      	movs	r2, #15
   16700:	f7ff bbfa 	b.w	15ef8 <ull_conn_rx+0x500>
		if (!conn->tx_ctrl) {
   16704:	f8d5 118c 	ldr.w	r1, [r5, #396]	; 0x18c
   16708:	2900      	cmp	r1, #0
   1670a:	f47f ad59 	bne.w	161c0 <ull_conn_rx+0x7c8>
			tx->next = conn->tx_head;
   1670e:	601a      	str	r2, [r3, #0]
				conn->tx_ctrl = tx;
   16710:	e9c5 3362 	strd	r3, r3, [r5, #392]	; 0x188
				conn->tx_ctrl_last = tx;
   16714:	f8c5 3190 	str.w	r3, [r5, #400]	; 0x190
   16718:	e559      	b.n	161ce <ull_conn_rx+0x7d6>
				if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_RSP,
   1671a:	7f73      	ldrb	r3, [r6, #29]
   1671c:	2b01      	cmp	r3, #1
   1671e:	f43f aed2 	beq.w	164c6 <ull_conn_rx+0xace>
   16722:	f7ff bac3 	b.w	15cac <ull_conn_rx+0x2b4>
				if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP,
   16726:	7f73      	ldrb	r3, [r6, #29]
   16728:	2b01      	cmp	r3, #1
   1672a:	f47f aabf 	bne.w	15cac <ull_conn_rx+0x2b4>
   1672e:	e6de      	b.n	164ee <ull_conn_rx+0xaf6>
			tx = mem_acquire(&mem_conn_tx_ctrl.free);
   16730:	4861      	ldr	r0, [pc, #388]	; (168b8 <ull_conn_rx+0xec0>)
   16732:	f7f9 fc43 	bl	ffbc <mem_acquire>
			if (!tx) {
   16736:	4601      	mov	r1, r0
   16738:	2800      	cmp	r0, #0
   1673a:	f000 80b2 	beq.w	168a2 <ull_conn_rx+0xeaa>
				((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   1673e:	f895 0170 	ldrb.w	r0, [r5, #368]	; 0x170
   16742:	f895 3171 	ldrb.w	r3, [r5, #369]	; 0x171
		eff_rx_octets = conn->lll.max_rx_octets;
   16746:	f8b5 2042 	ldrh.w	r2, [r5, #66]	; 0x42
		eff_tx_octets = conn->lll.max_tx_octets;
   1674a:	f8b5 9040 	ldrh.w	r9, [r5, #64]	; 0x40
		eff_rx_time = conn->lll.max_rx_time;
   1674e:	f8b5 a046 	ldrh.w	sl, [r5, #70]	; 0x46
		eff_tx_time = conn->lll.max_tx_time;
   16752:	f8b5 b044 	ldrh.w	fp, [r5, #68]	; 0x44
				((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   16756:	9000      	str	r0, [sp, #0]
		if (/* Local idle, and Peer request then complete the Peer procedure
   16758:	4298      	cmp	r0, r3
		eff_rx_octets = conn->lll.max_rx_octets;
   1675a:	9201      	str	r2, [sp, #4]
		if (/* Local idle, and Peer request then complete the Peer procedure
   1675c:	f040 84d6 	bne.w	1710c <ull_conn_rx+0x1714>
			max_rx_octets = sys_le16_to_cpu(lr->max_rx_octets);
   16760:	8c33      	ldrh	r3, [r6, #32]
			if (max_rx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   16762:	2b1a      	cmp	r3, #26
   16764:	f240 8244 	bls.w	16bf0 <ull_conn_rx+0x11f8>
				eff_tx_octets = MIN(max_rx_octets,
   16768:	f8b5 c0ba 	ldrh.w	ip, [r5, #186]	; 0xba
   1676c:	459c      	cmp	ip, r3
   1676e:	bf28      	it	cs
   16770:	469c      	movcs	ip, r3
			max_tx_octets = sys_le16_to_cpu(lr->max_tx_octets);
   16772:	f8b6 e024 	ldrh.w	lr, [r6, #36]	; 0x24
			if (max_tx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   16776:	f1be 0f1a 	cmp.w	lr, #26
   1677a:	f240 8236 	bls.w	16bea <ull_conn_rx+0x11f2>
				eff_rx_octets = MIN(max_tx_octets,
   1677e:	f1be 0ffb 	cmp.w	lr, #251	; 0xfb
   16782:	bf28      	it	cs
   16784:	f04f 0efb 	movcs.w	lr, #251	; 0xfb
		if (!conn->common.fex_valid ||
   16788:	f895 80be 	ldrb.w	r8, [r5, #190]	; 0xbe
		feature_coded_phy = (conn->llcp_feature.features_conn &
   1678c:	f8d5 20f4 	ldr.w	r2, [r5, #244]	; 0xf4
		if (!conn->common.fex_valid ||
   16790:	f8b5 30bc 	ldrh.w	r3, [r5, #188]	; 0xbc
   16794:	f018 0f01 	tst.w	r8, #1
   16798:	f000 8120 	beq.w	169dc <ull_conn_rx+0xfe4>
   1679c:	0510      	lsls	r0, r2, #20
   1679e:	f140 811d 	bpl.w	169dc <ull_conn_rx+0xfe4>
			tx_time = MIN(PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED),
   167a2:	f244 2290 	movw	r2, #17040	; 0x4290
   167a6:	4293      	cmp	r3, r2
			rx_time = MAX(PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED),
   167a8:	9202      	str	r2, [sp, #8]
			tx_time = MIN(PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED),
   167aa:	bf28      	it	cs
   167ac:	4613      	movcs	r3, r2
			lr_rx_time = sys_le16_to_cpu(lr->max_rx_time);
   167ae:	f8b6 8022 	ldrh.w	r8, [r6, #34]	; 0x22
			lr_tx_time = sys_le16_to_cpu(lr->max_tx_time);
   167b2:	8cf2      	ldrh	r2, [r6, #38]	; 0x26
			tx_time = MAX(PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M), tx_time);
   167b4:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   167b8:	bf38      	it	cc
   167ba:	f44f 73a4 	movcc.w	r3, #328	; 0x148
			if (lr_rx_time >= PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M)) {
   167be:	f5b8 7fa4 	cmp.w	r8, #328	; 0x148
			lr_tx_time = sys_le16_to_cpu(lr->max_tx_time);
   167c2:	4610      	mov	r0, r2
			if (lr_rx_time >= PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M)) {
   167c4:	f0c0 8218 	bcc.w	16bf8 <ull_conn_rx+0x1200>
				eff_tx_time = MAX(eff_tx_time,
   167c8:	f895 2048 	ldrb.w	r2, [r5, #72]	; 0x48
				eff_tx_time = MIN(lr_rx_time, max_tx_time);
   167cc:	4598      	cmp	r8, r3
   167ce:	bf28      	it	cs
   167d0:	4698      	movcs	r8, r3
				eff_tx_time = MAX(eff_tx_time,
   167d2:	f002 0307 	and.w	r3, r2, #7
   167d6:	0752      	lsls	r2, r2, #29
   167d8:	f100 835b 	bmi.w	16e92 <ull_conn_rx+0x149a>
   167dc:	f103 0228 	add.w	r2, r3, #40	; 0x28
   167e0:	00d2      	lsls	r2, r2, #3
   167e2:	105b      	asrs	r3, r3, #1
   167e4:	fa22 f303 	lsr.w	r3, r2, r3
   167e8:	4543      	cmp	r3, r8
   167ea:	bf38      	it	cc
   167ec:	4643      	movcc	r3, r8
   167ee:	b29b      	uxth	r3, r3
			if (lr_tx_time >= PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M)) {
   167f0:	f5b0 7fa4 	cmp.w	r0, #328	; 0x148
   167f4:	f0c0 81fe 	bcc.w	16bf4 <ull_conn_rx+0x11fc>
				eff_rx_time = MAX(eff_rx_time,
   167f8:	f895 2049 	ldrb.w	r2, [r5, #73]	; 0x49
   167fc:	4690      	mov	r8, r2
				eff_rx_time = MIN(lr_tx_time, max_rx_time);
   167fe:	9a02      	ldr	r2, [sp, #8]
   16800:	4290      	cmp	r0, r2
   16802:	bf28      	it	cs
   16804:	4610      	movcs	r0, r2
				eff_rx_time = MAX(eff_rx_time,
   16806:	4642      	mov	r2, r8
   16808:	0752      	lsls	r2, r2, #29
				eff_rx_time = MIN(lr_tx_time, max_rx_time);
   1680a:	9002      	str	r0, [sp, #8]
				eff_rx_time = MAX(eff_rx_time,
   1680c:	f008 0807 	and.w	r8, r8, #7
   16810:	f100 8379 	bmi.w	16f06 <ull_conn_rx+0x150e>
   16814:	f108 0228 	add.w	r2, r8, #40	; 0x28
   16818:	00d2      	lsls	r2, r2, #3
   1681a:	ea4f 0868 	mov.w	r8, r8, asr #1
   1681e:	fa22 f808 	lsr.w	r8, r2, r8
   16822:	9a02      	ldr	r2, [sp, #8]
   16824:	4542      	cmp	r2, r8
   16826:	bf38      	it	cc
   16828:	4642      	movcc	r2, r8
   1682a:	b292      	uxth	r2, r2
			if (eff_rx_octets != conn->lll.max_rx_octets) {
   1682c:	9801      	ldr	r0, [sp, #4]
   1682e:	4586      	cmp	lr, r0
   16830:	f000 82f0 	beq.w	16e14 <ull_conn_rx+0x141c>
				conn->llcp_length.ack = conn->llcp_length.req - 1;
   16834:	9800      	ldr	r0, [sp, #0]
				conn->llcp_length.rx_octets = eff_rx_octets;
   16836:	f8a5 e174 	strh.w	lr, [r5, #372]	; 0x174
				conn->llcp_length.ack = conn->llcp_length.req - 1;
   1683a:	3801      	subs	r0, #1
   1683c:	f885 0171 	strb.w	r0, [r5, #369]	; 0x171
				conn->llcp_length.tx_octets = eff_tx_octets;
   16840:	f8a5 c176 	strh.w	ip, [r5, #374]	; 0x176
					conn->llcp_length.state =
   16844:	f895 0172 	ldrb.w	r0, [r5, #370]	; 0x172
				conn->llcp_length.rx_time = eff_rx_time;
   16848:	f8a5 2178 	strh.w	r2, [r5, #376]	; 0x178
				conn->llcp_length.tx_time = eff_tx_time;
   1684c:	f8a5 317a 	strh.w	r3, [r5, #378]	; 0x17a
				if (tx) {
   16850:	2900      	cmp	r1, #0
   16852:	f000 8311 	beq.w	16e78 <ull_conn_rx+0x1480>
					conn->llcp_length.state =
   16856:	2605      	movs	r6, #5
   16858:	f366 0002 	bfi	r0, r6, #0, #3
   1685c:	f885 0172 	strb.w	r0, [r5, #370]	; 0x172
				link->mem = conn->llcp_rx;
   16860:	f8d5 00d8 	ldr.w	r0, [r5, #216]	; 0xd8
   16864:	6078      	str	r0, [r7, #4]
				(*rx)->hdr.link = link;
   16866:	6820      	ldr	r0, [r4, #0]
   16868:	6007      	str	r7, [r0, #0]
				conn->llcp_rx = *rx;
   1686a:	6820      	ldr	r0, [r4, #0]
   1686c:	f8c5 00d8 	str.w	r0, [r5, #216]	; 0xd8
				*rx = NULL;
   16870:	2000      	movs	r0, #0
   16872:	6020      	str	r0, [r4, #0]
		if (tx) {
   16874:	2900      	cmp	r1, #0
   16876:	f43f a9c7 	beq.w	15c08 <ull_conn_rx+0x210>
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1687a:	790c      	ldrb	r4, [r1, #4]
			pdu_tx->llctrl.length_rsp.max_rx_octets =
   1687c:	f8a1 e008 	strh.w	lr, [r1, #8]
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   16880:	f044 0403 	orr.w	r4, r4, #3
			pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   16884:	2709      	movs	r7, #9
			pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   16886:	2615      	movs	r6, #21
			ctrl_tx_sec_enqueue(conn, tx);
   16888:	4628      	mov	r0, r5
			pdu_tx->llctrl.length_rsp.max_tx_octets =
   1688a:	f8a1 c00c 	strh.w	ip, [r1, #12]
			pdu_tx->llctrl.length_rsp.max_rx_time = sys_cpu_to_le16(eff_rx_time);
   1688e:	814a      	strh	r2, [r1, #10]
			pdu_tx->llctrl.length_rsp.max_tx_time = sys_cpu_to_le16(eff_tx_time);
   16890:	81cb      	strh	r3, [r1, #14]
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   16892:	710c      	strb	r4, [r1, #4]
			pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   16894:	714f      	strb	r7, [r1, #5]
			pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   16896:	71ce      	strb	r6, [r1, #7]
			ctrl_tx_sec_enqueue(conn, tx);
   16898:	f7fe fbf2 	bl	15080 <ctrl_tx_sec_enqueue>
		return 0;
   1689c:	2000      	movs	r0, #0
		}
   1689e:	f7ff b9aa 	b.w	15bf6 <ull_conn_rx+0x1fe>
				return -ENOBUFS;
   168a2:	f06f 0036 	mvn.w	r0, #54	; 0x36
   168a6:	f7ff b9a6 	b.w	15bf6 <ull_conn_rx+0x1fe>
   168aa:	bf00      	nop
   168ac:	20000608 	.word	0x20000608
   168b0:	2000060c 	.word	0x2000060c
   168b4:	2000a862 	.word	0x2000a862
   168b8:	2000802c 	.word	0x2000802c
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   168bc:	48db      	ldr	r0, [pc, #876]	; (16c2c <ull_conn_rx+0x1234>)
   168be:	f7f9 fb7d 	bl	ffbc <mem_acquire>
		if (!tx) {
   168c2:	4602      	mov	r2, r0
   168c4:	2800      	cmp	r0, #0
   168c6:	d0ec      	beq.n	168a2 <ull_conn_rx+0xeaa>
		conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   168c8:	f895 1182 	ldrb.w	r1, [r5, #386]	; 0x182
		if (conn->llcp_phy.ack ==
   168cc:	f895 e181 	ldrb.w	lr, [r5, #385]	; 0x181
   168d0:	f895 7180 	ldrb.w	r7, [r5, #384]	; 0x180
   168d4:	f895 3184 	ldrb.w	r3, [r5, #388]	; 0x184
		conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   168d8:	2002      	movs	r0, #2
   168da:	f360 0101 	bfi	r1, r0, #0, #2
		if (conn->llcp_phy.ack ==
   168de:	4577      	cmp	r7, lr
		conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   168e0:	f885 1182 	strb.w	r1, [r5, #386]	; 0x182
		if (conn->llcp_phy.ack ==
   168e4:	f3c3 0402 	ubfx	r4, r3, #0, #3
   168e8:	f003 0c07 	and.w	ip, r3, #7
   168ec:	f3c3 1002 	ubfx	r0, r3, #4, #3
   168f0:	d113      	bne.n	1691a <ull_conn_rx+0xf22>
			conn->llcp_phy.tx =
   168f2:	b2c9      	uxtb	r1, r1
   168f4:	f36c 0184 	bfi	r1, ip, #2, #3
			conn->llcp_phy.cmd = 0U;
   168f8:	f895 c183 	ldrb.w	ip, [r5, #387]	; 0x183
			conn->procedure_expire =
   168fc:	f8b5 30ae 	ldrh.w	r3, [r5, #174]	; 0xae
   16900:	f8a5 30b0 	strh.w	r3, [r5, #176]	; 0xb0
			conn->llcp_phy.ack--;
   16904:	3f01      	subs	r7, #1
			conn->llcp_phy.rx =
   16906:	f360 1147 	bfi	r1, r0, #5, #3
			conn->llcp_phy.cmd = 0U;
   1690a:	f36f 0c82 	bfc	ip, #2, #1
			conn->llcp_phy.ack--;
   1690e:	f885 7181 	strb.w	r7, [r5, #385]	; 0x181
			conn->llcp_phy.rx =
   16912:	f885 1182 	strb.w	r1, [r5, #386]	; 0x182
			conn->llcp_phy.cmd = 0U;
   16916:	f885 c183 	strb.w	ip, [r5, #387]	; 0x183
		conn->llcp_phy.rx &= p->tx_phys;
   1691a:	f895 1182 	ldrb.w	r1, [r5, #386]	; 0x182
		conn->llcp_phy.tx &= p->rx_phys;
   1691e:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
		conn->llcp_phy.rx &= p->tx_phys;
   16922:	f896 7020 	ldrb.w	r7, [r6, #32]
		conn->llcp_phy.tx &= p->rx_phys;
   16926:	f3c1 0c82 	ubfx	ip, r1, #2, #3
   1692a:	ea03 030c 	and.w	r3, r3, ip
		conn->llcp_phy.rx &= p->tx_phys;
   1692e:	ea07 1751 	and.w	r7, r7, r1, lsr #5
		conn->llcp_phy.tx &= p->rx_phys;
   16932:	009b      	lsls	r3, r3, #2
   16934:	f001 0103 	and.w	r1, r1, #3
   16938:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
   1693c:	430b      	orrs	r3, r1
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
   1693e:	2103      	movs	r1, #3
		conn->llcp_phy.tx &= p->rx_phys;
   16940:	f885 3182 	strb.w	r3, [r5, #386]	; 0x182
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   16944:	7913      	ldrb	r3, [r2, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
   16946:	7151      	strb	r1, [r2, #5]
			conn->tx_head &&
   16948:	f8d5 1188 	ldr.w	r1, [r5, #392]	; 0x188
		pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
   1694c:	7214      	strb	r4, [r2, #8]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1694e:	f043 0303 	orr.w	r3, r3, #3
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   16952:	2417      	movs	r4, #23
		pdu_ctrl_tx->llctrl.phy_rsp.rx_phys = conn->phy_pref_rx;
   16954:	7250      	strb	r0, [r2, #9]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   16956:	7113      	strb	r3, [r2, #4]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   16958:	71d4      	strb	r4, [r2, #7]
	if (
   1695a:	2900      	cmp	r1, #0
   1695c:	f000 808d 	beq.w	16a7a <ull_conn_rx+0x1082>
			!conn->llcp_enc.pause_tx &&
   16960:	f895 312a 	ldrb.w	r3, [r5, #298]	; 0x12a
			conn->tx_head &&
   16964:	079c      	lsls	r4, r3, #30
   16966:	f100 8088 	bmi.w	16a7a <ull_conn_rx+0x1082>
			!conn->llcp_phy.pause_tx &&
   1696a:	f895 3183 	ldrb.w	r3, [r5, #387]	; 0x183
   1696e:	07d8      	lsls	r0, r3, #31
   16970:	f100 8083 	bmi.w	16a7a <ull_conn_rx+0x1082>
		if (conn->tx_head == conn->tx_data) {
   16974:	f8d5 3194 	ldr.w	r3, [r5, #404]	; 0x194
   16978:	4299      	cmp	r1, r3
			conn->tx_data = conn->tx_data->next;
   1697a:	bf04      	itt	eq
   1697c:	680b      	ldreq	r3, [r1, #0]
   1697e:	f8c5 3194 	streq.w	r3, [r5, #404]	; 0x194
		if (!conn->tx_ctrl) {
   16982:	f8d5 318c 	ldr.w	r3, [r5, #396]	; 0x18c
   16986:	2b00      	cmp	r3, #0
   16988:	f000 83ba 	beq.w	17100 <ull_conn_rx+0x1708>
	tx->next = conn->tx_ctrl_last->next;
   1698c:	f8d5 3190 	ldr.w	r3, [r5, #400]	; 0x190
   16990:	6819      	ldr	r1, [r3, #0]
   16992:	6011      	str	r1, [r2, #0]
	conn->tx_ctrl_last->next = tx;
   16994:	601a      	str	r2, [r3, #0]
	conn->tx_ctrl_last = tx;
   16996:	f8c5 2190 	str.w	r2, [r5, #400]	; 0x190
	if (!tx->next) {
   1699a:	6813      	ldr	r3, [r2, #0]
   1699c:	2b00      	cmp	r3, #0
   1699e:	f47f a931 	bne.w	15c04 <ull_conn_rx+0x20c>
		conn->tx_data_last = tx;
   169a2:	f8c5 2198 	str.w	r2, [r5, #408]	; 0x198
		rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   169a6:	f7ff b92d 	b.w	15c04 <ull_conn_rx+0x20c>
				} else if ((conn->llcp_conn_param.req ==
   169aa:	9900      	ldr	r1, [sp, #0]
   169ac:	4291      	cmp	r1, r2
   169ae:	f000 8093 	beq.w	16ad8 <ull_conn_rx+0x10e0>
							conn->llcp_conn_param.ack) ||
   169b2:	f895 214a 	ldrb.w	r2, [r5, #330]	; 0x14a
   169b6:	0790      	lsls	r0, r2, #30
   169b8:	f000 808e 	beq.w	16ad8 <ull_conn_rx+0x10e0>
					LL_ASSERT(0);
   169bc:	4a9c      	ldr	r2, [pc, #624]	; (16c30 <ull_conn_rx+0x1238>)
   169be:	499d      	ldr	r1, [pc, #628]	; (16c34 <ull_conn_rx+0x123c>)
   169c0:	489d      	ldr	r0, [pc, #628]	; (16c38 <ull_conn_rx+0x1240>)
   169c2:	f641 234d 	movw	r3, #6733	; 0x1a4d
   169c6:	f007 fac0 	bl	1df4a <printk>
   169ca:	4040      	eors	r0, r0
   169cc:	f380 8811 	msr	BASEPRI, r0
   169d0:	f04f 0003 	mov.w	r0, #3
   169d4:	df02      	svc	2
		int nack = 0;
   169d6:	2000      	movs	r0, #0
   169d8:	f7ff b90d 	b.w	15bf6 <ull_conn_rx+0x1fe>
			tx_time = MAX(MIN(PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_1M),
   169dc:	f640 0248 	movw	r2, #2120	; 0x848
   169e0:	e6e1      	b.n	167a6 <ull_conn_rx+0xdae>
					conn->llcp_conn_param.disabled = 1U;
   169e2:	f895 214a 	ldrb.w	r2, [r5, #330]	; 0x14a
					if (!conn->lll.role) {
   169e6:	f995 103d 	ldrsb.w	r1, [r5, #61]	; 0x3d
					conn->llcp_conn_param.disabled = 1U;
   169ea:	f042 0210 	orr.w	r2, r2, #16
					if (!conn->lll.role) {
   169ee:	2900      	cmp	r1, #0
					conn->llcp_conn_param.disabled = 1U;
   169f0:	f885 214a 	strb.w	r2, [r5, #330]	; 0x14a
					if (!conn->lll.role) {
   169f4:	f2c0 8250 	blt.w	16e98 <ull_conn_rx+0x14a0>
						LL_ASSERT(conn->llcp_cu.req ==
   169f8:	f895 20dc 	ldrb.w	r2, [r5, #220]	; 0xdc
   169fc:	f895 30dd 	ldrb.w	r3, [r5, #221]	; 0xdd
   16a00:	429a      	cmp	r2, r3
   16a02:	d00e      	beq.n	16a22 <ull_conn_rx+0x102a>
   16a04:	4a8a      	ldr	r2, [pc, #552]	; (16c30 <ull_conn_rx+0x1238>)
   16a06:	498d      	ldr	r1, [pc, #564]	; (16c3c <ull_conn_rx+0x1244>)
   16a08:	488b      	ldr	r0, [pc, #556]	; (16c38 <ull_conn_rx+0x1240>)
   16a0a:	f641 23d2 	movw	r3, #6866	; 0x1ad2
   16a0e:	f007 fa9c 	bl	1df4a <printk>
   16a12:	4040      	eors	r0, r0
   16a14:	f380 8811 	msr	BASEPRI, r0
   16a18:	f04f 0003 	mov.w	r0, #3
   16a1c:	df02      	svc	2
   16a1e:	f895 30dd 	ldrb.w	r3, [r5, #221]	; 0xdd
						conn->llcp_conn_param.state =
   16a22:	f895 014a 	ldrb.w	r0, [r5, #330]	; 0x14a
						conn->llcp_cu.interval =
   16a26:	f8b5 214e 	ldrh.w	r2, [r5, #334]	; 0x14e
   16a2a:	f8a5 20e0 	strh.w	r2, [r5, #224]	; 0xe0
						conn->llcp_conn_param.state =
   16a2e:	2205      	movs	r2, #5
   16a30:	f362 0002 	bfi	r0, r2, #0, #3
						conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   16a34:	f895 10de 	ldrb.w	r1, [r5, #222]	; 0xde
						conn->llcp_cu.latency =
   16a38:	f8b5 6150 	ldrh.w	r6, [r5, #336]	; 0x150
						conn->llcp_cu.ack--;
   16a3c:	3b01      	subs	r3, #1
						conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   16a3e:	f3c0 02c0 	ubfx	r2, r0, #3, #1
						conn->llcp_cu.ack--;
   16a42:	f885 30dd 	strb.w	r3, [r5, #221]	; 0xdd
						conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   16a46:	0092      	lsls	r2, r2, #2
						conn->llcp_cu.win_size = 1U;
   16a48:	2301      	movs	r3, #1
   16a4a:	f885 30ec 	strb.w	r3, [r5, #236]	; 0xec
						conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   16a4e:	431a      	orrs	r2, r3
   16a50:	f021 0307 	bic.w	r3, r1, #7
   16a54:	431a      	orrs	r2, r3
						(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   16a56:	6821      	ldr	r1, [r4, #0]
						conn->llcp_cu.timeout =
   16a58:	f8b5 4152 	ldrh.w	r4, [r5, #338]	; 0x152
						conn->llcp_conn_param.state =
   16a5c:	f885 014a 	strb.w	r0, [r5, #330]	; 0x14a
						conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   16a60:	f885 20de 	strb.w	r2, [r5, #222]	; 0xde
						conn->llcp_cu.win_offset_us = 0U;
   16a64:	2000      	movs	r0, #0
						(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   16a66:	2203      	movs	r2, #3
						conn->llcp_cu.win_offset_us = 0U;
   16a68:	f8c5 00e8 	str.w	r0, [r5, #232]	; 0xe8
						conn->llcp_cu.latency =
   16a6c:	f8a5 60e2 	strh.w	r6, [r5, #226]	; 0xe2
						conn->llcp_cu.timeout =
   16a70:	f8a5 40e4 	strh.w	r4, [r5, #228]	; 0xe4
						(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   16a74:	710a      	strb	r2, [r1, #4]
						break;
   16a76:	f7ff b8be 	b.w	15bf6 <ull_conn_rx+0x1fe>
		if (!conn->tx_ctrl) {
   16a7a:	f8d5 318c 	ldr.w	r3, [r5, #396]	; 0x18c
   16a7e:	2b00      	cmp	r3, #0
   16a80:	d184      	bne.n	1698c <ull_conn_rx+0xf94>
			tx->next = conn->tx_head;
   16a82:	6011      	str	r1, [r2, #0]
				conn->tx_ctrl = tx;
   16a84:	e9c5 2262 	strd	r2, r2, [r5, #392]	; 0x188
				conn->tx_ctrl_last = tx;
   16a88:	f8c5 2190 	str.w	r2, [r5, #400]	; 0x190
   16a8c:	e785      	b.n	1699a <ull_conn_rx+0xfa2>
			tx = mem_acquire(&mem_conn_tx_ctrl.free);
   16a8e:	4867      	ldr	r0, [pc, #412]	; (16c2c <ull_conn_rx+0x1234>)
   16a90:	f7f9 fa94 	bl	ffbc <mem_acquire>
			if (!tx) {
   16a94:	4601      	mov	r1, r0
   16a96:	2800      	cmp	r0, #0
   16a98:	f43f af03 	beq.w	168a2 <ull_conn_rx+0xeaa>
			conn->llcp_version.tx = 1U;
   16a9c:	f895 20fe 	ldrb.w	r2, [r5, #254]	; 0xfe
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   16aa0:	7903      	ldrb	r3, [r0, #4]
			conn->llcp_version.tx = 1U;
   16aa2:	f042 0201 	orr.w	r2, r2, #1
   16aa6:	f885 20fe 	strb.w	r2, [r5, #254]	; 0xfe
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   16aaa:	f043 0303 	orr.w	r3, r3, #3
			pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   16aae:	220c      	movs	r2, #12
			pdu_tx->len =
   16ab0:	7144      	strb	r4, [r0, #5]
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   16ab2:	7103      	strb	r3, [r0, #4]
			v->version_number = LL_VERSION_NUMBER;
   16ab4:	240b      	movs	r4, #11
			v->sub_version_number =
   16ab6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
			v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   16aba:	f06f 000e 	mvn.w	r0, #14
			pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   16abe:	71ca      	strb	r2, [r1, #7]
			v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   16ac0:	2205      	movs	r2, #5
   16ac2:	7248      	strb	r0, [r1, #9]
			v->sub_version_number =
   16ac4:	72cb      	strb	r3, [r1, #11]
   16ac6:	730b      	strb	r3, [r1, #12]
			v->version_number = LL_VERSION_NUMBER;
   16ac8:	720c      	strb	r4, [r1, #8]
			v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   16aca:	728a      	strb	r2, [r1, #10]
			ctrl_tx_sec_enqueue(conn, tx);
   16acc:	4628      	mov	r0, r5
   16ace:	f7fe fad7 	bl	15080 <ctrl_tx_sec_enqueue>
			rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   16ad2:	2303      	movs	r3, #3
   16ad4:	7133      	strb	r3, [r6, #4]
   16ad6:	e44b      	b.n	16370 <ull_conn_rx+0x978>
					uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   16ad8:	f8b6 8020 	ldrh.w	r8, [r6, #32]
					if ((interval_min < 6) ||
   16adc:	f1b8 0f05 	cmp.w	r8, #5
					uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   16ae0:	fa1f f288 	uxth.w	r2, r8
					if ((interval_min < 6) ||
   16ae4:	d97b      	bls.n	16bde <ull_conn_rx+0x11e6>
					uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   16ae6:	f8b6 e022 	ldrh.w	lr, [r6, #34]	; 0x22
					if ((interval_min < 6) ||
   16aea:	f5be 6f48 	cmp.w	lr, #3200	; 0xc80
					uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   16aee:	fa1f f18e 	uxth.w	r1, lr
					if ((interval_min < 6) ||
   16af2:	d874      	bhi.n	16bde <ull_conn_rx+0x11e6>
							(interval_max > 3200) ||
   16af4:	428a      	cmp	r2, r1
   16af6:	d872      	bhi.n	16bde <ull_conn_rx+0x11e6>
					uint16_t latency = sys_le16_to_cpu(cpr->latency);
   16af8:	f8b6 c024 	ldrh.w	ip, [r6, #36]	; 0x24
							(interval_min > interval_max) ||
   16afc:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
					uint16_t latency = sys_le16_to_cpu(cpr->latency);
   16b00:	fa1f fa8c 	uxth.w	sl, ip
							(interval_min > interval_max) ||
   16b04:	d26b      	bcs.n	16bde <ull_conn_rx+0x11e6>
					uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
   16b06:	8cf0      	ldrh	r0, [r6, #38]	; 0x26
							(latency > 499) ||
   16b08:	f1a0 090a 	sub.w	r9, r0, #10
   16b0c:	fa1f f989 	uxth.w	r9, r9
   16b10:	f640 4b76 	movw	fp, #3190	; 0xc76
   16b14:	45d9      	cmp	r9, fp
					uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
   16b16:	b282      	uxth	r2, r0
							(latency > 499) ||
   16b18:	d861      	bhi.n	16bde <ull_conn_rx+0x11e6>
							 ((latency + 1) * interval_max)) ||
   16b1a:	fb0a 1901 	mla	r9, sl, r1, r1
							(timeout < 10) || (timeout > 3200) ||
   16b1e:	ebb9 0f82 	cmp.w	r9, r2, lsl #2
   16b22:	d25c      	bcs.n	16bde <ull_conn_rx+0x11e6>
							 ((latency + 1) * interval_max)) ||
   16b24:	f896 b028 	ldrb.w	fp, [r6, #40]	; 0x28
   16b28:	4559      	cmp	r1, fp
   16b2a:	d358      	bcc.n	16bde <ull_conn_rx+0x11e6>
					conn->llcp_conn_param.latency =	latency;
   16b2c:	f8a5 c150 	strh.w	ip, [r5, #336]	; 0x150
					conn->llcp_conn_param.interval_min = interval_min;
   16b30:	f8a5 814c 	strh.w	r8, [r5, #332]	; 0x14c
					conn->llcp_conn_param.interval_max = interval_max;
   16b34:	f8a5 e14e 	strh.w	lr, [r5, #334]	; 0x14e
					conn->llcp_conn_param.timeout =	timeout;
   16b38:	f8a5 0152 	strh.w	r0, [r5, #338]	; 0x152
					conn->llcp_conn_param.preferred_periodicity =
   16b3c:	f885 b154 	strb.w	fp, [r5, #340]	; 0x154
						sys_le16_to_cpu(cpr->reference_conn_event_count);
   16b40:	f896 e02a 	ldrb.w	lr, [r6, #42]	; 0x2a
   16b44:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
								lll->interval) ||
   16b48:	f8b5 c02e 	ldrh.w	ip, [r5, #46]	; 0x2e
						sys_le16_to_cpu(cpr->reference_conn_event_count);
   16b4c:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
					conn->llcp_conn_param.reference_conn_event_count =
   16b50:	f8a5 0156 	strh.w	r0, [r5, #342]	; 0x156
						sys_le16_to_cpu(cpr->offset0);
   16b54:	f896 e02c 	ldrb.w	lr, [r6, #44]	; 0x2c
   16b58:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
   16b5c:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
					conn->llcp_conn_param.offset0 =
   16b60:	f8a5 0158 	strh.w	r0, [r5, #344]	; 0x158
						sys_le16_to_cpu(cpr->offset1);
   16b64:	f896 e02e 	ldrb.w	lr, [r6, #46]	; 0x2e
   16b68:	f896 002d 	ldrb.w	r0, [r6, #45]	; 0x2d
   16b6c:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
					conn->llcp_conn_param.offset1 =
   16b70:	f8a5 015a 	strh.w	r0, [r5, #346]	; 0x15a
						sys_le16_to_cpu(cpr->offset2);
   16b74:	f896 e030 	ldrb.w	lr, [r6, #48]	; 0x30
   16b78:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
   16b7c:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
					conn->llcp_conn_param.offset2 =
   16b80:	f8a5 015c 	strh.w	r0, [r5, #348]	; 0x15c
						sys_le16_to_cpu(cpr->offset3);
   16b84:	f896 e032 	ldrb.w	lr, [r6, #50]	; 0x32
   16b88:	f896 0031 	ldrb.w	r0, [r6, #49]	; 0x31
   16b8c:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
					conn->llcp_conn_param.offset3 =
   16b90:	f8a5 015e 	strh.w	r0, [r5, #350]	; 0x15e
						sys_le16_to_cpu(cpr->offset4);
   16b94:	f896 0033 	ldrb.w	r0, [r6, #51]	; 0x33
   16b98:	f896 e034 	ldrb.w	lr, [r6, #52]	; 0x34
   16b9c:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
					conn->llcp_conn_param.offset4 =
   16ba0:	f8a5 0160 	strh.w	r0, [r5, #352]	; 0x160
						sys_le16_to_cpu(cpr->offset5);
   16ba4:	f896 0035 	ldrb.w	r0, [r6, #53]	; 0x35
   16ba8:	f896 6036 	ldrb.w	r6, [r6, #54]	; 0x36
					if ((conn->llcp_conn_param.interval_max !=
   16bac:	4561      	cmp	r1, ip
						sys_le16_to_cpu(cpr->offset5);
   16bae:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
					conn->llcp_conn_param.offset5 =
   16bb2:	f8a5 0162 	strh.w	r0, [r5, #354]	; 0x162
					if ((conn->llcp_conn_param.interval_max !=
   16bb6:	f000 82f0 	beq.w	1719a <ull_conn_rx+0x17a2>
						conn->llcp_conn_param.state =
   16bba:	f895 214a 	ldrb.w	r2, [r5, #330]	; 0x14a
   16bbe:	2103      	movs	r1, #3
   16bc0:	f361 0202 	bfi	r2, r1, #0, #3
   16bc4:	f885 214a 	strb.w	r2, [r5, #330]	; 0x14a
					conn->llcp_conn_param.ack--;
   16bc8:	9a00      	ldr	r2, [sp, #0]
   16bca:	3a01      	subs	r2, #1
   16bcc:	f885 2149 	strb.w	r2, [r5, #329]	; 0x149
					if (!conn_upd_curr) {
   16bd0:	2b00      	cmp	r3, #0
   16bd2:	f47f a819 	bne.w	15c08 <ull_conn_rx+0x210>
						conn_upd_curr = conn;
   16bd6:	603d      	str	r5, [r7, #0]
		int nack = 0;
   16bd8:	4618      	mov	r0, r3
   16bda:	f7ff b80c 	b.w	15bf6 <ull_conn_rx+0x1fe>
						nack = reject_ext_ind_send(conn, *rx,
   16bde:	1d31      	adds	r1, r6, #4
   16be0:	4628      	mov	r0, r5
   16be2:	231e      	movs	r3, #30
   16be4:	220f      	movs	r2, #15
   16be6:	f7ff b987 	b.w	15ef8 <ull_conn_rx+0x500>
   16bea:	f8dd e004 	ldr.w	lr, [sp, #4]
   16bee:	e5cb      	b.n	16788 <ull_conn_rx+0xd90>
   16bf0:	46cc      	mov	ip, r9
   16bf2:	e5be      	b.n	16772 <ull_conn_rx+0xd7a>
   16bf4:	4652      	mov	r2, sl
   16bf6:	e619      	b.n	1682c <ull_conn_rx+0xe34>
   16bf8:	465b      	mov	r3, fp
   16bfa:	e5f9      	b.n	167f0 <ull_conn_rx+0xdf8>
						nack = reject_ext_ind_send(conn, *rx,
   16bfc:	1d31      	adds	r1, r6, #4
   16bfe:	4628      	mov	r0, r5
   16c00:	2323      	movs	r3, #35	; 0x23
   16c02:	220f      	movs	r2, #15
   16c04:	f7ff b978 	b.w	15ef8 <ull_conn_rx+0x500>
					conn->llcp_length.disabled = 1U;
   16c08:	f895 2172 	ldrb.w	r2, [r5, #370]	; 0x172
					conn->llcp_length.ack = conn->llcp_length.req;
   16c0c:	f885 3171 	strb.w	r3, [r5, #369]	; 0x171
					conn->llcp_length.disabled = 1U;
   16c10:	f042 0308 	orr.w	r3, r2, #8
   16c14:	f885 3172 	strb.w	r3, [r5, #370]	; 0x172
					conn->llcp_length.ack = conn->llcp_length.req;
   16c18:	f7ff b8c0 	b.w	15d9c <ull_conn_rx+0x3a4>
										0x03) == 0x02) &&
   16c1c:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
   16c20:	2b03      	cmp	r3, #3
   16c22:	f47f a965 	bne.w	15ef0 <ull_conn_rx+0x4f8>
   16c26:	f7ff b95c 	b.w	15ee2 <ull_conn_rx+0x4ea>
   16c2a:	bf00      	nop
   16c2c:	2000802c 	.word	0x2000802c
   16c30:	0002442c 	.word	0x0002442c
   16c34:	00024054 	.word	0x00024054
   16c38:	00023fe4 	.word	0x00023fe4
   16c3c:	00024530 	.word	0x00024530
		instant = sys_le16_to_cpu(ind->instant);
   16c40:	8c70      	ldrh	r0, [r6, #34]	; 0x22
		if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
   16c42:	8eea      	ldrh	r2, [r5, #54]	; 0x36
   16c44:	1a82      	subs	r2, r0, r2
   16c46:	0412      	lsls	r2, r2, #16
   16c48:	f100 80d8 	bmi.w	16dfc <ull_conn_rx+0x1404>
		if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   16c4c:	f895 20bf 	ldrb.w	r2, [r5, #191]	; 0xbf
   16c50:	f895 c0c0 	ldrb.w	ip, [r5, #192]	; 0xc0
   16c54:	eba2 020c 	sub.w	r2, r2, ip
   16c58:	f002 0203 	and.w	r2, r2, #3
   16c5c:	2a02      	cmp	r2, #2
   16c5e:	f000 8101 	beq.w	16e64 <ull_conn_rx+0x146c>
		if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   16c62:	f895 c180 	ldrb.w	ip, [r5, #384]	; 0x180
   16c66:	f895 2181 	ldrb.w	r2, [r5, #385]	; 0x181
   16c6a:	4562      	cmp	r2, ip
   16c6c:	d019      	beq.n	16ca2 <ull_conn_rx+0x12aa>
				(conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
   16c6e:	f895 2182 	ldrb.w	r2, [r5, #386]	; 0x182
		if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   16c72:	f002 0203 	and.w	r2, r2, #3
   16c76:	2a02      	cmp	r2, #2
   16c78:	d113      	bne.n	16ca2 <ull_conn_rx+0x12aa>
			conn->llcp_phy.pause_tx = 0U;
   16c7a:	f895 2183 	ldrb.w	r2, [r5, #387]	; 0x183
			conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   16c7e:	f895 60c4 	ldrb.w	r6, [r5, #196]	; 0xc4
			conn->llcp_phy.ack = conn->llcp_phy.req;
   16c82:	f885 c181 	strb.w	ip, [r5, #385]	; 0x181
			conn->llcp_phy.pause_tx = 0U;
   16c86:	f36f 0200 	bfc	r2, #0, #1
			conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   16c8a:	f3c2 0c80 	ubfx	ip, r2, #2, #1
   16c8e:	f36c 0641 	bfi	r6, ip, #1, #1
			conn->procedure_expire = 0U;
   16c92:	f04f 0c00 	mov.w	ip, #0
			conn->llcp_phy.pause_tx = 0U;
   16c96:	f885 2183 	strb.w	r2, [r5, #387]	; 0x183
			conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   16c9a:	f885 60c4 	strb.w	r6, [r5, #196]	; 0xc4
			conn->procedure_expire = 0U;
   16c9e:	f8a5 c0b0 	strh.w	ip, [r5, #176]	; 0xb0
		conn->llcp.phy_upd_ind.initiate = 0U;
   16ca2:	f895 20c4 	ldrb.w	r2, [r5, #196]	; 0xc4
		conn->llcp.phy_upd_ind.instant = instant;
   16ca6:	f8a5 00c6 	strh.w	r0, [r5, #198]	; 0xc6
		conn->llcp.phy_upd_ind.initiate = 0U;
   16caa:	009b      	lsls	r3, r3, #2
   16cac:	f003 031c 	and.w	r3, r3, #28
   16cb0:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   16cb4:	f002 0202 	and.w	r2, r2, #2
   16cb8:	4313      	orrs	r3, r2
		link->mem = conn->llcp_rx;
   16cba:	f8d5 20d8 	ldr.w	r2, [r5, #216]	; 0xd8
		conn->llcp.phy_upd_ind.initiate = 0U;
   16cbe:	f885 30c4 	strb.w	r3, [r5, #196]	; 0xc4
		link->mem = conn->llcp_rx;
   16cc2:	607a      	str	r2, [r7, #4]
		(*rx)->hdr.link = link;
   16cc4:	6823      	ldr	r3, [r4, #0]
   16cc6:	601f      	str	r7, [r3, #0]
		conn->llcp_rx = *rx;
   16cc8:	6823      	ldr	r3, [r4, #0]
   16cca:	f8c5 30d8 	str.w	r3, [r5, #216]	; 0xd8
		*rx = NULL;
   16cce:	2300      	movs	r3, #0
   16cd0:	6023      	str	r3, [r4, #0]
		struct node_rx_pdu *rx_dle = ll_pdu_rx_alloc();
   16cd2:	f7fd fbb5 	bl	14440 <ll_pdu_rx_alloc>
		LL_ASSERT(rx_dle);
   16cd6:	4604      	mov	r4, r0
   16cd8:	2800      	cmp	r0, #0
   16cda:	f000 81e4 	beq.w	170a6 <ull_conn_rx+0x16ae>
		rx_dle->hdr.link->mem = conn->llcp_rx;
   16cde:	6823      	ldr	r3, [r4, #0]
   16ce0:	f8d5 20d8 	ldr.w	r2, [r5, #216]	; 0xd8
   16ce4:	605a      	str	r2, [r3, #4]
		conn->llcp_ack -= 2U;
   16ce6:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
		if (conn->llcp.phy_upd_ind.tx) {
   16cea:	f895 30c4 	ldrb.w	r3, [r5, #196]	; 0xc4
		conn->llcp_rx = rx_dle;
   16cee:	f8c5 40d8 	str.w	r4, [r5, #216]	; 0xd8
		conn->llcp_ack -= 2U;
   16cf2:	3a02      	subs	r2, #2
		conn->llcp_type = LLCP_PHY_UPD;
   16cf4:	2106      	movs	r1, #6
		if (conn->llcp.phy_upd_ind.tx) {
   16cf6:	f013 0f1c 	tst.w	r3, #28
		conn->llcp_ack -= 2U;
   16cfa:	f885 20c0 	strb.w	r2, [r5, #192]	; 0xc0
		conn->llcp_type = LLCP_PHY_UPD;
   16cfe:	f885 10c1 	strb.w	r1, [r5, #193]	; 0xc1
		if (conn->llcp.phy_upd_ind.tx) {
   16d02:	f43e af81 	beq.w	15c08 <ull_conn_rx+0x210>
			conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   16d06:	f895 2048 	ldrb.w	r2, [r5, #72]	; 0x48
   16d0a:	f3c3 0382 	ubfx	r3, r3, #2, #3
   16d0e:	f363 1206 	bfi	r2, r3, #4, #3
   16d12:	f885 2048 	strb.w	r2, [r5, #72]	; 0x48
		int nack = 0;
   16d16:	2000      	movs	r0, #0
   16d18:	f7fe bf6d 	b.w	15bf6 <ull_conn_rx+0x1fe>
					conn->llcp_phy.pause_tx = 0U;
   16d1c:	f895 3183 	ldrb.w	r3, [r5, #387]	; 0x183
					lll->phy_tx_time = lll->phy_tx;
   16d20:	f895 2048 	ldrb.w	r2, [r5, #72]	; 0x48
					conn->llcp_phy.ack = conn->llcp_phy.req;
   16d24:	f885 1181 	strb.w	r1, [r5, #385]	; 0x181
					conn->llcp_phy.pause_tx = 0U;
   16d28:	f023 0309 	bic.w	r3, r3, #9
					lll->phy_tx_time = lll->phy_tx;
   16d2c:	4611      	mov	r1, r2
					conn->llcp_phy.pause_tx = 0U;
   16d2e:	f043 0308 	orr.w	r3, r3, #8
					lll->phy_tx_time = lll->phy_tx;
   16d32:	f362 1106 	bfi	r1, r2, #4, #3
					if (conn->llcp_phy.cmd) {
   16d36:	075f      	lsls	r7, r3, #29
					conn->llcp_phy.pause_tx = 0U;
   16d38:	f885 3183 	strb.w	r3, [r5, #387]	; 0x183
					lll->phy_tx_time = lll->phy_tx;
   16d3c:	f885 1048 	strb.w	r1, [r5, #72]	; 0x48
   16d40:	f3c2 0202 	ubfx	r2, r2, #0, #3
					if (conn->llcp_phy.cmd) {
   16d44:	f140 80e2 	bpl.w	16f0c <ull_conn_rx+0x1514>
						(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   16d48:	6821      	ldr	r1, [r4, #0]
						p->status = 0U;
   16d4a:	2300      	movs	r3, #0
						(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   16d4c:	200f      	movs	r0, #15
   16d4e:	7108      	strb	r0, [r1, #4]
						p->tx = lll->phy_tx;
   16d50:	7772      	strb	r2, [r6, #29]
						p->status = 0U;
   16d52:	7733      	strb	r3, [r6, #28]
						p->rx = lll->phy_rx;
   16d54:	f895 3049 	ldrb.w	r3, [r5, #73]	; 0x49
   16d58:	f3c3 0302 	ubfx	r3, r3, #0, #3
   16d5c:	77b3      	strb	r3, [r6, #30]
   16d5e:	f7ff b81d 	b.w	15d9c <ull_conn_rx+0x3a4>
						conn->llcp_phy.state =
   16d62:	f895 3182 	ldrb.w	r3, [r5, #386]	; 0x182
						if (conn->llcp_phy.ack ==
   16d66:	428a      	cmp	r2, r1
						conn->llcp_phy.state =
   16d68:	f043 0303 	orr.w	r3, r3, #3
   16d6c:	f885 3182 	strb.w	r3, [r5, #386]	; 0x182
						if (conn->llcp_phy.ack ==
   16d70:	d112      	bne.n	16d98 <ull_conn_rx+0x13a0>
							conn->llcp_phy.tx =
   16d72:	f8b5 3182 	ldrh.w	r3, [r5, #386]	; 0x182
								conn->phy_pref_rx;
   16d76:	f895 1184 	ldrb.w	r1, [r5, #388]	; 0x184
							conn->llcp_phy.tx =
   16d7a:	48db      	ldr	r0, [pc, #876]	; (170e8 <ull_conn_rx+0x16f0>)
   16d7c:	4018      	ands	r0, r3
   16d7e:	f001 0307 	and.w	r3, r1, #7
   16d82:	009b      	lsls	r3, r3, #2
   16d84:	f3c1 1102 	ubfx	r1, r1, #4, #3
   16d88:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
							conn->llcp_phy.ack--;
   16d8c:	3a01      	subs	r2, #1
							conn->llcp_phy.tx =
   16d8e:	4303      	orrs	r3, r0
							conn->llcp_phy.ack--;
   16d90:	f885 2181 	strb.w	r2, [r5, #385]	; 0x181
							conn->llcp_phy.tx =
   16d94:	f8a5 3182 	strh.w	r3, [r5, #386]	; 0x182
						conn->llcp_phy.rx &= p->tx_phys;
   16d98:	f895 2182 	ldrb.w	r2, [r5, #386]	; 0x182
						conn->llcp_phy.tx &= p->rx_phys;
   16d9c:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
						conn->llcp_phy.rx &= p->tx_phys;
   16da0:	f896 1020 	ldrb.w	r1, [r6, #32]
						conn->llcp_phy.tx &= p->rx_phys;
   16da4:	f3c2 0082 	ubfx	r0, r2, #2, #3
   16da8:	4003      	ands	r3, r0
						conn->llcp_phy.rx &= p->tx_phys;
   16daa:	ea01 1152 	and.w	r1, r1, r2, lsr #5
						conn->llcp_phy.tx &= p->rx_phys;
   16dae:	009b      	lsls	r3, r3, #2
   16db0:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   16db4:	f002 0203 	and.w	r2, r2, #3
   16db8:	4313      	orrs	r3, r2
						if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   16dba:	f013 0f1c 	tst.w	r3, #28
						conn->llcp_phy.tx &= p->rx_phys;
   16dbe:	f885 3182 	strb.w	r3, [r5, #386]	; 0x182
						if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   16dc2:	d002      	beq.n	16dca <ull_conn_rx+0x13d2>
   16dc4:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   16dc8:	d105      	bne.n	16dd6 <ull_conn_rx+0x13de>
							conn->llcp_phy.tx = 0;
   16dca:	f895 3182 	ldrb.w	r3, [r5, #386]	; 0x182
   16dce:	f003 0303 	and.w	r3, r3, #3
   16dd2:	f885 3182 	strb.w	r3, [r5, #386]	; 0x182
						conn->llcp_phy.pause_tx = 1U;
   16dd6:	f895 3183 	ldrb.w	r3, [r5, #387]	; 0x183
   16dda:	f043 0301 	orr.w	r3, r3, #1
   16dde:	f885 3183 	strb.w	r3, [r5, #387]	; 0x183
						(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   16de2:	6823      	ldr	r3, [r4, #0]
   16de4:	2203      	movs	r2, #3
   16de6:	711a      	strb	r2, [r3, #4]
		int nack = 0;
   16de8:	2000      	movs	r0, #0
   16dea:	f7fe bf04 	b.w	15bf6 <ull_conn_rx+0x1fe>
						nack = reject_ext_ind_send(conn, *rx,
   16dee:	6821      	ldr	r1, [r4, #0]
   16df0:	4628      	mov	r0, r5
   16df2:	3104      	adds	r1, #4
   16df4:	231e      	movs	r3, #30
   16df6:	2210      	movs	r2, #16
   16df8:	f7ff b87e 	b.w	15ef8 <ull_conn_rx+0x500>
			(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   16dfc:	2303      	movs	r3, #3
   16dfe:	7133      	strb	r3, [r6, #4]
			return BT_HCI_ERR_INSTANT_PASSED;
   16e00:	2328      	movs	r3, #40	; 0x28
						conn->llcp_terminate.reason_peer = err;
   16e02:	f885 3107 	strb.w	r3, [r5, #263]	; 0x107
		int nack = 0;
   16e06:	2000      	movs	r0, #0
   16e08:	f7fe bef5 	b.w	15bf6 <ull_conn_rx+0x1fe>
						nack = reject_ext_ind_send(conn, *rx,
   16e0c:	1d31      	adds	r1, r6, #4
   16e0e:	2323      	movs	r3, #35	; 0x23
   16e10:	f7ff b871 	b.w	15ef6 <ull_conn_rx+0x4fe>
				conn->llcp_length.ack = conn->llcp_length.req;
   16e14:	9800      	ldr	r0, [sp, #0]
   16e16:	f885 0171 	strb.w	r0, [r5, #369]	; 0x171
				conn->procedure_expire = 0U;
   16e1a:	2700      	movs	r7, #0
				if (eff_tx_octets == conn->lll.max_tx_octets &&
   16e1c:	45cc      	cmp	ip, r9
				conn->procedure_expire = 0U;
   16e1e:	f8a5 70b0 	strh.w	r7, [r5, #176]	; 0xb0
				if (eff_tx_octets == conn->lll.max_tx_octets &&
   16e22:	f000 808b 	beq.w	16f3c <ull_conn_rx+0x1544>
				conn->lll.max_rx_time = eff_rx_time;
   16e26:	f8a5 2046 	strh.w	r2, [r5, #70]	; 0x46
				if (tx) {
   16e2a:	2900      	cmp	r1, #0
   16e2c:	f000 8081 	beq.w	16f32 <ull_conn_rx+0x153a>
					conn->llcp_length.state =
   16e30:	f895 4172 	ldrb.w	r4, [r5, #370]	; 0x172
						(conn->llcp_length.req - 1);
   16e34:	9800      	ldr	r0, [sp, #0]
					conn->llcp_length.rx_octets = eff_rx_octets;
   16e36:	f8a5 e174 	strh.w	lr, [r5, #372]	; 0x174
					conn->llcp_length.state =
   16e3a:	2703      	movs	r7, #3
						(conn->llcp_length.req - 1);
   16e3c:	3801      	subs	r0, #1
					conn->llcp_length.state =
   16e3e:	f367 0402 	bfi	r4, r7, #0, #3
					conn->llcp_length.ack =
   16e42:	f885 0171 	strb.w	r0, [r5, #369]	; 0x171
					conn->llcp_length.tx_octets = eff_tx_octets;
   16e46:	f8a5 c176 	strh.w	ip, [r5, #374]	; 0x176
					conn->llcp_length.rx_time = eff_rx_time;
   16e4a:	f8a5 2178 	strh.w	r2, [r5, #376]	; 0x178
					conn->llcp_length.tx_time = eff_tx_time;
   16e4e:	f8a5 317a 	strh.w	r3, [r5, #378]	; 0x17a
					conn->llcp_length.state =
   16e52:	f885 4172 	strb.w	r4, [r5, #370]	; 0x172
				lr->max_rx_octets = sys_cpu_to_le16(eff_rx_octets);
   16e56:	f8a6 e020 	strh.w	lr, [r6, #32]
				lr->max_tx_octets = sys_cpu_to_le16(eff_tx_octets);
   16e5a:	f8a6 c024 	strh.w	ip, [r6, #36]	; 0x24
				lr->max_rx_time = sys_cpu_to_le16(eff_rx_time);
   16e5e:	8472      	strh	r2, [r6, #34]	; 0x22
				lr->max_tx_time = sys_cpu_to_le16(eff_tx_time);
   16e60:	84f3      	strh	r3, [r6, #38]	; 0x26
   16e62:	e507      	b.n	16874 <ull_conn_rx+0xe7c>
			(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   16e64:	2303      	movs	r3, #3
   16e66:	7133      	strb	r3, [r6, #4]
			return BT_HCI_ERR_DIFF_TRANS_COLLISION;
   16e68:	232a      	movs	r3, #42	; 0x2a
   16e6a:	e7ca      	b.n	16e02 <ull_conn_rx+0x140a>
										0x03) == 0x02) &&
   16e6c:	f895 20c1 	ldrb.w	r2, [r5, #193]	; 0xc1
   16e70:	2a03      	cmp	r2, #3
   16e72:	f47f ac41 	bne.w	166f8 <ull_conn_rx+0xd00>
   16e76:	e438      	b.n	166ea <ull_conn_rx+0xcf2>
					conn->llcp_length.state =
   16e78:	2604      	movs	r6, #4
   16e7a:	f366 0002 	bfi	r0, r6, #0, #3
					conn->lll.max_tx_octets = eff_tx_octets;
   16e7e:	f8a5 c040 	strh.w	ip, [r5, #64]	; 0x40
					conn->lll.max_tx_time = eff_tx_time;
   16e82:	f8a5 3044 	strh.w	r3, [r5, #68]	; 0x44
					conn->llcp_length.state =
   16e86:	f885 0172 	strb.w	r0, [r5, #370]	; 0x172
   16e8a:	e4e9      	b.n	16860 <ull_conn_rx+0xe68>
		struct node_tx *tx = NULL;
   16e8c:	2100      	movs	r1, #0
   16e8e:	f7fe bfad 	b.w	15dec <ull_conn_rx+0x3f4>
				eff_tx_time = MAX(eff_tx_time,
   16e92:	f44f 6329 	mov.w	r3, #2704	; 0xa90
   16e96:	e4a7      	b.n	167e8 <ull_conn_rx+0xdf0>
					LL_ASSERT(conn_upd_curr == conn);
   16e98:	4f94      	ldr	r7, [pc, #592]	; (170ec <ull_conn_rx+0x16f4>)
   16e9a:	683a      	ldr	r2, [r7, #0]
   16e9c:	4295      	cmp	r5, r2
   16e9e:	d00e      	beq.n	16ebe <ull_conn_rx+0x14c6>
   16ea0:	4a93      	ldr	r2, [pc, #588]	; (170f0 <ull_conn_rx+0x16f8>)
   16ea2:	4994      	ldr	r1, [pc, #592]	; (170f4 <ull_conn_rx+0x16fc>)
   16ea4:	4894      	ldr	r0, [pc, #592]	; (170f8 <ull_conn_rx+0x1700>)
   16ea6:	f641 23ea 	movw	r3, #6890	; 0x1aea
   16eaa:	f007 f84e 	bl	1df4a <printk>
   16eae:	4040      	eors	r0, r0
   16eb0:	f380 8811 	msr	BASEPRI, r0
   16eb4:	f04f 0003 	mov.w	r0, #3
   16eb8:	df02      	svc	2
   16eba:	f895 3148 	ldrb.w	r3, [r5, #328]	; 0x148
					if (!conn->llcp_conn_param.cmd) {
   16ebe:	f895 214a 	ldrb.w	r2, [r5, #330]	; 0x14a
					conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   16ec2:	f885 3149 	strb.w	r3, [r5, #329]	; 0x149
	conn_upd_curr = NULL;
   16ec6:	2300      	movs	r3, #0
   16ec8:	603b      	str	r3, [r7, #0]
					if (!conn->llcp_conn_param.cmd) {
   16eca:	f012 0308 	ands.w	r3, r2, #8
						(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   16ece:	6822      	ldr	r2, [r4, #0]
					if (!conn->llcp_conn_param.cmd) {
   16ed0:	f43f a91e 	beq.w	16110 <ull_conn_rx+0x718>
					(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   16ed4:	210b      	movs	r1, #11
					cu->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   16ed6:	231a      	movs	r3, #26
					(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   16ed8:	7111      	strb	r1, [r2, #4]
					cu->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   16eda:	7733      	strb	r3, [r6, #28]
					cu->interval = lll->interval;
   16edc:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
					cu->timeout = conn->supervision_reload *
   16ede:	f8b5 20aa 	ldrh.w	r2, [r5, #170]	; 0xaa
					cu->latency = lll->latency;
   16ee2:	8e29      	ldrh	r1, [r5, #48]	; 0x30
					cu->interval = lll->interval;
   16ee4:	83f3      	strh	r3, [r6, #30]
					cu->timeout = conn->supervision_reload *
   16ee6:	fb03 f202 	mul.w	r2, r3, r2
						lll->interval * 125U / 1000;
   16eea:	237d      	movs	r3, #125	; 0x7d
   16eec:	fb03 f302 	mul.w	r3, r3, r2
					cu->latency = lll->latency;
   16ef0:	8431      	strh	r1, [r6, #32]
						lll->interval * 125U / 1000;
   16ef2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   16ef6:	fbb3 f3f2 	udiv	r3, r3, r2
					cu->timeout = conn->supervision_reload *
   16efa:	8473      	strh	r3, [r6, #34]	; 0x22
						 PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ)) {
   16efc:	f7fe bf4e 	b.w	15d9c <ull_conn_rx+0x3a4>
			conn_upd_curr = conn;
   16f00:	601d      	str	r5, [r3, #0]
   16f02:	f7ff b836 	b.w	15f72 <ull_conn_rx+0x57a>
				eff_rx_time = MAX(eff_rx_time,
   16f06:	f44f 6829 	mov.w	r8, #2704	; 0xa90
   16f0a:	e48a      	b.n	16822 <ull_conn_rx+0xe2a>
						(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   16f0c:	6823      	ldr	r3, [r4, #0]
   16f0e:	2203      	movs	r2, #3
   16f10:	711a      	strb	r2, [r3, #4]
   16f12:	f7fe bf43 	b.w	15d9c <ull_conn_rx+0x3a4>
					conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   16f16:	f895 20c4 	ldrb.w	r2, [r5, #196]	; 0xc4
						conn->llcp_ack -= 2U;
   16f1a:	3b02      	subs	r3, #2
					conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   16f1c:	f36f 0201 	bfc	r2, #0, #2
						conn->llcp_type = LLCP_ENCRYPTION;
   16f20:	2003      	movs	r0, #3
						conn->llcp_ack -= 2U;
   16f22:	f885 30c0 	strb.w	r3, [r5, #192]	; 0xc0
					conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   16f26:	f885 20c4 	strb.w	r2, [r5, #196]	; 0xc4
						conn->llcp_type = LLCP_ENCRYPTION;
   16f2a:	f885 00c1 	strb.w	r0, [r5, #193]	; 0xc1
						conn->llcp_ack -= 2U;
   16f2e:	f7fe bf2c 	b.w	15d8a <ull_conn_rx+0x392>
					conn->lll.max_tx_octets = eff_tx_octets;
   16f32:	f8a5 c040 	strh.w	ip, [r5, #64]	; 0x40
					conn->lll.max_tx_time = eff_tx_time;
   16f36:	f8a5 3044 	strh.w	r3, [r5, #68]	; 0x44
   16f3a:	e78c      	b.n	16e56 <ull_conn_rx+0x145e>
				if (eff_tx_octets == conn->lll.max_tx_octets &&
   16f3c:	455b      	cmp	r3, fp
   16f3e:	f47f af72 	bne.w	16e26 <ull_conn_rx+0x142e>
						eff_rx_time == conn->lll.max_rx_time &&
   16f42:	4552      	cmp	r2, sl
   16f44:	f47f af6f 	bne.w	16e26 <ull_conn_rx+0x142e>
					(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   16f48:	6820      	ldr	r0, [r4, #0]
   16f4a:	2403      	movs	r4, #3
   16f4c:	7104      	strb	r4, [r0, #4]
					goto send_length_resp;
   16f4e:	e491      	b.n	16874 <ull_conn_rx+0xe7c>
						uint16_t interval_min =
   16f50:	f8b6 8020 	ldrh.w	r8, [r6, #32]
						if ((interval_min < 6) ||
   16f54:	f1b8 0f05 	cmp.w	r8, #5
						uint16_t interval_min =
   16f58:	fa1f f088 	uxth.w	r0, r8
						if ((interval_min < 6) ||
   16f5c:	f67f ae3f 	bls.w	16bde <ull_conn_rx+0x11e6>
						uint16_t interval_max =
   16f60:	f8b6 e022 	ldrh.w	lr, [r6, #34]	; 0x22
						if ((interval_min < 6) ||
   16f64:	f5be 6f48 	cmp.w	lr, #3200	; 0xc80
						uint16_t interval_max =
   16f68:	fa1f f28e 	uxth.w	r2, lr
						if ((interval_min < 6) ||
   16f6c:	f63f ae37 	bhi.w	16bde <ull_conn_rx+0x11e6>
								(interval_max > 3200) ||
   16f70:	4290      	cmp	r0, r2
   16f72:	f63f ae34 	bhi.w	16bde <ull_conn_rx+0x11e6>
						uint16_t latency =
   16f76:	f8b6 c024 	ldrh.w	ip, [r6, #36]	; 0x24
   16f7a:	fa1f f08c 	uxth.w	r0, ip
								(interval_min > interval_max) ||
   16f7e:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
						uint16_t latency =
   16f82:	e9cd 0001 	strd	r0, r0, [sp, #4]
								(interval_min > interval_max) ||
   16f86:	f4bf ae2a 	bcs.w	16bde <ull_conn_rx+0x11e6>
						uint16_t timeout =
   16f8a:	8cf0      	ldrh	r0, [r6, #38]	; 0x26
   16f8c:	f8ad 000e 	strh.w	r0, [sp, #14]
								(latency > 499) ||
   16f90:	f1a0 090a 	sub.w	r9, r0, #10
   16f94:	fa1f f989 	uxth.w	r9, r9
   16f98:	f640 4a76 	movw	sl, #3190	; 0xc76
   16f9c:	45d1      	cmp	r9, sl
						uint16_t timeout =
   16f9e:	fa1f fb80 	uxth.w	fp, r0
								(latency > 499) ||
   16fa2:	f63f ae1c 	bhi.w	16bde <ull_conn_rx+0x11e6>
								 ((latency + 1) * interval_max)) ||
   16fa6:	9801      	ldr	r0, [sp, #4]
   16fa8:	fb00 2902 	mla	r9, r0, r2, r2
								(timeout > 3200) ||
   16fac:	ebb9 0f8b 	cmp.w	r9, fp, lsl #2
   16fb0:	f4bf ae15 	bcs.w	16bde <ull_conn_rx+0x11e6>
								 ((latency + 1) * interval_max)) ||
   16fb4:	f896 a028 	ldrb.w	sl, [r6, #40]	; 0x28
   16fb8:	4552      	cmp	r2, sl
   16fba:	f4ff ae10 	bcc.w	16bde <ull_conn_rx+0x11e6>
						conn->llcp_conn_param.timeout =	timeout;
   16fbe:	f8bd 000e 	ldrh.w	r0, [sp, #14]
						conn->llcp_conn_param.latency =	latency;
   16fc2:	f8a5 c150 	strh.w	ip, [r5, #336]	; 0x150
						conn->llcp_conn_param.interval_min =
   16fc6:	f8a5 814c 	strh.w	r8, [r5, #332]	; 0x14c
						conn->llcp_conn_param.interval_max =
   16fca:	f8a5 e14e 	strh.w	lr, [r5, #334]	; 0x14e
						conn->llcp_conn_param.timeout =	timeout;
   16fce:	f8a5 0152 	strh.w	r0, [r5, #338]	; 0x152
						conn->llcp_conn_param.preferred_periodicity =
   16fd2:	f885 a154 	strb.w	sl, [r5, #340]	; 0x154
							sys_le16_to_cpu(cpr->reference_conn_event_count);
   16fd6:	f896 e02a 	ldrb.w	lr, [r6, #42]	; 0x2a
   16fda:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
									lll->interval) ||
   16fde:	f8b5 c02e 	ldrh.w	ip, [r5, #46]	; 0x2e
							sys_le16_to_cpu(cpr->reference_conn_event_count);
   16fe2:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
						conn->llcp_conn_param.reference_conn_event_count =
   16fe6:	f8a5 0156 	strh.w	r0, [r5, #342]	; 0x156
							sys_le16_to_cpu(cpr->offset0);
   16fea:	f896 e02c 	ldrb.w	lr, [r6, #44]	; 0x2c
   16fee:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
   16ff2:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
						conn->llcp_conn_param.offset0 =
   16ff6:	f8a5 0158 	strh.w	r0, [r5, #344]	; 0x158
							sys_le16_to_cpu(cpr->offset1);
   16ffa:	f896 e02e 	ldrb.w	lr, [r6, #46]	; 0x2e
   16ffe:	f896 002d 	ldrb.w	r0, [r6, #45]	; 0x2d
   17002:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
						conn->llcp_conn_param.offset1 =
   17006:	f8a5 015a 	strh.w	r0, [r5, #346]	; 0x15a
							sys_le16_to_cpu(cpr->offset2);
   1700a:	f896 e030 	ldrb.w	lr, [r6, #48]	; 0x30
   1700e:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
   17012:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
						conn->llcp_conn_param.offset2 =
   17016:	f8a5 015c 	strh.w	r0, [r5, #348]	; 0x15c
							sys_le16_to_cpu(cpr->offset3);
   1701a:	f896 e032 	ldrb.w	lr, [r6, #50]	; 0x32
   1701e:	f896 0031 	ldrb.w	r0, [r6, #49]	; 0x31
   17022:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
						conn->llcp_conn_param.offset3 =
   17026:	f8a5 015e 	strh.w	r0, [r5, #350]	; 0x15e
							sys_le16_to_cpu(cpr->offset4);
   1702a:	f896 0033 	ldrb.w	r0, [r6, #51]	; 0x33
   1702e:	f896 e034 	ldrb.w	lr, [r6, #52]	; 0x34
   17032:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
						conn->llcp_conn_param.offset4 =
   17036:	f8a5 0160 	strh.w	r0, [r5, #352]	; 0x160
							sys_le16_to_cpu(cpr->offset5);
   1703a:	f896 0035 	ldrb.w	r0, [r6, #53]	; 0x35
   1703e:	f896 6036 	ldrb.w	r6, [r6, #54]	; 0x36
						if ((conn->llcp_conn_param.interval_max !=
   17042:	4562      	cmp	r2, ip
							sys_le16_to_cpu(cpr->offset5);
   17044:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
						conn->llcp_conn_param.offset5 =
   17048:	f8a5 0162 	strh.w	r0, [r5, #354]	; 0x162
						if ((conn->llcp_conn_param.interval_max !=
   1704c:	f000 80c6 	beq.w	171dc <ull_conn_rx+0x17e4>
							if (conn->llcp_enc.pause_tx) {
   17050:	078e      	lsls	r6, r1, #30
								conn->llcp_conn_param.state =
   17052:	f895 214a 	ldrb.w	r2, [r5, #330]	; 0x14a
							if (conn->llcp_enc.pause_tx) {
   17056:	f57f adb2 	bpl.w	16bbe <ull_conn_rx+0x11c6>
								(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   1705a:	6821      	ldr	r1, [r4, #0]
								conn->llcp_conn_param.state =
   1705c:	2002      	movs	r0, #2
   1705e:	f360 0202 	bfi	r2, r0, #0, #3
								(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   17062:	2003      	movs	r0, #3
								conn->llcp_conn_param.state =
   17064:	f885 214a 	strb.w	r2, [r5, #330]	; 0x14a
								(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   17068:	7108      	strb	r0, [r1, #4]
   1706a:	e5ad      	b.n	16bc8 <ull_conn_rx+0x11d0>
			LL_ASSERT(conn_upd_curr == conn);
   1706c:	4f1f      	ldr	r7, [pc, #124]	; (170ec <ull_conn_rx+0x16f4>)
   1706e:	6839      	ldr	r1, [r7, #0]
   17070:	428d      	cmp	r5, r1
   17072:	d010      	beq.n	17096 <ull_conn_rx+0x169e>
   17074:	4a1e      	ldr	r2, [pc, #120]	; (170f0 <ull_conn_rx+0x16f8>)
   17076:	491f      	ldr	r1, [pc, #124]	; (170f4 <ull_conn_rx+0x16fc>)
   17078:	481f      	ldr	r0, [pc, #124]	; (170f8 <ull_conn_rx+0x1700>)
   1707a:	f241 4394 	movw	r3, #5268	; 0x1494
   1707e:	f006 ff64 	bl	1df4a <printk>
   17082:	4040      	eors	r0, r0
   17084:	f380 8811 	msr	BASEPRI, r0
   17088:	f04f 0003 	mov.w	r0, #3
   1708c:	df02      	svc	2
   1708e:	f895 3148 	ldrb.w	r3, [r5, #328]	; 0x148
   17092:	f895 214a 	ldrb.w	r2, [r5, #330]	; 0x14a
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   17096:	f885 3149 	strb.w	r3, [r5, #329]	; 0x149
	conn_upd_curr = NULL;
   1709a:	2300      	movs	r3, #0
   1709c:	603b      	str	r3, [r7, #0]
			conn->procedure_expire = 0U;
   1709e:	f8a5 30b0 	strh.w	r3, [r5, #176]	; 0xb0
   170a2:	f7ff ba7d 	b.w	165a0 <ull_conn_rx+0xba8>
		LL_ASSERT(rx_dle);
   170a6:	4a12      	ldr	r2, [pc, #72]	; (170f0 <ull_conn_rx+0x16f8>)
   170a8:	4914      	ldr	r1, [pc, #80]	; (170fc <ull_conn_rx+0x1704>)
   170aa:	4813      	ldr	r0, [pc, #76]	; (170f8 <ull_conn_rx+0x1700>)
   170ac:	f241 730c 	movw	r3, #5900	; 0x170c
   170b0:	f006 ff4b 	bl	1df4a <printk>
   170b4:	4040      	eors	r0, r0
   170b6:	f380 8811 	msr	BASEPRI, r0
   170ba:	f04f 0003 	mov.w	r0, #3
   170be:	df02      	svc	2
   170c0:	e60d      	b.n	16cde <ull_conn_rx+0x12e6>
			(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   170c2:	6823      	ldr	r3, [r4, #0]
   170c4:	210f      	movs	r1, #15
   170c6:	7119      	strb	r1, [r3, #4]
			p->status = 0U;
   170c8:	7730      	strb	r0, [r6, #28]
			p->tx = conn->lll.phy_tx;
   170ca:	7772      	strb	r2, [r6, #29]
			p->rx = conn->lll.phy_rx;
   170cc:	f895 3049 	ldrb.w	r3, [r5, #73]	; 0x49
   170d0:	f3c3 0302 	ubfx	r3, r3, #0, #3
   170d4:	77b3      	strb	r3, [r6, #30]
					if (err) {
   170d6:	f7fe bd8e 	b.w	15bf6 <ull_conn_rx+0x1fe>
			tx->next = conn->tx_head->next;
   170da:	6811      	ldr	r1, [r2, #0]
   170dc:	6019      	str	r1, [r3, #0]
			conn->tx_head->next = tx;
   170de:	6013      	str	r3, [r2, #0]
				conn->tx_ctrl_last = tx;
   170e0:	e9c5 3363 	strd	r3, r3, [r5, #396]	; 0x18c
   170e4:	f7ff b873 	b.w	161ce <ull_conn_rx+0x7d6>
   170e8:	fffffb03 	.word	0xfffffb03
   170ec:	200075a4 	.word	0x200075a4
   170f0:	0002442c 	.word	0x0002442c
   170f4:	00024558 	.word	0x00024558
   170f8:	00023fe4 	.word	0x00023fe4
   170fc:	00024570 	.word	0x00024570
			tx->next = conn->tx_head->next;
   17100:	680b      	ldr	r3, [r1, #0]
   17102:	6013      	str	r3, [r2, #0]
			conn->tx_head->next = tx;
   17104:	600a      	str	r2, [r1, #0]
				conn->tx_ctrl_last = tx;
   17106:	e9c5 2263 	strd	r2, r2, [r5, #396]	; 0x18c
   1710a:	e446      	b.n	1699a <ull_conn_rx+0xfa2>
				 ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
   1710c:	f895 3172 	ldrb.w	r3, [r5, #370]	; 0x172
				((conn->llcp_length.req != conn->llcp_length.ack) &&
   17110:	f013 0f06 	tst.w	r3, #6
   17114:	f43f ab24 	beq.w	16760 <ull_conn_rx+0xd68>
   17118:	f7fe be61 	b.w	15dde <ull_conn_rx+0x3e6>
			LL_ASSERT(conn->llcp_cu.req == conn->llcp_cu.ack);
   1711c:	f895 20dc 	ldrb.w	r2, [r5, #220]	; 0xdc
   17120:	f895 30dd 	ldrb.w	r3, [r5, #221]	; 0xdd
   17124:	429a      	cmp	r2, r3
   17126:	d00e      	beq.n	17146 <ull_conn_rx+0x174e>
   17128:	4a38      	ldr	r2, [pc, #224]	; (1720c <ull_conn_rx+0x1814>)
   1712a:	4939      	ldr	r1, [pc, #228]	; (17210 <ull_conn_rx+0x1818>)
   1712c:	4839      	ldr	r0, [pc, #228]	; (17214 <ull_conn_rx+0x181c>)
   1712e:	f241 4379 	movw	r3, #5241	; 0x1479
   17132:	f006 ff0a 	bl	1df4a <printk>
   17136:	4040      	eors	r0, r0
   17138:	f380 8811 	msr	BASEPRI, r0
   1713c:	f04f 0003 	mov.w	r0, #3
   17140:	df02      	svc	2
   17142:	f895 30dd 	ldrb.w	r3, [r5, #221]	; 0xdd
			conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   17146:	f895 114a 	ldrb.w	r1, [r5, #330]	; 0x14a
			conn->llcp_cu.interval = conn->llcp_conn_param.interval_max;
   1714a:	f8b5 214e 	ldrh.w	r2, [r5, #334]	; 0x14e
   1714e:	f8a5 20e0 	strh.w	r2, [r5, #224]	; 0xe0
			conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   17152:	2205      	movs	r2, #5
   17154:	f362 0102 	bfi	r1, r2, #0, #3
			conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   17158:	f895 00de 	ldrb.w	r0, [r5, #222]	; 0xde
			conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   1715c:	f885 114a 	strb.w	r1, [r5, #330]	; 0x14a
			conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   17160:	f3c1 02c0 	ubfx	r2, r1, #3, #1
			conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   17164:	0092      	lsls	r2, r2, #2
   17166:	f020 0007 	bic.w	r0, r0, #7
			conn->llcp_cu.ack--;
   1716a:	3b01      	subs	r3, #1
			conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1716c:	f042 0201 	orr.w	r2, r2, #1
   17170:	4302      	orrs	r2, r0
			conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   17172:	f8b5 1150 	ldrh.w	r1, [r5, #336]	; 0x150
			conn->llcp_cu.ack--;
   17176:	f885 30dd 	strb.w	r3, [r5, #221]	; 0xdd
			conn->llcp_cu.win_size = 1U;
   1717a:	2401      	movs	r4, #1
			conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   1717c:	f8b5 3152 	ldrh.w	r3, [r5, #338]	; 0x152
			conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   17180:	f885 20de 	strb.w	r2, [r5, #222]	; 0xde
			conn->llcp_cu.win_offset_us = 0U;
   17184:	2000      	movs	r0, #0
			conn->llcp_cu.win_size = 1U;
   17186:	f885 40ec 	strb.w	r4, [r5, #236]	; 0xec
			conn->llcp_cu.win_offset_us = 0U;
   1718a:	f8c5 00e8 	str.w	r0, [r5, #232]	; 0xe8
			conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   1718e:	f8a5 10e2 	strh.w	r1, [r5, #226]	; 0xe2
			conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   17192:	f8a5 30e4 	strh.w	r3, [r5, #228]	; 0xe4
		if (err) {
   17196:	f7fe bd35 	b.w	15c04 <ull_conn_rx+0x20c>
								lll->interval) ||
   1719a:	8e28      	ldrh	r0, [r5, #48]	; 0x30
   1719c:	4550      	cmp	r0, sl
   1719e:	f47f ad0c 	bne.w	16bba <ull_conn_rx+0x11c2>
							(RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   171a2:	f240 40e2 	movw	r0, #1250	; 0x4e2
   171a6:	fb00 f101 	mul.w	r1, r0, r1
   171aa:	f242 7010 	movw	r0, #10000	; 0x2710
   171ae:	fb00 1202 	mla	r2, r0, r2, r1
							(conn->llcp_conn_param.latency != lll->latency) ||
   171b2:	f8b5 00aa 	ldrh.w	r0, [r5, #170]	; 0xaa
							(RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   171b6:	3a01      	subs	r2, #1
   171b8:	fbb2 f2f1 	udiv	r2, r2, r1
							(conn->llcp_conn_param.latency != lll->latency) ||
   171bc:	b292      	uxth	r2, r2
   171be:	4290      	cmp	r0, r2
   171c0:	f47f acfb 	bne.w	16bba <ull_conn_rx+0x11c2>
						conn->llcp_conn_param.state =
   171c4:	f8b5 214a 	ldrh.w	r2, [r5, #330]	; 0x14a
   171c8:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
   171cc:	f042 0201 	orr.w	r2, r2, #1
   171d0:	f8a5 214a 	strh.w	r2, [r5, #330]	; 0x14a
						(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   171d4:	6822      	ldr	r2, [r4, #0]
   171d6:	2103      	movs	r1, #3
   171d8:	7111      	strb	r1, [r2, #4]
   171da:	e4f5      	b.n	16bc8 <ull_conn_rx+0x11d0>
									lll->interval) ||
   171dc:	8e2a      	ldrh	r2, [r5, #48]	; 0x30
   171de:	9802      	ldr	r0, [sp, #8]
   171e0:	4282      	cmp	r2, r0
   171e2:	f47f af35 	bne.w	17050 <ull_conn_rx+0x1658>
								(RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   171e6:	f240 42e2 	movw	r2, #1250	; 0x4e2
   171ea:	fb02 f00c 	mul.w	r0, r2, ip
   171ee:	f242 7210 	movw	r2, #10000	; 0x2710
								 lll->latency) ||
   171f2:	f8b5 60aa 	ldrh.w	r6, [r5, #170]	; 0xaa
								(RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   171f6:	fb02 020b 	mla	r2, r2, fp, r0
   171fa:	3a01      	subs	r2, #1
   171fc:	fbb2 f2f0 	udiv	r2, r2, r0
								 lll->latency) ||
   17200:	b292      	uxth	r2, r2
   17202:	4296      	cmp	r6, r2
   17204:	f47f af24 	bne.w	17050 <ull_conn_rx+0x1658>
   17208:	e7dc      	b.n	171c4 <ull_conn_rx+0x17cc>
   1720a:	bf00      	nop
   1720c:	0002442c 	.word	0x0002442c
   17210:	00024530 	.word	0x00024530
   17214:	00023fe4 	.word	0x00023fe4

00017218 <ull_conn_tx_demux>:
{
   17218:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1721c:	4f27      	ldr	r7, [pc, #156]	; (172bc <ull_conn_tx_demux+0xa4>)
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1721e:	4e28      	ldr	r6, [pc, #160]	; (172c0 <ull_conn_tx_demux+0xa8>)
   17220:	78fa      	ldrb	r2, [r7, #3]
{
   17222:	4604      	mov	r4, r0
	return (void *)(fifo + first * size);
   17224:	1d3d      	adds	r5, r7, #4
   17226:	e024      	b.n	17272 <ull_conn_tx_demux+0x5a>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   17228:	4642      	mov	r2, r8
   1722a:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   1722e:	4630      	mov	r0, r6
   17230:	f7f8 fef6 	bl	10020 <mem_get>
	if (conn->lll.handle != handle) {
   17234:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   17236:	4543      	cmp	r3, r8
   17238:	d129      	bne.n	1728e <ull_conn_tx_demux+0x76>
			struct node_tx *tx = lll_tx->node;
   1723a:	f8d9 3004 	ldr.w	r3, [r9, #4]
			if (!conn->tx_data) {
   1723e:	f8d0 2194 	ldr.w	r2, [r0, #404]	; 0x194
			tx->next = NULL;
   17242:	2100      	movs	r1, #0
   17244:	6019      	str	r1, [r3, #0]
			if (!conn->tx_data) {
   17246:	b37a      	cbz	r2, 172a8 <ull_conn_tx_demux+0x90>
			if (conn->tx_data_last) {
   17248:	f8d0 2198 	ldr.w	r2, [r0, #408]	; 0x198
   1724c:	b102      	cbz	r2, 17250 <ull_conn_tx_demux+0x38>
				conn->tx_data_last->next = tx;
   1724e:	6013      	str	r3, [r2, #0]
			conn->tx_data_last = tx;
   17250:	f8c0 3198 	str.w	r3, [r0, #408]	; 0x198
		MFIFO_DEQUEUE(conn_tx);
   17254:	78fa      	ldrb	r2, [r7, #3]
	uint8_t _first = *first; /* Copy read-index */
   17256:	78bb      	ldrb	r3, [r7, #2]
   17258:	7879      	ldrb	r1, [r7, #1]
	if (_first == last) {
   1725a:	429a      	cmp	r2, r3
   1725c:	d005      	beq.n	1726a <ull_conn_tx_demux+0x52>
	_first += 1U;
   1725e:	3301      	adds	r3, #1
   17260:	b2db      	uxtb	r3, r3
		_first = 0U;
   17262:	4299      	cmp	r1, r3
   17264:	bf08      	it	eq
   17266:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   17268:	70bb      	strb	r3, [r7, #2]
	} while (--count);
   1726a:	3c01      	subs	r4, #1
   1726c:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   17270:	d018      	beq.n	172a4 <ull_conn_tx_demux+0x8c>
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   17272:	78bb      	ldrb	r3, [r7, #2]
   17274:	7839      	ldrb	r1, [r7, #0]
	if (first == last) {
   17276:	4293      	cmp	r3, r2
   17278:	d014      	beq.n	172a4 <ull_conn_tx_demux+0x8c>
	return (void *)(fifo + first * size);
   1727a:	fb13 f301 	smulbb	r3, r3, r1
		if (!lll_tx) {
   1727e:	eb15 0903 	adds.w	r9, r5, r3
   17282:	d00f      	beq.n	172a4 <ull_conn_tx_demux+0x8c>
		conn = ll_connected_get(lll_tx->handle);
   17284:	f835 8003 	ldrh.w	r8, [r5, r3]
	if (handle >= CONFIG_BT_MAX_CONN) {
   17288:	f1b8 0f03 	cmp.w	r8, #3
   1728c:	d9cc      	bls.n	17228 <ull_conn_tx_demux+0x10>
			struct node_tx *tx = lll_tx->node;
   1728e:	f8d9 1004 	ldr.w	r1, [r9, #4]
			p->ll_id = PDU_DATA_LLID_RESV;
   17292:	790b      	ldrb	r3, [r1, #4]
   17294:	f36f 0301 	bfc	r3, #0, #2
   17298:	710b      	strb	r3, [r1, #4]
			ll_tx_ack_put(0xFFFF, tx);
   1729a:	f64f 70ff 	movw	r0, #65535	; 0xffff
   1729e:	f7fd f8e7 	bl	14470 <ll_tx_ack_put>
   172a2:	e7d7      	b.n	17254 <ull_conn_tx_demux+0x3c>
}
   172a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (!conn->tx_head) {
   172a8:	f8d0 2188 	ldr.w	r2, [r0, #392]	; 0x188
				conn->tx_data = tx;
   172ac:	f8c0 3194 	str.w	r3, [r0, #404]	; 0x194
				if (!conn->tx_head) {
   172b0:	2a00      	cmp	r2, #0
   172b2:	d1c9      	bne.n	17248 <ull_conn_tx_demux+0x30>
					conn->tx_head = tx;
   172b4:	f8c0 3188 	str.w	r3, [r0, #392]	; 0x188
			if (conn->tx_data_last) {
   172b8:	e7ca      	b.n	17250 <ull_conn_tx_demux+0x38>
   172ba:	bf00      	nop
   172bc:	2000059c 	.word	0x2000059c
   172c0:	20006f24 	.word	0x20006f24

000172c4 <conn_cleanup>:
{
   172c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	rx = conn->llcp_rx;
   172c8:	f8d0 40d8 	ldr.w	r4, [r0, #216]	; 0xd8
	rx->hdr.handle = conn->lll.handle;
   172cc:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
	*((uint8_t *)rx->pdu) = reason;
   172ce:	f880 1124 	strb.w	r1, [r0, #292]	; 0x124
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   172d2:	230a      	movs	r3, #10
{
   172d4:	b083      	sub	sp, #12
   172d6:	4606      	mov	r6, r0
	rx->hdr.handle = conn->lll.handle;
   172d8:	f8a0 210e 	strh.w	r2, [r0, #270]	; 0x10e
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   172dc:	f880 310c 	strb.w	r3, [r0, #268]	; 0x10c
	struct lll_conn *lll = &conn->lll;
   172e0:	f100 0b1c 	add.w	fp, r0, #28
	while (rx) {
   172e4:	b144      	cbz	r4, 172f8 <conn_cleanup+0x34>
		hdr->type = NODE_RX_TYPE_DC_PDU_RELEASE;
   172e6:	2503      	movs	r5, #3
		rx = hdr->link->mem;
   172e8:	6820      	ldr	r0, [r4, #0]
		hdr = &rx->hdr;
   172ea:	4621      	mov	r1, r4
		rx = hdr->link->mem;
   172ec:	6844      	ldr	r4, [r0, #4]
		hdr->type = NODE_RX_TYPE_DC_PDU_RELEASE;
   172ee:	710d      	strb	r5, [r1, #4]
		ll_rx_put(hdr->link, hdr);
   172f0:	f7fd f872 	bl	143d8 <ll_rx_put>
	while (rx) {
   172f4:	2c00      	cmp	r4, #0
   172f6:	d1f7      	bne.n	172e8 <conn_cleanup+0x24>
	while (conn->tx_head) {
   172f8:	f8d6 1188 	ldr.w	r1, [r6, #392]	; 0x188
   172fc:	b381      	cbz	r1, 17360 <conn_cleanup+0x9c>
		link = mem_acquire(&mem_link_tx.free);
   172fe:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 173b8 <conn_cleanup+0xf4>
		LL_ASSERT(link);
   17302:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 173b0 <conn_cleanup+0xec>
   17306:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 173bc <conn_cleanup+0xf8>
   1730a:	f106 0750 	add.w	r7, r6, #80	; 0x50
   1730e:	e007      	b.n	17320 <conn_cleanup+0x5c>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   17310:	4629      	mov	r1, r5
   17312:	4620      	mov	r0, r4
   17314:	463a      	mov	r2, r7
   17316:	f7f8 feb5 	bl	10084 <memq_enqueue>
	while (conn->tx_head) {
   1731a:	f8d6 1188 	ldr.w	r1, [r6, #392]	; 0x188
   1731e:	b1f9      	cbz	r1, 17360 <conn_cleanup+0x9c>
		tx = tx_ull_dequeue(conn, conn->tx_head);
   17320:	4630      	mov	r0, r6
   17322:	f7fd fbcf 	bl	14ac4 <tx_ull_dequeue>
   17326:	4605      	mov	r5, r0
		link = mem_acquire(&mem_link_tx.free);
   17328:	4640      	mov	r0, r8
   1732a:	f7f8 fe47 	bl	ffbc <mem_acquire>
		LL_ASSERT(link);
   1732e:	4604      	mov	r4, r0
   17330:	2800      	cmp	r0, #0
   17332:	d1ed      	bne.n	17310 <conn_cleanup+0x4c>
   17334:	481c      	ldr	r0, [pc, #112]	; (173a8 <conn_cleanup+0xe4>)
   17336:	f640 23b3 	movw	r3, #2739	; 0xab3
   1733a:	4652      	mov	r2, sl
   1733c:	4649      	mov	r1, r9
   1733e:	f006 fe04 	bl	1df4a <printk>
   17342:	4040      	eors	r0, r0
   17344:	f380 8811 	msr	BASEPRI, r0
   17348:	f04f 0003 	mov.w	r0, #3
   1734c:	df02      	svc	2
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   1734e:	4629      	mov	r1, r5
   17350:	4620      	mov	r0, r4
   17352:	463a      	mov	r2, r7
   17354:	f7f8 fe96 	bl	10084 <memq_enqueue>
	while (conn->tx_head) {
   17358:	f8d6 1188 	ldr.w	r1, [r6, #392]	; 0x188
   1735c:	2900      	cmp	r1, #0
   1735e:	d1df      	bne.n	17320 <conn_cleanup+0x5c>
			TICKER_ID_CONN_BASE + lll->handle,
   17360:	f896 202c 	ldrb.w	r2, [r6, #44]	; 0x2c
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   17364:	4b11      	ldr	r3, [pc, #68]	; (173ac <conn_cleanup+0xe8>)
   17366:	f8cd b000 	str.w	fp, [sp]
			TICKER_ID_CONN_BASE + lll->handle,
   1736a:	3203      	adds	r2, #3
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   1736c:	b2d2      	uxtb	r2, r2
   1736e:	2101      	movs	r1, #1
   17370:	2000      	movs	r0, #0
   17372:	f7fa faf3 	bl	1195c <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   17376:	f030 0302 	bics.w	r3, r0, #2
   1737a:	d00c      	beq.n	17396 <conn_cleanup+0xd2>
   1737c:	4a0c      	ldr	r2, [pc, #48]	; (173b0 <conn_cleanup+0xec>)
   1737e:	490d      	ldr	r1, [pc, #52]	; (173b4 <conn_cleanup+0xf0>)
   17380:	4809      	ldr	r0, [pc, #36]	; (173a8 <conn_cleanup+0xe4>)
   17382:	f44f 632a 	mov.w	r3, #2720	; 0xaa0
   17386:	f006 fde0 	bl	1df4a <printk>
   1738a:	4040      	eors	r0, r0
   1738c:	f380 8811 	msr	BASEPRI, r0
   17390:	f04f 0003 	mov.w	r0, #3
   17394:	df02      	svc	2
	lll->handle = 0xFFFF;
   17396:	f64f 73ff 	movw	r3, #65535	; 0xffff
	ull_conn_tx_demux(UINT8_MAX);
   1739a:	20ff      	movs	r0, #255	; 0xff
	lll->handle = 0xFFFF;
   1739c:	85b3      	strh	r3, [r6, #44]	; 0x2c
}
   1739e:	b003      	add	sp, #12
   173a0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ull_conn_tx_demux(UINT8_MAX);
   173a4:	f7ff bf38 	b.w	17218 <ull_conn_tx_demux>
   173a8:	00023fe4 	.word	0x00023fe4
   173ac:	00014eb5 	.word	0x00014eb5
   173b0:	0002442c 	.word	0x0002442c
   173b4:	000245a8 	.word	0x000245a8
   173b8:	20008230 	.word	0x20008230
   173bc:	00024484 	.word	0x00024484

000173c0 <ull_conn_tx_lll_enqueue>:
	while (conn->tx_head &&
   173c0:	f8d0 3188 	ldr.w	r3, [r0, #392]	; 0x188
   173c4:	2b00      	cmp	r3, #0
   173c6:	f000 80e7 	beq.w	17598 <ull_conn_tx_lll_enqueue+0x1d8>
   173ca:	3901      	subs	r1, #1
{
   173cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		link = mem_acquire(&mem_link_tx.free);
   173d0:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 175a0 <ull_conn_tx_lll_enqueue+0x1e0>
		LL_ASSERT(link);
   173d4:	f8df a1cc 	ldr.w	sl, [pc, #460]	; 175a4 <ull_conn_tx_lll_enqueue+0x1e4>
   173d8:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 175a8 <ull_conn_tx_lll_enqueue+0x1e8>
   173dc:	4604      	mov	r4, r0
   173de:	b2cd      	uxtb	r5, r1
   173e0:	e012      	b.n	17408 <ull_conn_tx_lll_enqueue+0x48>
		link = mem_acquire(&mem_link_tx.free);
   173e2:	4640      	mov	r0, r8
   173e4:	f7f8 fdea 	bl	ffbc <mem_acquire>
		LL_ASSERT(link);
   173e8:	4607      	mov	r7, r0
   173ea:	2800      	cmp	r0, #0
   173ec:	d066      	beq.n	174bc <ull_conn_tx_lll_enqueue+0xfc>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   173ee:	4631      	mov	r1, r6
   173f0:	4638      	mov	r0, r7
   173f2:	f104 0250 	add.w	r2, r4, #80	; 0x50
   173f6:	f7f8 fe45 	bl	10084 <memq_enqueue>
	while (conn->tx_head &&
   173fa:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
   173fe:	3d01      	subs	r5, #1
   17400:	b2ed      	uxtb	r5, r5
   17402:	2b00      	cmp	r3, #0
   17404:	f000 8089 	beq.w	1751a <ull_conn_tx_lll_enqueue+0x15a>
			  !conn->llcp_phy.pause_tx &&
   17408:	f894 2183 	ldrb.w	r2, [r4, #387]	; 0x183
	while (conn->tx_head &&
   1740c:	07d1      	lsls	r1, r2, #31
   1740e:	d403      	bmi.n	17418 <ull_conn_tx_lll_enqueue+0x58>
			  !conn->llcp_enc.pause_tx &&
   17410:	f894 212a 	ldrb.w	r2, [r4, #298]	; 0x12a
			  !conn->llcp_phy.pause_tx &&
   17414:	0792      	lsls	r2, r2, #30
   17416:	d566      	bpl.n	174e6 <ull_conn_tx_lll_enqueue+0x126>
			 (!pause_tx && (conn->tx_head == conn->tx_ctrl))) && count--) {
   17418:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
   1741c:	4293      	cmp	r3, r2
   1741e:	d17c      	bne.n	1751a <ull_conn_tx_lll_enqueue+0x15a>
   17420:	2dff      	cmp	r5, #255	; 0xff
   17422:	d07a      	beq.n	1751a <ull_conn_tx_lll_enqueue+0x15a>
		tx = tx_ull_dequeue(conn, conn->tx_head);
   17424:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
   17428:	4620      	mov	r0, r4
   1742a:	f7fd fb4b 	bl	14ac4 <tx_ull_dequeue>
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   1742e:	7903      	ldrb	r3, [r0, #4]
   17430:	f003 0303 	and.w	r3, r3, #3
   17434:	2b03      	cmp	r3, #3
		tx = tx_ull_dequeue(conn, conn->tx_head);
   17436:	4606      	mov	r6, r0
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   17438:	d1d3      	bne.n	173e2 <ull_conn_tx_lll_enqueue+0x22>
		switch (pdu_tx->llctrl.opcode) {
   1743a:	79c3      	ldrb	r3, [r0, #7]
   1743c:	3b03      	subs	r3, #3
   1743e:	2b14      	cmp	r3, #20
   17440:	d8cf      	bhi.n	173e2 <ull_conn_tx_lll_enqueue+0x22>
   17442:	a201      	add	r2, pc, #4	; (adr r2, 17448 <ull_conn_tx_lll_enqueue+0x88>)
   17444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   17448:	000174a5 	.word	0x000174a5
   1744c:	000174a5 	.word	0x000174a5
   17450:	000173e3 	.word	0x000173e3
   17454:	000173e3 	.word	0x000173e3
   17458:	000173e3 	.word	0x000173e3
   1745c:	000173e3 	.word	0x000173e3
   17460:	000173e3 	.word	0x000173e3
   17464:	000174a5 	.word	0x000174a5
   17468:	0001749d 	.word	0x0001749d
   1746c:	000173e3 	.word	0x000173e3
   17470:	000173e3 	.word	0x000173e3
   17474:	000173e3 	.word	0x000173e3
   17478:	000173e3 	.word	0x000173e3
   1747c:	000173e3 	.word	0x000173e3
   17480:	000173e3 	.word	0x000173e3
   17484:	000173e3 	.word	0x000173e3
   17488:	000173e3 	.word	0x000173e3
   1748c:	000173e3 	.word	0x000173e3
   17490:	000173e3 	.word	0x000173e3
   17494:	000174d9 	.word	0x000174d9
   17498:	000174d9 	.word	0x000174d9
				if (!conn->lll.role) {
   1749c:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   174a0:	2b00      	cmp	r3, #0
   174a2:	da9e      	bge.n	173e2 <ull_conn_tx_lll_enqueue+0x22>
				conn->llcp_enc.pause_tx = 1U;
   174a4:	f894 312a 	ldrb.w	r3, [r4, #298]	; 0x12a
   174a8:	f043 0302 	orr.w	r3, r3, #2
   174ac:	f884 312a 	strb.w	r3, [r4, #298]	; 0x12a
		link = mem_acquire(&mem_link_tx.free);
   174b0:	4640      	mov	r0, r8
   174b2:	f7f8 fd83 	bl	ffbc <mem_acquire>
		LL_ASSERT(link);
   174b6:	4607      	mov	r7, r0
   174b8:	2800      	cmp	r0, #0
   174ba:	d198      	bne.n	173ee <ull_conn_tx_lll_enqueue+0x2e>
   174bc:	4837      	ldr	r0, [pc, #220]	; (1759c <ull_conn_tx_lll_enqueue+0x1dc>)
   174be:	f640 0332 	movw	r3, #2098	; 0x832
   174c2:	4652      	mov	r2, sl
   174c4:	4649      	mov	r1, r9
   174c6:	f006 fd40 	bl	1df4a <printk>
   174ca:	4040      	eors	r0, r0
   174cc:	f380 8811 	msr	BASEPRI, r0
   174d0:	f04f 0003 	mov.w	r0, #3
   174d4:	df02      	svc	2
   174d6:	e78a      	b.n	173ee <ull_conn_tx_lll_enqueue+0x2e>
				conn->llcp_phy.pause_tx = 1U;
   174d8:	f894 3183 	ldrb.w	r3, [r4, #387]	; 0x183
   174dc:	f043 0301 	orr.w	r3, r3, #1
   174e0:	f884 3183 	strb.w	r3, [r4, #387]	; 0x183
				break;
   174e4:	e77d      	b.n	173e2 <ull_conn_tx_lll_enqueue+0x22>
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   174e6:	791a      	ldrb	r2, [r3, #4]
   174e8:	f002 0203 	and.w	r2, r2, #3
   174ec:	2a03      	cmp	r2, #3
   174ee:	d197      	bne.n	17420 <ull_conn_tx_lll_enqueue+0x60>
			((pdu_data_tx->llctrl.opcode ==
   174f0:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   174f2:	2a03      	cmp	r2, #3
   174f4:	d001      	beq.n	174fa <ull_conn_tx_lll_enqueue+0x13a>
			  PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
   174f6:	2a0a      	cmp	r2, #10
   174f8:	d192      	bne.n	17420 <ull_conn_tx_lll_enqueue+0x60>
		if (((conn->llcp_req != conn->llcp_ack) &&
   174fa:	f894 10c0 	ldrb.w	r1, [r4, #192]	; 0xc0
   174fe:	f894 20bf 	ldrb.w	r2, [r4, #191]	; 0xbf
   17502:	428a      	cmp	r2, r1
   17504:	d00b      	beq.n	1751e <ull_conn_tx_lll_enqueue+0x15e>
   17506:	f894 20c1 	ldrb.w	r2, [r4, #193]	; 0xc1
   1750a:	2a03      	cmp	r2, #3
   1750c:	d088      	beq.n	17420 <ull_conn_tx_lll_enqueue+0x60>
			if ((tx->next != NULL) &&
   1750e:	681a      	ldr	r2, [r3, #0]
   17510:	b11a      	cbz	r2, 1751a <ull_conn_tx_lll_enqueue+0x15a>
   17512:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
   17516:	428a      	cmp	r2, r1
   17518:	d02d      	beq.n	17576 <ull_conn_tx_lll_enqueue+0x1b6>
}
   1751a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				((conn->llcp_req == conn->llcp_ack) &&
   1751e:	f894 00f1 	ldrb.w	r0, [r4, #241]	; 0xf1
   17522:	f894 10f0 	ldrb.w	r1, [r4, #240]	; 0xf0
   17526:	4288      	cmp	r0, r1
   17528:	d1f1      	bne.n	1750e <ull_conn_tx_lll_enqueue+0x14e>
				 ((conn->llcp_feature.ack != conn->llcp_feature.req) ||
   1752a:	f894 00fd 	ldrb.w	r0, [r4, #253]	; 0xfd
   1752e:	f894 10fc 	ldrb.w	r1, [r4, #252]	; 0xfc
   17532:	4288      	cmp	r0, r1
   17534:	d1eb      	bne.n	1750e <ull_conn_tx_lll_enqueue+0x14e>
				  (conn->llcp_version.ack != conn->llcp_version.req) ||
   17536:	f894 0149 	ldrb.w	r0, [r4, #329]	; 0x149
   1753a:	f894 1148 	ldrb.w	r1, [r4, #328]	; 0x148
   1753e:	4288      	cmp	r0, r1
   17540:	d1e5      	bne.n	1750e <ull_conn_tx_lll_enqueue+0x14e>
				   conn->llcp_conn_param.req) ||
   17542:	f894 0171 	ldrb.w	r0, [r4, #369]	; 0x171
   17546:	f894 1170 	ldrb.w	r1, [r4, #368]	; 0x170
   1754a:	4288      	cmp	r0, r1
   1754c:	d1df      	bne.n	1750e <ull_conn_tx_lll_enqueue+0x14e>
				  (conn->llcp_phy.ack != conn->llcp_phy.req) ||
   1754e:	f894 0181 	ldrb.w	r0, [r4, #385]	; 0x181
   17552:	f894 1180 	ldrb.w	r1, [r4, #384]	; 0x180
   17556:	4288      	cmp	r0, r1
   17558:	d1d9      	bne.n	1750e <ull_conn_tx_lll_enqueue+0x14e>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   1755a:	f894 30c4 	ldrb.w	r3, [r4, #196]	; 0xc4
   1755e:	2101      	movs	r1, #1
   17560:	f361 0301 	bfi	r3, r1, #0, #2
			conn->llcp_ack -= 2U;
   17564:	3a02      	subs	r2, #2
			conn->llcp_type = LLCP_ENCRYPTION;
   17566:	2103      	movs	r1, #3
			conn->llcp_ack -= 2U;
   17568:	f884 20c0 	strb.w	r2, [r4, #192]	; 0xc0
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   1756c:	f884 30c4 	strb.w	r3, [r4, #196]	; 0xc4
			conn->llcp_type = LLCP_ENCRYPTION;
   17570:	f884 10c1 	strb.w	r1, [r4, #193]	; 0xc1
			conn->llcp_ack -= 2U;
   17574:	e754      	b.n	17420 <ull_conn_tx_lll_enqueue+0x60>
				tx->next = conn->tx_ctrl_last->next;
   17576:	f8d4 1190 	ldr.w	r1, [r4, #400]	; 0x190
				if (!conn->tx_data_last) {
   1757a:	f8d4 0198 	ldr.w	r0, [r4, #408]	; 0x198
				conn->tx_head = tx->next;
   1757e:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
				tx->next = conn->tx_ctrl_last->next;
   17582:	680a      	ldr	r2, [r1, #0]
   17584:	601a      	str	r2, [r3, #0]
				conn->tx_ctrl_last->next = tx;
   17586:	600b      	str	r3, [r1, #0]
				conn->tx_data = tx;
   17588:	f8c4 3194 	str.w	r3, [r4, #404]	; 0x194
				if (!conn->tx_data_last) {
   1758c:	2800      	cmp	r0, #0
   1758e:	f47f af47 	bne.w	17420 <ull_conn_tx_lll_enqueue+0x60>
					conn->tx_data_last = tx;
   17592:	f8c4 3198 	str.w	r3, [r4, #408]	; 0x198
   17596:	e743      	b.n	17420 <ull_conn_tx_lll_enqueue+0x60>
   17598:	4770      	bx	lr
   1759a:	bf00      	nop
   1759c:	00023fe4 	.word	0x00023fe4
   175a0:	20008230 	.word	0x20008230
   175a4:	0002442c 	.word	0x0002442c
   175a8:	00024484 	.word	0x00024484

000175ac <ull_conn_link_tx_release>:
	mem_release(link, &mem_link_tx.free);
   175ac:	4901      	ldr	r1, [pc, #4]	; (175b4 <ull_conn_link_tx_release+0x8>)
   175ae:	f7f8 bd1f 	b.w	fff0 <mem_release>
   175b2:	bf00      	nop
   175b4:	20008230 	.word	0x20008230

000175b8 <ull_conn_ack_last_idx_get>:
	return mfifo_conn_ack.l;
   175b8:	4b01      	ldr	r3, [pc, #4]	; (175c0 <ull_conn_ack_last_idx_get+0x8>)
}
   175ba:	78d8      	ldrb	r0, [r3, #3]
   175bc:	4770      	bx	lr
   175be:	bf00      	nop
   175c0:	200004c0 	.word	0x200004c0

000175c4 <ull_conn_ack_peek>:
{
   175c4:	b4f0      	push	{r4, r5, r6, r7}
	lll_tx = MFIFO_DEQUEUE_GET(conn_ack);
   175c6:	4b0b      	ldr	r3, [pc, #44]	; (175f4 <ull_conn_ack_peek+0x30>)
   175c8:	789c      	ldrb	r4, [r3, #2]
   175ca:	78de      	ldrb	r6, [r3, #3]
   175cc:	781f      	ldrb	r7, [r3, #0]
	if (first == last) {
   175ce:	42b4      	cmp	r4, r6
   175d0:	d00d      	beq.n	175ee <ull_conn_ack_peek+0x2a>
	return (void *)(fifo + first * size);
   175d2:	3304      	adds	r3, #4
   175d4:	fb14 f407 	smulbb	r4, r4, r7
	if (!lll_tx) {
   175d8:	4605      	mov	r5, r0
   175da:	1918      	adds	r0, r3, r4
   175dc:	d005      	beq.n	175ea <ull_conn_ack_peek+0x26>
	*ack_last = mfifo_conn_ack.l;
   175de:	702e      	strb	r6, [r5, #0]
	*handle = lll_tx->handle;
   175e0:	5b1c      	ldrh	r4, [r3, r4]
	*tx = lll_tx->node;
   175e2:	6843      	ldr	r3, [r0, #4]
	*handle = lll_tx->handle;
   175e4:	800c      	strh	r4, [r1, #0]
	*tx = lll_tx->node;
   175e6:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   175e8:	6818      	ldr	r0, [r3, #0]
}
   175ea:	bcf0      	pop	{r4, r5, r6, r7}
   175ec:	4770      	bx	lr
		return NULL;
   175ee:	2000      	movs	r0, #0
   175f0:	e7fb      	b.n	175ea <ull_conn_ack_peek+0x26>
   175f2:	bf00      	nop
   175f4:	200004c0 	.word	0x200004c0

000175f8 <ull_conn_ack_by_last_peek>:
{
   175f8:	b430      	push	{r4, r5}
	lll_tx = mfifo_dequeue_get(mfifo_conn_ack.m, mfifo_conn_ack.s,
   175fa:	4b09      	ldr	r3, [pc, #36]	; (17620 <ull_conn_ack_by_last_peek+0x28>)
   175fc:	789c      	ldrb	r4, [r3, #2]
   175fe:	781d      	ldrb	r5, [r3, #0]
	if (first == last) {
   17600:	4284      	cmp	r4, r0
   17602:	d00b      	beq.n	1761c <ull_conn_ack_by_last_peek+0x24>
	return (void *)(fifo + first * size);
   17604:	3304      	adds	r3, #4
   17606:	fb14 f405 	smulbb	r4, r4, r5
	if (!lll_tx) {
   1760a:	1918      	adds	r0, r3, r4
   1760c:	d004      	beq.n	17618 <ull_conn_ack_by_last_peek+0x20>
	*handle = lll_tx->handle;
   1760e:	5b1c      	ldrh	r4, [r3, r4]
	*tx = lll_tx->node;
   17610:	6843      	ldr	r3, [r0, #4]
	*handle = lll_tx->handle;
   17612:	800c      	strh	r4, [r1, #0]
	*tx = lll_tx->node;
   17614:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   17616:	6818      	ldr	r0, [r3, #0]
}
   17618:	bc30      	pop	{r4, r5}
   1761a:	4770      	bx	lr
		return NULL;
   1761c:	2000      	movs	r0, #0
   1761e:	e7fb      	b.n	17618 <ull_conn_ack_by_last_peek+0x20>
   17620:	200004c0 	.word	0x200004c0

00017624 <ull_conn_ack_dequeue>:
{
   17624:	b410      	push	{r4}
	return MFIFO_DEQUEUE(conn_ack);
   17626:	4b0a      	ldr	r3, [pc, #40]	; (17650 <ull_conn_ack_dequeue+0x2c>)
	uint8_t _first = *first; /* Copy read-index */
   17628:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
   1762a:	78da      	ldrb	r2, [r3, #3]
   1762c:	7818      	ldrb	r0, [r3, #0]
   1762e:	785c      	ldrb	r4, [r3, #1]
   17630:	428a      	cmp	r2, r1
   17632:	d00a      	beq.n	1764a <ull_conn_ack_dequeue+0x26>
	_first += 1U;
   17634:	1c4a      	adds	r2, r1, #1
   17636:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   17638:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
   1763c:	4294      	cmp	r4, r2
   1763e:	bf08      	it	eq
   17640:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   17642:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   17644:	709a      	strb	r2, [r3, #2]
}
   17646:	bc10      	pop	{r4}
   17648:	4770      	bx	lr
		return NULL;
   1764a:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE(conn_ack);
   1764c:	e7fb      	b.n	17646 <ull_conn_ack_dequeue+0x22>
   1764e:	bf00      	nop
   17650:	200004c0 	.word	0x200004c0

00017654 <ull_conn_lll_ack_enqueue>:
{
   17654:	b570      	push	{r4, r5, r6, lr}
	idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   17656:	4a13      	ldr	r2, [pc, #76]	; (176a4 <ull_conn_lll_ack_enqueue+0x50>)
   17658:	78d6      	ldrb	r6, [r2, #3]
	if (last == count) {
   1765a:	7855      	ldrb	r5, [r2, #1]
   1765c:	7894      	ldrb	r4, [r2, #2]
	last = last + 1;
   1765e:	1c73      	adds	r3, r6, #1
   17660:	b2db      	uxtb	r3, r3
		last = 0U;
   17662:	429d      	cmp	r5, r3
   17664:	bf08      	it	eq
   17666:	2300      	moveq	r3, #0
	if (last == first) {
   17668:	429c      	cmp	r4, r3
   1766a:	d00a      	beq.n	17682 <ull_conn_lll_ack_enqueue+0x2e>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   1766c:	4615      	mov	r5, r2
   1766e:	f815 4b04 	ldrb.w	r4, [r5], #4
   17672:	fb14 f406 	smulbb	r4, r4, r6
	LL_ASSERT(lll_tx);
   17676:	192e      	adds	r6, r5, r4
   17678:	d003      	beq.n	17682 <ull_conn_lll_ack_enqueue+0x2e>
	lll_tx->handle = handle;
   1767a:	5328      	strh	r0, [r5, r4]
	*last = idx; /* Commit: Update write index */
   1767c:	70d3      	strb	r3, [r2, #3]
	lll_tx->node = tx;
   1767e:	6071      	str	r1, [r6, #4]
}
   17680:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(lll_tx);
   17682:	4a09      	ldr	r2, [pc, #36]	; (176a8 <ull_conn_lll_ack_enqueue+0x54>)
   17684:	4909      	ldr	r1, [pc, #36]	; (176ac <ull_conn_lll_ack_enqueue+0x58>)
   17686:	480a      	ldr	r0, [pc, #40]	; (176b0 <ull_conn_lll_ack_enqueue+0x5c>)
   17688:	f44f 6307 	mov.w	r3, #2160	; 0x870
   1768c:	f006 fc5d 	bl	1df4a <printk>
   17690:	4040      	eors	r0, r0
   17692:	f380 8811 	msr	BASEPRI, r0
   17696:	f04f 0003 	mov.w	r0, #3
   1769a:	df02      	svc	2
	lll_tx->handle = handle;
   1769c:	2300      	movs	r3, #0
   1769e:	801b      	strh	r3, [r3, #0]
   176a0:	deff      	udf	#255	; 0xff
   176a2:	bf00      	nop
   176a4:	200004c0 	.word	0x200004c0
   176a8:	0002442c 	.word	0x0002442c
   176ac:	00024474 	.word	0x00024474
   176b0:	00023fe4 	.word	0x00023fe4

000176b4 <ull_conn_tx_ack>:
{
   176b4:	b5f0      	push	{r4, r5, r6, r7, lr}
	LL_ASSERT(pdu_tx->len);
   176b6:	7953      	ldrb	r3, [r2, #5]
{
   176b8:	b083      	sub	sp, #12
   176ba:	4614      	mov	r4, r2
   176bc:	4605      	mov	r5, r0
   176be:	460f      	mov	r7, r1
	LL_ASSERT(pdu_tx->len);
   176c0:	2b00      	cmp	r3, #0
   176c2:	d033      	beq.n	1772c <ull_conn_tx_ack+0x78>
	if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   176c4:	7923      	ldrb	r3, [r4, #4]
   176c6:	f003 0203 	and.w	r2, r3, #3
   176ca:	2a03      	cmp	r2, #3
   176cc:	d016      	beq.n	176fc <ull_conn_tx_ack+0x48>
	} else if (handle != 0xFFFF) {
   176ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
   176d2:	4295      	cmp	r5, r2
   176d4:	d10a      	bne.n	176ec <ull_conn_tx_ack+0x38>
		pdu_tx->ll_id = PDU_DATA_LLID_RESV;
   176d6:	f36f 0301 	bfc	r3, #0, #2
   176da:	7123      	strb	r3, [r4, #4]
	struct ll_conn *conn = NULL;
   176dc:	2600      	movs	r6, #0
	ll_tx_ack_put(handle, tx);
   176de:	4621      	mov	r1, r4
   176e0:	4628      	mov	r0, r5
   176e2:	f7fc fec5 	bl	14470 <ll_tx_ack_put>
}
   176e6:	4630      	mov	r0, r6
   176e8:	b003      	add	sp, #12
   176ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   176ec:	48c4      	ldr	r0, [pc, #784]	; (17a00 <ull_conn_tx_ack+0x34c>)
   176ee:	462a      	mov	r2, r5
   176f0:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   176f4:	f7f8 fc94 	bl	10020 <mem_get>
   176f8:	4606      	mov	r6, r0
   176fa:	e7f0      	b.n	176de <ull_conn_tx_ack+0x2a>
		if (handle != 0xFFFF) {
   176fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   17700:	429d      	cmp	r5, r3
   17702:	d121      	bne.n	17748 <ull_conn_tx_ack+0x94>
	struct ll_conn *conn = NULL;
   17704:	2600      	movs	r6, #0
		if (link->next == (void *)tx) {
   17706:	6838      	ldr	r0, [r7, #0]
   17708:	4284      	cmp	r4, r0
   1770a:	d045      	beq.n	17798 <ull_conn_tx_ack+0xe4>
			LL_ASSERT(!link->next);
   1770c:	2800      	cmp	r0, #0
   1770e:	d0e6      	beq.n	176de <ull_conn_tx_ack+0x2a>
   17710:	4abc      	ldr	r2, [pc, #752]	; (17a04 <ull_conn_tx_ack+0x350>)
   17712:	49bd      	ldr	r1, [pc, #756]	; (17a08 <ull_conn_tx_ack+0x354>)
   17714:	48bd      	ldr	r0, [pc, #756]	; (17a0c <ull_conn_tx_ack+0x358>)
   17716:	f640 0392 	movw	r3, #2194	; 0x892
   1771a:	f006 fc16 	bl	1df4a <printk>
   1771e:	4040      	eors	r0, r0
   17720:	f380 8811 	msr	BASEPRI, r0
   17724:	f04f 0003 	mov.w	r0, #3
   17728:	df02      	svc	2
   1772a:	e7d8      	b.n	176de <ull_conn_tx_ack+0x2a>
	LL_ASSERT(pdu_tx->len);
   1772c:	4ab5      	ldr	r2, [pc, #724]	; (17a04 <ull_conn_tx_ack+0x350>)
   1772e:	49b8      	ldr	r1, [pc, #736]	; (17a10 <ull_conn_tx_ack+0x35c>)
   17730:	48b6      	ldr	r0, [pc, #728]	; (17a0c <ull_conn_tx_ack+0x358>)
   17732:	f640 037f 	movw	r3, #2175	; 0x87f
   17736:	f006 fc08 	bl	1df4a <printk>
   1773a:	4040      	eors	r0, r0
   1773c:	f380 8811 	msr	BASEPRI, r0
   17740:	f04f 0003 	mov.w	r0, #3
   17744:	df02      	svc	2
   17746:	e7bd      	b.n	176c4 <ull_conn_tx_ack+0x10>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   17748:	48ad      	ldr	r0, [pc, #692]	; (17a00 <ull_conn_tx_ack+0x34c>)
   1774a:	462a      	mov	r2, r5
   1774c:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   17750:	f7f8 fc66 	bl	10020 <mem_get>
   17754:	79e3      	ldrb	r3, [r4, #7]
   17756:	3b02      	subs	r3, #2
   17758:	4606      	mov	r6, r0
		switch (pdu_tx->llctrl.opcode) {
   1775a:	2b16      	cmp	r3, #22
   1775c:	d818      	bhi.n	17790 <ull_conn_tx_ack+0xdc>
   1775e:	e8df f013 	tbh	[pc, r3, lsl #1]
   17762:	011e      	.short	0x011e
   17764:	00460102 	.word	0x00460102
   17768:	00170017 	.word	0x00170017
   1776c:	00170017 	.word	0x00170017
   17770:	00f10017 	.word	0x00f10017
   17774:	0017005a 	.word	0x0017005a
   17778:	00170050 	.word	0x00170050
   1777c:	00170017 	.word	0x00170017
   17780:	0017004d 	.word	0x0017004d
   17784:	00d80017 	.word	0x00d80017
   17788:	001f00b0 	.word	0x001f00b0
   1778c:	00e00026 	.word	0x00e00026
		if (link->next == (void *)tx) {
   17790:	6838      	ldr	r0, [r7, #0]
   17792:	42a0      	cmp	r0, r4
   17794:	d1ba      	bne.n	1770c <ull_conn_tx_ack+0x58>
   17796:	4620      	mov	r0, r4
			mem_release(tx, &mem_conn_tx_ctrl.free);
   17798:	499e      	ldr	r1, [pc, #632]	; (17a14 <ull_conn_tx_ack+0x360>)
   1779a:	f7f8 fc29 	bl	fff0 <mem_release>
			return conn;
   1779e:	e7a2      	b.n	176e6 <ull_conn_tx_ack+0x32>
				conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   177a0:	f890 3182 	ldrb.w	r3, [r0, #386]	; 0x182
   177a4:	2202      	movs	r2, #2
   177a6:	f362 0301 	bfi	r3, r2, #0, #2
   177aa:	f880 3182 	strb.w	r3, [r0, #386]	; 0x182
				if (conn->lll.role) {
   177ae:	f996 303d 	ldrsb.w	r3, [r6, #61]	; 0x3d
   177b2:	2b00      	cmp	r3, #0
   177b4:	da14      	bge.n	177e0 <ull_conn_tx_ack+0x12c>
					uint8_t phy_tx_time[8] = {BIT(0), BIT(0), BIT(1), BIT(0),
   177b6:	4998      	ldr	r1, [pc, #608]	; (17a18 <ull_conn_tx_ack+0x364>)
					phys = conn->llcp_phy.tx | lll->phy_tx;
   177b8:	f896 2048 	ldrb.w	r2, [r6, #72]	; 0x48
   177bc:	f896 3182 	ldrb.w	r3, [r6, #386]	; 0x182
					uint8_t phy_tx_time[8] = {BIT(0), BIT(0), BIT(1), BIT(0),
   177c0:	c903      	ldmia	r1, {r0, r1}
					phys = conn->llcp_phy.tx | lll->phy_tx;
   177c2:	ea42 0393 	orr.w	r3, r2, r3, lsr #2
					uint8_t phy_tx_time[8] = {BIT(0), BIT(0), BIT(1), BIT(0),
   177c6:	f10d 0c08 	add.w	ip, sp, #8
   177ca:	e90c 0003 	stmdb	ip, {r0, r1}
					lll->phy_tx_time = phy_tx_time[phys];
   177ce:	f003 0307 	and.w	r3, r3, #7
   177d2:	4463      	add	r3, ip
   177d4:	f813 3c08 	ldrb.w	r3, [r3, #-8]
   177d8:	f363 1206 	bfi	r2, r3, #4, #3
   177dc:	f886 2048 	strb.w	r2, [r6, #72]	; 0x48
				conn->llcp_phy.pause_tx = 0U;
   177e0:	f896 3183 	ldrb.w	r3, [r6, #387]	; 0x183
   177e4:	f36f 0300 	bfc	r3, #0, #1
   177e8:	f886 3183 	strb.w	r3, [r6, #387]	; 0x183
				break;
   177ec:	e78b      	b.n	17706 <ull_conn_tx_ack+0x52>
					conn->llcp_enc.pause_tx = 1U;
   177ee:	f896 312a 	ldrb.w	r3, [r6, #298]	; 0x12a
   177f2:	f043 0302 	orr.w	r3, r3, #2
   177f6:	f886 312a 	strb.w	r3, [r6, #298]	; 0x12a
   177fa:	e784      	b.n	17706 <ull_conn_tx_ack+0x52>
				if (pdu_tx->llctrl.reject_ext_ind.reject_opcode !=
   177fc:	7a23      	ldrb	r3, [r4, #8]
   177fe:	2b03      	cmp	r3, #3
   17800:	d181      	bne.n	17706 <ull_conn_tx_ack+0x52>
				conn->llcp_enc.pause_rx = 0U;
   17802:	f896 312a 	ldrb.w	r3, [r6, #298]	; 0x12a
				conn->procedure_expire = 0U;
   17806:	2200      	movs	r2, #0
				conn->llcp_enc.pause_rx = 0U;
   17808:	f023 0303 	bic.w	r3, r3, #3
   1780c:	f886 312a 	strb.w	r3, [r6, #298]	; 0x12a
				conn->procedure_expire = 0U;
   17810:	f8a6 20b0 	strh.w	r2, [r6, #176]	; 0xb0
				break;
   17814:	e777      	b.n	17706 <ull_conn_tx_ack+0x52>
				if (!conn->lll.role) {
   17816:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
   1781a:	2b00      	cmp	r3, #0
   1781c:	dbe7      	blt.n	177ee <ull_conn_tx_ack+0x13a>
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1781e:	7923      	ldrb	r3, [r4, #4]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   17820:	2203      	movs	r2, #3
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   17822:	f043 0303 	orr.w	r3, r3, #3
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_req) +
   17826:	2117      	movs	r1, #23
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   17828:	71e2      	strb	r2, [r4, #7]
		memcpy(&pdu_ctrl_tx->llctrl.enc_req.rand[0], &conn->llcp_enc.rand[0],
   1782a:	2208      	movs	r2, #8
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1782c:	7123      	strb	r3, [r4, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_req) +
   1782e:	7161      	strb	r1, [r4, #5]
		memcpy(&pdu_ctrl_tx->llctrl.enc_req.rand[0], &conn->llcp_enc.rand[0],
   17830:	f200 112d 	addw	r1, r0, #301	; 0x12d
   17834:	18a0      	adds	r0, r4, r2
   17836:	f008 fb1a 	bl	1fe6e <memcpy>
		pdu_ctrl_tx->llctrl.enc_req.ediv[0] = conn->llcp_enc.ediv[0];
   1783a:	f896 312b 	ldrb.w	r3, [r6, #299]	; 0x12b
   1783e:	7423      	strb	r3, [r4, #16]
		pdu_ctrl_tx->llctrl.enc_req.ediv[1] = conn->llcp_enc.ediv[1];
   17840:	f896 312c 	ldrb.w	r3, [r6, #300]	; 0x12c
   17844:	7463      	strb	r3, [r4, #17]
		lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_req.skdm,
   17846:	210c      	movs	r1, #12
   17848:	f104 0012 	add.w	r0, r4, #18
   1784c:	f001 ff7c 	bl	19748 <lll_csrand_isr_get>
			conn->tx_head &&
   17850:	f8d6 3188 	ldr.w	r3, [r6, #392]	; 0x188
	if (
   17854:	2b00      	cmp	r3, #0
   17856:	f000 80ac 	beq.w	179b2 <ull_conn_tx_ack+0x2fe>
			!conn->llcp_enc.pause_tx &&
   1785a:	f896 212a 	ldrb.w	r2, [r6, #298]	; 0x12a
			conn->tx_head &&
   1785e:	0791      	lsls	r1, r2, #30
   17860:	f100 80a7 	bmi.w	179b2 <ull_conn_tx_ack+0x2fe>
			!conn->llcp_phy.pause_tx &&
   17864:	f896 2183 	ldrb.w	r2, [r6, #387]	; 0x183
   17868:	07d2      	lsls	r2, r2, #31
   1786a:	f100 80a2 	bmi.w	179b2 <ull_conn_tx_ack+0x2fe>
		if (conn->tx_head == conn->tx_data) {
   1786e:	f8d6 2194 	ldr.w	r2, [r6, #404]	; 0x194
   17872:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   17874:	bf04      	itt	eq
   17876:	681a      	ldreq	r2, [r3, #0]
   17878:	f8c6 2194 	streq.w	r2, [r6, #404]	; 0x194
		if (!conn->tx_ctrl) {
   1787c:	f8d6 218c 	ldr.w	r2, [r6, #396]	; 0x18c
   17880:	2a00      	cmp	r2, #0
   17882:	f000 80b5 	beq.w	179f0 <ull_conn_tx_ack+0x33c>
	tx->next = conn->tx_ctrl_last->next;
   17886:	f8d6 3190 	ldr.w	r3, [r6, #400]	; 0x190
   1788a:	681a      	ldr	r2, [r3, #0]
   1788c:	6022      	str	r2, [r4, #0]
	conn->tx_ctrl_last->next = tx;
   1788e:	601c      	str	r4, [r3, #0]
	conn->tx_ctrl_last = tx;
   17890:	f8c6 4190 	str.w	r4, [r6, #400]	; 0x190
   17894:	6823      	ldr	r3, [r4, #0]
	if (!tx->next) {
   17896:	683a      	ldr	r2, [r7, #0]
   17898:	2b00      	cmp	r3, #0
   1789a:	f000 8087 	beq.w	179ac <ull_conn_tx_ack+0x2f8>
		if (link->next == (void *)tx) {
   1789e:	2a00      	cmp	r2, #0
   178a0:	f47f af21 	bne.w	176e6 <ull_conn_tx_ack+0x32>
			LL_ASSERT(link->next);
   178a4:	4a57      	ldr	r2, [pc, #348]	; (17a04 <ull_conn_tx_ack+0x350>)
   178a6:	495d      	ldr	r1, [pc, #372]	; (17a1c <ull_conn_tx_ack+0x368>)
   178a8:	4858      	ldr	r0, [pc, #352]	; (17a0c <ull_conn_tx_ack+0x358>)
   178aa:	f640 038b 	movw	r3, #2187	; 0x88b
   178ae:	f006 fb4c 	bl	1df4a <printk>
   178b2:	4040      	eors	r0, r0
   178b4:	f380 8811 	msr	BASEPRI, r0
   178b8:	f04f 0003 	mov.w	r0, #3
   178bc:	df02      	svc	2
   178be:	2000      	movs	r0, #0
   178c0:	e76a      	b.n	17798 <ull_conn_tx_ack+0xe4>
				if (conn->llcp_length.req != conn->llcp_length.ack) {
   178c2:	f890 1170 	ldrb.w	r1, [r0, #368]	; 0x170
   178c6:	f890 3171 	ldrb.w	r3, [r0, #369]	; 0x171
   178ca:	428b      	cmp	r3, r1
   178cc:	f43f af1b 	beq.w	17706 <ull_conn_tx_ack+0x52>
					switch (conn->llcp_length.state) {
   178d0:	f890 2172 	ldrb.w	r2, [r0, #370]	; 0x172
   178d4:	f002 0307 	and.w	r3, r2, #7
   178d8:	2b03      	cmp	r3, #3
   178da:	d005      	beq.n	178e8 <ull_conn_tx_ack+0x234>
   178dc:	3303      	adds	r3, #3
   178de:	f003 0307 	and.w	r3, r3, #7
   178e2:	2b01      	cmp	r3, #1
   178e4:	f63f af54 	bhi.w	17790 <ull_conn_tx_ack+0xdc>
							conn->lll.max_tx_octets =
   178e8:	f8b6 3176 	ldrh.w	r3, [r6, #374]	; 0x176
   178ec:	f8a6 3040 	strh.w	r3, [r6, #64]	; 0x40
							if (conn->llcp_length.state ==
   178f0:	f002 0307 	and.w	r3, r2, #7
							conn->lll.max_tx_time =
   178f4:	f8b6 017a 	ldrh.w	r0, [r6, #378]	; 0x17a
   178f8:	f8a6 0044 	strh.w	r0, [r6, #68]	; 0x44
							if (conn->llcp_length.state ==
   178fc:	2b05      	cmp	r3, #5
   178fe:	d071      	beq.n	179e4 <ull_conn_tx_ack+0x330>
							if (!conn->llcp_length.cache.tx_octets) {
   17900:	f8b6 317c 	ldrh.w	r3, [r6, #380]	; 0x17c
   17904:	2b00      	cmp	r3, #0
   17906:	d15f      	bne.n	179c8 <ull_conn_tx_ack+0x314>
								conn->llcp_length.ack =
   17908:	f886 1171 	strb.w	r1, [r6, #369]	; 0x171
								conn->procedure_expire = 0U;
   1790c:	f8a6 30b0 	strh.w	r3, [r6, #176]	; 0xb0
								break;
   17910:	e6f9      	b.n	17706 <ull_conn_tx_ack+0x52>
				conn->llcp_length.state = LLCP_LENGTH_STATE_RSP_WAIT;
   17912:	f890 3172 	ldrb.w	r3, [r0, #370]	; 0x172
   17916:	2202      	movs	r2, #2
   17918:	f362 0302 	bfi	r3, r2, #0, #3
   1791c:	f880 3172 	strb.w	r3, [r0, #370]	; 0x172
				break;
   17920:	e6f1      	b.n	17706 <ull_conn_tx_ack+0x52>
				conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   17922:	f890 30c4 	ldrb.w	r3, [r0, #196]	; 0xc4
   17926:	f890 1048 	ldrb.w	r1, [r0, #72]	; 0x48
				conn->llcp_phy.pause_tx = 0U;
   1792a:	f890 2183 	ldrb.w	r2, [r0, #387]	; 0x183
				conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   1792e:	f3c3 0382 	ubfx	r3, r3, #2, #3
   17932:	f363 1106 	bfi	r1, r3, #4, #3
				conn->llcp_phy.pause_tx = 0U;
   17936:	f36f 0200 	bfc	r2, #0, #1
				conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   1793a:	f880 1048 	strb.w	r1, [r0, #72]	; 0x48
				conn->llcp_phy.pause_tx = 0U;
   1793e:	f880 2183 	strb.w	r2, [r0, #387]	; 0x183
				break;
   17942:	e6e0      	b.n	17706 <ull_conn_tx_ack+0x52>
				conn->llcp_enc.pause_tx = 1U;
   17944:	f890 312a 	ldrb.w	r3, [r0, #298]	; 0x12a
				conn->procedure_expire = conn->procedure_reload;
   17948:	f8b0 20ae 	ldrh.w	r2, [r0, #174]	; 0xae
   1794c:	f8a0 20b0 	strh.w	r2, [r0, #176]	; 0xb0
				conn->llcp_enc.pause_tx = 1U;
   17950:	f023 0306 	bic.w	r3, r3, #6
				conn->llcp_enc.ack = conn->llcp_enc.req;
   17954:	f890 2128 	ldrb.w	r2, [r0, #296]	; 0x128
   17958:	f880 2129 	strb.w	r2, [r0, #297]	; 0x129
				conn->llcp_enc.pause_tx = 1U;
   1795c:	f043 0306 	orr.w	r3, r3, #6
   17960:	f880 312a 	strb.w	r3, [r0, #298]	; 0x12a
				break;
   17964:	e6cf      	b.n	17706 <ull_conn_tx_ack+0x52>
				memcpy(&conn->llcp.encryption.skd[0],
   17966:	2208      	movs	r2, #8
   17968:	f104 0112 	add.w	r1, r4, #18
   1796c:	30c6      	adds	r0, #198	; 0xc6
   1796e:	f008 fa7e 	bl	1fe6e <memcpy>
				memcpy(&conn->lll.ccm_rx.iv[0],
   17972:	2204      	movs	r2, #4
   17974:	f104 011a 	add.w	r1, r4, #26
   17978:	f106 007c 	add.w	r0, r6, #124	; 0x7c
   1797c:	f008 fa77 	bl	1fe6e <memcpy>
				conn->llcp_enc.pause_tx = 1U;
   17980:	f896 312a 	ldrb.w	r3, [r6, #298]	; 0x12a
				conn->procedure_expire = conn->procedure_reload;
   17984:	f8b6 10ae 	ldrh.w	r1, [r6, #174]	; 0xae
				conn->llcp_enc.ack = conn->llcp_enc.req;
   17988:	f896 2128 	ldrb.w	r2, [r6, #296]	; 0x128
				conn->procedure_expire = conn->procedure_reload;
   1798c:	f8a6 10b0 	strh.w	r1, [r6, #176]	; 0xb0
				conn->llcp_enc.pause_tx = 1U;
   17990:	f043 0302 	orr.w	r3, r3, #2
   17994:	f886 312a 	strb.w	r3, [r6, #298]	; 0x12a
				conn->llcp_enc.ack = conn->llcp_enc.req;
   17998:	f886 2129 	strb.w	r2, [r6, #297]	; 0x129
				break;
   1799c:	e6b3      	b.n	17706 <ull_conn_tx_ack+0x52>
					uint8_t reason = (pdu_tx->llctrl.terminate_ind.error_code ==
   1799e:	7a21      	ldrb	r1, [r4, #8]
   179a0:	2913      	cmp	r1, #19
					conn_cleanup(conn, reason);
   179a2:	bf08      	it	eq
   179a4:	2116      	moveq	r1, #22
   179a6:	f7ff fc8d 	bl	172c4 <conn_cleanup>
				break;
   179aa:	e6ac      	b.n	17706 <ull_conn_tx_ack+0x52>
		conn->tx_data_last = tx;
   179ac:	f8c6 4198 	str.w	r4, [r6, #408]	; 0x198
   179b0:	e775      	b.n	1789e <ull_conn_tx_ack+0x1ea>
		if (!conn->tx_ctrl) {
   179b2:	f8d6 218c 	ldr.w	r2, [r6, #396]	; 0x18c
   179b6:	2a00      	cmp	r2, #0
   179b8:	f47f af65 	bne.w	17886 <ull_conn_tx_ack+0x1d2>
			tx->next = conn->tx_head;
   179bc:	6023      	str	r3, [r4, #0]
				conn->tx_ctrl = tx;
   179be:	e9c6 4462 	strd	r4, r4, [r6, #392]	; 0x188
				conn->tx_ctrl_last = tx;
   179c2:	f8c6 4190 	str.w	r4, [r6, #400]	; 0x190
   179c6:	e766      	b.n	17896 <ull_conn_tx_ack+0x1e2>
							conn->llcp_length.cache.tx_octets = 0;
   179c8:	2100      	movs	r1, #0
							conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   179ca:	f361 0202 	bfi	r2, r1, #0, #3
							conn->llcp_length.tx_octets =
   179ce:	f8a6 3176 	strh.w	r3, [r6, #374]	; 0x176
							conn->llcp_length.tx_time =
   179d2:	f8b6 317e 	ldrh.w	r3, [r6, #382]	; 0x17e
							conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   179d6:	f886 2172 	strb.w	r2, [r6, #370]	; 0x172
							conn->llcp_length.cache.tx_octets = 0;
   179da:	f8a6 117c 	strh.w	r1, [r6, #380]	; 0x17c
							conn->llcp_length.tx_time =
   179de:	f8a6 317a 	strh.w	r3, [r6, #378]	; 0x17a
							break;
   179e2:	e690      	b.n	17706 <ull_conn_tx_ack+0x52>
								conn->llcp_length.state =
   179e4:	2304      	movs	r3, #4
   179e6:	f363 0202 	bfi	r2, r3, #0, #3
   179ea:	f886 2172 	strb.w	r2, [r6, #370]	; 0x172
								break;
   179ee:	e68a      	b.n	17706 <ull_conn_tx_ack+0x52>
			tx->next = conn->tx_head->next;
   179f0:	681a      	ldr	r2, [r3, #0]
   179f2:	6022      	str	r2, [r4, #0]
			conn->tx_head->next = tx;
   179f4:	601c      	str	r4, [r3, #0]
				conn->tx_ctrl = tx;
   179f6:	6823      	ldr	r3, [r4, #0]
				conn->tx_ctrl_last = tx;
   179f8:	e9c6 4463 	strd	r4, r4, [r6, #396]	; 0x18c
   179fc:	e74b      	b.n	17896 <ull_conn_tx_ack+0x1e2>
   179fe:	bf00      	nop
   17a00:	20006f24 	.word	0x20006f24
   17a04:	0002442c 	.word	0x0002442c
   17a08:	00024640 	.word	0x00024640
   17a0c:	00023fe4 	.word	0x00023fe4
   17a10:	00024634 	.word	0x00024634
   17a14:	2000802c 	.word	0x2000802c
   17a18:	00024658 	.word	0x00024658
   17a1c:	0002464c 	.word	0x0002464c

00017a20 <ull_conn_llcp_req>:
	if (conn_hdr->llcp_req != conn_hdr->llcp_ack) {
   17a20:	f890 30c0 	ldrb.w	r3, [r0, #192]	; 0xc0
   17a24:	f890 20bf 	ldrb.w	r2, [r0, #191]	; 0xbf
   17a28:	4293      	cmp	r3, r2
	conn_hdr->llcp_req++;
   17a2a:	bf03      	ittte	eq
   17a2c:	3301      	addeq	r3, #1
   17a2e:	f880 30bf 	strbeq.w	r3, [r0, #191]	; 0xbf
	return 0;
   17a32:	2000      	moveq	r0, #0
		return BT_HCI_ERR_CMD_DISALLOWED;
   17a34:	200c      	movne	r0, #12
}
   17a36:	4770      	bx	lr

00017a38 <ull_conn_lll_max_tx_octets_get>:
	switch (lll->phy_tx_time) {
   17a38:	f890 102c 	ldrb.w	r1, [r0, #44]	; 0x2c
   17a3c:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   17a3e:	f3c1 1202 	ubfx	r2, r1, #4, #3
   17a42:	2a02      	cmp	r2, #2
   17a44:	d00f      	beq.n	17a66 <ull_conn_lll_max_tx_octets_get+0x2e>
   17a46:	2a04      	cmp	r2, #4
   17a48:	d011      	beq.n	17a6e <ull_conn_lll_max_tx_octets_get+0x36>
			max_tx_octets = (lll->max_tx_time >> 3) - 10;
   17a4a:	08db      	lsrs	r3, r3, #3
   17a4c:	3b0a      	subs	r3, #10
   17a4e:	b29b      	uxth	r3, r3
	if (lll->enc_tx) {
   17a50:	f890 2046 	ldrb.w	r2, [r0, #70]	; 0x46
	return max_tx_octets;
   17a54:	8c80      	ldrh	r0, [r0, #36]	; 0x24
	if (lll->enc_tx) {
   17a56:	06d2      	lsls	r2, r2, #27
		max_tx_octets -= 4U;
   17a58:	bf44      	itt	mi
   17a5a:	3b04      	submi	r3, #4
   17a5c:	b29b      	uxthmi	r3, r3
}
   17a5e:	4298      	cmp	r0, r3
   17a60:	bf28      	it	cs
   17a62:	4618      	movcs	r0, r3
   17a64:	4770      	bx	lr
			max_tx_octets = (lll->max_tx_time >> 2) - 11;
   17a66:	089b      	lsrs	r3, r3, #2
   17a68:	3b0b      	subs	r3, #11
   17a6a:	b29b      	uxth	r3, r3
			break;
   17a6c:	e7f0      	b.n	17a50 <ull_conn_lll_max_tx_octets_get+0x18>
			if (lll->phy_flags & 0x01) {
   17a6e:	0709      	lsls	r1, r1, #28
				max_tx_octets = ((lll->max_tx_time - 592) >>
   17a70:	bf4b      	itete	mi
   17a72:	f5a3 7314 	submi.w	r3, r3, #592	; 0x250
				max_tx_octets = ((lll->max_tx_time - 430) >>
   17a76:	f5a3 73d7 	subpl.w	r3, r3, #430	; 0x1ae
				max_tx_octets = ((lll->max_tx_time - 592) >>
   17a7a:	119b      	asrmi	r3, r3, #6
				max_tx_octets = ((lll->max_tx_time - 430) >>
   17a7c:	111b      	asrpl	r3, r3, #4
						4) - 2;
   17a7e:	3b02      	subs	r3, #2
				max_tx_octets = ((lll->max_tx_time - 430) >>
   17a80:	b29b      	uxth	r3, r3
   17a82:	e7e5      	b.n	17a50 <ull_conn_lll_max_tx_octets_get+0x18>

00017a84 <set_winoffset>:
uint16_t set_winoffset(struct lll_conn *lll){ 
   17a84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if(scheduled_handle_cnt == 0&& need_update_dummy == false && need_conn_update == false){
   17a88:	4b5a      	ldr	r3, [pc, #360]	; (17bf4 <set_winoffset+0x170>)
   17a8a:	4e5b      	ldr	r6, [pc, #364]	; (17bf8 <set_winoffset+0x174>)
   17a8c:	681b      	ldr	r3, [r3, #0]
   17a8e:	7832      	ldrb	r2, [r6, #0]
uint16_t set_winoffset(struct lll_conn *lll){ 
   17a90:	4605      	mov	r5, r0
	if(scheduled_handle_cnt == 0&& need_update_dummy == false && need_conn_update == false){
   17a92:	b92b      	cbnz	r3, 17aa0 <set_winoffset+0x1c>
   17a94:	2a00      	cmp	r2, #0
   17a96:	d07b      	beq.n	17b90 <set_winoffset+0x10c>
	return -1;
   17a98:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
   17a9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	else if(need_update_dummy == false){
   17aa0:	2a00      	cmp	r2, #0
   17aa2:	d1f9      	bne.n	17a98 <set_winoffset+0x14>
		int need_cell_cnt_now = (int)(max_conn_int/(lll->interval));
   17aa4:	4f55      	ldr	r7, [pc, #340]	; (17bfc <set_winoffset+0x178>)
   17aa6:	8a6a      	ldrh	r2, [r5, #18]
   17aa8:	683b      	ldr	r3, [r7, #0]
   17aaa:	fb93 f3f2 	sdiv	r3, r3, r2
		if(need_cell_cnt_now <1) need_cell_cnt_now = 1;
   17aae:	2b01      	cmp	r3, #1
   17ab0:	461a      	mov	r2, r3
   17ab2:	bfb8      	it	lt
   17ab4:	2201      	movlt	r2, #1
		for(int temp = 1; temp<need_cell_cnt_now;  temp *= 2)
   17ab6:	2b01      	cmp	r3, #1
   17ab8:	f340 8099 	ble.w	17bee <set_winoffset+0x16a>
   17abc:	2301      	movs	r3, #1
		int i=0;
   17abe:	2400      	movs	r4, #0
		for(int temp = 1; temp<need_cell_cnt_now;  temp *= 2)
   17ac0:	005b      	lsls	r3, r3, #1
   17ac2:	429a      	cmp	r2, r3
			i++;
   17ac4:	f104 0401 	add.w	r4, r4, #1
		for(int temp = 1; temp<need_cell_cnt_now;  temp *= 2)
   17ac8:	dcfa      	bgt.n	17ac0 <set_winoffset+0x3c>
		if(temp_max_empty_cell_size[i] < gap || temp_max_empty_cell_size[i] > conn_int_table[first_handle]*1.25 ){
   17aca:	4a4d      	ldr	r2, [pc, #308]	; (17c00 <set_winoffset+0x17c>)
   17acc:	4b4d      	ldr	r3, [pc, #308]	; (17c04 <set_winoffset+0x180>)
   17ace:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
   17ad2:	681b      	ldr	r3, [r3, #0]
   17ad4:	4298      	cmp	r0, r3
   17ad6:	d3df      	bcc.n	17a98 <set_winoffset+0x14>
   17ad8:	f7e8 fc54 	bl	384 <__aeabi_ui2d>
   17adc:	4a4a      	ldr	r2, [pc, #296]	; (17c08 <set_winoffset+0x184>)
   17ade:	4b4b      	ldr	r3, [pc, #300]	; (17c0c <set_winoffset+0x188>)
   17ae0:	6812      	ldr	r2, [r2, #0]
   17ae2:	4680      	mov	r8, r0
   17ae4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   17ae8:	4689      	mov	r9, r1
   17aea:	f7e8 fc4b 	bl	384 <__aeabi_ui2d>
   17aee:	4b48      	ldr	r3, [pc, #288]	; (17c10 <set_winoffset+0x18c>)
   17af0:	2200      	movs	r2, #0
   17af2:	f7e8 fcc1 	bl	478 <__aeabi_dmul>
   17af6:	4602      	mov	r2, r0
   17af8:	460b      	mov	r3, r1
   17afa:	4640      	mov	r0, r8
   17afc:	4649      	mov	r1, r9
   17afe:	f7e8 ff4b 	bl	998 <__aeabi_dcmpgt>
   17b02:	2800      	cmp	r0, #0
   17b04:	d1c8      	bne.n	17a98 <set_winoffset+0x14>
		need_conn_update = true;
   17b06:	4943      	ldr	r1, [pc, #268]	; (17c14 <set_winoffset+0x190>)
		update_is_possible = false;
   17b08:	4a43      	ldr	r2, [pc, #268]	; (17c18 <set_winoffset+0x194>)
		now = (uint32_t)k_cyc_to_ns_floor64(k_cycle_get_32())/NSEC_PER_USEC/USEC_PER_MSEC;
   17b0a:	f8df 8124 	ldr.w	r8, [pc, #292]	; 17c30 <set_winoffset+0x1ac>
		update_is_possible = false;
   17b0e:	7010      	strb	r0, [r2, #0]
		need_conn_update = true;
   17b10:	2301      	movs	r3, #1
   17b12:	700b      	strb	r3, [r1, #0]
		need_update_dummy = true;
   17b14:	7033      	strb	r3, [r6, #0]
   17b16:	f7ef fa13 	bl	6f40 <z_timer_cycle_get_32>
		uint32_t origin = array1[max_empty_cell[i]];
   17b1a:	4a40      	ldr	r2, [pc, #256]	; (17c1c <set_winoffset+0x198>)
   17b1c:	4b40      	ldr	r3, [pc, #256]	; (17c20 <set_winoffset+0x19c>)
   17b1e:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
   17b22:	4a40      	ldr	r2, [pc, #256]	; (17c24 <set_winoffset+0x1a0>)
		if(array1[max_empty_cell[i]]-array1[max_empty_cell[i]-1]<3) temp_time += (3-array1[max_empty_cell[i]]+array1[max_empty_cell[i]-1]);
   17b24:	1e66      	subs	r6, r4, #1
   17b26:	fba0 9a03 	umull	r9, sl, r0, r3
   17b2a:	ea4f 33d9 	mov.w	r3, r9, lsr #15
   17b2e:	f852 0026 	ldr.w	r0, [r2, r6, lsl #2]
		uint32_t origin = array1[max_empty_cell[i]];
   17b32:	f852 6024 	ldr.w	r6, [r2, r4, lsl #2]
   17b36:	ea43 434a 	orr.w	r3, r3, sl, lsl #17
		now = (uint32_t)k_cyc_to_ns_floor64(k_cycle_get_32())/NSEC_PER_USEC/USEC_PER_MSEC;
   17b3a:	fba8 2303 	umull	r2, r3, r8, r3
		if(array1[max_empty_cell[i]]-array1[max_empty_cell[i]-1]<3) temp_time += (3-array1[max_empty_cell[i]]+array1[max_empty_cell[i]-1]);
   17b3e:	1a32      	subs	r2, r6, r0
   17b40:	2a02      	cmp	r2, #2
   17b42:	bf98      	it	ls
   17b44:	1cc6      	addls	r6, r0, #3
		int interval = lll->interval*1.25;
   17b46:	8a68      	ldrh	r0, [r5, #18]
		now = (uint32_t)k_cyc_to_ns_floor64(k_cycle_get_32())/NSEC_PER_USEC/USEC_PER_MSEC;
   17b48:	ea4f 4893 	mov.w	r8, r3, lsr #18
		int interval = lll->interval*1.25;
   17b4c:	f7e8 fc2a 	bl	3a4 <__aeabi_i2d>
   17b50:	4b2f      	ldr	r3, [pc, #188]	; (17c10 <set_winoffset+0x18c>)
   17b52:	2200      	movs	r2, #0
   17b54:	f7e8 fc90 	bl	478 <__aeabi_dmul>
   17b58:	f7e8 ff28 	bl	9ac <__aeabi_d2iz>
		if(temp_time < now) temp_time = temp_time+max_conn_int*1.25*M - now;
   17b5c:	4546      	cmp	r6, r8
		int interval = lll->interval*1.25;
   17b5e:	4604      	mov	r4, r0
		if(temp_time < now) temp_time = temp_time+max_conn_int*1.25*M - now;
   17b60:	d321      	bcc.n	17ba6 <set_winoffset+0x122>
			temp_time = (-now+interval*M +temp_time-295);
   17b62:	2364      	movs	r3, #100	; 0x64
   17b64:	fb03 f300 	mul.w	r3, r3, r0
   17b68:	f46f 7293 	mvn.w	r2, #294	; 0x126
   17b6c:	4413      	add	r3, r2
   17b6e:	eba3 0308 	sub.w	r3, r3, r8
   17b72:	1998      	adds	r0, r3, r6
		temp_time = (temp_time)%interval;
   17b74:	fbb0 f3f4 	udiv	r3, r0, r4
   17b78:	fb04 0013 	mls	r0, r4, r3, r0
		temp_time = (temp_time*4+4)/5;
   17b7c:	3001      	adds	r0, #1
   17b7e:	4b2a      	ldr	r3, [pc, #168]	; (17c28 <set_winoffset+0x1a4>)
   17b80:	0080      	lsls	r0, r0, #2
   17b82:	fba3 3000 	umull	r3, r0, r3, r0
   17b86:	0880      	lsrs	r0, r0, #2
		temp_time -= 1;
   17b88:	3801      	subs	r0, #1
		return temp_time;
   17b8a:	b280      	uxth	r0, r0
}
   17b8c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if(scheduled_handle_cnt == 0&& need_update_dummy == false && need_conn_update == false){
   17b90:	4a20      	ldr	r2, [pc, #128]	; (17c14 <set_winoffset+0x190>)
   17b92:	7813      	ldrb	r3, [r2, #0]
   17b94:	2b00      	cmp	r3, #0
   17b96:	d185      	bne.n	17aa4 <set_winoffset+0x20>
		update_is_possible = false;
   17b98:	481f      	ldr	r0, [pc, #124]	; (17c18 <set_winoffset+0x194>)
		need_update_dummy = true;
   17b9a:	2101      	movs	r1, #1
		update_is_possible = false;
   17b9c:	7003      	strb	r3, [r0, #0]
		need_update_dummy = true;
   17b9e:	7031      	strb	r1, [r6, #0]
		return 0;
   17ba0:	4618      	mov	r0, r3
		need_conn_update = true;
   17ba2:	7011      	strb	r1, [r2, #0]
		return 0;
   17ba4:	e77a      	b.n	17a9c <set_winoffset+0x18>
		if(temp_time < now) temp_time = temp_time+max_conn_int*1.25*M - now;
   17ba6:	6838      	ldr	r0, [r7, #0]
   17ba8:	f7e8 fbfc 	bl	3a4 <__aeabi_i2d>
   17bac:	4b18      	ldr	r3, [pc, #96]	; (17c10 <set_winoffset+0x18c>)
   17bae:	2200      	movs	r2, #0
   17bb0:	f7e8 fc62 	bl	478 <__aeabi_dmul>
   17bb4:	4b1d      	ldr	r3, [pc, #116]	; (17c2c <set_winoffset+0x1a8>)
   17bb6:	2200      	movs	r2, #0
   17bb8:	f7e8 fc5e 	bl	478 <__aeabi_dmul>
   17bbc:	4682      	mov	sl, r0
   17bbe:	4630      	mov	r0, r6
   17bc0:	468b      	mov	fp, r1
   17bc2:	f7e8 fbdf 	bl	384 <__aeabi_ui2d>
   17bc6:	4602      	mov	r2, r0
   17bc8:	460b      	mov	r3, r1
   17bca:	4650      	mov	r0, sl
   17bcc:	4659      	mov	r1, fp
   17bce:	f7e8 fa9d 	bl	10c <__adddf3>
   17bd2:	4606      	mov	r6, r0
   17bd4:	4640      	mov	r0, r8
   17bd6:	460f      	mov	r7, r1
   17bd8:	f7e8 fbd4 	bl	384 <__aeabi_ui2d>
   17bdc:	4602      	mov	r2, r0
   17bde:	460b      	mov	r3, r1
   17be0:	4630      	mov	r0, r6
   17be2:	4639      	mov	r1, r7
   17be4:	f7e8 fa90 	bl	108 <__aeabi_dsub>
   17be8:	f7e8 ff08 	bl	9fc <__aeabi_d2uiz>
   17bec:	e7c2      	b.n	17b74 <set_winoffset+0xf0>
		int i=0;
   17bee:	2400      	movs	r4, #0
   17bf0:	e76b      	b.n	17aca <set_winoffset+0x46>
   17bf2:	bf00      	nop
   17bf4:	20008318 	.word	0x20008318
   17bf8:	2000a863 	.word	0x2000a863
   17bfc:	200075d8 	.word	0x200075d8
   17c00:	20009334 	.word	0x20009334
   17c04:	200004b8 	.word	0x200004b8
   17c08:	200075b8 	.word	0x200075b8
   17c0c:	20005f24 	.word	0x20005f24
   17c10:	3ff40000 	.word	0x3ff40000
   17c14:	2000a862 	.word	0x2000a862
   17c18:	2000a864 	.word	0x2000a864
   17c1c:	200075dc 	.word	0x200075dc
   17c20:	3b9aca00 	.word	0x3b9aca00
   17c24:	20004f00 	.word	0x20004f00
   17c28:	cccccccd 	.word	0xcccccccd
   17c2c:	40590000 	.word	0x40590000
   17c30:	431bde83 	.word	0x431bde83

00017c34 <ticker_op_stop_scan_cb>:
}

static void ticker_op_stop_scan_cb(uint32_t status, void *params)
{
	/* TODO: */
}
   17c34:	4770      	bx	lr
   17c36:	bf00      	nop

00017c38 <ticker_op_cb>:

static void ticker_op_cb(uint32_t status, void *params)
{
	ARG_UNUSED(params);

	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   17c38:	b900      	cbnz	r0, 17c3c <ticker_op_cb+0x4>
   17c3a:	4770      	bx	lr
{
   17c3c:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   17c3e:	4a07      	ldr	r2, [pc, #28]	; (17c5c <ticker_op_cb+0x24>)
   17c40:	4907      	ldr	r1, [pc, #28]	; (17c60 <ticker_op_cb+0x28>)
   17c42:	4808      	ldr	r0, [pc, #32]	; (17c64 <ticker_op_cb+0x2c>)
   17c44:	f44f 7346 	mov.w	r3, #792	; 0x318
   17c48:	f006 f97f 	bl	1df4a <printk>
   17c4c:	4040      	eors	r0, r0
   17c4e:	f380 8811 	msr	BASEPRI, r0
   17c52:	f04f 0003 	mov.w	r0, #3
   17c56:	df02      	svc	2
}
   17c58:	bd08      	pop	{r3, pc}
   17c5a:	bf00      	nop
   17c5c:	00024678 	.word	0x00024678
   17c60:	0002448c 	.word	0x0002448c
   17c64:	00023fe4 	.word	0x00023fe4

00017c68 <ull_master_ticker_cb>:
{
   17c68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17c6c:	4605      	mov	r5, r0
   17c6e:	4688      	mov	r8, r1
		ret = ull_conn_llcp(conn, ticks_at_expire, lazy);
   17c70:	4618      	mov	r0, r3
   17c72:	4629      	mov	r1, r5
{
   17c74:	461c      	mov	r4, r3
   17c76:	4617      	mov	r7, r2
		ret = ull_conn_llcp(conn, ticks_at_expire, lazy);
   17c78:	f7e9 fbee 	bl	1458 <ull_conn_llcp>
		if (ret) {
   17c7c:	2800      	cmp	r0, #0
   17c7e:	d141      	bne.n	17d04 <ull_master_ticker_cb+0x9c>
   17c80:	7c23      	ldrb	r3, [r4, #16]
   17c82:	3301      	adds	r3, #1
   17c84:	b2db      	uxtb	r3, r3
   17c86:	7423      	strb	r3, [r4, #16]
	LL_ASSERT(ref);
   17c88:	b373      	cbz	r3, 17ce8 <ull_master_ticker_cb+0x80>
	ull_conn_tx_demux(1);
   17c8a:	2001      	movs	r0, #1
   17c8c:	f7ff fac4 	bl	17218 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, 1);
   17c90:	2101      	movs	r1, #1
   17c92:	4620      	mov	r0, r4
   17c94:	f7ff fb94 	bl	173c0 <ull_conn_tx_lll_enqueue>
	p.ticks_at_expire = ticks_at_expire;
   17c98:	4e1b      	ldr	r6, [pc, #108]	; (17d08 <ull_master_ticker_cb+0xa0>)
	mfy.param = &p;
   17c9a:	4b1c      	ldr	r3, [pc, #112]	; (17d0c <ull_master_ticker_cb+0xa4>)
	p.ticks_at_expire = ticks_at_expire;
   17c9c:	6035      	str	r5, [r6, #0]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   17c9e:	2200      	movs	r2, #0
	p.param = &conn->lll;
   17ca0:	f104 0c1c 	add.w	ip, r4, #28
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   17ca4:	4611      	mov	r1, r2
   17ca6:	2001      	movs	r0, #1
	mfy.param = &p;
   17ca8:	609e      	str	r6, [r3, #8]
	p.remainder = remainder;
   17caa:	f8c6 8004 	str.w	r8, [r6, #4]
	p.lazy = lazy;
   17cae:	8137      	strh	r7, [r6, #8]
	p.param = &conn->lll;
   17cb0:	f8c6 c00c 	str.w	ip, [r6, #12]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   17cb4:	f7f8 fa5a 	bl	1016c <mayfly_enqueue>
	LL_ASSERT(!err);
   17cb8:	b940      	cbnz	r0, 17ccc <ull_master_ticker_cb+0x64>
	ull_conn_tx_demux(UINT8_MAX);
   17cba:	20ff      	movs	r0, #255	; 0xff
   17cbc:	f7ff faac 	bl	17218 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   17cc0:	4620      	mov	r0, r4
   17cc2:	21ff      	movs	r1, #255	; 0xff
}
   17cc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   17cc8:	f7ff bb7a 	b.w	173c0 <ull_conn_tx_lll_enqueue>
	LL_ASSERT(!err);
   17ccc:	4a10      	ldr	r2, [pc, #64]	; (17d10 <ull_master_ticker_cb+0xa8>)
   17cce:	4911      	ldr	r1, [pc, #68]	; (17d14 <ull_master_ticker_cb+0xac>)
   17cd0:	4811      	ldr	r0, [pc, #68]	; (17d18 <ull_master_ticker_cb+0xb0>)
   17cd2:	f44f 7341 	mov.w	r3, #772	; 0x304
   17cd6:	f006 f938 	bl	1df4a <printk>
   17cda:	4040      	eors	r0, r0
   17cdc:	f380 8811 	msr	BASEPRI, r0
   17ce0:	f04f 0003 	mov.w	r0, #3
   17ce4:	df02      	svc	2
   17ce6:	e7e8      	b.n	17cba <ull_master_ticker_cb+0x52>
	LL_ASSERT(ref);
   17ce8:	4a09      	ldr	r2, [pc, #36]	; (17d10 <ull_master_ticker_cb+0xa8>)
   17cea:	490c      	ldr	r1, [pc, #48]	; (17d1c <ull_master_ticker_cb+0xb4>)
   17cec:	480a      	ldr	r0, [pc, #40]	; (17d18 <ull_master_ticker_cb+0xb0>)
   17cee:	f240 23f2 	movw	r3, #754	; 0x2f2
   17cf2:	f006 f92a 	bl	1df4a <printk>
   17cf6:	4040      	eors	r0, r0
   17cf8:	f380 8811 	msr	BASEPRI, r0
   17cfc:	f04f 0003 	mov.w	r0, #3
   17d00:	df02      	svc	2
   17d02:	e7c2      	b.n	17c8a <ull_master_ticker_cb+0x22>
}
   17d04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17d08:	20009364 	.word	0x20009364
   17d0c:	20000610 	.word	0x20000610
   17d10:	00024678 	.word	0x00024678
   17d14:	00024294 	.word	0x00024294
   17d18:	00023fe4 	.word	0x00023fe4
   17d1c:	00024404 	.word	0x00024404

00017d20 <ll_create_connection>:
{
   17d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17d24:	b089      	sub	sp, #36	; 0x24
   17d26:	4680      	mov	r8, r0
   17d28:	9303      	str	r3, [sp, #12]
   17d2a:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
   17d2e:	9302      	str	r3, [sp, #8]
	scan = ull_scan_is_disabled_get(SCAN_HANDLE_1M);
   17d30:	2000      	movs	r0, #0
{
   17d32:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
   17d36:	f89d a04c 	ldrb.w	sl, [sp, #76]	; 0x4c
   17d3a:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
   17d3e:	9304      	str	r3, [sp, #16]
   17d40:	4689      	mov	r9, r1
   17d42:	4616      	mov	r6, r2
	scan = ull_scan_is_disabled_get(SCAN_HANDLE_1M);
   17d44:	f7fc fe8a 	bl	14a5c <ull_scan_is_disabled_get>
	if (!scan) {
   17d48:	2800      	cmp	r0, #0
   17d4a:	f000 819c 	beq.w	18086 <ll_create_connection+0x366>
	if (lll->conn) {
   17d4e:	f8d0 b024 	ldr.w	fp, [r0, #36]	; 0x24
   17d52:	4605      	mov	r5, r0
   17d54:	f1bb 0f00 	cmp.w	fp, #0
   17d58:	d02e      	beq.n	17db8 <ll_create_connection+0x98>
	ull_filter_scan_update(filter_policy);
   17d5a:	4630      	mov	r0, r6
   17d5c:	f000 fd76 	bl	1884c <ull_filter_scan_update>
	lll->rpa_gen = 0;
   17d60:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
	lll->rl_idx = FILTER_IDX_NONE;
   17d64:	22ff      	movs	r2, #255	; 0xff
	lll->rpa_gen = 0;
   17d66:	f36f 0300 	bfc	r3, #0, #1
   17d6a:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
	lll->rl_idx = FILTER_IDX_NONE;
   17d6e:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
	if (!filter_policy && ull_filter_lll_rl_enabled()) {
   17d72:	b1ae      	cbz	r6, 17da0 <ll_create_connection+0x80>
	if (own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   17d74:	f1aa 0302 	sub.w	r3, sl, #2
   17d78:	2b01      	cmp	r3, #1
   17d7a:	f240 814e 	bls.w	1801a <ll_create_connection+0x2fa>
	scan->own_addr_type = own_addr_type;
   17d7e:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
   17d82:	f36a 0342 	bfi	r3, sl, #1, #2
   17d86:	f885 3048 	strb.w	r3, [r5, #72]	; 0x48
	err = lll_clock_wait();
   17d8a:	f001 fe95 	bl	19ab8 <lll_clock_wait>
	if (err) {
   17d8e:	2800      	cmp	r0, #0
   17d90:	f040 814f 	bne.w	18032 <ll_create_connection+0x312>
	return ull_scan_enable(scan);
   17d94:	4628      	mov	r0, r5
   17d96:	f7e9 fabf 	bl	1318 <ull_scan_enable>
}
   17d9a:	b009      	add	sp, #36	; 0x24
   17d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!filter_policy && ull_filter_lll_rl_enabled()) {
   17da0:	f001 faac 	bl	192fc <ull_filter_lll_rl_enabled>
   17da4:	2800      	cmp	r0, #0
   17da6:	d0e5      	beq.n	17d74 <ll_create_connection+0x54>
		lll->rl_idx = ull_filter_rl_find(peer_addr_type, peer_addr,
   17da8:	9803      	ldr	r0, [sp, #12]
   17daa:	9912      	ldr	r1, [sp, #72]	; 0x48
   17dac:	4632      	mov	r2, r6
   17dae:	f000 fe51 	bl	18a54 <ull_filter_rl_find>
   17db2:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
   17db6:	e7dd      	b.n	17d74 <ll_create_connection+0x54>
	link = ll_rx_link_alloc();
   17db8:	f7fc fb02 	bl	143c0 <ll_rx_link_alloc>
	if (!link) {
   17dbc:	9005      	str	r0, [sp, #20]
   17dbe:	2800      	cmp	r0, #0
   17dc0:	f000 8176 	beq.w	180b0 <ll_create_connection+0x390>
	conn = ll_conn_acquire();
   17dc4:	f7fd fa3e 	bl	15244 <ll_conn_acquire>
	if (!conn) {
   17dc8:	4604      	mov	r4, r0
   17dca:	2800      	cmp	r0, #0
   17dcc:	f000 8172 	beq.w	180b4 <ll_create_connection+0x394>
	ull_scan_params_set(lll, 0, scan_interval, scan_window, filter_policy);
   17dd0:	4642      	mov	r2, r8
   17dd2:	464b      	mov	r3, r9
   17dd4:	4659      	mov	r1, fp
   17dd6:	f105 001c 	add.w	r0, r5, #28
   17dda:	9600      	str	r6, [sp, #0]
   17ddc:	f7e9 fa74 	bl	12c8 <ull_scan_params_set>
	lll->adv_addr_type = peer_addr_type;
   17de0:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
   17de4:	9a03      	ldr	r2, [sp, #12]
	memcpy(lll->adv_addr, peer_addr, BDADDR_SIZE);
   17de6:	9912      	ldr	r1, [sp, #72]	; 0x48
	lll->adv_addr_type = peer_addr_type;
   17de8:	f362 1345 	bfi	r3, r2, #5, #1
   17dec:	f885 3032 	strb.w	r3, [r5, #50]	; 0x32
	memcpy(lll->adv_addr, peer_addr, BDADDR_SIZE);
   17df0:	2206      	movs	r2, #6
   17df2:	f105 003b 	add.w	r0, r5, #59	; 0x3b
   17df6:	f008 f83a 	bl	1fe6e <memcpy>
	lll->conn_timeout = timeout;
   17dfa:	862f      	strh	r7, [r5, #48]	; 0x30
	lll->conn_ticks_slot = 0; /* TODO: */
   17dfc:	f8c5 b028 	str.w	fp, [r5, #40]	; 0x28
	err = util_aa_le32(conn_lll->access_addr);
   17e00:	f104 0024 	add.w	r0, r4, #36	; 0x24
   17e04:	f7f8 fac0 	bl	10388 <util_aa_le32>
	conn_lll = &conn->lll;
   17e08:	f104 081c 	add.w	r8, r4, #28
	LL_ASSERT(!err);
   17e0c:	2800      	cmp	r0, #0
   17e0e:	f040 813e 	bne.w	1808e <ll_create_connection+0x36e>
	lll_csrand_get(conn_lll->crc_init, sizeof(conn_lll->crc_init));
   17e12:	2103      	movs	r1, #3
   17e14:	f104 0028 	add.w	r0, r4, #40	; 0x28
   17e18:	f001 fc8a 	bl	19730 <lll_csrand_get>
	conn_lll->interval = interval;
   17e1c:	9b02      	ldr	r3, [sp, #8]
	if (!conn_lll->link_tx_free) {
   17e1e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
	conn_lll->latency = latency;
   17e20:	9a04      	ldr	r2, [sp, #16]
	conn_lll->interval = interval;
   17e22:	85e3      	strh	r3, [r4, #46]	; 0x2e
	conn_lll->handle = 0xFFFF;
   17e24:	f64f 73ff 	movw	r3, #65535	; 0xffff
	conn_lll->latency = latency;
   17e28:	8622      	strh	r2, [r4, #48]	; 0x30
	conn_lll->handle = 0xFFFF;
   17e2a:	85a3      	strh	r3, [r4, #44]	; 0x2c
	if (!conn_lll->link_tx_free) {
   17e2c:	2800      	cmp	r0, #0
   17e2e:	f000 813b 	beq.w	180a8 <ll_create_connection+0x388>
	memq_init(conn_lll->link_tx_free, &conn_lll->memq_tx.head,
   17e32:	f104 0250 	add.w	r2, r4, #80	; 0x50
   17e36:	f104 014c 	add.w	r1, r4, #76	; 0x4c
   17e3a:	f7f8 f915 	bl	10068 <memq_init>
	conn_lll->phy_tx = BIT(0);
   17e3e:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
   17e42:	49ad      	ldr	r1, [pc, #692]	; (180f8 <ll_create_connection+0x3d8>)
	conn_lll->sn = 0;
   17e44:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
	conn_lll->max_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   17e48:	48ac      	ldr	r0, [pc, #688]	; (180fc <ll_create_connection+0x3dc>)
   17e4a:	6460      	str	r0, [r4, #68]	; 0x44
	conn_lll->phy_tx = BIT(0);
   17e4c:	400b      	ands	r3, r1
   17e4e:	f443 7388 	orr.w	r3, r3, #272	; 0x110
	conn_lll->link_tx_free = NULL;
   17e52:	f04f 0900 	mov.w	r9, #0
	conn_lll->sn = 0;
   17e56:	f022 0207 	bic.w	r2, r2, #7
	conn_lll->phy_tx = BIT(0);
   17e5a:	f043 0301 	orr.w	r3, r3, #1
	conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   17e5e:	f04f 111b 	mov.w	r1, #1769499	; 0x1b001b
	conn_lll->sn = 0;
   17e62:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
	conn_lll->phy_tx = BIT(0);
   17e66:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   17e6a:	6421      	str	r1, [r4, #64]	; 0x40
	conn_lll->link_tx_free = NULL;
   17e6c:	f8c4 905c 	str.w	r9, [r4, #92]	; 0x5c
	conn_lll->packet_tx_head_len = 0;
   17e70:	f8a4 9060 	strh.w	r9, [r4, #96]	; 0x60
	conn_lll->latency_prepare = 0;
   17e74:	f8a4 9032 	strh.w	r9, [r4, #50]	; 0x32
	conn_lll->latency_event = 0;
   17e78:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
	conn_lll->data_chan_count = ull_chan_map_get(conn_lll->data_chan_map);
   17e7c:	f104 0038 	add.w	r0, r4, #56	; 0x38
   17e80:	f000 fa3c 	bl	182fc <ull_chan_map_get>
   17e84:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
   17e88:	f360 0305 	bfi	r3, r0, #0, #6
   17e8c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	lll_csrand_get(&hop, sizeof(uint8_t));
   17e90:	2101      	movs	r1, #1
   17e92:	f10d 001f 	add.w	r0, sp, #31
   17e96:	f001 fc4b 	bl	19730 <lll_csrand_get>
	conn_lll->data_chan_hop = 5 + (hop % 12);
   17e9a:	f89d e01f 	ldrb.w	lr, [sp, #31]
   17e9e:	4b98      	ldr	r3, [pc, #608]	; (18100 <ll_create_connection+0x3e0>)
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
   17ea0:	8e20      	ldrh	r0, [r4, #48]	; 0x30
	conn_lll->data_chan_sel = 0;
   17ea2:	f894 c03d 	ldrb.w	ip, [r4, #61]	; 0x3d
	conn_lll->data_chan_use = 0;
   17ea6:	f884 903f 	strb.w	r9, [r4, #63]	; 0x3f
	conn_lll->data_chan_hop = 5 + (hop % 12);
   17eaa:	fba3 230e 	umull	r2, r3, r3, lr
   17eae:	08db      	lsrs	r3, r3, #3
   17eb0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   17eb4:	ebae 0e83 	sub.w	lr, lr, r3, lsl #2
	conn_interval_us = (uint32_t)interval * 1250U;
   17eb8:	9b02      	ldr	r3, [sp, #8]
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
   17eba:	4a92      	ldr	r2, [pc, #584]	; (18104 <ll_create_connection+0x3e4>)
	conn->supervision_expire = 0U;
   17ebc:	f8a4 90ac 	strh.w	r9, [r4, #172]	; 0xac
	conn_interval_us = (uint32_t)interval * 1250U;
   17ec0:	f240 41e2 	movw	r1, #1250	; 0x4e2
   17ec4:	fb01 f103 	mul.w	r1, r1, r3
	conn_lll->data_chan_hop = 5 + (hop % 12);
   17ec8:	f10e 0e05 	add.w	lr, lr, #5
	conn->supervision_reload = RADIO_CONN_EVENTS(timeout * 10000U,
   17ecc:	1e4b      	subs	r3, r1, #1
	conn_lll->data_chan_hop = 5 + (hop % 12);
   17ece:	f884 e03e 	strb.w	lr, [r4, #62]	; 0x3e
	conn->supervision_reload = RADIO_CONN_EVENTS(timeout * 10000U,
   17ed2:	f242 7e10 	movw	lr, #10000	; 0x2710
   17ed6:	fb0e 3307 	mla	r3, lr, r7, r3
	conn->procedure_reload = RADIO_CONN_EVENTS(40000000,
   17eda:	f8df e248 	ldr.w	lr, [pc, #584]	; 18124 <ll_create_connection+0x404>
	conn->supervision_reload = RADIO_CONN_EVENTS(timeout * 10000U,
   17ede:	fbb3 f3f1 	udiv	r3, r3, r1
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
   17ee2:	440a      	add	r2, r1
	conn->procedure_reload = RADIO_CONN_EVENTS(40000000,
   17ee4:	448e      	add	lr, r1
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
   17ee6:	fbb2 f2f1 	udiv	r2, r2, r1
	conn->supervision_reload = RADIO_CONN_EVENTS(timeout * 10000U,
   17eea:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
	conn->procedure_reload = RADIO_CONN_EVENTS(40000000,
   17eee:	fbbe f1f1 	udiv	r1, lr, r1
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
   17ef2:	b293      	uxth	r3, r2
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
   17ef4:	f100 0e06 	add.w	lr, r0, #6
	conn_lll->data_chan_sel = 0;
   17ef8:	f00c 0c3f 	and.w	ip, ip, #63	; 0x3f
	conn->procedure_reload = RADIO_CONN_EVENTS(40000000,
   17efc:	f8a4 10ae 	strh.w	r1, [r4, #174]	; 0xae
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
   17f00:	4573      	cmp	r3, lr
	conn->connect_expire = 6U;
   17f02:	f04f 0106 	mov.w	r1, #6
	conn->procedure_expire = 0U;
   17f06:	f8a4 90b0 	strh.w	r9, [r4, #176]	; 0xb0
	conn->apto_expire = 0U;
   17f0a:	f8a4 90b8 	strh.w	r9, [r4, #184]	; 0xb8
	conn->appto_expire = 0U;
   17f0e:	f8a4 90b4 	strh.w	r9, [r4, #180]	; 0xb4
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
   17f12:	f8a4 30b6 	strh.w	r3, [r4, #182]	; 0xb6
	conn_lll->data_chan_sel = 0;
   17f16:	f884 c03d 	strb.w	ip, [r4, #61]	; 0x3d
	conn->connect_expire = 6U;
   17f1a:	f8a4 10a8 	strh.w	r1, [r4, #168]	; 0xa8
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
   17f1e:	dd02      	ble.n	17f26 <ll_create_connection+0x206>
			     (conn->apto_reload - (conn_lll->latency + 6)) :
   17f20:	1a18      	subs	r0, r3, r0
   17f22:	3806      	subs	r0, #6
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
   17f24:	b283      	uxth	r3, r0
	conn->llcp_terminate.node_rx.hdr.link = link;
   17f26:	9805      	ldr	r0, [sp, #20]
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
   17f28:	f8a4 30b2 	strh.w	r3, [r4, #178]	; 0xb2
	conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
   17f2c:	f894 312a 	ldrb.w	r3, [r4, #298]	; 0x12a
	conn->common.fex_valid = 0U;
   17f30:	f8b4 e0be 	ldrh.w	lr, [r4, #190]	; 0xbe
	conn->llcp_version.tx = conn->llcp_version.rx = 0U;
   17f34:	f894 10fe 	ldrb.w	r1, [r4, #254]	; 0xfe
	conn_lll->enc_rx = conn_lll->enc_tx = 0U;
   17f38:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
	conn->llcp_conn_param.disabled = 0U;
   17f3c:	f894 c14a 	ldrb.w	ip, [r4, #330]	; 0x14a
	conn->llcp_terminate.node_rx.hdr.link = link;
   17f40:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
	conn->llcp_length.disabled = 0U;
   17f44:	f894 0172 	ldrb.w	r0, [r4, #370]	; 0x172
	conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0U;
   17f48:	f04f 0900 	mov.w	r9, #0
	conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
   17f4c:	f023 0307 	bic.w	r3, r3, #7
	conn->common.fex_valid = 0U;
   17f50:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
	conn->llcp_version.tx = conn->llcp_version.rx = 0U;
   17f54:	f021 0103 	bic.w	r1, r1, #3
	conn->llcp_conn_param.disabled = 0U;
   17f58:	f369 1c04 	bfi	ip, r9, #4, #1
	conn_lll->enc_rx = conn_lll->enc_tx = 0U;
   17f5c:	f022 0218 	bic.w	r2, r2, #24
	conn->llcp_length.disabled = 0U;
   17f60:	f369 00c3 	bfi	r0, r9, #3, #1
	conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
   17f64:	f884 312a 	strb.w	r3, [r4, #298]	; 0x12a
	conn->llcp_feature.features_conn = LL_FEAT;
   17f68:	4b67      	ldr	r3, [pc, #412]	; (18108 <ll_create_connection+0x3e8>)
	conn->common.fex_valid = 0U;
   17f6a:	f8a4 e0be 	strh.w	lr, [r4, #190]	; 0xbe
	conn->llcp_version.tx = conn->llcp_version.rx = 0U;
   17f6e:	f884 10fe 	strb.w	r1, [r4, #254]	; 0xfe
	conn->llcp_conn_param.disabled = 0U;
   17f72:	f884 c14a 	strb.w	ip, [r4, #330]	; 0x14a
	conn_lll->enc_rx = conn_lll->enc_tx = 0U;
   17f76:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
	conn->llcp_feature.features_conn = LL_FEAT;
   17f7a:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
	conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0U;
   17f7e:	f8a4 90c0 	strh.w	r9, [r4, #192]	; 0xc0
	conn->llcp_rx = NULL;
   17f82:	f8c4 90d8 	str.w	r9, [r4, #216]	; 0xd8
	conn->llcp_cu.req = conn->llcp_cu.ack = 0;
   17f86:	f8a4 90dc 	strh.w	r9, [r4, #220]	; 0xdc
	conn->llcp_feature.req = conn->llcp_feature.ack = 0;
   17f8a:	f8a4 90f0 	strh.w	r9, [r4, #240]	; 0xf0
	conn->llcp_feature.features_peer = 0;
   17f8e:	f8c4 90f8 	str.w	r9, [r4, #248]	; 0xf8
	conn->llcp_version.req = conn->llcp_version.ack = 0;
   17f92:	f8a4 90fc 	strh.w	r9, [r4, #252]	; 0xfc
	conn->llcp_terminate.reason_peer = 0U;
   17f96:	f884 9107 	strb.w	r9, [r4, #263]	; 0x107
	conn->llcp_enc.req = conn->llcp_enc.ack = 0U;
   17f9a:	f8a4 9128 	strh.w	r9, [r4, #296]	; 0x128
	conn->llcp_conn_param.req = 0U;
   17f9e:	f8a4 9148 	strh.w	r9, [r4, #328]	; 0x148
	conn->llcp_length.req = conn->llcp_length.ack = 0U;
   17fa2:	f8a4 9170 	strh.w	r9, [r4, #368]	; 0x170
	conn->llcp_length.cache.tx_octets = 0U;
   17fa6:	f8a4 917c 	strh.w	r9, [r4, #380]	; 0x17c
	conn->llcp_length.disabled = 0U;
   17faa:	f884 0172 	strb.w	r0, [r4, #370]	; 0x172
	conn->default_tx_octets = ull_conn_default_tx_octets_get();
   17fae:	f7fd fce9 	bl	15984 <ull_conn_default_tx_octets_get>
   17fb2:	f8a4 00ba 	strh.w	r0, [r4, #186]	; 0xba
	conn->default_tx_time = ull_conn_default_tx_time_get();
   17fb6:	f7fd fceb 	bl	15990 <ull_conn_default_tx_time_get>
	conn->llcp_phy.req = conn->llcp_phy.ack = 0U;
   17fba:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
   17fbe:	4b53      	ldr	r3, [pc, #332]	; (1810c <ll_create_connection+0x3ec>)
	conn->default_tx_time = ull_conn_default_tx_time_get();
   17fc0:	f8a4 00bc 	strh.w	r0, [r4, #188]	; 0xbc
	conn->llcp_phy.req = conn->llcp_phy.ack = 0U;
   17fc4:	4013      	ands	r3, r2
   17fc6:	f8c4 3180 	str.w	r3, [r4, #384]	; 0x180
	conn->phy_pref_tx = ull_conn_default_phy_tx_get();
   17fca:	f7fd fce7 	bl	1599c <ull_conn_default_phy_tx_get>
   17fce:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
   17fd2:	f360 0302 	bfi	r3, r0, #0, #3
   17fd6:	f884 3184 	strb.w	r3, [r4, #388]	; 0x184
	conn->phy_pref_rx = ull_conn_default_phy_rx_get();
   17fda:	f7fd fce5 	bl	159a8 <ull_conn_default_phy_rx_get>
	conn->phy_pref_flags = 0U;
   17fde:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
	conn->tx_data = conn->tx_data_last = 0;
   17fe2:	f8c4 9198 	str.w	r9, [r4, #408]	; 0x198
	conn->phy_pref_flags = 0U;
   17fe6:	0103      	lsls	r3, r0, #4
   17fe8:	f003 0370 	and.w	r3, r3, #112	; 0x70
   17fec:	f022 0278 	bic.w	r2, r2, #120	; 0x78
   17ff0:	4313      	orrs	r3, r2
   17ff2:	f884 3184 	strb.w	r3, [r4, #388]	; 0x184
	conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
   17ff6:	e9c4 9964 	strd	r9, r9, [r4, #400]	; 0x190
   17ffa:	e9c4 9962 	strd	r9, r9, [r4, #392]	; 0x188
	lll->conn = conn_lll;
   17ffe:	f8c5 8024 	str.w	r8, [r5, #36]	; 0x24
   18002:	f894 3020 	ldrb.w	r3, [r4, #32]
	hdr->disabled_cb = hdr->disabled_param = NULL;
   18006:	f8c4 9018 	str.w	r9, [r4, #24]
   1800a:	f369 0300 	bfi	r3, r9, #0, #1
   1800e:	f8c4 9014 	str.w	r9, [r4, #20]
	hdr->parent = parent;
   18012:	61e4      	str	r4, [r4, #28]
	hdr->is_stop = 0U;
   18014:	f884 3020 	strb.w	r3, [r4, #32]
}
   18018:	e69f      	b.n	17d5a <ll_create_connection+0x3a>
		ull_filter_rpa_update(false);
   1801a:	2000      	movs	r0, #0
   1801c:	f000 fc30 	bl	18880 <ull_filter_rpa_update>
		lll->rpa_gen = 1;
   18020:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
   18024:	f043 0301 	orr.w	r3, r3, #1
		own_addr_type &= 0x1;
   18028:	f00a 0a01 	and.w	sl, sl, #1
		lll->rpa_gen = 1;
   1802c:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
   18030:	e6a5      	b.n	17d7e <ll_create_connection+0x5e>

static inline void conn_release(struct ll_scan_set *scan)
{
	struct lll_conn *lll = scan->lll.conn;
   18032:	6a6c      	ldr	r4, [r5, #36]	; 0x24
	struct node_rx_pdu *cc;
	struct ll_conn *conn;
	memq_link_t *link;

	LL_ASSERT(!lll->link_tx_free);
   18034:	6c23      	ldr	r3, [r4, #64]	; 0x40
   18036:	b163      	cbz	r3, 18052 <ll_create_connection+0x332>
   18038:	4a35      	ldr	r2, [pc, #212]	; (18110 <ll_create_connection+0x3f0>)
   1803a:	4936      	ldr	r1, [pc, #216]	; (18114 <ll_create_connection+0x3f4>)
   1803c:	4836      	ldr	r0, [pc, #216]	; (18118 <ll_create_connection+0x3f8>)
   1803e:	f240 3322 	movw	r3, #802	; 0x322
   18042:	f005 ff82 	bl	1df4a <printk>
   18046:	4040      	eors	r0, r0
   18048:	f380 8811 	msr	BASEPRI, r0
   1804c:	f04f 0003 	mov.w	r0, #3
   18050:	df02      	svc	2
	link = memq_deinit(&lll->memq_tx.head, &lll->memq_tx.tail);
   18052:	f104 0134 	add.w	r1, r4, #52	; 0x34
   18056:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1805a:	f7f8 f809 	bl	10070 <memq_deinit>
	LL_ASSERT(link);
   1805e:	4606      	mov	r6, r0
   18060:	2800      	cmp	r0, #0
   18062:	d03a      	beq.n	180da <ll_create_connection+0x3ba>
	lll->link_tx_free = link;

	conn = (void *)HDR_LLL2EVT(lll);
   18064:	6827      	ldr	r7, [r4, #0]
	lll->link_tx_free = link;
   18066:	6426      	str	r6, [r4, #64]	; 0x40

	cc = (void *)&conn->llcp_terminate.node_rx;
	link = cc->hdr.link;
   18068:	f8d7 4108 	ldr.w	r4, [r7, #264]	; 0x108
	LL_ASSERT(link);
   1806c:	b33c      	cbz	r4, 180be <ll_create_connection+0x39e>

	ll_rx_link_release(link);
   1806e:	4620      	mov	r0, r4
   18070:	f7fc f9ac 	bl	143cc <ll_rx_link_release>

	ll_conn_release(conn);
   18074:	4638      	mov	r0, r7
   18076:	f7fd f8eb 	bl	15250 <ll_conn_release>
	scan->lll.conn = NULL;
   1807a:	2300      	movs	r3, #0
		return BT_HCI_ERR_HW_FAILURE;
   1807c:	2003      	movs	r0, #3
	scan->lll.conn = NULL;
   1807e:	626b      	str	r3, [r5, #36]	; 0x24
}
   18080:	b009      	add	sp, #36	; 0x24
   18082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   18086:	200c      	movs	r0, #12
}
   18088:	b009      	add	sp, #36	; 0x24
   1808a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	LL_ASSERT(!err);
   1808e:	4a20      	ldr	r2, [pc, #128]	; (18110 <ll_create_connection+0x3f0>)
   18090:	4922      	ldr	r1, [pc, #136]	; (1811c <ll_create_connection+0x3fc>)
   18092:	4821      	ldr	r0, [pc, #132]	; (18118 <ll_create_connection+0x3f8>)
   18094:	2396      	movs	r3, #150	; 0x96
   18096:	f005 ff58 	bl	1df4a <printk>
   1809a:	4040      	eors	r0, r0
   1809c:	f380 8811 	msr	BASEPRI, r0
   180a0:	f04f 0003 	mov.w	r0, #3
   180a4:	df02      	svc	2
   180a6:	e6b4      	b.n	17e12 <ll_create_connection+0xf2>
		conn_lll->link_tx_free = &conn_lll->link_tx;
   180a8:	f104 0054 	add.w	r0, r4, #84	; 0x54
   180ac:	65e0      	str	r0, [r4, #92]	; 0x5c
   180ae:	e6c0      	b.n	17e32 <ll_create_connection+0x112>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   180b0:	2007      	movs	r0, #7
   180b2:	e672      	b.n	17d9a <ll_create_connection+0x7a>
		ll_rx_link_release(link);
   180b4:	9805      	ldr	r0, [sp, #20]
   180b6:	f7fc f989 	bl	143cc <ll_rx_link_release>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   180ba:	2007      	movs	r0, #7
   180bc:	e66d      	b.n	17d9a <ll_create_connection+0x7a>
	LL_ASSERT(link);
   180be:	4a14      	ldr	r2, [pc, #80]	; (18110 <ll_create_connection+0x3f0>)
   180c0:	4917      	ldr	r1, [pc, #92]	; (18120 <ll_create_connection+0x400>)
   180c2:	4815      	ldr	r0, [pc, #84]	; (18118 <ll_create_connection+0x3f8>)
   180c4:	f240 332b 	movw	r3, #811	; 0x32b
   180c8:	f005 ff3f 	bl	1df4a <printk>
   180cc:	4040      	eors	r0, r0
   180ce:	f380 8811 	msr	BASEPRI, r0
   180d2:	f04f 0003 	mov.w	r0, #3
   180d6:	df02      	svc	2
   180d8:	e7c9      	b.n	1806e <ll_create_connection+0x34e>
	LL_ASSERT(link);
   180da:	4a0d      	ldr	r2, [pc, #52]	; (18110 <ll_create_connection+0x3f0>)
   180dc:	4910      	ldr	r1, [pc, #64]	; (18120 <ll_create_connection+0x400>)
   180de:	480e      	ldr	r0, [pc, #56]	; (18118 <ll_create_connection+0x3f8>)
   180e0:	f44f 7349 	mov.w	r3, #804	; 0x324
   180e4:	f005 ff31 	bl	1df4a <printk>
   180e8:	4040      	eors	r0, r0
   180ea:	f380 8811 	msr	BASEPRI, r0
   180ee:	f04f 0003 	mov.w	r0, #3
   180f2:	df02      	svc	2
   180f4:	e7b6      	b.n	18064 <ll_create_connection+0x344>
   180f6:	bf00      	nop
   180f8:	fffff880 	.word	0xfffff880
   180fc:	01480148 	.word	0x01480148
   18100:	aaaaaaab 	.word	0xaaaaaaab
   18104:	01c9c37f 	.word	0x01c9c37f
   18108:	000148ff 	.word	0x000148ff
   1810c:	f6ff0000 	.word	0xf6ff0000
   18110:	00024678 	.word	0x00024678
   18114:	000246bc 	.word	0x000246bc
   18118:	00023fe4 	.word	0x00023fe4
   1811c:	00024294 	.word	0x00024294
   18120:	00024484 	.word	0x00024484
   18124:	026259ff 	.word	0x026259ff

00018128 <ll_connect_disable>:
{
   18128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1812c:	4607      	mov	r7, r0
	scan = ull_scan_is_enabled_get(0);
   1812e:	2000      	movs	r0, #0
   18130:	f7fc fc86 	bl	14a40 <ull_scan_is_enabled_get>
	if (!scan) {
   18134:	b328      	cbz	r0, 18182 <ll_connect_disable+0x5a>
	conn_lll = scan->lll.conn;
   18136:	6a46      	ldr	r6, [r0, #36]	; 0x24
	if (!conn_lll) {
   18138:	4604      	mov	r4, r0
   1813a:	b316      	cbz	r6, 18182 <ll_connect_disable+0x5a>
	status = ull_scan_disable(0, scan);
   1813c:	4601      	mov	r1, r0
   1813e:	2000      	movs	r0, #0
   18140:	f7fc fb96 	bl	14870 <ull_scan_disable>
	if (!status) {
   18144:	4605      	mov	r5, r0
   18146:	b9c8      	cbnz	r0, 1817c <ll_connect_disable+0x54>
		struct ll_conn *conn = (void *)HDR_LLL2EVT(conn_lll);
   18148:	6836      	ldr	r6, [r6, #0]
		link = cc->hdr.link;
   1814a:	f8d6 8108 	ldr.w	r8, [r6, #264]	; 0x108
		cc = (void *)&conn->llcp_terminate.node_rx;
   1814e:	f506 7984 	add.w	r9, r6, #264	; 0x108
		LL_ASSERT(link);
   18152:	f1b8 0f00 	cmp.w	r8, #0
   18156:	d018      	beq.n	1818a <ll_connect_disable+0x62>
		ll_rx_link_release(link);
   18158:	4640      	mov	r0, r8
   1815a:	f7fc f937 	bl	143cc <ll_rx_link_release>
		ftr->param = &scan->lll;
   1815e:	341c      	adds	r4, #28
		cc->hdr.type = NODE_RX_TYPE_CONNECTION;
   18160:	2109      	movs	r1, #9
		cc->hdr.handle = 0xffff;
   18162:	f64f 72ff 	movw	r2, #65535	; 0xffff
		*((uint8_t *)cc->pdu) = BT_HCI_ERR_UNKNOWN_CONN_ID;
   18166:	2302      	movs	r3, #2
		ftr->param = &scan->lll;
   18168:	f8c6 4110 	str.w	r4, [r6, #272]	; 0x110
		cc->hdr.type = NODE_RX_TYPE_CONNECTION;
   1816c:	f886 110c 	strb.w	r1, [r6, #268]	; 0x10c
		cc->hdr.handle = 0xffff;
   18170:	f8a6 210e 	strh.w	r2, [r6, #270]	; 0x10e
		*((uint8_t *)cc->pdu) = BT_HCI_ERR_UNKNOWN_CONN_ID;
   18174:	f886 3124 	strb.w	r3, [r6, #292]	; 0x124
		*rx = cc;
   18178:	f8c7 9000 	str.w	r9, [r7]
}
   1817c:	4628      	mov	r0, r5
   1817e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   18182:	250c      	movs	r5, #12
}
   18184:	4628      	mov	r0, r5
   18186:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		LL_ASSERT(link);
   1818a:	4a07      	ldr	r2, [pc, #28]	; (181a8 <ll_connect_disable+0x80>)
   1818c:	4907      	ldr	r1, [pc, #28]	; (181ac <ll_connect_disable+0x84>)
   1818e:	4808      	ldr	r0, [pc, #32]	; (181b0 <ll_connect_disable+0x88>)
   18190:	f44f 73c7 	mov.w	r3, #398	; 0x18e
   18194:	f005 fed9 	bl	1df4a <printk>
   18198:	4040      	eors	r0, r0
   1819a:	f380 8811 	msr	BASEPRI, r0
   1819e:	f04f 0003 	mov.w	r0, #3
   181a2:	df02      	svc	2
   181a4:	e7d8      	b.n	18158 <ll_connect_disable+0x30>
   181a6:	bf00      	nop
   181a8:	00024678 	.word	0x00024678
   181ac:	00024484 	.word	0x00024484
   181b0:	00023fe4 	.word	0x00023fe4

000181b4 <ll_chm_update>:
{
   181b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   181b8:	4606      	mov	r6, r0
	ull_chan_map_set(chm);
   181ba:	f000 f8ab 	bl	18314 <ull_chan_map_set>
	while (handle--) {
   181be:	2503      	movs	r5, #3
		conn->llcp_type = LLCP_CHAN_MAP;
   181c0:	f04f 0802 	mov.w	r8, #2
	while (handle--) {
   181c4:	f64f 77ff 	movw	r7, #65535	; 0xffff
		conn = ll_connected_get(handle);
   181c8:	4628      	mov	r0, r5
   181ca:	f7fd f857 	bl	1527c <ll_connected_get>
		if (!conn || conn->lll.role) {
   181ce:	4604      	mov	r4, r0
   181d0:	b1d0      	cbz	r0, 18208 <ll_chm_update+0x54>
   181d2:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
   181d6:	2b00      	cmp	r3, #0
   181d8:	db16      	blt.n	18208 <ll_chm_update+0x54>
		ret = ull_conn_llcp_req(conn);
   181da:	f7ff fc21 	bl	17a20 <ull_conn_llcp_req>
   181de:	4603      	mov	r3, r0
		memcpy(conn->llcp.chan_map.chm, chm,
   181e0:	2205      	movs	r2, #5
   181e2:	4631      	mov	r1, r6
   181e4:	f104 00c5 	add.w	r0, r4, #197	; 0xc5
		if (ret) {
   181e8:	b99b      	cbnz	r3, 18212 <ll_chm_update+0x5e>
		memcpy(conn->llcp.chan_map.chm, chm,
   181ea:	f007 fe40 	bl	1fe6e <memcpy>
		conn->llcp.chan_map.initiate = 1U;
   181ee:	f894 20c4 	ldrb.w	r2, [r4, #196]	; 0xc4
		conn->llcp_req++;
   181f2:	f894 30bf 	ldrb.w	r3, [r4, #191]	; 0xbf
		conn->llcp_type = LLCP_CHAN_MAP;
   181f6:	f884 80c1 	strb.w	r8, [r4, #193]	; 0xc1
		conn->llcp.chan_map.initiate = 1U;
   181fa:	f042 0201 	orr.w	r2, r2, #1
		conn->llcp_req++;
   181fe:	3301      	adds	r3, #1
		conn->llcp.chan_map.initiate = 1U;
   18200:	f884 20c4 	strb.w	r2, [r4, #196]	; 0xc4
		conn->llcp_req++;
   18204:	f884 30bf 	strb.w	r3, [r4, #191]	; 0xbf
	while (handle--) {
   18208:	3d01      	subs	r5, #1
   1820a:	b2ad      	uxth	r5, r5
   1820c:	42bd      	cmp	r5, r7
   1820e:	d1db      	bne.n	181c8 <ll_chm_update+0x14>
	return 0;
   18210:	2300      	movs	r3, #0
}
   18212:	4618      	mov	r0, r3
   18214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00018218 <ll_enc_req_send>:
{
   18218:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1821c:	4688      	mov	r8, r1
   1821e:	4616      	mov	r6, r2
   18220:	4699      	mov	r9, r3
   18222:	4607      	mov	r7, r0
	conn = ll_connected_get(handle);
   18224:	f7fd f82a 	bl	1527c <ll_connected_get>
	if (!conn) {
   18228:	2800      	cmp	r0, #0
   1822a:	d063      	beq.n	182f4 <ll_enc_req_send+0xdc>
	if ((conn->llcp_enc.req != conn->llcp_enc.ack) ||
   1822c:	f890 2128 	ldrb.w	r2, [r0, #296]	; 0x128
   18230:	f890 3129 	ldrb.w	r3, [r0, #297]	; 0x129
   18234:	429a      	cmp	r2, r3
   18236:	4604      	mov	r4, r0
   18238:	d13d      	bne.n	182b6 <ll_enc_req_send+0x9e>
   1823a:	f890 20bf 	ldrb.w	r2, [r0, #191]	; 0xbf
   1823e:	f890 30c0 	ldrb.w	r3, [r0, #192]	; 0xc0
   18242:	429a      	cmp	r2, r3
   18244:	d003      	beq.n	1824e <ll_enc_req_send+0x36>
	    ((conn->llcp_req != conn->llcp_ack) &&
   18246:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
   1824a:	2b03      	cmp	r3, #3
   1824c:	d033      	beq.n	182b6 <ll_enc_req_send+0x9e>
	tx = ll_tx_mem_acquire();
   1824e:	f7fd f829 	bl	152a4 <ll_tx_mem_acquire>
	if (tx) {
   18252:	4605      	mov	r5, r0
   18254:	b378      	cbz	r0, 182b6 <ll_enc_req_send+0x9e>
		memcpy(&conn->llcp_enc.ltk[0], ltk, sizeof(conn->llcp_enc.ltk));
   18256:	4649      	mov	r1, r9
   18258:	2210      	movs	r2, #16
   1825a:	f204 1035 	addw	r0, r4, #309	; 0x135
   1825e:	f007 fe06 	bl	1fe6e <memcpy>
		if (!conn->lll.enc_rx && !conn->lll.enc_tx) {
   18262:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   18266:	f013 0318 	ands.w	r3, r3, #24
   1826a:	d027      	beq.n	182bc <ll_enc_req_send+0xa4>
		} else if (conn->lll.enc_rx && conn->lll.enc_tx) {
   1826c:	2b18      	cmp	r3, #24
   1826e:	d11f      	bne.n	182b0 <ll_enc_req_send+0x98>
			memcpy(&conn->llcp_enc.rand[0], rand,
   18270:	4641      	mov	r1, r8
   18272:	2208      	movs	r2, #8
   18274:	f204 102d 	addw	r0, r4, #301	; 0x12d
   18278:	f007 fdf9 	bl	1fe6e <memcpy>
			conn->llcp_enc.ediv[0] = ediv[0];
   1827c:	7833      	ldrb	r3, [r6, #0]
   1827e:	f884 312b 	strb.w	r3, [r4, #299]	; 0x12b
			conn->llcp_enc.ediv[1] = ediv[1];
   18282:	7873      	ldrb	r3, [r6, #1]
   18284:	f884 312c 	strb.w	r3, [r4, #300]	; 0x12c
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   18288:	792b      	ldrb	r3, [r5, #4]
			pdu_data_tx->len = offsetof(struct pdu_data_llctrl,
   1828a:	2101      	movs	r1, #1
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   1828c:	f043 0303 	orr.w	r3, r3, #3
			pdu_data_tx->llctrl.opcode =
   18290:	220a      	movs	r2, #10
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   18292:	712b      	strb	r3, [r5, #4]
			pdu_data_tx->len = offsetof(struct pdu_data_llctrl,
   18294:	7169      	strb	r1, [r5, #5]
			pdu_data_tx->llctrl.opcode =
   18296:	71ea      	strb	r2, [r5, #7]
		if (ll_tx_mem_enqueue(handle, tx)) {
   18298:	4638      	mov	r0, r7
   1829a:	4629      	mov	r1, r5
   1829c:	f7fd f80e 	bl	152bc <ll_tx_mem_enqueue>
   182a0:	b930      	cbnz	r0, 182b0 <ll_enc_req_send+0x98>
		conn->llcp_enc.req++;
   182a2:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
   182a6:	3301      	adds	r3, #1
   182a8:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
}
   182ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			ll_tx_mem_release(tx);
   182b0:	4628      	mov	r0, r5
   182b2:	f7fc fffd 	bl	152b0 <ll_tx_mem_release>
			return BT_HCI_ERR_CMD_DISALLOWED;
   182b6:	200c      	movs	r0, #12
}
   182b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   182bc:	792b      	ldrb	r3, [r5, #4]
			pdu_data_tx->llctrl.opcode =
   182be:	2203      	movs	r2, #3
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   182c0:	f043 0303 	orr.w	r3, r3, #3
			pdu_data_tx->llctrl.opcode =
   182c4:	71ea      	strb	r2, [r5, #7]
			pdu_data_tx->len =
   182c6:	2017      	movs	r0, #23
			memcpy(enc_req->rand, rand, sizeof(enc_req->rand));
   182c8:	2208      	movs	r2, #8
   182ca:	4641      	mov	r1, r8
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   182cc:	712b      	strb	r3, [r5, #4]
			pdu_data_tx->len =
   182ce:	7168      	strb	r0, [r5, #5]
			memcpy(enc_req->rand, rand, sizeof(enc_req->rand));
   182d0:	18a8      	adds	r0, r5, r2
   182d2:	f007 fdcc 	bl	1fe6e <memcpy>
			enc_req->ediv[0] = ediv[0];
   182d6:	7833      	ldrb	r3, [r6, #0]
   182d8:	742b      	strb	r3, [r5, #16]
			enc_req->ediv[1] = ediv[1];
   182da:	7873      	ldrb	r3, [r6, #1]
   182dc:	746b      	strb	r3, [r5, #17]
			lll_csrand_get(enc_req->skdm, sizeof(enc_req->skdm));
   182de:	2108      	movs	r1, #8
   182e0:	f105 0012 	add.w	r0, r5, #18
   182e4:	f001 fa24 	bl	19730 <lll_csrand_get>
			lll_csrand_get(enc_req->ivm, sizeof(enc_req->ivm));
   182e8:	2104      	movs	r1, #4
   182ea:	f105 001a 	add.w	r0, r5, #26
   182ee:	f001 fa1f 	bl	19730 <lll_csrand_get>
   182f2:	e7d1      	b.n	18298 <ll_enc_req_send+0x80>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   182f4:	2002      	movs	r0, #2
}
   182f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   182fa:	bf00      	nop

000182fc <ull_chan_map_get>:

	return 0;
}

uint8_t ull_chan_map_get(uint8_t *const chan_map)
{
   182fc:	b508      	push	{r3, lr}
	memcpy(chan_map, map, sizeof(map));
   182fe:	4903      	ldr	r1, [pc, #12]	; (1830c <ull_chan_map_get+0x10>)
   18300:	2205      	movs	r2, #5
   18302:	f007 fdb4 	bl	1fe6e <memcpy>

	return count;
   18306:	4b02      	ldr	r3, [pc, #8]	; (18310 <ull_chan_map_get+0x14>)
}
   18308:	7818      	ldrb	r0, [r3, #0]
   1830a:	bd08      	pop	{r3, pc}
   1830c:	20000620 	.word	0x20000620
   18310:	20000747 	.word	0x20000747

00018314 <ull_chan_map_set>:

void ull_chan_map_set(uint8_t const *const chan_map)
{
   18314:	b510      	push	{r4, lr}
	memcpy(map, chan_map, sizeof(map));
   18316:	4c06      	ldr	r4, [pc, #24]	; (18330 <ull_chan_map_set+0x1c>)
{
   18318:	4601      	mov	r1, r0
	memcpy(map, chan_map, sizeof(map));
   1831a:	2205      	movs	r2, #5
   1831c:	4620      	mov	r0, r4
   1831e:	f007 fda6 	bl	1fe6e <memcpy>
	count = util_ones_count_get(map, sizeof(map));
   18322:	4620      	mov	r0, r4
   18324:	2105      	movs	r1, #5
   18326:	f7f8 f817 	bl	10358 <util_ones_count_get>
   1832a:	4b02      	ldr	r3, [pc, #8]	; (18334 <ull_chan_map_set+0x20>)
   1832c:	7018      	strb	r0, [r3, #0]
}
   1832e:	bd10      	pop	{r4, pc}
   18330:	20000620 	.word	0x20000620
   18334:	20000747 	.word	0x20000747

00018338 <lll_chan_sel_1>:
#endif /* CONFIG_BT_CTLR_CHAN_SEL_2 */

#if defined(CONFIG_BT_CONN)
uint8_t lll_chan_sel_1(uint8_t *chan_use, uint8_t hop, uint16_t latency, uint8_t *chan_map,
		    uint8_t chan_count)
{
   18338:	b470      	push	{r4, r5, r6}
   1833a:	4605      	mov	r5, r0
	uint8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   1833c:	7800      	ldrb	r0, [r0, #0]
   1833e:	4c1b      	ldr	r4, [pc, #108]	; (183ac <lll_chan_sel_1+0x74>)
   18340:	fb02 1101 	mla	r1, r2, r1, r1
   18344:	180a      	adds	r2, r1, r0
   18346:	fb84 0102 	smull	r0, r1, r4, r2
   1834a:	4411      	add	r1, r2
   1834c:	1149      	asrs	r1, r1, #5
   1834e:	eb01 04c1 	add.w	r4, r1, r1, lsl #3
   18352:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   18356:	1a51      	subs	r1, r2, r1
   18358:	b2c8      	uxtb	r0, r1
	*chan_use = chan_next;

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   1835a:	08c2      	lsrs	r2, r0, #3
	*chan_use = chan_next;
   1835c:	7028      	strb	r0, [r5, #0]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   1835e:	5c9c      	ldrb	r4, [r3, r2]
{
   18360:	f89d 500c 	ldrb.w	r5, [sp, #12]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   18364:	f001 0107 	and.w	r1, r1, #7
   18368:	410c      	asrs	r4, r1
   1836a:	f014 0401 	ands.w	r4, r4, #1
   1836e:	d11b      	bne.n	183a8 <lll_chan_sel_1+0x70>
		uint8_t chan_index;

		chan_index = chan_next % chan_count;
   18370:	fbb0 f2f5 	udiv	r2, r0, r5
   18374:	fb05 0212 	mls	r2, r5, r2, r0
   18378:	b2d2      	uxtb	r2, r2
	uint8_t chan_next;
	uint8_t byte_count;

	chan_next = 0U;
	byte_count = 5U;
	while (byte_count--) {
   1837a:	1e5d      	subs	r5, r3, #1
   1837c:	1d1e      	adds	r6, r3, #4
		uint8_t bite;
		uint8_t bit_count;

		bite = *chan_map;
   1837e:	f104 0108 	add.w	r1, r4, #8
   18382:	f815 3f01 	ldrb.w	r3, [r5, #1]!
		bit_count = 8U;
		while (bit_count--) {
   18386:	4620      	mov	r0, r4
   18388:	b2cc      	uxtb	r4, r1
			if (bite & 0x01) {
   1838a:	f013 0f01 	tst.w	r3, #1
				if (chan_index == 0U) {
					break;
				}
				chan_index--;
			}
			chan_next++;
   1838e:	f100 0101 	add.w	r1, r0, #1
			bite >>= 1;
   18392:	ea4f 0353 	mov.w	r3, r3, lsr #1
			if (bite & 0x01) {
   18396:	d002      	beq.n	1839e <lll_chan_sel_1+0x66>
				if (chan_index == 0U) {
   18398:	b132      	cbz	r2, 183a8 <lll_chan_sel_1+0x70>
				chan_index--;
   1839a:	3a01      	subs	r2, #1
   1839c:	b2d2      	uxtb	r2, r2
			chan_next++;
   1839e:	b2c8      	uxtb	r0, r1
		while (bit_count--) {
   183a0:	4284      	cmp	r4, r0
   183a2:	d1f2      	bne.n	1838a <lll_chan_sel_1+0x52>
	while (byte_count--) {
   183a4:	42b5      	cmp	r5, r6
   183a6:	d1ea      	bne.n	1837e <lll_chan_sel_1+0x46>
}
   183a8:	bc70      	pop	{r4, r5, r6}
   183aa:	4770      	bx	lr
   183ac:	dd67c8a7 	.word	0xdd67c8a7

000183b0 <lll_chan_sel_2>:
{
   183b0:	b5f0      	push	{r4, r5, r6, r7, lr}
/* Attribution:
 * http://graphics.stanford.edu/%7Eseander/bithacks.html#ReverseByteWith32Bits
 */
static uint8_t chan_rev_8(uint8_t b)
{
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   183b2:	4f2f      	ldr	r7, [pc, #188]	; (18470 <lll_chan_sel_2+0xc0>)
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   183b4:	4e2f      	ldr	r6, [pc, #188]	; (18474 <lll_chan_sel_2+0xc4>)
static uint16_t chan_prn(uint16_t counter, uint16_t chan_id)
{
	uint8_t iterate;
	uint16_t prn_e;

	prn_e = counter ^ chan_id;
   183b6:	ea80 0501 	eor.w	r5, r0, r1
   183ba:	2403      	movs	r4, #3
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   183bc:	0a28      	lsrs	r0, r5, #8
   183be:	b2ed      	uxtb	r5, r5
   183c0:	eb00 2080 	add.w	r0, r0, r0, lsl #10
   183c4:	eb05 2585 	add.w	r5, r5, r5, lsl #10
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   183c8:	ea06 1e40 	and.w	lr, r6, r0, lsl #5
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   183cc:	ea07 0c40 	and.w	ip, r7, r0, lsl #1
   183d0:	ea07 0045 	and.w	r0, r7, r5, lsl #1
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   183d4:	ea06 1545 	and.w	r5, r6, r5, lsl #5
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   183d8:	ea4c 0c0e 	orr.w	ip, ip, lr
   183dc:	4328      	orrs	r0, r5
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   183de:	eb00 2500 	add.w	r5, r0, r0, lsl #8
   183e2:	eb0c 2e0c 	add.w	lr, ip, ip, lsl #8
   183e6:	eb00 2005 	add.w	r0, r0, r5, lsl #8
   183ea:	eb0c 2c0e 	add.w	ip, ip, lr, lsl #8
   183ee:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
   183f2:	f3c0 4007 	ubfx	r0, r0, #16, #8
   183f6:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   183fa:	eb00 1000 	add.w	r0, r0, r0, lsl #4
   183fe:	3c01      	subs	r4, #1
   18400:	4408      	add	r0, r1

	for (iterate = 0U; iterate < 3; iterate++) {
   18402:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   18406:	b285      	uxth	r5, r0
	for (iterate = 0U; iterate < 3; iterate++) {
   18408:	d1d8      	bne.n	183bc <lll_chan_sel_2+0xc>
	chan_next = prn_e % 37;
   1840a:	481b      	ldr	r0, [pc, #108]	; (18478 <lll_chan_sel_2+0xc8>)
		prn_e = chan_perm(prn_e);
		prn_e = chan_mam(prn_e, chan_id);
	}

	prn_e ^= chan_id;
   1840c:	4069      	eors	r1, r5
	chan_next = prn_e % 37;
   1840e:	fba0 5001 	umull	r5, r0, r0, r1
   18412:	1a0d      	subs	r5, r1, r0
   18414:	eb00 0055 	add.w	r0, r0, r5, lsr #1
   18418:	0940      	lsrs	r0, r0, #5
   1841a:	eb00 05c0 	add.w	r5, r0, r0, lsl #3
   1841e:	eb00 0085 	add.w	r0, r0, r5, lsl #2
   18422:	1a08      	subs	r0, r1, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   18424:	f3c0 05c4 	ubfx	r5, r0, #3, #5
   18428:	f000 0607 	and.w	r6, r0, #7
   1842c:	5d55      	ldrb	r5, [r2, r5]
   1842e:	4135      	asrs	r5, r6
   18430:	07ed      	lsls	r5, r5, #31
	chan_next = prn_e % 37;
   18432:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   18434:	d41a      	bmi.n	1846c <lll_chan_sel_2+0xbc>
		chan_index = ((uint32_t)chan_count * prn_e) >> 16;
   18436:	fb01 f303 	mul.w	r3, r1, r3
   1843a:	1e56      	subs	r6, r2, #1
   1843c:	f3c3 4307 	ubfx	r3, r3, #16, #8
	while (byte_count--) {
   18440:	3204      	adds	r2, #4
		bite = *chan_map;
   18442:	f104 0508 	add.w	r5, r4, #8
   18446:	f816 1f01 	ldrb.w	r1, [r6, #1]!
		while (bit_count--) {
   1844a:	4620      	mov	r0, r4
   1844c:	b2ec      	uxtb	r4, r5
			if (bite & 0x01) {
   1844e:	f011 0f01 	tst.w	r1, #1
			chan_next++;
   18452:	f100 0501 	add.w	r5, r0, #1
			bite >>= 1;
   18456:	ea4f 0151 	mov.w	r1, r1, lsr #1
			if (bite & 0x01) {
   1845a:	d002      	beq.n	18462 <lll_chan_sel_2+0xb2>
				if (chan_index == 0U) {
   1845c:	b133      	cbz	r3, 1846c <lll_chan_sel_2+0xbc>
				chan_index--;
   1845e:	3b01      	subs	r3, #1
   18460:	b2db      	uxtb	r3, r3
			chan_next++;
   18462:	b2e8      	uxtb	r0, r5
		while (bit_count--) {
   18464:	42a0      	cmp	r0, r4
   18466:	d1f2      	bne.n	1844e <lll_chan_sel_2+0x9e>
	while (byte_count--) {
   18468:	42b2      	cmp	r2, r6
   1846a:	d1ea      	bne.n	18442 <lll_chan_sel_2+0x92>
}
   1846c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1846e:	bf00      	nop
   18470:	00022110 	.word	0x00022110
   18474:	00088440 	.word	0x00088440
   18478:	bacf914d 	.word	0xbacf914d

0001847c <wl_find>:
		wl[i].taken = 0U;
	}
}

static uint8_t wl_find(uint8_t addr_type, uint8_t *addr, uint8_t *free)
{
   1847c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   18480:	4688      	mov	r8, r1
	int i;

	if (free) {
   18482:	4615      	mov	r5, r2
   18484:	b10a      	cbz	r2, 1848a <wl_find+0xe>
		*free = FILTER_IDX_NONE;
   18486:	23ff      	movs	r3, #255	; 0xff
   18488:	7013      	strb	r3, [r2, #0]
   1848a:	4e17      	ldr	r6, [pc, #92]	; (184e8 <wl_find+0x6c>)
	}

	for (i = 0; i < WL_SIZE; i++) {
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   1848c:	f000 0701 	and.w	r7, r0, #1
   18490:	f106 0902 	add.w	r9, r6, #2
{
   18494:	2400      	movs	r4, #0
   18496:	e004      	b.n	184a2 <wl_find+0x26>
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   18498:	42ba      	cmp	r2, r7
   1849a:	d014      	beq.n	184c6 <wl_find+0x4a>
	for (i = 0; i < WL_SIZE; i++) {
   1849c:	3401      	adds	r4, #1
   1849e:	2c08      	cmp	r4, #8
   184a0:	d00e      	beq.n	184c0 <wl_find+0x44>
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   184a2:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   184a6:	07d9      	lsls	r1, r3, #31
   184a8:	f3c3 0240 	ubfx	r2, r3, #1, #1
   184ac:	d4f4      	bmi.n	18498 <wl_find+0x1c>
			return i;
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   184ae:	2d00      	cmp	r5, #0
   184b0:	d0f4      	beq.n	1849c <wl_find+0x20>
   184b2:	782b      	ldrb	r3, [r5, #0]
   184b4:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   184b6:	bf08      	it	eq
   184b8:	702c      	strbeq	r4, [r5, #0]
	for (i = 0; i < WL_SIZE; i++) {
   184ba:	3401      	adds	r4, #1
   184bc:	2c08      	cmp	r4, #8
   184be:	d1f0      	bne.n	184a2 <wl_find+0x26>
		}
	}

	return FILTER_IDX_NONE;
   184c0:	20ff      	movs	r0, #255	; 0xff
}
   184c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   184c6:	2206      	movs	r2, #6
   184c8:	4641      	mov	r1, r8
   184ca:	eb09 00c4 	add.w	r0, r9, r4, lsl #3
   184ce:	f007 fcbe 	bl	1fe4e <memcmp>
   184d2:	b130      	cbz	r0, 184e2 <wl_find+0x66>
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   184d4:	2d00      	cmp	r5, #0
   184d6:	d0e1      	beq.n	1849c <wl_find+0x20>
   184d8:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   184dc:	07db      	lsls	r3, r3, #31
   184de:	d4dd      	bmi.n	1849c <wl_find+0x20>
   184e0:	e7e7      	b.n	184b2 <wl_find+0x36>
			return i;
   184e2:	b2e0      	uxtb	r0, r4
   184e4:	e7ed      	b.n	184c2 <wl_find+0x46>
   184e6:	bf00      	nop
   184e8:	200095a4 	.word	0x200095a4

000184ec <wl_update>:

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
}

static void wl_update(void)
{
   184ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   184f0:	4f21      	ldr	r7, [pc, #132]	; (18578 <wl_update+0x8c>)
   184f2:	4d22      	ldr	r5, [pc, #136]	; (1857c <wl_update+0x90>)
			continue;
		}

		j = wl[i].rl_idx;

		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   184f4:	f8df 9088 	ldr.w	r9, [pc, #136]	; 18580 <wl_update+0x94>
   184f8:	f8df a088 	ldr.w	sl, [pc, #136]	; 18584 <wl_update+0x98>
#endif /* !CONFIG_BT_CTLR_PRIVACY */

static void filter_insert(struct lll_filter *filter, int index, uint8_t addr_type,
			   uint8_t *bdaddr)
{
	filter->enable_bitmask |= BIT(index);
   184fc:	f1a7 0802 	sub.w	r8, r7, #2
   18500:	f1a5 0b02 	sub.w	fp, r5, #2
{
   18504:	2400      	movs	r4, #0
		if (!wl[i].taken) {
   18506:	f81b 3034 	ldrb.w	r3, [fp, r4, lsl #3]
	filter->enable_bitmask |= BIT(index);
   1850a:	2601      	movs	r6, #1
		if (!wl[i].taken) {
   1850c:	f013 0f01 	tst.w	r3, #1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   18510:	4638      	mov	r0, r7
	filter->enable_bitmask |= BIT(index);
   18512:	fa06 f604 	lsl.w	r6, r6, r4
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   18516:	4629      	mov	r1, r5
   18518:	f107 0706 	add.w	r7, r7, #6
   1851c:	f04f 0206 	mov.w	r2, #6
		if (!wl[i].taken) {
   18520:	d022      	beq.n	18568 <wl_update+0x7c>
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   18522:	f899 3000 	ldrb.w	r3, [r9]
   18526:	b163      	cbz	r3, 18542 <wl_update+0x56>
		j = wl[i].rl_idx;
   18528:	f815 3c01 	ldrb.w	r3, [r5, #-1]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   1852c:	2b07      	cmp	r3, #7
   1852e:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
   18532:	d806      	bhi.n	18542 <wl_update+0x56>
   18534:	f81a 303c 	ldrb.w	r3, [sl, ip, lsl #3]
   18538:	f013 0f04 	tst.w	r3, #4
   1853c:	d001      	beq.n	18542 <wl_update+0x56>
   1853e:	06db      	lsls	r3, r3, #27
   18540:	d512      	bpl.n	18568 <wl_update+0x7c>
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   18542:	f81b 3034 	ldrb.w	r3, [fp, r4, lsl #3]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   18546:	f898 e001 	ldrb.w	lr, [r8, #1]
	filter->enable_bitmask |= BIT(index);
   1854a:	f898 c000 	ldrb.w	ip, [r8]
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   1854e:	f3c3 0340 	ubfx	r3, r3, #1, #1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   18552:	40a3      	lsls	r3, r4
   18554:	ea4e 0303 	orr.w	r3, lr, r3
	filter->enable_bitmask |= BIT(index);
   18558:	ea4c 0606 	orr.w	r6, ip, r6
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1855c:	f888 3001 	strb.w	r3, [r8, #1]
	filter->enable_bitmask |= BIT(index);
   18560:	f888 6000 	strb.w	r6, [r8]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   18564:	f007 fc83 	bl	1fe6e <memcpy>
	for (i = 0U; i < WL_SIZE; i++) {
   18568:	3401      	adds	r4, #1
   1856a:	2c08      	cmp	r4, #8
   1856c:	f105 0508 	add.w	r5, r5, #8
   18570:	d1c9      	bne.n	18506 <wl_update+0x1a>
}
   18572:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18576:	bf00      	nop
   18578:	200095e6 	.word	0x200095e6
   1857c:	200095a6 	.word	0x200095a6
   18580:	2000a867 	.word	0x2000a867
   18584:	2000942c 	.word	0x2000942c

00018588 <rl_update>:
{
   18588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1858c:	f8df 8060 	ldr.w	r8, [pc, #96]	; 185f0 <rl_update+0x68>
	filter->enable_bitmask |= BIT(index);
   18590:	4d16      	ldr	r5, [pc, #88]	; (185ec <rl_update+0x64>)
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   18592:	f108 0701 	add.w	r7, r8, #1
   18596:	1cae      	adds	r6, r5, #2
{
   18598:	2400      	movs	r4, #0
   1859a:	e002      	b.n	185a2 <rl_update+0x1a>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1859c:	3401      	adds	r4, #1
   1859e:	2c08      	cmp	r4, #8
   185a0:	d021      	beq.n	185e6 <rl_update+0x5e>
		if (rl[i].taken) {
   185a2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   185a6:	00d9      	lsls	r1, r3, #3
   185a8:	f818 3033 	ldrb.w	r3, [r8, r3, lsl #3]
   185ac:	07da      	lsls	r2, r3, #31
   185ae:	d5f5      	bpl.n	1859c <rl_update+0x14>
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   185b0:	786a      	ldrb	r2, [r5, #1]
	filter->enable_bitmask |= BIT(index);
   185b2:	f895 c000 	ldrb.w	ip, [r5]
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
   185b6:	f3c3 1380 	ubfx	r3, r3, #6, #1
	filter->enable_bitmask |= BIT(index);
   185ba:	f04f 0e01 	mov.w	lr, #1
   185be:	fa0e fe04 	lsl.w	lr, lr, r4
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   185c2:	40a3      	lsls	r3, r4
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   185c4:	eb04 0044 	add.w	r0, r4, r4, lsl #1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   185c8:	4313      	orrs	r3, r2
	filter->enable_bitmask |= BIT(index);
   185ca:	ea4c 0c0e 	orr.w	ip, ip, lr
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   185ce:	4439      	add	r1, r7
   185d0:	eb06 0040 	add.w	r0, r6, r0, lsl #1
   185d4:	2206      	movs	r2, #6
   185d6:	3401      	adds	r4, #1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   185d8:	706b      	strb	r3, [r5, #1]
	filter->enable_bitmask |= BIT(index);
   185da:	f885 c000 	strb.w	ip, [r5]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   185de:	f007 fc46 	bl	1fe6e <memcpy>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   185e2:	2c08      	cmp	r4, #8
   185e4:	d1dd      	bne.n	185a2 <rl_update+0x1a>
}
   185e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   185ea:	bf00      	nop
   185ec:	2000956c 	.word	0x2000956c
   185f0:	2000942c 	.word	0x2000942c

000185f4 <ll_wl_size_get>:
}
   185f4:	2008      	movs	r0, #8
   185f6:	4770      	bx	lr

000185f8 <ll_wl_clear>:
{
   185f8:	b510      	push	{r4, lr}
	if (ull_scan_filter_pol_get(0) & 0x1) {
   185fa:	2000      	movs	r0, #0
   185fc:	f7fc fa52 	bl	14aa4 <ull_scan_filter_pol_get>
   18600:	f010 0001 	ands.w	r0, r0, #1
   18604:	d11b      	bne.n	1863e <ll_wl_clear+0x46>
   18606:	4a0f      	ldr	r2, [pc, #60]	; (18644 <ll_wl_clear+0x4c>)
			rl[j].wl = 0U;
   18608:	4c0f      	ldr	r4, [pc, #60]	; (18648 <ll_wl_clear+0x50>)
		uint8_t j = wl[i].rl_idx;
   1860a:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
   1860e:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   18610:	2b07      	cmp	r3, #7
			rl[j].wl = 0U;
   18612:	eb03 0183 	add.w	r1, r3, r3, lsl #2
		if (j < ARRAY_SIZE(rl)) {
   18616:	d805      	bhi.n	18624 <ll_wl_clear+0x2c>
			rl[j].wl = 0U;
   18618:	f814 3031 	ldrb.w	r3, [r4, r1, lsl #3]
   1861c:	f36f 1345 	bfc	r3, #5, #1
   18620:	f804 3031 	strb.w	r3, [r4, r1, lsl #3]
		wl[i].taken = 0U;
   18624:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
   18628:	f36f 0300 	bfc	r3, #0, #1
   1862c:	f802 3030 	strb.w	r3, [r2, r0, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   18630:	3001      	adds	r0, #1
   18632:	2808      	cmp	r0, #8
   18634:	d1e9      	bne.n	1860a <ll_wl_clear+0x12>
	wl_anon = 0U;
   18636:	4b05      	ldr	r3, [pc, #20]	; (1864c <ll_wl_clear+0x54>)
   18638:	2000      	movs	r0, #0
   1863a:	7018      	strb	r0, [r3, #0]
}
   1863c:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1863e:	200c      	movs	r0, #12
}
   18640:	bd10      	pop	{r4, pc}
   18642:	bf00      	nop
   18644:	200095a4 	.word	0x200095a4
   18648:	2000942c 	.word	0x2000942c
   1864c:	2000a868 	.word	0x2000a868

00018650 <ll_wl_remove>:
{
   18650:	b538      	push	{r3, r4, r5, lr}
   18652:	4604      	mov	r4, r0
	if (ull_scan_filter_pol_get(0) & 0x1) {
   18654:	2000      	movs	r0, #0
   18656:	f7fc fa25 	bl	14aa4 <ull_scan_filter_pol_get>
   1865a:	f010 0501 	ands.w	r5, r0, #1
   1865e:	d125      	bne.n	186ac <ll_wl_remove+0x5c>
	if (addr->type == ADDR_TYPE_ANON) {
   18660:	7820      	ldrb	r0, [r4, #0]
   18662:	28ff      	cmp	r0, #255	; 0xff
   18664:	d01e      	beq.n	186a4 <ll_wl_remove+0x54>
	uint8_t i = wl_find(id_addr->type, id_addr->a.val, NULL);
   18666:	1c61      	adds	r1, r4, #1
   18668:	462a      	mov	r2, r5
   1866a:	f7ff ff07 	bl	1847c <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   1866e:	2807      	cmp	r0, #7
   18670:	d901      	bls.n	18676 <ll_wl_remove+0x26>
   18672:	2002      	movs	r0, #2
}
   18674:	bd38      	pop	{r3, r4, r5, pc}
		uint8_t j = wl[i].rl_idx;
   18676:	4a0e      	ldr	r2, [pc, #56]	; (186b0 <ll_wl_remove+0x60>)
   18678:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
   1867c:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   1867e:	2b07      	cmp	r3, #7
   18680:	d808      	bhi.n	18694 <ll_wl_remove+0x44>
			rl[j].wl = 0U;
   18682:	490c      	ldr	r1, [pc, #48]	; (186b4 <ll_wl_remove+0x64>)
   18684:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   18688:	f811 4033 	ldrb.w	r4, [r1, r3, lsl #3]
   1868c:	f365 1445 	bfi	r4, r5, #5, #1
   18690:	f801 4033 	strb.w	r4, [r1, r3, lsl #3]
		wl[i].taken = 0U;
   18694:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
   18698:	f36f 0300 	bfc	r3, #0, #1
   1869c:	f802 3030 	strb.w	r3, [r2, r0, lsl #3]
		return 0;
   186a0:	2000      	movs	r0, #0
}
   186a2:	bd38      	pop	{r3, r4, r5, pc}
		wl_anon = 0U;
   186a4:	4b04      	ldr	r3, [pc, #16]	; (186b8 <ll_wl_remove+0x68>)
   186a6:	701d      	strb	r5, [r3, #0]
		return 0;
   186a8:	4628      	mov	r0, r5
}
   186aa:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   186ac:	200c      	movs	r0, #12
}
   186ae:	bd38      	pop	{r3, r4, r5, pc}
   186b0:	200095a4 	.word	0x200095a4
   186b4:	2000942c 	.word	0x2000942c
   186b8:	2000a868 	.word	0x2000a868

000186bc <ll_rl_id_addr_get>:
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   186bc:	2807      	cmp	r0, #7
{
   186be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   186c2:	4604      	mov	r4, r0
   186c4:	460d      	mov	r5, r1
   186c6:	4690      	mov	r8, r2
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   186c8:	d817      	bhi.n	186fa <ll_rl_id_addr_get+0x3e>
	LL_ASSERT(rl[rl_idx].taken);
   186ca:	4e19      	ldr	r6, [pc, #100]	; (18730 <ll_rl_id_addr_get+0x74>)
   186cc:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   186d0:	00a7      	lsls	r7, r4, #2
   186d2:	f816 3033 	ldrb.w	r3, [r6, r3, lsl #3]
   186d6:	07db      	lsls	r3, r3, #31
   186d8:	d51c      	bpl.n	18714 <ll_rl_id_addr_get+0x58>
	*id_addr_type = rl[rl_idx].id_addr_type;
   186da:	4427      	add	r7, r4
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   186dc:	2128      	movs	r1, #40	; 0x28
	*id_addr_type = rl[rl_idx].id_addr_type;
   186de:	f816 3037 	ldrb.w	r3, [r6, r7, lsl #3]
   186e2:	f3c3 1380 	ubfx	r3, r3, #6, #1
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   186e6:	fb01 6104 	mla	r1, r1, r4, r6
	*id_addr_type = rl[rl_idx].id_addr_type;
   186ea:	702b      	strb	r3, [r5, #0]
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   186ec:	4640      	mov	r0, r8
   186ee:	3101      	adds	r1, #1
}
   186f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   186f4:	2206      	movs	r2, #6
   186f6:	f007 bbba 	b.w	1fe6e <memcpy>
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   186fa:	4a0e      	ldr	r2, [pc, #56]	; (18734 <ll_rl_id_addr_get+0x78>)
   186fc:	490e      	ldr	r1, [pc, #56]	; (18738 <ll_rl_id_addr_get+0x7c>)
   186fe:	480f      	ldr	r0, [pc, #60]	; (1873c <ll_rl_id_addr_get+0x80>)
   18700:	23e7      	movs	r3, #231	; 0xe7
   18702:	f005 fc22 	bl	1df4a <printk>
   18706:	4040      	eors	r0, r0
   18708:	f380 8811 	msr	BASEPRI, r0
   1870c:	f04f 0003 	mov.w	r0, #3
   18710:	df02      	svc	2
   18712:	e7da      	b.n	186ca <ll_rl_id_addr_get+0xe>
	LL_ASSERT(rl[rl_idx].taken);
   18714:	4a07      	ldr	r2, [pc, #28]	; (18734 <ll_rl_id_addr_get+0x78>)
   18716:	490a      	ldr	r1, [pc, #40]	; (18740 <ll_rl_id_addr_get+0x84>)
   18718:	4808      	ldr	r0, [pc, #32]	; (1873c <ll_rl_id_addr_get+0x80>)
   1871a:	23e8      	movs	r3, #232	; 0xe8
   1871c:	f005 fc15 	bl	1df4a <printk>
   18720:	4040      	eors	r0, r0
   18722:	f380 8811 	msr	BASEPRI, r0
   18726:	f04f 0003 	mov.w	r0, #3
   1872a:	df02      	svc	2
   1872c:	e7d5      	b.n	186da <ll_rl_id_addr_get+0x1e>
   1872e:	bf00      	nop
   18730:	2000942c 	.word	0x2000942c
   18734:	000246f8 	.word	0x000246f8
   18738:	0002473c 	.word	0x0002473c
   1873c:	00023fe4 	.word	0x00023fe4
   18740:	00024748 	.word	0x00024748

00018744 <ll_rl_size_get>:
   18744:	2008      	movs	r0, #8
   18746:	4770      	bx	lr

00018748 <ll_rl_clear>:
{
   18748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		(IS_ENABLED(CONFIG_BT_OBSERVER) && ull_scan_is_enabled(0)))
   1874a:	2000      	movs	r0, #0
   1874c:	f7fc f992 	bl	14a74 <ull_scan_is_enabled>
	if (!rl_access_check(false)) {
   18750:	bb98      	cbnz	r0, 187ba <ll_rl_clear+0x72>
		rl[i].taken = 0U;
   18752:	4b1b      	ldr	r3, [pc, #108]	; (187c0 <ll_rl_clear+0x78>)
	peer_irk_count = 0U;
   18754:	491b      	ldr	r1, [pc, #108]	; (187c4 <ll_rl_clear+0x7c>)
		rl[i].taken = 0U;
   18756:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
   1875a:	f893 c000 	ldrb.w	ip, [r3]
   1875e:	f893 7028 	ldrb.w	r7, [r3, #40]	; 0x28
   18762:	f893 6078 	ldrb.w	r6, [r3, #120]	; 0x78
   18766:	f893 50a0 	ldrb.w	r5, [r3, #160]	; 0xa0
   1876a:	f893 40c8 	ldrb.w	r4, [r3, #200]	; 0xc8
	peer_irk_count = 0U;
   1876e:	7008      	strb	r0, [r1, #0]
		rl[i].taken = 0U;
   18770:	f360 0200 	bfi	r2, r0, #0, #1
   18774:	f893 10f0 	ldrb.w	r1, [r3, #240]	; 0xf0
   18778:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
   1877c:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
   18780:	f360 0c00 	bfi	ip, r0, #0, #1
   18784:	f360 0700 	bfi	r7, r0, #0, #1
   18788:	f360 0600 	bfi	r6, r0, #0, #1
   1878c:	f360 0500 	bfi	r5, r0, #0, #1
   18790:	f360 0400 	bfi	r4, r0, #0, #1
   18794:	f360 0100 	bfi	r1, r0, #0, #1
   18798:	f360 0200 	bfi	r2, r0, #0, #1
   1879c:	f883 c000 	strb.w	ip, [r3]
   187a0:	f883 7028 	strb.w	r7, [r3, #40]	; 0x28
   187a4:	f883 6078 	strb.w	r6, [r3, #120]	; 0x78
   187a8:	f883 50a0 	strb.w	r5, [r3, #160]	; 0xa0
   187ac:	f883 40c8 	strb.w	r4, [r3, #200]	; 0xc8
   187b0:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
   187b4:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
}
   187b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   187ba:	200c      	movs	r0, #12
}
   187bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   187be:	bf00      	nop
   187c0:	2000942c 	.word	0x2000942c
   187c4:	2000a866 	.word	0x2000a866

000187c8 <ll_rl_enable>:
{
   187c8:	b510      	push	{r4, lr}
   187ca:	4604      	mov	r4, r0
		(IS_ENABLED(CONFIG_BT_OBSERVER) && ull_scan_is_enabled(0)))
   187cc:	2000      	movs	r0, #0
   187ce:	f7fc f951 	bl	14a74 <ull_scan_is_enabled>
	if (!rl_access_check(false)) {
   187d2:	b958      	cbnz	r0, 187ec <ll_rl_enable+0x24>
	switch (enable) {
   187d4:	b134      	cbz	r4, 187e4 <ll_rl_enable+0x1c>
   187d6:	2c01      	cmp	r4, #1
   187d8:	d001      	beq.n	187de <ll_rl_enable+0x16>
   187da:	2012      	movs	r0, #18
}
   187dc:	bd10      	pop	{r4, pc}
		rl_enable = 1U;
   187de:	4b04      	ldr	r3, [pc, #16]	; (187f0 <ll_rl_enable+0x28>)
   187e0:	701c      	strb	r4, [r3, #0]
}
   187e2:	bd10      	pop	{r4, pc}
		rl_enable = 0U;
   187e4:	4b02      	ldr	r3, [pc, #8]	; (187f0 <ll_rl_enable+0x28>)
   187e6:	701c      	strb	r4, [r3, #0]
	return 0;
   187e8:	4620      	mov	r0, r4
}
   187ea:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   187ec:	200c      	movs	r0, #12
}
   187ee:	bd10      	pop	{r4, pc}
   187f0:	2000a867 	.word	0x2000a867

000187f4 <ll_rl_timeout_set>:
	rpa_timeout_ms = timeout * 1000U;
   187f4:	4a03      	ldr	r2, [pc, #12]	; (18804 <ll_rl_timeout_set+0x10>)
   187f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   187fa:	fb03 f300 	mul.w	r3, r3, r0
   187fe:	6013      	str	r3, [r2, #0]
}
   18800:	4770      	bx	lr
   18802:	bf00      	nop
   18804:	200095a0 	.word	0x200095a0

00018808 <ull_filter_adv_scan_state_cb>:
	if (bm) {
   18808:	b1b0      	cbz	r0, 18838 <ull_filter_adv_scan_state_cb+0x30>
	k_delayed_work_submit(&rpa_work, K_MSEC(rpa_timeout_ms));
   1880a:	4b0d      	ldr	r3, [pc, #52]	; (18840 <ull_filter_adv_scan_state_cb+0x38>)
   1880c:	681a      	ldr	r2, [r3, #0]
{
   1880e:	b510      	push	{r4, lr}
   18810:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   18814:	f240 30e7 	movw	r0, #999	; 0x3e7
   18818:	2100      	movs	r1, #0
   1881a:	fbe3 0102 	umlal	r0, r1, r3, r2
   1881e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   18822:	2300      	movs	r3, #0
   18824:	f7e8 f90a 	bl	a3c <__aeabi_uldivmod>
}
   18828:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1882c:	4602      	mov	r2, r0
   1882e:	460b      	mov	r3, r1
   18830:	4804      	ldr	r0, [pc, #16]	; (18844 <ull_filter_adv_scan_state_cb+0x3c>)
   18832:	4905      	ldr	r1, [pc, #20]	; (18848 <ull_filter_adv_scan_state_cb+0x40>)
   18834:	f005 b8da 	b.w	1d9ec <k_delayed_work_submit_to_queue>
	k_delayed_work_cancel(&rpa_work);
   18838:	4803      	ldr	r0, [pc, #12]	; (18848 <ull_filter_adv_scan_state_cb+0x40>)
   1883a:	f00a bc61 	b.w	23100 <k_delayed_work_cancel>
   1883e:	bf00      	nop
   18840:	200095a0 	.word	0x200095a0
   18844:	20001c50 	.word	0x20001c50
   18848:	20001b20 	.word	0x20001b20

0001884c <ull_filter_scan_update>:
{
   1884c:	b508      	push	{r3, lr}
}

static void filter_clear(struct lll_filter *filter)
{
	filter->enable_bitmask = 0;
   1884e:	4b09      	ldr	r3, [pc, #36]	; (18874 <ull_filter_scan_update+0x28>)
   18850:	2200      	movs	r2, #0
   18852:	801a      	strh	r2, [r3, #0]
	if ((scan_fp & 0x1) &&
   18854:	07c3      	lsls	r3, r0, #31
   18856:	d406      	bmi.n	18866 <ull_filter_scan_update+0x1a>
	if (rl_enable &&
   18858:	4b07      	ldr	r3, [pc, #28]	; (18878 <ull_filter_scan_update+0x2c>)
	filter->enable_bitmask = 0;
   1885a:	4a08      	ldr	r2, [pc, #32]	; (1887c <ull_filter_scan_update+0x30>)
	if (rl_enable &&
   1885c:	781b      	ldrb	r3, [r3, #0]
	filter->enable_bitmask = 0;
   1885e:	2100      	movs	r1, #0
   18860:	8011      	strh	r1, [r2, #0]
	if (rl_enable &&
   18862:	b91b      	cbnz	r3, 1886c <ull_filter_scan_update+0x20>
}
   18864:	bd08      	pop	{r3, pc}
		wl_update();
   18866:	f7ff fe41 	bl	184ec <wl_update>
   1886a:	e7f5      	b.n	18858 <ull_filter_scan_update+0xc>
}
   1886c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		rl_update();
   18870:	f7ff be8a 	b.w	18588 <rl_update>
   18874:	200095e4 	.word	0x200095e4
   18878:	2000a867 	.word	0x2000a867
   1887c:	2000956c 	.word	0x2000956c

00018880 <ull_filter_rpa_update>:
{
   18880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18884:	4606      	mov	r6, r0
   18886:	b087      	sub	sp, #28
	return z_impl_k_uptime_ticks();
   18888:	f00a fc93 	bl	231b2 <z_impl_k_uptime_ticks>
   1888c:	0142      	lsls	r2, r0, #5
   1888e:	014b      	lsls	r3, r1, #5
   18890:	ebb2 0800 	subs.w	r8, r2, r0
   18894:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
   18898:	eb63 0301 	sbc.w	r3, r3, r1
   1889c:	009b      	lsls	r3, r3, #2
   1889e:	ea4f 0288 	mov.w	r2, r8, lsl #2
   188a2:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
   188a6:	eb12 0800 	adds.w	r8, r2, r0
   188aa:	eb43 0101 	adc.w	r1, r3, r1
   188ae:	00c9      	lsls	r1, r1, #3
   188b0:	ea41 7158 	orr.w	r1, r1, r8, lsr #29
   188b4:	ea4f 03c8 	mov.w	r3, r8, lsl #3
   188b8:	ea4f 38d3 	mov.w	r8, r3, lsr #15
   188bc:	0bc8      	lsrs	r0, r1, #15
   188be:	ea48 4841 	orr.w	r8, r8, r1, lsl #17
   188c2:	9001      	str	r0, [sp, #4]
	bool all = timeout || (rpa_last_ms == -1) ||
   188c4:	b9be      	cbnz	r6, 188f6 <ull_filter_rpa_update+0x76>
   188c6:	4b4b      	ldr	r3, [pc, #300]	; (189f4 <ull_filter_rpa_update+0x174>)
   188c8:	e9d3 2300 	ldrd	r2, r3, [r3]
   188cc:	1c5c      	adds	r4, r3, #1
   188ce:	bf08      	it	eq
   188d0:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   188d4:	d00f      	beq.n	188f6 <ull_filter_rpa_update+0x76>
		   (now - rpa_last_ms >= rpa_timeout_ms);
   188d6:	4948      	ldr	r1, [pc, #288]	; (189f8 <ull_filter_rpa_update+0x178>)
   188d8:	6809      	ldr	r1, [r1, #0]
   188da:	ebb8 0402 	subs.w	r4, r8, r2
   188de:	eb60 0503 	sbc.w	r5, r0, r3
   188e2:	2300      	movs	r3, #0
	bool all = timeout || (rpa_last_ms == -1) ||
   188e4:	428c      	cmp	r4, r1
   188e6:	eb75 0303 	sbcs.w	r3, r5, r3
   188ea:	bfac      	ite	ge
   188ec:	f04f 0901 	movge.w	r9, #1
   188f0:	f04f 0900 	movlt.w	r9, #0
   188f4:	e001      	b.n	188fa <ull_filter_rpa_update+0x7a>
   188f6:	f04f 0901 	mov.w	r9, #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   188fa:	4e40      	ldr	r6, [pc, #256]	; (189fc <ull_filter_rpa_update+0x17c>)
				LL_ASSERT(!err);
   188fc:	f8df b10c 	ldr.w	fp, [pc, #268]	; 18a0c <ull_filter_rpa_update+0x18c>
   18900:	f8df a10c 	ldr.w	sl, [pc, #268]	; 18a10 <ull_filter_rpa_update+0x190>
   18904:	f1a6 0724 	sub.w	r7, r6, #36	; 0x24
	bool all = timeout || (rpa_last_ms == -1) ||
   18908:	2400      	movs	r4, #0
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   1890a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1890e:	00a5      	lsls	r5, r4, #2
   18910:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   18914:	07d8      	lsls	r0, r3, #31
   18916:	d515      	bpl.n	18944 <ull_filter_rpa_update+0xc4>
   18918:	f1b9 0f00 	cmp.w	r9, #0
   1891c:	d101      	bne.n	18922 <ull_filter_rpa_update+0xa2>
   1891e:	0799      	lsls	r1, r3, #30
   18920:	d410      	bmi.n	18944 <ull_filter_rpa_update+0xc4>
			if (rl[i].pirk) {
   18922:	192b      	adds	r3, r5, r4
   18924:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   18928:	075a      	lsls	r2, r3, #29
   1892a:	d431      	bmi.n	18990 <ull_filter_rpa_update+0x110>
			if (rl[i].lirk) {
   1892c:	192b      	adds	r3, r5, r4
   1892e:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   18932:	071b      	lsls	r3, r3, #28
   18934:	d416      	bmi.n	18964 <ull_filter_rpa_update+0xe4>
			rl[i].rpas_ready = 1U;
   18936:	4425      	add	r5, r4
   18938:	f817 3035 	ldrb.w	r3, [r7, r5, lsl #3]
   1893c:	f043 0302 	orr.w	r3, r3, #2
   18940:	f807 3035 	strb.w	r3, [r7, r5, lsl #3]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   18944:	3401      	adds	r4, #1
   18946:	2c08      	cmp	r4, #8
   18948:	f106 0628 	add.w	r6, r6, #40	; 0x28
   1894c:	d1dd      	bne.n	1890a <ull_filter_rpa_update+0x8a>
	if (all) {
   1894e:	f1b9 0f00 	cmp.w	r9, #0
   18952:	d004      	beq.n	1895e <ull_filter_rpa_update+0xde>
		rpa_last_ms = now;
   18954:	4b27      	ldr	r3, [pc, #156]	; (189f4 <ull_filter_rpa_update+0x174>)
   18956:	9a01      	ldr	r2, [sp, #4]
   18958:	f8c3 8000 	str.w	r8, [r3]
   1895c:	605a      	str	r2, [r3, #4]
}
   1895e:	b007      	add	sp, #28
   18960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				err = bt_rpa_create(rl[i].local_irk, &rpa);
   18964:	a902      	add	r1, sp, #8
   18966:	f1a6 001d 	sub.w	r0, r6, #29
   1896a:	f007 fb03 	bl	1ff74 <bt_rpa_create>
				LL_ASSERT(!err);
   1896e:	2800      	cmp	r0, #0
   18970:	d132      	bne.n	189d8 <ull_filter_rpa_update+0x158>
				rl[i].local_rpa = &rpa;
   18972:	4a23      	ldr	r2, [pc, #140]	; (18a00 <ull_filter_rpa_update+0x180>)
   18974:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   18978:	eb02 0343 	add.w	r3, r2, r3, lsl #1
	memcpy(dst, src, sizeof(*dst));
   1897c:	a902      	add	r1, sp, #8
   1897e:	4618      	mov	r0, r3
   18980:	2206      	movs	r2, #6
   18982:	6031      	str	r1, [r6, #0]
   18984:	9300      	str	r3, [sp, #0]
   18986:	f007 fa72 	bl	1fe6e <memcpy>
				rl[i].local_rpa = &local_rpas[i];
   1898a:	9b00      	ldr	r3, [sp, #0]
   1898c:	6033      	str	r3, [r6, #0]
   1898e:	e7d2      	b.n	18936 <ull_filter_rpa_update+0xb6>
	psrc += length - 1;
   18990:	f816 3c0d 	ldrb.w	r3, [r6, #-13]
   18994:	4a1b      	ldr	r2, [pc, #108]	; (18a04 <ull_filter_rpa_update+0x184>)
   18996:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   1899a:	320f      	adds	r2, #15
	for (; length > 0; length--) {
   1899c:	f10d 0307 	add.w	r3, sp, #7
   189a0:	f10d 0017 	add.w	r0, sp, #23
		*pdst++ = *psrc--;
   189a4:	f812 1901 	ldrb.w	r1, [r2], #-1
   189a8:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
   189ac:	4283      	cmp	r3, r0
   189ae:	d1f9      	bne.n	189a4 <ull_filter_rpa_update+0x124>
				err = bt_rpa_create(irk, &rl[i].peer_rpa);
   189b0:	1fb1      	subs	r1, r6, #6
   189b2:	a802      	add	r0, sp, #8
   189b4:	f007 fade 	bl	1ff74 <bt_rpa_create>
				LL_ASSERT(!err);
   189b8:	2800      	cmp	r0, #0
   189ba:	d0b7      	beq.n	1892c <ull_filter_rpa_update+0xac>
   189bc:	4812      	ldr	r0, [pc, #72]	; (18a08 <ull_filter_rpa_update+0x188>)
   189be:	f44f 7305 	mov.w	r3, #532	; 0x214
   189c2:	465a      	mov	r2, fp
   189c4:	4651      	mov	r1, sl
   189c6:	f005 fac0 	bl	1df4a <printk>
   189ca:	4040      	eors	r0, r0
   189cc:	f380 8811 	msr	BASEPRI, r0
   189d0:	f04f 0003 	mov.w	r0, #3
   189d4:	df02      	svc	2
   189d6:	e7a9      	b.n	1892c <ull_filter_rpa_update+0xac>
				LL_ASSERT(!err);
   189d8:	480b      	ldr	r0, [pc, #44]	; (18a08 <ull_filter_rpa_update+0x188>)
   189da:	f240 2321 	movw	r3, #545	; 0x221
   189de:	465a      	mov	r2, fp
   189e0:	4651      	mov	r1, sl
   189e2:	f005 fab2 	bl	1df4a <printk>
   189e6:	4040      	eors	r0, r0
   189e8:	f380 8811 	msr	BASEPRI, r0
   189ec:	f04f 0003 	mov.w	r0, #3
   189f0:	df02      	svc	2
   189f2:	e7be      	b.n	18972 <ull_filter_rpa_update+0xf2>
   189f4:	20001b18 	.word	0x20001b18
   189f8:	200095a0 	.word	0x200095a0
   189fc:	20009450 	.word	0x20009450
   18a00:	20009374 	.word	0x20009374
   18a04:	200093ac 	.word	0x200093ac
   18a08:	00023fe4 	.word	0x00023fe4
   18a0c:	000246f8 	.word	0x000246f8
   18a10:	00024294 	.word	0x00024294

00018a14 <rpa_timeout>:
{
   18a14:	b510      	push	{r4, lr}
	ull_filter_rpa_update(true);
   18a16:	2001      	movs	r0, #1
   18a18:	f7ff ff32 	bl	18880 <ull_filter_rpa_update>
	k_delayed_work_submit(&rpa_work, K_MSEC(rpa_timeout_ms));
   18a1c:	4b0a      	ldr	r3, [pc, #40]	; (18a48 <rpa_timeout+0x34>)
   18a1e:	681a      	ldr	r2, [r3, #0]
   18a20:	f240 30e7 	movw	r0, #999	; 0x3e7
   18a24:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   18a28:	2100      	movs	r1, #0
   18a2a:	fbe3 0102 	umlal	r0, r1, r3, r2
   18a2e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   18a32:	2300      	movs	r3, #0
   18a34:	f7e8 f802 	bl	a3c <__aeabi_uldivmod>
}
   18a38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   18a3c:	4602      	mov	r2, r0
   18a3e:	460b      	mov	r3, r1
   18a40:	4802      	ldr	r0, [pc, #8]	; (18a4c <rpa_timeout+0x38>)
   18a42:	4903      	ldr	r1, [pc, #12]	; (18a50 <rpa_timeout+0x3c>)
   18a44:	f004 bfd2 	b.w	1d9ec <k_delayed_work_submit_to_queue>
   18a48:	200095a0 	.word	0x200095a0
   18a4c:	20001c50 	.word	0x20001c50
   18a50:	20001b20 	.word	0x20001b20

00018a54 <ull_filter_rl_find>:
{
   18a54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18a58:	468b      	mov	fp, r1
	if (free) {
   18a5a:	4616      	mov	r6, r2
   18a5c:	b10a      	cbz	r2, 18a62 <ull_filter_rl_find+0xe>
		*free = FILTER_IDX_NONE;
   18a5e:	23ff      	movs	r3, #255	; 0xff
   18a60:	7013      	strb	r3, [r2, #0]
   18a62:	f8df 8064 	ldr.w	r8, [pc, #100]	; 18ac8 <ull_filter_rl_find+0x74>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   18a66:	f000 0901 	and.w	r9, r0, #1
   18a6a:	f108 0a01 	add.w	sl, r8, #1
{
   18a6e:	2400      	movs	r4, #0
   18a70:	e004      	b.n	18a7c <ull_filter_rl_find+0x28>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   18a72:	454a      	cmp	r2, r9
   18a74:	d019      	beq.n	18aaa <ull_filter_rl_find+0x56>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   18a76:	3401      	adds	r4, #1
   18a78:	2c08      	cmp	r4, #8
   18a7a:	d012      	beq.n	18aa2 <ull_filter_rl_find+0x4e>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   18a7c:	eb04 0584 	add.w	r5, r4, r4, lsl #2
   18a80:	00e8      	lsls	r0, r5, #3
   18a82:	f818 3035 	ldrb.w	r3, [r8, r5, lsl #3]
   18a86:	07d9      	lsls	r1, r3, #31
   18a88:	f3c3 1280 	ubfx	r2, r3, #6, #1
   18a8c:	b2e7      	uxtb	r7, r4
   18a8e:	d4f0      	bmi.n	18a72 <ull_filter_rl_find+0x1e>
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   18a90:	2e00      	cmp	r6, #0
   18a92:	d0f0      	beq.n	18a76 <ull_filter_rl_find+0x22>
   18a94:	7833      	ldrb	r3, [r6, #0]
   18a96:	3401      	adds	r4, #1
   18a98:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   18a9a:	bf08      	it	eq
   18a9c:	7037      	strbeq	r7, [r6, #0]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   18a9e:	2c08      	cmp	r4, #8
   18aa0:	d1ec      	bne.n	18a7c <ull_filter_rl_find+0x28>
	return FILTER_IDX_NONE;
   18aa2:	27ff      	movs	r7, #255	; 0xff
}
   18aa4:	4638      	mov	r0, r7
   18aa6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   18aaa:	4450      	add	r0, sl
   18aac:	2206      	movs	r2, #6
   18aae:	4659      	mov	r1, fp
   18ab0:	f007 f9cd 	bl	1fe4e <memcmp>
   18ab4:	2800      	cmp	r0, #0
   18ab6:	d0f5      	beq.n	18aa4 <ull_filter_rl_find+0x50>
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   18ab8:	2e00      	cmp	r6, #0
   18aba:	d0dc      	beq.n	18a76 <ull_filter_rl_find+0x22>
   18abc:	f818 3035 	ldrb.w	r3, [r8, r5, lsl #3]
   18ac0:	07db      	lsls	r3, r3, #31
   18ac2:	d4d8      	bmi.n	18a76 <ull_filter_rl_find+0x22>
   18ac4:	e7e6      	b.n	18a94 <ull_filter_rl_find+0x40>
   18ac6:	bf00      	nop
   18ac8:	2000942c 	.word	0x2000942c

00018acc <ll_wl_add>:
{
   18acc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18ad0:	4605      	mov	r5, r0
   18ad2:	b082      	sub	sp, #8
	if (ull_scan_filter_pol_get(0) & 0x1) {
   18ad4:	2000      	movs	r0, #0
   18ad6:	f7fb ffe5 	bl	14aa4 <ull_scan_filter_pol_get>
   18ada:	f010 0401 	ands.w	r4, r0, #1
   18ade:	d13a      	bne.n	18b56 <ll_wl_add+0x8a>
	if (addr->type == ADDR_TYPE_ANON) {
   18ae0:	7828      	ldrb	r0, [r5, #0]
   18ae2:	28ff      	cmp	r0, #255	; 0xff
   18ae4:	d030      	beq.n	18b48 <ll_wl_add+0x7c>
	i = wl_find(id_addr->type, id_addr->a.val, &j);
   18ae6:	f105 0801 	add.w	r8, r5, #1
   18aea:	4641      	mov	r1, r8
   18aec:	f10d 0207 	add.w	r2, sp, #7
   18af0:	f7ff fcc4 	bl	1847c <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   18af4:	2807      	cmp	r0, #7
   18af6:	d923      	bls.n	18b40 <ll_wl_add+0x74>
	} else if (j >= ARRAY_SIZE(wl)) {
   18af8:	f89d 6007 	ldrb.w	r6, [sp, #7]
   18afc:	2e07      	cmp	r6, #7
   18afe:	d83b      	bhi.n	18b78 <ll_wl_add+0xac>
	wl[i].id_addr_type = id_addr->type & 0x1;
   18b00:	4f1f      	ldr	r7, [pc, #124]	; (18b80 <ll_wl_add+0xb4>)
   18b02:	782a      	ldrb	r2, [r5, #0]
   18b04:	f817 3036 	ldrb.w	r3, [r7, r6, lsl #3]
	bt_addr_copy(&wl[i].id_addr, &id_addr->a);
   18b08:	eb07 00c6 	add.w	r0, r7, r6, lsl #3
	wl[i].id_addr_type = id_addr->type & 0x1;
   18b0c:	f362 0341 	bfi	r3, r2, #1, #1
   18b10:	4641      	mov	r1, r8
   18b12:	2206      	movs	r2, #6
   18b14:	3002      	adds	r0, #2
   18b16:	f807 3036 	strb.w	r3, [r7, r6, lsl #3]
   18b1a:	f007 f9a8 	bl	1fe6e <memcpy>
	j = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   18b1e:	7828      	ldrb	r0, [r5, #0]
   18b20:	4622      	mov	r2, r4
   18b22:	4641      	mov	r1, r8
   18b24:	f7ff ff96 	bl	18a54 <ull_filter_rl_find>
	if (j < ARRAY_SIZE(rl)) {
   18b28:	2807      	cmp	r0, #7
   18b2a:	d918      	bls.n	18b5e <ll_wl_add+0x92>
		wl[i].rl_idx = FILTER_IDX_NONE;
   18b2c:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
   18b30:	22ff      	movs	r2, #255	; 0xff
   18b32:	705a      	strb	r2, [r3, #1]
	wl[i].taken = 1U;
   18b34:	f817 3036 	ldrb.w	r3, [r7, r6, lsl #3]
   18b38:	f043 0301 	orr.w	r3, r3, #1
   18b3c:	f807 3036 	strb.w	r3, [r7, r6, lsl #3]
	return 0;
   18b40:	2000      	movs	r0, #0
}
   18b42:	b002      	add	sp, #8
   18b44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		wl_anon = 1U;
   18b48:	4b0e      	ldr	r3, [pc, #56]	; (18b84 <ll_wl_add+0xb8>)
   18b4a:	2201      	movs	r2, #1
		return 0;
   18b4c:	4620      	mov	r0, r4
		wl_anon = 1U;
   18b4e:	701a      	strb	r2, [r3, #0]
}
   18b50:	b002      	add	sp, #8
   18b52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   18b56:	200c      	movs	r0, #12
}
   18b58:	b002      	add	sp, #8
   18b5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rl[j].wl = 1U;
   18b5e:	490a      	ldr	r1, [pc, #40]	; (18b88 <ll_wl_add+0xbc>)
   18b60:	eb00 0480 	add.w	r4, r0, r0, lsl #2
		wl[i].rl_idx = j;
   18b64:	eb07 02c6 	add.w	r2, r7, r6, lsl #3
		rl[j].wl = 1U;
   18b68:	f811 3034 	ldrb.w	r3, [r1, r4, lsl #3]
		wl[i].rl_idx = j;
   18b6c:	7050      	strb	r0, [r2, #1]
		rl[j].wl = 1U;
   18b6e:	f043 0320 	orr.w	r3, r3, #32
   18b72:	f801 3034 	strb.w	r3, [r1, r4, lsl #3]
   18b76:	e7dd      	b.n	18b34 <ll_wl_add+0x68>
   18b78:	2007      	movs	r0, #7
}
   18b7a:	b002      	add	sp, #8
   18b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18b80:	200095a4 	.word	0x200095a4
   18b84:	2000a868 	.word	0x2000a868
   18b88:	2000942c 	.word	0x2000942c

00018b8c <ll_rl_add>:
{
   18b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18b90:	4606      	mov	r6, r0
   18b92:	b085      	sub	sp, #20
		(IS_ENABLED(CONFIG_BT_OBSERVER) && ull_scan_is_enabled(0)))
   18b94:	2000      	movs	r0, #0
{
   18b96:	460d      	mov	r5, r1
   18b98:	4690      	mov	r8, r2
		(IS_ENABLED(CONFIG_BT_OBSERVER) && ull_scan_is_enabled(0)))
   18b9a:	f7fb ff6b 	bl	14a74 <ull_scan_is_enabled>
	if (!rl_access_check(false)) {
   18b9e:	2800      	cmp	r0, #0
   18ba0:	f040 8085 	bne.w	18cae <ll_rl_add+0x122>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, &j);
   18ba4:	46b1      	mov	r9, r6
   18ba6:	f10d 020f 	add.w	r2, sp, #15
   18baa:	f819 0b01 	ldrb.w	r0, [r9], #1
   18bae:	4649      	mov	r1, r9
   18bb0:	f7ff ff50 	bl	18a54 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   18bb4:	2807      	cmp	r0, #7
   18bb6:	f240 808b 	bls.w	18cd0 <ll_rl_add+0x144>
	} else if (j >= ARRAY_SIZE(rl)) {
   18bba:	f89d 700f 	ldrb.w	r7, [sp, #15]
   18bbe:	2f07      	cmp	r7, #7
   18bc0:	d879      	bhi.n	18cb6 <ll_rl_add+0x12a>
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   18bc2:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   18bc6:	4c4c      	ldr	r4, [pc, #304]	; (18cf8 <ll_rl_add+0x16c>)
   18bc8:	00db      	lsls	r3, r3, #3
   18bca:	1c58      	adds	r0, r3, #1
	rl[i].id_addr_type = id_addr->type & 0x1;
   18bcc:	eb07 0a87 	add.w	sl, r7, r7, lsl #2
   18bd0:	2206      	movs	r2, #6
   18bd2:	4649      	mov	r1, r9
   18bd4:	4420      	add	r0, r4
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   18bd6:	9301      	str	r3, [sp, #4]
   18bd8:	f007 f949 	bl	1fe6e <memcpy>
	rl[i].id_addr_type = id_addr->type & 0x1;
   18bdc:	7831      	ldrb	r1, [r6, #0]
   18bde:	f814 203a 	ldrb.w	r2, [r4, sl, lsl #3]
   18be2:	ea4f 0bca 	mov.w	fp, sl, lsl #3
   18be6:	f361 1286 	bfi	r2, r1, #6, #1
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   18bea:	4628      	mov	r0, r5
   18bec:	2110      	movs	r1, #16
	rl[i].id_addr_type = id_addr->type & 0x1;
   18bee:	f804 200b 	strb.w	r2, [r4, fp]
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   18bf2:	f7f7 fa2d 	bl	10050 <mem_nz>
   18bf6:	f814 200b 	ldrb.w	r2, [r4, fp]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   18bfa:	2110      	movs	r1, #16
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   18bfc:	f360 0282 	bfi	r2, r0, #2, #1
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   18c00:	4640      	mov	r0, r8
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   18c02:	f804 200b 	strb.w	r2, [r4, fp]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   18c06:	f7f7 fa23 	bl	10050 <mem_nz>
   18c0a:	f814 200b 	ldrb.w	r2, [r4, fp]
	if (rl[i].pirk) {
   18c0e:	9b01      	ldr	r3, [sp, #4]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   18c10:	f000 0001 	and.w	r0, r0, #1
   18c14:	f360 02c3 	bfi	r2, r0, #3, #1
	if (rl[i].pirk) {
   18c18:	f012 0f04 	tst.w	r2, #4
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   18c1c:	f804 200b 	strb.w	r2, [r4, fp]
	rl[i].id_addr_type = id_addr->type & 0x1;
   18c20:	eb04 0aca 	add.w	sl, r4, sl, lsl #3
   18c24:	ea4f 0b87 	mov.w	fp, r7, lsl #2
	if (rl[i].pirk) {
   18c28:	d01a      	beq.n	18c60 <ll_rl_add+0xd4>
		rl[i].pirk_idx = peer_irk_count;
   18c2a:	f8df e0d8 	ldr.w	lr, [pc, #216]	; 18d04 <ll_rl_add+0x178>
		peer_irk_rl_ids[peer_irk_count] = i;
   18c2e:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 18d08 <ll_rl_add+0x17c>
		rl[i].pirk_idx = peer_irk_count;
   18c32:	f89e 1000 	ldrb.w	r1, [lr]
   18c36:	4a31      	ldr	r2, [pc, #196]	; (18cfc <ll_rl_add+0x170>)
		peer_irk_rl_ids[peer_irk_count] = i;
   18c38:	f80c 7001 	strb.w	r7, [ip, r1]
		rl[i].pirk_idx = peer_irk_count;
   18c3c:	f88a 1017 	strb.w	r1, [sl, #23]
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, IRK_SIZE);
   18c40:	eb02 1c01 	add.w	ip, r2, r1, lsl #4
   18c44:	3101      	adds	r1, #1
	psrc += length - 1;
   18c46:	f105 020f 	add.w	r2, r5, #15
   18c4a:	f88e 1000 	strb.w	r1, [lr]
	for (; length > 0; length--) {
   18c4e:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   18c52:	3d01      	subs	r5, #1
		*pdst++ = *psrc--;
   18c54:	f812 1901 	ldrb.w	r1, [r2], #-1
   18c58:	f80c 1f01 	strb.w	r1, [ip, #1]!
	for (; length > 0; length--) {
   18c5c:	42aa      	cmp	r2, r5
   18c5e:	d1f9      	bne.n	18c54 <ll_rl_add+0xc8>
	if (rl[i].lirk) {
   18c60:	2800      	cmp	r0, #0
   18c62:	d139      	bne.n	18cd8 <ll_rl_add+0x14c>
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
   18c64:	f103 0018 	add.w	r0, r3, #24
   18c68:	2206      	movs	r2, #6
   18c6a:	2100      	movs	r1, #0
   18c6c:	4420      	add	r0, r4
   18c6e:	f007 f929 	bl	1fec4 <memset>
	rl[i].dev = 0U;
   18c72:	eb0b 0307 	add.w	r3, fp, r7
   18c76:	00dd      	lsls	r5, r3, #3
	rl[i].rpas_ready = 0U;
   18c78:	f814 3033 	ldrb.w	r3, [r4, r3, lsl #3]
   18c7c:	f023 0312 	bic.w	r3, r3, #18
   18c80:	5563      	strb	r3, [r4, r5]
	j = wl_find(id_addr->type, id_addr->a.val, NULL);
   18c82:	4649      	mov	r1, r9
   18c84:	7830      	ldrb	r0, [r6, #0]
   18c86:	2200      	movs	r2, #0
   18c88:	f7ff fbf8 	bl	1847c <wl_find>
	if (j < ARRAY_SIZE(wl)) {
   18c8c:	2807      	cmp	r0, #7
   18c8e:	d916      	bls.n	18cbe <ll_rl_add+0x132>
		rl[i].wl = 0U;
   18c90:	5d63      	ldrb	r3, [r4, r5]
   18c92:	f36f 1345 	bfc	r3, #5, #1
   18c96:	5563      	strb	r3, [r4, r5]
	rl[i].taken = 1U;
   18c98:	445f      	add	r7, fp
	return 0;
   18c9a:	2000      	movs	r0, #0
	rl[i].taken = 1U;
   18c9c:	f814 3037 	ldrb.w	r3, [r4, r7, lsl #3]
   18ca0:	f043 0301 	orr.w	r3, r3, #1
   18ca4:	f804 3037 	strb.w	r3, [r4, r7, lsl #3]
}
   18ca8:	b005      	add	sp, #20
   18caa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   18cae:	200c      	movs	r0, #12
}
   18cb0:	b005      	add	sp, #20
   18cb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   18cb6:	2007      	movs	r0, #7
}
   18cb8:	b005      	add	sp, #20
   18cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		wl[j].rl_idx = i;
   18cbe:	4a10      	ldr	r2, [pc, #64]	; (18d00 <ll_rl_add+0x174>)
		rl[i].wl = 1U;
   18cc0:	5d63      	ldrb	r3, [r4, r5]
		wl[j].rl_idx = i;
   18cc2:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
		rl[i].wl = 1U;
   18cc6:	f043 0320 	orr.w	r3, r3, #32
   18cca:	5563      	strb	r3, [r4, r5]
		wl[j].rl_idx = i;
   18ccc:	7047      	strb	r7, [r0, #1]
		rl[i].wl = 1U;
   18cce:	e7e3      	b.n	18c98 <ll_rl_add+0x10c>
		return BT_HCI_ERR_INVALID_PARAM;
   18cd0:	2012      	movs	r0, #18
}
   18cd2:	b005      	add	sp, #20
   18cd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memcpy(rl[i].local_irk, lirk, IRK_SIZE);
   18cd8:	1dd8      	adds	r0, r3, #7
   18cda:	4641      	mov	r1, r8
   18cdc:	2210      	movs	r2, #16
   18cde:	4420      	add	r0, r4
   18ce0:	9301      	str	r3, [sp, #4]
   18ce2:	f007 f8c4 	bl	1fe6e <memcpy>
		rl[i].local_rpa = NULL;
   18ce6:	eb0b 0207 	add.w	r2, fp, r7
   18cea:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
   18cee:	2100      	movs	r1, #0
   18cf0:	9b01      	ldr	r3, [sp, #4]
   18cf2:	6251      	str	r1, [r2, #36]	; 0x24
   18cf4:	e7b6      	b.n	18c64 <ll_rl_add+0xd8>
   18cf6:	bf00      	nop
   18cf8:	2000942c 	.word	0x2000942c
   18cfc:	200093ac 	.word	0x200093ac
   18d00:	200095a4 	.word	0x200095a4
   18d04:	2000a866 	.word	0x2000a866
   18d08:	200093a4 	.word	0x200093a4

00018d0c <ll_rl_remove>:
{
   18d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18d10:	4606      	mov	r6, r0
   18d12:	b083      	sub	sp, #12
		(IS_ENABLED(CONFIG_BT_OBSERVER) && ull_scan_is_enabled(0)))
   18d14:	2000      	movs	r0, #0
   18d16:	f7fb fead 	bl	14a74 <ull_scan_is_enabled>
	if (!rl_access_check(false)) {
   18d1a:	2800      	cmp	r0, #0
   18d1c:	d13e      	bne.n	18d9c <ll_rl_remove+0x90>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   18d1e:	4637      	mov	r7, r6
   18d20:	4602      	mov	r2, r0
   18d22:	4604      	mov	r4, r0
   18d24:	f817 0b01 	ldrb.w	r0, [r7], #1
   18d28:	4639      	mov	r1, r7
   18d2a:	f7ff fe93 	bl	18a54 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   18d2e:	2807      	cmp	r0, #7
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   18d30:	4605      	mov	r5, r0
	if (i < ARRAY_SIZE(rl)) {
   18d32:	d903      	bls.n	18d3c <ll_rl_remove+0x30>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   18d34:	2002      	movs	r0, #2
}
   18d36:	b003      	add	sp, #12
   18d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (rl[i].pirk) {
   18d3c:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 18e04 <ll_rl_remove+0xf8>
   18d40:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   18d44:	eb08 01c3 	add.w	r1, r8, r3, lsl #3
   18d48:	f818 3033 	ldrb.w	r3, [r8, r3, lsl #3]
   18d4c:	075b      	lsls	r3, r3, #29
   18d4e:	ea4f 0980 	mov.w	r9, r0, lsl #2
   18d52:	d50c      	bpl.n	18d6e <ll_rl_remove+0x62>
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   18d54:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 18e08 <ll_rl_remove+0xfc>
   18d58:	f89a 2000 	ldrb.w	r2, [sl]
   18d5c:	3a01      	subs	r2, #1
			if (pj && pi != pj) {
   18d5e:	f012 0bff 	ands.w	fp, r2, #255	; 0xff
   18d62:	d01f      	beq.n	18da4 <ll_rl_remove+0x98>
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   18d64:	7dcb      	ldrb	r3, [r1, #23]
			if (pj && pi != pj) {
   18d66:	455b      	cmp	r3, fp
   18d68:	d11e      	bne.n	18da8 <ll_rl_remove+0x9c>
			peer_irk_count--;
   18d6a:	f88a 2000 	strb.w	r2, [sl]
		j = wl_find(id_addr->type, id_addr->a.val, NULL);
   18d6e:	7830      	ldrb	r0, [r6, #0]
   18d70:	4639      	mov	r1, r7
   18d72:	2200      	movs	r2, #0
   18d74:	f7ff fb82 	bl	1847c <wl_find>
		if (j < ARRAY_SIZE(wl)) {
   18d78:	2807      	cmp	r0, #7
   18d7a:	d804      	bhi.n	18d86 <ll_rl_remove+0x7a>
			wl[j].rl_idx = FILTER_IDX_NONE;
   18d7c:	4b1e      	ldr	r3, [pc, #120]	; (18df8 <ll_rl_remove+0xec>)
   18d7e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   18d82:	23ff      	movs	r3, #255	; 0xff
   18d84:	7043      	strb	r3, [r0, #1]
		rl[i].taken = 0U;
   18d86:	444d      	add	r5, r9
		return 0;
   18d88:	2000      	movs	r0, #0
		rl[i].taken = 0U;
   18d8a:	f818 3035 	ldrb.w	r3, [r8, r5, lsl #3]
   18d8e:	f36f 0300 	bfc	r3, #0, #1
   18d92:	f808 3035 	strb.w	r3, [r8, r5, lsl #3]
}
   18d96:	b003      	add	sp, #12
   18d98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   18d9c:	200c      	movs	r0, #12
}
   18d9e:	b003      	add	sp, #12
   18da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18da4:	465a      	mov	r2, fp
   18da6:	e7e0      	b.n	18d6a <ll_rl_remove+0x5e>
				memcpy(peer_irks[pi], peer_irks[pj], IRK_SIZE);
   18da8:	4814      	ldr	r0, [pc, #80]	; (18dfc <ll_rl_remove+0xf0>)
   18daa:	9301      	str	r3, [sp, #4]
   18dac:	eb00 110b 	add.w	r1, r0, fp, lsl #4
   18db0:	2210      	movs	r2, #16
   18db2:	eb00 1003 	add.w	r0, r0, r3, lsl #4
   18db6:	f007 f85a 	bl	1fe6e <memcpy>
   18dba:	9b01      	ldr	r3, [sp, #4]
					if (rl[k].taken && rl[k].pirk &&
   18dbc:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   18dc0:	eb08 01c2 	add.w	r1, r8, r2, lsl #3
   18dc4:	f818 2032 	ldrb.w	r2, [r8, r2, lsl #3]
   18dc8:	f012 0f01 	tst.w	r2, #1
   18dcc:	b2e0      	uxtb	r0, r4
   18dce:	f104 0401 	add.w	r4, r4, #1
   18dd2:	d004      	beq.n	18dde <ll_rl_remove+0xd2>
   18dd4:	0752      	lsls	r2, r2, #29
   18dd6:	d502      	bpl.n	18dde <ll_rl_remove+0xd2>
   18dd8:	7dca      	ldrb	r2, [r1, #23]
   18dda:	455a      	cmp	r2, fp
   18ddc:	d005      	beq.n	18dea <ll_rl_remove+0xde>
				for (k = 0U;
   18dde:	2c08      	cmp	r4, #8
   18de0:	d1ec      	bne.n	18dbc <ll_rl_remove+0xb0>
   18de2:	f89a 2000 	ldrb.w	r2, [sl]
   18de6:	3a01      	subs	r2, #1
   18de8:	e7bf      	b.n	18d6a <ll_rl_remove+0x5e>
						peer_irk_rl_ids[pi] = k;
   18dea:	4c05      	ldr	r4, [pc, #20]	; (18e00 <ll_rl_remove+0xf4>)
   18dec:	f89a 2000 	ldrb.w	r2, [sl]
   18df0:	54e0      	strb	r0, [r4, r3]
						rl[k].pirk_idx = pi;
   18df2:	75cb      	strb	r3, [r1, #23]
						break;
   18df4:	3a01      	subs	r2, #1
   18df6:	e7b8      	b.n	18d6a <ll_rl_remove+0x5e>
   18df8:	200095a4 	.word	0x200095a4
   18dfc:	200093ac 	.word	0x200093ac
   18e00:	200093a4 	.word	0x200093a4
   18e04:	2000942c 	.word	0x2000942c
   18e08:	2000a866 	.word	0x2000a866

00018e0c <ll_rl_crpa_set>:
{
   18e0c:	b538      	push	{r3, r4, r5, lr}
   18e0e:	461c      	mov	r4, r3
	if ((crpa[5] & 0xc0) == 0x40) {
   18e10:	795b      	ldrb	r3, [r3, #5]
   18e12:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   18e16:	2b40      	cmp	r3, #64	; 0x40
   18e18:	d000      	beq.n	18e1c <ll_rl_crpa_set+0x10>
}
   18e1a:	bd38      	pop	{r3, r4, r5, pc}
		if (id_addr) {
   18e1c:	b119      	cbz	r1, 18e26 <ll_rl_crpa_set+0x1a>
			rl_idx = ull_filter_rl_find(id_addr_type, id_addr, NULL);
   18e1e:	2200      	movs	r2, #0
   18e20:	f7ff fe18 	bl	18a54 <ull_filter_rl_find>
   18e24:	4602      	mov	r2, r0
		if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].taken) {
   18e26:	2a07      	cmp	r2, #7
   18e28:	d8f7      	bhi.n	18e1a <ll_rl_crpa_set+0xe>
   18e2a:	4b09      	ldr	r3, [pc, #36]	; (18e50 <ll_rl_crpa_set+0x44>)
   18e2c:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   18e30:	f813 1031 	ldrb.w	r1, [r3, r1, lsl #3]
   18e34:	07c9      	lsls	r1, r1, #31
   18e36:	d5f0      	bpl.n	18e1a <ll_rl_crpa_set+0xe>
			memcpy(rl[rl_idx].curr_rpa.val, crpa,
   18e38:	2118      	movs	r1, #24
   18e3a:	2028      	movs	r0, #40	; 0x28
   18e3c:	fb10 1002 	smlabb	r0, r0, r2, r1
   18e40:	4418      	add	r0, r3
   18e42:	4621      	mov	r1, r4
   18e44:	2206      	movs	r2, #6
}
   18e46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			memcpy(rl[rl_idx].curr_rpa.val, crpa,
   18e4a:	f007 b810 	b.w	1fe6e <memcpy>
   18e4e:	bf00      	nop
   18e50:	2000942c 	.word	0x2000942c

00018e54 <ll_rl_crpa_get>:
{
   18e54:	b538      	push	{r3, r4, r5, lr}
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   18e56:	4603      	mov	r3, r0
{
   18e58:	460d      	mov	r5, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   18e5a:	f813 0b01 	ldrb.w	r0, [r3], #1
   18e5e:	2200      	movs	r2, #0
   18e60:	4619      	mov	r1, r3
   18e62:	f7ff fdf7 	bl	18a54 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl) &&
   18e66:	2807      	cmp	r0, #7
   18e68:	d901      	bls.n	18e6e <ll_rl_crpa_get+0x1a>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   18e6a:	2002      	movs	r0, #2
}
   18e6c:	bd38      	pop	{r3, r4, r5, pc}
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
   18e6e:	4c09      	ldr	r4, [pc, #36]	; (18e94 <ll_rl_crpa_get+0x40>)
   18e70:	2328      	movs	r3, #40	; 0x28
   18e72:	2218      	movs	r2, #24
   18e74:	fb13 2000 	smlabb	r0, r3, r0, r2
   18e78:	4404      	add	r4, r0
   18e7a:	4620      	mov	r0, r4
   18e7c:	2106      	movs	r1, #6
   18e7e:	f7f7 f8e7 	bl	10050 <mem_nz>
	if (i < ARRAY_SIZE(rl) &&
   18e82:	2800      	cmp	r0, #0
   18e84:	d0f1      	beq.n	18e6a <ll_rl_crpa_get+0x16>
   18e86:	4621      	mov	r1, r4
   18e88:	4628      	mov	r0, r5
   18e8a:	2206      	movs	r2, #6
   18e8c:	f006 ffef 	bl	1fe6e <memcpy>
		return 0;
   18e90:	2000      	movs	r0, #0
}
   18e92:	bd38      	pop	{r3, r4, r5, pc}
   18e94:	2000942c 	.word	0x2000942c

00018e98 <ll_rl_lrpa_get>:
{
   18e98:	b510      	push	{r4, lr}
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   18e9a:	4603      	mov	r3, r0
{
   18e9c:	460c      	mov	r4, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   18e9e:	f813 0b01 	ldrb.w	r0, [r3], #1
   18ea2:	2200      	movs	r2, #0
   18ea4:	4619      	mov	r1, r3
   18ea6:	f7ff fdd5 	bl	18a54 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   18eaa:	2807      	cmp	r0, #7
   18eac:	d901      	bls.n	18eb2 <ll_rl_lrpa_get+0x1a>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   18eae:	2002      	movs	r0, #2
}
   18eb0:	bd10      	pop	{r4, pc}
		bt_addr_copy(lrpa, rl[i].local_rpa);
   18eb2:	4b06      	ldr	r3, [pc, #24]	; (18ecc <ll_rl_lrpa_get+0x34>)
   18eb4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   18eb8:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
   18ebc:	2206      	movs	r2, #6
   18ebe:	6a59      	ldr	r1, [r3, #36]	; 0x24
   18ec0:	4620      	mov	r0, r4
   18ec2:	f006 ffd4 	bl	1fe6e <memcpy>
		return 0;
   18ec6:	2000      	movs	r0, #0
}
   18ec8:	bd10      	pop	{r4, pc}
   18eca:	bf00      	nop
   18ecc:	2000942c 	.word	0x2000942c

00018ed0 <ll_priv_mode_set>:
{
   18ed0:	b570      	push	{r4, r5, r6, lr}
   18ed2:	4605      	mov	r5, r0
		(IS_ENABLED(CONFIG_BT_OBSERVER) && ull_scan_is_enabled(0)))
   18ed4:	2000      	movs	r0, #0
{
   18ed6:	460e      	mov	r6, r1
		(IS_ENABLED(CONFIG_BT_OBSERVER) && ull_scan_is_enabled(0)))
   18ed8:	f7fb fdcc 	bl	14a74 <ull_scan_is_enabled>
	if (!rl_access_check(false)) {
   18edc:	b968      	cbnz	r0, 18efa <ll_priv_mode_set+0x2a>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   18ede:	4629      	mov	r1, r5
   18ee0:	4602      	mov	r2, r0
   18ee2:	4604      	mov	r4, r0
   18ee4:	f811 0b01 	ldrb.w	r0, [r1], #1
   18ee8:	f7ff fdb4 	bl	18a54 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   18eec:	2807      	cmp	r0, #7
   18eee:	d81c      	bhi.n	18f2a <ll_priv_mode_set+0x5a>
		switch (mode) {
   18ef0:	b186      	cbz	r6, 18f14 <ll_priv_mode_set+0x44>
   18ef2:	2e01      	cmp	r6, #1
   18ef4:	d003      	beq.n	18efe <ll_priv_mode_set+0x2e>
   18ef6:	2012      	movs	r0, #18
}
   18ef8:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   18efa:	200c      	movs	r0, #12
}
   18efc:	bd70      	pop	{r4, r5, r6, pc}
			rl[i].dev = 1U;
   18efe:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   18f02:	490b      	ldr	r1, [pc, #44]	; (18f30 <ll_priv_mode_set+0x60>)
   18f04:	f811 2033 	ldrb.w	r2, [r1, r3, lsl #3]
   18f08:	f042 0210 	orr.w	r2, r2, #16
   18f0c:	f801 2033 	strb.w	r2, [r1, r3, lsl #3]
	return 0;
   18f10:	4620      	mov	r0, r4
}
   18f12:	bd70      	pop	{r4, r5, r6, pc}
			rl[i].dev = 0U;
   18f14:	4b06      	ldr	r3, [pc, #24]	; (18f30 <ll_priv_mode_set+0x60>)
   18f16:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   18f1a:	f813 2030 	ldrb.w	r2, [r3, r0, lsl #3]
   18f1e:	f366 1204 	bfi	r2, r6, #4, #1
   18f22:	f803 2030 	strb.w	r2, [r3, r0, lsl #3]
	return 0;
   18f26:	4630      	mov	r0, r6
}
   18f28:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   18f2a:	2002      	movs	r0, #2
}
   18f2c:	bd70      	pop	{r4, r5, r6, pc}
   18f2e:	bf00      	nop
   18f30:	2000942c 	.word	0x2000942c

00018f34 <ull_filter_reset>:
	wl_anon = 0U;
   18f34:	4a31      	ldr	r2, [pc, #196]	; (18ffc <ull_filter_reset+0xc8>)
   18f36:	4932      	ldr	r1, [pc, #200]	; (19000 <ull_filter_reset+0xcc>)
{
   18f38:	b4f0      	push	{r4, r5, r6, r7}
	wl_anon = 0U;
   18f3a:	2300      	movs	r3, #0
   18f3c:	4c31      	ldr	r4, [pc, #196]	; (19004 <ull_filter_reset+0xd0>)
   18f3e:	7013      	strb	r3, [r2, #0]
		uint8_t j = wl[i].rl_idx;
   18f40:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   18f44:	7852      	ldrb	r2, [r2, #1]
		if (j < ARRAY_SIZE(rl)) {
   18f46:	2a07      	cmp	r2, #7
			rl[j].wl = 0U;
   18f48:	eb02 0582 	add.w	r5, r2, r2, lsl #2
		if (j < ARRAY_SIZE(rl)) {
   18f4c:	d805      	bhi.n	18f5a <ull_filter_reset+0x26>
			rl[j].wl = 0U;
   18f4e:	f811 2035 	ldrb.w	r2, [r1, r5, lsl #3]
   18f52:	f36f 1245 	bfc	r2, #5, #1
   18f56:	f801 2035 	strb.w	r2, [r1, r5, lsl #3]
		wl[i].taken = 0U;
   18f5a:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   18f5e:	f36f 0200 	bfc	r2, #0, #1
   18f62:	f804 2033 	strb.w	r2, [r4, r3, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   18f66:	3301      	adds	r3, #1
   18f68:	2b08      	cmp	r3, #8
   18f6a:	d1e9      	bne.n	18f40 <ull_filter_reset+0xc>
		rl[i].taken = 0U;
   18f6c:	780f      	ldrb	r7, [r1, #0]
   18f6e:	f891 5028 	ldrb.w	r5, [r1, #40]	; 0x28
   18f72:	f891 4050 	ldrb.w	r4, [r1, #80]	; 0x50
   18f76:	f891 2078 	ldrb.w	r2, [r1, #120]	; 0x78
   18f7a:	f891 60a0 	ldrb.w	r6, [r1, #160]	; 0xa0
	rl_enable = 0U;
   18f7e:	2300      	movs	r3, #0
		rl[i].taken = 0U;
   18f80:	f363 0700 	bfi	r7, r3, #0, #1
   18f84:	700f      	strb	r7, [r1, #0]
	rl_enable = 0U;
   18f86:	4f20      	ldr	r7, [pc, #128]	; (19008 <ull_filter_reset+0xd4>)
		rl[i].taken = 0U;
   18f88:	f363 0500 	bfi	r5, r3, #0, #1
   18f8c:	f363 0400 	bfi	r4, r3, #0, #1
   18f90:	f363 0200 	bfi	r2, r3, #0, #1
	rl_enable = 0U;
   18f94:	703b      	strb	r3, [r7, #0]
		rl[i].taken = 0U;
   18f96:	f881 5028 	strb.w	r5, [r1, #40]	; 0x28
	peer_irk_count = 0U;
   18f9a:	4f1c      	ldr	r7, [pc, #112]	; (1900c <ull_filter_reset+0xd8>)
		rl[i].taken = 0U;
   18f9c:	f891 50c8 	ldrb.w	r5, [r1, #200]	; 0xc8
   18fa0:	f881 4050 	strb.w	r4, [r1, #80]	; 0x50
   18fa4:	f881 2078 	strb.w	r2, [r1, #120]	; 0x78
   18fa8:	f891 40f0 	ldrb.w	r4, [r1, #240]	; 0xf0
   18fac:	f891 2118 	ldrb.w	r2, [r1, #280]	; 0x118
	peer_irk_count = 0U;
   18fb0:	703b      	strb	r3, [r7, #0]
		rl[i].taken = 0U;
   18fb2:	f363 0600 	bfi	r6, r3, #0, #1
   18fb6:	f363 0500 	bfi	r5, r3, #0, #1
   18fba:	f363 0400 	bfi	r4, r3, #0, #1
   18fbe:	f363 0200 	bfi	r2, r3, #0, #1
   18fc2:	f881 60a0 	strb.w	r6, [r1, #160]	; 0xa0
	rpa_last_ms = -1;
   18fc6:	4b12      	ldr	r3, [pc, #72]	; (19010 <ull_filter_reset+0xdc>)
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   18fc8:	4e12      	ldr	r6, [pc, #72]	; (19014 <ull_filter_reset+0xe0>)
   18fca:	4f13      	ldr	r7, [pc, #76]	; (19018 <ull_filter_reset+0xe4>)
		rl[i].taken = 0U;
   18fcc:	f881 50c8 	strb.w	r5, [r1, #200]	; 0xc8
   18fd0:	f881 40f0 	strb.w	r4, [r1, #240]	; 0xf0
	rpa_last_ms = -1;
   18fd4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   18fd8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   18fdc:	e9c3 4500 	strd	r4, r5, [r3]
		rl[i].taken = 0U;
   18fe0:	f881 2118 	strb.w	r2, [r1, #280]	; 0x118
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   18fe4:	6037      	str	r7, [r6, #0]
	if (init) {
   18fe6:	b120      	cbz	r0, 18ff2 <ull_filter_reset+0xbe>
}
   18fe8:	bcf0      	pop	{r4, r5, r6, r7}
		k_delayed_work_init(&rpa_work, rpa_timeout);
   18fea:	490c      	ldr	r1, [pc, #48]	; (1901c <ull_filter_reset+0xe8>)
   18fec:	480c      	ldr	r0, [pc, #48]	; (19020 <ull_filter_reset+0xec>)
   18fee:	f00a b87f 	b.w	230f0 <k_delayed_work_init>
}
   18ff2:	bcf0      	pop	{r4, r5, r6, r7}
		k_delayed_work_cancel(&rpa_work);
   18ff4:	480a      	ldr	r0, [pc, #40]	; (19020 <ull_filter_reset+0xec>)
   18ff6:	f00a b883 	b.w	23100 <k_delayed_work_cancel>
   18ffa:	bf00      	nop
   18ffc:	2000a868 	.word	0x2000a868
   19000:	2000942c 	.word	0x2000942c
   19004:	200095a4 	.word	0x200095a4
   19008:	2000a867 	.word	0x2000a867
   1900c:	2000a866 	.word	0x2000a866
   19010:	20001b18 	.word	0x20001b18
   19014:	200095a0 	.word	0x200095a0
   19018:	000dbba0 	.word	0x000dbba0
   1901c:	00018a15 	.word	0x00018a15
   19020:	20001b20 	.word	0x20001b20

00019024 <ull_filter_lll_lrpa_get>:
	if ((rl_idx >= ARRAY_SIZE(rl)) || !rl[rl_idx].lirk ||
   19024:	2807      	cmp	r0, #7
   19026:	d80d      	bhi.n	19044 <ull_filter_lll_lrpa_get+0x20>
   19028:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1902c:	4906      	ldr	r1, [pc, #24]	; (19048 <ull_filter_lll_lrpa_get+0x24>)
   1902e:	f811 3030 	ldrb.w	r3, [r1, r0, lsl #3]
   19032:	071a      	lsls	r2, r3, #28
   19034:	ea4f 00c0 	mov.w	r0, r0, lsl #3
   19038:	d504      	bpl.n	19044 <ull_filter_lll_lrpa_get+0x20>
   1903a:	079b      	lsls	r3, r3, #30
   1903c:	d502      	bpl.n	19044 <ull_filter_lll_lrpa_get+0x20>
	return rl[rl_idx].local_rpa;
   1903e:	4408      	add	r0, r1
   19040:	6a40      	ldr	r0, [r0, #36]	; 0x24
   19042:	4770      	bx	lr
		return NULL;
   19044:	2000      	movs	r0, #0
   19046:	4770      	bx	lr
   19048:	2000942c 	.word	0x2000942c

0001904c <ull_filter_lll_irks_get>:
	*count = peer_irk_count;
   1904c:	4b02      	ldr	r3, [pc, #8]	; (19058 <ull_filter_lll_irks_get+0xc>)
   1904e:	781b      	ldrb	r3, [r3, #0]
   19050:	7003      	strb	r3, [r0, #0]
}
   19052:	4802      	ldr	r0, [pc, #8]	; (1905c <ull_filter_lll_irks_get+0x10>)
   19054:	4770      	bx	lr
   19056:	bf00      	nop
   19058:	2000a866 	.word	0x2000a866
   1905c:	200093ac 	.word	0x200093ac

00019060 <ull_filter_lll_rl_idx>:
{
   19060:	b538      	push	{r3, r4, r5, lr}
   19062:	460c      	mov	r4, r1
	if (whitelist) {
   19064:	b150      	cbz	r0, 1907c <ull_filter_lll_rl_idx+0x1c>
		LL_ASSERT(devmatch_id < ARRAY_SIZE(wl));
   19066:	2907      	cmp	r1, #7
   19068:	d822      	bhi.n	190b0 <ull_filter_lll_rl_idx+0x50>
		LL_ASSERT(wl[devmatch_id].taken);
   1906a:	4d2a      	ldr	r5, [pc, #168]	; (19114 <ull_filter_lll_rl_idx+0xb4>)
   1906c:	f815 3034 	ldrb.w	r3, [r5, r4, lsl #3]
   19070:	07da      	lsls	r2, r3, #31
   19072:	d52f      	bpl.n	190d4 <ull_filter_lll_rl_idx+0x74>
		i = wl[devmatch_id].rl_idx;
   19074:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
   19078:	7860      	ldrb	r0, [r4, #1]
}
   1907a:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
   1907c:	2907      	cmp	r1, #7
   1907e:	d83a      	bhi.n	190f6 <ull_filter_lll_rl_idx+0x96>
		LL_ASSERT(rl[i].taken);
   19080:	4b25      	ldr	r3, [pc, #148]	; (19118 <ull_filter_lll_rl_idx+0xb8>)
   19082:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   19086:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
   1908a:	07db      	lsls	r3, r3, #31
   1908c:	d501      	bpl.n	19092 <ull_filter_lll_rl_idx+0x32>
   1908e:	4620      	mov	r0, r4
}
   19090:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(rl[i].taken);
   19092:	4a22      	ldr	r2, [pc, #136]	; (1911c <ull_filter_lll_rl_idx+0xbc>)
   19094:	4922      	ldr	r1, [pc, #136]	; (19120 <ull_filter_lll_rl_idx+0xc0>)
   19096:	4823      	ldr	r0, [pc, #140]	; (19124 <ull_filter_lll_rl_idx+0xc4>)
   19098:	f240 23bb 	movw	r3, #699	; 0x2bb
   1909c:	f004 ff55 	bl	1df4a <printk>
   190a0:	4040      	eors	r0, r0
   190a2:	f380 8811 	msr	BASEPRI, r0
   190a6:	f04f 0003 	mov.w	r0, #3
   190aa:	df02      	svc	2
   190ac:	4620      	mov	r0, r4
}
   190ae:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(devmatch_id < ARRAY_SIZE(wl));
   190b0:	4a1a      	ldr	r2, [pc, #104]	; (1911c <ull_filter_lll_rl_idx+0xbc>)
   190b2:	491d      	ldr	r1, [pc, #116]	; (19128 <ull_filter_lll_rl_idx+0xc8>)
   190b4:	481b      	ldr	r0, [pc, #108]	; (19124 <ull_filter_lll_rl_idx+0xc4>)
   190b6:	f240 23b5 	movw	r3, #693	; 0x2b5
   190ba:	f004 ff46 	bl	1df4a <printk>
   190be:	4040      	eors	r0, r0
   190c0:	f380 8811 	msr	BASEPRI, r0
   190c4:	f04f 0003 	mov.w	r0, #3
   190c8:	df02      	svc	2
		LL_ASSERT(wl[devmatch_id].taken);
   190ca:	4d12      	ldr	r5, [pc, #72]	; (19114 <ull_filter_lll_rl_idx+0xb4>)
   190cc:	f815 3034 	ldrb.w	r3, [r5, r4, lsl #3]
   190d0:	07da      	lsls	r2, r3, #31
   190d2:	d4cf      	bmi.n	19074 <ull_filter_lll_rl_idx+0x14>
   190d4:	4a11      	ldr	r2, [pc, #68]	; (1911c <ull_filter_lll_rl_idx+0xbc>)
   190d6:	4915      	ldr	r1, [pc, #84]	; (1912c <ull_filter_lll_rl_idx+0xcc>)
   190d8:	4812      	ldr	r0, [pc, #72]	; (19124 <ull_filter_lll_rl_idx+0xc4>)
   190da:	f240 23b6 	movw	r3, #694	; 0x2b6
   190de:	f004 ff34 	bl	1df4a <printk>
   190e2:	4040      	eors	r0, r0
   190e4:	f380 8811 	msr	BASEPRI, r0
   190e8:	f04f 0003 	mov.w	r0, #3
   190ec:	df02      	svc	2
		i = wl[devmatch_id].rl_idx;
   190ee:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
   190f2:	7860      	ldrb	r0, [r4, #1]
   190f4:	e7c1      	b.n	1907a <ull_filter_lll_rl_idx+0x1a>
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
   190f6:	4a09      	ldr	r2, [pc, #36]	; (1911c <ull_filter_lll_rl_idx+0xbc>)
   190f8:	490d      	ldr	r1, [pc, #52]	; (19130 <ull_filter_lll_rl_idx+0xd0>)
   190fa:	480a      	ldr	r0, [pc, #40]	; (19124 <ull_filter_lll_rl_idx+0xc4>)
   190fc:	f240 23b9 	movw	r3, #697	; 0x2b9
   19100:	f004 ff23 	bl	1df4a <printk>
   19104:	4040      	eors	r0, r0
   19106:	f380 8811 	msr	BASEPRI, r0
   1910a:	f04f 0003 	mov.w	r0, #3
   1910e:	df02      	svc	2
   19110:	e7b6      	b.n	19080 <ull_filter_lll_rl_idx+0x20>
   19112:	bf00      	nop
   19114:	200095a4 	.word	0x200095a4
   19118:	2000942c 	.word	0x2000942c
   1911c:	000246f8 	.word	0x000246f8
   19120:	000248bc 	.word	0x000248bc
   19124:	00023fe4 	.word	0x00023fe4
   19128:	0002475c 	.word	0x0002475c
   1912c:	00024800 	.word	0x00024800
   19130:	00024818 	.word	0x00024818

00019134 <ull_filter_lll_rl_irk_idx>:
{
   19134:	b510      	push	{r4, lr}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   19136:	4b20      	ldr	r3, [pc, #128]	; (191b8 <ull_filter_lll_rl_irk_idx+0x84>)
   19138:	781b      	ldrb	r3, [r3, #0]
   1913a:	4283      	cmp	r3, r0
{
   1913c:	4604      	mov	r4, r0
	LL_ASSERT(irkmatch_id < peer_irk_count);
   1913e:	d90c      	bls.n	1915a <ull_filter_lll_rl_irk_idx+0x26>
	i = peer_irk_rl_ids[irkmatch_id];
   19140:	4b1e      	ldr	r3, [pc, #120]	; (191bc <ull_filter_lll_rl_irk_idx+0x88>)
   19142:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   19144:	2c07      	cmp	r4, #7
   19146:	d819      	bhi.n	1917c <ull_filter_lll_rl_irk_idx+0x48>
	LL_ASSERT(rl[i].taken);
   19148:	4b1d      	ldr	r3, [pc, #116]	; (191c0 <ull_filter_lll_rl_irk_idx+0x8c>)
   1914a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1914e:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
   19152:	07db      	lsls	r3, r3, #31
   19154:	d520      	bpl.n	19198 <ull_filter_lll_rl_irk_idx+0x64>
}
   19156:	4620      	mov	r0, r4
   19158:	bd10      	pop	{r4, pc}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   1915a:	4a1a      	ldr	r2, [pc, #104]	; (191c4 <ull_filter_lll_rl_irk_idx+0x90>)
   1915c:	491a      	ldr	r1, [pc, #104]	; (191c8 <ull_filter_lll_rl_irk_idx+0x94>)
   1915e:	481b      	ldr	r0, [pc, #108]	; (191cc <ull_filter_lll_rl_irk_idx+0x98>)
   19160:	f240 23c5 	movw	r3, #709	; 0x2c5
   19164:	f004 fef1 	bl	1df4a <printk>
   19168:	4040      	eors	r0, r0
   1916a:	f380 8811 	msr	BASEPRI, r0
   1916e:	f04f 0003 	mov.w	r0, #3
   19172:	df02      	svc	2
	i = peer_irk_rl_ids[irkmatch_id];
   19174:	4b11      	ldr	r3, [pc, #68]	; (191bc <ull_filter_lll_rl_irk_idx+0x88>)
   19176:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   19178:	2c07      	cmp	r4, #7
   1917a:	d9e5      	bls.n	19148 <ull_filter_lll_rl_irk_idx+0x14>
   1917c:	4a11      	ldr	r2, [pc, #68]	; (191c4 <ull_filter_lll_rl_irk_idx+0x90>)
   1917e:	4914      	ldr	r1, [pc, #80]	; (191d0 <ull_filter_lll_rl_irk_idx+0x9c>)
   19180:	4812      	ldr	r0, [pc, #72]	; (191cc <ull_filter_lll_rl_irk_idx+0x98>)
   19182:	f240 23c7 	movw	r3, #711	; 0x2c7
   19186:	f004 fee0 	bl	1df4a <printk>
   1918a:	4040      	eors	r0, r0
   1918c:	f380 8811 	msr	BASEPRI, r0
   19190:	f04f 0003 	mov.w	r0, #3
   19194:	df02      	svc	2
   19196:	e7d7      	b.n	19148 <ull_filter_lll_rl_irk_idx+0x14>
	LL_ASSERT(rl[i].taken);
   19198:	4a0a      	ldr	r2, [pc, #40]	; (191c4 <ull_filter_lll_rl_irk_idx+0x90>)
   1919a:	490e      	ldr	r1, [pc, #56]	; (191d4 <ull_filter_lll_rl_irk_idx+0xa0>)
   1919c:	480b      	ldr	r0, [pc, #44]	; (191cc <ull_filter_lll_rl_irk_idx+0x98>)
   1919e:	f44f 7332 	mov.w	r3, #712	; 0x2c8
   191a2:	f004 fed2 	bl	1df4a <printk>
   191a6:	4040      	eors	r0, r0
   191a8:	f380 8811 	msr	BASEPRI, r0
   191ac:	f04f 0003 	mov.w	r0, #3
   191b0:	df02      	svc	2
}
   191b2:	4620      	mov	r0, r4
   191b4:	bd10      	pop	{r4, pc}
   191b6:	bf00      	nop
   191b8:	2000a866 	.word	0x2000a866
   191bc:	200093a4 	.word	0x200093a4
   191c0:	2000942c 	.word	0x2000942c
   191c4:	000246f8 	.word	0x000246f8
   191c8:	000248c8 	.word	0x000248c8
   191cc:	00023fe4 	.word	0x00023fe4
   191d0:	000248e8 	.word	0x000248e8
   191d4:	000248bc 	.word	0x000248bc

000191d8 <ull_filter_lll_irk_whitelisted>:
	if (rl_idx >= ARRAY_SIZE(rl)) {
   191d8:	2807      	cmp	r0, #7
   191da:	d823      	bhi.n	19224 <ull_filter_lll_irk_whitelisted+0x4c>
{
   191dc:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(rl[rl_idx].taken);
   191de:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   191e2:	4e11      	ldr	r6, [pc, #68]	; (19228 <ull_filter_lll_irk_whitelisted+0x50>)
   191e4:	f816 3033 	ldrb.w	r3, [r6, r3, lsl #3]
   191e8:	07db      	lsls	r3, r3, #31
   191ea:	4604      	mov	r4, r0
   191ec:	ea4f 0580 	mov.w	r5, r0, lsl #2
   191f0:	d505      	bpl.n	191fe <ull_filter_lll_irk_whitelisted+0x26>
	return rl[rl_idx].wl;
   191f2:	442c      	add	r4, r5
   191f4:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   191f8:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   191fc:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(rl[rl_idx].taken);
   191fe:	4a0b      	ldr	r2, [pc, #44]	; (1922c <ull_filter_lll_irk_whitelisted+0x54>)
   19200:	490b      	ldr	r1, [pc, #44]	; (19230 <ull_filter_lll_irk_whitelisted+0x58>)
   19202:	480c      	ldr	r0, [pc, #48]	; (19234 <ull_filter_lll_irk_whitelisted+0x5c>)
   19204:	f240 23d3 	movw	r3, #723	; 0x2d3
   19208:	f004 fe9f 	bl	1df4a <printk>
   1920c:	4040      	eors	r0, r0
   1920e:	f380 8811 	msr	BASEPRI, r0
   19212:	f04f 0003 	mov.w	r0, #3
   19216:	df02      	svc	2
	return rl[rl_idx].wl;
   19218:	442c      	add	r4, r5
   1921a:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   1921e:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   19222:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   19224:	2000      	movs	r0, #0
}
   19226:	4770      	bx	lr
   19228:	2000942c 	.word	0x2000942c
   1922c:	000246f8 	.word	0x000246f8
   19230:	00024748 	.word	0x00024748
   19234:	00023fe4 	.word	0x00023fe4

00019238 <ull_filter_lll_get>:
		return &wl_filter;
   19238:	4a03      	ldr	r2, [pc, #12]	; (19248 <ull_filter_lll_get+0x10>)
   1923a:	4b04      	ldr	r3, [pc, #16]	; (1924c <ull_filter_lll_get+0x14>)
}
   1923c:	2800      	cmp	r0, #0
   1923e:	bf0c      	ite	eq
   19240:	4610      	moveq	r0, r2
   19242:	4618      	movne	r0, r3
   19244:	4770      	bx	lr
   19246:	bf00      	nop
   19248:	2000956c 	.word	0x2000956c
   1924c:	200095e4 	.word	0x200095e4

00019250 <ull_filter_lll_rl_idx_allowed>:
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || irkmatch_ok) {
   19250:	4b14      	ldr	r3, [pc, #80]	; (192a4 <ull_filter_lll_rl_idx_allowed+0x54>)
   19252:	781b      	ldrb	r3, [r3, #0]
   19254:	b19b      	cbz	r3, 1927e <ull_filter_lll_rl_idx_allowed+0x2e>
   19256:	2907      	cmp	r1, #7
{
   19258:	b570      	push	{r4, r5, r6, lr}
   1925a:	460c      	mov	r4, r1
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || irkmatch_ok) {
   1925c:	d80d      	bhi.n	1927a <ull_filter_lll_rl_idx_allowed+0x2a>
   1925e:	b960      	cbnz	r0, 1927a <ull_filter_lll_rl_idx_allowed+0x2a>
	LL_ASSERT(rl[rl_idx].taken);
   19260:	4e11      	ldr	r6, [pc, #68]	; (192a8 <ull_filter_lll_rl_idx_allowed+0x58>)
   19262:	eb01 0381 	add.w	r3, r1, r1, lsl #2
   19266:	008d      	lsls	r5, r1, #2
   19268:	f816 3033 	ldrb.w	r3, [r6, r3, lsl #3]
   1926c:	07da      	lsls	r2, r3, #31
   1926e:	d50b      	bpl.n	19288 <ull_filter_lll_rl_idx_allowed+0x38>
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
   19270:	442c      	add	r4, r5
   19272:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   19276:	0743      	lsls	r3, r0, #29
   19278:	d403      	bmi.n	19282 <ull_filter_lll_rl_idx_allowed+0x32>
		return true;
   1927a:	2001      	movs	r0, #1
}
   1927c:	bd70      	pop	{r4, r5, r6, pc}
		return true;
   1927e:	2001      	movs	r0, #1
}
   19280:	4770      	bx	lr
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
   19282:	f3c0 1000 	ubfx	r0, r0, #4, #1
}
   19286:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(rl[rl_idx].taken);
   19288:	4a08      	ldr	r2, [pc, #32]	; (192ac <ull_filter_lll_rl_idx_allowed+0x5c>)
   1928a:	4909      	ldr	r1, [pc, #36]	; (192b0 <ull_filter_lll_rl_idx_allowed+0x60>)
   1928c:	4809      	ldr	r0, [pc, #36]	; (192b4 <ull_filter_lll_rl_idx_allowed+0x64>)
   1928e:	f240 23fb 	movw	r3, #763	; 0x2fb
   19292:	f004 fe5a 	bl	1df4a <printk>
   19296:	4040      	eors	r0, r0
   19298:	f380 8811 	msr	BASEPRI, r0
   1929c:	f04f 0003 	mov.w	r0, #3
   192a0:	df02      	svc	2
   192a2:	e7e5      	b.n	19270 <ull_filter_lll_rl_idx_allowed+0x20>
   192a4:	2000a867 	.word	0x2000a867
   192a8:	2000942c 	.word	0x2000942c
   192ac:	000246f8 	.word	0x000246f8
   192b0:	00024748 	.word	0x00024748
   192b4:	00023fe4 	.word	0x00023fe4

000192b8 <ull_filter_lll_rl_addr_resolve>:
{
   192b8:	b430      	push	{r4, r5}
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || !rl[rl_idx].lirk) {
   192ba:	4b0e      	ldr	r3, [pc, #56]	; (192f4 <ull_filter_lll_rl_addr_resolve+0x3c>)
   192bc:	781c      	ldrb	r4, [r3, #0]
   192be:	b174      	cbz	r4, 192de <ull_filter_lll_rl_addr_resolve+0x26>
   192c0:	2a07      	cmp	r2, #7
   192c2:	d80c      	bhi.n	192de <ull_filter_lll_rl_addr_resolve+0x26>
   192c4:	4c0c      	ldr	r4, [pc, #48]	; (192f8 <ull_filter_lll_rl_addr_resolve+0x40>)
   192c6:	eb02 0582 	add.w	r5, r2, r2, lsl #2
   192ca:	f814 5035 	ldrb.w	r5, [r4, r5, lsl #3]
   192ce:	072b      	lsls	r3, r5, #28
   192d0:	d505      	bpl.n	192de <ull_filter_lll_rl_addr_resolve+0x26>
	if ((id_addr_type != 0U) && ((id_addr[5] & 0xc0) == 0x40)) {
   192d2:	b120      	cbz	r0, 192de <ull_filter_lll_rl_addr_resolve+0x26>
   192d4:	794b      	ldrb	r3, [r1, #5]
   192d6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   192da:	2b40      	cmp	r3, #64	; 0x40
   192dc:	d002      	beq.n	192e4 <ull_filter_lll_rl_addr_resolve+0x2c>
}
   192de:	2000      	movs	r0, #0
   192e0:	bc30      	pop	{r4, r5}
   192e2:	4770      	bx	lr
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   192e4:	2028      	movs	r0, #40	; 0x28
   192e6:	fb00 4002 	mla	r0, r0, r2, r4
   192ea:	3007      	adds	r0, #7
}
   192ec:	bc30      	pop	{r4, r5}
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   192ee:	f006 be2e 	b.w	1ff4e <bt_rpa_irk_matches>
   192f2:	bf00      	nop
   192f4:	2000a867 	.word	0x2000a867
   192f8:	2000942c 	.word	0x2000942c

000192fc <ull_filter_lll_rl_enabled>:
	return rl_enable;
   192fc:	4b02      	ldr	r3, [pc, #8]	; (19308 <ull_filter_lll_rl_enabled+0xc>)
   192fe:	7818      	ldrb	r0, [r3, #0]
}
   19300:	3800      	subs	r0, #0
   19302:	bf18      	it	ne
   19304:	2001      	movne	r0, #1
   19306:	4770      	bx	lr
   19308:	2000a867 	.word	0x2000a867

0001930c <radio_nrf5_isr>:
static void mfy_ticker_job_idle_get(void *param);
static void ticker_op_job_disable(uint32_t status, void *op_context);
#endif
#endif /* CONFIG_BT_CTLR_LOW_LAT */

ISR_DIRECT_DECLARE(radio_nrf5_isr)
   1930c:	4668      	mov	r0, sp
   1930e:	f020 0107 	bic.w	r1, r0, #7
   19312:	468d      	mov	sp, r1
   19314:	b501      	push	{r0, lr}
{
	DEBUG_RADIO_ISR(1);

	isr_radio();
   19316:	f001 fd29 	bl	1ad6c <isr_radio>

	ISR_DIRECT_PM();
   1931a:	f7ee f8db 	bl	74d4 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		z_arm_int_exit();
   1931e:	f7ee fbe9 	bl	7af4 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   19322:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   19326:	4685      	mov	sp, r0
   19328:	4770      	bx	lr
   1932a:	bf00      	nop

0001932c <rtc0_nrf5_isr>:
	DEBUG_RADIO_ISR(0);
	return 1;
}

static void rtc0_nrf5_isr(void *arg)
{
   1932c:	b508      	push	{r3, lr}
	DEBUG_TICKER_ISR(1);

	/* On compare0 run ticker worker instance0 */
	if (NRF_RTC0->EVENTS_COMPARE[0]) {
   1932e:	4b09      	ldr	r3, [pc, #36]	; (19354 <rtc0_nrf5_isr+0x28>)
   19330:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   19334:	b93a      	cbnz	r2, 19346 <rtc0_nrf5_isr+0x1a>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;

		ticker_trigger(0);
	}

	mayfly_run(TICKER_USER_ID_ULL_HIGH);
   19336:	2001      	movs	r0, #1
   19338:	f7f6 ff6c 	bl	10214 <mayfly_run>
	(CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	mayfly_run(TICKER_USER_ID_ULL_LOW);
#endif

	DEBUG_TICKER_ISR(0);
}
   1933c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	mayfly_run(TICKER_USER_ID_ULL_LOW);
   19340:	2002      	movs	r0, #2
   19342:	f7f6 bf67 	b.w	10214 <mayfly_run>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   19346:	2000      	movs	r0, #0
   19348:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		ticker_trigger(0);
   1934c:	f7f8 fa2c 	bl	117a8 <ticker_trigger>
   19350:	e7f1      	b.n	19336 <rtc0_nrf5_isr+0xa>
   19352:	bf00      	nop
   19354:	4000b000 	.word	0x4000b000

00019358 <swi_lll_nrf5_isr>:

static void swi_lll_nrf5_isr(void *arg)
{
	DEBUG_RADIO_ISR(1);

	mayfly_run(TICKER_USER_ID_LLL);
   19358:	2000      	movs	r0, #0
   1935a:	f7f6 bf5b 	b.w	10214 <mayfly_run>
   1935e:	bf00      	nop

00019360 <isr_race>:
}

static void isr_race(void *param)
{
	/* NOTE: lll_disable could have a race with ... */
	radio_status_reset();
   19360:	f001 be38 	b.w	1afd4 <radio_status_reset>

00019364 <ticker_stop_op_cb>:
	/* NOTE: this callback is present only for addition of debug messages
	 * when needed, else can be dispensed with.
	 */
	ARG_UNUSED(param);

	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   19364:	2801      	cmp	r0, #1
   19366:	d800      	bhi.n	1936a <ticker_stop_op_cb+0x6>
   19368:	4770      	bx	lr
{
   1936a:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   1936c:	4a06      	ldr	r2, [pc, #24]	; (19388 <ticker_stop_op_cb+0x24>)
   1936e:	4907      	ldr	r1, [pc, #28]	; (1938c <ticker_stop_op_cb+0x28>)
   19370:	4807      	ldr	r0, [pc, #28]	; (19390 <ticker_stop_op_cb+0x2c>)
   19372:	f44f 731b 	mov.w	r3, #620	; 0x26c
   19376:	f004 fde8 	bl	1df4a <printk>
   1937a:	4040      	eors	r0, r0
   1937c:	f380 8811 	msr	BASEPRI, r0
   19380:	f04f 0003 	mov.w	r0, #3
   19384:	df02      	svc	2
		  (status == TICKER_STATUS_FAILURE));
}
   19386:	bd08      	pop	{r3, pc}
   19388:	00024904 	.word	0x00024904
   1938c:	0002494c 	.word	0x0002494c
   19390:	00023fe4 	.word	0x00023fe4

00019394 <ticker_start_op_cb>:
	/* NOTE: this callback is present only for addition of debug messages
	 * when needed, else can be dispensed with.
	 */
	ARG_UNUSED(param);

	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   19394:	2801      	cmp	r0, #1
   19396:	d800      	bhi.n	1939a <ticker_start_op_cb+0x6>
   19398:	4770      	bx	lr
{
   1939a:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   1939c:	4a06      	ldr	r2, [pc, #24]	; (193b8 <ticker_start_op_cb+0x24>)
   1939e:	4907      	ldr	r1, [pc, #28]	; (193bc <ticker_start_op_cb+0x28>)
   193a0:	4807      	ldr	r0, [pc, #28]	; (193c0 <ticker_start_op_cb+0x2c>)
   193a2:	f240 2377 	movw	r3, #631	; 0x277
   193a6:	f004 fdd0 	bl	1df4a <printk>
   193aa:	4040      	eors	r0, r0
   193ac:	f380 8811 	msr	BASEPRI, r0
   193b0:	f04f 0003 	mov.w	r0, #3
   193b4:	df02      	svc	2
		  (status == TICKER_STATUS_FAILURE));
}
   193b6:	bd08      	pop	{r3, pc}
   193b8:	00024904 	.word	0x00024904
   193bc:	0002494c 	.word	0x0002494c
   193c0:	00023fe4 	.word	0x00023fe4

000193c4 <preempt_ticker_start.isra.0>:

static void preempt_ticker_start(struct lll_prepare_param *prepare_param)
   193c4:	b530      	push	{r4, r5, lr}
	preempt_to = MAX(evt->ticks_active_to_start,
			 evt->ticks_xtal_to_start) -
			 evt->ticks_preempt_to_start;

	/* Setup pre empt timeout */
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   193c6:	2200      	movs	r2, #0
static void preempt_ticker_start(struct lll_prepare_param *prepare_param)
   193c8:	b08b      	sub	sp, #44	; 0x2c
	evt = HDR_LLL2EVT(prepare_param->param);
   193ca:	680b      	ldr	r3, [r1, #0]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   193cc:	4c15      	ldr	r4, [pc, #84]	; (19424 <preempt_ticker_start.isra.0+0x60>)
   193ce:	4916      	ldr	r1, [pc, #88]	; (19428 <preempt_ticker_start.isra.0+0x64>)
   193d0:	9208      	str	r2, [sp, #32]
   193d2:	e9cd 2203 	strd	r2, r2, [sp, #12]
   193d6:	e9cd 2201 	strd	r2, r2, [sp, #4]
   193da:	9206      	str	r2, [sp, #24]
   193dc:	9407      	str	r4, [sp, #28]
   193de:	9105      	str	r1, [sp, #20]
	preempt_to = MAX(evt->ticks_active_to_start,
   193e0:	e9d3 5400 	ldrd	r5, r4, [r3]
   193e4:	6899      	ldr	r1, [r3, #8]
   193e6:	42a5      	cmp	r5, r4
   193e8:	bf2c      	ite	cs
   193ea:	ebc1 0105 	rsbcs	r1, r1, r5
   193ee:	ebc1 0104 	rsbcc	r1, r1, r4
static void preempt_ticker_start(struct lll_prepare_param *prepare_param)
   193f2:	4603      	mov	r3, r0
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   193f4:	9100      	str	r1, [sp, #0]
   193f6:	4610      	mov	r0, r2
   193f8:	4611      	mov	r1, r2
   193fa:	f7f8 fa43 	bl	11884 <ticker_start>
			   TICKER_NULL_REMAINDER,
			   TICKER_NULL_LAZY,
			   TICKER_NULL_SLOT,
			   preempt_ticker_cb, NULL,
			   ticker_start_op_cb, NULL);
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   193fe:	2802      	cmp	r0, #2
   19400:	d801      	bhi.n	19406 <preempt_ticker_start.isra.0+0x42>
		  (ret == TICKER_STATUS_FAILURE) ||
		  (ret == TICKER_STATUS_BUSY));
}
   19402:	b00b      	add	sp, #44	; 0x2c
   19404:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   19406:	4a09      	ldr	r2, [pc, #36]	; (1942c <preempt_ticker_start.isra.0+0x68>)
   19408:	4909      	ldr	r1, [pc, #36]	; (19430 <preempt_ticker_start.isra.0+0x6c>)
   1940a:	480a      	ldr	r0, [pc, #40]	; (19434 <preempt_ticker_start.isra.0+0x70>)
   1940c:	f240 2395 	movw	r3, #661	; 0x295
   19410:	f004 fd9b 	bl	1df4a <printk>
   19414:	4040      	eors	r0, r0
   19416:	f380 8811 	msr	BASEPRI, r0
   1941a:	f04f 0003 	mov.w	r0, #3
   1941e:	df02      	svc	2
}
   19420:	b00b      	add	sp, #44	; 0x2c
   19422:	bd30      	pop	{r4, r5, pc}
   19424:	00019395 	.word	0x00019395
   19428:	0001968d 	.word	0x0001968d
   1942c:	00024904 	.word	0x00024904
   19430:	0002496c 	.word	0x0002496c
   19434:	00023fe4 	.word	0x00023fe4

00019438 <prepare>:
{
   19438:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1943c:	b085      	sub	sp, #20
   1943e:	4604      	mov	r4, r0
	uint8_t idx = UINT8_MAX;
   19440:	f04f 0cff 	mov.w	ip, #255	; 0xff
	p = ull_prepare_dequeue_iter(&idx);
   19444:	f10d 000f 	add.w	r0, sp, #15
{
   19448:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   1944c:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
	uint8_t idx = UINT8_MAX;
   19450:	f88d c00f 	strb.w	ip, [sp, #15]
{
   19454:	460d      	mov	r5, r1
   19456:	4616      	mov	r6, r2
   19458:	461f      	mov	r7, r3
	p = ull_prepare_dequeue_iter(&idx);
   1945a:	f7fb f95b 	bl	14714 <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   1945e:	b918      	cbnz	r0, 19468 <prepare+0x30>
   19460:	e01e      	b.n	194a0 <prepare+0x68>
		p = ull_prepare_dequeue_iter(&idx);
   19462:	f7fb f957 	bl	14714 <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   19466:	b1d8      	cbz	r0, 194a0 <prepare+0x68>
   19468:	f890 3020 	ldrb.w	r3, [r0, #32]
   1946c:	079b      	lsls	r3, r3, #30
		p = ull_prepare_dequeue_iter(&idx);
   1946e:	f10d 000f 	add.w	r0, sp, #15
	while (p && (p->is_aborted || p->is_resume)) {
   19472:	d1f6      	bne.n	19462 <prepare+0x2a>
	if (event.curr.abort_cb || (p && is_resume)) {
   19474:	4b2d      	ldr	r3, [pc, #180]	; (1952c <prepare+0xf4>)
   19476:	689a      	ldr	r2, [r3, #8]
   19478:	b9aa      	cbnz	r2, 194a6 <prepare+0x6e>
   1947a:	f1b9 0f00 	cmp.w	r9, #0
   1947e:	d036      	beq.n	194ee <prepare+0xb6>
		err = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   19480:	2201      	movs	r2, #1
   19482:	9201      	str	r2, [sp, #4]
   19484:	9700      	str	r7, [sp, #0]
   19486:	4633      	mov	r3, r6
   19488:	4629      	mov	r1, r5
   1948a:	4620      	mov	r0, r4
   1948c:	4642      	mov	r2, r8
   1948e:	f7fb f8fb 	bl	14688 <ull_prepare_enqueue>
		LL_ASSERT(!err);
   19492:	b9d8      	cbnz	r0, 194cc <prepare+0x94>
		return -EINPROGRESS;
   19494:	f06f 0443 	mvn.w	r4, #67	; 0x43
}
   19498:	4620      	mov	r0, r4
   1949a:	b005      	add	sp, #20
   1949c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (event.curr.abort_cb || (p && is_resume)) {
   194a0:	4b22      	ldr	r3, [pc, #136]	; (1952c <prepare+0xf4>)
   194a2:	689a      	ldr	r2, [r3, #8]
   194a4:	b31a      	cbz	r2, 194ee <prepare+0xb6>
		err = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   194a6:	e9cd 7900 	strd	r7, r9, [sp]
   194aa:	4633      	mov	r3, r6
   194ac:	4629      	mov	r1, r5
   194ae:	4620      	mov	r0, r4
   194b0:	4642      	mov	r2, r8
   194b2:	f7fb f8e9 	bl	14688 <ull_prepare_enqueue>
		LL_ASSERT(!err);
   194b6:	b948      	cbnz	r0, 194cc <prepare+0x94>
		if (is_resume) {
   194b8:	f1b9 0f00 	cmp.w	r9, #0
   194bc:	d1ea      	bne.n	19494 <prepare+0x5c>
		preempt_ticker_start(prepare_param);
   194be:	f8d8 100c 	ldr.w	r1, [r8, #12]
   194c2:	f8d8 0000 	ldr.w	r0, [r8]
   194c6:	f7ff ff7d 	bl	193c4 <preempt_ticker_start.isra.0>
   194ca:	e7e3      	b.n	19494 <prepare+0x5c>
		LL_ASSERT(!err);
   194cc:	4a18      	ldr	r2, [pc, #96]	; (19530 <prepare+0xf8>)
   194ce:	4919      	ldr	r1, [pc, #100]	; (19534 <prepare+0xfc>)
   194d0:	4819      	ldr	r0, [pc, #100]	; (19538 <prepare+0x100>)
   194d2:	f240 2311 	movw	r3, #529	; 0x211
   194d6:	f004 fd38 	bl	1df4a <printk>
   194da:	4040      	eors	r0, r0
   194dc:	f380 8811 	msr	BASEPRI, r0
   194e0:	f04f 0003 	mov.w	r0, #3
   194e4:	df02      	svc	2
		if (is_resume) {
   194e6:	f1b9 0f00 	cmp.w	r9, #0
   194ea:	d1d3      	bne.n	19494 <prepare+0x5c>
   194ec:	e7e7      	b.n	194be <prepare+0x86>
	event.curr.param = prepare_param->param;
   194ee:	f8d8 200c 	ldr.w	r2, [r8, #12]
   194f2:	601a      	str	r2, [r3, #0]
	event.curr.abort_cb = abort_cb;
   194f4:	e9c3 4501 	strd	r4, r5, [r3, #4]
	err = prepare_cb(prepare_param);
   194f8:	4640      	mov	r0, r8
   194fa:	47b0      	blx	r6
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   194fc:	2200      	movs	r2, #0
   194fe:	4b0f      	ldr	r3, [pc, #60]	; (1953c <prepare+0x104>)
   19500:	9200      	str	r2, [sp, #0]
	err = prepare_cb(prepare_param);
   19502:	4604      	mov	r4, r0
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   19504:	4611      	mov	r1, r2
   19506:	4610      	mov	r0, r2
   19508:	f7f8 fa28 	bl	1195c <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1950c:	2802      	cmp	r0, #2
   1950e:	d9c3      	bls.n	19498 <prepare+0x60>
   19510:	4a07      	ldr	r2, [pc, #28]	; (19530 <prepare+0xf8>)
   19512:	490b      	ldr	r1, [pc, #44]	; (19540 <prepare+0x108>)
   19514:	4808      	ldr	r0, [pc, #32]	; (19538 <prepare+0x100>)
   19516:	f240 234b 	movw	r3, #587	; 0x24b
   1951a:	f004 fd16 	bl	1df4a <printk>
   1951e:	4040      	eors	r0, r0
   19520:	f380 8811 	msr	BASEPRI, r0
   19524:	f04f 0003 	mov.w	r0, #3
   19528:	df02      	svc	2
   1952a:	e7b5      	b.n	19498 <prepare+0x60>
   1952c:	2000961c 	.word	0x2000961c
   19530:	00024904 	.word	0x00024904
   19534:	00024294 	.word	0x00024294
   19538:	00023fe4 	.word	0x00023fe4
   1953c:	00019365 	.word	0x00019365
   19540:	0002496c 	.word	0x0002496c

00019544 <preempt>:
			     0, &mfy);
	LL_ASSERT(!ret);
}

static void preempt(void *param)
{
   19544:	b5f0      	push	{r4, r5, r6, r7, lr}
	lll_prepare_cb_t resume_cb;
	uint8_t idx = UINT8_MAX;
	int resume_prio;
	int ret;

	if (!event.curr.abort_cb || !event.curr.param) {
   19546:	4e4c      	ldr	r6, [pc, #304]	; (19678 <preempt+0x134>)
{
   19548:	b08b      	sub	sp, #44	; 0x2c
	struct lll_event *next = ull_prepare_dequeue_get();
   1954a:	f7fb f8d5 	bl	146f8 <ull_prepare_dequeue_get>
	if (!event.curr.abort_cb || !event.curr.param) {
   1954e:	68b3      	ldr	r3, [r6, #8]
	uint8_t idx = UINT8_MAX;
   19550:	22ff      	movs	r2, #255	; 0xff
   19552:	f88d 200e 	strb.w	r2, [sp, #14]
	if (!event.curr.abort_cb || !event.curr.param) {
   19556:	b19b      	cbz	r3, 19580 <preempt+0x3c>
   19558:	6833      	ldr	r3, [r6, #0]
   1955a:	b18b      	cbz	r3, 19580 <preempt+0x3c>
		return;
	}

	next = ull_prepare_dequeue_iter(&idx);
   1955c:	f10d 000e 	add.w	r0, sp, #14
   19560:	f7fb f8d8 	bl	14714 <ull_prepare_dequeue_iter>
	if (!next) {
   19564:	4604      	mov	r4, r0
   19566:	b158      	cbz	r0, 19580 <preempt+0x3c>
		return;
	}

	while (next && (next->is_aborted || next->is_resume)) {
   19568:	f894 3020 	ldrb.w	r3, [r4, #32]
   1956c:	f013 0503 	ands.w	r5, r3, #3
		next = ull_prepare_dequeue_iter(&idx);
   19570:	f10d 000e 	add.w	r0, sp, #14
	while (next && (next->is_aborted || next->is_resume)) {
   19574:	d006      	beq.n	19584 <preempt+0x40>
		next = ull_prepare_dequeue_iter(&idx);
   19576:	f7fb f8cd 	bl	14714 <ull_prepare_dequeue_iter>
	while (next && (next->is_aborted || next->is_resume)) {
   1957a:	4604      	mov	r4, r0
   1957c:	2800      	cmp	r0, #0
   1957e:	d1f3      	bne.n	19568 <preempt+0x24>
			return;
		}
	} while (next->is_aborted || next->is_resume);

	preempt_ticker_start(&next->prepare_param);
}
   19580:	b00b      	add	sp, #44	; 0x2c
   19582:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = event.curr.is_abort_cb(next->prepare_param.param, next->prio,
   19584:	ab05      	add	r3, sp, #20
   19586:	e9d6 2700 	ldrd	r2, r7, [r6]
   1958a:	69e1      	ldr	r1, [r4, #28]
   1958c:	68e0      	ldr	r0, [r4, #12]
   1958e:	9300      	str	r3, [sp, #0]
   19590:	ab04      	add	r3, sp, #16
   19592:	47b8      	blx	r7
	if (!ret) {
   19594:	4607      	mov	r7, r0
   19596:	2800      	cmp	r0, #0
   19598:	d062      	beq.n	19660 <preempt+0x11c>
	event.curr.abort_cb(NULL, event.curr.param);
   1959a:	68b3      	ldr	r3, [r6, #8]
   1959c:	6831      	ldr	r1, [r6, #0]
   1959e:	4628      	mov	r0, r5
   195a0:	4798      	blx	r3
	if (ret == -EAGAIN) {
   195a2:	f117 0f0b 	cmn.w	r7, #11
   195a6:	d01a      	beq.n	195de <preempt+0x9a>
		LL_ASSERT(ret == -ECANCELED);
   195a8:	3748      	adds	r7, #72	; 0x48
   195aa:	d011      	beq.n	195d0 <preempt+0x8c>
   195ac:	4a33      	ldr	r2, [pc, #204]	; (1967c <preempt+0x138>)
   195ae:	4934      	ldr	r1, [pc, #208]	; (19680 <preempt+0x13c>)
   195b0:	4834      	ldr	r0, [pc, #208]	; (19684 <preempt+0x140>)
   195b2:	f240 23df 	movw	r3, #735	; 0x2df
   195b6:	f004 fcc8 	bl	1df4a <printk>
   195ba:	4040      	eors	r0, r0
   195bc:	f380 8811 	msr	BASEPRI, r0
   195c0:	f04f 0003 	mov.w	r0, #3
   195c4:	df02      	svc	2
   195c6:	e003      	b.n	195d0 <preempt+0x8c>
	} while (next->is_aborted || next->is_resume);
   195c8:	f890 3020 	ldrb.w	r3, [r0, #32]
   195cc:	079b      	lsls	r3, r3, #30
   195ce:	d041      	beq.n	19654 <preempt+0x110>
		next = ull_prepare_dequeue_iter(&idx);
   195d0:	f10d 000e 	add.w	r0, sp, #14
   195d4:	f7fb f89e 	bl	14714 <ull_prepare_dequeue_iter>
		if (!next) {
   195d8:	2800      	cmp	r0, #0
   195da:	d1f5      	bne.n	195c8 <preempt+0x84>
   195dc:	e7d0      	b.n	19580 <preempt+0x3c>
		uint8_t iter_idx = UINT8_MAX;
   195de:	23ff      	movs	r3, #255	; 0xff
		iter = ull_prepare_dequeue_iter(&iter_idx);
   195e0:	f10d 000f 	add.w	r0, sp, #15
		uint8_t iter_idx = UINT8_MAX;
   195e4:	f88d 300f 	strb.w	r3, [sp, #15]
		iter = ull_prepare_dequeue_iter(&iter_idx);
   195e8:	f7fb f894 	bl	14714 <ull_prepare_dequeue_iter>
		while (iter) {
   195ec:	bb48      	cbnz	r0, 19642 <preempt+0xfe>
	prepare_param.param = event.curr.param;
   195ee:	6832      	ldr	r2, [r6, #0]
		ret = resume_enqueue(resume_cb, resume_prio);
   195f0:	9b05      	ldr	r3, [sp, #20]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   195f2:	9300      	str	r3, [sp, #0]
	prepare_param.param = event.curr.param;
   195f4:	9209      	str	r2, [sp, #36]	; 0x24
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   195f6:	2301      	movs	r3, #1
	event.curr.param = NULL;
   195f8:	2200      	movs	r2, #0
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   195fa:	9301      	str	r3, [sp, #4]
	event.curr.param = NULL;
   195fc:	6032      	str	r2, [r6, #0]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   195fe:	e9d6 0101 	ldrd	r0, r1, [r6, #4]
   19602:	9b04      	ldr	r3, [sp, #16]
   19604:	aa06      	add	r2, sp, #24
   19606:	f7fb f83f 	bl	14688 <ull_prepare_enqueue>
		LL_ASSERT(!ret);
   1960a:	2800      	cmp	r0, #0
   1960c:	d0e0      	beq.n	195d0 <preempt+0x8c>
   1960e:	4a1b      	ldr	r2, [pc, #108]	; (1967c <preempt+0x138>)
   19610:	491d      	ldr	r1, [pc, #116]	; (19688 <preempt+0x144>)
   19612:	481c      	ldr	r0, [pc, #112]	; (19684 <preempt+0x140>)
   19614:	f240 23dd 	movw	r3, #733	; 0x2dd
   19618:	f004 fc97 	bl	1df4a <printk>
   1961c:	4040      	eors	r0, r0
   1961e:	f380 8811 	msr	BASEPRI, r0
   19622:	f04f 0003 	mov.w	r0, #3
   19626:	df02      	svc	2
   19628:	e7d2      	b.n	195d0 <preempt+0x8c>
				iter->is_aborted = 1;
   1962a:	f043 0302 	orr.w	r3, r3, #2
   1962e:	f880 3020 	strb.w	r3, [r0, #32]
				iter->abort_cb(&iter->prepare_param,
   19632:	6983      	ldr	r3, [r0, #24]
   19634:	4798      	blx	r3
			iter = ull_prepare_dequeue_iter(&iter_idx);
   19636:	f10d 000f 	add.w	r0, sp, #15
   1963a:	f7fb f86b 	bl	14714 <ull_prepare_dequeue_iter>
		while (iter) {
   1963e:	2800      	cmp	r0, #0
   19640:	d0d5      	beq.n	195ee <preempt+0xaa>
			if (!iter->is_aborted &&
   19642:	f890 3020 	ldrb.w	r3, [r0, #32]
   19646:	079a      	lsls	r2, r3, #30
   19648:	d4f5      	bmi.n	19636 <preempt+0xf2>
			    event.curr.param == iter->prepare_param.param) {
   1964a:	68c2      	ldr	r2, [r0, #12]
			if (!iter->is_aborted &&
   1964c:	6831      	ldr	r1, [r6, #0]
   1964e:	4291      	cmp	r1, r2
   19650:	d1f1      	bne.n	19636 <preempt+0xf2>
   19652:	e7ea      	b.n	1962a <preempt+0xe6>
	preempt_ticker_start(&next->prepare_param);
   19654:	68c1      	ldr	r1, [r0, #12]
   19656:	6800      	ldr	r0, [r0, #0]
   19658:	f7ff feb4 	bl	193c4 <preempt_ticker_start.isra.0>
}
   1965c:	b00b      	add	sp, #44	; 0x2c
   1965e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next->is_aborted = 1;
   19660:	f894 3020 	ldrb.w	r3, [r4, #32]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   19664:	69a2      	ldr	r2, [r4, #24]
   19666:	68e1      	ldr	r1, [r4, #12]
		next->is_aborted = 1;
   19668:	f043 0302 	orr.w	r3, r3, #2
   1966c:	f884 3020 	strb.w	r3, [r4, #32]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   19670:	4620      	mov	r0, r4
   19672:	4790      	blx	r2
		goto preempt_next;
   19674:	e7ac      	b.n	195d0 <preempt+0x8c>
   19676:	bf00      	nop
   19678:	2000961c 	.word	0x2000961c
   1967c:	00024904 	.word	0x00024904
   19680:	00024994 	.word	0x00024994
   19684:	00023fe4 	.word	0x00023fe4
   19688:	000242a0 	.word	0x000242a0

0001968c <preempt_ticker_cb>:
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1968c:	2200      	movs	r2, #0
{
   1968e:	b508      	push	{r3, lr}
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   19690:	4611      	mov	r1, r2
   19692:	4b0a      	ldr	r3, [pc, #40]	; (196bc <preempt_ticker_cb+0x30>)
   19694:	2001      	movs	r0, #1
   19696:	f7f6 fd69 	bl	1016c <mayfly_enqueue>
	LL_ASSERT(!ret);
   1969a:	b900      	cbnz	r0, 1969e <preempt_ticker_cb+0x12>
}
   1969c:	bd08      	pop	{r3, pc}
	LL_ASSERT(!ret);
   1969e:	4a08      	ldr	r2, [pc, #32]	; (196c0 <preempt_ticker_cb+0x34>)
   196a0:	4908      	ldr	r1, [pc, #32]	; (196c4 <preempt_ticker_cb+0x38>)
   196a2:	4809      	ldr	r0, [pc, #36]	; (196c8 <preempt_ticker_cb+0x3c>)
   196a4:	f240 23a3 	movw	r3, #675	; 0x2a3
   196a8:	f004 fc4f 	bl	1df4a <printk>
   196ac:	4040      	eors	r0, r0
   196ae:	f380 8811 	msr	BASEPRI, r0
   196b2:	f04f 0003 	mov.w	r0, #3
   196b6:	df02      	svc	2
}
   196b8:	bd08      	pop	{r3, pc}
   196ba:	bf00      	nop
   196bc:	20000628 	.word	0x20000628
   196c0:	00024904 	.word	0x00024904
   196c4:	000242a0 	.word	0x000242a0
   196c8:	00023fe4 	.word	0x00023fe4

000196cc <lll_init>:
{
   196cc:	b510      	push	{r4, lr}
   196ce:	4815      	ldr	r0, [pc, #84]	; (19724 <lll_init+0x58>)
   196d0:	f003 f9e0 	bl	1ca94 <z_impl_device_get_binding>
	dev_entropy = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   196d4:	4b14      	ldr	r3, [pc, #80]	; (19728 <lll_init+0x5c>)
   196d6:	6018      	str	r0, [r3, #0]
	if (!dev_entropy) {
   196d8:	b300      	cbz	r0, 1971c <lll_init+0x50>
	event.curr.abort_cb = NULL;
   196da:	4b14      	ldr	r3, [pc, #80]	; (1972c <lll_init+0x60>)
   196dc:	2200      	movs	r2, #0
   196de:	609a      	str	r2, [r3, #8]
	err = lll_clock_init();
   196e0:	f000 f9d6 	bl	19a90 <lll_clock_init>
	if (err) {
   196e4:	4604      	mov	r4, r0
   196e6:	b9b8      	cbnz	r0, 19718 <lll_init+0x4c>
	IRQ_DIRECT_CONNECT(RADIO_IRQn, CONFIG_BT_CTLR_LLL_PRIO,
   196e8:	4602      	mov	r2, r0
   196ea:	4601      	mov	r1, r0
   196ec:	2001      	movs	r0, #1
   196ee:	f7ed fed9 	bl	74a4 <z_arm_irq_priority_set>
	IRQ_CONNECT(RTC0_IRQn, CONFIG_BT_CTLR_ULL_HIGH_PRIO,
   196f2:	4622      	mov	r2, r4
   196f4:	4621      	mov	r1, r4
   196f6:	200b      	movs	r0, #11
   196f8:	f7ed fed4 	bl	74a4 <z_arm_irq_priority_set>
	IRQ_CONNECT(HAL_SWI_RADIO_IRQ, CONFIG_BT_CTLR_LLL_PRIO,
   196fc:	4622      	mov	r2, r4
   196fe:	4621      	mov	r1, r4
   19700:	2018      	movs	r0, #24
   19702:	f7ed fecf 	bl	74a4 <z_arm_irq_priority_set>
	irq_enable(RADIO_IRQn);
   19706:	2001      	movs	r0, #1
   19708:	f7ed fe9a 	bl	7440 <arch_irq_enable>
	irq_enable(RTC0_IRQn);
   1970c:	200b      	movs	r0, #11
   1970e:	f7ed fe97 	bl	7440 <arch_irq_enable>
	irq_enable(HAL_SWI_RADIO_IRQ);
   19712:	2018      	movs	r0, #24
   19714:	f7ed fe94 	bl	7440 <arch_irq_enable>
}
   19718:	4620      	mov	r0, r4
   1971a:	bd10      	pop	{r4, pc}
		return -ENODEV;
   1971c:	f06f 0412 	mvn.w	r4, #18
   19720:	e7fa      	b.n	19718 <lll_init+0x4c>
   19722:	bf00      	nop
   19724:	000249a0 	.word	0x000249a0
   19728:	20009618 	.word	0x20009618
   1972c:	2000961c 	.word	0x2000961c

00019730 <lll_csrand_get>:
	return entropy_get_entropy(dev_entropy, buf, len);
   19730:	4a04      	ldr	r2, [pc, #16]	; (19744 <lll_csrand_get+0x14>)
{
   19732:	b410      	push	{r4}
   19734:	4603      	mov	r3, r0
	return entropy_get_entropy(dev_entropy, buf, len);
   19736:	6810      	ldr	r0, [r2, #0]
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->driver_api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   19738:	6884      	ldr	r4, [r0, #8]
   1973a:	b28a      	uxth	r2, r1
   1973c:	4619      	mov	r1, r3
   1973e:	6823      	ldr	r3, [r4, #0]
}
   19740:	bc10      	pop	{r4}
   19742:	4718      	bx	r3
   19744:	20009618 	.word	0x20009618

00019748 <lll_csrand_isr_get>:
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
   19748:	4b08      	ldr	r3, [pc, #32]	; (1976c <lll_csrand_isr_get+0x24>)
   1974a:	681b      	ldr	r3, [r3, #0]
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->driver_api;

	if (unlikely(!api->get_entropy_isr)) {
   1974c:	689a      	ldr	r2, [r3, #8]
{
   1974e:	b410      	push	{r4}
   19750:	6854      	ldr	r4, [r2, #4]
   19752:	b134      	cbz	r4, 19762 <lll_csrand_isr_get+0x1a>
   19754:	b28a      	uxth	r2, r1
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   19756:	46a4      	mov	ip, r4
   19758:	4601      	mov	r1, r0
}
   1975a:	bc10      	pop	{r4}
   1975c:	4618      	mov	r0, r3
   1975e:	2300      	movs	r3, #0
   19760:	4760      	bx	ip
   19762:	f06f 0022 	mvn.w	r0, #34	; 0x22
   19766:	bc10      	pop	{r4}
   19768:	4770      	bx	lr
   1976a:	bf00      	nop
   1976c:	20009618 	.word	0x20009618

00019770 <lll_reset>:
}
   19770:	2000      	movs	r0, #0
   19772:	4770      	bx	lr

00019774 <lll_prepare>:
{
   19774:	b510      	push	{r4, lr}
   19776:	b082      	sub	sp, #8
   19778:	9c04      	ldr	r4, [sp, #16]
	return prepare(is_abort_cb, abort_cb, prepare_cb, prio, prepare_param,
   1977a:	9400      	str	r4, [sp, #0]
   1977c:	2400      	movs	r4, #0
   1977e:	9401      	str	r4, [sp, #4]
   19780:	f7ff fe5a 	bl	19438 <prepare>
}
   19784:	b002      	add	sp, #8
   19786:	bd10      	pop	{r4, pc}

00019788 <lll_resume>:
{
   19788:	b510      	push	{r4, lr}
   1978a:	b082      	sub	sp, #8
	ret = prepare(next->is_abort_cb, next->abort_cb, next->prepare_cb,
   1978c:	9000      	str	r0, [sp, #0]
		      next->prio, &next->prepare_param, next->is_resume);
   1978e:	f890 4020 	ldrb.w	r4, [r0, #32]
	ret = prepare(next->is_abort_cb, next->abort_cb, next->prepare_cb,
   19792:	69c3      	ldr	r3, [r0, #28]
   19794:	6902      	ldr	r2, [r0, #16]
   19796:	f004 0401 	and.w	r4, r4, #1
   1979a:	e9d0 0105 	ldrd	r0, r1, [r0, #20]
   1979e:	9401      	str	r4, [sp, #4]
   197a0:	f7ff fe4a 	bl	19438 <prepare>
	LL_ASSERT(!ret || ret == -EINPROGRESS);
   197a4:	b108      	cbz	r0, 197aa <lll_resume+0x22>
   197a6:	3044      	adds	r0, #68	; 0x44
   197a8:	d101      	bne.n	197ae <lll_resume+0x26>
}
   197aa:	b002      	add	sp, #8
   197ac:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret || ret == -EINPROGRESS);
   197ae:	4a07      	ldr	r2, [pc, #28]	; (197cc <lll_resume+0x44>)
   197b0:	4907      	ldr	r1, [pc, #28]	; (197d0 <lll_resume+0x48>)
   197b2:	4808      	ldr	r0, [pc, #32]	; (197d4 <lll_resume+0x4c>)
   197b4:	23e4      	movs	r3, #228	; 0xe4
   197b6:	f004 fbc8 	bl	1df4a <printk>
   197ba:	4040      	eors	r0, r0
   197bc:	f380 8811 	msr	BASEPRI, r0
   197c0:	f04f 0003 	mov.w	r0, #3
   197c4:	df02      	svc	2
}
   197c6:	b002      	add	sp, #8
   197c8:	bd10      	pop	{r4, pc}
   197ca:	bf00      	nop
   197cc:	00024904 	.word	0x00024904
   197d0:	000249a4 	.word	0x000249a4
   197d4:	00023fe4 	.word	0x00023fe4

000197d8 <lll_disable>:
{
   197d8:	b530      	push	{r4, r5, lr}
	if (!param || (param == event.curr.param)) {
   197da:	4604      	mov	r4, r0
{
   197dc:	b083      	sub	sp, #12
	if (!param || (param == event.curr.param)) {
   197de:	2800      	cmp	r0, #0
   197e0:	d035      	beq.n	1984e <lll_disable+0x76>
   197e2:	4b26      	ldr	r3, [pc, #152]	; (1987c <lll_disable+0xa4>)
   197e4:	681a      	ldr	r2, [r3, #0]
   197e6:	4282      	cmp	r2, r0
   197e8:	d02b      	beq.n	19842 <lll_disable+0x6a>
		uint8_t idx = UINT8_MAX;
   197ea:	23ff      	movs	r3, #255	; 0xff
		next = ull_prepare_dequeue_iter(&idx);
   197ec:	f10d 0007 	add.w	r0, sp, #7
		uint8_t idx = UINT8_MAX;
   197f0:	f88d 3007 	strb.w	r3, [sp, #7]
		next = ull_prepare_dequeue_iter(&idx);
   197f4:	f7fa ff8e 	bl	14714 <ull_prepare_dequeue_iter>
		while (next) {
   197f8:	4603      	mov	r3, r0
   197fa:	b940      	cbnz	r0, 1980e <lll_disable+0x36>
   197fc:	e01f      	b.n	1983e <lll_disable+0x66>
			    (!param || (param == next->prepare_param.param))) {
   197fe:	4294      	cmp	r4, r2
   19800:	d00e      	beq.n	19820 <lll_disable+0x48>
			next = ull_prepare_dequeue_iter(&idx);
   19802:	f10d 0007 	add.w	r0, sp, #7
   19806:	f7fa ff85 	bl	14714 <ull_prepare_dequeue_iter>
		while (next) {
   1980a:	4603      	mov	r3, r0
   1980c:	b1b8      	cbz	r0, 1983e <lll_disable+0x66>
			if (!next->is_aborted &&
   1980e:	f893 2020 	ldrb.w	r2, [r3, #32]
   19812:	0792      	lsls	r2, r2, #30
   19814:	d4f5      	bmi.n	19802 <lll_disable+0x2a>
				next->is_aborted = 1;
   19816:	68da      	ldr	r2, [r3, #12]
				next->abort_cb(&next->prepare_param,
   19818:	4618      	mov	r0, r3
   1981a:	4611      	mov	r1, r2
			if (!next->is_aborted &&
   1981c:	2c00      	cmp	r4, #0
   1981e:	d1ee      	bne.n	197fe <lll_disable+0x26>
				next->is_aborted = 1;
   19820:	f893 2020 	ldrb.w	r2, [r3, #32]
				next->abort_cb(&next->prepare_param,
   19824:	699d      	ldr	r5, [r3, #24]
				next->is_aborted = 1;
   19826:	f042 0202 	orr.w	r2, r2, #2
   1982a:	f883 2020 	strb.w	r2, [r3, #32]
				next->abort_cb(&next->prepare_param,
   1982e:	47a8      	blx	r5
			next = ull_prepare_dequeue_iter(&idx);
   19830:	f10d 0007 	add.w	r0, sp, #7
   19834:	f7fa ff6e 	bl	14714 <ull_prepare_dequeue_iter>
		while (next) {
   19838:	4603      	mov	r3, r0
   1983a:	2800      	cmp	r0, #0
   1983c:	d1e7      	bne.n	1980e <lll_disable+0x36>
}
   1983e:	b003      	add	sp, #12
   19840:	bd30      	pop	{r4, r5, pc}
		if (event.curr.abort_cb && event.curr.param) {
   19842:	689b      	ldr	r3, [r3, #8]
   19844:	b16b      	cbz	r3, 19862 <lll_disable+0x8a>
   19846:	4621      	mov	r1, r4
			event.curr.abort_cb(NULL, event.curr.param);
   19848:	2000      	movs	r0, #0
   1984a:	4798      	blx	r3
   1984c:	e7cd      	b.n	197ea <lll_disable+0x12>
		if (event.curr.abort_cb && event.curr.param) {
   1984e:	4a0b      	ldr	r2, [pc, #44]	; (1987c <lll_disable+0xa4>)
   19850:	6893      	ldr	r3, [r2, #8]
   19852:	2b00      	cmp	r3, #0
   19854:	d0c9      	beq.n	197ea <lll_disable+0x12>
   19856:	6811      	ldr	r1, [r2, #0]
   19858:	2900      	cmp	r1, #0
   1985a:	d0c6      	beq.n	197ea <lll_disable+0x12>
			event.curr.abort_cb(NULL, event.curr.param);
   1985c:	2000      	movs	r0, #0
   1985e:	4798      	blx	r3
   19860:	e7c3      	b.n	197ea <lll_disable+0x12>
			LL_ASSERT(!param);
   19862:	4a07      	ldr	r2, [pc, #28]	; (19880 <lll_disable+0xa8>)
   19864:	4907      	ldr	r1, [pc, #28]	; (19884 <lll_disable+0xac>)
   19866:	4808      	ldr	r0, [pc, #32]	; (19888 <lll_disable+0xb0>)
   19868:	23ee      	movs	r3, #238	; 0xee
   1986a:	f004 fb6e 	bl	1df4a <printk>
   1986e:	4040      	eors	r0, r0
   19870:	f380 8811 	msr	BASEPRI, r0
   19874:	f04f 0003 	mov.w	r0, #3
   19878:	df02      	svc	2
   1987a:	e7b6      	b.n	197ea <lll_disable+0x12>
   1987c:	2000961c 	.word	0x2000961c
   19880:	00024904 	.word	0x00024904
   19884:	000249b8 	.word	0x000249b8
   19888:	00023fe4 	.word	0x00023fe4

0001988c <lll_prepare_done>:
}
   1988c:	2000      	movs	r0, #0
   1988e:	4770      	bx	lr

00019890 <lll_done>:
{
   19890:	b510      	push	{r4, lr}
   19892:	4604      	mov	r4, r0
	struct lll_event *next = ull_prepare_dequeue_get();
   19894:	f7fa ff30 	bl	146f8 <ull_prepare_dequeue_get>
	LL_ASSERT(!param || next);
   19898:	b13c      	cbz	r4, 198aa <lll_done+0x1a>
   1989a:	b320      	cbz	r0, 198e6 <lll_done+0x56>
		ull = HDR_ULL(((struct lll_hdr *)param)->parent);
   1989c:	6820      	ldr	r0, [r4, #0]
   1989e:	3010      	adds	r0, #16
	evdone = ull_event_done(ull);
   198a0:	f7fa ff66 	bl	14770 <ull_event_done>
	LL_ASSERT(evdone);
   198a4:	b180      	cbz	r0, 198c8 <lll_done+0x38>
}
   198a6:	2000      	movs	r0, #0
   198a8:	bd10      	pop	{r4, pc}
		LL_ASSERT(event.curr.abort_cb);
   198aa:	4c1d      	ldr	r4, [pc, #116]	; (19920 <lll_done+0x90>)
   198ac:	68a3      	ldr	r3, [r4, #8]
   198ae:	b343      	cbz	r3, 19902 <lll_done+0x72>
		param = event.curr.param;
   198b0:	6820      	ldr	r0, [r4, #0]
		event.curr.abort_cb = NULL;
   198b2:	2300      	movs	r3, #0
   198b4:	60a3      	str	r3, [r4, #8]
		event.curr.param = NULL;
   198b6:	6023      	str	r3, [r4, #0]
		if (param) {
   198b8:	2800      	cmp	r0, #0
   198ba:	d0f1      	beq.n	198a0 <lll_done+0x10>
			ull = HDR_ULL(((struct lll_hdr *)param)->parent);
   198bc:	6800      	ldr	r0, [r0, #0]
   198be:	3010      	adds	r0, #16
	evdone = ull_event_done(ull);
   198c0:	f7fa ff56 	bl	14770 <ull_event_done>
	LL_ASSERT(evdone);
   198c4:	2800      	cmp	r0, #0
   198c6:	d1ee      	bne.n	198a6 <lll_done+0x16>
   198c8:	4a16      	ldr	r2, [pc, #88]	; (19924 <lll_done+0x94>)
   198ca:	4917      	ldr	r1, [pc, #92]	; (19928 <lll_done+0x98>)
   198cc:	4817      	ldr	r0, [pc, #92]	; (1992c <lll_done+0x9c>)
   198ce:	f44f 739e 	mov.w	r3, #316	; 0x13c
   198d2:	f004 fb3a 	bl	1df4a <printk>
   198d6:	4040      	eors	r0, r0
   198d8:	f380 8811 	msr	BASEPRI, r0
   198dc:	f04f 0003 	mov.w	r0, #3
   198e0:	df02      	svc	2
}
   198e2:	2000      	movs	r0, #0
   198e4:	bd10      	pop	{r4, pc}
	LL_ASSERT(!param || next);
   198e6:	4a0f      	ldr	r2, [pc, #60]	; (19924 <lll_done+0x94>)
   198e8:	4911      	ldr	r1, [pc, #68]	; (19930 <lll_done+0xa0>)
   198ea:	4810      	ldr	r0, [pc, #64]	; (1992c <lll_done+0x9c>)
   198ec:	f240 131f 	movw	r3, #287	; 0x11f
   198f0:	f004 fb2b 	bl	1df4a <printk>
   198f4:	4040      	eors	r0, r0
   198f6:	f380 8811 	msr	BASEPRI, r0
   198fa:	f04f 0003 	mov.w	r0, #3
   198fe:	df02      	svc	2
   19900:	e7cc      	b.n	1989c <lll_done+0xc>
		LL_ASSERT(event.curr.abort_cb);
   19902:	4a08      	ldr	r2, [pc, #32]	; (19924 <lll_done+0x94>)
   19904:	490b      	ldr	r1, [pc, #44]	; (19934 <lll_done+0xa4>)
   19906:	4809      	ldr	r0, [pc, #36]	; (1992c <lll_done+0x9c>)
   19908:	f44f 7392 	mov.w	r3, #292	; 0x124
   1990c:	f004 fb1d 	bl	1df4a <printk>
   19910:	4040      	eors	r0, r0
   19912:	f380 8811 	msr	BASEPRI, r0
   19916:	f04f 0003 	mov.w	r0, #3
   1991a:	df02      	svc	2
   1991c:	e7c8      	b.n	198b0 <lll_done+0x20>
   1991e:	bf00      	nop
   19920:	2000961c 	.word	0x2000961c
   19924:	00024904 	.word	0x00024904
   19928:	000249e4 	.word	0x000249e4
   1992c:	00023fe4 	.word	0x00023fe4
   19930:	000249c0 	.word	0x000249c0
   19934:	000249d0 	.word	0x000249d0

00019938 <lll_is_done>:
	return !event.curr.abort_cb;
   19938:	4b02      	ldr	r3, [pc, #8]	; (19944 <lll_is_done+0xc>)
   1993a:	6898      	ldr	r0, [r3, #8]
}
   1993c:	fab0 f080 	clz	r0, r0
   19940:	0940      	lsrs	r0, r0, #5
   19942:	4770      	bx	lr
   19944:	2000961c 	.word	0x2000961c

00019948 <lll_is_abort_cb>:
}
   19948:	f06f 0047 	mvn.w	r0, #71	; 0x47
   1994c:	4770      	bx	lr
   1994e:	bf00      	nop

00019950 <lll_evt_offset_get>:
		return MAX(evt->ticks_active_to_start,
   19950:	e9d0 0300 	ldrd	r0, r3, [r0]
}
   19954:	4298      	cmp	r0, r3
   19956:	bf38      	it	cc
   19958:	4618      	movcc	r0, r3
   1995a:	4770      	bx	lr

0001995c <lll_chan_set>:
	switch (chan) {
   1995c:	2826      	cmp	r0, #38	; 0x26
{
   1995e:	b510      	push	{r4, lr}
   19960:	4604      	mov	r4, r0
	switch (chan) {
   19962:	d01c      	beq.n	1999e <lll_chan_set+0x42>
   19964:	2827      	cmp	r0, #39	; 0x27
   19966:	d012      	beq.n	1998e <lll_chan_set+0x32>
   19968:	2825      	cmp	r0, #37	; 0x25
   1996a:	d008      	beq.n	1997e <lll_chan_set+0x22>
		if (chan < 11) {
   1996c:	280a      	cmp	r0, #10
   1996e:	d91e      	bls.n	199ae <lll_chan_set+0x52>
		} else if (chan < 40) {
   19970:	2827      	cmp	r0, #39	; 0x27
   19972:	d821      	bhi.n	199b8 <lll_chan_set+0x5c>
			radio_freq_chan_set(28 + ((chan - 11) * 2U));
   19974:	3003      	adds	r0, #3
   19976:	0040      	lsls	r0, r0, #1
   19978:	f001 fa80 	bl	1ae7c <radio_freq_chan_set>
   1997c:	e002      	b.n	19984 <lll_chan_set+0x28>
		radio_freq_chan_set(2);
   1997e:	2002      	movs	r0, #2
   19980:	f001 fa7c 	bl	1ae7c <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   19984:	4620      	mov	r0, r4
}
   19986:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   1998a:	f001 ba7d 	b.w	1ae88 <radio_whiten_iv_set>
		radio_freq_chan_set(80);
   1998e:	2050      	movs	r0, #80	; 0x50
   19990:	f001 fa74 	bl	1ae7c <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   19994:	4620      	mov	r0, r4
}
   19996:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   1999a:	f001 ba75 	b.w	1ae88 <radio_whiten_iv_set>
		radio_freq_chan_set(26);
   1999e:	201a      	movs	r0, #26
   199a0:	f001 fa6c 	bl	1ae7c <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   199a4:	4620      	mov	r0, r4
}
   199a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   199aa:	f001 ba6d 	b.w	1ae88 <radio_whiten_iv_set>
			radio_freq_chan_set(4 + (chan * 2U));
   199ae:	3002      	adds	r0, #2
   199b0:	0040      	lsls	r0, r0, #1
   199b2:	f001 fa63 	bl	1ae7c <radio_freq_chan_set>
   199b6:	e7e5      	b.n	19984 <lll_chan_set+0x28>
			LL_ASSERT(0);
   199b8:	4a06      	ldr	r2, [pc, #24]	; (199d4 <lll_chan_set+0x78>)
   199ba:	4907      	ldr	r1, [pc, #28]	; (199d8 <lll_chan_set+0x7c>)
   199bc:	4807      	ldr	r0, [pc, #28]	; (199dc <lll_chan_set+0x80>)
   199be:	f44f 73c3 	mov.w	r3, #390	; 0x186
   199c2:	f004 fac2 	bl	1df4a <printk>
   199c6:	4040      	eors	r0, r0
   199c8:	f380 8811 	msr	BASEPRI, r0
   199cc:	f04f 0003 	mov.w	r0, #3
   199d0:	df02      	svc	2
   199d2:	e7d7      	b.n	19984 <lll_chan_set+0x28>
   199d4:	00024904 	.word	0x00024904
   199d8:	00024054 	.word	0x00024054
   199dc:	00023fe4 	.word	0x00023fe4

000199e0 <lll_radio_tx_ready_delay_get>:
	return radio_tx_ready_delay_get(phy, flags);
   199e0:	f001 bac0 	b.w	1af64 <radio_tx_ready_delay_get>

000199e4 <lll_isr_tx_status_reset>:
{
   199e4:	b508      	push	{r3, lr}
	radio_status_reset();
   199e6:	f001 faf5 	bl	1afd4 <radio_status_reset>
}
   199ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_status_reset();
   199ee:	f001 bbc1 	b.w	1b174 <radio_tmr_status_reset>
   199f2:	bf00      	nop

000199f4 <lll_isr_rx_status_reset>:
{
   199f4:	b508      	push	{r3, lr}
	radio_status_reset();
   199f6:	f001 faed 	bl	1afd4 <radio_status_reset>
	radio_tmr_status_reset();
   199fa:	f001 fbbb 	bl	1b174 <radio_tmr_status_reset>
}
   199fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   19a02:	f001 bb67 	b.w	1b0d4 <radio_rssi_status_reset>
   19a06:	bf00      	nop

00019a08 <lll_isr_status_reset>:
{
   19a08:	b508      	push	{r3, lr}
	radio_status_reset();
   19a0a:	f001 fae3 	bl	1afd4 <radio_status_reset>
	radio_tmr_status_reset();
   19a0e:	f001 fbb1 	bl	1b174 <radio_tmr_status_reset>
	radio_filter_status_reset();
   19a12:	f001 fb97 	bl	1b144 <radio_filter_status_reset>
	radio_ar_status_reset();
   19a16:	f001 fd9d 	bl	1b554 <radio_ar_status_reset>
}
   19a1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   19a1e:	f001 bb59 	b.w	1b0d4 <radio_rssi_status_reset>
   19a22:	bf00      	nop

00019a24 <lll_isr_cleanup>:
{
   19a24:	b508      	push	{r3, lr}
   19a26:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   19a28:	4813      	ldr	r0, [pc, #76]	; (19a78 <lll_isr_cleanup+0x54>)
   19a2a:	f001 f9af 	bl	1ad8c <radio_isr_set>
	if (!radio_is_idle()) {
   19a2e:	f001 faf1 	bl	1b014 <radio_is_idle>
   19a32:	b1e8      	cbz	r0, 19a70 <lll_isr_cleanup+0x4c>
	radio_tmr_stop();
   19a34:	f001 fc66 	bl	1b304 <radio_tmr_stop>
	err = lll_hfclock_off();
   19a38:	f000 f872 	bl	19b20 <lll_hfclock_off>
	LL_ASSERT(!err || err == -EBUSY);
   19a3c:	b108      	cbz	r0, 19a42 <lll_isr_cleanup+0x1e>
   19a3e:	3010      	adds	r0, #16
   19a40:	d104      	bne.n	19a4c <lll_isr_cleanup+0x28>
}
   19a42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   19a46:	2000      	movs	r0, #0
   19a48:	f7ff bf22 	b.w	19890 <lll_done>
	LL_ASSERT(!err || err == -EBUSY);
   19a4c:	4a0b      	ldr	r2, [pc, #44]	; (19a7c <lll_isr_cleanup+0x58>)
   19a4e:	490c      	ldr	r1, [pc, #48]	; (19a80 <lll_isr_cleanup+0x5c>)
   19a50:	480c      	ldr	r0, [pc, #48]	; (19a84 <lll_isr_cleanup+0x60>)
   19a52:	f240 13e9 	movw	r3, #489	; 0x1e9
   19a56:	f004 fa78 	bl	1df4a <printk>
   19a5a:	4040      	eors	r0, r0
   19a5c:	f380 8811 	msr	BASEPRI, r0
   19a60:	f04f 0003 	mov.w	r0, #3
   19a64:	df02      	svc	2
	lll_done(NULL);
   19a66:	2000      	movs	r0, #0
}
   19a68:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   19a6c:	f7ff bf10 	b.w	19890 <lll_done>
		radio_disable();
   19a70:	f001 fa98 	bl	1afa4 <radio_disable>
   19a74:	e7de      	b.n	19a34 <lll_isr_cleanup+0x10>
   19a76:	bf00      	nop
   19a78:	00019361 	.word	0x00019361
   19a7c:	00024904 	.word	0x00024904
   19a80:	000249ec 	.word	0x000249ec
   19a84:	00023fe4 	.word	0x00023fe4

00019a88 <clock_ready>:
	return err;
}

static void clock_ready(struct device *dev, clock_control_subsys_t subsys,
			void *user_data)
{
   19a88:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   19a8a:	f003 be71 	b.w	1d770 <z_impl_k_sem_give>
   19a8e:	bf00      	nop

00019a90 <lll_clock_init>:
{
   19a90:	b510      	push	{r4, lr}
   19a92:	4807      	ldr	r0, [pc, #28]	; (19ab0 <lll_clock_init+0x20>)
   19a94:	f002 fffe 	bl	1ca94 <z_impl_device_get_binding>
	dev = device_get_binding(DT_LABEL(DT_INST(0, nordic_nrf_clock)));
   19a98:	4a06      	ldr	r2, [pc, #24]	; (19ab4 <lll_clock_init+0x24>)
   19a9a:	6010      	str	r0, [r2, #0]
	if (!dev) {
   19a9c:	b128      	cbz	r0, 19aaa <lll_clock_init+0x1a>
   19a9e:	6883      	ldr	r3, [r0, #8]
}
   19aa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   19aa4:	681b      	ldr	r3, [r3, #0]
   19aa6:	2101      	movs	r1, #1
   19aa8:	4718      	bx	r3
   19aaa:	f06f 0012 	mvn.w	r0, #18
   19aae:	bd10      	pop	{r4, pc}
   19ab0:	00024a0c 	.word	0x00024a0c
   19ab4:	20009630 	.word	0x20009630

00019ab8 <lll_clock_wait>:
	if (done) {
   19ab8:	4b12      	ldr	r3, [pc, #72]	; (19b04 <lll_clock_wait+0x4c>)
   19aba:	7819      	ldrb	r1, [r3, #0]
   19abc:	b109      	cbz	r1, 19ac2 <lll_clock_wait+0xa>
		return 0;
   19abe:	2000      	movs	r0, #0
}
   19ac0:	4770      	bx	lr
{
   19ac2:	b530      	push	{r4, r5, lr}
	struct clock_control_async_data async_data = {
   19ac4:	4a10      	ldr	r2, [pc, #64]	; (19b08 <lll_clock_wait+0x50>)
{
   19ac6:	b08b      	sub	sp, #44	; 0x2c
	done = true;
   19ac8:	2401      	movs	r4, #1
	struct clock_control_async_data async_data = {
   19aca:	ad04      	add	r5, sp, #16
   19acc:	e9cd 2502 	strd	r2, r5, [sp, #8]
   19ad0:	9101      	str	r1, [sp, #4]
	done = true;
   19ad2:	701c      	strb	r4, [r3, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   19ad4:	4622      	mov	r2, r4
   19ad6:	4628      	mov	r0, r5
   19ad8:	f009 fa87 	bl	22fea <z_impl_k_sem_init>
	err = clock_control_async_on(dev, CLOCK_CONTROL_NRF_SUBSYS_LF,
   19adc:	4b0b      	ldr	r3, [pc, #44]	; (19b0c <lll_clock_wait+0x54>)
   19ade:	6818      	ldr	r0, [r3, #0]
					 struct clock_control_async_data *data)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	if (!api->async_on) {
   19ae0:	6883      	ldr	r3, [r0, #8]
   19ae2:	689b      	ldr	r3, [r3, #8]
   19ae4:	b15b      	cbz	r3, 19afe <lll_clock_wait+0x46>
		return -ENOTSUP;
	}

	return api->async_on(dev, sys, data);
   19ae6:	4621      	mov	r1, r4
   19ae8:	aa01      	add	r2, sp, #4
   19aea:	4798      	blx	r3
	if (err) {
   19aec:	b928      	cbnz	r0, 19afa <lll_clock_wait+0x42>
	return z_impl_k_sem_take(sem, timeout);
   19aee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   19af2:	2300      	movs	r3, #0
   19af4:	4628      	mov	r0, r5
   19af6:	f003 fe61 	bl	1d7bc <z_impl_k_sem_take>
}
   19afa:	b00b      	add	sp, #44	; 0x2c
   19afc:	bd30      	pop	{r4, r5, pc}
		return -ENOTSUP;
   19afe:	f06f 0022 	mvn.w	r0, #34	; 0x22
   19b02:	e7fa      	b.n	19afa <lll_clock_wait+0x42>
   19b04:	2000a869 	.word	0x2000a869
   19b08:	00019a89 	.word	0x00019a89
   19b0c:	20009630 	.word	0x20009630

00019b10 <lll_hfclock_on>:
	err = clock_control_on(dev, CLOCK_CONTROL_NRF_SUBSYS_HF);
   19b10:	4b02      	ldr	r3, [pc, #8]	; (19b1c <lll_hfclock_on+0xc>)
   19b12:	6818      	ldr	r0, [r3, #0]
	return api->on(dev, sys);
   19b14:	6883      	ldr	r3, [r0, #8]
   19b16:	2100      	movs	r1, #0
   19b18:	681b      	ldr	r3, [r3, #0]
   19b1a:	4718      	bx	r3
   19b1c:	20009630 	.word	0x20009630

00019b20 <lll_hfclock_off>:
	err = clock_control_off(dev, CLOCK_CONTROL_NRF_SUBSYS_HF);
   19b20:	4b02      	ldr	r3, [pc, #8]	; (19b2c <lll_hfclock_off+0xc>)
   19b22:	6818      	ldr	r0, [r3, #0]
	return api->off(dev, sys);
   19b24:	6883      	ldr	r3, [r0, #8]
   19b26:	2100      	movs	r1, #0
   19b28:	685b      	ldr	r3, [r3, #4]
   19b2a:	4718      	bx	r3
   19b2c:	20009630 	.word	0x20009630

00019b30 <prepare_cb>:
{
   19b30:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct lll_scan *lll = p->param;
   19b32:	68c4      	ldr	r4, [r0, #12]
	uint32_t aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   19b34:	4b6b      	ldr	r3, [pc, #428]	; (19ce4 <prepare_cb+0x1b4>)

static inline int lll_is_stop(void *lll)
{
	struct lll_hdr *hdr = lll;

	return !!hdr->is_stop;
   19b36:	7925      	ldrb	r5, [r4, #4]
{
   19b38:	b08d      	sub	sp, #52	; 0x34
	if (lll_is_stop(lll)) {
   19b3a:	f015 0501 	ands.w	r5, r5, #1
	uint32_t aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   19b3e:	930b      	str	r3, [sp, #44]	; 0x2c
	if (lll_is_stop(lll)) {
   19b40:	d16e      	bne.n	19c20 <prepare_cb+0xf0>
	lll->state = 0U;
   19b42:	7da3      	ldrb	r3, [r4, #22]
   19b44:	f365 0300 	bfi	r3, r5, #0, #1
   19b48:	75a3      	strb	r3, [r4, #22]
	radio_reset();
   19b4a:	4606      	mov	r6, r0
   19b4c:	f001 f93e 	bl	1adcc <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   19b50:	4628      	mov	r0, r5
   19b52:	f001 f98d 	bl	1ae70 <radio_tx_power_set>
	radio_phy_set(0, 0);
   19b56:	4629      	mov	r1, r5
   19b58:	4628      	mov	r0, r5
   19b5a:	f001 f95d 	bl	1ae18 <radio_phy_set>
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, 0);
   19b5e:	462a      	mov	r2, r5
   19b60:	2125      	movs	r1, #37	; 0x25
   19b62:	2008      	movs	r0, #8
   19b64:	f001 f9bc 	bl	1aee0 <radio_pkt_configure>
	node_rx = ull_pdu_rx_alloc_peek(1);
   19b68:	2001      	movs	r0, #1
   19b6a:	f7fa fd3f 	bl	145ec <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   19b6e:	4605      	mov	r5, r0
   19b70:	2800      	cmp	r0, #0
   19b72:	f000 80a9 	beq.w	19cc8 <prepare_cb+0x198>
	radio_pkt_rx_set(node_rx->pdu);
   19b76:	f105 001c 	add.w	r0, r5, #28
   19b7a:	f001 f9e7 	bl	1af4c <radio_pkt_rx_set>
	radio_aa_set((uint8_t *)&aa);
   19b7e:	a80b      	add	r0, sp, #44	; 0x2c
   19b80:	f001 f994 	bl	1aeac <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   19b84:	4958      	ldr	r1, [pc, #352]	; (19ce8 <prepare_cb+0x1b8>)
   19b86:	f240 605b 	movw	r0, #1627	; 0x65b
   19b8a:	f001 fa4d 	bl	1b028 <radio_crc_configure>
	lll_chan_set(37 + lll->chan);
   19b8e:	7da0      	ldrb	r0, [r4, #22]
   19b90:	f3c0 0041 	ubfx	r0, r0, #1, #2
   19b94:	3025      	adds	r0, #37	; 0x25
   19b96:	f7ff fee1 	bl	1995c <lll_chan_set>
	radio_isr_set(isr_rx, lll);
   19b9a:	4621      	mov	r1, r4
   19b9c:	4853      	ldr	r0, [pc, #332]	; (19cec <prepare_cb+0x1bc>)
   19b9e:	f001 f8f5 	bl	1ad8c <radio_isr_set>
	radio_tmr_tifs_set(EVENT_IFS_US);
   19ba2:	2096      	movs	r0, #150	; 0x96
   19ba4:	f001 faf6 	bl	1b194 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
   19ba8:	2300      	movs	r3, #0
   19baa:	461a      	mov	r2, r3
   19bac:	4619      	mov	r1, r3
   19bae:	4618      	mov	r0, r3
   19bb0:	f001 fa66 	bl	1b080 <radio_switch_complete_and_tx>
	if (ull_filter_lll_rl_enabled()) {
   19bb4:	f7ff fba2 	bl	192fc <ull_filter_lll_rl_enabled>
   19bb8:	b9e0      	cbnz	r0, 19bf4 <prepare_cb+0xc4>
	if (IS_ENABLED(CONFIG_BT_CTLR_FILTER) && lll->filter_policy) {
   19bba:	7da3      	ldrb	r3, [r4, #22]
   19bbc:	f013 0f18 	tst.w	r3, #24
   19bc0:	d179      	bne.n	19cb6 <prepare_cb+0x186>
	ticks_at_event += lll_evt_offset_get(evt);
   19bc2:	6820      	ldr	r0, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   19bc4:	6835      	ldr	r5, [r6, #0]
	ticks_at_event += lll_evt_offset_get(evt);
   19bc6:	f7ff fec3 	bl	19950 <lll_evt_offset_get>
   19bca:	4405      	add	r5, r0
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
   19bcc:	6872      	ldr	r2, [r6, #4]
   19bce:	f105 0109 	add.w	r1, r5, #9
   19bd2:	2000      	movs	r0, #0
   19bd4:	f001 faea 	bl	1b1ac <radio_tmr_start>
	radio_tmr_end_capture();
   19bd8:	f001 fbc8 	bl	1b36c <radio_tmr_end_capture>
	radio_rssi_measure();
   19bdc:	f001 fa6a 	bl	1b0b4 <radio_rssi_measure>
		if (lll->ticks_window) {
   19be0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   19be2:	2b00      	cmp	r3, #0
   19be4:	d143      	bne.n	19c6e <prepare_cb+0x13e>
		ret = lll_prepare_done(lll);
   19be6:	4620      	mov	r0, r4
   19be8:	f7ff fe50 	bl	1988c <lll_prepare_done>
		LL_ASSERT(!ret);
   19bec:	bb78      	cbnz	r0, 19c4e <prepare_cb+0x11e>
}
   19bee:	2000      	movs	r0, #0
   19bf0:	b00d      	add	sp, #52	; 0x34
   19bf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			ull_filter_lll_get(!!(lll->filter_policy & 0x1));
   19bf4:	7da0      	ldrb	r0, [r4, #22]
   19bf6:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   19bfa:	f7ff fb1d 	bl	19238 <ull_filter_lll_get>
   19bfe:	4605      	mov	r5, r0
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   19c00:	f10d 002b 	add.w	r0, sp, #43	; 0x2b
   19c04:	f7ff fa22 	bl	1904c <ull_filter_lll_irks_get>
		radio_filter_configure(filter->enable_bitmask,
   19c08:	7869      	ldrb	r1, [r5, #1]
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   19c0a:	4607      	mov	r7, r0
		radio_filter_configure(filter->enable_bitmask,
   19c0c:	1caa      	adds	r2, r5, #2
   19c0e:	7828      	ldrb	r0, [r5, #0]
   19c10:	f001 fa72 	bl	1b0f8 <radio_filter_configure>
		radio_ar_configure(count, irks);
   19c14:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
   19c18:	4639      	mov	r1, r7
   19c1a:	f001 fc61 	bl	1b4e0 <radio_ar_configure>
   19c1e:	e7d0      	b.n	19bc2 <prepare_cb+0x92>
		err = lll_hfclock_off();
   19c20:	f7ff ff7e 	bl	19b20 <lll_hfclock_off>
		LL_ASSERT(!err || err == -EBUSY);
   19c24:	b168      	cbz	r0, 19c42 <prepare_cb+0x112>
   19c26:	3010      	adds	r0, #16
   19c28:	d00b      	beq.n	19c42 <prepare_cb+0x112>
   19c2a:	4a31      	ldr	r2, [pc, #196]	; (19cf0 <prepare_cb+0x1c0>)
   19c2c:	4931      	ldr	r1, [pc, #196]	; (19cf4 <prepare_cb+0x1c4>)
   19c2e:	4832      	ldr	r0, [pc, #200]	; (19cf8 <prepare_cb+0x1c8>)
   19c30:	238a      	movs	r3, #138	; 0x8a
   19c32:	f004 f98a 	bl	1df4a <printk>
   19c36:	4040      	eors	r0, r0
   19c38:	f380 8811 	msr	BASEPRI, r0
   19c3c:	f04f 0003 	mov.w	r0, #3
   19c40:	df02      	svc	2
		lll_done(NULL);
   19c42:	2000      	movs	r0, #0
   19c44:	f7ff fe24 	bl	19890 <lll_done>
}
   19c48:	2000      	movs	r0, #0
   19c4a:	b00d      	add	sp, #52	; 0x34
   19c4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LL_ASSERT(!ret);
   19c4e:	4a28      	ldr	r2, [pc, #160]	; (19cf0 <prepare_cb+0x1c0>)
   19c50:	492a      	ldr	r1, [pc, #168]	; (19cfc <prepare_cb+0x1cc>)
   19c52:	4829      	ldr	r0, [pc, #164]	; (19cf8 <prepare_cb+0x1c8>)
   19c54:	f240 131d 	movw	r3, #285	; 0x11d
   19c58:	f004 f977 	bl	1df4a <printk>
   19c5c:	4040      	eors	r0, r0
   19c5e:	f380 8811 	msr	BASEPRI, r0
   19c62:	f04f 0003 	mov.w	r0, #3
   19c66:	df02      	svc	2
}
   19c68:	2000      	movs	r0, #0
   19c6a:	b00d      	add	sp, #52	; 0x34
   19c6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   19c6e:	4824      	ldr	r0, [pc, #144]	; (19d00 <prepare_cb+0x1d0>)
   19c70:	4a24      	ldr	r2, [pc, #144]	; (19d04 <prepare_cb+0x1d4>)
   19c72:	9300      	str	r3, [sp, #0]
   19c74:	2100      	movs	r1, #0
   19c76:	f240 1603 	movw	r6, #259	; 0x103
   19c7a:	e9cd 0607 	strd	r0, r6, [sp, #28]
   19c7e:	e9cd 1204 	strd	r1, r2, [sp, #16]
   19c82:	462b      	mov	r3, r5
   19c84:	e9cd 1102 	strd	r1, r1, [sp, #8]
   19c88:	9406      	str	r4, [sp, #24]
   19c8a:	9101      	str	r1, [sp, #4]
   19c8c:	4608      	mov	r0, r1
   19c8e:	2201      	movs	r2, #1
   19c90:	f7f7 fdf8 	bl	11884 <ticker_start>
			LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   19c94:	f030 0302 	bics.w	r3, r0, #2
   19c98:	d0a5      	beq.n	19be6 <prepare_cb+0xb6>
   19c9a:	4a15      	ldr	r2, [pc, #84]	; (19cf0 <prepare_cb+0x1c0>)
   19c9c:	491a      	ldr	r1, [pc, #104]	; (19d08 <prepare_cb+0x1d8>)
   19c9e:	4816      	ldr	r0, [pc, #88]	; (19cf8 <prepare_cb+0x1c8>)
   19ca0:	f44f 7382 	mov.w	r3, #260	; 0x104
   19ca4:	f004 f951 	bl	1df4a <printk>
   19ca8:	4040      	eors	r0, r0
   19caa:	f380 8811 	msr	BASEPRI, r0
   19cae:	f04f 0003 	mov.w	r0, #3
   19cb2:	df02      	svc	2
   19cb4:	e797      	b.n	19be6 <prepare_cb+0xb6>
		struct lll_filter *wl = ull_filter_lll_get(true);
   19cb6:	2001      	movs	r0, #1
   19cb8:	f7ff fabe 	bl	19238 <ull_filter_lll_get>
		radio_filter_configure(wl->enable_bitmask,
   19cbc:	7841      	ldrb	r1, [r0, #1]
   19cbe:	1c82      	adds	r2, r0, #2
   19cc0:	7800      	ldrb	r0, [r0, #0]
   19cc2:	f001 fa19 	bl	1b0f8 <radio_filter_configure>
   19cc6:	e77c      	b.n	19bc2 <prepare_cb+0x92>
	LL_ASSERT(node_rx);
   19cc8:	4a09      	ldr	r2, [pc, #36]	; (19cf0 <prepare_cb+0x1c0>)
   19cca:	4910      	ldr	r1, [pc, #64]	; (19d0c <prepare_cb+0x1dc>)
   19ccc:	480a      	ldr	r0, [pc, #40]	; (19cf8 <prepare_cb+0x1c8>)
   19cce:	23a8      	movs	r3, #168	; 0xa8
   19cd0:	f004 f93b 	bl	1df4a <printk>
   19cd4:	4040      	eors	r0, r0
   19cd6:	f380 8811 	msr	BASEPRI, r0
   19cda:	f04f 0003 	mov.w	r0, #3
   19cde:	df02      	svc	2
   19ce0:	e749      	b.n	19b76 <prepare_cb+0x46>
   19ce2:	bf00      	nop
   19ce4:	8e89bed6 	.word	0x8e89bed6
   19ce8:	00555555 	.word	0x00555555
   19cec:	00005341 	.word	0x00005341
   19cf0:	00024a28 	.word	0x00024a28
   19cf4:	000249ec 	.word	0x000249ec
   19cf8:	00023fe4 	.word	0x00023fe4
   19cfc:	000242a0 	.word	0x000242a0
   19d00:	00019ee1 	.word	0x00019ee1
   19d04:	00019d11 	.word	0x00019d11
   19d08:	00024a7c 	.word	0x00024a7c
   19d0c:	00024a74 	.word	0x00024a74

00019d10 <ticker_stop_cb>:
{
   19d10:	b508      	push	{r3, lr}
	radio_isr_set(isr_cleanup, param);
   19d12:	4619      	mov	r1, r3
   19d14:	4803      	ldr	r0, [pc, #12]	; (19d24 <ticker_stop_cb+0x14>)
   19d16:	f001 f839 	bl	1ad8c <radio_isr_set>
}
   19d1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_disable();
   19d1e:	f001 b941 	b.w	1afa4 <radio_disable>
   19d22:	bf00      	nop
   19d24:	00019ff1 	.word	0x00019ff1

00019d28 <isr_common_done>:
{
   19d28:	b530      	push	{r4, r5, lr}
   19d2a:	b083      	sub	sp, #12
   19d2c:	4605      	mov	r5, r0
	lll_isr_status_reset();
   19d2e:	f7ff fe6b 	bl	19a08 <lll_isr_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   19d32:	2096      	movs	r0, #150	; 0x96
   19d34:	f001 fa2e 	bl	1b194 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
   19d38:	2300      	movs	r3, #0
   19d3a:	4618      	mov	r0, r3
   19d3c:	461a      	mov	r2, r3
   19d3e:	4619      	mov	r1, r3
   19d40:	f001 f99e 	bl	1b080 <radio_switch_complete_and_tx>
	node_rx = ull_pdu_rx_alloc_peek(1);
   19d44:	2001      	movs	r0, #1
   19d46:	f7fa fc51 	bl	145ec <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   19d4a:	4604      	mov	r4, r0
   19d4c:	b1c0      	cbz	r0, 19d80 <isr_common_done+0x58>
	radio_pkt_rx_set(node_rx->pdu);
   19d4e:	f104 001c 	add.w	r0, r4, #28
   19d52:	f001 f8fb 	bl	1af4c <radio_pkt_rx_set>
	if (ull_filter_lll_rl_enabled()) {
   19d56:	f7ff fad1 	bl	192fc <ull_filter_lll_rl_enabled>
   19d5a:	b938      	cbnz	r0, 19d6c <isr_common_done+0x44>
	radio_rssi_measure();
   19d5c:	f001 f9aa 	bl	1b0b4 <radio_rssi_measure>
	radio_isr_set(isr_rx, param);
   19d60:	480e      	ldr	r0, [pc, #56]	; (19d9c <isr_common_done+0x74>)
   19d62:	4629      	mov	r1, r5
   19d64:	f001 f812 	bl	1ad8c <radio_isr_set>
}
   19d68:	b003      	add	sp, #12
   19d6a:	bd30      	pop	{r4, r5, pc}
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   19d6c:	f10d 0007 	add.w	r0, sp, #7
   19d70:	f7ff f96c 	bl	1904c <ull_filter_lll_irks_get>
   19d74:	4601      	mov	r1, r0
		radio_ar_configure(count, irks);
   19d76:	f89d 0007 	ldrb.w	r0, [sp, #7]
   19d7a:	f001 fbb1 	bl	1b4e0 <radio_ar_configure>
   19d7e:	e7ed      	b.n	19d5c <isr_common_done+0x34>
	LL_ASSERT(node_rx);
   19d80:	4a07      	ldr	r2, [pc, #28]	; (19da0 <isr_common_done+0x78>)
   19d82:	4908      	ldr	r1, [pc, #32]	; (19da4 <isr_common_done+0x7c>)
   19d84:	4808      	ldr	r0, [pc, #32]	; (19da8 <isr_common_done+0x80>)
   19d86:	f44f 73fd 	mov.w	r3, #506	; 0x1fa
   19d8a:	f004 f8de 	bl	1df4a <printk>
   19d8e:	4040      	eors	r0, r0
   19d90:	f380 8811 	msr	BASEPRI, r0
   19d94:	f04f 0003 	mov.w	r0, #3
   19d98:	df02      	svc	2
   19d9a:	e7d8      	b.n	19d4e <isr_common_done+0x26>
   19d9c:	00005341 	.word	0x00005341
   19da0:	00024a28 	.word	0x00024a28
   19da4:	00024a74 	.word	0x00024a74
   19da8:	00023fe4 	.word	0x00023fe4

00019dac <isr_done>:
{
   19dac:	b510      	push	{r4, lr}
   19dae:	4604      	mov	r4, r0
	isr_common_done(param);
   19db0:	f7ff ffba 	bl	19d28 <isr_common_done>
	lll->state = 0U;
   19db4:	7da3      	ldrb	r3, [r4, #22]
   19db6:	f36f 0300 	bfc	r3, #0, #1
   19dba:	75a3      	strb	r3, [r4, #22]
	radio_rx_enable();
   19dbc:	f001 f8ec 	bl	1af98 <radio_rx_enable>
}
   19dc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_tmr_end_capture();
   19dc4:	f001 bad2 	b.w	1b36c <radio_tmr_end_capture>

00019dc8 <isr_tx>:
{
   19dc8:	b570      	push	{r4, r5, r6, lr}
   19dca:	b082      	sub	sp, #8
   19dcc:	4605      	mov	r5, r0
	lll_isr_tx_status_reset();
   19dce:	f7ff fe09 	bl	199e4 <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   19dd2:	2096      	movs	r0, #150	; 0x96
   19dd4:	f001 f9de 	bl	1b194 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
   19dd8:	2300      	movs	r3, #0
   19dda:	4618      	mov	r0, r3
   19ddc:	461a      	mov	r2, r3
   19dde:	4619      	mov	r1, r3
   19de0:	f001 f94e 	bl	1b080 <radio_switch_complete_and_tx>
	node_rx = ull_pdu_rx_alloc_peek(1);
   19de4:	2001      	movs	r0, #1
   19de6:	f7fa fc01 	bl	145ec <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   19dea:	4604      	mov	r4, r0
   19dec:	2800      	cmp	r0, #0
   19dee:	d03d      	beq.n	19e6c <isr_tx+0xa4>
	radio_pkt_rx_set(node_rx->pdu);
   19df0:	f104 001c 	add.w	r0, r4, #28
   19df4:	f001 f8aa 	bl	1af4c <radio_pkt_rx_set>
	LL_ASSERT(!radio_is_ready());
   19df8:	f001 f8f8 	bl	1afec <radio_is_ready>
   19dfc:	b9d8      	cbnz	r0, 19e36 <isr_tx+0x6e>
	if (ull_filter_lll_rl_enabled()) {
   19dfe:	f7ff fa7d 	bl	192fc <ull_filter_lll_rl_enabled>
   19e02:	bb48      	cbnz	r0, 19e58 <isr_tx+0x90>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   19e04:	f001 fac0 	bl	1b388 <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(0, 0);
   19e08:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   19e0a:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(0, 0);
   19e0c:	4608      	mov	r0, r1
   19e0e:	f001 f8b5 	bl	1af7c <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(0, 0);
   19e12:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(0, 0);
   19e14:	4606      	mov	r6, r0
	hcto -= radio_tx_chain_delay_get(0, 0);
   19e16:	4608      	mov	r0, r1
   19e18:	f001 f8ae 	bl	1af78 <radio_tx_chain_delay_get>
   19e1c:	4434      	add	r4, r6
   19e1e:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
   19e20:	1a20      	subs	r0, r4, r0
   19e22:	f001 fa83 	bl	1b32c <radio_tmr_hcto_configure>
	radio_rssi_measure();
   19e26:	f001 f945 	bl	1b0b4 <radio_rssi_measure>
	radio_isr_set(isr_rx, param);
   19e2a:	4817      	ldr	r0, [pc, #92]	; (19e88 <isr_tx+0xc0>)
   19e2c:	4629      	mov	r1, r5
   19e2e:	f000 ffad 	bl	1ad8c <radio_isr_set>
}
   19e32:	b002      	add	sp, #8
   19e34:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(!radio_is_ready());
   19e36:	4a15      	ldr	r2, [pc, #84]	; (19e8c <isr_tx+0xc4>)
   19e38:	4915      	ldr	r1, [pc, #84]	; (19e90 <isr_tx+0xc8>)
   19e3a:	4816      	ldr	r0, [pc, #88]	; (19e94 <isr_tx+0xcc>)
   19e3c:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
   19e40:	f004 f883 	bl	1df4a <printk>
   19e44:	4040      	eors	r0, r0
   19e46:	f380 8811 	msr	BASEPRI, r0
   19e4a:	f04f 0003 	mov.w	r0, #3
   19e4e:	df02      	svc	2
	if (ull_filter_lll_rl_enabled()) {
   19e50:	f7ff fa54 	bl	192fc <ull_filter_lll_rl_enabled>
   19e54:	2800      	cmp	r0, #0
   19e56:	d0d5      	beq.n	19e04 <isr_tx+0x3c>
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   19e58:	f10d 0007 	add.w	r0, sp, #7
   19e5c:	f7ff f8f6 	bl	1904c <ull_filter_lll_irks_get>
   19e60:	4601      	mov	r1, r0
		radio_ar_configure(count, irks);
   19e62:	f89d 0007 	ldrb.w	r0, [sp, #7]
   19e66:	f001 fb3b 	bl	1b4e0 <radio_ar_configure>
   19e6a:	e7cb      	b.n	19e04 <isr_tx+0x3c>
	LL_ASSERT(node_rx);
   19e6c:	4a07      	ldr	r2, [pc, #28]	; (19e8c <isr_tx+0xc4>)
   19e6e:	490a      	ldr	r1, [pc, #40]	; (19e98 <isr_tx+0xd0>)
   19e70:	4808      	ldr	r0, [pc, #32]	; (19e94 <isr_tx+0xcc>)
   19e72:	f44f 73e6 	mov.w	r3, #460	; 0x1cc
   19e76:	f004 f868 	bl	1df4a <printk>
   19e7a:	4040      	eors	r0, r0
   19e7c:	f380 8811 	msr	BASEPRI, r0
   19e80:	f04f 0003 	mov.w	r0, #3
   19e84:	df02      	svc	2
   19e86:	e7b3      	b.n	19df0 <isr_tx+0x28>
   19e88:	00005341 	.word	0x00005341
   19e8c:	00024a28 	.word	0x00024a28
   19e90:	00024a98 	.word	0x00024a98
   19e94:	00023fe4 	.word	0x00023fe4
   19e98:	00024a74 	.word	0x00024a74

00019e9c <resume_prepare_cb>:
	struct evt_hdr *evt = HDR_LLL2EVT(p->param);
   19e9c:	68c3      	ldr	r3, [r0, #12]
{
   19e9e:	b570      	push	{r4, r5, r6, lr}
	struct evt_hdr *evt = HDR_LLL2EVT(p->param);
   19ea0:	681e      	ldr	r6, [r3, #0]
{
   19ea2:	4604      	mov	r4, r0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_evt_offset_get(evt);
   19ea4:	f7f7 fda0 	bl	119e8 <ticker_ticks_now_get>
   19ea8:	4605      	mov	r5, r0
   19eaa:	4630      	mov	r0, r6
   19eac:	f7ff fd50 	bl	19950 <lll_evt_offset_get>
	p->remainder = 0;
   19eb0:	2300      	movs	r3, #0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_evt_offset_get(evt);
   19eb2:	1a2d      	subs	r5, r5, r0
	p->remainder = 0;
   19eb4:	e9c4 5300 	strd	r5, r3, [r4]
	p->lazy = 0;
   19eb8:	8123      	strh	r3, [r4, #8]
	return prepare_cb(p);
   19eba:	4620      	mov	r0, r4
}
   19ebc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return prepare_cb(p);
   19ec0:	f7ff be36 	b.w	19b30 <prepare_cb>

00019ec4 <isr_window>:
{
   19ec4:	b508      	push	{r3, lr}
	isr_common_done(param);
   19ec6:	f7ff ff2f 	bl	19d28 <isr_common_done>
	ticks_at_start = ticker_ticks_now_get() +
   19eca:	f7f7 fd8d 	bl	119e8 <ticker_ticks_now_get>
	remainder_us = radio_tmr_start_tick(0, ticks_at_start);
   19ece:	1cc1      	adds	r1, r0, #3
   19ed0:	2000      	movs	r0, #0
   19ed2:	f001 f9d7 	bl	1b284 <radio_tmr_start_tick>
}
   19ed6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_end_capture();
   19eda:	f001 ba47 	b.w	1b36c <radio_tmr_end_capture>
   19ede:	bf00      	nop

00019ee0 <ticker_op_start_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   19ee0:	b900      	cbnz	r0, 19ee4 <ticker_op_start_cb+0x4>
   19ee2:	4770      	bx	lr
{
   19ee4:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   19ee6:	4a07      	ldr	r2, [pc, #28]	; (19f04 <ticker_op_start_cb+0x24>)
   19ee8:	4907      	ldr	r1, [pc, #28]	; (19f08 <ticker_op_start_cb+0x28>)
   19eea:	4808      	ldr	r0, [pc, #32]	; (19f0c <ticker_op_start_cb+0x2c>)
   19eec:	f240 1379 	movw	r3, #377	; 0x179
   19ef0:	f004 f82b 	bl	1df4a <printk>
   19ef4:	4040      	eors	r0, r0
   19ef6:	f380 8811 	msr	BASEPRI, r0
   19efa:	f04f 0003 	mov.w	r0, #3
   19efe:	df02      	svc	2
}
   19f00:	bd08      	pop	{r3, pc}
   19f02:	bf00      	nop
   19f04:	00024a28 	.word	0x00024a28
   19f08:	0002448c 	.word	0x0002448c
   19f0c:	00023fe4 	.word	0x00023fe4

00019f10 <abort_cb>:
{
   19f10:	b510      	push	{r4, lr}
	if (!prepare_param) {
   19f12:	b1b8      	cbz	r0, 19f44 <abort_cb+0x34>
	err = lll_hfclock_off();
   19f14:	460c      	mov	r4, r1
   19f16:	f7ff fe03 	bl	19b20 <lll_hfclock_off>
	LL_ASSERT(!err || err == -EBUSY);
   19f1a:	b170      	cbz	r0, 19f3a <abort_cb+0x2a>
   19f1c:	3010      	adds	r0, #16
   19f1e:	d00c      	beq.n	19f3a <abort_cb+0x2a>
   19f20:	4a0c      	ldr	r2, [pc, #48]	; (19f54 <abort_cb+0x44>)
   19f22:	490d      	ldr	r1, [pc, #52]	; (19f58 <abort_cb+0x48>)
   19f24:	480d      	ldr	r0, [pc, #52]	; (19f5c <abort_cb+0x4c>)
   19f26:	f240 1369 	movw	r3, #361	; 0x169
   19f2a:	f004 f80e 	bl	1df4a <printk>
   19f2e:	4040      	eors	r0, r0
   19f30:	f380 8811 	msr	BASEPRI, r0
   19f34:	f04f 0003 	mov.w	r0, #3
   19f38:	df02      	svc	2
	lll_done(param);
   19f3a:	4620      	mov	r0, r4
}
   19f3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   19f40:	f7ff bca6 	b.w	19890 <lll_done>
			radio_isr_set(isr_abort, param);
   19f44:	4806      	ldr	r0, [pc, #24]	; (19f60 <abort_cb+0x50>)
   19f46:	f000 ff21 	bl	1ad8c <radio_isr_set>
}
   19f4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			radio_disable();
   19f4e:	f001 b829 	b.w	1afa4 <radio_disable>
   19f52:	bf00      	nop
   19f54:	00024a28 	.word	0x00024a28
   19f58:	000249ec 	.word	0x000249ec
   19f5c:	00023fe4 	.word	0x00023fe4
   19f60:	0001a029 	.word	0x0001a029

00019f64 <is_abort_cb>:
	if (next != curr) {
   19f64:	4282      	cmp	r2, r0
{
   19f66:	b510      	push	{r4, lr}
	if (next != curr) {
   19f68:	d11b      	bne.n	19fa2 <is_abort_cb+0x3e>
	radio_isr_set(isr_window, lll);
   19f6a:	4614      	mov	r4, r2
   19f6c:	481b      	ldr	r0, [pc, #108]	; (19fdc <is_abort_cb+0x78>)
   19f6e:	4611      	mov	r1, r2
   19f70:	f000 ff0c 	bl	1ad8c <radio_isr_set>
	radio_disable();
   19f74:	f001 f816 	bl	1afa4 <radio_disable>
	if (++lll->chan == 3U) {
   19f78:	7da3      	ldrb	r3, [r4, #22]
   19f7a:	f3c3 0041 	ubfx	r0, r3, #1, #2
   19f7e:	3001      	adds	r0, #1
   19f80:	f000 0003 	and.w	r0, r0, #3
   19f84:	2803      	cmp	r0, #3
   19f86:	d007      	beq.n	19f98 <is_abort_cb+0x34>
   19f88:	f360 0342 	bfi	r3, r0, #1, #2
   19f8c:	75a3      	strb	r3, [r4, #22]
   19f8e:	3025      	adds	r0, #37	; 0x25
	lll_chan_set(37 + lll->chan);
   19f90:	f7ff fce4 	bl	1995c <lll_chan_set>
	return 0;
   19f94:	2000      	movs	r0, #0
}
   19f96:	bd10      	pop	{r4, pc}
		lll->chan = 0U;
   19f98:	f36f 0342 	bfc	r3, #1, #2
   19f9c:	75a3      	strb	r3, [r4, #22]
   19f9e:	2025      	movs	r0, #37	; 0x25
   19fa0:	e7f6      	b.n	19f90 <is_abort_cb+0x2c>
		*resume_cb = resume_prepare_cb;
   19fa2:	4a0f      	ldr	r2, [pc, #60]	; (19fe0 <is_abort_cb+0x7c>)
   19fa4:	601a      	str	r2, [r3, #0]
		*resume_prio = 0; /* TODO: */
   19fa6:	9a02      	ldr	r2, [sp, #8]
   19fa8:	2300      	movs	r3, #0
   19faa:	6013      	str	r3, [r2, #0]
		err = lll_hfclock_on();
   19fac:	f7ff fdb0 	bl	19b10 <lll_hfclock_on>
		LL_ASSERT(!err || err == -EINPROGRESS);
   19fb0:	b188      	cbz	r0, 19fd6 <is_abort_cb+0x72>
   19fb2:	3044      	adds	r0, #68	; 0x44
   19fb4:	d00f      	beq.n	19fd6 <is_abort_cb+0x72>
   19fb6:	4a0b      	ldr	r2, [pc, #44]	; (19fe4 <is_abort_cb+0x80>)
   19fb8:	490b      	ldr	r1, [pc, #44]	; (19fe8 <is_abort_cb+0x84>)
   19fba:	480c      	ldr	r0, [pc, #48]	; (19fec <is_abort_cb+0x88>)
   19fbc:	f240 133f 	movw	r3, #319	; 0x13f
   19fc0:	f003 ffc3 	bl	1df4a <printk>
   19fc4:	4040      	eors	r0, r0
   19fc6:	f380 8811 	msr	BASEPRI, r0
   19fca:	f04f 0003 	mov.w	r0, #3
   19fce:	df02      	svc	2
   19fd0:	f06f 000a 	mvn.w	r0, #10
}
   19fd4:	bd10      	pop	{r4, pc}
   19fd6:	f06f 000a 	mvn.w	r0, #10
   19fda:	bd10      	pop	{r4, pc}
   19fdc:	00019ec5 	.word	0x00019ec5
   19fe0:	00019e9d 	.word	0x00019e9d
   19fe4:	00024a28 	.word	0x00024a28
   19fe8:	00024aac 	.word	0x00024aac
   19fec:	00023fe4 	.word	0x00023fe4

00019ff0 <isr_cleanup>:
{
   19ff0:	b538      	push	{r3, r4, r5, lr}
   19ff2:	4604      	mov	r4, r0
	if (lll_is_done(param)) {
   19ff4:	f7ff fca0 	bl	19938 <lll_is_done>
   19ff8:	b100      	cbz	r0, 19ffc <isr_cleanup+0xc>
}
   19ffa:	bd38      	pop	{r3, r4, r5, pc}
	radio_filter_disable();
   19ffc:	4605      	mov	r5, r0
   19ffe:	f001 f897 	bl	1b130 <radio_filter_disable>
	if (++lll->chan == 3U) {
   1a002:	7da2      	ldrb	r2, [r4, #22]
   1a004:	f3c2 0341 	ubfx	r3, r2, #1, #2
   1a008:	3301      	adds	r3, #1
   1a00a:	f003 0303 	and.w	r3, r3, #3
   1a00e:	2b03      	cmp	r3, #3
   1a010:	bf14      	ite	ne
   1a012:	f363 0242 	bfine	r2, r3, #1, #2
		lll->chan = 0U;
   1a016:	f365 0242 	bfieq	r2, r5, #1, #2
   1a01a:	75a2      	strb	r2, [r4, #22]
	lll_isr_cleanup(param);
   1a01c:	4620      	mov	r0, r4
}
   1a01e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lll_isr_cleanup(param);
   1a022:	f7ff bcff 	b.w	19a24 <lll_isr_cleanup>
   1a026:	bf00      	nop

0001a028 <isr_abort>:
{
   1a028:	b510      	push	{r4, lr}
   1a02a:	b082      	sub	sp, #8
   1a02c:	4604      	mov	r4, r0
	lll_isr_status_reset();
   1a02e:	f7ff fceb 	bl	19a08 <lll_isr_status_reset>
	ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_LLL,
   1a032:	2300      	movs	r3, #0
   1a034:	9300      	str	r3, [sp, #0]
   1a036:	4619      	mov	r1, r3
   1a038:	4618      	mov	r0, r3
   1a03a:	2201      	movs	r2, #1
   1a03c:	f7f7 fc8e 	bl	1195c <ticker_stop>
	radio_disable();
   1a040:	f000 ffb0 	bl	1afa4 <radio_disable>
	isr_cleanup(param);
   1a044:	4620      	mov	r0, r4
}
   1a046:	b002      	add	sp, #8
   1a048:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	isr_cleanup(param);
   1a04c:	f7ff bfd0 	b.w	19ff0 <isr_cleanup>

0001a050 <isr_rx_scan_report.isra.0>:
			&srsp->scan_rsp.addr[0], BDADDR_SIZE) == 0));
}

static int isr_rx_scan_report(struct lll_scan *lll, uint8_t rssi_ready,
   1a050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a052:	4607      	mov	r7, r0
				uint8_t rl_idx, bool dir_report)
{
	struct node_rx_pdu *node_rx;

	node_rx = ull_pdu_rx_alloc_peek(3);
   1a054:	2003      	movs	r0, #3
static int isr_rx_scan_report(struct lll_scan *lll, uint8_t rssi_ready,
   1a056:	460e      	mov	r6, r1
   1a058:	4615      	mov	r5, r2
	node_rx = ull_pdu_rx_alloc_peek(3);
   1a05a:	f7fa fac7 	bl	145ec <ull_pdu_rx_alloc_peek>
	if (!node_rx) {
   1a05e:	b1c8      	cbz	r0, 1a094 <isr_rx_scan_report.isra.0+0x44>
		return -ENOBUFS;
	}
	ull_pdu_rx_alloc();
   1a060:	4604      	mov	r4, r0
   1a062:	f7fa fae1 	bl	14628 <ull_pdu_rx_alloc>

	/* Prepare the report (adv or scan resp) */
	node_rx->hdr.handle = 0xffff;
   1a066:	f64f 72ff 	movw	r2, #65535	; 0xffff
			}
			break;
		}
#endif /* CONFIG_BT_CTLR_ADV_EXT */
	} else {
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
   1a06a:	2304      	movs	r3, #4
	node_rx->hdr.handle = 0xffff;
   1a06c:	80e2      	strh	r2, [r4, #6]
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
   1a06e:	7123      	strb	r3, [r4, #4]
	}

	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ?
   1a070:	b95f      	cbnz	r7, 1a08a <isr_rx_scan_report.isra.0+0x3a>
   1a072:	207f      	movs	r0, #127	; 0x7f
   1a074:	7620      	strb	r0, [r4, #24]
		node_rx->hdr.rx_ftr.chan = _radio.scanner.chan - 1;
		node_rx->hdr.rx_ftr.ticks_anchor = _radio.ticks_anchor;
	}
#endif /* CONFIG_BT_CTLR_EXT_SCAN_FP */

	ull_rx_put(node_rx->hdr.link, node_rx);
   1a076:	4621      	mov	r1, r4
   1a078:	6820      	ldr	r0, [r4, #0]
	node_rx->hdr.rx_ftr.rl_idx = rl_idx;
   1a07a:	76a6      	strb	r6, [r4, #26]
	node_rx->hdr.rx_ftr.direct = dir_report;
   1a07c:	76e5      	strb	r5, [r4, #27]
	ull_rx_put(node_rx->hdr.link, node_rx);
   1a07e:	f7fa faeb 	bl	14658 <ull_rx_put>
	ull_rx_sched();
   1a082:	f7fa faf9 	bl	14678 <ull_rx_sched>

	return 0;
   1a086:	2000      	movs	r0, #0
}
   1a088:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				   (radio_rssi_get() & 0x7f)
   1a08a:	f001 f81d 	bl	1b0c8 <radio_rssi_get>
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ?
   1a08e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   1a092:	e7ef      	b.n	1a074 <isr_rx_scan_report.isra.0+0x24>
		return -ENOBUFS;
   1a094:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
   1a098:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a09a:	bf00      	nop

0001a09c <lll_scan_init>:
}
   1a09c:	2000      	movs	r0, #0
   1a09e:	4770      	bx	lr

0001a0a0 <lll_scan_reset>:
   1a0a0:	2000      	movs	r0, #0
   1a0a2:	4770      	bx	lr

0001a0a4 <lll_scan_prepare>:
{
   1a0a4:	b510      	push	{r4, lr}
   1a0a6:	b082      	sub	sp, #8
   1a0a8:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   1a0aa:	f7ff fd31 	bl	19b10 <lll_hfclock_on>
	LL_ASSERT(!err || err == -EINPROGRESS);
   1a0ae:	b108      	cbz	r0, 1a0b4 <lll_scan_prepare+0x10>
   1a0b0:	3044      	adds	r0, #68	; 0x44
   1a0b2:	d119      	bne.n	1a0e8 <lll_scan_prepare+0x44>
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, p);
   1a0b4:	4a13      	ldr	r2, [pc, #76]	; (1a104 <lll_scan_prepare+0x60>)
   1a0b6:	4914      	ldr	r1, [pc, #80]	; (1a108 <lll_scan_prepare+0x64>)
   1a0b8:	4814      	ldr	r0, [pc, #80]	; (1a10c <lll_scan_prepare+0x68>)
   1a0ba:	9400      	str	r4, [sp, #0]
   1a0bc:	2300      	movs	r3, #0
   1a0be:	f7ff fb59 	bl	19774 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   1a0c2:	b108      	cbz	r0, 1a0c8 <lll_scan_prepare+0x24>
   1a0c4:	3044      	adds	r0, #68	; 0x44
   1a0c6:	d101      	bne.n	1a0cc <lll_scan_prepare+0x28>
}
   1a0c8:	b002      	add	sp, #8
   1a0ca:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   1a0cc:	4a10      	ldr	r2, [pc, #64]	; (1a110 <lll_scan_prepare+0x6c>)
   1a0ce:	4911      	ldr	r1, [pc, #68]	; (1a114 <lll_scan_prepare+0x70>)
   1a0d0:	4811      	ldr	r0, [pc, #68]	; (1a118 <lll_scan_prepare+0x74>)
   1a0d2:	236f      	movs	r3, #111	; 0x6f
   1a0d4:	f003 ff39 	bl	1df4a <printk>
   1a0d8:	4040      	eors	r0, r0
   1a0da:	f380 8811 	msr	BASEPRI, r0
   1a0de:	f04f 0003 	mov.w	r0, #3
   1a0e2:	df02      	svc	2
}
   1a0e4:	b002      	add	sp, #8
   1a0e6:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   1a0e8:	4a09      	ldr	r2, [pc, #36]	; (1a110 <lll_scan_prepare+0x6c>)
   1a0ea:	490a      	ldr	r1, [pc, #40]	; (1a114 <lll_scan_prepare+0x70>)
   1a0ec:	480a      	ldr	r0, [pc, #40]	; (1a118 <lll_scan_prepare+0x74>)
   1a0ee:	236c      	movs	r3, #108	; 0x6c
   1a0f0:	f003 ff2b 	bl	1df4a <printk>
   1a0f4:	4040      	eors	r0, r0
   1a0f6:	f380 8811 	msr	BASEPRI, r0
   1a0fa:	f04f 0003 	mov.w	r0, #3
   1a0fe:	df02      	svc	2
   1a100:	e7d8      	b.n	1a0b4 <lll_scan_prepare+0x10>
   1a102:	bf00      	nop
   1a104:	00019b31 	.word	0x00019b31
   1a108:	00019f11 	.word	0x00019f11
   1a10c:	00019f65 	.word	0x00019f65
   1a110:	00024a28 	.word	0x00024a28
   1a114:	00024aac 	.word	0x00024aac
   1a118:	00023fe4 	.word	0x00023fe4

0001a11c <isr_done>:
{
	return 0;
}

static void isr_done(void *param)
{
   1a11c:	b538      	push	{r3, r4, r5, lr}
   1a11e:	4605      	mov	r5, r0
	struct event_done_extra *e;

	lll_isr_status_reset();
   1a120:	f7ff fc72 	bl	19a08 <lll_isr_status_reset>

	e = ull_event_done_extra_get();
   1a124:	f7fa fb14 	bl	14750 <ull_event_done_extra_get>
	LL_ASSERT(e);
   1a128:	4604      	mov	r4, r0
   1a12a:	b178      	cbz	r0, 1a14c <isr_done+0x30>

	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
	e->trx_cnt = trx_cnt;
   1a12c:	4b0e      	ldr	r3, [pc, #56]	; (1a168 <isr_done+0x4c>)
	e->crc_valid = crc_valid;
   1a12e:	490f      	ldr	r1, [pc, #60]	; (1a16c <isr_done+0x50>)
	e->trx_cnt = trx_cnt;
   1a130:	881b      	ldrh	r3, [r3, #0]

#if defined(CONFIG_BT_CTLR_LE_ENC)
	e->mic_state = mic_state;
   1a132:	4a0f      	ldr	r2, [pc, #60]	; (1a170 <isr_done+0x54>)
	e->trx_cnt = trx_cnt;
   1a134:	80a3      	strh	r3, [r4, #4]
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   1a136:	2301      	movs	r3, #1
	e->crc_valid = crc_valid;
   1a138:	7809      	ldrb	r1, [r1, #0]
	e->mic_state = mic_state;
   1a13a:	7812      	ldrb	r2, [r2, #0]
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   1a13c:	7023      	strb	r3, [r4, #0]
			lll->slave.window_size_event_us = 0;
		}
	}
#endif /* CONFIG_BT_PERIPHERAL */

	lll_isr_cleanup(param);
   1a13e:	4628      	mov	r0, r5
	e->crc_valid = crc_valid;
   1a140:	71a1      	strb	r1, [r4, #6]
	e->mic_state = mic_state;
   1a142:	71e2      	strb	r2, [r4, #7]
}
   1a144:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lll_isr_cleanup(param);
   1a148:	f7ff bc6c 	b.w	19a24 <lll_isr_cleanup>
	LL_ASSERT(e);
   1a14c:	4a09      	ldr	r2, [pc, #36]	; (1a174 <isr_done+0x58>)
   1a14e:	490a      	ldr	r1, [pc, #40]	; (1a178 <isr_done+0x5c>)
   1a150:	480a      	ldr	r0, [pc, #40]	; (1a17c <isr_done+0x60>)
   1a152:	f240 2331 	movw	r3, #561	; 0x231
   1a156:	f003 fef8 	bl	1df4a <printk>
   1a15a:	4040      	eors	r0, r0
   1a15c:	f380 8811 	msr	BASEPRI, r0
   1a160:	f04f 0003 	mov.w	r0, #3
   1a164:	df02      	svc	2
   1a166:	e7e1      	b.n	1a12c <isr_done+0x10>
   1a168:	2000a2e4 	.word	0x2000a2e4
   1a16c:	2000a86b 	.word	0x2000a86b
   1a170:	2000a86c 	.word	0x2000a86c
   1a174:	00024ad4 	.word	0x00024ad4
   1a178:	00024b20 	.word	0x00024b20
   1a17c:	00023fe4 	.word	0x00023fe4

0001a180 <empty_tx_enqueue>:

	return 0;
}

static struct pdu_data *empty_tx_enqueue(struct lll_conn *lll)
{
   1a180:	b538      	push	{r3, r4, r5, lr}
	struct pdu_data *p;

	lll->empty = 1;
   1a182:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
   1a186:	f043 0304 	orr.w	r3, r3, #4
   1a18a:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
{
   1a18e:	4605      	mov	r5, r0

	p = (void *)radio_pkt_empty_get();
   1a190:	f000 ff60 	bl	1b054 <radio_pkt_empty_get>
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1a194:	7803      	ldrb	r3, [r0, #0]
	p->len = 0;
   1a196:	2200      	movs	r2, #0
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1a198:	2101      	movs	r1, #1
   1a19a:	f361 0301 	bfi	r3, r1, #0, #2
	p->len = 0;
   1a19e:	7042      	strb	r2, [r0, #1]
	p = (void *)radio_pkt_empty_get();
   1a1a0:	4604      	mov	r4, r0
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1a1a2:	7003      	strb	r3, [r0, #0]
	if (memq_peek(lll->memq_tx.head, lll->memq_tx.tail, NULL)) {
   1a1a4:	e9d5 010c 	ldrd	r0, r1, [r5, #48]	; 0x30
   1a1a8:	f7f5 ff74 	bl	10094 <memq_peek>
   1a1ac:	7823      	ldrb	r3, [r4, #0]
   1a1ae:	3800      	subs	r0, #0
   1a1b0:	bf18      	it	ne
   1a1b2:	2001      	movne	r0, #1
   1a1b4:	f360 1304 	bfi	r3, r0, #4, #1
   1a1b8:	7023      	strb	r3, [r4, #0]
	} else {
		p->md = 0;
	}

	return p;
}
   1a1ba:	4620      	mov	r0, r4
   1a1bc:	bd38      	pop	{r3, r4, r5, pc}
   1a1be:	bf00      	nop

0001a1c0 <lll_conn_init>:
}
   1a1c0:	2000      	movs	r0, #0
   1a1c2:	4770      	bx	lr

0001a1c4 <lll_conn_reset>:
   1a1c4:	2000      	movs	r0, #0
   1a1c6:	4770      	bx	lr

0001a1c8 <lll_conn_sca_local_get>:
}
   1a1c8:	2007      	movs	r0, #7
   1a1ca:	4770      	bx	lr

0001a1cc <lll_conn_prepare_reset>:
	crc_expire = 0U;
   1a1cc:	4805      	ldr	r0, [pc, #20]	; (1a1e4 <lll_conn_prepare_reset+0x18>)
	crc_valid = 0U;
   1a1ce:	4906      	ldr	r1, [pc, #24]	; (1a1e8 <lll_conn_prepare_reset+0x1c>)
	mic_state = LLL_CONN_MIC_NONE;
   1a1d0:	4a06      	ldr	r2, [pc, #24]	; (1a1ec <lll_conn_prepare_reset+0x20>)
{
   1a1d2:	b410      	push	{r4}
	trx_cnt = 0U;
   1a1d4:	2300      	movs	r3, #0
   1a1d6:	4c06      	ldr	r4, [pc, #24]	; (1a1f0 <lll_conn_prepare_reset+0x24>)
	crc_expire = 0U;
   1a1d8:	7003      	strb	r3, [r0, #0]
	crc_valid = 0U;
   1a1da:	700b      	strb	r3, [r1, #0]
	mic_state = LLL_CONN_MIC_NONE;
   1a1dc:	7013      	strb	r3, [r2, #0]
	trx_cnt = 0U;
   1a1de:	8023      	strh	r3, [r4, #0]
}
   1a1e0:	bc10      	pop	{r4}
   1a1e2:	4770      	bx	lr
   1a1e4:	2000a86a 	.word	0x2000a86a
   1a1e8:	2000a86b 	.word	0x2000a86b
   1a1ec:	2000a86c 	.word	0x2000a86c
   1a1f0:	2000a2e4 	.word	0x2000a2e4

0001a1f4 <lll_conn_abort_cb>:
{
   1a1f4:	b510      	push	{r4, lr}
	if (!prepare_param) {
   1a1f6:	b1b0      	cbz	r0, 1a226 <lll_conn_abort_cb+0x32>
	err = lll_hfclock_off();
   1a1f8:	460c      	mov	r4, r1
   1a1fa:	f7ff fc91 	bl	19b20 <lll_hfclock_off>
	LL_ASSERT(!err || err == -EBUSY);
   1a1fe:	b168      	cbz	r0, 1a21c <lll_conn_abort_cb+0x28>
   1a200:	3010      	adds	r0, #16
   1a202:	d00b      	beq.n	1a21c <lll_conn_abort_cb+0x28>
   1a204:	4a0b      	ldr	r2, [pc, #44]	; (1a234 <lll_conn_abort_cb+0x40>)
   1a206:	490c      	ldr	r1, [pc, #48]	; (1a238 <lll_conn_abort_cb+0x44>)
   1a208:	480c      	ldr	r0, [pc, #48]	; (1a23c <lll_conn_abort_cb+0x48>)
   1a20a:	237a      	movs	r3, #122	; 0x7a
   1a20c:	f003 fe9d 	bl	1df4a <printk>
   1a210:	4040      	eors	r0, r0
   1a212:	f380 8811 	msr	BASEPRI, r0
   1a216:	f04f 0003 	mov.w	r0, #3
   1a21a:	df02      	svc	2
	lll_done(param);
   1a21c:	4620      	mov	r0, r4
}
   1a21e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   1a222:	f7ff bb35 	b.w	19890 <lll_done>
		radio_isr_set(isr_done, param);
   1a226:	4806      	ldr	r0, [pc, #24]	; (1a240 <lll_conn_abort_cb+0x4c>)
   1a228:	f000 fdb0 	bl	1ad8c <radio_isr_set>
}
   1a22c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
   1a230:	f000 beb8 	b.w	1afa4 <radio_disable>
   1a234:	00024ad4 	.word	0x00024ad4
   1a238:	000249ec 	.word	0x000249ec
   1a23c:	00023fe4 	.word	0x00023fe4
   1a240:	0001a11d 	.word	0x0001a11d

0001a244 <lll_conn_rx_pkt_set>:
{
   1a244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a246:	4605      	mov	r5, r0
	node_rx = ull_pdu_rx_alloc_peek(1);
   1a248:	2001      	movs	r0, #1
   1a24a:	f7fa f9cf 	bl	145ec <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1a24e:	4604      	mov	r4, r0
   1a250:	b348      	cbz	r0, 1a2a6 <lll_conn_rx_pkt_set+0x62>
	phy = lll->phy_rx;
   1a252:	f895 602d 	ldrb.w	r6, [r5, #45]	; 0x2d
	max_rx_octets = lll->max_rx_octets;
   1a256:	8cef      	ldrh	r7, [r5, #38]	; 0x26
	phy = lll->phy_rx;
   1a258:	f006 0607 	and.w	r6, r6, #7
	radio_phy_set(phy, 0);
   1a25c:	4630      	mov	r0, r6
   1a25e:	2100      	movs	r1, #0
   1a260:	f000 fdda 	bl	1ae18 <radio_phy_set>
	} else if (lll->enc_rx) {
   1a264:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
   1a268:	0072      	lsls	r2, r6, #1
   1a26a:	071b      	lsls	r3, r3, #28
   1a26c:	f104 041c 	add.w	r4, r4, #28
   1a270:	f042 0201 	orr.w	r2, r2, #1
   1a274:	d50e      	bpl.n	1a294 <lll_conn_rx_pkt_set+0x50>
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
   1a276:	1d39      	adds	r1, r7, #4
   1a278:	b2c9      	uxtb	r1, r1
   1a27a:	2008      	movs	r0, #8
   1a27c:	f000 fe30 	bl	1aee0 <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   1a280:	4622      	mov	r2, r4
   1a282:	4631      	mov	r1, r6
   1a284:	f105 0047 	add.w	r0, r5, #71	; 0x47
   1a288:	f001 f884 	bl	1b394 <radio_ccm_rx_pkt_set>
}
   1a28c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   1a290:	f000 be5c 	b.w	1af4c <radio_pkt_rx_set>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
   1a294:	b2f9      	uxtb	r1, r7
   1a296:	2008      	movs	r0, #8
   1a298:	f000 fe22 	bl	1aee0 <radio_pkt_configure>
		radio_pkt_rx_set(node_rx->pdu);
   1a29c:	4620      	mov	r0, r4
}
   1a29e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(node_rx->pdu);
   1a2a2:	f000 be53 	b.w	1af4c <radio_pkt_rx_set>
	LL_ASSERT(node_rx);
   1a2a6:	4a07      	ldr	r2, [pc, #28]	; (1a2c4 <lll_conn_rx_pkt_set+0x80>)
   1a2a8:	4907      	ldr	r1, [pc, #28]	; (1a2c8 <lll_conn_rx_pkt_set+0x84>)
   1a2aa:	4808      	ldr	r0, [pc, #32]	; (1a2cc <lll_conn_rx_pkt_set+0x88>)
   1a2ac:	f240 13a7 	movw	r3, #423	; 0x1a7
   1a2b0:	f003 fe4b 	bl	1df4a <printk>
   1a2b4:	4040      	eors	r0, r0
   1a2b6:	f380 8811 	msr	BASEPRI, r0
   1a2ba:	f04f 0003 	mov.w	r0, #3
   1a2be:	df02      	svc	2
   1a2c0:	e7c7      	b.n	1a252 <lll_conn_rx_pkt_set+0xe>
   1a2c2:	bf00      	nop
   1a2c4:	00024ad4 	.word	0x00024ad4
   1a2c8:	00024a74 	.word	0x00024a74
   1a2cc:	00023fe4 	.word	0x00023fe4

0001a2d0 <lll_conn_isr_tx>:
{
   1a2d0:	b538      	push	{r3, r4, r5, lr}
   1a2d2:	4604      	mov	r4, r0
	lll_isr_tx_status_reset();
   1a2d4:	f7ff fb86 	bl	199e4 <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   1a2d8:	2096      	movs	r0, #150	; 0x96
   1a2da:	f000 ff5b 	bl	1b194 <radio_tmr_tifs_set>
				     lll->phy_flags);
   1a2de:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
	radio_switch_complete_and_tx(lll->phy_rx, 0,
   1a2e2:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   1a2e6:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   1a2ea:	f000 0007 	and.w	r0, r0, #7
   1a2ee:	f002 0207 	and.w	r2, r2, #7
   1a2f2:	2100      	movs	r1, #0
   1a2f4:	f000 fec4 	bl	1b080 <radio_switch_complete_and_tx>
	lll_conn_rx_pkt_set(lll);
   1a2f8:	4620      	mov	r0, r4
   1a2fa:	f7ff ffa3 	bl	1a244 <lll_conn_rx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   1a2fe:	f000 fe75 	bl	1afec <radio_is_ready>
   1a302:	bb58      	cbnz	r0, 1a35c <lll_conn_isr_tx+0x8c>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 +
   1a304:	f001 f840 	bl	1b388 <radio_tmr_tifs_base_get>
   1a308:	4605      	mov	r5, r0
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   1a30a:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   1a30e:	2101      	movs	r1, #1
   1a310:	f000 0007 	and.w	r0, r0, #7
   1a314:	f000 fe32 	bl	1af7c <radio_rx_chain_delay_get>
	hcto += addr_us_get(lll->phy_rx);
   1a318:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   1a31c:	f003 0307 	and.w	r3, r3, #7
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   1a320:	4405      	add	r5, r0
#define RANGE_DISTANCE 1000 /* meters */
#define RANGE_DELAY_US (2 * RANGE_DISTANCE * 4 / 1000)

static inline uint32_t addr_us_get(uint8_t phy)
{
	switch (phy) {
   1a322:	2b02      	cmp	r3, #2
   1a324:	f105 05a3 	add.w	r5, r5, #163	; 0xa3
   1a328:	d016      	beq.n	1a358 <lll_conn_isr_tx+0x88>
	case BIT(0):
		return 40;
	case BIT(1):
		return 24;
	case BIT(2):
		return 376;
   1a32a:	2b04      	cmp	r3, #4
   1a32c:	bf14      	ite	ne
   1a32e:	2328      	movne	r3, #40	; 0x28
   1a330:	f44f 73bc 	moveq.w	r3, #376	; 0x178
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   1a334:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
   1a338:	f3c0 01c0 	ubfx	r1, r0, #3, #1
   1a33c:	f000 0007 	and.w	r0, r0, #7
	hcto += addr_us_get(lll->phy_rx);
   1a340:	441d      	add	r5, r3
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   1a342:	f000 fe19 	bl	1af78 <radio_tx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
   1a346:	1a28      	subs	r0, r5, r0
   1a348:	f000 fff0 	bl	1b32c <radio_tmr_hcto_configure>
	radio_isr_set(lll_conn_isr_rx, param);
   1a34c:	4621      	mov	r1, r4
   1a34e:	480a      	ldr	r0, [pc, #40]	; (1a378 <lll_conn_isr_tx+0xa8>)
}
   1a350:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_isr_set(lll_conn_isr_rx, param);
   1a354:	f000 bd1a 	b.w	1ad8c <radio_isr_set>
	switch (phy) {
   1a358:	2318      	movs	r3, #24
   1a35a:	e7eb      	b.n	1a334 <lll_conn_isr_tx+0x64>
	LL_ASSERT(!radio_is_ready());
   1a35c:	4a07      	ldr	r2, [pc, #28]	; (1a37c <lll_conn_isr_tx+0xac>)
   1a35e:	4908      	ldr	r1, [pc, #32]	; (1a380 <lll_conn_isr_tx+0xb0>)
   1a360:	4808      	ldr	r0, [pc, #32]	; (1a384 <lll_conn_isr_tx+0xb4>)
   1a362:	f240 1373 	movw	r3, #371	; 0x173
   1a366:	f003 fdf0 	bl	1df4a <printk>
   1a36a:	4040      	eors	r0, r0
   1a36c:	f380 8811 	msr	BASEPRI, r0
   1a370:	f04f 0003 	mov.w	r0, #3
   1a374:	df02      	svc	2
   1a376:	e7c5      	b.n	1a304 <lll_conn_isr_tx+0x34>
   1a378:	0001a489 	.word	0x0001a489
   1a37c:	00024ad4 	.word	0x00024ad4
   1a380:	00024a98 	.word	0x00024a98
   1a384:	00023fe4 	.word	0x00023fe4

0001a388 <lll_conn_tx_pkt_set>:
{
   1a388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a38a:	460f      	mov	r7, r1
	phy = lll->phy_tx;
   1a38c:	f890 102c 	ldrb.w	r1, [r0, #44]	; 0x2c
	max_tx_octets = lll->max_tx_octets;
   1a390:	8c86      	ldrh	r6, [r0, #36]	; 0x24
	phy = lll->phy_tx;
   1a392:	f001 0407 	and.w	r4, r1, #7
{
   1a396:	4605      	mov	r5, r0
	radio_phy_set(phy, flags);
   1a398:	f3c1 01c0 	ubfx	r1, r1, #3, #1
   1a39c:	4620      	mov	r0, r4
   1a39e:	f000 fd3b 	bl	1ae18 <radio_phy_set>
	} else if (lll->enc_tx) {
   1a3a2:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
   1a3a6:	0062      	lsls	r2, r4, #1
   1a3a8:	06db      	lsls	r3, r3, #27
   1a3aa:	f042 0201 	orr.w	r2, r2, #1
   1a3ae:	b2f1      	uxtb	r1, r6
   1a3b0:	d50d      	bpl.n	1a3ce <lll_conn_tx_pkt_set+0x46>
		radio_pkt_configure(8, (max_tx_octets + 4U),
   1a3b2:	3104      	adds	r1, #4
   1a3b4:	b2c9      	uxtb	r1, r1
   1a3b6:	2008      	movs	r0, #8
   1a3b8:	f000 fd92 	bl	1aee0 <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx,
   1a3bc:	4639      	mov	r1, r7
   1a3be:	f105 0068 	add.w	r0, r5, #104	; 0x68
   1a3c2:	f001 f837 	bl	1b434 <radio_ccm_tx_pkt_set>
}
   1a3c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx,
   1a3ca:	f000 bdc5 	b.w	1af58 <radio_pkt_tx_set>
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
   1a3ce:	2008      	movs	r0, #8
   1a3d0:	f000 fd86 	bl	1aee0 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
   1a3d4:	4638      	mov	r0, r7
}
   1a3d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(pdu_data_tx);
   1a3da:	f000 bdbd 	b.w	1af58 <radio_pkt_tx_set>
   1a3de:	bf00      	nop

0001a3e0 <lll_conn_pdu_tx_prep>:
{
   1a3e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (lll->empty) {
   1a3e4:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
   1a3e8:	075b      	lsls	r3, r3, #29
{
   1a3ea:	b083      	sub	sp, #12
   1a3ec:	4688      	mov	r8, r1
	if (lll->empty) {
   1a3ee:	d43e      	bmi.n	1a46e <lll_conn_pdu_tx_prep+0x8e>
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   1a3f0:	4604      	mov	r4, r0
   1a3f2:	aa01      	add	r2, sp, #4
   1a3f4:	e9d0 010c 	ldrd	r0, r1, [r0, #48]	; 0x30
   1a3f8:	f7f5 fe4c 	bl	10094 <memq_peek>
	if (!link) {
   1a3fc:	4681      	mov	r9, r0
   1a3fe:	2800      	cmp	r0, #0
   1a400:	d03c      	beq.n	1a47c <lll_conn_pdu_tx_prep+0x9c>
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   1a402:	9f01      	ldr	r7, [sp, #4]
   1a404:	f894 6045 	ldrb.w	r6, [r4, #69]	; 0x45
		if (!lll->packet_tx_head_len) {
   1a408:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   1a40c:	3704      	adds	r7, #4
   1a40e:	19bd      	adds	r5, r7, r6
		if (!lll->packet_tx_head_len) {
   1a410:	b913      	cbnz	r3, 1a418 <lll_conn_pdu_tx_prep+0x38>
			lll->packet_tx_head_len = p->len;
   1a412:	786b      	ldrb	r3, [r5, #1]
   1a414:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		if (lll->packet_tx_head_offset) {
   1a418:	b126      	cbz	r6, 1a424 <lll_conn_pdu_tx_prep+0x44>
			p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1a41a:	5dba      	ldrb	r2, [r7, r6]
   1a41c:	2101      	movs	r1, #1
   1a41e:	f361 0201 	bfi	r2, r1, #0, #2
   1a422:	55ba      	strb	r2, [r7, r6]
		p->len = lll->packet_tx_head_len - lll->packet_tx_head_offset;
   1a424:	1b9b      	subs	r3, r3, r6
   1a426:	706b      	strb	r3, [r5, #1]
		p->md = 0;
   1a428:	5dbb      	ldrb	r3, [r7, r6]
   1a42a:	f36f 1304 	bfc	r3, #4, #1
   1a42e:	55bb      	strb	r3, [r7, r6]
		max_tx_octets = ull_conn_lll_max_tx_octets_get(lll);
   1a430:	4620      	mov	r0, r4
   1a432:	f7fd fb01 	bl	17a38 <ull_conn_lll_max_tx_octets_get>
		if (p->len > max_tx_octets) {
   1a436:	786b      	ldrb	r3, [r5, #1]
   1a438:	4283      	cmp	r3, r0
   1a43a:	d904      	bls.n	1a446 <lll_conn_pdu_tx_prep+0x66>
			p->len = max_tx_octets;
   1a43c:	7068      	strb	r0, [r5, #1]
			p->md = 1;
   1a43e:	5dbb      	ldrb	r3, [r7, r6]
   1a440:	f043 0310 	orr.w	r3, r3, #16
   1a444:	55bb      	strb	r3, [r7, r6]
		if (link->next != lll->memq_tx.tail) {
   1a446:	f8d9 2000 	ldr.w	r2, [r9]
   1a44a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1a44c:	429a      	cmp	r2, r3
   1a44e:	d003      	beq.n	1a458 <lll_conn_pdu_tx_prep+0x78>
			p->md = 1;
   1a450:	5dbb      	ldrb	r3, [r7, r6]
   1a452:	f043 0310 	orr.w	r3, r3, #16
   1a456:	55bb      	strb	r3, [r7, r6]
	p->rfu = 0U;
   1a458:	782b      	ldrb	r3, [r5, #0]
	p->resv = 0U;
   1a45a:	2200      	movs	r2, #0
	p->rfu = 0U;
   1a45c:	f36f 1347 	bfc	r3, #5, #3
   1a460:	702b      	strb	r3, [r5, #0]
	p->resv = 0U;
   1a462:	70aa      	strb	r2, [r5, #2]
	*pdu_data_tx = p;
   1a464:	f8c8 5000 	str.w	r5, [r8]
}
   1a468:	b003      	add	sp, #12
   1a46a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		*pdu_data_tx = empty_tx_enqueue(lll);
   1a46e:	f7ff fe87 	bl	1a180 <empty_tx_enqueue>
   1a472:	f8c8 0000 	str.w	r0, [r8]
}
   1a476:	b003      	add	sp, #12
   1a478:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		p = empty_tx_enqueue(lll);
   1a47c:	4620      	mov	r0, r4
   1a47e:	f7ff fe7f 	bl	1a180 <empty_tx_enqueue>
   1a482:	4605      	mov	r5, r0
   1a484:	e7e8      	b.n	1a458 <lll_conn_pdu_tx_prep+0x78>
   1a486:	bf00      	nop

0001a488 <lll_conn_isr_rx>:
{
   1a488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a48c:	b082      	sub	sp, #8
   1a48e:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   1a490:	f000 fdb6 	bl	1b000 <radio_is_done>
	if (trx_done) {
   1a494:	f010 0fff 	tst.w	r0, #255	; 0xff
   1a498:	d10a      	bne.n	1a4b0 <lll_conn_isr_rx+0x28>
	lll_isr_rx_status_reset();
   1a49a:	f7ff faab 	bl	199f4 <lll_isr_rx_status_reset>
		radio_isr_set(isr_done, param);
   1a49e:	48ac      	ldr	r0, [pc, #688]	; (1a750 <lll_conn_isr_rx+0x2c8>)
   1a4a0:	4621      	mov	r1, r4
   1a4a2:	f000 fc73 	bl	1ad8c <radio_isr_set>
		radio_disable();
   1a4a6:	f000 fd7d 	bl	1afa4 <radio_disable>
}
   1a4aa:	b002      	add	sp, #8
   1a4ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		crc_ok = radio_crc_is_valid();
   1a4b0:	f000 fdc6 	bl	1b040 <radio_crc_is_valid>
   1a4b4:	b2c5      	uxtb	r5, r0
		rssi_ready = radio_rssi_is_ready();
   1a4b6:	f000 fe15 	bl	1b0e4 <radio_rssi_is_ready>
	lll_isr_rx_status_reset();
   1a4ba:	f7ff fa9b 	bl	199f4 <lll_isr_rx_status_reset>
	trx_cnt++;
   1a4be:	4aa5      	ldr	r2, [pc, #660]	; (1a754 <lll_conn_isr_rx+0x2cc>)
   1a4c0:	8813      	ldrh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   1a4c2:	2001      	movs	r0, #1
	trx_cnt++;
   1a4c4:	4403      	add	r3, r0
   1a4c6:	8013      	strh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   1a4c8:	f7fa f890 	bl	145ec <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1a4cc:	4607      	mov	r7, r0
   1a4ce:	2800      	cmp	r0, #0
   1a4d0:	f000 80b1 	beq.w	1a636 <lll_conn_isr_rx+0x1ae>
	if (crc_ok) {
   1a4d4:	2d00      	cmp	r5, #0
   1a4d6:	d156      	bne.n	1a586 <lll_conn_isr_rx+0xfe>
		if (crc_expire == 0U) {
   1a4d8:	4a9f      	ldr	r2, [pc, #636]	; (1a758 <lll_conn_isr_rx+0x2d0>)
   1a4da:	7816      	ldrb	r6, [r2, #0]
   1a4dc:	2e00      	cmp	r6, #0
   1a4de:	f040 8086 	bne.w	1a5ee <lll_conn_isr_rx+0x166>
		crc_expire--;
   1a4e2:	2301      	movs	r3, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1a4e4:	a901      	add	r1, sp, #4
   1a4e6:	4620      	mov	r0, r4
		crc_expire--;
   1a4e8:	7013      	strb	r3, [r2, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1a4ea:	f7ff ff79 	bl	1a3e0 <lll_conn_pdu_tx_prep>
		radio_tmr_tifs_set(EVENT_IFS_US);
   1a4ee:	2096      	movs	r0, #150	; 0x96
   1a4f0:	f000 fe50 	bl	1b194 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(lll->phy_rx);
   1a4f4:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   1a4f8:	f000 0007 	and.w	r0, r0, #7
   1a4fc:	f000 fdb2 	bl	1b064 <radio_switch_complete_and_rx>
		radio_isr_set(lll_conn_isr_tx, param);
   1a500:	4896      	ldr	r0, [pc, #600]	; (1a75c <lll_conn_isr_rx+0x2d4>)
   1a502:	4621      	mov	r1, r4
   1a504:	f000 fc42 	bl	1ad8c <radio_isr_set>
		radio_tmr_end_capture();
   1a508:	f000 ff30 	bl	1b36c <radio_tmr_end_capture>
	pdu_data_tx->sn = lll->sn;
   1a50c:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
   1a510:	9901      	ldr	r1, [sp, #4]
	pdu_data_tx->nesn = lll->nesn;
   1a512:	f3c2 0340 	ubfx	r3, r2, #1, #1
   1a516:	7808      	ldrb	r0, [r1, #0]
	pdu_data_tx->sn = lll->sn;
   1a518:	f3c2 0200 	ubfx	r2, r2, #0, #1
	pdu_data_tx->nesn = lll->nesn;
   1a51c:	009b      	lsls	r3, r3, #2
   1a51e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
   1a522:	f020 020c 	bic.w	r2, r0, #12
   1a526:	4313      	orrs	r3, r2
   1a528:	700b      	strb	r3, [r1, #0]
	lll_conn_tx_pkt_set(lll, pdu_data_tx);
   1a52a:	4620      	mov	r0, r4
   1a52c:	f7ff ff2c 	bl	1a388 <lll_conn_tx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   1a530:	f000 fd5c 	bl	1afec <radio_is_ready>
   1a534:	2800      	cmp	r0, #0
   1a536:	f040 8090 	bne.w	1a65a <lll_conn_isr_rx+0x1d2>
	if (!radio_tmr_aa_restore()) {
   1a53a:	f000 ff11 	bl	1b360 <radio_tmr_aa_restore>
   1a53e:	b178      	cbz	r0, 1a560 <lll_conn_isr_rx+0xd8>
	if (tx_release) {
   1a540:	b1a5      	cbz	r5, 1a56c <lll_conn_isr_rx+0xe4>
		LL_ASSERT(lll->handle != 0xFFFF);
   1a542:	8a20      	ldrh	r0, [r4, #16]
   1a544:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1a548:	4298      	cmp	r0, r3
   1a54a:	f000 8094 	beq.w	1a676 <lll_conn_isr_rx+0x1ee>
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   1a54e:	4629      	mov	r1, r5
   1a550:	f7fd f880 	bl	17654 <ull_conn_lll_ack_enqueue>
	if (is_rx_enqueue) {
   1a554:	b966      	cbnz	r6, 1a570 <lll_conn_isr_rx+0xe8>
		ull_rx_sched();
   1a556:	f7fa f88f 	bl	14678 <ull_rx_sched>
}
   1a55a:	b002      	add	sp, #8
   1a55c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		radio_tmr_aa_save(radio_tmr_aa_get());
   1a560:	f000 fef2 	bl	1b348 <radio_tmr_aa_get>
   1a564:	f000 fef6 	bl	1b354 <radio_tmr_aa_save>
	if (tx_release) {
   1a568:	2d00      	cmp	r5, #0
   1a56a:	d1ea      	bne.n	1a542 <lll_conn_isr_rx+0xba>
	if (is_rx_enqueue) {
   1a56c:	2e00      	cmp	r6, #0
   1a56e:	d09c      	beq.n	1a4aa <lll_conn_isr_rx+0x22>
		ull_pdu_rx_alloc();
   1a570:	f7fa f85a 	bl	14628 <ull_pdu_rx_alloc>
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   1a574:	2302      	movs	r3, #2
   1a576:	713b      	strb	r3, [r7, #4]
		node_rx->hdr.handle = lll->handle;
   1a578:	8a23      	ldrh	r3, [r4, #16]
		ull_rx_put(node_rx->hdr.link, node_rx);
   1a57a:	6838      	ldr	r0, [r7, #0]
		node_rx->hdr.handle = lll->handle;
   1a57c:	80fb      	strh	r3, [r7, #6]
		ull_rx_put(node_rx->hdr.link, node_rx);
   1a57e:	4639      	mov	r1, r7
   1a580:	f7fa f86a 	bl	14658 <ull_rx_put>
	if (is_ull_rx) {
   1a584:	e7e7      	b.n	1a556 <lll_conn_isr_rx+0xce>
	if (pdu_data_rx->nesn != lll->sn) {
   1a586:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
   1a58a:	7f3a      	ldrb	r2, [r7, #28]
   1a58c:	f003 0101 	and.w	r1, r3, #1
   1a590:	f3c2 0080 	ubfx	r0, r2, #2, #1
   1a594:	4288      	cmp	r0, r1
   1a596:	d05e      	beq.n	1a656 <lll_conn_isr_rx+0x1ce>
		lll->sn++;
   1a598:	f081 0101 	eor.w	r1, r1, #1
   1a59c:	f361 0300 	bfi	r3, r1, #0, #1
		if (!lll->empty) {
   1a5a0:	075d      	lsls	r5, r3, #29
		lll->sn++;
   1a5a2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
		if (!lll->empty) {
   1a5a6:	b2d9      	uxtb	r1, r3
   1a5a8:	d574      	bpl.n	1a694 <lll_conn_isr_rx+0x20c>
			lll->empty = 0;
   1a5aa:	460b      	mov	r3, r1
   1a5ac:	f36f 0382 	bfc	r3, #2, #1
   1a5b0:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	struct node_tx *tx_release = NULL;
   1a5b4:	2500      	movs	r5, #0
   1a5b6:	b2db      	uxtb	r3, r3
	if ((pdu_data_rx->sn == lll->nesn) &&
   1a5b8:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   1a5bc:	f3c3 0140 	ubfx	r1, r3, #1, #1
   1a5c0:	428a      	cmp	r2, r1
   1a5c2:	f000 808c 	beq.w	1a6de <lll_conn_isr_rx+0x256>
	uint8_t is_rx_enqueue = 0U;
   1a5c6:	2600      	movs	r6, #0
		crc_expire = 0U;
   1a5c8:	4963      	ldr	r1, [pc, #396]	; (1a758 <lll_conn_isr_rx+0x2d0>)
		crc_valid = 1U;
   1a5ca:	4a65      	ldr	r2, [pc, #404]	; (1a760 <lll_conn_isr_rx+0x2d8>)
		crc_expire = 0U;
   1a5cc:	2000      	movs	r0, #0
   1a5ce:	7008      	strb	r0, [r1, #0]
	is_empty_pdu_tx_retry = lll->empty;
   1a5d0:	f3c3 0880 	ubfx	r8, r3, #2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1a5d4:	a901      	add	r1, sp, #4
		crc_valid = 1U;
   1a5d6:	2301      	movs	r3, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1a5d8:	4620      	mov	r0, r4
		crc_valid = 1U;
   1a5da:	7013      	strb	r3, [r2, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1a5dc:	f7ff ff00 	bl	1a3e0 <lll_conn_pdu_tx_prep>
	is_done = is_crc_backoff || ((crc_ok) && (pdu_data_rx->md == 0) &&
   1a5e0:	7f3b      	ldrb	r3, [r7, #28]
   1a5e2:	06db      	lsls	r3, r3, #27
   1a5e4:	d483      	bmi.n	1a4ee <lll_conn_isr_rx+0x66>
				     (pdu_data_tx->len == 0));
   1a5e6:	9b01      	ldr	r3, [sp, #4]
	is_done = is_crc_backoff || ((crc_ok) && (pdu_data_rx->md == 0) &&
   1a5e8:	785b      	ldrb	r3, [r3, #1]
   1a5ea:	b173      	cbz	r3, 1a60a <lll_conn_isr_rx+0x182>
   1a5ec:	e77f      	b.n	1a4ee <lll_conn_isr_rx+0x66>
	is_empty_pdu_tx_retry = lll->empty;
   1a5ee:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
		crc_expire--;
   1a5f2:	3e01      	subs	r6, #1
   1a5f4:	b2f6      	uxtb	r6, r6
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1a5f6:	a901      	add	r1, sp, #4
   1a5f8:	4620      	mov	r0, r4
		crc_expire--;
   1a5fa:	7016      	strb	r6, [r2, #0]
	is_empty_pdu_tx_retry = lll->empty;
   1a5fc:	f3c3 0880 	ubfx	r8, r3, #2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1a600:	f7ff feee 	bl	1a3e0 <lll_conn_pdu_tx_prep>
	is_done = is_crc_backoff || ((crc_ok) && (pdu_data_rx->md == 0) &&
   1a604:	2e00      	cmp	r6, #0
   1a606:	f040 8105 	bne.w	1a814 <lll_conn_isr_rx+0x38c>
		radio_isr_set(isr_done, param);
   1a60a:	4851      	ldr	r0, [pc, #324]	; (1a750 <lll_conn_isr_rx+0x2c8>)
   1a60c:	4621      	mov	r1, r4
   1a60e:	f000 fbbd 	bl	1ad8c <radio_isr_set>
		} else if (!lll->role) {
   1a612:	f994 3021 	ldrsb.w	r3, [r4, #33]	; 0x21
   1a616:	2b00      	cmp	r3, #0
   1a618:	f6ff af78 	blt.w	1a50c <lll_conn_isr_rx+0x84>
			radio_disable();
   1a61c:	f000 fcc2 	bl	1afa4 <radio_disable>
			LL_ASSERT(!radio_is_ready());
   1a620:	f000 fce4 	bl	1afec <radio_is_ready>
   1a624:	2800      	cmp	r0, #0
   1a626:	d174      	bne.n	1a712 <lll_conn_isr_rx+0x28a>
			lll->empty = is_empty_pdu_tx_retry;
   1a628:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
   1a62c:	f368 0382 	bfi	r3, r8, #2, #1
   1a630:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			goto lll_conn_isr_rx_exit;
   1a634:	e781      	b.n	1a53a <lll_conn_isr_rx+0xb2>
	LL_ASSERT(node_rx);
   1a636:	4a4b      	ldr	r2, [pc, #300]	; (1a764 <lll_conn_isr_rx+0x2dc>)
   1a638:	494b      	ldr	r1, [pc, #300]	; (1a768 <lll_conn_isr_rx+0x2e0>)
   1a63a:	484c      	ldr	r0, [pc, #304]	; (1a76c <lll_conn_isr_rx+0x2e4>)
   1a63c:	23aa      	movs	r3, #170	; 0xaa
   1a63e:	f003 fc84 	bl	1df4a <printk>
   1a642:	4040      	eors	r0, r0
   1a644:	f380 8811 	msr	BASEPRI, r0
   1a648:	f04f 0003 	mov.w	r0, #3
   1a64c:	df02      	svc	2
	if (crc_ok) {
   1a64e:	2d00      	cmp	r5, #0
   1a650:	f43f af42 	beq.w	1a4d8 <lll_conn_isr_rx+0x50>
   1a654:	e797      	b.n	1a586 <lll_conn_isr_rx+0xfe>
	struct node_tx *tx_release = NULL;
   1a656:	2500      	movs	r5, #0
   1a658:	e7ae      	b.n	1a5b8 <lll_conn_isr_rx+0x130>
	LL_ASSERT(!radio_is_ready());
   1a65a:	4a42      	ldr	r2, [pc, #264]	; (1a764 <lll_conn_isr_rx+0x2dc>)
   1a65c:	4944      	ldr	r1, [pc, #272]	; (1a770 <lll_conn_isr_rx+0x2e8>)
   1a65e:	4843      	ldr	r0, [pc, #268]	; (1a76c <lll_conn_isr_rx+0x2e4>)
   1a660:	f44f 738a 	mov.w	r3, #276	; 0x114
   1a664:	f003 fc71 	bl	1df4a <printk>
   1a668:	4040      	eors	r0, r0
   1a66a:	f380 8811 	msr	BASEPRI, r0
   1a66e:	f04f 0003 	mov.w	r0, #3
   1a672:	df02      	svc	2
   1a674:	e761      	b.n	1a53a <lll_conn_isr_rx+0xb2>
		LL_ASSERT(lll->handle != 0xFFFF);
   1a676:	4a3b      	ldr	r2, [pc, #236]	; (1a764 <lll_conn_isr_rx+0x2dc>)
   1a678:	493e      	ldr	r1, [pc, #248]	; (1a774 <lll_conn_isr_rx+0x2ec>)
   1a67a:	483c      	ldr	r0, [pc, #240]	; (1a76c <lll_conn_isr_rx+0x2e4>)
   1a67c:	f240 1321 	movw	r3, #289	; 0x121
   1a680:	f003 fc63 	bl	1df4a <printk>
   1a684:	4040      	eors	r0, r0
   1a686:	f380 8811 	msr	BASEPRI, r0
   1a68a:	f04f 0003 	mov.w	r0, #3
   1a68e:	df02      	svc	2
   1a690:	8a20      	ldrh	r0, [r4, #16]
   1a692:	e75c      	b.n	1a54e <lll_conn_isr_rx+0xc6>
			link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail,
   1a694:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
   1a698:	aa01      	add	r2, sp, #4
   1a69a:	f7f5 fcfb 	bl	10094 <memq_peek>
		if (link) {
   1a69e:	4606      	mov	r6, r0
   1a6a0:	b390      	cbz	r0, 1a708 <lll_conn_isr_rx+0x280>
					       lll->packet_tx_head_offset);
   1a6a2:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
			pdu_data_tx_len = pdu_data_tx->len;
   1a6a6:	9b01      	ldr	r3, [sp, #4]
   1a6a8:	4413      	add	r3, r2
   1a6aa:	7959      	ldrb	r1, [r3, #5]
			if (pdu_data_tx_len != 0U) {
   1a6ac:	b151      	cbz	r1, 1a6c4 <lll_conn_isr_rx+0x23c>
				if (lll->enc_tx) {
   1a6ae:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
   1a6b2:	06d8      	lsls	r0, r3, #27
   1a6b4:	d506      	bpl.n	1a6c4 <lll_conn_isr_rx+0x23c>
					lll->ccm_tx.counter++;
   1a6b6:	e9d4 301e 	ldrd	r3, r0, [r4, #120]	; 0x78
   1a6ba:	3301      	adds	r3, #1
   1a6bc:	f140 0000 	adc.w	r0, r0, #0
   1a6c0:	e9c4 301e 	strd	r3, r0, [r4, #120]	; 0x78
			if (offset < lll->packet_tx_head_len) {
   1a6c4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
			offset = lll->packet_tx_head_offset + pdu_data_tx_len;
   1a6c8:	440a      	add	r2, r1
   1a6ca:	b2d2      	uxtb	r2, r2
			if (offset < lll->packet_tx_head_len) {
   1a6cc:	429a      	cmp	r2, r3
   1a6ce:	d22d      	bcs.n	1a72c <lll_conn_isr_rx+0x2a4>
				lll->packet_tx_head_offset = offset;
   1a6d0:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
   1a6d4:	7f3a      	ldrb	r2, [r7, #28]
   1a6d6:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
	struct node_tx *tx_release = NULL;
   1a6da:	2500      	movs	r5, #0
   1a6dc:	e76c      	b.n	1a5b8 <lll_conn_isr_rx+0x130>
	    (ull_pdu_rx_alloc_peek(3) != 0)) {
   1a6de:	2003      	movs	r0, #3
   1a6e0:	f7f9 ff84 	bl	145ec <ull_pdu_rx_alloc_peek>
	if ((pdu_data_rx->sn == lll->nesn) &&
   1a6e4:	b168      	cbz	r0, 1a702 <lll_conn_isr_rx+0x27a>
		lll->nesn++;
   1a6e6:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
   1a6ea:	f083 0302 	eor.w	r3, r3, #2
   1a6ee:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
		if (pdu_data_rx->len != 0) {
   1a6f2:	7f7b      	ldrb	r3, [r7, #29]
   1a6f4:	b12b      	cbz	r3, 1a702 <lll_conn_isr_rx+0x27a>
			if (lll->enc_rx) {
   1a6f6:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
   1a6fa:	071a      	lsls	r2, r3, #28
   1a6fc:	d43c      	bmi.n	1a778 <lll_conn_isr_rx+0x2f0>
			*is_rx_enqueue = 1U;
   1a6fe:	2601      	movs	r6, #1
   1a700:	e762      	b.n	1a5c8 <lll_conn_isr_rx+0x140>
   1a702:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
   1a706:	e75e      	b.n	1a5c6 <lll_conn_isr_rx+0x13e>
   1a708:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
   1a70c:	7f3a      	ldrb	r2, [r7, #28]
	struct node_tx *tx_release = NULL;
   1a70e:	2500      	movs	r5, #0
   1a710:	e752      	b.n	1a5b8 <lll_conn_isr_rx+0x130>
			LL_ASSERT(!radio_is_ready());
   1a712:	4a14      	ldr	r2, [pc, #80]	; (1a764 <lll_conn_isr_rx+0x2dc>)
   1a714:	4916      	ldr	r1, [pc, #88]	; (1a770 <lll_conn_isr_rx+0x2e8>)
   1a716:	4815      	ldr	r0, [pc, #84]	; (1a76c <lll_conn_isr_rx+0x2e4>)
   1a718:	23da      	movs	r3, #218	; 0xda
   1a71a:	f003 fc16 	bl	1df4a <printk>
   1a71e:	4040      	eors	r0, r0
   1a720:	f380 8811 	msr	BASEPRI, r0
   1a724:	f04f 0003 	mov.w	r0, #3
   1a728:	df02      	svc	2
   1a72a:	e77d      	b.n	1a628 <lll_conn_isr_rx+0x1a0>
			} else if (offset == lll->packet_tx_head_len) {
   1a72c:	d1ec      	bne.n	1a708 <lll_conn_isr_rx+0x280>
				lll->packet_tx_head_len = 0;
   1a72e:	2200      	movs	r2, #0
   1a730:	f8a4 2044 	strh.w	r2, [r4, #68]	; 0x44
				memq_dequeue(lll->memq_tx.tail,
   1a734:	6b60      	ldr	r0, [r4, #52]	; 0x34
   1a736:	f104 0130 	add.w	r1, r4, #48	; 0x30
   1a73a:	f7f5 fcb3 	bl	100a4 <memq_dequeue>
				link->next = tx->next; /* Indicates ctrl or data
   1a73e:	9d01      	ldr	r5, [sp, #4]
   1a740:	7f3a      	ldrb	r2, [r7, #28]
   1a742:	682b      	ldr	r3, [r5, #0]
   1a744:	6033      	str	r3, [r6, #0]
				tx->next = link;
   1a746:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
   1a74a:	602e      	str	r6, [r5, #0]
				*tx_release = tx;
   1a74c:	e734      	b.n	1a5b8 <lll_conn_isr_rx+0x130>
   1a74e:	bf00      	nop
   1a750:	0001a11d 	.word	0x0001a11d
   1a754:	2000a2e4 	.word	0x2000a2e4
   1a758:	2000a86a 	.word	0x2000a86a
   1a75c:	0001a2d1 	.word	0x0001a2d1
   1a760:	2000a86b 	.word	0x2000a86b
   1a764:	00024ad4 	.word	0x00024ad4
   1a768:	00024a74 	.word	0x00024a74
   1a76c:	00023fe4 	.word	0x00023fe4
   1a770:	00024a98 	.word	0x00024a98
   1a774:	00024b2c 	.word	0x00024b2c
				done = radio_ccm_is_done();
   1a778:	f000 fe86 	bl	1b488 <radio_ccm_is_done>
				LL_ASSERT(done);
   1a77c:	2800      	cmp	r0, #0
   1a77e:	d03b      	beq.n	1a7f8 <lll_conn_isr_rx+0x370>
				bool mic_failure = !radio_ccm_mic_is_valid();
   1a780:	f000 fea4 	bl	1b4cc <radio_ccm_mic_is_valid>
				if (mic_failure &&
   1a784:	bb30      	cbnz	r0, 1a7d4 <lll_conn_isr_rx+0x34c>
				    lll->ccm_rx.counter == 0 &&
   1a786:	f8d4 2057 	ldr.w	r2, [r4, #87]	; 0x57
   1a78a:	f8d4 305b 	ldr.w	r3, [r4, #91]	; 0x5b
				if (mic_failure &&
   1a78e:	4313      	orrs	r3, r2
   1a790:	d104      	bne.n	1a79c <lll_conn_isr_rx+0x314>
				    (pdu_data_rx->ll_id ==
   1a792:	7f3b      	ldrb	r3, [r7, #28]
				    lll->ccm_rx.counter == 0 &&
   1a794:	f003 0303 	and.w	r3, r3, #3
   1a798:	2b03      	cmp	r3, #3
   1a79a:	d004      	beq.n	1a7a6 <lll_conn_isr_rx+0x31e>
					mic_state = LLL_CONN_MIC_FAIL;
   1a79c:	4b1e      	ldr	r3, [pc, #120]	; (1a818 <lll_conn_isr_rx+0x390>)
   1a79e:	2202      	movs	r2, #2
   1a7a0:	701a      	strb	r2, [r3, #0]
	uint8_t is_rx_enqueue = 0U;
   1a7a2:	2600      	movs	r6, #0
   1a7a4:	e6c9      	b.n	1a53a <lll_conn_isr_rx+0xb2>
						radio_pkt_scratch_get();
   1a7a6:	f000 fc59 	bl	1b05c <radio_pkt_scratch_get>
					if (ctrl_pdu_len_check(
   1a7aa:	7842      	ldrb	r2, [r0, #1]
   1a7ac:	2a1b      	cmp	r2, #27
						radio_pkt_scratch_get();
   1a7ae:	4601      	mov	r1, r0
					if (ctrl_pdu_len_check(
   1a7b0:	d8f4      	bhi.n	1a79c <lll_conn_isr_rx+0x314>
						memcpy(pdu_data_rx,
   1a7b2:	3203      	adds	r2, #3
   1a7b4:	f107 001c 	add.w	r0, r7, #28
   1a7b8:	f005 fb59 	bl	1fe6e <memcpy>
						lll->ccm_rx.counter--;
   1a7bc:	f8d4 3057 	ldr.w	r3, [r4, #87]	; 0x57
   1a7c0:	f8d4 205b 	ldr.w	r2, [r4, #91]	; 0x5b
   1a7c4:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
   1a7c8:	f142 32ff 	adc.w	r2, r2, #4294967295	; 0xffffffff
   1a7cc:	f8c4 3057 	str.w	r3, [r4, #87]	; 0x57
   1a7d0:	f8c4 205b 	str.w	r2, [r4, #91]	; 0x5b
				lll->ccm_rx.counter++;
   1a7d4:	f8d4 3057 	ldr.w	r3, [r4, #87]	; 0x57
   1a7d8:	f8d4 205b 	ldr.w	r2, [r4, #91]	; 0x5b
				mic_state = LLL_CONN_MIC_PASS;
   1a7dc:	490e      	ldr	r1, [pc, #56]	; (1a818 <lll_conn_isr_rx+0x390>)
				lll->ccm_rx.counter++;
   1a7de:	3301      	adds	r3, #1
						lll->ccm_rx.counter--;
   1a7e0:	f104 0057 	add.w	r0, r4, #87	; 0x57
				lll->ccm_rx.counter++;
   1a7e4:	f142 0200 	adc.w	r2, r2, #0
   1a7e8:	f8c4 3057 	str.w	r3, [r4, #87]	; 0x57
				mic_state = LLL_CONN_MIC_PASS;
   1a7ec:	2601      	movs	r6, #1
				lll->ccm_rx.counter++;
   1a7ee:	6042      	str	r2, [r0, #4]
				mic_state = LLL_CONN_MIC_PASS;
   1a7f0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
   1a7f4:	700e      	strb	r6, [r1, #0]
		if (err) {
   1a7f6:	e6e7      	b.n	1a5c8 <lll_conn_isr_rx+0x140>
				LL_ASSERT(done);
   1a7f8:	4a08      	ldr	r2, [pc, #32]	; (1a81c <lll_conn_isr_rx+0x394>)
   1a7fa:	4909      	ldr	r1, [pc, #36]	; (1a820 <lll_conn_isr_rx+0x398>)
   1a7fc:	4809      	ldr	r0, [pc, #36]	; (1a824 <lll_conn_isr_rx+0x39c>)
   1a7fe:	f240 23c2 	movw	r3, #706	; 0x2c2
   1a802:	f003 fba2 	bl	1df4a <printk>
   1a806:	4040      	eors	r0, r0
   1a808:	f380 8811 	msr	BASEPRI, r0
   1a80c:	f04f 0003 	mov.w	r0, #3
   1a810:	df02      	svc	2
   1a812:	e7b5      	b.n	1a780 <lll_conn_isr_rx+0x2f8>
	uint8_t is_rx_enqueue = 0U;
   1a814:	462e      	mov	r6, r5
   1a816:	e66a      	b.n	1a4ee <lll_conn_isr_rx+0x66>
   1a818:	2000a86c 	.word	0x2000a86c
   1a81c:	00024ad4 	.word	0x00024ad4
   1a820:	00024b24 	.word	0x00024b24
   1a824:	00023fe4 	.word	0x00023fe4

0001a828 <lll_conn_flush>:

void lll_conn_flush(uint16_t handle, struct lll_conn *lll)
{
	/* Nothing to be flushed */
}
   1a828:	4770      	bx	lr
   1a82a:	bf00      	nop

0001a82c <prepare_cb>:
{
	return 0;
}

static int prepare_cb(struct lll_prepare_param *prepare_param)
{
   1a82c:	b570      	push	{r4, r5, r6, lr}
	struct lll_conn *lll = prepare_param->param;
   1a82e:	68c4      	ldr	r4, [r0, #12]
{
   1a830:	b084      	sub	sp, #16
   1a832:	4605      	mov	r5, r0
	uint8_t data_chan_use;
	uint32_t remainder;
	DEBUG_RADIO_START_M(1);

	/* Reset connection event global variables */
	lll_conn_prepare_reset();
   1a834:	f7ff fcca 	bl	1a1cc <lll_conn_prepare_reset>

	/* Deduce the latency */
	lll->latency_event = lll->latency_prepare - 1;
   1a838:	8ae1      	ldrh	r1, [r4, #22]

	/* Calculate the current event counter value */
	event_counter = lll->event_counter + lll->latency_event;
   1a83a:	8b66      	ldrh	r6, [r4, #26]
	lll->event_counter = lll->event_counter + lll->latency_prepare;

	/* Reset accumulated latencies */
	lll->latency_prepare = 0;

	if (lll->data_chan_sel) {
   1a83c:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
	lll->latency_event = lll->latency_prepare - 1;
   1a840:	1e48      	subs	r0, r1, #1
	lll->event_counter = lll->event_counter + lll->latency_prepare;
   1a842:	4431      	add	r1, r6
	lll->latency_prepare = 0;
   1a844:	2200      	movs	r2, #0
	lll->latency_event = lll->latency_prepare - 1;
   1a846:	b280      	uxth	r0, r0
	lll->event_counter = lll->event_counter + lll->latency_prepare;
   1a848:	8361      	strh	r1, [r4, #26]
	if (lll->data_chan_sel) {
   1a84a:	0659      	lsls	r1, r3, #25
	lll->latency_prepare = 0;
   1a84c:	82e2      	strh	r2, [r4, #22]
	lll->latency_event = lll->latency_prepare - 1;
   1a84e:	8320      	strh	r0, [r4, #24]
	if (lll->data_chan_sel) {
   1a850:	f104 021c 	add.w	r2, r4, #28
   1a854:	d555      	bpl.n	1a902 <prepare_cb+0xd6>
	event_counter = lll->event_counter + lll->latency_event;
   1a856:	4430      	add	r0, r6
#if defined(CONFIG_BT_CTLR_CHAN_SEL_2)
		data_chan_use = lll_chan_sel_2(event_counter, lll->data_chan_id,
   1a858:	8c61      	ldrh	r1, [r4, #34]	; 0x22
   1a85a:	b280      	uxth	r0, r0
   1a85c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1a860:	f7fd fda6 	bl	183b0 <lll_chan_sel_2>
   1a864:	4606      	mov	r6, r0
					       &lll->data_chan_map[0],
					       lll->data_chan_count);
	}

	/* Prepare the Tx PDU */
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1a866:	a903      	add	r1, sp, #12
   1a868:	4620      	mov	r0, r4
   1a86a:	f7ff fdb9 	bl	1a3e0 <lll_conn_pdu_tx_prep>
	pdu_data_tx->sn = lll->sn;
   1a86e:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
   1a872:	9803      	ldr	r0, [sp, #12]
	pdu_data_tx->nesn = lll->nesn;
   1a874:	f3c2 0340 	ubfx	r3, r2, #1, #1
   1a878:	7801      	ldrb	r1, [r0, #0]
	pdu_data_tx->sn = lll->sn;
   1a87a:	f3c2 0200 	ubfx	r2, r2, #0, #1
	pdu_data_tx->nesn = lll->nesn;
   1a87e:	009b      	lsls	r3, r3, #2
   1a880:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
   1a884:	f021 020c 	bic.w	r2, r1, #12
   1a888:	4313      	orrs	r3, r2
   1a88a:	7003      	strb	r3, [r0, #0]

	/* Start setting up of Radio h/w */
	radio_reset();
   1a88c:	f000 fa9e 	bl	1adcc <radio_reset>
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	radio_tx_power_set(lll->tx_pwr_lvl);
#else
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   1a890:	2000      	movs	r0, #0
   1a892:	f000 faed 	bl	1ae70 <radio_tx_power_set>
#endif

	radio_aa_set(lll->access_addr);
   1a896:	f104 0008 	add.w	r0, r4, #8
   1a89a:	f000 fb07 	bl	1aeac <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
			    (((uint32_t)lll->crc_init[2] << 16) |
			     ((uint32_t)lll->crc_init[1] << 8) |
   1a89e:	7b63      	ldrb	r3, [r4, #13]
			    (((uint32_t)lll->crc_init[2] << 16) |
   1a8a0:	7ba2      	ldrb	r2, [r4, #14]
			     ((uint32_t)lll->crc_init[0])));
   1a8a2:	7b21      	ldrb	r1, [r4, #12]
			     ((uint32_t)lll->crc_init[1] << 8) |
   1a8a4:	021b      	lsls	r3, r3, #8
			    (((uint32_t)lll->crc_init[2] << 16) |
   1a8a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   1a8aa:	4319      	orrs	r1, r3
   1a8ac:	f240 605b 	movw	r0, #1627	; 0x65b
   1a8b0:	f000 fbba 	bl	1b028 <radio_crc_configure>
	lll_chan_set(data_chan_use);
   1a8b4:	4630      	mov	r0, r6
   1a8b6:	f7ff f851 	bl	1995c <lll_chan_set>

	/* setup the radio tx packet buffer */
	lll_conn_tx_pkt_set(lll, pdu_data_tx);
   1a8ba:	9903      	ldr	r1, [sp, #12]
   1a8bc:	4620      	mov	r0, r4
   1a8be:	f7ff fd63 	bl	1a388 <lll_conn_tx_pkt_set>

	radio_isr_set(lll_conn_isr_tx, lll);
   1a8c2:	4621      	mov	r1, r4
   1a8c4:	481d      	ldr	r0, [pc, #116]	; (1a93c <prepare_cb+0x110>)
   1a8c6:	f000 fa61 	bl	1ad8c <radio_isr_set>

	radio_tmr_tifs_set(EVENT_IFS_US);
   1a8ca:	2096      	movs	r0, #150	; 0x96
   1a8cc:	f000 fc62 	bl	1b194 <radio_tmr_tifs_set>

#if defined(CONFIG_BT_CTLR_PHY)
	radio_switch_complete_and_rx(lll->phy_rx);
   1a8d0:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   1a8d4:	f000 0007 	and.w	r0, r0, #7
   1a8d8:	f000 fbc4 	bl	1b064 <radio_switch_complete_and_rx>
	radio_switch_complete_and_rx(0);
#endif /* !CONFIG_BT_CTLR_PHY */

	ticks_at_event = prepare_param->ticks_at_expire;
	evt = HDR_LLL2EVT(lll);
	ticks_at_event += lll_evt_offset_get(evt);
   1a8dc:	6820      	ldr	r0, [r4, #0]
	ticks_at_event = prepare_param->ticks_at_expire;
   1a8de:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_evt_offset_get(evt);
   1a8e0:	f7ff f836 	bl	19950 <lll_evt_offset_get>

	ticks_at_start = ticks_at_event;
	ticks_at_start += HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US);
   1a8e4:	3609      	adds	r6, #9

	remainder = prepare_param->remainder;
	remainder_us = radio_tmr_start(1, ticks_at_start, remainder);
   1a8e6:	1831      	adds	r1, r6, r0
   1a8e8:	686a      	ldr	r2, [r5, #4]
   1a8ea:	2001      	movs	r0, #1
   1a8ec:	f000 fc5e 	bl	1b1ac <radio_tmr_start>

	/* capture end of Tx-ed PDU, used to calculate HCTO. */
	radio_tmr_end_capture();
   1a8f0:	f000 fd3c 	bl	1b36c <radio_tmr_end_capture>
	} else
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */
	{
		uint32_t ret;

		ret = lll_prepare_done(lll);
   1a8f4:	4620      	mov	r0, r4
   1a8f6:	f7fe ffc9 	bl	1988c <lll_prepare_done>
		LL_ASSERT(!ret);
   1a8fa:	b978      	cbnz	r0, 1a91c <prepare_cb+0xf0>
	}

	DEBUG_RADIO_START_M(1);

	return 0;
}
   1a8fc:	2000      	movs	r0, #0
   1a8fe:	b004      	add	sp, #16
   1a900:	bd70      	pop	{r4, r5, r6, pc}
		data_chan_use = lll_chan_sel_1(&lll->data_chan_use,
   1a902:	f003 063f 	and.w	r6, r3, #63	; 0x3f
   1a906:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
   1a90a:	9600      	str	r6, [sp, #0]
   1a90c:	4613      	mov	r3, r2
   1a90e:	4602      	mov	r2, r0
   1a910:	f104 0023 	add.w	r0, r4, #35	; 0x23
   1a914:	f7fd fd10 	bl	18338 <lll_chan_sel_1>
   1a918:	4606      	mov	r6, r0
   1a91a:	e7a4      	b.n	1a866 <prepare_cb+0x3a>
		LL_ASSERT(!ret);
   1a91c:	4a08      	ldr	r2, [pc, #32]	; (1a940 <prepare_cb+0x114>)
   1a91e:	4909      	ldr	r1, [pc, #36]	; (1a944 <prepare_cb+0x118>)
   1a920:	4809      	ldr	r0, [pc, #36]	; (1a948 <prepare_cb+0x11c>)
   1a922:	23d3      	movs	r3, #211	; 0xd3
   1a924:	f003 fb11 	bl	1df4a <printk>
   1a928:	4040      	eors	r0, r0
   1a92a:	f380 8811 	msr	BASEPRI, r0
   1a92e:	f04f 0003 	mov.w	r0, #3
   1a932:	df02      	svc	2
}
   1a934:	2000      	movs	r0, #0
   1a936:	b004      	add	sp, #16
   1a938:	bd70      	pop	{r4, r5, r6, pc}
   1a93a:	bf00      	nop
   1a93c:	0001a2d1 	.word	0x0001a2d1
   1a940:	00024b58 	.word	0x00024b58
   1a944:	000242a0 	.word	0x000242a0
   1a948:	00023fe4 	.word	0x00023fe4

0001a94c <lll_master_prepare>:
{
   1a94c:	b530      	push	{r4, r5, lr}
   1a94e:	b083      	sub	sp, #12
	struct lll_conn *lll = p->param;
   1a950:	68c5      	ldr	r5, [r0, #12]
{
   1a952:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   1a954:	f7ff f8dc 	bl	19b10 <lll_hfclock_on>
	LL_ASSERT(!err || err == -EINPROGRESS);
   1a958:	b108      	cbz	r0, 1a95e <lll_master_prepare+0x12>
   1a95a:	3044      	adds	r0, #68	; 0x44
   1a95c:	d11e      	bne.n	1a99c <lll_master_prepare+0x50>
	elapsed = p->lazy + 1;
   1a95e:	8923      	ldrh	r3, [r4, #8]
	lll->latency_prepare += elapsed;
   1a960:	8ae8      	ldrh	r0, [r5, #22]
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0, p);
   1a962:	4a15      	ldr	r2, [pc, #84]	; (1a9b8 <lll_master_prepare+0x6c>)
   1a964:	4915      	ldr	r1, [pc, #84]	; (1a9bc <lll_master_prepare+0x70>)
	elapsed = p->lazy + 1;
   1a966:	3301      	adds	r3, #1
	lll->latency_prepare += elapsed;
   1a968:	4403      	add	r3, r0
   1a96a:	82eb      	strh	r3, [r5, #22]
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0, p);
   1a96c:	4814      	ldr	r0, [pc, #80]	; (1a9c0 <lll_master_prepare+0x74>)
   1a96e:	9400      	str	r4, [sp, #0]
   1a970:	2300      	movs	r3, #0
   1a972:	f7fe feff 	bl	19774 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   1a976:	b108      	cbz	r0, 1a97c <lll_master_prepare+0x30>
   1a978:	3044      	adds	r0, #68	; 0x44
   1a97a:	d101      	bne.n	1a980 <lll_master_prepare+0x34>
}
   1a97c:	b003      	add	sp, #12
   1a97e:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   1a980:	4a10      	ldr	r2, [pc, #64]	; (1a9c4 <lll_master_prepare+0x78>)
   1a982:	4911      	ldr	r1, [pc, #68]	; (1a9c8 <lll_master_prepare+0x7c>)
   1a984:	4811      	ldr	r0, [pc, #68]	; (1a9cc <lll_master_prepare+0x80>)
   1a986:	2352      	movs	r3, #82	; 0x52
   1a988:	f003 fadf 	bl	1df4a <printk>
   1a98c:	4040      	eors	r0, r0
   1a98e:	f380 8811 	msr	BASEPRI, r0
   1a992:	f04f 0003 	mov.w	r0, #3
   1a996:	df02      	svc	2
}
   1a998:	b003      	add	sp, #12
   1a99a:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   1a99c:	4a09      	ldr	r2, [pc, #36]	; (1a9c4 <lll_master_prepare+0x78>)
   1a99e:	490a      	ldr	r1, [pc, #40]	; (1a9c8 <lll_master_prepare+0x7c>)
   1a9a0:	480a      	ldr	r0, [pc, #40]	; (1a9cc <lll_master_prepare+0x80>)
   1a9a2:	2348      	movs	r3, #72	; 0x48
   1a9a4:	f003 fad1 	bl	1df4a <printk>
   1a9a8:	4040      	eors	r0, r0
   1a9aa:	f380 8811 	msr	BASEPRI, r0
   1a9ae:	f04f 0003 	mov.w	r0, #3
   1a9b2:	df02      	svc	2
   1a9b4:	e7d3      	b.n	1a95e <lll_master_prepare+0x12>
   1a9b6:	bf00      	nop
   1a9b8:	0001a82d 	.word	0x0001a82d
   1a9bc:	0001a1f5 	.word	0x0001a1f5
   1a9c0:	00019949 	.word	0x00019949
   1a9c4:	00024b58 	.word	0x00024b58
   1a9c8:	00024aac 	.word	0x00024aac
   1a9cc:	00023fe4 	.word	0x00023fe4

0001a9d0 <cntr_init>:

static uint8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   1a9d0:	4b05      	ldr	r3, [pc, #20]	; (1a9e8 <cntr_init+0x18>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   1a9d2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1a9d6:	2100      	movs	r1, #0
   1a9d8:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   1a9dc:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    p_reg->INTENSET = mask;
   1a9e0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_rtc_event_enable(NRF_RTC, RTC_EVTENSET_COMPARE0_Msk);
	nrf_rtc_int_enable(NRF_RTC, RTC_INTENSET_COMPARE0_Msk);
}
   1a9e4:	4770      	bx	lr
   1a9e6:	bf00      	nop
   1a9e8:	4000b000 	.word	0x4000b000

0001a9ec <cntr_start>:

uint32_t cntr_start(void)
{
	if (_refcount++) {
   1a9ec:	4b05      	ldr	r3, [pc, #20]	; (1aa04 <cntr_start+0x18>)
   1a9ee:	7818      	ldrb	r0, [r3, #0]
   1a9f0:	1c42      	adds	r2, r0, #1
   1a9f2:	701a      	strb	r2, [r3, #0]
   1a9f4:	b918      	cbnz	r0, 1a9fe <cntr_start+0x12>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1a9f6:	4b04      	ldr	r3, [pc, #16]	; (1aa08 <cntr_start+0x1c>)
   1a9f8:	2201      	movs	r2, #1
   1a9fa:	601a      	str	r2, [r3, #0]
		return 1;
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_START);

	return 0;
   1a9fc:	4770      	bx	lr
		return 1;
   1a9fe:	2001      	movs	r0, #1
}
   1aa00:	4770      	bx	lr
   1aa02:	bf00      	nop
   1aa04:	2000a86d 	.word	0x2000a86d
   1aa08:	4000b000 	.word	0x4000b000

0001aa0c <cntr_stop>:

uint32_t cntr_stop(void)
{
   1aa0c:	b510      	push	{r4, lr}
	LL_ASSERT(_refcount);
   1aa0e:	4c0d      	ldr	r4, [pc, #52]	; (1aa44 <cntr_stop+0x38>)
   1aa10:	7820      	ldrb	r0, [r4, #0]
   1aa12:	b148      	cbz	r0, 1aa28 <cntr_stop+0x1c>

	if (--_refcount) {
   1aa14:	3801      	subs	r0, #1
   1aa16:	b2c0      	uxtb	r0, r0
   1aa18:	7020      	strb	r0, [r4, #0]
   1aa1a:	b918      	cbnz	r0, 1aa24 <cntr_stop+0x18>
   1aa1c:	4b0a      	ldr	r3, [pc, #40]	; (1aa48 <cntr_stop+0x3c>)
   1aa1e:	2201      	movs	r2, #1
   1aa20:	601a      	str	r2, [r3, #0]
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_STOP);

	return 0;
}
   1aa22:	bd10      	pop	{r4, pc}
		return 1;
   1aa24:	2001      	movs	r0, #1
}
   1aa26:	bd10      	pop	{r4, pc}
	LL_ASSERT(_refcount);
   1aa28:	4a08      	ldr	r2, [pc, #32]	; (1aa4c <cntr_stop+0x40>)
   1aa2a:	4909      	ldr	r1, [pc, #36]	; (1aa50 <cntr_stop+0x44>)
   1aa2c:	4809      	ldr	r0, [pc, #36]	; (1aa54 <cntr_stop+0x48>)
   1aa2e:	232e      	movs	r3, #46	; 0x2e
   1aa30:	f003 fa8b 	bl	1df4a <printk>
   1aa34:	4040      	eors	r0, r0
   1aa36:	f380 8811 	msr	BASEPRI, r0
   1aa3a:	f04f 0003 	mov.w	r0, #3
   1aa3e:	df02      	svc	2
   1aa40:	7820      	ldrb	r0, [r4, #0]
   1aa42:	e7e7      	b.n	1aa14 <cntr_stop+0x8>
   1aa44:	2000a86d 	.word	0x2000a86d
   1aa48:	4000b004 	.word	0x4000b004
   1aa4c:	00024bbc 	.word	0x00024bbc
   1aa50:	00024c08 	.word	0x00024c08
   1aa54:	00023fe4 	.word	0x00023fe4

0001aa58 <cntr_cnt_get>:
     return p_reg->COUNTER;
   1aa58:	4b01      	ldr	r3, [pc, #4]	; (1aa60 <cntr_cnt_get+0x8>)
   1aa5a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

uint32_t cntr_cnt_get(void)
{
	return nrf_rtc_counter_get(NRF_RTC);
}
   1aa5e:	4770      	bx	lr
   1aa60:	4000b000 	.word	0x4000b000

0001aa64 <cntr_cmp_set>:
    p_reg->CC[ch] = cc_val;
   1aa64:	4b02      	ldr	r3, [pc, #8]	; (1aa70 <cntr_cmp_set+0xc>)
   1aa66:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   1aa6a:	f843 1020 	str.w	r1, [r3, r0, lsl #2]

void cntr_cmp_set(uint8_t cmp, uint32_t value)
{
	nrf_rtc_cc_set(NRF_RTC, cmp, value);
}
   1aa6e:	4770      	bx	lr
   1aa70:	4000b000 	.word	0x4000b000

0001aa74 <do_ecb>:
	uint8_t clear_text[16];
	uint8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
   1aa74:	b4f0      	push	{r4, r5, r6, r7}
	do {
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
   1aa76:	4b12      	ldr	r3, [pc, #72]	; (1aac0 <do_ecb+0x4c>)

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ecb_task_trigger(NRF_ECB_Type * p_reg, nrf_ecb_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1aa78:	4d12      	ldr	r5, [pc, #72]	; (1aac4 <do_ecb+0x50>)
   1aa7a:	2601      	movs	r6, #1
   1aa7c:	4634      	mov	r4, r6
		NRF_ECB->EVENTS_ENDECB = 0;
   1aa7e:	2100      	movs	r1, #0
   1aa80:	602c      	str	r4, [r5, #0]
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
   1aa82:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   1aa86:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   1aa8a:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
   1aa8e:	601c      	str	r4, [r3, #0]
}
   1aa90:	e005      	b.n	1aa9e <do_ecb+0x2a>
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STARTECB);
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   1aa92:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   1aa96:	b932      	cbnz	r2, 1aaa6 <do_ecb+0x32>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   1aa98:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   1aa9c:	b11a      	cbz	r2, 1aaa6 <do_ecb+0x32>
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   1aa9e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   1aaa2:	2a00      	cmp	r2, #0
   1aaa4:	d0f5      	beq.n	1aa92 <do_ecb+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1aaa6:	602e      	str	r6, [r5, #0]
#else
			/*__WFE();*/
#endif
		}
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   1aaa8:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   1aaac:	2a00      	cmp	r2, #0
   1aaae:	d1e7      	bne.n	1aa80 <do_ecb+0xc>
   1aab0:	f8d3 7504 	ldr.w	r7, [r3, #1284]	; 0x504
   1aab4:	2f00      	cmp	r7, #0
   1aab6:	d0e3      	beq.n	1aa80 <do_ecb+0xc>

	NRF_ECB->ECBDATAPTR = 0;
}
   1aab8:	bcf0      	pop	{r4, r5, r6, r7}
	NRF_ECB->ECBDATAPTR = 0;
   1aaba:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   1aabe:	4770      	bx	lr
   1aac0:	4000e000 	.word	0x4000e000
   1aac4:	4000e004 	.word	0x4000e004

0001aac8 <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(uint8_t const *const key_le, uint8_t const *const clear_text_le,
		 uint8_t * const cipher_text_le, uint8_t * const cipher_text_be)
{
   1aac8:	b570      	push	{r4, r5, r6, lr}
   1aaca:	b08c      	sub	sp, #48	; 0x30
   1aacc:	460e      	mov	r6, r1
   1aace:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   1aad0:	4601      	mov	r1, r0
   1aad2:	2210      	movs	r2, #16
   1aad4:	4668      	mov	r0, sp
{
   1aad6:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   1aad8:	f7f5 faac 	bl	10034 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   1aadc:	2210      	movs	r2, #16
   1aade:	eb0d 0002 	add.w	r0, sp, r2
   1aae2:	4631      	mov	r1, r6
   1aae4:	f7f5 faa6 	bl	10034 <mem_rcopy>

	do_ecb(&ecb);
   1aae8:	4668      	mov	r0, sp
   1aaea:	f7ff ffc3 	bl	1aa74 <do_ecb>

	if (cipher_text_le) {
   1aaee:	b125      	cbz	r5, 1aafa <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   1aaf0:	4628      	mov	r0, r5
   1aaf2:	2210      	movs	r2, #16
   1aaf4:	a908      	add	r1, sp, #32
   1aaf6:	f7f5 fa9d 	bl	10034 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   1aafa:	b124      	cbz	r4, 1ab06 <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
   1aafc:	4620      	mov	r0, r4
   1aafe:	2210      	movs	r2, #16
   1ab00:	a908      	add	r1, sp, #32
   1ab02:	f005 f9b4 	bl	1fe6e <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
   1ab06:	b00c      	add	sp, #48	; 0x30
   1ab08:	bd70      	pop	{r4, r5, r6, pc}
   1ab0a:	bf00      	nop

0001ab0c <sw_switch.isra.0>:
#endif

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
static uint8_t sw_tifs_toggle;

static void sw_switch(uint8_t dir, uint8_t phy_curr, uint8_t flags_curr, uint8_t phy_next,
   1ab0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		      uint8_t flags_next)
{
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   1ab10:	f8df 824c 	ldr.w	r8, [pc, #588]	; 1ad60 <sw_switch.isra.0+0x254>
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1ab14:	f8df a23c 	ldr.w	sl, [pc, #572]	; 1ad54 <sw_switch.isra.0+0x248>
   1ab18:	f998 7000 	ldrsb.w	r7, [r8]
   1ab1c:	4b88      	ldr	r3, [pc, #544]	; (1ad40 <sw_switch.isra.0+0x234>)
   1ab1e:	f898 6000 	ldrb.w	r6, [r8]
   1ab22:	f8ca 3560 	str.w	r3, [sl, #1376]	; 0x560
   1ab26:	f107 030b 	add.w	r3, r7, #11
   1ab2a:	b2db      	uxtb	r3, r3
   1ab2c:	00db      	lsls	r3, r3, #3
	 * (TX/RX).
	 */
	nrf_ppi_event_endpoint_setup(
		NRF_PPI,
		radio_enable_ppi,
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   1ab2e:	4c85      	ldr	r4, [pc, #532]	; (1ad44 <sw_switch.isra.0+0x238>)
   1ab30:	f8df e230 	ldr.w	lr, [pc, #560]	; 1ad64 <sw_switch.isra.0+0x258>
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   1ab34:	ea4f 09c6 	mov.w	r9, r6, lsl #3
   1ab38:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1ab3c:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
   1ab40:	f109 4c80 	add.w	ip, r9, #1073741824	; 0x40000000
   1ab44:	f50c 3cf8 	add.w	ip, ip, #126976	; 0x1f000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   1ab48:	eb04 0b86 	add.w	fp, r4, r6, lsl #2
   1ab4c:	f107 0508 	add.w	r5, r7, #8
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1ab50:	f107 0410 	add.w	r4, r7, #16
   1ab54:	f8ca c564 	str.w	ip, [sl, #1380]	; 0x564

NRF_STATIC_INLINE void nrf_ppi_event_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                    nrf_ppi_channel_t channel,
                                                    uint32_t          eep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1ab58:	44ce      	add	lr, r9
   1ab5a:	f8c3 b510 	str.w	fp, [r3, #1296]	; 0x510
	uint8_t cc = SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle);
	uint32_t delay;

	hal_radio_sw_switch_setup(cc, ppi, sw_tifs_toggle);

	if (dir) {
   1ab5e:	b2e4      	uxtb	r4, r4
   1ab60:	b2ed      	uxtb	r5, r5
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   1ab62:	fa0f fc86 	sxth.w	ip, r6
   1ab66:	b1e8      	cbz	r0, 1aba4 <sw_switch.isra.0+0x98>
	}
}

static inline uint32_t hal_radio_tx_ready_delay_ns_get(uint8_t phy, uint8_t flags)
{
	switch (phy) {
   1ab68:	2a02      	cmp	r2, #2
   1ab6a:	ea4f 0a86 	mov.w	sl, r6, lsl #2
   1ab6e:	d04d      	beq.n	1ac0c <sw_switch.isra.0+0x100>
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_TXEN_TXIDLE_TX_1M_NS;
   1ab70:	f24a 593c 	movw	r9, #42300	; 0xa53c
   1ab74:	f649 70c4 	movw	r0, #40900	; 0x9fc4
   1ab78:	2a04      	cmp	r2, #4
   1ab7a:	bf18      	it	ne
   1ab7c:	4681      	movne	r9, r0
	}
}

static inline uint32_t hal_radio_rx_chain_delay_ns_get(uint8_t phy, uint8_t flags)
{
	switch (phy) {
   1ab7e:	2902      	cmp	r1, #2
   1ab80:	f000 80b1 	beq.w	1ace6 <sw_switch.isra.0+0x1da>
   1ab84:	2904      	cmp	r1, #4
   1ab86:	f040 80a4 	bne.w	1acd2 <sw_switch.isra.0+0x1c6>
   1ab8a:	486f      	ldr	r0, [pc, #444]	; (1ad48 <sw_switch.isra.0+0x23c>)
   1ab8c:	f509 49eb 	add.w	r9, r9, #30080	; 0x7580
   1ab90:	f109 0914 	add.w	r9, r9, #20
   1ab94:	fba0 0909 	umull	r0, r9, r0, r9
   1ab98:	ea4f 1999 	mov.w	r9, r9, lsr #6

NRF_STATIC_INLINE void nrf_ppi_task_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                   nrf_ppi_channel_t channel,
                                                   uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1ab9c:	486b      	ldr	r0, [pc, #428]	; (1ad4c <sw_switch.isra.0+0x240>)
   1ab9e:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
		    HAL_SW_SWITCH_RADIO_ENABLE_S2_PPI(sw_tifs_toggle);
		uint8_t ppi_dis =
			HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(
			    sw_tifs_toggle);

		if (phy_curr & BIT(2)) {
   1aba2:	e040      	b.n	1ac26 <sw_switch.isra.0+0x11a>
   1aba4:	00e4      	lsls	r4, r4, #3
   1aba6:	00ed      	lsls	r5, r5, #3
   1aba8:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   1abac:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
   1abb0:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
   1abb4:	f505 35f8 	add.w	r5, r5, #126976	; 0x1f000
   1abb8:	4a65      	ldr	r2, [pc, #404]	; (1ad50 <sw_switch.isra.0+0x244>)
   1abba:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
		}
#endif /* CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	} else {
		/* RX */
		delay = HAL_RADIO_NS2US_CEIL(
   1abbe:	f04f 0928 	mov.w	r9, #40	; 0x28
static inline void hal_radio_sw_switch_coded_config_clear(uint8_t ppi_en,
	uint8_t ppi_dis, uint8_t cc_reg, uint8_t group_index)
{
	/* Invalidate PPI used when RXing on LE Coded PHY. */
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(
		ppi_en) = 0;
   1abc2:	f8c4 0510 	str.w	r0, [r4, #1296]	; 0x510
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(
		ppi_en) = 0;
   1abc6:	f8c4 0514 	str.w	r0, [r4, #1300]	; 0x514

	/* Wire the Group task disable to the default EVENTS_COMPARE. */
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_EVT(
		ppi_dis) =
   1abca:	f8c5 b510 	str.w	fp, [r5, #1296]	; 0x510
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_EVT(cc_reg);
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_TASK(
		ppi_dis) =
   1abce:	f8c5 e514 	str.w	lr, [r5, #1300]	; 0x514
		}
#endif /* CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}

	if (delay <
   1abd2:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
   1abd6:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
   1abda:	f50c 4c10 	add.w	ip, ip, #36864	; 0x9000
	 * always need to capture the PDU END time-stamp.
	 */
	radio_tmr_end_capture();
#endif /* CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	sw_tifs_toggle += 1U;
   1abde:	3601      	adds	r6, #1
		SW_SWITCH_TIMER->CC[cc]) {
   1abe0:	f8dc 3540 	ldr.w	r3, [ip, #1344]	; 0x540
	if (delay <
   1abe4:	454b      	cmp	r3, r9
				 SW_SWITCH_TIMER->CC[cc] - delay);
   1abe6:	bf8a      	itet	hi
   1abe8:	f8dc 3540 	ldrhi.w	r3, [ip, #1344]	; 0x540

NRF_STATIC_INLINE void nrf_timer_cc_set(NRF_TIMER_Type *       p_reg,
                                        nrf_timer_cc_channel_t cc_channel,
                                        uint32_t               cc_value)
{
    p_reg->CC[cc_channel] = cc_value;
   1abec:	2301      	movls	r3, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   1abee:	eba3 0309 	subhi.w	r3, r3, r9
   1abf2:	f8cc 3540 	str.w	r3, [ip, #1344]	; 0x540
    p_reg->CHENSET = mask;
   1abf6:	4b57      	ldr	r3, [pc, #348]	; (1ad54 <sw_switch.isra.0+0x248>)
	sw_tifs_toggle &= 1;
   1abf8:	f006 0601 	and.w	r6, r6, #1
   1abfc:	f44f 6290 	mov.w	r2, #1152	; 0x480
   1ac00:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   1ac04:	f888 6000 	strb.w	r6, [r8]
}
   1ac08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ac0c:	2902      	cmp	r1, #2
   1ac0e:	f000 8090 	beq.w	1ad32 <sw_switch.isra.0+0x226>
   1ac12:	2904      	cmp	r1, #4
   1ac14:	f000 808a 	beq.w	1ad2c <sw_switch.isra.0+0x220>
   1ac18:	f04f 0931 	mov.w	r9, #49	; 0x31
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1ac1c:	484b      	ldr	r0, [pc, #300]	; (1ad4c <sw_switch.isra.0+0x240>)
   1ac1e:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
		if (phy_curr & BIT(2)) {
   1ac22:	074b      	lsls	r3, r1, #29
   1ac24:	d56b      	bpl.n	1acfe <sw_switch.isra.0+0x1f2>
	switch (phy) {
   1ac26:	2a02      	cmp	r2, #2
   1ac28:	d07d      	beq.n	1ad26 <sw_switch.isra.0+0x21a>
   1ac2a:	f24a 10b8 	movw	r0, #41400	; 0xa1b8
   1ac2e:	f24a 7330 	movw	r3, #42800	; 0xa730
   1ac32:	2a04      	cmp	r2, #4
   1ac34:	bf14      	ite	ne
   1ac36:	4602      	movne	r2, r0
   1ac38:	461a      	moveq	r2, r3
			    SW_SWITCH_TIMER_S2_EVTS_COMP(sw_tifs_toggle);
   1ac3a:	3702      	adds	r7, #2
   1ac3c:	b2ff      	uxtb	r7, r7
   1ac3e:	00b8      	lsls	r0, r7, #2
				SW_SWITCH_TIMER->CC[cc];
   1ac40:	f8df b124 	ldr.w	fp, [pc, #292]	; 1ad68 <sw_switch.isra.0+0x25c>
   1ac44:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   1ac48:	f506 73a8 	add.w	r3, r6, #336	; 0x150
   1ac4c:	f500 4010 	add.w	r0, r0, #36864	; 0x9000
   1ac50:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
			SW_SWITCH_TIMER->CC[cc_s2] =
   1ac54:	f8c0 3540 	str.w	r3, [r0, #1344]	; 0x540
#if defined(CONFIG_BT_CTLR_PHY_CODED)
	case BIT(2):
		if (flags & 0x01) {
			return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_S8_NS;
		} else {
			return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_S2_NS;
   1ac58:	f246 0b18 	movw	fp, #24600	; 0x6018
   1ac5c:	f242 43b8 	movw	r3, #9400	; 0x24b8
   1ac60:	2904      	cmp	r1, #4
   1ac62:	bf14      	ite	ne
   1ac64:	4619      	movne	r1, r3
   1ac66:	4659      	moveq	r1, fp
			delay_s2 = HAL_RADIO_NS2US_ROUND(
   1ac68:	440a      	add	r2, r1
   1ac6a:	4937      	ldr	r1, [pc, #220]	; (1ad48 <sw_switch.isra.0+0x23c>)
			if (delay_s2 < SW_SWITCH_TIMER->CC[cc_s2]) {
   1ac6c:	f8d0 3540 	ldr.w	r3, [r0, #1344]	; 0x540
			delay_s2 = HAL_RADIO_NS2US_ROUND(
   1ac70:	fba1 1202 	umull	r1, r2, r1, r2
			if (delay_s2 < SW_SWITCH_TIMER->CC[cc_s2]) {
   1ac74:	ebb3 1f92 	cmp.w	r3, r2, lsr #6
				SW_SWITCH_TIMER->CC[cc_s2] -= delay_s2;
   1ac78:	bf88      	it	hi
   1ac7a:	f8d0 3540 	ldrhi.w	r3, [r0, #1344]	; 0x540
			delay_s2 = HAL_RADIO_NS2US_ROUND(
   1ac7e:	ea4f 1192 	mov.w	r1, r2, lsr #6
				SW_SWITCH_TIMER->CC[cc_s2] -= delay_s2;
   1ac82:	bf8c      	ite	hi
   1ac84:	1a5b      	subhi	r3, r3, r1
				SW_SWITCH_TIMER->CC[cc_s2] = 1;
   1ac86:	2301      	movls	r3, #1
   1ac88:	00e4      	lsls	r4, r4, #3
   1ac8a:	f8c0 3540 	str.w	r3, [r0, #1344]	; 0x540
   1ac8e:	00ed      	lsls	r5, r5, #3
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(cc_s2);
   1ac90:	4b2c      	ldr	r3, [pc, #176]	; (1ad44 <sw_switch.isra.0+0x238>)
		HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI_TASK(
   1ac92:	4931      	ldr	r1, [pc, #196]	; (1ad58 <sw_switch.isra.0+0x24c>)
	HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI_REGISTER_EVT =
   1ac94:	4a2f      	ldr	r2, [pc, #188]	; (1ad54 <sw_switch.isra.0+0x248>)
   1ac96:	4831      	ldr	r0, [pc, #196]	; (1ad5c <sw_switch.isra.0+0x250>)
   1ac98:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   1ac9c:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
   1aca0:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(cc_s2);
   1aca4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   1aca8:	f505 35f8 	add.w	r5, r5, #126976	; 0x1f000
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi_en) =
   1acac:	4b27      	ldr	r3, [pc, #156]	; (1ad4c <sw_switch.isra.0+0x240>)
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi_en) =
   1acae:	f8c4 7510 	str.w	r7, [r4, #1296]	; 0x510
		HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI_TASK(
   1acb2:	4451      	add	r1, sl
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi_en) =
   1acb4:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
    p_reg->CHENSET = mask;
   1acb8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
	    ppi_dis)	=
   1acbc:	f8c5 7510 	str.w	r7, [r5, #1296]	; 0x510
	    ppi_dis) =
   1acc0:	f8c5 e514 	str.w	lr, [r5, #1300]	; 0x514
	HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI_REGISTER_EVT =
   1acc4:	f8c2 05a0 	str.w	r0, [r2, #1440]	; 0x5a0
	HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI_REGISTER_TASK =
   1acc8:	f8c2 15a4 	str.w	r1, [r2, #1444]	; 0x5a4
   1accc:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   1acd0:	e77f      	b.n	1abd2 <sw_switch.isra.0+0xc6>
   1acd2:	481d      	ldr	r0, [pc, #116]	; (1ad48 <sw_switch.isra.0+0x23c>)
   1acd4:	f509 591a 	add.w	r9, r9, #9856	; 0x2680
   1acd8:	f109 092c 	add.w	r9, r9, #44	; 0x2c
   1acdc:	fba0 0909 	umull	r0, r9, r0, r9
   1ace0:	ea4f 1999 	mov.w	r9, r9, lsr #6
   1ace4:	e79a      	b.n	1ac1c <sw_switch.isra.0+0x110>
		delay = HAL_RADIO_NS2US_ROUND(
   1ace6:	4a18      	ldr	r2, [pc, #96]	; (1ad48 <sw_switch.isra.0+0x23c>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1ace8:	4918      	ldr	r1, [pc, #96]	; (1ad4c <sw_switch.isra.0+0x240>)
   1acea:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
   1acee:	f509 59ab 	add.w	r9, r9, #5472	; 0x1560
   1acf2:	f109 091c 	add.w	r9, r9, #28
   1acf6:	fba2 3909 	umull	r3, r9, r2, r9
   1acfa:	ea4f 1999 	mov.w	r9, r9, lsr #6
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(
   1acfe:	00e4      	lsls	r4, r4, #3
   1ad00:	00ed      	lsls	r5, r5, #3
   1ad02:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   1ad06:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
   1ad0a:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
   1ad0e:	f505 35f8 	add.w	r5, r5, #126976	; 0x1f000
		ppi_en) = 0;
   1ad12:	2300      	movs	r3, #0
   1ad14:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
		ppi_en) = 0;
   1ad18:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
		ppi_dis) =
   1ad1c:	f8c5 b510 	str.w	fp, [r5, #1296]	; 0x510
		ppi_dis) =
   1ad20:	f8c5 e514 	str.w	lr, [r5, #1300]	; 0x514
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(
			group_index);
}
   1ad24:	e755      	b.n	1abd2 <sw_switch.isra.0+0xc6>
	switch (phy) {
   1ad26:	f649 6234 	movw	r2, #40500	; 0x9e34
   1ad2a:	e786      	b.n	1ac3a <sw_switch.isra.0+0x12e>
	switch (phy) {
   1ad2c:	f04f 0946 	mov.w	r9, #70	; 0x46
   1ad30:	e734      	b.n	1ab9c <sw_switch.isra.0+0x90>
   1ad32:	4a06      	ldr	r2, [pc, #24]	; (1ad4c <sw_switch.isra.0+0x240>)
   1ad34:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
   1ad38:	f04f 092d 	mov.w	r9, #45	; 0x2d
   1ad3c:	e7df      	b.n	1acfe <sw_switch.isra.0+0x1f2>
   1ad3e:	bf00      	nop
   1ad40:	4000110c 	.word	0x4000110c
   1ad44:	40009140 	.word	0x40009140
   1ad48:	10624dd3 	.word	0x10624dd3
   1ad4c:	40001000 	.word	0x40001000
   1ad50:	40001004 	.word	0x40001004
   1ad54:	4001f000 	.word	0x4001f000
   1ad58:	40009040 	.word	0x40009040
   1ad5c:	40001150 	.word	0x40001150
   1ad60:	2000a86e 	.word	0x2000a86e
   1ad64:	4001f004 	.word	0x4001f004
   1ad68:	40009000 	.word	0x40009000

0001ad6c <isr_radio>:
	return (NRF_RADIO->EVENTS_DISABLED != 0);
   1ad6c:	4b04      	ldr	r3, [pc, #16]	; (1ad80 <isr_radio+0x14>)
   1ad6e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	if (radio_has_disabled()) {
   1ad72:	b123      	cbz	r3, 1ad7e <isr_radio+0x12>
		isr_cb(isr_cb_param);
   1ad74:	4a03      	ldr	r2, [pc, #12]	; (1ad84 <isr_radio+0x18>)
   1ad76:	4b04      	ldr	r3, [pc, #16]	; (1ad88 <isr_radio+0x1c>)
   1ad78:	6810      	ldr	r0, [r2, #0]
   1ad7a:	681b      	ldr	r3, [r3, #0]
   1ad7c:	4718      	bx	r3
}
   1ad7e:	4770      	bx	lr
   1ad80:	40001000 	.word	0x40001000
   1ad84:	20009850 	.word	0x20009850
   1ad88:	2000984c 	.word	0x2000984c

0001ad8c <radio_isr_set>:
{
   1ad8c:	b538      	push	{r3, r4, r5, lr}
   1ad8e:	4604      	mov	r4, r0
	irq_disable(RADIO_IRQn);
   1ad90:	2001      	movs	r0, #1
{
   1ad92:	460d      	mov	r5, r1
	irq_disable(RADIO_IRQn);
   1ad94:	f7ec fb64 	bl	7460 <arch_irq_disable>
	isr_cb_param = param;
   1ad98:	4a08      	ldr	r2, [pc, #32]	; (1adbc <radio_isr_set+0x30>)
	isr_cb = cb;
   1ad9a:	4809      	ldr	r0, [pc, #36]	; (1adc0 <radio_isr_set+0x34>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1ad9c:	4b09      	ldr	r3, [pc, #36]	; (1adc4 <radio_isr_set+0x38>)
    return p_reg->SHORTS;
}

NRF_STATIC_INLINE void nrf_radio_int_enable(NRF_RADIO_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1ad9e:	490a      	ldr	r1, [pc, #40]	; (1adc8 <radio_isr_set+0x3c>)
	isr_cb_param = param;
   1ada0:	6015      	str	r5, [r2, #0]
   1ada2:	2510      	movs	r5, #16
   1ada4:	2202      	movs	r2, #2
	isr_cb = cb;
   1ada6:	6004      	str	r4, [r0, #0]
   1ada8:	f8c1 5304 	str.w	r5, [r1, #772]	; 0x304
	irq_enable(RADIO_IRQn);
   1adac:	2001      	movs	r0, #1
   1adae:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   1adb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	irq_enable(RADIO_IRQn);
   1adb6:	f7ec bb43 	b.w	7440 <arch_irq_enable>
   1adba:	bf00      	nop
   1adbc:	20009850 	.word	0x20009850
   1adc0:	2000984c 	.word	0x2000984c
   1adc4:	e000e100 	.word	0xe000e100
   1adc8:	40001000 	.word	0x40001000

0001adcc <radio_reset>:
{
   1adcc:	b538      	push	{r3, r4, r5, lr}
	irq_disable(RADIO_IRQn);
   1adce:	2001      	movs	r0, #1
   1add0:	f7ec fb46 	bl	7460 <arch_irq_disable>
}
#endif

NRF_STATIC_INLINE void nrf_radio_power_set(NRF_RADIO_Type * p_reg, bool radio_power)
{
    p_reg->POWER = (uint32_t) radio_power;
   1add4:	4b0b      	ldr	r3, [pc, #44]	; (1ae04 <radio_reset+0x38>)
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   1add6:	490c      	ldr	r1, [pc, #48]	; (1ae08 <radio_reset+0x3c>)
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_0_INCLUDE;
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_1_INCLUDE |
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_1_INCLUDE;
#else
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   1add8:	4a0c      	ldr	r2, [pc, #48]	; (1ae0c <radio_reset+0x40>)
   1adda:	4c0d      	ldr	r4, [pc, #52]	; (1ae10 <radio_reset+0x44>)
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_0_INCLUDE |
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_0_INCLUDE |
		HAL_SW_SWITCH_RADIO_ENABLE_S2_PPI_0_INCLUDE;
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   1addc:	480d      	ldr	r0, [pc, #52]	; (1ae14 <radio_reset+0x48>)
   1adde:	2500      	movs	r5, #0
   1ade0:	f8c3 5ffc 	str.w	r5, [r3, #4092]	; 0xffc
   1ade4:	2501      	movs	r5, #1
   1ade6:	f8c3 5ffc 	str.w	r5, [r3, #4092]	; 0xffc
   1adea:	680b      	ldr	r3, [r1, #0]
					 0xfffffffe) | 0x01000000;
   1adec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   1adf0:	f023 0301 	bic.w	r3, r3, #1
   1adf4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   1adf8:	600b      	str	r3, [r1, #0]
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   1adfa:	f8c2 4800 	str.w	r4, [r2, #2048]	; 0x800
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   1adfe:	f8c2 0804 	str.w	r0, [r2, #2052]	; 0x804
}
   1ae02:	bd38      	pop	{r3, r4, r5, pc}
   1ae04:	40001000 	.word	0x40001000
   1ae08:	40001774 	.word	0x40001774
   1ae0c:	4001f000 	.word	0x4001f000
   1ae10:	00010900 	.word	0x00010900
   1ae14:	00021200 	.word	0x00021200

0001ae18 <radio_phy_set>:
		*(volatile uint32_t *)0x4000173c &= ~0x80000000;
   1ae18:	4a13      	ldr	r2, [pc, #76]	; (1ae68 <radio_phy_set+0x50>)
	switch (phy) {
   1ae1a:	2802      	cmp	r0, #2
		*(volatile uint32_t *)0x4000173c &= ~0x80000000;
   1ae1c:	6813      	ldr	r3, [r2, #0]
	switch (phy) {
   1ae1e:	d00f      	beq.n	1ae40 <radio_phy_set+0x28>
   1ae20:	2804      	cmp	r0, #4
   1ae22:	d012      	beq.n	1ae4a <radio_phy_set+0x32>
		*(volatile uint32_t *)0x4000173c &= ~0x80000000;
   1ae24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   1ae28:	6013      	str	r3, [r2, #0]
		mode = RADIO_MODE_MODE_Ble_1Mbit;
   1ae2a:	2103      	movs	r1, #3
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   1ae2c:	4b0f      	ldr	r3, [pc, #60]	; (1ae6c <radio_phy_set+0x54>)
   1ae2e:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
   1ae32:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   1ae36:	f042 0201 	orr.w	r2, r2, #1
   1ae3a:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
}
   1ae3e:	4770      	bx	lr
		*(volatile uint32_t *)0x4000173c &= ~0x80000000;
   1ae40:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   1ae44:	6013      	str	r3, [r2, #0]
		mode = RADIO_MODE_MODE_Ble_2Mbit;
   1ae46:	2104      	movs	r1, #4
		break;
   1ae48:	e7f0      	b.n	1ae2c <radio_phy_set+0x14>
		*(volatile uint32_t *)0x4000173c |= 0x80000000;
   1ae4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1ae4e:	6013      	str	r3, [r2, #0]
				((*(volatile uint32_t *)0x4000173c) & 0xFFFFFF00) |
   1ae50:	6813      	ldr	r3, [r2, #0]
   1ae52:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
		if (flags & 0x01) {
   1ae56:	f001 0101 	and.w	r1, r1, #1
				((*(volatile uint32_t *)0x4000173c) & 0xFFFFFF00) |
   1ae5a:	f043 035c 	orr.w	r3, r3, #92	; 0x5c
		if (flags & 0x01) {
   1ae5e:	f1c1 0106 	rsb	r1, r1, #6
		*(volatile uint32_t *)0x4000173c =
   1ae62:	6013      	str	r3, [r2, #0]
		break;
   1ae64:	e7e2      	b.n	1ae2c <radio_phy_set+0x14>
   1ae66:	bf00      	nop
   1ae68:	4000173c 	.word	0x4000173c
   1ae6c:	40001000 	.word	0x40001000

0001ae70 <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = (uint32_t)power;
   1ae70:	4b01      	ldr	r3, [pc, #4]	; (1ae78 <radio_tx_power_set+0x8>)
   1ae72:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
   1ae76:	4770      	bx	lr
   1ae78:	40001000 	.word	0x40001000

0001ae7c <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   1ae7c:	4b01      	ldr	r3, [pc, #4]	; (1ae84 <radio_freq_chan_set+0x8>)
   1ae7e:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
}
   1ae82:	4770      	bx	lr
   1ae84:	40001000 	.word	0x40001000

0001ae88 <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   1ae88:	4b07      	ldr	r3, [pc, #28]	; (1aea8 <radio_whiten_iv_set+0x20>)
   1ae8a:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   1ae8e:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   1ae92:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   1ae96:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   1ae9a:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   1ae9e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   1aea2:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   1aea6:	4770      	bx	lr
   1aea8:	40001000 	.word	0x40001000

0001aeac <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   1aeac:	4a0b      	ldr	r2, [pc, #44]	; (1aedc <radio_aa_set+0x30>)
   1aeae:	2100      	movs	r1, #0
	NRF_RADIO->RXADDRESSES =
   1aeb0:	2301      	movs	r3, #1
{
   1aeb2:	b410      	push	{r4}
	NRF_RADIO->TXADDRESS =
   1aeb4:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   1aeb8:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   1aebc:	78c3      	ldrb	r3, [r0, #3]
   1aebe:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   1aec2:	7843      	ldrb	r3, [r0, #1]
   1aec4:	7884      	ldrb	r4, [r0, #2]
   1aec6:	7801      	ldrb	r1, [r0, #0]
   1aec8:	041b      	lsls	r3, r3, #16
   1aeca:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
   1aece:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
}
   1aed2:	bc10      	pop	{r4}
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   1aed4:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
}
   1aed8:	4770      	bx	lr
   1aeda:	bf00      	nop
   1aedc:	40001000 	.word	0x40001000

0001aee0 <radio_pkt_configure>:
	phy = (flags >> 1) & 0x07; /* phy */
   1aee0:	f3c2 0342 	ubfx	r3, r2, #1, #3
	switch (phy) {
   1aee4:	2b02      	cmp	r3, #2
{
   1aee6:	b410      	push	{r4}
	uint8_t dc = flags & 0x01; /* Adv or Data channel */
   1aee8:	f002 0201 	and.w	r2, r2, #1
	switch (phy) {
   1aeec:	d024      	beq.n	1af38 <radio_pkt_configure+0x58>
		extra |= (3UL << RADIO_PCNF0_TERMLEN_Pos) &
   1aeee:	2b04      	cmp	r3, #4
   1aef0:	bf14      	ite	ne
   1aef2:	2400      	movne	r4, #0
   1aef4:	f04f 44c7 	moveq.w	r4, #1669332992	; 0x63800000
	if (dc) {
   1aef8:	b10a      	cbz	r2, 1aefe <radio_pkt_configure+0x1e>
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   1aefa:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
			   ((((uint32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   1aefe:	f1c0 0308 	rsb	r3, r0, #8
   1af02:	041b      	lsls	r3, r3, #16
			   ((((uint32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
   1af04:	f000 000f 	and.w	r0, r0, #15
			    RADIO_PCNF0_S1LEN_Msk) |
   1af08:	4320      	orrs	r0, r4
			   ((((uint32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   1af0a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   1af0e:	4a0d      	ldr	r2, [pc, #52]	; (1af44 <radio_pkt_configure+0x64>)
}
   1af10:	bc10      	pop	{r4}
			    RADIO_PCNF0_S1LEN_Msk) |
   1af12:	4303      	orrs	r3, r0
   1af14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   1af18:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   1af1c:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
   1af20:	4809      	ldr	r0, [pc, #36]	; (1af48 <radio_pkt_configure+0x68>)
   1af22:	4018      	ands	r0, r3
   1af24:	f8c2 0518 	str.w	r0, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((((uint32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
   1af28:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
   1af2c:	4319      	orrs	r1, r3
   1af2e:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
   1af32:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
}
   1af36:	4770      	bx	lr
	switch (phy) {
   1af38:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
	if (dc) {
   1af3c:	2a00      	cmp	r2, #0
   1af3e:	d0de      	beq.n	1aefe <radio_pkt_configure+0x1e>
   1af40:	e7db      	b.n	1aefa <radio_pkt_configure+0x1a>
   1af42:	bf00      	nop
   1af44:	40001000 	.word	0x40001000
   1af48:	fef80000 	.word	0xfef80000

0001af4c <radio_pkt_rx_set>:
	NRF_RADIO->PACKETPTR = (uint32_t)rx_packet;
   1af4c:	4b01      	ldr	r3, [pc, #4]	; (1af54 <radio_pkt_rx_set+0x8>)
   1af4e:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
}
   1af52:	4770      	bx	lr
   1af54:	40001000 	.word	0x40001000

0001af58 <radio_pkt_tx_set>:
   1af58:	4b01      	ldr	r3, [pc, #4]	; (1af60 <radio_pkt_tx_set+0x8>)
   1af5a:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   1af5e:	4770      	bx	lr
   1af60:	40001000 	.word	0x40001000

0001af64 <radio_tx_ready_delay_get>:
	switch (phy) {
   1af64:	2802      	cmp	r0, #2
   1af66:	d004      	beq.n	1af72 <radio_tx_ready_delay_get+0xe>
   1af68:	2804      	cmp	r0, #4
			return HAL_RADIO_NRF52840_TXEN_TXIDLE_TX_S8_US;
   1af6a:	bf14      	ite	ne
   1af6c:	2029      	movne	r0, #41	; 0x29
   1af6e:	202a      	moveq	r0, #42	; 0x2a
   1af70:	4770      	bx	lr
	switch (phy) {
   1af72:	2028      	movs	r0, #40	; 0x28
}
   1af74:	4770      	bx	lr
   1af76:	bf00      	nop

0001af78 <radio_tx_chain_delay_get>:
}
   1af78:	2001      	movs	r0, #1
   1af7a:	4770      	bx	lr

0001af7c <radio_rx_chain_delay_get>:
	switch (phy) {
   1af7c:	2802      	cmp	r0, #2
   1af7e:	d009      	beq.n	1af94 <radio_rx_chain_delay_get+0x18>
   1af80:	2804      	cmp	r0, #4
   1af82:	d105      	bne.n	1af90 <radio_rx_chain_delay_get+0x14>
		if (flags & 0x01) {
   1af84:	f011 0f01 	tst.w	r1, #1
			return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_S2_US;
   1af88:	bf14      	ite	ne
   1af8a:	201e      	movne	r0, #30
   1af8c:	2019      	moveq	r0, #25
   1af8e:	4770      	bx	lr
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_US;
   1af90:	200a      	movs	r0, #10
}
   1af92:	4770      	bx	lr
	switch (phy) {
   1af94:	2005      	movs	r0, #5
   1af96:	4770      	bx	lr

0001af98 <radio_rx_enable>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1af98:	4b01      	ldr	r3, [pc, #4]	; (1afa0 <radio_rx_enable+0x8>)
   1af9a:	2201      	movs	r2, #1
   1af9c:	601a      	str	r2, [r3, #0]
}
   1af9e:	4770      	bx	lr
   1afa0:	40001004 	.word	0x40001004

0001afa4 <radio_disable>:
{
   1afa4:	b430      	push	{r4, r5}
    p_reg->CHENCLR = mask;
   1afa6:	4a08      	ldr	r2, [pc, #32]	; (1afc8 <radio_disable+0x24>)
	NRF_RADIO->SHORTS = 0;
   1afa8:	4808      	ldr	r0, [pc, #32]	; (1afcc <radio_disable+0x28>)
   1afaa:	4909      	ldr	r1, [pc, #36]	; (1afd0 <radio_disable+0x2c>)
    p_reg->TASKS_CHG[(uint32_t) group].EN = 1UL;
}

NRF_STATIC_INLINE void nrf_ppi_group_disable(NRF_PPI_Type * p_reg, nrf_ppi_channel_group_t group)
{
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   1afac:	2301      	movs	r3, #1
    p_reg->CHENCLR = mask;
   1afae:	f44f 6590 	mov.w	r5, #1152	; 0x480
   1afb2:	2400      	movs	r4, #0
   1afb4:	f8c2 5508 	str.w	r5, [r2, #1288]	; 0x508
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   1afb8:	6053      	str	r3, [r2, #4]
   1afba:	60d3      	str	r3, [r2, #12]
   1afbc:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
}
   1afc0:	bc30      	pop	{r4, r5}
   1afc2:	600b      	str	r3, [r1, #0]
   1afc4:	4770      	bx	lr
   1afc6:	bf00      	nop
   1afc8:	4001f000 	.word	0x4001f000
   1afcc:	40001000 	.word	0x40001000
   1afd0:	40001010 	.word	0x40001010

0001afd4 <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   1afd4:	4b04      	ldr	r3, [pc, #16]	; (1afe8 <radio_status_reset+0x14>)
   1afd6:	2200      	movs	r2, #0
   1afd8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   1afdc:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   1afe0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
   1afe4:	4770      	bx	lr
   1afe6:	bf00      	nop
   1afe8:	40001000 	.word	0x40001000

0001afec <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   1afec:	4b03      	ldr	r3, [pc, #12]	; (1affc <radio_is_ready+0x10>)
   1afee:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   1aff2:	3800      	subs	r0, #0
   1aff4:	bf18      	it	ne
   1aff6:	2001      	movne	r0, #1
   1aff8:	4770      	bx	lr
   1affa:	bf00      	nop
   1affc:	40001000 	.word	0x40001000

0001b000 <radio_is_done>:
	return (NRF_RADIO->EVENTS_END != 0);
   1b000:	4b03      	ldr	r3, [pc, #12]	; (1b010 <radio_is_done+0x10>)
   1b002:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   1b006:	3800      	subs	r0, #0
   1b008:	bf18      	it	ne
   1b00a:	2001      	movne	r0, #1
   1b00c:	4770      	bx	lr
   1b00e:	bf00      	nop
   1b010:	40001000 	.word	0x40001000

0001b014 <radio_is_idle>:
	return (NRF_RADIO->STATE == 0);
   1b014:	4b03      	ldr	r3, [pc, #12]	; (1b024 <radio_is_idle+0x10>)
   1b016:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
   1b01a:	fab0 f080 	clz	r0, r0
   1b01e:	0940      	lsrs	r0, r0, #5
   1b020:	4770      	bx	lr
   1b022:	bf00      	nop
   1b024:	40001000 	.word	0x40001000

0001b028 <radio_crc_configure>:
	NRF_RADIO->CRCCNF =
   1b028:	4b04      	ldr	r3, [pc, #16]	; (1b03c <radio_crc_configure+0x14>)
   1b02a:	f240 1203 	movw	r2, #259	; 0x103
   1b02e:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	NRF_RADIO->CRCPOLY = polynomial;
   1b032:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   1b036:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
}
   1b03a:	4770      	bx	lr
   1b03c:	40001000 	.word	0x40001000

0001b040 <radio_crc_is_valid>:
	return (NRF_RADIO->CRCSTATUS != 0);
   1b040:	4b03      	ldr	r3, [pc, #12]	; (1b050 <radio_crc_is_valid+0x10>)
   1b042:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1b046:	3800      	subs	r0, #0
   1b048:	bf18      	it	ne
   1b04a:	2001      	movne	r0, #1
   1b04c:	4770      	bx	lr
   1b04e:	bf00      	nop
   1b050:	40001000 	.word	0x40001000

0001b054 <radio_pkt_empty_get>:
}
   1b054:	4800      	ldr	r0, [pc, #0]	; (1b058 <radio_pkt_empty_get+0x4>)
   1b056:	4770      	bx	lr
   1b058:	20009744 	.word	0x20009744

0001b05c <radio_pkt_scratch_get>:
}
   1b05c:	4800      	ldr	r0, [pc, #0]	; (1b060 <radio_pkt_scratch_get+0x4>)
   1b05e:	4770      	bx	lr
   1b060:	20009748 	.word	0x20009748

0001b064 <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1b064:	4b05      	ldr	r3, [pc, #20]	; (1b07c <radio_switch_complete_and_rx+0x18>)
{
   1b066:	b410      	push	{r4}
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(0, 0, 0, phy_rx, 0);
   1b068:	2100      	movs	r1, #0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1b06a:	2403      	movs	r4, #3
{
   1b06c:	4602      	mov	r2, r0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1b06e:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	sw_switch(0, 0, 0, phy_rx, 0);
   1b072:	4608      	mov	r0, r1
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1b074:	bc10      	pop	{r4}
	sw_switch(0, 0, 0, phy_rx, 0);
   1b076:	f7ff bd49 	b.w	1ab0c <sw_switch.isra.0>
   1b07a:	bf00      	nop
   1b07c:	40001000 	.word	0x40001000

0001b080 <radio_switch_complete_and_tx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1b080:	4b04      	ldr	r3, [pc, #16]	; (1b094 <radio_switch_complete_and_tx+0x14>)
{
   1b082:	b410      	push	{r4}
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1b084:	2403      	movs	r4, #3
{
   1b086:	4601      	mov	r1, r0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1b088:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
   1b08c:	2001      	movs	r0, #1
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1b08e:	bc10      	pop	{r4}
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
   1b090:	f7ff bd3c 	b.w	1ab0c <sw_switch.isra.0>
   1b094:	40001000 	.word	0x40001000

0001b098 <radio_switch_complete_and_disable>:

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
   1b098:	4904      	ldr	r1, [pc, #16]	; (1b0ac <radio_switch_complete_and_disable+0x14>)
    p_reg->CHENCLR = mask;
   1b09a:	4b05      	ldr	r3, [pc, #20]	; (1b0b0 <radio_switch_complete_and_disable+0x18>)
   1b09c:	2003      	movs	r0, #3
   1b09e:	f44f 6290 	mov.w	r2, #1152	; 0x480
   1b0a2:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   1b0a6:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	    (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	hal_radio_sw_switch_disable();
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1b0aa:	4770      	bx	lr
   1b0ac:	40001000 	.word	0x40001000
   1b0b0:	4001f000 	.word	0x4001f000

0001b0b4 <radio_rssi_measure>:

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
   1b0b4:	4a03      	ldr	r2, [pc, #12]	; (1b0c4 <radio_rssi_measure+0x10>)
   1b0b6:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   1b0ba:	f443 7388 	orr.w	r3, r3, #272	; 0x110
   1b0be:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	    (RADIO_SHORTS_ADDRESS_RSSISTART_Msk |
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}
   1b0c2:	4770      	bx	lr
   1b0c4:	40001000 	.word	0x40001000

0001b0c8 <radio_rssi_get>:

uint32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
   1b0c8:	4b01      	ldr	r3, [pc, #4]	; (1b0d0 <radio_rssi_get+0x8>)
   1b0ca:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
   1b0ce:	4770      	bx	lr
   1b0d0:	40001000 	.word	0x40001000

0001b0d4 <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   1b0d4:	4b02      	ldr	r3, [pc, #8]	; (1b0e0 <radio_rssi_status_reset+0xc>)
   1b0d6:	2200      	movs	r2, #0
   1b0d8:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
}
   1b0dc:	4770      	bx	lr
   1b0de:	bf00      	nop
   1b0e0:	40001000 	.word	0x40001000

0001b0e4 <radio_rssi_is_ready>:

uint32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   1b0e4:	4b03      	ldr	r3, [pc, #12]	; (1b0f4 <radio_rssi_is_ready+0x10>)
   1b0e6:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   1b0ea:	3800      	subs	r0, #0
   1b0ec:	bf18      	it	ne
   1b0ee:	2001      	movne	r0, #1
   1b0f0:	4770      	bx	lr
   1b0f2:	bf00      	nop
   1b0f4:	40001000 	.word	0x40001000

0001b0f8 <radio_filter_configure>:

void radio_filter_configure(uint8_t bitmask_enable, uint8_t bitmask_addr_type,
			    uint8_t *bdaddr)
{
   1b0f8:	b430      	push	{r4, r5}
   1b0fa:	2400      	movs	r4, #0
	uint8_t index;

	for (index = 0U; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   1b0fc:	00a3      	lsls	r3, r4, #2
   1b0fe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1b102:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
			((uint32_t)bdaddr[2] << 16) |
			((uint32_t)bdaddr[1] << 8) |
   1b106:	6815      	ldr	r5, [r2, #0]
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   1b108:	f8c3 5600 	str.w	r5, [r3, #1536]	; 0x600
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((uint32_t)bdaddr[5] << 8) | bdaddr[4];
   1b10c:	3401      	adds	r4, #1
   1b10e:	8895      	ldrh	r5, [r2, #4]
   1b110:	f8c3 5620 	str.w	r5, [r3, #1568]	; 0x620
	for (index = 0U; index < 8; index++) {
   1b114:	2c08      	cmp	r4, #8
		bdaddr += 6;
   1b116:	f102 0206 	add.w	r2, r2, #6
	for (index = 0U; index < 8; index++) {
   1b11a:	d1ef      	bne.n	1b0fc <radio_filter_configure+0x4>
	}

	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   1b11c:	4b03      	ldr	r3, [pc, #12]	; (1b12c <radio_filter_configure+0x34>)
   1b11e:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
}
   1b122:	bc30      	pop	{r4, r5}
	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   1b124:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
}
   1b128:	4770      	bx	lr
   1b12a:	bf00      	nop
   1b12c:	40001000 	.word	0x40001000

0001b130 <radio_filter_disable>:

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   1b130:	4a03      	ldr	r2, [pc, #12]	; (1b140 <radio_filter_disable+0x10>)
   1b132:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   1b136:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1b13a:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
}
   1b13e:	4770      	bx	lr
   1b140:	40001000 	.word	0x40001000

0001b144 <radio_filter_status_reset>:

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   1b144:	4b02      	ldr	r3, [pc, #8]	; (1b150 <radio_filter_status_reset+0xc>)
   1b146:	2200      	movs	r2, #0
   1b148:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   1b14c:	4770      	bx	lr
   1b14e:	bf00      	nop
   1b150:	40001000 	.word	0x40001000

0001b154 <radio_filter_has_match>:

uint32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   1b154:	4b03      	ldr	r3, [pc, #12]	; (1b164 <radio_filter_has_match+0x10>)
   1b156:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   1b15a:	3800      	subs	r0, #0
   1b15c:	bf18      	it	ne
   1b15e:	2001      	movne	r0, #1
   1b160:	4770      	bx	lr
   1b162:	bf00      	nop
   1b164:	40001000 	.word	0x40001000

0001b168 <radio_filter_match_get>:

uint32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   1b168:	4b01      	ldr	r3, [pc, #4]	; (1b170 <radio_filter_match_get+0x8>)
   1b16a:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   1b16e:	4770      	bx	lr
   1b170:	40001000 	.word	0x40001000

0001b174 <radio_tmr_status_reset>:
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   1b174:	4904      	ldr	r1, [pc, #16]	; (1b188 <radio_tmr_status_reset+0x14>)
   1b176:	4b05      	ldr	r3, [pc, #20]	; (1b18c <radio_tmr_status_reset+0x18>)
   1b178:	4a05      	ldr	r2, [pc, #20]	; (1b190 <radio_tmr_status_reset+0x1c>)
   1b17a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   1b17e:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
   1b182:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
			BIT(HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI) |
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
#endif /* CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
			BIT(HAL_TRIGGER_CRYPT_PPI));
}
   1b186:	4770      	bx	lr
   1b188:	4000b000 	.word	0x4000b000
   1b18c:	4001f000 	.word	0x4001f000
   1b190:	0e742060 	.word	0x0e742060

0001b194 <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(uint32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	nrf_timer_cc_set(SW_SWITCH_TIMER,
   1b194:	4b03      	ldr	r3, [pc, #12]	; (1b1a4 <radio_tmr_tifs_set+0x10>)
   1b196:	4a04      	ldr	r2, [pc, #16]	; (1b1a8 <radio_tmr_tifs_set+0x14>)
   1b198:	781b      	ldrb	r3, [r3, #0]
   1b19a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   1b19e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
			 SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle), tifs);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1b1a2:	4770      	bx	lr
   1b1a4:	2000a86e 	.word	0x2000a86e
   1b1a8:	40009000 	.word	0x40009000

0001b1ac <radio_tmr_start>:

uint32_t radio_tmr_start(uint8_t trx, uint32_t ticks_start, uint32_t remainder)
{
   1b1ac:	b4f0      	push	{r4, r5, r6, r7}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   1b1ae:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   1b1b2:	4d2a      	ldr	r5, [pc, #168]	; (1b25c <radio_tmr_start+0xb0>)
   1b1b4:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   1b1b8:	42ab      	cmp	r3, r5
{
   1b1ba:	4604      	mov	r4, r0
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   1b1bc:	d906      	bls.n	1b1cc <radio_tmr_start+0x20>
		ticks_start--;
		remainder += 30517578UL;
   1b1be:	f102 72e8 	add.w	r2, r2, #30408704	; 0x1d00000
   1b1c2:	f502 32d4 	add.w	r2, r2, #108544	; 0x1a800
   1b1c6:	f502 72a5 	add.w	r2, r2, #330	; 0x14a
		ticks_start--;
   1b1ca:	3901      	subs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b1cc:	4d24      	ldr	r5, [pc, #144]	; (1b260 <radio_tmr_start+0xb4>)
	}
	remainder /= 1000000UL;

	nrf_timer_task_trigger(EVENT_TIMER, NRF_TIMER_TASK_CLEAR);
	EVENT_TIMER->MODE = 0;
   1b1ce:	4b25      	ldr	r3, [pc, #148]	; (1b264 <radio_tmr_start+0xb8>)
	remainder /= 1000000UL;
   1b1d0:	4825      	ldr	r0, [pc, #148]	; (1b268 <radio_tmr_start+0xbc>)
   1b1d2:	2601      	movs	r6, #1
   1b1d4:	602e      	str	r6, [r5, #0]
	EVENT_TIMER->MODE = 0;
   1b1d6:	2600      	movs	r6, #0
   1b1d8:	f8c3 6504 	str.w	r6, [r3, #1284]	; 0x504
    p_reg->CC[ch] = cc_val;
   1b1dc:	4d23      	ldr	r5, [pc, #140]	; (1b26c <radio_tmr_start+0xc0>)
	remainder /= 1000000UL;
   1b1de:	fba0 0202 	umull	r0, r2, r0, r2
	EVENT_TIMER->PRESCALER = 4;
   1b1e2:	2604      	movs	r6, #4
   1b1e4:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
	remainder /= 1000000UL;
   1b1e8:	0c90      	lsrs	r0, r2, #18
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   1b1ea:	2602      	movs	r6, #2
   1b1ec:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1b1f0:	4a1f      	ldr	r2, [pc, #124]	; (1b270 <radio_tmr_start+0xc4>)
    p_reg->CC[cc_channel] = cc_value;
   1b1f2:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
   1b1f6:	f8c5 1548 	str.w	r1, [r5, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   1b1fa:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   1b1fe:	f8c5 1344 	str.w	r1, [r5, #836]	; 0x344
   1b202:	491c      	ldr	r1, [pc, #112]	; (1b274 <radio_tmr_start+0xc8>)
   1b204:	f8c2 1538 	str.w	r1, [r2, #1336]	; 0x538
    p_reg->CHENSET = mask;
   1b208:	2120      	movs	r1, #32
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1b20a:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
    p_reg->CHENSET = mask;
   1b20e:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
	nrf_ppi_channels_disable(
   1b212:	b1e4      	cbz	r4, 1b24e <radio_tmr_start+0xa2>
    p_reg->CHENCLR = mask;
   1b214:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
   1b218:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	nrf_ppi_channels_enable(
   1b21c:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
    p_reg->CHENSET = mask;
   1b220:	4a13      	ldr	r2, [pc, #76]	; (1b270 <radio_tmr_start+0xc4>)
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0U;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_CLEAR);
	SW_SWITCH_TIMER->MODE = 0;
   1b222:	4b15      	ldr	r3, [pc, #84]	; (1b278 <radio_tmr_start+0xcc>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b224:	4915      	ldr	r1, [pc, #84]	; (1b27c <radio_tmr_start+0xd0>)
   1b226:	f8c2 4504 	str.w	r4, [r2, #1284]	; 0x504
   1b22a:	2500      	movs	r5, #0
   1b22c:	2401      	movs	r4, #1
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1b22e:	4e14      	ldr	r6, [pc, #80]	; (1b280 <radio_tmr_start+0xd4>)
   1b230:	600c      	str	r4, [r1, #0]
	SW_SWITCH_TIMER->PRESCALER = 4;
   1b232:	2704      	movs	r7, #4
	SW_SWITCH_TIMER->MODE = 0;
   1b234:	f8c3 5504 	str.w	r5, [r3, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   1b238:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   1b23c:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
   1b240:	601c      	str	r4, [r3, #0]
   1b242:	f8c2 6548 	str.w	r6, [r2, #1352]	; 0x548
	 */
#endif /* CONFIG_BT_CTLR_PHY_CODED && CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder;
}
   1b246:	bcf0      	pop	{r4, r5, r6, r7}
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1b248:	f8c2 154c 	str.w	r1, [r2, #1356]	; 0x54c
   1b24c:	4770      	bx	lr
    p_reg->CHENCLR = mask;
   1b24e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   1b252:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
   1b256:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
   1b25a:	e7e1      	b.n	1b220 <radio_tmr_start+0x74>
   1b25c:	7ff0bdbf 	.word	0x7ff0bdbf
   1b260:	4000800c 	.word	0x4000800c
   1b264:	40008000 	.word	0x40008000
   1b268:	431bde83 	.word	0x431bde83
   1b26c:	4000b000 	.word	0x4000b000
   1b270:	4001f000 	.word	0x4001f000
   1b274:	4000b148 	.word	0x4000b148
   1b278:	40009000 	.word	0x40009000
   1b27c:	4000900c 	.word	0x4000900c
   1b280:	4000110c 	.word	0x4000110c

0001b284 <radio_tmr_start_tick>:

uint32_t radio_tmr_start_tick(uint8_t trx, uint32_t tick)
{
   1b284:	b4f0      	push	{r4, r5, r6, r7}
    p_reg->CC[cc_channel] = cc_value;
   1b286:	4c16      	ldr	r4, [pc, #88]	; (1b2e0 <radio_tmr_start_tick+0x5c>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b288:	4f16      	ldr	r7, [pc, #88]	; (1b2e4 <radio_tmr_start_tick+0x60>)
   1b28a:	4e17      	ldr	r6, [pc, #92]	; (1b2e8 <radio_tmr_start_tick+0x64>)
    p_reg->CC[ch] = cc_val;
   1b28c:	4d17      	ldr	r5, [pc, #92]	; (1b2ec <radio_tmr_start_tick+0x68>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1b28e:	4b18      	ldr	r3, [pc, #96]	; (1b2f0 <radio_tmr_start_tick+0x6c>)
   1b290:	2201      	movs	r2, #1
   1b292:	603a      	str	r2, [r7, #0]
   1b294:	6032      	str	r2, [r6, #0]
    p_reg->CC[cc_channel] = cc_value;
   1b296:	f8c4 2540 	str.w	r2, [r4, #1344]	; 0x540
    p_reg->EVTENSET = mask;
   1b29a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    p_reg->CC[ch] = cc_val;
   1b29e:	f8c5 1548 	str.w	r1, [r5, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   1b2a2:	f8c5 2344 	str.w	r2, [r5, #836]	; 0x344
   1b2a6:	4913      	ldr	r1, [pc, #76]	; (1b2f4 <radio_tmr_start_tick+0x70>)
   1b2a8:	f8c3 1538 	str.w	r1, [r3, #1336]	; 0x538
    p_reg->CHENSET = mask;
   1b2ac:	2220      	movs	r2, #32
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1b2ae:	f8c3 453c 	str.w	r4, [r3, #1340]	; 0x53c
    p_reg->CHENSET = mask;
   1b2b2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	nrf_ppi_channels_disable(
   1b2b6:	b158      	cbz	r0, 1b2d0 <radio_tmr_start_tick+0x4c>
    p_reg->CHENCLR = mask;
   1b2b8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   1b2bc:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	nrf_ppi_channels_enable(
   1b2c0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    p_reg->CHENSET = mask;
   1b2c4:	4a0a      	ldr	r2, [pc, #40]	; (1b2f0 <radio_tmr_start_tick+0x6c>)
	last_pdu_end_us = 0U;
#endif /* CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder_us;
}
   1b2c6:	2001      	movs	r0, #1
   1b2c8:	bcf0      	pop	{r4, r5, r6, r7}
   1b2ca:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
   1b2ce:	4770      	bx	lr
    p_reg->CHENCLR = mask;
   1b2d0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   1b2d4:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
   1b2d8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
   1b2dc:	e7f2      	b.n	1b2c4 <radio_tmr_start_tick+0x40>
   1b2de:	bf00      	nop
   1b2e0:	40008000 	.word	0x40008000
   1b2e4:	40008004 	.word	0x40008004
   1b2e8:	4000800c 	.word	0x4000800c
   1b2ec:	4000b000 	.word	0x4000b000
   1b2f0:	4001f000 	.word	0x4001f000
   1b2f4:	4000b148 	.word	0x4000b148

0001b2f8 <radio_tmr_start_get>:
    return p_reg->CC[ch];
   1b2f8:	4b01      	ldr	r3, [pc, #4]	; (1b300 <radio_tmr_start_get+0x8>)
   1b2fa:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

uint32_t radio_tmr_start_get(void)
{
	return nrf_rtc_cc_get(NRF_RTC0, 2);
}
   1b2fe:	4770      	bx	lr
   1b300:	4000b000 	.word	0x4000b000

0001b304 <radio_tmr_stop>:

void radio_tmr_stop(void)
{
   1b304:	b410      	push	{r4}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b306:	4805      	ldr	r0, [pc, #20]	; (1b31c <radio_tmr_stop+0x18>)
   1b308:	4c05      	ldr	r4, [pc, #20]	; (1b320 <radio_tmr_stop+0x1c>)
   1b30a:	4906      	ldr	r1, [pc, #24]	; (1b324 <radio_tmr_stop+0x20>)
   1b30c:	4a06      	ldr	r2, [pc, #24]	; (1b328 <radio_tmr_stop+0x24>)
   1b30e:	2301      	movs	r3, #1
   1b310:	6023      	str	r3, [r4, #0]
   1b312:	6003      	str	r3, [r0, #0]

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_STOP);
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_SHUTDOWN);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1b314:	bc10      	pop	{r4}
   1b316:	600b      	str	r3, [r1, #0]
   1b318:	6013      	str	r3, [r2, #0]
   1b31a:	4770      	bx	lr
   1b31c:	40008010 	.word	0x40008010
   1b320:	40008004 	.word	0x40008004
   1b324:	40009004 	.word	0x40009004
   1b328:	40009010 	.word	0x40009010

0001b32c <radio_tmr_hcto_configure>:
    p_reg->CC[cc_channel] = cc_value;
   1b32c:	4904      	ldr	r1, [pc, #16]	; (1b340 <radio_tmr_hcto_configure+0x14>)
    p_reg->CHENSET = mask;
   1b32e:	4b05      	ldr	r3, [pc, #20]	; (1b344 <radio_tmr_hcto_configure+0x18>)
   1b330:	f8c1 0544 	str.w	r0, [r1, #1348]	; 0x544
   1b334:	f04f 6288 	mov.w	r2, #71303168	; 0x4400000
   1b338:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_disable_on_hcto_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI) |
		BIT(HAL_RADIO_DISABLE_ON_HCTO_PPI));
}
   1b33c:	4770      	bx	lr
   1b33e:	bf00      	nop
   1b340:	40008000 	.word	0x40008000
   1b344:	4001f000 	.word	0x4001f000

0001b348 <radio_tmr_aa_get>:
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI));
}

uint32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   1b348:	4b01      	ldr	r3, [pc, #4]	; (1b350 <radio_tmr_aa_get+0x8>)
   1b34a:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   1b34e:	4770      	bx	lr
   1b350:	40008000 	.word	0x40008000

0001b354 <radio_tmr_aa_save>:

static uint32_t radio_tmr_aa;

void radio_tmr_aa_save(uint32_t aa)
{
	radio_tmr_aa = aa;
   1b354:	4b01      	ldr	r3, [pc, #4]	; (1b35c <radio_tmr_aa_save+0x8>)
   1b356:	6018      	str	r0, [r3, #0]
}
   1b358:	4770      	bx	lr
   1b35a:	bf00      	nop
   1b35c:	20009854 	.word	0x20009854

0001b360 <radio_tmr_aa_restore>:

uint32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
   1b360:	4b01      	ldr	r3, [pc, #4]	; (1b368 <radio_tmr_aa_restore+0x8>)
}
   1b362:	6818      	ldr	r0, [r3, #0]
   1b364:	4770      	bx	lr
   1b366:	bf00      	nop
   1b368:	20009854 	.word	0x20009854

0001b36c <radio_tmr_end_capture>:
   1b36c:	4b02      	ldr	r3, [pc, #8]	; (1b378 <radio_tmr_end_capture+0xc>)
   1b36e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   1b372:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504

void radio_tmr_end_capture(void)
{
	hal_radio_end_time_capture_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_RADIO_END_TIME_CAPTURE_PPI));
}
   1b376:	4770      	bx	lr
   1b378:	4001f000 	.word	0x4001f000

0001b37c <radio_tmr_end_get>:
uint32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   1b37c:	4b01      	ldr	r3, [pc, #4]	; (1b384 <radio_tmr_end_get+0x8>)
   1b37e:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
}
   1b382:	4770      	bx	lr
   1b384:	40008000 	.word	0x40008000

0001b388 <radio_tmr_tifs_base_get>:
   1b388:	4b01      	ldr	r3, [pc, #4]	; (1b390 <radio_tmr_tifs_base_get+0x8>)
   1b38a:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   1b38e:	4770      	bx	lr
   1b390:	40008000 	.word	0x40008000

0001b394 <radio_ccm_rx_pkt_set>:
#endif /* CONFIG_BT_CTLR_GPIO_PA_PIN || CONFIG_BT_CTLR_GPIO_LNA_PIN */

static uint8_t MALIGN(4) _ccm_scratch[(HAL_RADIO_PDU_LEN_MAX - 4) + 16];

void *radio_ccm_rx_pkt_set(struct ccm *ccm, uint8_t phy, void *pkt)
{
   1b394:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1b396:	4b1e      	ldr	r3, [pc, #120]	; (1b410 <radio_ccm_rx_pkt_set+0x7c>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1b398:	2402      	movs	r4, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1b39a:	2500      	movs	r5, #0
	/* Enable CCM support for 8-bit length field PDUs. */
	mode |= (CCM_MODE_LENGTH_Extended << CCM_MODE_LENGTH_Pos) &
		CCM_MODE_LENGTH_Msk;

	/* Select CCM data rate based on current PHY in use. */
	switch (phy) {
   1b39c:	42a1      	cmp	r1, r4
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1b39e:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
{
   1b3a2:	4606      	mov	r6, r0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1b3a4:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	switch (phy) {
   1b3a8:	d02f      	beq.n	1b40a <radio_ccm_rx_pkt_set+0x76>
   1b3aa:	2904      	cmp	r1, #4
   1b3ac:	d12b      	bne.n	1b406 <radio_ccm_rx_pkt_set+0x72>
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1b3ae:	4819      	ldr	r0, [pc, #100]	; (1b414 <radio_ccm_rx_pkt_set+0x80>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1b3b0:	4919      	ldr	r1, [pc, #100]	; (1b418 <radio_ccm_rx_pkt_set+0x84>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1b3b2:	4c1a      	ldr	r4, [pc, #104]	; (1b41c <radio_ccm_rx_pkt_set+0x88>)
	case BIT(2):
		mode |= (CCM_MODE_DATARATE_125Kbps <<
			 CCM_MODE_DATARATE_Pos) &
			CCM_MODE_DATARATE_Msk;

		NRF_CCM->RATEOVERRIDE =
   1b3b4:	2503      	movs	r5, #3
   1b3b6:	f8c3 551c 	str.w	r5, [r3, #1308]	; 0x51c
   1b3ba:	f8c0 4578 	str.w	r4, [r0, #1400]	; 0x578
    p_reg->CHENSET = mask;
   1b3be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1b3c2:	f8c0 157c 	str.w	r1, [r0, #1404]	; 0x57c
		mode |= (CCM_MODE_DATARATE_125Kbps <<
   1b3c6:	4916      	ldr	r1, [pc, #88]	; (1b420 <radio_ccm_rx_pkt_set+0x8c>)
    p_reg->CHENSET = mask;
   1b3c8:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504

	NRF_CCM->MAXPACKETSIZE = max_len;
#endif
#endif /* !CONFIG_SOC_SERIES_NRF51X */

	NRF_CCM->MODE = mode;
   1b3cc:	4b10      	ldr	r3, [pc, #64]	; (1b410 <radio_ccm_rx_pkt_set+0x7c>)
	NRF_CCM->CNFPTR = (uint32_t)ccm;
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   1b3ce:	4815      	ldr	r0, [pc, #84]	; (1b424 <radio_ccm_rx_pkt_set+0x90>)
   1b3d0:	4c10      	ldr	r4, [pc, #64]	; (1b414 <radio_ccm_rx_pkt_set+0x80>)
	NRF_CCM->MODE = mode;
   1b3d2:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	NRF_CCM->OUTPTR = (uint32_t)pkt;
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   1b3d6:	4f14      	ldr	r7, [pc, #80]	; (1b428 <radio_ccm_rx_pkt_set+0x94>)
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   1b3d8:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
	NRF_CCM->SHORTS = 0;
   1b3dc:	2100      	movs	r1, #0
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   1b3de:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
   1b3e2:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
	NRF_CCM->OUTPTR = (uint32_t)pkt;
   1b3e6:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ccm_task_trigger(NRF_CCM_Type * p_reg,
                                            nrf_ccm_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b3ea:	2201      	movs	r2, #1
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   1b3ec:	f8c3 7514 	str.w	r7, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = 0;
   1b3f0:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   1b3f4:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   1b3f8:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
   1b3fc:	f8c4 5504 	str.w	r5, [r4, #1284]	; 0x504
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_CRYPT_PPI));

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   1b400:	bcf0      	pop	{r4, r5, r6, r7}
   1b402:	601a      	str	r2, [r3, #0]
   1b404:	4770      	bx	lr
		mode |= (CCM_MODE_DATARATE_1Mbit <<
   1b406:	4909      	ldr	r1, [pc, #36]	; (1b42c <radio_ccm_rx_pkt_set+0x98>)
   1b408:	e7e0      	b.n	1b3cc <radio_ccm_rx_pkt_set+0x38>
	switch (phy) {
   1b40a:	4909      	ldr	r1, [pc, #36]	; (1b430 <radio_ccm_rx_pkt_set+0x9c>)
   1b40c:	e7de      	b.n	1b3cc <radio_ccm_rx_pkt_set+0x38>
   1b40e:	bf00      	nop
   1b410:	4000f000 	.word	0x4000f000
   1b414:	4001f000 	.word	0x4001f000
   1b418:	4000f00c 	.word	0x4000f00c
   1b41c:	40001150 	.word	0x40001150
   1b420:	01020001 	.word	0x01020001
   1b424:	20009748 	.word	0x20009748
   1b428:	20009638 	.word	0x20009638
   1b42c:	01000001 	.word	0x01000001
   1b430:	01010001 	.word	0x01010001

0001b434 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
   1b434:	b470      	push	{r4, r5, r6}
	uint32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1b436:	4b10      	ldr	r3, [pc, #64]	; (1b478 <radio_ccm_tx_pkt_set+0x44>)
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
	NRF_CCM->CNFPTR = (uint32_t)ccm;
	NRF_CCM->INPTR = (uint32_t)pkt;
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   1b438:	4d10      	ldr	r5, [pc, #64]	; (1b47c <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->MODE = mode;
   1b43a:	4e11      	ldr	r6, [pc, #68]	; (1b480 <radio_ccm_tx_pkt_set+0x4c>)
{
   1b43c:	4604      	mov	r4, r0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1b43e:	2200      	movs	r2, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1b440:	2002      	movs	r0, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1b442:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1b446:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
	NRF_CCM->MODE = mode;
   1b44a:	f8c3 6504 	str.w	r6, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   1b44e:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   1b452:	4e0c      	ldr	r6, [pc, #48]	; (1b484 <radio_ccm_tx_pkt_set+0x50>)
	NRF_CCM->INPTR = (uint32_t)pkt;
   1b454:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   1b458:	2401      	movs	r4, #1
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   1b45a:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
	NRF_CCM->EVENTS_ERROR = 0;

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   1b45e:	4628      	mov	r0, r5
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   1b460:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   1b464:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   1b468:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   1b46c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   1b470:	601c      	str	r4, [r3, #0]
}
   1b472:	bc70      	pop	{r4, r5, r6}
   1b474:	4770      	bx	lr
   1b476:	bf00      	nop
   1b478:	4000f000 	.word	0x4000f000
   1b47c:	20009748 	.word	0x20009748
   1b480:	01010000 	.word	0x01010000
   1b484:	20009638 	.word	0x20009638

0001b488 <radio_ccm_is_done>:
    return ((uint32_t)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_ccm_int_enable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1b488:	4a0e      	ldr	r2, [pc, #56]	; (1b4c4 <radio_ccm_is_done+0x3c>)
   1b48a:	2302      	movs	r3, #2
   1b48c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304

uint32_t radio_ccm_is_done(void)
{
	nrf_ccm_int_enable(NRF_CCM, CCM_INTENSET_ENDCRYPT_Msk);
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   1b490:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   1b494:	b933      	cbnz	r3, 1b4a4 <radio_ccm_is_done+0x1c>
		__WFE();
   1b496:	bf20      	wfe
		__SEV();
   1b498:	bf40      	sev
		__WFE();
   1b49a:	bf20      	wfe
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   1b49c:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   1b4a0:	2b00      	cmp	r3, #0
   1b4a2:	d0f8      	beq.n	1b496 <radio_ccm_is_done+0xe>
}

NRF_STATIC_INLINE void nrf_ccm_int_disable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   1b4a4:	4b07      	ldr	r3, [pc, #28]	; (1b4c4 <radio_ccm_is_done+0x3c>)
   1b4a6:	4a08      	ldr	r2, [pc, #32]	; (1b4c8 <radio_ccm_is_done+0x40>)
   1b4a8:	2002      	movs	r0, #2
   1b4aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1b4ae:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   1b4b2:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
	}
	nrf_ccm_int_disable(NRF_CCM, CCM_INTENCLR_ENDCRYPT_Msk);
	NVIC_ClearPendingIRQ(nrfx_get_irq_number(NRF_CCM));

	return (NRF_CCM->EVENTS_ERROR == 0);
   1b4b6:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
   1b4ba:	fab0 f080 	clz	r0, r0
   1b4be:	0940      	lsrs	r0, r0, #5
   1b4c0:	4770      	bx	lr
   1b4c2:	bf00      	nop
   1b4c4:	4000f000 	.word	0x4000f000
   1b4c8:	e000e100 	.word	0xe000e100

0001b4cc <radio_ccm_mic_is_valid>:

uint32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
   1b4cc:	4b03      	ldr	r3, [pc, #12]	; (1b4dc <radio_ccm_mic_is_valid+0x10>)
   1b4ce:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1b4d2:	3800      	subs	r0, #0
   1b4d4:	bf18      	it	ne
   1b4d6:	2001      	movne	r0, #1
   1b4d8:	4770      	bx	lr
   1b4da:	bf00      	nop
   1b4dc:	4000f000 	.word	0x4000f000

0001b4e0 <radio_ar_configure>:

static uint8_t MALIGN(4) _aar_scratch[3];

void radio_ar_configure(uint32_t nirk, void *irk)
{
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   1b4e0:	4b15      	ldr	r3, [pc, #84]	; (1b538 <radio_ar_configure+0x58>)
			  AAR_ENABLE_ENABLE_Msk;
	NRF_AAR->NIRK = nirk;
	NRF_AAR->IRKPTR = (uint32_t)irk;
	NRF_AAR->ADDRPTR = (uint32_t)NRF_RADIO->PACKETPTR - 1;
   1b4e2:	4a16      	ldr	r2, [pc, #88]	; (1b53c <radio_ar_configure+0x5c>)
{
   1b4e4:	b430      	push	{r4, r5}
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   1b4e6:	2403      	movs	r4, #3
   1b4e8:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	NRF_AAR->NIRK = nirk;
   1b4ec:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
	NRF_AAR->IRKPTR = (uint32_t)irk;
   1b4f0:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
	NRF_AAR->ADDRPTR = (uint32_t)NRF_RADIO->PACKETPTR - 1;
   1b4f4:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	NRF_AAR->SCRATCHPTR = (uint32_t)&_aar_scratch[0];
   1b4f8:	4d11      	ldr	r5, [pc, #68]	; (1b540 <radio_ar_configure+0x60>)
   1b4fa:	4c12      	ldr	r4, [pc, #72]	; (1b544 <radio_ar_configure+0x64>)
	NRF_AAR->ADDRPTR = (uint32_t)NRF_RADIO->PACKETPTR - 1;
   1b4fc:	3801      	subs	r0, #1
   1b4fe:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510

	NRF_AAR->EVENTS_END = 0;
   1b502:	2100      	movs	r1, #0
    p_reg->BCC = radio_bcc;
   1b504:	2040      	movs	r0, #64	; 0x40
	NRF_AAR->SCRATCHPTR = (uint32_t)&_aar_scratch[0];
   1b506:	f8c3 5514 	str.w	r5, [r3, #1300]	; 0x514
	NRF_AAR->EVENTS_END = 0;
   1b50a:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
	NRF_AAR->EVENTS_RESOLVED = 0;
   1b50e:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	NRF_AAR->EVENTS_NOTRESOLVED = 0;
   1b512:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
   1b516:	f8c2 0560 	str.w	r0, [r2, #1376]	; 0x560
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
   1b51a:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   1b51e:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   1b522:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1b526:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	NRF_RADIO->EVENTS_BCMATCH = 0;
   1b52a:	f8c2 1128 	str.w	r1, [r2, #296]	; 0x128
   1b52e:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
	radio_bc_configure(64);
	radio_bc_status_reset();

	hal_trigger_aar_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_AAR_PPI));
}
   1b532:	bc30      	pop	{r4, r5}
   1b534:	4770      	bx	lr
   1b536:	bf00      	nop
   1b538:	4000f000 	.word	0x4000f000
   1b53c:	40001000 	.word	0x40001000
   1b540:	20009634 	.word	0x20009634
   1b544:	4001f000 	.word	0x4001f000

0001b548 <radio_ar_match_get>:

uint32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
   1b548:	4b01      	ldr	r3, [pc, #4]	; (1b550 <radio_ar_match_get+0x8>)
   1b54a:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1b54e:	4770      	bx	lr
   1b550:	4000f000 	.word	0x4000f000

0001b554 <radio_ar_status_reset>:
	NRF_RADIO->EVENTS_BCMATCH = 0;
   1b554:	4903      	ldr	r1, [pc, #12]	; (1b564 <radio_ar_status_reset+0x10>)

void radio_ar_status_reset(void)
{
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   1b556:	4a04      	ldr	r2, [pc, #16]	; (1b568 <radio_ar_status_reset+0x14>)
	NRF_RADIO->EVENTS_BCMATCH = 0;
   1b558:	2300      	movs	r3, #0
   1b55a:	f8c1 3128 	str.w	r3, [r1, #296]	; 0x128
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   1b55e:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
			  AAR_ENABLE_ENABLE_Msk;
}
   1b562:	4770      	bx	lr
   1b564:	40001000 	.word	0x40001000
   1b568:	4000f000 	.word	0x4000f000

0001b56c <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
   1b56c:	4b08      	ldr	r3, [pc, #32]	; (1b590 <radio_ar_has_match+0x24>)
   1b56e:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

uint32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
   1b572:	b160      	cbz	r0, 1b58e <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
   1b574:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   1b578:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
   1b57c:	b138      	cbz	r0, 1b58e <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
   1b57e:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
   1b582:	b120      	cbz	r0, 1b58e <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
   1b584:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
   1b588:	fab0 f080 	clz	r0, r0
   1b58c:	0940      	lsrs	r0, r0, #5
}
   1b58e:	4770      	bx	lr
   1b590:	40001000 	.word	0x40001000

0001b594 <mayfly_enable_cb>:

void mayfly_enable_cb(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   1b594:	2902      	cmp	r1, #2
{
   1b596:	b510      	push	{r4, lr}
   1b598:	4614      	mov	r4, r2
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   1b59a:	d00b      	beq.n	1b5b4 <mayfly_enable_cb+0x20>
   1b59c:	4a0a      	ldr	r2, [pc, #40]	; (1b5c8 <mayfly_enable_cb+0x34>)
   1b59e:	490b      	ldr	r1, [pc, #44]	; (1b5cc <mayfly_enable_cb+0x38>)
   1b5a0:	480b      	ldr	r0, [pc, #44]	; (1b5d0 <mayfly_enable_cb+0x3c>)
   1b5a2:	2322      	movs	r3, #34	; 0x22
   1b5a4:	f002 fcd1 	bl	1df4a <printk>
   1b5a8:	4040      	eors	r0, r0
   1b5aa:	f380 8811 	msr	BASEPRI, r0
   1b5ae:	f04f 0003 	mov.w	r0, #3
   1b5b2:	df02      	svc	2

	if (enable) {
		irq_enable(HAL_SWI_JOB_IRQ);
   1b5b4:	200b      	movs	r0, #11
	if (enable) {
   1b5b6:	b11c      	cbz	r4, 1b5c0 <mayfly_enable_cb+0x2c>
	} else {
		irq_disable(HAL_SWI_JOB_IRQ);
	}
}
   1b5b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_enable(HAL_SWI_JOB_IRQ);
   1b5bc:	f7eb bf40 	b.w	7440 <arch_irq_enable>
}
   1b5c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_disable(HAL_SWI_JOB_IRQ);
   1b5c4:	f7eb bf4c 	b.w	7460 <arch_irq_disable>
   1b5c8:	00024c38 	.word	0x00024c38
   1b5cc:	00024c88 	.word	0x00024c88
   1b5d0:	00023fe4 	.word	0x00023fe4

0001b5d4 <mayfly_is_enabled>:

uint32_t mayfly_is_enabled(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   1b5d4:	b129      	cbz	r1, 1b5e2 <mayfly_is_enabled+0xe>
   1b5d6:	3901      	subs	r1, #1
   1b5d8:	2901      	cmp	r1, #1
   1b5da:	d805      	bhi.n	1b5e8 <mayfly_is_enabled+0x14>
	case MAYFLY_CALL_ID_LLL:
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);
#endif /* CONFIG_BT_LL_SW_SPLIT */

	case MAYFLY_CALL_ID_WORKER:
		return irq_is_enabled(HAL_SWI_WORKER_IRQ);
   1b5dc:	200b      	movs	r0, #11
   1b5de:	f7eb bf53 	b.w	7488 <arch_irq_is_enabled>
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);
   1b5e2:	2018      	movs	r0, #24
   1b5e4:	f7eb bf50 	b.w	7488 <arch_irq_is_enabled>
{
   1b5e8:	b508      	push	{r3, lr}

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(HAL_SWI_JOB_IRQ);

	default:
		LL_ASSERT(0);
   1b5ea:	4a07      	ldr	r2, [pc, #28]	; (1b608 <mayfly_is_enabled+0x34>)
   1b5ec:	4907      	ldr	r1, [pc, #28]	; (1b60c <mayfly_is_enabled+0x38>)
   1b5ee:	4808      	ldr	r0, [pc, #32]	; (1b610 <mayfly_is_enabled+0x3c>)
   1b5f0:	233c      	movs	r3, #60	; 0x3c
   1b5f2:	f002 fcaa 	bl	1df4a <printk>
   1b5f6:	4040      	eors	r0, r0
   1b5f8:	f380 8811 	msr	BASEPRI, r0
   1b5fc:	f04f 0003 	mov.w	r0, #3
   1b600:	df02      	svc	2
		break;
	}

	return 0;
}
   1b602:	2000      	movs	r0, #0
   1b604:	bd08      	pop	{r3, pc}
   1b606:	bf00      	nop
   1b608:	00024c38 	.word	0x00024c38
   1b60c:	00024054 	.word	0x00024054
   1b610:	00023fe4 	.word	0x00023fe4

0001b614 <mayfly_prio_is_equal>:
#endif
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   1b614:	4288      	cmp	r0, r1
   1b616:	d013      	beq.n	1b640 <mayfly_prio_is_equal+0x2c>
	return (caller_id == callee_id) ||
   1b618:	b928      	cbnz	r0, 1b626 <mayfly_prio_is_equal+0x12>
	       ((caller_id == MAYFLY_CALL_ID_LLL) &&
   1b61a:	1e48      	subs	r0, r1, #1
   1b61c:	2801      	cmp	r0, #1
   1b61e:	bf8c      	ite	hi
   1b620:	2000      	movhi	r0, #0
   1b622:	2001      	movls	r0, #1
   1b624:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   1b626:	2801      	cmp	r0, #1
   1b628:	d106      	bne.n	1b638 <mayfly_prio_is_equal+0x24>
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   1b62a:	b159      	cbz	r1, 1b644 <mayfly_prio_is_equal+0x30>
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   1b62c:	f1a1 0002 	sub.w	r0, r1, #2
   1b630:	fab0 f080 	clz	r0, r0
   1b634:	0940      	lsrs	r0, r0, #5
   1b636:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   1b638:	2802      	cmp	r0, #2
   1b63a:	d004      	beq.n	1b646 <mayfly_prio_is_equal+0x32>
   1b63c:	2000      	movs	r0, #0
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   1b63e:	4770      	bx	lr
   1b640:	2001      	movs	r0, #1
   1b642:	4770      	bx	lr
#endif
#endif
	       0;
}
   1b644:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   1b646:	2901      	cmp	r1, #1
   1b648:	bf8c      	ite	hi
   1b64a:	2000      	movhi	r0, #0
   1b64c:	2001      	movls	r0, #1
   1b64e:	4770      	bx	lr

0001b650 <mayfly_pend>:

void mayfly_pend(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   1b650:	2901      	cmp	r1, #1
{
   1b652:	b508      	push	{r3, lr}
	switch (callee_id) {
   1b654:	d00f      	beq.n	1b676 <mayfly_pend+0x26>
   1b656:	2902      	cmp	r1, #2
   1b658:	d00d      	beq.n	1b676 <mayfly_pend+0x26>
   1b65a:	b191      	cbz	r1, 1b682 <mayfly_pend+0x32>
	case MAYFLY_CALL_ID_JOB:
		hal_swi_job_pend();
		break;

	default:
		LL_ASSERT(0);
   1b65c:	4a0c      	ldr	r2, [pc, #48]	; (1b690 <mayfly_pend+0x40>)
   1b65e:	490d      	ldr	r1, [pc, #52]	; (1b694 <mayfly_pend+0x44>)
   1b660:	480d      	ldr	r0, [pc, #52]	; (1b698 <mayfly_pend+0x48>)
   1b662:	2371      	movs	r3, #113	; 0x71
   1b664:	f002 fc71 	bl	1df4a <printk>
   1b668:	4040      	eors	r0, r0
   1b66a:	f380 8811 	msr	BASEPRI, r0
   1b66e:	f04f 0003 	mov.w	r0, #3
   1b672:	df02      	svc	2
		break;
	}
}
   1b674:	bd08      	pop	{r3, pc}
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1b676:	4b09      	ldr	r3, [pc, #36]	; (1b69c <mayfly_pend+0x4c>)
   1b678:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1b67c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1b680:	bd08      	pop	{r3, pc}
   1b682:	4b06      	ldr	r3, [pc, #24]	; (1b69c <mayfly_pend+0x4c>)
   1b684:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   1b688:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1b68c:	bd08      	pop	{r3, pc}
   1b68e:	bf00      	nop
   1b690:	00024c38 	.word	0x00024c38
   1b694:	00024054 	.word	0x00024054
   1b698:	00023fe4 	.word	0x00023fe4
   1b69c:	e000e100 	.word	0xe000e100

0001b6a0 <hal_ticker_instance0_caller_id_get>:

uint8_t hal_ticker_instance0_caller_id_get(uint8_t user_id)
{
	uint8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   1b6a0:	2803      	cmp	r0, #3
{
   1b6a2:	b510      	push	{r4, lr}
   1b6a4:	4604      	mov	r4, r0
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   1b6a6:	d804      	bhi.n	1b6b2 <hal_ticker_instance0_caller_id_get+0x12>

	caller_id = caller_id_lut[user_id];
   1b6a8:	4b11      	ldr	r3, [pc, #68]	; (1b6f0 <hal_ticker_instance0_caller_id_get+0x50>)
   1b6aa:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   1b6ac:	b18c      	cbz	r4, 1b6d2 <hal_ticker_instance0_caller_id_get+0x32>

	return caller_id;
}
   1b6ae:	4620      	mov	r0, r4
   1b6b0:	bd10      	pop	{r4, pc}
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   1b6b2:	4a10      	ldr	r2, [pc, #64]	; (1b6f4 <hal_ticker_instance0_caller_id_get+0x54>)
   1b6b4:	4910      	ldr	r1, [pc, #64]	; (1b6f8 <hal_ticker_instance0_caller_id_get+0x58>)
   1b6b6:	4811      	ldr	r0, [pc, #68]	; (1b6fc <hal_ticker_instance0_caller_id_get+0x5c>)
   1b6b8:	232d      	movs	r3, #45	; 0x2d
   1b6ba:	f002 fc46 	bl	1df4a <printk>
   1b6be:	4040      	eors	r0, r0
   1b6c0:	f380 8811 	msr	BASEPRI, r0
   1b6c4:	f04f 0003 	mov.w	r0, #3
   1b6c8:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
   1b6ca:	4b09      	ldr	r3, [pc, #36]	; (1b6f0 <hal_ticker_instance0_caller_id_get+0x50>)
   1b6cc:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   1b6ce:	2c00      	cmp	r4, #0
   1b6d0:	d1ed      	bne.n	1b6ae <hal_ticker_instance0_caller_id_get+0xe>
   1b6d2:	4a08      	ldr	r2, [pc, #32]	; (1b6f4 <hal_ticker_instance0_caller_id_get+0x54>)
   1b6d4:	490a      	ldr	r1, [pc, #40]	; (1b700 <hal_ticker_instance0_caller_id_get+0x60>)
   1b6d6:	4809      	ldr	r0, [pc, #36]	; (1b6fc <hal_ticker_instance0_caller_id_get+0x5c>)
   1b6d8:	2330      	movs	r3, #48	; 0x30
   1b6da:	f002 fc36 	bl	1df4a <printk>
   1b6de:	4040      	eors	r0, r0
   1b6e0:	f380 8811 	msr	BASEPRI, r0
   1b6e4:	f04f 0003 	mov.w	r0, #3
   1b6e8:	df02      	svc	2
}
   1b6ea:	4620      	mov	r0, r4
   1b6ec:	bd10      	pop	{r4, pc}
   1b6ee:	bf00      	nop
   1b6f0:	00024d40 	.word	0x00024d40
   1b6f4:	00024cac 	.word	0x00024cac
   1b6f8:	00024cfc 	.word	0x00024cfc
   1b6fc:	00023fe4 	.word	0x00023fe4
   1b700:	00024d1c 	.word	0x00024d1c

0001b704 <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   1b704:	3801      	subs	r0, #1
{
   1b706:	b510      	push	{r4, lr}
   1b708:	461c      	mov	r4, r3
   1b70a:	2804      	cmp	r0, #4
   1b70c:	d855      	bhi.n	1b7ba <hal_ticker_instance0_sched+0xb6>
   1b70e:	e8df f000 	tbb	[pc, r0]
   1b712:	1a12      	.short	0x1a12
   1b714:	1e16      	.short	0x1e16
   1b716:	03          	.byte	0x03
   1b717:	00          	.byte	0x00
			break;
		}
		break;

	case TICKER_CALL_ID_PROGRAM:
		switch (callee_id) {
   1b718:	2904      	cmp	r1, #4
   1b71a:	d01e      	beq.n	1b75a <hal_ticker_instance0_sched+0x56>
				       &m);
		}
		break;

		default:
			LL_ASSERT(0);
   1b71c:	23be      	movs	r3, #190	; 0xbe
			break;
		}
		break;

	default:
		LL_ASSERT(0);
   1b71e:	4a28      	ldr	r2, [pc, #160]	; (1b7c0 <hal_ticker_instance0_sched+0xbc>)
   1b720:	4928      	ldr	r1, [pc, #160]	; (1b7c4 <hal_ticker_instance0_sched+0xc0>)
   1b722:	4829      	ldr	r0, [pc, #164]	; (1b7c8 <hal_ticker_instance0_sched+0xc4>)
   1b724:	f002 fc11 	bl	1df4a <printk>
   1b728:	4040      	eors	r0, r0
   1b72a:	f380 8811 	msr	BASEPRI, r0
   1b72e:	f04f 0003 	mov.w	r0, #3
   1b732:	df02      	svc	2
		break;
	}
}
   1b734:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   1b736:	2904      	cmp	r1, #4
   1b738:	d01f      	beq.n	1b77a <hal_ticker_instance0_sched+0x76>
			LL_ASSERT(0);
   1b73a:	2351      	movs	r3, #81	; 0x51
   1b73c:	e7ef      	b.n	1b71e <hal_ticker_instance0_sched+0x1a>
		switch (callee_id) {
   1b73e:	2904      	cmp	r1, #4
   1b740:	d013      	beq.n	1b76a <hal_ticker_instance0_sched+0x66>
			LL_ASSERT(0);
   1b742:	2380      	movs	r3, #128	; 0x80
   1b744:	e7eb      	b.n	1b71e <hal_ticker_instance0_sched+0x1a>
		switch (callee_id) {
   1b746:	2903      	cmp	r1, #3
   1b748:	d01f      	beq.n	1b78a <hal_ticker_instance0_sched+0x86>
			LL_ASSERT(0);
   1b74a:	2369      	movs	r3, #105	; 0x69
   1b74c:	e7e7      	b.n	1b71e <hal_ticker_instance0_sched+0x1a>
		switch (callee_id) {
   1b74e:	2903      	cmp	r1, #3
   1b750:	d02b      	beq.n	1b7aa <hal_ticker_instance0_sched+0xa6>
   1b752:	2904      	cmp	r1, #4
   1b754:	d021      	beq.n	1b79a <hal_ticker_instance0_sched+0x96>
			LL_ASSERT(0);
   1b756:	23a6      	movs	r3, #166	; 0xa6
   1b758:	e7e1      	b.n	1b71e <hal_ticker_instance0_sched+0x1a>
			m.param = instance;
   1b75a:	4b1c      	ldr	r3, [pc, #112]	; (1b7cc <hal_ticker_instance0_sched+0xc8>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1b75c:	2102      	movs	r1, #2
			m.param = instance;
   1b75e:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1b760:	2003      	movs	r0, #3
}
   1b762:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1b766:	f7f4 bd01 	b.w	1016c <mayfly_enqueue>
			m.param = instance;
   1b76a:	4b19      	ldr	r3, [pc, #100]	; (1b7d0 <hal_ticker_instance0_sched+0xcc>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   1b76c:	2102      	movs	r1, #2
			m.param = instance;
   1b76e:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   1b770:	2001      	movs	r0, #1
}
   1b772:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   1b776:	f7f4 bcf9 	b.w	1016c <mayfly_enqueue>
			m.param = instance;
   1b77a:	4b16      	ldr	r3, [pc, #88]	; (1b7d4 <hal_ticker_instance0_sched+0xd0>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   1b77c:	2102      	movs	r1, #2
			m.param = instance;
   1b77e:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   1b780:	2000      	movs	r0, #0
}
   1b782:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   1b786:	f7f4 bcf1 	b.w	1016c <mayfly_enqueue>
			m.param = instance;
   1b78a:	4b13      	ldr	r3, [pc, #76]	; (1b7d8 <hal_ticker_instance0_sched+0xd4>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   1b78c:	2101      	movs	r1, #1
			m.param = instance;
   1b78e:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   1b790:	4608      	mov	r0, r1
}
   1b792:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   1b796:	f7f4 bce9 	b.w	1016c <mayfly_enqueue>
			m.param = instance;
   1b79a:	4b10      	ldr	r3, [pc, #64]	; (1b7dc <hal_ticker_instance0_sched+0xd8>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1b79c:	2102      	movs	r1, #2
			m.param = instance;
   1b79e:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1b7a0:	4608      	mov	r0, r1
}
   1b7a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1b7a6:	f7f4 bce1 	b.w	1016c <mayfly_enqueue>
			m.param = instance;
   1b7aa:	4b0d      	ldr	r3, [pc, #52]	; (1b7e0 <hal_ticker_instance0_sched+0xdc>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1b7ac:	2101      	movs	r1, #1
			m.param = instance;
   1b7ae:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1b7b0:	2002      	movs	r0, #2
}
   1b7b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1b7b6:	f7f4 bcd9 	b.w	1016c <mayfly_enqueue>
		LL_ASSERT(0);
   1b7ba:	23c4      	movs	r3, #196	; 0xc4
   1b7bc:	e7af      	b.n	1b71e <hal_ticker_instance0_sched+0x1a>
   1b7be:	bf00      	nop
   1b7c0:	00024cac 	.word	0x00024cac
   1b7c4:	00024054 	.word	0x00024054
   1b7c8:	00023fe4 	.word	0x00023fe4
   1b7cc:	20000688 	.word	0x20000688
   1b7d0:	20000658 	.word	0x20000658
   1b7d4:	20000638 	.word	0x20000638
   1b7d8:	20000648 	.word	0x20000648
   1b7dc:	20000678 	.word	0x20000678
   1b7e0:	20000668 	.word	0x20000668

0001b7e4 <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(uint32_t value)
{
   1b7e4:	4601      	mov	r1, r0
	cntr_cmp_set(0, value);
   1b7e6:	2000      	movs	r0, #0
   1b7e8:	f7ff b93c 	b.w	1aa64 <cntr_cmp_set>

0001b7ec <hci_vendor_read_static_addr>:
				 uint8_t size)
{
	/* only one supported */
	ARG_UNUSED(size);

	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   1b7ec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1b7f0:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
   1b7f4:	3201      	adds	r2, #1
   1b7f6:	d008      	beq.n	1b80a <hci_vendor_read_static_addr+0x1e>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
	     (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
   1b7f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1b7fc:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   1b800:	f013 0301 	ands.w	r3, r3, #1
   1b804:	d10f      	bne.n	1b826 <hci_vendor_read_static_addr+0x3a>
		}

		return 1;
	}

	return 0;
   1b806:	2000      	movs	r0, #0
   1b808:	4770      	bx	lr
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   1b80a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   1b80e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1b812:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   1b814:	4293      	cmp	r3, r2
   1b816:	d0f6      	beq.n	1b806 <hci_vendor_read_static_addr+0x1a>
	     (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
   1b818:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1b81c:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   1b820:	f013 0301 	ands.w	r3, r3, #1
   1b824:	d0ef      	beq.n	1b806 <hci_vendor_read_static_addr+0x1a>
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addrs[0].bdaddr.val[0]);
   1b826:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
	sys_put_le16(val >> 16, &dst[2]);
   1b82a:	0c19      	lsrs	r1, r3, #16
{
   1b82c:	b510      	push	{r4, lr}
	dst[0] = val;
   1b82e:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   1b830:	0a0c      	lsrs	r4, r1, #8
   1b832:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1b836:	7081      	strb	r1, [r0, #2]
	dst[1] = val >> 8;
   1b838:	70c4      	strb	r4, [r0, #3]
   1b83a:	7043      	strb	r3, [r0, #1]
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addrs[0].bdaddr.val[4]);
   1b83c:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
	dst[0] = val;
   1b840:	7103      	strb	r3, [r0, #4]
	dst[1] = val >> 8;
   1b842:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addrs[0].bdaddr);
   1b846:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1b84a:	7143      	strb	r3, [r0, #5]
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   1b84c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   1b850:	3301      	adds	r3, #1
   1b852:	d035      	beq.n	1b8c0 <hci_vendor_read_static_addr+0xd4>
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   1b854:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   1b858:	3301      	adds	r3, #1
   1b85a:	d031      	beq.n	1b8c0 <hci_vendor_read_static_addr+0xd4>
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   1b85c:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   1b860:	3301      	adds	r3, #1
   1b862:	d02d      	beq.n	1b8c0 <hci_vendor_read_static_addr+0xd4>
		    (NRF_FICR->IR[3] != UINT32_MAX)) {
   1b864:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   1b868:	3301      	adds	r3, #1
   1b86a:	d029      	beq.n	1b8c0 <hci_vendor_read_static_addr+0xd4>
			sys_put_le32(NRF_FICR->IR[0], &addrs[0].ir[0]);
   1b86c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
	dst[0] = val;
   1b870:	7183      	strb	r3, [r0, #6]
	sys_put_le16(val >> 16, &dst[2]);
   1b872:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   1b874:	0a0c      	lsrs	r4, r1, #8
   1b876:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1b87a:	7201      	strb	r1, [r0, #8]
	dst[1] = val >> 8;
   1b87c:	7244      	strb	r4, [r0, #9]
   1b87e:	71c3      	strb	r3, [r0, #7]
			sys_put_le32(NRF_FICR->IR[1], &addrs[0].ir[4]);
   1b880:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
	dst[0] = val;
   1b884:	7283      	strb	r3, [r0, #10]
	sys_put_le16(val >> 16, &dst[2]);
   1b886:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   1b888:	0a0c      	lsrs	r4, r1, #8
   1b88a:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1b88e:	7301      	strb	r1, [r0, #12]
	dst[1] = val >> 8;
   1b890:	7344      	strb	r4, [r0, #13]
   1b892:	72c3      	strb	r3, [r0, #11]
			sys_put_le32(NRF_FICR->IR[2], &addrs[0].ir[8]);
   1b894:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
	dst[0] = val;
   1b898:	7383      	strb	r3, [r0, #14]
	sys_put_le16(val >> 16, &dst[2]);
   1b89a:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   1b89c:	0a0c      	lsrs	r4, r1, #8
   1b89e:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1b8a2:	7401      	strb	r1, [r0, #16]
	dst[1] = val >> 8;
   1b8a4:	7444      	strb	r4, [r0, #17]
   1b8a6:	73c3      	strb	r3, [r0, #15]
			sys_put_le32(NRF_FICR->IR[3], &addrs[0].ir[12]);
   1b8a8:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
	dst[0] = val;
   1b8ac:	7483      	strb	r3, [r0, #18]
	sys_put_le16(val >> 16, &dst[2]);
   1b8ae:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val >> 8;
   1b8b0:	0a11      	lsrs	r1, r2, #8
   1b8b2:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1b8b6:	7502      	strb	r2, [r0, #20]
	dst[1] = val >> 8;
   1b8b8:	7541      	strb	r1, [r0, #21]
   1b8ba:	74c3      	strb	r3, [r0, #19]
		return 1;
   1b8bc:	2001      	movs	r0, #1
}
   1b8be:	bd10      	pop	{r4, pc}
			(void)memset(addrs[0].ir, 0x00, sizeof(addrs[0].ir));
   1b8c0:	2210      	movs	r2, #16
   1b8c2:	2100      	movs	r1, #0
   1b8c4:	3006      	adds	r0, #6
   1b8c6:	f004 fafd 	bl	1fec4 <memset>
		return 1;
   1b8ca:	2001      	movs	r0, #1
}
   1b8cc:	bd10      	pop	{r4, pc}
   1b8ce:	bf00      	nop

0001b8d0 <hci_vendor_read_key_hierarchy_roots>:

void hci_vendor_read_key_hierarchy_roots(uint8_t ir[16], uint8_t er[16])
{
   1b8d0:	b510      	push	{r4, lr}
	/* Mark IR as invalid.
	 * No public address is available, and static address IR should be read
	 * using Read Static Addresses command.
	 */
	(void)memset(ir, 0x00, 16);
   1b8d2:	2210      	movs	r2, #16
{
   1b8d4:	460c      	mov	r4, r1
	(void)memset(ir, 0x00, 16);
   1b8d6:	2100      	movs	r1, #0
   1b8d8:	f004 faf4 	bl	1fec4 <memset>

	/* Fill in ER if present */
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   1b8dc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1b8e0:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
   1b8e4:	3201      	adds	r2, #1
   1b8e6:	d034      	beq.n	1b952 <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   1b8e8:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   1b8ec:	3201      	adds	r2, #1
   1b8ee:	d030      	beq.n	1b952 <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   1b8f0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   1b8f4:	3201      	adds	r2, #1
   1b8f6:	d02c      	beq.n	1b952 <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
   1b8f8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   1b8fc:	3201      	adds	r2, #1
   1b8fe:	d028      	beq.n	1b952 <hci_vendor_read_key_hierarchy_roots+0x82>
		sys_put_le32(NRF_FICR->ER[0], &er[0]);
   1b900:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
	dst[0] = val;
   1b904:	7022      	strb	r2, [r4, #0]
	sys_put_le16(val >> 16, &dst[2]);
   1b906:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   1b908:	0a08      	lsrs	r0, r1, #8
   1b90a:	f3c2 2207 	ubfx	r2, r2, #8, #8
	dst[0] = val;
   1b90e:	70a1      	strb	r1, [r4, #2]
	dst[1] = val >> 8;
   1b910:	70e0      	strb	r0, [r4, #3]
   1b912:	7062      	strb	r2, [r4, #1]
		sys_put_le32(NRF_FICR->ER[1], &er[4]);
   1b914:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
	dst[0] = val;
   1b918:	7122      	strb	r2, [r4, #4]
	sys_put_le16(val >> 16, &dst[2]);
   1b91a:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   1b91c:	0a08      	lsrs	r0, r1, #8
   1b91e:	f3c2 2207 	ubfx	r2, r2, #8, #8
	dst[0] = val;
   1b922:	71a1      	strb	r1, [r4, #6]
	dst[1] = val >> 8;
   1b924:	71e0      	strb	r0, [r4, #7]
   1b926:	7162      	strb	r2, [r4, #5]
		sys_put_le32(NRF_FICR->ER[2], &er[8]);
   1b928:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	dst[0] = val;
   1b92c:	7222      	strb	r2, [r4, #8]
	sys_put_le16(val >> 16, &dst[2]);
   1b92e:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   1b930:	0a08      	lsrs	r0, r1, #8
   1b932:	f3c2 2207 	ubfx	r2, r2, #8, #8
	dst[0] = val;
   1b936:	72a1      	strb	r1, [r4, #10]
	dst[1] = val >> 8;
   1b938:	7262      	strb	r2, [r4, #9]
   1b93a:	72e0      	strb	r0, [r4, #11]
		sys_put_le32(NRF_FICR->ER[3], &er[12]);
   1b93c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
	dst[0] = val;
   1b940:	7323      	strb	r3, [r4, #12]
	sys_put_le16(val >> 16, &dst[2]);
   1b942:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val >> 8;
   1b944:	0a11      	lsrs	r1, r2, #8
   1b946:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1b94a:	73a2      	strb	r2, [r4, #14]
	dst[1] = val >> 8;
   1b94c:	73e1      	strb	r1, [r4, #15]
   1b94e:	7363      	strb	r3, [r4, #13]
	} else {
		/* Mark ER as invalid */
		(void)memset(er, 0x00, 16);
	}
}
   1b950:	bd10      	pop	{r4, pc}
		(void)memset(er, 0x00, 16);
   1b952:	4620      	mov	r0, r4
   1b954:	2210      	movs	r2, #16
}
   1b956:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		(void)memset(er, 0x00, 16);
   1b95a:	2100      	movs	r1, #0
   1b95c:	f004 bab2 	b.w	1fec4 <memset>

0001b960 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   1b960:	4b02      	ldr	r3, [pc, #8]	; (1b96c <net_buf_pool_get+0xc>)
   1b962:	2228      	movs	r2, #40	; 0x28
   1b964:	fb02 3000 	mla	r0, r2, r0, r3
   1b968:	4770      	bx	lr
   1b96a:	bf00      	nop
   1b96c:	200008d8 	.word	0x200008d8

0001b970 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1b970:	7983      	ldrb	r3, [r0, #6]

	return buf - pool->__bufs;
   1b972:	4a05      	ldr	r2, [pc, #20]	; (1b988 <net_buf_id+0x18>)
   1b974:	2128      	movs	r1, #40	; 0x28
   1b976:	fb01 2303 	mla	r3, r1, r3, r2
   1b97a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1b97c:	1ac0      	subs	r0, r0, r3
}
   1b97e:	4b03      	ldr	r3, [pc, #12]	; (1b98c <net_buf_id+0x1c>)
	return buf - pool->__bufs;
   1b980:	10c0      	asrs	r0, r0, #3
}
   1b982:	4358      	muls	r0, r3
   1b984:	4770      	bx	lr
   1b986:	bf00      	nop
   1b988:	200008d8 	.word	0x200008d8
   1b98c:	aaaaaaab 	.word	0xaaaaaaab

0001b990 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   1b990:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1b992:	4a0a      	ldr	r2, [pc, #40]	; (1b9bc <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1b994:	7983      	ldrb	r3, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1b996:	2428      	movs	r4, #40	; 0x28
   1b998:	fb04 2303 	mla	r3, r4, r3, r2

	*size = MIN(fixed->data_size, *size);
   1b99c:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1b99e:	6a1b      	ldr	r3, [r3, #32]
   1b9a0:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1b9a2:	6823      	ldr	r3, [r4, #0]
   1b9a4:	429a      	cmp	r2, r3
   1b9a6:	bf94      	ite	ls
   1b9a8:	600a      	strls	r2, [r1, #0]
   1b9aa:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   1b9ac:	f7ff ffe0 	bl	1b970 <net_buf_id>
   1b9b0:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   1b9b4:	fb02 3000 	mla	r0, r2, r0, r3
   1b9b8:	bd10      	pop	{r4, pc}
   1b9ba:	bf00      	nop
   1b9bc:	200008d8 	.word	0x200008d8

0001b9c0 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   1b9c0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1b9c4:	4605      	mov	r5, r0
   1b9c6:	9101      	str	r1, [sp, #4]
	uint64_t end = z_timeout_end_calc(timeout);
   1b9c8:	4610      	mov	r0, r2
   1b9ca:	4619      	mov	r1, r3
{
   1b9cc:	4616      	mov	r6, r2
   1b9ce:	461f      	mov	r7, r3
	uint64_t end = z_timeout_end_calc(timeout);
   1b9d0:	f007 fbf1 	bl	231b6 <z_timeout_end_calc>
   1b9d4:	4680      	mov	r8, r0
   1b9d6:	4689      	mov	r9, r1
	__asm__ volatile(
   1b9d8:	f04f 0320 	mov.w	r3, #32
   1b9dc:	f3ef 8a11 	mrs	sl, BASEPRI
   1b9e0:	f383 8811 	msr	BASEPRI, r3
   1b9e4:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   1b9e8:	8b6b      	ldrh	r3, [r5, #26]
   1b9ea:	2b00      	cmp	r3, #0
   1b9ec:	d054      	beq.n	1ba98 <net_buf_alloc_len+0xd8>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1b9ee:	8b2a      	ldrh	r2, [r5, #24]
   1b9f0:	429a      	cmp	r2, r3
   1b9f2:	d93d      	bls.n	1ba70 <net_buf_alloc_len+0xb0>
	return z_impl_k_queue_get(queue, timeout);
   1b9f4:	2200      	movs	r2, #0
   1b9f6:	2300      	movs	r3, #0
   1b9f8:	4628      	mov	r0, r5
   1b9fa:	f001 fb35 	bl	1d068 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   1b9fe:	4604      	mov	r4, r0
   1ba00:	2800      	cmp	r0, #0
   1ba02:	d035      	beq.n	1ba70 <net_buf_alloc_len+0xb0>
	__asm__ volatile(
   1ba04:	f38a 8811 	msr	BASEPRI, sl
   1ba08:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   1ba0c:	9b01      	ldr	r3, [sp, #4]
   1ba0e:	2b00      	cmp	r3, #0
   1ba10:	d052      	beq.n	1bab8 <net_buf_alloc_len+0xf8>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1ba12:	ea56 0307 	orrs.w	r3, r6, r7
   1ba16:	d010      	beq.n	1ba3a <net_buf_alloc_len+0x7a>
   1ba18:	1c7b      	adds	r3, r7, #1
   1ba1a:	bf08      	it	eq
   1ba1c:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   1ba20:	d00b      	beq.n	1ba3a <net_buf_alloc_len+0x7a>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - z_tick_get();
   1ba22:	f002 f957 	bl	1dcd4 <z_tick_get>
   1ba26:	ebb8 0600 	subs.w	r6, r8, r0
   1ba2a:	eb69 0701 	sbc.w	r7, r9, r1
   1ba2e:	2e00      	cmp	r6, #0
   1ba30:	f177 0300 	sbcs.w	r3, r7, #0
   1ba34:	bfbc      	itt	lt
   1ba36:	2600      	movlt	r6, #0
   1ba38:	2700      	movlt	r7, #0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1ba3a:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   1ba3c:	f8df 8090 	ldr.w	r8, [pc, #144]	; 1bad0 <net_buf_alloc_len+0x110>
   1ba40:	2228      	movs	r2, #40	; 0x28
   1ba42:	fb02 8303 	mla	r3, r2, r3, r8
   1ba46:	a901      	add	r1, sp, #4
   1ba48:	6a1b      	ldr	r3, [r3, #32]
   1ba4a:	681b      	ldr	r3, [r3, #0]
   1ba4c:	4632      	mov	r2, r6
   1ba4e:	681d      	ldr	r5, [r3, #0]
   1ba50:	4620      	mov	r0, r4
   1ba52:	463b      	mov	r3, r7
   1ba54:	47a8      	blx	r5
   1ba56:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   1ba58:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   1ba5a:	bb70      	cbnz	r0, 1baba <net_buf_alloc_len+0xfa>
	k_lifo_put(&pool->free, buf);
   1ba5c:	79a0      	ldrb	r0, [r4, #6]
   1ba5e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1ba62:	4621      	mov	r1, r4
   1ba64:	eb08 00c0 	add.w	r0, r8, r0, lsl #3
   1ba68:	f007 f951 	bl	22d0e <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   1ba6c:	462c      	mov	r4, r5
}
   1ba6e:	e01f      	b.n	1bab0 <net_buf_alloc_len+0xf0>
		uninit_count = pool->uninit_count--;
   1ba70:	8b68      	ldrh	r0, [r5, #26]
   1ba72:	1e43      	subs	r3, r0, #1
   1ba74:	836b      	strh	r3, [r5, #26]
   1ba76:	f38a 8811 	msr	BASEPRI, sl
   1ba7a:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   1ba7e:	8b2c      	ldrh	r4, [r5, #24]
   1ba80:	1a24      	subs	r4, r4, r0
   1ba82:	6a68      	ldr	r0, [r5, #36]	; 0x24
   1ba84:	2318      	movs	r3, #24
   1ba86:	fb03 0404 	mla	r4, r3, r4, r0
	return pool - _net_buf_pool_list;
   1ba8a:	4811      	ldr	r0, [pc, #68]	; (1bad0 <net_buf_alloc_len+0x110>)
   1ba8c:	4b11      	ldr	r3, [pc, #68]	; (1bad4 <net_buf_alloc_len+0x114>)
   1ba8e:	1a2d      	subs	r5, r5, r0
   1ba90:	10ed      	asrs	r5, r5, #3
   1ba92:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   1ba94:	71a5      	strb	r5, [r4, #6]
		goto success;
   1ba96:	e7b9      	b.n	1ba0c <net_buf_alloc_len+0x4c>
   1ba98:	f38a 8811 	msr	BASEPRI, sl
   1ba9c:	f3bf 8f6f 	isb	sy
   1baa0:	4632      	mov	r2, r6
   1baa2:	463b      	mov	r3, r7
   1baa4:	4628      	mov	r0, r5
   1baa6:	f001 fadf 	bl	1d068 <z_impl_k_queue_get>
	if (!buf) {
   1baaa:	4604      	mov	r4, r0
   1baac:	2800      	cmp	r0, #0
   1baae:	d1ad      	bne.n	1ba0c <net_buf_alloc_len+0x4c>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	pool->avail_count--;
	__ASSERT_NO_MSG(pool->avail_count >= 0);
#endif
	return buf;
}
   1bab0:	4620      	mov	r0, r4
   1bab2:	b002      	add	sp, #8
   1bab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		buf->__buf = NULL;
   1bab8:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
   1baba:	2300      	movs	r3, #0
	buf->ref   = 1U;
   1babc:	2201      	movs	r2, #1
	buf->frags = NULL;
   1babe:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   1bac0:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   1bac2:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   1bac4:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   1bac6:	6923      	ldr	r3, [r4, #16]
   1bac8:	81e2      	strh	r2, [r4, #14]
   1baca:	60a3      	str	r3, [r4, #8]
	return buf;
   1bacc:	e7f0      	b.n	1bab0 <net_buf_alloc_len+0xf0>
   1bace:	bf00      	nop
   1bad0:	200008d8 	.word	0x200008d8
   1bad4:	cccccccd 	.word	0xcccccccd

0001bad8 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1bad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1badc:	4d17      	ldr	r5, [pc, #92]	; (1bb3c <net_buf_unref+0x64>)
   1bade:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   1bae0:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   1bae2:	2728      	movs	r7, #40	; 0x28
	while (buf) {
   1bae4:	b90c      	cbnz	r4, 1baea <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1bae6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   1baea:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   1baec:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   1baf0:	3b01      	subs	r3, #1
   1baf2:	b2db      	uxtb	r3, r3
   1baf4:	7123      	strb	r3, [r4, #4]
   1baf6:	2b00      	cmp	r3, #0
   1baf8:	d1f5      	bne.n	1bae6 <net_buf_unref+0xe>
		if (buf->__buf) {
   1bafa:	6921      	ldr	r1, [r4, #16]
   1bafc:	b159      	cbz	r1, 1bb16 <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1bafe:	7963      	ldrb	r3, [r4, #5]
   1bb00:	079b      	lsls	r3, r3, #30
   1bb02:	d407      	bmi.n	1bb14 <net_buf_unref+0x3c>
	pool->alloc->cb->unref(buf, data);
   1bb04:	79a3      	ldrb	r3, [r4, #6]
   1bb06:	fb07 5303 	mla	r3, r7, r3, r5
   1bb0a:	4620      	mov	r0, r4
   1bb0c:	6a1b      	ldr	r3, [r3, #32]
   1bb0e:	681b      	ldr	r3, [r3, #0]
   1bb10:	689b      	ldr	r3, [r3, #8]
   1bb12:	4798      	blx	r3
			buf->__buf = NULL;
   1bb14:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
   1bb16:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   1bb18:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
   1bb1a:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   1bb1e:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   1bb20:	69db      	ldr	r3, [r3, #28]
   1bb22:	b11b      	cbz	r3, 1bb2c <net_buf_unref+0x54>
			pool->destroy(buf);
   1bb24:	4620      	mov	r0, r4
   1bb26:	4798      	blx	r3
{
   1bb28:	4644      	mov	r4, r8
   1bb2a:	e7db      	b.n	1bae4 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   1bb2c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1bb30:	4621      	mov	r1, r4
   1bb32:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
   1bb36:	f007 f8ea 	bl	22d0e <k_queue_prepend>
}
   1bb3a:	e7f5      	b.n	1bb28 <net_buf_unref+0x50>
   1bb3c:	200008d8 	.word	0x200008d8

0001bb40 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(struct device *port)
{
   1bb40:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   1bb42:	4b09      	ldr	r3, [pc, #36]	; (1bb68 <gpio_nrfx_init+0x28>)
   1bb44:	781a      	ldrb	r2, [r3, #0]
   1bb46:	b96a      	cbnz	r2, 1bb64 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   1bb48:	2101      	movs	r1, #1
   1bb4a:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1bb4c:	2006      	movs	r0, #6
   1bb4e:	2105      	movs	r1, #5
   1bb50:	f7eb fca8 	bl	74a4 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   1bb54:	2006      	movs	r0, #6
   1bb56:	f7eb fc73 	bl	7440 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1bb5a:	4b04      	ldr	r3, [pc, #16]	; (1bb6c <gpio_nrfx_init+0x2c>)
   1bb5c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1bb60:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   1bb64:	2000      	movs	r0, #0
   1bb66:	bd08      	pop	{r3, pc}
   1bb68:	2000a86f 	.word	0x2000a86f
   1bb6c:	40006000 	.word	0x40006000

0001bb70 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1bb70:	4b2d      	ldr	r3, [pc, #180]	; (1bc28 <gpio_nrfx_config+0xb8>)
{
   1bb72:	b5f0      	push	{r4, r5, r6, r7, lr}
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1bb74:	6846      	ldr	r6, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1bb76:	482d      	ldr	r0, [pc, #180]	; (1bc2c <gpio_nrfx_config+0xbc>)
   1bb78:	4013      	ands	r3, r2
   1bb7a:	4283      	cmp	r3, r0
   1bb7c:	d045      	beq.n	1bc0a <gpio_nrfx_config+0x9a>
   1bb7e:	d80d      	bhi.n	1bb9c <gpio_nrfx_config+0x2c>
   1bb80:	2b06      	cmp	r3, #6
   1bb82:	d015      	beq.n	1bbb0 <gpio_nrfx_config+0x40>
   1bb84:	d805      	bhi.n	1bb92 <gpio_nrfx_config+0x22>
   1bb86:	b19b      	cbz	r3, 1bbb0 <gpio_nrfx_config+0x40>
   1bb88:	2b02      	cmp	r3, #2
   1bb8a:	d040      	beq.n	1bc0e <gpio_nrfx_config+0x9e>
   1bb8c:	f06f 0015 	mvn.w	r0, #21
   1bb90:	e03a      	b.n	1bc08 <gpio_nrfx_config+0x98>
   1bb92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1bb96:	d1f9      	bne.n	1bb8c <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
   1bb98:	2301      	movs	r3, #1
   1bb9a:	e009      	b.n	1bbb0 <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1bb9c:	4824      	ldr	r0, [pc, #144]	; (1bc30 <gpio_nrfx_config+0xc0>)
   1bb9e:	4283      	cmp	r3, r0
   1bba0:	d037      	beq.n	1bc12 <gpio_nrfx_config+0xa2>
   1bba2:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   1bba6:	d036      	beq.n	1bc16 <gpio_nrfx_config+0xa6>
   1bba8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   1bbac:	d1ee      	bne.n	1bb8c <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
   1bbae:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
   1bbb0:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_NOPULL;
   1bbb2:	bf54      	ite	pl
   1bbb4:	f3c2 1540 	ubfxpl	r5, r2, #5, #1
		pull = NRF_GPIO_PIN_PULLUP;
   1bbb8:	2503      	movmi	r5, #3
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   1bbba:	f482 7480 	eor.w	r4, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
   1bbbe:	0597      	lsls	r7, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
   1bbc0:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   1bbc4:	f3c4 2400 	ubfx	r4, r4, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   1bbc8:	d507      	bpl.n	1bbda <gpio_nrfx_config+0x6a>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   1bbca:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1bbce:	6877      	ldr	r7, [r6, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   1bbd0:	d023      	beq.n	1bc1a <gpio_nrfx_config+0xaa>
			nrf_gpio_port_out_set(reg, BIT(pin));
   1bbd2:	2201      	movs	r2, #1
   1bbd4:	408a      	lsls	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   1bbd6:	f8c7 2508 	str.w	r2, [r7, #1288]	; 0x508
	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
   1bbda:	7a32      	ldrb	r2, [r6, #8]
   1bbdc:	f001 011f 	and.w	r1, r1, #31
   1bbe0:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
    if (*p_pin < P0_PIN_NUM)
   1bbe4:	291f      	cmp	r1, #31
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   1bbe6:	ea40 0244 	orr.w	r2, r0, r4, lsl #1
        *p_pin = *p_pin & 0x1F;
   1bbea:	bfc6      	itte	gt
   1bbec:	f001 011f 	andgt.w	r1, r1, #31
        return NRF_P1;
   1bbf0:	4e10      	ldrgt	r6, [pc, #64]	; (1bc34 <gpio_nrfx_config+0xc4>)
        return NRF_P0;
   1bbf2:	f04f 46a0 	movle.w	r6, #1342177280	; 0x50000000
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   1bbf6:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1bbfa:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   1bbfe:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1bc02:	f846 3021 	str.w	r3, [r6, r1, lsl #2]
	return 0;
   1bc06:	2000      	movs	r0, #0
}
   1bc08:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
   1bc0a:	2307      	movs	r3, #7
   1bc0c:	e7d0      	b.n	1bbb0 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
   1bc0e:	2304      	movs	r3, #4
   1bc10:	e7ce      	b.n	1bbb0 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
   1bc12:	2305      	movs	r3, #5
   1bc14:	e7cc      	b.n	1bbb0 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
   1bc16:	2303      	movs	r3, #3
   1bc18:	e7ca      	b.n	1bbb0 <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   1bc1a:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   1bc1c:	bf42      	ittt	mi
   1bc1e:	2201      	movmi	r2, #1
   1bc20:	408a      	lslmi	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   1bc22:	f8c7 250c 	strmi.w	r2, [r7, #1292]	; 0x50c
}
   1bc26:	e7d8      	b.n	1bbda <gpio_nrfx_config+0x6a>
   1bc28:	00f00006 	.word	0x00f00006
   1bc2c:	00100006 	.word	0x00100006
   1bc30:	00400002 	.word	0x00400002
   1bc34:	50000300 	.word	0x50000300

0001bc38 <nrf_gpio_cfg_sense_set>:
    if (*p_pin < P0_PIN_NUM)
   1bc38:	281f      	cmp	r0, #31
        return NRF_P1;
   1bc3a:	bf8a      	itet	hi
   1bc3c:	4b07      	ldrhi	r3, [pc, #28]	; (1bc5c <nrf_gpio_cfg_sense_set+0x24>)
        return NRF_P0;
   1bc3e:	f04f 43a0 	movls.w	r3, #1342177280	; 0x50000000
        *p_pin = *p_pin & 0x1F;
   1bc42:	f000 001f 	andhi.w	r0, r0, #31
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   1bc46:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   1bc4a:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
   1bc4e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   1bc52:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   1bc56:	f8c0 1700 	str.w	r1, [r0, #1792]	; 0x700
}
   1bc5a:	4770      	bx	lr
   1bc5c:	50000300 	.word	0x50000300

0001bc60 <gpio_nrfx_pin_interrupt_configure>:
{
   1bc60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1bc62:	460c      	mov	r4, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1bc64:	6841      	ldr	r1, [r0, #4]
	struct gpio_nrfx_data *data = get_port_data(port);
   1bc66:	68c6      	ldr	r6, [r0, #12]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1bc68:	7a08      	ldrb	r0, [r1, #8]
   1bc6a:	f004 051f 	and.w	r5, r4, #31
	if ((mode == GPIO_INT_MODE_EDGE) &&
   1bc6e:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   1bc72:	ea45 1540 	orr.w	r5, r5, r0, lsl #5
   1bc76:	d110      	bne.n	1bc9a <gpio_nrfx_pin_interrupt_configure+0x3a>
    if (*p_pin < P0_PIN_NUM)
   1bc78:	2d1f      	cmp	r5, #31
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1bc7a:	4629      	mov	r1, r5
        *p_pin = *p_pin & 0x1F;
   1bc7c:	bfc6      	itte	gt
   1bc7e:	f005 011f 	andgt.w	r1, r5, #31
        return NRF_P1;
   1bc82:	486d      	ldrgt	r0, [pc, #436]	; (1be38 <gpio_nrfx_pin_interrupt_configure+0x1d8>)
        return NRF_P0;
   1bc84:	f04f 40a0 	movle.w	r0, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1bc88:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
   1bc8c:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
	if ((mode == GPIO_INT_MODE_EDGE) &&
   1bc90:	07cf      	lsls	r7, r1, #31
   1bc92:	d507      	bpl.n	1bca4 <gpio_nrfx_pin_interrupt_configure+0x44>
		return -ENOTSUP;
   1bc94:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1bc98:	e0c0      	b.n	1be1c <gpio_nrfx_pin_interrupt_configure+0x1bc>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   1bc9a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   1bc9e:	68f1      	ldr	r1, [r6, #12]
   1bca0:	f000 80ad 	beq.w	1bdfe <gpio_nrfx_pin_interrupt_configure+0x19e>
   1bca4:	68f0      	ldr	r0, [r6, #12]
   1bca6:	2101      	movs	r1, #1
   1bca8:	40a1      	lsls	r1, r4
   1bcaa:	4301      	orrs	r1, r0
   1bcac:	6970      	ldr	r0, [r6, #20]
   1bcae:	60f1      	str	r1, [r6, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   1bcb0:	2101      	movs	r1, #1
   1bcb2:	40a1      	lsls	r1, r4
   1bcb4:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   1bcb8:	69b2      	ldr	r2, [r6, #24]
   1bcba:	bf0c      	ite	eq
   1bcbc:	4308      	orreq	r0, r1
   1bcbe:	4388      	bicne	r0, r1
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   1bcc0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   1bcc4:	bf0c      	ite	eq
   1bcc6:	430a      	orreq	r2, r1
   1bcc8:	438a      	bicne	r2, r1
   1bcca:	61b2      	str	r2, [r6, #24]
   1bccc:	6932      	ldr	r2, [r6, #16]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   1bcce:	6170      	str	r0, [r6, #20]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   1bcd0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
   1bcd4:	bf0c      	ite	eq
   1bcd6:	4311      	orreq	r1, r2
   1bcd8:	ea22 0101 	bicne.w	r1, r2, r1
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   1bcdc:	4a57      	ldr	r2, [pc, #348]	; (1be3c <gpio_nrfx_pin_interrupt_configure+0x1dc>)
   1bcde:	6131      	str	r1, [r6, #16]
   1bce0:	f8d2 1304 	ldr.w	r1, [r2, #772]	; 0x304
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1bce4:	2300      	movs	r3, #0
   1bce6:	b2c9      	uxtb	r1, r1
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1bce8:	f503 70a2 	add.w	r0, r3, #324	; 0x144
   1bcec:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
   1bcf0:	f3c0 2005 	ubfx	r0, r0, #8, #6
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   1bcf4:	4285      	cmp	r5, r0
   1bcf6:	f040 8087 	bne.w	1be08 <gpio_nrfx_pin_interrupt_configure+0x1a8>
		    && (intenset & BIT(i))) {
   1bcfa:	fa21 f003 	lsr.w	r0, r1, r3
   1bcfe:	07c0      	lsls	r0, r0, #31
   1bd00:	f140 8082 	bpl.w	1be08 <gpio_nrfx_pin_interrupt_configure+0x1a8>
 *
 * @return N/A
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   1bd04:	2101      	movs	r1, #1
   1bd06:	4099      	lsls	r1, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1bd08:	484d      	ldr	r0, [pc, #308]	; (1be40 <gpio_nrfx_pin_interrupt_configure+0x1e0>)
   1bd0a:	f3bf 8f5b 	dmb	ish

	if (val) {
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1bd0e:	43cf      	mvns	r7, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1bd10:	e850 cf00 	ldrex	ip, [r0]
   1bd14:	ea0c 0c07 	and.w	ip, ip, r7
   1bd18:	e840 ce00 	strex	lr, ip, [r0]
   1bd1c:	f1be 0f00 	cmp.w	lr, #0
   1bd20:	d1f6      	bne.n	1bd10 <gpio_nrfx_pin_interrupt_configure+0xb0>
   1bd22:	f3bf 8f5b 	dmb	ish
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   1bd26:	009b      	lsls	r3, r3, #2
   1bd28:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1bd2c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1bd30:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
   1bd34:	f020 0001 	bic.w	r0, r0, #1
   1bd38:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
    p_reg->INTENCLR = mask;
   1bd3c:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   1bd40:	2100      	movs	r1, #0
   1bd42:	4628      	mov	r0, r5
   1bd44:	f7ff ff78 	bl	1bc38 <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
   1bd48:	68f3      	ldr	r3, [r6, #12]
   1bd4a:	40e3      	lsrs	r3, r4
   1bd4c:	f013 0301 	ands.w	r3, r3, #1
   1bd50:	d053      	beq.n	1bdfa <gpio_nrfx_pin_interrupt_configure+0x19a>
		if (data->trig_edge & BIT(pin)) {
   1bd52:	6973      	ldr	r3, [r6, #20]
   1bd54:	40e3      	lsrs	r3, r4
   1bd56:	f013 0201 	ands.w	r2, r3, #1
   1bd5a:	d061      	beq.n	1be20 <gpio_nrfx_pin_interrupt_configure+0x1c0>
			if (data->double_edge & BIT(pin)) {
   1bd5c:	69b3      	ldr	r3, [r6, #24]
   1bd5e:	40e3      	lsrs	r3, r4
   1bd60:	07db      	lsls	r3, r3, #31
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   1bd62:	bf5f      	itttt	pl
   1bd64:	6931      	ldrpl	r1, [r6, #16]
   1bd66:	fa21 f404 	lsrpl.w	r4, r1, r4
   1bd6a:	f004 0401 	andpl.w	r4, r4, #1
   1bd6e:	f1c4 0402 	rsbpl	r4, r4, #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1bd72:	4933      	ldr	r1, [pc, #204]	; (1be40 <gpio_nrfx_pin_interrupt_configure+0x1e0>)
   1bd74:	bf54      	ite	pl
   1bd76:	b2e4      	uxtbpl	r4, r4
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   1bd78:	2403      	movmi	r4, #3
   1bd7a:	2200      	movs	r2, #0
		atomic_val_t prev = atomic_or(mask, BIT(channel));
   1bd7c:	2701      	movs	r7, #1
   1bd7e:	fa07 f602 	lsl.w	r6, r7, r2
   1bd82:	f3bf 8f5b 	dmb	ish
   1bd86:	e851 0f00 	ldrex	r0, [r1]
   1bd8a:	ea40 0306 	orr.w	r3, r0, r6
   1bd8e:	e841 3c00 	strex	ip, r3, [r1]
   1bd92:	f1bc 0f00 	cmp.w	ip, #0
   1bd96:	d1f6      	bne.n	1bd86 <gpio_nrfx_pin_interrupt_configure+0x126>
   1bd98:	f3bf 8f5b 	dmb	ish
		if ((prev & BIT(channel)) == 0) {
   1bd9c:	40d0      	lsrs	r0, r2
   1bd9e:	f010 0301 	ands.w	r3, r0, #1
   1bda2:	d136      	bne.n	1be12 <gpio_nrfx_pin_interrupt_configure+0x1b2>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1bda4:	0091      	lsls	r1, r2, #2
   1bda6:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   1bdaa:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
			nrf_gpiote_event_t evt =
   1bdae:	3240      	adds	r2, #64	; 0x40
   1bdb0:	f8d1 0510 	ldr.w	r0, [r1, #1296]	; 0x510
   1bdb4:	f420 304f 	bic.w	r0, r0, #211968	; 0x33c00
   1bdb8:	f420 7040 	bic.w	r0, r0, #768	; 0x300
   1bdbc:	0092      	lsls	r2, r2, #2
   1bdbe:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1bdc2:	022d      	lsls	r5, r5, #8
    return ((uint32_t)p_reg + event);
   1bdc4:	b292      	uxth	r2, r2
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1bdc6:	f8d1 0510 	ldr.w	r0, [r1, #1296]	; 0x510
   1bdca:	f405 557c 	and.w	r5, r5, #16128	; 0x3f00
    return ((uint32_t)p_reg + event);
   1bdce:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1bdd2:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1bdd6:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
   1bdda:	4305      	orrs	r5, r0
   1bddc:	f8c1 5510 	str.w	r5, [r1, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1bde0:	6013      	str	r3, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event));
   1bde2:	6812      	ldr	r2, [r2, #0]
   1bde4:	9201      	str	r2, [sp, #4]
    (void)dummy;
   1bde6:	9a01      	ldr	r2, [sp, #4]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   1bde8:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
   1bdec:	f042 0201 	orr.w	r2, r2, #1
   1bdf0:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510
    p_reg->INTENSET = mask;
   1bdf4:	4a11      	ldr	r2, [pc, #68]	; (1be3c <gpio_nrfx_pin_interrupt_configure+0x1dc>)
   1bdf6:	f8c2 6304 	str.w	r6, [r2, #772]	; 0x304
	int res = 0;
   1bdfa:	4618      	mov	r0, r3
   1bdfc:	e00e      	b.n	1be1c <gpio_nrfx_pin_interrupt_configure+0x1bc>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   1bdfe:	2001      	movs	r0, #1
   1be00:	40a0      	lsls	r0, r4
   1be02:	ea21 0100 	bic.w	r1, r1, r0
   1be06:	e751      	b.n	1bcac <gpio_nrfx_pin_interrupt_configure+0x4c>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1be08:	3301      	adds	r3, #1
   1be0a:	2b08      	cmp	r3, #8
   1be0c:	f47f af6c 	bne.w	1bce8 <gpio_nrfx_pin_interrupt_configure+0x88>
   1be10:	e796      	b.n	1bd40 <gpio_nrfx_pin_interrupt_configure+0xe0>
	for (uint8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
   1be12:	3201      	adds	r2, #1
   1be14:	2a08      	cmp	r2, #8
   1be16:	d1b2      	bne.n	1bd7e <gpio_nrfx_pin_interrupt_configure+0x11e>
	return -ENODEV;
   1be18:	f06f 0012 	mvn.w	r0, #18
}
   1be1c:	b003      	add	sp, #12
   1be1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1be20:	6931      	ldr	r1, [r6, #16]
   1be22:	40e1      	lsrs	r1, r4
   1be24:	f001 0101 	and.w	r1, r1, #1
   1be28:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   1be2c:	4628      	mov	r0, r5
   1be2e:	b2c9      	uxtb	r1, r1
   1be30:	f7ff ff02 	bl	1bc38 <nrf_gpio_cfg_sense_set>
	int res = 0;
   1be34:	4610      	mov	r0, r2
   1be36:	e7f1      	b.n	1be1c <gpio_nrfx_pin_interrupt_configure+0x1bc>
   1be38:	50000300 	.word	0x50000300
   1be3c:	40006000 	.word	0x40006000
   1be40:	200098c0 	.word	0x200098c0

0001be44 <gpiote_event_handler>:
{
   1be44:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   1be46:	2600      	movs	r6, #0
{
   1be48:	b085      	sub	sp, #20
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   1be4a:	e9cd 6602 	strd	r6, r6, [sp, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1be4e:	4d2a      	ldr	r5, [pc, #168]	; (1bef8 <gpiote_event_handler+0xb4>)
   1be50:	682c      	ldr	r4, [r5, #0]
	if (port_event) {
   1be52:	b15c      	cbz	r4, 1be6c <gpiote_event_handler+0x28>
			check_level_trigger_pins(DEVICE_GET(gpio_nrfx_p0));
   1be54:	4829      	ldr	r0, [pc, #164]	; (1befc <gpiote_event_handler+0xb8>)
   1be56:	f006 fc90 	bl	2277a <check_level_trigger_pins>
		fired_triggers[0] =
   1be5a:	9002      	str	r0, [sp, #8]
			check_level_trigger_pins(DEVICE_GET(gpio_nrfx_p1));
   1be5c:	4828      	ldr	r0, [pc, #160]	; (1bf00 <gpiote_event_handler+0xbc>)
   1be5e:	f006 fc8c 	bl	2277a <check_level_trigger_pins>
		fired_triggers[1] =
   1be62:	9003      	str	r0, [sp, #12]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1be64:	602e      	str	r6, [r5, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event));
   1be66:	682b      	ldr	r3, [r5, #0]
   1be68:	9300      	str	r3, [sp, #0]
    (void)dummy;
   1be6a:	9b00      	ldr	r3, [sp, #0]
    return p_reg->INTENSET & mask;
   1be6c:	4d25      	ldr	r5, [pc, #148]	; (1bf04 <gpiote_event_handler+0xc0>)
{
   1be6e:	2200      	movs	r2, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   1be70:	2601      	movs	r6, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1be72:	4694      	mov	ip, r2
    return p_reg->INTENSET & mask;
   1be74:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
   1be78:	fa06 f102 	lsl.w	r1, r6, r2
   1be7c:	4219      	tst	r1, r3
   1be7e:	d01d      	beq.n	1bebc <gpiote_event_handler+0x78>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1be80:	0091      	lsls	r1, r2, #2
   1be82:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   1be86:	f501 41c2 	add.w	r1, r1, #24832	; 0x6100
   1be8a:	680b      	ldr	r3, [r1, #0]
   1be8c:	b1b3      	cbz	r3, 1bebc <gpiote_event_handler+0x78>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1be8e:	f502 73a2 	add.w	r3, r2, #324	; 0x144
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   1be92:	af04      	add	r7, sp, #16
   1be94:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1be98:	f8c1 c000 	str.w	ip, [r1]
   1be9c:	f3c3 3040 	ubfx	r0, r3, #13, #1
   1bea0:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   1bea4:	f3c3 2304 	ubfx	r3, r3, #8, #5
   1bea8:	f850 7c08 	ldr.w	r7, [r0, #-8]
   1beac:	fa06 f303 	lsl.w	r3, r6, r3
   1beb0:	433b      	orrs	r3, r7
   1beb2:	f840 3c08 	str.w	r3, [r0, #-8]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event));
   1beb6:	680b      	ldr	r3, [r1, #0]
   1beb8:	9301      	str	r3, [sp, #4]
    (void)dummy;
   1beba:	9b01      	ldr	r3, [sp, #4]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1bebc:	3201      	adds	r2, #1
   1bebe:	2a08      	cmp	r2, #8
   1bec0:	d1d8      	bne.n	1be74 <gpiote_event_handler+0x30>
	if (fired_triggers[0]) {
   1bec2:	9a02      	ldr	r2, [sp, #8]
   1bec4:	b122      	cbz	r2, 1bed0 <gpiote_event_handler+0x8c>
	gpio_fire_callbacks(list, port, pins);
   1bec6:	490d      	ldr	r1, [pc, #52]	; (1befc <gpiote_event_handler+0xb8>)
	sys_slist_t *list = &data->callbacks;
   1bec8:	68c8      	ldr	r0, [r1, #12]
	gpio_fire_callbacks(list, port, pins);
   1beca:	3004      	adds	r0, #4
   1becc:	f006 fbeb 	bl	226a6 <gpio_fire_callbacks>
	if (fired_triggers[1]) {
   1bed0:	9a03      	ldr	r2, [sp, #12]
   1bed2:	b12a      	cbz	r2, 1bee0 <gpiote_event_handler+0x9c>
	gpio_fire_callbacks(list, port, pins);
   1bed4:	4909      	ldr	r1, [pc, #36]	; (1befc <gpiote_event_handler+0xb8>)
	sys_slist_t *list = &data->callbacks;
   1bed6:	69c8      	ldr	r0, [r1, #28]
	gpio_fire_callbacks(list, port, pins);
   1bed8:	3110      	adds	r1, #16
   1beda:	3004      	adds	r0, #4
   1bedc:	f006 fbe3 	bl	226a6 <gpio_fire_callbacks>
	if (port_event) {
   1bee0:	b144      	cbz	r4, 1bef4 <gpiote_event_handler+0xb0>
		cfg_level_pins(DEVICE_GET(gpio_nrfx_p0));
   1bee2:	4806      	ldr	r0, [pc, #24]	; (1befc <gpiote_event_handler+0xb8>)
   1bee4:	f006 fc6d 	bl	227c2 <cfg_level_pins>
		cfg_level_pins(DEVICE_GET(gpio_nrfx_p1));
   1bee8:	4805      	ldr	r0, [pc, #20]	; (1bf00 <gpiote_event_handler+0xbc>)
}
   1beea:	b005      	add	sp, #20
   1beec:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		cfg_level_pins(DEVICE_GET(gpio_nrfx_p1));
   1bef0:	f006 bc67 	b.w	227c2 <cfg_level_pins>
}
   1bef4:	b005      	add	sp, #20
   1bef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1bef8:	4000617c 	.word	0x4000617c
   1befc:	20000798 	.word	0x20000798
   1bf00:	200007a8 	.word	0x200007a8
   1bf04:	40006000 	.word	0x40006000

0001bf08 <event_txdrdy_check>:
#endif
}

NRF_STATIC_INLINE bool nrf_uart_event_check(NRF_UART_Type const * p_reg, nrf_uart_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1bf08:	4b05      	ldr	r3, [pc, #20]	; (1bf20 <event_txdrdy_check+0x18>)
   1bf0a:	681b      	ldr	r3, [r3, #0]

static bool event_txdrdy_check(void)
{
	return (nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_TXDRDY)
#ifdef CONFIG_UART_0_INTERRUPT_DRIVEN
		|| uart_sw_event_txdrdy
   1bf0c:	b92b      	cbnz	r3, 1bf1a <event_txdrdy_check+0x12>
   1bf0e:	4b05      	ldr	r3, [pc, #20]	; (1bf24 <event_txdrdy_check+0x1c>)
   1bf10:	7818      	ldrb	r0, [r3, #0]
   1bf12:	3800      	subs	r0, #0
   1bf14:	bf18      	it	ne
   1bf16:	2001      	movne	r0, #1
   1bf18:	4770      	bx	lr
   1bf1a:	2001      	movs	r0, #1
#endif
	       );
}
   1bf1c:	4770      	bx	lr
   1bf1e:	bf00      	nop
   1bf20:	4000211c 	.word	0x4000211c
   1bf24:	2000a870 	.word	0x2000a870

0001bf28 <uart_nrfx_err_check>:
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_uart_errorsrc_get_and_clear(NRF_UART_Type * p_reg)
{
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1bf28:	4b02      	ldr	r3, [pc, #8]	; (1bf34 <uart_nrfx_err_check+0xc>)
   1bf2a:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1bf2e:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
/** Console I/O function */
static int uart_nrfx_err_check(struct device *dev)
{
	/* register bitfields maps to the defines in uart.h */
	return nrf_uart_errorsrc_get_and_clear(uart0_addr);
}
   1bf32:	4770      	bx	lr
   1bf34:	40002000 	.word	0x40002000

0001bf38 <uart_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
   1bf38:	4b02      	ldr	r3, [pc, #8]	; (1bf44 <uart_nrfx_irq_rx_enable+0xc>)
   1bf3a:	2204      	movs	r2, #4
   1bf3c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

/** Interrupt driven receiver enabling function */
static void uart_nrfx_irq_rx_enable(struct device *dev)
{
	nrf_uart_int_enable(uart0_addr, NRF_UART_INT_MASK_RXDRDY);
}
   1bf40:	4770      	bx	lr
   1bf42:	bf00      	nop
   1bf44:	40002000 	.word	0x40002000

0001bf48 <uart_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
   1bf48:	4b02      	ldr	r3, [pc, #8]	; (1bf54 <uart_nrfx_irq_rx_disable+0xc>)
   1bf4a:	2204      	movs	r2, #4
   1bf4c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

/** Interrupt driven receiver disabling function */
static void uart_nrfx_irq_rx_disable(struct device *dev)
{
	nrf_uart_int_disable(uart0_addr, NRF_UART_INT_MASK_RXDRDY);
}
   1bf50:	4770      	bx	lr
   1bf52:	bf00      	nop
   1bf54:	40002000 	.word	0x40002000

0001bf58 <uart_nrfx_irq_rx_ready>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1bf58:	4b02      	ldr	r3, [pc, #8]	; (1bf64 <uart_nrfx_irq_rx_ready+0xc>)
   1bf5a:	6818      	ldr	r0, [r3, #0]

/** Interrupt driven receiver ready function */
static int uart_nrfx_irq_rx_ready(struct device *dev)
{
	return nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_RXDRDY);
}
   1bf5c:	3800      	subs	r0, #0
   1bf5e:	bf18      	it	ne
   1bf60:	2001      	movne	r0, #1
   1bf62:	4770      	bx	lr
   1bf64:	40002108 	.word	0x40002108

0001bf68 <uart_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
   1bf68:	4b02      	ldr	r3, [pc, #8]	; (1bf74 <uart_nrfx_irq_err_enable+0xc>)
   1bf6a:	f44f 7200 	mov.w	r2, #512	; 0x200
   1bf6e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

/** Interrupt driven error enabling function */
static void uart_nrfx_irq_err_enable(struct device *dev)
{
	nrf_uart_int_enable(uart0_addr, NRF_UART_INT_MASK_ERROR);
}
   1bf72:	4770      	bx	lr
   1bf74:	40002000 	.word	0x40002000

0001bf78 <uart_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
   1bf78:	4b02      	ldr	r3, [pc, #8]	; (1bf84 <uart_nrfx_irq_err_disable+0xc>)
   1bf7a:	f44f 7200 	mov.w	r2, #512	; 0x200
   1bf7e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

/** Interrupt driven error disabling function */
static void uart_nrfx_irq_err_disable(struct device *dev)
{
	nrf_uart_int_disable(uart0_addr, NRF_UART_INT_MASK_ERROR);
}
   1bf82:	4770      	bx	lr
   1bf84:	40002000 	.word	0x40002000

0001bf88 <uart_nrfx_irq_callback_set>:
static void uart_nrfx_irq_callback_set(struct device *dev,
				       uart_irq_callback_user_data_t cb,
				       void *cb_data)
{
	(void)dev;
	irq_callback = cb;
   1bf88:	4b02      	ldr	r3, [pc, #8]	; (1bf94 <uart_nrfx_irq_callback_set+0xc>)
   1bf8a:	6019      	str	r1, [r3, #0]
	irq_cb_data = cb_data;
   1bf8c:	4b02      	ldr	r3, [pc, #8]	; (1bf98 <uart_nrfx_irq_callback_set+0x10>)
   1bf8e:	601a      	str	r2, [r3, #0]
}
   1bf90:	4770      	bx	lr
   1bf92:	bf00      	nop
   1bf94:	200098c4 	.word	0x200098c4
   1bf98:	200098c8 	.word	0x200098c8

0001bf9c <uart_nrfx_irq_tx_disable>:
   1bf9c:	4b03      	ldr	r3, [pc, #12]	; (1bfac <uart_nrfx_irq_tx_disable+0x10>)
   1bf9e:	2280      	movs	r2, #128	; 0x80
   1bfa0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->TXD = txd;
}

NRF_STATIC_INLINE void nrf_uart_task_trigger(NRF_UART_Type * p_reg, nrf_uart_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1bfa4:	2201      	movs	r2, #1
   1bfa6:	60da      	str	r2, [r3, #12]
	device_busy_clear(dev);
   1bfa8:	f006 bd6b 	b.w	22a82 <device_busy_clear>
   1bfac:	40002000 	.word	0x40002000

0001bfb0 <uart_nrfx_irq_tx_enable>:
{
   1bfb0:	b508      	push	{r3, lr}
	device_busy_set(dev);
   1bfb2:	f006 fd65 	bl	22a80 <device_busy_set>
   1bfb6:	4b0d      	ldr	r3, [pc, #52]	; (1bfec <uart_nrfx_irq_tx_enable+0x3c>)
   1bfb8:	2201      	movs	r2, #1
   1bfba:	601a      	str	r2, [r3, #0]
    p_reg->INTENSET = mask;
   1bfbc:	2280      	movs	r2, #128	; 0x80
   1bfbe:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
	__asm__ volatile(
   1bfc2:	f04f 0220 	mov.w	r2, #32
   1bfc6:	f3ef 8311 	mrs	r3, BASEPRI
   1bfca:	f382 8811 	msr	BASEPRI, r2
   1bfce:	f3bf 8f6f 	isb	sy
	if (uart_sw_event_txdrdy) {
   1bfd2:	4a07      	ldr	r2, [pc, #28]	; (1bff0 <uart_nrfx_irq_tx_enable+0x40>)
   1bfd4:	7812      	ldrb	r2, [r2, #0]
   1bfd6:	b11a      	cbz	r2, 1bfe0 <uart_nrfx_irq_tx_enable+0x30>
   1bfd8:	4a06      	ldr	r2, [pc, #24]	; (1bff4 <uart_nrfx_irq_tx_enable+0x44>)
   1bfda:	2104      	movs	r1, #4
   1bfdc:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
	__asm__ volatile(
   1bfe0:	f383 8811 	msr	BASEPRI, r3
   1bfe4:	f3bf 8f6f 	isb	sy
}
   1bfe8:	bd08      	pop	{r3, pc}
   1bfea:	bf00      	nop
   1bfec:	40002008 	.word	0x40002008
   1bff0:	2000a870 	.word	0x2000a870
   1bff4:	e000e100 	.word	0xe000e100

0001bff8 <uart_nrfx_irq_is_pending>:
{
   1bff8:	b508      	push	{r3, lr}
    return p_reg->INTENSET & mask;
   1bffa:	4b0c      	ldr	r3, [pc, #48]	; (1c02c <uart_nrfx_irq_is_pending+0x34>)
   1bffc:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
		||
   1c000:	f012 0f80 	tst.w	r2, #128	; 0x80
   1c004:	461a      	mov	r2, r3
   1c006:	d105      	bne.n	1c014 <uart_nrfx_irq_is_pending+0x1c>
   1c008:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
   1c00c:	f010 0004 	ands.w	r0, r0, #4
   1c010:	d106      	bne.n	1c020 <uart_nrfx_irq_is_pending+0x28>
}
   1c012:	bd08      	pop	{r3, pc}
		 event_txdrdy_check())
   1c014:	f7ff ff78 	bl	1bf08 <event_txdrdy_check>
					   NRF_UART_INT_MASK_TXDRDY) &&
   1c018:	2800      	cmp	r0, #0
   1c01a:	d0f5      	beq.n	1c008 <uart_nrfx_irq_is_pending+0x10>
		||
   1c01c:	2001      	movs	r0, #1
   1c01e:	e7f8      	b.n	1c012 <uart_nrfx_irq_is_pending+0x1a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c020:	4b03      	ldr	r3, [pc, #12]	; (1c030 <uart_nrfx_irq_is_pending+0x38>)
   1c022:	6818      	ldr	r0, [r3, #0]
					   NRF_UART_INT_MASK_RXDRDY) &&
   1c024:	3800      	subs	r0, #0
   1c026:	bf18      	it	ne
   1c028:	2001      	movne	r0, #1
   1c02a:	e7f2      	b.n	1c012 <uart_nrfx_irq_is_pending+0x1a>
   1c02c:	40002000 	.word	0x40002000
   1c030:	40002108 	.word	0x40002108

0001c034 <uart_nrfx_configure>:
{
   1c034:	b570      	push	{r4, r5, r6, lr}
	switch (cfg->stop_bits) {
   1c036:	794b      	ldrb	r3, [r1, #5]
   1c038:	2b01      	cmp	r3, #1
   1c03a:	d024      	beq.n	1c086 <uart_nrfx_configure+0x52>
   1c03c:	2b03      	cmp	r3, #3
   1c03e:	d11f      	bne.n	1c080 <uart_nrfx_configure+0x4c>
		uart_cfg.stop = NRF_UART_STOP_TWO;
   1c040:	2610      	movs	r6, #16
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1c042:	798b      	ldrb	r3, [r1, #6]
   1c044:	2b03      	cmp	r3, #3
   1c046:	d11b      	bne.n	1c080 <uart_nrfx_configure+0x4c>
	switch (cfg->flow_ctrl) {
   1c048:	79cc      	ldrb	r4, [r1, #7]
   1c04a:	b10c      	cbz	r4, 1c050 <uart_nrfx_configure+0x1c>
   1c04c:	2c01      	cmp	r4, #1
   1c04e:	d117      	bne.n	1c080 <uart_nrfx_configure+0x4c>
	switch (cfg->parity) {
   1c050:	790a      	ldrb	r2, [r1, #4]
   1c052:	b112      	cbz	r2, 1c05a <uart_nrfx_configure+0x26>
   1c054:	2a02      	cmp	r2, #2
   1c056:	d113      	bne.n	1c080 <uart_nrfx_configure+0x4c>
		uart_cfg.parity = NRF_UART_PARITY_INCLUDED;
   1c058:	220e      	movs	r2, #14
	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1c05a:	680b      	ldr	r3, [r1, #0]
	switch (baudrate) {
   1c05c:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
   1c060:	d062      	beq.n	1c128 <uart_nrfx_configure+0xf4>
   1c062:	d82d      	bhi.n	1c0c0 <uart_nrfx_configure+0x8c>
   1c064:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1c068:	d060      	beq.n	1c12c <uart_nrfx_configure+0xf8>
   1c06a:	d816      	bhi.n	1c09a <uart_nrfx_configure+0x66>
   1c06c:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   1c070:	d05e      	beq.n	1c130 <uart_nrfx_configure+0xfc>
   1c072:	d80a      	bhi.n	1c08a <uart_nrfx_configure+0x56>
   1c074:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1c078:	d05d      	beq.n	1c136 <uart_nrfx_configure+0x102>
   1c07a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   1c07e:	d05d      	beq.n	1c13c <uart_nrfx_configure+0x108>
   1c080:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1c084:	e04f      	b.n	1c126 <uart_nrfx_configure+0xf2>
	switch (cfg->stop_bits) {
   1c086:	2600      	movs	r6, #0
   1c088:	e7db      	b.n	1c042 <uart_nrfx_configure+0xe>
	switch (baudrate) {
   1c08a:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1c08e:	d058      	beq.n	1c142 <uart_nrfx_configure+0x10e>
   1c090:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   1c094:	d1f4      	bne.n	1c080 <uart_nrfx_configure+0x4c>
		nrf_baudrate = NRF_UART_BAUDRATE_4800;
   1c096:	4b35      	ldr	r3, [pc, #212]	; (1c16c <uart_nrfx_configure+0x138>)
   1c098:	e039      	b.n	1c10e <uart_nrfx_configure+0xda>
	switch (baudrate) {
   1c09a:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   1c09e:	d053      	beq.n	1c148 <uart_nrfx_configure+0x114>
   1c0a0:	d807      	bhi.n	1c0b2 <uart_nrfx_configure+0x7e>
   1c0a2:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   1c0a6:	d051      	beq.n	1c14c <uart_nrfx_configure+0x118>
   1c0a8:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1c0ac:	d1e8      	bne.n	1c080 <uart_nrfx_configure+0x4c>
		nrf_baudrate = NRF_UART_BAUDRATE_19200;
   1c0ae:	4b30      	ldr	r3, [pc, #192]	; (1c170 <uart_nrfx_configure+0x13c>)
   1c0b0:	e02d      	b.n	1c10e <uart_nrfx_configure+0xda>
	switch (baudrate) {
   1c0b2:	f647 2512 	movw	r5, #31250	; 0x7a12
   1c0b6:	42ab      	cmp	r3, r5
   1c0b8:	d1e2      	bne.n	1c080 <uart_nrfx_configure+0x4c>
		nrf_baudrate = NRF_UART_BAUDRATE_31250;
   1c0ba:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1c0be:	e026      	b.n	1c10e <uart_nrfx_configure+0xda>
	switch (baudrate) {
   1c0c0:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   1c0c4:	d045      	beq.n	1c152 <uart_nrfx_configure+0x11e>
   1c0c6:	d811      	bhi.n	1c0ec <uart_nrfx_configure+0xb8>
   1c0c8:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1c0cc:	d043      	beq.n	1c156 <uart_nrfx_configure+0x122>
   1c0ce:	d808      	bhi.n	1c0e2 <uart_nrfx_configure+0xae>
   1c0d0:	f64d 25c0 	movw	r5, #56000	; 0xdac0
   1c0d4:	42ab      	cmp	r3, r5
   1c0d6:	d040      	beq.n	1c15a <uart_nrfx_configure+0x126>
   1c0d8:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1c0dc:	d1d0      	bne.n	1c080 <uart_nrfx_configure+0x4c>
		nrf_baudrate = NRF_UART_BAUDRATE_57600;
   1c0de:	4b25      	ldr	r3, [pc, #148]	; (1c174 <uart_nrfx_configure+0x140>)
   1c0e0:	e015      	b.n	1c10e <uart_nrfx_configure+0xda>
	switch (baudrate) {
   1c0e2:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   1c0e6:	d1cb      	bne.n	1c080 <uart_nrfx_configure+0x4c>
		nrf_baudrate = NRF_UART_BAUDRATE_115200;
   1c0e8:	4b23      	ldr	r3, [pc, #140]	; (1c178 <uart_nrfx_configure+0x144>)
   1c0ea:	e010      	b.n	1c10e <uart_nrfx_configure+0xda>
	switch (baudrate) {
   1c0ec:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   1c0f0:	d036      	beq.n	1c160 <uart_nrfx_configure+0x12c>
   1c0f2:	d807      	bhi.n	1c104 <uart_nrfx_configure+0xd0>
   1c0f4:	4d21      	ldr	r5, [pc, #132]	; (1c17c <uart_nrfx_configure+0x148>)
   1c0f6:	42ab      	cmp	r3, r5
   1c0f8:	d034      	beq.n	1c164 <uart_nrfx_configure+0x130>
   1c0fa:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   1c0fe:	d1bf      	bne.n	1c080 <uart_nrfx_configure+0x4c>
		nrf_baudrate = NRF_UART_BAUDRATE_460800;
   1c100:	4b1f      	ldr	r3, [pc, #124]	; (1c180 <uart_nrfx_configure+0x14c>)
   1c102:	e004      	b.n	1c10e <uart_nrfx_configure+0xda>
	switch (baudrate) {
   1c104:	4d1f      	ldr	r5, [pc, #124]	; (1c184 <uart_nrfx_configure+0x150>)
   1c106:	42ab      	cmp	r3, r5
   1c108:	d1ba      	bne.n	1c080 <uart_nrfx_configure+0x4c>
		nrf_baudrate = NRF_UART_BAUDRATE_1000000;
   1c10a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uart_baudrate_set(NRF_UART_Type * p_reg, nrf_uart_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1c10e:	4d1e      	ldr	r5, [pc, #120]	; (1c188 <uart_nrfx_configure+0x154>)
                    | (uint32_t)p_cfg->hwfc;
   1c110:	4334      	orrs	r4, r6
   1c112:	4322      	orrs	r2, r4
    p_reg->BAUDRATE = baudrate;
   1c114:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1c118:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
	get_dev_data(dev)->uart_config = *cfg;
   1c11c:	68c3      	ldr	r3, [r0, #12]
   1c11e:	c903      	ldmia	r1, {r0, r1}
   1c120:	e883 0003 	stmia.w	r3, {r0, r1}
	return 0;
   1c124:	2000      	movs	r0, #0
}
   1c126:	bd70      	pop	{r4, r5, r6, pc}
		nrf_baudrate = NRF_UART_BAUDRATE_38400;
   1c128:	4b18      	ldr	r3, [pc, #96]	; (1c18c <uart_nrfx_configure+0x158>)
   1c12a:	e7f0      	b.n	1c10e <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_9600;
   1c12c:	4b18      	ldr	r3, [pc, #96]	; (1c190 <uart_nrfx_configure+0x15c>)
   1c12e:	e7ee      	b.n	1c10e <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_1200;
   1c130:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1c134:	e7eb      	b.n	1c10e <uart_nrfx_configure+0xda>
		nrf_baudrate = 0x00014000;
   1c136:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1c13a:	e7e8      	b.n	1c10e <uart_nrfx_configure+0xda>
	switch (baudrate) {
   1c13c:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   1c140:	e7e5      	b.n	1c10e <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_2400;
   1c142:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1c146:	e7e2      	b.n	1c10e <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_28800;
   1c148:	4b12      	ldr	r3, [pc, #72]	; (1c194 <uart_nrfx_configure+0x160>)
   1c14a:	e7e0      	b.n	1c10e <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_14400;
   1c14c:	f44f 136c 	mov.w	r3, #3866624	; 0x3b0000
   1c150:	e7dd      	b.n	1c10e <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_230400;
   1c152:	4b11      	ldr	r3, [pc, #68]	; (1c198 <uart_nrfx_configure+0x164>)
   1c154:	e7db      	b.n	1c10e <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_76800;
   1c156:	4b11      	ldr	r3, [pc, #68]	; (1c19c <uart_nrfx_configure+0x168>)
   1c158:	e7d9      	b.n	1c10e <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_56000;
   1c15a:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1c15e:	e7d6      	b.n	1c10e <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_921600;
   1c160:	4b0f      	ldr	r3, [pc, #60]	; (1c1a0 <uart_nrfx_configure+0x16c>)
   1c162:	e7d4      	b.n	1c10e <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_250000;
   1c164:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1c168:	e7d1      	b.n	1c10e <uart_nrfx_configure+0xda>
   1c16a:	bf00      	nop
   1c16c:	0013b000 	.word	0x0013b000
   1c170:	004ea000 	.word	0x004ea000
   1c174:	00ebf000 	.word	0x00ebf000
   1c178:	01d7e000 	.word	0x01d7e000
   1c17c:	0003d090 	.word	0x0003d090
   1c180:	075f7000 	.word	0x075f7000
   1c184:	000f4240 	.word	0x000f4240
   1c188:	40002000 	.word	0x40002000
   1c18c:	009d5000 	.word	0x009d5000
   1c190:	00275000 	.word	0x00275000
   1c194:	0075f000 	.word	0x0075f000
   1c198:	03afb000 	.word	0x03afb000
   1c19c:	013a9000 	.word	0x013a9000
   1c1a0:	0ebed000 	.word	0x0ebed000

0001c1a4 <uart_nrfx_isr>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c1a4:	4b08      	ldr	r3, [pc, #32]	; (1c1c8 <uart_nrfx_isr+0x24>)
   1c1a6:	681a      	ldr	r2, [r3, #0]
 * @param arg Argument to ISR.
 *
 * @return N/A
 */
static void uart_nrfx_isr(void *arg)
{
   1c1a8:	b082      	sub	sp, #8
	ARG_UNUSED(arg);

	if (nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_ERROR)) {
   1c1aa:	b122      	cbz	r2, 1c1b6 <uart_nrfx_isr+0x12>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c1ac:	2200      	movs	r2, #0
   1c1ae:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   1c1b0:	681b      	ldr	r3, [r3, #0]
   1c1b2:	9301      	str	r3, [sp, #4]
    (void)dummy;
   1c1b4:	9b01      	ldr	r3, [sp, #4]
		nrf_uart_event_clear(uart0_addr, NRF_UART_EVENT_ERROR);
	}

	if (irq_callback) {
   1c1b6:	4b05      	ldr	r3, [pc, #20]	; (1c1cc <uart_nrfx_isr+0x28>)
   1c1b8:	681b      	ldr	r3, [r3, #0]
   1c1ba:	b11b      	cbz	r3, 1c1c4 <uart_nrfx_isr+0x20>
		irq_callback(irq_cb_data);
   1c1bc:	4a04      	ldr	r2, [pc, #16]	; (1c1d0 <uart_nrfx_isr+0x2c>)
   1c1be:	6810      	ldr	r0, [r2, #0]
	}
}
   1c1c0:	b002      	add	sp, #8
		irq_callback(irq_cb_data);
   1c1c2:	4718      	bx	r3
}
   1c1c4:	b002      	add	sp, #8
   1c1c6:	4770      	bx	lr
   1c1c8:	40002124 	.word	0x40002124
   1c1cc:	200098c4 	.word	0x200098c4
   1c1d0:	200098c8 	.word	0x200098c8

0001c1d4 <uart_nrfx_fifo_read>:
{
   1c1d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	while ((size - num_rx > 0) &&
   1c1d6:	2300      	movs	r3, #0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c1d8:	4c09      	ldr	r4, [pc, #36]	; (1c200 <uart_nrfx_fifo_read+0x2c>)
    return p_reg->RXD;
   1c1da:	4f0a      	ldr	r7, [pc, #40]	; (1c204 <uart_nrfx_fifo_read+0x30>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c1dc:	461e      	mov	r6, r3
   1c1de:	b2d8      	uxtb	r0, r3
   1c1e0:	1a15      	subs	r5, r2, r0
   1c1e2:	2d00      	cmp	r5, #0
   1c1e4:	dd02      	ble.n	1c1ec <uart_nrfx_fifo_read+0x18>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c1e6:	6825      	ldr	r5, [r4, #0]
   1c1e8:	3301      	adds	r3, #1
   1c1ea:	b90d      	cbnz	r5, 1c1f0 <uart_nrfx_fifo_read+0x1c>
}
   1c1ec:	b003      	add	sp, #12
   1c1ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c1f0:	6026      	str	r6, [r4, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   1c1f2:	6825      	ldr	r5, [r4, #0]
   1c1f4:	9501      	str	r5, [sp, #4]
    (void)dummy;
   1c1f6:	9d01      	ldr	r5, [sp, #4]
    return p_reg->RXD;
   1c1f8:	f8d7 5518 	ldr.w	r5, [r7, #1304]	; 0x518
   1c1fc:	540d      	strb	r5, [r1, r0]
   1c1fe:	e7ee      	b.n	1c1de <uart_nrfx_fifo_read+0xa>
   1c200:	40002108 	.word	0x40002108
   1c204:	40002000 	.word	0x40002000

0001c208 <uart_nrfx_poll_out>:
{
   1c208:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1c20a:	460e      	mov	r6, r1
	if (!k_is_in_isr()) {
   1c20c:	f006 fefd 	bl	2300a <k_is_in_isr>
   1c210:	4d1d      	ldr	r5, [pc, #116]	; (1c288 <uart_nrfx_poll_out+0x80>)
   1c212:	2800      	cmp	r0, #0
   1c214:	d134      	bne.n	1c280 <uart_nrfx_poll_out+0x78>
   1c216:	2464      	movs	r4, #100	; 0x64
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1c218:	2701      	movs	r7, #1
   1c21a:	f3bf 8f5b 	dmb	ish
   1c21e:	e855 3f00 	ldrex	r3, [r5]
   1c222:	2b00      	cmp	r3, #0
   1c224:	d103      	bne.n	1c22e <uart_nrfx_poll_out+0x26>
   1c226:	e845 7200 	strex	r2, r7, [r5]
   1c22a:	2a00      	cmp	r2, #0
   1c22c:	d1f7      	bne.n	1c21e <uart_nrfx_poll_out+0x16>
   1c22e:	f3bf 8f5b 	dmb	ish
		while (atomic_cas((atomic_t *) lock,
   1c232:	d007      	beq.n	1c244 <uart_nrfx_poll_out+0x3c>
	return z_impl_k_sleep(timeout);
   1c234:	2021      	movs	r0, #33	; 0x21
   1c236:	2100      	movs	r1, #0
   1c238:	3c01      	subs	r4, #1
   1c23a:	f001 fa73 	bl	1d724 <z_impl_k_sleep>
			if (--safety_cnt == 0) {
   1c23e:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   1c242:	d1ea      	bne.n	1c21a <uart_nrfx_poll_out+0x12>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c244:	4a11      	ldr	r2, [pc, #68]	; (1c28c <uart_nrfx_poll_out+0x84>)
   1c246:	2300      	movs	r3, #0
   1c248:	6013      	str	r3, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   1c24a:	6812      	ldr	r2, [r2, #0]
   1c24c:	9201      	str	r2, [sp, #4]
    (void)dummy;
   1c24e:	9a01      	ldr	r2, [sp, #4]
	uart_sw_event_txdrdy = 0U;
   1c250:	4a0f      	ldr	r2, [pc, #60]	; (1c290 <uart_nrfx_poll_out+0x88>)
   1c252:	7013      	strb	r3, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c254:	4b0f      	ldr	r3, [pc, #60]	; (1c294 <uart_nrfx_poll_out+0x8c>)
   1c256:	2201      	movs	r2, #1
   1c258:	601a      	str	r2, [r3, #0]
    p_reg->TXD = txd;
   1c25a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   1c25e:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
	NRFX_WAIT_FOR(event_txdrdy_check(), 1000, 1, res);
   1c262:	f7ff fe51 	bl	1bf08 <event_txdrdy_check>
   1c266:	b920      	cbnz	r0, 1c272 <uart_nrfx_poll_out+0x6a>
   1c268:	2001      	movs	r0, #1
   1c26a:	f006 fc07 	bl	22a7c <nrfx_busy_wait>
   1c26e:	3c01      	subs	r4, #1
   1c270:	d1f7      	bne.n	1c262 <uart_nrfx_poll_out+0x5a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c272:	4b09      	ldr	r3, [pc, #36]	; (1c298 <uart_nrfx_poll_out+0x90>)
   1c274:	2201      	movs	r2, #1
   1c276:	601a      	str	r2, [r3, #0]
	*lock = 0;
   1c278:	2300      	movs	r3, #0
   1c27a:	602b      	str	r3, [r5, #0]
}
   1c27c:	b003      	add	sp, #12
   1c27e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*lock = 1;
   1c280:	2301      	movs	r3, #1
   1c282:	602b      	str	r3, [r5, #0]
   1c284:	e7de      	b.n	1c244 <uart_nrfx_poll_out+0x3c>
   1c286:	bf00      	nop
   1c288:	200098cc 	.word	0x200098cc
   1c28c:	4000211c 	.word	0x4000211c
   1c290:	2000a870 	.word	0x2000a870
   1c294:	40002008 	.word	0x40002008
   1c298:	4000200c 	.word	0x4000200c

0001c29c <uart_nrfx_poll_in>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c29c:	4b08      	ldr	r3, [pc, #32]	; (1c2c0 <uart_nrfx_poll_in+0x24>)
   1c29e:	681a      	ldr	r2, [r3, #0]
{
   1c2a0:	b082      	sub	sp, #8
	if (!nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_RXDRDY)) {
   1c2a2:	b152      	cbz	r2, 1c2ba <uart_nrfx_poll_in+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c2a4:	2000      	movs	r0, #0
   1c2a6:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   1c2a8:	681b      	ldr	r3, [r3, #0]
   1c2aa:	9301      	str	r3, [sp, #4]
    (void)dummy;
   1c2ac:	9b01      	ldr	r3, [sp, #4]
    return p_reg->RXD;
   1c2ae:	4b05      	ldr	r3, [pc, #20]	; (1c2c4 <uart_nrfx_poll_in+0x28>)
   1c2b0:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
   1c2b4:	700b      	strb	r3, [r1, #0]
}
   1c2b6:	b002      	add	sp, #8
   1c2b8:	4770      	bx	lr
		return -1;
   1c2ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c2be:	e7fa      	b.n	1c2b6 <uart_nrfx_poll_in+0x1a>
   1c2c0:	40002108 	.word	0x40002108
   1c2c4:	40002000 	.word	0x40002000

0001c2c8 <uart_nrfx_fifo_fill>:
{
   1c2c8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c2cc:	4e0d      	ldr	r6, [pc, #52]	; (1c304 <uart_nrfx_fifo_fill+0x3c>)
	uart_sw_event_txdrdy = 0U;
   1c2ce:	4f0e      	ldr	r7, [pc, #56]	; (1c308 <uart_nrfx_fifo_fill+0x40>)
    p_reg->TXD = txd;
   1c2d0:	f8df 8038 	ldr.w	r8, [pc, #56]	; 1c30c <uart_nrfx_fifo_fill+0x44>
	while ((len - num_tx > 0) &&
   1c2d4:	2400      	movs	r4, #0
   1c2d6:	b2e5      	uxtb	r5, r4
   1c2d8:	1b53      	subs	r3, r2, r5
   1c2da:	2b00      	cmp	r3, #0
   1c2dc:	dd03      	ble.n	1c2e6 <uart_nrfx_fifo_fill+0x1e>
	       event_txdrdy_check()) {
   1c2de:	f7ff fe13 	bl	1bf08 <event_txdrdy_check>
   1c2e2:	3401      	adds	r4, #1
	while ((len - num_tx > 0) &&
   1c2e4:	b918      	cbnz	r0, 1c2ee <uart_nrfx_fifo_fill+0x26>
}
   1c2e6:	4628      	mov	r0, r5
   1c2e8:	b002      	add	sp, #8
   1c2ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c2ee:	2300      	movs	r3, #0
   1c2f0:	6033      	str	r3, [r6, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   1c2f2:	6830      	ldr	r0, [r6, #0]
   1c2f4:	9001      	str	r0, [sp, #4]
    (void)dummy;
   1c2f6:	9801      	ldr	r0, [sp, #4]
	uart_sw_event_txdrdy = 0U;
   1c2f8:	703b      	strb	r3, [r7, #0]
    p_reg->TXD = txd;
   1c2fa:	5d4b      	ldrb	r3, [r1, r5]
   1c2fc:	f8c8 351c 	str.w	r3, [r8, #1308]	; 0x51c
}
   1c300:	e7e9      	b.n	1c2d6 <uart_nrfx_fifo_fill+0xe>
   1c302:	bf00      	nop
   1c304:	4000211c 	.word	0x4000211c
   1c308:	2000a870 	.word	0x2000a870
   1c30c:	40002000 	.word	0x40002000

0001c310 <uart_nrfx_init>:
    p_reg->OUTSET = set_mask;
   1c310:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrfx_init(struct device *dev)
{
   1c314:	b537      	push	{r0, r1, r2, r4, r5, lr}
    p_reg->PSEL.RXD = pselrxd;
   1c316:	4d1c      	ldr	r5, [pc, #112]	; (1c388 <uart_nrfx_init+0x78>)
   1c318:	2240      	movs	r2, #64	; 0x40
   1c31a:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1c31e:	2103      	movs	r1, #3
   1c320:	2200      	movs	r2, #0
   1c322:	2408      	movs	r4, #8
   1c324:	f8c3 1718 	str.w	r1, [r3, #1816]	; 0x718
   1c328:	f8c3 2720 	str.w	r2, [r3, #1824]	; 0x720
   1c32c:	f8c5 4514 	str.w	r4, [r5, #1300]	; 0x514
    p_reg->PSEL.TXD = pseltxd;
   1c330:	2406      	movs	r4, #6
   1c332:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
    p_reg->OUTSET = set_mask;
   1c336:	2420      	movs	r4, #32
   1c338:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1c33c:	f8c3 1714 	str.w	r1, [r3, #1812]	; 0x714
   1c340:	f8c3 271c 	str.w	r2, [r3, #1820]	; 0x71c
    p_reg->PSEL.RTS = pselrts;
   1c344:	2305      	movs	r3, #5
   1c346:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   1c34a:	2307      	movs	r3, #7
	}

	nrf_uart_hwfc_pins_set(uart0_addr, RTS_PIN, CTS_PIN);

	/* Set initial configuration */
	err = uart_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   1c34c:	68c1      	ldr	r1, [r0, #12]
   1c34e:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
   1c352:	f7ff fe6f 	bl	1c034 <uart_nrfx_configure>
	if (err) {
   1c356:	4604      	mov	r4, r0
   1c358:	b990      	cbnz	r0, 1c380 <uart_nrfx_init+0x70>
    p_reg->ENABLE = UART_ENABLE_ENABLE_Enabled;
   1c35a:	2304      	movs	r3, #4
   1c35c:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c360:	4b0a      	ldr	r3, [pc, #40]	; (1c38c <uart_nrfx_init+0x7c>)
   1c362:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   1c364:	681b      	ldr	r3, [r3, #0]
   1c366:	9301      	str	r3, [sp, #4]
    (void)dummy;
   1c368:	9b01      	ldr	r3, [sp, #4]

#ifdef CONFIG_UART_0_INTERRUPT_DRIVEN
	/* Simulate that the TXDRDY event is set, so that the transmitter status
	 * is indicated correctly.
	 */
	uart_sw_event_txdrdy = 1U;
   1c36a:	4b09      	ldr	r3, [pc, #36]	; (1c390 <uart_nrfx_init+0x80>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c36c:	2101      	movs	r1, #1
   1c36e:	6029      	str	r1, [r5, #0]
#endif

#if defined(CONFIG_UART_0_ASYNC) || defined(CONFIG_UART_0_INTERRUPT_DRIVEN)

	IRQ_CONNECT(IRQN,
   1c370:	4602      	mov	r2, r0
   1c372:	2002      	movs	r0, #2
	uart_sw_event_txdrdy = 1U;
   1c374:	7019      	strb	r1, [r3, #0]
	IRQ_CONNECT(IRQN,
   1c376:	f7eb f895 	bl	74a4 <z_arm_irq_priority_set>
		    IRQ_PRIO,
		    uart_nrfx_isr,
		    DEVICE_GET(uart_nrfx_uart0),
		    0);
	irq_enable(IRQN);
   1c37a:	2002      	movs	r0, #2
   1c37c:	f7eb f860 	bl	7440 <arch_irq_enable>
#if HW_FLOW_CONTROL_AVAILABLE
	k_delayed_work_init(&uart0_cb.tx_timeout_work, tx_timeout);
#endif
#endif
	return 0;
}
   1c380:	4620      	mov	r0, r4
   1c382:	b003      	add	sp, #12
   1c384:	bd30      	pop	{r4, r5, pc}
   1c386:	bf00      	nop
   1c388:	40002000 	.word	0x40002000
   1c38c:	40002108 	.word	0x40002108
   1c390:	2000a870 	.word	0x2000a870

0001c394 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(struct device *dev,
				const struct uart_config *cfg)
{
   1c394:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   1c396:	794b      	ldrb	r3, [r1, #5]
   1c398:	2b01      	cmp	r3, #1
   1c39a:	d029      	beq.n	1c3f0 <uarte_nrfx_configure+0x5c>
   1c39c:	2b03      	cmp	r3, #3
   1c39e:	d124      	bne.n	1c3ea <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   1c3a0:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1c3a2:	798b      	ldrb	r3, [r1, #6]
   1c3a4:	2b03      	cmp	r3, #3
   1c3a6:	d120      	bne.n	1c3ea <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   1c3a8:	79cc      	ldrb	r4, [r1, #7]
   1c3aa:	b124      	cbz	r4, 1c3b6 <uarte_nrfx_configure+0x22>
   1c3ac:	2c01      	cmp	r4, #1
   1c3ae:	d11c      	bne.n	1c3ea <uarte_nrfx_configure+0x56>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
   1c3b0:	6843      	ldr	r3, [r0, #4]
   1c3b2:	791b      	ldrb	r3, [r3, #4]
   1c3b4:	b1cb      	cbz	r3, 1c3ea <uarte_nrfx_configure+0x56>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   1c3b6:	790a      	ldrb	r2, [r1, #4]
   1c3b8:	b112      	cbz	r2, 1c3c0 <uarte_nrfx_configure+0x2c>
   1c3ba:	2a02      	cmp	r2, #2
   1c3bc:	d115      	bne.n	1c3ea <uarte_nrfx_configure+0x56>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   1c3be:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1c3c0:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   1c3c2:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   1c3c4:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   1c3c8:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   1c3ca:	d064      	beq.n	1c496 <uarte_nrfx_configure+0x102>
   1c3cc:	d82d      	bhi.n	1c42a <uarte_nrfx_configure+0x96>
   1c3ce:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1c3d2:	d063      	beq.n	1c49c <uarte_nrfx_configure+0x108>
   1c3d4:	d816      	bhi.n	1c404 <uarte_nrfx_configure+0x70>
   1c3d6:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   1c3da:	d061      	beq.n	1c4a0 <uarte_nrfx_configure+0x10c>
   1c3dc:	d80a      	bhi.n	1c3f4 <uarte_nrfx_configure+0x60>
   1c3de:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1c3e2:	d060      	beq.n	1c4a6 <uarte_nrfx_configure+0x112>
   1c3e4:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   1c3e8:	d060      	beq.n	1c4ac <uarte_nrfx_configure+0x118>
   1c3ea:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1c3ee:	e051      	b.n	1c494 <uarte_nrfx_configure+0x100>
	switch (cfg->stop_bits) {
   1c3f0:	2600      	movs	r6, #0
   1c3f2:	e7d6      	b.n	1c3a2 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   1c3f4:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1c3f8:	d05b      	beq.n	1c4b2 <uarte_nrfx_configure+0x11e>
   1c3fa:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   1c3fe:	d1f4      	bne.n	1c3ea <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   1c400:	4b36      	ldr	r3, [pc, #216]	; (1c4dc <uarte_nrfx_configure+0x148>)
   1c402:	e03c      	b.n	1c47e <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1c404:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   1c408:	d056      	beq.n	1c4b8 <uarte_nrfx_configure+0x124>
   1c40a:	d807      	bhi.n	1c41c <uarte_nrfx_configure+0x88>
   1c40c:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   1c410:	d054      	beq.n	1c4bc <uarte_nrfx_configure+0x128>
   1c412:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1c416:	d1e8      	bne.n	1c3ea <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   1c418:	4b31      	ldr	r3, [pc, #196]	; (1c4e0 <uarte_nrfx_configure+0x14c>)
   1c41a:	e030      	b.n	1c47e <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1c41c:	f647 2712 	movw	r7, #31250	; 0x7a12
   1c420:	42bb      	cmp	r3, r7
   1c422:	d1e2      	bne.n	1c3ea <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   1c424:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1c428:	e029      	b.n	1c47e <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1c42a:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   1c42e:	d047      	beq.n	1c4c0 <uarte_nrfx_configure+0x12c>
   1c430:	d813      	bhi.n	1c45a <uarte_nrfx_configure+0xc6>
   1c432:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1c436:	d046      	beq.n	1c4c6 <uarte_nrfx_configure+0x132>
   1c438:	d809      	bhi.n	1c44e <uarte_nrfx_configure+0xba>
   1c43a:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   1c43e:	42bb      	cmp	r3, r7
   1c440:	d043      	beq.n	1c4ca <uarte_nrfx_configure+0x136>
   1c442:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1c446:	d1d0      	bne.n	1c3ea <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   1c448:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   1c44c:	e017      	b.n	1c47e <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1c44e:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   1c452:	d1ca      	bne.n	1c3ea <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   1c454:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   1c458:	e011      	b.n	1c47e <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1c45a:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   1c45e:	d037      	beq.n	1c4d0 <uarte_nrfx_configure+0x13c>
   1c460:	d808      	bhi.n	1c474 <uarte_nrfx_configure+0xe0>
   1c462:	4f20      	ldr	r7, [pc, #128]	; (1c4e4 <uarte_nrfx_configure+0x150>)
   1c464:	42bb      	cmp	r3, r7
   1c466:	d036      	beq.n	1c4d6 <uarte_nrfx_configure+0x142>
   1c468:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   1c46c:	d1bd      	bne.n	1c3ea <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   1c46e:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   1c472:	e004      	b.n	1c47e <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1c474:	4f1c      	ldr	r7, [pc, #112]	; (1c4e8 <uarte_nrfx_configure+0x154>)
   1c476:	42bb      	cmp	r3, r7
   1c478:	d1b7      	bne.n	1c3ea <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   1c47a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1c47e:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   1c482:	68c3      	ldr	r3, [r0, #12]
   1c484:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
   1c486:	4334      	orrs	r4, r6
   1c488:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1c48a:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   1c48e:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   1c492:	2000      	movs	r0, #0
}
   1c494:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   1c496:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   1c49a:	e7f0      	b.n	1c47e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   1c49c:	4b13      	ldr	r3, [pc, #76]	; (1c4ec <uarte_nrfx_configure+0x158>)
   1c49e:	e7ee      	b.n	1c47e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   1c4a0:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1c4a4:	e7eb      	b.n	1c47e <uarte_nrfx_configure+0xea>
		nrf_baudrate = 0x00014000;
   1c4a6:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1c4aa:	e7e8      	b.n	1c47e <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1c4ac:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   1c4b0:	e7e5      	b.n	1c47e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   1c4b2:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1c4b6:	e7e2      	b.n	1c47e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   1c4b8:	4b0d      	ldr	r3, [pc, #52]	; (1c4f0 <uarte_nrfx_configure+0x15c>)
   1c4ba:	e7e0      	b.n	1c47e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   1c4bc:	4b0d      	ldr	r3, [pc, #52]	; (1c4f4 <uarte_nrfx_configure+0x160>)
   1c4be:	e7de      	b.n	1c47e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   1c4c0:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   1c4c4:	e7db      	b.n	1c47e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   1c4c6:	4b0c      	ldr	r3, [pc, #48]	; (1c4f8 <uarte_nrfx_configure+0x164>)
   1c4c8:	e7d9      	b.n	1c47e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   1c4ca:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1c4ce:	e7d6      	b.n	1c47e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   1c4d0:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1c4d4:	e7d3      	b.n	1c47e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   1c4d6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1c4da:	e7d0      	b.n	1c47e <uarte_nrfx_configure+0xea>
   1c4dc:	0013b000 	.word	0x0013b000
   1c4e0:	004ea000 	.word	0x004ea000
   1c4e4:	0003d090 	.word	0x0003d090
   1c4e8:	000f4240 	.word	0x000f4240
   1c4ec:	00275000 	.word	0x00275000
   1c4f0:	0075c000 	.word	0x0075c000
   1c4f4:	003af000 	.word	0x003af000
   1c4f8:	013a9000 	.word	0x013a9000

0001c4fc <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   1c4fc:	b570      	push	{r4, r5, r6, lr}
   1c4fe:	2200      	movs	r2, #0
   1c500:	4605      	mov	r5, r0
   1c502:	2101      	movs	r1, #1
   1c504:	2028      	movs	r0, #40	; 0x28
   1c506:	f7ea ffcd 	bl	74a4 <z_arm_irq_priority_set>
   1c50a:	2028      	movs	r0, #40	; 0x28
   1c50c:	f7ea ff98 	bl	7440 <arch_irq_enable>
	return config->uarte_regs;
   1c510:	686b      	ldr	r3, [r5, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1c512:	68ee      	ldr	r6, [r5, #12]
	return config->uarte_regs;
   1c514:	681c      	ldr	r4, [r3, #0]
    p_reg->OUTSET = set_mask;
   1c516:	4b1b      	ldr	r3, [pc, #108]	; (1c584 <uarte_1_init+0x88>)
   1c518:	2204      	movs	r2, #4
   1c51a:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1c51e:	2203      	movs	r2, #3
   1c520:	f8c3 2708 	str.w	r2, [r3, #1800]	; 0x708
   1c524:	2200      	movs	r2, #0
   1c526:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
    p_reg->PSEL.TXD = pseltxd;
   1c52a:	2322      	movs	r3, #34	; 0x22
   1c52c:	f8c4 350c 	str.w	r3, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   1c530:	2321      	movs	r3, #33	; 0x21
   1c532:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
    p_reg->PSEL.RTS = pselrts;
   1c536:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c53a:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   1c53e:	4631      	mov	r1, r6
    p_reg->PSEL.CTS = pselcts;
   1c540:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
   1c544:	4628      	mov	r0, r5
   1c546:	f7ff ff25 	bl	1c394 <uarte_nrfx_configure>
	if (err) {
   1c54a:	4602      	mov	r2, r0
   1c54c:	b9b8      	cbnz	r0, 1c57e <uarte_1_init+0x82>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1c54e:	2308      	movs	r3, #8
   1c550:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);
   1c554:	f44f 7188 	mov.w	r1, #272	; 0x110
   1c558:	4620      	mov	r0, r4
   1c55a:	f006 f962 	bl	22822 <nrf_uarte_event_clear>
		nrf_uarte_tx_buffer_set(uarte, data->int_driven->tx_buffer, 0);
   1c55e:	68b1      	ldr	r1, [r6, #8]
		nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   1c560:	f106 0310 	add.w	r3, r6, #16

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1c564:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1c568:	6889      	ldr	r1, [r1, #8]
    p_reg->RXD.MAXCNT = length;
   1c56a:	2301      	movs	r3, #1
   1c56c:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c570:	6023      	str	r3, [r4, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1c572:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1c576:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c57a:	60a3      	str	r3, [r4, #8]
   1c57c:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(1);
   1c57e:	4610      	mov	r0, r2
   1c580:	bd70      	pop	{r4, r5, r6, pc}
   1c582:	bf00      	nop
   1c584:	50000300 	.word	0x50000300

0001c588 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   1c588:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c58a:	4603      	mov	r3, r0
	uint32_t last  = rngp->last;
   1c58c:	7884      	ldrb	r4, [r0, #2]
	uint32_t mask  = rngp->mask;
   1c58e:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   1c590:	f04f 0520 	mov.w	r5, #32
   1c594:	f3ef 8011 	mrs	r0, BASEPRI
   1c598:	f385 8811 	msr	BASEPRI, r5
   1c59c:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   1c5a0:	781e      	ldrb	r6, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   1c5a2:	f893 e001 	ldrb.w	lr, [r3, #1]

	available = (last - first) & mask;
   1c5a6:	1ba4      	subs	r4, r4, r6
   1c5a8:	403c      	ands	r4, r7
	if (available < len) {
   1c5aa:	42a2      	cmp	r2, r4
		len = available;
   1c5ac:	bf88      	it	hi
   1c5ae:	b2a2      	uxthhi	r2, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   1c5b0:	eb06 0c02 	add.w	ip, r6, r2
   1c5b4:	ea07 0c0c 	and.w	ip, r7, ip
	first = rngp->first_alloc;
   1c5b8:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   1c5ba:	f883 c000 	strb.w	ip, [r3]
	__asm__ volatile(
   1c5be:	f380 8811 	msr	BASEPRI, r0
   1c5c2:	f3bf 8f6f 	isb	sy
   1c5c6:	440a      	add	r2, r1
	uint8_t *dst   = buf;
   1c5c8:	4608      	mov	r0, r1
	irq_unlock(key);

	while (likely(len--)) {
   1c5ca:	4282      	cmp	r2, r0
   1c5cc:	d119      	bne.n	1c602 <rng_pool_get+0x7a>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   1c5ce:	4576      	cmp	r6, lr
   1c5d0:	d10d      	bne.n	1c5ee <rng_pool_get+0x66>
	__asm__ volatile(
   1c5d2:	f04f 0520 	mov.w	r5, #32
   1c5d6:	f3ef 8211 	mrs	r2, BASEPRI
   1c5da:	f385 8811 	msr	BASEPRI, r5
   1c5de:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   1c5e2:	781d      	ldrb	r5, [r3, #0]
   1c5e4:	705d      	strb	r5, [r3, #1]
	__asm__ volatile(
   1c5e6:	f382 8811 	msr	BASEPRI, r2
   1c5ea:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   1c5ee:	1a41      	subs	r1, r0, r1
	available = available - len;
	if (available <= rngp->threshold) {
   1c5f0:	791b      	ldrb	r3, [r3, #4]
	len = dst - buf;
   1c5f2:	b288      	uxth	r0, r1
	available = available - len;
   1c5f4:	1a21      	subs	r1, r4, r0
	if (available <= rngp->threshold) {
   1c5f6:	428b      	cmp	r3, r1
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)rng_task);
}

NRF_STATIC_INLINE void nrf_rng_task_trigger(NRF_RNG_Type * p_reg, nrf_rng_task_t rng_task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1c5f8:	bf22      	ittt	cs
   1c5fa:	4b06      	ldrcs	r3, [pc, #24]	; (1c614 <rng_pool_get+0x8c>)
   1c5fc:	2201      	movcs	r2, #1
   1c5fe:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   1c600:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   1c602:	eb03 0c05 	add.w	ip, r3, r5
		first = (first + 1) & mask;
   1c606:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   1c608:	f89c c005 	ldrb.w	ip, [ip, #5]
   1c60c:	f800 cb01 	strb.w	ip, [r0], #1
		first = (first + 1) & mask;
   1c610:	403d      	ands	r5, r7
   1c612:	e7da      	b.n	1c5ca <rng_pool_get+0x42>
   1c614:	4000d000 	.word	0x4000d000

0001c618 <entropy_nrf5_get_entropy>:
		k_sem_give(&entropy_nrf5_data.sem_sync);
	}
}

static int entropy_nrf5_get_entropy(struct device *device, uint8_t *buf, uint16_t len)
{
   1c618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_sem_take(sem, timeout);
   1c61c:	4f13      	ldr	r7, [pc, #76]	; (1c66c <entropy_nrf5_get_entropy+0x54>)
   1c61e:	460d      	mov	r5, r1
   1c620:	4614      	mov	r4, r2

	while (len) {
		uint16_t bytes;

		k_sem_take(&entropy_nrf5_data.sem_lock, K_FOREVER);
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1c622:	f107 0845 	add.w	r8, r7, #69	; 0x45
   1c626:	f107 0918 	add.w	r9, r7, #24
	while (len) {
   1c62a:	b914      	cbnz	r4, 1c632 <entropy_nrf5_get_entropy+0x1a>
		len -= bytes;
		buf += bytes;
	}

	return 0;
}
   1c62c:	4620      	mov	r0, r4
   1c62e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1c632:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c636:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1c63a:	4638      	mov	r0, r7
   1c63c:	f001 f8be 	bl	1d7bc <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1c640:	4622      	mov	r2, r4
   1c642:	4629      	mov	r1, r5
   1c644:	4640      	mov	r0, r8
   1c646:	f7ff ff9f 	bl	1c588 <rng_pool_get>
   1c64a:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   1c64c:	4638      	mov	r0, r7
   1c64e:	f001 f88f 	bl	1d770 <z_impl_k_sem_give>
		if (bytes == 0U) {
   1c652:	b93e      	cbnz	r6, 1c664 <entropy_nrf5_get_entropy+0x4c>
	return z_impl_k_sem_take(sem, timeout);
   1c654:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1c658:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c65c:	4648      	mov	r0, r9
   1c65e:	f001 f8ad 	bl	1d7bc <z_impl_k_sem_take>
			continue;
   1c662:	e7e2      	b.n	1c62a <entropy_nrf5_get_entropy+0x12>
		len -= bytes;
   1c664:	1ba4      	subs	r4, r4, r6
   1c666:	b2a4      	uxth	r4, r4
		buf += bytes;
   1c668:	4435      	add	r5, r6
   1c66a:	e7de      	b.n	1c62a <entropy_nrf5_get_entropy+0x12>
   1c66c:	200098d0 	.word	0x200098d0

0001c670 <random_byte_get>:
{
   1c670:	b082      	sub	sp, #8
	__asm__ volatile(
   1c672:	f04f 0320 	mov.w	r3, #32
   1c676:	f3ef 8211 	mrs	r2, BASEPRI
   1c67a:	f383 8811 	msr	BASEPRI, r3
   1c67e:	f3bf 8f6f 	isb	sy
#endif
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1c682:	4b0a      	ldr	r3, [pc, #40]	; (1c6ac <random_byte_get+0x3c>)
   1c684:	6819      	ldr	r1, [r3, #0]
	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   1c686:	b171      	cbz	r1, 1c6a6 <random_byte_get+0x36>
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   1c688:	4909      	ldr	r1, [pc, #36]	; (1c6b0 <random_byte_get+0x40>)
   1c68a:	f8d1 0508 	ldr.w	r0, [r1, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1c68e:	2100      	movs	r1, #0
   1c690:	6019      	str	r1, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1c692:	681b      	ldr	r3, [r3, #0]
   1c694:	9301      	str	r3, [sp, #4]
    (void)dummy;
   1c696:	9b01      	ldr	r3, [sp, #4]
		retval = nrf_rng_random_value_get(NRF_RNG);
   1c698:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   1c69a:	f382 8811 	msr	BASEPRI, r2
   1c69e:	f3bf 8f6f 	isb	sy
}
   1c6a2:	b002      	add	sp, #8
   1c6a4:	4770      	bx	lr
	int retval = -EAGAIN;
   1c6a6:	f06f 000a 	mvn.w	r0, #10
   1c6aa:	e7f6      	b.n	1c69a <random_byte_get+0x2a>
   1c6ac:	4000d100 	.word	0x4000d100
   1c6b0:	4000d000 	.word	0x4000d000

0001c6b4 <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1c6b4:	43db      	mvns	r3, r3
{
   1c6b6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1c6ba:	f013 0501 	ands.w	r5, r3, #1
{
   1c6be:	460e      	mov	r6, r1
   1c6c0:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1c6c2:	d005      	beq.n	1c6d0 <entropy_nrf5_get_entropy_isr+0x1c>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   1c6c4:	4822      	ldr	r0, [pc, #136]	; (1c750 <entropy_nrf5_get_entropy_isr+0x9c>)
   1c6c6:	f7ff ff5f 	bl	1c588 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   1c6ca:	b002      	add	sp, #8
   1c6cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   1c6d0:	2a00      	cmp	r2, #0
   1c6d2:	d035      	beq.n	1c740 <entropy_nrf5_get_entropy_isr+0x8c>
	__asm__ volatile(
   1c6d4:	f04f 0320 	mov.w	r3, #32
   1c6d8:	f3ef 8811 	mrs	r8, BASEPRI
   1c6dc:	f383 8811 	msr	BASEPRI, r3
   1c6e0:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   1c6e4:	200d      	movs	r0, #13
   1c6e6:	f7ea fecf 	bl	7488 <arch_irq_is_enabled>
   1c6ea:	4607      	mov	r7, r0
		irq_disable(IRQN);
   1c6ec:	200d      	movs	r0, #13
   1c6ee:	f7ea feb7 	bl	7460 <arch_irq_disable>
	__asm__ volatile(
   1c6f2:	f388 8811 	msr	BASEPRI, r8
   1c6f6:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1c6fa:	4a16      	ldr	r2, [pc, #88]	; (1c754 <entropy_nrf5_get_entropy_isr+0xa0>)
   1c6fc:	6015      	str	r5, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1c6fe:	6813      	ldr	r3, [r2, #0]
   1c700:	9301      	str	r3, [sp, #4]
    (void)dummy;
   1c702:	9b01      	ldr	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1c704:	4b14      	ldr	r3, [pc, #80]	; (1c758 <entropy_nrf5_get_entropy_isr+0xa4>)
   1c706:	2101      	movs	r1, #1
   1c708:	6019      	str	r1, [r3, #0]
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1c70a:	4914      	ldr	r1, [pc, #80]	; (1c75c <entropy_nrf5_get_entropy_isr+0xa8>)
   1c70c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   1c710:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
   1c714:	4625      	mov	r5, r4
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1c716:	4691      	mov	r9, r2
   1c718:	468a      	mov	sl, r1
   1c71a:	4698      	mov	r8, r3
   1c71c:	f8d9 3000 	ldr.w	r3, [r9]
			while (!nrf_rng_event_check(NRF_RNG,
   1c720:	b183      	cbz	r3, 1c744 <entropy_nrf5_get_entropy_isr+0x90>
			byte = random_byte_get();
   1c722:	f7ff ffa5 	bl	1c670 <random_byte_get>
			if (byte < 0) {
   1c726:	1e03      	subs	r3, r0, #0
   1c728:	f8ca 8180 	str.w	r8, [sl, #384]	; 0x180
   1c72c:	dbf6      	blt.n	1c71c <entropy_nrf5_get_entropy_isr+0x68>
   1c72e:	3d01      	subs	r5, #1
   1c730:	b2ad      	uxth	r5, r5
			buf[--len] = byte;
   1c732:	5573      	strb	r3, [r6, r5]
		} while (len);
   1c734:	2d00      	cmp	r5, #0
   1c736:	d1f1      	bne.n	1c71c <entropy_nrf5_get_entropy_isr+0x68>
		if (irq_enabled) {
   1c738:	b117      	cbz	r7, 1c740 <entropy_nrf5_get_entropy_isr+0x8c>
			irq_enable(IRQN);
   1c73a:	200d      	movs	r0, #13
   1c73c:	f7ea fe80 	bl	7440 <arch_irq_enable>
	return cnt;
   1c740:	4620      	mov	r0, r4
   1c742:	e7c2      	b.n	1c6ca <entropy_nrf5_get_entropy_isr+0x16>
  __ASM volatile ("dsb 0xF":::"memory");
   1c744:	f3bf 8f4f 	dsb	sy
				__WFE();
   1c748:	bf20      	wfe
				__SEV();
   1c74a:	bf40      	sev
				__WFE();
   1c74c:	bf20      	wfe
   1c74e:	e7e5      	b.n	1c71c <entropy_nrf5_get_entropy_isr+0x68>
   1c750:	20009900 	.word	0x20009900
   1c754:	4000d100 	.word	0x4000d100
   1c758:	4000d000 	.word	0x4000d000
   1c75c:	e000e100 	.word	0xe000e100

0001c760 <entropy_nrf5_init>:
		    entropy_nrf5_init, &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(struct device *device)
{
   1c760:	b537      	push	{r0, r1, r2, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1c762:	4c1a      	ldr	r4, [pc, #104]	; (1c7cc <entropy_nrf5_init+0x6c>)
   1c764:	2201      	movs	r2, #1
   1c766:	4611      	mov	r1, r2
   1c768:	4620      	mov	r0, r4
   1c76a:	f006 fc3e 	bl	22fea <z_impl_k_sem_init>
   1c76e:	2201      	movs	r2, #1
   1c770:	2100      	movs	r1, #0
   1c772:	f104 0018 	add.w	r0, r4, #24
   1c776:	f006 fc38 	bl	22fea <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   1c77a:	f240 4307 	movw	r3, #1031	; 0x407
   1c77e:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   1c782:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1c786:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   1c788:	230c      	movs	r3, #12
   1c78a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   1c78e:	2500      	movs	r5, #0
}

NRF_STATIC_INLINE void nrf_rng_error_correction_enable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   1c790:	4b0f      	ldr	r3, [pc, #60]	; (1c7d0 <entropy_nrf5_init+0x70>)
   1c792:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   1c796:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   1c79a:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   1c79e:	f042 0201 	orr.w	r2, r2, #1
   1c7a2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1c7a6:	4a0b      	ldr	r2, [pc, #44]	; (1c7d4 <entropy_nrf5_init+0x74>)
   1c7a8:	6015      	str	r5, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1c7aa:	6812      	ldr	r2, [r2, #0]
   1c7ac:	9201      	str	r2, [sp, #4]
    p_reg->INTENSET = mask;
   1c7ae:	2101      	movs	r1, #1
    (void)dummy;
   1c7b0:	9a01      	ldr	r2, [sp, #4]
    p_reg->INTENSET = mask;
   1c7b2:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   1c7b6:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1c7b8:	6019      	str	r1, [r3, #0]
   1c7ba:	200d      	movs	r0, #13
   1c7bc:	f7ea fe72 	bl	74a4 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   1c7c0:	200d      	movs	r0, #13
   1c7c2:	f7ea fe3d 	bl	7440 <arch_irq_enable>

	return 0;
}
   1c7c6:	4628      	mov	r0, r5
   1c7c8:	b003      	add	sp, #12
   1c7ca:	bd30      	pop	{r4, r5, pc}
   1c7cc:	200098d0 	.word	0x200098d0
   1c7d0:	4000d000 	.word	0x4000d000
   1c7d4:	4000d100 	.word	0x4000d100

0001c7d8 <isr>:
{
   1c7d8:	b510      	push	{r4, lr}
	byte = random_byte_get();
   1c7da:	f7ff ff49 	bl	1c670 <random_byte_get>
	if (byte < 0) {
   1c7de:	2800      	cmp	r0, #0
   1c7e0:	db20      	blt.n	1c824 <isr+0x4c>
	uint8_t last  = rngp->last;
   1c7e2:	4b17      	ldr	r3, [pc, #92]	; (1c840 <isr+0x68>)
   1c7e4:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   1c7e8:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   1c7ec:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   1c7f0:	1a51      	subs	r1, r2, r1
   1c7f2:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   1c7f6:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   1c7f8:	d10d      	bne.n	1c816 <isr+0x3e>
	uint8_t last  = rngp->last;
   1c7fa:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   1c7fe:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   1c802:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   1c806:	1a51      	subs	r1, r2, r1
   1c808:	ea34 0101 	bics.w	r1, r4, r1
   1c80c:	d10b      	bne.n	1c826 <isr+0x4e>
   1c80e:	4b0d      	ldr	r3, [pc, #52]	; (1c844 <isr+0x6c>)
   1c810:	2201      	movs	r2, #1
   1c812:	601a      	str	r2, [r3, #0]
}
   1c814:	e00e      	b.n	1c834 <isr+0x5c>
	rngp->buffer[last] = byte;
   1c816:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   1c818:	3201      	adds	r2, #1
   1c81a:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   1c81c:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   1c820:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   1c824:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   1c826:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   1c828:	3201      	adds	r2, #1
   1c82a:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   1c82c:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   1c830:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   1c834:	4804      	ldr	r0, [pc, #16]	; (1c848 <isr+0x70>)
}
   1c836:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1c83a:	f000 bf99 	b.w	1d770 <z_impl_k_sem_give>
   1c83e:	bf00      	nop
   1c840:	200098d0 	.word	0x200098d0
   1c844:	4000d004 	.word	0x4000d004
   1c848:	200098e8 	.word	0x200098e8

0001c84c <nrf52_errata_136>:
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   1c84c:	4b0a      	ldr	r3, [pc, #40]	; (1c878 <nrf52_errata_136+0x2c>)
   1c84e:	681b      	ldr	r3, [r3, #0]
   1c850:	1c5a      	adds	r2, r3, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1c852:	bf05      	ittet	eq
   1c854:	4b09      	ldreq	r3, [pc, #36]	; (1c87c <nrf52_errata_136+0x30>)
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   1c856:	4a0a      	ldreq	r2, [pc, #40]	; (1c880 <nrf52_errata_136+0x34>)
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
   1c858:	4a0a      	ldrne	r2, [pc, #40]	; (1c884 <nrf52_errata_136+0x38>)
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   1c85a:	6810      	ldreq	r0, [r2, #0]
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1c85c:	bf0a      	itet	eq
   1c85e:	781b      	ldrbeq	r3, [r3, #0]
                var2 = *(uint32_t *)0x10000134ul;
   1c860:	6810      	ldrne	r0, [r2, #0]
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   1c862:	f3c0 1003 	ubfxeq	r0, r0, #4, #4
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1c866:	2b08      	cmp	r3, #8
   1c868:	d104      	bne.n	1c874 <nrf52_errata_136+0x28>
            {
                switch(var2)
   1c86a:	2803      	cmp	r0, #3
   1c86c:	bf8c      	ite	hi
   1c86e:	2000      	movhi	r0, #0
   1c870:	2001      	movls	r0, #1
   1c872:	4770      	bx	lr
                    case 0x01ul:
                        return true;
                }
            }
        #endif
        return false;
   1c874:	2000      	movs	r0, #0
    #endif
}
   1c876:	4770      	bx	lr
   1c878:	10000130 	.word	0x10000130
   1c87c:	f0000fe0 	.word	0xf0000fe0
   1c880:	f0000fe8 	.word	0xf0000fe8
   1c884:	10000134 	.word	0x10000134

0001c888 <nrf52_errata_103>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1c888:	4b06      	ldr	r3, [pc, #24]	; (1c8a4 <nrf52_errata_103+0x1c>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1c88a:	681b      	ldr	r3, [r3, #0]
   1c88c:	2b08      	cmp	r3, #8
   1c88e:	d106      	bne.n	1c89e <nrf52_errata_103+0x16>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1c890:	4b05      	ldr	r3, [pc, #20]	; (1c8a8 <nrf52_errata_103+0x20>)
   1c892:	681b      	ldr	r3, [r3, #0]
            {
                switch(var2)
   1c894:	2b03      	cmp	r3, #3
   1c896:	d802      	bhi.n	1c89e <nrf52_errata_103+0x16>
   1c898:	4a04      	ldr	r2, [pc, #16]	; (1c8ac <nrf52_errata_103+0x24>)
   1c89a:	5cd0      	ldrb	r0, [r2, r3]
   1c89c:	4770      	bx	lr
                    case 0x03ul:
                        return false;
                }
            }
        #endif
        return false;
   1c89e:	2000      	movs	r0, #0
    #endif
}
   1c8a0:	4770      	bx	lr
   1c8a2:	bf00      	nop
   1c8a4:	10000130 	.word	0x10000130
   1c8a8:	10000134 	.word	0x10000134
   1c8ac:	00026da2 	.word	0x00026da2

0001c8b0 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   1c8b0:	b508      	push	{r3, lr}
        NRF_P1->PIN_CNF[9]  = (GPIO_PIN_CNF_DRIVE_H0H1 << GPIO_PIN_CNF_DRIVE_Pos) | (GPIO_PIN_CNF_INPUT_Connect << GPIO_PIN_CNF_INPUT_Pos) | (GPIO_PIN_CNF_DIR_Output << GPIO_PIN_CNF_DIR_Pos);
    #endif
    
    /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_36()){
   1c8b2:	f7ff ffcb 	bl	1c84c <nrf52_errata_136>
   1c8b6:	b140      	cbz	r0, 1c8ca <SystemInit+0x1a>
        NRF_CLOCK->EVENTS_DONE = 0;
   1c8b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1c8bc:	2200      	movs	r2, #0
   1c8be:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
   1c8c2:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
   1c8c6:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    }
    
    /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_66()){
   1c8ca:	f7ff ffbf 	bl	1c84c <nrf52_errata_136>
   1c8ce:	2800      	cmp	r0, #0
   1c8d0:	d046      	beq.n	1c960 <SystemInit+0xb0>
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   1c8d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1c8d6:	4b58      	ldr	r3, [pc, #352]	; (1ca38 <SystemInit+0x188>)
   1c8d8:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   1c8dc:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   1c8e0:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   1c8e4:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   1c8e8:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   1c8ec:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   1c8f0:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   1c8f4:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   1c8f8:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   1c8fc:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   1c900:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   1c904:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   1c908:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   1c90c:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   1c910:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   1c914:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   1c918:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   1c91c:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   1c920:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   1c924:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   1c928:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   1c92c:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   1c930:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   1c934:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   1c938:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   1c93c:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   1c940:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   1c944:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   1c948:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   1c94c:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   1c950:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   1c954:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   1c958:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   1c95c:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    }
    
    /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_98()){
   1c960:	f7ff ff92 	bl	1c888 <nrf52_errata_103>
   1c964:	b110      	cbz	r0, 1c96c <SystemInit+0xbc>
        *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   1c966:	4b35      	ldr	r3, [pc, #212]	; (1ca3c <SystemInit+0x18c>)
   1c968:	4a35      	ldr	r2, [pc, #212]	; (1ca40 <SystemInit+0x190>)
   1c96a:	601a      	str	r2, [r3, #0]
    }
    
    /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_103()){
   1c96c:	f7ff ff8c 	bl	1c888 <nrf52_errata_103>
   1c970:	b118      	cbz	r0, 1c97a <SystemInit+0xca>
        NRF_CCM->MAXPACKETSIZE = 0xFBul;
   1c972:	4b34      	ldr	r3, [pc, #208]	; (1ca44 <SystemInit+0x194>)
   1c974:	22fb      	movs	r2, #251	; 0xfb
   1c976:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    }
    
    /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_115()){
   1c97a:	f7ff ff85 	bl	1c888 <nrf52_errata_103>
   1c97e:	b148      	cbz	r0, 1c994 <SystemInit+0xe4>
        *(volatile uint32_t *)0x40000EE4ul = (*(volatile uint32_t *)0x40000EE4ul & 0xFFFFFFF0ul) | (*(uint32_t *)0x10000258ul & 0x0000000Ful);
   1c980:	4931      	ldr	r1, [pc, #196]	; (1ca48 <SystemInit+0x198>)
   1c982:	4b32      	ldr	r3, [pc, #200]	; (1ca4c <SystemInit+0x19c>)
   1c984:	680a      	ldr	r2, [r1, #0]
   1c986:	681b      	ldr	r3, [r3, #0]
   1c988:	f022 020f 	bic.w	r2, r2, #15
   1c98c:	f003 030f 	and.w	r3, r3, #15
   1c990:	4313      	orrs	r3, r2
   1c992:	600b      	str	r3, [r1, #0]
    }
    
    /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_120()){
   1c994:	f7ff ff78 	bl	1c888 <nrf52_errata_103>
   1c998:	b118      	cbz	r0, 1c9a2 <SystemInit+0xf2>
        *(volatile uint32_t *)0x40029640ul = 0x200ul;
   1c99a:	4b2d      	ldr	r3, [pc, #180]	; (1ca50 <SystemInit+0x1a0>)
   1c99c:	f44f 7200 	mov.w	r2, #512	; 0x200
   1c9a0:	601a      	str	r2, [r3, #0]
    }
    
    /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_136()){
   1c9a2:	f7ff ff53 	bl	1c84c <nrf52_errata_136>
   1c9a6:	b148      	cbz	r0, 1c9bc <SystemInit+0x10c>
        if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   1c9a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1c9ac:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   1c9b0:	07d2      	lsls	r2, r2, #31
            NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   1c9b2:	bf44      	itt	mi
   1c9b4:	f06f 0201 	mvnmi.w	r2, #1
   1c9b8:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1c9bc:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1c9c0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   1c9c4:	2a00      	cmp	r2, #0
   1c9c6:	db03      	blt.n	1c9d0 <SystemInit+0x120>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   1c9c8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1c9cc:	2b00      	cmp	r3, #0
   1c9ce:	da2f      	bge.n	1ca30 <SystemInit+0x180>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
   1c9d0:	4b20      	ldr	r3, [pc, #128]	; (1ca54 <SystemInit+0x1a4>)
   1c9d2:	2201      	movs	r2, #1
   1c9d4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   1c9d8:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   1c9dc:	2a00      	cmp	r2, #0
   1c9de:	d0fb      	beq.n	1c9d8 <SystemInit+0x128>
            NRF_UICR->PSELRESET[0] = 18;
   1c9e0:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
   1c9e4:	2112      	movs	r1, #18
   1c9e6:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   1c9ea:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   1c9ee:	2a00      	cmp	r2, #0
   1c9f0:	d0fb      	beq.n	1c9ea <SystemInit+0x13a>
            NRF_UICR->PSELRESET[1] = 18;
   1c9f2:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1c9f6:	2212      	movs	r2, #18
   1c9f8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   1c9fc:	4b15      	ldr	r3, [pc, #84]	; (1ca54 <SystemInit+0x1a4>)
   1c9fe:	461a      	mov	r2, r3
   1ca00:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
   1ca04:	2900      	cmp	r1, #0
   1ca06:	d0fb      	beq.n	1ca00 <SystemInit+0x150>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
   1ca08:	2100      	movs	r1, #0
   1ca0a:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   1ca0e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   1ca12:	2b00      	cmp	r3, #0
   1ca14:	d0fb      	beq.n	1ca0e <SystemInit+0x15e>
   1ca16:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1ca1a:	490f      	ldr	r1, [pc, #60]	; (1ca58 <SystemInit+0x1a8>)
   1ca1c:	4b0f      	ldr	r3, [pc, #60]	; (1ca5c <SystemInit+0x1ac>)
   1ca1e:	68ca      	ldr	r2, [r1, #12]
   1ca20:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1ca24:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1ca26:	60cb      	str	r3, [r1, #12]
   1ca28:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   1ca2c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   1ca2e:	e7fd      	b.n	1ca2c <SystemInit+0x17c>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   1ca30:	4b0b      	ldr	r3, [pc, #44]	; (1ca60 <SystemInit+0x1b0>)
   1ca32:	4a0c      	ldr	r2, [pc, #48]	; (1ca64 <SystemInit+0x1b4>)
   1ca34:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   1ca36:	bd08      	pop	{r3, pc}
   1ca38:	4000c000 	.word	0x4000c000
   1ca3c:	4000568c 	.word	0x4000568c
   1ca40:	00038148 	.word	0x00038148
   1ca44:	4000f000 	.word	0x4000f000
   1ca48:	40000ee4 	.word	0x40000ee4
   1ca4c:	10000258 	.word	0x10000258
   1ca50:	40029640 	.word	0x40029640
   1ca54:	4001e000 	.word	0x4001e000
   1ca58:	e000ed00 	.word	0xe000ed00
   1ca5c:	05fa0004 	.word	0x05fa0004
   1ca60:	200006c4 	.word	0x200006c4
   1ca64:	03d09000 	.word	0x03d09000

0001ca68 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
   1ca68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1ca6a:	4b09      	ldr	r3, [pc, #36]	; (1ca90 <z_sys_init_run_level+0x28>)
   1ca6c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1ca70:	3001      	adds	r0, #1
			if (dev) {
				/* Initialization failed. Clear the API struct
				 * so that device_get_binding() will not succeed
				 * for it.
				 */
				dev->driver_api = NULL;
   1ca72:	2700      	movs	r7, #0
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1ca74:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   1ca78:	42a6      	cmp	r6, r4
   1ca7a:	d800      	bhi.n	1ca7e <z_sys_init_run_level+0x16>
			}
		}
	}
}
   1ca7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		retval = entry->init(dev);
   1ca7e:	e9d4 3500 	ldrd	r3, r5, [r4]
   1ca82:	4628      	mov	r0, r5
   1ca84:	4798      	blx	r3
		if (retval != 0) {
   1ca86:	b108      	cbz	r0, 1ca8c <z_sys_init_run_level+0x24>
			if (dev) {
   1ca88:	b105      	cbz	r5, 1ca8c <z_sys_init_run_level+0x24>
				dev->driver_api = NULL;
   1ca8a:	60af      	str	r7, [r5, #8]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1ca8c:	3408      	adds	r4, #8
   1ca8e:	e7f3      	b.n	1ca78 <z_sys_init_run_level+0x10>
   1ca90:	00024e34 	.word	0x00024e34

0001ca94 <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
   1ca94:	4b0f      	ldr	r3, [pc, #60]	; (1cad4 <z_impl_device_get_binding+0x40>)
{
   1ca96:	b570      	push	{r4, r5, r6, lr}
	for (dev = __device_start; dev != __device_end; dev++) {
   1ca98:	4c0f      	ldr	r4, [pc, #60]	; (1cad8 <z_impl_device_get_binding+0x44>)
{
   1ca9a:	4605      	mov	r5, r0
   1ca9c:	461e      	mov	r6, r3
	for (dev = __device_start; dev != __device_end; dev++) {
   1ca9e:	429c      	cmp	r4, r3
   1caa0:	d104      	bne.n	1caac <z_impl_device_get_binding+0x18>
		if (z_device_ready(dev) && (dev->name == name)) {
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
   1caa2:	4c0d      	ldr	r4, [pc, #52]	; (1cad8 <z_impl_device_get_binding+0x44>)
   1caa4:	42b4      	cmp	r4, r6
   1caa6:	d108      	bne.n	1caba <z_impl_device_get_binding+0x26>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
			return dev;
		}
	}

	return NULL;
   1caa8:	2400      	movs	r4, #0
   1caaa:	e010      	b.n	1cace <z_impl_device_get_binding+0x3a>
		if (z_device_ready(dev) && (dev->name == name)) {
   1caac:	68a2      	ldr	r2, [r4, #8]
   1caae:	b112      	cbz	r2, 1cab6 <z_impl_device_get_binding+0x22>
   1cab0:	6822      	ldr	r2, [r4, #0]
   1cab2:	42aa      	cmp	r2, r5
   1cab4:	d00b      	beq.n	1cace <z_impl_device_get_binding+0x3a>
	for (dev = __device_start; dev != __device_end; dev++) {
   1cab6:	3410      	adds	r4, #16
   1cab8:	e7f1      	b.n	1ca9e <z_impl_device_get_binding+0xa>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1caba:	68a3      	ldr	r3, [r4, #8]
   1cabc:	b90b      	cbnz	r3, 1cac2 <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
   1cabe:	3410      	adds	r4, #16
   1cac0:	e7f0      	b.n	1caa4 <z_impl_device_get_binding+0x10>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1cac2:	6821      	ldr	r1, [r4, #0]
   1cac4:	4628      	mov	r0, r5
   1cac6:	f003 f9b6 	bl	1fe36 <strcmp>
   1caca:	2800      	cmp	r0, #0
   1cacc:	d1f7      	bne.n	1cabe <z_impl_device_get_binding+0x2a>
}
   1cace:	4620      	mov	r0, r4
   1cad0:	bd70      	pop	{r4, r5, r6, pc}
   1cad2:	bf00      	nop
   1cad4:	200007b8 	.word	0x200007b8
   1cad8:	20000748 	.word	0x20000748

0001cadc <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
   1cadc:	b510      	push	{r4, lr}
   1cade:	4604      	mov	r4, r0
	z_impl_log_panic();
   1cae0:	f7e9 fd7a 	bl	65d8 <z_impl_log_panic>
   1cae4:	4b06      	ldr	r3, [pc, #24]	; (1cb00 <k_sys_fatal_error_handler+0x24>)
   1cae6:	4907      	ldr	r1, [pc, #28]	; (1cb04 <k_sys_fatal_error_handler+0x28>)
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
   1cae8:	4807      	ldr	r0, [pc, #28]	; (1cb08 <k_sys_fatal_error_handler+0x2c>)
   1caea:	1ac9      	subs	r1, r1, r3
   1caec:	08c9      	lsrs	r1, r1, #3
   1caee:	0189      	lsls	r1, r1, #6
   1caf0:	f041 0101 	orr.w	r1, r1, #1
   1caf4:	f001 fce9 	bl	1e4ca <log_0>
	arch_system_halt(reason);
   1caf8:	4620      	mov	r0, r4
   1cafa:	f005 ffc3 	bl	22a84 <arch_system_halt>
   1cafe:	bf00      	nop
   1cb00:	000236e8 	.word	0x000236e8
   1cb04:	000237f8 	.word	0x000237f8
   1cb08:	00026da6 	.word	0x00026da6

0001cb0c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1cb0c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1cb10:	4605      	mov	r5, r0
   1cb12:	460f      	mov	r7, r1
	__asm__ volatile(
   1cb14:	f04f 0320 	mov.w	r3, #32
   1cb18:	f3ef 8811 	mrs	r8, BASEPRI
   1cb1c:	f383 8811 	msr	BASEPRI, r3
   1cb20:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   1cb24:	f000 fe1e 	bl	1d764 <z_impl_k_current_get>
   1cb28:	4c21      	ldr	r4, [pc, #132]	; (1cbb0 <z_fatal_error+0xa4>)
   1cb2a:	4b22      	ldr	r3, [pc, #136]	; (1cbb4 <z_fatal_error+0xa8>)
   1cb2c:	1ae4      	subs	r4, r4, r3
   1cb2e:	2d04      	cmp	r5, #4
   1cb30:	ea4f 04d4 	mov.w	r4, r4, lsr #3
   1cb34:	bf96      	itet	ls
   1cb36:	4a20      	ldrls	r2, [pc, #128]	; (1cbb8 <z_fatal_error+0xac>)
	struct k_thread *thread = k_current_get();

	/* sanitycheck looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating sanitycheck
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   1cb38:	4a20      	ldrhi	r2, [pc, #128]	; (1cbbc <z_fatal_error+0xb0>)
   1cb3a:	f852 2025 	ldrls.w	r2, [r2, r5, lsl #2]
   1cb3e:	01a4      	lsls	r4, r4, #6
   1cb40:	f044 0301 	orr.w	r3, r4, #1
   1cb44:	4606      	mov	r6, r0
   1cb46:	f8ad 3000 	strh.w	r3, [sp]
   1cb4a:	481d      	ldr	r0, [pc, #116]	; (1cbc0 <z_fatal_error+0xb4>)
   1cb4c:	2300      	movs	r3, #0
   1cb4e:	4629      	mov	r1, r5
   1cb50:	f001 fcf5 	bl	1e53e <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   1cb54:	b147      	cbz	r7, 1cb68 <z_fatal_error+0x5c>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   1cb56:	69fb      	ldr	r3, [r7, #28]
   1cb58:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1cb5c:	b123      	cbz	r3, 1cb68 <z_fatal_error+0x5c>
		LOG_ERR("Fault during interrupt handling\n");
   1cb5e:	4819      	ldr	r0, [pc, #100]	; (1cbc4 <z_fatal_error+0xb8>)
   1cb60:	f044 0101 	orr.w	r1, r4, #1
   1cb64:	f001 fcb1 	bl	1e4ca <log_0>
	const char *thread_name = k_thread_name_get(thread);
   1cb68:	4630      	mov	r0, r6
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   1cb6a:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = k_thread_name_get(thread);
   1cb6e:	f006 fa57 	bl	23020 <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
   1cb72:	b1d0      	cbz	r0, 1cbaa <z_fatal_error+0x9e>
   1cb74:	7802      	ldrb	r2, [r0, #0]
		thread_name = "unknown";
   1cb76:	4b14      	ldr	r3, [pc, #80]	; (1cbc8 <z_fatal_error+0xbc>)
   1cb78:	2a00      	cmp	r2, #0
   1cb7a:	bf08      	it	eq
   1cb7c:	4618      	moveq	r0, r3
	LOG_ERR("Current thread: %p (%s)", thread,
   1cb7e:	f7e9 fba9 	bl	62d4 <log_strdup>
   1cb82:	4623      	mov	r3, r4
   1cb84:	4602      	mov	r2, r0
   1cb86:	4631      	mov	r1, r6
   1cb88:	4810      	ldr	r0, [pc, #64]	; (1cbcc <z_fatal_error+0xc0>)
   1cb8a:	f001 fcbf 	bl	1e50c <log_2>
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
   1cb8e:	4639      	mov	r1, r7
   1cb90:	4628      	mov	r0, r5
   1cb92:	f7ff ffa3 	bl	1cadc <k_sys_fatal_error_handler>
	__asm__ volatile(
   1cb96:	f388 8811 	msr	BASEPRI, r8
   1cb9a:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   1cb9e:	4630      	mov	r0, r6
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
   1cba0:	b002      	add	sp, #8
   1cba2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1cba6:	f7ea bfbf 	b.w	7b28 <z_impl_k_thread_abort>
		thread_name = "unknown";
   1cbaa:	4807      	ldr	r0, [pc, #28]	; (1cbc8 <z_fatal_error+0xbc>)
   1cbac:	e7e7      	b.n	1cb7e <z_fatal_error+0x72>
   1cbae:	bf00      	nop
   1cbb0:	000237f8 	.word	0x000237f8
   1cbb4:	000236e8 	.word	0x000236e8
   1cbb8:	00024e4c 	.word	0x00024e4c
   1cbbc:	00026db5 	.word	0x00026db5
   1cbc0:	00026dc3 	.word	0x00026dc3
   1cbc4:	00026deb 	.word	0x00026deb
   1cbc8:	00025807 	.word	0x00025807
   1cbcc:	00026e0c 	.word	0x00026e0c

0001cbd0 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   1cbd0:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   1cbd2:	4d0b      	ldr	r5, [pc, #44]	; (1cc00 <idle+0x30>)
	__asm__ volatile(
   1cbd4:	f04f 0220 	mov.w	r2, #32
   1cbd8:	f3ef 8311 	mrs	r3, BASEPRI
   1cbdc:	f382 8811 	msr	BASEPRI, r2
   1cbe0:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
   1cbe4:	f006 fab7 	bl	23156 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   1cbe8:	2101      	movs	r1, #1
   1cbea:	2802      	cmp	r0, #2
	int32_t ticks = z_get_next_timeout_expiry();
   1cbec:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   1cbee:	bfd8      	it	le
   1cbf0:	4608      	movle	r0, r1
   1cbf2:	f006 fac0 	bl	23176 <z_set_timeout_expiry>
	_kernel.idle = ticks;
   1cbf6:	622c      	str	r4, [r5, #32]
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   1cbf8:	f7ea fcc4 	bl	7584 <arch_cpu_idle>
}
   1cbfc:	e7ea      	b.n	1cbd4 <idle+0x4>
   1cbfe:	bf00      	nop
   1cc00:	2000a260 	.word	0x2000a260

0001cc04 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   1cc04:	4802      	ldr	r0, [pc, #8]	; (1cc10 <z_bss_zero+0xc>)
   1cc06:	4a03      	ldr	r2, [pc, #12]	; (1cc14 <z_bss_zero+0x10>)
   1cc08:	2100      	movs	r1, #0
   1cc0a:	1a12      	subs	r2, r2, r0
   1cc0c:	f003 b95a 	b.w	1fec4 <memset>
   1cc10:	20000a18 	.word	0x20000a18
   1cc14:	2000a894 	.word	0x2000a894

0001cc18 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   1cc18:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   1cc1a:	4806      	ldr	r0, [pc, #24]	; (1cc34 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   1cc1c:	4a06      	ldr	r2, [pc, #24]	; (1cc38 <z_data_copy+0x20>)
   1cc1e:	4907      	ldr	r1, [pc, #28]	; (1cc3c <z_data_copy+0x24>)
   1cc20:	1a12      	subs	r2, r2, r0
   1cc22:	f003 f924 	bl	1fe6e <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1cc26:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   1cc2a:	4a05      	ldr	r2, [pc, #20]	; (1cc40 <z_data_copy+0x28>)
   1cc2c:	4905      	ldr	r1, [pc, #20]	; (1cc44 <z_data_copy+0x2c>)
   1cc2e:	4806      	ldr	r0, [pc, #24]	; (1cc48 <z_data_copy+0x30>)
   1cc30:	f003 b91d 	b.w	1fe6e <memcpy>
   1cc34:	20000000 	.word	0x20000000
   1cc38:	20000a18 	.word	0x20000a18
   1cc3c:	00026ebc 	.word	0x00026ebc
   1cc40:	00000000 	.word	0x00000000
   1cc44:	00026ebc 	.word	0x00026ebc
   1cc48:	20000000 	.word	0x20000000

0001cc4c <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   1cc4c:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
   1cc4e:	4b0c      	ldr	r3, [pc, #48]	; (1cc80 <bg_thread_main+0x34>)
   1cc50:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1cc52:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   1cc54:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1cc56:	f7ff ff07 	bl	1ca68 <z_sys_init_run_level>
#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
			STRINGIFY(BUILD_VERSION), BOOT_DELAY_BANNER);
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
   1cc5a:	4a0a      	ldr	r2, [pc, #40]	; (1cc84 <bg_thread_main+0x38>)
   1cc5c:	490a      	ldr	r1, [pc, #40]	; (1cc88 <bg_thread_main+0x3c>)
   1cc5e:	480b      	ldr	r0, [pc, #44]	; (1cc8c <bg_thread_main+0x40>)
   1cc60:	f001 f973 	bl	1df4a <printk>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   1cc64:	2003      	movs	r0, #3
   1cc66:	f7ff feff 	bl	1ca68 <z_sys_init_run_level>

	z_init_static_threads();
   1cc6a:	f000 fe3b 	bl	1d8e4 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   1cc6e:	f7e9 f805 	bl	5c7c <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1cc72:	4a07      	ldr	r2, [pc, #28]	; (1cc90 <bg_thread_main+0x44>)
   1cc74:	7b13      	ldrb	r3, [r2, #12]
   1cc76:	f023 0301 	bic.w	r3, r3, #1
   1cc7a:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1cc7c:	bd08      	pop	{r3, pc}
   1cc7e:	bf00      	nop
   1cc80:	2000a891 	.word	0x2000a891
   1cc84:	000250b0 	.word	0x000250b0
   1cc88:	00026e6e 	.word	0x00026e6e
   1cc8c:	00026e75 	.word	0x00026e75
   1cc90:	20001bd0 	.word	0x20001bd0

0001cc94 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   1cc94:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
   1cc98:	b0a7      	sub	sp, #156	; 0x9c
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   1cc9a:	f7e9 fa73 	bl	6184 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp = (uint32_t)(Z_THREAD_STACK_BUFFER(z_interrupt_stacks[0])) +
   1cc9e:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 1cd94 <z_cstart+0x100>
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1cca2:	f389 8808 	msr	MSP, r9
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   1cca6:	4d34      	ldr	r5, [pc, #208]	; (1cd78 <z_cstart+0xe4>)
	_kernel.ready_q.cache = &z_main_thread;
   1cca8:	4e34      	ldr	r6, [pc, #208]	; (1cd7c <z_cstart+0xe8>)
   1ccaa:	696b      	ldr	r3, [r5, #20]
	z_setup_new_thread(&z_main_thread, z_main_stack,
   1ccac:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 1cd98 <z_cstart+0x104>
   1ccb0:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 1cd9c <z_cstart+0x108>
	z_setup_new_thread(thread, stack,
   1ccb4:	4f32      	ldr	r7, [pc, #200]	; (1cd80 <z_cstart+0xec>)
   1ccb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1ccba:	2400      	movs	r4, #0
   1ccbc:	616b      	str	r3, [r5, #20]
   1ccbe:	23e0      	movs	r3, #224	; 0xe0
   1ccc0:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   1ccc4:	77ec      	strb	r4, [r5, #31]
   1ccc6:	762c      	strb	r4, [r5, #24]
   1ccc8:	766c      	strb	r4, [r5, #25]
   1ccca:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1cccc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1ccce:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1ccd2:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1ccd4:	f7ea ff06 	bl	7ae4 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1ccd8:	f7ea fc4e 	bl	7578 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1ccdc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1cce0:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1cce2:	62eb      	str	r3, [r5, #44]	; 0x2c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = 0;
#endif

	_current_cpu->current = dummy_thread;
   1cce4:	4d27      	ldr	r5, [pc, #156]	; (1cd84 <z_cstart+0xf0>)
	dummy_thread->base.user_options = K_ESSENTIAL;
   1cce6:	f240 1301 	movw	r3, #257	; 0x101
   1ccea:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   1ccee:	ab06      	add	r3, sp, #24
   1ccf0:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1ccf2:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
   1ccf4:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
   1ccf8:	f7ff feb6 	bl	1ca68 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1ccfc:	2001      	movs	r0, #1
   1ccfe:	f7ff feb3 	bl	1ca68 <z_sys_init_run_level>
	z_setup_new_thread(&z_main_thread, z_main_stack,
   1cd02:	f04f 0b01 	mov.w	fp, #1
	z_sched_init();
   1cd06:	f000 fcb3 	bl	1d670 <z_sched_init>
	z_setup_new_thread(&z_main_thread, z_main_stack,
   1cd0a:	4b1f      	ldr	r3, [pc, #124]	; (1cd88 <z_cstart+0xf4>)
	_kernel.ready_q.cache = &z_main_thread;
   1cd0c:	626e      	str	r6, [r5, #36]	; 0x24
	z_setup_new_thread(&z_main_thread, z_main_stack,
   1cd0e:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1cd12:	4641      	mov	r1, r8
   1cd14:	9305      	str	r3, [sp, #20]
   1cd16:	4630      	mov	r0, r6
   1cd18:	4653      	mov	r3, sl
   1cd1a:	e9cd 4b03 	strd	r4, fp, [sp, #12]
   1cd1e:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1cd22:	9400      	str	r4, [sp, #0]
   1cd24:	f000 fd8c 	bl	1d840 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1cd28:	7b73      	ldrb	r3, [r6, #13]
	z_ready_thread(&z_main_thread);
   1cd2a:	4630      	mov	r0, r6
   1cd2c:	f023 0304 	bic.w	r3, r3, #4
   1cd30:	7373      	strb	r3, [r6, #13]
   1cd32:	f006 f8a7 	bl	22e84 <z_ready_thread>
	z_setup_new_thread(thread, stack,
   1cd36:	230f      	movs	r3, #15
   1cd38:	e9cd 4302 	strd	r4, r3, [sp, #8]
   1cd3c:	4913      	ldr	r1, [pc, #76]	; (1cd8c <z_cstart+0xf8>)
   1cd3e:	4b14      	ldr	r3, [pc, #80]	; (1cd90 <z_cstart+0xfc>)
   1cd40:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1cd44:	4638      	mov	r0, r7
   1cd46:	e9cd b404 	strd	fp, r4, [sp, #16]
   1cd4a:	e9cd 4400 	strd	r4, r4, [sp]
   1cd4e:	f000 fd77 	bl	1d840 <z_setup_new_thread>
   1cd52:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   1cd54:	60ef      	str	r7, [r5, #12]
   1cd56:	f023 0304 	bic.w	r3, r3, #4
   1cd5a:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   1cd5c:	f105 0318 	add.w	r3, r5, #24
	list->tail = (sys_dnode_t *)list;
   1cd60:	e9c5 3306 	strd	r3, r3, [r5, #24]
		_kernel.cpus[i].id = i;
   1cd64:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
   1cd66:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
   1cd6a:	4653      	mov	r3, sl
   1cd6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1cd70:	4641      	mov	r1, r8
   1cd72:	4630      	mov	r0, r6
   1cd74:	f7ea fbe4 	bl	7540 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1cd78:	e000ed00 	.word	0xe000ed00
   1cd7c:	20001bd0 	.word	0x20001bd0
   1cd80:	20001b50 	.word	0x20001b50
   1cd84:	2000a260 	.word	0x2000a260
   1cd88:	00026e9e 	.word	0x00026e9e
   1cd8c:	2000d4c0 	.word	0x2000d4c0
   1cd90:	0001cbd1 	.word	0x0001cbd1
   1cd94:	2000de00 	.word	0x2000de00
   1cd98:	0001cc4d 	.word	0x0001cc4d
   1cd9c:	2000ccc0 	.word	0x2000ccc0

0001cda0 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(struct device *unused)
{
   1cda0:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   1cda2:	4c06      	ldr	r4, [pc, #24]	; (1cdbc <statics_init+0x1c>)
   1cda4:	4d06      	ldr	r5, [pc, #24]	; (1cdc0 <statics_init+0x20>)
   1cda6:	42ac      	cmp	r4, r5
   1cda8:	d301      	bcc.n	1cdae <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   1cdaa:	2000      	movs	r0, #0
   1cdac:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   1cdae:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   1cdb2:	4620      	mov	r0, r4
   1cdb4:	f005 fe71 	bl	22a9a <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   1cdb8:	3414      	adds	r4, #20
   1cdba:	e7f4      	b.n	1cda6 <statics_init+0x6>
   1cdbc:	2000080c 	.word	0x2000080c
   1cdc0:	20000820 	.word	0x20000820

0001cdc4 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(struct device *dev)
{
   1cdc4:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1cdc6:	4b0e      	ldr	r3, [pc, #56]	; (1ce00 <init_mem_slab_module+0x3c>)
   1cdc8:	4c0e      	ldr	r4, [pc, #56]	; (1ce04 <init_mem_slab_module+0x40>)
   1cdca:	42a3      	cmp	r3, r4
   1cdcc:	d301      	bcc.n	1cdd2 <init_mem_slab_module+0xe>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
   1cdce:	2000      	movs	r0, #0
	return rc;
}
   1cdd0:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1cdd2:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   1cdd6:	ea41 0200 	orr.w	r2, r1, r0
   1cdda:	f012 0203 	ands.w	r2, r2, #3
   1cdde:	d10b      	bne.n	1cdf8 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   1cde0:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   1cde2:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1cde4:	42aa      	cmp	r2, r5
   1cde6:	d101      	bne.n	1cdec <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1cde8:	331c      	adds	r3, #28
   1cdea:	e7ee      	b.n	1cdca <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   1cdec:	695e      	ldr	r6, [r3, #20]
   1cdee:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   1cdf0:	3201      	adds	r2, #1
		slab->free_list = p;
   1cdf2:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   1cdf4:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   1cdf6:	e7f5      	b.n	1cde4 <init_mem_slab_module+0x20>
		return -EINVAL;
   1cdf8:	f06f 0015 	mvn.w	r0, #21
	return rc;
   1cdfc:	e7e8      	b.n	1cdd0 <init_mem_slab_module+0xc>
   1cdfe:	bf00      	nop
   1ce00:	200007b8 	.word	0x200007b8
   1ce04:	2000080c 	.word	0x2000080c

0001ce08 <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   1ce08:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   1ce0a:	460c      	mov	r4, r1
   1ce0c:	4616      	mov	r6, r2
   1ce0e:	461f      	mov	r7, r3
   1ce10:	f04f 0320 	mov.w	r3, #32
   1ce14:	f3ef 8111 	mrs	r1, BASEPRI
   1ce18:	f383 8811 	msr	BASEPRI, r3
   1ce1c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   1ce20:	6943      	ldr	r3, [r0, #20]
   1ce22:	b15b      	cbz	r3, 1ce3c <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
   1ce24:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   1ce26:	681b      	ldr	r3, [r3, #0]
   1ce28:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   1ce2a:	6983      	ldr	r3, [r0, #24]
   1ce2c:	3301      	adds	r3, #1
   1ce2e:	6183      	str	r3, [r0, #24]
		result = 0;
   1ce30:	2000      	movs	r0, #0
	__asm__ volatile(
   1ce32:	f381 8811 	msr	BASEPRI, r1
   1ce36:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   1ce3a:	e011      	b.n	1ce60 <k_mem_slab_alloc+0x58>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1ce3c:	ea56 0207 	orrs.w	r2, r6, r7
   1ce40:	d103      	bne.n	1ce4a <k_mem_slab_alloc+0x42>
		*mem = NULL;
   1ce42:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   1ce44:	f06f 000b 	mvn.w	r0, #11
   1ce48:	e7f3      	b.n	1ce32 <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   1ce4a:	4602      	mov	r2, r0
   1ce4c:	e9cd 6700 	strd	r6, r7, [sp]
   1ce50:	4804      	ldr	r0, [pc, #16]	; (1ce64 <k_mem_slab_alloc+0x5c>)
   1ce52:	f000 fbb5 	bl	1d5c0 <z_pend_curr>
		if (result == 0) {
   1ce56:	b918      	cbnz	r0, 1ce60 <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
   1ce58:	4b03      	ldr	r3, [pc, #12]	; (1ce68 <k_mem_slab_alloc+0x60>)
   1ce5a:	689b      	ldr	r3, [r3, #8]
   1ce5c:	695b      	ldr	r3, [r3, #20]
   1ce5e:	6023      	str	r3, [r4, #0]
}
   1ce60:	b002      	add	sp, #8
   1ce62:	bdd0      	pop	{r4, r6, r7, pc}
   1ce64:	2000a892 	.word	0x2000a892
   1ce68:	2000a260 	.word	0x2000a260

0001ce6c <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   1ce6c:	b570      	push	{r4, r5, r6, lr}
   1ce6e:	4604      	mov	r4, r0
   1ce70:	460d      	mov	r5, r1
	__asm__ volatile(
   1ce72:	f04f 0320 	mov.w	r3, #32
   1ce76:	f3ef 8611 	mrs	r6, BASEPRI
   1ce7a:	f383 8811 	msr	BASEPRI, r3
   1ce7e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   1ce82:	f006 f875 	bl	22f70 <z_unpend_first_thread>

	if (pending_thread != NULL) {
   1ce86:	b158      	cbz	r0, 1cea0 <k_mem_slab_free+0x34>
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   1ce88:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   1ce8a:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1ce8c:	2100      	movs	r1, #0
   1ce8e:	6781      	str	r1, [r0, #120]	; 0x78
		z_ready_thread(pending_thread);
   1ce90:	f005 fff8 	bl	22e84 <z_ready_thread>
		z_reschedule(&lock, key);
   1ce94:	4631      	mov	r1, r6
   1ce96:	4809      	ldr	r0, [pc, #36]	; (1cebc <k_mem_slab_free+0x50>)
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
   1ce98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   1ce9c:	f005 bfaa 	b.w	22df4 <z_reschedule>
		**(char ***)mem = slab->free_list;
   1cea0:	682b      	ldr	r3, [r5, #0]
   1cea2:	6962      	ldr	r2, [r4, #20]
   1cea4:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
   1cea6:	682b      	ldr	r3, [r5, #0]
   1cea8:	6163      	str	r3, [r4, #20]
		slab->num_used--;
   1ceaa:	69a3      	ldr	r3, [r4, #24]
   1ceac:	3b01      	subs	r3, #1
   1ceae:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   1ceb0:	f386 8811 	msr	BASEPRI, r6
   1ceb4:	f3bf 8f6f 	isb	sy
}
   1ceb8:	bd70      	pop	{r4, r5, r6, pc}
   1ceba:	bf00      	nop
   1cebc:	2000a892 	.word	0x2000a892

0001cec0 <z_thread_malloc>:
#else
#define _HEAP_MEM_POOL	NULL
#endif

void *z_thread_malloc(size_t size)
{
   1cec0:	b510      	push	{r4, lr}
   1cec2:	4604      	mov	r4, r0
	void *ret;
	struct k_mem_pool *pool;

	if (k_is_in_isr()) {
   1cec4:	f006 f8a1 	bl	2300a <k_is_in_isr>
   1cec8:	b948      	cbnz	r0, 1cede <z_thread_malloc+0x1e>
		pool = _HEAP_MEM_POOL;
	} else {
		pool = _current->resource_pool;
   1ceca:	4b06      	ldr	r3, [pc, #24]	; (1cee4 <z_thread_malloc+0x24>)
   1cecc:	689b      	ldr	r3, [r3, #8]
   1cece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	}

	if (pool) {
   1ced0:	b13b      	cbz	r3, 1cee2 <z_thread_malloc+0x22>
		ret = k_mem_pool_malloc(pool, size);
   1ced2:	4621      	mov	r1, r4
   1ced4:	4618      	mov	r0, r3
	} else {
		ret = NULL;
	}

	return ret;
}
   1ced6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ret = k_mem_pool_malloc(pool, size);
   1ceda:	f005 be7e 	b.w	22bda <k_mem_pool_malloc>
		pool = _HEAP_MEM_POOL;
   1cede:	4b02      	ldr	r3, [pc, #8]	; (1cee8 <z_thread_malloc+0x28>)
   1cee0:	e7f7      	b.n	1ced2 <z_thread_malloc+0x12>
}
   1cee2:	bd10      	pop	{r4, pc}
   1cee4:	2000a260 	.word	0x2000a260
   1cee8:	200006c8 	.word	0x200006c8

0001ceec <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   1ceec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1cef0:	4604      	mov	r4, r0
   1cef2:	4616      	mov	r6, r2
   1cef4:	461f      	mov	r7, r3
	__asm__ volatile(
   1cef6:	f04f 0320 	mov.w	r3, #32
   1cefa:	f3ef 8811 	mrs	r8, BASEPRI
   1cefe:	f383 8811 	msr	BASEPRI, r3
   1cf02:	f3bf 8f6f 	isb	sy
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	sys_trace_void(SYS_TRACE_ID_MUTEX_LOCK);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1cf06:	68c3      	ldr	r3, [r0, #12]
   1cf08:	4a32      	ldr	r2, [pc, #200]	; (1cfd4 <z_impl_k_mutex_lock+0xe8>)
   1cf0a:	b16b      	cbz	r3, 1cf28 <z_impl_k_mutex_lock+0x3c>
   1cf0c:	6880      	ldr	r0, [r0, #8]
   1cf0e:	6891      	ldr	r1, [r2, #8]
   1cf10:	4288      	cmp	r0, r1
   1cf12:	d019      	beq.n	1cf48 <z_impl_k_mutex_lock+0x5c>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   1cf14:	ea56 0307 	orrs.w	r3, r6, r7
   1cf18:	d118      	bne.n	1cf4c <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   1cf1a:	f388 8811 	msr	BASEPRI, r8
   1cf1e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   1cf22:	f06f 000f 	mvn.w	r0, #15
   1cf26:	e00c      	b.n	1cf42 <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   1cf28:	6891      	ldr	r1, [r2, #8]
   1cf2a:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1cf2e:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   1cf30:	3301      	adds	r3, #1
   1cf32:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   1cf34:	6893      	ldr	r3, [r2, #8]
   1cf36:	60a3      	str	r3, [r4, #8]
   1cf38:	f388 8811 	msr	BASEPRI, r8
   1cf3c:	f3bf 8f6f 	isb	sy
		return 0;
   1cf40:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   1cf42:	b002      	add	sp, #8
   1cf44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   1cf48:	6921      	ldr	r1, [r4, #16]
   1cf4a:	e7f0      	b.n	1cf2e <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1cf4c:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1cf50:	f991 100e 	ldrsb.w	r1, [r1, #14]
   1cf54:	4299      	cmp	r1, r3
   1cf56:	bfa8      	it	ge
   1cf58:	4619      	movge	r1, r3
   1cf5a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1cf5e:	4299      	cmp	r1, r3
   1cf60:	da2c      	bge.n	1cfbc <z_impl_k_mutex_lock+0xd0>
		return z_set_prio(mutex->owner, new_prio);
   1cf62:	f000 fb41 	bl	1d5e8 <z_set_prio>
   1cf66:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1cf68:	e9cd 6700 	strd	r6, r7, [sp]
   1cf6c:	481a      	ldr	r0, [pc, #104]	; (1cfd8 <z_impl_k_mutex_lock+0xec>)
   1cf6e:	4622      	mov	r2, r4
   1cf70:	4641      	mov	r1, r8
   1cf72:	f000 fb25 	bl	1d5c0 <z_pend_curr>
	if (got_mutex == 0) {
   1cf76:	2800      	cmp	r0, #0
   1cf78:	d0e3      	beq.n	1cf42 <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   1cf7a:	f04f 0320 	mov.w	r3, #32
   1cf7e:	f3ef 8611 	mrs	r6, BASEPRI
   1cf82:	f383 8811 	msr	BASEPRI, r3
   1cf86:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1cf8a:	6823      	ldr	r3, [r4, #0]
   1cf8c:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1cf8e:	42a3      	cmp	r3, r4
   1cf90:	d007      	beq.n	1cfa2 <z_impl_k_mutex_lock+0xb6>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1cf92:	b133      	cbz	r3, 1cfa2 <z_impl_k_mutex_lock+0xb6>
   1cf94:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1cf98:	4299      	cmp	r1, r3
   1cf9a:	bfa8      	it	ge
   1cf9c:	4619      	movge	r1, r3
   1cf9e:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1cfa2:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   1cfa4:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1cfa8:	4299      	cmp	r1, r3
   1cfaa:	d109      	bne.n	1cfc0 <z_impl_k_mutex_lock+0xd4>
	if (resched) {
   1cfac:	b16d      	cbz	r5, 1cfca <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   1cfae:	480a      	ldr	r0, [pc, #40]	; (1cfd8 <z_impl_k_mutex_lock+0xec>)
   1cfb0:	4631      	mov	r1, r6
   1cfb2:	f005 ff1f 	bl	22df4 <z_reschedule>
	return -EAGAIN;
   1cfb6:	f06f 000a 	mvn.w	r0, #10
   1cfba:	e7c2      	b.n	1cf42 <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   1cfbc:	2500      	movs	r5, #0
   1cfbe:	e7d3      	b.n	1cf68 <z_impl_k_mutex_lock+0x7c>
		return z_set_prio(mutex->owner, new_prio);
   1cfc0:	f000 fb12 	bl	1d5e8 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1cfc4:	2800      	cmp	r0, #0
   1cfc6:	d1f2      	bne.n	1cfae <z_impl_k_mutex_lock+0xc2>
   1cfc8:	e7f0      	b.n	1cfac <z_impl_k_mutex_lock+0xc0>
	__asm__ volatile(
   1cfca:	f386 8811 	msr	BASEPRI, r6
   1cfce:	f3bf 8f6f 	isb	sy
   1cfd2:	e7f0      	b.n	1cfb6 <z_impl_k_mutex_lock+0xca>
   1cfd4:	2000a260 	.word	0x2000a260
   1cfd8:	2000a892 	.word	0x2000a892

0001cfdc <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   1cfdc:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	CHECKIF(mutex->owner == NULL) {
   1cfde:	6883      	ldr	r3, [r0, #8]
{
   1cfe0:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   1cfe2:	2b00      	cmp	r3, #0
   1cfe4:	d036      	beq.n	1d054 <z_impl_k_mutex_unlock+0x78>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   1cfe6:	4a1e      	ldr	r2, [pc, #120]	; (1d060 <z_impl_k_mutex_unlock+0x84>)
   1cfe8:	6892      	ldr	r2, [r2, #8]
   1cfea:	4293      	cmp	r3, r2
   1cfec:	d135      	bne.n	1d05a <z_impl_k_mutex_unlock+0x7e>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
   1cfee:	7bda      	ldrb	r2, [r3, #15]
   1cff0:	3a01      	subs	r2, #1
   1cff2:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   1cff4:	68c3      	ldr	r3, [r0, #12]
   1cff6:	2b01      	cmp	r3, #1
   1cff8:	d005      	beq.n	1d006 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   1cffa:	3b01      	subs	r3, #1
   1cffc:	60c3      	str	r3, [r0, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   1cffe:	f000 f8f7 	bl	1d1f0 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
   1d002:	2000      	movs	r0, #0
}
   1d004:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1d006:	f04f 0320 	mov.w	r3, #32
   1d00a:	f3ef 8511 	mrs	r5, BASEPRI
   1d00e:	f383 8811 	msr	BASEPRI, r3
   1d012:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1d016:	6901      	ldr	r1, [r0, #16]
   1d018:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
   1d01a:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1d01e:	4299      	cmp	r1, r3
   1d020:	d001      	beq.n	1d026 <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
   1d022:	f000 fae1 	bl	1d5e8 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1d026:	4620      	mov	r0, r4
   1d028:	f005 ffa2 	bl	22f70 <z_unpend_first_thread>
	mutex->owner = new_owner;
   1d02c:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1d02e:	b158      	cbz	r0, 1d048 <z_impl_k_mutex_unlock+0x6c>
		mutex->owner_orig_prio = new_owner->base.prio;
   1d030:	f990 200e 	ldrsb.w	r2, [r0, #14]
   1d034:	6122      	str	r2, [r4, #16]
   1d036:	2200      	movs	r2, #0
   1d038:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
   1d03a:	f005 ff23 	bl	22e84 <z_ready_thread>
		z_reschedule(&lock, key);
   1d03e:	4809      	ldr	r0, [pc, #36]	; (1d064 <z_impl_k_mutex_unlock+0x88>)
   1d040:	4629      	mov	r1, r5
   1d042:	f005 fed7 	bl	22df4 <z_reschedule>
   1d046:	e7da      	b.n	1cffe <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   1d048:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   1d04a:	f385 8811 	msr	BASEPRI, r5
   1d04e:	f3bf 8f6f 	isb	sy
   1d052:	e7d4      	b.n	1cffe <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   1d054:	f06f 0015 	mvn.w	r0, #21
   1d058:	e7d4      	b.n	1d004 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   1d05a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d05e:	e7d1      	b.n	1d004 <z_impl_k_mutex_unlock+0x28>
   1d060:	2000a260 	.word	0x2000a260
   1d064:	2000a892 	.word	0x2000a892

0001d068 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   1d068:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1d06a:	4616      	mov	r6, r2
   1d06c:	461f      	mov	r7, r3
	__asm__ volatile(
   1d06e:	f04f 0320 	mov.w	r3, #32
   1d072:	f3ef 8511 	mrs	r5, BASEPRI
   1d076:	f383 8811 	msr	BASEPRI, r3
   1d07a:	f3bf 8f6f 	isb	sy
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_sflist_is_empty(sys_sflist_t *list);

Z_GENLIST_IS_EMPTY(sflist)
   1d07e:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1d080:	b19c      	cbz	r4, 1d0aa <z_impl_k_queue_get+0x42>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1d082:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1d084:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1d086:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1d08a:	4294      	cmp	r4, r2
	list->head = node;
   1d08c:	6003      	str	r3, [r0, #0]
	list->tail = node;
   1d08e:	bf08      	it	eq
   1d090:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1d092:	2101      	movs	r1, #1
   1d094:	4620      	mov	r0, r4
   1d096:	f005 fe1d 	bl	22cd4 <z_queue_node_peek>
   1d09a:	4604      	mov	r4, r0
	__asm__ volatile(
   1d09c:	f385 8811 	msr	BASEPRI, r5
   1d0a0:	f3bf 8f6f 	isb	sy
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   1d0a4:	4620      	mov	r0, r4
   1d0a6:	b003      	add	sp, #12
   1d0a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1d0aa:	ea56 0307 	orrs.w	r3, r6, r7
   1d0ae:	d0f5      	beq.n	1d09c <z_impl_k_queue_get+0x34>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1d0b0:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   1d0b4:	e9cd 6700 	strd	r6, r7, [sp]
   1d0b8:	4629      	mov	r1, r5
   1d0ba:	4610      	mov	r0, r2
   1d0bc:	f000 fa80 	bl	1d5c0 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   1d0c0:	2800      	cmp	r0, #0
   1d0c2:	d1ef      	bne.n	1d0a4 <z_impl_k_queue_get+0x3c>
   1d0c4:	4b01      	ldr	r3, [pc, #4]	; (1d0cc <z_impl_k_queue_get+0x64>)
   1d0c6:	689b      	ldr	r3, [r3, #8]
   1d0c8:	695c      	ldr	r4, [r3, #20]
   1d0ca:	e7eb      	b.n	1d0a4 <z_impl_k_queue_get+0x3c>
   1d0cc:	2000a260 	.word	0x2000a260

0001d0d0 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   1d0d0:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   1d0d2:	4c08      	ldr	r4, [pc, #32]	; (1d0f4 <z_reset_time_slice+0x24>)
   1d0d4:	6823      	ldr	r3, [r4, #0]
   1d0d6:	b15b      	cbz	r3, 1d0f0 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   1d0d8:	f7e9 ff18 	bl	6f0c <z_clock_elapsed>
   1d0dc:	4603      	mov	r3, r0
   1d0de:	6820      	ldr	r0, [r4, #0]
   1d0e0:	4a05      	ldr	r2, [pc, #20]	; (1d0f8 <z_reset_time_slice+0x28>)
   1d0e2:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
   1d0e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   1d0e8:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   1d0ea:	2100      	movs	r1, #0
   1d0ec:	f006 b843 	b.w	23176 <z_set_timeout_expiry>
}
   1d0f0:	bd10      	pop	{r4, pc}
   1d0f2:	bf00      	nop
   1d0f4:	2000a298 	.word	0x2000a298
   1d0f8:	2000a260 	.word	0x2000a260

0001d0fc <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   1d0fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d0fe:	4605      	mov	r5, r0
   1d100:	460c      	mov	r4, r1
	__asm__ volatile(
   1d102:	f04f 0320 	mov.w	r3, #32
   1d106:	f3ef 8611 	mrs	r6, BASEPRI
   1d10a:	f383 8811 	msr	BASEPRI, r3
   1d10e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   1d112:	4b0d      	ldr	r3, [pc, #52]	; (1d148 <k_sched_time_slice_set+0x4c>)
   1d114:	2200      	movs	r2, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   1d116:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   1d11a:	f240 30e7 	movw	r0, #999	; 0x3e7
   1d11e:	2100      	movs	r1, #0
   1d120:	611a      	str	r2, [r3, #16]
   1d122:	fbe7 0105 	umlal	r0, r1, r7, r5
   1d126:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1d12a:	2300      	movs	r3, #0
   1d12c:	f7e3 fc86 	bl	a3c <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   1d130:	4b06      	ldr	r3, [pc, #24]	; (1d14c <k_sched_time_slice_set+0x50>)
   1d132:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   1d134:	4b06      	ldr	r3, [pc, #24]	; (1d150 <k_sched_time_slice_set+0x54>)
   1d136:	601c      	str	r4, [r3, #0]
		z_reset_time_slice();
   1d138:	f7ff ffca 	bl	1d0d0 <z_reset_time_slice>
	__asm__ volatile(
   1d13c:	f386 8811 	msr	BASEPRI, r6
   1d140:	f3bf 8f6f 	isb	sy
	}
}
   1d144:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d146:	bf00      	nop
   1d148:	2000a260 	.word	0x2000a260
   1d14c:	2000a298 	.word	0x2000a298
   1d150:	2000a294 	.word	0x2000a294

0001d154 <k_sched_lock>:
	__asm__ volatile(
   1d154:	f04f 0320 	mov.w	r3, #32
   1d158:	f3ef 8111 	mrs	r1, BASEPRI
   1d15c:	f383 8811 	msr	BASEPRI, r3
   1d160:	f3bf 8f6f 	isb	sy
   1d164:	4b04      	ldr	r3, [pc, #16]	; (1d178 <k_sched_lock+0x24>)
   1d166:	689a      	ldr	r2, [r3, #8]
   1d168:	7bd3      	ldrb	r3, [r2, #15]
   1d16a:	3b01      	subs	r3, #1
   1d16c:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   1d16e:	f381 8811 	msr	BASEPRI, r1
   1d172:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   1d176:	4770      	bx	lr
   1d178:	2000a260 	.word	0x2000a260

0001d17c <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   1d17c:	4b09      	ldr	r3, [pc, #36]	; (1d1a4 <z_priq_dumb_remove+0x28>)
   1d17e:	f103 0228 	add.w	r2, r3, #40	; 0x28
   1d182:	4282      	cmp	r2, r0
   1d184:	d105      	bne.n	1d192 <z_priq_dumb_remove+0x16>
   1d186:	689b      	ldr	r3, [r3, #8]
   1d188:	428b      	cmp	r3, r1
   1d18a:	d102      	bne.n	1d192 <z_priq_dumb_remove+0x16>
   1d18c:	7b4b      	ldrb	r3, [r1, #13]
   1d18e:	06db      	lsls	r3, r3, #27
   1d190:	d106      	bne.n	1d1a0 <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   1d192:	e9d1 3200 	ldrd	r3, r2, [r1]
   1d196:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1d198:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1d19a:	2300      	movs	r3, #0
	node->prev = NULL;
   1d19c:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   1d1a0:	4770      	bx	lr
   1d1a2:	bf00      	nop
   1d1a4:	2000a260 	.word	0x2000a260

0001d1a8 <update_cache>:
{
   1d1a8:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   1d1aa:	4c10      	ldr	r4, [pc, #64]	; (1d1ec <update_cache+0x44>)
{
   1d1ac:	4606      	mov	r6, r0
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   1d1ae:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1d1b2:	f005 fe5d 	bl	22e70 <z_priq_dumb_best>
	if (_current->base.thread_state & _THREAD_ABORTING) {
   1d1b6:	68a3      	ldr	r3, [r4, #8]
   1d1b8:	7b59      	ldrb	r1, [r3, #13]
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   1d1ba:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
   1d1bc:	0688      	lsls	r0, r1, #26
		_current->base.thread_state |= _THREAD_DEAD;
   1d1be:	bf44      	itt	mi
   1d1c0:	f041 0108 	orrmi.w	r1, r1, #8
   1d1c4:	7359      	strbmi	r1, [r3, #13]
	return thread ? thread : _current_cpu->idle_thread;
   1d1c6:	b905      	cbnz	r5, 1d1ca <update_cache+0x22>
   1d1c8:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   1d1ca:	b94e      	cbnz	r6, 1d1e0 <update_cache+0x38>
	if (z_is_thread_prevented_from_running(_current)) {
   1d1cc:	7b5a      	ldrb	r2, [r3, #13]
   1d1ce:	06d2      	lsls	r2, r2, #27
   1d1d0:	d106      	bne.n	1d1e0 <update_cache+0x38>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1d1d2:	69aa      	ldr	r2, [r5, #24]
   1d1d4:	b922      	cbnz	r2, 1d1e0 <update_cache+0x38>
	if (is_preempt(_current) || is_metairq(thread)) {
   1d1d6:	89da      	ldrh	r2, [r3, #14]
   1d1d8:	2a7f      	cmp	r2, #127	; 0x7f
   1d1da:	d901      	bls.n	1d1e0 <update_cache+0x38>
		_kernel.ready_q.cache = _current;
   1d1dc:	6263      	str	r3, [r4, #36]	; 0x24
}
   1d1de:	bd70      	pop	{r4, r5, r6, pc}
		if (thread != _current) {
   1d1e0:	42ab      	cmp	r3, r5
   1d1e2:	d001      	beq.n	1d1e8 <update_cache+0x40>
			z_reset_time_slice();
   1d1e4:	f7ff ff74 	bl	1d0d0 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   1d1e8:	6265      	str	r5, [r4, #36]	; 0x24
}
   1d1ea:	e7f8      	b.n	1d1de <update_cache+0x36>
   1d1ec:	2000a260 	.word	0x2000a260

0001d1f0 <k_sched_unlock>:
{
   1d1f0:	b510      	push	{r4, lr}
	__asm__ volatile(
   1d1f2:	f04f 0320 	mov.w	r3, #32
   1d1f6:	f3ef 8411 	mrs	r4, BASEPRI
   1d1fa:	f383 8811 	msr	BASEPRI, r3
   1d1fe:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   1d202:	4b08      	ldr	r3, [pc, #32]	; (1d224 <k_sched_unlock+0x34>)
   1d204:	689a      	ldr	r2, [r3, #8]
   1d206:	7bd3      	ldrb	r3, [r2, #15]
   1d208:	3301      	adds	r3, #1
   1d20a:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   1d20c:	2000      	movs	r0, #0
   1d20e:	f7ff ffcb 	bl	1d1a8 <update_cache>
	__asm__ volatile(
   1d212:	f384 8811 	msr	BASEPRI, r4
   1d216:	f3bf 8f6f 	isb	sy
}
   1d21a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   1d21e:	f005 be00 	b.w	22e22 <z_reschedule_unlocked>
   1d222:	bf00      	nop
   1d224:	2000a260 	.word	0x2000a260

0001d228 <ready_thread>:
{
   1d228:	b470      	push	{r4, r5, r6}
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1d22a:	7b43      	ldrb	r3, [r0, #13]
   1d22c:	06db      	lsls	r3, r3, #27
   1d22e:	d12a      	bne.n	1d286 <ready_thread+0x5e>

int z_abort_timeout(struct _timeout *to);

static inline bool z_is_inactive_timeout(struct _timeout *t)
{
	return !sys_dnode_is_linked(&t->node);
   1d230:	6983      	ldr	r3, [r0, #24]
	if (z_is_thread_ready(thread)) {
   1d232:	bb43      	cbnz	r3, 1d286 <ready_thread+0x5e>
	return list->head == list;
   1d234:	4a15      	ldr	r2, [pc, #84]	; (1d28c <ready_thread+0x64>)
   1d236:	4611      	mov	r1, r2
   1d238:	f851 4f28 	ldr.w	r4, [r1, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d23c:	428c      	cmp	r4, r1
   1d23e:	bf18      	it	ne
   1d240:	4623      	movne	r3, r4
   1d242:	2b00      	cmp	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1d244:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
   1d246:	bf38      	it	cc
   1d248:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1d24a:	b1b3      	cbz	r3, 1d27a <ready_thread+0x52>
	if (thread_1->base.prio < thread_2->base.prio) {
   1d24c:	f990 600e 	ldrsb.w	r6, [r0, #14]
   1d250:	f993 500e 	ldrsb.w	r5, [r3, #14]
   1d254:	42ae      	cmp	r6, r5
   1d256:	db03      	blt.n	1d260 <ready_thread+0x38>
	return (node == list->tail) ? NULL : node->next;
   1d258:	42a3      	cmp	r3, r4
   1d25a:	d00e      	beq.n	1d27a <ready_thread+0x52>
   1d25c:	681b      	ldr	r3, [r3, #0]
   1d25e:	e7f4      	b.n	1d24a <ready_thread+0x22>
	node->prev = successor->prev;
   1d260:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1d262:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
   1d266:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   1d268:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
   1d26a:	7b43      	ldrb	r3, [r0, #13]
   1d26c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1d270:	7343      	strb	r3, [r0, #13]
}
   1d272:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   1d274:	2000      	movs	r0, #0
   1d276:	f7ff bf97 	b.w	1d1a8 <update_cache>
	node->prev = list->tail;
   1d27a:	e9c0 1400 	strd	r1, r4, [r0]
	list->tail->next = node;
   1d27e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   1d280:	6018      	str	r0, [r3, #0]
	list->tail = node;
   1d282:	62d0      	str	r0, [r2, #44]	; 0x2c
}
   1d284:	e7f1      	b.n	1d26a <ready_thread+0x42>
}
   1d286:	bc70      	pop	{r4, r5, r6}
   1d288:	4770      	bx	lr
   1d28a:	bf00      	nop
   1d28c:	2000a260 	.word	0x2000a260

0001d290 <z_sched_start>:
{
   1d290:	b510      	push	{r4, lr}
	__asm__ volatile(
   1d292:	f04f 0220 	mov.w	r2, #32
   1d296:	f3ef 8411 	mrs	r4, BASEPRI
   1d29a:	f382 8811 	msr	BASEPRI, r2
   1d29e:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
   1d2a2:	7b42      	ldrb	r2, [r0, #13]
   1d2a4:	0751      	lsls	r1, r2, #29
   1d2a6:	d404      	bmi.n	1d2b2 <z_sched_start+0x22>
	__asm__ volatile(
   1d2a8:	f384 8811 	msr	BASEPRI, r4
   1d2ac:	f3bf 8f6f 	isb	sy
}
   1d2b0:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1d2b2:	f022 0204 	bic.w	r2, r2, #4
   1d2b6:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   1d2b8:	f7ff ffb6 	bl	1d228 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   1d2bc:	4621      	mov	r1, r4
   1d2be:	4802      	ldr	r0, [pc, #8]	; (1d2c8 <z_sched_start+0x38>)
}
   1d2c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   1d2c4:	f005 bd96 	b.w	22df4 <z_reschedule>
   1d2c8:	2000a892 	.word	0x2000a892

0001d2cc <z_move_thread_to_end_of_prio_q>:
{
   1d2cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d2ce:	4601      	mov	r1, r0
	__asm__ volatile(
   1d2d0:	f04f 0320 	mov.w	r3, #32
   1d2d4:	f3ef 8411 	mrs	r4, BASEPRI
   1d2d8:	f383 8811 	msr	BASEPRI, r3
   1d2dc:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   1d2e0:	f990 300d 	ldrsb.w	r3, [r0, #13]
   1d2e4:	2b00      	cmp	r3, #0
   1d2e6:	da02      	bge.n	1d2ee <z_move_thread_to_end_of_prio_q+0x22>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   1d2e8:	4819      	ldr	r0, [pc, #100]	; (1d350 <z_move_thread_to_end_of_prio_q+0x84>)
   1d2ea:	f7ff ff47 	bl	1d17c <z_priq_dumb_remove>
	return list->head == list;
   1d2ee:	4a19      	ldr	r2, [pc, #100]	; (1d354 <z_move_thread_to_end_of_prio_q+0x88>)
   1d2f0:	4610      	mov	r0, r2
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1d2f2:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
	return list->head == list;
   1d2f4:	f850 3f28 	ldr.w	r3, [r0, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d2f8:	4283      	cmp	r3, r0
   1d2fa:	bf08      	it	eq
   1d2fc:	2300      	moveq	r3, #0
   1d2fe:	2b00      	cmp	r3, #0
   1d300:	bf38      	it	cc
   1d302:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1d304:	b1eb      	cbz	r3, 1d342 <z_move_thread_to_end_of_prio_q+0x76>
	if (thread_1->base.prio < thread_2->base.prio) {
   1d306:	f991 700e 	ldrsb.w	r7, [r1, #14]
   1d30a:	f993 600e 	ldrsb.w	r6, [r3, #14]
   1d30e:	42b7      	cmp	r7, r6
   1d310:	db03      	blt.n	1d31a <z_move_thread_to_end_of_prio_q+0x4e>
	return (node == list->tail) ? NULL : node->next;
   1d312:	429d      	cmp	r5, r3
   1d314:	d015      	beq.n	1d342 <z_move_thread_to_end_of_prio_q+0x76>
   1d316:	681b      	ldr	r3, [r3, #0]
   1d318:	e7f4      	b.n	1d304 <z_move_thread_to_end_of_prio_q+0x38>
	node->prev = successor->prev;
   1d31a:	6858      	ldr	r0, [r3, #4]
	node->next = successor;
   1d31c:	e9c1 3000 	strd	r3, r0, [r1]
	successor->prev->next = node;
   1d320:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   1d322:	6059      	str	r1, [r3, #4]
	thread->base.thread_state |= states;
   1d324:	7b4b      	ldrb	r3, [r1, #13]
		update_cache(thread == _current);
   1d326:	6890      	ldr	r0, [r2, #8]
   1d328:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1d32c:	734b      	strb	r3, [r1, #13]
   1d32e:	1a43      	subs	r3, r0, r1
   1d330:	4258      	negs	r0, r3
   1d332:	4158      	adcs	r0, r3
   1d334:	f7ff ff38 	bl	1d1a8 <update_cache>
	__asm__ volatile(
   1d338:	f384 8811 	msr	BASEPRI, r4
   1d33c:	f3bf 8f6f 	isb	sy
}
   1d340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	node->prev = list->tail;
   1d342:	e9c1 0500 	strd	r0, r5, [r1]
	list->tail->next = node;
   1d346:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   1d348:	6019      	str	r1, [r3, #0]
	list->tail = node;
   1d34a:	62d1      	str	r1, [r2, #44]	; 0x2c
}
   1d34c:	e7ea      	b.n	1d324 <z_move_thread_to_end_of_prio_q+0x58>
   1d34e:	bf00      	nop
   1d350:	2000a288 	.word	0x2000a288
   1d354:	2000a260 	.word	0x2000a260

0001d358 <z_time_slice>:
{
   1d358:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
   1d35a:	4a15      	ldr	r2, [pc, #84]	; (1d3b0 <z_time_slice+0x58>)
   1d35c:	4b15      	ldr	r3, [pc, #84]	; (1d3b4 <z_time_slice+0x5c>)
   1d35e:	6814      	ldr	r4, [r2, #0]
{
   1d360:	4601      	mov	r1, r0
	if (pending_current == _current) {
   1d362:	6898      	ldr	r0, [r3, #8]
   1d364:	42a0      	cmp	r0, r4
   1d366:	461c      	mov	r4, r3
   1d368:	d103      	bne.n	1d372 <z_time_slice+0x1a>
}
   1d36a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			z_reset_time_slice();
   1d36e:	f7ff beaf 	b.w	1d0d0 <z_reset_time_slice>
	pending_current = NULL;
   1d372:	2500      	movs	r5, #0
   1d374:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
   1d376:	4a10      	ldr	r2, [pc, #64]	; (1d3b8 <z_time_slice+0x60>)
   1d378:	6812      	ldr	r2, [r2, #0]
   1d37a:	b1b2      	cbz	r2, 1d3aa <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
   1d37c:	89c2      	ldrh	r2, [r0, #14]
   1d37e:	2a7f      	cmp	r2, #127	; 0x7f
   1d380:	d813      	bhi.n	1d3aa <z_time_slice+0x52>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   1d382:	4a0e      	ldr	r2, [pc, #56]	; (1d3bc <z_time_slice+0x64>)
   1d384:	f990 500e 	ldrsb.w	r5, [r0, #14]
   1d388:	6812      	ldr	r2, [r2, #0]
   1d38a:	4295      	cmp	r5, r2
   1d38c:	db0d      	blt.n	1d3aa <z_time_slice+0x52>
		&& !z_is_idle_thread_object(thread)
   1d38e:	4a0c      	ldr	r2, [pc, #48]	; (1d3c0 <z_time_slice+0x68>)
   1d390:	4290      	cmp	r0, r2
   1d392:	d00a      	beq.n	1d3aa <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
   1d394:	6982      	ldr	r2, [r0, #24]
   1d396:	b942      	cbnz	r2, 1d3aa <z_time_slice+0x52>
		if (ticks >= _current_cpu->slice_ticks) {
   1d398:	691a      	ldr	r2, [r3, #16]
   1d39a:	428a      	cmp	r2, r1
   1d39c:	dc02      	bgt.n	1d3a4 <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
   1d39e:	f7ff ff95 	bl	1d2cc <z_move_thread_to_end_of_prio_q>
   1d3a2:	e7e2      	b.n	1d36a <z_time_slice+0x12>
			_current_cpu->slice_ticks -= ticks;
   1d3a4:	1a52      	subs	r2, r2, r1
   1d3a6:	611a      	str	r2, [r3, #16]
}
   1d3a8:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
   1d3aa:	2300      	movs	r3, #0
   1d3ac:	6123      	str	r3, [r4, #16]
   1d3ae:	e7fb      	b.n	1d3a8 <z_time_slice+0x50>
   1d3b0:	2000a290 	.word	0x2000a290
   1d3b4:	2000a260 	.word	0x2000a260
   1d3b8:	2000a298 	.word	0x2000a298
   1d3bc:	2000a294 	.word	0x2000a294
   1d3c0:	20001b50 	.word	0x20001b50

0001d3c4 <z_impl_k_thread_suspend>:
{
   1d3c4:	b570      	push	{r4, r5, r6, lr}
   1d3c6:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1d3c8:	3018      	adds	r0, #24
   1d3ca:	f005 feae 	bl	2312a <z_abort_timeout>
	__asm__ volatile(
   1d3ce:	f04f 0320 	mov.w	r3, #32
   1d3d2:	f3ef 8611 	mrs	r6, BASEPRI
   1d3d6:	f383 8811 	msr	BASEPRI, r3
   1d3da:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   1d3de:	f994 300d 	ldrsb.w	r3, [r4, #13]
   1d3e2:	2b00      	cmp	r3, #0
   1d3e4:	da07      	bge.n	1d3f6 <z_impl_k_thread_suspend+0x32>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   1d3e6:	480f      	ldr	r0, [pc, #60]	; (1d424 <z_impl_k_thread_suspend+0x60>)
   1d3e8:	4621      	mov	r1, r4
   1d3ea:	f7ff fec7 	bl	1d17c <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1d3ee:	7b63      	ldrb	r3, [r4, #13]
   1d3f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1d3f4:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   1d3f6:	4d0c      	ldr	r5, [pc, #48]	; (1d428 <z_impl_k_thread_suspend+0x64>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1d3f8:	7b63      	ldrb	r3, [r4, #13]
   1d3fa:	68a8      	ldr	r0, [r5, #8]
   1d3fc:	f043 0310 	orr.w	r3, r3, #16
   1d400:	7363      	strb	r3, [r4, #13]
   1d402:	1b03      	subs	r3, r0, r4
   1d404:	4258      	negs	r0, r3
   1d406:	4158      	adcs	r0, r3
   1d408:	f7ff fece 	bl	1d1a8 <update_cache>
	__asm__ volatile(
   1d40c:	f386 8811 	msr	BASEPRI, r6
   1d410:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   1d414:	68ab      	ldr	r3, [r5, #8]
   1d416:	42a3      	cmp	r3, r4
   1d418:	d103      	bne.n	1d422 <z_impl_k_thread_suspend+0x5e>
}
   1d41a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   1d41e:	f005 bd00 	b.w	22e22 <z_reschedule_unlocked>
}
   1d422:	bd70      	pop	{r4, r5, r6, pc}
   1d424:	2000a288 	.word	0x2000a288
   1d428:	2000a260 	.word	0x2000a260

0001d42c <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
   1d42c:	6e03      	ldr	r3, [r0, #96]	; 0x60
{
   1d42e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d432:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   1d434:	b103      	cbz	r3, 1d438 <z_thread_single_abort+0xc>
		thread->fn_abort();
   1d436:	4798      	blx	r3
   1d438:	f104 0018 	add.w	r0, r4, #24
   1d43c:	f005 fe75 	bl	2312a <z_abort_timeout>
	__asm__ volatile(
   1d440:	f04f 0320 	mov.w	r3, #32
   1d444:	f3ef 8611 	mrs	r6, BASEPRI
   1d448:	f383 8811 	msr	BASEPRI, r3
   1d44c:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1d450:	7b63      	ldrb	r3, [r4, #13]
   1d452:	06d8      	lsls	r0, r3, #27
   1d454:	d123      	bne.n	1d49e <z_thread_single_abort+0x72>
		if (z_is_thread_ready(thread)) {
   1d456:	69a2      	ldr	r2, [r4, #24]
   1d458:	bb0a      	cbnz	r2, 1d49e <z_thread_single_abort+0x72>
			if (z_is_thread_queued(thread)) {
   1d45a:	0619      	lsls	r1, r3, #24
   1d45c:	d507      	bpl.n	1d46e <z_thread_single_abort+0x42>
				_priq_run_remove(&_kernel.ready_q.runq,
   1d45e:	481f      	ldr	r0, [pc, #124]	; (1d4dc <z_thread_single_abort+0xb0>)
   1d460:	4621      	mov	r1, r4
   1d462:	f7ff fe8b 	bl	1d17c <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1d466:	7b63      	ldrb	r3, [r4, #13]
   1d468:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1d46c:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   1d46e:	4b1c      	ldr	r3, [pc, #112]	; (1d4e0 <z_thread_single_abort+0xb4>)
   1d470:	6898      	ldr	r0, [r3, #8]
   1d472:	1b02      	subs	r2, r0, r4
   1d474:	4250      	negs	r0, r2
   1d476:	4150      	adcs	r0, r2
   1d478:	f7ff fe96 	bl	1d1a8 <update_cache>
		thread->base.thread_state |= mask;
   1d47c:	7b63      	ldrb	r3, [r4, #13]
   1d47e:	f043 0308 	orr.w	r3, r3, #8
   1d482:	7363      	strb	r3, [r4, #13]
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   1d484:	f104 0830 	add.w	r8, r4, #48	; 0x30
			waiter->base.pended_on = NULL;
   1d488:	2700      	movs	r7, #0
	return list->head == list;
   1d48a:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d48c:	4545      	cmp	r5, r8
   1d48e:	d000      	beq.n	1d492 <z_thread_single_abort+0x66>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
   1d490:	b995      	cbnz	r5, 1d4b8 <z_thread_single_abort+0x8c>
	__asm__ volatile(
   1d492:	f386 8811 	msr	BASEPRI, r6
   1d496:	f3bf 8f6f 	isb	sy
}
   1d49a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (z_is_thread_pending(thread)) {
   1d49e:	079b      	lsls	r3, r3, #30
   1d4a0:	d5ec      	bpl.n	1d47c <z_thread_single_abort+0x50>
				_priq_wait_remove(&pended_on(thread)->waitq,
   1d4a2:	68a0      	ldr	r0, [r4, #8]
   1d4a4:	4621      	mov	r1, r4
   1d4a6:	f7ff fe69 	bl	1d17c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1d4aa:	7b63      	ldrb	r3, [r4, #13]
   1d4ac:	f023 0302 	bic.w	r3, r3, #2
   1d4b0:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   1d4b2:	2300      	movs	r3, #0
   1d4b4:	60a3      	str	r3, [r4, #8]
   1d4b6:	e7e1      	b.n	1d47c <z_thread_single_abort+0x50>
   1d4b8:	f105 0018 	add.w	r0, r5, #24
   1d4bc:	f005 fe35 	bl	2312a <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
   1d4c0:	68a8      	ldr	r0, [r5, #8]
   1d4c2:	4629      	mov	r1, r5
   1d4c4:	f7ff fe5a 	bl	1d17c <z_priq_dumb_remove>
   1d4c8:	7b6b      	ldrb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
   1d4ca:	60af      	str	r7, [r5, #8]
   1d4cc:	f023 0302 	bic.w	r3, r3, #2
   1d4d0:	736b      	strb	r3, [r5, #13]
   1d4d2:	67af      	str	r7, [r5, #120]	; 0x78
			ready_thread(waiter);
   1d4d4:	4628      	mov	r0, r5
   1d4d6:	f7ff fea7 	bl	1d228 <ready_thread>
   1d4da:	e7d6      	b.n	1d48a <z_thread_single_abort+0x5e>
   1d4dc:	2000a288 	.word	0x2000a288
   1d4e0:	2000a260 	.word	0x2000a260

0001d4e4 <unready_thread>:
{
   1d4e4:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   1d4e6:	f990 300d 	ldrsb.w	r3, [r0, #13]
   1d4ea:	2b00      	cmp	r3, #0
{
   1d4ec:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1d4ee:	da06      	bge.n	1d4fe <unready_thread+0x1a>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   1d4f0:	4807      	ldr	r0, [pc, #28]	; (1d510 <unready_thread+0x2c>)
   1d4f2:	f7ff fe43 	bl	1d17c <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1d4f6:	7b4b      	ldrb	r3, [r1, #13]
   1d4f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1d4fc:	734b      	strb	r3, [r1, #13]
	update_cache(thread == _current);
   1d4fe:	4b05      	ldr	r3, [pc, #20]	; (1d514 <unready_thread+0x30>)
   1d500:	6898      	ldr	r0, [r3, #8]
   1d502:	1a43      	subs	r3, r0, r1
   1d504:	4258      	negs	r0, r3
   1d506:	4158      	adcs	r0, r3
}
   1d508:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   1d50c:	f7ff be4c 	b.w	1d1a8 <update_cache>
   1d510:	2000a288 	.word	0x2000a288
   1d514:	2000a260 	.word	0x2000a260

0001d518 <z_tick_sleep.part.0>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(int32_t ticks)
   1d518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d51a:	4605      	mov	r5, r0
#else
	ticks += _TICK_ALIGN;
	timeout = (k_ticks_t) ticks;
#endif

	expected_wakeup_time = ticks + z_tick_get_32();
   1d51c:	f005 fe45 	bl	231aa <z_tick_get_32>
   1d520:	182c      	adds	r4, r5, r0
	__asm__ volatile(
   1d522:	f04f 0320 	mov.w	r3, #32
   1d526:	f3ef 8711 	mrs	r7, BASEPRI
   1d52a:	f383 8811 	msr	BASEPRI, r3
   1d52e:	f3bf 8f6f 	isb	sy
	 */
	struct k_spinlock local_lock = {};
	k_spinlock_key_t key = k_spin_lock(&local_lock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   1d532:	4e0d      	ldr	r6, [pc, #52]	; (1d568 <z_tick_sleep.part.0+0x50>)
   1d534:	4b0d      	ldr	r3, [pc, #52]	; (1d56c <z_tick_sleep.part.0+0x54>)
   1d536:	68b0      	ldr	r0, [r6, #8]
   1d538:	6018      	str	r0, [r3, #0]
#endif
	z_remove_thread_from_ready_q(_current);
   1d53a:	f005 fcde 	bl	22efa <z_remove_thread_from_ready_q>
	z_add_thread_timeout(_current, timeout);
   1d53e:	68b0      	ldr	r0, [r6, #8]
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   1d540:	490b      	ldr	r1, [pc, #44]	; (1d570 <z_tick_sleep.part.0+0x58>)
   1d542:	462a      	mov	r2, r5
   1d544:	17eb      	asrs	r3, r5, #31
   1d546:	3018      	adds	r0, #24
   1d548:	f000 face 	bl	1dae8 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   1d54c:	68b2      	ldr	r2, [r6, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1d54e:	7b53      	ldrb	r3, [r2, #13]
   1d550:	f043 0310 	orr.w	r3, r3, #16
   1d554:	7353      	strb	r3, [r2, #13]
	ret = arch_swap(key);
   1d556:	4638      	mov	r0, r7
   1d558:	f7e9 ff24 	bl	73a4 <arch_swap>

	(void)z_swap(&local_lock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
   1d55c:	f005 fe25 	bl	231aa <z_tick_get_32>
   1d560:	1a20      	subs	r0, r4, r0
		return ticks;
	}
#endif

	return 0;
}
   1d562:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   1d566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d568:	2000a260 	.word	0x2000a260
   1d56c:	2000a290 	.word	0x2000a290
   1d570:	00022ea5 	.word	0x00022ea5

0001d574 <pend>:
{
   1d574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d578:	4606      	mov	r6, r0
   1d57a:	4614      	mov	r4, r2
   1d57c:	461d      	mov	r5, r3
   1d57e:	f04f 0320 	mov.w	r3, #32
   1d582:	f3ef 8711 	mrs	r7, BASEPRI
   1d586:	f383 8811 	msr	BASEPRI, r3
   1d58a:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   1d58e:	f005 fcc4 	bl	22f1a <add_to_waitq_locked>
	__asm__ volatile(
   1d592:	f387 8811 	msr	BASEPRI, r7
   1d596:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1d59a:	1c6b      	adds	r3, r5, #1
   1d59c:	bf08      	it	eq
   1d59e:	f1b4 3fff 	cmpeq.w	r4, #4294967295	; 0xffffffff
   1d5a2:	d008      	beq.n	1d5b6 <pend+0x42>
   1d5a4:	4622      	mov	r2, r4
   1d5a6:	462b      	mov	r3, r5
   1d5a8:	f106 0018 	add.w	r0, r6, #24
   1d5ac:	4903      	ldr	r1, [pc, #12]	; (1d5bc <pend+0x48>)
}
   1d5ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1d5b2:	f000 ba99 	b.w	1dae8 <z_add_timeout>
   1d5b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d5ba:	bf00      	nop
   1d5bc:	00022ea5 	.word	0x00022ea5

0001d5c0 <z_pend_curr>:
{
   1d5c0:	b510      	push	{r4, lr}
	pending_current = _current;
   1d5c2:	4b07      	ldr	r3, [pc, #28]	; (1d5e0 <z_pend_curr+0x20>)
   1d5c4:	6898      	ldr	r0, [r3, #8]
   1d5c6:	4b07      	ldr	r3, [pc, #28]	; (1d5e4 <z_pend_curr+0x24>)
{
   1d5c8:	460c      	mov	r4, r1
	pending_current = _current;
   1d5ca:	6018      	str	r0, [r3, #0]
{
   1d5cc:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   1d5ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1d5d2:	f7ff ffcf 	bl	1d574 <pend>
   1d5d6:	4620      	mov	r0, r4
}
   1d5d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1d5dc:	f7e9 bee2 	b.w	73a4 <arch_swap>
   1d5e0:	2000a260 	.word	0x2000a260
   1d5e4:	2000a290 	.word	0x2000a290

0001d5e8 <z_set_prio>:
{
   1d5e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d5ec:	4604      	mov	r4, r0
	__asm__ volatile(
   1d5ee:	f04f 0320 	mov.w	r3, #32
   1d5f2:	f3ef 8811 	mrs	r8, BASEPRI
   1d5f6:	f383 8811 	msr	BASEPRI, r3
   1d5fa:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1d5fe:	7b43      	ldrb	r3, [r0, #13]
   1d600:	06db      	lsls	r3, r3, #27
   1d602:	b24e      	sxtb	r6, r1
   1d604:	d12e      	bne.n	1d664 <z_set_prio+0x7c>
	return !sys_dnode_is_linked(&t->node);
   1d606:	6985      	ldr	r5, [r0, #24]
		if (need_sched) {
   1d608:	bb65      	cbnz	r5, 1d664 <z_set_prio+0x7c>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   1d60a:	4f18      	ldr	r7, [pc, #96]	; (1d66c <z_set_prio+0x84>)
   1d60c:	4621      	mov	r1, r4
   1d60e:	f107 0028 	add.w	r0, r7, #40	; 0x28
   1d612:	f7ff fdb3 	bl	1d17c <z_priq_dumb_remove>
	return list->head == list;
   1d616:	6abb      	ldr	r3, [r7, #40]	; 0x28
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1d618:	6afa      	ldr	r2, [r7, #44]	; 0x2c
				thread->base.prio = prio;
   1d61a:	73a6      	strb	r6, [r4, #14]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d61c:	4283      	cmp	r3, r0
   1d61e:	bf18      	it	ne
   1d620:	461d      	movne	r5, r3
   1d622:	2d00      	cmp	r5, #0
   1d624:	bf38      	it	cc
   1d626:	2500      	movcc	r5, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1d628:	b1b5      	cbz	r5, 1d658 <z_set_prio+0x70>
	if (thread_1->base.prio < thread_2->base.prio) {
   1d62a:	f995 100e 	ldrsb.w	r1, [r5, #14]
   1d62e:	42b1      	cmp	r1, r6
   1d630:	dc03      	bgt.n	1d63a <z_set_prio+0x52>
	return (node == list->tail) ? NULL : node->next;
   1d632:	42aa      	cmp	r2, r5
   1d634:	d010      	beq.n	1d658 <z_set_prio+0x70>
   1d636:	682d      	ldr	r5, [r5, #0]
   1d638:	e7f6      	b.n	1d628 <z_set_prio+0x40>
	node->prev = successor->prev;
   1d63a:	686a      	ldr	r2, [r5, #4]
	node->next = successor;
   1d63c:	e9c4 5200 	strd	r5, r2, [r4]
	successor->prev->next = node;
   1d640:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1d642:	606c      	str	r4, [r5, #4]
			update_cache(1);
   1d644:	2001      	movs	r0, #1
   1d646:	f7ff fdaf 	bl	1d1a8 <update_cache>
   1d64a:	2001      	movs	r0, #1
	__asm__ volatile(
   1d64c:	f388 8811 	msr	BASEPRI, r8
   1d650:	f3bf 8f6f 	isb	sy
}
   1d654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	node->prev = list->tail;
   1d658:	e9c4 0200 	strd	r0, r2, [r4]
	list->tail->next = node;
   1d65c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1d65e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1d660:	62fc      	str	r4, [r7, #44]	; 0x2c
}
   1d662:	e7ef      	b.n	1d644 <z_set_prio+0x5c>
			thread->base.prio = prio;
   1d664:	73a6      	strb	r6, [r4, #14]
   1d666:	2000      	movs	r0, #0
   1d668:	e7f0      	b.n	1d64c <z_set_prio+0x64>
   1d66a:	bf00      	nop
   1d66c:	2000a260 	.word	0x2000a260

0001d670 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   1d670:	4b04      	ldr	r3, [pc, #16]	; (1d684 <z_sched_init+0x14>)
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   1d672:	2100      	movs	r1, #0
   1d674:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   1d678:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   1d67c:	4608      	mov	r0, r1
   1d67e:	f7ff bd3d 	b.w	1d0fc <k_sched_time_slice_set>
   1d682:	bf00      	nop
   1d684:	2000a260 	.word	0x2000a260

0001d688 <z_impl_k_yield>:
{
   1d688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
   1d68a:	4c24      	ldr	r4, [pc, #144]	; (1d71c <z_impl_k_yield+0x94>)
   1d68c:	4b24      	ldr	r3, [pc, #144]	; (1d720 <z_impl_k_yield+0x98>)
   1d68e:	68a2      	ldr	r2, [r4, #8]
   1d690:	429a      	cmp	r2, r3
   1d692:	d030      	beq.n	1d6f6 <z_impl_k_yield+0x6e>
	__asm__ volatile(
   1d694:	f04f 0320 	mov.w	r3, #32
   1d698:	f3ef 8511 	mrs	r5, BASEPRI
   1d69c:	f383 8811 	msr	BASEPRI, r3
   1d6a0:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
   1d6a4:	68a1      	ldr	r1, [r4, #8]
   1d6a6:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1d6aa:	f7ff fd67 	bl	1d17c <z_priq_dumb_remove>
	return list->head == list;
   1d6ae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
			_priq_run_add(&_kernel.ready_q.runq, _current);
   1d6b0:	68a2      	ldr	r2, [r4, #8]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1d6b2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d6b4:	4283      	cmp	r3, r0
   1d6b6:	bf08      	it	eq
   1d6b8:	2300      	moveq	r3, #0
   1d6ba:	2b00      	cmp	r3, #0
   1d6bc:	bf38      	it	cc
   1d6be:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1d6c0:	b32b      	cbz	r3, 1d70e <z_impl_k_yield+0x86>
	if (thread_1->base.prio < thread_2->base.prio) {
   1d6c2:	f992 700e 	ldrsb.w	r7, [r2, #14]
   1d6c6:	f993 600e 	ldrsb.w	r6, [r3, #14]
   1d6ca:	42b7      	cmp	r7, r6
   1d6cc:	db03      	blt.n	1d6d6 <z_impl_k_yield+0x4e>
	return (node == list->tail) ? NULL : node->next;
   1d6ce:	428b      	cmp	r3, r1
   1d6d0:	d01d      	beq.n	1d70e <z_impl_k_yield+0x86>
   1d6d2:	681b      	ldr	r3, [r3, #0]
   1d6d4:	e7f4      	b.n	1d6c0 <z_impl_k_yield+0x38>
	node->prev = successor->prev;
   1d6d6:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   1d6d8:	e9c2 3100 	strd	r3, r1, [r2]
	successor->prev->next = node;
   1d6dc:	600a      	str	r2, [r1, #0]
	successor->prev = node;
   1d6de:	605a      	str	r2, [r3, #4]
	thread->base.thread_state |= states;
   1d6e0:	7b53      	ldrb	r3, [r2, #13]
   1d6e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1d6e6:	7353      	strb	r3, [r2, #13]
			update_cache(1);
   1d6e8:	2001      	movs	r0, #1
   1d6ea:	f7ff fd5d 	bl	1d1a8 <update_cache>
	__asm__ volatile(
   1d6ee:	f385 8811 	msr	BASEPRI, r5
   1d6f2:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1d6f6:	f04f 0320 	mov.w	r3, #32
   1d6fa:	f3ef 8011 	mrs	r0, BASEPRI
   1d6fe:	f383 8811 	msr	BASEPRI, r3
   1d702:	f3bf 8f6f 	isb	sy
}
   1d706:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1d70a:	f7e9 be4b 	b.w	73a4 <arch_swap>
	node->prev = list->tail;
   1d70e:	e9c2 0100 	strd	r0, r1, [r2]
	list->tail->next = node;
   1d712:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1d714:	601a      	str	r2, [r3, #0]
	list->tail = node;
   1d716:	62e2      	str	r2, [r4, #44]	; 0x2c
}
   1d718:	e7e2      	b.n	1d6e0 <z_impl_k_yield+0x58>
   1d71a:	bf00      	nop
   1d71c:	2000a260 	.word	0x2000a260
   1d720:	20001b50 	.word	0x20001b50

0001d724 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   1d724:	460b      	mov	r3, r1
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1d726:	3301      	adds	r3, #1
   1d728:	bf08      	it	eq
   1d72a:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   1d72e:	b510      	push	{r4, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1d730:	d106      	bne.n	1d740 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   1d732:	4b0b      	ldr	r3, [pc, #44]	; (1d760 <z_impl_k_sleep+0x3c>)
   1d734:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1d736:	f7ff fe45 	bl	1d3c4 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   1d73a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	ticks = timeout.ticks;
#endif

	ticks = z_tick_sleep(ticks);
	return k_ticks_to_ms_floor64(ticks);
}
   1d73e:	bd10      	pop	{r4, pc}
	ticks = z_tick_sleep(ticks);
   1d740:	4604      	mov	r4, r0
	if (ticks == 0) {
   1d742:	b948      	cbnz	r0, 1d758 <z_impl_k_sleep+0x34>
	z_impl_k_yield();
   1d744:	f7ff ffa0 	bl	1d688 <z_impl_k_yield>
			return (t * to_hz + off) / from_hz;
   1d748:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   1d74c:	fb84 3400 	smull	r3, r4, r4, r0
   1d750:	0bd8      	lsrs	r0, r3, #15
   1d752:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   1d756:	e7f2      	b.n	1d73e <z_impl_k_sleep+0x1a>
   1d758:	f7ff fede 	bl	1d518 <z_tick_sleep.part.0>
   1d75c:	4604      	mov	r4, r0
   1d75e:	e7f3      	b.n	1d748 <z_impl_k_sleep+0x24>
   1d760:	2000a260 	.word	0x2000a260

0001d764 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   1d764:	4b01      	ldr	r3, [pc, #4]	; (1d76c <z_impl_k_current_get+0x8>)
   1d766:	6898      	ldr	r0, [r3, #8]
   1d768:	4770      	bx	lr
   1d76a:	bf00      	nop
   1d76c:	2000a260 	.word	0x2000a260

0001d770 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1d770:	b538      	push	{r3, r4, r5, lr}
   1d772:	4604      	mov	r4, r0
   1d774:	f04f 0320 	mov.w	r3, #32
   1d778:	f3ef 8511 	mrs	r5, BASEPRI
   1d77c:	f383 8811 	msr	BASEPRI, r3
   1d780:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread = z_unpend_first_thread(&sem->wait_q);
   1d784:	f005 fbf4 	bl	22f70 <z_unpend_first_thread>

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);

	if (thread != NULL) {
   1d788:	b148      	cbz	r0, 1d79e <z_impl_k_sem_give+0x2e>
   1d78a:	2200      	movs	r2, #0
   1d78c:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   1d78e:	f005 fb79 	bl	22e84 <z_ready_thread>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	z_reschedule(&lock, key);
   1d792:	4629      	mov	r1, r5
   1d794:	4808      	ldr	r0, [pc, #32]	; (1d7b8 <z_impl_k_sem_give+0x48>)
}
   1d796:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   1d79a:	f005 bb2b 	b.w	22df4 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1d79e:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   1d7a2:	429a      	cmp	r2, r3
   1d7a4:	bf18      	it	ne
   1d7a6:	3301      	addne	r3, #1
   1d7a8:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1d7aa:	2102      	movs	r1, #2
   1d7ac:	f104 0010 	add.w	r0, r4, #16
   1d7b0:	f005 fe68 	bl	23484 <z_handle_obj_poll_events>
}
   1d7b4:	e7ed      	b.n	1d792 <z_impl_k_sem_give+0x22>
   1d7b6:	bf00      	nop
   1d7b8:	2000a892 	.word	0x2000a892

0001d7bc <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   1d7bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1d7be:	4614      	mov	r4, r2
   1d7c0:	461d      	mov	r5, r3
   1d7c2:	f04f 0320 	mov.w	r3, #32
   1d7c6:	f3ef 8111 	mrs	r1, BASEPRI
   1d7ca:	f383 8811 	msr	BASEPRI, r3
   1d7ce:	f3bf 8f6f 	isb	sy
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (likely(sem->count > 0U)) {
   1d7d2:	6883      	ldr	r3, [r0, #8]
   1d7d4:	b143      	cbz	r3, 1d7e8 <z_impl_k_sem_take+0x2c>
		sem->count--;
   1d7d6:	3b01      	subs	r3, #1
   1d7d8:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
   1d7da:	f381 8811 	msr	BASEPRI, r1
   1d7de:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   1d7e2:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   1d7e4:	b003      	add	sp, #12
   1d7e6:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1d7e8:	ea54 0305 	orrs.w	r3, r4, r5
   1d7ec:	d106      	bne.n	1d7fc <z_impl_k_sem_take+0x40>
   1d7ee:	f381 8811 	msr	BASEPRI, r1
   1d7f2:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   1d7f6:	f06f 000f 	mvn.w	r0, #15
   1d7fa:	e7f3      	b.n	1d7e4 <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1d7fc:	4602      	mov	r2, r0
   1d7fe:	e9cd 4500 	strd	r4, r5, [sp]
   1d802:	4802      	ldr	r0, [pc, #8]	; (1d80c <z_impl_k_sem_take+0x50>)
   1d804:	f7ff fedc 	bl	1d5c0 <z_pend_curr>
	return ret;
   1d808:	e7ec      	b.n	1d7e4 <z_impl_k_sem_take+0x28>
   1d80a:	bf00      	nop
   1d80c:	2000a892 	.word	0x2000a892

0001d810 <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   1d810:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   1d812:	4c08      	ldr	r4, [pc, #32]	; (1d834 <k_sys_work_q_init+0x24>)
   1d814:	4908      	ldr	r1, [pc, #32]	; (1d838 <k_sys_work_q_init+0x28>)
   1d816:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1d81a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1d81e:	4620      	mov	r0, r4
   1d820:	f000 f8be 	bl	1d9a0 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   1d824:	4905      	ldr	r1, [pc, #20]	; (1d83c <k_sys_work_q_init+0x2c>)
   1d826:	f104 0018 	add.w	r0, r4, #24
   1d82a:	f005 fbf6 	bl	2301a <z_impl_k_thread_name_set>
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   1d82e:	2000      	movs	r0, #0
   1d830:	bd10      	pop	{r4, pc}
   1d832:	bf00      	nop
   1d834:	20001c50 	.word	0x20001c50
   1d838:	2000de00 	.word	0x2000de00
   1d83c:	00026ea6 	.word	0x00026ea6

0001d840 <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, uint32_t options, const char *name)
{
   1d840:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d842:	b087      	sub	sp, #28
   1d844:	e9dd 670f 	ldrd	r6, r7, [sp, #60]	; 0x3c
	sys_dlist_init(&w->waitq);
   1d848:	f100 0530 	add.w	r5, r0, #48	; 0x30
#endif
#endif
	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);

	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1d84c:	e9cd 6703 	strd	r6, r7, [sp, #12]
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
	thread_base->thread_state = (uint8_t)initial_state;

	thread_base->prio = priority;
   1d850:	7386      	strb	r6, [r0, #14]
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1d852:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   1d854:	9602      	str	r6, [sp, #8]
	list->tail = (sys_dnode_t *)list;
   1d856:	e9c0 550c 	strd	r5, r5, [r0, #48]	; 0x30
   1d85a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   1d85c:	9601      	str	r6, [sp, #4]
	thread_base->thread_state = (uint8_t)initial_state;
   1d85e:	2504      	movs	r5, #4
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1d860:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	thread_base->thread_state = (uint8_t)initial_state;
   1d862:	7345      	strb	r5, [r0, #13]

	thread_base->sched_locked = 0U;
   1d864:	2500      	movs	r5, #0
	node->prev = NULL;
   1d866:	e9c0 5506 	strd	r5, r5, [r0, #24]
	thread_base->user_options = (uint8_t)options;
   1d86a:	7307      	strb	r7, [r0, #12]
	thread_base->sched_locked = 0U;
   1d86c:	73c5      	strb	r5, [r0, #15]
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1d86e:	9600      	str	r6, [sp, #0]
{
   1d870:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1d872:	f7e9 fe3d 	bl	74f0 <arch_new_thread>
	if (!_current) {
   1d876:	4b04      	ldr	r3, [pc, #16]	; (1d888 <z_setup_new_thread+0x48>)
   1d878:	689b      	ldr	r3, [r3, #8]
	new_thread->fn_abort = NULL;
   1d87a:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
	if (!_current) {
   1d87e:	b103      	cbz	r3, 1d882 <z_setup_new_thread+0x42>
	new_thread->resource_pool = _current->resource_pool;
   1d880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   1d882:	6723      	str	r3, [r4, #112]	; 0x70
}
   1d884:	b007      	add	sp, #28
   1d886:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d888:	2000a260 	.word	0x2000a260

0001d88c <z_impl_k_thread_create>:
{
   1d88c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d88e:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1d890:	2500      	movs	r5, #0
   1d892:	9505      	str	r5, [sp, #20]
   1d894:	9d10      	ldr	r5, [sp, #64]	; 0x40
   1d896:	9504      	str	r5, [sp, #16]
   1d898:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   1d89a:	9503      	str	r5, [sp, #12]
   1d89c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1d89e:	9502      	str	r5, [sp, #8]
{
   1d8a0:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1d8a4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1d8a6:	9501      	str	r5, [sp, #4]
   1d8a8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1d8aa:	9500      	str	r5, [sp, #0]
{
   1d8ac:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1d8ae:	f7ff ffc7 	bl	1d840 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   1d8b2:	1c7b      	adds	r3, r7, #1
   1d8b4:	bf08      	it	eq
   1d8b6:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   1d8ba:	d005      	beq.n	1d8c8 <z_impl_k_thread_create+0x3c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1d8bc:	ea56 0307 	orrs.w	r3, r6, r7
   1d8c0:	d105      	bne.n	1d8ce <z_impl_k_thread_create+0x42>
	z_sched_start(thread);
   1d8c2:	4620      	mov	r0, r4
   1d8c4:	f7ff fce4 	bl	1d290 <z_sched_start>
}
   1d8c8:	4620      	mov	r0, r4
   1d8ca:	b007      	add	sp, #28
   1d8cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   1d8ce:	4904      	ldr	r1, [pc, #16]	; (1d8e0 <z_impl_k_thread_create+0x54>)
   1d8d0:	4632      	mov	r2, r6
   1d8d2:	463b      	mov	r3, r7
   1d8d4:	f104 0018 	add.w	r0, r4, #24
   1d8d8:	f000 f906 	bl	1dae8 <z_add_timeout>
   1d8dc:	e7f4      	b.n	1d8c8 <z_impl_k_thread_create+0x3c>
   1d8de:	bf00      	nop
   1d8e0:	00022ea5 	.word	0x00022ea5

0001d8e4 <z_init_static_threads>:
{
   1d8e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   1d8e8:	4e2a      	ldr	r6, [pc, #168]	; (1d994 <z_init_static_threads+0xb0>)
   1d8ea:	4d2b      	ldr	r5, [pc, #172]	; (1d998 <z_init_static_threads+0xb4>)
{
   1d8ec:	b086      	sub	sp, #24
   1d8ee:	46b0      	mov	r8, r6
	_FOREACH_STATIC_THREAD(thread_data) {
   1d8f0:	42b5      	cmp	r5, r6
   1d8f2:	f105 0430 	add.w	r4, r5, #48	; 0x30
   1d8f6:	d310      	bcc.n	1d91a <z_init_static_threads+0x36>
	k_sched_lock();
   1d8f8:	f7ff fc2c 	bl	1d154 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   1d8fc:	4c26      	ldr	r4, [pc, #152]	; (1d998 <z_init_static_threads+0xb4>)
   1d8fe:	f8df a09c 	ldr.w	sl, [pc, #156]	; 1d99c <z_init_static_threads+0xb8>
   1d902:	f44f 4900 	mov.w	r9, #32768	; 0x8000
   1d906:	f240 36e7 	movw	r6, #999	; 0x3e7
   1d90a:	2700      	movs	r7, #0
   1d90c:	4544      	cmp	r4, r8
   1d90e:	d321      	bcc.n	1d954 <z_init_static_threads+0x70>
}
   1d910:	b006      	add	sp, #24
   1d912:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
   1d916:	f7ff bc6b 	b.w	1d1f0 <k_sched_unlock>
		z_setup_new_thread(
   1d91a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1d91e:	9305      	str	r3, [sp, #20]
   1d920:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1d924:	9304      	str	r3, [sp, #16]
   1d926:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1d92a:	9303      	str	r3, [sp, #12]
   1d92c:	f854 3c18 	ldr.w	r3, [r4, #-24]
   1d930:	9302      	str	r3, [sp, #8]
   1d932:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   1d936:	9301      	str	r3, [sp, #4]
   1d938:	f854 3c20 	ldr.w	r3, [r4, #-32]
   1d93c:	9300      	str	r3, [sp, #0]
   1d93e:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   1d942:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   1d946:	f7ff ff7b 	bl	1d840 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   1d94a:	f854 3c30 	ldr.w	r3, [r4, #-48]
   1d94e:	65dd      	str	r5, [r3, #92]	; 0x5c
   1d950:	4625      	mov	r5, r4
   1d952:	e7cd      	b.n	1d8f0 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   1d954:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1d956:	1c5a      	adds	r2, r3, #1
   1d958:	d00d      	beq.n	1d976 <z_init_static_threads+0x92>
					    K_MSEC(thread_data->init_delay));
   1d95a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1d95e:	4630      	mov	r0, r6
   1d960:	4639      	mov	r1, r7
   1d962:	fbc9 0103 	smlal	r0, r1, r9, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1d966:	42b9      	cmp	r1, r7
   1d968:	bf08      	it	eq
   1d96a:	42b0      	cmpeq	r0, r6
			schedule_new_thread(thread_data->init_thread,
   1d96c:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1d96e:	d104      	bne.n	1d97a <z_init_static_threads+0x96>
	z_sched_start(thread);
   1d970:	4628      	mov	r0, r5
   1d972:	f7ff fc8d 	bl	1d290 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   1d976:	3430      	adds	r4, #48	; 0x30
   1d978:	e7c8      	b.n	1d90c <z_init_static_threads+0x28>
   1d97a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1d97e:	2300      	movs	r3, #0
   1d980:	f7e3 f85c 	bl	a3c <__aeabi_uldivmod>
   1d984:	4602      	mov	r2, r0
   1d986:	460b      	mov	r3, r1
   1d988:	f105 0018 	add.w	r0, r5, #24
   1d98c:	4651      	mov	r1, sl
   1d98e:	f000 f8ab 	bl	1dae8 <z_add_timeout>
   1d992:	e7f0      	b.n	1d976 <z_init_static_threads+0x92>
   1d994:	200007b8 	.word	0x200007b8
   1d998:	200007b8 	.word	0x200007b8
   1d99c:	00022ea5 	.word	0x00022ea5

0001d9a0 <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   1d9a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d9a4:	4604      	mov	r4, r0
   1d9a6:	b088      	sub	sp, #32
   1d9a8:	460d      	mov	r5, r1
   1d9aa:	4616      	mov	r6, r2
   1d9ac:	461f      	mov	r7, r3
	z_impl_k_queue_init(queue);
   1d9ae:	f005 f99d 	bl	22cec <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   1d9b2:	f104 0818 	add.w	r8, r4, #24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1d9b6:	2200      	movs	r2, #0
   1d9b8:	2300      	movs	r3, #0
   1d9ba:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1d9be:	e9cd 7203 	strd	r7, r2, [sp, #12]
   1d9c2:	e9cd 2201 	strd	r2, r2, [sp, #4]
   1d9c6:	4b07      	ldr	r3, [pc, #28]	; (1d9e4 <k_work_q_start+0x44>)
   1d9c8:	9400      	str	r4, [sp, #0]
   1d9ca:	4632      	mov	r2, r6
   1d9cc:	4629      	mov	r1, r5
   1d9ce:	4640      	mov	r0, r8
   1d9d0:	f7ff ff5c 	bl	1d88c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   1d9d4:	4904      	ldr	r1, [pc, #16]	; (1d9e8 <k_work_q_start+0x48>)
   1d9d6:	4640      	mov	r0, r8
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   1d9d8:	b008      	add	sp, #32
   1d9da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1d9de:	f005 bb1c 	b.w	2301a <z_impl_k_thread_name_set>
   1d9e2:	bf00      	nop
   1d9e4:	0001df93 	.word	0x0001df93
   1d9e8:	00026eaf 	.word	0x00026eaf

0001d9ec <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   k_timeout_t delay)
{
   1d9ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1d9f0:	4606      	mov	r6, r0
   1d9f2:	460d      	mov	r5, r1
   1d9f4:	4690      	mov	r8, r2
   1d9f6:	4699      	mov	r9, r3
	__asm__ volatile(
   1d9f8:	f04f 0320 	mov.w	r3, #32
   1d9fc:	f3ef 8711 	mrs	r7, BASEPRI
   1da00:	f383 8811 	msr	BASEPRI, r3
   1da04:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q != NULL && work->work_q != work_q) {
   1da08:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   1da0a:	b17b      	cbz	r3, 1da2c <k_delayed_work_submit_to_queue+0x40>
   1da0c:	4283      	cmp	r3, r0
   1da0e:	d128      	bne.n	1da62 <k_delayed_work_submit_to_queue+0x76>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = work_cancel(work);
   1da10:	4628      	mov	r0, r5
   1da12:	f005 fb24 	bl	2305e <work_cancel>
		/* -EALREADY indicates the work has already completed so this
		 * is likely a recurring work.
		 */
		if (err == -EALREADY) {
   1da16:	f110 0f45 	cmn.w	r0, #69	; 0x45
		err = work_cancel(work);
   1da1a:	4604      	mov	r4, r0
		if (err == -EALREADY) {
   1da1c:	d008      	beq.n	1da30 <k_delayed_work_submit_to_queue+0x44>
			err = 0;
		} else if (err < 0) {
   1da1e:	2800      	cmp	r0, #0
   1da20:	da07      	bge.n	1da32 <k_delayed_work_submit_to_queue+0x46>
	__asm__ volatile(
   1da22:	f387 8811 	msr	BASEPRI, r7
   1da26:	f3bf 8f6f 	isb	sy
	/* Add timeout */
	z_add_timeout(&work->timeout, work_timeout, delay);

done:
	k_spin_unlock(&lock, key);
	return err;
   1da2a:	e00f      	b.n	1da4c <k_delayed_work_submit_to_queue+0x60>
	if (work->work_q == work_q) {
   1da2c:	2800      	cmp	r0, #0
   1da2e:	d0ef      	beq.n	1da10 <k_delayed_work_submit_to_queue+0x24>
	int err = 0;
   1da30:	2400      	movs	r4, #0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1da32:	ea58 0309 	orrs.w	r3, r8, r9
	work->work_q = work_q;
   1da36:	62ae      	str	r6, [r5, #40]	; 0x28
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1da38:	d10b      	bne.n	1da52 <k_delayed_work_submit_to_queue+0x66>
   1da3a:	f387 8811 	msr	BASEPRI, r7
   1da3e:	f3bf 8f6f 	isb	sy
		k_work_submit_to_queue(work_q, &work->work);
   1da42:	4629      	mov	r1, r5
   1da44:	4630      	mov	r0, r6
   1da46:	f005 faed 	bl	23024 <k_work_submit_to_queue>
		return 0;
   1da4a:	2400      	movs	r4, #0
}
   1da4c:	4620      	mov	r0, r4
   1da4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_add_timeout(&work->timeout, work_timeout, delay);
   1da52:	4905      	ldr	r1, [pc, #20]	; (1da68 <k_delayed_work_submit_to_queue+0x7c>)
   1da54:	4642      	mov	r2, r8
   1da56:	464b      	mov	r3, r9
   1da58:	f105 0010 	add.w	r0, r5, #16
   1da5c:	f000 f844 	bl	1dae8 <z_add_timeout>
   1da60:	e7df      	b.n	1da22 <k_delayed_work_submit_to_queue+0x36>
		err = -EADDRINUSE;
   1da62:	f06f 042f 	mvn.w	r4, #47	; 0x2f
   1da66:	e7dc      	b.n	1da22 <k_delayed_work_submit_to_queue+0x36>
   1da68:	00023055 	.word	0x00023055

0001da6c <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
   1da6c:	4b03      	ldr	r3, [pc, #12]	; (1da7c <elapsed+0x10>)
   1da6e:	681b      	ldr	r3, [r3, #0]
   1da70:	b90b      	cbnz	r3, 1da76 <elapsed+0xa>
   1da72:	f7e9 ba4b 	b.w	6f0c <z_clock_elapsed>
}
   1da76:	2000      	movs	r0, #0
   1da78:	4770      	bx	lr
   1da7a:	bf00      	nop
   1da7c:	2000a29c 	.word	0x2000a29c

0001da80 <remove_timeout>:
{
   1da80:	b530      	push	{r4, r5, lr}
   1da82:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1da84:	b168      	cbz	r0, 1daa2 <remove_timeout+0x22>
   1da86:	4a0a      	ldr	r2, [pc, #40]	; (1dab0 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
   1da88:	6852      	ldr	r2, [r2, #4]
   1da8a:	4290      	cmp	r0, r2
   1da8c:	d009      	beq.n	1daa2 <remove_timeout+0x22>
	if (next(t) != NULL) {
   1da8e:	b143      	cbz	r3, 1daa2 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   1da90:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   1da94:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   1da98:	1912      	adds	r2, r2, r4
   1da9a:	eb45 0101 	adc.w	r1, r5, r1
   1da9e:	e9c3 2104 	strd	r2, r1, [r3, #16]
	node->prev->next = node->next;
   1daa2:	6842      	ldr	r2, [r0, #4]
   1daa4:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1daa6:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1daa8:	2300      	movs	r3, #0
	node->prev = NULL;
   1daaa:	e9c0 3300 	strd	r3, r3, [r0]
}
   1daae:	bd30      	pop	{r4, r5, pc}
   1dab0:	200006cc 	.word	0x200006cc

0001dab4 <next_timeout>:
	return list->head == list;
   1dab4:	4b0a      	ldr	r3, [pc, #40]	; (1dae0 <next_timeout+0x2c>)

static int32_t next_timeout(void)
{
   1dab6:	b510      	push	{r4, lr}
   1dab8:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1daba:	429c      	cmp	r4, r3
   1dabc:	bf08      	it	eq
   1dabe:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   1dac0:	f7ff ffd4 	bl	1da6c <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   1dac4:	b144      	cbz	r4, 1dad8 <next_timeout+0x24>
   1dac6:	6923      	ldr	r3, [r4, #16]
   1dac8:	1a18      	subs	r0, r3, r0

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1daca:	4b06      	ldr	r3, [pc, #24]	; (1dae4 <next_timeout+0x30>)
   1dacc:	691b      	ldr	r3, [r3, #16]
   1dace:	b113      	cbz	r3, 1dad6 <next_timeout+0x22>
   1dad0:	4298      	cmp	r0, r3
   1dad2:	bfa8      	it	ge
   1dad4:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   1dad6:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   1dad8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1dadc:	e7f5      	b.n	1daca <next_timeout+0x16>
   1dade:	bf00      	nop
   1dae0:	200006cc 	.word	0x200006cc
   1dae4:	2000a260 	.word	0x2000a260

0001dae8 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   1dae8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1daec:	9101      	str	r1, [sp, #4]
   1daee:	4619      	mov	r1, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1daf0:	1c4b      	adds	r3, r1, #1
   1daf2:	bf08      	it	eq
   1daf4:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   1daf8:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1dafa:	d06c      	beq.n	1dbd6 <z_add_timeout+0xee>
	}

#ifdef CONFIG_LEGACY_TIMEOUT_API
	k_ticks_t ticks = timeout;
#else
	k_ticks_t ticks = timeout.ticks + 1;
   1dafc:	1c54      	adds	r4, r2, #1

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   1dafe:	f06f 0301 	mvn.w	r3, #1
	k_ticks_t ticks = timeout.ticks + 1;
   1db02:	f141 0500 	adc.w	r5, r1, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   1db06:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   1db0a:	ebb3 0804 	subs.w	r8, r3, r4
   1db0e:	eb6b 0905 	sbc.w	r9, fp, r5
   1db12:	f1b8 0f00 	cmp.w	r8, #0
   1db16:	f179 0300 	sbcs.w	r3, r9, #0
   1db1a:	db0f      	blt.n	1db3c <z_add_timeout+0x54>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
   1db1c:	f7ff ffa6 	bl	1da6c <elapsed>
   1db20:	4a33      	ldr	r2, [pc, #204]	; (1dbf0 <z_add_timeout+0x108>)
   1db22:	e9d2 1c00 	ldrd	r1, ip, [r2]
   1db26:	f06f 0301 	mvn.w	r3, #1
   1db2a:	1a5b      	subs	r3, r3, r1
   1db2c:	eb6b 020c 	sbc.w	r2, fp, ip
   1db30:	1b1e      	subs	r6, r3, r4
   1db32:	eb62 0705 	sbc.w	r7, r2, r5
   1db36:	1a34      	subs	r4, r6, r0
   1db38:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	}
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   1db3c:	9b01      	ldr	r3, [sp, #4]
   1db3e:	f8ca 3008 	str.w	r3, [sl, #8]
	__asm__ volatile(
   1db42:	f04f 0320 	mov.w	r3, #32
   1db46:	f3ef 8611 	mrs	r6, BASEPRI
   1db4a:	f383 8811 	msr	BASEPRI, r3
   1db4e:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   1db52:	f7ff ff8b 	bl	1da6c <elapsed>
	ticks = MAX(1, ticks);
   1db56:	2c01      	cmp	r4, #1
   1db58:	f175 0300 	sbcs.w	r3, r5, #0
	return list->head == list;
   1db5c:	4b25      	ldr	r3, [pc, #148]	; (1dbf4 <z_add_timeout+0x10c>)
   1db5e:	bfb8      	it	lt
   1db60:	2401      	movlt	r4, #1
   1db62:	681a      	ldr	r2, [r3, #0]
   1db64:	bfb8      	it	lt
   1db66:	2500      	movlt	r5, #0
		to->dticks = ticks + elapsed();
   1db68:	1824      	adds	r4, r4, r0
   1db6a:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1db6e:	429a      	cmp	r2, r3
   1db70:	e9ca 4504 	strd	r4, r5, [sl, #16]
   1db74:	d001      	beq.n	1db7a <z_add_timeout+0x92>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1db76:	685f      	ldr	r7, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
   1db78:	b952      	cbnz	r2, 1db90 <z_add_timeout+0xa8>
	node->prev = list->tail;
   1db7a:	685a      	ldr	r2, [r3, #4]
   1db7c:	f8ca 2004 	str.w	r2, [sl, #4]
	list->tail->next = node;
   1db80:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   1db82:	f8ca 3000 	str.w	r3, [sl]
	list->tail->next = node;
   1db86:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   1db8a:	f8c3 a004 	str.w	sl, [r3, #4]
}
   1db8e:	e014      	b.n	1dbba <z_add_timeout+0xd2>
			__ASSERT(t->dticks >= 0, "");

			if (t->dticks > to->dticks) {
   1db90:	e9d2 8904 	ldrd	r8, r9, [r2, #16]
   1db94:	e9da 4504 	ldrd	r4, r5, [sl, #16]
   1db98:	454d      	cmp	r5, r9
   1db9a:	bf08      	it	eq
   1db9c:	4544      	cmpeq	r4, r8
   1db9e:	d21d      	bcs.n	1dbdc <z_add_timeout+0xf4>
				t->dticks -= to->dticks;
   1dba0:	ebb8 0004 	subs.w	r0, r8, r4
   1dba4:	eb69 0105 	sbc.w	r1, r9, r5
   1dba8:	e9c2 0104 	strd	r0, r1, [r2, #16]
	node->prev = successor->prev;
   1dbac:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   1dbae:	e9ca 2100 	strd	r2, r1, [sl]
	successor->prev->next = node;
   1dbb2:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
   1dbb6:	f8c2 a004 	str.w	sl, [r2, #4]
	return list->head == list;
   1dbba:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1dbbc:	429a      	cmp	r2, r3
   1dbbe:	d006      	beq.n	1dbce <z_add_timeout+0xe6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   1dbc0:	4592      	cmp	sl, r2
   1dbc2:	d104      	bne.n	1dbce <z_add_timeout+0xe6>
			z_clock_set_timeout(next_timeout(), false);
   1dbc4:	f7ff ff76 	bl	1dab4 <next_timeout>
   1dbc8:	2100      	movs	r1, #0
   1dbca:	f7e9 f941 	bl	6e50 <z_clock_set_timeout>
	__asm__ volatile(
   1dbce:	f386 8811 	msr	BASEPRI, r6
   1dbd2:	f3bf 8f6f 	isb	sy
		}
	}
}
   1dbd6:	b003      	add	sp, #12
   1dbd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
   1dbdc:	ebb4 0008 	subs.w	r0, r4, r8
   1dbe0:	eb65 0109 	sbc.w	r1, r5, r9
	return (node == list->tail) ? NULL : node->next;
   1dbe4:	42ba      	cmp	r2, r7
   1dbe6:	e9ca 0104 	strd	r0, r1, [sl, #16]
   1dbea:	d0c6      	beq.n	1db7a <z_add_timeout+0x92>
   1dbec:	6812      	ldr	r2, [r2, #0]
   1dbee:	e7c3      	b.n	1db78 <z_add_timeout+0x90>
   1dbf0:	20001ce8 	.word	0x20001ce8
   1dbf4:	200006cc 	.word	0x200006cc

0001dbf8 <z_clock_announce>:
		}
	}
}

void z_clock_announce(int32_t ticks)
{
   1dbf8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dbfc:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   1dbfe:	f7ff fbab 	bl	1d358 <z_time_slice>
	__asm__ volatile(
   1dc02:	f04f 0320 	mov.w	r3, #32
   1dc06:	f3ef 8411 	mrs	r4, BASEPRI
   1dc0a:	f383 8811 	msr	BASEPRI, r3
   1dc0e:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   1dc12:	4d2d      	ldr	r5, [pc, #180]	; (1dcc8 <z_clock_announce+0xd0>)
   1dc14:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 1dccc <z_clock_announce+0xd4>
	return list->head == list;
   1dc18:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 1dcd0 <z_clock_announce+0xd8>
   1dc1c:	602e      	str	r6, [r5, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
   1dc1e:	4651      	mov	r1, sl
   1dc20:	f8d5 c000 	ldr.w	ip, [r5]
   1dc24:	f8db 0000 	ldr.w	r0, [fp]
   1dc28:	4662      	mov	r2, ip
   1dc2a:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1dc2c:	4558      	cmp	r0, fp
   1dc2e:	e9cd 2300 	strd	r2, r3, [sp]
   1dc32:	e9da 8900 	ldrd	r8, r9, [sl]
   1dc36:	d00e      	beq.n	1dc56 <z_clock_announce+0x5e>
   1dc38:	b168      	cbz	r0, 1dc56 <z_clock_announce+0x5e>
   1dc3a:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
   1dc3e:	42bb      	cmp	r3, r7
   1dc40:	bf08      	it	eq
   1dc42:	45b4      	cmpeq	ip, r6
   1dc44:	d21e      	bcs.n	1dc84 <z_clock_announce+0x8c>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   1dc46:	9b00      	ldr	r3, [sp, #0]
   1dc48:	ebb6 0c03 	subs.w	ip, r6, r3
   1dc4c:	9b01      	ldr	r3, [sp, #4]
   1dc4e:	eb67 0603 	sbc.w	r6, r7, r3
   1dc52:	e9c0 c604 	strd	ip, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
   1dc56:	9b00      	ldr	r3, [sp, #0]
   1dc58:	eb13 0208 	adds.w	r2, r3, r8
   1dc5c:	9b01      	ldr	r3, [sp, #4]
	announce_remaining = 0;
   1dc5e:	f04f 0600 	mov.w	r6, #0
	curr_tick += announce_remaining;
   1dc62:	eb43 0309 	adc.w	r3, r3, r9
   1dc66:	e9c1 2300 	strd	r2, r3, [r1]
	announce_remaining = 0;
   1dc6a:	602e      	str	r6, [r5, #0]

	z_clock_set_timeout(next_timeout(), false);
   1dc6c:	f7ff ff22 	bl	1dab4 <next_timeout>
   1dc70:	4631      	mov	r1, r6
   1dc72:	f7e9 f8ed 	bl	6e50 <z_clock_set_timeout>
	__asm__ volatile(
   1dc76:	f384 8811 	msr	BASEPRI, r4
   1dc7a:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1dc7e:	b003      	add	sp, #12
   1dc80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
   1dc84:	eb18 0806 	adds.w	r8, r8, r6
		t->dticks = 0;
   1dc88:	f04f 0200 	mov.w	r2, #0
   1dc8c:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
   1dc90:	eb49 79e6 	adc.w	r9, r9, r6, asr #31
		t->dticks = 0;
   1dc94:	e9c0 2304 	strd	r2, r3, [r0, #16]
		announce_remaining -= dt;
   1dc98:	ebac 0606 	sub.w	r6, ip, r6
		curr_tick += dt;
   1dc9c:	e9ca 8900 	strd	r8, r9, [sl]
		announce_remaining -= dt;
   1dca0:	602e      	str	r6, [r5, #0]
		remove_timeout(t);
   1dca2:	f7ff feed 	bl	1da80 <remove_timeout>
   1dca6:	f384 8811 	msr	BASEPRI, r4
   1dcaa:	f3bf 8f6f 	isb	sy
		t->fn(t);
   1dcae:	6883      	ldr	r3, [r0, #8]
   1dcb0:	4798      	blx	r3
	__asm__ volatile(
   1dcb2:	f04f 0320 	mov.w	r3, #32
   1dcb6:	f3ef 8411 	mrs	r4, BASEPRI
   1dcba:	f383 8811 	msr	BASEPRI, r3
   1dcbe:	f3bf 8f6f 	isb	sy

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
   1dcc2:	4902      	ldr	r1, [pc, #8]	; (1dccc <z_clock_announce+0xd4>)
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   1dcc4:	e7ac      	b.n	1dc20 <z_clock_announce+0x28>
   1dcc6:	bf00      	nop
   1dcc8:	2000a29c 	.word	0x2000a29c
   1dccc:	20001ce8 	.word	0x20001ce8
   1dcd0:	200006cc 	.word	0x200006cc

0001dcd4 <z_tick_get>:

int64_t z_tick_get(void)
{
   1dcd4:	b510      	push	{r4, lr}
   1dcd6:	f04f 0320 	mov.w	r3, #32
   1dcda:	f3ef 8411 	mrs	r4, BASEPRI
   1dcde:	f383 8811 	msr	BASEPRI, r3
   1dce2:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   1dce6:	f7e9 f911 	bl	6f0c <z_clock_elapsed>
   1dcea:	4b06      	ldr	r3, [pc, #24]	; (1dd04 <z_tick_get+0x30>)
   1dcec:	e9d3 2300 	ldrd	r2, r3, [r3]
   1dcf0:	1812      	adds	r2, r2, r0
   1dcf2:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
   1dcf6:	f384 8811 	msr	BASEPRI, r4
   1dcfa:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   1dcfe:	4610      	mov	r0, r2
   1dd00:	4619      	mov	r1, r3
   1dd02:	bd10      	pop	{r4, pc}
   1dd04:	20001ce8 	.word	0x20001ce8

0001dd08 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   1dd08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   1dd0a:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   1dd0e:	1c56      	adds	r6, r2, #1
   1dd10:	f143 0700 	adc.w	r7, r3, #0
   1dd14:	2f00      	cmp	r7, #0
   1dd16:	bf08      	it	eq
   1dd18:	2e02      	cmpeq	r6, #2
{
   1dd1a:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   1dd1c:	d302      	bcc.n	1dd24 <z_timer_expiration_handler+0x1c>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1dd1e:	490c      	ldr	r1, [pc, #48]	; (1dd50 <z_timer_expiration_handler+0x48>)
   1dd20:	f7ff fee2 	bl	1dae8 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   1dd24:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1dd26:	3301      	adds	r3, #1
   1dd28:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   1dd2a:	6a23      	ldr	r3, [r4, #32]
   1dd2c:	b10b      	cbz	r3, 1dd32 <z_timer_expiration_handler+0x2a>
		timer->expiry_fn(timer);
   1dd2e:	4620      	mov	r0, r4
   1dd30:	4798      	blx	r3
	return list->head == list;
   1dd32:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1dd36:	42a5      	cmp	r5, r4
   1dd38:	d008      	beq.n	1dd4c <z_timer_expiration_handler+0x44>
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   1dd3a:	b13d      	cbz	r5, 1dd4c <z_timer_expiration_handler+0x44>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
   1dd3c:	4628      	mov	r0, r5
   1dd3e:	f005 f840 	bl	22dc2 <z_unpend_thread_no_timeout>

	z_ready_thread(thread);
   1dd42:	4628      	mov	r0, r5
   1dd44:	f005 f89e 	bl	22e84 <z_ready_thread>
   1dd48:	2300      	movs	r3, #0
   1dd4a:	67ab      	str	r3, [r5, #120]	; 0x78

	arch_thread_return_value_set(thread, 0);
}
   1dd4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1dd4e:	bf00      	nop
   1dd50:	0001dd09 	.word	0x0001dd09

0001dd54 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   1dd54:	e92d 4f73 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, lr}
   1dd58:	4619      	mov	r1, r3
   1dd5a:	4606      	mov	r6, r0
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1dd5c:	1c4c      	adds	r4, r1, #1
{
   1dd5e:	4610      	mov	r0, r2
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1dd60:	bf08      	it	eq
   1dd62:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   1dd66:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   1dd6a:	4680      	mov	r8, r0
   1dd6c:	4689      	mov	r9, r1
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1dd6e:	d047      	beq.n	1de00 <z_impl_k_timer_start+0xac>
   1dd70:	4614      	mov	r4, r2
   1dd72:	461d      	mov	r5, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (period.ticks != 0 && Z_TICK_ABS(period.ticks) < 0) {
   1dd74:	ea54 0305 	orrs.w	r3, r4, r5
   1dd78:	d016      	beq.n	1dda8 <z_impl_k_timer_start+0x54>
   1dd7a:	f06f 0301 	mvn.w	r3, #1
   1dd7e:	ebb3 0a02 	subs.w	sl, r3, r2
   1dd82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1dd86:	eb63 0b05 	sbc.w	fp, r3, r5
   1dd8a:	f1ba 0f00 	cmp.w	sl, #0
   1dd8e:	f17b 0300 	sbcs.w	r3, fp, #0
   1dd92:	da09      	bge.n	1dda8 <z_impl_k_timer_start+0x54>
		period.ticks = MAX(period.ticks - 1, 1);
   1dd94:	f112 34ff 	adds.w	r4, r2, #4294967295	; 0xffffffff
   1dd98:	f145 35ff 	adc.w	r5, r5, #4294967295	; 0xffffffff
   1dd9c:	2c01      	cmp	r4, #1
   1dd9e:	f175 0300 	sbcs.w	r3, r5, #0
   1dda2:	bfbc      	itt	lt
   1dda4:	2401      	movlt	r4, #1
   1dda6:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   1dda8:	f06f 0301 	mvn.w	r3, #1
   1ddac:	1a1b      	subs	r3, r3, r0
   1ddae:	9300      	str	r3, [sp, #0]
   1ddb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ddb4:	eb63 0301 	sbc.w	r3, r3, r1
   1ddb8:	9301      	str	r3, [sp, #4]
   1ddba:	e9dd 2300 	ldrd	r2, r3, [sp]
   1ddbe:	2a00      	cmp	r2, #0
   1ddc0:	f173 0300 	sbcs.w	r3, r3, #0
   1ddc4:	da0c      	bge.n	1dde0 <z_impl_k_timer_start+0x8c>
		duration.ticks = MAX(duration.ticks - 1, 0);
   1ddc6:	f110 38ff 	adds.w	r8, r0, #4294967295	; 0xffffffff
   1ddca:	f141 39ff 	adc.w	r9, r1, #4294967295	; 0xffffffff
   1ddce:	f1b8 0f00 	cmp.w	r8, #0
   1ddd2:	f179 0300 	sbcs.w	r3, r9, #0
   1ddd6:	bfbc      	itt	lt
   1ddd8:	f04f 0800 	movlt.w	r8, #0
   1dddc:	f04f 0900 	movlt.w	r9, #0
	}
#endif

	(void)z_abort_timeout(&timer->timeout);
   1dde0:	4630      	mov	r0, r6
   1dde2:	f005 f9a2 	bl	2312a <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   1dde6:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1dde8:	4907      	ldr	r1, [pc, #28]	; (1de08 <z_impl_k_timer_start+0xb4>)
	timer->status = 0U;
   1ddea:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1ddec:	4642      	mov	r2, r8
   1ddee:	464b      	mov	r3, r9
   1ddf0:	4630      	mov	r0, r6
	timer->period = period;
   1ddf2:	e9c6 450a 	strd	r4, r5, [r6, #40]	; 0x28
		     duration);
}
   1ddf6:	b002      	add	sp, #8
   1ddf8:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1ddfc:	f7ff be74 	b.w	1dae8 <z_add_timeout>
}
   1de00:	b002      	add	sp, #8
   1de02:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
   1de06:	bf00      	nop
   1de08:	0001dd09 	.word	0x0001dd09

0001de0c <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   1de0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1de10:	b089      	sub	sp, #36	; 0x24
   1de12:	461f      	mov	r7, r3
	int events_registered;
	k_spinlock_key_t key;
	struct _poller poller = { .is_polling = true,
   1de14:	2301      	movs	r3, #1
   1de16:	f88d 3014 	strb.w	r3, [sp, #20]
				  .thread     = _current,
   1de1a:	4b29      	ldr	r3, [pc, #164]	; (1dec0 <z_impl_k_poll+0xb4>)
	struct _poller poller = { .is_polling = true,
   1de1c:	689b      	ldr	r3, [r3, #8]
   1de1e:	9306      	str	r3, [sp, #24]
   1de20:	4b28      	ldr	r3, [pc, #160]	; (1dec4 <z_impl_k_poll+0xb8>)
   1de22:	9307      	str	r3, [sp, #28]

	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	events_registered = register_events(events, num_events, &poller,
   1de24:	ea52 0307 	orrs.w	r3, r2, r7
{
   1de28:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, &poller,
   1de2a:	bf0c      	ite	eq
   1de2c:	2301      	moveq	r3, #1
   1de2e:	2300      	movne	r3, #0
   1de30:	aa05      	add	r2, sp, #20
{
   1de32:	4605      	mov	r5, r0
	events_registered = register_events(events, num_events, &poller,
   1de34:	f005 fab6 	bl	233a4 <register_events>
   1de38:	4680      	mov	r8, r0
	__asm__ volatile(
   1de3a:	f04f 0320 	mov.w	r3, #32
   1de3e:	f3ef 8911 	mrs	r9, BASEPRI
   1de42:	f383 8811 	msr	BASEPRI, r3
   1de46:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller.is_polling) {
   1de4a:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1de4e:	f003 04ff 	and.w	r4, r3, #255	; 0xff
   1de52:	b963      	cbnz	r3, 1de6e <z_impl_k_poll+0x62>
		clear_event_registrations(events, events_registered, key);
   1de54:	4601      	mov	r1, r0
   1de56:	464a      	mov	r2, r9
   1de58:	4628      	mov	r0, r5
   1de5a:	f005 fa03 	bl	23264 <clear_event_registrations>
	__asm__ volatile(
   1de5e:	f389 8811 	msr	BASEPRI, r9
   1de62:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
	k_spin_unlock(&lock, key);

	return swap_rc;
}
   1de66:	4620      	mov	r0, r4
   1de68:	b009      	add	sp, #36	; 0x24
   1de6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	poller.is_polling = false;
   1de6e:	2300      	movs	r3, #0
   1de70:	f88d 3014 	strb.w	r3, [sp, #20]
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1de74:	ea56 0307 	orrs.w	r3, r6, r7
   1de78:	d106      	bne.n	1de88 <z_impl_k_poll+0x7c>
   1de7a:	f389 8811 	msr	BASEPRI, r9
   1de7e:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   1de82:	f06f 040a 	mvn.w	r4, #10
   1de86:	e7ee      	b.n	1de66 <z_impl_k_poll+0x5a>
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   1de88:	aa03      	add	r2, sp, #12
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1de8a:	e9cd 6700 	strd	r6, r7, [sp]
   1de8e:	4649      	mov	r1, r9
   1de90:	480d      	ldr	r0, [pc, #52]	; (1dec8 <z_impl_k_poll+0xbc>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   1de92:	e9cd 2203 	strd	r2, r2, [sp, #12]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1de96:	f7ff fb93 	bl	1d5c0 <z_pend_curr>
   1de9a:	4604      	mov	r4, r0
	__asm__ volatile(
   1de9c:	f04f 0320 	mov.w	r3, #32
   1dea0:	f3ef 8611 	mrs	r6, BASEPRI
   1dea4:	f383 8811 	msr	BASEPRI, r3
   1dea8:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   1deac:	4632      	mov	r2, r6
   1deae:	4641      	mov	r1, r8
   1deb0:	4628      	mov	r0, r5
   1deb2:	f005 f9d7 	bl	23264 <clear_event_registrations>
	__asm__ volatile(
   1deb6:	f386 8811 	msr	BASEPRI, r6
   1deba:	f3bf 8f6f 	isb	sy
	return swap_rc;
   1debe:	e7d2      	b.n	1de66 <z_impl_k_poll+0x5a>
   1dec0:	2000a260 	.word	0x2000a260
   1dec4:	000232f1 	.word	0x000232f1
   1dec8:	2000a892 	.word	0x2000a892

0001decc <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *signal, int result)
{
   1decc:	b538      	push	{r3, r4, r5, lr}
   1dece:	4603      	mov	r3, r0
	__asm__ volatile(
   1ded0:	f04f 0220 	mov.w	r2, #32
   1ded4:	f3ef 8511 	mrs	r5, BASEPRI
   1ded8:	f382 8811 	msr	BASEPRI, r2
   1dedc:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	signal->result = result;
   1dee0:	60c1      	str	r1, [r0, #12]
	signal->signaled = 1U;
   1dee2:	2101      	movs	r1, #1
   1dee4:	6081      	str	r1, [r0, #8]
	return list->head == list;
   1dee6:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   1dee8:	4283      	cmp	r3, r0
   1deea:	d106      	bne.n	1defa <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   1deec:	f385 8811 	msr	BASEPRI, r5
   1def0:	f3bf 8f6f 	isb	sy

	poll_event = (struct k_poll_event *)sys_dlist_get(&signal->poll_events);
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);
		return 0;
   1def4:	2400      	movs	r4, #0

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);

	z_reschedule(&lock, key);
	return rc;
}
   1def6:	4620      	mov	r0, r4
   1def8:	bd38      	pop	{r3, r4, r5, pc}
	node->prev->next = node->next;
   1defa:	e9d0 3200 	ldrd	r3, r2, [r0]
   1defe:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1df00:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1df02:	2300      	movs	r3, #0
	node->prev = NULL;
   1df04:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1df08:	f005 f9d7 	bl	232ba <signal_poll_event>
	z_reschedule(&lock, key);
   1df0c:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1df0e:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   1df10:	4801      	ldr	r0, [pc, #4]	; (1df18 <z_impl_k_poll_signal_raise+0x4c>)
   1df12:	f004 ff6f 	bl	22df4 <z_reschedule>
	return rc;
   1df16:	e7ee      	b.n	1def6 <z_impl_k_poll_signal_raise+0x2a>
   1df18:	2000a892 	.word	0x2000a892

0001df1c <le_param_req>:
}
   1df1c:	2000      	movs	r0, #0
   1df1e:	4770      	bx	lr

0001df20 <arch_printk_char_out>:
}
   1df20:	2000      	movs	r0, #0
   1df22:	4770      	bx	lr

0001df24 <str_out>:
{
   1df24:	b530      	push	{r4, r5, lr}
   1df26:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1df28:	680c      	ldr	r4, [r1, #0]
   1df2a:	1c55      	adds	r5, r2, #1
   1df2c:	b114      	cbz	r4, 1df34 <str_out+0x10>
   1df2e:	684b      	ldr	r3, [r1, #4]
   1df30:	4293      	cmp	r3, r2
   1df32:	dc01      	bgt.n	1df38 <str_out+0x14>
		ctx->count++;
   1df34:	608d      	str	r5, [r1, #8]
}
   1df36:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   1df38:	3b01      	subs	r3, #1
   1df3a:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   1df3c:	bf08      	it	eq
   1df3e:	2200      	moveq	r2, #0
   1df40:	608d      	str	r5, [r1, #8]
   1df42:	bf0c      	ite	eq
   1df44:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   1df46:	54a0      	strbne	r0, [r4, r2]
   1df48:	e7f5      	b.n	1df36 <str_out+0x12>

0001df4a <printk>:
{
   1df4a:	b40f      	push	{r0, r1, r2, r3}
   1df4c:	b507      	push	{r0, r1, r2, lr}
   1df4e:	a904      	add	r1, sp, #16
   1df50:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   1df54:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   1df56:	f7e8 f8bf 	bl	60d8 <vprintk>
}
   1df5a:	b003      	add	sp, #12
   1df5c:	f85d eb04 	ldr.w	lr, [sp], #4
   1df60:	b004      	add	sp, #16
   1df62:	4770      	bx	lr

0001df64 <snprintk>:
{
   1df64:	b40c      	push	{r2, r3}
   1df66:	b507      	push	{r0, r1, r2, lr}
   1df68:	ab04      	add	r3, sp, #16
   1df6a:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   1df6e:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   1df70:	f7e8 f8c0 	bl	60f4 <vsnprintk>
}
   1df74:	b003      	add	sp, #12
   1df76:	f85d eb04 	ldr.w	lr, [sp], #4
   1df7a:	b002      	add	sp, #8
   1df7c:	4770      	bx	lr

0001df7e <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1df7e:	4604      	mov	r4, r0
   1df80:	b508      	push	{r3, lr}
   1df82:	4608      	mov	r0, r1
   1df84:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   1df86:	461a      	mov	r2, r3
   1df88:	47a0      	blx	r4
	return z_impl_k_current_get();
   1df8a:	f7ff fbeb 	bl	1d764 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   1df8e:	f7e9 fdcb 	bl	7b28 <z_impl_k_thread_abort>

0001df92 <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   1df92:	b510      	push	{r4, lr}
   1df94:	4604      	mov	r4, r0
	return z_impl_k_queue_get(queue, timeout);
   1df96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1df9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1df9e:	4620      	mov	r0, r4
   1dfa0:	f7ff f862 	bl	1d068 <z_impl_k_queue_get>
   1dfa4:	4603      	mov	r3, r0
	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (work == NULL) {
   1dfa6:	2800      	cmp	r0, #0
   1dfa8:	d0f5      	beq.n	1df96 <z_work_q_main+0x4>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1dfaa:	3308      	adds	r3, #8
			continue;
		}

		handler = work->handler;
   1dfac:	6842      	ldr	r2, [r0, #4]
   1dfae:	f3bf 8f5b 	dmb	ish
   1dfb2:	e853 1f00 	ldrex	r1, [r3]
   1dfb6:	f021 0c01 	bic.w	ip, r1, #1
   1dfba:	e843 ce00 	strex	lr, ip, [r3]
   1dfbe:	f1be 0f00 	cmp.w	lr, #0
   1dfc2:	d1f6      	bne.n	1dfb2 <z_work_q_main+0x20>
   1dfc4:	f3bf 8f5b 	dmb	ish

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   1dfc8:	07cb      	lsls	r3, r1, #31
   1dfca:	d500      	bpl.n	1dfce <z_work_q_main+0x3c>
					      K_WORK_STATE_PENDING)) {
			handler(work);
   1dfcc:	4790      	blx	r2
	z_impl_k_yield();
   1dfce:	f7ff fb5b 	bl	1d688 <z_impl_k_yield>
   1dfd2:	e7e0      	b.n	1df96 <z_work_q_main+0x4>

0001dfd4 <chunk_field>:
				 enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   1dfd4:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   1dfd6:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1dfda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   1dfde:	bf2c      	ite	cs
   1dfe0:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
   1dfe4:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
   1dfe8:	4770      	bx	lr

0001dfea <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->len);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   1dfea:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
   1dfee:	6880      	ldr	r0, [r0, #8]
   1dff0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
   1dff4:	bf2c      	ite	cs
   1dff6:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   1dffa:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
   1dffe:	4770      	bx	lr

0001e000 <chunk_size>:
{
	return chunk_field(h, c, SIZE_AND_USED) & 1;
}

static inline size_t chunk_size(struct z_heap *h, chunkid_t c)
{
   1e000:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1e002:	2201      	movs	r2, #1
   1e004:	f7ff ffe6 	bl	1dfd4 <chunk_field>
}
   1e008:	0840      	lsrs	r0, r0, #1
   1e00a:	bd08      	pop	{r3, pc}

0001e00c <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   1e00c:	6883      	ldr	r3, [r0, #8]
   1e00e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
	void *cmem = &buf[c];
   1e012:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1e016:	d308      	bcc.n	1e02a <set_chunk_used+0x1e>
		if (used) {
   1e018:	684b      	ldr	r3, [r1, #4]
   1e01a:	b11a      	cbz	r2, 1e024 <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1;
   1e01c:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1;
   1e020:	604b      	str	r3, [r1, #4]
   1e022:	4770      	bx	lr
   1e024:	f023 0301 	bic.w	r3, r3, #1
   1e028:	e7fa      	b.n	1e020 <set_chunk_used+0x14>
		}
	} else {
		if (used) {
   1e02a:	884b      	ldrh	r3, [r1, #2]
   1e02c:	b11a      	cbz	r2, 1e036 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1;
   1e02e:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1;
   1e032:	804b      	strh	r3, [r1, #2]
		}
	}
}
   1e034:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1;
   1e036:	f023 0301 	bic.w	r3, r3, #1
   1e03a:	e7fa      	b.n	1e032 <set_chunk_used+0x26>

0001e03c <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, size_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1e03c:	0053      	lsls	r3, r2, #1
   1e03e:	2201      	movs	r2, #1
   1e040:	f7ff bfd3 	b.w	1dfea <chunk_set>

0001e044 <bucket_idx>:
	chunk_set(h, c, LEFT_SIZE, size);
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   1e044:	6880      	ldr	r0, [r0, #8]
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
{
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   1e046:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   1e048:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   1e04c:	bf2c      	ite	cs
   1e04e:	2002      	movcs	r0, #2
   1e050:	2001      	movcc	r0, #1
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   1e052:	1a08      	subs	r0, r1, r0
	return 31 - __builtin_clz(usable_sz);
   1e054:	fab0 f080 	clz	r0, r0
}
   1e058:	f1c0 001f 	rsb	r0, r0, #31
   1e05c:	4770      	bx	lr

0001e05e <merge_chunks>:
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}

/* Does not modify free list */
static void merge_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   1e05e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e062:	4616      	mov	r6, r2
   1e064:	4604      	mov	r4, r0
   1e066:	460f      	mov	r7, r1
	size_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1e068:	f7ff ffca 	bl	1e000 <chunk_size>
   1e06c:	4631      	mov	r1, r6
   1e06e:	4605      	mov	r5, r0
   1e070:	4620      	mov	r0, r4
   1e072:	f7ff ffc5 	bl	1e000 <chunk_size>
   1e076:	4405      	add	r5, r0

	set_chunk_size(h, lc, newsz);
   1e078:	462a      	mov	r2, r5
   1e07a:	4639      	mov	r1, r7
   1e07c:	4620      	mov	r0, r4
   1e07e:	f7ff ffdd 	bl	1e03c <set_chunk_size>
	return c + chunk_size(h, c);
   1e082:	4631      	mov	r1, r6
   1e084:	4620      	mov	r0, r4
   1e086:	f7ff ffbb 	bl	1e000 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1e08a:	462b      	mov	r3, r5
   1e08c:	1831      	adds	r1, r6, r0
   1e08e:	2200      	movs	r2, #0
   1e090:	4620      	mov	r0, r4
	set_left_chunk_size(h, right_chunk(h, rc), newsz);
}
   1e092:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1e096:	f7ff bfa8 	b.w	1dfea <chunk_set>

0001e09a <split_chunks>:
{
   1e09a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e09e:	4614      	mov	r4, r2
   1e0a0:	4605      	mov	r5, r0
   1e0a2:	460e      	mov	r6, r1
	size_t sz0 = chunk_size(h, lc);
   1e0a4:	f7ff ffac 	bl	1e000 <chunk_size>
	size_t lsz = rc - lc;
   1e0a8:	eba4 0806 	sub.w	r8, r4, r6
	size_t rsz = sz0 - lsz;
   1e0ac:	1b37      	subs	r7, r6, r4
   1e0ae:	4407      	add	r7, r0
	set_chunk_size(h, lc, lsz);
   1e0b0:	4642      	mov	r2, r8
   1e0b2:	4631      	mov	r1, r6
   1e0b4:	4628      	mov	r0, r5
   1e0b6:	f7ff ffc1 	bl	1e03c <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   1e0ba:	463a      	mov	r2, r7
   1e0bc:	4621      	mov	r1, r4
   1e0be:	4628      	mov	r0, r5
   1e0c0:	f7ff ffbc 	bl	1e03c <set_chunk_size>
   1e0c4:	4643      	mov	r3, r8
   1e0c6:	2200      	movs	r2, #0
   1e0c8:	4621      	mov	r1, r4
   1e0ca:	4628      	mov	r0, r5
   1e0cc:	f7ff ff8d 	bl	1dfea <chunk_set>
	return c + chunk_size(h, c);
   1e0d0:	4621      	mov	r1, r4
   1e0d2:	4628      	mov	r0, r5
   1e0d4:	f7ff ff94 	bl	1e000 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1e0d8:	463b      	mov	r3, r7
   1e0da:	1821      	adds	r1, r4, r0
   1e0dc:	2200      	movs	r2, #0
   1e0de:	4628      	mov	r0, r5
}
   1e0e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1e0e4:	f7ff bf81 	b.w	1dfea <chunk_set>

0001e0e8 <free_list_remove>:
{
   1e0e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e0ec:	4616      	mov	r6, r2
   1e0ee:	460f      	mov	r7, r1
	return chunk_field(h, c, FREE_NEXT);
   1e0f0:	2203      	movs	r2, #3
   1e0f2:	4631      	mov	r1, r6
   1e0f4:	4604      	mov	r4, r0
   1e0f6:	f7ff ff6d 	bl	1dfd4 <chunk_field>
	if (next_free_chunk(h, c) == c) {
   1e0fa:	4286      	cmp	r6, r0
   1e0fc:	4605      	mov	r5, r0
   1e0fe:	f107 0804 	add.w	r8, r7, #4
   1e102:	d10b      	bne.n	1e11c <free_list_remove+0x34>
		h->avail_buckets &= ~(1 << bidx);
   1e104:	2301      	movs	r3, #1
   1e106:	fa03 f707 	lsl.w	r7, r3, r7
   1e10a:	68e3      	ldr	r3, [r4, #12]
   1e10c:	ea23 0307 	bic.w	r3, r3, r7
   1e110:	60e3      	str	r3, [r4, #12]
		b->next = 0;
   1e112:	2300      	movs	r3, #0
   1e114:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
}
   1e118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   1e11c:	4631      	mov	r1, r6
   1e11e:	2202      	movs	r2, #2
   1e120:	4620      	mov	r0, r4
   1e122:	f7ff ff57 	bl	1dfd4 <chunk_field>
	chunk_set(h, c, FREE_NEXT, next);
   1e126:	462b      	mov	r3, r5
	return chunk_field(h, c, FREE_PREV);
   1e128:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
   1e12a:	4601      	mov	r1, r0
		b->next = second;
   1e12c:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
   1e130:	4620      	mov	r0, r4
   1e132:	2203      	movs	r2, #3
   1e134:	f7ff ff59 	bl	1dfea <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   1e138:	4633      	mov	r3, r6
   1e13a:	4629      	mov	r1, r5
   1e13c:	4620      	mov	r0, r4
   1e13e:	2202      	movs	r2, #2
}
   1e140:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1e144:	f7ff bf51 	b.w	1dfea <chunk_set>

0001e148 <free_list_add>:
{
   1e148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e14c:	4604      	mov	r4, r0
   1e14e:	460d      	mov	r5, r1
	int bi = bucket_idx(h, chunk_size(h, c));
   1e150:	f7ff ff56 	bl	1e000 <chunk_size>
   1e154:	4601      	mov	r1, r0
   1e156:	4620      	mov	r0, r4
   1e158:	f7ff ff74 	bl	1e044 <bucket_idx>
	if (h->buckets[bi].next == 0) {
   1e15c:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   1e160:	6916      	ldr	r6, [r2, #16]
   1e162:	b99e      	cbnz	r6, 1e18c <free_list_add+0x44>
		h->avail_buckets |= (1 << bi);
   1e164:	2301      	movs	r3, #1
   1e166:	fa03 f000 	lsl.w	r0, r3, r0
   1e16a:	68e3      	ldr	r3, [r4, #12]
   1e16c:	4303      	orrs	r3, r0
   1e16e:	60e3      	str	r3, [r4, #12]
   1e170:	4629      	mov	r1, r5
		h->buckets[bi].next = c;
   1e172:	6115      	str	r5, [r2, #16]
   1e174:	462b      	mov	r3, r5
   1e176:	2202      	movs	r2, #2
   1e178:	4620      	mov	r0, r4
   1e17a:	f7ff ff36 	bl	1dfea <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   1e17e:	2203      	movs	r2, #3
   1e180:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   1e182:	4620      	mov	r0, r4
}
   1e184:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1e188:	f7ff bf2f 	b.w	1dfea <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   1e18c:	2202      	movs	r2, #2
   1e18e:	4631      	mov	r1, r6
   1e190:	4620      	mov	r0, r4
   1e192:	f7ff ff1f 	bl	1dfd4 <chunk_field>
	chunk_set(h, c, FREE_PREV, prev);
   1e196:	2202      	movs	r2, #2
   1e198:	4603      	mov	r3, r0
	return chunk_field(h, c, FREE_PREV);
   1e19a:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   1e19c:	4629      	mov	r1, r5
   1e19e:	4620      	mov	r0, r4
   1e1a0:	f7ff ff23 	bl	1dfea <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   1e1a4:	4633      	mov	r3, r6
   1e1a6:	2203      	movs	r2, #3
   1e1a8:	4629      	mov	r1, r5
   1e1aa:	4620      	mov	r0, r4
   1e1ac:	f7ff ff1d 	bl	1dfea <chunk_set>
   1e1b0:	2203      	movs	r2, #3
   1e1b2:	4639      	mov	r1, r7
   1e1b4:	462b      	mov	r3, r5
   1e1b6:	4620      	mov	r0, r4
   1e1b8:	f7ff ff17 	bl	1dfea <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   1e1bc:	2202      	movs	r2, #2
   1e1be:	4631      	mov	r1, r6
   1e1c0:	e7df      	b.n	1e182 <free_list_add+0x3a>

0001e1c2 <split_alloc>:
static chunkid_t split_alloc(struct z_heap *h, int bidx, size_t sz)
{
	CHECK(h->buckets[bidx].next != 0
	      && sz <= chunk_size(h, h->buckets[bidx].next));

	chunkid_t c = h->buckets[bidx].next;
   1e1c2:	1d0b      	adds	r3, r1, #4
{
   1e1c4:	b570      	push	{r4, r5, r6, lr}
	chunkid_t c = h->buckets[bidx].next;
   1e1c6:	f850 6023 	ldr.w	r6, [r0, r3, lsl #2]
{
   1e1ca:	4604      	mov	r4, r0
   1e1cc:	4615      	mov	r5, r2

	free_list_remove(h, bidx, c);
   1e1ce:	4632      	mov	r2, r6
   1e1d0:	f7ff ff8a 	bl	1e0e8 <free_list_remove>

	/* Split off remainder if it's usefully large */
	if ((chunk_size(h, c) - sz) >= (big_heap(h) ? 2 : 1)) {
   1e1d4:	4631      	mov	r1, r6
   1e1d6:	4620      	mov	r0, r4
   1e1d8:	f7ff ff12 	bl	1e000 <chunk_size>
   1e1dc:	68a3      	ldr	r3, [r4, #8]
   1e1de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1e1e2:	eba0 0005 	sub.w	r0, r0, r5
   1e1e6:	bf2c      	ite	cs
   1e1e8:	2302      	movcs	r3, #2
   1e1ea:	2301      	movcc	r3, #1
   1e1ec:	4298      	cmp	r0, r3
   1e1ee:	d309      	bcc.n	1e204 <split_alloc+0x42>
		split_chunks(h, c, c + sz);
   1e1f0:	4435      	add	r5, r6
   1e1f2:	4631      	mov	r1, r6
   1e1f4:	4620      	mov	r0, r4
   1e1f6:	462a      	mov	r2, r5
   1e1f8:	f7ff ff4f 	bl	1e09a <split_chunks>
		free_list_add(h, c + sz);
   1e1fc:	4629      	mov	r1, r5
   1e1fe:	4620      	mov	r0, r4
   1e200:	f7ff ffa2 	bl	1e148 <free_list_add>
	}

	set_chunk_used(h, c, true);
   1e204:	4620      	mov	r0, r4
   1e206:	2201      	movs	r2, #1
   1e208:	4631      	mov	r1, r6
   1e20a:	f7ff feff 	bl	1e00c <set_chunk_used>
	return c;
}
   1e20e:	4630      	mov	r0, r6
   1e210:	bd70      	pop	{r4, r5, r6, pc}

0001e212 <alloc_chunks>:

	free_chunks(h, c);
}

static chunkid_t alloc_chunks(struct z_heap *h, size_t sz)
{
   1e212:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1e216:	4604      	mov	r4, r0
   1e218:	460e      	mov	r6, r1
	int bi = bucket_idx(h, sz);
   1e21a:	f7ff ff13 	bl	1e044 <bucket_idx>
	struct z_heap_bucket *b = &h->buckets[bi];

	if (bi > bucket_idx(h, h->len)) {
   1e21e:	68a1      	ldr	r1, [r4, #8]
	int bi = bucket_idx(h, sz);
   1e220:	4605      	mov	r5, r0
	if (bi > bucket_idx(h, h->len)) {
   1e222:	4620      	mov	r0, r4
   1e224:	f7ff ff0e 	bl	1e044 <bucket_idx>
   1e228:	42a8      	cmp	r0, r5
   1e22a:	db2f      	blt.n	1e28c <alloc_chunks+0x7a>
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   1e22c:	eb04 0885 	add.w	r8, r4, r5, lsl #2
   1e230:	f8d8 9010 	ldr.w	r9, [r8, #16]
   1e234:	f1b9 0f00 	cmp.w	r9, #0
   1e238:	d01a      	beq.n	1e270 <alloc_chunks+0x5e>
   1e23a:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			if (chunk_size(h, b->next) >= sz) {
   1e23c:	f8d8 a010 	ldr.w	sl, [r8, #16]
   1e240:	4620      	mov	r0, r4
   1e242:	4651      	mov	r1, sl
   1e244:	f7ff fedc 	bl	1e000 <chunk_size>
   1e248:	42b0      	cmp	r0, r6
   1e24a:	d306      	bcc.n	1e25a <alloc_chunks+0x48>
				return split_alloc(h, bi, sz);
   1e24c:	4632      	mov	r2, r6
   1e24e:	4629      	mov	r1, r5
	size_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);

	if ((bmask & h->avail_buckets) != 0) {
		int minbucket = __builtin_ctz(bmask & h->avail_buckets);

		return split_alloc(h, minbucket, sz);
   1e250:	4620      	mov	r0, r4
	}

	return 0;
}
   1e252:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		return split_alloc(h, minbucket, sz);
   1e256:	f7ff bfb4 	b.w	1e1c2 <split_alloc>
	return chunk_field(h, c, FREE_NEXT);
   1e25a:	2203      	movs	r2, #3
   1e25c:	4651      	mov	r1, sl
   1e25e:	4620      	mov	r0, r4
   1e260:	f7ff feb8 	bl	1dfd4 <chunk_field>
		} while (--i && b->next != first);
   1e264:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, b->next);
   1e266:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
   1e26a:	d001      	beq.n	1e270 <alloc_chunks+0x5e>
   1e26c:	4581      	cmp	r9, r0
   1e26e:	d1e5      	bne.n	1e23c <alloc_chunks+0x2a>
	size_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   1e270:	68e1      	ldr	r1, [r4, #12]
   1e272:	3501      	adds	r5, #1
   1e274:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e278:	fa03 f505 	lsl.w	r5, r3, r5
	if ((bmask & h->avail_buckets) != 0) {
   1e27c:	4029      	ands	r1, r5
   1e27e:	d005      	beq.n	1e28c <alloc_chunks+0x7a>
		return split_alloc(h, minbucket, sz);
   1e280:	fa91 f1a1 	rbit	r1, r1
   1e284:	4632      	mov	r2, r6
   1e286:	fab1 f181 	clz	r1, r1
   1e28a:	e7e1      	b.n	1e250 <alloc_chunks+0x3e>
}
   1e28c:	2000      	movs	r0, #0
   1e28e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001e292 <free_chunks>:
{
   1e292:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	set_chunk_used(h, c, false);
   1e294:	2200      	movs	r2, #0
{
   1e296:	460d      	mov	r5, r1
   1e298:	4604      	mov	r4, r0
	set_chunk_used(h, c, false);
   1e29a:	f7ff feb7 	bl	1e00c <set_chunk_used>
	return c + chunk_size(h, c);
   1e29e:	4629      	mov	r1, r5
   1e2a0:	f7ff feae 	bl	1e000 <chunk_size>
   1e2a4:	182e      	adds	r6, r5, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1;
   1e2a6:	2201      	movs	r2, #1
   1e2a8:	4631      	mov	r1, r6
   1e2aa:	4620      	mov	r0, r4
   1e2ac:	f7ff fe92 	bl	1dfd4 <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
   1e2b0:	07c3      	lsls	r3, r0, #31
   1e2b2:	d415      	bmi.n	1e2e0 <free_chunks+0x4e>
		int bi = bucket_idx(h, chunk_size(h, right_chunk(h, c)));
   1e2b4:	4631      	mov	r1, r6
   1e2b6:	4620      	mov	r0, r4
   1e2b8:	f7ff fea2 	bl	1e000 <chunk_size>
   1e2bc:	4601      	mov	r1, r0
   1e2be:	4620      	mov	r0, r4
   1e2c0:	f7ff fec0 	bl	1e044 <bucket_idx>
		free_list_remove(h, bi, right_chunk(h, c));
   1e2c4:	4632      	mov	r2, r6
		int bi = bucket_idx(h, chunk_size(h, right_chunk(h, c)));
   1e2c6:	4601      	mov	r1, r0
		free_list_remove(h, bi, right_chunk(h, c));
   1e2c8:	4620      	mov	r0, r4
   1e2ca:	f7ff ff0d 	bl	1e0e8 <free_list_remove>
	return c + chunk_size(h, c);
   1e2ce:	4629      	mov	r1, r5
   1e2d0:	4620      	mov	r0, r4
   1e2d2:	f7ff fe95 	bl	1e000 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   1e2d6:	4629      	mov	r1, r5
   1e2d8:	182a      	adds	r2, r5, r0
   1e2da:	4620      	mov	r0, r4
   1e2dc:	f7ff febf 	bl	1e05e <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
   1e2e0:	2200      	movs	r2, #0
   1e2e2:	4629      	mov	r1, r5
   1e2e4:	4620      	mov	r0, r4
   1e2e6:	f7ff fe75 	bl	1dfd4 <chunk_field>
   1e2ea:	1a2f      	subs	r7, r5, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1;
   1e2ec:	2201      	movs	r2, #1
   1e2ee:	4639      	mov	r1, r7
   1e2f0:	4620      	mov	r0, r4
   1e2f2:	f7ff fe6f 	bl	1dfd4 <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
   1e2f6:	f010 0601 	ands.w	r6, r0, #1
   1e2fa:	d11c      	bne.n	1e336 <free_chunks+0xa4>
		int bi = bucket_idx(h, chunk_size(h, left_chunk(h, c)));
   1e2fc:	4639      	mov	r1, r7
   1e2fe:	4620      	mov	r0, r4
   1e300:	f7ff fe7e 	bl	1e000 <chunk_size>
   1e304:	4601      	mov	r1, r0
   1e306:	4620      	mov	r0, r4
   1e308:	f7ff fe9c 	bl	1e044 <bucket_idx>
		free_list_remove(h, bi, left_chunk(h, c));
   1e30c:	463a      	mov	r2, r7
		int bi = bucket_idx(h, chunk_size(h, left_chunk(h, c)));
   1e30e:	4601      	mov	r1, r0
		free_list_remove(h, bi, left_chunk(h, c));
   1e310:	4620      	mov	r0, r4
   1e312:	f7ff fee9 	bl	1e0e8 <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
   1e316:	4629      	mov	r1, r5
   1e318:	4632      	mov	r2, r6
   1e31a:	4620      	mov	r0, r4
   1e31c:	f7ff fe5a 	bl	1dfd4 <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
   1e320:	462a      	mov	r2, r5
   1e322:	1a29      	subs	r1, r5, r0
   1e324:	4620      	mov	r0, r4
   1e326:	f7ff fe9a 	bl	1e05e <merge_chunks>
   1e32a:	4629      	mov	r1, r5
   1e32c:	4632      	mov	r2, r6
   1e32e:	4620      	mov	r0, r4
   1e330:	f7ff fe50 	bl	1dfd4 <chunk_field>
   1e334:	1a2d      	subs	r5, r5, r0
	free_list_add(h, c);
   1e336:	4629      	mov	r1, r5
   1e338:	4620      	mov	r0, r4
}
   1e33a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, c);
   1e33e:	f7ff bf03 	b.w	1e148 <free_list_add>

0001e342 <sys_heap_free>:
	if (mem == NULL) {
   1e342:	b169      	cbz	r1, 1e360 <sys_heap_free+0x1e>
	struct z_heap *h = heap->heap;
   1e344:	6800      	ldr	r0, [r0, #0]
	return big_heap(h) ? 8 : 4;
   1e346:	6883      	ldr	r3, [r0, #8]
   1e348:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1e34c:	bf2c      	ite	cs
   1e34e:	2308      	movcs	r3, #8
   1e350:	2304      	movcc	r3, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1e352:	1ac9      	subs	r1, r1, r3
   1e354:	1a09      	subs	r1, r1, r0
   1e356:	bf48      	it	mi
   1e358:	3107      	addmi	r1, #7
	free_chunks(h, c);
   1e35a:	10c9      	asrs	r1, r1, #3
   1e35c:	f7ff bf99 	b.w	1e292 <free_chunks>
}
   1e360:	4770      	bx	lr

0001e362 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   1e362:	b510      	push	{r4, lr}
   1e364:	4604      	mov	r4, r0
	if (bytes == 0) {
   1e366:	b909      	cbnz	r1, 1e36c <sys_heap_alloc+0xa>
		return NULL;
   1e368:	2000      	movs	r0, #0
	}
	size_t chunksz = bytes_to_chunksz(heap->heap, bytes);
	chunkid_t c = alloc_chunks(heap->heap, chunksz);

	return chunk_mem(heap->heap, c);
}
   1e36a:	bd10      	pop	{r4, pc}
	size_t chunksz = bytes_to_chunksz(heap->heap, bytes);
   1e36c:	6800      	ldr	r0, [r0, #0]
   1e36e:	6883      	ldr	r3, [r0, #8]
   1e370:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1e374:	bf2c      	ite	cs
   1e376:	2308      	movcs	r3, #8
   1e378:	2304      	movcc	r3, #4
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   1e37a:	3107      	adds	r1, #7
   1e37c:	4419      	add	r1, r3
	chunkid_t c = alloc_chunks(heap->heap, chunksz);
   1e37e:	08c9      	lsrs	r1, r1, #3
   1e380:	f7ff ff47 	bl	1e212 <alloc_chunks>
	return chunk_mem(heap->heap, c);
   1e384:	6823      	ldr	r3, [r4, #0]
	if (c == 0) {
   1e386:	2800      	cmp	r0, #0
   1e388:	d0ee      	beq.n	1e368 <sys_heap_alloc+0x6>
	return big_heap(h) ? 8 : 4;
   1e38a:	689a      	ldr	r2, [r3, #8]
   1e38c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   1e390:	bf2c      	ite	cs
   1e392:	2208      	movcs	r2, #8
   1e394:	2204      	movcc	r2, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   1e396:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
   1e39a:	4418      	add	r0, r3
	return ret;
   1e39c:	e7e5      	b.n	1e36a <sys_heap_alloc+0x8>

0001e39e <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
   1e39e:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000

	return mem;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   1e3a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e3a4:	bf2c      	ite	cs
   1e3a6:	2508      	movcs	r5, #8
   1e3a8:	2504      	movcc	r5, #4
	/* Must fit in a 32 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0xffffffffU, "heap size is too big");

	/* Reserve the final marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   1e3aa:	1b55      	subs	r5, r2, r5

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1e3ac:	1dcc      	adds	r4, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1e3ae:	440d      	add	r5, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1e3b0:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1e3b4:	f025 0507 	bic.w	r5, r5, #7
	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
   1e3b8:	2200      	movs	r2, #0
   1e3ba:	2300      	movs	r3, #0
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   1e3bc:	1b2d      	subs	r5, r5, r4
	heap->heap = h;
   1e3be:	6004      	str	r4, [r0, #0]
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   1e3c0:	08ed      	lsrs	r5, r5, #3
	h->chunk0_hdr_area = 0;
   1e3c2:	e9c4 2300 	strd	r2, r3, [r4]
	h->len = buf_sz;
	h->avail_buckets = 0;
   1e3c6:	2300      	movs	r3, #0

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   1e3c8:	4629      	mov	r1, r5
	h->len = buf_sz;
   1e3ca:	60a5      	str	r5, [r4, #8]
	h->avail_buckets = 0;
   1e3cc:	60e3      	str	r3, [r4, #12]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   1e3ce:	4620      	mov	r0, r4
   1e3d0:	f7ff fe38 	bl	1e044 <bucket_idx>
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
   1e3d4:	0086      	lsls	r6, r0, #2
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   1e3d6:	361b      	adds	r6, #27
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   1e3d8:	1c41      	adds	r1, r0, #1
   1e3da:	08f6      	lsrs	r6, r6, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   1e3dc:	f104 0210 	add.w	r2, r4, #16
		h->buckets[i].next = 0;
   1e3e0:	4618      	mov	r0, r3
	for (int i = 0; i < nb_buckets; i++) {
   1e3e2:	428b      	cmp	r3, r1
   1e3e4:	db29      	blt.n	1e43a <sys_heap_init+0x9c>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
   1e3e6:	4632      	mov	r2, r6
   1e3e8:	4620      	mov	r0, r4
   1e3ea:	2100      	movs	r1, #0
   1e3ec:	f7ff fe26 	bl	1e03c <set_chunk_size>
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   1e3f0:	1baf      	subs	r7, r5, r6
	set_chunk_used(h, 0, true);
   1e3f2:	4620      	mov	r0, r4
   1e3f4:	2201      	movs	r2, #1
   1e3f6:	2100      	movs	r1, #0
   1e3f8:	f7ff fe08 	bl	1e00c <set_chunk_used>
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   1e3fc:	463a      	mov	r2, r7
   1e3fe:	4631      	mov	r1, r6
   1e400:	f7ff fe1c 	bl	1e03c <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1e404:	4633      	mov	r3, r6
   1e406:	4631      	mov	r1, r6
   1e408:	4620      	mov	r0, r4
   1e40a:	2200      	movs	r2, #0
   1e40c:	f7ff fded 	bl	1dfea <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
   1e410:	4629      	mov	r1, r5
   1e412:	4620      	mov	r0, r4
   1e414:	2200      	movs	r2, #0
   1e416:	f7ff fe11 	bl	1e03c <set_chunk_size>
   1e41a:	463b      	mov	r3, r7
   1e41c:	4629      	mov	r1, r5
   1e41e:	4620      	mov	r0, r4
   1e420:	2200      	movs	r2, #0
   1e422:	f7ff fde2 	bl	1dfea <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
   1e426:	4629      	mov	r1, r5
   1e428:	4620      	mov	r0, r4
   1e42a:	2201      	movs	r2, #1
   1e42c:	f7ff fdee 	bl	1e00c <set_chunk_used>

	free_list_add(h, chunk0_size);
   1e430:	4631      	mov	r1, r6
}
   1e432:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   1e436:	f7ff be87 	b.w	1e148 <free_list_add>
		h->buckets[i].next = 0;
   1e43a:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
   1e43e:	3301      	adds	r3, #1
   1e440:	e7cf      	b.n	1e3e2 <sys_heap_init+0x44>

0001e442 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   1e442:	4770      	bx	lr

0001e444 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   1e444:	2300      	movs	r3, #0
	list->head = NULL;
   1e446:	e9c0 3300 	strd	r3, r3, [r0]
}
   1e44a:	4770      	bx	lr

0001e44c <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   1e44c:	6803      	ldr	r3, [r0, #0]
   1e44e:	b923      	cbnz	r3, 1e45a <log_list_add_tail+0xe>
		list->head = msg;
   1e450:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   1e452:	2300      	movs	r3, #0
	list->tail = msg;
   1e454:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   1e456:	600b      	str	r3, [r1, #0]
}
   1e458:	4770      	bx	lr
		list->tail->next = msg;
   1e45a:	6843      	ldr	r3, [r0, #4]
   1e45c:	6019      	str	r1, [r3, #0]
   1e45e:	e7f8      	b.n	1e452 <log_list_add_tail+0x6>

0001e460 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   1e460:	6800      	ldr	r0, [r0, #0]
   1e462:	4770      	bx	lr

0001e464 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
   1e464:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
   1e466:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
   1e468:	b108      	cbz	r0, 1e46e <log_list_head_get+0xa>
		list->head = list->head->next;
   1e46a:	6802      	ldr	r2, [r0, #0]
   1e46c:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
   1e46e:	4770      	bx	lr

0001e470 <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
   1e470:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   1e472:	f7e8 f911 	bl	6698 <log_msg_chunk_alloc>

	if (msg != NULL) {
   1e476:	b118      	cbz	r0, 1e480 <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   1e478:	2301      	movs	r3, #1
   1e47a:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   1e47c:	2300      	movs	r3, #0
   1e47e:	8103      	strh	r3, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
	}

	return msg;
}
   1e480:	bd08      	pop	{r3, pc}

0001e482 <k_cycle_get_32_wrapper>:
   1e482:	f7e8 bd5d 	b.w	6f40 <z_timer_cycle_get_32>

0001e486 <dummy_timestamp>:
   1e486:	2000      	movs	r0, #0
   1e488:	4770      	bx	lr

0001e48a <z_log_get_s_mask>:
{
   1e48a:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e48c:	4605      	mov	r5, r0
	uint32_t mask = 0;
   1e48e:	2000      	movs	r0, #0
	uint32_t arg = 0;
   1e490:	4603      	mov	r3, r0
	bool arm = false;
   1e492:	4602      	mov	r2, r0
				mask |= BIT(arg);
   1e494:	2701      	movs	r7, #1
	while ((curr = *str++) && arg < nargs) {
   1e496:	f815 4b01 	ldrb.w	r4, [r5], #1
   1e49a:	b10c      	cbz	r4, 1e4a0 <z_log_get_s_mask+0x16>
   1e49c:	428b      	cmp	r3, r1
   1e49e:	d300      	bcc.n	1e4a2 <z_log_get_s_mask+0x18>
}
   1e4a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (curr == '%') {
   1e4a2:	2c25      	cmp	r4, #37	; 0x25
   1e4a4:	d102      	bne.n	1e4ac <z_log_get_s_mask+0x22>
			arm = !arm;
   1e4a6:	f082 0201 	eor.w	r2, r2, #1
   1e4aa:	e7f4      	b.n	1e496 <z_log_get_s_mask+0xc>
		} else if (arm && isalpha((int)curr)) {
   1e4ac:	2a00      	cmp	r2, #0
   1e4ae:	d0f2      	beq.n	1e496 <z_log_get_s_mask+0xc>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   1e4b0:	f044 0620 	orr.w	r6, r4, #32
   1e4b4:	3e61      	subs	r6, #97	; 0x61
   1e4b6:	2e19      	cmp	r6, #25
   1e4b8:	d8ed      	bhi.n	1e496 <z_log_get_s_mask+0xc>
			if (curr == 's') {
   1e4ba:	2c73      	cmp	r4, #115	; 0x73
				mask |= BIT(arg);
   1e4bc:	bf04      	itt	eq
   1e4be:	fa07 f203 	lsleq.w	r2, r7, r3
   1e4c2:	4310      	orreq	r0, r2
			arg++;
   1e4c4:	3301      	adds	r3, #1
			arm = false;
   1e4c6:	2200      	movs	r2, #0
   1e4c8:	e7e5      	b.n	1e496 <z_log_get_s_mask+0xc>

0001e4ca <log_0>:
{
   1e4ca:	b538      	push	{r3, r4, r5, lr}
   1e4cc:	4605      	mov	r5, r0
   1e4ce:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   1e4d0:	f7ff ffce 	bl	1e470 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1e4d4:	b128      	cbz	r0, 1e4e2 <log_0+0x18>
		msg->str = str;
   1e4d6:	6105      	str	r5, [r0, #16]
		msg_finalize(msg, src_level);
   1e4d8:	4621      	mov	r1, r4
}
   1e4da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		msg_finalize(msg, src_level);
   1e4de:	f7e7 bff5 	b.w	64cc <msg_finalize>
}
   1e4e2:	bd38      	pop	{r3, r4, r5, pc}

0001e4e4 <log_1>:
{
   1e4e4:	b570      	push	{r4, r5, r6, lr}
   1e4e6:	4606      	mov	r6, r0
   1e4e8:	460d      	mov	r5, r1
   1e4ea:	4614      	mov	r4, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1e4ec:	f7ff ffc0 	bl	1e470 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1e4f0:	b158      	cbz	r0, 1e50a <log_1+0x26>
		msg->str = str;
		msg->hdr.params.std.nargs = 1U;
   1e4f2:	7a42      	ldrb	r2, [r0, #9]
		msg->str = str;
   1e4f4:	6106      	str	r6, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
   1e4f6:	2101      	movs	r1, #1
   1e4f8:	f361 1207 	bfi	r2, r1, #4, #4
   1e4fc:	7242      	strb	r2, [r0, #9]
		msg->payload.single.args[0] = arg1;
   1e4fe:	6145      	str	r5, [r0, #20]
		msg_finalize(msg, src_level);
   1e500:	4621      	mov	r1, r4
}
   1e502:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		msg_finalize(msg, src_level);
   1e506:	f7e7 bfe1 	b.w	64cc <msg_finalize>
}
   1e50a:	bd70      	pop	{r4, r5, r6, pc}

0001e50c <log_2>:
{
   1e50c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e510:	4680      	mov	r8, r0
   1e512:	460f      	mov	r7, r1
   1e514:	4616      	mov	r6, r2
   1e516:	461d      	mov	r5, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1e518:	f7ff ffaa 	bl	1e470 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1e51c:	b168      	cbz	r0, 1e53a <log_2+0x2e>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
   1e51e:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   1e520:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 2U;
   1e524:	2202      	movs	r2, #2
   1e526:	f362 1307 	bfi	r3, r2, #4, #4
   1e52a:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   1e52c:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg_finalize(msg, src_level);
   1e530:	4629      	mov	r1, r5
}
   1e532:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
   1e536:	f7e7 bfc9 	b.w	64cc <msg_finalize>
}
   1e53a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001e53e <log_3>:
{
   1e53e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e542:	4680      	mov	r8, r0
   1e544:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   1e548:	460f      	mov	r7, r1
   1e54a:	4616      	mov	r6, r2
   1e54c:	461d      	mov	r5, r3
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1e54e:	f7ff ff8f 	bl	1e470 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1e552:	b170      	cbz	r0, 1e572 <log_3+0x34>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
   1e554:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   1e556:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 3U;
   1e55a:	2203      	movs	r2, #3
   1e55c:	f362 1307 	bfi	r3, r2, #4, #4
   1e560:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   1e562:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->payload.single.args[2] = arg3;
   1e566:	61c5      	str	r5, [r0, #28]
		msg_finalize(msg, src_level);
   1e568:	4649      	mov	r1, r9
}
   1e56a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		msg_finalize(msg, src_level);
   1e56e:	f7e7 bfad 	b.w	64cc <msg_finalize>
}
   1e572:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001e576 <log_n>:
{
   1e576:	b510      	push	{r4, lr}
   1e578:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
   1e57a:	f000 f89f 	bl	1e6bc <log_msg_create_n>
		if (msg == NULL) {
   1e57e:	b120      	cbz	r0, 1e58a <log_n+0x14>
		msg_finalize(msg, src_level);
   1e580:	4621      	mov	r1, r4
}
   1e582:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   1e586:	f7e7 bfa1 	b.w	64cc <msg_finalize>
}
   1e58a:	bd10      	pop	{r4, pc}

0001e58c <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   1e58c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e590:	461c      	mov	r4, r3
	uint32_t available_len = msg->hdr.params.hexdump.length;
   1e592:	8903      	ldrh	r3, [r0, #8]
{
   1e594:	f89d 8020 	ldrb.w	r8, [sp, #32]
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
   1e598:	ebb4 0f93 	cmp.w	r4, r3, lsr #2
{
   1e59c:	460e      	mov	r6, r1
   1e59e:	4611      	mov	r1, r2
	uint32_t available_len = msg->hdr.params.hexdump.length;
   1e5a0:	ea4f 0293 	mov.w	r2, r3, lsr #2
	if (offset >= available_len) {
   1e5a4:	d303      	bcc.n	1e5ae <log_msg_hexdump_data_op+0x22>
		*length = 0;
   1e5a6:	2300      	movs	r3, #0
   1e5a8:	600b      	str	r3, [r1, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   1e5aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
   1e5ae:	680b      	ldr	r3, [r1, #0]
   1e5b0:	4423      	add	r3, r4
   1e5b2:	4293      	cmp	r3, r2
		*length = available_len - offset;
   1e5b4:	bf84      	itt	hi
   1e5b6:	1b13      	subhi	r3, r2, r4
   1e5b8:	600b      	strhi	r3, [r1, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   1e5ba:	2a0c      	cmp	r2, #12
	req_len = *length;
   1e5bc:	f8d1 9000 	ldr.w	r9, [r1]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   1e5c0:	d929      	bls.n	1e616 <log_msg_hexdump_data_op+0x8a>
	if (offset < chunk_len) {
   1e5c2:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
   1e5c4:	6947      	ldr	r7, [r0, #20]
	if (offset < chunk_len) {
   1e5c6:	d82c      	bhi.n	1e622 <log_msg_hexdump_data_op+0x96>
		head_data = msg->payload.ext.data.bytes;
   1e5c8:	3018      	adds	r0, #24
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   1e5ca:	2208      	movs	r2, #8
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   1e5cc:	454a      	cmp	r2, r9
   1e5ce:	bf28      	it	cs
   1e5d0:	464a      	movcs	r2, r9
   1e5d2:	4615      	mov	r5, r2
		if (put_op) {
   1e5d4:	4420      	add	r0, r4
   1e5d6:	f1b8 0f00 	cmp.w	r8, #0
   1e5da:	d01f      	beq.n	1e61c <log_msg_hexdump_data_op+0x90>
			(void)memcpy(&head_data[offset], data, cpy_len);
   1e5dc:	4631      	mov	r1, r6
			(void)memcpy(data, &head_data[offset], cpy_len);
   1e5de:	f001 fc46 	bl	1fe6e <memcpy>
		req_len -= cpy_len;
   1e5e2:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   1e5e6:	442e      	add	r6, r5
	while (req_len > 0) {
   1e5e8:	f1b9 0f00 	cmp.w	r9, #0
   1e5ec:	d0dd      	beq.n	1e5aa <log_msg_hexdump_data_op+0x1e>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   1e5ee:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   1e5f2:	454d      	cmp	r5, r9
   1e5f4:	bf28      	it	cs
   1e5f6:	464d      	movcs	r5, r9
		if (put_op) {
   1e5f8:	1d20      	adds	r0, r4, #4
   1e5fa:	4438      	add	r0, r7
			(void)memcpy(&cont->payload.bytes[offset],
   1e5fc:	462a      	mov	r2, r5
		if (put_op) {
   1e5fe:	f1b8 0f00 	cmp.w	r8, #0
   1e602:	d014      	beq.n	1e62e <log_msg_hexdump_data_op+0xa2>
			(void)memcpy(&cont->payload.bytes[offset],
   1e604:	4631      	mov	r1, r6
			(void)memcpy(data, &cont->payload.bytes[offset],
   1e606:	f001 fc32 	bl	1fe6e <memcpy>
		req_len -= cpy_len;
   1e60a:	eba9 0905 	sub.w	r9, r9, r5
		cont = cont->next;
   1e60e:	683f      	ldr	r7, [r7, #0]
		data += cpy_len;
   1e610:	442e      	add	r6, r5
		offset = 0;
   1e612:	2400      	movs	r4, #0
   1e614:	e7e8      	b.n	1e5e8 <log_msg_hexdump_data_op+0x5c>
		head_data = msg->payload.single.bytes;
   1e616:	3014      	adds	r0, #20
	struct log_msg_cont *cont = NULL;
   1e618:	2700      	movs	r7, #0
   1e61a:	e7d7      	b.n	1e5cc <log_msg_hexdump_data_op+0x40>
			(void)memcpy(data, &head_data[offset], cpy_len);
   1e61c:	4601      	mov	r1, r0
   1e61e:	4630      	mov	r0, r6
   1e620:	e7dd      	b.n	1e5de <log_msg_hexdump_data_op+0x52>
		offset -= chunk_len;
   1e622:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
   1e624:	2c1b      	cmp	r4, #27
   1e626:	d9df      	bls.n	1e5e8 <log_msg_hexdump_data_op+0x5c>
			cont = cont->next;
   1e628:	683f      	ldr	r7, [r7, #0]
			offset -= chunk_len;
   1e62a:	3c1c      	subs	r4, #28
   1e62c:	e7fa      	b.n	1e624 <log_msg_hexdump_data_op+0x98>
			(void)memcpy(data, &cont->payload.bytes[offset],
   1e62e:	4601      	mov	r1, r0
   1e630:	4630      	mov	r0, r6
   1e632:	e7e8      	b.n	1e606 <log_msg_hexdump_data_op+0x7a>

0001e634 <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1e634:	3004      	adds	r0, #4
   1e636:	f3bf 8f5b 	dmb	ish
   1e63a:	e850 3f00 	ldrex	r3, [r0]
   1e63e:	3301      	adds	r3, #1
   1e640:	e840 3200 	strex	r2, r3, [r0]
   1e644:	2a00      	cmp	r2, #0
   1e646:	d1f8      	bne.n	1e63a <log_msg_get+0x6>
   1e648:	f3bf 8f5b 	dmb	ish
}
   1e64c:	4770      	bx	lr

0001e64e <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   1e64e:	7a40      	ldrb	r0, [r0, #9]
}
   1e650:	0900      	lsrs	r0, r0, #4
   1e652:	4770      	bx	lr

0001e654 <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
   1e654:	7a43      	ldrb	r3, [r0, #9]
   1e656:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
   1e65a:	ea4f 1213 	mov.w	r2, r3, lsr #4
   1e65e:	d216      	bcs.n	1e68e <log_msg_arg_get+0x3a>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   1e660:	2a03      	cmp	r2, #3
   1e662:	d803      	bhi.n	1e66c <log_msg_arg_get+0x18>
		arg = msg->payload.single.args[arg_idx];
   1e664:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   1e668:	6948      	ldr	r0, [r1, #20]
   1e66a:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   1e66c:	2901      	cmp	r1, #1
   1e66e:	d803      	bhi.n	1e678 <log_msg_arg_get+0x24>
		return msg->payload.ext.data.args[arg_idx];
   1e670:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   1e674:	6988      	ldr	r0, [r1, #24]
   1e676:	4770      	bx	lr
	cont = msg->payload.ext.next;
   1e678:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   1e67a:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   1e67c:	2906      	cmp	r1, #6
   1e67e:	d803      	bhi.n	1e688 <log_msg_arg_get+0x34>
	return cont->payload.args[arg_idx];
   1e680:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   1e684:	6848      	ldr	r0, [r1, #4]
   1e686:	4770      	bx	lr
		cont = cont->next;
   1e688:	681b      	ldr	r3, [r3, #0]
		arg_idx -= ARGS_CONT_MSG;
   1e68a:	3907      	subs	r1, #7
		cont = cont->next;
   1e68c:	e7f6      	b.n	1e67c <log_msg_arg_get+0x28>
		return 0;
   1e68e:	2000      	movs	r0, #0
}
   1e690:	4770      	bx	lr

0001e692 <log_msg_put>:
{
   1e692:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1e694:	1d02      	adds	r2, r0, #4
   1e696:	f3bf 8f5b 	dmb	ish
   1e69a:	e852 1f00 	ldrex	r1, [r2]
   1e69e:	3901      	subs	r1, #1
   1e6a0:	e842 1c00 	strex	ip, r1, [r2]
   1e6a4:	f1bc 0f00 	cmp.w	ip, #0
   1e6a8:	d1f7      	bne.n	1e69a <log_msg_put+0x8>
   1e6aa:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
   1e6ae:	685b      	ldr	r3, [r3, #4]
   1e6b0:	b90b      	cbnz	r3, 1e6b6 <log_msg_put+0x24>
		msg_free(msg);
   1e6b2:	f7e8 b805 	b.w	66c0 <msg_free>
}
   1e6b6:	4770      	bx	lr

0001e6b8 <log_msg_str_get>:
}
   1e6b8:	6900      	ldr	r0, [r0, #16]
   1e6ba:	4770      	bx	lr

0001e6bc <log_msg_create_n>:
{
   1e6bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e6c0:	4681      	mov	r9, r0
   1e6c2:	4688      	mov	r8, r1
   1e6c4:	4615      	mov	r5, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   1e6c6:	f7e7 ffe7 	bl	6698 <log_msg_chunk_alloc>
	if (msg != NULL) {
   1e6ca:	4604      	mov	r4, r0
   1e6cc:	b330      	cbz	r0, 1e71c <log_msg_create_n+0x60>
		msg->hdr.ref_cnt = 1;
   1e6ce:	2301      	movs	r3, #1
		msg->hdr.params.raw = 0U;
   1e6d0:	2700      	movs	r7, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   1e6d2:	2d03      	cmp	r5, #3
		msg->hdr.ref_cnt = 1;
   1e6d4:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   1e6d6:	8107      	strh	r7, [r0, #8]
   1e6d8:	d909      	bls.n	1e6ee <log_msg_create_n+0x32>
	msg->hdr.params.generic.ext = 1;
   1e6da:	2202      	movs	r2, #2
   1e6dc:	8102      	strh	r2, [r0, #8]
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   1e6de:	f1a5 0a02 	sub.w	sl, r5, #2
	next = &msg->payload.ext.next;
   1e6e2:	f100 0b14 	add.w	fp, r0, #20
	*next = NULL;
   1e6e6:	6147      	str	r7, [r0, #20]
	while (n > 0) {
   1e6e8:	f1ba 0f00 	cmp.w	sl, #0
   1e6ec:	dc0e      	bgt.n	1e70c <log_msg_create_n+0x50>
		msg->hdr.params.std.nargs = nargs;
   1e6ee:	7a63      	ldrb	r3, [r4, #9]
		msg->str = str;
   1e6f0:	f8c4 9010 	str.w	r9, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
   1e6f4:	f365 1307 	bfi	r3, r5, #4, #4
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   1e6f8:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
   1e6fa:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   1e6fc:	d818      	bhi.n	1e730 <log_msg_create_n+0x74>
		(void)memcpy(msg->payload.single.args, args,
   1e6fe:	00aa      	lsls	r2, r5, #2
   1e700:	4641      	mov	r1, r8
   1e702:	f104 0014 	add.w	r0, r4, #20
   1e706:	f001 fbb2 	bl	1fe6e <memcpy>
	while (nargs != 0U) {
   1e70a:	e007      	b.n	1e71c <log_msg_create_n+0x60>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   1e70c:	f7e7 ffc4 	bl	6698 <log_msg_chunk_alloc>
		if (cont == NULL) {
   1e710:	4606      	mov	r6, r0
   1e712:	b930      	cbnz	r0, 1e722 <log_msg_create_n+0x66>
			msg_free(msg);
   1e714:	4620      	mov	r0, r4
   1e716:	f7e7 ffd3 	bl	66c0 <msg_free>
			return NULL;
   1e71a:	4634      	mov	r4, r6
}
   1e71c:	4620      	mov	r0, r4
   1e71e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
   1e722:	f8cb 0000 	str.w	r0, [fp]
		cont->next = NULL;
   1e726:	f1aa 0a07 	sub.w	sl, sl, #7
   1e72a:	6007      	str	r7, [r0, #0]
		next = &cont->next;
   1e72c:	4683      	mov	fp, r0
		n -= ARGS_CONT_MSG;
   1e72e:	e7db      	b.n	1e6e8 <log_msg_create_n+0x2c>
		(void)memcpy(msg->payload.ext.data.args, args,
   1e730:	4641      	mov	r1, r8
   1e732:	2208      	movs	r2, #8
   1e734:	f104 0018 	add.w	r0, r4, #24
	struct log_msg_cont *cont = msg->payload.ext.next;
   1e738:	6967      	ldr	r7, [r4, #20]
		(void)memcpy(msg->payload.ext.data.args, args,
   1e73a:	f001 fb98 	bl	1fe6e <memcpy>
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   1e73e:	3d02      	subs	r5, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   1e740:	f108 0808 	add.w	r8, r8, #8
		uint32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   1e744:	2d07      	cmp	r5, #7
   1e746:	462e      	mov	r6, r5
   1e748:	bf28      	it	cs
   1e74a:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
   1e74c:	ea4f 0986 	mov.w	r9, r6, lsl #2
   1e750:	4641      	mov	r1, r8
   1e752:	1d38      	adds	r0, r7, #4
   1e754:	464a      	mov	r2, r9
   1e756:	f001 fb8a 	bl	1fe6e <memcpy>
	while (nargs != 0U) {
   1e75a:	1bad      	subs	r5, r5, r6
		cont = cont->next;
   1e75c:	683f      	ldr	r7, [r7, #0]
		args += cpy_args;
   1e75e:	44c8      	add	r8, r9
	while (nargs != 0U) {
   1e760:	d1f0      	bne.n	1e744 <log_msg_create_n+0x88>
   1e762:	e7db      	b.n	1e71c <log_msg_create_n+0x60>

0001e764 <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
   1e764:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   1e766:	2400      	movs	r4, #0
   1e768:	9400      	str	r4, [sp, #0]
   1e76a:	f7ff ff0f 	bl	1e58c <log_msg_hexdump_data_op>
}
   1e76e:	b002      	add	sp, #8
   1e770:	bd10      	pop	{r4, pc}

0001e772 <buffer_write>:
{
   1e772:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e774:	4606      	mov	r6, r0
   1e776:	460d      	mov	r5, r1
   1e778:	4614      	mov	r4, r2
   1e77a:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   1e77c:	4621      	mov	r1, r4
   1e77e:	4628      	mov	r0, r5
   1e780:	463a      	mov	r2, r7
   1e782:	47b0      	blx	r6
	} while (len != 0);
   1e784:	1a24      	subs	r4, r4, r0
		buf += processed;
   1e786:	4405      	add	r5, r0
	} while (len != 0);
   1e788:	d1f8      	bne.n	1e77c <buffer_write+0xa>
}
   1e78a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001e78c <std_print>:
{
   1e78c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1e790:	b08e      	sub	sp, #56	; 0x38
   1e792:	af0e      	add	r7, sp, #56	; 0x38
   1e794:	4680      	mov	r8, r0
   1e796:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
   1e798:	f7ff ff8e 	bl	1e6b8 <log_msg_str_get>
   1e79c:	4606      	mov	r6, r0
	uint32_t nargs = log_msg_nargs_get(msg);
   1e79e:	4640      	mov	r0, r8
   1e7a0:	f7ff ff55 	bl	1e64e <log_msg_nargs_get>
	uint32_t *args = alloca(sizeof(uint32_t)*nargs);
   1e7a4:	0083      	lsls	r3, r0, #2
   1e7a6:	3307      	adds	r3, #7
   1e7a8:	f023 0307 	bic.w	r3, r3, #7
   1e7ac:	ebad 0d03 	sub.w	sp, sp, r3
	uint32_t nargs = log_msg_nargs_get(msg);
   1e7b0:	4682      	mov	sl, r0
	uint32_t *args = alloca(sizeof(uint32_t)*nargs);
   1e7b2:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   1e7b4:	f04f 0900 	mov.w	r9, #0
   1e7b8:	45d1      	cmp	r9, sl
   1e7ba:	d116      	bne.n	1e7ea <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
   1e7bc:	4640      	mov	r0, r8
   1e7be:	f7ff ff46 	bl	1e64e <log_msg_nargs_get>
   1e7c2:	280f      	cmp	r0, #15
   1e7c4:	d81e      	bhi.n	1e804 <std_print+0x78>
   1e7c6:	e8df f010 	tbh	[pc, r0, lsl #1]
   1e7ca:	0019      	.short	0x0019
   1e7cc:	00260020 	.word	0x00260020
   1e7d0:	0036002d 	.word	0x0036002d
   1e7d4:	004e0041 	.word	0x004e0041
   1e7d8:	006e005d 	.word	0x006e005d
   1e7dc:	00960081 	.word	0x00960081
   1e7e0:	00c600ad 	.word	0x00c600ad
   1e7e4:	00fe00e1 	.word	0x00fe00e1
   1e7e8:	011d      	.short	0x011d
		args[i] = log_msg_arg_get(msg, i);
   1e7ea:	4649      	mov	r1, r9
   1e7ec:	4640      	mov	r0, r8
   1e7ee:	f7ff ff31 	bl	1e654 <log_msg_arg_get>
   1e7f2:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
	for (i = 0; i < nargs; i++) {
   1e7f6:	f109 0901 	add.w	r9, r9, #1
   1e7fa:	e7dd      	b.n	1e7b8 <std_print+0x2c>
		print_formatted(log_output, str);
   1e7fc:	4631      	mov	r1, r6
   1e7fe:	4628      	mov	r0, r5
   1e800:	f7e7 ff9c 	bl	673c <print_formatted>
}
   1e804:	46bd      	mov	sp, r7
   1e806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, str, args[0]);
   1e80a:	6822      	ldr	r2, [r4, #0]
   1e80c:	4631      	mov	r1, r6
   1e80e:	4628      	mov	r0, r5
   1e810:	f7e7 ff94 	bl	673c <print_formatted>
		break;
   1e814:	e7f6      	b.n	1e804 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1]);
   1e816:	e9d4 2300 	ldrd	r2, r3, [r4]
   1e81a:	4631      	mov	r1, r6
   1e81c:	4628      	mov	r0, r5
   1e81e:	f7e7 ff8d 	bl	673c <print_formatted>
		break;
   1e822:	e7ef      	b.n	1e804 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2]);
   1e824:	68a3      	ldr	r3, [r4, #8]
   1e826:	9300      	str	r3, [sp, #0]
   1e828:	e9d4 2300 	ldrd	r2, r3, [r4]
   1e82c:	4631      	mov	r1, r6
   1e82e:	4628      	mov	r0, r5
   1e830:	f7e7 ff84 	bl	673c <print_formatted>
		break;
   1e834:	e7e6      	b.n	1e804 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1e836:	68e3      	ldr	r3, [r4, #12]
   1e838:	9301      	str	r3, [sp, #4]
   1e83a:	68a3      	ldr	r3, [r4, #8]
   1e83c:	9300      	str	r3, [sp, #0]
   1e83e:	e9d4 2300 	ldrd	r2, r3, [r4]
   1e842:	4631      	mov	r1, r6
   1e844:	4628      	mov	r0, r5
   1e846:	f7e7 ff79 	bl	673c <print_formatted>
		break;
   1e84a:	e7db      	b.n	1e804 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1e84c:	6923      	ldr	r3, [r4, #16]
   1e84e:	9302      	str	r3, [sp, #8]
   1e850:	68e3      	ldr	r3, [r4, #12]
   1e852:	9301      	str	r3, [sp, #4]
   1e854:	68a3      	ldr	r3, [r4, #8]
   1e856:	9300      	str	r3, [sp, #0]
   1e858:	e9d4 2300 	ldrd	r2, r3, [r4]
   1e85c:	4631      	mov	r1, r6
   1e85e:	4628      	mov	r0, r5
   1e860:	f7e7 ff6c 	bl	673c <print_formatted>
		break;
   1e864:	e7ce      	b.n	1e804 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1e866:	6963      	ldr	r3, [r4, #20]
   1e868:	9303      	str	r3, [sp, #12]
   1e86a:	6923      	ldr	r3, [r4, #16]
   1e86c:	9302      	str	r3, [sp, #8]
   1e86e:	68e3      	ldr	r3, [r4, #12]
   1e870:	9301      	str	r3, [sp, #4]
   1e872:	68a3      	ldr	r3, [r4, #8]
   1e874:	9300      	str	r3, [sp, #0]
   1e876:	e9d4 2300 	ldrd	r2, r3, [r4]
   1e87a:	4631      	mov	r1, r6
   1e87c:	4628      	mov	r0, r5
   1e87e:	f7e7 ff5d 	bl	673c <print_formatted>
		break;
   1e882:	e7bf      	b.n	1e804 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1e884:	69a3      	ldr	r3, [r4, #24]
   1e886:	9304      	str	r3, [sp, #16]
   1e888:	6963      	ldr	r3, [r4, #20]
   1e88a:	9303      	str	r3, [sp, #12]
   1e88c:	6923      	ldr	r3, [r4, #16]
   1e88e:	9302      	str	r3, [sp, #8]
   1e890:	68e3      	ldr	r3, [r4, #12]
   1e892:	9301      	str	r3, [sp, #4]
   1e894:	68a3      	ldr	r3, [r4, #8]
   1e896:	9300      	str	r3, [sp, #0]
   1e898:	e9d4 2300 	ldrd	r2, r3, [r4]
   1e89c:	4631      	mov	r1, r6
   1e89e:	4628      	mov	r0, r5
   1e8a0:	f7e7 ff4c 	bl	673c <print_formatted>
		break;
   1e8a4:	e7ae      	b.n	1e804 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1e8a6:	69e3      	ldr	r3, [r4, #28]
   1e8a8:	9305      	str	r3, [sp, #20]
   1e8aa:	69a3      	ldr	r3, [r4, #24]
   1e8ac:	9304      	str	r3, [sp, #16]
   1e8ae:	6963      	ldr	r3, [r4, #20]
   1e8b0:	9303      	str	r3, [sp, #12]
   1e8b2:	6923      	ldr	r3, [r4, #16]
   1e8b4:	9302      	str	r3, [sp, #8]
   1e8b6:	68e3      	ldr	r3, [r4, #12]
   1e8b8:	9301      	str	r3, [sp, #4]
   1e8ba:	68a3      	ldr	r3, [r4, #8]
   1e8bc:	9300      	str	r3, [sp, #0]
   1e8be:	e9d4 2300 	ldrd	r2, r3, [r4]
   1e8c2:	4631      	mov	r1, r6
   1e8c4:	4628      	mov	r0, r5
   1e8c6:	f7e7 ff39 	bl	673c <print_formatted>
		break;
   1e8ca:	e79b      	b.n	1e804 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1e8cc:	6a23      	ldr	r3, [r4, #32]
   1e8ce:	9306      	str	r3, [sp, #24]
   1e8d0:	69e3      	ldr	r3, [r4, #28]
   1e8d2:	9305      	str	r3, [sp, #20]
   1e8d4:	69a3      	ldr	r3, [r4, #24]
   1e8d6:	9304      	str	r3, [sp, #16]
   1e8d8:	6963      	ldr	r3, [r4, #20]
   1e8da:	9303      	str	r3, [sp, #12]
   1e8dc:	6923      	ldr	r3, [r4, #16]
   1e8de:	9302      	str	r3, [sp, #8]
   1e8e0:	68e3      	ldr	r3, [r4, #12]
   1e8e2:	9301      	str	r3, [sp, #4]
   1e8e4:	68a3      	ldr	r3, [r4, #8]
   1e8e6:	9300      	str	r3, [sp, #0]
   1e8e8:	e9d4 2300 	ldrd	r2, r3, [r4]
   1e8ec:	4631      	mov	r1, r6
   1e8ee:	4628      	mov	r0, r5
   1e8f0:	f7e7 ff24 	bl	673c <print_formatted>
		break;
   1e8f4:	e786      	b.n	1e804 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1e8f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1e8f8:	9307      	str	r3, [sp, #28]
   1e8fa:	6a23      	ldr	r3, [r4, #32]
   1e8fc:	9306      	str	r3, [sp, #24]
   1e8fe:	69e3      	ldr	r3, [r4, #28]
   1e900:	9305      	str	r3, [sp, #20]
   1e902:	69a3      	ldr	r3, [r4, #24]
   1e904:	9304      	str	r3, [sp, #16]
   1e906:	6963      	ldr	r3, [r4, #20]
   1e908:	9303      	str	r3, [sp, #12]
   1e90a:	6923      	ldr	r3, [r4, #16]
   1e90c:	9302      	str	r3, [sp, #8]
   1e90e:	68e3      	ldr	r3, [r4, #12]
   1e910:	9301      	str	r3, [sp, #4]
   1e912:	68a3      	ldr	r3, [r4, #8]
   1e914:	9300      	str	r3, [sp, #0]
   1e916:	e9d4 2300 	ldrd	r2, r3, [r4]
   1e91a:	4631      	mov	r1, r6
   1e91c:	4628      	mov	r0, r5
   1e91e:	f7e7 ff0d 	bl	673c <print_formatted>
		break;
   1e922:	e76f      	b.n	1e804 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1e924:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1e926:	9308      	str	r3, [sp, #32]
   1e928:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1e92a:	9307      	str	r3, [sp, #28]
   1e92c:	6a23      	ldr	r3, [r4, #32]
   1e92e:	9306      	str	r3, [sp, #24]
   1e930:	69e3      	ldr	r3, [r4, #28]
   1e932:	9305      	str	r3, [sp, #20]
   1e934:	69a3      	ldr	r3, [r4, #24]
   1e936:	9304      	str	r3, [sp, #16]
   1e938:	6963      	ldr	r3, [r4, #20]
   1e93a:	9303      	str	r3, [sp, #12]
   1e93c:	6923      	ldr	r3, [r4, #16]
   1e93e:	9302      	str	r3, [sp, #8]
   1e940:	68e3      	ldr	r3, [r4, #12]
   1e942:	9301      	str	r3, [sp, #4]
   1e944:	68a3      	ldr	r3, [r4, #8]
   1e946:	9300      	str	r3, [sp, #0]
   1e948:	e9d4 2300 	ldrd	r2, r3, [r4]
   1e94c:	4631      	mov	r1, r6
   1e94e:	4628      	mov	r0, r5
   1e950:	f7e7 fef4 	bl	673c <print_formatted>
		break;
   1e954:	e756      	b.n	1e804 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1e956:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1e958:	9309      	str	r3, [sp, #36]	; 0x24
   1e95a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1e95c:	9308      	str	r3, [sp, #32]
   1e95e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1e960:	9307      	str	r3, [sp, #28]
   1e962:	6a23      	ldr	r3, [r4, #32]
   1e964:	9306      	str	r3, [sp, #24]
   1e966:	69e3      	ldr	r3, [r4, #28]
   1e968:	9305      	str	r3, [sp, #20]
   1e96a:	69a3      	ldr	r3, [r4, #24]
   1e96c:	9304      	str	r3, [sp, #16]
   1e96e:	6963      	ldr	r3, [r4, #20]
   1e970:	9303      	str	r3, [sp, #12]
   1e972:	6923      	ldr	r3, [r4, #16]
   1e974:	9302      	str	r3, [sp, #8]
   1e976:	68e3      	ldr	r3, [r4, #12]
   1e978:	9301      	str	r3, [sp, #4]
   1e97a:	68a3      	ldr	r3, [r4, #8]
   1e97c:	9300      	str	r3, [sp, #0]
   1e97e:	e9d4 2300 	ldrd	r2, r3, [r4]
   1e982:	4631      	mov	r1, r6
   1e984:	4628      	mov	r0, r5
   1e986:	f7e7 fed9 	bl	673c <print_formatted>
		break;
   1e98a:	e73b      	b.n	1e804 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1e98c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1e98e:	930a      	str	r3, [sp, #40]	; 0x28
   1e990:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1e992:	9309      	str	r3, [sp, #36]	; 0x24
   1e994:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1e996:	9308      	str	r3, [sp, #32]
   1e998:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1e99a:	9307      	str	r3, [sp, #28]
   1e99c:	6a23      	ldr	r3, [r4, #32]
   1e99e:	9306      	str	r3, [sp, #24]
   1e9a0:	69e3      	ldr	r3, [r4, #28]
   1e9a2:	9305      	str	r3, [sp, #20]
   1e9a4:	69a3      	ldr	r3, [r4, #24]
   1e9a6:	9304      	str	r3, [sp, #16]
   1e9a8:	6963      	ldr	r3, [r4, #20]
   1e9aa:	9303      	str	r3, [sp, #12]
   1e9ac:	6923      	ldr	r3, [r4, #16]
   1e9ae:	9302      	str	r3, [sp, #8]
   1e9b0:	68e3      	ldr	r3, [r4, #12]
   1e9b2:	9301      	str	r3, [sp, #4]
   1e9b4:	68a3      	ldr	r3, [r4, #8]
   1e9b6:	9300      	str	r3, [sp, #0]
   1e9b8:	e9d4 2300 	ldrd	r2, r3, [r4]
   1e9bc:	4631      	mov	r1, r6
   1e9be:	4628      	mov	r0, r5
   1e9c0:	f7e7 febc 	bl	673c <print_formatted>
		break;
   1e9c4:	e71e      	b.n	1e804 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1e9c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1e9c8:	930b      	str	r3, [sp, #44]	; 0x2c
   1e9ca:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1e9cc:	930a      	str	r3, [sp, #40]	; 0x28
   1e9ce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1e9d0:	9309      	str	r3, [sp, #36]	; 0x24
   1e9d2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1e9d4:	9308      	str	r3, [sp, #32]
   1e9d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1e9d8:	9307      	str	r3, [sp, #28]
   1e9da:	6a23      	ldr	r3, [r4, #32]
   1e9dc:	9306      	str	r3, [sp, #24]
   1e9de:	69e3      	ldr	r3, [r4, #28]
   1e9e0:	9305      	str	r3, [sp, #20]
   1e9e2:	69a3      	ldr	r3, [r4, #24]
   1e9e4:	9304      	str	r3, [sp, #16]
   1e9e6:	6963      	ldr	r3, [r4, #20]
   1e9e8:	9303      	str	r3, [sp, #12]
   1e9ea:	6923      	ldr	r3, [r4, #16]
   1e9ec:	9302      	str	r3, [sp, #8]
   1e9ee:	68e3      	ldr	r3, [r4, #12]
   1e9f0:	9301      	str	r3, [sp, #4]
   1e9f2:	68a3      	ldr	r3, [r4, #8]
   1e9f4:	9300      	str	r3, [sp, #0]
   1e9f6:	e9d4 2300 	ldrd	r2, r3, [r4]
   1e9fa:	4631      	mov	r1, r6
   1e9fc:	4628      	mov	r0, r5
   1e9fe:	f7e7 fe9d 	bl	673c <print_formatted>
		break;
   1ea02:	e6ff      	b.n	1e804 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1ea04:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1ea06:	930c      	str	r3, [sp, #48]	; 0x30
   1ea08:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1ea0a:	930b      	str	r3, [sp, #44]	; 0x2c
   1ea0c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1ea0e:	930a      	str	r3, [sp, #40]	; 0x28
   1ea10:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1ea12:	9309      	str	r3, [sp, #36]	; 0x24
   1ea14:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1ea16:	9308      	str	r3, [sp, #32]
   1ea18:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1ea1a:	9307      	str	r3, [sp, #28]
   1ea1c:	6a23      	ldr	r3, [r4, #32]
   1ea1e:	9306      	str	r3, [sp, #24]
   1ea20:	69e3      	ldr	r3, [r4, #28]
   1ea22:	9305      	str	r3, [sp, #20]
   1ea24:	69a3      	ldr	r3, [r4, #24]
   1ea26:	9304      	str	r3, [sp, #16]
   1ea28:	6963      	ldr	r3, [r4, #20]
   1ea2a:	9303      	str	r3, [sp, #12]
   1ea2c:	6923      	ldr	r3, [r4, #16]
   1ea2e:	9302      	str	r3, [sp, #8]
   1ea30:	68e3      	ldr	r3, [r4, #12]
   1ea32:	9301      	str	r3, [sp, #4]
   1ea34:	68a3      	ldr	r3, [r4, #8]
   1ea36:	9300      	str	r3, [sp, #0]
   1ea38:	e9d4 2300 	ldrd	r2, r3, [r4]
   1ea3c:	4631      	mov	r1, r6
   1ea3e:	4628      	mov	r0, r5
   1ea40:	f7e7 fe7c 	bl	673c <print_formatted>
}
   1ea44:	e6de      	b.n	1e804 <std_print+0x78>

0001ea46 <log_output_flush>:
		     log_output->control_block->offset,
   1ea46:	6842      	ldr	r2, [r0, #4]
	buffer_write(log_output->func, log_output->buf,
   1ea48:	6881      	ldr	r1, [r0, #8]
{
   1ea4a:	b510      	push	{r4, lr}
   1ea4c:	4604      	mov	r4, r0
	buffer_write(log_output->func, log_output->buf,
   1ea4e:	e9d2 2300 	ldrd	r2, r3, [r2]
   1ea52:	6800      	ldr	r0, [r0, #0]
   1ea54:	f7ff fe8d 	bl	1e772 <buffer_write>
	log_output->control_block->offset = 0;
   1ea58:	6863      	ldr	r3, [r4, #4]
   1ea5a:	2200      	movs	r2, #0
   1ea5c:	601a      	str	r2, [r3, #0]
}
   1ea5e:	bd10      	pop	{r4, pc}

0001ea60 <out_func>:
{
   1ea60:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   1ea62:	684b      	ldr	r3, [r1, #4]
   1ea64:	681a      	ldr	r2, [r3, #0]
   1ea66:	68cb      	ldr	r3, [r1, #12]
   1ea68:	429a      	cmp	r2, r3
{
   1ea6a:	4605      	mov	r5, r0
   1ea6c:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   1ea6e:	d102      	bne.n	1ea76 <out_func+0x16>
		log_output_flush(out_ctx);
   1ea70:	4608      	mov	r0, r1
   1ea72:	f7ff ffe8 	bl	1ea46 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1ea76:	6863      	ldr	r3, [r4, #4]
   1ea78:	f3bf 8f5b 	dmb	ish
   1ea7c:	e853 2f00 	ldrex	r2, [r3]
   1ea80:	1c51      	adds	r1, r2, #1
   1ea82:	e843 1000 	strex	r0, r1, [r3]
   1ea86:	2800      	cmp	r0, #0
   1ea88:	d1f8      	bne.n	1ea7c <out_func+0x1c>
   1ea8a:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
   1ea8e:	68a3      	ldr	r3, [r4, #8]
   1ea90:	549d      	strb	r5, [r3, r2]
}
   1ea92:	2000      	movs	r0, #0
   1ea94:	bd38      	pop	{r3, r4, r5, pc}

0001ea96 <char_out>:
{
   1ea96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ea98:	460d      	mov	r5, r1
   1ea9a:	4616      	mov	r6, r2
	for (size_t i = 0; i < length; i++) {
   1ea9c:	4604      	mov	r4, r0
   1ea9e:	1847      	adds	r7, r0, r1
   1eaa0:	42bc      	cmp	r4, r7
   1eaa2:	d101      	bne.n	1eaa8 <char_out+0x12>
}
   1eaa4:	4628      	mov	r0, r5
   1eaa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uart_poll_out(dev, data[i]);
   1eaa8:	f814 1b01 	ldrb.w	r1, [r4], #1
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	api->poll_out(dev, out_char);
   1eaac:	68b3      	ldr	r3, [r6, #8]
   1eaae:	4630      	mov	r0, r6
   1eab0:	685b      	ldr	r3, [r3, #4]
   1eab2:	4798      	blx	r3
	for (size_t i = 0; i < length; i++) {
   1eab4:	e7f4      	b.n	1eaa0 <char_out+0xa>

0001eab6 <uart_poll_out>:
   1eab6:	6883      	ldr	r3, [r0, #8]
   1eab8:	685b      	ldr	r3, [r3, #4]
   1eaba:	4718      	bx	r3

0001eabc <debug_hook_out_nop>:
}
   1eabc:	2000      	movs	r0, #0
   1eabe:	4770      	bx	lr

0001eac0 <get_status>:
	data = get_sub_data(dev, type);
   1eac0:	68c3      	ldr	r3, [r0, #12]
	return &data->subsys[type];
   1eac2:	b2c9      	uxtb	r1, r1
	if (data->started) {
   1eac4:	220c      	movs	r2, #12
   1eac6:	fb02 3101 	mla	r1, r2, r1, r3
   1eaca:	7a4b      	ldrb	r3, [r1, #9]
   1eacc:	b923      	cbnz	r3, 1ead8 <get_status+0x18>
	if (data->ref > 0) {
   1eace:	7a08      	ldrb	r0, [r1, #8]
		return CLOCK_CONTROL_STATUS_ON;
   1ead0:	fab0 f080 	clz	r0, r0
   1ead4:	0940      	lsrs	r0, r0, #5
   1ead6:	4770      	bx	lr
   1ead8:	2002      	movs	r0, #2
}
   1eada:	4770      	bx	lr

0001eadc <clock_stop>:
{
   1eadc:	b570      	push	{r4, r5, r6, lr}
   1eade:	b2c9      	uxtb	r1, r1
	config = get_sub_config(dev, type);
   1eae0:	6844      	ldr	r4, [r0, #4]
	data = get_sub_data(dev, type);
   1eae2:	68c5      	ldr	r5, [r0, #12]
	__asm__ volatile(
   1eae4:	f04f 0320 	mov.w	r3, #32
   1eae8:	f3ef 8611 	mrs	r6, BASEPRI
   1eaec:	f383 8811 	msr	BASEPRI, r3
   1eaf0:	f3bf 8f6f 	isb	sy
	if (data->ref == 0) {
   1eaf4:	220c      	movs	r2, #12
   1eaf6:	434a      	muls	r2, r1
   1eaf8:	18ab      	adds	r3, r5, r2
   1eafa:	7a18      	ldrb	r0, [r3, #8]
   1eafc:	b190      	cbz	r0, 1eb24 <clock_stop+0x48>
	data->ref--;
   1eafe:	3801      	subs	r0, #1
   1eb00:	b2c0      	uxtb	r0, r0
   1eb02:	7218      	strb	r0, [r3, #8]
	if (data->ref == 0) {
   1eb04:	b988      	cbnz	r0, 1eb2a <clock_stop+0x4e>
		nrf_clock_task_trigger(NRF_CLOCK, config->stop_tsk);
   1eb06:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	list->head = NULL;
   1eb0a:	50a8      	str	r0, [r5, r2]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1eb0c:	78ca      	ldrb	r2, [r1, #3]
	list->tail = NULL;
   1eb0e:	6058      	str	r0, [r3, #4]
   1eb10:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1eb14:	2101      	movs	r1, #1
   1eb16:	6011      	str	r1, [r2, #0]
		data->started = false;
   1eb18:	7258      	strb	r0, [r3, #9]
	__asm__ volatile(
   1eb1a:	f386 8811 	msr	BASEPRI, r6
   1eb1e:	f3bf 8f6f 	isb	sy
}
   1eb22:	bd70      	pop	{r4, r5, r6, pc}
		err = -EALREADY;
   1eb24:	f06f 0044 	mvn.w	r0, #68	; 0x44
   1eb28:	e7f7      	b.n	1eb1a <clock_stop+0x3e>
	int err = 0;
   1eb2a:	2000      	movs	r0, #0
   1eb2c:	e7f5      	b.n	1eb1a <clock_stop+0x3e>

0001eb2e <clock_async_start>:
{
   1eb2e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	config = get_sub_config(dev, type);
   1eb32:	6846      	ldr	r6, [r0, #4]
	clk_data = get_sub_data(dev, type);
   1eb34:	f8d0 e00c 	ldr.w	lr, [r0, #12]
   1eb38:	b2cf      	uxtb	r7, r1
	if ((data != NULL)
   1eb3a:	b14a      	cbz	r2, 1eb50 <clock_async_start+0x22>
	sys_snode_t *item = sys_slist_peek_head(list);
   1eb3c:	230c      	movs	r3, #12
   1eb3e:	437b      	muls	r3, r7
   1eb40:	f85e 3003 	ldr.w	r3, [lr, r3]
		if (item == node) {
   1eb44:	429a      	cmp	r2, r3
   1eb46:	d052      	beq.n	1ebee <clock_async_start+0xc0>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1eb48:	b113      	cbz	r3, 1eb50 <clock_async_start+0x22>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1eb4a:	681b      	ldr	r3, [r3, #0]
	} while (item);
   1eb4c:	2b00      	cmp	r3, #0
   1eb4e:	d1f9      	bne.n	1eb44 <clock_async_start+0x16>
	__asm__ volatile(
   1eb50:	f04f 0320 	mov.w	r3, #32
   1eb54:	f3ef 8c11 	mrs	ip, BASEPRI
   1eb58:	f383 8811 	msr	BASEPRI, r3
   1eb5c:	f3bf 8f6f 	isb	sy
	ref = ++clk_data->ref;
   1eb60:	250c      	movs	r5, #12
   1eb62:	437d      	muls	r5, r7
   1eb64:	eb0e 0305 	add.w	r3, lr, r5
   1eb68:	7a1c      	ldrb	r4, [r3, #8]
   1eb6a:	3401      	adds	r4, #1
   1eb6c:	b2e4      	uxtb	r4, r4
   1eb6e:	721c      	strb	r4, [r3, #8]
	__asm__ volatile(
   1eb70:	f38c 8811 	msr	BASEPRI, ip
   1eb74:	f3bf 8f6f 	isb	sy
	if (data) {
   1eb78:	b35a      	cbz	r2, 1ebd2 <clock_async_start+0xa4>
    p_reg->INTENCLR = mask;
   1eb7a:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
   1eb7e:	f04f 0803 	mov.w	r8, #3
   1eb82:	f8cc 8308 	str.w	r8, [ip, #776]	; 0x308
		already_started = clk_data->started;
   1eb86:	f893 c009 	ldrb.w	ip, [r3, #9]
		if (!already_started) {
   1eb8a:	f1bc 0f00 	cmp.w	ip, #0
   1eb8e:	d115      	bne.n	1ebbc <clock_async_start+0x8e>
	__asm__ volatile(
   1eb90:	f04f 0820 	mov.w	r8, #32
   1eb94:	f3ef 8911 	mrs	r9, BASEPRI
   1eb98:	f388 8811 	msr	BASEPRI, r8
   1eb9c:	f3bf 8f6f 	isb	sy
	parent->next = child;
   1eba0:	f8c2 c000 	str.w	ip, [r2]
Z_GENLIST_APPEND(slist, snode)
   1eba4:	f8d3 8004 	ldr.w	r8, [r3, #4]
   1eba8:	f1b8 0f00 	cmp.w	r8, #0
   1ebac:	d11b      	bne.n	1ebe6 <clock_async_start+0xb8>
	list->tail = node;
   1ebae:	605a      	str	r2, [r3, #4]
	list->head = node;
   1ebb0:	f84e 2005 	str.w	r2, [lr, r5]
	__asm__ volatile(
   1ebb4:	f389 8811 	msr	BASEPRI, r9
   1ebb8:	f3bf 8f6f 	isb	sy
    p_reg->INTENSET = mask;
   1ebbc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1ebc0:	2503      	movs	r5, #3
   1ebc2:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
		if (already_started) {
   1ebc6:	f1bc 0f00 	cmp.w	ip, #0
   1ebca:	d002      	beq.n	1ebd2 <clock_async_start+0xa4>
			data->cb(dev, subsys, data->user_data);
   1ebcc:	e9d2 3201 	ldrd	r3, r2, [r2, #4]
   1ebd0:	4798      	blx	r3
	if (ref == 1) {
   1ebd2:	2c01      	cmp	r4, #1
   1ebd4:	d105      	bne.n	1ebe2 <clock_async_start+0xb4>
		nrf_clock_task_trigger(NRF_CLOCK, config->start_tsk);
   1ebd6:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ebda:	78b3      	ldrb	r3, [r6, #2]
   1ebdc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1ebe0:	601c      	str	r4, [r3, #0]
	return 0;
   1ebe2:	2000      	movs	r0, #0
   1ebe4:	e005      	b.n	1ebf2 <clock_async_start+0xc4>
	parent->next = child;
   1ebe6:	f8c8 2000 	str.w	r2, [r8]
	list->tail = node;
   1ebea:	605a      	str	r2, [r3, #4]
}
   1ebec:	e7e2      	b.n	1ebb4 <clock_async_start+0x86>
		return -EBUSY;
   1ebee:	f06f 000f 	mvn.w	r0, #15
}
   1ebf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001ebf6 <clock_start>:
	return clock_async_start(dev, sub_system, NULL);
   1ebf6:	2200      	movs	r2, #0
   1ebf8:	f7ff bf99 	b.w	1eb2e <clock_async_start>

0001ebfc <clk_init>:
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1ebfc:	2200      	movs	r2, #0
{
   1ebfe:	b510      	push	{r4, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1ec00:	2101      	movs	r1, #1
{
   1ec02:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1ec04:	4610      	mov	r0, r2
   1ec06:	f7e8 fc4d 	bl	74a4 <z_arm_irq_priority_set>
	irq_enable(DT_INST_IRQN(0));
   1ec0a:	2000      	movs	r0, #0
   1ec0c:	f7e8 fc18 	bl	7440 <arch_irq_enable>
    return false;
}

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
   1ec10:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1ec14:	2201      	movs	r2, #1
   1ec16:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->INTENSET = mask;
   1ec1a:	2203      	movs	r2, #3
   1ec1c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		sys_slist_init(&(get_sub_data(dev, i)->list));
   1ec20:	68e3      	ldr	r3, [r4, #12]
	list->head = NULL;
   1ec22:	2000      	movs	r0, #0
	list->tail = NULL;
   1ec24:	e9c3 0000 	strd	r0, r0, [r3]
   1ec28:	68e3      	ldr	r3, [r4, #12]
   1ec2a:	e9c3 0003 	strd	r0, r0, [r3, #12]
}
   1ec2e:	bd10      	pop	{r4, pc}

0001ec30 <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   1ec30:	4770      	bx	lr

0001ec32 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   1ec32:	4770      	bx	lr

0001ec34 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   1ec34:	f7e8 b99e 	b.w	6f74 <_DoInit>

0001ec38 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(struct device *unused)
{
   1ec38:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   1ec3a:	f7ff fffb 	bl	1ec34 <SEGGER_RTT_Init>

	return 0;
}
   1ec3e:	2000      	movs	r0, #0
   1ec40:	bd08      	pop	{r3, pc}

0001ec42 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   1ec42:	b538      	push	{r3, r4, r5, lr}
   1ec44:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   1ec46:	42ab      	cmp	r3, r5
{
   1ec48:	4611      	mov	r1, r2
   1ec4a:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   1ec4c:	d804      	bhi.n	1ec58 <_copy+0x16>
		(void)memcpy(to, from, from_len);
   1ec4e:	461a      	mov	r2, r3
   1ec50:	f001 f90d 	bl	1fe6e <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   1ec54:	4620      	mov	r0, r4
   1ec56:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   1ec58:	2400      	movs	r4, #0
   1ec5a:	e7fb      	b.n	1ec54 <_copy+0x12>

0001ec5c <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   1ec5c:	f001 b932 	b.w	1fec4 <memset>

0001ec60 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   1ec60:	09c3      	lsrs	r3, r0, #7
   1ec62:	005a      	lsls	r2, r3, #1
   1ec64:	4413      	add	r3, r2
   1ec66:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   1ec6a:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   1ec6e:	b2c0      	uxtb	r0, r0
   1ec70:	4770      	bx	lr

0001ec72 <uECC_make_key>:
	}
	return 0;
}

int uECC_make_key(uint8_t *public_key, uint8_t *private_key, uECC_Curve curve)
{
   1ec72:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ec76:	4606      	mov	r6, r0
   1ec78:	b0a9      	sub	sp, #164	; 0xa4
   1ec7a:	4688      	mov	r8, r1
   1ec7c:	4614      	mov	r4, r2
   1ec7e:	2740      	movs	r7, #64	; 0x40
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
        		return 0;
		}

		/* computing modular reduction of _random (see FIPS 186.4 B.4.1): */
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   1ec80:	f102 0924 	add.w	r9, r2, #36	; 0x24
		uECC_RNG_Function rng_function = uECC_get_rng();
   1ec84:	f7e8 f9fc 	bl	7080 <uECC_get_rng>
		if (!rng_function ||
   1ec88:	4603      	mov	r3, r0
   1ec8a:	2800      	cmp	r0, #0
   1ec8c:	d03e      	beq.n	1ed0c <uECC_make_key+0x9a>
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
   1ec8e:	2140      	movs	r1, #64	; 0x40
   1ec90:	a808      	add	r0, sp, #32
   1ec92:	4798      	blx	r3
		if (!rng_function ||
   1ec94:	b3d0      	cbz	r0, 1ed0c <uECC_make_key+0x9a>
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   1ec96:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
   1ec9a:	f112 031f 	adds.w	r3, r2, #31
   1ec9e:	bf48      	it	mi
   1eca0:	f102 033e 	addmi.w	r3, r2, #62	; 0x3e
   1eca4:	466d      	mov	r5, sp
   1eca6:	464a      	mov	r2, r9
   1eca8:	a908      	add	r1, sp, #32
   1ecaa:	4628      	mov	r0, r5
   1ecac:	f343 1347 	sbfx	r3, r3, #5, #8
   1ecb0:	f000 fa03 	bl	1f0ba <uECC_vli_mmod>

		/* Computing public-key from private: */
		if (EccPoint_compute_public_key(_public, _private, curve)) {
   1ecb4:	4622      	mov	r2, r4
   1ecb6:	4629      	mov	r1, r5
   1ecb8:	a818      	add	r0, sp, #96	; 0x60
   1ecba:	f000 fe19 	bl	1f8f0 <EccPoint_compute_public_key>
   1ecbe:	b318      	cbz	r0, 1ed08 <uECC_make_key+0x96>

			/* Converting buffers to correct bit order: */
			uECC_vli_nativeToBytes(private_key,
					       BITS_TO_BYTES(curve->num_n_bits),
   1ecc0:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
			uECC_vli_nativeToBytes(private_key,
   1ecc4:	1dd9      	adds	r1, r3, #7
   1ecc6:	bf48      	it	mi
   1ecc8:	f103 010e 	addmi.w	r1, r3, #14
   1eccc:	462a      	mov	r2, r5
   1ecce:	4640      	mov	r0, r8
   1ecd0:	10c9      	asrs	r1, r1, #3
   1ecd2:	f000 fe35 	bl	1f940 <uECC_vli_nativeToBytes>
					       _private);
			uECC_vli_nativeToBytes(public_key,
   1ecd6:	f994 1001 	ldrsb.w	r1, [r4, #1]
   1ecda:	aa18      	add	r2, sp, #96	; 0x60
   1ecdc:	4630      	mov	r0, r6
   1ecde:	f000 fe2f 	bl	1f940 <uECC_vli_nativeToBytes>
					       curve->num_bytes,
					       _public);
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   1ece2:	f994 1001 	ldrsb.w	r1, [r4, #1]
 					       curve->num_bytes,
					       _public + curve->num_words);
   1ece6:	f994 2000 	ldrsb.w	r2, [r4]
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   1ecea:	ab18      	add	r3, sp, #96	; 0x60
   1ecec:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   1ecf0:	1870      	adds	r0, r6, r1
   1ecf2:	f000 fe25 	bl	1f940 <uECC_vli_nativeToBytes>
#ifdef TINYCRYPT_ARCH_HAS_SET_SECURE
extern void _set_secure(void *to, uint8_t val, unsigned int len);
#else /* ! TINYCRYPT_ARCH_HAS_SET_SECURE */
static inline void _set_secure(void *to, uint8_t val, unsigned int len)
{
  (void) memset(to, val, len);
   1ecf6:	2220      	movs	r2, #32
   1ecf8:	2100      	movs	r1, #0
   1ecfa:	4628      	mov	r0, r5
   1ecfc:	f001 f8e2 	bl	1fec4 <memset>

			/* erasing temporary buffer that stored secret: */
			_set_secure(_private, 0, NUM_ECC_BYTES);

      			return 1;
   1ed00:	2001      	movs	r0, #1
    		}
  	}
	return 0;
}
   1ed02:	b029      	add	sp, #164	; 0xa4
   1ed04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
   1ed08:	3f01      	subs	r7, #1
   1ed0a:	d1bb      	bne.n	1ec84 <uECC_make_key+0x12>
        		return 0;
   1ed0c:	2000      	movs	r0, #0
   1ed0e:	e7f8      	b.n	1ed02 <uECC_make_key+0x90>

0001ed10 <uECC_shared_secret>:

int uECC_shared_secret(const uint8_t *public_key, const uint8_t *private_key,
		       uint8_t *secret, uECC_Curve curve)
{
   1ed10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ed14:	461c      	mov	r4, r3
	uECC_word_t tmp[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {_private, tmp};
	uECC_word_t *initial_Z = 0;
	uECC_word_t carry;
	wordcount_t num_words = curve->num_words;
	wordcount_t num_bytes = curve->num_bytes;
   1ed16:	f993 7001 	ldrsb.w	r7, [r3, #1]
	wordcount_t num_words = curve->num_words;
   1ed1a:	f993 a000 	ldrsb.w	sl, [r3]
	int r;

	/* Converting buffers to correct bit order: */
	uECC_vli_bytesToNative(_private,
      			       private_key,
			       BITS_TO_BYTES(curve->num_n_bits));
   1ed1e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
{
   1ed22:	b0a4      	sub	sp, #144	; 0x90
   1ed24:	4690      	mov	r8, r2
	uECC_vli_bytesToNative(_private,
   1ed26:	1dda      	adds	r2, r3, #7
   1ed28:	bf48      	it	mi
   1ed2a:	f103 020e 	addmi.w	r2, r3, #14
	uECC_word_t *p2[2] = {_private, tmp};
   1ed2e:	ad04      	add	r5, sp, #16
{
   1ed30:	4681      	mov	r9, r0
	uECC_word_t *p2[2] = {_private, tmp};
   1ed32:	ae0c      	add	r6, sp, #48	; 0x30
	uECC_vli_bytesToNative(_private,
   1ed34:	4628      	mov	r0, r5
   1ed36:	10d2      	asrs	r2, r2, #3
	uECC_word_t *p2[2] = {_private, tmp};
   1ed38:	9502      	str	r5, [sp, #8]
   1ed3a:	9603      	str	r6, [sp, #12]
	uECC_vli_bytesToNative(_private,
   1ed3c:	f000 fe14 	bl	1f968 <uECC_vli_bytesToNative>
	uECC_vli_bytesToNative(_public,
   1ed40:	463a      	mov	r2, r7
   1ed42:	4649      	mov	r1, r9
   1ed44:	a814      	add	r0, sp, #80	; 0x50
   1ed46:	f000 fe0f 	bl	1f968 <uECC_vli_bytesToNative>
      			       public_key,
			       num_bytes);
	uECC_vli_bytesToNative(_public + num_words,
   1ed4a:	ab14      	add	r3, sp, #80	; 0x50
   1ed4c:	eb09 0107 	add.w	r1, r9, r7
   1ed50:	eb03 008a 	add.w	r0, r3, sl, lsl #2
   1ed54:	463a      	mov	r2, r7
   1ed56:	f000 fe07 	bl	1f968 <uECC_vli_bytesToNative>
			       public_key + num_bytes,
			       num_bytes);

	/* Regularize the bitcount for the private key so that attackers cannot use a
	 * side channel attack to learn the number of leading zeros. */
	carry = regularize_k(_private, _private, tmp, curve);
   1ed5a:	4623      	mov	r3, r4
   1ed5c:	4632      	mov	r2, r6
   1ed5e:	4629      	mov	r1, r5
   1ed60:	4628      	mov	r0, r5
   1ed62:	f000 fd99 	bl	1f898 <regularize_k>
			goto clear_and_out;
    		}
    		initial_Z = p2[carry];
  	}

	EccPoint_mult(_public, _public, p2[!carry], initial_Z, curve->num_n_bits + 1,
   1ed66:	fab0 f080 	clz	r0, r0
   1ed6a:	9401      	str	r4, [sp, #4]
   1ed6c:	ab24      	add	r3, sp, #144	; 0x90
   1ed6e:	0940      	lsrs	r0, r0, #5
   1ed70:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   1ed74:	8863      	ldrh	r3, [r4, #2]
   1ed76:	3301      	adds	r3, #1
   1ed78:	b21b      	sxth	r3, r3
   1ed7a:	9300      	str	r3, [sp, #0]
   1ed7c:	a914      	add	r1, sp, #80	; 0x50
   1ed7e:	2300      	movs	r3, #0
   1ed80:	f850 2c88 	ldr.w	r2, [r0, #-136]
   1ed84:	4608      	mov	r0, r1
   1ed86:	f000 fcb8 	bl	1f6fa <EccPoint_mult>
		      curve);

	uECC_vli_nativeToBytes(secret, num_bytes, _public);
   1ed8a:	aa14      	add	r2, sp, #80	; 0x50
   1ed8c:	4639      	mov	r1, r7
   1ed8e:	4640      	mov	r0, r8
   1ed90:	f000 fdd6 	bl	1f940 <uECC_vli_nativeToBytes>
	r = !EccPoint_isZero(_public, curve);
   1ed94:	4621      	mov	r1, r4
   1ed96:	a814      	add	r0, sp, #80	; 0x50
   1ed98:	f000 fc24 	bl	1f5e4 <EccPoint_isZero>
   1ed9c:	af02      	add	r7, sp, #8
   1ed9e:	4604      	mov	r4, r0
   1eda0:	2208      	movs	r2, #8
   1eda2:	2100      	movs	r1, #0
   1eda4:	4638      	mov	r0, r7
   1eda6:	f001 f88d 	bl	1fec4 <memset>
   1edaa:	2220      	movs	r2, #32
   1edac:	2100      	movs	r1, #0
   1edae:	4630      	mov	r0, r6
   1edb0:	f001 f888 	bl	1fec4 <memset>
   1edb4:	2220      	movs	r2, #32
   1edb6:	2100      	movs	r1, #0
   1edb8:	4628      	mov	r0, r5
   1edba:	f001 f883 	bl	1fec4 <memset>
	_set_secure(p2, 0, sizeof(p2));
	_set_secure(tmp, 0, sizeof(tmp));
	_set_secure(_private, 0, sizeof(_private));

	return r;
}
   1edbe:	fab4 f084 	clz	r0, r4
   1edc2:	0940      	lsrs	r0, r0, #5
   1edc4:	b024      	add	sp, #144	; 0x90
   1edc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001edca <uECC_vli_add>:
{
   1edca:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   1edcc:	2400      	movs	r4, #0
{
   1edce:	4606      	mov	r6, r0
	uECC_word_t carry = 0;
   1edd0:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   1edd2:	b265      	sxtb	r5, r4
   1edd4:	42ab      	cmp	r3, r5
   1edd6:	dc00      	bgt.n	1edda <uECC_vli_add+0x10>
}
   1edd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t sum = left[i] + right[i] + carry;
   1edda:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   1edde:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
   1ede2:	443d      	add	r5, r7
   1ede4:	4405      	add	r5, r0
		carry = cond_set(val, carry, (sum != left[i]));
   1ede6:	42af      	cmp	r7, r5
		uECC_word_t val = (sum < left[i]);
   1ede8:	bf8c      	ite	hi
   1edea:	2701      	movhi	r7, #1
   1edec:	2700      	movls	r7, #0
		result[i] = sum;
   1edee:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   1edf2:	bf18      	it	ne
   1edf4:	4638      	movne	r0, r7
	for (i = 0; i < num_words; ++i) {
   1edf6:	3401      	adds	r4, #1
   1edf8:	e7eb      	b.n	1edd2 <uECC_vli_add+0x8>

0001edfa <uECC_vli_rshift1>:
	vli += num_words;
   1edfa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	uECC_word_t carry = 0;
   1edfe:	2300      	movs	r3, #0
	while (vli-- > end) {
   1ee00:	4288      	cmp	r0, r1
   1ee02:	d300      	bcc.n	1ee06 <uECC_vli_rshift1+0xc>
}
   1ee04:	4770      	bx	lr
		uECC_word_t temp = *vli;
   1ee06:	f851 2d04 	ldr.w	r2, [r1, #-4]!
		*vli = (temp >> 1) | carry;
   1ee0a:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
   1ee0e:	600b      	str	r3, [r1, #0]
		carry = temp << (uECC_WORD_BITS - 1);
   1ee10:	07d3      	lsls	r3, r2, #31
   1ee12:	e7f5      	b.n	1ee00 <uECC_vli_rshift1+0x6>

0001ee14 <vli_modInv_update>:
	if (!EVEN(uv)) {
   1ee14:	6803      	ldr	r3, [r0, #0]
{
   1ee16:	b570      	push	{r4, r5, r6, lr}
	if (!EVEN(uv)) {
   1ee18:	f013 0601 	ands.w	r6, r3, #1
{
   1ee1c:	4605      	mov	r5, r0
   1ee1e:	4614      	mov	r4, r2
	if (!EVEN(uv)) {
   1ee20:	d005      	beq.n	1ee2e <vli_modInv_update+0x1a>
		carry = uECC_vli_add(uv, uv, mod, num_words);
   1ee22:	4613      	mov	r3, r2
   1ee24:	460a      	mov	r2, r1
   1ee26:	4601      	mov	r1, r0
   1ee28:	f7ff ffcf 	bl	1edca <uECC_vli_add>
   1ee2c:	4606      	mov	r6, r0
	uECC_vli_rshift1(uv, num_words);
   1ee2e:	4621      	mov	r1, r4
   1ee30:	4628      	mov	r0, r5
   1ee32:	f7ff ffe2 	bl	1edfa <uECC_vli_rshift1>
	if (carry) {
   1ee36:	b146      	cbz	r6, 1ee4a <vli_modInv_update+0x36>
		uv[num_words - 1] |= HIGH_BIT_SET;
   1ee38:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
   1ee3c:	3a01      	subs	r2, #1
   1ee3e:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
   1ee42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1ee46:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
}
   1ee4a:	bd70      	pop	{r4, r5, r6, pc}

0001ee4c <uECC_vli_mult>:
{
   1ee4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (k = 0; k < num_words; ++k) {
   1ee50:	2500      	movs	r5, #0
{
   1ee52:	b087      	sub	sp, #28
   1ee54:	e9cd 1200 	strd	r1, r2, [sp]
	uECC_word_t r1 = 0;
   1ee58:	462c      	mov	r4, r5
	uECC_word_t r0 = 0;
   1ee5a:	462a      	mov	r2, r5
	for (k = 0; k < num_words; ++k) {
   1ee5c:	fa4f f885 	sxtb.w	r8, r5
   1ee60:	4543      	cmp	r3, r8
   1ee62:	dc16      	bgt.n	1ee92 <uECC_vli_mult+0x46>
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   1ee64:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1ee68:	eb05 0543 	add.w	r5, r5, r3, lsl #1
   1ee6c:	9502      	str	r5, [sp, #8]
   1ee6e:	f04f 0a00 	mov.w	sl, #0
   1ee72:	9e02      	ldr	r6, [sp, #8]
   1ee74:	fa53 fe8a 	uxtab	lr, r3, sl
   1ee78:	fa4f fe8e 	sxtb.w	lr, lr
   1ee7c:	45b6      	cmp	lr, r6
   1ee7e:	fa5f f58a 	uxtb.w	r5, sl
   1ee82:	db2d      	blt.n	1eee0 <uECC_vli_mult+0x94>
	result[num_words * 2 - 1] = r0;
   1ee84:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   1ee88:	f840 2c04 	str.w	r2, [r0, #-4]
}
   1ee8c:	b007      	add	sp, #28
   1ee8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ee92:	9e01      	ldr	r6, [sp, #4]
	for (k = 0; k < num_words; ++k) {
   1ee94:	f04f 0c00 	mov.w	ip, #0
   1ee98:	eb06 0985 	add.w	r9, r6, r5, lsl #2
   1ee9c:	46e6      	mov	lr, ip
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
   1ee9e:	e9cd 2402 	strd	r2, r4, [sp, #8]
	uECC_dword_t p = (uECC_dword_t)a * b;
   1eea2:	9900      	ldr	r1, [sp, #0]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   1eea4:	f859 7904 	ldr.w	r7, [r9], #-4
	uECC_dword_t p = (uECC_dword_t)a * b;
   1eea8:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
   1eeac:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   1eeb0:	fba7 ab06 	umull	sl, fp, r7, r6
   1eeb4:	eb1a 0601 	adds.w	r6, sl, r1
   1eeb8:	f10c 0c01 	add.w	ip, ip, #1
   1eebc:	eb5b 0702 	adcs.w	r7, fp, r2
		for (i = 0; i <= k; ++i) {
   1eec0:	fa4f fa8c 	sxtb.w	sl, ip
   1eec4:	bf2c      	ite	cs
   1eec6:	2201      	movcs	r2, #1
   1eec8:	2200      	movcc	r2, #0
   1eeca:	45c2      	cmp	sl, r8
	*r2 += (r01 < p);
   1eecc:	4496      	add	lr, r2
	*r1 = r01 >> uECC_WORD_BITS;
   1eece:	463c      	mov	r4, r7
	*r0 = (uECC_word_t)r01;
   1eed0:	4632      	mov	r2, r6
		for (i = 0; i <= k; ++i) {
   1eed2:	dde4      	ble.n	1ee9e <uECC_vli_mult+0x52>
		result[k] = r0;
   1eed4:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
	*r1 = r01 >> uECC_WORD_BITS;
   1eed8:	463a      	mov	r2, r7
   1eeda:	3501      	adds	r5, #1
	*r2 += (r01 < p);
   1eedc:	4674      	mov	r4, lr
   1eede:	e7bd      	b.n	1ee5c <uECC_vli_mult+0x10>
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   1eee0:	3501      	adds	r5, #1
   1eee2:	9900      	ldr	r1, [sp, #0]
   1eee4:	9e01      	ldr	r6, [sp, #4]
   1eee6:	fa4f fc85 	sxtb.w	ip, r5
   1eeea:	ebae 0b0c 	sub.w	fp, lr, ip
   1eeee:	eb01 058c 	add.w	r5, r1, ip, lsl #2
   1eef2:	eb06 0b8b 	add.w	fp, r6, fp, lsl #2
   1eef6:	4621      	mov	r1, r4
   1eef8:	2400      	movs	r4, #0
   1eefa:	459c      	cmp	ip, r3
   1eefc:	db05      	blt.n	1ef0a <uECC_vli_mult+0xbe>
		result[k] = r0;
   1eefe:	f840 202e 	str.w	r2, [r0, lr, lsl #2]
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   1ef02:	f10a 0a01 	add.w	sl, sl, #1
		result[k] = r0;
   1ef06:	460a      	mov	r2, r1
   1ef08:	e7b3      	b.n	1ee72 <uECC_vli_mult+0x26>
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
   1ef0a:	e9cd 2104 	strd	r2, r1, [sp, #16]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   1ef0e:	f855 7b04 	ldr.w	r7, [r5], #4
   1ef12:	f85b 6904 	ldr.w	r6, [fp], #-4
	r01 += p;
   1ef16:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
	uECC_dword_t p = (uECC_dword_t)a * b;
   1ef1a:	fba7 6706 	umull	r6, r7, r7, r6
   1ef1e:	eb16 0801 	adds.w	r8, r6, r1
   1ef22:	eb57 0902 	adcs.w	r9, r7, r2
   1ef26:	bf2c      	ite	cs
   1ef28:	2201      	movcs	r2, #1
   1ef2a:	2200      	movcc	r2, #0
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   1ef2c:	f10c 0c01 	add.w	ip, ip, #1
	*r2 += (r01 < p);
   1ef30:	4414      	add	r4, r2
	*r1 = r01 >> uECC_WORD_BITS;
   1ef32:	4649      	mov	r1, r9
	*r0 = (uECC_word_t)r01;
   1ef34:	4642      	mov	r2, r8
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   1ef36:	fa4f fc8c 	sxtb.w	ip, ip
   1ef3a:	e7de      	b.n	1eefa <uECC_vli_mult+0xae>

0001ef3c <uECC_vli_clear>:
	for (i = 0; i < num_words; ++i) {
   1ef3c:	2300      	movs	r3, #0
{
   1ef3e:	b510      	push	{r4, lr}
		 vli[i] = 0;
   1ef40:	461c      	mov	r4, r3
	for (i = 0; i < num_words; ++i) {
   1ef42:	b25a      	sxtb	r2, r3
   1ef44:	4291      	cmp	r1, r2
   1ef46:	dc00      	bgt.n	1ef4a <uECC_vli_clear+0xe>
}
   1ef48:	bd10      	pop	{r4, pc}
		 vli[i] = 0;
   1ef4a:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   1ef4e:	3301      	adds	r3, #1
   1ef50:	e7f7      	b.n	1ef42 <uECC_vli_clear+0x6>

0001ef52 <uECC_vli_isZero>:
{
   1ef52:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   1ef54:	2300      	movs	r3, #0
	uECC_word_t bits = 0;
   1ef56:	461a      	mov	r2, r3
	for (i = 0; i < num_words; ++i) {
   1ef58:	b25c      	sxtb	r4, r3
   1ef5a:	42a1      	cmp	r1, r4
   1ef5c:	dc03      	bgt.n	1ef66 <uECC_vli_isZero+0x14>
}
   1ef5e:	fab2 f082 	clz	r0, r2
   1ef62:	0940      	lsrs	r0, r0, #5
   1ef64:	bd10      	pop	{r4, pc}
		bits |= vli[i];
   1ef66:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   1ef6a:	3301      	adds	r3, #1
   1ef6c:	4322      	orrs	r2, r4
	for (i = 0; i < num_words; ++i) {
   1ef6e:	e7f3      	b.n	1ef58 <uECC_vli_isZero+0x6>

0001ef70 <uECC_vli_testBit>:
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   1ef70:	114a      	asrs	r2, r1, #5
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   1ef72:	2301      	movs	r3, #1
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   1ef74:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   1ef78:	f001 011f 	and.w	r1, r1, #31
   1ef7c:	fa03 f101 	lsl.w	r1, r3, r1
}
   1ef80:	4008      	ands	r0, r1
   1ef82:	4770      	bx	lr

0001ef84 <uECC_vli_numBits>:
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   1ef84:	3901      	subs	r1, #1
   1ef86:	b24b      	sxtb	r3, r1
{
   1ef88:	4602      	mov	r2, r0
   1ef8a:	eb00 0183 	add.w	r1, r0, r3, lsl #2
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   1ef8e:	2b00      	cmp	r3, #0
   1ef90:	da03      	bge.n	1ef9a <uECC_vli_numBits+0x16>
	return (i + 1);
   1ef92:	3301      	adds	r3, #1
   1ef94:	b258      	sxtb	r0, r3
	if (num_digits == 0) {
   1ef96:	b938      	cbnz	r0, 1efa8 <uECC_vli_numBits+0x24>
   1ef98:	4770      	bx	lr
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   1ef9a:	f851 0904 	ldr.w	r0, [r1], #-4
   1ef9e:	2800      	cmp	r0, #0
   1efa0:	d1f7      	bne.n	1ef92 <uECC_vli_numBits+0xe>
   1efa2:	3b01      	subs	r3, #1
   1efa4:	b25b      	sxtb	r3, r3
   1efa6:	e7f2      	b.n	1ef8e <uECC_vli_numBits+0xa>
	digit = vli[num_digits - 1];
   1efa8:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   1efac:	3b01      	subs	r3, #1
   1efae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
	for (i = 0; digit; ++i) {
   1efb2:	2300      	movs	r3, #0
   1efb4:	b922      	cbnz	r2, 1efc0 <uECC_vli_numBits+0x3c>
	return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
   1efb6:	3801      	subs	r0, #1
   1efb8:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   1efbc:	b200      	sxth	r0, r0
}
   1efbe:	4770      	bx	lr
		digit >>= 1;
   1efc0:	0852      	lsrs	r2, r2, #1
	for (i = 0; digit; ++i) {
   1efc2:	3301      	adds	r3, #1
   1efc4:	e7f6      	b.n	1efb4 <uECC_vli_numBits+0x30>

0001efc6 <uECC_vli_set>:
{
   1efc6:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   1efc8:	2300      	movs	r3, #0
   1efca:	b25c      	sxtb	r4, r3
   1efcc:	42a2      	cmp	r2, r4
   1efce:	dc00      	bgt.n	1efd2 <uECC_vli_set+0xc>
}
   1efd0:	bd10      	pop	{r4, pc}
		dest[i] = src[i];
   1efd2:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
   1efd6:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   1efda:	3301      	adds	r3, #1
   1efdc:	e7f5      	b.n	1efca <uECC_vli_set+0x4>

0001efde <uECC_vli_cmp_unsafe>:
{
   1efde:	b530      	push	{r4, r5, lr}
	for (i = num_words - 1; i >= 0; --i) {
   1efe0:	3a01      	subs	r2, #1
   1efe2:	b253      	sxtb	r3, r2
   1efe4:	009a      	lsls	r2, r3, #2
   1efe6:	2b00      	cmp	r3, #0
   1efe8:	da01      	bge.n	1efee <uECC_vli_cmp_unsafe+0x10>
	return 0;
   1efea:	2000      	movs	r0, #0
}
   1efec:	bd30      	pop	{r4, r5, pc}
		if (left[i] > right[i]) {
   1efee:	5885      	ldr	r5, [r0, r2]
   1eff0:	588c      	ldr	r4, [r1, r2]
   1eff2:	42a5      	cmp	r5, r4
   1eff4:	d805      	bhi.n	1f002 <uECC_vli_cmp_unsafe+0x24>
		} else if (left[i] < right[i]) {
   1eff6:	f1a2 0204 	sub.w	r2, r2, #4
   1effa:	d304      	bcc.n	1f006 <uECC_vli_cmp_unsafe+0x28>
	for (i = num_words - 1; i >= 0; --i) {
   1effc:	3b01      	subs	r3, #1
   1effe:	b25b      	sxtb	r3, r3
   1f000:	e7f1      	b.n	1efe6 <uECC_vli_cmp_unsafe+0x8>
			return 1;
   1f002:	2001      	movs	r0, #1
   1f004:	e7f2      	b.n	1efec <uECC_vli_cmp_unsafe+0xe>
			return -1;
   1f006:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1f00a:	e7ef      	b.n	1efec <uECC_vli_cmp_unsafe+0xe>

0001f00c <uECC_vli_equal>:
	for (i = num_words - 1; i >= 0; --i) {
   1f00c:	3a01      	subs	r2, #1
   1f00e:	b253      	sxtb	r3, r2
{
   1f010:	b570      	push	{r4, r5, r6, lr}
   1f012:	009a      	lsls	r2, r3, #2
	uECC_word_t diff = 0;
   1f014:	2400      	movs	r4, #0
	for (i = num_words - 1; i >= 0; --i) {
   1f016:	2b00      	cmp	r3, #0
   1f018:	da03      	bge.n	1f022 <uECC_vli_equal+0x16>
}
   1f01a:	1e20      	subs	r0, r4, #0
   1f01c:	bf18      	it	ne
   1f01e:	2001      	movne	r0, #1
   1f020:	bd70      	pop	{r4, r5, r6, pc}
		diff |= (left[i] ^ right[i]);
   1f022:	5885      	ldr	r5, [r0, r2]
   1f024:	588e      	ldr	r6, [r1, r2]
	for (i = num_words - 1; i >= 0; --i) {
   1f026:	3b01      	subs	r3, #1
		diff |= (left[i] ^ right[i]);
   1f028:	4075      	eors	r5, r6
   1f02a:	432c      	orrs	r4, r5
	for (i = num_words - 1; i >= 0; --i) {
   1f02c:	b25b      	sxtb	r3, r3
   1f02e:	3a04      	subs	r2, #4
   1f030:	e7f1      	b.n	1f016 <uECC_vli_equal+0xa>

0001f032 <uECC_vli_sub>:
{
   1f032:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   1f034:	2400      	movs	r4, #0
{
   1f036:	4606      	mov	r6, r0
   1f038:	469c      	mov	ip, r3
	uECC_word_t borrow = 0;
   1f03a:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   1f03c:	b265      	sxtb	r5, r4
   1f03e:	45ac      	cmp	ip, r5
   1f040:	dc00      	bgt.n	1f044 <uECC_vli_sub+0x12>
}
   1f042:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t diff = left[i] - right[i] - borrow;
   1f044:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   1f048:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
   1f04c:	1a3d      	subs	r5, r7, r0
   1f04e:	1aed      	subs	r5, r5, r3
		borrow = cond_set(val, borrow, (diff != left[i]));
   1f050:	42af      	cmp	r7, r5
		uECC_word_t val = (diff > left[i]);
   1f052:	bf34      	ite	cc
   1f054:	2701      	movcc	r7, #1
   1f056:	2700      	movcs	r7, #0
		result[i] = diff;
   1f058:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   1f05c:	bf18      	it	ne
   1f05e:	4638      	movne	r0, r7
	for (i = 0; i < num_words; ++i) {
   1f060:	3401      	adds	r4, #1
   1f062:	e7eb      	b.n	1f03c <uECC_vli_sub+0xa>

0001f064 <uECC_vli_modAdd>:
{
   1f064:	b570      	push	{r4, r5, r6, lr}
   1f066:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   1f06a:	461d      	mov	r5, r3
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   1f06c:	4633      	mov	r3, r6
{
   1f06e:	4604      	mov	r4, r0
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   1f070:	f7ff feab 	bl	1edca <uECC_vli_add>
	if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
   1f074:	b930      	cbnz	r0, 1f084 <uECC_vli_modAdd+0x20>
   1f076:	4632      	mov	r2, r6
   1f078:	4621      	mov	r1, r4
   1f07a:	4628      	mov	r0, r5
   1f07c:	f7ff ffaf 	bl	1efde <uECC_vli_cmp_unsafe>
   1f080:	2801      	cmp	r0, #1
   1f082:	d007      	beq.n	1f094 <uECC_vli_modAdd+0x30>
		uECC_vli_sub(result, result, mod, num_words);
   1f084:	4633      	mov	r3, r6
   1f086:	462a      	mov	r2, r5
   1f088:	4621      	mov	r1, r4
   1f08a:	4620      	mov	r0, r4
}
   1f08c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_sub(result, result, mod, num_words);
   1f090:	f7ff bfcf 	b.w	1f032 <uECC_vli_sub>
}
   1f094:	bd70      	pop	{r4, r5, r6, pc}

0001f096 <uECC_vli_modSub>:
{
   1f096:	b570      	push	{r4, r5, r6, lr}
   1f098:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   1f09c:	461d      	mov	r5, r3
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   1f09e:	4633      	mov	r3, r6
{
   1f0a0:	4604      	mov	r4, r0
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   1f0a2:	f7ff ffc6 	bl	1f032 <uECC_vli_sub>
	if (l_borrow) {
   1f0a6:	b138      	cbz	r0, 1f0b8 <uECC_vli_modSub+0x22>
		uECC_vli_add(result, result, mod, num_words);
   1f0a8:	4633      	mov	r3, r6
   1f0aa:	462a      	mov	r2, r5
   1f0ac:	4621      	mov	r1, r4
   1f0ae:	4620      	mov	r0, r4
}
   1f0b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_add(result, result, mod, num_words);
   1f0b4:	f7ff be89 	b.w	1edca <uECC_vli_add>
}
   1f0b8:	bd70      	pop	{r4, r5, r6, pc}

0001f0ba <uECC_vli_mmod>:
{
   1f0ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f0be:	b0a5      	sub	sp, #148	; 0x94
   1f0c0:	461d      	mov	r5, r3
	uECC_word_t *v[2] = {tmp, product};
   1f0c2:	ab14      	add	r3, sp, #80	; 0x50
   1f0c4:	e9cd 3102 	strd	r3, r1, [sp, #8]
{
   1f0c8:	4680      	mov	r8, r0
			   uECC_vli_numBits(mod, num_words);
   1f0ca:	4629      	mov	r1, r5
   1f0cc:	4610      	mov	r0, r2
{
   1f0ce:	4616      	mov	r6, r2
			   uECC_vli_numBits(mod, num_words);
   1f0d0:	f7ff ff58 	bl	1ef84 <uECC_vli_numBits>
	bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) -
   1f0d4:	ebc0 1485 	rsb	r4, r0, r5, lsl #6
   1f0d8:	b224      	sxth	r4, r4
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   1f0da:	2c00      	cmp	r4, #0
   1f0dc:	4621      	mov	r1, r4
   1f0de:	bfb8      	it	lt
   1f0e0:	f104 011f 	addlt.w	r1, r4, #31
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   1f0e4:	4263      	negs	r3, r4
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   1f0e6:	f341 1147 	sbfx	r1, r1, #5, #8
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   1f0ea:	f003 031f 	and.w	r3, r3, #31
	uECC_vli_clear(mod_multiple, word_shift);
   1f0ee:	a804      	add	r0, sp, #16
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   1f0f0:	f004 071f 	and.w	r7, r4, #31
   1f0f4:	bf58      	it	pl
   1f0f6:	425f      	negpl	r7, r3
	uECC_vli_clear(mod_multiple, word_shift);
   1f0f8:	f7ff ff20 	bl	1ef3c <uECC_vli_clear>
	if (bit_shift > 0) {
   1f0fc:	2f00      	cmp	r7, #0
   1f0fe:	b208      	sxth	r0, r1
   1f100:	dd2b      	ble.n	1f15a <uECC_vli_mmod+0xa0>
   1f102:	ab04      	add	r3, sp, #16
	uECC_word_t carry = 0;
   1f104:	2200      	movs	r2, #0
   1f106:	eb03 0180 	add.w	r1, r3, r0, lsl #2
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   1f10a:	f1c7 0e20 	rsb	lr, r7, #32
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   1f10e:	4613      	mov	r3, r2
   1f110:	429d      	cmp	r5, r3
   1f112:	d817      	bhi.n	1f144 <uECC_vli_mmod+0x8a>
		for (i = 0; i < num_words * 2; ++i) {
   1f114:	006b      	lsls	r3, r5, #1
   1f116:	9301      	str	r3, [sp, #4]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1f118:	ab04      	add	r3, sp, #16
   1f11a:	eb03 0985 	add.w	r9, r3, r5, lsl #2
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1f11e:	1e6f      	subs	r7, r5, #1
   1f120:	ab24      	add	r3, sp, #144	; 0x90
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1f122:	2601      	movs	r6, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1f124:	eb03 0787 	add.w	r7, r3, r7, lsl #2
	for (index = 1; shift >= 0; --shift) {
   1f128:	2c00      	cmp	r4, #0
   1f12a:	da54      	bge.n	1f1d6 <uECC_vli_mmod+0x11c>
	uECC_vli_set(result, v[index], num_words);
   1f12c:	ab24      	add	r3, sp, #144	; 0x90
   1f12e:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   1f132:	462a      	mov	r2, r5
   1f134:	f856 1c88 	ldr.w	r1, [r6, #-136]
   1f138:	4640      	mov	r0, r8
   1f13a:	f7ff ff44 	bl	1efc6 <uECC_vli_set>
}
   1f13e:	b025      	add	sp, #148	; 0x94
   1f140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
   1f144:	f856 c023 	ldr.w	ip, [r6, r3, lsl #2]
   1f148:	fa0c f007 	lsl.w	r0, ip, r7
   1f14c:	4302      	orrs	r2, r0
   1f14e:	f841 2b04 	str.w	r2, [r1], #4
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   1f152:	3301      	adds	r3, #1
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   1f154:	fa2c f20e 	lsr.w	r2, ip, lr
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   1f158:	e7da      	b.n	1f110 <uECC_vli_mmod+0x56>
		uECC_vli_set(mod_multiple + word_shift, mod, num_words);
   1f15a:	ab04      	add	r3, sp, #16
   1f15c:	462a      	mov	r2, r5
   1f15e:	4631      	mov	r1, r6
   1f160:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   1f164:	f7ff ff2f 	bl	1efc6 <uECC_vli_set>
   1f168:	e7d4      	b.n	1f114 <uECC_vli_mmod+0x5a>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   1f16a:	fa0f fe82 	sxth.w	lr, r2
   1f16e:	f85a 3c88 	ldr.w	r3, [sl, #-136]
   1f172:	f853 b02e 	ldr.w	fp, [r3, lr, lsl #2]
   1f176:	ab24      	add	r3, sp, #144	; 0x90
   1f178:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   1f17c:	3001      	adds	r0, #1
   1f17e:	f852 3c80 	ldr.w	r3, [r2, #-128]
   1f182:	440b      	add	r3, r1
   1f184:	ebbb 0303 	subs.w	r3, fp, r3
   1f188:	bf34      	ite	cc
   1f18a:	2201      	movcc	r2, #1
   1f18c:	2200      	movcs	r2, #0
			if (diff != v[index][i]) {
   1f18e:	459b      	cmp	fp, r3
				borrow = (diff > v[index][i]);
   1f190:	bf18      	it	ne
   1f192:	4611      	movne	r1, r2
			v[1 - index][i] = diff;
   1f194:	f85c 2c88 	ldr.w	r2, [ip, #-136]
   1f198:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
		for (i = 0; i < num_words * 2; ++i) {
   1f19c:	9b01      	ldr	r3, [sp, #4]
   1f19e:	b242      	sxtb	r2, r0
   1f1a0:	429a      	cmp	r2, r3
   1f1a2:	dbe2      	blt.n	1f16a <uECC_vli_mmod+0xb0>
		index = !(index ^ borrow);
   1f1a4:	1a73      	subs	r3, r6, r1
   1f1a6:	425e      	negs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   1f1a8:	4629      	mov	r1, r5
   1f1aa:	a804      	add	r0, sp, #16
		index = !(index ^ borrow);
   1f1ac:	415e      	adcs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   1f1ae:	f7ff fe24 	bl	1edfa <uECC_vli_rshift1>
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1f1b2:	ab24      	add	r3, sp, #144	; 0x90
   1f1b4:	eb03 0385 	add.w	r3, r3, r5, lsl #2
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1f1b8:	4629      	mov	r1, r5
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1f1ba:	f853 2c80 	ldr.w	r2, [r3, #-128]
   1f1be:	f857 3c80 	ldr.w	r3, [r7, #-128]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1f1c2:	4648      	mov	r0, r9
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1f1c4:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
	for (index = 1; shift >= 0; --shift) {
   1f1c8:	3c01      	subs	r4, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1f1ca:	f847 3c80 	str.w	r3, [r7, #-128]
	for (index = 1; shift >= 0; --shift) {
   1f1ce:	b224      	sxth	r4, r4
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1f1d0:	f7ff fe13 	bl	1edfa <uECC_vli_rshift1>
	for (index = 1; shift >= 0; --shift) {
   1f1d4:	e7a8      	b.n	1f128 <uECC_vli_mmod+0x6e>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   1f1d6:	ab24      	add	r3, sp, #144	; 0x90
   1f1d8:	2000      	movs	r0, #0
			v[1 - index][i] = diff;
   1f1da:	f1c6 0c01 	rsb	ip, r6, #1
		uECC_word_t borrow = 0;
   1f1de:	4601      	mov	r1, r0
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   1f1e0:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
			v[1 - index][i] = diff;
   1f1e4:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
   1f1e8:	e7d8      	b.n	1f19c <uECC_vli_mmod+0xe2>

0001f1ea <uECC_vli_modMult_fast>:
{
   1f1ea:	b530      	push	{r4, r5, lr}
   1f1ec:	461c      	mov	r4, r3
   1f1ee:	b091      	sub	sp, #68	; 0x44
   1f1f0:	4605      	mov	r5, r0
	uECC_vli_mult(product, left, right, curve->num_words);
   1f1f2:	f993 3000 	ldrsb.w	r3, [r3]
   1f1f6:	4668      	mov	r0, sp
   1f1f8:	f7ff fe28 	bl	1ee4c <uECC_vli_mult>
	curve->mmod_fast(result, product);
   1f1fc:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   1f200:	4669      	mov	r1, sp
   1f202:	4628      	mov	r0, r5
   1f204:	4798      	blx	r3
}
   1f206:	b011      	add	sp, #68	; 0x44
   1f208:	bd30      	pop	{r4, r5, pc}

0001f20a <uECC_vli_modSquare_fast>:
{
   1f20a:	4613      	mov	r3, r2
	uECC_vli_modMult_fast(result, left, left, curve);
   1f20c:	460a      	mov	r2, r1
   1f20e:	f7ff bfec 	b.w	1f1ea <uECC_vli_modMult_fast>

0001f212 <double_jacobian_default>:
{
   1f212:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	wordcount_t num_words = curve->num_words;
   1f216:	f993 6000 	ldrsb.w	r6, [r3]
{
   1f21a:	b092      	sub	sp, #72	; 0x48
   1f21c:	4604      	mov	r4, r0
   1f21e:	4689      	mov	r9, r1
	if (uECC_vli_isZero(Z1, num_words)) {
   1f220:	4610      	mov	r0, r2
   1f222:	4631      	mov	r1, r6
{
   1f224:	4615      	mov	r5, r2
   1f226:	461f      	mov	r7, r3
	if (uECC_vli_isZero(Z1, num_words)) {
   1f228:	f7ff fe93 	bl	1ef52 <uECC_vli_isZero>
   1f22c:	2800      	cmp	r0, #0
   1f22e:	f040 8091 	bne.w	1f354 <double_jacobian_default+0x142>
	uECC_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
   1f232:	463a      	mov	r2, r7
   1f234:	4649      	mov	r1, r9
   1f236:	a802      	add	r0, sp, #8
   1f238:	f7ff ffe7 	bl	1f20a <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
   1f23c:	463b      	mov	r3, r7
   1f23e:	aa02      	add	r2, sp, #8
   1f240:	4621      	mov	r1, r4
   1f242:	a80a      	add	r0, sp, #40	; 0x28
   1f244:	f7ff ffd1 	bl	1f1ea <uECC_vli_modMult_fast>
	uECC_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
   1f248:	a902      	add	r1, sp, #8
   1f24a:	4608      	mov	r0, r1
   1f24c:	463a      	mov	r2, r7
   1f24e:	f7ff ffdc 	bl	1f20a <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
   1f252:	463b      	mov	r3, r7
   1f254:	462a      	mov	r2, r5
   1f256:	4649      	mov	r1, r9
   1f258:	4648      	mov	r0, r9
   1f25a:	f7ff ffc6 	bl	1f1ea <uECC_vli_modMult_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   1f25e:	f107 0804 	add.w	r8, r7, #4
	uECC_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
   1f262:	463a      	mov	r2, r7
   1f264:	4629      	mov	r1, r5
   1f266:	4628      	mov	r0, r5
   1f268:	f7ff ffcf 	bl	1f20a <uECC_vli_modSquare_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   1f26c:	4643      	mov	r3, r8
   1f26e:	462a      	mov	r2, r5
   1f270:	4621      	mov	r1, r4
   1f272:	4620      	mov	r0, r4
   1f274:	9600      	str	r6, [sp, #0]
   1f276:	f7ff fef5 	bl	1f064 <uECC_vli_modAdd>
	uECC_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
   1f27a:	4643      	mov	r3, r8
   1f27c:	462a      	mov	r2, r5
   1f27e:	4629      	mov	r1, r5
   1f280:	4628      	mov	r0, r5
   1f282:	9600      	str	r6, [sp, #0]
   1f284:	f7ff feee 	bl	1f064 <uECC_vli_modAdd>
	uECC_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
   1f288:	4643      	mov	r3, r8
   1f28a:	462a      	mov	r2, r5
   1f28c:	4621      	mov	r1, r4
   1f28e:	4628      	mov	r0, r5
   1f290:	9600      	str	r6, [sp, #0]
   1f292:	f7ff ff00 	bl	1f096 <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, Z1, curve); /* t1 = x1^2 - z1^4 */
   1f296:	463b      	mov	r3, r7
   1f298:	462a      	mov	r2, r5
   1f29a:	4621      	mov	r1, r4
   1f29c:	4620      	mov	r0, r4
   1f29e:	f7ff ffa4 	bl	1f1ea <uECC_vli_modMult_fast>
	uECC_vli_modAdd(Z1, X1, X1, curve->p, num_words); /* t3 = 2*(x1^2 - z1^4) */
   1f2a2:	4643      	mov	r3, r8
   1f2a4:	4622      	mov	r2, r4
   1f2a6:	4621      	mov	r1, r4
   1f2a8:	4628      	mov	r0, r5
   1f2aa:	9600      	str	r6, [sp, #0]
   1f2ac:	f7ff feda 	bl	1f064 <uECC_vli_modAdd>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = 3*(x1^2 - z1^4) */
   1f2b0:	4643      	mov	r3, r8
   1f2b2:	9600      	str	r6, [sp, #0]
   1f2b4:	462a      	mov	r2, r5
   1f2b6:	4621      	mov	r1, r4
   1f2b8:	4620      	mov	r0, r4
   1f2ba:	f7ff fed3 	bl	1f064 <uECC_vli_modAdd>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   1f2be:	6823      	ldr	r3, [r4, #0]
	if (uECC_vli_testBit(X1, 0)) {
   1f2c0:	07db      	lsls	r3, r3, #31
   1f2c2:	d54a      	bpl.n	1f35a <double_jacobian_default+0x148>
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   1f2c4:	4633      	mov	r3, r6
   1f2c6:	4642      	mov	r2, r8
   1f2c8:	4621      	mov	r1, r4
   1f2ca:	4620      	mov	r0, r4
   1f2cc:	f7ff fd7d 	bl	1edca <uECC_vli_add>
		uECC_vli_rshift1(X1, num_words);
   1f2d0:	4631      	mov	r1, r6
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   1f2d2:	4682      	mov	sl, r0
		uECC_vli_rshift1(X1, num_words);
   1f2d4:	4620      	mov	r0, r4
   1f2d6:	f7ff fd90 	bl	1edfa <uECC_vli_rshift1>
		X1[num_words - 1] |= l_carry << (uECC_WORD_BITS - 1);
   1f2da:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
   1f2de:	3b01      	subs	r3, #1
   1f2e0:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
   1f2e4:	ea42 72ca 	orr.w	r2, r2, sl, lsl #31
   1f2e8:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
	uECC_vli_modSquare_fast(Z1, X1, curve); /* t3 = B^2 */
   1f2ec:	463a      	mov	r2, r7
   1f2ee:	4621      	mov	r1, r4
   1f2f0:	4628      	mov	r0, r5
   1f2f2:	f7ff ff8a 	bl	1f20a <uECC_vli_modSquare_fast>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
   1f2f6:	4643      	mov	r3, r8
   1f2f8:	aa0a      	add	r2, sp, #40	; 0x28
   1f2fa:	4629      	mov	r1, r5
   1f2fc:	4628      	mov	r0, r5
   1f2fe:	9600      	str	r6, [sp, #0]
   1f300:	f7ff fec9 	bl	1f096 <uECC_vli_modSub>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
   1f304:	4643      	mov	r3, r8
   1f306:	aa0a      	add	r2, sp, #40	; 0x28
   1f308:	4629      	mov	r1, r5
   1f30a:	4628      	mov	r0, r5
   1f30c:	9600      	str	r6, [sp, #0]
   1f30e:	f7ff fec2 	bl	1f096 <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
   1f312:	a90a      	add	r1, sp, #40	; 0x28
   1f314:	4608      	mov	r0, r1
   1f316:	4643      	mov	r3, r8
   1f318:	462a      	mov	r2, r5
   1f31a:	9600      	str	r6, [sp, #0]
   1f31c:	f7ff febb 	bl	1f096 <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = B * (A - x3) */
   1f320:	463b      	mov	r3, r7
   1f322:	aa0a      	add	r2, sp, #40	; 0x28
   1f324:	4621      	mov	r1, r4
   1f326:	4620      	mov	r0, r4
   1f328:	f7ff ff5f 	bl	1f1ea <uECC_vli_modMult_fast>
	uECC_vli_modSub(t4, X1, t4, curve->p, num_words);
   1f32c:	aa02      	add	r2, sp, #8
   1f32e:	4643      	mov	r3, r8
   1f330:	4610      	mov	r0, r2
   1f332:	4621      	mov	r1, r4
   1f334:	9600      	str	r6, [sp, #0]
   1f336:	f7ff feae 	bl	1f096 <uECC_vli_modSub>
	uECC_vli_set(X1, Z1, num_words);
   1f33a:	4632      	mov	r2, r6
   1f33c:	4629      	mov	r1, r5
   1f33e:	4620      	mov	r0, r4
   1f340:	f7ff fe41 	bl	1efc6 <uECC_vli_set>
	uECC_vli_set(Z1, Y1, num_words);
   1f344:	4649      	mov	r1, r9
   1f346:	4628      	mov	r0, r5
   1f348:	f7ff fe3d 	bl	1efc6 <uECC_vli_set>
	uECC_vli_set(Y1, t4, num_words);
   1f34c:	a902      	add	r1, sp, #8
   1f34e:	4648      	mov	r0, r9
   1f350:	f7ff fe39 	bl	1efc6 <uECC_vli_set>
}
   1f354:	b012      	add	sp, #72	; 0x48
   1f356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uECC_vli_rshift1(X1, num_words);
   1f35a:	4631      	mov	r1, r6
   1f35c:	4620      	mov	r0, r4
   1f35e:	f7ff fd4c 	bl	1edfa <uECC_vli_rshift1>
   1f362:	e7c3      	b.n	1f2ec <double_jacobian_default+0xda>

0001f364 <x_side_default>:
{
   1f364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f368:	4615      	mov	r5, r2
   1f36a:	b08a      	sub	sp, #40	; 0x28
   1f36c:	4604      	mov	r4, r0
   1f36e:	460e      	mov	r6, r1
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   1f370:	221c      	movs	r2, #28
   1f372:	2100      	movs	r1, #0
   1f374:	a803      	add	r0, sp, #12
   1f376:	f000 fda5 	bl	1fec4 <memset>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   1f37a:	1d2f      	adds	r7, r5, #4
	wordcount_t num_words = curve->num_words;
   1f37c:	f995 8000 	ldrsb.w	r8, [r5]
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   1f380:	2303      	movs	r3, #3
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   1f382:	462a      	mov	r2, r5
   1f384:	4631      	mov	r1, r6
   1f386:	4620      	mov	r0, r4
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   1f388:	9302      	str	r3, [sp, #8]
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   1f38a:	f7ff ff3e 	bl	1f20a <uECC_vli_modSquare_fast>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   1f38e:	463b      	mov	r3, r7
   1f390:	aa02      	add	r2, sp, #8
   1f392:	4621      	mov	r1, r4
   1f394:	4620      	mov	r0, r4
   1f396:	f8cd 8000 	str.w	r8, [sp]
   1f39a:	f7ff fe7c 	bl	1f096 <uECC_vli_modSub>
	uECC_vli_modMult_fast(result, result, x, curve); /* r = x^3 - 3x */
   1f39e:	462b      	mov	r3, r5
   1f3a0:	4632      	mov	r2, r6
   1f3a2:	4621      	mov	r1, r4
   1f3a4:	4620      	mov	r0, r4
   1f3a6:	f7ff ff20 	bl	1f1ea <uECC_vli_modMult_fast>
	uECC_vli_modAdd(result, result, curve->b, curve->p, num_words);
   1f3aa:	f8cd 8000 	str.w	r8, [sp]
   1f3ae:	463b      	mov	r3, r7
   1f3b0:	f105 0284 	add.w	r2, r5, #132	; 0x84
   1f3b4:	4621      	mov	r1, r4
   1f3b6:	4620      	mov	r0, r4
   1f3b8:	f7ff fe54 	bl	1f064 <uECC_vli_modAdd>
}
   1f3bc:	b00a      	add	sp, #40	; 0x28
   1f3be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001f3c2 <XYcZ_addC>:
   or P => P - Q, Q => P + Q
 */
static void XYcZ_addC(uECC_word_t * X1, uECC_word_t * Y1,
		      uECC_word_t * X2, uECC_word_t * Y2,
		      uECC_Curve curve)
{
   1f3c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1f3c6:	b09a      	sub	sp, #104	; 0x68
   1f3c8:	4616      	mov	r6, r2
   1f3ca:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
	/* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
	uECC_word_t t5[NUM_ECC_WORDS];
	uECC_word_t t6[NUM_ECC_WORDS];
	uECC_word_t t7[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   1f3ce:	4644      	mov	r4, r8
{
   1f3d0:	4699      	mov	r9, r3
	wordcount_t num_words = curve->num_words;
   1f3d2:	f914 5b04 	ldrsb.w	r5, [r4], #4

	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   1f3d6:	9500      	str	r5, [sp, #0]
{
   1f3d8:	4607      	mov	r7, r0
   1f3da:	468a      	mov	sl, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   1f3dc:	4623      	mov	r3, r4
   1f3de:	4602      	mov	r2, r0
   1f3e0:	4631      	mov	r1, r6
   1f3e2:	a802      	add	r0, sp, #8
   1f3e4:	f7ff fe57 	bl	1f096 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   1f3e8:	a902      	add	r1, sp, #8
   1f3ea:	4642      	mov	r2, r8
   1f3ec:	4608      	mov	r0, r1
   1f3ee:	f7ff ff0c 	bl	1f20a <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   1f3f2:	4643      	mov	r3, r8
   1f3f4:	aa02      	add	r2, sp, #8
   1f3f6:	4639      	mov	r1, r7
   1f3f8:	4638      	mov	r0, r7
   1f3fa:	f7ff fef6 	bl	1f1ea <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   1f3fe:	4643      	mov	r3, r8
   1f400:	aa02      	add	r2, sp, #8
   1f402:	4631      	mov	r1, r6
   1f404:	4630      	mov	r0, r6
   1f406:	f7ff fef0 	bl	1f1ea <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
   1f40a:	4623      	mov	r3, r4
   1f40c:	4652      	mov	r2, sl
   1f40e:	4649      	mov	r1, r9
   1f410:	a802      	add	r0, sp, #8
   1f412:	9500      	str	r5, [sp, #0]
   1f414:	f7ff fe26 	bl	1f064 <uECC_vli_modAdd>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   1f418:	4623      	mov	r3, r4
   1f41a:	4652      	mov	r2, sl
   1f41c:	4649      	mov	r1, r9
   1f41e:	4648      	mov	r0, r9
   1f420:	9500      	str	r5, [sp, #0]
   1f422:	f7ff fe38 	bl	1f096 <uECC_vli_modSub>

	uECC_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
   1f426:	4623      	mov	r3, r4
   1f428:	463a      	mov	r2, r7
   1f42a:	4631      	mov	r1, r6
   1f42c:	a80a      	add	r0, sp, #40	; 0x28
   1f42e:	9500      	str	r5, [sp, #0]
   1f430:	f7ff fe31 	bl	1f096 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, t6, curve); /* t2 = y1 * (C - B) = E */
   1f434:	4643      	mov	r3, r8
   1f436:	aa0a      	add	r2, sp, #40	; 0x28
   1f438:	4651      	mov	r1, sl
   1f43a:	4650      	mov	r0, sl
   1f43c:	f7ff fed5 	bl	1f1ea <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
   1f440:	4623      	mov	r3, r4
   1f442:	4632      	mov	r2, r6
   1f444:	4639      	mov	r1, r7
   1f446:	a80a      	add	r0, sp, #40	; 0x28
   1f448:	9500      	str	r5, [sp, #0]
   1f44a:	f7ff fe0b 	bl	1f064 <uECC_vli_modAdd>
	uECC_vli_modSquare_fast(X2, Y2, curve); /* t3 = (y2 - y1)^2 = D */
   1f44e:	4642      	mov	r2, r8
   1f450:	4649      	mov	r1, r9
   1f452:	4630      	mov	r0, r6
   1f454:	f7ff fed9 	bl	1f20a <uECC_vli_modSquare_fast>
	uECC_vli_modSub(X2, X2, t6, curve->p, num_words); /* t3 = D - (B + C) = x3 */
   1f458:	4623      	mov	r3, r4
   1f45a:	aa0a      	add	r2, sp, #40	; 0x28
   1f45c:	4631      	mov	r1, r6
   1f45e:	4630      	mov	r0, r6
   1f460:	9500      	str	r5, [sp, #0]
   1f462:	f7ff fe18 	bl	1f096 <uECC_vli_modSub>

	uECC_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
   1f466:	4623      	mov	r3, r4
   1f468:	4632      	mov	r2, r6
   1f46a:	4639      	mov	r1, r7
   1f46c:	a812      	add	r0, sp, #72	; 0x48
   1f46e:	9500      	str	r5, [sp, #0]
   1f470:	f7ff fe11 	bl	1f096 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, t7, curve); /* t4 = (y2 - y1)*(B - x3) */
   1f474:	4643      	mov	r3, r8
   1f476:	aa12      	add	r2, sp, #72	; 0x48
   1f478:	4649      	mov	r1, r9
   1f47a:	4648      	mov	r0, r9
   1f47c:	f7ff feb5 	bl	1f1ea <uECC_vli_modMult_fast>
	/* t4 = (y2 - y1)*(B - x3) - E = y3: */
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words);
   1f480:	4623      	mov	r3, r4
   1f482:	4652      	mov	r2, sl
   1f484:	4649      	mov	r1, r9
   1f486:	4648      	mov	r0, r9
   1f488:	9500      	str	r5, [sp, #0]
   1f48a:	f7ff fe04 	bl	1f096 <uECC_vli_modSub>

	uECC_vli_modSquare_fast(t7, t5, curve); /* t7 = (y2 + y1)^2 = F */
   1f48e:	4642      	mov	r2, r8
   1f490:	a902      	add	r1, sp, #8
   1f492:	a812      	add	r0, sp, #72	; 0x48
   1f494:	f7ff feb9 	bl	1f20a <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t7, t7, t6, curve->p, num_words); /* t7 = F - (B + C) = x3' */
   1f498:	a912      	add	r1, sp, #72	; 0x48
   1f49a:	4623      	mov	r3, r4
   1f49c:	aa0a      	add	r2, sp, #40	; 0x28
   1f49e:	4608      	mov	r0, r1
   1f4a0:	9500      	str	r5, [sp, #0]
   1f4a2:	f7ff fdf8 	bl	1f096 <uECC_vli_modSub>
	uECC_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
   1f4a6:	4623      	mov	r3, r4
   1f4a8:	463a      	mov	r2, r7
   1f4aa:	a912      	add	r1, sp, #72	; 0x48
   1f4ac:	a80a      	add	r0, sp, #40	; 0x28
   1f4ae:	9500      	str	r5, [sp, #0]
   1f4b0:	f7ff fdf1 	bl	1f096 <uECC_vli_modSub>
	uECC_vli_modMult_fast(t6, t6, t5, curve); /* t6 = (y2+y1)*(x3' - B) */
   1f4b4:	a90a      	add	r1, sp, #40	; 0x28
   1f4b6:	4643      	mov	r3, r8
   1f4b8:	aa02      	add	r2, sp, #8
   1f4ba:	4608      	mov	r0, r1
   1f4bc:	f7ff fe95 	bl	1f1ea <uECC_vli_modMult_fast>
	/* t2 = (y2+y1)*(x3' - B) - E = y3': */
	uECC_vli_modSub(Y1, t6, Y1, curve->p, num_words);
   1f4c0:	4623      	mov	r3, r4
   1f4c2:	4652      	mov	r2, sl
   1f4c4:	a90a      	add	r1, sp, #40	; 0x28
   1f4c6:	4650      	mov	r0, sl
   1f4c8:	9500      	str	r5, [sp, #0]
   1f4ca:	f7ff fde4 	bl	1f096 <uECC_vli_modSub>

	uECC_vli_set(X1, t7, num_words);
   1f4ce:	462a      	mov	r2, r5
   1f4d0:	a912      	add	r1, sp, #72	; 0x48
   1f4d2:	4638      	mov	r0, r7
   1f4d4:	f7ff fd77 	bl	1efc6 <uECC_vli_set>
}
   1f4d8:	b01a      	add	sp, #104	; 0x68
   1f4da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001f4de <uECC_vli_modInv>:
{
   1f4de:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f4e0:	460f      	mov	r7, r1
   1f4e2:	b0a1      	sub	sp, #132	; 0x84
   1f4e4:	4606      	mov	r6, r0
	if (uECC_vli_isZero(input, num_words)) {
   1f4e6:	4619      	mov	r1, r3
   1f4e8:	4638      	mov	r0, r7
{
   1f4ea:	4615      	mov	r5, r2
   1f4ec:	461c      	mov	r4, r3
	if (uECC_vli_isZero(input, num_words)) {
   1f4ee:	f7ff fd30 	bl	1ef52 <uECC_vli_isZero>
   1f4f2:	b120      	cbz	r0, 1f4fe <uECC_vli_modInv+0x20>
		uECC_vli_clear(result, num_words);
   1f4f4:	4630      	mov	r0, r6
   1f4f6:	f7ff fd21 	bl	1ef3c <uECC_vli_clear>
}
   1f4fa:	b021      	add	sp, #132	; 0x84
   1f4fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uECC_vli_set(a, input, num_words);
   1f4fe:	4622      	mov	r2, r4
   1f500:	4639      	mov	r1, r7
   1f502:	4668      	mov	r0, sp
   1f504:	f7ff fd5f 	bl	1efc6 <uECC_vli_set>
	uECC_vli_set(b, mod, num_words);
   1f508:	4629      	mov	r1, r5
   1f50a:	a808      	add	r0, sp, #32
   1f50c:	f7ff fd5b 	bl	1efc6 <uECC_vli_set>
	uECC_vli_clear(u, num_words);
   1f510:	a810      	add	r0, sp, #64	; 0x40
   1f512:	4621      	mov	r1, r4
   1f514:	f7ff fd12 	bl	1ef3c <uECC_vli_clear>
	u[0] = 1;
   1f518:	2301      	movs	r3, #1
	uECC_vli_clear(v, num_words);
   1f51a:	a818      	add	r0, sp, #96	; 0x60
	u[0] = 1;
   1f51c:	9310      	str	r3, [sp, #64]	; 0x40
	uECC_vli_clear(v, num_words);
   1f51e:	f7ff fd0d 	bl	1ef3c <uECC_vli_clear>
	while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
   1f522:	4622      	mov	r2, r4
   1f524:	a908      	add	r1, sp, #32
   1f526:	4668      	mov	r0, sp
   1f528:	f7ff fd59 	bl	1efde <uECC_vli_cmp_unsafe>
   1f52c:	b928      	cbnz	r0, 1f53a <uECC_vli_modInv+0x5c>
  	uECC_vli_set(result, u, num_words);
   1f52e:	4622      	mov	r2, r4
   1f530:	a910      	add	r1, sp, #64	; 0x40
   1f532:	4630      	mov	r0, r6
   1f534:	f7ff fd47 	bl	1efc6 <uECC_vli_set>
   1f538:	e7df      	b.n	1f4fa <uECC_vli_modInv+0x1c>
		if (EVEN(a)) {
   1f53a:	9b00      	ldr	r3, [sp, #0]
   1f53c:	07da      	lsls	r2, r3, #31
   1f53e:	d409      	bmi.n	1f554 <uECC_vli_modInv+0x76>
			uECC_vli_rshift1(a, num_words);
   1f540:	4621      	mov	r1, r4
   1f542:	4668      	mov	r0, sp
   1f544:	f7ff fc59 	bl	1edfa <uECC_vli_rshift1>
      			vli_modInv_update(u, mod, num_words);
   1f548:	4622      	mov	r2, r4
   1f54a:	4629      	mov	r1, r5
   1f54c:	a810      	add	r0, sp, #64	; 0x40
      			vli_modInv_update(v, mod, num_words);
   1f54e:	f7ff fc61 	bl	1ee14 <vli_modInv_update>
   1f552:	e7e6      	b.n	1f522 <uECC_vli_modInv+0x44>
    		} else if (EVEN(b)) {
   1f554:	9b08      	ldr	r3, [sp, #32]
   1f556:	07db      	lsls	r3, r3, #31
   1f558:	d407      	bmi.n	1f56a <uECC_vli_modInv+0x8c>
			uECC_vli_rshift1(b, num_words);
   1f55a:	4621      	mov	r1, r4
   1f55c:	a808      	add	r0, sp, #32
   1f55e:	f7ff fc4c 	bl	1edfa <uECC_vli_rshift1>
      			vli_modInv_update(v, mod, num_words);
   1f562:	4622      	mov	r2, r4
   1f564:	4629      	mov	r1, r5
   1f566:	a818      	add	r0, sp, #96	; 0x60
   1f568:	e7f1      	b.n	1f54e <uECC_vli_modInv+0x70>
		} else if (cmpResult > 0) {
   1f56a:	2800      	cmp	r0, #0
			uECC_vli_sub(a, a, b, num_words);
   1f56c:	4623      	mov	r3, r4
		} else if (cmpResult > 0) {
   1f56e:	dd1c      	ble.n	1f5aa <uECC_vli_modInv+0xcc>
			uECC_vli_sub(a, a, b, num_words);
   1f570:	aa08      	add	r2, sp, #32
   1f572:	4669      	mov	r1, sp
   1f574:	4668      	mov	r0, sp
   1f576:	f7ff fd5c 	bl	1f032 <uECC_vli_sub>
			uECC_vli_rshift1(a, num_words);
   1f57a:	4621      	mov	r1, r4
   1f57c:	4668      	mov	r0, sp
   1f57e:	f7ff fc3c 	bl	1edfa <uECC_vli_rshift1>
			if (uECC_vli_cmp_unsafe(u, v, num_words) < 0) {
   1f582:	4622      	mov	r2, r4
   1f584:	a918      	add	r1, sp, #96	; 0x60
   1f586:	a810      	add	r0, sp, #64	; 0x40
   1f588:	f7ff fd29 	bl	1efde <uECC_vli_cmp_unsafe>
   1f58c:	2800      	cmp	r0, #0
   1f58e:	da05      	bge.n	1f59c <uECC_vli_modInv+0xbe>
        			uECC_vli_add(u, u, mod, num_words);
   1f590:	a910      	add	r1, sp, #64	; 0x40
   1f592:	4623      	mov	r3, r4
   1f594:	462a      	mov	r2, r5
   1f596:	4608      	mov	r0, r1
   1f598:	f7ff fc17 	bl	1edca <uECC_vli_add>
      			uECC_vli_sub(u, u, v, num_words);
   1f59c:	a910      	add	r1, sp, #64	; 0x40
   1f59e:	4623      	mov	r3, r4
   1f5a0:	aa18      	add	r2, sp, #96	; 0x60
   1f5a2:	4608      	mov	r0, r1
   1f5a4:	f7ff fd45 	bl	1f032 <uECC_vli_sub>
   1f5a8:	e7ce      	b.n	1f548 <uECC_vli_modInv+0x6a>
      			uECC_vli_sub(b, b, a, num_words);
   1f5aa:	a908      	add	r1, sp, #32
   1f5ac:	466a      	mov	r2, sp
   1f5ae:	4608      	mov	r0, r1
   1f5b0:	f7ff fd3f 	bl	1f032 <uECC_vli_sub>
      			uECC_vli_rshift1(b, num_words);
   1f5b4:	4621      	mov	r1, r4
   1f5b6:	a808      	add	r0, sp, #32
   1f5b8:	f7ff fc1f 	bl	1edfa <uECC_vli_rshift1>
      			if (uECC_vli_cmp_unsafe(v, u, num_words) < 0) {
   1f5bc:	4622      	mov	r2, r4
   1f5be:	a910      	add	r1, sp, #64	; 0x40
   1f5c0:	a818      	add	r0, sp, #96	; 0x60
   1f5c2:	f7ff fd0c 	bl	1efde <uECC_vli_cmp_unsafe>
   1f5c6:	2800      	cmp	r0, #0
   1f5c8:	da05      	bge.n	1f5d6 <uECC_vli_modInv+0xf8>
        			uECC_vli_add(v, v, mod, num_words);
   1f5ca:	a918      	add	r1, sp, #96	; 0x60
   1f5cc:	4623      	mov	r3, r4
   1f5ce:	462a      	mov	r2, r5
   1f5d0:	4608      	mov	r0, r1
   1f5d2:	f7ff fbfa 	bl	1edca <uECC_vli_add>
      			uECC_vli_sub(v, v, u, num_words);
   1f5d6:	a918      	add	r1, sp, #96	; 0x60
   1f5d8:	4623      	mov	r3, r4
   1f5da:	aa10      	add	r2, sp, #64	; 0x40
   1f5dc:	4608      	mov	r0, r1
   1f5de:	f7ff fd28 	bl	1f032 <uECC_vli_sub>
   1f5e2:	e7be      	b.n	1f562 <uECC_vli_modInv+0x84>

0001f5e4 <EccPoint_isZero>:
	return uECC_vli_isZero(point, curve->num_words * 2);
   1f5e4:	7809      	ldrb	r1, [r1, #0]
   1f5e6:	0049      	lsls	r1, r1, #1
   1f5e8:	b249      	sxtb	r1, r1
   1f5ea:	f7ff bcb2 	b.w	1ef52 <uECC_vli_isZero>

0001f5ee <apply_z>:
{
   1f5ee:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f5f0:	4615      	mov	r5, r2
   1f5f2:	b089      	sub	sp, #36	; 0x24
   1f5f4:	461c      	mov	r4, r3
   1f5f6:	4607      	mov	r7, r0
   1f5f8:	460e      	mov	r6, r1
	uECC_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
   1f5fa:	461a      	mov	r2, r3
   1f5fc:	4629      	mov	r1, r5
   1f5fe:	4668      	mov	r0, sp
   1f600:	f7ff fe03 	bl	1f20a <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
   1f604:	4623      	mov	r3, r4
   1f606:	466a      	mov	r2, sp
   1f608:	4639      	mov	r1, r7
   1f60a:	4638      	mov	r0, r7
   1f60c:	f7ff fded 	bl	1f1ea <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
   1f610:	4623      	mov	r3, r4
   1f612:	462a      	mov	r2, r5
   1f614:	4669      	mov	r1, sp
   1f616:	4668      	mov	r0, sp
   1f618:	f7ff fde7 	bl	1f1ea <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
   1f61c:	4623      	mov	r3, r4
   1f61e:	466a      	mov	r2, sp
   1f620:	4631      	mov	r1, r6
   1f622:	4630      	mov	r0, r6
   1f624:	f7ff fde1 	bl	1f1ea <uECC_vli_modMult_fast>
}
   1f628:	b009      	add	sp, #36	; 0x24
   1f62a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001f62c <XYcZ_add>:
{
   1f62c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1f630:	b08a      	sub	sp, #40	; 0x28
   1f632:	4614      	mov	r4, r2
   1f634:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
	wordcount_t num_words = curve->num_words;
   1f638:	4655      	mov	r5, sl
{
   1f63a:	461f      	mov	r7, r3
	wordcount_t num_words = curve->num_words;
   1f63c:	f915 6b04 	ldrsb.w	r6, [r5], #4
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   1f640:	9600      	str	r6, [sp, #0]
{
   1f642:	4680      	mov	r8, r0
   1f644:	4689      	mov	r9, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   1f646:	462b      	mov	r3, r5
   1f648:	4602      	mov	r2, r0
   1f64a:	4621      	mov	r1, r4
   1f64c:	a802      	add	r0, sp, #8
   1f64e:	f7ff fd22 	bl	1f096 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   1f652:	a902      	add	r1, sp, #8
   1f654:	4652      	mov	r2, sl
   1f656:	4608      	mov	r0, r1
   1f658:	f7ff fdd7 	bl	1f20a <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   1f65c:	4653      	mov	r3, sl
   1f65e:	aa02      	add	r2, sp, #8
   1f660:	4641      	mov	r1, r8
   1f662:	4640      	mov	r0, r8
   1f664:	f7ff fdc1 	bl	1f1ea <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   1f668:	4653      	mov	r3, sl
   1f66a:	aa02      	add	r2, sp, #8
   1f66c:	4621      	mov	r1, r4
   1f66e:	4620      	mov	r0, r4
   1f670:	f7ff fdbb 	bl	1f1ea <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   1f674:	462b      	mov	r3, r5
   1f676:	464a      	mov	r2, r9
   1f678:	4639      	mov	r1, r7
   1f67a:	4638      	mov	r0, r7
   1f67c:	9600      	str	r6, [sp, #0]
   1f67e:	f7ff fd0a 	bl	1f096 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, Y2, curve); /* t5 = (y2 - y1)^2 = D */
   1f682:	4652      	mov	r2, sl
   1f684:	4639      	mov	r1, r7
   1f686:	a802      	add	r0, sp, #8
   1f688:	f7ff fdbf 	bl	1f20a <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
   1f68c:	a902      	add	r1, sp, #8
   1f68e:	462b      	mov	r3, r5
   1f690:	4642      	mov	r2, r8
   1f692:	4608      	mov	r0, r1
   1f694:	9600      	str	r6, [sp, #0]
   1f696:	f7ff fcfe 	bl	1f096 <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
   1f69a:	a902      	add	r1, sp, #8
   1f69c:	462b      	mov	r3, r5
   1f69e:	4622      	mov	r2, r4
   1f6a0:	4608      	mov	r0, r1
   1f6a2:	9600      	str	r6, [sp, #0]
   1f6a4:	f7ff fcf7 	bl	1f096 <uECC_vli_modSub>
	uECC_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
   1f6a8:	462b      	mov	r3, r5
   1f6aa:	4642      	mov	r2, r8
   1f6ac:	4621      	mov	r1, r4
   1f6ae:	4620      	mov	r0, r4
   1f6b0:	9600      	str	r6, [sp, #0]
   1f6b2:	f7ff fcf0 	bl	1f096 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, X2, curve); /* t2 = y1*(C - B) */
   1f6b6:	4653      	mov	r3, sl
   1f6b8:	4622      	mov	r2, r4
   1f6ba:	4649      	mov	r1, r9
   1f6bc:	4648      	mov	r0, r9
   1f6be:	f7ff fd94 	bl	1f1ea <uECC_vli_modMult_fast>
	uECC_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
   1f6c2:	462b      	mov	r3, r5
   1f6c4:	aa02      	add	r2, sp, #8
   1f6c6:	4641      	mov	r1, r8
   1f6c8:	4620      	mov	r0, r4
   1f6ca:	9600      	str	r6, [sp, #0]
   1f6cc:	f7ff fce3 	bl	1f096 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, X2, curve); /* t4 = (y2 - y1)*(B - x3) */
   1f6d0:	4653      	mov	r3, sl
   1f6d2:	4622      	mov	r2, r4
   1f6d4:	4639      	mov	r1, r7
   1f6d6:	4638      	mov	r0, r7
   1f6d8:	f7ff fd87 	bl	1f1ea <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
   1f6dc:	462b      	mov	r3, r5
   1f6de:	464a      	mov	r2, r9
   1f6e0:	4639      	mov	r1, r7
   1f6e2:	4638      	mov	r0, r7
   1f6e4:	9600      	str	r6, [sp, #0]
   1f6e6:	f7ff fcd6 	bl	1f096 <uECC_vli_modSub>
	uECC_vli_set(X2, t5, num_words);
   1f6ea:	4632      	mov	r2, r6
   1f6ec:	a902      	add	r1, sp, #8
   1f6ee:	4620      	mov	r0, r4
   1f6f0:	f7ff fc69 	bl	1efc6 <uECC_vli_set>
}
   1f6f4:	b00a      	add	sp, #40	; 0x28
   1f6f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001f6fa <EccPoint_mult>:

void EccPoint_mult(uECC_word_t * result, const uECC_word_t * point,
		   const uECC_word_t * scalar,
		   const uECC_word_t * initial_Z,
		   bitcount_t num_bits, uECC_Curve curve) 
{
   1f6fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f6fe:	b0b1      	sub	sp, #196	; 0xc4
   1f700:	e9cd 0103 	strd	r0, r1, [sp, #12]
   1f704:	9c3b      	ldr	r4, [sp, #236]	; 0xec
	uECC_word_t Rx[2][NUM_ECC_WORDS];
	uECC_word_t Ry[2][NUM_ECC_WORDS];
	uECC_word_t z[NUM_ECC_WORDS];
	bitcount_t i;
	uECC_word_t nb;
	wordcount_t num_words = curve->num_words;
   1f706:	f994 7000 	ldrsb.w	r7, [r4]

	uECC_vli_set(Rx[1], point, num_words);
   1f70a:	a818      	add	r0, sp, #96	; 0x60
{
   1f70c:	4692      	mov	sl, r2
	uECC_vli_set(Rx[1], point, num_words);
   1f70e:	463a      	mov	r2, r7
{
   1f710:	461e      	mov	r6, r3
	uECC_vli_set(Rx[1], point, num_words);
   1f712:	f7ff fc58 	bl	1efc6 <uECC_vli_set>
  	uECC_vli_set(Ry[1], point + num_words, num_words);
   1f716:	00bb      	lsls	r3, r7, #2
   1f718:	9305      	str	r3, [sp, #20]
   1f71a:	9b04      	ldr	r3, [sp, #16]
   1f71c:	eb03 0387 	add.w	r3, r3, r7, lsl #2
   1f720:	4619      	mov	r1, r3
   1f722:	a828      	add	r0, sp, #160	; 0xa0
   1f724:	9302      	str	r3, [sp, #8]
   1f726:	f7ff fc4e 	bl	1efc6 <uECC_vli_set>
	wordcount_t num_words = curve->num_words;
   1f72a:	f994 5000 	ldrsb.w	r5, [r4]
	if (initial_Z) {
   1f72e:	2e00      	cmp	r6, #0
   1f730:	f000 8088 	beq.w	1f844 <EccPoint_mult+0x14a>
		uECC_vli_set(z, initial_Z, num_words);
   1f734:	462a      	mov	r2, r5
   1f736:	4631      	mov	r1, r6
   1f738:	a808      	add	r0, sp, #32
   1f73a:	f7ff fc44 	bl	1efc6 <uECC_vli_set>
	uECC_vli_set(X2, X1, num_words);
   1f73e:	f10d 0840 	add.w	r8, sp, #64	; 0x40
   1f742:	462a      	mov	r2, r5
   1f744:	a918      	add	r1, sp, #96	; 0x60
   1f746:	4640      	mov	r0, r8
	uECC_vli_set(Y2, Y1, num_words);
   1f748:	f10d 0980 	add.w	r9, sp, #128	; 0x80
	uECC_vli_set(X2, X1, num_words);
   1f74c:	f7ff fc3b 	bl	1efc6 <uECC_vli_set>
	uECC_vli_set(Y2, Y1, num_words);
   1f750:	a928      	add	r1, sp, #160	; 0xa0
   1f752:	4648      	mov	r0, r9
   1f754:	f7ff fc37 	bl	1efc6 <uECC_vli_set>
	apply_z(X1, Y1, z, curve);
   1f758:	4623      	mov	r3, r4
   1f75a:	aa08      	add	r2, sp, #32
   1f75c:	a928      	add	r1, sp, #160	; 0xa0
   1f75e:	a818      	add	r0, sp, #96	; 0x60
   1f760:	f7ff ff45 	bl	1f5ee <apply_z>
	curve->double_jacobian(X1, Y1, z, curve);
   1f764:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
   1f768:	4623      	mov	r3, r4
   1f76a:	aa08      	add	r2, sp, #32
   1f76c:	a928      	add	r1, sp, #160	; 0xa0
   1f76e:	a818      	add	r0, sp, #96	; 0x60
   1f770:	47a8      	blx	r5
	apply_z(X2, Y2, z, curve);
   1f772:	4623      	mov	r3, r4
   1f774:	aa08      	add	r2, sp, #32
   1f776:	4649      	mov	r1, r9
   1f778:	4640      	mov	r0, r8
   1f77a:	f7ff ff38 	bl	1f5ee <apply_z>

	XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initial_Z, curve);

	for (i = num_bits - 2; i > 0; --i) {
   1f77e:	f9bd 50e8 	ldrsh.w	r5, [sp, #232]	; 0xe8
   1f782:	3d02      	subs	r5, #2
   1f784:	b22d      	sxth	r5, r5
   1f786:	2d00      	cmp	r5, #0
   1f788:	dc63      	bgt.n	1f852 <EccPoint_mult+0x158>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   1f78a:	f8da 5000 	ldr.w	r5, [sl]
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
	}

	nb = !uECC_vli_testBit(scalar, 0);
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   1f78e:	9400      	str	r4, [sp, #0]
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   1f790:	f005 0601 	and.w	r6, r5, #1
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   1f794:	ab10      	add	r3, sp, #64	; 0x40
   1f796:	eb03 1846 	add.w	r8, r3, r6, lsl #5
   1f79a:	43ed      	mvns	r5, r5
   1f79c:	ab20      	add	r3, sp, #128	; 0x80
   1f79e:	eb03 1646 	add.w	r6, r3, r6, lsl #5
   1f7a2:	f005 0501 	and.w	r5, r5, #1
   1f7a6:	ab10      	add	r3, sp, #64	; 0x40
   1f7a8:	eb03 1945 	add.w	r9, r3, r5, lsl #5
   1f7ac:	ab20      	add	r3, sp, #128	; 0x80
   1f7ae:	eb03 1545 	add.w	r5, r3, r5, lsl #5

	/* Find final 1/Z value. */
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   1f7b2:	f104 0a04 	add.w	sl, r4, #4
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   1f7b6:	462b      	mov	r3, r5
   1f7b8:	464a      	mov	r2, r9
   1f7ba:	4631      	mov	r1, r6
   1f7bc:	4640      	mov	r0, r8
   1f7be:	f7ff fe00 	bl	1f3c2 <XYcZ_addC>
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   1f7c2:	4653      	mov	r3, sl
   1f7c4:	aa10      	add	r2, sp, #64	; 0x40
   1f7c6:	a918      	add	r1, sp, #96	; 0x60
   1f7c8:	a808      	add	r0, sp, #32
   1f7ca:	9700      	str	r7, [sp, #0]
   1f7cc:	f7ff fc63 	bl	1f096 <uECC_vli_modSub>
	uECC_vli_modMult_fast(z, z, Ry[1 - nb], curve); /* Yb * (X1 - X0) */
   1f7d0:	a908      	add	r1, sp, #32
   1f7d2:	4623      	mov	r3, r4
   1f7d4:	4632      	mov	r2, r6
   1f7d6:	4608      	mov	r0, r1
   1f7d8:	f7ff fd07 	bl	1f1ea <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(z, z, point, curve); /* xP * Yb * (X1 - X0) */
   1f7dc:	a908      	add	r1, sp, #32
   1f7de:	9a04      	ldr	r2, [sp, #16]
   1f7e0:	4623      	mov	r3, r4
   1f7e2:	4608      	mov	r0, r1
   1f7e4:	f7ff fd01 	bl	1f1ea <uECC_vli_modMult_fast>
	uECC_vli_modInv(z, z, curve->p, num_words); /* 1 / (xP * Yb * (X1 - X0))*/
   1f7e8:	a908      	add	r1, sp, #32
   1f7ea:	463b      	mov	r3, r7
   1f7ec:	4652      	mov	r2, sl
   1f7ee:	4608      	mov	r0, r1
   1f7f0:	f7ff fe75 	bl	1f4de <uECC_vli_modInv>
	/* yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, point + num_words, curve);
   1f7f4:	a908      	add	r1, sp, #32
   1f7f6:	9a02      	ldr	r2, [sp, #8]
   1f7f8:	4623      	mov	r3, r4
   1f7fa:	4608      	mov	r0, r1
   1f7fc:	f7ff fcf5 	bl	1f1ea <uECC_vli_modMult_fast>
	/* Xb * yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, Rx[1 - nb], curve);
   1f800:	a908      	add	r1, sp, #32
   1f802:	4623      	mov	r3, r4
   1f804:	4642      	mov	r2, r8
   1f806:	4608      	mov	r0, r1
   1f808:	f7ff fcef 	bl	1f1ea <uECC_vli_modMult_fast>
	/* End 1/Z calculation */

	XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   1f80c:	9400      	str	r4, [sp, #0]
   1f80e:	4633      	mov	r3, r6
   1f810:	4642      	mov	r2, r8
   1f812:	4629      	mov	r1, r5
   1f814:	4648      	mov	r0, r9
   1f816:	f7ff ff09 	bl	1f62c <XYcZ_add>
	apply_z(Rx[0], Ry[0], z, curve);
   1f81a:	4623      	mov	r3, r4
   1f81c:	aa08      	add	r2, sp, #32
   1f81e:	a920      	add	r1, sp, #128	; 0x80
   1f820:	a810      	add	r0, sp, #64	; 0x40
   1f822:	f7ff fee4 	bl	1f5ee <apply_z>

	uECC_vli_set(result, Rx[0], num_words);
   1f826:	9803      	ldr	r0, [sp, #12]
   1f828:	463a      	mov	r2, r7
   1f82a:	a910      	add	r1, sp, #64	; 0x40
   1f82c:	f7ff fbcb 	bl	1efc6 <uECC_vli_set>
	uECC_vli_set(result + num_words, Ry[0], num_words);
   1f830:	9b03      	ldr	r3, [sp, #12]
   1f832:	9c05      	ldr	r4, [sp, #20]
   1f834:	4423      	add	r3, r4
   1f836:	a920      	add	r1, sp, #128	; 0x80
   1f838:	4618      	mov	r0, r3
   1f83a:	f7ff fbc4 	bl	1efc6 <uECC_vli_set>
}
   1f83e:	b031      	add	sp, #196	; 0xc4
   1f840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uECC_vli_clear(z, num_words);
   1f844:	4629      	mov	r1, r5
   1f846:	a808      	add	r0, sp, #32
   1f848:	f7ff fb78 	bl	1ef3c <uECC_vli_clear>
		z[0] = 1;
   1f84c:	2301      	movs	r3, #1
   1f84e:	9308      	str	r3, [sp, #32]
   1f850:	e775      	b.n	1f73e <EccPoint_mult+0x44>
		nb = !uECC_vli_testBit(scalar, i);
   1f852:	4629      	mov	r1, r5
   1f854:	4650      	mov	r0, sl
   1f856:	f7ff fb8b 	bl	1ef70 <uECC_vli_testBit>
   1f85a:	fab0 f680 	clz	r6, r0
   1f85e:	0976      	lsrs	r6, r6, #5
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   1f860:	f1c6 0101 	rsb	r1, r6, #1
   1f864:	eb08 1b46 	add.w	fp, r8, r6, lsl #5
   1f868:	eb09 1646 	add.w	r6, r9, r6, lsl #5
   1f86c:	eb08 1041 	add.w	r0, r8, r1, lsl #5
   1f870:	4633      	mov	r3, r6
   1f872:	eb09 1141 	add.w	r1, r9, r1, lsl #5
   1f876:	465a      	mov	r2, fp
   1f878:	9400      	str	r4, [sp, #0]
   1f87a:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1f87e:	f7ff fda0 	bl	1f3c2 <XYcZ_addC>
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   1f882:	9907      	ldr	r1, [sp, #28]
   1f884:	9806      	ldr	r0, [sp, #24]
   1f886:	9400      	str	r4, [sp, #0]
   1f888:	460b      	mov	r3, r1
   1f88a:	4602      	mov	r2, r0
   1f88c:	4631      	mov	r1, r6
   1f88e:	4658      	mov	r0, fp
   1f890:	f7ff fecc 	bl	1f62c <XYcZ_add>
	for (i = num_bits - 2; i > 0; --i) {
   1f894:	3d01      	subs	r5, #1
   1f896:	e775      	b.n	1f784 <EccPoint_mult+0x8a>

0001f898 <regularize_k>:

uECC_word_t regularize_k(const uECC_word_t * const k, uECC_word_t *k0,
			 uECC_word_t *k1, uECC_Curve curve)
{
   1f898:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   1f89c:	f9b3 9002 	ldrsh.w	r9, [r3, #2]
   1f8a0:	f119 081f 	adds.w	r8, r9, #31
{
   1f8a4:	461d      	mov	r5, r3
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   1f8a6:	bf48      	it	mi
   1f8a8:	f109 083e 	addmi.w	r8, r9, #62	; 0x3e
{
   1f8ac:	460e      	mov	r6, r1
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   1f8ae:	f348 1847 	sbfx	r8, r8, #5, #8

	bitcount_t num_n_bits = curve->num_n_bits;

	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   1f8b2:	3524      	adds	r5, #36	; 0x24
   1f8b4:	4601      	mov	r1, r0
{
   1f8b6:	4617      	mov	r7, r2
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   1f8b8:	4643      	mov	r3, r8
   1f8ba:	462a      	mov	r2, r5
   1f8bc:	4630      	mov	r0, r6
   1f8be:	f7ff fa84 	bl	1edca <uECC_vli_add>
   1f8c2:	4604      	mov	r4, r0
   1f8c4:	b990      	cbnz	r0, 1f8ec <regularize_k+0x54>
   1f8c6:	ebb9 1f48 	cmp.w	r9, r8, lsl #5
   1f8ca:	da06      	bge.n	1f8da <regularize_k+0x42>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
			     uECC_vli_testBit(k0, num_n_bits));
   1f8cc:	4649      	mov	r1, r9
   1f8ce:	4630      	mov	r0, r6
   1f8d0:	f7ff fb4e 	bl	1ef70 <uECC_vli_testBit>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
   1f8d4:	1e04      	subs	r4, r0, #0
   1f8d6:	bf18      	it	ne
   1f8d8:	2401      	movne	r4, #1

	uECC_vli_add(k1, k0, curve->n, num_n_words);
   1f8da:	4643      	mov	r3, r8
   1f8dc:	462a      	mov	r2, r5
   1f8de:	4631      	mov	r1, r6
   1f8e0:	4638      	mov	r0, r7
   1f8e2:	f7ff fa72 	bl	1edca <uECC_vli_add>

	return carry;
}
   1f8e6:	4620      	mov	r0, r4
   1f8e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   1f8ec:	2401      	movs	r4, #1
   1f8ee:	e7f4      	b.n	1f8da <regularize_k+0x42>

0001f8f0 <EccPoint_compute_public_key>:

uECC_word_t EccPoint_compute_public_key(uECC_word_t *result,
					uECC_word_t *private_key,
					uECC_Curve curve)
{
   1f8f0:	b530      	push	{r4, r5, lr}
   1f8f2:	4614      	mov	r4, r2
   1f8f4:	b095      	sub	sp, #84	; 0x54
   1f8f6:	4605      	mov	r5, r0

	uECC_word_t tmp1[NUM_ECC_WORDS];
 	uECC_word_t tmp2[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {tmp1, tmp2};
   1f8f8:	aa0c      	add	r2, sp, #48	; 0x30
	uECC_word_t carry;

	/* Regularize the bitcount for the private key so that attackers cannot
	 * use a side channel attack to learn the number of leading zeros. */
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   1f8fa:	4623      	mov	r3, r4
{
   1f8fc:	4608      	mov	r0, r1
	uECC_word_t *p2[2] = {tmp1, tmp2};
   1f8fe:	a904      	add	r1, sp, #16
   1f900:	9102      	str	r1, [sp, #8]
   1f902:	9203      	str	r2, [sp, #12]
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   1f904:	f7ff ffc8 	bl	1f898 <regularize_k>

	EccPoint_mult(result, curve->G, p2[!carry], 0, curve->num_n_bits + 1, curve);
   1f908:	fab0 f380 	clz	r3, r0
   1f90c:	095b      	lsrs	r3, r3, #5
   1f90e:	aa14      	add	r2, sp, #80	; 0x50
   1f910:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   1f914:	8863      	ldrh	r3, [r4, #2]
   1f916:	9401      	str	r4, [sp, #4]
   1f918:	3301      	adds	r3, #1
   1f91a:	b21b      	sxth	r3, r3
   1f91c:	9300      	str	r3, [sp, #0]
   1f91e:	f852 2c48 	ldr.w	r2, [r2, #-72]
   1f922:	2300      	movs	r3, #0
   1f924:	f104 0144 	add.w	r1, r4, #68	; 0x44
   1f928:	4628      	mov	r0, r5
   1f92a:	f7ff fee6 	bl	1f6fa <EccPoint_mult>

	if (EccPoint_isZero(result, curve)) {
   1f92e:	4621      	mov	r1, r4
   1f930:	4628      	mov	r0, r5
   1f932:	f7ff fe57 	bl	1f5e4 <EccPoint_isZero>
		return 0;
	}
	return 1;
}
   1f936:	fab0 f080 	clz	r0, r0
   1f93a:	0940      	lsrs	r0, r0, #5
   1f93c:	b015      	add	sp, #84	; 0x54
   1f93e:	bd30      	pop	{r4, r5, pc}

0001f940 <uECC_vli_nativeToBytes>:

/* Converts an integer in uECC native format to big-endian bytes. */
void uECC_vli_nativeToBytes(uint8_t *bytes, int num_bytes,
			    const unsigned int *native)
{
   1f940:	b5f0      	push	{r4, r5, r6, r7, lr}
	wordcount_t i;
	for (i = 0; i < num_bytes; ++i) {
   1f942:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   1f944:	1e4f      	subs	r7, r1, #1
   1f946:	b26c      	sxtb	r4, r5
	for (i = 0; i < num_bytes; ++i) {
   1f948:	428c      	cmp	r4, r1
   1f94a:	f105 0501 	add.w	r5, r5, #1
   1f94e:	db00      	blt.n	1f952 <uECC_vli_nativeToBytes+0x12>
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
	}
}
   1f950:	bdf0      	pop	{r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   1f952:	1b3b      	subs	r3, r7, r4
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
   1f954:	f023 0603 	bic.w	r6, r3, #3
   1f958:	f003 0303 	and.w	r3, r3, #3
   1f95c:	5996      	ldr	r6, [r2, r6]
   1f95e:	00db      	lsls	r3, r3, #3
   1f960:	fa26 f303 	lsr.w	r3, r6, r3
   1f964:	5503      	strb	r3, [r0, r4]
	for (i = 0; i < num_bytes; ++i) {
   1f966:	e7ee      	b.n	1f946 <uECC_vli_nativeToBytes+0x6>

0001f968 <uECC_vli_bytesToNative>:

/* Converts big-endian bytes to an integer in uECC native format. */
void uECC_vli_bytesToNative(unsigned int *native, const uint8_t *bytes,
			    int num_bytes)
{
   1f968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f96a:	460e      	mov	r6, r1
	wordcount_t i;
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   1f96c:	1cd1      	adds	r1, r2, #3
   1f96e:	bf48      	it	mi
   1f970:	1d91      	addmi	r1, r2, #6
   1f972:	f341 0187 	sbfx	r1, r1, #2, #8
{
   1f976:	4614      	mov	r4, r2
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   1f978:	f7ff fae0 	bl	1ef3c <uECC_vli_clear>
	for (i = 0; i < num_bytes; ++i) {
   1f97c:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   1f97e:	1e67      	subs	r7, r4, #1
   1f980:	b26a      	sxtb	r2, r5
	for (i = 0; i < num_bytes; ++i) {
   1f982:	42a2      	cmp	r2, r4
   1f984:	f105 0501 	add.w	r5, r5, #1
   1f988:	db00      	blt.n	1f98c <uECC_vli_bytesToNative+0x24>
		native[b / uECC_WORD_SIZE] |=
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
  	}
}
   1f98a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   1f98c:	1abb      	subs	r3, r7, r2
		native[b / uECC_WORD_SIZE] |=
   1f98e:	f023 0103 	bic.w	r1, r3, #3
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
   1f992:	5cb2      	ldrb	r2, [r6, r2]
   1f994:	f003 0303 	and.w	r3, r3, #3
   1f998:	00db      	lsls	r3, r3, #3
   1f99a:	fa02 f303 	lsl.w	r3, r2, r3
		native[b / uECC_WORD_SIZE] |=
   1f99e:	5842      	ldr	r2, [r0, r1]
   1f9a0:	431a      	orrs	r2, r3
   1f9a2:	5042      	str	r2, [r0, r1]
	for (i = 0; i < num_bytes; ++i) {
   1f9a4:	e7ec      	b.n	1f980 <uECC_vli_bytesToNative+0x18>

0001f9a6 <uECC_valid_point>:
	return 0;
}


int uECC_valid_point(const uECC_word_t *point, uECC_Curve curve)
{
   1f9a6:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f9a8:	b091      	sub	sp, #68	; 0x44
	uECC_word_t tmp1[NUM_ECC_WORDS];
	uECC_word_t tmp2[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   1f9aa:	f991 6000 	ldrsb.w	r6, [r1]
{
   1f9ae:	4605      	mov	r5, r0
   1f9b0:	460c      	mov	r4, r1

	/* The point at infinity is invalid. */
	if (EccPoint_isZero(point, curve)) {
   1f9b2:	f7ff fe17 	bl	1f5e4 <EccPoint_isZero>
   1f9b6:	bb28      	cbnz	r0, 1fa04 <uECC_valid_point+0x5e>
		return -1;
	}

	/* x and y must be smaller than p. */
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   1f9b8:	1d27      	adds	r7, r4, #4
   1f9ba:	4632      	mov	r2, r6
   1f9bc:	4629      	mov	r1, r5
   1f9be:	4638      	mov	r0, r7
   1f9c0:	f7ff fb0d 	bl	1efde <uECC_vli_cmp_unsafe>
   1f9c4:	2801      	cmp	r0, #1
   1f9c6:	d120      	bne.n	1fa0a <uECC_valid_point+0x64>
		uECC_vli_cmp_unsafe(curve->p, point + num_words, num_words) != 1) {
   1f9c8:	eb05 0186 	add.w	r1, r5, r6, lsl #2
   1f9cc:	4632      	mov	r2, r6
   1f9ce:	4638      	mov	r0, r7
   1f9d0:	f7ff fb05 	bl	1efde <uECC_vli_cmp_unsafe>
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   1f9d4:	2801      	cmp	r0, #1
   1f9d6:	d118      	bne.n	1fa0a <uECC_valid_point+0x64>
		return -2;
	}

	uECC_vli_modSquare_fast(tmp1, point + num_words, curve);
   1f9d8:	4622      	mov	r2, r4
   1f9da:	4668      	mov	r0, sp
   1f9dc:	f7ff fc15 	bl	1f20a <uECC_vli_modSquare_fast>
	curve->x_side(tmp2, point, curve); /* tmp2 = x^3 + ax + b */
   1f9e0:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   1f9e4:	4622      	mov	r2, r4
   1f9e6:	4629      	mov	r1, r5
   1f9e8:	a808      	add	r0, sp, #32
   1f9ea:	4798      	blx	r3

	/* Make sure that y^2 == x^3 + ax + b */
	if (uECC_vli_equal(tmp1, tmp2, num_words) != 0)
   1f9ec:	4632      	mov	r2, r6
   1f9ee:	a908      	add	r1, sp, #32
   1f9f0:	4668      	mov	r0, sp
   1f9f2:	f7ff fb0b 	bl	1f00c <uECC_vli_equal>
   1f9f6:	2800      	cmp	r0, #0
		return -3;
   1f9f8:	bf0c      	ite	eq
   1f9fa:	2000      	moveq	r0, #0
   1f9fc:	f06f 0002 	mvnne.w	r0, #2

	return 0;
}
   1fa00:	b011      	add	sp, #68	; 0x44
   1fa02:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
   1fa04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1fa08:	e7fa      	b.n	1fa00 <uECC_valid_point+0x5a>
		return -2;
   1fa0a:	f06f 0001 	mvn.w	r0, #1
   1fa0e:	e7f7      	b.n	1fa00 <uECC_valid_point+0x5a>

0001fa10 <uECC_valid_public_key>:

int uECC_valid_public_key(const uint8_t *public_key, uECC_Curve curve)
{
   1fa10:	b570      	push	{r4, r5, r6, lr}
   1fa12:	460c      	mov	r4, r1
   1fa14:	b090      	sub	sp, #64	; 0x40

	uECC_word_t _public[NUM_ECC_WORDS * 2];

	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
	uECC_vli_bytesToNative(
	_public + curve->num_words,
   1fa16:	4626      	mov	r6, r4
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   1fa18:	f991 2001 	ldrsb.w	r2, [r1, #1]
{
   1fa1c:	4605      	mov	r5, r0
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   1fa1e:	4601      	mov	r1, r0
   1fa20:	4668      	mov	r0, sp
   1fa22:	f7ff ffa1 	bl	1f968 <uECC_vli_bytesToNative>
	public_key + curve->num_bytes,
   1fa26:	f994 2001 	ldrsb.w	r2, [r4, #1]
	_public + curve->num_words,
   1fa2a:	f916 0b44 	ldrsb.w	r0, [r6], #68
	uECC_vli_bytesToNative(
   1fa2e:	18a9      	adds	r1, r5, r2
   1fa30:	eb0d 0080 	add.w	r0, sp, r0, lsl #2
   1fa34:	f7ff ff98 	bl	1f968 <uECC_vli_bytesToNative>
	curve->num_bytes);

	if (uECC_vli_cmp_unsafe(_public, curve->G, NUM_ECC_WORDS * 2) == 0) {
   1fa38:	2210      	movs	r2, #16
   1fa3a:	4631      	mov	r1, r6
   1fa3c:	4668      	mov	r0, sp
   1fa3e:	f7ff face 	bl	1efde <uECC_vli_cmp_unsafe>
   1fa42:	b128      	cbz	r0, 1fa50 <uECC_valid_public_key+0x40>
		return -4;
	}

	return uECC_valid_point(_public, curve);
   1fa44:	4621      	mov	r1, r4
   1fa46:	4668      	mov	r0, sp
   1fa48:	f7ff ffad 	bl	1f9a6 <uECC_valid_point>
}
   1fa4c:	b010      	add	sp, #64	; 0x40
   1fa4e:	bd70      	pop	{r4, r5, r6, pc}
		return -4;
   1fa50:	f06f 0003 	mvn.w	r0, #3
   1fa54:	e7fa      	b.n	1fa4c <uECC_valid_public_key+0x3c>

0001fa56 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   1fa56:	78cb      	ldrb	r3, [r1, #3]
   1fa58:	7802      	ldrb	r2, [r0, #0]
   1fa5a:	4053      	eors	r3, r2
   1fa5c:	7003      	strb	r3, [r0, #0]
   1fa5e:	884b      	ldrh	r3, [r1, #2]
   1fa60:	7842      	ldrb	r2, [r0, #1]
   1fa62:	4053      	eors	r3, r2
   1fa64:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   1fa66:	680a      	ldr	r2, [r1, #0]
   1fa68:	7883      	ldrb	r3, [r0, #2]
   1fa6a:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1fa6e:	7083      	strb	r3, [r0, #2]
   1fa70:	680a      	ldr	r2, [r1, #0]
   1fa72:	78c3      	ldrb	r3, [r0, #3]
   1fa74:	4053      	eors	r3, r2
   1fa76:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   1fa78:	79cb      	ldrb	r3, [r1, #7]
   1fa7a:	7902      	ldrb	r2, [r0, #4]
   1fa7c:	4053      	eors	r3, r2
   1fa7e:	7103      	strb	r3, [r0, #4]
   1fa80:	88cb      	ldrh	r3, [r1, #6]
   1fa82:	7942      	ldrb	r2, [r0, #5]
   1fa84:	4053      	eors	r3, r2
   1fa86:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   1fa88:	684a      	ldr	r2, [r1, #4]
   1fa8a:	7983      	ldrb	r3, [r0, #6]
   1fa8c:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1fa90:	7183      	strb	r3, [r0, #6]
   1fa92:	684a      	ldr	r2, [r1, #4]
   1fa94:	79c3      	ldrb	r3, [r0, #7]
   1fa96:	4053      	eors	r3, r2
   1fa98:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   1fa9a:	7acb      	ldrb	r3, [r1, #11]
   1fa9c:	7a02      	ldrb	r2, [r0, #8]
   1fa9e:	4053      	eors	r3, r2
   1faa0:	7203      	strb	r3, [r0, #8]
   1faa2:	7a42      	ldrb	r2, [r0, #9]
   1faa4:	894b      	ldrh	r3, [r1, #10]
   1faa6:	4053      	eors	r3, r2
   1faa8:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   1faaa:	688a      	ldr	r2, [r1, #8]
   1faac:	7a83      	ldrb	r3, [r0, #10]
   1faae:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1fab2:	7283      	strb	r3, [r0, #10]
   1fab4:	688a      	ldr	r2, [r1, #8]
   1fab6:	7ac3      	ldrb	r3, [r0, #11]
   1fab8:	4053      	eors	r3, r2
   1faba:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   1fabc:	7bcb      	ldrb	r3, [r1, #15]
   1fabe:	7b02      	ldrb	r2, [r0, #12]
   1fac0:	4053      	eors	r3, r2
   1fac2:	7303      	strb	r3, [r0, #12]
   1fac4:	89cb      	ldrh	r3, [r1, #14]
   1fac6:	7b42      	ldrb	r2, [r0, #13]
   1fac8:	4053      	eors	r3, r2
   1faca:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   1facc:	68ca      	ldr	r2, [r1, #12]
   1face:	7b83      	ldrb	r3, [r0, #14]
   1fad0:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1fad4:	7383      	strb	r3, [r0, #14]
   1fad6:	68ca      	ldr	r2, [r1, #12]
   1fad8:	7bc3      	ldrb	r3, [r0, #15]
   1fada:	4053      	eors	r3, r2
   1fadc:	73c3      	strb	r3, [r0, #15]
}
   1fade:	4770      	bx	lr

0001fae0 <shift_rows>:
{
   1fae0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   1fae2:	7802      	ldrb	r2, [r0, #0]
   1fae4:	f88d 2000 	strb.w	r2, [sp]
   1fae8:	7942      	ldrb	r2, [r0, #5]
   1faea:	f88d 2001 	strb.w	r2, [sp, #1]
   1faee:	7a82      	ldrb	r2, [r0, #10]
   1faf0:	f88d 2002 	strb.w	r2, [sp, #2]
   1faf4:	7bc2      	ldrb	r2, [r0, #15]
   1faf6:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   1fafa:	7902      	ldrb	r2, [r0, #4]
   1fafc:	f88d 2004 	strb.w	r2, [sp, #4]
   1fb00:	7a42      	ldrb	r2, [r0, #9]
   1fb02:	f88d 2005 	strb.w	r2, [sp, #5]
   1fb06:	7b82      	ldrb	r2, [r0, #14]
   1fb08:	f88d 2006 	strb.w	r2, [sp, #6]
   1fb0c:	78c2      	ldrb	r2, [r0, #3]
   1fb0e:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   1fb12:	7a02      	ldrb	r2, [r0, #8]
   1fb14:	f88d 2008 	strb.w	r2, [sp, #8]
   1fb18:	7b42      	ldrb	r2, [r0, #13]
   1fb1a:	f88d 2009 	strb.w	r2, [sp, #9]
   1fb1e:	7882      	ldrb	r2, [r0, #2]
   1fb20:	f88d 200a 	strb.w	r2, [sp, #10]
   1fb24:	79c2      	ldrb	r2, [r0, #7]
   1fb26:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   1fb2a:	7b02      	ldrb	r2, [r0, #12]
   1fb2c:	f88d 200c 	strb.w	r2, [sp, #12]
   1fb30:	7842      	ldrb	r2, [r0, #1]
   1fb32:	7ac3      	ldrb	r3, [r0, #11]
   1fb34:	f88d 200d 	strb.w	r2, [sp, #13]
   1fb38:	7982      	ldrb	r2, [r0, #6]
   1fb3a:	f88d 200e 	strb.w	r2, [sp, #14]
   1fb3e:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1fb42:	2310      	movs	r3, #16
   1fb44:	466a      	mov	r2, sp
   1fb46:	4619      	mov	r1, r3
   1fb48:	f7ff f87b 	bl	1ec42 <_copy>
}
   1fb4c:	b005      	add	sp, #20
   1fb4e:	f85d fb04 	ldr.w	pc, [sp], #4

0001fb52 <mult_row_column>:
{
   1fb52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fb54:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1fb56:	7808      	ldrb	r0, [r1, #0]
{
   1fb58:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1fb5a:	f7ff f881 	bl	1ec60 <_double_byte>
   1fb5e:	4605      	mov	r5, r0
   1fb60:	7860      	ldrb	r0, [r4, #1]
   1fb62:	f7ff f87d 	bl	1ec60 <_double_byte>
   1fb66:	78a2      	ldrb	r2, [r4, #2]
   1fb68:	7863      	ldrb	r3, [r4, #1]
   1fb6a:	4053      	eors	r3, r2
   1fb6c:	78e2      	ldrb	r2, [r4, #3]
   1fb6e:	4053      	eors	r3, r2
   1fb70:	405d      	eors	r5, r3
   1fb72:	4045      	eors	r5, r0
   1fb74:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   1fb76:	7860      	ldrb	r0, [r4, #1]
   1fb78:	7827      	ldrb	r7, [r4, #0]
   1fb7a:	f7ff f871 	bl	1ec60 <_double_byte>
   1fb7e:	4605      	mov	r5, r0
   1fb80:	78a0      	ldrb	r0, [r4, #2]
   1fb82:	f7ff f86d 	bl	1ec60 <_double_byte>
   1fb86:	78a3      	ldrb	r3, [r4, #2]
   1fb88:	405f      	eors	r7, r3
   1fb8a:	78e3      	ldrb	r3, [r4, #3]
   1fb8c:	405f      	eors	r7, r3
   1fb8e:	407d      	eors	r5, r7
   1fb90:	4045      	eors	r5, r0
   1fb92:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   1fb94:	78a0      	ldrb	r0, [r4, #2]
   1fb96:	7865      	ldrb	r5, [r4, #1]
   1fb98:	7827      	ldrb	r7, [r4, #0]
   1fb9a:	f7ff f861 	bl	1ec60 <_double_byte>
   1fb9e:	406f      	eors	r7, r5
   1fba0:	4605      	mov	r5, r0
   1fba2:	78e0      	ldrb	r0, [r4, #3]
   1fba4:	f7ff f85c 	bl	1ec60 <_double_byte>
   1fba8:	78e3      	ldrb	r3, [r4, #3]
   1fbaa:	405f      	eors	r7, r3
   1fbac:	407d      	eors	r5, r7
   1fbae:	4045      	eors	r5, r0
   1fbb0:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   1fbb2:	7820      	ldrb	r0, [r4, #0]
   1fbb4:	f7ff f854 	bl	1ec60 <_double_byte>
   1fbb8:	7863      	ldrb	r3, [r4, #1]
   1fbba:	7825      	ldrb	r5, [r4, #0]
   1fbbc:	405d      	eors	r5, r3
   1fbbe:	78a3      	ldrb	r3, [r4, #2]
   1fbc0:	405d      	eors	r5, r3
   1fbc2:	4045      	eors	r5, r0
   1fbc4:	78e0      	ldrb	r0, [r4, #3]
   1fbc6:	f7ff f84b 	bl	1ec60 <_double_byte>
   1fbca:	b2ed      	uxtb	r5, r5
   1fbcc:	4045      	eors	r5, r0
   1fbce:	70f5      	strb	r5, [r6, #3]
}
   1fbd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001fbd2 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   1fbd2:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1fbd4:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   1fbd6:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1fbd8:	f912 3b10 	ldrsb.w	r3, [r2], #16
   1fbdc:	2b00      	cmp	r3, #0
   1fbde:	bfb4      	ite	lt
   1fbe0:	2387      	movlt	r3, #135	; 0x87
   1fbe2:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   1fbe4:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   1fbe8:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   1fbec:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   1fbee:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   1fbf2:	d002      	beq.n	1fbfa <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   1fbf4:	7813      	ldrb	r3, [r2, #0]
   1fbf6:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   1fbf8:	e7f4      	b.n	1fbe4 <gf_double+0x12>
	}
}
   1fbfa:	bd10      	pop	{r4, pc}

0001fbfc <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   1fbfc:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   1fbfe:	b120      	cbz	r0, 1fc0a <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   1fc00:	2258      	movs	r2, #88	; 0x58
   1fc02:	2100      	movs	r1, #0
   1fc04:	f7ff f82a 	bl	1ec5c <_set>
   1fc08:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   1fc0a:	bd08      	pop	{r3, pc}

0001fc0c <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   1fc0c:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1fc0e:	4604      	mov	r4, r0
   1fc10:	b188      	cbz	r0, 1fc36 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1fc12:	2210      	movs	r2, #16
   1fc14:	2100      	movs	r1, #0
   1fc16:	f7ff f821 	bl	1ec5c <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   1fc1a:	2210      	movs	r2, #16
   1fc1c:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1fc20:	2100      	movs	r1, #0
   1fc22:	f7ff f81b 	bl	1ec5c <_set>
	s->leftover_offset = 0;
   1fc26:	2300      	movs	r3, #0
   1fc28:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   1fc2a:	2200      	movs	r2, #0
   1fc2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1fc30:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   1fc34:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   1fc36:	bd10      	pop	{r4, pc}

0001fc38 <tc_cmac_setup>:
{
   1fc38:	b570      	push	{r4, r5, r6, lr}
   1fc3a:	460d      	mov	r5, r1
   1fc3c:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   1fc3e:	4604      	mov	r4, r0
   1fc40:	b310      	cbz	r0, 1fc88 <tc_cmac_setup+0x50>
   1fc42:	b311      	cbz	r1, 1fc8a <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   1fc44:	2258      	movs	r2, #88	; 0x58
   1fc46:	2100      	movs	r1, #0
   1fc48:	f7ff f808 	bl	1ec5c <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   1fc4c:	4629      	mov	r1, r5
	s->sched = sched;
   1fc4e:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   1fc50:	4630      	mov	r0, r6
   1fc52:	f7e7 faeb 	bl	722c <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1fc56:	2210      	movs	r2, #16
   1fc58:	2100      	movs	r1, #0
   1fc5a:	4620      	mov	r0, r4
   1fc5c:	f7fe fffe 	bl	1ec5c <_set>
	gf_double (s->K1, s->iv);
   1fc60:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   1fc64:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1fc66:	4621      	mov	r1, r4
   1fc68:	4620      	mov	r0, r4
   1fc6a:	f7e7 fb31 	bl	72d0 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   1fc6e:	4621      	mov	r1, r4
   1fc70:	4628      	mov	r0, r5
   1fc72:	f7ff ffae 	bl	1fbd2 <gf_double>
	gf_double (s->K2, s->K1);
   1fc76:	4629      	mov	r1, r5
   1fc78:	f104 0020 	add.w	r0, r4, #32
   1fc7c:	f7ff ffa9 	bl	1fbd2 <gf_double>
	tc_cmac_init(s);
   1fc80:	4620      	mov	r0, r4
   1fc82:	f7ff ffc3 	bl	1fc0c <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   1fc86:	2001      	movs	r0, #1
}
   1fc88:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1fc8a:	4608      	mov	r0, r1
   1fc8c:	e7fc      	b.n	1fc88 <tc_cmac_setup+0x50>

0001fc8e <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   1fc8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fc92:	460d      	mov	r5, r1
   1fc94:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1fc96:	4604      	mov	r4, r0
   1fc98:	2800      	cmp	r0, #0
   1fc9a:	d062      	beq.n	1fd62 <tc_cmac_update+0xd4>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   1fc9c:	b912      	cbnz	r2, 1fca4 <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   1fc9e:	2001      	movs	r0, #1
}
   1fca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   1fca4:	2900      	cmp	r1, #0
   1fca6:	d05c      	beq.n	1fd62 <tc_cmac_update+0xd4>
	if (s->countdown == 0) {
   1fca8:	e9d0 0114 	ldrd	r0, r1, [r0, #80]	; 0x50
   1fcac:	ea50 0301 	orrs.w	r3, r0, r1
   1fcb0:	d057      	beq.n	1fd62 <tc_cmac_update+0xd4>
	s->countdown--;
   1fcb2:	f110 32ff 	adds.w	r2, r0, #4294967295	; 0xffffffff
	if (s->leftover_offset > 0) {
   1fcb6:	f8d4 8044 	ldr.w	r8, [r4, #68]	; 0x44
	s->countdown--;
   1fcba:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
   1fcbe:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
	if (s->leftover_offset > 0) {
   1fcc2:	f1b8 0f00 	cmp.w	r8, #0
   1fcc6:	d02a      	beq.n	1fd1e <tc_cmac_update+0x90>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   1fcc8:	f1c8 0710 	rsb	r7, r8, #16
		if (data_length < remaining_space) {
   1fccc:	f108 0030 	add.w	r0, r8, #48	; 0x30
   1fcd0:	42be      	cmp	r6, r7
   1fcd2:	4420      	add	r0, r4
   1fcd4:	d208      	bcs.n	1fce8 <tc_cmac_update+0x5a>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1fcd6:	462a      	mov	r2, r5
   1fcd8:	4633      	mov	r3, r6
   1fcda:	4631      	mov	r1, r6
   1fcdc:	f7fe ffb1 	bl	1ec42 <_copy>
			s->leftover_offset += data_length;
   1fce0:	6c62      	ldr	r2, [r4, #68]	; 0x44
   1fce2:	4432      	add	r2, r6
   1fce4:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   1fce6:	e7da      	b.n	1fc9e <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   1fce8:	463b      	mov	r3, r7
   1fcea:	462a      	mov	r2, r5
   1fcec:	4639      	mov	r1, r7
   1fcee:	f7fe ffa8 	bl	1ec42 <_copy>
		data_length -= remaining_space;
   1fcf2:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   1fcf4:	2300      	movs	r3, #0
   1fcf6:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   1fcf8:	4446      	add	r6, r8
		data += remaining_space;
   1fcfa:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1fcfc:	1e63      	subs	r3, r4, #1
   1fcfe:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   1fd02:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1fd06:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1fd0a:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   1fd0c:	ea82 0200 	eor.w	r2, r2, r0
   1fd10:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1fd12:	d1f6      	bne.n	1fd02 <tc_cmac_update+0x74>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1fd14:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1fd16:	4621      	mov	r1, r4
   1fd18:	4620      	mov	r0, r4
   1fd1a:	f7e7 fad9 	bl	72d0 <tc_aes_encrypt>
   1fd1e:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   1fd22:	2e10      	cmp	r6, #16
   1fd24:	d80a      	bhi.n	1fd3c <tc_cmac_update+0xae>
	if (data_length > 0) {
   1fd26:	2e00      	cmp	r6, #0
   1fd28:	d0b9      	beq.n	1fc9e <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   1fd2a:	4633      	mov	r3, r6
   1fd2c:	462a      	mov	r2, r5
   1fd2e:	4631      	mov	r1, r6
   1fd30:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1fd34:	f7fe ff85 	bl	1ec42 <_copy>
		s->leftover_offset = data_length;
   1fd38:	6466      	str	r6, [r4, #68]	; 0x44
   1fd3a:	e7b0      	b.n	1fc9e <tc_cmac_update+0x10>
   1fd3c:	1e63      	subs	r3, r4, #1
   1fd3e:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   1fd40:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1fd44:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1fd48:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   1fd4a:	ea82 0200 	eor.w	r2, r2, r0
   1fd4e:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1fd50:	d1f6      	bne.n	1fd40 <tc_cmac_update+0xb2>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1fd52:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1fd54:	4621      	mov	r1, r4
   1fd56:	4620      	mov	r0, r4
   1fd58:	f7e7 faba 	bl	72d0 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   1fd5c:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   1fd5e:	3e10      	subs	r6, #16
   1fd60:	e7df      	b.n	1fd22 <tc_cmac_update+0x94>
		return TC_CRYPTO_FAIL;
   1fd62:	2000      	movs	r0, #0
   1fd64:	e79c      	b.n	1fca0 <tc_cmac_update+0x12>

0001fd66 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   1fd66:	b570      	push	{r4, r5, r6, lr}
   1fd68:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   1fd6a:	4605      	mov	r5, r0
   1fd6c:	b1e8      	cbz	r0, 1fdaa <tc_cmac_final+0x44>
   1fd6e:	b369      	cbz	r1, 1fdcc <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   1fd70:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   1fd72:	2a10      	cmp	r2, #16
   1fd74:	d11a      	bne.n	1fdac <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   1fd76:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1fd78:	1e63      	subs	r3, r4, #1
   1fd7a:	3901      	subs	r1, #1
   1fd7c:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1fd80:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1fd84:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   1fd88:	4072      	eors	r2, r6
   1fd8a:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1fd8e:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1fd90:	ea82 0206 	eor.w	r2, r2, r6
   1fd94:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1fd96:	d1f3      	bne.n	1fd80 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   1fd98:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1fd9a:	4621      	mov	r1, r4
   1fd9c:	4628      	mov	r0, r5
   1fd9e:	f7e7 fa97 	bl	72d0 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   1fda2:	4620      	mov	r0, r4
   1fda4:	f7ff ff2a 	bl	1fbfc <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   1fda8:	2001      	movs	r0, #1
}
   1fdaa:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   1fdac:	f102 0030 	add.w	r0, r2, #48	; 0x30
   1fdb0:	2100      	movs	r1, #0
   1fdb2:	f1c2 0210 	rsb	r2, r2, #16
   1fdb6:	4420      	add	r0, r4
   1fdb8:	f7fe ff50 	bl	1ec5c <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   1fdbc:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1fdbe:	4423      	add	r3, r4
   1fdc0:	2280      	movs	r2, #128	; 0x80
   1fdc2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   1fdc6:	f104 0120 	add.w	r1, r4, #32
   1fdca:	e7d5      	b.n	1fd78 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   1fdcc:	4608      	mov	r0, r1
   1fdce:	e7ec      	b.n	1fdaa <tc_cmac_final+0x44>

0001fdd0 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   1fdd0:	2100      	movs	r1, #0
   1fdd2:	2001      	movs	r0, #1
   1fdd4:	f7e7 bbe4 	b.w	75a0 <z_arm_fatal_error>

0001fdd8 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   1fdd8:	4601      	mov	r1, r0
			reason = K_ERR_KERNEL_OOPS;
		}
	}

#endif /* CONFIG_USERSPACE */
	z_arm_fatal_error(reason, esf);
   1fdda:	6800      	ldr	r0, [r0, #0]
   1fddc:	f7e7 bbe0 	b.w	75a0 <z_arm_fatal_error>

0001fde0 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   1fde0:	b508      	push	{r3, lr}
	handler();
   1fde2:	f7e7 fc15 	bl	7610 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   1fde6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   1fdea:	f7e7 be83 	b.w	7af4 <z_arm_exc_exit>

0001fdee <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   1fdee:	3901      	subs	r1, #1
   1fdf0:	4603      	mov	r3, r0
   1fdf2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1fdf6:	b90a      	cbnz	r2, 1fdfc <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   1fdf8:	701a      	strb	r2, [r3, #0]

	return dest;
}
   1fdfa:	4770      	bx	lr
		*d = *s;
   1fdfc:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   1fe00:	e7f7      	b.n	1fdf2 <strcpy+0x4>

0001fe02 <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
   1fe02:	b570      	push	{r4, r5, r6, lr}
   1fe04:	3901      	subs	r1, #1
   1fe06:	4605      	mov	r5, r0
   1fe08:	462c      	mov	r4, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   1fe0a:	b142      	cbz	r2, 1fe1e <strncpy+0x1c>
   1fe0c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   1fe10:	1e56      	subs	r6, r2, #1
   1fe12:	b92b      	cbnz	r3, 1fe20 <strncpy+0x1e>
   1fe14:	442a      	add	r2, r5
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
   1fe16:	f804 3b01 	strb.w	r3, [r4], #1
	while (n > 0) {
   1fe1a:	42a2      	cmp	r2, r4
   1fe1c:	d1fb      	bne.n	1fe16 <strncpy+0x14>
		d++;
		n--;
	}

	return dest;
}
   1fe1e:	bd70      	pop	{r4, r5, r6, pc}
		*d = *s;
   1fe20:	f805 3b01 	strb.w	r3, [r5], #1
		n--;
   1fe24:	4632      	mov	r2, r6
   1fe26:	e7ef      	b.n	1fe08 <strncpy+0x6>

0001fe28 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   1fe28:	4603      	mov	r3, r0
	size_t n = 0;
   1fe2a:	2000      	movs	r0, #0

	while (*s != '\0') {
   1fe2c:	5c1a      	ldrb	r2, [r3, r0]
   1fe2e:	b902      	cbnz	r2, 1fe32 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   1fe30:	4770      	bx	lr
		n++;
   1fe32:	3001      	adds	r0, #1
   1fe34:	e7fa      	b.n	1fe2c <strlen+0x4>

0001fe36 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   1fe36:	1e43      	subs	r3, r0, #1
   1fe38:	3901      	subs	r1, #1
   1fe3a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1fe3e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   1fe42:	4282      	cmp	r2, r0
   1fe44:	d101      	bne.n	1fe4a <strcmp+0x14>
   1fe46:	2a00      	cmp	r2, #0
   1fe48:	d1f7      	bne.n	1fe3a <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   1fe4a:	1a10      	subs	r0, r2, r0
   1fe4c:	4770      	bx	lr

0001fe4e <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   1fe4e:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   1fe50:	b15a      	cbz	r2, 1fe6a <memcmp+0x1c>
   1fe52:	3901      	subs	r1, #1
   1fe54:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   1fe56:	f810 2b01 	ldrb.w	r2, [r0], #1
   1fe5a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   1fe5e:	42a0      	cmp	r0, r4
   1fe60:	d001      	beq.n	1fe66 <memcmp+0x18>
   1fe62:	429a      	cmp	r2, r3
   1fe64:	d0f7      	beq.n	1fe56 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   1fe66:	1ad0      	subs	r0, r2, r3
}
   1fe68:	bd10      	pop	{r4, pc}
		return 0;
   1fe6a:	4610      	mov	r0, r2
   1fe6c:	e7fc      	b.n	1fe68 <memcmp+0x1a>

0001fe6e <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   1fe6e:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   1fe70:	ea81 0400 	eor.w	r4, r1, r0
   1fe74:	07a5      	lsls	r5, r4, #30
   1fe76:	4603      	mov	r3, r0
   1fe78:	d00b      	beq.n	1fe92 <memcpy+0x24>
   1fe7a:	3b01      	subs	r3, #1
   1fe7c:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   1fe7e:	4291      	cmp	r1, r2
   1fe80:	d11b      	bne.n	1feba <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   1fe82:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   1fe84:	2a00      	cmp	r2, #0
   1fe86:	d0fc      	beq.n	1fe82 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   1fe88:	f811 4b01 	ldrb.w	r4, [r1], #1
   1fe8c:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
   1fe90:	3a01      	subs	r2, #1
		while (((uintptr_t)d_byte) & mask) {
   1fe92:	079c      	lsls	r4, r3, #30
   1fe94:	d1f6      	bne.n	1fe84 <memcpy+0x16>
   1fe96:	f022 0403 	bic.w	r4, r2, #3
   1fe9a:	1f1d      	subs	r5, r3, #4
   1fe9c:	0896      	lsrs	r6, r2, #2
   1fe9e:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
   1fea0:	42b9      	cmp	r1, r7
   1fea2:	d105      	bne.n	1feb0 <memcpy+0x42>
   1fea4:	f06f 0503 	mvn.w	r5, #3
   1fea8:	fb05 2206 	mla	r2, r5, r6, r2
   1feac:	4423      	add	r3, r4
   1feae:	e7e4      	b.n	1fe7a <memcpy+0xc>
			*(d_word++) = *(s_word++);
   1feb0:	f851 cb04 	ldr.w	ip, [r1], #4
   1feb4:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
   1feb8:	e7f2      	b.n	1fea0 <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
   1feba:	f811 4b01 	ldrb.w	r4, [r1], #1
   1febe:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   1fec2:	e7dc      	b.n	1fe7e <memcpy+0x10>

0001fec4 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
   1fec4:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   1fec6:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
   1fec8:	4603      	mov	r3, r0

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   1feca:	079c      	lsls	r4, r3, #30
   1fecc:	d111      	bne.n	1fef2 <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
   1fece:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
   1fed2:	f022 0603 	bic.w	r6, r2, #3
   1fed6:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   1feda:	441e      	add	r6, r3
   1fedc:	0894      	lsrs	r4, r2, #2
   1fede:	42b3      	cmp	r3, r6
   1fee0:	d10d      	bne.n	1fefe <memset+0x3a>
   1fee2:	f06f 0503 	mvn.w	r5, #3
   1fee6:	fb05 2204 	mla	r2, r5, r4, r2
   1feea:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   1feec:	4293      	cmp	r3, r2
   1feee:	d109      	bne.n	1ff04 <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   1fef0:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
   1fef2:	2a00      	cmp	r2, #0
   1fef4:	d0fc      	beq.n	1fef0 <memset+0x2c>
		*(d_byte++) = c_byte;
   1fef6:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1fefa:	3a01      	subs	r2, #1
   1fefc:	e7e5      	b.n	1feca <memset+0x6>
		*(d_word++) = c_word;
   1fefe:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
   1ff02:	e7ec      	b.n	1fede <memset+0x1a>
		*(d_byte++) = c_byte;
   1ff04:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1ff08:	e7f0      	b.n	1feec <memset+0x28>

0001ff0a <_stdout_hook_default>:
}
   1ff0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ff0e:	4770      	bx	lr

0001ff10 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   1ff10:	f7fc bcce 	b.w	1c8b0 <SystemInit>

0001ff14 <ah>:
	return bt_encrypt_le(key, plaintext, enc_data);
#endif
}

static int ah(const uint8_t irk[16], const uint8_t r[3], uint8_t out[3])
{
   1ff14:	b530      	push	{r4, r5, lr}
   1ff16:	b085      	sub	sp, #20
   1ff18:	4604      	mov	r4, r0
   1ff1a:	4615      	mov	r5, r2

	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   1ff1c:	4668      	mov	r0, sp
   1ff1e:	2203      	movs	r2, #3
   1ff20:	f7ff ffa5 	bl	1fe6e <memcpy>
	(void)memset(res + 3, 0, 13);
   1ff24:	220d      	movs	r2, #13
   1ff26:	2100      	movs	r1, #0
   1ff28:	f10d 0003 	add.w	r0, sp, #3
   1ff2c:	f7ff ffca 	bl	1fec4 <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   1ff30:	4620      	mov	r0, r4
   1ff32:	466a      	mov	r2, sp
   1ff34:	4669      	mov	r1, sp
   1ff36:	f7f3 f9c7 	bl	132c8 <bt_encrypt_le>

	err = internal_encrypt_le(irk, res, res);
	if (err) {
   1ff3a:	4604      	mov	r4, r0
   1ff3c:	b920      	cbnz	r0, 1ff48 <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
   1ff3e:	2203      	movs	r2, #3
   1ff40:	4669      	mov	r1, sp
   1ff42:	4628      	mov	r0, r5
   1ff44:	f7ff ff93 	bl	1fe6e <memcpy>

	return 0;
}
   1ff48:	4620      	mov	r0, r4
   1ff4a:	b005      	add	sp, #20
   1ff4c:	bd30      	pop	{r4, r5, pc}

0001ff4e <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   1ff4e:	b513      	push	{r0, r1, r4, lr}
   1ff50:	460c      	mov	r4, r1
	uint8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
   1ff52:	aa01      	add	r2, sp, #4
   1ff54:	3103      	adds	r1, #3
   1ff56:	f7ff ffdd 	bl	1ff14 <ah>
	if (err) {
   1ff5a:	b948      	cbnz	r0, 1ff70 <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
   1ff5c:	2203      	movs	r2, #3
   1ff5e:	a901      	add	r1, sp, #4
   1ff60:	4620      	mov	r0, r4
   1ff62:	f7ff ff74 	bl	1fe4e <memcmp>
   1ff66:	fab0 f080 	clz	r0, r0
   1ff6a:	0940      	lsrs	r0, r0, #5
}
   1ff6c:	b002      	add	sp, #8
   1ff6e:	bd10      	pop	{r4, pc}
		return false;
   1ff70:	2000      	movs	r0, #0
   1ff72:	e7fb      	b.n	1ff6c <bt_rpa_irk_matches+0x1e>

0001ff74 <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const uint8_t irk[16], bt_addr_t *rpa)
{
   1ff74:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = internal_rand(rpa->val + 3, 3);
   1ff76:	1cce      	adds	r6, r1, #3
{
   1ff78:	4605      	mov	r5, r0
   1ff7a:	460c      	mov	r4, r1
	return bt_rand(buf, len);
   1ff7c:	4630      	mov	r0, r6
   1ff7e:	2103      	movs	r1, #3
   1ff80:	f7f3 f9a0 	bl	132c4 <bt_rand>
	if (err) {
   1ff84:	b960      	cbnz	r0, 1ffa0 <bt_rpa_create+0x2c>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
   1ff86:	7963      	ldrb	r3, [r4, #5]
   1ff88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1ff8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1ff90:	7163      	strb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
   1ff92:	4622      	mov	r2, r4
   1ff94:	4631      	mov	r1, r6
   1ff96:	4628      	mov	r0, r5
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
   1ff98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = ah(irk, rpa->val + 3, rpa->val);
   1ff9c:	f7ff bfba 	b.w	1ff14 <ah>
}
   1ffa0:	bd70      	pop	{r4, r5, r6, pc}

0001ffa2 <send_cmd_status>:
{
   1ffa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   1ffa6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   1ffaa:	4606      	mov	r6, r0
   1ffac:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   1ffae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ffb2:	2100      	movs	r1, #0
   1ffb4:	200f      	movs	r0, #15
   1ffb6:	f7ea f987 	bl	a2c8 <bt_buf_get_evt>
	*(uint8_t *)net_buf_user_data(buf) = type;
   1ffba:	2701      	movs	r7, #1
	hdr = net_buf_add(buf, sizeof(*hdr));
   1ffbc:	f100 0808 	add.w	r8, r0, #8
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   1ffc0:	4604      	mov	r4, r0
   1ffc2:	7507      	strb	r7, [r0, #20]
	hdr = net_buf_add(buf, sizeof(*hdr));
   1ffc4:	2102      	movs	r1, #2
   1ffc6:	4640      	mov	r0, r8
   1ffc8:	f002 fae2 	bl	22590 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1ffcc:	230f      	movs	r3, #15
	hdr->len = sizeof(*evt);
   1ffce:	2104      	movs	r1, #4
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1ffd0:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*evt);
   1ffd2:	7041      	strb	r1, [r0, #1]
	evt = net_buf_add(buf, sizeof(*evt));
   1ffd4:	4640      	mov	r0, r8
   1ffd6:	f002 fadb 	bl	22590 <net_buf_simple_add>
	evt->ncmd = 1U;
   1ffda:	7047      	strb	r7, [r0, #1]
	evt->status = status;
   1ffdc:	7005      	strb	r5, [r0, #0]
	evt->opcode = sys_cpu_to_le16(opcode);
   1ffde:	8046      	strh	r6, [r0, #2]
	bt_recv_prio(buf);
   1ffe0:	4620      	mov	r0, r4
}
   1ffe2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_recv_prio(buf);
   1ffe6:	f7e9 be3d 	b.w	9c64 <bt_recv_prio>

0001ffea <sys_memcpy_swap.constprop.0>:
	for (; length > 0; length--) {
   1ffea:	f101 0320 	add.w	r3, r1, #32
   1ffee:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   1fff0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   1fff4:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   1fff8:	428b      	cmp	r3, r1
   1fffa:	d1f9      	bne.n	1fff0 <sys_memcpy_swap.constprop.0+0x6>
}
   1fffc:	4770      	bx	lr

0001fffe <default_CSPRNG>:
{
   1fffe:	b508      	push	{r3, lr}
	return !bt_rand(dst, len);
   20000:	f7f3 f960 	bl	132c4 <bt_rand>
}
   20004:	fab0 f080 	clz	r0, r0
   20008:	0940      	lsrs	r0, r0, #5
   2000a:	bd08      	pop	{r3, pc}

0002000c <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   2000c:	b510      	push	{r4, lr}
   2000e:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   20010:	7801      	ldrb	r1, [r0, #0]
   20012:	7822      	ldrb	r2, [r4, #0]
   20014:	428a      	cmp	r2, r1
{
   20016:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   20018:	d00e      	beq.n	20038 <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
   2001a:	4669      	mov	r1, sp
   2001c:	f7e8 f888 	bl	8130 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   20020:	a905      	add	r1, sp, #20
   20022:	4620      	mov	r0, r4
   20024:	f7e8 f884 	bl	8130 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   20028:	2210      	movs	r2, #16
   2002a:	f10d 0115 	add.w	r1, sp, #21
   2002e:	f10d 0001 	add.w	r0, sp, #1
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   20032:	f7ff ff0c 	bl	1fe4e <memcmp>
   20036:	e007      	b.n	20048 <bt_uuid_cmp+0x3c>
	switch (u1->type) {
   20038:	2a01      	cmp	r2, #1
   2003a:	d007      	beq.n	2004c <bt_uuid_cmp+0x40>
   2003c:	2a02      	cmp	r2, #2
   2003e:	d008      	beq.n	20052 <bt_uuid_cmp+0x46>
   20040:	b95a      	cbnz	r2, 2005a <bt_uuid_cmp+0x4e>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   20042:	8840      	ldrh	r0, [r0, #2]
   20044:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   20046:	1ac0      	subs	r0, r0, r3
	}

	return -EINVAL;
}
   20048:	b00a      	add	sp, #40	; 0x28
   2004a:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   2004c:	6840      	ldr	r0, [r0, #4]
   2004e:	6863      	ldr	r3, [r4, #4]
   20050:	e7f9      	b.n	20046 <bt_uuid_cmp+0x3a>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   20052:	2210      	movs	r2, #16
   20054:	1c61      	adds	r1, r4, #1
   20056:	3001      	adds	r0, #1
   20058:	e7eb      	b.n	20032 <bt_uuid_cmp+0x26>
	switch (u1->type) {
   2005a:	f06f 0015 	mvn.w	r0, #21
   2005e:	e7f3      	b.n	20048 <bt_uuid_cmp+0x3c>

00020060 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   20060:	2a04      	cmp	r2, #4
{
   20062:	b538      	push	{r3, r4, r5, lr}
   20064:	460c      	mov	r4, r1
	switch (data_len) {
   20066:	d00d      	beq.n	20084 <bt_uuid_create+0x24>
   20068:	2a10      	cmp	r2, #16
   2006a:	d019      	beq.n	200a0 <bt_uuid_create+0x40>
   2006c:	2a02      	cmp	r2, #2
   2006e:	f04f 0300 	mov.w	r3, #0
   20072:	d11b      	bne.n	200ac <bt_uuid_create+0x4c>
	case 2:
		uuid->type = BT_UUID_TYPE_16;
   20074:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   20076:	784a      	ldrb	r2, [r1, #1]
   20078:	780b      	ldrb	r3, [r1, #0]
   2007a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   2007e:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   20080:	2001      	movs	r0, #1
}
   20082:	bd38      	pop	{r3, r4, r5, pc}
		uuid->type = BT_UUID_TYPE_32;
   20084:	2301      	movs	r3, #1
   20086:	7003      	strb	r3, [r0, #0]
   20088:	78a2      	ldrb	r2, [r4, #2]
   2008a:	78c9      	ldrb	r1, [r1, #3]
   2008c:	7865      	ldrb	r5, [r4, #1]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   2008e:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
	return ((uint16_t)src[1] << 8) | src[0];
   20092:	7822      	ldrb	r2, [r4, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   20094:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
   20098:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   2009c:	6042      	str	r2, [r0, #4]
		break;
   2009e:	e7ef      	b.n	20080 <bt_uuid_create+0x20>
		uuid->type = BT_UUID_TYPE_128;
   200a0:	2302      	movs	r3, #2
   200a2:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   200a6:	f7ff fee2 	bl	1fe6e <memcpy>
		break;
   200aa:	e7e9      	b.n	20080 <bt_uuid_create+0x20>
	switch (data_len) {
   200ac:	4618      	mov	r0, r3
   200ae:	e7e8      	b.n	20082 <bt_uuid_create+0x22>

000200b0 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   200b0:	f3bf 8f5b 	dmb	ish
   200b4:	6800      	ldr	r0, [r0, #0]
   200b6:	f3bf 8f5b 	dmb	ish
}
   200ba:	4770      	bx	lr

000200bc <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   200bc:	2207      	movs	r2, #7
   200be:	f7ff bed6 	b.w	1fe6e <memcpy>

000200c2 <atomic_and>:
{
   200c2:	4603      	mov	r3, r0
}
   200c4:	f3bf 8f5b 	dmb	ish
   200c8:	e853 0f00 	ldrex	r0, [r3]
   200cc:	ea00 0201 	and.w	r2, r0, r1
   200d0:	e843 2c00 	strex	ip, r2, [r3]
   200d4:	f1bc 0f00 	cmp.w	ip, #0
   200d8:	d1f6      	bne.n	200c8 <atomic_and+0x6>
   200da:	f3bf 8f5b 	dmb	ish
   200de:	4770      	bx	lr

000200e0 <atomic_or>:
{
   200e0:	4603      	mov	r3, r0
}
   200e2:	f3bf 8f5b 	dmb	ish
   200e6:	e853 0f00 	ldrex	r0, [r3]
   200ea:	ea40 0201 	orr.w	r2, r0, r1
   200ee:	e843 2c00 	strex	ip, r2, [r3]
   200f2:	f1bc 0f00 	cmp.w	ip, #0
   200f6:	d1f6      	bne.n	200e6 <atomic_or+0x6>
   200f8:	f3bf 8f5b 	dmb	ish
   200fc:	4770      	bx	lr

000200fe <atomic_set_bit_to>:
{
   200fe:	460b      	mov	r3, r1
   20100:	b410      	push	{r4}
   20102:	095b      	lsrs	r3, r3, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
   20104:	f001 041f 	and.w	r4, r1, #31
   20108:	2101      	movs	r1, #1
   2010a:	40a1      	lsls	r1, r4
	if (val) {
   2010c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   20110:	b112      	cbz	r2, 20118 <atomic_set_bit_to+0x1a>
	}
}
   20112:	bc10      	pop	{r4}
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   20114:	f7ff bfe4 	b.w	200e0 <atomic_or>
}
   20118:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2011a:	43c9      	mvns	r1, r1
   2011c:	f7ff bfd1 	b.w	200c2 <atomic_and>

00020120 <atomic_test_and_set_bit>:
{
   20120:	b508      	push	{r3, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   20122:	2301      	movs	r3, #1
   20124:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   20128:	f7ff ffda 	bl	200e0 <atomic_or>
	return (old & mask) != 0;
   2012c:	4201      	tst	r1, r0
}
   2012e:	bf14      	ite	ne
   20130:	2001      	movne	r0, #1
   20132:	2000      	moveq	r0, #0
   20134:	bd08      	pop	{r3, pc}

00020136 <sys_put_le64>:
	dst[1] = val >> 8;
   20136:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   2013a:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   2013c:	0e00      	lsrs	r0, r0, #24
   2013e:	7053      	strb	r3, [r2, #1]
   20140:	70d0      	strb	r0, [r2, #3]
	dst[0] = val;
   20142:	2300      	movs	r3, #0
	dst[1] = val >> 8;
   20144:	f3c1 2007 	ubfx	r0, r1, #8, #8
   20148:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   2014a:	7093      	strb	r3, [r2, #2]
   2014c:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   2014e:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   20150:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   20152:	71d1      	strb	r1, [r2, #7]
}
   20154:	4770      	bx	lr

00020156 <le_adv_set_private_addr.isra.0>:
static int le_set_private_addr(uint8_t id)
   20156:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   20158:	2106      	movs	r1, #6
   2015a:	4668      	mov	r0, sp
   2015c:	f7f3 f8b2 	bl	132c4 <bt_rand>
	if (err) {
   20160:	b940      	cbnz	r0, 20174 <le_adv_set_private_addr.isra.0+0x1e>
	nrpa.val[5] &= 0x3f;
   20162:	f89d 3005 	ldrb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
   20166:	4668      	mov	r0, sp
	nrpa.val[5] &= 0x3f;
   20168:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2016c:	f88d 3005 	strb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
   20170:	f7e8 fe32 	bl	8dd8 <set_random_address>
}
   20174:	b003      	add	sp, #12
   20176:	f85d fb04 	ldr.w	pc, [sp], #4

0002017a <adv_pause_enabled>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   2017a:	f100 0314 	add.w	r3, r0, #20
{
   2017e:	b510      	push	{r4, lr}
   20180:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   20182:	4618      	mov	r0, r3
   20184:	f7ff ff94 	bl	200b0 <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   20188:	0642      	lsls	r2, r0, #25
   2018a:	d50a      	bpl.n	201a2 <adv_pause_enabled+0x28>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2018c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   20190:	4618      	mov	r0, r3
   20192:	f7ff ffa5 	bl	200e0 <atomic_or>
	return set_le_adv_enable_legacy(adv, enable);
   20196:	4620      	mov	r0, r4
   20198:	2100      	movs	r1, #0
}
   2019a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return set_le_adv_enable_legacy(adv, enable);
   2019e:	f7e8 be5b 	b.w	8e58 <set_le_adv_enable_legacy>
}
   201a2:	bd10      	pop	{r4, pc}

000201a4 <adv_unpause_enabled>:
{
   201a4:	b510      	push	{r4, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   201a6:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   201aa:	4604      	mov	r4, r0
   201ac:	3014      	adds	r0, #20
   201ae:	f7ff ff88 	bl	200c2 <atomic_and>
	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_PAUSED)) {
   201b2:	04c3      	lsls	r3, r0, #19
   201b4:	d505      	bpl.n	201c2 <adv_unpause_enabled+0x1e>
	return set_le_adv_enable_legacy(adv, enable);
   201b6:	4620      	mov	r0, r4
   201b8:	2101      	movs	r1, #1
}
   201ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return set_le_adv_enable_legacy(adv, enable);
   201be:	f7e8 be4b 	b.w	8e58 <set_le_adv_enable_legacy>
}
   201c2:	bd10      	pop	{r4, pc}

000201c4 <hci_id_add.isra.0>:
static int hci_id_add(uint8_t id, const bt_addr_le_t *addr, uint8_t peer_irk[16])
   201c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   201c6:	4607      	mov	r7, r0
   201c8:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   201ca:	f242 0027 	movw	r0, #8231	; 0x2027
   201ce:	2127      	movs	r1, #39	; 0x27
   201d0:	f7e8 fc04 	bl	89dc <bt_hci_cmd_create>
	if (!buf) {
   201d4:	4604      	mov	r4, r0
   201d6:	b1d0      	cbz	r0, 2020e <hci_id_add.isra.0+0x4a>
	cp = net_buf_add(buf, sizeof(*cp));
   201d8:	2127      	movs	r1, #39	; 0x27
   201da:	3008      	adds	r0, #8
   201dc:	f002 f9d8 	bl	22590 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   201e0:	4639      	mov	r1, r7
	cp = net_buf_add(buf, sizeof(*cp));
   201e2:	4605      	mov	r5, r0
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   201e4:	f7ff ff6a 	bl	200bc <bt_addr_le_copy>
	memcpy(cp->peer_irk, peer_irk, 16);
   201e8:	4631      	mov	r1, r6
   201ea:	2210      	movs	r2, #16
   201ec:	1de8      	adds	r0, r5, #7
   201ee:	f7ff fe3e 	bl	1fe6e <memcpy>
	(void)memset(cp->local_irk, 0, 16);
   201f2:	2210      	movs	r2, #16
   201f4:	2100      	movs	r1, #0
   201f6:	f105 0017 	add.w	r0, r5, #23
   201fa:	f7ff fe63 	bl	1fec4 <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   201fe:	4621      	mov	r1, r4
   20200:	2200      	movs	r2, #0
}
   20202:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   20206:	f242 0027 	movw	r0, #8231	; 0x2027
   2020a:	f7e8 bd43 	b.w	8c94 <bt_hci_cmd_send_sync>
}
   2020e:	f06f 0036 	mvn.w	r0, #54	; 0x36
   20212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00020214 <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
   20214:	7a03      	ldrb	r3, [r0, #8]
   20216:	075b      	lsls	r3, r3, #29
   20218:	d504      	bpl.n	20224 <keys_add_id+0x10>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   2021a:	f100 012a 	add.w	r1, r0, #42	; 0x2a
   2021e:	3001      	adds	r0, #1
   20220:	f7ff bfd0 	b.w	201c4 <hci_id_add.isra.0>
}
   20224:	4770      	bx	lr

00020226 <addr_res_enable>:
{
   20226:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   20228:	2101      	movs	r1, #1
{
   2022a:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   2022c:	f242 002d 	movw	r0, #8237	; 0x202d
   20230:	f7e8 fbd4 	bl	89dc <bt_hci_cmd_create>
	if (!buf) {
   20234:	4604      	mov	r4, r0
   20236:	b158      	cbz	r0, 20250 <addr_res_enable+0x2a>
	net_buf_add_u8(buf, enable);
   20238:	4629      	mov	r1, r5
   2023a:	3008      	adds	r0, #8
   2023c:	f002 f9b7 	bl	225ae <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   20240:	4621      	mov	r1, r4
   20242:	2200      	movs	r2, #0
}
   20244:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   20248:	f242 002d 	movw	r0, #8237	; 0x202d
   2024c:	f7e8 bd22 	b.w	8c94 <bt_hci_cmd_send_sync>
}
   20250:	f06f 0036 	mvn.w	r0, #54	; 0x36
   20254:	bd38      	pop	{r3, r4, r5, pc}

00020256 <set_le_scan_enable>:
	return set_le_scan_enable_legacy(enable);
   20256:	f7e8 be2d 	b.w	8eb4 <set_le_scan_enable_legacy>

0002025a <bt_lookup_id_addr>:
{
   2025a:	b510      	push	{r4, lr}
   2025c:	460c      	mov	r4, r1
		keys = bt_keys_find_irk(id, addr);
   2025e:	f7ef fe35 	bl	fecc <bt_keys_find_irk>
		if (keys) {
   20262:	b100      	cbz	r0, 20266 <bt_lookup_id_addr+0xc>
			return &keys->addr;
   20264:	1c44      	adds	r4, r0, #1
}
   20266:	4620      	mov	r0, r4
   20268:	bd10      	pop	{r4, pc}

0002026a <bt_le_scan_random_addr_check>:
}
   2026a:	2001      	movs	r0, #1
   2026c:	4770      	bx	lr

0002026e <bt_le_create_conn>:
	return bt_le_create_conn_legacy(conn);
   2026e:	f7e8 bea9 	b.w	8fc4 <bt_le_create_conn_legacy>

00020272 <bt_hci_disconnect>:
{
   20272:	b570      	push	{r4, r5, r6, lr}
   20274:	4606      	mov	r6, r0
   20276:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   20278:	f240 4006 	movw	r0, #1030	; 0x406
   2027c:	2103      	movs	r1, #3
   2027e:	f7e8 fbad 	bl	89dc <bt_hci_cmd_create>
	if (!buf) {
   20282:	4604      	mov	r4, r0
   20284:	b160      	cbz	r0, 202a0 <bt_hci_disconnect+0x2e>
	disconn = net_buf_add(buf, sizeof(*disconn));
   20286:	2103      	movs	r1, #3
   20288:	3008      	adds	r0, #8
   2028a:	f002 f981 	bl	22590 <net_buf_simple_add>
	disconn->reason = reason;
   2028e:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   20290:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send(BT_HCI_OP_DISCONNECT, buf);
   20292:	4621      	mov	r1, r4
   20294:	f240 4006 	movw	r0, #1030	; 0x406
}
   20298:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send(BT_HCI_OP_DISCONNECT, buf);
   2029c:	f7e8 bbd6 	b.w	8a4c <bt_hci_cmd_send>
}
   202a0:	f06f 0036 	mvn.w	r0, #54	; 0x36
   202a4:	bd70      	pop	{r4, r5, r6, pc}

000202a6 <bt_le_set_data_len>:
{
   202a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   202a8:	4607      	mov	r7, r0
   202aa:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   202ac:	f242 0022 	movw	r0, #8226	; 0x2022
   202b0:	2106      	movs	r1, #6
{
   202b2:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   202b4:	f7e8 fb92 	bl	89dc <bt_hci_cmd_create>
	if (!buf) {
   202b8:	4604      	mov	r4, r0
   202ba:	b170      	cbz	r0, 202da <bt_le_set_data_len+0x34>
	cp = net_buf_add(buf, sizeof(*cp));
   202bc:	2106      	movs	r1, #6
   202be:	3008      	adds	r0, #8
   202c0:	f002 f966 	bl	22590 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   202c4:	883b      	ldrh	r3, [r7, #0]
   202c6:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   202c8:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   202ca:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   202cc:	4621      	mov	r1, r4
   202ce:	f242 0022 	movw	r0, #8226	; 0x2022
}
   202d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   202d6:	f7e8 bbb9 	b.w	8a4c <bt_hci_cmd_send>
}
   202da:	f06f 0036 	mvn.w	r0, #54	; 0x36
   202de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000202e0 <bt_le_set_phy>:
{
   202e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   202e4:	4680      	mov	r8, r0
   202e6:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   202e8:	f242 0032 	movw	r0, #8242	; 0x2032
   202ec:	2107      	movs	r1, #7
{
   202ee:	f89d 9020 	ldrb.w	r9, [sp, #32]
   202f2:	4616      	mov	r6, r2
   202f4:	461d      	mov	r5, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   202f6:	f7e8 fb71 	bl	89dc <bt_hci_cmd_create>
	if (!buf) {
   202fa:	4604      	mov	r4, r0
   202fc:	b190      	cbz	r0, 20324 <bt_le_set_phy+0x44>
	cp = net_buf_add(buf, sizeof(*cp));
   202fe:	2107      	movs	r1, #7
   20300:	3008      	adds	r0, #8
   20302:	f002 f945 	bl	22590 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   20306:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   2030a:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   2030c:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   2030e:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   20310:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   20312:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   20316:	4621      	mov	r1, r4
   20318:	f242 0032 	movw	r0, #8242	; 0x2032
}
   2031c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   20320:	f7e8 bb94 	b.w	8a4c <bt_hci_cmd_send>
}
   20324:	f06f 0036 	mvn.w	r0, #54	; 0x36
   20328:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002032c <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   2032c:	8802      	ldrh	r2, [r0, #0]
   2032e:	8843      	ldrh	r3, [r0, #2]
   20330:	429a      	cmp	r2, r3
{
   20332:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   20334:	d818      	bhi.n	20368 <bt_le_conn_params_valid+0x3c>
   20336:	2a05      	cmp	r2, #5
   20338:	d916      	bls.n	20368 <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
   2033a:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   2033e:	d813      	bhi.n	20368 <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
   20340:	8884      	ldrh	r4, [r0, #4]
   20342:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   20346:	d20f      	bcs.n	20368 <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
   20348:	88c1      	ldrh	r1, [r0, #6]
   2034a:	f1a1 020a 	sub.w	r2, r1, #10
   2034e:	b292      	uxth	r2, r2
   20350:	f640 4076 	movw	r0, #3190	; 0xc76
   20354:	4282      	cmp	r2, r0
   20356:	d807      	bhi.n	20368 <bt_le_conn_params_valid+0x3c>
	     ((1U + param->latency) * param->interval_max))) {
   20358:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
   2035c:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
   20360:	bf34      	ite	cc
   20362:	2001      	movcc	r0, #1
   20364:	2000      	movcs	r0, #0
}
   20366:	bd10      	pop	{r4, pc}
		return false;
   20368:	2000      	movs	r0, #0
   2036a:	e7fc      	b.n	20366 <bt_le_conn_params_valid+0x3a>

0002036c <pending_id_update>:
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   2036c:	7a03      	ldrb	r3, [r0, #8]
   2036e:	07d9      	lsls	r1, r3, #31
   20370:	d504      	bpl.n	2037c <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   20372:	f023 0301 	bic.w	r3, r3, #1
   20376:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   20378:	f7e8 bf8a 	b.w	9290 <bt_id_add>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   2037c:	0799      	lsls	r1, r3, #30
   2037e:	d504      	bpl.n	2038a <pending_id_update+0x1e>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   20380:	f023 0302 	bic.w	r3, r3, #2
   20384:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   20386:	f7e9 b861 	b.w	944c <bt_id_del>
}
   2038a:	4770      	bx	lr

0002038c <le_enh_conn_complete>:
	enh_conn_complete((void *)buf->data);
   2038c:	6880      	ldr	r0, [r0, #8]
   2038e:	f7e9 ba7d 	b.w	988c <enh_conn_complete>

00020392 <le_legacy_conn_complete>:
{
   20392:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   20394:	6881      	ldr	r1, [r0, #8]
{
   20396:	b08a      	sub	sp, #40	; 0x28
	enh.status         = evt->status;
   20398:	780b      	ldrb	r3, [r1, #0]
   2039a:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   2039e:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   203a2:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   203a6:	78cb      	ldrb	r3, [r1, #3]
   203a8:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   203ac:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   203b0:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   203b4:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   203b8:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   203bc:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   203c0:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   203c4:	7c4b      	ldrb	r3, [r1, #17]
   203c6:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   203ca:	a803      	add	r0, sp, #12
   203cc:	3104      	adds	r1, #4
   203ce:	f7ff fe75 	bl	200bc <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   203d2:	2400      	movs	r4, #0
	memcpy(dst, src, sizeof(*dst));
   203d4:	4669      	mov	r1, sp
   203d6:	2206      	movs	r2, #6
   203d8:	f10d 0013 	add.w	r0, sp, #19
   203dc:	9400      	str	r4, [sp, #0]
   203de:	f8ad 4004 	strh.w	r4, [sp, #4]
   203e2:	f7ff fd44 	bl	1fe6e <memcpy>
   203e6:	2206      	movs	r2, #6
   203e8:	4669      	mov	r1, sp
   203ea:	f10d 0019 	add.w	r0, sp, #25
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   203ee:	9400      	str	r4, [sp, #0]
   203f0:	f8ad 4004 	strh.w	r4, [sp, #4]
   203f4:	f7ff fd3b 	bl	1fe6e <memcpy>
	enh_conn_complete(&enh);
   203f8:	a802      	add	r0, sp, #8
   203fa:	f7e9 fa47 	bl	988c <enh_conn_complete>
}
   203fe:	b00a      	add	sp, #40	; 0x28
   20400:	bd10      	pop	{r4, pc}

00020402 <bt_addr_le_create_static>:
	addr->type = BT_ADDR_LE_RANDOM;
   20402:	2301      	movs	r3, #1
{
   20404:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   20406:	2106      	movs	r1, #6
{
   20408:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   2040a:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   2040e:	f7f2 ff59 	bl	132c4 <bt_rand>
	if (err) {
   20412:	b918      	cbnz	r0, 2041c <bt_addr_le_create_static+0x1a>
	BT_ADDR_SET_STATIC(&addr->a);
   20414:	79a3      	ldrb	r3, [r4, #6]
   20416:	f063 033f 	orn	r3, r3, #63	; 0x3f
   2041a:	71a3      	strb	r3, [r4, #6]
}
   2041c:	bd10      	pop	{r4, pc}

0002041e <bt_send>:
		return bt_hci_ecc_send(buf);
   2041e:	f7e7 bddb 	b.w	7fd8 <bt_hci_ecc_send>

00020422 <bt_addr_le_is_bonded>:
{
   20422:	b508      	push	{r3, lr}
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   20424:	f7ef fd8c 	bl	ff40 <bt_keys_find_addr>
		return keys && keys->keys;
   20428:	b118      	cbz	r0, 20432 <bt_addr_le_is_bonded+0x10>
   2042a:	89c0      	ldrh	r0, [r0, #14]
   2042c:	3800      	subs	r0, #0
   2042e:	bf18      	it	ne
   20430:	2001      	movne	r0, #1
}
   20432:	bd08      	pop	{r3, pc}

00020434 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   20434:	f3bf 8f5b 	dmb	ish
   20438:	6800      	ldr	r0, [r0, #0]
   2043a:	f3bf 8f5b 	dmb	ish
}
   2043e:	4770      	bx	lr

00020440 <bt_conn_reset_rx_state>:
	if (!conn->rx_len) {
   20440:	89c3      	ldrh	r3, [r0, #14]
{
   20442:	b510      	push	{r4, lr}
   20444:	4604      	mov	r4, r0
	if (!conn->rx_len) {
   20446:	b12b      	cbz	r3, 20454 <bt_conn_reset_rx_state+0x14>
	net_buf_unref(conn->rx);
   20448:	6900      	ldr	r0, [r0, #16]
   2044a:	f7fb fb45 	bl	1bad8 <net_buf_unref>
	conn->rx = NULL;
   2044e:	2300      	movs	r3, #0
   20450:	6123      	str	r3, [r4, #16]
	conn->rx_len = 0U;
   20452:	81e3      	strh	r3, [r4, #14]
}
   20454:	bd10      	pop	{r4, pc}

00020456 <atomic_dec>:
{
   20456:	4603      	mov	r3, r0
}
   20458:	f3bf 8f5b 	dmb	ish
   2045c:	e853 0f00 	ldrex	r0, [r3]
   20460:	1e42      	subs	r2, r0, #1
   20462:	e843 2100 	strex	r1, r2, [r3]
   20466:	2900      	cmp	r1, #0
   20468:	d1f8      	bne.n	2045c <atomic_dec+0x6>
   2046a:	f3bf 8f5b 	dmb	ish
   2046e:	4770      	bx	lr

00020470 <atomic_inc>:
{
   20470:	4603      	mov	r3, r0
}
   20472:	f3bf 8f5b 	dmb	ish
   20476:	e853 0f00 	ldrex	r0, [r3]
   2047a:	1c42      	adds	r2, r0, #1
   2047c:	e843 2100 	strex	r1, r2, [r3]
   20480:	2900      	cmp	r1, #0
   20482:	d1f8      	bne.n	20476 <atomic_inc+0x6>
   20484:	f3bf 8f5b 	dmb	ish
   20488:	4770      	bx	lr

0002048a <tx_notify>:
{
   2048a:	b570      	push	{r4, r5, r6, lr}
   2048c:	4604      	mov	r4, r0
	__asm__ volatile(
   2048e:	f04f 0220 	mov.w	r2, #32
   20492:	f3ef 8311 	mrs	r3, BASEPRI
   20496:	f382 8811 	msr	BASEPRI, r2
   2049a:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   2049e:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   204a0:	b920      	cbnz	r0, 204ac <tx_notify+0x22>
	__asm__ volatile(
   204a2:	f383 8811 	msr	BASEPRI, r3
   204a6:	f3bf 8f6f 	isb	sy
}
   204aa:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   204ac:	6a61      	ldr	r1, [r4, #36]	; 0x24
   204ae:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   204b0:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   204b2:	4288      	cmp	r0, r1
	list->tail = node;
   204b4:	bf08      	it	eq
   204b6:	6262      	streq	r2, [r4, #36]	; 0x24
   204b8:	f383 8811 	msr	BASEPRI, r3
   204bc:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   204c0:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   204c4:	f7e9 ffc2 	bl	a44c <tx_free>
		cb(conn, user_data);
   204c8:	4631      	mov	r1, r6
   204ca:	4620      	mov	r0, r4
   204cc:	47a8      	blx	r5
	while (1) {
   204ce:	e7de      	b.n	2048e <tx_notify+0x4>

000204d0 <tx_complete_work>:
	tx_notify(conn);
   204d0:	3828      	subs	r0, #40	; 0x28
   204d2:	f7ff bfda 	b.w	2048a <tx_notify>

000204d6 <bt_conn_le_start_encryption>:
{
   204d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   204da:	4682      	mov	sl, r0
   204dc:	4689      	mov	r9, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_START_ENCRYPTION, sizeof(*cp));
   204de:	f242 0019 	movw	r0, #8217	; 0x2019
   204e2:	211c      	movs	r1, #28
{
   204e4:	9e08      	ldr	r6, [sp, #32]
   204e6:	4690      	mov	r8, r2
   204e8:	461f      	mov	r7, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_START_ENCRYPTION, sizeof(*cp));
   204ea:	f7e8 fa77 	bl	89dc <bt_hci_cmd_create>
	if (!buf) {
   204ee:	4605      	mov	r5, r0
   204f0:	b340      	cbz	r0, 20544 <bt_conn_le_start_encryption+0x6e>
	cp = net_buf_add(buf, sizeof(*cp));
   204f2:	211c      	movs	r1, #28
   204f4:	3008      	adds	r0, #8
   204f6:	f002 f84b 	bl	22590 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   204fa:	f8ba 3000 	ldrh.w	r3, [sl]
	cp = net_buf_add(buf, sizeof(*cp));
   204fe:	4604      	mov	r4, r0
	memcpy(&cp->rand, rand, sizeof(cp->rand));
   20500:	2208      	movs	r2, #8
	cp->handle = sys_cpu_to_le16(conn->handle);
   20502:	f820 3b02 	strh.w	r3, [r0], #2
	memcpy(&cp->rand, rand, sizeof(cp->rand));
   20506:	4649      	mov	r1, r9
   20508:	f7ff fcb1 	bl	1fe6e <memcpy>
	memcpy(&cp->ediv, ediv, sizeof(cp->ediv));
   2050c:	2202      	movs	r2, #2
   2050e:	4641      	mov	r1, r8
   20510:	f104 000a 	add.w	r0, r4, #10
	memcpy(cp->ltk, ltk, len);
   20514:	340c      	adds	r4, #12
	memcpy(&cp->ediv, ediv, sizeof(cp->ediv));
   20516:	f7ff fcaa 	bl	1fe6e <memcpy>
	memcpy(cp->ltk, ltk, len);
   2051a:	4632      	mov	r2, r6
   2051c:	4639      	mov	r1, r7
   2051e:	4620      	mov	r0, r4
   20520:	f7ff fca5 	bl	1fe6e <memcpy>
	if (len < sizeof(cp->ltk)) {
   20524:	2e0f      	cmp	r6, #15
   20526:	d805      	bhi.n	20534 <bt_conn_le_start_encryption+0x5e>
		(void)memset(cp->ltk + len, 0, sizeof(cp->ltk) - len);
   20528:	f1c6 0210 	rsb	r2, r6, #16
   2052c:	2100      	movs	r1, #0
   2052e:	19a0      	adds	r0, r4, r6
   20530:	f7ff fcc8 	bl	1fec4 <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_START_ENCRYPTION, buf, NULL);
   20534:	4629      	mov	r1, r5
   20536:	2200      	movs	r2, #0
}
   20538:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_START_ENCRYPTION, buf, NULL);
   2053c:	f242 0019 	movw	r0, #8217	; 0x2019
   20540:	f7e8 bba8 	b.w	8c94 <bt_hci_cmd_send_sync>
}
   20544:	f06f 0036 	mvn.w	r0, #54	; 0x36
   20548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002054c <bt_conn_set_security>:
{
   2054c:	b510      	push	{r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   2054e:	7b43      	ldrb	r3, [r0, #13]
   20550:	2b06      	cmp	r3, #6
{
   20552:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   20554:	d128      	bne.n	205a8 <bt_conn_set_security+0x5c>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   20556:	7a43      	ldrb	r3, [r0, #9]
   20558:	428b      	cmp	r3, r1
   2055a:	d228      	bcs.n	205ae <bt_conn_set_security+0x62>
   2055c:	7a83      	ldrb	r3, [r0, #10]
   2055e:	428b      	cmp	r3, r1
   20560:	d225      	bcs.n	205ae <bt_conn_set_security+0x62>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   20562:	f3bf 8f5b 	dmb	ish
	if (val) {
   20566:	060a      	lsls	r2, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   20568:	f100 0304 	add.w	r3, r0, #4
   2056c:	d513      	bpl.n	20596 <bt_conn_set_security+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2056e:	e853 2f00 	ldrex	r2, [r3]
   20572:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   20576:	e843 2000 	strex	r0, r2, [r3]
   2057a:	2800      	cmp	r0, #0
   2057c:	d1f7      	bne.n	2056e <bt_conn_set_security+0x22>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2057e:	f3bf 8f5b 	dmb	ish
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   20582:	f001 017f 	and.w	r1, r1, #127	; 0x7f
   20586:	72a1      	strb	r1, [r4, #10]
		return bt_smp_start_security(conn);
   20588:	4620      	mov	r0, r4
   2058a:	f001 ff0f 	bl	223ac <bt_smp_start_security>
	if (err) {
   2058e:	b108      	cbz	r0, 20594 <bt_conn_set_security+0x48>
		conn->required_sec_level = conn->sec_level;
   20590:	7a63      	ldrb	r3, [r4, #9]
   20592:	72a3      	strb	r3, [r4, #10]
}
   20594:	bd10      	pop	{r4, pc}
   20596:	e853 2f00 	ldrex	r2, [r3]
   2059a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   2059e:	e843 2000 	strex	r0, r2, [r3]
   205a2:	2800      	cmp	r0, #0
   205a4:	d0eb      	beq.n	2057e <bt_conn_set_security+0x32>
   205a6:	e7f6      	b.n	20596 <bt_conn_set_security+0x4a>
		return -ENOTCONN;
   205a8:	f06f 0038 	mvn.w	r0, #56	; 0x38
   205ac:	e7f2      	b.n	20594 <bt_conn_set_security+0x48>
		return 0;
   205ae:	2000      	movs	r0, #0
   205b0:	e7f0      	b.n	20594 <bt_conn_set_security+0x48>

000205b2 <bt_conn_get_security>:
}
   205b2:	7a40      	ldrb	r0, [r0, #9]
   205b4:	4770      	bx	lr

000205b6 <bt_conn_is_peer_addr_le>:
{
   205b6:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   205b8:	7a03      	ldrb	r3, [r0, #8]
   205ba:	428b      	cmp	r3, r1
{
   205bc:	4604      	mov	r4, r0
   205be:	4615      	mov	r5, r2
	if (id != conn->id) {
   205c0:	d115      	bne.n	205ee <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   205c2:	f100 0188 	add.w	r1, r0, #136	; 0x88
   205c6:	2207      	movs	r2, #7
   205c8:	4628      	mov	r0, r5
   205ca:	f7ff fc40 	bl	1fe4e <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   205ce:	b180      	cbz	r0, 205f2 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_MASTER) {
   205d0:	78e3      	ldrb	r3, [r4, #3]
   205d2:	2207      	movs	r2, #7
   205d4:	b943      	cbnz	r3, 205e8 <bt_conn_is_peer_addr_le+0x32>
   205d6:	f104 0196 	add.w	r1, r4, #150	; 0x96
   205da:	4628      	mov	r0, r5
   205dc:	f7ff fc37 	bl	1fe4e <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   205e0:	fab0 f080 	clz	r0, r0
   205e4:	0940      	lsrs	r0, r0, #5
}
   205e6:	bd38      	pop	{r3, r4, r5, pc}
   205e8:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   205ec:	e7f5      	b.n	205da <bt_conn_is_peer_addr_le+0x24>
		return false;
   205ee:	2000      	movs	r0, #0
   205f0:	e7f9      	b.n	205e6 <bt_conn_is_peer_addr_le+0x30>
		return true;
   205f2:	2001      	movs	r0, #1
   205f4:	e7f7      	b.n	205e6 <bt_conn_is_peer_addr_le+0x30>

000205f6 <bt_conn_unref>:
	atomic_val_t old = atomic_dec(&conn->ref);
   205f6:	3054      	adds	r0, #84	; 0x54
   205f8:	f7ff bf2d 	b.w	20456 <atomic_dec>

000205fc <bt_conn_get_dst>:
}
   205fc:	3088      	adds	r0, #136	; 0x88
   205fe:	4770      	bx	lr

00020600 <bt_conn_le_conn_update>:
{
   20600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20602:	4607      	mov	r7, r0
   20604:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   20606:	f242 0013 	movw	r0, #8211	; 0x2013
   2060a:	210e      	movs	r1, #14
   2060c:	f7e8 f9e6 	bl	89dc <bt_hci_cmd_create>
	if (!buf) {
   20610:	4606      	mov	r6, r0
   20612:	b1d0      	cbz	r0, 2064a <bt_conn_le_conn_update+0x4a>
	conn_update = net_buf_add(buf, sizeof(*conn_update));
   20614:	210e      	movs	r1, #14
   20616:	3008      	adds	r0, #8
   20618:	f001 ffba 	bl	22590 <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   2061c:	220e      	movs	r2, #14
	conn_update = net_buf_add(buf, sizeof(*conn_update));
   2061e:	4604      	mov	r4, r0
	(void)memset(conn_update, 0, sizeof(*conn_update));
   20620:	2100      	movs	r1, #0
   20622:	f7ff fc4f 	bl	1fec4 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   20626:	883b      	ldrh	r3, [r7, #0]
   20628:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   2062a:	882b      	ldrh	r3, [r5, #0]
   2062c:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   2062e:	886b      	ldrh	r3, [r5, #2]
   20630:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   20632:	88ab      	ldrh	r3, [r5, #4]
   20634:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   20636:	88eb      	ldrh	r3, [r5, #6]
   20638:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2063a:	4631      	mov	r1, r6
   2063c:	2200      	movs	r2, #0
}
   2063e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   20642:	f242 0013 	movw	r0, #8211	; 0x2013
   20646:	f7e8 bb25 	b.w	8c94 <bt_hci_cmd_send_sync>
}
   2064a:	f06f 0036 	mvn.w	r0, #54	; 0x36
   2064e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00020650 <sys_slist_remove>:
Z_GENLIST_REMOVE(slist, snode)
   20650:	6813      	ldr	r3, [r2, #0]
   20652:	b939      	cbnz	r1, 20664 <sys_slist_remove+0x14>
   20654:	6841      	ldr	r1, [r0, #4]
	list->head = node;
   20656:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   20658:	428a      	cmp	r2, r1
   2065a:	d100      	bne.n	2065e <sys_slist_remove+0xe>
	list->tail = node;
   2065c:	6043      	str	r3, [r0, #4]
	parent->next = child;
   2065e:	2300      	movs	r3, #0
   20660:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   20662:	4770      	bx	lr
	parent->next = child;
   20664:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   20666:	6843      	ldr	r3, [r0, #4]
   20668:	429a      	cmp	r2, r3
	list->tail = node;
   2066a:	bf08      	it	eq
   2066c:	6041      	streq	r1, [r0, #4]
}
   2066e:	e7f6      	b.n	2065e <sys_slist_remove+0xe>

00020670 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   20670:	4603      	mov	r3, r0
	size_t bytes = 0;
   20672:	2000      	movs	r0, #0

	while (buf) {
   20674:	b903      	cbnz	r3, 20678 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   20676:	4770      	bx	lr
		bytes += buf->len;
   20678:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   2067a:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   2067c:	4410      	add	r0, r2
		buf = buf->frags;
   2067e:	e7f9      	b.n	20674 <net_buf_frags_len+0x4>

00020680 <__l2cap_lookup_ident>:
{
   20680:	b538      	push	{r3, r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   20682:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
{
   20684:	460b      	mov	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   20686:	b164      	cbz	r4, 206a2 <__l2cap_lookup_ident+0x22>
   20688:	3c08      	subs	r4, #8
   2068a:	2100      	movs	r1, #0
   2068c:	b14c      	cbz	r4, 206a2 <__l2cap_lookup_ident+0x22>
		if (chan->ident == ident) {
   2068e:	f894 5048 	ldrb.w	r5, [r4, #72]	; 0x48
   20692:	429d      	cmp	r5, r3
   20694:	d107      	bne.n	206a6 <__l2cap_lookup_ident+0x26>
			if (remove) {
   20696:	b122      	cbz	r2, 206a2 <__l2cap_lookup_ident+0x22>
				sys_slist_remove(&conn->channels, prev,
   20698:	f104 0208 	add.w	r2, r4, #8
   2069c:	304c      	adds	r0, #76	; 0x4c
   2069e:	f7ff ffd7 	bl	20650 <sys_slist_remove>
}
   206a2:	4620      	mov	r0, r4
   206a4:	bd38      	pop	{r3, r4, r5, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
   206a6:	f114 0108 	adds.w	r1, r4, #8
   206aa:	d004      	beq.n	206b6 <__l2cap_lookup_ident+0x36>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   206ac:	68a4      	ldr	r4, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   206ae:	2c00      	cmp	r4, #0
   206b0:	d0f7      	beq.n	206a2 <__l2cap_lookup_ident+0x22>
   206b2:	3c08      	subs	r4, #8
   206b4:	e7ea      	b.n	2068c <__l2cap_lookup_ident+0xc>
	return NULL;
   206b6:	460c      	mov	r4, r1
   206b8:	e7f3      	b.n	206a2 <__l2cap_lookup_ident+0x22>

000206ba <l2cap_remove_rx_cid>:
	if (!L2CAP_LE_CID_IS_DYN(cid)) {
   206ba:	f1a1 0240 	sub.w	r2, r1, #64	; 0x40
   206be:	2a3f      	cmp	r2, #63	; 0x3f
{
   206c0:	b538      	push	{r3, r4, r5, lr}
   206c2:	460b      	mov	r3, r1
	if (!L2CAP_LE_CID_IS_DYN(cid)) {
   206c4:	d816      	bhi.n	206f4 <l2cap_remove_rx_cid+0x3a>
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   206c6:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
   206c8:	b15c      	cbz	r4, 206e2 <l2cap_remove_rx_cid+0x28>
   206ca:	3c08      	subs	r4, #8
   206cc:	2100      	movs	r1, #0
   206ce:	b144      	cbz	r4, 206e2 <l2cap_remove_rx_cid+0x28>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   206d0:	f8b4 5050 	ldrh.w	r5, [r4, #80]	; 0x50
   206d4:	429d      	cmp	r5, r3
   206d6:	f104 0208 	add.w	r2, r4, #8
   206da:	d104      	bne.n	206e6 <l2cap_remove_rx_cid+0x2c>
			sys_slist_remove(&conn->channels, prev, &chan->node);
   206dc:	304c      	adds	r0, #76	; 0x4c
   206de:	f7ff ffb7 	bl	20650 <sys_slist_remove>
}
   206e2:	4620      	mov	r0, r4
   206e4:	bd38      	pop	{r3, r4, r5, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
   206e6:	b13a      	cbz	r2, 206f8 <l2cap_remove_rx_cid+0x3e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   206e8:	68a4      	ldr	r4, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   206ea:	2c00      	cmp	r4, #0
   206ec:	d0f9      	beq.n	206e2 <l2cap_remove_rx_cid+0x28>
   206ee:	3c08      	subs	r4, #8
   206f0:	4611      	mov	r1, r2
   206f2:	e7ec      	b.n	206ce <l2cap_remove_rx_cid+0x14>
		return NULL;
   206f4:	2400      	movs	r4, #0
   206f6:	e7f4      	b.n	206e2 <l2cap_remove_rx_cid+0x28>
   206f8:	4614      	mov	r4, r2
   206fa:	e7f2      	b.n	206e2 <l2cap_remove_rx_cid+0x28>

000206fc <l2cap_alloc_frag>:
{
   206fc:	b508      	push	{r3, lr}
	frag = chan->chan.ops->alloc_buf(&chan->chan);
   206fe:	6853      	ldr	r3, [r2, #4]
{
   20700:	4610      	mov	r0, r2
	frag = chan->chan.ops->alloc_buf(&chan->chan);
   20702:	68db      	ldr	r3, [r3, #12]
   20704:	4798      	blx	r3
}
   20706:	2800      	cmp	r0, #0
   20708:	bf38      	it	cc
   2070a:	2000      	movcc	r0, #0
   2070c:	bd08      	pop	{r3, pc}

0002070e <l2cap_connected>:
}
   2070e:	4770      	bx	lr

00020710 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   20710:	f3bf 8f5b 	dmb	ish
   20714:	6800      	ldr	r0, [r0, #0]
   20716:	f3bf 8f5b 	dmb	ish
}
   2071a:	4770      	bx	lr

0002071c <atomic_add>:
{
   2071c:	4603      	mov	r3, r0
}
   2071e:	f3bf 8f5b 	dmb	ish
   20722:	e853 0f00 	ldrex	r0, [r3]
   20726:	1842      	adds	r2, r0, r1
   20728:	e843 2c00 	strex	ip, r2, [r3]
   2072c:	f1bc 0f00 	cmp.w	ip, #0
   20730:	d1f7      	bne.n	20722 <atomic_add+0x6>
   20732:	f3bf 8f5b 	dmb	ish
   20736:	4770      	bx	lr

00020738 <l2cap_chan_destroy>:
{
   20738:	b570      	push	{r4, r5, r6, lr}
   2073a:	4604      	mov	r4, r0
	k_delayed_work_cancel(&chan->rtx_work);
   2073c:	3010      	adds	r0, #16
   2073e:	f002 fcdf 	bl	23100 <k_delayed_work_cancel>
	if (ch->tx_buf) {
   20742:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
   20746:	b120      	cbz	r0, 20752 <l2cap_chan_destroy+0x1a>
		net_buf_unref(ch->tx_buf);
   20748:	f7fb f9c6 	bl	1bad8 <net_buf_unref>
		ch->tx_buf = NULL;
   2074c:	2300      	movs	r3, #0
   2074e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	while ((buf = net_buf_get(&ch->tx_queue, K_NO_WAIT))) {
   20752:	f104 0568 	add.w	r5, r4, #104	; 0x68
   20756:	2200      	movs	r2, #0
   20758:	2300      	movs	r3, #0
   2075a:	4628      	mov	r0, r5
   2075c:	f001 feb5 	bl	224ca <net_buf_get>
   20760:	b990      	cbnz	r0, 20788 <l2cap_chan_destroy+0x50>
	while ((buf = net_buf_get(&ch->rx_queue, K_NO_WAIT))) {
   20762:	f104 06a4 	add.w	r6, r4, #164	; 0xa4
   20766:	2200      	movs	r2, #0
   20768:	2300      	movs	r3, #0
   2076a:	4630      	mov	r0, r6
   2076c:	f001 fead 	bl	224ca <net_buf_get>
   20770:	4605      	mov	r5, r0
   20772:	b960      	cbnz	r0, 2078e <l2cap_chan_destroy+0x56>
	if (ch->_sdu) {
   20774:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
   20778:	b128      	cbz	r0, 20786 <l2cap_chan_destroy+0x4e>
		net_buf_unref(ch->_sdu);
   2077a:	f7fb f9ad 	bl	1bad8 <net_buf_unref>
		ch->_sdu = NULL;
   2077e:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
		ch->_sdu_len = 0U;
   20782:	f8a4 5094 	strh.w	r5, [r4, #148]	; 0x94
}
   20786:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
   20788:	f7fb f9a6 	bl	1bad8 <net_buf_unref>
   2078c:	e7e3      	b.n	20756 <l2cap_chan_destroy+0x1e>
		net_buf_unref(buf);
   2078e:	f7fb f9a3 	bl	1bad8 <net_buf_unref>
   20792:	e7e8      	b.n	20766 <l2cap_chan_destroy+0x2e>

00020794 <l2cap_chan_rx_init>:
	if (!chan->rx.mtu) {
   20794:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
   20798:	b913      	cbnz	r3, 207a0 <l2cap_chan_rx_init+0xc>
		chan->rx.mtu = L2CAP_MAX_LE_MTU;
   2079a:	23f8      	movs	r3, #248	; 0xf8
   2079c:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
	if (!chan->rx.init_credits) {
   207a0:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
   207a4:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
   207a8:	b94a      	cbnz	r2, 207be <l2cap_chan_rx_init+0x2a>
		if (chan->chan.ops->alloc_buf) {
   207aa:	6842      	ldr	r2, [r0, #4]
   207ac:	68d2      	ldr	r2, [r2, #12]
   207ae:	b1ca      	cbz	r2, 207e4 <l2cap_chan_rx_init+0x50>
			chan->rx.init_credits = (chan->rx.mtu +
   207b0:	f103 02f9 	add.w	r2, r3, #249	; 0xf9
						 (L2CAP_MAX_LE_MPS - 1)) /
   207b4:	21fa      	movs	r1, #250	; 0xfa
   207b6:	fbb2 f2f1 	udiv	r2, r2, r1
			chan->rx.init_credits = L2CAP_LE_MAX_CREDITS;
   207ba:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
	chan->rx.mps = MIN(chan->rx.mtu + 2, L2CAP_MAX_LE_MPS);
   207be:	3302      	adds	r3, #2
   207c0:	2bfa      	cmp	r3, #250	; 0xfa
   207c2:	bfa8      	it	ge
   207c4:	23fa      	movge	r3, #250	; 0xfa
   207c6:	f8a0 3054 	strh.w	r3, [r0, #84]	; 0x54
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   207ca:	3058      	adds	r0, #88	; 0x58
   207cc:	2300      	movs	r3, #0
   207ce:	f3bf 8f5b 	dmb	ish
   207d2:	e850 2f00 	ldrex	r2, [r0]
   207d6:	e840 3100 	strex	r1, r3, [r0]
   207da:	2900      	cmp	r1, #0
   207dc:	d1f9      	bne.n	207d2 <l2cap_chan_rx_init+0x3e>
   207de:	f3bf 8f5b 	dmb	ish
}
   207e2:	4770      	bx	lr
			chan->rx.init_credits = L2CAP_LE_MAX_CREDITS;
   207e4:	22fe      	movs	r2, #254	; 0xfe
   207e6:	e7e8      	b.n	207ba <l2cap_chan_rx_init+0x26>

000207e8 <l2cap_disconnected>:
   207e8:	4770      	bx	lr

000207ea <l2cap_chan_tx_give_credits>:
{
   207ea:	b510      	push	{r4, lr}
   207ec:	4604      	mov	r4, r0
	atomic_add(&chan->tx.credits, credits);
   207ee:	3064      	adds	r0, #100	; 0x64
   207f0:	f7ff ff94 	bl	2071c <atomic_add>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   207f4:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(chan->chan.status, BT_L2CAP_STATUS_OUT) &&
   207f8:	f104 0140 	add.w	r1, r4, #64	; 0x40
   207fc:	e851 3f00 	ldrex	r3, [r1]
   20800:	f043 0201 	orr.w	r2, r3, #1
   20804:	e841 2000 	strex	r0, r2, [r1]
   20808:	2800      	cmp	r0, #0
   2080a:	d1f7      	bne.n	207fc <l2cap_chan_tx_give_credits+0x12>
   2080c:	f3bf 8f5b 	dmb	ish
   20810:	07db      	lsls	r3, r3, #31
   20812:	d406      	bmi.n	20822 <l2cap_chan_tx_give_credits+0x38>
	    chan->chan.ops->status) {
   20814:	6863      	ldr	r3, [r4, #4]
   20816:	699b      	ldr	r3, [r3, #24]
	if (!atomic_test_and_set_bit(chan->chan.status, BT_L2CAP_STATUS_OUT) &&
   20818:	b11b      	cbz	r3, 20822 <l2cap_chan_tx_give_credits+0x38>
		chan->chan.ops->status(&chan->chan, chan->chan.status);
   2081a:	4620      	mov	r0, r4
}
   2081c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		chan->chan.ops->status(&chan->chan, chan->chan.status);
   20820:	4718      	bx	r3
}
   20822:	bd10      	pop	{r4, pc}

00020824 <l2cap_change_security>:
{
   20824:	b510      	push	{r4, lr}
	if (atomic_test_bit(chan->chan.status,
   20826:	f100 0440 	add.w	r4, r0, #64	; 0x40
{
   2082a:	4603      	mov	r3, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2082c:	4620      	mov	r0, r4
   2082e:	f7ff ff6f 	bl	20710 <atomic_get>
	if (atomic_test_bit(chan->chan.status,
   20832:	0742      	lsls	r2, r0, #29
   20834:	d42b      	bmi.n	2088e <l2cap_change_security+0x6a>
	switch (err) {
   20836:	2905      	cmp	r1, #5
   20838:	d01d      	beq.n	20876 <l2cap_change_security+0x52>
   2083a:	2908      	cmp	r1, #8
   2083c:	d12a      	bne.n	20894 <l2cap_change_security+0x70>
		if (chan->chan.required_sec_level >= BT_SECURITY_L2) {
   2083e:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
   20842:	2a01      	cmp	r2, #1
   20844:	d829      	bhi.n	2089a <l2cap_change_security+0x76>
		chan->chan.required_sec_level = BT_SECURITY_L2;
   20846:	2202      	movs	r2, #2
			chan->chan.required_sec_level = BT_SECURITY_L4;
   20848:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	ret = bt_conn_set_security(chan->chan.conn,
   2084c:	f893 1049 	ldrb.w	r1, [r3, #73]	; 0x49
   20850:	6818      	ldr	r0, [r3, #0]
   20852:	f7ff fe7b 	bl	2054c <bt_conn_set_security>
	if (ret < 0) {
   20856:	2800      	cmp	r0, #0
   20858:	db0c      	blt.n	20874 <l2cap_change_security+0x50>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2085a:	f3bf 8f5b 	dmb	ish
   2085e:	e854 3f00 	ldrex	r3, [r4]
   20862:	f043 0304 	orr.w	r3, r3, #4
   20866:	e844 3200 	strex	r2, r3, [r4]
   2086a:	2a00      	cmp	r2, #0
   2086c:	d1f7      	bne.n	2085e <l2cap_change_security+0x3a>
   2086e:	f3bf 8f5b 	dmb	ish
	return 0;
   20872:	2000      	movs	r0, #0
}
   20874:	bd10      	pop	{r4, pc}
		if (chan->chan.required_sec_level < BT_SECURITY_L2) {
   20876:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
   2087a:	2a01      	cmp	r2, #1
   2087c:	d9e3      	bls.n	20846 <l2cap_change_security+0x22>
		} else if (chan->chan.required_sec_level < BT_SECURITY_L3) {
   2087e:	2a02      	cmp	r2, #2
   20880:	d101      	bne.n	20886 <l2cap_change_security+0x62>
			chan->chan.required_sec_level = BT_SECURITY_L3;
   20882:	2203      	movs	r2, #3
   20884:	e7e0      	b.n	20848 <l2cap_change_security+0x24>
		} else if (chan->chan.required_sec_level < BT_SECURITY_L4) {
   20886:	2a03      	cmp	r2, #3
   20888:	d107      	bne.n	2089a <l2cap_change_security+0x76>
			chan->chan.required_sec_level = BT_SECURITY_L4;
   2088a:	2204      	movs	r2, #4
   2088c:	e7dc      	b.n	20848 <l2cap_change_security+0x24>
		return -EINPROGRESS;
   2088e:	f06f 0043 	mvn.w	r0, #67	; 0x43
   20892:	e7ef      	b.n	20874 <l2cap_change_security+0x50>
	switch (err) {
   20894:	f06f 0015 	mvn.w	r0, #21
   20898:	e7ec      	b.n	20874 <l2cap_change_security+0x50>
			return -EALREADY;
   2089a:	f06f 0044 	mvn.w	r0, #68	; 0x44
   2089e:	e7e9      	b.n	20874 <l2cap_change_security+0x50>

000208a0 <l2cap_chan_tx_resume>:
{
   208a0:	b508      	push	{r3, lr}
   208a2:	4603      	mov	r3, r0
	if (!atomic_get(&ch->tx.credits) ||
   208a4:	3064      	adds	r0, #100	; 0x64
   208a6:	f7ff ff33 	bl	20710 <atomic_get>
   208aa:	b150      	cbz	r0, 208c2 <l2cap_chan_tx_resume+0x22>
   208ac:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   208ae:	b912      	cbnz	r2, 208b6 <l2cap_chan_tx_resume+0x16>
	    (k_fifo_is_empty(&ch->tx_queue) && !ch->tx_buf)) {
   208b0:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
   208b4:	b12a      	cbz	r2, 208c2 <l2cap_chan_tx_resume+0x22>
	k_work_submit_to_queue(&k_sys_work_q, work);
   208b6:	f103 0084 	add.w	r0, r3, #132	; 0x84
}
   208ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   208be:	f7ea be1f 	b.w	b500 <k_work_submit_to_queue.constprop.0>
   208c2:	bd08      	pop	{r3, pc}

000208c4 <l2cap_chan_seg_sent>:
	l2cap_chan_tx_resume(BT_L2CAP_LE_CHAN(chan));
   208c4:	4608      	mov	r0, r1
   208c6:	f7ff bfeb 	b.w	208a0 <l2cap_chan_tx_resume>

000208ca <l2cap_chan_sdu_sent>:
	if (chan->ops->sent) {
   208ca:	684b      	ldr	r3, [r1, #4]
   208cc:	695b      	ldr	r3, [r3, #20]
{
   208ce:	b510      	push	{r4, lr}
   208d0:	460c      	mov	r4, r1
	if (chan->ops->sent) {
   208d2:	b10b      	cbz	r3, 208d8 <l2cap_chan_sdu_sent+0xe>
		chan->ops->sent(chan);
   208d4:	4608      	mov	r0, r1
   208d6:	4798      	blx	r3
	l2cap_chan_tx_resume(BT_L2CAP_LE_CHAN(chan));
   208d8:	4620      	mov	r0, r4
}
   208da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	l2cap_chan_tx_resume(BT_L2CAP_LE_CHAN(chan));
   208de:	f7ff bfdf 	b.w	208a0 <l2cap_chan_tx_resume>

000208e2 <bt_l2cap_chan_remove>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   208e2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
{
   208e4:	b410      	push	{r4}
   208e6:	460c      	mov	r4, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   208e8:	b113      	cbz	r3, 208f0 <bt_l2cap_chan_remove+0xe>
   208ea:	3b08      	subs	r3, #8
   208ec:	2100      	movs	r1, #0
   208ee:	b90b      	cbnz	r3, 208f4 <bt_l2cap_chan_remove+0x12>
}
   208f0:	bc10      	pop	{r4}
   208f2:	4770      	bx	lr
		if (chan == ch) {
   208f4:	42a3      	cmp	r3, r4
   208f6:	f103 0208 	add.w	r2, r3, #8
   208fa:	d103      	bne.n	20904 <bt_l2cap_chan_remove+0x22>
}
   208fc:	bc10      	pop	{r4}
			sys_slist_remove(&conn->channels, prev, &chan->node);
   208fe:	304c      	adds	r0, #76	; 0x4c
   20900:	f7ff bea6 	b.w	20650 <sys_slist_remove>
Z_GENLIST_PEEK_NEXT(slist, snode)
   20904:	2a00      	cmp	r2, #0
   20906:	d0f3      	beq.n	208f0 <bt_l2cap_chan_remove+0xe>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   20908:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2090a:	2b00      	cmp	r3, #0
   2090c:	d0f0      	beq.n	208f0 <bt_l2cap_chan_remove+0xe>
   2090e:	3b08      	subs	r3, #8
   20910:	4611      	mov	r1, r2
   20912:	e7ec      	b.n	208ee <bt_l2cap_chan_remove+0xc>

00020914 <bt_l2cap_chan_del>:
{
   20914:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   20916:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   2091a:	4604      	mov	r4, r0
	if (!chan->conn) {
   2091c:	b123      	cbz	r3, 20928 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   2091e:	686b      	ldr	r3, [r5, #4]
   20920:	b103      	cbz	r3, 20924 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   20922:	4798      	blx	r3
	chan->conn = NULL;
   20924:	2300      	movs	r3, #0
   20926:	6023      	str	r3, [r4, #0]
	chan->state = state;
   20928:	2300      	movs	r3, #0
   2092a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	chan->psm = 0U;
   2092e:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
	if (chan->destroy) {
   20932:	68e3      	ldr	r3, [r4, #12]
   20934:	b10b      	cbz	r3, 2093a <bt_l2cap_chan_del+0x26>
		chan->destroy(chan);
   20936:	4620      	mov	r0, r4
   20938:	4798      	blx	r3
	if (ops->released) {
   2093a:	69eb      	ldr	r3, [r5, #28]
   2093c:	b11b      	cbz	r3, 20946 <bt_l2cap_chan_del+0x32>
		ops->released(chan);
   2093e:	4620      	mov	r0, r4
}
   20940:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   20944:	4718      	bx	r3
}
   20946:	bd70      	pop	{r4, r5, r6, pc}

00020948 <bt_l2cap_disconnected>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   20948:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
{
   2094a:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2094c:	b18b      	cbz	r3, 20972 <bt_l2cap_disconnected+0x2a>
   2094e:	f1b3 0008 	subs.w	r0, r3, #8
   20952:	d00e      	beq.n	20972 <bt_l2cap_disconnected+0x2a>
   20954:	681c      	ldr	r4, [r3, #0]
   20956:	b104      	cbz	r4, 2095a <bt_l2cap_disconnected+0x12>
   20958:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   2095a:	f7ff ffdb 	bl	20914 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2095e:	b144      	cbz	r4, 20972 <bt_l2cap_disconnected+0x2a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   20960:	f114 0308 	adds.w	r3, r4, #8
   20964:	d002      	beq.n	2096c <bt_l2cap_disconnected+0x24>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   20966:	68a3      	ldr	r3, [r4, #8]
   20968:	b103      	cbz	r3, 2096c <bt_l2cap_disconnected+0x24>
   2096a:	3b08      	subs	r3, #8
{
   2096c:	4620      	mov	r0, r4
   2096e:	461c      	mov	r4, r3
   20970:	e7f3      	b.n	2095a <bt_l2cap_disconnected+0x12>
}
   20972:	bd10      	pop	{r4, pc}

00020974 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   20974:	3104      	adds	r1, #4
   20976:	f7ea bc05 	b.w	b184 <bt_conn_create_pdu_timeout>

0002097a <bt_l2cap_send_cb>:
{
   2097a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2097e:	4614      	mov	r4, r2
   20980:	4605      	mov	r5, r0
   20982:	460f      	mov	r7, r1
	hdr = net_buf_push(buf, sizeof(*hdr));
   20984:	f102 0008 	add.w	r0, r2, #8
   20988:	2104      	movs	r1, #4
{
   2098a:	461e      	mov	r6, r3
   2098c:	f8dd 8018 	ldr.w	r8, [sp, #24]
	hdr = net_buf_push(buf, sizeof(*hdr));
   20990:	f001 fe1f 	bl	225d2 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   20994:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   20996:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   20998:	3a04      	subs	r2, #4
   2099a:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   2099c:	4643      	mov	r3, r8
   2099e:	4632      	mov	r2, r6
   209a0:	4621      	mov	r1, r4
   209a2:	4628      	mov	r0, r5
}
   209a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   209a8:	f7e9 bf86 	b.w	a8b8 <bt_conn_send_cb>

000209ac <l2cap_chan_le_send_sdu>:
{
   209ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	total_len = net_buf_frags_len(*buf) + sent;
   209b0:	680c      	ldr	r4, [r1, #0]
{
   209b2:	4607      	mov	r7, r0
	total_len = net_buf_frags_len(*buf) + sent;
   209b4:	4620      	mov	r0, r4
{
   209b6:	4616      	mov	r6, r2
   209b8:	4688      	mov	r8, r1
	total_len = net_buf_frags_len(*buf) + sent;
   209ba:	f7ff fe59 	bl	20670 <net_buf_frags_len>
	if (total_len > ch->tx.mtu) {
   209be:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
	total_len = net_buf_frags_len(*buf) + sent;
   209c2:	eb06 0900 	add.w	r9, r6, r0
	if (total_len > ch->tx.mtu) {
   209c6:	454b      	cmp	r3, r9
   209c8:	db2e      	blt.n	20a28 <l2cap_chan_le_send_sdu+0x7c>
	if (!frag->len && frag->frags) {
   209ca:	89a3      	ldrh	r3, [r4, #12]
   209cc:	b91b      	cbnz	r3, 209d6 <l2cap_chan_le_send_sdu+0x2a>
   209ce:	6823      	ldr	r3, [r4, #0]
   209d0:	2b00      	cmp	r3, #0
   209d2:	bf18      	it	ne
   209d4:	461c      	movne	r4, r3
	if (!sent) {
   209d6:	b986      	cbnz	r6, 209fa <l2cap_chan_le_send_sdu+0x4e>
		ret = l2cap_chan_le_send(ch, frag, BT_L2CAP_SDU_HDR_LEN);
   209d8:	2202      	movs	r2, #2
   209da:	4621      	mov	r1, r4
   209dc:	4638      	mov	r0, r7
   209de:	f7ea fdcf 	bl	b580 <l2cap_chan_le_send>
		if (ret < 0) {
   209e2:	1e05      	subs	r5, r0, #0
   209e4:	da08      	bge.n	209f8 <l2cap_chan_le_send_sdu+0x4c>
			if (ret == -EAGAIN) {
   209e6:	f115 0f0b 	cmn.w	r5, #11
				data_sent(frag)->len = sent;
   209ea:	bf08      	it	eq
   209ec:	82a6      	strheq	r6, [r4, #20]
			*buf = frag;
   209ee:	f8c8 4000 	str.w	r4, [r8]
}
   209f2:	4628      	mov	r0, r5
   209f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		sent = ret;
   209f8:	b2ae      	uxth	r6, r5
	if (!frag->len && frag->frags) {
   209fa:	2500      	movs	r5, #0
	for (ret = 0; sent < total_len; sent += ret) {
   209fc:	454e      	cmp	r6, r9
   209fe:	db03      	blt.n	20a08 <l2cap_chan_le_send_sdu+0x5c>
	net_buf_unref(frag);
   20a00:	4620      	mov	r0, r4
   20a02:	f7fb f869 	bl	1bad8 <net_buf_unref>
	return ret;
   20a06:	e7f4      	b.n	209f2 <l2cap_chan_le_send_sdu+0x46>
		if (!frag->len) {
   20a08:	89a0      	ldrh	r0, [r4, #12]
   20a0a:	b918      	cbnz	r0, 20a14 <l2cap_chan_le_send_sdu+0x68>
			frag = net_buf_frag_del(NULL, frag);
   20a0c:	4621      	mov	r1, r4
   20a0e:	f001 fdb3 	bl	22578 <net_buf_frag_del>
   20a12:	4604      	mov	r4, r0
		ret = l2cap_chan_le_send(ch, frag, 0);
   20a14:	2200      	movs	r2, #0
   20a16:	4621      	mov	r1, r4
   20a18:	4638      	mov	r0, r7
   20a1a:	f7ea fdb1 	bl	b580 <l2cap_chan_le_send>
		if (ret < 0) {
   20a1e:	1e05      	subs	r5, r0, #0
   20a20:	dbe1      	blt.n	209e6 <l2cap_chan_le_send_sdu+0x3a>
	for (ret = 0; sent < total_len; sent += ret) {
   20a22:	442e      	add	r6, r5
   20a24:	b2b6      	uxth	r6, r6
   20a26:	e7e9      	b.n	209fc <l2cap_chan_le_send_sdu+0x50>
		return -EMSGSIZE;
   20a28:	f06f 0523 	mvn.w	r5, #35	; 0x23
   20a2c:	e7e1      	b.n	209f2 <l2cap_chan_le_send_sdu+0x46>

00020a2e <l2cap_chan_tx_process>:
{
   20a2e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   20a30:	4604      	mov	r4, r0
	ch = CONTAINER_OF(work, struct bt_l2cap_le_chan, tx_work);
   20a32:	f1a0 0584 	sub.w	r5, r0, #132	; 0x84
	return net_buf_get(&ch->tx_queue, K_NO_WAIT);
   20a36:	f1a0 061c 	sub.w	r6, r0, #28
		ch->tx_buf = NULL;
   20a3a:	2700      	movs	r7, #0
	if (ch->tx_buf) {
   20a3c:	f854 0c04 	ldr.w	r0, [r4, #-4]
   20a40:	b188      	cbz	r0, 20a66 <l2cap_chan_tx_process+0x38>
		ch->tx_buf = NULL;
   20a42:	f844 7c04 	str.w	r7, [r4, #-4]
	while ((buf = l2cap_chan_le_get_tx_buf(ch))) {
   20a46:	9001      	str	r0, [sp, #4]
   20a48:	b158      	cbz	r0, 20a62 <l2cap_chan_tx_process+0x34>
		sent = l2cap_chan_le_send_sdu(ch, &buf, sent);
   20a4a:	8a82      	ldrh	r2, [r0, #20]
   20a4c:	a901      	add	r1, sp, #4
   20a4e:	4628      	mov	r0, r5
   20a50:	f7ff ffac 	bl	209ac <l2cap_chan_le_send_sdu>
		if (sent < 0) {
   20a54:	2800      	cmp	r0, #0
   20a56:	daf1      	bge.n	20a3c <l2cap_chan_tx_process+0xe>
			if (sent == -EAGAIN) {
   20a58:	300b      	adds	r0, #11
   20a5a:	d102      	bne.n	20a62 <l2cap_chan_tx_process+0x34>
				ch->tx_buf = buf;
   20a5c:	9b01      	ldr	r3, [sp, #4]
   20a5e:	f844 3c04 	str.w	r3, [r4, #-4]
}
   20a62:	b003      	add	sp, #12
   20a64:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return net_buf_get(&ch->tx_queue, K_NO_WAIT);
   20a66:	2200      	movs	r2, #0
   20a68:	2300      	movs	r3, #0
   20a6a:	4630      	mov	r0, r6
   20a6c:	f001 fd2d 	bl	224ca <net_buf_get>
   20a70:	e7e9      	b.n	20a46 <l2cap_chan_tx_process+0x18>

00020a72 <bt_l2cap_send.constprop.0>:
 * ignored.
 */
int bt_l2cap_send_cb(struct bt_conn *conn, uint16_t cid, struct net_buf *buf,
		     bt_conn_tx_cb_t cb, void *user_data);

static inline void bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
   20a72:	b507      	push	{r0, r1, r2, lr}
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   20a74:	2300      	movs	r3, #0
static inline void bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
   20a76:	460a      	mov	r2, r1
	bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   20a78:	9300      	str	r3, [sp, #0]
   20a7a:	2105      	movs	r1, #5
   20a7c:	f7ff ff7d 	bl	2097a <bt_l2cap_send_cb>
}
   20a80:	b003      	add	sp, #12
   20a82:	f85d fb04 	ldr.w	pc, [sp], #4

00020a86 <l2cap_send_reject>:
{
   20a86:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   20a8a:	f89d 9020 	ldrb.w	r9, [sp, #32]
   20a8e:	4606      	mov	r6, r0
   20a90:	4617      	mov	r7, r2
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   20a92:	2001      	movs	r0, #1
   20a94:	f109 0202 	add.w	r2, r9, #2
{
   20a98:	461d      	mov	r5, r3
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   20a9a:	f7ea fce1 	bl	b460 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
   20a9e:	4604      	mov	r4, r0
   20aa0:	b190      	cbz	r0, 20ac8 <l2cap_send_reject+0x42>
	rej = net_buf_add(buf, sizeof(*rej));
   20aa2:	f100 0808 	add.w	r8, r0, #8
   20aa6:	2102      	movs	r1, #2
   20aa8:	4640      	mov	r0, r8
   20aaa:	f001 fd71 	bl	22590 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   20aae:	8007      	strh	r7, [r0, #0]
	if (data) {
   20ab0:	b125      	cbz	r5, 20abc <l2cap_send_reject+0x36>
		net_buf_add_mem(buf, data, data_len);
   20ab2:	464a      	mov	r2, r9
   20ab4:	4629      	mov	r1, r5
   20ab6:	4640      	mov	r0, r8
   20ab8:	f001 fd70 	bl	2259c <net_buf_simple_add_mem>
	bt_l2cap_send(conn, BT_L2CAP_CID_LE_SIG, buf);
   20abc:	4621      	mov	r1, r4
   20abe:	4630      	mov	r0, r6
}
   20ac0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	bt_l2cap_send(conn, BT_L2CAP_CID_LE_SIG, buf);
   20ac4:	f7ff bfd5 	b.w	20a72 <bt_l2cap_send.constprop.0>
}
   20ac8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00020acc <l2cap_ecred_conn_req>:
{
   20acc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   20ad0:	460d      	mov	r5, r1
	if (!chan || !channels) {
   20ad2:	4604      	mov	r4, r0
   20ad4:	b3b0      	cbz	r0, 20b44 <l2cap_ecred_conn_req+0x78>
   20ad6:	b3a9      	cbz	r1, 20b44 <l2cap_ecred_conn_req+0x78>
	ident = get_ident();
   20ad8:	f7ea fc78 	bl	b3cc <get_ident>
				      sizeof(*req) +
   20adc:	1d0a      	adds	r2, r1, #4
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_ECRED_CONN_REQ, ident,
   20ade:	0052      	lsls	r2, r2, #1
   20ae0:	b292      	uxth	r2, r2
   20ae2:	4601      	mov	r1, r0
	ident = get_ident();
   20ae4:	4606      	mov	r6, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_ECRED_CONN_REQ, ident,
   20ae6:	2017      	movs	r0, #23
   20ae8:	f7ea fcba 	bl	b460 <l2cap_create_le_sig_pdu.isra.0>
	req = net_buf_add(buf, sizeof(*req));
   20aec:	f100 0908 	add.w	r9, r0, #8
   20af0:	2108      	movs	r1, #8
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_ECRED_CONN_REQ, ident,
   20af2:	4607      	mov	r7, r0
	req = net_buf_add(buf, sizeof(*req));
   20af4:	4648      	mov	r0, r9
   20af6:	f001 fd4b 	bl	22590 <net_buf_simple_add>
	ch = BT_L2CAP_LE_CHAN(chan[0]);
   20afa:	6822      	ldr	r2, [r4, #0]
	req->psm = sys_cpu_to_le16(ch->chan.psm);
   20afc:	f8b2 1046 	ldrh.w	r1, [r2, #70]	; 0x46
   20b00:	8001      	strh	r1, [r0, #0]
	req->mtu = sys_cpu_to_le16(ch->rx.mtu);
   20b02:	f8b2 1052 	ldrh.w	r1, [r2, #82]	; 0x52
   20b06:	8041      	strh	r1, [r0, #2]
	req->mps = sys_cpu_to_le16(ch->rx.mps);
   20b08:	f8b2 1054 	ldrh.w	r1, [r2, #84]	; 0x54
	req->credits = sys_cpu_to_le16(ch->rx.init_credits);
   20b0c:	f8b2 2056 	ldrh.w	r2, [r2, #86]	; 0x56
	req->mps = sys_cpu_to_le16(ch->rx.mps);
   20b10:	8081      	strh	r1, [r0, #4]
	req->credits = sys_cpu_to_le16(ch->rx.init_credits);
   20b12:	80c2      	strh	r2, [r0, #6]
	for (i = 0; i < channels; i++) {
   20b14:	46a0      	mov	r8, r4
   20b16:	eb04 0585 	add.w	r5, r4, r5, lsl #2
		ch = BT_L2CAP_LE_CHAN(chan[i]);
   20b1a:	f858 3b04 	ldr.w	r3, [r8], #4
		net_buf_add_le16(buf, ch->rx.cid);
   20b1e:	4648      	mov	r0, r9
   20b20:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
		ch->chan.ident = ident;
   20b24:	f883 6048 	strb.w	r6, [r3, #72]	; 0x48
		net_buf_add_le16(buf, ch->rx.cid);
   20b28:	f001 fd49 	bl	225be <net_buf_simple_add_le16>
	for (i = 0; i < channels; i++) {
   20b2c:	4545      	cmp	r5, r8
   20b2e:	d1f4      	bne.n	20b1a <l2cap_ecred_conn_req+0x4e>
	l2cap_chan_send_req(*chan, buf, L2CAP_CONN_TIMEOUT);
   20b30:	6820      	ldr	r0, [r4, #0]
   20b32:	f44f 12a0 	mov.w	r2, #1310720	; 0x140000
   20b36:	2300      	movs	r3, #0
   20b38:	4639      	mov	r1, r7
   20b3a:	f7ea fe0d 	bl	b758 <l2cap_chan_send_req>
	return 0;
   20b3e:	2000      	movs	r0, #0
}
   20b40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EINVAL;
   20b44:	f06f 0015 	mvn.w	r0, #21
   20b48:	e7fa      	b.n	20b40 <l2cap_ecred_conn_req+0x74>

00020b4a <l2cap_le_conn_req>:
{
   20b4a:	b538      	push	{r3, r4, r5, lr}
   20b4c:	4604      	mov	r4, r0
	ch->chan.ident = get_ident();
   20b4e:	f7ea fc3d 	bl	b3cc <get_ident>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_LE_CONN_REQ,
   20b52:	220a      	movs	r2, #10
	ch->chan.ident = get_ident();
   20b54:	4601      	mov	r1, r0
   20b56:	f884 0048 	strb.w	r0, [r4, #72]	; 0x48
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_LE_CONN_REQ,
   20b5a:	2014      	movs	r0, #20
   20b5c:	f7ea fc80 	bl	b460 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
   20b60:	4605      	mov	r5, r0
   20b62:	b1d8      	cbz	r0, 20b9c <l2cap_le_conn_req+0x52>
	req = net_buf_add(buf, sizeof(*req));
   20b64:	210a      	movs	r1, #10
   20b66:	3008      	adds	r0, #8
   20b68:	f001 fd12 	bl	22590 <net_buf_simple_add>
	req->psm = sys_cpu_to_le16(ch->chan.psm);
   20b6c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
   20b70:	8003      	strh	r3, [r0, #0]
	req->scid = sys_cpu_to_le16(ch->rx.cid);
   20b72:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
   20b76:	8043      	strh	r3, [r0, #2]
	req->mtu = sys_cpu_to_le16(ch->rx.mtu);
   20b78:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
   20b7c:	8083      	strh	r3, [r0, #4]
	req->mps = sys_cpu_to_le16(ch->rx.mps);
   20b7e:	f8b4 3054 	ldrh.w	r3, [r4, #84]	; 0x54
   20b82:	80c3      	strh	r3, [r0, #6]
	req->credits = sys_cpu_to_le16(ch->rx.init_credits);
   20b84:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
   20b88:	8103      	strh	r3, [r0, #8]
	l2cap_chan_send_req(&ch->chan, buf, L2CAP_CONN_TIMEOUT);
   20b8a:	f44f 12a0 	mov.w	r2, #1310720	; 0x140000
   20b8e:	4620      	mov	r0, r4
   20b90:	2300      	movs	r3, #0
   20b92:	4629      	mov	r1, r5
   20b94:	f7ea fde0 	bl	b758 <l2cap_chan_send_req>
	return 0;
   20b98:	2000      	movs	r0, #0
}
   20b9a:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOMEM;
   20b9c:	f06f 000b 	mvn.w	r0, #11
   20ba0:	e7fb      	b.n	20b9a <l2cap_le_conn_req+0x50>

00020ba2 <bt_l2cap_encrypt_change>:
{
   20ba2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   20ba6:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
{
   20ba8:	b086      	sub	sp, #24
   20baa:	460f      	mov	r7, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   20bac:	b10c      	cbz	r4, 20bb2 <bt_l2cap_encrypt_change+0x10>
   20bae:	3c08      	subs	r4, #8
   20bb0:	b914      	cbnz	r4, 20bb8 <bt_l2cap_encrypt_change+0x16>
}
   20bb2:	b006      	add	sp, #24
   20bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   20bb8:	f104 0340 	add.w	r3, r4, #64	; 0x40
   20bbc:	f3bf 8f5b 	dmb	ish
   20bc0:	e853 2f00 	ldrex	r2, [r3]
   20bc4:	f022 0104 	bic.w	r1, r2, #4
   20bc8:	e843 1000 	strex	r0, r1, [r3]
   20bcc:	2800      	cmp	r0, #0
   20bce:	d1f7      	bne.n	20bc0 <bt_l2cap_encrypt_change+0x1e>
   20bd0:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_clear_bit(chan->status,
   20bd4:	0753      	lsls	r3, r2, #29
   20bd6:	d507      	bpl.n	20be8 <bt_l2cap_encrypt_change+0x46>
	if (status) {
   20bd8:	b18f      	cbz	r7, 20bfe <bt_l2cap_encrypt_change+0x5c>
		bt_l2cap_chan_remove(chan->conn, chan);
   20bda:	6820      	ldr	r0, [r4, #0]
   20bdc:	4621      	mov	r1, r4
   20bde:	f7ff fe80 	bl	208e2 <bt_l2cap_chan_remove>
		bt_l2cap_chan_del(chan);
   20be2:	4620      	mov	r0, r4
   20be4:	f7ff fe96 	bl	20914 <bt_l2cap_chan_del>
		if (chan->ops->encrypt_change) {
   20be8:	6863      	ldr	r3, [r4, #4]
   20bea:	689b      	ldr	r3, [r3, #8]
   20bec:	b113      	cbz	r3, 20bf4 <bt_l2cap_encrypt_change+0x52>
			chan->ops->encrypt_change(chan, hci_status);
   20bee:	4639      	mov	r1, r7
   20bf0:	4620      	mov	r0, r4
   20bf2:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   20bf4:	f114 0f08 	cmn.w	r4, #8
   20bf8:	d0db      	beq.n	20bb2 <bt_l2cap_encrypt_change+0x10>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   20bfa:	68a4      	ldr	r4, [r4, #8]
   20bfc:	e7d6      	b.n	20bac <bt_l2cap_encrypt_change+0xa>
	if (chan->ident) {
   20bfe:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
   20c02:	b193      	cbz	r3, 20c2a <bt_l2cap_encrypt_change+0x88>
   20c04:	ae01      	add	r6, sp, #4
		int i = 0;
   20c06:	463d      	mov	r5, r7
   20c08:	46b0      	mov	r8, r6
		while ((ch = l2cap_remove_ident(chan->conn, chan->ident))) {
   20c0a:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
   20c0e:	6820      	ldr	r0, [r4, #0]
   20c10:	2201      	movs	r2, #1
   20c12:	f7ff fd35 	bl	20680 <__l2cap_lookup_ident>
   20c16:	b920      	cbnz	r0, 20c22 <bt_l2cap_encrypt_change+0x80>
		l2cap_ecred_conn_req(echan, i);
   20c18:	4629      	mov	r1, r5
   20c1a:	4640      	mov	r0, r8
   20c1c:	f7ff ff56 	bl	20acc <l2cap_ecred_conn_req>
		return;
   20c20:	e7e2      	b.n	20be8 <bt_l2cap_encrypt_change+0x46>
			echan[i++] = &ch->chan;
   20c22:	f846 0b04 	str.w	r0, [r6], #4
   20c26:	3501      	adds	r5, #1
   20c28:	e7ef      	b.n	20c0a <bt_l2cap_encrypt_change+0x68>
	l2cap_le_conn_req(BT_L2CAP_LE_CHAN(chan));
   20c2a:	4620      	mov	r0, r4
   20c2c:	f7ff ff8d 	bl	20b4a <l2cap_le_conn_req>
   20c30:	e7da      	b.n	20be8 <bt_l2cap_encrypt_change+0x46>

00020c32 <bt_l2cap_le_lookup_tx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   20c32:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   20c34:	b160      	cbz	r0, 20c50 <bt_l2cap_le_lookup_tx_cid+0x1e>
   20c36:	3808      	subs	r0, #8
   20c38:	b900      	cbnz	r0, 20c3c <bt_l2cap_le_lookup_tx_cid+0xa>
   20c3a:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   20c3c:	f8b0 305c 	ldrh.w	r3, [r0, #92]	; 0x5c
   20c40:	428b      	cmp	r3, r1
   20c42:	d005      	beq.n	20c50 <bt_l2cap_le_lookup_tx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   20c44:	f110 0308 	adds.w	r3, r0, #8
   20c48:	d001      	beq.n	20c4e <bt_l2cap_le_lookup_tx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   20c4a:	6880      	ldr	r0, [r0, #8]
   20c4c:	e7f2      	b.n	20c34 <bt_l2cap_le_lookup_tx_cid+0x2>
	return NULL;
   20c4e:	4618      	mov	r0, r3
}
   20c50:	4770      	bx	lr

00020c52 <bt_l2cap_le_lookup_rx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   20c52:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   20c54:	b160      	cbz	r0, 20c70 <bt_l2cap_le_lookup_rx_cid+0x1e>
   20c56:	3808      	subs	r0, #8
   20c58:	b900      	cbnz	r0, 20c5c <bt_l2cap_le_lookup_rx_cid+0xa>
   20c5a:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   20c5c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
   20c60:	428b      	cmp	r3, r1
   20c62:	d005      	beq.n	20c70 <bt_l2cap_le_lookup_rx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   20c64:	f110 0308 	adds.w	r3, r0, #8
   20c68:	d001      	beq.n	20c6e <bt_l2cap_le_lookup_rx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   20c6a:	6880      	ldr	r0, [r0, #8]
   20c6c:	e7f2      	b.n	20c54 <bt_l2cap_le_lookup_rx_cid+0x2>
	return NULL;
   20c6e:	4618      	mov	r0, r3
}
   20c70:	4770      	bx	lr

00020c72 <bt_l2cap_update_conn_param>:
{
   20c72:	b570      	push	{r4, r5, r6, lr}
   20c74:	460c      	mov	r4, r1
   20c76:	4606      	mov	r6, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   20c78:	f7ea fba8 	bl	b3cc <get_ident>
   20c7c:	2208      	movs	r2, #8
   20c7e:	4601      	mov	r1, r0
   20c80:	2012      	movs	r0, #18
   20c82:	f7ea fbed 	bl	b460 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
   20c86:	4605      	mov	r5, r0
   20c88:	b188      	cbz	r0, 20cae <bt_l2cap_update_conn_param+0x3c>
	req = net_buf_add(buf, sizeof(*req));
   20c8a:	2108      	movs	r1, #8
   20c8c:	4408      	add	r0, r1
   20c8e:	f001 fc7f 	bl	22590 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   20c92:	8822      	ldrh	r2, [r4, #0]
   20c94:	8002      	strh	r2, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   20c96:	8862      	ldrh	r2, [r4, #2]
   20c98:	8042      	strh	r2, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   20c9a:	88a2      	ldrh	r2, [r4, #4]
   20c9c:	8082      	strh	r2, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   20c9e:	88e2      	ldrh	r2, [r4, #6]
   20ca0:	80c2      	strh	r2, [r0, #6]
	bt_l2cap_send(conn, BT_L2CAP_CID_LE_SIG, buf);
   20ca2:	4629      	mov	r1, r5
   20ca4:	4630      	mov	r0, r6
   20ca6:	f7ff fee4 	bl	20a72 <bt_l2cap_send.constprop.0>
	return 0;
   20caa:	2000      	movs	r0, #0
}
   20cac:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   20cae:	f06f 000b 	mvn.w	r0, #11
   20cb2:	e7fb      	b.n	20cac <bt_l2cap_update_conn_param+0x3a>

00020cb4 <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   20cb4:	4770      	bx	lr

00020cb6 <bt_l2cap_chan_disconnect>:

	return l2cap_le_connect(conn, BT_L2CAP_LE_CHAN(chan), psm);
}

int bt_l2cap_chan_disconnect(struct bt_l2cap_chan *chan)
{
   20cb6:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn *conn = chan->conn;
	struct net_buf *buf;
	struct bt_l2cap_disconn_req *req;
	struct bt_l2cap_le_chan *ch;

	if (!conn) {
   20cb8:	6803      	ldr	r3, [r0, #0]
{
   20cba:	4604      	mov	r4, r0
	if (!conn) {
   20cbc:	b303      	cbz	r3, 20d00 <bt_l2cap_chan_disconnect+0x4a>
	ch = BT_L2CAP_LE_CHAN(chan);

	BT_DBG("chan %p scid 0x%04x dcid 0x%04x", chan, ch->rx.cid,
	       ch->tx.cid);

	ch->chan.ident = get_ident();
   20cbe:	f7ea fb85 	bl	b3cc <get_ident>

	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_DISCONN_REQ,
   20cc2:	2204      	movs	r2, #4
	ch->chan.ident = get_ident();
   20cc4:	4601      	mov	r1, r0
   20cc6:	f884 0048 	strb.w	r0, [r4, #72]	; 0x48
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_DISCONN_REQ,
   20cca:	2006      	movs	r0, #6
   20ccc:	f7ea fbc8 	bl	b460 <l2cap_create_le_sig_pdu.isra.0>
				      ch->chan.ident, sizeof(*req));
	if (!buf) {
   20cd0:	4605      	mov	r5, r0
   20cd2:	b1c0      	cbz	r0, 20d06 <bt_l2cap_chan_disconnect+0x50>
		return -ENOMEM;
	}

	req = net_buf_add(buf, sizeof(*req));
   20cd4:	2104      	movs	r1, #4
   20cd6:	3008      	adds	r0, #8
   20cd8:	f001 fc5a 	bl	22590 <net_buf_simple_add>
	req->dcid = sys_cpu_to_le16(ch->rx.cid);
   20cdc:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
   20ce0:	8003      	strh	r3, [r0, #0]
	req->scid = sys_cpu_to_le16(ch->tx.cid);
   20ce2:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
   20ce6:	8043      	strh	r3, [r0, #2]

	l2cap_chan_send_req(chan, buf, L2CAP_DISC_TIMEOUT);
   20ce8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   20cec:	2300      	movs	r3, #0
   20cee:	4620      	mov	r0, r4
   20cf0:	4629      	mov	r1, r5
   20cf2:	f7ea fd31 	bl	b758 <l2cap_chan_send_req>
	chan->state = state;
   20cf6:	2304      	movs	r3, #4
   20cf8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	bt_l2cap_chan_set_state(chan, BT_L2CAP_DISCONNECT);

	return 0;
   20cfc:	2000      	movs	r0, #0
}
   20cfe:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTCONN;
   20d00:	f06f 0038 	mvn.w	r0, #56	; 0x38
   20d04:	e7fb      	b.n	20cfe <bt_l2cap_chan_disconnect+0x48>
		return -ENOMEM;
   20d06:	f06f 000b 	mvn.w	r0, #11
   20d0a:	e7f8      	b.n	20cfe <bt_l2cap_chan_disconnect+0x48>

00020d0c <l2cap_rx_process>:
{
   20d0c:	b570      	push	{r4, r5, r6, lr}
	struct bt_l2cap_le_chan *ch = CHAN_RX(work);
   20d0e:	f1a0 0698 	sub.w	r6, r0, #152	; 0x98
	while ((buf = net_buf_get(&ch->rx_queue, K_NO_WAIT))) {
   20d12:	f100 040c 	add.w	r4, r0, #12
   20d16:	2200      	movs	r2, #0
   20d18:	2300      	movs	r3, #0
   20d1a:	4620      	mov	r0, r4
   20d1c:	f001 fbd5 	bl	224ca <net_buf_get>
   20d20:	4605      	mov	r5, r0
   20d22:	b900      	cbnz	r0, 20d26 <l2cap_rx_process+0x1a>
}
   20d24:	bd70      	pop	{r4, r5, r6, pc}
		l2cap_chan_le_recv(ch, buf);
   20d26:	4630      	mov	r0, r6
   20d28:	4629      	mov	r1, r5
   20d2a:	f7ea ff51 	bl	bbd0 <l2cap_chan_le_recv>
		net_buf_unref(buf);
   20d2e:	4628      	mov	r0, r5
   20d30:	f7fa fed2 	bl	1bad8 <net_buf_unref>
   20d34:	e7ef      	b.n	20d16 <l2cap_rx_process+0xa>

00020d36 <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   20d36:	4603      	mov	r3, r0
Z_GENLIST_IS_EMPTY(slist)
   20d38:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   20d3a:	b128      	cbz	r0, 20d48 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   20d3c:	6859      	ldr	r1, [r3, #4]
   20d3e:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   20d40:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   20d42:	4288      	cmp	r0, r1
	list->tail = node;
   20d44:	bf08      	it	eq
   20d46:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   20d48:	4770      	bx	lr

00020d4a <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   20d4a:	4603      	mov	r3, r0
   20d4c:	6800      	ldr	r0, [r0, #0]
   20d4e:	2200      	movs	r2, #0
   20d50:	b900      	cbnz	r0, 20d54 <sys_slist_find_and_remove+0xa>
   20d52:	4770      	bx	lr
   20d54:	4288      	cmp	r0, r1
   20d56:	d110      	bne.n	20d7a <sys_slist_find_and_remove+0x30>
Z_GENLIST_REMOVE(slist, snode)
   20d58:	6808      	ldr	r0, [r1, #0]
   20d5a:	b942      	cbnz	r2, 20d6e <sys_slist_find_and_remove+0x24>
   20d5c:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   20d5e:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   20d60:	4291      	cmp	r1, r2
   20d62:	d100      	bne.n	20d66 <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   20d64:	6058      	str	r0, [r3, #4]
	parent->next = child;
   20d66:	2300      	movs	r3, #0
   20d68:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   20d6a:	2001      	movs	r0, #1
Z_GENLIST_REMOVE(slist, snode)
   20d6c:	4770      	bx	lr
	parent->next = child;
   20d6e:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   20d70:	6858      	ldr	r0, [r3, #4]
   20d72:	4281      	cmp	r1, r0
	list->tail = node;
   20d74:	bf08      	it	eq
   20d76:	605a      	streq	r2, [r3, #4]
}
   20d78:	e7f5      	b.n	20d66 <sys_slist_find_and_remove+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   20d7a:	4602      	mov	r2, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   20d7c:	6800      	ldr	r0, [r0, #0]
   20d7e:	e7e7      	b.n	20d50 <sys_slist_find_and_remove+0x6>

00020d80 <net_buf_frags_len>:
{
   20d80:	4603      	mov	r3, r0
	size_t bytes = 0;
   20d82:	2000      	movs	r0, #0
	while (buf) {
   20d84:	b903      	cbnz	r3, 20d88 <net_buf_frags_len+0x8>
}
   20d86:	4770      	bx	lr
		bytes += buf->len;
   20d88:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   20d8a:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   20d8c:	4410      	add	r0, r2
		buf = buf->frags;
   20d8e:	e7f9      	b.n	20d84 <net_buf_frags_len+0x4>

00020d90 <att_sent>:
	if (chan->ops->sent) {
   20d90:	684b      	ldr	r3, [r1, #4]
   20d92:	695b      	ldr	r3, [r3, #20]
{
   20d94:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   20d96:	b103      	cbz	r3, 20d9a <att_sent+0xa>
		chan->ops->sent(chan);
   20d98:	4718      	bx	r3
}
   20d9a:	4770      	bx	lr

00020d9c <attr_read_type_cb>:
{
   20d9c:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   20d9e:	68d4      	ldr	r4, [r2, #12]
   20da0:	7823      	ldrb	r3, [r4, #0]
   20da2:	3102      	adds	r1, #2
   20da4:	b913      	cbnz	r3, 20dac <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   20da6:	7021      	strb	r1, [r4, #0]
	return true;
   20da8:	2001      	movs	r0, #1
   20daa:	e006      	b.n	20dba <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   20dac:	428b      	cmp	r3, r1
   20dae:	d0fb      	beq.n	20da8 <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   20db0:	8983      	ldrh	r3, [r0, #12]
   20db2:	3b02      	subs	r3, #2
   20db4:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   20db6:	2000      	movs	r0, #0
   20db8:	6110      	str	r0, [r2, #16]
}
   20dba:	bd10      	pop	{r4, pc}

00020dbc <att_op_get_type>:
	switch (op) {
   20dbc:	281e      	cmp	r0, #30
   20dbe:	d816      	bhi.n	20dee <att_op_get_type+0x32>
   20dc0:	b308      	cbz	r0, 20e06 <att_op_get_type+0x4a>
   20dc2:	1e43      	subs	r3, r0, #1
   20dc4:	2b1d      	cmp	r3, #29
   20dc6:	d81e      	bhi.n	20e06 <att_op_get_type+0x4a>
   20dc8:	e8df f003 	tbb	[pc, r3]
   20dcc:	23172317 	.word	0x23172317
   20dd0:	23172317 	.word	0x23172317
   20dd4:	23172317 	.word	0x23172317
   20dd8:	23172317 	.word	0x23172317
   20ddc:	1d172317 	.word	0x1d172317
   20de0:	2317231d 	.word	0x2317231d
   20de4:	1d191d17 	.word	0x1d191d17
   20de8:	0f1b      	.short	0x0f1b
   20dea:	2004      	movs	r0, #4
   20dec:	4770      	bx	lr
   20dee:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   20df2:	2b52      	cmp	r3, #82	; 0x52
   20df4:	d107      	bne.n	20e06 <att_op_get_type+0x4a>
		return ATT_COMMAND;
   20df6:	2000      	movs	r0, #0
}
   20df8:	4770      	bx	lr
		return ATT_RESPONSE;
   20dfa:	2002      	movs	r0, #2
   20dfc:	4770      	bx	lr
		return ATT_NOTIFICATION;
   20dfe:	2003      	movs	r0, #3
   20e00:	4770      	bx	lr
		return ATT_INDICATION;
   20e02:	2005      	movs	r0, #5
   20e04:	4770      	bx	lr
		return ATT_COMMAND;
   20e06:	f010 0f40 	tst.w	r0, #64	; 0x40
   20e0a:	bf0c      	ite	eq
   20e0c:	2006      	moveq	r0, #6
   20e0e:	2000      	movne	r0, #0
   20e10:	4770      	bx	lr
		return ATT_REQUEST;
   20e12:	2001      	movs	r0, #1
   20e14:	4770      	bx	lr

00020e16 <att_notify_mult>:
{
   20e16:	b508      	push	{r3, lr}
	bt_gatt_mult_notification(chan->att->conn, buf->data, buf->len);
   20e18:	6803      	ldr	r3, [r0, #0]
   20e1a:	898a      	ldrh	r2, [r1, #12]
   20e1c:	6818      	ldr	r0, [r3, #0]
   20e1e:	6889      	ldr	r1, [r1, #8]
   20e20:	f7ed fb72 	bl	e508 <bt_gatt_mult_notification>
}
   20e24:	2000      	movs	r0, #0
   20e26:	bd08      	pop	{r3, pc}

00020e28 <att_notify>:
{
   20e28:	b538      	push	{r3, r4, r5, lr}
   20e2a:	4605      	mov	r5, r0
	handle = net_buf_pull_le16(buf);
   20e2c:	f101 0008 	add.w	r0, r1, #8
{
   20e30:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
   20e32:	f001 fbfa 	bl	2262a <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   20e36:	682d      	ldr	r5, [r5, #0]
   20e38:	89a3      	ldrh	r3, [r4, #12]
   20e3a:	68a2      	ldr	r2, [r4, #8]
	handle = net_buf_pull_le16(buf);
   20e3c:	4601      	mov	r1, r0
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   20e3e:	6828      	ldr	r0, [r5, #0]
   20e40:	f000 fe9d 	bl	21b7e <bt_gatt_notification>
}
   20e44:	2000      	movs	r0, #0
   20e46:	bd38      	pop	{r3, r4, r5, pc}

00020e48 <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   20e48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   20e4a:	e9cd 2301 	strd	r2, r3, [sp, #4]
   20e4e:	2300      	movs	r3, #0
   20e50:	9300      	str	r3, [sp, #0]
   20e52:	461a      	mov	r2, r3
   20e54:	f7ed f968 	bl	e128 <bt_gatt_foreach_attr_type>
				  user_data);
}
   20e58:	b005      	add	sp, #20
   20e5a:	f85d fb04 	ldr.w	pc, [sp], #4

00020e5e <find_info_cb>:
	if (!data->rsp) {
   20e5e:	688b      	ldr	r3, [r1, #8]
{
   20e60:	b570      	push	{r4, r5, r6, lr}
	struct bt_att_chan *chan = data->chan;
   20e62:	680e      	ldr	r6, [r1, #0]
{
   20e64:	4605      	mov	r5, r0
   20e66:	460c      	mov	r4, r1
	if (!data->rsp) {
   20e68:	b963      	cbnz	r3, 20e84 <find_info_cb+0x26>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   20e6a:	6848      	ldr	r0, [r1, #4]
   20e6c:	2101      	movs	r1, #1
   20e6e:	3008      	adds	r0, #8
   20e70:	f001 fb8e 	bl	22590 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   20e74:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   20e76:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   20e78:	781b      	ldrb	r3, [r3, #0]
   20e7a:	2b00      	cmp	r3, #0
   20e7c:	bf0c      	ite	eq
   20e7e:	2301      	moveq	r3, #1
   20e80:	2302      	movne	r3, #2
   20e82:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   20e84:	68a3      	ldr	r3, [r4, #8]
   20e86:	781b      	ldrb	r3, [r3, #0]
   20e88:	2b01      	cmp	r3, #1
   20e8a:	d003      	beq.n	20e94 <find_info_cb+0x36>
   20e8c:	2b02      	cmp	r3, #2
   20e8e:	d01a      	beq.n	20ec6 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   20e90:	2000      	movs	r0, #0
   20e92:	e017      	b.n	20ec4 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   20e94:	682b      	ldr	r3, [r5, #0]
   20e96:	781b      	ldrb	r3, [r3, #0]
   20e98:	2b00      	cmp	r3, #0
   20e9a:	d1f9      	bne.n	20e90 <find_info_cb+0x32>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   20e9c:	6860      	ldr	r0, [r4, #4]
   20e9e:	2104      	movs	r1, #4
   20ea0:	3008      	adds	r0, #8
   20ea2:	f001 fb75 	bl	22590 <net_buf_simple_add>
		data->info16->handle = sys_cpu_to_le16(attr->handle);
   20ea6:	8a2b      	ldrh	r3, [r5, #16]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   20ea8:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(attr->handle);
   20eaa:	8003      	strh	r3, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   20eac:	682b      	ldr	r3, [r5, #0]
   20eae:	885b      	ldrh	r3, [r3, #2]
   20eb0:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   20eb2:	6863      	ldr	r3, [r4, #4]
   20eb4:	f8b6 0066 	ldrh.w	r0, [r6, #102]	; 0x66
   20eb8:	899b      	ldrh	r3, [r3, #12]
   20eba:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   20ebc:	2804      	cmp	r0, #4
   20ebe:	bf94      	ite	ls
   20ec0:	2000      	movls	r0, #0
   20ec2:	2001      	movhi	r0, #1
}
   20ec4:	bd70      	pop	{r4, r5, r6, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   20ec6:	682b      	ldr	r3, [r5, #0]
   20ec8:	781b      	ldrb	r3, [r3, #0]
   20eca:	2b02      	cmp	r3, #2
   20ecc:	d1e0      	bne.n	20e90 <find_info_cb+0x32>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   20ece:	6860      	ldr	r0, [r4, #4]
   20ed0:	2112      	movs	r1, #18
   20ed2:	3008      	adds	r0, #8
   20ed4:	f001 fb5c 	bl	22590 <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   20ed8:	6829      	ldr	r1, [r5, #0]
		data->info128->handle = sys_cpu_to_le16(attr->handle);
   20eda:	8a2b      	ldrh	r3, [r5, #16]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   20edc:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   20ede:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(attr->handle);
   20ee0:	f820 3b02 	strh.w	r3, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   20ee4:	3101      	adds	r1, #1
   20ee6:	f7fe ffc2 	bl	1fe6e <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   20eea:	6863      	ldr	r3, [r4, #4]
   20eec:	f8b6 0066 	ldrh.w	r0, [r6, #102]	; 0x66
   20ef0:	899b      	ldrh	r3, [r3, #12]
   20ef2:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   20ef4:	2812      	cmp	r0, #18
   20ef6:	e7e2      	b.n	20ebe <find_info_cb+0x60>

00020ef8 <att_chan_read>:
{
   20ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20efc:	4680      	mov	r8, r0
   20efe:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   20f00:	4610      	mov	r0, r2
{
   20f02:	4699      	mov	r9, r3
   20f04:	468b      	mov	fp, r1
   20f06:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   20f08:	f7ff ff3a 	bl	20d80 <net_buf_frags_len>
   20f0c:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
   20f10:	4283      	cmp	r3, r0
   20f12:	d97a      	bls.n	2100a <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   20f14:	f8d8 3008 	ldr.w	r3, [r8, #8]
   20f18:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   20f1a:	4630      	mov	r0, r6
   20f1c:	f001 fb0a 	bl	22534 <net_buf_frag_last>
	size_t len, total = 0;
   20f20:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   20f24:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   20f26:	4630      	mov	r0, r6
   20f28:	f7ff ff2a 	bl	20d80 <net_buf_frags_len>
   20f2c:	f8b8 4066 	ldrh.w	r4, [r8, #102]	; 0x66
   20f30:	f105 0708 	add.w	r7, r5, #8
   20f34:	1a24      	subs	r4, r4, r0
   20f36:	4638      	mov	r0, r7
   20f38:	f001 fb83 	bl	22642 <net_buf_simple_tailroom>
   20f3c:	4284      	cmp	r4, r0
   20f3e:	d211      	bcs.n	20f64 <att_chan_read+0x6c>
   20f40:	4630      	mov	r0, r6
   20f42:	f7ff ff1d 	bl	20d80 <net_buf_frags_len>
   20f46:	f8b8 4066 	ldrh.w	r4, [r8, #102]	; 0x66
   20f4a:	1a24      	subs	r4, r4, r0
		if (!len) {
   20f4c:	bb34      	cbnz	r4, 20f9c <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   20f4e:	79b0      	ldrb	r0, [r6, #6]
   20f50:	f7fa fd06 	bl	1b960 <net_buf_pool_get>
   20f54:	2200      	movs	r2, #0
   20f56:	2300      	movs	r3, #0
   20f58:	f001 fab2 	bl	224c0 <net_buf_alloc_fixed>
			if (!frag) {
   20f5c:	4605      	mov	r5, r0
   20f5e:	b930      	cbnz	r0, 20f6e <att_chan_read+0x76>
	return total;
   20f60:	4657      	mov	r7, sl
   20f62:	e02c      	b.n	20fbe <att_chan_read+0xc6>
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   20f64:	4638      	mov	r0, r7
   20f66:	f001 fb6c 	bl	22642 <net_buf_simple_tailroom>
   20f6a:	4604      	mov	r4, r0
   20f6c:	e7ee      	b.n	20f4c <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   20f6e:	4601      	mov	r1, r0
   20f70:	4630      	mov	r0, r6
   20f72:	f001 faf0 	bl	22556 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   20f76:	4630      	mov	r0, r6
   20f78:	f7ff ff02 	bl	20d80 <net_buf_frags_len>
   20f7c:	f8b8 4066 	ldrh.w	r4, [r8, #102]	; 0x66
   20f80:	f105 0708 	add.w	r7, r5, #8
   20f84:	1a24      	subs	r4, r4, r0
   20f86:	4638      	mov	r0, r7
   20f88:	f001 fb5b 	bl	22642 <net_buf_simple_tailroom>
   20f8c:	4284      	cmp	r4, r0
   20f8e:	d21a      	bcs.n	20fc6 <att_chan_read+0xce>
   20f90:	4630      	mov	r0, r6
   20f92:	f7ff fef5 	bl	20d80 <net_buf_frags_len>
   20f96:	f8b8 4066 	ldrh.w	r4, [r8, #102]	; 0x66
   20f9a:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   20f9c:	68a9      	ldr	r1, [r5, #8]
   20f9e:	89aa      	ldrh	r2, [r5, #12]
   20fa0:	f8db 7004 	ldr.w	r7, [fp, #4]
   20fa4:	9803      	ldr	r0, [sp, #12]
   20fa6:	f8cd 9000 	str.w	r9, [sp]
   20faa:	440a      	add	r2, r1
   20fac:	b2a3      	uxth	r3, r4
   20fae:	4659      	mov	r1, fp
   20fb0:	47b8      	blx	r7
		if (read < 0) {
   20fb2:	1e07      	subs	r7, r0, #0
   20fb4:	da0c      	bge.n	20fd0 <att_chan_read+0xd8>
				return total;
   20fb6:	f1ba 0f00 	cmp.w	sl, #0
   20fba:	bf18      	it	ne
   20fbc:	4657      	movne	r7, sl
}
   20fbe:	4638      	mov	r0, r7
   20fc0:	b005      	add	sp, #20
   20fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   20fc6:	4638      	mov	r0, r7
   20fc8:	f001 fb3b 	bl	22642 <net_buf_simple_tailroom>
   20fcc:	4604      	mov	r4, r0
   20fce:	e7e5      	b.n	20f9c <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   20fd0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   20fd2:	b993      	cbnz	r3, 20ffa <att_chan_read+0x102>
		net_buf_add(frag, read);
   20fd4:	4639      	mov	r1, r7
   20fd6:	f105 0008 	add.w	r0, r5, #8
   20fda:	f001 fad9 	bl	22590 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   20fde:	4630      	mov	r0, r6
   20fe0:	f7ff fece 	bl	20d80 <net_buf_frags_len>
   20fe4:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
		offset += read;
   20fe8:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   20fea:	4283      	cmp	r3, r0
		total += read;
   20fec:	44ba      	add	sl, r7
		offset += read;
   20fee:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   20ff2:	d9b5      	bls.n	20f60 <att_chan_read+0x68>
   20ff4:	42a7      	cmp	r7, r4
   20ff6:	d096      	beq.n	20f26 <att_chan_read+0x2e>
   20ff8:	e7b2      	b.n	20f60 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   20ffa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   20ffc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   20ffe:	4639      	mov	r1, r7
   21000:	4628      	mov	r0, r5
   21002:	4798      	blx	r3
   21004:	2800      	cmp	r0, #0
   21006:	d1e5      	bne.n	20fd4 <att_chan_read+0xdc>
   21008:	e7aa      	b.n	20f60 <att_chan_read+0x68>
		return 0;
   2100a:	2700      	movs	r7, #0
   2100c:	e7d7      	b.n	20fbe <att_chan_read+0xc6>

0002100e <attr_read_group_cb>:
	if (!data->rsp->len) {
   2100e:	68d0      	ldr	r0, [r2, #12]
   21010:	7803      	ldrb	r3, [r0, #0]
   21012:	3104      	adds	r1, #4
   21014:	b913      	cbnz	r3, 2101c <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   21016:	7001      	strb	r1, [r0, #0]
	return true;
   21018:	2001      	movs	r0, #1
}
   2101a:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   2101c:	428b      	cmp	r3, r1
   2101e:	d0fb      	beq.n	21018 <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   21020:	6891      	ldr	r1, [r2, #8]
   21022:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   21024:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   21026:	3b04      	subs	r3, #4
   21028:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   2102a:	6110      	str	r0, [r2, #16]
		return false;
   2102c:	4770      	bx	lr

0002102e <chan_cfm_sent>:
   2102e:	30c8      	adds	r0, #200	; 0xc8
   21030:	f3bf 8f5b 	dmb	ish
   21034:	e850 3f00 	ldrex	r3, [r0]
   21038:	f023 0302 	bic.w	r3, r3, #2
   2103c:	e840 3200 	strex	r2, r3, [r0]
   21040:	2a00      	cmp	r2, #0
   21042:	d1f7      	bne.n	21034 <chan_cfm_sent+0x6>
   21044:	f3bf 8f5b 	dmb	ish
}
   21048:	4770      	bx	lr

0002104a <chan_rsp_sent>:
   2104a:	30c8      	adds	r0, #200	; 0xc8
   2104c:	f3bf 8f5b 	dmb	ish
   21050:	e850 3f00 	ldrex	r3, [r0]
   21054:	f023 0301 	bic.w	r3, r3, #1
   21058:	e840 3200 	strex	r2, r3, [r0]
   2105c:	2a00      	cmp	r2, #0
   2105e:	d1f7      	bne.n	21050 <chan_rsp_sent+0x6>
   21060:	f3bf 8f5b 	dmb	ish
}
   21064:	4770      	bx	lr

00021066 <write_cb>:
{
   21066:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   21068:	460c      	mov	r4, r1
   2106a:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   2106c:	4601      	mov	r1, r0
   2106e:	222a      	movs	r2, #42	; 0x2a
   21070:	6820      	ldr	r0, [r4, #0]
   21072:	f000 fcdf 	bl	21a34 <bt_gatt_check_perm>
   21076:	4605      	mov	r5, r0
   21078:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   2107a:	bb00      	cbnz	r0, 210be <write_cb+0x58>
	if (!data->req) {
   2107c:	7a23      	ldrb	r3, [r4, #8]
	write = attr->write(data->conn, attr, data->value, data->len,
   2107e:	68b7      	ldr	r7, [r6, #8]
   21080:	68e2      	ldr	r2, [r4, #12]
   21082:	6820      	ldr	r0, [r4, #0]
	if (!data->req) {
   21084:	2b00      	cmp	r3, #0
		flags |= BT_GATT_WRITE_FLAG_CMD;
   21086:	bf14      	ite	ne
   21088:	2300      	movne	r3, #0
   2108a:	2302      	moveq	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   2108c:	9301      	str	r3, [sp, #4]
   2108e:	8a63      	ldrh	r3, [r4, #18]
   21090:	9300      	str	r3, [sp, #0]
   21092:	4631      	mov	r1, r6
   21094:	8a23      	ldrh	r3, [r4, #16]
   21096:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   21098:	1e03      	subs	r3, r0, #0
   2109a:	db05      	blt.n	210a8 <write_cb+0x42>
   2109c:	8a22      	ldrh	r2, [r4, #16]
   2109e:	4293      	cmp	r3, r2
   210a0:	d10b      	bne.n	210ba <write_cb+0x54>
	data->err = 0U;
   210a2:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   210a4:	2501      	movs	r5, #1
   210a6:	e005      	b.n	210b4 <write_cb+0x4e>
	if (err < 0 && err >= -0xff) {
   210a8:	f113 0fff 	cmn.w	r3, #255	; 0xff
   210ac:	d305      	bcc.n	210ba <write_cb+0x54>
		return -err;
   210ae:	425b      	negs	r3, r3
   210b0:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   210b2:	7523      	strb	r3, [r4, #20]
}
   210b4:	4628      	mov	r0, r5
   210b6:	b003      	add	sp, #12
   210b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   210ba:	230e      	movs	r3, #14
   210bc:	e7f9      	b.n	210b2 <write_cb+0x4c>
		return BT_GATT_ITER_STOP;
   210be:	2500      	movs	r5, #0
   210c0:	e7f8      	b.n	210b4 <write_cb+0x4e>

000210c2 <read_cb>:
{
   210c2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   210c6:	4606      	mov	r6, r0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   210c8:	6888      	ldr	r0, [r1, #8]
	struct bt_att_chan *chan = data->chan;
   210ca:	f8d1 8000 	ldr.w	r8, [r1]
{
   210ce:	460c      	mov	r4, r1
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   210d0:	3008      	adds	r0, #8
   210d2:	2100      	movs	r1, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   210d4:	f8d8 5008 	ldr.w	r5, [r8, #8]
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   210d8:	f001 fa5a 	bl	22590 <net_buf_simple_add>
	data->err = 0x00;
   210dc:	2700      	movs	r7, #0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   210de:	60e0      	str	r0, [r4, #12]
	data->err = 0x00;
   210e0:	7427      	strb	r7, [r4, #16]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   210e2:	4628      	mov	r0, r5
   210e4:	2215      	movs	r2, #21
   210e6:	4631      	mov	r1, r6
   210e8:	f000 fca4 	bl	21a34 <bt_gatt_check_perm>
   210ec:	4605      	mov	r5, r0
   210ee:	7420      	strb	r0, [r4, #16]
	if (data->err) {
   210f0:	b9a0      	cbnz	r0, 2111c <read_cb+0x5a>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   210f2:	e9cd 0000 	strd	r0, r0, [sp]
   210f6:	88a3      	ldrh	r3, [r4, #4]
   210f8:	68a2      	ldr	r2, [r4, #8]
   210fa:	4631      	mov	r1, r6
   210fc:	4640      	mov	r0, r8
   210fe:	f7ff fefb 	bl	20ef8 <att_chan_read>
	if (ret < 0) {
   21102:	1e03      	subs	r3, r0, #0
   21104:	da0c      	bge.n	21120 <read_cb+0x5e>
	if (err < 0 && err >= -0xff) {
   21106:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   2110a:	bf26      	itte	cs
   2110c:	425b      	negcs	r3, r3
   2110e:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   21110:	230e      	movcc	r3, #14
		data->err = err_to_att(ret);
   21112:	7423      	strb	r3, [r4, #16]
}
   21114:	4628      	mov	r0, r5
   21116:	b002      	add	sp, #8
   21118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   2111c:	463d      	mov	r5, r7
   2111e:	e7f9      	b.n	21114 <read_cb+0x52>
	return BT_GATT_ITER_CONTINUE;
   21120:	2501      	movs	r5, #1
   21122:	e7f7      	b.n	21114 <read_cb+0x52>

00021124 <chan_req_send>:
{
   21124:	b570      	push	{r4, r5, r6, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   21126:	690e      	ldr	r6, [r1, #16]
{
   21128:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2112a:	4630      	mov	r0, r6
{
   2112c:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2112e:	f7ff fe27 	bl	20d80 <net_buf_frags_len>
   21132:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
   21136:	4283      	cmp	r3, r0
   21138:	d31a      	bcc.n	21170 <chan_req_send+0x4c>
	chan->req = req;
   2113a:	f8c5 10cc 	str.w	r1, [r5, #204]	; 0xcc
	state->offset = net_buf_simple_headroom(buf);
   2113e:	f106 0008 	add.w	r0, r6, #8
   21142:	f001 fa7a 	bl	2263a <net_buf_simple_headroom>
	state->len = buf->len;
   21146:	89b3      	ldrh	r3, [r6, #12]
	state->offset = net_buf_simple_headroom(buf);
   21148:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
   2114a:	81e3      	strh	r3, [r4, #14]
	err = chan_send(chan, net_buf_ref(req->buf), NULL);
   2114c:	6920      	ldr	r0, [r4, #16]
   2114e:	f001 f9ed 	bl	2252c <net_buf_ref>
   21152:	2200      	movs	r2, #0
   21154:	4601      	mov	r1, r0
   21156:	4628      	mov	r0, r5
   21158:	f7eb fca8 	bl	caac <chan_send>
	if (err < 0) {
   2115c:	1e06      	subs	r6, r0, #0
   2115e:	da05      	bge.n	2116c <chan_req_send+0x48>
		net_buf_unref(req->buf);
   21160:	6920      	ldr	r0, [r4, #16]
   21162:	f7fa fcb9 	bl	1bad8 <net_buf_unref>
		chan->req = NULL;
   21166:	2300      	movs	r3, #0
   21168:	f8c5 30cc 	str.w	r3, [r5, #204]	; 0xcc
}
   2116c:	4630      	mov	r0, r6
   2116e:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   21170:	f06f 0623 	mvn.w	r6, #35	; 0x23
   21174:	e7fa      	b.n	2116c <chan_req_send+0x48>

00021176 <bt_att_chan_req_send>:
{
   21176:	b570      	push	{r4, r5, r6, lr}
   21178:	4604      	mov	r4, r0
   2117a:	460d      	mov	r5, r1
	if (k_sem_take(&chan->tx_sem, K_NO_WAIT) < 0) {
   2117c:	f500 768c 	add.w	r6, r0, #280	; 0x118
	return z_impl_k_sem_take(sem, timeout);
   21180:	2200      	movs	r2, #0
   21182:	2300      	movs	r3, #0
   21184:	4630      	mov	r0, r6
   21186:	f7fc fb19 	bl	1d7bc <z_impl_k_sem_take>
   2118a:	2800      	cmp	r0, #0
   2118c:	db0a      	blt.n	211a4 <bt_att_chan_req_send+0x2e>
	err = chan_req_send(chan, req);
   2118e:	4620      	mov	r0, r4
   21190:	4629      	mov	r1, r5
   21192:	f7ff ffc7 	bl	21124 <chan_req_send>
	if (err < 0) {
   21196:	1e04      	subs	r4, r0, #0
   21198:	da02      	bge.n	211a0 <bt_att_chan_req_send+0x2a>
	z_impl_k_sem_give(sem);
   2119a:	4630      	mov	r0, r6
   2119c:	f7fc fae8 	bl	1d770 <z_impl_k_sem_give>
}
   211a0:	4620      	mov	r0, r4
   211a2:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
   211a4:	f06f 040a 	mvn.w	r4, #10
   211a8:	e7fa      	b.n	211a0 <bt_att_chan_req_send+0x2a>

000211aa <bt_att_status>:
{
   211aa:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   211ac:	f3bf 8f5b 	dmb	ish
   211b0:	680b      	ldr	r3, [r1, #0]
   211b2:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   211b6:	07db      	lsls	r3, r3, #31
{
   211b8:	4605      	mov	r5, r0
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   211ba:	d518      	bpl.n	211ee <bt_att_status+0x44>
	if (chan->req) {
   211bc:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
   211c0:	b9ab      	cbnz	r3, 211ee <bt_att_status+0x44>
	node = sys_slist_get(&chan->att->reqs);
   211c2:	f850 0c08 	ldr.w	r0, [r0, #-8]
   211c6:	3004      	adds	r0, #4
   211c8:	f7ff fdb5 	bl	20d36 <sys_slist_get>
	if (!node) {
   211cc:	4604      	mov	r4, r0
   211ce:	b170      	cbz	r0, 211ee <bt_att_status+0x44>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   211d0:	4601      	mov	r1, r0
   211d2:	f1a5 0008 	sub.w	r0, r5, #8
   211d6:	f7ff ffce 	bl	21176 <bt_att_chan_req_send>
   211da:	2800      	cmp	r0, #0
   211dc:	da07      	bge.n	211ee <bt_att_status+0x44>
	sys_slist_prepend(&chan->att->reqs, node);
   211de:	f855 3c08 	ldr.w	r3, [r5, #-8]
Z_GENLIST_PREPEND(slist, snode)
   211e2:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   211e4:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   211e6:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   211e8:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   211ea:	b902      	cbnz	r2, 211ee <bt_att_status+0x44>
	list->tail = node;
   211ec:	609c      	str	r4, [r3, #8]
}
   211ee:	bd38      	pop	{r3, r4, r5, pc}

000211f0 <bt_att_chan_send>:
{
   211f0:	b570      	push	{r4, r5, r6, lr}
   211f2:	4604      	mov	r4, r0
   211f4:	460e      	mov	r6, r1
	if (!cb) {
   211f6:	4615      	mov	r5, r2
   211f8:	b132      	cbz	r2, 21208 <bt_att_chan_send+0x18>
	return chan_send(chan, buf, cb);
   211fa:	462a      	mov	r2, r5
   211fc:	4631      	mov	r1, r6
   211fe:	4620      	mov	r0, r4
}
   21200:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return chan_send(chan, buf, cb);
   21204:	f7eb bc52 	b.w	caac <chan_send>
	return z_impl_k_sem_take(sem, timeout);
   21208:	2200      	movs	r2, #0
   2120a:	2300      	movs	r3, #0
   2120c:	f500 708c 	add.w	r0, r0, #280	; 0x118
   21210:	f7fc fad4 	bl	1d7bc <z_impl_k_sem_take>
		if (k_sem_take(&chan->tx_sem, K_NO_WAIT) < 0) {
   21214:	2800      	cmp	r0, #0
   21216:	daf0      	bge.n	211fa <bt_att_chan_send+0xa>
}
   21218:	f06f 000a 	mvn.w	r0, #10
   2121c:	bd70      	pop	{r4, r5, r6, pc}

0002121e <bt_att_chan_send_rsp>:
{
   2121e:	b538      	push	{r3, r4, r5, lr}
   21220:	4604      	mov	r4, r0
   21222:	460d      	mov	r5, r1
	err = bt_att_chan_send(chan, buf, cb);
   21224:	f7ff ffe4 	bl	211f0 <bt_att_chan_send>
	if (err) {
   21228:	b130      	cbz	r0, 21238 <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   2122a:	4629      	mov	r1, r5
   2122c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
}
   21230:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   21234:	f001 b96d 	b.w	22512 <net_buf_put>
}
   21238:	bd38      	pop	{r3, r4, r5, pc}

0002123a <process_queue>:
{
   2123a:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   2123c:	2200      	movs	r2, #0
{
   2123e:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   21240:	2300      	movs	r3, #0
   21242:	4608      	mov	r0, r1
{
   21244:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   21246:	f001 f940 	bl	224ca <net_buf_get>
	if (buf) {
   2124a:	4605      	mov	r5, r0
   2124c:	b160      	cbz	r0, 21268 <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   2124e:	4601      	mov	r1, r0
   21250:	2200      	movs	r2, #0
   21252:	4620      	mov	r0, r4
   21254:	f7eb fc2a 	bl	caac <chan_send>
		if (err) {
   21258:	4604      	mov	r4, r0
   2125a:	b118      	cbz	r0, 21264 <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   2125c:	4629      	mov	r1, r5
   2125e:	4630      	mov	r0, r6
   21260:	f001 fd55 	bl	22d0e <k_queue_prepend>
}
   21264:	4620      	mov	r0, r4
   21266:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   21268:	f06f 0401 	mvn.w	r4, #1
   2126c:	e7fa      	b.n	21264 <process_queue+0x2a>

0002126e <bt_att_sent>:
{
   2126e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   21270:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
	struct bt_att *att = chan->att;
   21274:	f850 5c08 	ldr.w	r5, [r0, #-8]
{
   21278:	4604      	mov	r4, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   2127a:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   2127e:	b10b      	cbz	r3, 21284 <bt_att_sent+0x16>
		chan->sent(chan);
   21280:	4638      	mov	r0, r7
   21282:	4798      	blx	r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   21284:	f3bf 8f5b 	dmb	ish
   21288:	f104 03c0 	add.w	r3, r4, #192	; 0xc0
   2128c:	e853 2f00 	ldrex	r2, [r3]
   21290:	f022 0210 	bic.w	r2, r2, #16
   21294:	e843 2100 	strex	r1, r2, [r3]
   21298:	2900      	cmp	r1, #0
   2129a:	d1f7      	bne.n	2128c <bt_att_sent+0x1e>
   2129c:	f3bf 8f5b 	dmb	ish
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   212a0:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
   212a4:	b98b      	cbnz	r3, 212ca <bt_att_sent+0x5c>
   212a6:	686b      	ldr	r3, [r5, #4]
   212a8:	b17b      	cbz	r3, 212ca <bt_att_sent+0x5c>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   212aa:	1d28      	adds	r0, r5, #4
   212ac:	f7ff fd43 	bl	20d36 <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   212b0:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   212b2:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   212b4:	4638      	mov	r0, r7
   212b6:	f7ff ff35 	bl	21124 <chan_req_send>
   212ba:	2800      	cmp	r0, #0
   212bc:	da17      	bge.n	212ee <bt_att_sent+0x80>
Z_GENLIST_PREPEND(slist, snode)
   212be:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   212c0:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   212c2:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
   212c4:	606e      	str	r6, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   212c6:	b903      	cbnz	r3, 212ca <bt_att_sent+0x5c>
	list->tail = node;
   212c8:	60ae      	str	r6, [r5, #8]
	err = process_queue(chan, &chan->tx_queue);
   212ca:	f104 01c8 	add.w	r1, r4, #200	; 0xc8
   212ce:	4638      	mov	r0, r7
   212d0:	f7ff ffb3 	bl	2123a <process_queue>
	if (!err) {
   212d4:	b158      	cbz	r0, 212ee <bt_att_sent+0x80>
	err = process_queue(chan, &att->tx_queue);
   212d6:	f105 010c 	add.w	r1, r5, #12
   212da:	4638      	mov	r0, r7
   212dc:	f7ff ffad 	bl	2123a <process_queue>
	if (!err) {
   212e0:	b128      	cbz	r0, 212ee <bt_att_sent+0x80>
	z_impl_k_sem_give(sem);
   212e2:	f504 7088 	add.w	r0, r4, #272	; 0x110
}
   212e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   212ea:	f7fc ba41 	b.w	1d770 <z_impl_k_sem_give>
   212ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000212f0 <att_write_cmd>:
{
   212f0:	b530      	push	{r4, r5, lr}
   212f2:	460c      	mov	r4, r1
   212f4:	b085      	sub	sp, #20
   212f6:	4605      	mov	r5, r0
	handle = net_buf_pull_le16(buf);
   212f8:	f101 0008 	add.w	r0, r1, #8
   212fc:	f001 f995 	bl	2262a <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   21300:	89a2      	ldrh	r2, [r4, #12]
   21302:	9202      	str	r2, [sp, #8]
   21304:	68a2      	ldr	r2, [r4, #8]
   21306:	9201      	str	r2, [sp, #4]
   21308:	2200      	movs	r2, #0
	handle = net_buf_pull_le16(buf);
   2130a:	4603      	mov	r3, r0
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   2130c:	9200      	str	r2, [sp, #0]
   2130e:	4611      	mov	r1, r2
   21310:	4628      	mov	r0, r5
   21312:	f7eb fd55 	bl	cdc0 <att_write_rsp>
}
   21316:	b005      	add	sp, #20
   21318:	bd30      	pop	{r4, r5, pc}

0002131a <att_write_req>:
{
   2131a:	b530      	push	{r4, r5, lr}
   2131c:	460c      	mov	r4, r1
   2131e:	b085      	sub	sp, #20
   21320:	4605      	mov	r5, r0
	handle = net_buf_pull_le16(buf);
   21322:	f101 0008 	add.w	r0, r1, #8
   21326:	f001 f980 	bl	2262a <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   2132a:	89a2      	ldrh	r2, [r4, #12]
   2132c:	9202      	str	r2, [sp, #8]
   2132e:	68a2      	ldr	r2, [r4, #8]
   21330:	9201      	str	r2, [sp, #4]
   21332:	2200      	movs	r2, #0
	handle = net_buf_pull_le16(buf);
   21334:	4603      	mov	r3, r0
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   21336:	9200      	str	r2, [sp, #0]
   21338:	2112      	movs	r1, #18
   2133a:	2213      	movs	r2, #19
   2133c:	4628      	mov	r0, r5
   2133e:	f7eb fd3f 	bl	cdc0 <att_write_rsp>
}
   21342:	b005      	add	sp, #20
   21344:	bd30      	pop	{r4, r5, pc}

00021346 <att_read_blob_req>:
{
   21346:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   21348:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   2134a:	8813      	ldrh	r3, [r2, #0]
   2134c:	8852      	ldrh	r2, [r2, #2]
   2134e:	9200      	str	r2, [sp, #0]
   21350:	210c      	movs	r1, #12
   21352:	220d      	movs	r2, #13
   21354:	f7eb ff52 	bl	d1fc <att_read_rsp>
}
   21358:	b003      	add	sp, #12
   2135a:	f85d fb04 	ldr.w	pc, [sp], #4

0002135e <att_read_req>:
{
   2135e:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   21360:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   21362:	2200      	movs	r2, #0
   21364:	881b      	ldrh	r3, [r3, #0]
   21366:	9200      	str	r2, [sp, #0]
   21368:	210a      	movs	r1, #10
   2136a:	220b      	movs	r2, #11
   2136c:	f7eb ff46 	bl	d1fc <att_read_rsp>
}
   21370:	b003      	add	sp, #12
   21372:	f85d fb04 	ldr.w	pc, [sp], #4

00021376 <bt_att_init>:
	bt_gatt_init();
   21376:	f7ec be7b 	b.w	e070 <bt_gatt_init>

0002137a <att_req_destroy>:
{
   2137a:	b510      	push	{r4, lr}
   2137c:	4604      	mov	r4, r0
	if (req->buf) {
   2137e:	6900      	ldr	r0, [r0, #16]
   21380:	b108      	cbz	r0, 21386 <att_req_destroy+0xc>
		net_buf_unref(req->buf);
   21382:	f7fa fba9 	bl	1bad8 <net_buf_unref>
	if (req->destroy) {
   21386:	68a3      	ldr	r3, [r4, #8]
   21388:	b10b      	cbz	r3, 2138e <att_req_destroy+0x14>
		req->destroy(req);
   2138a:	4620      	mov	r0, r4
   2138c:	4798      	blx	r3
	bt_att_req_free(req);
   2138e:	4620      	mov	r0, r4
}
   21390:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_req_free(req);
   21394:	f7ec b8d8 	b.w	d548 <bt_att_req_free>

00021398 <att_handle_find_info_rsp>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   21398:	898a      	ldrh	r2, [r1, #12]
   2139a:	6889      	ldr	r1, [r1, #8]
   2139c:	2300      	movs	r3, #0
   2139e:	f7ec b8df 	b.w	d560 <att_handle_rsp>

000213a2 <att_handle_find_type_rsp>:
   213a2:	f7ff bff9 	b.w	21398 <att_handle_find_info_rsp>

000213a6 <att_handle_read_type_rsp>:
   213a6:	f7ff bff7 	b.w	21398 <att_handle_find_info_rsp>

000213aa <att_handle_read_rsp>:
   213aa:	f7ff bff5 	b.w	21398 <att_handle_find_info_rsp>

000213ae <att_handle_read_blob_rsp>:
   213ae:	f7ff bff3 	b.w	21398 <att_handle_find_info_rsp>

000213b2 <att_handle_read_mult_rsp>:
   213b2:	f7ff bff1 	b.w	21398 <att_handle_find_info_rsp>

000213b6 <att_handle_read_group_rsp>:
   213b6:	f7ff bfef 	b.w	21398 <att_handle_find_info_rsp>

000213ba <att_handle_write_rsp>:
   213ba:	f7ff bfed 	b.w	21398 <att_handle_find_info_rsp>

000213be <att_handle_prepare_write_rsp>:
   213be:	f7ff bfeb 	b.w	21398 <att_handle_find_info_rsp>

000213c2 <att_handle_exec_write_rsp>:
   213c2:	f7ff bfe9 	b.w	21398 <att_handle_find_info_rsp>

000213c6 <att_confirm>:
   213c6:	f7ff bfe7 	b.w	21398 <att_handle_find_info_rsp>

000213ca <att_mtu_rsp>:
{
   213ca:	460a      	mov	r2, r1
	rsp = (void *)buf->data;
   213cc:	6889      	ldr	r1, [r1, #8]
	mtu = sys_le16_to_cpu(rsp->mtu);
   213ce:	880b      	ldrh	r3, [r1, #0]
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   213d0:	2b16      	cmp	r3, #22
{
   213d2:	b410      	push	{r4}
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   213d4:	d805      	bhi.n	213e2 <att_mtu_rsp+0x18>
		return att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_INVALID_PDU);
   213d6:	2200      	movs	r2, #0
   213d8:	2304      	movs	r3, #4
   213da:	4611      	mov	r1, r2
}
   213dc:	bc10      	pop	{r4}
	return att_handle_rsp(chan, rsp, buf->len, 0);
   213de:	f7ec b8bf 	b.w	d560 <att_handle_rsp>
	chan->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
   213e2:	2bf7      	cmp	r3, #247	; 0xf7
   213e4:	bf28      	it	cs
   213e6:	23f7      	movcs	r3, #247	; 0xf7
   213e8:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   213ec:	f8a0 3066 	strh.w	r3, [r0, #102]	; 0x66
	return att_handle_rsp(chan, rsp, buf->len, 0);
   213f0:	8992      	ldrh	r2, [r2, #12]
   213f2:	2300      	movs	r3, #0
   213f4:	e7f2      	b.n	213dc <att_mtu_rsp+0x12>

000213f6 <att_chan_detach>:
{
   213f6:	b570      	push	{r4, r5, r6, lr}
   213f8:	4604      	mov	r4, r0
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   213fa:	6800      	ldr	r0, [r0, #0]
   213fc:	f504 719a 	add.w	r1, r4, #308	; 0x134
   21400:	303c      	adds	r0, #60	; 0x3c
   21402:	f7ff fca2 	bl	20d4a <sys_slist_find_and_remove>
   21406:	250a      	movs	r5, #10
		k_sem_give(&chan->tx_sem);
   21408:	f504 768c 	add.w	r6, r4, #280	; 0x118
   2140c:	4630      	mov	r0, r6
   2140e:	f7fc f9af 	bl	1d770 <z_impl_k_sem_give>
	for (i = 0; i < CONFIG_BT_ATT_TX_MAX; i++) {
   21412:	3d01      	subs	r5, #1
   21414:	d1fa      	bne.n	2140c <att_chan_detach+0x16>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   21416:	f104 05d0 	add.w	r5, r4, #208	; 0xd0
   2141a:	2200      	movs	r2, #0
   2141c:	2300      	movs	r3, #0
   2141e:	4628      	mov	r0, r5
   21420:	f001 f853 	bl	224ca <net_buf_get>
   21424:	4602      	mov	r2, r0
   21426:	b950      	cbnz	r0, 2143e <att_chan_detach+0x48>
	if (chan->req) {
   21428:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   2142c:	b123      	cbz	r3, 21438 <att_chan_detach+0x42>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   2142e:	4601      	mov	r1, r0
   21430:	230e      	movs	r3, #14
   21432:	4620      	mov	r0, r4
   21434:	f7ec f894 	bl	d560 <att_handle_rsp>
	chan->att = NULL;
   21438:	2300      	movs	r3, #0
   2143a:	6023      	str	r3, [r4, #0]
}
   2143c:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
   2143e:	f7fa fb4b 	bl	1bad8 <net_buf_unref>
   21442:	e7ea      	b.n	2141a <att_chan_detach+0x24>

00021444 <bt_att_disconnected>:
{
   21444:	b538      	push	{r3, r4, r5, lr}
   21446:	4604      	mov	r4, r0
	struct bt_att *att = att_chan->att;
   21448:	f850 5d08 	ldr.w	r5, [r0, #-8]!
	att_chan_detach(att_chan);
   2144c:	f7ff ffd3 	bl	213f6 <att_chan_detach>
	if (!sys_slist_is_empty(&att->chans)) {
   21450:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   21452:	b93b      	cbnz	r3, 21464 <bt_att_disconnected+0x20>
	att_reset(att);
   21454:	4628      	mov	r0, r5
   21456:	f7ec f96d 	bl	d734 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
   2145a:	6820      	ldr	r0, [r4, #0]
}
   2145c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_disconnected(ch->chan.conn);
   21460:	f7ed b928 	b.w	e6b4 <bt_gatt_disconnected>
}
   21464:	bd38      	pop	{r3, r4, r5, pc}

00021466 <bt_att_send>:
{
   21466:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2146a:	4605      	mov	r5, r0
   2146c:	460e      	mov	r6, r1
   2146e:	4614      	mov	r4, r2
   21470:	4698      	mov	r8, r3
	att = att_get(conn);
   21472:	f7eb f9f1 	bl	c858 <att_get>
	if (!att) {
   21476:	4607      	mov	r7, r0
   21478:	b938      	cbnz	r0, 2148a <bt_att_send+0x24>
		net_buf_unref(buf);
   2147a:	4630      	mov	r0, r6
   2147c:	f7fa fb2c 	bl	1bad8 <net_buf_unref>
		return -ENOTCONN;
   21480:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
   21484:	b002      	add	sp, #8
   21486:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   2148a:	b144      	cbz	r4, 2149e <bt_att_send+0x38>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   2148c:	f8cd 8000 	str.w	r8, [sp]
   21490:	4623      	mov	r3, r4
   21492:	4632      	mov	r2, r6
   21494:	2104      	movs	r1, #4
   21496:	4628      	mov	r0, r5
   21498:	f7ff fa6f 	bl	2097a <bt_l2cap_send_cb>
   2149c:	e7f2      	b.n	21484 <bt_att_send+0x1e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2149e:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
   214a0:	b184      	cbz	r4, 214c4 <bt_att_send+0x5e>
   214a2:	f5b4 759a 	subs.w	r5, r4, #308	; 0x134
   214a6:	d00f      	beq.n	214c8 <bt_att_send+0x62>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   214a8:	6824      	ldr	r4, [r4, #0]
   214aa:	b10c      	cbz	r4, 214b0 <bt_att_send+0x4a>
   214ac:	f5a4 749a 	sub.w	r4, r4, #308	; 0x134
   214b0:	2000      	movs	r0, #0
   214b2:	b95d      	cbnz	r5, 214cc <bt_att_send+0x66>
	if (ret < 0) {
   214b4:	b188      	cbz	r0, 214da <bt_att_send+0x74>
		net_buf_put(&att->tx_queue, buf);
   214b6:	f107 000c 	add.w	r0, r7, #12
   214ba:	4631      	mov	r1, r6
   214bc:	f001 f829 	bl	22512 <net_buf_put>
	return 0;
   214c0:	4628      	mov	r0, r5
   214c2:	e7df      	b.n	21484 <bt_att_send+0x1e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   214c4:	4625      	mov	r5, r4
   214c6:	e7f3      	b.n	214b0 <bt_att_send+0x4a>
   214c8:	462c      	mov	r4, r5
   214ca:	e7f1      	b.n	214b0 <bt_att_send+0x4a>
		ret = bt_att_chan_send(chan, buf, NULL);
   214cc:	2200      	movs	r2, #0
   214ce:	4631      	mov	r1, r6
   214d0:	4628      	mov	r0, r5
   214d2:	f7ff fe8d 	bl	211f0 <bt_att_chan_send>
		if (ret >= 0) {
   214d6:	2800      	cmp	r0, #0
   214d8:	db01      	blt.n	214de <bt_att_send+0x78>
	return 0;
   214da:	2000      	movs	r0, #0
   214dc:	e7d2      	b.n	21484 <bt_att_send+0x1e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   214de:	b154      	cbz	r4, 214f6 <bt_att_send+0x90>
Z_GENLIST_PEEK_NEXT(slist, snode)
   214e0:	f514 739a 	adds.w	r3, r4, #308	; 0x134
   214e4:	d004      	beq.n	214f0 <bt_att_send+0x8a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   214e6:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
   214ea:	b10b      	cbz	r3, 214f0 <bt_att_send+0x8a>
   214ec:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
   214f0:	4625      	mov	r5, r4
   214f2:	461c      	mov	r4, r3
   214f4:	e7dd      	b.n	214b2 <bt_att_send+0x4c>
   214f6:	4623      	mov	r3, r4
   214f8:	e7fa      	b.n	214f0 <bt_att_send+0x8a>

000214fa <bt_att_req_send>:
{
   214fa:	b570      	push	{r4, r5, r6, lr}
   214fc:	460c      	mov	r4, r1
	att = att_get(conn);
   214fe:	f7eb f9ab 	bl	c858 <att_get>
	if (!att) {
   21502:	4605      	mov	r5, r0
   21504:	b930      	cbnz	r0, 21514 <bt_att_req_send+0x1a>
		net_buf_unref(req->buf);
   21506:	6920      	ldr	r0, [r4, #16]
   21508:	f7fa fae6 	bl	1bad8 <net_buf_unref>
		req->buf = NULL;
   2150c:	6125      	str	r5, [r4, #16]
		return -ENOTCONN;
   2150e:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
   21512:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   21514:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   21516:	b153      	cbz	r3, 2152e <bt_att_req_send+0x34>
   21518:	f5b3 709a 	subs.w	r0, r3, #308	; 0x134
   2151c:	d007      	beq.n	2152e <bt_att_req_send+0x34>
   2151e:	681e      	ldr	r6, [r3, #0]
   21520:	b10e      	cbz	r6, 21526 <bt_att_req_send+0x2c>
   21522:	f5a6 769a 	sub.w	r6, r6, #308	; 0x134
		if (!chan->req) {
   21526:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
   2152a:	b143      	cbz	r3, 2153e <bt_att_req_send+0x44>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2152c:	b96e      	cbnz	r6, 2154a <bt_att_req_send+0x50>
	parent->next = child;
   2152e:	2000      	movs	r0, #0
   21530:	6020      	str	r0, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   21532:	68ab      	ldr	r3, [r5, #8]
   21534:	b9a3      	cbnz	r3, 21560 <bt_att_req_send+0x66>
	list->head = node;
   21536:	e9c5 4401 	strd	r4, r4, [r5, #4]
	return 0;
   2153a:	4618      	mov	r0, r3
}
   2153c:	e7e9      	b.n	21512 <bt_att_req_send+0x18>
			ret = bt_att_chan_req_send(chan, req);
   2153e:	4621      	mov	r1, r4
   21540:	f7ff fe19 	bl	21176 <bt_att_chan_req_send>
			if (ret >= 0) {
   21544:	2800      	cmp	r0, #0
   21546:	dbf1      	blt.n	2152c <bt_att_req_send+0x32>
   21548:	e7e3      	b.n	21512 <bt_att_req_send+0x18>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2154a:	f516 739a 	adds.w	r3, r6, #308	; 0x134
   2154e:	d004      	beq.n	2155a <bt_att_req_send+0x60>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   21550:	f8d6 3134 	ldr.w	r3, [r6, #308]	; 0x134
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   21554:	b10b      	cbz	r3, 2155a <bt_att_req_send+0x60>
   21556:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
{
   2155a:	4630      	mov	r0, r6
   2155c:	461e      	mov	r6, r3
   2155e:	e7e2      	b.n	21526 <bt_att_req_send+0x2c>
	parent->next = child;
   21560:	601c      	str	r4, [r3, #0]
	list->tail = node;
   21562:	60ac      	str	r4, [r5, #8]
}
   21564:	e7d5      	b.n	21512 <bt_att_req_send+0x18>

00021566 <gatt_ccc_changed>:
{
   21566:	460b      	mov	r3, r1
   21568:	8a49      	ldrh	r1, [r1, #18]
   2156a:	8b9a      	ldrh	r2, [r3, #28]
   2156c:	4291      	cmp	r1, r2
   2156e:	bf38      	it	cc
   21570:	4611      	movcc	r1, r2
   21572:	8cda      	ldrh	r2, [r3, #38]	; 0x26
   21574:	4291      	cmp	r1, r2
   21576:	bf38      	it	cc
   21578:	4611      	movcc	r1, r2
   2157a:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
   2157c:	4291      	cmp	r1, r2
   2157e:	bf38      	it	cc
   21580:	4611      	movcc	r1, r2
   21582:	891a      	ldrh	r2, [r3, #8]
   21584:	4291      	cmp	r1, r2
   21586:	bf38      	it	cc
   21588:	4611      	movcc	r1, r2
	if (value != ccc->value) {
   2158a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
   2158c:	428a      	cmp	r2, r1
   2158e:	d003      	beq.n	21598 <gatt_ccc_changed+0x32>
		ccc->value = value;
   21590:	8659      	strh	r1, [r3, #50]	; 0x32
		if (ccc->cfg_changed) {
   21592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   21594:	b103      	cbz	r3, 21598 <gatt_ccc_changed+0x32>
			ccc->cfg_changed(attr, value);
   21596:	4718      	bx	r3
}
   21598:	4770      	bx	lr

0002159a <gatt_indicate_rsp>:
{
   2159a:	b410      	push	{r4}
   2159c:	9b01      	ldr	r3, [sp, #4]
   2159e:	460a      	mov	r2, r1
	params->func(conn, params->attr, err);
   215a0:	e9d3 1401 	ldrd	r1, r4, [r3, #4]
   215a4:	4623      	mov	r3, r4
}
   215a6:	bc10      	pop	{r4}
	params->func(conn, params->attr, err);
   215a8:	4718      	bx	r3

000215aa <gen_hash_m>:
{
   215aa:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   215ac:	6807      	ldr	r7, [r0, #0]
   215ae:	783e      	ldrb	r6, [r7, #0]
{
   215b0:	b089      	sub	sp, #36	; 0x24
   215b2:	4605      	mov	r5, r0
   215b4:	460c      	mov	r4, r1
	if (attr->uuid->type != BT_UUID_TYPE_16)
   215b6:	b10e      	cbz	r6, 215bc <gen_hash_m+0x12>
	switch (u16->val) {
   215b8:	2601      	movs	r6, #1
   215ba:	e015      	b.n	215e8 <gen_hash_m+0x3e>
   215bc:	887b      	ldrh	r3, [r7, #2]
   215be:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   215c2:	d004      	beq.n	215ce <gen_hash_m+0x24>
   215c4:	d813      	bhi.n	215ee <gen_hash_m+0x44>
   215c6:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   215ca:	2b03      	cmp	r3, #3
   215cc:	d8f4      	bhi.n	215b8 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(attr->handle);
   215ce:	8a2b      	ldrh	r3, [r5, #16]
   215d0:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   215d4:	2202      	movs	r2, #2
   215d6:	f10d 010e 	add.w	r1, sp, #14
   215da:	4620      	mov	r0, r4
   215dc:	f7fe fb57 	bl	1fc8e <tc_cmac_update>
   215e0:	b9e8      	cbnz	r0, 2161e <gen_hash_m+0x74>
			state->err = -EINVAL;
   215e2:	f06f 0315 	mvn.w	r3, #21
   215e6:	65a3      	str	r3, [r4, #88]	; 0x58
}
   215e8:	4630      	mov	r0, r6
   215ea:	b009      	add	sp, #36	; 0x24
   215ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   215ee:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   215f2:	33ff      	adds	r3, #255	; 0xff
   215f4:	b29b      	uxth	r3, r3
   215f6:	2b04      	cmp	r3, #4
   215f8:	d8de      	bhi.n	215b8 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(attr->handle);
   215fa:	8a03      	ldrh	r3, [r0, #16]
   215fc:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   21600:	2202      	movs	r2, #2
   21602:	f10d 010e 	add.w	r1, sp, #14
   21606:	4620      	mov	r0, r4
   21608:	f7fe fb41 	bl	1fc8e <tc_cmac_update>
   2160c:	2800      	cmp	r0, #0
   2160e:	d0e8      	beq.n	215e2 <gen_hash_m+0x38>
		value = sys_cpu_to_le16(u16->val);
   21610:	887b      	ldrh	r3, [r7, #2]
   21612:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   21616:	2202      	movs	r2, #2
   21618:	f10d 010e 	add.w	r1, sp, #14
   2161c:	e017      	b.n	2164e <gen_hash_m+0xa4>
		value = sys_cpu_to_le16(u16->val);
   2161e:	887b      	ldrh	r3, [r7, #2]
   21620:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   21624:	2202      	movs	r2, #2
   21626:	f10d 010e 	add.w	r1, sp, #14
   2162a:	4620      	mov	r0, r4
   2162c:	f7fe fb2f 	bl	1fc8e <tc_cmac_update>
   21630:	2800      	cmp	r0, #0
   21632:	d0d6      	beq.n	215e2 <gen_hash_m+0x38>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   21634:	2000      	movs	r0, #0
   21636:	2310      	movs	r3, #16
   21638:	eb0d 0203 	add.w	r2, sp, r3
   2163c:	686f      	ldr	r7, [r5, #4]
   2163e:	9000      	str	r0, [sp, #0]
   21640:	4629      	mov	r1, r5
   21642:	47b8      	blx	r7
		if (len < 0) {
   21644:	1e02      	subs	r2, r0, #0
   21646:	da01      	bge.n	2164c <gen_hash_m+0xa2>
			state->err = len;
   21648:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   2164a:	e7cd      	b.n	215e8 <gen_hash_m+0x3e>
		if (tc_cmac_update(&state->state, data, len) ==
   2164c:	a904      	add	r1, sp, #16
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2164e:	4620      	mov	r0, r4
   21650:	f7fe fb1d 	bl	1fc8e <tc_cmac_update>
   21654:	2800      	cmp	r0, #0
   21656:	d1af      	bne.n	215b8 <gen_hash_m+0xe>
   21658:	e7c3      	b.n	215e2 <gen_hash_m+0x38>

0002165a <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   2165a:	2207      	movs	r2, #7
   2165c:	f7fe bc07 	b.w	1fe6e <memcpy>

00021660 <gatt_notify_mult_send>:
{
   21660:	b538      	push	{r3, r4, r5, lr}
   21662:	460c      	mov	r4, r1
	struct nfy_mult_data *data = nfy_mult_user_data(*buf);
   21664:	6809      	ldr	r1, [r1, #0]
	ret = bt_att_send(conn, *buf, data->func, data->user_data);
   21666:	e9d1 2305 	ldrd	r2, r3, [r1, #20]
   2166a:	f7ff fefc 	bl	21466 <bt_att_send>
	if (ret < 0) {
   2166e:	1e05      	subs	r5, r0, #0
   21670:	da02      	bge.n	21678 <gatt_notify_mult_send+0x18>
		net_buf_unref(*buf);
   21672:	6820      	ldr	r0, [r4, #0]
   21674:	f7fa fa30 	bl	1bad8 <net_buf_unref>
	*buf = NULL;
   21678:	2300      	movs	r3, #0
   2167a:	6023      	str	r3, [r4, #0]
}
   2167c:	4628      	mov	r0, r5
   2167e:	bd38      	pop	{r3, r4, r5, pc}

00021680 <gatt_sub_remove.part.0>:
static void gatt_sub_remove(struct bt_conn *conn, struct gatt_sub *sub,
   21680:	b507      	push	{r0, r1, r2, lr}
		bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
   21682:	2300      	movs	r3, #0
   21684:	4669      	mov	r1, sp
   21686:	3001      	adds	r0, #1
   21688:	9300      	str	r3, [sp, #0]
   2168a:	f8cd 3003 	str.w	r3, [sp, #3]
   2168e:	f7ff ffe4 	bl	2165a <bt_addr_le_copy>
}
   21692:	b003      	add	sp, #12
   21694:	f85d fb04 	ldr.w	pc, [sp], #4

00021698 <clear_cf_cfg>:
{
   21698:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2169a:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   2169c:	2500      	movs	r5, #0
   2169e:	4669      	mov	r1, sp
   216a0:	3001      	adds	r0, #1
   216a2:	9500      	str	r5, [sp, #0]
   216a4:	f8cd 5003 	str.w	r5, [sp, #3]
   216a8:	f7ff ffd7 	bl	2165a <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   216ac:	f104 0008 	add.w	r0, r4, #8
   216b0:	2201      	movs	r2, #1
   216b2:	4629      	mov	r1, r5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   216b4:	340c      	adds	r4, #12
   216b6:	f7fe fc05 	bl	1fec4 <memset>
   216ba:	f3bf 8f5b 	dmb	ish
   216be:	e854 3f00 	ldrex	r3, [r4]
   216c2:	e844 5200 	strex	r2, r5, [r4]
   216c6:	2a00      	cmp	r2, #0
   216c8:	d1f9      	bne.n	216be <clear_cf_cfg+0x26>
   216ca:	f3bf 8f5b 	dmb	ish
}
   216ce:	b003      	add	sp, #12
   216d0:	bd30      	pop	{r4, r5, pc}

000216d2 <match_uuid>:
   216d2:	6008      	str	r0, [r1, #0]
   216d4:	2000      	movs	r0, #0
   216d6:	4770      	bx	lr

000216d8 <find_ccc_cfg>:
{
   216d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   216da:	4606      	mov	r6, r0
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   216dc:	1c4c      	adds	r4, r1, #1
   216de:	f101 0533 	add.w	r5, r1, #51	; 0x33
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   216e2:	1e67      	subs	r7, r4, #1
		if (conn) {
   216e4:	b14e      	cbz	r6, 216fa <find_ccc_cfg+0x22>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   216e6:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   216ea:	4622      	mov	r2, r4
   216ec:	4630      	mov	r0, r6
   216ee:	f7fe ff62 	bl	205b6 <bt_conn_is_peer_addr_le>
   216f2:	b160      	cbz	r0, 2170e <find_ccc_cfg+0x36>
}
   216f4:	4638      	mov	r0, r7
   216f6:	b003      	add	sp, #12
   216f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return memcmp(a, b, sizeof(*a));
   216fa:	2207      	movs	r2, #7
   216fc:	4669      	mov	r1, sp
   216fe:	4620      	mov	r0, r4
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   21700:	9600      	str	r6, [sp, #0]
   21702:	f8cd 6003 	str.w	r6, [sp, #3]
   21706:	f7fe fba2 	bl	1fe4e <memcmp>
   2170a:	2800      	cmp	r0, #0
   2170c:	d0f2      	beq.n	216f4 <find_ccc_cfg+0x1c>
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   2170e:	340a      	adds	r4, #10
   21710:	42ac      	cmp	r4, r5
   21712:	d1e6      	bne.n	216e2 <find_ccc_cfg+0xa>
	return NULL;
   21714:	2700      	movs	r7, #0
   21716:	e7ed      	b.n	216f4 <find_ccc_cfg+0x1c>

00021718 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   21718:	2301      	movs	r3, #1
   2171a:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2171c:	f3bf 8f5b 	dmb	ish
   21720:	e850 2f00 	ldrex	r2, [r0]
   21724:	431a      	orrs	r2, r3
   21726:	e840 2100 	strex	r1, r2, [r0]
   2172a:	2900      	cmp	r1, #0
   2172c:	d1f8      	bne.n	21720 <atomic_set_bit+0x8>
   2172e:	f3bf 8f5b 	dmb	ish
}
   21732:	4770      	bx	lr

00021734 <sc_restore_rsp>:
{
   21734:	b508      	push	{r3, lr}
	cfg = find_cf_cfg(conn);
   21736:	f7ec f9c9 	bl	dacc <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   2173a:	b140      	cbz	r0, 2174e <sc_restore_rsp+0x1a>
   2173c:	7a03      	ldrb	r3, [r0, #8]
   2173e:	07db      	lsls	r3, r3, #31
   21740:	d505      	bpl.n	2174e <sc_restore_rsp+0x1a>
}
   21742:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   21746:	2100      	movs	r1, #0
   21748:	300c      	adds	r0, #12
   2174a:	f7ff bfe5 	b.w	21718 <atomic_set_bit>
}
   2174e:	bd08      	pop	{r3, pc}

00021750 <read_appearance>:
{
   21750:	b513      	push	{r0, r1, r4, lr}
   21752:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   21756:	4610      	mov	r0, r2
	if (offset > value_len) {
   21758:	2902      	cmp	r1, #2
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   2175a:	f04f 0200 	mov.w	r2, #0
   2175e:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   21762:	d80d      	bhi.n	21780 <read_appearance+0x30>
	len = MIN(buf_len, value_len - offset);
   21764:	f1c1 0402 	rsb	r4, r1, #2
   21768:	429c      	cmp	r4, r3
   2176a:	bfa8      	it	ge
   2176c:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   2176e:	f10d 0306 	add.w	r3, sp, #6
   21772:	4622      	mov	r2, r4
   21774:	4419      	add	r1, r3
   21776:	f7fe fb7a 	bl	1fe6e <memcpy>
}
   2177a:	4620      	mov	r0, r4
   2177c:	b002      	add	sp, #8
   2177e:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   21780:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   21784:	e7f9      	b.n	2177a <read_appearance+0x2a>

00021786 <read_name>:
{
   21786:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2178a:	4698      	mov	r8, r3
   2178c:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   21790:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   21792:	f7e8 fb41 	bl	9e18 <bt_get_name>
   21796:	4607      	mov	r7, r0
				 strlen(name));
   21798:	f7fe fb46 	bl	1fe28 <strlen>
	if (offset > value_len) {
   2179c:	b283      	uxth	r3, r0
   2179e:	42b3      	cmp	r3, r6
   217a0:	d30c      	bcc.n	217bc <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   217a2:	1b9c      	subs	r4, r3, r6
   217a4:	4544      	cmp	r4, r8
   217a6:	bfa8      	it	ge
   217a8:	4644      	movge	r4, r8
   217aa:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   217ac:	4622      	mov	r2, r4
   217ae:	19b9      	adds	r1, r7, r6
   217b0:	4628      	mov	r0, r5
   217b2:	f7fe fb5c 	bl	1fe6e <memcpy>
}
   217b6:	4620      	mov	r0, r4
   217b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   217bc:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   217c0:	e7f9      	b.n	217b6 <read_name+0x30>

000217c2 <bt_gatt_attr_read_ccc>:
{
   217c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   217c4:	68c9      	ldr	r1, [r1, #12]
{
   217c6:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   217ca:	4615      	mov	r5, r2
   217cc:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   217ce:	f7ff ff83 	bl	216d8 <find_ccc_cfg>
	if (cfg) {
   217d2:	b100      	cbz	r0, 217d6 <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   217d4:	8900      	ldrh	r0, [r0, #8]
   217d6:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   217da:	2e02      	cmp	r6, #2
   217dc:	d80e      	bhi.n	217fc <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   217de:	f1c6 0402 	rsb	r4, r6, #2
   217e2:	42bc      	cmp	r4, r7
   217e4:	bfa8      	it	ge
   217e6:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   217e8:	f10d 0306 	add.w	r3, sp, #6
   217ec:	4622      	mov	r2, r4
   217ee:	1999      	adds	r1, r3, r6
   217f0:	4628      	mov	r0, r5
   217f2:	f7fe fb3c 	bl	1fe6e <memcpy>
}
   217f6:	4620      	mov	r0, r4
   217f8:	b003      	add	sp, #12
   217fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   217fc:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   21800:	e7f9      	b.n	217f6 <bt_gatt_attr_read_ccc+0x34>

00021802 <cf_read>:
{
   21802:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   21804:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   21806:	2300      	movs	r3, #0
{
   21808:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   2180c:	f88d 3004 	strb.w	r3, [sp, #4]
{
   21810:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   21812:	f7ec f95b 	bl	dacc <find_cf_cfg>
	if (cfg) {
   21816:	b128      	cbz	r0, 21824 <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   21818:	f100 0108 	add.w	r1, r0, #8
   2181c:	2201      	movs	r2, #1
   2181e:	a801      	add	r0, sp, #4
   21820:	f7fe fb25 	bl	1fe6e <memcpy>
	if (offset > value_len) {
   21824:	2e01      	cmp	r6, #1
   21826:	d80d      	bhi.n	21844 <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   21828:	f1c6 0401 	rsb	r4, r6, #1
   2182c:	42bc      	cmp	r4, r7
   2182e:	bfa8      	it	ge
   21830:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   21832:	ab01      	add	r3, sp, #4
   21834:	4622      	mov	r2, r4
   21836:	1999      	adds	r1, r3, r6
   21838:	4628      	mov	r0, r5
   2183a:	f7fe fb18 	bl	1fe6e <memcpy>
}
   2183e:	4620      	mov	r0, r4
   21840:	b003      	add	sp, #12
   21842:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   21844:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   21848:	e7f9      	b.n	2183e <cf_read+0x3c>

0002184a <bt_gatt_attr_read_service>:
{
   2184a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
   2184c:	68c9      	ldr	r1, [r1, #12]
{
   2184e:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   21852:	461c      	mov	r4, r3
	if (uuid->type == BT_UUID_TYPE_16) {
   21854:	780b      	ldrb	r3, [r1, #0]
{
   21856:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   21858:	b993      	cbnz	r3, 21880 <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   2185a:	884b      	ldrh	r3, [r1, #2]
   2185c:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (offset > value_len) {
   21860:	2d02      	cmp	r5, #2
   21862:	d819      	bhi.n	21898 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   21864:	f1c5 0202 	rsb	r2, r5, #2
   21868:	4294      	cmp	r4, r2
   2186a:	bfa8      	it	ge
   2186c:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   2186e:	f10d 0306 	add.w	r3, sp, #6
   21872:	4622      	mov	r2, r4
   21874:	1959      	adds	r1, r3, r5
   21876:	f7fe fafa 	bl	1fe6e <memcpy>
}
   2187a:	4620      	mov	r0, r4
   2187c:	b003      	add	sp, #12
   2187e:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
   21880:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
   21882:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   21886:	d807      	bhi.n	21898 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   21888:	f1c5 0210 	rsb	r2, r5, #16
   2188c:	4294      	cmp	r4, r2
   2188e:	bfa8      	it	ge
   21890:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   21892:	4622      	mov	r2, r4
   21894:	4429      	add	r1, r5
   21896:	e7ee      	b.n	21876 <bt_gatt_attr_read_service+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   21898:	f06f 0406 	mvn.w	r4, #6
   2189c:	e7ed      	b.n	2187a <bt_gatt_attr_read_service+0x30>

0002189e <gatt_sub_remove>:
{
   2189e:	b538      	push	{r3, r4, r5, lr}
   218a0:	460c      	mov	r4, r1
	if (params) {
   218a2:	4619      	mov	r1, r3
   218a4:	b16b      	cbz	r3, 218c2 <gatt_sub_remove+0x24>
		sys_slist_remove(&sub->list, prev, &params->node);
   218a6:	f103 0510 	add.w	r5, r3, #16
Z_GENLIST_REMOVE(slist, snode)
   218aa:	691b      	ldr	r3, [r3, #16]
   218ac:	b982      	cbnz	r2, 218d0 <gatt_sub_remove+0x32>
   218ae:	68e2      	ldr	r2, [r4, #12]
	list->head = node;
   218b0:	60a3      	str	r3, [r4, #8]
Z_GENLIST_REMOVE(slist, snode)
   218b2:	4295      	cmp	r5, r2
   218b4:	d100      	bne.n	218b8 <gatt_sub_remove+0x1a>
	list->tail = node;
   218b6:	60e3      	str	r3, [r4, #12]
	parent->next = child;
   218b8:	2300      	movs	r3, #0
		params->notify(conn, params, NULL, 0);
   218ba:	680d      	ldr	r5, [r1, #0]
   218bc:	610b      	str	r3, [r1, #16]
   218be:	461a      	mov	r2, r3
   218c0:	47a8      	blx	r5
	if (sys_slist_is_empty(&sub->list)) {
   218c2:	68a3      	ldr	r3, [r4, #8]
   218c4:	b953      	cbnz	r3, 218dc <gatt_sub_remove+0x3e>
   218c6:	4620      	mov	r0, r4
}
   218c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   218cc:	f7ff bed8 	b.w	21680 <gatt_sub_remove.part.0>
   218d0:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   218d2:	68e3      	ldr	r3, [r4, #12]
   218d4:	429d      	cmp	r5, r3
	list->tail = node;
   218d6:	bf08      	it	eq
   218d8:	60e2      	streq	r2, [r4, #12]
}
   218da:	e7ed      	b.n	218b8 <gatt_sub_remove+0x1a>
   218dc:	bd38      	pop	{r3, r4, r5, pc}

000218de <gatt_write_ccc_rsp>:
{
   218de:	b570      	push	{r4, r5, r6, lr}
   218e0:	9c04      	ldr	r4, [sp, #16]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   218e2:	f3bf 8f5b 	dmb	ish
   218e6:	4605      	mov	r5, r0
   218e8:	f104 030c 	add.w	r3, r4, #12
   218ec:	e853 2f00 	ldrex	r2, [r3]
   218f0:	f022 0204 	bic.w	r2, r2, #4
   218f4:	e843 2c00 	strex	ip, r2, [r3]
   218f8:	f1bc 0f00 	cmp.w	ip, #0
   218fc:	d1f6      	bne.n	218ec <gatt_write_ccc_rsp+0xe>
   218fe:	f3bf 8f5b 	dmb	ish
	if (err) {
   21902:	b1a9      	cbz	r1, 21930 <gatt_write_ccc_rsp+0x52>
		sub = gatt_sub_find(conn);
   21904:	2100      	movs	r1, #0
   21906:	f7ec f85d 	bl	d9c4 <gatt_sub_find_free>
		if (!sub) {
   2190a:	4601      	mov	r1, r0
   2190c:	b1c8      	cbz	r0, 21942 <gatt_write_ccc_rsp+0x64>
		SYS_SLIST_FOR_EACH_NODE_SAFE(&sub->list, node, tmp) {
   2190e:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_PEEK_NEXT(slist, snode)
   21910:	b1bb      	cbz	r3, 21942 <gatt_write_ccc_rsp+0x64>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   21912:	681a      	ldr	r2, [r3, #0]
			if (node == &params->node) {
   21914:	f104 0010 	add.w	r0, r4, #16
   21918:	4283      	cmp	r3, r0
   2191a:	d105      	bne.n	21928 <gatt_write_ccc_rsp+0x4a>
				gatt_sub_remove(conn, sub, tmp, params);
   2191c:	4623      	mov	r3, r4
   2191e:	4628      	mov	r0, r5
}
   21920:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				gatt_sub_remove(conn, sub, tmp, params);
   21924:	f7ff bfbb 	b.w	2189e <gatt_sub_remove>
Z_GENLIST_PEEK_NEXT(slist, snode)
   21928:	b15a      	cbz	r2, 21942 <gatt_write_ccc_rsp+0x64>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2192a:	4613      	mov	r3, r2
Z_GENLIST_PEEK_NEXT(slist, snode)
   2192c:	6812      	ldr	r2, [r2, #0]
   2192e:	e7f3      	b.n	21918 <gatt_write_ccc_rsp+0x3a>
	} else if (!params->value) {
   21930:	8923      	ldrh	r3, [r4, #8]
   21932:	b933      	cbnz	r3, 21942 <gatt_write_ccc_rsp+0x64>
		params->notify(conn, params, NULL, 0);
   21934:	6825      	ldr	r5, [r4, #0]
   21936:	4621      	mov	r1, r4
   21938:	46ac      	mov	ip, r5
   2193a:	461a      	mov	r2, r3
}
   2193c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		params->notify(conn, params, NULL, 0);
   21940:	4760      	bx	ip
}
   21942:	bd70      	pop	{r4, r5, r6, pc}

00021944 <sc_clear>:
{
   21944:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   21946:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   2194a:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2194c:	4631      	mov	r1, r6
   2194e:	7a00      	ldrb	r0, [r0, #8]
   21950:	f7fe fd67 	bl	20422 <bt_addr_le_is_bonded>
   21954:	7a20      	ldrb	r0, [r4, #8]
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   21956:	4631      	mov	r1, r6
   21958:	f7ec f85e 	bl	da18 <find_sc_cfg>
	if (!cfg) {
   2195c:	b128      	cbz	r0, 2196a <sc_clear+0x26>
}
   2195e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   21962:	220c      	movs	r2, #12
   21964:	2100      	movs	r1, #0
   21966:	f7fe baad 	b.w	1fec4 <memset>
}
   2196a:	bd70      	pop	{r4, r5, r6, pc}

0002196c <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   2196c:	2a02      	cmp	r2, #2
{
   2196e:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   21970:	d108      	bne.n	21984 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   21972:	2300      	movs	r3, #0
   21974:	f100 0188 	add.w	r1, r0, #136	; 0x88
   21978:	461a      	mov	r2, r3
   2197a:	7a00      	ldrb	r0, [r0, #8]
   2197c:	f7ec f86e 	bl	da5c <sc_save>
}
   21980:	2002      	movs	r0, #2
   21982:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   21984:	f7ff ffde 	bl	21944 <sc_clear>
   21988:	e7fa      	b.n	21980 <sc_ccc_cfg_write+0x14>

0002198a <bt_gatt_attr_read>:
{
   2198a:	b538      	push	{r3, r4, r5, lr}
   2198c:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   21990:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	if (offset > value_len) {
   21994:	42a9      	cmp	r1, r5
{
   21996:	4610      	mov	r0, r2
	if (offset > value_len) {
   21998:	d80b      	bhi.n	219b2 <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   2199a:	1a6d      	subs	r5, r5, r1
   2199c:	429d      	cmp	r5, r3
   2199e:	bfa8      	it	ge
   219a0:	461d      	movge	r5, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   219a2:	9b05      	ldr	r3, [sp, #20]
   219a4:	b2ad      	uxth	r5, r5
   219a6:	462a      	mov	r2, r5
   219a8:	4419      	add	r1, r3
   219aa:	f7fe fa60 	bl	1fe6e <memcpy>
}
   219ae:	4628      	mov	r0, r5
   219b0:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   219b2:	f06f 0506 	mvn.w	r5, #6
   219b6:	e7fa      	b.n	219ae <bt_gatt_attr_read+0x24>

000219b8 <bt_gatt_attr_read_chrc>:
{
   219b8:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   219ba:	68cf      	ldr	r7, [r1, #12]
{
   219bc:	b087      	sub	sp, #28
   219be:	4608      	mov	r0, r1
   219c0:	461c      	mov	r4, r3
	pdu.properties = chrc->properties;
   219c2:	79bb      	ldrb	r3, [r7, #6]
   219c4:	f88d 3004 	strb.w	r3, [sp, #4]
{
   219c8:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   219ca:	f7ec fb95 	bl	e0f8 <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   219ce:	6839      	ldr	r1, [r7, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   219d0:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   219d4:	780b      	ldrb	r3, [r1, #0]
{
   219d6:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   219da:	b99b      	cbnz	r3, 21a04 <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   219dc:	884b      	ldrh	r3, [r1, #2]
   219de:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   219e2:	2105      	movs	r1, #5
	if (offset > value_len) {
   219e4:	42b1      	cmp	r1, r6
   219e6:	d315      	bcc.n	21a14 <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   219e8:	1b89      	subs	r1, r1, r6
   219ea:	42a1      	cmp	r1, r4
   219ec:	bfa8      	it	ge
   219ee:	4621      	movge	r1, r4
   219f0:	b28c      	uxth	r4, r1
	memcpy(buf, (uint8_t *)value + offset, len);
   219f2:	ab01      	add	r3, sp, #4
   219f4:	4622      	mov	r2, r4
   219f6:	1999      	adds	r1, r3, r6
   219f8:	4628      	mov	r0, r5
   219fa:	f7fe fa38 	bl	1fe6e <memcpy>
}
   219fe:	4620      	mov	r0, r4
   21a00:	b007      	add	sp, #28
   21a02:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   21a04:	3101      	adds	r1, #1
   21a06:	2210      	movs	r2, #16
   21a08:	f10d 0007 	add.w	r0, sp, #7
   21a0c:	f7fe fa2f 	bl	1fe6e <memcpy>
		value_len += 16U;
   21a10:	2113      	movs	r1, #19
   21a12:	e7e7      	b.n	219e4 <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   21a14:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   21a18:	e7f1      	b.n	219fe <bt_gatt_attr_read_chrc+0x46>

00021a1a <bt_gatt_foreach_attr>:
{
   21a1a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   21a1c:	e9cd 2301 	strd	r2, r3, [sp, #4]
   21a20:	2300      	movs	r3, #0
   21a22:	9300      	str	r3, [sp, #0]
   21a24:	461a      	mov	r2, r3
   21a26:	f7ec fb7f 	bl	e128 <bt_gatt_foreach_attr_type>
}
   21a2a:	b005      	add	sp, #20
   21a2c:	f85d fb04 	ldr.w	pc, [sp], #4

00021a30 <db_hash_process>:
	db_hash_gen(true);
   21a30:	f7ec bbda 	b.w	e1e8 <db_hash_gen.isra.0>

00021a34 <bt_gatt_check_perm>:
{
   21a34:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   21a36:	07d4      	lsls	r4, r2, #31
{
   21a38:	4605      	mov	r5, r0
   21a3a:	7c88      	ldrb	r0, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   21a3c:	d504      	bpl.n	21a48 <bt_gatt_check_perm+0x14>
   21a3e:	f010 0f15 	tst.w	r0, #21
   21a42:	d01e      	beq.n	21a82 <bt_gatt_check_perm+0x4e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   21a44:	684b      	ldr	r3, [r1, #4]
   21a46:	b1e3      	cbz	r3, 21a82 <bt_gatt_check_perm+0x4e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   21a48:	0793      	lsls	r3, r2, #30
   21a4a:	d504      	bpl.n	21a56 <bt_gatt_check_perm+0x22>
   21a4c:	f010 0f2a 	tst.w	r0, #42	; 0x2a
   21a50:	d019      	beq.n	21a86 <bt_gatt_check_perm+0x52>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   21a52:	688b      	ldr	r3, [r1, #8]
   21a54:	b1bb      	cbz	r3, 21a86 <bt_gatt_check_perm+0x52>
	mask &= attr->perm;
   21a56:	ea02 0400 	and.w	r4, r2, r0
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   21a5a:	f014 0f30 	tst.w	r4, #48	; 0x30
   21a5e:	d103      	bne.n	21a68 <bt_gatt_check_perm+0x34>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   21a60:	f014 000c 	ands.w	r0, r4, #12
   21a64:	d107      	bne.n	21a76 <bt_gatt_check_perm+0x42>
}
   21a66:	bd38      	pop	{r3, r4, r5, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   21a68:	4628      	mov	r0, r5
   21a6a:	f7fe fda2 	bl	205b2 <bt_conn_get_security>
   21a6e:	2802      	cmp	r0, #2
   21a70:	d8f6      	bhi.n	21a60 <bt_gatt_check_perm+0x2c>
			return BT_ATT_ERR_AUTHENTICATION;
   21a72:	2005      	movs	r0, #5
   21a74:	e7f7      	b.n	21a66 <bt_gatt_check_perm+0x32>
		if (!conn->encrypt) {
   21a76:	7aeb      	ldrb	r3, [r5, #11]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   21a78:	2b00      	cmp	r3, #0
   21a7a:	bf14      	ite	ne
   21a7c:	2000      	movne	r0, #0
   21a7e:	200f      	moveq	r0, #15
   21a80:	e7f1      	b.n	21a66 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   21a82:	2002      	movs	r0, #2
   21a84:	e7ef      	b.n	21a66 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   21a86:	2003      	movs	r0, #3
   21a88:	e7ed      	b.n	21a66 <bt_gatt_check_perm+0x32>

00021a8a <bt_gatt_unsubscribe>:
{
   21a8a:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   21a8e:	7b43      	ldrb	r3, [r0, #13]
   21a90:	2b06      	cmp	r3, #6
{
   21a92:	4681      	mov	r9, r0
   21a94:	460e      	mov	r6, r1
	if (conn->state != BT_CONN_CONNECTED) {
   21a96:	d16f      	bne.n	21b78 <bt_gatt_unsubscribe+0xee>
	sub = gatt_sub_find(conn);
   21a98:	2100      	movs	r1, #0
   21a9a:	f7eb ff93 	bl	d9c4 <gatt_sub_find_free>
	if (!sub) {
   21a9e:	4607      	mov	r7, r0
   21aa0:	b920      	cbnz	r0, 21aac <bt_gatt_unsubscribe+0x22>
		return -EINVAL;
   21aa2:	f06f 0015 	mvn.w	r0, #21
}
   21aa6:	b001      	add	sp, #4
   21aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   21aac:	6884      	ldr	r4, [r0, #8]
   21aae:	b1cc      	cbz	r4, 21ae4 <bt_gatt_unsubscribe+0x5a>
   21ab0:	f1b4 0510 	subs.w	r5, r4, #16
   21ab4:	d018      	beq.n	21ae8 <bt_gatt_unsubscribe+0x5e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   21ab6:	6824      	ldr	r4, [r4, #0]
   21ab8:	b104      	cbz	r4, 21abc <bt_gatt_unsubscribe+0x32>
   21aba:	3c10      	subs	r4, #16
   21abc:	f04f 0800 	mov.w	r8, #0
   21ac0:	46c3      	mov	fp, r8
   21ac2:	46c2      	mov	sl, r8
	parent->next = child;
   21ac4:	4642      	mov	r2, r8
   21ac6:	b98d      	cbnz	r5, 21aec <bt_gatt_unsubscribe+0x62>
	if (!found) {
   21ac8:	f1bb 0f00 	cmp.w	fp, #0
   21acc:	d0e9      	beq.n	21aa2 <bt_gatt_unsubscribe+0x18>
	if (has_subscription) {
   21ace:	f1ba 0f00 	cmp.w	sl, #0
   21ad2:	d046      	beq.n	21b62 <bt_gatt_unsubscribe+0xd8>
		params->notify(conn, params, NULL, 0);
   21ad4:	6834      	ldr	r4, [r6, #0]
   21ad6:	462b      	mov	r3, r5
   21ad8:	462a      	mov	r2, r5
   21ada:	4631      	mov	r1, r6
   21adc:	4648      	mov	r0, r9
   21ade:	47a0      	blx	r4
		return 0;
   21ae0:	4628      	mov	r0, r5
   21ae2:	e7e0      	b.n	21aa6 <bt_gatt_unsubscribe+0x1c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   21ae4:	4625      	mov	r5, r4
   21ae6:	e7e9      	b.n	21abc <bt_gatt_unsubscribe+0x32>
   21ae8:	462c      	mov	r4, r5
   21aea:	e7e7      	b.n	21abc <bt_gatt_unsubscribe+0x32>
		if (params == tmp) {
   21aec:	42b5      	cmp	r5, r6
   21aee:	f105 0310 	add.w	r3, r5, #16
   21af2:	d129      	bne.n	21b48 <bt_gatt_unsubscribe+0xbe>
Z_GENLIST_REMOVE(slist, snode)
   21af4:	6928      	ldr	r0, [r5, #16]
   21af6:	f1b8 0f00 	cmp.w	r8, #0
   21afa:	d11d      	bne.n	21b38 <bt_gatt_unsubscribe+0xae>
   21afc:	68f9      	ldr	r1, [r7, #12]
	list->head = node;
   21afe:	60b8      	str	r0, [r7, #8]
Z_GENLIST_REMOVE(slist, snode)
   21b00:	428b      	cmp	r3, r1
   21b02:	d100      	bne.n	21b06 <bt_gatt_unsubscribe+0x7c>
	list->tail = node;
   21b04:	60f8      	str	r0, [r7, #12]
	parent->next = child;
   21b06:	612a      	str	r2, [r5, #16]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   21b08:	f3bf 8f5b 	dmb	ish
   21b0c:	68f3      	ldr	r3, [r6, #12]
   21b0e:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   21b12:	f3c3 0b80 	ubfx	fp, r3, #2, #1
			if (atomic_test_bit(params->flags,
   21b16:	075b      	lsls	r3, r3, #29
   21b18:	d51e      	bpl.n	21b58 <bt_gatt_unsubscribe+0xce>
	bt_att_req_cancel(conn, params);
   21b1a:	4631      	mov	r1, r6
   21b1c:	4648      	mov	r0, r9
   21b1e:	f7eb fe69 	bl	d7f4 <bt_att_req_cancel>
}
   21b22:	2200      	movs	r2, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   21b24:	b1dc      	cbz	r4, 21b5e <bt_gatt_unsubscribe+0xd4>
Z_GENLIST_PEEK_NEXT(slist, snode)
   21b26:	f114 0310 	adds.w	r3, r4, #16
   21b2a:	d002      	beq.n	21b32 <bt_gatt_unsubscribe+0xa8>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   21b2c:	6923      	ldr	r3, [r4, #16]
   21b2e:	b103      	cbz	r3, 21b32 <bt_gatt_unsubscribe+0xa8>
   21b30:	3b10      	subs	r3, #16
   21b32:	4625      	mov	r5, r4
   21b34:	461c      	mov	r4, r3
   21b36:	e7c6      	b.n	21ac6 <bt_gatt_unsubscribe+0x3c>
	parent->next = child;
   21b38:	f8c8 0000 	str.w	r0, [r8]
Z_GENLIST_REMOVE(slist, snode)
   21b3c:	68f9      	ldr	r1, [r7, #12]
   21b3e:	428b      	cmp	r3, r1
	list->tail = node;
   21b40:	bf08      	it	eq
   21b42:	f8c7 800c 	streq.w	r8, [r7, #12]
}
   21b46:	e7de      	b.n	21b06 <bt_gatt_unsubscribe+0x7c>
		if (tmp->value_handle == params->value_handle) {
   21b48:	88a8      	ldrh	r0, [r5, #4]
   21b4a:	88b1      	ldrh	r1, [r6, #4]
   21b4c:	4698      	mov	r8, r3
   21b4e:	4288      	cmp	r0, r1
   21b50:	bf08      	it	eq
   21b52:	f04f 0a01 	moveq.w	sl, #1
   21b56:	e7e5      	b.n	21b24 <bt_gatt_unsubscribe+0x9a>
			found = true;
   21b58:	f04f 0b01 	mov.w	fp, #1
   21b5c:	e7e2      	b.n	21b24 <bt_gatt_unsubscribe+0x9a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   21b5e:	4623      	mov	r3, r4
   21b60:	e7e7      	b.n	21b32 <bt_gatt_unsubscribe+0xa8>
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
   21b62:	88f1      	ldrh	r1, [r6, #6]
	params->value = 0x0000;
   21b64:	f8a6 a008 	strh.w	sl, [r6, #8]
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
   21b68:	4633      	mov	r3, r6
   21b6a:	4652      	mov	r2, sl
   21b6c:	4648      	mov	r0, r9
}
   21b6e:	b001      	add	sp, #4
   21b70:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
   21b74:	f7ec b95a 	b.w	de2c <gatt_write_ccc.constprop.0>
		return -ENOTCONN;
   21b78:	f06f 0038 	mvn.w	r0, #56	; 0x38
   21b7c:	e793      	b.n	21aa6 <bt_gatt_unsubscribe+0x1c>

00021b7e <bt_gatt_notification>:
{
   21b7e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21b82:	4688      	mov	r8, r1
	sub = gatt_sub_find(conn);
   21b84:	2100      	movs	r1, #0
{
   21b86:	4607      	mov	r7, r0
   21b88:	4691      	mov	r9, r2
   21b8a:	469a      	mov	sl, r3
	sub = gatt_sub_find(conn);
   21b8c:	f7eb ff1a 	bl	d9c4 <gatt_sub_find_free>
	if (!sub) {
   21b90:	b1f8      	cbz	r0, 21bd2 <bt_gatt_notification+0x54>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   21b92:	6883      	ldr	r3, [r0, #8]
   21b94:	b1eb      	cbz	r3, 21bd2 <bt_gatt_notification+0x54>
   21b96:	f1b3 0610 	subs.w	r6, r3, #16
   21b9a:	d01a      	beq.n	21bd2 <bt_gatt_notification+0x54>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   21b9c:	681c      	ldr	r4, [r3, #0]
   21b9e:	b104      	cbz	r4, 21ba2 <bt_gatt_notification+0x24>
   21ba0:	3c10      	subs	r4, #16
		if (handle != params->value_handle) {
   21ba2:	88b3      	ldrh	r3, [r6, #4]
   21ba4:	4543      	cmp	r3, r8
   21ba6:	d10a      	bne.n	21bbe <bt_gatt_notification+0x40>
		if (params->notify(conn, params, data, length) ==
   21ba8:	6835      	ldr	r5, [r6, #0]
   21baa:	4653      	mov	r3, sl
   21bac:	464a      	mov	r2, r9
   21bae:	4631      	mov	r1, r6
   21bb0:	4638      	mov	r0, r7
   21bb2:	47a8      	blx	r5
   21bb4:	b918      	cbnz	r0, 21bbe <bt_gatt_notification+0x40>
			bt_gatt_unsubscribe(conn, params);
   21bb6:	4631      	mov	r1, r6
   21bb8:	4638      	mov	r0, r7
   21bba:	f7ff ff66 	bl	21a8a <bt_gatt_unsubscribe>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   21bbe:	b144      	cbz	r4, 21bd2 <bt_gatt_notification+0x54>
Z_GENLIST_PEEK_NEXT(slist, snode)
   21bc0:	f114 0510 	adds.w	r5, r4, #16
   21bc4:	d002      	beq.n	21bcc <bt_gatt_notification+0x4e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   21bc6:	6925      	ldr	r5, [r4, #16]
   21bc8:	b105      	cbz	r5, 21bcc <bt_gatt_notification+0x4e>
   21bca:	3d10      	subs	r5, #16
{
   21bcc:	4626      	mov	r6, r4
   21bce:	462c      	mov	r4, r5
   21bd0:	e7e7      	b.n	21ba2 <bt_gatt_notification+0x24>
}
   21bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00021bd6 <bt_gatt_change_aware>:
{
   21bd6:	b510      	push	{r4, lr}
   21bd8:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   21bda:	f7eb ff77 	bl	dacc <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   21bde:	4603      	mov	r3, r0
   21be0:	b910      	cbnz	r0, 21be8 <bt_gatt_change_aware+0x12>
		return true;
   21be2:	2401      	movs	r4, #1
}
   21be4:	4620      	mov	r0, r4
   21be6:	bd10      	pop	{r4, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   21be8:	7a02      	ldrb	r2, [r0, #8]
   21bea:	07d2      	lsls	r2, r2, #31
   21bec:	d5f9      	bpl.n	21be2 <bt_gatt_change_aware+0xc>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   21bee:	f3bf 8f5b 	dmb	ish
   21bf2:	68d9      	ldr	r1, [r3, #12]
   21bf4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   21bf8:	f011 0101 	ands.w	r1, r1, #1
   21bfc:	f100 000c 	add.w	r0, r0, #12
   21c00:	d1ef      	bne.n	21be2 <bt_gatt_change_aware+0xc>
	if (!req) {
   21c02:	2c00      	cmp	r4, #0
   21c04:	d0ee      	beq.n	21be4 <bt_gatt_change_aware+0xe>
   21c06:	f3bf 8f5b 	dmb	ish
   21c0a:	68db      	ldr	r3, [r3, #12]
   21c0c:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   21c10:	f3c3 0440 	ubfx	r4, r3, #1, #1
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   21c14:	079b      	lsls	r3, r3, #30
   21c16:	d50e      	bpl.n	21c36 <bt_gatt_change_aware+0x60>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   21c18:	f3bf 8f5b 	dmb	ish
   21c1c:	e850 3f00 	ldrex	r3, [r0]
   21c20:	f023 0302 	bic.w	r3, r3, #2
   21c24:	e840 3200 	strex	r2, r3, [r0]
   21c28:	2a00      	cmp	r2, #0
   21c2a:	d1f7      	bne.n	21c1c <bt_gatt_change_aware+0x46>
   21c2c:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   21c30:	f7ff fd72 	bl	21718 <atomic_set_bit>
	return false;
   21c34:	e7d6      	b.n	21be4 <bt_gatt_change_aware+0xe>
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   21c36:	2101      	movs	r1, #1
   21c38:	e7fa      	b.n	21c30 <bt_gatt_change_aware+0x5a>

00021c3a <sys_memcpy_swap>:
	psrc += length - 1;
   21c3a:	1e53      	subs	r3, r2, #1
   21c3c:	4419      	add	r1, r3
	for (; length > 0; length--) {
   21c3e:	4402      	add	r2, r0
		*pdst++ = *psrc--;
   21c40:	f811 3901 	ldrb.w	r3, [r1], #-1
   21c44:	f800 3b01 	strb.w	r3, [r0], #1
	for (; length > 0; length--) {
   21c48:	4290      	cmp	r0, r2
   21c4a:	d1f9      	bne.n	21c40 <sys_memcpy_swap+0x6>
}
   21c4c:	4770      	bx	lr

00021c4e <smp_pairing_req>:
}
   21c4e:	2007      	movs	r0, #7
   21c50:	4770      	bx	lr

00021c52 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   21c52:	2301      	movs	r3, #1
   21c54:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   21c56:	f3bf 8f5b 	dmb	ish
   21c5a:	e850 2f00 	ldrex	r2, [r0]
   21c5e:	431a      	orrs	r2, r3
   21c60:	e840 2100 	strex	r1, r2, [r0]
   21c64:	2900      	cmp	r1, #0
   21c66:	d1f8      	bne.n	21c5a <atomic_set_bit+0x8>
   21c68:	f3bf 8f5b 	dmb	ish
}
   21c6c:	4770      	bx	lr

00021c6e <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   21c6e:	f3bf 8f5b 	dmb	ish
   21c72:	6800      	ldr	r0, [r0, #0]
   21c74:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   21c78:	4108      	asrs	r0, r1
}
   21c7a:	f000 0001 	and.w	r0, r0, #1
   21c7e:	4770      	bx	lr

00021c80 <bt_smp_aes_cmac>:
{
   21c80:	b570      	push	{r4, r5, r6, lr}
   21c82:	b0c2      	sub	sp, #264	; 0x108
   21c84:	460d      	mov	r5, r1
   21c86:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   21c88:	4601      	mov	r1, r0
   21c8a:	aa16      	add	r2, sp, #88	; 0x58
   21c8c:	4668      	mov	r0, sp
{
   21c8e:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   21c90:	f7fd ffd2 	bl	1fc38 <tc_cmac_setup>
   21c94:	b150      	cbz	r0, 21cac <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   21c96:	4632      	mov	r2, r6
   21c98:	4629      	mov	r1, r5
   21c9a:	4668      	mov	r0, sp
   21c9c:	f7fd fff7 	bl	1fc8e <tc_cmac_update>
   21ca0:	b120      	cbz	r0, 21cac <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   21ca2:	4669      	mov	r1, sp
   21ca4:	4620      	mov	r0, r4
   21ca6:	f7fe f85e 	bl	1fd66 <tc_cmac_final>
   21caa:	b918      	cbnz	r0, 21cb4 <bt_smp_aes_cmac+0x34>
		return -EIO;
   21cac:	f06f 0004 	mvn.w	r0, #4
}
   21cb0:	b042      	add	sp, #264	; 0x108
   21cb2:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   21cb4:	2000      	movs	r0, #0
   21cb6:	e7fb      	b.n	21cb0 <bt_smp_aes_cmac+0x30>

00021cb8 <bt_smp_disconnected>:
{
   21cb8:	b538      	push	{r3, r4, r5, lr}
	struct bt_keys *keys = chan->conn->le.keys;
   21cba:	6803      	ldr	r3, [r0, #0]
   21cbc:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
{
   21cc0:	4604      	mov	r4, r0
	k_delayed_work_cancel(&smp->work);
   21cc2:	f500 70d8 	add.w	r0, r0, #432	; 0x1b0
   21cc6:	f001 fa1b 	bl	23100 <k_delayed_work_cancel>
	if (keys) {
   21cca:	b13d      	cbz	r5, 21cdc <bt_smp_disconnected+0x24>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   21ccc:	89eb      	ldrh	r3, [r5, #14]
   21cce:	b113      	cbz	r3, 21cd6 <bt_smp_disconnected+0x1e>
   21cd0:	7b6b      	ldrb	r3, [r5, #13]
   21cd2:	079b      	lsls	r3, r3, #30
   21cd4:	d502      	bpl.n	21cdc <bt_smp_disconnected+0x24>
			bt_keys_clear(keys);
   21cd6:	4628      	mov	r0, r5
   21cd8:	f000 fbe3 	bl	224a2 <bt_keys_clear>
	(void)memset(smp, 0, sizeof(*smp));
   21cdc:	4620      	mov	r0, r4
   21cde:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
}
   21ce2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	(void)memset(smp, 0, sizeof(*smp));
   21ce6:	2100      	movs	r1, #0
   21ce8:	f7fe b8ec 	b.w	1fec4 <memset>

00021cec <smp_create_pdu.isra.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   21cec:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   21cee:	f100 05c4 	add.w	r5, r0, #196	; 0xc4
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   21cf2:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   21cf4:	4628      	mov	r0, r5
   21cf6:	2104      	movs	r1, #4
   21cf8:	f7ff ffb9 	bl	21c6e <atomic_test_bit>
   21cfc:	b168      	cbz	r0, 21d1a <smp_create_pdu.isra.0+0x2e>
		timeout = K_NO_WAIT;
   21cfe:	2200      	movs	r2, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   21d00:	2100      	movs	r1, #0
		timeout = SMP_TIMEOUT;
   21d02:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   21d04:	4608      	mov	r0, r1
   21d06:	f7fe fe35 	bl	20974 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   21d0a:	4604      	mov	r4, r0
   21d0c:	b940      	cbnz	r0, 21d20 <smp_create_pdu.isra.0+0x34>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   21d0e:	2104      	movs	r1, #4
   21d10:	4628      	mov	r0, r5
   21d12:	f7ff ff9e 	bl	21c52 <atomic_set_bit>
}
   21d16:	4620      	mov	r0, r4
   21d18:	bd70      	pop	{r4, r5, r6, pc}
		timeout = SMP_TIMEOUT;
   21d1a:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   21d1e:	e7ef      	b.n	21d00 <smp_create_pdu.isra.0+0x14>
	hdr = net_buf_add(buf, sizeof(*hdr));
   21d20:	2101      	movs	r1, #1
   21d22:	3008      	adds	r0, #8
   21d24:	f000 fc34 	bl	22590 <net_buf_simple_add>
	hdr->code = op;
   21d28:	7006      	strb	r6, [r0, #0]
	return buf;
   21d2a:	e7f4      	b.n	21d16 <smp_create_pdu.isra.0+0x2a>

00021d2c <sys_mem_swap.constprop.0>:
static inline void sys_mem_swap(void *buf, size_t length)
   21d2c:	b510      	push	{r4, lr}
   21d2e:	1e43      	subs	r3, r0, #1
   21d30:	f100 0210 	add.w	r2, r0, #16
   21d34:	3007      	adds	r0, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   21d36:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   21d3a:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   21d3e:	701c      	strb	r4, [r3, #0]
	for (i = 0; i < (length/2); i++) {
   21d40:	4283      	cmp	r3, r0
		((uint8_t *)buf)[length - 1 - i] = tmp;
   21d42:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   21d44:	d1f7      	bne.n	21d36 <sys_mem_swap.constprop.0+0xa>
	}
}
   21d46:	bd10      	pop	{r4, pc}

00021d48 <smp_f6>:
{
   21d48:	b5f0      	push	{r4, r5, r6, r7, lr}
   21d4a:	b097      	sub	sp, #92	; 0x5c
   21d4c:	4605      	mov	r5, r0
   21d4e:	4616      	mov	r6, r2
	sys_memcpy_swap(m, n1, 16);
   21d50:	a805      	add	r0, sp, #20
   21d52:	2210      	movs	r2, #16
{
   21d54:	461c      	mov	r4, r3
   21d56:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
	sys_memcpy_swap(m, n1, 16);
   21d58:	f7ff ff6f 	bl	21c3a <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   21d5c:	2210      	movs	r2, #16
   21d5e:	4631      	mov	r1, r6
   21d60:	a809      	add	r0, sp, #36	; 0x24
   21d62:	f7ff ff6a 	bl	21c3a <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   21d66:	4621      	mov	r1, r4
   21d68:	2210      	movs	r2, #16
   21d6a:	a80d      	add	r0, sp, #52	; 0x34
   21d6c:	f7ff ff65 	bl	21c3a <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   21d70:	991c      	ldr	r1, [sp, #112]	; 0x70
   21d72:	2203      	movs	r2, #3
   21d74:	a811      	add	r0, sp, #68	; 0x44
   21d76:	f7ff ff60 	bl	21c3a <sys_memcpy_swap>
	m[51] = a1->type;
   21d7a:	9c1d      	ldr	r4, [sp, #116]	; 0x74
   21d7c:	f814 3b01 	ldrb.w	r3, [r4], #1
   21d80:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   21d84:	4621      	mov	r1, r4
   21d86:	2206      	movs	r2, #6
   21d88:	a812      	add	r0, sp, #72	; 0x48
   21d8a:	f7fe f870 	bl	1fe6e <memcpy>
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   21d8e:	4621      	mov	r1, r4
   21d90:	2206      	movs	r2, #6
   21d92:	a812      	add	r0, sp, #72	; 0x48
   21d94:	f7ff ff51 	bl	21c3a <sys_memcpy_swap>
	m[58] = a2->type;
   21d98:	9c1e      	ldr	r4, [sp, #120]	; 0x78
   21d9a:	f814 3b01 	ldrb.w	r3, [r4], #1
   21d9e:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   21da2:	4621      	mov	r1, r4
   21da4:	2206      	movs	r2, #6
   21da6:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   21daa:	f7fe f860 	bl	1fe6e <memcpy>
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   21dae:	4621      	mov	r1, r4
   21db0:	2206      	movs	r2, #6
   21db2:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   21db6:	f7ff ff40 	bl	21c3a <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   21dba:	2210      	movs	r2, #16
   21dbc:	4629      	mov	r1, r5
   21dbe:	a801      	add	r0, sp, #4
   21dc0:	f7ff ff3b 	bl	21c3a <sys_memcpy_swap>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
   21dc4:	463b      	mov	r3, r7
   21dc6:	2241      	movs	r2, #65	; 0x41
   21dc8:	a905      	add	r1, sp, #20
   21dca:	a801      	add	r0, sp, #4
   21dcc:	f7ff ff58 	bl	21c80 <bt_smp_aes_cmac>
	if (err) {
   21dd0:	4604      	mov	r4, r0
   21dd2:	b910      	cbnz	r0, 21dda <smp_f6+0x92>
	sys_mem_swap(check, 16);
   21dd4:	4638      	mov	r0, r7
   21dd6:	f7ff ffa9 	bl	21d2c <sys_mem_swap.constprop.0>
}
   21dda:	4620      	mov	r0, r4
   21ddc:	b017      	add	sp, #92	; 0x5c
   21dde:	bdf0      	pop	{r4, r5, r6, r7, pc}

00021de0 <smp_dhkey_check>:
{
   21de0:	b5f0      	push	{r4, r5, r6, r7, lr}
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
   21de2:	6803      	ldr	r3, [r0, #0]
   21de4:	78dd      	ldrb	r5, [r3, #3]
{
   21de6:	b091      	sub	sp, #68	; 0x44
   21de8:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   21dea:	2d00      	cmp	r5, #0
   21dec:	d15e      	bne.n	21eac <smp_dhkey_check+0xcc>
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   21dee:	688f      	ldr	r7, [r1, #8]
		(void)memset(r, 0, sizeof(r));
   21df0:	2210      	movs	r2, #16
   21df2:	4629      	mov	r1, r5
   21df4:	a80c      	add	r0, sp, #48	; 0x30
   21df6:	f7fe f865 	bl	1fec4 <memset>
		switch (smp->method) {
   21dfa:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
   21dfe:	2b05      	cmp	r3, #5
   21e00:	d81f      	bhi.n	21e42 <smp_dhkey_check+0x62>
   21e02:	e8df f003 	tbb	[pc, r3]
   21e06:	0309      	.short	0x0309
   21e08:	201e0903 	.word	0x201e0903
			memcpy(r, &smp->passkey, sizeof(smp->passkey));
   21e0c:	2204      	movs	r2, #4
   21e0e:	f504 71cc 	add.w	r1, r4, #408	; 0x198
				memcpy(r, smp->oobd_local->r, sizeof(r));
   21e12:	a80c      	add	r0, sp, #48	; 0x30
   21e14:	f7fe f82b 	bl	1fe6e <memcpy>
			   &smp->chan.chan.conn->le.resp_addr,
   21e18:	4622      	mov	r2, r4
		if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
   21e1a:	ae08      	add	r6, sp, #32
			   &smp->chan.chan.conn->le.resp_addr,
   21e1c:	f852 3be7 	ldr.w	r3, [r2], #231
		if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
   21e20:	9603      	str	r6, [sp, #12]
			   &smp->chan.chan.conn->le.init_addr, e)) {
   21e22:	f103 018f 	add.w	r1, r3, #143	; 0x8f
			   &smp->chan.chan.conn->le.resp_addr,
   21e26:	3396      	adds	r3, #150	; 0x96
		if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
   21e28:	9301      	str	r3, [sp, #4]
   21e2a:	f104 03d1 	add.w	r3, r4, #209	; 0xd1
   21e2e:	9102      	str	r1, [sp, #8]
   21e30:	9300      	str	r3, [sp, #0]
   21e32:	f104 01f7 	add.w	r1, r4, #247	; 0xf7
   21e36:	ab0c      	add	r3, sp, #48	; 0x30
   21e38:	f204 1087 	addw	r0, r4, #391	; 0x187
   21e3c:	f7ff ff84 	bl	21d48 <smp_f6>
   21e40:	b138      	cbz	r0, 21e52 <smp_dhkey_check+0x72>
		switch (smp->method) {
   21e42:	2508      	movs	r5, #8
   21e44:	e02d      	b.n	21ea2 <smp_dhkey_check+0xc2>
			if (smp->oobd_local) {
   21e46:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
   21e4a:	2900      	cmp	r1, #0
   21e4c:	d0e4      	beq.n	21e18 <smp_dhkey_check+0x38>
				memcpy(r, smp->oobd_local->r, sizeof(r));
   21e4e:	2210      	movs	r2, #16
   21e50:	e7df      	b.n	21e12 <smp_dhkey_check+0x32>
		if (memcmp(e, req->e, 16)) {
   21e52:	4630      	mov	r0, r6
   21e54:	2210      	movs	r2, #16
   21e56:	4639      	mov	r1, r7
   21e58:	f7fd fff9 	bl	1fe4e <memcmp>
   21e5c:	4606      	mov	r6, r0
   21e5e:	bb18      	cbnz	r0, 21ea8 <smp_dhkey_check+0xc8>
	return MIN(req->max_key_size, rsp->max_key_size);
   21e60:	f894 30d4 	ldrb.w	r3, [r4, #212]	; 0xd4
   21e64:	f894 70cd 	ldrb.w	r7, [r4, #205]	; 0xcd
		(void)memset(ediv, 0, sizeof(ediv));
   21e68:	4601      	mov	r1, r0
	return MIN(req->max_key_size, rsp->max_key_size);
   21e6a:	429f      	cmp	r7, r3
		(void)memset(ediv, 0, sizeof(ediv));
   21e6c:	f04f 0202 	mov.w	r2, #2
   21e70:	a805      	add	r0, sp, #20
	return MIN(req->max_key_size, rsp->max_key_size);
   21e72:	bf28      	it	cs
   21e74:	461f      	movcs	r7, r3
		(void)memset(ediv, 0, sizeof(ediv));
   21e76:	f7fe f825 	bl	1fec4 <memset>
		(void)memset(rand, 0, sizeof(rand));
   21e7a:	2208      	movs	r2, #8
   21e7c:	4631      	mov	r1, r6
   21e7e:	a806      	add	r0, sp, #24
   21e80:	f7fe f820 	bl	1fec4 <memset>
		if (bt_conn_le_start_encryption(smp->chan.chan.conn, rand, ediv,
   21e84:	6820      	ldr	r0, [r4, #0]
   21e86:	9700      	str	r7, [sp, #0]
   21e88:	f204 1307 	addw	r3, r4, #263	; 0x107
   21e8c:	aa05      	add	r2, sp, #20
   21e8e:	a906      	add	r1, sp, #24
   21e90:	f7fe fb21 	bl	204d6 <bt_conn_le_start_encryption>
   21e94:	2800      	cmp	r0, #0
   21e96:	dbd4      	blt.n	21e42 <smp_dhkey_check+0x62>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   21e98:	2101      	movs	r1, #1
   21e9a:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
   21e9e:	f7ff fed8 	bl	21c52 <atomic_set_bit>
}
   21ea2:	4628      	mov	r0, r5
   21ea4:	b011      	add	sp, #68	; 0x44
   21ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   21ea8:	250b      	movs	r5, #11
   21eaa:	e7fa      	b.n	21ea2 <smp_dhkey_check+0xc2>
	return 0;
   21eac:	2500      	movs	r5, #0
   21eae:	e7f8      	b.n	21ea2 <smp_dhkey_check+0xc2>

00021eb0 <smp_f4>:
{
   21eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
   21eb2:	b097      	sub	sp, #92	; 0x5c
   21eb4:	4614      	mov	r4, r2
   21eb6:	460e      	mov	r6, r1
	sys_memcpy_swap(m, u, 32);
   21eb8:	2220      	movs	r2, #32
   21eba:	4601      	mov	r1, r0
   21ebc:	a805      	add	r0, sp, #20
{
   21ebe:	461d      	mov	r5, r3
   21ec0:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   21ec2:	f7ff feba 	bl	21c3a <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   21ec6:	2220      	movs	r2, #32
   21ec8:	4631      	mov	r1, r6
   21eca:	a80d      	add	r0, sp, #52	; 0x34
   21ecc:	f7ff feb5 	bl	21c3a <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   21ed0:	4621      	mov	r1, r4
   21ed2:	2210      	movs	r2, #16
   21ed4:	a801      	add	r0, sp, #4
	m[64] = z;
   21ed6:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   21eda:	f7ff feae 	bl	21c3a <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
   21ede:	463b      	mov	r3, r7
   21ee0:	2241      	movs	r2, #65	; 0x41
   21ee2:	a905      	add	r1, sp, #20
   21ee4:	a801      	add	r0, sp, #4
   21ee6:	f7ff fecb 	bl	21c80 <bt_smp_aes_cmac>
	if (err) {
   21eea:	4604      	mov	r4, r0
   21eec:	b910      	cbnz	r0, 21ef4 <smp_f4+0x44>
	sys_mem_swap(res, 16);
   21eee:	4638      	mov	r0, r7
   21ef0:	f7ff ff1c 	bl	21d2c <sys_mem_swap.constprop.0>
}
   21ef4:	4620      	mov	r0, r4
   21ef6:	b017      	add	sp, #92	; 0x5c
   21ef8:	bdf0      	pop	{r4, r5, r6, r7, pc}

00021efa <smp_send_pairing_random>:
{
   21efa:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   21efc:	2104      	movs	r1, #4
{
   21efe:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   21f00:	f7ff fef4 	bl	21cec <smp_create_pdu.isra.0>
	if (!rsp_buf) {
   21f04:	4604      	mov	r4, r0
   21f06:	b178      	cbz	r0, 21f28 <smp_send_pairing_random+0x2e>
	req = net_buf_add(rsp_buf, sizeof(*req));
   21f08:	2110      	movs	r1, #16
   21f0a:	3008      	adds	r0, #8
   21f0c:	f000 fb40 	bl	22590 <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
   21f10:	2210      	movs	r2, #16
   21f12:	f105 01e7 	add.w	r1, r5, #231	; 0xe7
   21f16:	f7fd ffaa 	bl	1fe6e <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   21f1a:	4628      	mov	r0, r5
   21f1c:	2200      	movs	r2, #0
   21f1e:	4621      	mov	r1, r4
   21f20:	f7ec fd0c 	bl	e93c <smp_send.isra.0>
	return 0;
   21f24:	2000      	movs	r0, #0
}
   21f26:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   21f28:	2008      	movs	r0, #8
   21f2a:	e7fc      	b.n	21f26 <smp_send_pairing_random+0x2c>

00021f2c <smp_signing_info>:
   21f2c:	2007      	movs	r0, #7
   21f2e:	4770      	bx	lr

00021f30 <smp_pairing_confirm>:
{
   21f30:	b510      	push	{r4, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   21f32:	f100 03c4 	add.w	r3, r0, #196	; 0xc4
   21f36:	4604      	mov	r4, r0
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
   21f38:	6889      	ldr	r1, [r1, #8]
   21f3a:	f3bf 8f5b 	dmb	ish
   21f3e:	e853 2f00 	ldrex	r2, [r3]
   21f42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
   21f46:	e843 2000 	strex	r0, r2, [r3]
   21f4a:	2800      	cmp	r0, #0
   21f4c:	d1f7      	bne.n	21f3e <smp_pairing_confirm+0xe>
   21f4e:	f3bf 8f5b 	dmb	ish
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
   21f52:	2210      	movs	r2, #16
   21f54:	f104 00d7 	add.w	r0, r4, #215	; 0xd7
   21f58:	f7fd ff89 	bl	1fe6e <memcpy>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
   21f5c:	6823      	ldr	r3, [r4, #0]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   21f5e:	78db      	ldrb	r3, [r3, #3]
   21f60:	b94b      	cbnz	r3, 21f76 <smp_pairing_confirm+0x46>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   21f62:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   21f66:	2104      	movs	r1, #4
   21f68:	f7ff fe73 	bl	21c52 <atomic_set_bit>
		return smp_send_pairing_random(smp);
   21f6c:	4620      	mov	r0, r4
}
   21f6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return smp_send_pairing_random(smp);
   21f72:	f7ff bfc2 	b.w	21efa <smp_send_pairing_random>
}
   21f76:	2000      	movs	r0, #0
   21f78:	bd10      	pop	{r4, pc}

00021f7a <atomic_test_and_clear_bit>:
{
   21f7a:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   21f7c:	2301      	movs	r3, #1
   21f7e:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   21f82:	43ca      	mvns	r2, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   21f84:	f3bf 8f5b 	dmb	ish
   21f88:	e850 3f00 	ldrex	r3, [r0]
   21f8c:	ea03 0c02 	and.w	ip, r3, r2
   21f90:	e840 ce00 	strex	lr, ip, [r0]
   21f94:	f1be 0f00 	cmp.w	lr, #0
   21f98:	d1f6      	bne.n	21f88 <atomic_test_and_clear_bit+0xe>
   21f9a:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   21f9e:	420b      	tst	r3, r1
}
   21fa0:	bf14      	ite	ne
   21fa2:	2001      	movne	r0, #1
   21fa4:	2000      	moveq	r0, #0
   21fa6:	f85d fb04 	ldr.w	pc, [sp], #4

00021faa <smp_reset>:
{
   21faa:	b538      	push	{r3, r4, r5, lr}
   21fac:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   21fae:	6805      	ldr	r5, [r0, #0]
	k_delayed_work_cancel(&smp->work);
   21fb0:	f500 70d8 	add.w	r0, r0, #432	; 0x1b0
   21fb4:	f001 f8a4 	bl	23100 <k_delayed_work_cancel>
	smp->method = JUST_WORKS;
   21fb8:	2300      	movs	r3, #0
   21fba:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
	atomic_set(&smp->allowed_cmds, 0);
   21fbe:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   21fc2:	f3bf 8f5b 	dmb	ish
   21fc6:	e850 2f00 	ldrex	r2, [r0]
   21fca:	e840 3100 	strex	r1, r3, [r0]
   21fce:	2900      	cmp	r1, #0
   21fd0:	d1f9      	bne.n	21fc6 <smp_reset+0x1c>
   21fd2:	f3bf 8f5b 	dmb	ish
   21fd6:	f3bf 8f5b 	dmb	ish
   21fda:	34c4      	adds	r4, #196	; 0xc4
   21fdc:	e854 2f00 	ldrex	r2, [r4]
   21fe0:	e844 3100 	strex	r1, r3, [r4]
   21fe4:	2900      	cmp	r1, #0
   21fe6:	d1f9      	bne.n	21fdc <smp_reset+0x32>
   21fe8:	f3bf 8f5b 	dmb	ish
	if (conn->required_sec_level != conn->sec_level) {
   21fec:	7a6b      	ldrb	r3, [r5, #9]
   21fee:	7aaa      	ldrb	r2, [r5, #10]
   21ff0:	429a      	cmp	r2, r3
		conn->required_sec_level = conn->sec_level;
   21ff2:	bf18      	it	ne
   21ff4:	72ab      	strbne	r3, [r5, #10]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   21ff6:	78eb      	ldrb	r3, [r5, #3]
   21ff8:	b923      	cbnz	r3, 22004 <smp_reset+0x5a>
}
   21ffa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   21ffe:	210b      	movs	r1, #11
   22000:	f7ff be27 	b.w	21c52 <atomic_set_bit>
}
   22004:	bd38      	pop	{r3, r4, r5, pc}

00022006 <smp_error>:
{
   22006:	b573      	push	{r0, r1, r4, r5, r6, lr}
   22008:	4606      	mov	r6, r0
   2200a:	460c      	mov	r4, r1
	smp_pairing_complete(smp, reason);
   2200c:	f7ec ff86 	bl	ef1c <smp_pairing_complete>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   22010:	2105      	movs	r1, #5
   22012:	4630      	mov	r0, r6
   22014:	f7ff fe6a 	bl	21cec <smp_create_pdu.isra.0>
	if (!buf) {
   22018:	4605      	mov	r5, r0
   2201a:	b178      	cbz	r0, 2203c <smp_error+0x36>
	rsp = net_buf_add(buf, sizeof(*rsp));
   2201c:	2101      	movs	r1, #1
   2201e:	3008      	adds	r0, #8
   22020:	f000 fab6 	bl	22590 <net_buf_simple_add>
	rsp->reason = reason;
   22024:	7004      	strb	r4, [r0, #0]
	bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   22026:	2400      	movs	r4, #0
   22028:	6830      	ldr	r0, [r6, #0]
   2202a:	9400      	str	r4, [sp, #0]
   2202c:	4623      	mov	r3, r4
   2202e:	462a      	mov	r2, r5
   22030:	2106      	movs	r1, #6
   22032:	f7fe fca2 	bl	2097a <bt_l2cap_send_cb>
	return 0;
   22036:	4620      	mov	r0, r4
}
   22038:	b002      	add	sp, #8
   2203a:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   2203c:	f06f 0036 	mvn.w	r0, #54	; 0x36
   22040:	e7fa      	b.n	22038 <smp_error+0x32>

00022042 <smp_ident_sent>:
{
   22042:	b508      	push	{r3, lr}
	if (conn->type == BT_CONN_TYPE_LE) {
   22044:	7883      	ldrb	r3, [r0, #2]
   22046:	2b01      	cmp	r3, #1
   22048:	d10f      	bne.n	2206a <smp_ident_sent+0x28>
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
   2204a:	2106      	movs	r1, #6
   2204c:	f7fe fdf1 	bl	20c32 <bt_l2cap_le_lookup_tx_cid>
		smp->local_dist &= ~dist_complete;
   22050:	f890 21a8 	ldrb.w	r2, [r0, #424]	; 0x1a8
   22054:	f022 0201 	bic.w	r2, r2, #1
   22058:	f880 21a8 	strb.w	r2, [r0, #424]	; 0x1a8
		if (!smp->local_dist && !smp->remote_dist) {
   2205c:	f8b0 11a8 	ldrh.w	r1, [r0, #424]	; 0x1a8
   22060:	b919      	cbnz	r1, 2206a <smp_ident_sent+0x28>
}
   22062:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			smp_pairing_complete(smp, 0);
   22066:	f7ec bf59 	b.w	ef1c <smp_pairing_complete>
}
   2206a:	bd08      	pop	{r3, pc}

0002206c <bt_smp_encrypt_change>:
{
   2206c:	b570      	push	{r4, r5, r6, lr}
	struct bt_conn *conn = chan->conn;
   2206e:	4605      	mov	r5, r0
{
   22070:	4604      	mov	r4, r0
	struct bt_conn *conn = chan->conn;
   22072:	f855 6bc4 	ldr.w	r6, [r5], #196
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   22076:	f3bf 8f5b 	dmb	ish
   2207a:	e855 3f00 	ldrex	r3, [r5]
   2207e:	f023 0302 	bic.w	r3, r3, #2
   22082:	e845 3200 	strex	r2, r3, [r5]
   22086:	2a00      	cmp	r2, #0
   22088:	d1f7      	bne.n	2207a <bt_smp_encrypt_change+0xe>
   2208a:	f3bf 8f5b 	dmb	ish
	if (hci_status) {
   2208e:	2900      	cmp	r1, #0
   22090:	d14b      	bne.n	2212a <bt_smp_encrypt_change+0xbe>
	if (!conn->encrypt) {
   22092:	7af3      	ldrb	r3, [r6, #11]
   22094:	2b00      	cmp	r3, #0
   22096:	d048      	beq.n	2212a <bt_smp_encrypt_change+0xbe>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   22098:	2103      	movs	r1, #3
   2209a:	4628      	mov	r0, r5
   2209c:	f7ff fde7 	bl	21c6e <atomic_test_bit>
   220a0:	b920      	cbnz	r0, 220ac <bt_smp_encrypt_change+0x40>
		smp_reset(smp);
   220a2:	4620      	mov	r0, r4
}
   220a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		smp_reset(smp);
   220a8:	f7ff bf7f 	b.w	21faa <smp_reset>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   220ac:	2105      	movs	r1, #5
   220ae:	4628      	mov	r0, r5
   220b0:	f7ff fddd 	bl	21c6e <atomic_test_bit>
   220b4:	b198      	cbz	r0, 220de <bt_smp_encrypt_change+0x72>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
   220b6:	f894 31a8 	ldrb.w	r3, [r4, #424]	; 0x1a8
   220ba:	071b      	lsls	r3, r3, #28
   220bc:	d507      	bpl.n	220ce <bt_smp_encrypt_change+0x62>
   220be:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
   220c2:	0718      	lsls	r0, r3, #28
   220c4:	d503      	bpl.n	220ce <bt_smp_encrypt_change+0x62>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
   220c6:	2110      	movs	r1, #16
   220c8:	4628      	mov	r0, r5
   220ca:	f7ff fdc2 	bl	21c52 <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
   220ce:	f8b4 31a8 	ldrh.w	r3, [r4, #424]	; 0x1a8
   220d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   220d6:	f023 0308 	bic.w	r3, r3, #8
   220da:	f8a4 31a8 	strh.w	r3, [r4, #424]	; 0x1a8
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
   220de:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
   220e2:	07d9      	lsls	r1, r3, #31
   220e4:	d519      	bpl.n	2211a <bt_smp_encrypt_change+0xae>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
   220e6:	2106      	movs	r1, #6
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   220e8:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   220ec:	f7ff fdb1 	bl	21c52 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   220f0:	2102      	movs	r1, #2
   220f2:	4628      	mov	r0, r5
   220f4:	f7ff fdad 	bl	21c52 <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   220f8:	78f3      	ldrb	r3, [r6, #3]
   220fa:	b913      	cbnz	r3, 22102 <bt_smp_encrypt_change+0x96>
	    conn->role == BT_HCI_ROLE_MASTER && smp->remote_dist) {
   220fc:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
   22100:	b99b      	cbnz	r3, 2212a <bt_smp_encrypt_change+0xbe>
	if (bt_smp_distribute_keys(smp)) {
   22102:	4620      	mov	r0, r4
   22104:	f7ec fe64 	bl	edd0 <bt_smp_distribute_keys>
   22108:	b978      	cbnz	r0, 2212a <bt_smp_encrypt_change+0xbe>
	if (!smp->local_dist && !smp->remote_dist) {
   2210a:	f8b4 11a8 	ldrh.w	r1, [r4, #424]	; 0x1a8
   2210e:	b961      	cbnz	r1, 2212a <bt_smp_encrypt_change+0xbe>
		smp_pairing_complete(smp, 0);
   22110:	4620      	mov	r0, r4
}
   22112:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		smp_pairing_complete(smp, 0);
   22116:	f7ec bf01 	b.w	ef1c <smp_pairing_complete>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   2211a:	079a      	lsls	r2, r3, #30
   2211c:	d501      	bpl.n	22122 <bt_smp_encrypt_change+0xb6>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   2211e:	2108      	movs	r1, #8
   22120:	e7e2      	b.n	220e8 <bt_smp_encrypt_change+0x7c>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   22122:	075b      	lsls	r3, r3, #29
   22124:	d5e4      	bpl.n	220f0 <bt_smp_encrypt_change+0x84>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   22126:	210a      	movs	r1, #10
   22128:	e7de      	b.n	220e8 <bt_smp_encrypt_change+0x7c>
}
   2212a:	bd70      	pop	{r4, r5, r6, pc}

0002212c <smp_c1>:
{
   2212c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   22130:	b089      	sub	sp, #36	; 0x24
   22132:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   22136:	4699      	mov	r9, r3
	p1[0] = ia->type;
   22138:	783b      	ldrb	r3, [r7, #0]
{
   2213a:	9d12      	ldr	r5, [sp, #72]	; 0x48
	p1[0] = ia->type;
   2213c:	f88d 3000 	strb.w	r3, [sp]
{
   22140:	460c      	mov	r4, r1
	p1[1] = ra->type;
   22142:	f898 3000 	ldrb.w	r3, [r8]
   22146:	f88d 3001 	strb.w	r3, [sp, #1]
{
   2214a:	4611      	mov	r1, r2
   2214c:	4606      	mov	r6, r0
	memcpy(p1 + 2, preq, 7);
   2214e:	2207      	movs	r2, #7
   22150:	f10d 0002 	add.w	r0, sp, #2
   22154:	f7fd fe8b 	bl	1fe6e <memcpy>
	memcpy(p1 + 9, pres, 7);
   22158:	2207      	movs	r2, #7
   2215a:	4649      	mov	r1, r9
   2215c:	f10d 0009 	add.w	r0, sp, #9
   22160:	f7fd fe85 	bl	1fe6e <memcpy>
	while (len--) {
   22164:	f104 0010 	add.w	r0, r4, #16
   22168:	4629      	mov	r1, r5
   2216a:	466a      	mov	r2, sp
   2216c:	4284      	cmp	r4, r0
   2216e:	d127      	bne.n	221c0 <smp_c1+0x94>
	err = bt_encrypt_le(k, enc_data, enc_data);
   22170:	462a      	mov	r2, r5
   22172:	4629      	mov	r1, r5
   22174:	4630      	mov	r0, r6
   22176:	f7f1 f8a7 	bl	132c8 <bt_encrypt_le>
	if (err) {
   2217a:	4604      	mov	r4, r0
   2217c:	b9e0      	cbnz	r0, 221b8 <smp_c1+0x8c>
	memcpy(p2, ra->a.val, 6);
   2217e:	2206      	movs	r2, #6
   22180:	f108 0101 	add.w	r1, r8, #1
   22184:	a804      	add	r0, sp, #16
   22186:	f7fd fe72 	bl	1fe6e <memcpy>
	memcpy(p2 + 6, ia->a.val, 6);
   2218a:	2206      	movs	r2, #6
   2218c:	1c79      	adds	r1, r7, #1
   2218e:	f10d 0016 	add.w	r0, sp, #22
   22192:	f7fd fe6c 	bl	1fe6e <memcpy>
	(void)memset(p2 + 12, 0, 4);
   22196:	2204      	movs	r2, #4
   22198:	4621      	mov	r1, r4
   2219a:	a807      	add	r0, sp, #28
   2219c:	f7fd fe92 	bl	1fec4 <memset>
	while (len--) {
   221a0:	f105 0010 	add.w	r0, r5, #16
   221a4:	462a      	mov	r2, r5
   221a6:	ab04      	add	r3, sp, #16
   221a8:	4282      	cmp	r2, r0
   221aa:	d112      	bne.n	221d2 <smp_c1+0xa6>
	return bt_encrypt_le(k, enc_data, enc_data);
   221ac:	462a      	mov	r2, r5
   221ae:	4629      	mov	r1, r5
   221b0:	4630      	mov	r0, r6
   221b2:	f7f1 f889 	bl	132c8 <bt_encrypt_le>
   221b6:	4604      	mov	r4, r0
}
   221b8:	4620      	mov	r0, r4
   221ba:	b009      	add	sp, #36	; 0x24
   221bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		*r++ = *p++ ^ *q++;
   221c0:	f814 3b01 	ldrb.w	r3, [r4], #1
   221c4:	f812 cb01 	ldrb.w	ip, [r2], #1
   221c8:	ea83 030c 	eor.w	r3, r3, ip
   221cc:	f801 3b01 	strb.w	r3, [r1], #1
   221d0:	e7cc      	b.n	2216c <smp_c1+0x40>
   221d2:	f812 1b01 	ldrb.w	r1, [r2], #1
   221d6:	f813 4b01 	ldrb.w	r4, [r3], #1
   221da:	4061      	eors	r1, r4
   221dc:	f802 1c01 	strb.w	r1, [r2, #-1]
   221e0:	e7e2      	b.n	221a8 <smp_c1+0x7c>

000221e2 <legacy_send_pairing_confirm>:
{
   221e2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   221e4:	2103      	movs	r1, #3
	struct bt_conn *conn = smp->chan.chan.conn;
   221e6:	6805      	ldr	r5, [r0, #0]
{
   221e8:	4604      	mov	r4, r0
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   221ea:	f7ff fd7f 	bl	21cec <smp_create_pdu.isra.0>
	if (!buf) {
   221ee:	4606      	mov	r6, r0
   221f0:	b1c0      	cbz	r0, 22224 <legacy_send_pairing_confirm+0x42>
	req = net_buf_add(buf, sizeof(*req));
   221f2:	2110      	movs	r1, #16
   221f4:	3008      	adds	r0, #8
   221f6:	f000 f9cb 	bl	22590 <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
   221fa:	f105 0396 	add.w	r3, r5, #150	; 0x96
   221fe:	358f      	adds	r5, #143	; 0x8f
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
   22200:	9002      	str	r0, [sp, #8]
   22202:	9301      	str	r3, [sp, #4]
   22204:	9500      	str	r5, [sp, #0]
   22206:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
   2220a:	f104 02c9 	add.w	r2, r4, #201	; 0xc9
   2220e:	f104 01e7 	add.w	r1, r4, #231	; 0xe7
   22212:	f204 1007 	addw	r0, r4, #263	; 0x107
   22216:	f7ff ff89 	bl	2212c <smp_c1>
   2221a:	4605      	mov	r5, r0
   2221c:	b120      	cbz	r0, 22228 <legacy_send_pairing_confirm+0x46>
		net_buf_unref(buf);
   2221e:	4630      	mov	r0, r6
   22220:	f7f9 fc5a 	bl	1bad8 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   22224:	2008      	movs	r0, #8
   22226:	e012      	b.n	2224e <legacy_send_pairing_confirm+0x6c>
	smp_send(smp, buf, NULL, NULL);
   22228:	4602      	mov	r2, r0
   2222a:	4631      	mov	r1, r6
   2222c:	4620      	mov	r0, r4
   2222e:	34c4      	adds	r4, #196	; 0xc4
   22230:	f7ec fb84 	bl	e93c <smp_send.isra.0>
   22234:	f3bf 8f5b 	dmb	ish
   22238:	e854 3f00 	ldrex	r3, [r4]
   2223c:	f023 0301 	bic.w	r3, r3, #1
   22240:	e844 3200 	strex	r2, r3, [r4]
   22244:	2a00      	cmp	r2, #0
   22246:	d1f7      	bne.n	22238 <legacy_send_pairing_confirm+0x56>
   22248:	f3bf 8f5b 	dmb	ish
	return 0;
   2224c:	4628      	mov	r0, r5
}
   2224e:	b004      	add	sp, #16
   22250:	bd70      	pop	{r4, r5, r6, pc}

00022252 <bt_smp_request_ltk>:
{
   22252:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   22256:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   22258:	e9cd 2300 	strd	r2, r3, [sp]
   2225c:	4605      	mov	r5, r0
	smp = smp_chan_get(conn);
   2225e:	f7ec fb2b 	bl	e8b8 <smp_chan_get>
	if (!smp) {
   22262:	4604      	mov	r4, r0
   22264:	2800      	cmp	r0, #0
   22266:	f000 809c 	beq.w	223a2 <bt_smp_request_ltk+0x150>
	if (ediv == 0U && rand == 0U &&
   2226a:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
   2226e:	f1b9 0f00 	cmp.w	r9, #0
   22272:	d12d      	bne.n	222d0 <bt_smp_request_ltk+0x7e>
   22274:	e9dd 2300 	ldrd	r2, r3, [sp]
   22278:	4313      	orrs	r3, r2
   2227a:	d129      	bne.n	222d0 <bt_smp_request_ltk+0x7e>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   2227c:	f100 08c4 	add.w	r8, r0, #196	; 0xc4
   22280:	2103      	movs	r1, #3
   22282:	4640      	mov	r0, r8
   22284:	f7ff fcf3 	bl	21c6e <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   22288:	b310      	cbz	r0, 222d0 <bt_smp_request_ltk+0x7e>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   2228a:	2101      	movs	r1, #1
   2228c:	4640      	mov	r0, r8
   2228e:	f7ff fcee 	bl	21c6e <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   22292:	4606      	mov	r6, r0
   22294:	b1e0      	cbz	r0, 222d0 <bt_smp_request_ltk+0x7e>
	return MIN(req->max_key_size, rsp->max_key_size);
   22296:	f894 50d4 	ldrb.w	r5, [r4, #212]	; 0xd4
   2229a:	f894 30cd 	ldrb.w	r3, [r4, #205]	; 0xcd
   2229e:	429d      	cmp	r5, r3
   222a0:	bf28      	it	cs
   222a2:	461d      	movcs	r5, r3
		memcpy(ltk, smp->tk, enc_size);
   222a4:	462a      	mov	r2, r5
   222a6:	f204 1107 	addw	r1, r4, #263	; 0x107
   222aa:	4638      	mov	r0, r7
   222ac:	f7fd fddf 	bl	1fe6e <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   222b0:	2d0f      	cmp	r5, #15
   222b2:	d805      	bhi.n	222c0 <bt_smp_request_ltk+0x6e>
			(void)memset(ltk + enc_size, 0,
   222b4:	f1c5 0210 	rsb	r2, r5, #16
   222b8:	4649      	mov	r1, r9
   222ba:	1978      	adds	r0, r7, r5
   222bc:	f7fd fe02 	bl	1fec4 <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   222c0:	2101      	movs	r1, #1
   222c2:	4640      	mov	r0, r8
   222c4:	f7ff fcc5 	bl	21c52 <atomic_set_bit>
}
   222c8:	4630      	mov	r0, r6
   222ca:	b003      	add	sp, #12
   222cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!conn->le.keys) {
   222d0:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   222d4:	b983      	cbnz	r3, 222f8 <bt_smp_request_ltk+0xa6>
					     &conn->le.dst);
   222d6:	f105 0688 	add.w	r6, r5, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   222da:	7a29      	ldrb	r1, [r5, #8]
   222dc:	4632      	mov	r2, r6
   222de:	2020      	movs	r0, #32
   222e0:	f7ed fdde 	bl	fea0 <bt_keys_find>
   222e4:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
   222e8:	b930      	cbnz	r0, 222f8 <bt_smp_request_ltk+0xa6>
			conn->le.keys = bt_keys_find(BT_KEYS_SLAVE_LTK,
   222ea:	7a29      	ldrb	r1, [r5, #8]
   222ec:	4632      	mov	r2, r6
   222ee:	2001      	movs	r0, #1
   222f0:	f7ed fdd6 	bl	fea0 <bt_keys_find>
   222f4:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   222f8:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
   222fc:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
   22300:	b9ce      	cbnz	r6, 22336 <bt_smp_request_ltk+0xe4>
   22302:	e9dd 2300 	ldrd	r2, r3, [sp]
   22306:	4313      	orrs	r3, r2
   22308:	d115      	bne.n	22336 <bt_smp_request_ltk+0xe4>
   2230a:	2800      	cmp	r0, #0
   2230c:	d03c      	beq.n	22388 <bt_smp_request_ltk+0x136>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   2230e:	89c3      	ldrh	r3, [r0, #14]
   22310:	069a      	lsls	r2, r3, #26
   22312:	d511      	bpl.n	22338 <bt_smp_request_ltk+0xe6>
		enc_size = conn->le.keys->enc_size;
   22314:	7b04      	ldrb	r4, [r0, #12]
		memcpy(ltk, conn->le.keys->ltk.val, enc_size);
   22316:	f100 011a 	add.w	r1, r0, #26
   2231a:	4622      	mov	r2, r4
   2231c:	4638      	mov	r0, r7
   2231e:	f7fd fda6 	bl	1fe6e <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   22322:	2c0f      	cmp	r4, #15
   22324:	d805      	bhi.n	22332 <bt_smp_request_ltk+0xe0>
			(void)memset(ltk + enc_size, 0,
   22326:	f1c4 0210 	rsb	r2, r4, #16
   2232a:	4631      	mov	r1, r6
   2232c:	1938      	adds	r0, r7, r4
   2232e:	f7fd fdc9 	bl	1fec4 <memset>
		return true;
   22332:	2601      	movs	r6, #1
   22334:	e7c8      	b.n	222c8 <bt_smp_request_ltk+0x76>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
   22336:	b338      	cbz	r0, 22388 <bt_smp_request_ltk+0x136>
   22338:	89c3      	ldrh	r3, [r0, #14]
   2233a:	07db      	lsls	r3, r3, #31
   2233c:	d524      	bpl.n	22388 <bt_smp_request_ltk+0x136>
	    !memcmp(conn->le.keys->slave_ltk.rand, &rand, 8) &&
   2233e:	2208      	movs	r2, #8
   22340:	4669      	mov	r1, sp
   22342:	3040      	adds	r0, #64	; 0x40
   22344:	f7fd fd83 	bl	1fe4e <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
   22348:	b9f0      	cbnz	r0, 22388 <bt_smp_request_ltk+0x136>
	    !memcmp(conn->le.keys->slave_ltk.ediv, &ediv, 2)) {
   2234a:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
   2234e:	2202      	movs	r2, #2
   22350:	a90a      	add	r1, sp, #40	; 0x28
   22352:	3048      	adds	r0, #72	; 0x48
   22354:	f7fd fd7b 	bl	1fe4e <memcmp>
	    !memcmp(conn->le.keys->slave_ltk.rand, &rand, 8) &&
   22358:	4606      	mov	r6, r0
   2235a:	b9a8      	cbnz	r0, 22388 <bt_smp_request_ltk+0x136>
		enc_size = conn->le.keys->enc_size;
   2235c:	f8d5 10b4 	ldr.w	r1, [r5, #180]	; 0xb4
   22360:	7b0d      	ldrb	r5, [r1, #12]
		memcpy(ltk, conn->le.keys->slave_ltk.val, enc_size);
   22362:	4638      	mov	r0, r7
   22364:	462a      	mov	r2, r5
   22366:	314a      	adds	r1, #74	; 0x4a
   22368:	f7fd fd81 	bl	1fe6e <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   2236c:	2d0f      	cmp	r5, #15
   2236e:	d805      	bhi.n	2237c <bt_smp_request_ltk+0x12a>
			(void)memset(ltk + enc_size, 0,
   22370:	f1c5 0210 	rsb	r2, r5, #16
   22374:	4631      	mov	r1, r6
   22376:	1978      	adds	r0, r7, r5
   22378:	f7fd fda4 	bl	1fec4 <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   2237c:	2101      	movs	r1, #1
   2237e:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
   22382:	f7ff fc66 	bl	21c52 <atomic_set_bit>
		return true;
   22386:	e7d4      	b.n	22332 <bt_smp_request_ltk+0xe0>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   22388:	210e      	movs	r1, #14
   2238a:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
   2238e:	f7ff fc6e 	bl	21c6e <atomic_test_bit>
   22392:	b118      	cbz	r0, 2239c <bt_smp_request_ltk+0x14a>
		bt_conn_security_changed(smp->chan.chan.conn,
   22394:	6820      	ldr	r0, [r4, #0]
   22396:	2102      	movs	r1, #2
   22398:	f7e8 f9da 	bl	a750 <bt_conn_security_changed>
	smp_reset(smp);
   2239c:	4620      	mov	r0, r4
   2239e:	f7ff fe04 	bl	21faa <smp_reset>
	return false;
   223a2:	2600      	movs	r6, #0
   223a4:	e790      	b.n	222c8 <bt_smp_request_ltk+0x76>

000223a6 <bt_smp_sign>:
   223a6:	f06f 0022 	mvn.w	r0, #34	; 0x22
   223aa:	4770      	bx	lr

000223ac <bt_smp_start_security>:
{
   223ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
	switch (conn->role) {
   223ae:	78c3      	ldrb	r3, [r0, #3]
{
   223b0:	4604      	mov	r4, r0
	switch (conn->role) {
   223b2:	2b00      	cmp	r3, #0
   223b4:	d15b      	bne.n	2246e <bt_smp_start_security+0xc2>
		smp = smp_chan_get(conn);
   223b6:	f7ec fa7f 	bl	e8b8 <smp_chan_get>
		if (!smp) {
   223ba:	4605      	mov	r5, r0
   223bc:	2800      	cmp	r0, #0
   223be:	d059      	beq.n	22474 <bt_smp_start_security+0xc8>
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   223c0:	210b      	movs	r1, #11
   223c2:	1d20      	adds	r0, r4, #4
   223c4:	f7ff fc53 	bl	21c6e <atomic_test_bit>
   223c8:	bb00      	cbnz	r0, 2240c <bt_smp_start_security+0x60>
	if (!conn->le.keys) {
   223ca:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   223ce:	b983      	cbnz	r3, 223f2 <bt_smp_start_security+0x46>
						     conn->id, &conn->le.dst);
   223d0:	f104 0688 	add.w	r6, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
   223d4:	7a21      	ldrb	r1, [r4, #8]
   223d6:	4632      	mov	r2, r6
   223d8:	2020      	movs	r0, #32
   223da:	f7ed fd61 	bl	fea0 <bt_keys_find>
   223de:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   223e2:	b930      	cbnz	r0, 223f2 <bt_smp_start_security+0x46>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
   223e4:	7a21      	ldrb	r1, [r4, #8]
   223e6:	4632      	mov	r2, r6
   223e8:	2004      	movs	r0, #4
   223ea:	f7ed fd59 	bl	fea0 <bt_keys_find>
   223ee:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys ||
   223f2:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   223f6:	b14b      	cbz	r3, 2240c <bt_smp_start_security+0x60>
   223f8:	89da      	ldrh	r2, [r3, #14]
   223fa:	f002 0224 	and.w	r2, r2, #36	; 0x24
   223fe:	b12a      	cbz	r2, 2240c <bt_smp_start_security+0x60>
	if (conn->required_sec_level > BT_SECURITY_L2 &&
   22400:	7aa2      	ldrb	r2, [r4, #10]
   22402:	2a02      	cmp	r2, #2
   22404:	d908      	bls.n	22418 <bt_smp_start_security+0x6c>
   22406:	7b5b      	ldrb	r3, [r3, #13]
   22408:	07db      	lsls	r3, r3, #31
   2240a:	d405      	bmi.n	22418 <bt_smp_start_security+0x6c>
			return smp_send_pairing_req(conn);
   2240c:	4620      	mov	r0, r4
}
   2240e:	b002      	add	sp, #8
   22410:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			return smp_send_pairing_req(conn);
   22414:	f7ec bb84 	b.w	eb20 <smp_send_pairing_req>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   22418:	f105 06c4 	add.w	r6, r5, #196	; 0xc4
   2241c:	2103      	movs	r1, #3
   2241e:	4630      	mov	r0, r6
   22420:	f7ff fc25 	bl	21c6e <atomic_test_bit>
   22424:	b120      	cbz	r0, 22430 <bt_smp_start_security+0x84>
			return -EBUSY;
   22426:	f06f 040f 	mvn.w	r4, #15
}
   2242a:	4620      	mov	r0, r4
   2242c:	b002      	add	sp, #8
   2242e:	bd70      	pop	{r4, r5, r6, pc}
		if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   22430:	2101      	movs	r1, #1
   22432:	4630      	mov	r0, r6
   22434:	f7ff fc1b 	bl	21c6e <atomic_test_bit>
   22438:	2800      	cmp	r0, #0
   2243a:	d1f4      	bne.n	22426 <bt_smp_start_security+0x7a>
						  conn->le.keys->ltk.rand,
   2243c:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
		err = bt_conn_le_start_encryption(conn,
   22440:	7b0b      	ldrb	r3, [r1, #12]
   22442:	9300      	str	r3, [sp, #0]
   22444:	f101 0218 	add.w	r2, r1, #24
   22448:	f101 031a 	add.w	r3, r1, #26
   2244c:	4620      	mov	r0, r4
   2244e:	3110      	adds	r1, #16
   22450:	f7fe f841 	bl	204d6 <bt_conn_le_start_encryption>
		if (err) {
   22454:	4604      	mov	r4, r0
   22456:	2800      	cmp	r0, #0
   22458:	d1e7      	bne.n	2242a <bt_smp_start_security+0x7e>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   2245a:	f105 00c0 	add.w	r0, r5, #192	; 0xc0
   2245e:	210b      	movs	r1, #11
   22460:	f7ff fbf7 	bl	21c52 <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   22464:	2101      	movs	r1, #1
   22466:	4630      	mov	r0, r6
   22468:	f7ff fbf3 	bl	21c52 <atomic_set_bit>
		return 0;
   2246c:	e7dd      	b.n	2242a <bt_smp_start_security+0x7e>
		return -EINVAL;
   2246e:	f06f 0415 	mvn.w	r4, #21
   22472:	e7da      	b.n	2242a <bt_smp_start_security+0x7e>
			return -ENOTCONN;
   22474:	f06f 0438 	mvn.w	r4, #56	; 0x38
   22478:	e7d7      	b.n	2242a <bt_smp_start_security+0x7e>

0002247a <bt_keys_get_type>:
{
   2247a:	b570      	push	{r4, r5, r6, lr}
   2247c:	4604      	mov	r4, r0
   2247e:	460d      	mov	r5, r1
   22480:	4616      	mov	r6, r2
	keys = bt_keys_find(type, id, addr);
   22482:	f7ed fd0d 	bl	fea0 <bt_keys_find>
	if (keys) {
   22486:	b938      	cbnz	r0, 22498 <bt_keys_get_type+0x1e>
	keys = bt_keys_get_addr(id, addr);
   22488:	4631      	mov	r1, r6
   2248a:	4628      	mov	r0, r5
   2248c:	f7ed fcd2 	bl	fe34 <bt_keys_get_addr>
	if (!keys) {
   22490:	b110      	cbz	r0, 22498 <bt_keys_get_type+0x1e>

void bt_keys_add_type(struct bt_keys *keys, int type)
{
	keys->keys |= type;
   22492:	89c3      	ldrh	r3, [r0, #14]
   22494:	431c      	orrs	r4, r3
   22496:	81c4      	strh	r4, [r0, #14]
}
   22498:	bd70      	pop	{r4, r5, r6, pc}

0002249a <bt_keys_add_type>:
	keys->keys |= type;
   2249a:	89c3      	ldrh	r3, [r0, #14]
   2249c:	4319      	orrs	r1, r3
   2249e:	81c1      	strh	r1, [r0, #14]
}
   224a0:	4770      	bx	lr

000224a2 <bt_keys_clear>:

void bt_keys_clear(struct bt_keys *keys)
{
   224a2:	b510      	push	{r4, lr}
	BT_DBG("%s (keys 0x%04x)", bt_addr_le_str(&keys->addr), keys->keys);

	if (keys->state & BT_KEYS_ID_ADDED) {
   224a4:	7a03      	ldrb	r3, [r0, #8]
   224a6:	075b      	lsls	r3, r3, #29
{
   224a8:	4604      	mov	r4, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   224aa:	d501      	bpl.n	224b0 <bt_keys_clear+0xe>
		bt_id_del(keys);
   224ac:	f7e6 ffce 	bl	944c <bt_id_del>

		BT_DBG("Deleting key %s", log_strdup(key));
		settings_delete(key);
	}

	(void)memset(keys, 0, sizeof(*keys));
   224b0:	4620      	mov	r0, r4
   224b2:	225c      	movs	r2, #92	; 0x5c
}
   224b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)memset(keys, 0, sizeof(*keys));
   224b8:	2100      	movs	r1, #0
   224ba:	f7fd bd03 	b.w	1fec4 <memset>

000224be <fixed_data_unref>:
}
   224be:	4770      	bx	lr

000224c0 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   224c0:	6a01      	ldr	r1, [r0, #32]
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   224c2:	6849      	ldr	r1, [r1, #4]
   224c4:	6809      	ldr	r1, [r1, #0]
   224c6:	f7f9 ba7b 	b.w	1b9c0 <net_buf_alloc_len>

000224ca <net_buf_get>:
{
   224ca:	b570      	push	{r4, r5, r6, lr}
   224cc:	4606      	mov	r6, r0
	return z_impl_k_queue_get(queue, timeout);
   224ce:	f7fa fdcb 	bl	1d068 <z_impl_k_queue_get>
	if (!buf) {
   224d2:	4605      	mov	r5, r0
   224d4:	b128      	cbz	r0, 224e2 <net_buf_get+0x18>
   224d6:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   224d8:	7963      	ldrb	r3, [r4, #5]
   224da:	f013 0301 	ands.w	r3, r3, #1
   224de:	d102      	bne.n	224e6 <net_buf_get+0x1c>
	frag->frags = NULL;
   224e0:	6023      	str	r3, [r4, #0]
}
   224e2:	4628      	mov	r0, r5
   224e4:	bd70      	pop	{r4, r5, r6, pc}
   224e6:	2300      	movs	r3, #0
   224e8:	2200      	movs	r2, #0
   224ea:	4630      	mov	r0, r6
   224ec:	f7fa fdbc 	bl	1d068 <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   224f0:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   224f2:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   224f4:	f023 0301 	bic.w	r3, r3, #1
   224f8:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   224fa:	4604      	mov	r4, r0
   224fc:	e7ec      	b.n	224d8 <net_buf_get+0xe>

000224fe <net_buf_simple_init_with_data>:
	buf->size  = size;
   224fe:	b292      	uxth	r2, r2
	buf->__buf = data;
   22500:	6081      	str	r1, [r0, #8]
	buf->data  = data;
   22502:	6001      	str	r1, [r0, #0]
	buf->size  = size;
   22504:	80c2      	strh	r2, [r0, #6]
	buf->len   = size;
   22506:	8082      	strh	r2, [r0, #4]
}
   22508:	4770      	bx	lr

0002250a <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   2250a:	6883      	ldr	r3, [r0, #8]
   2250c:	440b      	add	r3, r1
   2250e:	6003      	str	r3, [r0, #0]
}
   22510:	4770      	bx	lr

00022512 <net_buf_put>:
{
   22512:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   22514:	460a      	mov	r2, r1
   22516:	6814      	ldr	r4, [r2, #0]
   22518:	b914      	cbnz	r4, 22520 <net_buf_put+0xe>
}
   2251a:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   2251c:	f000 bbfc 	b.w	22d18 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   22520:	7953      	ldrb	r3, [r2, #5]
   22522:	f043 0301 	orr.w	r3, r3, #1
   22526:	7153      	strb	r3, [r2, #5]
   22528:	4622      	mov	r2, r4
   2252a:	e7f4      	b.n	22516 <net_buf_put+0x4>

0002252c <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   2252c:	7902      	ldrb	r2, [r0, #4]
   2252e:	3201      	adds	r2, #1
   22530:	7102      	strb	r2, [r0, #4]
	return buf;
}
   22532:	4770      	bx	lr

00022534 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   22534:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   22536:	4618      	mov	r0, r3
   22538:	681b      	ldr	r3, [r3, #0]
   2253a:	2b00      	cmp	r3, #0
   2253c:	d1fb      	bne.n	22536 <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   2253e:	4770      	bx	lr

00022540 <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   22540:	6802      	ldr	r2, [r0, #0]
{
   22542:	b510      	push	{r4, lr}
	if (parent->frags) {
   22544:	b12a      	cbz	r2, 22552 <net_buf_frag_insert+0x12>
   22546:	460b      	mov	r3, r1
	while (buf->frags) {
   22548:	461c      	mov	r4, r3
   2254a:	681b      	ldr	r3, [r3, #0]
   2254c:	2b00      	cmp	r3, #0
   2254e:	d1fb      	bne.n	22548 <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   22550:	6022      	str	r2, [r4, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   22552:	6001      	str	r1, [r0, #0]
}
   22554:	bd10      	pop	{r4, pc}

00022556 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   22556:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
   22558:	4604      	mov	r4, r0
   2255a:	b920      	cbnz	r0, 22566 <net_buf_frag_add+0x10>
	buf->ref++;
   2255c:	790b      	ldrb	r3, [r1, #4]
   2255e:	3301      	adds	r3, #1
   22560:	710b      	strb	r3, [r1, #4]
		return net_buf_ref(frag);
   22562:	4608      	mov	r0, r1
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   22564:	bd10      	pop	{r4, pc}
   22566:	4603      	mov	r3, r0
	while (buf->frags) {
   22568:	4618      	mov	r0, r3
   2256a:	681b      	ldr	r3, [r3, #0]
   2256c:	2b00      	cmp	r3, #0
   2256e:	d1fb      	bne.n	22568 <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   22570:	f7ff ffe6 	bl	22540 <net_buf_frag_insert>
   22574:	4620      	mov	r0, r4
   22576:	e7f5      	b.n	22564 <net_buf_frag_add+0xe>

00022578 <net_buf_frag_del>:
				       struct net_buf *frag,
				       const char *func, int line)
#else
struct net_buf *net_buf_frag_del(struct net_buf *parent, struct net_buf *frag)
#endif
{
   22578:	b510      	push	{r4, lr}
	struct net_buf *next_frag;

	__ASSERT_NO_MSG(frag);

	if (parent) {
   2257a:	b108      	cbz	r0, 22580 <net_buf_frag_del+0x8>
   2257c:	680b      	ldr	r3, [r1, #0]
		__ASSERT_NO_MSG(parent->frags);
		__ASSERT_NO_MSG(parent->frags == frag);
		parent->frags = frag->frags;
   2257e:	6003      	str	r3, [r0, #0]
	}

	next_frag = frag->frags;
   22580:	680c      	ldr	r4, [r1, #0]

	frag->frags = NULL;
   22582:	2300      	movs	r3, #0

#if defined(CONFIG_NET_BUF_LOG)
	net_buf_unref_debug(frag, func, line);
#else
	net_buf_unref(frag);
   22584:	4608      	mov	r0, r1
	frag->frags = NULL;
   22586:	600b      	str	r3, [r1, #0]
	net_buf_unref(frag);
   22588:	f7f9 faa6 	bl	1bad8 <net_buf_unref>
#endif

	return next_frag;
}
   2258c:	4620      	mov	r0, r4
   2258e:	bd10      	pop	{r4, pc}

00022590 <net_buf_simple_add>:
	return buf->data + buf->len;
   22590:	8883      	ldrh	r3, [r0, #4]
   22592:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   22594:	4419      	add	r1, r3
   22596:	8081      	strh	r1, [r0, #4]
	return tail;
}
   22598:	18d0      	adds	r0, r2, r3
   2259a:	4770      	bx	lr

0002259c <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   2259c:	b430      	push	{r4, r5}
   2259e:	8884      	ldrh	r4, [r0, #4]
   225a0:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   225a2:	18a3      	adds	r3, r4, r2
   225a4:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   225a6:	1928      	adds	r0, r5, r4
}
   225a8:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   225aa:	f7fd bc60 	b.w	1fe6e <memcpy>

000225ae <net_buf_simple_add_u8>:
   225ae:	8883      	ldrh	r3, [r0, #4]
   225b0:	6802      	ldr	r2, [r0, #0]

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   225b2:	b510      	push	{r4, lr}
	buf->len += len;
   225b4:	1c5c      	adds	r4, r3, #1
   225b6:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   225b8:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   225ba:	18d0      	adds	r0, r2, r3
   225bc:	bd10      	pop	{r4, pc}

000225be <net_buf_simple_add_le16>:
   225be:	8883      	ldrh	r3, [r0, #4]
   225c0:	6802      	ldr	r2, [r0, #0]

void net_buf_simple_add_le16(struct net_buf_simple *buf, uint16_t val)
{
   225c2:	b530      	push	{r4, r5, lr}
   225c4:	18d4      	adds	r4, r2, r3
	buf->len += len;
   225c6:	1c9d      	adds	r5, r3, #2
   225c8:	8085      	strh	r5, [r0, #4]
	dst[0] = val;
   225ca:	54d1      	strb	r1, [r2, r3]
	dst[1] = val >> 8;
   225cc:	0a09      	lsrs	r1, r1, #8
   225ce:	7061      	strb	r1, [r4, #1]
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	sys_put_le16(val, net_buf_simple_add(buf, sizeof(val)));
}
   225d0:	bd30      	pop	{r4, r5, pc}

000225d2 <net_buf_simple_push>:

	sys_put_be64(val, net_buf_simple_add(buf, sizeof(val)));
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   225d2:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   225d4:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   225d6:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   225d8:	1a40      	subs	r0, r0, r1
	buf->len += len;
   225da:	4411      	add	r1, r2
	buf->data -= len;
   225dc:	6018      	str	r0, [r3, #0]
	buf->len += len;
   225de:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   225e0:	4770      	bx	lr

000225e2 <net_buf_simple_push_le16>:
	buf->data -= len;
   225e2:	6803      	ldr	r3, [r0, #0]
   225e4:	1e9a      	subs	r2, r3, #2
   225e6:	6002      	str	r2, [r0, #0]
	buf->len += len;
   225e8:	8882      	ldrh	r2, [r0, #4]
   225ea:	3202      	adds	r2, #2
   225ec:	8082      	strh	r2, [r0, #4]
	dst[0] = val;
   225ee:	f803 1c02 	strb.w	r1, [r3, #-2]
	dst[1] = val >> 8;
   225f2:	0a09      	lsrs	r1, r1, #8
   225f4:	f803 1c01 	strb.w	r1, [r3, #-1]
void net_buf_simple_push_le16(struct net_buf_simple *buf, uint16_t val)
{
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	sys_put_le16(val, net_buf_simple_push(buf, sizeof(val)));
}
   225f8:	4770      	bx	lr

000225fa <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   225fa:	8882      	ldrh	r2, [r0, #4]
   225fc:	1a52      	subs	r2, r2, r1
{
   225fe:	4603      	mov	r3, r0
	buf->len -= len;
   22600:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   22602:	6800      	ldr	r0, [r0, #0]
   22604:	4408      	add	r0, r1
   22606:	6018      	str	r0, [r3, #0]
}
   22608:	4770      	bx	lr

0002260a <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   2260a:	4603      	mov	r3, r0
	void *data = buf->data;
   2260c:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   2260e:	889a      	ldrh	r2, [r3, #4]
   22610:	1a52      	subs	r2, r2, r1
	buf->data += len;
   22612:	4401      	add	r1, r0
	buf->len -= len;
   22614:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   22616:	6019      	str	r1, [r3, #0]

	return data;
}
   22618:	4770      	bx	lr

0002261a <net_buf_simple_pull_u8>:

uint8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   2261a:	b510      	push	{r4, lr}
	uint8_t val;

	val = buf->data[0];
   2261c:	6803      	ldr	r3, [r0, #0]
   2261e:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   22620:	2101      	movs	r1, #1
   22622:	f7ff ffea 	bl	225fa <net_buf_simple_pull>

	return val;
}
   22626:	4620      	mov	r0, r4
   22628:	bd10      	pop	{r4, pc}

0002262a <net_buf_simple_pull_le16>:

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   2262a:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   2262c:	6803      	ldr	r3, [r0, #0]
   2262e:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   22630:	2102      	movs	r1, #2
   22632:	f7ff ffe2 	bl	225fa <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   22636:	4620      	mov	r0, r4
   22638:	bd10      	pop	{r4, pc}

0002263a <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   2263a:	6802      	ldr	r2, [r0, #0]
   2263c:	6880      	ldr	r0, [r0, #8]
}
   2263e:	1a10      	subs	r0, r2, r0
   22640:	4770      	bx	lr

00022642 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   22642:	8883      	ldrh	r3, [r0, #4]
   22644:	88c2      	ldrh	r2, [r0, #6]
   22646:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   22648:	6803      	ldr	r3, [r0, #0]
   2264a:	6880      	ldr	r0, [r0, #8]
   2264c:	1a18      	subs	r0, r3, r0
}
   2264e:	1a10      	subs	r0, r2, r0
   22650:	4770      	bx	lr

00022652 <net_buf_append_bytes>:
{
   22652:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22656:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   22658:	4681      	mov	r9, r0
   2265a:	460f      	mov	r7, r1
   2265c:	4690      	mov	r8, r2
	while (buf->frags) {
   2265e:	4606      	mov	r6, r0
   22660:	4631      	mov	r1, r6
   22662:	6836      	ldr	r6, [r6, #0]
   22664:	2e00      	cmp	r6, #0
   22666:	d1fb      	bne.n	22660 <net_buf_append_bytes+0xe>
		uint16_t count = MIN(len, net_buf_tailroom(frag));
   22668:	f101 0a08 	add.w	sl, r1, #8
   2266c:	4650      	mov	r0, sl
   2266e:	f7ff ffe8 	bl	22642 <net_buf_simple_tailroom>
   22672:	42b8      	cmp	r0, r7
   22674:	bf94      	ite	ls
   22676:	b284      	uxthls	r4, r0
   22678:	b2bc      	uxthhi	r4, r7
		net_buf_add_mem(frag, value8, count);
   2267a:	4641      	mov	r1, r8
   2267c:	4622      	mov	r2, r4
   2267e:	4650      	mov	r0, sl
   22680:	f7ff ff8c 	bl	2259c <net_buf_simple_add_mem>
		if (len == 0) {
   22684:	1b3f      	subs	r7, r7, r4
		added_len += count;
   22686:	4426      	add	r6, r4
		value8 += count;
   22688:	44a0      	add	r8, r4
		if (len == 0) {
   2268a:	d009      	beq.n	226a0 <net_buf_append_bytes+0x4e>
		frag = allocate_cb(timeout, user_data);
   2268c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   22690:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   22692:	47a8      	blx	r5
		if (!frag) {
   22694:	4601      	mov	r1, r0
   22696:	b118      	cbz	r0, 226a0 <net_buf_append_bytes+0x4e>
		net_buf_frag_add(buf, frag);
   22698:	4648      	mov	r0, r9
   2269a:	f7ff ff5c 	bl	22556 <net_buf_frag_add>
	do {
   2269e:	e7e3      	b.n	22668 <net_buf_append_bytes+0x16>
}
   226a0:	4630      	mov	r0, r6
   226a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000226a6 <gpio_fire_callbacks>:
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
					struct device *port,
					uint32_t pins)
{
   226a6:	b570      	push	{r4, r5, r6, lr}
   226a8:	460e      	mov	r6, r1
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   226aa:	6801      	ldr	r1, [r0, #0]
{
   226ac:	4615      	mov	r5, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   226ae:	b189      	cbz	r1, 226d4 <gpio_fire_callbacks+0x2e>
	return node->next;
   226b0:	680c      	ldr	r4, [r1, #0]
   226b2:	2c00      	cmp	r4, #0
   226b4:	bf38      	it	cc
   226b6:	2400      	movcc	r4, #0
		if (cb->pin_mask & pins) {
   226b8:	688a      	ldr	r2, [r1, #8]
   226ba:	402a      	ands	r2, r5
   226bc:	d002      	beq.n	226c4 <gpio_fire_callbacks+0x1e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   226be:	684b      	ldr	r3, [r1, #4]
   226c0:	4630      	mov	r0, r6
   226c2:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   226c4:	b134      	cbz	r4, 226d4 <gpio_fire_callbacks+0x2e>
   226c6:	6823      	ldr	r3, [r4, #0]
   226c8:	2b00      	cmp	r3, #0
   226ca:	bf38      	it	cc
   226cc:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   226ce:	4621      	mov	r1, r4
   226d0:	461c      	mov	r4, r3
   226d2:	e7f1      	b.n	226b8 <gpio_fire_callbacks+0x12>
		}
	}
}
   226d4:	bd70      	pop	{r4, r5, r6, pc}

000226d6 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   226d6:	6843      	ldr	r3, [r0, #4]
   226d8:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   226da:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   226de:	600b      	str	r3, [r1, #0]
}
   226e0:	2000      	movs	r0, #0
   226e2:	4770      	bx	lr

000226e4 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   226e4:	6843      	ldr	r3, [r0, #4]
   226e6:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   226e8:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   226ec:	4042      	eors	r2, r0
   226ee:	400a      	ands	r2, r1
   226f0:	4042      	eors	r2, r0
    p_reg->OUT = value;
   226f2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   226f6:	2000      	movs	r0, #0
   226f8:	4770      	bx	lr

000226fa <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   226fa:	6843      	ldr	r3, [r0, #4]
   226fc:	685b      	ldr	r3, [r3, #4]
}
   226fe:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   22700:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   22704:	4770      	bx	lr

00022706 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   22706:	6843      	ldr	r3, [r0, #4]
   22708:	685b      	ldr	r3, [r3, #4]
}
   2270a:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   2270c:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   22710:	4770      	bx	lr

00022712 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   22712:	6843      	ldr	r3, [r0, #4]
   22714:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   22716:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   2271a:	404b      	eors	r3, r1
    p_reg->OUT = value;
   2271c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   22720:	2000      	movs	r0, #0
   22722:	4770      	bx	lr

00022724 <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   22724:	68c3      	ldr	r3, [r0, #12]
Z_GENLIST_IS_EMPTY(slist)
   22726:	6858      	ldr	r0, [r3, #4]
{
   22728:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
   2272a:	b158      	cbz	r0, 22744 <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2272c:	2400      	movs	r4, #0
   2272e:	4281      	cmp	r1, r0
   22730:	d113      	bne.n	2275a <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
   22732:	6808      	ldr	r0, [r1, #0]
   22734:	b95c      	cbnz	r4, 2274e <gpio_nrfx_manage_callback+0x2a>
   22736:	689c      	ldr	r4, [r3, #8]
	list->head = node;
   22738:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   2273a:	42a1      	cmp	r1, r4
   2273c:	d100      	bne.n	22740 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   2273e:	6098      	str	r0, [r3, #8]
	parent->next = child;
   22740:	2000      	movs	r0, #0
   22742:	6008      	str	r0, [r1, #0]
	if (set) {
   22744:	b972      	cbnz	r2, 22764 <gpio_nrfx_manage_callback+0x40>
	return 0;
   22746:	2000      	movs	r0, #0
}
   22748:	bd30      	pop	{r4, r5, pc}
   2274a:	4628      	mov	r0, r5
   2274c:	e7ef      	b.n	2272e <gpio_nrfx_manage_callback+0xa>
   2274e:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   22750:	6898      	ldr	r0, [r3, #8]
   22752:	4281      	cmp	r1, r0
	list->tail = node;
   22754:	bf08      	it	eq
   22756:	609c      	streq	r4, [r3, #8]
}
   22758:	e7f2      	b.n	22740 <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2275a:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2275c:	4604      	mov	r4, r0
   2275e:	2d00      	cmp	r5, #0
   22760:	d1f3      	bne.n	2274a <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   22762:	b13a      	cbz	r2, 22774 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
   22764:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   22766:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   22768:	6898      	ldr	r0, [r3, #8]
	list->head = node;
   2276a:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   2276c:	2800      	cmp	r0, #0
   2276e:	d1ea      	bne.n	22746 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   22770:	6099      	str	r1, [r3, #8]
}
   22772:	e7e9      	b.n	22748 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   22774:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   22778:	e7e6      	b.n	22748 <gpio_nrfx_manage_callback+0x24>

0002277a <check_level_trigger_pins>:
{
   2277a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct gpio_nrfx_data *data = get_port_data(port);
   2277c:	68c3      	ldr	r3, [r0, #12]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   2277e:	6847      	ldr	r7, [r0, #4]
	uint32_t out = data->pin_int_en;
   22780:	68da      	ldr	r2, [r3, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   22782:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
   22786:	4301      	orrs	r1, r0
   22788:	ea22 0201 	bic.w	r2, r2, r1
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
   2278c:	6879      	ldr	r1, [r7, #4]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   2278e:	691b      	ldr	r3, [r3, #16]
    return p_reg->IN;
   22790:	f8d1 4510 	ldr.w	r4, [r1, #1296]	; 0x510
   22794:	405c      	eors	r4, r3
	uint32_t out = pin_states & level_pins;
   22796:	ea22 0404 	bic.w	r4, r2, r4
	uint32_t bit = 1U << pin;
   2279a:	2501      	movs	r5, #1
	uint32_t pin = 0U;
   2279c:	2600      	movs	r6, #0
	while (level_pins) {
   2279e:	b90a      	cbnz	r2, 227a4 <check_level_trigger_pins+0x2a>
}
   227a0:	4620      	mov	r0, r4
   227a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (level_pins & bit) {
   227a4:	422a      	tst	r2, r5
   227a6:	d009      	beq.n	227bc <check_level_trigger_pins+0x42>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   227a8:	7a3b      	ldrb	r3, [r7, #8]
   227aa:	f006 001f 	and.w	r0, r6, #31
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   227ae:	2100      	movs	r1, #0
   227b0:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   227b4:	f7f9 fa40 	bl	1bc38 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   227b8:	ea22 0205 	bic.w	r2, r2, r5
		++pin;
   227bc:	3601      	adds	r6, #1
		bit <<= 1;
   227be:	006d      	lsls	r5, r5, #1
   227c0:	e7ed      	b.n	2279e <check_level_trigger_pins+0x24>

000227c2 <cfg_level_pins>:
{
   227c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const struct gpio_nrfx_data *data = get_port_data(port);
   227c4:	68c6      	ldr	r6, [r0, #12]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   227c6:	6847      	ldr	r7, [r0, #4]
	uint32_t out = data->pin_int_en;
   227c8:	68f2      	ldr	r2, [r6, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   227ca:	e9d6 3105 	ldrd	r3, r1, [r6, #20]
   227ce:	430b      	orrs	r3, r1
   227d0:	ea22 0203 	bic.w	r2, r2, r3
	uint32_t bit = 1U << pin;
   227d4:	2501      	movs	r5, #1
	uint32_t pin = 0U;
   227d6:	2400      	movs	r4, #0
	while (level_pins) {
   227d8:	b902      	cbnz	r2, 227dc <cfg_level_pins+0x1a>
}
   227da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (level_pins & bit) {
   227dc:	4215      	tst	r5, r2
   227de:	d00f      	beq.n	22800 <cfg_level_pins+0x3e>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   227e0:	6931      	ldr	r1, [r6, #16]
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   227e2:	7a3b      	ldrb	r3, [r7, #8]
	if ((BIT(pin) & data->int_active_level) != 0U) {
   227e4:	40e1      	lsrs	r1, r4
   227e6:	f001 0101 	and.w	r1, r1, #1
   227ea:	f1c1 0103 	rsb	r1, r1, #3
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   227ee:	f004 001f 	and.w	r0, r4, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   227f2:	b2c9      	uxtb	r1, r1
   227f4:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   227f8:	f7f9 fa1e 	bl	1bc38 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   227fc:	ea22 0205 	bic.w	r2, r2, r5
		++pin;
   22800:	3401      	adds	r4, #1
		bit <<= 1;
   22802:	006d      	lsls	r5, r5, #1
   22804:	e7e8      	b.n	227d8 <cfg_level_pins+0x16>

00022806 <uart_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
   22806:	68c2      	ldr	r2, [r0, #12]
{
   22808:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   2280a:	e892 0003 	ldmia.w	r2, {r0, r1}
   2280e:	e883 0003 	stmia.w	r3, {r0, r1}
}
   22812:	2000      	movs	r0, #0
   22814:	4770      	bx	lr

00022816 <uart_nrfx_irq_tx_ready_complete>:
{
   22816:	b508      	push	{r3, lr}
	return event_txdrdy_check();
   22818:	f7f9 fb76 	bl	1bf08 <event_txdrdy_check>
}
   2281c:	bd08      	pop	{r3, pc}

0002281e <uart_nrfx_irq_update>:
}
   2281e:	2001      	movs	r0, #1
   22820:	4770      	bx	lr

00022822 <nrf_uarte_event_clear>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22822:	2300      	movs	r3, #0
   22824:	5043      	str	r3, [r0, r1]
{
   22826:	b082      	sub	sp, #8
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   22828:	5843      	ldr	r3, [r0, r1]
   2282a:	9301      	str	r3, [sp, #4]
    (void)dummy;
   2282c:	9b01      	ldr	r3, [sp, #4]
}
   2282e:	b002      	add	sp, #8
   22830:	4770      	bx	lr

00022832 <uarte_nrfx_isr_int>:
	struct uarte_nrfx_data *data = get_dev_data(dev);
   22832:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   22834:	6843      	ldr	r3, [r0, #4]
   22836:	6818      	ldr	r0, [r3, #0]
	if (data->int_driven->disable_tx_irq &&
   22838:	6893      	ldr	r3, [r2, #8]
   2283a:	7b99      	ldrb	r1, [r3, #14]
{
   2283c:	b510      	push	{r4, lr}
	if (data->int_driven->disable_tx_irq &&
   2283e:	b159      	cbz	r1, 22858 <uarte_nrfx_isr_int+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22840:	f8d0 1120 	ldr.w	r1, [r0, #288]	; 0x120
   22844:	b141      	cbz	r1, 22858 <uarte_nrfx_isr_int+0x26>
    p_reg->INTENCLR = mask;
   22846:	f44f 7280 	mov.w	r2, #256	; 0x100
   2284a:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2284e:	2201      	movs	r2, #1
   22850:	60c2      	str	r2, [r0, #12]
		data->int_driven->disable_tx_irq = false;
   22852:	2200      	movs	r2, #0
   22854:	739a      	strb	r2, [r3, #14]
}
   22856:	bd10      	pop	{r4, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22858:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   2285c:	b11b      	cbz	r3, 22866 <uarte_nrfx_isr_int+0x34>
		nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ERROR);
   2285e:	f44f 7192 	mov.w	r1, #292	; 0x124
   22862:	f7ff ffde 	bl	22822 <nrf_uarte_event_clear>
	if (data->int_driven->cb) {
   22866:	6892      	ldr	r2, [r2, #8]
   22868:	6813      	ldr	r3, [r2, #0]
   2286a:	2b00      	cmp	r3, #0
   2286c:	d0f3      	beq.n	22856 <uarte_nrfx_isr_int+0x24>
}
   2286e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		data->int_driven->cb(data->int_driven->cb_data);
   22872:	6850      	ldr	r0, [r2, #4]
   22874:	4718      	bx	r3

00022876 <uarte_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
   22876:	68c2      	ldr	r2, [r0, #12]
{
   22878:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   2287a:	e892 0003 	ldmia.w	r2, {r0, r1}
   2287e:	e883 0003 	stmia.w	r3, {r0, r1}
}
   22882:	2000      	movs	r0, #0
   22884:	4770      	bx	lr

00022886 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   22886:	6843      	ldr	r3, [r0, #4]
   22888:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   2288a:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   2288e:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   22892:	4770      	bx	lr

00022894 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   22894:	6842      	ldr	r2, [r0, #4]
{
   22896:	b508      	push	{r3, lr}
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   22898:	68c3      	ldr	r3, [r0, #12]
	return config->uarte_regs;
   2289a:	6810      	ldr	r0, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2289c:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   228a0:	b14a      	cbz	r2, 228b6 <uarte_nrfx_poll_in+0x22>
	*c = data->rx_data;
   228a2:	7c1b      	ldrb	r3, [r3, #16]
   228a4:	700b      	strb	r3, [r1, #0]
	nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);
   228a6:	f44f 7188 	mov.w	r1, #272	; 0x110
   228aa:	f7ff ffba 	bl	22822 <nrf_uarte_event_clear>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   228ae:	2301      	movs	r3, #1
   228b0:	6003      	str	r3, [r0, #0]
	return 0;
   228b2:	2000      	movs	r0, #0
}
   228b4:	bd08      	pop	{r3, pc}
		return -1;
   228b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   228ba:	e7fb      	b.n	228b4 <uarte_nrfx_poll_in+0x20>

000228bc <uarte_nrfx_fifo_fill>:
{
   228bc:	b570      	push	{r4, r5, r6, lr}
   228be:	460c      	mov	r4, r1
   228c0:	4611      	mov	r1, r2
	return config->uarte_regs;
   228c2:	6842      	ldr	r2, [r0, #4]
{
   228c4:	4603      	mov	r3, r0
	return config->uarte_regs;
   228c6:	6810      	ldr	r0, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   228c8:	f8d0 2120 	ldr.w	r2, [r0, #288]	; 0x120
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   228cc:	b1a2      	cbz	r2, 228f8 <uarte_nrfx_fifo_fill+0x3c>
	struct uarte_nrfx_data *data = get_dev_data(dev);
   228ce:	68dd      	ldr	r5, [r3, #12]
	if (len > data->int_driven->tx_buff_size) {
   228d0:	68ab      	ldr	r3, [r5, #8]
   228d2:	899a      	ldrh	r2, [r3, #12]
   228d4:	428a      	cmp	r2, r1
   228d6:	bfa8      	it	ge
   228d8:	460a      	movge	r2, r1
	nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDTX);
   228da:	f44f 7190 	mov.w	r1, #288	; 0x120
   228de:	f7ff ffa0 	bl	22822 <nrf_uarte_event_clear>
	for (int i = 0; i < len; i++) {
   228e2:	2300      	movs	r3, #0
   228e4:	68a9      	ldr	r1, [r5, #8]
   228e6:	4293      	cmp	r3, r2
   228e8:	6889      	ldr	r1, [r1, #8]
   228ea:	db07      	blt.n	228fc <uarte_nrfx_fifo_fill+0x40>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   228ec:	2301      	movs	r3, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   228ee:	f8c0 1544 	str.w	r1, [r0, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   228f2:	f8c0 2548 	str.w	r2, [r0, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   228f6:	6083      	str	r3, [r0, #8]
}
   228f8:	4610      	mov	r0, r2
   228fa:	bd70      	pop	{r4, r5, r6, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
   228fc:	5ce6      	ldrb	r6, [r4, r3]
   228fe:	54ce      	strb	r6, [r1, r3]
	for (int i = 0; i < len; i++) {
   22900:	3301      	adds	r3, #1
   22902:	e7ef      	b.n	228e4 <uarte_nrfx_fifo_fill+0x28>

00022904 <uarte_nrfx_fifo_read>:
	return config->uarte_regs;
   22904:	6843      	ldr	r3, [r0, #4]
{
   22906:	4602      	mov	r2, r0
	return config->uarte_regs;
   22908:	6818      	ldr	r0, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2290a:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
{
   2290e:	b510      	push	{r4, lr}
   22910:	460c      	mov	r4, r1
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   22912:	b143      	cbz	r3, 22926 <uarte_nrfx_fifo_read+0x22>
		nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);
   22914:	f44f 7188 	mov.w	r1, #272	; 0x110
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   22918:	68d2      	ldr	r2, [r2, #12]
		nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);
   2291a:	f7ff ff82 	bl	22822 <nrf_uarte_event_clear>
		rx_data[num_rx++] = (uint8_t)data->rx_data;
   2291e:	7c13      	ldrb	r3, [r2, #16]
   22920:	7023      	strb	r3, [r4, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22922:	2301      	movs	r3, #1
   22924:	6003      	str	r3, [r0, #0]
	int num_rx = 0;
   22926:	4618      	mov	r0, r3
}
   22928:	bd10      	pop	{r4, pc}

0002292a <uarte_nrfx_irq_tx_enable>:
	data->int_driven->disable_tx_irq = false;
   2292a:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   2292c:	6843      	ldr	r3, [r0, #4]
	data->int_driven->disable_tx_irq = false;
   2292e:	6892      	ldr	r2, [r2, #8]
	return config->uarte_regs;
   22930:	681b      	ldr	r3, [r3, #0]
	data->int_driven->disable_tx_irq = false;
   22932:	2100      	movs	r1, #0
   22934:	7391      	strb	r1, [r2, #14]
    p_reg->INTENSET = mask;
   22936:	f44f 7280 	mov.w	r2, #256	; 0x100
   2293a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2293e:	4770      	bx	lr

00022940 <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   22940:	68c3      	ldr	r3, [r0, #12]
   22942:	689b      	ldr	r3, [r3, #8]
   22944:	2201      	movs	r2, #1
   22946:	739a      	strb	r2, [r3, #14]
}
   22948:	4770      	bx	lr

0002294a <uarte_nrfx_irq_tx_ready_complete>:
	return !data->int_driven->disable_tx_irq &&
   2294a:	68c3      	ldr	r3, [r0, #12]
   2294c:	689b      	ldr	r3, [r3, #8]
   2294e:	7b9b      	ldrb	r3, [r3, #14]
	       nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX) &&
   22950:	b94b      	cbnz	r3, 22966 <uarte_nrfx_irq_tx_ready_complete+0x1c>
	return config->uarte_regs;
   22952:	6843      	ldr	r3, [r0, #4]
   22954:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22956:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	return !data->int_driven->disable_tx_irq &&
   2295a:	b128      	cbz	r0, 22968 <uarte_nrfx_irq_tx_ready_complete+0x1e>
    return p_reg->INTENSET & mask;
   2295c:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
	       nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX) &&
   22960:	f3c0 2000 	ubfx	r0, r0, #8, #1
   22964:	4770      	bx	lr
   22966:	2000      	movs	r0, #0
}
   22968:	4770      	bx	lr

0002296a <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
   2296a:	6843      	ldr	r3, [r0, #4]
   2296c:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2296e:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   22972:	3800      	subs	r0, #0
   22974:	bf18      	it	ne
   22976:	2001      	movne	r0, #1
   22978:	4770      	bx	lr

0002297a <uarte_nrfx_irq_rx_enable>:
	return config->uarte_regs;
   2297a:	6843      	ldr	r3, [r0, #4]
   2297c:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   2297e:	2210      	movs	r2, #16
   22980:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   22984:	4770      	bx	lr

00022986 <uarte_nrfx_irq_rx_disable>:
	return config->uarte_regs;
   22986:	6843      	ldr	r3, [r0, #4]
   22988:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   2298a:	2210      	movs	r2, #16
   2298c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   22990:	4770      	bx	lr

00022992 <uarte_nrfx_irq_err_enable>:
	return config->uarte_regs;
   22992:	6843      	ldr	r3, [r0, #4]
   22994:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   22996:	f44f 7200 	mov.w	r2, #512	; 0x200
   2299a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2299e:	4770      	bx	lr

000229a0 <uarte_nrfx_irq_err_disable>:
	return config->uarte_regs;
   229a0:	6843      	ldr	r3, [r0, #4]
   229a2:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   229a4:	f44f 7200 	mov.w	r2, #512	; 0x200
   229a8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   229ac:	4770      	bx	lr

000229ae <uarte_nrfx_irq_update>:
}
   229ae:	2001      	movs	r0, #1
   229b0:	4770      	bx	lr

000229b2 <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
   229b2:	68c3      	ldr	r3, [r0, #12]
   229b4:	689b      	ldr	r3, [r3, #8]
	data->int_driven->cb_data = cb_data;
   229b6:	e9c3 1200 	strd	r1, r2, [r3]
}
   229ba:	4770      	bx	lr

000229bc <uarte_nrfx_irq_is_pending>:
{
   229bc:	b508      	push	{r3, lr}
	return config->uarte_regs;
   229be:	6843      	ldr	r3, [r0, #4]
   229c0:	6819      	ldr	r1, [r3, #0]
    return p_reg->INTENSET & mask;
   229c2:	f8d1 3304 	ldr.w	r3, [r1, #772]	; 0x304
		||
   229c6:	05db      	lsls	r3, r3, #23
{
   229c8:	4602      	mov	r2, r0
		||
   229ca:	d405      	bmi.n	229d8 <uarte_nrfx_irq_is_pending+0x1c>
   229cc:	f8d1 0304 	ldr.w	r0, [r1, #772]	; 0x304
   229d0:	f010 0010 	ands.w	r0, r0, #16
   229d4:	d106      	bne.n	229e4 <uarte_nrfx_irq_is_pending+0x28>
}
   229d6:	bd08      	pop	{r3, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   229d8:	f7ff ffb7 	bl	2294a <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_ENDTX_MASK) &&
   229dc:	2800      	cmp	r0, #0
   229de:	d0f5      	beq.n	229cc <uarte_nrfx_irq_is_pending+0x10>
		||
   229e0:	2001      	movs	r0, #1
   229e2:	e7f8      	b.n	229d6 <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
   229e4:	4610      	mov	r0, r2
   229e6:	f7ff ffc0 	bl	2296a <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   229ea:	3800      	subs	r0, #0
   229ec:	bf18      	it	ne
   229ee:	2001      	movne	r0, #1
   229f0:	e7f1      	b.n	229d6 <uarte_nrfx_irq_is_pending+0x1a>

000229f2 <uarte_nrfx_poll_out>:
{
   229f2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return config->uarte_regs;
   229f6:	6843      	ldr	r3, [r0, #4]
{
   229f8:	f88d 1007 	strb.w	r1, [sp, #7]
	return config->uarte_regs;
   229fc:	681c      	ldr	r4, [r3, #0]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   229fe:	68c6      	ldr	r6, [r0, #12]
	if (!k_is_in_isr()) {
   22a00:	f000 fb03 	bl	2300a <k_is_in_isr>
   22a04:	bbb8      	cbnz	r0, 22a76 <uarte_nrfx_poll_out+0x84>
   22a06:	2564      	movs	r5, #100	; 0x64
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   22a08:	f106 070c 	add.w	r7, r6, #12
   22a0c:	f04f 0801 	mov.w	r8, #1
   22a10:	f3bf 8f5b 	dmb	ish
   22a14:	e857 3f00 	ldrex	r3, [r7]
   22a18:	2b00      	cmp	r3, #0
   22a1a:	d103      	bne.n	22a24 <uarte_nrfx_poll_out+0x32>
   22a1c:	e847 8200 	strex	r2, r8, [r7]
   22a20:	2a00      	cmp	r2, #0
   22a22:	d1f7      	bne.n	22a14 <uarte_nrfx_poll_out+0x22>
   22a24:	f3bf 8f5b 	dmb	ish
		while (atomic_cas((atomic_t *) lock,
   22a28:	d007      	beq.n	22a3a <uarte_nrfx_poll_out+0x48>
	return z_impl_k_sleep(timeout);
   22a2a:	2021      	movs	r0, #33	; 0x21
   22a2c:	2100      	movs	r1, #0
   22a2e:	3d01      	subs	r5, #1
   22a30:	f7fa fe78 	bl	1d724 <z_impl_k_sleep>
			if (--safety_cnt == 0) {
   22a34:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   22a38:	d1ea      	bne.n	22a10 <uarte_nrfx_poll_out+0x1e>
	nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDTX);
   22a3a:	f44f 7190 	mov.w	r1, #288	; 0x120
   22a3e:	4620      	mov	r0, r4
   22a40:	f7ff feef 	bl	22822 <nrf_uarte_event_clear>
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   22a44:	f10d 0307 	add.w	r3, sp, #7
   22a48:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   22a4c:	2301      	movs	r3, #1
   22a4e:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22a52:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   22a56:	60a3      	str	r3, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22a58:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
	NRFX_WAIT_FOR(nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX),
   22a5c:	b923      	cbnz	r3, 22a68 <uarte_nrfx_poll_out+0x76>
   22a5e:	2001      	movs	r0, #1
   22a60:	f000 f80c 	bl	22a7c <nrfx_busy_wait>
   22a64:	3d01      	subs	r5, #1
   22a66:	d1f7      	bne.n	22a58 <uarte_nrfx_poll_out+0x66>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22a68:	2301      	movs	r3, #1
   22a6a:	60e3      	str	r3, [r4, #12]
	*lock = 0;
   22a6c:	2300      	movs	r3, #0
   22a6e:	60f3      	str	r3, [r6, #12]
}
   22a70:	b002      	add	sp, #8
   22a72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*lock = 1;
   22a76:	2301      	movs	r3, #1
   22a78:	60f3      	str	r3, [r6, #12]
   22a7a:	e7de      	b.n	22a3a <uarte_nrfx_poll_out+0x48>

00022a7c <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   22a7c:	f000 bacb 	b.w	23016 <z_impl_k_busy_wait>

00022a80 <device_busy_set>:
	atomic_set_bit((atomic_t *) __device_busy_start,
		       (busy_dev - __device_start));
#else
	ARG_UNUSED(busy_dev);
#endif
}
   22a80:	4770      	bx	lr

00022a82 <device_busy_clear>:
   22a82:	4770      	bx	lr

00022a84 <arch_system_halt>:
	__asm__ volatile(
   22a84:	f04f 0220 	mov.w	r2, #32
   22a88:	f3ef 8311 	mrs	r3, BASEPRI
   22a8c:	f382 8811 	msr	BASEPRI, r2
   22a90:	f3bf 8f6f 	isb	sy
	for (;;) {
   22a94:	e7fe      	b.n	22a94 <arch_system_halt+0x10>

00022a96 <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   22a96:	f7fc b8cc 	b.w	1ec32 <z_clock_idle_exit>

00022a9a <k_heap_init>:
{
   22a9a:	b410      	push	{r4}
   22a9c:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   22aa0:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   22aa4:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   22aa6:	f7fb bc7a 	b.w	1e39e <sys_heap_init>

00022aaa <k_heap_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_alloc(struct k_heap *h, size_t bytes, k_timeout_t timeout)
{
   22aaa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22aae:	4604      	mov	r4, r0
   22ab0:	b085      	sub	sp, #20
   22ab2:	460e      	mov	r6, r1
	int64_t now, end = z_timeout_end_calc(timeout);
   22ab4:	4610      	mov	r0, r2
   22ab6:	4619      	mov	r1, r3
   22ab8:	f000 fb7d 	bl	231b6 <z_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   22abc:	f104 0a14 	add.w	sl, r4, #20
	int64_t now, end = z_timeout_end_calc(timeout);
   22ac0:	4605      	mov	r5, r0
   22ac2:	460f      	mov	r7, r1
   22ac4:	f04f 0220 	mov.w	r2, #32
   22ac8:	f3ef 8311 	mrs	r3, BASEPRI
   22acc:	f382 8811 	msr	BASEPRI, r2
   22ad0:	f3bf 8f6f 	isb	sy
		now = z_tick_get();
		if ((ret != NULL) || ((end - now) <= 0)) {
			break;
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   22ad4:	f104 0b0c 	add.w	fp, r4, #12
		ret = sys_heap_alloc(&h->heap, bytes);
   22ad8:	4631      	mov	r1, r6
   22ada:	4620      	mov	r0, r4
   22adc:	9303      	str	r3, [sp, #12]
   22ade:	f7fb fc40 	bl	1e362 <sys_heap_alloc>
   22ae2:	9002      	str	r0, [sp, #8]
		now = z_tick_get();
   22ae4:	f7fb f8f6 	bl	1dcd4 <z_tick_get>
		if ((ret != NULL) || ((end - now) <= 0)) {
   22ae8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   22aec:	b13a      	cbz	r2, 22afe <k_heap_alloc+0x54>
	__asm__ volatile(
   22aee:	f383 8811 	msr	BASEPRI, r3
   22af2:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&h->lock);
	}

	k_spin_unlock(&h->lock, key);
	return ret;
}
   22af6:	4610      	mov	r0, r2
   22af8:	b005      	add	sp, #20
   22afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((ret != NULL) || ((end - now) <= 0)) {
   22afe:	ebb5 0800 	subs.w	r8, r5, r0
   22b02:	eb67 0901 	sbc.w	r9, r7, r1
   22b06:	f1b8 0f01 	cmp.w	r8, #1
   22b0a:	f179 0100 	sbcs.w	r1, r9, #0
   22b0e:	dbee      	blt.n	22aee <k_heap_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   22b10:	e9cd 8900 	strd	r8, r9, [sp]
   22b14:	465a      	mov	r2, fp
   22b16:	4619      	mov	r1, r3
   22b18:	4650      	mov	r0, sl
   22b1a:	f7fa fd51 	bl	1d5c0 <z_pend_curr>
	__asm__ volatile(
   22b1e:	f04f 0220 	mov.w	r2, #32
   22b22:	f3ef 8311 	mrs	r3, BASEPRI
   22b26:	f382 8811 	msr	BASEPRI, r2
   22b2a:	f3bf 8f6f 	isb	sy
   22b2e:	e7d3      	b.n	22ad8 <k_heap_alloc+0x2e>

00022b30 <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   22b30:	b538      	push	{r3, r4, r5, lr}
   22b32:	4604      	mov	r4, r0
   22b34:	f04f 0320 	mov.w	r3, #32
   22b38:	f3ef 8511 	mrs	r5, BASEPRI
   22b3c:	f383 8811 	msr	BASEPRI, r3
   22b40:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   22b44:	f7fb fbfd 	bl	1e342 <sys_heap_free>

	if (z_unpend_all(&h->wait_q) != 0) {
   22b48:	f104 000c 	add.w	r0, r4, #12
   22b4c:	f000 fa3d 	bl	22fca <z_unpend_all>
   22b50:	b130      	cbz	r0, 22b60 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   22b52:	4629      	mov	r1, r5
   22b54:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   22b58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   22b5c:	f000 b94a 	b.w	22df4 <z_reschedule>
	__asm__ volatile(
   22b60:	f385 8811 	msr	BASEPRI, r5
   22b64:	f3bf 8f6f 	isb	sy
}
   22b68:	bd38      	pop	{r3, r4, r5, pc}

00022b6a <k_mem_pool_alloc>:
 * backend.
 */

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, k_timeout_t timeout)
{
   22b6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22b6c:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
	block->id.heap = p->heap;
   22b70:	6800      	ldr	r0, [r0, #0]
   22b72:	6048      	str	r0, [r1, #4]
{
   22b74:	4614      	mov	r4, r2
   22b76:	460d      	mov	r5, r1
	block->data = k_heap_alloc(p->heap, size, timeout);
   22b78:	4632      	mov	r2, r6
   22b7a:	463b      	mov	r3, r7
   22b7c:	4621      	mov	r1, r4
   22b7e:	f7ff ff94 	bl	22aaa <k_heap_alloc>
   22b82:	6028      	str	r0, [r5, #0]

	/* The legacy API returns -EAGAIN on timeout expiration, but
	 * -ENOMEM if the timeout was K_NO_WAIT. Don't ask.
	 */
	if (size != 0 && block->data == NULL) {
   22b84:	b144      	cbz	r4, 22b98 <k_mem_pool_alloc+0x2e>
   22b86:	b938      	cbnz	r0, 22b98 <k_mem_pool_alloc+0x2e>
		return K_TIMEOUT_EQ(timeout, K_NO_WAIT) ? -ENOMEM : -EAGAIN;
   22b88:	ea56 0307 	orrs.w	r3, r6, r7
   22b8c:	bf0c      	ite	eq
   22b8e:	f06f 000b 	mvneq.w	r0, #11
   22b92:	f06f 000a 	mvnne.w	r0, #10
	} else {
		return 0;
	}
}
   22b96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 0;
   22b98:	2000      	movs	r0, #0
   22b9a:	e7fc      	b.n	22b96 <k_mem_pool_alloc+0x2c>

00022b9c <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
	k_heap_free(id->heap, id->data);
   22b9c:	e9d0 1000 	ldrd	r1, r0, [r0]
   22ba0:	f7ff bfc6 	b.w	22b30 <k_heap_free>

00022ba4 <k_mem_slab_init>:
{
   22ba4:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   22ba6:	2400      	movs	r4, #0
   22ba8:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   22baa:	ea41 0402 	orr.w	r4, r1, r2
   22bae:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   22bb2:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
   22bb6:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   22bb8:	d10c      	bne.n	22bd4 <k_mem_slab_init+0x30>
	slab->free_list = NULL;
   22bba:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   22bbc:	42a3      	cmp	r3, r4
   22bbe:	d103      	bne.n	22bc8 <k_mem_slab_init+0x24>
   22bc0:	e9c0 0000 	strd	r0, r0, [r0]
}
   22bc4:	2000      	movs	r0, #0
}
   22bc6:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   22bc8:	6945      	ldr	r5, [r0, #20]
   22bca:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   22bcc:	3401      	adds	r4, #1
		slab->free_list = p;
   22bce:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   22bd0:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   22bd2:	e7f3      	b.n	22bbc <k_mem_slab_init+0x18>
		return -EINVAL;
   22bd4:	f06f 0015 	mvn.w	r0, #21
	return rc;
   22bd8:	e7f5      	b.n	22bc6 <k_mem_slab_init+0x22>

00022bda <k_mem_pool_malloc>:
{
   22bda:	b5df      	push	{r0, r1, r2, r3, r4, r6, r7, lr}
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   22bdc:	2408      	movs	r4, #8
   22bde:	190a      	adds	r2, r1, r4
   22be0:	d208      	bcs.n	22bf4 <k_mem_pool_malloc+0x1a>
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   22be2:	2600      	movs	r6, #0
   22be4:	2700      	movs	r7, #0
   22be6:	e9cd 6700 	strd	r6, r7, [sp]
   22bea:	eb0d 0104 	add.w	r1, sp, r4
   22bee:	f7ff ffbc 	bl	22b6a <k_mem_pool_alloc>
   22bf2:	b110      	cbz	r0, 22bfa <k_mem_pool_malloc+0x20>
		return NULL;
   22bf4:	2000      	movs	r0, #0
}
   22bf6:	b004      	add	sp, #16
   22bf8:	bdd0      	pop	{r4, r6, r7, pc}
	(void)memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));
   22bfa:	9802      	ldr	r0, [sp, #8]
   22bfc:	4622      	mov	r2, r4
   22bfe:	a902      	add	r1, sp, #8
   22c00:	f7fd f935 	bl	1fe6e <memcpy>
	return (char *)block.data + WB_UP(sizeof(struct k_mem_block_id));
   22c04:	9802      	ldr	r0, [sp, #8]
   22c06:	3008      	adds	r0, #8
   22c08:	e7f5      	b.n	22bf6 <k_mem_pool_malloc+0x1c>

00022c0a <k_free>:
	if (ptr != NULL) {
   22c0a:	b110      	cbz	r0, 22c12 <k_free+0x8>
		k_mem_pool_free_id(ptr);
   22c0c:	3808      	subs	r0, #8
   22c0e:	f7ff bfc5 	b.w	22b9c <k_mem_pool_free_id>
}
   22c12:	4770      	bx	lr

00022c14 <queue_insert>:
{
   22c14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22c18:	4604      	mov	r4, r0
   22c1a:	460d      	mov	r5, r1
   22c1c:	4690      	mov	r8, r2
   22c1e:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   22c20:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   22c24:	f04f 0320 	mov.w	r3, #32
   22c28:	f3ef 8711 	mrs	r7, BASEPRI
   22c2c:	f383 8811 	msr	BASEPRI, r3
   22c30:	f3bf 8f6f 	isb	sy
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   22c34:	4630      	mov	r0, r6
   22c36:	f000 f99b 	bl	22f70 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   22c3a:	b158      	cbz	r0, 22c54 <queue_insert+0x40>
   22c3c:	2400      	movs	r4, #0
   22c3e:	6784      	str	r4, [r0, #120]	; 0x78
   22c40:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   22c44:	f000 f91e 	bl	22e84 <z_ready_thread>
	z_reschedule(&queue->lock, key);
   22c48:	4630      	mov	r0, r6
   22c4a:	4639      	mov	r1, r7
   22c4c:	f000 f8d2 	bl	22df4 <z_reschedule>
	return 0;
   22c50:	2000      	movs	r0, #0
   22c52:	e00c      	b.n	22c6e <queue_insert+0x5a>
	if (alloc) {
   22c54:	f1b9 0f00 	cmp.w	r9, #0
   22c58:	d01b      	beq.n	22c92 <queue_insert+0x7e>
		anode = z_thread_malloc(sizeof(*anode));
   22c5a:	2008      	movs	r0, #8
   22c5c:	f7fa f930 	bl	1cec0 <z_thread_malloc>
		if (anode == NULL) {
   22c60:	b938      	cbnz	r0, 22c72 <queue_insert+0x5e>
	__asm__ volatile(
   22c62:	f387 8811 	msr	BASEPRI, r7
   22c66:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   22c6a:	f06f 000b 	mvn.w	r0, #11
}
   22c6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   22c72:	2301      	movs	r3, #1
		anode->data = data;
   22c74:	f8c0 8004 	str.w	r8, [r0, #4]
   22c78:	6003      	str	r3, [r0, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   22c7a:	6803      	ldr	r3, [r0, #0]
   22c7c:	f003 0203 	and.w	r2, r3, #3
   22c80:	b95d      	cbnz	r5, 22c9a <queue_insert+0x86>
	parent->next_and_flags = cur_flags | (unative_t)child;
   22c82:	6823      	ldr	r3, [r4, #0]
   22c84:	4313      	orrs	r3, r2
   22c86:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   22c88:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   22c8a:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   22c8c:	b973      	cbnz	r3, 22cac <queue_insert+0x98>
	list->tail = node;
   22c8e:	6060      	str	r0, [r4, #4]
}
   22c90:	e00c      	b.n	22cac <queue_insert+0x98>
	node->next_and_flags = flags;
   22c92:	f8c8 9000 	str.w	r9, [r8]
}
   22c96:	4640      	mov	r0, r8
   22c98:	e7ef      	b.n	22c7a <queue_insert+0x66>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   22c9a:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   22c9c:	f033 0303 	bics.w	r3, r3, #3
   22ca0:	d110      	bne.n	22cc4 <queue_insert+0xb0>
	parent->next_and_flags = cur_flags | (unative_t)child;
   22ca2:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   22ca4:	6862      	ldr	r2, [r4, #4]
   22ca6:	b93a      	cbnz	r2, 22cb8 <queue_insert+0xa4>
	list->head = node;
   22ca8:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   22cac:	2104      	movs	r1, #4
   22cae:	f104 0010 	add.w	r0, r4, #16
   22cb2:	f000 fbe7 	bl	23484 <z_handle_obj_poll_events>
   22cb6:	e7c7      	b.n	22c48 <queue_insert+0x34>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   22cb8:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   22cba:	f003 0303 	and.w	r3, r3, #3
   22cbe:	4303      	orrs	r3, r0
   22cc0:	6013      	str	r3, [r2, #0]
   22cc2:	e7e4      	b.n	22c8e <queue_insert+0x7a>
   22cc4:	4313      	orrs	r3, r2
   22cc6:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   22cc8:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   22cca:	f003 0303 	and.w	r3, r3, #3
   22cce:	4303      	orrs	r3, r0
   22cd0:	602b      	str	r3, [r5, #0]
}
   22cd2:	e7eb      	b.n	22cac <queue_insert+0x98>

00022cd4 <z_queue_node_peek>:
{
   22cd4:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   22cd6:	4604      	mov	r4, r0
   22cd8:	b130      	cbz	r0, 22ce8 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   22cda:	6802      	ldr	r2, [r0, #0]
   22cdc:	0793      	lsls	r3, r2, #30
   22cde:	d003      	beq.n	22ce8 <z_queue_node_peek+0x14>
		ret = anode->data;
   22ce0:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   22ce2:	b109      	cbz	r1, 22ce8 <z_queue_node_peek+0x14>
			k_free(anode);
   22ce4:	f7ff ff91 	bl	22c0a <k_free>
}
   22ce8:	4620      	mov	r0, r4
   22cea:	bd10      	pop	{r4, pc}

00022cec <z_impl_k_queue_init>:
	list->head = NULL;
   22cec:	2300      	movs	r3, #0
	list->tail = NULL;
   22cee:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dlist_init(&w->waitq);
   22cf2:	f100 0308 	add.w	r3, r0, #8
   22cf6:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   22cfa:	f100 0310 	add.w	r3, r0, #16
   22cfe:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   22d02:	4770      	bx	lr

00022d04 <k_queue_append>:
{
   22d04:	460a      	mov	r2, r1
	(void)queue_insert(queue, sys_sflist_peek_tail(&queue->data_q),
   22d06:	2300      	movs	r3, #0
   22d08:	6841      	ldr	r1, [r0, #4]
   22d0a:	f7ff bf83 	b.w	22c14 <queue_insert>

00022d0e <k_queue_prepend>:
	(void)queue_insert(queue, NULL, data, false);
   22d0e:	2300      	movs	r3, #0
{
   22d10:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false);
   22d12:	4619      	mov	r1, r3
   22d14:	f7ff bf7e 	b.w	22c14 <queue_insert>

00022d18 <k_queue_append_list>:
{
   22d18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22d1c:	4605      	mov	r5, r0
   22d1e:	4616      	mov	r6, r2
	CHECKIF(head == NULL || tail == NULL) {
   22d20:	460c      	mov	r4, r1
   22d22:	b391      	cbz	r1, 22d8a <k_queue_append_list+0x72>
   22d24:	b38a      	cbz	r2, 22d8a <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   22d26:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   22d2a:	f04f 0320 	mov.w	r3, #32
   22d2e:	f3ef 8811 	mrs	r8, BASEPRI
   22d32:	f383 8811 	msr	BASEPRI, r3
   22d36:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   22d3a:	4638      	mov	r0, r7
   22d3c:	f000 f918 	bl	22f70 <z_unpend_first_thread>
   22d40:	f04f 0900 	mov.w	r9, #0
	while ((head != NULL) && (thread != NULL)) {
   22d44:	b920      	cbnz	r0, 22d50 <k_queue_append_list+0x38>
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   22d46:	686b      	ldr	r3, [r5, #4]
   22d48:	b9cb      	cbnz	r3, 22d7e <k_queue_append_list+0x66>
	list->head = node;
   22d4a:	602c      	str	r4, [r5, #0]
	list->tail = node;
   22d4c:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   22d4e:	e00a      	b.n	22d66 <k_queue_append_list+0x4e>
   22d50:	6144      	str	r4, [r0, #20]
   22d52:	f8c0 9078 	str.w	r9, [r0, #120]	; 0x78
	z_ready_thread(thread);
   22d56:	f000 f895 	bl	22e84 <z_ready_thread>
		head = *(void **)head;
   22d5a:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   22d5c:	4638      	mov	r0, r7
   22d5e:	f000 f907 	bl	22f70 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   22d62:	2c00      	cmp	r4, #0
   22d64:	d1ee      	bne.n	22d44 <k_queue_append_list+0x2c>
	z_handle_obj_poll_events(&queue->poll_events, state);
   22d66:	2104      	movs	r1, #4
   22d68:	f105 0010 	add.w	r0, r5, #16
   22d6c:	f000 fb8a 	bl	23484 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   22d70:	4638      	mov	r0, r7
   22d72:	4641      	mov	r1, r8
   22d74:	f000 f83e 	bl	22df4 <z_reschedule>
	return 0;
   22d78:	2000      	movs	r0, #0
}
   22d7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   22d7e:	6819      	ldr	r1, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   22d80:	f001 0103 	and.w	r1, r1, #3
   22d84:	430c      	orrs	r4, r1
   22d86:	601c      	str	r4, [r3, #0]
}
   22d88:	e7e0      	b.n	22d4c <k_queue_append_list+0x34>
		return -EINVAL;
   22d8a:	f06f 0015 	mvn.w	r0, #21
   22d8e:	e7f4      	b.n	22d7a <k_queue_append_list+0x62>

00022d90 <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
   22d90:	f990 000e 	ldrsb.w	r0, [r0, #14]
   22d94:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   22d98:	4298      	cmp	r0, r3
   22d9a:	bfac      	ite	ge
   22d9c:	2000      	movge	r0, #0
   22d9e:	2001      	movlt	r0, #1
   22da0:	4770      	bx	lr

00022da2 <z_find_first_thread_to_unpend>:
{
   22da2:	b510      	push	{r4, lr}
   22da4:	f04f 0320 	mov.w	r3, #32
   22da8:	f3ef 8411 	mrs	r4, BASEPRI
   22dac:	f383 8811 	msr	BASEPRI, r3
   22db0:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   22db4:	f000 f85c 	bl	22e70 <z_priq_dumb_best>
	__asm__ volatile(
   22db8:	f384 8811 	msr	BASEPRI, r4
   22dbc:	f3bf 8f6f 	isb	sy
}
   22dc0:	bd10      	pop	{r4, pc}

00022dc2 <z_unpend_thread_no_timeout>:
{
   22dc2:	b538      	push	{r3, r4, r5, lr}
   22dc4:	4604      	mov	r4, r0
	__asm__ volatile(
   22dc6:	f04f 0320 	mov.w	r3, #32
   22dca:	f3ef 8511 	mrs	r5, BASEPRI
   22dce:	f383 8811 	msr	BASEPRI, r3
   22dd2:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   22dd6:	4601      	mov	r1, r0
   22dd8:	6880      	ldr	r0, [r0, #8]
   22dda:	f7fa f9cf 	bl	1d17c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   22dde:	7b63      	ldrb	r3, [r4, #13]
   22de0:	f023 0302 	bic.w	r3, r3, #2
   22de4:	7363      	strb	r3, [r4, #13]
		thread->base.pended_on = NULL;
   22de6:	2300      	movs	r3, #0
   22de8:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   22dea:	f385 8811 	msr	BASEPRI, r5
   22dee:	f3bf 8f6f 	isb	sy
}
   22df2:	bd38      	pop	{r3, r4, r5, pc}

00022df4 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   22df4:	b921      	cbnz	r1, 22e00 <z_reschedule+0xc>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   22df6:	f3ef 8005 	mrs	r0, IPSR
   22dfa:	b908      	cbnz	r0, 22e00 <z_reschedule+0xc>
   22dfc:	f7e4 bad2 	b.w	73a4 <arch_swap>
   22e00:	f381 8811 	msr	BASEPRI, r1
   22e04:	f3bf 8f6f 	isb	sy
}
   22e08:	4770      	bx	lr

00022e0a <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   22e0a:	4603      	mov	r3, r0
   22e0c:	b920      	cbnz	r0, 22e18 <z_reschedule_irqlock+0xe>
   22e0e:	f3ef 8205 	mrs	r2, IPSR
   22e12:	b90a      	cbnz	r2, 22e18 <z_reschedule_irqlock+0xe>
   22e14:	f7e4 bac6 	b.w	73a4 <arch_swap>
   22e18:	f383 8811 	msr	BASEPRI, r3
   22e1c:	f3bf 8f6f 	isb	sy
}
   22e20:	4770      	bx	lr

00022e22 <z_reschedule_unlocked>:
	__asm__ volatile(
   22e22:	f04f 0320 	mov.w	r3, #32
   22e26:	f3ef 8011 	mrs	r0, BASEPRI
   22e2a:	f383 8811 	msr	BASEPRI, r3
   22e2e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   22e32:	f7ff bfea 	b.w	22e0a <z_reschedule_irqlock>

00022e36 <z_unpend_thread>:
{
   22e36:	b510      	push	{r4, lr}
   22e38:	4601      	mov	r1, r0
   22e3a:	f04f 0320 	mov.w	r3, #32
   22e3e:	f3ef 8411 	mrs	r4, BASEPRI
   22e42:	f383 8811 	msr	BASEPRI, r3
   22e46:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   22e4a:	6880      	ldr	r0, [r0, #8]
   22e4c:	f7fa f996 	bl	1d17c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   22e50:	7b4b      	ldrb	r3, [r1, #13]
   22e52:	f023 0302 	bic.w	r3, r3, #2
   22e56:	734b      	strb	r3, [r1, #13]
		thread->base.pended_on = NULL;
   22e58:	2300      	movs	r3, #0
   22e5a:	608b      	str	r3, [r1, #8]
	__asm__ volatile(
   22e5c:	f384 8811 	msr	BASEPRI, r4
   22e60:	f3bf 8f6f 	isb	sy
}
   22e64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return z_abort_timeout(&thread->base.timeout);
   22e68:	f101 0018 	add.w	r0, r1, #24
   22e6c:	f000 b95d 	b.w	2312a <z_abort_timeout>

00022e70 <z_priq_dumb_best>:
{
   22e70:	4603      	mov	r3, r0
	return list->head == list;
   22e72:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22e74:	4283      	cmp	r3, r0
   22e76:	d003      	beq.n	22e80 <z_priq_dumb_best+0x10>
	if (n != NULL) {
   22e78:	2800      	cmp	r0, #0
   22e7a:	bf38      	it	cc
   22e7c:	2000      	movcc	r0, #0
   22e7e:	4770      	bx	lr
	struct k_thread *thread = NULL;
   22e80:	2000      	movs	r0, #0
}
   22e82:	4770      	bx	lr

00022e84 <z_ready_thread>:
{
   22e84:	b510      	push	{r4, lr}
	__asm__ volatile(
   22e86:	f04f 0320 	mov.w	r3, #32
   22e8a:	f3ef 8411 	mrs	r4, BASEPRI
   22e8e:	f383 8811 	msr	BASEPRI, r3
   22e92:	f3bf 8f6f 	isb	sy
		ready_thread(thread);
   22e96:	f7fa f9c7 	bl	1d228 <ready_thread>
	__asm__ volatile(
   22e9a:	f384 8811 	msr	BASEPRI, r4
   22e9e:	f3bf 8f6f 	isb	sy
}
   22ea2:	bd10      	pop	{r4, pc}

00022ea4 <z_thread_timeout>:
{
   22ea4:	b538      	push	{r3, r4, r5, lr}
	if (thread->base.pended_on != NULL) {
   22ea6:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
   22eaa:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
   22eac:	f1a0 0118 	sub.w	r1, r0, #24
	if (thread->base.pended_on != NULL) {
   22eb0:	b1c3      	cbz	r3, 22ee4 <z_thread_timeout+0x40>
	__asm__ volatile(
   22eb2:	f04f 0320 	mov.w	r3, #32
   22eb6:	f3ef 8511 	mrs	r5, BASEPRI
   22eba:	f383 8811 	msr	BASEPRI, r3
   22ebe:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   22ec2:	f850 0c10 	ldr.w	r0, [r0, #-16]
   22ec6:	f7fa f959 	bl	1d17c <z_priq_dumb_remove>
   22eca:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   22ece:	f023 0302 	bic.w	r3, r3, #2
   22ed2:	f804 3c0b 	strb.w	r3, [r4, #-11]
		thread->base.pended_on = NULL;
   22ed6:	2300      	movs	r3, #0
   22ed8:	f844 3c10 	str.w	r3, [r4, #-16]
	__asm__ volatile(
   22edc:	f385 8811 	msr	BASEPRI, r5
   22ee0:	f3bf 8f6f 	isb	sy
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   22ee4:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   22ee8:	f023 0314 	bic.w	r3, r3, #20
   22eec:	f804 3c0b 	strb.w	r3, [r4, #-11]
	z_ready_thread(thread);
   22ef0:	4608      	mov	r0, r1
}
   22ef2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_ready_thread(thread);
   22ef6:	f7ff bfc5 	b.w	22e84 <z_ready_thread>

00022efa <z_remove_thread_from_ready_q>:
{
   22efa:	b510      	push	{r4, lr}
	__asm__ volatile(
   22efc:	f04f 0320 	mov.w	r3, #32
   22f00:	f3ef 8411 	mrs	r4, BASEPRI
   22f04:	f383 8811 	msr	BASEPRI, r3
   22f08:	f3bf 8f6f 	isb	sy
		unready_thread(thread);
   22f0c:	f7fa faea 	bl	1d4e4 <unready_thread>
	__asm__ volatile(
   22f10:	f384 8811 	msr	BASEPRI, r4
   22f14:	f3bf 8f6f 	isb	sy
}
   22f18:	bd10      	pop	{r4, pc}

00022f1a <add_to_waitq_locked>:
{
   22f1a:	b538      	push	{r3, r4, r5, lr}
   22f1c:	4604      	mov	r4, r0
   22f1e:	460d      	mov	r5, r1
	unready_thread(thread);
   22f20:	f7fa fae0 	bl	1d4e4 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   22f24:	7b63      	ldrb	r3, [r4, #13]
   22f26:	f043 0302 	orr.w	r3, r3, #2
   22f2a:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   22f2c:	b1c5      	cbz	r5, 22f60 <add_to_waitq_locked+0x46>
	return list->head == list;
   22f2e:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   22f30:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22f32:	429d      	cmp	r5, r3
   22f34:	bf08      	it	eq
   22f36:	2300      	moveq	r3, #0
   22f38:	2b00      	cmp	r3, #0
   22f3a:	bf38      	it	cc
   22f3c:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   22f3e:	b183      	cbz	r3, 22f62 <add_to_waitq_locked+0x48>
	if (thread_1->base.prio < thread_2->base.prio) {
   22f40:	f994 100e 	ldrsb.w	r1, [r4, #14]
   22f44:	f993 200e 	ldrsb.w	r2, [r3, #14]
   22f48:	4291      	cmp	r1, r2
   22f4a:	db04      	blt.n	22f56 <add_to_waitq_locked+0x3c>
	return (node == list->tail) ? NULL : node->next;
   22f4c:	686a      	ldr	r2, [r5, #4]
   22f4e:	429a      	cmp	r2, r3
   22f50:	d007      	beq.n	22f62 <add_to_waitq_locked+0x48>
   22f52:	681b      	ldr	r3, [r3, #0]
   22f54:	e7f3      	b.n	22f3e <add_to_waitq_locked+0x24>
	node->prev = successor->prev;
   22f56:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   22f58:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   22f5c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   22f5e:	605c      	str	r4, [r3, #4]
}
   22f60:	bd38      	pop	{r3, r4, r5, pc}
	node->prev = list->tail;
   22f62:	686b      	ldr	r3, [r5, #4]
   22f64:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   22f66:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   22f68:	6025      	str	r5, [r4, #0]
	list->tail->next = node;
   22f6a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   22f6c:	606c      	str	r4, [r5, #4]
   22f6e:	e7f7      	b.n	22f60 <add_to_waitq_locked+0x46>

00022f70 <z_unpend_first_thread>:
{
   22f70:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   22f72:	f04f 0320 	mov.w	r3, #32
   22f76:	f3ef 8211 	mrs	r2, BASEPRI
   22f7a:	f383 8811 	msr	BASEPRI, r3
   22f7e:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   22f82:	f7ff ff75 	bl	22e70 <z_priq_dumb_best>
   22f86:	4604      	mov	r4, r0
	__asm__ volatile(
   22f88:	f382 8811 	msr	BASEPRI, r2
   22f8c:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   22f90:	b1c8      	cbz	r0, 22fc6 <z_unpend_first_thread+0x56>
	__asm__ volatile(
   22f92:	f04f 0320 	mov.w	r3, #32
   22f96:	f3ef 8511 	mrs	r5, BASEPRI
   22f9a:	f383 8811 	msr	BASEPRI, r3
   22f9e:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   22fa2:	4601      	mov	r1, r0
   22fa4:	6880      	ldr	r0, [r0, #8]
   22fa6:	f7fa f8e9 	bl	1d17c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   22faa:	7b63      	ldrb	r3, [r4, #13]
   22fac:	f023 0302 	bic.w	r3, r3, #2
   22fb0:	7363      	strb	r3, [r4, #13]
		thread->base.pended_on = NULL;
   22fb2:	2300      	movs	r3, #0
   22fb4:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   22fb6:	f385 8811 	msr	BASEPRI, r5
   22fba:	f3bf 8f6f 	isb	sy
   22fbe:	f104 0018 	add.w	r0, r4, #24
   22fc2:	f000 f8b2 	bl	2312a <z_abort_timeout>
}
   22fc6:	4620      	mov	r0, r4
   22fc8:	bd38      	pop	{r3, r4, r5, pc}

00022fca <z_unpend_all>:
{
   22fca:	b538      	push	{r3, r4, r5, lr}
   22fcc:	4605      	mov	r5, r0
	int need_sched = 0;
   22fce:	2000      	movs	r0, #0
	return list->head == list;
   22fd0:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22fd2:	42a5      	cmp	r5, r4
   22fd4:	d000      	beq.n	22fd8 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   22fd6:	b904      	cbnz	r4, 22fda <z_unpend_all+0x10>
}
   22fd8:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   22fda:	4620      	mov	r0, r4
   22fdc:	f7ff ff2b 	bl	22e36 <z_unpend_thread>
		z_ready_thread(thread);
   22fe0:	4620      	mov	r0, r4
   22fe2:	f7ff ff4f 	bl	22e84 <z_ready_thread>
		need_sched = 1;
   22fe6:	2001      	movs	r0, #1
   22fe8:	e7f2      	b.n	22fd0 <z_unpend_all+0x6>

00022fea <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
   22fea:	b15a      	cbz	r2, 23004 <z_impl_k_sem_init+0x1a>
   22fec:	428a      	cmp	r2, r1
   22fee:	d309      	bcc.n	23004 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   22ff0:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   22ff4:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   22ff8:	e9c0 0000 	strd	r0, r0, [r0]
   22ffc:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   23000:	2000      	movs	r0, #0
   23002:	4770      	bx	lr
		return -EINVAL;
   23004:	f06f 0015 	mvn.w	r0, #21
}
   23008:	4770      	bx	lr

0002300a <k_is_in_isr>:
   2300a:	f3ef 8005 	mrs	r0, IPSR
}
   2300e:	3800      	subs	r0, #0
   23010:	bf18      	it	ne
   23012:	2001      	movne	r0, #1
   23014:	4770      	bx	lr

00023016 <z_impl_k_busy_wait>:
	arch_busy_wait(usec_to_wait);
   23016:	f7e4 be93 	b.w	7d40 <arch_busy_wait>

0002301a <z_impl_k_thread_name_set>:
}
   2301a:	f06f 0046 	mvn.w	r0, #70	; 0x46
   2301e:	4770      	bx	lr

00023020 <k_thread_name_get>:
}
   23020:	2000      	movs	r0, #0
   23022:	4770      	bx	lr

00023024 <k_work_submit_to_queue>:
{
   23024:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   23026:	f101 0308 	add.w	r3, r1, #8
   2302a:	f3bf 8f5b 	dmb	ish
   2302e:	e853 2f00 	ldrex	r2, [r3]
   23032:	f042 0c01 	orr.w	ip, r2, #1
   23036:	e843 ce00 	strex	lr, ip, [r3]
   2303a:	f1be 0f00 	cmp.w	lr, #0
   2303e:	d1f6      	bne.n	2302e <k_work_submit_to_queue+0xa>
   23040:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   23044:	07d3      	lsls	r3, r2, #31
   23046:	d403      	bmi.n	23050 <k_work_submit_to_queue+0x2c>
}
   23048:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   2304c:	f7ff be5a 	b.w	22d04 <k_queue_append>
}
   23050:	f85d fb04 	ldr.w	pc, [sp], #4

00023054 <work_timeout>:
	k_work_submit_to_queue(w->work_q, &w->work);
   23054:	f1a0 0110 	sub.w	r1, r0, #16
   23058:	6980      	ldr	r0, [r0, #24]
   2305a:	f7ff bfe3 	b.w	23024 <k_work_submit_to_queue>

0002305e <work_cancel>:
	CHECKIF(work->work_q == NULL) {
   2305e:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
   23060:	b570      	push	{r4, r5, r6, lr}
   23062:	4604      	mov	r4, r0
	CHECKIF(work->work_q == NULL) {
   23064:	b913      	cbnz	r3, 2306c <work_cancel+0xe>
		return -EALREADY;
   23066:	f06f 0044 	mvn.w	r0, #68	; 0x44
}
   2306a:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2306c:	f3bf 8f5b 	dmb	ish
   23070:	6883      	ldr	r3, [r0, #8]
   23072:	f3bf 8f5b 	dmb	ish
	if (k_work_pending(&work->work)) {
   23076:	07db      	lsls	r3, r3, #31
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   23078:	f100 0508 	add.w	r5, r0, #8
   2307c:	d532      	bpl.n	230e4 <work_cancel+0x86>
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   2307e:	6a82      	ldr	r2, [r0, #40]	; 0x28
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   23080:	6813      	ldr	r3, [r2, #0]
   23082:	2100      	movs	r1, #0
   23084:	b913      	cbnz	r3, 2308c <work_cancel+0x2e>
			return -EINVAL;
   23086:	f06f 0015 	mvn.w	r0, #21
   2308a:	e7ee      	b.n	2306a <work_cancel+0xc>
   2308c:	429c      	cmp	r4, r3
   2308e:	d124      	bne.n	230da <work_cancel+0x7c>
Z_GENLIST_REMOVE(sflist, sfnode)
   23090:	6823      	ldr	r3, [r4, #0]
   23092:	6856      	ldr	r6, [r2, #4]
   23094:	f023 0003 	bic.w	r0, r3, #3
   23098:	b9b1      	cbnz	r1, 230c8 <work_cancel+0x6a>
   2309a:	42b4      	cmp	r4, r6
	list->head = node;
   2309c:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   2309e:	d100      	bne.n	230a2 <work_cancel+0x44>
	list->tail = node;
   230a0:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   230a2:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   230a4:	f003 0303 	and.w	r3, r3, #3
   230a8:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
   230aa:	2000      	movs	r0, #0
   230ac:	62a0      	str	r0, [r4, #40]	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   230ae:	f3bf 8f5b 	dmb	ish
   230b2:	e855 3f00 	ldrex	r3, [r5]
   230b6:	f023 0301 	bic.w	r3, r3, #1
   230ba:	e845 3200 	strex	r2, r3, [r5]
   230be:	2a00      	cmp	r2, #0
   230c0:	d1f7      	bne.n	230b2 <work_cancel+0x54>
   230c2:	f3bf 8f5b 	dmb	ish
   230c6:	e7d0      	b.n	2306a <work_cancel+0xc>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   230c8:	680b      	ldr	r3, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   230ca:	f003 0303 	and.w	r3, r3, #3
   230ce:	4303      	orrs	r3, r0
Z_GENLIST_REMOVE(sflist, sfnode)
   230d0:	42b4      	cmp	r4, r6
	parent->next_and_flags = cur_flags | (unative_t)child;
   230d2:	600b      	str	r3, [r1, #0]
	list->tail = node;
   230d4:	bf08      	it	eq
   230d6:	6051      	streq	r1, [r2, #4]
}
   230d8:	e7e3      	b.n	230a2 <work_cancel+0x44>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   230da:	6818      	ldr	r0, [r3, #0]
   230dc:	4619      	mov	r1, r3
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   230de:	f020 0303 	bic.w	r3, r0, #3
   230e2:	e7cf      	b.n	23084 <work_cancel+0x26>
		int err = z_abort_timeout(&work->timeout);
   230e4:	3010      	adds	r0, #16
   230e6:	f000 f820 	bl	2312a <z_abort_timeout>
		if (err) {
   230ea:	2800      	cmp	r0, #0
   230ec:	d0dd      	beq.n	230aa <work_cancel+0x4c>
   230ee:	e7ba      	b.n	23066 <work_cancel+0x8>

000230f0 <k_delayed_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   230f0:	2300      	movs	r3, #0
   230f2:	e9c0 3100 	strd	r3, r1, [r0]
	node->prev = NULL;
   230f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
   230fa:	6083      	str	r3, [r0, #8]
	work->work_q = NULL;
   230fc:	6283      	str	r3, [r0, #40]	; 0x28
}
   230fe:	4770      	bx	lr

00023100 <k_delayed_work_cancel>:

int k_delayed_work_cancel(struct k_delayed_work *work)
{
	if (!work->work_q) {
   23100:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
   23102:	b510      	push	{r4, lr}
	if (!work->work_q) {
   23104:	b173      	cbz	r3, 23124 <k_delayed_work_cancel+0x24>
	__asm__ volatile(
   23106:	f04f 0320 	mov.w	r3, #32
   2310a:	f3ef 8411 	mrs	r4, BASEPRI
   2310e:	f383 8811 	msr	BASEPRI, r3
   23112:	f3bf 8f6f 	isb	sy
		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = work_cancel(work);
   23116:	f7ff ffa2 	bl	2305e <work_cancel>
	__asm__ volatile(
   2311a:	f384 8811 	msr	BASEPRI, r4
   2311e:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   23122:	bd10      	pop	{r4, pc}
		return -EINVAL;
   23124:	f06f 0015 	mvn.w	r0, #21
   23128:	e7fb      	b.n	23122 <k_delayed_work_cancel+0x22>

0002312a <z_abort_timeout>:
{
   2312a:	b510      	push	{r4, lr}
	__asm__ volatile(
   2312c:	f04f 0220 	mov.w	r2, #32
   23130:	f3ef 8411 	mrs	r4, BASEPRI
   23134:	f382 8811 	msr	BASEPRI, r2
   23138:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   2313c:	6803      	ldr	r3, [r0, #0]
   2313e:	b13b      	cbz	r3, 23150 <z_abort_timeout+0x26>
			remove_timeout(to);
   23140:	f7fa fc9e 	bl	1da80 <remove_timeout>
			ret = 0;
   23144:	2000      	movs	r0, #0
	__asm__ volatile(
   23146:	f384 8811 	msr	BASEPRI, r4
   2314a:	f3bf 8f6f 	isb	sy
}
   2314e:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   23150:	f06f 0015 	mvn.w	r0, #21
   23154:	e7f7      	b.n	23146 <z_abort_timeout+0x1c>

00023156 <z_get_next_timeout_expiry>:
{
   23156:	b510      	push	{r4, lr}
	__asm__ volatile(
   23158:	f04f 0320 	mov.w	r3, #32
   2315c:	f3ef 8411 	mrs	r4, BASEPRI
   23160:	f383 8811 	msr	BASEPRI, r3
   23164:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   23168:	f7fa fca4 	bl	1dab4 <next_timeout>
	__asm__ volatile(
   2316c:	f384 8811 	msr	BASEPRI, r4
   23170:	f3bf 8f6f 	isb	sy
}
   23174:	bd10      	pop	{r4, pc}

00023176 <z_set_timeout_expiry>:
{
   23176:	b570      	push	{r4, r5, r6, lr}
   23178:	4604      	mov	r4, r0
   2317a:	460d      	mov	r5, r1
	__asm__ volatile(
   2317c:	f04f 0320 	mov.w	r3, #32
   23180:	f3ef 8611 	mrs	r6, BASEPRI
   23184:	f383 8811 	msr	BASEPRI, r3
   23188:	f3bf 8f6f 	isb	sy
		int next = next_timeout();
   2318c:	f7fa fc92 	bl	1dab4 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   23190:	2801      	cmp	r0, #1
   23192:	dd05      	ble.n	231a0 <z_set_timeout_expiry+0x2a>
   23194:	42a0      	cmp	r0, r4
   23196:	dd03      	ble.n	231a0 <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, idle);
   23198:	4629      	mov	r1, r5
   2319a:	4620      	mov	r0, r4
   2319c:	f7e3 fe58 	bl	6e50 <z_clock_set_timeout>
	__asm__ volatile(
   231a0:	f386 8811 	msr	BASEPRI, r6
   231a4:	f3bf 8f6f 	isb	sy
}
   231a8:	bd70      	pop	{r4, r5, r6, pc}

000231aa <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
   231aa:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
   231ac:	f7fa fd92 	bl	1dcd4 <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   231b0:	bd08      	pop	{r3, pc}

000231b2 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return z_tick_get();
   231b2:	f7fa bd8f 	b.w	1dcd4 <z_tick_get>

000231b6 <z_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t z_timeout_end_calc(k_timeout_t timeout)
{
   231b6:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   231b8:	1c4b      	adds	r3, r1, #1
   231ba:	bf08      	it	eq
   231bc:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   231c0:	4604      	mov	r4, r0
   231c2:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   231c4:	d013      	beq.n	231ee <z_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   231c6:	ea54 0105 	orrs.w	r1, r4, r5
   231ca:	d103      	bne.n	231d4 <z_timeout_end_calc+0x1e>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
		return Z_TICK_ABS(dt);
	}
#endif
	return z_tick_get() + MAX(1, dt);
}
   231cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return z_tick_get();
   231d0:	f7fa bd80 	b.w	1dcd4 <z_tick_get>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   231d4:	f06f 0101 	mvn.w	r1, #1
   231d8:	1a0a      	subs	r2, r1, r0
   231da:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   231de:	eb61 0305 	sbc.w	r3, r1, r5
   231e2:	2a00      	cmp	r2, #0
   231e4:	f173 0100 	sbcs.w	r1, r3, #0
   231e8:	db02      	blt.n	231f0 <z_timeout_end_calc+0x3a>
		return Z_TICK_ABS(dt);
   231ea:	4610      	mov	r0, r2
   231ec:	4619      	mov	r1, r3
}
   231ee:	bd38      	pop	{r3, r4, r5, pc}
	return z_tick_get() + MAX(1, dt);
   231f0:	f7fa fd70 	bl	1dcd4 <z_tick_get>
   231f4:	2c01      	cmp	r4, #1
   231f6:	f175 0300 	sbcs.w	r3, r5, #0
   231fa:	bfbc      	itt	lt
   231fc:	2401      	movlt	r4, #1
   231fe:	2500      	movlt	r5, #0
   23200:	1820      	adds	r0, r4, r0
   23202:	eb45 0101 	adc.w	r1, r5, r1
   23206:	e7f2      	b.n	231ee <z_timeout_end_calc+0x38>

00023208 <k_timer_init>:
	timer->status = 0U;
   23208:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   2320a:	e9c0 1208 	strd	r1, r2, [r0, #32]
   2320e:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   23212:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   23216:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   2321a:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   2321c:	6343      	str	r3, [r0, #52]	; 0x34
}
   2321e:	4770      	bx	lr

00023220 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   23220:	b510      	push	{r4, lr}
   23222:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
   23224:	f7ff ff81 	bl	2312a <z_abort_timeout>

	if (inactive) {
   23228:	b9d8      	cbnz	r0, 23262 <z_impl_k_timer_stop+0x42>
		return;
	}

	if (timer->stop_fn != NULL) {
   2322a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2322c:	b10b      	cbz	r3, 23232 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   2322e:	4620      	mov	r0, r4
   23230:	4798      	blx	r3
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);
   23232:	f104 0018 	add.w	r0, r4, #24
   23236:	2100      	movs	r1, #0
   23238:	f7ff fdb3 	bl	22da2 <z_find_first_thread_to_unpend>
	if (thread != NULL) {
   2323c:	4604      	mov	r4, r0
   2323e:	b180      	cbz	r0, 23262 <z_impl_k_timer_stop+0x42>
		z_unpend_thread_no_timeout(thread);
   23240:	f7ff fdbf 	bl	22dc2 <z_unpend_thread_no_timeout>
	}

	struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);

	if (pending_thread != NULL) {
		z_ready_thread(pending_thread);
   23244:	4620      	mov	r0, r4
   23246:	f7ff fe1d 	bl	22e84 <z_ready_thread>
	__asm__ volatile(
   2324a:	f04f 0320 	mov.w	r3, #32
   2324e:	f3ef 8011 	mrs	r0, BASEPRI
   23252:	f383 8811 	msr	BASEPRI, r3
   23256:	f3bf 8f6f 	isb	sy
		z_reschedule_unlocked();
	}
}
   2325a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   2325e:	f7ff bdd4 	b.w	22e0a <z_reschedule_irqlock>
   23262:	bd10      	pop	{r4, pc}

00023264 <clear_event_registrations>:
	while (num_events--) {
   23264:	2314      	movs	r3, #20
{
   23266:	b530      	push	{r4, r5, lr}
   23268:	fb03 0101 	mla	r1, r3, r1, r0
	event->poller = NULL;
   2326c:	2400      	movs	r4, #0
	while (num_events--) {
   2326e:	4281      	cmp	r1, r0
   23270:	d100      	bne.n	23274 <clear_event_registrations+0x10>
}
   23272:	bd30      	pop	{r4, r5, pc}
	switch (event->type) {
   23274:	f811 3c07 	ldrb.w	r3, [r1, #-7]
	event->poller = NULL;
   23278:	f841 4c0c 	str.w	r4, [r1, #-12]
	switch (event->type) {
   2327c:	f003 030f 	and.w	r3, r3, #15
   23280:	2b02      	cmp	r3, #2
   23282:	d80a      	bhi.n	2329a <clear_event_registrations+0x36>
   23284:	b15b      	cbz	r3, 2329e <clear_event_registrations+0x3a>
	if (remove && sys_dnode_is_linked(&event->_node)) {
   23286:	f851 3c14 	ldr.w	r3, [r1, #-20]
   2328a:	b143      	cbz	r3, 2329e <clear_event_registrations+0x3a>
	node->prev->next = node->next;
   2328c:	f851 5c10 	ldr.w	r5, [r1, #-16]
   23290:	602b      	str	r3, [r5, #0]
	node->next->prev = node->prev;
   23292:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   23294:	e941 4405 	strd	r4, r4, [r1, #-20]
}
   23298:	e001      	b.n	2329e <clear_event_registrations+0x3a>
	switch (event->type) {
   2329a:	2b04      	cmp	r3, #4
   2329c:	d0f3      	beq.n	23286 <clear_event_registrations+0x22>
	__asm__ volatile(
   2329e:	f382 8811 	msr	BASEPRI, r2
   232a2:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   232a6:	f04f 0320 	mov.w	r3, #32
   232aa:	f3ef 8211 	mrs	r2, BASEPRI
   232ae:	f383 8811 	msr	BASEPRI, r3
   232b2:	f3bf 8f6f 	isb	sy
   232b6:	3914      	subs	r1, #20
   232b8:	e7d9      	b.n	2326e <clear_event_registrations+0xa>

000232ba <signal_poll_event>:
{
   232ba:	b570      	push	{r4, r5, r6, lr}
	struct _poller *poller = event->poller;
   232bc:	6884      	ldr	r4, [r0, #8]
{
   232be:	4605      	mov	r5, r0
   232c0:	460e      	mov	r6, r1
	if (poller) {
   232c2:	b19c      	cbz	r4, 232ec <signal_poll_event+0x32>
		if (poller->cb != NULL) {
   232c4:	68a3      	ldr	r3, [r4, #8]
   232c6:	b95b      	cbnz	r3, 232e0 <signal_poll_event+0x26>
		poller->is_polling = false;
   232c8:	7023      	strb	r3, [r4, #0]
	int retcode = 0;
   232ca:	4618      	mov	r0, r3
	event->poller = NULL;
   232cc:	2300      	movs	r3, #0
   232ce:	60ab      	str	r3, [r5, #8]
	event->state |= state;
   232d0:	68eb      	ldr	r3, [r5, #12]
   232d2:	f3c3 3104 	ubfx	r1, r3, #12, #5
   232d6:	430e      	orrs	r6, r1
   232d8:	f366 3310 	bfi	r3, r6, #12, #5
   232dc:	60eb      	str	r3, [r5, #12]
	return retcode;
   232de:	e004      	b.n	232ea <signal_poll_event+0x30>
			retcode = poller->cb(event, state);
   232e0:	4798      	blx	r3
		poller->is_polling = false;
   232e2:	2300      	movs	r3, #0
		if (retcode < 0) {
   232e4:	2800      	cmp	r0, #0
		poller->is_polling = false;
   232e6:	7023      	strb	r3, [r4, #0]
		if (retcode < 0) {
   232e8:	daf0      	bge.n	232cc <signal_poll_event+0x12>
}
   232ea:	bd70      	pop	{r4, r5, r6, pc}
	int retcode = 0;
   232ec:	4620      	mov	r0, r4
   232ee:	e7ed      	b.n	232cc <signal_poll_event+0x12>

000232f0 <k_poll_poller_cb>:
{
   232f0:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *thread = event->poller->thread;
   232f2:	6883      	ldr	r3, [r0, #8]
   232f4:	685c      	ldr	r4, [r3, #4]
	if (!z_is_thread_pending(thread)) {
   232f6:	7b63      	ldrb	r3, [r4, #13]
   232f8:	079a      	lsls	r2, r3, #30
{
   232fa:	460d      	mov	r5, r1
	if (!z_is_thread_pending(thread)) {
   232fc:	d515      	bpl.n	2332a <k_poll_poller_cb+0x3a>
	if (z_is_thread_timeout_expired(thread)) {
   232fe:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
   23302:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   23306:	f06f 0001 	mvn.w	r0, #1
   2330a:	428b      	cmp	r3, r1
   2330c:	bf08      	it	eq
   2330e:	4282      	cmpeq	r2, r0
   23310:	d014      	beq.n	2333c <k_poll_poller_cb+0x4c>
	z_unpend_thread(thread);
   23312:	4620      	mov	r0, r4
   23314:	f7ff fd8f 	bl	22e36 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   23318:	2d08      	cmp	r5, #8
   2331a:	bf0c      	ite	eq
   2331c:	f06f 0303 	mvneq.w	r3, #3
   23320:	2300      	movne	r3, #0
   23322:	67a3      	str	r3, [r4, #120]	; 0x78
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   23324:	7b63      	ldrb	r3, [r4, #13]
   23326:	06db      	lsls	r3, r3, #27
   23328:	d001      	beq.n	2332e <k_poll_poller_cb+0x3e>
		return 0;
   2332a:	2000      	movs	r0, #0
}
   2332c:	bd38      	pop	{r3, r4, r5, pc}
	if (!z_is_thread_ready(thread)) {
   2332e:	69a5      	ldr	r5, [r4, #24]
   23330:	2d00      	cmp	r5, #0
   23332:	d1fa      	bne.n	2332a <k_poll_poller_cb+0x3a>
	z_ready_thread(thread);
   23334:	4620      	mov	r0, r4
   23336:	f7ff fda5 	bl	22e84 <z_ready_thread>
	return 0;
   2333a:	e7f6      	b.n	2332a <k_poll_poller_cb+0x3a>
		return -EAGAIN;
   2333c:	f06f 000a 	mvn.w	r0, #10
   23340:	e7f4      	b.n	2332c <k_poll_poller_cb+0x3c>

00023342 <add_event>:
{
   23342:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23344:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   23346:	e9d0 2300 	ldrd	r2, r3, [r0]
   2334a:	4290      	cmp	r0, r2
   2334c:	4604      	mov	r4, r0
   2334e:	460d      	mov	r5, r1
   23350:	d106      	bne.n	23360 <add_event+0x1e>
	node->prev = list->tail;
   23352:	6863      	ldr	r3, [r4, #4]
   23354:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   23356:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   23358:	602c      	str	r4, [r5, #0]
	list->tail->next = node;
   2335a:	601d      	str	r5, [r3, #0]
	list->tail = node;
   2335c:	6065      	str	r5, [r4, #4]
}
   2335e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   23360:	2b00      	cmp	r3, #0
   23362:	d0f6      	beq.n	23352 <add_event+0x10>
		z_is_t1_higher_prio_than_t2(pending->poller->thread,
   23364:	689b      	ldr	r3, [r3, #8]
   23366:	6879      	ldr	r1, [r7, #4]
   23368:	6858      	ldr	r0, [r3, #4]
   2336a:	f7ff fd11 	bl	22d90 <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   2336e:	2800      	cmp	r0, #0
   23370:	d1ef      	bne.n	23352 <add_event+0x10>
	return list->head == list;
   23372:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23374:	42b4      	cmp	r4, r6
   23376:	d0ec      	beq.n	23352 <add_event+0x10>
   23378:	2e00      	cmp	r6, #0
   2337a:	bf38      	it	cc
   2337c:	2600      	movcc	r6, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2337e:	2e00      	cmp	r6, #0
   23380:	d0e7      	beq.n	23352 <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller->thread,
   23382:	68b3      	ldr	r3, [r6, #8]
   23384:	6878      	ldr	r0, [r7, #4]
   23386:	6859      	ldr	r1, [r3, #4]
   23388:	f7ff fd02 	bl	22d90 <z_is_t1_higher_prio_than_t2>
   2338c:	b128      	cbz	r0, 2339a <add_event+0x58>
	node->prev = successor->prev;
   2338e:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   23390:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   23394:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   23396:	6075      	str	r5, [r6, #4]
			return;
   23398:	e7e1      	b.n	2335e <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   2339a:	6863      	ldr	r3, [r4, #4]
   2339c:	42b3      	cmp	r3, r6
   2339e:	d0d8      	beq.n	23352 <add_event+0x10>
   233a0:	6836      	ldr	r6, [r6, #0]
   233a2:	e7ec      	b.n	2337e <add_event+0x3c>

000233a4 <register_events>:
{
   233a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   233a8:	f04f 0a00 	mov.w	sl, #0
{
   233ac:	460e      	mov	r6, r1
   233ae:	4614      	mov	r4, r2
   233b0:	461f      	mov	r7, r3
   233b2:	4683      	mov	fp, r0
	int events_registered = 0;
   233b4:	4655      	mov	r5, sl
	event->poller = NULL;
   233b6:	46d0      	mov	r8, sl
	for (int ii = 0; ii < num_events; ii++) {
   233b8:	45b2      	cmp	sl, r6
   233ba:	db02      	blt.n	233c2 <register_events+0x1e>
}
   233bc:	4628      	mov	r0, r5
   233be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   233c2:	f04f 0320 	mov.w	r3, #32
   233c6:	f3ef 8911 	mrs	r9, BASEPRI
   233ca:	f383 8811 	msr	BASEPRI, r3
   233ce:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   233d2:	f89b 200d 	ldrb.w	r2, [fp, #13]
   233d6:	f002 020f 	and.w	r2, r2, #15
   233da:	2a02      	cmp	r2, #2
   233dc:	d006      	beq.n	233ec <register_events+0x48>
   233de:	2a04      	cmp	r2, #4
   233e0:	d008      	beq.n	233f4 <register_events+0x50>
   233e2:	2a01      	cmp	r2, #1
   233e4:	d120      	bne.n	23428 <register_events+0x84>
		if (event->signal->signaled != 0U) {
   233e6:	f8db 3010 	ldr.w	r3, [fp, #16]
   233ea:	e001      	b.n	233f0 <register_events+0x4c>
		if (k_sem_count_get(event->sem) > 0) {
   233ec:	f8db 3010 	ldr.w	r3, [fp, #16]
		if (event->signal->signaled != 0U) {
   233f0:	689b      	ldr	r3, [r3, #8]
   233f2:	e002      	b.n	233fa <register_events+0x56>
		if (!k_queue_is_empty(event->queue)) {
   233f4:	f8db 3010 	ldr.w	r3, [fp, #16]
   233f8:	681b      	ldr	r3, [r3, #0]
		if (event->signal->signaled != 0U) {
   233fa:	b1ab      	cbz	r3, 23428 <register_events+0x84>
	event->state |= state;
   233fc:	f8db 300c 	ldr.w	r3, [fp, #12]
	event->poller = NULL;
   23400:	f8cb 8008 	str.w	r8, [fp, #8]
	event->state |= state;
   23404:	f3c3 3104 	ubfx	r1, r3, #12, #5
   23408:	430a      	orrs	r2, r1
   2340a:	f362 3310 	bfi	r3, r2, #12, #5
   2340e:	f8cb 300c 	str.w	r3, [fp, #12]
			poller->is_polling = false;
   23412:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   23416:	f389 8811 	msr	BASEPRI, r9
   2341a:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   2341e:	f10a 0a01 	add.w	sl, sl, #1
   23422:	f10b 0b14 	add.w	fp, fp, #20
   23426:	e7c7      	b.n	233b8 <register_events+0x14>
		} else if (!just_check && poller->is_polling) {
   23428:	2f00      	cmp	r7, #0
   2342a:	d1f4      	bne.n	23416 <register_events+0x72>
   2342c:	7823      	ldrb	r3, [r4, #0]
   2342e:	2b00      	cmp	r3, #0
   23430:	d0f1      	beq.n	23416 <register_events+0x72>
	switch (event->type) {
   23432:	f89b 300d 	ldrb.w	r3, [fp, #13]
   23436:	f003 030f 	and.w	r3, r3, #15
   2343a:	2b02      	cmp	r3, #2
   2343c:	d008      	beq.n	23450 <register_events+0xac>
   2343e:	2b04      	cmp	r3, #4
   23440:	d006      	beq.n	23450 <register_events+0xac>
   23442:	2b01      	cmp	r3, #1
   23444:	d10b      	bne.n	2345e <register_events+0xba>
		add_event(&event->signal->poll_events, event, poller);
   23446:	f8db 0010 	ldr.w	r0, [fp, #16]
   2344a:	4622      	mov	r2, r4
   2344c:	4659      	mov	r1, fp
   2344e:	e004      	b.n	2345a <register_events+0xb6>
		add_event(&event->queue->poll_events, event, poller);
   23450:	f8db 0010 	ldr.w	r0, [fp, #16]
   23454:	4622      	mov	r2, r4
   23456:	4659      	mov	r1, fp
   23458:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
   2345a:	f7ff ff72 	bl	23342 <add_event>
	event->poller = poller;
   2345e:	f8cb 4008 	str.w	r4, [fp, #8]
				events_registered += 1;
   23462:	3501      	adds	r5, #1
   23464:	e7d7      	b.n	23416 <register_events+0x72>

00023466 <k_poll_event_init>:
{
   23466:	b510      	push	{r4, lr}
	event->type = type;
   23468:	0452      	lsls	r2, r2, #17
   2346a:	0209      	lsls	r1, r1, #8
   2346c:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
   23470:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
   23474:	430a      	orrs	r2, r1
   23476:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   23478:	2400      	movs	r4, #0
	event->type = type;
   2347a:	430a      	orrs	r2, r1
	event->obj = obj;
   2347c:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
   23480:	6084      	str	r4, [r0, #8]
}
   23482:	bd10      	pop	{r4, pc}

00023484 <z_handle_obj_poll_events>:
{
   23484:	4603      	mov	r3, r0
	return list->head == list;
   23486:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   23488:	4283      	cmp	r3, r0
   2348a:	d008      	beq.n	2349e <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   2348c:	e9d0 3200 	ldrd	r3, r2, [r0]
   23490:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   23492:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   23494:	2300      	movs	r3, #0
	node->prev = NULL;
   23496:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   2349a:	f7ff bf0e 	b.w	232ba <signal_poll_event>
}
   2349e:	4770      	bx	lr

000234a0 <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
   234a0:	4770      	bx	lr
