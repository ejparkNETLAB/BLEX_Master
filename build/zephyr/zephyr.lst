
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
}

static uint8_t discovery_callback(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr,
			       struct bt_gatt_discover_params *params)
{
   0:	2000c890 	.word	0x2000c890
	} else {
	}
	bool flag_ej = false;
	int i;
	for(i = 0; i <CONFIG_BT_MAX_CONN && flag_ej == false;)
		if (conn == bt_gatt_dm_inst[i].conn) {
   4:	000076fd 	.word	0x000076fd
{
   8:	0001fde9 	.word	0x0001fde9
		if (conn == bt_gatt_dm_inst[i].conn) {
   c:	00007739 	.word	0x00007739
  10:	00007739 	.word	0x00007739
  14:	00007739 	.word	0x00007739
  18:	00007739 	.word	0x00007739
	...
		discovery_complete(dm);
  2c:	00007481 	.word	0x00007481
	for(i = 0; i <CONFIG_BT_MAX_CONN && flag_ej == false;)
  30:	00007739 	.word	0x00007739
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
  34:	00000000 	.word	0x00000000
			flag_ej = true;
		}
		else i ++;
	if(!flag_ej){
		LOG_ERR("Unexpected conn object. Aborting.");
  38:	00007439 	.word	0x00007439
  3c:	0001ec39 	.word	0x0001ec39

00000040 <_irq_vector_table>:
  40:	000076bd 000192e1 000076bd 000076bd     .v.......v...v..

		return BT_GATT_ITER_STOP;
	}
	switch (params->type) {
  50:	000076bd 000076bd 000076bd 000076bd     .v...v...v...v..
  60:	000076bd 000076bd 000076bd 000076bd     .v...v...v...v..
		if (dm->cur_attr_id > 1) {
  70:	000076bd 000076bd 000076bd 000076bd     .v...v...v...v..
			int err = bt_gatt_discover(dm->conn,
  80:	000076bd 000076bd 000076bd 000076bd     .v...v...v...v..
			if (err) {
  90:	000076bd 000076bd 000076bd 000076bd     .v...v...v...v..
				LOG_ERR("Characteristic discover failed,"
  a0:	000076bd 000076bd 000076bd 000076bd     .v...v...v...v..
		attr_store(dm, attr, sizeof(*service_val));
  b0:	000076bd 000076bd 000076bd 000076bd     .v...v...v...v..
		LOG_ERR("Not enough memory for service attribute.");
  c0:	000076bd 000076bd 000076bd 000076bd     .v...v...v...v..
		discovery_complete_error(dm, -ENOMEM);
  d0:	000076bd 000076bd 000076bd 000076bd     .v...v...v...v..
		bt_gatt_dm_attr_service_val(cur_attr);
  e0:	000076bd 000076bd 000076bd 000076bd     .v...v...v...v..
	cur_service_val->uuid = uuid_store(dm, cur_service_val->uuid);
  f0:	000076bd 000076bd 000076bd 000076bd     .v...v...v...v..

Disassembly of section text:

00000100 <__aeabi_drsub>:
		LOG_ERR("Not enough memory for service attribute data.");
     100:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     104:	e002      	b.n	10c <__adddf3>
     106:	bf00      	nop

00000108 <__aeabi_dsub>:
     108:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000010c <__adddf3>:
     10c:	b530      	push	{r4, r5, lr}
     10e:	ea4f 0441 	mov.w	r4, r1, lsl #1
		discovery_complete_error(dm, -ENOMEM);
     112:	ea4f 0543 	mov.w	r5, r3, lsl #1
		discovery_complete_error(dm, -ENOMEM);
     116:	ea94 0f05 	teq	r4, r5
		return BT_GATT_ITER_STOP;
     11a:	bf08      	it	eq
	dm->discover_params.type         = BT_GATT_DISCOVER_ATTRIBUTE;
     11c:	ea90 0f02 	teqeq	r0, r2
	dm->discover_params.uuid         = NULL;
     120:	bf1f      	itttt	ne
	dm->discover_params.type         = BT_GATT_DISCOVER_ATTRIBUTE;
     122:	ea54 0c00 	orrsne.w	ip, r4, r0
	err = bt_gatt_discover(dm->conn, &(dm->discover_params));
     126:	ea55 0c02 	orrsne.w	ip, r5, r2
	dm->discover_params.start_handle = cur_attr->handle + 1;//here
     12a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
	err = bt_gatt_discover(dm->conn, &(dm->discover_params));
     12e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
	dm->discover_params.end_handle   = cur_service_val->end_handle;
     132:	f000 80e2 	beq.w	2fa <CONFIG_UART_MUX_RX_STACK_SIZE+0xfa>
     136:	ea4f 5454 	mov.w	r4, r4, lsr #21
	err = bt_gatt_discover(dm->conn, &(dm->discover_params));
     13a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
	if (err) {
     13e:	bfb8      	it	lt
     140:	426d      	neglt	r5, r5
     142:	dd0c      	ble.n	15e <CONFIG_IDLE_STACK_SIZE+0x1e>
     144:	442c      	add	r4, r5
     146:	ea80 0202 	eor.w	r2, r0, r2
     14a:	ea81 0303 	eor.w	r3, r1, r3
		LOG_ERR("Descriptor discover failed, error: %d.", err);
     14e:	ea82 0000 	eor.w	r0, r2, r0
     152:	ea83 0101 	eor.w	r1, r3, r1
     156:	ea80 0202 	eor.w	r2, r0, r2
			discovery_complete(dm);
     15a:	ea81 0303 	eor.w	r3, r1, r3
		discovery_complete(dm);
     15e:	2d36      	cmp	r5, #54	; 0x36
		return BT_GATT_ITER_STOP;
     160:	bf88      	it	hi
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
     162:	bd30      	pophi	{r4, r5, pc}
     164:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     168:	ea4f 3101 	mov.w	r1, r1, lsl #12
     16c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     170:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     174:	d002      	beq.n	17c <CONFIG_IDLE_STACK_SIZE+0x3c>
     176:	4240      	negs	r0, r0
     178:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
		cur_attr = attr_store(dm, attr, 0);
     17c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     180:	ea4f 3303 	mov.w	r3, r3, lsl #12
     184:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
	return BT_GATT_ITER_CONTINUE;
     188:	d002      	beq.n	190 <CONFIG_IDLE_STACK_SIZE+0x50>
		__ASSERT(false, "Unknown param type.");
		break;
	}

	return BT_GATT_ITER_STOP;
}
     18a:	4252      	negs	r2, r2
     18c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     190:	ea94 0f05 	teq	r4, r5
		cur_attr = attr_store(dm, attr, 0);
     194:	f000 80a7 	beq.w	2e6 <CONFIG_UART_MUX_RX_STACK_SIZE+0xe6>
     198:	f1a4 0401 	sub.w	r4, r4, #1
		LOG_ERR("Not enough memory for next attribute descriptor"
     19c:	f1d5 0e20 	rsbs	lr, r5, #32
     1a0:	db0d      	blt.n	1be <CONFIG_IDLE_STACK_SIZE+0x7e>
     1a2:	fa02 fc0e 	lsl.w	ip, r2, lr
     1a6:	fa22 f205 	lsr.w	r2, r2, r5
	cur_attr = attr_find_by_handle(dm, attr->handle);
     1aa:	1880      	adds	r0, r0, r2
     1ac:	f141 0100 	adc.w	r1, r1, #0
     1b0:	fa03 f20e 	lsl.w	r2, r3, lr
	if (!cur_attr) {
     1b4:	1880      	adds	r0, r0, r2
		discovery_complete_error(dm, -ESRCH);
     1b6:	fa43 f305 	asr.w	r3, r3, r5
		discovery_complete_error(dm, -ENOMEM);
     1ba:	4159      	adcs	r1, r3
     1bc:	e00e      	b.n	1dc <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x1c>
	gatt_chrc = attr->user_data;
     1be:	f1a5 0520 	sub.w	r5, r5, #32
	cur_gatt_chrc = bt_gatt_dm_attr_chrc_val(cur_attr);
     1c2:	f10e 0e20 	add.w	lr, lr, #32
	memcpy(cur_gatt_chrc, gatt_chrc, sizeof(*cur_gatt_chrc));
     1c6:	2a01      	cmp	r2, #1
     1c8:	fa03 fc0e 	lsl.w	ip, r3, lr
     1cc:	bf28      	it	cs
	cur_gatt_chrc->uuid = uuid_store(dm, cur_gatt_chrc->uuid);
     1ce:	f04c 0c02 	orrcs.w	ip, ip, #2
     1d2:	fa43 f305 	asr.w	r3, r3, r5
     1d6:	18c0      	adds	r0, r0, r3
     1d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
	if (!cur_gatt_chrc->uuid) {
     1dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
		discovery_complete_error(dm, -ENOMEM);
     1e0:	d507      	bpl.n	1f2 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x32>
     1e2:	f04f 0e00 	mov.w	lr, #0
     1e6:	f1dc 0c00 	rsbs	ip, ip, #0
     1ea:	eb7e 0000 	sbcs.w	r0, lr, r0
     1ee:	eb6e 0101 	sbc.w	r1, lr, r1
     1f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     1f6:	d31b      	bcc.n	230 <CONFIG_UART_MUX_RX_STACK_SIZE+0x30>
     1f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     1fc:	d30c      	bcc.n	218 <CONFIG_UART_MUX_RX_STACK_SIZE+0x18>
     1fe:	0849      	lsrs	r1, r1, #1
     200:	ea5f 0030 	movs.w	r0, r0, rrx
     204:	ea4f 0c3c 	mov.w	ip, ip, rrx
     208:	f104 0401 	add.w	r4, r4, #1
     20c:	ea4f 5244 	mov.w	r2, r4, lsl #21
     210:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     214:	f080 809a 	bcs.w	34c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x4c>
     218:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     21c:	bf08      	it	eq
     21e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     222:	f150 0000 	adcs.w	r0, r0, #0
     226:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     22a:	ea41 0105 	orr.w	r1, r1, r5
     22e:	bd30      	pop	{r4, r5, pc}
     230:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     234:	4140      	adcs	r0, r0
     236:	eb41 0101 	adc.w	r1, r1, r1
     23a:	3c01      	subs	r4, #1
     23c:	bf28      	it	cs
     23e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     242:	d2e9      	bcs.n	218 <CONFIG_UART_MUX_RX_STACK_SIZE+0x18>
     244:	f091 0f00 	teq	r1, #0
     248:	bf04      	itt	eq
     24a:	4601      	moveq	r1, r0
     24c:	2000      	moveq	r0, #0
     24e:	fab1 f381 	clz	r3, r1
     252:	bf08      	it	eq
     254:	3320      	addeq	r3, #32
     256:	f1a3 030b 	sub.w	r3, r3, #11
     25a:	f1b3 0220 	subs.w	r2, r3, #32
     25e:	da0c      	bge.n	27a <CONFIG_UART_MUX_RX_STACK_SIZE+0x7a>
     260:	320c      	adds	r2, #12
     262:	dd08      	ble.n	276 <CONFIG_UART_MUX_RX_STACK_SIZE+0x76>
     264:	f102 0c14 	add.w	ip, r2, #20
     268:	f1c2 020c 	rsb	r2, r2, #12
     26c:	fa01 f00c 	lsl.w	r0, r1, ip
     270:	fa21 f102 	lsr.w	r1, r1, r2
     274:	e00c      	b.n	290 <CONFIG_UART_MUX_RX_STACK_SIZE+0x90>
     276:	f102 0214 	add.w	r2, r2, #20
     27a:	bfd8      	it	le
     27c:	f1c2 0c20 	rsble	ip, r2, #32
     280:	fa01 f102 	lsl.w	r1, r1, r2
     284:	fa20 fc0c 	lsr.w	ip, r0, ip
     288:	bfdc      	itt	le
     28a:	ea41 010c 	orrle.w	r1, r1, ip
     28e:	4090      	lslle	r0, r2
     290:	1ae4      	subs	r4, r4, r3
     292:	bfa2      	ittt	ge
     294:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     298:	4329      	orrge	r1, r5
     29a:	bd30      	popge	{r4, r5, pc}
     29c:	ea6f 0404 	mvn.w	r4, r4
     2a0:	3c1f      	subs	r4, #31
     2a2:	da1c      	bge.n	2de <CONFIG_UART_MUX_RX_STACK_SIZE+0xde>
     2a4:	340c      	adds	r4, #12
     2a6:	dc0e      	bgt.n	2c6 <CONFIG_UART_MUX_RX_STACK_SIZE+0xc6>
     2a8:	f104 0414 	add.w	r4, r4, #20
     2ac:	f1c4 0220 	rsb	r2, r4, #32
     2b0:	fa20 f004 	lsr.w	r0, r0, r4
     2b4:	fa01 f302 	lsl.w	r3, r1, r2
     2b8:	ea40 0003 	orr.w	r0, r0, r3
     2bc:	fa21 f304 	lsr.w	r3, r1, r4
     2c0:	ea45 0103 	orr.w	r1, r5, r3
     2c4:	bd30      	pop	{r4, r5, pc}
     2c6:	f1c4 040c 	rsb	r4, r4, #12
     2ca:	f1c4 0220 	rsb	r2, r4, #32
     2ce:	fa20 f002 	lsr.w	r0, r0, r2
     2d2:	fa01 f304 	lsl.w	r3, r1, r4
     2d6:	ea40 0003 	orr.w	r0, r0, r3
     2da:	4629      	mov	r1, r5
     2dc:	bd30      	pop	{r4, r5, pc}
     2de:	fa21 f004 	lsr.w	r0, r1, r4
     2e2:	4629      	mov	r1, r5
     2e4:	bd30      	pop	{r4, r5, pc}
     2e6:	f094 0f00 	teq	r4, #0
     2ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     2ee:	bf06      	itte	eq
     2f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     2f4:	3401      	addeq	r4, #1
     2f6:	3d01      	subne	r5, #1
     2f8:	e74e      	b.n	198 <CONFIG_IDLE_STACK_SIZE+0x58>
     2fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     2fe:	bf18      	it	ne
     300:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     304:	d029      	beq.n	35a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x5a>
     306:	ea94 0f05 	teq	r4, r5
     30a:	bf08      	it	eq
     30c:	ea90 0f02 	teqeq	r0, r2
     310:	d005      	beq.n	31e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x1e>
     312:	ea54 0c00 	orrs.w	ip, r4, r0
     316:	bf04      	itt	eq
     318:	4619      	moveq	r1, r3
     31a:	4610      	moveq	r0, r2
     31c:	bd30      	pop	{r4, r5, pc}
     31e:	ea91 0f03 	teq	r1, r3
     322:	bf1e      	ittt	ne
     324:	2100      	movne	r1, #0
     326:	2000      	movne	r0, #0
     328:	bd30      	popne	{r4, r5, pc}
     32a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     32e:	d105      	bne.n	33c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x3c>
     330:	0040      	lsls	r0, r0, #1
     332:	4149      	adcs	r1, r1
     334:	bf28      	it	cs
     336:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     33a:	bd30      	pop	{r4, r5, pc}
     33c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     340:	bf3c      	itt	cc
     342:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     346:	bd30      	popcc	{r4, r5, pc}
     348:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     34c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     350:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     354:	f04f 0000 	mov.w	r0, #0
     358:	bd30      	pop	{r4, r5, pc}
     35a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     35e:	bf1a      	itte	ne
     360:	4619      	movne	r1, r3
     362:	4610      	movne	r0, r2
     364:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     368:	bf1c      	itt	ne
     36a:	460b      	movne	r3, r1
     36c:	4602      	movne	r2, r0
     36e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     372:	bf06      	itte	eq
     374:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     378:	ea91 0f03 	teqeq	r1, r3
     37c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     380:	bd30      	pop	{r4, r5, pc}
     382:	bf00      	nop

00000384 <__aeabi_ui2d>:
     384:	f090 0f00 	teq	r0, #0
     388:	bf04      	itt	eq
     38a:	2100      	moveq	r1, #0
     38c:	4770      	bxeq	lr
     38e:	b530      	push	{r4, r5, lr}
     390:	f44f 6480 	mov.w	r4, #1024	; 0x400
     394:	f104 0432 	add.w	r4, r4, #50	; 0x32
     398:	f04f 0500 	mov.w	r5, #0
     39c:	f04f 0100 	mov.w	r1, #0
     3a0:	e750      	b.n	244 <CONFIG_UART_MUX_RX_STACK_SIZE+0x44>
     3a2:	bf00      	nop

000003a4 <__aeabi_i2d>:
     3a4:	f090 0f00 	teq	r0, #0
     3a8:	bf04      	itt	eq
     3aa:	2100      	moveq	r1, #0
     3ac:	4770      	bxeq	lr
     3ae:	b530      	push	{r4, r5, lr}
     3b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
     3b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
     3b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     3bc:	bf48      	it	mi
     3be:	4240      	negmi	r0, r0
     3c0:	f04f 0100 	mov.w	r1, #0
     3c4:	e73e      	b.n	244 <CONFIG_UART_MUX_RX_STACK_SIZE+0x44>
     3c6:	bf00      	nop

000003c8 <__aeabi_f2d>:
     3c8:	0042      	lsls	r2, r0, #1
     3ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
     3ce:	ea4f 0131 	mov.w	r1, r1, rrx
     3d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
     3d6:	bf1f      	itttt	ne
     3d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     3dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     3e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     3e4:	4770      	bxne	lr
     3e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     3ea:	bf08      	it	eq
     3ec:	4770      	bxeq	lr
     3ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     3f2:	bf04      	itt	eq
     3f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     3f8:	4770      	bxeq	lr
     3fa:	b530      	push	{r4, r5, lr}
     3fc:	f44f 7460 	mov.w	r4, #896	; 0x380
     400:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     404:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     408:	e71c      	b.n	244 <CONFIG_UART_MUX_RX_STACK_SIZE+0x44>
     40a:	bf00      	nop

0000040c <__aeabi_ul2d>:
     40c:	ea50 0201 	orrs.w	r2, r0, r1
     410:	bf08      	it	eq
     412:	4770      	bxeq	lr
     414:	b530      	push	{r4, r5, lr}
     416:	f04f 0500 	mov.w	r5, #0
     41a:	e00a      	b.n	432 <__aeabi_l2d+0x16>

0000041c <__aeabi_l2d>:
     41c:	ea50 0201 	orrs.w	r2, r0, r1
     420:	bf08      	it	eq
     422:	4770      	bxeq	lr
     424:	b530      	push	{r4, r5, lr}
     426:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     42a:	d502      	bpl.n	432 <__aeabi_l2d+0x16>
     42c:	4240      	negs	r0, r0
     42e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     432:	f44f 6480 	mov.w	r4, #1024	; 0x400
     436:	f104 0432 	add.w	r4, r4, #50	; 0x32
     43a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     43e:	f43f aed8 	beq.w	1f2 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x32>
     442:	f04f 0203 	mov.w	r2, #3
     446:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     44a:	bf18      	it	ne
     44c:	3203      	addne	r2, #3
     44e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     452:	bf18      	it	ne
     454:	3203      	addne	r2, #3
     456:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     45a:	f1c2 0320 	rsb	r3, r2, #32
     45e:	fa00 fc03 	lsl.w	ip, r0, r3
     462:	fa20 f002 	lsr.w	r0, r0, r2
     466:	fa01 fe03 	lsl.w	lr, r1, r3
     46a:	ea40 000e 	orr.w	r0, r0, lr
     46e:	fa21 f102 	lsr.w	r1, r1, r2
     472:	4414      	add	r4, r2
     474:	e6bd      	b.n	1f2 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x32>
     476:	bf00      	nop

00000478 <__aeabi_dmul>:
     478:	b570      	push	{r4, r5, r6, lr}
     47a:	f04f 0cff 	mov.w	ip, #255	; 0xff
     47e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     482:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     486:	bf1d      	ittte	ne
     488:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     48c:	ea94 0f0c 	teqne	r4, ip
     490:	ea95 0f0c 	teqne	r5, ip
     494:	f000 f8de 	bleq	654 <CONFIG_BT_COMPANY_ID+0x63>
     498:	442c      	add	r4, r5
     49a:	ea81 0603 	eor.w	r6, r1, r3
     49e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     4a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     4a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     4aa:	bf18      	it	ne
     4ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     4b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     4b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     4b8:	d038      	beq.n	52c <__aeabi_dmul+0xb4>
     4ba:	fba0 ce02 	umull	ip, lr, r0, r2
     4be:	f04f 0500 	mov.w	r5, #0
     4c2:	fbe1 e502 	umlal	lr, r5, r1, r2
     4c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     4ca:	fbe0 e503 	umlal	lr, r5, r0, r3
     4ce:	f04f 0600 	mov.w	r6, #0
     4d2:	fbe1 5603 	umlal	r5, r6, r1, r3
     4d6:	f09c 0f00 	teq	ip, #0
     4da:	bf18      	it	ne
     4dc:	f04e 0e01 	orrne.w	lr, lr, #1
     4e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     4e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     4e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     4ec:	d204      	bcs.n	4f8 <__aeabi_dmul+0x80>
     4ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     4f2:	416d      	adcs	r5, r5
     4f4:	eb46 0606 	adc.w	r6, r6, r6
     4f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     4fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     500:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     504:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     508:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     50c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     510:	bf88      	it	hi
     512:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     516:	d81e      	bhi.n	556 <__aeabi_dmul+0xde>
     518:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     51c:	bf08      	it	eq
     51e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     522:	f150 0000 	adcs.w	r0, r0, #0
     526:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     52a:	bd70      	pop	{r4, r5, r6, pc}
     52c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     530:	ea46 0101 	orr.w	r1, r6, r1
     534:	ea40 0002 	orr.w	r0, r0, r2
     538:	ea81 0103 	eor.w	r1, r1, r3
     53c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     540:	bfc2      	ittt	gt
     542:	ebd4 050c 	rsbsgt	r5, r4, ip
     546:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     54a:	bd70      	popgt	{r4, r5, r6, pc}
     54c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     550:	f04f 0e00 	mov.w	lr, #0
     554:	3c01      	subs	r4, #1
     556:	f300 80ab 	bgt.w	6b0 <CONFIG_BT_COMPANY_ID+0xbf>
     55a:	f114 0f36 	cmn.w	r4, #54	; 0x36
     55e:	bfde      	ittt	le
     560:	2000      	movle	r0, #0
     562:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     566:	bd70      	pople	{r4, r5, r6, pc}
     568:	f1c4 0400 	rsb	r4, r4, #0
     56c:	3c20      	subs	r4, #32
     56e:	da35      	bge.n	5dc <__aeabi_dmul+0x164>
     570:	340c      	adds	r4, #12
     572:	dc1b      	bgt.n	5ac <__aeabi_dmul+0x134>
     574:	f104 0414 	add.w	r4, r4, #20
     578:	f1c4 0520 	rsb	r5, r4, #32
     57c:	fa00 f305 	lsl.w	r3, r0, r5
     580:	fa20 f004 	lsr.w	r0, r0, r4
     584:	fa01 f205 	lsl.w	r2, r1, r5
     588:	ea40 0002 	orr.w	r0, r0, r2
     58c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     590:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     594:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     598:	fa21 f604 	lsr.w	r6, r1, r4
     59c:	eb42 0106 	adc.w	r1, r2, r6
     5a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5a4:	bf08      	it	eq
     5a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5aa:	bd70      	pop	{r4, r5, r6, pc}
     5ac:	f1c4 040c 	rsb	r4, r4, #12
     5b0:	f1c4 0520 	rsb	r5, r4, #32
     5b4:	fa00 f304 	lsl.w	r3, r0, r4
     5b8:	fa20 f005 	lsr.w	r0, r0, r5
     5bc:	fa01 f204 	lsl.w	r2, r1, r4
     5c0:	ea40 0002 	orr.w	r0, r0, r2
     5c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     5cc:	f141 0100 	adc.w	r1, r1, #0
     5d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5d4:	bf08      	it	eq
     5d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5da:	bd70      	pop	{r4, r5, r6, pc}
     5dc:	f1c4 0520 	rsb	r5, r4, #32
     5e0:	fa00 f205 	lsl.w	r2, r0, r5
     5e4:	ea4e 0e02 	orr.w	lr, lr, r2
     5e8:	fa20 f304 	lsr.w	r3, r0, r4
     5ec:	fa01 f205 	lsl.w	r2, r1, r5
     5f0:	ea43 0302 	orr.w	r3, r3, r2
     5f4:	fa21 f004 	lsr.w	r0, r1, r4
     5f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5fc:	fa21 f204 	lsr.w	r2, r1, r4
     600:	ea20 0002 	bic.w	r0, r0, r2
     604:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     608:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     60c:	bf08      	it	eq
     60e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     612:	bd70      	pop	{r4, r5, r6, pc}
     614:	f094 0f00 	teq	r4, #0
     618:	d10f      	bne.n	63a <CONFIG_BT_COMPANY_ID+0x49>
     61a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     61e:	0040      	lsls	r0, r0, #1
     620:	eb41 0101 	adc.w	r1, r1, r1
     624:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     628:	bf08      	it	eq
     62a:	3c01      	subeq	r4, #1
     62c:	d0f7      	beq.n	61e <CONFIG_BT_COMPANY_ID+0x2d>
     62e:	ea41 0106 	orr.w	r1, r1, r6
     632:	f095 0f00 	teq	r5, #0
     636:	bf18      	it	ne
     638:	4770      	bxne	lr
     63a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     63e:	0052      	lsls	r2, r2, #1
     640:	eb43 0303 	adc.w	r3, r3, r3
     644:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     648:	bf08      	it	eq
     64a:	3d01      	subeq	r5, #1
     64c:	d0f7      	beq.n	63e <CONFIG_BT_COMPANY_ID+0x4d>
     64e:	ea43 0306 	orr.w	r3, r3, r6
     652:	4770      	bx	lr
     654:	ea94 0f0c 	teq	r4, ip
     658:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     65c:	bf18      	it	ne
     65e:	ea95 0f0c 	teqne	r5, ip
     662:	d00c      	beq.n	67e <CONFIG_BT_COMPANY_ID+0x8d>
     664:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     668:	bf18      	it	ne
     66a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     66e:	d1d1      	bne.n	614 <CONFIG_BT_COMPANY_ID+0x23>
     670:	ea81 0103 	eor.w	r1, r1, r3
     674:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     678:	f04f 0000 	mov.w	r0, #0
     67c:	bd70      	pop	{r4, r5, r6, pc}
     67e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     682:	bf06      	itte	eq
     684:	4610      	moveq	r0, r2
     686:	4619      	moveq	r1, r3
     688:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     68c:	d019      	beq.n	6c2 <CONFIG_BT_COMPANY_ID+0xd1>
     68e:	ea94 0f0c 	teq	r4, ip
     692:	d102      	bne.n	69a <CONFIG_BT_COMPANY_ID+0xa9>
     694:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     698:	d113      	bne.n	6c2 <CONFIG_BT_COMPANY_ID+0xd1>
     69a:	ea95 0f0c 	teq	r5, ip
     69e:	d105      	bne.n	6ac <CONFIG_BT_COMPANY_ID+0xbb>
     6a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     6a4:	bf1c      	itt	ne
     6a6:	4610      	movne	r0, r2
     6a8:	4619      	movne	r1, r3
     6aa:	d10a      	bne.n	6c2 <CONFIG_BT_COMPANY_ID+0xd1>
     6ac:	ea81 0103 	eor.w	r1, r1, r3
     6b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     6b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     6bc:	f04f 0000 	mov.w	r0, #0
     6c0:	bd70      	pop	{r4, r5, r6, pc}
     6c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     6ca:	bd70      	pop	{r4, r5, r6, pc}

000006cc <__aeabi_ddiv>:
     6cc:	b570      	push	{r4, r5, r6, lr}
     6ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
     6d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     6d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     6da:	bf1d      	ittte	ne
     6dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     6e0:	ea94 0f0c 	teqne	r4, ip
     6e4:	ea95 0f0c 	teqne	r5, ip
     6e8:	f000 f8a7 	bleq	83a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x3a>
     6ec:	eba4 0405 	sub.w	r4, r4, r5
     6f0:	ea81 0e03 	eor.w	lr, r1, r3
     6f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     6f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
     6fc:	f000 8088 	beq.w	810 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x10>
     700:	ea4f 3303 	mov.w	r3, r3, lsl #12
     704:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     708:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     70c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     710:	ea4f 2202 	mov.w	r2, r2, lsl #8
     714:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     718:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     71c:	ea4f 2600 	mov.w	r6, r0, lsl #8
     720:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     724:	429d      	cmp	r5, r3
     726:	bf08      	it	eq
     728:	4296      	cmpeq	r6, r2
     72a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     72e:	f504 7440 	add.w	r4, r4, #768	; 0x300
     732:	d202      	bcs.n	73a <__aeabi_ddiv+0x6e>
     734:	085b      	lsrs	r3, r3, #1
     736:	ea4f 0232 	mov.w	r2, r2, rrx
     73a:	1ab6      	subs	r6, r6, r2
     73c:	eb65 0503 	sbc.w	r5, r5, r3
     740:	085b      	lsrs	r3, r3, #1
     742:	ea4f 0232 	mov.w	r2, r2, rrx
     746:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     74a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     74e:	ebb6 0e02 	subs.w	lr, r6, r2
     752:	eb75 0e03 	sbcs.w	lr, r5, r3
     756:	bf22      	ittt	cs
     758:	1ab6      	subcs	r6, r6, r2
     75a:	4675      	movcs	r5, lr
     75c:	ea40 000c 	orrcs.w	r0, r0, ip
     760:	085b      	lsrs	r3, r3, #1
     762:	ea4f 0232 	mov.w	r2, r2, rrx
     766:	ebb6 0e02 	subs.w	lr, r6, r2
     76a:	eb75 0e03 	sbcs.w	lr, r5, r3
     76e:	bf22      	ittt	cs
     770:	1ab6      	subcs	r6, r6, r2
     772:	4675      	movcs	r5, lr
     774:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     778:	085b      	lsrs	r3, r3, #1
     77a:	ea4f 0232 	mov.w	r2, r2, rrx
     77e:	ebb6 0e02 	subs.w	lr, r6, r2
     782:	eb75 0e03 	sbcs.w	lr, r5, r3
     786:	bf22      	ittt	cs
     788:	1ab6      	subcs	r6, r6, r2
     78a:	4675      	movcs	r5, lr
     78c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     790:	085b      	lsrs	r3, r3, #1
     792:	ea4f 0232 	mov.w	r2, r2, rrx
     796:	ebb6 0e02 	subs.w	lr, r6, r2
     79a:	eb75 0e03 	sbcs.w	lr, r5, r3
     79e:	bf22      	ittt	cs
     7a0:	1ab6      	subcs	r6, r6, r2
     7a2:	4675      	movcs	r5, lr
     7a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     7a8:	ea55 0e06 	orrs.w	lr, r5, r6
     7ac:	d018      	beq.n	7e0 <__aeabi_ddiv+0x114>
     7ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
     7b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     7b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
     7ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     7be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     7c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     7c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     7ca:	d1c0      	bne.n	74e <__aeabi_ddiv+0x82>
     7cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7d0:	d10b      	bne.n	7ea <__aeabi_ddiv+0x11e>
     7d2:	ea41 0100 	orr.w	r1, r1, r0
     7d6:	f04f 0000 	mov.w	r0, #0
     7da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     7de:	e7b6      	b.n	74e <__aeabi_ddiv+0x82>
     7e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7e4:	bf04      	itt	eq
     7e6:	4301      	orreq	r1, r0
     7e8:	2000      	moveq	r0, #0
     7ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     7ee:	bf88      	it	hi
     7f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     7f4:	f63f aeaf 	bhi.w	556 <__aeabi_dmul+0xde>
     7f8:	ebb5 0c03 	subs.w	ip, r5, r3
     7fc:	bf04      	itt	eq
     7fe:	ebb6 0c02 	subseq.w	ip, r6, r2
     802:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     806:	f150 0000 	adcs.w	r0, r0, #0
     80a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     80e:	bd70      	pop	{r4, r5, r6, pc}
     810:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     814:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     818:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     81c:	bfc2      	ittt	gt
     81e:	ebd4 050c 	rsbsgt	r5, r4, ip
     822:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     826:	bd70      	popgt	{r4, r5, r6, pc}
     828:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     82c:	f04f 0e00 	mov.w	lr, #0
     830:	3c01      	subs	r4, #1
     832:	e690      	b.n	556 <__aeabi_dmul+0xde>
     834:	ea45 0e06 	orr.w	lr, r5, r6
     838:	e68d      	b.n	556 <__aeabi_dmul+0xde>
     83a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     83e:	ea94 0f0c 	teq	r4, ip
     842:	bf08      	it	eq
     844:	ea95 0f0c 	teqeq	r5, ip
     848:	f43f af3b 	beq.w	6c2 <CONFIG_BT_COMPANY_ID+0xd1>
     84c:	ea94 0f0c 	teq	r4, ip
     850:	d10a      	bne.n	868 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x68>
     852:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     856:	f47f af34 	bne.w	6c2 <CONFIG_BT_COMPANY_ID+0xd1>
     85a:	ea95 0f0c 	teq	r5, ip
     85e:	f47f af25 	bne.w	6ac <CONFIG_BT_COMPANY_ID+0xbb>
     862:	4610      	mov	r0, r2
     864:	4619      	mov	r1, r3
     866:	e72c      	b.n	6c2 <CONFIG_BT_COMPANY_ID+0xd1>
     868:	ea95 0f0c 	teq	r5, ip
     86c:	d106      	bne.n	87c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x7c>
     86e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     872:	f43f aefd 	beq.w	670 <CONFIG_BT_COMPANY_ID+0x7f>
     876:	4610      	mov	r0, r2
     878:	4619      	mov	r1, r3
     87a:	e722      	b.n	6c2 <CONFIG_BT_COMPANY_ID+0xd1>
     87c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     880:	bf18      	it	ne
     882:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     886:	f47f aec5 	bne.w	614 <CONFIG_BT_COMPANY_ID+0x23>
     88a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     88e:	f47f af0d 	bne.w	6ac <CONFIG_BT_COMPANY_ID+0xbb>
     892:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     896:	f47f aeeb 	bne.w	670 <CONFIG_BT_COMPANY_ID+0x7f>
     89a:	e712      	b.n	6c2 <CONFIG_BT_COMPANY_ID+0xd1>

0000089c <__gedf2>:
     89c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
     8a0:	e006      	b.n	8b0 <__cmpdf2+0x4>
     8a2:	bf00      	nop

000008a4 <__ledf2>:
     8a4:	f04f 0c01 	mov.w	ip, #1
     8a8:	e002      	b.n	8b0 <__cmpdf2+0x4>
     8aa:	bf00      	nop

000008ac <__cmpdf2>:
     8ac:	f04f 0c01 	mov.w	ip, #1
     8b0:	f84d cd04 	str.w	ip, [sp, #-4]!
     8b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     8b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     8bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     8c0:	bf18      	it	ne
     8c2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
     8c6:	d01b      	beq.n	900 <__cmpdf2+0x54>
     8c8:	b001      	add	sp, #4
     8ca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
     8ce:	bf0c      	ite	eq
     8d0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
     8d4:	ea91 0f03 	teqne	r1, r3
     8d8:	bf02      	ittt	eq
     8da:	ea90 0f02 	teqeq	r0, r2
     8de:	2000      	moveq	r0, #0
     8e0:	4770      	bxeq	lr
     8e2:	f110 0f00 	cmn.w	r0, #0
     8e6:	ea91 0f03 	teq	r1, r3
     8ea:	bf58      	it	pl
     8ec:	4299      	cmppl	r1, r3
     8ee:	bf08      	it	eq
     8f0:	4290      	cmpeq	r0, r2
     8f2:	bf2c      	ite	cs
     8f4:	17d8      	asrcs	r0, r3, #31
     8f6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
     8fa:	f040 0001 	orr.w	r0, r0, #1
     8fe:	4770      	bx	lr
     900:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     908:	d102      	bne.n	910 <__cmpdf2+0x64>
     90a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     90e:	d107      	bne.n	920 <__cmpdf2+0x74>
     910:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     914:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     918:	d1d6      	bne.n	8c8 <__cmpdf2+0x1c>
     91a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     91e:	d0d3      	beq.n	8c8 <__cmpdf2+0x1c>
     920:	f85d 0b04 	ldr.w	r0, [sp], #4
     924:	4770      	bx	lr
     926:	bf00      	nop

00000928 <__aeabi_cdrcmple>:
     928:	4684      	mov	ip, r0
     92a:	4610      	mov	r0, r2
     92c:	4662      	mov	r2, ip
     92e:	468c      	mov	ip, r1
     930:	4619      	mov	r1, r3
     932:	4663      	mov	r3, ip
     934:	e000      	b.n	938 <__aeabi_cdcmpeq>
     936:	bf00      	nop

00000938 <__aeabi_cdcmpeq>:
     938:	b501      	push	{r0, lr}
     93a:	f7ff ffb7 	bl	8ac <__cmpdf2>
     93e:	2800      	cmp	r0, #0
     940:	bf48      	it	mi
     942:	f110 0f00 	cmnmi.w	r0, #0
     946:	bd01      	pop	{r0, pc}

00000948 <__aeabi_dcmpeq>:
     948:	f84d ed08 	str.w	lr, [sp, #-8]!
     94c:	f7ff fff4 	bl	938 <__aeabi_cdcmpeq>
     950:	bf0c      	ite	eq
     952:	2001      	moveq	r0, #1
     954:	2000      	movne	r0, #0
     956:	f85d fb08 	ldr.w	pc, [sp], #8
     95a:	bf00      	nop

0000095c <__aeabi_dcmplt>:
     95c:	f84d ed08 	str.w	lr, [sp, #-8]!
     960:	f7ff ffea 	bl	938 <__aeabi_cdcmpeq>
     964:	bf34      	ite	cc
     966:	2001      	movcc	r0, #1
     968:	2000      	movcs	r0, #0
     96a:	f85d fb08 	ldr.w	pc, [sp], #8
     96e:	bf00      	nop

00000970 <__aeabi_dcmple>:
     970:	f84d ed08 	str.w	lr, [sp, #-8]!
     974:	f7ff ffe0 	bl	938 <__aeabi_cdcmpeq>
     978:	bf94      	ite	ls
     97a:	2001      	movls	r0, #1
     97c:	2000      	movhi	r0, #0
     97e:	f85d fb08 	ldr.w	pc, [sp], #8
     982:	bf00      	nop

00000984 <__aeabi_dcmpge>:
     984:	f84d ed08 	str.w	lr, [sp, #-8]!
     988:	f7ff ffce 	bl	928 <__aeabi_cdrcmple>
     98c:	bf94      	ite	ls
     98e:	2001      	movls	r0, #1
     990:	2000      	movhi	r0, #0
     992:	f85d fb08 	ldr.w	pc, [sp], #8
     996:	bf00      	nop

00000998 <__aeabi_dcmpgt>:
     998:	f84d ed08 	str.w	lr, [sp, #-8]!
     99c:	f7ff ffc4 	bl	928 <__aeabi_cdrcmple>
     9a0:	bf34      	ite	cc
     9a2:	2001      	movcc	r0, #1
     9a4:	2000      	movcs	r0, #0
     9a6:	f85d fb08 	ldr.w	pc, [sp], #8
     9aa:	bf00      	nop

000009ac <__aeabi_d2iz>:
     9ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
     9b0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     9b4:	d215      	bcs.n	9e2 <__aeabi_d2iz+0x36>
     9b6:	d511      	bpl.n	9dc <__aeabi_d2iz+0x30>
     9b8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     9bc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     9c0:	d912      	bls.n	9e8 <__aeabi_d2iz+0x3c>
     9c2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     9c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     9ca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     9ce:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     9d2:	fa23 f002 	lsr.w	r0, r3, r2
     9d6:	bf18      	it	ne
     9d8:	4240      	negne	r0, r0
     9da:	4770      	bx	lr
     9dc:	f04f 0000 	mov.w	r0, #0
     9e0:	4770      	bx	lr
     9e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     9e6:	d105      	bne.n	9f4 <__aeabi_d2iz+0x48>
     9e8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
     9ec:	bf08      	it	eq
     9ee:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
     9f2:	4770      	bx	lr
     9f4:	f04f 0000 	mov.w	r0, #0
     9f8:	4770      	bx	lr
     9fa:	bf00      	nop

000009fc <__aeabi_d2uiz>:
     9fc:	004a      	lsls	r2, r1, #1
     9fe:	d211      	bcs.n	a24 <__aeabi_d2uiz+0x28>
     a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     a04:	d211      	bcs.n	a2a <__aeabi_d2uiz+0x2e>
     a06:	d50d      	bpl.n	a24 <__aeabi_d2uiz+0x28>
     a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     a10:	d40e      	bmi.n	a30 <__aeabi_d2uiz+0x34>
     a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     a1e:	fa23 f002 	lsr.w	r0, r3, r2
     a22:	4770      	bx	lr
     a24:	f04f 0000 	mov.w	r0, #0
     a28:	4770      	bx	lr
     a2a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     a2e:	d102      	bne.n	a36 <__aeabi_d2uiz+0x3a>
     a30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     a34:	4770      	bx	lr
     a36:	f04f 0000 	mov.w	r0, #0
     a3a:	4770      	bx	lr

00000a3c <__aeabi_uldivmod>:
     a3c:	b953      	cbnz	r3, a54 <__aeabi_uldivmod+0x18>
     a3e:	b94a      	cbnz	r2, a54 <__aeabi_uldivmod+0x18>
     a40:	2900      	cmp	r1, #0
     a42:	bf08      	it	eq
     a44:	2800      	cmpeq	r0, #0
     a46:	bf1c      	itt	ne
     a48:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     a4c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     a50:	f000 b96e 	b.w	d30 <__aeabi_idiv0>
     a54:	f1ad 0c08 	sub.w	ip, sp, #8
     a58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     a5c:	f000 f806 	bl	a6c <__udivmoddi4>
     a60:	f8dd e004 	ldr.w	lr, [sp, #4]
     a64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     a68:	b004      	add	sp, #16
     a6a:	4770      	bx	lr

00000a6c <__udivmoddi4>:
     a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     a70:	9d08      	ldr	r5, [sp, #32]
     a72:	460e      	mov	r6, r1
     a74:	4604      	mov	r4, r0
     a76:	468c      	mov	ip, r1
     a78:	2b00      	cmp	r3, #0
     a7a:	f040 8081 	bne.w	b80 <__udivmoddi4+0x114>
     a7e:	428a      	cmp	r2, r1
     a80:	4617      	mov	r7, r2
     a82:	d945      	bls.n	b10 <__udivmoddi4+0xa4>
     a84:	fab2 f282 	clz	r2, r2
     a88:	b14a      	cbz	r2, a9e <__udivmoddi4+0x32>
     a8a:	f1c2 0120 	rsb	r1, r2, #32
     a8e:	fa06 f302 	lsl.w	r3, r6, r2
     a92:	fa20 f101 	lsr.w	r1, r0, r1
     a96:	4097      	lsls	r7, r2
     a98:	ea41 0c03 	orr.w	ip, r1, r3
     a9c:	4094      	lsls	r4, r2
     a9e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     aa2:	0c23      	lsrs	r3, r4, #16
     aa4:	fbbc f6fe 	udiv	r6, ip, lr
     aa8:	b2b9      	uxth	r1, r7
     aaa:	fb0e cc16 	mls	ip, lr, r6, ip
     aae:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     ab2:	fb06 f001 	mul.w	r0, r6, r1
     ab6:	4298      	cmp	r0, r3
     ab8:	d909      	bls.n	ace <__udivmoddi4+0x62>
     aba:	18fb      	adds	r3, r7, r3
     abc:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
     ac0:	f080 8115 	bcs.w	cee <__udivmoddi4+0x282>
     ac4:	4298      	cmp	r0, r3
     ac6:	f240 8112 	bls.w	cee <__udivmoddi4+0x282>
     aca:	3e02      	subs	r6, #2
     acc:	443b      	add	r3, r7
     ace:	1a1b      	subs	r3, r3, r0
     ad0:	b2a4      	uxth	r4, r4
     ad2:	fbb3 f0fe 	udiv	r0, r3, lr
     ad6:	fb0e 3310 	mls	r3, lr, r0, r3
     ada:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     ade:	fb00 f101 	mul.w	r1, r0, r1
     ae2:	42a1      	cmp	r1, r4
     ae4:	d909      	bls.n	afa <__udivmoddi4+0x8e>
     ae6:	193c      	adds	r4, r7, r4
     ae8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     aec:	f080 8101 	bcs.w	cf2 <__udivmoddi4+0x286>
     af0:	42a1      	cmp	r1, r4
     af2:	f240 80fe 	bls.w	cf2 <__udivmoddi4+0x286>
     af6:	3802      	subs	r0, #2
     af8:	443c      	add	r4, r7
     afa:	1a64      	subs	r4, r4, r1
     afc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     b00:	2100      	movs	r1, #0
     b02:	b11d      	cbz	r5, b0c <__udivmoddi4+0xa0>
     b04:	40d4      	lsrs	r4, r2
     b06:	2300      	movs	r3, #0
     b08:	e9c5 4300 	strd	r4, r3, [r5]
     b0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     b10:	b902      	cbnz	r2, b14 <__udivmoddi4+0xa8>
     b12:	deff      	udf	#255	; 0xff
     b14:	fab2 f282 	clz	r2, r2
     b18:	2a00      	cmp	r2, #0
     b1a:	d14f      	bne.n	bbc <__udivmoddi4+0x150>
     b1c:	1bcb      	subs	r3, r1, r7
     b1e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     b22:	fa1f f887 	uxth.w	r8, r7
     b26:	2101      	movs	r1, #1
     b28:	fbb3 fcfe 	udiv	ip, r3, lr
     b2c:	0c26      	lsrs	r6, r4, #16
     b2e:	fb0e 331c 	mls	r3, lr, ip, r3
     b32:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
     b36:	fb08 f30c 	mul.w	r3, r8, ip
     b3a:	42b3      	cmp	r3, r6
     b3c:	d907      	bls.n	b4e <__udivmoddi4+0xe2>
     b3e:	19be      	adds	r6, r7, r6
     b40:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     b44:	d202      	bcs.n	b4c <__udivmoddi4+0xe0>
     b46:	42b3      	cmp	r3, r6
     b48:	f200 80eb 	bhi.w	d22 <__udivmoddi4+0x2b6>
     b4c:	4684      	mov	ip, r0
     b4e:	1af6      	subs	r6, r6, r3
     b50:	b2a3      	uxth	r3, r4
     b52:	fbb6 f0fe 	udiv	r0, r6, lr
     b56:	fb0e 6610 	mls	r6, lr, r0, r6
     b5a:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
     b5e:	fb08 f800 	mul.w	r8, r8, r0
     b62:	45a0      	cmp	r8, r4
     b64:	d907      	bls.n	b76 <__udivmoddi4+0x10a>
     b66:	193c      	adds	r4, r7, r4
     b68:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     b6c:	d202      	bcs.n	b74 <__udivmoddi4+0x108>
     b6e:	45a0      	cmp	r8, r4
     b70:	f200 80d2 	bhi.w	d18 <__udivmoddi4+0x2ac>
     b74:	4618      	mov	r0, r3
     b76:	eba4 0408 	sub.w	r4, r4, r8
     b7a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     b7e:	e7c0      	b.n	b02 <__udivmoddi4+0x96>
     b80:	428b      	cmp	r3, r1
     b82:	d908      	bls.n	b96 <__udivmoddi4+0x12a>
     b84:	2d00      	cmp	r5, #0
     b86:	f000 80af 	beq.w	ce8 <__udivmoddi4+0x27c>
     b8a:	2100      	movs	r1, #0
     b8c:	e9c5 0600 	strd	r0, r6, [r5]
     b90:	4608      	mov	r0, r1
     b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     b96:	fab3 f183 	clz	r1, r3
     b9a:	2900      	cmp	r1, #0
     b9c:	d149      	bne.n	c32 <__udivmoddi4+0x1c6>
     b9e:	42b3      	cmp	r3, r6
     ba0:	d302      	bcc.n	ba8 <__udivmoddi4+0x13c>
     ba2:	4282      	cmp	r2, r0
     ba4:	f200 80bb 	bhi.w	d1e <__udivmoddi4+0x2b2>
     ba8:	1a84      	subs	r4, r0, r2
     baa:	eb66 0303 	sbc.w	r3, r6, r3
     bae:	2001      	movs	r0, #1
     bb0:	469c      	mov	ip, r3
     bb2:	2d00      	cmp	r5, #0
     bb4:	d0aa      	beq.n	b0c <__udivmoddi4+0xa0>
     bb6:	e9c5 4c00 	strd	r4, ip, [r5]
     bba:	e7a7      	b.n	b0c <__udivmoddi4+0xa0>
     bbc:	f1c2 0320 	rsb	r3, r2, #32
     bc0:	4097      	lsls	r7, r2
     bc2:	40d8      	lsrs	r0, r3
     bc4:	4091      	lsls	r1, r2
     bc6:	40de      	lsrs	r6, r3
     bc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     bcc:	4308      	orrs	r0, r1
     bce:	ea4f 4c10 	mov.w	ip, r0, lsr #16
     bd2:	fbb6 f1fe 	udiv	r1, r6, lr
     bd6:	fa1f f887 	uxth.w	r8, r7
     bda:	fb0e 6611 	mls	r6, lr, r1, r6
     bde:	ea4c 4606 	orr.w	r6, ip, r6, lsl #16
     be2:	fb01 f308 	mul.w	r3, r1, r8
     be6:	42b3      	cmp	r3, r6
     be8:	fa04 f402 	lsl.w	r4, r4, r2
     bec:	d909      	bls.n	c02 <__udivmoddi4+0x196>
     bee:	19be      	adds	r6, r7, r6
     bf0:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
     bf4:	f080 808e 	bcs.w	d14 <__udivmoddi4+0x2a8>
     bf8:	42b3      	cmp	r3, r6
     bfa:	f240 808b 	bls.w	d14 <__udivmoddi4+0x2a8>
     bfe:	3902      	subs	r1, #2
     c00:	443e      	add	r6, r7
     c02:	1af3      	subs	r3, r6, r3
     c04:	b286      	uxth	r6, r0
     c06:	fbb3 f0fe 	udiv	r0, r3, lr
     c0a:	fb0e 3310 	mls	r3, lr, r0, r3
     c0e:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
     c12:	fb00 f308 	mul.w	r3, r0, r8
     c16:	42b3      	cmp	r3, r6
     c18:	d907      	bls.n	c2a <__udivmoddi4+0x1be>
     c1a:	19be      	adds	r6, r7, r6
     c1c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
     c20:	d274      	bcs.n	d0c <__udivmoddi4+0x2a0>
     c22:	42b3      	cmp	r3, r6
     c24:	d972      	bls.n	d0c <__udivmoddi4+0x2a0>
     c26:	3802      	subs	r0, #2
     c28:	443e      	add	r6, r7
     c2a:	1af3      	subs	r3, r6, r3
     c2c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     c30:	e77a      	b.n	b28 <__udivmoddi4+0xbc>
     c32:	f1c1 0720 	rsb	r7, r1, #32
     c36:	fa03 f401 	lsl.w	r4, r3, r1
     c3a:	fa22 f307 	lsr.w	r3, r2, r7
     c3e:	431c      	orrs	r4, r3
     c40:	fa20 f907 	lsr.w	r9, r0, r7
     c44:	fa06 f301 	lsl.w	r3, r6, r1
     c48:	ea4f 4c14 	mov.w	ip, r4, lsr #16
     c4c:	40fe      	lsrs	r6, r7
     c4e:	ea49 0903 	orr.w	r9, r9, r3
     c52:	ea4f 4319 	mov.w	r3, r9, lsr #16
     c56:	fbb6 fefc 	udiv	lr, r6, ip
     c5a:	fa1f f884 	uxth.w	r8, r4
     c5e:	fb0c 661e 	mls	r6, ip, lr, r6
     c62:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
     c66:	fb0e fa08 	mul.w	sl, lr, r8
     c6a:	45b2      	cmp	sl, r6
     c6c:	fa02 f201 	lsl.w	r2, r2, r1
     c70:	fa00 f301 	lsl.w	r3, r0, r1
     c74:	d908      	bls.n	c88 <__udivmoddi4+0x21c>
     c76:	19a6      	adds	r6, r4, r6
     c78:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
     c7c:	d248      	bcs.n	d10 <__udivmoddi4+0x2a4>
     c7e:	45b2      	cmp	sl, r6
     c80:	d946      	bls.n	d10 <__udivmoddi4+0x2a4>
     c82:	f1ae 0e02 	sub.w	lr, lr, #2
     c86:	4426      	add	r6, r4
     c88:	eba6 060a 	sub.w	r6, r6, sl
     c8c:	fa1f f989 	uxth.w	r9, r9
     c90:	fbb6 f0fc 	udiv	r0, r6, ip
     c94:	fb0c 6610 	mls	r6, ip, r0, r6
     c98:	ea49 4606 	orr.w	r6, r9, r6, lsl #16
     c9c:	fb00 f808 	mul.w	r8, r0, r8
     ca0:	45b0      	cmp	r8, r6
     ca2:	d907      	bls.n	cb4 <__udivmoddi4+0x248>
     ca4:	19a6      	adds	r6, r4, r6
     ca6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
     caa:	d22d      	bcs.n	d08 <__udivmoddi4+0x29c>
     cac:	45b0      	cmp	r8, r6
     cae:	d92b      	bls.n	d08 <__udivmoddi4+0x29c>
     cb0:	3802      	subs	r0, #2
     cb2:	4426      	add	r6, r4
     cb4:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     cb8:	eba6 0608 	sub.w	r6, r6, r8
     cbc:	fba0 8902 	umull	r8, r9, r0, r2
     cc0:	454e      	cmp	r6, r9
     cc2:	46c4      	mov	ip, r8
     cc4:	46ce      	mov	lr, r9
     cc6:	d318      	bcc.n	cfa <__udivmoddi4+0x28e>
     cc8:	d015      	beq.n	cf6 <__udivmoddi4+0x28a>
     cca:	b375      	cbz	r5, d2a <__udivmoddi4+0x2be>
     ccc:	ebb3 020c 	subs.w	r2, r3, ip
     cd0:	eb66 060e 	sbc.w	r6, r6, lr
     cd4:	fa06 f707 	lsl.w	r7, r6, r7
     cd8:	fa22 f301 	lsr.w	r3, r2, r1
     cdc:	40ce      	lsrs	r6, r1
     cde:	431f      	orrs	r7, r3
     ce0:	e9c5 7600 	strd	r7, r6, [r5]
     ce4:	2100      	movs	r1, #0
     ce6:	e711      	b.n	b0c <__udivmoddi4+0xa0>
     ce8:	4629      	mov	r1, r5
     cea:	4628      	mov	r0, r5
     cec:	e70e      	b.n	b0c <__udivmoddi4+0xa0>
     cee:	4666      	mov	r6, ip
     cf0:	e6ed      	b.n	ace <__udivmoddi4+0x62>
     cf2:	4618      	mov	r0, r3
     cf4:	e701      	b.n	afa <__udivmoddi4+0x8e>
     cf6:	4543      	cmp	r3, r8
     cf8:	d2e7      	bcs.n	cca <__udivmoddi4+0x25e>
     cfa:	ebb8 0c02 	subs.w	ip, r8, r2
     cfe:	eb69 0404 	sbc.w	r4, r9, r4
     d02:	3801      	subs	r0, #1
     d04:	46a6      	mov	lr, r4
     d06:	e7e0      	b.n	cca <__udivmoddi4+0x25e>
     d08:	4660      	mov	r0, ip
     d0a:	e7d3      	b.n	cb4 <__udivmoddi4+0x248>
     d0c:	4660      	mov	r0, ip
     d0e:	e78c      	b.n	c2a <__udivmoddi4+0x1be>
     d10:	4686      	mov	lr, r0
     d12:	e7b9      	b.n	c88 <__udivmoddi4+0x21c>
     d14:	4661      	mov	r1, ip
     d16:	e774      	b.n	c02 <__udivmoddi4+0x196>
     d18:	3802      	subs	r0, #2
     d1a:	443c      	add	r4, r7
     d1c:	e72b      	b.n	b76 <__udivmoddi4+0x10a>
     d1e:	4608      	mov	r0, r1
     d20:	e747      	b.n	bb2 <__udivmoddi4+0x146>
     d22:	f1ac 0c02 	sub.w	ip, ip, #2
     d26:	443e      	add	r6, r7
     d28:	e711      	b.n	b4e <__udivmoddi4+0xe2>
     d2a:	4629      	mov	r1, r5
     d2c:	e6ee      	b.n	b0c <__udivmoddi4+0xa0>
     d2e:	bf00      	nop

00000d30 <__aeabi_idiv0>:
     d30:	4770      	bx	lr
     d32:	bf00      	nop
     d34:	0000      	movs	r0, r0
	...

00000d38 <hci_init>:
	}
}
#endif /* CONFIG_BT_HCI_VS_EXT */

static int hci_init(void)
{
     d38:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
     d3a:	4d45      	ldr	r5, [pc, #276]	; (e50 <hci_init+0x118>)
     d3c:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
     d40:	6899      	ldr	r1, [r3, #8]
     d42:	f011 0101 	ands.w	r1, r1, #1
{
     d46:	b089      	sub	sp, #36	; 0x24
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
     d48:	d121      	bne.n	d8e <hci_init+0x56>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
     d4a:	aa03      	add	r2, sp, #12
     d4c:	f640 4003 	movw	r0, #3075	; 0xc03
     d50:	f007 ffd0 	bl	8cf4 <bt_hci_cmd_send_sync>
		if (err) {
     d54:	4604      	mov	r4, r0
     d56:	2800      	cmp	r0, #0
     d58:	d176      	bne.n	e48 <hci_init+0x110>
		hci_reset_complete(rsp);
     d5a:	9b03      	ldr	r3, [sp, #12]
	uint8_t status = buf->data[0];
     d5c:	689b      	ldr	r3, [r3, #8]
	if (status) {
     d5e:	781b      	ldrb	r3, [r3, #0]
     d60:	b993      	cbnz	r3, d88 <hci_init+0x50>
	scan_dev_found_cb = NULL;
     d62:	4a3c      	ldr	r2, [pc, #240]	; (e54 <hci_init+0x11c>)
     d64:	6013      	str	r3, [r2, #0]
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
     d66:	f105 0398 	add.w	r3, r5, #152	; 0x98
     d6a:	4618      	mov	r0, r3
     d6c:	f01f f9a4 	bl	200b8 <atomic_get>
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
     d70:	f3bf 8f5b 	dmb	ish
     d74:	f000 0005 	and.w	r0, r0, #5
     d78:	e853 2f00 	ldrex	r2, [r3]
     d7c:	e843 0100 	strex	r1, r0, [r3]
     d80:	2900      	cmp	r1, #0
     d82:	d1f9      	bne.n	d78 <hci_init+0x40>
     d84:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
     d88:	9803      	ldr	r0, [sp, #12]
     d8a:	f01a fea9 	bl	1bae0 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
     d8e:	aa03      	add	r2, sp, #12
     d90:	2100      	movs	r1, #0
     d92:	f241 0003 	movw	r0, #4099	; 0x1003
     d96:	f007 ffad 	bl	8cf4 <bt_hci_cmd_send_sync>
	if (err) {
     d9a:	4604      	mov	r4, r0
     d9c:	2800      	cmp	r0, #0
     d9e:	d153      	bne.n	e48 <hci_init+0x110>
	read_local_features_complete(rsp);
     da0:	9b03      	ldr	r3, [sp, #12]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
     da2:	482d      	ldr	r0, [pc, #180]	; (e58 <hci_init+0x120>)
     da4:	6899      	ldr	r1, [r3, #8]
     da6:	2208      	movs	r2, #8
     da8:	3101      	adds	r1, #1
     daa:	f01f f864 	bl	1fe76 <memcpy>
	net_buf_unref(rsp);
     dae:	9803      	ldr	r0, [sp, #12]
     db0:	f01a fe96 	bl	1bae0 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
     db4:	4621      	mov	r1, r4
     db6:	aa03      	add	r2, sp, #12
     db8:	f241 0001 	movw	r0, #4097	; 0x1001
     dbc:	f007 ff9a 	bl	8cf4 <bt_hci_cmd_send_sync>
	if (err) {
     dc0:	4604      	mov	r4, r0
     dc2:	2800      	cmp	r0, #0
     dc4:	d140      	bne.n	e48 <hci_init+0x110>
	read_local_ver_complete(rsp);
     dc6:	9803      	ldr	r0, [sp, #12]
     dc8:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
     dca:	785a      	ldrb	r2, [r3, #1]
     dcc:	f885 2038 	strb.w	r2, [r5, #56]	; 0x38
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
     dd0:	78d9      	ldrb	r1, [r3, #3]
     dd2:	789a      	ldrb	r2, [r3, #2]
     dd4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
     dd8:	876a      	strh	r2, [r5, #58]	; 0x3a
	bt_dev.lmp_version = rp->lmp_version;
     dda:	791a      	ldrb	r2, [r3, #4]
     ddc:	f885 2039 	strb.w	r2, [r5, #57]	; 0x39
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
     de0:	7a19      	ldrb	r1, [r3, #8]
     de2:	79da      	ldrb	r2, [r3, #7]
     de4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
     de8:	87aa      	strh	r2, [r5, #60]	; 0x3c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
     dea:	795a      	ldrb	r2, [r3, #5]
     dec:	799b      	ldrb	r3, [r3, #6]
     dee:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
     df2:	87eb      	strh	r3, [r5, #62]	; 0x3e
	net_buf_unref(rsp);
     df4:	f01a fe74 	bl	1bae0 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
     df8:	4621      	mov	r1, r4
     dfa:	aa03      	add	r2, sp, #12
     dfc:	f241 0002 	movw	r0, #4098	; 0x1002
     e00:	f007 ff78 	bl	8cf4 <bt_hci_cmd_send_sync>
	if (err) {
     e04:	4604      	mov	r4, r0
     e06:	b9f8      	cbnz	r0, e48 <hci_init+0x110>
	read_supported_commands_complete(rsp);
     e08:	9b03      	ldr	r3, [sp, #12]
	memcpy(bt_dev.supported_commands, rp->commands,
     e0a:	4814      	ldr	r0, [pc, #80]	; (e5c <hci_init+0x124>)
     e0c:	6899      	ldr	r1, [r3, #8]
     e0e:	2240      	movs	r2, #64	; 0x40
     e10:	3101      	adds	r1, #1
     e12:	f01f f830 	bl	1fe76 <memcpy>
		bt_dev.supported_commands[34] |= 0x04;
     e16:	f895 306a 	ldrb.w	r3, [r5, #106]	; 0x6a
	net_buf_unref(rsp);
     e1a:	9803      	ldr	r0, [sp, #12]
		bt_dev.supported_commands[34] |= 0x04;
     e1c:	f043 0306 	orr.w	r3, r3, #6
     e20:	f885 306a 	strb.w	r3, [r5, #106]	; 0x6a
	net_buf_unref(rsp);
     e24:	f01a fe5c 	bl	1bae0 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
     e28:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
     e2c:	065b      	lsls	r3, r3, #25
     e2e:	d41d      	bmi.n	e6c <hci_init+0x134>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
     e30:	4b0b      	ldr	r3, [pc, #44]	; (e60 <hci_init+0x128>)
     e32:	490c      	ldr	r1, [pc, #48]	; (e64 <hci_init+0x12c>)
		BT_ERR("Non-LE capable controller detected!");
     e34:	480c      	ldr	r0, [pc, #48]	; (e68 <hci_init+0x130>)
     e36:	1ac9      	subs	r1, r1, r3
     e38:	08c9      	lsrs	r1, r1, #3
     e3a:	0189      	lsls	r1, r1, #6
     e3c:	f041 0101 	orr.w	r1, r1, #1
     e40:	f01d fb47 	bl	1e4d2 <log_0>
		return -ENODEV;
     e44:	f06f 0412 	mvn.w	r4, #18
			return err;
		}
	}

	return 0;
}
     e48:	4620      	mov	r0, r4
     e4a:	b009      	add	sp, #36	; 0x24
     e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e4e:	bf00      	nop
     e50:	20000000 	.word	0x20000000
     e54:	20001ee8 	.word	0x20001ee8
     e58:	20000040 	.word	0x20000040
     e5c:	20000048 	.word	0x20000048
     e60:	000236f0 	.word	0x000236f0
     e64:	000237b0 	.word	0x000237b0
     e68:	00025e98 	.word	0x00025e98
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
     e6c:	4621      	mov	r1, r4
     e6e:	aa03      	add	r2, sp, #12
     e70:	f242 0003 	movw	r0, #8195	; 0x2003
     e74:	f007 ff3e 	bl	8cf4 <bt_hci_cmd_send_sync>
	if (err) {
     e78:	4604      	mov	r4, r0
     e7a:	2800      	cmp	r0, #0
     e7c:	d1e4      	bne.n	e48 <hci_init+0x110>
	read_le_features_complete(rsp);
     e7e:	9b03      	ldr	r3, [sp, #12]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
     e80:	48a5      	ldr	r0, [pc, #660]	; (1118 <CONFIG_BT_RX_STACK_SIZE+0x118>)
     e82:	6899      	ldr	r1, [r3, #8]
     e84:	2208      	movs	r2, #8
     e86:	3101      	adds	r1, #1
     e88:	f01e fff5 	bl	1fe76 <memcpy>
	net_buf_unref(rsp);
     e8c:	9803      	ldr	r0, [sp, #12]
     e8e:	f01a fe27 	bl	1bae0 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
     e92:	4621      	mov	r1, r4
     e94:	aa03      	add	r2, sp, #12
     e96:	f242 0002 	movw	r0, #8194	; 0x2002
     e9a:	f007 ff2b 	bl	8cf4 <bt_hci_cmd_send_sync>
	if (err) {
     e9e:	4604      	mov	r4, r0
     ea0:	2800      	cmp	r0, #0
     ea2:	d1d1      	bne.n	e48 <hci_init+0x110>
	le_read_buffer_size_complete(rsp);
     ea4:	9b03      	ldr	r3, [sp, #12]
     ea6:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.mtu = sys_le16_to_cpu(rp->le_max_len);
     ea8:	f8b3 2001 	ldrh.w	r2, [r3, #1]
     eac:	f8a5 20b0 	strh.w	r2, [r5, #176]	; 0xb0
     eb0:	b291      	uxth	r1, r2
	if (!bt_dev.le.mtu) {
     eb2:	b121      	cbz	r1, ebe <hci_init+0x186>
	k_sem_init(&bt_dev.le.pkts, rp->le_max_num, rp->le_max_num);
     eb4:	78da      	ldrb	r2, [r3, #3]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, *(uintptr_t *)&initial_count, *(uintptr_t *)&limit, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
     eb6:	4899      	ldr	r0, [pc, #612]	; (111c <CONFIG_BT_RX_STACK_SIZE+0x11c>)
     eb8:	4611      	mov	r1, r2
     eba:	f022 f89a 	bl	22ff2 <z_impl_k_sem_init>
	net_buf_unref(rsp);
     ebe:	9803      	ldr	r0, [sp, #12]
     ec0:	f01a fe0e 	bl	1bae0 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
     ec4:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
     ec8:	f016 0620 	ands.w	r6, r6, #32
     ecc:	f000 80ff 	beq.w	10ce <CONFIG_BT_RX_STACK_SIZE+0xce>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
     ed0:	f895 3064 	ldrb.w	r3, [r5, #100]	; 0x64
     ed4:	071f      	lsls	r7, r3, #28
     ed6:	d511      	bpl.n	efc <hci_init+0x1c4>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
     ed8:	aa03      	add	r2, sp, #12
     eda:	2100      	movs	r1, #0
     edc:	f242 001c 	movw	r0, #8220	; 0x201c
     ee0:	f007 ff08 	bl	8cf4 <bt_hci_cmd_send_sync>
		if (err) {
     ee4:	4604      	mov	r4, r0
     ee6:	2800      	cmp	r0, #0
     ee8:	d1ae      	bne.n	e48 <hci_init+0x110>
		le_read_supp_states_complete(rsp);
     eea:	9803      	ldr	r0, [sp, #12]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
     eec:	6883      	ldr	r3, [r0, #8]
     eee:	f853 2f01 	ldr.w	r2, [r3, #1]!
     ef2:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
     ef4:	e9c5 232a 	strd	r2, r3, [r5, #168]	; 0xa8
		net_buf_unref(rsp);
     ef8:	f01a fdf2 	bl	1bae0 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
     efc:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
     f00:	069e      	lsls	r6, r3, #26
     f02:	d524      	bpl.n	f4e <hci_init+0x216>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
     f04:	a902      	add	r1, sp, #8
     f06:	f10d 0006 	add.w	r0, sp, #6
     f0a:	f007 ff6b 	bl	8de4 <hci_le_read_max_data_len>
		if (err) {
     f0e:	4604      	mov	r4, r0
     f10:	2800      	cmp	r0, #0
     f12:	d199      	bne.n	e48 <hci_init+0x110>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
     f14:	2104      	movs	r1, #4
     f16:	f242 0024 	movw	r0, #8228	; 0x2024
     f1a:	f007 fd8f 	bl	8a3c <bt_hci_cmd_create>
		if (!buf) {
     f1e:	4606      	mov	r6, r0
     f20:	2800      	cmp	r0, #0
     f22:	f000 80db 	beq.w	10dc <CONFIG_BT_RX_STACK_SIZE+0xdc>
		cp = net_buf_add(buf, sizeof(*cp));
     f26:	2104      	movs	r1, #4
     f28:	3008      	adds	r0, #8
     f2a:	f021 fb35 	bl	22598 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
     f2e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     f32:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
     f34:	f8bd 3008 	ldrh.w	r3, [sp, #8]
     f38:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
     f3a:	4622      	mov	r2, r4
     f3c:	4631      	mov	r1, r6
     f3e:	f242 0024 	movw	r0, #8228	; 0x2024
     f42:	f007 fed7 	bl	8cf4 <bt_hci_cmd_send_sync>
		if (err) {
     f46:	4604      	mov	r4, r0
     f48:	2800      	cmp	r0, #0
     f4a:	f47f af7d 	bne.w	e48 <hci_init+0x110>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
     f4e:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
     f52:	065c      	lsls	r4, r3, #25
     f54:	d510      	bpl.n	f78 <hci_init+0x240>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
     f56:	aa03      	add	r2, sp, #12
     f58:	2100      	movs	r1, #0
     f5a:	f242 002a 	movw	r0, #8234	; 0x202a
     f5e:	f007 fec9 	bl	8cf4 <bt_hci_cmd_send_sync>
		if (err) {
     f62:	4604      	mov	r4, r0
     f64:	2800      	cmp	r0, #0
     f66:	f47f af6f 	bne.w	e48 <hci_init+0x110>
		le_read_resolving_list_size_complete(rsp);
     f6a:	9803      	ldr	r0, [sp, #12]
	bt_dev.le.rl_size = rp->rl_size;
     f6c:	6883      	ldr	r3, [r0, #8]
     f6e:	785b      	ldrb	r3, [r3, #1]
     f70:	f885 30cc 	strb.w	r3, [r5, #204]	; 0xcc
		net_buf_unref(rsp);
     f74:	f01a fdb4 	bl	1bae0 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
     f78:	2108      	movs	r1, #8
     f7a:	f242 0001 	movw	r0, #8193	; 0x2001
     f7e:	f007 fd5d 	bl	8a3c <bt_hci_cmd_create>
	if (!buf) {
     f82:	4604      	mov	r4, r0
     f84:	2800      	cmp	r0, #0
     f86:	f000 80a9 	beq.w	10dc <CONFIG_BT_RX_STACK_SIZE+0xdc>
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
     f8a:	2108      	movs	r1, #8
     f8c:	4408      	add	r0, r1
     f8e:	f021 fb03 	bl	22598 <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
     f92:	f895 10a0 	ldrb.w	r1, [r5, #160]	; 0xa0
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
     f96:	f011 0f40 	tst.w	r1, #64	; 0x40
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
     f9a:	4602      	mov	r2, r0
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
     f9c:	f240 2302 	movw	r3, #514	; 0x202
     fa0:	bf08      	it	eq
     fa2:	2303      	moveq	r3, #3
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
     fa4:	0788      	lsls	r0, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
     fa6:	bf4c      	ite	mi
     fa8:	f043 002c 	orrmi.w	r0, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
     fac:	f043 000c 	orrpl.w	r0, r3, #12
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
     fb0:	f895 30a1 	ldrb.w	r3, [r5, #161]	; 0xa1
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
     fb4:	068f      	lsls	r7, r1, #26
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
     fb6:	bf48      	it	mi
     fb8:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
     fbc:	f013 0f09 	tst.w	r3, #9
	if (IS_ENABLED(CONFIG_BT_ECC) &&
     fc0:	f895 306a 	ldrb.w	r3, [r5, #106]	; 0x6a
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
     fc4:	bf18      	it	ne
     fc6:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_ECC) &&
     fca:	f003 0306 	and.w	r3, r3, #6
	if (IS_ENABLED(CONFIG_BT_SMP) &&
     fce:	07ce      	lsls	r6, r1, #31
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
     fd0:	bf48      	it	mi
     fd2:	f040 0010 	orrmi.w	r0, r0, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
     fd6:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
     fd8:	bf08      	it	eq
     fda:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
     fde:	2100      	movs	r1, #0
     fe0:	f01f f8ad 	bl	2013e <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
     fe4:	4621      	mov	r1, r4
     fe6:	2200      	movs	r2, #0
     fe8:	f242 0001 	movw	r0, #8193	; 0x2001
     fec:	f007 fe82 	bl	8cf4 <bt_hci_cmd_send_sync>
	if (err) {
     ff0:	4604      	mov	r4, r0
     ff2:	2800      	cmp	r0, #0
     ff4:	f47f af28 	bne.w	e48 <hci_init+0x110>
	if (BT_FEAT_BREDR(bt_dev.features)) {
     ff8:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
     ffc:	0698      	lsls	r0, r3, #26
     ffe:	d41e      	bmi.n	103e <CONFIG_BT_RX_STACK_SIZE+0x3e>
	if (bt_dev.le.mtu) {
    1000:	f8b5 10b0 	ldrh.w	r1, [r5, #176]	; 0xb0
    1004:	b9d9      	cbnz	r1, 103e <CONFIG_BT_RX_STACK_SIZE+0x3e>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    1006:	aa03      	add	r2, sp, #12
    1008:	f241 0005 	movw	r0, #4101	; 0x1005
    100c:	f007 fe72 	bl	8cf4 <bt_hci_cmd_send_sync>
	if (err) {
    1010:	4604      	mov	r4, r0
    1012:	2800      	cmp	r0, #0
    1014:	f47f af18 	bne.w	e48 <hci_init+0x110>
	if (bt_dev.le.mtu) {
    1018:	f8b5 30b0 	ldrh.w	r3, [r5, #176]	; 0xb0
    101c:	b963      	cbnz	r3, 1038 <CONFIG_BT_RX_STACK_SIZE+0x38>
	read_buffer_size_complete(rsp);
    101e:	9b03      	ldr	r3, [sp, #12]
    1020:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.mtu = sys_le16_to_cpu(rp->acl_max_len);
    1022:	785a      	ldrb	r2, [r3, #1]
    1024:	7899      	ldrb	r1, [r3, #2]
    1026:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    102a:	f8a5 20b0 	strh.w	r2, [r5, #176]	; 0xb0
	k_sem_init(&bt_dev.le.pkts, pkts, pkts);
    102e:	889a      	ldrh	r2, [r3, #4]
    1030:	483a      	ldr	r0, [pc, #232]	; (111c <CONFIG_BT_RX_STACK_SIZE+0x11c>)
    1032:	4611      	mov	r1, r2
    1034:	f021 ffdd 	bl	22ff2 <z_impl_k_sem_init>
	net_buf_unref(rsp);
    1038:	9803      	ldr	r0, [sp, #12]
    103a:	f01a fd51 	bl	1bae0 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    103e:	2108      	movs	r1, #8
    1040:	f640 4001 	movw	r0, #3073	; 0xc01
    1044:	f007 fcfa 	bl	8a3c <bt_hci_cmd_create>
	if (!buf) {
    1048:	4604      	mov	r4, r0
    104a:	2800      	cmp	r0, #0
    104c:	d046      	beq.n	10dc <CONFIG_BT_RX_STACK_SIZE+0xdc>
	ev = net_buf_add(buf, sizeof(*ev));
    104e:	2108      	movs	r1, #8
    1050:	4408      	add	r0, r1
    1052:	f021 faa1 	bl	22598 <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    1056:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
    105a:	07d9      	lsls	r1, r3, #31
	ev = net_buf_add(buf, sizeof(*ev));
    105c:	4602      	mov	r2, r0
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    105e:	d552      	bpl.n	1106 <CONFIG_BT_RX_STACK_SIZE+0x106>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
    1060:	a12b      	add	r1, pc, #172	; (adr r1, 1110 <CONFIG_BT_RX_STACK_SIZE+0x110>)
    1062:	e9d1 0100 	ldrd	r0, r1, [r1]
	sys_put_le64(mask, ev->events);
    1066:	f01f f86a 	bl	2013e <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    106a:	4621      	mov	r1, r4
    106c:	2200      	movs	r2, #0
    106e:	f640 4001 	movw	r0, #3073	; 0xc01
    1072:	f007 fe3f 	bl	8cf4 <bt_hci_cmd_send_sync>
	if (err) {
    1076:	4604      	mov	r4, r0
    1078:	2800      	cmp	r0, #0
    107a:	f47f aee5 	bne.w	e48 <hci_init+0x110>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    107e:	4601      	mov	r1, r0
    1080:	aa02      	add	r2, sp, #8
    1082:	f64f 4001 	movw	r0, #64513	; 0xfc01
    1086:	f007 fe35 	bl	8cf4 <bt_hci_cmd_send_sync>
	if (err) {
    108a:	4e25      	ldr	r6, [pc, #148]	; (1120 <CONFIG_BT_RX_STACK_SIZE+0x120>)
    108c:	4b25      	ldr	r3, [pc, #148]	; (1124 <CONFIG_BT_RX_STACK_SIZE+0x124>)
    108e:	1af6      	subs	r6, r6, r3
    1090:	08f6      	lsrs	r6, r6, #3
    1092:	01b6      	lsls	r6, r6, #6
    1094:	2800      	cmp	r0, #0
    1096:	d04d      	beq.n	1134 <CONFIG_BT_RX_STACK_SIZE+0x134>
		BT_WARN("Vendor HCI extensions not available");
    1098:	4823      	ldr	r0, [pc, #140]	; (1128 <CONFIG_BT_RX_STACK_SIZE+0x128>)
    109a:	f046 0102 	orr.w	r1, r6, #2
			BT_WARN("Failed to read supported vendor features");
    109e:	f01d fa18 	bl	1e4d2 <log_0>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    10a2:	79eb      	ldrb	r3, [r5, #7]
    10a4:	2b00      	cmp	r3, #0
    10a6:	f47f aecf 	bne.w	e48 <hci_init+0x110>
		bt_setup_public_id_addr();
    10aa:	f008 ff2f 	bl	9f0c <bt_setup_public_id_addr>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    10ae:	79eb      	ldrb	r3, [r5, #7]
    10b0:	2b00      	cmp	r3, #0
    10b2:	f47f aec9 	bne.w	e48 <hci_init+0x110>
		err = bt_setup_random_id_addr();
    10b6:	f008 ffd3 	bl	a060 <bt_setup_random_id_addr>
		if (err) {
    10ba:	4604      	mov	r4, r0
    10bc:	2800      	cmp	r0, #0
    10be:	f000 80a6 	beq.w	120e <CONFIG_BT_RX_STACK_SIZE+0x20e>
			BT_ERR("Unable to set identity address");
    10c2:	481a      	ldr	r0, [pc, #104]	; (112c <CONFIG_BT_RX_STACK_SIZE+0x12c>)
    10c4:	f046 0101 	orr.w	r1, r6, #1
			BT_ERR("Unable to set random address");
    10c8:	f01d fa03 	bl	1e4d2 <log_0>
			return err;
    10cc:	e6bc      	b.n	e48 <hci_init+0x110>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    10ce:	2102      	movs	r1, #2
    10d0:	f640 406d 	movw	r0, #3181	; 0xc6d
    10d4:	f007 fcb2 	bl	8a3c <bt_hci_cmd_create>
		if (!buf) {
    10d8:	4604      	mov	r4, r0
    10da:	b910      	cbnz	r0, 10e2 <CONFIG_BT_RX_STACK_SIZE+0xe2>
		return -ENOBUFS;
    10dc:	f06f 0436 	mvn.w	r4, #54	; 0x36
    10e0:	e6b2      	b.n	e48 <hci_init+0x110>
		cp_le = net_buf_add(buf, sizeof(*cp_le));
    10e2:	2102      	movs	r1, #2
    10e4:	3008      	adds	r0, #8
    10e6:	f021 fa57 	bl	22598 <net_buf_simple_add>
		cp_le->le = 0x01;
    10ea:	2301      	movs	r3, #1
    10ec:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    10ee:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    10f0:	4621      	mov	r1, r4
    10f2:	4632      	mov	r2, r6
    10f4:	f640 406d 	movw	r0, #3181	; 0xc6d
    10f8:	f007 fdfc 	bl	8cf4 <bt_hci_cmd_send_sync>
		if (err) {
    10fc:	4604      	mov	r4, r0
    10fe:	2800      	cmp	r0, #0
    1100:	f43f aee6 	beq.w	ed0 <hci_init+0x198>
    1104:	e6a0      	b.n	e48 <hci_init+0x110>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
    1106:	480a      	ldr	r0, [pc, #40]	; (1130 <CONFIG_BT_RX_STACK_SIZE+0x130>)
    1108:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    110c:	e7ab      	b.n	1066 <CONFIG_BT_RX_STACK_SIZE+0x66>
    110e:	bf00      	nop
    1110:	02008890 	.word	0x02008890
    1114:	20008000 	.word	0x20008000
    1118:	200000a0 	.word	0x200000a0
    111c:	200000b4 	.word	0x200000b4
    1120:	000237b0 	.word	0x000237b0
    1124:	000236f0 	.word	0x000236f0
    1128:	00025ebc 	.word	0x00025ebc
    112c:	00025f90 	.word	0x00025f90
    1130:	02008810 	.word	0x02008810
	rp.info = (void *)rsp->data;
    1134:	9b02      	ldr	r3, [sp, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
    1136:	483b      	ldr	r0, [pc, #236]	; (1224 <CONFIG_BT_RX_STACK_SIZE+0x224>)
	rp.info = (void *)rsp->data;
    1138:	689f      	ldr	r7, [r3, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
    113a:	f8b7 2001 	ldrh.w	r2, [r7, #1]
	if (platform < ARRAY_SIZE(plat_str)) {
    113e:	2a03      	cmp	r2, #3
		return plat_str[platform];
    1140:	bf96      	itet	ls
    1142:	4939      	ldrls	r1, [pc, #228]	; (1228 <CONFIG_BT_RX_STACK_SIZE+0x228>)
	return "unknown";
    1144:	4939      	ldrhi	r1, [pc, #228]	; (122c <CONFIG_BT_RX_STACK_SIZE+0x22c>)
		return plat_str[platform];
    1146:	f851 1022 	ldrls.w	r1, [r1, r2, lsl #2]
	BT_INFO("HW Platform: %s (0x%04x)",
    114a:	f046 0303 	orr.w	r3, r6, #3
    114e:	f01d f9e1 	bl	1e514 <log_2>
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    1152:	f8b7 1001 	ldrh.w	r1, [r7, #1]
	BT_INFO("HW Variant: %s (0x%04x)",
    1156:	f8b7 2003 	ldrh.w	r2, [r7, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    115a:	2902      	cmp	r1, #2
	BT_INFO("HW Variant: %s (0x%04x)",
    115c:	f046 0303 	orr.w	r3, r6, #3
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    1160:	d12e      	bne.n	11c0 <CONFIG_BT_RX_STACK_SIZE+0x1c0>
	if (variant < ARRAY_SIZE(nordic_str)) {
    1162:	2a03      	cmp	r2, #3
    1164:	d82c      	bhi.n	11c0 <CONFIG_BT_RX_STACK_SIZE+0x1c0>
		return nordic_str[variant];
    1166:	4932      	ldr	r1, [pc, #200]	; (1230 <CONFIG_BT_RX_STACK_SIZE+0x230>)
    1168:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
	BT_INFO("HW Variant: %s (0x%04x)",
    116c:	4831      	ldr	r0, [pc, #196]	; (1234 <CONFIG_BT_RX_STACK_SIZE+0x234>)
    116e:	f01d f9d1 	bl	1e514 <log_2>
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    1172:	797a      	ldrb	r2, [r7, #5]
    1174:	4830      	ldr	r0, [pc, #192]	; (1238 <CONFIG_BT_RX_STACK_SIZE+0x238>)
	if (variant < ARRAY_SIZE(var_str)) {
    1176:	2a03      	cmp	r2, #3
		return var_str[variant];
    1178:	bf96      	itet	ls
    117a:	4930      	ldrls	r1, [pc, #192]	; (123c <CONFIG_BT_RX_STACK_SIZE+0x23c>)
	return "unknown";
    117c:	492b      	ldrhi	r1, [pc, #172]	; (122c <CONFIG_BT_RX_STACK_SIZE+0x22c>)
		return var_str[variant];
    117e:	f851 1022 	ldrls.w	r1, [r1, r2, lsl #2]
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    1182:	e9cd 1203 	strd	r1, r2, [sp, #12]
    1186:	79ba      	ldrb	r2, [r7, #6]
    1188:	9205      	str	r2, [sp, #20]
    118a:	f8b7 2007 	ldrh.w	r2, [r7, #7]
    118e:	9206      	str	r2, [sp, #24]
    1190:	f8d7 2009 	ldr.w	r2, [r7, #9]
    1194:	9207      	str	r2, [sp, #28]
    1196:	f046 0303 	orr.w	r3, r6, #3
    119a:	2205      	movs	r2, #5
    119c:	a903      	add	r1, sp, #12
    119e:	f01d f9ee 	bl	1e57e <log_n>
	net_buf_unref(rsp);
    11a2:	9802      	ldr	r0, [sp, #8]
    11a4:	f01a fc9c 	bl	1bae0 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    11a8:	aa02      	add	r2, sp, #8
    11aa:	2100      	movs	r1, #0
    11ac:	f64f 4002 	movw	r0, #64514	; 0xfc02
    11b0:	f007 fda0 	bl	8cf4 <bt_hci_cmd_send_sync>
	if (err) {
    11b4:	4607      	mov	r7, r0
    11b6:	b128      	cbz	r0, 11c4 <CONFIG_BT_RX_STACK_SIZE+0x1c4>
		BT_WARN("Failed to read supported vendor commands");
    11b8:	4821      	ldr	r0, [pc, #132]	; (1240 <CONFIG_BT_RX_STACK_SIZE+0x240>)
    11ba:	f046 0102 	orr.w	r1, r6, #2
    11be:	e76e      	b.n	109e <CONFIG_BT_RX_STACK_SIZE+0x9e>
		return "unknown";
    11c0:	491a      	ldr	r1, [pc, #104]	; (122c <CONFIG_BT_RX_STACK_SIZE+0x22c>)
    11c2:	e7d3      	b.n	116c <CONFIG_BT_RX_STACK_SIZE+0x16c>
	rp.cmds = (void *)rsp->data;
    11c4:	9b02      	ldr	r3, [sp, #8]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    11c6:	481f      	ldr	r0, [pc, #124]	; (1244 <CONFIG_BT_RX_STACK_SIZE+0x244>)
    11c8:	6899      	ldr	r1, [r3, #8]
    11ca:	2202      	movs	r2, #2
    11cc:	3101      	adds	r1, #1
    11ce:	f01e fe52 	bl	1fe76 <memcpy>
	net_buf_unref(rsp);
    11d2:	9802      	ldr	r0, [sp, #8]
    11d4:	f01a fc84 	bl	1bae0 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    11d8:	f895 3089 	ldrb.w	r3, [r5, #137]	; 0x89
    11dc:	075b      	lsls	r3, r3, #29
    11de:	f57f af60 	bpl.w	10a2 <CONFIG_BT_RX_STACK_SIZE+0xa2>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    11e2:	aa02      	add	r2, sp, #8
    11e4:	4639      	mov	r1, r7
    11e6:	f64f 4003 	movw	r0, #64515	; 0xfc03
    11ea:	f007 fd83 	bl	8cf4 <bt_hci_cmd_send_sync>
		if (err) {
    11ee:	b118      	cbz	r0, 11f8 <CONFIG_BT_RX_STACK_SIZE+0x1f8>
			BT_WARN("Failed to read supported vendor features");
    11f0:	4815      	ldr	r0, [pc, #84]	; (1248 <CONFIG_BT_RX_STACK_SIZE+0x248>)
    11f2:	f046 0102 	orr.w	r1, r6, #2
    11f6:	e752      	b.n	109e <CONFIG_BT_RX_STACK_SIZE+0x9e>
		rp.feat = (void *)rsp->data;
    11f8:	9b02      	ldr	r3, [sp, #8]
		memcpy(bt_dev.vs_features, rp.feat->features,
    11fa:	4814      	ldr	r0, [pc, #80]	; (124c <CONFIG_BT_RX_STACK_SIZE+0x24c>)
    11fc:	6899      	ldr	r1, [r3, #8]
    11fe:	2201      	movs	r2, #1
    1200:	4411      	add	r1, r2
    1202:	f01e fe38 	bl	1fe76 <memcpy>
		net_buf_unref(rsp);
    1206:	9802      	ldr	r0, [sp, #8]
    1208:	f01a fc6a 	bl	1bae0 <net_buf_unref>
    120c:	e749      	b.n	10a2 <CONFIG_BT_RX_STACK_SIZE+0xa2>
		err = set_random_address(&bt_dev.id_addr[0].a);
    120e:	4810      	ldr	r0, [pc, #64]	; (1250 <CONFIG_BT_RX_STACK_SIZE+0x250>)
    1210:	f007 fe12 	bl	8e38 <set_random_address>
		if (err) {
    1214:	4604      	mov	r4, r0
    1216:	2800      	cmp	r0, #0
    1218:	f43f ae16 	beq.w	e48 <hci_init+0x110>
			BT_ERR("Unable to set random address");
    121c:	480d      	ldr	r0, [pc, #52]	; (1254 <CONFIG_BT_RX_STACK_SIZE+0x254>)
    121e:	f046 0101 	orr.w	r1, r6, #1
    1222:	e751      	b.n	10c8 <CONFIG_BT_RX_STACK_SIZE+0xc8>
    1224:	00025ee0 	.word	0x00025ee0
    1228:	00023c6c 	.word	0x00023c6c
    122c:	000257ba 	.word	0x000257ba
    1230:	00023c34 	.word	0x00023c34
    1234:	00025ef9 	.word	0x00025ef9
    1238:	00025f11 	.word	0x00025f11
    123c:	00023c9c 	.word	0x00023c9c
    1240:	00025f3e 	.word	0x00025f3e
    1244:	20000089 	.word	0x20000089
    1248:	00025f67 	.word	0x00025f67
    124c:	20000088 	.word	0x20000088
    1250:	20000001 	.word	0x20000001
    1254:	00025faf 	.word	0x00025faf

00001258 <ll_scan_params_set>:

static struct ll_scan_set ll_scan[BT_CTLR_SCAN_SET];

uint8_t ll_scan_params_set(uint8_t type, uint16_t interval, uint16_t window,
			uint8_t own_addr_type, uint8_t filter_policy)
{
    1258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
struct ll_scan_set *ull_scan_is_disabled_get(uint8_t handle)
{
	struct ll_scan_set *scan;

	scan = ull_scan_set_get(handle);
	if (!scan || scan->is_enabled) {
    125a:	4e19      	ldr	r6, [pc, #100]	; (12c0 <ll_scan_params_set+0x68>)
{
    125c:	f89d 4018 	ldrb.w	r4, [sp, #24]
	if (!scan || scan->is_enabled) {
    1260:	f896 5048 	ldrb.w	r5, [r6, #72]	; 0x48
    1264:	f015 0701 	ands.w	r7, r5, #1
    1268:	d121      	bne.n	12ae <ll_scan_params_set+0x56>
	lll->filter_policy = filter_policy;
    126a:	f896 c032 	ldrb.w	ip, [r6, #50]	; 0x32
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window * 625U);
    126e:	f8df e054 	ldr.w	lr, [pc, #84]	; 12c4 <ll_scan_params_set+0x6c>
	lll->interval = interval;
    1272:	f8a6 1042 	strh.w	r1, [r6, #66]	; 0x42
	lll->filter_policy = filter_policy;
    1276:	00e4      	lsls	r4, r4, #3
    1278:	f004 0418 	and.w	r4, r4, #24
    127c:	f00c 0c67 	and.w	ip, ip, #103	; 0x67
    1280:	ea44 14c0 	orr.w	r4, r4, r0, lsl #7
	scan->own_addr_type = own_addr_type;
    1284:	f363 0542 	bfi	r5, r3, #1, #2
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window * 625U);
    1288:	fba2 010e 	umull	r0, r1, r2, lr
	lll->filter_policy = filter_policy;
    128c:	ea44 040c 	orr.w	r4, r4, ip
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window * 625U);
    1290:	2391      	movs	r3, #145	; 0x91
    1292:	fb03 1102 	mla	r1, r3, r2, r1
	scan->own_addr_type = own_addr_type;
    1296:	f886 5048 	strb.w	r5, [r6, #72]	; 0x48
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window * 625U);
    129a:	a307      	add	r3, pc, #28	; (adr r3, 12b8 <ll_scan_params_set+0x60>)
    129c:	e9d3 2300 	ldrd	r2, r3, [r3]
	lll->filter_policy = filter_policy;
    12a0:	f886 4032 	strb.w	r4, [r6, #50]	; 0x32
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window * 625U);
    12a4:	f7ff fbca 	bl	a3c <__aeabi_uldivmod>
    12a8:	6470      	str	r0, [r6, #68]	; 0x44
}
    12aa:	4638      	mov	r0, r7
    12ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    12ae:	270c      	movs	r7, #12
}
    12b0:	4638      	mov	r0, r7
    12b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    12b4:	f3af 8000 	nop.w
    12b8:	1afd498d 	.word	0x1afd498d
    12bc:	00000007 	.word	0x00000007
    12c0:	20003268 	.word	0x20003268
    12c4:	84e72a00 	.word	0x84e72a00

000012c8 <ull_scan_params_set>:
{
    12c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    12ca:	f89d 4018 	ldrb.w	r4, [sp, #24]
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window * 625U);
    12ce:	4e10      	ldr	r6, [pc, #64]	; (1310 <ull_scan_params_set+0x48>)
{
    12d0:	4605      	mov	r5, r0
	lll->filter_policy = filter_policy;
    12d2:	00e4      	lsls	r4, r4, #3
    12d4:	7d80      	ldrb	r0, [r0, #22]
	lll->interval = interval;
    12d6:	84ea      	strh	r2, [r5, #38]	; 0x26
	lll->filter_policy = filter_policy;
    12d8:	f004 0418 	and.w	r4, r4, #24
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window * 625U);
    12dc:	fba3 6706 	umull	r6, r7, r3, r6
	lll->filter_policy = filter_policy;
    12e0:	f000 0067 	and.w	r0, r0, #103	; 0x67
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window * 625U);
    12e4:	2291      	movs	r2, #145	; 0x91
	lll->filter_policy = filter_policy;
    12e6:	ea44 11c1 	orr.w	r1, r4, r1, lsl #7
    12ea:	4301      	orrs	r1, r0
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window * 625U);
    12ec:	fb02 7703 	mla	r7, r2, r3, r7
	lll->filter_policy = filter_policy;
    12f0:	75a9      	strb	r1, [r5, #22]
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window * 625U);
    12f2:	a305      	add	r3, pc, #20	; (adr r3, 1308 <ull_scan_params_set+0x40>)
    12f4:	e9d3 2300 	ldrd	r2, r3, [r3]
    12f8:	4630      	mov	r0, r6
    12fa:	4639      	mov	r1, r7
    12fc:	f7ff fb9e 	bl	a3c <__aeabi_uldivmod>
    1300:	62a8      	str	r0, [r5, #40]	; 0x28
}
    1302:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1304:	f3af 8000 	nop.w
    1308:	1afd498d 	.word	0x1afd498d
    130c:	00000007 	.word	0x00000007
    1310:	84e72a00 	.word	0x84e72a00
    1314:	00000000 	.word	0x00000000

00001318 <ull_scan_enable>:
{
    1318:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	lll->chan = 0;
    131c:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
{
    1320:	4604      	mov	r4, r0
	ll_addr_get(lll->init_addr_type, lll->init_addr);
    1322:	f100 0135 	add.w	r1, r0, #53	; 0x35
	lll->init_addr_type = scan->own_addr_type;
    1326:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
    132a:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
    132e:	f3c0 0040 	ubfx	r0, r0, #1, #1
{
    1332:	b08d      	sub	sp, #52	; 0x34
	lll->init_addr_type = scan->own_addr_type;
    1334:	f360 1386 	bfi	r3, r0, #6, #1
    1338:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
	volatile uint32_t ret_cb = TICKER_STATUS_BUSY;
    133c:	2302      	movs	r3, #2
    133e:	930b      	str	r3, [sp, #44]	; 0x2c
	ll_addr_get(lll->init_addr_type, lll->init_addr);
    1340:	f010 fb84 	bl	11a4c <ll_addr_get>
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval * 625U);
    1344:	f8b4 6042 	ldrh.w	r6, [r4, #66]	; 0x42
static inline void lll_hdr_init(void *lll, void *parent)
{
	struct lll_hdr *hdr = lll;

	hdr->parent = parent;
	hdr->is_stop = 0U;
    1348:	f894 3020 	ldrb.w	r3, [r4, #32]
    134c:	483c      	ldr	r0, [pc, #240]	; (1440 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb8>)
	hdr->parent = parent;
    134e:	61e4      	str	r4, [r4, #28]
	return hdr->ref--;
}

static inline void ull_hdr_init(struct ull_hdr *hdr)
{
	hdr->disabled_cb = hdr->disabled_param = NULL;
    1350:	2500      	movs	r5, #0
    1352:	fba6 0100 	umull	r0, r1, r6, r0
	hdr->is_stop = 0U;
    1356:	f365 0300 	bfi	r3, r5, #0, #1
    135a:	2291      	movs	r2, #145	; 0x91
    135c:	fb02 1106 	mla	r1, r2, r6, r1
    1360:	e9c4 5505 	strd	r5, r5, [r4, #20]
    1364:	f884 3020 	strb.w	r3, [r4, #32]
    1368:	a333      	add	r3, pc, #204	; (adr r3, 1438 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb0>)
    136a:	e9d3 2300 	ldrd	r2, r3, [r3]
    136e:	f7ff fb65 	bl	a3c <__aeabi_uldivmod>
	if ((lll->ticks_window +
    1372:	6c63      	ldr	r3, [r4, #68]	; 0x44
	scan->evt.ticks_active_to_start = 0U;
    1374:	6065      	str	r5, [r4, #4]
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval * 625U);
    1376:	4606      	mov	r6, r0
	if ((lll->ticks_window +
    1378:	3309      	adds	r3, #9
	    (ticks_interval -
    137a:	f1a6 0231 	sub.w	r2, r6, #49	; 0x31
	if ((lll->ticks_window +
    137e:	4293      	cmp	r3, r2
	scan->evt.ticks_xtal_to_start =
    1380:	f04f 0131 	mov.w	r1, #49	; 0x31
		scan->evt.ticks_slot =
    1384:	bf32      	itee	cc
    1386:	60e3      	strcc	r3, [r4, #12]
		scan->evt.ticks_slot =
    1388:	60e2      	strcs	r2, [r4, #12]
		lll->ticks_window = 0;
    138a:	6465      	strcs	r5, [r4, #68]	; 0x44
	scan->evt.ticks_preempt_to_start =
    138c:	60a5      	str	r5, [r4, #8]
	scan->evt.ticks_xtal_to_start =
    138e:	6021      	str	r1, [r4, #0]
	ticks_anchor = ticker_ticks_now_get();
    1390:	f010 fb5a 	bl	11a48 <ticker_ticks_now_get>
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
    1394:	4d2b      	ldr	r5, [pc, #172]	; (1444 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xbc>)
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1396:	9406      	str	r4, [sp, #24]
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval * 625U),
    1398:	f8b4 8042 	ldrh.w	r8, [r4, #66]	; 0x42
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
    139c:	492a      	ldr	r1, [pc, #168]	; (1448 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc0>)
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    139e:	f8df c0b0 	ldr.w	ip, [pc, #176]	; 1450 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc8>
    13a2:	4a2a      	ldr	r2, [pc, #168]	; (144c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc4>)
	ticks_anchor = ticker_ticks_now_get();
    13a4:	4607      	mov	r7, r0
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
    13a6:	1b65      	subs	r5, r4, r5
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval * 625U),
    13a8:	4825      	ldr	r0, [pc, #148]	; (1440 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb8>)
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
    13aa:	08ad      	lsrs	r5, r5, #2
    13ac:	fba1 3505 	umull	r3, r5, r1, r5
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval * 625U),
    13b0:	fba8 0100 	umull	r0, r1, r8, r0
    13b4:	2391      	movs	r3, #145	; 0x91
    13b6:	fb03 1108 	mla	r1, r3, r8, r1
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    13ba:	68e3      	ldr	r3, [r4, #12]
    13bc:	9304      	str	r3, [sp, #16]
    13be:	f10d 082c 	add.w	r8, sp, #44	; 0x2c
    13c2:	f8cd c01c 	str.w	ip, [sp, #28]
    13c6:	9205      	str	r2, [sp, #20]
    13c8:	f04f 0c0a 	mov.w	ip, #10
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval * 625U),
    13cc:	a31a      	add	r3, pc, #104	; (adr r3, 1438 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb0>)
    13ce:	e9d3 2300 	ldrd	r2, r3, [r3]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    13d2:	f8cd c00c 	str.w	ip, [sp, #12]
    13d6:	f8cd 8020 	str.w	r8, [sp, #32]
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval * 625U),
    13da:	f7ff fb2f 	bl	a3c <__aeabi_uldivmod>
    13de:	4610      	mov	r0, r2
    13e0:	4619      	mov	r1, r3
    13e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    13e6:	2300      	movs	r3, #0
    13e8:	f7ff fb28 	bl	a3c <__aeabi_uldivmod>
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
    13ec:	086d      	lsrs	r5, r5, #1
			   TICKER_USER_ID_THREAD, TICKER_ID_SCAN_BASE + handle,
    13ee:	3502      	adds	r5, #2
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    13f0:	2100      	movs	r1, #0
    13f2:	b2ed      	uxtb	r5, r5
    13f4:	462a      	mov	r2, r5
    13f6:	e9cd 6001 	strd	r6, r0, [sp, #4]
    13fa:	463b      	mov	r3, r7
    13fc:	9100      	str	r1, [sp, #0]
    13fe:	4608      	mov	r0, r1
    1400:	2103      	movs	r1, #3
    1402:	f010 fa6f 	bl	118e4 <ticker_start>
	ret = ull_ticker_status_take(ret, &ret_cb);
    1406:	4641      	mov	r1, r8
    1408:	f013 f8a0 	bl	1454c <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
    140c:	4605      	mov	r5, r0
    140e:	b960      	cbnz	r0, 142a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa2>
	scan->is_enabled = 1U;
    1410:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    1414:	f043 0301 	orr.w	r3, r3, #1
    1418:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
		ull_filter_adv_scan_state_cb(BIT(1));
    141c:	2002      	movs	r0, #2
    141e:	f017 f9dd 	bl	187dc <ull_filter_adv_scan_state_cb>
	return 0;
    1422:	4628      	mov	r0, r5
}
    1424:	b00d      	add	sp, #52	; 0x34
    1426:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    142a:	200c      	movs	r0, #12
}
    142c:	b00d      	add	sp, #52	; 0x34
    142e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1432:	bf00      	nop
    1434:	f3af 8000 	nop.w
    1438:	1afd498d 	.word	0x1afd498d
    143c:	00000007 	.word	0x00000007
    1440:	84e72a00 	.word	0x84e72a00
    1444:	20003268 	.word	0x20003268
    1448:	1af286bd 	.word	0x1af286bd
    144c:	00014841 	.word	0x00014841
    1450:	00014541 	.word	0x00014541
    1454:	00000000 	.word	0x00000000

00001458 <ull_conn_llcp>:

	return 0;
}

int ull_conn_llcp(struct ll_conn *conn, uint32_t ticks_at_expire, uint16_t lazy)
{
    1458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	LL_ASSERT(conn->lll.handle != 0xFFFF);
    145c:	8d86      	ldrh	r6, [r0, #44]	; 0x2c
    145e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1462:	429e      	cmp	r6, r3
{
    1464:	b08d      	sub	sp, #52	; 0x34
    1466:	4604      	mov	r4, r0
    1468:	468a      	mov	sl, r1
    146a:	4691      	mov	r9, r2
	LL_ASSERT(conn->lll.handle != 0xFFFF);
    146c:	f000 8115 	beq.w	169a <ull_conn_llcp+0x242>
#ifndef _ASMLANGUAGE
extern uint32_t z_timer_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
    1470:	f005 fd96 	bl	6fa0 <z_timer_cycle_get_32>
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
    1474:	4bb5      	ldr	r3, [pc, #724]	; (174c <ull_conn_llcp+0x2f4>)
#if (defined CONFIG_BLEX)||(defined CONFIG_CSR)||(defined CONFIG_BCM)
	/* BLEX: We calculate the connection event of each connection */
	int conn_handle = conn->lll.handle;
	/* BLEX: This function is called whenever the connection event start. So the timing is an anchor point*/
	anchor_points[conn_handle] = (uint32_t)k_cyc_to_ns_floor64(k_cycle_get_32())/NSEC_PER_USEC/USEC_PER_MSEC;
    1476:	4ab6      	ldr	r2, [pc, #728]	; (1750 <ull_conn_llcp+0x2f8>)
	else if(scheduled_handle_cnt ==2 && conn_handle == 2)scheduled_handle_cnt =3;
#endif

	/* BLEX: If a connection is blocked by another connection, the ull_conn_done function, which is called whenever the connection event ends, is not called.
		So, in this case, the connection event length can be miscalculated and the code below fixs this maloperation. */
	if(BLEX_cnt2 == old_BLEX_cnt2) {
    1478:	4fb6      	ldr	r7, [pc, #728]	; (1754 <ull_conn_llcp+0x2fc>)
	anchor_points[conn_handle] = (uint32_t)k_cyc_to_ns_floor64(k_cycle_get_32())/NSEC_PER_USEC/USEC_PER_MSEC;
    147a:	4db7      	ldr	r5, [pc, #732]	; (1758 <ull_conn_llcp+0x300>)
		stop_cycle[old_handle] = k_cycle_get_32();
    147c:	f8df b310 	ldr.w	fp, [pc, #784]	; 1790 <ull_conn_llcp+0x338>
    1480:	fba0 0103 	umull	r0, r1, r0, r3
    1484:	0bc3      	lsrs	r3, r0, #15
    1486:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
	if(BLEX_cnt2 == old_BLEX_cnt2) {
    148a:	49b4      	ldr	r1, [pc, #720]	; (175c <ull_conn_llcp+0x304>)
    148c:	6838      	ldr	r0, [r7, #0]
	anchor_points[conn_handle] = (uint32_t)k_cyc_to_ns_floor64(k_cycle_get_32())/NSEC_PER_USEC/USEC_PER_MSEC;
    148e:	fba2 2303 	umull	r2, r3, r2, r3
	if(BLEX_cnt2 == old_BLEX_cnt2) {
    1492:	680a      	ldr	r2, [r1, #0]
	anchor_points[conn_handle] = (uint32_t)k_cyc_to_ns_floor64(k_cycle_get_32())/NSEC_PER_USEC/USEC_PER_MSEC;
    1494:	0c9b      	lsrs	r3, r3, #18
	if(BLEX_cnt2 == old_BLEX_cnt2) {
    1496:	4290      	cmp	r0, r2
	anchor_points[conn_handle] = (uint32_t)k_cyc_to_ns_floor64(k_cycle_get_32())/NSEC_PER_USEC/USEC_PER_MSEC;
    1498:	f845 3026 	str.w	r3, [r5, r6, lsl #2]
	if(BLEX_cnt2 == old_BLEX_cnt2) {
    149c:	f000 80e8 	beq.w	1670 <ull_conn_llcp+0x218>
		BLEX_cnt2 ++;
		array4[old_handle] ++;
	}
	else 
		old_BLEX_cnt2 = BLEX_cnt2;
    14a0:	f8db 5000 	ldr.w	r5, [fp]
    14a4:	6008      	str	r0, [r1, #0]

	/* BLEX: We calculate the previous connection's event length here, because sometimes the previous connection is blocked by current connection */
	if(old_handle >=0 && old_handle < CONFIG_BT_MAX_CONN ){
    14a6:	2d03      	cmp	r5, #3
    14a8:	d925      	bls.n	14f6 <ull_conn_llcp+0x9e>
    14aa:	4fad      	ldr	r7, [pc, #692]	; (1760 <ull_conn_llcp+0x308>)
			if(avg_conn_evt_length[old_handle] == 0)  avg_conn_evt_length[old_handle] = (uint32_t)k_cyc_to_ns_floor64(stop_cycle[old_handle]-start_cycle[old_handle])/NSEC_PER_USEC/USEC_PER_MSEC;
			else avg_conn_evt_length[old_handle] = (avg_conn_evt_length[old_handle]*(100-ewma)+(uint32_t)k_cyc_to_ns_floor64(stop_cycle[old_handle]-start_cycle[old_handle])/NSEC_PER_USEC/USEC_PER_MSEC*ewma+50)/100;
		}
	}
	/* BLEX: We update the previous connection's connection event length calculation count */
	handle_cnt[old_handle]++;
    14ac:	4aad      	ldr	r2, [pc, #692]	; (1764 <ull_conn_llcp+0x30c>)
	old_handle = conn_handle;
    14ae:	f8cb 6000 	str.w	r6, [fp]
	handle_cnt[old_handle]++;
    14b2:	f852 3025 	ldr.w	r3, [r2, r5, lsl #2]
    14b6:	3301      	adds	r3, #1
    14b8:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
    14bc:	f005 fd70 	bl	6fa0 <z_timer_cycle_get_32>

#endif
	/* Check if no other procedure with instant is requested and not in
	 * Encryption setup.
	 */
	if ((conn->llcp_ack == conn->llcp_req) &&
    14c0:	f894 50c0 	ldrb.w	r5, [r4, #192]	; 0xc0
    14c4:	f894 30bf 	ldrb.w	r3, [r4, #191]	; 0xbf
	start_cycle[conn_handle] = k_cycle_get_32();
    14c8:	f847 0036 	str.w	r0, [r7, r6, lsl #3]
    14cc:	eb07 02c6 	add.w	r2, r7, r6, lsl #3
    14d0:	2100      	movs	r1, #0
	if ((conn->llcp_ack == conn->llcp_req) &&
    14d2:	429d      	cmp	r5, r3
	start_cycle[conn_handle] = k_cycle_get_32();
    14d4:	6051      	str	r1, [r2, #4]
	if ((conn->llcp_ack == conn->llcp_req) &&
    14d6:	d055      	beq.n	1584 <ull_conn_llcp+0x12c>
		}

		/* Check if procedures with instant or encryption setup is requested or
		 * active.
		 */
		if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
    14d8:	1b5b      	subs	r3, r3, r5
    14da:	f003 0303 	and.w	r3, r3, #3
    14de:	2b02      	cmp	r3, #2
    14e0:	d062      	beq.n	15a8 <ull_conn_llcp+0x150>
					break;
			}
		}

		/* Terminate Procedure Request */
		if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
    14e2:	f894 2105 	ldrb.w	r2, [r4, #261]	; 0x105
    14e6:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
    14ea:	429a      	cmp	r2, r3
    14ec:	d177      	bne.n	15de <ull_conn_llcp+0x186>
				if (conn->procedure_expire <= 1U) {
					conn->procedure_expire++;
				}
			}
	}
	return 0;
    14ee:	2000      	movs	r0, #0
}
    14f0:	b00d      	add	sp, #52	; 0x34
    14f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if((uint32_t)k_cyc_to_ns_floor64(stop_cycle[old_handle]-start_cycle[old_handle])/NSEC_PER_USEC/USEC_PER_MSEC> 0 && (uint32_t)k_cyc_to_ns_floor64(stop_cycle[old_handle]-start_cycle[old_handle])/NSEC_PER_USEC/USEC_PER_MSEC<=conn_int_table[old_handle]*1.25){
    14f6:	4b9c      	ldr	r3, [pc, #624]	; (1768 <ull_conn_llcp+0x310>)
    14f8:	4f99      	ldr	r7, [pc, #612]	; (1760 <ull_conn_llcp+0x308>)
    14fa:	4994      	ldr	r1, [pc, #592]	; (174c <ull_conn_llcp+0x2f4>)
    14fc:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
    1500:	eb07 0ec5 	add.w	lr, r7, r5, lsl #3
    1504:	681a      	ldr	r2, [r3, #0]
    1506:	f8de c000 	ldr.w	ip, [lr]
    150a:	6858      	ldr	r0, [r3, #4]
    150c:	f8de 3004 	ldr.w	r3, [lr, #4]
    1510:	ebb2 020c 	subs.w	r2, r2, ip
    1514:	eb60 0003 	sbc.w	r0, r0, r3
    1518:	fba2 2301 	umull	r2, r3, r2, r1
    151c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    1520:	fb01 3300 	mla	r3, r1, r0, r3
    1524:	930b      	str	r3, [sp, #44]	; 0x2c
    1526:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    152a:	4a90      	ldr	r2, [pc, #576]	; (176c <ull_conn_llcp+0x314>)
    152c:	ea4f 38d0 	mov.w	r8, r0, lsr #15
    1530:	ea48 4841 	orr.w	r8, r8, r1, lsl #17
    1534:	4590      	cmp	r8, r2
    1536:	d9b9      	bls.n	14ac <ull_conn_llcp+0x54>
    1538:	4b85      	ldr	r3, [pc, #532]	; (1750 <ull_conn_llcp+0x2f8>)
    153a:	fba3 3808 	umull	r3, r8, r3, r8
    153e:	ea4f 4898 	mov.w	r8, r8, lsr #18
    1542:	4640      	mov	r0, r8
    1544:	f7fe ff1e 	bl	384 <__aeabi_ui2d>
    1548:	460b      	mov	r3, r1
    154a:	4989      	ldr	r1, [pc, #548]	; (1770 <ull_conn_llcp+0x318>)
    154c:	4602      	mov	r2, r0
    154e:	f851 0025 	ldr.w	r0, [r1, r5, lsl #2]
    1552:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    1556:	f7fe ff15 	bl	384 <__aeabi_ui2d>
    155a:	4b86      	ldr	r3, [pc, #536]	; (1774 <ull_conn_llcp+0x31c>)
    155c:	2200      	movs	r2, #0
    155e:	f7fe ff8b 	bl	478 <__aeabi_dmul>
    1562:	4602      	mov	r2, r0
    1564:	460b      	mov	r3, r1
    1566:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    156a:	f7ff fa01 	bl	970 <__aeabi_dcmple>
    156e:	2800      	cmp	r0, #0
    1570:	d09c      	beq.n	14ac <ull_conn_llcp+0x54>
			if(avg_conn_evt_length[old_handle] == 0)  avg_conn_evt_length[old_handle] = (uint32_t)k_cyc_to_ns_floor64(stop_cycle[old_handle]-start_cycle[old_handle])/NSEC_PER_USEC/USEC_PER_MSEC;
    1572:	4981      	ldr	r1, [pc, #516]	; (1778 <ull_conn_llcp+0x320>)
    1574:	f851 3025 	ldr.w	r3, [r1, r5, lsl #2]
    1578:	2b00      	cmp	r3, #0
    157a:	f040 83f4 	bne.w	1d66 <ull_conn_llcp+0x90e>
    157e:	f841 8025 	str.w	r8, [r1, r5, lsl #2]
    1582:	e793      	b.n	14ac <ull_conn_llcp+0x54>
			!conn->llcp_enc.pause_rx) {
    1584:	f894 212a 	ldrb.w	r2, [r4, #298]	; 0x12a
	if ((conn->llcp_ack == conn->llcp_req) &&
    1588:	f012 0701 	ands.w	r7, r2, #1
    158c:	d1a9      	bne.n	14e2 <ull_conn_llcp+0x8a>
			if (conn->llcp_cu.ack != conn->llcp_cu.req) {
    158e:	f894 10dd 	ldrb.w	r1, [r4, #221]	; 0xdd
    1592:	f894 00dc 	ldrb.w	r0, [r4, #220]	; 0xdc
    1596:	4288      	cmp	r0, r1
    1598:	f000 83f6 	beq.w	1d88 <ull_conn_llcp+0x930>
				conn->llcp_ack -= 2U;
    159c:	1eab      	subs	r3, r5, #2
				conn->llcp_type = LLCP_CONN_UPD;
    159e:	2201      	movs	r2, #1
				conn->llcp_ack -= 2U;
    15a0:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
				conn->llcp_type = LLCP_CONN_UPD;
    15a4:	f884 20c1 	strb.w	r2, [r4, #193]	; 0xc1
			} else if (conn->llcp_length.ack != conn->llcp_length.req) {
    15a8:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
    15ac:	f894 2171 	ldrb.w	r2, [r4, #369]	; 0x171
    15b0:	429a      	cmp	r2, r3
    15b2:	d006      	beq.n	15c2 <ull_conn_llcp+0x16a>
				if ((conn->llcp_length.state ==
    15b4:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
    15b8:	f002 0106 	and.w	r1, r2, #6
    15bc:	2904      	cmp	r1, #4
    15be:	f000 8428 	beq.w	1e12 <ull_conn_llcp+0x9ba>
			switch (conn->llcp_type) {
    15c2:	f894 50c1 	ldrb.w	r5, [r4, #193]	; 0xc1
    15c6:	1e6b      	subs	r3, r5, #1
    15c8:	2b05      	cmp	r3, #5
    15ca:	f200 83bd 	bhi.w	1d48 <ull_conn_llcp+0x8f0>
    15ce:	e8df f013 	tbh	[pc, r3, lsl #1]
    15d2:	0195      	.short	0x0195
    15d4:	00e10165 	.word	0x00e10165
    15d8:	007f03bb 	.word	0x007f03bb
    15dc:	02ff      	.short	0x02ff
			tx = mem_acquire(&mem_conn_tx_ctrl.free);
    15de:	4867      	ldr	r0, [pc, #412]	; (177c <ull_conn_llcp+0x324>)
    15e0:	f00e fd1c 	bl	1001c <mem_acquire>
			if (tx) {
    15e4:	b358      	cbz	r0, 163e <ull_conn_llcp+0x1e6>
				conn->llcp_terminate.ack = conn->llcp_terminate.req;
    15e6:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
    15ea:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
				pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    15ee:	7903      	ldrb	r3, [r0, #4]
				pdu_tx->len = offsetof(struct pdu_data_llctrl,
    15f0:	2202      	movs	r2, #2
				pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    15f2:	f043 0303 	orr.w	r3, r3, #3
				pdu_tx->len = offsetof(struct pdu_data_llctrl,
    15f6:	7142      	strb	r2, [r0, #5]
				pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    15f8:	7103      	strb	r3, [r0, #4]
				pdu_tx->llctrl.opcode =
    15fa:	71c2      	strb	r2, [r0, #7]
		struct node_tx *tx, bool pause)
{
	/* check if a packet was tx-ed and not acked by peer */
	if (
			/* data/ctrl packet is in the head */
			conn->tx_head &&
    15fc:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
				pdu_tx->llctrl.terminate_ind.error_code =
    1600:	f894 2106 	ldrb.w	r2, [r4, #262]	; 0x106
    1604:	7202      	strb	r2, [r0, #8]
	if (
    1606:	b333      	cbz	r3, 1656 <ull_conn_llcp+0x1fe>
#if defined(CONFIG_BT_CTLR_LE_ENC)
			!conn->llcp_enc.pause_tx &&
    1608:	f894 212a 	ldrb.w	r2, [r4, #298]	; 0x12a
			conn->tx_head &&
    160c:	0791      	lsls	r1, r2, #30
    160e:	d422      	bmi.n	1656 <ull_conn_llcp+0x1fe>
#endif /* CONFIG_BT_CTLR_LE_ENC */
#if defined(CONFIG_BT_CTLR_PHY)
			!conn->llcp_phy.pause_tx &&
    1610:	f894 2183 	ldrb.w	r2, [r4, #387]	; 0x183
    1614:	07d2      	lsls	r2, r2, #31
    1616:	d41e      	bmi.n	1656 <ull_conn_llcp+0x1fe>

		/* if data transmitted once, keep it at head of the tx list,
		 * as we will insert a ctrl after it, hence advance the
		 * data pointer
		 */
		if (conn->tx_head == conn->tx_data) {
    1618:	f8d4 2194 	ldr.w	r2, [r4, #404]	; 0x194
    161c:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    161e:	bf04      	itt	eq
    1620:	681a      	ldreq	r2, [r3, #0]
    1622:	f8c4 2194 	streq.w	r2, [r4, #404]	; 0x194
		}

		/* if no ctrl packet already queued, new ctrl added will be
		 * the ctrl pointer and is inserted after head.
		 */
		if (!conn->tx_ctrl) {
    1626:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    162a:	b9c2      	cbnz	r2, 165e <ull_conn_llcp+0x206>
			tx->next = conn->tx_head->next;
    162c:	681a      	ldr	r2, [r3, #0]
    162e:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    1630:	6018      	str	r0, [r3, #0]
			 * control PDU in Encryption Procedure that is not
			 * implicitly paused, will set the control and control
			 * last marker.
			 */
			if (!pause) {
				conn->tx_ctrl = tx;
    1632:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
    1634:	e9c4 0063 	strd	r0, r0, [r4, #396]	; 0x18c
			ctrl_tx_last_enqueue(conn, tx);
		}
	}

	/* Update last pointer if ctrl added at end of tx list */
	if (!tx->next) {
    1638:	b90b      	cbnz	r3, 163e <ull_conn_llcp+0x1e6>
		conn->tx_data_last = tx;
    163a:	f8c4 0198 	str.w	r0, [r4, #408]	; 0x198
			if (!conn->procedure_expire) {
    163e:	f8b4 00b0 	ldrh.w	r0, [r4, #176]	; 0xb0
    1642:	2800      	cmp	r0, #0
    1644:	f47f af53 	bne.w	14ee <ull_conn_llcp+0x96>
				conn->procedure_expire = conn->supervision_reload;
    1648:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
				if (conn->procedure_expire <= 1U) {
    164c:	2b01      	cmp	r3, #1
    164e:	d933      	bls.n	16b8 <ull_conn_llcp+0x260>
				conn->procedure_expire = conn->supervision_reload;
    1650:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
    1654:	e74b      	b.n	14ee <ull_conn_llcp+0x96>
		if (!conn->tx_ctrl) {
    1656:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    165a:	2a00      	cmp	r2, #0
    165c:	d032      	beq.n	16c4 <ull_conn_llcp+0x26c>
	tx->next = conn->tx_ctrl_last->next;
    165e:	f8d4 3190 	ldr.w	r3, [r4, #400]	; 0x190
    1662:	681a      	ldr	r2, [r3, #0]
    1664:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    1666:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
    1668:	f8c4 0190 	str.w	r0, [r4, #400]	; 0x190
    166c:	6803      	ldr	r3, [r0, #0]
}
    166e:	e7e3      	b.n	1638 <ull_conn_llcp+0x1e0>
    1670:	f005 fc96 	bl	6fa0 <z_timer_cycle_get_32>
		stop_cycle[old_handle] = k_cycle_get_32();
    1674:	f8db 5000 	ldr.w	r5, [fp]
    1678:	4b3b      	ldr	r3, [pc, #236]	; (1768 <ull_conn_llcp+0x310>)
		array4[old_handle] ++;
    167a:	4941      	ldr	r1, [pc, #260]	; (1780 <ull_conn_llcp+0x328>)
		stop_cycle[old_handle] = k_cycle_get_32();
    167c:	f843 0035 	str.w	r0, [r3, r5, lsl #3]
    1680:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
    1684:	2000      	movs	r0, #0
		array4[old_handle] ++;
    1686:	f851 2025 	ldr.w	r2, [r1, r5, lsl #2]
		stop_cycle[old_handle] = k_cycle_get_32();
    168a:	6058      	str	r0, [r3, #4]
		BLEX_cnt2 ++;
    168c:	683b      	ldr	r3, [r7, #0]
		array4[old_handle] ++;
    168e:	3201      	adds	r2, #1
		BLEX_cnt2 ++;
    1690:	3301      	adds	r3, #1
		array4[old_handle] ++;
    1692:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
		BLEX_cnt2 ++;
    1696:	603b      	str	r3, [r7, #0]
		array4[old_handle] ++;
    1698:	e705      	b.n	14a6 <ull_conn_llcp+0x4e>
	LL_ASSERT(conn->lll.handle != 0xFFFF);
    169a:	4a3a      	ldr	r2, [pc, #232]	; (1784 <ull_conn_llcp+0x32c>)
    169c:	493a      	ldr	r1, [pc, #232]	; (1788 <ull_conn_llcp+0x330>)
    169e:	483b      	ldr	r0, [pc, #236]	; (178c <ull_conn_llcp+0x334>)
    16a0:	f240 3371 	movw	r3, #881	; 0x371
    16a4:	f01c fc55 	bl	1df52 <printk>
    16a8:	4040      	eors	r0, r0
    16aa:	f380 8811 	msr	BASEPRI, r0
    16ae:	f04f 0003 	mov.w	r0, #3
    16b2:	df02      	svc	2
    16b4:	8da6      	ldrh	r6, [r4, #44]	; 0x2c
    16b6:	e6db      	b.n	1470 <ull_conn_llcp+0x18>
					conn->procedure_expire++;
    16b8:	3301      	adds	r3, #1
    16ba:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
}
    16be:	b00d      	add	sp, #52	; 0x34
    16c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			tx->next = conn->tx_head;
    16c4:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    16c6:	e9c4 0062 	strd	r0, r0, [r4, #392]	; 0x188
				conn->tx_ctrl_last = tx;
    16ca:	f8c4 0190 	str.w	r0, [r4, #400]	; 0x190
    16ce:	e7b3      	b.n	1638 <ull_conn_llcp+0x1e0>
#if defined(CONFIG_BT_CTLR_LE_PING)
	static inline void event_ping_prep(struct ll_conn *conn)
	{
		struct node_tx *tx;

		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    16d0:	482a      	ldr	r0, [pc, #168]	; (177c <ull_conn_llcp+0x324>)
    16d2:	f00e fca3 	bl	1001c <mem_acquire>
		if (tx) {
    16d6:	2800      	cmp	r0, #0
    16d8:	f43f af03 	beq.w	14e2 <ull_conn_llcp+0x8a>
			struct pdu_data *pdu_ctrl_tx = (void *)tx->pdu;

			/* procedure request acked */
			conn->llcp_ack = conn->llcp_req;
    16dc:	f894 30bf 	ldrb.w	r3, [r4, #191]	; 0xbf
    16e0:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0

			/* place the ping req packet as next in tx queue */
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
    16e4:	2301      	movs	r3, #1
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    16e6:	7902      	ldrb	r2, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
    16e8:	7143      	strb	r3, [r0, #5]
			conn->tx_head &&
    16ea:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    16ee:	f042 0203 	orr.w	r2, r2, #3
				sizeof(struct pdu_data_llctrl_ping_req);
			pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
    16f2:	2112      	movs	r1, #18
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    16f4:	7102      	strb	r2, [r0, #4]
			pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
    16f6:	71c1      	strb	r1, [r0, #7]
	if (
    16f8:	2b00      	cmp	r3, #0
    16fa:	f000 8606 	beq.w	230a <ull_conn_llcp+0xeb2>
			!conn->llcp_enc.pause_tx &&
    16fe:	f894 212a 	ldrb.w	r2, [r4, #298]	; 0x12a
			conn->tx_head &&
    1702:	0792      	lsls	r2, r2, #30
    1704:	f100 8601 	bmi.w	230a <ull_conn_llcp+0xeb2>
			!conn->llcp_phy.pause_tx &&
    1708:	f894 2183 	ldrb.w	r2, [r4, #387]	; 0x183
    170c:	07d7      	lsls	r7, r2, #31
    170e:	f100 85fc 	bmi.w	230a <ull_conn_llcp+0xeb2>
		if (conn->tx_head == conn->tx_data) {
    1712:	f8d4 2194 	ldr.w	r2, [r4, #404]	; 0x194
    1716:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    1718:	bf04      	itt	eq
    171a:	681a      	ldreq	r2, [r3, #0]
    171c:	f8c4 2194 	streq.w	r2, [r4, #404]	; 0x194
		if (!conn->tx_ctrl) {
    1720:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    1724:	2a00      	cmp	r2, #0
    1726:	f001 8355 	beq.w	2dd4 <ull_conn_llcp+0x197c>
	tx->next = conn->tx_ctrl_last->next;
    172a:	f8d4 3190 	ldr.w	r3, [r4, #400]	; 0x190
    172e:	681a      	ldr	r2, [r3, #0]
    1730:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    1732:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
    1734:	f8c4 0190 	str.w	r0, [r4, #400]	; 0x190
    1738:	6803      	ldr	r3, [r0, #0]
	if (!tx->next) {
    173a:	2b00      	cmp	r3, #0
    173c:	f000 87d0 	beq.w	26e0 <ull_conn_llcp+0x1288>
			ctrl_tx_enqueue(conn, tx);

			/* Start Procedure Timeout (TODO: this shall not replace
			 * terminate procedure)
			 */
			conn->procedure_expire = conn->procedure_reload;
    1740:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
    1744:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
    1748:	e6cb      	b.n	14e2 <ull_conn_llcp+0x8a>
    174a:	bf00      	nop
    174c:	3b9aca00 	.word	0x3b9aca00
    1750:	431bde83 	.word	0x431bde83
    1754:	2000048c 	.word	0x2000048c
    1758:	200032cc 	.word	0x200032cc
    175c:	200076e0 	.word	0x200076e0
    1760:	20001ab8 	.word	0x20001ab8
    1764:	20006998 	.word	0x20006998
    1768:	20001ad8 	.word	0x20001ad8
    176c:	000f423f 	.word	0x000f423f
    1770:	20005300 	.word	0x20005300
    1774:	3ff40000 	.word	0x3ff40000
    1778:	200052ec 	.word	0x200052ec
    177c:	20007408 	.word	0x20007408
    1780:	200052dc 	.word	0x200052dc
    1784:	00024438 	.word	0x00024438
    1788:	0002455c 	.word	0x0002455c
    178c:	00023ff4 	.word	0x00023ff4
    1790:	200076e4 	.word	0x200076e4
	if (conn->llcp.encryption.state) {
    1794:	f894 30c4 	ldrb.w	r3, [r4, #196]	; 0xc4
    1798:	f013 0603 	ands.w	r6, r3, #3
    179c:	f000 84b2 	beq.w	2104 <ull_conn_llcp+0xcac>
		if (lll->role &&
    17a0:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
    17a4:	2b00      	cmp	r3, #0
    17a6:	f6bf ae9c 	bge.w	14e2 <ull_conn_llcp+0x8a>
    17aa:	2e01      	cmp	r6, #1
    17ac:	f47f ae99 	bne.w	14e2 <ull_conn_llcp+0x8a>
	{
		struct pdu_data *pdu_ctrl_tx;
		struct node_tx *tx;

		/* acquire tx mem */
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    17b0:	4851      	ldr	r0, [pc, #324]	; (18f8 <ull_conn_llcp+0x4a0>)
    17b2:	f00e fc33 	bl	1001c <mem_acquire>
		if (!tx) {
    17b6:	4605      	mov	r5, r0
    17b8:	2800      	cmp	r0, #0
    17ba:	f43f ae92 	beq.w	14e2 <ull_conn_llcp+0x8a>
			return -ENOBUFS;
		}

		pdu_ctrl_tx = (void *)tx->pdu;
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    17be:	7903      	ldrb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
    17c0:	220d      	movs	r2, #13
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    17c2:	f043 0303 	orr.w	r3, r3, #3
			sizeof(struct pdu_data_llctrl_enc_rsp);
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
    17c6:	2704      	movs	r7, #4
		BUILD_ASSERT(offsetof(__typeof(pdu_ctrl_tx->llctrl.enc_rsp), ivs) ==
				(offsetof(__typeof(pdu_ctrl_tx->llctrl.enc_rsp), skds) +
				 sizeof(pdu_ctrl_tx->llctrl.enc_rsp.skds)));

		/* NOTE: if not sufficient random numbers, ignore waiting */
		lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_rsp.skds,
    17c8:	f100 0608 	add.w	r6, r0, #8
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    17cc:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
    17ce:	7142      	strb	r2, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
    17d0:	71c7      	strb	r7, [r0, #7]
		lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_rsp.skds,
    17d2:	210c      	movs	r1, #12
    17d4:	4630      	mov	r0, r6
    17d6:	f017 ffa1 	bl	1971c <lll_csrand_isr_get>
				sizeof(pdu_ctrl_tx->llctrl.enc_rsp.skds) +
				sizeof(pdu_ctrl_tx->llctrl.enc_rsp.ivs));

		/* things from slave stored for session key calculation */
		memcpy(&conn->llcp.encryption.skd[8],
    17da:	4631      	mov	r1, r6
    17dc:	2208      	movs	r2, #8
    17de:	f104 00ce 	add.w	r0, r4, #206	; 0xce
    17e2:	f01e fb48 	bl	1fe76 <memcpy>
				&pdu_ctrl_tx->llctrl.enc_rsp.skds[0], 8);
		memcpy(&conn->lll.ccm_rx.iv[4],
    17e6:	463a      	mov	r2, r7
    17e8:	f105 0110 	add.w	r1, r5, #16
    17ec:	f104 0080 	add.w	r0, r4, #128	; 0x80
    17f0:	f01e fb41 	bl	1fe76 <memcpy>
			conn->tx_head &&
    17f4:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
	if (
    17f8:	2b00      	cmp	r3, #0
    17fa:	f001 80dc 	beq.w	29b6 <ull_conn_llcp+0x155e>
			!conn->llcp_enc.pause_tx &&
    17fe:	f894 212a 	ldrb.w	r2, [r4, #298]	; 0x12a
			conn->tx_head &&
    1802:	0797      	lsls	r7, r2, #30
    1804:	f101 80d7 	bmi.w	29b6 <ull_conn_llcp+0x155e>
			!conn->llcp_phy.pause_tx &&
    1808:	f894 2183 	ldrb.w	r2, [r4, #387]	; 0x183
    180c:	07d6      	lsls	r6, r2, #31
    180e:	f101 80d2 	bmi.w	29b6 <ull_conn_llcp+0x155e>
		if (conn->tx_head == conn->tx_data) {
    1812:	f8d4 2194 	ldr.w	r2, [r4, #404]	; 0x194
    1816:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    1818:	bf04      	itt	eq
    181a:	681a      	ldreq	r2, [r3, #0]
    181c:	f8c4 2194 	streq.w	r2, [r4, #404]	; 0x194
		if (!conn->tx_ctrl) {
    1820:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    1824:	2a00      	cmp	r2, #0
    1826:	f001 8321 	beq.w	2e6c <ull_conn_llcp+0x1a14>
	tx->next = conn->tx_ctrl_last->next;
    182a:	f8d4 3190 	ldr.w	r3, [r4, #400]	; 0x190
    182e:	681a      	ldr	r2, [r3, #0]
    1830:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
    1832:	601d      	str	r5, [r3, #0]
	conn->tx_ctrl_last = tx;
    1834:	f8c4 5190 	str.w	r5, [r4, #400]	; 0x190
    1838:	682b      	ldr	r3, [r5, #0]
	if (!tx->next) {
    183a:	2b00      	cmp	r3, #0
    183c:	f001 82b2 	beq.w	2da4 <ull_conn_llcp+0x194c>
			rx = ll_pdu_rx_alloc();
    1840:	f012 fe36 	bl	144b0 <ll_pdu_rx_alloc>
			if (!rx) {
    1844:	4605      	mov	r5, r0
    1846:	2800      	cmp	r0, #0
    1848:	f43f ae4b 	beq.w	14e2 <ull_conn_llcp+0x8a>
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    184c:	7f2b      	ldrb	r3, [r5, #28]
			rx->hdr.handle = conn->lll.handle;
    184e:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
    1850:	80ea      	strh	r2, [r5, #6]
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    1852:	f043 0303 	orr.w	r3, r3, #3
			rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1856:	2602      	movs	r6, #2
			pdu->len = offsetof(struct pdu_data_llctrl, enc_req) +
    1858:	2117      	movs	r1, #23
			pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    185a:	2203      	movs	r2, #3
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    185c:	772b      	strb	r3, [r5, #28]
			pdu->len = offsetof(struct pdu_data_llctrl, enc_req) +
    185e:	7769      	strb	r1, [r5, #29]
			pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    1860:	77ea      	strb	r2, [r5, #31]
			memcpy(&pdu->llctrl.enc_req.rand[0],
    1862:	f204 112d 	addw	r1, r4, #301	; 0x12d
    1866:	2208      	movs	r2, #8
			rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1868:	712e      	strb	r6, [r5, #4]
			memcpy(&pdu->llctrl.enc_req.rand[0],
    186a:	f105 0020 	add.w	r0, r5, #32
    186e:	f01e fb02 	bl	1fe76 <memcpy>
			pdu->llctrl.enc_req.ediv[0] = conn->llcp_enc.ediv[0];
    1872:	f894 312b 	ldrb.w	r3, [r4, #299]	; 0x12b
    1876:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
			pdu->llctrl.enc_req.ediv[1] = conn->llcp_enc.ediv[1];
    187a:	f894 312c 	ldrb.w	r3, [r4, #300]	; 0x12c
    187e:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
			ll_rx_put(rx->hdr.link, rx);
    1882:	6828      	ldr	r0, [r5, #0]
    1884:	4629      	mov	r1, r5
    1886:	f012 fddf 	bl	14448 <ll_rx_put>
			ll_rx_sched();
    188a:	f012 fde7 	bl	1445c <ll_rx_sched>
			conn->llcp.encryption.state = LLCP_ENC_STATE_LTK_WAIT;
    188e:	f894 30c4 	ldrb.w	r3, [r4, #196]	; 0xc4
    1892:	f366 0301 	bfi	r3, r6, #0, #2
    1896:	f884 30c4 	strb.w	r3, [r4, #196]	; 0xc4
    189a:	e622      	b.n	14e2 <ull_conn_llcp+0x8a>
						event_counter = lll->event_counter +
    189c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    189e:	8e61      	ldrh	r1, [r4, #50]	; 0x32
	if (conn->llcp.chan_map.initiate) {
    18a0:	f894 20c4 	ldrb.w	r2, [r4, #196]	; 0xc4
						event_counter = lll->event_counter +
    18a4:	440b      	add	r3, r1
							lll->latency_prepare + lazy;
    18a6:	4499      	add	r9, r3
	if (conn->llcp.chan_map.initiate) {
    18a8:	07d0      	lsls	r0, r2, #31
						event_counter = lll->event_counter +
    18aa:	fa1f f989 	uxth.w	r9, r9
	if (conn->llcp.chan_map.initiate) {
    18ae:	f100 836f 	bmi.w	1f90 <ull_conn_llcp+0xb38>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
    18b2:	f8b4 30ca 	ldrh.w	r3, [r4, #202]	; 0xca
    18b6:	eba9 0903 	sub.w	r9, r9, r3
    18ba:	f419 4f00 	tst.w	r9, #32768	; 0x8000
    18be:	f47f ae10 	bne.w	14e2 <ull_conn_llcp+0x8a>
		conn->llcp_ack = conn->llcp_req;
    18c2:	f894 30bf 	ldrb.w	r3, [r4, #191]	; 0xbf
    18c6:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
		memcpy(&lll->data_chan_map[0],
    18ca:	f104 0538 	add.w	r5, r4, #56	; 0x38
    18ce:	2205      	movs	r2, #5
    18d0:	f104 01c5 	add.w	r1, r4, #197	; 0xc5
    18d4:	4628      	mov	r0, r5
    18d6:	f01e face 	bl	1fe76 <memcpy>
			util_ones_count_get(&lll->data_chan_map[0],
    18da:	4628      	mov	r0, r5
    18dc:	2105      	movs	r1, #5
    18de:	f00e fd6b 	bl	103b8 <util_ones_count_get>
		lll->data_chan_count =
    18e2:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
		conn->chm_updated = 1U;
    18e6:	2201      	movs	r2, #1
		lll->data_chan_count =
    18e8:	f360 0305 	bfi	r3, r0, #0, #6
    18ec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
		conn->chm_updated = 1U;
    18f0:	f884 219c 	strb.w	r2, [r4, #412]	; 0x19c
    18f4:	e5f5      	b.n	14e2 <ull_conn_llcp+0x8a>
    18f6:	bf00      	nop
    18f8:	20007408 	.word	0x20007408
	conn_upd = conn_upd_curr;
    18fc:	4ea6      	ldr	r6, [pc, #664]	; (1b98 <ull_conn_llcp+0x740>)
	if (!conn_upd) {
    18fe:	6833      	ldr	r3, [r6, #0]
    1900:	2b00      	cmp	r3, #0
    1902:	f000 845a 	beq.w	21ba <ull_conn_llcp+0xd62>
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    1906:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
    1908:	8e62      	ldrh	r2, [r4, #50]	; 0x32
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    190a:	f894 30de 	ldrb.w	r3, [r4, #222]	; 0xde
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    190e:	4415      	add	r5, r2
    1910:	444d      	add	r5, r9
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    1912:	f013 0303 	ands.w	r3, r3, #3
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    1916:	b2ad      	uxth	r5, r5
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    1918:	f040 82cc 	bne.w	1eb4 <ull_conn_llcp+0xa5c>
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
    191c:	f8b4 70c4 	ldrh.w	r7, [r4, #196]	; 0xc4
    1920:	1bea      	subs	r2, r5, r7
    1922:	fa1f f882 	uxth.w	r8, r2
	} else if (instant_latency <= 0x7FFF) {
    1926:	0412      	lsls	r2, r2, #16
    1928:	f53f addb 	bmi.w	14e2 <ull_conn_llcp+0x8a>
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    192c:	f894 1148 	ldrb.w	r1, [r4, #328]	; 0x148
    1930:	f894 2149 	ldrb.w	r2, [r4, #329]	; 0x149
		conn->llcp_cu.ack = conn->llcp_cu.req;
    1934:	f894 00dc 	ldrb.w	r0, [r4, #220]	; 0xdc
    1938:	f884 00dd 	strb.w	r0, [r4, #221]	; 0xdd
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    193c:	428a      	cmp	r2, r1
		conn->llcp_ack = conn->llcp_req;
    193e:	f894 00bf 	ldrb.w	r0, [r4, #191]	; 0xbf
    1942:	f884 00c0 	strb.w	r0, [r4, #192]	; 0xc0
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    1946:	d009      	beq.n	195c <ull_conn_llcp+0x504>
				(conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
    1948:	f894 214a 	ldrb.w	r2, [r4, #330]	; 0x14a
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    194c:	f002 0207 	and.w	r2, r2, #7
    1950:	2a05      	cmp	r2, #5
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    1952:	bf04      	itt	eq
    1954:	f884 1149 	strbeq.w	r1, [r4, #329]	; 0x149
			conn->procedure_expire = 0U;
    1958:	f8a4 30b0 	strheq.w	r3, [r4, #176]	; 0xb0
		if (conn_upd_curr == conn) {
    195c:	6833      	ldr	r3, [r6, #0]
    195e:	429c      	cmp	r4, r3
	conn_upd_curr = NULL;
    1960:	bf04      	itt	eq
    1962:	2300      	moveq	r3, #0
    1964:	6033      	streq	r3, [r6, #0]
		rx = conn->llcp_rx;
    1966:	f8d4 60d8 	ldr.w	r6, [r4, #216]	; 0xd8
		LL_ASSERT(rx && rx->hdr.link);
    196a:	2e00      	cmp	r6, #0
    196c:	f000 84f7 	beq.w	235e <ull_conn_llcp+0xf06>
    1970:	6830      	ldr	r0, [r6, #0]
    1972:	2800      	cmp	r0, #0
    1974:	f000 84f3 	beq.w	235e <ull_conn_llcp+0xf06>
		if ((conn->llcp_cu.interval != lll->interval) ||
    1978:	f8b4 30e0 	ldrh.w	r3, [r4, #224]	; 0xe0
    197c:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
		conn->llcp_rx = rx->hdr.link->mem;
    197e:	6841      	ldr	r1, [r0, #4]
    1980:	f8c4 10d8 	str.w	r1, [r4, #216]	; 0xd8
		if ((conn->llcp_cu.interval != lll->interval) ||
    1984:	4293      	cmp	r3, r2
    1986:	f8b4 10e2 	ldrh.w	r1, [r4, #226]	; 0xe2
    198a:	f8b4 c0e4 	ldrh.w	ip, [r4, #228]	; 0xe4
    198e:	f000 85dd 	beq.w	254c <ull_conn_llcp+0x10f4>
			rx->hdr.handle = lll->handle;
    1992:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
    1994:	80f2      	strh	r2, [r6, #6]
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    1996:	f04f 0e0b 	mov.w	lr, #11
			cu->status = 0x00;
    199a:	2200      	movs	r2, #0
			cu->interval = conn->llcp_cu.interval;
    199c:	83f3      	strh	r3, [r6, #30]
			cu->latency = conn->llcp_cu.latency;
    199e:	8431      	strh	r1, [r6, #32]
			cu->timeout = conn->llcp_cu.timeout;
    19a0:	f8a6 c022 	strh.w	ip, [r6, #34]	; 0x22
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    19a4:	f886 e004 	strb.w	lr, [r6, #4]
			cu->status = 0x00;
    19a8:	7732      	strb	r2, [r6, #28]
		ll_rx_put(rx->hdr.link, rx);
    19aa:	4631      	mov	r1, r6
    19ac:	f012 fd4c 	bl	14448 <ll_rx_put>
		ll_rx_sched();
    19b0:	f012 fd54 	bl	1445c <ll_rx_sched>
		conn_interval_old = instant_latency * lll->interval;
    19b4:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
		latency = conn_interval_old / conn->llcp_cu.interval;
    19b6:	f8b4 60e0 	ldrh.w	r6, [r4, #224]	; 0xe0
		conn_interval_old = instant_latency * lll->interval;
    19ba:	fb13 f308 	smulbb	r3, r3, r8
    19be:	b29b      	uxth	r3, r3
		latency = conn_interval_old / conn->llcp_cu.interval;
    19c0:	fbb3 f1f6 	udiv	r1, r3, r6
		conn_interval_new = latency * conn->llcp_cu.interval;
    19c4:	fb16 f201 	smulbb	r2, r6, r1
    19c8:	b292      	uxth	r2, r2
		if (conn_interval_new > conn_interval_old) {
    19ca:	4293      	cmp	r3, r2
		latency = conn_interval_old / conn->llcp_cu.interval;
    19cc:	fa1f f881 	uxth.w	r8, r1
		if (conn_interval_new > conn_interval_old) {
    19d0:	f080 84a7 	bcs.w	2322 <ull_conn_llcp+0xeca>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
    19d4:	1ad3      	subs	r3, r2, r3
    19d6:	4871      	ldr	r0, [pc, #452]	; (1b9c <ull_conn_llcp+0x744>)
    19d8:	f240 42e2 	movw	r2, #1250	; 0x4e2
    19dc:	fb02 f303 	mul.w	r3, r2, r3
    19e0:	fba3 0100 	umull	r0, r1, r3, r0
    19e4:	a36a      	add	r3, pc, #424	; (adr r3, 1b90 <ull_conn_llcp+0x738>)
    19e6:	e9d3 2300 	ldrd	r2, r3, [r3]
    19ea:	f7ff f827 	bl	a3c <__aeabi_uldivmod>
    19ee:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    19f2:	4482      	add	sl, r0
		lll->latency_prepare += lazy;
    19f4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
		lll->latency_prepare -= (instant_latency - latency);
    19f6:	1b7d      	subs	r5, r7, r5
		lll->latency_prepare += lazy;
    19f8:	4499      	add	r9, r3
		} else if (!lll->role) {
    19fa:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
		lll->latency_prepare -= (instant_latency - latency);
    19fe:	44a8      	add	r8, r5
    1a00:	44c8      	add	r8, r9
		} else if (!lll->role) {
    1a02:	2b00      	cmp	r3, #0
		conn_interval_us = conn->llcp_cu.interval * 1250U;
    1a04:	f240 49e2 	movw	r9, #1250	; 0x4e2
		lll->latency_prepare -= (instant_latency - latency);
    1a08:	f8a4 8032 	strh.w	r8, [r4, #50]	; 0x32
		conn_interval_us = conn->llcp_cu.interval * 1250U;
    1a0c:	fb09 f806 	mul.w	r8, r9, r6
		} else if (!lll->role) {
    1a10:	f2c0 85eb 	blt.w	25ea <ull_conn_llcp+0x1192>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    1a14:	4f61      	ldr	r7, [pc, #388]	; (1b9c <ull_conn_llcp+0x744>)
    1a16:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
    1a1a:	a35d      	add	r3, pc, #372	; (adr r3, 1b90 <ull_conn_llcp+0x738>)
    1a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
    1a20:	fba0 0107 	umull	r0, r1, r0, r7
    1a24:	f7ff f80a 	bl	a3c <__aeabi_uldivmod>
    1a28:	4684      	mov	ip, r0
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0*1250U);
    1a2a:	f8b4 0158 	ldrh.w	r0, [r4, #344]	; 0x158
    1a2e:	fb09 f000 	mul.w	r0, r9, r0
    1a32:	a357      	add	r3, pc, #348	; (adr r3, 1b90 <ull_conn_llcp+0x738>)
    1a34:	e9d3 2300 	ldrd	r2, r3, [r3]
    1a38:	fba0 0107 	umull	r0, r1, r0, r7
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    1a3c:	f02c 477f 	bic.w	r7, ip, #4278190080	; 0xff000000
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0*1250U);
    1a40:	f7fe fffc 	bl	a3c <__aeabi_uldivmod>
			need_schedule_update = need_schedule_cnt;
    1a44:	4956      	ldr	r1, [pc, #344]	; (1ba0 <ull_conn_llcp+0x748>)
    1a46:	4b57      	ldr	r3, [pc, #348]	; (1ba4 <ull_conn_llcp+0x74c>)
			need_conn_update = false;
    1a48:	4a57      	ldr	r2, [pc, #348]	; (1ba8 <ull_conn_llcp+0x750>)
			need_schedule_update = need_schedule_cnt;
    1a4a:	6809      	ldr	r1, [r1, #0]
    1a4c:	6019      	str	r1, [r3, #0]
			conn->llcp_conn_param.offset0 = 0;
    1a4e:	2300      	movs	r3, #0
			ticks_win_offset += 1U;
    1a50:	3701      	adds	r7, #1
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0*1250U);
    1a52:	4482      	add	sl, r0
			need_conn_update = false;
    1a54:	7013      	strb	r3, [r2, #0]
			conn->llcp_conn_param.offset0 = 0;
    1a56:	f8a4 3158 	strh.w	r3, [r4, #344]	; 0x158
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    1a5a:	f8b4 20e4 	ldrh.w	r2, [r4, #228]	; 0xe4
		lll->latency = conn->llcp_cu.latency;
    1a5e:	f8b4 00e2 	ldrh.w	r0, [r4, #226]	; 0xe2
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1a62:	4b52      	ldr	r3, [pc, #328]	; (1bac <ull_conn_llcp+0x754>)
		lll->interval = conn->llcp_cu.interval;
    1a64:	85e6      	strh	r6, [r4, #46]	; 0x2e
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    1a66:	f242 7610 	movw	r6, #10000	; 0x2710
    1a6a:	fb06 8202 	mla	r2, r6, r2, r8
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    1a6e:	4950      	ldr	r1, [pc, #320]	; (1bb0 <ull_conn_llcp+0x758>)
		lll->latency = conn->llcp_cu.latency;
    1a70:	8620      	strh	r0, [r4, #48]	; 0x30
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1a72:	4443      	add	r3, r8
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1a74:	1d86      	adds	r6, r0, #6
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    1a76:	3a01      	subs	r2, #1
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1a78:	fbb3 f3f8 	udiv	r3, r3, r8
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    1a7c:	fbb2 f2f8 	udiv	r2, r2, r8
    1a80:	f8a4 20aa 	strh.w	r2, [r4, #170]	; 0xaa
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1a84:	b29a      	uxth	r2, r3
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1a86:	42b2      	cmp	r2, r6
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    1a88:	4441      	add	r1, r8
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1a8a:	f8a4 20b6 	strh.w	r2, [r4, #182]	; 0xb6
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    1a8e:	fbb1 f1f8 	udiv	r1, r1, r8
    1a92:	f8a4 10ae 	strh.w	r1, [r4, #174]	; 0xae
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1a96:	dd02      	ble.n	1a9e <ull_conn_llcp+0x646>
			(conn->apto_reload - (lll->latency + 6)) :
    1a98:	1a12      	subs	r2, r2, r0
    1a9a:	3a06      	subs	r2, #6
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1a9c:	b292      	uxth	r2, r2
		if (conn->llcp_cu.cmd) {
    1a9e:	f894 30de 	ldrb.w	r3, [r4, #222]	; 0xde
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1aa2:	f8a4 20b2 	strh.w	r2, [r4, #178]	; 0xb2
		if (conn->llcp_cu.cmd) {
    1aa6:	075d      	lsls	r5, r3, #29
			conn->supervision_expire = 0U;
    1aa8:	bf44      	itt	mi
    1aaa:	2300      	movmi	r3, #0
    1aac:	f8a4 30ac 	strhmi.w	r3, [r4, #172]	; 0xac
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
    1ab0:	2102      	movs	r1, #2
    1ab2:	2001      	movs	r0, #1
    1ab4:	f019 fd92 	bl	1b5dc <mayfly_is_enabled>
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
    1ab8:	2200      	movs	r2, #0
    1aba:	2102      	movs	r1, #2
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
    1abc:	4606      	mov	r6, r0
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
    1abe:	2001      	movs	r0, #1
    1ac0:	f00e fb50 	bl	10164 <mayfly_enable>
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
    1ac4:	493b      	ldr	r1, [pc, #236]	; (1bb4 <ull_conn_llcp+0x75c>)
    1ac6:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
    1aca:	4620      	mov	r0, r4
    1acc:	f00e fadc 	bl	10088 <mem_index_get>
		ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    1ad0:	1cc2      	adds	r2, r0, #3
    1ad2:	fa5f fb82 	uxtb.w	fp, r2
		ticker_status =	ticker_stop(TICKER_INSTANCE_ID_CTLR,
    1ad6:	4b38      	ldr	r3, [pc, #224]	; (1bb8 <ull_conn_llcp+0x760>)
    1ad8:	9400      	str	r4, [sp, #0]
    1ada:	465a      	mov	r2, fp
    1adc:	2101      	movs	r1, #1
    1ade:	2000      	movs	r0, #0
    1ae0:	f00f ff6c 	bl	119bc <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    1ae4:	f030 0302 	bics.w	r3, r0, #2
    1ae8:	d00c      	beq.n	1b04 <ull_conn_llcp+0x6ac>
    1aea:	4a34      	ldr	r2, [pc, #208]	; (1bbc <ull_conn_llcp+0x764>)
    1aec:	4934      	ldr	r1, [pc, #208]	; (1bc0 <ull_conn_llcp+0x768>)
    1aee:	4835      	ldr	r0, [pc, #212]	; (1bc4 <ull_conn_llcp+0x76c>)
    1af0:	f640 5335 	movw	r3, #3381	; 0xd35
    1af4:	f01c fa2d 	bl	1df52 <printk>
    1af8:	4040      	eors	r0, r0
    1afa:	f380 8811 	msr	BASEPRI, r0
    1afe:	f04f 0003 	mov.w	r0, #3
    1b02:	df02      	svc	2
					HAL_TICKER_US_TO_TICKS(periodic_us),
    1b04:	4925      	ldr	r1, [pc, #148]	; (1b9c <ull_conn_llcp+0x744>)
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1b06:	68e3      	ldr	r3, [r4, #12]
    1b08:	4a2f      	ldr	r2, [pc, #188]	; (1bc8 <ull_conn_llcp+0x770>)
    1b0a:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 1bcc <ull_conn_llcp+0x774>
    1b0e:	9304      	str	r3, [sp, #16]
					HAL_TICKER_US_TO_TICKS(periodic_us),
    1b10:	fba8 8901 	umull	r8, r9, r8, r1
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1b14:	2500      	movs	r5, #0
    1b16:	9207      	str	r2, [sp, #28]
					HAL_TICKER_REMAINDER(periodic_us),
    1b18:	4640      	mov	r0, r8
    1b1a:	a31d      	add	r3, pc, #116	; (adr r3, 1b90 <ull_conn_llcp+0x738>)
    1b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
    1b20:	4649      	mov	r1, r9
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1b22:	f8cd c014 	str.w	ip, [sp, #20]
    1b26:	9408      	str	r4, [sp, #32]
    1b28:	9406      	str	r4, [sp, #24]
    1b2a:	9503      	str	r5, [sp, #12]
					HAL_TICKER_REMAINDER(periodic_us),
    1b2c:	f7fe ff86 	bl	a3c <__aeabi_uldivmod>
    1b30:	4610      	mov	r0, r2
    1b32:	4619      	mov	r1, r3
    1b34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1b38:	2300      	movs	r3, #0
    1b3a:	f7fe ff7f 	bl	a3c <__aeabi_uldivmod>
					HAL_TICKER_US_TO_TICKS(periodic_us),
    1b3e:	a314      	add	r3, pc, #80	; (adr r3, 1b90 <ull_conn_llcp+0x738>)
    1b40:	e9d3 2300 	ldrd	r2, r3, [r3]
					HAL_TICKER_REMAINDER(periodic_us),
    1b44:	4604      	mov	r4, r0
					HAL_TICKER_US_TO_TICKS(periodic_us),
    1b46:	4649      	mov	r1, r9
    1b48:	4640      	mov	r0, r8
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1b4a:	9402      	str	r4, [sp, #8]
					HAL_TICKER_US_TO_TICKS(periodic_us),
    1b4c:	f7fe ff76 	bl	a3c <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1b50:	4653      	mov	r3, sl
					HAL_TICKER_US_TO_TICKS(periodic_us),
    1b52:	9001      	str	r0, [sp, #4]
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1b54:	9700      	str	r7, [sp, #0]
    1b56:	4628      	mov	r0, r5
    1b58:	465a      	mov	r2, fp
    1b5a:	2101      	movs	r1, #1
    1b5c:	f00f fec2 	bl	118e4 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    1b60:	f030 0302 	bics.w	r3, r0, #2
    1b64:	d00c      	beq.n	1b80 <ull_conn_llcp+0x728>
    1b66:	4a15      	ldr	r2, [pc, #84]	; (1bbc <ull_conn_llcp+0x764>)
    1b68:	4915      	ldr	r1, [pc, #84]	; (1bc0 <ull_conn_llcp+0x768>)
    1b6a:	4816      	ldr	r0, [pc, #88]	; (1bc4 <ull_conn_llcp+0x76c>)
    1b6c:	f640 534f 	movw	r3, #3407	; 0xd4f
    1b70:	f01c f9ef 	bl	1df52 <printk>
    1b74:	4040      	eors	r0, r0
    1b76:	f380 8811 	msr	BASEPRI, r0
    1b7a:	f04f 0003 	mov.w	r0, #3
    1b7e:	df02      	svc	2
		if (mayfly_was_enabled) {
    1b80:	2e00      	cmp	r6, #0
    1b82:	f040 84fc 	bne.w	257e <ull_conn_llcp+0x1126>
							return -ECANCELED;
    1b86:	f06f 0047 	mvn.w	r0, #71	; 0x47
    1b8a:	e4b1      	b.n	14f0 <ull_conn_llcp+0x98>
    1b8c:	f3af 8000 	nop.w
    1b90:	1afd498d 	.word	0x1afd498d
    1b94:	00000007 	.word	0x00000007
    1b98:	20006980 	.word	0x20006980
    1b9c:	3b9aca00 	.word	0x3b9aca00
    1ba0:	200005e8 	.word	0x200005e8
    1ba4:	200005ec 	.word	0x200005ec
    1ba8:	20009c3e 	.word	0x20009c3e
    1bac:	01c9c37f 	.word	0x01c9c37f
    1bb0:	026259ff 	.word	0x026259ff
    1bb4:	20006300 	.word	0x20006300
    1bb8:	00014e8d 	.word	0x00014e8d
    1bbc:	00024438 	.word	0x00024438
    1bc0:	0002458c 	.word	0x0002458c
    1bc4:	00023ff4 	.word	0x00023ff4
    1bc8:	00014e35 	.word	0x00014e35
    1bcc:	00017d05 	.word	0x00017d05
						event_counter = lll->event_counter +
    1bd0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    1bd2:	8e62      	ldrh	r2, [r4, #50]	; 0x32
		if (conn->llcp.phy_upd_ind.initiate) {
    1bd4:	f894 50c4 	ldrb.w	r5, [r4, #196]	; 0xc4
						event_counter = lll->event_counter +
    1bd8:	4413      	add	r3, r2
							lll->latency_prepare + lazy;
    1bda:	4499      	add	r9, r3
		if (conn->llcp.phy_upd_ind.initiate) {
    1bdc:	07ee      	lsls	r6, r5, #31
						event_counter = lll->event_counter +
    1bde:	fa1f f989 	uxth.w	r9, r9
		if (conn->llcp.phy_upd_ind.initiate) {
    1be2:	46ab      	mov	fp, r5
    1be4:	f100 8232 	bmi.w	204c <ull_conn_llcp+0xbf4>
		} else if (((event_counter - conn->llcp.phy_upd_ind.instant) &
    1be8:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    1bec:	eba9 0903 	sub.w	r9, r9, r3
    1bf0:	f419 4f00 	tst.w	r9, #32768	; 0x8000
    1bf4:	f47f ac75 	bne.w	14e2 <ull_conn_llcp+0x8a>
			old_rx = lll->phy_rx;
    1bf8:	f894 2049 	ldrb.w	r2, [r4, #73]	; 0x49
		if (!conn->common.fex_valid ||
    1bfc:	f894 30be 	ldrb.w	r3, [r4, #190]	; 0xbe
			old_tx = lll->phy_tx;
    1c00:	f894 a048 	ldrb.w	sl, [r4, #72]	; 0x48
			conn->llcp_ack = conn->llcp_req;
    1c04:	f894 10bf 	ldrb.w	r1, [r4, #191]	; 0xbf
			uint16_t eff_rx_time = lll->max_rx_time;
    1c08:	f8b4 8046 	ldrh.w	r8, [r4, #70]	; 0x46
    1c0c:	f8b4 60bc 	ldrh.w	r6, [r4, #188]	; 0xbc
			conn->llcp_ack = conn->llcp_req;
    1c10:	f884 10c0 	strb.w	r1, [r4, #192]	; 0xc0
			old_rx = lll->phy_rx;
    1c14:	f002 0207 	and.w	r2, r2, #7
		if (!conn->common.fex_valid ||
    1c18:	07df      	lsls	r7, r3, #31
			old_rx = lll->phy_rx;
    1c1a:	920a      	str	r2, [sp, #40]	; 0x28
			old_tx = lll->phy_tx;
    1c1c:	f00a 0a07 	and.w	sl, sl, #7
		feature_coded_phy = (conn->llcp_feature.features_conn &
    1c20:	f8d4 20f4 	ldr.w	r2, [r4, #244]	; 0xf4
		if (!conn->common.fex_valid ||
    1c24:	f140 8390 	bpl.w	2348 <ull_conn_llcp+0xef0>
    1c28:	0510      	lsls	r0, r2, #20
    1c2a:	f140 838d 	bpl.w	2348 <ull_conn_llcp+0xef0>
			tx_time = MIN(PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED),
    1c2e:	f244 2990 	movw	r9, #17040	; 0x4290
    1c32:	454e      	cmp	r6, r9
    1c34:	bf28      	it	cs
    1c36:	464e      	movcs	r6, r9
			tx_time = MAX(PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M), tx_time);
    1c38:	f5b6 7fa4 	cmp.w	r6, #328	; 0x148
    1c3c:	bf38      	it	cc
    1c3e:	f44f 76a4 	movcc.w	r6, #328	; 0x148
			if (conn->llcp.phy_upd_ind.tx) {
    1c42:	f015 0f1c 	tst.w	r5, #28
    1c46:	f040 84a3 	bne.w	2590 <ull_conn_llcp+0x1138>
			uint16_t eff_tx_time = lll->max_tx_time;
    1c4a:	f8b4 7044 	ldrh.w	r7, [r4, #68]	; 0x44
			if (conn->llcp.phy_upd_ind.rx) {
    1c4e:	f015 0fe0 	tst.w	r5, #224	; 0xe0
    1c52:	d00c      	beq.n	1c6e <ull_conn_llcp+0x816>
				lll->phy_rx = conn->llcp.phy_upd_ind.rx;
    1c54:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
					calc_eff_time(lll->max_rx_octets, lll->phy_rx,
    1c58:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
				lll->phy_rx = conn->llcp.phy_upd_ind.rx;
    1c5c:	0969      	lsrs	r1, r5, #5
    1c5e:	f361 0302 	bfi	r3, r1, #0, #3
    1c62:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
					calc_eff_time(lll->max_rx_octets, lll->phy_rx,
    1c66:	464a      	mov	r2, r9
    1c68:	f012 ffa6 	bl	14bb8 <calc_eff_time>
    1c6c:	4680      	mov	r8, r0
			lll->phy_flags = conn->phy_pref_flags;
    1c6e:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
    1c72:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
			rx = conn->llcp_rx;
    1c76:	f8d4 50d8 	ldr.w	r5, [r4, #216]	; 0xd8
			lll->phy_flags = conn->phy_pref_flags;
    1c7a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    1c7e:	f363 02c3 	bfi	r2, r3, #3, #1
    1c82:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
			LL_ASSERT(rx && rx->hdr.link);
    1c86:	2d00      	cmp	r5, #0
    1c88:	f000 849d 	beq.w	25c6 <ull_conn_llcp+0x116e>
    1c8c:	6828      	ldr	r0, [r5, #0]
    1c8e:	2800      	cmp	r0, #0
    1c90:	f000 8499 	beq.w	25c6 <ull_conn_llcp+0x116e>
			conn->llcp_rx = rx->hdr.link->mem;
    1c94:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
    1c98:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
    1c9c:	6841      	ldr	r1, [r0, #4]
    1c9e:	f8c4 10d8 	str.w	r1, [r4, #216]	; 0xd8
			if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
    1ca2:	f01b 0f02 	tst.w	fp, #2
    1ca6:	f3c2 0c02 	ubfx	ip, r2, #0, #3
    1caa:	f3c3 0102 	ubfx	r1, r3, #0, #3
    1cae:	f002 0207 	and.w	r2, r2, #7
    1cb2:	f003 0307 	and.w	r3, r3, #7
    1cb6:	d102      	bne.n	1cbe <ull_conn_llcp+0x866>
    1cb8:	4592      	cmp	sl, r2
    1cba:	f000 869f 	beq.w	29fc <ull_conn_llcp+0x15a4>
			rx->hdr.handle = lll->handle;
    1cbe:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    1cc0:	80eb      	strh	r3, [r5, #6]
			rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    1cc2:	220f      	movs	r2, #15
			upd->status = 0U;
    1cc4:	2300      	movs	r3, #0
			upd->rx = lll->phy_rx;
    1cc6:	77a9      	strb	r1, [r5, #30]
			upd->tx = lll->phy_tx;
    1cc8:	f885 c01d 	strb.w	ip, [r5, #29]
			rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    1ccc:	712a      	strb	r2, [r5, #4]
			upd->status = 0U;
    1cce:	772b      	strb	r3, [r5, #28]
			ll_rx_put(rx->hdr.link, rx);
    1cd0:	4629      	mov	r1, r5
    1cd2:	f012 fbb9 	bl	14448 <ll_rx_put>
			rx = conn->llcp_rx;
    1cd6:	f8d4 50d8 	ldr.w	r5, [r4, #216]	; 0xd8
			LL_ASSERT(rx && rx->hdr.link);
    1cda:	2d00      	cmp	r5, #0
    1cdc:	f000 84f0 	beq.w	26c0 <ull_conn_llcp+0x1268>
    1ce0:	6828      	ldr	r0, [r5, #0]
    1ce2:	2800      	cmp	r0, #0
    1ce4:	f000 84ec 	beq.w	26c0 <ull_conn_llcp+0x1268>
			if ((eff_tx_time <= lll->max_tx_time) &&
    1ce8:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
			conn->llcp_rx = rx->hdr.link->mem;
    1cec:	6842      	ldr	r2, [r0, #4]
    1cee:	f8c4 20d8 	str.w	r2, [r4, #216]	; 0xd8
			if ((eff_tx_time <= lll->max_tx_time) &&
    1cf2:	42bb      	cmp	r3, r7
    1cf4:	d308      	bcc.n	1d08 <ull_conn_llcp+0x8b0>
    1cf6:	429e      	cmp	r6, r3
    1cf8:	d306      	bcc.n	1d08 <ull_conn_llcp+0x8b0>
					(eff_rx_time <= lll->max_rx_time) &&
    1cfa:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
					(lll->max_tx_time <= max_tx_time) &&
    1cfe:	4543      	cmp	r3, r8
    1d00:	d302      	bcc.n	1d08 <ull_conn_llcp+0x8b0>
					(eff_rx_time <= lll->max_rx_time) &&
    1d02:	4599      	cmp	r9, r3
    1d04:	f080 868f 	bcs.w	2a26 <ull_conn_llcp+0x15ce>
			lll->max_tx_time = eff_tx_time;
    1d08:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
			lll->max_rx_time = eff_rx_time;
    1d0c:	f8a4 8046 	strh.w	r8, [r4, #70]	; 0x46
			pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
    1d10:	7f2b      	ldrb	r3, [r5, #28]
			rx->hdr.handle = lll->handle;
    1d12:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
    1d14:	80ea      	strh	r2, [r5, #6]
			pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
    1d16:	f043 0303 	orr.w	r3, r3, #3
			rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1d1a:	2102      	movs	r1, #2
			pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
    1d1c:	2209      	movs	r2, #9
			rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1d1e:	7129      	strb	r1, [r5, #4]
			pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
    1d20:	772b      	strb	r3, [r5, #28]
			pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
    1d22:	776a      	strb	r2, [r5, #29]
			lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
    1d24:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
			lr->max_tx_octets = sys_cpu_to_le16(lll->max_tx_octets);
    1d28:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
			lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
    1d2c:	842b      	strh	r3, [r5, #32]
			pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    1d2e:	2315      	movs	r3, #21
			lr->max_tx_octets = sys_cpu_to_le16(lll->max_tx_octets);
    1d30:	84aa      	strh	r2, [r5, #36]	; 0x24
			pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    1d32:	77eb      	strb	r3, [r5, #31]
			ll_rx_put(rx->hdr.link, rx);
    1d34:	4629      	mov	r1, r5
			lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
    1d36:	f8a5 8022 	strh.w	r8, [r5, #34]	; 0x22
			lr->max_tx_time = sys_cpu_to_le16(lll->max_tx_time);
    1d3a:	84ef      	strh	r7, [r5, #38]	; 0x26
			ll_rx_put(rx->hdr.link, rx);
    1d3c:	f012 fb84 	bl	14448 <ll_rx_put>
			ll_rx_sched();
    1d40:	f012 fb8c 	bl	1445c <ll_rx_sched>
    1d44:	f7ff bbcd 	b.w	14e2 <ull_conn_llcp+0x8a>
					LL_ASSERT(0);
    1d48:	4ab9      	ldr	r2, [pc, #740]	; (2030 <ull_conn_llcp+0xbd8>)
    1d4a:	49ba      	ldr	r1, [pc, #744]	; (2034 <ull_conn_llcp+0xbdc>)
    1d4c:	48ba      	ldr	r0, [pc, #744]	; (2038 <ull_conn_llcp+0xbe0>)
    1d4e:	f240 431a 	movw	r3, #1050	; 0x41a
    1d52:	f01c f8fe 	bl	1df52 <printk>
    1d56:	4040      	eors	r0, r0
    1d58:	f380 8811 	msr	BASEPRI, r0
    1d5c:	f04f 0003 	mov.w	r0, #3
    1d60:	df02      	svc	2
					break;
    1d62:	f7ff bbbe 	b.w	14e2 <ull_conn_llcp+0x8a>
			else avg_conn_evt_length[old_handle] = (avg_conn_evt_length[old_handle]*(100-ewma)+(uint32_t)k_cyc_to_ns_floor64(stop_cycle[old_handle]-start_cycle[old_handle])/NSEC_PER_USEC/USEC_PER_MSEC*ewma+50)/100;
    1d66:	4ab5      	ldr	r2, [pc, #724]	; (203c <ull_conn_llcp+0xbe4>)
    1d68:	48b5      	ldr	r0, [pc, #724]	; (2040 <ull_conn_llcp+0xbe8>)
    1d6a:	6812      	ldr	r2, [r2, #0]
    1d6c:	f1c2 0c64 	rsb	ip, r2, #100	; 0x64
    1d70:	fb03 f30c 	mul.w	r3, r3, ip
    1d74:	3332      	adds	r3, #50	; 0x32
    1d76:	fb08 3302 	mla	r3, r8, r2, r3
    1d7a:	fba0 2303 	umull	r2, r3, r0, r3
    1d7e:	095b      	lsrs	r3, r3, #5
    1d80:	f841 3025 	str.w	r3, [r1, r5, lsl #2]
    1d84:	f7ff bb92 	b.w	14ac <ull_conn_llcp+0x54>
			} else if (conn->llcp_feature.ack != conn->llcp_feature.req) {
    1d88:	f894 00f1 	ldrb.w	r0, [r4, #241]	; 0xf1
    1d8c:	f894 60f0 	ldrb.w	r6, [r4, #240]	; 0xf0
    1d90:	42b0      	cmp	r0, r6
    1d92:	d155      	bne.n	1e40 <ull_conn_llcp+0x9e8>
			} else if (conn->llcp_version.ack != conn->llcp_version.req) {
    1d94:	f894 00fd 	ldrb.w	r0, [r4, #253]	; 0xfd
    1d98:	f894 60fc 	ldrb.w	r6, [r4, #252]	; 0xfc
    1d9c:	42b0      	cmp	r0, r6
    1d9e:	f000 82fd 	beq.w	239c <ull_conn_llcp+0xf44>
		if (!((conn->llcp_version.ack - conn->llcp_version.req) & 0x01)) {
    1da2:	1b80      	subs	r0, r0, r6
    1da4:	07c1      	lsls	r1, r0, #31
    1da6:	f57f ab9c 	bpl.w	14e2 <ull_conn_llcp+0x8a>
		if (conn->llcp_version.tx == 0U) {
    1daa:	f894 30fe 	ldrb.w	r3, [r4, #254]	; 0xfe
    1dae:	07da      	lsls	r2, r3, #31
    1db0:	f140 873b 	bpl.w	2c2a <ull_conn_llcp+0x17d2>
		} else if (conn->llcp_version.rx) {
    1db4:	079d      	lsls	r5, r3, #30
    1db6:	f140 8729 	bpl.w	2c0c <ull_conn_llcp+0x17b4>
			rx = ll_pdu_rx_alloc();
    1dba:	f012 fb79 	bl	144b0 <ll_pdu_rx_alloc>
			if (!rx) {
    1dbe:	4601      	mov	r1, r0
    1dc0:	2800      	cmp	r0, #0
    1dc2:	d071      	beq.n	1ea8 <ull_conn_llcp+0xa50>
			conn->llcp_version.ack = conn->llcp_version.req;
    1dc4:	f894 30fc 	ldrb.w	r3, [r4, #252]	; 0xfc
    1dc8:	f884 30fd 	strb.w	r3, [r4, #253]	; 0xfd
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    1dcc:	7f03      	ldrb	r3, [r0, #28]
			rx->hdr.handle = conn->lll.handle;
    1dce:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
    1dd0:	80c2      	strh	r2, [r0, #6]
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    1dd2:	f043 0303 	orr.w	r3, r3, #3
    1dd6:	770b      	strb	r3, [r1, #28]
			rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1dd8:	2002      	movs	r0, #2
			pdu->len = offsetof(struct pdu_data_llctrl, version_ind) +
    1dda:	2206      	movs	r2, #6
			pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    1ddc:	230c      	movs	r3, #12
			rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1dde:	7108      	strb	r0, [r1, #4]
			pdu->len = offsetof(struct pdu_data_llctrl, version_ind) +
    1de0:	774a      	strb	r2, [r1, #29]
			pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    1de2:	77cb      	strb	r3, [r1, #31]
			pdu->llctrl.version_ind.version_number =
    1de4:	f894 00ff 	ldrb.w	r0, [r4, #255]	; 0xff
			pdu->llctrl.version_ind.sub_version_number =
    1de8:	f8b4 3102 	ldrh.w	r3, [r4, #258]	; 0x102
			pdu->llctrl.version_ind.company_id =
    1dec:	f8b4 2100 	ldrh.w	r2, [r4, #256]	; 0x100
    1df0:	f8a1 2021 	strh.w	r2, [r1, #33]	; 0x21
			pdu->llctrl.version_ind.version_number =
    1df4:	f881 0020 	strb.w	r0, [r1, #32]
			pdu->llctrl.version_ind.sub_version_number =
    1df8:	f8a1 3023 	strh.w	r3, [r1, #35]	; 0x23
			ll_rx_put(rx->hdr.link, rx);
    1dfc:	6808      	ldr	r0, [r1, #0]
    1dfe:	f012 fb23 	bl	14448 <ll_rx_put>
			ll_rx_sched();
    1e02:	f012 fb2b 	bl	1445c <ll_rx_sched>
    1e06:	f894 30bf 	ldrb.w	r3, [r4, #191]	; 0xbf
    1e0a:	f894 50c0 	ldrb.w	r5, [r4, #192]	; 0xc0
    1e0e:	f7ff bb63 	b.w	14d8 <ull_conn_llcp+0x80>
		switch (conn->llcp_length.state) {
    1e12:	f002 0107 	and.w	r1, r2, #7
    1e16:	2906      	cmp	r1, #6
    1e18:	f201 816d 	bhi.w	30f6 <ull_conn_llcp+0x1c9e>
    1e1c:	a001      	add	r0, pc, #4	; (adr r0, 1e24 <ull_conn_llcp+0x9cc>)
    1e1e:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    1e22:	bf00      	nop
    1e24:	00002241 	.word	0x00002241
    1e28:	000015c3 	.word	0x000015c3
    1e2c:	000015c3 	.word	0x000015c3
    1e30:	000015c3 	.word	0x000015c3
    1e34:	000021c1 	.word	0x000021c1
    1e38:	000021c1 	.word	0x000021c1
    1e3c:	000015c3 	.word	0x000015c3
		if (!((conn->llcp_feature.ack - conn->llcp_feature.req) & 0x01)) {
    1e40:	1b80      	subs	r0, r0, r6
    1e42:	07c6      	lsls	r6, r0, #31
    1e44:	f57f ab4d 	bpl.w	14e2 <ull_conn_llcp+0x8a>
		if (conn->common.fex_valid) {
    1e48:	f894 10be 	ldrb.w	r1, [r4, #190]	; 0xbe
    1e4c:	f011 0501 	ands.w	r5, r1, #1
    1e50:	f000 83dd 	beq.w	260e <ull_conn_llcp+0x11b6>
			rx = ll_pdu_rx_alloc();
    1e54:	f012 fb2c 	bl	144b0 <ll_pdu_rx_alloc>
			if (!rx) {
    1e58:	4605      	mov	r5, r0
    1e5a:	b328      	cbz	r0, 1ea8 <ull_conn_llcp+0xa50>
			conn->llcp_feature.ack = conn->llcp_feature.req;
    1e5c:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
    1e60:	f884 30f1 	strb.w	r3, [r4, #241]	; 0xf1
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    1e64:	7f03      	ldrb	r3, [r0, #28]
			rx->hdr.handle = conn->lll.handle;
    1e66:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
    1e68:	80c2      	strh	r2, [r0, #6]
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    1e6a:	f043 0303 	orr.w	r3, r3, #3
			pdu->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    1e6e:	2209      	movs	r2, #9
			rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1e70:	2002      	movs	r0, #2
			(void)memset(&pdu->llctrl.feature_rsp.features[0], 0x00,
    1e72:	4639      	mov	r1, r7
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    1e74:	772b      	strb	r3, [r5, #28]
			rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1e76:	7128      	strb	r0, [r5, #4]
			pdu->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    1e78:	776a      	strb	r2, [r5, #29]
			pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
    1e7a:	77ea      	strb	r2, [r5, #31]
			(void)memset(&pdu->llctrl.feature_rsp.features[0], 0x00,
    1e7c:	f105 0020 	add.w	r0, r5, #32
    1e80:	2208      	movs	r2, #8
    1e82:	f01e f823 	bl	1fecc <memset>
			sys_put_le24(conn->llcp_feature.features_peer,
    1e86:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
	dst[0] = val;
    1e8a:	f885 3020 	strb.w	r3, [r5, #32]
	dst[1] = val >> 8;
    1e8e:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[2] = val >> 16;
    1e92:	0c1b      	lsrs	r3, r3, #16
	dst[1] = val >> 8;
    1e94:	f885 2021 	strb.w	r2, [r5, #33]	; 0x21
	dst[2] = val >> 16;
    1e98:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
			ll_rx_put(rx->hdr.link, rx);
    1e9c:	4629      	mov	r1, r5
		ll_rx_put(rx->hdr.link, rx);
    1e9e:	6808      	ldr	r0, [r1, #0]
    1ea0:	f012 fad2 	bl	14448 <ll_rx_put>
		ll_rx_sched();
    1ea4:	f012 fada 	bl	1445c <ll_rx_sched>
			return;
    1ea8:	f894 30bf 	ldrb.w	r3, [r4, #191]	; 0xbf
    1eac:	f894 50c0 	ldrb.w	r5, [r4, #192]	; 0xc0
    1eb0:	f7ff bb12 	b.w	14d8 <ull_conn_llcp+0x80>
		rx = ll_pdu_rx_alloc_peek(1);
    1eb4:	2001      	movs	r0, #1
    1eb6:	f012 fad7 	bl	14468 <ll_pdu_rx_alloc_peek>
		if (!rx) {
    1eba:	4607      	mov	r7, r0
    1ebc:	2800      	cmp	r0, #0
    1ebe:	f43f ab10 	beq.w	14e2 <ull_conn_llcp+0x8a>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1ec2:	4860      	ldr	r0, [pc, #384]	; (2044 <ull_conn_llcp+0xbec>)
    1ec4:	f00e f8aa 	bl	1001c <mem_acquire>
		if (!tx) {
    1ec8:	4606      	mov	r6, r0
    1eca:	2800      	cmp	r0, #0
    1ecc:	f43f ab09 	beq.w	14e2 <ull_conn_llcp+0x8a>
		(void)ll_pdu_rx_alloc();
    1ed0:	f012 faee 	bl	144b0 <ll_pdu_rx_alloc>
	conn->llcp.conn_upd.instant = event_counter + conn->lll.latency + 6;
    1ed4:	8e23      	ldrh	r3, [r4, #48]	; 0x30
		rx->hdr.link->mem = conn->llcp_rx;
    1ed6:	683a      	ldr	r2, [r7, #0]
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    1ed8:	f894 00de 	ldrb.w	r0, [r4, #222]	; 0xde
	conn->llcp.conn_upd.instant = event_counter + conn->lll.latency + 6;
    1edc:	442b      	add	r3, r5
    1ede:	3306      	adds	r3, #6
    1ee0:	b299      	uxth	r1, r3
		rx->hdr.link->mem = conn->llcp_rx;
    1ee2:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
    1ee6:	6053      	str	r3, [r2, #4]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1ee8:	7932      	ldrb	r2, [r6, #4]
	conn->llcp.conn_upd.instant = event_counter + conn->lll.latency + 6;
    1eea:	f8a4 10c4 	strh.w	r1, [r4, #196]	; 0xc4
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    1eee:	f36f 0001 	bfc	r0, #0, #2
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    1ef2:	230c      	movs	r3, #12
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    1ef4:	f884 00de 	strb.w	r0, [r4, #222]	; 0xde
		conn->llcp_rx = rx;
    1ef8:	f8c4 70d8 	str.w	r7, [r4, #216]	; 0xd8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1efc:	f042 0203 	orr.w	r2, r2, #3
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    1f00:	7173      	strb	r3, [r6, #5]
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us / 1250U);
    1f02:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
			conn->tx_head &&
    1f06:	f8d4 0188 	ldr.w	r0, [r4, #392]	; 0x188
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us / 1250U);
    1f0a:	4d4f      	ldr	r5, [pc, #316]	; (2048 <ull_conn_llcp+0xbf0>)
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1f0c:	7132      	strb	r2, [r6, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    1f0e:	2200      	movs	r2, #0
    1f10:	71f2      	strb	r2, [r6, #7]
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us / 1250U);
    1f12:	fba5 2303 	umull	r2, r3, r5, r3
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size = conn->llcp_cu.win_size;
    1f16:	f894 50ec 	ldrb.w	r5, [r4, #236]	; 0xec
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
    1f1a:	f8b4 20e0 	ldrh.w	r2, [r4, #224]	; 0xe0
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size = conn->llcp_cu.win_size;
    1f1e:	7235      	strb	r5, [r6, #8]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_offset =
    1f20:	f3c3 238f 	ubfx	r3, r3, #10, #16
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    1f24:	f8b4 50e2 	ldrh.w	r5, [r4, #226]	; 0xe2
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
    1f28:	f8a6 200b 	strh.w	r2, [r6, #11]
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
    1f2c:	f8b4 20e4 	ldrh.w	r2, [r4, #228]	; 0xe4
    1f30:	f8a6 200f 	strh.w	r2, [r6, #15]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    1f34:	f8a6 500d 	strh.w	r5, [r6, #13]
	pdu_ctrl_tx->llctrl.conn_update_ind.instant =
    1f38:	f8a6 1011 	strh.w	r1, [r6, #17]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_offset =
    1f3c:	f8a6 3009 	strh.w	r3, [r6, #9]
	if (
    1f40:	2800      	cmp	r0, #0
    1f42:	f000 8335 	beq.w	25b0 <ull_conn_llcp+0x1158>
			!conn->llcp_enc.pause_tx &&
    1f46:	f894 312a 	ldrb.w	r3, [r4, #298]	; 0x12a
			conn->tx_head &&
    1f4a:	079d      	lsls	r5, r3, #30
    1f4c:	f100 8330 	bmi.w	25b0 <ull_conn_llcp+0x1158>
			!conn->llcp_phy.pause_tx &&
    1f50:	f894 3183 	ldrb.w	r3, [r4, #387]	; 0x183
    1f54:	07d9      	lsls	r1, r3, #31
    1f56:	f100 832b 	bmi.w	25b0 <ull_conn_llcp+0x1158>
		if (conn->tx_head == conn->tx_data) {
    1f5a:	f8d4 3194 	ldr.w	r3, [r4, #404]	; 0x194
    1f5e:	4298      	cmp	r0, r3
			conn->tx_data = conn->tx_data->next;
    1f60:	bf04      	itt	eq
    1f62:	6803      	ldreq	r3, [r0, #0]
    1f64:	f8c4 3194 	streq.w	r3, [r4, #404]	; 0x194
		if (!conn->tx_ctrl) {
    1f68:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
    1f6c:	2b00      	cmp	r3, #0
    1f6e:	f000 8747 	beq.w	2e00 <ull_conn_llcp+0x19a8>
	tx->next = conn->tx_ctrl_last->next;
    1f72:	f8d4 3190 	ldr.w	r3, [r4, #400]	; 0x190
    1f76:	681a      	ldr	r2, [r3, #0]
    1f78:	6032      	str	r2, [r6, #0]
	conn->tx_ctrl_last->next = tx;
    1f7a:	601e      	str	r6, [r3, #0]
	conn->tx_ctrl_last = tx;
    1f7c:	f8c4 6190 	str.w	r6, [r4, #400]	; 0x190
    1f80:	6830      	ldr	r0, [r6, #0]
	if (!tx->next) {
    1f82:	2800      	cmp	r0, #0
    1f84:	f47f aaad 	bne.w	14e2 <ull_conn_llcp+0x8a>
		conn->tx_data_last = tx;
    1f88:	f8c4 6198 	str.w	r6, [r4, #408]	; 0x198
    1f8c:	f7ff baa9 	b.w	14e2 <ull_conn_llcp+0x8a>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1f90:	482c      	ldr	r0, [pc, #176]	; (2044 <ull_conn_llcp+0xbec>)
    1f92:	f00e f843 	bl	1001c <mem_acquire>
		if (tx) {
    1f96:	4605      	mov	r5, r0
    1f98:	2800      	cmp	r0, #0
    1f9a:	f43f aaa2 	beq.w	14e2 <ull_conn_llcp+0x8a>
			conn->llcp.chan_map.instant = event_counter +
    1f9e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1fa0:	7902      	ldrb	r2, [r0, #4]
			conn->llcp.chan_map.initiate = 0U;
    1fa2:	f894 10c4 	ldrb.w	r1, [r4, #196]	; 0xc4
			conn->llcp.chan_map.instant = event_counter +
    1fa6:	4499      	add	r9, r3
				conn->lll.latency + 6;
    1fa8:	f109 0306 	add.w	r3, r9, #6
			conn->llcp.chan_map.instant = event_counter +
    1fac:	f8a4 30ca 	strh.w	r3, [r4, #202]	; 0xca
			conn->llcp.chan_map.initiate = 0U;
    1fb0:	f36f 0100 	bfc	r1, #0, #1
			pdu_ctrl_tx->llctrl.opcode =
    1fb4:	2301      	movs	r3, #1
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1fb6:	f042 0203 	orr.w	r2, r2, #3
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    1fba:	2008      	movs	r0, #8
			conn->llcp.chan_map.initiate = 0U;
    1fbc:	f884 10c4 	strb.w	r1, [r4, #196]	; 0xc4
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1fc0:	712a      	strb	r2, [r5, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    1fc2:	7168      	strb	r0, [r5, #5]
			pdu_ctrl_tx->llctrl.opcode =
    1fc4:	71eb      	strb	r3, [r5, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
    1fc6:	2205      	movs	r2, #5
    1fc8:	f104 01c5 	add.w	r1, r4, #197	; 0xc5
    1fcc:	1828      	adds	r0, r5, r0
    1fce:	f01d ff52 	bl	1fe76 <memcpy>
			conn->tx_head &&
    1fd2:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
    1fd6:	f8b4 20ca 	ldrh.w	r2, [r4, #202]	; 0xca
    1fda:	f8a5 200d 	strh.w	r2, [r5, #13]
	if (
    1fde:	2b00      	cmp	r3, #0
    1fe0:	f000 83a2 	beq.w	2728 <ull_conn_llcp+0x12d0>
			!conn->llcp_enc.pause_tx &&
    1fe4:	f894 212a 	ldrb.w	r2, [r4, #298]	; 0x12a
			conn->tx_head &&
    1fe8:	0791      	lsls	r1, r2, #30
    1fea:	f100 839d 	bmi.w	2728 <ull_conn_llcp+0x12d0>
			!conn->llcp_phy.pause_tx &&
    1fee:	f894 2183 	ldrb.w	r2, [r4, #387]	; 0x183
    1ff2:	07d2      	lsls	r2, r2, #31
    1ff4:	f100 8398 	bmi.w	2728 <ull_conn_llcp+0x12d0>
		if (conn->tx_head == conn->tx_data) {
    1ff8:	f8d4 2194 	ldr.w	r2, [r4, #404]	; 0x194
    1ffc:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    1ffe:	bf04      	itt	eq
    2000:	681a      	ldreq	r2, [r3, #0]
    2002:	f8c4 2194 	streq.w	r2, [r4, #404]	; 0x194
		if (!conn->tx_ctrl) {
    2006:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    200a:	2a00      	cmp	r2, #0
    200c:	f000 871e 	beq.w	2e4c <ull_conn_llcp+0x19f4>
	tx->next = conn->tx_ctrl_last->next;
    2010:	f8d4 3190 	ldr.w	r3, [r4, #400]	; 0x190
    2014:	681a      	ldr	r2, [r3, #0]
    2016:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
    2018:	601d      	str	r5, [r3, #0]
	conn->tx_ctrl_last = tx;
    201a:	f8c4 5190 	str.w	r5, [r4, #400]	; 0x190
    201e:	682b      	ldr	r3, [r5, #0]
	if (!tx->next) {
    2020:	2b00      	cmp	r3, #0
    2022:	f47f aa5e 	bne.w	14e2 <ull_conn_llcp+0x8a>
		conn->tx_data_last = tx;
    2026:	f8c4 5198 	str.w	r5, [r4, #408]	; 0x198
    202a:	f7ff ba5a 	b.w	14e2 <ull_conn_llcp+0x8a>
    202e:	bf00      	nop
    2030:	00024438 	.word	0x00024438
    2034:	00024064 	.word	0x00024064
    2038:	00023ff4 	.word	0x00023ff4
    203c:	20000494 	.word	0x20000494
    2040:	51eb851f 	.word	0x51eb851f
    2044:	20007408 	.word	0x20007408
    2048:	d1b71759 	.word	0xd1b71759
			rx = ll_pdu_rx_alloc_peek(2);
    204c:	2002      	movs	r0, #2
    204e:	f012 fa0b 	bl	14468 <ll_pdu_rx_alloc_peek>
			if (!rx) {
    2052:	4605      	mov	r5, r0
    2054:	2800      	cmp	r0, #0
    2056:	f43f aa44 	beq.w	14e2 <ull_conn_llcp+0x8a>
			tx = mem_acquire(&mem_conn_tx_ctrl.free);
    205a:	48cb      	ldr	r0, [pc, #812]	; (2388 <ull_conn_llcp+0xf30>)
    205c:	f00d ffde 	bl	1001c <mem_acquire>
			if (!tx) {
    2060:	4607      	mov	r7, r0
    2062:	2800      	cmp	r0, #0
    2064:	f43f aa3d 	beq.w	14e2 <ull_conn_llcp+0x8a>
			conn->llcp.phy_upd_ind.initiate = 0U;
    2068:	f894 30c4 	ldrb.w	r3, [r4, #196]	; 0xc4
    206c:	f36f 0300 	bfc	r3, #0, #1
			if (!((conn->llcp.phy_upd_ind.tx |
    2070:	f3c3 0682 	ubfx	r6, r3, #2, #3
							conn->llcp.phy_upd_ind.rx) & 0x07)) {
    2074:	f3c3 1242 	ubfx	r2, r3, #5, #3
			if (!((conn->llcp.phy_upd_ind.tx |
    2078:	4316      	orrs	r6, r2
			conn->llcp.phy_upd_ind.initiate = 0U;
    207a:	f884 30c4 	strb.w	r3, [r4, #196]	; 0xc4
			if (!((conn->llcp.phy_upd_ind.tx |
    207e:	b2db      	uxtb	r3, r3
    2080:	f040 85a5 	bne.w	2bce <ull_conn_llcp+0x1776>
				conn->llcp_ack = conn->llcp_req;
    2084:	f894 20bf 	ldrb.w	r2, [r4, #191]	; 0xbf
				conn->llcp.phy_upd_ind.instant = 0U;
    2088:	f8a4 60c6 	strh.w	r6, [r4, #198]	; 0xc6
				if (conn->llcp.phy_upd_ind.cmd) {
    208c:	0798      	lsls	r0, r3, #30
				conn->llcp_ack = conn->llcp_req;
    208e:	f884 20c0 	strb.w	r2, [r4, #192]	; 0xc0
				if (conn->llcp.phy_upd_ind.cmd) {
    2092:	f100 8650 	bmi.w	2d36 <ull_conn_llcp+0x18de>
    2096:	4633      	mov	r3, r6
    2098:	4631      	mov	r1, r6
			pdu_ctrl_tx->len =
    209a:	2205      	movs	r2, #5
    209c:	717a      	strb	r2, [r7, #5]
			ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
    209e:	723e      	strb	r6, [r7, #8]
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    20a0:	793a      	ldrb	r2, [r7, #4]
			ind->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
    20a2:	727b      	strb	r3, [r7, #9]
			conn->tx_head &&
    20a4:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
			ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
    20a8:	8179      	strh	r1, [r7, #10]
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    20aa:	f042 0203 	orr.w	r2, r2, #3
			pdu_ctrl_tx->llctrl.opcode =
    20ae:	2118      	movs	r1, #24
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    20b0:	713a      	strb	r2, [r7, #4]
			pdu_ctrl_tx->llctrl.opcode =
    20b2:	71f9      	strb	r1, [r7, #7]
	if (
    20b4:	2b00      	cmp	r3, #0
    20b6:	f000 8317 	beq.w	26e8 <ull_conn_llcp+0x1290>
			!conn->llcp_enc.pause_tx &&
    20ba:	f894 212a 	ldrb.w	r2, [r4, #298]	; 0x12a
			conn->tx_head &&
    20be:	0791      	lsls	r1, r2, #30
    20c0:	f100 8312 	bmi.w	26e8 <ull_conn_llcp+0x1290>
			!conn->llcp_phy.pause_tx &&
    20c4:	f894 2183 	ldrb.w	r2, [r4, #387]	; 0x183
    20c8:	07d2      	lsls	r2, r2, #31
    20ca:	f100 830d 	bmi.w	26e8 <ull_conn_llcp+0x1290>
		if (conn->tx_head == conn->tx_data) {
    20ce:	f8d4 2194 	ldr.w	r2, [r4, #404]	; 0x194
    20d2:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    20d4:	bf04      	itt	eq
    20d6:	681a      	ldreq	r2, [r3, #0]
    20d8:	f8c4 2194 	streq.w	r2, [r4, #404]	; 0x194
		if (!conn->tx_ctrl) {
    20dc:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    20e0:	2a00      	cmp	r2, #0
    20e2:	f000 8695 	beq.w	2e10 <ull_conn_llcp+0x19b8>
	tx->next = conn->tx_ctrl_last->next;
    20e6:	f8d4 3190 	ldr.w	r3, [r4, #400]	; 0x190
    20ea:	681a      	ldr	r2, [r3, #0]
    20ec:	603a      	str	r2, [r7, #0]
	conn->tx_ctrl_last->next = tx;
    20ee:	601f      	str	r7, [r3, #0]
	conn->tx_ctrl_last = tx;
    20f0:	f8c4 7190 	str.w	r7, [r4, #400]	; 0x190
    20f4:	683b      	ldr	r3, [r7, #0]
	if (!tx->next) {
    20f6:	2b00      	cmp	r3, #0
    20f8:	f47f a9f3 	bne.w	14e2 <ull_conn_llcp+0x8a>
		conn->tx_data_last = tx;
    20fc:	f8c4 7198 	str.w	r7, [r4, #408]	; 0x198
    2100:	f7ff b9ef 	b.w	14e2 <ull_conn_llcp+0x8a>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    2104:	48a0      	ldr	r0, [pc, #640]	; (2388 <ull_conn_llcp+0xf30>)
    2106:	f00d ff89 	bl	1001c <mem_acquire>
	if (!tx) {
    210a:	4607      	mov	r7, r0
    210c:	2800      	cmp	r0, #0
    210e:	f43f a9e8 	beq.w	14e2 <ull_conn_llcp+0x8a>
	if (!lll->role) {
    2112:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
    2116:	2b00      	cmp	r3, #0
	pdu_ctrl_tx = (void *)tx->pdu;
    2118:	f100 0804 	add.w	r8, r0, #4
	if (!lll->role) {
    211c:	f280 83eb 	bge.w	28f6 <ull_conn_llcp+0x149e>
		else if (!lll->enc_rx) {
    2120:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
    2124:	0719      	lsls	r1, r3, #28
    2126:	f100 85c5 	bmi.w	2cb4 <ull_conn_llcp+0x185c>
			if (conn->llcp.encryption.error_code) {
    212a:	f894 60c5 	ldrb.w	r6, [r4, #197]	; 0xc5
    212e:	2e00      	cmp	r6, #0
    2130:	f000 8482 	beq.w	2a38 <ull_conn_llcp+0x15e0>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    2134:	7903      	ldrb	r3, [r0, #4]
	if (conn->common.fex_valid &&
    2136:	f894 20be 	ldrb.w	r2, [r4, #190]	; 0xbe
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    213a:	f043 0303 	orr.w	r3, r3, #3
	if (conn->common.fex_valid &&
    213e:	07d2      	lsls	r2, r2, #31
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    2140:	7103      	strb	r3, [r0, #4]
	if (conn->common.fex_valid &&
    2142:	f140 85e4 	bpl.w	2d0e <ull_conn_llcp+0x18b6>
			(conn->llcp_feature.features_conn &
    2146:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
	if (conn->common.fex_valid &&
    214a:	075b      	lsls	r3, r3, #29
    214c:	f140 85df 	bpl.w	2d0e <ull_conn_llcp+0x18b6>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    2150:	2211      	movs	r2, #17
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    2152:	2303      	movs	r3, #3
		p->error_code = conn->llcp.encryption.error_code;
    2154:	7246      	strb	r6, [r0, #9]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    2156:	71c2      	strb	r2, [r0, #7]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    2158:	7203      	strb	r3, [r0, #8]
	pdu->len += offsetof(struct pdu_data_llctrl, reject_ind);
    215a:	717d      	strb	r5, [r7, #5]
			conn->tx_head &&
    215c:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
	conn->llcp.encryption.error_code = 0U;
    2160:	2200      	movs	r2, #0
    2162:	f884 20c5 	strb.w	r2, [r4, #197]	; 0xc5
	if (
    2166:	2b00      	cmp	r3, #0
    2168:	f000 84b0 	beq.w	2acc <ull_conn_llcp+0x1674>
			!conn->llcp_enc.pause_tx &&
    216c:	f894 212a 	ldrb.w	r2, [r4, #298]	; 0x12a
			conn->tx_head &&
    2170:	0796      	lsls	r6, r2, #30
    2172:	f100 84ab 	bmi.w	2acc <ull_conn_llcp+0x1674>
			!conn->llcp_phy.pause_tx &&
    2176:	f894 2183 	ldrb.w	r2, [r4, #387]	; 0x183
    217a:	07d5      	lsls	r5, r2, #31
    217c:	f100 84a6 	bmi.w	2acc <ull_conn_llcp+0x1674>
		if (conn->tx_head == conn->tx_data) {
    2180:	f8d4 2194 	ldr.w	r2, [r4, #404]	; 0x194
    2184:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    2186:	bf04      	itt	eq
    2188:	681a      	ldreq	r2, [r3, #0]
    218a:	f8c4 2194 	streq.w	r2, [r4, #404]	; 0x194
		if (!conn->tx_ctrl) {
    218e:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    2192:	2a00      	cmp	r2, #0
    2194:	f000 869b 	beq.w	2ece <ull_conn_llcp+0x1a76>
	tx->next = conn->tx_ctrl_last->next;
    2198:	f8d4 3190 	ldr.w	r3, [r4, #400]	; 0x190
    219c:	681a      	ldr	r2, [r3, #0]
    219e:	603a      	str	r2, [r7, #0]
	conn->tx_ctrl_last->next = tx;
    21a0:	601f      	str	r7, [r3, #0]
	conn->tx_ctrl_last = tx;
    21a2:	f8c4 7190 	str.w	r7, [r4, #400]	; 0x190
	if (!tx->next) {
    21a6:	683b      	ldr	r3, [r7, #0]
    21a8:	2b00      	cmp	r3, #0
    21aa:	f000 850c 	beq.w	2bc6 <ull_conn_llcp+0x176e>
		conn->llcp_ack = conn->llcp_req;
    21ae:	f894 30bf 	ldrb.w	r3, [r4, #191]	; 0xbf
    21b2:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
    21b6:	f7ff b994 	b.w	14e2 <ull_conn_llcp+0x8a>
		conn_upd_curr = conn;
    21ba:	6034      	str	r4, [r6, #0]
    21bc:	f7ff bba3 	b.w	1906 <ull_conn_llcp+0x4ae>
					if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
    21c0:	f002 0207 	and.w	r2, r2, #7
					lll->max_rx_octets = conn->llcp_length.rx_octets;
    21c4:	f8b4 c174 	ldrh.w	ip, [r4, #372]	; 0x174
					lll->max_rx_time = conn->llcp_length.rx_time;
    21c8:	f8b4 1178 	ldrh.w	r1, [r4, #376]	; 0x178
					tx_octets = conn->llcp_length.tx_octets;
    21cc:	f8b4 7176 	ldrh.w	r7, [r4, #374]	; 0x176
					uint16_t tx_time = conn->llcp_length.tx_time;
    21d0:	f8b4 617a 	ldrh.w	r6, [r4, #378]	; 0x17a
					lll->max_rx_octets = conn->llcp_length.rx_octets;
    21d4:	f8a4 c042 	strh.w	ip, [r4, #66]	; 0x42
					if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
    21d8:	2a04      	cmp	r2, #4
					lll->max_rx_time = conn->llcp_length.rx_time;
    21da:	f8a4 1046 	strh.w	r1, [r4, #70]	; 0x46
					if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
    21de:	f000 8495 	beq.w	2b0c <ull_conn_llcp+0x16b4>
						conn->llcp_length.state =
    21e2:	f894 3172 	ldrb.w	r3, [r4, #370]	; 0x172
    21e6:	2206      	movs	r2, #6
    21e8:	f362 0302 	bfi	r3, r2, #0, #3
    21ec:	f884 3172 	strb.w	r3, [r4, #370]	; 0x172
					rx = conn->llcp_rx;
    21f0:	f8d4 50d8 	ldr.w	r5, [r4, #216]	; 0xd8
					LL_ASSERT(rx && rx->hdr.link);
    21f4:	2d00      	cmp	r5, #0
    21f6:	f000 8475 	beq.w	2ae4 <ull_conn_llcp+0x168c>
    21fa:	6828      	ldr	r0, [r5, #0]
    21fc:	2800      	cmp	r0, #0
    21fe:	f000 8471 	beq.w	2ae4 <ull_conn_llcp+0x168c>
					pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    2202:	7f2b      	ldrb	r3, [r5, #28]
					conn->llcp_rx = rx->hdr.link->mem;
    2204:	6842      	ldr	r2, [r0, #4]
					rx->hdr.handle = conn->lll.handle;
    2206:	f8b4 e02c 	ldrh.w	lr, [r4, #44]	; 0x2c
					conn->llcp_rx = rx->hdr.link->mem;
    220a:	f8c4 20d8 	str.w	r2, [r4, #216]	; 0xd8
					pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    220e:	f043 0303 	orr.w	r3, r3, #3
					rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    2212:	2202      	movs	r2, #2
					pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    2214:	772b      	strb	r3, [r5, #28]
					pdu_ctrl_rx->len =
    2216:	f04f 0809 	mov.w	r8, #9
					pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    221a:	2315      	movs	r3, #21
					rx->hdr.handle = conn->lll.handle;
    221c:	f8a5 e006 	strh.w	lr, [r5, #6]
					lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
    2220:	f8a5 c020 	strh.w	ip, [r5, #32]
					lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
    2224:	8469      	strh	r1, [r5, #34]	; 0x22
					rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    2226:	712a      	strb	r2, [r5, #4]
					pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    2228:	77eb      	strb	r3, [r5, #31]
					ll_rx_put(rx->hdr.link, rx);
    222a:	4629      	mov	r1, r5
					lr->max_tx_octets = sys_cpu_to_le16(tx_octets);
    222c:	84af      	strh	r7, [r5, #36]	; 0x24
					lr->max_tx_time = sys_cpu_to_le16(tx_time);
    222e:	84ee      	strh	r6, [r5, #38]	; 0x26
					pdu_ctrl_rx->len =
    2230:	f885 801d 	strb.w	r8, [r5, #29]
					ll_rx_put(rx->hdr.link, rx);
    2234:	f012 f908 	bl	14448 <ll_rx_put>
					ll_rx_sched();
    2238:	f012 f910 	bl	1445c <ll_rx_sched>
				break;
    223c:	f7ff b9c1 	b.w	15c2 <ull_conn_llcp+0x16a>
					tx = mem_acquire(&mem_conn_tx_ctrl.free);
    2240:	4851      	ldr	r0, [pc, #324]	; (2388 <ull_conn_llcp+0xf30>)
    2242:	f00d feeb 	bl	1001c <mem_acquire>
					if (!tx) {
    2246:	2800      	cmp	r0, #0
    2248:	f43f a9bb 	beq.w	15c2 <ull_conn_llcp+0x16a>
					conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    224c:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
					conn->default_tx_octets = conn->llcp_length.tx_octets;
    2250:	f8b4 1176 	ldrh.w	r1, [r4, #374]	; 0x176
					conn->default_tx_time = conn->llcp_length.tx_time;
    2254:	f8b4 317a 	ldrh.w	r3, [r4, #378]	; 0x17a
					conn->default_tx_octets = conn->llcp_length.tx_octets;
    2258:	f8a4 10ba 	strh.w	r1, [r4, #186]	; 0xba
					conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    225c:	2501      	movs	r5, #1
					conn->default_tx_time = conn->llcp_length.tx_time;
    225e:	f8a4 30bc 	strh.w	r3, [r4, #188]	; 0xbc
					conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    2262:	f365 0202 	bfi	r2, r5, #0, #3
					pdu_ctrl_tx->len =
    2266:	2509      	movs	r5, #9
					conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    2268:	f884 2172 	strb.w	r2, [r4, #370]	; 0x172
					pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    226c:	7902      	ldrb	r2, [r0, #4]
					pdu_ctrl_tx->len =
    226e:	7145      	strb	r5, [r0, #5]
		if (!conn->common.fex_valid ||
    2270:	f894 50be 	ldrb.w	r5, [r4, #190]	; 0xbe
					lr->max_tx_octets = sys_cpu_to_le16(conn->default_tx_octets);
    2274:	8181      	strh	r1, [r0, #12]
					pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2276:	f042 0203 	orr.w	r2, r2, #3
					lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
    227a:	2100      	movs	r1, #0
		feature_coded_phy = (conn->llcp_feature.features_conn &
    227c:	f8d4 70f4 	ldr.w	r7, [r4, #244]	; 0xf4
					pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2280:	7102      	strb	r2, [r0, #4]
					pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
    2282:	2614      	movs	r6, #20
					lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
    2284:	f06f 0204 	mvn.w	r2, #4
    2288:	7241      	strb	r1, [r0, #9]
		if (!conn->common.fex_valid ||
    228a:	07e9      	lsls	r1, r5, #31
					pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
    228c:	71c6      	strb	r6, [r0, #7]
					lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
    228e:	7202      	strb	r2, [r0, #8]
		if (!conn->common.fex_valid ||
    2290:	f140 8326 	bpl.w	28e0 <ull_conn_llcp+0x1488>
    2294:	053a      	lsls	r2, r7, #20
    2296:	f140 8323 	bpl.w	28e0 <ull_conn_llcp+0x1488>
			tx_time = MIN(PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED),
    229a:	f244 2290 	movw	r2, #17040	; 0x4290
    229e:	4293      	cmp	r3, r2
    22a0:	bf28      	it	cs
    22a2:	4613      	movcs	r3, r2
			tx_time = MAX(PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M), tx_time);
    22a4:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
    22a8:	bf38      	it	cc
    22aa:	f44f 73a4 	movcc.w	r3, #328	; 0x148
			conn->tx_head &&
    22ae:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
					lr->max_rx_time = sys_cpu_to_le16(rx_time);
    22b2:	8142      	strh	r2, [r0, #10]
					lr->max_tx_time = sys_cpu_to_le16(tx_time);
    22b4:	81c3      	strh	r3, [r0, #14]
	if (
    22b6:	2900      	cmp	r1, #0
    22b8:	f000 8241 	beq.w	273e <ull_conn_llcp+0x12e6>
			!conn->llcp_enc.pause_tx &&
    22bc:	f894 312a 	ldrb.w	r3, [r4, #298]	; 0x12a
			conn->tx_head &&
    22c0:	079f      	lsls	r7, r3, #30
    22c2:	f100 823c 	bmi.w	273e <ull_conn_llcp+0x12e6>
			!conn->llcp_phy.pause_tx &&
    22c6:	f894 3183 	ldrb.w	r3, [r4, #387]	; 0x183
    22ca:	07de      	lsls	r6, r3, #31
    22cc:	f100 8237 	bmi.w	273e <ull_conn_llcp+0x12e6>
		if (conn->tx_head == conn->tx_data) {
    22d0:	f8d4 3194 	ldr.w	r3, [r4, #404]	; 0x194
    22d4:	4299      	cmp	r1, r3
			conn->tx_data = conn->tx_data->next;
    22d6:	bf04      	itt	eq
    22d8:	680b      	ldreq	r3, [r1, #0]
    22da:	f8c4 3194 	streq.w	r3, [r4, #404]	; 0x194
		if (!conn->tx_ctrl) {
    22de:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
    22e2:	2b00      	cmp	r3, #0
    22e4:	f000 85ba 	beq.w	2e5c <ull_conn_llcp+0x1a04>
	tx->next = conn->tx_ctrl_last->next;
    22e8:	f8d4 3190 	ldr.w	r3, [r4, #400]	; 0x190
    22ec:	681a      	ldr	r2, [r3, #0]
    22ee:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    22f0:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
    22f2:	f8c4 0190 	str.w	r0, [r4, #400]	; 0x190
    22f6:	6801      	ldr	r1, [r0, #0]
	if (!tx->next) {
    22f8:	2900      	cmp	r1, #0
    22fa:	f000 850e 	beq.w	2d1a <ull_conn_llcp+0x18c2>
					conn->procedure_expire = conn->procedure_reload;
    22fe:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
    2302:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
				break;
    2306:	f7ff b95c 	b.w	15c2 <ull_conn_llcp+0x16a>
		if (!conn->tx_ctrl) {
    230a:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    230e:	2a00      	cmp	r2, #0
    2310:	f47f aa0b 	bne.w	172a <ull_conn_llcp+0x2d2>
			tx->next = conn->tx_head;
    2314:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    2316:	e9c4 0062 	strd	r0, r0, [r4, #392]	; 0x188
				conn->tx_ctrl_last = tx;
    231a:	f8c4 0190 	str.w	r0, [r4, #400]	; 0x190
    231e:	f7ff ba0c 	b.w	173a <ull_conn_llcp+0x2e2>
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    2322:	fb06 3311 	mls	r3, r6, r1, r3
    2326:	f240 42e2 	movw	r2, #1250	; 0x4e2
    232a:	4818      	ldr	r0, [pc, #96]	; (238c <ull_conn_llcp+0xf34>)
    232c:	b29b      	uxth	r3, r3
    232e:	fb02 f303 	mul.w	r3, r2, r3
    2332:	fba3 0100 	umull	r0, r1, r3, r0
    2336:	a312      	add	r3, pc, #72	; (adr r3, 2380 <ull_conn_llcp+0xf28>)
    2338:	e9d3 2300 	ldrd	r2, r3, [r3]
    233c:	f7fe fb7e 	bl	a3c <__aeabi_uldivmod>
    2340:	ebaa 0a00 	sub.w	sl, sl, r0
    2344:	f7ff bb56 	b.w	19f4 <ull_conn_llcp+0x59c>
			tx_time = MAX(MIN(PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_1M),
    2348:	f640 0948 	movw	r9, #2120	; 0x848
    234c:	454e      	cmp	r6, r9
    234e:	bf28      	it	cs
    2350:	464e      	movcs	r6, r9
    2352:	f5b6 7fa4 	cmp.w	r6, #328	; 0x148
    2356:	bf38      	it	cc
    2358:	f44f 76a4 	movcc.w	r6, #328	; 0x148
    235c:	e471      	b.n	1c42 <ull_conn_llcp+0x7ea>
		LL_ASSERT(rx && rx->hdr.link);
    235e:	4a0c      	ldr	r2, [pc, #48]	; (2390 <ull_conn_llcp+0xf38>)
    2360:	490c      	ldr	r1, [pc, #48]	; (2394 <ull_conn_llcp+0xf3c>)
    2362:	480d      	ldr	r0, [pc, #52]	; (2398 <ull_conn_llcp+0xf40>)
    2364:	f640 438e 	movw	r3, #3214	; 0xc8e
    2368:	f01b fdf3 	bl	1df52 <printk>
    236c:	4040      	eors	r0, r0
    236e:	f380 8811 	msr	BASEPRI, r0
    2372:	f04f 0003 	mov.w	r0, #3
    2376:	df02      	svc	2
    2378:	6830      	ldr	r0, [r6, #0]
    237a:	f7ff bafd 	b.w	1978 <ull_conn_llcp+0x520>
    237e:	bf00      	nop
    2380:	1afd498d 	.word	0x1afd498d
    2384:	00000007 	.word	0x00000007
    2388:	20007408 	.word	0x20007408
    238c:	3b9aca00 	.word	0x3b9aca00
    2390:	00024438 	.word	0x00024438
    2394:	00024578 	.word	0x00024578
    2398:	00023ff4 	.word	0x00023ff4
			} else if (conn->llcp_conn_param.ack !=
    239c:	f894 6149 	ldrb.w	r6, [r4, #329]	; 0x149
    23a0:	f894 0148 	ldrb.w	r0, [r4, #328]	; 0x148
    23a4:	4286      	cmp	r6, r0
    23a6:	f000 81d5 	beq.w	2754 <ull_conn_llcp+0x12fc>
		conn_upd = conn_upd_curr;
    23aa:	4ed5      	ldr	r6, [pc, #852]	; (2700 <ull_conn_llcp+0x12a8>)
    23ac:	6830      	ldr	r0, [r6, #0]
		if (conn_upd && (conn_upd != conn)) {
    23ae:	2800      	cmp	r0, #0
    23b0:	f000 84e1 	beq.w	2d76 <ull_conn_llcp+0x191e>
    23b4:	4284      	cmp	r4, r0
    23b6:	f47f a894 	bne.w	14e2 <ull_conn_llcp+0x8a>
		switch (conn->llcp_conn_param.state) {
    23ba:	f894 014a 	ldrb.w	r0, [r4, #330]	; 0x14a
    23be:	f000 0007 	and.w	r0, r0, #7
    23c2:	2805      	cmp	r0, #5
    23c4:	f200 8691 	bhi.w	30ea <ull_conn_llcp+0x1c92>
    23c8:	a701      	add	r7, pc, #4	; (adr r7, 23d0 <ull_conn_llcp+0xf78>)
    23ca:	f857 f020 	ldr.w	pc, [r7, r0, lsl #2]
    23ce:	bf00      	nop
    23d0:	000024c7 	.word	0x000024c7
    23d4:	00002439 	.word	0x00002439
    23d8:	000023e9 	.word	0x000023e9
    23dc:	000014d9 	.word	0x000014d9
    23e0:	000014d9 	.word	0x000014d9
    23e4:	000014d9 	.word	0x000014d9
		if (conn->llcp_enc.pause_tx) {
    23e8:	0790      	lsls	r0, r2, #30
    23ea:	f53f a87a 	bmi.w	14e2 <ull_conn_llcp+0x8a>
		rx = ll_pdu_rx_alloc();
    23ee:	f012 f85f 	bl	144b0 <ll_pdu_rx_alloc>
		if (!rx) {
    23f2:	4601      	mov	r1, r0
    23f4:	2800      	cmp	r0, #0
    23f6:	f43f ad57 	beq.w	1ea8 <ull_conn_llcp+0xa50>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    23fa:	7f03      	ldrb	r3, [r0, #28]
		conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    23fc:	f894 214a 	ldrb.w	r2, [r4, #330]	; 0x14a
    2400:	2003      	movs	r0, #3
    2402:	f360 0202 	bfi	r2, r0, #0, #3
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    2406:	4303      	orrs	r3, r0
		conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    2408:	f884 214a 	strb.w	r2, [r4, #330]	; 0x14a
		rx->hdr.handle = conn->lll.handle;
    240c:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    240e:	770b      	strb	r3, [r1, #28]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    2410:	2502      	movs	r5, #2
		pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    2412:	2318      	movs	r3, #24
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    2414:	710d      	strb	r5, [r1, #4]
		pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    2416:	774b      	strb	r3, [r1, #29]
		p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
    2418:	f8b4 214c 	ldrh.w	r2, [r4, #332]	; 0x14c
		p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
    241c:	f8b4 314e 	ldrh.w	r3, [r4, #334]	; 0x14e
		rx->hdr.handle = conn->lll.handle;
    2420:	80c8      	strh	r0, [r1, #6]
		p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
    2422:	f8b4 0150 	ldrh.w	r0, [r4, #336]	; 0x150
		p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
    2426:	840a      	strh	r2, [r1, #32]
		p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
    2428:	f8b4 2152 	ldrh.w	r2, [r4, #338]	; 0x152
		p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
    242c:	844b      	strh	r3, [r1, #34]	; 0x22
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    242e:	230f      	movs	r3, #15
		p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
    2430:	8488      	strh	r0, [r1, #36]	; 0x24
		p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
    2432:	84ca      	strh	r2, [r1, #38]	; 0x26
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    2434:	77cb      	strb	r3, [r1, #31]
    2436:	e532      	b.n	1e9e <ull_conn_llcp+0xa46>
		need_schedule_update = need_schedule_cnt;
    2438:	48b2      	ldr	r0, [pc, #712]	; (2704 <ull_conn_llcp+0x12ac>)
    243a:	4ab3      	ldr	r2, [pc, #716]	; (2708 <ull_conn_llcp+0x12b0>)
		need_conn_update = false;
    243c:	4bb3      	ldr	r3, [pc, #716]	; (270c <ull_conn_llcp+0x12b4>)
		if (conn->llcp_conn_param.status) {
    243e:	f894 514b 	ldrb.w	r5, [r4, #331]	; 0x14b
		need_schedule_update = need_schedule_cnt;
    2442:	6800      	ldr	r0, [r0, #0]
    2444:	6010      	str	r0, [r2, #0]
		need_conn_update = false;
    2446:	2700      	movs	r7, #0
    2448:	701f      	strb	r7, [r3, #0]
		if (conn->llcp_conn_param.status) {
    244a:	2d00      	cmp	r5, #0
    244c:	f040 8546 	bne.w	2edc <ull_conn_llcp+0x1a84>
		if (!conn->lll.role) {
    2450:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
    2454:	2b00      	cmp	r3, #0
    2456:	f2c0 856f 	blt.w	2f38 <ull_conn_llcp+0x1ae0>
			conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    245a:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
			if (conn->llcp_conn_param.preferred_periodicity) {
    245e:	f894 2154 	ldrb.w	r2, [r4, #340]	; 0x154
			conn->llcp_cu.win_offset_us = 0U;
    2462:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
			conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    2466:	2005      	movs	r0, #5
    2468:	f360 0302 	bfi	r3, r0, #0, #3
			conn->llcp_cu.win_size = 1U;
    246c:	2001      	movs	r0, #1
			conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    246e:	f884 314a 	strb.w	r3, [r4, #330]	; 0x14a
			conn->llcp_cu.win_size = 1U;
    2472:	f884 00ec 	strb.w	r0, [r4, #236]	; 0xec
			if (conn->llcp_conn_param.preferred_periodicity) {
    2476:	2a00      	cmp	r2, #0
    2478:	f000 8625 	beq.w	30c6 <ull_conn_llcp+0x1c6e>
					((conn->llcp_conn_param.interval_min /
    247c:	f8b4 314c 	ldrh.w	r3, [r4, #332]	; 0x14c
    2480:	fbb3 f3f2 	udiv	r3, r3, r2
					  conn->llcp_conn_param.preferred_periodicity) +
    2484:	4403      	add	r3, r0
				conn->llcp_cu.interval =
    2486:	fb13 f302 	smulbb	r3, r3, r2
    248a:	b29b      	uxth	r3, r3
			conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
    248c:	f894 214a 	ldrb.w	r2, [r4, #330]	; 0x14a
			conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
    2490:	f894 00de 	ldrb.w	r0, [r4, #222]	; 0xde
    2494:	f8a4 30e0 	strh.w	r3, [r4, #224]	; 0xe0
			conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
    2498:	f3c2 03c0 	ubfx	r3, r2, #3, #1
			conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
    249c:	009b      	lsls	r3, r3, #2
    249e:	f020 0207 	bic.w	r2, r0, #7
    24a2:	f043 0302 	orr.w	r3, r3, #2
    24a6:	4313      	orrs	r3, r2
			conn->llcp_cu.latency = conn->llcp_conn_param.latency;
    24a8:	f8b4 0150 	ldrh.w	r0, [r4, #336]	; 0x150
			conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
    24ac:	f8b4 2152 	ldrh.w	r2, [r4, #338]	; 0x152
			conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
    24b0:	f884 30de 	strb.w	r3, [r4, #222]	; 0xde
			conn->llcp_cu.ack--;
    24b4:	3901      	subs	r1, #1
    24b6:	f884 10dd 	strb.w	r1, [r4, #221]	; 0xdd
			conn->llcp_cu.latency = conn->llcp_conn_param.latency;
    24ba:	f8a4 00e2 	strh.w	r0, [r4, #226]	; 0xe2
			conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
    24be:	f8a4 20e4 	strh.w	r2, [r4, #228]	; 0xe4
			return;
    24c2:	f7ff b80e 	b.w	14e2 <ull_conn_llcp+0x8a>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    24c6:	4892      	ldr	r0, [pc, #584]	; (2710 <ull_conn_llcp+0x12b8>)
				event_counter = lll->event_counter +
    24c8:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
					lll->latency_prepare + lazy;
    24ca:	8e67      	ldrh	r7, [r4, #50]	; 0x32
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    24cc:	f00d fda6 	bl	1001c <mem_acquire>
		if (!tx) {
    24d0:	4601      	mov	r1, r0
    24d2:	2800      	cmp	r0, #0
    24d4:	f43f ace8 	beq.w	1ea8 <ull_conn_llcp+0xa50>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
    24d8:	f894 214a 	ldrb.w	r2, [r4, #330]	; 0x14a
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    24dc:	7903      	ldrb	r3, [r0, #4]
		conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
    24de:	2004      	movs	r0, #4
    24e0:	f360 0202 	bfi	r2, r0, #0, #3
    24e4:	f884 214a 	strb.w	r2, [r4, #330]	; 0x14a
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    24e8:	f043 0303 	orr.w	r3, r3, #3
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    24ec:	2218      	movs	r2, #24
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    24ee:	710b      	strb	r3, [r1, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    24f0:	714a      	strb	r2, [r1, #5]
		p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
    24f2:	f8b4 014c 	ldrh.w	r0, [r4, #332]	; 0x14c
				event_counter = lll->event_counter +
    24f6:	19eb      	adds	r3, r5, r7
		p->preferred_periodicity = 0U;
    24f8:	2200      	movs	r2, #0
		p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
    24fa:	f8b4 514e 	ldrh.w	r5, [r4, #334]	; 0x14e
		p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
    24fe:	f8b4 7152 	ldrh.w	r7, [r4, #338]	; 0x152
		p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
    2502:	8108      	strh	r0, [r1, #8]
		p->reference_conn_event_count = sys_cpu_to_le16(event_counter);
    2504:	444b      	add	r3, r9
		p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
    2506:	f8b4 0150 	ldrh.w	r0, [r4, #336]	; 0x150
		p->preferred_periodicity = 0U;
    250a:	740a      	strb	r2, [r1, #16]
		p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
    250c:	814d      	strh	r5, [r1, #10]
		p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
    250e:	8188      	strh	r0, [r1, #12]
		p->offset0 = sys_cpu_to_le16((uint16_t)(conn->llcp_conn_param.offset0));
    2510:	f8b4 5158 	ldrh.w	r5, [r4, #344]	; 0x158
		p->reference_conn_event_count = sys_cpu_to_le16(event_counter);
    2514:	f8a1 3011 	strh.w	r3, [r1, #17]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    2518:	200f      	movs	r0, #15
		p->offset1 = sys_cpu_to_le16(0xffff);
    251a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    251e:	71c8      	strb	r0, [r1, #7]
		p->offset1 = sys_cpu_to_le16(0xffff);
    2520:	754b      	strb	r3, [r1, #21]
    2522:	758b      	strb	r3, [r1, #22]
		p->offset2 = sys_cpu_to_le16(0xffff);
    2524:	75cb      	strb	r3, [r1, #23]
    2526:	760b      	strb	r3, [r1, #24]
		p->offset3 = sys_cpu_to_le16(0xffff);
    2528:	764b      	strb	r3, [r1, #25]
    252a:	768b      	strb	r3, [r1, #26]
		p->offset4 = sys_cpu_to_le16(0xffff);
    252c:	76cb      	strb	r3, [r1, #27]
    252e:	770b      	strb	r3, [r1, #28]
		p->offset5 = sys_cpu_to_le16(0xffff);
    2530:	774b      	strb	r3, [r1, #29]
    2532:	778b      	strb	r3, [r1, #30]
		p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
    2534:	81cf      	strh	r7, [r1, #14]
		p->offset0 = sys_cpu_to_le16((uint16_t)(conn->llcp_conn_param.offset0));
    2536:	f8a1 5013 	strh.w	r5, [r1, #19]
	ctrl_tx_pause_enqueue(conn, tx, false);
    253a:	4620      	mov	r0, r4
    253c:	f012 fba6 	bl	14c8c <ctrl_tx_pause_enqueue>
		conn->procedure_expire = conn->procedure_reload;
    2540:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
		conn_upd_curr = conn;
    2544:	6034      	str	r4, [r6, #0]
		conn->procedure_expire = conn->procedure_reload;
    2546:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
    254a:	e4ad      	b.n	1ea8 <ull_conn_llcp+0xa50>
		if ((conn->llcp_cu.interval != lll->interval) ||
    254c:	8e22      	ldrh	r2, [r4, #48]	; 0x30
    254e:	428a      	cmp	r2, r1
    2550:	f47f aa1f 	bne.w	1992 <ull_conn_llcp+0x53a>
				(RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
    2554:	f240 42e2 	movw	r2, #1250	; 0x4e2
    2558:	fb02 fb03 	mul.w	fp, r2, r3
    255c:	f242 7210 	movw	r2, #10000	; 0x2710
				(conn->llcp_cu.latency != lll->latency) ||
    2560:	f8b4 e0aa 	ldrh.w	lr, [r4, #170]	; 0xaa
				(RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
    2564:	fb02 b20c 	mla	r2, r2, ip, fp
    2568:	3a01      	subs	r2, #1
    256a:	fbb2 f2fb 	udiv	r2, r2, fp
				(conn->llcp_cu.latency != lll->latency) ||
    256e:	b292      	uxth	r2, r2
    2570:	4596      	cmp	lr, r2
    2572:	f47f aa0e 	bne.w	1992 <ull_conn_llcp+0x53a>
			rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    2576:	2303      	movs	r3, #3
    2578:	7133      	strb	r3, [r6, #4]
    257a:	f7ff ba16 	b.w	19aa <ull_conn_llcp+0x552>
			mayfly_enable(TICKER_USER_ID_ULL_HIGH,
    257e:	2201      	movs	r2, #1
    2580:	4610      	mov	r0, r2
    2582:	2102      	movs	r1, #2
    2584:	f00d fdee 	bl	10164 <mayfly_enable>
							return -ECANCELED;
    2588:	f06f 0047 	mvn.w	r0, #71	; 0x47
    258c:	f7fe bfb0 	b.w	14f0 <ull_conn_llcp+0x98>
				lll->phy_tx = conn->llcp.phy_upd_ind.tx;
    2590:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
				eff_tx_time = calc_eff_time(lll->max_tx_octets,
    2594:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
				lll->phy_tx = conn->llcp.phy_upd_ind.tx;
    2598:	f3c5 0182 	ubfx	r1, r5, #2, #3
    259c:	f361 0302 	bfi	r3, r1, #0, #3
    25a0:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
				eff_tx_time = calc_eff_time(lll->max_tx_octets,
    25a4:	4632      	mov	r2, r6
    25a6:	f012 fb07 	bl	14bb8 <calc_eff_time>
    25aa:	4607      	mov	r7, r0
    25ac:	f7ff bb4f 	b.w	1c4e <ull_conn_llcp+0x7f6>
		if (!conn->tx_ctrl) {
    25b0:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
    25b4:	2b00      	cmp	r3, #0
    25b6:	f47f acdc 	bne.w	1f72 <ull_conn_llcp+0xb1a>
			tx->next = conn->tx_head;
    25ba:	6030      	str	r0, [r6, #0]
				conn->tx_ctrl = tx;
    25bc:	e9c4 6662 	strd	r6, r6, [r4, #392]	; 0x188
				conn->tx_ctrl_last = tx;
    25c0:	f8c4 6190 	str.w	r6, [r4, #400]	; 0x190
    25c4:	e4dd      	b.n	1f82 <ull_conn_llcp+0xb2a>
			LL_ASSERT(rx && rx->hdr.link);
    25c6:	4a53      	ldr	r2, [pc, #332]	; (2714 <ull_conn_llcp+0x12bc>)
    25c8:	4953      	ldr	r1, [pc, #332]	; (2718 <ull_conn_llcp+0x12c0>)
    25ca:	4854      	ldr	r0, [pc, #336]	; (271c <ull_conn_llcp+0x12c4>)
    25cc:	f241 230d 	movw	r3, #4621	; 0x120d
    25d0:	f01b fcbf 	bl	1df52 <printk>
    25d4:	4040      	eors	r0, r0
    25d6:	f380 8811 	msr	BASEPRI, r0
    25da:	f04f 0003 	mov.w	r0, #3
    25de:	df02      	svc	2
    25e0:	6828      	ldr	r0, [r5, #0]
    25e2:	f894 b0c4 	ldrb.w	fp, [r4, #196]	; 0xc4
    25e6:	f7ff bb55 	b.w	1c94 <ull_conn_llcp+0x83c>
			LL_ASSERT(0);
    25ea:	4a4a      	ldr	r2, [pc, #296]	; (2714 <ull_conn_llcp+0x12bc>)
    25ec:	494c      	ldr	r1, [pc, #304]	; (2720 <ull_conn_llcp+0x12c8>)
    25ee:	484b      	ldr	r0, [pc, #300]	; (271c <ull_conn_llcp+0x12c4>)
    25f0:	f640 5306 	movw	r3, #3334	; 0xd06
    25f4:	f01b fcad 	bl	1df52 <printk>
    25f8:	4040      	eors	r0, r0
    25fa:	f380 8811 	msr	BASEPRI, r0
    25fe:	f04f 0003 	mov.w	r0, #3
    2602:	df02      	svc	2
		uint32_t ticks_win_offset = 0;
    2604:	2700      	movs	r7, #0
    2606:	f8b4 60e0 	ldrh.w	r6, [r4, #224]	; 0xe0
    260a:	f7ff ba26 	b.w	1a5a <ull_conn_llcp+0x602>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    260e:	4840      	ldr	r0, [pc, #256]	; (2710 <ull_conn_llcp+0x12b8>)
    2610:	f00d fd04 	bl	1001c <mem_acquire>
		if (tx) {
    2614:	4606      	mov	r6, r0
    2616:	2800      	cmp	r0, #0
    2618:	f43f ac46 	beq.w	1ea8 <ull_conn_llcp+0xa50>
			conn->llcp_feature.ack--;
    261c:	f894 30f1 	ldrb.w	r3, [r4, #241]	; 0xf1
			conn->llcp_feature.features_conn = LL_FEAT;
    2620:	4a40      	ldr	r2, [pc, #256]	; (2724 <ull_conn_llcp+0x12cc>)
    2622:	f8c4 20f4 	str.w	r2, [r4, #244]	; 0xf4
			conn->llcp_feature.ack--;
    2626:	3b01      	subs	r3, #1
			pdu->len = offsetof(struct pdu_data_llctrl, feature_req) +
    2628:	2209      	movs	r2, #9
			conn->llcp_feature.ack--;
    262a:	f884 30f1 	strb.w	r3, [r4, #241]	; 0xf1
			pdu->len = offsetof(struct pdu_data_llctrl, feature_req) +
    262e:	7142      	strb	r2, [r0, #5]
			pdu->llctrl.opcode = !conn->lll.role ?
    2630:	f994 203d 	ldrsb.w	r2, [r4, #61]	; 0x3d
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    2634:	7903      	ldrb	r3, [r0, #4]
			pdu->llctrl.opcode = !conn->lll.role ?
    2636:	2a00      	cmp	r2, #0
    2638:	bfac      	ite	ge
    263a:	2208      	movge	r2, #8
    263c:	220e      	movlt	r2, #14
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    263e:	f043 0303 	orr.w	r3, r3, #3
			pdu->llctrl.opcode = !conn->lll.role ?
    2642:	71c2      	strb	r2, [r0, #7]
			(void)memset(&pdu->llctrl.feature_req.features[0],
    2644:	2208      	movs	r2, #8
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    2646:	7103      	strb	r3, [r0, #4]
			(void)memset(&pdu->llctrl.feature_req.features[0],
    2648:	4629      	mov	r1, r5
    264a:	4410      	add	r0, r2
    264c:	f01d fc3e 	bl	1fecc <memset>
			sys_put_le24(conn->llcp_feature.features_conn,
    2650:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
	dst[0] = val;
    2654:	7233      	strb	r3, [r6, #8]
	dst[1] = val >> 8;
    2656:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[2] = val >> 16;
    265a:	0c1b      	lsrs	r3, r3, #16
	dst[1] = val >> 8;
    265c:	7272      	strb	r2, [r6, #9]
	dst[2] = val >> 16;
    265e:	72b3      	strb	r3, [r6, #10]
			conn->tx_head &&
    2660:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
	if (
    2664:	2b00      	cmp	r3, #0
    2666:	f000 81b2 	beq.w	29ce <ull_conn_llcp+0x1576>
			!conn->llcp_enc.pause_tx &&
    266a:	f894 212a 	ldrb.w	r2, [r4, #298]	; 0x12a
			conn->tx_head &&
    266e:	0795      	lsls	r5, r2, #30
    2670:	f100 81ad 	bmi.w	29ce <ull_conn_llcp+0x1576>
			!conn->llcp_phy.pause_tx &&
    2674:	f894 2183 	ldrb.w	r2, [r4, #387]	; 0x183
    2678:	07d0      	lsls	r0, r2, #31
    267a:	f100 81a8 	bmi.w	29ce <ull_conn_llcp+0x1576>
		if (conn->tx_head == conn->tx_data) {
    267e:	f8d4 2194 	ldr.w	r2, [r4, #404]	; 0x194
    2682:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    2684:	bf04      	itt	eq
    2686:	681a      	ldreq	r2, [r3, #0]
    2688:	f8c4 2194 	streq.w	r2, [r4, #404]	; 0x194
		if (!conn->tx_ctrl) {
    268c:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    2690:	2a00      	cmp	r2, #0
    2692:	f000 8414 	beq.w	2ebe <ull_conn_llcp+0x1a66>
	tx->next = conn->tx_ctrl_last->next;
    2696:	f8d4 3190 	ldr.w	r3, [r4, #400]	; 0x190
    269a:	681a      	ldr	r2, [r3, #0]
    269c:	6032      	str	r2, [r6, #0]
	conn->tx_ctrl_last->next = tx;
    269e:	601e      	str	r6, [r3, #0]
	conn->tx_ctrl_last = tx;
    26a0:	f8c4 6190 	str.w	r6, [r4, #400]	; 0x190
    26a4:	6833      	ldr	r3, [r6, #0]
	if (!tx->next) {
    26a6:	2b00      	cmp	r3, #0
    26a8:	f000 8380 	beq.w	2dac <ull_conn_llcp+0x1954>
					conn->procedure_expire = conn->procedure_reload;
    26ac:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
    26b0:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
				break;
    26b4:	f894 50c0 	ldrb.w	r5, [r4, #192]	; 0xc0
    26b8:	f894 30bf 	ldrb.w	r3, [r4, #191]	; 0xbf
    26bc:	f7fe bf0c 	b.w	14d8 <ull_conn_llcp+0x80>
			LL_ASSERT(rx && rx->hdr.link);
    26c0:	4a14      	ldr	r2, [pc, #80]	; (2714 <ull_conn_llcp+0x12bc>)
    26c2:	4915      	ldr	r1, [pc, #84]	; (2718 <ull_conn_llcp+0x12c0>)
    26c4:	4815      	ldr	r0, [pc, #84]	; (271c <ull_conn_llcp+0x12c4>)
    26c6:	f241 2339 	movw	r3, #4665	; 0x1239
    26ca:	f01b fc42 	bl	1df52 <printk>
    26ce:	4040      	eors	r0, r0
    26d0:	f380 8811 	msr	BASEPRI, r0
    26d4:	f04f 0003 	mov.w	r0, #3
    26d8:	df02      	svc	2
    26da:	6828      	ldr	r0, [r5, #0]
    26dc:	f7ff bb04 	b.w	1ce8 <ull_conn_llcp+0x890>
		conn->tx_data_last = tx;
    26e0:	f8c4 0198 	str.w	r0, [r4, #408]	; 0x198
    26e4:	f7ff b82c 	b.w	1740 <ull_conn_llcp+0x2e8>
		if (!conn->tx_ctrl) {
    26e8:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    26ec:	2a00      	cmp	r2, #0
    26ee:	f47f acfa 	bne.w	20e6 <ull_conn_llcp+0xc8e>
			tx->next = conn->tx_head;
    26f2:	603b      	str	r3, [r7, #0]
				conn->tx_ctrl = tx;
    26f4:	e9c4 7762 	strd	r7, r7, [r4, #392]	; 0x188
				conn->tx_ctrl_last = tx;
    26f8:	f8c4 7190 	str.w	r7, [r4, #400]	; 0x190
    26fc:	e4fb      	b.n	20f6 <ull_conn_llcp+0xc9e>
    26fe:	bf00      	nop
    2700:	20006980 	.word	0x20006980
    2704:	200005e8 	.word	0x200005e8
    2708:	200005ec 	.word	0x200005ec
    270c:	20009c3e 	.word	0x20009c3e
    2710:	20007408 	.word	0x20007408
    2714:	00024438 	.word	0x00024438
    2718:	00024578 	.word	0x00024578
    271c:	00023ff4 	.word	0x00023ff4
    2720:	00024064 	.word	0x00024064
    2724:	000108ff 	.word	0x000108ff
		if (!conn->tx_ctrl) {
    2728:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    272c:	2a00      	cmp	r2, #0
    272e:	f47f ac6f 	bne.w	2010 <ull_conn_llcp+0xbb8>
			tx->next = conn->tx_head;
    2732:	602b      	str	r3, [r5, #0]
				conn->tx_ctrl = tx;
    2734:	e9c4 5562 	strd	r5, r5, [r4, #392]	; 0x188
				conn->tx_ctrl_last = tx;
    2738:	f8c4 5190 	str.w	r5, [r4, #400]	; 0x190
    273c:	e470      	b.n	2020 <ull_conn_llcp+0xbc8>
		if (!conn->tx_ctrl) {
    273e:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
    2742:	2b00      	cmp	r3, #0
    2744:	f47f add0 	bne.w	22e8 <ull_conn_llcp+0xe90>
			tx->next = conn->tx_head;
    2748:	6001      	str	r1, [r0, #0]
				conn->tx_ctrl = tx;
    274a:	e9c4 0062 	strd	r0, r0, [r4, #392]	; 0x188
				conn->tx_ctrl_last = tx;
    274e:	f8c4 0190 	str.w	r0, [r4, #400]	; 0x190
    2752:	e5d1      	b.n	22f8 <ull_conn_llcp+0xea0>
			} else if (conn->llcp_length.ack != conn->llcp_length.req) {
    2754:	f894 0170 	ldrb.w	r0, [r4, #368]	; 0x170
    2758:	f894 2171 	ldrb.w	r2, [r4, #369]	; 0x171
    275c:	4282      	cmp	r2, r0
    275e:	f000 81e9 	beq.w	2b34 <ull_conn_llcp+0x16dc>
		switch (conn->llcp_length.state) {
    2762:	f894 1172 	ldrb.w	r1, [r4, #370]	; 0x172
    2766:	f001 0207 	and.w	r2, r1, #7
    276a:	2a06      	cmp	r2, #6
    276c:	f200 84c0 	bhi.w	30f0 <ull_conn_llcp+0x1c98>
    2770:	a601      	add	r6, pc, #4	; (adr r6, 2778 <ull_conn_llcp+0x1320>)
    2772:	f856 f022 	ldr.w	pc, [r6, r2, lsl #2]
    2776:	bf00      	nop
    2778:	0000281d 	.word	0x0000281d
    277c:	000014d9 	.word	0x000014d9
    2780:	000014d9 	.word	0x000014d9
    2784:	000014d9 	.word	0x000014d9
    2788:	00002795 	.word	0x00002795
    278c:	00002795 	.word	0x00002795
    2790:	000014d9 	.word	0x000014d9
					lll->max_rx_octets = conn->llcp_length.rx_octets;
    2794:	f8b4 3174 	ldrh.w	r3, [r4, #372]	; 0x174
    2798:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
					if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
    279c:	f001 0307 	and.w	r3, r1, #7
					lll->max_rx_time = conn->llcp_length.rx_time;
    27a0:	f8b4 2178 	ldrh.w	r2, [r4, #376]	; 0x178
					tx_octets = conn->llcp_length.tx_octets;
    27a4:	f8b4 7176 	ldrh.w	r7, [r4, #374]	; 0x176
					uint16_t tx_time = conn->llcp_length.tx_time;
    27a8:	f8b4 617a 	ldrh.w	r6, [r4, #378]	; 0x17a
					lll->max_rx_time = conn->llcp_length.rx_time;
    27ac:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
					if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
    27b0:	2b04      	cmp	r3, #4
    27b2:	f000 837a 	beq.w	2eaa <ull_conn_llcp+0x1a52>
						conn->llcp_length.state =
    27b6:	460b      	mov	r3, r1
    27b8:	2206      	movs	r2, #6
    27ba:	f362 0302 	bfi	r3, r2, #0, #3
    27be:	f884 3172 	strb.w	r3, [r4, #370]	; 0x172
					rx = conn->llcp_rx;
    27c2:	f8d4 50d8 	ldr.w	r5, [r4, #216]	; 0xd8
					LL_ASSERT(rx && rx->hdr.link);
    27c6:	2d00      	cmp	r5, #0
    27c8:	f000 8360 	beq.w	2e8c <ull_conn_llcp+0x1a34>
    27cc:	6828      	ldr	r0, [r5, #0]
    27ce:	2800      	cmp	r0, #0
    27d0:	f000 835c 	beq.w	2e8c <ull_conn_llcp+0x1a34>
					pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    27d4:	7f2b      	ldrb	r3, [r5, #28]
					conn->llcp_rx = rx->hdr.link->mem;
    27d6:	6842      	ldr	r2, [r0, #4]
					rx->hdr.handle = conn->lll.handle;
    27d8:	f8b4 c02c 	ldrh.w	ip, [r4, #44]	; 0x2c
					conn->llcp_rx = rx->hdr.link->mem;
    27dc:	f8c4 20d8 	str.w	r2, [r4, #216]	; 0xd8
					pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    27e0:	f043 0303 	orr.w	r3, r3, #3
    27e4:	772b      	strb	r3, [r5, #28]
					rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    27e6:	2202      	movs	r2, #2
					pdu_ctrl_rx->len =
    27e8:	2309      	movs	r3, #9
    27ea:	776b      	strb	r3, [r5, #29]
					rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    27ec:	712a      	strb	r2, [r5, #4]
					lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
    27ee:	f8b4 1042 	ldrh.w	r1, [r4, #66]	; 0x42
					lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
    27f2:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
    27f6:	846a      	strh	r2, [r5, #34]	; 0x22
					pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    27f8:	2315      	movs	r3, #21
    27fa:	77eb      	strb	r3, [r5, #31]
					rx->hdr.handle = conn->lll.handle;
    27fc:	f8a5 c006 	strh.w	ip, [r5, #6]
					lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
    2800:	8429      	strh	r1, [r5, #32]
					lr->max_tx_octets = sys_cpu_to_le16(tx_octets);
    2802:	84af      	strh	r7, [r5, #36]	; 0x24
					ll_rx_put(rx->hdr.link, rx);
    2804:	4629      	mov	r1, r5
					lr->max_tx_time = sys_cpu_to_le16(tx_time);
    2806:	84ee      	strh	r6, [r5, #38]	; 0x26
					ll_rx_put(rx->hdr.link, rx);
    2808:	f011 fe1e 	bl	14448 <ll_rx_put>
					ll_rx_sched();
    280c:	f011 fe26 	bl	1445c <ll_rx_sched>
				break;
    2810:	f894 30bf 	ldrb.w	r3, [r4, #191]	; 0xbf
    2814:	f894 50c0 	ldrb.w	r5, [r4, #192]	; 0xc0
    2818:	f7fe be5e 	b.w	14d8 <ull_conn_llcp+0x80>
					tx = mem_acquire(&mem_conn_tx_ctrl.free);
    281c:	48c1      	ldr	r0, [pc, #772]	; (2b24 <ull_conn_llcp+0x16cc>)
    281e:	f00d fbfd 	bl	1001c <mem_acquire>
					if (!tx) {
    2822:	2800      	cmp	r0, #0
    2824:	f43f ab40 	beq.w	1ea8 <ull_conn_llcp+0xa50>
					conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    2828:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
					conn->default_tx_octets = conn->llcp_length.tx_octets;
    282c:	f8b4 1176 	ldrh.w	r1, [r4, #374]	; 0x176
					conn->default_tx_time = conn->llcp_length.tx_time;
    2830:	f8b4 317a 	ldrh.w	r3, [r4, #378]	; 0x17a
					conn->default_tx_octets = conn->llcp_length.tx_octets;
    2834:	f8a4 10ba 	strh.w	r1, [r4, #186]	; 0xba
					conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    2838:	2501      	movs	r5, #1
					conn->default_tx_time = conn->llcp_length.tx_time;
    283a:	f8a4 30bc 	strh.w	r3, [r4, #188]	; 0xbc
					conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    283e:	f365 0202 	bfi	r2, r5, #0, #3
    2842:	f884 2172 	strb.w	r2, [r4, #370]	; 0x172
					pdu_ctrl_tx->len =
    2846:	2509      	movs	r5, #9
					pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2848:	7902      	ldrb	r2, [r0, #4]
					pdu_ctrl_tx->len =
    284a:	7145      	strb	r5, [r0, #5]
		if (!conn->common.fex_valid ||
    284c:	f894 50be 	ldrb.w	r5, [r4, #190]	; 0xbe
					lr->max_tx_octets = sys_cpu_to_le16(conn->default_tx_octets);
    2850:	8181      	strh	r1, [r0, #12]
					pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2852:	f042 0203 	orr.w	r2, r2, #3
					pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
    2856:	2114      	movs	r1, #20
					pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2858:	7102      	strb	r2, [r0, #4]
		feature_coded_phy = (conn->llcp_feature.features_conn &
    285a:	f8d4 20f4 	ldr.w	r2, [r4, #244]	; 0xf4
					pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
    285e:	71c1      	strb	r1, [r0, #7]
					lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
    2860:	f06f 0104 	mvn.w	r1, #4
    2864:	2600      	movs	r6, #0
    2866:	7201      	strb	r1, [r0, #8]
		if (!conn->common.fex_valid ||
    2868:	07e9      	lsls	r1, r5, #31
					lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
    286a:	7246      	strb	r6, [r0, #9]
		if (!conn->common.fex_valid ||
    286c:	f140 82e3 	bpl.w	2e36 <ull_conn_llcp+0x19de>
    2870:	0517      	lsls	r7, r2, #20
    2872:	f140 82e0 	bpl.w	2e36 <ull_conn_llcp+0x19de>
			tx_time = MIN(PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED),
    2876:	f244 2290 	movw	r2, #17040	; 0x4290
    287a:	4293      	cmp	r3, r2
    287c:	bf28      	it	cs
    287e:	4613      	movcs	r3, r2
			tx_time = MAX(PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M), tx_time);
    2880:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
    2884:	bf38      	it	cc
    2886:	f44f 73a4 	movcc.w	r3, #328	; 0x148
			conn->tx_head &&
    288a:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
					lr->max_rx_time = sys_cpu_to_le16(rx_time);
    288e:	8142      	strh	r2, [r0, #10]
					lr->max_tx_time = sys_cpu_to_le16(tx_time);
    2890:	81c3      	strh	r3, [r0, #14]
	if (
    2892:	2900      	cmp	r1, #0
    2894:	f000 82c4 	beq.w	2e20 <ull_conn_llcp+0x19c8>
			!conn->llcp_enc.pause_tx &&
    2898:	f894 312a 	ldrb.w	r3, [r4, #298]	; 0x12a
			conn->tx_head &&
    289c:	079e      	lsls	r6, r3, #30
    289e:	f100 82bf 	bmi.w	2e20 <ull_conn_llcp+0x19c8>
			!conn->llcp_phy.pause_tx &&
    28a2:	f894 3183 	ldrb.w	r3, [r4, #387]	; 0x183
    28a6:	07dd      	lsls	r5, r3, #31
    28a8:	f100 82ba 	bmi.w	2e20 <ull_conn_llcp+0x19c8>
		if (conn->tx_head == conn->tx_data) {
    28ac:	f8d4 3194 	ldr.w	r3, [r4, #404]	; 0x194
    28b0:	4299      	cmp	r1, r3
			conn->tx_data = conn->tx_data->next;
    28b2:	bf04      	itt	eq
    28b4:	680b      	ldreq	r3, [r1, #0]
    28b6:	f8c4 3194 	streq.w	r3, [r4, #404]	; 0x194
		if (!conn->tx_ctrl) {
    28ba:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
    28be:	2b00      	cmp	r3, #0
    28c0:	f000 8405 	beq.w	30ce <ull_conn_llcp+0x1c76>
	tx->next = conn->tx_ctrl_last->next;
    28c4:	f8d4 3190 	ldr.w	r3, [r4, #400]	; 0x190
    28c8:	681a      	ldr	r2, [r3, #0]
    28ca:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    28cc:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
    28ce:	f8c4 0190 	str.w	r0, [r4, #400]	; 0x190
	if (!tx->next) {
    28d2:	6803      	ldr	r3, [r0, #0]
    28d4:	2b00      	cmp	r3, #0
    28d6:	f47f aee9 	bne.w	26ac <ull_conn_llcp+0x1254>
		conn->tx_data_last = tx;
    28da:	f8c4 0198 	str.w	r0, [r4, #408]	; 0x198
    28de:	e6e5      	b.n	26ac <ull_conn_llcp+0x1254>
			tx_time = MAX(MIN(PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_1M),
    28e0:	f640 0248 	movw	r2, #2120	; 0x848
    28e4:	4293      	cmp	r3, r2
    28e6:	bf28      	it	cs
    28e8:	4613      	movcs	r3, r2
    28ea:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
    28ee:	bf38      	it	cc
    28f0:	f44f 73a4 	movcc.w	r3, #328	; 0x148
    28f4:	e4db      	b.n	22ae <ull_conn_llcp+0xe56>
		ecb_encrypt(&conn->llcp_enc.ltk[0],
    28f6:	f104 0563 	add.w	r5, r4, #99	; 0x63
    28fa:	462b      	mov	r3, r5
    28fc:	4632      	mov	r2, r6
    28fe:	f104 01c6 	add.w	r1, r4, #198	; 0xc6
    2902:	f204 1035 	addw	r0, r4, #309	; 0x135
    2906:	f018 f8e3 	bl	1aad0 <ecb_encrypt>
		memcpy(&lll->ccm_tx.key[0], &lll->ccm_rx.key[0],
    290a:	4629      	mov	r1, r5
    290c:	2210      	movs	r2, #16
    290e:	f104 0084 	add.w	r0, r4, #132	; 0x84
    2912:	f01d fab0 	bl	1fe76 <memcpy>
		memcpy(&lll->ccm_tx.iv[0], &lll->ccm_rx.iv[0],
    2916:	2208      	movs	r2, #8
    2918:	f104 017c 	add.w	r1, r4, #124	; 0x7c
    291c:	f104 009d 	add.w	r0, r4, #157	; 0x9d
    2920:	f01d faa9 	bl	1fe76 <memcpy>
		lll->ccm_rx.direction = 0;
    2924:	f894 007b 	ldrb.w	r0, [r4, #123]	; 0x7b
		lll->ccm_tx.direction = 1;
    2928:	f894 209c 	ldrb.w	r2, [r4, #156]	; 0x9c
		lll->enc_rx = 1;
    292c:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
		lll->ccm_rx.counter = 0;
    2930:	f884 6073 	strb.w	r6, [r4, #115]	; 0x73
		lll->enc_rx = 1;
    2934:	f043 0308 	orr.w	r3, r3, #8
		lll->ccm_rx.direction = 0;
    2938:	f366 0000 	bfi	r0, r6, #0, #1
		lll->ccm_tx.direction = 1;
    293c:	f042 0201 	orr.w	r2, r2, #1
		lll->ccm_rx.direction = 0;
    2940:	f884 007b 	strb.w	r0, [r4, #123]	; 0x7b
		lll->enc_rx = 1;
    2944:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
		lll->ccm_rx.counter = 0;
    2948:	f884 6074 	strb.w	r6, [r4, #116]	; 0x74
    294c:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
    2950:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
    2954:	f884 6077 	strb.w	r6, [r4, #119]	; 0x77
    2958:	f884 6078 	strb.w	r6, [r4, #120]	; 0x78
    295c:	f884 6079 	strb.w	r6, [r4, #121]	; 0x79
    2960:	f884 607a 	strb.w	r6, [r4, #122]	; 0x7a
		lll->ccm_tx.counter = 0;
    2964:	f8c4 6094 	str.w	r6, [r4, #148]	; 0x94
		start_enc_rsp_send(conn, pdu_ctrl_tx);
    2968:	4641      	mov	r1, r8
		lll->ccm_tx.counter = 0;
    296a:	f8c4 6098 	str.w	r6, [r4, #152]	; 0x98
		lll->ccm_tx.direction = 1;
    296e:	f884 209c 	strb.w	r2, [r4, #156]	; 0x9c
		start_enc_rsp_send(conn, pdu_ctrl_tx);
    2972:	4620      	mov	r0, r4
    2974:	f012 fb5a 	bl	1502c <start_enc_rsp_send>
			conn->tx_head &&
    2978:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
	if (
    297c:	b393      	cbz	r3, 29e4 <ull_conn_llcp+0x158c>
			!conn->llcp_enc.pause_tx &&
    297e:	f894 212a 	ldrb.w	r2, [r4, #298]	; 0x12a
			conn->tx_head &&
    2982:	0795      	lsls	r5, r2, #30
    2984:	d42e      	bmi.n	29e4 <ull_conn_llcp+0x158c>
			!conn->llcp_phy.pause_tx &&
    2986:	f894 2183 	ldrb.w	r2, [r4, #387]	; 0x183
    298a:	07d0      	lsls	r0, r2, #31
    298c:	d42a      	bmi.n	29e4 <ull_conn_llcp+0x158c>
		if (conn->tx_head == conn->tx_data) {
    298e:	f8d4 2194 	ldr.w	r2, [r4, #404]	; 0x194
    2992:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    2994:	bf04      	itt	eq
    2996:	681a      	ldreq	r2, [r3, #0]
    2998:	f8c4 2194 	streq.w	r2, [r4, #404]	; 0x194
		if (!conn->tx_ctrl) {
    299c:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    29a0:	2a00      	cmp	r2, #0
    29a2:	f47f abf9 	bne.w	2198 <ull_conn_llcp+0xd40>
			tx->next = conn->tx_head->next;
    29a6:	681a      	ldr	r2, [r3, #0]
    29a8:	603a      	str	r2, [r7, #0]
			conn->tx_head->next = tx;
    29aa:	601f      	str	r7, [r3, #0]
				conn->tx_ctrl = tx;
    29ac:	683b      	ldr	r3, [r7, #0]
				conn->tx_ctrl_last = tx;
    29ae:	e9c4 7763 	strd	r7, r7, [r4, #396]	; 0x18c
    29b2:	f7ff bbf9 	b.w	21a8 <ull_conn_llcp+0xd50>
		if (!conn->tx_ctrl) {
    29b6:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    29ba:	2a00      	cmp	r2, #0
    29bc:	f47e af35 	bne.w	182a <ull_conn_llcp+0x3d2>
			tx->next = conn->tx_head;
    29c0:	602b      	str	r3, [r5, #0]
				conn->tx_ctrl = tx;
    29c2:	e9c4 5562 	strd	r5, r5, [r4, #392]	; 0x188
				conn->tx_ctrl_last = tx;
    29c6:	f8c4 5190 	str.w	r5, [r4, #400]	; 0x190
    29ca:	f7fe bf36 	b.w	183a <ull_conn_llcp+0x3e2>
		if (!conn->tx_ctrl) {
    29ce:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    29d2:	2a00      	cmp	r2, #0
    29d4:	f47f ae5f 	bne.w	2696 <ull_conn_llcp+0x123e>
			tx->next = conn->tx_head;
    29d8:	6033      	str	r3, [r6, #0]
				conn->tx_ctrl = tx;
    29da:	e9c4 6662 	strd	r6, r6, [r4, #392]	; 0x188
				conn->tx_ctrl_last = tx;
    29de:	f8c4 6190 	str.w	r6, [r4, #400]	; 0x190
    29e2:	e660      	b.n	26a6 <ull_conn_llcp+0x124e>
		if (!conn->tx_ctrl) {
    29e4:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    29e8:	2a00      	cmp	r2, #0
    29ea:	f47f abd5 	bne.w	2198 <ull_conn_llcp+0xd40>
			tx->next = conn->tx_head;
    29ee:	603b      	str	r3, [r7, #0]
				conn->tx_ctrl = tx;
    29f0:	e9c4 7762 	strd	r7, r7, [r4, #392]	; 0x188
				conn->tx_ctrl_last = tx;
    29f4:	f8c4 7190 	str.w	r7, [r4, #400]	; 0x190
    29f8:	f7ff bbd6 	b.w	21a8 <ull_conn_llcp+0xd50>
			if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
    29fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    29fe:	429a      	cmp	r2, r3
    2a00:	f47f a95d 	bne.w	1cbe <ull_conn_llcp+0x866>
				rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    2a04:	2303      	movs	r3, #3
    2a06:	712b      	strb	r3, [r5, #4]
				ll_rx_put(rx->hdr.link, rx);
    2a08:	4629      	mov	r1, r5
    2a0a:	f011 fd1d 	bl	14448 <ll_rx_put>
					rx = conn->llcp_rx;
    2a0e:	f8d4 50d8 	ldr.w	r5, [r4, #216]	; 0xd8
					LL_ASSERT(rx && rx->hdr.link);
    2a12:	2d00      	cmp	r5, #0
    2a14:	f000 8281 	beq.w	2f1a <ull_conn_llcp+0x1ac2>
    2a18:	6828      	ldr	r0, [r5, #0]
    2a1a:	2800      	cmp	r0, #0
    2a1c:	f000 827d 	beq.w	2f1a <ull_conn_llcp+0x1ac2>
					conn->llcp_rx = rx->hdr.link->mem;
    2a20:	6843      	ldr	r3, [r0, #4]
    2a22:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
				rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    2a26:	2303      	movs	r3, #3
    2a28:	712b      	strb	r3, [r5, #4]
				ll_rx_put(rx->hdr.link, rx);
    2a2a:	4629      	mov	r1, r5
    2a2c:	f011 fd0c 	bl	14448 <ll_rx_put>
				ll_rx_sched();
    2a30:	f011 fd14 	bl	1445c <ll_rx_sched>
				return;
    2a34:	f7fe bd55 	b.w	14e2 <ull_conn_llcp+0x8a>
				ecb_encrypt(&conn->llcp_enc.ltk[0],
    2a38:	f104 0563 	add.w	r5, r4, #99	; 0x63
    2a3c:	462b      	mov	r3, r5
    2a3e:	4632      	mov	r2, r6
    2a40:	f104 01c6 	add.w	r1, r4, #198	; 0xc6
    2a44:	f204 1035 	addw	r0, r4, #309	; 0x135
    2a48:	f018 f842 	bl	1aad0 <ecb_encrypt>
				memcpy(&lll->ccm_tx.key[0],
    2a4c:	4629      	mov	r1, r5
    2a4e:	2210      	movs	r2, #16
    2a50:	f104 0084 	add.w	r0, r4, #132	; 0x84
    2a54:	f01d fa0f 	bl	1fe76 <memcpy>
				memcpy(&lll->ccm_tx.iv[0], &lll->ccm_rx.iv[0],
    2a58:	2208      	movs	r2, #8
    2a5a:	f104 017c 	add.w	r1, r4, #124	; 0x7c
    2a5e:	f104 009d 	add.w	r0, r4, #157	; 0x9d
    2a62:	f01d fa08 	bl	1fe76 <memcpy>
				lll->ccm_rx.direction = 1U;
    2a66:	f894 207b 	ldrb.w	r2, [r4, #123]	; 0x7b
				lll->ccm_tx.direction = 0U;
    2a6a:	f894 109c 	ldrb.w	r1, [r4, #156]	; 0x9c
				lll->enc_rx = 1U;
    2a6e:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
				lll->ccm_rx.counter = 0U;
    2a72:	f884 6073 	strb.w	r6, [r4, #115]	; 0x73
				lll->ccm_rx.direction = 1U;
    2a76:	f042 0201 	orr.w	r2, r2, #1
				lll->ccm_tx.direction = 0U;
    2a7a:	f366 0100 	bfi	r1, r6, #0, #1
				lll->enc_rx = 1U;
    2a7e:	f043 0308 	orr.w	r3, r3, #8
				pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    2a82:	2001      	movs	r0, #1
				lll->ccm_rx.direction = 1U;
    2a84:	f884 207b 	strb.w	r2, [r4, #123]	; 0x7b
				lll->ccm_tx.direction = 0U;
    2a88:	f884 109c 	strb.w	r1, [r4, #156]	; 0x9c
				lll->enc_rx = 1U;
    2a8c:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
				lll->ccm_rx.counter = 0U;
    2a90:	f884 6074 	strb.w	r6, [r4, #116]	; 0x74
    2a94:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
    2a98:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
    2a9c:	f884 6077 	strb.w	r6, [r4, #119]	; 0x77
    2aa0:	f884 6078 	strb.w	r6, [r4, #120]	; 0x78
    2aa4:	f884 6079 	strb.w	r6, [r4, #121]	; 0x79
    2aa8:	f884 607a 	strb.w	r6, [r4, #122]	; 0x7a
				lll->ccm_tx.counter = 0U;
    2aac:	f8c4 6094 	str.w	r6, [r4, #148]	; 0x94
    2ab0:	f8c4 6098 	str.w	r6, [r4, #152]	; 0x98
				pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2ab4:	793a      	ldrb	r2, [r7, #4]
				pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    2ab6:	7178      	strb	r0, [r7, #5]
			conn->tx_head &&
    2ab8:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
				pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2abc:	f042 0203 	orr.w	r2, r2, #3
				pdu_ctrl_tx->llctrl.opcode =
    2ac0:	2105      	movs	r1, #5
				pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2ac2:	713a      	strb	r2, [r7, #4]
				pdu_ctrl_tx->llctrl.opcode =
    2ac4:	71f9      	strb	r1, [r7, #7]
	if (
    2ac6:	2b00      	cmp	r3, #0
    2ac8:	f47f ab50 	bne.w	216c <ull_conn_llcp+0xd14>
		if (!conn->tx_ctrl) {
    2acc:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    2ad0:	2a00      	cmp	r2, #0
    2ad2:	f47f ab61 	bne.w	2198 <ull_conn_llcp+0xd40>
			tx->next = conn->tx_head;
    2ad6:	603b      	str	r3, [r7, #0]
				conn->tx_ctrl = tx;
    2ad8:	e9c4 7762 	strd	r7, r7, [r4, #392]	; 0x188
				conn->tx_ctrl_last = tx;
    2adc:	f8c4 7190 	str.w	r7, [r4, #400]	; 0x190
    2ae0:	f7ff bb61 	b.w	21a6 <ull_conn_llcp+0xd4e>
					LL_ASSERT(rx && rx->hdr.link);
    2ae4:	4a10      	ldr	r2, [pc, #64]	; (2b28 <ull_conn_llcp+0x16d0>)
    2ae6:	4911      	ldr	r1, [pc, #68]	; (2b2c <ull_conn_llcp+0x16d4>)
    2ae8:	4811      	ldr	r0, [pc, #68]	; (2b30 <ull_conn_llcp+0x16d8>)
    2aea:	f241 03dd 	movw	r3, #4317	; 0x10dd
    2aee:	f01b fa30 	bl	1df52 <printk>
    2af2:	4040      	eors	r0, r0
    2af4:	f380 8811 	msr	BASEPRI, r0
    2af8:	f04f 0003 	mov.w	r0, #3
    2afc:	df02      	svc	2
    2afe:	6828      	ldr	r0, [r5, #0]
    2b00:	f8b4 c042 	ldrh.w	ip, [r4, #66]	; 0x42
    2b04:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
    2b08:	f7ff bb7b 	b.w	2202 <ull_conn_llcp+0xdaa>
						if (!conn->llcp_length.cache.tx_octets) {
    2b0c:	f8b4 217c 	ldrh.w	r2, [r4, #380]	; 0x17c
    2b10:	2a00      	cmp	r2, #0
    2b12:	f040 814e 	bne.w	2db2 <ull_conn_llcp+0x195a>
							conn->llcp_length.ack = conn->llcp_length.req;
    2b16:	f884 3171 	strb.w	r3, [r4, #369]	; 0x171
							conn->procedure_expire = 0U;
    2b1a:	f8a4 20b0 	strh.w	r2, [r4, #176]	; 0xb0
    2b1e:	f7ff bb67 	b.w	21f0 <ull_conn_llcp+0xd98>
    2b22:	bf00      	nop
    2b24:	20007408 	.word	0x20007408
    2b28:	00024438 	.word	0x00024438
    2b2c:	00024578 	.word	0x00024578
    2b30:	00023ff4 	.word	0x00023ff4
			} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
    2b34:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
    2b38:	f894 2181 	ldrb.w	r2, [r4, #385]	; 0x181
    2b3c:	429a      	cmp	r2, r3
    2b3e:	f43e acd0 	beq.w	14e2 <ull_conn_llcp+0x8a>
		switch (conn->llcp_phy.state) {
    2b42:	f894 2182 	ldrb.w	r2, [r4, #386]	; 0x182
    2b46:	f002 0103 	and.w	r1, r2, #3
    2b4a:	2903      	cmp	r1, #3
    2b4c:	f000 8243 	beq.w	2fd6 <ull_conn_llcp+0x1b7e>
    2b50:	2900      	cmp	r1, #0
    2b52:	f47e acc6 	bne.w	14e2 <ull_conn_llcp+0x8a>
					tx = mem_acquire(&mem_conn_tx_ctrl.free);
    2b56:	48c9      	ldr	r0, [pc, #804]	; (2e7c <ull_conn_llcp+0x1a24>)
    2b58:	f00d fa60 	bl	1001c <mem_acquire>
					if (!tx) {
    2b5c:	4601      	mov	r1, r0
    2b5e:	2800      	cmp	r0, #0
    2b60:	f43f a9a2 	beq.w	1ea8 <ull_conn_llcp+0xa50>
					conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    2b64:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
					conn->phy_pref_tx = conn->llcp_phy.tx;
    2b68:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
					conn->phy_pref_flags = conn->llcp_phy.flags;
    2b6c:	f894 5183 	ldrb.w	r5, [r4, #387]	; 0x183
					conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    2b70:	2001      	movs	r0, #1
    2b72:	f360 0301 	bfi	r3, r0, #0, #2
					conn->phy_pref_tx = conn->llcp_phy.tx;
    2b76:	f3c3 0082 	ubfx	r0, r3, #2, #3
    2b7a:	f360 0202 	bfi	r2, r0, #0, #3
					conn->phy_pref_rx = conn->llcp_phy.rx;
    2b7e:	f3c3 1042 	ubfx	r0, r3, #5, #3
    2b82:	f360 1206 	bfi	r2, r0, #4, #3
					conn->phy_pref_flags = conn->llcp_phy.flags;
    2b86:	f3c5 0540 	ubfx	r5, r5, #1, #1
					pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2b8a:	7908      	ldrb	r0, [r1, #4]
					conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    2b8c:	f884 3182 	strb.w	r3, [r4, #386]	; 0x182
					conn->phy_pref_flags = conn->llcp_phy.flags;
    2b90:	f365 02c3 	bfi	r2, r5, #3, #1
    2b94:	f884 2184 	strb.w	r2, [r4, #388]	; 0x184
					pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2b98:	f040 0003 	orr.w	r0, r0, #3
					conn->phy_pref_tx = conn->llcp_phy.tx;
    2b9c:	f3c3 0682 	ubfx	r6, r3, #2, #3
					pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    2ba0:	2216      	movs	r2, #22
					conn->phy_pref_rx = conn->llcp_phy.rx;
    2ba2:	f3c3 1342 	ubfx	r3, r3, #5, #3
					pdu_ctrl_tx->len =
    2ba6:	2503      	movs	r5, #3
					pr->rx_phys = conn->llcp_phy.rx;
    2ba8:	724b      	strb	r3, [r1, #9]
					pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2baa:	7108      	strb	r0, [r1, #4]
					pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    2bac:	71ca      	strb	r2, [r1, #7]
					pr->tx_phys = conn->llcp_phy.tx;
    2bae:	720e      	strb	r6, [r1, #8]
					pdu_ctrl_tx->len =
    2bb0:	714d      	strb	r5, [r1, #5]
	ctrl_tx_pause_enqueue(conn, tx, false);
    2bb2:	2200      	movs	r2, #0
    2bb4:	4620      	mov	r0, r4
    2bb6:	f012 f869 	bl	14c8c <ctrl_tx_pause_enqueue>
					conn->procedure_expire = conn->procedure_reload;
    2bba:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
    2bbe:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
				break;
    2bc2:	f7ff b971 	b.w	1ea8 <ull_conn_llcp+0xa50>
		conn->tx_data_last = tx;
    2bc6:	f8c4 7198 	str.w	r7, [r4, #408]	; 0x198
    2bca:	f7ff baf0 	b.w	21ae <ull_conn_llcp+0xd56>
				conn->llcp.phy_upd_ind.instant = event_counter +
    2bce:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    2bd0:	4499      	add	r9, r3
					lll->latency +
    2bd2:	f109 0306 	add.w	r3, r9, #6
				conn->llcp.phy_upd_ind.instant = event_counter +
    2bd6:	f8a4 30c6 	strh.w	r3, [r4, #198]	; 0xc6
				(void)ll_pdu_rx_alloc();
    2bda:	f011 fc69 	bl	144b0 <ll_pdu_rx_alloc>
				rx->hdr.link->mem = conn->llcp_rx;
    2bde:	682b      	ldr	r3, [r5, #0]
    2be0:	f8d4 20d8 	ldr.w	r2, [r4, #216]	; 0xd8
    2be4:	605a      	str	r2, [r3, #4]
				conn->llcp_rx = rx;
    2be6:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
				rx = ll_pdu_rx_alloc();
    2bea:	f011 fc61 	bl	144b0 <ll_pdu_rx_alloc>
				rx->hdr.link->mem = conn->llcp_rx;
    2bee:	6803      	ldr	r3, [r0, #0]
    2bf0:	f8d4 20d8 	ldr.w	r2, [r4, #216]	; 0xd8
    2bf4:	605a      	str	r2, [r3, #4]
				conn->llcp_rx = rx;
    2bf6:	f894 30c4 	ldrb.w	r3, [r4, #196]	; 0xc4
    2bfa:	f8b4 10c6 	ldrh.w	r1, [r4, #198]	; 0xc6
    2bfe:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
    2c02:	f3c3 0682 	ubfx	r6, r3, #2, #3
    2c06:	095b      	lsrs	r3, r3, #5
    2c08:	f7ff ba47 	b.w	209a <ull_conn_llcp+0xc42>
			LL_ASSERT(0);
    2c0c:	f640 63f9 	movw	r3, #3833	; 0xef9
				LL_ASSERT(0);
    2c10:	4a9b      	ldr	r2, [pc, #620]	; (2e80 <ull_conn_llcp+0x1a28>)
    2c12:	499c      	ldr	r1, [pc, #624]	; (2e84 <ull_conn_llcp+0x1a2c>)
    2c14:	489c      	ldr	r0, [pc, #624]	; (2e88 <ull_conn_llcp+0x1a30>)
    2c16:	f01b f99c 	bl	1df52 <printk>
    2c1a:	4040      	eors	r0, r0
    2c1c:	f380 8811 	msr	BASEPRI, r0
    2c20:	f04f 0003 	mov.w	r0, #3
    2c24:	df02      	svc	2
				break;
    2c26:	f7ff b93f 	b.w	1ea8 <ull_conn_llcp+0xa50>
			tx = mem_acquire(&mem_conn_tx_ctrl.free);
    2c2a:	4894      	ldr	r0, [pc, #592]	; (2e7c <ull_conn_llcp+0x1a24>)
    2c2c:	f00d f9f6 	bl	1001c <mem_acquire>
			if (tx) {
    2c30:	2800      	cmp	r0, #0
    2c32:	f43f a939 	beq.w	1ea8 <ull_conn_llcp+0xa50>
				conn->llcp_version.ack--;
    2c36:	f894 20fd 	ldrb.w	r2, [r4, #253]	; 0xfd
				conn->llcp_version.tx = 1U;
    2c3a:	f894 30fe 	ldrb.w	r3, [r4, #254]	; 0xfe
				conn->llcp_version.ack--;
    2c3e:	3a01      	subs	r2, #1
    2c40:	f884 20fd 	strb.w	r2, [r4, #253]	; 0xfd
				pdu->ll_id = PDU_DATA_LLID_CTRL;
    2c44:	7902      	ldrb	r2, [r0, #4]
				conn->llcp_version.tx = 1U;
    2c46:	f043 0301 	orr.w	r3, r3, #1
				pdu->len =
    2c4a:	2106      	movs	r1, #6
				conn->llcp_version.tx = 1U;
    2c4c:	f884 30fe 	strb.w	r3, [r4, #254]	; 0xfe
				pdu->ll_id = PDU_DATA_LLID_CTRL;
    2c50:	f042 0203 	orr.w	r2, r2, #3
				pdu->len =
    2c54:	7141      	strb	r1, [r0, #5]
			conn->tx_head &&
    2c56:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
				pdu->ll_id = PDU_DATA_LLID_CTRL;
    2c5a:	7102      	strb	r2, [r0, #4]
				pdu->llctrl.version_ind.version_number =
    2c5c:	210b      	movs	r1, #11
				pdu->llctrl.version_ind.company_id = cid;
    2c5e:	f06f 020e 	mvn.w	r2, #14
				pdu->llctrl.opcode =
    2c62:	250c      	movs	r5, #12
				pdu->llctrl.version_ind.version_number =
    2c64:	7201      	strb	r1, [r0, #8]
				pdu->llctrl.version_ind.company_id = cid;
    2c66:	7242      	strb	r2, [r0, #9]
    2c68:	2105      	movs	r1, #5
				pdu->llctrl.version_ind.sub_version_number = svn;
    2c6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
				pdu->llctrl.opcode =
    2c6e:	71c5      	strb	r5, [r0, #7]
				pdu->llctrl.version_ind.company_id = cid;
    2c70:	7281      	strb	r1, [r0, #10]
				pdu->llctrl.version_ind.sub_version_number = svn;
    2c72:	72c2      	strb	r2, [r0, #11]
    2c74:	7302      	strb	r2, [r0, #12]
	if (
    2c76:	2b00      	cmp	r3, #0
    2c78:	f000 80b4 	beq.w	2de4 <ull_conn_llcp+0x198c>
			!conn->llcp_enc.pause_tx &&
    2c7c:	f894 212a 	ldrb.w	r2, [r4, #298]	; 0x12a
			conn->tx_head &&
    2c80:	0797      	lsls	r7, r2, #30
    2c82:	f100 80af 	bmi.w	2de4 <ull_conn_llcp+0x198c>
			!conn->llcp_phy.pause_tx &&
    2c86:	f894 2183 	ldrb.w	r2, [r4, #387]	; 0x183
    2c8a:	07d6      	lsls	r6, r2, #31
    2c8c:	f100 80aa 	bmi.w	2de4 <ull_conn_llcp+0x198c>
		if (conn->tx_head == conn->tx_data) {
    2c90:	f8d4 2194 	ldr.w	r2, [r4, #404]	; 0x194
    2c94:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    2c96:	bf04      	itt	eq
    2c98:	681a      	ldreq	r2, [r3, #0]
    2c9a:	f8c4 2194 	streq.w	r2, [r4, #404]	; 0x194
		if (!conn->tx_ctrl) {
    2c9e:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    2ca2:	2a00      	cmp	r2, #0
    2ca4:	f47f ae0e 	bne.w	28c4 <ull_conn_llcp+0x146c>
			tx->next = conn->tx_head->next;
    2ca8:	681a      	ldr	r2, [r3, #0]
    2caa:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    2cac:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last = tx;
    2cae:	e9c4 0063 	strd	r0, r0, [r4, #396]	; 0x18c
    2cb2:	e60e      	b.n	28d2 <ull_conn_llcp+0x147a>
			start_enc_rsp_send(conn, pdu_ctrl_tx);
    2cb4:	4641      	mov	r1, r8
    2cb6:	4620      	mov	r0, r4
    2cb8:	f012 f9b8 	bl	1502c <start_enc_rsp_send>
			conn->tx_head &&
    2cbc:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
	if (
    2cc0:	b37b      	cbz	r3, 2d22 <ull_conn_llcp+0x18ca>
			!conn->llcp_enc.pause_tx &&
    2cc2:	f894 212a 	ldrb.w	r2, [r4, #298]	; 0x12a
			conn->tx_head &&
    2cc6:	0790      	lsls	r0, r2, #30
    2cc8:	d42b      	bmi.n	2d22 <ull_conn_llcp+0x18ca>
			!conn->llcp_phy.pause_tx &&
    2cca:	f894 2183 	ldrb.w	r2, [r4, #387]	; 0x183
    2cce:	07d1      	lsls	r1, r2, #31
    2cd0:	d427      	bmi.n	2d22 <ull_conn_llcp+0x18ca>
		if (conn->tx_head == conn->tx_data) {
    2cd2:	f8d4 2194 	ldr.w	r2, [r4, #404]	; 0x194
    2cd6:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    2cd8:	bf04      	itt	eq
    2cda:	681a      	ldreq	r2, [r3, #0]
    2cdc:	f8c4 2194 	streq.w	r2, [r4, #404]	; 0x194
		if (!conn->tx_ctrl) {
    2ce0:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    2ce4:	2a00      	cmp	r2, #0
    2ce6:	f000 8170 	beq.w	2fca <ull_conn_llcp+0x1b72>
	tx->next = conn->tx_ctrl_last->next;
    2cea:	f8d4 3190 	ldr.w	r3, [r4, #400]	; 0x190
    2cee:	681a      	ldr	r2, [r3, #0]
    2cf0:	603a      	str	r2, [r7, #0]
	conn->tx_ctrl_last->next = tx;
    2cf2:	601f      	str	r7, [r3, #0]
	conn->tx_ctrl_last = tx;
    2cf4:	f8c4 7190 	str.w	r7, [r4, #400]	; 0x190
	if (!tx->next) {
    2cf8:	683b      	ldr	r3, [r7, #0]
    2cfa:	2b00      	cmp	r3, #0
    2cfc:	d07d      	beq.n	2dfa <ull_conn_llcp+0x19a2>
			conn->llcp_enc.pause_rx = 0U;
    2cfe:	f894 312a 	ldrb.w	r3, [r4, #298]	; 0x12a
    2d02:	f023 0303 	bic.w	r3, r3, #3
    2d06:	f884 312a 	strb.w	r3, [r4, #298]	; 0x12a
    2d0a:	f7ff ba50 	b.w	21ae <ull_conn_llcp+0xd56>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    2d0e:	230d      	movs	r3, #13
		p->error_code =	conn->llcp.encryption.error_code;
    2d10:	723e      	strb	r6, [r7, #8]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    2d12:	71fb      	strb	r3, [r7, #7]
		p->error_code =	conn->llcp.encryption.error_code;
    2d14:	2502      	movs	r5, #2
    2d16:	f7ff ba20 	b.w	215a <ull_conn_llcp+0xd02>
		conn->tx_data_last = tx;
    2d1a:	f8c4 0198 	str.w	r0, [r4, #408]	; 0x198
    2d1e:	f7ff baee 	b.w	22fe <ull_conn_llcp+0xea6>
		if (!conn->tx_ctrl) {
    2d22:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    2d26:	2a00      	cmp	r2, #0
    2d28:	d1df      	bne.n	2cea <ull_conn_llcp+0x1892>
			tx->next = conn->tx_head;
    2d2a:	603b      	str	r3, [r7, #0]
				conn->tx_ctrl = tx;
    2d2c:	e9c4 7762 	strd	r7, r7, [r4, #392]	; 0x188
				conn->tx_ctrl_last = tx;
    2d30:	f8c4 7190 	str.w	r7, [r4, #400]	; 0x190
    2d34:	e7e0      	b.n	2cf8 <ull_conn_llcp+0x18a0>
					(void)ll_pdu_rx_alloc();
    2d36:	f011 fbbb 	bl	144b0 <ll_pdu_rx_alloc>
					rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    2d3a:	230f      	movs	r3, #15
					rx->hdr.handle = lll->handle;
    2d3c:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
					upd->status = 0U;
    2d3e:	772e      	strb	r6, [r5, #28]
					rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    2d40:	712b      	strb	r3, [r5, #4]
					upd->tx = lll->phy_tx;
    2d42:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
					ll_rx_put(rx->hdr.link, rx);
    2d46:	6828      	ldr	r0, [r5, #0]
					rx->hdr.handle = lll->handle;
    2d48:	80ea      	strh	r2, [r5, #6]
					upd->tx = lll->phy_tx;
    2d4a:	f3c3 0302 	ubfx	r3, r3, #0, #3
    2d4e:	776b      	strb	r3, [r5, #29]
					upd->rx = lll->phy_rx;
    2d50:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
    2d54:	f3c3 0302 	ubfx	r3, r3, #0, #3
    2d58:	77ab      	strb	r3, [r5, #30]
					ll_rx_put(rx->hdr.link, rx);
    2d5a:	4629      	mov	r1, r5
    2d5c:	f011 fb74 	bl	14448 <ll_rx_put>
					ll_rx_sched();
    2d60:	f011 fb7c 	bl	1445c <ll_rx_sched>
    2d64:	f894 30c4 	ldrb.w	r3, [r4, #196]	; 0xc4
    2d68:	f8b4 10c6 	ldrh.w	r1, [r4, #198]	; 0xc6
    2d6c:	f3c3 0682 	ubfx	r6, r3, #2, #3
    2d70:	095b      	lsrs	r3, r3, #5
    2d72:	f7ff b992 	b.w	209a <ull_conn_llcp+0xc42>
		switch (conn->llcp_conn_param.state) {
    2d76:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
    2d7a:	f003 0307 	and.w	r3, r3, #7
    2d7e:	2b05      	cmp	r3, #5
    2d80:	f200 81b3 	bhi.w	30ea <ull_conn_llcp+0x1c92>
    2d84:	a001      	add	r0, pc, #4	; (adr r0, 2d8c <ull_conn_llcp+0x1934>)
    2d86:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
    2d8a:	bf00      	nop
    2d8c:	000024c7 	.word	0x000024c7
    2d90:	00002439 	.word	0x00002439
    2d94:	000023e9 	.word	0x000023e9
    2d98:	000014e3 	.word	0x000014e3
    2d9c:	000014e3 	.word	0x000014e3
    2da0:	000014e3 	.word	0x000014e3
		conn->tx_data_last = tx;
    2da4:	f8c4 5198 	str.w	r5, [r4, #408]	; 0x198
    2da8:	f7fe bd4a 	b.w	1840 <ull_conn_llcp+0x3e8>
    2dac:	f8c4 6198 	str.w	r6, [r4, #408]	; 0x198
			conn->procedure_expire = conn->procedure_reload;
    2db0:	e47c      	b.n	26ac <ull_conn_llcp+0x1254>
							conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    2db2:	f894 0172 	ldrb.w	r0, [r4, #370]	; 0x172
							conn->llcp_length.tx_time =
    2db6:	f8b4 517e 	ldrh.w	r5, [r4, #382]	; 0x17e
							conn->llcp_length.tx_octets =
    2dba:	f8a4 2176 	strh.w	r2, [r4, #374]	; 0x176
							conn->llcp_length.cache.tx_octets = 0;
    2dbe:	2300      	movs	r3, #0
							conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    2dc0:	f363 0002 	bfi	r0, r3, #0, #3
    2dc4:	f884 0172 	strb.w	r0, [r4, #370]	; 0x172
							conn->llcp_length.cache.tx_octets = 0;
    2dc8:	f8a4 317c 	strh.w	r3, [r4, #380]	; 0x17c
							conn->llcp_length.tx_time =
    2dcc:	f8a4 517a 	strh.w	r5, [r4, #378]	; 0x17a
							conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    2dd0:	f7ff ba0e 	b.w	21f0 <ull_conn_llcp+0xd98>
			tx->next = conn->tx_head->next;
    2dd4:	681a      	ldr	r2, [r3, #0]
    2dd6:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    2dd8:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl = tx;
    2dda:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
    2ddc:	e9c4 0063 	strd	r0, r0, [r4, #396]	; 0x18c
    2de0:	f7fe bcab 	b.w	173a <ull_conn_llcp+0x2e2>
		if (!conn->tx_ctrl) {
    2de4:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    2de8:	2a00      	cmp	r2, #0
    2dea:	f47f ad6b 	bne.w	28c4 <ull_conn_llcp+0x146c>
			tx->next = conn->tx_head;
    2dee:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    2df0:	e9c4 0062 	strd	r0, r0, [r4, #392]	; 0x188
				conn->tx_ctrl_last = tx;
    2df4:	f8c4 0190 	str.w	r0, [r4, #400]	; 0x190
    2df8:	e56b      	b.n	28d2 <ull_conn_llcp+0x147a>
		conn->tx_data_last = tx;
    2dfa:	f8c4 7198 	str.w	r7, [r4, #408]	; 0x198
    2dfe:	e77e      	b.n	2cfe <ull_conn_llcp+0x18a6>
			tx->next = conn->tx_head->next;
    2e00:	6803      	ldr	r3, [r0, #0]
    2e02:	6033      	str	r3, [r6, #0]
			conn->tx_head->next = tx;
    2e04:	6006      	str	r6, [r0, #0]
				conn->tx_ctrl = tx;
    2e06:	6830      	ldr	r0, [r6, #0]
				conn->tx_ctrl_last = tx;
    2e08:	e9c4 6663 	strd	r6, r6, [r4, #396]	; 0x18c
    2e0c:	f7ff b8b9 	b.w	1f82 <ull_conn_llcp+0xb2a>
			tx->next = conn->tx_head->next;
    2e10:	681a      	ldr	r2, [r3, #0]
    2e12:	603a      	str	r2, [r7, #0]
			conn->tx_head->next = tx;
    2e14:	601f      	str	r7, [r3, #0]
				conn->tx_ctrl = tx;
    2e16:	683b      	ldr	r3, [r7, #0]
				conn->tx_ctrl_last = tx;
    2e18:	e9c4 7763 	strd	r7, r7, [r4, #396]	; 0x18c
    2e1c:	f7ff b96b 	b.w	20f6 <ull_conn_llcp+0xc9e>
		if (!conn->tx_ctrl) {
    2e20:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
    2e24:	2b00      	cmp	r3, #0
    2e26:	f47f ad4d 	bne.w	28c4 <ull_conn_llcp+0x146c>
			tx->next = conn->tx_head;
    2e2a:	6001      	str	r1, [r0, #0]
				conn->tx_ctrl = tx;
    2e2c:	e9c4 0062 	strd	r0, r0, [r4, #392]	; 0x188
				conn->tx_ctrl_last = tx;
    2e30:	f8c4 0190 	str.w	r0, [r4, #400]	; 0x190
    2e34:	e54d      	b.n	28d2 <ull_conn_llcp+0x147a>
			tx_time = MAX(MIN(PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_1M),
    2e36:	f640 0248 	movw	r2, #2120	; 0x848
    2e3a:	4293      	cmp	r3, r2
    2e3c:	bf28      	it	cs
    2e3e:	4613      	movcs	r3, r2
    2e40:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
    2e44:	bf38      	it	cc
    2e46:	f44f 73a4 	movcc.w	r3, #328	; 0x148
    2e4a:	e51e      	b.n	288a <ull_conn_llcp+0x1432>
			tx->next = conn->tx_head->next;
    2e4c:	681a      	ldr	r2, [r3, #0]
    2e4e:	602a      	str	r2, [r5, #0]
			conn->tx_head->next = tx;
    2e50:	601d      	str	r5, [r3, #0]
				conn->tx_ctrl = tx;
    2e52:	682b      	ldr	r3, [r5, #0]
				conn->tx_ctrl_last = tx;
    2e54:	e9c4 5563 	strd	r5, r5, [r4, #396]	; 0x18c
    2e58:	f7ff b8e2 	b.w	2020 <ull_conn_llcp+0xbc8>
			tx->next = conn->tx_head->next;
    2e5c:	680b      	ldr	r3, [r1, #0]
    2e5e:	6003      	str	r3, [r0, #0]
			conn->tx_head->next = tx;
    2e60:	6008      	str	r0, [r1, #0]
				conn->tx_ctrl = tx;
    2e62:	6801      	ldr	r1, [r0, #0]
				conn->tx_ctrl_last = tx;
    2e64:	e9c4 0063 	strd	r0, r0, [r4, #396]	; 0x18c
    2e68:	f7ff ba46 	b.w	22f8 <ull_conn_llcp+0xea0>
			tx->next = conn->tx_head->next;
    2e6c:	681a      	ldr	r2, [r3, #0]
    2e6e:	602a      	str	r2, [r5, #0]
			conn->tx_head->next = tx;
    2e70:	601d      	str	r5, [r3, #0]
				conn->tx_ctrl = tx;
    2e72:	682b      	ldr	r3, [r5, #0]
				conn->tx_ctrl_last = tx;
    2e74:	e9c4 5563 	strd	r5, r5, [r4, #396]	; 0x18c
    2e78:	f7fe bcdf 	b.w	183a <ull_conn_llcp+0x3e2>
    2e7c:	20007408 	.word	0x20007408
    2e80:	00024438 	.word	0x00024438
    2e84:	00024064 	.word	0x00024064
    2e88:	00023ff4 	.word	0x00023ff4
					LL_ASSERT(rx && rx->hdr.link);
    2e8c:	4aa1      	ldr	r2, [pc, #644]	; (3114 <ull_conn_llcp+0x1cbc>)
    2e8e:	49a2      	ldr	r1, [pc, #648]	; (3118 <ull_conn_llcp+0x1cc0>)
    2e90:	48a2      	ldr	r0, [pc, #648]	; (311c <ull_conn_llcp+0x1cc4>)
    2e92:	f241 03dd 	movw	r3, #4317	; 0x10dd
    2e96:	f01b f85c 	bl	1df52 <printk>
    2e9a:	4040      	eors	r0, r0
    2e9c:	f380 8811 	msr	BASEPRI, r0
    2ea0:	f04f 0003 	mov.w	r0, #3
    2ea4:	df02      	svc	2
    2ea6:	6828      	ldr	r0, [r5, #0]
    2ea8:	e494      	b.n	27d4 <ull_conn_llcp+0x137c>
						if (!conn->llcp_length.cache.tx_octets) {
    2eaa:	f8b4 217c 	ldrh.w	r2, [r4, #380]	; 0x17c
    2eae:	2a00      	cmp	r2, #0
    2eb0:	f040 80d3 	bne.w	305a <ull_conn_llcp+0x1c02>
							conn->llcp_length.ack = conn->llcp_length.req;
    2eb4:	f884 0171 	strb.w	r0, [r4, #369]	; 0x171
							conn->procedure_expire = 0U;
    2eb8:	f8a4 20b0 	strh.w	r2, [r4, #176]	; 0xb0
    2ebc:	e481      	b.n	27c2 <ull_conn_llcp+0x136a>
			tx->next = conn->tx_head->next;
    2ebe:	681a      	ldr	r2, [r3, #0]
    2ec0:	6032      	str	r2, [r6, #0]
			conn->tx_head->next = tx;
    2ec2:	601e      	str	r6, [r3, #0]
				conn->tx_ctrl = tx;
    2ec4:	6833      	ldr	r3, [r6, #0]
				conn->tx_ctrl_last = tx;
    2ec6:	e9c4 6663 	strd	r6, r6, [r4, #396]	; 0x18c
    2eca:	f7ff bbec 	b.w	26a6 <ull_conn_llcp+0x124e>
			tx->next = conn->tx_head->next;
    2ece:	681a      	ldr	r2, [r3, #0]
    2ed0:	603a      	str	r2, [r7, #0]
			conn->tx_head->next = tx;
    2ed2:	601f      	str	r7, [r3, #0]
				conn->tx_ctrl_last = tx;
    2ed4:	e9c4 7763 	strd	r7, r7, [r4, #396]	; 0x18c
    2ed8:	f7ff b965 	b.w	21a6 <ull_conn_llcp+0xd4e>
			tx = mem_acquire(&mem_conn_tx_ctrl.free);
    2edc:	4890      	ldr	r0, [pc, #576]	; (3120 <ull_conn_llcp+0x1cc8>)
    2ede:	f00d f89d 	bl	1001c <mem_acquire>
			if (!tx) {
    2ee2:	4601      	mov	r1, r0
    2ee4:	2800      	cmp	r0, #0
    2ee6:	f43e afdf 	beq.w	1ea8 <ull_conn_llcp+0xa50>
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    2eea:	7903      	ldrb	r3, [r0, #4]
    2eec:	f043 0303 	orr.w	r3, r3, #3
    2ef0:	710b      	strb	r3, [r1, #4]
			pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    2ef2:	2011      	movs	r0, #17
			pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    2ef4:	2203      	movs	r2, #3
			rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    2ef6:	230f      	movs	r3, #15
			pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    2ef8:	71c8      	strb	r0, [r1, #7]
			pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    2efa:	714a      	strb	r2, [r1, #5]
			rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    2efc:	720b      	strb	r3, [r1, #8]
			rej->error_code = conn->llcp_conn_param.status;
    2efe:	f894 314b 	ldrb.w	r3, [r4, #331]	; 0x14b
    2f02:	724b      	strb	r3, [r1, #9]
	ctrl_tx_pause_enqueue(conn, tx, false);
    2f04:	463a      	mov	r2, r7
    2f06:	4620      	mov	r0, r4
    2f08:	f011 fec0 	bl	14c8c <ctrl_tx_pause_enqueue>
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    2f0c:	f894 3148 	ldrb.w	r3, [r4, #328]	; 0x148
	conn_upd_curr = NULL;
    2f10:	6037      	str	r7, [r6, #0]
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    2f12:	f884 3149 	strb.w	r3, [r4, #329]	; 0x149
    2f16:	f7fe bfc7 	b.w	1ea8 <ull_conn_llcp+0xa50>
					LL_ASSERT(rx && rx->hdr.link);
    2f1a:	4a7e      	ldr	r2, [pc, #504]	; (3114 <ull_conn_llcp+0x1cbc>)
    2f1c:	497e      	ldr	r1, [pc, #504]	; (3118 <ull_conn_llcp+0x1cc0>)
    2f1e:	487f      	ldr	r0, [pc, #508]	; (311c <ull_conn_llcp+0x1cc4>)
    2f20:	f241 231c 	movw	r3, #4636	; 0x121c
    2f24:	f01b f815 	bl	1df52 <printk>
    2f28:	4040      	eors	r0, r0
    2f2a:	f380 8811 	msr	BASEPRI, r0
    2f2e:	f04f 0003 	mov.w	r0, #3
    2f32:	df02      	svc	2
    2f34:	6828      	ldr	r0, [r5, #0]
    2f36:	e573      	b.n	2a20 <ull_conn_llcp+0x15c8>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    2f38:	4879      	ldr	r0, [pc, #484]	; (3120 <ull_conn_llcp+0x1cc8>)
    2f3a:	f00d f86f 	bl	1001c <mem_acquire>
		if (!tx) {
    2f3e:	4601      	mov	r1, r0
    2f40:	2800      	cmp	r0, #0
    2f42:	f43e afb1 	beq.w	1ea8 <ull_conn_llcp+0xa50>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    2f46:	7903      	ldrb	r3, [r0, #4]
		pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
    2f48:	2218      	movs	r2, #24
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    2f4a:	f043 0303 	orr.w	r3, r3, #3
    2f4e:	7103      	strb	r3, [r0, #4]
		pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
    2f50:	7142      	strb	r2, [r0, #5]
		rsp->interval_min =
    2f52:	f8b4 214c 	ldrh.w	r2, [r4, #332]	; 0x14c
		rsp->interval_max =
    2f56:	f8b4 314e 	ldrh.w	r3, [r4, #334]	; 0x14e
		rsp->latency =
    2f5a:	f8b4 0150 	ldrh.w	r0, [r4, #336]	; 0x150
		rsp->interval_min =
    2f5e:	810a      	strh	r2, [r1, #8]
		rsp->timeout =
    2f60:	f8b4 2152 	ldrh.w	r2, [r4, #338]	; 0x152
		rsp->interval_max =
    2f64:	814b      	strh	r3, [r1, #10]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
    2f66:	2310      	movs	r3, #16
		rsp->latency =
    2f68:	8188      	strh	r0, [r1, #12]
		rsp->timeout =
    2f6a:	81ca      	strh	r2, [r1, #14]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
    2f6c:	71cb      	strb	r3, [r1, #7]
		rsp->preferred_periodicity =
    2f6e:	f894 3154 	ldrb.w	r3, [r4, #340]	; 0x154
    2f72:	740b      	strb	r3, [r1, #16]
		rsp->reference_conn_event_count =
    2f74:	f8b4 3156 	ldrh.w	r3, [r4, #342]	; 0x156
		rsp->offset0 = sys_cpu_to_le16(conn->llcp_conn_param.offset0);
    2f78:	f8b4 0158 	ldrh.w	r0, [r4, #344]	; 0x158
		rsp->offset1 = sys_cpu_to_le16(conn->llcp_conn_param.offset1);
    2f7c:	f8b4 215a 	ldrh.w	r2, [r4, #346]	; 0x15a
		rsp->reference_conn_event_count =
    2f80:	f8a1 3011 	strh.w	r3, [r1, #17]
		rsp->offset2 = sys_cpu_to_le16(conn->llcp_conn_param.offset2);
    2f84:	f8b4 315c 	ldrh.w	r3, [r4, #348]	; 0x15c
		rsp->offset0 = sys_cpu_to_le16(conn->llcp_conn_param.offset0);
    2f88:	f8a1 0013 	strh.w	r0, [r1, #19]
		rsp->offset3 = sys_cpu_to_le16(conn->llcp_conn_param.offset3);
    2f8c:	f8b4 015e 	ldrh.w	r0, [r4, #350]	; 0x15e
		rsp->offset1 = sys_cpu_to_le16(conn->llcp_conn_param.offset1);
    2f90:	f8a1 2015 	strh.w	r2, [r1, #21]
		rsp->offset4 = sys_cpu_to_le16(conn->llcp_conn_param.offset4);
    2f94:	f8b4 2160 	ldrh.w	r2, [r4, #352]	; 0x160
		rsp->offset2 = sys_cpu_to_le16(conn->llcp_conn_param.offset2);
    2f98:	f8a1 3017 	strh.w	r3, [r1, #23]
		rsp->offset5 = sys_cpu_to_le16(conn->llcp_conn_param.offset5);
    2f9c:	f8b4 3162 	ldrh.w	r3, [r4, #354]	; 0x162
    2fa0:	f8a1 301d 	strh.w	r3, [r1, #29]
		rsp->offset3 = sys_cpu_to_le16(conn->llcp_conn_param.offset3);
    2fa4:	f8a1 0019 	strh.w	r0, [r1, #25]
		rsp->offset4 = sys_cpu_to_le16(conn->llcp_conn_param.offset4);
    2fa8:	f8a1 201b 	strh.w	r2, [r1, #27]
	ctrl_tx_pause_enqueue(conn, tx, false);
    2fac:	4620      	mov	r0, r4
    2fae:	462a      	mov	r2, r5
    2fb0:	f011 fe6c 	bl	14c8c <ctrl_tx_pause_enqueue>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    2fb4:	f894 3148 	ldrb.w	r3, [r4, #328]	; 0x148
	conn_upd_curr = NULL;
    2fb8:	6035      	str	r5, [r6, #0]
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    2fba:	f884 3149 	strb.w	r3, [r4, #329]	; 0x149
	conn_upd_curr = NULL;
    2fbe:	f894 50c0 	ldrb.w	r5, [r4, #192]	; 0xc0
    2fc2:	f894 30bf 	ldrb.w	r3, [r4, #191]	; 0xbf
}
    2fc6:	f7fe ba87 	b.w	14d8 <ull_conn_llcp+0x80>
			tx->next = conn->tx_head->next;
    2fca:	681a      	ldr	r2, [r3, #0]
    2fcc:	603a      	str	r2, [r7, #0]
			conn->tx_head->next = tx;
    2fce:	601f      	str	r7, [r3, #0]
				conn->tx_ctrl_last = tx;
    2fd0:	e9c4 7763 	strd	r7, r7, [r4, #396]	; 0x18c
    2fd4:	e690      	b.n	2cf8 <ull_conn_llcp+0x18a0>
					conn->llcp_phy.ack = conn->llcp_phy.req;
    2fd6:	f884 3181 	strb.w	r3, [r4, #385]	; 0x181
					if (conn->llcp_phy.tx & BIT(1)) {
    2fda:	f3c2 0382 	ubfx	r3, r2, #2, #3
    2fde:	0712      	lsls	r2, r2, #28
    2fe0:	d553      	bpl.n	308a <ull_conn_llcp+0x1c32>
						conn->llcp_phy.tx = BIT(1);
    2fe2:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
    2fe6:	2202      	movs	r2, #2
    2fe8:	f362 0384 	bfi	r3, r2, #2, #3
    2fec:	f884 3182 	strb.w	r3, [r4, #386]	; 0x182
					if (conn->llcp_phy.rx & BIT(1)) {
    2ff0:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
    2ff4:	065e      	lsls	r6, r3, #25
    2ff6:	ea4f 1253 	mov.w	r2, r3, lsr #5
    2ffa:	d53e      	bpl.n	307a <ull_conn_llcp+0x1c22>
						conn->llcp_phy.rx = BIT(1);
    2ffc:	2202      	movs	r2, #2
    2ffe:	f362 1347 	bfi	r3, r2, #5, #3
    3002:	f884 3182 	strb.w	r3, [r4, #386]	; 0x182
					if (conn->llcp_phy.tx != conn->lll.phy_tx) {
    3006:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
    300a:	f894 6048 	ldrb.w	r6, [r4, #72]	; 0x48
					if (conn->llcp_phy.rx != conn->lll.phy_rx) {
    300e:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
					conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    3012:	f894 2183 	ldrb.w	r2, [r4, #387]	; 0x183
					if (conn->llcp_phy.tx != conn->lll.phy_tx) {
    3016:	f3c3 0182 	ubfx	r1, r3, #2, #3
    301a:	f006 0607 	and.w	r6, r6, #7
					if (conn->llcp_phy.rx != conn->lll.phy_rx) {
    301e:	f000 0007 	and.w	r0, r0, #7
					conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    3022:	f3c2 0280 	ubfx	r2, r2, #2, #1
						conn->llcp.phy_upd_ind.tx = 0U;
    3026:	428e      	cmp	r6, r1
    3028:	bf08      	it	eq
    302a:	2100      	moveq	r1, #0
					conn->llcp.phy_upd_ind.initiate = 1U;
    302c:	0052      	lsls	r2, r2, #1
						conn->llcp.phy_upd_ind.rx = 0U;
    302e:	ebb0 1f53 	cmp.w	r0, r3, lsr #5
					conn->llcp.phy_upd_ind.initiate = 1U;
    3032:	f042 0201 	orr.w	r2, r2, #1
					if (conn->llcp_phy.rx != conn->lll.phy_rx) {
    3036:	ea4f 1353 	mov.w	r3, r3, lsr #5
						conn->llcp.phy_upd_ind.rx = 0U;
    303a:	bf08      	it	eq
    303c:	2300      	moveq	r3, #0
					conn->llcp.phy_upd_ind.initiate = 1U;
    303e:	ea42 1243 	orr.w	r2, r2, r3, lsl #5
    3042:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
					conn->llcp_ack -= 2U;
    3046:	1eab      	subs	r3, r5, #2
					conn->llcp_type = LLCP_PHY_UPD;
    3048:	2106      	movs	r1, #6
					conn->llcp_ack -= 2U;
    304a:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
					conn->llcp.phy_upd_ind.initiate = 1U;
    304e:	f884 20c4 	strb.w	r2, [r4, #196]	; 0xc4
					conn->llcp_type = LLCP_PHY_UPD;
    3052:	f884 10c1 	strb.w	r1, [r4, #193]	; 0xc1
			} else if (conn->llcp_length.ack != conn->llcp_length.req) {
    3056:	f7fe bab4 	b.w	15c2 <ull_conn_llcp+0x16a>
							conn->llcp_length.cache.tx_octets = 0;
    305a:	2000      	movs	r0, #0
							conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    305c:	460b      	mov	r3, r1
    305e:	f360 0302 	bfi	r3, r0, #0, #3
							conn->llcp_length.tx_octets =
    3062:	f8a4 2176 	strh.w	r2, [r4, #374]	; 0x176
							conn->llcp_length.tx_time =
    3066:	f8b4 217e 	ldrh.w	r2, [r4, #382]	; 0x17e
							conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    306a:	f884 3172 	strb.w	r3, [r4, #370]	; 0x172
							conn->llcp_length.cache.tx_octets = 0;
    306e:	f8a4 017c 	strh.w	r0, [r4, #380]	; 0x17c
							conn->llcp_length.tx_time =
    3072:	f8a4 217a 	strh.w	r2, [r4, #378]	; 0x17a
							conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    3076:	f7ff bba4 	b.w	27c2 <ull_conn_llcp+0x136a>
					} else if (conn->llcp_phy.rx & BIT(0)) {
    307a:	07d0      	lsls	r0, r2, #31
    307c:	d50f      	bpl.n	309e <ull_conn_llcp+0x1c46>
						conn->llcp_phy.rx = BIT(0);
    307e:	2201      	movs	r2, #1
    3080:	f362 1347 	bfi	r3, r2, #5, #3
    3084:	f884 3182 	strb.w	r3, [r4, #386]	; 0x182
    3088:	e7bd      	b.n	3006 <ull_conn_llcp+0x1bae>
					} else if (conn->llcp_phy.tx & BIT(0)) {
    308a:	07df      	lsls	r7, r3, #31
    308c:	d510      	bpl.n	30b0 <ull_conn_llcp+0x1c58>
						conn->llcp_phy.tx = BIT(0);
    308e:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
    3092:	2201      	movs	r2, #1
    3094:	f362 0384 	bfi	r3, r2, #2, #3
    3098:	f884 3182 	strb.w	r3, [r4, #386]	; 0x182
    309c:	e7a8      	b.n	2ff0 <ull_conn_llcp+0x1b98>
					} else if (conn->llcp_phy.rx & BIT(2)) {
    309e:	f012 0204 	ands.w	r2, r2, #4
						conn->llcp_phy.rx = BIT(2);
    30a2:	bf18      	it	ne
    30a4:	2204      	movne	r2, #4
						conn->llcp_phy.rx = 0U;
    30a6:	f362 1347 	bfi	r3, r2, #5, #3
    30aa:	f884 3182 	strb.w	r3, [r4, #386]	; 0x182
    30ae:	e7aa      	b.n	3006 <ull_conn_llcp+0x1bae>
					} else if (conn->llcp_phy.tx & BIT(2)) {
    30b0:	f013 0304 	ands.w	r3, r3, #4
    30b4:	d012      	beq.n	30dc <ull_conn_llcp+0x1c84>
						conn->llcp_phy.tx = BIT(2);
    30b6:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
    30ba:	2204      	movs	r2, #4
    30bc:	f362 0384 	bfi	r3, r2, #2, #3
    30c0:	f884 3182 	strb.w	r3, [r4, #386]	; 0x182
    30c4:	e794      	b.n	2ff0 <ull_conn_llcp+0x1b98>
					conn->llcp_conn_param.interval_max;
    30c6:	f8b4 314e 	ldrh.w	r3, [r4, #334]	; 0x14e
    30ca:	f7ff b9df 	b.w	248c <ull_conn_llcp+0x1034>
			tx->next = conn->tx_head->next;
    30ce:	680b      	ldr	r3, [r1, #0]
    30d0:	6003      	str	r3, [r0, #0]
			conn->tx_head->next = tx;
    30d2:	6008      	str	r0, [r1, #0]
				conn->tx_ctrl_last = tx;
    30d4:	e9c4 0063 	strd	r0, r0, [r4, #396]	; 0x18c
    30d8:	f7ff bbfb 	b.w	28d2 <ull_conn_llcp+0x147a>
						conn->llcp_phy.tx = 0U;
    30dc:	f894 2182 	ldrb.w	r2, [r4, #386]	; 0x182
    30e0:	f363 0284 	bfi	r2, r3, #2, #3
    30e4:	f884 2182 	strb.w	r2, [r4, #386]	; 0x182
    30e8:	e782      	b.n	2ff0 <ull_conn_llcp+0x1b98>
				LL_ASSERT(0);
    30ea:	f241 0309 	movw	r3, #4105	; 0x1009
    30ee:	e58f      	b.n	2c10 <ull_conn_llcp+0x17b8>
				LL_ASSERT(0);
    30f0:	f241 1305 	movw	r3, #4357	; 0x1105
    30f4:	e58c      	b.n	2c10 <ull_conn_llcp+0x17b8>
    30f6:	4a07      	ldr	r2, [pc, #28]	; (3114 <ull_conn_llcp+0x1cbc>)
    30f8:	490a      	ldr	r1, [pc, #40]	; (3124 <ull_conn_llcp+0x1ccc>)
    30fa:	4808      	ldr	r0, [pc, #32]	; (311c <ull_conn_llcp+0x1cc4>)
    30fc:	f241 1305 	movw	r3, #4357	; 0x1105
    3100:	f01a ff27 	bl	1df52 <printk>
    3104:	4040      	eors	r0, r0
    3106:	f380 8811 	msr	BASEPRI, r0
    310a:	f04f 0003 	mov.w	r0, #3
    310e:	df02      	svc	2
				break;
    3110:	f7fe ba57 	b.w	15c2 <ull_conn_llcp+0x16a>
    3114:	00024438 	.word	0x00024438
    3118:	00024578 	.word	0x00024578
    311c:	00023ff4 	.word	0x00023ff4
    3120:	20007408 	.word	0x20007408
    3124:	00024064 	.word	0x00024064

00003128 <ull_conn_done>:
{
    3128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    312c:	b0b7      	sub	sp, #220	; 0xdc
    312e:	4604      	mov	r4, r0
    3130:	af08      	add	r7, sp, #32
    3132:	62b8      	str	r0, [r7, #40]	; 0x28
    3134:	f003 ff34 	bl	6fa0 <z_timer_cycle_get_32>
	struct lll_conn *lll = (void *)HDR_ULL2LLL(done->param);
    3138:	69e2      	ldr	r2, [r4, #28]
    313a:	62fa      	str	r2, [r7, #44]	; 0x2c
	if (lll->handle == 0xFFFF) {
    313c:	8b93      	ldrh	r3, [r2, #28]
    313e:	65bb      	str	r3, [r7, #88]	; 0x58
    3140:	4619      	mov	r1, r3
    3142:	f64f 73ff 	movw	r3, #65535	; 0xffff
    3146:	4299      	cmp	r1, r3
    3148:	f000 8428 	beq.w	399c <ull_conn_done+0x874>
	if((done->extra.crc_valid)){
    314c:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
	struct ll_conn *conn = (void *)HDR_LLL2EVT(lll);
    3150:	68d2      	ldr	r2, [r2, #12]
    3152:	663a      	str	r2, [r7, #96]	; 0x60
	if((done->extra.crc_valid)){
    3154:	2b00      	cmp	r3, #0
    3156:	f040 8692 	bne.w	3e7e <ull_conn_done+0xd56>
		BLEX_cnt2 ++;
    315a:	4c6e      	ldr	r4, [pc, #440]	; (3314 <ull_conn_done+0x1ec>)
		stop_cycle[conn_handle] = 0 ;
    315c:	6dbd      	ldr	r5, [r7, #88]	; 0x58
    315e:	496e      	ldr	r1, [pc, #440]	; (3318 <ull_conn_done+0x1f0>)
		BLEX_cnt2 ++;
    3160:	6823      	ldr	r3, [r4, #0]
		stop_cycle[conn_handle] = 0 ;
    3162:	2000      	movs	r0, #0
    3164:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
    3168:	e9c1 0000 	strd	r0, r0, [r1]
		BLEX_cnt2 ++;
    316c:	3301      	adds	r3, #1
    316e:	6023      	str	r3, [r4, #0]
		stop_cycle[conn_handle] = 0 ;
    3170:	4602      	mov	r2, r0
    3172:	00ec      	lsls	r4, r5, #3
	delta[conn_handle] = stop_cycle[conn_handle]-start_cycle[conn_handle];
    3174:	4b69      	ldr	r3, [pc, #420]	; (331c <ull_conn_done+0x1f4>)
    3176:	4d6a      	ldr	r5, [pc, #424]	; (3320 <ull_conn_done+0x1f8>)
	delta_ms[conn_handle] = (uint32_t)k_cyc_to_ns_floor64(delta[conn_handle])/NSEC_PER_USEC/USEC_PER_MSEC;
    3178:	4e6a      	ldr	r6, [pc, #424]	; (3324 <ull_conn_done+0x1fc>)
	delta[conn_handle] = stop_cycle[conn_handle]-start_cycle[conn_handle];
    317a:	4423      	add	r3, r4
    317c:	e9d3 1c00 	ldrd	r1, ip, [r3]
    3180:	1a43      	subs	r3, r0, r1
    3182:	fba3 8905 	umull	r8, r9, r3, r5
    3186:	eb62 020c 	sbc.w	r2, r2, ip
    318a:	fb05 9902 	mla	r9, r5, r2, r9
    318e:	ea4f 30d8 	mov.w	r0, r8, lsr #15
    3192:	f8df c1cc 	ldr.w	ip, [pc, #460]	; 3360 <ull_conn_done+0x238>
	delta_ms[conn_handle] = (uint32_t)k_cyc_to_ns_floor64(delta[conn_handle])/NSEC_PER_USEC/USEC_PER_MSEC;
    3196:	4d64      	ldr	r5, [pc, #400]	; (3328 <ull_conn_done+0x200>)
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    3198:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 3364 <ull_conn_done+0x23c>
    319c:	ea40 4049 	orr.w	r0, r0, r9, lsl #17
	delta_ms[conn_handle] = (uint32_t)k_cyc_to_ns_floor64(delta[conn_handle])/NSEC_PER_USEC/USEC_PER_MSEC;
    31a0:	fba6 0100 	umull	r0, r1, r6, r0
	conn_int_table[conn_handle] = conn->lll.interval;
    31a4:	4e61      	ldr	r6, [pc, #388]	; (332c <ull_conn_done+0x204>)
    31a6:	6e38      	ldr	r0, [r7, #96]	; 0x60
    31a8:	667e      	str	r6, [r7, #100]	; 0x64
	delta[conn_handle] = stop_cycle[conn_handle]-start_cycle[conn_handle];
    31aa:	4464      	add	r4, ip
	conn_int_table[conn_handle] = conn->lll.interval;
    31ac:	f8b0 e02e 	ldrh.w	lr, [r0, #46]	; 0x2e
    31b0:	485f      	ldr	r0, [pc, #380]	; (3330 <ull_conn_done+0x208>)
    31b2:	61f8      	str	r0, [r7, #28]
    31b4:	46b4      	mov	ip, r6
	delta[conn_handle] = stop_cycle[conn_handle]-start_cycle[conn_handle];
    31b6:	e9c4 3200 	strd	r3, r2, [r4]
	conn_int_table[conn_handle] = conn->lll.interval;
    31ba:	6dbe      	ldr	r6, [r7, #88]	; 0x58
	delta_ms[conn_handle] = (uint32_t)k_cyc_to_ns_floor64(delta[conn_handle])/NSEC_PER_USEC/USEC_PER_MSEC;
    31bc:	0c89      	lsrs	r1, r1, #18
    31be:	f845 1026 	str.w	r1, [r5, r6, lsl #2]
	conn_int_table[conn_handle] = conn->lll.interval;
    31c2:	f84c e026 	str.w	lr, [ip, r6, lsl #2]
	delta_ms[conn_handle] = (uint32_t)k_cyc_to_ns_floor64(delta[conn_handle])/NSEC_PER_USEC/USEC_PER_MSEC;
    31c6:	4605      	mov	r5, r0
		for(disconnected_handle = 0; disconnected_handle < CONFIG_BT_MAX_CONN; disconnected_handle++){
    31c8:	2600      	movs	r6, #0
			if(scheduled_handles[disconnected_handle] && !ll_connected_get(disconnected_handle)){
    31ca:	f815 4b01 	ldrb.w	r4, [r5], #1
    31ce:	2c00      	cmp	r4, #0
    31d0:	f040 83e8 	bne.w	39a4 <ull_conn_done+0x87c>
		for(disconnected_handle = 0; disconnected_handle < CONFIG_BT_MAX_CONN; disconnected_handle++){
    31d4:	3601      	adds	r6, #1
    31d6:	2e04      	cmp	r6, #4
    31d8:	d1f7      	bne.n	31ca <ull_conn_done+0xa2>
    31da:	4b56      	ldr	r3, [pc, #344]	; (3334 <ull_conn_done+0x20c>)
    31dc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		bool disconnected = false;
    31e0:	2400      	movs	r4, #0
		max_conn_int = conn_int_table[0];
    31e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    31e4:	4954      	ldr	r1, [pc, #336]	; (3338 <ull_conn_done+0x210>)
    31e6:	f8d3 c000 	ldr.w	ip, [r3]
		int old_max_conn_int = max_conn_int;
    31ea:	4b54      	ldr	r3, [pc, #336]	; (333c <ull_conn_done+0x214>)
    31ec:	681a      	ldr	r2, [r3, #0]
    31ee:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
		int old_max_conn_index = max_conn_index;
    31f2:	4a53      	ldr	r2, [pc, #332]	; (3340 <ull_conn_done+0x218>)
		max_conn_int = conn_int_table[0];
    31f4:	f8c3 c000 	str.w	ip, [r3]
		int old_max_conn_index = max_conn_index;
    31f8:	6810      	ldr	r0, [r2, #0]
    31fa:	6478      	str	r0, [r7, #68]	; 0x44
		max_conn_index = 0;
    31fc:	2300      	movs	r3, #0
    31fe:	461d      	mov	r5, r3
    3200:	6013      	str	r3, [r2, #0]
    3202:	469e      	mov	lr, r3
    3204:	46e1      	mov	r9, ip
		for(int j = 1; j <CONFIG_BT_MAX_CONN; j ++)
    3206:	2301      	movs	r3, #1
			if(conn_int_table[j] > max_conn_int && 2048%conn_int_table[j] == 0 ){
    3208:	f44f 6800 	mov.w	r8, #2048	; 0x800
    320c:	f851 2b04 	ldr.w	r2, [r1], #4
    3210:	454a      	cmp	r2, r9
    3212:	d90a      	bls.n	322a <ull_conn_done+0x102>
    3214:	fbb8 f0f2 	udiv	r0, r8, r2
    3218:	fb02 f000 	mul.w	r0, r2, r0
    321c:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    3220:	d103      	bne.n	322a <ull_conn_done+0x102>
				max_conn_int = conn_int_table[j];
    3222:	4691      	mov	r9, r2
				max_conn_index = j;
    3224:	461d      	mov	r5, r3
				max_conn_int = conn_int_table[j];
    3226:	f04f 0e01 	mov.w	lr, #1
		for(int j = 1; j <CONFIG_BT_MAX_CONN; j ++)
    322a:	3301      	adds	r3, #1
    322c:	2b04      	cmp	r3, #4
    322e:	d1ed      	bne.n	320c <ull_conn_done+0xe4>
    3230:	f1be 0f00 	cmp.w	lr, #0
    3234:	f000 861c 	beq.w	3e70 <ull_conn_done+0xd48>
		if(max_conn_int != 0)
    3238:	4b40      	ldr	r3, [pc, #256]	; (333c <ull_conn_done+0x214>)
    323a:	f8c3 9000 	str.w	r9, [r3]
    323e:	4b40      	ldr	r3, [pc, #256]	; (3340 <ull_conn_done+0x218>)
    3240:	601d      	str	r5, [r3, #0]
    3242:	f1b9 0f00 	cmp.w	r9, #0
    3246:	d00d      	beq.n	3264 <ull_conn_done+0x13c>
			M_num = 4000/max_conn_int/1.25;
    3248:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
    324c:	fb90 f0f9 	sdiv	r0, r0, r9
    3250:	f7fd f8a8 	bl	3a4 <__aeabi_i2d>
    3254:	4b3b      	ldr	r3, [pc, #236]	; (3344 <ull_conn_done+0x21c>)
    3256:	4d3c      	ldr	r5, [pc, #240]	; (3348 <ull_conn_done+0x220>)
    3258:	2200      	movs	r2, #0
    325a:	f7fd fa37 	bl	6cc <__aeabi_ddiv>
    325e:	f7fd fbcd 	bl	9fc <__aeabi_d2uiz>
    3262:	6028      	str	r0, [r5, #0]
		if(disconnected && scheduled_handle_cnt != 0){	
    3264:	2c00      	cmp	r4, #0
    3266:	f000 80ef 	beq.w	3448 <ull_conn_done+0x320>
    326a:	4b38      	ldr	r3, [pc, #224]	; (334c <ull_conn_done+0x224>)
    326c:	681b      	ldr	r3, [r3, #0]
    326e:	2b00      	cmp	r3, #0
    3270:	f000 80ea 	beq.w	3448 <ull_conn_done+0x320>
    3274:	4c36      	ldr	r4, [pc, #216]	; (3350 <ull_conn_done+0x228>)
    3276:	492d      	ldr	r1, [pc, #180]	; (332c <ull_conn_done+0x204>)
    3278:	1f22      	subs	r2, r4, #4
			int new_table_size = 0;
    327a:	2300      	movs	r3, #0
				if(scheduled_handles[i] == true){
    327c:	f812 0b01 	ldrb.w	r0, [r2], #1
    3280:	b118      	cbz	r0, 328a <ull_conn_done+0x162>
					new_table_size += max_conn_int/conn_int_table[i];
    3282:	6808      	ldr	r0, [r1, #0]
    3284:	fbb9 f0f0 	udiv	r0, r9, r0
    3288:	4403      	add	r3, r0
			for(int i = 0; i < CONFIG_BT_MAX_CONN; i ++){
    328a:	42a2      	cmp	r2, r4
    328c:	f101 0104 	add.w	r1, r1, #4
    3290:	d1f4      	bne.n	327c <ull_conn_done+0x154>
			new_table_size *= 2;
    3292:	005b      	lsls	r3, r3, #1
			for(; new_table_size > temp_table_size; temp_table_size *=2);
    3294:	2b01      	cmp	r3, #1
			int temp_table_size = 1;
    3296:	f04f 0b01 	mov.w	fp, #1
			for(; new_table_size > temp_table_size; temp_table_size *=2);
    329a:	dd03      	ble.n	32a4 <ull_conn_done+0x17c>
    329c:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
    32a0:	455b      	cmp	r3, fp
    32a2:	dcfb      	bgt.n	329c <ull_conn_done+0x174>
			for(int i =0; i < table_size; i ++){
    32a4:	4b2b      	ldr	r3, [pc, #172]	; (3354 <ull_conn_done+0x22c>)
    32a6:	627b      	str	r3, [r7, #36]	; 0x24
    32a8:	681c      	ldr	r4, [r3, #0]
    32aa:	2c00      	cmp	r4, #0
    32ac:	dd0c      	ble.n	32c8 <ull_conn_done+0x1a0>
    32ae:	4b2a      	ldr	r3, [pc, #168]	; (3358 <ull_conn_done+0x230>)
					array0[i] =-1;
    32b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    32b4:	eb03 0184 	add.w	r1, r3, r4, lsl #2
				if(array0[i] == disconnected_handle){
    32b8:	f853 2b04 	ldr.w	r2, [r3], #4
    32bc:	42b2      	cmp	r2, r6
					array0[i] =-1;
    32be:	bf08      	it	eq
    32c0:	f843 0c04 	streq.w	r0, [r3, #-4]
			for(int i =0; i < table_size; i ++){
    32c4:	4299      	cmp	r1, r3
    32c6:	d1f7      	bne.n	32b8 <ull_conn_done+0x190>
			for(int i = 1; i < table_size/new_table_size; i*=2) scale_factor ++;
    32c8:	fb94 f2fb 	sdiv	r2, r4, fp
    32cc:	2a01      	cmp	r2, #1
    32ce:	bfc8      	it	gt
    32d0:	2301      	movgt	r3, #1
    32d2:	dd02      	ble.n	32da <ull_conn_done+0x1b2>
    32d4:	005b      	lsls	r3, r3, #1
    32d6:	4293      	cmp	r3, r2
    32d8:	dbfc      	blt.n	32d4 <ull_conn_done+0x1ac>
			if(disconnected_handle == first_handle){
    32da:	4b20      	ldr	r3, [pc, #128]	; (335c <ull_conn_done+0x234>)
    32dc:	66fb      	str	r3, [r7, #108]	; 0x6c
    32de:	681d      	ldr	r5, [r3, #0]
    32e0:	42b5      	cmp	r5, r6
    32e2:	f000 8749 	beq.w	4178 <ull_conn_done+0x1050>
			int old_old_repeated_size = old_max_conn_int/conn_int_table[first_handle];
    32e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    32e8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
    32ec:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    32f0:	fbb2 fef3 	udiv	lr, r2, r3
			for (int i = 0; i <old_old_repeated_size ; i ++){
    32f4:	f1be 0f00 	cmp.w	lr, #0
			int old_old_repeated_size = old_max_conn_int/conn_int_table[first_handle];
    32f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			for (int i = 0; i <old_old_repeated_size ; i ++){
    32fc:	dd65      	ble.n	33ca <ull_conn_done+0x2a2>
				for(int j =1 ; j<table_size/old_old_repeated_size;j ++){
    32fe:	fb94 f1fe 	sdiv	r1, r4, lr
    3302:	f04f 0c00 	mov.w	ip, #0
							array0[(i+1)*table_size/old_old_repeated_size-1] = -1;
    3306:	e9c7 b91d 	strd	fp, r9, [r7, #116]	; 0x74
    330a:	4813      	ldr	r0, [pc, #76]	; (3358 <ull_conn_done+0x230>)
    330c:	46e1      	mov	r9, ip
    330e:	46a2      	mov	sl, r4
    3310:	e042      	b.n	3398 <ull_conn_done+0x270>
    3312:	bf00      	nop
    3314:	2000048c 	.word	0x2000048c
    3318:	20001ad8 	.word	0x20001ad8
    331c:	20001ab8 	.word	0x20001ab8
    3320:	3b9aca00 	.word	0x3b9aca00
    3324:	431bde83 	.word	0x431bde83
    3328:	20006984 	.word	0x20006984
    332c:	20005300 	.word	0x20005300
    3330:	200076f8 	.word	0x200076f8
    3334:	20006998 	.word	0x20006998
    3338:	20005304 	.word	0x20005304
    333c:	200069b4 	.word	0x200069b4
    3340:	200069b0 	.word	0x200069b0
    3344:	3ff40000 	.word	0x3ff40000
    3348:	20000490 	.word	0x20000490
    334c:	200076f4 	.word	0x200076f4
    3350:	200076fc 	.word	0x200076fc
    3354:	200076fc 	.word	0x200076fc
    3358:	200032dc 	.word	0x200032dc
    335c:	20006994 	.word	0x20006994
    3360:	20001a98 	.word	0x20001a98
    3364:	20006300 	.word	0x20006300
					else if(array0[i*table_size/old_old_repeated_size+j-1] >CONFIG_BT_MAX_CONN && array0[i*table_size/old_old_repeated_size+j] > CONFIG_BT_MAX_CONN){
    3368:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
    336c:	f102 0801 	add.w	r8, r2, #1
    3370:	f850 b02b 	ldr.w	fp, [r0, fp, lsl #2]
    3374:	f1bb 0f04 	cmp.w	fp, #4
    3378:	f240 85e2 	bls.w	3f40 <ull_conn_done+0xe18>
    337c:	2c04      	cmp	r4, #4
    337e:	f240 85df 	bls.w	3f40 <ull_conn_done+0xe18>
						if(array0[i*table_size/old_old_repeated_size+j+1] < CONFIG_BT_MAX_CONN && j+1 != table_size/old_old_repeated_size){
    3382:	1c5c      	adds	r4, r3, #1
    3384:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
    3388:	2c03      	cmp	r4, #3
    338a:	f200 85d9 	bhi.w	3f40 <ull_conn_done+0xe18>
    338e:	4541      	cmp	r1, r8
    3390:	f040 85d9 	bne.w	3f46 <ull_conn_done+0xe1e>
			for (int i = 0; i <old_old_repeated_size ; i ++){
    3394:	45ce      	cmp	lr, r9
    3396:	d015      	beq.n	33c4 <ull_conn_done+0x29c>
				array0[i*table_size/old_old_repeated_size] = array0[0];
    3398:	fb9c f6fe 	sdiv	r6, ip, lr
    339c:	6803      	ldr	r3, [r0, #0]
    339e:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
				for(int j =1 ; j<table_size/old_old_repeated_size;j ++){
    33a2:	2901      	cmp	r1, #1
    33a4:	f109 0901 	add.w	r9, r9, #1
    33a8:	44d4      	add	ip, sl
    33aa:	bfc8      	it	gt
    33ac:	2201      	movgt	r2, #1
    33ae:	ddf1      	ble.n	3394 <ull_conn_done+0x26c>
					if(array0[i*table_size/old_old_repeated_size+j] == first_handle) 
    33b0:	18b3      	adds	r3, r6, r2
    33b2:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
    33b6:	42ac      	cmp	r4, r5
    33b8:	d1d6      	bne.n	3368 <ull_conn_done+0x240>
    33ba:	1c4a      	adds	r2, r1, #1
				for(int j =1 ; j<table_size/old_old_repeated_size;j ++){
    33bc:	4291      	cmp	r1, r2
    33be:	dcf7      	bgt.n	33b0 <ull_conn_done+0x288>
			for (int i = 0; i <old_old_repeated_size ; i ++){
    33c0:	45ce      	cmp	lr, r9
    33c2:	d1e9      	bne.n	3398 <ull_conn_done+0x270>
    33c4:	e9d7 b91d 	ldrd	fp, r9, [r7, #116]	; 0x74
    33c8:	4654      	mov	r4, sl
			for (int i = 0; i <max_conn_int/conn_int_table[first_handle]; i ++){
    33ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    33ce:	fbb9 f6f3 	udiv	r6, r9, r3
    33d2:	454b      	cmp	r3, r9
    33d4:	bf88      	it	hi
    33d6:	2600      	movhi	r6, #0
    33d8:	d821      	bhi.n	341e <ull_conn_done+0x2f6>
				for(int j = 0; j < new_table_size/(max_conn_int/conn_int_table[first_handle]); j ++){
    33da:	fbbb f5f6 	udiv	r5, fp, r6
    33de:	f04f 0c00 	mov.w	ip, #0
    33e2:	f8df a2b4 	ldr.w	sl, [pc, #692]	; 3698 <ull_conn_done+0x570>
    33e6:	46e1      	mov	r9, ip
			for (int i = 0; i <max_conn_int/conn_int_table[first_handle]; i ++){
    33e8:	46e0      	mov	r8, ip
				for(int j = 0; j < new_table_size/(max_conn_int/conn_int_table[first_handle]); j ++){
    33ea:	455e      	cmp	r6, fp
				int point = i*new_table_size/(max_conn_int/conn_int_table[first_handle]);
    33ec:	fbb9 f2f6 	udiv	r2, r9, r6
				for(int j = 0; j < new_table_size/(max_conn_int/conn_int_table[first_handle]); j ++){
    33f0:	d80f      	bhi.n	3412 <ull_conn_done+0x2ea>
					array0[j+point] = array0[j+i*table_size/(old_max_conn_int/conn_int_table[first_handle])]; 
    33f2:	fbbc f1fe 	udiv	r1, ip, lr
    33f6:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
    33fa:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
    33fe:	3a04      	subs	r2, #4
    3400:	3904      	subs	r1, #4
				for(int j = 0; j < new_table_size/(max_conn_int/conn_int_table[first_handle]); j ++){
    3402:	2300      	movs	r3, #0
    3404:	3301      	adds	r3, #1
					array0[j+point] = array0[j+i*table_size/(old_max_conn_int/conn_int_table[first_handle])]; 
    3406:	f851 0f04 	ldr.w	r0, [r1, #4]!
    340a:	f842 0f04 	str.w	r0, [r2, #4]!
				for(int j = 0; j < new_table_size/(max_conn_int/conn_int_table[first_handle]); j ++){
    340e:	42ab      	cmp	r3, r5
    3410:	d3f8      	bcc.n	3404 <ull_conn_done+0x2dc>
			for (int i = 0; i <max_conn_int/conn_int_table[first_handle]; i ++){
    3412:	f108 0801 	add.w	r8, r8, #1
    3416:	45b0      	cmp	r8, r6
    3418:	44d9      	add	r9, fp
    341a:	44a4      	add	ip, r4
    341c:	d3e5      	bcc.n	33ea <ull_conn_done+0x2c2>
			for(int i = new_table_size; i<table_size; i ++) array0[i] = -1;
    341e:	45a3      	cmp	fp, r4
    3420:	da0d      	bge.n	343e <ull_conn_done+0x316>
    3422:	499d      	ldr	r1, [pc, #628]	; (3698 <ull_conn_done+0x570>)
    3424:	ea4f 038b 	mov.w	r3, fp, lsl #2
    3428:	1f0a      	subs	r2, r1, #4
    342a:	3b04      	subs	r3, #4
    342c:	eb02 0484 	add.w	r4, r2, r4, lsl #2
    3430:	440b      	add	r3, r1
    3432:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3436:	f843 2f04 	str.w	r2, [r3, #4]!
    343a:	429c      	cmp	r4, r3
    343c:	d1fb      	bne.n	3436 <ull_conn_done+0x30e>
			repeated_size = max_conn_int/conn_int_table[first_handle];
    343e:	4b97      	ldr	r3, [pc, #604]	; (369c <ull_conn_done+0x574>)
			table_size = new_table_size;
    3440:	6a7a      	ldr	r2, [r7, #36]	; 0x24
			repeated_size = max_conn_int/conn_int_table[first_handle];
    3442:	601e      	str	r6, [r3, #0]
			table_size = new_table_size;
    3444:	f8c2 b000 	str.w	fp, [r2]
		if(!scheduled_handles[conn_handle] && handle_cnt[conn_handle] > 0 && 2048%(conn->lll.interval) == 0){
    3448:	4995      	ldr	r1, [pc, #596]	; (36a0 <ull_conn_done+0x578>)
    344a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    344c:	5cc9      	ldrb	r1, [r1, r3]
    344e:	2900      	cmp	r1, #0
    3450:	f040 821b 	bne.w	388a <ull_conn_done+0x762>
    3454:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
    3458:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    345c:	2b00      	cmp	r3, #0
    345e:	f000 8214 	beq.w	388a <ull_conn_done+0x762>
    3462:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3464:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    3466:	f44f 6200 	mov.w	r2, #2048	; 0x800
    346a:	fbb2 f2f3 	udiv	r2, r2, r3
    346e:	fb03 f302 	mul.w	r3, r3, r2
    3472:	f5d3 6300 	rsbs	r3, r3, #2048	; 0x800
    3476:	623b      	str	r3, [r7, #32]
    3478:	f040 85bb 	bne.w	3ff2 <ull_conn_done+0xeca>
				temp_anchor_points[i] = anchor_points[i];
    347c:	4989      	ldr	r1, [pc, #548]	; (36a4 <ull_conn_done+0x57c>)
    347e:	4b8a      	ldr	r3, [pc, #552]	; (36a8 <ull_conn_done+0x580>)
    3480:	680a      	ldr	r2, [r1, #0]
			if(scheduled_handle_cnt == 0) first_handle = conn_handle;
    3482:	488a      	ldr	r0, [pc, #552]	; (36ac <ull_conn_done+0x584>)
				temp_anchor_points[i] = anchor_points[i];
    3484:	601a      	str	r2, [r3, #0]
    3486:	684a      	ldr	r2, [r1, #4]
    3488:	605a      	str	r2, [r3, #4]
			if(scheduled_handle_cnt == 0) first_handle = conn_handle;
    348a:	6806      	ldr	r6, [r0, #0]
				temp_anchor_points[i] = anchor_points[i];
    348c:	688a      	ldr	r2, [r1, #8]
    348e:	609a      	str	r2, [r3, #8]
    3490:	68ca      	ldr	r2, [r1, #12]
    3492:	60da      	str	r2, [r3, #12]
    3494:	6179      	str	r1, [r7, #20]
			if(scheduled_handle_cnt == 0) first_handle = conn_handle;
    3496:	4b86      	ldr	r3, [pc, #536]	; (36b0 <ull_conn_done+0x588>)
    3498:	2e00      	cmp	r6, #0
    349a:	f001 8122 	beq.w	46e2 <ull_conn_done+0x15ba>
    349e:	681a      	ldr	r2, [r3, #0]
			repeated_size = max_conn_int/conn_int_table[first_handle];
    34a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
			old_repeated_size = repeated_size;
    34a2:	f8df 81f8 	ldr.w	r8, [pc, #504]	; 369c <ull_conn_done+0x574>
			old_table_size = table_size;	
    34a6:	4d83      	ldr	r5, [pc, #524]	; (36b4 <ull_conn_done+0x58c>)
    34a8:	4c83      	ldr	r4, [pc, #524]	; (36b8 <ull_conn_done+0x590>)
			repeated_size = max_conn_int/conn_int_table[first_handle];
    34aa:	f853 c022 	ldr.w	ip, [r3, r2, lsl #2]
    34ae:	667c      	str	r4, [r7, #100]	; 0x64
			old_repeated_size = repeated_size;
    34b0:	4b82      	ldr	r3, [pc, #520]	; (36bc <ull_conn_done+0x594>)
    34b2:	4c83      	ldr	r4, [pc, #524]	; (36c0 <ull_conn_done+0x598>)
    34b4:	f8d8 2000 	ldr.w	r2, [r8]
			old_table_size = table_size;	
    34b8:	627d      	str	r5, [r7, #36]	; 0x24
    34ba:	682d      	ldr	r5, [r5, #0]
    34bc:	64bd      	str	r5, [r7, #72]	; 0x48
			old_repeated_size = repeated_size;
    34be:	601a      	str	r2, [r3, #0]
			scheduled_handles[conn_handle] = true;
    34c0:	6dbd      	ldr	r5, [r7, #88]	; 0x58
			old_table_size = table_size;	
    34c2:	4980      	ldr	r1, [pc, #512]	; (36c4 <ull_conn_done+0x59c>)
			need_update_dummy = false;
    34c4:	f8df e20c 	ldr.w	lr, [pc, #524]	; 36d4 <ull_conn_done+0x5ac>
			old_repeated_size = repeated_size;
    34c8:	66fa      	str	r2, [r7, #108]	; 0x6c
			scheduled_handles[conn_handle] = true;
    34ca:	1f23      	subs	r3, r4, #4
			scheduled_handle_cnt ++;
    34cc:	3601      	adds	r6, #1
    34ce:	6006      	str	r6, [r0, #0]
			scheduled_handles[conn_handle] = true;
    34d0:	2001      	movs	r0, #1
    34d2:	5558      	strb	r0, [r3, r5]
			repeated_size = max_conn_int/conn_int_table[first_handle];
    34d4:	487c      	ldr	r0, [pc, #496]	; (36c8 <ull_conn_done+0x5a0>)
			old_table_size = table_size;	
    34d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
			repeated_size = max_conn_int/conn_int_table[first_handle];
    34d8:	6800      	ldr	r0, [r0, #0]
			old_table_size = table_size;	
    34da:	600b      	str	r3, [r1, #0]
			need_update_dummy = false;
    34dc:	2200      	movs	r2, #0
    34de:	4976      	ldr	r1, [pc, #472]	; (36b8 <ull_conn_done+0x590>)
			repeated_size = max_conn_int/conn_int_table[first_handle];
    34e0:	fbb0 f3fc 	udiv	r3, r0, ip
			scheduled_handles[conn_handle] = true;
    34e4:	4615      	mov	r5, r2
			repeated_size = max_conn_int/conn_int_table[first_handle];
    34e6:	63bb      	str	r3, [r7, #56]	; 0x38
			need_update_dummy = false;
    34e8:	f88e 2000 	strb.w	r2, [lr]
			repeated_size = max_conn_int/conn_int_table[first_handle];
    34ec:	f8c8 3000 	str.w	r3, [r8]
    34f0:	60b8      	str	r0, [r7, #8]
			scheduled_handles[conn_handle] = true;
    34f2:	4613      	mov	r3, r2
    34f4:	4684      	mov	ip, r0
    34f6:	1f22      	subs	r2, r4, #4
				if(scheduled_handles[i] == true){
    34f8:	f812 0b01 	ldrb.w	r0, [r2], #1
    34fc:	b120      	cbz	r0, 3508 <ull_conn_done+0x3e0>
					table_size += max_conn_int/conn_int_table[i];
    34fe:	4605      	mov	r5, r0
    3500:	6808      	ldr	r0, [r1, #0]
    3502:	fbbc f0f0 	udiv	r0, ip, r0
    3506:	4403      	add	r3, r0
			for(int i = 0; i < CONFIG_BT_MAX_CONN; i ++){
    3508:	4294      	cmp	r4, r2
    350a:	f101 0104 	add.w	r1, r1, #4
    350e:	d1f3      	bne.n	34f8 <ull_conn_done+0x3d0>
    3510:	2d00      	cmp	r5, #0
    3512:	f001 8258 	beq.w	49c6 <ull_conn_done+0x189e>
    3516:	005b      	lsls	r3, r3, #1
			for(; table_size > temp_table_size; temp_table_size *=2);
    3518:	2b01      	cmp	r3, #1
    351a:	f341 8254 	ble.w	49c6 <ull_conn_done+0x189e>
			int temp_table_size = 1;
    351e:	2201      	movs	r2, #1
			for(; table_size > temp_table_size; temp_table_size *=2);
    3520:	0052      	lsls	r2, r2, #1
    3522:	429a      	cmp	r2, r3
    3524:	dbfc      	blt.n	3520 <ull_conn_done+0x3f8>
			table_size = temp_table_size;
    3526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3528:	653a      	str	r2, [r7, #80]	; 0x50
			if(scheduled_handle_cnt == 1){
    352a:	2e01      	cmp	r6, #1
			table_size = temp_table_size;
    352c:	4615      	mov	r5, r2
    352e:	601a      	str	r2, [r3, #0]
			if(scheduled_handle_cnt == 1){
    3530:	f001 8235 	beq.w	499e <ull_conn_done+0x1876>
				int temp_array[table_size], temp_temp_array[table_size];
    3534:	0092      	lsls	r2, r2, #2
    3536:	3207      	adds	r2, #7
    3538:	f022 0207 	bic.w	r2, r2, #7
			else{
    353c:	f8c7 d004 	str.w	sp, [r7, #4]
				int temp_array[table_size], temp_temp_array[table_size];
    3540:	ebad 0d02 	sub.w	sp, sp, r2
    3544:	a808      	add	r0, sp, #32
    3546:	4e61      	ldr	r6, [pc, #388]	; (36cc <ull_conn_done+0x5a4>)
    3548:	4953      	ldr	r1, [pc, #332]	; (3698 <ull_conn_done+0x570>)
    354a:	63fe      	str	r6, [r7, #60]	; 0x3c
    354c:	ebad 0d02 	sub.w	sp, sp, r2
    3550:	aa08      	add	r2, sp, #32
				for( int i = 0; i < table_size; i ++){
    3552:	2300      	movs	r3, #0
				int temp_array[table_size], temp_temp_array[table_size];
    3554:	6378      	str	r0, [r7, #52]	; 0x34
    3556:	633a      	str	r2, [r7, #48]	; 0x30
				for( int i = 0; i < table_size; i ++){
    3558:	1f04      	subs	r4, r0, #4
    355a:	4632      	mov	r2, r6
    355c:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
    3560:	a807      	add	r0, sp, #28
					array1[i] = 0;
    3562:	461e      	mov	r6, r3
					array0[i] = -1;
    3564:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
    3568:	46ac      	mov	ip, r5
					temp_array[i] = array0[i];
    356a:	680d      	ldr	r5, [r1, #0]
    356c:	f844 5f04 	str.w	r5, [r4, #4]!
				for( int i = 0; i < table_size; i ++){
    3570:	3301      	adds	r3, #1
					temp_temp_array[i] = array1[i];
    3572:	6815      	ldr	r5, [r2, #0]
					array0[i] = -1;
    3574:	f841 eb04 	str.w	lr, [r1], #4
				for( int i = 0; i < table_size; i ++){
    3578:	4563      	cmp	r3, ip
					temp_temp_array[i] = array1[i];
    357a:	f840 5f04 	str.w	r5, [r0, #4]!
					array1[i] = 0;
    357e:	f842 6b04 	str.w	r6, [r2], #4
				for( int i = 0; i < table_size; i ++){
    3582:	dbf2      	blt.n	356a <ull_conn_done+0x442>
				for(int k = 0; k < repeated_size/old_repeated_size; k ++)
    3584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3586:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    3588:	fb93 f3f2 	sdiv	r3, r3, r2
    358c:	2b00      	cmp	r3, #0
    358e:	613b      	str	r3, [r7, #16]
    3590:	dd7c      	ble.n	368c <ull_conn_done+0x564>
    3592:	2300      	movs	r3, #0
    3594:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    3596:	61bb      	str	r3, [r7, #24]
    3598:	643b      	str	r3, [r7, #64]	; 0x40
    359a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    359c:	fb03 f302 	mul.w	r3, r3, r2
    35a0:	60fb      	str	r3, [r7, #12]
					for(int j = 0; j <old_repeated_size; j ++)
    35a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    35a4:	2b00      	cmp	r3, #0
    35a6:	dd67      	ble.n	3678 <ull_conn_done+0x550>
						for(int i = 0; i < old_table_size/old_repeated_size; i ++){
    35a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
    35aa:	fb92 f3f3 	sdiv	r3, r2, r3
    35ae:	66bb      	str	r3, [r7, #104]	; 0x68
					for(int j = 0; j <old_repeated_size; j ++)
    35b0:	2300      	movs	r3, #0
							array0[i+j*table_size/repeated_size+k*table_size*old_repeated_size/repeated_size] = temp_array[i+j*old_table_size/old_repeated_size];
    35b2:	e9c7 331d 	strd	r3, r3, [r7, #116]	; 0x74
					for(int j = 0; j <old_repeated_size; j ++)
    35b6:	673b      	str	r3, [r7, #112]	; 0x70
						for(int i = 0; i < old_table_size/old_repeated_size; i ++){
    35b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    35ba:	2b00      	cmp	r3, #0
    35bc:	dd4e      	ble.n	365c <ull_conn_done+0x534>
							array0[i+j*table_size/repeated_size+k*table_size*old_repeated_size/repeated_size] = temp_array[i+j*old_table_size/old_repeated_size];
    35be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    35c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    35c2:	4619      	mov	r1, r3
    35c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    35c6:	fb91 f8f3 	sdiv	r8, r1, r3
    35ca:	fb92 f3f3 	sdiv	r3, r2, r3
    35ce:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    35d0:	4498      	add	r8, r3
    35d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    35d4:	fb93 f6f2 	sdiv	r6, r3, r2
							array1[i+j*table_size/repeated_size+k*table_size*old_repeated_size/repeated_size] = temp_temp_array[i+j*old_table_size/old_repeated_size]+i*conn_int_table[old_max_conn_index]*1.25;
    35d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    35da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    35dc:	ea4f 0888 	mov.w	r8, r8, lsl #2
    35e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    35e4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    35e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    35ec:	f1a8 0804 	sub.w	r8, r8, #4
    35f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    35f2:	eb02 0b08 	add.w	fp, r2, r8
    35f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    35f8:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
    35fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    35fe:	4490      	add	r8, r2
    3600:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    3602:	4433      	add	r3, r6
    3604:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3608:	f1aa 0a04 	sub.w	sl, sl, #4
    360c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    3610:	eb02 0686 	add.w	r6, r2, r6, lsl #2
    3614:	f04f 0900 	mov.w	r9, #0
							array0[i+j*table_size/repeated_size+k*table_size*old_repeated_size/repeated_size] = temp_array[i+j*old_table_size/old_repeated_size];
    3618:	f856 3b04 	ldr.w	r3, [r6], #4
    361c:	f84b 3f04 	str.w	r3, [fp, #4]!
							array1[i+j*table_size/repeated_size+k*table_size*old_repeated_size/repeated_size] = temp_temp_array[i+j*old_table_size/old_repeated_size]+i*conn_int_table[old_max_conn_index]*1.25;
    3620:	f85a 0f04 	ldr.w	r0, [sl, #4]!
    3624:	f7fc febe 	bl	3a4 <__aeabi_i2d>
    3628:	4604      	mov	r4, r0
    362a:	4648      	mov	r0, r9
    362c:	460d      	mov	r5, r1
    362e:	f7fc fea9 	bl	384 <__aeabi_ui2d>
    3632:	4b27      	ldr	r3, [pc, #156]	; (36d0 <ull_conn_done+0x5a8>)
    3634:	2200      	movs	r2, #0
    3636:	f7fc ff1f 	bl	478 <__aeabi_dmul>
    363a:	460b      	mov	r3, r1
    363c:	4602      	mov	r2, r0
    363e:	4629      	mov	r1, r5
    3640:	4620      	mov	r0, r4
    3642:	f7fc fd63 	bl	10c <__adddf3>
    3646:	f7fd f9d9 	bl	9fc <__aeabi_d2uiz>
    364a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
    364e:	f848 0f04 	str.w	r0, [r8, #4]!
						for(int i = 0; i < old_table_size/old_repeated_size; i ++){
    3652:	4499      	add	r9, r3
    3654:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
    3658:	429e      	cmp	r6, r3
    365a:	d1dd      	bne.n	3618 <ull_conn_done+0x4f0>
					for(int j = 0; j <old_repeated_size; j ++)
    365c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
    365e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    3660:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    3662:	440a      	add	r2, r1
    3664:	677a      	str	r2, [r7, #116]	; 0x74
    3666:	6d39      	ldr	r1, [r7, #80]	; 0x50
    3668:	6fba      	ldr	r2, [r7, #120]	; 0x78
    366a:	440a      	add	r2, r1
    366c:	67ba      	str	r2, [r7, #120]	; 0x78
    366e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    3670:	3301      	adds	r3, #1
    3672:	429a      	cmp	r2, r3
    3674:	673b      	str	r3, [r7, #112]	; 0x70
    3676:	d19f      	bne.n	35b8 <ull_conn_done+0x490>
				for(int k = 0; k < repeated_size/old_repeated_size; k ++)
    3678:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    367a:	68f9      	ldr	r1, [r7, #12]
    367c:	69bb      	ldr	r3, [r7, #24]
    367e:	440a      	add	r2, r1
    3680:	643a      	str	r2, [r7, #64]	; 0x40
    3682:	693a      	ldr	r2, [r7, #16]
    3684:	3301      	adds	r3, #1
    3686:	4293      	cmp	r3, r2
    3688:	61bb      	str	r3, [r7, #24]
    368a:	d18a      	bne.n	35a2 <ull_conn_done+0x47a>
    368c:	4b02      	ldr	r3, [pc, #8]	; (3698 <ull_conn_done+0x570>)
				int standard_anchor_point =0;
    368e:	6c79      	ldr	r1, [r7, #68]	; 0x44
    3690:	6d38      	ldr	r0, [r7, #80]	; 0x50
    3692:	f04f 0b00 	mov.w	fp, #0
    3696:	e024      	b.n	36e2 <ull_conn_done+0x5ba>
    3698:	200032dc 	.word	0x200032dc
    369c:	200076f0 	.word	0x200076f0
    36a0:	200076f8 	.word	0x200076f8
    36a4:	200032cc 	.word	0x200032cc
    36a8:	20007700 	.word	0x20007700
    36ac:	200076f4 	.word	0x200076f4
    36b0:	20006994 	.word	0x20006994
    36b4:	200076fc 	.word	0x200076fc
    36b8:	20005300 	.word	0x20005300
    36bc:	200076e8 	.word	0x200076e8
    36c0:	200076fc 	.word	0x200076fc
    36c4:	200076ec 	.word	0x200076ec
    36c8:	200069b4 	.word	0x200069b4
    36cc:	200042dc 	.word	0x200042dc
    36d0:	3ff40000 	.word	0x3ff40000
    36d4:	20009c3f 	.word	0x20009c3f
				for(; standard_anchor_point <table_size; standard_anchor_point ++)
    36d8:	f10b 0b01 	add.w	fp, fp, #1
    36dc:	4558      	cmp	r0, fp
    36de:	f001 8165 	beq.w	49ac <ull_conn_done+0x1884>
					if(old_max_conn_index ==array0[standard_anchor_point]) break;
    36e2:	f853 2b04 	ldr.w	r2, [r3], #4
    36e6:	428a      	cmp	r2, r1
    36e8:	d1f6      	bne.n	36d8 <ull_conn_done+0x5b0>
				uint32_t standard_point = array1[standard_anchor_point] = anchor_points[old_max_conn_index];
    36ea:	697b      	ldr	r3, [r7, #20]
    36ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    36ee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    36f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    36f4:	f841 302b 	str.w	r3, [r1, fp, lsl #2]
    36f8:	66fb      	str	r3, [r7, #108]	; 0x6c
    36fa:	4bbd      	ldr	r3, [pc, #756]	; (39f0 <ull_conn_done+0x8c8>)
    36fc:	673b      	str	r3, [r7, #112]	; 0x70
						for(int k = standard_anchor_point; k < standard_anchor_point +table_size && j <max_conn_int/conn_int_table[i]; k ++){
    36fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    3700:	4abc      	ldr	r2, [pc, #752]	; (39f4 <ull_conn_done+0x8cc>)
    3702:	617a      	str	r2, [r7, #20]
    3704:	445b      	add	r3, fp
    3706:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
				for(int i =0; i <CONFIG_BT_MAX_CONN; i ++){
    370a:	f04f 0a00 	mov.w	sl, #0
						for(int k = standard_anchor_point; k < standard_anchor_point +table_size && j <max_conn_int/conn_int_table[i]; k ++){
    370e:	67bb      	str	r3, [r7, #120]	; 0x78
								array1[k%table_size] = anchor_points[i] + conn_int_table[i]*1.25*j;
    3710:	f8c7 b048 	str.w	fp, [r7, #72]	; 0x48
					if(scheduled_handles[i] == true && i != old_max_conn_index){
    3714:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    3716:	f812 3b01 	ldrb.w	r3, [r2], #1
    371a:	673a      	str	r2, [r7, #112]	; 0x70
    371c:	2b00      	cmp	r3, #0
    371e:	f001 8001 	beq.w	4724 <ull_conn_done+0x15fc>
    3722:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3724:	4553      	cmp	r3, sl
    3726:	f000 87fd 	beq.w	4724 <ull_conn_done+0x15fc>
						while(anchor_points[i] + conn_int_table[i] < standard_point) anchor_points[i] += conn_int_table[i]*1.25;
    372a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
    372e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    3730:	681e      	ldr	r6, [r3, #0]
    3732:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    3734:	f853 b02a 	ldr.w	fp, [r3, sl, lsl #2]
    3738:	eb0b 0306 	add.w	r3, fp, r6
    373c:	429a      	cmp	r2, r3
    373e:	d91a      	bls.n	3776 <ull_conn_done+0x64e>
    3740:	4658      	mov	r0, fp
    3742:	f7fc fe1f 	bl	384 <__aeabi_ui2d>
    3746:	4bac      	ldr	r3, [pc, #688]	; (39f8 <ull_conn_done+0x8d0>)
    3748:	2200      	movs	r2, #0
    374a:	f7fc fe95 	bl	478 <__aeabi_dmul>
    374e:	4604      	mov	r4, r0
    3750:	4630      	mov	r0, r6
    3752:	6efe      	ldr	r6, [r7, #108]	; 0x6c
    3754:	460d      	mov	r5, r1
    3756:	f7fc fe15 	bl	384 <__aeabi_ui2d>
    375a:	462b      	mov	r3, r5
    375c:	4622      	mov	r2, r4
    375e:	f7fc fcd5 	bl	10c <__adddf3>
    3762:	f7fd f94b 	bl	9fc <__aeabi_d2uiz>
    3766:	eb00 030b 	add.w	r3, r0, fp
    376a:	429e      	cmp	r6, r3
    376c:	d8f3      	bhi.n	3756 <ull_conn_done+0x62e>
    376e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
    3772:	4606      	mov	r6, r0
    3774:	6018      	str	r0, [r3, #0]
						while(anchor_points[i] > standard_point + conn_int_table[i]) anchor_points[i] -= conn_int_table[i]*1.25;
    3776:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    3778:	eb03 080b 	add.w	r8, r3, fp
    377c:	45b0      	cmp	r8, r6
    377e:	d217      	bcs.n	37b0 <ull_conn_done+0x688>
    3780:	4658      	mov	r0, fp
    3782:	f7fc fdff 	bl	384 <__aeabi_ui2d>
    3786:	4b9c      	ldr	r3, [pc, #624]	; (39f8 <ull_conn_done+0x8d0>)
    3788:	2200      	movs	r2, #0
    378a:	f7fc fe75 	bl	478 <__aeabi_dmul>
    378e:	4604      	mov	r4, r0
    3790:	460d      	mov	r5, r1
    3792:	4630      	mov	r0, r6
    3794:	f7fc fdf6 	bl	384 <__aeabi_ui2d>
    3798:	4622      	mov	r2, r4
    379a:	462b      	mov	r3, r5
    379c:	f7fc fcb4 	bl	108 <__aeabi_dsub>
    37a0:	f7fd f92c 	bl	9fc <__aeabi_d2uiz>
    37a4:	4540      	cmp	r0, r8
    37a6:	d8f5      	bhi.n	3794 <ull_conn_done+0x66c>
    37a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
    37ac:	4606      	mov	r6, r0
    37ae:	6018      	str	r0, [r3, #0]
						if(anchor_points[i] < standard_point) anchor_points[i] += conn_int_table[i]*1.25;
    37b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    37b2:	42b3      	cmp	r3, r6
    37b4:	d916      	bls.n	37e4 <ull_conn_done+0x6bc>
    37b6:	4658      	mov	r0, fp
    37b8:	f7fc fde4 	bl	384 <__aeabi_ui2d>
    37bc:	4b8e      	ldr	r3, [pc, #568]	; (39f8 <ull_conn_done+0x8d0>)
    37be:	2200      	movs	r2, #0
    37c0:	f7fc fe5a 	bl	478 <__aeabi_dmul>
    37c4:	4604      	mov	r4, r0
    37c6:	4630      	mov	r0, r6
    37c8:	460d      	mov	r5, r1
    37ca:	f7fc fddb 	bl	384 <__aeabi_ui2d>
    37ce:	460b      	mov	r3, r1
    37d0:	4602      	mov	r2, r0
    37d2:	4629      	mov	r1, r5
    37d4:	4620      	mov	r0, r4
    37d6:	f7fc fc99 	bl	10c <__adddf3>
    37da:	f7fd f90f 	bl	9fc <__aeabi_d2uiz>
    37de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
    37e2:	6018      	str	r0, [r3, #0]
						for(int k = standard_anchor_point; k < standard_anchor_point +table_size && j <max_conn_int/conn_int_table[i]; k ++){
    37e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    37e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
    37e8:	4293      	cmp	r3, r2
    37ea:	f340 879b 	ble.w	4724 <ull_conn_done+0x15fc>
    37ee:	68bb      	ldr	r3, [r7, #8]
    37f0:	fbb3 f2fb 	udiv	r2, r3, fp
    37f4:	455b      	cmp	r3, fp
    37f6:	677a      	str	r2, [r7, #116]	; 0x74
    37f8:	f0c0 8794 	bcc.w	4724 <ull_conn_done+0x15fc>
    37fc:	f8c7 b068 	str.w	fp, [r7, #104]	; 0x68
    3800:	f8c7 a088 	str.w	sl, [r7, #136]	; 0x88
    3804:	6cbc      	ldr	r4, [r7, #72]	; 0x48
    3806:	f8d7 a050 	ldr.w	sl, [r7, #80]	; 0x50
    380a:	f8d7 b080 	ldr.w	fp, [r7, #128]	; 0x80
    380e:	2600      	movs	r6, #0
    3810:	e008      	b.n	3824 <ull_conn_done+0x6fc>
    3812:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    3814:	3401      	adds	r4, #1
    3816:	42a3      	cmp	r3, r4
    3818:	f000 8782 	beq.w	4720 <ull_conn_done+0x15f8>
    381c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    381e:	429e      	cmp	r6, r3
    3820:	f080 877e 	bcs.w	4720 <ull_conn_done+0x15f8>
							if(array0[k%table_size] == i){
    3824:	fbb4 f5fa 	udiv	r5, r4, sl
    3828:	fb0a 4515 	mls	r5, sl, r5, r4
    382c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
    3830:	f85b 3025 	ldr.w	r3, [fp, r5, lsl #2]
    3834:	4293      	cmp	r3, r2
    3836:	d1ec      	bne.n	3812 <ull_conn_done+0x6ea>
								array1[k%table_size] = anchor_points[i] + conn_int_table[i]*1.25*j;
    3838:	6eb8      	ldr	r0, [r7, #104]	; 0x68
    383a:	f7fc fda3 	bl	384 <__aeabi_ui2d>
    383e:	4b6e      	ldr	r3, [pc, #440]	; (39f8 <ull_conn_done+0x8d0>)
    3840:	2200      	movs	r2, #0
    3842:	f7fc fe19 	bl	478 <__aeabi_dmul>
    3846:	4680      	mov	r8, r0
    3848:	4630      	mov	r0, r6
    384a:	4689      	mov	r9, r1
    384c:	f7fc fdaa 	bl	3a4 <__aeabi_i2d>
    3850:	4602      	mov	r2, r0
    3852:	460b      	mov	r3, r1
    3854:	4640      	mov	r0, r8
    3856:	4649      	mov	r1, r9
    3858:	f7fc fe0e 	bl	478 <__aeabi_dmul>
    385c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
    3860:	4680      	mov	r8, r0
    3862:	6818      	ldr	r0, [r3, #0]
    3864:	4689      	mov	r9, r1
    3866:	f7fc fd8d 	bl	384 <__aeabi_ui2d>
    386a:	4602      	mov	r2, r0
    386c:	460b      	mov	r3, r1
    386e:	4640      	mov	r0, r8
    3870:	4649      	mov	r1, r9
    3872:	f7fc fc4b 	bl	10c <__adddf3>
    3876:	f7fd f8c1 	bl	9fc <__aeabi_d2uiz>
								if(k>=table_size) array1[k%table_size] = array1[k%table_size] - max_conn_int*1.25;
    387a:	45a2      	cmp	sl, r4
    387c:	f341 8077 	ble.w	496e <ull_conn_done+0x1846>
								array1[k%table_size] = anchor_points[i] + conn_int_table[i]*1.25*j;
    3880:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    3882:	f842 0025 	str.w	r0, [r2, r5, lsl #2]
								j++;
    3886:	3601      	adds	r6, #1
    3888:	e7c3      	b.n	3812 <ull_conn_done+0x6ea>
    388a:	4b5c      	ldr	r3, [pc, #368]	; (39fc <ull_conn_done+0x8d4>)
    388c:	4c5c      	ldr	r4, [pc, #368]	; (3a00 <ull_conn_done+0x8d8>)
    388e:	6818      	ldr	r0, [r3, #0]
    3890:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
		if( start || (!need_update_dummy && handle_cnt[max_conn_index] > 1 && handle_cnt[max_conn_index] % M_num == 0  && conn_handle == max_conn_index && anchor_points[conn_handle] != 0 && scheduled_handles[conn_handle])){
    3894:	4b5b      	ldr	r3, [pc, #364]	; (3a04 <ull_conn_done+0x8dc>)
    3896:	6825      	ldr	r5, [r4, #0]
    3898:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
    389c:	781c      	ldrb	r4, [r3, #0]
    389e:	fbb2 f3f5 	udiv	r3, r2, r5
    38a2:	fb05 2313 	mls	r3, r5, r3, r2
    38a6:	2c00      	cmp	r4, #0
    38a8:	f000 80b6 	beq.w	3a18 <ull_conn_done+0x8f0>
		else if(handle_cnt[max_conn_index]%M_num ==2) {
    38ac:	2b02      	cmp	r3, #2
    38ae:	f000 82f6 	beq.w	3e9e <ull_conn_done+0xd76>
	switch (done->extra.mic_state) {
    38b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    38b4:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
    38b8:	2b01      	cmp	r3, #1
    38ba:	f000 82fe 	beq.w	3eba <ull_conn_done+0xd92>
    38be:	2b02      	cmp	r3, #2
    38c0:	f000 835e 	beq.w	3f80 <ull_conn_done+0xe58>
    38c4:	2b00      	cmp	r3, #0
    38c6:	f000 8366 	beq.w	3f96 <ull_conn_done+0xe6e>
	reason_peer = conn->llcp_terminate.reason_peer;
    38ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    38cc:	f893 1107 	ldrb.w	r1, [r3, #263]	; 0x107
	if (reason_peer && (
    38d0:	2900      	cmp	r1, #0
    38d2:	f040 81c9 	bne.w	3c68 <ull_conn_done+0xb40>
	latency_event = lll->latency_event;
    38d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    38d8:	8c9e      	ldrh	r6, [r3, #36]	; 0x24
	if (done->extra.trx_cnt) {
    38da:	6abb      	ldr	r3, [r7, #40]	; 0x28
    38dc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
	elapsed_event = latency_event + 1;
    38de:	1c75      	adds	r5, r6, #1
    38e0:	b2ad      	uxth	r5, r5
	if (done->extra.trx_cnt) {
    38e2:	2b00      	cmp	r3, #0
    38e4:	f040 81d6 	bne.w	3c94 <ull_conn_done+0xb6c>
	if (done->extra.crc_valid) {
    38e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    38ea:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
    38ee:	2b00      	cmp	r3, #0
    38f0:	f040 81da 	bne.w	3ca8 <ull_conn_done+0xb80>
	else if (conn->connect_expire) {
    38f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    38f6:	f8b2 30a8 	ldrh.w	r3, [r2, #168]	; 0xa8
    38fa:	2b00      	cmp	r3, #0
    38fc:	f000 82e4 	beq.w	3ec8 <ull_conn_done+0xda0>
		if (conn->connect_expire > elapsed_event) {
    3900:	42ab      	cmp	r3, r5
    3902:	f241 8057 	bls.w	49b4 <ull_conn_done+0x188c>
			conn->connect_expire -= elapsed_event;
    3906:	1b5b      	subs	r3, r3, r5
    3908:	f8b2 40ac 	ldrh.w	r4, [r2, #172]	; 0xac
    390c:	f8a2 30a8 	strh.w	r3, [r2, #168]	; 0xa8
	if (conn->supervision_expire) {
    3910:	2c00      	cmp	r4, #0
    3912:	f000 81cd 	beq.w	3cb0 <ull_conn_done+0xb88>
		if (conn->supervision_expire > elapsed_event) {
    3916:	42a5      	cmp	r5, r4
    3918:	f080 86dd 	bcs.w	46d6 <ull_conn_done+0x15ae>
			conn->supervision_expire -= elapsed_event;
    391c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    391e:	1b64      	subs	r4, r4, r5
    3920:	b2a4      	uxth	r4, r4
    3922:	f8a2 40ac 	strh.w	r4, [r2, #172]	; 0xac
			lll->latency_event = 0;
    3926:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    3928:	2300      	movs	r3, #0
    392a:	8493      	strh	r3, [r2, #36]	; 0x24
	if (conn->apto_expire != 0U) {
    392c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    392e:	f8b2 30b8 	ldrh.w	r3, [r2, #184]	; 0xb8
	force = 0U;
    3932:	2c06      	cmp	r4, #6
    3934:	bf8c      	ite	hi
    3936:	2400      	movhi	r4, #0
    3938:	2401      	movls	r4, #1
	if (conn->apto_expire != 0U) {
    393a:	2b00      	cmp	r3, #0
    393c:	f040 81be 	bne.w	3cbc <ull_conn_done+0xb94>
	if (conn->appto_expire != 0U) {
    3940:	6e38      	ldr	r0, [r7, #96]	; 0x60
    3942:	f8b0 20b4 	ldrh.w	r2, [r0, #180]	; 0xb4
    3946:	f890 30bf 	ldrb.w	r3, [r0, #191]	; 0xbf
    394a:	f890 10c0 	ldrb.w	r1, [r0, #192]	; 0xc0
    394e:	b162      	cbz	r2, 396a <ull_conn_done+0x842>
		if (conn->appto_expire > elapsed_event) {
    3950:	42aa      	cmp	r2, r5
    3952:	f200 82c4 	bhi.w	3ede <ull_conn_done+0xdb6>
			if ((conn->procedure_expire == 0U) &&
    3956:	6e3d      	ldr	r5, [r7, #96]	; 0x60
    3958:	f8b5 20b0 	ldrh.w	r2, [r5, #176]	; 0xb0
			conn->appto_expire = 0U;
    395c:	2000      	movs	r0, #0
    395e:	f8a5 00b4 	strh.w	r0, [r5, #180]	; 0xb4
			if ((conn->procedure_expire == 0U) &&
    3962:	b912      	cbnz	r2, 396a <ull_conn_done+0x842>
    3964:	428b      	cmp	r3, r1
    3966:	f000 86d3 	beq.w	4710 <ull_conn_done+0x15e8>
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
    396a:	1a5b      	subs	r3, r3, r1
    396c:	f003 0303 	and.w	r3, r3, #3
    3970:	2b02      	cmp	r3, #2
    3972:	f000 82bd 	beq.w	3ef0 <ull_conn_done+0xdc8>
				 (conn->llcp_type == LLCP_CHAN_MAP))) ||
    3976:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3978:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
    397c:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
    3980:	429a      	cmp	r2, r3
    3982:	f000 832e 	beq.w	3fe2 <ull_conn_done+0xeba>
		lll->latency_event = 0;
    3986:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    3988:	2300      	movs	r3, #0
    398a:	8493      	strh	r3, [r2, #36]	; 0x24
	if ((force) || (latency_event != lll->latency_event)) {
    398c:	2c00      	cmp	r4, #0
    398e:	f040 8245 	bne.w	3e1c <ull_conn_done+0xcf4>
    3992:	2e00      	cmp	r6, #0
    3994:	f040 8242 	bne.w	3e1c <ull_conn_done+0xcf4>
    3998:	f003 fb02 	bl	6fa0 <z_timer_cycle_get_32>
}
    399c:	37bc      	adds	r7, #188	; 0xbc
    399e:	46bd      	mov	sp, r7
    39a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    39a4:	fa1f f986 	uxth.w	r9, r6
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    39a8:	464a      	mov	r2, r9
    39aa:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
    39ae:	4640      	mov	r0, r8
    39b0:	f00c fb66 	bl	10080 <mem_get>
	if (conn->lll.handle != handle) {
    39b4:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
    39b6:	454b      	cmp	r3, r9
    39b8:	f43f ac0c 	beq.w	31d4 <ull_conn_done+0xac>
				scheduled_handle_cnt --;
    39bc:	4a12      	ldr	r2, [pc, #72]	; (3a08 <ull_conn_done+0x8e0>)
				handle_cnt[disconnected_handle] =0;
    39be:	4d13      	ldr	r5, [pc, #76]	; (3a0c <ull_conn_done+0x8e4>)
				scheduled_handle_cnt --;
    39c0:	6813      	ldr	r3, [r2, #0]
				need_conn_update = false;
    39c2:	4813      	ldr	r0, [pc, #76]	; (3a10 <ull_conn_done+0x8e8>)
				handle_cnt[disconnected_handle] =0;
    39c4:	f8c7 5090 	str.w	r5, [r7, #144]	; 0x90
				scheduled_handle_cnt --;
    39c8:	3b01      	subs	r3, #1
    39ca:	6013      	str	r3, [r2, #0]
				scheduled_handles[disconnected_handle] = false;
    39cc:	2300      	movs	r3, #0
				handle_cnt[disconnected_handle] =0;
    39ce:	f845 3026 	str.w	r3, [r5, r6, lsl #2]
				need_conn_update = false;
    39d2:	7003      	strb	r3, [r0, #0]
				scheduled_handles[disconnected_handle] = false;
    39d4:	4d06      	ldr	r5, [pc, #24]	; (39f0 <ull_conn_done+0x8c8>)
				disconnected_interval = conn_int_table[disconnected_handle];
    39d6:	6e78      	ldr	r0, [r7, #100]	; 0x64
				update_is_possible = true;
    39d8:	490e      	ldr	r1, [pc, #56]	; (3a14 <ull_conn_done+0x8ec>)
				scheduled_handles[disconnected_handle] = false;
    39da:	55ab      	strb	r3, [r5, r6]
				update_is_possible = true;
    39dc:	2201      	movs	r2, #1
				disconnected_interval = conn_int_table[disconnected_handle];
    39de:	f850 5026 	ldr.w	r5, [r0, r6, lsl #2]
    39e2:	67bd      	str	r5, [r7, #120]	; 0x78
				conn_int_table[disconnected_handle] = 0;
    39e4:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
				update_is_possible = true;
    39e8:	700a      	strb	r2, [r1, #0]
				break;
    39ea:	f7ff bbfa 	b.w	31e2 <ull_conn_done+0xba>
    39ee:	bf00      	nop
    39f0:	200076f8 	.word	0x200076f8
    39f4:	200032cc 	.word	0x200032cc
    39f8:	3ff40000 	.word	0x3ff40000
    39fc:	200069b0 	.word	0x200069b0
    3a00:	20000490 	.word	0x20000490
    3a04:	20009c3f 	.word	0x20009c3f
    3a08:	200076f4 	.word	0x200076f4
    3a0c:	20006998 	.word	0x20006998
    3a10:	20009c3e 	.word	0x20009c3e
    3a14:	20009c40 	.word	0x20009c40
    3a18:	4cac      	ldr	r4, [pc, #688]	; (3ccc <ull_conn_done+0xba4>)
		if( start || (!need_update_dummy && handle_cnt[max_conn_index] > 1 && handle_cnt[max_conn_index] % M_num == 0  && conn_handle == max_conn_index && anchor_points[conn_handle] != 0 && scheduled_handles[conn_handle])){
    3a1a:	2a01      	cmp	r2, #1
    3a1c:	6826      	ldr	r6, [r4, #0]
    3a1e:	f240 816d 	bls.w	3cfc <ull_conn_done+0xbd4>
    3a22:	2b00      	cmp	r3, #0
    3a24:	f040 816a 	bne.w	3cfc <ull_conn_done+0xbd4>
    3a28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    3a2a:	4283      	cmp	r3, r0
    3a2c:	f47f af41 	bne.w	38b2 <ull_conn_done+0x78a>
    3a30:	4ba7      	ldr	r3, [pc, #668]	; (3cd0 <ull_conn_done+0xba8>)
    3a32:	6dba      	ldr	r2, [r7, #88]	; 0x58
    3a34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3a38:	2b00      	cmp	r3, #0
    3a3a:	f43f af3a 	beq.w	38b2 <ull_conn_done+0x78a>
    3a3e:	2900      	cmp	r1, #0
    3a40:	f43f af37 	beq.w	38b2 <ull_conn_done+0x78a>
			if(need_schedule_update != 0)
    3a44:	b10e      	cbz	r6, 3a4a <ull_conn_done+0x922>
				need_schedule_update --;
    3a46:	3e01      	subs	r6, #1
    3a48:	6026      	str	r6, [r4, #0]
			for(int i = 0; i < CONFIG_BT_MAX_CONN; i ++)
    3a4a:	4ba2      	ldr	r3, [pc, #648]	; (3cd4 <ull_conn_done+0xbac>)
										flag = true;
    3a4c:	4aa2      	ldr	r2, [pc, #648]	; (3cd8 <ull_conn_done+0xbb0>)
    3a4e:	f103 0410 	add.w	r4, r3, #16
			bool flag = false;
    3a52:	2000      	movs	r0, #0
				if(handle_cnt[i] < 1 && scheduled_handles[i]) flag = true;
    3a54:	f853 1b04 	ldr.w	r1, [r3], #4
    3a58:	b919      	cbnz	r1, 3a62 <ull_conn_done+0x93a>
    3a5a:	7811      	ldrb	r1, [r2, #0]
    3a5c:	2900      	cmp	r1, #0
    3a5e:	bf18      	it	ne
    3a60:	4608      	movne	r0, r1
			for(int i = 0; i < CONFIG_BT_MAX_CONN; i ++)
    3a62:	429c      	cmp	r4, r3
    3a64:	f102 0201 	add.w	r2, r2, #1
    3a68:	d1f4      	bne.n	3a54 <ull_conn_done+0x92c>
			if(!flag){
    3a6a:	2800      	cmp	r0, #0
    3a6c:	f47f af21 	bne.w	38b2 <ull_conn_done+0x78a>
				for(; flag && standard_anchor_point <table_size; standard_anchor_point ++)
    3a70:	4b9a      	ldr	r3, [pc, #616]	; (3cdc <ull_conn_done+0xbb4>)
    3a72:	627b      	str	r3, [r7, #36]	; 0x24
    3a74:	461a      	mov	r2, r3
				need_calculation = false;
    3a76:	4b9a      	ldr	r3, [pc, #616]	; (3ce0 <ull_conn_done+0xbb8>)
				for(; flag && standard_anchor_point <table_size; standard_anchor_point ++)
    3a78:	f8d2 9000 	ldr.w	r9, [r2]
    3a7c:	4a99      	ldr	r2, [pc, #612]	; (3ce4 <ull_conn_done+0xbbc>)
				need_calculation = false;
    3a7e:	7018      	strb	r0, [r3, #0]
				for(; flag && standard_anchor_point <table_size; standard_anchor_point ++)
    3a80:	6811      	ldr	r1, [r2, #0]
    3a82:	6779      	str	r1, [r7, #116]	; 0x74
    3a84:	f1b9 0f00 	cmp.w	r9, #0
    3a88:	f340 87c5 	ble.w	4a16 <ull_conn_done+0x18ee>
    3a8c:	4b96      	ldr	r3, [pc, #600]	; (3ce8 <ull_conn_done+0xbc0>)
				int standard_anchor_point =0;
    3a8e:	4680      	mov	r8, r0
    3a90:	e004      	b.n	3a9c <ull_conn_done+0x974>
				for(; flag && standard_anchor_point <table_size; standard_anchor_point ++)
    3a92:	f108 0801 	add.w	r8, r8, #1
    3a96:	45c1      	cmp	r9, r8
    3a98:	f000 8792 	beq.w	49c0 <ull_conn_done+0x1898>
					if(max_conn_index ==array0[standard_anchor_point]) {
    3a9c:	f853 2b04 	ldr.w	r2, [r3], #4
    3aa0:	428a      	cmp	r2, r1
    3aa2:	d1f6      	bne.n	3a92 <ull_conn_done+0x96a>
				for(int i = 0; i <CONFIG_BT_MAX_CONN; i ++) temp_anchor_points[i] = anchor_points[i];
    3aa4:	4c8a      	ldr	r4, [pc, #552]	; (3cd0 <ull_conn_done+0xba8>)
				uint32_t standard_point = anchor_points[max_conn_index];
    3aa6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
				array1[standard_anchor_point] = anchor_points[max_conn_index];
    3aa8:	4b90      	ldr	r3, [pc, #576]	; (3cec <ull_conn_done+0xbc4>)
				uint32_t standard_point = anchor_points[max_conn_index];
    3aaa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
				for(int i = 0; i <CONFIG_BT_MAX_CONN; i ++) temp_anchor_points[i] = anchor_points[i];
    3aae:	4d90      	ldr	r5, [pc, #576]	; (3cf0 <ull_conn_done+0xbc8>)
				array1[standard_anchor_point] = anchor_points[max_conn_index];
    3ab0:	f843 2028 	str.w	r2, [r3, r8, lsl #2]
				for(int i = 0; i <CONFIG_BT_MAX_CONN; i ++) temp_anchor_points[i] = anchor_points[i];
    3ab4:	e9d4 0100 	ldrd	r0, r1, [r4]
				array1[standard_anchor_point] = anchor_points[max_conn_index];
    3ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
				uint32_t standard_point = anchor_points[max_conn_index];
    3aba:	673a      	str	r2, [r7, #112]	; 0x70
				for(int i = 0; i <CONFIG_BT_MAX_CONN; i ++) temp_anchor_points[i] = anchor_points[i];
    3abc:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
						for(int k = standard_anchor_point; k < standard_anchor_point +table_size && j <max_conn_int/conn_int_table[i]; k ++){
    3ac0:	4e8c      	ldr	r6, [pc, #560]	; (3cf4 <ull_conn_done+0xbcc>)
    3ac2:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
				for(int i = 0; i <CONFIG_BT_MAX_CONN; i ++) temp_anchor_points[i] = anchor_points[i];
    3ac6:	e9c5 0100 	strd	r0, r1, [r5]
    3aca:	e9c5 2302 	strd	r2, r3, [r5, #8]
						for(int k = standard_anchor_point; k < standard_anchor_point +table_size && j <max_conn_int/conn_int_table[i]; k ++){
    3ace:	6836      	ldr	r6, [r6, #0]
    3ad0:	66be      	str	r6, [r7, #104]	; 0x68
				for(int i =0; i <CONFIG_BT_MAX_CONN; i ++){
    3ad2:	2300      	movs	r3, #0
						for(int k = standard_anchor_point; k < standard_anchor_point +table_size && j <max_conn_int/conn_int_table[i]; k ++){
    3ad4:	eb08 0209 	add.w	r2, r8, r9
    3ad8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
    3adc:	f8c7 906c 	str.w	r9, [r7, #108]	; 0x6c
    3ae0:	469b      	mov	fp, r3
    3ae2:	f8c7 8050 	str.w	r8, [r7, #80]	; 0x50
					if(scheduled_handles[i] == true && i != max_conn_index){
    3ae6:	69fa      	ldr	r2, [r7, #28]
    3ae8:	f812 3b01 	ldrb.w	r3, [r2], #1
    3aec:	61fa      	str	r2, [r7, #28]
    3aee:	2b00      	cmp	r3, #0
    3af0:	f000 82b4 	beq.w	405c <ull_conn_done+0xf34>
    3af4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    3af6:	459b      	cmp	fp, r3
    3af8:	f000 82b0 	beq.w	405c <ull_conn_done+0xf34>
						while(anchor_points[i] + conn_int_table[i]*1.25 < standard_point) anchor_points[i] += conn_int_table[i]*1.25;
    3afc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
    3b00:	681e      	ldr	r6, [r3, #0]
    3b02:	4630      	mov	r0, r6
    3b04:	f7fc fc3e 	bl	384 <__aeabi_ui2d>
    3b08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    3b0a:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
    3b0e:	65bb      	str	r3, [r7, #88]	; 0x58
    3b10:	4604      	mov	r4, r0
    3b12:	4618      	mov	r0, r3
    3b14:	460d      	mov	r5, r1
    3b16:	f7fc fc35 	bl	384 <__aeabi_ui2d>
    3b1a:	4b77      	ldr	r3, [pc, #476]	; (3cf8 <ull_conn_done+0xbd0>)
    3b1c:	2200      	movs	r2, #0
    3b1e:	f7fc fcab 	bl	478 <__aeabi_dmul>
    3b22:	4602      	mov	r2, r0
    3b24:	460b      	mov	r3, r1
    3b26:	e9c7 011e 	strd	r0, r1, [r7, #120]	; 0x78
    3b2a:	4620      	mov	r0, r4
    3b2c:	4629      	mov	r1, r5
    3b2e:	f7fc faed 	bl	10c <__adddf3>
    3b32:	4680      	mov	r8, r0
    3b34:	6f38      	ldr	r0, [r7, #112]	; 0x70
    3b36:	4689      	mov	r9, r1
    3b38:	f7fc fc24 	bl	384 <__aeabi_ui2d>
    3b3c:	4602      	mov	r2, r0
    3b3e:	460b      	mov	r3, r1
    3b40:	4640      	mov	r0, r8
    3b42:	4649      	mov	r1, r9
    3b44:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
    3b48:	f7fc ff08 	bl	95c <__aeabi_dcmplt>
    3b4c:	b1e8      	cbz	r0, 3b8a <ull_conn_done+0xa62>
    3b4e:	f8c7 b048 	str.w	fp, [r7, #72]	; 0x48
    3b52:	e9d7 ab1e 	ldrd	sl, fp, [r7, #120]	; 0x78
    3b56:	4649      	mov	r1, r9
    3b58:	4640      	mov	r0, r8
    3b5a:	f7fc ff4f 	bl	9fc <__aeabi_d2uiz>
    3b5e:	4606      	mov	r6, r0
    3b60:	f7fc fc10 	bl	384 <__aeabi_ui2d>
    3b64:	4652      	mov	r2, sl
    3b66:	465b      	mov	r3, fp
    3b68:	4604      	mov	r4, r0
    3b6a:	460d      	mov	r5, r1
    3b6c:	f7fc face 	bl	10c <__adddf3>
    3b70:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
    3b74:	4680      	mov	r8, r0
    3b76:	4689      	mov	r9, r1
    3b78:	f7fc fef0 	bl	95c <__aeabi_dcmplt>
    3b7c:	2800      	cmp	r0, #0
    3b7e:	d1ea      	bne.n	3b56 <ull_conn_done+0xa2e>
    3b80:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
    3b84:	f8d7 b048 	ldr.w	fp, [r7, #72]	; 0x48
    3b88:	601e      	str	r6, [r3, #0]
						while(anchor_points[i] > standard_point + conn_int_table[i]*1.25) anchor_points[i] -= conn_int_table[i]*1.25;
    3b8a:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
    3b8e:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
    3b92:	f7fc fabb 	bl	10c <__adddf3>
    3b96:	4622      	mov	r2, r4
    3b98:	462b      	mov	r3, r5
    3b9a:	4680      	mov	r8, r0
    3b9c:	4689      	mov	r9, r1
    3b9e:	f7fc fedd 	bl	95c <__aeabi_dcmplt>
    3ba2:	b1d8      	cbz	r0, 3bdc <ull_conn_done+0xab4>
    3ba4:	f8c7 b088 	str.w	fp, [r7, #136]	; 0x88
    3ba8:	e9d7 ab1e 	ldrd	sl, fp, [r7, #120]	; 0x78
    3bac:	4652      	mov	r2, sl
    3bae:	465b      	mov	r3, fp
    3bb0:	4620      	mov	r0, r4
    3bb2:	4629      	mov	r1, r5
    3bb4:	f7fc faa8 	bl	108 <__aeabi_dsub>
    3bb8:	f7fc ff20 	bl	9fc <__aeabi_d2uiz>
    3bbc:	4606      	mov	r6, r0
    3bbe:	f7fc fbe1 	bl	384 <__aeabi_ui2d>
    3bc2:	4642      	mov	r2, r8
    3bc4:	464b      	mov	r3, r9
    3bc6:	4604      	mov	r4, r0
    3bc8:	460d      	mov	r5, r1
    3bca:	f7fc fee5 	bl	998 <__aeabi_dcmpgt>
    3bce:	2800      	cmp	r0, #0
    3bd0:	d1ec      	bne.n	3bac <ull_conn_done+0xa84>
    3bd2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
    3bd6:	f8d7 b088 	ldr.w	fp, [r7, #136]	; 0x88
    3bda:	601e      	str	r6, [r3, #0]
						if(anchor_points[i] < standard_point) anchor_points[i] += conn_int_table[i]*1.25;
    3bdc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    3bde:	42b3      	cmp	r3, r6
    3be0:	f200 8583 	bhi.w	46ea <ull_conn_done+0x15c2>
						for(int k = standard_anchor_point; k < standard_anchor_point +table_size && j <max_conn_int/conn_int_table[i]; k ++){
    3be4:	6d3c      	ldr	r4, [r7, #80]	; 0x50
    3be6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    3bea:	4294      	cmp	r4, r2
    3bec:	f280 8236 	bge.w	405c <ull_conn_done+0xf34>
    3bf0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3bf2:	6dba      	ldr	r2, [r7, #88]	; 0x58
    3bf4:	f8d7 a06c 	ldr.w	sl, [r7, #108]	; 0x6c
    3bf8:	fbb3 f3f2 	udiv	r3, r3, r2
    3bfc:	2600      	movs	r6, #0
    3bfe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    3c02:	e005      	b.n	3c10 <ull_conn_done+0xae8>
    3c04:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    3c08:	3401      	adds	r4, #1
    3c0a:	42a3      	cmp	r3, r4
    3c0c:	f000 8226 	beq.w	405c <ull_conn_done+0xf34>
    3c10:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
    3c14:	42b3      	cmp	r3, r6
    3c16:	f240 8221 	bls.w	405c <ull_conn_done+0xf34>
							if(array0[k%table_size] == i){
    3c1a:	fb94 f5fa 	sdiv	r5, r4, sl
    3c1e:	4b32      	ldr	r3, [pc, #200]	; (3ce8 <ull_conn_done+0xbc0>)
    3c20:	fb0a 4515 	mls	r5, sl, r5, r4
    3c24:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    3c28:	455b      	cmp	r3, fp
    3c2a:	d1eb      	bne.n	3c04 <ull_conn_done+0xadc>
								array1[k%table_size] = anchor_points[i] + conn_int_table[i]*1.25*j;
    3c2c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
    3c30:	6818      	ldr	r0, [r3, #0]
    3c32:	f7fc fba7 	bl	384 <__aeabi_ui2d>
    3c36:	4680      	mov	r8, r0
    3c38:	4630      	mov	r0, r6
    3c3a:	4689      	mov	r9, r1
    3c3c:	f7fc fbb2 	bl	3a4 <__aeabi_i2d>
    3c40:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
    3c44:	f7fc fc18 	bl	478 <__aeabi_dmul>
    3c48:	4602      	mov	r2, r0
    3c4a:	460b      	mov	r3, r1
    3c4c:	4640      	mov	r0, r8
    3c4e:	4649      	mov	r1, r9
    3c50:	f7fc fa5c 	bl	10c <__adddf3>
    3c54:	f7fc fed2 	bl	9fc <__aeabi_d2uiz>
								if(k>=table_size) array1[k%table_size] = array1[k%table_size] - max_conn_int*1.25;
    3c58:	45a2      	cmp	sl, r4
    3c5a:	f340 826f 	ble.w	413c <ull_conn_done+0x1014>
								array1[k%table_size] = anchor_points[i] + conn_int_table[i]*1.25*j;
    3c5e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    3c60:	f842 0025 	str.w	r0, [r2, r5, lsl #2]
								j++;
    3c64:	3601      	adds	r6, #1
    3c66:	e7cd      	b.n	3c04 <ull_conn_done+0xadc>
				0 ||
    3c68:	f893 30be 	ldrb.w	r3, [r3, #190]	; 0xbe
	if (reason_peer && (
    3c6c:	079a      	lsls	r2, r3, #30
    3c6e:	f100 818b 	bmi.w	3f88 <ull_conn_done+0xe60>
				conn->master.terminate_ack ||
    3c72:	293d      	cmp	r1, #61	; 0x3d
    3c74:	f000 8188 	beq.w	3f88 <ull_conn_done+0xe60>
	latency_event = lll->latency_event;
    3c78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    3c7a:	8c96      	ldrh	r6, [r2, #36]	; 0x24
	if (done->extra.trx_cnt) {
    3c7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3c7e:	8c92      	ldrh	r2, [r2, #36]	; 0x24
	elapsed_event = latency_event + 1;
    3c80:	1c75      	adds	r5, r6, #1
    3c82:	b2ad      	uxth	r5, r5
	if (done->extra.trx_cnt) {
    3c84:	2a00      	cmp	r2, #0
    3c86:	f43f ae2f 	beq.w	38e8 <ull_conn_done+0x7c0>
			conn->master.terminate_ack = 1;
    3c8a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    3c8c:	f043 0302 	orr.w	r3, r3, #2
    3c90:	f882 30be 	strb.w	r3, [r2, #190]	; 0xbe
	if (done->extra.crc_valid) {
    3c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
		conn->connect_expire = 0U;
    3c96:	6e39      	ldr	r1, [r7, #96]	; 0x60
	if (done->extra.crc_valid) {
    3c98:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
		conn->connect_expire = 0U;
    3c9c:	2200      	movs	r2, #0
    3c9e:	f8a1 20a8 	strh.w	r2, [r1, #168]	; 0xa8
	if (done->extra.crc_valid) {
    3ca2:	2b00      	cmp	r3, #0
    3ca4:	f000 8110 	beq.w	3ec8 <ull_conn_done+0xda0>
		conn->supervision_expire = 0U;
    3ca8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3caa:	2400      	movs	r4, #0
    3cac:	f8a3 40ac 	strh.w	r4, [r3, #172]	; 0xac
	if (conn->apto_expire != 0U) {
    3cb0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    3cb2:	f8b2 30b8 	ldrh.w	r3, [r2, #184]	; 0xb8
    3cb6:	2b00      	cmp	r3, #0
    3cb8:	f43f ae42 	beq.w	3940 <ull_conn_done+0x818>
		if (conn->apto_expire > elapsed_event) {
    3cbc:	42ab      	cmp	r3, r5
    3cbe:	f240 811f 	bls.w	3f00 <ull_conn_done+0xdd8>
			conn->apto_expire -= elapsed_event;
    3cc2:	1b5b      	subs	r3, r3, r5
    3cc4:	f8a2 30b8 	strh.w	r3, [r2, #184]	; 0xb8
    3cc8:	e63a      	b.n	3940 <ull_conn_done+0x818>
    3cca:	bf00      	nop
    3ccc:	200005ec 	.word	0x200005ec
    3cd0:	200032cc 	.word	0x200032cc
    3cd4:	20006998 	.word	0x20006998
    3cd8:	200076f8 	.word	0x200076f8
    3cdc:	200076fc 	.word	0x200076fc
    3ce0:	20009c3d 	.word	0x20009c3d
    3ce4:	200069b0 	.word	0x200069b0
    3ce8:	200032dc 	.word	0x200032dc
    3cec:	200042dc 	.word	0x200042dc
    3cf0:	20007700 	.word	0x20007700
    3cf4:	200069b4 	.word	0x200069b4
    3cf8:	3ff40000 	.word	0x3ff40000
		else if( need_schedule_update == 0 && !need_update_dummy && handle_cnt[max_conn_index]%M_num == 1  && conn_handle == max_conn_index && anchor_points[conn_handle] != 0 && scheduled_handles[conn_handle]){
    3cfc:	2e00      	cmp	r6, #0
    3cfe:	f47f add5 	bne.w	38ac <ull_conn_done+0x784>
    3d02:	2b01      	cmp	r3, #1
    3d04:	f47f add2 	bne.w	38ac <ull_conn_done+0x784>
    3d08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    3d0a:	4283      	cmp	r3, r0
    3d0c:	f47f add1 	bne.w	38b2 <ull_conn_done+0x78a>
    3d10:	4abf      	ldr	r2, [pc, #764]	; (4010 <ull_conn_done+0xee8>)
    3d12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    3d14:	617a      	str	r2, [r7, #20]
    3d16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3d1a:	2b00      	cmp	r3, #0
    3d1c:	f43f adc9 	beq.w	38b2 <ull_conn_done+0x78a>
    3d20:	2900      	cmp	r1, #0
    3d22:	f43f adc6 	beq.w	38b2 <ull_conn_done+0x78a>
			if(conn_int_table[scheduled_handle_cnt-1] >0){
    3d26:	4bbb      	ldr	r3, [pc, #748]	; (4014 <ull_conn_done+0xeec>)
    3d28:	6e78      	ldr	r0, [r7, #100]	; 0x64
    3d2a:	681b      	ldr	r3, [r3, #0]
    3d2c:	3b01      	subs	r3, #1
    3d2e:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
    3d32:	2d00      	cmp	r5, #0
    3d34:	f43f adbd 	beq.w	38b2 <ull_conn_done+0x78a>
				if( handle_cnt[scheduled_handle_cnt-1] >40000/conn_int_table[scheduled_handle_cnt-1]/1.25) {
    3d38:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
    3d3c:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
    3d40:	f7fc fb20 	bl	384 <__aeabi_ui2d>
    3d44:	4602      	mov	r2, r0
    3d46:	f649 4040 	movw	r0, #40000	; 0x9c40
    3d4a:	fbb0 f0f5 	udiv	r0, r0, r5
    3d4e:	4614      	mov	r4, r2
    3d50:	460d      	mov	r5, r1
    3d52:	f7fc fb17 	bl	384 <__aeabi_ui2d>
    3d56:	4bb0      	ldr	r3, [pc, #704]	; (4018 <ull_conn_done+0xef0>)
    3d58:	2200      	movs	r2, #0
    3d5a:	f7fc fcb7 	bl	6cc <__aeabi_ddiv>
    3d5e:	4602      	mov	r2, r0
    3d60:	460b      	mov	r3, r1
    3d62:	4620      	mov	r0, r4
    3d64:	4629      	mov	r1, r5
    3d66:	f7fc fe17 	bl	998 <__aeabi_dcmpgt>
    3d6a:	2800      	cmp	r0, #0
    3d6c:	f43f ada1 	beq.w	38b2 <ull_conn_done+0x78a>
					for(int i = 0; i <CONFIG_BT_MAX_CONN; i ++) anchor_points[i] = temp_anchor_points[i];
    3d70:	4baa      	ldr	r3, [pc, #680]	; (401c <ull_conn_done+0xef4>)
							while(anchor_points[i] < anchor_points[first_handle]) anchor_points[i] += conn_int_table[i]*1.25;
    3d72:	4cab      	ldr	r4, [pc, #684]	; (4020 <ull_conn_done+0xef8>)
    3d74:	66fc      	str	r4, [r7, #108]	; 0x6c
					for(int i = 0; i <CONFIG_BT_MAX_CONN; i ++) anchor_points[i] = temp_anchor_points[i];
    3d76:	e9d3 0100 	ldrd	r0, r1, [r3]
    3d7a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
							while(anchor_points[i] < anchor_points[first_handle]) anchor_points[i] += conn_int_table[i]*1.25;
    3d7e:	f8d4 b000 	ldr.w	fp, [r4]
					for(int i = 0; i <CONFIG_BT_MAX_CONN; i ++) anchor_points[i] = temp_anchor_points[i];
    3d82:	4ca3      	ldr	r4, [pc, #652]	; (4010 <ull_conn_done+0xee8>)
							scheduled_dist[i] = (anchor_points[i]-anchor_points[first_handle])%((uint32_t)(conn_int_table[first_handle]*1.25));
    3d84:	4da4      	ldr	r5, [pc, #656]	; (4018 <ull_conn_done+0xef0>)
					for(int i = 0; i <CONFIG_BT_MAX_CONN; i ++) anchor_points[i] = temp_anchor_points[i];
    3d86:	60e3      	str	r3, [r4, #12]
					need_conn_update = false;
    3d88:	4ba6      	ldr	r3, [pc, #664]	; (4024 <ull_conn_done+0xefc>)
					for(int i = 0; i <CONFIG_BT_MAX_CONN; i ++) anchor_points[i] = temp_anchor_points[i];
    3d8a:	6020      	str	r0, [r4, #0]
					need_conn_update = false;
    3d8c:	701e      	strb	r6, [r3, #0]
					for(int i = 0; i <CONFIG_BT_MAX_CONN; i ++){
    3d8e:	f107 0398 	add.w	r3, r7, #152	; 0x98
					for(int i = 0; i <CONFIG_BT_MAX_CONN; i ++) anchor_points[i] = temp_anchor_points[i];
    3d92:	6061      	str	r1, [r4, #4]
    3d94:	60a2      	str	r2, [r4, #8]
    3d96:	46a2      	mov	sl, r4
					for(int i = 0; i <CONFIG_BT_MAX_CONN; i ++){
    3d98:	46b0      	mov	r8, r6
    3d9a:	64bb      	str	r3, [r7, #72]	; 0x48
							while(anchor_points[i] < anchor_points[first_handle]) anchor_points[i] += conn_int_table[i]*1.25;
    3d9c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    3da0:	f107 09a8 	add.w	r9, r7, #168	; 0xa8
							scheduled_dist[i] = (anchor_points[i]-anchor_points[first_handle])%((uint32_t)(conn_int_table[first_handle]*1.25));
    3da4:	2400      	movs	r4, #0
						if(scheduled_handles[i] == false) scheduled_dist[i] = -1;
    3da6:	69fa      	ldr	r2, [r7, #28]
    3da8:	f812 3b01 	ldrb.w	r3, [r2], #1
    3dac:	61fa      	str	r2, [r7, #28]
						schedule[i] = i;
    3dae:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
    3db2:	f842 8b04 	str.w	r8, [r2], #4
    3db6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
						if(scheduled_handles[i] == false) scheduled_dist[i] = -1;
    3dba:	2b00      	cmp	r3, #0
    3dbc:	f041 80d4 	bne.w	4f68 <ull_conn_done+0x1e40>
    3dc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3dc4:	f8c9 3000 	str.w	r3, [r9]
					for(int i = 0; i <CONFIG_BT_MAX_CONN; i ++){
    3dc8:	f108 0801 	add.w	r8, r8, #1
    3dcc:	f1b8 0f04 	cmp.w	r8, #4
    3dd0:	f109 0904 	add.w	r9, r9, #4
    3dd4:	f10a 0a04 	add.w	sl, sl, #4
    3dd8:	d1e5      	bne.n	3da6 <ull_conn_done+0xc7e>
    3dda:	f107 0398 	add.w	r3, r7, #152	; 0x98
					for(int i = 0; i <CONFIG_BT_MAX_CONN; i ++){
    3dde:	2100      	movs	r1, #0
    3de0:	f107 06a8 	add.w	r6, r7, #168	; 0xa8
						for(int j = i+1; j < CONFIG_BT_MAX_CONN; j ++){			
    3de4:	3101      	adds	r1, #1
    3de6:	2904      	cmp	r1, #4
    3de8:	f000 864b 	beq.w	4a82 <ull_conn_done+0x195a>
    3dec:	1d18      	adds	r0, r3, #4
    3dee:	4602      	mov	r2, r0
							if(scheduled_dist[schedule[i]] > scheduled_dist[schedule[j]]){
    3df0:	f852 5b04 	ldr.w	r5, [r2], #4
    3df4:	681c      	ldr	r4, [r3, #0]
    3df6:	f107 0cb8 	add.w	ip, r7, #184	; 0xb8
    3dfa:	eb0c 0e84 	add.w	lr, ip, r4, lsl #2
    3dfe:	eb0c 0c85 	add.w	ip, ip, r5, lsl #2
    3e02:	f85e ec10 	ldr.w	lr, [lr, #-16]
    3e06:	f85c cc10 	ldr.w	ip, [ip, #-16]
    3e0a:	45e6      	cmp	lr, ip
								schedule[i] = schedule[j];
    3e0c:	bf84      	itt	hi
    3e0e:	601d      	strhi	r5, [r3, #0]
								schedule[j] = temp;
    3e10:	f842 4c04 	strhi.w	r4, [r2, #-4]
						for(int j = i+1; j < CONFIG_BT_MAX_CONN; j ++){			
    3e14:	42b2      	cmp	r2, r6
    3e16:	d1eb      	bne.n	3df0 <ull_conn_done+0xcc8>
    3e18:	4603      	mov	r3, r0
    3e1a:	e7e3      	b.n	3de4 <ull_conn_done+0xcbc>
		lazy = lll->latency_event + 1;
    3e1c:	2101      	movs	r1, #1
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
    3e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
    3e20:	4881      	ldr	r0, [pc, #516]	; (4028 <ull_conn_done+0xf00>)
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
    3e22:	7f1a      	ldrb	r2, [r3, #28]
		struct ll_conn *conn = lll->hdr.parent;
    3e24:	68dd      	ldr	r5, [r3, #12]
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
    3e26:	9506      	str	r5, [sp, #24]
    3e28:	2300      	movs	r3, #0
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
    3e2a:	3203      	adds	r2, #3
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
    3e2c:	e9cd 1403 	strd	r1, r4, [sp, #12]
    3e30:	e9cd 3301 	strd	r3, r3, [sp, #4]
    3e34:	9005      	str	r0, [sp, #20]
    3e36:	9300      	str	r3, [sp, #0]
    3e38:	4618      	mov	r0, r3
    3e3a:	b2d2      	uxtb	r2, r2
    3e3c:	2101      	movs	r1, #1
    3e3e:	f00d fd6d 	bl	1191c <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    3e42:	f030 0302 	bics.w	r3, r0, #2
    3e46:	f43f ada7 	beq.w	3998 <ull_conn_done+0x870>
    3e4a:	f010 fba5 	bl	14598 <ull_disable_mark_get>
    3e4e:	4285      	cmp	r5, r0
    3e50:	f43f ada2 	beq.w	3998 <ull_conn_done+0x870>
    3e54:	4a75      	ldr	r2, [pc, #468]	; (402c <ull_conn_done+0xf04>)
    3e56:	4976      	ldr	r1, [pc, #472]	; (4030 <ull_conn_done+0xf08>)
    3e58:	4876      	ldr	r0, [pc, #472]	; (4034 <ull_conn_done+0xf0c>)
    3e5a:	f240 73b2 	movw	r3, #1970	; 0x7b2
    3e5e:	f01a f878 	bl	1df52 <printk>
    3e62:	4040      	eors	r0, r0
    3e64:	f380 8811 	msr	BASEPRI, r0
    3e68:	f04f 0003 	mov.w	r0, #3
    3e6c:	df02      	svc	2
    3e6e:	e593      	b.n	3998 <ull_conn_done+0x870>
		for(int j = 1; j <CONFIG_BT_MAX_CONN; j ++)
    3e70:	46e1      	mov	r9, ip
		if(max_conn_int != 0)
    3e72:	f1b9 0f00 	cmp.w	r9, #0
    3e76:	f43f a9f5 	beq.w	3264 <ull_conn_done+0x13c>
    3e7a:	f7ff b9e5 	b.w	3248 <ull_conn_done+0x120>
		BLEX_cnt2 ++;
    3e7e:	4c6e      	ldr	r4, [pc, #440]	; (4038 <ull_conn_done+0xf10>)
    3e80:	f003 f88e 	bl	6fa0 <z_timer_cycle_get_32>
    3e84:	6822      	ldr	r2, [r4, #0]
		stop_cycle[conn_handle] = k_cycle_get_32();
    3e86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    3e88:	496c      	ldr	r1, [pc, #432]	; (403c <ull_conn_done+0xf14>)
		BLEX_cnt2 ++;
    3e8a:	3201      	adds	r2, #1
    3e8c:	6022      	str	r2, [r4, #0]
		stop_cycle[conn_handle] = k_cycle_get_32();
    3e8e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    3e92:	2200      	movs	r2, #0
    3e94:	e9c1 0200 	strd	r0, r2, [r1]
    3e98:	00dc      	lsls	r4, r3, #3
    3e9a:	f7ff b96b 	b.w	3174 <ull_conn_done+0x4c>
			BLEX_cnt4 ++;
    3e9e:	4a68      	ldr	r2, [pc, #416]	; (4040 <ull_conn_done+0xf18>)
    3ea0:	6813      	ldr	r3, [r2, #0]
    3ea2:	3301      	adds	r3, #1
			if(BLEX_cnt4 == 1) BLEX_start = (uint32_t)k_cyc_to_ns_floor64(k_cycle_get_32());
    3ea4:	2b01      	cmp	r3, #1
			BLEX_cnt4 ++;
    3ea6:	6013      	str	r3, [r2, #0]
			if(BLEX_cnt4 == 1) BLEX_start = (uint32_t)k_cyc_to_ns_floor64(k_cycle_get_32());
    3ea8:	d03f      	beq.n	3f2a <ull_conn_done+0xe02>
    3eaa:	f003 f879 	bl	6fa0 <z_timer_cycle_get_32>
	switch (done->extra.mic_state) {
    3eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3eb0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
    3eb4:	2b01      	cmp	r3, #1
    3eb6:	f47f ad02 	bne.w	38be <ull_conn_done+0x796>
			conn->appto_expire = conn->apto_expire = 0U;
    3eba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    3ebc:	2300      	movs	r3, #0
    3ebe:	f8a2 30b8 	strh.w	r3, [r2, #184]	; 0xb8
    3ec2:	f8a2 30b4 	strh.w	r3, [r2, #180]	; 0xb4
			break;
    3ec6:	e500      	b.n	38ca <ull_conn_done+0x7a2>
		if (!conn->supervision_expire) {
    3ec8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3eca:	f8b3 40ac 	ldrh.w	r4, [r3, #172]	; 0xac
    3ece:	2c00      	cmp	r4, #0
    3ed0:	f47f ad21 	bne.w	3916 <ull_conn_done+0x7ee>
			conn->supervision_expire = conn->supervision_reload;
    3ed4:	f8b3 40aa 	ldrh.w	r4, [r3, #170]	; 0xaa
    3ed8:	f8a3 40ac 	strh.w	r4, [r3, #172]	; 0xac
    3edc:	e518      	b.n	3910 <ull_conn_done+0x7e8>
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
    3ede:	1a5b      	subs	r3, r3, r1
    3ee0:	f003 0303 	and.w	r3, r3, #3
			conn->appto_expire -= elapsed_event;
    3ee4:	1b52      	subs	r2, r2, r5
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
    3ee6:	2b02      	cmp	r3, #2
			conn->appto_expire -= elapsed_event;
    3ee8:	f8a0 20b4 	strh.w	r2, [r0, #180]	; 0xb4
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
    3eec:	f47f ad43 	bne.w	3976 <ull_conn_done+0x84e>
    3ef0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3ef2:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
    3ef6:	3b01      	subs	r3, #1
    3ef8:	2b01      	cmp	r3, #1
    3efa:	f63f ad3c 	bhi.w	3976 <ull_conn_done+0x84e>
    3efe:	e542      	b.n	3986 <ull_conn_done+0x85e>
			rx = ll_pdu_rx_alloc();
    3f00:	f010 fad6 	bl	144b0 <ll_pdu_rx_alloc>
			if (rx) {
    3f04:	4601      	mov	r1, r0
    3f06:	2800      	cmp	r0, #0
    3f08:	f000 83fc 	beq.w	4704 <ull_conn_done+0x15dc>
				conn->apto_expire = 0U;
    3f0c:	6e38      	ldr	r0, [r7, #96]	; 0x60
				rx->handle = lll->handle;
    3f0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
				conn->apto_expire = 0U;
    3f10:	2300      	movs	r3, #0
				rx->handle = lll->handle;
    3f12:	8b92      	ldrh	r2, [r2, #28]
				conn->apto_expire = 0U;
    3f14:	f8a0 30b8 	strh.w	r3, [r0, #184]	; 0xb8
				rx->type = NODE_RX_TYPE_APTO;
    3f18:	230d      	movs	r3, #13
				ll_rx_put(rx->link, rx);
    3f1a:	6808      	ldr	r0, [r1, #0]
				rx->handle = lll->handle;
    3f1c:	80ca      	strh	r2, [r1, #6]
				rx->type = NODE_RX_TYPE_APTO;
    3f1e:	710b      	strb	r3, [r1, #4]
				ll_rx_put(rx->link, rx);
    3f20:	f010 fa92 	bl	14448 <ll_rx_put>
				ll_rx_sched();
    3f24:	f010 fa9a 	bl	1445c <ll_rx_sched>
    3f28:	e50a      	b.n	3940 <ull_conn_done+0x818>
    3f2a:	f003 f839 	bl	6fa0 <z_timer_cycle_get_32>
    3f2e:	4a45      	ldr	r2, [pc, #276]	; (4044 <ull_conn_done+0xf1c>)
			if(BLEX_cnt4 == 1) BLEX_start = (uint32_t)k_cyc_to_ns_floor64(k_cycle_get_32());
    3f30:	4945      	ldr	r1, [pc, #276]	; (4048 <ull_conn_done+0xf20>)
    3f32:	fba0 3402 	umull	r3, r4, r0, r2
    3f36:	0bda      	lsrs	r2, r3, #15
    3f38:	ea42 4244 	orr.w	r2, r2, r4, lsl #17
    3f3c:	600a      	str	r2, [r1, #0]
    3f3e:	e4b8      	b.n	38b2 <ull_conn_done+0x78a>
    3f40:	4642      	mov	r2, r8
    3f42:	f7ff ba3b 	b.w	33bc <ull_conn_done+0x294>
							for(int k = i*table_size/old_old_repeated_size+j; k< (i+1)*table_size/old_old_repeated_size-1; k ++){
    3f46:	fb9c f8fe 	sdiv	r8, ip, lr
    3f4a:	f108 3bff 	add.w	fp, r8, #4294967295	; 0xffffffff
    3f4e:	455b      	cmp	r3, fp
    3f50:	da0f      	bge.n	3f72 <ull_conn_done+0xe4a>
    3f52:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    3f56:	3b04      	subs	r3, #4
    3f58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    3f5c:	4b3b      	ldr	r3, [pc, #236]	; (404c <ull_conn_done+0xf24>)
    3f5e:	eb03 0888 	add.w	r8, r3, r8, lsl #2
    3f62:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
    3f66:	e000      	b.n	3f6a <ull_conn_done+0xe42>
    3f68:	689c      	ldr	r4, [r3, #8]
								array0[k] = array0[k+1];
    3f6a:	f843 4f04 	str.w	r4, [r3, #4]!
							for(int k = i*table_size/old_old_repeated_size+j; k< (i+1)*table_size/old_old_repeated_size-1; k ++){
    3f6e:	4598      	cmp	r8, r3
    3f70:	d1fa      	bne.n	3f68 <ull_conn_done+0xe40>
							array0[(i+1)*table_size/old_old_repeated_size-1] = -1;
    3f72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3f76:	f840 302b 	str.w	r3, [r0, fp, lsl #2]
							j-= 2;
    3f7a:	441a      	add	r2, r3
    3f7c:	f7ff ba1e 	b.w	33bc <ull_conn_done+0x294>
			conn->llcp_terminate.reason_peer =
    3f80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3f82:	213d      	movs	r1, #61	; 0x3d
    3f84:	f883 1107 	strb.w	r1, [r3, #263]	; 0x107
		conn_cleanup(conn, reason_peer);
    3f88:	6e38      	ldr	r0, [r7, #96]	; 0x60
    3f8a:	f013 f9e9 	bl	17360 <conn_cleanup>
}
    3f8e:	37bc      	adds	r7, #188	; 0xbc
    3f90:	46bd      	mov	sp, r7
    3f92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (lll->enc_rx || conn->llcp_enc.pause_rx) {
    3f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3f98:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
    3f9c:	0718      	lsls	r0, r3, #28
    3f9e:	d405      	bmi.n	3fac <ull_conn_done+0xe84>
    3fa0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3fa2:	f893 312a 	ldrb.w	r3, [r3, #298]	; 0x12a
    3fa6:	07d9      	lsls	r1, r3, #31
    3fa8:	f57f ac8f 	bpl.w	38ca <ull_conn_done+0x7a2>
						(lll->latency + 6)) ?
    3fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
				appto_reload_new = (conn->apto_reload >
    3fae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
						(lll->latency + 6)) ?
    3fb0:	8c1b      	ldrh	r3, [r3, #32]
				appto_reload_new = (conn->apto_reload >
    3fb2:	f8b2 20b6 	ldrh.w	r2, [r2, #182]	; 0xb6
				if (conn->appto_reload != appto_reload_new) {
    3fb6:	6e38      	ldr	r0, [r7, #96]	; 0x60
						(lll->latency + 6)) ?
    3fb8:	1d99      	adds	r1, r3, #6
				appto_reload_new = (conn->apto_reload >
    3fba:	428a      	cmp	r2, r1
					(conn->apto_reload -
    3fbc:	bfc4      	itt	gt
    3fbe:	1ad3      	subgt	r3, r2, r3
    3fc0:	3b06      	subgt	r3, #6
				if (conn->appto_reload != appto_reload_new) {
    3fc2:	f8b0 10b2 	ldrh.w	r1, [r0, #178]	; 0xb2
				appto_reload_new = (conn->apto_reload >
    3fc6:	bfcc      	ite	gt
    3fc8:	b29b      	uxthgt	r3, r3
    3fca:	4613      	movle	r3, r2
				if (conn->appto_reload != appto_reload_new) {
    3fcc:	4299      	cmp	r1, r3
    3fce:	f000 80cc 	beq.w	416a <ull_conn_done+0x1042>
					conn->appto_reload = appto_reload_new;
    3fd2:	f8a0 30b2 	strh.w	r3, [r0, #178]	; 0xb2
					conn->appto_expire = conn->appto_reload;
    3fd6:	6e39      	ldr	r1, [r7, #96]	; 0x60
    3fd8:	f8a1 30b4 	strh.w	r3, [r1, #180]	; 0xb4
					conn->apto_expire = conn->apto_reload;
    3fdc:	f8a1 20b8 	strh.w	r2, [r1, #184]	; 0xb8
    3fe0:	e473      	b.n	38ca <ull_conn_done+0x7a2>
    3fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3fe4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
	if ((force) || (latency_event != lll->latency_event)) {
    3fe6:	2c00      	cmp	r4, #0
    3fe8:	f000 8541 	beq.w	4a6e <ull_conn_done+0x1946>
		lazy = lll->latency_event + 1;
    3fec:	3301      	adds	r3, #1
    3fee:	b299      	uxth	r1, r3
	if ((ticks_drift_plus != 0U) || (ticks_drift_minus != 0U) ||
    3ff0:	e715      	b.n	3e1e <ull_conn_done+0xcf6>
		else if(!scheduled_handles[conn_handle] && !unscheduled_handles[conn_handle] && handle_cnt[conn_handle] > 0 && 2048%(conn->lll.interval) != 0){
    3ff2:	4a17      	ldr	r2, [pc, #92]	; (4050 <ull_conn_done+0xf28>)
    3ff4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    3ff6:	5cd3      	ldrb	r3, [r2, r3]
    3ff8:	2b00      	cmp	r3, #0
    3ffa:	f47f ac46 	bne.w	388a <ull_conn_done+0x762>
			need_update_dummy = false;
    3ffe:	4915      	ldr	r1, [pc, #84]	; (4054 <ull_conn_done+0xf2c>)
    4000:	4c15      	ldr	r4, [pc, #84]	; (4058 <ull_conn_done+0xf30>)
    4002:	700b      	strb	r3, [r1, #0]
			unscheduled_handles[conn_handle] = true;
    4004:	6db9      	ldr	r1, [r7, #88]	; 0x58
    4006:	6826      	ldr	r6, [r4, #0]
    4008:	2301      	movs	r3, #1
    400a:	5453      	strb	r3, [r2, r1]
		if( start || (!need_update_dummy && handle_cnt[max_conn_index] > 1 && handle_cnt[max_conn_index] % M_num == 0  && conn_handle == max_conn_index && anchor_points[conn_handle] != 0 && scheduled_handles[conn_handle])){
    400c:	e51a      	b.n	3a44 <ull_conn_done+0x91c>
    400e:	bf00      	nop
    4010:	200032cc 	.word	0x200032cc
    4014:	200076f4 	.word	0x200076f4
    4018:	3ff40000 	.word	0x3ff40000
    401c:	20007700 	.word	0x20007700
    4020:	20006994 	.word	0x20006994
    4024:	20009c3e 	.word	0x20009c3e
    4028:	00014ee5 	.word	0x00014ee5
    402c:	00024438 	.word	0x00024438
    4030:	000245bc 	.word	0x000245bc
    4034:	00023ff4 	.word	0x00023ff4
    4038:	2000048c 	.word	0x2000048c
    403c:	20001ad8 	.word	0x20001ad8
    4040:	200032c4 	.word	0x200032c4
    4044:	3b9aca00 	.word	0x3b9aca00
    4048:	200032c8 	.word	0x200032c8
    404c:	200032d4 	.word	0x200032d4
    4050:	20008734 	.word	0x20008734
    4054:	20009c3f 	.word	0x20009c3f
    4058:	200005ec 	.word	0x200005ec
				for(int i =0; i <CONFIG_BT_MAX_CONN; i ++){
    405c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
    4060:	f10b 0b01 	add.w	fp, fp, #1
    4064:	3304      	adds	r3, #4
    4066:	f1bb 0f04 	cmp.w	fp, #4
    406a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    406e:	f47f ad3a 	bne.w	3ae6 <ull_conn_done+0x9be>
    4072:	f8d7 906c 	ldr.w	r9, [r7, #108]	; 0x6c
				for(int i =1; i<table_size; i ++)
    4076:	f1b9 0f01 	cmp.w	r9, #1
    407a:	f109 31ff 	add.w	r1, r9, #4294967295	; 0xffffffff
    407e:	f340 84de 	ble.w	4a3e <ull_conn_done+0x1916>
    4082:	4b9f      	ldr	r3, [pc, #636]	; (4300 <ull_conn_done+0x11d8>)
    4084:	4a9f      	ldr	r2, [pc, #636]	; (4304 <ull_conn_done+0x11dc>)
						if(array0[i-1] != -1) array1[i] = array1[i-1] + avg_conn_evt_length[array0[i-1]];
    4086:	4ea0      	ldr	r6, [pc, #640]	; (4308 <ull_conn_done+0x11e0>)
    4088:	1f18      	subs	r0, r3, #4
    408a:	eb00 0089 	add.w	r0, r0, r9, lsl #2
					if(array0[i] == -1)
    408e:	f853 4f04 	ldr.w	r4, [r3, #4]!
    4092:	3401      	adds	r4, #1
    4094:	d10a      	bne.n	40ac <ull_conn_done+0xf84>
						if(array0[i-1] != -1) array1[i] = array1[i-1] + avg_conn_evt_length[array0[i-1]];
    4096:	f853 4c04 	ldr.w	r4, [r3, #-4]
    409a:	6815      	ldr	r5, [r2, #0]
    409c:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    40a0:	bf17      	itett	ne
    40a2:	f856 4024 	ldrne.w	r4, [r6, r4, lsl #2]
						else array1[i] = array1[i-1];
    40a6:	6055      	streq	r5, [r2, #4]
						if(array0[i-1] != -1) array1[i] = array1[i-1] + avg_conn_evt_length[array0[i-1]];
    40a8:	1964      	addne	r4, r4, r5
    40aa:	6054      	strne	r4, [r2, #4]
				for(int i =1; i<table_size; i ++)
    40ac:	4298      	cmp	r0, r3
    40ae:	f102 0204 	add.w	r2, r2, #4
    40b2:	d1ec      	bne.n	408e <ull_conn_done+0xf66>
    40b4:	4893      	ldr	r0, [pc, #588]	; (4304 <ull_conn_done+0x11dc>)
    40b6:	4a95      	ldr	r2, [pc, #596]	; (430c <ull_conn_done+0x11e4>)
						for(int k = standard_anchor_point; k < standard_anchor_point +table_size && j <max_conn_int/conn_int_table[i]; k ++){
    40b8:	2300      	movs	r3, #0
				for (int i =0; i <table_size; i ++){
    40ba:	3301      	adds	r3, #1
					temp_array1[i] = array1[i];
    40bc:	f850 4b04 	ldr.w	r4, [r0], #4
    40c0:	f842 4b04 	str.w	r4, [r2], #4
				for (int i =0; i <table_size; i ++){
    40c4:	4599      	cmp	r9, r3
    40c6:	dcf8      	bgt.n	40ba <ull_conn_done+0xf92>
				for(int i = 0; i < table_size-1; i ++){
    40c8:	2900      	cmp	r1, #0
    40ca:	f340 812a 	ble.w	4322 <ull_conn_done+0x11fa>
    40ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    40d0:	4b8b      	ldr	r3, [pc, #556]	; (4300 <ull_conn_done+0x11d8>)
						array1[i+1] =array1[i] + avg_conn_evt_length[array0[i]];
    40d2:	4e8d      	ldr	r6, [pc, #564]	; (4308 <ull_conn_done+0x11e0>)
    40d4:	4d8e      	ldr	r5, [pc, #568]	; (4310 <ull_conn_done+0x11e8>)
    40d6:	f109 4e80 	add.w	lr, r9, #1073741824	; 0x40000000
    40da:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
    40de:	eb03 0c8e 	add.w	ip, r3, lr, lsl #2
				for(int i = 0; i < table_size-1; i ++){
    40e2:	2400      	movs	r4, #0
    40e4:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
						array0[i+1] = -1;
    40e8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    40ec:	4693      	mov	fp, r2
    40ee:	e002      	b.n	40f6 <ull_conn_done+0xfce>
				for(int i = 0; i < table_size-1; i ++){
    40f0:	428c      	cmp	r4, r1
    40f2:	f280 8113 	bge.w	431c <ull_conn_done+0x11f4>
					if(array0[i] != -1 && array0[i+1] != -1 ){
    40f6:	f853 2b04 	ldr.w	r2, [r3], #4
    40fa:	3201      	adds	r2, #1
    40fc:	f104 0401 	add.w	r4, r4, #1
    4100:	d0f6      	beq.n	40f0 <ull_conn_done+0xfc8>
    4102:	681a      	ldr	r2, [r3, #0]
    4104:	3201      	adds	r2, #1
    4106:	d0f3      	beq.n	40f0 <ull_conn_done+0xfc8>
						for(int k= table_size-1; k > i+1; k --){
    4108:	428c      	cmp	r4, r1
    410a:	da0b      	bge.n	4124 <ull_conn_done+0xffc>
    410c:	46f2      	mov	sl, lr
    410e:	4660      	mov	r0, ip
							array0[k] = array0[k-1];
    4110:	f850 2c04 	ldr.w	r2, [r0, #-4]
    4114:	f840 2904 	str.w	r2, [r0], #-4
							array1[k] = array1[k-1];
    4118:	f85a 2c04 	ldr.w	r2, [sl, #-4]
    411c:	f84a 2904 	str.w	r2, [sl], #-4
						for(int k= table_size-1; k > i+1; k --){
    4120:	4283      	cmp	r3, r0
    4122:	d1f5      	bne.n	4110 <ull_conn_done+0xfe8>
						array1[i+1] =array1[i] + avg_conn_evt_length[array0[i]];
    4124:	f853 0c04 	ldr.w	r0, [r3, #-4]
    4128:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
    412c:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
						array0[i+1] = -1;
    4130:	f8c3 8000 	str.w	r8, [r3]
						array1[i+1] =array1[i] + avg_conn_evt_length[array0[i]];
    4134:	4402      	add	r2, r0
    4136:	f84b 2024 	str.w	r2, [fp, r4, lsl #2]
    413a:	e7d9      	b.n	40f0 <ull_conn_done+0xfc8>
								if(k>=table_size) array1[k%table_size] = array1[k%table_size] - max_conn_int*1.25;
    413c:	f7fc f922 	bl	384 <__aeabi_ui2d>
    4140:	4680      	mov	r8, r0
    4142:	6eb8      	ldr	r0, [r7, #104]	; 0x68
    4144:	4689      	mov	r9, r1
    4146:	f7fc f92d 	bl	3a4 <__aeabi_i2d>
    414a:	4b72      	ldr	r3, [pc, #456]	; (4314 <ull_conn_done+0x11ec>)
    414c:	2200      	movs	r2, #0
    414e:	f7fc f993 	bl	478 <__aeabi_dmul>
    4152:	460b      	mov	r3, r1
    4154:	4602      	mov	r2, r0
    4156:	4649      	mov	r1, r9
    4158:	4640      	mov	r0, r8
    415a:	f7fb ffd5 	bl	108 <__aeabi_dsub>
    415e:	f7fc fc4d 	bl	9fc <__aeabi_d2uiz>
    4162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    4164:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
    4168:	e57c      	b.n	3c64 <ull_conn_done+0xb3c>
				if (conn->apto_expire == 0U) {
    416a:	6e39      	ldr	r1, [r7, #96]	; 0x60
    416c:	f8b1 10b8 	ldrh.w	r1, [r1, #184]	; 0xb8
    4170:	2900      	cmp	r1, #0
    4172:	f47f abaa 	bne.w	38ca <ull_conn_done+0x7a2>
    4176:	e72e      	b.n	3fd6 <ull_conn_done+0xeae>
				uint32_t temp_temp_array[table_size];
    4178:	00a2      	lsls	r2, r4, #2
    417a:	1dd3      	adds	r3, r2, #7
    417c:	f023 0107 	bic.w	r1, r3, #7
			if(disconnected_handle == first_handle){
    4180:	f8c7 d050 	str.w	sp, [r7, #80]	; 0x50
				for(int i = 0; i<table_size; i ++) temp_temp_array[i] = array0[i];
    4184:	2c00      	cmp	r4, #0
				uint32_t temp_temp_array[table_size];
    4186:	ebad 0d01 	sub.w	sp, sp, r1
    418a:	66bb      	str	r3, [r7, #104]	; 0x68
    418c:	ab08      	add	r3, sp, #32
				for(int i = 0; i<table_size; i ++) temp_temp_array[i] = array0[i];
    418e:	f340 8448 	ble.w	4a22 <ull_conn_done+0x18fa>
    4192:	495b      	ldr	r1, [pc, #364]	; (4300 <ull_conn_done+0x11d8>)
    4194:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
    4198:	3a04      	subs	r2, #4
    419a:	1898      	adds	r0, r3, r2
    419c:	3b04      	subs	r3, #4
    419e:	460a      	mov	r2, r1
    41a0:	f852 1b04 	ldr.w	r1, [r2], #4
    41a4:	f843 1f04 	str.w	r1, [r3, #4]!
    41a8:	4283      	cmp	r3, r0
    41aa:	d1f9      	bne.n	41a0 <ull_conn_done+0x1078>
				for(int i =1; i < table_size; i ++){
    41ac:	2c01      	cmp	r4, #1
				int old_old_repeated_size = (old_max_conn_int/disconnected_interval);
    41ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
    41b2:	6fba      	ldr	r2, [r7, #120]	; 0x78
    41b4:	fb93 f3f2 	sdiv	r3, r3, r2
				for(int i =1; i < table_size; i ++){
    41b8:	f000 8447 	beq.w	4a4a <ull_conn_done+0x1922>
					temp_i = i/(table_size/old_old_repeated_size);
    41bc:	fb94 f3f3 	sdiv	r3, r4, r3
					uint32_t old_gap = array1[i]-array1[0]-minus_gap;
    41c0:	4a50      	ldr	r2, [pc, #320]	; (4304 <ull_conn_done+0x11dc>)
					uint32_t minus_gap = disconnected_interval*temp_i*1.25;
    41c2:	f8c7 b048 	str.w	fp, [r7, #72]	; 0x48
				int new_first_handle_index=-1;
    41c6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
					uint32_t old_gap = array1[i]-array1[0]-minus_gap;
    41ca:	6811      	ldr	r1, [r2, #0]
					uint32_t minus_gap = disconnected_interval*temp_i*1.25;
    41cc:	677d      	str	r5, [r7, #116]	; 0x74
    41ce:	4692      	mov	sl, r2
				uint32_t new_gap = -1;
    41d0:	462a      	mov	r2, r5
					uint32_t minus_gap = disconnected_interval*temp_i*1.25;
    41d2:	673d      	str	r5, [r7, #112]	; 0x70
				for(int i =1; i < table_size; i ++){
    41d4:	f04f 0901 	mov.w	r9, #1
					uint32_t minus_gap = disconnected_interval*temp_i*1.25;
    41d8:	460e      	mov	r6, r1
    41da:	461d      	mov	r5, r3
    41dc:	4693      	mov	fp, r2
    41de:	6fba      	ldr	r2, [r7, #120]	; 0x78
					uint32_t old_gap = array1[i]-array1[0]-minus_gap;
    41e0:	f85a 3f04 	ldr.w	r3, [sl, #4]!
					temp_i = i/(table_size/old_old_repeated_size);
    41e4:	fb99 f0f5 	sdiv	r0, r9, r5
					uint32_t minus_gap = disconnected_interval*temp_i*1.25;
    41e8:	fb02 f000 	mul.w	r0, r2, r0
					uint32_t old_gap = array1[i]-array1[0]-minus_gap;
    41ec:	eba3 0806 	sub.w	r8, r3, r6
					uint32_t minus_gap = disconnected_interval*temp_i*1.25;
    41f0:	f7fc f8d8 	bl	3a4 <__aeabi_i2d>
    41f4:	4b47      	ldr	r3, [pc, #284]	; (4314 <ull_conn_done+0x11ec>)
    41f6:	2200      	movs	r2, #0
    41f8:	f7fc f93e 	bl	478 <__aeabi_dmul>
    41fc:	f7fc fbfe 	bl	9fc <__aeabi_d2uiz>
					uint32_t old_gap = array1[i]-array1[0]-minus_gap;
    4200:	eba8 0800 	sub.w	r8, r8, r0
					if(old_gap<new_gap && array0[i] < CONFIG_BT_MAX_CONN){
    4204:	45d8      	cmp	r8, fp
    4206:	d209      	bcs.n	421c <ull_conn_done+0x10f4>
    4208:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    420c:	f853 3029 	ldr.w	r3, [r3, r9, lsl #2]
    4210:	2b03      	cmp	r3, #3
    4212:	d803      	bhi.n	421c <ull_conn_done+0x10f4>
						new_first_handle = array0[i];
    4214:	677b      	str	r3, [r7, #116]	; 0x74
    4216:	46c3      	mov	fp, r8
    4218:	f8c7 9070 	str.w	r9, [r7, #112]	; 0x70
				for(int i =1; i < table_size; i ++){
    421c:	f109 0901 	add.w	r9, r9, #1
    4220:	45a1      	cmp	r9, r4
    4222:	d1dc      	bne.n	41de <ull_conn_done+0x10b6>
				int temp_temp_temp_array[table_size];	
    4224:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    4226:	f8d7 b048 	ldr.w	fp, [r7, #72]	; 0x48
				int new_repeated_size = (old_max_conn_int/conn_int_table[new_first_handle]);					
    422a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
				int temp_temp_temp_array[table_size];	
    422e:	f023 0307 	bic.w	r3, r3, #7
    4232:	e9d7 561c 	ldrd	r5, r6, [r7, #112]	; 0x70
    4236:	ebad 0d03 	sub.w	sp, sp, r3
				int new_repeated_size = (old_max_conn_int/conn_int_table[new_first_handle]);					
    423a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
				int temp_temp_temp_array[table_size];	
    423c:	a908      	add	r1, sp, #32
				int new_repeated_size = (old_max_conn_int/conn_int_table[new_first_handle]);					
    423e:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
    4242:	fbb2 faf3 	udiv	sl, r2, r3
				for(int i = 0; i <table_size; i ++) {	
    4246:	4a2e      	ldr	r2, [pc, #184]	; (4300 <ull_conn_done+0x11d8>)
    4248:	1f08      	subs	r0, r1, #4
				int new_first_handle = -1;
    424a:	2300      	movs	r3, #0
					array0[i] = -1;
    424c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    4250:	468e      	mov	lr, r1
				for(int i = 0; i <table_size; i ++) {	
    4252:	3301      	adds	r3, #1
					temp_temp_temp_array[i] = array0[i];
    4254:	6811      	ldr	r1, [r2, #0]
    4256:	f840 1f04 	str.w	r1, [r0, #4]!
				for(int i = 0; i <table_size; i ++) {	
    425a:	42a3      	cmp	r3, r4
					array0[i] = -1;
    425c:	f842 cb04 	str.w	ip, [r2], #4
				for(int i = 0; i <table_size; i ++) {	
    4260:	dbf7      	blt.n	4252 <ull_conn_done+0x112a>
    4262:	4671      	mov	r1, lr
				for(int i = 0; i <new_repeated_size; i ++){
    4264:	f1ba 0f00 	cmp.w	sl, #0
    4268:	dd3e      	ble.n	42e8 <ull_conn_done+0x11c0>
    426a:	fb94 f0fa 	sdiv	r0, r4, sl
    426e:	4b24      	ldr	r3, [pc, #144]	; (4300 <ull_conn_done+0x11d8>)
    4270:	f8c7 b080 	str.w	fp, [r7, #128]	; 0x80
    4274:	f04f 0e00 	mov.w	lr, #0
    4278:	46f0      	mov	r8, lr
    427a:	4699      	mov	r9, r3
					while( temp_temp_temp_array[temp_j%table_size] != new_first_handle) temp_j ++;
    427c:	fb95 f3f4 	sdiv	r3, r5, r4
    4280:	fb04 5313 	mls	r3, r4, r3, r5
    4284:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    4288:	429e      	cmp	r6, r3
    428a:	d008      	beq.n	429e <ull_conn_done+0x1176>
    428c:	3501      	adds	r5, #1
    428e:	fb95 f3f4 	sdiv	r3, r5, r4
    4292:	fb04 5313 	mls	r3, r4, r3, r5
    4296:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    429a:	42b3      	cmp	r3, r6
    429c:	d1f6      	bne.n	428c <ull_conn_done+0x1164>
					array0[i*table_size/new_repeated_size] = new_first_handle;
    429e:	fb9e fcfa 	sdiv	ip, lr, sl
					for(int j = 1; j < table_size/new_repeated_size; j ++){
    42a2:	2801      	cmp	r0, #1
					array0[i*table_size/new_repeated_size] = new_first_handle;
    42a4:	f849 602c 	str.w	r6, [r9, ip, lsl #2]
					for(int j = 1; j < table_size/new_repeated_size; j ++){
    42a8:	bfc8      	it	gt
    42aa:	2301      	movgt	r3, #1
    42ac:	dd13      	ble.n	42d6 <ull_conn_done+0x11ae>
						if(temp_temp_temp_array[(temp_j+j)%table_size] == new_first_handle){
    42ae:	eb03 0b05 	add.w	fp, r3, r5
    42b2:	fb9b f2f4 	sdiv	r2, fp, r4
    42b6:	fb04 b212 	mls	r2, r4, r2, fp
							array0[i*table_size/new_repeated_size+j] = temp_temp_temp_array[(temp_j+j)%table_size];
    42ba:	eb0c 0b03 	add.w	fp, ip, r3
						if(temp_temp_temp_array[(temp_j+j)%table_size] == new_first_handle){
    42be:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    42c2:	42b2      	cmp	r2, r6
    42c4:	bf08      	it	eq
    42c6:	4603      	moveq	r3, r0
					for(int j = 1; j < table_size/new_repeated_size; j ++){
    42c8:	f103 0301 	add.w	r3, r3, #1
							array0[i*table_size/new_repeated_size+j] = temp_temp_temp_array[(temp_j+j)%table_size];
    42cc:	bf18      	it	ne
    42ce:	f849 202b 	strne.w	r2, [r9, fp, lsl #2]
					for(int j = 1; j < table_size/new_repeated_size; j ++){
    42d2:	4283      	cmp	r3, r0
    42d4:	dbeb      	blt.n	42ae <ull_conn_done+0x1186>
				for(int i = 0; i <new_repeated_size; i ++){
    42d6:	f108 0801 	add.w	r8, r8, #1
    42da:	45d0      	cmp	r8, sl
					temp_j ++;
    42dc:	f105 0501 	add.w	r5, r5, #1
				for(int i = 0; i <new_repeated_size; i ++){
    42e0:	44a6      	add	lr, r4
    42e2:	d1cb      	bne.n	427c <ull_conn_done+0x1154>
    42e4:	f8d7 b080 	ldr.w	fp, [r7, #128]	; 0x80
				first_handle = new_first_handle;
    42e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    42ea:	601e      	str	r6, [r3, #0]
    42ec:	681d      	ldr	r5, [r3, #0]
    42ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    42f0:	f8d7 d050 	ldr.w	sp, [r7, #80]	; 0x50
    42f4:	681c      	ldr	r4, [r3, #0]
    42f6:	4b08      	ldr	r3, [pc, #32]	; (4318 <ull_conn_done+0x11f0>)
    42f8:	f8d3 9000 	ldr.w	r9, [r3]
    42fc:	f7fe bff3 	b.w	32e6 <ull_conn_done+0x1be>
    4300:	200032dc 	.word	0x200032dc
    4304:	200042dc 	.word	0x200042dc
    4308:	200052ec 	.word	0x200052ec
    430c:	20007710 	.word	0x20007710
    4310:	200042d8 	.word	0x200042d8
    4314:	3ff40000 	.word	0x3ff40000
    4318:	200069b4 	.word	0x200069b4
				for (int i =0; i <table_size; i ++){
    431c:	f1b9 0f00 	cmp.w	r9, #0
    4320:	dd09      	ble.n	4336 <ull_conn_done+0x120e>
    4322:	499c      	ldr	r1, [pc, #624]	; (4594 <ull_conn_done+0x146c>)
    4324:	4a9c      	ldr	r2, [pc, #624]	; (4598 <ull_conn_done+0x1470>)
						for(int k= table_size-1; k > i+1; k --){
    4326:	2300      	movs	r3, #0
				for (int i =0; i <table_size; i ++){
    4328:	3301      	adds	r3, #1
					temp_array1[i] = array1[i];
    432a:	f851 0b04 	ldr.w	r0, [r1], #4
    432e:	f842 0b04 	str.w	r0, [r2], #4
				for (int i =0; i <table_size; i ++){
    4332:	4599      	cmp	r9, r3
    4334:	dcf8      	bgt.n	4328 <ull_conn_done+0x1200>
				for(int need_cell_cnt = 1; need_cell_cnt< 2048/max_conn_int; need_cell_cnt *= 2){
    4336:	6eba      	ldr	r2, [r7, #104]	; 0x68
    4338:	f44f 6300 	mov.w	r3, #2048	; 0x800
    433c:	fb93 f3f2 	sdiv	r3, r3, r2
    4340:	2b01      	cmp	r3, #1
    4342:	4b96      	ldr	r3, [pc, #600]	; (459c <ull_conn_done+0x1474>)
    4344:	61fb      	str	r3, [r7, #28]
    4346:	f340 8369 	ble.w	4a1c <ull_conn_done+0x18f4>
    434a:	4a95      	ldr	r2, [pc, #596]	; (45a0 <ull_conn_done+0x1478>)
    434c:	643a      	str	r2, [r7, #64]	; 0x40
    434e:	4a95      	ldr	r2, [pc, #596]	; (45a4 <ull_conn_done+0x147c>)
    4350:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
    4354:	647b      	str	r3, [r7, #68]	; 0x44
				int need_cell_cnt_index = 0;
    4356:	2200      	movs	r2, #0
				for(int need_cell_cnt = 1; need_cell_cnt< 2048/max_conn_int; need_cell_cnt *= 2){
    4358:	2301      	movs	r3, #1
				int need_cell_cnt_index = 0;
    435a:	63ba      	str	r2, [r7, #56]	; 0x38
				for(int need_cell_cnt = 1; need_cell_cnt< 2048/max_conn_int; need_cell_cnt *= 2){
    435c:	667b      	str	r3, [r7, #100]	; 0x64
					while(array0[i]!=-1){
    435e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    4362:	681b      	ldr	r3, [r3, #0]
    4364:	3301      	adds	r3, #1
					int i = 0;
    4366:	bf08      	it	eq
    4368:	2500      	moveq	r5, #0
					while(array0[i]!=-1){
    436a:	d007      	beq.n	437c <ull_conn_done+0x1254>
    436c:	4b8d      	ldr	r3, [pc, #564]	; (45a4 <ull_conn_done+0x147c>)
					int i = 0;
    436e:	2500      	movs	r5, #0
					while(array0[i]!=-1){
    4370:	f853 2f04 	ldr.w	r2, [r3, #4]!
    4374:	3201      	adds	r2, #1
						i++;
    4376:	f105 0501 	add.w	r5, r5, #1
					while(array0[i]!=-1){
    437a:	d1f9      	bne.n	4370 <ull_conn_done+0x1248>
					uint32_t temp_temp_max_empty_cell_size[table_size];
    437c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    437e:	f8c7 d030 	str.w	sp, [r7, #48]	; 0x30
    4382:	681e      	ldr	r6, [r3, #0]
    4384:	00b3      	lsls	r3, r6, #2
    4386:	3307      	adds	r3, #7
    4388:	f023 0307 	bic.w	r3, r3, #7
    438c:	ebad 0d03 	sub.w	sp, sp, r3
					for(int j = 0; j <table_size; j ++) temp_temp_max_empty_cell_size[j] = -1;
    4390:	2e00      	cmp	r6, #0
					uint32_t temp_temp_max_empty_cell_size[table_size];
    4392:	f106 33ff 	add.w	r3, r6, #4294967295	; 0xffffffff
    4396:	ac08      	add	r4, sp, #32
    4398:	63fb      	str	r3, [r7, #60]	; 0x3c
					for(int j = 0; j <table_size; j ++) temp_temp_max_empty_cell_size[j] = -1;
    439a:	f340 8192 	ble.w	46c2 <ull_conn_done+0x159a>
    439e:	1f23      	subs	r3, r4, #4
    43a0:	623b      	str	r3, [r7, #32]
    43a2:	461a      	mov	r2, r3
    43a4:	2300      	movs	r3, #0
    43a6:	3301      	adds	r3, #1
    43a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    43ac:	429e      	cmp	r6, r3
    43ae:	f842 1f04 	str.w	r1, [r2, #4]!
    43b2:	d1f8      	bne.n	43a6 <ull_conn_done+0x127e>
					for(; i <table_size; i ++){
    43b4:	6eb8      	ldr	r0, [r7, #104]	; 0x68
    43b6:	f7fb fff5 	bl	3a4 <__aeabi_i2d>
    43ba:	4b7b      	ldr	r3, [pc, #492]	; (45a8 <ull_conn_done+0x1480>)
    43bc:	2200      	movs	r2, #0
    43be:	f7fc f85b 	bl	478 <__aeabi_dmul>
    43c2:	42ae      	cmp	r6, r5
    43c4:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58
    43c8:	f340 80f2 	ble.w	45b0 <ull_conn_done+0x1488>
    43cc:	00ab      	lsls	r3, r5, #2
    43ce:	1f1a      	subs	r2, r3, #4
    43d0:	18e3      	adds	r3, r4, r3
								temp_temp_max_empty_cell_size[i] = temp_array1[0] +max_conn_int*1.25 - temp_array1[i];
    43d2:	4971      	ldr	r1, [pc, #452]	; (4598 <ull_conn_done+0x1470>)
    43d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    43d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    43dc:	6809      	ldr	r1, [r1, #0]
    43de:	6379      	str	r1, [r7, #52]	; 0x34
    43e0:	4413      	add	r3, r2
    43e2:	66fb      	str	r3, [r7, #108]	; 0x6c
    43e4:	f8c7 5088 	str.w	r5, [r7, #136]	; 0x88
    43e8:	e00f      	b.n	440a <ull_conn_done+0x12e2>
							temp_temp_max_empty_cell_size[i] = -1;
    43ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
    43ee:	461a      	mov	r2, r3
    43f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    43f4:	6013      	str	r3, [r2, #0]
					for(; i <table_size; i ++){
    43f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
    43fa:	3304      	adds	r3, #4
    43fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    4400:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
    4404:	429e      	cmp	r6, r3
    4406:	f340 80d3 	ble.w	45b0 <ull_conn_done+0x1488>
						if(array0[i] == -1){
    440a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    440c:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
    4410:	f852 3f04 	ldr.w	r3, [r2, #4]!
    4414:	66fa      	str	r2, [r7, #108]	; 0x6c
    4416:	3301      	adds	r3, #1
    4418:	460a      	mov	r2, r1
    441a:	f101 0101 	add.w	r1, r1, #1
    441e:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
    4422:	d1e2      	bne.n	43ea <ull_conn_done+0x12c2>
							if(i==table_size-1){
    4424:	4b61      	ldr	r3, [pc, #388]	; (45ac <ull_conn_done+0x1484>)
    4426:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
    442a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    442c:	4293      	cmp	r3, r2
    442e:	f000 8128 	beq.w	4682 <ull_conn_done+0x155a>
								temp_temp_max_empty_cell_size[i] = temp_array1[i+1] - temp_array1[i];
    4432:	4b59      	ldr	r3, [pc, #356]	; (4598 <ull_conn_done+0x1470>)
    4434:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
    4438:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    443c:	1b00      	subs	r0, r0, r4
							for(int j = 1; j <need_cell_cnt; j ++){
    443e:	6e7d      	ldr	r5, [r7, #100]	; 0x64
    4440:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
    4444:	2d01      	cmp	r5, #1
    4446:	6018      	str	r0, [r3, #0]
    4448:	d0d5      	beq.n	43f6 <ull_conn_done+0x12ce>
								int k =temp_array1[i]+j*max_conn_int*1.25/need_cell_cnt;
    444a:	4620      	mov	r0, r4
    444c:	f7fb ff9a 	bl	384 <__aeabi_ui2d>
    4450:	4602      	mov	r2, r0
    4452:	460b      	mov	r3, r1
								while(k > temp_array1[0] + max_conn_int*1.25) k -= max_conn_int*1.25;
    4454:	6b78      	ldr	r0, [r7, #52]	; 0x34
								int k =temp_array1[i]+j*max_conn_int*1.25/need_cell_cnt;
    4456:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
								while(k > temp_array1[0] + max_conn_int*1.25) k -= max_conn_int*1.25;
    445a:	f7fb ff93 	bl	384 <__aeabi_ui2d>
    445e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
    4462:	f7fb fe53 	bl	10c <__adddf3>
    4466:	4682      	mov	sl, r0
    4468:	4628      	mov	r0, r5
    446a:	468b      	mov	fp, r1
    446c:	f7fb ff9a 	bl	3a4 <__aeabi_i2d>
    4470:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
    4474:	2301      	movs	r3, #1
    4476:	6ebd      	ldr	r5, [r7, #104]	; 0x68
    4478:	67bb      	str	r3, [r7, #120]	; 0x78
								int k =temp_array1[i]+j*max_conn_int*1.25/need_cell_cnt;
    447a:	4628      	mov	r0, r5
    447c:	f7fb ff92 	bl	3a4 <__aeabi_i2d>
    4480:	4b49      	ldr	r3, [pc, #292]	; (45a8 <ull_conn_done+0x1480>)
    4482:	2200      	movs	r2, #0
    4484:	f7fb fff8 	bl	478 <__aeabi_dmul>
    4488:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
    448c:	f7fc f91e 	bl	6cc <__aeabi_ddiv>
    4490:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
    4494:	f7fb fe3a 	bl	10c <__adddf3>
    4498:	f7fc fa88 	bl	9ac <__aeabi_d2iz>
    449c:	4604      	mov	r4, r0
								while(k > temp_array1[0] + max_conn_int*1.25) k -= max_conn_int*1.25;
    449e:	f7fb ff81 	bl	3a4 <__aeabi_i2d>
    44a2:	4652      	mov	r2, sl
    44a4:	465b      	mov	r3, fp
    44a6:	4680      	mov	r8, r0
    44a8:	4689      	mov	r9, r1
    44aa:	f7fc fa75 	bl	998 <__aeabi_dcmpgt>
    44ae:	b1c0      	cbz	r0, 44e2 <ull_conn_done+0x13ba>
    44b0:	e9c7 561c 	strd	r5, r6, [r7, #112]	; 0x70
    44b4:	e9d7 5616 	ldrd	r5, r6, [r7, #88]	; 0x58
    44b8:	462a      	mov	r2, r5
    44ba:	4633      	mov	r3, r6
    44bc:	4640      	mov	r0, r8
    44be:	4649      	mov	r1, r9
    44c0:	f7fb fe22 	bl	108 <__aeabi_dsub>
    44c4:	f7fc fa72 	bl	9ac <__aeabi_d2iz>
    44c8:	4604      	mov	r4, r0
    44ca:	f7fb ff6b 	bl	3a4 <__aeabi_i2d>
    44ce:	4652      	mov	r2, sl
    44d0:	465b      	mov	r3, fp
    44d2:	4680      	mov	r8, r0
    44d4:	4689      	mov	r9, r1
    44d6:	f7fc fa5f 	bl	998 <__aeabi_dcmpgt>
    44da:	2800      	cmp	r0, #0
    44dc:	d1ec      	bne.n	44b8 <ull_conn_done+0x1390>
    44de:	e9d7 561c 	ldrd	r5, r6, [r7, #112]	; 0x70
    44e2:	4a2d      	ldr	r2, [pc, #180]	; (4598 <ull_conn_done+0x1470>)
								int k_int = 0;
    44e4:	2300      	movs	r3, #0
    44e6:	e001      	b.n	44ec <ull_conn_done+0x13c4>
								while(temp_array1[k_int+1] <= k && k_int+1 < table_size) k_int ++;//1008 add =
    44e8:	42b3      	cmp	r3, r6
    44ea:	da06      	bge.n	44fa <ull_conn_done+0x13d2>
    44ec:	f852 1f04 	ldr.w	r1, [r2, #4]!
    44f0:	42a1      	cmp	r1, r4
    44f2:	4618      	mov	r0, r3
    44f4:	f103 0301 	add.w	r3, r3, #1
    44f8:	d9f6      	bls.n	44e8 <ull_conn_done+0x13c0>
								if(array0[k_int] == -1){	//1008
    44fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    44fe:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    4502:	3301      	adds	r3, #1
    4504:	d00e      	beq.n	4524 <ull_conn_done+0x13fc>
									temp_temp_max_empty_cell_size[i] = -1;
    4506:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
    450a:	461a      	mov	r2, r3
    450c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4510:	6013      	str	r3, [r2, #0]
							for(int j = 1; j <need_cell_cnt; j ++){
    4512:	6eba      	ldr	r2, [r7, #104]	; 0x68
    4514:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    4516:	4415      	add	r5, r2
    4518:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    451a:	3301      	adds	r3, #1
    451c:	4293      	cmp	r3, r2
    451e:	67bb      	str	r3, [r7, #120]	; 0x78
    4520:	d1ab      	bne.n	447a <ull_conn_done+0x1352>
    4522:	e768      	b.n	43f6 <ull_conn_done+0x12ce>
    4524:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    4528:	1c43      	adds	r3, r0, #1
    452a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    452e:	e002      	b.n	4536 <ull_conn_done+0x140e>
									while(array0[k_int+1] == -1 &&k_int+1<table_size) k_int ++;
    4530:	42b3      	cmp	r3, r6
    4532:	da06      	bge.n	4542 <ull_conn_done+0x141a>
    4534:	3301      	adds	r3, #1
    4536:	f852 1b04 	ldr.w	r1, [r2], #4
    453a:	3101      	adds	r1, #1
    453c:	4684      	mov	ip, r0
    453e:	4618      	mov	r0, r3
    4540:	d0f6      	beq.n	4530 <ull_conn_done+0x1408>
									if(array0[k_int] == -1){
    4542:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    4546:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
    454a:	3201      	adds	r2, #1
    454c:	d1e1      	bne.n	4512 <ull_conn_done+0x13ea>
										if(k_int==table_size-1)
    454e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    4550:	4562      	cmp	r2, ip
    4552:	f000 80ab 	beq.w	46ac <ull_conn_done+0x1584>
											temp_size = temp_array1[(k_int+1)]- k;
    4556:	4a10      	ldr	r2, [pc, #64]	; (4598 <ull_conn_done+0x1470>)
    4558:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    455c:	1b1c      	subs	r4, r3, r4
    455e:	46a0      	mov	r8, r4
										if(temp_size < temp_temp_max_empty_cell_size[i] && temp_size<max_conn_int*1.25 &&temp_size>0&& temp_temp_max_empty_cell_size[i]!=-1) temp_temp_max_empty_cell_size[i] = temp_size;
    4560:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
    4564:	f8d3 9000 	ldr.w	r9, [r3]
    4568:	45a1      	cmp	r9, r4
    456a:	d9d2      	bls.n	4512 <ull_conn_done+0x13ea>
    456c:	4640      	mov	r0, r8
    456e:	f7fb ff19 	bl	3a4 <__aeabi_i2d>
    4572:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
    4576:	f7fc f9f1 	bl	95c <__aeabi_dcmplt>
    457a:	2800      	cmp	r0, #0
    457c:	d0c9      	beq.n	4512 <ull_conn_done+0x13ea>
    457e:	f1b8 0f00 	cmp.w	r8, #0
    4582:	ddc6      	ble.n	4512 <ull_conn_done+0x13ea>
    4584:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
    4588:	d0c3      	beq.n	4512 <ull_conn_done+0x13ea>
    458a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
    458e:	601c      	str	r4, [r3, #0]
    4590:	e7bf      	b.n	4512 <ull_conn_done+0x13ea>
    4592:	bf00      	nop
    4594:	200042dc 	.word	0x200042dc
    4598:	20007710 	.word	0x20007710
    459c:	200069b8 	.word	0x200069b8
    45a0:	20008710 	.word	0x20008710
    45a4:	200032dc 	.word	0x200032dc
    45a8:	3ff40000 	.word	0x3ff40000
    45ac:	2000770c 	.word	0x2000770c
					max_empty_cell[need_cell_cnt_index] = -1;
    45b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    45b2:	f8d7 8020 	ldr.w	r8, [r7, #32]
								int k_int = 0;
    45b6:	f8d7 9040 	ldr.w	r9, [r7, #64]	; 0x40
					max_empty_cell[need_cell_cnt_index] = -1;
    45ba:	461a      	mov	r2, r3
    45bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    45c0:	6013      	str	r3, [r2, #0]
					temp_max_empty_cell_size[need_cell_cnt_index] = 0;
    45c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
								int k_int = 0;
    45c4:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
					temp_max_empty_cell_size[need_cell_cnt_index] = 0;
    45c8:	461a      	mov	r2, r3
    45ca:	2300      	movs	r3, #0
    45cc:	6013      	str	r3, [r2, #0]
								int k_int = 0;
    45ce:	2400      	movs	r4, #0
						if((temp_temp_max_empty_cell_size[k] < max_conn_int*1.25 && temp_temp_max_empty_cell_size[k] > 0 && temp_max_empty_cell_size[need_cell_cnt_index] < temp_temp_max_empty_cell_size[k])) {
    45d0:	f858 5f04 	ldr.w	r5, [r8, #4]!
    45d4:	4628      	mov	r0, r5
    45d6:	f7fb fed5 	bl	384 <__aeabi_ui2d>
    45da:	4652      	mov	r2, sl
    45dc:	465b      	mov	r3, fp
    45de:	f7fc f9bd 	bl	95c <__aeabi_dcmplt>
    45e2:	b140      	cbz	r0, 45f6 <ull_conn_done+0x14ce>
    45e4:	b13d      	cbz	r5, 45f6 <ull_conn_done+0x14ce>
    45e6:	f8d9 3000 	ldr.w	r3, [r9]
    45ea:	429d      	cmp	r5, r3
    45ec:	d903      	bls.n	45f6 <ull_conn_done+0x14ce>
							max_empty_cell[need_cell_cnt_index] = k;
    45ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
							temp_max_empty_cell_size[need_cell_cnt_index] = temp_temp_max_empty_cell_size[k];
    45f0:	f8c9 5000 	str.w	r5, [r9]
							max_empty_cell[need_cell_cnt_index] = k;
    45f4:	601c      	str	r4, [r3, #0]
					for(int k = 0; k <table_size; k ++){
    45f6:	3401      	adds	r4, #1
    45f8:	42a6      	cmp	r6, r4
    45fa:	dce9      	bgt.n	45d0 <ull_conn_done+0x14a8>
				for(int need_cell_cnt = 1; need_cell_cnt< 2048/max_conn_int; need_cell_cnt *= 2){
    45fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    45fe:	f8d7 d030 	ldr.w	sp, [r7, #48]	; 0x30
    4602:	005a      	lsls	r2, r3, #1
					need_cell_cnt_index ++;
    4604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
				for(int need_cell_cnt = 1; need_cell_cnt< 2048/max_conn_int; need_cell_cnt *= 2){
    4606:	667a      	str	r2, [r7, #100]	; 0x64
					need_cell_cnt_index ++;
    4608:	3301      	adds	r3, #1
    460a:	63bb      	str	r3, [r7, #56]	; 0x38
				for(int need_cell_cnt = 1; need_cell_cnt< 2048/max_conn_int; need_cell_cnt *= 2){
    460c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    460e:	3304      	adds	r3, #4
    4610:	647b      	str	r3, [r7, #68]	; 0x44
    4612:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4614:	3304      	adds	r3, #4
    4616:	643b      	str	r3, [r7, #64]	; 0x40
    4618:	4bc5      	ldr	r3, [pc, #788]	; (4930 <ull_conn_done+0x1808>)
    461a:	681b      	ldr	r3, [r3, #0]
    461c:	66bb      	str	r3, [r7, #104]	; 0x68
    461e:	4619      	mov	r1, r3
    4620:	f44f 6300 	mov.w	r3, #2048	; 0x800
    4624:	fb93 f3f1 	sdiv	r3, r3, r1
    4628:	4293      	cmp	r3, r2
    462a:	f73f ae98 	bgt.w	435e <ull_conn_done+0x1236>
				for(int i = need_cell_cnt_index; i <need_cell_size; i ++)
    462e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4630:	2b08      	cmp	r3, #8
    4632:	dc0b      	bgt.n	464c <ull_conn_done+0x1524>
    4634:	69fb      	ldr	r3, [r7, #28]
    4636:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    4638:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    463c:	3b04      	subs	r3, #4
					max_empty_cell[i] = -1;
    463e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
				for(int i = need_cell_cnt_index; i <need_cell_size; i ++)
    4642:	3101      	adds	r1, #1
    4644:	2909      	cmp	r1, #9
					max_empty_cell[i] = -1;
    4646:	f843 2f04 	str.w	r2, [r3, #4]!
				for(int i = need_cell_cnt_index; i <need_cell_size; i ++)
    464a:	d1fa      	bne.n	4642 <ull_conn_done+0x151a>
    464c:	48b9      	ldr	r0, [pc, #740]	; (4934 <ull_conn_done+0x180c>)
    464e:	4dba      	ldr	r5, [pc, #744]	; (4938 <ull_conn_done+0x1810>)
    4650:	f100 0624 	add.w	r6, r0, #36	; 0x24
    4654:	f06f 4c40 	mvn.w	ip, #3221225472	; 0xc0000000
					for(int j = max_empty_cell[i]; j >= 0; j --)
    4658:	f850 3f04 	ldr.w	r3, [r0, #4]!
    465c:	2b00      	cmp	r3, #0
    465e:	db0c      	blt.n	467a <ull_conn_done+0x1552>
    4660:	eb03 020c 	add.w	r2, r3, ip
    4664:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
    4668:	eb05 0282 	add.w	r2, r5, r2, lsl #2
						if(temp_array1[j] == temp_array1[max_empty_cell[i]]) max_empty_cell[i] = j;
    466c:	6003      	str	r3, [r0, #0]
					for(int j = max_empty_cell[i]; j >= 0; j --)
    466e:	3b01      	subs	r3, #1
    4670:	d303      	bcc.n	467a <ull_conn_done+0x1552>
    4672:	f852 1904 	ldr.w	r1, [r2], #-4
						if(temp_array1[j] == temp_array1[max_empty_cell[i]]) max_empty_cell[i] = j;
    4676:	428c      	cmp	r4, r1
    4678:	d0f8      	beq.n	466c <ull_conn_done+0x1544>
				for(int i = 0; i<need_cell_size; i ++){
    467a:	4286      	cmp	r6, r0
    467c:	d1ec      	bne.n	4658 <ull_conn_done+0x1530>
    467e:	f7ff b918 	b.w	38b2 <ull_conn_done+0x78a>
								temp_temp_max_empty_cell_size[i] = temp_array1[0] +max_conn_int*1.25 - temp_array1[i];
    4682:	6b78      	ldr	r0, [r7, #52]	; 0x34
    4684:	f7fb fe7e 	bl	384 <__aeabi_ui2d>
    4688:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
    468c:	f7fb fd3e 	bl	10c <__adddf3>
    4690:	4680      	mov	r8, r0
    4692:	4620      	mov	r0, r4
    4694:	4689      	mov	r9, r1
    4696:	f7fb fe75 	bl	384 <__aeabi_ui2d>
    469a:	4602      	mov	r2, r0
    469c:	460b      	mov	r3, r1
    469e:	4640      	mov	r0, r8
    46a0:	4649      	mov	r1, r9
    46a2:	f7fb fd31 	bl	108 <__aeabi_dsub>
    46a6:	f7fc f9a9 	bl	9fc <__aeabi_d2uiz>
    46aa:	e6c8      	b.n	443e <ull_conn_done+0x1316>
											temp_size = temp_array1[0] +max_conn_int*1.25 - k;
    46ac:	4642      	mov	r2, r8
    46ae:	464b      	mov	r3, r9
    46b0:	4650      	mov	r0, sl
    46b2:	4659      	mov	r1, fp
    46b4:	f7fb fd28 	bl	108 <__aeabi_dsub>
    46b8:	f7fc f978 	bl	9ac <__aeabi_d2iz>
    46bc:	4680      	mov	r8, r0
    46be:	4604      	mov	r4, r0
    46c0:	e74e      	b.n	4560 <ull_conn_done+0x1438>
					max_empty_cell[need_cell_cnt_index] = -1;
    46c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    46c4:	461a      	mov	r2, r3
    46c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    46ca:	6013      	str	r3, [r2, #0]
					temp_max_empty_cell_size[need_cell_cnt_index] = 0;
    46cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    46ce:	461a      	mov	r2, r3
    46d0:	2300      	movs	r3, #0
    46d2:	6013      	str	r3, [r2, #0]
					for(int k = 0; k <table_size; k ++){
    46d4:	e792      	b.n	45fc <ull_conn_done+0x14d4>
			conn_cleanup(conn, BT_HCI_ERR_CONN_TIMEOUT);
    46d6:	6e38      	ldr	r0, [r7, #96]	; 0x60
    46d8:	2108      	movs	r1, #8
    46da:	f012 fe41 	bl	17360 <conn_cleanup>
			return;
    46de:	f7ff b95d 	b.w	399c <ull_conn_done+0x874>
			if(scheduled_handle_cnt == 0) first_handle = conn_handle;
    46e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
    46e4:	601a      	str	r2, [r3, #0]
    46e6:	f7fe bedb 	b.w	34a0 <ull_conn_done+0x378>
						if(anchor_points[i] < standard_point) anchor_points[i] += conn_int_table[i]*1.25;
    46ea:	462b      	mov	r3, r5
    46ec:	4622      	mov	r2, r4
    46ee:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
    46f2:	f7fb fd0b 	bl	10c <__adddf3>
    46f6:	f7fc f981 	bl	9fc <__aeabi_d2uiz>
    46fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
    46fe:	6018      	str	r0, [r3, #0]
    4700:	f7ff ba70 	b.w	3be4 <ull_conn_done+0xabc>
				conn->apto_expire = 1U;
    4704:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    4706:	2301      	movs	r3, #1
    4708:	f8a2 30b8 	strh.w	r3, [r2, #184]	; 0xb8
    470c:	f7ff b918 	b.w	3940 <ull_conn_done+0x818>
				conn->llcp_ack -= 2U;
    4710:	3b02      	subs	r3, #2
				conn->llcp_type = LLCP_PING;
    4712:	2205      	movs	r2, #5
				conn->llcp_ack -= 2U;
    4714:	f885 30c0 	strb.w	r3, [r5, #192]	; 0xc0
				conn->llcp_type = LLCP_PING;
    4718:	f885 20c1 	strb.w	r2, [r5, #193]	; 0xc1
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
    471c:	f7ff b92b 	b.w	3976 <ull_conn_done+0x84e>
    4720:	f8d7 a088 	ldr.w	sl, [r7, #136]	; 0x88
				for(int i =0; i <CONFIG_BT_MAX_CONN; i ++){
    4724:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
    4728:	f10a 0a01 	add.w	sl, sl, #1
    472c:	3304      	adds	r3, #4
    472e:	f1ba 0f04 	cmp.w	sl, #4
    4732:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    4736:	f47e afed 	bne.w	3714 <ull_conn_done+0x5ec>
				for(int i =1; i<table_size; i ++)
    473a:	6d39      	ldr	r1, [r7, #80]	; 0x50
    473c:	2901      	cmp	r1, #1
    473e:	d017      	beq.n	4770 <ull_conn_done+0x1648>
    4740:	4b7e      	ldr	r3, [pc, #504]	; (493c <ull_conn_done+0x1814>)
    4742:	4a7f      	ldr	r2, [pc, #508]	; (4940 <ull_conn_done+0x1818>)
						if(array0[i-1] != -1) array1[i] = array1[i-1] + avg_conn_evt_length[array0[i-1]];
    4744:	4c7f      	ldr	r4, [pc, #508]	; (4944 <ull_conn_done+0x181c>)
    4746:	1f18      	subs	r0, r3, #4
    4748:	eb00 0081 	add.w	r0, r0, r1, lsl #2
					if(array0[i] == -1)
    474c:	f853 1f04 	ldr.w	r1, [r3, #4]!
    4750:	3101      	adds	r1, #1
    4752:	d109      	bne.n	4768 <ull_conn_done+0x1640>
						if(array0[i-1] != -1) array1[i] = array1[i-1] + avg_conn_evt_length[array0[i-1]];
    4754:	f853 1c04 	ldr.w	r1, [r3, #-4]
    4758:	6815      	ldr	r5, [r2, #0]
    475a:	1c4e      	adds	r6, r1, #1
    475c:	bf17      	itett	ne
    475e:	f854 1021 	ldrne.w	r1, [r4, r1, lsl #2]
						else array1[i] = array1[i-1];
    4762:	6055      	streq	r5, [r2, #4]
						if(array0[i-1] != -1) array1[i] = array1[i-1] + avg_conn_evt_length[array0[i-1]];
    4764:	1949      	addne	r1, r1, r5
    4766:	6051      	strne	r1, [r2, #4]
				for(int i =1; i<table_size; i ++)
    4768:	4298      	cmp	r0, r3
    476a:	f102 0204 	add.w	r2, r2, #4
    476e:	d1ed      	bne.n	474c <ull_conn_done+0x1624>
    4770:	4973      	ldr	r1, [pc, #460]	; (4940 <ull_conn_done+0x1818>)
    4772:	4a71      	ldr	r2, [pc, #452]	; (4938 <ull_conn_done+0x1810>)
    4774:	6d3c      	ldr	r4, [r7, #80]	; 0x50
						for(int k = standard_anchor_point; k < standard_anchor_point +table_size && j <max_conn_int/conn_int_table[i]; k ++){
    4776:	2300      	movs	r3, #0
				for (int i =0; i <table_size; i ++){
    4778:	3301      	adds	r3, #1
					temp_array1[i] = array1[i];
    477a:	f851 0b04 	ldr.w	r0, [r1], #4
    477e:	f842 0b04 	str.w	r0, [r2], #4
				for (int i =0; i <table_size; i ++){
    4782:	429c      	cmp	r4, r3
    4784:	dcf8      	bgt.n	4778 <ull_conn_done+0x1650>
				for(int i = 0; i <max_conn_int/conn_int_table[conn_handle]; i ++){
    4786:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    4788:	6dba      	ldr	r2, [r7, #88]	; 0x58
    478a:	68be      	ldr	r6, [r7, #8]
    478c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    4790:	4286      	cmp	r6, r0
    4792:	f0c0 8092 	bcc.w	48ba <ull_conn_done+0x1792>
    4796:	f8d7 b03c 	ldr.w	fp, [r7, #60]	; 0x3c
					uint32_t anchor_point = anchor_points[conn_handle] + i*conn_int_table[conn_handle]*1.25;
    479a:	6a3b      	ldr	r3, [r7, #32]
    479c:	fb00 f003 	mul.w	r0, r0, r3
    47a0:	f7fb fdf0 	bl	384 <__aeabi_ui2d>
    47a4:	4b68      	ldr	r3, [pc, #416]	; (4948 <ull_conn_done+0x1820>)
    47a6:	2200      	movs	r2, #0
    47a8:	f7fb fe66 	bl	478 <__aeabi_dmul>
    47ac:	697b      	ldr	r3, [r7, #20]
    47ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
    47b0:	4604      	mov	r4, r0
    47b2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    47b6:	460d      	mov	r5, r1
    47b8:	f7fb fde4 	bl	384 <__aeabi_ui2d>
    47bc:	4602      	mov	r2, r0
    47be:	460b      	mov	r3, r1
    47c0:	4620      	mov	r0, r4
    47c2:	4629      	mov	r1, r5
    47c4:	f7fb fca2 	bl	10c <__adddf3>
    47c8:	f7fc f918 	bl	9fc <__aeabi_d2uiz>
    47cc:	4682      	mov	sl, r0
					while(anchor_point > array1[0]+max_conn_int*1.25) {
    47ce:	f7fb fdd9 	bl	384 <__aeabi_ui2d>
    47d2:	4604      	mov	r4, r0
    47d4:	4630      	mov	r0, r6
    47d6:	460d      	mov	r5, r1
    47d8:	f7fb fde4 	bl	3a4 <__aeabi_i2d>
    47dc:	4b5a      	ldr	r3, [pc, #360]	; (4948 <ull_conn_done+0x1820>)
    47de:	f8db 6000 	ldr.w	r6, [fp]
    47e2:	2200      	movs	r2, #0
    47e4:	f7fb fe48 	bl	478 <__aeabi_dmul>
    47e8:	4680      	mov	r8, r0
    47ea:	4689      	mov	r9, r1
    47ec:	4630      	mov	r0, r6
    47ee:	f7fb fdc9 	bl	384 <__aeabi_ui2d>
    47f2:	4642      	mov	r2, r8
    47f4:	464b      	mov	r3, r9
    47f6:	e9c7 8924 	strd	r8, r9, [r7, #144]	; 0x90
    47fa:	f7fb fc87 	bl	10c <__adddf3>
    47fe:	4622      	mov	r2, r4
    4800:	462b      	mov	r3, r5
    4802:	4680      	mov	r8, r0
    4804:	4689      	mov	r9, r1
    4806:	f7fc f8a9 	bl	95c <__aeabi_dcmplt>
    480a:	b1e8      	cbz	r0, 4848 <ull_conn_done+0x1720>
    480c:	f8c7 b078 	str.w	fp, [r7, #120]	; 0x78
    4810:	e9d7 ab24 	ldrd	sl, fp, [r7, #144]	; 0x90
    4814:	f8c7 6088 	str.w	r6, [r7, #136]	; 0x88
						anchor_point = anchor_point - max_conn_int*1.25;
    4818:	4652      	mov	r2, sl
    481a:	465b      	mov	r3, fp
    481c:	4620      	mov	r0, r4
    481e:	4629      	mov	r1, r5
    4820:	f7fb fc72 	bl	108 <__aeabi_dsub>
    4824:	f7fc f8ea 	bl	9fc <__aeabi_d2uiz>
    4828:	4606      	mov	r6, r0
					while(anchor_point > array1[0]+max_conn_int*1.25) {
    482a:	f7fb fdab 	bl	384 <__aeabi_ui2d>
    482e:	4642      	mov	r2, r8
    4830:	464b      	mov	r3, r9
    4832:	4604      	mov	r4, r0
    4834:	460d      	mov	r5, r1
    4836:	f7fc f8af 	bl	998 <__aeabi_dcmpgt>
    483a:	2800      	cmp	r0, #0
    483c:	d1ec      	bne.n	4818 <ull_conn_done+0x16f0>
    483e:	46b2      	mov	sl, r6
    4840:	f8d7 b078 	ldr.w	fp, [r7, #120]	; 0x78
    4844:	f8d7 6088 	ldr.w	r6, [r7, #136]	; 0x88
					for(int j =1; j <table_size+1; j ++){
    4848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    484a:	681c      	ldr	r4, [r3, #0]
    484c:	1c61      	adds	r1, r4, #1
    484e:	2901      	cmp	r1, #1
    4850:	f340 8080 	ble.w	4954 <ull_conn_done+0x182c>
    4854:	6dbd      	ldr	r5, [r7, #88]	; 0x58
    4856:	f8d7 c080 	ldr.w	ip, [r7, #128]	; 0x80
					bool flag = false;
    485a:	2000      	movs	r0, #0
					for(int j =1; j <table_size+1; j ++){
    485c:	2301      	movs	r3, #1
    485e:	e011      	b.n	4884 <ull_conn_done+0x175c>
							if( (array1[j] > anchor_point&& j < table_size) || j ==table_size){
    4860:	429c      	cmp	r4, r3
    4862:	dd15      	ble.n	4890 <ull_conn_done+0x1768>
								if(array0[j-1] == -1){
    4864:	1e5a      	subs	r2, r3, #1
    4866:	f85c 6022 	ldr.w	r6, [ip, r2, lsl #2]
    486a:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
    486e:	d02d      	beq.n	48cc <ull_conn_done+0x17a4>
								else if(array0[j] == -1)
    4870:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
    4874:	3201      	adds	r2, #1
    4876:	d052      	beq.n	491e <ull_conn_done+0x17f6>
					for(int j =1; j <table_size+1; j ++){
    4878:	1c5a      	adds	r2, r3, #1
    487a:	428a      	cmp	r2, r1
    487c:	da0d      	bge.n	489a <ull_conn_done+0x1772>
    487e:	f85b 6023 	ldr.w	r6, [fp, r3, lsl #2]
    4882:	4613      	mov	r3, r2
						if(array1[j-1] <= anchor_point){
    4884:	45b2      	cmp	sl, r6
    4886:	d3f7      	bcc.n	4878 <ull_conn_done+0x1750>
							if( (array1[j] > anchor_point&& j < table_size) || j ==table_size){
    4888:	f85b 2023 	ldr.w	r2, [fp, r3, lsl #2]
    488c:	4552      	cmp	r2, sl
    488e:	d8e7      	bhi.n	4860 <ull_conn_done+0x1738>
    4890:	429c      	cmp	r4, r3
    4892:	d0e7      	beq.n	4864 <ull_conn_done+0x173c>
					for(int j =1; j <table_size+1; j ++){
    4894:	1c5a      	adds	r2, r3, #1
    4896:	428a      	cmp	r2, r1
    4898:	dbf1      	blt.n	487e <ull_conn_done+0x1756>
					if(!flag) {
    489a:	2800      	cmp	r0, #0
    489c:	d05a      	beq.n	4954 <ull_conn_done+0x182c>
				for(int i = 0; i <max_conn_int/conn_int_table[conn_handle]; i ++){
    489e:	4b24      	ldr	r3, [pc, #144]	; (4930 <ull_conn_done+0x1808>)
    48a0:	6a3a      	ldr	r2, [r7, #32]
    48a2:	681e      	ldr	r6, [r3, #0]
    48a4:	6db9      	ldr	r1, [r7, #88]	; 0x58
    48a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    48a8:	3201      	adds	r2, #1
    48aa:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
    48ae:	fbb6 f3f0 	udiv	r3, r6, r0
    48b2:	4293      	cmp	r3, r2
    48b4:	623a      	str	r2, [r7, #32]
    48b6:	f63f af70 	bhi.w	479a <ull_conn_done+0x1672>
    48ba:	f8d7 d004 	ldr.w	sp, [r7, #4]
			update_signal = true;
    48be:	4b23      	ldr	r3, [pc, #140]	; (494c <ull_conn_done+0x1824>)
    48c0:	4c23      	ldr	r4, [pc, #140]	; (4950 <ull_conn_done+0x1828>)
    48c2:	2201      	movs	r2, #1
    48c4:	6826      	ldr	r6, [r4, #0]
    48c6:	701a      	strb	r2, [r3, #0]
		if( start || (!need_update_dummy && handle_cnt[max_conn_index] > 1 && handle_cnt[max_conn_index] % M_num == 0  && conn_handle == max_conn_index && anchor_points[conn_handle] != 0 && scheduled_handles[conn_handle])){
    48c8:	f7ff b8bc 	b.w	3a44 <ull_conn_done+0x91c>
									if((array0[j-2] != conn_handle&& j>1)|| j == 1) {
    48cc:	1e9e      	subs	r6, r3, #2
    48ce:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
    48d2:	42ae      	cmp	r6, r5
    48d4:	d001      	beq.n	48da <ull_conn_done+0x17b2>
    48d6:	2b01      	cmp	r3, #1
    48d8:	dc03      	bgt.n	48e2 <ull_conn_done+0x17ba>
    48da:	2b01      	cmp	r3, #1
    48dc:	d1cc      	bne.n	4878 <ull_conn_done+0x1750>
    48de:	f85c 6c04 	ldr.w	r6, [ip, #-4]
    48e2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    48e6:	3b03      	subs	r3, #3
    48e8:	eb0b 0083 	add.w	r0, fp, r3, lsl #2
    48ec:	3008      	adds	r0, #8
    48ee:	eb0c 0e83 	add.w	lr, ip, r3, lsl #2
    48f2:	e007      	b.n	4904 <ull_conn_done+0x17dc>
										while(array0[j-2] == -1 && array1[j-2] == array1[j-1] && j-2>=0)
    48f4:	e953 6301 	ldrd	r6, r3, [r3, #-4]
    48f8:	429e      	cmp	r6, r3
    48fa:	d10b      	bne.n	4914 <ull_conn_done+0x17ec>
    48fc:	1c53      	adds	r3, r2, #1
    48fe:	d009      	beq.n	4914 <ull_conn_done+0x17ec>
    4900:	f85e 6904 	ldr.w	r6, [lr], #-4
    4904:	3601      	adds	r6, #1
    4906:	4603      	mov	r3, r0
    4908:	4690      	mov	r8, r2
    490a:	f1a0 0004 	sub.w	r0, r0, #4
    490e:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
    4912:	d0ef      	beq.n	48f4 <ull_conn_done+0x17cc>
										array0[j-1] = conn_handle;
    4914:	f84c 5028 	str.w	r5, [ip, r8, lsl #2]
    4918:	460b      	mov	r3, r1
										flag = true;
    491a:	2001      	movs	r0, #1
    491c:	e7ac      	b.n	4878 <ull_conn_done+0x1750>
									if((array0[j-1] != conn_handle&& j>0)|| j == 0) {
    491e:	42ae      	cmp	r6, r5
    4920:	d022      	beq.n	4968 <ull_conn_done+0x1840>
    4922:	2b00      	cmp	r3, #0
    4924:	dd20      	ble.n	4968 <ull_conn_done+0x1840>
										array0[j] = conn_handle;
    4926:	f84c 5023 	str.w	r5, [ip, r3, lsl #2]
										flag = true;
    492a:	2001      	movs	r0, #1
										array0[j] = conn_handle;
    492c:	460b      	mov	r3, r1
    492e:	e7a3      	b.n	4878 <ull_conn_done+0x1750>
    4930:	200069b4 	.word	0x200069b4
    4934:	200069b4 	.word	0x200069b4
    4938:	20007710 	.word	0x20007710
    493c:	200032dc 	.word	0x200032dc
    4940:	200042dc 	.word	0x200042dc
    4944:	200052ec 	.word	0x200052ec
    4948:	3ff40000 	.word	0x3ff40000
    494c:	20009c41 	.word	0x20009c41
    4950:	200005ec 	.word	0x200005ec
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    4954:	6dba      	ldr	r2, [r7, #88]	; 0x58
    4956:	489a      	ldr	r0, [pc, #616]	; (4bc0 <ull_conn_done+0x1a98>)
    4958:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
    495c:	f00b fb90 	bl	10080 <mem_get>
						conn_cleanup(ll_conn_get(conn_handle), BT_HCI_ERR_CONN_FAIL_TO_ESTAB);
    4960:	213e      	movs	r1, #62	; 0x3e
    4962:	f012 fcfd 	bl	17360 <conn_cleanup>
    4966:	e79a      	b.n	489e <ull_conn_done+0x1776>
									if((array0[j-1] != conn_handle&& j>0)|| j == 0) {
    4968:	2b00      	cmp	r3, #0
    496a:	d185      	bne.n	4878 <ull_conn_done+0x1750>
    496c:	e7db      	b.n	4926 <ull_conn_done+0x17fe>
								if(k>=table_size) array1[k%table_size] = array1[k%table_size] - max_conn_int*1.25;
    496e:	f7fb fd09 	bl	384 <__aeabi_ui2d>
    4972:	4680      	mov	r8, r0
    4974:	68b8      	ldr	r0, [r7, #8]
    4976:	4689      	mov	r9, r1
    4978:	f7fb fd14 	bl	3a4 <__aeabi_i2d>
    497c:	4b91      	ldr	r3, [pc, #580]	; (4bc4 <ull_conn_done+0x1a9c>)
    497e:	2200      	movs	r2, #0
    4980:	f7fb fd7a 	bl	478 <__aeabi_dmul>
    4984:	460b      	mov	r3, r1
    4986:	4602      	mov	r2, r0
    4988:	4649      	mov	r1, r9
    498a:	4640      	mov	r0, r8
    498c:	f7fb fbbc 	bl	108 <__aeabi_dsub>
    4990:	f7fc f834 	bl	9fc <__aeabi_d2uiz>
    4994:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    4996:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
    499a:	f7fe bf74 	b.w	3886 <ull_conn_done+0x75e>
				array0[0] = conn_handle;
    499e:	4a8a      	ldr	r2, [pc, #552]	; (4bc8 <ull_conn_done+0x1aa0>)
    49a0:	6db8      	ldr	r0, [r7, #88]	; 0x58
				array0[1] = -1;
    49a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    49a6:	e9c2 0300 	strd	r0, r3, [r2]
    49aa:	e788      	b.n	48be <ull_conn_done+0x1796>
    49ac:	f8d7 b050 	ldr.w	fp, [r7, #80]	; 0x50
    49b0:	f7fe be9b 	b.w	36ea <ull_conn_done+0x5c2>
			conn_cleanup(conn, BT_HCI_ERR_CONN_FAIL_TO_ESTAB);
    49b4:	6e38      	ldr	r0, [r7, #96]	; 0x60
    49b6:	213e      	movs	r1, #62	; 0x3e
    49b8:	f012 fcd2 	bl	17360 <conn_cleanup>
			return;
    49bc:	f7fe bfee 	b.w	399c <ull_conn_done+0x874>
    49c0:	46c8      	mov	r8, r9
    49c2:	f7ff b86f 	b.w	3aa4 <ull_conn_done+0x97c>
			table_size = temp_table_size;
    49c6:	2301      	movs	r3, #1
    49c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
			if(scheduled_handle_cnt == 1){
    49ca:	429e      	cmp	r6, r3
			table_size = temp_table_size;
    49cc:	6013      	str	r3, [r2, #0]
			if(scheduled_handle_cnt == 1){
    49ce:	d0e6      	beq.n	499e <ull_conn_done+0x1876>
					temp_array[i] = array0[i];
    49d0:	4c7d      	ldr	r4, [pc, #500]	; (4bc8 <ull_conn_done+0x1aa0>)
					temp_temp_array[i] = array1[i];
    49d2:	4d7e      	ldr	r5, [pc, #504]	; (4bcc <ull_conn_done+0x1aa4>)
					temp_array[i] = array0[i];
    49d4:	6822      	ldr	r2, [r4, #0]
					temp_temp_array[i] = array1[i];
    49d6:	6829      	ldr	r1, [r5, #0]
					temp_array[i] = array0[i];
    49d8:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
					array1[i] = 0;
    49dc:	2200      	movs	r2, #0
					array0[i] = -1;
    49de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
					temp_temp_array[i] = array1[i];
    49e2:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
					array1[i] = 0;
    49e6:	602a      	str	r2, [r5, #0]
				for(int k = 0; k < repeated_size/old_repeated_size; k ++)
    49e8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
    49ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
    49ec:	fb92 f2f1 	sdiv	r2, r2, r1
    49f0:	2a00      	cmp	r2, #0
					temp_array[i] = array0[i];
    49f2:	f8c7 4080 	str.w	r4, [r7, #128]	; 0x80
					temp_temp_array[i] = array1[i];
    49f6:	63fd      	str	r5, [r7, #60]	; 0x3c
					array0[i] = -1;
    49f8:	6020      	str	r0, [r4, #0]
			else{
    49fa:	f8c7 d004 	str.w	sp, [r7, #4]
				for(int k = 0; k < repeated_size/old_repeated_size; k ++)
    49fe:	613a      	str	r2, [r7, #16]
			int temp_table_size = 1;
    4a00:	653b      	str	r3, [r7, #80]	; 0x50
				for(int k = 0; k < repeated_size/old_repeated_size; k ++)
    4a02:	f77e ae43 	ble.w	368c <ull_conn_done+0x564>
				int temp_array[table_size], temp_temp_array[table_size];
    4a06:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
    4a0a:	633b      	str	r3, [r7, #48]	; 0x30
    4a0c:	f107 0398 	add.w	r3, r7, #152	; 0x98
    4a10:	637b      	str	r3, [r7, #52]	; 0x34
    4a12:	f7fe bdbe 	b.w	3592 <ull_conn_done+0x46a>
				int standard_anchor_point =0;
    4a16:	4680      	mov	r8, r0
    4a18:	f7ff b844 	b.w	3aa4 <ull_conn_done+0x97c>
				int need_cell_cnt_index = 0;
    4a1c:	2300      	movs	r3, #0
    4a1e:	63bb      	str	r3, [r7, #56]	; 0x38
    4a20:	e608      	b.n	4634 <ull_conn_done+0x150c>
				int new_repeated_size = (old_max_conn_int/conn_int_table[new_first_handle]);					
    4a22:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    4a24:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
    4a28:	f853 3c04 	ldr.w	r3, [r3, #-4]
    4a2c:	fbb2 faf3 	udiv	sl, r2, r3
				int temp_temp_temp_array[table_size];	
    4a30:	ebad 0d01 	sub.w	sp, sp, r1
				int new_first_handle_index=-1;
    4a34:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
				int temp_temp_temp_array[table_size];	
    4a38:	a908      	add	r1, sp, #32
				int new_first_handle = -1;
    4a3a:	462e      	mov	r6, r5
    4a3c:	e412      	b.n	4264 <ull_conn_done+0x113c>
				for (int i =0; i <table_size; i ++){
    4a3e:	f43f ab39 	beq.w	40b4 <ull_conn_done+0xf8c>
				for(int i = 0; i < table_size-1; i ++){
    4a42:	2900      	cmp	r1, #0
    4a44:	f73f ab43 	bgt.w	40ce <ull_conn_done+0xfa6>
    4a48:	e475      	b.n	4336 <ull_conn_done+0x120e>
				int temp_temp_temp_array[table_size];	
    4a4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
				int new_repeated_size = (old_max_conn_int/conn_int_table[new_first_handle]);					
    4a4c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
				int temp_temp_temp_array[table_size];	
    4a50:	f023 0307 	bic.w	r3, r3, #7
    4a54:	ebad 0d03 	sub.w	sp, sp, r3
				int new_repeated_size = (old_max_conn_int/conn_int_table[new_first_handle]);					
    4a58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
				int new_first_handle_index=-1;
    4a5a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
				int new_repeated_size = (old_max_conn_int/conn_int_table[new_first_handle]);					
    4a5e:	f853 3c04 	ldr.w	r3, [r3, #-4]
    4a62:	fbb2 faf3 	udiv	sl, r2, r3
				int temp_temp_temp_array[table_size];	
    4a66:	a908      	add	r1, sp, #32
				int new_first_handle = -1;
    4a68:	462e      	mov	r6, r5
    4a6a:	f7ff bbec 	b.w	4246 <ull_conn_done+0x111e>
	if ((force) || (latency_event != lll->latency_event)) {
    4a6e:	429e      	cmp	r6, r3
    4a70:	f43e af92 	beq.w	3998 <ull_conn_done+0x870>
		lazy = lll->latency_event + 1;
    4a74:	3301      	adds	r3, #1
    4a76:	b299      	uxth	r1, r3
	if ((ticks_drift_plus != 0U) || (ticks_drift_minus != 0U) ||
    4a78:	2900      	cmp	r1, #0
    4a7a:	f43e af8d 	beq.w	3998 <ull_conn_done+0x870>
    4a7e:	f7ff b9ce 	b.w	3e1e <ull_conn_done+0xcf6>
					for(int i = 0; i <CONFIG_BT_MAX_CONN; i ++){
    4a82:	4b53      	ldr	r3, [pc, #332]	; (4bd0 <ull_conn_done+0x1aa8>)
    4a84:	681b      	ldr	r3, [r3, #0]
    4a86:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    4a8a:	4b52      	ldr	r3, [pc, #328]	; (4bd4 <ull_conn_done+0x1aac>)
    4a8c:	681b      	ldr	r3, [r3, #0]
    4a8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
					for(int i = 0; i <CONFIG_BT_MAX_CONN && !need_conn_update; i ++){
    4a92:	2300      	movs	r3, #0
    4a94:	65bb      	str	r3, [r7, #88]	; 0x58
						int handle_now = schedule[i];
    4a96:	6cba      	ldr	r2, [r7, #72]	; 0x48
    4a98:	f852 3b04 	ldr.w	r3, [r2], #4
    4a9c:	64ba      	str	r2, [r7, #72]	; 0x48
						if(scheduled_handles[handle_now] == false) i = CONFIG_BT_MAX_CONN;
    4a9e:	4a4e      	ldr	r2, [pc, #312]	; (4bd8 <ull_conn_done+0x1ab0>)
						int handle_now = schedule[i];
    4aa0:	67bb      	str	r3, [r7, #120]	; 0x78
						if(scheduled_handles[handle_now] == false) i = CONFIG_BT_MAX_CONN;
    4aa2:	5cd3      	ldrb	r3, [r2, r3]
    4aa4:	2b00      	cmp	r3, #0
    4aa6:	f040 809d 	bne.w	4be4 <ull_conn_done+0x1abc>
					for(int i = 0; i <CONFIG_BT_MAX_CONN && !need_conn_update ; i ++){
    4aaa:	4b4c      	ldr	r3, [pc, #304]	; (4bdc <ull_conn_done+0x1ab4>)
					for(int i = 0; i <CONFIG_BT_MAX_CONN; i++) array4[i] = 0;
    4aac:	494c      	ldr	r1, [pc, #304]	; (4be0 <ull_conn_done+0x1ab8>)
					for(int i = 0; i <CONFIG_BT_MAX_CONN && !need_conn_update ; i ++){
    4aae:	781a      	ldrb	r2, [r3, #0]
							if(scheduled_handles[handle_now] && handle_now != first_handle ){
    4ab0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    4ab2:	681b      	ldr	r3, [r3, #0]
    4ab4:	67bb      	str	r3, [r7, #120]	; 0x78
					for(int i = 0; i <CONFIG_BT_MAX_CONN; i++) array4[i] = 0;
    4ab6:	2300      	movs	r3, #0
    4ab8:	e9c1 3300 	strd	r3, r3, [r1]
    4abc:	e9c1 3302 	strd	r3, r3, [r1, #8]
					for(int i = 0; i <CONFIG_BT_MAX_CONN && !need_conn_update ; i ++){
    4ac0:	4699      	mov	r9, r3
								if(min_gap <max_conn_int*1.25 && min_gap > gap+1){
    4ac2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
    4ac6:	3301      	adds	r3, #1
    4ac8:	677b      	str	r3, [r7, #116]	; 0x74
					for(int i = 0; i <CONFIG_BT_MAX_CONN && !need_conn_update ; i ++){
    4aca:	2a00      	cmp	r2, #0
    4acc:	f47e aef1 	bne.w	38b2 <ull_conn_done+0x78a>
						int handle_now = schedule[i];
    4ad0:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
    4ad4:	eb03 0389 	add.w	r3, r3, r9, lsl #2
    4ad8:	f853 8c20 	ldr.w	r8, [r3, #-32]
						while(!scheduled_handles[handle_now] && i <CONFIG_BT_MAX_CONN){
    4adc:	4b3e      	ldr	r3, [pc, #248]	; (4bd8 <ull_conn_done+0x1ab0>)
    4ade:	f813 3008 	ldrb.w	r3, [r3, r8]
    4ae2:	b9ab      	cbnz	r3, 4b10 <ull_conn_done+0x19e8>
    4ae4:	f1b9 0f03 	cmp.w	r9, #3
    4ae8:	dc5f      	bgt.n	4baa <ull_conn_done+0x1a82>
    4aea:	f109 0301 	add.w	r3, r9, #1
    4aee:	f107 0298 	add.w	r2, r7, #152	; 0x98
    4af2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    4af6:	e003      	b.n	4b00 <ull_conn_done+0x19d8>
    4af8:	2b04      	cmp	r3, #4
    4afa:	f43e aeda 	beq.w	38b2 <ull_conn_done+0x78a>
    4afe:	3301      	adds	r3, #1
							handle_now = schedule[i];
    4b00:	f852 1b04 	ldr.w	r1, [r2], #4
						while(!scheduled_handles[handle_now] && i <CONFIG_BT_MAX_CONN){
    4b04:	4834      	ldr	r0, [pc, #208]	; (4bd8 <ull_conn_done+0x1ab0>)
    4b06:	5c40      	ldrb	r0, [r0, r1]
							handle_now = schedule[i];
    4b08:	4688      	mov	r8, r1
							i ++;
    4b0a:	4699      	mov	r9, r3
						while(!scheduled_handles[handle_now] && i <CONFIG_BT_MAX_CONN){
    4b0c:	2800      	cmp	r0, #0
    4b0e:	d0f3      	beq.n	4af8 <ull_conn_done+0x19d0>
						if(i != CONFIG_BT_MAX_CONN){
    4b10:	f1b9 0f04 	cmp.w	r9, #4
    4b14:	f43e aecd 	beq.w	38b2 <ull_conn_done+0x78a>
							if(scheduled_handles[handle_now] && handle_now != first_handle ){
    4b18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    4b1a:	4543      	cmp	r3, r8
    4b1c:	d045      	beq.n	4baa <ull_conn_done+0x1a82>
								if(conn_int_table[handle_now] !=0)
    4b1e:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
    4b22:	f7fb fc3f 	bl	3a4 <__aeabi_i2d>
    4b26:	4b27      	ldr	r3, [pc, #156]	; (4bc4 <ull_conn_done+0x1a9c>)
    4b28:	6e7c      	ldr	r4, [r7, #100]	; 0x64
    4b2a:	2200      	movs	r2, #0
    4b2c:	f7fb fca4 	bl	478 <__aeabi_dmul>
    4b30:	f854 4028 	ldr.w	r4, [r4, r8, lsl #2]
    4b34:	e9c7 0120 	strd	r0, r1, [r7, #128]	; 0x80
    4b38:	2c00      	cmp	r4, #0
    4b3a:	f040 8260 	bne.w	4ffe <ull_conn_done+0x1ed6>
									for(int j = 0; j <max_conn_int/conn_int_table[handle_now]; j ++){
    4b3e:	f20f 0b78 	addw	fp, pc, #120	; 0x78
    4b42:	e9db ab00 	ldrd	sl, fp, [fp]
								uint32_t min_gap = -1;
    4b46:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
								if(min_gap <max_conn_int*1.25 && min_gap > gap+1){
    4b4a:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
    4b4e:	4650      	mov	r0, sl
    4b50:	4659      	mov	r1, fp
    4b52:	f7fb ff03 	bl	95c <__aeabi_dcmplt>
    4b56:	b340      	cbz	r0, 4baa <ull_conn_done+0x1a82>
    4b58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    4b5a:	42b3      	cmp	r3, r6
    4b5c:	d225      	bcs.n	4baa <ull_conn_done+0x1a82>
									min_gap = conn_int_table[handle_now]*1.25+gap-min_gap;
    4b5e:	4620      	mov	r0, r4
    4b60:	f7fb fc10 	bl	384 <__aeabi_ui2d>
    4b64:	4b17      	ldr	r3, [pc, #92]	; (4bc4 <ull_conn_done+0x1a9c>)
    4b66:	2200      	movs	r2, #0
    4b68:	f7fb fc86 	bl	478 <__aeabi_dmul>
    4b6c:	4605      	mov	r5, r0
    4b6e:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
    4b72:	460e      	mov	r6, r1
    4b74:	f7fb fc16 	bl	3a4 <__aeabi_i2d>
    4b78:	4602      	mov	r2, r0
    4b7a:	460b      	mov	r3, r1
    4b7c:	4628      	mov	r0, r5
    4b7e:	4631      	mov	r1, r6
    4b80:	f7fb fac4 	bl	10c <__adddf3>
    4b84:	4652      	mov	r2, sl
    4b86:	465b      	mov	r3, fp
    4b88:	f7fb fabe 	bl	108 <__aeabi_dsub>
    4b8c:	f7fb ff36 	bl	9fc <__aeabi_d2uiz>
									min_gap =(4*min_gap+4)/5;
    4b90:	1c42      	adds	r2, r0, #1
    4b92:	0092      	lsls	r2, r2, #2
    4b94:	2305      	movs	r3, #5
    4b96:	fbb2 f3f3 	udiv	r3, r2, r3
									if(min_gap>=conn_int_table[handle_now]) min_gap-=conn_int_table[handle_now];
    4b9a:	429c      	cmp	r4, r3
    4b9c:	f200 821b 	bhi.w	4fd6 <ull_conn_done+0x1eae>
									if(min_gap > 0 && min_gap <conn_int_table[handle_now]){
    4ba0:	1b1b      	subs	r3, r3, r4
    4ba2:	d002      	beq.n	4baa <ull_conn_done+0x1a82>
    4ba4:	429c      	cmp	r4, r3
    4ba6:	f200 8219 	bhi.w	4fdc <ull_conn_done+0x1eb4>
					for(int i = 0; i <CONFIG_BT_MAX_CONN && !need_conn_update ; i ++){
    4baa:	f109 0901 	add.w	r9, r9, #1
    4bae:	f1b9 0f03 	cmp.w	r9, #3
    4bb2:	dd8d      	ble.n	4ad0 <ull_conn_done+0x19a8>
    4bb4:	f7fe be7d 	b.w	38b2 <ull_conn_done+0x78a>
    4bb8:	ffe00000 	.word	0xffe00000
    4bbc:	41efffff 	.word	0x41efffff
    4bc0:	20006300 	.word	0x20006300
    4bc4:	3ff40000 	.word	0x3ff40000
    4bc8:	200032dc 	.word	0x200032dc
    4bcc:	200042dc 	.word	0x200042dc
    4bd0:	200069b4 	.word	0x200069b4
    4bd4:	20000498 	.word	0x20000498
    4bd8:	200076f8 	.word	0x200076f8
    4bdc:	20009c3e 	.word	0x20009c3e
    4be0:	200052dc 	.word	0x200052dc
							int interval = conn_int_table[handle_now];
    4be4:	6fba      	ldr	r2, [r7, #120]	; 0x78
    4be6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    4be8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    4bec:	63bb      	str	r3, [r7, #56]	; 0x38
							for(int j = 0; j < max_conn_int/interval && !need_conn_update; j ++){
    4bee:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
    4bf2:	fb92 f3f3 	sdiv	r3, r2, r3
    4bf6:	2b00      	cmp	r3, #0
    4bf8:	f340 8185 	ble.w	4f06 <ull_conn_done+0x1dde>
    4bfc:	f8df a360 	ldr.w	sl, [pc, #864]	; 4f60 <ull_conn_done+0x1e38>
    4c00:	f8df 9360 	ldr.w	r9, [pc, #864]	; 4f64 <ull_conn_done+0x1e3c>
							int temp_i = 0;
    4c04:	f04f 0b00 	mov.w	fp, #0
							for(int j = 0; j < max_conn_int/interval && !need_conn_update; j ++){
    4c08:	f8c7 b044 	str.w	fp, [r7, #68]	; 0x44
    4c0c:	4656      	mov	r6, sl
    4c0e:	46da      	mov	sl, fp
    4c10:	46cb      	mov	fp, r9
								while(array0[temp_i] != handle_now) temp_i ++;
    4c12:	f856 302a 	ldr.w	r3, [r6, sl, lsl #2]
    4c16:	6fba      	ldr	r2, [r7, #120]	; 0x78
    4c18:	429a      	cmp	r2, r3
    4c1a:	bf08      	it	eq
    4c1c:	4654      	moveq	r4, sl
    4c1e:	d00b      	beq.n	4c38 <ull_conn_done+0x1b10>
    4c20:	f10a 0301 	add.w	r3, sl, #1
    4c24:	6fb9      	ldr	r1, [r7, #120]	; 0x78
    4c26:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    4c2a:	4654      	mov	r4, sl
    4c2c:	f853 2b04 	ldr.w	r2, [r3], #4
    4c30:	4291      	cmp	r1, r2
    4c32:	f104 0401 	add.w	r4, r4, #1
    4c36:	d1f9      	bne.n	4c2c <ull_conn_done+0x1b04>
								int temp_temp_i = temp_i+1;
    4c38:	f104 0a01 	add.w	sl, r4, #1
								if(array0[temp_temp_i] > CONFIG_BT_MAX_CONN)
    4c3c:	4bbd      	ldr	r3, [pc, #756]	; (4f34 <ull_conn_done+0x1e0c>)
    4c3e:	f856 502a 	ldr.w	r5, [r6, sl, lsl #2]
    4c42:	681b      	ldr	r3, [r3, #0]
    4c44:	673b      	str	r3, [r7, #112]	; 0x70
    4c46:	2d04      	cmp	r5, #4
    4c48:	d851      	bhi.n	4cee <ull_conn_done+0x1bc6>
								int temp_temp_i = temp_i+1;
    4c4a:	4653      	mov	r3, sl
								if(temp_temp_i >= table_size) temp = array1[0] + max_conn_int*1.25;
    4c4c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    4c4e:	4293      	cmp	r3, r2
    4c50:	da5b      	bge.n	4d0a <ull_conn_done+0x1be2>
								else temp = array1[temp_temp_i];
    4c52:	f85b 2023 	ldr.w	r2, [fp, r3, lsl #2]
								if((((temp- array1[temp_i+1] < gap_1 || array1[temp_i+1]>temp) && array0[temp_i+1] >CONFIG_BT_MAX_CONN))||( array1[temp_i+1]<array1[temp_i]+ avg_conn_evt_length[handle_now]+gap_1  && array0[temp_i+1] <CONFIG_BT_MAX_CONN)  ||(array4[temp_i]>50*40/conn_int_table[handle_now]/1.25 && conn_int_table[handle_now] !=0)){
    4c56:	4bb8      	ldr	r3, [pc, #736]	; (4f38 <ull_conn_done+0x1e10>)
    4c58:	f85b 102a 	ldr.w	r1, [fp, sl, lsl #2]
    4c5c:	681b      	ldr	r3, [r3, #0]
    4c5e:	1a50      	subs	r0, r2, r1
    4c60:	4298      	cmp	r0, r3
    4c62:	d301      	bcc.n	4c68 <ull_conn_done+0x1b40>
    4c64:	4291      	cmp	r1, r2
    4c66:	d901      	bls.n	4c6c <ull_conn_done+0x1b44>
    4c68:	2d04      	cmp	r5, #4
    4c6a:	d866      	bhi.n	4d3a <ull_conn_done+0x1c12>
    4c6c:	f85b 2024 	ldr.w	r2, [fp, r4, lsl #2]
    4c70:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
    4c74:	48b1      	ldr	r0, [pc, #708]	; (4f3c <ull_conn_done+0x1e14>)
    4c76:	6fba      	ldr	r2, [r7, #120]	; 0x78
    4c78:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
    4c7c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    4c80:	4403      	add	r3, r0
    4c82:	4413      	add	r3, r2
    4c84:	4299      	cmp	r1, r3
    4c86:	d201      	bcs.n	4c8c <ull_conn_done+0x1b64>
    4c88:	2d03      	cmp	r5, #3
    4c8a:	d956      	bls.n	4d3a <ull_conn_done+0x1c12>
    4c8c:	4bac      	ldr	r3, [pc, #688]	; (4f40 <ull_conn_done+0x1e18>)
    4c8e:	6fba      	ldr	r2, [r7, #120]	; 0x78
    4c90:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    4c94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    4c96:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
    4c9a:	f7fb fb73 	bl	384 <__aeabi_ui2d>
    4c9e:	4680      	mov	r8, r0
    4ca0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    4ca4:	fbb0 f0f5 	udiv	r0, r0, r5
    4ca8:	4689      	mov	r9, r1
    4caa:	f7fb fb6b 	bl	384 <__aeabi_ui2d>
    4cae:	4ba5      	ldr	r3, [pc, #660]	; (4f44 <ull_conn_done+0x1e1c>)
    4cb0:	2200      	movs	r2, #0
    4cb2:	f7fb fd0b 	bl	6cc <__aeabi_ddiv>
    4cb6:	4602      	mov	r2, r0
    4cb8:	460b      	mov	r3, r1
    4cba:	4640      	mov	r0, r8
    4cbc:	4649      	mov	r1, r9
    4cbe:	f7fb fe6b 	bl	998 <__aeabi_dcmpgt>
    4cc2:	b108      	cbz	r0, 4cc8 <ull_conn_done+0x1ba0>
    4cc4:	2d00      	cmp	r5, #0
    4cc6:	d138      	bne.n	4d3a <ull_conn_done+0x1c12>
    4cc8:	46a2      	mov	sl, r4
							for(int j = 0; j < max_conn_int/interval && !need_conn_update; j ++){
    4cca:	6c79      	ldr	r1, [r7, #68]	; 0x44
    4ccc:	4b9e      	ldr	r3, [pc, #632]	; (4f48 <ull_conn_done+0x1e20>)
    4cce:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    4cd0:	681a      	ldr	r2, [r3, #0]
    4cd2:	4b9e      	ldr	r3, [pc, #632]	; (4f4c <ull_conn_done+0x1e24>)
    4cd4:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
    4cd8:	3101      	adds	r1, #1
    4cda:	fb92 f2f0 	sdiv	r2, r2, r0
    4cde:	428a      	cmp	r2, r1
    4ce0:	781b      	ldrb	r3, [r3, #0]
    4ce2:	6479      	str	r1, [r7, #68]	; 0x44
    4ce4:	f340 8111 	ble.w	4f0a <ull_conn_done+0x1de2>
    4ce8:	2b00      	cmp	r3, #0
    4cea:	d092      	beq.n	4c12 <ull_conn_done+0x1aea>
    4cec:	e6dd      	b.n	4aaa <ull_conn_done+0x1982>
    4cee:	1ca2      	adds	r2, r4, #2
    4cf0:	eb06 0282 	add.w	r2, r6, r2, lsl #2
								int temp_temp_i = temp_i+1;
    4cf4:	4653      	mov	r3, sl
    4cf6:	e003      	b.n	4d00 <ull_conn_done+0x1bd8>
									while(array0[temp_temp_i] > CONFIG_BT_MAX_CONN && temp_temp_i < table_size) temp_temp_i ++;
    4cf8:	f852 1b04 	ldr.w	r1, [r2], #4
    4cfc:	2904      	cmp	r1, #4
    4cfe:	d9a5      	bls.n	4c4c <ull_conn_done+0x1b24>
    4d00:	6f39      	ldr	r1, [r7, #112]	; 0x70
    4d02:	428b      	cmp	r3, r1
    4d04:	f103 0301 	add.w	r3, r3, #1
    4d08:	dbf6      	blt.n	4cf8 <ull_conn_done+0x1bd0>
								if(temp_temp_i >= table_size) temp = array1[0] + max_conn_int*1.25;
    4d0a:	f8db 0000 	ldr.w	r0, [fp]
    4d0e:	f7fb fb39 	bl	384 <__aeabi_ui2d>
    4d12:	4680      	mov	r8, r0
    4d14:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
    4d18:	4689      	mov	r9, r1
    4d1a:	f7fb fb43 	bl	3a4 <__aeabi_i2d>
    4d1e:	4b89      	ldr	r3, [pc, #548]	; (4f44 <ull_conn_done+0x1e1c>)
    4d20:	2200      	movs	r2, #0
    4d22:	f7fb fba9 	bl	478 <__aeabi_dmul>
    4d26:	4602      	mov	r2, r0
    4d28:	460b      	mov	r3, r1
    4d2a:	4640      	mov	r0, r8
    4d2c:	4649      	mov	r1, r9
    4d2e:	f7fb f9ed 	bl	10c <__adddf3>
    4d32:	f7fb fe63 	bl	9fc <__aeabi_d2uiz>
    4d36:	4602      	mov	r2, r0
    4d38:	e78d      	b.n	4c56 <ull_conn_done+0x1b2e>
												if(!((array1[temp_j+1]-array1[temp_j]>gap && temp_j+1 < table_size) ||(array1[0]+max_conn_int*1.25-array1[temp_j]>gap && temp_j+1 == table_size))){
    4d3a:	f8db 3000 	ldr.w	r3, [fp]
    4d3e:	643b      	str	r3, [r7, #64]	; 0x40
									int temp_gap = 0;
    4d40:	2300      	movs	r3, #0
    4d42:	677b      	str	r3, [r7, #116]	; 0x74
												if(!((array1[temp_j+1]-array1[temp_j]>gap && temp_j+1 < table_size) ||(array1[0]+max_conn_int*1.25-array1[temp_j]>gap && temp_j+1 == table_size))){
    4d44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    4d46:	f8c7 a080 	str.w	sl, [r7, #128]	; 0x80
    4d4a:	461d      	mov	r5, r3
    4d4c:	3301      	adds	r3, #1
    4d4e:	633b      	str	r3, [r7, #48]	; 0x30
    4d50:	46b2      	mov	sl, r6
    4d52:	f107 0298 	add.w	r2, r7, #152	; 0x98
    4d56:	6db8      	ldr	r0, [r7, #88]	; 0x58
    4d58:	462b      	mov	r3, r5
    4d5a:	eb02 0285 	add.w	r2, r2, r5, lsl #2
										if((scheduled_handles[schedule[k]])&& k != i){
    4d5e:	f852 5b04 	ldr.w	r5, [r2], #4
    4d62:	497b      	ldr	r1, [pc, #492]	; (4f50 <ull_conn_done+0x1e28>)
    4d64:	5d49      	ldrb	r1, [r1, r5]
    4d66:	b149      	cbz	r1, 4d7c <ull_conn_done+0x1c54>
    4d68:	4298      	cmp	r0, r3
    4d6a:	d10a      	bne.n	4d82 <ull_conn_done+0x1c5a>
    4d6c:	6b39      	ldr	r1, [r7, #48]	; 0x30
									for(k = i; !is_possible && k <CONFIG_BT_MAX_CONN; k ++){
    4d6e:	1c43      	adds	r3, r0, #1
    4d70:	2904      	cmp	r1, #4
    4d72:	d1f4      	bne.n	4d5e <ull_conn_done+0x1c36>
    4d74:	4656      	mov	r6, sl
    4d76:	f8d7 a080 	ldr.w	sl, [r7, #128]	; 0x80
    4d7a:	e7a6      	b.n	4cca <ull_conn_done+0x1ba2>
    4d7c:	3301      	adds	r3, #1
    4d7e:	4619      	mov	r1, r3
    4d80:	e7f6      	b.n	4d70 <ull_conn_done+0x1c48>
    4d82:	637b      	str	r3, [r7, #52]	; 0x34
											for(int l = 0; l < max_conn_int/conn_int_table[temp_handle] && is_possible;l++){
    4d84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    4d86:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
    4d8a:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    4d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
    4d90:	428b      	cmp	r3, r1
    4d92:	fbb1 f2f3 	udiv	r2, r1, r3
    4d96:	66ba      	str	r2, [r7, #104]	; 0x68
    4d98:	d87b      	bhi.n	4e92 <ull_conn_done+0x1d6a>
											int temp_j = 0;
    4d9a:	2100      	movs	r1, #0
											for(int l = 0; l < max_conn_int/conn_int_table[temp_handle] && is_possible;l++){
    4d9c:	6539      	str	r1, [r7, #80]	; 0x50
												while(array0[temp_j] != schedule[k]) temp_j ++;
    4d9e:	f85a 3021 	ldr.w	r3, [sl, r1, lsl #2]
    4da2:	429d      	cmp	r5, r3
    4da4:	d009      	beq.n	4dba <ull_conn_done+0x1c92>
    4da6:	1c4b      	adds	r3, r1, #1
    4da8:	eb0a 0283 	add.w	r2, sl, r3, lsl #2
    4dac:	e000      	b.n	4db0 <ull_conn_done+0x1c88>
    4dae:	3301      	adds	r3, #1
    4db0:	f852 0b04 	ldr.w	r0, [r2], #4
    4db4:	4285      	cmp	r5, r0
    4db6:	4619      	mov	r1, r3
    4db8:	d1f9      	bne.n	4dae <ull_conn_done+0x1c86>
												if(array0[temp_j+1] > CONFIG_BT_MAX_CONN)
    4dba:	1c4c      	adds	r4, r1, #1
    4dbc:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
    4dc0:	2b04      	cmp	r3, #4
    4dc2:	f200 8087 	bhi.w	4ed4 <ull_conn_done+0x1dac>
												if(!((array1[temp_j+1]-array1[temp_j]>gap && temp_j+1 < table_size) ||(array1[0]+max_conn_int*1.25-array1[temp_j]>gap && temp_j+1 == table_size))){
    4dc6:	f85b 6021 	ldr.w	r6, [fp, r1, lsl #2]
    4dca:	f85b 3024 	ldr.w	r3, [fp, r4, lsl #2]
    4dce:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
    4dd2:	1b9b      	subs	r3, r3, r6
    4dd4:	4293      	cmp	r3, r2
    4dd6:	d912      	bls.n	4dfe <ull_conn_done+0x1cd6>
    4dd8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    4dda:	42a2      	cmp	r2, r4
    4ddc:	dd0f      	ble.n	4dfe <ull_conn_done+0x1cd6>
														if(temp_gap >= array1[temp_j+1]-array1[temp_j] || l == 0 ) temp_gap = array1[temp_j+1]-array1[temp_j];
    4dde:	6f79      	ldr	r1, [r7, #116]	; 0x74
    4de0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    4de2:	428b      	cmp	r3, r1
    4de4:	f102 0601 	add.w	r6, r2, #1
    4de8:	f240 8087 	bls.w	4efa <ull_conn_done+0x1dd2>
    4dec:	2a00      	cmp	r2, #0
    4dee:	f000 8084 	beq.w	4efa <ull_conn_done+0x1dd2>
											for(int l = 0; l < max_conn_int/conn_int_table[temp_handle] && is_possible;l++){
    4df2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    4df4:	42b3      	cmp	r3, r6
    4df6:	d94c      	bls.n	4e92 <ull_conn_done+0x1d6a>
    4df8:	653e      	str	r6, [r7, #80]	; 0x50
    4dfa:	4621      	mov	r1, r4
    4dfc:	e7cf      	b.n	4d9e <ull_conn_done+0x1c76>
												if(!((array1[temp_j+1]-array1[temp_j]>gap && temp_j+1 < table_size) ||(array1[0]+max_conn_int*1.25-array1[temp_j]>gap && temp_j+1 == table_size))){
    4dfe:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
    4e02:	f7fb facf 	bl	3a4 <__aeabi_i2d>
    4e06:	4b4f      	ldr	r3, [pc, #316]	; (4f44 <ull_conn_done+0x1e1c>)
    4e08:	2200      	movs	r2, #0
    4e0a:	f7fb fb35 	bl	478 <__aeabi_dmul>
    4e0e:	4680      	mov	r8, r0
    4e10:	6c38      	ldr	r0, [r7, #64]	; 0x40
    4e12:	4689      	mov	r9, r1
    4e14:	f7fb fab6 	bl	384 <__aeabi_ui2d>
    4e18:	4602      	mov	r2, r0
    4e1a:	460b      	mov	r3, r1
    4e1c:	4640      	mov	r0, r8
    4e1e:	4649      	mov	r1, r9
    4e20:	f7fb f974 	bl	10c <__adddf3>
    4e24:	4680      	mov	r8, r0
    4e26:	4630      	mov	r0, r6
    4e28:	4689      	mov	r9, r1
    4e2a:	f7fb faab 	bl	384 <__aeabi_ui2d>
    4e2e:	4602      	mov	r2, r0
    4e30:	460b      	mov	r3, r1
    4e32:	4640      	mov	r0, r8
    4e34:	4649      	mov	r1, r9
    4e36:	f7fb f967 	bl	108 <__aeabi_dsub>
    4e3a:	4680      	mov	r8, r0
    4e3c:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
    4e40:	4689      	mov	r9, r1
    4e42:	f7fb faaf 	bl	3a4 <__aeabi_i2d>
    4e46:	4602      	mov	r2, r0
    4e48:	460b      	mov	r3, r1
    4e4a:	4640      	mov	r0, r8
    4e4c:	4649      	mov	r1, r9
    4e4e:	f7fb fda3 	bl	998 <__aeabi_dcmpgt>
    4e52:	b928      	cbnz	r0, 4e60 <ull_conn_done+0x1d38>
									for(k = i; !is_possible && k <CONFIG_BT_MAX_CONN; k ++){
    4e54:	6b7d      	ldr	r5, [r7, #52]	; 0x34
    4e56:	3501      	adds	r5, #1
    4e58:	2d03      	cmp	r5, #3
    4e5a:	f77f af7a 	ble.w	4d52 <ull_conn_done+0x1c2a>
    4e5e:	e789      	b.n	4d74 <ull_conn_done+0x1c4c>
												if(!((array1[temp_j+1]-array1[temp_j]>gap && temp_j+1 < table_size) ||(array1[0]+max_conn_int*1.25-array1[temp_j]>gap && temp_j+1 == table_size))){
    4e60:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    4e62:	42a3      	cmp	r3, r4
    4e64:	d1f6      	bne.n	4e54 <ull_conn_done+0x1d2c>
														if(temp_gap >= array1[0]+max_conn_int*1.25-array1[temp_j] || l==0) temp_gap = array1[0]+max_conn_int*1.25-array1[temp_j];
    4e66:	6f78      	ldr	r0, [r7, #116]	; 0x74
    4e68:	f7fb fa9c 	bl	3a4 <__aeabi_i2d>
    4e6c:	460b      	mov	r3, r1
    4e6e:	4602      	mov	r2, r0
    4e70:	4649      	mov	r1, r9
    4e72:	4640      	mov	r0, r8
    4e74:	f7fb fd7c 	bl	970 <__aeabi_dcmple>
    4e78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    4e7a:	1c5e      	adds	r6, r3, #1
    4e7c:	b908      	cbnz	r0, 4e82 <ull_conn_done+0x1d5a>
    4e7e:	2b00      	cmp	r3, #0
    4e80:	d1b7      	bne.n	4df2 <ull_conn_done+0x1cca>
    4e82:	4640      	mov	r0, r8
    4e84:	4649      	mov	r1, r9
    4e86:	f7fb fd91 	bl	9ac <__aeabi_d2iz>
											for(int l = 0; l < max_conn_int/conn_int_table[temp_handle] && is_possible;l++){
    4e8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
														if(temp_gap >= array1[0]+max_conn_int*1.25-array1[temp_j] || l==0) temp_gap = array1[0]+max_conn_int*1.25-array1[temp_j];
    4e8c:	6778      	str	r0, [r7, #116]	; 0x74
											for(int l = 0; l < max_conn_int/conn_int_table[temp_handle] && is_possible;l++){
    4e8e:	42b3      	cmp	r3, r6
    4e90:	d8b2      	bhi.n	4df8 <ull_conn_done+0x1cd0>
										need_gap = temp_gap-need_gap;
    4e92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    4e94:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
    4e98:	1a9a      	subs	r2, r3, r2
										need_gap =(need_gap)*4/5;
    4e9a:	0092      	lsls	r2, r2, #2
										if(need_gap>0&& need_gap<conn_int_table[temp_handle]){	
    4e9c:	2a04      	cmp	r2, #4
    4e9e:	4656      	mov	r6, sl
    4ea0:	f8d7 a080 	ldr.w	sl, [r7, #128]	; 0x80
    4ea4:	f67f af11 	bls.w	4cca <ull_conn_done+0x1ba2>
										need_gap =(need_gap)*4/5;
    4ea8:	4b2a      	ldr	r3, [pc, #168]	; (4f54 <ull_conn_done+0x1e2c>)
										if(need_gap>0&& need_gap<conn_int_table[temp_handle]){	
    4eaa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
										need_gap =(need_gap)*4/5;
    4eac:	fba3 3202 	umull	r3, r2, r3, r2
										if(need_gap>0&& need_gap<conn_int_table[temp_handle]){	
    4eb0:	ebb1 0f92 	cmp.w	r1, r2, lsr #2
										need_gap =(need_gap)*4/5;
    4eb4:	ea4f 0392 	mov.w	r3, r2, lsr #2
										if(need_gap>0&& need_gap<conn_int_table[temp_handle]){	
    4eb8:	f67f af07 	bls.w	4cca <ull_conn_done+0x1ba2>
											if(!ll_conn_update_BLEX(temp_handle, 0, 0, need_gap)&& need_gap >0){
    4ebc:	2200      	movs	r2, #0
    4ebe:	b29b      	uxth	r3, r3
    4ec0:	b2a8      	uxth	r0, r5
    4ec2:	4611      	mov	r1, r2
    4ec4:	f010 fa64 	bl	15390 <ll_conn_update_BLEX>
    4ec8:	b348      	cbz	r0, 4f1e <ull_conn_done+0x1df6>
    4eca:	4b23      	ldr	r3, [pc, #140]	; (4f58 <ull_conn_done+0x1e30>)
    4ecc:	681b      	ldr	r3, [r3, #0]
    4ece:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    4ed2:	e6fa      	b.n	4cca <ull_conn_done+0x1ba2>
    4ed4:	1c8b      	adds	r3, r1, #2
    4ed6:	6f3e      	ldr	r6, [r7, #112]	; 0x70
    4ed8:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
    4edc:	e000      	b.n	4ee0 <ull_conn_done+0x1db8>
													while(array0[temp_j+1] > CONFIG_BT_MAX_CONN && temp_j+1 < table_size) temp_j ++;
    4ede:	4614      	mov	r4, r2
    4ee0:	42b4      	cmp	r4, r6
    4ee2:	f104 0201 	add.w	r2, r4, #1
    4ee6:	da06      	bge.n	4ef6 <ull_conn_done+0x1dce>
    4ee8:	f853 0b04 	ldr.w	r0, [r3], #4
    4eec:	2804      	cmp	r0, #4
    4eee:	4621      	mov	r1, r4
    4ef0:	d8f5      	bhi.n	4ede <ull_conn_done+0x1db6>
    4ef2:	4614      	mov	r4, r2
    4ef4:	e767      	b.n	4dc6 <ull_conn_done+0x1c9e>
    4ef6:	1c4c      	adds	r4, r1, #1
    4ef8:	e765      	b.n	4dc6 <ull_conn_done+0x1c9e>
														if(temp_gap >= array1[temp_j+1]-array1[temp_j] || l == 0 ) temp_gap = array1[temp_j+1]-array1[temp_j];
    4efa:	677b      	str	r3, [r7, #116]	; 0x74
											for(int l = 0; l < max_conn_int/conn_int_table[temp_handle] && is_possible;l++){
    4efc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    4efe:	42b3      	cmp	r3, r6
    4f00:	f63f af7a 	bhi.w	4df8 <ull_conn_done+0x1cd0>
    4f04:	e7c5      	b.n	4e92 <ull_conn_done+0x1d6a>
    4f06:	4b11      	ldr	r3, [pc, #68]	; (4f4c <ull_conn_done+0x1e24>)
    4f08:	781b      	ldrb	r3, [r3, #0]
					for(int i = 0; i <CONFIG_BT_MAX_CONN && !need_conn_update; i ++){
    4f0a:	6dba      	ldr	r2, [r7, #88]	; 0x58
    4f0c:	3201      	adds	r2, #1
    4f0e:	2a04      	cmp	r2, #4
    4f10:	65ba      	str	r2, [r7, #88]	; 0x58
    4f12:	f43f adca 	beq.w	4aaa <ull_conn_done+0x1982>
    4f16:	2b00      	cmp	r3, #0
    4f18:	f43f adbd 	beq.w	4a96 <ull_conn_done+0x196e>
    4f1c:	e5c5      	b.n	4aaa <ull_conn_done+0x1982>
												BLEX_cnt4 = 0;
    4f1e:	4a0f      	ldr	r2, [pc, #60]	; (4f5c <ull_conn_done+0x1e34>)
    4f20:	4b0d      	ldr	r3, [pc, #52]	; (4f58 <ull_conn_done+0x1e30>)
    4f22:	6010      	str	r0, [r2, #0]
    4f24:	681b      	ldr	r3, [r3, #0]
												need_conn_update =true;
    4f26:	4a09      	ldr	r2, [pc, #36]	; (4f4c <ull_conn_done+0x1e24>)
    4f28:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    4f2c:	2301      	movs	r3, #1
    4f2e:	7013      	strb	r3, [r2, #0]
												BLEX_cnt4 = 0;
    4f30:	e6cb      	b.n	4cca <ull_conn_done+0x1ba2>
    4f32:	bf00      	nop
    4f34:	200076fc 	.word	0x200076fc
    4f38:	2000049c 	.word	0x2000049c
    4f3c:	200052ec 	.word	0x200052ec
    4f40:	200052dc 	.word	0x200052dc
    4f44:	3ff40000 	.word	0x3ff40000
    4f48:	200069b4 	.word	0x200069b4
    4f4c:	20009c3e 	.word	0x20009c3e
    4f50:	200076f8 	.word	0x200076f8
    4f54:	cccccccd 	.word	0xcccccccd
    4f58:	20000498 	.word	0x20000498
    4f5c:	200032c4 	.word	0x200032c4
    4f60:	200032dc 	.word	0x200032dc
    4f64:	200042dc 	.word	0x200042dc
							while(anchor_points[i] < anchor_points[first_handle]) anchor_points[i] += conn_int_table[i]*1.25;
    4f68:	697b      	ldr	r3, [r7, #20]
    4f6a:	f8da 6000 	ldr.w	r6, [sl]
    4f6e:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
    4f72:	429e      	cmp	r6, r3
    4f74:	d21b      	bcs.n	4fae <ull_conn_done+0x1e86>
    4f76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    4f78:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
    4f7c:	f7fb fa02 	bl	384 <__aeabi_ui2d>
    4f80:	4622      	mov	r2, r4
    4f82:	462b      	mov	r3, r5
    4f84:	f7fb fa78 	bl	478 <__aeabi_dmul>
    4f88:	e9c7 0122 	strd	r0, r1, [r7, #136]	; 0x88
    4f8c:	4630      	mov	r0, r6
    4f8e:	f7fb f9f9 	bl	384 <__aeabi_ui2d>
    4f92:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
    4f96:	f7fb f8b9 	bl	10c <__adddf3>
    4f9a:	f7fb fd2f 	bl	9fc <__aeabi_d2uiz>
    4f9e:	697b      	ldr	r3, [r7, #20]
    4fa0:	f8ca 0000 	str.w	r0, [sl]
    4fa4:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
    4fa8:	4298      	cmp	r0, r3
    4faa:	d3f0      	bcc.n	4f8e <ull_conn_done+0x1e66>
    4fac:	4606      	mov	r6, r0
							scheduled_dist[i] = (anchor_points[i]-anchor_points[first_handle])%((uint32_t)(conn_int_table[first_handle]*1.25));
    4fae:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    4fb0:	f852 002b 	ldr.w	r0, [r2, fp, lsl #2]
    4fb4:	1af6      	subs	r6, r6, r3
    4fb6:	f7fb f9e5 	bl	384 <__aeabi_ui2d>
    4fba:	462b      	mov	r3, r5
    4fbc:	4622      	mov	r2, r4
    4fbe:	f7fb fa5b 	bl	478 <__aeabi_dmul>
    4fc2:	f7fb fd1b 	bl	9fc <__aeabi_d2uiz>
    4fc6:	fbb6 f3f0 	udiv	r3, r6, r0
    4fca:	fb03 6610 	mls	r6, r3, r0, r6
    4fce:	f8c9 6000 	str.w	r6, [r9]
    4fd2:	f7fe bef9 	b.w	3dc8 <ull_conn_done+0xca0>
									if(min_gap > 0 && min_gap <conn_int_table[handle_now]){
    4fd6:	2a04      	cmp	r2, #4
    4fd8:	f67f ade7 	bls.w	4baa <ull_conn_done+0x1a82>
										if(!ll_conn_update_BLEX(handle_now, 0, 0, min_gap) && min_gap > 0){
    4fdc:	2200      	movs	r2, #0
    4fde:	b29b      	uxth	r3, r3
    4fe0:	fa1f f088 	uxth.w	r0, r8
    4fe4:	4611      	mov	r1, r2
    4fe6:	f010 f9d3 	bl	15390 <ll_conn_update_BLEX>
    4fea:	2800      	cmp	r0, #0
    4fec:	f47e ac61 	bne.w	38b2 <ull_conn_done+0x78a>
											BLEX_cnt4 = 0;
    4ff0:	4926      	ldr	r1, [pc, #152]	; (508c <ull_conn_done+0x1f64>)
											need_conn_update =true;
    4ff2:	4b27      	ldr	r3, [pc, #156]	; (5090 <ull_conn_done+0x1f68>)
											BLEX_cnt4 = 0;
    4ff4:	6008      	str	r0, [r1, #0]
											need_conn_update =true;
    4ff6:	2201      	movs	r2, #1
    4ff8:	701a      	strb	r2, [r3, #0]
											BLEX_cnt4 = 0;
    4ffa:	f7fe bc5a 	b.w	38b2 <ull_conn_done+0x78a>
									for(int j = 0; j <max_conn_int/conn_int_table[handle_now]; j ++){
    4ffe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
    5002:	fbb3 f2f4 	udiv	r2, r3, r4
    5006:	429c      	cmp	r4, r3
    5008:	673a      	str	r2, [r7, #112]	; 0x70
    500a:	f63f ad98 	bhi.w	4b3e <ull_conn_done+0x1a16>
    500e:	f04f 0b00 	mov.w	fp, #0
								int temp_i = 1;
    5012:	2501      	movs	r5, #1
								uint32_t min_gap = -1;
    5014:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    5018:	46a2      	mov	sl, r4
										while(array0[temp_i] != handle_now){
    501a:	4b1e      	ldr	r3, [pc, #120]	; (5094 <ull_conn_done+0x1f6c>)
    501c:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    5020:	4543      	cmp	r3, r8
    5022:	bf08      	it	eq
    5024:	f105 32ff 	addeq.w	r2, r5, #4294967295	; 0xffffffff
    5028:	d00b      	beq.n	5042 <ull_conn_done+0x1f1a>
    502a:	4a1a      	ldr	r2, [pc, #104]	; (5094 <ull_conn_done+0x1f6c>)
    502c:	1c6b      	adds	r3, r5, #1
    502e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
    5032:	e000      	b.n	5036 <ull_conn_done+0x1f0e>
    5034:	3301      	adds	r3, #1
    5036:	f851 0b04 	ldr.w	r0, [r1], #4
    503a:	4540      	cmp	r0, r8
    503c:	462a      	mov	r2, r5
											temp_i ++;
    503e:	461d      	mov	r5, r3
										while(array0[temp_i] != handle_now){
    5040:	d1f8      	bne.n	5034 <ull_conn_done+0x1f0c>
										if(array0[temp_i-1] > CONFIG_BT_MAX_CONN && temp_gap < max_conn_int*1.25 && temp_gap>0){
    5042:	4b14      	ldr	r3, [pc, #80]	; (5094 <ull_conn_done+0x1f6c>)
										uint32_t temp_gap = array1[temp_i]-array1[temp_i-1];
    5044:	4814      	ldr	r0, [pc, #80]	; (5098 <ull_conn_done+0x1f70>)
										if(array0[temp_i-1] > CONFIG_BT_MAX_CONN && temp_gap < max_conn_int*1.25 && temp_gap>0){
    5046:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
										uint32_t temp_gap = array1[temp_i]-array1[temp_i-1];
    504a:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
    504e:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
										if(array0[temp_i-1] > CONFIG_BT_MAX_CONN && temp_gap < max_conn_int*1.25 && temp_gap>0){
    5052:	2904      	cmp	r1, #4
    5054:	d90c      	bls.n	5070 <ull_conn_done+0x1f48>
										uint32_t temp_gap = array1[temp_i]-array1[temp_i-1];
    5056:	1ae4      	subs	r4, r4, r3
										if(array0[temp_i-1] > CONFIG_BT_MAX_CONN && temp_gap < max_conn_int*1.25 && temp_gap>0){
    5058:	4620      	mov	r0, r4
    505a:	f7fb f993 	bl	384 <__aeabi_ui2d>
    505e:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
    5062:	f7fb fc7b 	bl	95c <__aeabi_dcmplt>
    5066:	b118      	cbz	r0, 5070 <ull_conn_done+0x1f48>
    5068:	b114      	cbz	r4, 5070 <ull_conn_done+0x1f48>
											if(temp_gap<min_gap) min_gap = temp_gap;
    506a:	42a6      	cmp	r6, r4
    506c:	bf28      	it	cs
    506e:	4626      	movcs	r6, r4
									for(int j = 0; j <max_conn_int/conn_int_table[handle_now]; j ++){
    5070:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    5072:	f10b 0b01 	add.w	fp, fp, #1
    5076:	455b      	cmp	r3, fp
										temp_i ++;
    5078:	f105 0501 	add.w	r5, r5, #1
									for(int j = 0; j <max_conn_int/conn_int_table[handle_now]; j ++){
    507c:	d8cd      	bhi.n	501a <ull_conn_done+0x1ef2>
    507e:	4630      	mov	r0, r6
    5080:	f7fb f980 	bl	384 <__aeabi_ui2d>
    5084:	4654      	mov	r4, sl
    5086:	468b      	mov	fp, r1
    5088:	4682      	mov	sl, r0
    508a:	e55e      	b.n	4b4a <ull_conn_done+0x1a22>
    508c:	200032c4 	.word	0x200032c4
    5090:	20009c3e 	.word	0x20009c3e
    5094:	200032dc 	.word	0x200032dc
    5098:	200042dc 	.word	0x200042dc
    509c:	00000000 	.word	0x00000000

000050a0 <ull_master_setup>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

void ull_master_setup(memq_link_t *link, struct node_rx_hdr *rx,
		      struct node_rx_ftr *ftr, struct lll_conn *lll)
{
    50a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    50a4:	4617      	mov	r7, r2
	uint32_t ready_delay_us;
	uint8_t peer_addr_type;
	uint32_t ticker_status;
	uint8_t chan_sel;

	((struct lll_scan *)ftr->param)->conn = NULL;
    50a6:	6812      	ldr	r2, [r2, #0]

	pdu_tx = (void *)((struct node_rx_pdu *)rx)->pdu;

	uint16_t win_offset;
	win_offset = sys_le16_to_cpu(pdu_tx->connect_ind.win_offset);
	peer_addr_type = pdu_tx->rx_addr;
    50a8:	f891 c01c 	ldrb.w	ip, [r1, #28]
	scan = ((struct lll_scan *)ftr->param)->hdr.parent;
    50ac:	f8d2 9000 	ldr.w	r9, [r2]
{
    50b0:	460c      	mov	r4, r1
	((struct lll_scan *)ftr->param)->conn = NULL;
    50b2:	f04f 0a00 	mov.w	sl, #0
{
    50b6:	b08f      	sub	sp, #60	; 0x3c
	((struct lll_scan *)ftr->param)->conn = NULL;
    50b8:	f8c2 a008 	str.w	sl, [r2, #8]
{
    50bc:	461e      	mov	r6, r3
	win_offset = sys_le16_to_cpu(pdu_tx->connect_ind.win_offset);
    50be:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    50c0:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	memcpy(peer_addr, &pdu_tx->connect_ind.adv_addr[0], BDADDR_SIZE);
    50c4:	3124      	adds	r1, #36	; 0x24
    50c6:	2206      	movs	r2, #6
	peer_addr_type = pdu_tx->rx_addr;
    50c8:	f3cc 13c0 	ubfx	r3, ip, #7, #1
{
    50cc:	4680      	mov	r8, r0
	memcpy(peer_addr, &pdu_tx->connect_ind.adv_addr[0], BDADDR_SIZE);
    50ce:	a80c      	add	r0, sp, #48	; 0x30
	conn = lll->hdr.parent;
    50d0:	6835      	ldr	r5, [r6, #0]
	peer_addr_type = pdu_tx->rx_addr;
    50d2:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	memcpy(peer_addr, &pdu_tx->connect_ind.adv_addr[0], BDADDR_SIZE);
    50d6:	f01a fece 	bl	1fe76 <memcpy>

	/* This is the chan sel bit from the received adv pdu */
	chan_sel = pdu_tx->chan_sel;

	cc = (void *)pdu_tx;
	cc->status = 0U;
    50da:	f8a4 a01c 	strh.w	sl, [r4, #28]
	cc->role = 0U;

#if defined(CONFIG_BT_CTLR_PRIVACY)
	uint8_t rl_idx = ftr->rl_idx;

	if (ftr->lrpa_used) {
    50de:	7c79      	ldrb	r1, [r7, #17]
	uint8_t rl_idx = ftr->rl_idx;
    50e0:	f897 a012 	ldrb.w	sl, [r7, #18]
	if (ftr->lrpa_used) {
    50e4:	f011 0101 	ands.w	r1, r1, #1
    50e8:	f104 002b 	add.w	r0, r4, #43	; 0x2b
		memcpy(&cc->local_rpa[0], &pdu_tx->connect_ind.init_addr[0],
    50ec:	f04f 0206 	mov.w	r2, #6
	if (ftr->lrpa_used) {
    50f0:	f000 80ce 	beq.w	5290 <ull_master_setup+0x1f0>
		memcpy(&cc->local_rpa[0], &pdu_tx->connect_ind.init_addr[0],
    50f4:	f104 011e 	add.w	r1, r4, #30
    50f8:	f01a febd 	bl	1fe76 <memcpy>
		       BDADDR_SIZE);
	} else {
		memset(&cc->local_rpa[0], 0x0, BDADDR_SIZE);
	}

	if (rl_idx != FILTER_IDX_NONE) {
    50fc:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    5100:	f104 0325 	add.w	r3, r4, #37	; 0x25
    5104:	f104 0b1f 	add.w	fp, r4, #31
    5108:	f000 80cc 	beq.w	52a4 <ull_master_setup+0x204>
		/* Store identity address */
		ll_rl_id_addr_get(rl_idx, &cc->peer_addr_type,
    510c:	465a      	mov	r2, fp
    510e:	4650      	mov	r0, sl
    5110:	f104 011e 	add.w	r1, r4, #30
    5114:	930b      	str	r3, [sp, #44]	; 0x2c
    5116:	f013 fabb 	bl	18690 <ll_rl_id_addr_get>
				  &cc->peer_addr[0]);
		/* Mark it as identity address from RPA (0x02, 0x03) */
		cc->peer_addr_type += 2;
    511a:	7fa2      	ldrb	r2, [r4, #30]

		/* Store peer RPA */
		memcpy(&cc->peer_rpa[0], &peer_addr[0], BDADDR_SIZE);
    511c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		cc->peer_addr_type += 2;
    511e:	3202      	adds	r2, #2
    5120:	77a2      	strb	r2, [r4, #30]
		memcpy(&cc->peer_rpa[0], &peer_addr[0], BDADDR_SIZE);
    5122:	a90c      	add	r1, sp, #48	; 0x30
    5124:	4618      	mov	r0, r3
    5126:	2206      	movs	r2, #6
    5128:	f01a fea5 	bl	1fe76 <memcpy>
		cc->peer_addr_type = peer_addr_type;
		memcpy(cc->peer_addr, &peer_addr[0], BDADDR_SIZE);
	}

	cc->interval = lll->interval;
	cc->latency = lll->latency;
    512c:	8ab2      	ldrh	r2, [r6, #20]
	cc->timeout = scan->lll.conn_timeout;
    512e:	f8b9 3030 	ldrh.w	r3, [r9, #48]	; 0x30
	cc->interval = lll->interval;
    5132:	8a71      	ldrh	r1, [r6, #18]
    5134:	8661      	strh	r1, [r4, #50]	; 0x32
	cc->latency = lll->latency;
    5136:	86a2      	strh	r2, [r4, #52]	; 0x34
	cc->timeout = scan->lll.conn_timeout;
    5138:	86e3      	strh	r3, [r4, #54]	; 0x36
	cc->sca = lll_conn_sca_local_get();
    513a:	f015 f82f 	bl	1a19c <lll_conn_sca_local_get>
    513e:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38

	lll->handle = ll_conn_handle_get(conn);
    5142:	4628      	mov	r0, r5
    5144:	f010 f8c2 	bl	152cc <ll_conn_handle_get>
		} else {
			cs->csa = 0x00;
		}
	}

	ll_rx_put(link, rx);
    5148:	4621      	mov	r1, r4
	lll->handle = ll_conn_handle_get(conn);
    514a:	8230      	strh	r0, [r6, #16]
	rx->handle = lll->handle;
    514c:	80e0      	strh	r0, [r4, #6]
	ll_rx_put(link, rx);
    514e:	4640      	mov	r0, r8
    5150:	f00f f97a 	bl	14448 <ll_rx_put>
	ll_rx_sched();
    5154:	f00f f982 	bl	1445c <ll_rx_sched>


#if defined(CONFIG_BT_CTLR_PHY)
	ready_delay_us = lll_radio_tx_ready_delay_get(lll->phy_tx,
						      lll->phy_flags);
    5158:	f896 002c 	ldrb.w	r0, [r6, #44]	; 0x2c
	conn->evt.ticks_xtal_to_start =
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_XTAL_US);
	conn->evt.ticks_preempt_to_start =
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_PREEMPT_MIN_US);
	conn->evt.ticks_slot =
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    515c:	f8df 8180 	ldr.w	r8, [pc, #384]	; 52e0 <ull_master_setup+0x240>
	ready_delay_us = lll_radio_tx_ready_delay_get(lll->phy_tx,
    5160:	f3c0 01c0 	ubfx	r1, r0, #3, #1
    5164:	f000 0007 	and.w	r0, r0, #7
    5168:	f014 fc24 	bl	199b4 <lll_radio_tx_ready_delay_get>
	conn->evt.ticks_active_to_start = 0U;
    516c:	2400      	movs	r4, #0
	ready_delay_us = lll_radio_tx_ready_delay_get(lll->phy_tx,
    516e:	4683      	mov	fp, r0
	conn->evt.ticks_xtal_to_start =
    5170:	2331      	movs	r3, #49	; 0x31
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    5172:	f200 4052 	addw	r0, r0, #1106	; 0x452
	conn->evt.ticks_xtal_to_start =
    5176:	602b      	str	r3, [r5, #0]
	conn->evt.ticks_preempt_to_start =
    5178:	e9c5 4401 	strd	r4, r4, [r5, #4]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    517c:	a350      	add	r3, pc, #320	; (adr r3, 52c0 <ull_master_setup+0x220>)
    517e:	e9d3 2300 	ldrd	r2, r3, [r3]
    5182:	fba0 0108 	umull	r0, r1, r0, r8
    5186:	f7fb fc59 	bl	a3c <__aeabi_uldivmod>
    518a:	68fa      	ldr	r2, [r7, #12]
	}

	conn_interval_us = lll->interval * 1250;
	conn_offset_us = ftr->radio_end_us;
	/* BLEX: we modified zephyr code to update winoffset according to Bluetooth specification */
	conn_offset_us += ((uint64_t)win_offset +1)*1250U; 
    518c:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
	conn_interval_us = lll->interval * 1250;
    5190:	8a73      	ldrh	r3, [r6, #18]
    5192:	f240 46e2 	movw	r6, #1250	; 0x4e2
	conn_offset_us += ((uint64_t)win_offset +1)*1250U; 
    5196:	fb06 6a01 	mla	sl, r6, r1, r6
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    519a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    519e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
	conn->evt.ticks_slot =
    51a2:	60e8      	str	r0, [r5, #12]

#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	/* disable ticker job, in order to chain stop and start to avoid RTC
	 * being stopped if no tickers active.
	 */
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    51a4:	2102      	movs	r1, #2
	conn_offset_us -= EVENT_OVERHEAD_START_US;
    51a6:	4492      	add	sl, r2
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    51a8:	2001      	movs	r0, #1
    51aa:	4622      	mov	r2, r4
	conn_interval_us = lll->interval * 1250;
    51ac:	fb06 f603 	mul.w	r6, r6, r3
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    51b0:	f00a ffd8 	bl	10164 <mayfly_enable>
#endif

	/* Stop Scanner */
	ticker_id_scan = TICKER_ID_SCAN_BASE + ull_scan_handle_get(scan);
    51b4:	4648      	mov	r0, r9
    51b6:	f00f fc6d 	bl	14a94 <ull_scan_handle_get>
    51ba:	1c82      	adds	r2, r0, #2
    51bc:	b2d2      	uxtb	r2, r2
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    51be:	4b42      	ldr	r3, [pc, #264]	; (52c8 <ull_master_setup+0x228>)
				    TICKER_USER_ID_ULL_HIGH,
				    ticker_id_scan, ticker_op_stop_scan_cb,
				    (void *)(uint32_t)ticker_id_scan);
    51c0:	9200      	str	r2, [sp, #0]
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    51c2:	2101      	movs	r1, #1
    51c4:	4620      	mov	r0, r4
    51c6:	f00c fbf9 	bl	119bc <ticker_stop>

	/* Scanner stop can expire while here in this ISR.
	 * Deferred attempt to stop can fail as it would have
	 * expired, hence ignore failure.
	 */
	ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
    51ca:	2201      	movs	r2, #1
    51cc:	4611      	mov	r1, r2
    51ce:	4623      	mov	r3, r4
    51d0:	9400      	str	r4, [sp, #0]
    51d2:	4620      	mov	r0, r4
    51d4:	f00c fbf2 	bl	119bc <ticker_stop>
		    TICKER_ID_SCAN_STOP, NULL, NULL);

	/* Start master */
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    51d8:	4628      	mov	r0, r5
    51da:	f010 f877 	bl	152cc <ll_conn_handle_get>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    51de:	9506      	str	r5, [sp, #24]
    51e0:	4a3a      	ldr	r2, [pc, #232]	; (52cc <ull_master_setup+0x22c>)
    51e2:	4b3b      	ldr	r3, [pc, #236]	; (52d0 <ull_master_setup+0x230>)
    51e4:	f8d7 9008 	ldr.w	r9, [r7, #8]
    51e8:	9207      	str	r2, [sp, #28]
    51ea:	f240 21ca 	movw	r1, #714	; 0x2ca
    51ee:	9108      	str	r1, [sp, #32]
    51f0:	9305      	str	r3, [sp, #20]
    51f2:	68eb      	ldr	r3, [r5, #12]
    51f4:	9304      	str	r3, [sp, #16]
				     TICKER_USER_ID_ULL_HIGH,
				     ticker_id_conn,
				     ftr->ticks_anchor - ticks_slot_offset,
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    51f6:	fb86 6708 	smull	r6, r7, r6, r8
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    51fa:	f100 0c03 	add.w	ip, r0, #3
				     HAL_TICKER_REMAINDER(conn_interval_us),
    51fe:	a330      	add	r3, pc, #192	; (adr r3, 52c0 <ull_master_setup+0x220>)
    5200:	e9d3 2300 	ldrd	r2, r3, [r3]
    5204:	4630      	mov	r0, r6
    5206:	4639      	mov	r1, r7
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    5208:	fa5f f58c 	uxtb.w	r5, ip
    520c:	9403      	str	r4, [sp, #12]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    520e:	f7fb fc15 	bl	a3c <__aeabi_uldivmod>
    5212:	4610      	mov	r0, r2
    5214:	4619      	mov	r1, r3
    5216:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    521a:	2300      	movs	r3, #0
    521c:	f7fb fc0e 	bl	a3c <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    5220:	a327      	add	r3, pc, #156	; (adr r3, 52c0 <ull_master_setup+0x220>)
    5222:	e9d3 2300 	ldrd	r2, r3, [r3]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    5226:	4684      	mov	ip, r0
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    5228:	4639      	mov	r1, r7
    522a:	4630      	mov	r0, r6
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    522c:	f8cd c008 	str.w	ip, [sp, #8]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    5230:	f7fb fc04 	bl	a3c <__aeabi_uldivmod>
	conn_offset_us -= ready_delay_us;
    5234:	ebaa 0a0b 	sub.w	sl, sl, fp
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    5238:	a321      	add	r3, pc, #132	; (adr r3, 52c0 <ull_master_setup+0x220>)
    523a:	e9d3 2300 	ldrd	r2, r3, [r3]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    523e:	4606      	mov	r6, r0
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    5240:	fbaa 0108 	umull	r0, r1, sl, r8
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    5244:	9601      	str	r6, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    5246:	f7fb fbf9 	bl	a3c <__aeabi_uldivmod>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    524a:	f1a9 0931 	sub.w	r9, r9, #49	; 0x31
    524e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    5252:	464b      	mov	r3, r9
    5254:	9000      	str	r0, [sp, #0]
    5256:	462a      	mov	r2, r5
    5258:	4620      	mov	r0, r4
    525a:	2101      	movs	r1, #1
    525c:	f00c fb42 	bl	118e4 <ticker_start>
				     TICKER_NULL_LAZY,
				     (conn->evt.ticks_slot +
				      ticks_slot_overhead),
				     ull_master_ticker_cb, conn, ticker_op_cb,
				     (void *)__LINE__);
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    5260:	f030 0302 	bics.w	r3, r0, #2
    5264:	d00c      	beq.n	5280 <ull_master_setup+0x1e0>
    5266:	4a1b      	ldr	r2, [pc, #108]	; (52d4 <ull_master_setup+0x234>)
    5268:	491b      	ldr	r1, [pc, #108]	; (52d8 <ull_master_setup+0x238>)
    526a:	481c      	ldr	r0, [pc, #112]	; (52dc <ull_master_setup+0x23c>)
    526c:	f240 23cb 	movw	r3, #715	; 0x2cb
    5270:	f018 fe6f 	bl	1df52 <printk>
    5274:	4040      	eors	r0, r0
    5276:	f380 8811 	msr	BASEPRI, r0
    527a:	f04f 0003 	mov.w	r0, #3
    527e:	df02      	svc	2

#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	/* enable ticker job, irrespective of disabled in this function so
	 * first connection event can be scheduled as soon as possible.
	 */
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
    5280:	2201      	movs	r2, #1
    5282:	4610      	mov	r0, r2
    5284:	2102      	movs	r1, #2
    5286:	f00a ff6d 	bl	10164 <mayfly_enable>
#endif
}
    528a:	b00f      	add	sp, #60	; 0x3c
    528c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memset(&cc->local_rpa[0], 0x0, BDADDR_SIZE);
    5290:	f01a fe1c 	bl	1fecc <memset>
	if (rl_idx != FILTER_IDX_NONE) {
    5294:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    5298:	f104 0325 	add.w	r3, r4, #37	; 0x25
    529c:	f104 0b1f 	add.w	fp, r4, #31
    52a0:	f47f af34 	bne.w	510c <ull_master_setup+0x6c>
		memset(&cc->peer_rpa[0], 0x0, BDADDR_SIZE);
    52a4:	4618      	mov	r0, r3
    52a6:	2206      	movs	r2, #6
    52a8:	2100      	movs	r1, #0
    52aa:	f01a fe0f 	bl	1fecc <memset>
		cc->peer_addr_type = peer_addr_type;
    52ae:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    52b2:	77a3      	strb	r3, [r4, #30]
		memcpy(cc->peer_addr, &peer_addr[0], BDADDR_SIZE);
    52b4:	a90c      	add	r1, sp, #48	; 0x30
    52b6:	4658      	mov	r0, fp
    52b8:	2206      	movs	r2, #6
    52ba:	f01a fddc 	bl	1fe76 <memcpy>
    52be:	e735      	b.n	512c <ull_master_setup+0x8c>
    52c0:	1afd498d 	.word	0x1afd498d
    52c4:	00000007 	.word	0x00000007
    52c8:	00017cd1 	.word	0x00017cd1
    52cc:	00017cd5 	.word	0x00017cd5
    52d0:	00017d05 	.word	0x00017d05
    52d4:	0002465c 	.word	0x0002465c
    52d8:	0002458c 	.word	0x0002458c
    52dc:	00023ff4 	.word	0x00023ff4
    52e0:	3b9aca00 	.word	0x3b9aca00
    52e4:	00000000 	.word	0x00000000

000052e8 <isr_rx>:

	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
}

static void isr_rx(void *param)
{
    52e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    52ec:	b083      	sub	sp, #12
    52ee:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CTLR_PROFILE_ISR)) {
		lll_prof_latency_capture();
	}

	/* Read radio status and events */
	trx_done = radio_is_done();
    52f0:	f015 fe8a 	bl	1b008 <radio_is_done>
	if (trx_done) {
    52f4:	f010 0fff 	tst.w	r0, #255	; 0xff
    52f8:	d10a      	bne.n	5310 <isr_rx+0x28>
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0U;
		devmatch_id = irkmatch_id = 0xFF;
	}

	/* Clear radio status and events */
	lll_isr_status_reset();
    52fa:	f014 fb6f 	bl	199dc <lll_isr_status_reset>
			return;
		}
	}

isr_rx_do_close:
	radio_isr_set(isr_done, lll);
    52fe:	48cc      	ldr	r0, [pc, #816]	; (5630 <isr_rx+0x348>)
    5300:	4621      	mov	r1, r4
    5302:	f015 fd47 	bl	1ad94 <radio_isr_set>
	radio_disable();
}
    5306:	b003      	add	sp, #12
    5308:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	radio_disable();
    530c:	f015 be4e 	b.w	1afac <radio_disable>
		crc_ok = radio_crc_is_valid();
    5310:	f015 fe9a 	bl	1b048 <radio_crc_is_valid>
    5314:	fa5f f880 	uxtb.w	r8, r0
		devmatch_ok = radio_filter_has_match();
    5318:	f015 ff20 	bl	1b15c <radio_filter_has_match>
    531c:	b2c6      	uxtb	r6, r0
		devmatch_id = radio_filter_match_get();
    531e:	f015 ff27 	bl	1b170 <radio_filter_match_get>
    5322:	4607      	mov	r7, r0
		irkmatch_ok = radio_ar_has_match();
    5324:	f016 f926 	bl	1b574 <radio_ar_has_match>
    5328:	b2c5      	uxtb	r5, r0
		irkmatch_id = radio_ar_match_get();
    532a:	f016 f911 	bl	1b550 <radio_ar_match_get>
    532e:	4682      	mov	sl, r0
		rssi_ready = radio_rssi_is_ready();
    5330:	f015 fedc 	bl	1b0ec <radio_rssi_is_ready>
    5334:	4681      	mov	r9, r0
	lll_isr_status_reset();
    5336:	f014 fb51 	bl	199dc <lll_isr_status_reset>
	rl_idx = devmatch_ok ?
    533a:	2e00      	cmp	r6, #0
    533c:	f040 80a2 	bne.w	5484 <isr_rx+0x19c>
    5340:	2d00      	cmp	r5, #0
    5342:	f040 80b1 	bne.w	54a8 <isr_rx+0x1c0>
    5346:	27ff      	movs	r7, #255	; 0xff
	if (crc_ok && isr_rx_scan_check(lll, irkmatch_ok, devmatch_ok,
    5348:	f1b8 0f00 	cmp.w	r8, #0
    534c:	d0d7      	beq.n	52fe <isr_rx+0x16>

static inline bool isr_rx_scan_check(struct lll_scan *lll, uint8_t irkmatch_ok,
				     uint8_t devmatch_ok, uint8_t rl_idx)
{
#if defined(CONFIG_BT_CTLR_PRIVACY)
	return (((lll->filter_policy & 0x01) == 0) &&
    534e:	7da3      	ldrb	r3, [r4, #22]
		 (!devmatch_ok || ull_filter_lll_rl_idx_allowed(irkmatch_ok,
								rl_idx))) ||
    5350:	0719      	lsls	r1, r3, #28
    5352:	f100 809f 	bmi.w	5494 <isr_rx+0x1ac>
	return (((lll->filter_policy & 0x01) == 0) &&
    5356:	2e00      	cmp	r6, #0
    5358:	f040 814f 	bne.w	55fa <isr_rx+0x312>
{
	struct node_rx_pdu *node_rx;
	struct pdu_adv *pdu_adv_rx;
	bool dir_report = false;

	node_rx = ull_pdu_rx_alloc_peek(1);
    535c:	2001      	movs	r0, #1
    535e:	f00f f97d 	bl	1465c <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
    5362:	4680      	mov	r8, r0
    5364:	2800      	cmp	r0, #0
    5366:	f000 8167 	beq.w	5638 <isr_rx+0x350>
	pdu_adv_rx = (void *)node_rx->pdu;

	if (0) {
#if defined(CONFIG_BT_CENTRAL)
	/* Initiator */
	} else if ((lll->conn) &&
    536a:	68a3      	ldr	r3, [r4, #8]
		rssi_ready = radio_rssi_is_ready();
    536c:	fa5f f689 	uxtb.w	r6, r9
	} else if ((lll->conn) &&
    5370:	2b00      	cmp	r3, #0
    5372:	f000 80cc 	beq.w	550e <isr_rx+0x226>
}

static inline bool isr_scan_init_check(struct lll_scan *lll,
				       struct pdu_adv *pdu, uint8_t rl_idx)
{
	return ((((lll->filter_policy & 0x01) != 0U) ||
    5376:	7da3      	ldrb	r3, [r4, #22]
		 isr_scan_init_adva_check(lll, pdu, rl_idx)) &&
    5378:	071a      	lsls	r2, r3, #28
    537a:	f140 814a 	bpl.w	5612 <isr_rx+0x32a>
		(((pdu->type == PDU_ADV_TYPE_ADV_IND) &&
    537e:	f898 001c 	ldrb.w	r0, [r8, #28]
		 isr_scan_init_adva_check(lll, pdu, rl_idx)) &&
    5382:	f010 030f 	ands.w	r3, r0, #15
    5386:	f040 8095 	bne.w	54b4 <isr_rx+0x1cc>
		(((pdu->type == PDU_ADV_TYPE_ADV_IND) &&
    538a:	f898 301d 	ldrb.w	r3, [r8, #29]
    538e:	2b25      	cmp	r3, #37	; 0x25
    5390:	f200 810c 	bhi.w	55ac <isr_rx+0x2c4>
			rx = ull_pdu_rx_alloc_peek(3);
    5394:	2003      	movs	r0, #3
    5396:	f00f f961 	bl	1465c <ull_pdu_rx_alloc_peek>
		if (!rx) {
    539a:	2800      	cmp	r0, #0
    539c:	d0af      	beq.n	52fe <isr_rx+0x16>
		pdu_end_us = radio_tmr_end_get();
    539e:	f015 fff1 	bl	1b384 <radio_tmr_end_get>
		if (!lll->ticks_window) {
    53a2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
		pdu_end_us = radio_tmr_end_get();
    53a4:	4681      	mov	r9, r0
		if (!lll->ticks_window) {
    53a6:	b943      	cbnz	r3, 53ba <isr_rx+0xd2>
			scan_interval_us = lll->interval * 625U;
    53a8:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
    53aa:	f240 2371 	movw	r3, #625	; 0x271
    53ae:	fb03 f302 	mul.w	r3, r3, r2
			pdu_end_us %= scan_interval_us;
    53b2:	fbb0 f2f3 	udiv	r2, r0, r3
    53b6:	fb03 0912 	mls	r9, r3, r2, r0
		if (pdu_end_us > (HAL_TICKER_TICKS_TO_US(evt->ticks_slot) -
    53ba:	6823      	ldr	r3, [r4, #0]
    53bc:	489d      	ldr	r0, [pc, #628]	; (5634 <isr_rx+0x34c>)
    53be:	68db      	ldr	r3, [r3, #12]
    53c0:	2207      	movs	r2, #7
    53c2:	fba3 0100 	umull	r0, r1, r3, r0
    53c6:	fb02 1103 	mla	r1, r2, r3, r1
    53ca:	a397      	add	r3, pc, #604	; (adr r3, 5628 <isr_rx+0x340>)
    53cc:	e9d3 2300 	ldrd	r2, r3, [r3]
    53d0:	f7fb fb34 	bl	a3c <__aeabi_uldivmod>
				  EVENT_IFS_US - 352 - EVENT_OVERHEAD_START_US -
    53d4:	f2a0 3342 	subw	r3, r0, #834	; 0x342
		if (pdu_end_us > (HAL_TICKER_TICKS_TO_US(evt->ticks_slot) -
    53d8:	454b      	cmp	r3, r9
    53da:	d390      	bcc.n	52fe <isr_rx+0x16>
		radio_switch_complete_and_disable();
    53dc:	f015 fe60 	bl	1b0a0 <radio_switch_complete_and_disable>
		lll_conn = lll->conn;
    53e0:	f8d4 a008 	ldr.w	sl, [r4, #8]
		pdu_tx = (void *)radio_pkt_scratch_get();
    53e4:	f015 fe3e 	bl	1b064 <radio_pkt_scratch_get>
		pdu_tx->rx_addr = pdu_adv_rx->tx_addr;
    53e8:	f898 301c 	ldrb.w	r3, [r8, #28]
		pdu_tx->type = PDU_ADV_TYPE_CONNECT_IND;
    53ec:	7802      	ldrb	r2, [r0, #0]
		pdu_tx->rx_addr = pdu_adv_rx->tx_addr;
    53ee:	f3c3 1380 	ubfx	r3, r3, #6, #1
		pdu_tx->type = PDU_ADV_TYPE_CONNECT_IND;
    53f2:	01db      	lsls	r3, r3, #7
    53f4:	f002 0250 	and.w	r2, r2, #80	; 0x50
    53f8:	f043 0305 	orr.w	r3, r3, #5
    53fc:	4313      	orrs	r3, r2
		pdu_tx->len = sizeof(struct pdu_adv_connect_ind);
    53fe:	2222      	movs	r2, #34	; 0x22
		pdu_tx->type = PDU_ADV_TYPE_CONNECT_IND;
    5400:	7003      	strb	r3, [r0, #0]
		pdu_tx->len = sizeof(struct pdu_adv_connect_ind);
    5402:	7042      	strb	r2, [r0, #1]
		pdu_tx = (void *)radio_pkt_scratch_get();
    5404:	4681      	mov	r9, r0
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
    5406:	4638      	mov	r0, r7
    5408:	f013 fdf6 	bl	18ff8 <ull_filter_lll_lrpa_get>
		if (lll->rpa_gen && lrpa) {
    540c:	7de3      	ldrb	r3, [r4, #23]
    540e:	07da      	lsls	r2, r3, #31
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
    5410:	4683      	mov	fp, r0
		if (lll->rpa_gen && lrpa) {
    5412:	f109 0002 	add.w	r0, r9, #2
    5416:	f140 8126 	bpl.w	5666 <isr_rx+0x37e>
    541a:	f1bb 0f00 	cmp.w	fp, #0
    541e:	f000 8122 	beq.w	5666 <isr_rx+0x37e>
			pdu_tx->tx_addr = 1;
    5422:	f899 3000 	ldrb.w	r3, [r9]
    5426:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    542a:	f889 3000 	strb.w	r3, [r9]
			memcpy(&pdu_tx->connect_ind.init_addr[0], lrpa->val,
    542e:	2206      	movs	r2, #6
    5430:	4659      	mov	r1, fp
    5432:	f01a fd20 	bl	1fe76 <memcpy>
		memcpy(&pdu_tx->connect_ind.adv_addr[0],
    5436:	2206      	movs	r2, #6
    5438:	f108 011e 	add.w	r1, r8, #30
    543c:	f109 0008 	add.w	r0, r9, #8
    5440:	f01a fd19 	bl	1fe76 <memcpy>
		memcpy(&pdu_tx->connect_ind.access_addr[0],
    5444:	2204      	movs	r2, #4
    5446:	f10a 0108 	add.w	r1, sl, #8
    544a:	f109 000e 	add.w	r0, r9, #14
    544e:	f01a fd12 	bl	1fe76 <memcpy>
		memcpy(&pdu_tx->connect_ind.crc_init[0],
    5452:	2203      	movs	r2, #3
    5454:	f10a 010c 	add.w	r1, sl, #12
    5458:	f109 0012 	add.w	r0, r9, #18
    545c:	f01a fd0b 	bl	1fe76 <memcpy>
		pdu_tx->connect_ind.win_size = 1;
    5460:	2301      	movs	r3, #1
    5462:	f889 3015 	strb.w	r3, [r9, #21]
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    5466:	f015 ff8d 	bl	1b384 <radio_tmr_end_get>
    546a:	4603      	mov	r3, r0
			win_offset_dummy = set_winoffset(lll_conn);
    546c:	4650      	mov	r0, sl
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    546e:	9301      	str	r3, [sp, #4]
			win_offset_dummy = set_winoffset(lll_conn);
    5470:	f012 fb56 	bl	17b20 <set_winoffset>
    5474:	b283      	uxth	r3, r0
			if(win_offset_dummy > 2048){
    5476:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    547a:	f240 811a 	bls.w	56b2 <isr_rx+0x3ca>
}
    547e:	b003      	add	sp, #12
    5480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		 ull_filter_lll_rl_idx(!!(lll->filter_policy & 0x01),
    5484:	7da0      	ldrb	r0, [r4, #22]
    5486:	b2f9      	uxtb	r1, r7
    5488:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    548c:	f013 fdd2 	bl	19034 <ull_filter_lll_rl_idx>
    5490:	4607      	mov	r7, r0
    5492:	e759      	b.n	5348 <isr_rx+0x60>
		(((lll->filter_policy & 0x01) != 0) &&
    5494:	2e00      	cmp	r6, #0
    5496:	f47f af61 	bne.w	535c <isr_rx+0x74>
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(rl_idx)));
    549a:	4638      	mov	r0, r7
    549c:	f013 fe86 	bl	191ac <ull_filter_lll_irk_whitelisted>
    54a0:	2800      	cmp	r0, #0
    54a2:	f47f af5b 	bne.w	535c <isr_rx+0x74>
    54a6:	e72a      	b.n	52fe <isr_rx+0x16>
		 irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
    54a8:	fa5f f08a 	uxtb.w	r0, sl
    54ac:	f013 fe2c 	bl	19108 <ull_filter_lll_rl_irk_idx>
    54b0:	4607      	mov	r7, r0
    54b2:	e749      	b.n	5348 <isr_rx+0x60>
		  (pdu->len <= sizeof(struct pdu_adv_adv_ind))) ||
    54b4:	2b01      	cmp	r3, #1
    54b6:	d151      	bne.n	555c <isr_rx+0x274>
		 ((pdu->type == PDU_ADV_TYPE_DIRECT_IND) &&
    54b8:	f898 301d 	ldrb.w	r3, [r8, #29]
    54bc:	2b0c      	cmp	r3, #12
    54be:	f47f af1e 	bne.w	52fe <isr_rx+0x16>
				       struct pdu_adv *pdu, uint8_t rl_idx,
				       bool *dir_report)
{
#if defined(CONFIG_BT_CTLR_PRIVACY)
	if (ull_filter_lll_rl_addr_resolve(pdu->rx_addr,
					   pdu->direct_ind.tgt_addr, rl_idx)) {
    54c2:	f108 0924 	add.w	r9, r8, #36	; 0x24
	if (ull_filter_lll_rl_addr_resolve(pdu->rx_addr,
    54c6:	09c0      	lsrs	r0, r0, #7
    54c8:	4649      	mov	r1, r9
    54ca:	463a      	mov	r2, r7
    54cc:	f013 fede 	bl	1928c <ull_filter_lll_rl_addr_resolve>
    54d0:	2800      	cmp	r0, #0
    54d2:	f47f af5f 	bne.w	5394 <isr_rx+0xac>
		return true;
	} else if (init && lll->rpa_gen &&
    54d6:	7de3      	ldrb	r3, [r4, #23]
    54d8:	07db      	lsls	r3, r3, #31
    54da:	f100 81d2 	bmi.w	5882 <isr_rx+0x59a>
		 */
		return false;
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */

	return (((lll->init_addr_type == pdu->rx_addr) &&
    54de:	7da3      	ldrb	r3, [r4, #22]
    54e0:	f898 001c 	ldrb.w	r0, [r8, #28]
		!memcmp(lll->init_addr, pdu->direct_ind.tgt_addr,
			BDADDR_SIZE))) ||
    54e4:	f3c3 1280 	ubfx	r2, r3, #6, #1
    54e8:	ebb2 1fd0 	cmp.w	r2, r0, lsr #7
    54ec:	f000 81f4 	beq.w	58d8 <isr_rx+0x5f0>

static inline bool isr_scan_tgta_rpa_check(struct lll_scan *lll,
					   struct pdu_adv *pdu,
					   bool *dir_report)
{
	if (((lll->filter_policy & 0x02) != 0U) &&
    54f0:	f3c3 03c1 	ubfx	r3, r3, #3, #2
    54f4:	0798      	lsls	r0, r3, #30
    54f6:	d50a      	bpl.n	550e <isr_rx+0x226>
    54f8:	f998 301c 	ldrsb.w	r3, [r8, #28]
    54fc:	2b00      	cmp	r3, #0
    54fe:	da06      	bge.n	550e <isr_rx+0x226>
	    (pdu->rx_addr != 0) &&
    5500:	f898 3029 	ldrb.w	r3, [r8, #41]	; 0x29
    5504:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    5508:	2b40      	cmp	r3, #64	; 0x40
    550a:	f43f af43 	beq.w	5394 <isr_rx+0xac>
    550e:	f898 001c 	ldrb.w	r0, [r8, #28]
	} else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    5512:	f010 030f 	ands.w	r3, r0, #15
    5516:	d121      	bne.n	555c <isr_rx+0x274>
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    5518:	f898 301d 	ldrb.w	r3, [r8, #29]
    551c:	2b25      	cmp	r3, #37	; 0x25
    551e:	f63f aeee 	bhi.w	52fe <isr_rx+0x16>
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind)) &&
    5522:	f994 2016 	ldrsb.w	r2, [r4, #22]
    5526:	2a00      	cmp	r2, #0
    5528:	da03      	bge.n	5532 <isr_rx+0x24a>
		   lll->type &&
    552a:	68a2      	ldr	r2, [r4, #8]
    552c:	2a00      	cmp	r2, #0
    552e:	f000 8138 	beq.w	57a2 <isr_rx+0x4ba>
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    5532:	2b25      	cmp	r3, #37	; 0x25
	bool dir_report = false;
    5534:	bf98      	it	ls
    5536:	f04f 0900 	movls.w	r9, #0
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    553a:	d837      	bhi.n	55ac <isr_rx+0x2c4>
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
    553c:	2b00      	cmp	r3, #0
    553e:	f43f aede 	beq.w	52fe <isr_rx+0x16>
		 (pdu_adv_rx->len != 0) &&
    5542:	68a3      	ldr	r3, [r4, #8]
    5544:	2b00      	cmp	r3, #0
    5546:	f47f aeda 	bne.w	52fe <isr_rx+0x16>
		err = isr_rx_scan_report(lll, rssi_ready,
    554a:	2d00      	cmp	r5, #0
    554c:	bf14      	ite	ne
    554e:	4639      	movne	r1, r7
    5550:	21ff      	moveq	r1, #255	; 0xff
    5552:	464a      	mov	r2, r9
    5554:	4630      	mov	r0, r6
    5556:	f014 fd65 	bl	1a024 <isr_rx_scan_report.isra.0>
		if (err) {
    555a:	e6d0      	b.n	52fe <isr_rx+0x16>
	} else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    555c:	2b06      	cmp	r3, #6
    555e:	d079      	beq.n	5654 <isr_rx+0x36c>
	else if (((((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    5560:	2b02      	cmp	r3, #2
    5562:	d07d      	beq.n	5660 <isr_rx+0x378>
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind))) ||
    5564:	2b01      	cmp	r3, #1
    5566:	d121      	bne.n	55ac <isr_rx+0x2c4>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
    5568:	f898 301d 	ldrb.w	r3, [r8, #29]
    556c:	2b0c      	cmp	r3, #12
    556e:	f47f aec6 	bne.w	52fe <isr_rx+0x16>
					   pdu->direct_ind.tgt_addr, rl_idx)) {
    5572:	f108 0a24 	add.w	sl, r8, #36	; 0x24
	if (ull_filter_lll_rl_addr_resolve(pdu->rx_addr,
    5576:	09c0      	lsrs	r0, r0, #7
    5578:	4651      	mov	r1, sl
    557a:	463a      	mov	r2, r7
    557c:	f013 fe86 	bl	1928c <ull_filter_lll_rl_addr_resolve>
    5580:	4681      	mov	r9, r0
    5582:	bba8      	cbnz	r0, 55f0 <isr_rx+0x308>
	return (((lll->init_addr_type == pdu->rx_addr) &&
    5584:	7da3      	ldrb	r3, [r4, #22]
    5586:	f898 001c 	ldrb.w	r0, [r8, #28]
			BDADDR_SIZE))) ||
    558a:	f3c3 1280 	ubfx	r2, r3, #6, #1
    558e:	ebb2 1fd0 	cmp.w	r2, r0, lsr #7
    5592:	f000 8198 	beq.w	58c6 <isr_rx+0x5de>
	if (((lll->filter_policy & 0x02) != 0U) &&
    5596:	f3c3 03c1 	ubfx	r3, r3, #3, #2
    559a:	0798      	lsls	r0, r3, #30
    559c:	d504      	bpl.n	55a8 <isr_rx+0x2c0>
    559e:	f998 301c 	ldrsb.w	r3, [r8, #28]
    55a2:	2b00      	cmp	r3, #0
    55a4:	f2c0 8183 	blt.w	58ae <isr_rx+0x5c6>
    55a8:	f898 001c 	ldrb.w	r0, [r8, #28]
					&dir_report))) ||
    55ac:	f000 000f 	and.w	r0, r0, #15
    55b0:	2804      	cmp	r0, #4
    55b2:	f47f aea4 	bne.w	52fe <isr_rx+0x16>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
    55b6:	f898 301d 	ldrb.w	r3, [r8, #29]
    55ba:	2b25      	cmp	r3, #37	; 0x25
    55bc:	f63f ae9f 	bhi.w	52fe <isr_rx+0x16>
		   (lll->state != 0U) &&
    55c0:	7da3      	ldrb	r3, [r4, #22]
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_scan_rsp)) &&
    55c2:	07da      	lsls	r2, r3, #31
    55c4:	f57f ae9b 	bpl.w	52fe <isr_rx+0x16>
	return false;
}

static inline bool isr_scan_rsp_adva_matches(struct pdu_adv *srsp)
{
	struct pdu_adv *sreq = (void *)radio_pkt_scratch_get();
    55c8:	f015 fd4c 	bl	1b064 <radio_pkt_scratch_get>

	return ((sreq->rx_addr == srsp->tx_addr) &&
    55cc:	f898 301c 	ldrb.w	r3, [r8, #28]
    55d0:	7802      	ldrb	r2, [r0, #0]
    55d2:	f3c3 1380 	ubfx	r3, r3, #6, #1
    55d6:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    55da:	f47f ae90 	bne.w	52fe <isr_rx+0x16>
		(memcmp(&sreq->scan_req.adv_addr[0],
    55de:	3008      	adds	r0, #8
    55e0:	2206      	movs	r2, #6
    55e2:	f108 011e 	add.w	r1, r8, #30
    55e6:	f01a fc36 	bl	1fe56 <memcmp>
	return ((sreq->rx_addr == srsp->tx_addr) &&
    55ea:	2800      	cmp	r0, #0
    55ec:	f47f ae87 	bne.w	52fe <isr_rx+0x16>
    55f0:	f898 301d 	ldrb.w	r3, [r8, #29]
	bool dir_report = false;
    55f4:	f04f 0900 	mov.w	r9, #0
    55f8:	e7a0      	b.n	553c <isr_rx+0x254>
		 (!devmatch_ok || ull_filter_lll_rl_idx_allowed(irkmatch_ok,
    55fa:	4639      	mov	r1, r7
    55fc:	4628      	mov	r0, r5
    55fe:	f013 fe11 	bl	19224 <ull_filter_lll_rl_idx_allowed>
    5602:	2800      	cmp	r0, #0
    5604:	f47f aeaa 	bne.w	535c <isr_rx+0x74>
		(((lll->filter_policy & 0x01) != 0) &&
    5608:	7da3      	ldrb	r3, [r4, #22]
								rl_idx))) ||
    560a:	071b      	lsls	r3, r3, #28
    560c:	f57f ae77 	bpl.w	52fe <isr_rx+0x16>
    5610:	e6a4      	b.n	535c <isr_rx+0x74>
	if (rl_idx != FILTER_IDX_NONE) {
    5612:	2fff      	cmp	r7, #255	; 0xff
    5614:	d036      	beq.n	5684 <isr_rx+0x39c>
		return (rl_idx == lll->rl_idx);
    5616:	7e23      	ldrb	r3, [r4, #24]
    5618:	1bdb      	subs	r3, r3, r7
    561a:	fab3 f383 	clz	r3, r3
    561e:	095b      	lsrs	r3, r3, #5
	return ((((lll->filter_policy & 0x01) != 0U) ||
    5620:	2b00      	cmp	r3, #0
    5622:	f47f aeac 	bne.w	537e <isr_rx+0x96>
    5626:	e772      	b.n	550e <isr_rx+0x226>
    5628:	3b9aca00 	.word	0x3b9aca00
    562c:	00000000 	.word	0x00000000
    5630:	00019d81 	.word	0x00019d81
    5634:	1afd498d 	.word	0x1afd498d
	LL_ASSERT(node_rx);
    5638:	4ab5      	ldr	r2, [pc, #724]	; (5910 <isr_rx+0x628>)
    563a:	49b6      	ldr	r1, [pc, #728]	; (5914 <isr_rx+0x62c>)
    563c:	48b6      	ldr	r0, [pc, #728]	; (5918 <isr_rx+0x630>)
    563e:	f240 2396 	movw	r3, #662	; 0x296
    5642:	f018 fc86 	bl	1df52 <printk>
    5646:	4040      	eors	r0, r0
    5648:	f380 8811 	msr	BASEPRI, r0
    564c:	f04f 0003 	mov.w	r0, #3
    5650:	df02      	svc	2
    5652:	e68a      	b.n	536a <isr_rx+0x82>
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    5654:	f898 301d 	ldrb.w	r3, [r8, #29]
    5658:	2b25      	cmp	r3, #37	; 0x25
    565a:	f67f af62 	bls.w	5522 <isr_rx+0x23a>
    565e:	e7a5      	b.n	55ac <isr_rx+0x2c4>
    5660:	f898 301d 	ldrb.w	r3, [r8, #29]
    5664:	e765      	b.n	5532 <isr_rx+0x24a>
			pdu_tx->tx_addr = lll->init_addr_type;
    5666:	7da3      	ldrb	r3, [r4, #22]
    5668:	f899 2000 	ldrb.w	r2, [r9]
    566c:	f3c3 1380 	ubfx	r3, r3, #6, #1
    5670:	f363 1286 	bfi	r2, r3, #6, #1
    5674:	f889 2000 	strb.w	r2, [r9]
			memcpy(&pdu_tx->connect_ind.init_addr[0],
    5678:	f104 0119 	add.w	r1, r4, #25
    567c:	2206      	movs	r2, #6
    567e:	f01a fbfa 	bl	1fe76 <memcpy>
    5682:	e6d8      	b.n	5436 <isr_rx+0x14e>
	return ((lll->adv_addr_type == pdu->tx_addr) &&
    5684:	f898 001c 	ldrb.w	r0, [r8, #28]
    5688:	f3c3 1340 	ubfx	r3, r3, #5, #1
    568c:	f3c0 1280 	ubfx	r2, r0, #6, #1
    5690:	4293      	cmp	r3, r2
    5692:	f47f af3e 	bne.w	5512 <isr_rx+0x22a>
		!memcmp(lll->adv_addr, &pdu->adv_ind.addr[0], BDADDR_SIZE));
    5696:	2206      	movs	r2, #6
    5698:	f108 011e 	add.w	r1, r8, #30
    569c:	f104 001f 	add.w	r0, r4, #31
    56a0:	f01a fbd9 	bl	1fe56 <memcmp>
	return ((lll->adv_addr_type == pdu->tx_addr) &&
    56a4:	fab0 f380 	clz	r3, r0
    56a8:	095b      	lsrs	r3, r3, #5
	return ((((lll->filter_policy & 0x01) != 0U) ||
    56aa:	2b00      	cmp	r3, #0
    56ac:	f47f ae67 	bne.w	537e <isr_rx+0x96>
    56b0:	e72d      	b.n	550e <isr_rx+0x226>
		pdu_tx->connect_ind.interval =
    56b2:	f8ba 0012 	ldrh.w	r0, [sl, #18]
		pdu_tx->connect_ind.latency =
    56b6:	f8ba 1014 	ldrh.w	r1, [sl, #20]
		pdu_tx->connect_ind.timeout =
    56ba:	8aa2      	ldrh	r2, [r4, #20]
    56bc:	f8a9 201c 	strh.w	r2, [r9, #28]
			pdu_tx->connect_ind.win_offset = sys_cpu_to_le16(win_offset_dummy);
    56c0:	f8a9 3016 	strh.w	r3, [r9, #22]
		pdu_tx->connect_ind.interval =
    56c4:	f8a9 0018 	strh.w	r0, [r9, #24]
		pdu_tx->connect_ind.latency =
    56c8:	f8a9 101a 	strh.w	r1, [r9, #26]
		memcpy(&pdu_tx->connect_ind.chan_map[0],
    56cc:	2205      	movs	r2, #5
    56ce:	f10a 011c 	add.w	r1, sl, #28
    56d2:	f109 001e 	add.w	r0, r9, #30
    56d6:	f01a fbce 	bl	1fe76 <memcpy>
		pdu_tx->connect_ind.hop = lll_conn->data_chan_hop;
    56da:	f89a 2022 	ldrb.w	r2, [sl, #34]	; 0x22
    56de:	f899 3023 	ldrb.w	r3, [r9, #35]	; 0x23
    56e2:	f362 0304 	bfi	r3, r2, #0, #5
    56e6:	f889 3023 	strb.w	r3, [r9, #35]	; 0x23
		pdu_tx->connect_ind.sca = lll_conn_sca_local_get();
    56ea:	f014 fd57 	bl	1a19c <lll_conn_sca_local_get>
    56ee:	f899 3023 	ldrb.w	r3, [r9, #35]	; 0x23
    56f2:	f360 1347 	bfi	r3, r0, #5, #3
    56f6:	f889 3023 	strb.w	r3, [r9, #35]	; 0x23
		radio_pkt_tx_set(pdu_tx);
    56fa:	4648      	mov	r0, r9
    56fc:	f015 fc30 	bl	1af60 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    5700:	f015 fc78 	bl	1aff4 <radio_is_ready>
    5704:	2800      	cmp	r0, #0
    5706:	f040 809b 	bne.w	5840 <isr_rx+0x558>
		radio_isr_set(isr_cleanup, lll);
    570a:	4884      	ldr	r0, [pc, #528]	; (591c <isr_rx+0x634>)
    570c:	4621      	mov	r1, r4
    570e:	f015 fb41 	bl	1ad94 <radio_isr_set>
		if (rssi_ready) {
    5712:	2e00      	cmp	r6, #0
    5714:	f040 80b0 	bne.w	5878 <isr_rx+0x590>
}

static inline int lll_stop(void *lll)
{
	struct lll_hdr *hdr = lll;
	int ret = !!hdr->is_stop;
    5718:	7923      	ldrb	r3, [r4, #4]

	hdr->is_stop = 1U;
    571a:	f043 0201 	orr.w	r2, r3, #1
		LL_ASSERT(!ret);
    571e:	07db      	lsls	r3, r3, #31
    5720:	7122      	strb	r2, [r4, #4]
    5722:	f100 809b 	bmi.w	585c <isr_rx+0x574>
		rx = ull_pdu_rx_alloc();
    5726:	f00e ffb7 	bl	14698 <ull_pdu_rx_alloc>
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    572a:	2309      	movs	r3, #9
		rx = ull_pdu_rx_alloc();
    572c:	4606      	mov	r6, r0
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    572e:	7103      	strb	r3, [r0, #4]
		rx->hdr.handle = 0xffff;
    5730:	f64f 73ff 	movw	r3, #65535	; 0xffff
		memcpy(rx->pdu, pdu_tx, (offsetof(struct pdu_adv, connect_ind) +
    5734:	2224      	movs	r2, #36	; 0x24
		uint8_t pdu_adv_rx_chan_sel = pdu_adv_rx->chan_sel;
    5736:	f898 801c 	ldrb.w	r8, [r8, #28]
		rx->hdr.handle = 0xffff;
    573a:	80c3      	strh	r3, [r0, #6]
		memcpy(rx->pdu, pdu_tx, (offsetof(struct pdu_adv, connect_ind) +
    573c:	4649      	mov	r1, r9
    573e:	301c      	adds	r0, #28
    5740:	f01a fb99 	bl	1fe76 <memcpy>
		pdu_adv_rx->chan_sel = pdu_adv_rx_chan_sel;
    5744:	7f33      	ldrb	r3, [r6, #28]
		ftr->param = lll;
    5746:	60b4      	str	r4, [r6, #8]
		uint8_t pdu_adv_rx_chan_sel = pdu_adv_rx->chan_sel;
    5748:	f3c8 1840 	ubfx	r8, r8, #5, #1
		pdu_adv_rx->chan_sel = pdu_adv_rx_chan_sel;
    574c:	f368 1345 	bfi	r3, r8, #5, #1
    5750:	7733      	strb	r3, [r6, #28]
		ftr->ticks_anchor = radio_tmr_start_get();
    5752:	f015 fdd5 	bl	1b300 <radio_tmr_start_get>
				    radio_tx_chain_delay_get(0, 0);
    5756:	2100      	movs	r1, #0
		ftr->ticks_anchor = radio_tmr_start_get();
    5758:	6130      	str	r0, [r6, #16]
				    radio_tx_chain_delay_get(0, 0);
    575a:	4608      	mov	r0, r1
    575c:	f015 fc10 	bl	1af80 <radio_tx_chain_delay_get>
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
    5760:	2d00      	cmp	r5, #0
    5762:	bf08      	it	eq
    5764:	27ff      	moveq	r7, #255	; 0xff
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    5766:	9b01      	ldr	r3, [sp, #4]
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
    5768:	76b7      	strb	r7, [r6, #26]
		ftr->lrpa_used = lll->rpa_gen && lrpa;
    576a:	7de2      	ldrb	r2, [r4, #23]
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    576c:	f503 63db 	add.w	r3, r3, #1752	; 0x6d8
		ftr->radio_end_us = conn_space_us -
    5770:	1a1b      	subs	r3, r3, r0
		ftr->lrpa_used = lll->rpa_gen && lrpa;
    5772:	f012 0201 	ands.w	r2, r2, #1
		ftr->radio_end_us = conn_space_us -
    5776:	6173      	str	r3, [r6, #20]
		ftr->lrpa_used = lll->rpa_gen && lrpa;
    5778:	d011      	beq.n	579e <isr_rx+0x4b6>
    577a:	f1bb 0b00 	subs.w	fp, fp, #0
    577e:	bf18      	it	ne
    5780:	f04f 0b01 	movne.w	fp, #1
    5784:	7e73      	ldrb	r3, [r6, #25]
		ull_rx_put(rx->hdr.link, rx);
    5786:	6830      	ldr	r0, [r6, #0]
		ftr->lrpa_used = lll->rpa_gen && lrpa;
    5788:	f36b 0300 	bfi	r3, fp, #0, #1
    578c:	7673      	strb	r3, [r6, #25]
		ull_rx_put(rx->hdr.link, rx);
    578e:	4631      	mov	r1, r6
    5790:	f00e ff9a 	bl	146c8 <ull_rx_put>
}
    5794:	b003      	add	sp, #12
    5796:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		ull_rx_sched();
    579a:	f00e bfa5 	b.w	146e8 <ull_rx_sched>
    579e:	4693      	mov	fp, r2
    57a0:	e7f0      	b.n	5784 <isr_rx+0x49c>
		radio_tmr_tifs_set(EVENT_IFS_US);
    57a2:	2096      	movs	r0, #150	; 0x96
    57a4:	f015 fcfa 	bl	1b19c <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    57a8:	2000      	movs	r0, #0
    57aa:	f015 fc5f 	bl	1b06c <radio_switch_complete_and_rx>
		err = isr_rx_scan_report(lll, rssi_ready,
    57ae:	2d00      	cmp	r5, #0
    57b0:	bf14      	ite	ne
    57b2:	4639      	movne	r1, r7
    57b4:	21ff      	moveq	r1, #255	; 0xff
    57b6:	4630      	mov	r0, r6
    57b8:	2200      	movs	r2, #0
    57ba:	f014 fc33 	bl	1a024 <isr_rx_scan_report.isra.0>
		if (err) {
    57be:	2800      	cmp	r0, #0
    57c0:	f47f ad9d 	bne.w	52fe <isr_rx+0x16>
		pdu_tx = (void *)radio_pkt_scratch_get();
    57c4:	f015 fc4e 	bl	1b064 <radio_pkt_scratch_get>
		pdu_tx->rx_addr = pdu_adv_rx->tx_addr;
    57c8:	f898 301c 	ldrb.w	r3, [r8, #28]
		pdu_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    57cc:	7802      	ldrb	r2, [r0, #0]
		pdu_tx->rx_addr = pdu_adv_rx->tx_addr;
    57ce:	f3c3 1380 	ubfx	r3, r3, #6, #1
		pdu_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    57d2:	01db      	lsls	r3, r3, #7
		pdu_tx = (void *)radio_pkt_scratch_get();
    57d4:	4605      	mov	r5, r0
		pdu_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    57d6:	f002 0270 	and.w	r2, r2, #112	; 0x70
    57da:	f043 0303 	orr.w	r3, r3, #3
    57de:	4313      	orrs	r3, r2
		pdu_tx->len = sizeof(struct pdu_adv_scan_req);
    57e0:	220c      	movs	r2, #12
		pdu_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    57e2:	702b      	strb	r3, [r5, #0]
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
    57e4:	4638      	mov	r0, r7
		pdu_tx->len = sizeof(struct pdu_adv_scan_req);
    57e6:	706a      	strb	r2, [r5, #1]
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
    57e8:	f013 fc06 	bl	18ff8 <ull_filter_lll_lrpa_get>
		if (lll->rpa_gen && lrpa) {
    57ec:	7de3      	ldrb	r3, [r4, #23]
    57ee:	07de      	lsls	r6, r3, #31
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
    57f0:	4601      	mov	r1, r0
		if (lll->rpa_gen && lrpa) {
    57f2:	d54d      	bpl.n	5890 <isr_rx+0x5a8>
    57f4:	2800      	cmp	r0, #0
    57f6:	d04b      	beq.n	5890 <isr_rx+0x5a8>
			pdu_tx->tx_addr = 1;
    57f8:	782b      	ldrb	r3, [r5, #0]
    57fa:	4628      	mov	r0, r5
    57fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    5800:	f800 3b02 	strb.w	r3, [r0], #2
			memcpy(&pdu_tx->scan_req.scan_addr[0], lrpa->val,
    5804:	2206      	movs	r2, #6
    5806:	f01a fb36 	bl	1fe76 <memcpy>
		memcpy(&pdu_tx->scan_req.adv_addr[0],
    580a:	f108 011e 	add.w	r1, r8, #30
    580e:	2206      	movs	r2, #6
    5810:	f105 0008 	add.w	r0, r5, #8
    5814:	f01a fb2f 	bl	1fe76 <memcpy>
		radio_pkt_tx_set(pdu_tx);
    5818:	4628      	mov	r0, r5
    581a:	f015 fba1 	bl	1af60 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    581e:	f015 fbe9 	bl	1aff4 <radio_is_ready>
    5822:	2800      	cmp	r0, #0
    5824:	d163      	bne.n	58ee <isr_rx+0x606>
		radio_tmr_end_capture();
    5826:	f015 fda5 	bl	1b374 <radio_tmr_end_capture>
		lll->state = 1U;
    582a:	7da3      	ldrb	r3, [r4, #22]
		radio_isr_set(isr_tx, lll);
    582c:	483c      	ldr	r0, [pc, #240]	; (5920 <isr_rx+0x638>)
		lll->state = 1U;
    582e:	f043 0301 	orr.w	r3, r3, #1
		radio_isr_set(isr_tx, lll);
    5832:	4621      	mov	r1, r4
		lll->state = 1U;
    5834:	75a3      	strb	r3, [r4, #22]
}
    5836:	b003      	add	sp, #12
    5838:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		radio_isr_set(isr_tx, lll);
    583c:	f015 baaa 	b.w	1ad94 <radio_isr_set>
		LL_ASSERT(!radio_is_ready());
    5840:	4a33      	ldr	r2, [pc, #204]	; (5910 <isr_rx+0x628>)
    5842:	4938      	ldr	r1, [pc, #224]	; (5924 <isr_rx+0x63c>)
    5844:	4834      	ldr	r0, [pc, #208]	; (5918 <isr_rx+0x630>)
    5846:	f44f 7346 	mov.w	r3, #792	; 0x318
    584a:	f018 fb82 	bl	1df52 <printk>
    584e:	4040      	eors	r0, r0
    5850:	f380 8811 	msr	BASEPRI, r0
    5854:	f04f 0003 	mov.w	r0, #3
    5858:	df02      	svc	2
    585a:	e756      	b.n	570a <isr_rx+0x422>
		LL_ASSERT(!ret);
    585c:	4a2c      	ldr	r2, [pc, #176]	; (5910 <isr_rx+0x628>)
    585e:	4932      	ldr	r1, [pc, #200]	; (5928 <isr_rx+0x640>)
    5860:	482d      	ldr	r0, [pc, #180]	; (5918 <isr_rx+0x630>)
    5862:	f240 333e 	movw	r3, #830	; 0x33e
    5866:	f018 fb74 	bl	1df52 <printk>
    586a:	4040      	eors	r0, r0
    586c:	f380 8811 	msr	BASEPRI, r0
    5870:	f04f 0003 	mov.w	r0, #3
    5874:	df02      	svc	2
    5876:	e756      	b.n	5726 <isr_rx+0x43e>
			lll_conn->rssi_latest =  radio_rssi_get();
    5878:	f015 fc2a 	bl	1b0d0 <radio_rssi_get>
    587c:	f88a 0089 	strb.w	r0, [sl, #137]	; 0x89
    5880:	e74a      	b.n	5718 <isr_rx+0x430>
		   ull_filter_lll_lrpa_get(rl_idx)) {
    5882:	4638      	mov	r0, r7
    5884:	f013 fbb8 	bl	18ff8 <ull_filter_lll_lrpa_get>
	} else if (init && lll->rpa_gen &&
    5888:	2800      	cmp	r0, #0
    588a:	f47f ae40 	bne.w	550e <isr_rx+0x226>
    588e:	e626      	b.n	54de <isr_rx+0x1f6>
			pdu_tx->tx_addr = lll->init_addr_type;
    5890:	7da3      	ldrb	r3, [r4, #22]
    5892:	782a      	ldrb	r2, [r5, #0]
    5894:	f3c3 1380 	ubfx	r3, r3, #6, #1
    5898:	4628      	mov	r0, r5
    589a:	f363 1286 	bfi	r2, r3, #6, #1
    589e:	f800 2b02 	strb.w	r2, [r0], #2
			memcpy(&pdu_tx->scan_req.scan_addr[0],
    58a2:	f104 0119 	add.w	r1, r4, #25
    58a6:	2206      	movs	r2, #6
    58a8:	f01a fae5 	bl	1fe76 <memcpy>
    58ac:	e7ad      	b.n	580a <isr_rx+0x522>
	    (pdu->rx_addr != 0) &&
    58ae:	f898 3029 	ldrb.w	r3, [r8, #41]	; 0x29
    58b2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    58b6:	2b40      	cmp	r3, #64	; 0x40
    58b8:	f47f ae76 	bne.w	55a8 <isr_rx+0x2c0>
    58bc:	f898 301d 	ldrb.w	r3, [r8, #29]
			*dir_report = true;
    58c0:	f04f 0901 	mov.w	r9, #1
    58c4:	e63a      	b.n	553c <isr_rx+0x254>
		!memcmp(lll->init_addr, pdu->direct_ind.tgt_addr,
    58c6:	4651      	mov	r1, sl
    58c8:	2206      	movs	r2, #6
    58ca:	f104 0019 	add.w	r0, r4, #25
    58ce:	f01a fac2 	bl	1fe56 <memcmp>
	return (((lll->init_addr_type == pdu->rx_addr) &&
    58d2:	b1d0      	cbz	r0, 590a <isr_rx+0x622>
    58d4:	7da3      	ldrb	r3, [r4, #22]
    58d6:	e65e      	b.n	5596 <isr_rx+0x2ae>
		!memcmp(lll->init_addr, pdu->direct_ind.tgt_addr,
    58d8:	4649      	mov	r1, r9
    58da:	2206      	movs	r2, #6
    58dc:	f104 0019 	add.w	r0, r4, #25
    58e0:	f01a fab9 	bl	1fe56 <memcmp>
	return (((lll->init_addr_type == pdu->rx_addr) &&
    58e4:	2800      	cmp	r0, #0
    58e6:	f43f ad55 	beq.w	5394 <isr_rx+0xac>
    58ea:	7da3      	ldrb	r3, [r4, #22]
    58ec:	e600      	b.n	54f0 <isr_rx+0x208>
		LL_ASSERT(!radio_is_ready());
    58ee:	4a08      	ldr	r2, [pc, #32]	; (5910 <isr_rx+0x628>)
    58f0:	490c      	ldr	r1, [pc, #48]	; (5924 <isr_rx+0x63c>)
    58f2:	4809      	ldr	r0, [pc, #36]	; (5918 <isr_rx+0x630>)
    58f4:	f240 3399 	movw	r3, #921	; 0x399
    58f8:	f018 fb2b 	bl	1df52 <printk>
    58fc:	4040      	eors	r0, r0
    58fe:	f380 8811 	msr	BASEPRI, r0
    5902:	f04f 0003 	mov.w	r0, #3
    5906:	df02      	svc	2
    5908:	e78d      	b.n	5826 <isr_rx+0x53e>
    590a:	f898 301d 	ldrb.w	r3, [r8, #29]
    590e:	e615      	b.n	553c <isr_rx+0x254>
    5910:	00024a0c 	.word	0x00024a0c
    5914:	00024a58 	.word	0x00024a58
    5918:	00023ff4 	.word	0x00023ff4
    591c:	00019fc5 	.word	0x00019fc5
    5920:	00019d9d 	.word	0x00019d9d
    5924:	00024a7c 	.word	0x00024a7c
    5928:	000242b0 	.word	0x000242b0

0000592c <throughput_received>:
}
static void throughput_received(const struct bt_gatt_throughput_metrics *met)
{
	static uint32_t kb;

	if (met->write_len == 0) {
    592c:	6843      	ldr	r3, [r0, #4]
    592e:	4a05      	ldr	r2, [pc, #20]	; (5944 <throughput_received+0x18>)
    5930:	b90b      	cbnz	r3, 5936 <throughput_received+0xa>
		kb = 0;
    5932:	6013      	str	r3, [r2, #0]
		return;
    5934:	4770      	bx	lr
	}

	if ((met->write_len / 1024) != kb) {
    5936:	6810      	ldr	r0, [r2, #0]
    5938:	0a99      	lsrs	r1, r3, #10
    593a:	ebb0 2f93 	cmp.w	r0, r3, lsr #10
		kb = (met->write_len / 1024);
    593e:	bf18      	it	ne
    5940:	6011      	strne	r1, [r2, #0]
	}
}
    5942:	4770      	bx	lr
    5944:	20001d58 	.word	0x20001d58

00005948 <throughput_send>:
static void throughput_send(const struct bt_gatt_throughput_metrics *met)
{
    5948:	b507      	push	{r0, r1, r2, lr}
	printk("\n[peer] received %u bytes (%u KB)"
    594a:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
    594e:	9300      	str	r3, [sp, #0]
    5950:	6803      	ldr	r3, [r0, #0]
    5952:	4803      	ldr	r0, [pc, #12]	; (5960 <throughput_send+0x18>)
    5954:	0a8a      	lsrs	r2, r1, #10
    5956:	f018 fafc 	bl	1df52 <printk>
			" in %u GATT writes at %u bps\n",
			met->write_len, met->write_len / 1024,
			met->write_count, met->write_rate);
}
    595a:	b003      	add	sp, #12
    595c:	f85d fb04 	ldr.w	pc, [sp], #4
    5960:	00024e4f 	.word	0x00024e4f

00005964 <throughput_read>:
{
    5964:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
		if(default_conn[i] == conn){
    5968:	4e10      	ldr	r6, [pc, #64]	; (59ac <throughput_read+0x48>)
			printk("\n[peer]round %u: received %u bytes (%u KB)"
    596a:	4f11      	ldr	r7, [pc, #68]	; (59b0 <throughput_read+0x4c>)
    596c:	f8df 8048 	ldr.w	r8, [pc, #72]	; 59b8 <throughput_read+0x54>
{
    5970:	4605      	mov	r5, r0
    5972:	460c      	mov	r4, r1
	for(i = 0; i <CONFIG_BT_MAX_CONN; i ++)
    5974:	2300      	movs	r3, #0
		if(default_conn[i] == conn){
    5976:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
    597a:	42aa      	cmp	r2, r5
    597c:	d10b      	bne.n	5996 <throughput_read+0x32>
			printk("\n[peer]round %u: received %u bytes (%u KB)"
    597e:	6862      	ldr	r2, [r4, #4]
    5980:	9302      	str	r3, [sp, #8]
    5982:	68a3      	ldr	r3, [r4, #8]
    5984:	9301      	str	r3, [sp, #4]
    5986:	6823      	ldr	r3, [r4, #0]
    5988:	9300      	str	r3, [sp, #0]
    598a:	6839      	ldr	r1, [r7, #0]
    598c:	0a93      	lsrs	r3, r2, #10
    598e:	4640      	mov	r0, r8
    5990:	f018 fadf 	bl	1df52 <printk>
			i = CONFIG_BT_MAX_CONN;
    5994:	2304      	movs	r3, #4
	for(i = 0; i <CONFIG_BT_MAX_CONN; i ++)
    5996:	3301      	adds	r3, #1
    5998:	2b03      	cmp	r3, #3
    599a:	ddec      	ble.n	5976 <throughput_read+0x12>
	test_ready = true;
    599c:	4b05      	ldr	r3, [pc, #20]	; (59b4 <throughput_read+0x50>)
    599e:	2201      	movs	r2, #1
}
    59a0:	2000      	movs	r0, #0
	test_ready = true;
    59a2:	701a      	strb	r2, [r3, #0]
}
    59a4:	b004      	add	sp, #16
    59a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    59aa:	bf00      	nop
    59ac:	20001cd4 	.word	0x20001cd4
    59b0:	20001cd0 	.word	0x20001cd0
    59b4:	20000714 	.word	0x20000714
    59b8:	00024e8e 	.word	0x00024e8e

000059bc <disconnected>:
	}

	printk("[peer]Scanning successfully started\n");
}
static void disconnected(struct bt_conn *conn, uint8_t reason)
{
    59bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    59c0:	b088      	sub	sp, #32
    59c2:	4605      	mov	r5, r0
	struct bt_conn_info info = {0};
    59c4:	221c      	movs	r2, #28
    59c6:	2100      	movs	r1, #0
    59c8:	a801      	add	r0, sp, #4
    59ca:	f01a fa7f 	bl	1fecc <memset>
	int err;

	for(int i = 0; i<CONFIG_BT_MAX_CONN; i ++)
		if(conn == default_conn[i]){
    59ce:	4e11      	ldr	r6, [pc, #68]	; (5a14 <disconnected+0x58>)
			printk("[peer]disconnected\n");
    59d0:	4f11      	ldr	r7, [pc, #68]	; (5a18 <disconnected+0x5c>)
			bt_conn_unref(conn);
			default_conn[i] = NULL;
			cnt = 0;
    59d2:	f8df 804c 	ldr.w	r8, [pc, #76]	; 5a20 <disconnected+0x64>
	for(int i = 0; i<CONFIG_BT_MAX_CONN; i ++)
    59d6:	2400      	movs	r4, #0
		if(conn == default_conn[i]){
    59d8:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
    59dc:	42ab      	cmp	r3, r5
    59de:	d10f      	bne.n	5a00 <disconnected+0x44>
			printk("[peer]disconnected\n");
    59e0:	4638      	mov	r0, r7
    59e2:	f018 fab6 	bl	1df52 <printk>
			bt_conn_unref(conn);
    59e6:	4628      	mov	r0, r5
    59e8:	f01a fe09 	bl	205fe <bt_conn_unref>
			iter -= 1;
    59ec:	4a0b      	ldr	r2, [pc, #44]	; (5a1c <disconnected+0x60>)
			default_conn[i] = NULL;
    59ee:	2300      	movs	r3, #0
    59f0:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
			cnt = 0;
    59f4:	f8c8 3000 	str.w	r3, [r8]
			iter -= 1;
    59f8:	6813      	ldr	r3, [r2, #0]
    59fa:	3b01      	subs	r3, #1
    59fc:	6013      	str	r3, [r2, #0]
			i = CONFIG_BT_MAX_CONN;
    59fe:	2404      	movs	r4, #4
	for(int i = 0; i<CONFIG_BT_MAX_CONN; i ++)
    5a00:	3401      	adds	r4, #1
    5a02:	2c03      	cmp	r4, #3
    5a04:	dde8      	ble.n	59d8 <disconnected+0x1c>
		}
	err = bt_conn_get_info(conn, &info);
    5a06:	a901      	add	r1, sp, #4
    5a08:	4628      	mov	r0, r5
    5a0a:	f005 fa4f 	bl	aeac <bt_conn_get_info>
	}

	/* Re-connect using same roles */
	if (info.role == BT_CONN_ROLE_MASTER) {
	}
}
    5a0e:	b008      	add	sp, #32
    5a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5a14:	20001cd4 	.word	0x20001cd4
    5a18:	00024ee4 	.word	0x00024ee4
    5a1c:	20001d54 	.word	0x20001d54
    5a20:	20001cd0 	.word	0x20001cd0

00005a24 <eir_found>:
{
    5a24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	switch (data->type) {
    5a28:	7803      	ldrb	r3, [r0, #0]
    5a2a:	3b02      	subs	r3, #2
    5a2c:	2b01      	cmp	r3, #1
{
    5a2e:	b08d      	sub	sp, #52	; 0x34
    5a30:	4680      	mov	r8, r0
    5a32:	460f      	mov	r7, r1
	switch (data->type) {
    5a34:	d903      	bls.n	5a3e <eir_found+0x1a>
	return true;
    5a36:	2001      	movs	r0, #1
}
    5a38:	b00d      	add	sp, #52	; 0x34
    5a3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (data->data_len % sizeof(uint16_t) != 0U) {
    5a3e:	7844      	ldrb	r4, [r0, #1]
    5a40:	f014 0401 	ands.w	r4, r4, #1
    5a44:	d1f7      	bne.n	5a36 <eir_found+0x12>
					printk("WRONG UUID\n");
    5a46:	f8df 911c 	ldr.w	r9, [pc, #284]	; 5b64 <eir_found+0x140>
			for (i = 0; i < data->data_len; i += sizeof(uint16_t)) {
    5a4a:	f898 3001 	ldrb.w	r3, [r8, #1]
    5a4e:	429c      	cmp	r4, r3
    5a50:	daf1      	bge.n	5a36 <eir_found+0x12>
				memcpy(&u16, &data->data[i], sizeof(u16));
    5a52:	f8d8 1004 	ldr.w	r1, [r8, #4]
    5a56:	2202      	movs	r2, #2
    5a58:	4421      	add	r1, r4
    5a5a:	eb0d 0002 	add.w	r0, sp, r2
    5a5e:	f01a fa0a 	bl	1fe76 <memcpy>
				if (bt_uuid_cmp(uuid, BT_UUID_HRS)) {
    5a62:	ad08      	add	r5, sp, #32
				uuid = BT_UUID_DECLARE_16(sys_le16_to_cpu(u16));
    5a64:	2300      	movs	r3, #0
    5a66:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    5a6a:	f88d 3004 	strb.w	r3, [sp, #4]
				if (bt_uuid_cmp(uuid, BT_UUID_HRS)) {
    5a6e:	f88d 3020 	strb.w	r3, [sp, #32]
    5a72:	4629      	mov	r1, r5
    5a74:	f641 030d 	movw	r3, #6157	; 0x180d
    5a78:	a801      	add	r0, sp, #4
				uuid = BT_UUID_DECLARE_16(sys_le16_to_cpu(u16));
    5a7a:	f8ad 2006 	strh.w	r2, [sp, #6]
				if (bt_uuid_cmp(uuid, BT_UUID_HRS)) {
    5a7e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
    5a82:	f01a fac7 	bl	20014 <bt_uuid_cmp>
    5a86:	4606      	mov	r6, r0
    5a88:	b120      	cbz	r0, 5a94 <eir_found+0x70>
					printk("WRONG UUID\n");
    5a8a:	4648      	mov	r0, r9
    5a8c:	f018 fa61 	bl	1df52 <printk>
			for (i = 0; i < data->data_len; i += sizeof(uint16_t)) {
    5a90:	3402      	adds	r4, #2
    5a92:	e7da      	b.n	5a4a <eir_found+0x26>
				param = BT_LE_CONN_PARAM_DEFAULT;
    5a94:	4c30      	ldr	r4, [pc, #192]	; (5b58 <eir_found+0x134>)
					if(default_conn[i] == NULL && (i == 0 || i == 2)){
    5a96:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 5b68 <eir_found+0x144>
				param = BT_LE_CONN_PARAM_DEFAULT;
    5a9a:	6820      	ldr	r0, [r4, #0]
    5a9c:	6861      	ldr	r1, [r4, #4]
				param2 = BT_LE_CONN_PARAM_DEFAULT2;
    5a9e:	4622      	mov	r2, r4
				param = BT_LE_CONN_PARAM_DEFAULT;
    5aa0:	ab02      	add	r3, sp, #8
    5aa2:	c303      	stmia	r3!, {r0, r1}
				param2 = BT_LE_CONN_PARAM_DEFAULT2;
    5aa4:	f852 0f08 	ldr.w	r0, [r2, #8]!
    5aa8:	6851      	ldr	r1, [r2, #4]
				param3 = BT_LE_CONN_PARAM_DEFAULT4;
    5aaa:	4622      	mov	r2, r4
				param2 = BT_LE_CONN_PARAM_DEFAULT2;
    5aac:	ab04      	add	r3, sp, #16
    5aae:	c303      	stmia	r3!, {r0, r1}
				param3 = BT_LE_CONN_PARAM_DEFAULT4;
    5ab0:	f852 0f10 	ldr.w	r0, [r2, #16]!
    5ab4:	6851      	ldr	r1, [r2, #4]
    5ab6:	ab06      	add	r3, sp, #24
    5ab8:	c303      	stmia	r3!, {r0, r1}
				for(int i = 0; i <CONFIG_BT_MAX_CONN; i ++){
    5aba:	46c1      	mov	r9, r8
						err = bt_conn_le_create(addr, BT_CONN_LE_CREATE_CONN,
    5abc:	3418      	adds	r4, #24
					if(default_conn[i] == NULL && (i == 0 || i == 2)){
    5abe:	f858 3026 	ldr.w	r3, [r8, r6, lsl #2]
    5ac2:	b98b      	cbnz	r3, 5ae8 <eir_found+0xc4>
    5ac4:	f036 0302 	bics.w	r3, r6, #2
    5ac8:	d10e      	bne.n	5ae8 <eir_found+0xc4>
						err = bt_le_scan_stop();
    5aca:	f004 fbe1 	bl	a290 <bt_le_scan_stop>
						if (err) {
    5ace:	bb88      	cbnz	r0, 5b34 <eir_found+0x110>
						err = bt_conn_le_create(addr, BT_CONN_LE_CREATE_CONN,
    5ad0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    5ad4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    5ad8:	eb08 0386 	add.w	r3, r8, r6, lsl #2
    5adc:	aa04      	add	r2, sp, #16
    5ade:	4629      	mov	r1, r5
    5ae0:	4638      	mov	r0, r7
    5ae2:	f005 fa0f 	bl	af04 <bt_conn_le_create>
						i = CONFIG_BT_MAX_CONN;
    5ae6:	2604      	movs	r6, #4
					if(default_conn[i] == NULL && i == 1){
    5ae8:	f859 3026 	ldr.w	r3, [r9, r6, lsl #2]
    5aec:	b97b      	cbnz	r3, 5b0e <eir_found+0xea>
    5aee:	2e01      	cmp	r6, #1
    5af0:	d10d      	bne.n	5b0e <eir_found+0xea>
						err = bt_le_scan_stop();
    5af2:	f004 fbcd 	bl	a290 <bt_le_scan_stop>
						if (err) {
    5af6:	b9e8      	cbnz	r0, 5b34 <eir_found+0x110>
						err = bt_conn_le_create(addr, BT_CONN_LE_CREATE_CONN,
    5af8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    5afc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    5b00:	4b16      	ldr	r3, [pc, #88]	; (5b5c <eir_found+0x138>)
    5b02:	aa02      	add	r2, sp, #8
    5b04:	4629      	mov	r1, r5
    5b06:	4638      	mov	r0, r7
    5b08:	f005 f9fc 	bl	af04 <bt_conn_le_create>
						i = CONFIG_BT_MAX_CONN;
    5b0c:	2604      	movs	r6, #4
					if(default_conn[i] == NULL && i == 3){
    5b0e:	f859 3026 	ldr.w	r3, [r9, r6, lsl #2]
    5b12:	b97b      	cbnz	r3, 5b34 <eir_found+0x110>
    5b14:	2e03      	cmp	r6, #3
    5b16:	d112      	bne.n	5b3e <eir_found+0x11a>
						err = bt_le_scan_stop();
    5b18:	f004 fbba 	bl	a290 <bt_le_scan_stop>
						if (err) {
    5b1c:	b950      	cbnz	r0, 5b34 <eir_found+0x110>
						err = bt_conn_le_create(addr, BT_CONN_LE_CREATE_CONN,
    5b1e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    5b22:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    5b26:	4b0e      	ldr	r3, [pc, #56]	; (5b60 <eir_found+0x13c>)
    5b28:	aa06      	add	r2, sp, #24
						err = bt_conn_le_create(addr, BT_CONN_LE_CREATE_CONN,
    5b2a:	4629      	mov	r1, r5
    5b2c:	4638      	mov	r0, r7
    5b2e:	f005 f9e9 	bl	af04 <bt_conn_le_create>
						i = CONFIG_BT_MAX_CONN;
    5b32:	2604      	movs	r6, #4
				for(int i = 0; i <CONFIG_BT_MAX_CONN; i ++){
    5b34:	3601      	adds	r6, #1
    5b36:	2e03      	cmp	r6, #3
    5b38:	ddc1      	ble.n	5abe <eir_found+0x9a>
				return false;
    5b3a:	2000      	movs	r0, #0
    5b3c:	e77c      	b.n	5a38 <eir_found+0x14>
						err = bt_le_scan_stop();
    5b3e:	f004 fba7 	bl	a290 <bt_le_scan_stop>
						if (err) {
    5b42:	2800      	cmp	r0, #0
    5b44:	d1f6      	bne.n	5b34 <eir_found+0x110>
						err = bt_conn_le_create(addr, BT_CONN_LE_CREATE_CONN,
    5b46:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    5b4a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    5b4e:	eb09 0386 	add.w	r3, r9, r6, lsl #2
    5b52:	aa02      	add	r2, sp, #8
    5b54:	e7e9      	b.n	5b2a <eir_found+0x106>
    5b56:	bf00      	nop
    5b58:	00023840 	.word	0x00023840
    5b5c:	20001cd8 	.word	0x20001cd8
    5b60:	20001ce0 	.word	0x20001ce0
    5b64:	00024ef8 	.word	0x00024ef8
    5b68:	20001cd4 	.word	0x20001cd4

00005b6c <bt_addr_le_to_str.constprop.0>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    5b6c:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    5b6e:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    5b70:	b08a      	sub	sp, #40	; 0x28
    5b72:	4604      	mov	r4, r0
    5b74:	460e      	mov	r6, r1
    5b76:	ad07      	add	r5, sp, #28
    5b78:	2b03      	cmp	r3, #3
    5b7a:	d820      	bhi.n	5bbe <bt_addr_le_to_str.constprop.0+0x52>
    5b7c:	e8df f003 	tbb	[pc, r3]
    5b80:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    5b84:	4911      	ldr	r1, [pc, #68]	; (5bcc <bt_addr_le_to_str.constprop.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    5b86:	4628      	mov	r0, r5
    5b88:	f01a f935 	bl	1fdf6 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    5b8c:	7863      	ldrb	r3, [r4, #1]
    5b8e:	9304      	str	r3, [sp, #16]
    5b90:	78a3      	ldrb	r3, [r4, #2]
    5b92:	9303      	str	r3, [sp, #12]
    5b94:	78e3      	ldrb	r3, [r4, #3]
    5b96:	9302      	str	r3, [sp, #8]
    5b98:	7923      	ldrb	r3, [r4, #4]
    5b9a:	9301      	str	r3, [sp, #4]
    5b9c:	7963      	ldrb	r3, [r4, #5]
    5b9e:	9300      	str	r3, [sp, #0]
    5ba0:	4a0b      	ldr	r2, [pc, #44]	; (5bd0 <bt_addr_le_to_str.constprop.0+0x64>)
    5ba2:	79a3      	ldrb	r3, [r4, #6]
    5ba4:	9505      	str	r5, [sp, #20]
    5ba6:	211e      	movs	r1, #30
    5ba8:	4630      	mov	r0, r6
    5baa:	f018 f9df 	bl	1df6c <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
    5bae:	b00a      	add	sp, #40	; 0x28
    5bb0:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    5bb2:	4908      	ldr	r1, [pc, #32]	; (5bd4 <bt_addr_le_to_str.constprop.0+0x68>)
    5bb4:	e7e7      	b.n	5b86 <bt_addr_le_to_str.constprop.0+0x1a>
		strcpy(type, "public-id");
    5bb6:	4908      	ldr	r1, [pc, #32]	; (5bd8 <bt_addr_le_to_str.constprop.0+0x6c>)
    5bb8:	e7e5      	b.n	5b86 <bt_addr_le_to_str.constprop.0+0x1a>
		strcpy(type, "random-id");
    5bba:	4908      	ldr	r1, [pc, #32]	; (5bdc <bt_addr_le_to_str.constprop.0+0x70>)
    5bbc:	e7e3      	b.n	5b86 <bt_addr_le_to_str.constprop.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    5bbe:	4a08      	ldr	r2, [pc, #32]	; (5be0 <bt_addr_le_to_str.constprop.0+0x74>)
    5bc0:	210a      	movs	r1, #10
    5bc2:	4628      	mov	r0, r5
    5bc4:	f018 f9d2 	bl	1df6c <snprintk>
		break;
    5bc8:	e7e0      	b.n	5b8c <bt_addr_le_to_str.constprop.0+0x20>
    5bca:	bf00      	nop
    5bcc:	00024f04 	.word	0x00024f04
    5bd0:	00024f26 	.word	0x00024f26
    5bd4:	00024f0b 	.word	0x00024f0b
    5bd8:	00024f12 	.word	0x00024f12
    5bdc:	00024f1c 	.word	0x00024f1c
    5be0:	00026b99 	.word	0x00026b99

00005be4 <connected>:
{
    5be4:	b5f0      	push	{r4, r5, r6, r7, lr}
    5be6:	b091      	sub	sp, #68	; 0x44
    5be8:	4604      	mov	r4, r0
	struct bt_conn_info info = {0};
    5bea:	221c      	movs	r2, #28
{
    5bec:	460e      	mov	r6, r1
	struct bt_conn_info info = {0};
    5bee:	a801      	add	r0, sp, #4
    5bf0:	2100      	movs	r1, #0
    5bf2:	f01a f96b 	bl	1fecc <memset>
	err = bt_conn_get_info(conn, &info);
    5bf6:	a901      	add	r1, sp, #4
    5bf8:	4620      	mov	r0, r4
    5bfa:	f005 f957 	bl	aeac <bt_conn_get_info>
	if (err) {
    5bfe:	4605      	mov	r5, r0
    5c00:	b998      	cbnz	r0, 5c2a <connected+0x46>
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    5c02:	4620      	mov	r0, r4
    5c04:	f01a fcfe 	bl	20604 <bt_conn_get_dst>
    5c08:	a908      	add	r1, sp, #32
    5c0a:	f7ff ffaf 	bl	5b6c <bt_addr_le_to_str.constprop.0>
	if (hci_err) {
    5c0e:	b176      	cbz	r6, 5c2e <connected+0x4a>
    5c10:	4f0a      	ldr	r7, [pc, #40]	; (5c3c <connected+0x58>)
    5c12:	2604      	movs	r6, #4
			if(default_conn[i] == conn){
    5c14:	f857 3b04 	ldr.w	r3, [r7], #4
    5c18:	42a3      	cmp	r3, r4
    5c1a:	d104      	bne.n	5c26 <connected+0x42>
				bt_conn_unref(default_conn[i]);
    5c1c:	4620      	mov	r0, r4
    5c1e:	f01a fcee 	bl	205fe <bt_conn_unref>
				default_conn[i] = NULL;
    5c22:	f847 5c04 	str.w	r5, [r7, #-4]
		for(int i = 0; i < CONFIG_BT_MAX_CONN; i ++)
    5c26:	3e01      	subs	r6, #1
    5c28:	d1f4      	bne.n	5c14 <connected+0x30>
}
    5c2a:	b011      	add	sp, #68	; 0x44
    5c2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	printk("[peer] Conn. interval is %u units\n", info.le.interval);
    5c2e:	f8bd 1018 	ldrh.w	r1, [sp, #24]
    5c32:	4803      	ldr	r0, [pc, #12]	; (5c40 <connected+0x5c>)
    5c34:	f018 f98d 	bl	1df52 <printk>
    5c38:	e7f7      	b.n	5c2a <connected+0x46>
    5c3a:	bf00      	nop
    5c3c:	20001cd4 	.word	0x20001cd4
    5c40:	00024f49 	.word	0x00024f49

00005c44 <device_found>:
{
    5c44:	b570      	push	{r4, r5, r6, lr}
    5c46:	b088      	sub	sp, #32
    5c48:	4616      	mov	r6, r2
	bt_addr_le_to_str(addr, dev, sizeof(dev));
    5c4a:	4669      	mov	r1, sp
{
    5c4c:	4605      	mov	r5, r0
    5c4e:	461c      	mov	r4, r3
	bt_addr_le_to_str(addr, dev, sizeof(dev));
    5c50:	f7ff ff8c 	bl	5b6c <bt_addr_le_to_str.constprop.0>
	if (type == BT_GAP_ADV_TYPE_ADV_IND ||
    5c54:	2e01      	cmp	r6, #1
    5c56:	d804      	bhi.n	5c62 <device_found+0x1e>
		bt_data_parse(ad, eir_found, (void *)addr);
    5c58:	4903      	ldr	r1, [pc, #12]	; (5c68 <device_found+0x24>)
    5c5a:	462a      	mov	r2, r5
    5c5c:	4620      	mov	r0, r4
    5c5e:	f003 ff25 	bl	9aac <bt_data_parse>
}
    5c62:	b008      	add	sp, #32
    5c64:	bd70      	pop	{r4, r5, r6, pc}
    5c66:	bf00      	nop
    5c68:	00005a25 	.word	0x00005a25

00005c6c <start_scan>:
{
    5c6c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if(iter < conn_cnt) nodes_ready = false;
    5c6e:	4b0f      	ldr	r3, [pc, #60]	; (5cac <start_scan+0x40>)
    5c70:	681a      	ldr	r2, [r3, #0]
    5c72:	4b0f      	ldr	r3, [pc, #60]	; (5cb0 <start_scan+0x44>)
    5c74:	681b      	ldr	r3, [r3, #0]
    5c76:	429a      	cmp	r2, r3
    5c78:	bfbe      	ittt	lt
    5c7a:	4b0e      	ldrlt	r3, [pc, #56]	; (5cb4 <start_scan+0x48>)
    5c7c:	2200      	movlt	r2, #0
    5c7e:	701a      	strblt	r2, [r3, #0]
	struct bt_le_scan_param scan_param = {
    5c80:	2100      	movs	r1, #0
    5c82:	2214      	movs	r2, #20
    5c84:	a801      	add	r0, sp, #4
    5c86:	f01a f921 	bl	1fecc <memset>
    5c8a:	2301      	movs	r3, #1
    5c8c:	f88d 3004 	strb.w	r3, [sp, #4]
	err = bt_le_scan_start(&scan_param, device_found);
    5c90:	4909      	ldr	r1, [pc, #36]	; (5cb8 <start_scan+0x4c>)
	struct bt_le_scan_param scan_param = {
    5c92:	4b0a      	ldr	r3, [pc, #40]	; (5cbc <start_scan+0x50>)
    5c94:	9303      	str	r3, [sp, #12]
	err = bt_le_scan_start(&scan_param, device_found);
    5c96:	a801      	add	r0, sp, #4
    5c98:	f004 faa2 	bl	a1e0 <bt_le_scan_start>
	if (err) {
    5c9c:	b910      	cbnz	r0, 5ca4 <start_scan+0x38>
	printk("[peer]Scanning successfully started\n");
    5c9e:	4808      	ldr	r0, [pc, #32]	; (5cc0 <start_scan+0x54>)
    5ca0:	f018 f957 	bl	1df52 <printk>
}
    5ca4:	b007      	add	sp, #28
    5ca6:	f85d fb04 	ldr.w	pc, [sp], #4
    5caa:	bf00      	nop
    5cac:	20001d54 	.word	0x20001d54
    5cb0:	20000134 	.word	0x20000134
    5cb4:	200096c2 	.word	0x200096c2
    5cb8:	00005c45 	.word	0x00005c45
    5cbc:	00300060 	.word	0x00300060
    5cc0:	00024f6c 	.word	0x00024f6c

00005cc4 <main>:
	/* reject peer conn param request */
	return false;
}

void main(void)
{
    5cc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		.connected = connected,
		.disconnected = disconnected,
		.le_param_req = le_param_req,
	};

	bt_conn_cb_register(&conn_callbacks);
    5cc8:	4824      	ldr	r0, [pc, #144]	; (5d5c <main+0x98>)
    5cca:	f004 fd83 	bl	a7d4 <bt_conn_cb_register>

	err = bt_enable(NULL);
    5cce:	2000      	movs	r0, #0
    5cd0:	f004 f9f2 	bl	a0b8 <bt_enable>
	if (err) {
    5cd4:	2800      	cmp	r0, #0
    5cd6:	d13e      	bne.n	5d56 <main+0x92>
		return;
	}
	for(int i = 0; i<CONFIG_BT_MAX_CONN; i ++){
		default_conn[i] = NULL;
    5cd8:	4c21      	ldr	r4, [pc, #132]	; (5d60 <main+0x9c>)
	}

	for(int i = 0; i <CONFIG_BT_MAX_CONN; i ++){
		err = bt_gatt_throughput_init(&gatt_throughput[i], &throughput_cb);
    5cda:	4922      	ldr	r1, [pc, #136]	; (5d64 <main+0xa0>)
		default_conn[i] = NULL;
    5cdc:	e9c4 0000 	strd	r0, r0, [r4]
    5ce0:	e9c4 0002 	strd	r0, r0, [r4, #8]
		err = bt_gatt_throughput_init(&gatt_throughput[i], &throughput_cb);
    5ce4:	4820      	ldr	r0, [pc, #128]	; (5d68 <main+0xa4>)
    5ce6:	f000 f8a3 	bl	5e30 <bt_gatt_throughput_init>
    5cea:	491e      	ldr	r1, [pc, #120]	; (5d64 <main+0xa0>)
    5cec:	481f      	ldr	r0, [pc, #124]	; (5d6c <main+0xa8>)
    5cee:	f000 f89f 	bl	5e30 <bt_gatt_throughput_init>
    5cf2:	491c      	ldr	r1, [pc, #112]	; (5d64 <main+0xa0>)
    5cf4:	481e      	ldr	r0, [pc, #120]	; (5d70 <main+0xac>)
    5cf6:	f000 f89b 	bl	5e30 <bt_gatt_throughput_init>
    5cfa:	491a      	ldr	r1, [pc, #104]	; (5d64 <main+0xa0>)
    5cfc:	481d      	ldr	r0, [pc, #116]	; (5d74 <main+0xb0>)
    5cfe:	f000 f897 	bl	5e30 <bt_gatt_throughput_init>
	}

	if (err) {
    5d02:	bb40      	cbnz	r0, 5d56 <main+0x92>
		return;
	}
	test_ready = true;
    5d04:	4b1c      	ldr	r3, [pc, #112]	; (5d78 <main+0xb4>)

	for ( ;;) {
		printk("[peer] start\n");
    5d06:	4f1d      	ldr	r7, [pc, #116]	; (5d7c <main+0xb8>)
	test_ready = true;
    5d08:	2201      	movs	r2, #1
    5d0a:	701a      	strb	r2, [r3, #0]
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
    5d0c:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
		if(default_conn[CONFIG_BT_MAX_CONN-1] == NULL)
			start_scan();
		uint32_t stamp = k_uptime_get_32();
		while(k_uptime_get_32()-stamp < 30000);
    5d10:	f247 562f 	movw	r6, #29999	; 0x752f
		printk("[peer] start\n");
    5d14:	4638      	mov	r0, r7
    5d16:	f018 f91c 	bl	1df52 <printk>
		if(default_conn[CONFIG_BT_MAX_CONN-1] == NULL)
    5d1a:	68e3      	ldr	r3, [r4, #12]
    5d1c:	b90b      	cbnz	r3, 5d22 <main+0x5e>
			start_scan();
    5d1e:	f7ff ffa5 	bl	5c6c <start_scan>
	return z_impl_k_uptime_ticks();
    5d22:	f01d fa4a 	bl	231ba <z_impl_k_uptime_ticks>
    5d26:	460b      	mov	r3, r1
    5d28:	fba0 0105 	umull	r0, r1, r0, r5
    5d2c:	fb05 1103 	mla	r1, r5, r3, r1
    5d30:	ea4f 38d0 	mov.w	r8, r0, lsr #15
    5d34:	ea48 4841 	orr.w	r8, r8, r1, lsl #17
    5d38:	f01d fa3f 	bl	231ba <z_impl_k_uptime_ticks>
    5d3c:	460b      	mov	r3, r1
    5d3e:	fba0 0105 	umull	r0, r1, r0, r5
    5d42:	fb05 1103 	mla	r1, r5, r3, r1
    5d46:	0bc3      	lsrs	r3, r0, #15
    5d48:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
		while(k_uptime_get_32()-stamp < 30000);
    5d4c:	eba3 0308 	sub.w	r3, r3, r8
    5d50:	42b3      	cmp	r3, r6
    5d52:	d9f1      	bls.n	5d38 <main+0x74>
    5d54:	e7de      	b.n	5d14 <main+0x50>
	}

}
    5d56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5d5a:	bf00      	nop
    5d5c:	20000118 	.word	0x20000118
    5d60:	20001cd4 	.word	0x20001cd4
    5d64:	00023918 	.word	0x00023918
    5d68:	20001ce4 	.word	0x20001ce4
    5d6c:	20001d00 	.word	0x20001d00
    5d70:	20001d1c 	.word	0x20001d1c
    5d74:	20001d38 	.word	0x20001d38
    5d78:	20000714 	.word	0x20000714
    5d7c:	00024f91 	.word	0x00024f91

00005d80 <write_callback>:
}

static ssize_t write_callback(struct bt_conn *conn,
			      const struct bt_gatt_attr *attr, const void *buf,
			      uint16_t len, uint16_t offset, uint8_t flags)
{
    5d80:	b570      	push	{r4, r5, r6, lr}

	uint64_t delta;

	struct bt_gatt_throughput_metrics *met_data = attr->user_data;

	delta = k_cycle_get_32() - clock_cycles;
    5d82:	4e17      	ldr	r6, [pc, #92]	; (5de0 <write_callback+0x60>)
	struct bt_gatt_throughput_metrics *met_data = attr->user_data;
    5d84:	68cc      	ldr	r4, [r1, #12]
{
    5d86:	461d      	mov	r5, r3
#ifndef _ASMLANGUAGE
extern uint32_t z_timer_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
    5d88:	f001 f90a 	bl	6fa0 <z_timer_cycle_get_32>
	delta = k_cycle_get_32() - clock_cycles;
    5d8c:	6833      	ldr	r3, [r6, #0]
    5d8e:	1ac0      	subs	r0, r0, r3
    5d90:	4b14      	ldr	r3, [pc, #80]	; (5de4 <write_callback+0x64>)
    5d92:	fba0 0103 	umull	r0, r1, r0, r3
    5d96:	0bc2      	lsrs	r2, r0, #15
	delta = k_cyc_to_ns_floor64(delta);

	if (len == 1) {
    5d98:	2d01      	cmp	r5, #1
    5d9a:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
    5d9e:	ea4f 33d1 	mov.w	r3, r1, lsr #15
    5da2:	d10e      	bne.n	5dc2 <write_callback+0x42>
		/* reset metrics */
		kb = 0;
		met_data->write_count = 0;
    5da4:	2300      	movs	r3, #0
		met_data->write_len = 0;
    5da6:	e9c4 3300 	strd	r3, r3, [r4]
		met_data->write_rate = 0;
    5daa:	60a3      	str	r3, [r4, #8]
    5dac:	f001 f8f8 	bl	6fa0 <z_timer_cycle_get_32>
		clock_cycles = k_cycle_get_32();
    5db0:	6030      	str	r0, [r6, #0]
		met_data->write_rate =
		    ((uint64_t)met_data->write_len << 3) * 1000000000 / delta;
	}


	if (callbacks->data_received) {
    5db2:	4b0d      	ldr	r3, [pc, #52]	; (5de8 <write_callback+0x68>)
    5db4:	681b      	ldr	r3, [r3, #0]
    5db6:	685b      	ldr	r3, [r3, #4]
    5db8:	b10b      	cbz	r3, 5dbe <write_callback+0x3e>
		callbacks->data_received(met_data);
    5dba:	4620      	mov	r0, r4
    5dbc:	4798      	blx	r3
	}

	return len;
}
    5dbe:	4628      	mov	r0, r5
    5dc0:	bd70      	pop	{r4, r5, r6, pc}
		met_data->write_count++;
    5dc2:	6821      	ldr	r1, [r4, #0]
		met_data->write_len += len;
    5dc4:	6866      	ldr	r6, [r4, #4]
		    ((uint64_t)met_data->write_len << 3) * 1000000000 / delta;
    5dc6:	4809      	ldr	r0, [pc, #36]	; (5dec <write_callback+0x6c>)
		met_data->write_len += len;
    5dc8:	442e      	add	r6, r5
		met_data->write_count++;
    5dca:	3101      	adds	r1, #1
    5dcc:	6021      	str	r1, [r4, #0]
		    ((uint64_t)met_data->write_len << 3) * 1000000000 / delta;
    5dce:	fba6 0100 	umull	r0, r1, r6, r0
		met_data->write_len += len;
    5dd2:	6066      	str	r6, [r4, #4]
		    ((uint64_t)met_data->write_len << 3) * 1000000000 / delta;
    5dd4:	4431      	add	r1, r6
    5dd6:	f7fa fe31 	bl	a3c <__aeabi_uldivmod>
		met_data->write_rate =
    5dda:	60a0      	str	r0, [r4, #8]
    5ddc:	e7e9      	b.n	5db2 <write_callback+0x32>
    5dde:	bf00      	nop
    5de0:	20001d60 	.word	0x20001d60
    5de4:	3b9aca00 	.word	0x3b9aca00
    5de8:	20001d5c 	.word	0x20001d5c
    5dec:	dcd65000 	.word	0xdcd65000

00005df0 <read_callback>:
			     const struct bt_gatt_attr *attr, void *buf,
			     uint16_t len, uint16_t offset)
{
	const struct bt_gatt_throughput_metrics *metrics = attr->user_data;

	len = MIN(sizeof(struct bt_gatt_throughput_metrics), len);
    5df0:	2b0c      	cmp	r3, #12
    5df2:	bf28      	it	cs
    5df4:	230c      	movcs	r3, #12
{
    5df6:	b5f0      	push	{r4, r5, r6, r7, lr}
	len = MIN(sizeof(struct bt_gatt_throughput_metrics), len);
    5df8:	461d      	mov	r5, r3

	if (callbacks->data_send) {
    5dfa:	4b0c      	ldr	r3, [pc, #48]	; (5e2c <read_callback+0x3c>)
    5dfc:	681b      	ldr	r3, [r3, #0]
    5dfe:	689b      	ldr	r3, [r3, #8]
{
    5e00:	b085      	sub	sp, #20
    5e02:	4606      	mov	r6, r0
    5e04:	460c      	mov	r4, r1
    5e06:	4617      	mov	r7, r2
	if (callbacks->data_send) {
    5e08:	b10b      	cbz	r3, 5e0e <read_callback+0x1e>
		callbacks->data_send(metrics);
    5e0a:	68c8      	ldr	r0, [r1, #12]
    5e0c:	4798      	blx	r3
	}


	return bt_gatt_attr_read(
    5e0e:	68e3      	ldr	r3, [r4, #12]
    5e10:	9301      	str	r3, [sp, #4]
    5e12:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    5e16:	9300      	str	r3, [sp, #0]
    5e18:	9502      	str	r5, [sp, #8]
    5e1a:	462b      	mov	r3, r5
    5e1c:	463a      	mov	r2, r7
    5e1e:	4621      	mov	r1, r4
    5e20:	4630      	mov	r0, r6
    5e22:	f01b fdb6 	bl	21992 <bt_gatt_attr_read>
		conn, attr, buf, len, offset, attr->user_data, len);
}
    5e26:	b005      	add	sp, #20
    5e28:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5e2a:	bf00      	nop
    5e2c:	20001d5c 	.word	0x20001d5c

00005e30 <bt_gatt_throughput_init>:
		);

int bt_gatt_throughput_init(struct bt_gatt_throughput *throughput,
			    const struct bt_gatt_throughput_cb *cb)
{
	if (!throughput || !cb) {
    5e30:	b120      	cbz	r0, 5e3c <bt_gatt_throughput_init+0xc>
    5e32:	b119      	cbz	r1, 5e3c <bt_gatt_throughput_init+0xc>
		return -EINVAL;
	}

	callbacks = cb;
    5e34:	4b03      	ldr	r3, [pc, #12]	; (5e44 <bt_gatt_throughput_init+0x14>)

	return 0;
    5e36:	2000      	movs	r0, #0
	callbacks = cb;
    5e38:	6019      	str	r1, [r3, #0]
	return 0;
    5e3a:	4770      	bx	lr
		return -EINVAL;
    5e3c:	f06f 0015 	mvn.w	r0, #21
}
    5e40:	4770      	bx	lr
    5e42:	bf00      	nop
    5e44:	20001d5c 	.word	0x20001d5c

00005e48 <print_digits>:
}
#endif /* CONFIG_PRINTK */

static void print_digits(out_func_t out, void *ctx, printk_val_t num, int base,
			 bool pad_before, char pad_char, int min_width)
{
    5e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5e4c:	b087      	sub	sp, #28
    5e4e:	460f      	mov	r7, r1
    5e50:	4619      	mov	r1, r3
	char buf[DIGITS_BUFLEN];
	int i;

	/* Print it backwards into the end of the buffer, low digits first */
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
		buf[i] = "0123456789abcdef"[num % base];
    5e52:	9b10      	ldr	r3, [sp, #64]	; 0x40
{
    5e54:	f89d b044 	ldrb.w	fp, [sp, #68]	; 0x44
    5e58:	f89d a048 	ldrb.w	sl, [sp, #72]	; 0x48
		buf[i] = "0123456789abcdef"[num % base];
    5e5c:	4c1f      	ldr	r4, [pc, #124]	; (5edc <print_digits+0x94>)
{
    5e5e:	4606      	mov	r6, r0
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
    5e60:	2514      	movs	r5, #20
{
    5e62:	4610      	mov	r0, r2
		buf[i] = "0123456789abcdef"[num % base];
    5e64:	4698      	mov	r8, r3
    5e66:	ea4f 79e3 	mov.w	r9, r3, asr #31
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
    5e6a:	ea50 0301 	orrs.w	r3, r0, r1
    5e6e:	d119      	bne.n	5ea4 <print_digits+0x5c>
		num /= base;
	}

	if (i == DIGITS_BUFLEN - 1) {
    5e70:	2d14      	cmp	r5, #20
		buf[i] = '0';
	} else {
		i++;
	}

	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
    5e72:	9c13      	ldr	r4, [sp, #76]	; 0x4c
		i++;
    5e74:	bf14      	ite	ne
    5e76:	3501      	addne	r5, #1
		buf[i] = '0';
    5e78:	2330      	moveq	r3, #48	; 0x30
	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
    5e7a:	442c      	add	r4, r5
		buf[i] = '0';
    5e7c:	bf08      	it	eq
    5e7e:	f88d 3014 	strbeq.w	r3, [sp, #20]
	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
    5e82:	2c15      	cmp	r4, #21
    5e84:	d01b      	beq.n	5ebe <print_digits+0x76>
    5e86:	3c15      	subs	r4, #21

	for (/**/; pad > 0 && pad_before; pad--) {
    5e88:	2c00      	cmp	r4, #0
    5e8a:	dc1a      	bgt.n	5ec2 <print_digits+0x7a>
		out(pad_char, ctx);
	}
	for (/**/; i < DIGITS_BUFLEN; i++) {
		out(buf[i], ctx);
    5e8c:	f81d 0005 	ldrb.w	r0, [sp, r5]
    5e90:	4639      	mov	r1, r7
	for (/**/; i < DIGITS_BUFLEN; i++) {
    5e92:	3501      	adds	r5, #1
		out(buf[i], ctx);
    5e94:	47b0      	blx	r6
	for (/**/; i < DIGITS_BUFLEN; i++) {
    5e96:	2d15      	cmp	r5, #21
    5e98:	d1f8      	bne.n	5e8c <print_digits+0x44>
	}
	for (/**/; pad > 0; pad--) {
    5e9a:	2c00      	cmp	r4, #0
    5e9c:	dc19      	bgt.n	5ed2 <print_digits+0x8a>
		out(pad_char, ctx);
	}
}
    5e9e:	b007      	add	sp, #28
    5ea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf[i] = "0123456789abcdef"[num % base];
    5ea4:	4642      	mov	r2, r8
    5ea6:	464b      	mov	r3, r9
    5ea8:	f7fa fdc8 	bl	a3c <__aeabi_uldivmod>
    5eac:	5ca2      	ldrb	r2, [r4, r2]
    5eae:	f80d 2005 	strb.w	r2, [sp, r5]
    5eb2:	4684      	mov	ip, r0
    5eb4:	460b      	mov	r3, r1
		num /= base;
    5eb6:	4660      	mov	r0, ip
    5eb8:	4619      	mov	r1, r3
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
    5eba:	3d01      	subs	r5, #1
    5ebc:	e7d5      	b.n	5e6a <print_digits+0x22>
	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
    5ebe:	2400      	movs	r4, #0
	for (/**/; i < DIGITS_BUFLEN; i++) {
    5ec0:	e7e4      	b.n	5e8c <print_digits+0x44>
	for (/**/; pad > 0 && pad_before; pad--) {
    5ec2:	f1bb 0f00 	cmp.w	fp, #0
    5ec6:	d0e1      	beq.n	5e8c <print_digits+0x44>
		out(pad_char, ctx);
    5ec8:	4639      	mov	r1, r7
    5eca:	4650      	mov	r0, sl
    5ecc:	47b0      	blx	r6
	for (/**/; pad > 0 && pad_before; pad--) {
    5ece:	3c01      	subs	r4, #1
    5ed0:	e7da      	b.n	5e88 <print_digits+0x40>
		out(pad_char, ctx);
    5ed2:	4639      	mov	r1, r7
    5ed4:	4650      	mov	r0, sl
    5ed6:	47b0      	blx	r6
	for (/**/; pad > 0; pad--) {
    5ed8:	3c01      	subs	r4, #1
    5eda:	e7de      	b.n	5e9a <print_digits+0x52>
    5edc:	00024fb2 	.word	0x00024fb2

00005ee0 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    5ee0:	680b      	ldr	r3, [r1, #0]
    5ee2:	3301      	adds	r3, #1
    5ee4:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    5ee6:	4b01      	ldr	r3, [pc, #4]	; (5eec <char_out+0xc>)
    5ee8:	681b      	ldr	r3, [r3, #0]
    5eea:	4718      	bx	r3
    5eec:	20000140 	.word	0x20000140

00005ef0 <__printk_hook_install>:
	_char_out = fn;
    5ef0:	4b01      	ldr	r3, [pc, #4]	; (5ef8 <__printk_hook_install+0x8>)
    5ef2:	6018      	str	r0, [r3, #0]
}
    5ef4:	4770      	bx	lr
    5ef6:	bf00      	nop
    5ef8:	20000140 	.word	0x20000140

00005efc <z_vprintk>:
{
    5efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char length_mod = 0;
    5f00:	2600      	movs	r6, #0
{
    5f02:	b087      	sub	sp, #28
    5f04:	4605      	mov	r5, r0
    5f06:	468b      	mov	fp, r1
    5f08:	461c      	mov	r4, r3
	while (*fmt) {
    5f0a:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
	int min_width = -1;
    5f0e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
    5f12:	4637      	mov	r7, r6
			might_format = 0;
    5f14:	2300      	movs	r3, #0
					break;
    5f16:	e007      	b.n	5f28 <z_vprintk+0x2c>
		if (!might_format) {
    5f18:	b96b      	cbnz	r3, 5f36 <z_vprintk+0x3a>
			if (*fmt != '%') {
    5f1a:	2825      	cmp	r0, #37	; 0x25
    5f1c:	f000 80fc 	beq.w	6118 <z_vprintk+0x21c>
				out((int)*fmt, ctx);
    5f20:	4659      	mov	r1, fp
    5f22:	9304      	str	r3, [sp, #16]
    5f24:	47a8      	blx	r5
    5f26:	9b04      	ldr	r3, [sp, #16]
	while (*fmt) {
    5f28:	f819 0f01 	ldrb.w	r0, [r9, #1]!
    5f2c:	2800      	cmp	r0, #0
    5f2e:	d1f3      	bne.n	5f18 <z_vprintk+0x1c>
}
    5f30:	b007      	add	sp, #28
    5f32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
    5f36:	287a      	cmp	r0, #122	; 0x7a
    5f38:	d80a      	bhi.n	5f50 <z_vprintk+0x54>
    5f3a:	2862      	cmp	r0, #98	; 0x62
    5f3c:	d810      	bhi.n	5f60 <z_vprintk+0x64>
    5f3e:	2830      	cmp	r0, #48	; 0x30
    5f40:	d052      	beq.n	5fe8 <z_vprintk+0xec>
    5f42:	d845      	bhi.n	5fd0 <z_vprintk+0xd4>
    5f44:	2825      	cmp	r0, #37	; 0x25
    5f46:	f000 80e5 	beq.w	6114 <z_vprintk+0x218>
    5f4a:	282d      	cmp	r0, #45	; 0x2d
    5f4c:	f000 80ea 	beq.w	6124 <z_vprintk+0x228>
					out((int)'%', ctx);
    5f50:	4659      	mov	r1, fp
    5f52:	2025      	movs	r0, #37	; 0x25
    5f54:	47a8      	blx	r5
					out((int)*fmt, ctx);
    5f56:	f899 0000 	ldrb.w	r0, [r9]
    5f5a:	4659      	mov	r1, fp
    5f5c:	47a8      	blx	r5
    5f5e:	e7d9      	b.n	5f14 <z_vprintk+0x18>
    5f60:	f1a0 0263 	sub.w	r2, r0, #99	; 0x63
    5f64:	2a17      	cmp	r2, #23
    5f66:	d8f3      	bhi.n	5f50 <z_vprintk+0x54>
    5f68:	a101      	add	r1, pc, #4	; (adr r1, 5f70 <z_vprintk+0x74>)
    5f6a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    5f6e:	bf00      	nop
    5f70:	0000610d 	.word	0x0000610d
    5f74:	00006031 	.word	0x00006031
    5f78:	00005f51 	.word	0x00005f51
    5f7c:	00005f51 	.word	0x00005f51
    5f80:	00005f51 	.word	0x00005f51
    5f84:	00006013 	.word	0x00006013
    5f88:	00006031 	.word	0x00006031
    5f8c:	00005f51 	.word	0x00005f51
    5f90:	00005f51 	.word	0x00005f51
    5f94:	00006013 	.word	0x00006013
    5f98:	00005f51 	.word	0x00005f51
    5f9c:	00005f51 	.word	0x00005f51
    5fa0:	00005f51 	.word	0x00005f51
    5fa4:	00006095 	.word	0x00006095
    5fa8:	00005f51 	.word	0x00005f51
    5fac:	00005f51 	.word	0x00005f51
    5fb0:	000060d7 	.word	0x000060d7
    5fb4:	00005f51 	.word	0x00005f51
    5fb8:	00006031 	.word	0x00006031
    5fbc:	00005f51 	.word	0x00005f51
    5fc0:	00005f51 	.word	0x00005f51
    5fc4:	00005fd9 	.word	0x00005fd9
    5fc8:	00005f51 	.word	0x00005f51
    5fcc:	00006013 	.word	0x00006013
			switch (*fmt) {
    5fd0:	2839      	cmp	r0, #57	; 0x39
    5fd2:	d915      	bls.n	6000 <z_vprintk+0x104>
    5fd4:	2858      	cmp	r0, #88	; 0x58
    5fd6:	d1bb      	bne.n	5f50 <z_vprintk+0x54>
				if (*fmt == 'p') {
    5fd8:	f899 3000 	ldrb.w	r3, [r9]
    5fdc:	2b70      	cmp	r3, #112	; 0x70
    5fde:	d163      	bne.n	60a8 <z_vprintk+0x1ac>
					x = va_arg(ap, unsigned int);
    5fe0:	f854 2b04 	ldr.w	r2, [r4], #4
    5fe4:	2300      	movs	r3, #0
    5fe6:	e06a      	b.n	60be <z_vprintk+0x1c2>
				if (min_width < 0 && padding == PAD_NONE) {
    5fe8:	f1b8 0f00 	cmp.w	r8, #0
    5fec:	da0b      	bge.n	6006 <z_vprintk+0x10a>
    5fee:	2f00      	cmp	r7, #0
    5ff0:	f000 809a 	beq.w	6128 <z_vprintk+0x22c>
					min_width = *fmt - '0';
    5ff4:	f1a0 0830 	sub.w	r8, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
    5ff8:	2f00      	cmp	r7, #0
    5ffa:	bf08      	it	eq
    5ffc:	2702      	moveq	r7, #2
    5ffe:	e793      	b.n	5f28 <z_vprintk+0x2c>
				if (min_width < 0) {
    6000:	f1b8 0f00 	cmp.w	r8, #0
    6004:	dbf6      	blt.n	5ff4 <z_vprintk+0xf8>
					min_width = 10 * min_width + *fmt - '0';
    6006:	220a      	movs	r2, #10
    6008:	fb02 0808 	mla	r8, r2, r8, r0
    600c:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
    6010:	e7f2      	b.n	5ff8 <z_vprintk+0xfc>
				if (*fmt == 'h' && length_mod == 'h') {
    6012:	2868      	cmp	r0, #104	; 0x68
    6014:	d103      	bne.n	601e <z_vprintk+0x122>
    6016:	2e68      	cmp	r6, #104	; 0x68
    6018:	d106      	bne.n	6028 <z_vprintk+0x12c>
					length_mod = 'H';
    601a:	2648      	movs	r6, #72	; 0x48
    601c:	e784      	b.n	5f28 <z_vprintk+0x2c>
				} else if (*fmt == 'l' && length_mod == 'l') {
    601e:	286c      	cmp	r0, #108	; 0x6c
    6020:	d102      	bne.n	6028 <z_vprintk+0x12c>
    6022:	2e6c      	cmp	r6, #108	; 0x6c
    6024:	f000 8082 	beq.w	612c <z_vprintk+0x230>
				} else if (length_mod == 0) {
    6028:	2e00      	cmp	r6, #0
    602a:	d191      	bne.n	5f50 <z_vprintk+0x54>
    602c:	4606      	mov	r6, r0
    602e:	e77b      	b.n	5f28 <z_vprintk+0x2c>
				if (length_mod == 'z') {
    6030:	2e7a      	cmp	r6, #122	; 0x7a
    6032:	d103      	bne.n	603c <z_vprintk+0x140>
					d = va_arg(ap, int);
    6034:	f854 2b04 	ldr.w	r2, [r4], #4
    6038:	17d3      	asrs	r3, r2, #31
    603a:	e008      	b.n	604e <z_vprintk+0x152>
				} else if (length_mod == 'l') {
    603c:	2e6c      	cmp	r6, #108	; 0x6c
    603e:	d0f9      	beq.n	6034 <z_vprintk+0x138>
				} else if (length_mod == 'L') {
    6040:	2e4c      	cmp	r6, #76	; 0x4c
    6042:	d1f7      	bne.n	6034 <z_vprintk+0x138>
					long long lld = va_arg(ap, long long);
    6044:	3407      	adds	r4, #7
    6046:	f024 0407 	bic.w	r4, r4, #7
					d = (printk_val_t) lld;
    604a:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				if (*fmt != 'u' && negative(d)) {
    604e:	2875      	cmp	r0, #117	; 0x75
    6050:	d00f      	beq.n	6072 <z_vprintk+0x176>
    6052:	2a00      	cmp	r2, #0
    6054:	f173 0100 	sbcs.w	r1, r3, #0
    6058:	da0b      	bge.n	6072 <z_vprintk+0x176>
					out((int)'-', ctx);
    605a:	4659      	mov	r1, fp
    605c:	202d      	movs	r0, #45	; 0x2d
    605e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    6062:	47a8      	blx	r5
					d = -d;
    6064:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    6068:	4252      	negs	r2, r2
    606a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
					min_width--;
    606e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
	print_digits(out, ctx, num, 10, padding != PAD_SPACE_AFTER,
    6072:	1ef9      	subs	r1, r7, #3
    6074:	bf18      	it	ne
    6076:	2101      	movne	r1, #1
    6078:	2f01      	cmp	r7, #1
    607a:	bf0c      	ite	eq
    607c:	2030      	moveq	r0, #48	; 0x30
    607e:	2020      	movne	r0, #32
    6080:	e9cd 0802 	strd	r0, r8, [sp, #8]
    6084:	9101      	str	r1, [sp, #4]
    6086:	210a      	movs	r1, #10
	print_digits(out, ctx, num, 16, padding != PAD_SPACE_AFTER,
    6088:	9100      	str	r1, [sp, #0]
    608a:	4628      	mov	r0, r5
    608c:	4659      	mov	r1, fp
    608e:	f7ff fedb 	bl	5e48 <print_digits>
    6092:	e73f      	b.n	5f14 <z_vprintk+0x18>
				out('0', ctx);
    6094:	4659      	mov	r1, fp
    6096:	2030      	movs	r0, #48	; 0x30
    6098:	47a8      	blx	r5
				out('x', ctx);
    609a:	4659      	mov	r1, fp
    609c:	2078      	movs	r0, #120	; 0x78
    609e:	47a8      	blx	r5
				min_width = sizeof(void *) * 2;
    60a0:	f04f 0808 	mov.w	r8, #8
				padding = PAD_ZERO_BEFORE;
    60a4:	2701      	movs	r7, #1
    60a6:	e797      	b.n	5fd8 <z_vprintk+0xdc>
				} else if (length_mod == 'l') {
    60a8:	2e6c      	cmp	r6, #108	; 0x6c
    60aa:	d099      	beq.n	5fe0 <z_vprintk+0xe4>
				} else if (length_mod == 'L') {
    60ac:	2e4c      	cmp	r6, #76	; 0x4c
    60ae:	d197      	bne.n	5fe0 <z_vprintk+0xe4>
					x = va_arg(ap, unsigned long long);
    60b0:	1de3      	adds	r3, r4, #7
    60b2:	f023 0307 	bic.w	r3, r3, #7
    60b6:	461c      	mov	r4, r3
    60b8:	685b      	ldr	r3, [r3, #4]
    60ba:	f854 2b08 	ldr.w	r2, [r4], #8
	print_digits(out, ctx, num, 16, padding != PAD_SPACE_AFTER,
    60be:	1ef9      	subs	r1, r7, #3
    60c0:	bf18      	it	ne
    60c2:	2101      	movne	r1, #1
    60c4:	2f01      	cmp	r7, #1
    60c6:	bf0c      	ite	eq
    60c8:	2030      	moveq	r0, #48	; 0x30
    60ca:	2020      	movne	r0, #32
    60cc:	9101      	str	r1, [sp, #4]
    60ce:	e9cd 0802 	strd	r0, r8, [sp, #8]
    60d2:	2110      	movs	r1, #16
    60d4:	e7d8      	b.n	6088 <z_vprintk+0x18c>
				char *s = va_arg(ap, char *);
    60d6:	46a2      	mov	sl, r4
    60d8:	f85a 3b04 	ldr.w	r3, [sl], #4
				while (*s) {
    60dc:	461c      	mov	r4, r3
    60de:	4621      	mov	r1, r4
    60e0:	f814 0b01 	ldrb.w	r0, [r4], #1
    60e4:	b940      	cbnz	r0, 60f8 <z_vprintk+0x1fc>
				if (padding == PAD_SPACE_AFTER) {
    60e6:	2f03      	cmp	r7, #3
    60e8:	d122      	bne.n	6130 <z_vprintk+0x234>
					int remaining = min_width - (s - start);
    60ea:	1acc      	subs	r4, r1, r3
    60ec:	eba8 0404 	sub.w	r4, r8, r4
					while (remaining-- > 0) {
    60f0:	2c00      	cmp	r4, #0
    60f2:	dc06      	bgt.n	6102 <z_vprintk+0x206>
				char *s = va_arg(ap, char *);
    60f4:	4654      	mov	r4, sl
    60f6:	e70d      	b.n	5f14 <z_vprintk+0x18>
					out((int)(*s++), ctx);
    60f8:	4659      	mov	r1, fp
    60fa:	9304      	str	r3, [sp, #16]
    60fc:	47a8      	blx	r5
    60fe:	9b04      	ldr	r3, [sp, #16]
    6100:	e7ed      	b.n	60de <z_vprintk+0x1e2>
						out(' ', ctx);
    6102:	4659      	mov	r1, fp
    6104:	2020      	movs	r0, #32
    6106:	47a8      	blx	r5
    6108:	3c01      	subs	r4, #1
    610a:	e7f1      	b.n	60f0 <z_vprintk+0x1f4>
				out(c, ctx);
    610c:	f854 0b04 	ldr.w	r0, [r4], #4
    6110:	4659      	mov	r1, fp
    6112:	e723      	b.n	5f5c <z_vprintk+0x60>
				out((int)'%', ctx);
    6114:	4659      	mov	r1, fp
    6116:	e721      	b.n	5f5c <z_vprintk+0x60>
				length_mod = 0;
    6118:	461e      	mov	r6, r3
				padding = PAD_NONE;
    611a:	461f      	mov	r7, r3
				min_width = -1;
    611c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
				might_format = 1;
    6120:	2301      	movs	r3, #1
    6122:	e701      	b.n	5f28 <z_vprintk+0x2c>
			switch (*fmt) {
    6124:	2703      	movs	r7, #3
    6126:	e6ff      	b.n	5f28 <z_vprintk+0x2c>
					padding = PAD_ZERO_BEFORE;
    6128:	2701      	movs	r7, #1
    612a:	e6fd      	b.n	5f28 <z_vprintk+0x2c>
					length_mod = 'L';
    612c:	264c      	movs	r6, #76	; 0x4c
    612e:	e6fb      	b.n	5f28 <z_vprintk+0x2c>
				char *s = va_arg(ap, char *);
    6130:	4654      	mov	r4, sl
			might_format = 0;
    6132:	4603      	mov	r3, r0
    6134:	e6f8      	b.n	5f28 <z_vprintk+0x2c>
    6136:	bf00      	nop

00006138 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    6138:	b507      	push	{r0, r1, r2, lr}
    613a:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    613c:	2100      	movs	r1, #0
{
    613e:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    6140:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	z_vprintk(char_out, &ctx, fmt, ap);
    6142:	4803      	ldr	r0, [pc, #12]	; (6150 <vprintk+0x18>)
    6144:	a901      	add	r1, sp, #4
    6146:	f7ff fed9 	bl	5efc <z_vprintk>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    614a:	b003      	add	sp, #12
    614c:	f85d fb04 	ldr.w	pc, [sp], #4
    6150:	00005ee1 	.word	0x00005ee1

00006154 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    6154:	b530      	push	{r4, r5, lr}
    6156:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    6158:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    615c:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    615e:	2500      	movs	r5, #0

	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    6160:	4805      	ldr	r0, [pc, #20]	; (6178 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    6162:	9503      	str	r5, [sp, #12]
	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    6164:	a901      	add	r1, sp, #4
    6166:	f7ff fec9 	bl	5efc <z_vprintk>

	if (ctx.count < ctx.max) {
    616a:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    616e:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    6170:	bfb8      	it	lt
    6172:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    6174:	b005      	add	sp, #20
    6176:	bd30      	pop	{r4, r5, pc}
    6178:	0001df2d 	.word	0x0001df2d

0000617c <enable_logger>:

K_THREAD_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(struct device *arg)
{
    617c:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    617e:	4910      	ldr	r1, [pc, #64]	; (61c0 <enable_logger+0x44>)
    6180:	4810      	ldr	r0, [pc, #64]	; (61c4 <enable_logger+0x48>)
{
    6182:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    6184:	2200      	movs	r2, #0
    6186:	f01d f843 	bl	23210 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    618a:	4d0f      	ldr	r5, [pc, #60]	; (61c8 <enable_logger+0x4c>)
    618c:	490f      	ldr	r1, [pc, #60]	; (61cc <enable_logger+0x50>)
    618e:	2200      	movs	r2, #0
    6190:	2300      	movs	r3, #0
    6192:	e9cd 2306 	strd	r2, r3, [sp, #24]
    6196:	2400      	movs	r4, #0
    6198:	230e      	movs	r3, #14
    619a:	e9cd 3403 	strd	r3, r4, [sp, #12]
    619e:	e9cd 4401 	strd	r4, r4, [sp, #4]
    61a2:	4b0b      	ldr	r3, [pc, #44]	; (61d0 <enable_logger+0x54>)
    61a4:	9400      	str	r4, [sp, #0]
    61a6:	f44f 7240 	mov.w	r2, #768	; 0x300
    61aa:	4628      	mov	r0, r5
    61ac:	f017 fb72 	bl	1d894 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    61b0:	4908      	ldr	r1, [pc, #32]	; (61d4 <enable_logger+0x58>)
    61b2:	4628      	mov	r0, r5
    61b4:	f01c ff35 	bl	23022 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    61b8:	4620      	mov	r0, r4
    61ba:	b009      	add	sp, #36	; 0x24
    61bc:	bd30      	pop	{r4, r5, pc}
    61be:	bf00      	nop
    61c0:	000061d9 	.word	0x000061d9
    61c4:	200009f8 	.word	0x200009f8
    61c8:	20000a30 	.word	0x20000a30
    61cc:	2000a380 	.word	0x2000a380
    61d0:	000065f1 	.word	0x000065f1
    61d4:	00024fc3 	.word	0x00024fc3

000061d8 <log_process_thread_timer_expiry_fn>:
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    61d8:	4801      	ldr	r0, [pc, #4]	; (61e0 <log_process_thread_timer_expiry_fn+0x8>)
    61da:	f017 bacd 	b.w	1d778 <z_impl_k_sem_give>
    61de:	bf00      	nop
    61e0:	20000840 	.word	0x20000840

000061e4 <log_core_init>:
{
    61e4:	b508      	push	{r3, lr}
		log_msg_pool_init();
    61e6:	f000 fa65 	bl	66b4 <log_msg_pool_init>
		log_list_init(&list);
    61ea:	4809      	ldr	r0, [pc, #36]	; (6210 <log_core_init+0x2c>)
    61ec:	f018 f92e 	bl	1e44c <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
    61f0:	2304      	movs	r3, #4
    61f2:	2228      	movs	r2, #40	; 0x28
    61f4:	4907      	ldr	r1, [pc, #28]	; (6214 <log_core_init+0x30>)
    61f6:	4808      	ldr	r0, [pc, #32]	; (6218 <log_core_init+0x34>)
    61f8:	f01c fcd8 	bl	22bac <k_mem_slab_init>
		timestamp_func = k_cycle_get_32_wrapper;
    61fc:	4b07      	ldr	r3, [pc, #28]	; (621c <log_core_init+0x38>)
    61fe:	4a08      	ldr	r2, [pc, #32]	; (6220 <log_core_init+0x3c>)
    6200:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
    6202:	f44f 4000 	mov.w	r0, #32768	; 0x8000
}
    6206:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	log_output_timestamp_freq_set(freq);
    620a:	f000 bc97 	b.w	6b3c <log_output_timestamp_freq_set>
    620e:	bf00      	nop
    6210:	20001d7c 	.word	0x20001d7c
    6214:	2000e1d0 	.word	0x2000e1d0
    6218:	20001d84 	.word	0x20001d84
    621c:	20000144 	.word	0x20000144
    6220:	0001e48b 	.word	0x0001e48b

00006224 <dropped_notify>:
{
    6224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6226:	4b0f      	ldr	r3, [pc, #60]	; (6264 <dropped_notify+0x40>)
    6228:	f3bf 8f5b 	dmb	ish
    622c:	2500      	movs	r5, #0
    622e:	e853 7f00 	ldrex	r7, [r3]
    6232:	e843 5200 	strex	r2, r5, [r3]
    6236:	2a00      	cmp	r2, #0
    6238:	d1f9      	bne.n	622e <dropped_notify+0xa>
    623a:	f3bf 8f5b 	dmb	ish
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    623e:	4c0a      	ldr	r4, [pc, #40]	; (6268 <dropped_notify+0x44>)
    6240:	4e0a      	ldr	r6, [pc, #40]	; (626c <dropped_notify+0x48>)
    6242:	1b36      	subs	r6, r6, r4
    6244:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    6246:	42b5      	cmp	r5, r6
    6248:	db00      	blt.n	624c <dropped_notify+0x28>
}
    624a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    624c:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    624e:	795b      	ldrb	r3, [r3, #5]
    6250:	b12b      	cbz	r3, 625e <dropped_notify+0x3a>
	if (backend->api->dropped != NULL) {
    6252:	6823      	ldr	r3, [r4, #0]
    6254:	68db      	ldr	r3, [r3, #12]
    6256:	b113      	cbz	r3, 625e <dropped_notify+0x3a>
		backend->api->dropped(backend, cnt);
    6258:	4639      	mov	r1, r7
    625a:	4620      	mov	r0, r4
    625c:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    625e:	3501      	adds	r5, #1
    6260:	3410      	adds	r4, #16
    6262:	e7f0      	b.n	6246 <dropped_notify+0x22>
    6264:	20001d74 	.word	0x20001d74
    6268:	00023820 	.word	0x00023820
    626c:	00023840 	.word	0x00023840

00006270 <log_dropped>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    6270:	4b06      	ldr	r3, [pc, #24]	; (628c <log_dropped+0x1c>)
    6272:	f3bf 8f5b 	dmb	ish
    6276:	e853 2f00 	ldrex	r2, [r3]
    627a:	3201      	adds	r2, #1
    627c:	e843 2100 	strex	r1, r2, [r3]
    6280:	2900      	cmp	r1, #0
    6282:	d1f8      	bne.n	6276 <log_dropped+0x6>
    6284:	f3bf 8f5b 	dmb	ish
}
    6288:	4770      	bx	lr
    628a:	bf00      	nop
    628c:	20001d74 	.word	0x20001d74

00006290 <log_source_name_get>:
    6290:	4a04      	ldr	r2, [pc, #16]	; (62a4 <log_source_name_get+0x14>)
    6292:	4b05      	ldr	r3, [pc, #20]	; (62a8 <log_source_name_get+0x18>)
    6294:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    6296:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    629a:	bf34      	ite	cc
    629c:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
    62a0:	2000      	movcs	r0, #0
}
    62a2:	4770      	bx	lr
    62a4:	000236f0 	.word	0x000236f0
    62a8:	00023820 	.word	0x00023820

000062ac <log_backend_enable>:
	id += backend - log_backend_get(0);
    62ac:	4b09      	ldr	r3, [pc, #36]	; (62d4 <log_backend_enable+0x28>)
	log_backend_id_set(backend, id);
    62ae:	6842      	ldr	r2, [r0, #4]
	id += backend - log_backend_get(0);
    62b0:	1ac3      	subs	r3, r0, r3
    62b2:	111b      	asrs	r3, r3, #4
    62b4:	3301      	adds	r3, #1
{
    62b6:	b510      	push	{r4, lr}
	log_backend_id_set(backend, id);
    62b8:	7113      	strb	r3, [r2, #4]
	log_backend_activate(backend, ctx);
    62ba:	6843      	ldr	r3, [r0, #4]
	if (!backend_attached) {
    62bc:	4c06      	ldr	r4, [pc, #24]	; (62d8 <log_backend_enable+0x2c>)
	backend->cb->ctx = ctx;
    62be:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    62c0:	2201      	movs	r2, #1
    62c2:	715a      	strb	r2, [r3, #5]
    62c4:	7822      	ldrb	r2, [r4, #0]
    62c6:	b912      	cbnz	r2, 62ce <log_backend_enable+0x22>
    62c8:	4804      	ldr	r0, [pc, #16]	; (62dc <log_backend_enable+0x30>)
    62ca:	f017 fa55 	bl	1d778 <z_impl_k_sem_give>
	backend_attached = true;
    62ce:	2301      	movs	r3, #1
    62d0:	7023      	strb	r3, [r4, #0]
}
    62d2:	bd10      	pop	{r4, pc}
    62d4:	00023820 	.word	0x00023820
    62d8:	200096c3 	.word	0x200096c3
    62dc:	20000840 	.word	0x20000840

000062e0 <log_init>:
{
    62e0:	b570      	push	{r4, r5, r6, lr}
    62e2:	4b11      	ldr	r3, [pc, #68]	; (6328 <log_init+0x48>)
    62e4:	f3bf 8f5b 	dmb	ish
    62e8:	e853 5f00 	ldrex	r5, [r3]
    62ec:	1c6a      	adds	r2, r5, #1
    62ee:	e843 2100 	strex	r1, r2, [r3]
    62f2:	2900      	cmp	r1, #0
    62f4:	d1f8      	bne.n	62e8 <log_init+0x8>
    62f6:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    62fa:	b92d      	cbnz	r5, 6308 <log_init+0x28>
	return __log_backends_end - __log_backends_start;
    62fc:	4c0b      	ldr	r4, [pc, #44]	; (632c <log_init+0x4c>)
    62fe:	4e0c      	ldr	r6, [pc, #48]	; (6330 <log_init+0x50>)
    6300:	1b36      	subs	r6, r6, r4
    6302:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
    6304:	42b5      	cmp	r5, r6
    6306:	db00      	blt.n	630a <log_init+0x2a>
}
    6308:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    630a:	7b23      	ldrb	r3, [r4, #12]
    630c:	b143      	cbz	r3, 6320 <log_init+0x40>
			if (backend->api->init != NULL) {
    630e:	6823      	ldr	r3, [r4, #0]
    6310:	695b      	ldr	r3, [r3, #20]
    6312:	b103      	cbz	r3, 6316 <log_init+0x36>
				backend->api->init();
    6314:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
    6316:	2204      	movs	r2, #4
    6318:	2100      	movs	r1, #0
    631a:	4620      	mov	r0, r4
    631c:	f7ff ffc6 	bl	62ac <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    6320:	3501      	adds	r5, #1
    6322:	3410      	adds	r4, #16
    6324:	e7ee      	b.n	6304 <log_init+0x24>
    6326:	bf00      	nop
    6328:	20001d78 	.word	0x20001d78
    632c:	00023820 	.word	0x00023820
    6330:	00023840 	.word	0x00023840

00006334 <log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
    6334:	4b16      	ldr	r3, [pc, #88]	; (6390 <log_strdup+0x5c>)
    6336:	4298      	cmp	r0, r3
{
    6338:	b537      	push	{r0, r1, r2, r4, r5, lr}
    633a:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    633c:	d302      	bcc.n	6344 <log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
    633e:	4b15      	ldr	r3, [pc, #84]	; (6394 <log_strdup+0x60>)
    6340:	4298      	cmp	r0, r3
    6342:	d320      	bcc.n	6386 <log_strdup+0x52>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
    6344:	4814      	ldr	r0, [pc, #80]	; (6398 <log_strdup+0x64>)
    6346:	2200      	movs	r2, #0
    6348:	2300      	movs	r3, #0
    634a:	a901      	add	r1, sp, #4
    634c:	f016 fd60 	bl	1ce10 <k_mem_slab_alloc>
	if (err != 0) {
    6350:	4605      	mov	r5, r0
    6352:	b9d8      	cbnz	r0, 638c <log_strdup+0x58>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    6354:	2201      	movs	r2, #1
    6356:	9b01      	ldr	r3, [sp, #4]
    6358:	f3bf 8f5b 	dmb	ish
    635c:	e853 1f00 	ldrex	r1, [r3]
    6360:	e843 2000 	strex	r0, r2, [r3]
    6364:	2800      	cmp	r0, #0
    6366:	d1f9      	bne.n	635c <log_strdup+0x28>
    6368:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
    636c:	9801      	ldr	r0, [sp, #4]
    636e:	4621      	mov	r1, r4
    6370:	221f      	movs	r2, #31
    6372:	3004      	adds	r0, #4
    6374:	f019 fd49 	bl	1fe0a <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
    6378:	9c01      	ldr	r4, [sp, #4]
    637a:	237e      	movs	r3, #126	; 0x7e
    637c:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	dup->buf[sizeof(dup->buf) - 1] = '\0';
    6380:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
	return dup->buf;
    6384:	3404      	adds	r4, #4
}
    6386:	4620      	mov	r0, r4
    6388:	b003      	add	sp, #12
    638a:	bd30      	pop	{r4, r5, pc}
		return (char *)log_strdup_fail_msg;
    638c:	4c03      	ldr	r4, [pc, #12]	; (639c <log_strdup+0x68>)
    638e:	e7fa      	b.n	6386 <log_strdup+0x52>
    6390:	000234b4 	.word	0x000234b4
    6394:	00026e6c 	.word	0x00026e6c
    6398:	20001d84 	.word	0x20001d84
    639c:	00024fcb 	.word	0x00024fcb

000063a0 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
    63a0:	b148      	cbz	r0, 63b6 <log_is_strdup+0x16>
    63a2:	4b05      	ldr	r3, [pc, #20]	; (63b8 <log_is_strdup+0x18>)
    63a4:	4298      	cmp	r0, r3
    63a6:	d305      	bcc.n	63b4 <log_is_strdup+0x14>
    63a8:	33a0      	adds	r3, #160	; 0xa0
    63aa:	4298      	cmp	r0, r3
    63ac:	bf2c      	ite	cs
    63ae:	2000      	movcs	r0, #0
    63b0:	2001      	movcc	r0, #1
    63b2:	4770      	bx	lr
    63b4:	2000      	movs	r0, #0
}
    63b6:	4770      	bx	lr
    63b8:	2000e1d0 	.word	0x2000e1d0

000063bc <z_impl_log_process>:
{
    63bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
    63c0:	4b4c      	ldr	r3, [pc, #304]	; (64f4 <z_impl_log_process+0x138>)
    63c2:	781b      	ldrb	r3, [r3, #0]
{
    63c4:	b085      	sub	sp, #20
    63c6:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
    63c8:	b903      	cbnz	r3, 63cc <z_impl_log_process+0x10>
    63ca:	b360      	cbz	r0, 6426 <z_impl_log_process+0x6a>
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
    63cc:	f04f 0320 	mov.w	r3, #32
    63d0:	f3ef 8611 	mrs	r6, BASEPRI
    63d4:	f383 8811 	msr	BASEPRI, r3
    63d8:	f3bf 8f6f 	isb	sy
	msg = log_list_head_get(&list);
    63dc:	4846      	ldr	r0, [pc, #280]	; (64f8 <z_impl_log_process+0x13c>)
    63de:	f018 f845 	bl	1e46c <log_list_head_get>
    63e2:	4605      	mov	r5, r0
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    63e4:	f386 8811 	msr	BASEPRI, r6
    63e8:	f3bf 8f6f 	isb	sy
	if (msg != NULL) {
    63ec:	b178      	cbz	r0, 640e <z_impl_log_process+0x52>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    63ee:	f3bf 8f5b 	dmb	ish
    63f2:	4b42      	ldr	r3, [pc, #264]	; (64fc <z_impl_log_process+0x140>)
    63f4:	e853 2f00 	ldrex	r2, [r3]
    63f8:	3a01      	subs	r2, #1
    63fa:	e843 2100 	strex	r1, r2, [r3]
    63fe:	2900      	cmp	r1, #0
    6400:	d1f8      	bne.n	63f4 <z_impl_log_process+0x38>
    6402:	f3bf 8f5b 	dmb	ish
	if (!bypass) {
    6406:	b194      	cbz	r4, 642e <z_impl_log_process+0x72>
	log_msg_put(msg);
    6408:	4628      	mov	r0, r5
    640a:	f018 f946 	bl	1e69a <log_msg_put>
	if (!bypass && dropped_cnt) {
    640e:	b924      	cbnz	r4, 641a <z_impl_log_process+0x5e>
    6410:	4b3b      	ldr	r3, [pc, #236]	; (6500 <z_impl_log_process+0x144>)
    6412:	681b      	ldr	r3, [r3, #0]
    6414:	b10b      	cbz	r3, 641a <z_impl_log_process+0x5e>
		dropped_notify();
    6416:	f7ff ff05 	bl	6224 <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
    641a:	4837      	ldr	r0, [pc, #220]	; (64f8 <z_impl_log_process+0x13c>)
    641c:	f018 f824 	bl	1e468 <log_list_head_peek>
    6420:	1e04      	subs	r4, r0, #0
    6422:	bf18      	it	ne
    6424:	2401      	movne	r4, #1
}
    6426:	4620      	mov	r0, r4
    6428:	b005      	add	sp, #20
    642a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
    642e:	4b35      	ldr	r3, [pc, #212]	; (6504 <z_impl_log_process+0x148>)
		if (IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
    6430:	781b      	ldrb	r3, [r3, #0]
    6432:	b9cb      	cbnz	r3, 6468 <z_impl_log_process+0xac>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    6434:	7a2b      	ldrb	r3, [r5, #8]
	if (!log_msg_is_std(msg)) {
    6436:	07db      	lsls	r3, r3, #31
    6438:	d416      	bmi.n	6468 <z_impl_log_process+0xac>
	msg_str = log_msg_str_get(msg);
    643a:	f018 f941 	bl	1e6c0 <log_msg_str_get>
    643e:	4680      	mov	r8, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    6440:	4628      	mov	r0, r5
    6442:	f018 f908 	bl	1e656 <log_msg_nargs_get>
    6446:	4601      	mov	r1, r0
    6448:	4640      	mov	r0, r8
    644a:	f018 f822 	bl	1e492 <z_log_get_s_mask>
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    644e:	4f2e      	ldr	r7, [pc, #184]	; (6508 <z_impl_log_process+0x14c>)
    6450:	4b2e      	ldr	r3, [pc, #184]	; (650c <z_impl_log_process+0x150>)
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    6452:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 6528 <z_impl_log_process+0x16c>
    6456:	1bdb      	subs	r3, r3, r7
    6458:	08db      	lsrs	r3, r3, #3
    645a:	9303      	str	r3, [sp, #12]
    645c:	4b2c      	ldr	r3, [pc, #176]	; (6510 <z_impl_log_process+0x154>)
    645e:	1bdb      	subs	r3, r3, r7
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    6460:	4606      	mov	r6, r0
    6462:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
	while (mask) {
    6466:	b936      	cbnz	r6, 6476 <z_impl_log_process+0xba>
    6468:	4e2a      	ldr	r6, [pc, #168]	; (6514 <z_impl_log_process+0x158>)
    646a:	4f2b      	ldr	r7, [pc, #172]	; (6518 <z_impl_log_process+0x15c>)
    646c:	1bbf      	subs	r7, r7, r6
    646e:	113f      	asrs	r7, r7, #4
    6470:	f04f 0800 	mov.w	r8, #0
    6474:	e03a      	b.n	64ec <z_impl_log_process+0x130>
		idx = 31 - __builtin_clz(mask);
    6476:	fab6 f186 	clz	r1, r6
    647a:	f1c1 091f 	rsb	r9, r1, #31
		str = (const char *)log_msg_arg_get(msg, idx);
    647e:	4649      	mov	r1, r9
    6480:	4628      	mov	r0, r5
    6482:	f018 f8eb 	bl	1e65c <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
    6486:	4b25      	ldr	r3, [pc, #148]	; (651c <z_impl_log_process+0x160>)
    6488:	4298      	cmp	r0, r3
		str = (const char *)log_msg_arg_get(msg, idx);
    648a:	4601      	mov	r1, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    648c:	d302      	bcc.n	6494 <z_impl_log_process+0xd8>
		if (!is_rodata(str) && !log_is_strdup(str) &&
    648e:	4b24      	ldr	r3, [pc, #144]	; (6520 <z_impl_log_process+0x164>)
    6490:	4298      	cmp	r0, r3
    6492:	d31a      	bcc.n	64ca <z_impl_log_process+0x10e>
    6494:	4608      	mov	r0, r1
    6496:	f7ff ff83 	bl	63a0 <log_is_strdup>
    649a:	4602      	mov	r2, r0
    649c:	b9a8      	cbnz	r0, 64ca <z_impl_log_process+0x10e>
    649e:	4b21      	ldr	r3, [pc, #132]	; (6524 <z_impl_log_process+0x168>)
    64a0:	4299      	cmp	r1, r3
    64a2:	d012      	beq.n	64ca <z_impl_log_process+0x10e>
	return msg->hdr.ids.source_id;
    64a4:	896b      	ldrh	r3, [r5, #10]
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    64a6:	9803      	ldr	r0, [sp, #12]
    64a8:	0999      	lsrs	r1, r3, #6
    64aa:	ebb0 1f93 	cmp.w	r0, r3, lsr #6
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    64ae:	ea4f 138a 	mov.w	r3, sl, lsl #6
    64b2:	f043 0301 	orr.w	r3, r3, #1
	return __log_const_start[source_id].name;
    64b6:	bf88      	it	hi
    64b8:	f857 2031 	ldrhi.w	r2, [r7, r1, lsl #3]
    64bc:	f8ad 3000 	strh.w	r3, [sp]
    64c0:	4649      	mov	r1, r9
    64c2:	4643      	mov	r3, r8
    64c4:	4658      	mov	r0, fp
    64c6:	f018 f83e 	bl	1e546 <log_3>
		mask &= ~BIT(idx);
    64ca:	2101      	movs	r1, #1
    64cc:	fa01 f109 	lsl.w	r1, r1, r9
    64d0:	ea26 0601 	bic.w	r6, r6, r1
    64d4:	e7c7      	b.n	6466 <z_impl_log_process+0xaa>
	return backend->cb->active;
    64d6:	6873      	ldr	r3, [r6, #4]
			if (log_backend_is_active(backend) &&
    64d8:	795b      	ldrb	r3, [r3, #5]
    64da:	b123      	cbz	r3, 64e6 <z_impl_log_process+0x12a>
	backend->api->put(backend, msg);
    64dc:	6833      	ldr	r3, [r6, #0]
    64de:	4629      	mov	r1, r5
    64e0:	681b      	ldr	r3, [r3, #0]
    64e2:	4630      	mov	r0, r6
    64e4:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    64e6:	f108 0801 	add.w	r8, r8, #1
    64ea:	3610      	adds	r6, #16
    64ec:	45b8      	cmp	r8, r7
    64ee:	dbf2      	blt.n	64d6 <z_impl_log_process+0x11a>
    64f0:	e78a      	b.n	6408 <z_impl_log_process+0x4c>
    64f2:	bf00      	nop
    64f4:	200096c3 	.word	0x200096c3
    64f8:	20001d7c 	.word	0x20001d7c
    64fc:	20001d70 	.word	0x20001d70
    6500:	20001d74 	.word	0x20001d74
    6504:	200096c4 	.word	0x200096c4
    6508:	000236f0 	.word	0x000236f0
    650c:	00023820 	.word	0x00023820
    6510:	000237e8 	.word	0x000237e8
    6514:	00023820 	.word	0x00023820
    6518:	00023840 	.word	0x00023840
    651c:	000234b4 	.word	0x000234b4
    6520:	00026e6c 	.word	0x00026e6c
    6524:	00024fcb 	.word	0x00024fcb
    6528:	00024fe5 	.word	0x00024fe5

0000652c <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
    652c:	4b29      	ldr	r3, [pc, #164]	; (65d4 <msg_finalize+0xa8>)
{
    652e:	b573      	push	{r0, r1, r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
    6530:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
    6532:	8141      	strh	r1, [r0, #10]
{
    6534:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    6536:	4798      	blx	r3
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    6538:	4d27      	ldr	r5, [pc, #156]	; (65d8 <msg_finalize+0xac>)
    653a:	60e0      	str	r0, [r4, #12]
    653c:	f3bf 8f5b 	dmb	ish
    6540:	e855 3f00 	ldrex	r3, [r5]
    6544:	3301      	adds	r3, #1
    6546:	e845 3200 	strex	r2, r3, [r5]
    654a:	2a00      	cmp	r2, #0
    654c:	d1f8      	bne.n	6540 <msg_finalize+0x14>
    654e:	f3bf 8f5b 	dmb	ish
	__asm__ volatile(
    6552:	f04f 0320 	mov.w	r3, #32
    6556:	f3ef 8611 	mrs	r6, BASEPRI
    655a:	f383 8811 	msr	BASEPRI, r3
    655e:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    6562:	481e      	ldr	r0, [pc, #120]	; (65dc <msg_finalize+0xb0>)
    6564:	4621      	mov	r1, r4
    6566:	f017 ff75 	bl	1e454 <log_list_add_tail>
	__asm__ volatile(
    656a:	f386 8811 	msr	BASEPRI, r6
    656e:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
    6572:	4b1b      	ldr	r3, [pc, #108]	; (65e0 <msg_finalize+0xb4>)
    6574:	781b      	ldrb	r3, [r3, #0]
    6576:	b183      	cbz	r3, 659a <msg_finalize+0x6e>
	__asm__ volatile(
    6578:	f04f 0320 	mov.w	r3, #32
    657c:	f3ef 8411 	mrs	r4, BASEPRI
    6580:	f383 8811 	msr	BASEPRI, r3
    6584:	f3bf 8f6f 	isb	sy
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    6588:	2000      	movs	r0, #0
    658a:	f7ff ff17 	bl	63bc <z_impl_log_process>
	__asm__ volatile(
    658e:	f384 8811 	msr	BASEPRI, r4
    6592:	f3bf 8f6f 	isb	sy
}
    6596:	b002      	add	sp, #8
    6598:	bd70      	pop	{r4, r5, r6, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
    659a:	4a12      	ldr	r2, [pc, #72]	; (65e4 <msg_finalize+0xb8>)
    659c:	682b      	ldr	r3, [r5, #0]
    659e:	6812      	ldr	r2, [r2, #0]
    65a0:	2a00      	cmp	r2, #0
    65a2:	d0f8      	beq.n	6596 <msg_finalize+0x6a>
    65a4:	2b01      	cmp	r3, #1
    65a6:	d10a      	bne.n	65be <msg_finalize+0x92>
	z_impl_k_timer_start(timer, duration, period);
    65a8:	2200      	movs	r2, #0
    65aa:	2300      	movs	r3, #0
    65ac:	e9cd 2300 	strd	r2, r3, [sp]
    65b0:	480d      	ldr	r0, [pc, #52]	; (65e8 <msg_finalize+0xbc>)
    65b2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    65b6:	2300      	movs	r3, #0
    65b8:	f017 fbd0 	bl	1dd5c <z_impl_k_timer_start>
    65bc:	e7eb      	b.n	6596 <msg_finalize+0x6a>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    65be:	2b0a      	cmp	r3, #10
    65c0:	d1e9      	bne.n	6596 <msg_finalize+0x6a>
	z_impl_k_timer_stop(timer);
    65c2:	4809      	ldr	r0, [pc, #36]	; (65e8 <msg_finalize+0xbc>)
    65c4:	f01c fe30 	bl	23228 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    65c8:	4808      	ldr	r0, [pc, #32]	; (65ec <msg_finalize+0xc0>)
}
    65ca:	b002      	add	sp, #8
    65cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    65d0:	f017 b8d2 	b.w	1d778 <z_impl_k_sem_give>
    65d4:	20000144 	.word	0x20000144
    65d8:	20001d70 	.word	0x20001d70
    65dc:	20001d7c 	.word	0x20001d7c
    65e0:	200096c4 	.word	0x200096c4
    65e4:	20001da0 	.word	0x20001da0
    65e8:	200009f8 	.word	0x200009f8
    65ec:	20000840 	.word	0x20000840

000065f0 <log_process_thread_func>:
{
    65f0:	b510      	push	{r4, lr}
	log_init();
    65f2:	f7ff fe75 	bl	62e0 <log_init>
	return z_impl_k_current_get();
    65f6:	f017 f8b9 	bl	1d76c <z_impl_k_current_get>
	proc_tid = process_tid;
    65fa:	4b0c      	ldr	r3, [pc, #48]	; (662c <log_process_thread_func+0x3c>)
    65fc:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    65fe:	b130      	cbz	r0, 660e <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    6600:	4b0b      	ldr	r3, [pc, #44]	; (6630 <log_process_thread_func+0x40>)
	    process_tid &&
    6602:	681b      	ldr	r3, [r3, #0]
    6604:	2b09      	cmp	r3, #9
    6606:	dd02      	ble.n	660e <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
    6608:	480a      	ldr	r0, [pc, #40]	; (6634 <log_process_thread_func+0x44>)
    660a:	f017 f8b5 	bl	1d778 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
    660e:	4c09      	ldr	r4, [pc, #36]	; (6634 <log_process_thread_func+0x44>)
    6610:	2000      	movs	r0, #0
    6612:	f7ff fed3 	bl	63bc <z_impl_log_process>
		if (log_process(false) == false) {
    6616:	2800      	cmp	r0, #0
    6618:	d1fa      	bne.n	6610 <log_process_thread_func+0x20>
    661a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    661e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6622:	4620      	mov	r0, r4
    6624:	f017 f8ce 	bl	1d7c4 <z_impl_k_sem_take>
    6628:	e7f2      	b.n	6610 <log_process_thread_func+0x20>
    662a:	bf00      	nop
    662c:	20001da0 	.word	0x20001da0
    6630:	20001d70 	.word	0x20001d70
    6634:	20000840 	.word	0x20000840

00006638 <z_impl_log_panic>:
{
    6638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    663a:	4f0e      	ldr	r7, [pc, #56]	; (6674 <z_impl_log_panic+0x3c>)
    663c:	783d      	ldrb	r5, [r7, #0]
    663e:	b975      	cbnz	r5, 665e <z_impl_log_panic+0x26>
	return __log_backends_end - __log_backends_start;
    6640:	4c0d      	ldr	r4, [pc, #52]	; (6678 <z_impl_log_panic+0x40>)
    6642:	4e0e      	ldr	r6, [pc, #56]	; (667c <z_impl_log_panic+0x44>)
	log_init();
    6644:	f7ff fe4c 	bl	62e0 <log_init>
    6648:	1b36      	subs	r6, r6, r4
    664a:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    664c:	42b5      	cmp	r5, r6
    664e:	db07      	blt.n	6660 <z_impl_log_panic+0x28>
    6650:	2000      	movs	r0, #0
    6652:	f7ff feb3 	bl	63bc <z_impl_log_process>
		while (log_process(false) == true) {
    6656:	2800      	cmp	r0, #0
    6658:	d1fa      	bne.n	6650 <z_impl_log_panic+0x18>
	panic_mode = true;
    665a:	2301      	movs	r3, #1
    665c:	703b      	strb	r3, [r7, #0]
}
    665e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    6660:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    6662:	795b      	ldrb	r3, [r3, #5]
    6664:	b11b      	cbz	r3, 666e <z_impl_log_panic+0x36>
	backend->api->panic(backend);
    6666:	6823      	ldr	r3, [r4, #0]
    6668:	4620      	mov	r0, r4
    666a:	691b      	ldr	r3, [r3, #16]
    666c:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    666e:	3501      	adds	r5, #1
    6670:	3410      	adds	r4, #16
    6672:	e7eb      	b.n	664c <z_impl_log_panic+0x14>
    6674:	200096c4 	.word	0x200096c4
    6678:	00023820 	.word	0x00023820
    667c:	00023840 	.word	0x00023840

00006680 <log_free>:
{
    6680:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
    6682:	3804      	subs	r0, #4
    6684:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    6686:	f3bf 8f5b 	dmb	ish
    668a:	e850 3f00 	ldrex	r3, [r0]
    668e:	1e5a      	subs	r2, r3, #1
    6690:	e840 2100 	strex	r1, r2, [r0]
    6694:	2900      	cmp	r1, #0
    6696:	d1f8      	bne.n	668a <log_free+0xa>
    6698:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
    669c:	2b01      	cmp	r3, #1
    669e:	d103      	bne.n	66a8 <log_free+0x28>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
    66a0:	4803      	ldr	r0, [pc, #12]	; (66b0 <log_free+0x30>)
    66a2:	a901      	add	r1, sp, #4
    66a4:	f016 fbe6 	bl	1ce74 <k_mem_slab_free>
}
    66a8:	b003      	add	sp, #12
    66aa:	f85d fb04 	ldr.w	pc, [sp], #4
    66ae:	bf00      	nop
    66b0:	20001d84 	.word	0x20001d84

000066b4 <log_msg_pool_init>:
static uint8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
    66b4:	2320      	movs	r3, #32
    66b6:	4902      	ldr	r1, [pc, #8]	; (66c0 <log_msg_pool_init+0xc>)
    66b8:	4802      	ldr	r0, [pc, #8]	; (66c4 <log_msg_pool_init+0x10>)
    66ba:	461a      	mov	r2, r3
    66bc:	f01c ba76 	b.w	22bac <k_mem_slab_init>
    66c0:	2000e270 	.word	0x2000e270
    66c4:	20001da4 	.word	0x20001da4

000066c8 <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
    66c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	union log_msg_chunk *msg = NULL;
    66ca:	2300      	movs	r3, #0

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
    66cc:	4d09      	ldr	r5, [pc, #36]	; (66f4 <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
    66ce:	9301      	str	r3, [sp, #4]
    66d0:	2001      	movs	r0, #1
    66d2:	f7ff fe73 	bl	63bc <z_impl_log_process>
    66d6:	4604      	mov	r4, r0
			log_dropped();
    66d8:	f7ff fdca 	bl	6270 <log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
    66dc:	2200      	movs	r2, #0
    66de:	2300      	movs	r3, #0
    66e0:	a901      	add	r1, sp, #4
    66e2:	4628      	mov	r0, r5
    66e4:	f016 fb94 	bl	1ce10 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
    66e8:	b108      	cbz	r0, 66ee <log_msg_no_space_handle+0x26>
    66ea:	2c00      	cmp	r4, #0
    66ec:	d1f0      	bne.n	66d0 <log_msg_no_space_handle+0x8>
	} else {
		log_dropped();
	}
	return msg;

}
    66ee:	9801      	ldr	r0, [sp, #4]
    66f0:	b003      	add	sp, #12
    66f2:	bd30      	pop	{r4, r5, pc}
    66f4:	20001da4 	.word	0x20001da4

000066f8 <log_msg_chunk_alloc>:
{
    66f8:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
    66fa:	2300      	movs	r3, #0
    66fc:	9301      	str	r3, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    66fe:	4807      	ldr	r0, [pc, #28]	; (671c <log_msg_chunk_alloc+0x24>)
    6700:	2200      	movs	r2, #0
    6702:	2300      	movs	r3, #0
    6704:	a901      	add	r1, sp, #4
    6706:	f016 fb83 	bl	1ce10 <k_mem_slab_alloc>
	if (err != 0) {
    670a:	b110      	cbz	r0, 6712 <log_msg_chunk_alloc+0x1a>
		msg = log_msg_no_space_handle();
    670c:	f7ff ffdc 	bl	66c8 <log_msg_no_space_handle>
    6710:	9001      	str	r0, [sp, #4]
}
    6712:	9801      	ldr	r0, [sp, #4]
    6714:	b003      	add	sp, #12
    6716:	f85d fb04 	ldr.w	pc, [sp], #4
    671a:	bf00      	nop
    671c:	20001da4 	.word	0x20001da4

00006720 <msg_free>:
{
    6720:	b5f0      	push	{r4, r5, r6, r7, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    6722:	7a03      	ldrb	r3, [r0, #8]
	}
}

uint32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
    6724:	7a45      	ldrb	r5, [r0, #9]
{
    6726:	b085      	sub	sp, #20
	return msg->hdr.params.std.nargs;
    6728:	092d      	lsrs	r5, r5, #4
{
    672a:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
    672c:	07d8      	lsls	r0, r3, #31
    672e:	d41c      	bmi.n	676a <msg_free+0x4a>
    6730:	b1dd      	cbz	r5, 676a <msg_free+0x4a>
		uint32_t smask = 0;
    6732:	2400      	movs	r4, #0
		for (i = 0; i < nargs; i++) {
    6734:	4626      	mov	r6, r4
			void *buf = (void *)log_msg_arg_get(msg, i);
    6736:	9801      	ldr	r0, [sp, #4]
    6738:	4631      	mov	r1, r6
    673a:	f017 ff8f 	bl	1e65c <log_msg_arg_get>
    673e:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
    6740:	f7ff fe2e 	bl	63a0 <log_is_strdup>
    6744:	b170      	cbz	r0, 6764 <msg_free+0x44>
				if (smask == 0) {
    6746:	b934      	cbnz	r4, 6756 <msg_free+0x36>
					smask = z_log_get_s_mask(
    6748:	9b01      	ldr	r3, [sp, #4]
    674a:	4629      	mov	r1, r5
    674c:	6918      	ldr	r0, [r3, #16]
    674e:	f017 fea0 	bl	1e492 <z_log_get_s_mask>
					if (smask == 0) {
    6752:	4604      	mov	r4, r0
    6754:	b148      	cbz	r0, 676a <msg_free+0x4a>
				if (smask & BIT(i)) {
    6756:	fa24 f306 	lsr.w	r3, r4, r6
    675a:	07d9      	lsls	r1, r3, #31
    675c:	d502      	bpl.n	6764 <msg_free+0x44>
					log_free(buf);
    675e:	4638      	mov	r0, r7
    6760:	f7ff ff8e 	bl	6680 <log_free>
		for (i = 0; i < nargs; i++) {
    6764:	3601      	adds	r6, #1
    6766:	42ae      	cmp	r6, r5
    6768:	d3e5      	bcc.n	6736 <msg_free+0x16>
	if (msg->hdr.params.generic.ext == 1) {
    676a:	9b01      	ldr	r3, [sp, #4]
    676c:	7a1a      	ldrb	r2, [r3, #8]
    676e:	0792      	lsls	r2, r2, #30
    6770:	d504      	bpl.n	677c <msg_free+0x5c>
		cont_free(msg->payload.ext.next);
    6772:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    6774:	4c08      	ldr	r4, [pc, #32]	; (6798 <msg_free+0x78>)
    6776:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
    6778:	9b03      	ldr	r3, [sp, #12]
    677a:	b92b      	cbnz	r3, 6788 <msg_free+0x68>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
    677c:	4806      	ldr	r0, [pc, #24]	; (6798 <msg_free+0x78>)
    677e:	a901      	add	r1, sp, #4
    6780:	f016 fb78 	bl	1ce74 <k_mem_slab_free>
}
    6784:	b005      	add	sp, #20
    6786:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = cont->next;
    6788:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    678a:	a903      	add	r1, sp, #12
    678c:	4620      	mov	r0, r4
    678e:	f016 fb71 	bl	1ce74 <k_mem_slab_free>
		cont = next;
    6792:	9503      	str	r5, [sp, #12]
    6794:	e7f0      	b.n	6778 <msg_free+0x58>
    6796:	bf00      	nop
    6798:	20001da4 	.word	0x20001da4

0000679c <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
    679c:	b40e      	push	{r1, r2, r3}
    679e:	b503      	push	{r0, r1, lr}
    67a0:	ab03      	add	r3, sp, #12
    67a2:	4601      	mov	r1, r0
    67a4:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(args, fmt);
#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = z_prf(out_func, (void *)log_output, (char *)fmt, args);
#else
	z_vprintk(out_func, (void *)log_output, fmt, args);
    67a8:	4804      	ldr	r0, [pc, #16]	; (67bc <print_formatted+0x20>)
	va_start(args, fmt);
    67aa:	9301      	str	r3, [sp, #4]
	z_vprintk(out_func, (void *)log_output, fmt, args);
    67ac:	f7ff fba6 	bl	5efc <z_vprintk>
#endif
	va_end(args);

	return length;
}
    67b0:	2000      	movs	r0, #0
    67b2:	b002      	add	sp, #8
    67b4:	f85d eb04 	ldr.w	lr, [sp], #4
    67b8:	b003      	add	sp, #12
    67ba:	4770      	bx	lr
    67bc:	0001ea69 	.word	0x0001ea69

000067c0 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *log_output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, uint16_t source_id)
{
    67c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    67c4:	b085      	sub	sp, #20
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
    67c6:	f011 0402 	ands.w	r4, r1, #2
{
    67ca:	4690      	mov	r8, r2
    67cc:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
    67d0:	4606      	mov	r6, r0
    67d2:	461a      	mov	r2, r3
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    67d4:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    67d8:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
    67dc:	d007      	beq.n	67ee <prefix_print+0x2e>
	if (!format) {
    67de:	f011 0f44 	tst.w	r1, #68	; 0x44
    67e2:	d137      	bne.n	6854 <prefix_print+0x94>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
    67e4:	4932      	ldr	r1, [pc, #200]	; (68b0 <prefix_print+0xf0>)
    67e6:	f7ff ffd9 	bl	679c <print_formatted>
			length = print_formatted(log_output,
    67ea:	4601      	mov	r1, r0
		length += timestamp_print(log_output, flags, timestamp);
    67ec:	460c      	mov	r4, r1
	if (color) {
    67ee:	f1b9 0f00 	cmp.w	r9, #0
    67f2:	d00a      	beq.n	680a <prefix_print+0x4a>
		const char *color = start && (colors[level] != NULL) ?
    67f4:	4b2f      	ldr	r3, [pc, #188]	; (68b4 <prefix_print+0xf4>)
		print_formatted(log_output, "%s", color);
    67f6:	4930      	ldr	r1, [pc, #192]	; (68b8 <prefix_print+0xf8>)
		const char *color = start && (colors[level] != NULL) ?
    67f8:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(log_output, "%s", color);
    67fc:	4b2f      	ldr	r3, [pc, #188]	; (68bc <prefix_print+0xfc>)
    67fe:	4630      	mov	r0, r6
    6800:	2a00      	cmp	r2, #0
    6802:	bf08      	it	eq
    6804:	461a      	moveq	r2, r3
    6806:	f7ff ffc9 	bl	679c <print_formatted>
	if (level_on) {
    680a:	b13d      	cbz	r5, 681c <prefix_print+0x5c>
		total += print_formatted(log_output, "<%s> ", severity[level]);
    680c:	4b2c      	ldr	r3, [pc, #176]	; (68c0 <prefix_print+0x100>)
    680e:	492d      	ldr	r1, [pc, #180]	; (68c4 <prefix_print+0x104>)
    6810:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
    6814:	4630      	mov	r0, r6
    6816:	f7ff ffc1 	bl	679c <print_formatted>
    681a:	4605      	mov	r5, r0
	total += print_formatted(log_output,
    681c:	f1b8 0f00 	cmp.w	r8, #0
    6820:	d043      	beq.n	68aa <prefix_print+0xea>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    6822:	2301      	movs	r3, #1
    6824:	fa03 f707 	lsl.w	r7, r3, r7
	total += print_formatted(log_output,
    6828:	4b27      	ldr	r3, [pc, #156]	; (68c8 <prefix_print+0x108>)
    682a:	f017 0f10 	tst.w	r7, #16
    682e:	4f27      	ldr	r7, [pc, #156]	; (68cc <prefix_print+0x10c>)
    6830:	bf18      	it	ne
    6832:	461f      	movne	r7, r3
    6834:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
    6838:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    683c:	f7ff fd28 	bl	6290 <log_source_name_get>
    6840:	4639      	mov	r1, r7
    6842:	4602      	mov	r2, r0
    6844:	4630      	mov	r0, r6
    6846:	f7ff ffa9 	bl	679c <print_formatted>
    684a:	4428      	add	r0, r5
		length += ids_print(log_output, level_on, func_on,
				    domain_id, source_id, level);
	}

	return length;
}
    684c:	4420      	add	r0, r4
    684e:	b005      	add	sp, #20
    6850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
    6854:	4b1e      	ldr	r3, [pc, #120]	; (68d0 <prefix_print+0x110>)
    6856:	6819      	ldr	r1, [r3, #0]
    6858:	2900      	cmp	r1, #0
    685a:	d0c7      	beq.n	67ec <prefix_print+0x2c>
		timestamp /= timestamp_div;
    685c:	4b1d      	ldr	r3, [pc, #116]	; (68d4 <prefix_print+0x114>)
    685e:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
    6862:	681b      	ldr	r3, [r3, #0]
    6864:	fbb2 f3f3 	udiv	r3, r2, r3
		ms = (remainder * 1000U) / freq;
    6868:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
		seconds = timestamp / freq;
    686c:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
    6870:	fbb4 f2fe 	udiv	r2, r4, lr
    6874:	fb0e 4e12 	mls	lr, lr, r2, r4
		remainder = timestamp % freq;
    6878:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
    687c:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
    6880:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    6884:	fbb4 fbf1 	udiv	fp, r4, r1
    6888:	fb01 441b 	mls	r4, r1, fp, r4
    688c:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
    6890:	fbbe f3fa 	udiv	r3, lr, sl
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    6894:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(log_output,
    6898:	e9cd b101 	strd	fp, r1, [sp, #4]
    689c:	fb0a e113 	mls	r1, sl, r3, lr
    68a0:	9100      	str	r1, [sp, #0]
    68a2:	490d      	ldr	r1, [pc, #52]	; (68d8 <prefix_print+0x118>)
    68a4:	f7ff ff7a 	bl	679c <print_formatted>
    68a8:	e79f      	b.n	67ea <prefix_print+0x2a>
	total += print_formatted(log_output,
    68aa:	4f08      	ldr	r7, [pc, #32]	; (68cc <prefix_print+0x10c>)
    68ac:	e7c2      	b.n	6834 <prefix_print+0x74>
    68ae:	bf00      	nop
    68b0:	00025036 	.word	0x00025036
    68b4:	00023960 	.word	0x00023960
    68b8:	00025d6f 	.word	0x00025d6f
    68bc:	00025028 	.word	0x00025028
    68c0:	00023974 	.word	0x00023974
    68c4:	0002505b 	.word	0x0002505b
    68c8:	00025032 	.word	0x00025032
    68cc:	0002502d 	.word	0x0002502d
    68d0:	20001dc0 	.word	0x20001dc0
    68d4:	20001dc4 	.word	0x20001dc4
    68d8:	0002503f 	.word	0x0002503f

000068dc <postfix_print>:

static void postfix_print(const struct log_output *log_output,
			  uint32_t flags, uint8_t level)
{
    68dc:	b538      	push	{r3, r4, r5, lr}
    68de:	460c      	mov	r4, r1
	if (color) {
    68e0:	07e1      	lsls	r1, r4, #31
{
    68e2:	4605      	mov	r5, r0
	if (color) {
    68e4:	d503      	bpl.n	68ee <postfix_print+0x12>
		print_formatted(log_output, "%s", color);
    68e6:	4a08      	ldr	r2, [pc, #32]	; (6908 <postfix_print+0x2c>)
    68e8:	4908      	ldr	r1, [pc, #32]	; (690c <postfix_print+0x30>)
    68ea:	f7ff ff57 	bl	679c <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    68ee:	06e2      	lsls	r2, r4, #27
    68f0:	d408      	bmi.n	6904 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    68f2:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    68f4:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
    68f6:	bf4c      	ite	mi
    68f8:	4905      	ldrmi	r1, [pc, #20]	; (6910 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    68fa:	4906      	ldrpl	r1, [pc, #24]	; (6914 <postfix_print+0x38>)
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(log_output, flags);
}
    68fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
    6900:	f7ff bf4c 	b.w	679c <print_formatted>
}
    6904:	bd38      	pop	{r3, r4, r5, pc}
    6906:	bf00      	nop
    6908:	00025028 	.word	0x00025028
    690c:	00025d6f 	.word	0x00025d6f
    6910:	00025062 	.word	0x00025062
    6914:	00025061 	.word	0x00025061

00006918 <hexdump_line_print>:
{
    6918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    691c:	461d      	mov	r5, r3
    691e:	9b08      	ldr	r3, [sp, #32]
    6920:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    6922:	06da      	lsls	r2, r3, #27
{
    6924:	4604      	mov	r4, r0
    6926:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    6928:	d405      	bmi.n	6936 <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    692a:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    692c:	bf4c      	ite	mi
    692e:	492a      	ldrmi	r1, [pc, #168]	; (69d8 <hexdump_line_print+0xc0>)
		print_formatted(ctx, "\r\n");
    6930:	492a      	ldrpl	r1, [pc, #168]	; (69dc <hexdump_line_print+0xc4>)
    6932:	f7ff ff33 	bl	679c <print_formatted>
		print_formatted(log_output, " ");
    6936:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 69e4 <hexdump_line_print+0xcc>
{
    693a:	f04f 0800 	mov.w	r8, #0
	for (int i = 0; i < prefix_offset; i++) {
    693e:	45a8      	cmp	r8, r5
    6940:	db2a      	blt.n	6998 <hexdump_line_print+0x80>
			print_formatted(log_output, "   ");
    6942:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 69e8 <hexdump_line_print+0xd0>
			print_formatted(log_output, "%02x ", data[i]);
    6946:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 69ec <hexdump_line_print+0xd4>
			print_formatted(log_output, " ");
    694a:	f8df a098 	ldr.w	sl, [pc, #152]	; 69e4 <hexdump_line_print+0xcc>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    694e:	2500      	movs	r5, #0
		if (i < length) {
    6950:	42bd      	cmp	r5, r7
    6952:	d22f      	bcs.n	69b4 <hexdump_line_print+0x9c>
			print_formatted(log_output, "%02x ", data[i]);
    6954:	5d72      	ldrb	r2, [r6, r5]
    6956:	4649      	mov	r1, r9
    6958:	4620      	mov	r0, r4
    695a:	f7ff ff1f 	bl	679c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    695e:	3501      	adds	r5, #1
    6960:	2d10      	cmp	r5, #16
    6962:	d120      	bne.n	69a6 <hexdump_line_print+0x8e>
	print_formatted(log_output, "|");
    6964:	491e      	ldr	r1, [pc, #120]	; (69e0 <hexdump_line_print+0xc8>)
			print_formatted(log_output, " ");
    6966:	f8df 807c 	ldr.w	r8, [pc, #124]	; 69e4 <hexdump_line_print+0xcc>
			print_formatted(log_output, "%c",
    696a:	f8df 9084 	ldr.w	r9, [pc, #132]	; 69f0 <hexdump_line_print+0xd8>
	print_formatted(log_output, "|");
    696e:	4620      	mov	r0, r4
    6970:	f7ff ff14 	bl	679c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    6974:	2500      	movs	r5, #0
		if (i < length) {
    6976:	42af      	cmp	r7, r5
    6978:	d928      	bls.n	69cc <hexdump_line_print+0xb4>
			      isprint((int)c) ? c : '.');
    697a:	5d72      	ldrb	r2, [r6, r5]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isprint(int c)
{
	return (int)((((unsigned)c) >= ' ') &&
    697c:	f1a2 0320 	sub.w	r3, r2, #32
			print_formatted(log_output, "%c",
    6980:	2b5f      	cmp	r3, #95	; 0x5f
    6982:	bf28      	it	cs
    6984:	222e      	movcs	r2, #46	; 0x2e
    6986:	4649      	mov	r1, r9
    6988:	4620      	mov	r0, r4
    698a:	f7ff ff07 	bl	679c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    698e:	3501      	adds	r5, #1
    6990:	2d10      	cmp	r5, #16
    6992:	d114      	bne.n	69be <hexdump_line_print+0xa6>
}
    6994:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, " ");
    6998:	4649      	mov	r1, r9
    699a:	4620      	mov	r0, r4
    699c:	f7ff fefe 	bl	679c <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    69a0:	f108 0801 	add.w	r8, r8, #1
    69a4:	e7cb      	b.n	693e <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
    69a6:	076a      	lsls	r2, r5, #29
    69a8:	d1d2      	bne.n	6950 <hexdump_line_print+0x38>
			print_formatted(log_output, " ");
    69aa:	4651      	mov	r1, sl
    69ac:	4620      	mov	r0, r4
    69ae:	f7ff fef5 	bl	679c <print_formatted>
    69b2:	e7cd      	b.n	6950 <hexdump_line_print+0x38>
			print_formatted(log_output, "   ");
    69b4:	4641      	mov	r1, r8
    69b6:	4620      	mov	r0, r4
    69b8:	f7ff fef0 	bl	679c <print_formatted>
    69bc:	e7cf      	b.n	695e <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
    69be:	076b      	lsls	r3, r5, #29
    69c0:	d1d9      	bne.n	6976 <hexdump_line_print+0x5e>
			print_formatted(log_output, " ");
    69c2:	4641      	mov	r1, r8
    69c4:	4620      	mov	r0, r4
    69c6:	f7ff fee9 	bl	679c <print_formatted>
    69ca:	e7d4      	b.n	6976 <hexdump_line_print+0x5e>
			print_formatted(log_output, " ");
    69cc:	4641      	mov	r1, r8
    69ce:	4620      	mov	r0, r4
    69d0:	f7ff fee4 	bl	679c <print_formatted>
    69d4:	e7db      	b.n	698e <hexdump_line_print+0x76>
    69d6:	bf00      	nop
    69d8:	00025062 	.word	0x00025062
    69dc:	00025061 	.word	0x00025061
    69e0:	0002506e 	.word	0x0002506e
    69e4:	0002506c 	.word	0x0002506c
    69e8:	0002506a 	.word	0x0002506a
    69ec:	00025064 	.word	0x00025064
    69f0:	00025070 	.word	0x00025070

000069f4 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *log_output,
			    struct log_msg *msg,
			    uint32_t flags)
{
    69f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
    69f8:	7a8b      	ldrb	r3, [r1, #10]
		log_output_msg_syst_process(log_output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    69fa:	f013 0807 	ands.w	r8, r3, #7
{
    69fe:	4617      	mov	r7, r2
    6a00:	b08a      	sub	sp, #40	; 0x28
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    6a02:	7a0a      	ldrb	r2, [r1, #8]
    6a04:	4605      	mov	r5, r0
    6a06:	460e      	mov	r6, r1
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    6a08:	d020      	beq.n	6a4c <log_output_msg_process+0x58>
	return msg->hdr.ids.source_id;
    6a0a:	8949      	ldrh	r1, [r1, #10]
    6a0c:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    6a10:	0989      	lsrs	r1, r1, #6
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    6a12:	43d2      	mvns	r2, r2
    6a14:	e9cd 8300 	strd	r8, r3, [sp]
    6a18:	9102      	str	r1, [sp, #8]
    6a1a:	68f3      	ldr	r3, [r6, #12]
    6a1c:	f002 0201 	and.w	r2, r2, #1
    6a20:	4639      	mov	r1, r7
    6a22:	f7ff fecd 	bl	67c0 <prefix_print>
    6a26:	4681      	mov	r9, r0
    6a28:	7a34      	ldrb	r4, [r6, #8]
    6a2a:	43e4      	mvns	r4, r4
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
    6a2c:	f014 0401 	ands.w	r4, r4, #1
    6a30:	d00e      	beq.n	6a50 <log_output_msg_process+0x5c>
		std_print(msg, log_output);
    6a32:	4629      	mov	r1, r5
    6a34:	4630      	mov	r0, r6
    6a36:	f017 fead 	bl	1e794 <std_print>
		raw_string_print(msg, log_output);
	} else {
		hexdump_print(msg, log_output, prefix_offset, flags);
	}

	if (!raw_string) {
    6a3a:	f1b8 0f00 	cmp.w	r8, #0
    6a3e:	d02b      	beq.n	6a98 <log_output_msg_process+0xa4>
		postfix_print(log_output, flags, level);
    6a40:	4642      	mov	r2, r8
    6a42:	4639      	mov	r1, r7
    6a44:	4628      	mov	r0, r5
    6a46:	f7ff ff49 	bl	68dc <postfix_print>
    6a4a:	e025      	b.n	6a98 <log_output_msg_process+0xa4>
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    6a4c:	46c1      	mov	r9, r8
    6a4e:	e7eb      	b.n	6a28 <log_output_msg_process+0x34>
	} else if (raw_string) {
    6a50:	f1b8 0f00 	cmp.w	r8, #0
    6a54:	d126      	bne.n	6aa4 <log_output_msg_process+0xb0>
	size_t offset = 0;
    6a56:	4627      	mov	r7, r4
		length = log_output->size;
    6a58:	68eb      	ldr	r3, [r5, #12]
    6a5a:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
    6a5c:	aa06      	add	r2, sp, #24
    6a5e:	463b      	mov	r3, r7
    6a60:	68a9      	ldr	r1, [r5, #8]
    6a62:	4630      	mov	r0, r6
    6a64:	f017 fe82 	bl	1e76c <log_msg_hexdump_data_get>
		log_output->control_block->offset = length;
    6a68:	9a06      	ldr	r2, [sp, #24]
    6a6a:	686b      	ldr	r3, [r5, #4]
    6a6c:	601a      	str	r2, [r3, #0]
		if (length != 0) {
    6a6e:	b13a      	cbz	r2, 6a80 <log_output_msg_process+0x8c>
			eol = (log_output->buf[length - 1] == '\n');
    6a70:	68ab      	ldr	r3, [r5, #8]
    6a72:	4413      	add	r3, r2
    6a74:	f813 4c01 	ldrb.w	r4, [r3, #-1]
    6a78:	f1a4 030a 	sub.w	r3, r4, #10
    6a7c:	425c      	negs	r4, r3
    6a7e:	415c      	adcs	r4, r3
		log_output_flush(log_output);
    6a80:	4628      	mov	r0, r5
    6a82:	f017 ffe4 	bl	1ea4e <log_output_flush>
		offset += length;
    6a86:	9b06      	ldr	r3, [sp, #24]
    6a88:	441f      	add	r7, r3
	} while (length > 0);
    6a8a:	2b00      	cmp	r3, #0
    6a8c:	d1e4      	bne.n	6a58 <log_output_msg_process+0x64>
	if (eol) {
    6a8e:	b11c      	cbz	r4, 6a98 <log_output_msg_process+0xa4>
		print_formatted(log_output, "\r");
    6a90:	4913      	ldr	r1, [pc, #76]	; (6ae0 <log_output_msg_process+0xec>)
    6a92:	4628      	mov	r0, r5
    6a94:	f7ff fe82 	bl	679c <print_formatted>
	}

	log_output_flush(log_output);
    6a98:	4628      	mov	r0, r5
    6a9a:	f017 ffd8 	bl	1ea4e <log_output_flush>
}
    6a9e:	b00a      	add	sp, #40	; 0x28
    6aa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	print_formatted(log_output, "%s", log_msg_str_get(msg));
    6aa4:	4630      	mov	r0, r6
    6aa6:	f017 fe0b 	bl	1e6c0 <log_msg_str_get>
    6aaa:	490e      	ldr	r1, [pc, #56]	; (6ae4 <log_output_msg_process+0xf0>)
    6aac:	4602      	mov	r2, r0
    6aae:	4628      	mov	r0, r5
    6ab0:	f7ff fe74 	bl	679c <print_formatted>
		length = sizeof(buf);
    6ab4:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    6ab8:	aa05      	add	r2, sp, #20
    6aba:	4623      	mov	r3, r4
    6abc:	a906      	add	r1, sp, #24
    6abe:	4630      	mov	r0, r6
		length = sizeof(buf);
    6ac0:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    6ac4:	f017 fe52 	bl	1e76c <log_msg_hexdump_data_get>
		if (length) {
    6ac8:	9a05      	ldr	r2, [sp, #20]
    6aca:	2a00      	cmp	r2, #0
    6acc:	d0b8      	beq.n	6a40 <log_output_msg_process+0x4c>
			hexdump_line_print(log_output, buf, length,
    6ace:	464b      	mov	r3, r9
    6ad0:	9700      	str	r7, [sp, #0]
    6ad2:	a906      	add	r1, sp, #24
    6ad4:	4628      	mov	r0, r5
    6ad6:	f7ff ff1f 	bl	6918 <hexdump_line_print>
			offset += length;
    6ada:	9b05      	ldr	r3, [sp, #20]
    6adc:	441c      	add	r4, r3
		length = sizeof(buf);
    6ade:	e7eb      	b.n	6ab8 <log_output_msg_process+0xc4>
    6ae0:	00025073 	.word	0x00025073
    6ae4:	00025d6f 	.word	0x00025d6f

00006ae8 <log_output_dropped_process>:
	postfix_print(log_output, flags, level);
	log_output_flush(log_output);
}

void log_output_dropped_process(const struct log_output *log_output, uint32_t cnt)
{
    6ae8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = log_output->func;
	struct device *dev = (struct device *)log_output->control_block->ctx;
    6aea:	e9d0 4300 	ldrd	r4, r3, [r0]
    6aee:	685d      	ldr	r5, [r3, #4]

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    6af0:	4a0f      	ldr	r2, [pc, #60]	; (6b30 <log_output_dropped_process+0x48>)
    6af2:	f242 730f 	movw	r3, #9999	; 0x270f
    6af6:	428b      	cmp	r3, r1
    6af8:	bf28      	it	cs
    6afa:	460b      	movcs	r3, r1
    6afc:	4668      	mov	r0, sp
    6afe:	2105      	movs	r1, #5
    6b00:	f017 fa34 	bl	1df6c <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1, dev);
    6b04:	462b      	mov	r3, r5
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    6b06:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1, dev);
    6b08:	490a      	ldr	r1, [pc, #40]	; (6b34 <log_output_dropped_process+0x4c>)
    6b0a:	4620      	mov	r0, r4
    6b0c:	220b      	movs	r2, #11
    6b0e:	f017 fe34 	bl	1e77a <buffer_write>
	buffer_write(outf, buf, len, dev);
    6b12:	462b      	mov	r3, r5
    6b14:	4632      	mov	r2, r6
    6b16:	4669      	mov	r1, sp
    6b18:	4620      	mov	r0, r4
    6b1a:	f017 fe2e 	bl	1e77a <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1, dev);
    6b1e:	4906      	ldr	r1, [pc, #24]	; (6b38 <log_output_dropped_process+0x50>)
    6b20:	462b      	mov	r3, r5
    6b22:	221b      	movs	r2, #27
    6b24:	4620      	mov	r0, r4
    6b26:	f017 fe28 	bl	1e77a <buffer_write>
}
    6b2a:	b002      	add	sp, #8
    6b2c:	bd70      	pop	{r4, r5, r6, pc}
    6b2e:	bf00      	nop
    6b30:	000268e4 	.word	0x000268e4
    6b34:	000250b1 	.word	0x000250b1
    6b38:	00025095 	.word	0x00025095

00006b3c <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    6b3c:	4a08      	ldr	r2, [pc, #32]	; (6b60 <log_output_timestamp_freq_set+0x24>)
{
    6b3e:	b510      	push	{r4, lr}
	timestamp_div = 1U;
    6b40:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    6b42:	4c08      	ldr	r4, [pc, #32]	; (6b64 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    6b44:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    6b46:	2100      	movs	r1, #0
    6b48:	42a0      	cmp	r0, r4
    6b4a:	d804      	bhi.n	6b56 <log_output_timestamp_freq_set+0x1a>
    6b4c:	b101      	cbz	r1, 6b50 <log_output_timestamp_freq_set+0x14>
    6b4e:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    6b50:	4b05      	ldr	r3, [pc, #20]	; (6b68 <log_output_timestamp_freq_set+0x2c>)
    6b52:	6018      	str	r0, [r3, #0]
}
    6b54:	bd10      	pop	{r4, pc}
		frequency /= 2U;
    6b56:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    6b58:	005b      	lsls	r3, r3, #1
    6b5a:	2101      	movs	r1, #1
    6b5c:	e7f4      	b.n	6b48 <log_output_timestamp_freq_set+0xc>
    6b5e:	bf00      	nop
    6b60:	20001dc4 	.word	0x20001dc4
    6b64:	000f4240 	.word	0x000f4240
    6b68:	20001dc0 	.word	0x20001dc0

00006b6c <panic>:
 * @param log_output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const log_output)
{
	log_output_flush(log_output);
    6b6c:	4801      	ldr	r0, [pc, #4]	; (6b74 <panic+0x8>)
    6b6e:	f017 bf6e 	b.w	1ea4e <log_output_flush>
    6b72:	bf00      	nop
    6b74:	000239a0 	.word	0x000239a0

00006b78 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const log_output, uint32_t cnt)
{
	log_output_dropped_process(log_output, cnt);
    6b78:	4801      	ldr	r0, [pc, #4]	; (6b80 <dropped+0x8>)
    6b7a:	f7ff bfb5 	b.w	6ae8 <log_output_dropped_process>
    6b7e:	bf00      	nop
    6b80:	000239a0 	.word	0x000239a0

00006b84 <log_backend_uart_init>:

	log_backend_std_put(&log_output, flag, msg);
}

static void log_backend_uart_init(void)
{
    6b84:	b508      	push	{r3, lr}
	if (z_syscall_trap()) {
		return (struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    6b86:	4803      	ldr	r0, [pc, #12]	; (6b94 <log_backend_uart_init+0x10>)
    6b88:	f015 ff88 	bl	1ca9c <z_impl_device_get_binding>
 * @param ctx		User context.
 */
static inline void log_output_ctx_set(const struct log_output *log_output,
				      void *ctx)
{
	log_output->control_block->ctx = ctx;
    6b8c:	4b02      	ldr	r3, [pc, #8]	; (6b98 <log_backend_uart_init+0x14>)
    6b8e:	6058      	str	r0, [r3, #4]

	dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
	assert(dev);

	log_output_ctx_set(&log_output, dev);
}
    6b90:	bd08      	pop	{r3, pc}
    6b92:	bf00      	nop
    6b94:	000250bd 	.word	0x000250bd
    6b98:	20001dd0 	.word	0x20001dd0

00006b9c <put>:
{
    6b9c:	b510      	push	{r4, lr}
	log_msg_get(msg);
    6b9e:	4608      	mov	r0, r1
    6ba0:	460c      	mov	r4, r1
    6ba2:	f017 fd4b 	bl	1e63c <log_msg_get>
	log_output_msg_process(log_output, msg, flags);
    6ba6:	4805      	ldr	r0, [pc, #20]	; (6bbc <put+0x20>)
    6ba8:	4621      	mov	r1, r4
    6baa:	220f      	movs	r2, #15
    6bac:	f7ff ff22 	bl	69f4 <log_output_msg_process>
	log_msg_put(msg);
    6bb0:	4620      	mov	r0, r4
}
    6bb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6bb6:	f017 bd70 	b.w	1e69a <log_msg_put>
    6bba:	bf00      	nop
    6bbc:	000239a0 	.word	0x000239a0

00006bc0 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    6bc0:	4b01      	ldr	r3, [pc, #4]	; (6bc8 <log_backend_rtt_init+0x8>)
    6bc2:	2201      	movs	r2, #1
    6bc4:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    6bc6:	4770      	bx	lr
    6bc8:	200096d6 	.word	0x200096d6

00006bcc <panic>:

static void panic(struct log_backend const *const backend)
{
	panic_mode = true;
    6bcc:	4b02      	ldr	r3, [pc, #8]	; (6bd8 <panic+0xc>)
	log_output_flush(log_output);
    6bce:	4803      	ldr	r0, [pc, #12]	; (6bdc <panic+0x10>)
    6bd0:	2201      	movs	r2, #1
    6bd2:	701a      	strb	r2, [r3, #0]
    6bd4:	f017 bf3b 	b.w	1ea4e <log_output_flush>
    6bd8:	200096d7 	.word	0x200096d7
    6bdc:	000239c8 	.word	0x000239c8

00006be0 <dropped>:
	log_output_dropped_process(log_output, cnt);
    6be0:	4801      	ldr	r0, [pc, #4]	; (6be8 <dropped+0x8>)
    6be2:	f7ff bf81 	b.w	6ae8 <log_output_dropped_process>
    6be6:	bf00      	nop
    6be8:	000239c8 	.word	0x000239c8

00006bec <put>:
{
    6bec:	b510      	push	{r4, lr}
	log_msg_get(msg);
    6bee:	4608      	mov	r0, r1
    6bf0:	460c      	mov	r4, r1
    6bf2:	f017 fd23 	bl	1e63c <log_msg_get>
	log_output_msg_process(log_output, msg, flags);
    6bf6:	4805      	ldr	r0, [pc, #20]	; (6c0c <put+0x20>)
    6bf8:	4621      	mov	r1, r4
    6bfa:	220f      	movs	r2, #15
    6bfc:	f7ff fefa 	bl	69f4 <log_output_msg_process>
	log_msg_put(msg);
    6c00:	4620      	mov	r0, r4
}
    6c02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6c06:	f017 bd48 	b.w	1e69a <log_msg_put>
    6c0a:	bf00      	nop
    6c0c:	000239c8 	.word	0x000239c8

00006c10 <on_failed_write.part.0>:
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
    6c10:	4b05      	ldr	r3, [pc, #20]	; (6c28 <on_failed_write.part.0+0x18>)
	} else if (is_sync_mode()) {
    6c12:	781b      	ldrb	r3, [r3, #0]
    6c14:	b11b      	cbz	r3, 6c1e <on_failed_write.part.0+0xe>
	z_impl_k_busy_wait(usec_to_wait);
    6c16:	f241 3088 	movw	r0, #5000	; 0x1388
    6c1a:	f01c ba00 	b.w	2301e <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
    6c1e:	20a4      	movs	r0, #164	; 0xa4
    6c20:	2100      	movs	r1, #0
    6c22:	f016 bd83 	b.w	1d72c <z_impl_k_sleep>
    6c26:	bf00      	nop
    6c28:	200096d7 	.word	0x200096d7

00006c2c <data_out_block_mode>:
{
    6c2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
    6c30:	f8df 9090 	ldr.w	r9, [pc, #144]	; 6cc4 <data_out_block_mode+0x98>
	return z_impl_k_mutex_lock(mutex, timeout);
    6c34:	f8df b090 	ldr.w	fp, [pc, #144]	; 6cc8 <data_out_block_mode+0x9c>
{
    6c38:	4607      	mov	r7, r0
    6c3a:	460e      	mov	r6, r1
	int retry_cnt = CONFIG_LOG_BACKEND_RTT_RETRY_CNT;
    6c3c:	2404      	movs	r4, #4
    6c3e:	46ca      	mov	sl, r9
		if (!is_sync_mode()) {
    6c40:	f899 3000 	ldrb.w	r3, [r9]
    6c44:	b933      	cbnz	r3, 6c54 <data_out_block_mode+0x28>
    6c46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6c4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6c4e:	4658      	mov	r0, fp
    6c50:	f016 f950 	bl	1cef4 <z_impl_k_mutex_lock>
		ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    6c54:	4632      	mov	r2, r6
    6c56:	4639      	mov	r1, r7
    6c58:	2000      	movs	r0, #0
    6c5a:	f000 f9eb 	bl	7034 <SEGGER_RTT_WriteSkipNoLock>
		if (!is_sync_mode()) {
    6c5e:	f89a 3000 	ldrb.w	r3, [sl]
		ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    6c62:	4680      	mov	r8, r0
		if (!is_sync_mode()) {
    6c64:	b913      	cbnz	r3, 6c6c <data_out_block_mode+0x40>
	return z_impl_k_mutex_unlock(mutex);
    6c66:	4658      	mov	r0, fp
    6c68:	f016 f9bc 	bl	1cfe4 <z_impl_k_mutex_unlock>
		if (ret) {
    6c6c:	4d14      	ldr	r5, [pc, #80]	; (6cc0 <data_out_block_mode+0x94>)
    6c6e:	f1b8 0f00 	cmp.w	r8, #0
    6c72:	d018      	beq.n	6ca6 <data_out_block_mode+0x7a>
	host_present = true;
    6c74:	2301      	movs	r3, #1
    6c76:	702b      	strb	r3, [r5, #0]
	if (is_panic_mode()) {
    6c78:	f89a 3000 	ldrb.w	r3, [sl]
    6c7c:	b933      	cbnz	r3, 6c8c <data_out_block_mode+0x60>
}
    6c7e:	4630      	mov	r0, r6
    6c80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (retry_cnt == 0) {
    6c84:	b95c      	cbnz	r4, 6c9e <data_out_block_mode+0x72>
		host_present = false;
    6c86:	702c      	strb	r4, [r5, #0]
    6c88:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    6c8c:	2000      	movs	r0, #0
    6c8e:	f000 fa1d 	bl	70cc <SEGGER_RTT_HasDataUp>
    6c92:	2800      	cmp	r0, #0
    6c94:	d0f3      	beq.n	6c7e <data_out_block_mode+0x52>
    6c96:	782b      	ldrb	r3, [r5, #0]
    6c98:	2b00      	cmp	r3, #0
    6c9a:	d1f3      	bne.n	6c84 <data_out_block_mode+0x58>
    6c9c:	e7ef      	b.n	6c7e <data_out_block_mode+0x52>
			on_failed_write(retry_cnt--);
    6c9e:	3c01      	subs	r4, #1
    6ca0:	f7ff ffb6 	bl	6c10 <on_failed_write.part.0>
    6ca4:	e7f2      	b.n	6c8c <data_out_block_mode+0x60>
		} else if (host_present) {
    6ca6:	782b      	ldrb	r3, [r5, #0]
    6ca8:	b113      	cbz	r3, 6cb0 <data_out_block_mode+0x84>
	if (retry_cnt == 0) {
    6caa:	3c01      	subs	r4, #1
    6cac:	d104      	bne.n	6cb8 <data_out_block_mode+0x8c>
		host_present = false;
    6cae:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
    6cb0:	782b      	ldrb	r3, [r5, #0]
    6cb2:	2b00      	cmp	r3, #0
    6cb4:	d1c4      	bne.n	6c40 <data_out_block_mode+0x14>
    6cb6:	e7e2      	b.n	6c7e <data_out_block_mode+0x52>
    6cb8:	f7ff ffaa 	bl	6c10 <on_failed_write.part.0>
    6cbc:	e7f8      	b.n	6cb0 <data_out_block_mode+0x84>
    6cbe:	bf00      	nop
    6cc0:	200096d6 	.word	0x200096d6
    6cc4:	200096d7 	.word	0x200096d7
    6cc8:	20000814 	.word	0x20000814

00006ccc <console_out>:

static int console_out(int c)
{
#ifdef CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS

	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
    6ccc:	4b0a      	ldr	r3, [pc, #40]	; (6cf8 <console_out+0x2c>)
{
    6cce:	b570      	push	{r4, r5, r6, lr}
	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
    6cd0:	b2c6      	uxtb	r6, r0
    6cd2:	681b      	ldr	r3, [r3, #0]
{
    6cd4:	4604      	mov	r4, r0
	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
    6cd6:	4630      	mov	r0, r6
    6cd8:	4798      	blx	r3

	if (handled_by_debug_server) {
    6cda:	2801      	cmp	r0, #1
    6cdc:	d00a      	beq.n	6cf4 <console_out+0x28>
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    6cde:	2c0a      	cmp	r4, #10
    6ce0:	4d06      	ldr	r5, [pc, #24]	; (6cfc <console_out+0x30>)
    6ce2:	d103      	bne.n	6cec <console_out+0x20>
		uart_poll_out(uart_console_dev, '\r');
    6ce4:	6828      	ldr	r0, [r5, #0]
    6ce6:	210d      	movs	r1, #13
    6ce8:	f017 fee9 	bl	1eabe <uart_poll_out>
	}
	uart_poll_out(uart_console_dev, c);
    6cec:	6828      	ldr	r0, [r5, #0]
    6cee:	4631      	mov	r1, r6
    6cf0:	f017 fee5 	bl	1eabe <uart_poll_out>

	return c;
}
    6cf4:	4620      	mov	r0, r4
    6cf6:	bd70      	pop	{r4, r5, r6, pc}
    6cf8:	20000148 	.word	0x20000148
    6cfc:	20001df0 	.word	0x20001df0

00006d00 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    6d00:	b510      	push	{r4, lr}
    6d02:	4807      	ldr	r0, [pc, #28]	; (6d20 <uart_console_init+0x20>)
	__stdout_hook_install(console_out);
    6d04:	4c07      	ldr	r4, [pc, #28]	; (6d24 <uart_console_init+0x24>)
    6d06:	f015 fec9 	bl	1ca9c <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    6d0a:	4b07      	ldr	r3, [pc, #28]	; (6d28 <uart_console_init+0x28>)
    6d0c:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
    6d0e:	4620      	mov	r0, r4
    6d10:	f001 f828 	bl	7d64 <__stdout_hook_install>
	__printk_hook_install(console_out);
    6d14:	4620      	mov	r0, r4
    6d16:	f7ff f8eb 	bl	5ef0 <__printk_hook_install>
#endif

	uart_console_hook_install();

	return 0;
}
    6d1a:	2000      	movs	r0, #0
    6d1c:	bd10      	pop	{r4, pc}
    6d1e:	bf00      	nop
    6d20:	000250bd 	.word	0x000250bd
    6d24:	00006ccd 	.word	0x00006ccd
    6d28:	20001df0 	.word	0x20001df0

00006d2c <clkstarted_handle.constprop.0>:
DEVICE_AND_API_INIT(clock_nrf, DT_INST_LABEL(0),
		    clk_init, &data, &config, PRE_KERNEL_1,
		    CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &clock_control_api);

static void clkstarted_handle(struct device *dev,
    6d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			      enum clock_control_nrf_type type)
{
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    6d2e:	4e12      	ldr	r6, [pc, #72]	; (6d78 <clkstarted_handle.constprop.0+0x4c>)
    6d30:	68f3      	ldr	r3, [r6, #12]
	struct clock_control_async_data *async_data;

	DBG(dev, type, "Clock started");
	sub_data->started = true;
    6d32:	240c      	movs	r4, #12
    6d34:	fb04 3400 	mla	r4, r4, r0, r3
    6d38:	2301      	movs	r3, #1
static void clkstarted_handle(struct device *dev,
    6d3a:	4605      	mov	r5, r0
	sub_data->started = true;
    6d3c:	7263      	strb	r3, [r4, #9]
	__asm__ volatile(
    6d3e:	f04f 0320 	mov.w	r3, #32
    6d42:	f3ef 8111 	mrs	r1, BASEPRI
    6d46:	f383 8811 	msr	BASEPRI, r3
    6d4a:	f3bf 8f6f 	isb	sy
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_slist_is_empty(sys_slist_t *list);

Z_GENLIST_IS_EMPTY(slist)
    6d4e:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    6d50:	b12b      	cbz	r3, 6d5e <clkstarted_handle.constprop.0+0x32>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    6d52:	6860      	ldr	r0, [r4, #4]
    6d54:	681a      	ldr	r2, [r3, #0]
	list->head = node;
    6d56:	6022      	str	r2, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    6d58:	4283      	cmp	r3, r0
	list->tail = node;
    6d5a:	bf08      	it	eq
    6d5c:	6062      	streq	r2, [r4, #4]
	__asm__ volatile(
    6d5e:	f381 8811 	msr	BASEPRI, r1
    6d62:	f3bf 8f6f 	isb	sy

	while ((async_data = list_get(&sub_data->list)) != NULL) {
    6d66:	b903      	cbnz	r3, 6d6a <clkstarted_handle.constprop.0+0x3e>
		async_data->cb(dev, (clock_control_subsys_t)type,
				async_data->user_data);
	}
}
    6d68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		async_data->cb(dev, (clock_control_subsys_t)type,
    6d6a:	e9d3 7201 	ldrd	r7, r2, [r3, #4]
    6d6e:	4629      	mov	r1, r5
    6d70:	4630      	mov	r0, r6
    6d72:	47b8      	blx	r7
    6d74:	e7e3      	b.n	6d3e <clkstarted_handle.constprop.0+0x12>
    6d76:	bf00      	nop
    6d78:	20000728 	.word	0x20000728

00006d7c <nrf_power_clock_isr>:
#endif
}

NRF_STATIC_INLINE bool nrf_clock_event_check(NRF_CLOCK_Type const * p_reg, nrf_clock_event_t event)
{
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    6d7c:	4b15      	ldr	r3, [pc, #84]	; (6dd4 <nrf_power_clock_isr+0x58>)
	}
#endif
}

void nrf_power_clock_isr(void *arg)
{
    6d7e:	b507      	push	{r0, r1, r2, lr}
    6d80:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
    6d82:	b182      	cbz	r2, 6da6 <nrf_power_clock_isr+0x2a>
    return p_reg->INTENSET & mask;
    6d84:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    6d88:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
    6d8c:	07d1      	lsls	r1, r2, #31
    6d8e:	d50a      	bpl.n	6da6 <nrf_power_clock_isr+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6d90:	2200      	movs	r2, #0
    6d92:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    6d94:	681b      	ldr	r3, [r3, #0]
    6d96:	9300      	str	r3, [sp, #0]
    (void)dummy;
    6d98:	9b00      	ldr	r3, [sp, #0]
	struct device *dev = DEVICE_GET(clock_nrf);

	if (clock_event_check_and_clean(NRF_CLOCK_EVENT_HFCLKSTARTED,
					NRF_CLOCK_INT_HF_STARTED_MASK)) {
		struct nrf_clock_control_sub_data *data =
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    6d9a:	4b0f      	ldr	r3, [pc, #60]	; (6dd8 <nrf_power_clock_isr+0x5c>)

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (!data->started) {
    6d9c:	68db      	ldr	r3, [r3, #12]
    6d9e:	7a58      	ldrb	r0, [r3, #9]
    6da0:	b908      	cbnz	r0, 6da6 <nrf_power_clock_isr+0x2a>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    6da2:	f7ff ffc3 	bl	6d2c <clkstarted_handle.constprop.0>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    6da6:	4b0d      	ldr	r3, [pc, #52]	; (6ddc <nrf_power_clock_isr+0x60>)
    6da8:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
    6daa:	b182      	cbz	r2, 6dce <nrf_power_clock_isr+0x52>
    return p_reg->INTENSET & mask;
    6dac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    6db0:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
    6db4:	0792      	lsls	r2, r2, #30
    6db6:	d50a      	bpl.n	6dce <nrf_power_clock_isr+0x52>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6db8:	2200      	movs	r2, #0
    6dba:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    6dbc:	681b      	ldr	r3, [r3, #0]
    6dbe:	9301      	str	r3, [sp, #4]
    (void)dummy;
    6dc0:	9b01      	ldr	r3, [sp, #4]
					NRF_CLOCK_INT_LF_STARTED_MASK)) {
		if (IS_ENABLED(
			CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
			z_nrf_clock_calibration_lfclk_started();
		}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    6dc2:	2001      	movs	r0, #1
	usb_power_isr();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
		z_nrf_clock_calibration_isr();
	}
}
    6dc4:	b003      	add	sp, #12
    6dc6:	f85d eb04 	ldr.w	lr, [sp], #4
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    6dca:	f7ff bfaf 	b.w	6d2c <clkstarted_handle.constprop.0>
}
    6dce:	b003      	add	sp, #12
    6dd0:	f85d fb04 	ldr.w	pc, [sp], #4
    6dd4:	40000100 	.word	0x40000100
    6dd8:	20000728 	.word	0x20000728
    6ddc:	40000104 	.word	0x40000104

00006de0 <handle_next_tick_case>:
 * counter progresses during that time it means that 1 tick elapsed and
 * interrupt is set pending.
 */
static void handle_next_tick_case(uint32_t t)
{
	set_comparator(t + 2);
    6de0:	1c82      	adds	r2, r0, #2

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    6de2:	4b08      	ldr	r3, [pc, #32]	; (6e04 <handle_next_tick_case+0x24>)
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    6de4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    6de8:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
#endif
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    6dec:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	while (t != counter()) {
    6df0:	4290      	cmp	r0, r2
    6df2:	d100      	bne.n	6df6 <handle_next_tick_case+0x16>
		 * generated. Trigger interrupt.
		 */
		t = counter();
		set_comparator(t + 2);
	}
}
    6df4:	4770      	bx	lr
    6df6:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		set_comparator(t + 2);
    6dfa:	1c82      	adds	r2, r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    6dfc:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    6e00:	e7f2      	b.n	6de8 <handle_next_tick_case+0x8>
    6e02:	bf00      	nop
    6e04:	40011000 	.word	0x40011000

00006e08 <event_clear>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    6e08:	4b04      	ldr	r3, [pc, #16]	; (6e1c <event_clear+0x14>)
    6e0a:	2200      	movs	r2, #0
{
    6e0c:	b082      	sub	sp, #8
    6e0e:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    6e10:	681b      	ldr	r3, [r3, #0]
    6e12:	9301      	str	r3, [sp, #4]
    (void)dummy;
    6e14:	9b01      	ldr	r3, [sp, #4]
}
    6e16:	b002      	add	sp, #8
    6e18:	4770      	bx	lr
    6e1a:	bf00      	nop
    6e1c:	40011140 	.word	0x40011140

00006e20 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(void *arg)
{
    6e20:	b508      	push	{r3, lr}
	ARG_UNUSED(arg);
	event_clear();
    6e22:	f7ff fff1 	bl	6e08 <event_clear>
    return p_reg->CC[ch];
    6e26:	4b07      	ldr	r3, [pc, #28]	; (6e44 <rtc_nrf_isr+0x24>)

	uint32_t t = get_comparator();
	uint32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
    6e28:	4a07      	ldr	r2, [pc, #28]	; (6e48 <rtc_nrf_isr+0x28>)
    6e2a:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
    6e2e:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    6e30:	1ac0      	subs	r0, r0, r3
    6e32:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    6e36:	4403      	add	r3, r0
    6e38:	6013      	str	r3, [r2, #0]
		 */
		set_absolute_ticks(last_count + CYC_PER_TICK);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : (dticks > 0));
}
    6e3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : (dticks > 0));
    6e3e:	f016 bedf 	b.w	1dc00 <z_clock_announce>
    6e42:	bf00      	nop
    6e44:	40011000 	.word	0x40011000
    6e48:	20001e0c 	.word	0x20001e0c

00006e4c <z_clock_driver_init>:

int z_clock_driver_init(struct device *device)
{
    6e4c:	b538      	push	{r3, r4, r5, lr}
    6e4e:	4814      	ldr	r0, [pc, #80]	; (6ea0 <z_clock_driver_init+0x54>)
    6e50:	f015 fe24 	bl	1ca9c <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_LABEL(DT_INST(0, nordic_nrf_clock)));
	if (!clock) {
    6e54:	b300      	cbz	r0, 6e98 <z_clock_driver_init+0x4c>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
    6e56:	6883      	ldr	r3, [r0, #8]
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
    6e58:	4d12      	ldr	r5, [pc, #72]	; (6ea4 <z_clock_driver_init+0x58>)
    6e5a:	681b      	ldr	r3, [r3, #0]
    6e5c:	2101      	movs	r1, #1
    6e5e:	2400      	movs	r4, #0
    6e60:	4798      	blx	r3
    6e62:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508

	clock_control_on(clock, CLOCK_CONTROL_NRF_SUBSYS_LF);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	event_clear();
    6e66:	f7ff ffcf 	bl	6e08 <event_clear>
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6e6a:	4b0f      	ldr	r3, [pc, #60]	; (6ea8 <z_clock_driver_init+0x5c>)
    6e6c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    6e70:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    p_reg->INTENSET = mask;
    6e74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    6e78:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
	NVIC_ClearPendingIRQ(RTC_IRQn);
	int_enable();

	IRQ_CONNECT(RTC_IRQn, 1, rtc_nrf_isr, 0, 0);
    6e7c:	4622      	mov	r2, r4
    6e7e:	2101      	movs	r1, #1
    6e80:	2011      	movs	r0, #17
    6e82:	f000 fb3f 	bl	7504 <z_arm_irq_priority_set>
	irq_enable(RTC_IRQn);
    6e86:	2011      	movs	r0, #17
    6e88:	f000 fb0a 	bl	74a0 <arch_irq_enable>
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    6e8c:	4a07      	ldr	r2, [pc, #28]	; (6eac <z_clock_driver_init+0x60>)
    6e8e:	2301      	movs	r3, #1
    6e90:	6013      	str	r3, [r2, #0]

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	return 0;
    6e92:	4620      	mov	r0, r4
    6e94:	602b      	str	r3, [r5, #0]
}
    6e96:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
    6e98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6e9c:	e7fb      	b.n	6e96 <z_clock_driver_init+0x4a>
    6e9e:	bf00      	nop
    6ea0:	000250eb 	.word	0x000250eb
    6ea4:	40011000 	.word	0x40011000
    6ea8:	e000e100 	.word	0xe000e100
    6eac:	40011008 	.word	0x40011008

00006eb0 <z_clock_set_timeout>:

void z_clock_set_timeout(int32_t ticks, bool idle)
{
    6eb0:	b570      	push	{r4, r5, r6, lr}
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
	ticks = MAX(MIN(ticks - 1, (int32_t)MAX_TICKS), 0);

	uint32_t unannounced = counter_sub(counter(), last_count);
    6eb2:	4b2a      	ldr	r3, [pc, #168]	; (6f5c <z_clock_set_timeout+0xac>)
     return p_reg->COUNTER;
    6eb4:	4c2a      	ldr	r4, [pc, #168]	; (6f60 <z_clock_set_timeout+0xb0>)
    6eb6:	6819      	ldr	r1, [r3, #0]
    6eb8:	f8d4 2504 	ldr.w	r2, [r4, #1284]	; 0x504
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    6ebc:	4d29      	ldr	r5, [pc, #164]	; (6f64 <z_clock_set_timeout+0xb4>)
	return (a - b) & COUNTER_MAX;
    6ebe:	1a52      	subs	r2, r2, r1
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    6ec0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    6ec4:	bf08      	it	eq
    6ec6:	4628      	moveq	r0, r5
	return (a - b) & COUNTER_MAX;
    6ec8:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
    6ecc:	0212      	lsls	r2, r2, #8
    6ece:	d434      	bmi.n	6f3a <z_clock_set_timeout+0x8a>
	ticks = MAX(MIN(ticks - 1, (int32_t)MAX_TICKS), 0);
    6ed0:	3801      	subs	r0, #1
    6ed2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    6ed6:	42a8      	cmp	r0, r5
    6ed8:	bfa8      	it	ge
    6eda:	4628      	movge	r0, r5
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    6edc:	3301      	adds	r3, #1
    p_reg->INTENCLR = mask;
    6ede:	f44f 3680 	mov.w	r6, #65536	; 0x10000
    6ee2:	4418      	add	r0, r3
    6ee4:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
    6ee8:	42a8      	cmp	r0, r5
    6eea:	bf94      	ite	ls
    6eec:	180d      	addls	r5, r1, r0
    6eee:	194d      	addhi	r5, r1, r5
     return p_reg->COUNTER;
    6ef0:	f8d4 0504 	ldr.w	r0, [r4, #1284]	; 0x504
    return p_reg->CC[ch];
    6ef4:	f8d4 1540 	ldr.w	r1, [r4, #1344]	; 0x540
	event_clear();
    6ef8:	f7ff ff86 	bl	6e08 <event_clear>
	return (a - b) & COUNTER_MAX;
    6efc:	1a09      	subs	r1, r1, r0
    6efe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    6f02:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
	if (counter_sub(prev_val, now) == 1) {
    6f06:	2901      	cmp	r1, #1
    p_reg->CC[ch] = cc_val;
    6f08:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    6f0c:	f8c4 6344 	str.w	r6, [r4, #836]	; 0x344
    6f10:	d104      	bne.n	6f1c <z_clock_set_timeout+0x6c>
	z_impl_k_busy_wait(usec_to_wait);
    6f12:	200f      	movs	r0, #15
    6f14:	f01c f883 	bl	2301e <z_impl_k_busy_wait>
		event_clear();
    6f18:	f7ff ff76 	bl	6e08 <event_clear>
    6f1c:	4b12      	ldr	r3, [pc, #72]	; (6f68 <z_clock_set_timeout+0xb8>)
    6f1e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    6f22:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
     return p_reg->COUNTER;
    6f26:	f8d4 0504 	ldr.w	r0, [r4, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    6f2a:	1a2b      	subs	r3, r5, r0
    6f2c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	if (diff == 1) {
    6f30:	2b01      	cmp	r3, #1
    6f32:	d104      	bne.n	6f3e <z_clock_set_timeout+0x8e>
		handle_next_tick_case(t);
    6f34:	f7ff ff54 	bl	6de0 <handle_next_tick_case>
    6f38:	e00b      	b.n	6f52 <z_clock_set_timeout+0xa2>
		ticks = 0;
    6f3a:	2000      	movs	r0, #0
    6f3c:	e7ce      	b.n	6edc <z_clock_set_timeout+0x2c>
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    6f3e:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    6f42:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
     return p_reg->COUNTER;
    6f46:	f8d4 0504 	ldr.w	r0, [r4, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    6f4a:	1a2d      	subs	r5, r5, r0
    6f4c:	3d02      	subs	r5, #2
	if (diff > MAX_TICKS) {
    6f4e:	022b      	lsls	r3, r5, #8
    6f50:	d4f0      	bmi.n	6f34 <z_clock_set_timeout+0x84>
    p_reg->INTENSET = mask;
    6f52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    6f56:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
	set_protected_absolute_ticks(cyc);
}
    6f5a:	bd70      	pop	{r4, r5, r6, pc}
    6f5c:	20001e0c 	.word	0x20001e0c
    6f60:	40011000 	.word	0x40011000
    6f64:	007fffff 	.word	0x007fffff
    6f68:	e000e100 	.word	0xe000e100

00006f6c <z_clock_elapsed>:
	__asm__ volatile(
    6f6c:	f04f 0220 	mov.w	r2, #32
    6f70:	f3ef 8311 	mrs	r3, BASEPRI
    6f74:	f382 8811 	msr	BASEPRI, r2
    6f78:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
    6f7c:	4a06      	ldr	r2, [pc, #24]	; (6f98 <z_clock_elapsed+0x2c>)
    6f7e:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    6f82:	4a06      	ldr	r2, [pc, #24]	; (6f9c <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
    6f84:	6812      	ldr	r2, [r2, #0]
    6f86:	1a80      	subs	r0, r0, r2
    6f88:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
    6f8c:	f383 8811 	msr	BASEPRI, r3
    6f90:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    6f94:	4770      	bx	lr
    6f96:	bf00      	nop
    6f98:	40011000 	.word	0x40011000
    6f9c:	20001e0c 	.word	0x20001e0c

00006fa0 <z_timer_cycle_get_32>:
	__asm__ volatile(
    6fa0:	f04f 0320 	mov.w	r3, #32
    6fa4:	f3ef 8211 	mrs	r2, BASEPRI
    6fa8:	f383 8811 	msr	BASEPRI, r3
    6fac:	f3bf 8f6f 	isb	sy

uint32_t z_timer_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
    6fb0:	4906      	ldr	r1, [pc, #24]	; (6fcc <z_timer_cycle_get_32+0x2c>)
    6fb2:	4b07      	ldr	r3, [pc, #28]	; (6fd0 <z_timer_cycle_get_32+0x30>)
    6fb4:	6808      	ldr	r0, [r1, #0]
    6fb6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
    6fba:	f382 8811 	msr	BASEPRI, r2
    6fbe:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
    6fc2:	1a1b      	subs	r3, r3, r0
    6fc4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
    6fc8:	4418      	add	r0, r3
    6fca:	4770      	bx	lr
    6fcc:	20001e0c 	.word	0x20001e0c
    6fd0:	40011000 	.word	0x40011000

00006fd4 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
    6fd4:	b510      	push	{r4, lr}
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    6fd6:	4c11      	ldr	r4, [pc, #68]	; (701c <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    6fd8:	4a11      	ldr	r2, [pc, #68]	; (7020 <_DoInit+0x4c>)
    6fda:	61a2      	str	r2, [r4, #24]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    6fdc:	2303      	movs	r3, #3
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    6fde:	e9c4 3304 	strd	r3, r3, [r4, #16]
  p->aUp[0].pBuffer       = _acUpBuffer;
    6fe2:	4b10      	ldr	r3, [pc, #64]	; (7024 <_DoInit+0x50>)
    6fe4:	61e3      	str	r3, [r4, #28]
  p->aUp[0].WrOff         = 0u;
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    6fe6:	6622      	str	r2, [r4, #96]	; 0x60
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    6fe8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  p->aDown[0].pBuffer       = _acDownBuffer;
    6fec:	4a0e      	ldr	r2, [pc, #56]	; (7028 <_DoInit+0x54>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
    6fee:	490f      	ldr	r1, [pc, #60]	; (702c <_DoInit+0x58>)
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    6ff0:	6223      	str	r3, [r4, #32]
  p->aDown[0].pBuffer       = _acDownBuffer;
    6ff2:	6662      	str	r2, [r4, #100]	; 0x64
  p->aUp[0].RdOff         = 0u;
    6ff4:	2300      	movs	r3, #0
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    6ff6:	2210      	movs	r2, #16
  strcpy(&p->acID[7], "RTT");
    6ff8:	1de0      	adds	r0, r4, #7
  p->aUp[0].RdOff         = 0u;
    6ffa:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    6ffc:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    6ffe:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].RdOff         = 0u;
    7000:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    7002:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    7004:	6763      	str	r3, [r4, #116]	; 0x74
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    7006:	66a2      	str	r2, [r4, #104]	; 0x68
  strcpy(&p->acID[7], "RTT");
    7008:	f018 fef5 	bl	1fdf6 <strcpy>
  strcpy(&p->acID[0], "SEGGER");
    700c:	4908      	ldr	r1, [pc, #32]	; (7030 <_DoInit+0x5c>)
    700e:	4620      	mov	r0, r4
    7010:	f018 fef1 	bl	1fdf6 <strcpy>
  p->acID[6] = ' ';
    7014:	2320      	movs	r3, #32
    7016:	71a3      	strb	r3, [r4, #6]
}
    7018:	bd10      	pop	{r4, pc}
    701a:	bf00      	nop
    701c:	20001e10 	.word	0x20001e10
    7020:	00025115 	.word	0x00025115
    7024:	200096e8 	.word	0x200096e8
    7028:	200096d8 	.word	0x200096d8
    702c:	0002511e 	.word	0x0002511e
    7030:	00025122 	.word	0x00025122

00007034 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    7034:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  RdOff = pRing->RdOff;
    7038:	4f23      	ldr	r7, [pc, #140]	; (70c8 <SEGGER_RTT_WriteSkipNoLock+0x94>)
    703a:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    703e:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
    7040:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    7044:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
    7046:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    7048:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    704a:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    704c:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    704e:	d834      	bhi.n	70ba <SEGGER_RTT_WriteSkipNoLock+0x86>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    7050:	f8d2 a020 	ldr.w	sl, [r2, #32]
    7054:	ebaa 0905 	sub.w	r9, sl, r5
    7058:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {                            // Case 1)?
    705c:	4294      	cmp	r4, r2
    705e:	d811      	bhi.n	7084 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
    7060:	f04f 0918 	mov.w	r9, #24
    7064:	fb06 9309 	mla	r3, r6, r9, r9
    7068:	443b      	add	r3, r7
    706a:	4622      	mov	r2, r4
    706c:	6858      	ldr	r0, [r3, #4]
    706e:	4641      	mov	r1, r8
    7070:	4428      	add	r0, r5
    7072:	f018 ff00 	bl	1fe76 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
    7076:	fb09 7606 	mla	r6, r9, r6, r7
    707a:	442c      	add	r4, r5
      // Therefore, check if 2nd memcpy is necessary at all
      //
      if (NumBytes) {
        memcpy(pRing->pBuffer, pData + Rem, NumBytes);
      }
      pRing->WrOff = NumBytes;
    707c:	6274      	str	r4, [r6, #36]	; 0x24
      return 1;
    707e:	2001      	movs	r0, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
    7080:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
    7084:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    7086:	429c      	cmp	r4, r3
    7088:	d81b      	bhi.n	70c2 <SEGGER_RTT_WriteSkipNoLock+0x8e>
      memcpy(pRing->pBuffer + WrOff, pData, Rem);       // Copy 1st chunk
    708a:	fb00 bb0b 	mla	fp, r0, fp, fp
    708e:	44bb      	add	fp, r7
    7090:	464a      	mov	r2, r9
    7092:	f8db 0004 	ldr.w	r0, [fp, #4]
    7096:	442c      	add	r4, r5
    7098:	4428      	add	r0, r5
    709a:	f018 feec 	bl	1fe76 <memcpy>
      if (NumBytes) {
    709e:	ebb4 040a 	subs.w	r4, r4, sl
    70a2:	d006      	beq.n	70b2 <SEGGER_RTT_WriteSkipNoLock+0x7e>
        memcpy(pRing->pBuffer, pData + Rem, NumBytes);
    70a4:	f8db 0004 	ldr.w	r0, [fp, #4]
    70a8:	4622      	mov	r2, r4
    70aa:	eb08 0109 	add.w	r1, r8, r9
    70ae:	f018 fee2 	bl	1fe76 <memcpy>
      pRing->WrOff = NumBytes;
    70b2:	2018      	movs	r0, #24
    70b4:	fb00 7606 	mla	r6, r0, r6, r7
    70b8:	e7e0      	b.n	707c <SEGGER_RTT_WriteSkipNoLock+0x48>
    Avail = RdOff - WrOff - 1u;
    70ba:	3b01      	subs	r3, #1
    70bc:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    70be:	42a3      	cmp	r3, r4
    70c0:	d2ce      	bcs.n	7060 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
    70c2:	2000      	movs	r0, #0
    70c4:	e7dc      	b.n	7080 <SEGGER_RTT_WriteSkipNoLock+0x4c>
    70c6:	bf00      	nop
    70c8:	20001e10 	.word	0x20001e10

000070cc <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  v = pRing->RdOff;
    70cc:	4b03      	ldr	r3, [pc, #12]	; (70dc <SEGGER_RTT_HasDataUp+0x10>)
    70ce:	2218      	movs	r2, #24
    70d0:	fb02 3300 	mla	r3, r2, r0, r3
    70d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
    70d6:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    70d8:	1a80      	subs	r0, r0, r2
    70da:	4770      	bx	lr
    70dc:	20001e10 	.word	0x20001e10

000070e0 <uECC_get_rng>:
}

uECC_RNG_Function uECC_get_rng(void)
{
	return g_rng_function;
}
    70e0:	4b01      	ldr	r3, [pc, #4]	; (70e8 <uECC_get_rng+0x8>)
    70e2:	6818      	ldr	r0, [r3, #0]
    70e4:	4770      	bx	lr
    70e6:	bf00      	nop
    70e8:	2000014c 	.word	0x2000014c

000070ec <vli_mmod_fast_secp256r1>:
{
	return &curve_secp256r1;
}

void vli_mmod_fast_secp256r1(unsigned int *result, unsigned int*product)
{
    70ec:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int tmp[NUM_ECC_WORDS];
	int carry;

	/* t */
	uECC_vli_set(result, product, NUM_ECC_WORDS);
    70ee:	2208      	movs	r2, #8
{
    70f0:	b089      	sub	sp, #36	; 0x24
    70f2:	460c      	mov	r4, r1
    70f4:	4606      	mov	r6, r0
	uECC_vli_set(result, product, NUM_ECC_WORDS);
    70f6:	f017 ff6a 	bl	1efce <uECC_vli_set>

	/* s1 */
	tmp[0] = tmp[1] = tmp[2] = 0;
	tmp[3] = product[11];
    70fa:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    70fc:	9303      	str	r3, [sp, #12]
	tmp[4] = product[12];
    70fe:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    7100:	9304      	str	r3, [sp, #16]
	tmp[5] = product[13];
    7102:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    7104:	9305      	str	r3, [sp, #20]
	tmp[6] = product[14];
    7106:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    7108:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
    710a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    710c:	9307      	str	r3, [sp, #28]
	tmp[0] = tmp[1] = tmp[2] = 0;
    710e:	2700      	movs	r7, #0
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    7110:	2308      	movs	r3, #8
    7112:	466a      	mov	r2, sp
    7114:	4669      	mov	r1, sp
    7116:	4668      	mov	r0, sp
	tmp[0] = tmp[1] = tmp[2] = 0;
    7118:	e9cd 7701 	strd	r7, r7, [sp, #4]
    711c:	9700      	str	r7, [sp, #0]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    711e:	f017 fe58 	bl	1edd2 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    7122:	2308      	movs	r3, #8
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    7124:	4605      	mov	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    7126:	466a      	mov	r2, sp
    7128:	4631      	mov	r1, r6
    712a:	4630      	mov	r0, r6
    712c:	f017 fe51 	bl	1edd2 <uECC_vli_add>

	/* s2 */
	tmp[3] = product[12];
    7130:	6b23      	ldr	r3, [r4, #48]	; 0x30
    7132:	9303      	str	r3, [sp, #12]
	tmp[4] = product[13];
    7134:	6b63      	ldr	r3, [r4, #52]	; 0x34
    7136:	9304      	str	r3, [sp, #16]
	tmp[5] = product[14];
    7138:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    713a:	9305      	str	r3, [sp, #20]
	tmp[6] = product[15];
    713c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    713e:	4405      	add	r5, r0
	tmp[7] = 0;
    7140:	e9cd 3706 	strd	r3, r7, [sp, #24]
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    7144:	466a      	mov	r2, sp
    7146:	2308      	movs	r3, #8
    7148:	4669      	mov	r1, sp
    714a:	4668      	mov	r0, sp
    714c:	f017 fe41 	bl	1edd2 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    7150:	4631      	mov	r1, r6
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    7152:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    7154:	2308      	movs	r3, #8
    7156:	466a      	mov	r2, sp
    7158:	4630      	mov	r0, r6
    715a:	f017 fe3a 	bl	1edd2 <uECC_vli_add>

	/* s3 */
	tmp[0] = product[8];
    715e:	6a23      	ldr	r3, [r4, #32]
    7160:	9300      	str	r3, [sp, #0]
	tmp[1] = product[9];
    7162:	6a63      	ldr	r3, [r4, #36]	; 0x24
    7164:	9301      	str	r3, [sp, #4]
	tmp[2] = product[10];
    7166:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    7168:	9302      	str	r3, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[14];
    716a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    716c:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
    716e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    7170:	9307      	str	r3, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    7172:	4405      	add	r5, r0
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    7174:	2308      	movs	r3, #8
    7176:	466a      	mov	r2, sp
    7178:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
    717a:	e9cd 7704 	strd	r7, r7, [sp, #16]
    717e:	9703      	str	r7, [sp, #12]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    7180:	f017 fe27 	bl	1edd2 <uECC_vli_add>

	/* s4 */
	tmp[0] = product[9];
    7184:	6a63      	ldr	r3, [r4, #36]	; 0x24
    7186:	9300      	str	r3, [sp, #0]
	tmp[1] = product[10];
    7188:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[2] = product[11];
	tmp[3] = product[13];
	tmp[4] = product[14];
    718a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
	tmp[1] = product[10];
    718c:	9301      	str	r3, [sp, #4]
	tmp[2] = product[11];
    718e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    7190:	9302      	str	r3, [sp, #8]
	tmp[4] = product[14];
    7192:	9204      	str	r2, [sp, #16]
	tmp[3] = product[13];
    7194:	6b63      	ldr	r3, [r4, #52]	; 0x34
	tmp[5] = product[15];
    7196:	6be2      	ldr	r2, [r4, #60]	; 0x3c
	tmp[3] = product[13];
    7198:	9303      	str	r3, [sp, #12]
	tmp[6] = product[13];
    719a:	e9cd 2305 	strd	r2, r3, [sp, #20]
	tmp[7] = product[8];
    719e:	6a23      	ldr	r3, [r4, #32]
    71a0:	9307      	str	r3, [sp, #28]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    71a2:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    71a4:	2308      	movs	r3, #8
    71a6:	466a      	mov	r2, sp
    71a8:	4630      	mov	r0, r6
    71aa:	f017 fe12 	bl	1edd2 <uECC_vli_add>

	/* d1 */
	tmp[0] = product[11];
    71ae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    71b0:	9300      	str	r3, [sp, #0]
	tmp[1] = product[12];
    71b2:	6b23      	ldr	r3, [r4, #48]	; 0x30
    71b4:	9301      	str	r3, [sp, #4]
	tmp[2] = product[13];
    71b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
    71b8:	9302      	str	r3, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[8];
    71ba:	6a23      	ldr	r3, [r4, #32]
    71bc:	9306      	str	r3, [sp, #24]
	tmp[7] = product[10];
    71be:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    71c0:	9307      	str	r3, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    71c2:	4405      	add	r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    71c4:	2308      	movs	r3, #8
    71c6:	466a      	mov	r2, sp
    71c8:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
    71ca:	e9cd 7704 	strd	r7, r7, [sp, #16]
    71ce:	9703      	str	r7, [sp, #12]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    71d0:	f017 ff33 	bl	1f03a <uECC_vli_sub>

	/* d2 */
	tmp[0] = product[12];
    71d4:	6b23      	ldr	r3, [r4, #48]	; 0x30
    71d6:	9300      	str	r3, [sp, #0]
	tmp[1] = product[13];
    71d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
    71da:	9301      	str	r3, [sp, #4]
	tmp[2] = product[14];
    71dc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    71de:	9302      	str	r3, [sp, #8]
	tmp[3] = product[15];
    71e0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    71e2:	9303      	str	r3, [sp, #12]
	tmp[4] = tmp[5] = 0;
	tmp[6] = product[9];
    71e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    71e6:	9306      	str	r3, [sp, #24]
	tmp[7] = product[11];
    71e8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    71ea:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    71ec:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    71ee:	2308      	movs	r3, #8
    71f0:	466a      	mov	r2, sp
    71f2:	4630      	mov	r0, r6
	tmp[4] = tmp[5] = 0;
    71f4:	e9cd 7704 	strd	r7, r7, [sp, #16]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    71f8:	f017 ff1f 	bl	1f03a <uECC_vli_sub>

	/* d3 */
	tmp[0] = product[13];
    71fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
    71fe:	9300      	str	r3, [sp, #0]
	tmp[1] = product[14];
    7200:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    7202:	9301      	str	r3, [sp, #4]
	tmp[2] = product[15];
    7204:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    7206:	9302      	str	r3, [sp, #8]
	tmp[3] = product[8];
    7208:	6a23      	ldr	r3, [r4, #32]
    720a:	9303      	str	r3, [sp, #12]
	tmp[4] = product[9];
    720c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    720e:	9304      	str	r3, [sp, #16]
	tmp[5] = product[10];
    7210:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[6] = 0;
    7212:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[12];
    7216:	6b23      	ldr	r3, [r4, #48]	; 0x30
    7218:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    721a:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    721c:	2308      	movs	r3, #8
    721e:	466a      	mov	r2, sp
    7220:	4630      	mov	r0, r6
    7222:	f017 ff0a 	bl	1f03a <uECC_vli_sub>

	/* d4 */
	tmp[0] = product[14];
    7226:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    7228:	9300      	str	r3, [sp, #0]
	tmp[1] = product[15];
    722a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	tmp[2] = 0;
    722c:	e9cd 3701 	strd	r3, r7, [sp, #4]
	tmp[3] = product[9];
    7230:	6a63      	ldr	r3, [r4, #36]	; 0x24
    7232:	9303      	str	r3, [sp, #12]
	tmp[4] = product[10];
    7234:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    7236:	9304      	str	r3, [sp, #16]
	tmp[5] = product[11];
    7238:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	tmp[6] = 0;
    723a:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[13];
    723e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    7240:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    7242:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    7244:	2308      	movs	r3, #8
    7246:	466a      	mov	r2, sp
    7248:	4630      	mov	r0, r6
    724a:	f017 fef6 	bl	1f03a <uECC_vli_sub>

	if (carry < 0) {
    724e:	1a2d      	subs	r5, r5, r0
    7250:	d410      	bmi.n	7274 <vli_mmod_fast_secp256r1+0x188>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
		}
		while (carry < 0);
	} else  {
		while (carry || 
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
    7252:	4c0d      	ldr	r4, [pc, #52]	; (7288 <vli_mmod_fast_secp256r1+0x19c>)
		while (carry || 
    7254:	b935      	cbnz	r5, 7264 <vli_mmod_fast_secp256r1+0x178>
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
    7256:	2208      	movs	r2, #8
    7258:	4631      	mov	r1, r6
    725a:	4620      	mov	r0, r4
    725c:	f017 fec3 	bl	1efe6 <uECC_vli_cmp_unsafe>
		while (carry || 
    7260:	2801      	cmp	r0, #1
    7262:	d00f      	beq.n	7284 <vli_mmod_fast_secp256r1+0x198>
			carry -= uECC_vli_sub(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
    7264:	2308      	movs	r3, #8
    7266:	4622      	mov	r2, r4
    7268:	4631      	mov	r1, r6
    726a:	4630      	mov	r0, r6
    726c:	f017 fee5 	bl	1f03a <uECC_vli_sub>
    7270:	1a2d      	subs	r5, r5, r0
    7272:	e7ef      	b.n	7254 <vli_mmod_fast_secp256r1+0x168>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
    7274:	4a04      	ldr	r2, [pc, #16]	; (7288 <vli_mmod_fast_secp256r1+0x19c>)
    7276:	2308      	movs	r3, #8
    7278:	4631      	mov	r1, r6
    727a:	4630      	mov	r0, r6
    727c:	f017 fda9 	bl	1edd2 <uECC_vli_add>
		while (carry < 0);
    7280:	182d      	adds	r5, r5, r0
    7282:	d4f8      	bmi.n	7276 <vli_mmod_fast_secp256r1+0x18a>
		}
	}
}
    7284:	b009      	add	sp, #36	; 0x24
    7286:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7288:	00023a00 	.word	0x00023a00

0000728c <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
    728c:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
    728e:	4e26      	ldr	r6, [pc, #152]	; (7328 <tc_aes128_set_encrypt_key+0x9c>)
{
    7290:	4607      	mov	r7, r0
    7292:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    7294:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
    7296:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    7298:	ad01      	add	r5, sp, #4
    729a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    729c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    729e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    72a0:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    72a4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
    72a8:	4638      	mov	r0, r7
    72aa:	2f00      	cmp	r7, #0
    72ac:	d038      	beq.n	7320 <tc_aes128_set_encrypt_key+0x94>
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
    72ae:	2c00      	cmp	r4, #0
    72b0:	d038      	beq.n	7324 <tc_aes128_set_encrypt_key+0x98>
    72b2:	1f38      	subs	r0, r7, #4
    72b4:	4621      	mov	r1, r4
    72b6:	4602      	mov	r2, r0
    72b8:	3410      	adds	r4, #16
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    72ba:	784b      	ldrb	r3, [r1, #1]
    72bc:	780d      	ldrb	r5, [r1, #0]
    72be:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    72c0:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    72c4:	78cd      	ldrb	r5, [r1, #3]
    72c6:	432b      	orrs	r3, r5
    72c8:	788d      	ldrb	r5, [r1, #2]
    72ca:	3104      	adds	r1, #4
    72cc:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
    72d0:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    72d2:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    72d6:	d1f0      	bne.n	72ba <tc_aes128_set_encrypt_key+0x2e>
	}

	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
    72d8:	4c14      	ldr	r4, [pc, #80]	; (732c <tc_aes128_set_encrypt_key+0xa0>)
    72da:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
    72dc:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    72de:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    72e0:	d116      	bne.n	7310 <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    72e2:	f3c3 4207 	ubfx	r2, r3, #16, #8
    72e6:	5ca5      	ldrb	r5, [r4, r2]
    72e8:	0e1a      	lsrs	r2, r3, #24
    72ea:	5ca2      	ldrb	r2, [r4, r2]
    72ec:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    72f0:	f3c3 2507 	ubfx	r5, r3, #8, #8
    72f4:	b2db      	uxtb	r3, r3
    72f6:	5d65      	ldrb	r5, [r4, r5]
    72f8:	5ce3      	ldrb	r3, [r4, r3]
    72fa:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    72fe:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    7302:	ad0c      	add	r5, sp, #48	; 0x30
    7304:	f021 0303 	bic.w	r3, r1, #3
    7308:	442b      	add	r3, r5
    730a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    730e:	4053      	eors	r3, r2
		}
		s->words[i] = s->words[i-Nk] ^ t;
    7310:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    7314:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    7316:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    7318:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    731a:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    731c:	d1de      	bne.n	72dc <tc_aes128_set_encrypt_key+0x50>
	}

	return TC_CRYPTO_SUCCESS;
    731e:	2001      	movs	r0, #1
}
    7320:	b00d      	add	sp, #52	; 0x34
    7322:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    7324:	4620      	mov	r0, r4
    7326:	e7fb      	b.n	7320 <tc_aes128_set_encrypt_key+0x94>
    7328:	00023868 	.word	0x00023868
    732c:	00025129 	.word	0x00025129

00007330 <tc_aes_encrypt>:
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
	(void) _copy(s, sizeof(t), t, sizeof(t));
}

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
    7330:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7334:	4615      	mov	r5, r2
    7336:	b089      	sub	sp, #36	; 0x24
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
    7338:	4606      	mov	r6, r0
    733a:	2800      	cmp	r0, #0
    733c:	d058      	beq.n	73f0 <tc_aes_encrypt+0xc0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
    733e:	2900      	cmp	r1, #0
    7340:	d059      	beq.n	73f6 <tc_aes_encrypt+0xc6>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
    7342:	2a00      	cmp	r2, #0
    7344:	d059      	beq.n	73fa <tc_aes_encrypt+0xca>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
    7346:	2310      	movs	r3, #16
    7348:	460a      	mov	r2, r1
    734a:	4668      	mov	r0, sp
    734c:	4619      	mov	r1, r3
    734e:	f017 fc7c 	bl	1ec4a <_copy>
	add_round_key(state, s->words);
    7352:	4629      	mov	r1, r5
    7354:	4668      	mov	r0, sp
		s[i] = sbox[s[i]];
    7356:	4c2a      	ldr	r4, [pc, #168]	; (7400 <tc_aes_encrypt+0xd0>)
	add_round_key(state, s->words);
    7358:	f018 fb81 	bl	1fa5e <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
    735c:	f105 0710 	add.w	r7, r5, #16
    7360:	46a1      	mov	r9, r4
    7362:	35a0      	adds	r5, #160	; 0xa0
	for (i = 0; i < (Nb * Nk); ++i) {
    7364:	46e8      	mov	r8, sp
{
    7366:	466a      	mov	r2, sp
    7368:	2310      	movs	r3, #16
		s[i] = sbox[s[i]];
    736a:	7811      	ldrb	r1, [r2, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    736c:	3b01      	subs	r3, #1
		s[i] = sbox[s[i]];
    736e:	5c61      	ldrb	r1, [r4, r1]
    7370:	f802 1b01 	strb.w	r1, [r2], #1
	for (i = 0; i < (Nb * Nk); ++i) {
    7374:	d1f9      	bne.n	736a <tc_aes_encrypt+0x3a>
		sub_bytes(state);
		shift_rows(state);
    7376:	4668      	mov	r0, sp
    7378:	f018 fbb6 	bl	1fae8 <shift_rows>
	mult_row_column(t, s);
    737c:	4669      	mov	r1, sp
    737e:	a804      	add	r0, sp, #16
    7380:	f018 fbeb 	bl	1fb5a <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
    7384:	a901      	add	r1, sp, #4
    7386:	a805      	add	r0, sp, #20
    7388:	f018 fbe7 	bl	1fb5a <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
    738c:	a902      	add	r1, sp, #8
    738e:	a806      	add	r0, sp, #24
    7390:	f018 fbe3 	bl	1fb5a <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
    7394:	a903      	add	r1, sp, #12
    7396:	a807      	add	r0, sp, #28
    7398:	f018 fbdf 	bl	1fb5a <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
    739c:	2310      	movs	r3, #16
    739e:	4619      	mov	r1, r3
    73a0:	eb0d 0203 	add.w	r2, sp, r3
    73a4:	4668      	mov	r0, sp
    73a6:	f017 fc50 	bl	1ec4a <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
    73aa:	4639      	mov	r1, r7
    73ac:	4668      	mov	r0, sp
    73ae:	3710      	adds	r7, #16
    73b0:	f018 fb55 	bl	1fa5e <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
    73b4:	42af      	cmp	r7, r5
    73b6:	d1d5      	bne.n	7364 <tc_aes_encrypt+0x34>
    73b8:	2410      	movs	r4, #16
		s[i] = sbox[s[i]];
    73ba:	f898 3000 	ldrb.w	r3, [r8]
	for (i = 0; i < (Nb * Nk); ++i) {
    73be:	3c01      	subs	r4, #1
		s[i] = sbox[s[i]];
    73c0:	f819 3003 	ldrb.w	r3, [r9, r3]
    73c4:	f808 3b01 	strb.w	r3, [r8], #1
	for (i = 0; i < (Nb * Nk); ++i) {
    73c8:	d1f7      	bne.n	73ba <tc_aes_encrypt+0x8a>
	}

	sub_bytes(state);
	shift_rows(state);
    73ca:	4668      	mov	r0, sp
    73cc:	f018 fb8c 	bl	1fae8 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
    73d0:	4629      	mov	r1, r5
    73d2:	4668      	mov	r0, sp
    73d4:	f018 fb43 	bl	1fa5e <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
    73d8:	2310      	movs	r3, #16
    73da:	4619      	mov	r1, r3
    73dc:	466a      	mov	r2, sp
    73de:	4630      	mov	r0, r6
    73e0:	f017 fc33 	bl	1ec4a <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
    73e4:	4668      	mov	r0, sp
    73e6:	2210      	movs	r2, #16
    73e8:	4621      	mov	r1, r4
    73ea:	f017 fc3b 	bl	1ec64 <_set>

	return TC_CRYPTO_SUCCESS;
    73ee:	2001      	movs	r0, #1
}
    73f0:	b009      	add	sp, #36	; 0x24
    73f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
    73f6:	4608      	mov	r0, r1
    73f8:	e7fa      	b.n	73f0 <tc_aes_encrypt+0xc0>
    73fa:	4610      	mov	r0, r2
    73fc:	e7f8      	b.n	73f0 <tc_aes_encrypt+0xc0>
    73fe:	bf00      	nop
    7400:	00025129 	.word	0x00025129

00007404 <arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    7404:	4a09      	ldr	r2, [pc, #36]	; (742c <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    7406:	490a      	ldr	r1, [pc, #40]	; (7430 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    7408:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    740a:	6809      	ldr	r1, [r1, #0]
    740c:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    740e:	4909      	ldr	r1, [pc, #36]	; (7434 <arch_swap+0x30>)
	_current->arch.basepri = key;
    7410:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    7412:	684b      	ldr	r3, [r1, #4]
    7414:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    7418:	604b      	str	r3, [r1, #4]
    741a:	2300      	movs	r3, #0
    741c:	f383 8811 	msr	BASEPRI, r3
    7420:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    7424:	6893      	ldr	r3, [r2, #8]
}
    7426:	6f98      	ldr	r0, [r3, #120]	; 0x78
    7428:	4770      	bx	lr
    742a:	bf00      	nop
    742c:	2000963c 	.word	0x2000963c
    7430:	00024e2c 	.word	0x00024e2c
    7434:	e000ed00 	.word	0xe000ed00

00007438 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    7438:	490f      	ldr	r1, [pc, #60]	; (7478 <z_arm_pendsv+0x40>)
    ldr r2, [r1, #_kernel_offset_to_current]
    743a:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    743c:	f04f 0038 	mov.w	r0, #56	; 0x38
    add r0, r2
    7440:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    7442:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    7446:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    744a:	2020      	movs	r0, #32
    msr BASEPRI, r0
    744c:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    7450:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    7454:	4f09      	ldr	r7, [pc, #36]	; (747c <z_arm_pendsv+0x44>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    7456:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    745a:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    745c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    745e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    7460:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    7462:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    7464:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    7466:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    746a:	f102 0038 	add.w	r0, r2, #56	; 0x38
    ldmia r0, {v1-v8, ip}
    746e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    7472:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    7476:	4770      	bx	lr
    ldr r1, =_kernel
    7478:	2000963c 	.word	0x2000963c
    ldr v4, =_SCS_ICSR
    747c:	e000ed04 	.word	0xe000ed04

00007480 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    7480:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    7484:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    7486:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    748a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    748e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    7490:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    7494:	2902      	cmp	r1, #2
    beq _oops
    7496:	d0ff      	beq.n	7498 <_oops>

00007498 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    7498:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    749a:	f018 fca1 	bl	1fde0 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    749e:	bd01      	pop	{r0, pc}

000074a0 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    74a0:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    74a2:	2b00      	cmp	r3, #0
    74a4:	db08      	blt.n	74b8 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    74a6:	2201      	movs	r2, #1
    74a8:	f000 001f 	and.w	r0, r0, #31
    74ac:	fa02 f000 	lsl.w	r0, r2, r0
    74b0:	095b      	lsrs	r3, r3, #5
    74b2:	4a02      	ldr	r2, [pc, #8]	; (74bc <arch_irq_enable+0x1c>)
    74b4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    74b8:	4770      	bx	lr
    74ba:	bf00      	nop
    74bc:	e000e100 	.word	0xe000e100

000074c0 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    74c0:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    74c2:	2b00      	cmp	r3, #0
    74c4:	db0d      	blt.n	74e2 <arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    74c6:	2201      	movs	r2, #1
    74c8:	095b      	lsrs	r3, r3, #5
    74ca:	f000 001f 	and.w	r0, r0, #31
    74ce:	fa02 f000 	lsl.w	r0, r2, r0
    74d2:	3320      	adds	r3, #32
    74d4:	4a03      	ldr	r2, [pc, #12]	; (74e4 <arch_irq_disable+0x24>)
    74d6:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    74da:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    74de:	f3bf 8f6f 	isb	sy
}
    74e2:	4770      	bx	lr
    74e4:	e000e100 	.word	0xe000e100

000074e8 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    74e8:	4b05      	ldr	r3, [pc, #20]	; (7500 <arch_irq_is_enabled+0x18>)
    74ea:	0942      	lsrs	r2, r0, #5
    74ec:	f000 001f 	and.w	r0, r0, #31
    74f0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    74f4:	2301      	movs	r3, #1
    74f6:	fa03 f000 	lsl.w	r0, r3, r0
}
    74fa:	4010      	ands	r0, r2
    74fc:	4770      	bx	lr
    74fe:	bf00      	nop
    7500:	e000e100 	.word	0xe000e100

00007504 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    7504:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    7506:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    7508:	bfa8      	it	ge
    750a:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
    750e:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    7512:	bfb8      	it	lt
    7514:	4b06      	ldrlt	r3, [pc, #24]	; (7530 <z_arm_irq_priority_set+0x2c>)
    7516:	ea4f 1141 	mov.w	r1, r1, lsl #5
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    751a:	bfac      	ite	ge
    751c:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    7520:	f000 000f 	andlt.w	r0, r0, #15
    7524:	b2c9      	uxtb	r1, r1
    7526:	bfb4      	ite	lt
    7528:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    752a:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    752e:	4770      	bx	lr
    7530:	e000ed14 	.word	0xe000ed14

00007534 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
    7534:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    7536:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    7538:	4b04      	ldr	r3, [pc, #16]	; (754c <_arch_isr_direct_pm+0x18>)
    753a:	6a18      	ldr	r0, [r3, #32]
    753c:	b118      	cbz	r0, 7546 <_arch_isr_direct_pm+0x12>
		int32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    753e:	2200      	movs	r2, #0
    7540:	621a      	str	r2, [r3, #32]
		z_sys_power_save_idle_exit(idle_val);
    7542:	f01b faac 	bl	22a9e <z_sys_power_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    7546:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    7548:	bd08      	pop	{r3, pc}
    754a:	bf00      	nop
    754c:	2000963c 	.word	0x2000963c

00007550 <arch_new_thread>:
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     size_t stackSize, k_thread_entry_t pEntry,
		     void *parameter1, void *parameter2, void *parameter3,
		     int priority, unsigned int options)
{
    7550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7554:	460e      	mov	r6, r1
    7556:	4605      	mov	r5, r0
			- MPU_GUARD_ALIGN_AND_SIZE;
		stackSize -= MPU_GUARD_ALIGN_AND_SIZE_FLOAT
			- MPU_GUARD_ALIGN_AND_SIZE;
	}
#endif
	stackEnd = pStackMem + stackSize;
    7558:	188c      	adds	r4, r1, r2
	ARG_UNUSED(stack);
	ARG_UNUSED(stack_size);
	ARG_UNUSED(thread);
#endif
#ifdef CONFIG_INIT_STACKS
	memset(stack, 0xaa, stack_size);
    755a:	4630      	mov	r0, r6
    755c:	21aa      	movs	r1, #170	; 0xaa
{
    755e:	4617      	mov	r7, r2
    7560:	4698      	mov	r8, r3
    7562:	f018 fcb3 	bl	1fecc <memset>
	pInitCtx->basic.pc = (uint32_t)z_thread_entry;
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
    7566:	4b0d      	ldr	r3, [pc, #52]	; (759c <arch_new_thread+0x4c>)
	pInitCtx = (struct __esf *)(Z_STACK_PTR_ALIGN(stackEnd -
    7568:	f1a4 0220 	sub.w	r2, r4, #32
    756c:	f022 0207 	bic.w	r2, r2, #7
	pInitCtx->basic.pc &= 0xfffffffe;
    7570:	f023 0301 	bic.w	r3, r3, #1
#endif
#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (uintptr_t)stack;
	thread->stack_info.size = stack_size;
    7574:	e9c5 671a 	strd	r6, r7, [r5, #104]	; 0x68
    7578:	6193      	str	r3, [r2, #24]
#endif

	pInitCtx->basic.a1 = (uint32_t)pEntry;
	pInitCtx->basic.a2 = (uint32_t)parameter1;
    757a:	9b06      	ldr	r3, [sp, #24]
    757c:	6053      	str	r3, [r2, #4]
	pInitCtx->basic.a3 = (uint32_t)parameter2;
    757e:	9b07      	ldr	r3, [sp, #28]
    7580:	6093      	str	r3, [r2, #8]
	pInitCtx->basic.a4 = (uint32_t)parameter3;
    7582:	9b08      	ldr	r3, [sp, #32]
    7584:	60d3      	str	r3, [r2, #12]

#if defined(CONFIG_CPU_CORTEX_M)
	pInitCtx->basic.xpsr =
    7586:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    758a:	61d3      	str	r3, [r2, #28]
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)pInitCtx;

	thread->arch.basepri = 0;
    758c:	2300      	movs	r3, #0
	pInitCtx->basic.a1 = (uint32_t)pEntry;
    758e:	f8c2 8000 	str.w	r8, [r2]
	thread->callee_saved.psp = (uint32_t)pInitCtx;
    7592:	65aa      	str	r2, [r5, #88]	; 0x58
	thread->arch.basepri = 0;
    7594:	676b      	str	r3, [r5, #116]	; 0x74

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    7596:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    759a:	bf00      	nop
    759c:	0001df87 	.word	0x0001df87

000075a0 <arch_switch_to_main_thread>:

void arch_switch_to_main_thread(struct k_thread *main_thread,
				k_thread_stack_t *main_stack,
				size_t main_stack_size,
				k_thread_entry_t _main)
{
    75a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    75a2:	4606      	mov	r6, r0
    75a4:	460c      	mov	r4, r1
    75a6:	4617      	mov	r7, r2
    75a8:	461d      	mov	r5, r3
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    75aa:	f000 fb13 	bl	7bd4 <z_arm_configure_static_mpu_regions>
	start_of_main_stack =
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;

	start_of_main_stack = (char *)Z_STACK_PTR_ALIGN(start_of_main_stack);

	_current = main_thread;
    75ae:	4b09      	ldr	r3, [pc, #36]	; (75d4 <arch_switch_to_main_thread+0x34>)
	start_of_main_stack =
    75b0:	443c      	add	r4, r7
	start_of_main_stack = (char *)Z_STACK_PTR_ALIGN(start_of_main_stack);
    75b2:	f024 0407 	bic.w	r4, r4, #7
	_current = main_thread;
    75b6:	609e      	str	r6, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    75b8:	4628      	mov	r0, r5
    75ba:	f384 8809 	msr	PSP, r4
    75be:	2100      	movs	r1, #0
    75c0:	b663      	cpsie	if
    75c2:	f381 8811 	msr	BASEPRI, r1
    75c6:	f3bf 8f6f 	isb	sy
    75ca:	2200      	movs	r2, #0
    75cc:	2300      	movs	r3, #0
    75ce:	f016 fcda 	bl	1df86 <z_thread_entry>
	:
	: "r" (_main), "r" (start_of_main_stack)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    75d2:	bf00      	nop
    75d4:	2000963c 	.word	0x2000963c

000075d8 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    75d8:	4901      	ldr	r1, [pc, #4]	; (75e0 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    75da:	2210      	movs	r2, #16
	str	r2, [r1]
    75dc:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    75de:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    75e0:	e000ed10 	.word	0xe000ed10

000075e4 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    75e4:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    75e6:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    75e8:	f380 8811 	msr	BASEPRI, r0
	isb
    75ec:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    75f0:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    75f4:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    75f6:	b662      	cpsie	i
	isb
    75f8:	f3bf 8f6f 	isb	sy

	bx	lr
    75fc:	4770      	bx	lr
    75fe:	bf00      	nop

00007600 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    7600:	b573      	push	{r0, r1, r4, r5, r6, lr}
    7602:	4606      	mov	r6, r0

	if (esf != NULL) {
    7604:	460c      	mov	r4, r1
    7606:	b301      	cbz	r1, 764a <z_arm_fatal_error+0x4a>
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    7608:	4b13      	ldr	r3, [pc, #76]	; (7658 <z_arm_fatal_error+0x58>)
    760a:	4d14      	ldr	r5, [pc, #80]	; (765c <z_arm_fatal_error+0x5c>)
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    760c:	4814      	ldr	r0, [pc, #80]	; (7660 <z_arm_fatal_error+0x60>)
    760e:	1aed      	subs	r5, r5, r3
    7610:	08ed      	lsrs	r5, r5, #3
    7612:	01ad      	lsls	r5, r5, #6
    7614:	f045 0501 	orr.w	r5, r5, #1
    7618:	f8ad 5000 	strh.w	r5, [sp]
    761c:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
    7620:	6809      	ldr	r1, [r1, #0]
    7622:	f016 ff90 	bl	1e546 <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    7626:	f8ad 5000 	strh.w	r5, [sp]
    762a:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    762e:	68e1      	ldr	r1, [r4, #12]
    7630:	480c      	ldr	r0, [pc, #48]	; (7664 <z_arm_fatal_error+0x64>)
    7632:	f016 ff88 	bl	1e546 <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    7636:	69e1      	ldr	r1, [r4, #28]
    7638:	480b      	ldr	r0, [pc, #44]	; (7668 <z_arm_fatal_error+0x68>)
    763a:	462a      	mov	r2, r5
    763c:	f016 ff56 	bl	1e4ec <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    7640:	69a1      	ldr	r1, [r4, #24]
    7642:	480a      	ldr	r0, [pc, #40]	; (766c <z_arm_fatal_error+0x6c>)
    7644:	462a      	mov	r2, r5
    7646:	f016 ff51 	bl	1e4ec <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    764a:	4621      	mov	r1, r4
    764c:	4630      	mov	r0, r6
}
    764e:	b002      	add	sp, #8
    7650:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
    7654:	f015 ba5e 	b.w	1cb14 <z_fatal_error>
    7658:	000236f0 	.word	0x000236f0
    765c:	00023800 	.word	0x00023800
    7660:	00025229 	.word	0x00025229
    7664:	00025258 	.word	0x00025258
    7668:	00025287 	.word	0x00025287
    766c:	00025296 	.word	0x00025296

00007670 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    7670:	bf30      	wfi
    b z_SysNmiOnReset
    7672:	f7ff bffd 	b.w	7670 <z_SysNmiOnReset>
    7676:	bf00      	nop

00007678 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    7678:	4a0e      	ldr	r2, [pc, #56]	; (76b4 <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    767a:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    767c:	4b0e      	ldr	r3, [pc, #56]	; (76b8 <z_arm_prep_c+0x40>)
    767e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    7682:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    7684:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7688:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    768c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    7690:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    7694:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    7698:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    769c:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    76a0:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    76a4:	f015 fab2 	bl	1cc0c <z_bss_zero>
	z_data_copy();
    76a8:	f015 faba 	bl	1cc20 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    76ac:	f000 fa60 	bl	7b70 <z_arm_interrupt_init>
	z_cstart();
    76b0:	f015 faf4 	bl	1cc9c <z_cstart>
    76b4:	00000000 	.word	0x00000000
    76b8:	e000ed00 	.word	0xe000ed00

000076bc <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    76bc:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    76be:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    76c0:	4a0b      	ldr	r2, [pc, #44]	; (76f0 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    76c2:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    76c4:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    76c6:	bf1e      	ittt	ne
	movne	r1, #0
    76c8:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    76ca:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
    76cc:	f01b f9e7 	blne	22a9e <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    76d0:	b662      	cpsie	i
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    76d2:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    76d6:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    76da:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    76de:	4905      	ldr	r1, [pc, #20]	; (76f4 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    76e0:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    76e2:	c909      	ldmia	r1!, {r0, r3}
#ifdef CONFIG_EXECUTION_BENCHMARKING
	push {r0, r3}	/* Save r0 and r3 into stack */
	bl read_timer_end_of_isr
	pop {r0, r3}	/* Restore r0 and r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
    76e4:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    76e6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    76ea:	4903      	ldr	r1, [pc, #12]	; (76f8 <_isr_wrapper+0x3c>)
	bx r1
    76ec:	4708      	bx	r1
    76ee:	0000      	.short	0x0000
	ldr r2, =_kernel
    76f0:	2000963c 	.word	0x2000963c
	ldr r1, =_sw_isr_table
    76f4:	00023534 	.word	0x00023534
	ldr r1, =z_arm_int_exit
    76f8:	00007b55 	.word	0x00007b55

000076fc <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    76fc:	f018 fc0c 	bl	1ff18 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    7700:	2020      	movs	r0, #32
    msr BASEPRI, r0
    7702:	f380 8811 	msr	BASEPRI, r0
    /* board-specific watchdog initialization is necessary */
    bl z_arm_watchdog_init
#endif

#ifdef CONFIG_INIT_STACKS
    ldr r0, =z_interrupt_stacks
    7706:	480b      	ldr	r0, [pc, #44]	; (7734 <__start+0x38>)
    ldr r1, =0xaa
    7708:	f04f 01aa 	mov.w	r1, #170	; 0xaa
    ldr r2, =CONFIG_ISR_STACK_SIZE
    770c:	f44f 6200 	mov.w	r2, #2048	; 0x800
    bl memset
    7710:	f018 fbdc 	bl	1fecc <memset>

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    7714:	4807      	ldr	r0, [pc, #28]	; (7734 <__start+0x38>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    7716:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    771a:	1840      	adds	r0, r0, r1
    msr PSP, r0
    771c:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    7720:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    7724:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    7726:	4308      	orrs	r0, r1
    msr CONTROL, r0
    7728:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    772c:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    7730:	f7ff ffa2 	bl	7678 <z_arm_prep_c>
    ldr r0, =z_interrupt_stacks
    7734:	2000c9d0 	.word	0x2000c9d0

00007738 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    7738:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    773c:	f3ef 8109 	mrs	r1, PSP
	mov r2, lr /* EXC_RETURN */
    7740:	4672      	mov	r2, lr

	push {r0, lr}
    7742:	b501      	push	{r0, lr}

	bl z_arm_fault
    7744:	f000 f932 	bl	79ac <z_arm_fault>

	pop {r0, pc}
    7748:	bd01      	pop	{r0, pc}
    774a:	bf00      	nop

0000774c <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    774c:	b570      	push	{r4, r5, r6, lr}
    774e:	4b23      	ldr	r3, [pc, #140]	; (77dc <usage_fault.isra.0+0x90>)
    7750:	4c23      	ldr	r4, [pc, #140]	; (77e0 <usage_fault.isra.0+0x94>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    7752:	4d24      	ldr	r5, [pc, #144]	; (77e4 <usage_fault.isra.0+0x98>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    7754:	4824      	ldr	r0, [pc, #144]	; (77e8 <usage_fault.isra.0+0x9c>)
    7756:	1ae4      	subs	r4, r4, r3
    7758:	08e4      	lsrs	r4, r4, #3
    775a:	01a4      	lsls	r4, r4, #6
    775c:	f044 0601 	orr.w	r6, r4, #1
    7760:	4631      	mov	r1, r6
    7762:	f016 feb6 	bl	1e4d2 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    7766:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    7768:	0193      	lsls	r3, r2, #6
    776a:	d503      	bpl.n	7774 <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Division by zero");
    776c:	481f      	ldr	r0, [pc, #124]	; (77ec <usage_fault.isra.0+0xa0>)
    776e:	4631      	mov	r1, r6
    7770:	f016 feaf 	bl	1e4d2 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    7774:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7776:	01dd      	lsls	r5, r3, #7
    7778:	d504      	bpl.n	7784 <usage_fault.isra.0+0x38>
		PR_FAULT_INFO("  Unaligned memory access");
    777a:	481d      	ldr	r0, [pc, #116]	; (77f0 <usage_fault.isra.0+0xa4>)
    777c:	f044 0101 	orr.w	r1, r4, #1
    7780:	f016 fea7 	bl	1e4d2 <log_0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    7784:	4d17      	ldr	r5, [pc, #92]	; (77e4 <usage_fault.isra.0+0x98>)
    7786:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    7788:	0310      	lsls	r0, r2, #12
    778a:	d504      	bpl.n	7796 <usage_fault.isra.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
    778c:	4819      	ldr	r0, [pc, #100]	; (77f4 <usage_fault.isra.0+0xa8>)
    778e:	f044 0101 	orr.w	r1, r4, #1
    7792:	f016 fe9e 	bl	1e4d2 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    7796:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7798:	0359      	lsls	r1, r3, #13
    779a:	d504      	bpl.n	77a6 <usage_fault.isra.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    779c:	4816      	ldr	r0, [pc, #88]	; (77f8 <usage_fault.isra.0+0xac>)
    779e:	f044 0101 	orr.w	r1, r4, #1
    77a2:	f016 fe96 	bl	1e4d2 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    77a6:	4d0f      	ldr	r5, [pc, #60]	; (77e4 <usage_fault.isra.0+0x98>)
    77a8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    77aa:	0392      	lsls	r2, r2, #14
    77ac:	d504      	bpl.n	77b8 <usage_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    77ae:	4813      	ldr	r0, [pc, #76]	; (77fc <usage_fault.isra.0+0xb0>)
    77b0:	f044 0101 	orr.w	r1, r4, #1
    77b4:	f016 fe8d 	bl	1e4d2 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    77b8:	6aab      	ldr	r3, [r5, #40]	; 0x28
    77ba:	03db      	lsls	r3, r3, #15
    77bc:	d504      	bpl.n	77c8 <usage_fault.isra.0+0x7c>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    77be:	4810      	ldr	r0, [pc, #64]	; (7800 <usage_fault.isra.0+0xb4>)
    77c0:	f044 0101 	orr.w	r1, r4, #1
    77c4:	f016 fe85 	bl	1e4d2 <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    77c8:	4a06      	ldr	r2, [pc, #24]	; (77e4 <usage_fault.isra.0+0x98>)
    77ca:	6a93      	ldr	r3, [r2, #40]	; 0x28
    77cc:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    77d0:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    77d4:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    77d6:	2000      	movs	r0, #0
    77d8:	bd70      	pop	{r4, r5, r6, pc}
    77da:	bf00      	nop
    77dc:	000236f0 	.word	0x000236f0
    77e0:	00023800 	.word	0x00023800
    77e4:	e000ed00 	.word	0xe000ed00
    77e8:	000252c4 	.word	0x000252c4
    77ec:	000252dc 	.word	0x000252dc
    77f0:	000252ef 	.word	0x000252ef
    77f4:	00025309 	.word	0x00025309
    77f8:	00025327 	.word	0x00025327
    77fc:	0002534c 	.word	0x0002534c
    7800:	00025366 	.word	0x00025366

00007804 <mem_manage_fault.isra.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    7804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7808:	4b27      	ldr	r3, [pc, #156]	; (78a8 <mem_manage_fault.isra.0+0xa4>)
    780a:	4c28      	ldr	r4, [pc, #160]	; (78ac <mem_manage_fault.isra.0+0xa8>)
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    780c:	4d28      	ldr	r5, [pc, #160]	; (78b0 <mem_manage_fault.isra.0+0xac>)
    780e:	1ae4      	subs	r4, r4, r3
    7810:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
    7812:	01a4      	lsls	r4, r4, #6
    7814:	f044 0801 	orr.w	r8, r4, #1
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    7818:	4607      	mov	r7, r0
    781a:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    781c:	4825      	ldr	r0, [pc, #148]	; (78b4 <mem_manage_fault.isra.0+0xb0>)
    781e:	4641      	mov	r1, r8
    7820:	f016 fe57 	bl	1e4d2 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    7824:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    7826:	06d1      	lsls	r1, r2, #27
    7828:	d503      	bpl.n	7832 <mem_manage_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    782a:	4823      	ldr	r0, [pc, #140]	; (78b8 <mem_manage_fault.isra.0+0xb4>)
    782c:	4641      	mov	r1, r8
    782e:	f016 fe50 	bl	1e4d2 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    7832:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7834:	071a      	lsls	r2, r3, #28
    7836:	d504      	bpl.n	7842 <mem_manage_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
    7838:	4820      	ldr	r0, [pc, #128]	; (78bc <mem_manage_fault.isra.0+0xb8>)
    783a:	f044 0101 	orr.w	r1, r4, #1
    783e:	f016 fe48 	bl	1e4d2 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    7842:	4d1b      	ldr	r5, [pc, #108]	; (78b0 <mem_manage_fault.isra.0+0xac>)
    7844:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7846:	079b      	lsls	r3, r3, #30
    7848:	d512      	bpl.n	7870 <mem_manage_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Data Access Violation");
    784a:	f044 0801 	orr.w	r8, r4, #1
    784e:	481c      	ldr	r0, [pc, #112]	; (78c0 <mem_manage_fault.isra.0+0xbc>)
    7850:	4641      	mov	r1, r8
    7852:	f016 fe3e 	bl	1e4d2 <log_0>
		mmfar = SCB->MMFAR;
    7856:	6b69      	ldr	r1, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    7858:	6aab      	ldr	r3, [r5, #40]	; 0x28
    785a:	0618      	lsls	r0, r3, #24
    785c:	d508      	bpl.n	7870 <mem_manage_fault.isra.0+0x6c>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    785e:	4819      	ldr	r0, [pc, #100]	; (78c4 <mem_manage_fault.isra.0+0xc0>)
    7860:	4642      	mov	r2, r8
    7862:	f016 fe43 	bl	1e4ec <log_1>
			if (from_hard_fault) {
    7866:	b11f      	cbz	r7, 7870 <mem_manage_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    7868:	6aab      	ldr	r3, [r5, #40]	; 0x28
    786a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    786e:	62ab      	str	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    7870:	4d0f      	ldr	r5, [pc, #60]	; (78b0 <mem_manage_fault.isra.0+0xac>)
    7872:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    7874:	07d2      	lsls	r2, r2, #31
    7876:	d504      	bpl.n	7882 <mem_manage_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Instruction Access Violation");
    7878:	4813      	ldr	r0, [pc, #76]	; (78c8 <mem_manage_fault.isra.0+0xc4>)
    787a:	f044 0101 	orr.w	r1, r4, #1
    787e:	f016 fe28 	bl	1e4d2 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    7882:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7884:	069b      	lsls	r3, r3, #26
    7886:	d504      	bpl.n	7892 <mem_manage_fault.isra.0+0x8e>
		PR_FAULT_INFO(
    7888:	4810      	ldr	r0, [pc, #64]	; (78cc <mem_manage_fault.isra.0+0xc8>)
    788a:	f044 0101 	orr.w	r1, r4, #1
    788e:	f016 fe20 	bl	1e4d2 <log_0>
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    7892:	4b07      	ldr	r3, [pc, #28]	; (78b0 <mem_manage_fault.isra.0+0xac>)
    7894:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    7896:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    7898:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    789a:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    789e:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    78a0:	7030      	strb	r0, [r6, #0]
}
    78a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    78a6:	bf00      	nop
    78a8:	000236f0 	.word	0x000236f0
    78ac:	00023800 	.word	0x00023800
    78b0:	e000ed00 	.word	0xe000ed00
    78b4:	00025391 	.word	0x00025391
    78b8:	000253a7 	.word	0x000253a7
    78bc:	000253da 	.word	0x000253da
    78c0:	000253ed 	.word	0x000253ed
    78c4:	00025405 	.word	0x00025405
    78c8:	0002541b 	.word	0x0002541b
    78cc:	0002543a 	.word	0x0002543a

000078d0 <bus_fault.isra.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    78d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    78d4:	4b2a      	ldr	r3, [pc, #168]	; (7980 <bus_fault.isra.0+0xb0>)
    78d6:	4c2b      	ldr	r4, [pc, #172]	; (7984 <bus_fault.isra.0+0xb4>)
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    78d8:	4d2b      	ldr	r5, [pc, #172]	; (7988 <bus_fault.isra.0+0xb8>)
    78da:	1ae4      	subs	r4, r4, r3
    78dc:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
    78de:	01a4      	lsls	r4, r4, #6
    78e0:	f044 0801 	orr.w	r8, r4, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    78e4:	4607      	mov	r7, r0
    78e6:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    78e8:	4828      	ldr	r0, [pc, #160]	; (798c <bus_fault.isra.0+0xbc>)
    78ea:	4641      	mov	r1, r8
    78ec:	f016 fdf1 	bl	1e4d2 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    78f0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    78f2:	04d1      	lsls	r1, r2, #19
    78f4:	d503      	bpl.n	78fe <bus_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error");
    78f6:	4826      	ldr	r0, [pc, #152]	; (7990 <bus_fault.isra.0+0xc0>)
    78f8:	4641      	mov	r1, r8
    78fa:	f016 fdea 	bl	1e4d2 <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    78fe:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7900:	051a      	lsls	r2, r3, #20
    7902:	d504      	bpl.n	790e <bus_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
    7904:	4823      	ldr	r0, [pc, #140]	; (7994 <bus_fault.isra.0+0xc4>)
    7906:	f044 0101 	orr.w	r1, r4, #1
    790a:	f016 fde2 	bl	1e4d2 <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    790e:	4d1e      	ldr	r5, [pc, #120]	; (7988 <bus_fault.isra.0+0xb8>)
    7910:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7912:	059b      	lsls	r3, r3, #22
    7914:	d512      	bpl.n	793c <bus_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Precise data bus error");
    7916:	f044 0801 	orr.w	r8, r4, #1
    791a:	481f      	ldr	r0, [pc, #124]	; (7998 <bus_fault.isra.0+0xc8>)
    791c:	4641      	mov	r1, r8
    791e:	f016 fdd8 	bl	1e4d2 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
    7922:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    7924:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7926:	0418      	lsls	r0, r3, #16
    7928:	d508      	bpl.n	793c <bus_fault.isra.0+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    792a:	481c      	ldr	r0, [pc, #112]	; (799c <bus_fault.isra.0+0xcc>)
    792c:	4642      	mov	r2, r8
    792e:	f016 fddd 	bl	1e4ec <log_1>
			if (from_hard_fault) {
    7932:	b11f      	cbz	r7, 793c <bus_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    7934:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7936:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    793a:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    793c:	4d12      	ldr	r5, [pc, #72]	; (7988 <bus_fault.isra.0+0xb8>)
    793e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7940:	0559      	lsls	r1, r3, #21
    7942:	d504      	bpl.n	794e <bus_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Imprecise data bus error");
    7944:	4816      	ldr	r0, [pc, #88]	; (79a0 <bus_fault.isra.0+0xd0>)
    7946:	f044 0101 	orr.w	r1, r4, #1
    794a:	f016 fdc2 	bl	1e4d2 <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    794e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7950:	05da      	lsls	r2, r3, #23
    7952:	d50d      	bpl.n	7970 <bus_fault.isra.0+0xa0>
		PR_FAULT_INFO("  Instruction bus error");
    7954:	4813      	ldr	r0, [pc, #76]	; (79a4 <bus_fault.isra.0+0xd4>)
    7956:	f044 0101 	orr.w	r1, r4, #1
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    795a:	f016 fdba 	bl	1e4d2 <log_0>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    795e:	4a0a      	ldr	r2, [pc, #40]	; (7988 <bus_fault.isra.0+0xb8>)
    7960:	6a93      	ldr	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    7962:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    7964:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    7968:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    796a:	7030      	strb	r0, [r6, #0]
}
    796c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    7970:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7972:	049b      	lsls	r3, r3, #18
    7974:	d5f3      	bpl.n	795e <bus_fault.isra.0+0x8e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    7976:	480c      	ldr	r0, [pc, #48]	; (79a8 <bus_fault.isra.0+0xd8>)
    7978:	f044 0101 	orr.w	r1, r4, #1
    797c:	e7ed      	b.n	795a <bus_fault.isra.0+0x8a>
    797e:	bf00      	nop
    7980:	000236f0 	.word	0x000236f0
    7984:	00023800 	.word	0x00023800
    7988:	e000ed00 	.word	0xe000ed00
    798c:	00025469 	.word	0x00025469
    7990:	0002547f 	.word	0x0002547f
    7994:	000253da 	.word	0x000253da
    7998:	00025490 	.word	0x00025490
    799c:	000254a9 	.word	0x000254a9
    79a0:	000254be 	.word	0x000254be
    79a4:	000254d9 	.word	0x000254d9
    79a8:	0002543a 	.word	0x0002543a

000079ac <z_arm_fault>:
 * @param psp PSP value immediately after the exception occurred
 * @param exc_return EXC_RETURN value present in LR after exception entry.
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return)
{
    79ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    79b0:	4b56      	ldr	r3, [pc, #344]	; (7b0c <z_arm_fault+0x160>)
    79b2:	685e      	ldr	r6, [r3, #4]
{
    79b4:	b08a      	sub	sp, #40	; 0x28
    79b6:	460f      	mov	r7, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    79b8:	f3c6 0408 	ubfx	r4, r6, #0, #9
    79bc:	2500      	movs	r5, #0
    79be:	f385 8811 	msr	BASEPRI, r5
    79c2:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    79c6:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    79ca:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    79ce:	d10d      	bne.n	79ec <z_arm_fault+0x40>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    79d0:	f002 030c 	and.w	r3, r2, #12
    79d4:	2b08      	cmp	r3, #8
    79d6:	d10b      	bne.n	79f0 <z_arm_fault+0x44>
    79d8:	494d      	ldr	r1, [pc, #308]	; (7b10 <z_arm_fault+0x164>)
    79da:	4b4e      	ldr	r3, [pc, #312]	; (7b14 <z_arm_fault+0x168>)
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    79dc:	484e      	ldr	r0, [pc, #312]	; (7b18 <z_arm_fault+0x16c>)
    79de:	1ac9      	subs	r1, r1, r3
    79e0:	08c9      	lsrs	r1, r1, #3
    79e2:	0189      	lsls	r1, r1, #6
    79e4:	f041 0101 	orr.w	r1, r1, #1
    79e8:	f016 fd73 	bl	1e4d2 <log_0>
		return NULL;
    79ec:	462f      	mov	r7, r5
    79ee:	e003      	b.n	79f8 <z_arm_fault+0x4c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    79f0:	0712      	lsls	r2, r2, #28
    79f2:	d401      	bmi.n	79f8 <z_arm_fault+0x4c>
			ptr_esf = (z_arch_esf_t *)msp;
    79f4:	4607      	mov	r7, r0
			*nested_exc = true;
    79f6:	2501      	movs	r5, #1
	*recoverable = false;
    79f8:	2300      	movs	r3, #0
    79fa:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    79fe:	1ee3      	subs	r3, r4, #3
    7a00:	2b09      	cmp	r3, #9
    7a02:	d86a      	bhi.n	7ada <z_arm_fault+0x12e>
    7a04:	e8df f003 	tbb	[pc, r3]
    7a08:	3c5c5805 	.word	0x3c5c5805
    7a0c:	69696969 	.word	0x69696969
    7a10:	6069      	.short	0x6069
    7a12:	4b40      	ldr	r3, [pc, #256]	; (7b14 <z_arm_fault+0x168>)
    7a14:	4e3e      	ldr	r6, [pc, #248]	; (7b10 <z_arm_fault+0x164>)
	PR_FAULT_INFO("***** HARD FAULT *****");
    7a16:	4841      	ldr	r0, [pc, #260]	; (7b1c <z_arm_fault+0x170>)
    7a18:	1af6      	subs	r6, r6, r3
    7a1a:	08f6      	lsrs	r6, r6, #3
    7a1c:	01b6      	lsls	r6, r6, #6
    7a1e:	f046 0601 	orr.w	r6, r6, #1
    7a22:	4631      	mov	r1, r6
    7a24:	f016 fd55 	bl	1e4d2 <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    7a28:	4b38      	ldr	r3, [pc, #224]	; (7b0c <z_arm_fault+0x160>)
    7a2a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
	*recoverable = false;
    7a2c:	f04f 0800 	mov.w	r8, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    7a30:	f014 0402 	ands.w	r4, r4, #2
	*recoverable = false;
    7a34:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    7a38:	d005      	beq.n	7a46 <z_arm_fault+0x9a>
		PR_EXC("  Bus fault on vector table read");
    7a3a:	4839      	ldr	r0, [pc, #228]	; (7b20 <z_arm_fault+0x174>)
    7a3c:	4631      	mov	r1, r6
	PR_FAULT_INFO(
    7a3e:	f016 fd48 	bl	1e4d2 <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    7a42:	2400      	movs	r4, #0
}
    7a44:	e01f      	b.n	7a86 <z_arm_fault+0xda>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    7a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7a48:	005b      	lsls	r3, r3, #1
    7a4a:	d51c      	bpl.n	7a86 <z_arm_fault+0xda>
		PR_EXC("  Fault escalation (see below)");
    7a4c:	4835      	ldr	r0, [pc, #212]	; (7b24 <z_arm_fault+0x178>)
    7a4e:	4631      	mov	r1, r6
    7a50:	f016 fd3f 	bl	1e4d2 <log_0>
		if (SCB_MMFSR != 0) {
    7a54:	4b34      	ldr	r3, [pc, #208]	; (7b28 <z_arm_fault+0x17c>)
    7a56:	781b      	ldrb	r3, [r3, #0]
    7a58:	b12b      	cbz	r3, 7a66 <z_arm_fault+0xba>
			reason = mem_manage_fault(esf, 1, recoverable);
    7a5a:	f10d 0107 	add.w	r1, sp, #7
    7a5e:	2001      	movs	r0, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    7a60:	f7ff fed0 	bl	7804 <mem_manage_fault.isra.0>
    7a64:	e00e      	b.n	7a84 <z_arm_fault+0xd8>
		} else if (SCB_BFSR != 0) {
    7a66:	4b31      	ldr	r3, [pc, #196]	; (7b2c <z_arm_fault+0x180>)
    7a68:	781b      	ldrb	r3, [r3, #0]
    7a6a:	b12b      	cbz	r3, 7a78 <z_arm_fault+0xcc>
			reason = bus_fault(esf, 1, recoverable);
    7a6c:	f10d 0107 	add.w	r1, sp, #7
    7a70:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    7a72:	f7ff ff2d 	bl	78d0 <bus_fault.isra.0>
    7a76:	e005      	b.n	7a84 <z_arm_fault+0xd8>
		} else if (SCB_UFSR != 0) {
    7a78:	4b2d      	ldr	r3, [pc, #180]	; (7b30 <z_arm_fault+0x184>)
    7a7a:	881b      	ldrh	r3, [r3, #0]
    7a7c:	b29b      	uxth	r3, r3
    7a7e:	b113      	cbz	r3, 7a86 <z_arm_fault+0xda>
			reason = usage_fault(esf);
    7a80:	f7ff fe64 	bl	774c <usage_fault.isra.0>
    7a84:	4604      	mov	r4, r0
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
		"ESF could not be retrieved successfully. Shall never occur.");

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    7a86:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7a8a:	b993      	cbnz	r3, 7ab2 <z_arm_fault+0x106>
		return;
	}

	/* Copy ESF */
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    7a8c:	2220      	movs	r2, #32
    7a8e:	4639      	mov	r1, r7
    7a90:	a802      	add	r0, sp, #8
    7a92:	f018 f9f0 	bl	1fe76 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    7a96:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7a98:	b39d      	cbz	r5, 7b02 <z_arm_fault+0x156>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    7a9a:	f3c3 0208 	ubfx	r2, r3, #0, #9
    7a9e:	b922      	cbnz	r2, 7aaa <z_arm_fault+0xfe>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    7aa0:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    7aa4:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    7aa8:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    7aaa:	a902      	add	r1, sp, #8
    7aac:	4620      	mov	r0, r4
    7aae:	f7ff fda7 	bl	7600 <z_arm_fatal_error>
}
    7ab2:	b00a      	add	sp, #40	; 0x28
    7ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    7ab8:	f10d 0107 	add.w	r1, sp, #7
    7abc:	2000      	movs	r0, #0
    7abe:	e7cf      	b.n	7a60 <z_arm_fault+0xb4>
		reason = bus_fault(esf, 0, recoverable);
    7ac0:	f10d 0107 	add.w	r1, sp, #7
    7ac4:	2000      	movs	r0, #0
    7ac6:	e7d4      	b.n	7a72 <z_arm_fault+0xc6>
    7ac8:	4911      	ldr	r1, [pc, #68]	; (7b10 <z_arm_fault+0x164>)
    7aca:	4b12      	ldr	r3, [pc, #72]	; (7b14 <z_arm_fault+0x168>)
	PR_FAULT_INFO(
    7acc:	4819      	ldr	r0, [pc, #100]	; (7b34 <z_arm_fault+0x188>)
    7ace:	1ac9      	subs	r1, r1, r3
    7ad0:	08c9      	lsrs	r1, r1, #3
    7ad2:	0189      	lsls	r1, r1, #6
    7ad4:	f041 0101 	orr.w	r1, r1, #1
    7ad8:	e7b1      	b.n	7a3e <z_arm_fault+0x92>
    7ada:	4a0e      	ldr	r2, [pc, #56]	; (7b14 <z_arm_fault+0x168>)
    7adc:	4b0c      	ldr	r3, [pc, #48]	; (7b10 <z_arm_fault+0x164>)
	PR_FAULT_INFO("***** %s %d) *****",
    7ade:	4816      	ldr	r0, [pc, #88]	; (7b38 <z_arm_fault+0x18c>)
    7ae0:	4916      	ldr	r1, [pc, #88]	; (7b3c <z_arm_fault+0x190>)
    7ae2:	1a9b      	subs	r3, r3, r2
    7ae4:	08db      	lsrs	r3, r3, #3
    7ae6:	f416 7ff8 	tst.w	r6, #496	; 0x1f0
    7aea:	ea4f 1383 	mov.w	r3, r3, lsl #6
    7aee:	bf18      	it	ne
    7af0:	4601      	movne	r1, r0
    7af2:	f043 0301 	orr.w	r3, r3, #1
    7af6:	4812      	ldr	r0, [pc, #72]	; (7b40 <z_arm_fault+0x194>)
    7af8:	f1a4 0210 	sub.w	r2, r4, #16
    7afc:	f016 fd0a 	bl	1e514 <log_2>
    7b00:	e79f      	b.n	7a42 <z_arm_fault+0x96>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    7b02:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    7b06:	f023 0301 	bic.w	r3, r3, #1
    7b0a:	e7cd      	b.n	7aa8 <z_arm_fault+0xfc>
    7b0c:	e000ed00 	.word	0xe000ed00
    7b10:	00023800 	.word	0x00023800
    7b14:	000236f0 	.word	0x000236f0
    7b18:	000254f1 	.word	0x000254f1
    7b1c:	0002551c 	.word	0x0002551c
    7b20:	00025533 	.word	0x00025533
    7b24:	00025554 	.word	0x00025554
    7b28:	e000ed28 	.word	0xe000ed28
    7b2c:	e000ed29 	.word	0xe000ed29
    7b30:	e000ed2a 	.word	0xe000ed2a
    7b34:	00025573 	.word	0x00025573
    7b38:	000255be 	.word	0x000255be
    7b3c:	000255a9 	.word	0x000255a9
    7b40:	000255d7 	.word	0x000255d7

00007b44 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    7b44:	4a02      	ldr	r2, [pc, #8]	; (7b50 <z_arm_fault_init+0xc>)
    7b46:	6953      	ldr	r3, [r2, #20]
    7b48:	f043 0310 	orr.w	r3, r3, #16
    7b4c:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    7b4e:	4770      	bx	lr
    7b50:	e000ed00 	.word	0xe000ed00

00007b54 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    7b54:	4b04      	ldr	r3, [pc, #16]	; (7b68 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    7b56:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    7b58:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
    7b5a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    7b5c:	d003      	beq.n	7b66 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    7b5e:	4903      	ldr	r1, [pc, #12]	; (7b6c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    7b60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    7b64:	600a      	str	r2, [r1, #0]

00007b66 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    7b66:	4770      	bx	lr
	ldr r3, =_kernel
    7b68:	2000963c 	.word	0x2000963c
	ldr r1, =_SCS_ICSR
    7b6c:	e000ed04 	.word	0xe000ed04

00007b70 <z_arm_interrupt_init>:
    7b70:	4804      	ldr	r0, [pc, #16]	; (7b84 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    7b72:	2300      	movs	r3, #0
    7b74:	2120      	movs	r1, #32
    7b76:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    7b78:	3301      	adds	r3, #1
    7b7a:	2b30      	cmp	r3, #48	; 0x30
    7b7c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    7b80:	d1f9      	bne.n	7b76 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    7b82:	4770      	bx	lr
    7b84:	e000e100 	.word	0xe000e100

00007b88 <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
    7b88:	b538      	push	{r3, r4, r5, lr}
    7b8a:	4604      	mov	r4, r0
	__asm__ volatile(
    7b8c:	f04f 0320 	mov.w	r3, #32
    7b90:	f3ef 8511 	mrs	r5, BASEPRI
    7b94:	f383 8811 	msr	BASEPRI, r3
    7b98:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	z_thread_single_abort(thread);
    7b9c:	f015 fc4a 	bl	1d434 <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
    7ba0:	4b0a      	ldr	r3, [pc, #40]	; (7bcc <z_impl_k_thread_abort+0x44>)
    7ba2:	689b      	ldr	r3, [r3, #8]
    7ba4:	42a3      	cmp	r3, r4
    7ba6:	d10b      	bne.n	7bc0 <z_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    7ba8:	4b09      	ldr	r3, [pc, #36]	; (7bd0 <z_impl_k_thread_abort+0x48>)
    7baa:	685a      	ldr	r2, [r3, #4]
    7bac:	f3c2 0208 	ubfx	r2, r2, #0, #9
    7bb0:	b912      	cbnz	r2, 7bb8 <z_impl_k_thread_abort+0x30>
	int ret;
	z_check_stack_sentinel();
#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = arch_swap(key);
    7bb2:	4628      	mov	r0, r5
    7bb4:	f7ff fc26 	bl	7404 <arch_swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    7bb8:	685a      	ldr	r2, [r3, #4]
    7bba:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    7bbe:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
    7bc0:	4628      	mov	r0, r5
}
    7bc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
    7bc6:	f01b b924 	b.w	22e12 <z_reschedule_irqlock>
    7bca:	bf00      	nop
    7bcc:	2000963c 	.word	0x2000963c
    7bd0:	e000ed00 	.word	0xe000ed00

00007bd4 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    7bd4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		.size = (uint32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
    7bd6:	4b08      	ldr	r3, [pc, #32]	; (7bf8 <z_arm_configure_static_mpu_regions+0x24>)
    7bd8:	9301      	str	r3, [sp, #4]
    7bda:	4b08      	ldr	r3, [pc, #32]	; (7bfc <z_arm_configure_static_mpu_regions+0x28>)
    7bdc:	9302      	str	r3, [sp, #8]
    7bde:	4b08      	ldr	r3, [pc, #32]	; (7c00 <z_arm_configure_static_mpu_regions+0x2c>)
    7be0:	9303      	str	r3, [sp, #12]

	/* Define a constant array of k_mem_partition objects
	 * to hold the configuration of the respective static
	 * MPU regions.
	 */
	const struct k_mem_partition *static_regions[] = {
    7be2:	ab01      	add	r3, sp, #4
    7be4:	9300      	str	r3, [sp, #0]
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    7be6:	4a07      	ldr	r2, [pc, #28]	; (7c04 <z_arm_configure_static_mpu_regions+0x30>)
    7be8:	4b07      	ldr	r3, [pc, #28]	; (7c08 <z_arm_configure_static_mpu_regions+0x34>)
    7bea:	2101      	movs	r1, #1
    7bec:	4668      	mov	r0, sp
    7bee:	f000 f8af 	bl	7d50 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    7bf2:	b005      	add	sp, #20
    7bf4:	f85d fb04 	ldr.w	pc, [sp], #4
    7bf8:	20000000 	.word	0x20000000
    7bfc:	00000000 	.word	0x00000000
    7c00:	060b0000 	.word	0x060b0000
    7c04:	20000000 	.word	0x20000000
    7c08:	20040000 	.word	0x20040000

00007c0c <mpu_configure_regions>:
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
    7c0c:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 7ccc <mpu_configure_regions+0xc0>
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct k_mem_partition
	*regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    7c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7c12:	4606      	mov	r6, r0
    7c14:	460f      	mov	r7, r1
	int i;
	int reg_index = start_reg_index;
    7c16:	4610      	mov	r0, r2

	for (i = 0; i < regions_num; i++) {
    7c18:	2100      	movs	r1, #0
    7c1a:	42b9      	cmp	r1, r7
    7c1c:	da1b      	bge.n	7c56 <mpu_configure_regions+0x4a>
		if (regions[i]->size == 0U) {
    7c1e:	f856 e021 	ldr.w	lr, [r6, r1, lsl #2]
    7c22:	f8de 4004 	ldr.w	r4, [lr, #4]
    7c26:	2c00      	cmp	r4, #0
    7c28:	d046      	beq.n	7cb8 <mpu_configure_regions+0xac>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    7c2a:	b1ab      	cbz	r3, 7c58 <mpu_configure_regions+0x4c>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1)) == 0U)
    7c2c:	1e65      	subs	r5, r4, #1
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    7c2e:	422c      	tst	r4, r5
    7c30:	d105      	bne.n	7c3e <mpu_configure_regions+0x32>
		&&
    7c32:	2c1f      	cmp	r4, #31
    7c34:	d903      	bls.n	7c3e <mpu_configure_regions+0x32>
		((part->start & (part->size - 1)) == 0U);
    7c36:	f8de 2000 	ldr.w	r2, [lr]
		&&
    7c3a:	4215      	tst	r5, r2
    7c3c:	d00c      	beq.n	7c58 <mpu_configure_regions+0x4c>
    7c3e:	4a1f      	ldr	r2, [pc, #124]	; (7cbc <mpu_configure_regions+0xb0>)
    7c40:	4b1f      	ldr	r3, [pc, #124]	; (7cc0 <mpu_configure_regions+0xb4>)
				(!mpu_partition_is_valid(regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    7c42:	4820      	ldr	r0, [pc, #128]	; (7cc4 <mpu_configure_regions+0xb8>)
    7c44:	1ad2      	subs	r2, r2, r3
    7c46:	08d2      	lsrs	r2, r2, #3
    7c48:	0192      	lsls	r2, r2, #6
    7c4a:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    7c4e:	f016 fc4d 	bl	1e4ec <log_1>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, regions[i]);
    7c52:	f06f 0015 	mvn.w	r0, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    7c56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    7c58:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, regions[i]);
    7c5a:	b2c5      	uxtb	r5, r0
	region_conf.base = new_region->start;
    7c5c:	f8de 2000 	ldr.w	r2, [lr]
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
    7c60:	f8de 0008 	ldr.w	r0, [lr, #8]
    7c64:	d916      	bls.n	7c94 <mpu_configure_regions+0x88>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
    7c66:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    7c6a:	d815      	bhi.n	7c98 <mpu_configure_regions+0x8c>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    7c6c:	3c01      	subs	r4, #1
    7c6e:	fab4 f484 	clz	r4, r4
    7c72:	f1c4 041f 	rsb	r4, r4, #31
    7c76:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1)) {
    7c78:	2d07      	cmp	r5, #7
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    7c7a:	ea44 0400 	orr.w	r4, r4, r0
    7c7e:	d90d      	bls.n	7c9c <mpu_configure_regions+0x90>
    7c80:	4a0e      	ldr	r2, [pc, #56]	; (7cbc <mpu_configure_regions+0xb0>)
    7c82:	4b0f      	ldr	r3, [pc, #60]	; (7cc0 <mpu_configure_regions+0xb4>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    7c84:	4810      	ldr	r0, [pc, #64]	; (7cc8 <mpu_configure_regions+0xbc>)
    7c86:	1ad2      	subs	r2, r2, r3
    7c88:	08d2      	lsrs	r2, r2, #3
    7c8a:	0192      	lsls	r2, r2, #6
    7c8c:	f042 0201 	orr.w	r2, r2, #1
    7c90:	4629      	mov	r1, r5
    7c92:	e7dc      	b.n	7c4e <mpu_configure_regions+0x42>
		return REGION_32B;
    7c94:	2408      	movs	r4, #8
    7c96:	e7ef      	b.n	7c78 <mpu_configure_regions+0x6c>
		return REGION_4G;
    7c98:	243e      	movs	r4, #62	; 0x3e
    7c9a:	e7ed      	b.n	7c78 <mpu_configure_regions+0x6c>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    7c9c:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
    7ca0:	432a      	orrs	r2, r5
    7ca2:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    7ca6:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
    7caa:	f8cc 5008 	str.w	r5, [ip, #8]
		reg_index++;
    7cae:	1c68      	adds	r0, r5, #1
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    7cb0:	f8cc 200c 	str.w	r2, [ip, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    7cb4:	f8cc 4010 	str.w	r4, [ip, #16]
	for (i = 0; i < regions_num; i++) {
    7cb8:	3101      	adds	r1, #1
    7cba:	e7ae      	b.n	7c1a <mpu_configure_regions+0xe>
    7cbc:	000237f0 	.word	0x000237f0
    7cc0:	000236f0 	.word	0x000236f0
    7cc4:	000255ee 	.word	0x000255ee
    7cc8:	00025611 	.word	0x00025611
    7ccc:	e000ed90 	.word	0xe000ed90

00007cd0 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    7cd0:	4b03      	ldr	r3, [pc, #12]	; (7ce0 <arm_core_mpu_enable+0x10>)
    7cd2:	2205      	movs	r2, #5
    7cd4:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    7cd6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7cda:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    7cde:	4770      	bx	lr
    7ce0:	e000ed90 	.word	0xe000ed90

00007ce4 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    7ce4:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    7ce8:	4b01      	ldr	r3, [pc, #4]	; (7cf0 <arm_core_mpu_disable+0xc>)
    7cea:	2200      	movs	r2, #0
    7cec:	605a      	str	r2, [r3, #4]
}
    7cee:	4770      	bx	lr
    7cf0:	e000ed90 	.word	0xe000ed90

00007cf4 <arm_mpu_init>:
 */
static int arm_mpu_init(struct device *arg)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    7cf4:	4913      	ldr	r1, [pc, #76]	; (7d44 <arm_mpu_init+0x50>)
    7cf6:	6808      	ldr	r0, [r1, #0]
    7cf8:	2808      	cmp	r0, #8
{
    7cfa:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    7cfc:	d81e      	bhi.n	7d3c <arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    7cfe:	f7ff fff1 	bl	7ce4 <arm_core_mpu_disable>
	MPU->RNR = index;
    7d02:	4c11      	ldr	r4, [pc, #68]	; (7d48 <arm_mpu_init+0x54>)
    7d04:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    7d06:	2200      	movs	r2, #0
    7d08:	4290      	cmp	r0, r2
    7d0a:	f101 010c 	add.w	r1, r1, #12
    7d0e:	d105      	bne.n	7d1c <arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    7d10:	4b0e      	ldr	r3, [pc, #56]	; (7d4c <arm_mpu_init+0x58>)
    7d12:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    7d14:	f7ff ffdc 	bl	7cd0 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
    7d18:	2000      	movs	r0, #0
}
    7d1a:	bd10      	pop	{r4, pc}
    7d1c:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    7d1e:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    7d22:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    7d26:	4313      	orrs	r3, r2
    7d28:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    7d2c:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    7d2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
    7d32:	f043 0301 	orr.w	r3, r3, #1
    7d36:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    7d38:	3201      	adds	r2, #1
    7d3a:	e7e5      	b.n	7d08 <arm_mpu_init+0x14>
		return -1;
    7d3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    7d40:	e7eb      	b.n	7d1a <arm_mpu_init+0x26>
    7d42:	bf00      	nop
    7d44:	00023aac 	.word	0x00023aac
    7d48:	e000ed90 	.word	0xe000ed90
    7d4c:	20009ae8 	.word	0x20009ae8

00007d50 <arm_core_mpu_configure_static_mpu_regions>:
{
    7d50:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    7d52:	4c03      	ldr	r4, [pc, #12]	; (7d60 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    7d54:	2301      	movs	r3, #1
    7d56:	7822      	ldrb	r2, [r4, #0]
    7d58:	f7ff ff58 	bl	7c0c <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    7d5c:	7020      	strb	r0, [r4, #0]
}
    7d5e:	bd10      	pop	{r4, pc}
    7d60:	20009ae8 	.word	0x20009ae8

00007d64 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    7d64:	4b01      	ldr	r3, [pc, #4]	; (7d6c <__stdout_hook_install+0x8>)
    7d66:	6018      	str	r0, [r3, #0]
}
    7d68:	4770      	bx	lr
    7d6a:	bf00      	nop
    7d6c:	20000150 	.word	0x20000150

00007d70 <nordicsemi_nrf52_init>:
    7d70:	f04f 0320 	mov.w	r3, #32
    7d74:	f3ef 8211 	mrs	r2, BASEPRI
    7d78:	f383 8811 	msr	BASEPRI, r3
    7d7c:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    7d80:	4906      	ldr	r1, [pc, #24]	; (7d9c <nordicsemi_nrf52_init+0x2c>)
    7d82:	2301      	movs	r3, #1
    7d84:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    7d88:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    7d8c:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    7d90:	f382 8811 	msr	BASEPRI, r2
    7d94:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    7d98:	2000      	movs	r0, #0
    7d9a:	4770      	bx	lr
    7d9c:	4001e000 	.word	0x4001e000

00007da0 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    7da0:	b120      	cbz	r0, 7dac <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    7da2:	4b03      	ldr	r3, [pc, #12]	; (7db0 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    7da4:	0180      	lsls	r0, r0, #6
    7da6:	f043 0301 	orr.w	r3, r3, #1
    7daa:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    7dac:	4770      	bx	lr
    7dae:	bf00      	nop
    7db0:	00023910 	.word	0x00023910

00007db4 <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
    7db4:	4b0e      	ldr	r3, [pc, #56]	; (7df0 <bt_hex_real+0x3c>)
    7db6:	2940      	cmp	r1, #64	; 0x40
{
    7db8:	b570      	push	{r4, r5, r6, lr}
	len = MIN(len, (sizeof(str) - 1) / 2);
    7dba:	bf28      	it	cs
    7dbc:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
    7dbe:	4c0d      	ldr	r4, [pc, #52]	; (7df4 <bt_hex_real+0x40>)
    7dc0:	1846      	adds	r6, r0, r1
    7dc2:	461d      	mov	r5, r3
	for (i = 0; i < len; i++) {
    7dc4:	42b0      	cmp	r0, r6
    7dc6:	f103 0302 	add.w	r3, r3, #2
    7dca:	d104      	bne.n	7dd6 <bt_hex_real+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    7dcc:	2300      	movs	r3, #0
    7dce:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
    7dd2:	4807      	ldr	r0, [pc, #28]	; (7df0 <bt_hex_real+0x3c>)
    7dd4:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
    7dd6:	7802      	ldrb	r2, [r0, #0]
    7dd8:	0912      	lsrs	r2, r2, #4
    7dda:	5ca2      	ldrb	r2, [r4, r2]
    7ddc:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    7de0:	f810 2b01 	ldrb.w	r2, [r0], #1
    7de4:	f002 020f 	and.w	r2, r2, #15
    7de8:	5ca2      	ldrb	r2, [r4, r2]
    7dea:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
    7dee:	e7e9      	b.n	7dc4 <bt_hex_real+0x10>
    7df0:	20009ae9 	.word	0x20009ae9
    7df4:	0002564a 	.word	0x0002564a

00007df8 <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
    7df8:	b530      	push	{r4, r5, lr}
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    7dfa:	7803      	ldrb	r3, [r0, #0]
    7dfc:	b08b      	sub	sp, #44	; 0x2c
    7dfe:	4604      	mov	r4, r0
    7e00:	ad07      	add	r5, sp, #28
    7e02:	2b03      	cmp	r3, #3
    7e04:	d821      	bhi.n	7e4a <bt_addr_le_str_real+0x52>
    7e06:	e8df f003 	tbb	[pc, r3]
    7e0a:	1a02      	.short	0x1a02
    7e0c:	1e1c      	.short	0x1e1c
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    7e0e:	4912      	ldr	r1, [pc, #72]	; (7e58 <bt_addr_le_str_real+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    7e10:	4628      	mov	r0, r5
    7e12:	f017 fff0 	bl	1fdf6 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    7e16:	7863      	ldrb	r3, [r4, #1]
    7e18:	9304      	str	r3, [sp, #16]
    7e1a:	78a3      	ldrb	r3, [r4, #2]
    7e1c:	9303      	str	r3, [sp, #12]
    7e1e:	78e3      	ldrb	r3, [r4, #3]
    7e20:	9302      	str	r3, [sp, #8]
    7e22:	7923      	ldrb	r3, [r4, #4]
    7e24:	9301      	str	r3, [sp, #4]
    7e26:	7963      	ldrb	r3, [r4, #5]
    7e28:	9300      	str	r3, [sp, #0]
    7e2a:	4a0c      	ldr	r2, [pc, #48]	; (7e5c <bt_addr_le_str_real+0x64>)
    7e2c:	79a3      	ldrb	r3, [r4, #6]
    7e2e:	9505      	str	r5, [sp, #20]
    7e30:	211e      	movs	r1, #30
    7e32:	480b      	ldr	r0, [pc, #44]	; (7e60 <bt_addr_le_str_real+0x68>)
    7e34:	f016 f89a 	bl	1df6c <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
    7e38:	4809      	ldr	r0, [pc, #36]	; (7e60 <bt_addr_le_str_real+0x68>)
    7e3a:	b00b      	add	sp, #44	; 0x2c
    7e3c:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
    7e3e:	4909      	ldr	r1, [pc, #36]	; (7e64 <bt_addr_le_str_real+0x6c>)
    7e40:	e7e6      	b.n	7e10 <bt_addr_le_str_real+0x18>
		strcpy(type, "public-id");
    7e42:	4909      	ldr	r1, [pc, #36]	; (7e68 <bt_addr_le_str_real+0x70>)
    7e44:	e7e4      	b.n	7e10 <bt_addr_le_str_real+0x18>
		strcpy(type, "random-id");
    7e46:	4909      	ldr	r1, [pc, #36]	; (7e6c <bt_addr_le_str_real+0x74>)
    7e48:	e7e2      	b.n	7e10 <bt_addr_le_str_real+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    7e4a:	4a09      	ldr	r2, [pc, #36]	; (7e70 <bt_addr_le_str_real+0x78>)
    7e4c:	210a      	movs	r1, #10
    7e4e:	4628      	mov	r0, r5
    7e50:	f016 f88c 	bl	1df6c <snprintk>
		break;
    7e54:	e7df      	b.n	7e16 <bt_addr_le_str_real+0x1e>
    7e56:	bf00      	nop
    7e58:	00024f04 	.word	0x00024f04
    7e5c:	00024f26 	.word	0x00024f26
    7e60:	20009b6a 	.word	0x20009b6a
    7e64:	00024f0b 	.word	0x00024f0b
    7e68:	00024f12 	.word	0x00024f12
    7e6c:	00024f1c 	.word	0x00024f1c
    7e70:	00026b99 	.word	0x00026b99

00007e74 <ecc_thread>:

	bt_recv(buf);
}

static void ecc_thread(void *p1, void *p2, void *p3)
{
    7e74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7e78:	4b64      	ldr	r3, [pc, #400]	; (800c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc>)
    7e7a:	4d65      	ldr	r5, [pc, #404]	; (8010 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x10>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7e7c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8030 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x30>
	return z_impl_k_sem_take(sem, timeout);
    7e80:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 8034 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x34>
    7e84:	1aed      	subs	r5, r5, r3
    7e86:	08ed      	lsrs	r5, r5, #3
    7e88:	4647      	mov	r7, r8
    7e8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7e8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7e92:	4648      	mov	r0, r9
    7e94:	f015 fc96 	bl	1d7c4 <z_impl_k_sem_take>
    7e98:	f3bf 8f5b 	dmb	ish
    7e9c:	f8d8 4000 	ldr.w	r4, [r8]
    7ea0:	f3bf 8f5b 	dmb	ish
	while (true) {
		k_sem_take(&cmd_sem, K_FOREVER);

		if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    7ea4:	f014 0401 	ands.w	r4, r4, #1
    7ea8:	d05a      	beq.n	7f60 <ecc_thread+0xec>
		rc = uECC_make_key(ecc.pk, ecc.private_key, &curve_secp256r1);
    7eaa:	f8df a17c 	ldr.w	sl, [pc, #380]	; 8028 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x28>
    7eae:	4c59      	ldr	r4, [pc, #356]	; (8014 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x14>)
	} while (memcmp(ecc.private_key, debug_private_key, 32) == 0);
    7eb0:	4e59      	ldr	r6, [pc, #356]	; (8018 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x18>)
		rc = uECC_make_key(ecc.pk, ecc.private_key, &curve_secp256r1);
    7eb2:	485a      	ldr	r0, [pc, #360]	; (801c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1c>)
    7eb4:	4652      	mov	r2, sl
    7eb6:	4621      	mov	r1, r4
    7eb8:	f016 fedf 	bl	1ec7a <uECC_make_key>
		if (rc == TC_CRYPTO_FAIL) {
    7ebc:	bbe8      	cbnz	r0, 7f3a <ecc_thread+0xc6>
			BT_ERR("Failed to create ECC public/private pair");
    7ebe:	01a9      	lsls	r1, r5, #6
    7ec0:	4857      	ldr	r0, [pc, #348]	; (8020 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x20>)
    7ec2:	f041 0101 	orr.w	r1, r1, #1
    7ec6:	f016 fb04 	bl	1e4d2 <log_0>
			return BT_HCI_ERR_UNSPECIFIED;
    7eca:	f04f 0a1f 	mov.w	sl, #31
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    7ece:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7ed2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7ed6:	2001      	movs	r0, #1
    7ed8:	f002 f9f0 	bl	a2bc <bt_buf_get_rx>
	hdr = net_buf_add(buf, sizeof(*hdr));
    7edc:	f100 0608 	add.w	r6, r0, #8
    7ee0:	2102      	movs	r1, #2
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    7ee2:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    7ee4:	4630      	mov	r0, r6
    7ee6:	f01a fb57 	bl	22598 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
    7eea:	233e      	movs	r3, #62	; 0x3e
    7eec:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
    7eee:	2342      	movs	r3, #66	; 0x42
    7ef0:	7043      	strb	r3, [r0, #1]
	meta = net_buf_add(buf, sizeof(*meta));
    7ef2:	2101      	movs	r1, #1
    7ef4:	4630      	mov	r0, r6
    7ef6:	f01a fb4f 	bl	22598 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
    7efa:	2308      	movs	r3, #8
    7efc:	7003      	strb	r3, [r0, #0]
	evt = net_buf_add(buf, sizeof(*evt));
    7efe:	2141      	movs	r1, #65	; 0x41
    7f00:	4630      	mov	r0, r6
    7f02:	f01a fb49 	bl	22598 <net_buf_simple_add>
    7f06:	4606      	mov	r6, r0
	evt->status = status;
    7f08:	f800 ab01 	strb.w	sl, [r0], #1
	if (status) {
    7f0c:	f1ba 0f00 	cmp.w	sl, #0
    7f10:	d01d      	beq.n	7f4e <ecc_thread+0xda>
		(void)memset(evt->key, 0, sizeof(evt->key));
    7f12:	2240      	movs	r2, #64	; 0x40
    7f14:	2100      	movs	r1, #0
    7f16:	f017 ffd9 	bl	1fecc <memset>
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7f1a:	f3bf 8f5b 	dmb	ish
    7f1e:	e857 3f00 	ldrex	r3, [r7]
    7f22:	f023 0301 	bic.w	r3, r3, #1
    7f26:	e847 3200 	strex	r2, r3, [r7]
    7f2a:	2a00      	cmp	r2, #0
    7f2c:	d1f7      	bne.n	7f1e <ecc_thread+0xaa>
    7f2e:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
    7f32:	4620      	mov	r0, r4
	bt_recv(buf);
    7f34:	f001 fe1c 	bl	9b70 <bt_recv>
	while (true) {
    7f38:	e7a7      	b.n	7e8a <ecc_thread+0x16>
	} while (memcmp(ecc.private_key, debug_private_key, 32) == 0);
    7f3a:	2220      	movs	r2, #32
    7f3c:	4631      	mov	r1, r6
    7f3e:	4620      	mov	r0, r4
    7f40:	f017 ff89 	bl	1fe56 <memcmp>
    7f44:	2800      	cmp	r0, #0
    7f46:	d0b4      	beq.n	7eb2 <ecc_thread+0x3e>
	return 0;
    7f48:	f04f 0a00 	mov.w	sl, #0
    7f4c:	e7bf      	b.n	7ece <ecc_thread+0x5a>
		sys_memcpy_swap(evt->key, ecc.pk, 32);
    7f4e:	4933      	ldr	r1, [pc, #204]	; (801c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1c>)
    7f50:	f018 f84f 	bl	1fff2 <sys_memcpy_swap.constprop.0>
		sys_memcpy_swap(&evt->key[32], &ecc.pk[32], 32);
    7f54:	4933      	ldr	r1, [pc, #204]	; (8024 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x24>)
    7f56:	f106 0021 	add.w	r0, r6, #33	; 0x21
    7f5a:	f018 f84a 	bl	1fff2 <sys_memcpy_swap.constprop.0>
    7f5e:	e7dc      	b.n	7f1a <ecc_thread+0xa6>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7f60:	f3bf 8f5b 	dmb	ish
    7f64:	f8d8 3000 	ldr.w	r3, [r8]
    7f68:	f3bf 8f5b 	dmb	ish
			emulate_le_p256_public_key_cmd();
		} else if (atomic_test_bit(flags, PENDING_DHKEY)) {
    7f6c:	079b      	lsls	r3, r3, #30
    7f6e:	d58c      	bpl.n	7e8a <ecc_thread+0x16>
	ret = uECC_valid_public_key(ecc.pk, &curve_secp256r1);
    7f70:	492d      	ldr	r1, [pc, #180]	; (8028 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x28>)
    7f72:	482a      	ldr	r0, [pc, #168]	; (801c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1c>)
    7f74:	f017 fd50 	bl	1fa18 <uECC_valid_public_key>
	if (ret < 0) {
    7f78:	1e01      	subs	r1, r0, #0
    7f7a:	da38      	bge.n	7fee <ecc_thread+0x17a>
		BT_ERR("public key is not valid (ret %d)", ret);
    7f7c:	01aa      	lsls	r2, r5, #6
    7f7e:	482b      	ldr	r0, [pc, #172]	; (802c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2c>)
    7f80:	f042 0201 	orr.w	r2, r2, #1
    7f84:	f016 fab2 	bl	1e4ec <log_1>
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    7f88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7f8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7f90:	2001      	movs	r0, #1
    7f92:	f002 f993 	bl	a2bc <bt_buf_get_rx>
	hdr = net_buf_add(buf, sizeof(*hdr));
    7f96:	f100 0a08 	add.w	sl, r0, #8
    7f9a:	2102      	movs	r1, #2
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    7f9c:	4606      	mov	r6, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    7f9e:	4650      	mov	r0, sl
    7fa0:	f01a fafa 	bl	22598 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
    7fa4:	233e      	movs	r3, #62	; 0x3e
    7fa6:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
    7fa8:	2322      	movs	r3, #34	; 0x22
    7faa:	7043      	strb	r3, [r0, #1]
	meta = net_buf_add(buf, sizeof(*meta));
    7fac:	2101      	movs	r1, #1
    7fae:	4650      	mov	r0, sl
    7fb0:	f01a faf2 	bl	22598 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
    7fb4:	2309      	movs	r3, #9
    7fb6:	7003      	strb	r3, [r0, #0]
	evt = net_buf_add(buf, sizeof(*evt));
    7fb8:	2121      	movs	r1, #33	; 0x21
    7fba:	4650      	mov	r0, sl
    7fbc:	f01a faec 	bl	22598 <net_buf_simple_add>
    7fc0:	4603      	mov	r3, r0
	if (ret == TC_CRYPTO_FAIL) {
    7fc2:	3001      	adds	r0, #1
    7fc4:	b9e4      	cbnz	r4, 8000 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC>
		evt->status = BT_HCI_ERR_UNSPECIFIED;
    7fc6:	221f      	movs	r2, #31
    7fc8:	701a      	strb	r2, [r3, #0]
		(void)memset(evt->dhkey, 0, sizeof(evt->dhkey));
    7fca:	4621      	mov	r1, r4
    7fcc:	2220      	movs	r2, #32
    7fce:	f017 ff7d 	bl	1fecc <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7fd2:	f3bf 8f5b 	dmb	ish
    7fd6:	e857 3f00 	ldrex	r3, [r7]
    7fda:	f023 0302 	bic.w	r3, r3, #2
    7fde:	e847 3200 	strex	r2, r3, [r7]
    7fe2:	2a00      	cmp	r2, #0
    7fe4:	d1f7      	bne.n	7fd6 <ecc_thread+0x162>
    7fe6:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
    7fea:	4630      	mov	r0, r6
    7fec:	e7a2      	b.n	7f34 <ecc_thread+0xc0>
		ret = uECC_shared_secret(ecc.pk, ecc.private_key, ecc.dhkey,
    7fee:	4a0b      	ldr	r2, [pc, #44]	; (801c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1c>)
    7ff0:	4b0d      	ldr	r3, [pc, #52]	; (8028 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x28>)
    7ff2:	f1a2 0120 	sub.w	r1, r2, #32
    7ff6:	4610      	mov	r0, r2
    7ff8:	f016 fe8e 	bl	1ed18 <uECC_shared_secret>
    7ffc:	4604      	mov	r4, r0
    7ffe:	e7c3      	b.n	7f88 <ecc_thread+0x114>
		evt->status = 0U;
    8000:	2200      	movs	r2, #0
		sys_memcpy_swap(evt->dhkey, ecc.dhkey, sizeof(ecc.dhkey));
    8002:	4906      	ldr	r1, [pc, #24]	; (801c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1c>)
		evt->status = 0U;
    8004:	701a      	strb	r2, [r3, #0]
		sys_memcpy_swap(evt->dhkey, ecc.dhkey, sizeof(ecc.dhkey));
    8006:	f017 fff4 	bl	1fff2 <sys_memcpy_swap.constprop.0>
    800a:	e7e2      	b.n	7fd2 <ecc_thread+0x15e>
    800c:	000236f0 	.word	0x000236f0
    8010:	000237b8 	.word	0x000237b8
    8014:	20009b88 	.word	0x20009b88
    8018:	00023b7c 	.word	0x00023b7c
    801c:	20009ba8 	.word	0x20009ba8
    8020:	00025662 	.word	0x00025662
    8024:	20009bc8 	.word	0x20009bc8
    8028:	00023acc 	.word	0x00023acc
    802c:	0002568b 	.word	0x0002568b
    8030:	20001eb8 	.word	0x20001eb8
    8034:	20000828 	.word	0x20000828

00008038 <bt_hci_ecc_send>:

	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
}

int bt_hci_ecc_send(struct net_buf *buf)
{
    8038:	b570      	push	{r4, r5, r6, lr}
	 * pointer to an enum causes issues on qemu_x86 because the true
	 * size is 8-bit, but the enum is 32-bit on qemu_x86. So we put in
	 * a temporary cast to 8-bit to ensure only 8 bits are read from
	 * the pointer.
	 */
	return (enum bt_buf_type)(*(uint8_t *)net_buf_user_data(buf));
    803a:	7d05      	ldrb	r5, [r0, #20]
    803c:	4604      	mov	r4, r0
	if (bt_buf_get_type(buf) == BT_BUF_CMD) {
    803e:	b9ad      	cbnz	r5, 806c <bt_hci_ecc_send+0x34>
		struct bt_hci_cmd_hdr *chdr = (void *)buf->data;
    8040:	6883      	ldr	r3, [r0, #8]

		switch (sys_le16_to_cpu(chdr->opcode)) {
    8042:	881a      	ldrh	r2, [r3, #0]
    8044:	f242 0125 	movw	r1, #8229	; 0x2025
    8048:	428a      	cmp	r2, r1
    804a:	d017      	beq.n	807c <bt_hci_ecc_send+0x44>
    804c:	f242 0126 	movw	r1, #8230	; 0x2026
    8050:	428a      	cmp	r2, r1
    8052:	d03c      	beq.n	80ce <bt_hci_ecc_send+0x96>
    8054:	f242 0101 	movw	r1, #8193	; 0x2001
    8058:	428a      	cmp	r2, r1
    805a:	d107      	bne.n	806c <bt_hci_ecc_send+0x34>
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
    805c:	78da      	ldrb	r2, [r3, #3]
    805e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    8062:	70da      	strb	r2, [r3, #3]
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
    8064:	791a      	ldrb	r2, [r3, #4]
    8066:	f022 0201 	bic.w	r2, r2, #1
    806a:	711a      	strb	r2, [r3, #4]
		default:
			break;
		}
	}

	return bt_dev.drv->send(buf);
    806c:	4b31      	ldr	r3, [pc, #196]	; (8134 <bt_hci_ecc_send+0xfc>)
    806e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    8072:	4620      	mov	r0, r4
    8074:	691b      	ldr	r3, [r3, #16]
}
    8076:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_dev.drv->send(buf);
    807a:	4718      	bx	r3
			net_buf_pull(buf, sizeof(*chdr));
    807c:	2103      	movs	r1, #3
    807e:	3008      	adds	r0, #8
    8080:	f01a fabf 	bl	22602 <net_buf_simple_pull>
	net_buf_unref(buf);
    8084:	4620      	mov	r0, r4
    8086:	f013 fd2b 	bl	1bae0 <net_buf_unref>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    808a:	f3bf 8f5b 	dmb	ish
    808e:	4b2a      	ldr	r3, [pc, #168]	; (8138 <bt_hci_ecc_send+0x100>)
    8090:	681a      	ldr	r2, [r3, #0]
    8092:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_DHKEY)) {
    8096:	0790      	lsls	r0, r2, #30
    8098:	d507      	bpl.n	80aa <bt_hci_ecc_send+0x72>
		status = BT_HCI_ERR_CMD_DISALLOWED;
    809a:	250c      	movs	r5, #12
	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
    809c:	4629      	mov	r1, r5
    809e:	f242 0025 	movw	r0, #8229	; 0x2025
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY, status);
    80a2:	f017 ff82 	bl	1ffaa <send_cmd_status>
}
    80a6:	2000      	movs	r0, #0
    80a8:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    80aa:	f3bf 8f5b 	dmb	ish
    80ae:	e853 2f00 	ldrex	r2, [r3]
    80b2:	f042 0101 	orr.w	r1, r2, #1
    80b6:	e843 1000 	strex	r0, r1, [r3]
    80ba:	2800      	cmp	r0, #0
    80bc:	d1f7      	bne.n	80ae <bt_hci_ecc_send+0x76>
    80be:	f3bf 8f5b 	dmb	ish
	} else if (atomic_test_and_set_bit(flags, PENDING_PUB_KEY)) {
    80c2:	07d1      	lsls	r1, r2, #31
    80c4:	d4e9      	bmi.n	809a <bt_hci_ecc_send+0x62>
	z_impl_k_sem_give(sem);
    80c6:	481d      	ldr	r0, [pc, #116]	; (813c <bt_hci_ecc_send+0x104>)
    80c8:	f015 fb56 	bl	1d778 <z_impl_k_sem_give>
}
    80cc:	e7e6      	b.n	809c <bt_hci_ecc_send+0x64>
			net_buf_pull(buf, sizeof(*chdr));
    80ce:	2103      	movs	r1, #3
    80d0:	3008      	adds	r0, #8
    80d2:	f01a fa96 	bl	22602 <net_buf_simple_pull>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    80d6:	f3bf 8f5b 	dmb	ish
    80da:	4b17      	ldr	r3, [pc, #92]	; (8138 <bt_hci_ecc_send+0x100>)
    80dc:	681a      	ldr	r2, [r3, #0]
    80de:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    80e2:	07d2      	lsls	r2, r2, #31
    80e4:	d507      	bpl.n	80f6 <bt_hci_ecc_send+0xbe>
		status = BT_HCI_ERR_CMD_DISALLOWED;
    80e6:	250c      	movs	r5, #12
	net_buf_unref(buf);
    80e8:	4620      	mov	r0, r4
    80ea:	f013 fcf9 	bl	1bae0 <net_buf_unref>
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY, status);
    80ee:	4629      	mov	r1, r5
    80f0:	f242 0026 	movw	r0, #8230	; 0x2026
    80f4:	e7d5      	b.n	80a2 <bt_hci_ecc_send+0x6a>
	if (buf->len < sizeof(struct bt_hci_cp_le_generate_dhkey)) {
    80f6:	89a2      	ldrh	r2, [r4, #12]
    80f8:	2a3f      	cmp	r2, #63	; 0x3f
    80fa:	d919      	bls.n	8130 <bt_hci_ecc_send+0xf8>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    80fc:	f3bf 8f5b 	dmb	ish
    8100:	e853 2f00 	ldrex	r2, [r3]
    8104:	f042 0102 	orr.w	r1, r2, #2
    8108:	e843 1000 	strex	r0, r1, [r3]
    810c:	2800      	cmp	r0, #0
    810e:	d1f7      	bne.n	8100 <bt_hci_ecc_send+0xc8>
    8110:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(flags, PENDING_DHKEY)) {
    8114:	0793      	lsls	r3, r2, #30
    8116:	d4e6      	bmi.n	80e6 <bt_hci_ecc_send+0xae>
	cmd = (void *)buf->data;
    8118:	68a1      	ldr	r1, [r4, #8]
	sys_memcpy_swap(ecc.pk, cmd->key, 32);
    811a:	4809      	ldr	r0, [pc, #36]	; (8140 <bt_hci_ecc_send+0x108>)
    811c:	f017 ff69 	bl	1fff2 <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&ecc.pk[32], &cmd->key[32], 32);
    8120:	4808      	ldr	r0, [pc, #32]	; (8144 <bt_hci_ecc_send+0x10c>)
    8122:	3120      	adds	r1, #32
    8124:	f017 ff65 	bl	1fff2 <sys_memcpy_swap.constprop.0>
	z_impl_k_sem_give(sem);
    8128:	4804      	ldr	r0, [pc, #16]	; (813c <bt_hci_ecc_send+0x104>)
    812a:	f015 fb25 	bl	1d778 <z_impl_k_sem_give>
}
    812e:	e7db      	b.n	80e8 <bt_hci_ecc_send+0xb0>
		status = BT_HCI_ERR_INVALID_PARAM;
    8130:	2512      	movs	r5, #18
    8132:	e7d9      	b.n	80e8 <bt_hci_ecc_send+0xb0>
    8134:	20000000 	.word	0x20000000
    8138:	20001eb8 	.word	0x20001eb8
    813c:	20000828 	.word	0x20000828
    8140:	20009ba8 	.word	0x20009ba8
    8144:	20009bc8 	.word	0x20009bc8

00008148 <bt_hci_ecc_init>:
{
	return !bt_rand(dst, len);
}

void bt_hci_ecc_init(void)
{
    8148:	b510      	push	{r4, lr}
    814a:	b088      	sub	sp, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    814c:	4c0c      	ldr	r4, [pc, #48]	; (8180 <bt_hci_ecc_init+0x38>)
    814e:	490d      	ldr	r1, [pc, #52]	; (8184 <bt_hci_ecc_init+0x3c>)
    8150:	2200      	movs	r2, #0
    8152:	2300      	movs	r3, #0
    8154:	e9cd 2306 	strd	r2, r3, [sp, #24]
    8158:	2300      	movs	r3, #0
    815a:	220a      	movs	r2, #10
    815c:	e9cd 2303 	strd	r2, r3, [sp, #12]
    8160:	e9cd 3301 	strd	r3, r3, [sp, #4]
    8164:	9300      	str	r3, [sp, #0]
    8166:	f240 424c 	movw	r2, #1100	; 0x44c
    816a:	4b07      	ldr	r3, [pc, #28]	; (8188 <bt_hci_ecc_init+0x40>)
    816c:	4620      	mov	r0, r4
    816e:	f015 fb91 	bl	1d894 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    8172:	4906      	ldr	r1, [pc, #24]	; (818c <bt_hci_ecc_init+0x44>)
    8174:	4620      	mov	r0, r4
	k_thread_create(&ecc_thread_data, ecc_thread_stack,
			K_THREAD_STACK_SIZEOF(ecc_thread_stack), ecc_thread,
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecc_thread_data, "BT ECC");
}
    8176:	b008      	add	sp, #32
    8178:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    817c:	f01a bf51 	b.w	23022 <z_impl_k_thread_name_set>
    8180:	20000ab0 	.word	0x20000ab0
    8184:	2000a680 	.word	0x2000a680
    8188:	00007e75 	.word	0x00007e75
    818c:	000256ac 	.word	0x000256ac

00008190 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    8190:	b4f0      	push	{r4, r5, r6, r7}
	switch (src->type) {
    8192:	7802      	ldrb	r2, [r0, #0]
    8194:	2a01      	cmp	r2, #1
{
    8196:	4604      	mov	r4, r0
    8198:	460b      	mov	r3, r1
	switch (src->type) {
    819a:	d016      	beq.n	81ca <uuid_to_uuid128+0x3a>
    819c:	2a02      	cmp	r2, #2
    819e:	d02c      	beq.n	81fa <uuid_to_uuid128+0x6a>
    81a0:	b98a      	cbnz	r2, 81c6 <uuid_to_uuid128+0x36>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
    81a2:	4a19      	ldr	r2, [pc, #100]	; (8208 <uuid_to_uuid128+0x78>)
    81a4:	460d      	mov	r5, r1
    81a6:	f102 0710 	add.w	r7, r2, #16
    81aa:	6810      	ldr	r0, [r2, #0]
    81ac:	6851      	ldr	r1, [r2, #4]
    81ae:	462e      	mov	r6, r5
    81b0:	c603      	stmia	r6!, {r0, r1}
    81b2:	3208      	adds	r2, #8
    81b4:	42ba      	cmp	r2, r7
    81b6:	4635      	mov	r5, r6
    81b8:	d1f7      	bne.n	81aa <uuid_to_uuid128+0x1a>
    81ba:	7812      	ldrb	r2, [r2, #0]
    81bc:	7032      	strb	r2, [r6, #0]
		sys_put_le16(BT_UUID_16(src)->val,
    81be:	8862      	ldrh	r2, [r4, #2]
	dst[0] = val;
    81c0:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    81c2:	0a12      	lsrs	r2, r2, #8
    81c4:	739a      	strb	r2, [r3, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    81c6:	bcf0      	pop	{r4, r5, r6, r7}
    81c8:	4770      	bx	lr
		*dst = uuid128_base;
    81ca:	4a0f      	ldr	r2, [pc, #60]	; (8208 <uuid_to_uuid128+0x78>)
    81cc:	460d      	mov	r5, r1
    81ce:	f102 0710 	add.w	r7, r2, #16
    81d2:	6810      	ldr	r0, [r2, #0]
    81d4:	6851      	ldr	r1, [r2, #4]
    81d6:	462e      	mov	r6, r5
    81d8:	c603      	stmia	r6!, {r0, r1}
    81da:	3208      	adds	r2, #8
    81dc:	42ba      	cmp	r2, r7
    81de:	4635      	mov	r5, r6
    81e0:	d1f7      	bne.n	81d2 <uuid_to_uuid128+0x42>
    81e2:	7812      	ldrb	r2, [r2, #0]
    81e4:	7032      	strb	r2, [r6, #0]
		sys_put_le32(BT_UUID_32(src)->val,
    81e6:	6862      	ldr	r2, [r4, #4]
	dst[0] = val;
    81e8:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    81ea:	f3c2 2107 	ubfx	r1, r2, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
    81ee:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
    81f0:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
    81f2:	0a12      	lsrs	r2, r2, #8
    81f4:	7399      	strb	r1, [r3, #14]
    81f6:	741a      	strb	r2, [r3, #16]
}
    81f8:	e7e5      	b.n	81c6 <uuid_to_uuid128+0x36>
		memcpy(dst, src, sizeof(*dst));
    81fa:	4601      	mov	r1, r0
}
    81fc:	bcf0      	pop	{r4, r5, r6, r7}
		memcpy(dst, src, sizeof(*dst));
    81fe:	2211      	movs	r2, #17
    8200:	4618      	mov	r0, r3
    8202:	f017 be38 	b.w	1fe76 <memcpy>
    8206:	bf00      	nop
    8208:	000256be 	.word	0x000256be

0000820c <le_dhkey_complete>:
{
    820c:	b510      	push	{r4, lr}
	if (dh_key_cb) {
    820e:	4c06      	ldr	r4, [pc, #24]	; (8228 <le_dhkey_complete+0x1c>)
    8210:	6822      	ldr	r2, [r4, #0]
    8212:	b132      	cbz	r2, 8222 <le_dhkey_complete+0x16>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
    8214:	6880      	ldr	r0, [r0, #8]
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    8216:	7803      	ldrb	r3, [r0, #0]
    8218:	b923      	cbnz	r3, 8224 <le_dhkey_complete+0x18>
    821a:	3001      	adds	r0, #1
    821c:	4790      	blx	r2
		dh_key_cb = NULL;
    821e:	2300      	movs	r3, #0
    8220:	6023      	str	r3, [r4, #0]
}
    8222:	bd10      	pop	{r4, pc}
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    8224:	2000      	movs	r0, #0
    8226:	e7f9      	b.n	821c <le_dhkey_complete+0x10>
    8228:	20001ed4 	.word	0x20001ed4

0000822c <ver_str>:
{
    822c:	b570      	push	{r4, r5, r6, lr}
	const char * const str[] = {
    822e:	4d0b      	ldr	r5, [pc, #44]	; (825c <ver_str+0x30>)
{
    8230:	4606      	mov	r6, r0
	const char * const str[] = {
    8232:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
    8234:	b08c      	sub	sp, #48	; 0x30
	const char * const str[] = {
    8236:	466c      	mov	r4, sp
    8238:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    823a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    823c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    823e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    8242:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (ver < ARRAY_SIZE(str)) {
    8246:	2e0b      	cmp	r6, #11
		return str[ver];
    8248:	bf9b      	ittet	ls
    824a:	ab0c      	addls	r3, sp, #48	; 0x30
    824c:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
	return "unknown";
    8250:	4803      	ldrhi	r0, [pc, #12]	; (8260 <ver_str+0x34>)
		return str[ver];
    8252:	f856 0c30 	ldrls.w	r0, [r6, #-48]
}
    8256:	b00c      	add	sp, #48	; 0x30
    8258:	bd70      	pop	{r4, r5, r6, pc}
    825a:	bf00      	nop
    825c:	00023894 	.word	0x00023894
    8260:	000257ba 	.word	0x000257ba

00008264 <hci_data_buf_overflow>:
    8264:	4905      	ldr	r1, [pc, #20]	; (827c <hci_data_buf_overflow+0x18>)
    8266:	4a06      	ldr	r2, [pc, #24]	; (8280 <hci_data_buf_overflow+0x1c>)
	struct bt_hci_evt_data_buf_overflow *evt = (void *)buf->data;
    8268:	6883      	ldr	r3, [r0, #8]
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
    826a:	4806      	ldr	r0, [pc, #24]	; (8284 <hci_data_buf_overflow+0x20>)
    826c:	1a52      	subs	r2, r2, r1
    826e:	08d2      	lsrs	r2, r2, #3
    8270:	0192      	lsls	r2, r2, #6
    8272:	7819      	ldrb	r1, [r3, #0]
    8274:	f042 0202 	orr.w	r2, r2, #2
    8278:	f016 b938 	b.w	1e4ec <log_1>
    827c:	000236f0 	.word	0x000236f0
    8280:	000237b0 	.word	0x000237b0
    8284:	000257c2 	.word	0x000257c2

00008288 <le_pkey_complete>:
{
    8288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
    828a:	6886      	ldr	r6, [r0, #8]
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    828c:	480f      	ldr	r0, [pc, #60]	; (82cc <le_pkey_complete+0x44>)
    828e:	f06f 0110 	mvn.w	r1, #16
    8292:	f017 ff1a 	bl	200ca <atomic_and>
	if (!evt->status) {
    8296:	7833      	ldrb	r3, [r6, #0]
    8298:	b943      	cbnz	r3, 82ac <le_pkey_complete+0x24>
		memcpy(pub_key, evt->key, 64);
    829a:	1c71      	adds	r1, r6, #1
    829c:	480c      	ldr	r0, [pc, #48]	; (82d0 <le_pkey_complete+0x48>)
    829e:	2240      	movs	r2, #64	; 0x40
    82a0:	f017 fde9 	bl	1fe76 <memcpy>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    82a4:	4809      	ldr	r0, [pc, #36]	; (82cc <le_pkey_complete+0x44>)
    82a6:	2108      	movs	r1, #8
    82a8:	f017 ff1e 	bl	200e8 <atomic_or>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    82ac:	4d09      	ldr	r5, [pc, #36]	; (82d4 <le_pkey_complete+0x4c>)
		cb->func(evt->status ? NULL : pub_key);
    82ae:	4f08      	ldr	r7, [pc, #32]	; (82d0 <le_pkey_complete+0x48>)
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    82b0:	682c      	ldr	r4, [r5, #0]
    82b2:	b90c      	cbnz	r4, 82b8 <le_pkey_complete+0x30>
	pub_key_cb = NULL;
    82b4:	602c      	str	r4, [r5, #0]
}
    82b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		cb->func(evt->status ? NULL : pub_key);
    82b8:	7832      	ldrb	r2, [r6, #0]
    82ba:	6823      	ldr	r3, [r4, #0]
    82bc:	2a00      	cmp	r2, #0
    82be:	bf0c      	ite	eq
    82c0:	4638      	moveq	r0, r7
    82c2:	2000      	movne	r0, #0
    82c4:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    82c6:	6864      	ldr	r4, [r4, #4]
    82c8:	e7f3      	b.n	82b2 <le_pkey_complete+0x2a>
    82ca:	bf00      	nop
    82cc:	20000098 	.word	0x20000098
    82d0:	20009be8 	.word	0x20009be8
    82d4:	20001ed8 	.word	0x20001ed8

000082d8 <le_data_len_change>:
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    82d8:	6883      	ldr	r3, [r0, #8]
{
    82da:	b510      	push	{r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    82dc:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
    82de:	4620      	mov	r0, r4
    82e0:	f002 fd42 	bl	ad68 <bt_conn_lookup_handle>
	if (!conn) {
    82e4:	b960      	cbnz	r0, 8300 <le_data_len_change+0x28>
    82e6:	4a08      	ldr	r2, [pc, #32]	; (8308 <le_data_len_change+0x30>)
    82e8:	4b08      	ldr	r3, [pc, #32]	; (830c <le_data_len_change+0x34>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    82ea:	4809      	ldr	r0, [pc, #36]	; (8310 <le_data_len_change+0x38>)
    82ec:	1ad2      	subs	r2, r2, r3
    82ee:	08d2      	lsrs	r2, r2, #3
    82f0:	0192      	lsls	r2, r2, #6
    82f2:	4621      	mov	r1, r4
    82f4:	f042 0201 	orr.w	r2, r2, #1
}
    82f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    82fc:	f016 b8f6 	b.w	1e4ec <log_1>
}
    8300:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
    8304:	f018 b97b 	b.w	205fe <bt_conn_unref>
    8308:	000237b0 	.word	0x000237b0
    830c:	000236f0 	.word	0x000236f0
    8310:	000257ea 	.word	0x000257ea

00008314 <le_conn_update_complete>:
{
    8314:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
    8316:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    8318:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    831c:	4630      	mov	r0, r6
    831e:	f002 fd23 	bl	ad68 <bt_conn_lookup_handle>
	if (!conn) {
    8322:	4604      	mov	r4, r0
    8324:	b960      	cbnz	r0, 8340 <le_conn_update_complete+0x2c>
    8326:	4a1e      	ldr	r2, [pc, #120]	; (83a0 <le_conn_update_complete+0x8c>)
    8328:	4b1e      	ldr	r3, [pc, #120]	; (83a4 <le_conn_update_complete+0x90>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    832a:	481f      	ldr	r0, [pc, #124]	; (83a8 <le_conn_update_complete+0x94>)
    832c:	1ad2      	subs	r2, r2, r3
    832e:	08d2      	lsrs	r2, r2, #3
    8330:	0192      	lsls	r2, r2, #6
    8332:	f042 0201 	orr.w	r2, r2, #1
    8336:	4631      	mov	r1, r6
    8338:	f016 f8d8 	bl	1e4ec <log_1>
}
    833c:	b002      	add	sp, #8
    833e:	bd70      	pop	{r4, r5, r6, pc}
	if (!evt->status) {
    8340:	782b      	ldrb	r3, [r5, #0]
    8342:	b9bb      	cbnz	r3, 8374 <le_conn_update_complete+0x60>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    8344:	792a      	ldrb	r2, [r5, #4]
    8346:	78eb      	ldrb	r3, [r5, #3]
    8348:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    834c:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    8350:	79aa      	ldrb	r2, [r5, #6]
    8352:	796b      	ldrb	r3, [r5, #5]
    8354:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    8358:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    835c:	79eb      	ldrb	r3, [r5, #7]
    835e:	7a2a      	ldrb	r2, [r5, #8]
    8360:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    8364:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
    8368:	f002 f9b4 	bl	a6d4 <notify_le_param_updated>
	bt_conn_unref(conn);
    836c:	4620      	mov	r0, r4
    836e:	f018 f946 	bl	205fe <bt_conn_unref>
    8372:	e7e3      	b.n	833c <le_conn_update_complete+0x28>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
    8374:	2b1a      	cmp	r3, #26
    8376:	d1f9      	bne.n	836c <le_conn_update_complete+0x58>
    8378:	78c3      	ldrb	r3, [r0, #3]
    837a:	2b01      	cmp	r3, #1
    837c:	d1f6      	bne.n	836c <le_conn_update_complete+0x58>
		   !atomic_test_and_set_bit(conn->flags,
    837e:	210a      	movs	r1, #10
    8380:	3004      	adds	r0, #4
    8382:	f017 fed1 	bl	20128 <atomic_test_and_set_bit>
		   conn->role == BT_HCI_ROLE_SLAVE &&
    8386:	2800      	cmp	r0, #0
    8388:	d1f0      	bne.n	836c <le_conn_update_complete+0x58>
		param.interval_min = conn->le.interval_min;
    838a:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    838e:	9300      	str	r3, [sp, #0]
		bt_l2cap_update_conn_param(conn, &param);
    8390:	4669      	mov	r1, sp
		param.latency = conn->le.pending_latency;
    8392:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
    8396:	9301      	str	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
    8398:	4620      	mov	r0, r4
    839a:	f018 fc6e 	bl	20c7a <bt_l2cap_update_conn_param>
    839e:	e7e5      	b.n	836c <le_conn_update_complete+0x58>
    83a0:	000237b0 	.word	0x000237b0
    83a4:	000236f0 	.word	0x000236f0
    83a8:	000257ea 	.word	0x000257ea

000083ac <hci_vendor_event>:
{
    83ac:	b510      	push	{r4, lr}
    83ae:	4a0a      	ldr	r2, [pc, #40]	; (83d8 <hci_vendor_event+0x2c>)
    83b0:	4c0a      	ldr	r4, [pc, #40]	; (83dc <hci_vendor_event+0x30>)
		BT_WARN("Unhandled vendor-specific event: %s",
    83b2:	8981      	ldrh	r1, [r0, #12]
    83b4:	6880      	ldr	r0, [r0, #8]
    83b6:	1aa4      	subs	r4, r4, r2
    83b8:	f7ff fcfc 	bl	7db4 <bt_hex_real>
    83bc:	f7fd ffba 	bl	6334 <log_strdup>
    83c0:	08e4      	lsrs	r4, r4, #3
    83c2:	01a4      	lsls	r4, r4, #6
    83c4:	f044 0402 	orr.w	r4, r4, #2
    83c8:	4601      	mov	r1, r0
    83ca:	4622      	mov	r2, r4
    83cc:	4804      	ldr	r0, [pc, #16]	; (83e0 <hci_vendor_event+0x34>)
}
    83ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
    83d2:	f016 b88b 	b.w	1e4ec <log_1>
    83d6:	bf00      	nop
    83d8:	000236f0 	.word	0x000236f0
    83dc:	000237b0 	.word	0x000237b0
    83e0:	0002580e 	.word	0x0002580e

000083e4 <update_sec_level>:
{
    83e4:	b510      	push	{r4, lr}
	if (!conn->encrypt) {
    83e6:	7ac3      	ldrb	r3, [r0, #11]
{
    83e8:	4604      	mov	r4, r0
	if (!conn->encrypt) {
    83ea:	b913      	cbnz	r3, 83f2 <update_sec_level+0xe>
		conn->sec_level = BT_SECURITY_L1;
    83ec:	2301      	movs	r3, #1
    83ee:	7243      	strb	r3, [r0, #9]
}
    83f0:	bd10      	pop	{r4, pc}
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
    83f2:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
    83f6:	b1fb      	cbz	r3, 8438 <update_sec_level+0x54>
    83f8:	7b5a      	ldrb	r2, [r3, #13]
    83fa:	07d1      	lsls	r1, r2, #31
    83fc:	d51c      	bpl.n	8438 <update_sec_level+0x54>
		if (conn->le.keys->flags & BT_KEYS_SC &&
    83fe:	06d2      	lsls	r2, r2, #27
    8400:	d518      	bpl.n	8434 <update_sec_level+0x50>
    8402:	7b1b      	ldrb	r3, [r3, #12]
    8404:	2b10      	cmp	r3, #16
    8406:	d115      	bne.n	8434 <update_sec_level+0x50>
			conn->sec_level = BT_SECURITY_L4;
    8408:	2304      	movs	r3, #4
		conn->sec_level = BT_SECURITY_L2;
    840a:	7263      	strb	r3, [r4, #9]
	if (conn->required_sec_level > conn->sec_level) {
    840c:	7aa2      	ldrb	r2, [r4, #10]
    840e:	7a63      	ldrb	r3, [r4, #9]
    8410:	429a      	cmp	r2, r3
    8412:	d9ed      	bls.n	83f0 <update_sec_level+0xc>
    8414:	4b09      	ldr	r3, [pc, #36]	; (843c <update_sec_level+0x58>)
    8416:	490a      	ldr	r1, [pc, #40]	; (8440 <update_sec_level+0x5c>)
		BT_ERR("Failed to set required security level");
    8418:	480a      	ldr	r0, [pc, #40]	; (8444 <update_sec_level+0x60>)
    841a:	1ac9      	subs	r1, r1, r3
    841c:	08c9      	lsrs	r1, r1, #3
    841e:	0189      	lsls	r1, r1, #6
    8420:	f041 0101 	orr.w	r1, r1, #1
    8424:	f016 f855 	bl	1e4d2 <log_0>
		bt_conn_disconnect(conn, BT_HCI_ERR_AUTH_FAIL);
    8428:	4620      	mov	r0, r4
    842a:	2105      	movs	r1, #5
}
    842c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_conn_disconnect(conn, BT_HCI_ERR_AUTH_FAIL);
    8430:	f002 be8c 	b.w	b14c <bt_conn_disconnect>
			conn->sec_level = BT_SECURITY_L3;
    8434:	2303      	movs	r3, #3
    8436:	e7e8      	b.n	840a <update_sec_level+0x26>
		conn->sec_level = BT_SECURITY_L2;
    8438:	2302      	movs	r3, #2
    843a:	e7e6      	b.n	840a <update_sec_level+0x26>
    843c:	000236f0 	.word	0x000236f0
    8440:	000237b0 	.word	0x000237b0
    8444:	00025832 	.word	0x00025832

00008448 <hci_encrypt_key_refresh_complete>:
{
    8448:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
    844a:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    844c:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    8450:	4630      	mov	r0, r6
    8452:	f002 fc89 	bl	ad68 <bt_conn_lookup_handle>
	if (!conn) {
    8456:	4604      	mov	r4, r0
    8458:	b960      	cbnz	r0, 8474 <hci_encrypt_key_refresh_complete+0x2c>
    845a:	4a18      	ldr	r2, [pc, #96]	; (84bc <hci_encrypt_key_refresh_complete+0x74>)
    845c:	4b18      	ldr	r3, [pc, #96]	; (84c0 <hci_encrypt_key_refresh_complete+0x78>)
		BT_ERR("Unable to look up conn with handle %u", handle);
    845e:	4819      	ldr	r0, [pc, #100]	; (84c4 <hci_encrypt_key_refresh_complete+0x7c>)
    8460:	1ad2      	subs	r2, r2, r3
    8462:	08d2      	lsrs	r2, r2, #3
    8464:	0192      	lsls	r2, r2, #6
    8466:	4631      	mov	r1, r6
    8468:	f042 0201 	orr.w	r2, r2, #1
}
    846c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    8470:	f016 b83c 	b.w	1e4ec <log_1>
	if (evt->status) {
    8474:	7829      	ldrb	r1, [r5, #0]
    8476:	b189      	cbz	r1, 849c <hci_encrypt_key_refresh_complete+0x54>
	conn->required_sec_level = conn->sec_level;
    8478:	7a43      	ldrb	r3, [r0, #9]
    847a:	7283      	strb	r3, [r0, #10]
		bt_l2cap_encrypt_change(conn, evt->status);
    847c:	f018 fb95 	bl	20baa <bt_l2cap_encrypt_change>
		bt_conn_security_changed(conn, security_err_get(evt->status));
    8480:	782b      	ldrb	r3, [r5, #0]
	switch (hci_err) {
    8482:	2b29      	cmp	r3, #41	; 0x29
    8484:	bf9a      	itte	ls
    8486:	4a10      	ldrls	r2, [pc, #64]	; (84c8 <hci_encrypt_key_refresh_complete+0x80>)
    8488:	5cd1      	ldrbls	r1, [r2, r3]
		bt_conn_security_changed(conn, security_err_get(evt->status));
    848a:	2108      	movhi	r1, #8
	bt_conn_security_changed(conn, BT_SECURITY_ERR_SUCCESS);
    848c:	4620      	mov	r0, r4
    848e:	f002 f98f 	bl	a7b0 <bt_conn_security_changed>
	bt_conn_unref(conn);
    8492:	4620      	mov	r0, r4
}
    8494:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    8498:	f018 b8b1 	b.w	205fe <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
    849c:	7883      	ldrb	r3, [r0, #2]
    849e:	2b01      	cmp	r3, #1
    84a0:	d104      	bne.n	84ac <hci_encrypt_key_refresh_complete+0x64>
		bt_smp_update_keys(conn);
    84a2:	f007 fc51 	bl	fd48 <bt_smp_update_keys>
		update_sec_level(conn);
    84a6:	4620      	mov	r0, r4
    84a8:	f7ff ff9c 	bl	83e4 <update_sec_level>
	conn->required_sec_level = conn->sec_level;
    84ac:	7a63      	ldrb	r3, [r4, #9]
    84ae:	72a3      	strb	r3, [r4, #10]
	bt_l2cap_encrypt_change(conn, evt->status);
    84b0:	7829      	ldrb	r1, [r5, #0]
    84b2:	4620      	mov	r0, r4
    84b4:	f018 fb79 	bl	20baa <bt_l2cap_encrypt_change>
	bt_conn_security_changed(conn, BT_SECURITY_ERR_SUCCESS);
    84b8:	2100      	movs	r1, #0
    84ba:	e7e7      	b.n	848c <hci_encrypt_key_refresh_complete+0x44>
    84bc:	000237b0 	.word	0x000237b0
    84c0:	000236f0 	.word	0x000236f0
    84c4:	00025858 	.word	0x00025858
    84c8:	00026050 	.word	0x00026050

000084cc <hci_encrypt_change>:
{
    84cc:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
    84ce:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    84d0:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    84d4:	4630      	mov	r0, r6
    84d6:	f002 fc47 	bl	ad68 <bt_conn_lookup_handle>
	if (!conn) {
    84da:	4604      	mov	r4, r0
    84dc:	b960      	cbnz	r0, 84f8 <hci_encrypt_change+0x2c>
    84de:	4a1a      	ldr	r2, [pc, #104]	; (8548 <hci_encrypt_change+0x7c>)
    84e0:	4b1a      	ldr	r3, [pc, #104]	; (854c <hci_encrypt_change+0x80>)
		BT_ERR("Unable to look up conn with handle %u", handle);
    84e2:	481b      	ldr	r0, [pc, #108]	; (8550 <hci_encrypt_change+0x84>)
    84e4:	1ad2      	subs	r2, r2, r3
    84e6:	08d2      	lsrs	r2, r2, #3
    84e8:	0192      	lsls	r2, r2, #6
    84ea:	4631      	mov	r1, r6
    84ec:	f042 0201 	orr.w	r2, r2, #1
}
    84f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    84f4:	f015 bffa 	b.w	1e4ec <log_1>
	if (evt->status) {
    84f8:	7829      	ldrb	r1, [r5, #0]
    84fa:	b189      	cbz	r1, 8520 <hci_encrypt_change+0x54>
	conn->required_sec_level = conn->sec_level;
    84fc:	7a43      	ldrb	r3, [r0, #9]
    84fe:	7283      	strb	r3, [r0, #10]
		bt_l2cap_encrypt_change(conn, evt->status);
    8500:	f018 fb53 	bl	20baa <bt_l2cap_encrypt_change>
		bt_conn_security_changed(conn, security_err_get(evt->status));
    8504:	782b      	ldrb	r3, [r5, #0]
	switch (hci_err) {
    8506:	2b29      	cmp	r3, #41	; 0x29
    8508:	bf9a      	itte	ls
    850a:	4a12      	ldrls	r2, [pc, #72]	; (8554 <hci_encrypt_change+0x88>)
    850c:	5cd1      	ldrbls	r1, [r2, r3]
		bt_conn_security_changed(conn, security_err_get(evt->status));
    850e:	2108      	movhi	r1, #8
	bt_conn_security_changed(conn, BT_SECURITY_ERR_SUCCESS);
    8510:	4620      	mov	r0, r4
    8512:	f002 f94d 	bl	a7b0 <bt_conn_security_changed>
	bt_conn_unref(conn);
    8516:	4620      	mov	r0, r4
}
    8518:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    851c:	f018 b86f 	b.w	205fe <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
    8520:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
    8522:	78eb      	ldrb	r3, [r5, #3]
    8524:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
    8526:	2a01      	cmp	r2, #1
    8528:	d105      	bne.n	8536 <hci_encrypt_change+0x6a>
		if (conn->encrypt) {
    852a:	b10b      	cbz	r3, 8530 <hci_encrypt_change+0x64>
			bt_smp_update_keys(conn);
    852c:	f007 fc0c 	bl	fd48 <bt_smp_update_keys>
		update_sec_level(conn);
    8530:	4620      	mov	r0, r4
    8532:	f7ff ff57 	bl	83e4 <update_sec_level>
	conn->required_sec_level = conn->sec_level;
    8536:	7a63      	ldrb	r3, [r4, #9]
    8538:	72a3      	strb	r3, [r4, #10]
	bt_l2cap_encrypt_change(conn, evt->status);
    853a:	7829      	ldrb	r1, [r5, #0]
    853c:	4620      	mov	r0, r4
    853e:	f018 fb34 	bl	20baa <bt_l2cap_encrypt_change>
	bt_conn_security_changed(conn, BT_SECURITY_ERR_SUCCESS);
    8542:	2100      	movs	r1, #0
    8544:	e7e4      	b.n	8510 <hci_encrypt_change+0x44>
    8546:	bf00      	nop
    8548:	000237b0 	.word	0x000237b0
    854c:	000236f0 	.word	0x000236f0
    8550:	00025858 	.word	0x00025858
    8554:	00026050 	.word	0x00026050

00008558 <handle_event>:
{
    8558:	b573      	push	{r0, r1, r4, r5, r6, lr}
    855a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    855e:	4605      	mov	r5, r0
    8560:	4608      	mov	r0, r1
		if (handler->event != event) {
    8562:	7811      	ldrb	r1, [r2, #0]
    8564:	42a9      	cmp	r1, r5
    8566:	d01a      	beq.n	859e <handle_event+0x46>
	for (i = 0; i < num_handlers; i++) {
    8568:	3208      	adds	r2, #8
    856a:	429a      	cmp	r2, r3
    856c:	d1f9      	bne.n	8562 <handle_event+0xa>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
    856e:	8986      	ldrh	r6, [r0, #12]
    8570:	4b16      	ldr	r3, [pc, #88]	; (85cc <handle_event+0x74>)
    8572:	4c17      	ldr	r4, [pc, #92]	; (85d0 <handle_event+0x78>)
    8574:	6880      	ldr	r0, [r0, #8]
    8576:	4631      	mov	r1, r6
    8578:	1ae4      	subs	r4, r4, r3
    857a:	f7ff fc1b 	bl	7db4 <bt_hex_real>
    857e:	f7fd fed9 	bl	6334 <log_strdup>
    8582:	08e4      	lsrs	r4, r4, #3
    8584:	01a4      	lsls	r4, r4, #6
    8586:	f044 0402 	orr.w	r4, r4, #2
    858a:	4603      	mov	r3, r0
    858c:	f8ad 4000 	strh.w	r4, [sp]
    8590:	4810      	ldr	r0, [pc, #64]	; (85d4 <handle_event+0x7c>)
    8592:	4632      	mov	r2, r6
    8594:	4629      	mov	r1, r5
    8596:	f015 ffd6 	bl	1e546 <log_3>
}
    859a:	b002      	add	sp, #8
    859c:	bd70      	pop	{r4, r5, r6, pc}
		if (buf->len < handler->min_len) {
    859e:	8981      	ldrh	r1, [r0, #12]
    85a0:	7853      	ldrb	r3, [r2, #1]
    85a2:	428b      	cmp	r3, r1
    85a4:	d90d      	bls.n	85c2 <handle_event+0x6a>
    85a6:	4a09      	ldr	r2, [pc, #36]	; (85cc <handle_event+0x74>)
    85a8:	4b09      	ldr	r3, [pc, #36]	; (85d0 <handle_event+0x78>)
			BT_ERR("Too small (%u bytes) event 0x%02x",
    85aa:	480b      	ldr	r0, [pc, #44]	; (85d8 <handle_event+0x80>)
    85ac:	1a9b      	subs	r3, r3, r2
    85ae:	08db      	lsrs	r3, r3, #3
    85b0:	019b      	lsls	r3, r3, #6
    85b2:	f043 0301 	orr.w	r3, r3, #1
    85b6:	462a      	mov	r2, r5
}
    85b8:	b002      	add	sp, #8
    85ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Too small (%u bytes) event 0x%02x",
    85be:	f015 bfa9 	b.w	1e514 <log_2>
		handler->handler(buf);
    85c2:	6853      	ldr	r3, [r2, #4]
}
    85c4:	b002      	add	sp, #8
    85c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		handler->handler(buf);
    85ca:	4718      	bx	r3
    85cc:	000236f0 	.word	0x000236f0
    85d0:	000237b0 	.word	0x000237b0
    85d4:	000258a0 	.word	0x000258a0
    85d8:	0002587e 	.word	0x0002587e

000085dc <hci_le_meta_event>:
{
    85dc:	b510      	push	{r4, lr}
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    85de:	2101      	movs	r1, #1
{
    85e0:	4604      	mov	r4, r0
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    85e2:	3008      	adds	r0, #8
    85e4:	f01a f815 	bl	22612 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    85e8:	4621      	mov	r1, r4
    85ea:	4a03      	ldr	r2, [pc, #12]	; (85f8 <hci_le_meta_event+0x1c>)
    85ec:	7800      	ldrb	r0, [r0, #0]
}
    85ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    85f2:	230b      	movs	r3, #11
    85f4:	f7ff bfb0 	b.w	8558 <handle_event>
    85f8:	00023b9c 	.word	0x00023b9c

000085fc <hci_cmd_done>:
{
    85fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    8600:	4607      	mov	r7, r0
    8602:	b085      	sub	sp, #20
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    8604:	7990      	ldrb	r0, [r2, #6]
    8606:	4e34      	ldr	r6, [pc, #208]	; (86d8 <hci_cmd_done+0xdc>)
{
    8608:	4688      	mov	r8, r1
    860a:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    860c:	f013 f9ac 	bl	1b968 <net_buf_pool_get>
    8610:	4286      	cmp	r6, r0
    8612:	d016      	beq.n	8642 <hci_cmd_done+0x46>
    8614:	4b31      	ldr	r3, [pc, #196]	; (86dc <hci_cmd_done+0xe0>)
    8616:	4d32      	ldr	r5, [pc, #200]	; (86e0 <hci_cmd_done+0xe4>)
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    8618:	79a0      	ldrb	r0, [r4, #6]
    861a:	9700      	str	r7, [sp, #0]
    861c:	1aed      	subs	r5, r5, r3
    861e:	08ed      	lsrs	r5, r5, #3
    8620:	9001      	str	r0, [sp, #4]
    8622:	f013 f9a1 	bl	1b968 <net_buf_pool_get>
    8626:	01ad      	lsls	r5, r5, #6
    8628:	f045 0502 	orr.w	r5, r5, #2
    862c:	e9cd 0602 	strd	r0, r6, [sp, #8]
    8630:	462b      	mov	r3, r5
    8632:	482c      	ldr	r0, [pc, #176]	; (86e4 <hci_cmd_done+0xe8>)
    8634:	2204      	movs	r2, #4
    8636:	4669      	mov	r1, sp
    8638:	f015 ffa1 	bl	1e57e <log_n>
}
    863c:	b005      	add	sp, #20
    863e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (cmd(buf)->opcode != opcode) {
    8642:	4620      	mov	r0, r4
    8644:	f013 f998 	bl	1b978 <net_buf_id>
    8648:	4d27      	ldr	r5, [pc, #156]	; (86e8 <hci_cmd_done+0xec>)
    864a:	f04f 090c 	mov.w	r9, #12
    864e:	fb09 5300 	mla	r3, r9, r0, r5
    8652:	885b      	ldrh	r3, [r3, #2]
    8654:	42bb      	cmp	r3, r7
    8656:	d011      	beq.n	867c <hci_cmd_done+0x80>
    8658:	4b20      	ldr	r3, [pc, #128]	; (86dc <hci_cmd_done+0xe0>)
    865a:	4e21      	ldr	r6, [pc, #132]	; (86e0 <hci_cmd_done+0xe4>)
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    865c:	4620      	mov	r0, r4
    865e:	1af6      	subs	r6, r6, r3
    8660:	f013 f98a 	bl	1b978 <net_buf_id>
    8664:	08f6      	lsrs	r6, r6, #3
    8666:	fb09 5000 	mla	r0, r9, r0, r5
    866a:	01b6      	lsls	r6, r6, #6
    866c:	f046 0602 	orr.w	r6, r6, #2
    8670:	8842      	ldrh	r2, [r0, #2]
    8672:	481e      	ldr	r0, [pc, #120]	; (86ec <hci_cmd_done+0xf0>)
    8674:	4633      	mov	r3, r6
    8676:	4639      	mov	r1, r7
    8678:	f015 ff4c 	bl	1e514 <log_2>
	if (cmd(buf)->state && !status) {
    867c:	4620      	mov	r0, r4
    867e:	f013 f97b 	bl	1b978 <net_buf_id>
    8682:	260c      	movs	r6, #12
    8684:	fb06 5000 	mla	r0, r6, r0, r5
    8688:	6843      	ldr	r3, [r0, #4]
    868a:	b16b      	cbz	r3, 86a8 <hci_cmd_done+0xac>
    868c:	f1b8 0f00 	cmp.w	r8, #0
    8690:	d10a      	bne.n	86a8 <hci_cmd_done+0xac>
		struct cmd_state_set *update = cmd(buf)->state;
    8692:	4620      	mov	r0, r4
    8694:	f013 f970 	bl	1b978 <net_buf_id>
    8698:	fb06 5000 	mla	r0, r6, r0, r5
    869c:	6843      	ldr	r3, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
    869e:	e9d3 0100 	ldrd	r0, r1, [r3]
    86a2:	7a1a      	ldrb	r2, [r3, #8]
    86a4:	f017 fd2f 	bl	20106 <atomic_set_bit_to>
	if (cmd(buf)->sync) {
    86a8:	4620      	mov	r0, r4
    86aa:	f013 f965 	bl	1b978 <net_buf_id>
    86ae:	260c      	movs	r6, #12
    86b0:	fb06 5000 	mla	r0, r6, r0, r5
    86b4:	6883      	ldr	r3, [r0, #8]
    86b6:	2b00      	cmp	r3, #0
    86b8:	d0c0      	beq.n	863c <hci_cmd_done+0x40>
		cmd(buf)->status = status;
    86ba:	4620      	mov	r0, r4
    86bc:	f013 f95c 	bl	1b978 <net_buf_id>
    86c0:	4370      	muls	r0, r6
    86c2:	f805 8000 	strb.w	r8, [r5, r0]
		k_sem_give(cmd(buf)->sync);
    86c6:	4620      	mov	r0, r4
    86c8:	f013 f956 	bl	1b978 <net_buf_id>
    86cc:	fb06 5500 	mla	r5, r6, r0, r5
    86d0:	68a8      	ldr	r0, [r5, #8]
	z_impl_k_sem_give(sem);
    86d2:	f015 f851 	bl	1d778 <z_impl_k_sem_give>
}
    86d6:	e7b1      	b.n	863c <hci_cmd_done+0x40>
    86d8:	20000958 	.word	0x20000958
    86dc:	000236f0 	.word	0x000236f0
    86e0:	000237b0 	.word	0x000237b0
    86e4:	000258c2 	.word	0x000258c2
    86e8:	20001ebc 	.word	0x20001ebc
    86ec:	000258f7 	.word	0x000258f7

000086f0 <id_find>:
	memcpy(addrs, bt_dev.id_addr, to_copy * sizeof(bt_addr_le_t));
	*count = to_copy;
}

static int id_find(const bt_addr_le_t *addr)
{
    86f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    86f2:	4f0b      	ldr	r7, [pc, #44]	; (8720 <id_find+0x30>)
{
    86f4:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
    86f6:	2500      	movs	r5, #0
    86f8:	79fb      	ldrb	r3, [r7, #7]
    86fa:	b2ec      	uxtb	r4, r5
    86fc:	42a3      	cmp	r3, r4
    86fe:	d802      	bhi.n	8706 <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    8700:	f06f 0401 	mvn.w	r4, #1
    8704:	e009      	b.n	871a <id_find+0x2a>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
    8706:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
}

static inline int bt_addr_le_cmp(const bt_addr_le_t *a, const bt_addr_le_t *b)
{
	return memcmp(a, b, sizeof(*a));
    870a:	2207      	movs	r2, #7
    870c:	4439      	add	r1, r7
    870e:	4630      	mov	r0, r6
    8710:	f017 fba1 	bl	1fe56 <memcmp>
    8714:	3501      	adds	r5, #1
    8716:	2800      	cmp	r0, #0
    8718:	d1ee      	bne.n	86f8 <id_find+0x8>
}
    871a:	4620      	mov	r0, r4
    871c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    871e:	bf00      	nop
    8720:	20000000 	.word	0x20000000

00008724 <hci_tx_thread>:
{
    8724:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8728:	4d51      	ldr	r5, [pc, #324]	; (8870 <hci_tx_thread+0x14c>)
    872a:	4b52      	ldr	r3, [pc, #328]	; (8874 <hci_tx_thread+0x150>)
		events[0].state = K_POLL_STATE_NOT_READY;
    872c:	f8df 914c 	ldr.w	r9, [pc, #332]	; 887c <hci_tx_thread+0x158>
		BT_ASSERT(err == 0);
    8730:	f8df a174 	ldr.w	sl, [pc, #372]	; 88a8 <hci_tx_thread+0x184>
    8734:	1aed      	subs	r5, r5, r3
    8736:	08ed      	lsrs	r5, r5, #3
		events[0].state = K_POLL_STATE_NOT_READY;
    8738:	f8d9 300c 	ldr.w	r3, [r9, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    873c:	484e      	ldr	r0, [pc, #312]	; (8878 <hci_tx_thread+0x154>)
		events[0].state = K_POLL_STATE_NOT_READY;
    873e:	f36f 3310 	bfc	r3, #12, #5
    8742:	f8c9 300c 	str.w	r3, [r9, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    8746:	f002 f953 	bl	a9f0 <bt_conn_prepare_events>
    874a:	1c47      	adds	r7, r0, #1
		parm0.val = timeout;
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
    874c:	484b      	ldr	r0, [pc, #300]	; (887c <hci_tx_thread+0x158>)
    874e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    8752:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8756:	4639      	mov	r1, r7
    8758:	f015 fb5c 	bl	1de14 <z_impl_k_poll>
		BT_ASSERT(err == 0);
    875c:	b160      	cbz	r0, 8778 <hci_tx_thread+0x54>
    875e:	4948      	ldr	r1, [pc, #288]	; (8880 <hci_tx_thread+0x15c>)
    8760:	4848      	ldr	r0, [pc, #288]	; (8884 <hci_tx_thread+0x160>)
    8762:	f241 43f0 	movw	r3, #5360	; 0x14f0
    8766:	4652      	mov	r2, sl
    8768:	f015 fbf3 	bl	1df52 <printk>
    876c:	4040      	eors	r0, r0
    876e:	f380 8811 	msr	BASEPRI, r0
    8772:	f04f 0003 	mov.w	r0, #3
    8776:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    8778:	4e43      	ldr	r6, [pc, #268]	; (8888 <hci_tx_thread+0x164>)
{
    877a:	f8df 8100 	ldr.w	r8, [pc, #256]	; 887c <hci_tx_thread+0x158>
    877e:	f106 0bd0 	add.w	fp, r6, #208	; 0xd0
	for (; count; ev++, count--) {
    8782:	b917      	cbnz	r7, 878a <hci_tx_thread+0x66>
	z_impl_k_yield();
    8784:	f014 ff84 	bl	1d690 <z_impl_k_yield>
	while (1) {
    8788:	e7d6      	b.n	8738 <hci_tx_thread+0x14>
		switch (ev->state) {
    878a:	f8d8 100c 	ldr.w	r1, [r8, #12]
    878e:	f3c1 3104 	ubfx	r1, r1, #12, #5
    8792:	2901      	cmp	r1, #1
    8794:	d959      	bls.n	884a <hci_tx_thread+0x126>
    8796:	2904      	cmp	r1, #4
    8798:	d163      	bne.n	8862 <hci_tx_thread+0x13e>
			if (ev->tag == BT_EVENT_CMD_TX) {
    879a:	f898 300c 	ldrb.w	r3, [r8, #12]
    879e:	2b00      	cmp	r3, #0
    87a0:	d157      	bne.n	8852 <hci_tx_thread+0x12e>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    87a2:	483a      	ldr	r0, [pc, #232]	; (888c <hci_tx_thread+0x168>)
    87a4:	2200      	movs	r2, #0
    87a6:	2300      	movs	r3, #0
    87a8:	f019 fe93 	bl	224d2 <net_buf_get>
	BT_ASSERT(buf);
    87ac:	4604      	mov	r4, r0
    87ae:	b960      	cbnz	r0, 87ca <hci_tx_thread+0xa6>
    87b0:	4937      	ldr	r1, [pc, #220]	; (8890 <hci_tx_thread+0x16c>)
    87b2:	4834      	ldr	r0, [pc, #208]	; (8884 <hci_tx_thread+0x160>)
    87b4:	f241 4392 	movw	r3, #5266	; 0x1492
    87b8:	4652      	mov	r2, sl
    87ba:	f015 fbca 	bl	1df52 <printk>
    87be:	4040      	eors	r0, r0
    87c0:	f380 8811 	msr	BASEPRI, r0
    87c4:	f04f 0003 	mov.w	r0, #3
    87c8:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    87ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    87ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    87d2:	4658      	mov	r0, fp
    87d4:	f014 fff6 	bl	1d7c4 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    87d8:	f8d6 30e8 	ldr.w	r3, [r6, #232]	; 0xe8
    87dc:	b163      	cbz	r3, 87f8 <hci_tx_thread+0xd4>
		BT_ERR("Uncleared pending sent_cmd");
    87de:	01a9      	lsls	r1, r5, #6
    87e0:	482c      	ldr	r0, [pc, #176]	; (8894 <hci_tx_thread+0x170>)
    87e2:	f041 0101 	orr.w	r1, r1, #1
    87e6:	f015 fe74 	bl	1e4d2 <log_0>
		net_buf_unref(bt_dev.sent_cmd);
    87ea:	f8d6 00e8 	ldr.w	r0, [r6, #232]	; 0xe8
    87ee:	f013 f977 	bl	1bae0 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    87f2:	2300      	movs	r3, #0
    87f4:	f8c6 30e8 	str.w	r3, [r6, #232]	; 0xe8
	bt_dev.sent_cmd = net_buf_ref(buf);
    87f8:	4620      	mov	r0, r4
    87fa:	f019 fe9b 	bl	22534 <net_buf_ref>
    87fe:	f8c6 00e8 	str.w	r0, [r6, #232]	; 0xe8
		return bt_hci_ecc_send(buf);
    8802:	4620      	mov	r0, r4
    8804:	f7ff fc18 	bl	8038 <bt_hci_ecc_send>
	if (err) {
    8808:	4601      	mov	r1, r0
    880a:	b1f0      	cbz	r0, 884a <hci_tx_thread+0x126>
		BT_ERR("Unable to send to driver (err %d)", err);
    880c:	01aa      	lsls	r2, r5, #6
    880e:	4822      	ldr	r0, [pc, #136]	; (8898 <hci_tx_thread+0x174>)
    8810:	f042 0201 	orr.w	r2, r2, #1
    8814:	f015 fe6a 	bl	1e4ec <log_1>
	z_impl_k_sem_give(sem);
    8818:	4820      	ldr	r0, [pc, #128]	; (889c <hci_tx_thread+0x178>)
    881a:	f014 ffad 	bl	1d778 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
    881e:	4620      	mov	r0, r4
    8820:	f013 f8aa 	bl	1b978 <net_buf_id>
    8824:	4b1e      	ldr	r3, [pc, #120]	; (88a0 <hci_tx_thread+0x17c>)
    8826:	220c      	movs	r2, #12
    8828:	fb02 3000 	mla	r0, r2, r0, r3
    882c:	211f      	movs	r1, #31
    882e:	8840      	ldrh	r0, [r0, #2]
    8830:	4622      	mov	r2, r4
    8832:	f7ff fee3 	bl	85fc <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    8836:	f8d6 00e8 	ldr.w	r0, [r6, #232]	; 0xe8
    883a:	f013 f951 	bl	1bae0 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    883e:	2300      	movs	r3, #0
		net_buf_unref(buf);
    8840:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
    8842:	f8c6 30e8 	str.w	r3, [r6, #232]	; 0xe8
		net_buf_unref(buf);
    8846:	f013 f94b 	bl	1bae0 <net_buf_unref>
	for (; count; ev++, count--) {
    884a:	f108 0814 	add.w	r8, r8, #20
    884e:	3f01      	subs	r7, #1
    8850:	e797      	b.n	8782 <hci_tx_thread+0x5e>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    8852:	2b01      	cmp	r3, #1
    8854:	d1f9      	bne.n	884a <hci_tx_thread+0x126>
					conn = CONTAINER_OF(ev->fifo,
    8856:	f8d8 0010 	ldr.w	r0, [r8, #16]
					bt_conn_process_tx(conn);
    885a:	3834      	subs	r0, #52	; 0x34
    885c:	f002 fd22 	bl	b2a4 <bt_conn_process_tx>
    8860:	e7f3      	b.n	884a <hci_tx_thread+0x126>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    8862:	01aa      	lsls	r2, r5, #6
    8864:	480f      	ldr	r0, [pc, #60]	; (88a4 <hci_tx_thread+0x180>)
    8866:	f042 0202 	orr.w	r2, r2, #2
    886a:	f015 fe3f 	bl	1e4ec <log_1>
    886e:	e7ec      	b.n	884a <hci_tx_thread+0x126>
    8870:	000237b0 	.word	0x000237b0
    8874:	000236f0 	.word	0x000236f0
    8878:	20000168 	.word	0x20000168
    887c:	20000154 	.word	0x20000154
    8880:	0002595e 	.word	0x0002595e
    8884:	00025967 	.word	0x00025967
    8888:	20000000 	.word	0x20000000
    888c:	200000ec 	.word	0x200000ec
    8890:	00026d28 	.word	0x00026d28
    8894:	00025984 	.word	0x00025984
    8898:	0002599f 	.word	0x0002599f
    889c:	200000d0 	.word	0x200000d0
    88a0:	20001ebc 	.word	0x20001ebc
    88a4:	000259c1 	.word	0x000259c1
    88a8:	0002592a 	.word	0x0002592a

000088ac <hci_num_completed_packets>:
{
    88ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    88b0:	4b46      	ldr	r3, [pc, #280]	; (89cc <hci_num_completed_packets+0x120>)
    88b2:	4d47      	ldr	r5, [pc, #284]	; (89d0 <hci_num_completed_packets+0x124>)
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
    88b4:	f8d0 8008 	ldr.w	r8, [r0, #8]
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
					  struct k_work *work)
{
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
		k_queue_append(&work_q->queue, work);
    88b8:	f8df a120 	ldr.w	sl, [pc, #288]	; 89dc <hci_num_completed_packets+0x130>
    88bc:	1aed      	subs	r5, r5, r3
	for (i = 0; i < evt->num_handles; i++) {
    88be:	2600      	movs	r6, #0
    88c0:	08ed      	lsrs	r5, r5, #3
			tx->pending_no_cb = 0U;
    88c2:	46b1      	mov	r9, r6
	for (i = 0; i < evt->num_handles; i++) {
    88c4:	f898 3000 	ldrb.w	r3, [r8]
    88c8:	429e      	cmp	r6, r3
    88ca:	db02      	blt.n	88d2 <hci_num_completed_packets+0x26>
}
    88cc:	b003      	add	sp, #12
    88ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
    88d2:	eb08 0386 	add.w	r3, r8, r6, lsl #2
    88d6:	f8b3 1001 	ldrh.w	r1, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    88da:	f8b3 7003 	ldrh.w	r7, [r3, #3]
	__asm__ volatile(
    88de:	f04f 0320 	mov.w	r3, #32
    88e2:	f3ef 8b11 	mrs	fp, BASEPRI
    88e6:	f383 8811 	msr	BASEPRI, r3
    88ea:	f3bf 8f6f 	isb	sy
		conn = bt_conn_lookup_handle(handle);
    88ee:	4608      	mov	r0, r1
    88f0:	9101      	str	r1, [sp, #4]
    88f2:	f002 fa39 	bl	ad68 <bt_conn_lookup_handle>
		if (!conn) {
    88f6:	9901      	ldr	r1, [sp, #4]
    88f8:	4604      	mov	r4, r0
    88fa:	b958      	cbnz	r0, 8914 <hci_num_completed_packets+0x68>
	__asm__ volatile(
    88fc:	f38b 8811 	msr	BASEPRI, fp
    8900:	f3bf 8f6f 	isb	sy
			BT_ERR("No connection for handle %u", handle);
    8904:	01aa      	lsls	r2, r5, #6
    8906:	4833      	ldr	r0, [pc, #204]	; (89d4 <hci_num_completed_packets+0x128>)
    8908:	f042 0201 	orr.w	r2, r2, #1
    890c:	f015 fdee 	bl	1e4ec <log_1>
	for (i = 0; i < evt->num_handles; i++) {
    8910:	3601      	adds	r6, #1
    8912:	e7d7      	b.n	88c4 <hci_num_completed_packets+0x18>
    8914:	f38b 8811 	msr	BASEPRI, fp
    8918:	f3bf 8f6f 	isb	sy
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    891c:	f100 0b28 	add.w	fp, r0, #40	; 0x28
		while (count--) {
    8920:	b357      	cbz	r7, 8978 <hci_num_completed_packets+0xcc>
	__asm__ volatile(
    8922:	f04f 0320 	mov.w	r3, #32
    8926:	f3ef 8211 	mrs	r2, BASEPRI
    892a:	f383 8811 	msr	BASEPRI, r3
    892e:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
    8932:	69e3      	ldr	r3, [r4, #28]
    8934:	b16b      	cbz	r3, 8952 <hci_num_completed_packets+0xa6>
				conn->pending_no_cb--;
    8936:	3b01      	subs	r3, #1
    8938:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    893a:	f382 8811 	msr	BASEPRI, r2
    893e:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
    8942:	4620      	mov	r0, r4
    8944:	f001 fec2 	bl	a6cc <bt_conn_get_pkts>
    8948:	3f01      	subs	r7, #1
    894a:	f014 ff15 	bl	1d778 <z_impl_k_sem_give>
    894e:	b2bf      	uxth	r7, r7
    8950:	e7e6      	b.n	8920 <hci_num_completed_packets+0x74>
Z_GENLIST_IS_EMPTY(slist)
    8952:	6963      	ldr	r3, [r4, #20]
Z_GENLIST_GET(slist, snode)
    8954:	b12b      	cbz	r3, 8962 <hci_num_completed_packets+0xb6>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    8956:	69a1      	ldr	r1, [r4, #24]
    8958:	6818      	ldr	r0, [r3, #0]
	list->head = node;
    895a:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    895c:	428b      	cmp	r3, r1
	list->tail = node;
    895e:	bf08      	it	eq
    8960:	61a0      	streq	r0, [r4, #24]
    8962:	f382 8811 	msr	BASEPRI, r2
    8966:	f3bf 8f6f 	isb	sy
			if (!node) {
    896a:	b94b      	cbnz	r3, 8980 <hci_num_completed_packets+0xd4>
				BT_ERR("packets count mismatch");
    896c:	01a9      	lsls	r1, r5, #6
    896e:	481a      	ldr	r0, [pc, #104]	; (89d8 <hci_num_completed_packets+0x12c>)
    8970:	f041 0101 	orr.w	r1, r1, #1
    8974:	f015 fdad 	bl	1e4d2 <log_0>
		bt_conn_unref(conn);
    8978:	4620      	mov	r0, r4
    897a:	f017 fe40 	bl	205fe <bt_conn_unref>
    897e:	e7c7      	b.n	8910 <hci_num_completed_packets+0x64>
	__asm__ volatile(
    8980:	f04f 0220 	mov.w	r2, #32
    8984:	f3ef 8111 	mrs	r1, BASEPRI
    8988:	f382 8811 	msr	BASEPRI, r2
    898c:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
    8990:	68da      	ldr	r2, [r3, #12]
    8992:	61e2      	str	r2, [r4, #28]
	parent->next = child;
    8994:	f8c3 9000 	str.w	r9, [r3]
Z_GENLIST_APPEND(slist, snode)
    8998:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
    899a:	f8c3 900c 	str.w	r9, [r3, #12]
    899e:	b98a      	cbnz	r2, 89c4 <hci_num_completed_packets+0x118>
	list->head = node;
    89a0:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
    89a4:	f381 8811 	msr	BASEPRI, r1
    89a8:	f3bf 8f6f 	isb	sy
    89ac:	2100      	movs	r1, #0
    89ae:	f104 0030 	add.w	r0, r4, #48	; 0x30
    89b2:	f017 fbb9 	bl	20128 <atomic_test_and_set_bit>
    89b6:	2800      	cmp	r0, #0
    89b8:	d1c3      	bne.n	8942 <hci_num_completed_packets+0x96>
		k_queue_append(&work_q->queue, work);
    89ba:	4659      	mov	r1, fp
    89bc:	4650      	mov	r0, sl
    89be:	f01a f9a5 	bl	22d0c <k_queue_append>
    89c2:	e7be      	b.n	8942 <hci_num_completed_packets+0x96>
	parent->next = child;
    89c4:	6013      	str	r3, [r2, #0]
	list->tail = node;
    89c6:	6263      	str	r3, [r4, #36]	; 0x24
}
    89c8:	e7ec      	b.n	89a4 <hci_num_completed_packets+0xf8>
    89ca:	bf00      	nop
    89cc:	000236f0 	.word	0x000236f0
    89d0:	000237b0 	.word	0x000237b0
    89d4:	000259e2 	.word	0x000259e2
    89d8:	000259fe 	.word	0x000259fe
    89dc:	20001c30 	.word	0x20001c30

000089e0 <hci_cmd_status>:
{
    89e0:	b538      	push	{r3, r4, r5, lr}
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    89e2:	2104      	movs	r1, #4
{
    89e4:	4604      	mov	r4, r0
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    89e6:	3008      	adds	r0, #8
    89e8:	f019 fe13 	bl	22612 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    89ec:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    89ee:	7801      	ldrb	r1, [r0, #0]
    89f0:	8840      	ldrh	r0, [r0, #2]
    89f2:	4622      	mov	r2, r4
    89f4:	f7ff fe02 	bl	85fc <hci_cmd_done>
	if (ncmd) {
    89f8:	b125      	cbz	r5, 8a04 <hci_cmd_status+0x24>
    89fa:	4803      	ldr	r0, [pc, #12]	; (8a08 <hci_cmd_status+0x28>)
}
    89fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    8a00:	f014 beba 	b.w	1d778 <z_impl_k_sem_give>
    8a04:	bd38      	pop	{r3, r4, r5, pc}
    8a06:	bf00      	nop
    8a08:	200000d0 	.word	0x200000d0

00008a0c <hci_cmd_complete>:
{
    8a0c:	b538      	push	{r3, r4, r5, lr}
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    8a0e:	2103      	movs	r1, #3
{
    8a10:	4604      	mov	r4, r0
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    8a12:	3008      	adds	r0, #8
    8a14:	f019 fdfd 	bl	22612 <net_buf_simple_pull_mem>
	status = buf->data[0];
    8a18:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
    8a1a:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
    8a1c:	7819      	ldrb	r1, [r3, #0]
    8a1e:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    8a22:	4622      	mov	r2, r4
    8a24:	f7ff fdea 	bl	85fc <hci_cmd_done>
	if (ncmd) {
    8a28:	b125      	cbz	r5, 8a34 <hci_cmd_complete+0x28>
    8a2a:	4803      	ldr	r0, [pc, #12]	; (8a38 <hci_cmd_complete+0x2c>)
}
    8a2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    8a30:	f014 bea2 	b.w	1d778 <z_impl_k_sem_give>
    8a34:	bd38      	pop	{r3, r4, r5, pc}
    8a36:	bf00      	nop
    8a38:	200000d0 	.word	0x200000d0

00008a3c <bt_hci_cmd_create>:
{
    8a3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    8a40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    8a44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
{
    8a48:	4605      	mov	r5, r0
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    8a4a:	4816      	ldr	r0, [pc, #88]	; (8aa4 <bt_hci_cmd_create+0x68>)
	cmd(buf)->opcode = opcode;
    8a4c:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8aa8 <bt_hci_cmd_create+0x6c>
{
    8a50:	460e      	mov	r6, r1
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    8a52:	f019 fd39 	bl	224c8 <net_buf_alloc_fixed>
    8a56:	4604      	mov	r4, r0
	net_buf_reserve(buf, BT_BUF_RESERVE);
    8a58:	f100 0b08 	add.w	fp, r0, #8
    8a5c:	2100      	movs	r1, #0
	*(uint8_t *)net_buf_user_data(buf) = type;
    8a5e:	2700      	movs	r7, #0
    8a60:	4658      	mov	r0, fp
    8a62:	f019 fd56 	bl	22512 <net_buf_simple_reserve>
    8a66:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
    8a68:	4620      	mov	r0, r4
    8a6a:	f012 ff85 	bl	1b978 <net_buf_id>
    8a6e:	f04f 0a0c 	mov.w	sl, #12
    8a72:	fb0a 8000 	mla	r0, sl, r0, r8
    8a76:	8045      	strh	r5, [r0, #2]
	cmd(buf)->sync = NULL;
    8a78:	4620      	mov	r0, r4
    8a7a:	f012 ff7d 	bl	1b978 <net_buf_id>
    8a7e:	fb0a 8000 	mla	r0, sl, r0, r8
    8a82:	6087      	str	r7, [r0, #8]
	cmd(buf)->state = NULL;
    8a84:	4620      	mov	r0, r4
    8a86:	f012 ff77 	bl	1b978 <net_buf_id>
    8a8a:	fb0a 8000 	mla	r0, sl, r0, r8
	hdr = net_buf_add(buf, sizeof(*hdr));
    8a8e:	2103      	movs	r1, #3
	cmd(buf)->state = NULL;
    8a90:	6047      	str	r7, [r0, #4]
	hdr = net_buf_add(buf, sizeof(*hdr));
    8a92:	4658      	mov	r0, fp
    8a94:	f019 fd80 	bl	22598 <net_buf_simple_add>
	hdr->param_len = param_len;
    8a98:	7086      	strb	r6, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    8a9a:	8005      	strh	r5, [r0, #0]
}
    8a9c:	4620      	mov	r0, r4
    8a9e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8aa2:	bf00      	nop
    8aa4:	20000958 	.word	0x20000958
    8aa8:	20001ebc 	.word	0x20001ebc

00008aac <bt_hci_cmd_send>:
{
    8aac:	b538      	push	{r3, r4, r5, lr}
    8aae:	4605      	mov	r5, r0
	if (!buf) {
    8ab0:	460c      	mov	r4, r1
    8ab2:	b919      	cbnz	r1, 8abc <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
    8ab4:	f7ff ffc2 	bl	8a3c <bt_hci_cmd_create>
		if (!buf) {
    8ab8:	4604      	mov	r4, r0
    8aba:	b1f0      	cbz	r0, 8afa <bt_hci_cmd_send+0x4e>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    8abc:	f640 4335 	movw	r3, #3125	; 0xc35
    8ac0:	429d      	cmp	r5, r3
    8ac2:	d114      	bne.n	8aee <bt_hci_cmd_send+0x42>
		return bt_hci_ecc_send(buf);
    8ac4:	4620      	mov	r0, r4
    8ac6:	f7ff fab7 	bl	8038 <bt_hci_ecc_send>
		if (err) {
    8aca:	4605      	mov	r5, r0
    8acc:	b168      	cbz	r0, 8aea <bt_hci_cmd_send+0x3e>
    8ace:	4b0c      	ldr	r3, [pc, #48]	; (8b00 <bt_hci_cmd_send+0x54>)
    8ad0:	4a0c      	ldr	r2, [pc, #48]	; (8b04 <bt_hci_cmd_send+0x58>)
    8ad2:	1ad2      	subs	r2, r2, r3
    8ad4:	08d2      	lsrs	r2, r2, #3
			BT_ERR("Unable to send to driver (err %d)", err);
    8ad6:	0192      	lsls	r2, r2, #6
    8ad8:	4601      	mov	r1, r0
    8ada:	f042 0201 	orr.w	r2, r2, #1
    8ade:	480a      	ldr	r0, [pc, #40]	; (8b08 <bt_hci_cmd_send+0x5c>)
    8ae0:	f015 fd04 	bl	1e4ec <log_1>
			net_buf_unref(buf);
    8ae4:	4620      	mov	r0, r4
    8ae6:	f012 fffb 	bl	1bae0 <net_buf_unref>
}
    8aea:	4628      	mov	r0, r5
    8aec:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    8aee:	4807      	ldr	r0, [pc, #28]	; (8b0c <bt_hci_cmd_send+0x60>)
    8af0:	4621      	mov	r1, r4
    8af2:	f019 fd12 	bl	2251a <net_buf_put>
	return 0;
    8af6:	2500      	movs	r5, #0
    8af8:	e7f7      	b.n	8aea <bt_hci_cmd_send+0x3e>
			return -ENOBUFS;
    8afa:	f06f 0536 	mvn.w	r5, #54	; 0x36
    8afe:	e7f4      	b.n	8aea <bt_hci_cmd_send+0x3e>
    8b00:	000236f0 	.word	0x000236f0
    8b04:	000237b0 	.word	0x000237b0
    8b08:	0002599f 	.word	0x0002599f
    8b0c:	200000ec 	.word	0x200000ec

00008b10 <le_ltk_request>:
{
    8b10:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
    8b12:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    8b14:	882e      	ldrh	r6, [r5, #0]
    8b16:	b2b7      	uxth	r7, r6
{
    8b18:	b087      	sub	sp, #28
	conn = bt_conn_lookup_handle(handle);
    8b1a:	4638      	mov	r0, r7
    8b1c:	f002 f924 	bl	ad68 <bt_conn_lookup_handle>
	if (!conn) {
    8b20:	4604      	mov	r4, r0
    8b22:	b960      	cbnz	r0, 8b3e <le_ltk_request+0x2e>
    8b24:	4a26      	ldr	r2, [pc, #152]	; (8bc0 <le_ltk_request+0xb0>)
    8b26:	4b27      	ldr	r3, [pc, #156]	; (8bc4 <le_ltk_request+0xb4>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    8b28:	4827      	ldr	r0, [pc, #156]	; (8bc8 <le_ltk_request+0xb8>)
    8b2a:	1ad2      	subs	r2, r2, r3
    8b2c:	08d2      	lsrs	r2, r2, #3
    8b2e:	0192      	lsls	r2, r2, #6
    8b30:	f042 0201 	orr.w	r2, r2, #1
    8b34:	4639      	mov	r1, r7
    8b36:	f015 fcd9 	bl	1e4ec <log_1>
}
    8b3a:	b007      	add	sp, #28
    8b3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
    8b3e:	af02      	add	r7, sp, #8
    8b40:	f8d5 2002 	ldr.w	r2, [r5, #2]
    8b44:	f8d5 3006 	ldr.w	r3, [r5, #6]
    8b48:	9701      	str	r7, [sp, #4]
    8b4a:	8969      	ldrh	r1, [r5, #10]
    8b4c:	9100      	str	r1, [sp, #0]
    8b4e:	f019 fb84 	bl	2225a <bt_smp_request_ltk>
    8b52:	b320      	cbz	r0, 8b9e <le_ltk_request+0x8e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    8b54:	2112      	movs	r1, #18
    8b56:	f242 001a 	movw	r0, #8218	; 0x201a
    8b5a:	f7ff ff6f 	bl	8a3c <bt_hci_cmd_create>
	if (!buf) {
    8b5e:	4605      	mov	r5, r0
    8b60:	b968      	cbnz	r0, 8b7e <le_ltk_request+0x6e>
    8b62:	4917      	ldr	r1, [pc, #92]	; (8bc0 <le_ltk_request+0xb0>)
    8b64:	4b17      	ldr	r3, [pc, #92]	; (8bc4 <le_ltk_request+0xb4>)
		BT_ERR("Out of command buffers");
    8b66:	4819      	ldr	r0, [pc, #100]	; (8bcc <le_ltk_request+0xbc>)
    8b68:	1ac9      	subs	r1, r1, r3
    8b6a:	08c9      	lsrs	r1, r1, #3
    8b6c:	0189      	lsls	r1, r1, #6
    8b6e:	f041 0101 	orr.w	r1, r1, #1
    8b72:	f015 fcae 	bl	1e4d2 <log_0>
	bt_conn_unref(conn);
    8b76:	4620      	mov	r0, r4
    8b78:	f017 fd41 	bl	205fe <bt_conn_unref>
    8b7c:	e7dd      	b.n	8b3a <le_ltk_request+0x2a>
	cp = net_buf_add(buf, sizeof(*cp));
    8b7e:	2112      	movs	r1, #18
    8b80:	3008      	adds	r0, #8
    8b82:	f019 fd09 	bl	22598 <net_buf_simple_add>
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
    8b86:	4639      	mov	r1, r7
	cp->handle = sys_cpu_to_le16(handle);
    8b88:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
    8b8c:	2210      	movs	r2, #16
    8b8e:	f017 f972 	bl	1fe76 <memcpy>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
    8b92:	4629      	mov	r1, r5
    8b94:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    8b98:	f7ff ff88 	bl	8aac <bt_hci_cmd_send>
    8b9c:	e7eb      	b.n	8b76 <le_ltk_request+0x66>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
    8b9e:	2102      	movs	r1, #2
    8ba0:	f242 001b 	movw	r0, #8219	; 0x201b
    8ba4:	f7ff ff4a 	bl	8a3c <bt_hci_cmd_create>
	if (!buf) {
    8ba8:	4605      	mov	r5, r0
    8baa:	2800      	cmp	r0, #0
    8bac:	d0d9      	beq.n	8b62 <le_ltk_request+0x52>
	cp = net_buf_add(buf, sizeof(*cp));
    8bae:	2102      	movs	r1, #2
    8bb0:	3008      	adds	r0, #8
    8bb2:	f019 fcf1 	bl	22598 <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    8bb6:	4629      	mov	r1, r5
	cp->handle = sys_cpu_to_le16(handle);
    8bb8:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    8bba:	f242 001b 	movw	r0, #8219	; 0x201b
    8bbe:	e7eb      	b.n	8b98 <le_ltk_request+0x88>
    8bc0:	000237b0 	.word	0x000237b0
    8bc4:	000236f0 	.word	0x000236f0
    8bc8:	000257ea 	.word	0x000257ea
    8bcc:	00025a15 	.word	0x00025a15

00008bd0 <le_conn_param_neg_reply>:
{
    8bd0:	b570      	push	{r4, r5, r6, lr}
    8bd2:	4606      	mov	r6, r0
    8bd4:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    8bd6:	f242 0021 	movw	r0, #8225	; 0x2021
    8bda:	2103      	movs	r1, #3
    8bdc:	f7ff ff2e 	bl	8a3c <bt_hci_cmd_create>
	if (!buf) {
    8be0:	4604      	mov	r4, r0
    8be2:	b958      	cbnz	r0, 8bfc <le_conn_param_neg_reply+0x2c>
    8be4:	490c      	ldr	r1, [pc, #48]	; (8c18 <le_conn_param_neg_reply+0x48>)
    8be6:	4b0d      	ldr	r3, [pc, #52]	; (8c1c <le_conn_param_neg_reply+0x4c>)
		BT_ERR("Unable to allocate buffer");
    8be8:	480d      	ldr	r0, [pc, #52]	; (8c20 <le_conn_param_neg_reply+0x50>)
    8bea:	1ac9      	subs	r1, r1, r3
    8bec:	08c9      	lsrs	r1, r1, #3
    8bee:	0189      	lsls	r1, r1, #6
}
    8bf0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to allocate buffer");
    8bf4:	f041 0101 	orr.w	r1, r1, #1
    8bf8:	f015 bc6b 	b.w	1e4d2 <log_0>
	cp = net_buf_add(buf, sizeof(*cp));
    8bfc:	2103      	movs	r1, #3
    8bfe:	3008      	adds	r0, #8
    8c00:	f019 fcca 	bl	22598 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
    8c04:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
    8c06:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    8c08:	4621      	mov	r1, r4
    8c0a:	f242 0021 	movw	r0, #8225	; 0x2021
}
    8c0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    8c12:	f7ff bf4b 	b.w	8aac <bt_hci_cmd_send>
    8c16:	bf00      	nop
    8c18:	000237b0 	.word	0x000237b0
    8c1c:	000236f0 	.word	0x000236f0
    8c20:	00025a2c 	.word	0x00025a2c

00008c24 <le_conn_param_req>:
{
    8c24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
    8c26:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    8c28:	78d9      	ldrb	r1, [r3, #3]
    8c2a:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    8c2c:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    8c2e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    8c32:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    8c36:	7959      	ldrb	r1, [r3, #5]
    8c38:	791a      	ldrb	r2, [r3, #4]
    8c3a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    8c3e:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
    8c42:	799a      	ldrb	r2, [r3, #6]
    8c44:	79d9      	ldrb	r1, [r3, #7]
    8c46:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    8c4a:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
    8c4e:	7a1a      	ldrb	r2, [r3, #8]
    8c50:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
    8c52:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
    8c54:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
    8c58:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
    8c5a:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
    8c5e:	f002 f883 	bl	ad68 <bt_conn_lookup_handle>
	if (!conn) {
    8c62:	4606      	mov	r6, r0
    8c64:	b980      	cbnz	r0, 8c88 <le_conn_param_req+0x64>
    8c66:	4b20      	ldr	r3, [pc, #128]	; (8ce8 <le_conn_param_req+0xc4>)
    8c68:	4a20      	ldr	r2, [pc, #128]	; (8cec <le_conn_param_req+0xc8>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    8c6a:	4821      	ldr	r0, [pc, #132]	; (8cf0 <le_conn_param_req+0xcc>)
    8c6c:	1ad2      	subs	r2, r2, r3
    8c6e:	08d2      	lsrs	r2, r2, #3
    8c70:	0192      	lsls	r2, r2, #6
    8c72:	4621      	mov	r1, r4
    8c74:	f042 0201 	orr.w	r2, r2, #1
    8c78:	f015 fc38 	bl	1e4ec <log_1>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
    8c7c:	2102      	movs	r1, #2
    8c7e:	4620      	mov	r0, r4
    8c80:	f7ff ffa6 	bl	8bd0 <le_conn_param_neg_reply>
}
    8c84:	b003      	add	sp, #12
    8c86:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
    8c88:	4669      	mov	r1, sp
    8c8a:	f001 fd57 	bl	a73c <le_param_req>
    8c8e:	b938      	cbnz	r0, 8ca0 <le_conn_param_req+0x7c>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
    8c90:	211e      	movs	r1, #30
    8c92:	4620      	mov	r0, r4
    8c94:	f7ff ff9c 	bl	8bd0 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    8c98:	4630      	mov	r0, r6
    8c9a:	f017 fcb0 	bl	205fe <bt_conn_unref>
    8c9e:	e7f1      	b.n	8c84 <le_conn_param_req+0x60>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    8ca0:	210e      	movs	r1, #14
    8ca2:	f242 0020 	movw	r0, #8224	; 0x2020
    8ca6:	f7ff fec9 	bl	8a3c <bt_hci_cmd_create>
	if (!buf) {
    8caa:	4605      	mov	r5, r0
    8cac:	2800      	cmp	r0, #0
    8cae:	d0f3      	beq.n	8c98 <le_conn_param_req+0x74>
	cp = net_buf_add(buf, sizeof(*cp));
    8cb0:	210e      	movs	r1, #14
    8cb2:	3008      	adds	r0, #8
    8cb4:	f019 fc70 	bl	22598 <net_buf_simple_add>
	(void)memset(cp, 0, sizeof(*cp));
    8cb8:	220e      	movs	r2, #14
	cp = net_buf_add(buf, sizeof(*cp));
    8cba:	4604      	mov	r4, r0
	(void)memset(cp, 0, sizeof(*cp));
    8cbc:	2100      	movs	r1, #0
    8cbe:	f017 f905 	bl	1fecc <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    8cc2:	f8bd 3000 	ldrh.w	r3, [sp]
    8cc6:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    8cc8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    8ccc:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    8cce:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    8cd2:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    8cd4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
    8cd8:	8027      	strh	r7, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    8cda:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    8cdc:	4629      	mov	r1, r5
    8cde:	f242 0020 	movw	r0, #8224	; 0x2020
    8ce2:	f7ff fee3 	bl	8aac <bt_hci_cmd_send>
    8ce6:	e7d7      	b.n	8c98 <le_conn_param_req+0x74>
    8ce8:	000236f0 	.word	0x000236f0
    8cec:	000237b0 	.word	0x000237b0
    8cf0:	000257ea 	.word	0x000257ea

00008cf4 <bt_hci_cmd_send_sync>:
{
    8cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8cf8:	4607      	mov	r7, r0
    8cfa:	b086      	sub	sp, #24
    8cfc:	4615      	mov	r5, r2
	if (!buf) {
    8cfe:	460c      	mov	r4, r1
    8d00:	b921      	cbnz	r1, 8d0c <bt_hci_cmd_send_sync+0x18>
		buf = bt_hci_cmd_create(opcode, 0);
    8d02:	f7ff fe9b 	bl	8a3c <bt_hci_cmd_create>
		if (!buf) {
    8d06:	4604      	mov	r4, r0
    8d08:	2800      	cmp	r0, #0
    8d0a:	d055      	beq.n	8db8 <bt_hci_cmd_send_sync+0xc4>
	return z_impl_k_sem_init(sem, initial_count, limit);
    8d0c:	2201      	movs	r2, #1
    8d0e:	2100      	movs	r1, #0
    8d10:	4668      	mov	r0, sp
    8d12:	f01a f96e 	bl	22ff2 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    8d16:	4620      	mov	r0, r4
    8d18:	f012 fe2e 	bl	1b978 <net_buf_id>
    8d1c:	4e28      	ldr	r6, [pc, #160]	; (8dc0 <bt_hci_cmd_send_sync+0xcc>)
    8d1e:	230c      	movs	r3, #12
    8d20:	fb03 6000 	mla	r0, r3, r0, r6
    8d24:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_ref(buf);
    8d28:	4620      	mov	r0, r4
    8d2a:	f019 fc03 	bl	22534 <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    8d2e:	4825      	ldr	r0, [pc, #148]	; (8dc4 <bt_hci_cmd_send_sync+0xd0>)
    8d30:	4621      	mov	r1, r4
    8d32:	f019 fbf2 	bl	2251a <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    8d36:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    8d3a:	2300      	movs	r3, #0
    8d3c:	4668      	mov	r0, sp
    8d3e:	f014 fd41 	bl	1d7c4 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
    8d42:	4680      	mov	r8, r0
    8d44:	b180      	cbz	r0, 8d68 <bt_hci_cmd_send_sync+0x74>
    8d46:	4a20      	ldr	r2, [pc, #128]	; (8dc8 <bt_hci_cmd_send_sync+0xd4>)
    8d48:	4920      	ldr	r1, [pc, #128]	; (8dcc <bt_hci_cmd_send_sync+0xd8>)
    8d4a:	4821      	ldr	r0, [pc, #132]	; (8dd0 <bt_hci_cmd_send_sync+0xdc>)
    8d4c:	f44f 73b9 	mov.w	r3, #370	; 0x172
    8d50:	f015 f8ff 	bl	1df52 <printk>
    8d54:	481f      	ldr	r0, [pc, #124]	; (8dd4 <bt_hci_cmd_send_sync+0xe0>)
    8d56:	4641      	mov	r1, r8
    8d58:	f015 f8fb 	bl	1df52 <printk>
    8d5c:	4040      	eors	r0, r0
    8d5e:	f380 8811 	msr	BASEPRI, r0
    8d62:	f04f 0003 	mov.w	r0, #3
    8d66:	df02      	svc	2
	status = cmd(buf)->status;
    8d68:	4620      	mov	r0, r4
    8d6a:	f012 fe05 	bl	1b978 <net_buf_id>
    8d6e:	230c      	movs	r3, #12
    8d70:	4343      	muls	r3, r0
    8d72:	5cf6      	ldrb	r6, [r6, r3]
	if (status) {
    8d74:	b1be      	cbz	r6, 8da6 <bt_hci_cmd_send_sync+0xb2>
    8d76:	4a18      	ldr	r2, [pc, #96]	; (8dd8 <bt_hci_cmd_send_sync+0xe4>)
    8d78:	4b18      	ldr	r3, [pc, #96]	; (8ddc <bt_hci_cmd_send_sync+0xe8>)
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
    8d7a:	4819      	ldr	r0, [pc, #100]	; (8de0 <bt_hci_cmd_send_sync+0xec>)
    8d7c:	1a9b      	subs	r3, r3, r2
    8d7e:	08db      	lsrs	r3, r3, #3
    8d80:	019b      	lsls	r3, r3, #6
    8d82:	f043 0302 	orr.w	r3, r3, #2
    8d86:	4632      	mov	r2, r6
    8d88:	4639      	mov	r1, r7
    8d8a:	f015 fbc3 	bl	1e514 <log_2>
		net_buf_unref(buf);
    8d8e:	4620      	mov	r0, r4
    8d90:	f012 fea6 	bl	1bae0 <net_buf_unref>
			return -EIO;
    8d94:	2e09      	cmp	r6, #9
    8d96:	bf0c      	ite	eq
    8d98:	f06f 003c 	mvneq.w	r0, #60	; 0x3c
    8d9c:	f06f 0004 	mvnne.w	r0, #4
}
    8da0:	b006      	add	sp, #24
    8da2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (rsp) {
    8da6:	b115      	cbz	r5, 8dae <bt_hci_cmd_send_sync+0xba>
		*rsp = buf;
    8da8:	602c      	str	r4, [r5, #0]
	return 0;
    8daa:	4630      	mov	r0, r6
    8dac:	e7f8      	b.n	8da0 <bt_hci_cmd_send_sync+0xac>
		net_buf_unref(buf);
    8dae:	4620      	mov	r0, r4
    8db0:	f012 fe96 	bl	1bae0 <net_buf_unref>
	return 0;
    8db4:	4628      	mov	r0, r5
    8db6:	e7f3      	b.n	8da0 <bt_hci_cmd_send_sync+0xac>
			return -ENOBUFS;
    8db8:	f06f 0036 	mvn.w	r0, #54	; 0x36
    8dbc:	e7f0      	b.n	8da0 <bt_hci_cmd_send_sync+0xac>
    8dbe:	bf00      	nop
    8dc0:	20001ebc 	.word	0x20001ebc
    8dc4:	200000ec 	.word	0x200000ec
    8dc8:	0002592a 	.word	0x0002592a
    8dcc:	0002595e 	.word	0x0002595e
    8dd0:	00025967 	.word	0x00025967
    8dd4:	00025a46 	.word	0x00025a46
    8dd8:	000236f0 	.word	0x000236f0
    8ddc:	000237b0 	.word	0x000237b0
    8de0:	00025a66 	.word	0x00025a66

00008de4 <hci_le_read_max_data_len>:
{
    8de4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    8de6:	4606      	mov	r6, r0
    8de8:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    8dea:	aa01      	add	r2, sp, #4
    8dec:	2100      	movs	r1, #0
    8dee:	f242 002f 	movw	r0, #8239	; 0x202f
    8df2:	f7ff ff7f 	bl	8cf4 <bt_hci_cmd_send_sync>
	if (err) {
    8df6:	4604      	mov	r4, r0
    8df8:	b160      	cbz	r0, 8e14 <hci_le_read_max_data_len+0x30>
    8dfa:	490c      	ldr	r1, [pc, #48]	; (8e2c <hci_le_read_max_data_len+0x48>)
    8dfc:	4b0c      	ldr	r3, [pc, #48]	; (8e30 <hci_le_read_max_data_len+0x4c>)
		BT_ERR("Failed to read DLE max data len");
    8dfe:	480d      	ldr	r0, [pc, #52]	; (8e34 <hci_le_read_max_data_len+0x50>)
    8e00:	1ac9      	subs	r1, r1, r3
    8e02:	08c9      	lsrs	r1, r1, #3
    8e04:	0189      	lsls	r1, r1, #6
    8e06:	f041 0101 	orr.w	r1, r1, #1
    8e0a:	f015 fb62 	bl	1e4d2 <log_0>
}
    8e0e:	4620      	mov	r0, r4
    8e10:	b002      	add	sp, #8
    8e12:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    8e14:	9801      	ldr	r0, [sp, #4]
    8e16:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    8e18:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    8e1c:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
    8e1e:	f8b3 3003 	ldrh.w	r3, [r3, #3]
    8e22:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
    8e24:	f012 fe5c 	bl	1bae0 <net_buf_unref>
	return 0;
    8e28:	e7f1      	b.n	8e0e <hci_le_read_max_data_len+0x2a>
    8e2a:	bf00      	nop
    8e2c:	000237b0 	.word	0x000237b0
    8e30:	000236f0 	.word	0x000236f0
    8e34:	00025a82 	.word	0x00025a82

00008e38 <set_random_address>:
{
    8e38:	b570      	push	{r4, r5, r6, lr}
	return memcmp(a, b, sizeof(*a));
    8e3a:	4e15      	ldr	r6, [pc, #84]	; (8e90 <set_random_address+0x58>)
    8e3c:	2206      	movs	r2, #6
    8e3e:	f106 0131 	add.w	r1, r6, #49	; 0x31
    8e42:	4605      	mov	r5, r0
    8e44:	f017 f807 	bl	1fe56 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    8e48:	4604      	mov	r4, r0
    8e4a:	b1e0      	cbz	r0, 8e86 <set_random_address+0x4e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    8e4c:	2106      	movs	r1, #6
    8e4e:	f242 0005 	movw	r0, #8197	; 0x2005
    8e52:	f7ff fdf3 	bl	8a3c <bt_hci_cmd_create>
	if (!buf) {
    8e56:	4604      	mov	r4, r0
    8e58:	b1b8      	cbz	r0, 8e8a <set_random_address+0x52>
	net_buf_add_mem(buf, addr, sizeof(*addr));
    8e5a:	2206      	movs	r2, #6
    8e5c:	4629      	mov	r1, r5
    8e5e:	3008      	adds	r0, #8
    8e60:	f019 fba0 	bl	225a4 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    8e64:	4621      	mov	r1, r4
    8e66:	2200      	movs	r2, #0
    8e68:	f242 0005 	movw	r0, #8197	; 0x2005
    8e6c:	f7ff ff42 	bl	8cf4 <bt_hci_cmd_send_sync>
	if (err) {
    8e70:	4604      	mov	r4, r0
    8e72:	b940      	cbnz	r0, 8e86 <set_random_address+0x4e>
}

static inline void bt_addr_copy(bt_addr_t *dst, const bt_addr_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    8e74:	2206      	movs	r2, #6
    8e76:	4629      	mov	r1, r5
    8e78:	f106 0031 	add.w	r0, r6, #49	; 0x31
    8e7c:	f016 fffb 	bl	1fe76 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    8e80:	2301      	movs	r3, #1
    8e82:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
}
    8e86:	4620      	mov	r0, r4
    8e88:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    8e8a:	f06f 0436 	mvn.w	r4, #54	; 0x36
    8e8e:	e7fa      	b.n	8e86 <set_random_address+0x4e>
    8e90:	20000000 	.word	0x20000000

00008e94 <le_create_conn_set_random_addr.isra.0>:
static int le_create_conn_set_random_addr(bool use_filter, uint8_t *own_addr_type)
    8e94:	b538      	push	{r3, r4, r5, lr}
		if (addr->type == BT_ADDR_LE_RANDOM) {
    8e96:	4c07      	ldr	r4, [pc, #28]	; (8eb4 <le_create_conn_set_random_addr.isra.0+0x20>)
    8e98:	7823      	ldrb	r3, [r4, #0]
    8e9a:	2b01      	cmp	r3, #1
static int le_create_conn_set_random_addr(bool use_filter, uint8_t *own_addr_type)
    8e9c:	4605      	mov	r5, r0
		if (addr->type == BT_ADDR_LE_RANDOM) {
    8e9e:	d003      	beq.n	8ea8 <le_create_conn_set_random_addr.isra.0+0x14>
		*own_addr_type = addr->type;
    8ea0:	7823      	ldrb	r3, [r4, #0]
    8ea2:	702b      	strb	r3, [r5, #0]
	return 0;
    8ea4:	2000      	movs	r0, #0
}
    8ea6:	bd38      	pop	{r3, r4, r5, pc}
			err = set_random_address(&addr->a);
    8ea8:	1c60      	adds	r0, r4, #1
    8eaa:	f7ff ffc5 	bl	8e38 <set_random_address>
			if (err) {
    8eae:	2800      	cmp	r0, #0
    8eb0:	d0f6      	beq.n	8ea0 <le_create_conn_set_random_addr.isra.0+0xc>
    8eb2:	e7f8      	b.n	8ea6 <le_create_conn_set_random_addr.isra.0+0x12>
    8eb4:	20000000 	.word	0x20000000

00008eb8 <set_le_adv_enable_legacy>:
{
    8eb8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    8eba:	4606      	mov	r6, r0
    8ebc:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    8ebe:	f242 000a 	movw	r0, #8202	; 0x200a
    8ec2:	2101      	movs	r1, #1
    8ec4:	f7ff fdba 	bl	8a3c <bt_hci_cmd_create>
	if (!buf) {
    8ec8:	4604      	mov	r4, r0
    8eca:	b1e8      	cbz	r0, 8f08 <set_le_adv_enable_legacy+0x50>
	if (enable) {
    8ecc:	3008      	adds	r0, #8
    8ece:	b1cd      	cbz	r5, 8f04 <set_le_adv_enable_legacy+0x4c>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
    8ed0:	2101      	movs	r1, #1
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    8ed2:	f019 fb70 	bl	225b6 <net_buf_simple_add_u8>
	cmd_state_set_init(&state, adv->flags, BT_ADV_ENABLED, enable);
    8ed6:	3614      	adds	r6, #20
	state->bit = bit;
    8ed8:	2306      	movs	r3, #6
	cmd(buf)->state = &state;
    8eda:	4620      	mov	r0, r4
	state->bit = bit;
    8edc:	9302      	str	r3, [sp, #8]
	state->target = target;
    8ede:	9601      	str	r6, [sp, #4]
	state->val = val;
    8ee0:	f88d 500c 	strb.w	r5, [sp, #12]
	cmd(buf)->state = &state;
    8ee4:	f012 fd48 	bl	1b978 <net_buf_id>
    8ee8:	4b09      	ldr	r3, [pc, #36]	; (8f10 <set_le_adv_enable_legacy+0x58>)
    8eea:	220c      	movs	r2, #12
    8eec:	fb02 3000 	mla	r0, r2, r0, r3
    8ef0:	ab01      	add	r3, sp, #4
    8ef2:	6043      	str	r3, [r0, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    8ef4:	2200      	movs	r2, #0
    8ef6:	4621      	mov	r1, r4
    8ef8:	f242 000a 	movw	r0, #8202	; 0x200a
    8efc:	f7ff fefa 	bl	8cf4 <bt_hci_cmd_send_sync>
}
    8f00:	b004      	add	sp, #16
    8f02:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    8f04:	4629      	mov	r1, r5
    8f06:	e7e4      	b.n	8ed2 <set_le_adv_enable_legacy+0x1a>
		return -ENOBUFS;
    8f08:	f06f 0036 	mvn.w	r0, #54	; 0x36
    8f0c:	e7f8      	b.n	8f00 <set_le_adv_enable_legacy+0x48>
    8f0e:	bf00      	nop
    8f10:	20001ebc 	.word	0x20001ebc

00008f14 <set_le_scan_enable_legacy>:
{
    8f14:	b530      	push	{r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    8f16:	2102      	movs	r1, #2
{
    8f18:	b085      	sub	sp, #20
    8f1a:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    8f1c:	f242 000c 	movw	r0, #8204	; 0x200c
    8f20:	f7ff fd8c 	bl	8a3c <bt_hci_cmd_create>
	if (!buf) {
    8f24:	4605      	mov	r5, r0
    8f26:	b348      	cbz	r0, 8f7c <set_le_scan_enable_legacy+0x68>
	cp = net_buf_add(buf, sizeof(*cp));
    8f28:	2102      	movs	r1, #2
    8f2a:	3008      	adds	r0, #8
    8f2c:	f019 fb34 	bl	22598 <net_buf_simple_add>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    8f30:	2c01      	cmp	r4, #1
	cp = net_buf_add(buf, sizeof(*cp));
    8f32:	4603      	mov	r3, r0
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    8f34:	d11f      	bne.n	8f76 <set_le_scan_enable_legacy+0x62>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    8f36:	4813      	ldr	r0, [pc, #76]	; (8f84 <set_le_scan_enable_legacy+0x70>)
    8f38:	f017 f8be 	bl	200b8 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    8f3c:	f3c0 2000 	ubfx	r0, r0, #8, #1
    8f40:	7058      	strb	r0, [r3, #1]
	cp->enable = enable;
    8f42:	701c      	strb	r4, [r3, #0]
	state->target = target;
    8f44:	4b0f      	ldr	r3, [pc, #60]	; (8f84 <set_le_scan_enable_legacy+0x70>)
    8f46:	9301      	str	r3, [sp, #4]
	cmd_state_set_init(&state, bt_dev.flags, BT_DEV_SCANNING,
    8f48:	f004 0401 	and.w	r4, r4, #1
	state->bit = bit;
    8f4c:	2305      	movs	r3, #5
	cmd(buf)->state = &state;
    8f4e:	4628      	mov	r0, r5
	state->bit = bit;
    8f50:	9302      	str	r3, [sp, #8]
	cmd_state_set_init(&state, bt_dev.flags, BT_DEV_SCANNING,
    8f52:	f88d 400c 	strb.w	r4, [sp, #12]
	cmd(buf)->state = &state;
    8f56:	f012 fd0f 	bl	1b978 <net_buf_id>
    8f5a:	4b0b      	ldr	r3, [pc, #44]	; (8f88 <set_le_scan_enable_legacy+0x74>)
    8f5c:	220c      	movs	r2, #12
    8f5e:	fb02 3000 	mla	r0, r2, r0, r3
    8f62:	ab01      	add	r3, sp, #4
    8f64:	6043      	str	r3, [r0, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    8f66:	2200      	movs	r2, #0
    8f68:	4629      	mov	r1, r5
    8f6a:	f242 000c 	movw	r0, #8204	; 0x200c
    8f6e:	f7ff fec1 	bl	8cf4 <bt_hci_cmd_send_sync>
}
    8f72:	b005      	add	sp, #20
    8f74:	bd30      	pop	{r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    8f76:	2200      	movs	r2, #0
    8f78:	7042      	strb	r2, [r0, #1]
    8f7a:	e7e2      	b.n	8f42 <set_le_scan_enable_legacy+0x2e>
		return -ENOBUFS;
    8f7c:	f06f 0036 	mvn.w	r0, #54	; 0x36
    8f80:	e7f7      	b.n	8f72 <set_le_scan_enable_legacy+0x5e>
    8f82:	bf00      	nop
    8f84:	20000098 	.word	0x20000098
    8f88:	20001ebc 	.word	0x20001ebc

00008f8c <start_le_scan_legacy>:
{
    8f8c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    8f8e:	4605      	mov	r5, r0
    8f90:	460e      	mov	r6, r1
    8f92:	4614      	mov	r4, r2
	(void)memset(&set_param, 0, sizeof(set_param));
    8f94:	2100      	movs	r1, #0
    8f96:	2207      	movs	r2, #7
    8f98:	4668      	mov	r0, sp
    8f9a:	f016 ff97 	bl	1fecc <memset>
		*own_addr_type = bt_dev.id_addr[0].type;
    8f9e:	481f      	ldr	r0, [pc, #124]	; (901c <start_le_scan_legacy+0x90>)
	set_param.scan_type = scan_type;
    8fa0:	f88d 5000 	strb.w	r5, [sp]
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_NO_WHITELIST;
    8fa4:	2300      	movs	r3, #0
    8fa6:	f88d 3006 	strb.w	r3, [sp, #6]
		*own_addr_type = bt_dev.id_addr[0].type;
    8faa:	f810 3b2c 	ldrb.w	r3, [r0], #44
	set_param.interval = sys_cpu_to_le16(interval);
    8fae:	f8ad 6001 	strh.w	r6, [sp, #1]
	set_param.window = sys_cpu_to_le16(window);
    8fb2:	f8ad 4003 	strh.w	r4, [sp, #3]
		*own_addr_type = bt_dev.id_addr[0].type;
    8fb6:	f88d 3005 	strb.w	r3, [sp, #5]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    8fba:	f017 f87d 	bl	200b8 <atomic_get>
		    adv && !atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    8fbe:	0642      	lsls	r2, r0, #25
    8fc0:	d406      	bmi.n	8fd0 <start_le_scan_legacy+0x44>
			err = le_set_private_addr(BT_ID_DEFAULT);
    8fc2:	f017 f8cc 	bl	2015e <le_adv_set_private_addr.isra.0>
			if (err) {
    8fc6:	4604      	mov	r4, r0
    8fc8:	bb10      	cbnz	r0, 9010 <start_le_scan_legacy+0x84>
			*own_addr_type = BT_ADDR_LE_RANDOM;
    8fca:	2301      	movs	r3, #1
    8fcc:	f88d 3005 	strb.w	r3, [sp, #5]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    8fd0:	2107      	movs	r1, #7
    8fd2:	f242 000b 	movw	r0, #8203	; 0x200b
    8fd6:	f7ff fd31 	bl	8a3c <bt_hci_cmd_create>
	if (!buf) {
    8fda:	4604      	mov	r4, r0
    8fdc:	b1d8      	cbz	r0, 9016 <start_le_scan_legacy+0x8a>
	net_buf_add_mem(buf, &set_param, sizeof(set_param));
    8fde:	2207      	movs	r2, #7
    8fe0:	4669      	mov	r1, sp
    8fe2:	3008      	adds	r0, #8
    8fe4:	f019 fade 	bl	225a4 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_PARAM, buf, NULL);
    8fe8:	4621      	mov	r1, r4
    8fea:	2200      	movs	r2, #0
    8fec:	f242 000b 	movw	r0, #8203	; 0x200b
    8ff0:	f7ff fe80 	bl	8cf4 <bt_hci_cmd_send_sync>
	if (err) {
    8ff4:	4604      	mov	r4, r0
    8ff6:	b958      	cbnz	r0, 9010 <start_le_scan_legacy+0x84>
	return set_le_scan_enable_legacy(enable);
    8ff8:	2001      	movs	r0, #1
    8ffa:	f7ff ff8b 	bl	8f14 <set_le_scan_enable_legacy>
	if (err) {
    8ffe:	4604      	mov	r4, r0
    9000:	b930      	cbnz	r0, 9010 <start_le_scan_legacy+0x84>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_ACTIVE_SCAN, active_scan);
    9002:	1e6b      	subs	r3, r5, #1
    9004:	425a      	negs	r2, r3
    9006:	4806      	ldr	r0, [pc, #24]	; (9020 <start_le_scan_legacy+0x94>)
    9008:	415a      	adcs	r2, r3
    900a:	2107      	movs	r1, #7
    900c:	f017 f87b 	bl	20106 <atomic_set_bit_to>
}
    9010:	4620      	mov	r0, r4
    9012:	b002      	add	sp, #8
    9014:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    9016:	f06f 0436 	mvn.w	r4, #54	; 0x36
    901a:	e7f9      	b.n	9010 <start_le_scan_legacy+0x84>
    901c:	20000000 	.word	0x20000000
    9020:	20000098 	.word	0x20000098

00009024 <bt_le_create_conn_legacy>:
{
    9024:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    9028:	4606      	mov	r6, r0
	err = le_create_conn_set_random_addr(use_filter, &own_addr_type);
    902a:	f10d 0003 	add.w	r0, sp, #3
    902e:	f7ff ff31 	bl	8e94 <le_create_conn_set_random_addr.isra.0>
	if (err) {
    9032:	4605      	mov	r5, r0
    9034:	2800      	cmp	r0, #0
    9036:	d150      	bne.n	90da <bt_le_create_conn_legacy+0xb6>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
    9038:	2119      	movs	r1, #25
    903a:	f242 000d 	movw	r0, #8205	; 0x200d
    903e:	f7ff fcfd 	bl	8a3c <bt_hci_cmd_create>
	if (!buf) {
    9042:	4607      	mov	r7, r0
    9044:	2800      	cmp	r0, #0
    9046:	d04f      	beq.n	90e8 <bt_le_create_conn_legacy+0xc4>
	cp = net_buf_add(buf, sizeof(*cp));
    9048:	2119      	movs	r1, #25
    904a:	3008      	adds	r0, #8
    904c:	f019 faa4 	bl	22598 <net_buf_simple_add>
	memset(cp, 0, sizeof(*cp));
    9050:	4629      	mov	r1, r5
	cp = net_buf_add(buf, sizeof(*cp));
    9052:	4604      	mov	r4, r0
	memset(cp, 0, sizeof(*cp));
    9054:	2219      	movs	r2, #25
    9056:	f016 ff39 	bl	1fecc <memset>
		if (!bt_dev.le.rl_size ||
    905a:	4d25      	ldr	r5, [pc, #148]	; (90f0 <bt_le_create_conn_legacy+0xcc>)
	cp->own_addr_type = own_addr_type;
    905c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    9060:	7323      	strb	r3, [r4, #12]
		if (!bt_dev.le.rl_size ||
    9062:	f895 30cc 	ldrb.w	r3, [r5, #204]	; 0xcc
    9066:	2b00      	cmp	r3, #0
    9068:	d03b      	beq.n	90e2 <bt_le_create_conn_legacy+0xbe>
    906a:	f895 20cd 	ldrb.w	r2, [r5, #205]	; 0xcd
    906e:	429a      	cmp	r2, r3
    9070:	d837      	bhi.n	90e2 <bt_le_create_conn_legacy+0xbe>
		const bt_addr_le_t *peer_addr = &conn->le.dst;
    9072:	f106 0188 	add.w	r1, r6, #136	; 0x88
		bt_addr_le_copy(&cp->peer_addr, peer_addr);
    9076:	1d60      	adds	r0, r4, #5
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_DIRECT;
    9078:	f04f 0800 	mov.w	r8, #0
		bt_addr_le_copy(&cp->peer_addr, peer_addr);
    907c:	f017 f822 	bl	200c4 <bt_addr_le_copy>
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_DIRECT;
    9080:	f884 8004 	strb.w	r8, [r4, #4]
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
    9084:	89ab      	ldrh	r3, [r5, #12]
    9086:	8023      	strh	r3, [r4, #0]
	cp->scan_window = sys_cpu_to_le16(bt_dev.create_param.window);
    9088:	89eb      	ldrh	r3, [r5, #14]
    908a:	8063      	strh	r3, [r4, #2]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
    908c:	f8b6 30a0 	ldrh.w	r3, [r6, #160]	; 0xa0
    9090:	f8a4 300d 	strh.w	r3, [r4, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
    9094:	f8b6 30a2 	ldrh.w	r3, [r6, #162]	; 0xa2
    9098:	f8a4 300f 	strh.w	r3, [r4, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
    909c:	f8b6 30a4 	ldrh.w	r3, [r6, #164]	; 0xa4
    90a0:	f8a4 3011 	strh.w	r3, [r4, #17]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
    90a4:	f8b6 30a6 	ldrh.w	r3, [r6, #166]	; 0xa6
    90a8:	f8a4 3013 	strh.w	r3, [r4, #19]
	state->target = target;
    90ac:	4b11      	ldr	r3, [pc, #68]	; (90f4 <bt_le_create_conn_legacy+0xd0>)
    90ae:	9301      	str	r3, [sp, #4]
	state->bit = bit;
    90b0:	230b      	movs	r3, #11
    90b2:	9302      	str	r3, [sp, #8]
	cmd(buf)->state = &state;
    90b4:	4638      	mov	r0, r7
	state->val = val;
    90b6:	2301      	movs	r3, #1
    90b8:	f88d 300c 	strb.w	r3, [sp, #12]
	cmd(buf)->state = &state;
    90bc:	f012 fc5c 	bl	1b978 <net_buf_id>
    90c0:	4b0d      	ldr	r3, [pc, #52]	; (90f8 <bt_le_create_conn_legacy+0xd4>)
    90c2:	220c      	movs	r2, #12
    90c4:	fb02 3000 	mla	r0, r2, r0, r3
    90c8:	ab01      	add	r3, sp, #4
    90ca:	6043      	str	r3, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    90cc:	4642      	mov	r2, r8
    90ce:	4639      	mov	r1, r7
    90d0:	f242 000d 	movw	r0, #8205	; 0x200d
    90d4:	f7ff fe0e 	bl	8cf4 <bt_hci_cmd_send_sync>
    90d8:	4605      	mov	r5, r0
}
    90da:	4628      	mov	r0, r5
    90dc:	b004      	add	sp, #16
    90de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			peer_addr = &conn->le.resp_addr;
    90e2:	f106 0196 	add.w	r1, r6, #150	; 0x96
    90e6:	e7c6      	b.n	9076 <bt_le_create_conn_legacy+0x52>
		return -ENOBUFS;
    90e8:	f06f 0536 	mvn.w	r5, #54	; 0x36
    90ec:	e7f5      	b.n	90da <bt_le_create_conn_legacy+0xb6>
    90ee:	bf00      	nop
    90f0:	20000000 	.word	0x20000000
    90f4:	20000098 	.word	0x20000098
    90f8:	20001ebc 	.word	0x20001ebc

000090fc <bt_le_create_conn_cancel>:
{
    90fc:	b530      	push	{r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
    90fe:	2100      	movs	r1, #0
{
    9100:	b085      	sub	sp, #20
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
    9102:	f242 000e 	movw	r0, #8206	; 0x200e
    9106:	f7ff fc99 	bl	8a3c <bt_hci_cmd_create>
	state->target = target;
    910a:	4b0c      	ldr	r3, [pc, #48]	; (913c <bt_le_create_conn_cancel+0x40>)
    910c:	9301      	str	r3, [sp, #4]
	state->val = val;
    910e:	2500      	movs	r5, #0
	state->bit = bit;
    9110:	230b      	movs	r3, #11
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
    9112:	4604      	mov	r4, r0
	state->bit = bit;
    9114:	9302      	str	r3, [sp, #8]
	state->val = val;
    9116:	f88d 500c 	strb.w	r5, [sp, #12]
	cmd(buf)->state = &state;
    911a:	f012 fc2d 	bl	1b978 <net_buf_id>
    911e:	4b08      	ldr	r3, [pc, #32]	; (9140 <bt_le_create_conn_cancel+0x44>)
    9120:	220c      	movs	r2, #12
    9122:	fb02 3000 	mla	r0, r2, r0, r3
    9126:	ab01      	add	r3, sp, #4
    9128:	6043      	str	r3, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN_CANCEL, buf, NULL);
    912a:	462a      	mov	r2, r5
    912c:	4621      	mov	r1, r4
    912e:	f242 000e 	movw	r0, #8206	; 0x200e
    9132:	f7ff fddf 	bl	8cf4 <bt_hci_cmd_send_sync>
}
    9136:	b005      	add	sp, #20
    9138:	bd30      	pop	{r4, r5, pc}
    913a:	bf00      	nop
    913c:	20000098 	.word	0x20000098
    9140:	20001ebc 	.word	0x20001ebc

00009144 <conn_auto_initiate>:
{
    9144:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    9146:	7b43      	ldrb	r3, [r0, #13]
    9148:	2b06      	cmp	r3, #6
{
    914a:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
    914c:	d11e      	bne.n	918c <conn_auto_initiate+0x48>
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
    914e:	1d06      	adds	r6, r0, #4
    9150:	4630      	mov	r0, r6
    9152:	f016 ffb1 	bl	200b8 <atomic_get>
    9156:	0480      	lsls	r0, r0, #18
    9158:	d41a      	bmi.n	9190 <conn_auto_initiate+0x4c>
    915a:	78e3      	ldrb	r3, [r4, #3]
    915c:	b123      	cbz	r3, 9168 <conn_auto_initiate+0x24>
	     BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features))) {
    915e:	4b2e      	ldr	r3, [pc, #184]	; (9218 <conn_auto_initiate+0xd4>)
	    ((conn->role == BT_HCI_ROLE_MASTER) ||
    9160:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
    9164:	0719      	lsls	r1, r3, #28
    9166:	d513      	bpl.n	9190 <conn_auto_initiate+0x4c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    9168:	2102      	movs	r1, #2
    916a:	f242 0016 	movw	r0, #8214	; 0x2016
    916e:	f7ff fc65 	bl	8a3c <bt_hci_cmd_create>
	if (!buf) {
    9172:	4605      	mov	r5, r0
    9174:	b160      	cbz	r0, 9190 <conn_auto_initiate+0x4c>
	cp = net_buf_add(buf, sizeof(*cp));
    9176:	2102      	movs	r1, #2
    9178:	3008      	adds	r0, #8
    917a:	f019 fa0d 	bl	22598 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    917e:	8823      	ldrh	r3, [r4, #0]
    9180:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    9182:	4629      	mov	r1, r5
    9184:	f242 0016 	movw	r0, #8214	; 0x2016
    9188:	f7ff fc90 	bl	8aac <bt_hci_cmd_send>
}
    918c:	b004      	add	sp, #16
    918e:	bd70      	pop	{r4, r5, r6, pc}
    9190:	4630      	mov	r0, r6
    9192:	f016 ff91 	bl	200b8 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    9196:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    919a:	4d1f      	ldr	r5, [pc, #124]	; (9218 <conn_auto_initiate+0xd4>)
    919c:	f3c0 3100 	ubfx	r1, r0, #12, #1
    91a0:	d11a      	bne.n	91d8 <conn_auto_initiate+0x94>
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
    91a2:	f895 30a1 	ldrb.w	r3, [r5, #161]	; 0xa1
    91a6:	07da      	lsls	r2, r3, #31
    91a8:	d516      	bpl.n	91d8 <conn_auto_initiate+0x94>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
    91aa:	2302      	movs	r3, #2
    91ac:	9100      	str	r1, [sp, #0]
    91ae:	461a      	mov	r2, r3
    91b0:	4620      	mov	r0, r4
    91b2:	f017 f899 	bl	202e8 <bt_le_set_phy>
		if (!err) {
    91b6:	4601      	mov	r1, r0
    91b8:	b920      	cbnz	r0, 91c4 <conn_auto_initiate+0x80>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    91ba:	2180      	movs	r1, #128	; 0x80
    91bc:	4630      	mov	r0, r6
    91be:	f016 ff93 	bl	200e8 <atomic_or>
			return;
    91c2:	e7e3      	b.n	918c <conn_auto_initiate+0x48>
    91c4:	4a15      	ldr	r2, [pc, #84]	; (921c <conn_auto_initiate+0xd8>)
    91c6:	4b16      	ldr	r3, [pc, #88]	; (9220 <conn_auto_initiate+0xdc>)
		BT_ERR("Failed to set LE PHY (%d)", err);
    91c8:	4816      	ldr	r0, [pc, #88]	; (9224 <conn_auto_initiate+0xe0>)
    91ca:	1ad2      	subs	r2, r2, r3
    91cc:	08d2      	lsrs	r2, r2, #3
    91ce:	0192      	lsls	r2, r2, #6
    91d0:	f042 0201 	orr.w	r2, r2, #1
    91d4:	f015 f98a 	bl	1e4ec <log_1>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
    91d8:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
    91dc:	069b      	lsls	r3, r3, #26
    91de:	d5d5      	bpl.n	918c <conn_auto_initiate+0x48>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    91e0:	f10d 010e 	add.w	r1, sp, #14
    91e4:	a803      	add	r0, sp, #12
    91e6:	f7ff fdfd 	bl	8de4 <hci_le_read_max_data_len>
		if (!err) {
    91ea:	2800      	cmp	r0, #0
    91ec:	d1ce      	bne.n	918c <conn_auto_initiate+0x48>
			err = bt_le_set_data_len(conn, tx_octets, tx_time);
    91ee:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    91f2:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    91f6:	4620      	mov	r0, r4
    91f8:	f017 f859 	bl	202ae <bt_le_set_data_len>
			if (err) {
    91fc:	4601      	mov	r1, r0
    91fe:	2800      	cmp	r0, #0
    9200:	d0c4      	beq.n	918c <conn_auto_initiate+0x48>
    9202:	4b07      	ldr	r3, [pc, #28]	; (9220 <conn_auto_initiate+0xdc>)
    9204:	4a05      	ldr	r2, [pc, #20]	; (921c <conn_auto_initiate+0xd8>)
				BT_ERR("Failed to set data len (%d)", err);
    9206:	4808      	ldr	r0, [pc, #32]	; (9228 <conn_auto_initiate+0xe4>)
    9208:	1ad2      	subs	r2, r2, r3
    920a:	08d2      	lsrs	r2, r2, #3
    920c:	0192      	lsls	r2, r2, #6
    920e:	f042 0201 	orr.w	r2, r2, #1
    9212:	f015 f96b 	bl	1e4ec <log_1>
    9216:	e7b9      	b.n	918c <conn_auto_initiate+0x48>
    9218:	20000000 	.word	0x20000000
    921c:	000237b0 	.word	0x000237b0
    9220:	000236f0 	.word	0x000236f0
    9224:	00025ab4 	.word	0x00025ab4
    9228:	00025ace 	.word	0x00025ace

0000922c <le_phy_update_complete>:
{
    922c:	b538      	push	{r3, r4, r5, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    922e:	6883      	ldr	r3, [r0, #8]
    9230:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    9234:	4628      	mov	r0, r5
    9236:	f001 fd97 	bl	ad68 <bt_conn_lookup_handle>
	if (!conn) {
    923a:	4604      	mov	r4, r0
    923c:	b960      	cbnz	r0, 9258 <le_phy_update_complete+0x2c>
    923e:	4b11      	ldr	r3, [pc, #68]	; (9284 <le_phy_update_complete+0x58>)
    9240:	4a11      	ldr	r2, [pc, #68]	; (9288 <le_phy_update_complete+0x5c>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    9242:	4812      	ldr	r0, [pc, #72]	; (928c <le_phy_update_complete+0x60>)
    9244:	1ad2      	subs	r2, r2, r3
    9246:	08d2      	lsrs	r2, r2, #3
    9248:	0192      	lsls	r2, r2, #6
    924a:	4629      	mov	r1, r5
    924c:	f042 0201 	orr.w	r2, r2, #1
}
    9250:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    9254:	f015 b94a 	b.w	1e4ec <log_1>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    9258:	1d05      	adds	r5, r0, #4
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    925a:	f06f 0180 	mvn.w	r1, #128	; 0x80
    925e:	4628      	mov	r0, r5
    9260:	f016 ff33 	bl	200ca <atomic_and>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    9264:	0603      	lsls	r3, r0, #24
    9266:	d507      	bpl.n	9278 <le_phy_update_complete+0x4c>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    9268:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    926c:	4628      	mov	r0, r5
    926e:	f016 ff3b 	bl	200e8 <atomic_or>
		conn_auto_initiate(conn);
    9272:	4620      	mov	r0, r4
    9274:	f7ff ff66 	bl	9144 <conn_auto_initiate>
	bt_conn_unref(conn);
    9278:	4620      	mov	r0, r4
}
    927a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    927e:	f017 b9be 	b.w	205fe <bt_conn_unref>
    9282:	bf00      	nop
    9284:	000236f0 	.word	0x000236f0
    9288:	000237b0 	.word	0x000237b0
    928c:	000257ea 	.word	0x000257ea

00009290 <le_remote_feat_complete>:
{
    9290:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
    9292:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    9294:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    9298:	4630      	mov	r0, r6
    929a:	f001 fd65 	bl	ad68 <bt_conn_lookup_handle>
	if (!conn) {
    929e:	4604      	mov	r4, r0
    92a0:	b960      	cbnz	r0, 92bc <le_remote_feat_complete+0x2c>
    92a2:	4a10      	ldr	r2, [pc, #64]	; (92e4 <le_remote_feat_complete+0x54>)
    92a4:	4b10      	ldr	r3, [pc, #64]	; (92e8 <le_remote_feat_complete+0x58>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    92a6:	4811      	ldr	r0, [pc, #68]	; (92ec <le_remote_feat_complete+0x5c>)
    92a8:	1ad2      	subs	r2, r2, r3
    92aa:	08d2      	lsrs	r2, r2, #3
    92ac:	0192      	lsls	r2, r2, #6
    92ae:	4631      	mov	r1, r6
    92b0:	f042 0201 	orr.w	r2, r2, #1
}
    92b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    92b8:	f015 b918 	b.w	1e4ec <log_1>
	if (!evt->status) {
    92bc:	782b      	ldrb	r3, [r5, #0]
    92be:	b923      	cbnz	r3, 92ca <le_remote_feat_complete+0x3a>
		memcpy(conn->le.features, evt->features,
    92c0:	2208      	movs	r2, #8
    92c2:	1ce9      	adds	r1, r5, #3
    92c4:	30ac      	adds	r0, #172	; 0xac
    92c6:	f016 fdd6 	bl	1fe76 <memcpy>
    92ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    92ce:	1d20      	adds	r0, r4, #4
    92d0:	f016 ff0a 	bl	200e8 <atomic_or>
	conn_auto_initiate(conn);
    92d4:	4620      	mov	r0, r4
    92d6:	f7ff ff35 	bl	9144 <conn_auto_initiate>
	bt_conn_unref(conn);
    92da:	4620      	mov	r0, r4
}
    92dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    92e0:	f017 b98d 	b.w	205fe <bt_conn_unref>
    92e4:	000237b0 	.word	0x000237b0
    92e8:	000236f0 	.word	0x000236f0
    92ec:	000257ea 	.word	0x000257ea

000092f0 <bt_id_add>:
{
    92f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    92f4:	4f63      	ldr	r7, [pc, #396]	; (9484 <bt_id_add+0x194>)
    92f6:	f897 20cc 	ldrb.w	r2, [r7, #204]	; 0xcc
    92fa:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
{
    92fe:	4604      	mov	r4, r0
    9300:	463d      	mov	r5, r7
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    9302:	b10a      	cbz	r2, 9308 <bt_id_add+0x18>
    9304:	429a      	cmp	r2, r3
    9306:	d209      	bcs.n	931c <bt_id_add+0x2c>
		bt_dev.le.rl_entries++;
    9308:	3301      	adds	r3, #1
    930a:	f885 30cd 	strb.w	r3, [r5, #205]	; 0xcd
		keys->state |= BT_KEYS_ID_ADDED;
    930e:	7a23      	ldrb	r3, [r4, #8]
    9310:	f043 0304 	orr.w	r3, r3, #4
    9314:	7223      	strb	r3, [r4, #8]
}
    9316:	b002      	add	sp, #8
    9318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
    931c:	2100      	movs	r1, #0
    931e:	2205      	movs	r2, #5
    9320:	4608      	mov	r0, r1
    9322:	f001 fd91 	bl	ae48 <bt_conn_lookup_state_le>
	if (conn) {
    9326:	4606      	mov	r6, r0
    9328:	b168      	cbz	r0, 9346 <bt_id_add+0x56>
    932a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    932e:	f107 0098 	add.w	r0, r7, #152	; 0x98
    9332:	f016 fed9 	bl	200e8 <atomic_or>
	keys->state |= flag;
    9336:	7a23      	ldrb	r3, [r4, #8]
    9338:	f043 0301 	orr.w	r3, r3, #1
    933c:	7223      	strb	r3, [r4, #8]
		bt_conn_unref(conn);
    933e:	4630      	mov	r0, r6
    9340:	f017 f95d 	bl	205fe <bt_conn_unref>
		return;
    9344:	e7e7      	b.n	9316 <bt_id_add+0x26>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    9346:	f107 0098 	add.w	r0, r7, #152	; 0x98
    934a:	f016 feb5 	bl	200b8 <atomic_get>
	func(&bt_dev.adv, data);
    934e:	4631      	mov	r1, r6
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    9350:	f3c0 1740 	ubfx	r7, r0, #5, #1
    9354:	f105 0018 	add.w	r0, r5, #24
    9358:	f016 ff13 	bl	20182 <adv_pause_enabled>
	if (scan_enabled) {
    935c:	b117      	cbz	r7, 9364 <bt_id_add+0x74>
		set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    935e:	4630      	mov	r0, r6
    9360:	f016 ff7d 	bl	2025e <set_le_scan_enable>
	if (bt_dev.le.rl_entries) {
    9364:	f895 30cd 	ldrb.w	r3, [r5, #205]	; 0xcd
    9368:	b173      	cbz	r3, 9388 <bt_id_add+0x98>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
    936a:	2000      	movs	r0, #0
    936c:	f016 ff5f 	bl	2022e <addr_res_enable>
		if (err) {
    9370:	b150      	cbz	r0, 9388 <bt_id_add+0x98>
    9372:	4945      	ldr	r1, [pc, #276]	; (9488 <bt_id_add+0x198>)
    9374:	4b45      	ldr	r3, [pc, #276]	; (948c <bt_id_add+0x19c>)
			BT_WARN("Failed to disable address resolution");
    9376:	4846      	ldr	r0, [pc, #280]	; (9490 <bt_id_add+0x1a0>)
    9378:	1ac9      	subs	r1, r1, r3
    937a:	08c9      	lsrs	r1, r1, #3
    937c:	0189      	lsls	r1, r1, #6
    937e:	f041 0102 	orr.w	r1, r1, #2
		BT_WARN("Set privacy mode command is not supported");
    9382:	f015 f8a6 	bl	1e4d2 <log_0>
	if (err) {
    9386:	e023      	b.n	93d0 <bt_id_add+0xe0>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
    9388:	f895 20cd 	ldrb.w	r2, [r5, #205]	; 0xcd
    938c:	f895 30cc 	ldrb.w	r3, [r5, #204]	; 0xcc
    9390:	429a      	cmp	r2, r3
    9392:	d129      	bne.n	93e8 <bt_id_add+0xf8>
    9394:	4b3d      	ldr	r3, [pc, #244]	; (948c <bt_id_add+0x19c>)
    9396:	4e3c      	ldr	r6, [pc, #240]	; (9488 <bt_id_add+0x198>)
		BT_WARN("Resolving list size exceeded. Switching to host.");
    9398:	483e      	ldr	r0, [pc, #248]	; (9494 <bt_id_add+0x1a4>)
    939a:	1af6      	subs	r6, r6, r3
    939c:	08f6      	lsrs	r6, r6, #3
    939e:	01b6      	lsls	r6, r6, #6
    93a0:	f046 0102 	orr.w	r1, r6, #2
    93a4:	f015 f895 	bl	1e4d2 <log_0>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
    93a8:	2200      	movs	r2, #0
    93aa:	4611      	mov	r1, r2
    93ac:	f242 0029 	movw	r0, #8233	; 0x2029
    93b0:	f7ff fca0 	bl	8cf4 <bt_hci_cmd_send_sync>
		if (err) {
    93b4:	b118      	cbz	r0, 93be <bt_id_add+0xce>
			BT_ERR("Failed to clear resolution list");
    93b6:	4838      	ldr	r0, [pc, #224]	; (9498 <bt_id_add+0x1a8>)
    93b8:	f046 0101 	orr.w	r1, r6, #1
    93bc:	e7e1      	b.n	9382 <bt_id_add+0x92>
		bt_dev.le.rl_entries++;
    93be:	f895 30cd 	ldrb.w	r3, [r5, #205]	; 0xcd
    93c2:	3301      	adds	r3, #1
    93c4:	f885 30cd 	strb.w	r3, [r5, #205]	; 0xcd
		keys->state |= BT_KEYS_ID_ADDED;
    93c8:	7a23      	ldrb	r3, [r4, #8]
    93ca:	f043 0304 	orr.w	r3, r3, #4
    93ce:	7223      	strb	r3, [r4, #8]
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
    93d0:	2001      	movs	r0, #1
    93d2:	f016 ff2c 	bl	2022e <addr_res_enable>
	if (scan_enabled) {
    93d6:	b117      	cbz	r7, 93de <bt_id_add+0xee>
		set_le_scan_enable(BT_HCI_LE_SCAN_ENABLE);
    93d8:	2001      	movs	r0, #1
    93da:	f016 ff40 	bl	2025e <set_le_scan_enable>
	func(&bt_dev.adv, data);
    93de:	482f      	ldr	r0, [pc, #188]	; (949c <bt_id_add+0x1ac>)
    93e0:	2100      	movs	r1, #0
    93e2:	f016 fee3 	bl	201ac <adv_unpause_enabled>
}
    93e6:	e796      	b.n	9316 <bt_id_add+0x26>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
    93e8:	f104 0801 	add.w	r8, r4, #1
    93ec:	f104 012a 	add.w	r1, r4, #42	; 0x2a
    93f0:	4640      	mov	r0, r8
    93f2:	f016 feeb 	bl	201cc <hci_id_add.isra.0>
	if (err) {
    93f6:	4606      	mov	r6, r0
    93f8:	b140      	cbz	r0, 940c <bt_id_add+0x11c>
    93fa:	4923      	ldr	r1, [pc, #140]	; (9488 <bt_id_add+0x198>)
    93fc:	4b23      	ldr	r3, [pc, #140]	; (948c <bt_id_add+0x19c>)
		BT_ERR("Failed to add IRK to controller");
    93fe:	4828      	ldr	r0, [pc, #160]	; (94a0 <bt_id_add+0x1b0>)
    9400:	1ac9      	subs	r1, r1, r3
    9402:	08c9      	lsrs	r1, r1, #3
    9404:	0189      	lsls	r1, r1, #6
    9406:	f041 0101 	orr.w	r1, r1, #1
    940a:	e7ba      	b.n	9382 <bt_id_add+0x92>
	bt_dev.le.rl_entries++;
    940c:	f895 30cd 	ldrb.w	r3, [r5, #205]	; 0xcd
    9410:	3301      	adds	r3, #1
    9412:	f885 30cd 	strb.w	r3, [r5, #205]	; 0xcd
	keys->state |= BT_KEYS_ID_ADDED;
    9416:	7a23      	ldrb	r3, [r4, #8]
    9418:	f043 0304 	orr.w	r3, r3, #4
    941c:	7223      	strb	r3, [r4, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
    941e:	f895 306f 	ldrb.w	r3, [r5, #111]	; 0x6f
    9422:	075b      	lsls	r3, r3, #29
    9424:	d408      	bmi.n	9438 <bt_id_add+0x148>
    9426:	4918      	ldr	r1, [pc, #96]	; (9488 <bt_id_add+0x198>)
    9428:	4b18      	ldr	r3, [pc, #96]	; (948c <bt_id_add+0x19c>)
		BT_WARN("Set privacy mode command is not supported");
    942a:	481e      	ldr	r0, [pc, #120]	; (94a4 <bt_id_add+0x1b4>)
    942c:	1ac9      	subs	r1, r1, r3
    942e:	08c9      	lsrs	r1, r1, #3
    9430:	0189      	lsls	r1, r1, #6
    9432:	f041 0102 	orr.w	r1, r1, #2
    9436:	e7a4      	b.n	9382 <bt_id_add+0x92>
	bt_addr_le_copy(&cp.id_addr, addr);
    9438:	4641      	mov	r1, r8
    943a:	4668      	mov	r0, sp
    943c:	f016 fe42 	bl	200c4 <bt_addr_le_copy>
	cp.mode = mode;
    9440:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
    9442:	2108      	movs	r1, #8
    9444:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
    9448:	f88d 3007 	strb.w	r3, [sp, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
    944c:	f7ff faf6 	bl	8a3c <bt_hci_cmd_create>
	if (!buf) {
    9450:	4604      	mov	r4, r0
    9452:	b940      	cbnz	r0, 9466 <bt_id_add+0x176>
    9454:	490c      	ldr	r1, [pc, #48]	; (9488 <bt_id_add+0x198>)
    9456:	4b0d      	ldr	r3, [pc, #52]	; (948c <bt_id_add+0x19c>)
		BT_ERR("Failed to set privacy mode");
    9458:	4813      	ldr	r0, [pc, #76]	; (94a8 <bt_id_add+0x1b8>)
    945a:	1ac9      	subs	r1, r1, r3
    945c:	08c9      	lsrs	r1, r1, #3
    945e:	0189      	lsls	r1, r1, #6
    9460:	f041 0101 	orr.w	r1, r1, #1
    9464:	e78d      	b.n	9382 <bt_id_add+0x92>
	net_buf_add_mem(buf, &cp, sizeof(cp));
    9466:	2208      	movs	r2, #8
    9468:	4669      	mov	r1, sp
    946a:	4410      	add	r0, r2
    946c:	f019 f89a 	bl	225a4 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
    9470:	4632      	mov	r2, r6
    9472:	4621      	mov	r1, r4
    9474:	f242 004e 	movw	r0, #8270	; 0x204e
    9478:	f7ff fc3c 	bl	8cf4 <bt_hci_cmd_send_sync>
	if (err) {
    947c:	2800      	cmp	r0, #0
    947e:	d0a7      	beq.n	93d0 <bt_id_add+0xe0>
    9480:	e7e8      	b.n	9454 <bt_id_add+0x164>
    9482:	bf00      	nop
    9484:	20000000 	.word	0x20000000
    9488:	000237b0 	.word	0x000237b0
    948c:	000236f0 	.word	0x000236f0
    9490:	00025aea 	.word	0x00025aea
    9494:	00025b0f 	.word	0x00025b0f
    9498:	00025b40 	.word	0x00025b40
    949c:	20000018 	.word	0x20000018
    94a0:	00025b60 	.word	0x00025b60
    94a4:	00025b80 	.word	0x00025b80
    94a8:	00025baa 	.word	0x00025baa

000094ac <bt_id_del>:
{
    94ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!bt_dev.le.rl_size ||
    94b0:	4e4c      	ldr	r6, [pc, #304]	; (95e4 <bt_id_del+0x138>)
    94b2:	f896 20cc 	ldrb.w	r2, [r6, #204]	; 0xcc
    94b6:	f896 30cd 	ldrb.w	r3, [r6, #205]	; 0xcd
{
    94ba:	4604      	mov	r4, r0
    94bc:	4635      	mov	r5, r6
	if (!bt_dev.le.rl_size ||
    94be:	b112      	cbz	r2, 94c6 <bt_id_del+0x1a>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
    94c0:	3201      	adds	r2, #1
	if (!bt_dev.le.rl_size ||
    94c2:	4293      	cmp	r3, r2
    94c4:	dd08      	ble.n	94d8 <bt_id_del+0x2c>
		bt_dev.le.rl_entries--;
    94c6:	3b01      	subs	r3, #1
    94c8:	f885 30cd 	strb.w	r3, [r5, #205]	; 0xcd
		keys->state &= ~BT_KEYS_ID_ADDED;
    94cc:	7a23      	ldrb	r3, [r4, #8]
    94ce:	f023 0304 	bic.w	r3, r3, #4
    94d2:	7223      	strb	r3, [r4, #8]
}
    94d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
    94d8:	2100      	movs	r1, #0
    94da:	2205      	movs	r2, #5
    94dc:	4608      	mov	r0, r1
    94de:	f001 fcb3 	bl	ae48 <bt_conn_lookup_state_le>
	if (conn) {
    94e2:	4607      	mov	r7, r0
    94e4:	b170      	cbz	r0, 9504 <bt_id_del+0x58>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    94e6:	f106 0098 	add.w	r0, r6, #152	; 0x98
    94ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    94ee:	f016 fdfb 	bl	200e8 <atomic_or>
	keys->state |= flag;
    94f2:	7a23      	ldrb	r3, [r4, #8]
    94f4:	f043 0302 	orr.w	r3, r3, #2
    94f8:	7223      	strb	r3, [r4, #8]
		bt_conn_unref(conn);
    94fa:	4638      	mov	r0, r7
}
    94fc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		bt_conn_unref(conn);
    9500:	f017 b87d 	b.w	205fe <bt_conn_unref>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    9504:	f106 0098 	add.w	r0, r6, #152	; 0x98
    9508:	f016 fdd6 	bl	200b8 <atomic_get>
	func(&bt_dev.adv, data);
    950c:	4639      	mov	r1, r7
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    950e:	f3c0 1640 	ubfx	r6, r0, #5, #1
    9512:	f105 0018 	add.w	r0, r5, #24
    9516:	f016 fe34 	bl	20182 <adv_pause_enabled>
	if (scan_enabled) {
    951a:	b116      	cbz	r6, 9522 <bt_id_del+0x76>
		set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    951c:	4638      	mov	r0, r7
    951e:	f016 fe9e 	bl	2025e <set_le_scan_enable>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
    9522:	2000      	movs	r0, #0
    9524:	f016 fe83 	bl	2022e <addr_res_enable>
	if (err) {
    9528:	4607      	mov	r7, r0
    952a:	b1d0      	cbz	r0, 9562 <bt_id_del+0xb6>
    952c:	4a2e      	ldr	r2, [pc, #184]	; (95e8 <bt_id_del+0x13c>)
    952e:	4b2f      	ldr	r3, [pc, #188]	; (95ec <bt_id_del+0x140>)
    9530:	1ad2      	subs	r2, r2, r3
    9532:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Disabling address resolution failed (err %d)", err);
    9534:	0192      	lsls	r2, r2, #6
    9536:	4601      	mov	r1, r0
    9538:	f042 0201 	orr.w	r2, r2, #1
    953c:	482c      	ldr	r0, [pc, #176]	; (95f0 <bt_id_del+0x144>)
    953e:	f014 ffd5 	bl	1e4ec <log_1>
	if (bt_dev.le.rl_entries) {
    9542:	f895 30cd 	ldrb.w	r3, [r5, #205]	; 0xcd
    9546:	b113      	cbz	r3, 954e <bt_id_del+0xa2>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
    9548:	2001      	movs	r0, #1
    954a:	f016 fe70 	bl	2022e <addr_res_enable>
	if (scan_enabled) {
    954e:	b116      	cbz	r6, 9556 <bt_id_del+0xaa>
		set_le_scan_enable(BT_HCI_LE_SCAN_ENABLE);
    9550:	2001      	movs	r0, #1
    9552:	f016 fe84 	bl	2025e <set_le_scan_enable>
}
    9556:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	func(&bt_dev.adv, data);
    955a:	4826      	ldr	r0, [pc, #152]	; (95f4 <bt_id_del+0x148>)
    955c:	2100      	movs	r1, #0
    955e:	f016 be25 	b.w	201ac <adv_unpause_enabled>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    9562:	f895 30cd 	ldrb.w	r3, [r5, #205]	; 0xcd
    9566:	f895 20cc 	ldrb.w	r2, [r5, #204]	; 0xcc
    956a:	429a      	cmp	r2, r3
    956c:	d20c      	bcs.n	9588 <bt_id_del+0xdc>
		bt_dev.le.rl_entries--;
    956e:	3b01      	subs	r3, #1
    9570:	f885 30cd 	strb.w	r3, [r5, #205]	; 0xcd
		keys->state &= ~BT_KEYS_ID_ADDED;
    9574:	7a23      	ldrb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    9576:	4920      	ldr	r1, [pc, #128]	; (95f8 <bt_id_del+0x14c>)
		keys->state &= ~BT_KEYS_ID_ADDED;
    9578:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    957c:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
    957e:	7223      	strb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    9580:	2002      	movs	r0, #2
    9582:	f006 fcaf 	bl	fee4 <bt_keys_foreach>
		goto done;
    9586:	e7dc      	b.n	9542 <bt_id_del+0x96>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
    9588:	2107      	movs	r1, #7
    958a:	f242 0028 	movw	r0, #8232	; 0x2028
    958e:	f7ff fa55 	bl	8a3c <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
    9592:	f104 0901 	add.w	r9, r4, #1
	if (!buf) {
    9596:	4680      	mov	r8, r0
    9598:	b950      	cbnz	r0, 95b0 <bt_id_del+0x104>
    959a:	4b14      	ldr	r3, [pc, #80]	; (95ec <bt_id_del+0x140>)
    959c:	4912      	ldr	r1, [pc, #72]	; (95e8 <bt_id_del+0x13c>)
		BT_ERR("Failed to remove IRK from controller");
    959e:	4817      	ldr	r0, [pc, #92]	; (95fc <bt_id_del+0x150>)
    95a0:	1ac9      	subs	r1, r1, r3
    95a2:	08c9      	lsrs	r1, r1, #3
    95a4:	0189      	lsls	r1, r1, #6
    95a6:	f041 0101 	orr.w	r1, r1, #1
    95aa:	f014 ff92 	bl	1e4d2 <log_0>
		goto done;
    95ae:	e7c8      	b.n	9542 <bt_id_del+0x96>
	cp = net_buf_add(buf, sizeof(*cp));
    95b0:	2107      	movs	r1, #7
    95b2:	3008      	adds	r0, #8
    95b4:	f018 fff0 	bl	22598 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
    95b8:	4649      	mov	r1, r9
    95ba:	f016 fd83 	bl	200c4 <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
    95be:	463a      	mov	r2, r7
    95c0:	4641      	mov	r1, r8
    95c2:	f242 0028 	movw	r0, #8232	; 0x2028
    95c6:	f7ff fb95 	bl	8cf4 <bt_hci_cmd_send_sync>
	if (err) {
    95ca:	2800      	cmp	r0, #0
    95cc:	d1e5      	bne.n	959a <bt_id_del+0xee>
	bt_dev.le.rl_entries--;
    95ce:	f895 30cd 	ldrb.w	r3, [r5, #205]	; 0xcd
    95d2:	3b01      	subs	r3, #1
    95d4:	f885 30cd 	strb.w	r3, [r5, #205]	; 0xcd
	keys->state &= ~BT_KEYS_ID_ADDED;
    95d8:	7a23      	ldrb	r3, [r4, #8]
    95da:	f023 0304 	bic.w	r3, r3, #4
    95de:	7223      	strb	r3, [r4, #8]
    95e0:	e7af      	b.n	9542 <bt_id_del+0x96>
    95e2:	bf00      	nop
    95e4:	20000000 	.word	0x20000000
    95e8:	000237b0 	.word	0x000237b0
    95ec:	000236f0 	.word	0x000236f0
    95f0:	00025bc5 	.word	0x00025bc5
    95f4:	20000018 	.word	0x20000018
    95f8:	0002021d 	.word	0x0002021d
    95fc:	00025bf2 	.word	0x00025bf2

00009600 <bt_le_scan_update>:
{
    9600:	b570      	push	{r4, r5, r6, lr}
    9602:	4606      	mov	r6, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    9604:	481c      	ldr	r0, [pc, #112]	; (9678 <bt_le_scan_update+0x78>)
    9606:	f016 fd57 	bl	200b8 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    960a:	0641      	lsls	r1, r0, #25
    960c:	f3c0 1380 	ubfx	r3, r0, #6, #1
    9610:	d501      	bpl.n	9616 <bt_le_scan_update+0x16>
			return 0;
    9612:	2000      	movs	r0, #0
    9614:	e02c      	b.n	9670 <bt_le_scan_update+0x70>
    9616:	4818      	ldr	r0, [pc, #96]	; (9678 <bt_le_scan_update+0x78>)
    9618:	f016 fd4e 	bl	200b8 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    961c:	0682      	lsls	r2, r0, #26
    961e:	d422      	bmi.n	9666 <bt_le_scan_update+0x66>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
    9620:	2100      	movs	r1, #0
    9622:	2205      	movs	r2, #5
    9624:	4608      	mov	r0, r1
    9626:	f001 fc0f 	bl	ae48 <bt_conn_lookup_state_le>
		if (conn) {
    962a:	4604      	mov	r4, r0
    962c:	bb08      	cbnz	r0, 9672 <bt_le_scan_update+0x72>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
    962e:	2201      	movs	r2, #1
    9630:	4601      	mov	r1, r0
    9632:	f001 fc09 	bl	ae48 <bt_conn_lookup_state_le>
		if (!conn) {
    9636:	4605      	mov	r5, r0
    9638:	2800      	cmp	r0, #0
    963a:	d0ea      	beq.n	9612 <bt_le_scan_update+0x12>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    963c:	f44f 7180 	mov.w	r1, #256	; 0x100
    9640:	480d      	ldr	r0, [pc, #52]	; (9678 <bt_le_scan_update+0x78>)
    9642:	f016 fd51 	bl	200e8 <atomic_or>
		bt_conn_unref(conn);
    9646:	4628      	mov	r0, r5
    9648:	f016 ffd9 	bl	205fe <bt_conn_unref>
		window = CONFIG_BT_BACKGROUND_SCAN_WINDOW;
    964c:	2e00      	cmp	r6, #0
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    964e:	4620      	mov	r0, r4
    9650:	bf18      	it	ne
    9652:	2230      	movne	r2, #48	; 0x30
}
    9654:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    9658:	bf0a      	itet	eq
    965a:	2212      	moveq	r2, #18
    965c:	2160      	movne	r1, #96	; 0x60
    965e:	f44f 6100 	moveq.w	r1, #2048	; 0x800
    9662:	f7ff bc93 	b.w	8f8c <start_le_scan_legacy>
	return set_le_scan_enable_legacy(enable);
    9666:	4618      	mov	r0, r3
    9668:	f7ff fc54 	bl	8f14 <set_le_scan_enable_legacy>
		if (err) {
    966c:	2800      	cmp	r0, #0
    966e:	d0d7      	beq.n	9620 <bt_le_scan_update+0x20>
}
    9670:	bd70      	pop	{r4, r5, r6, pc}
			bt_conn_unref(conn);
    9672:	f016 ffc4 	bl	205fe <bt_conn_unref>
    9676:	e7cc      	b.n	9612 <bt_le_scan_update+0x12>
    9678:	20000098 	.word	0x20000098

0000967c <hci_disconn_complete>:
{
    967c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    967e:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
    9680:	7835      	ldrb	r5, [r6, #0]
    9682:	bb6d      	cbnz	r5, 96e0 <hci_disconn_complete+0x64>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    9684:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
    9688:	4638      	mov	r0, r7
    968a:	f001 fb6d 	bl	ad68 <bt_conn_lookup_handle>
	if (!conn) {
    968e:	4604      	mov	r4, r0
    9690:	b960      	cbnz	r0, 96ac <hci_disconn_complete+0x30>
    9692:	4b14      	ldr	r3, [pc, #80]	; (96e4 <hci_disconn_complete+0x68>)
    9694:	4a14      	ldr	r2, [pc, #80]	; (96e8 <hci_disconn_complete+0x6c>)
		BT_ERR("Unable to look up conn with handle %u", handle);
    9696:	4815      	ldr	r0, [pc, #84]	; (96ec <hci_disconn_complete+0x70>)
    9698:	1ad2      	subs	r2, r2, r3
    969a:	08d2      	lsrs	r2, r2, #3
    969c:	0192      	lsls	r2, r2, #6
    969e:	4639      	mov	r1, r7
    96a0:	f042 0201 	orr.w	r2, r2, #1
}
    96a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    96a8:	f014 bf20 	b.w	1e4ec <log_1>
	conn->err = evt->reason;
    96ac:	78f3      	ldrb	r3, [r6, #3]
    96ae:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    96b0:	4629      	mov	r1, r5
    96b2:	f001 fa59 	bl	ab68 <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
    96b6:	78a1      	ldrb	r1, [r4, #2]
	conn->handle = 0U;
    96b8:	8025      	strh	r5, [r4, #0]
	if (conn->type != BT_CONN_TYPE_LE) {
    96ba:	2901      	cmp	r1, #1
    96bc:	d004      	beq.n	96c8 <hci_disconn_complete+0x4c>
	bt_conn_unref(conn);
    96be:	4620      	mov	r0, r4
}
    96c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
    96c4:	f016 bf9b 	b.w	205fe <bt_conn_unref>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    96c8:	1d20      	adds	r0, r4, #4
    96ca:	f016 fcf5 	bl	200b8 <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    96ce:	07c3      	lsls	r3, r0, #31
    96d0:	d5f5      	bpl.n	96be <hci_disconn_complete+0x42>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    96d2:	4620      	mov	r0, r4
    96d4:	f001 fa48 	bl	ab68 <bt_conn_set_state>
		bt_le_scan_update(false);
    96d8:	4628      	mov	r0, r5
    96da:	f7ff ff91 	bl	9600 <bt_le_scan_update>
    96de:	e7ee      	b.n	96be <hci_disconn_complete+0x42>
}
    96e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    96e2:	bf00      	nop
    96e4:	000236f0 	.word	0x000236f0
    96e8:	000237b0 	.word	0x000237b0
    96ec:	00025858 	.word	0x00025858

000096f0 <le_adv_report>:
{
    96f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t num_reports = net_buf_pull_u8(buf);
    96f4:	f100 0708 	add.w	r7, r0, #8
{
    96f8:	b08f      	sub	sp, #60	; 0x3c
    96fa:	4604      	mov	r4, r0
	uint8_t num_reports = net_buf_pull_u8(buf);
    96fc:	4638      	mov	r0, r7
    96fe:	f018 ff90 	bl	22622 <net_buf_simple_pull_u8>
    9702:	f8df 91e0 	ldr.w	r9, [pc, #480]	; 98e4 <le_adv_report+0x1f4>
	if (scan_dev_found_cb) {
    9706:	f8df b1e0 	ldr.w	fp, [pc, #480]	; 98e8 <le_adv_report+0x1f8>
	uint8_t num_reports = net_buf_pull_u8(buf);
    970a:	9002      	str	r0, [sp, #8]
	while (num_reports--) {
    970c:	9b02      	ldr	r3, [sp, #8]
    970e:	b163      	cbz	r3, 972a <le_adv_report+0x3a>
		if (buf->len < sizeof(*evt)) {
    9710:	89a3      	ldrh	r3, [r4, #12]
    9712:	2b08      	cmp	r3, #8
    9714:	d80c      	bhi.n	9730 <le_adv_report+0x40>
    9716:	496e      	ldr	r1, [pc, #440]	; (98d0 <le_adv_report+0x1e0>)
    9718:	4b6e      	ldr	r3, [pc, #440]	; (98d4 <le_adv_report+0x1e4>)
			BT_ERR("Unexpected end of buffer");
    971a:	486f      	ldr	r0, [pc, #444]	; (98d8 <le_adv_report+0x1e8>)
    971c:	1ac9      	subs	r1, r1, r3
    971e:	08c9      	lsrs	r1, r1, #3
    9720:	0189      	lsls	r1, r1, #6
    9722:	f041 0101 	orr.w	r1, r1, #1
    9726:	f014 fed4 	bl	1e4d2 <log_0>
}
    972a:	b00f      	add	sp, #60	; 0x3c
    972c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		evt = net_buf_pull_mem(buf, sizeof(*evt));
    9730:	2109      	movs	r1, #9
    9732:	4638      	mov	r0, r7
    9734:	f018 ff6d 	bl	22612 <net_buf_simple_pull_mem>
		adv_info.rssi = evt->data[evt->length];
    9738:	7a03      	ldrb	r3, [r0, #8]
    973a:	9301      	str	r3, [sp, #4]
    973c:	18c3      	adds	r3, r0, r3
		evt = net_buf_pull_mem(buf, sizeof(*evt));
    973e:	4606      	mov	r6, r0
		adv_info.rssi = evt->data[evt->length];
    9740:	7a5b      	ldrb	r3, [r3, #9]
    9742:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
    9746:	2301      	movs	r3, #1
    9748:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
    974c:	237f      	movs	r3, #127	; 0x7f
    974e:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
		adv_info.sid = BT_GAP_SID_INVALID;
    9752:	23ff      	movs	r3, #255	; 0xff
    9754:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		adv_info.adv_type = evt->evt_type;
    9758:	7803      	ldrb	r3, [r0, #0]
    975a:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
	switch (evt_type) {
    975e:	2b04      	cmp	r3, #4
    9760:	bf96      	itet	ls
    9762:	4a5e      	ldrls	r2, [pc, #376]	; (98dc <le_adv_report+0x1ec>)
		adv_info.adv_type = evt->evt_type;
    9764:	2300      	movhi	r3, #0
    9766:	5cd3      	ldrbls	r3, [r2, r3]
		adv_info.adv_props = get_adv_props(evt->evt_type);
    9768:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
		le_adv_recv(&evt->addr, &adv_info, buf, evt->length);
    976c:	f100 0a01 	add.w	sl, r0, #1
    9770:	4648      	mov	r0, r9
    9772:	f016 fca1 	bl	200b8 <atomic_get>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
    9776:	0645      	lsls	r5, r0, #25
    9778:	d50d      	bpl.n	9796 <le_adv_report+0xa6>
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
    977a:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
    977e:	0758      	lsls	r0, r3, #29
    9780:	d509      	bpl.n	9796 <le_adv_report+0xa6>
		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
    9782:	7a31      	ldrb	r1, [r6, #8]
    9784:	4638      	mov	r0, r7
    9786:	3101      	adds	r1, #1
    9788:	f018 ff3b 	bl	22602 <net_buf_simple_pull>
    978c:	9b02      	ldr	r3, [sp, #8]
    978e:	1e58      	subs	r0, r3, #1
    9790:	b2c3      	uxtb	r3, r0
    9792:	9302      	str	r3, [sp, #8]
    9794:	e7ba      	b.n	970c <le_adv_report+0x1c>
	if (addr->type == BT_ADDR_LE_PUBLIC_ID ||
    9796:	7873      	ldrb	r3, [r6, #1]
    9798:	1e9a      	subs	r2, r3, #2
    979a:	2a01      	cmp	r2, #1
    979c:	f10d 081c 	add.w	r8, sp, #28
    97a0:	d853      	bhi.n	984a <le_adv_report+0x15a>
		bt_addr_le_copy(&id_addr, addr);
    97a2:	4651      	mov	r1, sl
    97a4:	4640      	mov	r0, r8
    97a6:	f016 fc8d 	bl	200c4 <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    97aa:	f89d 301c 	ldrb.w	r3, [sp, #28]
    97ae:	3b02      	subs	r3, #2
    97b0:	f88d 301c 	strb.w	r3, [sp, #28]
	if (scan_dev_found_cb) {
    97b4:	f8db 3000 	ldr.w	r3, [fp]
	info->addr = &id_addr;
    97b8:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	if (scan_dev_found_cb) {
    97bc:	b1bb      	cbz	r3, 97ee <le_adv_report+0xfe>
 * @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
    97be:	4638      	mov	r0, r7
    97c0:	f018 ff3f 	bl	22642 <net_buf_simple_headroom>
	state->len = buf->len;
    97c4:	89a3      	ldrh	r3, [r4, #12]
    97c6:	9304      	str	r3, [sp, #16]
		buf->len = len;
    97c8:	9b01      	ldr	r3, [sp, #4]
	state->offset = net_buf_simple_headroom(buf);
    97ca:	9003      	str	r0, [sp, #12]
    97cc:	81a3      	strh	r3, [r4, #12]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type,
    97ce:	4640      	mov	r0, r8
    97d0:	463b      	mov	r3, r7
    97d2:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
    97d6:	f99d 1031 	ldrsb.w	r1, [sp, #49]	; 0x31
    97da:	f8db 5000 	ldr.w	r5, [fp]
    97de:	47a8      	blx	r5
 * @param state Stored state.
 */
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
					  struct net_buf_simple_state *state)
{
	buf->data = buf->__buf + state->offset;
    97e0:	9b03      	ldr	r3, [sp, #12]
    97e2:	6920      	ldr	r0, [r4, #16]
    97e4:	fa10 f083 	uxtah	r0, r0, r3
	buf->len = state->len;
    97e8:	9b04      	ldr	r3, [sp, #16]
	buf->data = buf->__buf + state->offset;
    97ea:	60a0      	str	r0, [r4, #8]
	buf->len = state->len;
    97ec:	81a3      	strh	r3, [r4, #12]
	SYS_SLIST_FOR_EACH_CONTAINER(&scan_cbs, listener, node) {
    97ee:	4b3c      	ldr	r3, [pc, #240]	; (98e0 <le_adv_report+0x1f0>)
    97f0:	681d      	ldr	r5, [r3, #0]
    97f2:	2d00      	cmp	r5, #0
    97f4:	d13a      	bne.n	986c <le_adv_report+0x17c>
    97f6:	4648      	mov	r0, r9
	check_pending_conn(&id_addr, addr, info->adv_props);
    97f8:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
    97fc:	f016 fc5c 	bl	200b8 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    9800:	0641      	lsls	r1, r0, #25
    9802:	f3c0 1580 	ubfx	r5, r0, #6, #1
    9806:	d4bc      	bmi.n	9782 <le_adv_report+0x92>
	if (!(adv_props & BT_HCI_LE_ADV_EVT_TYPE_CONN)) {
    9808:	07da      	lsls	r2, r3, #31
    980a:	d5ba      	bpl.n	9782 <le_adv_report+0x92>
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, id_addr,
    980c:	4641      	mov	r1, r8
    980e:	2201      	movs	r2, #1
    9810:	4628      	mov	r0, r5
    9812:	f001 fb19 	bl	ae48 <bt_conn_lookup_state_le>
	if (!conn) {
    9816:	4680      	mov	r8, r0
    9818:	2800      	cmp	r0, #0
    981a:	d0b2      	beq.n	9782 <le_adv_report+0x92>
    981c:	4648      	mov	r0, r9
    981e:	f016 fc4b 	bl	200b8 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    9822:	0683      	lsls	r3, r0, #26
    9824:	d440      	bmi.n	98a8 <le_adv_report+0x1b8>
	bt_addr_le_copy(&conn->le.resp_addr, addr);
    9826:	f108 0096 	add.w	r0, r8, #150	; 0x96
    982a:	4651      	mov	r1, sl
    982c:	f016 fc4a 	bl	200c4 <bt_addr_le_copy>
	return bt_le_create_conn_legacy(conn);
    9830:	4640      	mov	r0, r8
    9832:	f7ff fbf7 	bl	9024 <bt_le_create_conn_legacy>
	if (bt_le_create_conn(conn)) {
    9836:	2800      	cmp	r0, #0
    9838:	d13b      	bne.n	98b2 <le_adv_report+0x1c2>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
    983a:	4640      	mov	r0, r8
    983c:	2105      	movs	r1, #5
    983e:	f001 f993 	bl	ab68 <bt_conn_set_state>
	bt_conn_unref(conn);
    9842:	4640      	mov	r0, r8
    9844:	f016 fedb 	bl	205fe <bt_conn_unref>
	return;
    9848:	e79b      	b.n	9782 <le_adv_report+0x92>
	} else if (addr->type == BT_HCI_PEER_ADDR_ANONYMOUS) {
    984a:	2bff      	cmp	r3, #255	; 0xff
    984c:	d108      	bne.n	9860 <le_adv_report+0x170>
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
    984e:	2300      	movs	r3, #0
    9850:	9309      	str	r3, [sp, #36]	; 0x24
    9852:	a909      	add	r1, sp, #36	; 0x24
    9854:	f8cd 3027 	str.w	r3, [sp, #39]	; 0x27
		bt_addr_le_copy(&id_addr,
    9858:	4640      	mov	r0, r8
    985a:	f016 fc33 	bl	200c4 <bt_addr_le_copy>
    985e:	e7a9      	b.n	97b4 <le_adv_report+0xc4>
    9860:	4651      	mov	r1, sl
    9862:	2000      	movs	r0, #0
    9864:	f016 fcfd 	bl	20262 <bt_lookup_id_addr>
    9868:	4601      	mov	r1, r0
    986a:	e7f5      	b.n	9858 <le_adv_report+0x168>
	SYS_SLIST_FOR_EACH_CONTAINER(&scan_cbs, listener, node) {
    986c:	3d08      	subs	r5, #8
    986e:	2d00      	cmp	r5, #0
    9870:	d0c1      	beq.n	97f6 <le_adv_report+0x106>
	state->offset = net_buf_simple_headroom(buf);
    9872:	4638      	mov	r0, r7
    9874:	f018 fee5 	bl	22642 <net_buf_simple_headroom>
	state->len = buf->len;
    9878:	89a3      	ldrh	r3, [r4, #12]
    987a:	9304      	str	r3, [sp, #16]
		buf->len = len;
    987c:	9b01      	ldr	r3, [sp, #4]
    987e:	81a3      	strh	r3, [r4, #12]
		listener->recv(info, &buf->b);
    9880:	462b      	mov	r3, r5
	state->offset = net_buf_simple_headroom(buf);
    9882:	9003      	str	r0, [sp, #12]
    9884:	f853 2b08 	ldr.w	r2, [r3], #8
    9888:	9305      	str	r3, [sp, #20]
    988a:	a80b      	add	r0, sp, #44	; 0x2c
    988c:	4639      	mov	r1, r7
    988e:	4790      	blx	r2
	buf->data = buf->__buf + state->offset;
    9890:	9b03      	ldr	r3, [sp, #12]
    9892:	6920      	ldr	r0, [r4, #16]
    9894:	fa10 f083 	uxtah	r0, r0, r3
	buf->len = state->len;
    9898:	9b04      	ldr	r3, [sp, #16]
    989a:	81a3      	strh	r3, [r4, #12]
Z_GENLIST_PEEK_NEXT(slist, snode)
    989c:	9b05      	ldr	r3, [sp, #20]
	buf->data = buf->__buf + state->offset;
    989e:	60a0      	str	r0, [r4, #8]
    98a0:	2b00      	cmp	r3, #0
    98a2:	d0a8      	beq.n	97f6 <le_adv_report+0x106>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    98a4:	68ad      	ldr	r5, [r5, #8]
	return node->next;
    98a6:	e7a4      	b.n	97f2 <le_adv_report+0x102>
	return set_le_scan_enable_legacy(enable);
    98a8:	4628      	mov	r0, r5
    98aa:	f7ff fb33 	bl	8f14 <set_le_scan_enable_legacy>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    98ae:	2800      	cmp	r0, #0
    98b0:	d0b9      	beq.n	9826 <le_adv_report+0x136>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    98b2:	231f      	movs	r3, #31
    98b4:	f888 300c 	strb.w	r3, [r8, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    98b8:	2100      	movs	r1, #0
    98ba:	4640      	mov	r0, r8
    98bc:	f001 f954 	bl	ab68 <bt_conn_set_state>
	bt_conn_unref(conn);
    98c0:	4640      	mov	r0, r8
    98c2:	f016 fe9c 	bl	205fe <bt_conn_unref>
	bt_le_scan_update(false);
    98c6:	2000      	movs	r0, #0
    98c8:	f7ff fe9a 	bl	9600 <bt_le_scan_update>
    98cc:	e759      	b.n	9782 <le_adv_report+0x92>
    98ce:	bf00      	nop
    98d0:	000237b0 	.word	0x000237b0
    98d4:	000236f0 	.word	0x000236f0
    98d8:	00025c17 	.word	0x00025c17
    98dc:	0002607a 	.word	0x0002607a
    98e0:	20001ee0 	.word	0x20001ee0
    98e4:	20000098 	.word	0x20000098
    98e8:	20001ee8 	.word	0x20001ee8

000098ec <enh_conn_complete>:
{
    98ec:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    98f0:	f8b0 8001 	ldrh.w	r8, [r0, #1]
{
    98f4:	4604      	mov	r4, r0
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    98f6:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
    98fa:	4864      	ldr	r0, [pc, #400]	; (9a8c <enh_conn_complete+0x1a0>)
    98fc:	f016 fbe5 	bl	200ca <atomic_and>
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
    9900:	0442      	lsls	r2, r0, #17
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    9902:	fa1f f688 	uxth.w	r6, r8
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
    9906:	d504      	bpl.n	9912 <enh_conn_complete+0x26>
			bt_keys_foreach(BT_KEYS_IRK, pending_id_update, NULL);
    9908:	4961      	ldr	r1, [pc, #388]	; (9a90 <enh_conn_complete+0x1a4>)
    990a:	2200      	movs	r2, #0
    990c:	2002      	movs	r0, #2
    990e:	f006 fae9 	bl	fee4 <bt_keys_foreach>
	if (evt->status) {
    9912:	7825      	ldrb	r5, [r4, #0]
    9914:	b3ad      	cbz	r5, 9982 <enh_conn_complete+0x96>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    9916:	2d02      	cmp	r5, #2
    9918:	d127      	bne.n	996a <enh_conn_complete+0x7e>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
    991a:	2100      	movs	r1, #0
    991c:	2205      	movs	r2, #5
    991e:	4608      	mov	r0, r1
    9920:	f001 fa92 	bl	ae48 <bt_conn_lookup_state_le>
	if (!conn) {
    9924:	4604      	mov	r4, r0
    9926:	b978      	cbnz	r0, 9948 <enh_conn_complete+0x5c>
    9928:	495a      	ldr	r1, [pc, #360]	; (9a94 <enh_conn_complete+0x1a8>)
    992a:	4b5b      	ldr	r3, [pc, #364]	; (9a98 <enh_conn_complete+0x1ac>)
		BT_ERR("No pending master connection");
    992c:	485b      	ldr	r0, [pc, #364]	; (9a9c <enh_conn_complete+0x1b0>)
    992e:	1ac9      	subs	r1, r1, r3
    9930:	08c9      	lsrs	r1, r1, #3
    9932:	0189      	lsls	r1, r1, #6
    9934:	f041 0101 	orr.w	r1, r1, #1
    9938:	f014 fdcb 	bl	1e4d2 <log_0>
			bt_le_scan_update(false);
    993c:	2000      	movs	r0, #0
    993e:	f7ff fe5f 	bl	9600 <bt_le_scan_update>
}
    9942:	b004      	add	sp, #16
    9944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn->err = BT_HCI_ERR_UNKNOWN_CONN_ID;
    9948:	7305      	strb	r5, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    994a:	2100      	movs	r1, #0
    994c:	f001 f90c 	bl	ab68 <bt_conn_set_state>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    9950:	1d20      	adds	r0, r4, #4
    9952:	f016 fbb1 	bl	200b8 <atomic_get>
		if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    9956:	07c3      	lsls	r3, r0, #31
    9958:	d503      	bpl.n	9962 <enh_conn_complete+0x76>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    995a:	2101      	movs	r1, #1
    995c:	4620      	mov	r0, r4
    995e:	f001 f903 	bl	ab68 <bt_conn_set_state>
	bt_conn_unref(conn);
    9962:	4620      	mov	r0, r4
    9964:	f016 fe4b 	bl	205fe <bt_conn_unref>
    9968:	e7e8      	b.n	993c <enh_conn_complete+0x50>
    996a:	4b4b      	ldr	r3, [pc, #300]	; (9a98 <enh_conn_complete+0x1ac>)
    996c:	4a49      	ldr	r2, [pc, #292]	; (9a94 <enh_conn_complete+0x1a8>)
		BT_WARN("Unexpected status 0x%02x", evt->status);
    996e:	484c      	ldr	r0, [pc, #304]	; (9aa0 <enh_conn_complete+0x1b4>)
    9970:	1ad2      	subs	r2, r2, r3
    9972:	08d2      	lsrs	r2, r2, #3
    9974:	0192      	lsls	r2, r2, #6
    9976:	f042 0202 	orr.w	r2, r2, #2
    997a:	4629      	mov	r1, r5
    997c:	f014 fdb6 	bl	1e4ec <log_1>
		return;
    9980:	e7df      	b.n	9942 <enh_conn_complete+0x56>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    9982:	7923      	ldrb	r3, [r4, #4]
    9984:	3b02      	subs	r3, #2
    9986:	2b01      	cmp	r3, #1
    9988:	f104 0704 	add.w	r7, r4, #4
    998c:	d831      	bhi.n	99f2 <enh_conn_complete+0x106>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    998e:	4639      	mov	r1, r7
    9990:	a802      	add	r0, sp, #8
    9992:	f016 fb97 	bl	200c4 <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    9996:	f89d 3008 	ldrb.w	r3, [sp, #8]
    999a:	2206      	movs	r2, #6
    999c:	3b02      	subs	r3, #2
    999e:	f104 0111 	add.w	r1, r4, #17
    99a2:	f10d 0001 	add.w	r0, sp, #1
    99a6:	f88d 3008 	strb.w	r3, [sp, #8]
    99aa:	f016 fa64 	bl	1fe76 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    99ae:	2301      	movs	r3, #1
    99b0:	f88d 3000 	strb.w	r3, [sp]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && role == BT_HCI_ROLE_MASTER) {
    99b4:	78e0      	ldrb	r0, [r4, #3]
    99b6:	b960      	cbnz	r0, 99d2 <enh_conn_complete+0xe6>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
    99b8:	2205      	movs	r2, #5
    99ba:	a902      	add	r1, sp, #8
    99bc:	f001 fa44 	bl	ae48 <bt_conn_lookup_state_le>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    99c0:	78e3      	ldrb	r3, [r4, #3]
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
    99c2:	4605      	mov	r5, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    99c4:	b923      	cbnz	r3, 99d0 <enh_conn_complete+0xe4>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    99c6:	4831      	ldr	r0, [pc, #196]	; (9a8c <enh_conn_complete+0x1a0>)
    99c8:	f46f 6100 	mvn.w	r1, #2048	; 0x800
    99cc:	f016 fb7d 	bl	200ca <atomic_and>
	if (!conn) {
    99d0:	bb15      	cbnz	r5, 9a18 <enh_conn_complete+0x12c>
    99d2:	4b31      	ldr	r3, [pc, #196]	; (9a98 <enh_conn_complete+0x1ac>)
    99d4:	4a2f      	ldr	r2, [pc, #188]	; (9a94 <enh_conn_complete+0x1a8>)
		BT_ERR("Unable to add new conn for handle %u", handle);
    99d6:	4833      	ldr	r0, [pc, #204]	; (9aa4 <enh_conn_complete+0x1b8>)
    99d8:	1ad2      	subs	r2, r2, r3
    99da:	08d2      	lsrs	r2, r2, #3
    99dc:	0192      	lsls	r2, r2, #6
    99de:	4631      	mov	r1, r6
    99e0:	f042 0201 	orr.w	r2, r2, #1
    99e4:	f014 fd82 	bl	1e4ec <log_1>
		bt_hci_disconnect(handle, BT_HCI_ERR_MEM_CAPACITY_EXCEEDED);
    99e8:	2107      	movs	r1, #7
    99ea:	4630      	mov	r0, r6
    99ec:	f016 fc45 	bl	2027a <bt_hci_disconnect>
		return;
    99f0:	e7a7      	b.n	9942 <enh_conn_complete+0x56>
		uint8_t id = evt->role == BT_HCI_ROLE_SLAVE ? bt_dev.adv_conn_id :
    99f2:	78e3      	ldrb	r3, [r4, #3]
    99f4:	2b01      	cmp	r3, #1
    99f6:	bf04      	itt	eq
    99f8:	4b2b      	ldreq	r3, [pc, #172]	; (9aa8 <enh_conn_complete+0x1bc>)
    99fa:	f893 5037 	ldrbeq.w	r5, [r3, #55]	; 0x37
		bt_addr_le_copy(&id_addr,
    99fe:	4639      	mov	r1, r7
    9a00:	4628      	mov	r0, r5
    9a02:	f016 fc2e 	bl	20262 <bt_lookup_id_addr>
    9a06:	4601      	mov	r1, r0
    9a08:	a802      	add	r0, sp, #8
    9a0a:	f016 fb5b 	bl	200c4 <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
    9a0e:	4639      	mov	r1, r7
    9a10:	4668      	mov	r0, sp
    9a12:	f016 fb57 	bl	200c4 <bt_addr_le_copy>
    9a16:	e7cd      	b.n	99b4 <enh_conn_complete+0xc8>
	conn->handle = handle;
    9a18:	4628      	mov	r0, r5
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    9a1a:	a902      	add	r1, sp, #8
	conn->handle = handle;
    9a1c:	f820 8b88 	strh.w	r8, [r0], #136
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    9a20:	f016 fb50 	bl	200c4 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    9a24:	7e22      	ldrb	r2, [r4, #24]
    9a26:	7de3      	ldrb	r3, [r4, #23]
    9a28:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    9a2c:	f8a5 309e 	strh.w	r3, [r5, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    9a30:	7ea2      	ldrb	r2, [r4, #26]
    9a32:	7e63      	ldrb	r3, [r4, #25]
    9a34:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    9a38:	f8a5 30a4 	strh.w	r3, [r5, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    9a3c:	7f22      	ldrb	r2, [r4, #28]
    9a3e:	7ee3      	ldrb	r3, [r4, #27]
    9a40:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    9a44:	f8a5 30a6 	strh.w	r3, [r5, #166]	; 0xa6
	conn->role = evt->role;
    9a48:	78e3      	ldrb	r3, [r4, #3]
    9a4a:	70eb      	strb	r3, [r5, #3]
	conn->err = 0U;
    9a4c:	2200      	movs	r2, #0
    9a4e:	732a      	strb	r2, [r5, #12]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    9a50:	b96b      	cbnz	r3, 9a6e <enh_conn_complete+0x182>
		bt_addr_le_copy(&conn->le.resp_addr, &peer_addr);
    9a52:	4669      	mov	r1, sp
    9a54:	f105 0096 	add.w	r0, r5, #150	; 0x96
    9a58:	f016 fb34 	bl	200c4 <bt_addr_le_copy>
					&bt_dev.id_addr[conn->id]);
    9a5c:	7a29      	ldrb	r1, [r5, #8]
			bt_addr_le_copy(&conn->le.init_addr,
    9a5e:	4b12      	ldr	r3, [pc, #72]	; (9aa8 <enh_conn_complete+0x1bc>)
					&bt_dev.id_addr[conn->id]);
    9a60:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
			bt_addr_le_copy(&conn->le.init_addr,
    9a64:	4419      	add	r1, r3
    9a66:	f105 008f 	add.w	r0, r5, #143	; 0x8f
    9a6a:	f016 fb2b 	bl	200c4 <bt_addr_le_copy>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    9a6e:	2106      	movs	r1, #6
    9a70:	4628      	mov	r0, r5
    9a72:	f001 f879 	bl	ab68 <bt_conn_set_state>
	conn_auto_initiate(conn);
    9a76:	4628      	mov	r0, r5
    9a78:	f7ff fb64 	bl	9144 <conn_auto_initiate>
	bt_conn_unref(conn);
    9a7c:	4628      	mov	r0, r5
    9a7e:	f016 fdbe 	bl	205fe <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    9a82:	78eb      	ldrb	r3, [r5, #3]
    9a84:	2b00      	cmp	r3, #0
    9a86:	f47f af5c 	bne.w	9942 <enh_conn_complete+0x56>
    9a8a:	e757      	b.n	993c <enh_conn_complete+0x50>
    9a8c:	20000098 	.word	0x20000098
    9a90:	00020375 	.word	0x00020375
    9a94:	000237b0 	.word	0x000237b0
    9a98:	000236f0 	.word	0x000236f0
    9a9c:	00025c30 	.word	0x00025c30
    9aa0:	00025c4d 	.word	0x00025c4d
    9aa4:	00025c66 	.word	0x00025c66
    9aa8:	20000000 	.word	0x20000000

00009aac <bt_data_parse>:
{
    9aac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9aae:	4604      	mov	r4, r0
    9ab0:	460e      	mov	r6, r1
    9ab2:	4617      	mov	r7, r2
	while (ad->len > 1) {
    9ab4:	88a3      	ldrh	r3, [r4, #4]
    9ab6:	2b01      	cmp	r3, #1
    9ab8:	d912      	bls.n	9ae0 <bt_data_parse+0x34>
		len = net_buf_simple_pull_u8(ad);
    9aba:	4620      	mov	r0, r4
    9abc:	f018 fdb1 	bl	22622 <net_buf_simple_pull_u8>
		if (len == 0U) {
    9ac0:	4605      	mov	r5, r0
    9ac2:	b168      	cbz	r0, 9ae0 <bt_data_parse+0x34>
		if (len > ad->len) {
    9ac4:	88a2      	ldrh	r2, [r4, #4]
    9ac6:	b283      	uxth	r3, r0
    9ac8:	429a      	cmp	r2, r3
    9aca:	d20b      	bcs.n	9ae4 <bt_data_parse+0x38>
    9acc:	490f      	ldr	r1, [pc, #60]	; (9b0c <bt_data_parse+0x60>)
    9ace:	4b10      	ldr	r3, [pc, #64]	; (9b10 <bt_data_parse+0x64>)
			BT_WARN("Malformed data");
    9ad0:	4810      	ldr	r0, [pc, #64]	; (9b14 <bt_data_parse+0x68>)
    9ad2:	1ac9      	subs	r1, r1, r3
    9ad4:	08c9      	lsrs	r1, r1, #3
    9ad6:	0189      	lsls	r1, r1, #6
    9ad8:	f041 0102 	orr.w	r1, r1, #2
    9adc:	f014 fcf9 	bl	1e4d2 <log_0>
}
    9ae0:	b003      	add	sp, #12
    9ae2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		data.type = net_buf_simple_pull_u8(ad);
    9ae4:	4620      	mov	r0, r4
    9ae6:	f018 fd9c 	bl	22622 <net_buf_simple_pull_u8>
		data.data_len = len - 1;
    9aea:	3d01      	subs	r5, #1
		data.data = ad->data;
    9aec:	6823      	ldr	r3, [r4, #0]
		data.type = net_buf_simple_pull_u8(ad);
    9aee:	f88d 0000 	strb.w	r0, [sp]
		if (!func(&data, user_data)) {
    9af2:	4639      	mov	r1, r7
    9af4:	4668      	mov	r0, sp
		data.data_len = len - 1;
    9af6:	f88d 5001 	strb.w	r5, [sp, #1]
		data.data = ad->data;
    9afa:	9301      	str	r3, [sp, #4]
		if (!func(&data, user_data)) {
    9afc:	47b0      	blx	r6
    9afe:	2800      	cmp	r0, #0
    9b00:	d0ee      	beq.n	9ae0 <bt_data_parse+0x34>
		net_buf_simple_pull(ad, len - 1);
    9b02:	4629      	mov	r1, r5
    9b04:	4620      	mov	r0, r4
    9b06:	f018 fd7c 	bl	22602 <net_buf_simple_pull>
    9b0a:	e7d3      	b.n	9ab4 <bt_data_parse+0x8>
    9b0c:	000237b0 	.word	0x000237b0
    9b10:	000236f0 	.word	0x000236f0
    9b14:	00025c8b 	.word	0x00025c8b

00009b18 <id_create.isra.0>:

static void id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
    9b18:	b530      	push	{r4, r5, lr}
    9b1a:	4d14      	ldr	r5, [pc, #80]	; (9b6c <id_create.isra.0+0x54>)
    9b1c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    9b20:	b085      	sub	sp, #20
    9b22:	4405      	add	r5, r0
{
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    9b24:	460c      	mov	r4, r1
    9b26:	b179      	cbz	r1, 9b48 <id_create.isra.0+0x30>
    9b28:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    9b2a:	2207      	movs	r2, #7
    9b2c:	4669      	mov	r1, sp
    9b2e:	4620      	mov	r0, r4
    9b30:	9300      	str	r3, [sp, #0]
    9b32:	f8cd 3003 	str.w	r3, [sp, #3]
    9b36:	f016 f98e 	bl	1fe56 <memcmp>
    9b3a:	b128      	cbz	r0, 9b48 <id_create.isra.0+0x30>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    9b3c:	4621      	mov	r1, r4
    9b3e:	4628      	mov	r0, r5
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    9b40:	f016 fac0 	bl	200c4 <bt_addr_le_copy>
	 */
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}
}
    9b44:	b005      	add	sp, #20
    9b46:	bd30      	pop	{r4, r5, pc}
			bt_addr_le_create_static(&new_addr);
    9b48:	a802      	add	r0, sp, #8
    9b4a:	f016 fc5e 	bl	2040a <bt_addr_le_create_static>
		} while (id_find(&new_addr) >= 0);
    9b4e:	a802      	add	r0, sp, #8
    9b50:	f7fe fdce 	bl	86f0 <id_find>
    9b54:	2800      	cmp	r0, #0
    9b56:	daf7      	bge.n	9b48 <id_create.isra.0+0x30>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    9b58:	a902      	add	r1, sp, #8
    9b5a:	4628      	mov	r0, r5
    9b5c:	f016 fab2 	bl	200c4 <bt_addr_le_copy>
		if (addr) {
    9b60:	2c00      	cmp	r4, #0
    9b62:	d0ef      	beq.n	9b44 <id_create.isra.0+0x2c>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    9b64:	4629      	mov	r1, r5
    9b66:	4620      	mov	r0, r4
    9b68:	e7ea      	b.n	9b40 <id_create.isra.0+0x28>
    9b6a:	bf00      	nop
    9b6c:	20000000 	.word	0x20000000

00009b70 <bt_recv>:
{
    9b70:	b570      	push	{r4, r5, r6, lr}
	return (enum bt_buf_type)(*(uint8_t *)net_buf_user_data(buf));
    9b72:	7d01      	ldrb	r1, [r0, #20]
	switch (bt_buf_get_type(buf)) {
    9b74:	2901      	cmp	r1, #1
{
    9b76:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    9b78:	d04b      	beq.n	9c12 <bt_recv+0xa2>
    9b7a:	2903      	cmp	r1, #3
    9b7c:	d17b      	bne.n	9c76 <bt_recv+0x106>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    9b7e:	8983      	ldrh	r3, [r0, #12]
    9b80:	2b03      	cmp	r3, #3
    9b82:	d80c      	bhi.n	9b9e <bt_recv+0x2e>
    9b84:	4a44      	ldr	r2, [pc, #272]	; (9c98 <bt_recv+0x128>)
    9b86:	4945      	ldr	r1, [pc, #276]	; (9c9c <bt_recv+0x12c>)
    9b88:	4845      	ldr	r0, [pc, #276]	; (9ca0 <bt_recv+0x130>)
    9b8a:	f240 5306 	movw	r3, #1286	; 0x506
    9b8e:	f014 f9e0 	bl	1df52 <printk>
    9b92:	4040      	eors	r0, r0
    9b94:	f380 8811 	msr	BASEPRI, r0
    9b98:	f04f 0003 	mov.w	r0, #3
    9b9c:	df02      	svc	2
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    9b9e:	2104      	movs	r1, #4
    9ba0:	f104 0008 	add.w	r0, r4, #8
    9ba4:	f018 fd35 	bl	22612 <net_buf_simple_pull_mem>
	if (buf->len != len) {
    9ba8:	89a1      	ldrh	r1, [r4, #12]
	len = sys_le16_to_cpu(hdr->len);
    9baa:	8842      	ldrh	r2, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    9bac:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    9bae:	23ff      	movs	r3, #255	; 0xff
	acl(buf)->handle = bt_acl_handle(handle);
    9bb0:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
    9bb4:	428a      	cmp	r2, r1
	acl(buf)->handle = bt_acl_handle(handle);
    9bb6:	82e0      	strh	r0, [r4, #22]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    9bb8:	7563      	strb	r3, [r4, #21]
	if (buf->len != len) {
    9bba:	d00d      	beq.n	9bd8 <bt_recv+0x68>
    9bbc:	4839      	ldr	r0, [pc, #228]	; (9ca4 <bt_recv+0x134>)
    9bbe:	4b3a      	ldr	r3, [pc, #232]	; (9ca8 <bt_recv+0x138>)
    9bc0:	1a1b      	subs	r3, r3, r0
    9bc2:	08db      	lsrs	r3, r3, #3
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    9bc4:	019b      	lsls	r3, r3, #6
    9bc6:	4839      	ldr	r0, [pc, #228]	; (9cac <bt_recv+0x13c>)
    9bc8:	f043 0301 	orr.w	r3, r3, #1
    9bcc:	f014 fca2 	bl	1e514 <log_2>
	net_buf_unref(buf);
    9bd0:	4620      	mov	r0, r4
    9bd2:	f011 ff85 	bl	1bae0 <net_buf_unref>
    9bd6:	e01a      	b.n	9c0e <bt_recv+0x9e>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    9bd8:	f001 f8c6 	bl	ad68 <bt_conn_lookup_handle>
	if (!conn) {
    9bdc:	4605      	mov	r5, r0
    9bde:	b958      	cbnz	r0, 9bf8 <bt_recv+0x88>
    9be0:	4b30      	ldr	r3, [pc, #192]	; (9ca4 <bt_recv+0x134>)
    9be2:	4a31      	ldr	r2, [pc, #196]	; (9ca8 <bt_recv+0x138>)
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    9be4:	8ae1      	ldrh	r1, [r4, #22]
    9be6:	4832      	ldr	r0, [pc, #200]	; (9cb0 <bt_recv+0x140>)
    9be8:	1ad2      	subs	r2, r2, r3
    9bea:	08d2      	lsrs	r2, r2, #3
    9bec:	0192      	lsls	r2, r2, #6
    9bee:	f042 0201 	orr.w	r2, r2, #1
    9bf2:	f014 fc7b 	bl	1e4ec <log_1>
		net_buf_unref(buf);
    9bf6:	e7eb      	b.n	9bd0 <bt_recv+0x60>
	acl(buf)->index = bt_conn_index(conn);
    9bf8:	f001 fbbc 	bl	b374 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
    9bfc:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
    9bfe:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    9c00:	4621      	mov	r1, r4
    9c02:	4628      	mov	r0, r5
    9c04:	f000 fdee 	bl	a7e4 <bt_conn_recv>
	bt_conn_unref(conn);
    9c08:	4628      	mov	r0, r5
    9c0a:	f016 fcf8 	bl	205fe <bt_conn_unref>
		return 0;
    9c0e:	2000      	movs	r0, #0
}
    9c10:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
    9c12:	8983      	ldrh	r3, [r0, #12]
    9c14:	2b01      	cmp	r3, #1
    9c16:	d80c      	bhi.n	9c32 <bt_recv+0xc2>
    9c18:	4a1f      	ldr	r2, [pc, #124]	; (9c98 <bt_recv+0x128>)
    9c1a:	4920      	ldr	r1, [pc, #128]	; (9c9c <bt_recv+0x12c>)
    9c1c:	4820      	ldr	r0, [pc, #128]	; (9ca0 <bt_recv+0x130>)
    9c1e:	f241 437f 	movw	r3, #5247	; 0x147f
    9c22:	f014 f996 	bl	1df52 <printk>
    9c26:	4040      	eors	r0, r0
    9c28:	f380 8811 	msr	BASEPRI, r0
    9c2c:	f04f 0003 	mov.w	r0, #3
    9c30:	df02      	svc	2
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    9c32:	2102      	movs	r1, #2
    9c34:	f104 0008 	add.w	r0, r4, #8
    9c38:	f018 fceb 	bl	22612 <net_buf_simple_pull_mem>
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    9c3c:	7802      	ldrb	r2, [r0, #0]
    9c3e:	2a1a      	cmp	r2, #26
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    9c40:	4605      	mov	r5, r0
 * @return true if the event can be processed in the RX thread, false
 *         if it cannot.
 */
static inline bool bt_hci_evt_is_prio(uint8_t evt)
{
	switch (evt) {
    9c42:	d811      	bhi.n	9c68 <bt_recv+0xf8>
    9c44:	2301      	movs	r3, #1
    9c46:	4093      	lsls	r3, r2
    9c48:	4a1a      	ldr	r2, [pc, #104]	; (9cb4 <bt_recv+0x144>)
    9c4a:	4213      	tst	r3, r2
    9c4c:	d00c      	beq.n	9c68 <bt_recv+0xf8>
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    9c4e:	4a12      	ldr	r2, [pc, #72]	; (9c98 <bt_recv+0x128>)
    9c50:	4919      	ldr	r1, [pc, #100]	; (9cb8 <bt_recv+0x148>)
    9c52:	4813      	ldr	r0, [pc, #76]	; (9ca0 <bt_recv+0x130>)
    9c54:	f241 4383 	movw	r3, #5251	; 0x1483
    9c58:	f014 f97b 	bl	1df52 <printk>
    9c5c:	4040      	eors	r0, r0
    9c5e:	f380 8811 	msr	BASEPRI, r0
    9c62:	f04f 0003 	mov.w	r0, #3
    9c66:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    9c68:	4a14      	ldr	r2, [pc, #80]	; (9cbc <bt_recv+0x14c>)
    9c6a:	7828      	ldrb	r0, [r5, #0]
    9c6c:	2305      	movs	r3, #5
    9c6e:	4621      	mov	r1, r4
    9c70:	f7fe fc72 	bl	8558 <handle_event>
    9c74:	e7ac      	b.n	9bd0 <bt_recv+0x60>
    9c76:	4b0b      	ldr	r3, [pc, #44]	; (9ca4 <bt_recv+0x134>)
    9c78:	4a0b      	ldr	r2, [pc, #44]	; (9ca8 <bt_recv+0x138>)
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    9c7a:	4811      	ldr	r0, [pc, #68]	; (9cc0 <bt_recv+0x150>)
    9c7c:	1ad2      	subs	r2, r2, r3
    9c7e:	08d2      	lsrs	r2, r2, #3
    9c80:	0192      	lsls	r2, r2, #6
    9c82:	f042 0201 	orr.w	r2, r2, #1
    9c86:	f014 fc31 	bl	1e4ec <log_1>
		net_buf_unref(buf);
    9c8a:	4620      	mov	r0, r4
    9c8c:	f011 ff28 	bl	1bae0 <net_buf_unref>
		return -EINVAL;
    9c90:	f06f 0015 	mvn.w	r0, #21
    9c94:	e7bc      	b.n	9c10 <bt_recv+0xa0>
    9c96:	bf00      	nop
    9c98:	0002592a 	.word	0x0002592a
    9c9c:	00025c9a 	.word	0x00025c9a
    9ca0:	00025967 	.word	0x00025967
    9ca4:	000236f0 	.word	0x000236f0
    9ca8:	000237b0 	.word	0x000237b0
    9cac:	00025cb3 	.word	0x00025cb3
    9cb0:	00025cd7 	.word	0x00025cd7
    9cb4:	0408c000 	.word	0x0408c000
    9cb8:	00025cf9 	.word	0x00025cf9
    9cbc:	00023c44 	.word	0x00023c44
    9cc0:	00025d17 	.word	0x00025d17

00009cc4 <bt_recv_prio>:
{
    9cc4:	b538      	push	{r3, r4, r5, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    9cc6:	7d03      	ldrb	r3, [r0, #20]
    9cc8:	2b01      	cmp	r3, #1
{
    9cca:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    9ccc:	d00c      	beq.n	9ce8 <bt_recv_prio+0x24>
    9cce:	4a21      	ldr	r2, [pc, #132]	; (9d54 <bt_recv_prio+0x90>)
    9cd0:	4921      	ldr	r1, [pc, #132]	; (9d58 <bt_recv_prio+0x94>)
    9cd2:	4822      	ldr	r0, [pc, #136]	; (9d5c <bt_recv_prio+0x98>)
    9cd4:	f641 1304 	movw	r3, #6404	; 0x1904
    9cd8:	f014 f93b 	bl	1df52 <printk>
    9cdc:	4040      	eors	r0, r0
    9cde:	f380 8811 	msr	BASEPRI, r0
    9ce2:	f04f 0003 	mov.w	r0, #3
    9ce6:	df02      	svc	2
	BT_ASSERT(buf->len >= sizeof(*hdr));
    9ce8:	89a3      	ldrh	r3, [r4, #12]
    9cea:	2b01      	cmp	r3, #1
    9cec:	d80c      	bhi.n	9d08 <bt_recv_prio+0x44>
    9cee:	4a19      	ldr	r2, [pc, #100]	; (9d54 <bt_recv_prio+0x90>)
    9cf0:	491b      	ldr	r1, [pc, #108]	; (9d60 <bt_recv_prio+0x9c>)
    9cf2:	481a      	ldr	r0, [pc, #104]	; (9d5c <bt_recv_prio+0x98>)
    9cf4:	f641 1305 	movw	r3, #6405	; 0x1905
    9cf8:	f014 f92b 	bl	1df52 <printk>
    9cfc:	4040      	eors	r0, r0
    9cfe:	f380 8811 	msr	BASEPRI, r0
    9d02:	f04f 0003 	mov.w	r0, #3
    9d06:	df02      	svc	2
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    9d08:	2102      	movs	r1, #2
    9d0a:	f104 0008 	add.w	r0, r4, #8
    9d0e:	f018 fc80 	bl	22612 <net_buf_simple_pull_mem>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    9d12:	7802      	ldrb	r2, [r0, #0]
    9d14:	2a1a      	cmp	r2, #26
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    9d16:	4605      	mov	r5, r0
    9d18:	d804      	bhi.n	9d24 <bt_recv_prio+0x60>
    9d1a:	2301      	movs	r3, #1
    9d1c:	4093      	lsls	r3, r2
    9d1e:	4a11      	ldr	r2, [pc, #68]	; (9d64 <bt_recv_prio+0xa0>)
    9d20:	4213      	tst	r3, r2
    9d22:	d10c      	bne.n	9d3e <bt_recv_prio+0x7a>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    9d24:	4a0b      	ldr	r2, [pc, #44]	; (9d54 <bt_recv_prio+0x90>)
    9d26:	4910      	ldr	r1, [pc, #64]	; (9d68 <bt_recv_prio+0xa4>)
    9d28:	480c      	ldr	r0, [pc, #48]	; (9d5c <bt_recv_prio+0x98>)
    9d2a:	f641 1308 	movw	r3, #6408	; 0x1908
    9d2e:	f014 f910 	bl	1df52 <printk>
    9d32:	4040      	eors	r0, r0
    9d34:	f380 8811 	msr	BASEPRI, r0
    9d38:	f04f 0003 	mov.w	r0, #3
    9d3c:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
    9d3e:	4a0b      	ldr	r2, [pc, #44]	; (9d6c <bt_recv_prio+0xa8>)
    9d40:	7828      	ldrb	r0, [r5, #0]
    9d42:	2304      	movs	r3, #4
    9d44:	4621      	mov	r1, r4
    9d46:	f7fe fc07 	bl	8558 <handle_event>
	net_buf_unref(buf);
    9d4a:	4620      	mov	r0, r4
    9d4c:	f011 fec8 	bl	1bae0 <net_buf_unref>
}
    9d50:	2000      	movs	r0, #0
    9d52:	bd38      	pop	{r3, r4, r5, pc}
    9d54:	0002592a 	.word	0x0002592a
    9d58:	00025d2b 	.word	0x00025d2b
    9d5c:	00025967 	.word	0x00025967
    9d60:	00025c9a 	.word	0x00025c9a
    9d64:	0408c000 	.word	0x0408c000
    9d68:	00025cfa 	.word	0x00025cfa
    9d6c:	00023c7c 	.word	0x00023c7c

00009d70 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    9d70:	4a08      	ldr	r2, [pc, #32]	; (9d94 <bt_hci_driver_register+0x24>)
{
    9d72:	4603      	mov	r3, r0
	if (bt_dev.drv) {
    9d74:	f8d2 0104 	ldr.w	r0, [r2, #260]	; 0x104
    9d78:	b930      	cbnz	r0, 9d88 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    9d7a:	68d9      	ldr	r1, [r3, #12]
    9d7c:	b139      	cbz	r1, 9d8e <bt_hci_driver_register+0x1e>
    9d7e:	6919      	ldr	r1, [r3, #16]
    9d80:	b129      	cbz	r1, 9d8e <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    9d82:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
	return 0;
    9d86:	4770      	bx	lr
		return -EALREADY;
    9d88:	f06f 0044 	mvn.w	r0, #68	; 0x44
    9d8c:	4770      	bx	lr
		return -EINVAL;
    9d8e:	f06f 0015 	mvn.w	r0, #21
}
    9d92:	4770      	bx	lr
    9d94:	20000000 	.word	0x20000000

00009d98 <bt_finalize_init>:
{
    9d98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    9d9c:	4c2d      	ldr	r4, [pc, #180]	; (9e54 <bt_finalize_init+0xbc>)
    9d9e:	4d2e      	ldr	r5, [pc, #184]	; (9e58 <bt_finalize_init+0xc0>)
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    9da0:	4e2e      	ldr	r6, [pc, #184]	; (9e5c <bt_finalize_init+0xc4>)
		BT_INFO("Identity[%d]: %s",
    9da2:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 9e74 <bt_finalize_init+0xdc>
{
    9da6:	b087      	sub	sp, #28
    9da8:	2102      	movs	r1, #2
    9daa:	f104 0098 	add.w	r0, r4, #152	; 0x98
    9dae:	f016 f99b 	bl	200e8 <atomic_or>
		bt_le_scan_update(false);
    9db2:	2000      	movs	r0, #0
    9db4:	f7ff fc24 	bl	9600 <bt_le_scan_update>
    9db8:	4b29      	ldr	r3, [pc, #164]	; (9e60 <bt_finalize_init+0xc8>)
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    9dba:	492a      	ldr	r1, [pc, #168]	; (9e64 <bt_finalize_init+0xcc>)
    9dbc:	1aed      	subs	r5, r5, r3
    9dbe:	79e3      	ldrb	r3, [r4, #7]
    9dc0:	4620      	mov	r0, r4
    9dc2:	2b01      	cmp	r3, #1
    9dc4:	bf88      	it	hi
    9dc6:	460e      	movhi	r6, r1
    9dc8:	f7fe f816 	bl	7df8 <bt_addr_le_str_real>
    9dcc:	f7fc fab2 	bl	6334 <log_strdup>
    9dd0:	08ed      	lsrs	r5, r5, #3
    9dd2:	01ad      	lsls	r5, r5, #6
    9dd4:	f045 0703 	orr.w	r7, r5, #3
    9dd8:	4602      	mov	r2, r0
    9dda:	4631      	mov	r1, r6
    9ddc:	4822      	ldr	r0, [pc, #136]	; (9e68 <bt_finalize_init+0xd0>)
    9dde:	463b      	mov	r3, r7
    9de0:	f014 fb98 	bl	1e514 <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
    9de4:	46a0      	mov	r8, r4
    9de6:	2601      	movs	r6, #1
    9de8:	79e3      	ldrb	r3, [r4, #7]
    9dea:	429e      	cmp	r6, r3
    9dec:	f108 0807 	add.w	r8, r8, #7
    9df0:	db22      	blt.n	9e38 <bt_finalize_init+0xa0>
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
    9df2:	f894 6038 	ldrb.w	r6, [r4, #56]	; 0x38
    9df6:	4630      	mov	r0, r6
    9df8:	f7fe fa18 	bl	822c <ver_str>
    9dfc:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
    9dfe:	9304      	str	r3, [sp, #16]
    9e00:	f045 0503 	orr.w	r5, r5, #3
    9e04:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
    9e06:	9305      	str	r3, [sp, #20]
    9e08:	e9cd 0602 	strd	r0, r6, [sp, #8]
    9e0c:	462b      	mov	r3, r5
    9e0e:	a902      	add	r1, sp, #8
    9e10:	2204      	movs	r2, #4
    9e12:	4816      	ldr	r0, [pc, #88]	; (9e6c <bt_finalize_init+0xd4>)
    9e14:	f014 fbb3 	bl	1e57e <log_n>
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
    9e18:	f894 6039 	ldrb.w	r6, [r4, #57]	; 0x39
    9e1c:	4630      	mov	r0, r6
    9e1e:	f7fe fa05 	bl	822c <ver_str>
    9e22:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
    9e24:	f8ad 5000 	strh.w	r5, [sp]
    9e28:	4601      	mov	r1, r0
    9e2a:	4632      	mov	r2, r6
    9e2c:	4810      	ldr	r0, [pc, #64]	; (9e70 <bt_finalize_init+0xd8>)
    9e2e:	f014 fb8a 	bl	1e546 <log_3>
}
    9e32:	b007      	add	sp, #28
    9e34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		BT_INFO("Identity[%d]: %s",
    9e38:	4640      	mov	r0, r8
    9e3a:	f7fd ffdd 	bl	7df8 <bt_addr_le_str_real>
    9e3e:	f7fc fa79 	bl	6334 <log_strdup>
    9e42:	4631      	mov	r1, r6
    9e44:	4602      	mov	r2, r0
    9e46:	463b      	mov	r3, r7
    9e48:	4648      	mov	r0, r9
    9e4a:	f014 fb63 	bl	1e514 <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
    9e4e:	3601      	adds	r6, #1
    9e50:	e7ca      	b.n	9de8 <bt_finalize_init+0x50>
    9e52:	bf00      	nop
    9e54:	20000000 	.word	0x20000000
    9e58:	000237b0 	.word	0x000237b0
    9e5c:	00025063 	.word	0x00025063
    9e60:	000236f0 	.word	0x000236f0
    9e64:	00025d4e 	.word	0x00025d4e
    9e68:	00025d52 	.word	0x00025d52
    9e6c:	00025d72 	.word	0x00025d72
    9e70:	00025db0 	.word	0x00025db0
    9e74:	00025d61 	.word	0x00025d61

00009e78 <bt_get_name>:
}
    9e78:	4800      	ldr	r0, [pc, #0]	; (9e7c <bt_get_name+0x4>)
    9e7a:	4770      	bx	lr
    9e7c:	00025aa2 	.word	0x00025aa2

00009e80 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
    9e80:	b537      	push	{r0, r1, r2, r4, r5, lr}
    9e82:	460c      	mov	r4, r1
	int new_id;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    9e84:	4605      	mov	r5, r0
    9e86:	b918      	cbnz	r0, 9e90 <bt_id_create+0x10>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
    9e88:	b34c      	cbz	r4, 9ede <bt_id_create+0x5e>
		return -EINVAL;
    9e8a:	f06f 0415 	mvn.w	r4, #21
    9e8e:	e023      	b.n	9ed8 <bt_id_create+0x58>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    9e90:	2300      	movs	r3, #0
    9e92:	2207      	movs	r2, #7
    9e94:	4669      	mov	r1, sp
    9e96:	9300      	str	r3, [sp, #0]
    9e98:	f8cd 3003 	str.w	r3, [sp, #3]
    9e9c:	f015 ffdb 	bl	1fe56 <memcmp>
    9ea0:	2800      	cmp	r0, #0
    9ea2:	d0f1      	beq.n	9e88 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
    9ea4:	782b      	ldrb	r3, [r5, #0]
    9ea6:	2b01      	cmp	r3, #1
    9ea8:	d104      	bne.n	9eb4 <bt_id_create+0x34>
    9eaa:	79ab      	ldrb	r3, [r5, #6]
    9eac:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    9eb0:	2bc0      	cmp	r3, #192	; 0xc0
    9eb2:	d00a      	beq.n	9eca <bt_id_create+0x4a>
    9eb4:	4b11      	ldr	r3, [pc, #68]	; (9efc <bt_id_create+0x7c>)
    9eb6:	4912      	ldr	r1, [pc, #72]	; (9f00 <bt_id_create+0x80>)
			BT_ERR("Only static random identity address supported");
    9eb8:	4812      	ldr	r0, [pc, #72]	; (9f04 <bt_id_create+0x84>)
    9eba:	1ac9      	subs	r1, r1, r3
    9ebc:	08c9      	lsrs	r1, r1, #3
    9ebe:	0189      	lsls	r1, r1, #6
    9ec0:	f041 0101 	orr.w	r1, r1, #1
    9ec4:	f014 fb05 	bl	1e4d2 <log_0>
			return -EINVAL;
    9ec8:	e7df      	b.n	9e8a <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
    9eca:	4628      	mov	r0, r5
    9ecc:	f7fe fc10 	bl	86f0 <id_find>
    9ed0:	2800      	cmp	r0, #0
    9ed2:	dbd9      	blt.n	9e88 <bt_id_create+0x8>
			return -EALREADY;
    9ed4:	f06f 0444 	mvn.w	r4, #68	; 0x44

	new_id = bt_dev.id_count++;
	id_create(new_id, addr, irk);

	return new_id;
}
    9ed8:	4620      	mov	r0, r4
    9eda:	b003      	add	sp, #12
    9edc:	bd30      	pop	{r4, r5, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
    9ede:	4b0a      	ldr	r3, [pc, #40]	; (9f08 <bt_id_create+0x88>)
    9ee0:	79dc      	ldrb	r4, [r3, #7]
    9ee2:	2c01      	cmp	r4, #1
    9ee4:	d006      	beq.n	9ef4 <bt_id_create+0x74>
	new_id = bt_dev.id_count++;
    9ee6:	1c62      	adds	r2, r4, #1
	id_create(new_id, addr, irk);
    9ee8:	4629      	mov	r1, r5
    9eea:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
    9eec:	71da      	strb	r2, [r3, #7]
	id_create(new_id, addr, irk);
    9eee:	f7ff fe13 	bl	9b18 <id_create.isra.0>
	return new_id;
    9ef2:	e7f1      	b.n	9ed8 <bt_id_create+0x58>
		return -ENOMEM;
    9ef4:	f06f 040b 	mvn.w	r4, #11
    9ef8:	e7ee      	b.n	9ed8 <bt_id_create+0x58>
    9efa:	bf00      	nop
    9efc:	000236f0 	.word	0x000236f0
    9f00:	000237b0 	.word	0x000237b0
    9f04:	00025dd7 	.word	0x00025dd7
    9f08:	20000000 	.word	0x20000000

00009f0c <bt_setup_public_id_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

void bt_setup_public_id_addr(void)
{
    9f0c:	b570      	push	{r4, r5, r6, lr}
    9f0e:	b086      	sub	sp, #24
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    9f10:	aa01      	add	r2, sp, #4
    9f12:	2100      	movs	r1, #0
    9f14:	f241 0009 	movw	r0, #4105	; 0x1009
    9f18:	f7fe feec 	bl	8cf4 <bt_hci_cmd_send_sync>
	if (err) {
    9f1c:	4e1f      	ldr	r6, [pc, #124]	; (9f9c <bt_setup_public_id_addr+0x90>)
    9f1e:	4604      	mov	r4, r0
    9f20:	b168      	cbz	r0, 9f3e <bt_setup_public_id_addr+0x32>
    9f22:	491f      	ldr	r1, [pc, #124]	; (9fa0 <bt_setup_public_id_addr+0x94>)
    9f24:	4b1f      	ldr	r3, [pc, #124]	; (9fa4 <bt_setup_public_id_addr+0x98>)
		BT_WARN("Failed to read public address");
    9f26:	4820      	ldr	r0, [pc, #128]	; (9fa8 <bt_setup_public_id_addr+0x9c>)
    9f28:	1ac9      	subs	r1, r1, r3
    9f2a:	08c9      	lsrs	r1, r1, #3
    9f2c:	0189      	lsls	r1, r1, #6
    9f2e:	f041 0102 	orr.w	r1, r1, #2
    9f32:	f014 face 	bl	1e4d2 <log_0>
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_read_public_addr(&addr);
    9f36:	2300      	movs	r3, #0
    9f38:	71f3      	strb	r3, [r6, #7]
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	id_create(BT_ID_DEFAULT, &addr, irk);
}
    9f3a:	b006      	add	sp, #24
    9f3c:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    9f3e:	9b01      	ldr	r3, [sp, #4]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    9f40:	689d      	ldr	r5, [r3, #8]
    9f42:	9004      	str	r0, [sp, #16]
    9f44:	3501      	adds	r5, #1
    9f46:	f8ad 0014 	strh.w	r0, [sp, #20]
	return memcmp(a, b, sizeof(*a));
    9f4a:	2206      	movs	r2, #6
    9f4c:	a904      	add	r1, sp, #16
    9f4e:	4628      	mov	r0, r5
    9f50:	f015 ff81 	bl	1fe56 <memcmp>
    9f54:	b918      	cbnz	r0, 9f5e <bt_setup_public_id_addr+0x52>
		net_buf_unref(rsp);
    9f56:	9801      	ldr	r0, [sp, #4]
    9f58:	f011 fdc2 	bl	1bae0 <net_buf_unref>
    9f5c:	e7eb      	b.n	9f36 <bt_setup_public_id_addr+0x2a>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
    9f5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9f62:	2206      	movs	r2, #6
    9f64:	a902      	add	r1, sp, #8
    9f66:	4628      	mov	r0, r5
    9f68:	9302      	str	r3, [sp, #8]
    9f6a:	f8ad 300c 	strh.w	r3, [sp, #12]
    9f6e:	f015 ff72 	bl	1fe56 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    9f72:	2800      	cmp	r0, #0
    9f74:	d0ef      	beq.n	9f56 <bt_setup_public_id_addr+0x4a>
	memcpy(dst, src, sizeof(*dst));
    9f76:	4629      	mov	r1, r5
    9f78:	2206      	movs	r2, #6
    9f7a:	f10d 0011 	add.w	r0, sp, #17
    9f7e:	f015 ff7a 	bl	1fe76 <memcpy>
	net_buf_unref(rsp);
    9f82:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
    9f84:	f88d 4010 	strb.w	r4, [sp, #16]
	net_buf_unref(rsp);
    9f88:	f011 fdaa 	bl	1bae0 <net_buf_unref>
	bt_dev.id_count = bt_read_public_addr(&addr);
    9f8c:	2301      	movs	r3, #1
	id_create(BT_ID_DEFAULT, &addr, irk);
    9f8e:	a904      	add	r1, sp, #16
    9f90:	4620      	mov	r0, r4
	bt_dev.id_count = bt_read_public_addr(&addr);
    9f92:	71f3      	strb	r3, [r6, #7]
	id_create(BT_ID_DEFAULT, &addr, irk);
    9f94:	f7ff fdc0 	bl	9b18 <id_create.isra.0>
    9f98:	e7cf      	b.n	9f3a <bt_setup_public_id_addr+0x2e>
    9f9a:	bf00      	nop
    9f9c:	20000000 	.word	0x20000000
    9fa0:	000237b0 	.word	0x000237b0
    9fa4:	000236f0 	.word	0x000236f0
    9fa8:	00025e05 	.word	0x00025e05

00009fac <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
    9fac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    9fb0:	4b25      	ldr	r3, [pc, #148]	; (a048 <bt_read_static_addr+0x9c>)
    9fb2:	f893 408a 	ldrb.w	r4, [r3, #138]	; 0x8a
    9fb6:	f014 0401 	ands.w	r4, r4, #1
{
    9fba:	4607      	mov	r7, r0
    9fbc:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    9fbe:	d10a      	bne.n	9fd6 <bt_read_static_addr+0x2a>
    9fc0:	4922      	ldr	r1, [pc, #136]	; (a04c <bt_read_static_addr+0xa0>)
    9fc2:	4b23      	ldr	r3, [pc, #140]	; (a050 <bt_read_static_addr+0xa4>)
		BT_WARN("Read Static Addresses command not available");
    9fc4:	4823      	ldr	r0, [pc, #140]	; (a054 <bt_read_static_addr+0xa8>)
    9fc6:	1ac9      	subs	r1, r1, r3
    9fc8:	08c9      	lsrs	r1, r1, #3
    9fca:	0189      	lsls	r1, r1, #6
    9fcc:	f041 0102 	orr.w	r1, r1, #2
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
	}

	net_buf_unref(rsp);
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
    9fd0:	f014 fa7f 	bl	1e4d2 <log_0>
    9fd4:	e012      	b.n	9ffc <bt_read_static_addr+0x50>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
    9fd6:	aa01      	add	r2, sp, #4
    9fd8:	2100      	movs	r1, #0
    9fda:	f64f 4009 	movw	r0, #64521	; 0xfc09
    9fde:	f7fe fe89 	bl	8cf4 <bt_hci_cmd_send_sync>
	if (err) {
    9fe2:	4605      	mov	r5, r0
    9fe4:	b170      	cbz	r0, a004 <bt_read_static_addr+0x58>
    9fe6:	4b1a      	ldr	r3, [pc, #104]	; (a050 <bt_read_static_addr+0xa4>)
    9fe8:	4918      	ldr	r1, [pc, #96]	; (a04c <bt_read_static_addr+0xa0>)
		BT_WARN("Failed to read static addresses");
    9fea:	481b      	ldr	r0, [pc, #108]	; (a058 <bt_read_static_addr+0xac>)
    9fec:	1ac9      	subs	r1, r1, r3
    9fee:	08c9      	lsrs	r1, r1, #3
    9ff0:	0189      	lsls	r1, r1, #6
    9ff2:	f041 0102 	orr.w	r1, r1, #2
    9ff6:	f014 fa6c 	bl	1e4d2 <log_0>
		return 0;
    9ffa:	2400      	movs	r4, #0
	}

	return cnt;
}
    9ffc:	4620      	mov	r0, r4
    9ffe:	b002      	add	sp, #8
    a000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	rp = (void *)rsp->data;
    a004:	9b01      	ldr	r3, [sp, #4]
    a006:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
    a008:	785c      	ldrb	r4, [r3, #1]
    a00a:	42b4      	cmp	r4, r6
    a00c:	bf28      	it	cs
    a00e:	4634      	movcs	r4, r6
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    a010:	f04f 0816 	mov.w	r8, #22
    a014:	1c9e      	adds	r6, r3, #2
	for (i = 0; i < cnt; i++) {
    a016:	42a5      	cmp	r5, r4
    a018:	db0d      	blt.n	a036 <bt_read_static_addr+0x8a>
	net_buf_unref(rsp);
    a01a:	9801      	ldr	r0, [sp, #4]
    a01c:	f011 fd60 	bl	1bae0 <net_buf_unref>
	if (!cnt) {
    a020:	2c00      	cmp	r4, #0
    a022:	d1eb      	bne.n	9ffc <bt_read_static_addr+0x50>
    a024:	4909      	ldr	r1, [pc, #36]	; (a04c <bt_read_static_addr+0xa0>)
    a026:	4b0a      	ldr	r3, [pc, #40]	; (a050 <bt_read_static_addr+0xa4>)
		BT_WARN("No static addresses stored in controller");
    a028:	480c      	ldr	r0, [pc, #48]	; (a05c <bt_read_static_addr+0xb0>)
    a02a:	1ac9      	subs	r1, r1, r3
    a02c:	08c9      	lsrs	r1, r1, #3
    a02e:	0189      	lsls	r1, r1, #6
    a030:	f041 0102 	orr.w	r1, r1, #2
    a034:	e7cc      	b.n	9fd0 <bt_read_static_addr+0x24>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    a036:	fb08 7005 	mla	r0, r8, r5, r7
    a03a:	2216      	movs	r2, #22
    a03c:	4631      	mov	r1, r6
    a03e:	f015 ff1a 	bl	1fe76 <memcpy>
	for (i = 0; i < cnt; i++) {
    a042:	3501      	adds	r5, #1
    a044:	e7e7      	b.n	a016 <bt_read_static_addr+0x6a>
    a046:	bf00      	nop
    a048:	20000000 	.word	0x20000000
    a04c:	000237b0 	.word	0x000237b0
    a050:	000236f0 	.word	0x000236f0
    a054:	00025e23 	.word	0x00025e23
    a058:	00025e4f 	.word	0x00025e4f
    a05c:	00025e6f 	.word	0x00025e6f

0000a060 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
    a060:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
    a062:	4d14      	ldr	r5, [pc, #80]	; (a0b4 <bt_setup_random_id_addr+0x54>)
    a064:	79ec      	ldrb	r4, [r5, #7]
{
    a066:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
    a068:	b9f4      	cbnz	r4, a0a8 <bt_setup_random_id_addr+0x48>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
    a06a:	2101      	movs	r1, #1
    a06c:	a802      	add	r0, sp, #8
    a06e:	f7ff ff9d 	bl	9fac <bt_read_static_addr>
    a072:	71e8      	strb	r0, [r5, #7]

		if (bt_dev.id_count) {
    a074:	b1c0      	cbz	r0, a0a8 <bt_setup_random_id_addr+0x48>
					atomic_set_bit(bt_dev.flags,
						       BT_DEV_STORE_ID);
				}
#endif /* CONFIG_BT_PRIVACY */

				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
    a076:	2716      	movs	r7, #22
    a078:	e00f      	b.n	a09a <bt_setup_random_id_addr+0x3a>
    a07a:	ab02      	add	r3, sp, #8
    a07c:	fb07 3106 	mla	r1, r7, r6, r3
    a080:	2206      	movs	r2, #6
    a082:	f10d 0001 	add.w	r0, sp, #1
    a086:	f015 fef6 	bl	1fe76 <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
    a08a:	2301      	movs	r3, #1

				id_create(i, &addr, irk);
    a08c:	4669      	mov	r1, sp
    a08e:	4630      	mov	r0, r6
				addr.type = BT_ADDR_LE_RANDOM;
    a090:	f88d 3000 	strb.w	r3, [sp]
				id_create(i, &addr, irk);
    a094:	f7ff fd40 	bl	9b18 <id_create.isra.0>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
    a098:	3401      	adds	r4, #1
    a09a:	79eb      	ldrb	r3, [r5, #7]
    a09c:	b2e6      	uxtb	r6, r4
    a09e:	42b3      	cmp	r3, r6
    a0a0:	d8eb      	bhi.n	a07a <bt_setup_random_id_addr+0x1a>
			}

			return 0;
    a0a2:	2000      	movs	r0, #0
	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
}
    a0a4:	b009      	add	sp, #36	; 0x24
    a0a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return bt_id_create(NULL, NULL);
    a0a8:	2100      	movs	r1, #0
    a0aa:	4608      	mov	r0, r1
    a0ac:	f7ff fee8 	bl	9e80 <bt_id_create>
    a0b0:	e7f8      	b.n	a0a4 <bt_setup_random_id_addr+0x44>
    a0b2:	bf00      	nop
    a0b4:	20000000 	.word	0x20000000

0000a0b8 <bt_enable>:
{
    a0b8:	b570      	push	{r4, r5, r6, lr}
	if (!bt_dev.drv) {
    a0ba:	4d33      	ldr	r5, [pc, #204]	; (a188 <bt_enable+0xd0>)
    a0bc:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
{
    a0c0:	b088      	sub	sp, #32
    a0c2:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    a0c4:	b973      	cbnz	r3, a0e4 <bt_enable+0x2c>
    a0c6:	4b31      	ldr	r3, [pc, #196]	; (a18c <bt_enable+0xd4>)
    a0c8:	4931      	ldr	r1, [pc, #196]	; (a190 <bt_enable+0xd8>)
		BT_ERR("No HCI driver registered");
    a0ca:	4832      	ldr	r0, [pc, #200]	; (a194 <bt_enable+0xdc>)
    a0cc:	1ac9      	subs	r1, r1, r3
    a0ce:	08c9      	lsrs	r1, r1, #3
    a0d0:	0189      	lsls	r1, r1, #6
    a0d2:	f041 0101 	orr.w	r1, r1, #1
    a0d6:	f014 f9fc 	bl	1e4d2 <log_0>
		return -ENODEV;
    a0da:	f06f 0412 	mvn.w	r4, #18
}
    a0de:	4620      	mov	r0, r4
    a0e0:	b008      	add	sp, #32
    a0e2:	bd70      	pop	{r4, r5, r6, pc}
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    a0e4:	2100      	movs	r1, #0
    a0e6:	f105 0098 	add.w	r0, r5, #152	; 0x98
    a0ea:	f016 f81d 	bl	20128 <atomic_test_and_set_bit>
    a0ee:	2800      	cmp	r0, #0
    a0f0:	d146      	bne.n	a180 <bt_enable+0xc8>
	ready_cb = cb;
    a0f2:	4b29      	ldr	r3, [pc, #164]	; (a198 <bt_enable+0xe0>)
    a0f4:	601e      	str	r6, [r3, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    a0f6:	2200      	movs	r2, #0
    a0f8:	2300      	movs	r3, #0
    a0fa:	e9cd 2306 	strd	r2, r3, [sp, #24]
    a0fe:	f06f 0308 	mvn.w	r3, #8
    a102:	e9cd 0302 	strd	r0, r3, [sp, #8]
    a106:	e9cd 0000 	strd	r0, r0, [sp]
    a10a:	9004      	str	r0, [sp, #16]
    a10c:	4b23      	ldr	r3, [pc, #140]	; (a19c <bt_enable+0xe4>)
    a10e:	4924      	ldr	r1, [pc, #144]	; (a1a0 <bt_enable+0xe8>)
    a110:	4824      	ldr	r0, [pc, #144]	; (a1a4 <bt_enable+0xec>)
    a112:	f44f 6280 	mov.w	r2, #1024	; 0x400
    a116:	f013 fbbd 	bl	1d894 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    a11a:	4923      	ldr	r1, [pc, #140]	; (a1a8 <bt_enable+0xf0>)
    a11c:	4821      	ldr	r0, [pc, #132]	; (a1a4 <bt_enable+0xec>)
    a11e:	f018 ff80 	bl	23022 <z_impl_k_thread_name_set>
		bt_hci_ecc_init();
    a122:	f7fe f811 	bl	8148 <bt_hci_ecc_init>
	err = bt_dev.drv->open();
    a126:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    a12a:	68db      	ldr	r3, [r3, #12]
    a12c:	4798      	blx	r3
	if (err) {
    a12e:	4604      	mov	r4, r0
    a130:	b158      	cbz	r0, a14a <bt_enable+0x92>
    a132:	4b16      	ldr	r3, [pc, #88]	; (a18c <bt_enable+0xd4>)
    a134:	4a16      	ldr	r2, [pc, #88]	; (a190 <bt_enable+0xd8>)
    a136:	1ad2      	subs	r2, r2, r3
    a138:	08d2      	lsrs	r2, r2, #3
		BT_ERR("HCI driver open failed (%d)", err);
    a13a:	0192      	lsls	r2, r2, #6
    a13c:	4601      	mov	r1, r0
    a13e:	f042 0201 	orr.w	r2, r2, #1
    a142:	481a      	ldr	r0, [pc, #104]	; (a1ac <bt_enable+0xf4>)
    a144:	f014 f9d2 	bl	1e4ec <log_1>
		return err;
    a148:	e7c9      	b.n	a0de <bt_enable+0x26>
	if (!cb) {
    a14a:	b966      	cbnz	r6, a166 <bt_enable+0xae>
	err = hci_init();
    a14c:	f7f6 fdf4 	bl	d38 <hci_init>
	if (err) {
    a150:	4604      	mov	r4, r0
    a152:	2800      	cmp	r0, #0
    a154:	d1c3      	bne.n	a0de <bt_enable+0x26>
		err = bt_conn_init();
    a156:	f001 f933 	bl	b3c0 <bt_conn_init>
		if (err) {
    a15a:	4604      	mov	r4, r0
    a15c:	2800      	cmp	r0, #0
    a15e:	d1be      	bne.n	a0de <bt_enable+0x26>
	bt_finalize_init();
    a160:	f7ff fe1a 	bl	9d98 <bt_finalize_init>
	return 0;
    a164:	e7bb      	b.n	a0de <bt_enable+0x26>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    a166:	4601      	mov	r1, r0
    a168:	f105 0094 	add.w	r0, r5, #148	; 0x94
    a16c:	f015 ffdc 	bl	20128 <atomic_test_and_set_bit>
    a170:	2800      	cmp	r0, #0
    a172:	d1b4      	bne.n	a0de <bt_enable+0x26>
		k_queue_append(&work_q->queue, work);
    a174:	480e      	ldr	r0, [pc, #56]	; (a1b0 <bt_enable+0xf8>)
    a176:	f105 018c 	add.w	r1, r5, #140	; 0x8c
    a17a:	f018 fdc7 	bl	22d0c <k_queue_append>
    a17e:	e7ae      	b.n	a0de <bt_enable+0x26>
		return -EALREADY;
    a180:	f06f 0444 	mvn.w	r4, #68	; 0x44
    a184:	e7ab      	b.n	a0de <bt_enable+0x26>
    a186:	bf00      	nop
    a188:	20000000 	.word	0x20000000
    a18c:	000236f0 	.word	0x000236f0
    a190:	000237b0 	.word	0x000237b0
    a194:	00025fcc 	.word	0x00025fcc
    a198:	20001edc 	.word	0x20001edc
    a19c:	00008725 	.word	0x00008725
    a1a0:	2000aad0 	.word	0x2000aad0
    a1a4:	20000b30 	.word	0x20000b30
    a1a8:	00025fe5 	.word	0x00025fe5
    a1ac:	00025feb 	.word	0x00025feb
    a1b0:	20001c30 	.word	0x20001c30

0000a1b4 <init_work>:
{
    a1b4:	b510      	push	{r4, lr}
	err = hci_init();
    a1b6:	f7f6 fdbf 	bl	d38 <hci_init>
	if (err) {
    a1ba:	4604      	mov	r4, r0
    a1bc:	b928      	cbnz	r0, a1ca <init_work+0x16>
		err = bt_conn_init();
    a1be:	f001 f8ff 	bl	b3c0 <bt_conn_init>
		if (err) {
    a1c2:	4604      	mov	r4, r0
    a1c4:	b908      	cbnz	r0, a1ca <init_work+0x16>
	bt_finalize_init();
    a1c6:	f7ff fde7 	bl	9d98 <bt_finalize_init>
	if (ready_cb) {
    a1ca:	4b04      	ldr	r3, [pc, #16]	; (a1dc <init_work+0x28>)
    a1cc:	681b      	ldr	r3, [r3, #0]
    a1ce:	b11b      	cbz	r3, a1d8 <init_work+0x24>
		ready_cb(err);
    a1d0:	4620      	mov	r0, r4
}
    a1d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    a1d6:	4718      	bx	r3
}
    a1d8:	bd10      	pop	{r4, pc}
    a1da:	bf00      	nop
    a1dc:	20001edc 	.word	0x20001edc

0000a1e0 <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
    a1e0:	b570      	push	{r4, r5, r6, lr}
    a1e2:	4605      	mov	r5, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    a1e4:	4828      	ldr	r0, [pc, #160]	; (a288 <bt_le_scan_start+0xa8>)
    a1e6:	460e      	mov	r6, r1
    a1e8:	f015 ff66 	bl	200b8 <atomic_get>

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    a1ec:	0781      	lsls	r1, r0, #30
    a1ee:	d53f      	bpl.n	a270 <bt_le_scan_start+0x90>
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
    a1f0:	782b      	ldrb	r3, [r5, #0]
    a1f2:	2b01      	cmp	r3, #1
    a1f4:	d83f      	bhi.n	a276 <bt_le_scan_start+0x96>
	if (param->options & ~(BT_LE_SCAN_OPT_FILTER_DUPLICATE |
    a1f6:	686b      	ldr	r3, [r5, #4]
    a1f8:	f033 030f 	bics.w	r3, r3, #15
    a1fc:	d13b      	bne.n	a276 <bt_le_scan_start+0x96>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
    a1fe:	8929      	ldrh	r1, [r5, #8]
    a200:	1f0b      	subs	r3, r1, #4
    a202:	b29b      	uxth	r3, r3
    a204:	f643 70fc 	movw	r0, #16380	; 0x3ffc
    a208:	4283      	cmp	r3, r0
    a20a:	d834      	bhi.n	a276 <bt_le_scan_start+0x96>
	if (param->window < 0x0004 || param->window > 0x4000) {
    a20c:	896a      	ldrh	r2, [r5, #10]
    a20e:	1f13      	subs	r3, r2, #4
    a210:	b29b      	uxth	r3, r3
    a212:	4283      	cmp	r3, r0
    a214:	d82f      	bhi.n	a276 <bt_le_scan_start+0x96>
	if (param->window > param->interval) {
    a216:	4291      	cmp	r1, r2
    a218:	d32d      	bcc.n	a276 <bt_le_scan_start+0x96>
	if (param->type && !bt_le_scan_random_addr_check()) {
		return -EINVAL;
	}

	/* Return if active scan is already enabled */
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    a21a:	481b      	ldr	r0, [pc, #108]	; (a288 <bt_le_scan_start+0xa8>)
    a21c:	2106      	movs	r1, #6
    a21e:	f015 ff83 	bl	20128 <atomic_test_and_set_bit>
    a222:	4603      	mov	r3, r0
    a224:	bb50      	cbnz	r0, a27c <bt_le_scan_start+0x9c>
    a226:	4818      	ldr	r0, [pc, #96]	; (a288 <bt_le_scan_start+0xa8>)
    a228:	f015 ff46 	bl	200b8 <atomic_get>
		return -EALREADY;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    a22c:	0682      	lsls	r2, r0, #26
    a22e:	d50b      	bpl.n	a248 <bt_le_scan_start+0x68>
	return set_le_scan_enable_legacy(enable);
    a230:	4618      	mov	r0, r3
    a232:	f7fe fe6f 	bl	8f14 <set_le_scan_enable_legacy>
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
		if (err) {
    a236:	4604      	mov	r4, r0
    a238:	b130      	cbz	r0, a248 <bt_le_scan_start+0x68>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    a23a:	4813      	ldr	r0, [pc, #76]	; (a288 <bt_le_scan_start+0xa8>)
    a23c:	f06f 0140 	mvn.w	r1, #64	; 0x40
    a240:	f015 ff43 	bl	200ca <atomic_and>
	}

	scan_dev_found_cb = cb;

	return 0;
}
    a244:	4620      	mov	r0, r4
    a246:	bd70      	pop	{r4, r5, r6, pc}
	atomic_set_bit_to(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP,
    a248:	686a      	ldr	r2, [r5, #4]
    a24a:	480f      	ldr	r0, [pc, #60]	; (a288 <bt_le_scan_start+0xa8>)
    a24c:	f002 0201 	and.w	r2, r2, #1
    a250:	2108      	movs	r1, #8
    a252:	f015 ff58 	bl	20106 <atomic_set_bit_to>
		if (param->timeout) {
    a256:	89ab      	ldrh	r3, [r5, #12]
    a258:	b99b      	cbnz	r3, a282 <bt_le_scan_start+0xa2>
		err = start_le_scan_legacy(param->type, param->interval,
    a25a:	896a      	ldrh	r2, [r5, #10]
    a25c:	8929      	ldrh	r1, [r5, #8]
    a25e:	7828      	ldrb	r0, [r5, #0]
    a260:	f7fe fe94 	bl	8f8c <start_le_scan_legacy>
	if (err) {
    a264:	4604      	mov	r4, r0
    a266:	2800      	cmp	r0, #0
    a268:	d1e7      	bne.n	a23a <bt_le_scan_start+0x5a>
	scan_dev_found_cb = cb;
    a26a:	4b08      	ldr	r3, [pc, #32]	; (a28c <bt_le_scan_start+0xac>)
    a26c:	601e      	str	r6, [r3, #0]
	return 0;
    a26e:	e7e9      	b.n	a244 <bt_le_scan_start+0x64>
		return -EAGAIN;
    a270:	f06f 040a 	mvn.w	r4, #10
    a274:	e7e6      	b.n	a244 <bt_le_scan_start+0x64>
		return -EINVAL;
    a276:	f06f 0415 	mvn.w	r4, #21
    a27a:	e7e3      	b.n	a244 <bt_le_scan_start+0x64>
		return -EALREADY;
    a27c:	f06f 0444 	mvn.w	r4, #68	; 0x44
    a280:	e7e0      	b.n	a244 <bt_le_scan_start+0x64>
			return -ENOTSUP;
    a282:	f06f 0422 	mvn.w	r4, #34	; 0x22
    a286:	e7dd      	b.n	a244 <bt_le_scan_start+0x64>
    a288:	20000098 	.word	0x20000098
    a28c:	20001ee8 	.word	0x20001ee8

0000a290 <bt_le_scan_stop>:

int bt_le_scan_stop(void)
{
    a290:	b508      	push	{r3, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    a292:	4808      	ldr	r0, [pc, #32]	; (a2b4 <bt_le_scan_stop+0x24>)
    a294:	f06f 0140 	mvn.w	r1, #64	; 0x40
    a298:	f015 ff17 	bl	200ca <atomic_and>
	/* Return if active scanning is already disabled */
	if (!atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    a29c:	0643      	lsls	r3, r0, #25
    a29e:	d506      	bpl.n	a2ae <bt_le_scan_stop+0x1e>
		return -EALREADY;
	}

	scan_dev_found_cb = NULL;
    a2a0:	4b05      	ldr	r3, [pc, #20]	; (a2b8 <bt_le_scan_stop+0x28>)
    a2a2:	2000      	movs	r0, #0
    a2a4:	6018      	str	r0, [r3, #0]
		pending_id_keys_update();
#endif
	}

	return bt_le_scan_update(false);
}
    a2a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_le_scan_update(false);
    a2aa:	f7ff b9a9 	b.w	9600 <bt_le_scan_update>
}
    a2ae:	f06f 0044 	mvn.w	r0, #68	; 0x44
    a2b2:	bd08      	pop	{r3, pc}
    a2b4:	20000098 	.word	0x20000098
    a2b8:	20001ee8 	.word	0x20001ee8

0000a2bc <bt_buf_get_rx>:
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_HOST_CHAN_CLASSIF,
				    buf, NULL);
}

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
    a2bc:	b538      	push	{r3, r4, r5, lr}
    a2be:	4605      	mov	r5, r0
		buf = net_buf_alloc(&hci_rx_pool, timeout);
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
    a2c0:	4805      	ldr	r0, [pc, #20]	; (a2d8 <bt_buf_get_rx+0x1c>)
    a2c2:	f018 f901 	bl	224c8 <net_buf_alloc_fixed>
#endif

	if (buf) {
    a2c6:	4604      	mov	r4, r0
    a2c8:	b120      	cbz	r0, a2d4 <bt_buf_get_rx+0x18>
		net_buf_reserve(buf, BT_BUF_RESERVE);
    a2ca:	2100      	movs	r1, #0
    a2cc:	3008      	adds	r0, #8
    a2ce:	f018 f920 	bl	22512 <net_buf_simple_reserve>
	*(uint8_t *)net_buf_user_data(buf) = type;
    a2d2:	7525      	strb	r5, [r4, #20]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    a2d4:	4620      	mov	r0, r4
    a2d6:	bd38      	pop	{r3, r4, r5, pc}
    a2d8:	20000980 	.word	0x20000980

0000a2dc <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
    a2dc:	b570      	push	{r4, r5, r6, lr}
    a2de:	4602      	mov	r2, r0
    a2e0:	460b      	mov	r3, r1
	__asm__ volatile(
    a2e2:	f04f 0120 	mov.w	r1, #32
    a2e6:	f3ef 8511 	mrs	r5, BASEPRI
    a2ea:	f381 8811 	msr	BASEPRI, r1
    a2ee:	f3bf 8f6f 	isb	sy
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    a2f2:	480c      	ldr	r0, [pc, #48]	; (a324 <bt_buf_get_cmd_complete+0x48>)
	bt_dev.sent_cmd = NULL;
    a2f4:	2100      	movs	r1, #0
	buf = bt_dev.sent_cmd;
    a2f6:	f8d0 40e8 	ldr.w	r4, [r0, #232]	; 0xe8
	bt_dev.sent_cmd = NULL;
    a2fa:	f8c0 10e8 	str.w	r1, [r0, #232]	; 0xe8
	__asm__ volatile(
    a2fe:	f385 8811 	msr	BASEPRI, r5
    a302:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    a306:	b924      	cbnz	r4, a312 <bt_buf_get_cmd_complete+0x36>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    a308:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    a30c:	2001      	movs	r0, #1
    a30e:	f7ff bfd5 	b.w	a2bc <bt_buf_get_rx>
    a312:	2301      	movs	r3, #1
		net_buf_reserve(buf, BT_BUF_RESERVE);
    a314:	f104 0008 	add.w	r0, r4, #8
    a318:	7523      	strb	r3, [r4, #20]
		buf->len = 0U;
    a31a:	81a1      	strh	r1, [r4, #12]
		net_buf_reserve(buf, BT_BUF_RESERVE);
    a31c:	f018 f8f9 	bl	22512 <net_buf_simple_reserve>
}
    a320:	4620      	mov	r0, r4
    a322:	bd70      	pop	{r4, r5, r6, pc}
    a324:	20000000 	.word	0x20000000

0000a328 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable, k_timeout_t timeout)
{
    a328:	b570      	push	{r4, r5, r6, lr}
    a32a:	4604      	mov	r4, r0
	switch (evt) {
    a32c:	2c0f      	cmp	r4, #15
{
    a32e:	460d      	mov	r5, r1
    a330:	4610      	mov	r0, r2
    a332:	4619      	mov	r1, r3
	switch (evt) {
    a334:	d805      	bhi.n	a342 <bt_buf_get_evt+0x1a>
    a336:	2c0d      	cmp	r4, #13
    a338:	d912      	bls.n	a360 <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_DISCARDABLE_BUF_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
    a33a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
    a33e:	f7ff bfcd 	b.w	a2dc <bt_buf_get_cmd_complete>
	switch (evt) {
    a342:	2c13      	cmp	r4, #19
    a344:	d10c      	bne.n	a360 <bt_buf_get_evt+0x38>
			buf = net_buf_alloc(&num_complete_pool, timeout);
    a346:	480b      	ldr	r0, [pc, #44]	; (a374 <bt_buf_get_evt+0x4c>)
			buf = net_buf_alloc(&discardable_pool, timeout);
    a348:	f018 f8be 	bl	224c8 <net_buf_alloc_fixed>
			if (buf) {
    a34c:	4604      	mov	r4, r0
    a34e:	b128      	cbz	r0, a35c <bt_buf_get_evt+0x34>
				net_buf_reserve(buf, BT_BUF_RESERVE);
    a350:	2100      	movs	r1, #0
    a352:	3008      	adds	r0, #8
    a354:	f018 f8dd 	bl	22512 <net_buf_simple_reserve>
    a358:	2301      	movs	r3, #1
    a35a:	7523      	strb	r3, [r4, #20]
}
    a35c:	4620      	mov	r0, r4
    a35e:	bd70      	pop	{r4, r5, r6, pc}
			buf = net_buf_alloc(&discardable_pool, timeout);
    a360:	4602      	mov	r2, r0
    a362:	460b      	mov	r3, r1
		if (discardable) {
    a364:	b10d      	cbz	r5, a36a <bt_buf_get_evt+0x42>
			buf = net_buf_alloc(&discardable_pool, timeout);
    a366:	4804      	ldr	r0, [pc, #16]	; (a378 <bt_buf_get_evt+0x50>)
    a368:	e7ee      	b.n	a348 <bt_buf_get_evt+0x20>
}
    a36a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    a36e:	2001      	movs	r0, #1
    a370:	f7ff bfa4 	b.w	a2bc <bt_buf_get_rx>
    a374:	200009a8 	.word	0x200009a8
    a378:	20000908 	.word	0x20000908

0000a37c <bt_pub_key_gen>:
}
#endif /* CONFIG_BT_BREDR */

#if defined(CONFIG_BT_ECC)
int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
    a37c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
    a37e:	4d21      	ldr	r5, [pc, #132]	; (a404 <bt_pub_key_gen+0x88>)
    a380:	f895 306a 	ldrb.w	r3, [r5, #106]	; 0x6a
    a384:	f003 0306 	and.w	r3, r3, #6
    a388:	2b06      	cmp	r3, #6
    a38a:	d00d      	beq.n	a3a8 <bt_pub_key_gen+0x2c>
    a38c:	4b1e      	ldr	r3, [pc, #120]	; (a408 <bt_pub_key_gen+0x8c>)
    a38e:	491f      	ldr	r1, [pc, #124]	; (a40c <bt_pub_key_gen+0x90>)
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		BT_WARN("ECC HCI commands not available");
    a390:	481f      	ldr	r0, [pc, #124]	; (a410 <bt_pub_key_gen+0x94>)
    a392:	1ac9      	subs	r1, r1, r3
    a394:	08c9      	lsrs	r1, r1, #3
    a396:	0189      	lsls	r1, r1, #6
    a398:	f041 0102 	orr.w	r1, r1, #2
    a39c:	f014 f899 	bl	1e4d2 <log_0>
		return -ENOTSUP;
    a3a0:	f06f 0422 	mvn.w	r4, #34	; 0x22
		pub_key_cb = NULL;
		return err;
	}

	return 0;
}
    a3a4:	4620      	mov	r0, r4
    a3a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	new_cb->_next = pub_key_cb;
    a3a8:	4e1a      	ldr	r6, [pc, #104]	; (a414 <bt_pub_key_gen+0x98>)
    a3aa:	6833      	ldr	r3, [r6, #0]
    a3ac:	6043      	str	r3, [r0, #4]
	pub_key_cb = new_cb;
    a3ae:	6030      	str	r0, [r6, #0]
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    a3b0:	2104      	movs	r1, #4
    a3b2:	f105 0098 	add.w	r0, r5, #152	; 0x98
    a3b6:	f015 feb7 	bl	20128 <atomic_test_and_set_bit>
    a3ba:	4607      	mov	r7, r0
    a3bc:	bb00      	cbnz	r0, a400 <bt_pub_key_gen+0x84>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    a3be:	f06f 0108 	mvn.w	r1, #8
    a3c2:	f105 0098 	add.w	r0, r5, #152	; 0x98
    a3c6:	f015 fe80 	bl	200ca <atomic_and>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
    a3ca:	463a      	mov	r2, r7
    a3cc:	4639      	mov	r1, r7
    a3ce:	f242 0025 	movw	r0, #8229	; 0x2025
    a3d2:	f7fe fc8f 	bl	8cf4 <bt_hci_cmd_send_sync>
	if (err) {
    a3d6:	4604      	mov	r4, r0
    a3d8:	2800      	cmp	r0, #0
    a3da:	d0e3      	beq.n	a3a4 <bt_pub_key_gen+0x28>
    a3dc:	4b0a      	ldr	r3, [pc, #40]	; (a408 <bt_pub_key_gen+0x8c>)
    a3de:	490b      	ldr	r1, [pc, #44]	; (a40c <bt_pub_key_gen+0x90>)
		BT_ERR("Sending LE P256 Public Key command failed");
    a3e0:	480d      	ldr	r0, [pc, #52]	; (a418 <bt_pub_key_gen+0x9c>)
    a3e2:	1ac9      	subs	r1, r1, r3
    a3e4:	08c9      	lsrs	r1, r1, #3
    a3e6:	0189      	lsls	r1, r1, #6
    a3e8:	f041 0101 	orr.w	r1, r1, #1
    a3ec:	f014 f871 	bl	1e4d2 <log_0>
    a3f0:	f06f 0110 	mvn.w	r1, #16
    a3f4:	f105 0098 	add.w	r0, r5, #152	; 0x98
    a3f8:	f015 fe67 	bl	200ca <atomic_and>
		pub_key_cb = NULL;
    a3fc:	6037      	str	r7, [r6, #0]
		return err;
    a3fe:	e7d1      	b.n	a3a4 <bt_pub_key_gen+0x28>
		return 0;
    a400:	2400      	movs	r4, #0
    a402:	e7cf      	b.n	a3a4 <bt_pub_key_gen+0x28>
    a404:	20000000 	.word	0x20000000
    a408:	000236f0 	.word	0x000236f0
    a40c:	000237b0 	.word	0x000237b0
    a410:	00026007 	.word	0x00026007
    a414:	20001ed8 	.word	0x20001ed8
    a418:	00026026 	.word	0x00026026

0000a41c <bt_pub_key_get>:

const uint8_t *bt_pub_key_get(void)
{
    a41c:	b508      	push	{r3, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    a41e:	4804      	ldr	r0, [pc, #16]	; (a430 <bt_pub_key_get+0x14>)
    a420:	f015 fe4a 	bl	200b8 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
    a424:	f010 0f08 	tst.w	r0, #8
		return pub_key;
	}

	return NULL;
}
    a428:	4802      	ldr	r0, [pc, #8]	; (a434 <bt_pub_key_get+0x18>)
    a42a:	bf08      	it	eq
    a42c:	2000      	moveq	r0, #0
    a42e:	bd08      	pop	{r3, pc}
    a430:	20000098 	.word	0x20000098
    a434:	20009be8 	.word	0x20009be8

0000a438 <bt_dh_key_gen>:

int bt_dh_key_gen(const uint8_t remote_pk[64], bt_dh_key_cb_t cb)
{
    a438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_cp_le_generate_dhkey *cp;
	struct net_buf *buf;
	int err;

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    a43a:	4d1a      	ldr	r5, [pc, #104]	; (a4a4 <bt_dh_key_gen+0x6c>)
    a43c:	682b      	ldr	r3, [r5, #0]
{
    a43e:	4606      	mov	r6, r0
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    a440:	b113      	cbz	r3, a448 <bt_dh_key_gen+0x10>
		return -EBUSY;
    a442:	f06f 000f 	mvn.w	r0, #15
		dh_key_cb = NULL;
		return err;
	}

	return 0;
}
    a446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a448:	4817      	ldr	r0, [pc, #92]	; (a4a8 <bt_dh_key_gen+0x70>)
    a44a:	f015 fe35 	bl	200b8 <atomic_get>
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    a44e:	06c2      	lsls	r2, r0, #27
    a450:	f3c0 1700 	ubfx	r7, r0, #4, #1
    a454:	d4f5      	bmi.n	a442 <bt_dh_key_gen+0xa>
    a456:	4814      	ldr	r0, [pc, #80]	; (a4a8 <bt_dh_key_gen+0x70>)
    a458:	f015 fe2e 	bl	200b8 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
    a45c:	0703      	lsls	r3, r0, #28
    a45e:	d51d      	bpl.n	a49c <bt_dh_key_gen+0x64>
	dh_key_cb = cb;
    a460:	6029      	str	r1, [r5, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
    a462:	f242 0026 	movw	r0, #8230	; 0x2026
    a466:	2140      	movs	r1, #64	; 0x40
    a468:	f7fe fae8 	bl	8a3c <bt_hci_cmd_create>
	if (!buf) {
    a46c:	4604      	mov	r4, r0
    a46e:	b918      	cbnz	r0, a478 <bt_dh_key_gen+0x40>
		dh_key_cb = NULL;
    a470:	6028      	str	r0, [r5, #0]
		return -ENOBUFS;
    a472:	f06f 0036 	mvn.w	r0, #54	; 0x36
    a476:	e7e6      	b.n	a446 <bt_dh_key_gen+0xe>
	cp = net_buf_add(buf, sizeof(*cp));
    a478:	2140      	movs	r1, #64	; 0x40
    a47a:	3008      	adds	r0, #8
    a47c:	f018 f88c 	bl	22598 <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
    a480:	2240      	movs	r2, #64	; 0x40
    a482:	4631      	mov	r1, r6
    a484:	f015 fcf7 	bl	1fe76 <memcpy>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
    a488:	463a      	mov	r2, r7
    a48a:	4621      	mov	r1, r4
    a48c:	f242 0026 	movw	r0, #8230	; 0x2026
    a490:	f7fe fc30 	bl	8cf4 <bt_hci_cmd_send_sync>
	if (err) {
    a494:	2800      	cmp	r0, #0
    a496:	d0d6      	beq.n	a446 <bt_dh_key_gen+0xe>
		dh_key_cb = NULL;
    a498:	602f      	str	r7, [r5, #0]
		return err;
    a49a:	e7d4      	b.n	a446 <bt_dh_key_gen+0xe>
		return -EADDRNOTAVAIL;
    a49c:	f06f 0030 	mvn.w	r0, #48	; 0x30
    a4a0:	e7d1      	b.n	a446 <bt_dh_key_gen+0xe>
    a4a2:	bf00      	nop
    a4a4:	20001ed4 	.word	0x20001ed4
    a4a8:	20000098 	.word	0x20000098

0000a4ac <tx_free>:
	return bt_l2cap_update_conn_param(conn, param);
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
    a4ac:	2300      	movs	r3, #0
	tx->user_data = NULL;
    a4ae:	e9c0 3301 	strd	r3, r3, [r0, #4]
{
    a4b2:	4601      	mov	r1, r0
	tx->pending_no_cb = 0U;
    a4b4:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
    a4b6:	4801      	ldr	r0, [pc, #4]	; (a4bc <tx_free+0x10>)
    a4b8:	f018 bc28 	b.w	22d0c <k_queue_append>
    a4bc:	20000888 	.word	0x20000888

0000a4c0 <notify_connected>:
{
    a4c0:	b538      	push	{r3, r4, r5, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
    a4c2:	4b09      	ldr	r3, [pc, #36]	; (a4e8 <notify_connected+0x28>)
    a4c4:	681d      	ldr	r5, [r3, #0]
{
    a4c6:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    a4c8:	7b21      	ldrb	r1, [r4, #12]
    a4ca:	b92d      	cbnz	r5, a4d8 <notify_connected+0x18>
	if (!conn->err) {
    a4cc:	b951      	cbnz	r1, a4e4 <notify_connected+0x24>
		bt_gatt_connected(conn);
    a4ce:	4620      	mov	r0, r4
}
    a4d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_gatt_connected(conn);
    a4d4:	f004 b8a8 	b.w	e628 <bt_gatt_connected>
		if (cb->connected) {
    a4d8:	682b      	ldr	r3, [r5, #0]
    a4da:	b10b      	cbz	r3, a4e0 <notify_connected+0x20>
			cb->connected(conn, conn->err);
    a4dc:	4620      	mov	r0, r4
    a4de:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    a4e0:	69ad      	ldr	r5, [r5, #24]
    a4e2:	e7f1      	b.n	a4c8 <notify_connected+0x8>
}
    a4e4:	bd38      	pop	{r3, r4, r5, pc}
    a4e6:	bf00      	nop
    a4e8:	20001ef0 	.word	0x20001ef0

0000a4ec <send_frag>:
	return 0;
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, uint8_t flags,
		      bool always_consume)
{
    a4ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn_tx *tx = tx_data(buf)->tx;
    a4f0:	694d      	ldr	r5, [r1, #20]
{
    a4f2:	4604      	mov	r4, r0
    a4f4:	460e      	mov	r6, r1
    a4f6:	4691      	mov	r9, r2
    a4f8:	461f      	mov	r7, r3
	return z_impl_k_sem_take(sem, timeout);
    a4fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a4fe:	4843      	ldr	r0, [pc, #268]	; (a60c <send_frag+0x120>)
    a500:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    a504:	f013 f95e 	bl	1d7c4 <z_impl_k_sem_take>

	/* Wait until the controller can accept ACL packets */
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
    a508:	7b63      	ldrb	r3, [r4, #13]
    a50a:	2b06      	cmp	r3, #6
    a50c:	d14e      	bne.n	a5ac <send_frag+0xc0>
		goto fail;
	}

	hdr = net_buf_push(buf, sizeof(*hdr));
    a50e:	2104      	movs	r1, #4
    a510:	f106 0008 	add.w	r0, r6, #8
    a514:	f018 f861 	bl	225da <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    a518:	8822      	ldrh	r2, [r4, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    a51a:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    a51c:	ea42 3209 	orr.w	r2, r2, r9, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    a520:	3b04      	subs	r3, #4
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    a522:	8002      	strh	r2, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    a524:	8043      	strh	r3, [r0, #2]
	__asm__ volatile(
    a526:	f04f 0320 	mov.w	r3, #32
    a52a:	f3ef 8211 	mrs	r2, BASEPRI
    a52e:	f383 8811 	msr	BASEPRI, r3
    a532:	f3bf 8f6f 	isb	sy

	/* Add to pending, it must be done before bt_buf_set_type */
	key = irq_lock();
	if (tx) {
    a536:	2d00      	cmp	r5, #0
    a538:	d04a      	beq.n	a5d0 <send_frag+0xe4>
	parent->next = child;
    a53a:	2300      	movs	r3, #0
    a53c:	602b      	str	r3, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
    a53e:	69a3      	ldr	r3, [r4, #24]
    a540:	2b00      	cmp	r3, #0
    a542:	d142      	bne.n	a5ca <send_frag+0xde>
	list->head = node;
    a544:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
    a548:	f382 8811 	msr	BASEPRI, r2
    a54c:	f3bf 8f6f 	isb	sy
    a550:	2302      	movs	r3, #2
    a552:	7533      	strb	r3, [r6, #20]
	}
	irq_unlock(key);

	bt_buf_set_type(buf, BT_BUF_ACL_OUT);

	err = bt_send(buf);
    a554:	4630      	mov	r0, r6
    a556:	f015 ff66 	bl	20426 <bt_send>
	if (err) {
    a55a:	4601      	mov	r1, r0
    a55c:	2800      	cmp	r0, #0
    a55e:	d053      	beq.n	a608 <send_frag+0x11c>
    a560:	4b2b      	ldr	r3, [pc, #172]	; (a610 <send_frag+0x124>)
    a562:	4a2c      	ldr	r2, [pc, #176]	; (a614 <send_frag+0x128>)
		BT_ERR("Unable to send to driver (err %d)", err);
    a564:	482c      	ldr	r0, [pc, #176]	; (a618 <send_frag+0x12c>)
    a566:	1ad2      	subs	r2, r2, r3
    a568:	08d2      	lsrs	r2, r2, #3
    a56a:	0192      	lsls	r2, r2, #6
    a56c:	f042 0201 	orr.w	r2, r2, #1
    a570:	f013 ffbc 	bl	1e4ec <log_1>
	__asm__ volatile(
    a574:	f04f 0320 	mov.w	r3, #32
    a578:	f3ef 8111 	mrs	r1, BASEPRI
    a57c:	f383 8811 	msr	BASEPRI, r3
    a580:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		/* Roll back the pending TX info */
		if (tx) {
    a584:	2d00      	cmp	r5, #0
    a586:	d039      	beq.n	a5fc <send_frag+0x110>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    a588:	6963      	ldr	r3, [r4, #20]
    a58a:	2200      	movs	r2, #0
    a58c:	b153      	cbz	r3, a5a4 <send_frag+0xb8>
    a58e:	429d      	cmp	r5, r3
    a590:	d131      	bne.n	a5f6 <send_frag+0x10a>
Z_GENLIST_REMOVE(slist, snode)
    a592:	682b      	ldr	r3, [r5, #0]
    a594:	bb4a      	cbnz	r2, a5ea <send_frag+0xfe>
    a596:	69a2      	ldr	r2, [r4, #24]
	list->head = node;
    a598:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
    a59a:	4295      	cmp	r5, r2
    a59c:	d100      	bne.n	a5a0 <send_frag+0xb4>
	list->tail = node;
    a59e:	61a3      	str	r3, [r4, #24]
	parent->next = child;
    a5a0:	2300      	movs	r3, #0
    a5a2:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
    a5a4:	f381 8811 	msr	BASEPRI, r1
    a5a8:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    a5ac:	4817      	ldr	r0, [pc, #92]	; (a60c <send_frag+0x120>)
    a5ae:	f013 f8e3 	bl	1d778 <z_impl_k_sem_give>

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (tx) {
    a5b2:	b115      	cbz	r5, a5ba <send_frag+0xce>
		tx_free(tx);
    a5b4:	4628      	mov	r0, r5
    a5b6:	f7ff ff79 	bl	a4ac <tx_free>
	}

	if (always_consume) {
    a5ba:	b11f      	cbz	r7, a5c4 <send_frag+0xd8>
		net_buf_unref(buf);
    a5bc:	4630      	mov	r0, r6
    a5be:	f011 fa8f 	bl	1bae0 <net_buf_unref>
	}
	return false;
    a5c2:	2700      	movs	r7, #0
}
    a5c4:	4638      	mov	r0, r7
    a5c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    a5ca:	601d      	str	r5, [r3, #0]
	list->tail = node;
    a5cc:	61a5      	str	r5, [r4, #24]
}
    a5ce:	e7bb      	b.n	a548 <send_frag+0x5c>
		tail_tx = (void *)sys_slist_peek_tail(&conn->tx_pending);
    a5d0:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
    a5d2:	b133      	cbz	r3, a5e2 <send_frag+0xf6>
			pending_no_cb = &tail_tx->pending_no_cb;
    a5d4:	f103 080c 	add.w	r8, r3, #12
    a5d8:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
    a5da:	3301      	adds	r3, #1
    a5dc:	f8c8 3000 	str.w	r3, [r8]
    a5e0:	e7b2      	b.n	a548 <send_frag+0x5c>
			pending_no_cb = &conn->pending_no_cb;
    a5e2:	69e3      	ldr	r3, [r4, #28]
    a5e4:	f104 081c 	add.w	r8, r4, #28
    a5e8:	e7f7      	b.n	a5da <send_frag+0xee>
	parent->next = child;
    a5ea:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    a5ec:	69a3      	ldr	r3, [r4, #24]
    a5ee:	429d      	cmp	r5, r3
	list->tail = node;
    a5f0:	bf08      	it	eq
    a5f2:	61a2      	streq	r2, [r4, #24]
}
    a5f4:	e7d4      	b.n	a5a0 <send_frag+0xb4>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    a5f6:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    a5f8:	681b      	ldr	r3, [r3, #0]
    a5fa:	e7c7      	b.n	a58c <send_frag+0xa0>
			(*pending_no_cb)--;
    a5fc:	f8d8 3000 	ldr.w	r3, [r8]
    a600:	3b01      	subs	r3, #1
    a602:	f8c8 3000 	str.w	r3, [r8]
    a606:	e7cd      	b.n	a5a4 <send_frag+0xb8>
	return true;
    a608:	2701      	movs	r7, #1
    a60a:	e7db      	b.n	a5c4 <send_frag+0xd8>
    a60c:	200000b4 	.word	0x200000b4
    a610:	000236f0 	.word	0x000236f0
    a614:	000236f8 	.word	0x000236f8
    a618:	0002599f 	.word	0x0002599f

0000a61c <conn_update_timeout>:
{
    a61c:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
    a61e:	f810 3c4b 	ldrb.w	r3, [r0, #-75]
{
    a622:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED) {
    a624:	b9a3      	cbnz	r3, a650 <conn_update_timeout+0x34>
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, update_work);
    a626:	f1a0 0658 	sub.w	r6, r0, #88	; 0x58
		bt_l2cap_disconnected(conn);
    a62a:	4630      	mov	r0, r6
    a62c:	f016 f990 	bl	20950 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
    a630:	4b14      	ldr	r3, [pc, #80]	; (a684 <conn_update_timeout+0x68>)
    a632:	681d      	ldr	r5, [r3, #0]
    a634:	b925      	cbnz	r5, a640 <conn_update_timeout+0x24>
	return conn;
}

void bt_conn_unref(struct bt_conn *conn)
{
	atomic_val_t old = atomic_dec(&conn->ref);
    a636:	1f20      	subs	r0, r4, #4
}
    a638:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	atomic_val_t old = atomic_dec(&conn->ref);
    a63c:	f015 bf0f 	b.w	2045e <atomic_dec>
		if (cb->disconnected) {
    a640:	686b      	ldr	r3, [r5, #4]
    a642:	b11b      	cbz	r3, a64c <conn_update_timeout+0x30>
			cb->disconnected(conn, conn->err);
    a644:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
    a648:	4630      	mov	r0, r6
    a64a:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    a64c:	69ad      	ldr	r5, [r5, #24]
    a64e:	e7f1      	b.n	a634 <conn_update_timeout+0x18>
	if (conn->type != BT_CONN_TYPE_LE) {
    a650:	f810 3c56 	ldrb.w	r3, [r0, #-86]
    a654:	2b01      	cmp	r3, #1
    a656:	d114      	bne.n	a682 <conn_update_timeout+0x66>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    a658:	f810 3c55 	ldrb.w	r3, [r0, #-85]
    a65c:	b91b      	cbnz	r3, a666 <conn_update_timeout+0x4a>
}
    a65e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_le_create_conn_cancel();
    a662:	f7fe bd4b 	b.w	90fc <bt_le_create_conn_cancel>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    a666:	f1a0 0454 	sub.w	r4, r0, #84	; 0x54
    a66a:	f3bf 8f5b 	dmb	ish
    a66e:	e854 3f00 	ldrex	r3, [r4]
    a672:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    a676:	e844 3200 	strex	r2, r3, [r4]
    a67a:	2a00      	cmp	r2, #0
    a67c:	d1f7      	bne.n	a66e <conn_update_timeout+0x52>
    a67e:	f3bf 8f5b 	dmb	ish
}
    a682:	bd70      	pop	{r4, r5, r6, pc}
    a684:	20001ef0 	.word	0x20001ef0

0000a688 <conn_cleanup>:
{
    a688:	b570      	push	{r4, r5, r6, lr}
    a68a:	4604      	mov	r4, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
    a68c:	f100 0634 	add.w	r6, r0, #52	; 0x34
    a690:	2200      	movs	r2, #0
    a692:	2300      	movs	r3, #0
    a694:	4630      	mov	r0, r6
    a696:	f017 ff1c 	bl	224d2 <net_buf_get>
    a69a:	4605      	mov	r5, r0
    a69c:	b958      	cbnz	r0, a6b6 <conn_cleanup+0x2e>
	bt_conn_reset_rx_state(conn);
    a69e:	4620      	mov	r0, r4
    a6a0:	f015 fed2 	bl	20448 <bt_conn_reset_rx_state>
 * @retval -EADDRINUSE Work item is pending on a different workqueue.
 */
static inline int k_delayed_work_submit(struct k_delayed_work *work,
					k_timeout_t delay)
{
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    a6a4:	f104 0158 	add.w	r1, r4, #88	; 0x58
    a6a8:	4807      	ldr	r0, [pc, #28]	; (a6c8 <conn_cleanup+0x40>)
}
    a6aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a6ae:	2200      	movs	r2, #0
    a6b0:	2300      	movs	r3, #0
    a6b2:	f013 b99f 	b.w	1d9f4 <k_delayed_work_submit_to_queue>
		if (tx_data(buf)->tx) {
    a6b6:	6968      	ldr	r0, [r5, #20]
    a6b8:	b108      	cbz	r0, a6be <conn_cleanup+0x36>
			tx_free(tx_data(buf)->tx);
    a6ba:	f7ff fef7 	bl	a4ac <tx_free>
		net_buf_unref(buf);
    a6be:	4628      	mov	r0, r5
    a6c0:	f011 fa0e 	bl	1bae0 <net_buf_unref>
    a6c4:	e7e4      	b.n	a690 <conn_cleanup+0x8>
    a6c6:	bf00      	nop
    a6c8:	20001c30 	.word	0x20001c30

0000a6cc <bt_conn_get_pkts>:
}
    a6cc:	4800      	ldr	r0, [pc, #0]	; (a6d0 <bt_conn_get_pkts+0x4>)
    a6ce:	4770      	bx	lr
    a6d0:	200000b4 	.word	0x200000b4

0000a6d4 <notify_le_param_updated>:
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    a6d4:	1d03      	adds	r3, r0, #4
{
    a6d6:	b570      	push	{r4, r5, r6, lr}
    a6d8:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    a6da:	4618      	mov	r0, r3
    a6dc:	f015 feae 	bl	2043c <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    a6e0:	0582      	lsls	r2, r0, #22
    a6e2:	d519      	bpl.n	a718 <notify_le_param_updated+0x44>
	    conn->le.interval >= conn->le.interval_min &&
    a6e4:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    a6e8:	f8b4 10a0 	ldrh.w	r1, [r4, #160]	; 0xa0
    a6ec:	4291      	cmp	r1, r2
    a6ee:	d813      	bhi.n	a718 <notify_le_param_updated+0x44>
	    conn->le.interval >= conn->le.interval_min &&
    a6f0:	f8b4 10a2 	ldrh.w	r1, [r4, #162]	; 0xa2
    a6f4:	4291      	cmp	r1, r2
    a6f6:	d30f      	bcc.n	a718 <notify_le_param_updated+0x44>
	    conn->le.latency == conn->le.pending_latency &&
    a6f8:	e9d4 1229 	ldrd	r1, r2, [r4, #164]	; 0xa4
    a6fc:	4291      	cmp	r1, r2
    a6fe:	d10b      	bne.n	a718 <notify_le_param_updated+0x44>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    a700:	f3bf 8f5b 	dmb	ish
    a704:	e853 2f00 	ldrex	r2, [r3]
    a708:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    a70c:	e843 2100 	strex	r1, r2, [r3]
    a710:	2900      	cmp	r1, #0
    a712:	d1f7      	bne.n	a704 <notify_le_param_updated+0x30>
    a714:	f3bf 8f5b 	dmb	ish
	for (cb = callback_list; cb; cb = cb->_next) {
    a718:	4b07      	ldr	r3, [pc, #28]	; (a738 <notify_le_param_updated+0x64>)
    a71a:	681d      	ldr	r5, [r3, #0]
    a71c:	b905      	cbnz	r5, a720 <notify_le_param_updated+0x4c>
}
    a71e:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
    a720:	68ee      	ldr	r6, [r5, #12]
    a722:	b13e      	cbz	r6, a734 <notify_le_param_updated+0x60>
			cb->le_param_updated(conn, conn->le.interval,
    a724:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    a728:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
    a72c:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
    a730:	4620      	mov	r0, r4
    a732:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    a734:	69ad      	ldr	r5, [r5, #24]
    a736:	e7f1      	b.n	a71c <notify_le_param_updated+0x48>
    a738:	20001ef0 	.word	0x20001ef0

0000a73c <le_param_req>:
{
    a73c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a73e:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
    a740:	4608      	mov	r0, r1
{
    a742:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    a744:	f015 fdf6 	bl	20334 <bt_le_conn_params_valid>
    a748:	4604      	mov	r4, r0
    a74a:	b910      	cbnz	r0, a752 <le_param_req+0x16>
		return false;
    a74c:	2400      	movs	r4, #0
}
    a74e:	4620      	mov	r0, r4
    a750:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    a752:	4b09      	ldr	r3, [pc, #36]	; (a778 <le_param_req+0x3c>)
    a754:	681e      	ldr	r6, [r3, #0]
    a756:	2e00      	cmp	r6, #0
    a758:	d0f9      	beq.n	a74e <le_param_req+0x12>
		if (!cb->le_param_req) {
    a75a:	68b3      	ldr	r3, [r6, #8]
    a75c:	b90b      	cbnz	r3, a762 <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
    a75e:	69b6      	ldr	r6, [r6, #24]
    a760:	e7f9      	b.n	a756 <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
    a762:	4629      	mov	r1, r5
    a764:	4638      	mov	r0, r7
    a766:	4798      	blx	r3
    a768:	2800      	cmp	r0, #0
    a76a:	d0ef      	beq.n	a74c <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
    a76c:	4628      	mov	r0, r5
    a76e:	f015 fde1 	bl	20334 <bt_le_conn_params_valid>
    a772:	2800      	cmp	r0, #0
    a774:	d1f3      	bne.n	a75e <le_param_req+0x22>
    a776:	e7e9      	b.n	a74c <le_param_req+0x10>
    a778:	20001ef0 	.word	0x20001ef0

0000a77c <bt_conn_identity_resolved>:
{
    a77c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->role == BT_HCI_ROLE_MASTER) {
    a77e:	78c3      	ldrb	r3, [r0, #3]
{
    a780:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_MASTER) {
    a782:	b93b      	cbnz	r3, a794 <bt_conn_identity_resolved+0x18>
		rpa = &conn->le.resp_addr;
    a784:	f100 0696 	add.w	r6, r0, #150	; 0x96
	for (cb = callback_list; cb; cb = cb->_next) {
    a788:	4b08      	ldr	r3, [pc, #32]	; (a7ac <bt_conn_identity_resolved+0x30>)
    a78a:	681d      	ldr	r5, [r3, #0]
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    a78c:	f104 0788 	add.w	r7, r4, #136	; 0x88
	for (cb = callback_list; cb; cb = cb->_next) {
    a790:	b91d      	cbnz	r5, a79a <bt_conn_identity_resolved+0x1e>
}
    a792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rpa = &conn->le.init_addr;
    a794:	f100 068f 	add.w	r6, r0, #143	; 0x8f
    a798:	e7f6      	b.n	a788 <bt_conn_identity_resolved+0xc>
		if (cb->identity_resolved) {
    a79a:	692b      	ldr	r3, [r5, #16]
    a79c:	b11b      	cbz	r3, a7a6 <bt_conn_identity_resolved+0x2a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    a79e:	463a      	mov	r2, r7
    a7a0:	4631      	mov	r1, r6
    a7a2:	4620      	mov	r0, r4
    a7a4:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    a7a6:	69ad      	ldr	r5, [r5, #24]
    a7a8:	e7f2      	b.n	a790 <bt_conn_identity_resolved+0x14>
    a7aa:	bf00      	nop
    a7ac:	20001ef0 	.word	0x20001ef0

0000a7b0 <bt_conn_security_changed>:
	for (cb = callback_list; cb; cb = cb->_next) {
    a7b0:	4b07      	ldr	r3, [pc, #28]	; (a7d0 <bt_conn_security_changed+0x20>)
{
    a7b2:	b570      	push	{r4, r5, r6, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
    a7b4:	681c      	ldr	r4, [r3, #0]
{
    a7b6:	4605      	mov	r5, r0
    a7b8:	460e      	mov	r6, r1
	for (cb = callback_list; cb; cb = cb->_next) {
    a7ba:	b904      	cbnz	r4, a7be <bt_conn_security_changed+0xe>
}
    a7bc:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->security_changed) {
    a7be:	6963      	ldr	r3, [r4, #20]
    a7c0:	b11b      	cbz	r3, a7ca <bt_conn_security_changed+0x1a>
			cb->security_changed(conn, conn->sec_level, err);
    a7c2:	7a69      	ldrb	r1, [r5, #9]
    a7c4:	4632      	mov	r2, r6
    a7c6:	4628      	mov	r0, r5
    a7c8:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    a7ca:	69a4      	ldr	r4, [r4, #24]
    a7cc:	e7f5      	b.n	a7ba <bt_conn_security_changed+0xa>
    a7ce:	bf00      	nop
    a7d0:	20001ef0 	.word	0x20001ef0

0000a7d4 <bt_conn_cb_register>:
	cb->_next = callback_list;
    a7d4:	4b02      	ldr	r3, [pc, #8]	; (a7e0 <bt_conn_cb_register+0xc>)
    a7d6:	681a      	ldr	r2, [r3, #0]
    a7d8:	6182      	str	r2, [r0, #24]
	callback_list = cb;
    a7da:	6018      	str	r0, [r3, #0]
}
    a7dc:	4770      	bx	lr
    a7de:	bf00      	nop
    a7e0:	20001ef0 	.word	0x20001ef0

0000a7e4 <bt_conn_recv>:
{
    a7e4:	b570      	push	{r4, r5, r6, lr}
    a7e6:	4616      	mov	r6, r2
    a7e8:	4604      	mov	r4, r0
    a7ea:	460d      	mov	r5, r1
	tx_notify(conn);
    a7ec:	f015 fe51 	bl	20492 <tx_notify>
	switch (flags) {
    a7f0:	2e01      	cmp	r6, #1
    a7f2:	d01b      	beq.n	a82c <bt_conn_recv+0x48>
    a7f4:	2e02      	cmp	r6, #2
    a7f6:	d16c      	bne.n	a8d2 <bt_conn_recv+0xee>
		len = sys_le16_to_cpu(hdr->len);
    a7f8:	68ab      	ldr	r3, [r5, #8]
    a7fa:	881e      	ldrh	r6, [r3, #0]
		if (conn->rx_len) {
    a7fc:	89e3      	ldrh	r3, [r4, #14]
    a7fe:	b163      	cbz	r3, a81a <bt_conn_recv+0x36>
    a800:	4b3d      	ldr	r3, [pc, #244]	; (a8f8 <bt_conn_recv+0x114>)
    a802:	493e      	ldr	r1, [pc, #248]	; (a8fc <bt_conn_recv+0x118>)
			BT_ERR("Unexpected first L2CAP frame");
    a804:	483e      	ldr	r0, [pc, #248]	; (a900 <bt_conn_recv+0x11c>)
    a806:	1ac9      	subs	r1, r1, r3
    a808:	08c9      	lsrs	r1, r1, #3
    a80a:	0189      	lsls	r1, r1, #6
    a80c:	f041 0101 	orr.w	r1, r1, #1
    a810:	f013 fe5f 	bl	1e4d2 <log_0>
			bt_conn_reset_rx_state(conn);
    a814:	4620      	mov	r0, r4
    a816:	f015 fe17 	bl	20448 <bt_conn_reset_rx_state>
		conn->rx_len = (sizeof(*hdr) + len) - buf->len;
    a81a:	89ab      	ldrh	r3, [r5, #12]
    a81c:	1af3      	subs	r3, r6, r3
    a81e:	3304      	adds	r3, #4
    a820:	b29b      	uxth	r3, r3
    a822:	81e3      	strh	r3, [r4, #14]
		if (conn->rx_len) {
    a824:	2b00      	cmp	r3, #0
    a826:	d043      	beq.n	a8b0 <bt_conn_recv+0xcc>
			conn->rx = buf;
    a828:	6125      	str	r5, [r4, #16]
}
    a82a:	bd70      	pop	{r4, r5, r6, pc}
		if (!conn->rx_len) {
    a82c:	89e3      	ldrh	r3, [r4, #14]
    a82e:	b98b      	cbnz	r3, a854 <bt_conn_recv+0x70>
    a830:	4932      	ldr	r1, [pc, #200]	; (a8fc <bt_conn_recv+0x118>)
    a832:	4b31      	ldr	r3, [pc, #196]	; (a8f8 <bt_conn_recv+0x114>)
			BT_ERR("Unexpected L2CAP continuation");
    a834:	4833      	ldr	r0, [pc, #204]	; (a904 <bt_conn_recv+0x120>)
    a836:	1ac9      	subs	r1, r1, r3
    a838:	08c9      	lsrs	r1, r1, #3
    a83a:	0189      	lsls	r1, r1, #6
    a83c:	f041 0101 	orr.w	r1, r1, #1
			BT_ERR("L2CAP data overflow");
    a840:	f013 fe47 	bl	1e4d2 <log_0>
			bt_conn_reset_rx_state(conn);
    a844:	4620      	mov	r0, r4
    a846:	f015 fdff 	bl	20448 <bt_conn_reset_rx_state>
			net_buf_unref(buf);
    a84a:	4628      	mov	r0, r5
}
    a84c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
    a850:	f011 b946 	b.w	1bae0 <net_buf_unref>
		if (buf->len > conn->rx_len) {
    a854:	89ae      	ldrh	r6, [r5, #12]
    a856:	42b3      	cmp	r3, r6
    a858:	d208      	bcs.n	a86c <bt_conn_recv+0x88>
    a85a:	4928      	ldr	r1, [pc, #160]	; (a8fc <bt_conn_recv+0x118>)
    a85c:	4b26      	ldr	r3, [pc, #152]	; (a8f8 <bt_conn_recv+0x114>)
			BT_ERR("L2CAP data overflow");
    a85e:	482a      	ldr	r0, [pc, #168]	; (a908 <bt_conn_recv+0x124>)
    a860:	1ac9      	subs	r1, r1, r3
    a862:	08c9      	lsrs	r1, r1, #3
    a864:	0189      	lsls	r1, r1, #6
    a866:	f041 0101 	orr.w	r1, r1, #1
    a86a:	e7e9      	b.n	a840 <bt_conn_recv+0x5c>
		if (buf->len > net_buf_tailroom(conn->rx)) {
    a86c:	6920      	ldr	r0, [r4, #16]
    a86e:	3008      	adds	r0, #8
    a870:	f017 feeb 	bl	2264a <net_buf_simple_tailroom>
    a874:	4286      	cmp	r6, r0
    a876:	d908      	bls.n	a88a <bt_conn_recv+0xa6>
    a878:	4920      	ldr	r1, [pc, #128]	; (a8fc <bt_conn_recv+0x118>)
    a87a:	4b1f      	ldr	r3, [pc, #124]	; (a8f8 <bt_conn_recv+0x114>)
			BT_ERR("Not enough buffer space for L2CAP data");
    a87c:	4823      	ldr	r0, [pc, #140]	; (a90c <bt_conn_recv+0x128>)
    a87e:	1ac9      	subs	r1, r1, r3
    a880:	08c9      	lsrs	r1, r1, #3
    a882:	0189      	lsls	r1, r1, #6
    a884:	f041 0101 	orr.w	r1, r1, #1
    a888:	e7da      	b.n	a840 <bt_conn_recv+0x5c>
		net_buf_add_mem(conn->rx, buf->data, buf->len);
    a88a:	6920      	ldr	r0, [r4, #16]
    a88c:	89aa      	ldrh	r2, [r5, #12]
    a88e:	68a9      	ldr	r1, [r5, #8]
    a890:	3008      	adds	r0, #8
    a892:	f017 fe87 	bl	225a4 <net_buf_simple_add_mem>
		conn->rx_len -= buf->len;
    a896:	89e3      	ldrh	r3, [r4, #14]
    a898:	89aa      	ldrh	r2, [r5, #12]
    a89a:	1a9b      	subs	r3, r3, r2
    a89c:	81e3      	strh	r3, [r4, #14]
		net_buf_unref(buf);
    a89e:	4628      	mov	r0, r5
    a8a0:	f011 f91e 	bl	1bae0 <net_buf_unref>
		if (conn->rx_len) {
    a8a4:	89e3      	ldrh	r3, [r4, #14]
    a8a6:	2b00      	cmp	r3, #0
    a8a8:	d1bf      	bne.n	a82a <bt_conn_recv+0x46>
		buf = conn->rx;
    a8aa:	6925      	ldr	r5, [r4, #16]
		conn->rx_len = 0U;
    a8ac:	81e3      	strh	r3, [r4, #14]
		conn->rx = NULL;
    a8ae:	6123      	str	r3, [r4, #16]
	len = sys_le16_to_cpu(hdr->len);
    a8b0:	68ab      	ldr	r3, [r5, #8]
	if (sizeof(*hdr) + len != buf->len) {
    a8b2:	89aa      	ldrh	r2, [r5, #12]
    a8b4:	8819      	ldrh	r1, [r3, #0]
    a8b6:	1d0b      	adds	r3, r1, #4
    a8b8:	4293      	cmp	r3, r2
    a8ba:	d016      	beq.n	a8ea <bt_conn_recv+0x106>
    a8bc:	480e      	ldr	r0, [pc, #56]	; (a8f8 <bt_conn_recv+0x114>)
    a8be:	4b0f      	ldr	r3, [pc, #60]	; (a8fc <bt_conn_recv+0x118>)
    a8c0:	1a1b      	subs	r3, r3, r0
    a8c2:	08db      	lsrs	r3, r3, #3
		BT_ERR("ACL len mismatch (%u != %u)", len, buf->len);
    a8c4:	019b      	lsls	r3, r3, #6
    a8c6:	4812      	ldr	r0, [pc, #72]	; (a910 <bt_conn_recv+0x12c>)
    a8c8:	f043 0301 	orr.w	r3, r3, #1
    a8cc:	f013 fe22 	bl	1e514 <log_2>
		net_buf_unref(buf);
    a8d0:	e7bb      	b.n	a84a <bt_conn_recv+0x66>
    a8d2:	4a09      	ldr	r2, [pc, #36]	; (a8f8 <bt_conn_recv+0x114>)
    a8d4:	4b09      	ldr	r3, [pc, #36]	; (a8fc <bt_conn_recv+0x118>)
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
    a8d6:	480f      	ldr	r0, [pc, #60]	; (a914 <bt_conn_recv+0x130>)
    a8d8:	1a9b      	subs	r3, r3, r2
    a8da:	08db      	lsrs	r3, r3, #3
    a8dc:	019b      	lsls	r3, r3, #6
    a8de:	f043 0201 	orr.w	r2, r3, #1
    a8e2:	4631      	mov	r1, r6
    a8e4:	f013 fe02 	bl	1e4ec <log_1>
		bt_conn_reset_rx_state(conn);
    a8e8:	e7ac      	b.n	a844 <bt_conn_recv+0x60>
	bt_l2cap_recv(conn, buf);
    a8ea:	4629      	mov	r1, r5
    a8ec:	4620      	mov	r0, r4
}
    a8ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf);
    a8f2:	f001 ba19 	b.w	bd28 <bt_l2cap_recv>
    a8f6:	bf00      	nop
    a8f8:	000236f0 	.word	0x000236f0
    a8fc:	000236f8 	.word	0x000236f8
    a900:	0002607f 	.word	0x0002607f
    a904:	0002609c 	.word	0x0002609c
    a908:	000260ba 	.word	0x000260ba
    a90c:	000260ce 	.word	0x000260ce
    a910:	00026113 	.word	0x00026113
    a914:	000260f5 	.word	0x000260f5

0000a918 <bt_conn_send_cb>:
{
    a918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a91c:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
    a91e:	7b43      	ldrb	r3, [r0, #13]
    a920:	2b06      	cmp	r3, #6
{
    a922:	4606      	mov	r6, r0
    a924:	460d      	mov	r5, r1
    a926:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
    a928:	d00f      	beq.n	a94a <bt_conn_send_cb+0x32>
    a92a:	4b2a      	ldr	r3, [pc, #168]	; (a9d4 <bt_conn_send_cb+0xbc>)
    a92c:	492a      	ldr	r1, [pc, #168]	; (a9d8 <bt_conn_send_cb+0xc0>)
		BT_ERR("not connected!");
    a92e:	482b      	ldr	r0, [pc, #172]	; (a9dc <bt_conn_send_cb+0xc4>)
    a930:	1ac9      	subs	r1, r1, r3
    a932:	08c9      	lsrs	r1, r1, #3
    a934:	0189      	lsls	r1, r1, #6
    a936:	f041 0101 	orr.w	r1, r1, #1
    a93a:	f013 fdca 	bl	1e4d2 <log_0>
		net_buf_unref(buf);
    a93e:	4628      	mov	r0, r5
    a940:	f011 f8ce 	bl	1bae0 <net_buf_unref>
			return -ENOTCONN;
    a944:	f06f 0038 	mvn.w	r0, #56	; 0x38
    a948:	e020      	b.n	a98c <bt_conn_send_cb+0x74>
	if (cb) {
    a94a:	2a00      	cmp	r2, #0
    a94c:	d040      	beq.n	a9d0 <bt_conn_send_cb+0xb8>
	return z_impl_k_current_get();
    a94e:	f012 ff0d 	bl	1d76c <z_impl_k_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
    a952:	4b23      	ldr	r3, [pc, #140]	; (a9e0 <bt_conn_send_cb+0xc8>)
    a954:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
    a956:	4823      	ldr	r0, [pc, #140]	; (a9e4 <bt_conn_send_cb+0xcc>)
    a958:	bf07      	ittee	eq
    a95a:	2200      	moveq	r2, #0
    a95c:	2300      	moveq	r3, #0
    a95e:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
    a962:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
    a966:	f012 fb83 	bl	1d070 <z_impl_k_queue_get>
    a96a:	4604      	mov	r4, r0
		if (!tx) {
    a96c:	b980      	cbnz	r0, a990 <bt_conn_send_cb+0x78>
    a96e:	4b19      	ldr	r3, [pc, #100]	; (a9d4 <bt_conn_send_cb+0xbc>)
    a970:	4919      	ldr	r1, [pc, #100]	; (a9d8 <bt_conn_send_cb+0xc0>)
			BT_ERR("Unable to allocate TX context");
    a972:	481d      	ldr	r0, [pc, #116]	; (a9e8 <bt_conn_send_cb+0xd0>)
    a974:	1ac9      	subs	r1, r1, r3
    a976:	08c9      	lsrs	r1, r1, #3
    a978:	0189      	lsls	r1, r1, #6
    a97a:	f041 0101 	orr.w	r1, r1, #1
    a97e:	f013 fda8 	bl	1e4d2 <log_0>
			net_buf_unref(buf);
    a982:	4628      	mov	r0, r5
    a984:	f011 f8ac 	bl	1bae0 <net_buf_unref>
			return -ENOBUFS;
    a988:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    a98c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
    a990:	7b73      	ldrb	r3, [r6, #13]
    a992:	2b06      	cmp	r3, #6
    a994:	d010      	beq.n	a9b8 <bt_conn_send_cb+0xa0>
    a996:	4b0f      	ldr	r3, [pc, #60]	; (a9d4 <bt_conn_send_cb+0xbc>)
    a998:	490f      	ldr	r1, [pc, #60]	; (a9d8 <bt_conn_send_cb+0xc0>)
			BT_WARN("Disconnected while allocating context");
    a99a:	4814      	ldr	r0, [pc, #80]	; (a9ec <bt_conn_send_cb+0xd4>)
    a99c:	1ac9      	subs	r1, r1, r3
    a99e:	08c9      	lsrs	r1, r1, #3
    a9a0:	0189      	lsls	r1, r1, #6
    a9a2:	f041 0102 	orr.w	r1, r1, #2
    a9a6:	f013 fd94 	bl	1e4d2 <log_0>
			net_buf_unref(buf);
    a9aa:	4628      	mov	r0, r5
    a9ac:	f011 f898 	bl	1bae0 <net_buf_unref>
			tx_free(tx);
    a9b0:	4620      	mov	r0, r4
    a9b2:	f7ff fd7b 	bl	a4ac <tx_free>
    a9b6:	e7c5      	b.n	a944 <bt_conn_send_cb+0x2c>
		tx->pending_no_cb = 0U;
    a9b8:	2300      	movs	r3, #0
		tx->user_data = user_data;
    a9ba:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
    a9be:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
    a9c0:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
    a9c2:	f106 0034 	add.w	r0, r6, #52	; 0x34
    a9c6:	4629      	mov	r1, r5
    a9c8:	f017 fda7 	bl	2251a <net_buf_put>
	return 0;
    a9cc:	2000      	movs	r0, #0
    a9ce:	e7dd      	b.n	a98c <bt_conn_send_cb+0x74>
		tx_data(buf)->tx = NULL;
    a9d0:	614a      	str	r2, [r1, #20]
    a9d2:	e7f6      	b.n	a9c2 <bt_conn_send_cb+0xaa>
    a9d4:	000236f0 	.word	0x000236f0
    a9d8:	000236f8 	.word	0x000236f8
    a9dc:	0002612f 	.word	0x0002612f
    a9e0:	20001c48 	.word	0x20001c48
    a9e4:	20000888 	.word	0x20000888
    a9e8:	0002613e 	.word	0x0002613e
    a9ec:	0002615c 	.word	0x0002615c

0000a9f0 <bt_conn_prepare_events>:
{
    a9f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	conn_change.signaled = 0U;
    a9f4:	4b21      	ldr	r3, [pc, #132]	; (aa7c <bt_conn_prepare_events+0x8c>)
    a9f6:	4e22      	ldr	r6, [pc, #136]	; (aa80 <bt_conn_prepare_events+0x90>)
    a9f8:	2400      	movs	r4, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    a9fa:	4622      	mov	r2, r4
    a9fc:	2101      	movs	r1, #1
{
    a9fe:	4607      	mov	r7, r0
	conn_change.signaled = 0U;
    aa00:	609c      	str	r4, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    aa02:	f018 fd34 	bl	2346e <k_poll_event_init>
    aa06:	2501      	movs	r5, #1
		k_poll_event_init(&events[ev_count],
    aa08:	f04f 0914 	mov.w	r9, #20
			conn_cleanup(conn);
    aa0c:	f1a6 0a54 	sub.w	sl, r6, #84	; 0x54
		if (!atomic_get(&conn->ref)) {
    aa10:	4630      	mov	r0, r6
    aa12:	f015 fd13 	bl	2043c <atomic_get>
    aa16:	b1b8      	cbz	r0, aa48 <bt_conn_prepare_events+0x58>
		if (conn->state == BT_CONN_DISCONNECTED &&
    aa18:	f816 3c47 	ldrb.w	r3, [r6, #-71]
    aa1c:	b9e3      	cbnz	r3, aa58 <bt_conn_prepare_events+0x68>
    aa1e:	f3bf 8f5b 	dmb	ish
    aa22:	f1a6 0350 	sub.w	r3, r6, #80	; 0x50
    aa26:	e853 2f00 	ldrex	r2, [r3]
    aa2a:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    aa2e:	e843 1000 	strex	r0, r1, [r3]
    aa32:	2800      	cmp	r0, #0
    aa34:	d1f7      	bne.n	aa26 <bt_conn_prepare_events+0x36>
    aa36:	f3bf 8f5b 	dmb	ish
    aa3a:	0653      	lsls	r3, r2, #25
    aa3c:	d50c      	bpl.n	aa58 <bt_conn_prepare_events+0x68>
			conn_cleanup(conn);
    aa3e:	20b8      	movs	r0, #184	; 0xb8
    aa40:	fb00 a004 	mla	r0, r0, r4, sl
    aa44:	f7ff fe20 	bl	a688 <conn_cleanup>
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    aa48:	3401      	adds	r4, #1
    aa4a:	2c04      	cmp	r4, #4
    aa4c:	f106 06b8 	add.w	r6, r6, #184	; 0xb8
    aa50:	d1de      	bne.n	aa10 <bt_conn_prepare_events+0x20>
}
    aa52:	4628      	mov	r0, r5
    aa54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (conn->state != BT_CONN_CONNECTED) {
    aa58:	f816 3c47 	ldrb.w	r3, [r6, #-71]
    aa5c:	2b06      	cmp	r3, #6
    aa5e:	d1f3      	bne.n	aa48 <bt_conn_prepare_events+0x58>
		k_poll_event_init(&events[ev_count],
    aa60:	fb09 7805 	mla	r8, r9, r5, r7
    aa64:	f1a6 0320 	sub.w	r3, r6, #32
    aa68:	2200      	movs	r2, #0
    aa6a:	2104      	movs	r1, #4
    aa6c:	4640      	mov	r0, r8
    aa6e:	f018 fcfe 	bl	2346e <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_QUEUE;
    aa72:	2301      	movs	r3, #1
    aa74:	3501      	adds	r5, #1
    aa76:	f888 300c 	strb.w	r3, [r8, #12]
    aa7a:	e7e5      	b.n	aa48 <bt_conn_prepare_events+0x58>
    aa7c:	200001cc 	.word	0x200001cc
    aa80:	20000c04 	.word	0x20000c04

0000aa84 <bt_conn_add_le>:
{
    aa84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    aa88:	4682      	mov	sl, r0
		if (!atomic_get(&conns[i].ref)) {
    aa8a:	4832      	ldr	r0, [pc, #200]	; (ab54 <bt_conn_add_le+0xd0>)
    aa8c:	4d32      	ldr	r5, [pc, #200]	; (ab58 <bt_conn_add_le+0xd4>)
{
    aa8e:	4689      	mov	r9, r1
		if (!atomic_get(&conns[i].ref)) {
    aa90:	f015 fcd4 	bl	2043c <atomic_get>
    aa94:	4604      	mov	r4, r0
    aa96:	2800      	cmp	r0, #0
    aa98:	d04b      	beq.n	ab32 <bt_conn_add_le+0xae>
    aa9a:	f505 7086 	add.w	r0, r5, #268	; 0x10c
    aa9e:	f015 fccd 	bl	2043c <atomic_get>
    aaa2:	2800      	cmp	r0, #0
    aaa4:	d049      	beq.n	ab3a <bt_conn_add_le+0xb6>
    aaa6:	f505 70e2 	add.w	r0, r5, #452	; 0x1c4
    aaaa:	f015 fcc7 	bl	2043c <atomic_get>
    aaae:	2800      	cmp	r0, #0
    aab0:	d048      	beq.n	ab44 <bt_conn_add_le+0xc0>
    aab2:	f505 701f 	add.w	r0, r5, #636	; 0x27c
    aab6:	f015 fcc1 	bl	2043c <atomic_get>
    aaba:	2800      	cmp	r0, #0
    aabc:	d148      	bne.n	ab50 <bt_conn_add_le+0xcc>
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    aabe:	2403      	movs	r4, #3
    aac0:	f44f 760a 	mov.w	r6, #552	; 0x228
		if (!atomic_get(&conns[i].ref)) {
    aac4:	f505 7b1f 	add.w	fp, r5, #636	; 0x27c
			conn = &conns[i];
    aac8:	19af      	adds	r7, r5, r6
	(void)memset(conn, 0, sizeof(*conn));
    aaca:	22b8      	movs	r2, #184	; 0xb8
    aacc:	2100      	movs	r1, #0
    aace:	4638      	mov	r0, r7
    aad0:	f015 f9fc 	bl	1fecc <memset>
	k_delayed_work_init(&conn->update_work, conn_update_timeout);
    aad4:	f106 0058 	add.w	r0, r6, #88	; 0x58
    aad8:	4920      	ldr	r1, [pc, #128]	; (ab5c <bt_conn_add_le+0xd8>)
    aada:	4428      	add	r0, r5
    aadc:	f018 fb0c 	bl	230f8 <k_delayed_work_init>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    aae0:	4a1f      	ldr	r2, [pc, #124]	; (ab60 <bt_conn_add_le+0xdc>)
    aae2:	2300      	movs	r3, #0
    aae4:	e9c7 230b 	strd	r2, r3, [r7, #44]	; 0x2c
    aae8:	62bb      	str	r3, [r7, #40]	; 0x28
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    aaea:	f04f 0801 	mov.w	r8, #1
    aaee:	f3bf 8f5b 	dmb	ish
    aaf2:	e85b 3f00 	ldrex	r3, [fp]
    aaf6:	e84b 8200 	strex	r2, r8, [fp]
    aafa:	2a00      	cmp	r2, #0
    aafc:	d1f9      	bne.n	aaf2 <bt_conn_add_le+0x6e>
    aafe:	f3bf 8f5b 	dmb	ish
	conn->id = id;
    ab02:	20b8      	movs	r0, #184	; 0xb8
    ab04:	fb00 5404 	mla	r4, r0, r4, r5
	bt_addr_le_copy(&conn->le.dst, peer);
    ab08:	f106 0088 	add.w	r0, r6, #136	; 0x88
	conn->id = id;
    ab0c:	f884 a008 	strb.w	sl, [r4, #8]
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    ab10:	2207      	movs	r2, #7
    ab12:	4649      	mov	r1, r9
    ab14:	4428      	add	r0, r5
    ab16:	f015 f9ae 	bl	1fe76 <memcpy>
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    ab1a:	4b12      	ldr	r3, [pc, #72]	; (ab64 <bt_conn_add_le+0xe0>)
	conn->sec_level = BT_SECURITY_L1;
    ab1c:	f884 8009 	strb.w	r8, [r4, #9]
	conn->required_sec_level = BT_SECURITY_L1;
    ab20:	f884 800a 	strb.w	r8, [r4, #10]
	conn->type = BT_CONN_TYPE_LE;
    ab24:	f884 8002 	strb.w	r8, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    ab28:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
}
    ab2c:	4638      	mov	r0, r7
    ab2e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!atomic_get(&conns[i].ref)) {
    ab32:	4606      	mov	r6, r0
    ab34:	f105 0b54 	add.w	fp, r5, #84	; 0x54
    ab38:	e7c6      	b.n	aac8 <bt_conn_add_le+0x44>
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    ab3a:	2401      	movs	r4, #1
		if (!atomic_get(&conns[i].ref)) {
    ab3c:	26b8      	movs	r6, #184	; 0xb8
    ab3e:	f505 7b86 	add.w	fp, r5, #268	; 0x10c
    ab42:	e7c1      	b.n	aac8 <bt_conn_add_le+0x44>
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    ab44:	2402      	movs	r4, #2
		if (!atomic_get(&conns[i].ref)) {
    ab46:	f44f 76b8 	mov.w	r6, #368	; 0x170
    ab4a:	f505 7be2 	add.w	fp, r5, #452	; 0x1c4
    ab4e:	e7bb      	b.n	aac8 <bt_conn_add_le+0x44>
		return NULL;
    ab50:	2700      	movs	r7, #0
    ab52:	e7eb      	b.n	ab2c <bt_conn_add_le+0xa8>
    ab54:	20000c04 	.word	0x20000c04
    ab58:	20000bb0 	.word	0x20000bb0
    ab5c:	0000a61d 	.word	0x0000a61d
    ab60:	000204d9 	.word	0x000204d9
    ab64:	00280018 	.word	0x00280018

0000ab68 <bt_conn_set_state>:
{
    ab68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (conn->state == state) {
    ab6c:	7b45      	ldrb	r5, [r0, #13]
    ab6e:	428d      	cmp	r5, r1
{
    ab70:	4604      	mov	r4, r0
    ab72:	460e      	mov	r6, r1
	if (conn->state == state) {
    ab74:	d112      	bne.n	ab9c <bt_conn_set_state+0x34>
    ab76:	4b72      	ldr	r3, [pc, #456]	; (ad40 <bt_conn_set_state+0x1d8>)
    ab78:	4a72      	ldr	r2, [pc, #456]	; (ad44 <bt_conn_set_state+0x1dc>)
		BT_WARN("no transition %s", state2str(state));
    ab7a:	4873      	ldr	r0, [pc, #460]	; (ad48 <bt_conn_set_state+0x1e0>)
    ab7c:	2d07      	cmp	r5, #7
    ab7e:	eba2 0203 	sub.w	r2, r2, r3
    ab82:	bf96      	itet	ls
    ab84:	4b71      	ldrls	r3, [pc, #452]	; (ad4c <bt_conn_set_state+0x1e4>)
    ab86:	4972      	ldrhi	r1, [pc, #456]	; (ad50 <bt_conn_set_state+0x1e8>)
    ab88:	f853 1025 	ldrls.w	r1, [r3, r5, lsl #2]
    ab8c:	08d2      	lsrs	r2, r2, #3
    ab8e:	0192      	lsls	r2, r2, #6
    ab90:	f042 0202 	orr.w	r2, r2, #2
}
    ab94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_WARN("no valid (%u) state was set", state);
    ab98:	f013 bca8 	b.w	1e4ec <log_1>
	conn->state = state;
    ab9c:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
    ab9e:	b15d      	cbz	r5, abb8 <bt_conn_set_state+0x50>
    aba0:	2d05      	cmp	r5, #5
    aba2:	d00d      	beq.n	abc0 <bt_conn_set_state+0x58>
	switch (conn->state) {
    aba4:	7b63      	ldrb	r3, [r4, #13]
    aba6:	2b07      	cmp	r3, #7
    aba8:	f200 80bd 	bhi.w	ad26 <bt_conn_set_state+0x1be>
    abac:	e8df f003 	tbb	[pc, r3]
    abb0:	c5c5c526 	.word	0xc5c5c526
    abb4:	c50f9dc5 	.word	0xc50f9dc5
	atomic_val_t old = atomic_inc(&conn->ref);
    abb8:	3054      	adds	r0, #84	; 0x54
    abba:	f015 fc5d 	bl	20478 <atomic_inc>
	return conn;
    abbe:	e7f1      	b.n	aba4 <bt_conn_set_state+0x3c>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    abc0:	7883      	ldrb	r3, [r0, #2]
    abc2:	2b01      	cmp	r3, #1
    abc4:	d1ee      	bne.n	aba4 <bt_conn_set_state+0x3c>
			k_delayed_work_cancel(&conn->update_work);
    abc6:	3058      	adds	r0, #88	; 0x58
    abc8:	f018 fa9e 	bl	23108 <k_delayed_work_cancel>
    abcc:	e7ea      	b.n	aba4 <bt_conn_set_state+0x3c>
		if (conn->type == BT_CONN_TYPE_SCO) {
    abce:	78a3      	ldrb	r3, [r4, #2]
    abd0:	2b04      	cmp	r3, #4
    abd2:	f000 80b2 	beq.w	ad3a <bt_conn_set_state+0x1d2>
	z_impl_k_queue_init(queue);
    abd6:	f104 0034 	add.w	r0, r4, #52	; 0x34
    abda:	f018 f88b 	bl	22cf4 <z_impl_k_queue_init>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&signal, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(signal, result);
    abde:	2100      	movs	r1, #0
    abe0:	485c      	ldr	r0, [pc, #368]	; (ad54 <bt_conn_set_state+0x1ec>)
    abe2:	f013 f977 	bl	1ded4 <z_impl_k_poll_signal_raise>
	list->head = NULL;
    abe6:	2300      	movs	r3, #0
		bt_l2cap_connected(conn);
    abe8:	4620      	mov	r0, r4
	list->tail = NULL;
    abea:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
    abee:	f000 fec3 	bl	b978 <bt_l2cap_connected>
		notify_connected(conn);
    abf2:	4620      	mov	r0, r4
}
    abf4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify_connected(conn);
    abf8:	f7ff bc62 	b.w	a4c0 <notify_connected>
		if (conn->type == BT_CONN_TYPE_SCO) {
    abfc:	78a3      	ldrb	r3, [r4, #2]
    abfe:	2b04      	cmp	r3, #4
    ac00:	d105      	bne.n	ac0e <bt_conn_set_state+0xa6>
	atomic_val_t old = atomic_dec(&conn->ref);
    ac02:	f104 0054 	add.w	r0, r4, #84	; 0x54
}
    ac06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	atomic_val_t old = atomic_dec(&conn->ref);
    ac0a:	f015 bc28 	b.w	2045e <atomic_dec>
		switch (old_state) {
    ac0e:	3d01      	subs	r5, #1
    ac10:	2d06      	cmp	r5, #6
    ac12:	f200 8092 	bhi.w	ad3a <bt_conn_set_state+0x1d2>
    ac16:	a301      	add	r3, pc, #4	; (adr r3, ac1c <bt_conn_set_state+0xb4>)
    ac18:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
    ac1c:	0000acdd 	.word	0x0000acdd
    ac20:	0000ac03 	.word	0x0000ac03
    ac24:	0000ac03 	.word	0x0000ac03
    ac28:	0000acdd 	.word	0x0000acdd
    ac2c:	0000acdd 	.word	0x0000acdd
    ac30:	0000ac39 	.word	0x0000ac39
    ac34:	0000ac39 	.word	0x0000ac39
	z_impl_k_sem_give(sem);
    ac38:	4d47      	ldr	r5, [pc, #284]	; (ad58 <bt_conn_set_state+0x1f0>)
		tx->pending_no_cb = 0U;
    ac3a:	2600      	movs	r6, #0
	__asm__ volatile(
    ac3c:	f04f 0320 	mov.w	r3, #32
    ac40:	f3ef 8211 	mrs	r2, BASEPRI
    ac44:	f383 8811 	msr	BASEPRI, r3
    ac48:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
    ac4c:	69e3      	ldr	r3, [r4, #28]
    ac4e:	b14b      	cbz	r3, ac64 <bt_conn_set_state+0xfc>
			conn->pending_no_cb--;
    ac50:	3b01      	subs	r3, #1
    ac52:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    ac54:	f382 8811 	msr	BASEPRI, r2
    ac58:	f3bf 8f6f 	isb	sy
    ac5c:	4628      	mov	r0, r5
    ac5e:	f012 fd8b 	bl	1d778 <z_impl_k_sem_give>
}
    ac62:	e7eb      	b.n	ac3c <bt_conn_set_state+0xd4>
Z_GENLIST_IS_EMPTY(slist)
    ac64:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
    ac66:	b128      	cbz	r0, ac74 <bt_conn_set_state+0x10c>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    ac68:	69a1      	ldr	r1, [r4, #24]
    ac6a:	6803      	ldr	r3, [r0, #0]
	list->head = node;
    ac6c:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    ac6e:	4288      	cmp	r0, r1
	list->tail = node;
    ac70:	bf08      	it	eq
    ac72:	61a3      	streq	r3, [r4, #24]
    ac74:	f382 8811 	msr	BASEPRI, r2
    ac78:	f3bf 8f6f 	isb	sy
		if (!node) {
    ac7c:	b188      	cbz	r0, aca2 <bt_conn_set_state+0x13a>
	__asm__ volatile(
    ac7e:	f04f 0220 	mov.w	r2, #32
    ac82:	f3ef 8311 	mrs	r3, BASEPRI
    ac86:	f382 8811 	msr	BASEPRI, r2
    ac8a:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
    ac8e:	68c2      	ldr	r2, [r0, #12]
    ac90:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
    ac92:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
    ac94:	f383 8811 	msr	BASEPRI, r3
    ac98:	f3bf 8f6f 	isb	sy
		tx_free(tx);
    ac9c:	f7ff fc06 	bl	a4ac <tx_free>
    aca0:	e7dc      	b.n	ac5c <bt_conn_set_state+0xf4>
			tx_notify(conn);
    aca2:	4620      	mov	r0, r4
    aca4:	f015 fbf5 	bl	20492 <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
    aca8:	78a3      	ldrb	r3, [r4, #2]
    acaa:	2b01      	cmp	r3, #1
    acac:	d103      	bne.n	acb6 <bt_conn_set_state+0x14e>
				k_delayed_work_cancel(&conn->update_work);
    acae:	f104 0058 	add.w	r0, r4, #88	; 0x58
    acb2:	f018 fa29 	bl	23108 <k_delayed_work_cancel>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    acb6:	f3bf 8f5b 	dmb	ish
    acba:	3404      	adds	r4, #4
    acbc:	e854 3f00 	ldrex	r3, [r4]
    acc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    acc4:	e844 3200 	strex	r2, r3, [r4]
    acc8:	2a00      	cmp	r2, #0
    acca:	d1f7      	bne.n	acbc <bt_conn_set_state+0x154>
    accc:	f3bf 8f5b 	dmb	ish
	return z_impl_k_poll_signal_raise(signal, result);
    acd0:	4820      	ldr	r0, [pc, #128]	; (ad54 <bt_conn_set_state+0x1ec>)
}
    acd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    acd6:	2100      	movs	r1, #0
    acd8:	f013 b8fc 	b.w	1ded4 <z_impl_k_poll_signal_raise>
			if (conn->err) {
    acdc:	7b23      	ldrb	r3, [r4, #12]
    acde:	2b00      	cmp	r3, #0
    ace0:	d08f      	beq.n	ac02 <bt_conn_set_state+0x9a>
				notify_connected(conn);
    ace2:	4620      	mov	r0, r4
    ace4:	f7ff fbec 	bl	a4c0 <notify_connected>
    ace8:	e78b      	b.n	ac02 <bt_conn_set_state+0x9a>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    acea:	78a3      	ldrb	r3, [r4, #2]
    acec:	2b01      	cmp	r3, #1
    acee:	d124      	bne.n	ad3a <bt_conn_set_state+0x1d2>
				K_MSEC(10 * bt_dev.create_param.timeout));
    acf0:	4b1a      	ldr	r3, [pc, #104]	; (ad5c <bt_conn_set_state+0x1f4>)
    acf2:	8a9b      	ldrh	r3, [r3, #20]
    acf4:	210a      	movs	r1, #10
    acf6:	4359      	muls	r1, r3
    acf8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    acfc:	f240 36e7 	movw	r6, #999	; 0x3e7
    ad00:	2700      	movs	r7, #0
    ad02:	fbc0 6701 	smlal	r6, r7, r0, r1
    ad06:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ad0a:	2300      	movs	r3, #0
    ad0c:	4630      	mov	r0, r6
    ad0e:	4639      	mov	r1, r7
    ad10:	f7f5 fe94 	bl	a3c <__aeabi_uldivmod>
    ad14:	4602      	mov	r2, r0
    ad16:	460b      	mov	r3, r1
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    ad18:	4811      	ldr	r0, [pc, #68]	; (ad60 <bt_conn_set_state+0x1f8>)
    ad1a:	f104 0158 	add.w	r1, r4, #88	; 0x58
}
    ad1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ad22:	f012 be67 	b.w	1d9f4 <k_delayed_work_submit_to_queue>
    ad26:	4a07      	ldr	r2, [pc, #28]	; (ad44 <bt_conn_set_state+0x1dc>)
    ad28:	4b05      	ldr	r3, [pc, #20]	; (ad40 <bt_conn_set_state+0x1d8>)
		BT_WARN("no valid (%u) state was set", state);
    ad2a:	480e      	ldr	r0, [pc, #56]	; (ad64 <bt_conn_set_state+0x1fc>)
    ad2c:	1ad2      	subs	r2, r2, r3
    ad2e:	08d2      	lsrs	r2, r2, #3
    ad30:	0192      	lsls	r2, r2, #6
    ad32:	f042 0202 	orr.w	r2, r2, #2
    ad36:	4631      	mov	r1, r6
    ad38:	e72c      	b.n	ab94 <bt_conn_set_state+0x2c>
}
    ad3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ad3e:	bf00      	nop
    ad40:	000236f0 	.word	0x000236f0
    ad44:	000236f8 	.word	0x000236f8
    ad48:	0002618c 	.word	0x0002618c
    ad4c:	00023cac 	.word	0x00023cac
    ad50:	00026182 	.word	0x00026182
    ad54:	200001cc 	.word	0x200001cc
    ad58:	200000b4 	.word	0x200000b4
    ad5c:	20000000 	.word	0x20000000
    ad60:	20001c30 	.word	0x20001c30
    ad64:	0002619d 	.word	0x0002619d

0000ad68 <bt_conn_lookup_handle>:
{
    ad68:	b510      	push	{r4, lr}
    ad6a:	4b0f      	ldr	r3, [pc, #60]	; (ada8 <bt_conn_lookup_handle+0x40>)
    ad6c:	4601      	mov	r1, r0
    ad6e:	2200      	movs	r2, #0
		if (!atomic_get(&conns[i].ref)) {
    ad70:	4618      	mov	r0, r3
    ad72:	f015 fb63 	bl	2043c <atomic_get>
    ad76:	b178      	cbz	r0, ad98 <bt_conn_lookup_handle+0x30>
		if (conns[i].state != BT_CONN_CONNECTED &&
    ad78:	f813 0c47 	ldrb.w	r0, [r3, #-71]
    ad7c:	3806      	subs	r0, #6
    ad7e:	2801      	cmp	r0, #1
    ad80:	d80a      	bhi.n	ad98 <bt_conn_lookup_handle+0x30>
		if (conns[i].handle == handle) {
    ad82:	f833 0c54 	ldrh.w	r0, [r3, #-84]
    ad86:	4288      	cmp	r0, r1
    ad88:	d106      	bne.n	ad98 <bt_conn_lookup_handle+0x30>
			return bt_conn_ref(&conns[i]);
    ad8a:	4c08      	ldr	r4, [pc, #32]	; (adac <bt_conn_lookup_handle+0x44>)
	atomic_val_t old = atomic_inc(&conn->ref);
    ad8c:	4618      	mov	r0, r3
			return bt_conn_ref(&conns[i]);
    ad8e:	4414      	add	r4, r2
	atomic_val_t old = atomic_inc(&conn->ref);
    ad90:	f015 fb72 	bl	20478 <atomic_inc>
}
    ad94:	4620      	mov	r0, r4
    ad96:	bd10      	pop	{r4, pc}
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    ad98:	32b8      	adds	r2, #184	; 0xb8
    ad9a:	f5b2 7f38 	cmp.w	r2, #736	; 0x2e0
    ad9e:	f103 03b8 	add.w	r3, r3, #184	; 0xb8
    ada2:	d1e5      	bne.n	ad70 <bt_conn_lookup_handle+0x8>
	return NULL;
    ada4:	2400      	movs	r4, #0
    ada6:	e7f5      	b.n	ad94 <bt_conn_lookup_handle+0x2c>
    ada8:	20000c04 	.word	0x20000c04
    adac:	20000bb0 	.word	0x20000bb0

0000adb0 <bt_conn_lookup_addr_le>:
{
    adb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    adb4:	4c10      	ldr	r4, [pc, #64]	; (adf8 <bt_conn_lookup_addr_le+0x48>)
    adb6:	4607      	mov	r7, r0
    adb8:	4688      	mov	r8, r1
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    adba:	2600      	movs	r6, #0
		if (!atomic_get(&conns[i].ref)) {
    adbc:	4620      	mov	r0, r4
    adbe:	f015 fb3d 	bl	2043c <atomic_get>
    adc2:	b188      	cbz	r0, ade8 <bt_conn_lookup_addr_le+0x38>
		if (conns[i].type != BT_CONN_TYPE_LE) {
    adc4:	f814 3c52 	ldrb.w	r3, [r4, #-82]
    adc8:	2b01      	cmp	r3, #1
    adca:	d10d      	bne.n	ade8 <bt_conn_lookup_addr_le+0x38>
		if (bt_conn_is_peer_addr_le(&conns[i], id, peer)) {
    adcc:	f1a4 0554 	sub.w	r5, r4, #84	; 0x54
    add0:	4642      	mov	r2, r8
    add2:	4639      	mov	r1, r7
    add4:	4628      	mov	r0, r5
    add6:	f015 fbf2 	bl	205be <bt_conn_is_peer_addr_le>
    adda:	b128      	cbz	r0, ade8 <bt_conn_lookup_addr_le+0x38>
	atomic_val_t old = atomic_inc(&conn->ref);
    addc:	4620      	mov	r0, r4
    adde:	f015 fb4b 	bl	20478 <atomic_inc>
}
    ade2:	4628      	mov	r0, r5
    ade4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    ade8:	3601      	adds	r6, #1
    adea:	2e04      	cmp	r6, #4
    adec:	f104 04b8 	add.w	r4, r4, #184	; 0xb8
    adf0:	d1e4      	bne.n	adbc <bt_conn_lookup_addr_le+0xc>
	return NULL;
    adf2:	2500      	movs	r5, #0
    adf4:	e7f5      	b.n	ade2 <bt_conn_lookup_addr_le+0x32>
    adf6:	bf00      	nop
    adf8:	20000c04 	.word	0x20000c04

0000adfc <bt_conn_exists_le>:
{
    adfc:	b510      	push	{r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
    adfe:	f7ff ffd7 	bl	adb0 <bt_conn_lookup_addr_le>
	if (conn) {
    ae02:	4604      	mov	r4, r0
    ae04:	b1a8      	cbz	r0, ae32 <bt_conn_exists_le+0x36>
    ae06:	4b0b      	ldr	r3, [pc, #44]	; (ae34 <bt_conn_exists_le+0x38>)
    ae08:	4a0b      	ldr	r2, [pc, #44]	; (ae38 <bt_conn_exists_le+0x3c>)
    ae0a:	1ad2      	subs	r2, r2, r3
		BT_WARN("Found valid connection in %s state",
    ae0c:	7b43      	ldrb	r3, [r0, #13]
    ae0e:	480b      	ldr	r0, [pc, #44]	; (ae3c <bt_conn_exists_le+0x40>)
    ae10:	2b07      	cmp	r3, #7
    ae12:	bf96      	itet	ls
    ae14:	490a      	ldrls	r1, [pc, #40]	; (ae40 <bt_conn_exists_le+0x44>)
    ae16:	490b      	ldrhi	r1, [pc, #44]	; (ae44 <bt_conn_exists_le+0x48>)
    ae18:	f851 1023 	ldrls.w	r1, [r1, r3, lsl #2]
    ae1c:	08d2      	lsrs	r2, r2, #3
    ae1e:	0192      	lsls	r2, r2, #6
    ae20:	f042 0202 	orr.w	r2, r2, #2
    ae24:	f013 fb62 	bl	1e4ec <log_1>
	atomic_val_t old = atomic_dec(&conn->ref);
    ae28:	f104 0054 	add.w	r0, r4, #84	; 0x54
    ae2c:	f015 fb17 	bl	2045e <atomic_dec>
		return true;
    ae30:	2001      	movs	r0, #1
}
    ae32:	bd10      	pop	{r4, pc}
    ae34:	000236f0 	.word	0x000236f0
    ae38:	000236f8 	.word	0x000236f8
    ae3c:	000261b9 	.word	0x000261b9
    ae40:	00023cac 	.word	0x00023cac
    ae44:	00026182 	.word	0x00026182

0000ae48 <bt_conn_lookup_state_le>:
{
    ae48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ae4c:	4c16      	ldr	r4, [pc, #88]	; (aea8 <bt_conn_lookup_state_le+0x60>)
    ae4e:	4607      	mov	r7, r0
    ae50:	4688      	mov	r8, r1
    ae52:	4691      	mov	r9, r2
    ae54:	2600      	movs	r6, #0
    ae56:	4625      	mov	r5, r4
		if (!atomic_get(&conns[i].ref)) {
    ae58:	f104 0a54 	add.w	sl, r4, #84	; 0x54
    ae5c:	4650      	mov	r0, sl
    ae5e:	f015 faed 	bl	2043c <atomic_get>
    ae62:	b1c8      	cbz	r0, ae98 <bt_conn_lookup_state_le+0x50>
		if (conns[i].type != BT_CONN_TYPE_LE) {
    ae64:	78a3      	ldrb	r3, [r4, #2]
    ae66:	2b01      	cmp	r3, #1
    ae68:	d116      	bne.n	ae98 <bt_conn_lookup_state_le+0x50>
		if (peer && !bt_conn_is_peer_addr_le(&conns[i], id, peer)) {
    ae6a:	f1b8 0f00 	cmp.w	r8, #0
    ae6e:	d10c      	bne.n	ae8a <bt_conn_lookup_state_le+0x42>
		if (conns[i].state == state && conns[i].id == id) {
    ae70:	7b63      	ldrb	r3, [r4, #13]
    ae72:	454b      	cmp	r3, r9
    ae74:	d110      	bne.n	ae98 <bt_conn_lookup_state_le+0x50>
    ae76:	7a23      	ldrb	r3, [r4, #8]
    ae78:	42bb      	cmp	r3, r7
    ae7a:	d10d      	bne.n	ae98 <bt_conn_lookup_state_le+0x50>
	atomic_val_t old = atomic_inc(&conn->ref);
    ae7c:	4650      	mov	r0, sl
			return bt_conn_ref(&conns[i]);
    ae7e:	4435      	add	r5, r6
	atomic_val_t old = atomic_inc(&conn->ref);
    ae80:	f015 fafa 	bl	20478 <atomic_inc>
}
    ae84:	4628      	mov	r0, r5
    ae86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (peer && !bt_conn_is_peer_addr_le(&conns[i], id, peer)) {
    ae8a:	4642      	mov	r2, r8
    ae8c:	4639      	mov	r1, r7
    ae8e:	4620      	mov	r0, r4
    ae90:	f015 fb95 	bl	205be <bt_conn_is_peer_addr_le>
    ae94:	2800      	cmp	r0, #0
    ae96:	d1eb      	bne.n	ae70 <bt_conn_lookup_state_le+0x28>
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    ae98:	36b8      	adds	r6, #184	; 0xb8
    ae9a:	f5b6 7f38 	cmp.w	r6, #736	; 0x2e0
    ae9e:	f104 04b8 	add.w	r4, r4, #184	; 0xb8
    aea2:	d1d9      	bne.n	ae58 <bt_conn_lookup_state_le+0x10>
	return NULL;
    aea4:	2500      	movs	r5, #0
    aea6:	e7ed      	b.n	ae84 <bt_conn_lookup_state_le+0x3c>
    aea8:	20000bb0 	.word	0x20000bb0

0000aeac <bt_conn_get_info>:
{
	return &conn->le.dst;
}

int bt_conn_get_info(const struct bt_conn *conn, struct bt_conn_info *info)
{
    aeac:	b510      	push	{r4, lr}
	info->type = conn->type;
    aeae:	7882      	ldrb	r2, [r0, #2]
    aeb0:	700a      	strb	r2, [r1, #0]
	info->role = conn->role;
    aeb2:	78c4      	ldrb	r4, [r0, #3]
    aeb4:	704c      	strb	r4, [r1, #1]
	info->id = conn->id;
    aeb6:	7a03      	ldrb	r3, [r0, #8]
    aeb8:	708b      	strb	r3, [r1, #2]

	switch (conn->type) {
    aeba:	2a01      	cmp	r2, #1
    aebc:	d11c      	bne.n	aef8 <bt_conn_get_info+0x4c>
	case BT_CONN_TYPE_LE:
		info->le.dst = &conn->le.dst;
    aebe:	f100 0288 	add.w	r2, r0, #136	; 0x88
    aec2:	608a      	str	r2, [r1, #8]
		info->le.src = &bt_dev.id_addr[conn->id];
    aec4:	4a0e      	ldr	r2, [pc, #56]	; (af00 <bt_conn_get_info+0x54>)
    aec6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    aeca:	4413      	add	r3, r2
    aecc:	604b      	str	r3, [r1, #4]
		if (conn->role == BT_HCI_ROLE_MASTER) {
    aece:	f100 0296 	add.w	r2, r0, #150	; 0x96
    aed2:	f100 038f 	add.w	r3, r0, #143	; 0x8f
    aed6:	b964      	cbnz	r4, aef2 <bt_conn_get_info+0x46>
			info->le.local = &conn->le.init_addr;
			info->le.remote = &conn->le.resp_addr;
    aed8:	e9c1 3203 	strd	r3, r2, [r1, #12]
		} else {
			info->le.local = &conn->le.resp_addr;
			info->le.remote = &conn->le.init_addr;
		}
		info->le.interval = conn->le.interval;
    aedc:	f8b0 309e 	ldrh.w	r3, [r0, #158]	; 0x9e
    aee0:	828b      	strh	r3, [r1, #20]
		info->le.latency = conn->le.latency;
    aee2:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
    aee6:	82cb      	strh	r3, [r1, #22]
		info->le.timeout = conn->le.timeout;
    aee8:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
    aeec:	830b      	strh	r3, [r1, #24]
		info->le.phy = &conn->le.phy;
#endif
#if defined(CONFIG_BT_USER_DATA_LEN_UPDATE)
		info->le.data_len = &conn->le.data_len;
#endif
		return 0;
    aeee:	2000      	movs	r0, #0
		return 0;
#endif
	}

	return -EINVAL;
}
    aef0:	bd10      	pop	{r4, pc}
			info->le.remote = &conn->le.init_addr;
    aef2:	e9c1 2303 	strd	r2, r3, [r1, #12]
    aef6:	e7f1      	b.n	aedc <bt_conn_get_info+0x30>
	return -EINVAL;
    aef8:	f06f 0015 	mvn.w	r0, #21
    aefc:	e7f8      	b.n	aef0 <bt_conn_get_info+0x44>
    aefe:	bf00      	nop
    af00:	20000000 	.word	0x20000000

0000af04 <bt_conn_le_create>:

int bt_conn_le_create(const bt_addr_le_t *peer,
		      const struct bt_conn_le_create_param *create_param,
		      const struct bt_le_conn_param *conn_param,
		      struct bt_conn **ret_conn)
{
    af04:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    af08:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    af0a:	4852      	ldr	r0, [pc, #328]	; (b054 <bt_conn_le_create+0x150>)
    af0c:	460f      	mov	r7, r1
    af0e:	4615      	mov	r5, r2
    af10:	461e      	mov	r6, r3
    af12:	f015 fa93 	bl	2043c <atomic_get>
	struct bt_conn *conn;
	bt_addr_le_t dst;
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    af16:	0781      	lsls	r1, r0, #30
    af18:	f140 8092 	bpl.w	b040 <bt_conn_le_create+0x13c>
		return -EAGAIN;
	}

	if (!bt_le_conn_params_valid(conn_param)) {
    af1c:	4610      	mov	r0, r2
    af1e:	f015 fa09 	bl	20334 <bt_le_conn_params_valid>
    af22:	b928      	cbnz	r0, af30 <bt_conn_le_create+0x2c>
		return -EINVAL;
    af24:	f06f 0515 	mvn.w	r5, #21
		return err;
	}

	*ret_conn = conn;
	return 0;
}
    af28:	4628      	mov	r0, r5
    af2a:	b002      	add	sp, #8
    af2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    af30:	4848      	ldr	r0, [pc, #288]	; (b054 <bt_conn_le_create+0x150>)
    af32:	f015 fa83 	bl	2043c <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    af36:	0642      	lsls	r2, r0, #25
    af38:	d4f4      	bmi.n	af24 <bt_conn_le_create+0x20>
    af3a:	4846      	ldr	r0, [pc, #280]	; (b054 <bt_conn_le_create+0x150>)
    af3c:	f015 fa7e 	bl	2043c <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_INITIATING)) {
    af40:	0503      	lsls	r3, r0, #20
    af42:	f3c0 28c0 	ubfx	r8, r0, #11, #1
    af46:	d47e      	bmi.n	b046 <bt_conn_le_create+0x142>
	if (!bt_le_scan_random_addr_check()) {
    af48:	f015 f993 	bl	20272 <bt_le_scan_random_addr_check>
    af4c:	2800      	cmp	r0, #0
    af4e:	d0e9      	beq.n	af24 <bt_conn_le_create+0x20>
	if (bt_conn_exists_le(BT_ID_DEFAULT, peer)) {
    af50:	4621      	mov	r1, r4
    af52:	4640      	mov	r0, r8
    af54:	f7ff ff52 	bl	adfc <bt_conn_exists_le>
    af58:	2800      	cmp	r0, #0
    af5a:	d1e3      	bne.n	af24 <bt_conn_le_create+0x20>
	if (peer->type == BT_ADDR_LE_PUBLIC_ID ||
    af5c:	7823      	ldrb	r3, [r4, #0]
    af5e:	3b02      	subs	r3, #2
    af60:	2b01      	cmp	r3, #1
    af62:	d84b      	bhi.n	affc <bt_conn_le_create+0xf8>
    af64:	2207      	movs	r2, #7
    af66:	4621      	mov	r1, r4
    af68:	4668      	mov	r0, sp
    af6a:	f014 ff84 	bl	1fe76 <memcpy>
		dst.type -= BT_ADDR_LE_PUBLIC_ID;
    af6e:	f89d 3000 	ldrb.w	r3, [sp]
    af72:	3b02      	subs	r3, #2
    af74:	f88d 3000 	strb.w	r3, [sp]
	conn = bt_conn_add_le(BT_ID_DEFAULT, &dst);
    af78:	4669      	mov	r1, sp
    af7a:	2000      	movs	r0, #0
    af7c:	f7ff fd82 	bl	aa84 <bt_conn_add_le>
	if (!conn) {
    af80:	4604      	mov	r4, r0
    af82:	2800      	cmp	r0, #0
    af84:	d062      	beq.n	b04c <bt_conn_le_create+0x148>
	conn->le.interval_min = param->interval_min;
    af86:	882b      	ldrh	r3, [r5, #0]
    af88:	f8a0 30a0 	strh.w	r3, [r0, #160]	; 0xa0
	conn->le.interval_max = param->interval_max;
    af8c:	886b      	ldrh	r3, [r5, #2]
    af8e:	f8a0 30a2 	strh.w	r3, [r0, #162]	; 0xa2
	conn->le.latency = param->latency;
    af92:	88ab      	ldrh	r3, [r5, #4]
    af94:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
	conn->le.timeout = param->timeout;
    af98:	88eb      	ldrh	r3, [r5, #6]
    af9a:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
	bt_dev.create_param = *param;
    af9e:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
    afa2:	4d2d      	ldr	r5, [pc, #180]	; (b058 <bt_conn_le_create+0x154>)
    afa4:	f105 0c08 	add.w	ip, r5, #8
    afa8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		(bt_dev.create_param.timeout != 0) ?
    afac:	8aab      	ldrh	r3, [r5, #20]
	bt_dev.create_param.timeout =
    afae:	2b00      	cmp	r3, #0
    afb0:	bf08      	it	eq
    afb2:	f44f 7396 	moveq.w	r3, #300	; 0x12c
    afb6:	82ab      	strh	r3, [r5, #20]
		(bt_dev.create_param.interval_coded != 0) ?
    afb8:	8a2b      	ldrh	r3, [r5, #16]
    afba:	462a      	mov	r2, r5
	bt_dev.create_param.interval_coded =
    afbc:	b903      	cbnz	r3, afc0 <bt_conn_le_create+0xbc>
    afbe:	89ab      	ldrh	r3, [r5, #12]
    afc0:	8213      	strh	r3, [r2, #16]
		(bt_dev.create_param.window_coded != 0) ?
    afc2:	8a53      	ldrh	r3, [r2, #18]
	bt_dev.create_param.window_coded =
    afc4:	b903      	cbnz	r3, afc8 <bt_conn_le_create+0xc4>
    afc6:	89d3      	ldrh	r3, [r2, #14]
    afc8:	8253      	strh	r3, [r2, #18]
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    afca:	f892 30cc 	ldrb.w	r3, [r2, #204]	; 0xcc
    afce:	b11b      	cbz	r3, afd8 <bt_conn_le_create+0xd4>
    afd0:	f892 20cd 	ldrb.w	r2, [r2, #205]	; 0xcd
    afd4:	429a      	cmp	r2, r3
    afd6:	d91a      	bls.n	b00e <bt_conn_le_create+0x10a>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    afd8:	2101      	movs	r1, #1
    afda:	4620      	mov	r0, r4
    afdc:	f7ff fdc4 	bl	ab68 <bt_conn_set_state>
		err = bt_le_scan_update(true);
    afe0:	2001      	movs	r0, #1
    afe2:	f7fe fb0d 	bl	9600 <bt_le_scan_update>
		if (err) {
    afe6:	4605      	mov	r5, r0
    afe8:	b340      	cbz	r0, b03c <bt_conn_le_create+0x138>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    afea:	4620      	mov	r0, r4
    afec:	2100      	movs	r1, #0
    afee:	f7ff fdbb 	bl	ab68 <bt_conn_set_state>
	atomic_val_t old = atomic_dec(&conn->ref);
    aff2:	f104 0054 	add.w	r0, r4, #84	; 0x54
    aff6:	f015 fa32 	bl	2045e <atomic_dec>
			return err;
    affa:	e795      	b.n	af28 <bt_conn_le_create+0x24>
		bt_addr_le_copy(&dst, bt_lookup_id_addr(BT_ID_DEFAULT, peer));
    affc:	4621      	mov	r1, r4
    affe:	f015 f930 	bl	20262 <bt_lookup_id_addr>
    b002:	2207      	movs	r2, #7
    b004:	4601      	mov	r1, r0
    b006:	4668      	mov	r0, sp
    b008:	f014 ff35 	bl	1fe76 <memcpy>
}
    b00c:	e7b4      	b.n	af78 <bt_conn_le_create+0x74>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
    b00e:	2105      	movs	r1, #5
    b010:	4620      	mov	r0, r4
    b012:	f7ff fda9 	bl	ab68 <bt_conn_set_state>
	err = bt_le_create_conn(conn);
    b016:	4620      	mov	r0, r4
    b018:	f015 f92d 	bl	20276 <bt_le_create_conn>
	if (err) {
    b01c:	4605      	mov	r5, r0
    b01e:	b168      	cbz	r0, b03c <bt_conn_le_create+0x138>
		conn->err = 0;
    b020:	2600      	movs	r6, #0
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    b022:	4631      	mov	r1, r6
    b024:	4620      	mov	r0, r4
		conn->err = 0;
    b026:	7326      	strb	r6, [r4, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    b028:	f7ff fd9e 	bl	ab68 <bt_conn_set_state>
	atomic_val_t old = atomic_dec(&conn->ref);
    b02c:	f104 0054 	add.w	r0, r4, #84	; 0x54
    b030:	f015 fa15 	bl	2045e <atomic_dec>
		bt_le_scan_update(false);
    b034:	4630      	mov	r0, r6
    b036:	f7fe fae3 	bl	9600 <bt_le_scan_update>
		return err;
    b03a:	e775      	b.n	af28 <bt_conn_le_create+0x24>
	*ret_conn = conn;
    b03c:	6034      	str	r4, [r6, #0]
	return 0;
    b03e:	e773      	b.n	af28 <bt_conn_le_create+0x24>
		return -EAGAIN;
    b040:	f06f 050a 	mvn.w	r5, #10
    b044:	e770      	b.n	af28 <bt_conn_le_create+0x24>
		return -EALREADY;
    b046:	f06f 0544 	mvn.w	r5, #68	; 0x44
    b04a:	e76d      	b.n	af28 <bt_conn_le_create+0x24>
		return -ENOMEM;
    b04c:	f06f 050b 	mvn.w	r5, #11
    b050:	e76a      	b.n	af28 <bt_conn_le_create+0x24>
    b052:	bf00      	nop
    b054:	20000098 	.word	0x20000098
    b058:	20000000 	.word	0x20000000

0000b05c <bt_le_set_auto_conn>:

#if !defined(CONFIG_BT_WHITELIST)
int bt_le_set_auto_conn(const bt_addr_le_t *addr,
			const struct bt_le_conn_param *param)
{
    b05c:	b570      	push	{r4, r5, r6, lr}
    b05e:	4606      	mov	r6, r0
    b060:	4839      	ldr	r0, [pc, #228]	; (b148 <bt_le_set_auto_conn+0xec>)
    b062:	460d      	mov	r5, r1
    b064:	f015 f9ea 	bl	2043c <atomic_get>
	struct bt_conn *conn;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    b068:	0780      	lsls	r0, r0, #30
    b06a:	d566      	bpl.n	b13a <bt_le_set_auto_conn+0xde>
		return -EAGAIN;
	}

	if (param && !bt_le_conn_params_valid(param)) {
    b06c:	b929      	cbnz	r1, b07a <bt_le_set_auto_conn+0x1e>
		return -EINVAL;
	}

	if (!bt_le_scan_random_addr_check()) {
    b06e:	f015 f900 	bl	20272 <bt_le_scan_random_addr_check>
    b072:	b940      	cbnz	r0, b086 <bt_le_set_auto_conn+0x2a>
		return -EINVAL;
    b074:	f06f 0015 	mvn.w	r0, #21
	}

	bt_conn_unref(conn);

	return 0;
}
    b078:	bd70      	pop	{r4, r5, r6, pc}
	if (param && !bt_le_conn_params_valid(param)) {
    b07a:	4608      	mov	r0, r1
    b07c:	f015 f95a 	bl	20334 <bt_le_conn_params_valid>
    b080:	2800      	cmp	r0, #0
    b082:	d1f4      	bne.n	b06e <bt_le_set_auto_conn+0x12>
    b084:	e7f6      	b.n	b074 <bt_le_set_auto_conn+0x18>
	conn = bt_conn_lookup_addr_le(BT_ID_DEFAULT, addr);
    b086:	4631      	mov	r1, r6
    b088:	2000      	movs	r0, #0
    b08a:	f7ff fe91 	bl	adb0 <bt_conn_lookup_addr_le>
	if (!conn) {
    b08e:	4604      	mov	r4, r0
    b090:	b928      	cbnz	r0, b09e <bt_le_set_auto_conn+0x42>
		conn = bt_conn_add_le(BT_ID_DEFAULT, addr);
    b092:	4631      	mov	r1, r6
    b094:	f7ff fcf6 	bl	aa84 <bt_conn_add_le>
		if (!conn) {
    b098:	4604      	mov	r4, r0
    b09a:	2800      	cmp	r0, #0
    b09c:	d050      	beq.n	b140 <bt_le_set_auto_conn+0xe4>
	if (param) {
    b09e:	1d23      	adds	r3, r4, #4
    b0a0:	f104 0654 	add.w	r6, r4, #84	; 0x54
    b0a4:	b385      	cbz	r5, b108 <bt_le_set_auto_conn+0xac>
	conn->le.interval_min = param->interval_min;
    b0a6:	882a      	ldrh	r2, [r5, #0]
    b0a8:	f8a4 20a0 	strh.w	r2, [r4, #160]	; 0xa0
	conn->le.interval_max = param->interval_max;
    b0ac:	886a      	ldrh	r2, [r5, #2]
    b0ae:	f8a4 20a2 	strh.w	r2, [r4, #162]	; 0xa2
	conn->le.latency = param->latency;
    b0b2:	88aa      	ldrh	r2, [r5, #4]
    b0b4:	f8a4 20a4 	strh.w	r2, [r4, #164]	; 0xa4
	conn->le.timeout = param->timeout;
    b0b8:	88ea      	ldrh	r2, [r5, #6]
    b0ba:	f8a4 20a6 	strh.w	r2, [r4, #166]	; 0xa6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b0be:	f3bf 8f5b 	dmb	ish
    b0c2:	e853 2f00 	ldrex	r2, [r3]
    b0c6:	f042 0101 	orr.w	r1, r2, #1
    b0ca:	e843 1000 	strex	r0, r1, [r3]
    b0ce:	2800      	cmp	r0, #0
    b0d0:	d1f7      	bne.n	b0c2 <bt_le_set_auto_conn+0x66>
    b0d2:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_and_set_bit(conn->flags,
    b0d6:	07d1      	lsls	r1, r2, #31
    b0d8:	d402      	bmi.n	b0e0 <bt_le_set_auto_conn+0x84>
	atomic_val_t old = atomic_inc(&conn->ref);
    b0da:	4630      	mov	r0, r6
    b0dc:	f015 f9cc 	bl	20478 <atomic_inc>
	if (conn->state == BT_CONN_DISCONNECTED &&
    b0e0:	7b63      	ldrb	r3, [r4, #13]
    b0e2:	b963      	cbnz	r3, b0fe <bt_le_set_auto_conn+0xa2>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    b0e4:	4818      	ldr	r0, [pc, #96]	; (b148 <bt_le_set_auto_conn+0xec>)
    b0e6:	f015 f9a9 	bl	2043c <atomic_get>
    b0ea:	0783      	lsls	r3, r0, #30
    b0ec:	d507      	bpl.n	b0fe <bt_le_set_auto_conn+0xa2>
		if (param) {
    b0ee:	b11d      	cbz	r5, b0f8 <bt_le_set_auto_conn+0x9c>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    b0f0:	2101      	movs	r1, #1
    b0f2:	4620      	mov	r0, r4
    b0f4:	f7ff fd38 	bl	ab68 <bt_conn_set_state>
		bt_le_scan_update(false);
    b0f8:	2000      	movs	r0, #0
    b0fa:	f7fe fa81 	bl	9600 <bt_le_scan_update>
	atomic_val_t old = atomic_dec(&conn->ref);
    b0fe:	4630      	mov	r0, r6
    b100:	f015 f9ad 	bl	2045e <atomic_dec>
	return 0;
    b104:	2000      	movs	r0, #0
    b106:	e7b7      	b.n	b078 <bt_le_set_auto_conn+0x1c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    b108:	f3bf 8f5b 	dmb	ish
    b10c:	e853 2f00 	ldrex	r2, [r3]
    b110:	f022 0101 	bic.w	r1, r2, #1
    b114:	e843 1000 	strex	r0, r1, [r3]
    b118:	2800      	cmp	r0, #0
    b11a:	d1f7      	bne.n	b10c <bt_le_set_auto_conn+0xb0>
    b11c:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_clear_bit(conn->flags,
    b120:	07d2      	lsls	r2, r2, #31
    b122:	d5dd      	bpl.n	b0e0 <bt_le_set_auto_conn+0x84>
	atomic_val_t old = atomic_dec(&conn->ref);
    b124:	4630      	mov	r0, r6
    b126:	f015 f99a 	bl	2045e <atomic_dec>
			if (conn->state == BT_CONN_CONNECT_SCAN) {
    b12a:	7b63      	ldrb	r3, [r4, #13]
    b12c:	2b01      	cmp	r3, #1
    b12e:	d1d7      	bne.n	b0e0 <bt_le_set_auto_conn+0x84>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    b130:	4629      	mov	r1, r5
    b132:	4620      	mov	r0, r4
    b134:	f7ff fd18 	bl	ab68 <bt_conn_set_state>
    b138:	e7d2      	b.n	b0e0 <bt_le_set_auto_conn+0x84>
		return -EAGAIN;
    b13a:	f06f 000a 	mvn.w	r0, #10
    b13e:	e79b      	b.n	b078 <bt_le_set_auto_conn+0x1c>
			return -ENOMEM;
    b140:	f06f 000b 	mvn.w	r0, #11
    b144:	e798      	b.n	b078 <bt_le_set_auto_conn+0x1c>
    b146:	bf00      	nop
    b148:	20000098 	.word	0x20000098

0000b14c <bt_conn_disconnect>:
{
    b14c:	b538      	push	{r3, r4, r5, lr}
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    b14e:	7883      	ldrb	r3, [r0, #2]
    b150:	2b01      	cmp	r3, #1
{
    b152:	4604      	mov	r4, r0
    b154:	460d      	mov	r5, r1
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    b156:	d103      	bne.n	b160 <bt_conn_disconnect+0x14>
		bt_le_set_auto_conn(&conn->le.dst, NULL);
    b158:	2100      	movs	r1, #0
    b15a:	3088      	adds	r0, #136	; 0x88
    b15c:	f7ff ff7e 	bl	b05c <bt_le_set_auto_conn>
	switch (conn->state) {
    b160:	7b63      	ldrb	r3, [r4, #13]
    b162:	3b01      	subs	r3, #1
    b164:	2b06      	cmp	r3, #6
    b166:	d805      	bhi.n	b174 <bt_conn_disconnect+0x28>
    b168:	e8df f003 	tbb	[pc, r3]
    b16c:	12040408 	.word	0x12040408
    b170:	2a22      	.short	0x2a22
    b172:	10          	.byte	0x10
    b173:	00          	.byte	0x00
    b174:	f06f 0538 	mvn.w	r5, #56	; 0x38
}
    b178:	4628      	mov	r0, r5
    b17a:	bd38      	pop	{r3, r4, r5, pc}
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    b17c:	4620      	mov	r0, r4
		conn->err = reason;
    b17e:	7325      	strb	r5, [r4, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    b180:	2100      	movs	r1, #0
    b182:	f7ff fcf1 	bl	ab68 <bt_conn_set_state>
			bt_le_scan_update(false);
    b186:	2000      	movs	r0, #0
    b188:	f7fe fa3a 	bl	9600 <bt_le_scan_update>
		return 0;
    b18c:	2500      	movs	r5, #0
    b18e:	e7f3      	b.n	b178 <bt_conn_disconnect+0x2c>
    b190:	4911      	ldr	r1, [pc, #68]	; (b1d8 <bt_conn_disconnect+0x8c>)
    b192:	4b12      	ldr	r3, [pc, #72]	; (b1dc <bt_conn_disconnect+0x90>)
		BT_WARN("Deprecated: Use bt_le_adv_stop instead");
    b194:	4812      	ldr	r0, [pc, #72]	; (b1e0 <bt_conn_disconnect+0x94>)
    b196:	1a5b      	subs	r3, r3, r1
    b198:	08db      	lsrs	r3, r3, #3
    b19a:	019b      	lsls	r3, r3, #6
    b19c:	f043 0102 	orr.w	r1, r3, #2
    b1a0:	f013 f997 	bl	1e4d2 <log_0>
		conn->err = reason;
    b1a4:	7325      	strb	r5, [r4, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    b1a6:	2100      	movs	r1, #0
    b1a8:	4620      	mov	r0, r4
    b1aa:	f7ff fcdd 	bl	ab68 <bt_conn_set_state>
		return 0;
    b1ae:	e7ed      	b.n	b18c <bt_conn_disconnect+0x40>
			k_delayed_work_cancel(&conn->update_work);
    b1b0:	f104 0058 	add.w	r0, r4, #88	; 0x58
    b1b4:	f017 ffa8 	bl	23108 <k_delayed_work_cancel>
}
    b1b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			return bt_le_create_conn_cancel();
    b1bc:	f7fd bf9e 	b.w	90fc <bt_le_create_conn_cancel>
	err = bt_hci_disconnect(conn->handle, reason);
    b1c0:	4629      	mov	r1, r5
    b1c2:	8820      	ldrh	r0, [r4, #0]
    b1c4:	f015 f859 	bl	2027a <bt_hci_disconnect>
	if (err) {
    b1c8:	4605      	mov	r5, r0
    b1ca:	2800      	cmp	r0, #0
    b1cc:	d1d4      	bne.n	b178 <bt_conn_disconnect+0x2c>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT);
    b1ce:	2107      	movs	r1, #7
    b1d0:	4620      	mov	r0, r4
    b1d2:	f7ff fcc9 	bl	ab68 <bt_conn_set_state>
	return 0;
    b1d6:	e7cf      	b.n	b178 <bt_conn_disconnect+0x2c>
    b1d8:	000236f0 	.word	0x000236f0
    b1dc:	000236f8 	.word	0x000236f8
    b1e0:	000261dc 	.word	0x000261dc

0000b1e4 <bt_conn_create_pdu_timeout>:
						 const char *func, int line)
#else
struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
					   size_t reserve, k_timeout_t timeout)
#endif
{
    b1e4:	b538      	push	{r3, r4, r5, lr}
    b1e6:	460d      	mov	r5, r1
	} else {
#if defined(CONFIG_NET_BUF_LOG)
		buf = net_buf_alloc_fixed_debug(pool, timeout, func,
							line);
#else
		buf = net_buf_alloc(pool, timeout);
    b1e8:	490c      	ldr	r1, [pc, #48]	; (b21c <bt_conn_create_pdu_timeout+0x38>)
    b1ea:	2800      	cmp	r0, #0
    b1ec:	bf08      	it	eq
    b1ee:	4608      	moveq	r0, r1
    b1f0:	f017 f96a 	bl	224c8 <net_buf_alloc_fixed>
#endif
	}

	if (!buf) {
    b1f4:	4604      	mov	r4, r0
    b1f6:	b958      	cbnz	r0, b210 <bt_conn_create_pdu_timeout+0x2c>
    b1f8:	4909      	ldr	r1, [pc, #36]	; (b220 <bt_conn_create_pdu_timeout+0x3c>)
    b1fa:	4b0a      	ldr	r3, [pc, #40]	; (b224 <bt_conn_create_pdu_timeout+0x40>)
		BT_WARN("Unable to allocate buffer within timeout");
    b1fc:	480a      	ldr	r0, [pc, #40]	; (b228 <bt_conn_create_pdu_timeout+0x44>)
    b1fe:	1ac9      	subs	r1, r1, r3
    b200:	08c9      	lsrs	r1, r1, #3
    b202:	0189      	lsls	r1, r1, #6
    b204:	f041 0102 	orr.w	r1, r1, #2
    b208:	f013 f963 	bl	1e4d2 <log_0>

	reserve += sizeof(struct bt_hci_acl_hdr) + BT_BUF_RESERVE;
	net_buf_reserve(buf, reserve);

	return buf;
}
    b20c:	4620      	mov	r0, r4
    b20e:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_reserve(buf, reserve);
    b210:	1d29      	adds	r1, r5, #4
    b212:	3008      	adds	r0, #8
    b214:	f017 f97d 	bl	22512 <net_buf_simple_reserve>
	return buf;
    b218:	e7f8      	b.n	b20c <bt_conn_create_pdu_timeout+0x28>
    b21a:	bf00      	nop
    b21c:	200008b8 	.word	0x200008b8
    b220:	000236f8 	.word	0x000236f8
    b224:	000236f0 	.word	0x000236f0
    b228:	00026203 	.word	0x00026203

0000b22c <bt_conn_create_frag_timeout>:
{
    b22c:	4601      	mov	r1, r0
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
    b22e:	4801      	ldr	r0, [pc, #4]	; (b234 <bt_conn_create_frag_timeout+0x8>)
    b230:	f7ff bfd8 	b.w	b1e4 <bt_conn_create_pdu_timeout>
    b234:	20000930 	.word	0x20000930

0000b238 <create_frag.isra.0>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    b238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b23c:	4606      	mov	r6, r0
	frag = bt_conn_create_frag(0);
    b23e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    b242:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    b246:	2000      	movs	r0, #0
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    b248:	460c      	mov	r4, r1
	frag = bt_conn_create_frag(0);
    b24a:	f7ff ffef 	bl	b22c <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
    b24e:	7833      	ldrb	r3, [r6, #0]
    b250:	2b06      	cmp	r3, #6
	frag = bt_conn_create_frag(0);
    b252:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
    b254:	f04f 0600 	mov.w	r6, #0
    b258:	d005      	beq.n	b266 <create_frag.isra.0+0x2e>
		net_buf_unref(frag);
    b25a:	f010 fc41 	bl	1bae0 <net_buf_unref>
		return NULL;
    b25e:	4635      	mov	r5, r6
}
    b260:	4628      	mov	r0, r5
    b262:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
    b266:	6146      	str	r6, [r0, #20]
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    b268:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.mtu;
    b26c:	4e0c      	ldr	r6, [pc, #48]	; (b2a0 <create_frag.isra.0+0x68>)
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    b26e:	4638      	mov	r0, r7
    b270:	f8b6 80b0 	ldrh.w	r8, [r6, #176]	; 0xb0
    b274:	f017 f9e9 	bl	2264a <net_buf_simple_tailroom>
    b278:	4580      	cmp	r8, r0
    b27a:	d20c      	bcs.n	b296 <create_frag.isra.0+0x5e>
	return bt_dev.le.mtu;
    b27c:	f8b6 60b0 	ldrh.w	r6, [r6, #176]	; 0xb0
	net_buf_add_mem(frag, buf->data, frag_len);
    b280:	f854 1f08 	ldr.w	r1, [r4, #8]!
    b284:	4632      	mov	r2, r6
    b286:	4638      	mov	r0, r7
    b288:	f017 f98c 	bl	225a4 <net_buf_simple_add_mem>
	net_buf_pull(buf, frag_len);
    b28c:	4631      	mov	r1, r6
    b28e:	4620      	mov	r0, r4
    b290:	f017 f9b7 	bl	22602 <net_buf_simple_pull>
	return frag;
    b294:	e7e4      	b.n	b260 <create_frag.isra.0+0x28>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    b296:	4638      	mov	r0, r7
    b298:	f017 f9d7 	bl	2264a <net_buf_simple_tailroom>
    b29c:	b286      	uxth	r6, r0
    b29e:	e7ef      	b.n	b280 <create_frag.isra.0+0x48>
    b2a0:	20000000 	.word	0x20000000

0000b2a4 <bt_conn_process_tx>:
{
    b2a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
    b2a6:	7b43      	ldrb	r3, [r0, #13]
{
    b2a8:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
    b2aa:	b993      	cbnz	r3, b2d2 <bt_conn_process_tx+0x2e>
    b2ac:	f3bf 8f5b 	dmb	ish
    b2b0:	1d03      	adds	r3, r0, #4
    b2b2:	e853 2f00 	ldrex	r2, [r3]
    b2b6:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    b2ba:	e843 1400 	strex	r4, r1, [r3]
    b2be:	2c00      	cmp	r4, #0
    b2c0:	d1f7      	bne.n	b2b2 <bt_conn_process_tx+0xe>
    b2c2:	f3bf 8f5b 	dmb	ish
    b2c6:	0653      	lsls	r3, r2, #25
    b2c8:	d503      	bpl.n	b2d2 <bt_conn_process_tx+0x2e>
}
    b2ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		conn_cleanup(conn);
    b2ce:	f7ff b9db 	b.w	a688 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    b2d2:	2200      	movs	r2, #0
    b2d4:	2300      	movs	r3, #0
    b2d6:	f105 0034 	add.w	r0, r5, #52	; 0x34
    b2da:	f017 f8fa 	bl	224d2 <net_buf_get>
	BT_ASSERT(buf);
    b2de:	4604      	mov	r4, r0
    b2e0:	b960      	cbnz	r0, b2fc <bt_conn_process_tx+0x58>
    b2e2:	4a20      	ldr	r2, [pc, #128]	; (b364 <bt_conn_process_tx+0xc0>)
    b2e4:	4920      	ldr	r1, [pc, #128]	; (b368 <bt_conn_process_tx+0xc4>)
    b2e6:	4821      	ldr	r0, [pc, #132]	; (b36c <bt_conn_process_tx+0xc8>)
    b2e8:	f240 6326 	movw	r3, #1574	; 0x626
    b2ec:	f012 fe31 	bl	1df52 <printk>
    b2f0:	4040      	eors	r0, r0
    b2f2:	f380 8811 	msr	BASEPRI, r0
    b2f6:	f04f 0003 	mov.w	r0, #3
    b2fa:	df02      	svc	2
	return bt_dev.le.mtu;
    b2fc:	4f1c      	ldr	r7, [pc, #112]	; (b370 <bt_conn_process_tx+0xcc>)
	if (buf->len <= conn_mtu(conn)) {
    b2fe:	89a1      	ldrh	r1, [r4, #12]
    b300:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
    b304:	4291      	cmp	r1, r2
    b306:	d807      	bhi.n	b318 <bt_conn_process_tx+0x74>
		return send_frag(conn, buf, BT_ACL_START_NO_FLUSH, false);
    b308:	2300      	movs	r3, #0
    b30a:	461a      	mov	r2, r3
	return send_frag(conn, buf, BT_ACL_CONT, false);
    b30c:	4621      	mov	r1, r4
    b30e:	4628      	mov	r0, r5
    b310:	f7ff f8ec 	bl	a4ec <send_frag>
	if (!send_buf(conn, buf)) {
    b314:	b140      	cbz	r0, b328 <bt_conn_process_tx+0x84>
}
    b316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	frag = create_frag(conn, buf);
    b318:	f105 060d 	add.w	r6, r5, #13
    b31c:	4621      	mov	r1, r4
    b31e:	4630      	mov	r0, r6
    b320:	f7ff ff8a 	bl	b238 <create_frag.isra.0>
	if (!frag) {
    b324:	4601      	mov	r1, r0
    b326:	b920      	cbnz	r0, b332 <bt_conn_process_tx+0x8e>
		net_buf_unref(buf);
    b328:	4620      	mov	r0, r4
}
    b32a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		net_buf_unref(buf);
    b32e:	f010 bbd7 	b.w	1bae0 <net_buf_unref>
	if (!send_frag(conn, frag, BT_ACL_START_NO_FLUSH, true)) {
    b332:	2301      	movs	r3, #1
    b334:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    b336:	4628      	mov	r0, r5
    b338:	f7ff f8d8 	bl	a4ec <send_frag>
    b33c:	2800      	cmp	r0, #0
    b33e:	d0f3      	beq.n	b328 <bt_conn_process_tx+0x84>
	while (buf->len > conn_mtu(conn)) {
    b340:	89a2      	ldrh	r2, [r4, #12]
    b342:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
    b346:	429a      	cmp	r2, r3
    b348:	d802      	bhi.n	b350 <bt_conn_process_tx+0xac>
	return send_frag(conn, buf, BT_ACL_CONT, false);
    b34a:	2300      	movs	r3, #0
    b34c:	2201      	movs	r2, #1
    b34e:	e7dd      	b.n	b30c <bt_conn_process_tx+0x68>
		frag = create_frag(conn, buf);
    b350:	4621      	mov	r1, r4
    b352:	4630      	mov	r0, r6
    b354:	f7ff ff70 	bl	b238 <create_frag.isra.0>
		if (!frag) {
    b358:	4601      	mov	r1, r0
    b35a:	2800      	cmp	r0, #0
    b35c:	d0e4      	beq.n	b328 <bt_conn_process_tx+0x84>
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    b35e:	2301      	movs	r3, #1
    b360:	461a      	mov	r2, r3
    b362:	e7e8      	b.n	b336 <bt_conn_process_tx+0x92>
    b364:	0002622c 	.word	0x0002622c
    b368:	00026d28 	.word	0x00026d28
    b36c:	00025967 	.word	0x00025967
    b370:	20000000 	.word	0x20000000

0000b374 <bt_conn_index>:
}
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

uint8_t bt_conn_index(struct bt_conn *conn)
{
	uint8_t index = conn - conns;
    b374:	4b03      	ldr	r3, [pc, #12]	; (b384 <bt_conn_index+0x10>)
    b376:	1ac0      	subs	r0, r0, r3
    b378:	4b03      	ldr	r3, [pc, #12]	; (b388 <bt_conn_index+0x14>)
    b37a:	10c0      	asrs	r0, r0, #3
    b37c:	4358      	muls	r0, r3

	__ASSERT(index < CONFIG_BT_MAX_CONN, "Invalid bt_conn pointer");
	return index;
}
    b37e:	b2c0      	uxtb	r0, r0
    b380:	4770      	bx	lr
    b382:	bf00      	nop
    b384:	20000bb0 	.word	0x20000bb0
    b388:	e9bd37a7 	.word	0xe9bd37a7

0000b38c <bt_conn_lookup_index>:

struct bt_conn *bt_conn_lookup_index(uint8_t index)
{
	struct bt_conn *conn;

	if (index >= ARRAY_SIZE(conns)) {
    b38c:	2803      	cmp	r0, #3
{
    b38e:	b510      	push	{r4, lr}
	if (index >= ARRAY_SIZE(conns)) {
    b390:	d902      	bls.n	b398 <bt_conn_lookup_index+0xc>
		return NULL;
    b392:	2400      	movs	r4, #0
	if (!atomic_get(&conn->ref)) {
		return NULL;
	}

	return bt_conn_ref(conn);
}
    b394:	4620      	mov	r0, r4
    b396:	bd10      	pop	{r4, pc}
	conn = &conns[index];
    b398:	23b8      	movs	r3, #184	; 0xb8
    b39a:	fb10 f303 	smulbb	r3, r0, r3
	if (!atomic_get(&conn->ref)) {
    b39e:	4c07      	ldr	r4, [pc, #28]	; (b3bc <bt_conn_lookup_index+0x30>)
    b3a0:	f103 0154 	add.w	r1, r3, #84	; 0x54
    b3a4:	4421      	add	r1, r4
    b3a6:	4608      	mov	r0, r1
    b3a8:	f015 f848 	bl	2043c <atomic_get>
    b3ac:	2800      	cmp	r0, #0
    b3ae:	d0f0      	beq.n	b392 <bt_conn_lookup_index+0x6>
	atomic_val_t old = atomic_inc(&conn->ref);
    b3b0:	4608      	mov	r0, r1
	conn = &conns[index];
    b3b2:	441c      	add	r4, r3
	atomic_val_t old = atomic_inc(&conn->ref);
    b3b4:	f015 f860 	bl	20478 <atomic_inc>
	return bt_conn_ref(conn);
    b3b8:	e7ec      	b.n	b394 <bt_conn_lookup_index+0x8>
    b3ba:	bf00      	nop
    b3bc:	20000bb0 	.word	0x20000bb0

0000b3c0 <bt_conn_init>:

int bt_conn_init(void)
{
    b3c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b3c2:	4d17      	ldr	r5, [pc, #92]	; (b420 <bt_conn_init+0x60>)
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
    b3c4:	4e17      	ldr	r6, [pc, #92]	; (b424 <bt_conn_init+0x64>)
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
    b3c6:	2400      	movs	r4, #0
		k_fifo_put(&free_tx, &conn_tx[i]);
    b3c8:	4629      	mov	r1, r5
    b3ca:	4630      	mov	r0, r6
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
    b3cc:	3401      	adds	r4, #1
		k_fifo_put(&free_tx, &conn_tx[i]);
    b3ce:	f017 fc9d 	bl	22d0c <k_queue_append>
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
    b3d2:	2c0a      	cmp	r4, #10
    b3d4:	f105 0510 	add.w	r5, r5, #16
    b3d8:	d1f6      	bne.n	b3c8 <bt_conn_init+0x8>
	}

	bt_att_init();
    b3da:	f015 ffd0 	bl	2137e <bt_att_init>

	err = bt_smp_init();
    b3de:	f004 fd43 	bl	fe68 <bt_smp_init>
	if (err) {
    b3e2:	4604      	mov	r4, r0
    b3e4:	b9d0      	cbnz	r0, b41c <bt_conn_init+0x5c>
		return err;
	}

	bt_l2cap_init();
    b3e6:	f015 fc69 	bl	20cbc <bt_l2cap_init>

	/* Initialize background scan */
	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		for (i = 0; i < ARRAY_SIZE(conns); i++) {
    b3ea:	4d0f      	ldr	r5, [pc, #60]	; (b428 <bt_conn_init+0x68>)
    b3ec:	4626      	mov	r6, r4

#if !defined(CONFIG_BT_WHITELIST)
			if (atomic_test_bit(conn->flags,
					    BT_CONN_AUTO_CONNECT)) {
				/* Only the default identity is supported */
				conn->id = BT_ID_DEFAULT;
    b3ee:	4627      	mov	r7, r4
			if (!atomic_get(&conn->ref)) {
    b3f0:	4628      	mov	r0, r5
    b3f2:	f015 f823 	bl	2043c <atomic_get>
    b3f6:	b160      	cbz	r0, b412 <bt_conn_init+0x52>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    b3f8:	f1a5 0050 	sub.w	r0, r5, #80	; 0x50
    b3fc:	f015 f81e 	bl	2043c <atomic_get>
			if (atomic_test_bit(conn->flags,
    b400:	07c3      	lsls	r3, r0, #31
    b402:	d506      	bpl.n	b412 <bt_conn_init+0x52>
				conn->id = BT_ID_DEFAULT;
    b404:	f805 7c4c 	strb.w	r7, [r5, #-76]
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    b408:	2101      	movs	r1, #1
    b40a:	f1a5 0054 	sub.w	r0, r5, #84	; 0x54
    b40e:	f7ff fbab 	bl	ab68 <bt_conn_set_state>
		for (i = 0; i < ARRAY_SIZE(conns); i++) {
    b412:	3601      	adds	r6, #1
    b414:	2e04      	cmp	r6, #4
    b416:	f105 05b8 	add.w	r5, r5, #184	; 0xb8
    b41a:	d1e9      	bne.n	b3f0 <bt_conn_init+0x30>
#endif /* !defined(CONFIG_BT_WHITELIST) */
		}
	}

	return 0;
}
    b41c:	4620      	mov	r0, r4
    b41e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b420:	20001ef4 	.word	0x20001ef4
    b424:	20000888 	.word	0x20000888
    b428:	20000c04 	.word	0x20000c04

0000b42c <get_ident>:

static uint8_t get_ident(void)
{
	static uint8_t ident;

	ident++;
    b42c:	4b04      	ldr	r3, [pc, #16]	; (b440 <get_ident+0x14>)
    b42e:	781a      	ldrb	r2, [r3, #0]
    b430:	3201      	adds	r2, #1
	/* handle integer overflow (0 is not valid) */
	if (!ident) {
    b432:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
    b436:	bf08      	it	eq
    b438:	2201      	moveq	r2, #1
    b43a:	701a      	strb	r2, [r3, #0]
	}

	return ident;
}
    b43c:	7818      	ldrb	r0, [r3, #0]
    b43e:	4770      	bx	lr
    b440:	20009c28 	.word	0x20009c28

0000b444 <l2cap_server_lookup_psm>:
#if defined(CONFIG_BT_L2CAP_DYNAMIC_CHANNEL)
static struct bt_l2cap_server *l2cap_server_lookup_psm(uint16_t psm)
{
	struct bt_l2cap_server *server;

	SYS_SLIST_FOR_EACH_CONTAINER(&servers, server, node) {
    b444:	4a08      	ldr	r2, [pc, #32]	; (b468 <l2cap_server_lookup_psm+0x24>)
{
    b446:	4603      	mov	r3, r0
	SYS_SLIST_FOR_EACH_CONTAINER(&servers, server, node) {
    b448:	6810      	ldr	r0, [r2, #0]
    b44a:	b158      	cbz	r0, b464 <l2cap_server_lookup_psm+0x20>
    b44c:	3808      	subs	r0, #8
    b44e:	b900      	cbnz	r0, b452 <l2cap_server_lookup_psm+0xe>
    b450:	4770      	bx	lr
		if (server->psm == psm) {
    b452:	8802      	ldrh	r2, [r0, #0]
    b454:	429a      	cmp	r2, r3
    b456:	d005      	beq.n	b464 <l2cap_server_lookup_psm+0x20>
Z_GENLIST_PEEK_NEXT(slist, snode)
    b458:	f110 0208 	adds.w	r2, r0, #8
    b45c:	d001      	beq.n	b462 <l2cap_server_lookup_psm+0x1e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    b45e:	6880      	ldr	r0, [r0, #8]
    b460:	e7f3      	b.n	b44a <l2cap_server_lookup_psm+0x6>
			return server;
		}
	}

	return NULL;
    b462:	4610      	mov	r0, r2
}
    b464:	4770      	bx	lr
    b466:	bf00      	nop
    b468:	20001f94 	.word	0x20001f94

0000b46c <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    b46c:	4b0f      	ldr	r3, [pc, #60]	; (b4ac <l2cap_accept+0x40>)
{
    b46e:	b570      	push	{r4, r5, r6, lr}
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
    b470:	2200      	movs	r2, #0
{
    b472:	4604      	mov	r4, r0
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
    b474:	26c0      	movs	r6, #192	; 0xc0
		if (l2cap->chan.chan.conn) {
    b476:	fb06 f502 	mul.w	r5, r6, r2
    b47a:	58e8      	ldr	r0, [r5, r3]
    b47c:	b180      	cbz	r0, b4a0 <l2cap_accept+0x34>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
    b47e:	3201      	adds	r2, #1
    b480:	2a04      	cmp	r2, #4
    b482:	d1f8      	bne.n	b476 <l2cap_accept+0xa>
    b484:	4b0a      	ldr	r3, [pc, #40]	; (b4b0 <l2cap_accept+0x44>)
    b486:	4a0b      	ldr	r2, [pc, #44]	; (b4b4 <l2cap_accept+0x48>)
		*chan = &l2cap->chan.chan;

		return 0;
	}

	BT_ERR("No available L2CAP context for conn %p", conn);
    b488:	480b      	ldr	r0, [pc, #44]	; (b4b8 <l2cap_accept+0x4c>)
    b48a:	1ad2      	subs	r2, r2, r3
    b48c:	08d2      	lsrs	r2, r2, #3
    b48e:	0192      	lsls	r2, r2, #6
    b490:	f042 0201 	orr.w	r2, r2, #1
    b494:	4621      	mov	r1, r4
    b496:	f013 f829 	bl	1e4ec <log_1>

	return -ENOMEM;
    b49a:	f06f 000b 	mvn.w	r0, #11
    b49e:	e003      	b.n	b4a8 <l2cap_accept+0x3c>
		l2cap->chan.chan.ops = &ops;
    b4a0:	442b      	add	r3, r5
    b4a2:	4a06      	ldr	r2, [pc, #24]	; (b4bc <l2cap_accept+0x50>)
    b4a4:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
    b4a6:	600b      	str	r3, [r1, #0]
}
    b4a8:	bd70      	pop	{r4, r5, r6, pc}
    b4aa:	bf00      	nop
    b4ac:	20000e90 	.word	0x20000e90
    b4b0:	000236f0 	.word	0x000236f0
    b4b4:	000237c8 	.word	0x000237c8
    b4b8:	000262a5 	.word	0x000262a5
    b4bc:	00023cfc 	.word	0x00023cfc

0000b4c0 <l2cap_create_le_sig_pdu.isra.0>:
	if (code == BT_L2CAP_DISCONN_REQ) {
    b4c0:	2806      	cmp	r0, #6
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    b4c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b4c4:	4605      	mov	r5, r0
    b4c6:	460f      	mov	r7, r1
	return bt_conn_create_pdu_timeout(pool,
    b4c8:	4811      	ldr	r0, [pc, #68]	; (b510 <l2cap_create_le_sig_pdu.isra.0+0x50>)
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    b4ca:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
    b4cc:	f04f 0300 	mov.w	r3, #0
    b4d0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    b4d4:	f04f 0104 	mov.w	r1, #4
    b4d8:	bf18      	it	ne
    b4da:	2000      	movne	r0, #0
    b4dc:	f7ff fe82 	bl	b1e4 <bt_conn_create_pdu_timeout>
	if (!buf) {
    b4e0:	4604      	mov	r4, r0
    b4e2:	b960      	cbnz	r0, b4fe <l2cap_create_le_sig_pdu.isra.0+0x3e>
    b4e4:	4a0b      	ldr	r2, [pc, #44]	; (b514 <l2cap_create_le_sig_pdu.isra.0+0x54>)
    b4e6:	4b0c      	ldr	r3, [pc, #48]	; (b518 <l2cap_create_le_sig_pdu.isra.0+0x58>)
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
    b4e8:	480c      	ldr	r0, [pc, #48]	; (b51c <l2cap_create_le_sig_pdu.isra.0+0x5c>)
    b4ea:	1ad2      	subs	r2, r2, r3
    b4ec:	08d2      	lsrs	r2, r2, #3
    b4ee:	0192      	lsls	r2, r2, #6
    b4f0:	f042 0201 	orr.w	r2, r2, #1
    b4f4:	4629      	mov	r1, r5
    b4f6:	f012 fff9 	bl	1e4ec <log_1>
}
    b4fa:	4620      	mov	r0, r4
    b4fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	hdr = net_buf_add(buf, sizeof(*hdr));
    b4fe:	2104      	movs	r1, #4
    b500:	3008      	adds	r0, #8
    b502:	f017 f849 	bl	22598 <net_buf_simple_add>
	hdr->code = code;
    b506:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
    b508:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    b50a:	8046      	strh	r6, [r0, #2]
	return buf;
    b50c:	e7f5      	b.n	b4fa <l2cap_create_le_sig_pdu.isra.0+0x3a>
    b50e:	bf00      	nop
    b510:	200008e0 	.word	0x200008e0
    b514:	000237c8 	.word	0x000237c8
    b518:	000236f0 	.word	0x000236f0
    b51c:	000262cc 	.word	0x000262cc

0000b520 <l2cap_chan_tx_init>:
{
    b520:	b538      	push	{r3, r4, r5, lr}
	(void)memset(&chan->tx, 0, sizeof(chan->tx));
    b522:	220c      	movs	r2, #12
{
    b524:	4604      	mov	r4, r0
	(void)memset(&chan->tx, 0, sizeof(chan->tx));
    b526:	2100      	movs	r1, #0
    b528:	305c      	adds	r0, #92	; 0x5c
    b52a:	f014 fccf 	bl	1fecc <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    b52e:	f3bf 8f5b 	dmb	ish
    b532:	f104 0364 	add.w	r3, r4, #100	; 0x64
    b536:	2500      	movs	r5, #0
    b538:	e853 2f00 	ldrex	r2, [r3]
    b53c:	e843 5100 	strex	r1, r5, [r3]
    b540:	2900      	cmp	r1, #0
    b542:	d1f9      	bne.n	b538 <l2cap_chan_tx_init+0x18>
    b544:	f3bf 8f5b 	dmb	ish
	z_impl_k_queue_init(queue);
    b548:	f104 0068 	add.w	r0, r4, #104	; 0x68
    b54c:	f017 fbd2 	bl	22cf4 <z_impl_k_queue_init>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    b550:	4b02      	ldr	r3, [pc, #8]	; (b55c <l2cap_chan_tx_init+0x3c>)
    b552:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
    b556:	e9c4 3522 	strd	r3, r5, [r4, #136]	; 0x88
}
    b55a:	bd38      	pop	{r3, r4, r5, pc}
    b55c:	00020a37 	.word	0x00020a37

0000b560 <k_work_submit_to_queue.constprop.0>:
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
    b560:	4601      	mov	r1, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b562:	f100 0308 	add.w	r3, r0, #8
    b566:	f3bf 8f5b 	dmb	ish
    b56a:	e853 2f00 	ldrex	r2, [r3]
    b56e:	f042 0001 	orr.w	r0, r2, #1
    b572:	e843 0c00 	strex	ip, r0, [r3]
    b576:	f1bc 0f00 	cmp.w	ip, #0
    b57a:	d1f6      	bne.n	b56a <k_work_submit_to_queue.constprop.0+0xa>
    b57c:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    b580:	07d3      	lsls	r3, r2, #31
    b582:	d402      	bmi.n	b58a <k_work_submit_to_queue.constprop.0+0x2a>
		k_queue_append(&work_q->queue, work);
    b584:	4801      	ldr	r0, [pc, #4]	; (b58c <k_work_submit_to_queue.constprop.0+0x2c>)
    b586:	f017 bbc1 	b.w	22d0c <k_queue_append>
}
    b58a:	4770      	bx	lr
    b58c:	20001c30 	.word	0x20001c30

0000b590 <l2cap_rtx_timeout>:
{
    b590:	b538      	push	{r3, r4, r5, lr}
    b592:	4a10      	ldr	r2, [pc, #64]	; (b5d4 <l2cap_rtx_timeout+0x44>)
    b594:	4b10      	ldr	r3, [pc, #64]	; (b5d8 <l2cap_rtx_timeout+0x48>)
	struct bt_conn *conn = chan->chan.conn;
    b596:	f850 5c10 	ldr.w	r5, [r0, #-16]
    b59a:	1ad2      	subs	r2, r2, r3
    b59c:	08d2      	lsrs	r2, r2, #3
	struct bt_l2cap_le_chan *chan = LE_CHAN_RTX(work);
    b59e:	f1a0 0410 	sub.w	r4, r0, #16
	BT_ERR("chan %p timeout", chan);
    b5a2:	0192      	lsls	r2, r2, #6
    b5a4:	480d      	ldr	r0, [pc, #52]	; (b5dc <l2cap_rtx_timeout+0x4c>)
    b5a6:	f042 0201 	orr.w	r2, r2, #1
    b5aa:	4621      	mov	r1, r4
    b5ac:	f012 ff9e 	bl	1e4ec <log_1>
	bt_l2cap_chan_remove(conn, &chan->chan);
    b5b0:	4628      	mov	r0, r5
    b5b2:	4621      	mov	r1, r4
    b5b4:	f015 f999 	bl	208ea <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
    b5b8:	4620      	mov	r0, r4
		bt_l2cap_chan_del(&chan->chan);
    b5ba:	f015 f9af 	bl	2091c <bt_l2cap_chan_del>
	while ((chan = l2cap_remove_ident(conn, chan->chan.ident))) {
    b5be:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
    b5c2:	2201      	movs	r2, #1
    b5c4:	4628      	mov	r0, r5
    b5c6:	f015 f85f 	bl	20688 <__l2cap_lookup_ident>
    b5ca:	4604      	mov	r4, r0
    b5cc:	2800      	cmp	r0, #0
    b5ce:	d1f4      	bne.n	b5ba <l2cap_rtx_timeout+0x2a>
}
    b5d0:	bd38      	pop	{r3, r4, r5, pc}
    b5d2:	bf00      	nop
    b5d4:	000237c8 	.word	0x000237c8
    b5d8:	000236f0 	.word	0x000236f0
    b5dc:	000262f4 	.word	0x000262f4

0000b5e0 <l2cap_chan_le_send>:
{
    b5e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b5e4:	4606      	mov	r6, r0
    b5e6:	b085      	sub	sp, #20
    b5e8:	460d      	mov	r5, r1
    b5ea:	4617      	mov	r7, r2
	if (!test_and_dec(&ch->tx.credits)) {
    b5ec:	f100 0864 	add.w	r8, r0, #100	; 0x64
		old_value = atomic_get(target);
    b5f0:	4640      	mov	r0, r8
    b5f2:	f015 f891 	bl	20718 <atomic_get>
		if (!old_value) {
    b5f6:	2800      	cmp	r0, #0
    b5f8:	f000 80c6 	beq.w	b788 <l2cap_chan_le_send+0x1a8>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    b5fc:	f3bf 8f5b 	dmb	ish
		new_value = old_value - 1;
    b600:	1e43      	subs	r3, r0, #1
    b602:	e858 2f00 	ldrex	r2, [r8]
    b606:	4282      	cmp	r2, r0
    b608:	d103      	bne.n	b612 <l2cap_chan_le_send+0x32>
    b60a:	e848 3100 	strex	r1, r3, [r8]
    b60e:	2900      	cmp	r1, #0
    b610:	d1f7      	bne.n	b602 <l2cap_chan_le_send+0x22>
    b612:	f3bf 8f5b 	dmb	ish
	} while (atomic_cas(target, old_value, new_value) == 0);
    b616:	d1eb      	bne.n	b5f0 <l2cap_chan_le_send+0x10>
	net_buf_simple_save(&buf->b, &state);
    b618:	f105 0b08 	add.w	fp, r5, #8
	state->offset = net_buf_simple_headroom(buf);
    b61c:	4658      	mov	r0, fp
    b61e:	f017 f810 	bl	22642 <net_buf_simple_headroom>
	state->len = buf->len;
    b622:	f8b5 a00c 	ldrh.w	sl, [r5, #12]
	if (buf->len + sdu_hdr_len > ch->tx.mps) {
    b626:	f8b6 3060 	ldrh.w	r3, [r6, #96]	; 0x60
	state->offset = net_buf_simple_headroom(buf);
    b62a:	9002      	str	r0, [sp, #8]
    b62c:	eb0a 0207 	add.w	r2, sl, r7
    b630:	429a      	cmp	r2, r3
    b632:	d81e      	bhi.n	b672 <l2cap_chan_le_send+0x92>
	if (net_buf_headroom(buf) >= headroom && !buf->frags) {
    b634:	4658      	mov	r0, fp
    b636:	f017 f804 	bl	22642 <net_buf_simple_headroom>
	headroom = BT_L2CAP_CHAN_SEND_RESERVE + sdu_hdr_len;
    b63a:	f107 0308 	add.w	r3, r7, #8
	if (net_buf_headroom(buf) >= headroom && !buf->frags) {
    b63e:	b29b      	uxth	r3, r3
    b640:	4298      	cmp	r0, r3
    b642:	d316      	bcc.n	b672 <l2cap_chan_le_send+0x92>
    b644:	682b      	ldr	r3, [r5, #0]
    b646:	b9a3      	cbnz	r3, b672 <l2cap_chan_le_send+0x92>
		if (sdu_hdr_len) {
    b648:	b137      	cbz	r7, b658 <l2cap_chan_le_send+0x78>
			net_buf_push_le16(buf, net_buf_frags_len(buf));
    b64a:	4628      	mov	r0, r5
    b64c:	f015 f814 	bl	20678 <net_buf_frags_len>
    b650:	b281      	uxth	r1, r0
    b652:	4658      	mov	r0, fp
    b654:	f016 ffc9 	bl	225ea <net_buf_simple_push_le16>
		return net_buf_ref(buf);
    b658:	4628      	mov	r0, r5
    b65a:	f016 ff6b 	bl	22534 <net_buf_ref>
	if (!seg) {
    b65e:	4604      	mov	r4, r0
    b660:	2800      	cmp	r0, #0
    b662:	d138      	bne.n	b6d6 <l2cap_chan_le_send+0xf6>
	return atomic_add(target, 1);
    b664:	2101      	movs	r1, #1
    b666:	4640      	mov	r0, r8
    b668:	f015 f85c 	bl	20724 <atomic_add>
		return -EAGAIN;
    b66c:	f06f 070a 	mvn.w	r7, #10
    b670:	e084      	b.n	b77c <l2cap_chan_le_send+0x19c>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    b672:	79a8      	ldrb	r0, [r5, #6]
    b674:	f010 f978 	bl	1b968 <net_buf_pool_get>
	seg = net_buf_alloc(pool, K_NO_WAIT);
    b678:	2200      	movs	r2, #0
    b67a:	2300      	movs	r3, #0
    b67c:	f016 ff24 	bl	224c8 <net_buf_alloc_fixed>
	if (seg) {
    b680:	4604      	mov	r4, r0
    b682:	2800      	cmp	r0, #0
    b684:	d055      	beq.n	b732 <l2cap_chan_le_send+0x152>
		net_buf_reserve(seg, BT_L2CAP_CHAN_SEND_RESERVE);
    b686:	2108      	movs	r1, #8
    b688:	4408      	add	r0, r1
    b68a:	f016 ff42 	bl	22512 <net_buf_simple_reserve>
	if (sdu_hdr_len) {
    b68e:	f104 0908 	add.w	r9, r4, #8
    b692:	b137      	cbz	r7, b6a2 <l2cap_chan_le_send+0xc2>
		net_buf_add_le16(seg, net_buf_frags_len(buf));
    b694:	4628      	mov	r0, r5
    b696:	f014 ffef 	bl	20678 <net_buf_frags_len>
    b69a:	b281      	uxth	r1, r0
    b69c:	4648      	mov	r0, r9
    b69e:	f016 ff92 	bl	225c6 <net_buf_simple_add_le16>
	len = MIN(net_buf_tailroom(seg), ch->tx.mps - sdu_hdr_len);
    b6a2:	4648      	mov	r0, r9
    b6a4:	f016 ffd1 	bl	2264a <net_buf_simple_tailroom>
    b6a8:	f8b6 1060 	ldrh.w	r1, [r6, #96]	; 0x60
    b6ac:	1bc9      	subs	r1, r1, r7
    b6ae:	4288      	cmp	r0, r1
    b6b0:	d248      	bcs.n	b744 <l2cap_chan_le_send+0x164>
    b6b2:	4648      	mov	r0, r9
    b6b4:	f016 ffc9 	bl	2264a <net_buf_simple_tailroom>
    b6b8:	b282      	uxth	r2, r0
	len = MIN(buf->len, len);
    b6ba:	89a9      	ldrh	r1, [r5, #12]
	net_buf_add_mem(seg, buf->data, len);
    b6bc:	428a      	cmp	r2, r1
    b6be:	bf28      	it	cs
    b6c0:	460a      	movcs	r2, r1
    b6c2:	4648      	mov	r0, r9
    b6c4:	68a9      	ldr	r1, [r5, #8]
    b6c6:	9203      	str	r2, [sp, #12]
    b6c8:	f016 ff6c 	bl	225a4 <net_buf_simple_add_mem>
	net_buf_pull(buf, len);
    b6cc:	9a03      	ldr	r2, [sp, #12]
    b6ce:	4658      	mov	r0, fp
    b6d0:	4611      	mov	r1, r2
    b6d2:	f016 ff96 	bl	22602 <net_buf_simple_pull>
	len = seg->len - sdu_hdr_len;
    b6d6:	89a2      	ldrh	r2, [r4, #12]
    b6d8:	f8b6 105c 	ldrh.w	r1, [r6, #92]	; 0x5c
	if ((buf == seg || !buf->len) && ch->chan.ops->sent) {
    b6dc:	42a5      	cmp	r5, r4
	len = seg->len - sdu_hdr_len;
    b6de:	eba2 0707 	sub.w	r7, r2, r7
	if ((buf == seg || !buf->len) && ch->chan.ops->sent) {
    b6e2:	d001      	beq.n	b6e8 <l2cap_chan_le_send+0x108>
    b6e4:	89ab      	ldrh	r3, [r5, #12]
    b6e6:	bb7b      	cbnz	r3, b748 <l2cap_chan_le_send+0x168>
    b6e8:	6873      	ldr	r3, [r6, #4]
    b6ea:	695b      	ldr	r3, [r3, #20]
    b6ec:	b363      	cbz	r3, b748 <l2cap_chan_le_send+0x168>
		err = bt_l2cap_send_cb(ch->chan.conn, ch->tx.cid, seg,
    b6ee:	4b2c      	ldr	r3, [pc, #176]	; (b7a0 <l2cap_chan_le_send+0x1c0>)
    b6f0:	9600      	str	r6, [sp, #0]
		err = bt_l2cap_send_cb(ch->chan.conn, ch->tx.cid, seg,
    b6f2:	4622      	mov	r2, r4
    b6f4:	6830      	ldr	r0, [r6, #0]
    b6f6:	f015 f944 	bl	20982 <bt_l2cap_send_cb>
    b6fa:	4604      	mov	r4, r0
	if (err) {
    b6fc:	b338      	cbz	r0, b74e <l2cap_chan_le_send+0x16e>
    b6fe:	4b29      	ldr	r3, [pc, #164]	; (b7a4 <l2cap_chan_le_send+0x1c4>)
    b700:	4a29      	ldr	r2, [pc, #164]	; (b7a8 <l2cap_chan_le_send+0x1c8>)
    b702:	1ad2      	subs	r2, r2, r3
    b704:	08d2      	lsrs	r2, r2, #3
		BT_WARN("Unable to send seg %d", err);
    b706:	0192      	lsls	r2, r2, #6
    b708:	4601      	mov	r1, r0
    b70a:	f042 0202 	orr.w	r2, r2, #2
    b70e:	4827      	ldr	r0, [pc, #156]	; (b7ac <l2cap_chan_le_send+0x1cc>)
    b710:	f012 feec 	bl	1e4ec <log_1>
    b714:	2101      	movs	r1, #1
    b716:	4640      	mov	r0, r8
    b718:	f015 f804 	bl	20724 <atomic_add>
		if (err == -ENOBUFS) {
    b71c:	f114 0f37 	cmn.w	r4, #55	; 0x37
    b720:	d130      	bne.n	b784 <l2cap_chan_le_send+0x1a4>
	buf->data = buf->__buf + state->offset;
    b722:	6928      	ldr	r0, [r5, #16]
    b724:	9b02      	ldr	r3, [sp, #8]
	buf->len = state->len;
    b726:	f8a5 a00c 	strh.w	sl, [r5, #12]
	buf->data = buf->__buf + state->offset;
    b72a:	fa10 f083 	uxtah	r0, r0, r3
    b72e:	60a8      	str	r0, [r5, #8]
	buf->len = state->len;
    b730:	e79c      	b.n	b66c <l2cap_chan_le_send+0x8c>
	return bt_conn_create_pdu_timeout(pool,
    b732:	2200      	movs	r2, #0
    b734:	2300      	movs	r3, #0
    b736:	2104      	movs	r1, #4
    b738:	f7ff fd54 	bl	b1e4 <bt_conn_create_pdu_timeout>
	if (!seg) {
    b73c:	4604      	mov	r4, r0
    b73e:	2800      	cmp	r0, #0
    b740:	d1a5      	bne.n	b68e <l2cap_chan_le_send+0xae>
    b742:	e78f      	b.n	b664 <l2cap_chan_le_send+0x84>
	len = MIN(net_buf_tailroom(seg), ch->tx.mps - sdu_hdr_len);
    b744:	b28a      	uxth	r2, r1
    b746:	e7b8      	b.n	b6ba <l2cap_chan_le_send+0xda>
		err = bt_l2cap_send_cb(ch->chan.conn, ch->tx.cid, seg,
    b748:	4b19      	ldr	r3, [pc, #100]	; (b7b0 <l2cap_chan_le_send+0x1d0>)
    b74a:	9600      	str	r6, [sp, #0]
    b74c:	e7d1      	b.n	b6f2 <l2cap_chan_le_send+0x112>
	if (!atomic_get(&ch->tx.credits)) {
    b74e:	4640      	mov	r0, r8
    b750:	f014 ffe2 	bl	20718 <atomic_get>
    b754:	b990      	cbnz	r0, b77c <l2cap_chan_le_send+0x19c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    b756:	f3bf 8f5b 	dmb	ish
		atomic_clear_bit(ch->chan.status, BT_L2CAP_STATUS_OUT);
    b75a:	f106 0140 	add.w	r1, r6, #64	; 0x40
    b75e:	e851 3f00 	ldrex	r3, [r1]
    b762:	f023 0301 	bic.w	r3, r3, #1
    b766:	e841 3200 	strex	r2, r3, [r1]
    b76a:	2a00      	cmp	r2, #0
    b76c:	d1f7      	bne.n	b75e <l2cap_chan_le_send+0x17e>
    b76e:	f3bf 8f5b 	dmb	ish
		if (ch->chan.ops->status) {
    b772:	6873      	ldr	r3, [r6, #4]
    b774:	699b      	ldr	r3, [r3, #24]
    b776:	b10b      	cbz	r3, b77c <l2cap_chan_le_send+0x19c>
			ch->chan.ops->status(&ch->chan, ch->chan.status);
    b778:	4630      	mov	r0, r6
    b77a:	4798      	blx	r3
}
    b77c:	4638      	mov	r0, r7
    b77e:	b005      	add	sp, #20
    b780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b784:	4627      	mov	r7, r4
    b786:	e7f9      	b.n	b77c <l2cap_chan_le_send+0x19c>
    b788:	4b06      	ldr	r3, [pc, #24]	; (b7a4 <l2cap_chan_le_send+0x1c4>)
    b78a:	4907      	ldr	r1, [pc, #28]	; (b7a8 <l2cap_chan_le_send+0x1c8>)
		BT_WARN("No credits to transmit packet");
    b78c:	4809      	ldr	r0, [pc, #36]	; (b7b4 <l2cap_chan_le_send+0x1d4>)
    b78e:	1ac9      	subs	r1, r1, r3
    b790:	08c9      	lsrs	r1, r1, #3
    b792:	0189      	lsls	r1, r1, #6
    b794:	f041 0102 	orr.w	r1, r1, #2
    b798:	f012 fe9b 	bl	1e4d2 <log_0>
    b79c:	e766      	b.n	b66c <l2cap_chan_le_send+0x8c>
    b79e:	bf00      	nop
    b7a0:	000208d3 	.word	0x000208d3
    b7a4:	000236f0 	.word	0x000236f0
    b7a8:	000237c8 	.word	0x000237c8
    b7ac:	00026304 	.word	0x00026304
    b7b0:	000208cd 	.word	0x000208cd
    b7b4:	0002631a 	.word	0x0002631a

0000b7b8 <l2cap_chan_send_req>:
{
    b7b8:	b538      	push	{r3, r4, r5, lr}
    b7ba:	4604      	mov	r4, r0
    b7bc:	460d      	mov	r5, r1
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    b7be:	f100 0110 	add.w	r1, r0, #16
    b7c2:	4804      	ldr	r0, [pc, #16]	; (b7d4 <l2cap_chan_send_req+0x1c>)
    b7c4:	f012 f916 	bl	1d9f4 <k_delayed_work_submit_to_queue>
	bt_l2cap_send(chan->conn, BT_L2CAP_CID_LE_SIG, buf);
    b7c8:	6820      	ldr	r0, [r4, #0]
    b7ca:	4629      	mov	r1, r5
}
    b7cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_l2cap_send(chan->conn, BT_L2CAP_CID_LE_SIG, buf);
    b7d0:	f015 b953 	b.w	20a7a <bt_l2cap_send.constprop.0>
    b7d4:	20001c30 	.word	0x20001c30

0000b7d8 <l2cap_chan_send_credits.isra.0>:
static void l2cap_chan_send_credits(struct bt_l2cap_le_chan *chan,
    b7d8:	b570      	push	{r4, r5, r6, lr}
    b7da:	f8b0 6056 	ldrh.w	r6, [r0, #86]	; 0x56
    b7de:	428e      	cmp	r6, r1
    b7e0:	bf28      	it	cs
    b7e2:	460e      	movcs	r6, r1
    b7e4:	4604      	mov	r4, r0
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_LE_CREDITS, get_ident(),
    b7e6:	f7ff fe21 	bl	b42c <get_ident>
    b7ea:	2204      	movs	r2, #4
    b7ec:	4601      	mov	r1, r0
    b7ee:	2016      	movs	r0, #22
    b7f0:	f7ff fe66 	bl	b4c0 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
    b7f4:	4605      	mov	r5, r0
    b7f6:	2800      	cmp	r0, #0
    b7f8:	d146      	bne.n	b888 <l2cap_chan_send_credits.isra.0+0xb0>
    b7fa:	4b2e      	ldr	r3, [pc, #184]	; (b8b4 <l2cap_chan_send_credits.isra.0+0xdc>)
    b7fc:	492e      	ldr	r1, [pc, #184]	; (b8b8 <l2cap_chan_send_credits.isra.0+0xe0>)
		BT_ERR("Unable to send credits update");
    b7fe:	482f      	ldr	r0, [pc, #188]	; (b8bc <l2cap_chan_send_credits.isra.0+0xe4>)
    b800:	1ac9      	subs	r1, r1, r3
    b802:	08c9      	lsrs	r1, r1, #3
    b804:	0189      	lsls	r1, r1, #6
    b806:	f041 0101 	orr.w	r1, r1, #1
	atomic_set_bit(chan->status, BT_L2CAP_STATUS_SHUTDOWN);
    b80a:	f104 0640 	add.w	r6, r4, #64	; 0x40
		BT_ERR("Unable to send credits update");
    b80e:	f012 fe60 	bl	1e4d2 <log_0>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b812:	f3bf 8f5b 	dmb	ish
    b816:	e856 3f00 	ldrex	r3, [r6]
    b81a:	f043 0302 	orr.w	r3, r3, #2
    b81e:	e846 3200 	strex	r2, r3, [r6]
    b822:	2a00      	cmp	r2, #0
    b824:	d1f7      	bne.n	b816 <l2cap_chan_send_credits.isra.0+0x3e>
    b826:	f3bf 8f5b 	dmb	ish
	if (ch->_sdu) {
    b82a:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    b82e:	b128      	cbz	r0, b83c <l2cap_chan_send_credits.isra.0+0x64>
		net_buf_unref(ch->_sdu);
    b830:	f010 f956 	bl	1bae0 <net_buf_unref>
		ch->_sdu = NULL;
    b834:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
		ch->_sdu_len = 0U;
    b838:	f8a4 5094 	strh.w	r5, [r4, #148]	; 0x94
	if (ch->tx_buf) {
    b83c:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    b840:	b120      	cbz	r0, b84c <l2cap_chan_send_credits.isra.0+0x74>
		net_buf_unref(ch->tx_buf);
    b842:	f010 f94d 	bl	1bae0 <net_buf_unref>
		ch->tx_buf = NULL;
    b846:	2300      	movs	r3, #0
    b848:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	while ((buf = net_buf_get(&ch->tx_queue, K_NO_WAIT))) {
    b84c:	f104 0568 	add.w	r5, r4, #104	; 0x68
    b850:	2200      	movs	r2, #0
    b852:	2300      	movs	r3, #0
    b854:	4628      	mov	r0, r5
    b856:	f016 fe3c 	bl	224d2 <net_buf_get>
    b85a:	b978      	cbnz	r0, b87c <l2cap_chan_send_credits.isra.0+0xa4>
	while ((buf = net_buf_get(&ch->rx_queue, K_NO_WAIT))) {
    b85c:	f104 05a4 	add.w	r5, r4, #164	; 0xa4
    b860:	2200      	movs	r2, #0
    b862:	2300      	movs	r3, #0
    b864:	4628      	mov	r0, r5
    b866:	f016 fe34 	bl	224d2 <net_buf_get>
    b86a:	b950      	cbnz	r0, b882 <l2cap_chan_send_credits.isra.0+0xaa>
	if (chan->ops->status) {
    b86c:	6863      	ldr	r3, [r4, #4]
    b86e:	699b      	ldr	r3, [r3, #24]
    b870:	b1f3      	cbz	r3, b8b0 <l2cap_chan_send_credits.isra.0+0xd8>
		chan->ops->status(chan, chan->status);
    b872:	4631      	mov	r1, r6
    b874:	4620      	mov	r0, r4
}
    b876:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		chan->ops->status(chan, chan->status);
    b87a:	4718      	bx	r3
		net_buf_unref(buf);
    b87c:	f010 f930 	bl	1bae0 <net_buf_unref>
    b880:	e7e6      	b.n	b850 <l2cap_chan_send_credits.isra.0+0x78>
		net_buf_unref(buf);
    b882:	f010 f92d 	bl	1bae0 <net_buf_unref>
    b886:	e7eb      	b.n	b860 <l2cap_chan_send_credits.isra.0+0x88>
	atomic_add(&chan->rx.credits, credits);
    b888:	4631      	mov	r1, r6
    b88a:	f104 0058 	add.w	r0, r4, #88	; 0x58
    b88e:	f014 ff49 	bl	20724 <atomic_add>
	ev = net_buf_add(buf, sizeof(*ev));
    b892:	2104      	movs	r1, #4
    b894:	f105 0008 	add.w	r0, r5, #8
    b898:	f016 fe7e 	bl	22598 <net_buf_simple_add>
	ev->cid = sys_cpu_to_le16(chan->rx.cid);
    b89c:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
    b8a0:	8003      	strh	r3, [r0, #0]
	ev->credits = sys_cpu_to_le16(credits);
    b8a2:	8046      	strh	r6, [r0, #2]
	bt_l2cap_send(chan->chan.conn, BT_L2CAP_CID_LE_SIG, buf);
    b8a4:	4629      	mov	r1, r5
    b8a6:	6820      	ldr	r0, [r4, #0]
}
    b8a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_send(chan->chan.conn, BT_L2CAP_CID_LE_SIG, buf);
    b8ac:	f015 b8e5 	b.w	20a7a <bt_l2cap_send.constprop.0>
}
    b8b0:	bd70      	pop	{r4, r5, r6, pc}
    b8b2:	bf00      	nop
    b8b4:	000236f0 	.word	0x000236f0
    b8b8:	000237c8 	.word	0x000237c8
    b8bc:	00026338 	.word	0x00026338

0000b8c0 <l2cap_chan_add>:
	if (ch->rx.cid > 0) {
    b8c0:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
{
    b8c4:	b570      	push	{r4, r5, r6, lr}
    b8c6:	4605      	mov	r5, r0
    b8c8:	460c      	mov	r4, r1
    b8ca:	4616      	mov	r6, r2
	if (ch->rx.cid > 0) {
    b8cc:	b933      	cbnz	r3, b8dc <l2cap_chan_add+0x1c>
	for (cid = L2CAP_LE_CID_DYN_START; cid <= L2CAP_LE_CID_DYN_END; cid++) {
    b8ce:	2140      	movs	r1, #64	; 0x40
		if (!bt_l2cap_le_lookup_rx_cid(conn, cid)) {
    b8d0:	4628      	mov	r0, r5
    b8d2:	f015 f9c2 	bl	20c5a <bt_l2cap_le_lookup_rx_cid>
    b8d6:	bb78      	cbnz	r0, b938 <l2cap_chan_add+0x78>
			ch->rx.cid = cid;
    b8d8:	f8a4 1050 	strh.w	r1, [r4, #80]	; 0x50
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    b8dc:	4921      	ldr	r1, [pc, #132]	; (b964 <l2cap_chan_add+0xa4>)
    b8de:	f104 0010 	add.w	r0, r4, #16
    b8e2:	f017 fc09 	bl	230f8 <k_delayed_work_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    b8e6:	f3bf 8f5b 	dmb	ish
    b8ea:	f104 0340 	add.w	r3, r4, #64	; 0x40
    b8ee:	2200      	movs	r2, #0
    b8f0:	e853 1f00 	ldrex	r1, [r3]
    b8f4:	e843 2000 	strex	r0, r2, [r3]
    b8f8:	2800      	cmp	r0, #0
    b8fa:	d1f9      	bne.n	b8f0 <l2cap_chan_add+0x30>
    b8fc:	f3bf 8f5b 	dmb	ish
	parent->next = child;
    b900:	60a2      	str	r2, [r4, #8]
Z_GENLIST_APPEND(slist, snode)
    b902:	6d2a      	ldr	r2, [r5, #80]	; 0x50
	sys_slist_append(&conn->channels, &chan->node);
    b904:	f104 0308 	add.w	r3, r4, #8
    b908:	bb32      	cbnz	r2, b958 <l2cap_chan_add+0x98>
	list->head = node;
    b90a:	e9c5 3313 	strd	r3, r3, [r5, #76]	; 0x4c
	if (L2CAP_LE_CID_IS_DYN(ch->rx.cid)) {
    b90e:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
	chan->conn = conn;
    b912:	6025      	str	r5, [r4, #0]
	if (L2CAP_LE_CID_IS_DYN(ch->rx.cid)) {
    b914:	3b40      	subs	r3, #64	; 0x40
    b916:	2b3f      	cmp	r3, #63	; 0x3f
	chan->destroy = destroy;
    b918:	60e6      	str	r6, [r4, #12]
	if (L2CAP_LE_CID_IS_DYN(ch->rx.cid)) {
    b91a:	d820      	bhi.n	b95e <l2cap_chan_add+0x9e>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    b91c:	4a12      	ldr	r2, [pc, #72]	; (b968 <l2cap_chan_add+0xa8>)
    b91e:	2300      	movs	r3, #0
    b920:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
    b924:	e9c4 2327 	strd	r2, r3, [r4, #156]	; 0x9c
    b928:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
    b92c:	f017 f9e2 	bl	22cf4 <z_impl_k_queue_init>
	chan->state = state;
    b930:	2001      	movs	r0, #1
    b932:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
}
    b936:	bd70      	pop	{r4, r5, r6, pc}
	for (cid = L2CAP_LE_CID_DYN_START; cid <= L2CAP_LE_CID_DYN_END; cid++) {
    b938:	3101      	adds	r1, #1
    b93a:	b289      	uxth	r1, r1
    b93c:	2980      	cmp	r1, #128	; 0x80
    b93e:	d1c7      	bne.n	b8d0 <l2cap_chan_add+0x10>
    b940:	4b0a      	ldr	r3, [pc, #40]	; (b96c <l2cap_chan_add+0xac>)
    b942:	490b      	ldr	r1, [pc, #44]	; (b970 <l2cap_chan_add+0xb0>)
		BT_ERR("Unable to allocate L2CAP CID");
    b944:	480b      	ldr	r0, [pc, #44]	; (b974 <l2cap_chan_add+0xb4>)
    b946:	1ac9      	subs	r1, r1, r3
    b948:	08c9      	lsrs	r1, r1, #3
    b94a:	0189      	lsls	r1, r1, #6
    b94c:	f041 0101 	orr.w	r1, r1, #1
    b950:	f012 fdbf 	bl	1e4d2 <log_0>
		return false;
    b954:	2000      	movs	r0, #0
    b956:	e7ee      	b.n	b936 <l2cap_chan_add+0x76>
	parent->next = child;
    b958:	6013      	str	r3, [r2, #0]
	list->tail = node;
    b95a:	652b      	str	r3, [r5, #80]	; 0x50
}
    b95c:	e7d7      	b.n	b90e <l2cap_chan_add+0x4e>
	return true;
    b95e:	2001      	movs	r0, #1
    b960:	e7e9      	b.n	b936 <l2cap_chan_add+0x76>
    b962:	bf00      	nop
    b964:	0000b591 	.word	0x0000b591
    b968:	00020d15 	.word	0x00020d15
    b96c:	000236f0 	.word	0x000236f0
    b970:	000237c8 	.word	0x000237c8
    b974:	00026356 	.word	0x00026356

0000b978 <bt_l2cap_connected>:
{
    b978:	b573      	push	{r0, r1, r4, r5, r6, lr}
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    b97a:	4c1a      	ldr	r4, [pc, #104]	; (b9e4 <bt_l2cap_connected+0x6c>)
    b97c:	4e1a      	ldr	r6, [pc, #104]	; (b9e8 <bt_l2cap_connected+0x70>)
{
    b97e:	4605      	mov	r5, r0
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    b980:	42b4      	cmp	r4, r6
    b982:	d301      	bcc.n	b988 <bt_l2cap_connected+0x10>
}
    b984:	b002      	add	sp, #8
    b986:	bd70      	pop	{r4, r5, r6, pc}
		if (fchan->accept(conn, &chan) < 0) {
    b988:	6863      	ldr	r3, [r4, #4]
    b98a:	a901      	add	r1, sp, #4
    b98c:	4628      	mov	r0, r5
    b98e:	4798      	blx	r3
    b990:	2800      	cmp	r0, #0
    b992:	db25      	blt.n	b9e0 <bt_l2cap_connected+0x68>
		ch = BT_L2CAP_LE_CHAN(chan);
    b994:	9901      	ldr	r1, [sp, #4]
		ch->rx.cid = fchan->cid;
    b996:	8823      	ldrh	r3, [r4, #0]
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
    b998:	68a2      	ldr	r2, [r4, #8]
		ch->rx.cid = fchan->cid;
    b99a:	f8a1 3050 	strh.w	r3, [r1, #80]	; 0x50
		ch->tx.cid = fchan->cid;
    b99e:	f8a1 305c 	strh.w	r3, [r1, #92]	; 0x5c
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
    b9a2:	4628      	mov	r0, r5
    b9a4:	f7ff ff8c 	bl	b8c0 <l2cap_chan_add>
    b9a8:	2800      	cmp	r0, #0
    b9aa:	d0eb      	beq.n	b984 <bt_l2cap_connected+0xc>
		if (chan->ops->connected) {
    b9ac:	9801      	ldr	r0, [sp, #4]
    b9ae:	6843      	ldr	r3, [r0, #4]
    b9b0:	681b      	ldr	r3, [r3, #0]
    b9b2:	b103      	cbz	r3, b9b6 <bt_l2cap_connected+0x3e>
			chan->ops->connected(chan);
    b9b4:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b9b6:	9b01      	ldr	r3, [sp, #4]
    b9b8:	f3bf 8f5b 	dmb	ish
    b9bc:	3340      	adds	r3, #64	; 0x40
    b9be:	e853 2f00 	ldrex	r2, [r3]
    b9c2:	f042 0201 	orr.w	r2, r2, #1
    b9c6:	e843 2100 	strex	r1, r2, [r3]
    b9ca:	2900      	cmp	r1, #0
    b9cc:	d1f7      	bne.n	b9be <bt_l2cap_connected+0x46>
    b9ce:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
    b9d2:	9801      	ldr	r0, [sp, #4]
    b9d4:	6843      	ldr	r3, [r0, #4]
    b9d6:	699b      	ldr	r3, [r3, #24]
    b9d8:	b113      	cbz	r3, b9e0 <bt_l2cap_connected+0x68>
			chan->ops->status(chan, chan->status);
    b9da:	f100 0140 	add.w	r1, r0, #64	; 0x40
    b9de:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    b9e0:	340c      	adds	r4, #12
    b9e2:	e7cd      	b.n	b980 <bt_l2cap_connected+0x8>
    b9e4:	000236b4 	.word	0x000236b4
    b9e8:	000236d8 	.word	0x000236d8

0000b9ec <l2cap_chan_accept>:
{
    b9ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b9f0:	4699      	mov	r9, r3
	if (!L2CAP_LE_CID_IS_DYN(scid)) {
    b9f2:	f1a2 0340 	sub.w	r3, r2, #64	; 0x40
    b9f6:	2b3f      	cmp	r3, #63	; 0x3f
{
    b9f8:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
    b9fc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    b9fe:	4683      	mov	fp, r0
    ba00:	460f      	mov	r7, r1
    ba02:	4690      	mov	r8, r2
	if (!L2CAP_LE_CID_IS_DYN(scid)) {
    ba04:	d853      	bhi.n	baae <l2cap_chan_accept+0xc2>
	*chan = bt_l2cap_le_lookup_tx_cid(conn, scid);
    ba06:	4611      	mov	r1, r2
    ba08:	f015 f917 	bl	20c3a <bt_l2cap_le_lookup_tx_cid>
    ba0c:	4606      	mov	r6, r0
    ba0e:	6028      	str	r0, [r5, #0]
	if (*chan) {
    ba10:	2800      	cmp	r0, #0
    ba12:	d14e      	bne.n	bab2 <l2cap_chan_accept+0xc6>
	err = server->accept(conn, chan);
    ba14:	687b      	ldr	r3, [r7, #4]
    ba16:	4629      	mov	r1, r5
    ba18:	4658      	mov	r0, fp
    ba1a:	4798      	blx	r3
	if (err < 0) {
    ba1c:	1e04      	subs	r4, r0, #0
    ba1e:	da13      	bge.n	ba48 <l2cap_chan_accept+0x5c>
	switch (err) {
    ba20:	f114 0f0c 	cmn.w	r4, #12
    ba24:	d049      	beq.n	baba <l2cap_chan_accept+0xce>
    ba26:	f114 0f0b 	cmn.w	r4, #11
    ba2a:	da08      	bge.n	ba3e <l2cap_chan_accept+0x52>
    ba2c:	f114 0f23 	cmn.w	r4, #35	; 0x23
    ba30:	d041      	beq.n	bab6 <l2cap_chan_accept+0xca>
    ba32:	340d      	adds	r4, #13
    ba34:	bf14      	ite	ne
    ba36:	200b      	movne	r0, #11
    ba38:	2006      	moveq	r0, #6
}
    ba3a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (err) {
    ba3e:	3401      	adds	r4, #1
		return BT_L2CAP_LE_ERR_KEY_SIZE;
    ba40:	bf14      	ite	ne
    ba42:	200b      	movne	r0, #11
    ba44:	2007      	moveq	r0, #7
    ba46:	e7f8      	b.n	ba3a <l2cap_chan_accept+0x4e>
	(*chan)->required_sec_level = server->sec_level;
    ba48:	682b      	ldr	r3, [r5, #0]
    ba4a:	78ba      	ldrb	r2, [r7, #2]
    ba4c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	if (!l2cap_chan_add(conn, *chan, l2cap_chan_destroy)) {
    ba50:	6829      	ldr	r1, [r5, #0]
    ba52:	4a1c      	ldr	r2, [pc, #112]	; (bac4 <l2cap_chan_accept+0xd8>)
    ba54:	4658      	mov	r0, fp
    ba56:	f7ff ff33 	bl	b8c0 <l2cap_chan_add>
    ba5a:	b370      	cbz	r0, baba <l2cap_chan_accept+0xce>
	ch = BT_L2CAP_LE_CHAN(*chan);
    ba5c:	682c      	ldr	r4, [r5, #0]
	l2cap_chan_tx_init(ch);
    ba5e:	4620      	mov	r0, r4
    ba60:	f7ff fd5e 	bl	b520 <l2cap_chan_tx_init>
	ch->tx.mps = mps;
    ba64:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    ba68:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	l2cap_chan_tx_give_credits(ch, credits);
    ba6c:	4651      	mov	r1, sl
    ba6e:	4620      	mov	r0, r4
	ch->tx.cid = scid;
    ba70:	f8a4 805c 	strh.w	r8, [r4, #92]	; 0x5c
	ch->tx.mtu = mtu;
    ba74:	f8a4 905e 	strh.w	r9, [r4, #94]	; 0x5e
	ch->tx.init_credits = credits;
    ba78:	f8a4 a062 	strh.w	sl, [r4, #98]	; 0x62
	l2cap_chan_tx_give_credits(ch, credits);
    ba7c:	f014 feb9 	bl	207f2 <l2cap_chan_tx_give_credits>
	l2cap_chan_rx_init(ch);
    ba80:	4620      	mov	r0, r4
    ba82:	f014 fe8b 	bl	2079c <l2cap_chan_rx_init>
	atomic_add(&chan->rx.credits, credits);
    ba86:	f8b4 1056 	ldrh.w	r1, [r4, #86]	; 0x56
    ba8a:	f104 0058 	add.w	r0, r4, #88	; 0x58
    ba8e:	f014 fe49 	bl	20724 <atomic_add>
	(*chan)->psm = server->psm;
    ba92:	682b      	ldr	r3, [r5, #0]
    ba94:	883a      	ldrh	r2, [r7, #0]
    ba96:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	chan->state = state;
    ba9a:	2203      	movs	r2, #3
    ba9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	if ((*chan)->ops->connected) {
    baa0:	6828      	ldr	r0, [r5, #0]
    baa2:	6843      	ldr	r3, [r0, #4]
    baa4:	681b      	ldr	r3, [r3, #0]
    baa6:	b153      	cbz	r3, babe <l2cap_chan_accept+0xd2>
		(*chan)->ops->connected(*chan);
    baa8:	4798      	blx	r3
	return BT_L2CAP_LE_SUCCESS;
    baaa:	4630      	mov	r0, r6
    baac:	e7c5      	b.n	ba3a <l2cap_chan_accept+0x4e>
		return BT_L2CAP_LE_ERR_INVALID_SCID;
    baae:	2009      	movs	r0, #9
    bab0:	e7c3      	b.n	ba3a <l2cap_chan_accept+0x4e>
		return BT_L2CAP_LE_ERR_SCID_IN_USE;
    bab2:	200a      	movs	r0, #10
    bab4:	e7c1      	b.n	ba3a <l2cap_chan_accept+0x4e>
		return BT_L2CAP_LE_ERR_PSM_NOT_SUPP;
    bab6:	2002      	movs	r0, #2
    bab8:	e7bf      	b.n	ba3a <l2cap_chan_accept+0x4e>
		return BT_L2CAP_LE_ERR_NO_RESOURCES;
    baba:	2004      	movs	r0, #4
    babc:	e7bd      	b.n	ba3a <l2cap_chan_accept+0x4e>
	return BT_L2CAP_LE_SUCCESS;
    babe:	4618      	mov	r0, r3
    bac0:	e7bb      	b.n	ba3a <l2cap_chan_accept+0x4e>
    bac2:	bf00      	nop
    bac4:	00020741 	.word	0x00020741

0000bac8 <l2cap_chan_le_recv_seg>:
{
    bac8:	b570      	push	{r4, r5, r6, lr}
    baca:	460d      	mov	r5, r1
	len = net_buf_frags_len(chan->_sdu);
    bacc:	f8d0 1090 	ldr.w	r1, [r0, #144]	; 0x90
{
    bad0:	b086      	sub	sp, #24
	uint16_t seg = 0U;
    bad2:	2300      	movs	r3, #0
{
    bad4:	4604      	mov	r4, r0
	len = net_buf_frags_len(chan->_sdu);
    bad6:	4608      	mov	r0, r1
	uint16_t seg = 0U;
    bad8:	f8ad 3016 	strh.w	r3, [sp, #22]
	len = net_buf_frags_len(chan->_sdu);
    badc:	f014 fdcc 	bl	20678 <net_buf_frags_len>
	if (len) {
    bae0:	b283      	uxth	r3, r0
	len = net_buf_frags_len(chan->_sdu);
    bae2:	4606      	mov	r6, r0
	if (len) {
    bae4:	b12b      	cbz	r3, baf2 <l2cap_chan_le_recv_seg+0x2a>
		memcpy(&seg, net_buf_user_data(chan->_sdu), sizeof(seg));
    bae6:	2202      	movs	r2, #2
    bae8:	3114      	adds	r1, #20
    baea:	f10d 0016 	add.w	r0, sp, #22
    baee:	f014 f9c2 	bl	1fe76 <memcpy>
	if (len + buf->len > chan->_sdu_len) {
    baf2:	89a8      	ldrh	r0, [r5, #12]
    baf4:	f8b4 3094 	ldrh.w	r3, [r4, #148]	; 0x94
    baf8:	fa10 f686 	uxtah	r6, r0, r6
    bafc:	429e      	cmp	r6, r3
    bafe:	dd0e      	ble.n	bb1e <l2cap_chan_le_recv_seg+0x56>
    bb00:	4945      	ldr	r1, [pc, #276]	; (bc18 <l2cap_chan_le_recv_seg+0x150>)
    bb02:	4b46      	ldr	r3, [pc, #280]	; (bc1c <l2cap_chan_le_recv_seg+0x154>)
		BT_ERR("SDU length mismatch");
    bb04:	4846      	ldr	r0, [pc, #280]	; (bc20 <l2cap_chan_le_recv_seg+0x158>)
    bb06:	1ac9      	subs	r1, r1, r3
    bb08:	08c9      	lsrs	r1, r1, #3
    bb0a:	0189      	lsls	r1, r1, #6
    bb0c:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Unable to store SDU");
    bb10:	f012 fcdf 	bl	1e4d2 <log_0>
		bt_l2cap_chan_disconnect(&chan->chan);
    bb14:	4620      	mov	r0, r4
    bb16:	f015 f8d2 	bl	20cbe <bt_l2cap_chan_disconnect>
}
    bb1a:	b006      	add	sp, #24
    bb1c:	bd70      	pop	{r4, r5, r6, pc}
	seg++;
    bb1e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 *
 * @return Pointer to the user data of the buffer.
 */
static inline void *net_buf_user_data(const struct net_buf *buf)
{
	return (void *)buf->user_data;
    bb22:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    bb26:	3301      	adds	r3, #1
	memcpy(net_buf_user_data(chan->_sdu), &seg, sizeof(seg));
    bb28:	2202      	movs	r2, #2
    bb2a:	f10d 0116 	add.w	r1, sp, #22
    bb2e:	3014      	adds	r0, #20
	seg++;
    bb30:	f8ad 3016 	strh.w	r3, [sp, #22]
	memcpy(net_buf_user_data(chan->_sdu), &seg, sizeof(seg));
    bb34:	f014 f99f 	bl	1fe76 <memcpy>
	len = net_buf_append_bytes(chan->_sdu, buf->len, buf->data, K_NO_WAIT,
    bb38:	4b3a      	ldr	r3, [pc, #232]	; (bc24 <l2cap_chan_le_recv_seg+0x15c>)
    bb3a:	9302      	str	r3, [sp, #8]
    bb3c:	2200      	movs	r2, #0
    bb3e:	2300      	movs	r3, #0
    bb40:	e9cd 2300 	strd	r2, r3, [sp]
    bb44:	9403      	str	r4, [sp, #12]
    bb46:	68aa      	ldr	r2, [r5, #8]
    bb48:	89a9      	ldrh	r1, [r5, #12]
    bb4a:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    bb4e:	f016 fd84 	bl	2265a <net_buf_append_bytes>
	if (len != buf->len) {
    bb52:	89ab      	ldrh	r3, [r5, #12]
    bb54:	b280      	uxth	r0, r0
    bb56:	4283      	cmp	r3, r0
    bb58:	d008      	beq.n	bb6c <l2cap_chan_le_recv_seg+0xa4>
    bb5a:	492f      	ldr	r1, [pc, #188]	; (bc18 <l2cap_chan_le_recv_seg+0x150>)
    bb5c:	4b2f      	ldr	r3, [pc, #188]	; (bc1c <l2cap_chan_le_recv_seg+0x154>)
		BT_ERR("Unable to store SDU");
    bb5e:	4832      	ldr	r0, [pc, #200]	; (bc28 <l2cap_chan_le_recv_seg+0x160>)
    bb60:	1ac9      	subs	r1, r1, r3
    bb62:	08c9      	lsrs	r1, r1, #3
    bb64:	0189      	lsls	r1, r1, #6
    bb66:	f041 0101 	orr.w	r1, r1, #1
    bb6a:	e7d1      	b.n	bb10 <l2cap_chan_le_recv_seg+0x48>
	if (net_buf_frags_len(chan->_sdu) < chan->_sdu_len) {
    bb6c:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
    bb70:	4630      	mov	r0, r6
    bb72:	f014 fd81 	bl	20678 <net_buf_frags_len>
    bb76:	f8b4 3094 	ldrh.w	r3, [r4, #148]	; 0x94
    bb7a:	4298      	cmp	r0, r3
    bb7c:	d225      	bcs.n	bbca <l2cap_chan_le_recv_seg+0x102>
		if (!atomic_get(&chan->rx.credits) &&
    bb7e:	f104 0358 	add.w	r3, r4, #88	; 0x58
    bb82:	4618      	mov	r0, r3
    bb84:	f014 fdc8 	bl	20718 <atomic_get>
    bb88:	2800      	cmp	r0, #0
    bb8a:	d1c6      	bne.n	bb1a <l2cap_chan_le_recv_seg+0x52>
    bb8c:	f8b4 1056 	ldrh.w	r1, [r4, #86]	; 0x56
    bb90:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    bb94:	4291      	cmp	r1, r2
    bb96:	d1c0      	bne.n	bb1a <l2cap_chan_le_recv_seg+0x52>
	atomic_val_t old_credits = atomic_get(&chan->rx.credits);
    bb98:	4618      	mov	r0, r3
    bb9a:	f014 fdbd 	bl	20718 <atomic_get>
    bb9e:	4606      	mov	r6, r0
	credits = ((chan->_sdu_len - net_buf_frags_len(buf)) +
    bba0:	4628      	mov	r0, r5
    bba2:	f014 fd69 	bl	20678 <net_buf_frags_len>
    bba6:	f8b4 1054 	ldrh.w	r1, [r4, #84]	; 0x54
    bbaa:	f8b4 3094 	ldrh.w	r3, [r4, #148]	; 0x94
    bbae:	440b      	add	r3, r1
    bbb0:	3b01      	subs	r3, #1
    bbb2:	1a1b      	subs	r3, r3, r0
		   (chan->rx.mps - 1)) / chan->rx.mps;
    bbb4:	fbb3 f1f1 	udiv	r1, r3, r1
	if (credits < old_credits) {
    bbb8:	b28b      	uxth	r3, r1
    bbba:	429e      	cmp	r6, r3
    bbbc:	dcad      	bgt.n	bb1a <l2cap_chan_le_recv_seg+0x52>
	credits -= old_credits;
    bbbe:	1b89      	subs	r1, r1, r6
	l2cap_chan_send_credits(chan, buf, credits);
    bbc0:	b289      	uxth	r1, r1
    bbc2:	4620      	mov	r0, r4
    bbc4:	f7ff fe08 	bl	b7d8 <l2cap_chan_send_credits.isra.0>
    bbc8:	e7a7      	b.n	bb1a <l2cap_chan_le_recv_seg+0x52>
	chan->_sdu = NULL;
    bbca:	2300      	movs	r3, #0
    bbcc:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
	chan->_sdu_len = 0U;
    bbd0:	f8a4 3094 	strh.w	r3, [r4, #148]	; 0x94
	err = chan->chan.ops->recv(&chan->chan, buf);
    bbd4:	6863      	ldr	r3, [r4, #4]
	l2cap_chan_le_recv_sdu(chan, buf, seg);
    bbd6:	f8bd 5016 	ldrh.w	r5, [sp, #22]
	err = chan->chan.ops->recv(&chan->chan, buf);
    bbda:	691b      	ldr	r3, [r3, #16]
    bbdc:	4631      	mov	r1, r6
    bbde:	4620      	mov	r0, r4
    bbe0:	4798      	blx	r3
	if (err < 0) {
    bbe2:	1e01      	subs	r1, r0, #0
    bbe4:	da13      	bge.n	bc0e <l2cap_chan_le_recv_seg+0x146>
		if (err != -EINPROGRESS) {
    bbe6:	f111 0f44 	cmn.w	r1, #68	; 0x44
    bbea:	d096      	beq.n	bb1a <l2cap_chan_le_recv_seg+0x52>
    bbec:	4b0b      	ldr	r3, [pc, #44]	; (bc1c <l2cap_chan_le_recv_seg+0x154>)
    bbee:	4a0a      	ldr	r2, [pc, #40]	; (bc18 <l2cap_chan_le_recv_seg+0x150>)
			BT_ERR("err %d", err);
    bbf0:	480e      	ldr	r0, [pc, #56]	; (bc2c <l2cap_chan_le_recv_seg+0x164>)
    bbf2:	1ad2      	subs	r2, r2, r3
    bbf4:	08d2      	lsrs	r2, r2, #3
    bbf6:	0192      	lsls	r2, r2, #6
    bbf8:	f042 0201 	orr.w	r2, r2, #1
    bbfc:	f012 fc76 	bl	1e4ec <log_1>
			bt_l2cap_chan_disconnect(&chan->chan);
    bc00:	4620      	mov	r0, r4
    bc02:	f015 f85c 	bl	20cbe <bt_l2cap_chan_disconnect>
	net_buf_unref(buf);
    bc06:	4630      	mov	r0, r6
    bc08:	f00f ff6a 	bl	1bae0 <net_buf_unref>
    bc0c:	e785      	b.n	bb1a <l2cap_chan_le_recv_seg+0x52>
	l2cap_chan_send_credits(chan, buf, seg);
    bc0e:	4629      	mov	r1, r5
    bc10:	4620      	mov	r0, r4
    bc12:	f7ff fde1 	bl	b7d8 <l2cap_chan_send_credits.isra.0>
    bc16:	e7f6      	b.n	bc06 <l2cap_chan_le_recv_seg+0x13e>
    bc18:	000237c8 	.word	0x000237c8
    bc1c:	000236f0 	.word	0x000236f0
    bc20:	00026373 	.word	0x00026373
    bc24:	00020705 	.word	0x00020705
    bc28:	00026387 	.word	0x00026387
    bc2c:	0002639b 	.word	0x0002639b

0000bc30 <l2cap_chan_le_recv>:
{
    bc30:	b570      	push	{r4, r5, r6, lr}
	if (!test_and_dec(&chan->rx.credits)) {
    bc32:	f100 0358 	add.w	r3, r0, #88	; 0x58
{
    bc36:	4604      	mov	r4, r0
    bc38:	460d      	mov	r5, r1
		old_value = atomic_get(target);
    bc3a:	4618      	mov	r0, r3
    bc3c:	f014 fd6c 	bl	20718 <atomic_get>
		if (!old_value) {
    bc40:	2800      	cmp	r0, #0
    bc42:	d05b      	beq.n	bcfc <l2cap_chan_le_recv+0xcc>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    bc44:	f3bf 8f5b 	dmb	ish
		new_value = old_value - 1;
    bc48:	1e42      	subs	r2, r0, #1
    bc4a:	e853 1f00 	ldrex	r1, [r3]
    bc4e:	4281      	cmp	r1, r0
    bc50:	d103      	bne.n	bc5a <l2cap_chan_le_recv+0x2a>
    bc52:	e843 2600 	strex	r6, r2, [r3]
    bc56:	2e00      	cmp	r6, #0
    bc58:	d1f7      	bne.n	bc4a <l2cap_chan_le_recv+0x1a>
    bc5a:	f3bf 8f5b 	dmb	ish
	} while (atomic_cas(target, old_value, new_value) == 0);
    bc5e:	d1ec      	bne.n	bc3a <l2cap_chan_le_recv+0xa>
	if (chan->_sdu) {
    bc60:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    bc64:	bb33      	cbnz	r3, bcb4 <l2cap_chan_le_recv+0x84>
	sdu_len = net_buf_pull_le16(buf);
    bc66:	f105 0008 	add.w	r0, r5, #8
    bc6a:	f016 fce2 	bl	22632 <net_buf_simple_pull_le16>
	if (sdu_len > chan->rx.mtu) {
    bc6e:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
    bc72:	4283      	cmp	r3, r0
	sdu_len = net_buf_pull_le16(buf);
    bc74:	4606      	mov	r6, r0
	if (sdu_len > chan->rx.mtu) {
    bc76:	d20a      	bcs.n	bc8e <l2cap_chan_le_recv+0x5e>
    bc78:	4925      	ldr	r1, [pc, #148]	; (bd10 <l2cap_chan_le_recv+0xe0>)
    bc7a:	4b26      	ldr	r3, [pc, #152]	; (bd14 <l2cap_chan_le_recv+0xe4>)
		BT_ERR("Invalid SDU length");
    bc7c:	4826      	ldr	r0, [pc, #152]	; (bd18 <l2cap_chan_le_recv+0xe8>)
    bc7e:	1ac9      	subs	r1, r1, r3
    bc80:	08c9      	lsrs	r1, r1, #3
    bc82:	0189      	lsls	r1, r1, #6
    bc84:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("No credits to receive packet");
    bc88:	f012 fc23 	bl	1e4d2 <log_0>
    bc8c:	e02b      	b.n	bce6 <l2cap_chan_le_recv+0xb6>
	if (chan->chan.ops->alloc_buf) {
    bc8e:	6863      	ldr	r3, [r4, #4]
    bc90:	68da      	ldr	r2, [r3, #12]
    bc92:	b1aa      	cbz	r2, bcc0 <l2cap_chan_le_recv+0x90>
		chan->_sdu = chan->chan.ops->alloc_buf(&chan->chan);
    bc94:	4620      	mov	r0, r4
    bc96:	4790      	blx	r2
    bc98:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
		if (!chan->_sdu) {
    bc9c:	b940      	cbnz	r0, bcb0 <l2cap_chan_le_recv+0x80>
    bc9e:	491c      	ldr	r1, [pc, #112]	; (bd10 <l2cap_chan_le_recv+0xe0>)
    bca0:	4b1c      	ldr	r3, [pc, #112]	; (bd14 <l2cap_chan_le_recv+0xe4>)
			BT_ERR("Unable to allocate buffer for SDU");
    bca2:	481e      	ldr	r0, [pc, #120]	; (bd1c <l2cap_chan_le_recv+0xec>)
    bca4:	1ac9      	subs	r1, r1, r3
    bca6:	08c9      	lsrs	r1, r1, #3
    bca8:	0189      	lsls	r1, r1, #6
    bcaa:	f041 0101 	orr.w	r1, r1, #1
    bcae:	e7eb      	b.n	bc88 <l2cap_chan_le_recv+0x58>
		chan->_sdu_len = sdu_len;
    bcb0:	f8a4 6094 	strh.w	r6, [r4, #148]	; 0x94
		l2cap_chan_le_recv_seg(chan, buf);
    bcb4:	4629      	mov	r1, r5
    bcb6:	4620      	mov	r0, r4
}
    bcb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		l2cap_chan_le_recv_seg(chan, buf);
    bcbc:	f7ff bf04 	b.w	bac8 <l2cap_chan_le_recv_seg>
	err = chan->chan.ops->recv(&chan->chan, buf);
    bcc0:	4629      	mov	r1, r5
    bcc2:	691b      	ldr	r3, [r3, #16]
    bcc4:	4620      	mov	r0, r4
    bcc6:	4798      	blx	r3
	if (err) {
    bcc8:	4601      	mov	r1, r0
    bcca:	b188      	cbz	r0, bcf0 <l2cap_chan_le_recv+0xc0>
		if (err != -EINPROGRESS) {
    bccc:	f110 0f44 	cmn.w	r0, #68	; 0x44
    bcd0:	d01d      	beq.n	bd0e <l2cap_chan_le_recv+0xde>
    bcd2:	4a0f      	ldr	r2, [pc, #60]	; (bd10 <l2cap_chan_le_recv+0xe0>)
    bcd4:	4b0f      	ldr	r3, [pc, #60]	; (bd14 <l2cap_chan_le_recv+0xe4>)
			BT_ERR("err %d", err);
    bcd6:	4812      	ldr	r0, [pc, #72]	; (bd20 <l2cap_chan_le_recv+0xf0>)
    bcd8:	1ad2      	subs	r2, r2, r3
    bcda:	08d2      	lsrs	r2, r2, #3
    bcdc:	0192      	lsls	r2, r2, #6
    bcde:	f042 0201 	orr.w	r2, r2, #1
    bce2:	f012 fc03 	bl	1e4ec <log_1>
		bt_l2cap_chan_disconnect(&chan->chan);
    bce6:	4620      	mov	r0, r4
}
    bce8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_l2cap_chan_disconnect(&chan->chan);
    bcec:	f014 bfe7 	b.w	20cbe <bt_l2cap_chan_disconnect>
	l2cap_chan_send_credits(chan, buf, 1);
    bcf0:	4620      	mov	r0, r4
    bcf2:	2101      	movs	r1, #1
}
    bcf4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	l2cap_chan_send_credits(chan, buf, 1);
    bcf8:	f7ff bd6e 	b.w	b7d8 <l2cap_chan_send_credits.isra.0>
    bcfc:	4904      	ldr	r1, [pc, #16]	; (bd10 <l2cap_chan_le_recv+0xe0>)
    bcfe:	4b05      	ldr	r3, [pc, #20]	; (bd14 <l2cap_chan_le_recv+0xe4>)
		BT_ERR("No credits to receive packet");
    bd00:	4808      	ldr	r0, [pc, #32]	; (bd24 <l2cap_chan_le_recv+0xf4>)
    bd02:	1ac9      	subs	r1, r1, r3
    bd04:	08c9      	lsrs	r1, r1, #3
    bd06:	0189      	lsls	r1, r1, #6
    bd08:	f041 0101 	orr.w	r1, r1, #1
    bd0c:	e7bc      	b.n	bc88 <l2cap_chan_le_recv+0x58>
}
    bd0e:	bd70      	pop	{r4, r5, r6, pc}
    bd10:	000237c8 	.word	0x000237c8
    bd14:	000236f0 	.word	0x000236f0
    bd18:	000263a2 	.word	0x000263a2
    bd1c:	000263b5 	.word	0x000263b5
    bd20:	0002639b 	.word	0x0002639b
    bd24:	000263d7 	.word	0x000263d7

0000bd28 <bt_l2cap_recv>:
{
    bd28:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
    bd2a:	898b      	ldrh	r3, [r1, #12]
    bd2c:	2b03      	cmp	r3, #3
{
    bd2e:	4605      	mov	r5, r0
    bd30:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
    bd32:	d80a      	bhi.n	bd4a <bt_l2cap_recv+0x22>
    bd34:	492e      	ldr	r1, [pc, #184]	; (bdf0 <bt_l2cap_recv+0xc8>)
    bd36:	4b2f      	ldr	r3, [pc, #188]	; (bdf4 <bt_l2cap_recv+0xcc>)
		BT_ERR("Too small L2CAP PDU received");
    bd38:	482f      	ldr	r0, [pc, #188]	; (bdf8 <bt_l2cap_recv+0xd0>)
    bd3a:	1ac9      	subs	r1, r1, r3
    bd3c:	08c9      	lsrs	r1, r1, #3
    bd3e:	0189      	lsls	r1, r1, #6
    bd40:	f041 0101 	orr.w	r1, r1, #1
		BT_WARN("Ignoring data received while channel has shutdown");
    bd44:	f012 fbc5 	bl	1e4d2 <log_0>
		net_buf_unref(buf);
    bd48:	e014      	b.n	bd74 <bt_l2cap_recv+0x4c>
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    bd4a:	2104      	movs	r1, #4
    bd4c:	f104 0008 	add.w	r0, r4, #8
    bd50:	f016 fc5f 	bl	22612 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
    bd54:	8841      	ldrh	r1, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
    bd56:	4628      	mov	r0, r5
    bd58:	f014 ff7f 	bl	20c5a <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    bd5c:	4605      	mov	r5, r0
    bd5e:	b970      	cbnz	r0, bd7e <bt_l2cap_recv+0x56>
    bd60:	4a23      	ldr	r2, [pc, #140]	; (bdf0 <bt_l2cap_recv+0xc8>)
    bd62:	4b24      	ldr	r3, [pc, #144]	; (bdf4 <bt_l2cap_recv+0xcc>)
		BT_WARN("Ignoring data for unknown CID 0x%04x", cid);
    bd64:	4825      	ldr	r0, [pc, #148]	; (bdfc <bt_l2cap_recv+0xd4>)
    bd66:	1ad2      	subs	r2, r2, r3
    bd68:	08d2      	lsrs	r2, r2, #3
    bd6a:	0192      	lsls	r2, r2, #6
    bd6c:	f042 0202 	orr.w	r2, r2, #2
    bd70:	f012 fbbc 	bl	1e4ec <log_1>
	net_buf_unref(buf);
    bd74:	4620      	mov	r0, r4
}
    bd76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
    bd7a:	f00f beb1 	b.w	1bae0 <net_buf_unref>
	if (L2CAP_LE_CID_IS_DYN(ch->rx.cid)) {
    bd7e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
    bd82:	3b40      	subs	r3, #64	; 0x40
    bd84:	2b3f      	cmp	r3, #63	; 0x3f
    bd86:	d82e      	bhi.n	bde6 <bt_l2cap_recv+0xbe>
	if (chan->chan.state == BT_L2CAP_DISCONNECT) {
    bd88:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
    bd8c:	2b04      	cmp	r3, #4
    bd8e:	d108      	bne.n	bda2 <bt_l2cap_recv+0x7a>
    bd90:	4917      	ldr	r1, [pc, #92]	; (bdf0 <bt_l2cap_recv+0xc8>)
    bd92:	4b18      	ldr	r3, [pc, #96]	; (bdf4 <bt_l2cap_recv+0xcc>)
		BT_WARN("Ignoring data received while disconnecting");
    bd94:	481a      	ldr	r0, [pc, #104]	; (be00 <bt_l2cap_recv+0xd8>)
    bd96:	1ac9      	subs	r1, r1, r3
    bd98:	08c9      	lsrs	r1, r1, #3
    bd9a:	0189      	lsls	r1, r1, #6
    bd9c:	f041 0102 	orr.w	r1, r1, #2
    bda0:	e7d0      	b.n	bd44 <bt_l2cap_recv+0x1c>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    bda2:	3040      	adds	r0, #64	; 0x40
    bda4:	f014 fcb8 	bl	20718 <atomic_get>
	if (atomic_test_bit(chan->chan.status, BT_L2CAP_STATUS_SHUTDOWN)) {
    bda8:	0783      	lsls	r3, r0, #30
    bdaa:	d508      	bpl.n	bdbe <bt_l2cap_recv+0x96>
    bdac:	4910      	ldr	r1, [pc, #64]	; (bdf0 <bt_l2cap_recv+0xc8>)
    bdae:	4b11      	ldr	r3, [pc, #68]	; (bdf4 <bt_l2cap_recv+0xcc>)
		BT_WARN("Ignoring data received while channel has shutdown");
    bdb0:	4814      	ldr	r0, [pc, #80]	; (be04 <bt_l2cap_recv+0xdc>)
    bdb2:	1ac9      	subs	r1, r1, r3
    bdb4:	08c9      	lsrs	r1, r1, #3
    bdb6:	0189      	lsls	r1, r1, #6
    bdb8:	f041 0102 	orr.w	r1, r1, #2
    bdbc:	e7c2      	b.n	bd44 <bt_l2cap_recv+0x1c>
	if (!L2CAP_LE_PSM_IS_DYN(chan->chan.psm)) {
    bdbe:	f8b5 3046 	ldrh.w	r3, [r5, #70]	; 0x46
    bdc2:	3b80      	subs	r3, #128	; 0x80
    bdc4:	2b7f      	cmp	r3, #127	; 0x7f
		l2cap_chan_le_recv(chan, buf);
    bdc6:	4621      	mov	r1, r4
	if (!L2CAP_LE_PSM_IS_DYN(chan->chan.psm)) {
    bdc8:	d903      	bls.n	bdd2 <bt_l2cap_recv+0xaa>
		l2cap_chan_le_recv(chan, buf);
    bdca:	4628      	mov	r0, r5
    bdcc:	f7ff ff30 	bl	bc30 <l2cap_chan_le_recv>
		net_buf_unref(buf);
    bdd0:	e7d0      	b.n	bd74 <bt_l2cap_recv+0x4c>
	net_buf_put(&chan->rx_queue, buf);
    bdd2:	f105 00a4 	add.w	r0, r5, #164	; 0xa4
    bdd6:	f016 fba0 	bl	2251a <net_buf_put>
	k_work_submit_to_queue(&k_sys_work_q, work);
    bdda:	f105 0098 	add.w	r0, r5, #152	; 0x98
}
    bdde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    bde2:	f7ff bbbd 	b.w	b560 <k_work_submit_to_queue.constprop.0>
	chan->ops->recv(chan, buf);
    bde6:	6843      	ldr	r3, [r0, #4]
    bde8:	4621      	mov	r1, r4
    bdea:	691b      	ldr	r3, [r3, #16]
    bdec:	4798      	blx	r3
    bdee:	e7c1      	b.n	bd74 <bt_l2cap_recv+0x4c>
    bdf0:	000237c8 	.word	0x000237c8
    bdf4:	000236f0 	.word	0x000236f0
    bdf8:	000263f4 	.word	0x000263f4
    bdfc:	00026411 	.word	0x00026411
    be00:	00026436 	.word	0x00026436
    be04:	00026461 	.word	0x00026461

0000be08 <l2cap_recv>:
{
    be08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (buf->len < sizeof(*hdr)) {
    be0c:	898b      	ldrh	r3, [r1, #12]
    be0e:	2b03      	cmp	r3, #3
{
    be10:	b091      	sub	sp, #68	; 0x44
    be12:	4606      	mov	r6, r0
    be14:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    be16:	d80a      	bhi.n	be2e <l2cap_recv+0x26>
    be18:	49b3      	ldr	r1, [pc, #716]	; (c0e8 <l2cap_recv+0x2e0>)
    be1a:	4bb4      	ldr	r3, [pc, #720]	; (c0ec <l2cap_recv+0x2e4>)
		BT_ERR("Too small L2CAP signaling PDU");
    be1c:	48b4      	ldr	r0, [pc, #720]	; (c0f0 <l2cap_recv+0x2e8>)
    be1e:	1ac9      	subs	r1, r1, r3
    be20:	08c9      	lsrs	r1, r1, #3
    be22:	0189      	lsls	r1, r1, #6
    be24:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Too small ecred reconf req packet size");
    be28:	f012 fb53 	bl	1e4d2 <log_0>
		return;
    be2c:	e014      	b.n	be58 <l2cap_recv+0x50>
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    be2e:	f101 0908 	add.w	r9, r1, #8
    be32:	4648      	mov	r0, r9
    be34:	2104      	movs	r1, #4
    be36:	f016 fbec 	bl	22612 <net_buf_simple_pull_mem>
	if (buf->len != len) {
    be3a:	89a9      	ldrh	r1, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
    be3c:	8842      	ldrh	r2, [r0, #2]
	if (buf->len != len) {
    be3e:	428a      	cmp	r2, r1
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    be40:	4607      	mov	r7, r0
	if (buf->len != len) {
    be42:	d00d      	beq.n	be60 <l2cap_recv+0x58>
    be44:	48a9      	ldr	r0, [pc, #676]	; (c0ec <l2cap_recv+0x2e4>)
    be46:	4ba8      	ldr	r3, [pc, #672]	; (c0e8 <l2cap_recv+0x2e0>)
    be48:	1a1b      	subs	r3, r3, r0
    be4a:	08db      	lsrs	r3, r3, #3
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
    be4c:	019b      	lsls	r3, r3, #6
    be4e:	48a9      	ldr	r0, [pc, #676]	; (c0f4 <l2cap_recv+0x2ec>)
    be50:	f043 0301 	orr.w	r3, r3, #1
    be54:	f012 fb5e 	bl	1e514 <log_2>
}
    be58:	2000      	movs	r0, #0
    be5a:	b011      	add	sp, #68	; 0x44
    be5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!hdr->ident) {
    be60:	7844      	ldrb	r4, [r0, #1]
    be62:	b944      	cbnz	r4, be76 <l2cap_recv+0x6e>
    be64:	49a0      	ldr	r1, [pc, #640]	; (c0e8 <l2cap_recv+0x2e0>)
    be66:	4ba1      	ldr	r3, [pc, #644]	; (c0ec <l2cap_recv+0x2e4>)
		BT_ERR("Invalid ident value in L2CAP PDU");
    be68:	48a3      	ldr	r0, [pc, #652]	; (c0f8 <l2cap_recv+0x2f0>)
    be6a:	1ac9      	subs	r1, r1, r3
    be6c:	08c9      	lsrs	r1, r1, #3
    be6e:	0189      	lsls	r1, r1, #6
    be70:	f041 0101 	orr.w	r1, r1, #1
    be74:	e7d8      	b.n	be28 <l2cap_recv+0x20>
	switch (hdr->code) {
    be76:	7803      	ldrb	r3, [r0, #0]
    be78:	1e5a      	subs	r2, r3, #1
    be7a:	2a18      	cmp	r2, #24
    be7c:	f200 8383 	bhi.w	c586 <l2cap_recv+0x77e>
    be80:	e8df f012 	tbh	[pc, r2, lsl #1]
    be84:	03810188 	.word	0x03810188
    be88:	03810381 	.word	0x03810381
    be8c:	00ec0381 	.word	0x00ec0381
    be90:	03810127 	.word	0x03810127
    be94:	03810381 	.word	0x03810381
    be98:	03810381 	.word	0x03810381
    be9c:	03810381 	.word	0x03810381
    bea0:	03810381 	.word	0x03810381
    bea4:	03310381 	.word	0x03310381
    bea8:	00240019 	.word	0x00240019
    beac:	01500089 	.word	0x01500089
    beb0:	0242018e 	.word	0x0242018e
    beb4:	02e0      	.short	0x02e0
	if (buf->len < sizeof(*rsp)) {
    beb6:	2901      	cmp	r1, #1
    beb8:	d8ce      	bhi.n	be58 <l2cap_recv+0x50>
    beba:	498b      	ldr	r1, [pc, #556]	; (c0e8 <l2cap_recv+0x2e0>)
    bebc:	4b8b      	ldr	r3, [pc, #556]	; (c0ec <l2cap_recv+0x2e4>)
		BT_ERR("Too small LE conn param rsp");
    bebe:	488f      	ldr	r0, [pc, #572]	; (c0fc <l2cap_recv+0x2f4>)
    bec0:	1ac9      	subs	r1, r1, r3
    bec2:	08c9      	lsrs	r1, r1, #3
    bec4:	0189      	lsls	r1, r1, #6
    bec6:	f041 0101 	orr.w	r1, r1, #1
    beca:	e7ad      	b.n	be28 <l2cap_recv+0x20>
	if (buf->len < sizeof(*req)) {
    becc:	2909      	cmp	r1, #9
    bece:	d808      	bhi.n	bee2 <l2cap_recv+0xda>
    bed0:	4985      	ldr	r1, [pc, #532]	; (c0e8 <l2cap_recv+0x2e0>)
    bed2:	4b86      	ldr	r3, [pc, #536]	; (c0ec <l2cap_recv+0x2e4>)
		BT_ERR("Too small LE conn req packet size");
    bed4:	488a      	ldr	r0, [pc, #552]	; (c100 <l2cap_recv+0x2f8>)
    bed6:	1ac9      	subs	r1, r1, r3
    bed8:	08c9      	lsrs	r1, r1, #3
    beda:	0189      	lsls	r1, r1, #6
    bedc:	f041 0101 	orr.w	r1, r1, #1
    bee0:	e7a2      	b.n	be28 <l2cap_recv+0x20>
	struct bt_l2cap_le_conn_req *req = (void *)buf->data;
    bee2:	68ab      	ldr	r3, [r5, #8]
	mtu = sys_le16_to_cpu(req->mtu);
    bee4:	f8b3 b004 	ldrh.w	fp, [r3, #4]
	if (mtu < L2CAP_LE_MIN_MTU || mps < L2CAP_LE_MIN_MTU) {
    bee8:	f1bb 0f16 	cmp.w	fp, #22
    beec:	d902      	bls.n	bef4 <l2cap_recv+0xec>
	mps = sys_le16_to_cpu(req->mps);
    beee:	88df      	ldrh	r7, [r3, #6]
	if (mtu < L2CAP_LE_MIN_MTU || mps < L2CAP_LE_MIN_MTU) {
    bef0:	2f16      	cmp	r7, #22
    bef2:	d808      	bhi.n	bf06 <l2cap_recv+0xfe>
    bef4:	497c      	ldr	r1, [pc, #496]	; (c0e8 <l2cap_recv+0x2e0>)
    bef6:	4b7d      	ldr	r3, [pc, #500]	; (c0ec <l2cap_recv+0x2e4>)
		BT_ERR("Invalid LE-Conn Req params");
    bef8:	4882      	ldr	r0, [pc, #520]	; (c104 <l2cap_recv+0x2fc>)
    befa:	1ac9      	subs	r1, r1, r3
    befc:	08c9      	lsrs	r1, r1, #3
    befe:	0189      	lsls	r1, r1, #6
    bf00:	f041 0101 	orr.w	r1, r1, #1
    bf04:	e790      	b.n	be28 <l2cap_recv+0x20>
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_LE_CONN_RSP, ident,
    bf06:	220a      	movs	r2, #10
    bf08:	4621      	mov	r1, r4
    bf0a:	2015      	movs	r0, #21
		le_conn_req(l2cap, hdr->ident, buf);
    bf0c:	6836      	ldr	r6, [r6, #0]
	psm = sys_le16_to_cpu(req->psm);
    bf0e:	f8b3 a000 	ldrh.w	sl, [r3]
	scid = sys_le16_to_cpu(req->scid);
    bf12:	f8b3 8002 	ldrh.w	r8, [r3, #2]
	credits = sys_le16_to_cpu(req->credits);
    bf16:	f8b3 9008 	ldrh.w	r9, [r3, #8]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_LE_CONN_RSP, ident,
    bf1a:	f7ff fad1 	bl	b4c0 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
    bf1e:	4605      	mov	r5, r0
    bf20:	2800      	cmp	r0, #0
    bf22:	d099      	beq.n	be58 <l2cap_recv+0x50>
	rsp = net_buf_add(buf, sizeof(*rsp));
    bf24:	210a      	movs	r1, #10
    bf26:	3008      	adds	r0, #8
    bf28:	f016 fb36 	bl	22598 <net_buf_simple_add>
	(void)memset(rsp, 0, sizeof(*rsp));
    bf2c:	2100      	movs	r1, #0
    bf2e:	220a      	movs	r2, #10
	rsp = net_buf_add(buf, sizeof(*rsp));
    bf30:	4604      	mov	r4, r0
	(void)memset(rsp, 0, sizeof(*rsp));
    bf32:	f013 ffcb 	bl	1fecc <memset>
	server = l2cap_server_lookup_psm(psm);
    bf36:	4650      	mov	r0, sl
    bf38:	f7ff fa84 	bl	b444 <l2cap_server_lookup_psm>
	if (!server) {
    bf3c:	4601      	mov	r1, r0
    bf3e:	b928      	cbnz	r0, bf4c <l2cap_recv+0x144>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_LE_ERR_PSM_NOT_SUPP);
    bf40:	2302      	movs	r3, #2
    bf42:	7223      	strb	r3, [r4, #8]
    bf44:	7260      	strb	r0, [r4, #9]
	bt_l2cap_send(conn, BT_L2CAP_CID_LE_SIG, buf);
    bf46:	4629      	mov	r1, r5
	bt_l2cap_send(conn, BT_L2CAP_CID_LE_SIG, buf);
    bf48:	4630      	mov	r0, r6
    bf4a:	e0bf      	b.n	c0cc <l2cap_recv+0x2c4>
	if (conn->sec_level < server->sec_level) {
    bf4c:	7a72      	ldrb	r2, [r6, #9]
    bf4e:	7883      	ldrb	r3, [r0, #2]
    bf50:	429a      	cmp	r2, r3
    bf52:	d204      	bcs.n	bf5e <l2cap_recv+0x156>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_LE_ERR_AUTHENTICATION);
    bf54:	2305      	movs	r3, #5
    bf56:	7223      	strb	r3, [r4, #8]
    bf58:	2300      	movs	r3, #0
    bf5a:	7263      	strb	r3, [r4, #9]
		goto rsp;
    bf5c:	e7f3      	b.n	bf46 <l2cap_recv+0x13e>
	result = l2cap_chan_accept(conn, server, scid, mtu, mps, credits,
    bf5e:	ab0b      	add	r3, sp, #44	; 0x2c
    bf60:	e9cd 9301 	strd	r9, r3, [sp, #4]
    bf64:	9700      	str	r7, [sp, #0]
    bf66:	465b      	mov	r3, fp
    bf68:	4642      	mov	r2, r8
    bf6a:	4630      	mov	r0, r6
    bf6c:	f7ff fd3e 	bl	b9ec <l2cap_chan_accept>
	if (result != BT_L2CAP_LE_SUCCESS) {
    bf70:	b108      	cbz	r0, bf76 <l2cap_recv+0x16e>
		rsp->result = sys_cpu_to_le16(result);
    bf72:	8120      	strh	r0, [r4, #8]
		goto rsp;
    bf74:	e7e7      	b.n	bf46 <l2cap_recv+0x13e>
	ch = BT_L2CAP_LE_CHAN(chan);
    bf76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	rsp->dcid = sys_cpu_to_le16(ch->rx.cid);
    bf78:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
    bf7c:	8022      	strh	r2, [r4, #0]
	rsp->mps = sys_cpu_to_le16(ch->rx.mps);
    bf7e:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
    bf82:	80a2      	strh	r2, [r4, #4]
	rsp->mtu = sys_cpu_to_le16(ch->rx.mtu);
    bf84:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
	rsp->credits = sys_cpu_to_le16(ch->rx.init_credits);
    bf88:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
	rsp->mtu = sys_cpu_to_le16(ch->rx.mtu);
    bf8c:	8062      	strh	r2, [r4, #2]
	rsp->credits = sys_cpu_to_le16(ch->rx.init_credits);
    bf8e:	80e3      	strh	r3, [r4, #6]
	rsp->result = BT_L2CAP_LE_SUCCESS;
    bf90:	7220      	strb	r0, [r4, #8]
    bf92:	7260      	strb	r0, [r4, #9]
    bf94:	e7d7      	b.n	bf46 <l2cap_recv+0x13e>
	if (buf->len < sizeof(*rsp)) {
    bf96:	2909      	cmp	r1, #9
    bf98:	d808      	bhi.n	bfac <l2cap_recv+0x1a4>
    bf9a:	4953      	ldr	r1, [pc, #332]	; (c0e8 <l2cap_recv+0x2e0>)
    bf9c:	4b53      	ldr	r3, [pc, #332]	; (c0ec <l2cap_recv+0x2e4>)
		BT_ERR("Too small LE conn rsp packet size");
    bf9e:	485a      	ldr	r0, [pc, #360]	; (c108 <l2cap_recv+0x300>)
    bfa0:	1ac9      	subs	r1, r1, r3
    bfa2:	08c9      	lsrs	r1, r1, #3
    bfa4:	0189      	lsls	r1, r1, #6
    bfa6:	f041 0101 	orr.w	r1, r1, #1
    bfaa:	e73d      	b.n	be28 <l2cap_recv+0x20>
	struct bt_l2cap_le_conn_rsp *rsp = (void *)buf->data;
    bfac:	68ab      	ldr	r3, [r5, #8]
		le_conn_rsp(l2cap, hdr->ident, buf);
    bfae:	6837      	ldr	r7, [r6, #0]
	result = sys_le16_to_cpu(rsp->result);
    bfb0:	891e      	ldrh	r6, [r3, #8]
	dcid = sys_le16_to_cpu(rsp->dcid);
    bfb2:	f8b3 b000 	ldrh.w	fp, [r3]
	mtu = sys_le16_to_cpu(rsp->mtu);
    bfb6:	f8b3 a002 	ldrh.w	sl, [r3, #2]
	mps = sys_le16_to_cpu(rsp->mps);
    bfba:	f8b3 9004 	ldrh.w	r9, [r3, #4]
	credits = sys_le16_to_cpu(rsp->credits);
    bfbe:	f8b3 8006 	ldrh.w	r8, [r3, #6]
	if (result == BT_L2CAP_LE_SUCCESS ||
    bfc2:	f026 0308 	bic.w	r3, r6, #8
    bfc6:	b2a1      	uxth	r1, r4
    bfc8:	b10b      	cbz	r3, bfce <l2cap_recv+0x1c6>
    bfca:	2e05      	cmp	r6, #5
    bfcc:	d111      	bne.n	bff2 <l2cap_recv+0x1ea>
		chan = l2cap_lookup_ident(conn, ident);
    bfce:	2200      	movs	r2, #0
		chan = l2cap_remove_ident(conn, ident);
    bfd0:	4638      	mov	r0, r7
    bfd2:	f014 fb59 	bl	20688 <__l2cap_lookup_ident>
    bfd6:	4605      	mov	r5, r0
	if (!chan) {
    bfd8:	b968      	cbnz	r0, bff6 <l2cap_recv+0x1ee>
    bfda:	4b44      	ldr	r3, [pc, #272]	; (c0ec <l2cap_recv+0x2e4>)
    bfdc:	4a42      	ldr	r2, [pc, #264]	; (c0e8 <l2cap_recv+0x2e0>)
		BT_ERR("Cannot find channel for ident %u", ident);
    bfde:	484b      	ldr	r0, [pc, #300]	; (c10c <l2cap_recv+0x304>)
    bfe0:	1ad2      	subs	r2, r2, r3
    bfe2:	08d2      	lsrs	r2, r2, #3
    bfe4:	0192      	lsls	r2, r2, #6
    bfe6:	f042 0201 	orr.w	r2, r2, #1
    bfea:	4621      	mov	r1, r4
    bfec:	f012 fa7e 	bl	1e4ec <log_1>
		return;
    bff0:	e732      	b.n	be58 <l2cap_recv+0x50>
		chan = l2cap_remove_ident(conn, ident);
    bff2:	2201      	movs	r2, #1
    bff4:	e7ec      	b.n	bfd0 <l2cap_recv+0x1c8>
	k_delayed_work_cancel(&chan->chan.rtx_work);
    bff6:	3010      	adds	r0, #16
    bff8:	f017 f886 	bl	23108 <k_delayed_work_cancel>
	chan->chan.ident = 0U;
    bffc:	2300      	movs	r3, #0
	switch (result) {
    bffe:	2e05      	cmp	r6, #5
	chan->chan.ident = 0U;
    c000:	f885 3048 	strb.w	r3, [r5, #72]	; 0x48
	switch (result) {
    c004:	d01b      	beq.n	c03e <l2cap_recv+0x236>
    c006:	2e08      	cmp	r6, #8
    c008:	d019      	beq.n	c03e <l2cap_recv+0x236>
    c00a:	bb1e      	cbnz	r6, c054 <l2cap_recv+0x24c>
	chan->state = state;
    c00c:	2303      	movs	r3, #3
    c00e:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
		if (chan->chan.ops->connected) {
    c012:	686b      	ldr	r3, [r5, #4]
		chan->tx.cid = dcid;
    c014:	f8a5 b05c 	strh.w	fp, [r5, #92]	; 0x5c
		if (chan->chan.ops->connected) {
    c018:	681b      	ldr	r3, [r3, #0]
		chan->tx.mtu = mtu;
    c01a:	f8a5 a05e 	strh.w	sl, [r5, #94]	; 0x5e
		chan->tx.mps = mps;
    c01e:	f8a5 9060 	strh.w	r9, [r5, #96]	; 0x60
		if (chan->chan.ops->connected) {
    c022:	b10b      	cbz	r3, c028 <l2cap_recv+0x220>
			chan->chan.ops->connected(&chan->chan);
    c024:	4628      	mov	r0, r5
    c026:	4798      	blx	r3
		l2cap_chan_tx_give_credits(chan, credits);
    c028:	4641      	mov	r1, r8
    c02a:	4628      	mov	r0, r5
    c02c:	f014 fbe1 	bl	207f2 <l2cap_chan_tx_give_credits>
	atomic_add(&chan->rx.credits, credits);
    c030:	f8b5 1056 	ldrh.w	r1, [r5, #86]	; 0x56
    c034:	f105 0058 	add.w	r0, r5, #88	; 0x58
    c038:	f014 fb74 	bl	20724 <atomic_add>
}
    c03c:	e70c      	b.n	be58 <l2cap_recv+0x50>
		if (l2cap_change_security(chan, result) == 0) {
    c03e:	4631      	mov	r1, r6
    c040:	4628      	mov	r0, r5
    c042:	f014 fbf3 	bl	2082c <l2cap_change_security>
    c046:	2800      	cmp	r0, #0
    c048:	f43f af06 	beq.w	be58 <l2cap_recv+0x50>
		bt_l2cap_chan_remove(conn, &chan->chan);
    c04c:	4629      	mov	r1, r5
    c04e:	4638      	mov	r0, r7
    c050:	f014 fc4b 	bl	208ea <bt_l2cap_chan_remove>
		bt_l2cap_chan_del(&chan->chan);
    c054:	4628      	mov	r0, r5
	bt_l2cap_chan_del(&chan->chan);
    c056:	f014 fc61 	bl	2091c <bt_l2cap_chan_del>
    c05a:	e6fd      	b.n	be58 <l2cap_recv+0x50>
	if (buf->len < sizeof(*req)) {
    c05c:	2903      	cmp	r1, #3
    c05e:	f67f af37 	bls.w	bed0 <l2cap_recv+0xc8>
		le_disconn_req(l2cap, hdr->ident, buf);
    c062:	6837      	ldr	r7, [r6, #0]
	struct bt_l2cap_disconn_req *req = (void *)buf->data;
    c064:	68ae      	ldr	r6, [r5, #8]
	chan = l2cap_remove_rx_cid(conn, dcid);
    c066:	4638      	mov	r0, r7
    c068:	8831      	ldrh	r1, [r6, #0]
    c06a:	f014 fb2a 	bl	206c2 <l2cap_remove_rx_cid>
	if (!chan) {
    c06e:	4605      	mov	r5, r0
    c070:	b9a0      	cbnz	r0, c09c <l2cap_recv+0x294>
		data.scid = req->scid;
    c072:	78f2      	ldrb	r2, [r6, #3]
    c074:	78b3      	ldrb	r3, [r6, #2]
    c076:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    c07a:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
		data.dcid = req->dcid;
    c07e:	7872      	ldrb	r2, [r6, #1]
    c080:	7833      	ldrb	r3, [r6, #0]
    c082:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    c086:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_INVALID_CID, &data,
    c08a:	2304      	movs	r3, #4
    c08c:	9300      	str	r3, [sp, #0]
    c08e:	2202      	movs	r2, #2
    c090:	ab0b      	add	r3, sp, #44	; 0x2c
    c092:	4621      	mov	r1, r4
    c094:	4638      	mov	r0, r7
		l2cap_send_reject(chan->conn, hdr->ident,
    c096:	f014 fcfa 	bl	20a8e <l2cap_send_reject>
		break;
    c09a:	e6dd      	b.n	be58 <l2cap_recv+0x50>
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_DISCONN_RSP, ident,
    c09c:	4621      	mov	r1, r4
    c09e:	2204      	movs	r2, #4
    c0a0:	2007      	movs	r0, #7
    c0a2:	f7ff fa0d 	bl	b4c0 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
    c0a6:	4604      	mov	r4, r0
    c0a8:	2800      	cmp	r0, #0
    c0aa:	f43f aed5 	beq.w	be58 <l2cap_recv+0x50>
	rsp = net_buf_add(buf, sizeof(*rsp));
    c0ae:	2104      	movs	r1, #4
    c0b0:	3008      	adds	r0, #8
    c0b2:	f016 fa71 	bl	22598 <net_buf_simple_add>
	rsp->dcid = sys_cpu_to_le16(chan->rx.cid);
    c0b6:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
    c0ba:	8003      	strh	r3, [r0, #0]
	rsp->scid = sys_cpu_to_le16(chan->tx.cid);
    c0bc:	f8b5 305c 	ldrh.w	r3, [r5, #92]	; 0x5c
    c0c0:	8043      	strh	r3, [r0, #2]
	bt_l2cap_chan_del(&chan->chan);
    c0c2:	4628      	mov	r0, r5
    c0c4:	f014 fc2a 	bl	2091c <bt_l2cap_chan_del>
	bt_l2cap_send(conn, BT_L2CAP_CID_LE_SIG, buf);
    c0c8:	4621      	mov	r1, r4
    c0ca:	4638      	mov	r0, r7
	bt_l2cap_send(conn, BT_L2CAP_CID_LE_SIG, buf);
    c0cc:	f014 fcd5 	bl	20a7a <bt_l2cap_send.constprop.0>
    c0d0:	e6c2      	b.n	be58 <l2cap_recv+0x50>
	if (buf->len < sizeof(*rsp)) {
    c0d2:	2903      	cmp	r1, #3
    c0d4:	d81e      	bhi.n	c114 <l2cap_recv+0x30c>
    c0d6:	4904      	ldr	r1, [pc, #16]	; (c0e8 <l2cap_recv+0x2e0>)
    c0d8:	4b04      	ldr	r3, [pc, #16]	; (c0ec <l2cap_recv+0x2e4>)
		BT_ERR("Too small LE disconn rsp packet size");
    c0da:	480d      	ldr	r0, [pc, #52]	; (c110 <l2cap_recv+0x308>)
    c0dc:	1ac9      	subs	r1, r1, r3
    c0de:	08c9      	lsrs	r1, r1, #3
    c0e0:	0189      	lsls	r1, r1, #6
    c0e2:	f041 0101 	orr.w	r1, r1, #1
    c0e6:	e69f      	b.n	be28 <l2cap_recv+0x20>
    c0e8:	000237c8 	.word	0x000237c8
    c0ec:	000236f0 	.word	0x000236f0
    c0f0:	00026493 	.word	0x00026493
    c0f4:	000264b1 	.word	0x000264b1
    c0f8:	000264d2 	.word	0x000264d2
    c0fc:	000264f3 	.word	0x000264f3
    c100:	0002650f 	.word	0x0002650f
    c104:	00026531 	.word	0x00026531
    c108:	0002654c 	.word	0x0002654c
    c10c:	0002656e 	.word	0x0002656e
    c110:	0002658f 	.word	0x0002658f
	scid = sys_le16_to_cpu(rsp->scid);
    c114:	68ab      	ldr	r3, [r5, #8]
	chan = l2cap_remove_rx_cid(conn, scid);
    c116:	6830      	ldr	r0, [r6, #0]
    c118:	8859      	ldrh	r1, [r3, #2]
    c11a:	f014 fad2 	bl	206c2 <l2cap_remove_rx_cid>
	if (!chan) {
    c11e:	2800      	cmp	r0, #0
    c120:	d199      	bne.n	c056 <l2cap_recv+0x24e>
    c122:	e699      	b.n	be58 <l2cap_recv+0x50>
	if (buf->len < sizeof(*ev)) {
    c124:	2903      	cmp	r1, #3
    c126:	d808      	bhi.n	c13a <l2cap_recv+0x332>
    c128:	49b9      	ldr	r1, [pc, #740]	; (c410 <l2cap_recv+0x608>)
    c12a:	4bba      	ldr	r3, [pc, #744]	; (c414 <l2cap_recv+0x60c>)
		BT_ERR("Too small LE Credits packet size");
    c12c:	48ba      	ldr	r0, [pc, #744]	; (c418 <l2cap_recv+0x610>)
    c12e:	1ac9      	subs	r1, r1, r3
    c130:	08c9      	lsrs	r1, r1, #3
    c132:	0189      	lsls	r1, r1, #6
    c134:	f041 0101 	orr.w	r1, r1, #1
    c138:	e676      	b.n	be28 <l2cap_recv+0x20>
	struct bt_l2cap_le_credits *ev = (void *)buf->data;
    c13a:	68aa      	ldr	r2, [r5, #8]
	chan = bt_l2cap_le_lookup_tx_cid(conn, cid);
    c13c:	6830      	ldr	r0, [r6, #0]
    c13e:	8811      	ldrh	r1, [r2, #0]
    c140:	f014 fd7b 	bl	20c3a <bt_l2cap_le_lookup_tx_cid>
	if (!chan) {
    c144:	4604      	mov	r4, r0
    c146:	b940      	cbnz	r0, c15a <l2cap_recv+0x352>
    c148:	49b1      	ldr	r1, [pc, #708]	; (c410 <l2cap_recv+0x608>)
    c14a:	4bb2      	ldr	r3, [pc, #712]	; (c414 <l2cap_recv+0x60c>)
		BT_ERR("Unable to find channel of LE Credits packet");
    c14c:	48b3      	ldr	r0, [pc, #716]	; (c41c <l2cap_recv+0x614>)
    c14e:	1ac9      	subs	r1, r1, r3
    c150:	08c9      	lsrs	r1, r1, #3
    c152:	0189      	lsls	r1, r1, #6
    c154:	f041 0101 	orr.w	r1, r1, #1
    c158:	e666      	b.n	be28 <l2cap_recv+0x20>
	if (atomic_get(&ch->tx.credits) + credits > UINT16_MAX) {
    c15a:	3064      	adds	r0, #100	; 0x64
	credits = sys_le16_to_cpu(ev->credits);
    c15c:	8851      	ldrh	r1, [r2, #2]
	if (atomic_get(&ch->tx.credits) + credits > UINT16_MAX) {
    c15e:	f014 fadb 	bl	20718 <atomic_get>
    c162:	4408      	add	r0, r1
    c164:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    c168:	db0d      	blt.n	c186 <l2cap_recv+0x37e>
    c16a:	4baa      	ldr	r3, [pc, #680]	; (c414 <l2cap_recv+0x60c>)
    c16c:	49a8      	ldr	r1, [pc, #672]	; (c410 <l2cap_recv+0x608>)
		BT_ERR("Credits overflow");
    c16e:	48ac      	ldr	r0, [pc, #688]	; (c420 <l2cap_recv+0x618>)
    c170:	1ac9      	subs	r1, r1, r3
    c172:	08c9      	lsrs	r1, r1, #3
    c174:	0189      	lsls	r1, r1, #6
    c176:	f041 0101 	orr.w	r1, r1, #1
    c17a:	f012 f9aa 	bl	1e4d2 <log_0>
		bt_l2cap_chan_disconnect(chan);
    c17e:	4620      	mov	r0, r4
    c180:	f014 fd9d 	bl	20cbe <bt_l2cap_chan_disconnect>
		return;
    c184:	e668      	b.n	be58 <l2cap_recv+0x50>
	l2cap_chan_tx_give_credits(ch, credits);
    c186:	4620      	mov	r0, r4
    c188:	f014 fb33 	bl	207f2 <l2cap_chan_tx_give_credits>
	l2cap_chan_tx_resume(ch);
    c18c:	4620      	mov	r0, r4
    c18e:	f014 fb8b 	bl	208a8 <l2cap_chan_tx_resume>
    c192:	e661      	b.n	be58 <l2cap_recv+0x50>
	chan = l2cap_remove_ident(conn, ident);
    c194:	6830      	ldr	r0, [r6, #0]
    c196:	2201      	movs	r2, #1
    c198:	4621      	mov	r1, r4
    c19a:	f014 fa75 	bl	20688 <__l2cap_lookup_ident>
    c19e:	e7be      	b.n	c11e <l2cap_recv+0x316>
	if (buf->len < sizeof(*req)) {
    c1a0:	2907      	cmp	r1, #7
		le_ecred_conn_req(l2cap, hdr->ident, buf);
    c1a2:	f8d6 a000 	ldr.w	sl, [r6]
	if (buf->len < sizeof(*req)) {
    c1a6:	d811      	bhi.n	c1cc <l2cap_recv+0x3c4>
    c1a8:	4b9a      	ldr	r3, [pc, #616]	; (c414 <l2cap_recv+0x60c>)
    c1aa:	4999      	ldr	r1, [pc, #612]	; (c410 <l2cap_recv+0x608>)
		BT_ERR("Too small LE conn req packet size");
    c1ac:	489d      	ldr	r0, [pc, #628]	; (c424 <l2cap_recv+0x61c>)
    c1ae:	1ac9      	subs	r1, r1, r3
    c1b0:	08c9      	lsrs	r1, r1, #3
    c1b2:	0189      	lsls	r1, r1, #6
    c1b4:	f041 0101 	orr.w	r1, r1, #1
    c1b8:	f012 f98b 	bl	1e4d2 <log_0>
		goto response;
    c1bc:	2600      	movs	r6, #0
		result = BT_L2CAP_LE_ERR_INVALID_PARAMS;
    c1be:	f04f 0b0c 	mov.w	fp, #12
		i = buf->len / sizeof(scid);
    c1c2:	f8b5 800c 	ldrh.w	r8, [r5, #12]
    c1c6:	ea4f 0858 	mov.w	r8, r8, lsr #1
    c1ca:	e04b      	b.n	c264 <l2cap_recv+0x45c>
	req = net_buf_pull_mem(buf, sizeof(*req));
    c1cc:	2108      	movs	r1, #8
    c1ce:	4648      	mov	r0, r9
    c1d0:	f016 fa1f 	bl	22612 <net_buf_simple_pull_mem>
	mtu = sys_le16_to_cpu(req->mtu);
    c1d4:	8843      	ldrh	r3, [r0, #2]
    c1d6:	9304      	str	r3, [sp, #16]
	if (mtu < L2CAP_ECRED_MIN_MTU || mps < L2CAP_ECRED_MIN_MTU) {
    c1d8:	2b3f      	cmp	r3, #63	; 0x3f
	req = net_buf_pull_mem(buf, sizeof(*req));
    c1da:	4606      	mov	r6, r0
	if (mtu < L2CAP_ECRED_MIN_MTU || mps < L2CAP_ECRED_MIN_MTU) {
    c1dc:	d903      	bls.n	c1e6 <l2cap_recv+0x3de>
	mps = sys_le16_to_cpu(req->mps);
    c1de:	8883      	ldrh	r3, [r0, #4]
    c1e0:	9305      	str	r3, [sp, #20]
	if (mtu < L2CAP_ECRED_MIN_MTU || mps < L2CAP_ECRED_MIN_MTU) {
    c1e2:	2b3f      	cmp	r3, #63	; 0x3f
    c1e4:	d80d      	bhi.n	c202 <l2cap_recv+0x3fa>
    c1e6:	4b8b      	ldr	r3, [pc, #556]	; (c414 <l2cap_recv+0x60c>)
    c1e8:	4989      	ldr	r1, [pc, #548]	; (c410 <l2cap_recv+0x608>)
		BT_ERR("Invalid ecred conn req params");
    c1ea:	488f      	ldr	r0, [pc, #572]	; (c428 <l2cap_recv+0x620>)
    c1ec:	1ac9      	subs	r1, r1, r3
    c1ee:	08c9      	lsrs	r1, r1, #3
    c1f0:	0189      	lsls	r1, r1, #6
    c1f2:	f041 0101 	orr.w	r1, r1, #1
    c1f6:	f012 f96c 	bl	1e4d2 <log_0>
		goto response;
    c1fa:	2600      	movs	r6, #0
		result = BT_L2CAP_LE_ERR_UNACCEPT_PARAMS;
    c1fc:	f04f 0b0b 	mov.w	fp, #11
		goto response;
    c200:	e7df      	b.n	c1c2 <l2cap_recv+0x3ba>
	server = l2cap_server_lookup_psm(psm);
    c202:	8800      	ldrh	r0, [r0, #0]
    c204:	f7ff f91e 	bl	b444 <l2cap_server_lookup_psm>
	if (!server) {
    c208:	4601      	mov	r1, r0
    c20a:	2800      	cmp	r0, #0
    c20c:	d068      	beq.n	c2e0 <l2cap_recv+0x4d8>
	if (conn->sec_level < server->sec_level) {
    c20e:	f89a 2009 	ldrb.w	r2, [sl, #9]
    c212:	7883      	ldrb	r3, [r0, #2]
    c214:	429a      	cmp	r2, r3
    c216:	d367      	bcc.n	c2e8 <l2cap_recv+0x4e0>
	credits = sys_le16_to_cpu(req->credits);
    c218:	88f3      	ldrh	r3, [r6, #6]
    c21a:	9306      	str	r3, [sp, #24]
    c21c:	2700      	movs	r7, #0
	uint16_t psm, mtu, mps, credits, result = BT_L2CAP_LE_ERR_INVALID_SCID;
    c21e:	f04f 0b09 	mov.w	fp, #9
	struct bt_l2cap_le_chan *ch = NULL;
    c222:	463e      	mov	r6, r7
	while (buf->len >= sizeof(scid)) {
    c224:	89aa      	ldrh	r2, [r5, #12]
    c226:	2a01      	cmp	r2, #1
    c228:	46b8      	mov	r8, r7
    c22a:	d919      	bls.n	c260 <l2cap_recv+0x458>
		scid = net_buf_pull_le16(buf);
    c22c:	4648      	mov	r0, r9
    c22e:	9107      	str	r1, [sp, #28]
    c230:	f016 f9ff 	bl	22632 <net_buf_simple_pull_le16>
		result = l2cap_chan_accept(conn, server, scid, mtu, mps,
    c234:	ab0b      	add	r3, sp, #44	; 0x2c
    c236:	eb03 0387 	add.w	r3, r3, r7, lsl #2
    c23a:	9302      	str	r3, [sp, #8]
    c23c:	9b06      	ldr	r3, [sp, #24]
    c23e:	9301      	str	r3, [sp, #4]
    c240:	9b05      	ldr	r3, [sp, #20]
    c242:	9907      	ldr	r1, [sp, #28]
    c244:	9300      	str	r3, [sp, #0]
		scid = net_buf_pull_le16(buf);
    c246:	4602      	mov	r2, r0
		result = l2cap_chan_accept(conn, server, scid, mtu, mps,
    c248:	9b04      	ldr	r3, [sp, #16]
    c24a:	4650      	mov	r0, sl
    c24c:	f7ff fbce 	bl	b9ec <l2cap_chan_accept>
		switch (result) {
    c250:	9907      	ldr	r1, [sp, #28]
    c252:	4683      	mov	fp, r0
    c254:	b3b0      	cbz	r0, c2c4 <l2cap_recv+0x4bc>
    c256:	f1a0 0209 	sub.w	r2, r0, #9
    c25a:	b292      	uxth	r2, r2
    c25c:	2a01      	cmp	r2, #1
    c25e:	d93b      	bls.n	c2d8 <l2cap_recv+0x4d0>
	if (!i) {
    c260:	2f00      	cmp	r7, #0
    c262:	d0ae      	beq.n	c1c2 <l2cap_recv+0x3ba>
				      sizeof(*rsp) + (sizeof(scid) * i));
    c264:	f108 0204 	add.w	r2, r8, #4
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_ECRED_CONN_RSP, ident,
    c268:	0052      	lsls	r2, r2, #1
    c26a:	b292      	uxth	r2, r2
    c26c:	4621      	mov	r1, r4
    c26e:	2018      	movs	r0, #24
    c270:	f7ff f926 	bl	b4c0 <l2cap_create_le_sig_pdu.isra.0>
	rsp = net_buf_add(buf, sizeof(*rsp));
    c274:	f100 0708 	add.w	r7, r0, #8
    c278:	2108      	movs	r1, #8
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_ECRED_CONN_RSP, ident,
    c27a:	4605      	mov	r5, r0
	rsp = net_buf_add(buf, sizeof(*rsp));
    c27c:	4638      	mov	r0, r7
    c27e:	f016 f98b 	bl	22598 <net_buf_simple_add>
	(void)memset(rsp, 0, sizeof(*rsp));
    c282:	2208      	movs	r2, #8
    c284:	2100      	movs	r1, #0
	rsp = net_buf_add(buf, sizeof(*rsp));
    c286:	4604      	mov	r4, r0
	(void)memset(rsp, 0, sizeof(*rsp));
    c288:	f013 fe20 	bl	1fecc <memset>
	if (result == BT_L2CAP_LE_ERR_UNACCEPT_PARAMS ||
    c28c:	f1ab 0102 	sub.w	r1, fp, #2
    c290:	b28a      	uxth	r2, r1
    c292:	2a09      	cmp	r2, #9
    c294:	ea4f 0848 	mov.w	r8, r8, lsl #1
    c298:	d82a      	bhi.n	c2f0 <l2cap_recv+0x4e8>
    c29a:	f240 2109 	movw	r1, #521	; 0x209
    c29e:	40d1      	lsrs	r1, r2
    c2a0:	43c9      	mvns	r1, r1
    c2a2:	f011 0101 	ands.w	r1, r1, #1
    c2a6:	d123      	bne.n	c2f0 <l2cap_recv+0x4e8>
		memset(dcid, 0, sizeof(scid) * i);
    c2a8:	4642      	mov	r2, r8
    c2aa:	a808      	add	r0, sp, #32
    c2ac:	f013 fe0e 	bl	1fecc <memset>
	net_buf_add_mem(buf, dcid, sizeof(scid) * i);
    c2b0:	a908      	add	r1, sp, #32
    c2b2:	4642      	mov	r2, r8
    c2b4:	4638      	mov	r0, r7
    c2b6:	f016 f975 	bl	225a4 <net_buf_simple_add_mem>
	rsp->result = sys_cpu_to_le16(result);
    c2ba:	f8a4 b006 	strh.w	fp, [r4, #6]
	bt_l2cap_send(conn, BT_L2CAP_CID_LE_SIG, buf);
    c2be:	4629      	mov	r1, r5
    c2c0:	4650      	mov	r0, sl
    c2c2:	e703      	b.n	c0cc <l2cap_recv+0x2c4>
			ch = BT_L2CAP_LE_CHAN(chan[i]);
    c2c4:	ab0b      	add	r3, sp, #44	; 0x2c
    c2c6:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
			dcid[i++] = sys_cpu_to_le16(ch->rx.cid);
    c2ca:	f8b6 2050 	ldrh.w	r2, [r6, #80]	; 0x50
    c2ce:	ab08      	add	r3, sp, #32
			dcid[i++] = 0x0000;
    c2d0:	f823 2017 	strh.w	r2, [r3, r7, lsl #1]
			continue;
    c2d4:	3701      	adds	r7, #1
    c2d6:	e7a5      	b.n	c224 <l2cap_recv+0x41c>
			dcid[i++] = 0x0000;
    c2d8:	ab08      	add	r3, sp, #32
    c2da:	f04f 0200 	mov.w	r2, #0
    c2de:	e7f7      	b.n	c2d0 <l2cap_recv+0x4c8>
    c2e0:	4606      	mov	r6, r0
		result = BT_L2CAP_LE_ERR_PSM_NOT_SUPP;
    c2e2:	f04f 0b02 	mov.w	fp, #2
    c2e6:	e76c      	b.n	c1c2 <l2cap_recv+0x3ba>
    c2e8:	2600      	movs	r6, #0
		result = BT_L2CAP_LE_ERR_AUTHENTICATION;
    c2ea:	f04f 0b05 	mov.w	fp, #5
    c2ee:	e768      	b.n	c1c2 <l2cap_recv+0x3ba>
	} else if (ch) {
    c2f0:	2e00      	cmp	r6, #0
    c2f2:	d0dd      	beq.n	c2b0 <l2cap_recv+0x4a8>
		rsp->mps = sys_cpu_to_le16(ch->rx.mps);
    c2f4:	f8b6 2054 	ldrh.w	r2, [r6, #84]	; 0x54
    c2f8:	8062      	strh	r2, [r4, #2]
		rsp->mtu = sys_cpu_to_le16(ch->rx.mtu);
    c2fa:	f8b6 2052 	ldrh.w	r2, [r6, #82]	; 0x52
    c2fe:	8022      	strh	r2, [r4, #0]
		rsp->credits = sys_cpu_to_le16(ch->rx.init_credits);
    c300:	f8b6 2056 	ldrh.w	r2, [r6, #86]	; 0x56
    c304:	80a2      	strh	r2, [r4, #4]
    c306:	e7d3      	b.n	c2b0 <l2cap_recv+0x4a8>
	if (buf->len < sizeof(*rsp)) {
    c308:	2907      	cmp	r1, #7
    c30a:	d808      	bhi.n	c31e <l2cap_recv+0x516>
    c30c:	4940      	ldr	r1, [pc, #256]	; (c410 <l2cap_recv+0x608>)
    c30e:	4b41      	ldr	r3, [pc, #260]	; (c414 <l2cap_recv+0x60c>)
		BT_ERR("Too small ecred conn rsp packet size");
    c310:	4846      	ldr	r0, [pc, #280]	; (c42c <l2cap_recv+0x624>)
    c312:	1ac9      	subs	r1, r1, r3
    c314:	08c9      	lsrs	r1, r1, #3
    c316:	0189      	lsls	r1, r1, #6
    c318:	f041 0101 	orr.w	r1, r1, #1
    c31c:	e584      	b.n	be28 <l2cap_recv+0x20>
	rsp = net_buf_pull_mem(buf, sizeof(*rsp));
    c31e:	2108      	movs	r1, #8
    c320:	4648      	mov	r0, r9
		le_ecred_conn_rsp(l2cap, hdr->ident, buf);
    c322:	6836      	ldr	r6, [r6, #0]
	rsp = net_buf_pull_mem(buf, sizeof(*rsp));
    c324:	f016 f975 	bl	22612 <net_buf_simple_pull_mem>
	result = sys_le16_to_cpu(rsp->result);
    c328:	88c7      	ldrh	r7, [r0, #6]
	switch (result) {
    c32a:	b2a4      	uxth	r4, r4
    c32c:	2f0a      	cmp	r7, #10
    c32e:	f200 8081 	bhi.w	c434 <l2cap_recv+0x62c>
    c332:	e8df f007 	tbb	[pc, r7]
    c336:	7f06      	.short	0x7f06
    c338:	39067f7f 	.word	0x39067f7f
    c33c:	06397f7f 	.word	0x06397f7f
    c340:	06          	.byte	0x06
    c341:	00          	.byte	0x00
	mtu = sys_le16_to_cpu(rsp->mtu);
    c342:	8807      	ldrh	r7, [r0, #0]
	mps = sys_le16_to_cpu(rsp->mps);
    c344:	f8b0 8002 	ldrh.w	r8, [r0, #2]
	credits = sys_le16_to_cpu(rsp->credits);
    c348:	f8b0 a004 	ldrh.w	sl, [r0, #4]
	chan->state = state;
    c34c:	f04f 0b03 	mov.w	fp, #3
		while ((chan = l2cap_lookup_ident(conn, ident))) {
    c350:	2200      	movs	r2, #0
    c352:	4621      	mov	r1, r4
    c354:	4630      	mov	r0, r6
    c356:	f014 f997 	bl	20688 <__l2cap_lookup_ident>
    c35a:	4605      	mov	r5, r0
    c35c:	2800      	cmp	r0, #0
    c35e:	f43f ad7b 	beq.w	be58 <l2cap_recv+0x50>
			k_delayed_work_cancel(&chan->chan.rtx_work);
    c362:	f105 0010 	add.w	r0, r5, #16
    c366:	f016 fecf 	bl	23108 <k_delayed_work_cancel>
			dcid = net_buf_pull_le16(buf);
    c36a:	4648      	mov	r0, r9
    c36c:	f016 f961 	bl	22632 <net_buf_simple_pull_le16>
			if (!dcid) {
    c370:	4601      	mov	r1, r0
    c372:	bb10      	cbnz	r0, c3ba <l2cap_recv+0x5b2>
				bt_l2cap_chan_remove(conn, &chan->chan);
    c374:	4630      	mov	r0, r6
    c376:	4629      	mov	r1, r5
    c378:	f014 fab7 	bl	208ea <bt_l2cap_chan_remove>
				bt_l2cap_chan_del(&chan->chan);
    c37c:	4628      	mov	r0, r5
    c37e:	f014 facd 	bl	2091c <bt_l2cap_chan_del>
				continue;
    c382:	e7e5      	b.n	c350 <l2cap_recv+0x548>
			k_delayed_work_cancel(&chan->chan.rtx_work);
    c384:	f105 0010 	add.w	r0, r5, #16
    c388:	f016 febe 	bl	23108 <k_delayed_work_cancel>
			if (!l2cap_change_security(chan, result)) {
    c38c:	4639      	mov	r1, r7
    c38e:	4628      	mov	r0, r5
    c390:	f014 fa4c 	bl	2082c <l2cap_change_security>
    c394:	2800      	cmp	r0, #0
    c396:	f43f ad5f 	beq.w	be58 <l2cap_recv+0x50>
			bt_l2cap_chan_remove(conn, &chan->chan);
    c39a:	4630      	mov	r0, r6
    c39c:	4629      	mov	r1, r5
    c39e:	f014 faa4 	bl	208ea <bt_l2cap_chan_remove>
			bt_l2cap_chan_del(&chan->chan);
    c3a2:	4628      	mov	r0, r5
    c3a4:	f014 faba 	bl	2091c <bt_l2cap_chan_del>
		while ((chan = l2cap_lookup_ident(conn, ident))) {
    c3a8:	2200      	movs	r2, #0
    c3aa:	4621      	mov	r1, r4
    c3ac:	4630      	mov	r0, r6
    c3ae:	f014 f96b 	bl	20688 <__l2cap_lookup_ident>
    c3b2:	4605      	mov	r5, r0
    c3b4:	2800      	cmp	r0, #0
    c3b6:	d1e5      	bne.n	c384 <l2cap_recv+0x57c>
    c3b8:	e54e      	b.n	be58 <l2cap_recv+0x50>
			c = bt_l2cap_le_lookup_tx_cid(conn, dcid);
    c3ba:	4630      	mov	r0, r6
    c3bc:	f014 fc3d 	bl	20c3a <bt_l2cap_le_lookup_tx_cid>
			if (c) {
    c3c0:	b160      	cbz	r0, c3dc <l2cap_recv+0x5d4>
    c3c2:	9004      	str	r0, [sp, #16]
				bt_l2cap_chan_remove(conn, &chan->chan);
    c3c4:	4629      	mov	r1, r5
    c3c6:	4630      	mov	r0, r6
    c3c8:	f014 fa8f 	bl	208ea <bt_l2cap_chan_remove>
				bt_l2cap_chan_del(&chan->chan);
    c3cc:	4628      	mov	r0, r5
    c3ce:	f014 faa5 	bl	2091c <bt_l2cap_chan_del>
				bt_l2cap_chan_disconnect(c);
    c3d2:	9b04      	ldr	r3, [sp, #16]
    c3d4:	4618      	mov	r0, r3
    c3d6:	f014 fc72 	bl	20cbe <bt_l2cap_chan_disconnect>
				continue;
    c3da:	e7b9      	b.n	c350 <l2cap_recv+0x548>
			if (chan->chan.ops->connected) {
    c3dc:	686b      	ldr	r3, [r5, #4]
			chan->chan.ident = 0U;
    c3de:	f885 0048 	strb.w	r0, [r5, #72]	; 0x48
	chan->state = state;
    c3e2:	f885 b044 	strb.w	fp, [r5, #68]	; 0x44
			if (chan->chan.ops->connected) {
    c3e6:	681b      	ldr	r3, [r3, #0]
			chan->tx.cid = dcid;
    c3e8:	f8a5 105c 	strh.w	r1, [r5, #92]	; 0x5c
			chan->tx.mtu = mtu;
    c3ec:	f8a5 705e 	strh.w	r7, [r5, #94]	; 0x5e
			chan->tx.mps = mps;
    c3f0:	f8a5 8060 	strh.w	r8, [r5, #96]	; 0x60
			if (chan->chan.ops->connected) {
    c3f4:	b10b      	cbz	r3, c3fa <l2cap_recv+0x5f2>
				chan->chan.ops->connected(&chan->chan);
    c3f6:	4628      	mov	r0, r5
    c3f8:	4798      	blx	r3
			l2cap_chan_tx_give_credits(chan, credits);
    c3fa:	4651      	mov	r1, sl
    c3fc:	4628      	mov	r0, r5
    c3fe:	f014 f9f8 	bl	207f2 <l2cap_chan_tx_give_credits>
	atomic_add(&chan->rx.credits, credits);
    c402:	f8b5 1056 	ldrh.w	r1, [r5, #86]	; 0x56
    c406:	f105 0058 	add.w	r0, r5, #88	; 0x58
    c40a:	f014 f98b 	bl	20724 <atomic_add>
}
    c40e:	e79f      	b.n	c350 <l2cap_recv+0x548>
    c410:	000237c8 	.word	0x000237c8
    c414:	000236f0 	.word	0x000236f0
    c418:	000265b4 	.word	0x000265b4
    c41c:	000265d5 	.word	0x000265d5
    c420:	00026601 	.word	0x00026601
    c424:	0002650f 	.word	0x0002650f
    c428:	00026612 	.word	0x00026612
    c42c:	00026630 	.word	0x00026630
			bt_l2cap_chan_del(&chan->chan);
    c430:	f014 fa74 	bl	2091c <bt_l2cap_chan_del>
		while ((chan = l2cap_remove_ident(conn, ident))) {
    c434:	2201      	movs	r2, #1
    c436:	4621      	mov	r1, r4
    c438:	4630      	mov	r0, r6
    c43a:	f014 f925 	bl	20688 <__l2cap_lookup_ident>
    c43e:	2800      	cmp	r0, #0
    c440:	d1f6      	bne.n	c430 <l2cap_recv+0x628>
    c442:	e509      	b.n	be58 <l2cap_recv+0x50>
	if (buf->len < sizeof(*req)) {
    c444:	2903      	cmp	r1, #3
    c446:	d808      	bhi.n	c45a <l2cap_recv+0x652>
    c448:	4957      	ldr	r1, [pc, #348]	; (c5a8 <l2cap_recv+0x7a0>)
    c44a:	4b58      	ldr	r3, [pc, #352]	; (c5ac <l2cap_recv+0x7a4>)
		BT_ERR("Too small ecred reconf req packet size");
    c44c:	4858      	ldr	r0, [pc, #352]	; (c5b0 <l2cap_recv+0x7a8>)
    c44e:	1ac9      	subs	r1, r1, r3
    c450:	08c9      	lsrs	r1, r1, #3
    c452:	0189      	lsls	r1, r1, #6
    c454:	f041 0101 	orr.w	r1, r1, #1
    c458:	e4e6      	b.n	be28 <l2cap_recv+0x20>
	req = net_buf_pull_mem(buf, sizeof(*req));
    c45a:	2104      	movs	r1, #4
    c45c:	4648      	mov	r0, r9
		le_ecred_reconf_req(l2cap, hdr->ident, buf);
    c45e:	6836      	ldr	r6, [r6, #0]
	req = net_buf_pull_mem(buf, sizeof(*req));
    c460:	f016 f8d7 	bl	22612 <net_buf_simple_pull_mem>
	mtu = sys_le16_to_cpu(req->mtu);
    c464:	f8b0 8000 	ldrh.w	r8, [r0]
	if (mtu < L2CAP_ECRED_MIN_MTU) {
    c468:	f1b8 0f3f 	cmp.w	r8, #63	; 0x3f
    c46c:	d904      	bls.n	c478 <l2cap_recv+0x670>
	mps = sys_le16_to_cpu(req->mps);
    c46e:	f8b0 a002 	ldrh.w	sl, [r0, #2]
	if (mps < L2CAP_ECRED_MIN_MTU) {
    c472:	f1ba 0f3f 	cmp.w	sl, #63	; 0x3f
    c476:	d825      	bhi.n	c4c4 <l2cap_recv+0x6bc>
		result = BT_L2CAP_RECONF_INVALID_MTU;
    c478:	2501      	movs	r5, #1
    c47a:	e027      	b.n	c4cc <l2cap_recv+0x6c4>
		scid = net_buf_pull_le16(buf);
    c47c:	4648      	mov	r0, r9
    c47e:	f016 f8d8 	bl	22632 <net_buf_simple_pull_le16>
		if (!scid) {
    c482:	4601      	mov	r1, r0
    c484:	b1f0      	cbz	r0, c4c4 <l2cap_recv+0x6bc>
		chan = bt_l2cap_le_lookup_tx_cid(conn, scid);
    c486:	4630      	mov	r0, r6
    c488:	f014 fbd7 	bl	20c3a <bt_l2cap_le_lookup_tx_cid>
		if (!chan) {
    c48c:	4607      	mov	r7, r0
    c48e:	b1c8      	cbz	r0, c4c4 <l2cap_recv+0x6bc>
		if (BT_L2CAP_LE_CHAN(chan)->tx.mtu > mtu) {
    c490:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
    c494:	4590      	cmp	r8, r2
    c496:	d211      	bcs.n	c4bc <l2cap_recv+0x6b4>
    c498:	4b44      	ldr	r3, [pc, #272]	; (c5ac <l2cap_recv+0x7a4>)
    c49a:	4d43      	ldr	r5, [pc, #268]	; (c5a8 <l2cap_recv+0x7a0>)
    c49c:	1aed      	subs	r5, r5, r3
    c49e:	08ed      	lsrs	r5, r5, #3
			BT_ERR("chan %p decreased MTU %u -> %u", chan,
    c4a0:	01ad      	lsls	r5, r5, #6
    c4a2:	f045 0501 	orr.w	r5, r5, #1
    c4a6:	4601      	mov	r1, r0
    c4a8:	f8ad 5000 	strh.w	r5, [sp]
    c4ac:	4841      	ldr	r0, [pc, #260]	; (c5b4 <l2cap_recv+0x7ac>)
    c4ae:	4643      	mov	r3, r8
    c4b0:	f012 f849 	bl	1e546 <log_3>
			bt_l2cap_chan_disconnect(chan);
    c4b4:	4638      	mov	r0, r7
    c4b6:	f014 fc02 	bl	20cbe <bt_l2cap_chan_disconnect>
			goto response;
    c4ba:	e7dd      	b.n	c478 <l2cap_recv+0x670>
		BT_L2CAP_LE_CHAN(chan)->tx.mtu = mtu;
    c4bc:	f8a0 805e 	strh.w	r8, [r0, #94]	; 0x5e
		BT_L2CAP_LE_CHAN(chan)->tx.mps = mps;
    c4c0:	f8a0 a060 	strh.w	sl, [r0, #96]	; 0x60
	while (buf->len >= sizeof(scid)) {
    c4c4:	89ab      	ldrh	r3, [r5, #12]
    c4c6:	2b01      	cmp	r3, #1
    c4c8:	d8d8      	bhi.n	c47c <l2cap_recv+0x674>
	result = BT_L2CAP_RECONF_SUCCESS;
    c4ca:	2500      	movs	r5, #0
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_ECRED_RECONF_RSP, ident,
    c4cc:	4621      	mov	r1, r4
    c4ce:	2202      	movs	r2, #2
    c4d0:	201a      	movs	r0, #26
    c4d2:	f7fe fff5 	bl	b4c0 <l2cap_create_le_sig_pdu.isra.0>
	rsp = net_buf_add(buf, sizeof(*rsp));
    c4d6:	2102      	movs	r1, #2
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_ECRED_RECONF_RSP, ident,
    c4d8:	4604      	mov	r4, r0
	rsp = net_buf_add(buf, sizeof(*rsp));
    c4da:	3008      	adds	r0, #8
    c4dc:	f016 f85c 	bl	22598 <net_buf_simple_add>
	bt_l2cap_send(conn, BT_L2CAP_CID_LE_SIG, buf);
    c4e0:	4621      	mov	r1, r4
	rsp->result = sys_cpu_to_le16(result);
    c4e2:	8005      	strh	r5, [r0, #0]
	bt_l2cap_send(conn, BT_L2CAP_CID_LE_SIG, buf);
    c4e4:	e530      	b.n	bf48 <l2cap_recv+0x140>
	if (buf->len < sizeof(*req)) {
    c4e6:	2907      	cmp	r1, #7
    c4e8:	d808      	bhi.n	c4fc <l2cap_recv+0x6f4>
    c4ea:	492f      	ldr	r1, [pc, #188]	; (c5a8 <l2cap_recv+0x7a0>)
    c4ec:	4b2f      	ldr	r3, [pc, #188]	; (c5ac <l2cap_recv+0x7a4>)
		BT_ERR("Too small LE conn update param req");
    c4ee:	4832      	ldr	r0, [pc, #200]	; (c5b8 <l2cap_recv+0x7b0>)
    c4f0:	1ac9      	subs	r1, r1, r3
    c4f2:	08c9      	lsrs	r1, r1, #3
    c4f4:	0189      	lsls	r1, r1, #6
    c4f6:	f041 0101 	orr.w	r1, r1, #1
    c4fa:	e495      	b.n	be28 <l2cap_recv+0x20>
			le_conn_param_update_req(l2cap, hdr->ident, buf);
    c4fc:	6836      	ldr	r6, [r6, #0]
	if (conn->role != BT_HCI_ROLE_MASTER) {
    c4fe:	78f3      	ldrb	r3, [r6, #3]
    c500:	b12b      	cbz	r3, c50e <l2cap_recv+0x706>
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_NOT_UNDERSTOOD,
    c502:	2300      	movs	r3, #0
    c504:	9300      	str	r3, [sp, #0]
    c506:	461a      	mov	r2, r3
    c508:	4621      	mov	r1, r4
    c50a:	4630      	mov	r0, r6
    c50c:	e5c3      	b.n	c096 <l2cap_recv+0x28e>
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
    c50e:	68ab      	ldr	r3, [r5, #8]
	param.interval_min = sys_le16_to_cpu(req->min_interval);
    c510:	7859      	ldrb	r1, [r3, #1]
    c512:	781a      	ldrb	r2, [r3, #0]
    c514:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    c518:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
	param.interval_max = sys_le16_to_cpu(req->max_interval);
    c51c:	78d9      	ldrb	r1, [r3, #3]
    c51e:	789a      	ldrb	r2, [r3, #2]
    c520:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    c524:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
	param.latency = sys_le16_to_cpu(req->latency);
    c528:	7959      	ldrb	r1, [r3, #5]
    c52a:	791a      	ldrb	r2, [r3, #4]
    c52c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    c530:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
	param.timeout = sys_le16_to_cpu(req->timeout);
    c534:	799a      	ldrb	r2, [r3, #6]
    c536:	79db      	ldrb	r3, [r3, #7]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    c538:	4621      	mov	r1, r4
	param.timeout = sys_le16_to_cpu(req->timeout);
    c53a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    c53e:	2013      	movs	r0, #19
    c540:	2202      	movs	r2, #2
	param.timeout = sys_le16_to_cpu(req->timeout);
    c542:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    c546:	f7fe ffbb 	bl	b4c0 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
    c54a:	4604      	mov	r4, r0
    c54c:	2800      	cmp	r0, #0
    c54e:	f43f ac83 	beq.w	be58 <l2cap_recv+0x50>
	accepted = le_param_req(conn, &param);
    c552:	a90b      	add	r1, sp, #44	; 0x2c
    c554:	4630      	mov	r0, r6
    c556:	f7fe f8f1 	bl	a73c <le_param_req>
	rsp = net_buf_add(buf, sizeof(*rsp));
    c55a:	2102      	movs	r1, #2
	accepted = le_param_req(conn, &param);
    c55c:	4605      	mov	r5, r0
	rsp = net_buf_add(buf, sizeof(*rsp));
    c55e:	f104 0008 	add.w	r0, r4, #8
    c562:	f016 f819 	bl	22598 <net_buf_simple_add>
	if (accepted) {
    c566:	f085 0301 	eor.w	r3, r5, #1
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
    c56a:	b2db      	uxtb	r3, r3
    c56c:	8003      	strh	r3, [r0, #0]
	bt_l2cap_send(conn, BT_L2CAP_CID_LE_SIG, buf);
    c56e:	4621      	mov	r1, r4
    c570:	4630      	mov	r0, r6
    c572:	f014 fa82 	bl	20a7a <bt_l2cap_send.constprop.0>
	if (accepted) {
    c576:	2d00      	cmp	r5, #0
    c578:	f43f ac6e 	beq.w	be58 <l2cap_recv+0x50>
		bt_conn_le_conn_update(conn, &param);
    c57c:	a90b      	add	r1, sp, #44	; 0x2c
    c57e:	4630      	mov	r0, r6
    c580:	f014 f842 	bl	20608 <bt_conn_le_conn_update>
    c584:	e468      	b.n	be58 <l2cap_recv+0x50>
    c586:	4909      	ldr	r1, [pc, #36]	; (c5ac <l2cap_recv+0x7a4>)
    c588:	4a07      	ldr	r2, [pc, #28]	; (c5a8 <l2cap_recv+0x7a0>)
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
    c58a:	480c      	ldr	r0, [pc, #48]	; (c5bc <l2cap_recv+0x7b4>)
    c58c:	1a52      	subs	r2, r2, r1
    c58e:	08d2      	lsrs	r2, r2, #3
    c590:	0192      	lsls	r2, r2, #6
    c592:	4619      	mov	r1, r3
    c594:	f042 0202 	orr.w	r2, r2, #2
    c598:	f011 ffa8 	bl	1e4ec <log_1>
		l2cap_send_reject(chan->conn, hdr->ident,
    c59c:	2300      	movs	r3, #0
    c59e:	7879      	ldrb	r1, [r7, #1]
    c5a0:	9300      	str	r3, [sp, #0]
    c5a2:	6830      	ldr	r0, [r6, #0]
    c5a4:	461a      	mov	r2, r3
    c5a6:	e576      	b.n	c096 <l2cap_recv+0x28e>
    c5a8:	000237c8 	.word	0x000237c8
    c5ac:	000236f0 	.word	0x000236f0
    c5b0:	00026655 	.word	0x00026655
    c5b4:	0002667c 	.word	0x0002667c
    c5b8:	0002669b 	.word	0x0002669b
    c5bc:	000266be 	.word	0x000266be

0000c5c0 <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
    c5c0:	4b02      	ldr	r3, [pc, #8]	; (c5cc <att_cfm_sent+0xc>)
    c5c2:	f8c1 3128 	str.w	r3, [r1, #296]	; 0x128

	att_sent(conn, user_data);
    c5c6:	f014 bbe7 	b.w	20d98 <att_sent>
    c5ca:	bf00      	nop
    c5cc:	00021037 	.word	0x00021037

0000c5d0 <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
    c5d0:	4b02      	ldr	r3, [pc, #8]	; (c5dc <att_rsp_sent+0xc>)
    c5d2:	f8c1 3128 	str.w	r3, [r1, #296]	; 0x128

	att_sent(conn, user_data);
    c5d6:	f014 bbdf 	b.w	20d98 <att_sent>
    c5da:	bf00      	nop
    c5dc:	00021053 	.word	0x00021053

0000c5e0 <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
    c5e0:	4b02      	ldr	r3, [pc, #8]	; (c5ec <att_req_sent+0xc>)
    c5e2:	f8c1 3128 	str.w	r3, [r1, #296]	; 0x128

	att_sent(conn, user_data);
    c5e6:	f014 bbd7 	b.w	20d98 <att_sent>
    c5ea:	bf00      	nop
    c5ec:	0000c939 	.word	0x0000c939

0000c5f0 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
    c5f0:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
    c5f2:	3808      	subs	r0, #8
    c5f4:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
    c5f6:	a901      	add	r1, sp, #4
    c5f8:	4802      	ldr	r0, [pc, #8]	; (c604 <bt_att_released+0x14>)
    c5fa:	f010 fc3b 	bl	1ce74 <k_mem_slab_free>
}
    c5fe:	b003      	add	sp, #12
    c600:	f85d fb04 	ldr.w	pc, [sp], #4
    c604:	200007b4 	.word	0x200007b4

0000c608 <read_group_cb>:
{
    c608:	b5f0      	push	{r4, r5, r6, r7, lr}
    c60a:	b085      	sub	sp, #20
	struct bt_att_chan *chan = data->chan;
    c60c:	680e      	ldr	r6, [r1, #0]
{
    c60e:	4605      	mov	r5, r0
    c610:	460c      	mov	r4, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    c612:	2700      	movs	r7, #0
    c614:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    c618:	6800      	ldr	r0, [r0, #0]
    c61a:	f88d 7008 	strb.w	r7, [sp, #8]
    c61e:	a902      	add	r1, sp, #8
    c620:	f8ad 300a 	strh.w	r3, [sp, #10]
    c624:	f013 fcf6 	bl	20014 <bt_uuid_cmp>
    c628:	b1a0      	cbz	r0, c654 <read_group_cb+0x4c>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    c62a:	f642 0301 	movw	r3, #10241	; 0x2801
    c62e:	6828      	ldr	r0, [r5, #0]
    c630:	f88d 700c 	strb.w	r7, [sp, #12]
    c634:	a903      	add	r1, sp, #12
    c636:	f8ad 300e 	strh.w	r3, [sp, #14]
    c63a:	f013 fceb 	bl	20014 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    c63e:	b148      	cbz	r0, c654 <read_group_cb+0x4c>
		if (data->group &&
    c640:	6923      	ldr	r3, [r4, #16]
    c642:	b123      	cbz	r3, c64e <read_group_cb+0x46>
		    attr->handle > sys_le16_to_cpu(data->group->end_handle)) {
    c644:	8a2a      	ldrh	r2, [r5, #16]
		if (data->group &&
    c646:	8859      	ldrh	r1, [r3, #2]
    c648:	4291      	cmp	r1, r2
    c64a:	d200      	bcs.n	c64e <read_group_cb+0x46>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    c64c:	805a      	strh	r2, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    c64e:	2001      	movs	r0, #1
}
    c650:	b005      	add	sp, #20
    c652:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    c654:	6861      	ldr	r1, [r4, #4]
    c656:	6828      	ldr	r0, [r5, #0]
    c658:	f013 fcdc 	bl	20014 <bt_uuid_cmp>
    c65c:	b110      	cbz	r0, c664 <read_group_cb+0x5c>
		data->group = NULL;
    c65e:	2300      	movs	r3, #0
    c660:	6123      	str	r3, [r4, #16]
    c662:	e7f4      	b.n	c64e <read_group_cb+0x46>
	if (data->rsp->len &&
    c664:	68e3      	ldr	r3, [r4, #12]
    c666:	68a0      	ldr	r0, [r4, #8]
    c668:	781a      	ldrb	r2, [r3, #0]
    c66a:	b13a      	cbz	r2, c67c <read_group_cb+0x74>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
    c66c:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
    c670:	8981      	ldrh	r1, [r0, #12]
    c672:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
    c674:	4293      	cmp	r3, r2
    c676:	da01      	bge.n	c67c <read_group_cb+0x74>
		return BT_GATT_ITER_STOP;
    c678:	2000      	movs	r0, #0
    c67a:	e7e9      	b.n	c650 <read_group_cb+0x48>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    c67c:	2104      	movs	r1, #4
    c67e:	3008      	adds	r0, #8
    c680:	f015 ff8a 	bl	22598 <net_buf_simple_add>
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    c684:	8a2b      	ldrh	r3, [r5, #16]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    c686:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    c688:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    c68a:	8043      	strh	r3, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    c68c:	4b07      	ldr	r3, [pc, #28]	; (c6ac <read_group_cb+0xa4>)
    c68e:	9300      	str	r3, [sp, #0]
    c690:	68a2      	ldr	r2, [r4, #8]
    c692:	9401      	str	r4, [sp, #4]
    c694:	2300      	movs	r3, #0
    c696:	4629      	mov	r1, r5
    c698:	4630      	mov	r0, r6
    c69a:	f014 fc31 	bl	20f00 <att_chan_read>
	if (read < 0) {
    c69e:	2800      	cmp	r0, #0
    c6a0:	dbea      	blt.n	c678 <read_group_cb+0x70>
	if (!data->group) {
    c6a2:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
    c6a4:	3800      	subs	r0, #0
    c6a6:	bf18      	it	ne
    c6a8:	2001      	movne	r0, #1
    c6aa:	e7d1      	b.n	c650 <read_group_cb+0x48>
    c6ac:	00021017 	.word	0x00021017

0000c6b0 <read_type_cb>:
{
    c6b0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
    c6b4:	f8d1 8000 	ldr.w	r8, [r1]
{
    c6b8:	4606      	mov	r6, r0
    c6ba:	460c      	mov	r4, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    c6bc:	6800      	ldr	r0, [r0, #0]
    c6be:	6849      	ldr	r1, [r1, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
    c6c0:	f8d8 5008 	ldr.w	r5, [r8, #8]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    c6c4:	f013 fca6 	bl	20014 <bt_uuid_cmp>
    c6c8:	4607      	mov	r7, r0
    c6ca:	2800      	cmp	r0, #0
    c6cc:	d13e      	bne.n	c74c <read_type_cb+0x9c>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    c6ce:	4628      	mov	r0, r5
    c6d0:	2215      	movs	r2, #21
    c6d2:	4631      	mov	r1, r6
    c6d4:	f015 f9b2 	bl	21a3c <bt_gatt_check_perm>
    c6d8:	4605      	mov	r5, r0
    c6da:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    c6dc:	b148      	cbz	r0, c6f2 <read_type_cb+0x42>
		if (data->rsp->len) {
    c6de:	68e3      	ldr	r3, [r4, #12]
    c6e0:	781b      	ldrb	r3, [r3, #0]
    c6e2:	b923      	cbnz	r3, c6ee <read_type_cb+0x3e>
		return BT_GATT_ITER_STOP;
    c6e4:	2500      	movs	r5, #0
}
    c6e6:	4628      	mov	r0, r5
    c6e8:	b002      	add	sp, #8
    c6ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			data->err = 0x00;
    c6ee:	7527      	strb	r7, [r4, #20]
    c6f0:	e7f8      	b.n	c6e4 <read_type_cb+0x34>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    c6f2:	68a0      	ldr	r0, [r4, #8]
    c6f4:	f015 ff22 	bl	2253c <net_buf_frag_last>
    c6f8:	2102      	movs	r1, #2
    c6fa:	3008      	adds	r0, #8
    c6fc:	f015 ff4c 	bl	22598 <net_buf_simple_add>
	data->item->handle = sys_cpu_to_le16(attr->handle);
    c700:	8a33      	ldrh	r3, [r6, #16]
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    c702:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(attr->handle);
    c704:	8003      	strh	r3, [r0, #0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    c706:	4b12      	ldr	r3, [pc, #72]	; (c750 <read_type_cb+0xa0>)
    c708:	9300      	str	r3, [sp, #0]
    c70a:	68a2      	ldr	r2, [r4, #8]
    c70c:	9401      	str	r4, [sp, #4]
    c70e:	462b      	mov	r3, r5
    c710:	4631      	mov	r1, r6
    c712:	4640      	mov	r0, r8
    c714:	f014 fbf4 	bl	20f00 <att_chan_read>
	if (read < 0) {
    c718:	2800      	cmp	r0, #0
    c71a:	da07      	bge.n	c72c <read_type_cb+0x7c>
	if (err < 0 && err >= -0xff) {
    c71c:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
    c720:	bf26      	itte	cs
    c722:	4240      	negcs	r0, r0
    c724:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
    c726:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
    c728:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
    c72a:	e7dc      	b.n	c6e6 <read_type_cb+0x36>
	if (!data->item) {
    c72c:	6923      	ldr	r3, [r4, #16]
    c72e:	2b00      	cmp	r3, #0
    c730:	d0d8      	beq.n	c6e4 <read_type_cb+0x34>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    c732:	68a0      	ldr	r0, [r4, #8]
    c734:	f014 fb28 	bl	20d88 <net_buf_frags_len>
    c738:	f8b8 5066 	ldrh.w	r5, [r8, #102]	; 0x66
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    c73c:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    c73e:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    c740:	7818      	ldrb	r0, [r3, #0]
    c742:	4285      	cmp	r5, r0
    c744:	bf94      	ite	ls
    c746:	2500      	movls	r5, #0
    c748:	2501      	movhi	r5, #1
    c74a:	e7cc      	b.n	c6e6 <read_type_cb+0x36>
		return BT_GATT_ITER_CONTINUE;
    c74c:	2501      	movs	r5, #1
    c74e:	e7ca      	b.n	c6e6 <read_type_cb+0x36>
    c750:	00020da5 	.word	0x00020da5

0000c754 <find_type_cb>:
{
    c754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_att_chan *chan = data->chan;
    c758:	680f      	ldr	r7, [r1, #0]
{
    c75a:	b090      	sub	sp, #64	; 0x40
    c75c:	4606      	mov	r6, r0
    c75e:	460d      	mov	r5, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    c760:	2400      	movs	r4, #0
    c762:	f642 0301 	movw	r3, #10241	; 0x2801
    c766:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
    c768:	f8d7 8008 	ldr.w	r8, [r7, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    c76c:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
    c770:	a90b      	add	r1, sp, #44	; 0x2c
    c772:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    c776:	f013 fc4d 	bl	20014 <bt_uuid_cmp>
    c77a:	2800      	cmp	r0, #0
    c77c:	d06a      	beq.n	c854 <find_type_cb+0x100>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
    c77e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    c782:	6830      	ldr	r0, [r6, #0]
    c784:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
    c788:	a90b      	add	r1, sp, #44	; 0x2c
    c78a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    c78e:	f013 fc41 	bl	20014 <bt_uuid_cmp>
    c792:	4604      	mov	r4, r0
    c794:	b150      	cbz	r0, c7ac <find_type_cb+0x58>
		if (data->group &&
    c796:	68ab      	ldr	r3, [r5, #8]
    c798:	b123      	cbz	r3, c7a4 <find_type_cb+0x50>
		    attr->handle > sys_le16_to_cpu(data->group->end_handle)) {
    c79a:	8a32      	ldrh	r2, [r6, #16]
		if (data->group &&
    c79c:	8859      	ldrh	r1, [r3, #2]
    c79e:	4291      	cmp	r1, r2
    c7a0:	d200      	bcs.n	c7a4 <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    c7a2:	805a      	strh	r2, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
    c7a4:	2001      	movs	r0, #1
}
    c7a6:	b010      	add	sp, #64	; 0x40
    c7a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
    c7ac:	6869      	ldr	r1, [r5, #4]
    c7ae:	4608      	mov	r0, r1
    c7b0:	f014 faea 	bl	20d88 <net_buf_frags_len>
    c7b4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
    c7b8:	1a1b      	subs	r3, r3, r0
    c7ba:	2b03      	cmp	r3, #3
    c7bc:	d922      	bls.n	c804 <find_type_cb+0xb0>
	frag = net_buf_frag_last(data->buf);
    c7be:	4608      	mov	r0, r1
    c7c0:	f015 febc 	bl	2253c <net_buf_frag_last>
    c7c4:	4604      	mov	r4, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
    c7c6:	6868      	ldr	r0, [r5, #4]
    c7c8:	f014 fade 	bl	20d88 <net_buf_frags_len>
    c7cc:	f8b7 9066 	ldrh.w	r9, [r7, #102]	; 0x66
    c7d0:	f104 0a08 	add.w	sl, r4, #8
    c7d4:	eba9 0900 	sub.w	r9, r9, r0
    c7d8:	4650      	mov	r0, sl
    c7da:	f015 ff36 	bl	2264a <net_buf_simple_tailroom>
    c7de:	4581      	cmp	r9, r0
    c7e0:	d212      	bcs.n	c808 <find_type_cb+0xb4>
    c7e2:	6868      	ldr	r0, [r5, #4]
    c7e4:	f014 fad0 	bl	20d88 <net_buf_frags_len>
    c7e8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
    c7ec:	1a18      	subs	r0, r3, r0
	if (!len) {
    c7ee:	b998      	cbnz	r0, c818 <find_type_cb+0xc4>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
    c7f0:	686b      	ldr	r3, [r5, #4]
    c7f2:	7998      	ldrb	r0, [r3, #6]
    c7f4:	f00f f8b8 	bl	1b968 <net_buf_pool_get>
    c7f8:	2200      	movs	r2, #0
    c7fa:	2300      	movs	r3, #0
    c7fc:	f015 fe64 	bl	224c8 <net_buf_alloc_fixed>
		if (!frag) {
    c800:	4604      	mov	r4, r0
    c802:	b928      	cbnz	r0, c810 <find_type_cb+0xbc>
		return BT_GATT_ITER_STOP;
    c804:	4620      	mov	r0, r4
    c806:	e7ce      	b.n	c7a6 <find_type_cb+0x52>
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
    c808:	4650      	mov	r0, sl
    c80a:	f015 ff1e 	bl	2264a <net_buf_simple_tailroom>
    c80e:	e7ee      	b.n	c7ee <find_type_cb+0x9a>
		net_buf_frag_add(data->buf, frag);
    c810:	4601      	mov	r1, r0
    c812:	6868      	ldr	r0, [r5, #4]
    c814:	f015 fea3 	bl	2255e <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
    c818:	2300      	movs	r3, #0
    c81a:	6877      	ldr	r7, [r6, #4]
    c81c:	9300      	str	r3, [sp, #0]
    c81e:	aa02      	add	r2, sp, #8
    c820:	2310      	movs	r3, #16
    c822:	4631      	mov	r1, r6
    c824:	4640      	mov	r0, r8
    c826:	47b8      	blx	r7
	if (read < 0) {
    c828:	1e07      	subs	r7, r0, #0
    c82a:	db13      	blt.n	c854 <find_type_cb+0x100>
	if (read != data->value_len) {
    c82c:	7c2a      	ldrb	r2, [r5, #16]
    c82e:	68e8      	ldr	r0, [r5, #12]
    c830:	42ba      	cmp	r2, r7
    c832:	d034      	beq.n	c89e <find_type_cb+0x14a>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
    c834:	4601      	mov	r1, r0
    c836:	a80b      	add	r0, sp, #44	; 0x2c
    c838:	f013 fc16 	bl	20068 <bt_uuid_create>
    c83c:	b968      	cbnz	r0, c85a <find_type_cb+0x106>
    c83e:	4a1a      	ldr	r2, [pc, #104]	; (c8a8 <find_type_cb+0x154>)
    c840:	4b1a      	ldr	r3, [pc, #104]	; (c8ac <find_type_cb+0x158>)
			BT_WARN("Unable to create UUID: size %u", data->value_len);
    c842:	7c29      	ldrb	r1, [r5, #16]
    c844:	481a      	ldr	r0, [pc, #104]	; (c8b0 <find_type_cb+0x15c>)
    c846:	1ad2      	subs	r2, r2, r3
    c848:	08d2      	lsrs	r2, r2, #3
    c84a:	0192      	lsls	r2, r2, #6
    c84c:	f042 0202 	orr.w	r2, r2, #2
			BT_WARN("Unable to create UUID: size %d", read);
    c850:	f011 fe4c 	bl	1e4ec <log_1>
	data->group = NULL;
    c854:	2300      	movs	r3, #0
    c856:	60ab      	str	r3, [r5, #8]
    c858:	e7a4      	b.n	c7a4 <find_type_cb+0x50>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
    c85a:	b2fa      	uxtb	r2, r7
    c85c:	a902      	add	r1, sp, #8
    c85e:	a806      	add	r0, sp, #24
    c860:	f013 fc02 	bl	20068 <bt_uuid_create>
    c864:	b948      	cbnz	r0, c87a <find_type_cb+0x126>
    c866:	4a10      	ldr	r2, [pc, #64]	; (c8a8 <find_type_cb+0x154>)
    c868:	4b10      	ldr	r3, [pc, #64]	; (c8ac <find_type_cb+0x158>)
			BT_WARN("Unable to create UUID: size %d", read);
    c86a:	4812      	ldr	r0, [pc, #72]	; (c8b4 <find_type_cb+0x160>)
    c86c:	1ad2      	subs	r2, r2, r3
    c86e:	08d2      	lsrs	r2, r2, #3
    c870:	0192      	lsls	r2, r2, #6
    c872:	f042 0202 	orr.w	r2, r2, #2
    c876:	4639      	mov	r1, r7
    c878:	e7ea      	b.n	c850 <find_type_cb+0xfc>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
    c87a:	a906      	add	r1, sp, #24
    c87c:	a80b      	add	r0, sp, #44	; 0x2c
    c87e:	f013 fbc9 	bl	20014 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
    c882:	2800      	cmp	r0, #0
    c884:	d1e6      	bne.n	c854 <find_type_cb+0x100>
	data->err = 0x00;
    c886:	2300      	movs	r3, #0
    c888:	746b      	strb	r3, [r5, #17]
	data->group = net_buf_add(frag, sizeof(*data->group));
    c88a:	2104      	movs	r1, #4
    c88c:	f104 0008 	add.w	r0, r4, #8
    c890:	f015 fe82 	bl	22598 <net_buf_simple_add>
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    c894:	8a33      	ldrh	r3, [r6, #16]
	data->group = net_buf_add(frag, sizeof(*data->group));
    c896:	60a8      	str	r0, [r5, #8]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    c898:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    c89a:	8043      	strh	r3, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
    c89c:	e782      	b.n	c7a4 <find_type_cb+0x50>
	} else if (memcmp(data->value, uuid, read)) {
    c89e:	a902      	add	r1, sp, #8
    c8a0:	f013 fad9 	bl	1fe56 <memcmp>
    c8a4:	e7ed      	b.n	c882 <find_type_cb+0x12e>
    c8a6:	bf00      	nop
    c8a8:	000236f0 	.word	0x000236f0
    c8ac:	000236f0 	.word	0x000236f0
    c8b0:	000266ec 	.word	0x000266ec
    c8b4:	0002670b 	.word	0x0002670b

0000c8b8 <att_get>:
{
    c8b8:	b510      	push	{r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    c8ba:	7b43      	ldrb	r3, [r0, #13]
    c8bc:	2b06      	cmp	r3, #6
    c8be:	d00b      	beq.n	c8d8 <att_get+0x20>
    c8c0:	4918      	ldr	r1, [pc, #96]	; (c924 <att_get+0x6c>)
    c8c2:	4b19      	ldr	r3, [pc, #100]	; (c928 <att_get+0x70>)
		BT_WARN("Not connected");
    c8c4:	4819      	ldr	r0, [pc, #100]	; (c92c <att_get+0x74>)
    c8c6:	1ac9      	subs	r1, r1, r3
    c8c8:	08c9      	lsrs	r1, r1, #3
    c8ca:	0189      	lsls	r1, r1, #6
    c8cc:	f041 0102 	orr.w	r1, r1, #2
		BT_WARN("ATT channel flagged as disconnected");
    c8d0:	f011 fdff 	bl	1e4d2 <log_0>
		return NULL;
    c8d4:	2400      	movs	r4, #0
    c8d6:	e00e      	b.n	c8f6 <att_get+0x3e>
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
    c8d8:	2104      	movs	r1, #4
    c8da:	f014 f9be 	bl	20c5a <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    c8de:	4604      	mov	r4, r0
    c8e0:	b958      	cbnz	r0, c8fa <att_get+0x42>
    c8e2:	4910      	ldr	r1, [pc, #64]	; (c924 <att_get+0x6c>)
    c8e4:	4b10      	ldr	r3, [pc, #64]	; (c928 <att_get+0x70>)
		BT_ERR("Unable to find ATT channel");
    c8e6:	4812      	ldr	r0, [pc, #72]	; (c930 <att_get+0x78>)
    c8e8:	1ac9      	subs	r1, r1, r3
    c8ea:	08c9      	lsrs	r1, r1, #3
    c8ec:	0189      	lsls	r1, r1, #6
    c8ee:	f041 0101 	orr.w	r1, r1, #1
    c8f2:	f011 fdee 	bl	1e4d2 <log_0>
}
    c8f6:	4620      	mov	r0, r4
    c8f8:	bd10      	pop	{r4, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c8fa:	f3bf 8f5b 	dmb	ish
    c8fe:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
    c902:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
    c906:	075b      	lsls	r3, r3, #29
    c908:	d508      	bpl.n	c91c <att_get+0x64>
    c90a:	4906      	ldr	r1, [pc, #24]	; (c924 <att_get+0x6c>)
    c90c:	4b06      	ldr	r3, [pc, #24]	; (c928 <att_get+0x70>)
		BT_WARN("ATT channel flagged as disconnected");
    c90e:	4809      	ldr	r0, [pc, #36]	; (c934 <att_get+0x7c>)
    c910:	1ac9      	subs	r1, r1, r3
    c912:	08c9      	lsrs	r1, r1, #3
    c914:	0189      	lsls	r1, r1, #6
    c916:	f041 0102 	orr.w	r1, r1, #2
    c91a:	e7d9      	b.n	c8d0 <att_get+0x18>
	return att_chan->att;
    c91c:	f850 4c08 	ldr.w	r4, [r0, #-8]
    c920:	e7e9      	b.n	c8f6 <att_get+0x3e>
    c922:	bf00      	nop
    c924:	000236f0 	.word	0x000236f0
    c928:	000236f0 	.word	0x000236f0
    c92c:	0002672a 	.word	0x0002672a
    c930:	00026738 	.word	0x00026738
    c934:	00026753 	.word	0x00026753

0000c938 <chan_req_sent>:
	if (chan->req) {
    c938:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
    c93c:	b13b      	cbz	r3, c94e <chan_req_sent+0x16>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    c93e:	f100 01e8 	add.w	r1, r0, #232	; 0xe8
    c942:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    c946:	4802      	ldr	r0, [pc, #8]	; (c950 <chan_req_sent+0x18>)
    c948:	2300      	movs	r3, #0
    c94a:	f011 b853 	b.w	1d9f4 <k_delayed_work_submit_to_queue>
}
    c94e:	4770      	bx	lr
    c950:	20001c30 	.word	0x20001c30

0000c954 <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
    c954:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    c956:	2300      	movs	r3, #0
{
    c958:	4606      	mov	r6, r0
    c95a:	460f      	mov	r7, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    c95c:	482c      	ldr	r0, [pc, #176]	; (ca10 <bt_att_accept+0xbc>)
    c95e:	2200      	movs	r2, #0
    c960:	4669      	mov	r1, sp
    c962:	f010 fa55 	bl	1ce10 <k_mem_slab_alloc>
    c966:	4604      	mov	r4, r0
    c968:	b178      	cbz	r0, c98a <bt_att_accept+0x36>
    c96a:	4a2a      	ldr	r2, [pc, #168]	; (ca14 <bt_att_accept+0xc0>)
    c96c:	4b2a      	ldr	r3, [pc, #168]	; (ca18 <bt_att_accept+0xc4>)
		BT_ERR("No available ATT context for conn %p", conn);
    c96e:	482b      	ldr	r0, [pc, #172]	; (ca1c <bt_att_accept+0xc8>)
    c970:	1ad2      	subs	r2, r2, r3
    c972:	08d2      	lsrs	r2, r2, #3
    c974:	0192      	lsls	r2, r2, #6
    c976:	f042 0201 	orr.w	r2, r2, #1
    c97a:	4631      	mov	r1, r6
		BT_ERR("No available ATT channel for conn %p", att->conn);
    c97c:	f011 fdb6 	bl	1e4ec <log_1>
	sys_slist_init(&att->reqs);
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
    c980:	f06f 040b 	mvn.w	r4, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
    c984:	4620      	mov	r0, r4
    c986:	b003      	add	sp, #12
    c988:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)memset(att, 0, sizeof(*att));
    c98a:	4601      	mov	r1, r0
    c98c:	2244      	movs	r2, #68	; 0x44
    c98e:	9800      	ldr	r0, [sp, #0]
    c990:	f013 fa9c 	bl	1fecc <memset>
	att->conn = conn;
    c994:	9d00      	ldr	r5, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    c996:	4822      	ldr	r0, [pc, #136]	; (ca20 <bt_att_accept+0xcc>)
	list->tail = NULL;
    c998:	60ac      	str	r4, [r5, #8]
	list->head = NULL;
    c99a:	e9c5 6400 	strd	r6, r4, [r5]
	list->tail = NULL;
    c99e:	e9c5 440f 	strd	r4, r4, [r5, #60]	; 0x3c
    c9a2:	2200      	movs	r2, #0
    c9a4:	2300      	movs	r3, #0
    c9a6:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
    c9a8:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    c9aa:	f010 fa31 	bl	1ce10 <k_mem_slab_alloc>
    c9ae:	4604      	mov	r4, r0
    c9b0:	b148      	cbz	r0, c9c6 <bt_att_accept+0x72>
    c9b2:	4a18      	ldr	r2, [pc, #96]	; (ca14 <bt_att_accept+0xc0>)
    c9b4:	4b18      	ldr	r3, [pc, #96]	; (ca18 <bt_att_accept+0xc4>)
		BT_ERR("No available ATT channel for conn %p", att->conn);
    c9b6:	6829      	ldr	r1, [r5, #0]
    c9b8:	481a      	ldr	r0, [pc, #104]	; (ca24 <bt_att_accept+0xd0>)
    c9ba:	1ad2      	subs	r2, r2, r3
    c9bc:	08d2      	lsrs	r2, r2, #3
    c9be:	0192      	lsls	r2, r2, #6
    c9c0:	f042 0201 	orr.w	r2, r2, #1
    c9c4:	e7da      	b.n	c97c <bt_att_accept+0x28>
	(void)memset(chan, 0, sizeof(*chan));
    c9c6:	4601      	mov	r1, r0
    c9c8:	f44f 729c 	mov.w	r2, #312	; 0x138
    c9cc:	9801      	ldr	r0, [sp, #4]
    c9ce:	f013 fa7d 	bl	1fecc <memset>
	chan->chan.chan.ops = &ops;
    c9d2:	9801      	ldr	r0, [sp, #4]
    c9d4:	4b14      	ldr	r3, [pc, #80]	; (ca28 <bt_att_accept+0xd4>)
    c9d6:	60c3      	str	r3, [r0, #12]
    c9d8:	30d0      	adds	r0, #208	; 0xd0
    c9da:	f016 f98b 	bl	22cf4 <z_impl_k_queue_init>
	k_sem_init(&chan->tx_sem, CONFIG_BT_ATT_TX_MAX, CONFIG_BT_ATT_TX_MAX);
    c9de:	9801      	ldr	r0, [sp, #4]
    c9e0:	f500 708c 	add.w	r0, r0, #280	; 0x118
	return z_impl_k_sem_init(sem, initial_count, limit);
    c9e4:	220a      	movs	r2, #10
    c9e6:	4611      	mov	r1, r2
    c9e8:	f016 fb03 	bl	22ff2 <z_impl_k_sem_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    c9ec:	9b01      	ldr	r3, [sp, #4]
    c9ee:	f3bf 8f5b 	dmb	ish
    c9f2:	33c8      	adds	r3, #200	; 0xc8
    c9f4:	e853 2f00 	ldrex	r2, [r3]
    c9f8:	e843 4100 	strex	r1, r4, [r3]
    c9fc:	2900      	cmp	r1, #0
    c9fe:	d1f9      	bne.n	c9f4 <bt_att_accept+0xa0>
    ca00:	f3bf 8f5b 	dmb	ish
	chan->att = att;
    ca04:	9b01      	ldr	r3, [sp, #4]
    ca06:	f843 5b08 	str.w	r5, [r3], #8
	*ch = &chan->chan.chan;
    ca0a:	603b      	str	r3, [r7, #0]
	return 0;
    ca0c:	e7ba      	b.n	c984 <bt_att_accept+0x30>
    ca0e:	bf00      	nop
    ca10:	20000798 	.word	0x20000798
    ca14:	000236f0 	.word	0x000236f0
    ca18:	000236f0 	.word	0x000236f0
    ca1c:	00026777 	.word	0x00026777
    ca20:	200007b4 	.word	0x200007b4
    ca24:	0002679c 	.word	0x0002679c
    ca28:	200001dc 	.word	0x200001dc

0000ca2c <bt_att_connected>:
{
    ca2c:	b538      	push	{r3, r4, r5, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    ca2e:	2104      	movs	r1, #4
{
    ca30:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    ca32:	6800      	ldr	r0, [r0, #0]
    ca34:	f014 f901 	bl	20c3a <bt_l2cap_le_lookup_tx_cid>
	struct bt_att *att = att_chan->att;
    ca38:	f850 5c08 	ldr.w	r5, [r0, #-8]
	if (sys_slist_is_empty(&att->chans)) {
    ca3c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    ca3e:	b93b      	cbnz	r3, ca50 <bt_att_connected+0x24>
	z_impl_k_queue_init(queue);
    ca40:	f105 000c 	add.w	r0, r5, #12
    ca44:	f016 f956 	bl	22cf4 <z_impl_k_queue_init>
    ca48:	f105 0024 	add.w	r0, r5, #36	; 0x24
    ca4c:	f016 f952 	bl	22cf4 <z_impl_k_queue_init>
Z_GENLIST_PREPEND(slist, snode)
    ca50:	6bea      	ldr	r2, [r5, #60]	; 0x3c
	parent->next = child;
    ca52:	f8c4 212c 	str.w	r2, [r4, #300]	; 0x12c
Z_GENLIST_PREPEND(slist, snode)
    ca56:	6c2a      	ldr	r2, [r5, #64]	; 0x40
	sys_slist_prepend(&att->chans, &chan->node);
    ca58:	f504 7396 	add.w	r3, r4, #300	; 0x12c
	list->head = node;
    ca5c:	63eb      	str	r3, [r5, #60]	; 0x3c
Z_GENLIST_PREPEND(slist, snode)
    ca5e:	b902      	cbnz	r2, ca62 <bt_att_connected+0x36>
	list->tail = node;
    ca60:	642b      	str	r3, [r5, #64]	; 0x40
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    ca62:	f3bf 8f5b 	dmb	ish
    ca66:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
	k_delayed_work_init(&att_chan->timeout_work, att_timeout);
    ca6a:	4908      	ldr	r1, [pc, #32]	; (ca8c <bt_att_connected+0x60>)
    ca6c:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
    ca70:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    ca72:	bf5e      	ittt	pl
    ca74:	2317      	movpl	r3, #23
    ca76:	f8a4 305e 	strhpl.w	r3, [r4, #94]	; 0x5e
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    ca7a:	f8a4 3052 	strhpl.w	r3, [r4, #82]	; 0x52
	k_delayed_work_init(&att_chan->timeout_work, att_timeout);
    ca7e:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
}
    ca82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_delayed_work_init(&att_chan->timeout_work, att_timeout);
    ca86:	f016 bb37 	b.w	230f8 <k_delayed_work_init>
    ca8a:	bf00      	nop
    ca8c:	0000d80d 	.word	0x0000d80d

0000ca90 <prep_write_cb>:
{
    ca90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ca92:	460c      	mov	r4, r1
    ca94:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
    ca96:	4601      	mov	r1, r0
    ca98:	222a      	movs	r2, #42	; 0x2a
    ca9a:	6820      	ldr	r0, [r4, #0]
    ca9c:	f014 ffce 	bl	21a3c <bt_gatt_check_perm>
    caa0:	4605      	mov	r5, r0
    caa2:	7420      	strb	r0, [r4, #16]
	if (data->err) {
    caa4:	2800      	cmp	r0, #0
    caa6:	d12d      	bne.n	cb04 <prep_write_cb+0x74>
	if (!(attr->perm & BT_GATT_PERM_PREPARE_WRITE)) {
    caa8:	7cb3      	ldrb	r3, [r6, #18]
    caaa:	065b      	lsls	r3, r3, #25
    caac:	d514      	bpl.n	cad8 <prep_write_cb+0x48>
	write = attr->write(data->conn, attr, data->value, data->len,
    caae:	2301      	movs	r3, #1
    cab0:	9301      	str	r3, [sp, #4]
    cab2:	89e3      	ldrh	r3, [r4, #14]
    cab4:	9300      	str	r3, [sp, #0]
    cab6:	68b7      	ldr	r7, [r6, #8]
    cab8:	89a3      	ldrh	r3, [r4, #12]
    caba:	68a2      	ldr	r2, [r4, #8]
    cabc:	6820      	ldr	r0, [r4, #0]
    cabe:	4631      	mov	r1, r6
    cac0:	47b8      	blx	r7
	if (write != 0) {
    cac2:	b148      	cbz	r0, cad8 <prep_write_cb+0x48>
	if (err < 0 && err >= -0xff) {
    cac4:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
    cac8:	bf26      	itte	cs
    caca:	4243      	negcs	r3, r0
    cacc:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
    cace:	230e      	movcc	r3, #14
		data->err = BT_ATT_ERR_PREPARE_QUEUE_FULL;
    cad0:	7423      	strb	r3, [r4, #16]
}
    cad2:	4628      	mov	r0, r5
    cad4:	b003      	add	sp, #12
    cad6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	data->buf = net_buf_alloc(&prep_pool, K_NO_WAIT);
    cad8:	480b      	ldr	r0, [pc, #44]	; (cb08 <prep_write_cb+0x78>)
    cada:	2200      	movs	r2, #0
    cadc:	2300      	movs	r3, #0
    cade:	f015 fcf3 	bl	224c8 <net_buf_alloc_fixed>
    cae2:	6060      	str	r0, [r4, #4]
	if (!data->buf) {
    cae4:	b908      	cbnz	r0, caea <prep_write_cb+0x5a>
		data->err = BT_ATT_ERR_PREPARE_QUEUE_FULL;
    cae6:	2309      	movs	r3, #9
    cae8:	e7f2      	b.n	cad0 <prep_write_cb+0x40>
	attr_data->handle = attr->handle;
    caea:	8a33      	ldrh	r3, [r6, #16]
    caec:	8283      	strh	r3, [r0, #20]
	attr_data->offset = data->offset;
    caee:	89e3      	ldrh	r3, [r4, #14]
    caf0:	82c3      	strh	r3, [r0, #22]
	net_buf_add_mem(data->buf, data->value, data->len);
    caf2:	89a2      	ldrh	r2, [r4, #12]
    caf4:	68a1      	ldr	r1, [r4, #8]
    caf6:	3008      	adds	r0, #8
    caf8:	f015 fd54 	bl	225a4 <net_buf_simple_add_mem>
	data->err = 0U;
    cafc:	2300      	movs	r3, #0
    cafe:	7423      	strb	r3, [r4, #16]
	return BT_GATT_ITER_CONTINUE;
    cb00:	2501      	movs	r5, #1
    cb02:	e7e6      	b.n	cad2 <prep_write_cb+0x42>
		return BT_GATT_ITER_STOP;
    cb04:	2500      	movs	r5, #0
    cb06:	e7e4      	b.n	cad2 <prep_write_cb+0x42>
    cb08:	200009d0 	.word	0x200009d0

0000cb0c <chan_send>:
{
    cb0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    cb0e:	688b      	ldr	r3, [r1, #8]
    cb10:	781b      	ldrb	r3, [r3, #0]
    cb12:	2bd2      	cmp	r3, #210	; 0xd2
{
    cb14:	4604      	mov	r4, r0
    cb16:	460f      	mov	r7, r1
    cb18:	4615      	mov	r5, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    cb1a:	d115      	bne.n	cb48 <chan_send+0x3c>
		err = bt_smp_sign(chan->att->conn, buf);
    cb1c:	6803      	ldr	r3, [r0, #0]
    cb1e:	6818      	ldr	r0, [r3, #0]
    cb20:	f015 fc45 	bl	223ae <bt_smp_sign>
		if (err) {
    cb24:	4606      	mov	r6, r0
    cb26:	b178      	cbz	r0, cb48 <chan_send+0x3c>
    cb28:	491b      	ldr	r1, [pc, #108]	; (cb98 <chan_send+0x8c>)
    cb2a:	4b1c      	ldr	r3, [pc, #112]	; (cb9c <chan_send+0x90>)
			BT_ERR("Error signing data");
    cb2c:	481c      	ldr	r0, [pc, #112]	; (cba0 <chan_send+0x94>)
    cb2e:	1a5b      	subs	r3, r3, r1
    cb30:	08db      	lsrs	r3, r3, #3
    cb32:	019b      	lsls	r3, r3, #6
    cb34:	f043 0101 	orr.w	r1, r3, #1
    cb38:	f011 fccb 	bl	1e4d2 <log_0>
			net_buf_unref(buf);
    cb3c:	4638      	mov	r0, r7
    cb3e:	f00e ffcf 	bl	1bae0 <net_buf_unref>
}
    cb42:	4630      	mov	r0, r6
    cb44:	b003      	add	sp, #12
    cb46:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chan->sent = cb ? cb : chan_cb(buf);
    cb48:	b955      	cbnz	r5, cb60 <chan_send+0x54>
	switch (att_op_get_type(buf->data[0])) {
    cb4a:	68bb      	ldr	r3, [r7, #8]
    cb4c:	7818      	ldrb	r0, [r3, #0]
    cb4e:	f014 f939 	bl	20dc4 <att_op_get_type>
    cb52:	3801      	subs	r0, #1
    cb54:	b2c0      	uxtb	r0, r0
    cb56:	2804      	cmp	r0, #4
    cb58:	bf9c      	itt	ls
    cb5a:	4b12      	ldrls	r3, [pc, #72]	; (cba4 <chan_send+0x98>)
    cb5c:	f853 5020 	ldrls.w	r5, [r3, r0, lsl #2]
	return bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT, buf,
    cb60:	6823      	ldr	r3, [r4, #0]
	chan->sent = cb ? cb : chan_cb(buf);
    cb62:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
	return bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT, buf,
    cb66:	6818      	ldr	r0, [r3, #0]
	if (cb == chan_rsp_sent) {
    cb68:	4b0f      	ldr	r3, [pc, #60]	; (cba8 <chan_send+0x9c>)
    cb6a:	429d      	cmp	r5, r3
    cb6c:	d010      	beq.n	cb90 <chan_send+0x84>
	} else if (cb == chan_cfm_sent) {
    cb6e:	4b0f      	ldr	r3, [pc, #60]	; (cbac <chan_send+0xa0>)
    cb70:	429d      	cmp	r5, r3
    cb72:	d00f      	beq.n	cb94 <chan_send+0x88>
		return att_sent;
    cb74:	490e      	ldr	r1, [pc, #56]	; (cbb0 <chan_send+0xa4>)
    cb76:	4b0f      	ldr	r3, [pc, #60]	; (cbb4 <chan_send+0xa8>)
    cb78:	4a0f      	ldr	r2, [pc, #60]	; (cbb8 <chan_send+0xac>)
    cb7a:	428d      	cmp	r5, r1
    cb7c:	bf18      	it	ne
    cb7e:	4613      	movne	r3, r2
				att_cb(chan->sent), &chan->chan.chan);
    cb80:	3408      	adds	r4, #8
	return bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT, buf,
    cb82:	9400      	str	r4, [sp, #0]
    cb84:	463a      	mov	r2, r7
    cb86:	2104      	movs	r1, #4
    cb88:	f013 fefb 	bl	20982 <bt_l2cap_send_cb>
    cb8c:	4606      	mov	r6, r0
    cb8e:	e7d8      	b.n	cb42 <chan_send+0x36>
		return att_rsp_sent;
    cb90:	4b0a      	ldr	r3, [pc, #40]	; (cbbc <chan_send+0xb0>)
    cb92:	e7f5      	b.n	cb80 <chan_send+0x74>
		return att_cfm_sent;
    cb94:	4b0a      	ldr	r3, [pc, #40]	; (cbc0 <chan_send+0xb4>)
    cb96:	e7f3      	b.n	cb80 <chan_send+0x74>
    cb98:	000236f0 	.word	0x000236f0
    cb9c:	000236f0 	.word	0x000236f0
    cba0:	000267c1 	.word	0x000267c1
    cba4:	00023d1c 	.word	0x00023d1c
    cba8:	00021053 	.word	0x00021053
    cbac:	00021037 	.word	0x00021037
    cbb0:	0000c939 	.word	0x0000c939
    cbb4:	0000c5e1 	.word	0x0000c5e1
    cbb8:	00020d99 	.word	0x00020d99
    cbbc:	0000c5d1 	.word	0x0000c5d1
    cbc0:	0000c5c1 	.word	0x0000c5c1

0000cbc4 <bt_att_chan_create_pdu>:
{
    cbc4:	b538      	push	{r3, r4, r5, lr}
    cbc6:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
    cbc8:	f8b0 1066 	ldrh.w	r1, [r0, #102]	; 0x66
    cbcc:	3201      	adds	r2, #1
    cbce:	428a      	cmp	r2, r1
    cbd0:	d90c      	bls.n	cbec <bt_att_chan_create_pdu+0x28>
    cbd2:	481a      	ldr	r0, [pc, #104]	; (cc3c <bt_att_chan_create_pdu+0x78>)
    cbd4:	4b1a      	ldr	r3, [pc, #104]	; (cc40 <bt_att_chan_create_pdu+0x7c>)
    cbd6:	1a1b      	subs	r3, r3, r0
    cbd8:	08db      	lsrs	r3, r3, #3
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
    cbda:	019b      	lsls	r3, r3, #6
    cbdc:	4819      	ldr	r0, [pc, #100]	; (cc44 <bt_att_chan_create_pdu+0x80>)
    cbde:	f043 0302 	orr.w	r3, r3, #2
    cbe2:	f011 fc97 	bl	1e514 <log_2>
		return NULL;
    cbe6:	2400      	movs	r4, #0
}
    cbe8:	4620      	mov	r0, r4
    cbea:	bd38      	pop	{r3, r4, r5, pc}
	switch (att_op_get_type(op)) {
    cbec:	4628      	mov	r0, r5
    cbee:	f014 f8e9 	bl	20dc4 <att_op_get_type>
    cbf2:	2802      	cmp	r0, #2
    cbf4:	d001      	beq.n	cbfa <bt_att_chan_create_pdu+0x36>
    cbf6:	2804      	cmp	r0, #4
    cbf8:	d114      	bne.n	cc24 <bt_att_chan_create_pdu+0x60>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
    cbfa:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    cbfe:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
    cc00:	2100      	movs	r1, #0
    cc02:	4608      	mov	r0, r1
    cc04:	f013 feba 	bl	2097c <bt_l2cap_create_pdu_timeout>
    cc08:	4604      	mov	r4, r0
	if (!buf) {
    cc0a:	b980      	cbnz	r0, cc2e <bt_att_chan_create_pdu+0x6a>
    cc0c:	4b0b      	ldr	r3, [pc, #44]	; (cc3c <bt_att_chan_create_pdu+0x78>)
    cc0e:	4a0c      	ldr	r2, [pc, #48]	; (cc40 <bt_att_chan_create_pdu+0x7c>)
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
    cc10:	480d      	ldr	r0, [pc, #52]	; (cc48 <bt_att_chan_create_pdu+0x84>)
    cc12:	1ad2      	subs	r2, r2, r3
    cc14:	08d2      	lsrs	r2, r2, #3
    cc16:	0192      	lsls	r2, r2, #6
    cc18:	f042 0201 	orr.w	r2, r2, #1
    cc1c:	4629      	mov	r1, r5
    cc1e:	f011 fc65 	bl	1e4ec <log_1>
		return NULL;
    cc22:	e7e1      	b.n	cbe8 <bt_att_chan_create_pdu+0x24>
		buf = bt_l2cap_create_pdu(NULL, 0);
    cc24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    cc28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    cc2c:	e7e8      	b.n	cc00 <bt_att_chan_create_pdu+0x3c>
	hdr = net_buf_add(buf, sizeof(*hdr));
    cc2e:	2101      	movs	r1, #1
    cc30:	3008      	adds	r0, #8
    cc32:	f015 fcb1 	bl	22598 <net_buf_simple_add>
	hdr->code = op;
    cc36:	7005      	strb	r5, [r0, #0]
	return buf;
    cc38:	e7d6      	b.n	cbe8 <bt_att_chan_create_pdu+0x24>
    cc3a:	bf00      	nop
    cc3c:	000236f0 	.word	0x000236f0
    cc40:	000236f0 	.word	0x000236f0
    cc44:	000267d4 	.word	0x000267d4
    cc48:	000262cc 	.word	0x000262cc

0000cc4c <att_indicate>:
{
    cc4c:	b570      	push	{r4, r5, r6, lr}
    cc4e:	4604      	mov	r4, r0
	handle = net_buf_pull_le16(buf);
    cc50:	f101 0008 	add.w	r0, r1, #8
{
    cc54:	460d      	mov	r5, r1
	handle = net_buf_pull_le16(buf);
    cc56:	f015 fcec 	bl	22632 <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
    cc5a:	6826      	ldr	r6, [r4, #0]
    cc5c:	89ab      	ldrh	r3, [r5, #12]
    cc5e:	68aa      	ldr	r2, [r5, #8]
	handle = net_buf_pull_le16(buf);
    cc60:	4601      	mov	r1, r0
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
    cc62:	6830      	ldr	r0, [r6, #0]
    cc64:	f014 ff8f 	bl	21b86 <bt_gatt_notification>
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_CONFIRM, 0);
    cc68:	211e      	movs	r1, #30
    cc6a:	2200      	movs	r2, #0
    cc6c:	4620      	mov	r0, r4
    cc6e:	f7ff ffa9 	bl	cbc4 <bt_att_chan_create_pdu>
	if (!buf) {
    cc72:	4601      	mov	r1, r0
    cc74:	b118      	cbz	r0, cc7e <att_indicate+0x32>
	bt_att_chan_send_rsp(chan, buf, chan_cfm_sent);
    cc76:	4a03      	ldr	r2, [pc, #12]	; (cc84 <att_indicate+0x38>)
    cc78:	4620      	mov	r0, r4
    cc7a:	f014 fad4 	bl	21226 <bt_att_chan_send_rsp>
}
    cc7e:	2000      	movs	r0, #0
    cc80:	bd70      	pop	{r4, r5, r6, pc}
    cc82:	bf00      	nop
    cc84:	00021037 	.word	0x00021037

0000cc88 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
    cc88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cc8c:	4688      	mov	r8, r1
    cc8e:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    cc90:	2101      	movs	r1, #1
    cc92:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
    cc94:	4605      	mov	r5, r0
    cc96:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    cc98:	f7ff ff94 	bl	cbc4 <bt_att_chan_create_pdu>
	if (!buf) {
    cc9c:	4604      	mov	r4, r0
    cc9e:	b178      	cbz	r0, ccc0 <send_err_rsp.part.0+0x38>
	rsp = net_buf_add(buf, sizeof(*rsp));
    cca0:	2104      	movs	r1, #4
    cca2:	3008      	adds	r0, #8
    cca4:	f015 fc78 	bl	22598 <net_buf_simple_add>
	rsp->request = req;
    cca8:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
    ccac:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
    ccae:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
    ccb2:	4621      	mov	r1, r4
    ccb4:	4628      	mov	r0, r5
    ccb6:	4a03      	ldr	r2, [pc, #12]	; (ccc4 <send_err_rsp.part.0+0x3c>)
}
    ccb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
    ccbc:	f014 bab3 	b.w	21226 <bt_att_chan_send_rsp>
}
    ccc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ccc4:	00021053 	.word	0x00021053

0000ccc8 <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
    ccc8:	898b      	ldrh	r3, [r1, #12]
{
    ccca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ccce:	4604      	mov	r4, r0
    ccd0:	4688      	mov	r8, r1
	if (buf->len < sizeof(*hdr)) {
    ccd2:	b963      	cbnz	r3, ccee <bt_att_recv+0x26>
    ccd4:	494a      	ldr	r1, [pc, #296]	; (ce00 <bt_att_recv+0x138>)
    ccd6:	4b4b      	ldr	r3, [pc, #300]	; (ce04 <bt_att_recv+0x13c>)
		BT_ERR("Too small ATT PDU received");
    ccd8:	484b      	ldr	r0, [pc, #300]	; (ce08 <bt_att_recv+0x140>)
    ccda:	1ac9      	subs	r1, r1, r3
    ccdc:	08c9      	lsrs	r1, r1, #3
    ccde:	0189      	lsls	r1, r1, #6
    cce0:	f041 0101 	orr.w	r1, r1, #1
			BT_WARN("Ignoring unexpected indication");
    cce4:	f011 fbf5 	bl	1e4d2 <log_0>
}
    cce8:	2000      	movs	r0, #0
    ccea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    ccee:	2101      	movs	r1, #1
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
    ccf0:	f1a0 0608 	sub.w	r6, r0, #8
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    ccf4:	f108 0008 	add.w	r0, r8, #8
    ccf8:	f015 fc8b 	bl	22612 <net_buf_simple_pull_mem>
		if (hdr->code == handlers[i].op) {
    ccfc:	4a43      	ldr	r2, [pc, #268]	; (ce0c <bt_att_recv+0x144>)
    ccfe:	7801      	ldrb	r1, [r0, #0]
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    cd00:	4605      	mov	r5, r0
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    cd02:	2300      	movs	r3, #0
    cd04:	4694      	mov	ip, r2
		if (hdr->code == handlers[i].op) {
    cd06:	f812 0033 	ldrb.w	r0, [r2, r3, lsl #3]
    cd0a:	4288      	cmp	r0, r1
    cd0c:	d11d      	bne.n	cd4a <bt_att_recv+0x82>
		if (handler->type == ATT_REQUEST &&
    cd0e:	00d8      	lsls	r0, r3, #3
    cd10:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    cd14:	789f      	ldrb	r7, [r3, #2]
    cd16:	2f01      	cmp	r7, #1
    cd18:	d132      	bne.n	cd80 <bt_att_recv+0xb8>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    cd1a:	f3bf 8f5b 	dmb	ish
    cd1e:	34c0      	adds	r4, #192	; 0xc0
    cd20:	e854 3f00 	ldrex	r3, [r4]
    cd24:	f043 0201 	orr.w	r2, r3, #1
    cd28:	e844 2100 	strex	r1, r2, [r4]
    cd2c:	2900      	cmp	r1, #0
    cd2e:	d1f7      	bne.n	cd20 <bt_att_recv+0x58>
    cd30:	f3bf 8f5b 	dmb	ish
    cd34:	07da      	lsls	r2, r3, #31
    cd36:	d53d      	bpl.n	cdb4 <bt_att_recv+0xec>
    cd38:	4931      	ldr	r1, [pc, #196]	; (ce00 <bt_att_recv+0x138>)
    cd3a:	4b32      	ldr	r3, [pc, #200]	; (ce04 <bt_att_recv+0x13c>)
			BT_WARN("Ignoring unexpected request");
    cd3c:	4834      	ldr	r0, [pc, #208]	; (ce10 <bt_att_recv+0x148>)
    cd3e:	1ac9      	subs	r1, r1, r3
    cd40:	08c9      	lsrs	r1, r1, #3
    cd42:	0189      	lsls	r1, r1, #6
    cd44:	f041 0102 	orr.w	r1, r1, #2
    cd48:	e7cc      	b.n	cce4 <bt_att_recv+0x1c>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    cd4a:	3301      	adds	r3, #1
    cd4c:	2b1c      	cmp	r3, #28
    cd4e:	d1da      	bne.n	cd06 <bt_att_recv+0x3e>
    cd50:	4b2c      	ldr	r3, [pc, #176]	; (ce04 <bt_att_recv+0x13c>)
    cd52:	4a2b      	ldr	r2, [pc, #172]	; (ce00 <bt_att_recv+0x138>)
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
    cd54:	482f      	ldr	r0, [pc, #188]	; (ce14 <bt_att_recv+0x14c>)
    cd56:	1ad2      	subs	r2, r2, r3
    cd58:	08d2      	lsrs	r2, r2, #3
    cd5a:	0192      	lsls	r2, r2, #6
    cd5c:	f042 0202 	orr.w	r2, r2, #2
    cd60:	f011 fbc4 	bl	1e4ec <log_1>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
    cd64:	7829      	ldrb	r1, [r5, #0]
    cd66:	4608      	mov	r0, r1
    cd68:	f014 f82c 	bl	20dc4 <att_op_get_type>
    cd6c:	2800      	cmp	r0, #0
    cd6e:	d0bb      	beq.n	cce8 <bt_att_recv+0x20>
	if (!req) {
    cd70:	2900      	cmp	r1, #0
    cd72:	d0b9      	beq.n	cce8 <bt_att_recv+0x20>
    cd74:	2306      	movs	r3, #6
    cd76:	2200      	movs	r2, #0
    cd78:	4630      	mov	r0, r6
    cd7a:	f7ff ff85 	bl	cc88 <send_err_rsp.part.0>
    cd7e:	e7b3      	b.n	cce8 <bt_att_recv+0x20>
		} else if (handler->type == ATT_INDICATION &&
    cd80:	2f05      	cmp	r7, #5
    cd82:	d117      	bne.n	cdb4 <bt_att_recv+0xec>
    cd84:	f3bf 8f5b 	dmb	ish
    cd88:	34c0      	adds	r4, #192	; 0xc0
    cd8a:	e854 3f00 	ldrex	r3, [r4]
    cd8e:	f043 0202 	orr.w	r2, r3, #2
    cd92:	e844 2100 	strex	r1, r2, [r4]
    cd96:	2900      	cmp	r1, #0
    cd98:	d1f7      	bne.n	cd8a <bt_att_recv+0xc2>
    cd9a:	f3bf 8f5b 	dmb	ish
    cd9e:	079b      	lsls	r3, r3, #30
    cda0:	d508      	bpl.n	cdb4 <bt_att_recv+0xec>
    cda2:	4917      	ldr	r1, [pc, #92]	; (ce00 <bt_att_recv+0x138>)
    cda4:	4b17      	ldr	r3, [pc, #92]	; (ce04 <bt_att_recv+0x13c>)
			BT_WARN("Ignoring unexpected indication");
    cda6:	481c      	ldr	r0, [pc, #112]	; (ce18 <bt_att_recv+0x150>)
    cda8:	1ac9      	subs	r1, r1, r3
    cdaa:	08c9      	lsrs	r1, r1, #3
    cdac:	0189      	lsls	r1, r1, #6
    cdae:	f041 0102 	orr.w	r1, r1, #2
    cdb2:	e797      	b.n	cce4 <bt_att_recv+0x1c>
	if (buf->len < handler->expect_len) {
    cdb4:	eb0c 0300 	add.w	r3, ip, r0
    cdb8:	f8b8 100c 	ldrh.w	r1, [r8, #12]
    cdbc:	785a      	ldrb	r2, [r3, #1]
    cdbe:	428a      	cmp	r2, r1
    cdc0:	d90e      	bls.n	cde0 <bt_att_recv+0x118>
    cdc2:	4a10      	ldr	r2, [pc, #64]	; (ce04 <bt_att_recv+0x13c>)
    cdc4:	4b0e      	ldr	r3, [pc, #56]	; (ce00 <bt_att_recv+0x138>)
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    cdc6:	4815      	ldr	r0, [pc, #84]	; (ce1c <bt_att_recv+0x154>)
    cdc8:	1a9b      	subs	r3, r3, r2
    cdca:	08db      	lsrs	r3, r3, #3
    cdcc:	019b      	lsls	r3, r3, #6
    cdce:	782a      	ldrb	r2, [r5, #0]
    cdd0:	f043 0301 	orr.w	r3, r3, #1
    cdd4:	f011 fb9e 	bl	1e514 <log_2>
	if (handler->type == ATT_REQUEST && err) {
    cdd8:	2f01      	cmp	r7, #1
    cdda:	d185      	bne.n	cce8 <bt_att_recv+0x20>
		err = BT_ATT_ERR_INVALID_PDU;
    cddc:	2304      	movs	r3, #4
    cdde:	e00a      	b.n	cdf6 <bt_att_recv+0x12e>
		err = handler->func(att_chan, buf);
    cde0:	685b      	ldr	r3, [r3, #4]
    cde2:	4641      	mov	r1, r8
    cde4:	4630      	mov	r0, r6
    cde6:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
    cde8:	2f01      	cmp	r7, #1
		err = handler->func(att_chan, buf);
    cdea:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
    cdec:	f47f af7c 	bne.w	cce8 <bt_att_recv+0x20>
    cdf0:	2800      	cmp	r0, #0
    cdf2:	f43f af79 	beq.w	cce8 <bt_att_recv+0x20>
		send_err_rsp(att_chan, hdr->code, 0, err);
    cdf6:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
    cdf8:	2900      	cmp	r1, #0
    cdfa:	f43f af75 	beq.w	cce8 <bt_att_recv+0x20>
    cdfe:	e7ba      	b.n	cd76 <bt_att_recv+0xae>
    ce00:	000236f0 	.word	0x000236f0
    ce04:	000236f0 	.word	0x000236f0
    ce08:	000267f9 	.word	0x000267f9
    ce0c:	00023d30 	.word	0x00023d30
    ce10:	00026814 	.word	0x00026814
    ce14:	0002686e 	.word	0x0002686e
    ce18:	00026830 	.word	0x00026830
    ce1c:	0002684f 	.word	0x0002684f

0000ce20 <att_write_rsp>:
{
    ce20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ce24:	461f      	mov	r7, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    ce26:	6803      	ldr	r3, [r0, #0]
    ce28:	460e      	mov	r6, r1
    ce2a:	3900      	subs	r1, #0
{
    ce2c:	b086      	sub	sp, #24
    ce2e:	4605      	mov	r5, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    ce30:	bf18      	it	ne
    ce32:	2101      	movne	r1, #1
    ce34:	6818      	ldr	r0, [r3, #0]
{
    ce36:	4690      	mov	r8, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    ce38:	f014 fed1 	bl	21bde <bt_gatt_change_aware>
    ce3c:	2800      	cmp	r0, #0
    ce3e:	d04e      	beq.n	cede <att_write_rsp+0xbe>
	if (!handle) {
    ce40:	2f00      	cmp	r7, #0
    ce42:	d04e      	beq.n	cee2 <att_write_rsp+0xc2>
	(void)memset(&data, 0, sizeof(data));
    ce44:	2218      	movs	r2, #24
    ce46:	2100      	movs	r1, #0
    ce48:	4668      	mov	r0, sp
    ce4a:	f013 f83f 	bl	1fecc <memset>
	if (rsp) {
    ce4e:	f1b8 0f00 	cmp.w	r8, #0
    ce52:	d126      	bne.n	cea2 <att_write_rsp+0x82>
	data.conn = chan->att->conn;
    ce54:	682b      	ldr	r3, [r5, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    ce56:	4a24      	ldr	r2, [pc, #144]	; (cee8 <att_write_rsp+0xc8>)
	data.conn = chan->att->conn;
    ce58:	681b      	ldr	r3, [r3, #0]
    ce5a:	9300      	str	r3, [sp, #0]
	data.offset = offset;
    ce5c:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    ce60:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
    ce64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ce66:	9303      	str	r3, [sp, #12]
	data.len = len;
    ce68:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    ce6c:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    ce70:	2301      	movs	r3, #1
    ce72:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    ce76:	4639      	mov	r1, r7
    ce78:	466b      	mov	r3, sp
    ce7a:	4638      	mov	r0, r7
	data.req = req;
    ce7c:	f88d 6008 	strb.w	r6, [sp, #8]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    ce80:	f013 ffe6 	bl	20e50 <bt_gatt_foreach_attr>
	if (data.err) {
    ce84:	f89d 4014 	ldrb.w	r4, [sp, #20]
    ce88:	b30c      	cbz	r4, cece <att_write_rsp+0xae>
		if (rsp) {
    ce8a:	f1b8 0f00 	cmp.w	r8, #0
    ce8e:	d019      	beq.n	cec4 <att_write_rsp+0xa4>
			net_buf_unref(data.buf);
    ce90:	9801      	ldr	r0, [sp, #4]
    ce92:	f00e fe25 	bl	1bae0 <net_buf_unref>
	if (!req) {
    ce96:	b976      	cbnz	r6, ceb6 <att_write_rsp+0x96>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    ce98:	2400      	movs	r4, #0
}
    ce9a:	4620      	mov	r0, r4
    ce9c:	b006      	add	sp, #24
    ce9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
    cea2:	2200      	movs	r2, #0
    cea4:	4641      	mov	r1, r8
    cea6:	4628      	mov	r0, r5
    cea8:	f7ff fe8c 	bl	cbc4 <bt_att_chan_create_pdu>
    ceac:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
    ceae:	2800      	cmp	r0, #0
    ceb0:	d1d0      	bne.n	ce54 <att_write_rsp+0x34>
			return BT_ATT_ERR_UNLIKELY;
    ceb2:	240e      	movs	r4, #14
    ceb4:	e7f1      	b.n	ce9a <att_write_rsp+0x7a>
    ceb6:	f89d 3014 	ldrb.w	r3, [sp, #20]
    ceba:	463a      	mov	r2, r7
    cebc:	4631      	mov	r1, r6
    cebe:	4628      	mov	r0, r5
    cec0:	f7ff fee2 	bl	cc88 <send_err_rsp.part.0>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    cec4:	2e18      	cmp	r6, #24
    cec6:	d1e7      	bne.n	ce98 <att_write_rsp+0x78>
    cec8:	f89d 4014 	ldrb.w	r4, [sp, #20]
    cecc:	e7e5      	b.n	ce9a <att_write_rsp+0x7a>
	if (data.buf) {
    cece:	9901      	ldr	r1, [sp, #4]
    ced0:	2900      	cmp	r1, #0
    ced2:	d0e1      	beq.n	ce98 <att_write_rsp+0x78>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    ced4:	4a05      	ldr	r2, [pc, #20]	; (ceec <att_write_rsp+0xcc>)
    ced6:	4628      	mov	r0, r5
    ced8:	f014 f9a5 	bl	21226 <bt_att_chan_send_rsp>
    cedc:	e7dd      	b.n	ce9a <att_write_rsp+0x7a>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    cede:	2412      	movs	r4, #18
    cee0:	e7db      	b.n	ce9a <att_write_rsp+0x7a>
		return BT_ATT_ERR_INVALID_HANDLE;
    cee2:	2401      	movs	r4, #1
    cee4:	e7d9      	b.n	ce9a <att_write_rsp+0x7a>
    cee6:	bf00      	nop
    cee8:	0002106f 	.word	0x0002106f
    ceec:	00021053 	.word	0x00021053

0000cef0 <bt_att_create_pdu>:
{
    cef0:	b570      	push	{r4, r5, r6, lr}
    cef2:	460e      	mov	r6, r1
    cef4:	4615      	mov	r5, r2
	att = att_get(conn);
    cef6:	f7ff fcdf 	bl	c8b8 <att_get>
	if (!att) {
    cefa:	b1c0      	cbz	r0, cf2e <bt_att_create_pdu+0x3e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    cefc:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
	return list->head;
    cefe:	1c69      	adds	r1, r5, #1
    cf00:	b15b      	cbz	r3, cf1a <bt_att_create_pdu+0x2a>
    cf02:	f5b3 709a 	subs.w	r0, r3, #308	; 0x134
    cf06:	d008      	beq.n	cf1a <bt_att_create_pdu+0x2a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    cf08:	681b      	ldr	r3, [r3, #0]
    cf0a:	b10b      	cbz	r3, cf10 <bt_att_create_pdu+0x20>
    cf0c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
		if (len + sizeof(op) > chan->chan.tx.mtu) {
    cf10:	f8b0 2066 	ldrh.w	r2, [r0, #102]	; 0x66
    cf14:	4291      	cmp	r1, r2
    cf16:	d90c      	bls.n	cf32 <bt_att_create_pdu+0x42>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    cf18:	b98b      	cbnz	r3, cf3e <bt_att_create_pdu+0x4e>
    cf1a:	4a0e      	ldr	r2, [pc, #56]	; (cf54 <bt_att_create_pdu+0x64>)
    cf1c:	4b0e      	ldr	r3, [pc, #56]	; (cf58 <bt_att_create_pdu+0x68>)
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
    cf1e:	480f      	ldr	r0, [pc, #60]	; (cf5c <bt_att_create_pdu+0x6c>)
    cf20:	1ad2      	subs	r2, r2, r3
    cf22:	08d2      	lsrs	r2, r2, #3
    cf24:	0192      	lsls	r2, r2, #6
    cf26:	f042 0202 	orr.w	r2, r2, #2
    cf2a:	f011 fadf 	bl	1e4ec <log_1>
}
    cf2e:	2000      	movs	r0, #0
    cf30:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
    cf32:	462a      	mov	r2, r5
    cf34:	4631      	mov	r1, r6
}
    cf36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
    cf3a:	f7ff be43 	b.w	cbc4 <bt_att_chan_create_pdu>
Z_GENLIST_PEEK_NEXT(slist, snode)
    cf3e:	f513 749a 	adds.w	r4, r3, #308	; 0x134
    cf42:	d004      	beq.n	cf4e <bt_att_create_pdu+0x5e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    cf44:	f8d3 4134 	ldr.w	r4, [r3, #308]	; 0x134
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    cf48:	b10c      	cbz	r4, cf4e <bt_att_create_pdu+0x5e>
    cf4a:	f5a4 749a 	sub.w	r4, r4, #308	; 0x134
{
    cf4e:	4618      	mov	r0, r3
    cf50:	4623      	mov	r3, r4
    cf52:	e7dd      	b.n	cf10 <bt_att_create_pdu+0x20>
    cf54:	000236f0 	.word	0x000236f0
    cf58:	000236f0 	.word	0x000236f0
    cf5c:	00026888 	.word	0x00026888

0000cf60 <att_exec_write_req>:
{
    cf60:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return att_exec_write_rsp(chan, req->flags);
    cf64:	688b      	ldr	r3, [r1, #8]
	struct bt_conn *conn = chan->chan.chan.conn;
    cf66:	6887      	ldr	r7, [r0, #8]
	return att_exec_write_rsp(chan, req->flags);
    cf68:	f893 8000 	ldrb.w	r8, [r3]
{
    cf6c:	4606      	mov	r6, r0
	uint8_t err = 0U;
    cf6e:	2400      	movs	r4, #0
	while ((buf = net_buf_get(&chan->att->prep_queue, K_NO_WAIT))) {
    cf70:	6830      	ldr	r0, [r6, #0]
    cf72:	2200      	movs	r2, #0
    cf74:	2300      	movs	r3, #0
    cf76:	3024      	adds	r0, #36	; 0x24
    cf78:	f015 faab 	bl	224d2 <net_buf_get>
    cf7c:	4605      	mov	r5, r0
    cf7e:	b978      	cbnz	r0, cfa0 <att_exec_write_req+0x40>
	if (err) {
    cf80:	bb54      	cbnz	r4, cfd8 <att_exec_write_req+0x78>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_EXEC_WRITE_RSP, 0);
    cf82:	2119      	movs	r1, #25
    cf84:	4622      	mov	r2, r4
    cf86:	4638      	mov	r0, r7
    cf88:	f7ff ffb2 	bl	cef0 <bt_att_create_pdu>
	if (!buf) {
    cf8c:	4601      	mov	r1, r0
    cf8e:	b328      	cbz	r0, cfdc <att_exec_write_req+0x7c>
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
    cf90:	4a13      	ldr	r2, [pc, #76]	; (cfe0 <att_exec_write_req+0x80>)
    cf92:	4630      	mov	r0, r6
    cf94:	f014 f947 	bl	21226 <bt_att_chan_send_rsp>
}
    cf98:	4620      	mov	r0, r4
    cf9a:	b004      	add	sp, #16
    cf9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!err && flags == BT_ATT_FLAG_EXEC) {
    cfa0:	b9b4      	cbnz	r4, cfd0 <att_exec_write_req+0x70>
    cfa2:	f1b8 0f01 	cmp.w	r8, #1
    cfa6:	d113      	bne.n	cfd0 <att_exec_write_req+0x70>
			err = att_write_rsp(chan, BT_ATT_OP_EXEC_WRITE_REQ, 0,
    cfa8:	89aa      	ldrh	r2, [r5, #12]
    cfaa:	8aab      	ldrh	r3, [r5, #20]
    cfac:	9202      	str	r2, [sp, #8]
    cfae:	68aa      	ldr	r2, [r5, #8]
    cfb0:	9201      	str	r2, [sp, #4]
    cfb2:	8aea      	ldrh	r2, [r5, #22]
    cfb4:	9200      	str	r2, [sp, #0]
    cfb6:	2118      	movs	r1, #24
    cfb8:	4622      	mov	r2, r4
    cfba:	4630      	mov	r0, r6
    cfbc:	f7ff ff30 	bl	ce20 <att_write_rsp>
			if (err) {
    cfc0:	4604      	mov	r4, r0
    cfc2:	b128      	cbz	r0, cfd0 <att_exec_write_req+0x70>
	if (!req) {
    cfc4:	4603      	mov	r3, r0
    cfc6:	8aaa      	ldrh	r2, [r5, #20]
    cfc8:	2118      	movs	r1, #24
    cfca:	4630      	mov	r0, r6
    cfcc:	f7ff fe5c 	bl	cc88 <send_err_rsp.part.0>
		net_buf_unref(buf);
    cfd0:	4628      	mov	r0, r5
    cfd2:	f00e fd85 	bl	1bae0 <net_buf_unref>
    cfd6:	e7cb      	b.n	cf70 <att_exec_write_req+0x10>
		return 0;
    cfd8:	4604      	mov	r4, r0
    cfda:	e7dd      	b.n	cf98 <att_exec_write_req+0x38>
		return BT_ATT_ERR_UNLIKELY;
    cfdc:	240e      	movs	r4, #14
    cfde:	e7db      	b.n	cf98 <att_exec_write_req+0x38>
    cfe0:	00021053 	.word	0x00021053

0000cfe4 <att_prepare_write_req>:
{
    cfe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cfe8:	460c      	mov	r4, r1
    cfea:	b087      	sub	sp, #28
    cfec:	4605      	mov	r5, r0
	req = net_buf_pull_mem(buf, sizeof(*req));
    cfee:	2104      	movs	r1, #4
    cff0:	f104 0008 	add.w	r0, r4, #8
    cff4:	f015 fb0d 	bl	22612 <net_buf_simple_pull_mem>
	struct bt_conn *conn = chan->chan.chan.conn;
    cff8:	f8d5 b008 	ldr.w	fp, [r5, #8]
	handle = sys_le16_to_cpu(req->handle);
    cffc:	f8b0 a000 	ldrh.w	sl, [r0]
	offset = sys_le16_to_cpu(req->offset);
    d000:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	return att_prep_write_rsp(chan, handle, offset, buf->data, buf->len);
    d004:	f8d4 8008 	ldr.w	r8, [r4, #8]
    d008:	89a7      	ldrh	r7, [r4, #12]
	if (!bt_gatt_change_aware(conn, true)) {
    d00a:	2101      	movs	r1, #1
    d00c:	4658      	mov	r0, fp
	handle = sys_le16_to_cpu(req->handle);
    d00e:	fa1f f68a 	uxth.w	r6, sl
	if (!bt_gatt_change_aware(conn, true)) {
    d012:	f014 fde4 	bl	21bde <bt_gatt_change_aware>
    d016:	2800      	cmp	r0, #0
    d018:	d04b      	beq.n	d0b2 <att_prepare_write_req+0xce>
	if (!handle) {
    d01a:	2e00      	cmp	r6, #0
    d01c:	d04b      	beq.n	d0b6 <att_prepare_write_req+0xd2>
	(void)memset(&data, 0, sizeof(data));
    d01e:	2214      	movs	r2, #20
    d020:	2100      	movs	r1, #0
    d022:	a801      	add	r0, sp, #4
    d024:	f012 ff52 	bl	1fecc <memset>
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    d028:	2301      	movs	r3, #1
    d02a:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
    d02e:	4a24      	ldr	r2, [pc, #144]	; (d0c0 <att_prepare_write_req+0xdc>)
	data.conn = conn;
    d030:	f8cd b004 	str.w	fp, [sp, #4]
	data.len = len;
    d034:	b2ff      	uxtb	r7, r7
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
    d036:	ab01      	add	r3, sp, #4
    d038:	4631      	mov	r1, r6
    d03a:	4630      	mov	r0, r6
	data.offset = offset;
    d03c:	f8ad 9012 	strh.w	r9, [sp, #18]
	data.value = value;
    d040:	f8cd 800c 	str.w	r8, [sp, #12]
	data.len = len;
    d044:	f8ad 7010 	strh.w	r7, [sp, #16]
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
    d048:	f013 ff02 	bl	20e50 <bt_gatt_foreach_attr>
	if (data.err) {
    d04c:	f89d 4014 	ldrb.w	r4, [sp, #20]
    d050:	b154      	cbz	r4, d068 <att_prepare_write_req+0x84>
	if (!req) {
    d052:	4623      	mov	r3, r4
    d054:	4632      	mov	r2, r6
    d056:	2116      	movs	r1, #22
    d058:	4628      	mov	r0, r5
    d05a:	f7ff fe15 	bl	cc88 <send_err_rsp.part.0>
		return 0;
    d05e:	2400      	movs	r4, #0
}
    d060:	4620      	mov	r0, r4
    d062:	b007      	add	sp, #28
    d064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	net_buf_put(&chan->att->prep_queue, data.buf);
    d068:	6828      	ldr	r0, [r5, #0]
    d06a:	9902      	ldr	r1, [sp, #8]
    d06c:	3024      	adds	r0, #36	; 0x24
    d06e:	f015 fa54 	bl	2251a <net_buf_put>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_PREPARE_WRITE_RSP, 0);
    d072:	4622      	mov	r2, r4
    d074:	2117      	movs	r1, #23
    d076:	4658      	mov	r0, fp
    d078:	f7ff ff3a 	bl	cef0 <bt_att_create_pdu>
    d07c:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    d07e:	b1e0      	cbz	r0, d0ba <att_prepare_write_req+0xd6>
	rsp = net_buf_add(data.buf, sizeof(*rsp));
    d080:	2104      	movs	r1, #4
    d082:	3008      	adds	r0, #8
    d084:	f015 fa88 	bl	22598 <net_buf_simple_add>
    d088:	4606      	mov	r6, r0
	rsp->handle = sys_cpu_to_le16(handle);
    d08a:	f8a0 a000 	strh.w	sl, [r0]
	rsp->offset = sys_cpu_to_le16(offset);
    d08e:	f8a0 9002 	strh.w	r9, [r0, #2]
	net_buf_add(data.buf, len);
    d092:	9802      	ldr	r0, [sp, #8]
    d094:	4639      	mov	r1, r7
    d096:	3008      	adds	r0, #8
    d098:	f015 fa7e 	bl	22598 <net_buf_simple_add>
	memcpy(rsp->value, value, len);
    d09c:	463a      	mov	r2, r7
    d09e:	4641      	mov	r1, r8
    d0a0:	1d30      	adds	r0, r6, #4
    d0a2:	f012 fee8 	bl	1fe76 <memcpy>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    d0a6:	4a07      	ldr	r2, [pc, #28]	; (d0c4 <att_prepare_write_req+0xe0>)
    d0a8:	9902      	ldr	r1, [sp, #8]
    d0aa:	4628      	mov	r0, r5
    d0ac:	f014 f8bb 	bl	21226 <bt_att_chan_send_rsp>
	return 0;
    d0b0:	e7d6      	b.n	d060 <att_prepare_write_req+0x7c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    d0b2:	2412      	movs	r4, #18
    d0b4:	e7d4      	b.n	d060 <att_prepare_write_req+0x7c>
		return BT_ATT_ERR_INVALID_HANDLE;
    d0b6:	2401      	movs	r4, #1
    d0b8:	e7d2      	b.n	d060 <att_prepare_write_req+0x7c>
		return BT_ATT_ERR_UNLIKELY;
    d0ba:	240e      	movs	r4, #14
    d0bc:	e7d0      	b.n	d060 <att_prepare_write_req+0x7c>
    d0be:	bf00      	nop
    d0c0:	0000ca91 	.word	0x0000ca91
    d0c4:	00021053 	.word	0x00021053

0000d0c8 <att_read_group_req>:
{
    d0c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    d0cc:	7b0c      	ldrb	r4, [r1, #12]
    d0ce:	3c04      	subs	r4, #4
    d0d0:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    d0d2:	2c02      	cmp	r4, #2
{
    d0d4:	4605      	mov	r5, r0
    d0d6:	b08c      	sub	sp, #48	; 0x30
    d0d8:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    d0da:	d001      	beq.n	d0e0 <att_read_group_req+0x18>
    d0dc:	2c10      	cmp	r4, #16
    d0de:	d16f      	bne.n	d1c0 <att_read_group_req+0xf8>
	req = net_buf_pull_mem(buf, sizeof(*req));
    d0e0:	2104      	movs	r1, #4
    d0e2:	3008      	adds	r0, #8
    d0e4:	f015 fa95 	bl	22612 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    d0e8:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
    d0ec:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    d0ee:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    d0f0:	1d01      	adds	r1, r0, #4
    d0f2:	4622      	mov	r2, r4
    d0f4:	4640      	mov	r0, r8
    d0f6:	f012 ffb7 	bl	20068 <bt_uuid_create>
    d0fa:	2800      	cmp	r0, #0
    d0fc:	d062      	beq.n	d1c4 <att_read_group_req+0xfc>
	if (!start || !end) {
    d0fe:	2e00      	cmp	r6, #0
    d100:	d03a      	beq.n	d178 <att_read_group_req+0xb0>
    d102:	2400      	movs	r4, #0
    d104:	2f00      	cmp	r7, #0
    d106:	d036      	beq.n	d176 <att_read_group_req+0xae>
	if (start > end) {
    d108:	42be      	cmp	r6, r7
    d10a:	d835      	bhi.n	d178 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    d10c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    d110:	a901      	add	r1, sp, #4
    d112:	4640      	mov	r0, r8
    d114:	f88d 4004 	strb.w	r4, [sp, #4]
    d118:	f8ad 3006 	strh.w	r3, [sp, #6]
    d11c:	f012 ff7a 	bl	20014 <bt_uuid_cmp>
    d120:	2800      	cmp	r0, #0
    d122:	d134      	bne.n	d18e <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
    d124:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    d126:	2214      	movs	r2, #20
    d128:	2100      	movs	r1, #0
    d12a:	a807      	add	r0, sp, #28
    d12c:	f012 fece 	bl	1fecc <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    d130:	2201      	movs	r2, #1
    d132:	2111      	movs	r1, #17
    d134:	4620      	mov	r0, r4
    d136:	f7ff fedb 	bl	cef0 <bt_att_create_pdu>
    d13a:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
    d13c:	2800      	cmp	r0, #0
    d13e:	d041      	beq.n	d1c4 <att_read_group_req+0xfc>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    d140:	2101      	movs	r1, #1
    d142:	3008      	adds	r0, #8
	data.uuid = uuid;
    d144:	e9cd 5807 	strd	r5, r8, [sp, #28]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    d148:	f015 fa26 	bl	22598 <net_buf_simple_add>
	data.rsp->len = 0U;
    d14c:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    d150:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    d152:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
    d154:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    d158:	4a1b      	ldr	r2, [pc, #108]	; (d1c8 <att_read_group_req+0x100>)
	data.group = NULL;
    d15a:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    d15e:	4639      	mov	r1, r7
    d160:	4630      	mov	r0, r6
    d162:	f013 fe75 	bl	20e50 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    d166:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d168:	781c      	ldrb	r4, [r3, #0]
    d16a:	bb1c      	cbnz	r4, d1b4 <att_read_group_req+0xec>
		net_buf_unref(data.buf);
    d16c:	9809      	ldr	r0, [sp, #36]	; 0x24
    d16e:	f00e fcb7 	bl	1bae0 <net_buf_unref>
	if (!req) {
    d172:	230a      	movs	r3, #10
    d174:	e018      	b.n	d1a8 <att_read_group_req+0xe0>
			*err = 0U;
    d176:	463e      	mov	r6, r7
	if (!req) {
    d178:	2301      	movs	r3, #1
    d17a:	4632      	mov	r2, r6
    d17c:	2110      	movs	r1, #16
    d17e:	4628      	mov	r0, r5
    d180:	f7ff fd82 	bl	cc88 <send_err_rsp.part.0>
		return 0;
    d184:	2400      	movs	r4, #0
}
    d186:	4620      	mov	r0, r4
    d188:	b00c      	add	sp, #48	; 0x30
    d18a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    d18e:	f642 0301 	movw	r3, #10241	; 0x2801
    d192:	a907      	add	r1, sp, #28
    d194:	4640      	mov	r0, r8
    d196:	f88d 401c 	strb.w	r4, [sp, #28]
    d19a:	f8ad 301e 	strh.w	r3, [sp, #30]
    d19e:	f012 ff39 	bl	20014 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    d1a2:	2800      	cmp	r0, #0
    d1a4:	d0be      	beq.n	d124 <att_read_group_req+0x5c>
	if (!req) {
    d1a6:	2310      	movs	r3, #16
    d1a8:	4632      	mov	r2, r6
    d1aa:	2110      	movs	r1, #16
    d1ac:	4628      	mov	r0, r5
    d1ae:	f7ff fd6b 	bl	cc88 <send_err_rsp.part.0>
		return 0;
    d1b2:	e7e8      	b.n	d186 <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    d1b4:	4a05      	ldr	r2, [pc, #20]	; (d1cc <att_read_group_req+0x104>)
    d1b6:	9909      	ldr	r1, [sp, #36]	; 0x24
    d1b8:	4628      	mov	r0, r5
    d1ba:	f014 f834 	bl	21226 <bt_att_chan_send_rsp>
	return 0;
    d1be:	e7e1      	b.n	d184 <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
    d1c0:	2404      	movs	r4, #4
    d1c2:	e7e0      	b.n	d186 <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
    d1c4:	240e      	movs	r4, #14
    d1c6:	e7de      	b.n	d186 <att_read_group_req+0xbe>
    d1c8:	0000c609 	.word	0x0000c609
    d1cc:	00021053 	.word	0x00021053

0000d1d0 <att_read_mult_req>:
{
    d1d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    d1d4:	6886      	ldr	r6, [r0, #8]
{
    d1d6:	b087      	sub	sp, #28
	(void)memset(&data, 0, sizeof(data));
    d1d8:	2214      	movs	r2, #20
{
    d1da:	4604      	mov	r4, r0
    d1dc:	460d      	mov	r5, r1
	(void)memset(&data, 0, sizeof(data));
    d1de:	a801      	add	r0, sp, #4
    d1e0:	2100      	movs	r1, #0
    d1e2:	f012 fe73 	bl	1fecc <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    d1e6:	2200      	movs	r2, #0
    d1e8:	210f      	movs	r1, #15
    d1ea:	4630      	mov	r0, r6
    d1ec:	f7ff fe80 	bl	cef0 <bt_att_create_pdu>
    d1f0:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    d1f2:	b360      	cbz	r0, d24e <att_read_mult_req+0x7e>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    d1f4:	f8df 9060 	ldr.w	r9, [pc, #96]	; d258 <att_read_mult_req+0x88>
	data.chan = chan;
    d1f8:	9401      	str	r4, [sp, #4]
		handle = net_buf_pull_le16(buf);
    d1fa:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    d1fe:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
    d202:	89ab      	ldrh	r3, [r5, #12]
    d204:	2b01      	cmp	r3, #1
    d206:	d805      	bhi.n	d214 <att_read_mult_req+0x44>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    d208:	4a12      	ldr	r2, [pc, #72]	; (d254 <att_read_mult_req+0x84>)
    d20a:	9903      	ldr	r1, [sp, #12]
    d20c:	4620      	mov	r0, r4
    d20e:	f014 f80a 	bl	21226 <bt_att_chan_send_rsp>
    d212:	e018      	b.n	d246 <att_read_mult_req+0x76>
		handle = net_buf_pull_le16(buf);
    d214:	4638      	mov	r0, r7
    d216:	f015 fa0c 	bl	22632 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    d21a:	ab01      	add	r3, sp, #4
    d21c:	464a      	mov	r2, r9
    d21e:	4601      	mov	r1, r0
		handle = net_buf_pull_le16(buf);
    d220:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    d222:	f88d 8014 	strb.w	r8, [sp, #20]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    d226:	f013 fe13 	bl	20e50 <bt_gatt_foreach_attr>
		if (data.err) {
    d22a:	f89d 3014 	ldrb.w	r3, [sp, #20]
    d22e:	2b00      	cmp	r3, #0
    d230:	d0e7      	beq.n	d202 <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
    d232:	9803      	ldr	r0, [sp, #12]
    d234:	f00e fc54 	bl	1bae0 <net_buf_unref>
	if (!req) {
    d238:	f89d 3014 	ldrb.w	r3, [sp, #20]
    d23c:	4632      	mov	r2, r6
    d23e:	210e      	movs	r1, #14
    d240:	4620      	mov	r0, r4
    d242:	f7ff fd21 	bl	cc88 <send_err_rsp.part.0>
	return 0;
    d246:	2000      	movs	r0, #0
}
    d248:	b007      	add	sp, #28
    d24a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
    d24e:	200e      	movs	r0, #14
    d250:	e7fa      	b.n	d248 <att_read_mult_req+0x78>
    d252:	bf00      	nop
    d254:	00021053 	.word	0x00021053
    d258:	000210cb 	.word	0x000210cb

0000d25c <att_read_rsp>:
{
    d25c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    d260:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
    d264:	b086      	sub	sp, #24
    d266:	4605      	mov	r5, r0
    d268:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
    d26a:	4640      	mov	r0, r8
    d26c:	2101      	movs	r1, #1
{
    d26e:	4614      	mov	r4, r2
    d270:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
    d272:	f014 fcb4 	bl	21bde <bt_gatt_change_aware>
    d276:	b390      	cbz	r0, d2de <att_read_rsp+0x82>
	if (!handle) {
    d278:	b39e      	cbz	r6, d2e2 <att_read_rsp+0x86>
	(void)memset(&data, 0, sizeof(data));
    d27a:	2214      	movs	r2, #20
    d27c:	2100      	movs	r1, #0
    d27e:	a801      	add	r0, sp, #4
    d280:	f012 fe24 	bl	1fecc <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    d284:	2200      	movs	r2, #0
    d286:	4621      	mov	r1, r4
    d288:	4640      	mov	r0, r8
    d28a:	f7ff fe31 	bl	cef0 <bt_att_create_pdu>
    d28e:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    d290:	b348      	cbz	r0, d2e6 <att_read_rsp+0x8a>
	data.offset = offset;
    d292:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    d296:	f8ad 3008 	strh.w	r3, [sp, #8]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    d29a:	2301      	movs	r3, #1
    d29c:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    d2a0:	4a12      	ldr	r2, [pc, #72]	; (d2ec <att_read_rsp+0x90>)
	data.chan = chan;
    d2a2:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    d2a4:	ab01      	add	r3, sp, #4
    d2a6:	4631      	mov	r1, r6
    d2a8:	4630      	mov	r0, r6
    d2aa:	f013 fdd1 	bl	20e50 <bt_gatt_foreach_attr>
	if (data.err) {
    d2ae:	f89d 4014 	ldrb.w	r4, [sp, #20]
    d2b2:	b174      	cbz	r4, d2d2 <att_read_rsp+0x76>
		net_buf_unref(data.buf);
    d2b4:	9803      	ldr	r0, [sp, #12]
    d2b6:	f00e fc13 	bl	1bae0 <net_buf_unref>
	if (!req) {
    d2ba:	f89d 3014 	ldrb.w	r3, [sp, #20]
    d2be:	4632      	mov	r2, r6
    d2c0:	4639      	mov	r1, r7
    d2c2:	4628      	mov	r0, r5
    d2c4:	f7ff fce0 	bl	cc88 <send_err_rsp.part.0>
		return 0;
    d2c8:	2400      	movs	r4, #0
}
    d2ca:	4620      	mov	r0, r4
    d2cc:	b006      	add	sp, #24
    d2ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    d2d2:	4a07      	ldr	r2, [pc, #28]	; (d2f0 <att_read_rsp+0x94>)
    d2d4:	9903      	ldr	r1, [sp, #12]
    d2d6:	4628      	mov	r0, r5
    d2d8:	f013 ffa5 	bl	21226 <bt_att_chan_send_rsp>
	return 0;
    d2dc:	e7f5      	b.n	d2ca <att_read_rsp+0x6e>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    d2de:	2412      	movs	r4, #18
    d2e0:	e7f3      	b.n	d2ca <att_read_rsp+0x6e>
		return BT_ATT_ERR_INVALID_HANDLE;
    d2e2:	2401      	movs	r4, #1
    d2e4:	e7f1      	b.n	d2ca <att_read_rsp+0x6e>
		return BT_ATT_ERR_UNLIKELY;
    d2e6:	240e      	movs	r4, #14
    d2e8:	e7ef      	b.n	d2ca <att_read_rsp+0x6e>
    d2ea:	bf00      	nop
    d2ec:	000210cb 	.word	0x000210cb
    d2f0:	00021053 	.word	0x00021053

0000d2f4 <att_read_type_req>:
{
    d2f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    d2f8:	7b0c      	ldrb	r4, [r1, #12]
    d2fa:	3c04      	subs	r4, #4
    d2fc:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    d2fe:	2c02      	cmp	r4, #2
{
    d300:	4605      	mov	r5, r0
    d302:	b08c      	sub	sp, #48	; 0x30
    d304:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    d306:	d001      	beq.n	d30c <att_read_type_req+0x18>
    d308:	2c10      	cmp	r4, #16
    d30a:	d150      	bne.n	d3ae <att_read_type_req+0xba>
	req = net_buf_pull_mem(buf, sizeof(*req));
    d30c:	2104      	movs	r1, #4
    d30e:	3008      	adds	r0, #8
    d310:	f015 f97f 	bl	22612 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    d314:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
    d318:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    d31a:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    d31c:	1d01      	adds	r1, r0, #4
    d31e:	4622      	mov	r2, r4
    d320:	4640      	mov	r0, r8
    d322:	f012 fea1 	bl	20068 <bt_uuid_create>
    d326:	b188      	cbz	r0, d34c <att_read_type_req+0x58>
	if (!start || !end) {
    d328:	b19e      	cbz	r6, d352 <att_read_type_req+0x5e>
    d32a:	b18f      	cbz	r7, d350 <att_read_type_req+0x5c>
	if (start > end) {
    d32c:	42b7      	cmp	r7, r6
    d32e:	d310      	bcc.n	d352 <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
    d330:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
    d332:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    d334:	2100      	movs	r1, #0
    d336:	eb0d 0002 	add.w	r0, sp, r2
    d33a:	f012 fdc7 	bl	1fecc <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    d33e:	2201      	movs	r2, #1
    d340:	2109      	movs	r1, #9
    d342:	4620      	mov	r0, r4
    d344:	f7ff fdd4 	bl	cef0 <bt_att_create_pdu>
    d348:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
    d34a:	b968      	cbnz	r0, d368 <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
    d34c:	240e      	movs	r4, #14
    d34e:	e007      	b.n	d360 <att_read_type_req+0x6c>
			*err = 0U;
    d350:	463e      	mov	r6, r7
	if (!req) {
    d352:	2301      	movs	r3, #1
    d354:	4632      	mov	r2, r6
    d356:	2108      	movs	r1, #8
    d358:	4628      	mov	r0, r5
    d35a:	f7ff fc95 	bl	cc88 <send_err_rsp.part.0>
		return 0;
    d35e:	2400      	movs	r4, #0
}
    d360:	4620      	mov	r0, r4
    d362:	b00c      	add	sp, #48	; 0x30
    d364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    d368:	2101      	movs	r1, #1
    d36a:	3008      	adds	r0, #8
	data.uuid = uuid;
    d36c:	e9cd 5806 	strd	r5, r8, [sp, #24]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    d370:	f015 f912 	bl	22598 <net_buf_simple_add>
	data.rsp->len = 0U;
    d374:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    d378:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    d37a:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    d37c:	4a0d      	ldr	r2, [pc, #52]	; (d3b4 <att_read_type_req+0xc0>)
	data.rsp->len = 0U;
    d37e:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    d382:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    d384:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    d388:	4630      	mov	r0, r6
    d38a:	ab06      	add	r3, sp, #24
    d38c:	f013 fd60 	bl	20e50 <bt_gatt_foreach_attr>
	if (data.err) {
    d390:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
    d394:	b12c      	cbz	r4, d3a2 <att_read_type_req+0xae>
		net_buf_unref(data.buf);
    d396:	9808      	ldr	r0, [sp, #32]
    d398:	f00e fba2 	bl	1bae0 <net_buf_unref>
	if (!req) {
    d39c:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    d3a0:	e7d8      	b.n	d354 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    d3a2:	4a05      	ldr	r2, [pc, #20]	; (d3b8 <att_read_type_req+0xc4>)
    d3a4:	9908      	ldr	r1, [sp, #32]
    d3a6:	4628      	mov	r0, r5
    d3a8:	f013 ff3d 	bl	21226 <bt_att_chan_send_rsp>
	return 0;
    d3ac:	e7d8      	b.n	d360 <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
    d3ae:	2404      	movs	r4, #4
    d3b0:	e7d6      	b.n	d360 <att_read_type_req+0x6c>
    d3b2:	bf00      	nop
    d3b4:	0000c6b1 	.word	0x0000c6b1
    d3b8:	00021053 	.word	0x00021053

0000d3bc <att_find_type_req>:
{
    d3bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d3c0:	4688      	mov	r8, r1
    d3c2:	b086      	sub	sp, #24
    d3c4:	4605      	mov	r5, r0
	req = net_buf_pull_mem(buf, sizeof(*req));
    d3c6:	2106      	movs	r1, #6
    d3c8:	f108 0008 	add.w	r0, r8, #8
    d3cc:	f015 f921 	bl	22612 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
    d3d0:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
    d3d2:	b317      	cbz	r7, d41a <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
    d3d4:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
    d3d8:	f1b9 0f00 	cmp.w	r9, #0
    d3dc:	d01c      	beq.n	d418 <att_find_type_req+0x5c>
	if (start > end) {
    d3de:	454f      	cmp	r7, r9
    d3e0:	d81b      	bhi.n	d41a <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
    d3e2:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    d3e4:	f8ad 3002 	strh.w	r3, [sp, #2]
    d3e8:	2400      	movs	r4, #0
    d3ea:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    d3ee:	a901      	add	r1, sp, #4
    d3f0:	4668      	mov	r0, sp
	value = buf->data;
    d3f2:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    d3f6:	f88d 4000 	strb.w	r4, [sp]
    d3fa:	f88d 4004 	strb.w	r4, [sp, #4]
    d3fe:	f8ad 3006 	strh.w	r3, [sp, #6]
    d402:	f012 fe07 	bl	20014 <bt_uuid_cmp>
    d406:	4606      	mov	r6, r0
    d408:	b190      	cbz	r0, d430 <att_find_type_req+0x74>
	if (!req) {
    d40a:	230a      	movs	r3, #10
    d40c:	463a      	mov	r2, r7
    d40e:	2106      	movs	r1, #6
    d410:	4628      	mov	r0, r5
    d412:	f7ff fc39 	bl	cc88 <send_err_rsp.part.0>
		return 0;
    d416:	e007      	b.n	d428 <att_find_type_req+0x6c>
			*err = 0U;
    d418:	464f      	mov	r7, r9
	if (!req) {
    d41a:	2301      	movs	r3, #1
    d41c:	463a      	mov	r2, r7
    d41e:	2106      	movs	r1, #6
    d420:	4628      	mov	r0, r5
    d422:	f7ff fc31 	bl	cc88 <send_err_rsp.part.0>
		return 0;
    d426:	2400      	movs	r4, #0
}
    d428:	4620      	mov	r0, r4
    d42a:	b006      	add	sp, #24
    d42c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    d430:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
    d434:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    d438:	4601      	mov	r1, r0
    d43a:	2214      	movs	r2, #20
    d43c:	a801      	add	r0, sp, #4
    d43e:	f012 fd45 	bl	1fecc <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    d442:	4632      	mov	r2, r6
    d444:	2107      	movs	r1, #7
    d446:	4640      	mov	r0, r8
    d448:	f7ff fd52 	bl	cef0 <bt_att_create_pdu>
    d44c:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    d44e:	b1e0      	cbz	r0, d48a <att_find_type_req+0xce>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    d450:	230a      	movs	r3, #10
    d452:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    d456:	4a0e      	ldr	r2, [pc, #56]	; (d490 <att_find_type_req+0xd4>)
	data.value_len = value_len;
    d458:	f88d 4014 	strb.w	r4, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    d45c:	ab01      	add	r3, sp, #4
    d45e:	4649      	mov	r1, r9
    d460:	4638      	mov	r0, r7
	data.value = value;
    d462:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
    d466:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    d468:	f013 fcf2 	bl	20e50 <bt_gatt_foreach_attr>
	if (data.err) {
    d46c:	f89d 4015 	ldrb.w	r4, [sp, #21]
    d470:	b12c      	cbz	r4, d47e <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
    d472:	9802      	ldr	r0, [sp, #8]
    d474:	f00e fb34 	bl	1bae0 <net_buf_unref>
	if (!req) {
    d478:	f89d 3015 	ldrb.w	r3, [sp, #21]
    d47c:	e7ce      	b.n	d41c <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    d47e:	4a05      	ldr	r2, [pc, #20]	; (d494 <att_find_type_req+0xd8>)
    d480:	9902      	ldr	r1, [sp, #8]
    d482:	4628      	mov	r0, r5
    d484:	f013 fecf 	bl	21226 <bt_att_chan_send_rsp>
	return 0;
    d488:	e7ce      	b.n	d428 <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
    d48a:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    d48c:	e7cc      	b.n	d428 <att_find_type_req+0x6c>
    d48e:	bf00      	nop
    d490:	0000c755 	.word	0x0000c755
    d494:	00021053 	.word	0x00021053

0000d498 <att_find_info_req>:
{
    d498:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
    d49a:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
    d49c:	881e      	ldrh	r6, [r3, #0]
{
    d49e:	b085      	sub	sp, #20
    d4a0:	4605      	mov	r5, r0
	if (!start || !end) {
    d4a2:	b19e      	cbz	r6, d4cc <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
    d4a4:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
    d4a6:	b184      	cbz	r4, d4ca <att_find_info_req+0x32>
	if (start > end) {
    d4a8:	42b4      	cmp	r4, r6
    d4aa:	d30f      	bcc.n	d4cc <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
    d4ac:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
    d4ae:	2210      	movs	r2, #16
    d4b0:	2100      	movs	r1, #0
    d4b2:	4668      	mov	r0, sp
    d4b4:	f012 fd0a 	bl	1fecc <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    d4b8:	2200      	movs	r2, #0
    d4ba:	2105      	movs	r1, #5
    d4bc:	4638      	mov	r0, r7
    d4be:	f7ff fd17 	bl	cef0 <bt_att_create_pdu>
    d4c2:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
    d4c4:	b958      	cbnz	r0, d4de <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
    d4c6:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
    d4c8:	e007      	b.n	d4da <att_find_info_req+0x42>
			*err = 0U;
    d4ca:	4626      	mov	r6, r4
	if (!req) {
    d4cc:	2301      	movs	r3, #1
    d4ce:	4632      	mov	r2, r6
    d4d0:	2104      	movs	r1, #4
    d4d2:	4628      	mov	r0, r5
    d4d4:	f7ff fbd8 	bl	cc88 <send_err_rsp.part.0>
	return 0;
    d4d8:	2000      	movs	r0, #0
}
    d4da:	b005      	add	sp, #20
    d4dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    d4de:	4621      	mov	r1, r4
    d4e0:	4a09      	ldr	r2, [pc, #36]	; (d508 <att_find_info_req+0x70>)
	data.chan = chan;
    d4e2:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    d4e4:	466b      	mov	r3, sp
    d4e6:	4630      	mov	r0, r6
    d4e8:	f013 fcb2 	bl	20e50 <bt_gatt_foreach_attr>
	if (!data.rsp) {
    d4ec:	9c02      	ldr	r4, [sp, #8]
    d4ee:	b924      	cbnz	r4, d4fa <att_find_info_req+0x62>
		net_buf_unref(data.buf);
    d4f0:	9801      	ldr	r0, [sp, #4]
    d4f2:	f00e faf5 	bl	1bae0 <net_buf_unref>
	if (!req) {
    d4f6:	230a      	movs	r3, #10
    d4f8:	e7e9      	b.n	d4ce <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    d4fa:	4a04      	ldr	r2, [pc, #16]	; (d50c <att_find_info_req+0x74>)
    d4fc:	9901      	ldr	r1, [sp, #4]
    d4fe:	4628      	mov	r0, r5
    d500:	f013 fe91 	bl	21226 <bt_att_chan_send_rsp>
    d504:	e7e8      	b.n	d4d8 <att_find_info_req+0x40>
    d506:	bf00      	nop
    d508:	00020e67 	.word	0x00020e67
    d50c:	00021053 	.word	0x00021053

0000d510 <att_mtu_req>:
{
    d510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
    d512:	6803      	ldr	r3, [r0, #0]
{
    d514:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
    d516:	6818      	ldr	r0, [r3, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    d518:	f3bf 8f5b 	dmb	ish
    d51c:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
    d520:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
    d524:	f3c3 04c0 	ubfx	r4, r3, #3, #1
    d528:	071b      	lsls	r3, r3, #28
    d52a:	d41f      	bmi.n	d56c <att_mtu_req+0x5c>
	mtu_client = sys_le16_to_cpu(req->mtu);
    d52c:	688b      	ldr	r3, [r1, #8]
    d52e:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    d530:	2e16      	cmp	r6, #22
    d532:	d91d      	bls.n	d570 <att_mtu_req+0x60>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
    d534:	2202      	movs	r2, #2
    d536:	2103      	movs	r1, #3
    d538:	f7ff fcda 	bl	cef0 <bt_att_create_pdu>
	if (!pdu) {
    d53c:	4607      	mov	r7, r0
    d53e:	b1c8      	cbz	r0, d574 <att_mtu_req+0x64>
	rsp = net_buf_add(pdu, sizeof(*rsp));
    d540:	2102      	movs	r1, #2
    d542:	3008      	adds	r0, #8
    d544:	f015 f828 	bl	22598 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
    d548:	f06f 0308 	mvn.w	r3, #8
    d54c:	7003      	strb	r3, [r0, #0]
    d54e:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
    d550:	4a09      	ldr	r2, [pc, #36]	; (d578 <att_mtu_req+0x68>)
    d552:	4628      	mov	r0, r5
    d554:	4639      	mov	r1, r7
    d556:	f013 fe66 	bl	21226 <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
    d55a:	2ef7      	cmp	r6, #247	; 0xf7
    d55c:	bf28      	it	cs
    d55e:	26f7      	movcs	r6, #247	; 0xf7
    d560:	f8a5 605a 	strh.w	r6, [r5, #90]	; 0x5a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
    d564:	f8a5 6066 	strh.w	r6, [r5, #102]	; 0x66
	return 0;
    d568:	4620      	mov	r0, r4
}
    d56a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
    d56c:	2006      	movs	r0, #6
    d56e:	e7fc      	b.n	d56a <att_mtu_req+0x5a>
		return BT_ATT_ERR_INVALID_PDU;
    d570:	2004      	movs	r0, #4
    d572:	e7fa      	b.n	d56a <att_mtu_req+0x5a>
		return BT_ATT_ERR_UNLIKELY;
    d574:	200e      	movs	r0, #14
    d576:	e7f8      	b.n	d56a <att_mtu_req+0x5a>
    d578:	00021053 	.word	0x00021053

0000d57c <bt_att_req_alloc>:

	return mtu;
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
    d57c:	b513      	push	{r0, r1, r4, lr}
    d57e:	4602      	mov	r2, r0
    d580:	460b      	mov	r3, r1
	struct bt_att_req *req = NULL;

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    d582:	4808      	ldr	r0, [pc, #32]	; (d5a4 <bt_att_req_alloc+0x28>)
    d584:	a901      	add	r1, sp, #4
	struct bt_att_req *req = NULL;
    d586:	2400      	movs	r4, #0
    d588:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    d58a:	f00f fc41 	bl	1ce10 <k_mem_slab_alloc>
    d58e:	4601      	mov	r1, r0
    d590:	b930      	cbnz	r0, d5a0 <bt_att_req_alloc+0x24>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
    d592:	9801      	ldr	r0, [sp, #4]
    d594:	221c      	movs	r2, #28
    d596:	f012 fc99 	bl	1fecc <memset>

	return req;
    d59a:	9801      	ldr	r0, [sp, #4]
}
    d59c:	b002      	add	sp, #8
    d59e:	bd10      	pop	{r4, pc}
		return NULL;
    d5a0:	4620      	mov	r0, r4
    d5a2:	e7fb      	b.n	d59c <bt_att_req_alloc+0x20>
    d5a4:	200007d0 	.word	0x200007d0

0000d5a8 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
    d5a8:	b507      	push	{r0, r1, r2, lr}
    d5aa:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	k_mem_slab_free(&req_slab, (void **)&req);
    d5ac:	a901      	add	r1, sp, #4
    d5ae:	4803      	ldr	r0, [pc, #12]	; (d5bc <bt_att_req_free+0x14>)
    d5b0:	f00f fc60 	bl	1ce74 <k_mem_slab_free>
}
    d5b4:	b003      	add	sp, #12
    d5b6:	f85d fb04 	ldr.w	pc, [sp], #4
    d5ba:	bf00      	nop
    d5bc:	200007d0 	.word	0x200007d0

0000d5c0 <att_handle_rsp>:
{
    d5c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d5c4:	4605      	mov	r5, r0
    d5c6:	b085      	sub	sp, #20
	k_delayed_work_cancel(&chan->timeout_work);
    d5c8:	30e8      	adds	r0, #232	; 0xe8
{
    d5ca:	4689      	mov	r9, r1
    d5cc:	4692      	mov	sl, r2
    d5ce:	4698      	mov	r8, r3
	k_delayed_work_cancel(&chan->timeout_work);
    d5d0:	f015 fd9a 	bl	23108 <k_delayed_work_cancel>
	if (!chan->req) {
    d5d4:	f8d5 40cc 	ldr.w	r4, [r5, #204]	; 0xcc
    d5d8:	bb64      	cbnz	r4, d634 <att_handle_rsp+0x74>
    d5da:	4932      	ldr	r1, [pc, #200]	; (d6a4 <att_handle_rsp+0xe4>)
    d5dc:	4b32      	ldr	r3, [pc, #200]	; (d6a8 <att_handle_rsp+0xe8>)
		BT_WARN("No pending ATT request");
    d5de:	4833      	ldr	r0, [pc, #204]	; (d6ac <att_handle_rsp+0xec>)
    d5e0:	1ac9      	subs	r1, r1, r3
    d5e2:	08c9      	lsrs	r1, r1, #3
    d5e4:	0189      	lsls	r1, r1, #6
    d5e6:	f041 0102 	orr.w	r1, r1, #2
    d5ea:	f010 ff72 	bl	1e4d2 <log_0>
	att_process(chan->att);
    d5ee:	f8d5 b000 	ldr.w	fp, [r5]
	node = sys_slist_get(&att->reqs);
    d5f2:	f10b 0004 	add.w	r0, fp, #4
    d5f6:	f013 fba2 	bl	20d3e <sys_slist_get>
	if (!node) {
    d5fa:	4607      	mov	r7, r0
    d5fc:	2800      	cmp	r0, #0
    d5fe:	d039      	beq.n	d674 <att_handle_rsp+0xb4>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    d600:	f8db 203c 	ldr.w	r2, [fp, #60]	; 0x3c
    d604:	b15a      	cbz	r2, d61e <att_handle_rsp+0x5e>
    d606:	f5b2 709a 	subs.w	r0, r2, #308	; 0x134
    d60a:	d008      	beq.n	d61e <att_handle_rsp+0x5e>
    d60c:	6816      	ldr	r6, [r2, #0]
    d60e:	b10e      	cbz	r6, d614 <att_handle_rsp+0x54>
    d610:	f5a6 769a 	sub.w	r6, r6, #308	; 0x134
		if (!chan->req) {
    d614:	f8d0 20cc 	ldr.w	r2, [r0, #204]	; 0xcc
    d618:	b33a      	cbz	r2, d66a <att_handle_rsp+0xaa>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    d61a:	2e00      	cmp	r6, #0
    d61c:	d137      	bne.n	d68e <att_handle_rsp+0xce>
Z_GENLIST_PREPEND(slist, snode)
    d61e:	f8db 2004 	ldr.w	r2, [fp, #4]
	parent->next = child;
    d622:	603a      	str	r2, [r7, #0]
Z_GENLIST_PREPEND(slist, snode)
    d624:	f8db 2008 	ldr.w	r2, [fp, #8]
	list->head = node;
    d628:	f8cb 7004 	str.w	r7, [fp, #4]
Z_GENLIST_PREPEND(slist, snode)
    d62c:	bb12      	cbnz	r2, d674 <att_handle_rsp+0xb4>
	list->tail = node;
    d62e:	f8cb 7008 	str.w	r7, [fp, #8]
}
    d632:	e01f      	b.n	d674 <att_handle_rsp+0xb4>
	if (chan->req == &cancel) {
    d634:	4b1e      	ldr	r3, [pc, #120]	; (d6b0 <att_handle_rsp+0xf0>)
    d636:	429c      	cmp	r4, r3
    d638:	d103      	bne.n	d642 <att_handle_rsp+0x82>
		chan->req = NULL;
    d63a:	2400      	movs	r4, #0
    d63c:	f8c5 40cc 	str.w	r4, [r5, #204]	; 0xcc
		goto process;
    d640:	e7d5      	b.n	d5ee <att_handle_rsp+0x2e>
	if (chan->req->buf) {
    d642:	6920      	ldr	r0, [r4, #16]
    d644:	b128      	cbz	r0, d652 <att_handle_rsp+0x92>
		net_buf_unref(chan->req->buf);
    d646:	f00e fa4b 	bl	1bae0 <net_buf_unref>
		chan->req->buf = NULL;
    d64a:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
    d64e:	2200      	movs	r2, #0
    d650:	611a      	str	r2, [r3, #16]
	func = chan->req->func;
    d652:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
	chan->req->func = NULL;
    d656:	2600      	movs	r6, #0
	func = chan->req->func;
    d658:	6844      	ldr	r4, [r0, #4]
	params = chan->req->user_data;
    d65a:	6983      	ldr	r3, [r0, #24]
	chan->req->func = NULL;
    d65c:	6046      	str	r6, [r0, #4]
	params = chan->req->user_data;
    d65e:	9303      	str	r3, [sp, #12]
	att_req_destroy(chan->req);
    d660:	f013 fe8f 	bl	21382 <att_req_destroy>
	chan->req = NULL;
    d664:	f8c5 60cc 	str.w	r6, [r5, #204]	; 0xcc
    d668:	e7c1      	b.n	d5ee <att_handle_rsp+0x2e>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
    d66a:	4639      	mov	r1, r7
    d66c:	f013 fd87 	bl	2117e <bt_att_chan_req_send>
    d670:	2800      	cmp	r0, #0
    d672:	dbd2      	blt.n	d61a <att_handle_rsp+0x5a>
	if (func) {
    d674:	b13c      	cbz	r4, d686 <att_handle_rsp+0xc6>
		func(chan->att->conn, err, pdu, len, params);
    d676:	9b03      	ldr	r3, [sp, #12]
    d678:	6828      	ldr	r0, [r5, #0]
    d67a:	9300      	str	r3, [sp, #0]
    d67c:	6800      	ldr	r0, [r0, #0]
    d67e:	4653      	mov	r3, sl
    d680:	464a      	mov	r2, r9
    d682:	4641      	mov	r1, r8
    d684:	47a0      	blx	r4
}
    d686:	2000      	movs	r0, #0
    d688:	b005      	add	sp, #20
    d68a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
    d68e:	f516 729a 	adds.w	r2, r6, #308	; 0x134
    d692:	d004      	beq.n	d69e <att_handle_rsp+0xde>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    d694:	f8d6 2134 	ldr.w	r2, [r6, #308]	; 0x134
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    d698:	b10a      	cbz	r2, d69e <att_handle_rsp+0xde>
    d69a:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
	bt_att_func_t func = NULL;
    d69e:	4630      	mov	r0, r6
    d6a0:	4616      	mov	r6, r2
    d6a2:	e7b7      	b.n	d614 <att_handle_rsp+0x54>
    d6a4:	000236f0 	.word	0x000236f0
    d6a8:	000236f0 	.word	0x000236f0
    d6ac:	000268a3 	.word	0x000268a3
    d6b0:	20001f9c 	.word	0x20001f9c

0000d6b4 <att_error_rsp>:
	if (!chan->req || chan->req == &cancel) {
    d6b4:	f8d0 20cc 	ldr.w	r2, [r0, #204]	; 0xcc
{
    d6b8:	b570      	push	{r4, r5, r6, lr}
    d6ba:	4604      	mov	r4, r0
	if (!chan->req || chan->req == &cancel) {
    d6bc:	b352      	cbz	r2, d714 <att_error_rsp+0x60>
    d6be:	4b1a      	ldr	r3, [pc, #104]	; (d728 <att_error_rsp+0x74>)
    d6c0:	429a      	cmp	r2, r3
    d6c2:	d027      	beq.n	d714 <att_error_rsp+0x60>
	if (chan->req->buf) {
    d6c4:	6913      	ldr	r3, [r2, #16]
	rsp = (void *)buf->data;
    d6c6:	6888      	ldr	r0, [r1, #8]
	if (chan->req->buf) {
    d6c8:	b12b      	cbz	r3, d6d6 <att_error_rsp+0x22>
	buf->data = buf->__buf + state->offset;
    d6ca:	8995      	ldrh	r5, [r2, #12]
    d6cc:	6919      	ldr	r1, [r3, #16]
    d6ce:	4429      	add	r1, r5
    d6d0:	6099      	str	r1, [r3, #8]
	buf->len = state->len;
    d6d2:	89d1      	ldrh	r1, [r2, #14]
    d6d4:	8199      	strh	r1, [r3, #12]
	if (chan->req->retrying) {
    d6d6:	7d13      	ldrb	r3, [r2, #20]
	err = rsp->error;
    d6d8:	78c5      	ldrb	r5, [r0, #3]
	if (chan->req->retrying) {
    d6da:	b9e3      	cbnz	r3, d716 <att_error_rsp+0x62>
	switch (err) {
    d6dc:	2d05      	cmp	r5, #5
	if (!att_change_security(chan->chan.chan.conn, err)) {
    d6de:	68a0      	ldr	r0, [r4, #8]
	switch (err) {
    d6e0:	d006      	beq.n	d6f0 <att_error_rsp+0x3c>
    d6e2:	2d0f      	cmp	r5, #15
    d6e4:	d117      	bne.n	d716 <att_error_rsp+0x62>
		if (conn->sec_level >= BT_SECURITY_L2)
    d6e6:	7a43      	ldrb	r3, [r0, #9]
    d6e8:	2b01      	cmp	r3, #1
    d6ea:	d814      	bhi.n	d716 <att_error_rsp+0x62>
		sec = BT_SECURITY_L2;
    d6ec:	2102      	movs	r1, #2
    d6ee:	e007      	b.n	d700 <att_error_rsp+0x4c>
		if (conn->sec_level < BT_SECURITY_L2) {
    d6f0:	7a43      	ldrb	r3, [r0, #9]
    d6f2:	2b01      	cmp	r3, #1
    d6f4:	d9fa      	bls.n	d6ec <att_error_rsp+0x38>
		} else if (conn->sec_level < BT_SECURITY_L3) {
    d6f6:	2b02      	cmp	r3, #2
    d6f8:	d00a      	beq.n	d710 <att_error_rsp+0x5c>
		} else if (conn->sec_level < BT_SECURITY_L4) {
    d6fa:	2b03      	cmp	r3, #3
    d6fc:	d10b      	bne.n	d716 <att_error_rsp+0x62>
			sec = BT_SECURITY_L4;
    d6fe:	2104      	movs	r1, #4
	return bt_conn_set_security(conn, sec);
    d700:	f012 ff28 	bl	20554 <bt_conn_set_security>
	if (!att_change_security(chan->chan.chan.conn, err)) {
    d704:	b938      	cbnz	r0, d716 <att_error_rsp+0x62>
		chan->req->retrying = true;
    d706:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
    d70a:	2201      	movs	r2, #1
    d70c:	751a      	strb	r2, [r3, #20]
}
    d70e:	bd70      	pop	{r4, r5, r6, pc}
			sec = BT_SECURITY_L3;
    d710:	2103      	movs	r1, #3
    d712:	e7f5      	b.n	d700 <att_error_rsp+0x4c>
		err = BT_ATT_ERR_UNLIKELY;
    d714:	250e      	movs	r5, #14
	return att_handle_rsp(chan, NULL, 0, err);
    d716:	2200      	movs	r2, #0
    d718:	462b      	mov	r3, r5
    d71a:	4620      	mov	r0, r4
    d71c:	4611      	mov	r1, r2
}
    d71e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return att_handle_rsp(chan, NULL, 0, err);
    d722:	f7ff bf4d 	b.w	d5c0 <att_handle_rsp>
    d726:	bf00      	nop
    d728:	20001f9c 	.word	0x20001f9c

0000d72c <bt_att_encrypt_change>:
{
    d72c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d730:	4605      	mov	r5, r0
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
    d732:	f1a0 0608 	sub.w	r6, r0, #8
	if (hci_status) {
    d736:	460c      	mov	r4, r1
    d738:	b139      	cbz	r1, d74a <bt_att_encrypt_change+0x1e>
		att_handle_rsp(att_chan, NULL, 0, BT_ATT_ERR_AUTHENTICATION);
    d73a:	2200      	movs	r2, #0
    d73c:	4630      	mov	r0, r6
    d73e:	2305      	movs	r3, #5
}
    d740:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		att_handle_rsp(att_chan, NULL, 0, BT_ATT_ERR_AUTHENTICATION);
    d744:	4611      	mov	r1, r2
    d746:	f7ff bf3b 	b.w	d5c0 <att_handle_rsp>
	struct bt_conn *conn = ch->chan.conn;
    d74a:	6807      	ldr	r7, [r0, #0]
	bt_gatt_encrypt_change(conn);
    d74c:	4638      	mov	r0, r7
    d74e:	f000 ffab 	bl	e6a8 <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
    d752:	7a7b      	ldrb	r3, [r7, #9]
    d754:	2b01      	cmp	r3, #1
    d756:	d018      	beq.n	d78a <bt_att_encrypt_change+0x5e>
	if (!att_chan->req || !att_chan->req->retrying) {
    d758:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
    d75c:	b1ab      	cbz	r3, d78a <bt_att_encrypt_change+0x5e>
    d75e:	7d1a      	ldrb	r2, [r3, #20]
    d760:	b19a      	cbz	r2, d78a <bt_att_encrypt_change+0x5e>
	bt_att_chan_send_rsp(att_chan, att_chan->req->buf,
    d762:	6919      	ldr	r1, [r3, #16]
	switch (att_op_get_type(buf->data[0])) {
    d764:	688b      	ldr	r3, [r1, #8]
    d766:	7818      	ldrb	r0, [r3, #0]
    d768:	f013 fb2c 	bl	20dc4 <att_op_get_type>
    d76c:	1e43      	subs	r3, r0, #1
    d76e:	b2db      	uxtb	r3, r3
    d770:	2b04      	cmp	r3, #4
    d772:	bf96      	itet	ls
    d774:	4a06      	ldrls	r2, [pc, #24]	; (d790 <bt_att_encrypt_change+0x64>)
    d776:	4622      	movhi	r2, r4
    d778:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
	bt_att_chan_send_rsp(att_chan, att_chan->req->buf,
    d77c:	4630      	mov	r0, r6
    d77e:	f013 fd52 	bl	21226 <bt_att_chan_send_rsp>
	att_chan->req->buf = NULL;
    d782:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
    d786:	2200      	movs	r2, #0
    d788:	611a      	str	r2, [r3, #16]
}
    d78a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d78e:	bf00      	nop
    d790:	00023d1c 	.word	0x00023d1c

0000d794 <att_reset>:
{
    d794:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    d796:	9003      	str	r0, [sp, #12]
	while ((buf = net_buf_get(&att->prep_queue, K_NO_WAIT))) {
    d798:	9803      	ldr	r0, [sp, #12]
    d79a:	2200      	movs	r2, #0
    d79c:	2300      	movs	r3, #0
    d79e:	3024      	adds	r0, #36	; 0x24
    d7a0:	f014 fe97 	bl	224d2 <net_buf_get>
    d7a4:	b980      	cbnz	r0, d7c8 <att_reset+0x34>
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
    d7a6:	9803      	ldr	r0, [sp, #12]
    d7a8:	2200      	movs	r2, #0
    d7aa:	2300      	movs	r3, #0
    d7ac:	300c      	adds	r0, #12
    d7ae:	f014 fe90 	bl	224d2 <net_buf_get>
    d7b2:	b960      	cbnz	r0, d7ce <att_reset+0x3a>
	att->conn = NULL;
    d7b4:	9a03      	ldr	r2, [sp, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    d7b6:	6855      	ldr	r5, [r2, #4]
	att->conn = NULL;
    d7b8:	6010      	str	r0, [r2, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    d7ba:	b95d      	cbnz	r5, d7d4 <att_reset+0x40>
	k_mem_slab_free(&att_slab, (void **)&att);
    d7bc:	4812      	ldr	r0, [pc, #72]	; (d808 <att_reset+0x74>)
    d7be:	a903      	add	r1, sp, #12
    d7c0:	f00f fb58 	bl	1ce74 <k_mem_slab_free>
}
    d7c4:	b004      	add	sp, #16
    d7c6:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
    d7c8:	f00e f98a 	bl	1bae0 <net_buf_unref>
    d7cc:	e7e4      	b.n	d798 <att_reset+0x4>
		net_buf_unref(buf);
    d7ce:	f00e f987 	bl	1bae0 <net_buf_unref>
    d7d2:	e7e8      	b.n	d7a6 <att_reset+0x12>
	return node->next;
    d7d4:	682c      	ldr	r4, [r5, #0]
    d7d6:	2c00      	cmp	r4, #0
    d7d8:	bf38      	it	cc
    d7da:	2400      	movcc	r4, #0
		if (req->func) {
    d7dc:	686e      	ldr	r6, [r5, #4]
    d7de:	b136      	cbz	r6, d7ee <att_reset+0x5a>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
    d7e0:	69ab      	ldr	r3, [r5, #24]
    d7e2:	9300      	str	r3, [sp, #0]
    d7e4:	2300      	movs	r3, #0
    d7e6:	461a      	mov	r2, r3
    d7e8:	210e      	movs	r1, #14
    d7ea:	4618      	mov	r0, r3
    d7ec:	47b0      	blx	r6
		att_req_destroy(req);
    d7ee:	4628      	mov	r0, r5
    d7f0:	f013 fdc7 	bl	21382 <att_req_destroy>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    d7f4:	2c00      	cmp	r4, #0
    d7f6:	d0e1      	beq.n	d7bc <att_reset+0x28>
    d7f8:	6823      	ldr	r3, [r4, #0]
    d7fa:	2b00      	cmp	r3, #0
    d7fc:	bf38      	it	cc
    d7fe:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    d800:	4625      	mov	r5, r4
    d802:	461c      	mov	r4, r3
    d804:	e7ea      	b.n	d7dc <att_reset+0x48>
    d806:	bf00      	nop
    d808:	20000798 	.word	0x20000798

0000d80c <att_timeout>:
    d80c:	4b0e      	ldr	r3, [pc, #56]	; (d848 <att_timeout+0x3c>)
    d80e:	490f      	ldr	r1, [pc, #60]	; (d84c <att_timeout+0x40>)
{
    d810:	b570      	push	{r4, r5, r6, lr}
    d812:	1ac9      	subs	r1, r1, r3
	struct bt_att *att = chan->att;
    d814:	4605      	mov	r5, r0
    d816:	08c9      	lsrs	r1, r1, #3
    d818:	f855 6de8 	ldr.w	r6, [r5, #-232]!
	BT_ERR("ATT Timeout");
    d81c:	0189      	lsls	r1, r1, #6
    d81e:	f041 0101 	orr.w	r1, r1, #1
{
    d822:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
    d824:	480a      	ldr	r0, [pc, #40]	; (d850 <att_timeout+0x44>)
    d826:	f010 fe54 	bl	1e4d2 <log_0>
	att_chan_detach(chan);
    d82a:	4628      	mov	r0, r5
    d82c:	f013 fde7 	bl	213fe <att_chan_detach>
	if (!sys_slist_is_empty(&att->chans)) {
    d830:	6bf5      	ldr	r5, [r6, #60]	; 0x3c
    d832:	b945      	cbnz	r5, d846 <att_timeout+0x3a>
	att_reset(att);
    d834:	4630      	mov	r0, r6
    d836:	f7ff ffad 	bl	d794 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    d83a:	f854 0ce0 	ldr.w	r0, [r4, #-224]
    d83e:	f000 ff69 	bl	e714 <bt_gatt_disconnected>
	ch->chan.conn = NULL;
    d842:	f844 5ce0 	str.w	r5, [r4, #-224]
}
    d846:	bd70      	pop	{r4, r5, r6, pc}
    d848:	000236f0 	.word	0x000236f0
    d84c:	000236f0 	.word	0x000236f0
    d850:	000268ba 	.word	0x000268ba

0000d854 <bt_att_req_cancel>:

	return true;
}

void bt_att_req_cancel(struct bt_conn *conn, struct bt_att_req *req)
{
    d854:	b510      	push	{r4, lr}
    d856:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan, *tmp;

	BT_DBG("req %p", req);

	if (!conn || !req) {
    d858:	b348      	cbz	r0, d8ae <bt_att_req_cancel+0x5a>
    d85a:	b341      	cbz	r1, d8ae <bt_att_req_cancel+0x5a>
		return;
	}

	att = att_get(conn);
    d85c:	f7ff f82c 	bl	c8b8 <att_get>
	if (!att) {
    d860:	b328      	cbz	r0, d8ae <bt_att_req_cancel+0x5a>
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    d862:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    d864:	b15b      	cbz	r3, d87e <bt_att_req_cancel+0x2a>
    d866:	f5b3 719a 	subs.w	r1, r3, #308	; 0x134
    d86a:	d008      	beq.n	d87e <bt_att_req_cancel+0x2a>
    d86c:	681b      	ldr	r3, [r3, #0]
    d86e:	b10b      	cbz	r3, d874 <bt_att_req_cancel+0x20>
    d870:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
	if (chan->req != req) {
    d874:	f8d1 20cc 	ldr.w	r2, [r1, #204]	; 0xcc
    d878:	4294      	cmp	r4, r2
    d87a:	d005      	beq.n	d888 <bt_att_req_cancel+0x34>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    d87c:	b963      	cbnz	r3, d898 <bt_att_req_cancel+0x44>
			return;
		}
	}

	/* Remove request from the list */
	sys_slist_find_and_remove(&att->reqs, &req->node);
    d87e:	4621      	mov	r1, r4
    d880:	3004      	adds	r0, #4
    d882:	f013 fa66 	bl	20d52 <sys_slist_find_and_remove>
    d886:	e002      	b.n	d88e <bt_att_req_cancel+0x3a>
	chan->req = &cancel;
    d888:	4b09      	ldr	r3, [pc, #36]	; (d8b0 <bt_att_req_cancel+0x5c>)
    d88a:	f8c1 30cc 	str.w	r3, [r1, #204]	; 0xcc

	att_req_destroy(req);
    d88e:	4620      	mov	r0, r4
}
    d890:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	att_req_destroy(req);
    d894:	f013 bd75 	b.w	21382 <att_req_destroy>
Z_GENLIST_PEEK_NEXT(slist, snode)
    d898:	f513 729a 	adds.w	r2, r3, #308	; 0x134
    d89c:	d004      	beq.n	d8a8 <bt_att_req_cancel+0x54>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    d89e:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    d8a2:	b10a      	cbz	r2, d8a8 <bt_att_req_cancel+0x54>
    d8a4:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
{
    d8a8:	4619      	mov	r1, r3
    d8aa:	4613      	mov	r3, r2
    d8ac:	e7e2      	b.n	d874 <bt_att_req_cancel+0x20>
}
    d8ae:	bd10      	pop	{r4, pc}
    d8b0:	20001f9c 	.word	0x20001f9c

0000d8b4 <find_static_attr>:

	return BT_GATT_ITER_CONTINUE;
}

static uint16_t find_static_attr(const struct bt_gatt_attr *attr)
{
    d8b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    d8b6:	490f      	ldr	r1, [pc, #60]	; (d8f4 <find_static_attr+0x40>)
	uint16_t handle = 1;

	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    d8b8:	4f0f      	ldr	r7, [pc, #60]	; (d8f8 <find_static_attr+0x44>)
{
    d8ba:	4604      	mov	r4, r0
	uint16_t handle = 1;
    d8bc:	2501      	movs	r5, #1
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
			if (attr == &static_svc->attrs[i]) {
    d8be:	f04f 0c14 	mov.w	ip, #20
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    d8c2:	f1a1 0308 	sub.w	r3, r1, #8
    d8c6:	42bb      	cmp	r3, r7
    d8c8:	d211      	bcs.n	d8ee <find_static_attr+0x3a>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
    d8ca:	f851 6c04 	ldr.w	r6, [r1, #-4]
    d8ce:	2200      	movs	r2, #0
    d8d0:	e006      	b.n	d8e0 <find_static_attr+0x2c>
			if (attr == &static_svc->attrs[i]) {
    d8d2:	f851 3c08 	ldr.w	r3, [r1, #-8]
    d8d6:	fb0c 3302 	mla	r3, ip, r2, r3
    d8da:	429c      	cmp	r4, r3
    d8dc:	d008      	beq.n	d8f0 <find_static_attr+0x3c>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
    d8de:	3201      	adds	r2, #1
    d8e0:	18ab      	adds	r3, r5, r2
    d8e2:	4296      	cmp	r6, r2
    d8e4:	b298      	uxth	r0, r3
    d8e6:	d1f4      	bne.n	d8d2 <find_static_attr+0x1e>
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    d8e8:	3108      	adds	r1, #8
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
    d8ea:	4605      	mov	r5, r0
    d8ec:	e7e9      	b.n	d8c2 <find_static_attr+0xe>
				return handle;
			}
		}
	}

	return 0;
    d8ee:	2000      	movs	r0, #0
}
    d8f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d8f2:	bf00      	nop
    d8f4:	000236e0 	.word	0x000236e0
    d8f8:	000236f0 	.word	0x000236f0

0000d8fc <notify_mult_process>:

	return ret;
}

static void notify_mult_process(struct k_work *work)
{
    d8fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d8fe:	4d0a      	ldr	r5, [pc, #40]	; (d928 <notify_mult_process+0x2c>)
	int i;

	/* Send to any connection with an allocated buffer */
	for (i = 0; i < ARRAY_SIZE(nfy_mult); i++) {
    d900:	2400      	movs	r4, #0
		struct net_buf **buf = &nfy_mult[i];

		if (*buf) {
    d902:	682b      	ldr	r3, [r5, #0]
    d904:	462f      	mov	r7, r5
    d906:	3504      	adds	r5, #4
    d908:	b14b      	cbz	r3, d91e <notify_mult_process+0x22>
			struct bt_conn *conn = bt_conn_lookup_index(i);
    d90a:	b2e0      	uxtb	r0, r4
    d90c:	f7fd fd3e 	bl	b38c <bt_conn_lookup_index>

			gatt_notify_mult_send(conn, buf);
    d910:	4639      	mov	r1, r7
			struct bt_conn *conn = bt_conn_lookup_index(i);
    d912:	4606      	mov	r6, r0
			gatt_notify_mult_send(conn, buf);
    d914:	f013 fea8 	bl	21668 <gatt_notify_mult_send>
			bt_conn_unref(conn);
    d918:	4630      	mov	r0, r6
    d91a:	f012 fe70 	bl	205fe <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(nfy_mult); i++) {
    d91e:	3401      	adds	r4, #1
    d920:	2c04      	cmp	r4, #4
    d922:	d1ee      	bne.n	d902 <notify_mult_process+0x6>
		}
	}
}
    d924:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d926:	bf00      	nop
    d928:	2000200c 	.word	0x2000200c

0000d92c <gatt_send.constprop.0>:
	struct bt_gatt_indicate_params *params = user_data;

	params->func(conn, params->attr, err);
}

static int gatt_send(struct bt_conn *conn, struct net_buf *buf,
    d92c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d930:	4606      	mov	r6, r0
    d932:	4688      	mov	r8, r1
    d934:	4617      	mov	r7, r2
		     bt_att_func_t func, void *params,
		     bt_att_destroy_t destroy)
{
	int err;

	if (params) {
    d936:	461c      	mov	r4, r3
    d938:	b34b      	cbz	r3, d98e <gatt_send.constprop.0+0x62>
		struct bt_att_req *req;

		/* Allocate new request */
		req = bt_att_req_alloc(BT_ATT_TIMEOUT);
    d93a:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
    d93e:	2100      	movs	r1, #0
    d940:	f7ff fe1c 	bl	d57c <bt_att_req_alloc>
		if (!req) {
    d944:	4605      	mov	r5, r0
    d946:	b920      	cbnz	r0, d952 <gatt_send.constprop.0+0x26>
			return -ENOMEM;
    d948:	f06f 040b 	mvn.w	r4, #11
	if (err) {
		BT_ERR("Error sending ATT PDU: %d", err);
	}

	return err;
}
    d94c:	4620      	mov	r0, r4
    d94e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		req->destroy = destroy;
    d952:	2300      	movs	r3, #0
		req->user_data = params;
    d954:	6184      	str	r4, [r0, #24]
		req->buf = buf;
    d956:	f8c0 8010 	str.w	r8, [r0, #16]
		req->func = func;
    d95a:	6047      	str	r7, [r0, #4]
		req->destroy = destroy;
    d95c:	6083      	str	r3, [r0, #8]
		err = bt_att_req_send(conn, req);
    d95e:	4601      	mov	r1, r0
    d960:	4630      	mov	r0, r6
    d962:	f013 fdce 	bl	21502 <bt_att_req_send>
		if (err) {
    d966:	4604      	mov	r4, r0
    d968:	2800      	cmp	r0, #0
    d96a:	d0ef      	beq.n	d94c <gatt_send.constprop.0+0x20>
			bt_att_req_free(req);
    d96c:	4628      	mov	r0, r5
    d96e:	f7ff fe1b 	bl	d5a8 <bt_att_req_free>
	if (err) {
    d972:	2c00      	cmp	r4, #0
    d974:	d0ea      	beq.n	d94c <gatt_send.constprop.0+0x20>
    d976:	4b08      	ldr	r3, [pc, #32]	; (d998 <gatt_send.constprop.0+0x6c>)
    d978:	4a08      	ldr	r2, [pc, #32]	; (d99c <gatt_send.constprop.0+0x70>)
		BT_ERR("Error sending ATT PDU: %d", err);
    d97a:	4809      	ldr	r0, [pc, #36]	; (d9a0 <gatt_send.constprop.0+0x74>)
    d97c:	1ad2      	subs	r2, r2, r3
    d97e:	08d2      	lsrs	r2, r2, #3
    d980:	0192      	lsls	r2, r2, #6
    d982:	f042 0201 	orr.w	r2, r2, #1
    d986:	4621      	mov	r1, r4
    d988:	f010 fdb0 	bl	1e4ec <log_1>
    d98c:	e7de      	b.n	d94c <gatt_send.constprop.0+0x20>
		err = bt_att_send(conn, buf, NULL, NULL);
    d98e:	461a      	mov	r2, r3
    d990:	f013 fd6d 	bl	2146e <bt_att_send>
    d994:	4604      	mov	r4, r0
    d996:	e7ec      	b.n	d972 <gatt_send.constprop.0+0x46>
    d998:	000236f0 	.word	0x000236f0
    d99c:	00023798 	.word	0x00023798
    d9a0:	000268cd 	.word	0x000268cd

0000d9a4 <gatt_indicate>:

static int gatt_indicate(struct bt_conn *conn, uint16_t handle,
			 struct bt_gatt_indicate_params *params)
{
    d9a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d9a8:	4614      	mov	r4, r2
		return -EAGAIN;
	}
#endif

	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
				sizeof(*ind) + params->len);
    d9aa:	8a12      	ldrh	r2, [r2, #16]
{
    d9ac:	4689      	mov	r9, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    d9ae:	3202      	adds	r2, #2
    d9b0:	211d      	movs	r1, #29
{
    d9b2:	4607      	mov	r7, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    d9b4:	f7ff fa9c 	bl	cef0 <bt_att_create_pdu>
	if (!buf) {
    d9b8:	4605      	mov	r5, r0
    d9ba:	b1e8      	cbz	r0, d9f8 <gatt_indicate+0x54>
		return -ENOMEM;
	}

	BT_DBG("conn %p handle 0x%04x", conn, handle);

	ind = net_buf_add(buf, sizeof(*ind));
    d9bc:	f100 0808 	add.w	r8, r0, #8
    d9c0:	2102      	movs	r1, #2
    d9c2:	4640      	mov	r0, r8
    d9c4:	f014 fde8 	bl	22598 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
    d9c8:	4606      	mov	r6, r0

	net_buf_add(buf, params->len);
    d9ca:	8a21      	ldrh	r1, [r4, #16]
	ind->handle = sys_cpu_to_le16(handle);
    d9cc:	f826 9b02 	strh.w	r9, [r6], #2
	net_buf_add(buf, params->len);
    d9d0:	4640      	mov	r0, r8
    d9d2:	f014 fde1 	bl	22598 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
    d9d6:	8a22      	ldrh	r2, [r4, #16]
    d9d8:	68e1      	ldr	r1, [r4, #12]
    d9da:	4630      	mov	r0, r6
    d9dc:	f012 fa4b 	bl	1fe76 <memcpy>

	if (!params->func) {
    d9e0:	68a3      	ldr	r3, [r4, #8]
    d9e2:	b933      	cbnz	r3, d9f2 <gatt_indicate+0x4e>
		return gatt_send(conn, buf, NULL, NULL, NULL);
    d9e4:	461a      	mov	r2, r3
	}

	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
    d9e6:	4629      	mov	r1, r5
    d9e8:	4638      	mov	r0, r7
}
    d9ea:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
    d9ee:	f7ff bf9d 	b.w	d92c <gatt_send.constprop.0>
    d9f2:	4a08      	ldr	r2, [pc, #32]	; (da14 <gatt_indicate+0x70>)
    d9f4:	4623      	mov	r3, r4
    d9f6:	e7f6      	b.n	d9e6 <gatt_indicate+0x42>
    d9f8:	4b07      	ldr	r3, [pc, #28]	; (da18 <gatt_indicate+0x74>)
    d9fa:	4908      	ldr	r1, [pc, #32]	; (da1c <gatt_indicate+0x78>)
		BT_WARN("No buffer available to send indication");
    d9fc:	4808      	ldr	r0, [pc, #32]	; (da20 <gatt_indicate+0x7c>)
    d9fe:	1ac9      	subs	r1, r1, r3
    da00:	08c9      	lsrs	r1, r1, #3
    da02:	0189      	lsls	r1, r1, #6
    da04:	f041 0102 	orr.w	r1, r1, #2
    da08:	f010 fd63 	bl	1e4d2 <log_0>
}
    da0c:	f06f 000b 	mvn.w	r0, #11
    da10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    da14:	000215a3 	.word	0x000215a3
    da18:	000236f0 	.word	0x000236f0
    da1c:	00023798 	.word	0x00023798
    da20:	000268e7 	.word	0x000268e7

0000da24 <gatt_sub_find_free>:
}

#if defined(CONFIG_BT_GATT_CLIENT)
static struct gatt_sub *gatt_sub_find_free(struct bt_conn *conn,
					   struct gatt_sub **free_sub)
{
    da24:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    da28:	4680      	mov	r8, r0
	int i;

	if (free_sub) {
    da2a:	460c      	mov	r4, r1
    da2c:	b109      	cbz	r1, da32 <gatt_sub_find_free+0xe>
		*free_sub = NULL;
    da2e:	2300      	movs	r3, #0
    da30:	600b      	str	r3, [r1, #0]
    da32:	4d10      	ldr	r5, [pc, #64]	; (da74 <gatt_sub_find_free+0x50>)
{
    da34:	2700      	movs	r7, #0
	}

	for (i = 0; i < ARRAY_SIZE(subscriptions); i++) {
		struct gatt_sub *sub = &subscriptions[i];
    da36:	462e      	mov	r6, r5

		if (bt_conn_is_peer_addr_le(conn, sub->id, &sub->peer)) {
    da38:	4640      	mov	r0, r8
    da3a:	f816 1b01 	ldrb.w	r1, [r6], #1
    da3e:	4632      	mov	r2, r6
		struct gatt_sub *sub = &subscriptions[i];
    da40:	46a9      	mov	r9, r5
		if (bt_conn_is_peer_addr_le(conn, sub->id, &sub->peer)) {
    da42:	f012 fdbc 	bl	205be <bt_conn_is_peer_addr_le>
    da46:	b988      	cbnz	r0, da6c <gatt_sub_find_free+0x48>
			return sub;
		} else if (free_sub &&
    da48:	b14c      	cbz	r4, da5e <gatt_sub_find_free+0x3a>
			   !bt_addr_le_cmp(BT_ADDR_LE_ANY, &sub->peer)) {
    da4a:	9000      	str	r0, [sp, #0]
	return memcmp(a, b, sizeof(*a));
    da4c:	2207      	movs	r2, #7
    da4e:	f8cd 0003 	str.w	r0, [sp, #3]
    da52:	4631      	mov	r1, r6
    da54:	4668      	mov	r0, sp
    da56:	f012 f9fe 	bl	1fe56 <memcmp>
		} else if (free_sub &&
    da5a:	b900      	cbnz	r0, da5e <gatt_sub_find_free+0x3a>
			*free_sub = sub;
    da5c:	6025      	str	r5, [r4, #0]
	for (i = 0; i < ARRAY_SIZE(subscriptions); i++) {
    da5e:	3701      	adds	r7, #1
    da60:	2f05      	cmp	r7, #5
    da62:	f105 0510 	add.w	r5, r5, #16
    da66:	d1e6      	bne.n	da36 <gatt_sub_find_free+0x12>
		}
	}

	return NULL;
    da68:	f04f 0900 	mov.w	r9, #0
}
    da6c:	4648      	mov	r0, r9
    da6e:	b003      	add	sp, #12
    da70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    da74:	2000206c 	.word	0x2000206c

0000da78 <find_sc_cfg>:
{
    da78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    da7c:	4c0e      	ldr	r4, [pc, #56]	; (dab8 <find_sc_cfg+0x40>)
    da7e:	4607      	mov	r7, r0
    da80:	4688      	mov	r8, r1
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    da82:	2600      	movs	r6, #0
    da84:	4625      	mov	r5, r4
    da86:	f04f 090c 	mov.w	r9, #12
		if (id == sc_cfg[i].id &&
    da8a:	7823      	ldrb	r3, [r4, #0]
    da8c:	42bb      	cmp	r3, r7
    da8e:	d10b      	bne.n	daa8 <find_sc_cfg+0x30>
    da90:	2207      	movs	r2, #7
    da92:	4641      	mov	r1, r8
    da94:	1c60      	adds	r0, r4, #1
    da96:	fb09 fa06 	mul.w	sl, r9, r6
    da9a:	f012 f9dc 	bl	1fe56 <memcmp>
    da9e:	b918      	cbnz	r0, daa8 <find_sc_cfg+0x30>
			return &sc_cfg[i];
    daa0:	eb05 000a 	add.w	r0, r5, sl
}
    daa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    daa8:	3601      	adds	r6, #1
    daaa:	2e05      	cmp	r6, #5
    daac:	f104 040c 	add.w	r4, r4, #12
    dab0:	d1eb      	bne.n	da8a <find_sc_cfg+0x12>
	return NULL;
    dab2:	2000      	movs	r0, #0
    dab4:	e7f6      	b.n	daa4 <find_sc_cfg+0x2c>
    dab6:	bf00      	nop
    dab8:	2000967e 	.word	0x2000967e

0000dabc <sc_save>:
{
    dabc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    dac0:	4680      	mov	r8, r0
    dac2:	460f      	mov	r7, r1
    dac4:	4616      	mov	r6, r2
    dac6:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
    dac8:	f7ff ffd6 	bl	da78 <find_sc_cfg>
	if (!cfg) {
    dacc:	4604      	mov	r4, r0
    dace:	b9c8      	cbnz	r0, db04 <sc_save+0x48>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
    dad0:	4669      	mov	r1, sp
    dad2:	9000      	str	r0, [sp, #0]
    dad4:	f8cd 0003 	str.w	r0, [sp, #3]
    dad8:	f7ff ffce 	bl	da78 <find_sc_cfg>
		if (!cfg) {
    dadc:	4604      	mov	r4, r0
    dade:	b960      	cbnz	r0, dafa <sc_save+0x3e>
    dae0:	490f      	ldr	r1, [pc, #60]	; (db20 <sc_save+0x64>)
    dae2:	4b10      	ldr	r3, [pc, #64]	; (db24 <sc_save+0x68>)
			BT_ERR("unable to save SC: no cfg left");
    dae4:	4810      	ldr	r0, [pc, #64]	; (db28 <sc_save+0x6c>)
    dae6:	1ac9      	subs	r1, r1, r3
    dae8:	08c9      	lsrs	r1, r1, #3
    daea:	0189      	lsls	r1, r1, #6
    daec:	f041 0101 	orr.w	r1, r1, #1
    daf0:	f010 fcef 	bl	1e4d2 <log_0>
}
    daf4:	b002      	add	sp, #8
    daf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg->id = id;
    dafa:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
    dafe:	4639      	mov	r1, r7
    db00:	f013 fdaf 	bl	21662 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
    db04:	8922      	ldrh	r2, [r4, #8]
    db06:	8963      	ldrh	r3, [r4, #10]
    db08:	b91a      	cbnz	r2, db12 <sc_save+0x56>
    db0a:	b923      	cbnz	r3, db16 <sc_save+0x5a>
		cfg->data.start = start;
    db0c:	8126      	strh	r6, [r4, #8]
		*end = new_end;
    db0e:	8165      	strh	r5, [r4, #10]
    db10:	e7f0      	b.n	daf4 <sc_save+0x38>
	if (new_start >= *start && new_end <= *end) {
    db12:	4296      	cmp	r6, r2
    db14:	d302      	bcc.n	db1c <sc_save+0x60>
    db16:	429d      	cmp	r5, r3
    db18:	d9ec      	bls.n	daf4 <sc_save+0x38>
    db1a:	e7f8      	b.n	db0e <sc_save+0x52>
		*start = new_start;
    db1c:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
    db1e:	e7fa      	b.n	db16 <sc_save+0x5a>
    db20:	00023798 	.word	0x00023798
    db24:	000236f0 	.word	0x000236f0
    db28:	0002690e 	.word	0x0002690e

0000db2c <find_cf_cfg>:
{
    db2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    db2e:	4d0f      	ldr	r5, [pc, #60]	; (db6c <find_cf_cfg+0x40>)
    db30:	4604      	mov	r4, r0
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
    db32:	2600      	movs	r6, #0
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
    db34:	462f      	mov	r7, r5
		if (!conn) {
    db36:	1c68      	adds	r0, r5, #1
    db38:	b954      	cbnz	r4, db50 <find_cf_cfg+0x24>
    db3a:	2207      	movs	r2, #7
    db3c:	4669      	mov	r1, sp
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    db3e:	9400      	str	r4, [sp, #0]
    db40:	f8cd 4003 	str.w	r4, [sp, #3]
    db44:	f012 f987 	bl	1fe56 <memcmp>
    db48:	b948      	cbnz	r0, db5e <find_cf_cfg+0x32>
}
    db4a:	4638      	mov	r0, r7
    db4c:	b003      	add	sp, #12
    db4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    db50:	4602      	mov	r2, r0
    db52:	7829      	ldrb	r1, [r5, #0]
    db54:	4620      	mov	r0, r4
    db56:	f012 fd32 	bl	205be <bt_conn_is_peer_addr_le>
    db5a:	2800      	cmp	r0, #0
    db5c:	d1f5      	bne.n	db4a <find_cf_cfg+0x1e>
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
    db5e:	3601      	adds	r6, #1
    db60:	2e05      	cmp	r6, #5
    db62:	f105 0510 	add.w	r5, r5, #16
    db66:	d1e5      	bne.n	db34 <find_cf_cfg+0x8>
	return NULL;
    db68:	2700      	movs	r7, #0
    db6a:	e7ee      	b.n	db4a <find_cf_cfg+0x1e>
    db6c:	20001fb8 	.word	0x20001fb8

0000db70 <gatt_notify>:
{
    db70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    db74:	4680      	mov	r8, r0
    db76:	4689      	mov	r9, r1
    db78:	4614      	mov	r4, r2
	cfg = find_cf_cfg(conn);
    db7a:	f7ff ffd7 	bl	db2c <find_cf_cfg>
	if (!cfg) {
    db7e:	2800      	cmp	r0, #0
    db80:	d06f      	beq.n	dc62 <gatt_notify+0xf2>
	if (gatt_cf_notify_multi(conn)) {
    db82:	7a03      	ldrb	r3, [r0, #8]
    db84:	075b      	lsls	r3, r3, #29
    db86:	d56c      	bpl.n	dc62 <gatt_notify+0xf2>
	struct net_buf **buf = &nfy_mult[bt_conn_index(conn)];
    db88:	4640      	mov	r0, r8
    db8a:	f7fd fbf3 	bl	b374 <bt_conn_index>
	if (*buf && ((net_buf_tailroom(*buf) < sizeof(*nfy) + params->len) ||
    db8e:	4e47      	ldr	r6, [pc, #284]	; (dcac <gatt_notify+0x13c>)
	struct net_buf **buf = &nfy_mult[bt_conn_index(conn)];
    db90:	4607      	mov	r7, r0
	if (*buf && ((net_buf_tailroom(*buf) < sizeof(*nfy) + params->len) ||
    db92:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
    db96:	b9b0      	cbnz	r0, dbc6 <gatt_notify+0x56>
					 sizeof(*nfy) + params->len);
    db98:	89a2      	ldrh	r2, [r4, #12]
		*buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY_MULT,
    db9a:	2123      	movs	r1, #35	; 0x23
    db9c:	3204      	adds	r2, #4
    db9e:	4640      	mov	r0, r8
    dba0:	f7ff f9a6 	bl	cef0 <bt_att_create_pdu>
    dba4:	f846 0027 	str.w	r0, [r6, r7, lsl #2]
		if (!*buf) {
    dba8:	2800      	cmp	r0, #0
    dbaa:	d155      	bne.n	dc58 <gatt_notify+0xe8>
    dbac:	4b40      	ldr	r3, [pc, #256]	; (dcb0 <gatt_notify+0x140>)
    dbae:	4941      	ldr	r1, [pc, #260]	; (dcb4 <gatt_notify+0x144>)
		BT_WARN("No buffer available to send notification");
    dbb0:	4841      	ldr	r0, [pc, #260]	; (dcb8 <gatt_notify+0x148>)
    dbb2:	1ac9      	subs	r1, r1, r3
    dbb4:	08c9      	lsrs	r1, r1, #3
    dbb6:	0189      	lsls	r1, r1, #6
    dbb8:	f041 0102 	orr.w	r1, r1, #2
    dbbc:	f010 fc89 	bl	1e4d2 <log_0>
		return -ENOMEM;
    dbc0:	f06f 050b 	mvn.w	r5, #11
    dbc4:	e045      	b.n	dc52 <gatt_notify+0xe2>
	if (*buf && ((net_buf_tailroom(*buf) < sizeof(*nfy) + params->len) ||
    dbc6:	3008      	adds	r0, #8
    dbc8:	f014 fd3f 	bl	2264a <net_buf_simple_tailroom>
    dbcc:	89a3      	ldrh	r3, [r4, #12]
    dbce:	3304      	adds	r3, #4
    dbd0:	4298      	cmp	r0, r3
    dbd2:	d309      	bcc.n	dbe8 <gatt_notify+0x78>
	    !nfy_mult_data_match(*buf, params->func, params->user_data))) {
    dbd4:	f856 3027 	ldr.w	r3, [r6, r7, lsl #2]
	if (*buf && ((net_buf_tailroom(*buf) < sizeof(*nfy) + params->len) ||
    dbd8:	6922      	ldr	r2, [r4, #16]
    dbda:	6959      	ldr	r1, [r3, #20]
    dbdc:	4291      	cmp	r1, r2
    dbde:	d103      	bne.n	dbe8 <gatt_notify+0x78>
	    !nfy_mult_data_match(*buf, params->func, params->user_data))) {
    dbe0:	699a      	ldr	r2, [r3, #24]
    dbe2:	6963      	ldr	r3, [r4, #20]
    dbe4:	429a      	cmp	r2, r3
    dbe6:	d00b      	beq.n	dc00 <gatt_notify+0x90>
	struct net_buf **buf = &nfy_mult[bt_conn_index(conn)];
    dbe8:	b239      	sxth	r1, r7
		ret = gatt_notify_mult_send(conn, buf);
    dbea:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    dbee:	4640      	mov	r0, r8
    dbf0:	f013 fd3a 	bl	21668 <gatt_notify_mult_send>
		if (ret < 0) {
    dbf4:	1e05      	subs	r5, r0, #0
    dbf6:	db2c      	blt.n	dc52 <gatt_notify+0xe2>
	if (!*buf) {
    dbf8:	f856 3027 	ldr.w	r3, [r6, r7, lsl #2]
    dbfc:	2b00      	cmp	r3, #0
    dbfe:	d0cb      	beq.n	db98 <gatt_notify+0x28>
	nfy = net_buf_add(*buf, sizeof(*nfy));
    dc00:	f856 0027 	ldr.w	r0, [r6, r7, lsl #2]
    dc04:	2104      	movs	r1, #4
    dc06:	3008      	adds	r0, #8
    dc08:	f014 fcc6 	bl	22598 <net_buf_simple_add>
	nfy->len = sys_cpu_to_le16(params->len);
    dc0c:	89a1      	ldrh	r1, [r4, #12]
    dc0e:	8041      	strh	r1, [r0, #2]
	nfy = net_buf_add(*buf, sizeof(*nfy));
    dc10:	4605      	mov	r5, r0
	nfy->handle = sys_cpu_to_le16(handle);
    dc12:	f8a0 9000 	strh.w	r9, [r0]
	net_buf_add(*buf, params->len);
    dc16:	f856 0027 	ldr.w	r0, [r6, r7, lsl #2]
    dc1a:	3008      	adds	r0, #8
    dc1c:	f014 fcbc 	bl	22598 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
    dc20:	68a1      	ldr	r1, [r4, #8]
    dc22:	89a2      	ldrh	r2, [r4, #12]
    dc24:	1d28      	adds	r0, r5, #4
    dc26:	f012 f926 	bl	1fe76 <memcpy>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    dc2a:	f3bf 8f5b 	dmb	ish
    dc2e:	4923      	ldr	r1, [pc, #140]	; (dcbc <gatt_notify+0x14c>)
    dc30:	e851 5f00 	ldrex	r5, [r1]
    dc34:	f045 0301 	orr.w	r3, r5, #1
    dc38:	e841 3200 	strex	r2, r3, [r1]
    dc3c:	2a00      	cmp	r2, #0
    dc3e:	d1f7      	bne.n	dc30 <gatt_notify+0xc0>
    dc40:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    dc44:	f015 0501 	ands.w	r5, r5, #1
    dc48:	d12e      	bne.n	dca8 <gatt_notify+0x138>
		k_queue_append(&work_q->queue, work);
    dc4a:	481d      	ldr	r0, [pc, #116]	; (dcc0 <gatt_notify+0x150>)
    dc4c:	3908      	subs	r1, #8
    dc4e:	f015 f85d 	bl	22d0c <k_queue_append>
}
    dc52:	4628      	mov	r0, r5
    dc54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		nfy_mult_user_data(*buf)->func = params->func;
    dc58:	6923      	ldr	r3, [r4, #16]
    dc5a:	6143      	str	r3, [r0, #20]
		nfy_mult_user_data(*buf)->user_data = params->user_data;
    dc5c:	6963      	ldr	r3, [r4, #20]
    dc5e:	6183      	str	r3, [r0, #24]
    dc60:	e7ce      	b.n	dc00 <gatt_notify+0x90>
				sizeof(*nfy) + params->len);
    dc62:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
    dc64:	211b      	movs	r1, #27
    dc66:	3202      	adds	r2, #2
    dc68:	4640      	mov	r0, r8
    dc6a:	f7ff f941 	bl	cef0 <bt_att_create_pdu>
	if (!buf) {
    dc6e:	4605      	mov	r5, r0
    dc70:	2800      	cmp	r0, #0
    dc72:	d09b      	beq.n	dbac <gatt_notify+0x3c>
	nfy = net_buf_add(buf, sizeof(*nfy));
    dc74:	f100 0708 	add.w	r7, r0, #8
    dc78:	2102      	movs	r1, #2
    dc7a:	4638      	mov	r0, r7
    dc7c:	f014 fc8c 	bl	22598 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
    dc80:	4606      	mov	r6, r0
	net_buf_add(buf, params->len);
    dc82:	89a1      	ldrh	r1, [r4, #12]
	nfy->handle = sys_cpu_to_le16(handle);
    dc84:	f826 9b02 	strh.w	r9, [r6], #2
	net_buf_add(buf, params->len);
    dc88:	4638      	mov	r0, r7
    dc8a:	f014 fc85 	bl	22598 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
    dc8e:	89a2      	ldrh	r2, [r4, #12]
    dc90:	68a1      	ldr	r1, [r4, #8]
    dc92:	4630      	mov	r0, r6
    dc94:	f012 f8ef 	bl	1fe76 <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
    dc98:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    dc9c:	4629      	mov	r1, r5
    dc9e:	4640      	mov	r0, r8
}
    dca0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
    dca4:	f013 bbe3 	b.w	2146e <bt_att_send>
	return 0;
    dca8:	2500      	movs	r5, #0
    dcaa:	e7d2      	b.n	dc52 <gatt_notify+0xe2>
    dcac:	2000200c 	.word	0x2000200c
    dcb0:	000236f0 	.word	0x000236f0
    dcb4:	00023798 	.word	0x00023798
    dcb8:	0002692d 	.word	0x0002692d
    dcbc:	2000022c 	.word	0x2000022c
    dcc0:	20001c30 	.word	0x20001c30

0000dcc4 <notify_cb>:
{
    dcc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    dcc8:	4b38      	ldr	r3, [pc, #224]	; (ddac <notify_cb+0xe8>)
    dcca:	6882      	ldr	r2, [r0, #8]
    dccc:	429a      	cmp	r2, r3
{
    dcce:	4607      	mov	r7, r0
    dcd0:	460d      	mov	r5, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    dcd2:	d003      	beq.n	dcdc <notify_cb+0x18>
		return BT_GATT_ITER_CONTINUE;
    dcd4:	2001      	movs	r0, #1
}
    dcd6:	b003      	add	sp, #12
    dcd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ccc = attr->user_data;
    dcdc:	f8d0 900c 	ldr.w	r9, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
    dce0:	4b33      	ldr	r3, [pc, #204]	; (ddb0 <notify_cb+0xec>)
    dce2:	4599      	cmp	r9, r3
    dce4:	d01a      	beq.n	dd1c <notify_cb+0x58>
    dce6:	f109 0601 	add.w	r6, r9, #1
    dcea:	f109 0a33 	add.w	sl, r9, #51	; 0x33
    dcee:	f04f 0b00 	mov.w	fp, #0
		if (cfg->value != data->type) {
    dcf2:	f8b6 2007 	ldrh.w	r2, [r6, #7]
    dcf6:	88ab      	ldrh	r3, [r5, #4]
    dcf8:	429a      	cmp	r2, r3
    dcfa:	d10b      	bne.n	dd14 <notify_cb+0x50>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    dcfc:	f816 0c01 	ldrb.w	r0, [r6, #-1]
    dd00:	4631      	mov	r1, r6
    dd02:	f7fd f855 	bl	adb0 <bt_conn_lookup_addr_le>
		if (!conn) {
    dd06:	4604      	mov	r4, r0
    dd08:	b120      	cbz	r0, dd14 <notify_cb+0x50>
		if (conn->state != BT_CONN_CONNECTED) {
    dd0a:	7b43      	ldrb	r3, [r0, #13]
    dd0c:	2b06      	cmp	r3, #6
    dd0e:	d02b      	beq.n	dd68 <notify_cb+0xa4>
			bt_conn_unref(conn);
    dd10:	f012 fc75 	bl	205fe <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
    dd14:	360a      	adds	r6, #10
    dd16:	45b2      	cmp	sl, r6
    dd18:	d1eb      	bne.n	dcf2 <notify_cb+0x2e>
    dd1a:	e7db      	b.n	dcd4 <notify_cb+0x10>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    dd1c:	2600      	movs	r6, #0
    dd1e:	4c25      	ldr	r4, [pc, #148]	; (ddb4 <notify_cb+0xf0>)
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    dd20:	46b0      	mov	r8, r6
    dd22:	2207      	movs	r2, #7
    dd24:	4669      	mov	r1, sp
    dd26:	4620      	mov	r0, r4
    dd28:	f8cd 8000 	str.w	r8, [sp]
    dd2c:	f8cd 8003 	str.w	r8, [sp, #3]
    dd30:	f012 f891 	bl	1fe56 <memcmp>
    dd34:	b178      	cbz	r0, dd56 <notify_cb+0x92>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
    dd36:	f814 0c01 	ldrb.w	r0, [r4, #-1]
    dd3a:	2206      	movs	r2, #6
    dd3c:	4621      	mov	r1, r4
    dd3e:	f7fd f883 	bl	ae48 <bt_conn_lookup_state_le>
			if (!conn) {
    dd42:	b970      	cbnz	r0, dd62 <notify_cb+0x9e>
				sc = (struct sc_data *)data->ind_params->data;
    dd44:	68ab      	ldr	r3, [r5, #8]
				sc_save(cfg->id, &cfg->peer,
    dd46:	f814 0c01 	ldrb.w	r0, [r4, #-1]
				sc = (struct sc_data *)data->ind_params->data;
    dd4a:	68da      	ldr	r2, [r3, #12]
				sc_save(cfg->id, &cfg->peer,
    dd4c:	4621      	mov	r1, r4
    dd4e:	8853      	ldrh	r3, [r2, #2]
    dd50:	8812      	ldrh	r2, [r2, #0]
    dd52:	f7ff feb3 	bl	dabc <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    dd56:	3601      	adds	r6, #1
    dd58:	2e05      	cmp	r6, #5
    dd5a:	f104 040c 	add.w	r4, r4, #12
    dd5e:	d1e0      	bne.n	dd22 <notify_cb+0x5e>
    dd60:	e7c1      	b.n	dce6 <notify_cb+0x22>
			bt_conn_unref(conn);
    dd62:	f012 fc4c 	bl	205fe <bt_conn_unref>
    dd66:	e7f6      	b.n	dd56 <notify_cb+0x92>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
    dd68:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
    dd6c:	b123      	cbz	r3, dd78 <notify_cb+0xb4>
    dd6e:	4639      	mov	r1, r7
    dd70:	4798      	blx	r3
    dd72:	b908      	cbnz	r0, dd78 <notify_cb+0xb4>
			bt_conn_unref(conn);
    dd74:	4620      	mov	r0, r4
    dd76:	e7cb      	b.n	dd10 <notify_cb+0x4c>
		if (data->type == BT_GATT_CCC_INDICATE) {
    dd78:	8a39      	ldrh	r1, [r7, #16]
    dd7a:	88ab      	ldrh	r3, [r5, #4]
    dd7c:	68aa      	ldr	r2, [r5, #8]
    dd7e:	3901      	subs	r1, #1
    dd80:	2b02      	cmp	r3, #2
    dd82:	b289      	uxth	r1, r1
			err = gatt_indicate(conn, attr->handle - 1,
    dd84:	4620      	mov	r0, r4
		if (data->type == BT_GATT_CCC_INDICATE) {
    dd86:	d10b      	bne.n	dda0 <notify_cb+0xdc>
			err = gatt_indicate(conn, attr->handle - 1,
    dd88:	f7ff fe0c 	bl	d9a4 <gatt_indicate>
			err = gatt_notify(conn, attr->handle - 1,
    dd8c:	4680      	mov	r8, r0
		bt_conn_unref(conn);
    dd8e:	4620      	mov	r0, r4
    dd90:	f012 fc35 	bl	205fe <bt_conn_unref>
		if (err < 0) {
    dd94:	f1b8 0f00 	cmp.w	r8, #0
    dd98:	db05      	blt.n	dda6 <notify_cb+0xe2>
		data->err = 0;
    dd9a:	f8c5 b000 	str.w	fp, [r5]
    dd9e:	e7b9      	b.n	dd14 <notify_cb+0x50>
			err = gatt_notify(conn, attr->handle - 1,
    dda0:	f7ff fee6 	bl	db70 <gatt_notify>
    dda4:	e7f2      	b.n	dd8c <notify_cb+0xc8>
			return BT_GATT_ITER_STOP;
    dda6:	2000      	movs	r0, #0
    dda8:	e795      	b.n	dcd6 <notify_cb+0x12>
    ddaa:	bf00      	nop
    ddac:	0000ddb9 	.word	0x0000ddb9
    ddb0:	20000230 	.word	0x20000230
    ddb4:	2000967f 	.word	0x2000967f

0000ddb8 <bt_gatt_attr_write_ccc>:
{
    ddb8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    ddbc:	461f      	mov	r7, r3
    ddbe:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	struct _bt_gatt_ccc *ccc = attr->user_data;
    ddc2:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
    ddc6:	4606      	mov	r6, r0
    ddc8:	4688      	mov	r8, r1
	if (offset) {
    ddca:	2b00      	cmp	r3, #0
    ddcc:	d151      	bne.n	de72 <bt_gatt_attr_write_ccc+0xba>
	if (!len || len > sizeof(uint16_t)) {
    ddce:	1e7b      	subs	r3, r7, #1
    ddd0:	2b01      	cmp	r3, #1
    ddd2:	d851      	bhi.n	de78 <bt_gatt_attr_write_ccc+0xc0>
	if (len < sizeof(uint16_t)) {
    ddd4:	2f01      	cmp	r7, #1
		value = *(uint8_t *)buf;
    ddd6:	7815      	ldrb	r5, [r2, #0]
	return ((uint16_t)src[1] << 8) | src[0];
    ddd8:	bf18      	it	ne
    ddda:	7852      	ldrbne	r2, [r2, #1]
	cfg = find_ccc_cfg(conn, ccc);
    dddc:	4649      	mov	r1, r9
		value = *(uint8_t *)buf;
    ddde:	bf0c      	ite	eq
    dde0:	b2ad      	uxtheq	r5, r5
    dde2:	ea45 2502 	orrne.w	r5, r5, r2, lsl #8
	cfg = find_ccc_cfg(conn, ccc);
    dde6:	f013 fc7b 	bl	216e0 <find_ccc_cfg>
	if (!cfg) {
    ddea:	4604      	mov	r4, r0
    ddec:	b9e8      	cbnz	r0, de2a <bt_gatt_attr_write_ccc+0x72>
		if (!value) {
    ddee:	b91d      	cbnz	r5, ddf8 <bt_gatt_attr_write_ccc+0x40>
			return len;
    ddf0:	4638      	mov	r0, r7
}
    ddf2:	b003      	add	sp, #12
    ddf4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
    ddf8:	4649      	mov	r1, r9
    ddfa:	f013 fc71 	bl	216e0 <find_ccc_cfg>
		if (!cfg) {
    ddfe:	4604      	mov	r4, r0
    de00:	b960      	cbnz	r0, de1c <bt_gatt_attr_write_ccc+0x64>
    de02:	4b1f      	ldr	r3, [pc, #124]	; (de80 <bt_gatt_attr_write_ccc+0xc8>)
    de04:	491f      	ldr	r1, [pc, #124]	; (de84 <bt_gatt_attr_write_ccc+0xcc>)
			BT_WARN("No space to store CCC cfg");
    de06:	4820      	ldr	r0, [pc, #128]	; (de88 <bt_gatt_attr_write_ccc+0xd0>)
    de08:	1ac9      	subs	r1, r1, r3
    de0a:	08c9      	lsrs	r1, r1, #3
    de0c:	0189      	lsls	r1, r1, #6
    de0e:	f041 0102 	orr.w	r1, r1, #2
    de12:	f010 fb5e 	bl	1e4d2 <log_0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    de16:	f06f 0010 	mvn.w	r0, #16
    de1a:	e7ea      	b.n	ddf2 <bt_gatt_attr_write_ccc+0x3a>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    de1c:	f106 0188 	add.w	r1, r6, #136	; 0x88
    de20:	3001      	adds	r0, #1
    de22:	f013 fc1e 	bl	21662 <bt_addr_le_copy>
		cfg->id = conn->id;
    de26:	7a33      	ldrb	r3, [r6, #8]
    de28:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
    de2a:	f8d9 3038 	ldr.w	r3, [r9, #56]	; 0x38
    de2e:	b9a3      	cbnz	r3, de5a <bt_gatt_attr_write_ccc+0xa2>
	if (cfg->value != ccc->value) {
    de30:	f8b9 3032 	ldrh.w	r3, [r9, #50]	; 0x32
	cfg->value = value;
    de34:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
    de36:	42ab      	cmp	r3, r5
    de38:	d003      	beq.n	de42 <bt_gatt_attr_write_ccc+0x8a>
		gatt_ccc_changed(attr, ccc);
    de3a:	4649      	mov	r1, r9
    de3c:	4640      	mov	r0, r8
    de3e:	f013 fb96 	bl	2156e <gatt_ccc_changed>
	if (!value) {
    de42:	2d00      	cmp	r5, #0
    de44:	d1d4      	bne.n	ddf0 <bt_gatt_attr_write_ccc+0x38>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
    de46:	4669      	mov	r1, sp
    de48:	1c60      	adds	r0, r4, #1
    de4a:	9500      	str	r5, [sp, #0]
    de4c:	f8cd 5003 	str.w	r5, [sp, #3]
    de50:	f013 fc07 	bl	21662 <bt_addr_le_copy>
	cfg->id = 0U;
    de54:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
    de56:	8125      	strh	r5, [r4, #8]
}
    de58:	e7ca      	b.n	ddf0 <bt_gatt_attr_write_ccc+0x38>
		ssize_t write = ccc->cfg_write(conn, attr, value);
    de5a:	462a      	mov	r2, r5
    de5c:	4641      	mov	r1, r8
    de5e:	4630      	mov	r0, r6
    de60:	4798      	blx	r3
		if (write < 0) {
    de62:	2800      	cmp	r0, #0
    de64:	dbc5      	blt.n	ddf2 <bt_gatt_attr_write_ccc+0x3a>
		if (write != sizeof(value) && write != 1) {
    de66:	3801      	subs	r0, #1
    de68:	2801      	cmp	r0, #1
    de6a:	d9e1      	bls.n	de30 <bt_gatt_attr_write_ccc+0x78>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
    de6c:	f06f 000d 	mvn.w	r0, #13
    de70:	e7bf      	b.n	ddf2 <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    de72:	f06f 0006 	mvn.w	r0, #6
    de76:	e7bc      	b.n	ddf2 <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    de78:	f06f 000c 	mvn.w	r0, #12
    de7c:	e7b9      	b.n	ddf2 <bt_gatt_attr_write_ccc+0x3a>
    de7e:	bf00      	nop
    de80:	000236f0 	.word	0x000236f0
    de84:	00023798 	.word	0x00023798
    de88:	00026956 	.word	0x00026956

0000de8c <gatt_write_ccc.constprop.0>:
		/* Notify with NULL data to complete unsubscribe */
		params->notify(conn, params, NULL, 0);
	}
}

static int gatt_write_ccc(struct bt_conn *conn, uint16_t handle, uint16_t value,
    de8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    de90:	4688      	mov	r8, r1
    de92:	4617      	mov	r7, r2
			  struct bt_gatt_subscribe_params *params)
{
	struct net_buf *buf;
	struct bt_att_write_req *req;

	buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_REQ,
    de94:	2112      	movs	r1, #18
    de96:	2204      	movs	r2, #4
static int gatt_write_ccc(struct bt_conn *conn, uint16_t handle, uint16_t value,
    de98:	4606      	mov	r6, r0
    de9a:	461d      	mov	r5, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_REQ,
    de9c:	f7ff f828 	bl	cef0 <bt_att_create_pdu>
				sizeof(*req) + sizeof(uint16_t));
	if (!buf) {
    dea0:	4604      	mov	r4, r0
    dea2:	b308      	cbz	r0, dee8 <gatt_write_ccc.constprop.0+0x5c>
		return -ENOMEM;
	}

	req = net_buf_add(buf, sizeof(*req));
    dea4:	f100 0908 	add.w	r9, r0, #8
    dea8:	2102      	movs	r1, #2
    deaa:	4648      	mov	r0, r9
    deac:	f014 fb74 	bl	22598 <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(handle);
	net_buf_add_le16(buf, value);
    deb0:	4639      	mov	r1, r7
	req->handle = sys_cpu_to_le16(handle);
    deb2:	f8a0 8000 	strh.w	r8, [r0]
	net_buf_add_le16(buf, value);
    deb6:	4648      	mov	r0, r9
    deb8:	f014 fb85 	bl	225c6 <net_buf_simple_add_le16>
    debc:	f3bf 8f5b 	dmb	ish
    dec0:	f105 030c 	add.w	r3, r5, #12
    dec4:	e853 2f00 	ldrex	r2, [r3]
    dec8:	f042 0204 	orr.w	r2, r2, #4
    decc:	e843 2100 	strex	r1, r2, [r3]
    ded0:	2900      	cmp	r1, #0
    ded2:	d1f7      	bne.n	dec4 <gatt_write_ccc.constprop.0+0x38>
    ded4:	f3bf 8f5b 	dmb	ish

	BT_DBG("handle 0x%04x value 0x%04x", handle, value);

	atomic_set_bit(params->flags, BT_GATT_SUBSCRIBE_FLAG_WRITE_PENDING);

	return gatt_send(conn, buf, func, params, NULL);
    ded8:	462b      	mov	r3, r5
    deda:	4621      	mov	r1, r4
    dedc:	4630      	mov	r0, r6
    dede:	4a04      	ldr	r2, [pc, #16]	; (def0 <gatt_write_ccc.constprop.0+0x64>)
}
    dee0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return gatt_send(conn, buf, func, params, NULL);
    dee4:	f7ff bd22 	b.w	d92c <gatt_send.constprop.0>
}
    dee8:	f06f 000b 	mvn.w	r0, #11
    deec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    def0:	000218e7 	.word	0x000218e7

0000def4 <cf_write>:
{
    def4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    def8:	461f      	mov	r7, r3
    defa:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
    defe:	2b01      	cmp	r3, #1
{
    df00:	4680      	mov	r8, r0
    df02:	4616      	mov	r6, r2
	if (offset > sizeof(cfg->data)) {
    df04:	d847      	bhi.n	df96 <cf_write+0xa2>
	if (offset + len > sizeof(cfg->data)) {
    df06:	443b      	add	r3, r7
    df08:	2b01      	cmp	r3, #1
    df0a:	463d      	mov	r5, r7
    df0c:	dc46      	bgt.n	df9c <cf_write+0xa8>
	cfg = find_cf_cfg(conn);
    df0e:	f7ff fe0d 	bl	db2c <find_cf_cfg>
	if (!cfg) {
    df12:	4604      	mov	r4, r0
    df14:	b990      	cbnz	r0, df3c <cf_write+0x48>
		cfg = find_cf_cfg(NULL);
    df16:	f7ff fe09 	bl	db2c <find_cf_cfg>
	if (!cfg) {
    df1a:	4604      	mov	r4, r0
    df1c:	b970      	cbnz	r0, df3c <cf_write+0x48>
    df1e:	4b22      	ldr	r3, [pc, #136]	; (dfa8 <cf_write+0xb4>)
    df20:	4922      	ldr	r1, [pc, #136]	; (dfac <cf_write+0xb8>)
		BT_WARN("No space to store Client Supported Features");
    df22:	4823      	ldr	r0, [pc, #140]	; (dfb0 <cf_write+0xbc>)
    df24:	1ac9      	subs	r1, r1, r3
    df26:	08c9      	lsrs	r1, r1, #3
    df28:	0189      	lsls	r1, r1, #6
    df2a:	f041 0102 	orr.w	r1, r1, #2
    df2e:	f010 fad0 	bl	1e4d2 <log_0>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    df32:	f06f 0510 	mvn.w	r5, #16
}
    df36:	4628      	mov	r0, r5
    df38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
static bool cf_set_value(struct gatt_cf_cfg *cfg, const uint8_t *value, uint16_t len)
    df3c:	4632      	mov	r2, r6
    df3e:	eb07 0c06 	add.w	ip, r7, r6
	for (i = 0U; i < len && i <= last_byte; i++) {
    df42:	4562      	cmp	r2, ip
    df44:	d114      	bne.n	df70 <cf_write+0x7c>
	for (i = 0U; i < len && i < last_byte; i++) {
    df46:	b12f      	cbz	r7, df54 <cf_write+0x60>
		cfg->data[i] |= value[i] & (BIT(last_bit + 1) - 1);
    df48:	7833      	ldrb	r3, [r6, #0]
    df4a:	7a22      	ldrb	r2, [r4, #8]
    df4c:	f003 0307 	and.w	r3, r3, #7
    df50:	4313      	orrs	r3, r2
    df52:	7223      	strb	r3, [r4, #8]
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    df54:	f108 0188 	add.w	r1, r8, #136	; 0x88
    df58:	1c60      	adds	r0, r4, #1
    df5a:	f013 fb82 	bl	21662 <bt_addr_le_copy>
	cfg->id = conn->id;
    df5e:	4620      	mov	r0, r4
    df60:	f898 3008 	ldrb.w	r3, [r8, #8]
    df64:	f800 3b0c 	strb.w	r3, [r0], #12
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    df68:	2100      	movs	r1, #0
    df6a:	f013 fbd9 	bl	21720 <atomic_set_bit>
	return len;
    df6e:	e7e2      	b.n	df36 <cf_write+0x42>
		uint8_t chg_bits = value[i] ^ cfg->data[i];
    df70:	f812 1b01 	ldrb.w	r1, [r2], #1
    df74:	7a20      	ldrb	r0, [r4, #8]
    df76:	2300      	movs	r3, #0
    df78:	4041      	eors	r1, r0
			if ((BIT(bit) & chg_bits) &&
    df7a:	fa21 fe03 	lsr.w	lr, r1, r3
    df7e:	f01e 0f01 	tst.w	lr, #1
    df82:	d004      	beq.n	df8e <cf_write+0x9a>
    df84:	fa20 fe03 	lsr.w	lr, r0, r3
    df88:	f01e 0f01 	tst.w	lr, #1
    df8c:	d109      	bne.n	dfa2 <cf_write+0xae>
		for (bit = 0U; bit <= last_bit; bit++) {
    df8e:	3301      	adds	r3, #1
    df90:	2b03      	cmp	r3, #3
    df92:	d1f2      	bne.n	df7a <cf_write+0x86>
    df94:	e7d5      	b.n	df42 <cf_write+0x4e>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    df96:	f06f 0506 	mvn.w	r5, #6
    df9a:	e7cc      	b.n	df36 <cf_write+0x42>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    df9c:	f06f 050c 	mvn.w	r5, #12
    dfa0:	e7c9      	b.n	df36 <cf_write+0x42>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
    dfa2:	f06f 0512 	mvn.w	r5, #18
    dfa6:	e7c6      	b.n	df36 <cf_write+0x42>
    dfa8:	000236f0 	.word	0x000236f0
    dfac:	00023798 	.word	0x00023798
    dfb0:	00026970 	.word	0x00026970

0000dfb4 <sc_indicate_rsp>:
{
    dfb4:	b510      	push	{r4, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    dfb6:	4915      	ldr	r1, [pc, #84]	; (e00c <sc_indicate_rsp+0x58>)
    dfb8:	f3bf 8f5b 	dmb	ish
    dfbc:	4604      	mov	r4, r0
    dfbe:	f101 0348 	add.w	r3, r1, #72	; 0x48
    dfc2:	e853 2f00 	ldrex	r2, [r3]
    dfc6:	f022 0202 	bic.w	r2, r2, #2
    dfca:	e843 2000 	strex	r0, r2, [r3]
    dfce:	2800      	cmp	r0, #0
    dfd0:	d1f7      	bne.n	dfc2 <sc_indicate_rsp+0xe>
    dfd2:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    dfd6:	f3bf 8f5b 	dmb	ish
    dfda:	6c8b      	ldr	r3, [r1, #72]	; 0x48
    dfdc:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    dfe0:	07da      	lsls	r2, r3, #31
    dfe2:	d505      	bpl.n	dff0 <sc_indicate_rsp+0x3c>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    dfe4:	480a      	ldr	r0, [pc, #40]	; (e010 <sc_indicate_rsp+0x5c>)
    dfe6:	2200      	movs	r2, #0
    dfe8:	2300      	movs	r3, #0
    dfea:	3118      	adds	r1, #24
    dfec:	f00f fd02 	bl	1d9f4 <k_delayed_work_submit_to_queue>
	cfg = find_cf_cfg(conn);
    dff0:	4620      	mov	r0, r4
    dff2:	f7ff fd9b 	bl	db2c <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
    dff6:	b140      	cbz	r0, e00a <sc_indicate_rsp+0x56>
    dff8:	7a03      	ldrb	r3, [r0, #8]
    dffa:	07db      	lsls	r3, r3, #31
    dffc:	d505      	bpl.n	e00a <sc_indicate_rsp+0x56>
}
    dffe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    e002:	2100      	movs	r1, #0
    e004:	300c      	adds	r0, #12
    e006:	f013 bb8b 	b.w	21720 <atomic_set_bit>
}
    e00a:	bd10      	pop	{r4, pc}
    e00c:	200011c0 	.word	0x200011c0
    e010:	20001c30 	.word	0x20001c30

0000e014 <disconnected_cb>:
{
    e014:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    e018:	4b2b      	ldr	r3, [pc, #172]	; (e0c8 <disconnected_cb+0xb4>)
    e01a:	6882      	ldr	r2, [r0, #8]
    e01c:	429a      	cmp	r2, r3
{
    e01e:	4607      	mov	r7, r0
    e020:	460e      	mov	r6, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    e022:	d12f      	bne.n	e084 <disconnected_cb+0x70>
	ccc = attr->user_data;
    e024:	68c5      	ldr	r5, [r0, #12]
	if (!ccc->value) {
    e026:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
    e028:	b363      	cbz	r3, e084 <disconnected_cb+0x70>
				if (ccc == &sc_ccc) {
    e02a:	f8df b0a0 	ldr.w	fp, [pc, #160]	; e0cc <disconnected_cb+0xb8>
    e02e:	1c6c      	adds	r4, r5, #1
    e030:	f105 0a33 	add.w	sl, r5, #51	; 0x33
	value_used = false;
    e034:	f04f 0800 	mov.w	r8, #0
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    e038:	f101 0988 	add.w	r9, r1, #136	; 0x88
		if (!cfg->value) {
    e03c:	f8b4 3007 	ldrh.w	r3, [r4, #7]
    e040:	b19b      	cbz	r3, e06a <disconnected_cb+0x56>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    e042:	f814 1c01 	ldrb.w	r1, [r4, #-1]
    e046:	4622      	mov	r2, r4
    e048:	4630      	mov	r0, r6
    e04a:	f012 fab8 	bl	205be <bt_conn_is_peer_addr_le>
    e04e:	b9e8      	cbnz	r0, e08c <disconnected_cb+0x78>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    e050:	f814 0c01 	ldrb.w	r0, [r4, #-1]
    e054:	4621      	mov	r1, r4
    e056:	f7fc feab 	bl	adb0 <bt_conn_lookup_addr_le>
			if (tmp) {
    e05a:	b130      	cbz	r0, e06a <disconnected_cb+0x56>
				if (tmp->state == BT_CONN_CONNECTED) {
    e05c:	7b43      	ldrb	r3, [r0, #13]
					value_used = true;
    e05e:	2b06      	cmp	r3, #6
    e060:	bf08      	it	eq
    e062:	f04f 0801 	moveq.w	r8, #1
				bt_conn_unref(tmp);
    e066:	f012 faca 	bl	205fe <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
    e06a:	340a      	adds	r4, #10
    e06c:	4554      	cmp	r4, sl
    e06e:	d1e5      	bne.n	e03c <disconnected_cb+0x28>
	if (!value_used) {
    e070:	f1b8 0f00 	cmp.w	r8, #0
    e074:	d106      	bne.n	e084 <disconnected_cb+0x70>
		if (ccc->cfg_changed) {
    e076:	6b6b      	ldr	r3, [r5, #52]	; 0x34
		ccc->value = 0U;
    e078:	f8a5 8032 	strh.w	r8, [r5, #50]	; 0x32
		if (ccc->cfg_changed) {
    e07c:	b113      	cbz	r3, e084 <disconnected_cb+0x70>
			ccc->cfg_changed(attr, ccc->value);
    e07e:	4641      	mov	r1, r8
    e080:	4638      	mov	r0, r7
    e082:	4798      	blx	r3
}
    e084:	2001      	movs	r0, #1
    e086:	b003      	add	sp, #12
    e088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    e08c:	7a30      	ldrb	r0, [r6, #8]
    e08e:	4649      	mov	r1, r9
    e090:	f012 f9cb 	bl	2042a <bt_addr_le_is_bonded>
    e094:	b990      	cbnz	r0, e0bc <disconnected_cb+0xa8>
				if (ccc == &sc_ccc) {
    e096:	455d      	cmp	r5, fp
    e098:	d102      	bne.n	e0a0 <disconnected_cb+0x8c>
					sc_clear(conn);
    e09a:	4630      	mov	r0, r6
    e09c:	f013 fc56 	bl	2194c <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
    e0a0:	2300      	movs	r3, #0
    e0a2:	4669      	mov	r1, sp
    e0a4:	4620      	mov	r0, r4
    e0a6:	9300      	str	r3, [sp, #0]
    e0a8:	f8cd 3003 	str.w	r3, [sp, #3]
    e0ac:	f013 fad9 	bl	21662 <bt_addr_le_copy>
	cfg->id = 0U;
    e0b0:	2300      	movs	r3, #0
    e0b2:	f804 3c01 	strb.w	r3, [r4, #-1]
	cfg->value = 0U;
    e0b6:	f8a4 3007 	strh.w	r3, [r4, #7]
}
    e0ba:	e7d6      	b.n	e06a <disconnected_cb+0x56>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    e0bc:	4649      	mov	r1, r9
    e0be:	4620      	mov	r0, r4
    e0c0:	f013 facf 	bl	21662 <bt_addr_le_copy>
    e0c4:	e7d1      	b.n	e06a <disconnected_cb+0x56>
    e0c6:	bf00      	nop
    e0c8:	0000ddb9 	.word	0x0000ddb9
    e0cc:	20000230 	.word	0x20000230

0000e0d0 <bt_gatt_init>:
{
    e0d0:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    e0d2:	4b18      	ldr	r3, [pc, #96]	; (e134 <bt_gatt_init+0x64>)
    e0d4:	f3bf 8f5b 	dmb	ish
    e0d8:	2201      	movs	r2, #1
    e0da:	e853 1f00 	ldrex	r1, [r3]
    e0de:	2900      	cmp	r1, #0
    e0e0:	d103      	bne.n	e0ea <bt_gatt_init+0x1a>
    e0e2:	e843 2000 	strex	r0, r2, [r3]
    e0e6:	2800      	cmp	r0, #0
    e0e8:	d1f7      	bne.n	e0da <bt_gatt_init+0xa>
    e0ea:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
    e0ee:	d11f      	bne.n	e130 <bt_gatt_init+0x60>
    e0f0:	4a11      	ldr	r2, [pc, #68]	; (e138 <bt_gatt_init+0x68>)
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    e0f2:	4912      	ldr	r1, [pc, #72]	; (e13c <bt_gatt_init+0x6c>)
    e0f4:	8813      	ldrh	r3, [r2, #0]
    e0f6:	4c12      	ldr	r4, [pc, #72]	; (e140 <bt_gatt_init+0x70>)
	if (!atomic_cas(&init, 0, 1)) {
    e0f8:	2000      	movs	r0, #0
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    e0fa:	42a1      	cmp	r1, r4
    e0fc:	d312      	bcc.n	e124 <bt_gatt_init+0x54>
    e0fe:	b100      	cbz	r0, e102 <bt_gatt_init+0x32>
    e100:	8013      	strh	r3, [r2, #0]
	k_delayed_work_init(&db_hash_work, db_hash_process);
    e102:	4910      	ldr	r1, [pc, #64]	; (e144 <bt_gatt_init+0x74>)
    e104:	4810      	ldr	r0, [pc, #64]	; (e148 <bt_gatt_init+0x78>)
    e106:	f014 fff7 	bl	230f8 <k_delayed_work_init>
    e10a:	490f      	ldr	r1, [pc, #60]	; (e148 <bt_gatt_init+0x78>)
    e10c:	480f      	ldr	r0, [pc, #60]	; (e14c <bt_gatt_init+0x7c>)
    e10e:	f44f 72a4 	mov.w	r2, #328	; 0x148
    e112:	2300      	movs	r3, #0
    e114:	f00f fc6e 	bl	1d9f4 <k_delayed_work_submit_to_queue>
}
    e118:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		k_delayed_work_init(&gatt_sc.work, sc_process);
    e11c:	490c      	ldr	r1, [pc, #48]	; (e150 <bt_gatt_init+0x80>)
    e11e:	480d      	ldr	r0, [pc, #52]	; (e154 <bt_gatt_init+0x84>)
    e120:	f014 bfea 	b.w	230f8 <k_delayed_work_init>
		last_static_handle += svc->attr_count;
    e124:	6848      	ldr	r0, [r1, #4]
    e126:	4403      	add	r3, r0
    e128:	b29b      	uxth	r3, r3
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    e12a:	3108      	adds	r1, #8
    e12c:	2001      	movs	r0, #1
    e12e:	e7e4      	b.n	e0fa <bt_gatt_init+0x2a>
}
    e130:	bd10      	pop	{r4, pc}
    e132:	bf00      	nop
    e134:	20002008 	.word	0x20002008
    e138:	2000967c 	.word	0x2000967c
    e13c:	000236d8 	.word	0x000236d8
    e140:	000236f0 	.word	0x000236f0
    e144:	00021a39 	.word	0x00021a39
    e148:	20001190 	.word	0x20001190
    e14c:	20001c30 	.word	0x20001c30
    e150:	0000e3d1 	.word	0x0000e3d1
    e154:	200011d8 	.word	0x200011d8

0000e158 <bt_gatt_attr_value_handle>:
{
    e158:	b508      	push	{r3, lr}
	if ((attr != NULL)
    e15a:	b180      	cbz	r0, e17e <bt_gatt_attr_value_handle+0x26>
	    && (attr->read == bt_gatt_attr_read_chrc)) {
    e15c:	6841      	ldr	r1, [r0, #4]
    e15e:	4b09      	ldr	r3, [pc, #36]	; (e184 <bt_gatt_attr_value_handle+0x2c>)
    e160:	4299      	cmp	r1, r3
    e162:	d10c      	bne.n	e17e <bt_gatt_attr_value_handle+0x26>
		handle = chrc->value_handle;
    e164:	68c3      	ldr	r3, [r0, #12]
    e166:	889b      	ldrh	r3, [r3, #4]
		if (handle == 0) {
    e168:	b91b      	cbnz	r3, e172 <bt_gatt_attr_value_handle+0x1a>
			handle = (attr->handle ? : find_static_attr(attr)) + 1U;
    e16a:	8a03      	ldrh	r3, [r0, #16]
    e16c:	b11b      	cbz	r3, e176 <bt_gatt_attr_value_handle+0x1e>
    e16e:	3301      	adds	r3, #1
    e170:	b29b      	uxth	r3, r3
}
    e172:	4618      	mov	r0, r3
    e174:	bd08      	pop	{r3, pc}
			handle = (attr->handle ? : find_static_attr(attr)) + 1U;
    e176:	f7ff fb9d 	bl	d8b4 <find_static_attr>
    e17a:	1c43      	adds	r3, r0, #1
    e17c:	e7f8      	b.n	e170 <bt_gatt_attr_value_handle+0x18>
	uint16_t handle = 0;
    e17e:	2300      	movs	r3, #0
    e180:	e7f7      	b.n	e172 <bt_gatt_attr_value_handle+0x1a>
    e182:	bf00      	nop
    e184:	000219c1 	.word	0x000219c1

0000e188 <bt_gatt_foreach_attr_type>:
{
    e188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e18c:	b089      	sub	sp, #36	; 0x24
    e18e:	4698      	mov	r8, r3
    e190:	f8bd 5048 	ldrh.w	r5, [sp, #72]	; 0x48
    e194:	9101      	str	r1, [sp, #4]
		num_matches = UINT16_MAX;
    e196:	f64f 73ff 	movw	r3, #65535	; 0xffff
    e19a:	2d00      	cmp	r5, #0
    e19c:	bf08      	it	eq
    e19e:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
    e1a0:	4b26      	ldr	r3, [pc, #152]	; (e23c <bt_gatt_foreach_attr_type+0xb4>)
    e1a2:	881b      	ldrh	r3, [r3, #0]
    e1a4:	4283      	cmp	r3, r0
{
    e1a6:	4606      	mov	r6, r0
    e1a8:	4617      	mov	r7, r2
	if (start_handle <= last_static_handle) {
    e1aa:	d33c      	bcc.n	e226 <bt_gatt_foreach_attr_type+0x9e>
    e1ac:	f8df a094 	ldr.w	sl, [pc, #148]	; e244 <bt_gatt_foreach_attr_type+0xbc>
		uint16_t handle = 1;
    e1b0:	2401      	movs	r4, #1
				memcpy(&attr, &static_svc->attrs[i],
    e1b2:	f04f 0b14 	mov.w	fp, #20
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    e1b6:	4b22      	ldr	r3, [pc, #136]	; (e240 <bt_gatt_foreach_attr_type+0xb8>)
    e1b8:	f1aa 0208 	sub.w	r2, sl, #8
    e1bc:	429a      	cmp	r2, r3
    e1be:	d232      	bcs.n	e226 <bt_gatt_foreach_attr_type+0x9e>
			if (handle + static_svc->attr_count < start_handle) {
    e1c0:	f85a 2c04 	ldr.w	r2, [sl, #-4]
    e1c4:	4422      	add	r2, r4
    e1c6:	42b2      	cmp	r2, r6
    e1c8:	d234      	bcs.n	e234 <bt_gatt_foreach_attr_type+0xac>
				handle += static_svc->attr_count;
    e1ca:	b294      	uxth	r4, r2
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    e1cc:	f10a 0a08 	add.w	sl, sl, #8
    e1d0:	e7f1      	b.n	e1b6 <bt_gatt_foreach_attr_type+0x2e>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    e1d2:	9903      	ldr	r1, [sp, #12]
    e1d4:	4638      	mov	r0, r7
    e1d6:	f011 ff1d 	bl	20014 <bt_uuid_cmp>
    e1da:	b1c0      	cbz	r0, e20e <bt_gatt_foreach_attr_type+0x86>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    e1dc:	3401      	adds	r4, #1
    e1de:	f109 0901 	add.w	r9, r9, #1
    e1e2:	b2a4      	uxth	r4, r4
    e1e4:	f85a 2c04 	ldr.w	r2, [sl, #-4]
    e1e8:	454a      	cmp	r2, r9
    e1ea:	d9ef      	bls.n	e1cc <bt_gatt_foreach_attr_type+0x44>
				memcpy(&attr, &static_svc->attrs[i],
    e1ec:	f85a 1c08 	ldr.w	r1, [sl, #-8]
    e1f0:	2214      	movs	r2, #20
    e1f2:	fb0b 1109 	mla	r1, fp, r9, r1
    e1f6:	a803      	add	r0, sp, #12
    e1f8:	f011 fe3d 	bl	1fe76 <memcpy>
	if (attr->handle > end_handle) {
    e1fc:	9b01      	ldr	r3, [sp, #4]
				attr.handle = handle;
    e1fe:	f8ad 401c 	strh.w	r4, [sp, #28]
	if (attr->handle > end_handle) {
    e202:	429c      	cmp	r4, r3
    e204:	d80f      	bhi.n	e226 <bt_gatt_foreach_attr_type+0x9e>
	if (attr->handle < start_handle) {
    e206:	42b4      	cmp	r4, r6
    e208:	d3e8      	bcc.n	e1dc <bt_gatt_foreach_attr_type+0x54>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    e20a:	2f00      	cmp	r7, #0
    e20c:	d1e1      	bne.n	e1d2 <bt_gatt_foreach_attr_type+0x4a>
	if (attr_data && attr_data != attr->user_data) {
    e20e:	f1b8 0f00 	cmp.w	r8, #0
    e212:	d10b      	bne.n	e22c <bt_gatt_foreach_attr_type+0xa4>
	*num_matches -= 1;
    e214:	3d01      	subs	r5, #1
    e216:	b2ad      	uxth	r5, r5
	result = func(attr, user_data);
    e218:	9914      	ldr	r1, [sp, #80]	; 0x50
    e21a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    e21c:	a803      	add	r0, sp, #12
    e21e:	4798      	blx	r3
	if (!*num_matches) {
    e220:	b10d      	cbz	r5, e226 <bt_gatt_foreach_attr_type+0x9e>
				if (gatt_foreach_iter(&attr, start_handle,
    e222:	2800      	cmp	r0, #0
    e224:	d1da      	bne.n	e1dc <bt_gatt_foreach_attr_type+0x54>
}
    e226:	b009      	add	sp, #36	; 0x24
    e228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (attr_data && attr_data != attr->user_data) {
    e22c:	9a06      	ldr	r2, [sp, #24]
    e22e:	4590      	cmp	r8, r2
    e230:	d1d4      	bne.n	e1dc <bt_gatt_foreach_attr_type+0x54>
    e232:	e7ef      	b.n	e214 <bt_gatt_foreach_attr_type+0x8c>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    e234:	f04f 0900 	mov.w	r9, #0
    e238:	e7d4      	b.n	e1e4 <bt_gatt_foreach_attr_type+0x5c>
    e23a:	bf00      	nop
    e23c:	2000967c 	.word	0x2000967c
    e240:	000236f0 	.word	0x000236f0
    e244:	000236e0 	.word	0x000236e0

0000e248 <db_hash_gen.isra.0>:
static void db_hash_gen(bool store)
    e248:	b510      	push	{r4, lr}
    e24a:	b0c8      	sub	sp, #288	; 0x120
	uint8_t key[16] = {};
    e24c:	2300      	movs	r3, #0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    e24e:	aa1c      	add	r2, sp, #112	; 0x70
    e250:	4669      	mov	r1, sp
    e252:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
    e254:	e9cd 3300 	strd	r3, r3, [sp]
    e258:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    e25c:	f011 fcf0 	bl	1fc40 <tc_cmac_setup>
    e260:	b958      	cbnz	r0, e27a <db_hash_gen.isra.0+0x32>
    e262:	4917      	ldr	r1, [pc, #92]	; (e2c0 <db_hash_gen.isra.0+0x78>)
    e264:	4b17      	ldr	r3, [pc, #92]	; (e2c4 <db_hash_gen.isra.0+0x7c>)
		BT_ERR("Unable to setup AES CMAC");
    e266:	4818      	ldr	r0, [pc, #96]	; (e2c8 <db_hash_gen.isra.0+0x80>)
    e268:	1ac9      	subs	r1, r1, r3
    e26a:	08c9      	lsrs	r1, r1, #3
    e26c:	0189      	lsls	r1, r1, #6
    e26e:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Unable to calculate hash");
    e272:	f010 f92e 	bl	1e4d2 <log_0>
}
    e276:	b048      	add	sp, #288	; 0x120
    e278:	bd10      	pop	{r4, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
    e27a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e27e:	2001      	movs	r0, #1
    e280:	4a12      	ldr	r2, [pc, #72]	; (e2cc <db_hash_gen.isra.0+0x84>)
    e282:	ab04      	add	r3, sp, #16
    e284:	f013 fbcd 	bl	21a22 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
    e288:	4811      	ldr	r0, [pc, #68]	; (e2d0 <db_hash_gen.isra.0+0x88>)
    e28a:	a904      	add	r1, sp, #16
    e28c:	f011 fd6f 	bl	1fd6e <tc_cmac_final>
    e290:	b940      	cbnz	r0, e2a4 <db_hash_gen.isra.0+0x5c>
    e292:	490b      	ldr	r1, [pc, #44]	; (e2c0 <db_hash_gen.isra.0+0x78>)
    e294:	4b0b      	ldr	r3, [pc, #44]	; (e2c4 <db_hash_gen.isra.0+0x7c>)
		BT_ERR("Unable to calculate hash");
    e296:	480f      	ldr	r0, [pc, #60]	; (e2d4 <db_hash_gen.isra.0+0x8c>)
    e298:	1ac9      	subs	r1, r1, r3
    e29a:	08c9      	lsrs	r1, r1, #3
    e29c:	0189      	lsls	r1, r1, #6
    e29e:	f041 0101 	orr.w	r1, r1, #1
    e2a2:	e7e6      	b.n	e272 <db_hash_gen.isra.0+0x2a>
    e2a4:	4b0a      	ldr	r3, [pc, #40]	; (e2d0 <db_hash_gen.isra.0+0x88>)
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
    e2a6:	2208      	movs	r2, #8
    e2a8:	f103 0110 	add.w	r1, r3, #16
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
    e2ac:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
    e2ae:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
    e2b2:	f803 4b01 	strb.w	r4, [r3], #1
	for (i = 0; i < (length/2); i++) {
    e2b6:	3a01      	subs	r2, #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
    e2b8:	7008      	strb	r0, [r1, #0]
	for (i = 0; i < (length/2); i++) {
    e2ba:	d1f7      	bne.n	e2ac <db_hash_gen.isra.0+0x64>
    e2bc:	e7db      	b.n	e276 <db_hash_gen.isra.0+0x2e>
    e2be:	bf00      	nop
    e2c0:	00023798 	.word	0x00023798
    e2c4:	000236f0 	.word	0x000236f0
    e2c8:	0002699c 	.word	0x0002699c
    e2cc:	000215b3 	.word	0x000215b3
    e2d0:	20009c29 	.word	0x20009c29
    e2d4:	000269b5 	.word	0x000269b5

0000e2d8 <bt_gatt_indicate>:
{
    e2d8:	b5f0      	push	{r4, r5, r6, r7, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    e2da:	4b3a      	ldr	r3, [pc, #232]	; (e3c4 <bt_gatt_indicate+0xec>)
    e2dc:	f3bf 8f5b 	dmb	ish
    e2e0:	681b      	ldr	r3, [r3, #0]
    e2e2:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    e2e6:	079a      	lsls	r2, r3, #30
{
    e2e8:	b08b      	sub	sp, #44	; 0x2c
    e2ea:	4605      	mov	r5, r0
    e2ec:	460e      	mov	r6, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    e2ee:	d563      	bpl.n	e3b8 <bt_gatt_indicate+0xe0>
	attr = params->attr;
    e2f0:	6848      	ldr	r0, [r1, #4]
    e2f2:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
    e2f4:	b115      	cbz	r5, e2fc <bt_gatt_indicate+0x24>
    e2f6:	7b6b      	ldrb	r3, [r5, #13]
    e2f8:	2b06      	cmp	r3, #6
    e2fa:	d160      	bne.n	e3be <bt_gatt_indicate+0xe6>
	handle = attr->handle ? : find_static_attr(attr);
    e2fc:	8a04      	ldrh	r4, [r0, #16]
    e2fe:	b93c      	cbnz	r4, e310 <bt_gatt_indicate+0x38>
    e300:	f7ff fad8 	bl	d8b4 <find_static_attr>
	if (!handle) {
    e304:	4604      	mov	r4, r0
    e306:	b918      	cbnz	r0, e310 <bt_gatt_indicate+0x38>
		return -ENOENT;
    e308:	f06f 0001 	mvn.w	r0, #1
}
    e30c:	b00b      	add	sp, #44	; 0x2c
    e30e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (params->uuid) {
    e310:	6832      	ldr	r2, [r6, #0]
    e312:	b1b2      	cbz	r2, e342 <bt_gatt_indicate+0x6a>
		bt_gatt_foreach_attr_type(handle, 0xffff, params->uuid,
    e314:	a905      	add	r1, sp, #20
    e316:	9102      	str	r1, [sp, #8]
    e318:	492b      	ldr	r1, [pc, #172]	; (e3c8 <bt_gatt_indicate+0xf0>)
    e31a:	9101      	str	r1, [sp, #4]
    e31c:	2101      	movs	r1, #1
		attr = NULL;
    e31e:	2300      	movs	r3, #0
		bt_gatt_foreach_attr_type(handle, 0xffff, params->uuid,
    e320:	9100      	str	r1, [sp, #0]
    e322:	4620      	mov	r0, r4
    e324:	f64f 71ff 	movw	r1, #65535	; 0xffff
		attr = NULL;
    e328:	9305      	str	r3, [sp, #20]
		bt_gatt_foreach_attr_type(handle, 0xffff, params->uuid,
    e32a:	f7ff ff2d 	bl	e188 <bt_gatt_foreach_attr_type>
		if (!attr) {
    e32e:	9805      	ldr	r0, [sp, #20]
    e330:	2800      	cmp	r0, #0
    e332:	d0e9      	beq.n	e308 <bt_gatt_indicate+0x30>
		handle = attr->handle ? : find_static_attr(attr);
    e334:	8a04      	ldrh	r4, [r0, #16]
    e336:	b924      	cbnz	r4, e342 <bt_gatt_indicate+0x6a>
    e338:	f7ff fabc 	bl	d8b4 <find_static_attr>
		if (!handle) {
    e33c:	4604      	mov	r4, r0
    e33e:	2800      	cmp	r0, #0
    e340:	d0e2      	beq.n	e308 <bt_gatt_indicate+0x30>
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
    e342:	9b05      	ldr	r3, [sp, #20]
    e344:	af07      	add	r7, sp, #28
    e346:	6818      	ldr	r0, [r3, #0]
    e348:	2300      	movs	r3, #0
    e34a:	f88d 301c 	strb.w	r3, [sp, #28]
    e34e:	4639      	mov	r1, r7
    e350:	f642 0303 	movw	r3, #10243	; 0x2803
    e354:	f8ad 301e 	strh.w	r3, [sp, #30]
    e358:	f011 fe5c 	bl	20014 <bt_uuid_cmp>
    e35c:	b950      	cbnz	r0, e374 <bt_gatt_indicate+0x9c>
		struct bt_gatt_chrc *chrc = attr->user_data;
    e35e:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
    e360:	68c3      	ldr	r3, [r0, #12]
    e362:	799b      	ldrb	r3, [r3, #6]
    e364:	069b      	lsls	r3, r3, #26
    e366:	d402      	bmi.n	e36e <bt_gatt_indicate+0x96>
			return -EINVAL;
    e368:	f06f 0015 	mvn.w	r0, #21
    e36c:	e7ce      	b.n	e30c <bt_gatt_indicate+0x34>
		handle = bt_gatt_attr_value_handle(attr);
    e36e:	f7ff fef3 	bl	e158 <bt_gatt_attr_value_handle>
    e372:	4604      	mov	r4, r0
	if (conn) {
    e374:	b12d      	cbz	r5, e382 <bt_gatt_indicate+0xaa>
		return gatt_indicate(conn, handle, params);
    e376:	4632      	mov	r2, r6
    e378:	4621      	mov	r1, r4
    e37a:	4628      	mov	r0, r5
    e37c:	f7ff fb12 	bl	d9a4 <gatt_indicate>
    e380:	e7c4      	b.n	e30c <bt_gatt_indicate+0x34>
	data.err = -ENOTCONN;
    e382:	f06f 0338 	mvn.w	r3, #56	; 0x38
    e386:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
    e388:	2302      	movs	r3, #2
    e38a:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(handle, 0xffff, BT_UUID_GATT_CCC, NULL, 1,
    e38e:	f642 1302 	movw	r3, #10498	; 0x2902
    e392:	f8ad 301a 	strh.w	r3, [sp, #26]
    e396:	4b0d      	ldr	r3, [pc, #52]	; (e3cc <bt_gatt_indicate+0xf4>)
    e398:	9301      	str	r3, [sp, #4]
    e39a:	2301      	movs	r3, #1
    e39c:	9300      	str	r3, [sp, #0]
    e39e:	4620      	mov	r0, r4
    e3a0:	9702      	str	r7, [sp, #8]
    e3a2:	462b      	mov	r3, r5
    e3a4:	aa06      	add	r2, sp, #24
    e3a6:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
    e3aa:	9609      	str	r6, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(handle, 0xffff, BT_UUID_GATT_CCC, NULL, 1,
    e3ac:	f88d 5018 	strb.w	r5, [sp, #24]
    e3b0:	f7ff feea 	bl	e188 <bt_gatt_foreach_attr_type>
	return data.err;
    e3b4:	9807      	ldr	r0, [sp, #28]
    e3b6:	e7a9      	b.n	e30c <bt_gatt_indicate+0x34>
		return -EAGAIN;
    e3b8:	f06f 000a 	mvn.w	r0, #10
    e3bc:	e7a6      	b.n	e30c <bt_gatt_indicate+0x34>
		return -ENOTCONN;
    e3be:	f06f 0038 	mvn.w	r0, #56	; 0x38
    e3c2:	e7a3      	b.n	e30c <bt_gatt_indicate+0x34>
    e3c4:	20000098 	.word	0x20000098
    e3c8:	000216db 	.word	0x000216db
    e3cc:	0000dcc5 	.word	0x0000dcc5

0000e3d0 <sc_process>:
{
    e3d0:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
    e3d2:	f850 2c04 	ldr.w	r2, [r0, #-4]
    e3d6:	9201      	str	r2, [sp, #4]
{
    e3d8:	4603      	mov	r3, r0
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    e3da:	f1a0 0118 	sub.w	r1, r0, #24
    e3de:	f100 0430 	add.w	r4, r0, #48	; 0x30
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    e3e2:	f3bf 8f5b 	dmb	ish
    e3e6:	e854 2f00 	ldrex	r2, [r4]
    e3ea:	f022 0201 	bic.w	r2, r2, #1
    e3ee:	e844 2000 	strex	r0, r2, [r4]
    e3f2:	2800      	cmp	r0, #0
    e3f4:	d1f7      	bne.n	e3e6 <sc_process+0x16>
    e3f6:	f3bf 8f5b 	dmb	ish
	sc->params.attr = &_1_gatt_svc.attrs[2];
    e3fa:	4a0d      	ldr	r2, [pc, #52]	; (e430 <sc_process+0x60>)
    e3fc:	f843 2c14 	str.w	r2, [r3, #-20]
	sc->params.func = sc_indicate_rsp;
    e400:	4a0c      	ldr	r2, [pc, #48]	; (e434 <sc_process+0x64>)
    e402:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.data = &sc_range[0];
    e406:	aa01      	add	r2, sp, #4
	sc->start = 0U;
    e408:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
    e40a:	f843 2c0c 	str.w	r2, [r3, #-12]
	sc->params.len = sizeof(sc_range);
    e40e:	2204      	movs	r2, #4
	sc->start = 0U;
    e410:	f823 0c04 	strh.w	r0, [r3, #-4]
	sc->end = 0U;
    e414:	f823 0c02 	strh.w	r0, [r3, #-2]
	sc->params.len = sizeof(sc_range);
    e418:	f823 2c08 	strh.w	r2, [r3, #-8]
	if (bt_gatt_indicate(NULL, &sc->params)) {
    e41c:	f7ff ff5c 	bl	e2d8 <bt_gatt_indicate>
    e420:	b918      	cbnz	r0, e42a <sc_process+0x5a>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
    e422:	2101      	movs	r1, #1
    e424:	4620      	mov	r0, r4
    e426:	f013 f97b 	bl	21720 <atomic_set_bit>
}
    e42a:	b002      	add	sp, #8
    e42c:	bd10      	pop	{r4, pc}
    e42e:	bf00      	nop
    e430:	00023e48 	.word	0x00023e48
    e434:	0000dfb5 	.word	0x0000dfb5

0000e438 <update_ccc>:
{
    e438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    e43c:	4a41      	ldr	r2, [pc, #260]	; (e544 <update_ccc+0x10c>)
{
    e43e:	460f      	mov	r7, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    e440:	6881      	ldr	r1, [r0, #8]
    e442:	4291      	cmp	r1, r2
{
    e444:	b085      	sub	sp, #20
    e446:	4682      	mov	sl, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    e448:	d178      	bne.n	e53c <update_ccc+0x104>
    e44a:	4c3f      	ldr	r4, [pc, #252]	; (e548 <update_ccc+0x110>)
    e44c:	493f      	ldr	r1, [pc, #252]	; (e54c <update_ccc+0x114>)
	ccc = attr->user_data;
    e44e:	f8d0 800c 	ldr.w	r8, [r0, #12]
	struct bt_conn *conn = data->conn;
    e452:	683d      	ldr	r5, [r7, #0]
				BT_WARN("CCC %p not writable", attr);
    e454:	f8df b10c 	ldr.w	fp, [pc, #268]	; e564 <update_ccc+0x12c>
    e458:	1a64      	subs	r4, r4, r1
    e45a:	08e4      	lsrs	r4, r4, #3
    e45c:	f108 0333 	add.w	r3, r8, #51	; 0x33
    e460:	ea4f 1984 	mov.w	r9, r4, lsl #6
    e464:	f108 0601 	add.w	r6, r8, #1
    e468:	9300      	str	r3, [sp, #0]
    e46a:	f049 0902 	orr.w	r9, r9, #2
		if (!cfg->value ||
    e46e:	f8b6 2007 	ldrh.w	r2, [r6, #7]
    e472:	b19a      	cbz	r2, e49c <update_ccc+0x64>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    e474:	f816 1c01 	ldrb.w	r1, [r6, #-1]
    e478:	4632      	mov	r2, r6
    e47a:	4628      	mov	r0, r5
    e47c:	f012 f89f 	bl	205be <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
    e480:	b160      	cbz	r0, e49c <update_ccc+0x64>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
    e482:	222a      	movs	r2, #42	; 0x2a
    e484:	4651      	mov	r1, sl
    e486:	4628      	mov	r0, r5
    e488:	f013 fad8 	bl	21a3c <bt_gatt_check_perm>
		if (err) {
    e48c:	b1d8      	cbz	r0, e4c6 <update_ccc+0x8e>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
    e48e:	2803      	cmp	r0, #3
    e490:	d109      	bne.n	e4a6 <update_ccc+0x6e>
				BT_WARN("CCC %p not writable", attr);
    e492:	464a      	mov	r2, r9
    e494:	4651      	mov	r1, sl
    e496:	4658      	mov	r0, fp
    e498:	f010 f828 	bl	1e4ec <log_1>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
    e49c:	9b00      	ldr	r3, [sp, #0]
    e49e:	360a      	adds	r6, #10
    e4a0:	429e      	cmp	r6, r3
    e4a2:	d1e4      	bne.n	e46e <update_ccc+0x36>
    e4a4:	e04a      	b.n	e53c <update_ccc+0x104>
				sec = BT_SECURITY_L3;
    e4a6:	2805      	cmp	r0, #5
    e4a8:	bf14      	ite	ne
    e4aa:	2202      	movne	r2, #2
    e4ac:	2203      	moveq	r2, #3
			    bt_conn_get_security(conn) < sec) {
    e4ae:	4628      	mov	r0, r5
				sec = BT_SECURITY_L3;
    e4b0:	9201      	str	r2, [sp, #4]
			    bt_conn_get_security(conn) < sec) {
    e4b2:	f012 f882 	bl	205ba <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
    e4b6:	9a01      	ldr	r2, [sp, #4]
    e4b8:	4282      	cmp	r2, r0
    e4ba:	d904      	bls.n	e4c6 <update_ccc+0x8e>
				if (data->sec < sec) {
    e4bc:	7939      	ldrb	r1, [r7, #4]
    e4be:	4291      	cmp	r1, r2
    e4c0:	d2ec      	bcs.n	e49c <update_ccc+0x64>
					data->sec = sec;
    e4c2:	713a      	strb	r2, [r7, #4]
    e4c4:	e7ea      	b.n	e49c <update_ccc+0x64>
		gatt_ccc_changed(attr, ccc);
    e4c6:	4641      	mov	r1, r8
    e4c8:	4650      	mov	r0, sl
    e4ca:	f013 f850 	bl	2156e <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
    e4ce:	4b20      	ldr	r3, [pc, #128]	; (e550 <update_ccc+0x118>)
    e4d0:	4598      	cmp	r8, r3
    e4d2:	d133      	bne.n	e53c <update_ccc+0x104>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
    e4d4:	7a28      	ldrb	r0, [r5, #8]
    e4d6:	f105 0188 	add.w	r1, r5, #136	; 0x88
    e4da:	f7ff facd 	bl	da78 <find_sc_cfg>
	if (!cfg) {
    e4de:	4606      	mov	r6, r0
    e4e0:	b360      	cbz	r0, e53c <update_ccc+0x104>
	if (!(cfg->data.start || cfg->data.end)) {
    e4e2:	8902      	ldrh	r2, [r0, #8]
    e4e4:	8943      	ldrh	r3, [r0, #10]
    e4e6:	ea52 0103 	orrs.w	r1, r2, r3
    e4ea:	d027      	beq.n	e53c <update_ccc+0x104>
	index = bt_conn_index(conn);
    e4ec:	4628      	mov	r0, r5
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
    e4ee:	f8ad 200c 	strh.w	r2, [sp, #12]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
    e4f2:	f8ad 300e 	strh.w	r3, [sp, #14]
	index = bt_conn_index(conn);
    e4f6:	f7fc ff3d 	bl	b374 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
    e4fa:	4916      	ldr	r1, [pc, #88]	; (e554 <update_ccc+0x11c>)
    e4fc:	4a16      	ldr	r2, [pc, #88]	; (e558 <update_ccc+0x120>)
    e4fe:	2314      	movs	r3, #20
    e500:	fb03 1300 	mla	r3, r3, r0, r1
    e504:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
    e506:	4a15      	ldr	r2, [pc, #84]	; (e55c <update_ccc+0x124>)
    e508:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
    e50a:	aa03      	add	r2, sp, #12
    e50c:	60da      	str	r2, [r3, #12]
	sc_restore_params[index].len = sizeof(sc_range);
    e50e:	2204      	movs	r2, #4
    e510:	821a      	strh	r2, [r3, #16]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    e512:	b203      	sxth	r3, r0
    e514:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    e518:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    e51c:	4628      	mov	r0, r5
    e51e:	f7ff fedb 	bl	e2d8 <bt_gatt_indicate>
    e522:	b128      	cbz	r0, e530 <update_ccc+0xf8>
		BT_ERR("SC restore indication failed");
    e524:	01a1      	lsls	r1, r4, #6
    e526:	480e      	ldr	r0, [pc, #56]	; (e560 <update_ccc+0x128>)
    e528:	f041 0101 	orr.w	r1, r1, #1
    e52c:	f00f ffd1 	bl	1e4d2 <log_0>
	memset(&cfg->data, 0, sizeof(cfg->data));
    e530:	2204      	movs	r2, #4
    e532:	2100      	movs	r1, #0
    e534:	f106 0008 	add.w	r0, r6, #8
    e538:	f011 fcc8 	bl	1fecc <memset>
}
    e53c:	2001      	movs	r0, #1
    e53e:	b005      	add	sp, #20
    e540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e544:	0000ddb9 	.word	0x0000ddb9
    e548:	00023798 	.word	0x00023798
    e54c:	000236f0 	.word	0x000236f0
    e550:	20000230 	.word	0x20000230
    e554:	2000201c 	.word	0x2000201c
    e558:	00023e48 	.word	0x00023e48
    e55c:	0002173d 	.word	0x0002173d
    e560:	000269e2 	.word	0x000269e2
    e564:	000269ce 	.word	0x000269ce

0000e568 <bt_gatt_mult_notification>:
{
    e568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e56c:	460c      	mov	r4, r1
    e56e:	b087      	sub	sp, #28
	sub = gatt_sub_find(conn);
    e570:	2100      	movs	r1, #0
{
    e572:	4682      	mov	sl, r0
    e574:	4616      	mov	r6, r2
	sub = gatt_sub_find(conn);
    e576:	f7ff fa55 	bl	da24 <gatt_sub_find_free>
	if (!sub) {
    e57a:	4607      	mov	r7, r0
    e57c:	b1f8      	cbz	r0, e5be <bt_gatt_mult_notification+0x56>
	net_buf_simple_init_with_data(&buf, (void *)data, length);
    e57e:	4632      	mov	r2, r6
    e580:	4621      	mov	r1, r4
    e582:	a803      	add	r0, sp, #12
    e584:	f013 ffbf 	bl	22506 <net_buf_simple_init_with_data>
	while (buf.len > sizeof(*nfy)) {
    e588:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    e58c:	2b04      	cmp	r3, #4
    e58e:	d916      	bls.n	e5be <bt_gatt_mult_notification+0x56>
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
    e590:	2104      	movs	r1, #4
    e592:	a803      	add	r0, sp, #12
    e594:	f014 f83d 	bl	22612 <net_buf_simple_pull_mem>
		if (len > buf.len) {
    e598:	f8bd 3010 	ldrh.w	r3, [sp, #16]
		len = sys_cpu_to_le16(nfy->len);
    e59c:	f8b0 8002 	ldrh.w	r8, [r0, #2]
		if (len > buf.len) {
    e5a0:	4543      	cmp	r3, r8
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
    e5a2:	4605      	mov	r5, r0
		if (len > buf.len) {
    e5a4:	d20e      	bcs.n	e5c4 <bt_gatt_mult_notification+0x5c>
    e5a6:	4a1d      	ldr	r2, [pc, #116]	; (e61c <bt_gatt_mult_notification+0xb4>)
    e5a8:	4b1d      	ldr	r3, [pc, #116]	; (e620 <bt_gatt_mult_notification+0xb8>)
			BT_ERR("Invalid data len %u > %u", len, length);
    e5aa:	481e      	ldr	r0, [pc, #120]	; (e624 <bt_gatt_mult_notification+0xbc>)
    e5ac:	1a9b      	subs	r3, r3, r2
    e5ae:	08db      	lsrs	r3, r3, #3
    e5b0:	019b      	lsls	r3, r3, #6
    e5b2:	f043 0301 	orr.w	r3, r3, #1
    e5b6:	4632      	mov	r2, r6
    e5b8:	4641      	mov	r1, r8
    e5ba:	f00f ffab 	bl	1e514 <log_2>
}
    e5be:	b007      	add	sp, #28
    e5c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
    e5c4:	68bb      	ldr	r3, [r7, #8]
    e5c6:	b31b      	cbz	r3, e610 <bt_gatt_mult_notification+0xa8>
    e5c8:	f1b3 0910 	subs.w	r9, r3, #16
    e5cc:	d020      	beq.n	e610 <bt_gatt_mult_notification+0xa8>
    e5ce:	681c      	ldr	r4, [r3, #0]
    e5d0:	b104      	cbz	r4, e5d4 <bt_gatt_mult_notification+0x6c>
    e5d2:	3c10      	subs	r4, #16
		handle = sys_cpu_to_le16(nfy->handle);
    e5d4:	462b      	mov	r3, r5
    e5d6:	f833 bb04 	ldrh.w	fp, [r3], #4
    e5da:	9301      	str	r3, [sp, #4]
			if (handle != params->value_handle) {
    e5dc:	f8b9 3004 	ldrh.w	r3, [r9, #4]
    e5e0:	455b      	cmp	r3, fp
    e5e2:	d10b      	bne.n	e5fc <bt_gatt_mult_notification+0x94>
			if (params->notify(conn, params, nfy->value, len) ==
    e5e4:	9a01      	ldr	r2, [sp, #4]
    e5e6:	f8d9 5000 	ldr.w	r5, [r9]
    e5ea:	4643      	mov	r3, r8
    e5ec:	4649      	mov	r1, r9
    e5ee:	4650      	mov	r0, sl
    e5f0:	47a8      	blx	r5
    e5f2:	b918      	cbnz	r0, e5fc <bt_gatt_mult_notification+0x94>
				bt_gatt_unsubscribe(conn, params);
    e5f4:	4649      	mov	r1, r9
    e5f6:	4650      	mov	r0, sl
    e5f8:	f013 fa4b 	bl	21a92 <bt_gatt_unsubscribe>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
    e5fc:	b144      	cbz	r4, e610 <bt_gatt_mult_notification+0xa8>
Z_GENLIST_PEEK_NEXT(slist, snode)
    e5fe:	f114 0310 	adds.w	r3, r4, #16
    e602:	d002      	beq.n	e60a <bt_gatt_mult_notification+0xa2>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    e604:	6923      	ldr	r3, [r4, #16]
    e606:	b103      	cbz	r3, e60a <bt_gatt_mult_notification+0xa2>
    e608:	3b10      	subs	r3, #16
{
    e60a:	46a1      	mov	r9, r4
    e60c:	461c      	mov	r4, r3
    e60e:	e7e5      	b.n	e5dc <bt_gatt_mult_notification+0x74>
		net_buf_simple_pull_mem(&buf, len);
    e610:	4641      	mov	r1, r8
    e612:	a803      	add	r0, sp, #12
    e614:	f013 fffd 	bl	22612 <net_buf_simple_pull_mem>
    e618:	e7b6      	b.n	e588 <bt_gatt_mult_notification+0x20>
    e61a:	bf00      	nop
    e61c:	000236f0 	.word	0x000236f0
    e620:	00023798 	.word	0x00023798
    e624:	000269ff 	.word	0x000269ff

0000e628 <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
    e628:	b573      	push	{r0, r1, r4, r5, r6, lr}
		}

		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
	}

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    e62a:	4a1e      	ldr	r2, [pc, #120]	; (e6a4 <bt_gatt_connected+0x7c>)
	data.conn = conn;
    e62c:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    e62e:	f64f 71ff 	movw	r1, #65535	; 0xffff
{
    e632:	4605      	mov	r5, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    e634:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
    e636:	2001      	movs	r0, #1
    e638:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    e63c:	f013 f9f1 	bl	21a22 <bt_gatt_foreach_attr>
	 * client prior to sending an indication or notification. If the client
	 * does not have an LTK indicating that the client has lost the bond,
	 * enabling encryption will fail.
	 */
	if (IS_ENABLED(CONFIG_BT_SMP) &&
	    bt_conn_get_security(conn) < data.sec) {
    e640:	4628      	mov	r0, r5
    e642:	f011 ffba 	bl	205ba <bt_conn_get_security>
    e646:	f89d 1004 	ldrb.w	r1, [sp, #4]
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    e64a:	4288      	cmp	r0, r1
    e64c:	d202      	bcs.n	e654 <bt_gatt_connected+0x2c>
		bt_conn_set_security(conn, data.sec);
    e64e:	4628      	mov	r0, r5
    e650:	f011 ff80 	bl	20554 <bt_conn_set_security>
	sub = gatt_sub_find(conn);
    e654:	2100      	movs	r1, #0
    e656:	4628      	mov	r0, r5
    e658:	f7ff f9e4 	bl	da24 <gatt_sub_find_free>
	if (!sub) {
    e65c:	b128      	cbz	r0, e66a <bt_gatt_connected+0x42>
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
    e65e:	6884      	ldr	r4, [r0, #8]
    e660:	b11c      	cbz	r4, e66a <bt_gatt_connected+0x42>
    e662:	3c10      	subs	r4, #16
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
    e664:	f105 0688 	add.w	r6, r5, #136	; 0x88
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
    e668:	b90c      	cbnz	r4, e66e <bt_gatt_connected+0x46>
	}

#if defined(CONFIG_BT_GATT_CLIENT)
	add_subscriptions(conn);
#endif /* CONFIG_BT_GATT_CLIENT */
}
    e66a:	b002      	add	sp, #8
    e66c:	bd70      	pop	{r4, r5, r6, pc}
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
    e66e:	7a28      	ldrb	r0, [r5, #8]
    e670:	4631      	mov	r1, r6
    e672:	f011 feda 	bl	2042a <bt_addr_le_is_bonded>
    e676:	b160      	cbz	r0, e692 <bt_gatt_connected+0x6a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    e678:	f3bf 8f5b 	dmb	ish
    e67c:	68e3      	ldr	r3, [r4, #12]
    e67e:	f3bf 8f5b 	dmb	ish
    e682:	079b      	lsls	r3, r3, #30
    e684:	d405      	bmi.n	e692 <bt_gatt_connected+0x6a>
			gatt_write_ccc(conn, params->ccc_handle, params->value,
    e686:	8922      	ldrh	r2, [r4, #8]
    e688:	88e1      	ldrh	r1, [r4, #6]
    e68a:	4623      	mov	r3, r4
    e68c:	4628      	mov	r0, r5
    e68e:	f7ff fbfd 	bl	de8c <gatt_write_ccc.constprop.0>
Z_GENLIST_PEEK_NEXT(slist, snode)
    e692:	f114 0f10 	cmn.w	r4, #16
    e696:	d0e8      	beq.n	e66a <bt_gatt_connected+0x42>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    e698:	6924      	ldr	r4, [r4, #16]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
    e69a:	2c00      	cmp	r4, #0
    e69c:	d0e5      	beq.n	e66a <bt_gatt_connected+0x42>
    e69e:	3c10      	subs	r4, #16
    e6a0:	e7e2      	b.n	e668 <bt_gatt_connected+0x40>
    e6a2:	bf00      	nop
    e6a4:	0000e439 	.word	0x0000e439

0000e6a8 <bt_gatt_encrypt_change>:

void bt_gatt_encrypt_change(struct bt_conn *conn)
{
    e6a8:	b507      	push	{r0, r1, r2, lr}
	BT_DBG("conn %p", conn);

	data.conn = conn;
	data.sec = BT_SECURITY_L1;

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    e6aa:	4a06      	ldr	r2, [pc, #24]	; (e6c4 <bt_gatt_encrypt_change+0x1c>)
	data.conn = conn;
    e6ac:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    e6ae:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
    e6b0:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    e6b2:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
    e6b6:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    e6ba:	f013 f9b2 	bl	21a22 <bt_gatt_foreach_attr>
}
    e6be:	b003      	add	sp, #12
    e6c0:	f85d fb04 	ldr.w	pc, [sp], #4
    e6c4:	0000e439 	.word	0x0000e439

0000e6c8 <db_hash_read>:
{
    e6c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e6ca:	4604      	mov	r4, r0
	err = k_delayed_work_cancel(&db_hash_work);
    e6cc:	480f      	ldr	r0, [pc, #60]	; (e70c <db_hash_read+0x44>)
{
    e6ce:	f8bd 6018 	ldrh.w	r6, [sp, #24]
    e6d2:	4615      	mov	r5, r2
    e6d4:	461f      	mov	r7, r3
	err = k_delayed_work_cancel(&db_hash_work);
    e6d6:	f014 fd17 	bl	23108 <k_delayed_work_cancel>
	if (!err) {
    e6da:	b908      	cbnz	r0, e6e0 <db_hash_read+0x18>
		db_hash_gen(true);
    e6dc:	f7ff fdb4 	bl	e248 <db_hash_gen.isra.0>
	bt_gatt_change_aware(conn, true);
    e6e0:	2101      	movs	r1, #1
    e6e2:	4620      	mov	r0, r4
    e6e4:	f013 fa7b 	bl	21bde <bt_gatt_change_aware>
	if (offset > value_len) {
    e6e8:	2e10      	cmp	r6, #16
    e6ea:	d80c      	bhi.n	e706 <db_hash_read+0x3e>
	len = MIN(buf_len, value_len - offset);
    e6ec:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (uint8_t *)value + offset, len);
    e6f0:	4907      	ldr	r1, [pc, #28]	; (e710 <db_hash_read+0x48>)
	len = MIN(buf_len, value_len - offset);
    e6f2:	42bc      	cmp	r4, r7
    e6f4:	bfa8      	it	ge
    e6f6:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
    e6f8:	4622      	mov	r2, r4
    e6fa:	4431      	add	r1, r6
    e6fc:	4628      	mov	r0, r5
    e6fe:	f011 fbba 	bl	1fe76 <memcpy>
}
    e702:	4620      	mov	r0, r4
    e704:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    e706:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash,
    e70a:	e7fa      	b.n	e702 <db_hash_read+0x3a>
    e70c:	20001190 	.word	0x20001190
    e710:	20009c29 	.word	0x20009c29

0000e714 <bt_gatt_disconnected>:
	return 0;

}

void bt_gatt_disconnected(struct bt_conn *conn)
{
    e714:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    e718:	4a33      	ldr	r2, [pc, #204]	; (e7e8 <bt_gatt_disconnected+0xd4>)
    e71a:	4603      	mov	r3, r0
{
    e71c:	4604      	mov	r4, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    e71e:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e722:	2001      	movs	r0, #1
    e724:	f013 f97d 	bl	21a22 <bt_gatt_foreach_attr>
	sub = gatt_sub_find(conn);
    e728:	2100      	movs	r1, #0
    e72a:	4620      	mov	r0, r4
    e72c:	f7ff f97a 	bl	da24 <gatt_sub_find_free>
	if (!sub) {
    e730:	4606      	mov	r6, r0
    e732:	b3a8      	cbz	r0, e7a0 <bt_gatt_disconnected+0x8c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
    e734:	6883      	ldr	r3, [r0, #8]
    e736:	b39b      	cbz	r3, e7a0 <bt_gatt_disconnected+0x8c>
    e738:	f1b3 0710 	subs.w	r7, r3, #16
    e73c:	d030      	beq.n	e7a0 <bt_gatt_disconnected+0x8c>
    e73e:	681d      	ldr	r5, [r3, #0]
    e740:	b105      	cbz	r5, e744 <bt_gatt_disconnected+0x30>
    e742:	3d10      	subs	r5, #16
{
    e744:	f04f 0b00 	mov.w	fp, #0
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
    e748:	f104 0888 	add.w	r8, r4, #136	; 0x88
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
    e74c:	f106 0901 	add.w	r9, r6, #1
			params->value = 0U;
    e750:	46da      	mov	sl, fp
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
    e752:	7a20      	ldrb	r0, [r4, #8]
    e754:	4641      	mov	r1, r8
    e756:	f011 fe68 	bl	2042a <bt_addr_le_is_bonded>
    e75a:	b988      	cbnz	r0, e780 <bt_gatt_disconnected+0x6c>
			params->value = 0U;
    e75c:	f8a7 a008 	strh.w	sl, [r7, #8]
			gatt_sub_remove(conn, sub, prev, params);
    e760:	463b      	mov	r3, r7
    e762:	465a      	mov	r2, fp
    e764:	4631      	mov	r1, r6
    e766:	4620      	mov	r0, r4
    e768:	f013 f89d 	bl	218a6 <gatt_sub_remove>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
    e76c:	b1c5      	cbz	r5, e7a0 <bt_gatt_disconnected+0x8c>
Z_GENLIST_PEEK_NEXT(slist, snode)
    e76e:	f115 0110 	adds.w	r1, r5, #16
    e772:	d002      	beq.n	e77a <bt_gatt_disconnected+0x66>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    e774:	6929      	ldr	r1, [r5, #16]
    e776:	b101      	cbz	r1, e77a <bt_gatt_disconnected+0x66>
    e778:	3910      	subs	r1, #16
{
    e77a:	462f      	mov	r7, r5
    e77c:	460d      	mov	r5, r1
    e77e:	e7e8      	b.n	e752 <bt_gatt_disconnected+0x3e>
    e780:	f3bf 8f5b 	dmb	ish
    e784:	68fb      	ldr	r3, [r7, #12]
    e786:	f3bf 8f5b 	dmb	ish
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
    e78a:	07db      	lsls	r3, r3, #31
    e78c:	d4e6      	bmi.n	e75c <bt_gatt_disconnected+0x48>
	if (sub->peer.type == BT_ADDR_LE_PUBLIC) {
    e78e:	7873      	ldrb	r3, [r6, #1]
    e790:	b11b      	cbz	r3, e79a <bt_gatt_disconnected+0x86>
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
    e792:	4641      	mov	r1, r8
    e794:	4648      	mov	r0, r9
    e796:	f012 ff64 	bl	21662 <bt_addr_le_copy>
			prev = &params->node;
    e79a:	f107 0b10 	add.w	fp, r7, #16
    e79e:	e7e5      	b.n	e76c <bt_gatt_disconnected+0x58>
	cfg = find_cf_cfg(conn);
    e7a0:	4620      	mov	r0, r4
    e7a2:	f7ff f9c3 	bl	db2c <find_cf_cfg>
	if (!cfg) {
    e7a6:	4605      	mov	r5, r0
    e7a8:	b1e0      	cbz	r0, e7e4 <bt_gatt_disconnected+0xd0>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    e7aa:	f104 0688 	add.w	r6, r4, #136	; 0x88
    e7ae:	7a20      	ldrb	r0, [r4, #8]
    e7b0:	4631      	mov	r1, r6
    e7b2:	f011 fe3a 	bl	2042a <bt_addr_le_is_bonded>
    e7b6:	b920      	cbnz	r0, e7c2 <bt_gatt_disconnected+0xae>
		clear_cf_cfg(cfg);
    e7b8:	4628      	mov	r0, r5
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
    e7ba:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		clear_cf_cfg(cfg);
    e7be:	f012 bf6f 	b.w	216a0 <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    e7c2:	1c68      	adds	r0, r5, #1
    e7c4:	4631      	mov	r1, r6
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    e7c6:	350c      	adds	r5, #12
    e7c8:	f012 ff4b 	bl	21662 <bt_addr_le_copy>
    e7cc:	f3bf 8f5b 	dmb	ish
    e7d0:	e855 3f00 	ldrex	r3, [r5]
    e7d4:	f023 0302 	bic.w	r3, r3, #2
    e7d8:	e845 3200 	strex	r2, r3, [r5]
    e7dc:	2a00      	cmp	r2, #0
    e7de:	d1f7      	bne.n	e7d0 <bt_gatt_disconnected+0xbc>
    e7e0:	f3bf 8f5b 	dmb	ish
}
    e7e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e7e8:	0000e015 	.word	0x0000e015

0000e7ec <get_io_capa>:
static const uint8_t *sc_public_key;
static K_SEM_DEFINE(sc_local_pkey_ready, 0, 1);

static uint8_t get_io_capa(void)
{
	if (!bt_auth) {
    e7ec:	4b10      	ldr	r3, [pc, #64]	; (e830 <get_io_capa+0x44>)
    e7ee:	681b      	ldr	r3, [r3, #0]
    e7f0:	b1bb      	cbz	r3, e822 <get_io_capa+0x36>
		goto no_callbacks;
	}

	/* Passkey Confirmation is valid only for LE SC */
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
    e7f2:	681a      	ldr	r2, [r3, #0]
    e7f4:	b142      	cbz	r2, e808 <get_io_capa+0x1c>
    e7f6:	6859      	ldr	r1, [r3, #4]
    e7f8:	b131      	cbz	r1, e808 <get_io_capa+0x1c>
    e7fa:	6899      	ldr	r1, [r3, #8]
    e7fc:	b911      	cbnz	r1, e804 <get_io_capa+0x18>
	    (bt_auth->passkey_confirm || !sc_supported)) {
    e7fe:	490d      	ldr	r1, [pc, #52]	; (e834 <get_io_capa+0x48>)
    e800:	7809      	ldrb	r1, [r1, #0]
    e802:	b939      	cbnz	r1, e814 <get_io_capa+0x28>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
    e804:	2004      	movs	r0, #4
    e806:	4770      	bx	lr
	}

	/* DisplayYesNo is useful only for LE SC */
	if (sc_supported && bt_auth->passkey_display &&
    e808:	490a      	ldr	r1, [pc, #40]	; (e834 <get_io_capa+0x48>)
    e80a:	7809      	ldrb	r1, [r1, #0]
    e80c:	b111      	cbz	r1, e814 <get_io_capa+0x28>
    e80e:	b10a      	cbz	r2, e814 <get_io_capa+0x28>
    e810:	6899      	ldr	r1, [r3, #8]
    e812:	b941      	cbnz	r1, e826 <get_io_capa+0x3a>
	    bt_auth->passkey_confirm) {
		return BT_SMP_IO_DISPLAY_YESNO;
	}

	if (bt_auth->passkey_entry) {
    e814:	685b      	ldr	r3, [r3, #4]
    e816:	b943      	cbnz	r3, e82a <get_io_capa+0x3e>
			return BT_SMP_IO_KEYBOARD_ONLY;
		}
	}

	if (bt_auth->passkey_display) {
		return BT_SMP_IO_DISPLAY_ONLY;
    e818:	2a00      	cmp	r2, #0
    e81a:	bf0c      	ite	eq
    e81c:	2003      	moveq	r0, #3
    e81e:	2000      	movne	r0, #0
    e820:	4770      	bx	lr
no_callbacks:
	if (IS_ENABLED(CONFIG_BT_FIXED_PASSKEY) &&
	    fixed_passkey != BT_PASSKEY_INVALID) {
		return BT_SMP_IO_DISPLAY_ONLY;
	} else {
		return BT_SMP_IO_NO_INPUT_OUTPUT;
    e822:	2003      	movs	r0, #3
    e824:	4770      	bx	lr
		return BT_SMP_IO_DISPLAY_YESNO;
    e826:	2001      	movs	r0, #1
    e828:	4770      	bx	lr
			return BT_SMP_IO_KEYBOARD_ONLY;
    e82a:	2002      	movs	r0, #2
	}
}
    e82c:	4770      	bx	lr
    e82e:	bf00      	nop
    e830:	20001eec 	.word	0x20001eec
    e834:	20009c3a 	.word	0x20009c3a

0000e838 <smp_ident_info>:
	/* return no error to avoid sending Pairing Failed in response */
	return 0;
}

static uint8_t smp_ident_info(struct bt_smp *smp, struct net_buf *buf)
{
    e838:	b570      	push	{r4, r5, r6, lr}
    e83a:	460b      	mov	r3, r1
    e83c:	4604      	mov	r4, r0
	BT_DBG("");

	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    e83e:	210c      	movs	r1, #12
    e840:	30c4      	adds	r0, #196	; 0xc4
    e842:	f013 fa18 	bl	21c76 <atomic_test_bit>
    e846:	b308      	cbz	r0, e88c <smp_ident_info+0x54>
		struct bt_smp_ident_info *req = (void *)buf->data;
    e848:	689e      	ldr	r6, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
    e84a:	6823      	ldr	r3, [r4, #0]
		struct bt_keys *keys;

		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
    e84c:	f103 0588 	add.w	r5, r3, #136	; 0x88
    e850:	7a19      	ldrb	r1, [r3, #8]
    e852:	462a      	mov	r2, r5
    e854:	2002      	movs	r0, #2
    e856:	f013 fe14 	bl	22482 <bt_keys_get_type>
		if (!keys) {
    e85a:	b990      	cbnz	r0, e882 <smp_ident_info+0x4a>
    e85c:	4a0f      	ldr	r2, [pc, #60]	; (e89c <smp_ident_info+0x64>)
    e85e:	4c10      	ldr	r4, [pc, #64]	; (e8a0 <smp_ident_info+0x68>)
			BT_ERR("Unable to get keys for %s",
    e860:	4628      	mov	r0, r5
    e862:	1aa4      	subs	r4, r4, r2
    e864:	f7f9 fac8 	bl	7df8 <bt_addr_le_str_real>
    e868:	f7f7 fd64 	bl	6334 <log_strdup>
    e86c:	08e4      	lsrs	r4, r4, #3
    e86e:	01a4      	lsls	r4, r4, #6
    e870:	f044 0401 	orr.w	r4, r4, #1
    e874:	4601      	mov	r1, r0
    e876:	4622      	mov	r2, r4
    e878:	480a      	ldr	r0, [pc, #40]	; (e8a4 <smp_ident_info+0x6c>)
    e87a:	f00f fe37 	bl	1e4ec <log_1>
			       bt_addr_le_str(&conn->le.dst));
			return BT_SMP_ERR_UNSPECIFIED;
    e87e:	2008      	movs	r0, #8
	}

	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);

	return 0;
}
    e880:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(keys->irk.val, req->irk, 16);
    e882:	2210      	movs	r2, #16
    e884:	4631      	mov	r1, r6
    e886:	302a      	adds	r0, #42	; 0x2a
    e888:	f011 faf5 	bl	1fe76 <memcpy>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
    e88c:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    e890:	2109      	movs	r1, #9
    e892:	f013 f9e2 	bl	21c5a <atomic_set_bit>
	return 0;
    e896:	2000      	movs	r0, #0
    e898:	e7f2      	b.n	e880 <smp_ident_info+0x48>
    e89a:	bf00      	nop
    e89c:	000236f0 	.word	0x000236f0
    e8a0:	000237d8 	.word	0x000237d8
    e8a4:	00026a27 	.word	0x00026a27

0000e8a8 <smp_encrypt_info>:
{
    e8a8:	b570      	push	{r4, r5, r6, lr}
    e8aa:	460b      	mov	r3, r1
    e8ac:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    e8ae:	210c      	movs	r1, #12
    e8b0:	30c4      	adds	r0, #196	; 0xc4
    e8b2:	f013 f9e0 	bl	21c76 <atomic_test_bit>
    e8b6:	b308      	cbz	r0, e8fc <smp_encrypt_info+0x54>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
    e8b8:	689e      	ldr	r6, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
    e8ba:	6823      	ldr	r3, [r4, #0]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
    e8bc:	f103 0588 	add.w	r5, r3, #136	; 0x88
    e8c0:	7a19      	ldrb	r1, [r3, #8]
    e8c2:	462a      	mov	r2, r5
    e8c4:	2004      	movs	r0, #4
    e8c6:	f013 fddc 	bl	22482 <bt_keys_get_type>
		if (!keys) {
    e8ca:	b990      	cbnz	r0, e8f2 <smp_encrypt_info+0x4a>
    e8cc:	4a0f      	ldr	r2, [pc, #60]	; (e90c <smp_encrypt_info+0x64>)
    e8ce:	4c10      	ldr	r4, [pc, #64]	; (e910 <smp_encrypt_info+0x68>)
			BT_ERR("Unable to get keys for %s",
    e8d0:	4628      	mov	r0, r5
    e8d2:	1aa4      	subs	r4, r4, r2
    e8d4:	f7f9 fa90 	bl	7df8 <bt_addr_le_str_real>
    e8d8:	f7f7 fd2c 	bl	6334 <log_strdup>
    e8dc:	08e4      	lsrs	r4, r4, #3
    e8de:	01a4      	lsls	r4, r4, #6
    e8e0:	f044 0401 	orr.w	r4, r4, #1
    e8e4:	4601      	mov	r1, r0
    e8e6:	4622      	mov	r2, r4
    e8e8:	480a      	ldr	r0, [pc, #40]	; (e914 <smp_encrypt_info+0x6c>)
    e8ea:	f00f fdff 	bl	1e4ec <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
    e8ee:	2008      	movs	r0, #8
}
    e8f0:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(keys->ltk.val, req->ltk, 16);
    e8f2:	2210      	movs	r2, #16
    e8f4:	4631      	mov	r1, r6
    e8f6:	301a      	adds	r0, #26
    e8f8:	f011 fabd 	bl	1fe76 <memcpy>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_MASTER_IDENT);
    e8fc:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    e900:	2107      	movs	r1, #7
    e902:	f013 f9aa 	bl	21c5a <atomic_set_bit>
	return 0;
    e906:	2000      	movs	r0, #0
    e908:	e7f2      	b.n	e8f0 <smp_encrypt_info+0x48>
    e90a:	bf00      	nop
    e90c:	000236f0 	.word	0x000236f0
    e910:	000237d8 	.word	0x000237d8
    e914:	00026a27 	.word	0x00026a27

0000e918 <smp_chan_get>:
{
    e918:	b510      	push	{r4, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
    e91a:	2106      	movs	r1, #6
    e91c:	f012 f99d 	bl	20c5a <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    e920:	4604      	mov	r4, r0
    e922:	b948      	cbnz	r0, e938 <smp_chan_get+0x20>
    e924:	4905      	ldr	r1, [pc, #20]	; (e93c <smp_chan_get+0x24>)
    e926:	4b06      	ldr	r3, [pc, #24]	; (e940 <smp_chan_get+0x28>)
		BT_ERR("Unable to find SMP channel");
    e928:	4806      	ldr	r0, [pc, #24]	; (e944 <smp_chan_get+0x2c>)
    e92a:	1ac9      	subs	r1, r1, r3
    e92c:	08c9      	lsrs	r1, r1, #3
    e92e:	0189      	lsls	r1, r1, #6
    e930:	f041 0101 	orr.w	r1, r1, #1
    e934:	f00f fdcd 	bl	1e4d2 <log_0>
}
    e938:	4620      	mov	r0, r4
    e93a:	bd10      	pop	{r4, pc}
    e93c:	000237d8 	.word	0x000237d8
    e940:	000236f0 	.word	0x000236f0
    e944:	00026a41 	.word	0x00026a41

0000e948 <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_smp *smp = &bt_smp_pool[i];

		if (smp->chan.chan.conn) {
    e948:	4b0f      	ldr	r3, [pc, #60]	; (e988 <bt_smp_accept+0x40>)
{
    e94a:	b570      	push	{r4, r5, r6, lr}
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    e94c:	2200      	movs	r2, #0
{
    e94e:	4604      	mov	r4, r0
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    e950:	f44f 76f0 	mov.w	r6, #480	; 0x1e0
		if (smp->chan.chan.conn) {
    e954:	fb06 f502 	mul.w	r5, r6, r2
    e958:	58e8      	ldr	r0, [r5, r3]
    e95a:	b180      	cbz	r0, e97e <bt_smp_accept+0x36>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    e95c:	3201      	adds	r2, #1
    e95e:	2a04      	cmp	r2, #4
    e960:	d1f8      	bne.n	e954 <bt_smp_accept+0xc>
    e962:	4b0a      	ldr	r3, [pc, #40]	; (e98c <bt_smp_accept+0x44>)
    e964:	4a0a      	ldr	r2, [pc, #40]	; (e990 <bt_smp_accept+0x48>)
		*chan = &smp->chan.chan;

		return 0;
	}

	BT_ERR("No available SMP context for conn %p", conn);
    e966:	480b      	ldr	r0, [pc, #44]	; (e994 <bt_smp_accept+0x4c>)
    e968:	1ad2      	subs	r2, r2, r3
    e96a:	08d2      	lsrs	r2, r2, #3
    e96c:	0192      	lsls	r2, r2, #6
    e96e:	f042 0201 	orr.w	r2, r2, #1
    e972:	4621      	mov	r1, r4
    e974:	f00f fdba 	bl	1e4ec <log_1>

	return -ENOMEM;
    e978:	f06f 000b 	mvn.w	r0, #11
    e97c:	e003      	b.n	e986 <bt_smp_accept+0x3e>
		smp->chan.chan.ops = &ops;
    e97e:	442b      	add	r3, r5
    e980:	4a05      	ldr	r2, [pc, #20]	; (e998 <bt_smp_accept+0x50>)
    e982:	605a      	str	r2, [r3, #4]
		*chan = &smp->chan.chan;
    e984:	600b      	str	r3, [r1, #0]
}
    e986:	bd70      	pop	{r4, r5, r6, pc}
    e988:	20001210 	.word	0x20001210
    e98c:	000236f0 	.word	0x000236f0
    e990:	000237d8 	.word	0x000237d8
    e994:	00026a5c 	.word	0x00026a5c
    e998:	00023f94 	.word	0x00023f94

0000e99c <smp_send.isra.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
    e99c:	b513      	push	{r0, r1, r4, lr}
    e99e:	4613      	mov	r3, r2
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL);
    e9a0:	2200      	movs	r2, #0
    e9a2:	9200      	str	r2, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
    e9a4:	4604      	mov	r4, r0
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL);
    e9a6:	460a      	mov	r2, r1
    e9a8:	6800      	ldr	r0, [r0, #0]
    e9aa:	2106      	movs	r1, #6
    e9ac:	f011 ffe9 	bl	20982 <bt_l2cap_send_cb>
    e9b0:	4805      	ldr	r0, [pc, #20]	; (e9c8 <smp_send.isra.0+0x2c>)
    e9b2:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    e9b6:	2300      	movs	r3, #0
    e9b8:	f504 71d8 	add.w	r1, r4, #432	; 0x1b0
}
    e9bc:	b002      	add	sp, #8
    e9be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e9c2:	f00f b817 	b.w	1d9f4 <k_delayed_work_submit_to_queue>
    e9c6:	bf00      	nop
    e9c8:	20001c30 	.word	0x20001c30

0000e9cc <compute_and_send_master_dhcheck>:
{
    e9cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	(void)memset(r, 0, sizeof(r));
    e9d0:	2210      	movs	r2, #16
{
    e9d2:	b0a2      	sub	sp, #136	; 0x88
    e9d4:	4604      	mov	r4, r0
	(void)memset(r, 0, sizeof(r));
    e9d6:	2100      	movs	r1, #0
    e9d8:	eb0d 0002 	add.w	r0, sp, r2
    e9dc:	f011 fa76 	bl	1fecc <memset>
	switch (smp->method) {
    e9e0:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    e9e4:	2b05      	cmp	r3, #5
    e9e6:	d87d      	bhi.n	eae4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x84>
    e9e8:	e8df f003 	tbb	[pc, r3]
    e9ec:	09030309 	.word	0x09030309
    e9f0:	7e7c      	.short	0x7e7c
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
    e9f2:	2204      	movs	r2, #4
    e9f4:	f504 71cc 	add.w	r1, r4, #408	; 0x198
    e9f8:	a804      	add	r0, sp, #16
			memcpy(r, smp->oobd_remote->r, sizeof(r));
    e9fa:	f011 fa3c 	bl	1fe76 <memcpy>
	uint8_t m[53] = { 0x00, /* counter */
    e9fe:	4b4d      	ldr	r3, [pc, #308]	; (eb34 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xd4>)
		   &smp->chan.chan.conn->le.init_addr,
    ea00:	6825      	ldr	r5, [r4, #0]
	uint8_t m[53] = { 0x00, /* counter */
    ea02:	aa14      	add	r2, sp, #80	; 0x50
    ea04:	f103 0730 	add.w	r7, r3, #48	; 0x30
    ea08:	6818      	ldr	r0, [r3, #0]
    ea0a:	6859      	ldr	r1, [r3, #4]
    ea0c:	4616      	mov	r6, r2
    ea0e:	c603      	stmia	r6!, {r0, r1}
    ea10:	3308      	adds	r3, #8
    ea12:	42bb      	cmp	r3, r7
    ea14:	4632      	mov	r2, r6
    ea16:	d1f7      	bne.n	ea08 <compute_and_send_master_dhcheck+0x3c>
    ea18:	6818      	ldr	r0, [r3, #0]
    ea1a:	791b      	ldrb	r3, [r3, #4]
    ea1c:	6030      	str	r0, [r6, #0]
    ea1e:	7133      	strb	r3, [r6, #4]
	sys_memcpy_swap(ws, w, 32);
    ea20:	2220      	movs	r2, #32
    ea22:	f204 1157 	addw	r1, r4, #343	; 0x157
    ea26:	a80c      	add	r0, sp, #48	; 0x30
    ea28:	f013 f90b 	bl	21c42 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
    ea2c:	4842      	ldr	r0, [pc, #264]	; (eb38 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xd8>)
    ea2e:	ab08      	add	r3, sp, #32
    ea30:	2220      	movs	r2, #32
    ea32:	a90c      	add	r1, sp, #48	; 0x30
    ea34:	f013 f928 	bl	21c88 <bt_smp_aes_cmac>
	if (err) {
    ea38:	2800      	cmp	r0, #0
    ea3a:	d153      	bne.n	eae4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x84>
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
    ea3c:	f104 07e7 	add.w	r7, r4, #231	; 0xe7
	sys_memcpy_swap(m + 5, n1, 16);
    ea40:	2210      	movs	r2, #16
    ea42:	4639      	mov	r1, r7
    ea44:	f10d 0055 	add.w	r0, sp, #85	; 0x55
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
    ea48:	f104 08f7 	add.w	r8, r4, #247	; 0xf7
	sys_memcpy_swap(m + 5, n1, 16);
    ea4c:	f013 f8f9 	bl	21c42 <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
    ea50:	2210      	movs	r2, #16
    ea52:	4641      	mov	r1, r8
    ea54:	f10d 0065 	add.w	r0, sp, #101	; 0x65
    ea58:	f013 f8f3 	bl	21c42 <sys_memcpy_swap>
	m[37] = a1->type;
    ea5c:	f895 308f 	ldrb.w	r3, [r5, #143]	; 0x8f
    ea60:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
	sys_memcpy_swap(m + 38, a1->a.val, 6);
    ea64:	2206      	movs	r2, #6
    ea66:	f105 0190 	add.w	r1, r5, #144	; 0x90
    ea6a:	f10d 0076 	add.w	r0, sp, #118	; 0x76
    ea6e:	f013 f8e8 	bl	21c42 <sys_memcpy_swap>
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
    ea72:	f204 1687 	addw	r6, r4, #391	; 0x187
	m[44] = a2->type;
    ea76:	f895 3096 	ldrb.w	r3, [r5, #150]	; 0x96
    ea7a:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
    ea7e:	2206      	movs	r2, #6
    ea80:	f105 0197 	add.w	r1, r5, #151	; 0x97
    ea84:	f10d 007d 	add.w	r0, sp, #125	; 0x7d
    ea88:	f013 f8db 	bl	21c42 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
    ea8c:	4633      	mov	r3, r6
    ea8e:	2235      	movs	r2, #53	; 0x35
    ea90:	a914      	add	r1, sp, #80	; 0x50
    ea92:	a808      	add	r0, sp, #32
    ea94:	f013 f8f8 	bl	21c88 <bt_smp_aes_cmac>
	if (err) {
    ea98:	bb20      	cbnz	r0, eae4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x84>
	sys_mem_swap(mackey, 16);
    ea9a:	4630      	mov	r0, r6
    ea9c:	f013 f94a 	bl	21d34 <sys_mem_swap.constprop.0>
		   smp->tk)) {
    eaa0:	f204 1507 	addw	r5, r4, #263	; 0x107
	m[0] = 0x01;
    eaa4:	2301      	movs	r3, #1
    eaa6:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
    eaaa:	2235      	movs	r2, #53	; 0x35
    eaac:	462b      	mov	r3, r5
    eaae:	a914      	add	r1, sp, #80	; 0x50
    eab0:	a808      	add	r0, sp, #32
    eab2:	f013 f8e9 	bl	21c88 <bt_smp_aes_cmac>
	if (err) {
    eab6:	b9a8      	cbnz	r0, eae4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x84>
	sys_mem_swap(ltk, 16);
    eab8:	4628      	mov	r0, r5
    eaba:	f013 f93b 	bl	21d34 <sys_mem_swap.constprop.0>
		   &smp->chan.chan.conn->le.init_addr,
    eabe:	4622      	mov	r2, r4
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
    eac0:	a914      	add	r1, sp, #80	; 0x50
		   &smp->chan.chan.conn->le.init_addr,
    eac2:	f852 3bca 	ldr.w	r3, [r2], #202
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
    eac6:	9103      	str	r1, [sp, #12]
		   &smp->chan.chan.conn->le.resp_addr, e)) {
    eac8:	f103 0196 	add.w	r1, r3, #150	; 0x96
		   &smp->chan.chan.conn->le.init_addr,
    eacc:	338f      	adds	r3, #143	; 0x8f
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
    eace:	e9cd 2300 	strd	r2, r3, [sp]
    ead2:	9102      	str	r1, [sp, #8]
    ead4:	ab04      	add	r3, sp, #16
    ead6:	4642      	mov	r2, r8
    ead8:	4639      	mov	r1, r7
    eada:	4630      	mov	r0, r6
    eadc:	f013 f938 	bl	21d50 <smp_f6>
    eae0:	4605      	mov	r5, r0
    eae2:	b148      	cbz	r0, eaf8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x98>
		return BT_SMP_ERR_UNSPECIFIED;
    eae4:	2008      	movs	r0, #8
    eae6:	e021      	b.n	eb2c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xcc>
		if (smp->oobd_remote) {
    eae8:	f8d4 11a4 	ldr.w	r1, [r4, #420]	; 0x1a4
    eaec:	2900      	cmp	r1, #0
    eaee:	d086      	beq.n	e9fe <compute_and_send_master_dhcheck+0x32>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
    eaf0:	2210      	movs	r2, #16
    eaf2:	eb0d 0002 	add.w	r0, sp, r2
    eaf6:	e780      	b.n	e9fa <compute_and_send_master_dhcheck+0x2e>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    eaf8:	210d      	movs	r1, #13
    eafa:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    eafe:	f013 f8ac 	bl	21c5a <atomic_set_bit>
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
    eb02:	210d      	movs	r1, #13
    eb04:	4620      	mov	r0, r4
    eb06:	f013 f8f5 	bl	21cf4 <smp_create_pdu.isra.0>
	if (!buf) {
    eb0a:	4606      	mov	r6, r0
    eb0c:	2800      	cmp	r0, #0
    eb0e:	d0e9      	beq.n	eae4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x84>
	req = net_buf_add(buf, sizeof(*req));
    eb10:	2110      	movs	r1, #16
    eb12:	3008      	adds	r0, #8
    eb14:	f013 fd40 	bl	22598 <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
    eb18:	2210      	movs	r2, #16
    eb1a:	a914      	add	r1, sp, #80	; 0x50
    eb1c:	f011 f9ab 	bl	1fe76 <memcpy>
	smp_send(smp, buf, NULL, NULL);
    eb20:	4620      	mov	r0, r4
    eb22:	462a      	mov	r2, r5
    eb24:	4631      	mov	r1, r6
    eb26:	f7ff ff39 	bl	e99c <smp_send.isra.0>
	return 0;
    eb2a:	4628      	mov	r0, r5
}
    eb2c:	b022      	add	sp, #136	; 0x88
    eb2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    eb32:	bf00      	nop
    eb34:	000238cb 	.word	0x000238cb
    eb38:	00026ccc 	.word	0x00026ccc

0000eb3c <sc_send_public_key>:
{
    eb3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
    eb3e:	210c      	movs	r1, #12
{
    eb40:	4605      	mov	r5, r0
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
    eb42:	f013 f8d7 	bl	21cf4 <smp_create_pdu.isra.0>
	if (!req_buf) {
    eb46:	4604      	mov	r4, r0
    eb48:	b1b0      	cbz	r0, eb78 <sc_send_public_key+0x3c>
	req = net_buf_add(req_buf, sizeof(*req));
    eb4a:	2140      	movs	r1, #64	; 0x40
    eb4c:	3008      	adds	r0, #8
    eb4e:	f013 fd23 	bl	22598 <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
    eb52:	4f0a      	ldr	r7, [pc, #40]	; (eb7c <sc_send_public_key+0x40>)
    eb54:	2220      	movs	r2, #32
    eb56:	6839      	ldr	r1, [r7, #0]
	req = net_buf_add(req_buf, sizeof(*req));
    eb58:	4606      	mov	r6, r0
	memcpy(req->x, sc_public_key, sizeof(req->x));
    eb5a:	f011 f98c 	bl	1fe76 <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
    eb5e:	6839      	ldr	r1, [r7, #0]
    eb60:	2220      	movs	r2, #32
    eb62:	4411      	add	r1, r2
    eb64:	18b0      	adds	r0, r6, r2
    eb66:	f011 f986 	bl	1fe76 <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
    eb6a:	4628      	mov	r0, r5
    eb6c:	2200      	movs	r2, #0
    eb6e:	4621      	mov	r1, r4
    eb70:	f7ff ff14 	bl	e99c <smp_send.isra.0>
	return 0;
    eb74:	2000      	movs	r0, #0
}
    eb76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    eb78:	2008      	movs	r0, #8
    eb7a:	e7fc      	b.n	eb76 <sc_send_public_key+0x3a>
    eb7c:	200020bc 	.word	0x200020bc

0000eb80 <smp_send_pairing_req>:
{
    eb80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    eb84:	4605      	mov	r5, r0
	smp = smp_chan_get(conn);
    eb86:	f7ff fec7 	bl	e918 <smp_chan_get>
	if (!smp) {
    eb8a:	4604      	mov	r4, r0
    eb8c:	2800      	cmp	r0, #0
    eb8e:	f000 80bc 	beq.w	ed0a <smp_send_pairing_req+0x18a>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    eb92:	f100 06c4 	add.w	r6, r0, #196	; 0xc4
    eb96:	2104      	movs	r1, #4
    eb98:	4630      	mov	r0, r6
    eb9a:	f013 f86c 	bl	21c76 <atomic_test_bit>
    eb9e:	2800      	cmp	r0, #0
    eba0:	f040 80b6 	bne.w	ed10 <smp_send_pairing_req+0x190>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    eba4:	2103      	movs	r1, #3
    eba6:	4630      	mov	r0, r6
    eba8:	f013 f865 	bl	21c76 <atomic_test_bit>
    ebac:	b120      	cbz	r0, ebb8 <smp_send_pairing_req+0x38>
		return -EBUSY;
    ebae:	f06f 050f 	mvn.w	r5, #15
}
    ebb2:	4628      	mov	r0, r5
    ebb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
    ebb8:	2101      	movs	r1, #1
    ebba:	4630      	mov	r0, r6
    ebbc:	f013 f85b 	bl	21c76 <atomic_test_bit>
    ebc0:	2800      	cmp	r0, #0
    ebc2:	d1f4      	bne.n	ebae <smp_send_pairing_req+0x2e>
	if (!sec_level_reachable(conn)) {
    ebc4:	7aab      	ldrb	r3, [r5, #10]
	switch (conn->required_sec_level) {
    ebc6:	2b03      	cmp	r3, #3
    ebc8:	d016      	beq.n	ebf8 <smp_send_pairing_req+0x78>
    ebca:	d805      	bhi.n	ebd8 <smp_send_pairing_req+0x58>
    ebcc:	3b01      	subs	r3, #1
    ebce:	2b01      	cmp	r3, #1
    ebd0:	d920      	bls.n	ec14 <smp_send_pairing_req+0x94>
		return -EINVAL;
    ebd2:	f06f 0515 	mvn.w	r5, #21
    ebd6:	e7ec      	b.n	ebb2 <smp_send_pairing_req+0x32>
	switch (conn->required_sec_level) {
    ebd8:	2b04      	cmp	r3, #4
    ebda:	d1fa      	bne.n	ebd2 <smp_send_pairing_req+0x52>
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    ebdc:	f7ff fe06 	bl	e7ec <get_io_capa>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
    ebe0:	2803      	cmp	r0, #3
    ebe2:	d104      	bne.n	ebee <smp_send_pairing_req+0x6e>
    ebe4:	4b4c      	ldr	r3, [pc, #304]	; (ed18 <smp_send_pairing_req+0x198>)
    ebe6:	681b      	ldr	r3, [r3, #0]
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    ebe8:	b11b      	cbz	r3, ebf2 <smp_send_pairing_req+0x72>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
    ebea:	68db      	ldr	r3, [r3, #12]
    ebec:	b343      	cbz	r3, ec40 <smp_send_pairing_req+0xc0>
    ebee:	4b4b      	ldr	r3, [pc, #300]	; (ed1c <smp_send_pairing_req+0x19c>)
    ebf0:	781b      	ldrb	r3, [r3, #0]
    ebf2:	f003 0301 	and.w	r3, r3, #1
    ebf6:	e00b      	b.n	ec10 <smp_send_pairing_req+0x90>
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    ebf8:	f7ff fdf8 	bl	e7ec <get_io_capa>
    ebfc:	2803      	cmp	r0, #3
    ebfe:	d11d      	bne.n	ec3c <smp_send_pairing_req+0xbc>
		       (bt_auth && bt_auth->oob_data_request);
    ec00:	4b45      	ldr	r3, [pc, #276]	; (ed18 <smp_send_pairing_req+0x198>)
    ec02:	681b      	ldr	r3, [r3, #0]
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    ec04:	2b00      	cmp	r3, #0
    ec06:	d0e4      	beq.n	ebd2 <smp_send_pairing_req+0x52>
		       (bt_auth && bt_auth->oob_data_request);
    ec08:	68db      	ldr	r3, [r3, #12]
    ec0a:	3b00      	subs	r3, #0
    ec0c:	bf18      	it	ne
    ec0e:	2301      	movne	r3, #1
	if (!sec_level_reachable(conn)) {
    ec10:	2b00      	cmp	r3, #0
    ec12:	d0de      	beq.n	ebd2 <smp_send_pairing_req+0x52>
	if (!conn->le.keys) {
    ec14:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    ec18:	b1a3      	cbz	r3, ec44 <smp_send_pairing_req+0xc4>
	(void)memset((uint8_t *)smp + sizeof(smp->chan), 0,
    ec1a:	f104 0ac0 	add.w	sl, r4, #192	; 0xc0
    ec1e:	22f0      	movs	r2, #240	; 0xf0
    ec20:	2100      	movs	r1, #0
    ec22:	4650      	mov	r0, sl
    ec24:	f011 f952 	bl	1fecc <memset>
	if (bt_rand(smp->prnd, 16)) {
    ec28:	2110      	movs	r1, #16
    ec2a:	f104 00e7 	add.w	r0, r4, #231	; 0xe7
    ec2e:	f004 fb81 	bl	13334 <bt_rand>
    ec32:	4605      	mov	r5, r0
    ec34:	b190      	cbz	r0, ec5c <smp_send_pairing_req+0xdc>
		return -ENOBUFS;
    ec36:	f06f 0536 	mvn.w	r5, #54	; 0x36
    ec3a:	e7ba      	b.n	ebb2 <smp_send_pairing_req+0x32>
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    ec3c:	2301      	movs	r3, #1
    ec3e:	e7e7      	b.n	ec10 <smp_send_pairing_req+0x90>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
    ec40:	2300      	movs	r3, #0
    ec42:	e7d6      	b.n	ebf2 <smp_send_pairing_req+0x72>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    ec44:	7a28      	ldrb	r0, [r5, #8]
    ec46:	f105 0188 	add.w	r1, r5, #136	; 0x88
    ec4a:	f001 f923 	bl	fe94 <bt_keys_get_addr>
    ec4e:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
    ec52:	2800      	cmp	r0, #0
    ec54:	d1e1      	bne.n	ec1a <smp_send_pairing_req+0x9a>
			return -ENOMEM;
    ec56:	f06f 050b 	mvn.w	r5, #11
    ec5a:	e7aa      	b.n	ebb2 <smp_send_pairing_req+0x32>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
    ec5c:	2105      	movs	r1, #5
    ec5e:	4650      	mov	r0, sl
    ec60:	f012 fffb 	bl	21c5a <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
    ec64:	f7fb fbda 	bl	a41c <bt_pub_key_get>
    ec68:	4b2d      	ldr	r3, [pc, #180]	; (ed20 <smp_send_pairing_req+0x1a0>)
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_REQ, sizeof(*req));
    ec6a:	2101      	movs	r1, #1
	sc_public_key = bt_pub_key_get();
    ec6c:	6018      	str	r0, [r3, #0]
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_REQ, sizeof(*req));
    ec6e:	4620      	mov	r0, r4
    ec70:	f013 f840 	bl	21cf4 <smp_create_pdu.isra.0>
	if (!req_buf) {
    ec74:	4681      	mov	r9, r0
    ec76:	2800      	cmp	r0, #0
    ec78:	d0dd      	beq.n	ec36 <smp_send_pairing_req+0xb6>
	req = net_buf_add(req_buf, sizeof(*req));
    ec7a:	2106      	movs	r1, #6
    ec7c:	3008      	adds	r0, #8
    ec7e:	f013 fc8b 	bl	22598 <net_buf_simple_add>
	if (sc_supported) {
    ec82:	4b26      	ldr	r3, [pc, #152]	; (ed1c <smp_send_pairing_req+0x19c>)
    ec84:	781b      	ldrb	r3, [r3, #0]
		auth &= BT_SMP_AUTH_MASK;
    ec86:	2b00      	cmp	r3, #0
    ec88:	bf14      	ite	ne
    ec8a:	f04f 0809 	movne.w	r8, #9
    ec8e:	f04f 0801 	moveq.w	r8, #1
	req = net_buf_add(req_buf, sizeof(*req));
    ec92:	4607      	mov	r7, r0
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
    ec94:	f7ff fdaa 	bl	e7ec <get_io_capa>
	if (bondable) {
    ec98:	4b22      	ldr	r3, [pc, #136]	; (ed24 <smp_send_pairing_req+0x1a4>)
    ec9a:	781b      	ldrb	r3, [r3, #0]
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
    ec9c:	2803      	cmp	r0, #3
		auth |= BT_SMP_AUTH_MITM;
    ec9e:	bf18      	it	ne
    eca0:	f048 0804 	orrne.w	r8, r8, #4
	if (bondable) {
    eca4:	b373      	cbz	r3, ed04 <smp_send_pairing_req+0x184>
		auth |= BT_SMP_AUTH_BONDING;
    eca6:	f048 0801 	orr.w	r8, r8, #1
	req->auth_req = get_auth(conn, BT_SMP_AUTH_DEFAULT);
    ecaa:	f887 8002 	strb.w	r8, [r7, #2]
	req->io_capability = get_io_capa();
    ecae:	f7ff fd9d 	bl	e7ec <get_io_capa>
	req->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
    ecb2:	4b1d      	ldr	r3, [pc, #116]	; (ed28 <smp_send_pairing_req+0x1a8>)
	req->io_capability = get_io_capa();
    ecb4:	7038      	strb	r0, [r7, #0]
	req->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
    ecb6:	781b      	ldrb	r3, [r3, #0]
    ecb8:	707b      	strb	r3, [r7, #1]
	req->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
    ecba:	2310      	movs	r3, #16
    ecbc:	70fb      	strb	r3, [r7, #3]
	req->resp_key_dist = RECV_KEYS;
    ecbe:	f04f 0803 	mov.w	r8, #3
	req->init_key_dist = SEND_KEYS;
    ecc2:	2301      	movs	r3, #1
	smp->local_dist = SEND_KEYS;
    ecc4:	f240 3201 	movw	r2, #769	; 0x301
	req->init_key_dist = SEND_KEYS;
    ecc8:	713b      	strb	r3, [r7, #4]
	req->resp_key_dist = RECV_KEYS;
    ecca:	f887 8005 	strb.w	r8, [r7, #5]
	memcpy(smp->preq + 1, req, sizeof(*req));
    ecce:	4639      	mov	r1, r7
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    ecd0:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
	smp->local_dist = SEND_KEYS;
    ecd4:	f8a4 21a8 	strh.w	r2, [r4, #424]	; 0x1a8
	memcpy(smp->preq + 1, req, sizeof(*req));
    ecd8:	f104 00ca 	add.w	r0, r4, #202	; 0xca
    ecdc:	2206      	movs	r2, #6
    ecde:	f011 f8ca 	bl	1fe76 <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
    ece2:	2200      	movs	r2, #0
    ece4:	4649      	mov	r1, r9
    ece6:	4620      	mov	r0, r4
    ece8:	f7ff fe58 	bl	e99c <smp_send.isra.0>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RSP);
    ecec:	4650      	mov	r0, sl
    ecee:	2102      	movs	r1, #2
    ecf0:	f012 ffb3 	bl	21c5a <atomic_set_bit>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
    ecf4:	210b      	movs	r1, #11
    ecf6:	f012 ffb0 	bl	21c5a <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
    ecfa:	4641      	mov	r1, r8
    ecfc:	4630      	mov	r0, r6
    ecfe:	f012 ffac 	bl	21c5a <atomic_set_bit>
	return 0;
    ed02:	e756      	b.n	ebb2 <smp_send_pairing_req+0x32>
		auth &= ~BT_SMP_AUTH_BONDING;
    ed04:	f008 080c 	and.w	r8, r8, #12
    ed08:	e7cf      	b.n	ecaa <smp_send_pairing_req+0x12a>
		return -ENOTCONN;
    ed0a:	f06f 0538 	mvn.w	r5, #56	; 0x38
    ed0e:	e750      	b.n	ebb2 <smp_send_pairing_req+0x32>
		return -EIO;
    ed10:	f06f 0504 	mvn.w	r5, #4
    ed14:	e74d      	b.n	ebb2 <smp_send_pairing_req+0x32>
    ed16:	bf00      	nop
    ed18:	20001eec 	.word	0x20001eec
    ed1c:	20009c3a 	.word	0x20009c3a
    ed20:	200020bc 	.word	0x200020bc
    ed24:	20000726 	.word	0x20000726
    ed28:	20009c39 	.word	0x20009c39

0000ed2c <smp_security_request>:
{
    ed2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
    ed2e:	4606      	mov	r6, r0
	struct bt_smp_security_request *req = (void *)buf->data;
    ed30:	688b      	ldr	r3, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
    ed32:	f856 4bc4 	ldr.w	r4, [r6], #196
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    ed36:	2103      	movs	r1, #3
    ed38:	4630      	mov	r0, r6
    ed3a:	f012 ff9c 	bl	21c76 <atomic_test_bit>
    ed3e:	b108      	cbz	r0, ed44 <smp_security_request+0x18>
	return 0;
    ed40:	2000      	movs	r0, #0
    ed42:	e064      	b.n	ee0e <smp_security_request+0xe2>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
    ed44:	2101      	movs	r1, #1
    ed46:	4630      	mov	r0, r6
    ed48:	f012 ff95 	bl	21c76 <atomic_test_bit>
    ed4c:	2800      	cmp	r0, #0
    ed4e:	d1f7      	bne.n	ed40 <smp_security_request+0x14>
	if (sc_supported) {
    ed50:	781d      	ldrb	r5, [r3, #0]
    ed52:	4b32      	ldr	r3, [pc, #200]	; (ee1c <smp_security_request+0xf0>)
    ed54:	781b      	ldrb	r3, [r3, #0]
    ed56:	b17b      	cbz	r3, ed78 <smp_security_request+0x4c>
		auth = req->auth_req & BT_SMP_AUTH_MASK_SC;
    ed58:	f005 050f 	and.w	r5, r5, #15
	if (conn->le.keys) {
    ed5c:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
    ed60:	b16b      	cbz	r3, ed7e <smp_security_request+0x52>
		if (!(conn->le.keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
    ed62:	89db      	ldrh	r3, [r3, #14]
    ed64:	f003 0324 	and.w	r3, r3, #36	; 0x24
    ed68:	b9d3      	cbnz	r3, eda0 <smp_security_request+0x74>
	if (smp_send_pairing_req(conn) < 0) {
    ed6a:	4620      	mov	r0, r4
    ed6c:	f7ff ff08 	bl	eb80 <smp_send_pairing_req>
    ed70:	2800      	cmp	r0, #0
    ed72:	db4b      	blt.n	ee0c <smp_security_request+0xe0>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
    ed74:	210e      	movs	r1, #14
    ed76:	e04d      	b.n	ee14 <smp_security_request+0xe8>
		auth = req->auth_req & BT_SMP_AUTH_MASK;
    ed78:	f005 0507 	and.w	r5, r5, #7
    ed7c:	e7ee      	b.n	ed5c <smp_security_request+0x30>
					     &conn->le.dst);
    ed7e:	f104 0788 	add.w	r7, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
    ed82:	7a21      	ldrb	r1, [r4, #8]
    ed84:	463a      	mov	r2, r7
    ed86:	2020      	movs	r0, #32
    ed88:	f001 f8ba 	bl	ff00 <bt_keys_find>
    ed8c:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
    ed90:	b930      	cbnz	r0, eda0 <smp_security_request+0x74>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK, conn->id,
    ed92:	7a21      	ldrb	r1, [r4, #8]
    ed94:	463a      	mov	r2, r7
    ed96:	2004      	movs	r0, #4
    ed98:	f001 f8b2 	bl	ff00 <bt_keys_find>
    ed9c:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys) {
    eda0:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
    eda4:	2900      	cmp	r1, #0
    eda6:	d0e0      	beq.n	ed6a <smp_security_request+0x3e>
	if ((auth & BT_SMP_AUTH_MITM) &&
    eda8:	076f      	lsls	r7, r5, #29
    edaa:	d518      	bpl.n	edde <smp_security_request+0xb2>
    edac:	7b4b      	ldrb	r3, [r1, #13]
    edae:	07d8      	lsls	r0, r3, #31
    edb0:	d415      	bmi.n	edde <smp_security_request+0xb2>
		if (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT) {
    edb2:	f7ff fd1b 	bl	e7ec <get_io_capa>
    edb6:	4a1a      	ldr	r2, [pc, #104]	; (ee20 <smp_security_request+0xf4>)
    edb8:	4b1a      	ldr	r3, [pc, #104]	; (ee24 <smp_security_request+0xf8>)
    edba:	1ad2      	subs	r2, r2, r3
    edbc:	08d2      	lsrs	r2, r2, #3
    edbe:	2803      	cmp	r0, #3
    edc0:	ea4f 1282 	mov.w	r2, r2, lsl #6
    edc4:	d004      	beq.n	edd0 <smp_security_request+0xa4>
		BT_INFO("New auth requirements: 0x%x, repairing", auth);
    edc6:	4818      	ldr	r0, [pc, #96]	; (ee28 <smp_security_request+0xfc>)
    edc8:	f042 0203 	orr.w	r2, r2, #3
    edcc:	4629      	mov	r1, r5
    edce:	e003      	b.n	edd8 <smp_security_request+0xac>
		BT_WARN("Unsupported auth requirements: 0x%x, repairing",
    edd0:	4816      	ldr	r0, [pc, #88]	; (ee2c <smp_security_request+0x100>)
    edd2:	f042 0202 	orr.w	r2, r2, #2
    edd6:	4629      	mov	r1, r5
		BT_INFO("New auth requirements: 0x%x, repairing", auth);
    edd8:	f00f fb88 	bl	1e4ec <log_1>
		goto pair;
    eddc:	e7c5      	b.n	ed6a <smp_security_request+0x3e>
	if ((auth & BT_SMP_AUTH_SC) &&
    edde:	072a      	lsls	r2, r5, #28
    ede0:	d508      	bpl.n	edf4 <smp_security_request+0xc8>
    ede2:	89cb      	ldrh	r3, [r1, #14]
    ede4:	069b      	lsls	r3, r3, #26
    ede6:	d405      	bmi.n	edf4 <smp_security_request+0xc8>
    ede8:	4a0d      	ldr	r2, [pc, #52]	; (ee20 <smp_security_request+0xf4>)
    edea:	4b0e      	ldr	r3, [pc, #56]	; (ee24 <smp_security_request+0xf8>)
    edec:	1ad2      	subs	r2, r2, r3
    edee:	08d2      	lsrs	r2, r2, #3
		BT_INFO("New auth requirements: 0x%x, repairing", auth);
    edf0:	0192      	lsls	r2, r2, #6
    edf2:	e7e8      	b.n	edc6 <smp_security_request+0x9a>
	if (bt_conn_le_start_encryption(conn, conn->le.keys->ltk.rand,
    edf4:	7b0b      	ldrb	r3, [r1, #12]
    edf6:	9300      	str	r3, [sp, #0]
    edf8:	f101 0218 	add.w	r2, r1, #24
    edfc:	f101 031a 	add.w	r3, r1, #26
    ee00:	4620      	mov	r0, r4
    ee02:	3110      	adds	r1, #16
    ee04:	f011 fb6b 	bl	204de <bt_conn_le_start_encryption>
    ee08:	2800      	cmp	r0, #0
    ee0a:	da02      	bge.n	ee12 <smp_security_request+0xe6>
		return BT_SMP_ERR_UNSPECIFIED;
    ee0c:	2008      	movs	r0, #8
}
    ee0e:	b003      	add	sp, #12
    ee10:	bdf0      	pop	{r4, r5, r6, r7, pc}
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    ee12:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
    ee14:	4630      	mov	r0, r6
    ee16:	f012 ff20 	bl	21c5a <atomic_set_bit>
    ee1a:	e791      	b.n	ed40 <smp_security_request+0x14>
    ee1c:	20009c3a 	.word	0x20009c3a
    ee20:	000237d8 	.word	0x000237d8
    ee24:	000236f0 	.word	0x000236f0
    ee28:	00026a81 	.word	0x00026a81
    ee2c:	00026aa8 	.word	0x00026aa8

0000ee30 <bt_smp_distribute_keys>:
{
    ee30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    ee34:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    ee36:	6800      	ldr	r0, [r0, #0]
	if (!keys) {
    ee38:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
{
    ee3c:	b089      	sub	sp, #36	; 0x24
	if (!keys) {
    ee3e:	b9a3      	cbnz	r3, ee6a <bt_smp_distribute_keys+0x3a>
    ee40:	4a48      	ldr	r2, [pc, #288]	; (ef64 <bt_smp_distribute_keys+0x134>)
    ee42:	4c49      	ldr	r4, [pc, #292]	; (ef68 <bt_smp_distribute_keys+0x138>)
		BT_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
    ee44:	3088      	adds	r0, #136	; 0x88
    ee46:	1aa4      	subs	r4, r4, r2
    ee48:	f7f8 ffd6 	bl	7df8 <bt_addr_le_str_real>
    ee4c:	f7f7 fa72 	bl	6334 <log_strdup>
    ee50:	08e4      	lsrs	r4, r4, #3
    ee52:	01a4      	lsls	r4, r4, #6
    ee54:	f044 0401 	orr.w	r4, r4, #1
    ee58:	4601      	mov	r1, r0
    ee5a:	4622      	mov	r2, r4
    ee5c:	4843      	ldr	r0, [pc, #268]	; (ef6c <bt_smp_distribute_keys+0x13c>)
    ee5e:	f00f fb45 	bl	1e4ec <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
    ee62:	2008      	movs	r0, #8
}
    ee64:	b009      	add	sp, #36	; 0x24
    ee66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    ee6a:	f104 07c4 	add.w	r7, r4, #196	; 0xc4
    ee6e:	2105      	movs	r1, #5
    ee70:	4638      	mov	r0, r7
    ee72:	f012 ff00 	bl	21c76 <atomic_test_bit>
    ee76:	4680      	mov	r8, r0
    ee78:	b9d8      	cbnz	r0, eeb2 <bt_smp_distribute_keys+0x82>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
    ee7a:	f894 31a8 	ldrb.w	r3, [r4, #424]	; 0x1a8
    ee7e:	f013 0001 	ands.w	r0, r3, #1
    ee82:	d0ef      	beq.n	ee64 <bt_smp_distribute_keys+0x34>
	struct bt_keys *keys = conn->le.keys;
    ee84:	6823      	ldr	r3, [r4, #0]
		bt_rand((void *)&rand, sizeof(rand));
    ee86:	211a      	movs	r1, #26
    ee88:	a801      	add	r0, sp, #4
	struct bt_keys *keys = conn->le.keys;
    ee8a:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
		bt_rand((void *)&rand, sizeof(rand));
    ee8e:	f004 fa51 	bl	13334 <bt_rand>
		buf = smp_create_pdu(smp, BT_SMP_CMD_ENCRYPT_INFO,
    ee92:	2106      	movs	r1, #6
    ee94:	4620      	mov	r0, r4
    ee96:	f012 ff2d 	bl	21cf4 <smp_create_pdu.isra.0>
		if (!buf) {
    ee9a:	4606      	mov	r6, r0
    ee9c:	b958      	cbnz	r0, eeb6 <bt_smp_distribute_keys+0x86>
    ee9e:	4932      	ldr	r1, [pc, #200]	; (ef68 <bt_smp_distribute_keys+0x138>)
    eea0:	4b30      	ldr	r3, [pc, #192]	; (ef64 <bt_smp_distribute_keys+0x134>)
			BT_ERR("Unable to allocate Encrypt Info buffer");
    eea2:	4833      	ldr	r0, [pc, #204]	; (ef70 <bt_smp_distribute_keys+0x140>)
    eea4:	1ac9      	subs	r1, r1, r3
    eea6:	08c9      	lsrs	r1, r1, #3
    eea8:	0189      	lsls	r1, r1, #6
    eeaa:	f041 0101 	orr.w	r1, r1, #1
			BT_ERR("Unable to allocate Master Ident buffer");
    eeae:	f00f fb10 	bl	1e4d2 <log_0>
	return 0;
    eeb2:	2000      	movs	r0, #0
    eeb4:	e7d6      	b.n	ee64 <bt_smp_distribute_keys+0x34>
		info = net_buf_add(buf, sizeof(*info));
    eeb6:	2110      	movs	r1, #16
    eeb8:	3008      	adds	r0, #8
    eeba:	f013 fb6d 	bl	22598 <net_buf_simple_add>
		memcpy(info->ltk, rand.key, keys->enc_size);
    eebe:	7b2a      	ldrb	r2, [r5, #12]
    eec0:	a901      	add	r1, sp, #4
		info = net_buf_add(buf, sizeof(*info));
    eec2:	4681      	mov	r9, r0
		memcpy(info->ltk, rand.key, keys->enc_size);
    eec4:	f010 ffd7 	bl	1fe76 <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
    eec8:	7b28      	ldrb	r0, [r5, #12]
    eeca:	280f      	cmp	r0, #15
    eecc:	d805      	bhi.n	eeda <bt_smp_distribute_keys+0xaa>
			(void)memset(info->ltk + keys->enc_size, 0,
    eece:	f1c0 0210 	rsb	r2, r0, #16
    eed2:	4641      	mov	r1, r8
    eed4:	4448      	add	r0, r9
    eed6:	f010 fff9 	bl	1fecc <memset>
		smp_send(smp, buf, NULL, NULL);
    eeda:	4631      	mov	r1, r6
    eedc:	2200      	movs	r2, #0
    eede:	4620      	mov	r0, r4
    eee0:	f7ff fd5c 	bl	e99c <smp_send.isra.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_MASTER_IDENT,
    eee4:	2107      	movs	r1, #7
    eee6:	4620      	mov	r0, r4
    eee8:	f012 ff04 	bl	21cf4 <smp_create_pdu.isra.0>
		if (!buf) {
    eeec:	4606      	mov	r6, r0
    eeee:	b940      	cbnz	r0, ef02 <bt_smp_distribute_keys+0xd2>
    eef0:	491d      	ldr	r1, [pc, #116]	; (ef68 <bt_smp_distribute_keys+0x138>)
    eef2:	4b1c      	ldr	r3, [pc, #112]	; (ef64 <bt_smp_distribute_keys+0x134>)
			BT_ERR("Unable to allocate Master Ident buffer");
    eef4:	481f      	ldr	r0, [pc, #124]	; (ef74 <bt_smp_distribute_keys+0x144>)
    eef6:	1ac9      	subs	r1, r1, r3
    eef8:	08c9      	lsrs	r1, r1, #3
    eefa:	0189      	lsls	r1, r1, #6
    eefc:	f041 0101 	orr.w	r1, r1, #1
    ef00:	e7d5      	b.n	eeae <bt_smp_distribute_keys+0x7e>
		ident = net_buf_add(buf, sizeof(*ident));
    ef02:	210a      	movs	r1, #10
    ef04:	3008      	adds	r0, #8
    ef06:	f013 fb47 	bl	22598 <net_buf_simple_add>
		memcpy(ident->rand, rand.rand, sizeof(ident->rand));
    ef0a:	2208      	movs	r2, #8
		ident = net_buf_add(buf, sizeof(*ident));
    ef0c:	4680      	mov	r8, r0
		memcpy(ident->rand, rand.rand, sizeof(ident->rand));
    ef0e:	a905      	add	r1, sp, #20
    ef10:	3002      	adds	r0, #2
    ef12:	f010 ffb0 	bl	1fe76 <memcpy>
		memcpy(ident->ediv, rand.ediv, sizeof(ident->ediv));
    ef16:	2202      	movs	r2, #2
    ef18:	a907      	add	r1, sp, #28
    ef1a:	4640      	mov	r0, r8
    ef1c:	f010 ffab 	bl	1fe76 <memcpy>
		smp_send(smp, buf, smp_ident_sent, NULL);
    ef20:	4631      	mov	r1, r6
    ef22:	4620      	mov	r0, r4
    ef24:	4a14      	ldr	r2, [pc, #80]	; (ef78 <bt_smp_distribute_keys+0x148>)
    ef26:	f7ff fd39 	bl	e99c <smp_send.isra.0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    ef2a:	210c      	movs	r1, #12
    ef2c:	4638      	mov	r0, r7
    ef2e:	f012 fea2 	bl	21c76 <atomic_test_bit>
    ef32:	2800      	cmp	r0, #0
    ef34:	d0bd      	beq.n	eeb2 <bt_smp_distribute_keys+0x82>
			bt_keys_add_type(keys, BT_KEYS_SLAVE_LTK);
    ef36:	4628      	mov	r0, r5
    ef38:	2101      	movs	r1, #1
    ef3a:	f013 fab2 	bl	224a2 <bt_keys_add_type>
			memcpy(keys->slave_ltk.val, rand.key,
    ef3e:	a901      	add	r1, sp, #4
    ef40:	2210      	movs	r2, #16
    ef42:	f105 004a 	add.w	r0, r5, #74	; 0x4a
    ef46:	f010 ff96 	bl	1fe76 <memcpy>
			memcpy(keys->slave_ltk.rand, rand.rand,
    ef4a:	a905      	add	r1, sp, #20
    ef4c:	2208      	movs	r2, #8
    ef4e:	f105 0040 	add.w	r0, r5, #64	; 0x40
    ef52:	f010 ff90 	bl	1fe76 <memcpy>
			memcpy(keys->slave_ltk.ediv, rand.ediv,
    ef56:	2202      	movs	r2, #2
    ef58:	a907      	add	r1, sp, #28
    ef5a:	f105 0048 	add.w	r0, r5, #72	; 0x48
    ef5e:	f010 ff8a 	bl	1fe76 <memcpy>
    ef62:	e7a6      	b.n	eeb2 <bt_smp_distribute_keys+0x82>
    ef64:	000236f0 	.word	0x000236f0
    ef68:	000237d8 	.word	0x000237d8
    ef6c:	00026ad7 	.word	0x00026ad7
    ef70:	00026aec 	.word	0x00026aec
    ef74:	00026b13 	.word	0x00026b13
    ef78:	0002204b 	.word	0x0002204b

0000ef7c <smp_pairing_complete>:
{
    ef7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ef7e:	4f22      	ldr	r7, [pc, #136]	; (f008 <smp_pairing_complete+0x8c>)
    ef80:	4604      	mov	r4, r0
    ef82:	f100 06c4 	add.w	r6, r0, #196	; 0xc4
	if (!status) {
    ef86:	b979      	cbnz	r1, efa8 <smp_pairing_complete+0x2c>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
    ef88:	210c      	movs	r1, #12
    ef8a:	4630      	mov	r0, r6
    ef8c:	f012 fe73 	bl	21c76 <atomic_test_bit>
		if (bt_auth && bt_auth->pairing_complete) {
    ef90:	683b      	ldr	r3, [r7, #0]
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
    ef92:	4601      	mov	r1, r0
		if (bt_auth && bt_auth->pairing_complete) {
    ef94:	b11b      	cbz	r3, ef9e <smp_pairing_complete+0x22>
    ef96:	699b      	ldr	r3, [r3, #24]
    ef98:	b10b      	cbz	r3, ef9e <smp_pairing_complete+0x22>
			bt_auth->pairing_failed(smp->chan.chan.conn, auth_err);
    ef9a:	6820      	ldr	r0, [r4, #0]
    ef9c:	4798      	blx	r3
	smp_reset(smp);
    ef9e:	4620      	mov	r0, r4
}
    efa0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	smp_reset(smp);
    efa4:	f013 b805 	b.w	21fb2 <smp_reset>
	switch (smp_err) {
    efa8:	3901      	subs	r1, #1
    efaa:	b2c9      	uxtb	r1, r1
    efac:	290d      	cmp	r1, #13
    efae:	bf9c      	itt	ls
    efb0:	4b16      	ldrls	r3, [pc, #88]	; (f00c <smp_pairing_complete+0x90>)
    efb2:	5c5d      	ldrbls	r5, [r3, r1]
		if (smp->chan.chan.conn->le.keys &&
    efb4:	6803      	ldr	r3, [r0, #0]
    efb6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
	if (!status) {
    efba:	bf88      	it	hi
    efbc:	2508      	movhi	r5, #8
		if (smp->chan.chan.conn->le.keys &&
    efbe:	b153      	cbz	r3, efd6 <smp_pairing_complete+0x5a>
    efc0:	7b1b      	ldrb	r3, [r3, #12]
    efc2:	b9cb      	cbnz	r3, eff8 <smp_pairing_complete+0x7c>
			bt_keys_clear(smp->chan.chan.conn->le.keys);
    efc4:	6823      	ldr	r3, [r4, #0]
    efc6:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
    efca:	f013 fa6e 	bl	224aa <bt_keys_clear>
			smp->chan.chan.conn->le.keys = NULL;
    efce:	6823      	ldr	r3, [r4, #0]
    efd0:	2200      	movs	r2, #0
    efd2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
    efd6:	2102      	movs	r1, #2
    efd8:	4630      	mov	r0, r6
    efda:	f012 fe4c 	bl	21c76 <atomic_test_bit>
    efde:	b918      	cbnz	r0, efe8 <smp_pairing_complete+0x6c>
			bt_conn_security_changed(smp->chan.chan.conn, auth_err);
    efe0:	6820      	ldr	r0, [r4, #0]
    efe2:	4629      	mov	r1, r5
    efe4:	f7fb fbe4 	bl	a7b0 <bt_conn_security_changed>
		if (bt_auth && bt_auth->pairing_failed) {
    efe8:	683b      	ldr	r3, [r7, #0]
    efea:	2b00      	cmp	r3, #0
    efec:	d0d7      	beq.n	ef9e <smp_pairing_complete+0x22>
    efee:	69db      	ldr	r3, [r3, #28]
    eff0:	2b00      	cmp	r3, #0
    eff2:	d0d4      	beq.n	ef9e <smp_pairing_complete+0x22>
			bt_auth->pairing_failed(smp->chan.chan.conn, auth_err);
    eff4:	4629      	mov	r1, r5
    eff6:	e7d0      	b.n	ef9a <smp_pairing_complete+0x1e>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
    eff8:	2102      	movs	r1, #2
    effa:	4630      	mov	r0, r6
    effc:	f012 fe3b 	bl	21c76 <atomic_test_bit>
		    (!smp->chan.chan.conn->le.keys->enc_size ||
    f000:	2800      	cmp	r0, #0
    f002:	d1df      	bne.n	efc4 <smp_pairing_complete+0x48>
    f004:	e7e7      	b.n	efd6 <smp_pairing_complete+0x5a>
    f006:	bf00      	nop
    f008:	20001eec 	.word	0x20001eec
    f00c:	00026c8c 	.word	0x00026c8c

0000f010 <bt_smp_dhkey_ready>:
{
    f010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f014:	4c23      	ldr	r4, [pc, #140]	; (f0a4 <bt_smp_dhkey_ready+0x94>)
    f016:	4605      	mov	r5, r0
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    f018:	2600      	movs	r6, #0
    f01a:	f44f 78f0 	mov.w	r8, #480	; 0x1e0
		if (atomic_test_and_clear_bit(bt_smp_pool[i].flags,
    f01e:	2107      	movs	r1, #7
    f020:	4620      	mov	r0, r4
    f022:	fb08 f706 	mul.w	r7, r8, r6
    f026:	f012 ffac 	bl	21f82 <atomic_test_and_clear_bit>
    f02a:	b150      	cbz	r0, f042 <bt_smp_dhkey_ready+0x32>
			smp = &bt_smp_pool[i];
    f02c:	f8df 8078 	ldr.w	r8, [pc, #120]	; f0a8 <bt_smp_dhkey_ready+0x98>
    f030:	eb08 0607 	add.w	r6, r8, r7
	if (!dhkey) {
    f034:	b965      	cbnz	r5, f050 <bt_smp_dhkey_ready+0x40>
		smp_error(smp, BT_SMP_ERR_DHKEY_CHECK_FAILED);
    f036:	210b      	movs	r1, #11
				smp_error(smp, err);
    f038:	4630      	mov	r0, r6
}
    f03a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				smp_error(smp, err);
    f03e:	f012 bfe6 	b.w	2200e <smp_error>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    f042:	3601      	adds	r6, #1
    f044:	2e04      	cmp	r6, #4
    f046:	f504 74f0 	add.w	r4, r4, #480	; 0x1e0
    f04a:	d1e8      	bne.n	f01e <bt_smp_dhkey_ready+0xe>
}
    f04c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	memcpy(smp->dhkey, dhkey, 32);
    f050:	f207 1057 	addw	r0, r7, #343	; 0x157
    f054:	4629      	mov	r1, r5
    f056:	2220      	movs	r2, #32
    f058:	4440      	add	r0, r8
    f05a:	f010 ff0c 	bl	1fe76 <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    f05e:	2109      	movs	r1, #9
    f060:	4620      	mov	r0, r4
    f062:	f012 fe08 	bl	21c76 <atomic_test_bit>
    f066:	b128      	cbz	r0, f074 <bt_smp_dhkey_ready+0x64>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    f068:	2108      	movs	r1, #8
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    f06a:	4620      	mov	r0, r4
}
    f06c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    f070:	f012 bdf3 	b.w	21c5a <atomic_set_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
    f074:	210f      	movs	r1, #15
    f076:	4620      	mov	r0, r4
    f078:	f012 fdfd 	bl	21c76 <atomic_test_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    f07c:	2108      	movs	r1, #8
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
    f07e:	2800      	cmp	r0, #0
    f080:	d1f3      	bne.n	f06a <bt_smp_dhkey_ready+0x5a>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
    f082:	4620      	mov	r0, r4
    f084:	f012 fdf7 	bl	21c76 <atomic_test_bit>
    f088:	2800      	cmp	r0, #0
    f08a:	d0df      	beq.n	f04c <bt_smp_dhkey_ready+0x3c>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    f08c:	f858 3007 	ldr.w	r3, [r8, r7]
    f090:	78db      	ldrb	r3, [r3, #3]
    f092:	2b00      	cmp	r3, #0
    f094:	d1da      	bne.n	f04c <bt_smp_dhkey_ready+0x3c>
			err = compute_and_send_master_dhcheck(smp);
    f096:	4630      	mov	r0, r6
    f098:	f7ff fc98 	bl	e9cc <compute_and_send_master_dhcheck>
			if (err) {
    f09c:	4601      	mov	r1, r0
    f09e:	2800      	cmp	r0, #0
    f0a0:	d0d4      	beq.n	f04c <bt_smp_dhkey_ready+0x3c>
    f0a2:	e7c9      	b.n	f038 <bt_smp_dhkey_ready+0x28>
    f0a4:	200012d4 	.word	0x200012d4
    f0a8:	20001210 	.word	0x20001210

0000f0ac <bt_smp_recv>:
{
    f0ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    f0ae:	898b      	ldrh	r3, [r1, #12]
{
    f0b0:	4604      	mov	r4, r0
    f0b2:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    f0b4:	b95b      	cbnz	r3, f0ce <bt_smp_recv+0x22>
    f0b6:	4935      	ldr	r1, [pc, #212]	; (f18c <bt_smp_recv+0xe0>)
    f0b8:	4b35      	ldr	r3, [pc, #212]	; (f190 <bt_smp_recv+0xe4>)
		BT_ERR("Too small SMP PDU received");
    f0ba:	4836      	ldr	r0, [pc, #216]	; (f194 <bt_smp_recv+0xe8>)
    f0bc:	1ac9      	subs	r1, r1, r3
    f0be:	08c9      	lsrs	r1, r1, #3
    f0c0:	0189      	lsls	r1, r1, #6
    f0c2:	f041 0101 	orr.w	r1, r1, #1
    f0c6:	f00f fa04 	bl	1e4d2 <log_0>
}
    f0ca:	2000      	movs	r0, #0
    f0cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    f0ce:	2101      	movs	r1, #1
    f0d0:	f105 0008 	add.w	r0, r5, #8
    f0d4:	f013 fa9d 	bl	22612 <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    f0d8:	2104      	movs	r1, #4
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    f0da:	4606      	mov	r6, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    f0dc:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
    f0e0:	f012 fdc9 	bl	21c76 <atomic_test_bit>
    f0e4:	7831      	ldrb	r1, [r6, #0]
    f0e6:	b150      	cbz	r0, f0fe <bt_smp_recv+0x52>
    f0e8:	4b29      	ldr	r3, [pc, #164]	; (f190 <bt_smp_recv+0xe4>)
    f0ea:	4a28      	ldr	r2, [pc, #160]	; (f18c <bt_smp_recv+0xe0>)
		BT_WARN("SMP command (code 0x%02x) received after timeout",
    f0ec:	482a      	ldr	r0, [pc, #168]	; (f198 <bt_smp_recv+0xec>)
    f0ee:	1ad2      	subs	r2, r2, r3
    f0f0:	08d2      	lsrs	r2, r2, #3
    f0f2:	0192      	lsls	r2, r2, #6
    f0f4:	f042 0202 	orr.w	r2, r2, #2
    f0f8:	f00f f9f8 	bl	1e4ec <log_1>
		return 0;
    f0fc:	e7e5      	b.n	f0ca <bt_smp_recv+0x1e>
	if (hdr->code >= ARRAY_SIZE(handlers) || !handlers[hdr->code].func) {
    f0fe:	290d      	cmp	r1, #13
    f100:	d803      	bhi.n	f10a <bt_smp_recv+0x5e>
    f102:	4f26      	ldr	r7, [pc, #152]	; (f19c <bt_smp_recv+0xf0>)
    f104:	f857 3031 	ldr.w	r3, [r7, r1, lsl #3]
    f108:	b973      	cbnz	r3, f128 <bt_smp_recv+0x7c>
    f10a:	4b21      	ldr	r3, [pc, #132]	; (f190 <bt_smp_recv+0xe4>)
    f10c:	4a1f      	ldr	r2, [pc, #124]	; (f18c <bt_smp_recv+0xe0>)
		BT_WARN("Unhandled SMP code 0x%02x", hdr->code);
    f10e:	4824      	ldr	r0, [pc, #144]	; (f1a0 <bt_smp_recv+0xf4>)
    f110:	1ad2      	subs	r2, r2, r3
    f112:	08d2      	lsrs	r2, r2, #3
    f114:	0192      	lsls	r2, r2, #6
    f116:	f042 0202 	orr.w	r2, r2, #2
    f11a:	f00f f9e7 	bl	1e4ec <log_1>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
    f11e:	2107      	movs	r1, #7
		smp_error(smp, err);
    f120:	4620      	mov	r0, r4
    f122:	f012 ff74 	bl	2200e <smp_error>
    f126:	e7d0      	b.n	f0ca <bt_smp_recv+0x1e>
	if (!atomic_test_and_clear_bit(&smp->allowed_cmds, hdr->code)) {
    f128:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    f12c:	f012 ff29 	bl	21f82 <atomic_test_and_clear_bit>
    f130:	7831      	ldrb	r1, [r6, #0]
    f132:	b970      	cbnz	r0, f152 <bt_smp_recv+0xa6>
    f134:	4b16      	ldr	r3, [pc, #88]	; (f190 <bt_smp_recv+0xe4>)
    f136:	4a15      	ldr	r2, [pc, #84]	; (f18c <bt_smp_recv+0xe0>)
		BT_WARN("Unexpected SMP code 0x%02x", hdr->code);
    f138:	481a      	ldr	r0, [pc, #104]	; (f1a4 <bt_smp_recv+0xf8>)
    f13a:	1ad2      	subs	r2, r2, r3
    f13c:	08d2      	lsrs	r2, r2, #3
    f13e:	0192      	lsls	r2, r2, #6
    f140:	f042 0202 	orr.w	r2, r2, #2
    f144:	f00f f9d2 	bl	1e4ec <log_1>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
    f148:	7833      	ldrb	r3, [r6, #0]
    f14a:	2b05      	cmp	r3, #5
    f14c:	d0bd      	beq.n	f0ca <bt_smp_recv+0x1e>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    f14e:	2108      	movs	r1, #8
    f150:	e7e6      	b.n	f120 <bt_smp_recv+0x74>
	if (buf->len != handlers[hdr->code].expect_len) {
    f152:	eb07 03c1 	add.w	r3, r7, r1, lsl #3
    f156:	89a8      	ldrh	r0, [r5, #12]
    f158:	791b      	ldrb	r3, [r3, #4]
    f15a:	4283      	cmp	r3, r0
    f15c:	d00d      	beq.n	f17a <bt_smp_recv+0xce>
    f15e:	4a0c      	ldr	r2, [pc, #48]	; (f190 <bt_smp_recv+0xe4>)
    f160:	4b0a      	ldr	r3, [pc, #40]	; (f18c <bt_smp_recv+0xe0>)
    f162:	1a9b      	subs	r3, r3, r2
    f164:	08db      	lsrs	r3, r3, #3
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    f166:	019b      	lsls	r3, r3, #6
    f168:	460a      	mov	r2, r1
    f16a:	f043 0301 	orr.w	r3, r3, #1
    f16e:	4601      	mov	r1, r0
    f170:	480d      	ldr	r0, [pc, #52]	; (f1a8 <bt_smp_recv+0xfc>)
    f172:	f00f f9cf 	bl	1e514 <log_2>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
    f176:	210a      	movs	r1, #10
    f178:	e7d2      	b.n	f120 <bt_smp_recv+0x74>
	err = handlers[hdr->code].func(smp, buf);
    f17a:	f857 3031 	ldr.w	r3, [r7, r1, lsl #3]
    f17e:	4620      	mov	r0, r4
    f180:	4629      	mov	r1, r5
    f182:	4798      	blx	r3
	if (err) {
    f184:	4601      	mov	r1, r0
    f186:	2800      	cmp	r0, #0
    f188:	d09f      	beq.n	f0ca <bt_smp_recv+0x1e>
    f18a:	e7c9      	b.n	f120 <bt_smp_recv+0x74>
    f18c:	000237d8 	.word	0x000237d8
    f190:	000236f0 	.word	0x000236f0
    f194:	00026b3a 	.word	0x00026b3a
    f198:	00026b55 	.word	0x00026b55
    f19c:	00023f24 	.word	0x00023f24
    f1a0:	00026b86 	.word	0x00026b86
    f1a4:	00026ba0 	.word	0x00026ba0
    f1a8:	0002684f 	.word	0x0002684f

0000f1ac <bt_smp_pkey_ready>:
	sc_public_key = pkey;
    f1ac:	4b18      	ldr	r3, [pc, #96]	; (f210 <bt_smp_pkey_ready+0x64>)
{
    f1ae:	b570      	push	{r4, r5, r6, lr}
	sc_public_key = pkey;
    f1b0:	6018      	str	r0, [r3, #0]
	if (!pkey) {
    f1b2:	b958      	cbnz	r0, f1cc <bt_smp_pkey_ready+0x20>
    f1b4:	4917      	ldr	r1, [pc, #92]	; (f214 <bt_smp_pkey_ready+0x68>)
    f1b6:	4b18      	ldr	r3, [pc, #96]	; (f218 <bt_smp_pkey_ready+0x6c>)
		BT_WARN("Public key not available");
    f1b8:	4818      	ldr	r0, [pc, #96]	; (f21c <bt_smp_pkey_ready+0x70>)
    f1ba:	1ac9      	subs	r1, r1, r3
    f1bc:	08c9      	lsrs	r1, r1, #3
    f1be:	0189      	lsls	r1, r1, #6
}
    f1c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_WARN("Public key not available");
    f1c4:	f041 0102 	orr.w	r1, r1, #2
    f1c8:	f00f b983 	b.w	1e4d2 <log_0>
	z_impl_k_sem_give(sem);
    f1cc:	4814      	ldr	r0, [pc, #80]	; (f220 <bt_smp_pkey_ready+0x74>)
    f1ce:	4c15      	ldr	r4, [pc, #84]	; (f224 <bt_smp_pkey_ready+0x78>)
    f1d0:	f00e fad2 	bl	1d778 <z_impl_k_sem_give>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    f1d4:	2500      	movs	r5, #0
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
    f1d6:	2106      	movs	r1, #6
    f1d8:	4620      	mov	r0, r4
    f1da:	f012 fd4c 	bl	21c76 <atomic_test_bit>
    f1de:	b188      	cbz	r0, f204 <bt_smp_pkey_ready+0x58>
		    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    f1e0:	f854 3cc4 	ldr.w	r3, [r4, #-196]
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    f1e4:	78db      	ldrb	r3, [r3, #3]
    f1e6:	b96b      	cbnz	r3, f204 <bt_smp_pkey_ready+0x58>
    f1e8:	f1a4 06c4 	sub.w	r6, r4, #196	; 0xc4
			err = sc_send_public_key(smp);
    f1ec:	4630      	mov	r0, r6
    f1ee:	f7ff fca5 	bl	eb3c <sc_send_public_key>
			if (err) {
    f1f2:	4601      	mov	r1, r0
    f1f4:	b110      	cbz	r0, f1fc <bt_smp_pkey_ready+0x50>
				smp_error(smp, err);
    f1f6:	4630      	mov	r0, r6
    f1f8:	f012 ff09 	bl	2200e <smp_error>
			atomic_set_bit(&smp->allowed_cmds,
    f1fc:	210c      	movs	r1, #12
    f1fe:	1f20      	subs	r0, r4, #4
    f200:	f012 fd2b 	bl	21c5a <atomic_set_bit>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    f204:	3501      	adds	r5, #1
    f206:	2d04      	cmp	r5, #4
    f208:	f504 74f0 	add.w	r4, r4, #480	; 0x1e0
    f20c:	d1e3      	bne.n	f1d6 <bt_smp_pkey_ready+0x2a>
}
    f20e:	bd70      	pop	{r4, r5, r6, pc}
    f210:	200020bc 	.word	0x200020bc
    f214:	000237d8 	.word	0x000237d8
    f218:	000236f0 	.word	0x000236f0
    f21c:	00026bbb 	.word	0x00026bbb
    f220:	20000858 	.word	0x20000858
    f224:	200012d4 	.word	0x200012d4

0000f228 <smp_timeout>:
    f228:	4b0b      	ldr	r3, [pc, #44]	; (f258 <smp_timeout+0x30>)
    f22a:	490c      	ldr	r1, [pc, #48]	; (f25c <smp_timeout+0x34>)
{
    f22c:	b510      	push	{r4, lr}
    f22e:	1ac9      	subs	r1, r1, r3
    f230:	08c9      	lsrs	r1, r1, #3
	BT_ERR("SMP Timeout");
    f232:	0189      	lsls	r1, r1, #6
{
    f234:	4604      	mov	r4, r0
	BT_ERR("SMP Timeout");
    f236:	f041 0101 	orr.w	r1, r1, #1
    f23a:	4809      	ldr	r0, [pc, #36]	; (f260 <smp_timeout+0x38>)
    f23c:	f00f f949 	bl	1e4d2 <log_0>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
    f240:	f5a4 70d8 	sub.w	r0, r4, #432	; 0x1b0
    f244:	2108      	movs	r1, #8
    f246:	f7ff fe99 	bl	ef7c <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
    f24a:	f1a4 00ec 	sub.w	r0, r4, #236	; 0xec
    f24e:	2104      	movs	r1, #4
}
    f250:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
    f254:	f012 bd01 	b.w	21c5a <atomic_set_bit>
    f258:	000236f0 	.word	0x000236f0
    f25c:	000237d8 	.word	0x000237d8
    f260:	00026bd4 	.word	0x00026bd4

0000f264 <smp_pairing_failed>:
{
    f264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f266:	4a15      	ldr	r2, [pc, #84]	; (f2bc <smp_pairing_failed+0x58>)
    f268:	4b15      	ldr	r3, [pc, #84]	; (f2c0 <smp_pairing_failed+0x5c>)
	struct bt_smp_pairing_fail *req = (void *)buf->data;
    f26a:	688e      	ldr	r6, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
    f26c:	4605      	mov	r5, r0
    f26e:	1ad2      	subs	r2, r2, r3
    f270:	08d2      	lsrs	r2, r2, #3
    f272:	f855 7bc4 	ldr.w	r7, [r5], #196
	BT_ERR("reason 0x%x", req->reason);
    f276:	7831      	ldrb	r1, [r6, #0]
    f278:	0192      	lsls	r2, r2, #6
{
    f27a:	4604      	mov	r4, r0
	BT_ERR("reason 0x%x", req->reason);
    f27c:	f042 0201 	orr.w	r2, r2, #1
    f280:	4810      	ldr	r0, [pc, #64]	; (f2c4 <smp_pairing_failed+0x60>)
    f282:	f00f f933 	bl	1e4ec <log_1>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
    f286:	2109      	movs	r1, #9
    f288:	4628      	mov	r0, r5
    f28a:	f012 fe7a 	bl	21f82 <atomic_test_and_clear_bit>
    f28e:	b140      	cbz	r0, f2a2 <smp_pairing_failed+0x3e>
		if (bt_auth && bt_auth->cancel) {
    f290:	4b0d      	ldr	r3, [pc, #52]	; (f2c8 <smp_pairing_failed+0x64>)
    f292:	681b      	ldr	r3, [r3, #0]
    f294:	b963      	cbnz	r3, f2b0 <smp_pairing_failed+0x4c>
	smp_pairing_complete(smp, req->reason);
    f296:	4620      	mov	r0, r4
    f298:	7831      	ldrb	r1, [r6, #0]
    f29a:	f7ff fe6f 	bl	ef7c <smp_pairing_complete>
}
    f29e:	2000      	movs	r0, #0
    f2a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
    f2a2:	210a      	movs	r1, #10
    f2a4:	4628      	mov	r0, r5
    f2a6:	f012 fe6c 	bl	21f82 <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
    f2aa:	2800      	cmp	r0, #0
    f2ac:	d1f0      	bne.n	f290 <smp_pairing_failed+0x2c>
    f2ae:	e7f2      	b.n	f296 <smp_pairing_failed+0x32>
		if (bt_auth && bt_auth->cancel) {
    f2b0:	691b      	ldr	r3, [r3, #16]
    f2b2:	2b00      	cmp	r3, #0
    f2b4:	d0ef      	beq.n	f296 <smp_pairing_failed+0x32>
			bt_auth->cancel(conn);
    f2b6:	4638      	mov	r0, r7
    f2b8:	4798      	blx	r3
    f2ba:	e7ec      	b.n	f296 <smp_pairing_failed+0x32>
    f2bc:	000237d8 	.word	0x000237d8
    f2c0:	000236f0 	.word	0x000236f0
    f2c4:	00026be0 	.word	0x00026be0
    f2c8:	20001eec 	.word	0x20001eec

0000f2cc <smp_master_ident>:
{
    f2cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f2d0:	460b      	mov	r3, r1
    f2d2:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    f2d4:	210c      	movs	r1, #12
	struct bt_conn *conn = smp->chan.chan.conn;
    f2d6:	f850 6bc4 	ldr.w	r6, [r0], #196
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    f2da:	f012 fccc 	bl	21c76 <atomic_test_bit>
    f2de:	b380      	cbz	r0, f342 <smp_master_ident+0x76>
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
    f2e0:	f106 0788 	add.w	r7, r6, #136	; 0x88
    f2e4:	7a31      	ldrb	r1, [r6, #8]
		struct bt_smp_master_ident *req = (void *)buf->data;
    f2e6:	f8d3 8008 	ldr.w	r8, [r3, #8]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
    f2ea:	463a      	mov	r2, r7
    f2ec:	2004      	movs	r0, #4
    f2ee:	f013 f8c8 	bl	22482 <bt_keys_get_type>
		if (!keys) {
    f2f2:	4605      	mov	r5, r0
    f2f4:	b998      	cbnz	r0, f31e <smp_master_ident+0x52>
    f2f6:	4a25      	ldr	r2, [pc, #148]	; (f38c <smp_master_ident+0xc0>)
    f2f8:	4c25      	ldr	r4, [pc, #148]	; (f390 <smp_master_ident+0xc4>)
			BT_ERR("Unable to get keys for %s",
    f2fa:	4638      	mov	r0, r7
    f2fc:	1aa4      	subs	r4, r4, r2
    f2fe:	f7f8 fd7b 	bl	7df8 <bt_addr_le_str_real>
    f302:	f7f7 f817 	bl	6334 <log_strdup>
    f306:	08e4      	lsrs	r4, r4, #3
    f308:	01a4      	lsls	r4, r4, #6
    f30a:	f044 0401 	orr.w	r4, r4, #1
    f30e:	4601      	mov	r1, r0
    f310:	4622      	mov	r2, r4
    f312:	4820      	ldr	r0, [pc, #128]	; (f394 <smp_master_ident+0xc8>)
    f314:	f00f f8ea 	bl	1e4ec <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
    f318:	2008      	movs	r0, #8
}
    f31a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(keys->ltk.ediv, req->ediv, sizeof(keys->ltk.ediv));
    f31e:	2202      	movs	r2, #2
    f320:	4641      	mov	r1, r8
    f322:	3018      	adds	r0, #24
    f324:	f010 fda7 	bl	1fe76 <memcpy>
		memcpy(keys->ltk.rand, req->rand, sizeof(req->rand));
    f328:	2208      	movs	r2, #8
    f32a:	f108 0102 	add.w	r1, r8, #2
    f32e:	f105 0010 	add.w	r0, r5, #16
    f332:	f010 fda0 	bl	1fe76 <memcpy>
		smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
    f336:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
    f33a:	f023 0301 	bic.w	r3, r3, #1
    f33e:	f884 31a9 	strb.w	r3, [r4, #425]	; 0x1a9
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
    f342:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
    f346:	079a      	lsls	r2, r3, #30
    f348:	d50b      	bpl.n	f362 <smp_master_ident+0x96>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
    f34a:	2108      	movs	r1, #8
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    f34c:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    f350:	f012 fc83 	bl	21c5a <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    f354:	78f3      	ldrb	r3, [r6, #3]
    f356:	b143      	cbz	r3, f36a <smp_master_ident+0x9e>
	if (!smp->local_dist && !smp->remote_dist) {
    f358:	f8b4 51a8 	ldrh.w	r5, [r4, #424]	; 0x1a8
    f35c:	b17d      	cbz	r5, f37e <smp_master_ident+0xb2>
	return 0;
    f35e:	2000      	movs	r0, #0
    f360:	e7db      	b.n	f31a <smp_master_ident+0x4e>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    f362:	075b      	lsls	r3, r3, #29
    f364:	d5f6      	bpl.n	f354 <smp_master_ident+0x88>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    f366:	210a      	movs	r1, #10
    f368:	e7f0      	b.n	f34c <smp_master_ident+0x80>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    f36a:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
    f36e:	2b00      	cmp	r3, #0
    f370:	d1f2      	bne.n	f358 <smp_master_ident+0x8c>
		err = bt_smp_distribute_keys(smp);
    f372:	4620      	mov	r0, r4
    f374:	f7ff fd5c 	bl	ee30 <bt_smp_distribute_keys>
		if (err) {
    f378:	2800      	cmp	r0, #0
    f37a:	d0ed      	beq.n	f358 <smp_master_ident+0x8c>
    f37c:	e7cd      	b.n	f31a <smp_master_ident+0x4e>
		smp_pairing_complete(smp, 0);
    f37e:	4620      	mov	r0, r4
    f380:	4629      	mov	r1, r5
    f382:	f7ff fdfb 	bl	ef7c <smp_pairing_complete>
	return 0;
    f386:	4628      	mov	r0, r5
    f388:	e7c7      	b.n	f31a <smp_master_ident+0x4e>
    f38a:	bf00      	nop
    f38c:	000236f0 	.word	0x000236f0
    f390:	000237d8 	.word	0x000237d8
    f394:	00026a27 	.word	0x00026a27

0000f398 <bt_smp_connected>:
{
    f398:	b510      	push	{r4, lr}
	k_delayed_work_init(&smp->work, smp_timeout);
    f39a:	4905      	ldr	r1, [pc, #20]	; (f3b0 <bt_smp_connected+0x18>)
{
    f39c:	4604      	mov	r4, r0
	k_delayed_work_init(&smp->work, smp_timeout);
    f39e:	f500 70d8 	add.w	r0, r0, #432	; 0x1b0
    f3a2:	f013 fea9 	bl	230f8 <k_delayed_work_init>
	smp_reset(smp);
    f3a6:	4620      	mov	r0, r4
}
    f3a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	smp_reset(smp);
    f3ac:	f012 be01 	b.w	21fb2 <smp_reset>
    f3b0:	0000f229 	.word	0x0000f229

0000f3b4 <smp_send_pairing_confirm>:
{
    f3b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	switch (smp->method) {
    f3b6:	f890 40c8 	ldrb.w	r4, [r0, #200]	; 0xc8
    f3ba:	2c02      	cmp	r4, #2
{
    f3bc:	4605      	mov	r5, r0
	switch (smp->method) {
    f3be:	d824      	bhi.n	f40a <smp_send_pairing_confirm+0x56>
    f3c0:	b14c      	cbz	r4, f3d6 <smp_send_pairing_confirm+0x22>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    f3c2:	f890 319c 	ldrb.w	r3, [r0, #412]	; 0x19c
    f3c6:	f8d0 4198 	ldr.w	r4, [r0, #408]	; 0x198
    f3ca:	40dc      	lsrs	r4, r3
    f3cc:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
    f3d0:	f064 047f 	orn	r4, r4, #127	; 0x7f
    f3d4:	b2e4      	uxtb	r4, r4
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
    f3d6:	2103      	movs	r1, #3
    f3d8:	4628      	mov	r0, r5
    f3da:	f012 fc8b 	bl	21cf4 <smp_create_pdu.isra.0>
	if (!buf) {
    f3de:	4606      	mov	r6, r0
    f3e0:	b1a8      	cbz	r0, f40e <smp_send_pairing_confirm+0x5a>
	req = net_buf_add(buf, sizeof(*req));
    f3e2:	2110      	movs	r1, #16
    f3e4:	3008      	adds	r0, #8
    f3e6:	f013 f8d7 	bl	22598 <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
    f3ea:	9000      	str	r0, [sp, #0]
    f3ec:	4814      	ldr	r0, [pc, #80]	; (f440 <smp_send_pairing_confirm+0x8c>)
    f3ee:	4623      	mov	r3, r4
    f3f0:	6800      	ldr	r0, [r0, #0]
    f3f2:	f105 02e7 	add.w	r2, r5, #231	; 0xe7
    f3f6:	f205 1117 	addw	r1, r5, #279	; 0x117
    f3fa:	f012 fd5d 	bl	21eb8 <smp_f4>
    f3fe:	4604      	mov	r4, r0
    f400:	b148      	cbz	r0, f416 <smp_send_pairing_confirm+0x62>
		net_buf_unref(buf);
    f402:	4630      	mov	r0, r6
    f404:	f00c fb6c 	bl	1bae0 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
    f408:	e001      	b.n	f40e <smp_send_pairing_confirm+0x5a>
	switch (smp->method) {
    f40a:	2c03      	cmp	r4, #3
    f40c:	d001      	beq.n	f412 <smp_send_pairing_confirm+0x5e>
		return BT_SMP_ERR_UNSPECIFIED;
    f40e:	2008      	movs	r0, #8
    f410:	e014      	b.n	f43c <smp_send_pairing_confirm+0x88>
	switch (smp->method) {
    f412:	2400      	movs	r4, #0
    f414:	e7df      	b.n	f3d6 <smp_send_pairing_confirm+0x22>
	smp_send(smp, buf, NULL, NULL);
    f416:	4602      	mov	r2, r0
    f418:	4631      	mov	r1, r6
    f41a:	4628      	mov	r0, r5
    f41c:	35c4      	adds	r5, #196	; 0xc4
    f41e:	f7ff fabd 	bl	e99c <smp_send.isra.0>
    f422:	f3bf 8f5b 	dmb	ish
    f426:	e855 3f00 	ldrex	r3, [r5]
    f42a:	f023 0301 	bic.w	r3, r3, #1
    f42e:	e845 3200 	strex	r2, r3, [r5]
    f432:	2a00      	cmp	r2, #0
    f434:	d1f7      	bne.n	f426 <smp_send_pairing_confirm+0x72>
    f436:	f3bf 8f5b 	dmb	ish
	return 0;
    f43a:	4620      	mov	r0, r4
}
    f43c:	b002      	add	sp, #8
    f43e:	bd70      	pop	{r4, r5, r6, pc}
    f440:	200020bc 	.word	0x200020bc

0000f444 <smp_public_key>:
{
    f444:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_smp_public_key *req = (void *)buf->data;
    f446:	688e      	ldr	r6, [r1, #8]
	memcpy(smp->pkey, req->x, 32);
    f448:	f200 1517 	addw	r5, r0, #279	; 0x117
{
    f44c:	4604      	mov	r4, r0
	memcpy(smp->pkey, req->x, 32);
    f44e:	2220      	movs	r2, #32
    f450:	4631      	mov	r1, r6
    f452:	4628      	mov	r0, r5
    f454:	f010 fd0f 	bl	1fe76 <memcpy>
	memcpy(&smp->pkey[32], req->y, 32);
    f458:	2220      	movs	r2, #32
    f45a:	18b1      	adds	r1, r6, r2
    f45c:	f204 1037 	addw	r0, r4, #311	; 0x137
    f460:	f010 fd09 	bl	1fe76 <memcpy>
	if (memcmp(smp->pkey, sc_debug_public_key, 64) == 0) {
    f464:	495e      	ldr	r1, [pc, #376]	; (f5e0 <smp_public_key+0x19c>)
    f466:	2240      	movs	r2, #64	; 0x40
    f468:	4628      	mov	r0, r5
    f46a:	f010 fcf4 	bl	1fe56 <memcmp>
    f46e:	b128      	cbz	r0, f47c <smp_public_key+0x38>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    f470:	6823      	ldr	r3, [r4, #0]
    f472:	78db      	ldrb	r3, [r3, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    f474:	b353      	cbz	r3, f4cc <smp_public_key+0x88>
	return 0;
    f476:	2000      	movs	r0, #0
}
    f478:	b002      	add	sp, #8
    f47a:	bd70      	pop	{r4, r5, r6, pc}
    f47c:	4b59      	ldr	r3, [pc, #356]	; (f5e4 <smp_public_key+0x1a0>)
    f47e:	495a      	ldr	r1, [pc, #360]	; (f5e8 <smp_public_key+0x1a4>)
		BT_INFO("Remote is using Debug Public key");
    f480:	485a      	ldr	r0, [pc, #360]	; (f5ec <smp_public_key+0x1a8>)
    f482:	1ac9      	subs	r1, r1, r3
    f484:	08c9      	lsrs	r1, r1, #3
    f486:	0189      	lsls	r1, r1, #6
    f488:	f041 0103 	orr.w	r1, r1, #3
    f48c:	f00f f821 	bl	1e4d2 <log_0>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
    f490:	210d      	movs	r1, #13
    f492:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
    f496:	f012 fbe0 	bl	21c5a <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
    f49a:	6826      	ldr	r6, [r4, #0]
	if (!conn->le.keys) {
    f49c:	f8d6 30b4 	ldr.w	r3, [r6, #180]	; 0xb4
    f4a0:	b933      	cbnz	r3, f4b0 <smp_public_key+0x6c>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    f4a2:	7a30      	ldrb	r0, [r6, #8]
    f4a4:	f106 0188 	add.w	r1, r6, #136	; 0x88
    f4a8:	f000 fcf4 	bl	fe94 <bt_keys_get_addr>
    f4ac:	f8c6 00b4 	str.w	r0, [r6, #180]	; 0xb4
	if (!conn->le.keys ||
    f4b0:	f8d6 30b4 	ldr.w	r3, [r6, #180]	; 0xb4
    f4b4:	2b00      	cmp	r3, #0
    f4b6:	d0db      	beq.n	f470 <smp_public_key+0x2c>
    f4b8:	89da      	ldrh	r2, [r3, #14]
    f4ba:	f002 0224 	and.w	r2, r2, #36	; 0x24
    f4be:	2a00      	cmp	r2, #0
    f4c0:	d0d6      	beq.n	f470 <smp_public_key+0x2c>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
    f4c2:	7b5b      	ldrb	r3, [r3, #13]
    f4c4:	0799      	lsls	r1, r3, #30
    f4c6:	d5d3      	bpl.n	f470 <smp_public_key+0x2c>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
    f4c8:	2003      	movs	r0, #3
    f4ca:	e7d5      	b.n	f478 <smp_public_key+0x34>
		switch (smp->method) {
    f4cc:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    f4d0:	2b05      	cmp	r3, #5
    f4d2:	d81a      	bhi.n	f50a <smp_public_key+0xc6>
    f4d4:	e8df f003 	tbb	[pc, r3]
    f4d8:	03134103 	.word	0x03134103
    f4dc:	4c19      	.short	0x4c19
			atomic_set_bit(&smp->allowed_cmds,
    f4de:	2103      	movs	r1, #3
    f4e0:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    f4e4:	f012 fbb9 	bl	21c5a <atomic_set_bit>
	if (bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready)) {
    f4e8:	4941      	ldr	r1, [pc, #260]	; (f5f0 <smp_public_key+0x1ac>)
    f4ea:	4628      	mov	r0, r5
    f4ec:	f7fa ffa4 	bl	a438 <bt_dh_key_gen>
    f4f0:	b958      	cbnz	r0, f50a <smp_public_key+0xc6>
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
    f4f2:	2107      	movs	r1, #7
    f4f4:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
    f4f8:	f012 fbaf 	bl	21c5a <atomic_set_bit>
	return 0;
    f4fc:	e7bb      	b.n	f476 <smp_public_key+0x32>
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
    f4fe:	2104      	movs	r1, #4
    f500:	f504 70cc 	add.w	r0, r4, #408	; 0x198
    f504:	f003 ff16 	bl	13334 <bt_rand>
    f508:	b108      	cbz	r0, f50e <smp_public_key+0xca>
		switch (smp->method) {
    f50a:	2008      	movs	r0, #8
    f50c:	e7b4      	b.n	f478 <smp_public_key+0x34>
		smp->passkey %= 1000000;
    f50e:	f8d4 1198 	ldr.w	r1, [r4, #408]	; 0x198
    f512:	4a38      	ldr	r2, [pc, #224]	; (f5f4 <smp_public_key+0x1b0>)
	if (bt_auth && bt_auth->passkey_display) {
    f514:	4e38      	ldr	r6, [pc, #224]	; (f5f8 <smp_public_key+0x1b4>)
		smp->passkey %= 1000000;
    f516:	fbb1 f3f2 	udiv	r3, r1, r2
    f51a:	fb02 1313 	mls	r3, r2, r3, r1
    f51e:	f8c4 3198 	str.w	r3, [r4, #408]	; 0x198
	if (bt_auth && bt_auth->passkey_display) {
    f522:	6833      	ldr	r3, [r6, #0]
	smp->passkey_round = 0U;
    f524:	f884 019c 	strb.w	r0, [r4, #412]	; 0x19c
	if (bt_auth && bt_auth->passkey_display) {
    f528:	b163      	cbz	r3, f544 <smp_public_key+0x100>
    f52a:	681b      	ldr	r3, [r3, #0]
    f52c:	b153      	cbz	r3, f544 <smp_public_key+0x100>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
    f52e:	210a      	movs	r1, #10
    f530:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
    f534:	f012 fb91 	bl	21c5a <atomic_set_bit>
		bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
    f538:	6833      	ldr	r3, [r6, #0]
    f53a:	f8d4 1198 	ldr.w	r1, [r4, #408]	; 0x198
    f53e:	681b      	ldr	r3, [r3, #0]
    f540:	6820      	ldr	r0, [r4, #0]
    f542:	4798      	blx	r3
			atomic_set_bit(&smp->allowed_cmds,
    f544:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    f548:	2103      	movs	r1, #3
    f54a:	f012 fb86 	bl	21c5a <atomic_set_bit>
			err = smp_send_pairing_confirm(smp);
    f54e:	4620      	mov	r0, r4
    f550:	f7ff ff30 	bl	f3b4 <smp_send_pairing_confirm>
			if (err) {
    f554:	2800      	cmp	r0, #0
    f556:	d18f      	bne.n	f478 <smp_public_key+0x34>
    f558:	e7c6      	b.n	f4e8 <smp_public_key+0xa4>
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    f55a:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
    f55e:	2109      	movs	r1, #9
    f560:	f012 fb7b 	bl	21c5a <atomic_set_bit>
			bt_auth->passkey_entry(smp->chan.chan.conn);
    f564:	4b24      	ldr	r3, [pc, #144]	; (f5f8 <smp_public_key+0x1b4>)
    f566:	6820      	ldr	r0, [r4, #0]
    f568:	681b      	ldr	r3, [r3, #0]
    f56a:	685b      	ldr	r3, [r3, #4]
    f56c:	4798      	blx	r3
			break;
    f56e:	e7bb      	b.n	f4e8 <smp_public_key+0xa4>
			if (bt_rand(smp->prnd, 16)) {
    f570:	2110      	movs	r1, #16
    f572:	f104 00e7 	add.w	r0, r4, #231	; 0xe7
    f576:	f003 fedd 	bl	13334 <bt_rand>
    f57a:	2800      	cmp	r0, #0
    f57c:	d1c5      	bne.n	f50a <smp_public_key+0xc6>
			if (bt_auth && bt_auth->oob_data_request) {
    f57e:	4e1e      	ldr	r6, [pc, #120]	; (f5f8 <smp_public_key+0x1b4>)
    f580:	6833      	ldr	r3, [r6, #0]
    f582:	b32b      	cbz	r3, f5d0 <smp_public_key+0x18c>
    f584:	68db      	ldr	r3, [r3, #12]
    f586:	b31b      	cbz	r3, f5d0 <smp_public_key+0x18c>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    f588:	6821      	ldr	r1, [r4, #0]
				struct bt_conn_oob_info info = {
    f58a:	4b1c      	ldr	r3, [pc, #112]	; (f5fc <smp_public_key+0x1b8>)
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    f58c:	78c9      	ldrb	r1, [r1, #3]
				struct bt_conn_oob_info info = {
    f58e:	881b      	ldrh	r3, [r3, #0]
    f590:	f8ad 3004 	strh.w	r3, [sp, #4]
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
    f594:	f894 20cb 	ldrb.w	r2, [r4, #203]	; 0xcb
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
    f598:	f894 30d2 	ldrb.w	r3, [r4, #210]	; 0xd2
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    f59c:	b939      	cbnz	r1, f5ae <smp_public_key+0x16a>
		oob_config = req_oob_present ? BT_CONN_OOB_REMOTE_ONLY :
    f59e:	07d2      	lsls	r2, r2, #31
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
    f5a0:	f003 0301 	and.w	r3, r3, #1
		oob_config = req_oob_present ? BT_CONN_OOB_REMOTE_ONLY :
    f5a4:	d416      	bmi.n	f5d4 <smp_public_key+0x190>
	int oob_config = BT_CONN_OOB_NO_DATA;
    f5a6:	2b00      	cmp	r3, #0
    f5a8:	bf08      	it	eq
    f5aa:	2003      	moveq	r0, #3
    f5ac:	e000      	b.n	f5b0 <smp_public_key+0x16c>
    f5ae:	2003      	movs	r0, #3
				smp->oobd_local = NULL;
    f5b0:	2300      	movs	r3, #0
				smp->oobd_remote = NULL;
    f5b2:	e9c4 3368 	strd	r3, r3, [r4, #416]	; 0x1a0
	info->lesc.oob_config = oob_config;
    f5b6:	f88d 0005 	strb.w	r0, [sp, #5]
				atomic_set_bit(smp->flags,
    f5ba:	210b      	movs	r1, #11
    f5bc:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
    f5c0:	f012 fb4b 	bl	21c5a <atomic_set_bit>
				bt_auth->oob_data_request(smp->chan.chan.conn,
    f5c4:	6833      	ldr	r3, [r6, #0]
    f5c6:	6820      	ldr	r0, [r4, #0]
    f5c8:	68db      	ldr	r3, [r3, #12]
    f5ca:	a901      	add	r1, sp, #4
    f5cc:	4798      	blx	r3
			break;
    f5ce:	e78b      	b.n	f4e8 <smp_public_key+0xa4>
				return BT_SMP_ERR_OOB_NOT_AVAIL;
    f5d0:	2002      	movs	r0, #2
    f5d2:	e751      	b.n	f478 <smp_public_key+0x34>
				     BT_CONN_OOB_BOTH_PEERS :
    f5d4:	2b00      	cmp	r3, #0
    f5d6:	bf0c      	ite	eq
    f5d8:	2001      	moveq	r0, #1
    f5da:	2002      	movne	r0, #2
    f5dc:	e7e8      	b.n	f5b0 <smp_public_key+0x16c>
    f5de:	bf00      	nop
    f5e0:	00026cdc 	.word	0x00026cdc
    f5e4:	000236f0 	.word	0x000236f0
    f5e8:	000237d8 	.word	0x000237d8
    f5ec:	00026bec 	.word	0x00026bec
    f5f0:	0000f011 	.word	0x0000f011
    f5f4:	000f4240 	.word	0x000f4240
    f5f8:	20001eec 	.word	0x20001eec
    f5fc:	00023900 	.word	0x00023900

0000f600 <smp_pairing_rsp>:
{
    f600:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_smp_pairing *rsp = (void *)buf->data;
    f604:	688f      	ldr	r7, [r1, #8]
	if ((rsp->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    f606:	78fb      	ldrb	r3, [r7, #3]
    f608:	3b07      	subs	r3, #7
    f60a:	2b09      	cmp	r3, #9
{
    f60c:	4604      	mov	r4, r0
	if ((rsp->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    f60e:	d904      	bls.n	f61a <smp_pairing_rsp+0x1a>
		return BT_SMP_ERR_ENC_KEY_SIZE;
    f610:	2706      	movs	r7, #6
}
    f612:	4638      	mov	r0, r7
    f614:	b002      	add	sp, #8
    f616:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	smp->local_dist &= rsp->init_key_dist;
    f61a:	793a      	ldrb	r2, [r7, #4]
    f61c:	f890 31a8 	ldrb.w	r3, [r0, #424]	; 0x1a8
	struct bt_conn *conn = smp->chan.chan.conn;
    f620:	6806      	ldr	r6, [r0, #0]
	smp->local_dist &= rsp->init_key_dist;
    f622:	4013      	ands	r3, r2
    f624:	f880 31a8 	strb.w	r3, [r0, #424]	; 0x1a8
	smp->remote_dist &= rsp->resp_key_dist;
    f628:	797a      	ldrb	r2, [r7, #5]
    f62a:	f890 31a9 	ldrb.w	r3, [r0, #425]	; 0x1a9
    f62e:	4013      	ands	r3, r2
    f630:	f880 31a9 	strb.w	r3, [r0, #425]	; 0x1a9
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
    f634:	2302      	movs	r3, #2
    f636:	f880 30d0 	strb.w	r3, [r0, #208]	; 0xd0
	memcpy(smp->prsp + 1, rsp, sizeof(*rsp));
    f63a:	2206      	movs	r2, #6
    f63c:	4639      	mov	r1, r7
    f63e:	30d1      	adds	r0, #209	; 0xd1
    f640:	f010 fc19 	bl	1fe76 <memcpy>
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    f644:	78bb      	ldrb	r3, [r7, #2]
    f646:	0718      	lsls	r0, r3, #28
    f648:	f104 05c4 	add.w	r5, r4, #196	; 0xc4
    f64c:	d507      	bpl.n	f65e <smp_pairing_rsp+0x5e>
    f64e:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
    f652:	0719      	lsls	r1, r3, #28
    f654:	d503      	bpl.n	f65e <smp_pairing_rsp+0x5e>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
    f656:	2105      	movs	r1, #5
    f658:	4628      	mov	r0, r5
    f65a:	f012 fafe 	bl	21c5a <atomic_set_bit>
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
    f65e:	78bb      	ldrb	r3, [r7, #2]
    f660:	069a      	lsls	r2, r3, #26
    f662:	d507      	bpl.n	f674 <smp_pairing_rsp+0x74>
    f664:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
    f668:	069b      	lsls	r3, r3, #26
    f66a:	d503      	bpl.n	f674 <smp_pairing_rsp+0x74>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
    f66c:	2113      	movs	r1, #19
    f66e:	4628      	mov	r0, r5
    f670:	f012 faf3 	bl	21c5a <atomic_set_bit>
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
    f674:	78bb      	ldrb	r3, [r7, #2]
    f676:	07d8      	lsls	r0, r3, #31
    f678:	d507      	bpl.n	f68a <smp_pairing_rsp+0x8a>
    f67a:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
    f67e:	07d9      	lsls	r1, r3, #31
    f680:	d503      	bpl.n	f68a <smp_pairing_rsp+0x8a>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
    f682:	210c      	movs	r1, #12
    f684:	4628      	mov	r0, r5
    f686:	f012 fae8 	bl	21c5a <atomic_set_bit>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    f68a:	2105      	movs	r1, #5
    f68c:	4628      	mov	r0, r5
	smp->method = get_pair_method(smp, rsp->io_capability);
    f68e:	783f      	ldrb	r7, [r7, #0]
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    f690:	f012 faf1 	bl	21c76 <atomic_test_bit>
    f694:	f8d4 8000 	ldr.w	r8, [r4]
    f698:	2800      	cmp	r0, #0
    f69a:	d152      	bne.n	f742 <smp_pairing_rsp+0x142>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
    f69c:	2f04      	cmp	r7, #4
    f69e:	d81d      	bhi.n	f6dc <smp_pairing_rsp+0xdc>
	if ((req->oob_flag & rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
    f6a0:	f894 20d2 	ldrb.w	r2, [r4, #210]	; 0xd2
    f6a4:	f894 30cb 	ldrb.w	r3, [r4, #203]	; 0xcb
    f6a8:	4013      	ands	r3, r2
    f6aa:	07da      	lsls	r2, r3, #31
    f6ac:	d466      	bmi.n	f77c <smp_pairing_rsp+0x17c>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    f6ae:	f894 00cc 	ldrb.w	r0, [r4, #204]	; 0xcc
    f6b2:	f894 30d3 	ldrb.w	r3, [r4, #211]	; 0xd3
    f6b6:	4318      	orrs	r0, r3
    f6b8:	f010 0004 	ands.w	r0, r0, #4
    f6bc:	d00e      	beq.n	f6dc <smp_pairing_rsp+0xdc>
	method = gen_method_legacy[remote_io][get_io_capa()];
    f6be:	f7ff f895 	bl	e7ec <get_io_capa>
    f6c2:	4ba8      	ldr	r3, [pc, #672]	; (f964 <smp_pairing_rsp+0x364>)
    f6c4:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    f6c8:	441f      	add	r7, r3
    f6ca:	5c38      	ldrb	r0, [r7, r0]
	if (method == PASSKEY_ROLE) {
    f6cc:	2804      	cmp	r0, #4
    f6ce:	d105      	bne.n	f6dc <smp_pairing_rsp+0xdc>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    f6d0:	f898 3003 	ldrb.w	r3, [r8, #3]
			method = PASSKEY_INPUT;
    f6d4:	2b00      	cmp	r3, #0
    f6d6:	bf0c      	ite	eq
    f6d8:	2002      	moveq	r0, #2
    f6da:	2001      	movne	r0, #1
	smp->method = get_pair_method(smp, rsp->io_capability);
    f6dc:	f884 00c8 	strb.w	r0, [r4, #200]	; 0xc8
	if (!conn->le.keys) {
    f6e0:	f8d8 30b4 	ldr.w	r3, [r8, #180]	; 0xb4
    f6e4:	b93b      	cbnz	r3, f6f6 <smp_pairing_rsp+0xf6>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    f6e6:	f898 0008 	ldrb.w	r0, [r8, #8]
    f6ea:	f108 0188 	add.w	r1, r8, #136	; 0x88
    f6ee:	f000 fbd1 	bl	fe94 <bt_keys_get_addr>
    f6f2:	f8c8 00b4 	str.w	r0, [r8, #180]	; 0xb4
	if (!conn->le.keys ||
    f6f6:	f8d8 20b4 	ldr.w	r2, [r8, #180]	; 0xb4
    f6fa:	2a00      	cmp	r2, #0
    f6fc:	d144      	bne.n	f788 <smp_pairing_rsp+0x188>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    f6fe:	2105      	movs	r1, #5
    f700:	4628      	mov	r0, r5
    f702:	f012 fab8 	bl	21c76 <atomic_test_bit>
    f706:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    f70a:	2800      	cmp	r0, #0
    f70c:	f040 80e5 	bne.w	f8da <smp_pairing_rsp+0x2da>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    f710:	461f      	mov	r7, r3
    f712:	2b00      	cmp	r3, #0
    f714:	d156      	bne.n	f7c4 <smp_pairing_rsp+0x1c4>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    f716:	210e      	movs	r1, #14
    f718:	4628      	mov	r0, r5
    f71a:	f012 faac 	bl	21c76 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    f71e:	2800      	cmp	r0, #0
    f720:	d050      	beq.n	f7c4 <smp_pairing_rsp+0x1c4>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    f722:	4e91      	ldr	r6, [pc, #580]	; (f968 <smp_pairing_rsp+0x368>)
    f724:	6833      	ldr	r3, [r6, #0]
    f726:	2b00      	cmp	r3, #0
    f728:	d04c      	beq.n	f7c4 <smp_pairing_rsp+0x1c4>
	    bt_auth && bt_auth->pairing_confirm) {
    f72a:	695b      	ldr	r3, [r3, #20]
    f72c:	2b00      	cmp	r3, #0
    f72e:	d049      	beq.n	f7c4 <smp_pairing_rsp+0x1c4>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    f730:	4628      	mov	r0, r5
    f732:	2109      	movs	r1, #9
    f734:	f012 fa91 	bl	21c5a <atomic_set_bit>
		bt_auth->pairing_confirm(smp->chan.chan.conn);
    f738:	6833      	ldr	r3, [r6, #0]
    f73a:	6820      	ldr	r0, [r4, #0]
    f73c:	695b      	ldr	r3, [r3, #20]
    f73e:	4798      	blx	r3
		return 0;
    f740:	e767      	b.n	f612 <smp_pairing_rsp+0x12>
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
    f742:	f894 00cc 	ldrb.w	r0, [r4, #204]	; 0xcc
    f746:	f894 20d3 	ldrb.w	r2, [r4, #211]	; 0xd3
    f74a:	ea00 0302 	and.w	r3, r0, r2
    f74e:	071b      	lsls	r3, r3, #28
    f750:	d506      	bpl.n	f760 <smp_pairing_rsp+0x160>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
    f752:	f894 10d2 	ldrb.w	r1, [r4, #210]	; 0xd2
    f756:	f894 30cb 	ldrb.w	r3, [r4, #203]	; 0xcb
    f75a:	430b      	orrs	r3, r1
    f75c:	07d9      	lsls	r1, r3, #31
    f75e:	d40f      	bmi.n	f780 <smp_pairing_rsp+0x180>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
    f760:	2f04      	cmp	r7, #4
    f762:	d80f      	bhi.n	f784 <smp_pairing_rsp+0x184>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    f764:	4310      	orrs	r0, r2
    f766:	f010 0004 	ands.w	r0, r0, #4
    f76a:	d0b7      	beq.n	f6dc <smp_pairing_rsp+0xdc>
	return gen_method_sc[remote_io][get_io_capa()];
    f76c:	f7ff f83e 	bl	e7ec <get_io_capa>
    f770:	4b7e      	ldr	r3, [pc, #504]	; (f96c <smp_pairing_rsp+0x36c>)
    f772:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    f776:	441f      	add	r7, r3
    f778:	5c38      	ldrb	r0, [r7, r0]
    f77a:	e7af      	b.n	f6dc <smp_pairing_rsp+0xdc>
		return LEGACY_OOB;
    f77c:	2006      	movs	r0, #6
    f77e:	e7ad      	b.n	f6dc <smp_pairing_rsp+0xdc>
			return LE_SC_OOB;
    f780:	2005      	movs	r0, #5
    f782:	e7ab      	b.n	f6dc <smp_pairing_rsp+0xdc>
		return JUST_WORKS;
    f784:	2000      	movs	r0, #0
    f786:	e7a9      	b.n	f6dc <smp_pairing_rsp+0xdc>
	    !(conn->le.keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
    f788:	89d1      	ldrh	r1, [r2, #14]
	if (!conn->le.keys ||
    f78a:	f011 0f24 	tst.w	r1, #36	; 0x24
    f78e:	d0b6      	beq.n	f6fe <smp_pairing_rsp+0xfe>
	return MIN(req->max_key_size, rsp->max_key_size);
    f790:	f894 30d4 	ldrb.w	r3, [r4, #212]	; 0xd4
    f794:	f894 00cd 	ldrb.w	r0, [r4, #205]	; 0xcd
	if (conn->le.keys->enc_size > get_encryption_key_size(smp)) {
    f798:	7b12      	ldrb	r2, [r2, #12]
    f79a:	4283      	cmp	r3, r0
    f79c:	bf28      	it	cs
    f79e:	4603      	movcs	r3, r0
    f7a0:	429a      	cmp	r2, r3
    f7a2:	d901      	bls.n	f7a8 <smp_pairing_rsp+0x1a8>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
    f7a4:	2703      	movs	r7, #3
    f7a6:	e734      	b.n	f612 <smp_pairing_rsp+0x12>
	if ((conn->le.keys->keys & BT_KEYS_LTK_P256) &&
    f7a8:	068a      	lsls	r2, r1, #26
    f7aa:	d404      	bmi.n	f7b6 <smp_pairing_rsp+0x1b6>
	if (!IS_ENABLED(CONFIG_BT_SMP_ALLOW_UNAUTH_OVERWRITE) &&
    f7ac:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    f7b0:	2b00      	cmp	r3, #0
    f7b2:	d1a4      	bne.n	f6fe <smp_pairing_rsp+0xfe>
    f7b4:	e7f6      	b.n	f7a4 <smp_pairing_rsp+0x1a4>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    f7b6:	2105      	movs	r1, #5
    f7b8:	4628      	mov	r0, r5
    f7ba:	f012 fa5c 	bl	21c76 <atomic_test_bit>
	if ((conn->le.keys->keys & BT_KEYS_LTK_P256) &&
    f7be:	2800      	cmp	r0, #0
    f7c0:	d1f4      	bne.n	f7ac <smp_pairing_rsp+0x1ac>
    f7c2:	e7ef      	b.n	f7a4 <smp_pairing_rsp+0x1a4>
	struct bt_conn *conn = smp->chan.chan.conn;
    f7c4:	6826      	ldr	r6, [r4, #0]
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
    f7c6:	f106 0188 	add.w	r1, r6, #136	; 0x88
    f7ca:	7a30      	ldrb	r0, [r6, #8]
    f7cc:	f000 fbe8 	bl	ffa0 <bt_keys_find_addr>
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
    f7d0:	f894 10c8 	ldrb.w	r1, [r4, #200]	; 0xc8
    f7d4:	b178      	cbz	r0, f7f6 <smp_pairing_rsp+0x1f6>
    f7d6:	7b43      	ldrb	r3, [r0, #13]
    f7d8:	07db      	lsls	r3, r3, #31
    f7da:	d50c      	bpl.n	f7f6 <smp_pairing_rsp+0x1f6>
    f7dc:	b959      	cbnz	r1, f7f6 <smp_pairing_rsp+0x1f6>
    f7de:	4964      	ldr	r1, [pc, #400]	; (f970 <smp_pairing_rsp+0x370>)
    f7e0:	4b64      	ldr	r3, [pc, #400]	; (f974 <smp_pairing_rsp+0x374>)
		BT_ERR("JustWorks failed, authenticated keys present");
    f7e2:	4865      	ldr	r0, [pc, #404]	; (f978 <smp_pairing_rsp+0x378>)
    f7e4:	1ac9      	subs	r1, r1, r3
    f7e6:	08c9      	lsrs	r1, r1, #3
    f7e8:	0189      	lsls	r1, r1, #6
    f7ea:	f041 0101 	orr.w	r1, r1, #1
    f7ee:	f00e fe70 	bl	1e4d2 <log_0>
				return BT_SMP_ERR_UNSPECIFIED;
    f7f2:	2708      	movs	r7, #8
    f7f4:	e70d      	b.n	f612 <smp_pairing_rsp+0x12>
	switch (smp->method) {
    f7f6:	2906      	cmp	r1, #6
    f7f8:	d85c      	bhi.n	f8b4 <smp_pairing_rsp+0x2b4>
    f7fa:	e8df f001 	tbb	[pc, r1]
    f7fe:	5117      	.short	0x5117
    f800:	5b5b5b27 	.word	0x5b5b5b27
    f804:	04          	.byte	0x04
    f805:	00          	.byte	0x00
		if (bt_auth && bt_auth->oob_data_request) {
    f806:	4e58      	ldr	r6, [pc, #352]	; (f968 <smp_pairing_rsp+0x368>)
    f808:	6833      	ldr	r3, [r6, #0]
    f80a:	2b00      	cmp	r3, #0
    f80c:	d05d      	beq.n	f8ca <smp_pairing_rsp+0x2ca>
    f80e:	68db      	ldr	r3, [r3, #12]
    f810:	2b00      	cmp	r3, #0
    f812:	d05a      	beq.n	f8ca <smp_pairing_rsp+0x2ca>
			struct bt_conn_oob_info info = {
    f814:	2300      	movs	r3, #0
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    f816:	2109      	movs	r1, #9
    f818:	4628      	mov	r0, r5
			struct bt_conn_oob_info info = {
    f81a:	f8ad 3004 	strh.w	r3, [sp, #4]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    f81e:	f012 fa1c 	bl	21c5a <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
    f822:	6833      	ldr	r3, [r6, #0]
    f824:	6820      	ldr	r0, [r4, #0]
    f826:	68db      	ldr	r3, [r3, #12]
    f828:	a901      	add	r1, sp, #4
    f82a:	4798      	blx	r3
	if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    f82c:	2109      	movs	r1, #9
    f82e:	4628      	mov	r0, r5
    f830:	f012 fa21 	bl	21c76 <atomic_test_bit>
    f834:	2800      	cmp	r0, #0
    f836:	d14a      	bne.n	f8ce <smp_pairing_rsp+0x2ce>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    f838:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    f83c:	2103      	movs	r1, #3
    f83e:	f012 fa0c 	bl	21c5a <atomic_set_bit>
		return legacy_send_pairing_confirm(smp);
    f842:	4620      	mov	r0, r4
    f844:	f012 fcd1 	bl	221ea <legacy_send_pairing_confirm>
	return sc_send_public_key(smp);
    f848:	4607      	mov	r7, r0
    f84a:	e6e2      	b.n	f612 <smp_pairing_rsp+0x12>
			if (bt_rand(&passkey, sizeof(passkey))) {
    f84c:	2104      	movs	r1, #4
    f84e:	eb0d 0001 	add.w	r0, sp, r1
    f852:	f003 fd6f 	bl	13334 <bt_rand>
    f856:	2800      	cmp	r0, #0
    f858:	d1cb      	bne.n	f7f2 <smp_pairing_rsp+0x1f2>
			passkey %= 1000000;
    f85a:	9901      	ldr	r1, [sp, #4]
    f85c:	4a47      	ldr	r2, [pc, #284]	; (f97c <smp_pairing_rsp+0x37c>)
		if (bt_auth && bt_auth->passkey_display) {
    f85e:	4f42      	ldr	r7, [pc, #264]	; (f968 <smp_pairing_rsp+0x368>)
			passkey %= 1000000;
    f860:	fbb1 f3f2 	udiv	r3, r1, r2
    f864:	fb02 1313 	mls	r3, r2, r3, r1
    f868:	9301      	str	r3, [sp, #4]
		if (bt_auth && bt_auth->passkey_display) {
    f86a:	683b      	ldr	r3, [r7, #0]
    f86c:	b153      	cbz	r3, f884 <smp_pairing_rsp+0x284>
    f86e:	681b      	ldr	r3, [r3, #0]
    f870:	b143      	cbz	r3, f884 <smp_pairing_rsp+0x284>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
    f872:	210a      	movs	r1, #10
    f874:	4628      	mov	r0, r5
    f876:	f012 f9f0 	bl	21c5a <atomic_set_bit>
			bt_auth->passkey_display(conn, passkey);
    f87a:	683b      	ldr	r3, [r7, #0]
    f87c:	9901      	ldr	r1, [sp, #4]
    f87e:	681b      	ldr	r3, [r3, #0]
    f880:	4630      	mov	r0, r6
    f882:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
    f884:	9b01      	ldr	r3, [sp, #4]
	dst[0] = val;
    f886:	f884 3107 	strb.w	r3, [r4, #263]	; 0x107
	dst[1] = val >> 8;
    f88a:	f3c3 2207 	ubfx	r2, r3, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
    f88e:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    f890:	f884 3109 	strb.w	r3, [r4, #265]	; 0x109
	dst[1] = val >> 8;
    f894:	0a1b      	lsrs	r3, r3, #8
    f896:	f884 2108 	strb.w	r2, [r4, #264]	; 0x108
    f89a:	f884 310a 	strb.w	r3, [r4, #266]	; 0x10a
	if (ret) {
    f89e:	e7c5      	b.n	f82c <smp_pairing_rsp+0x22c>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    f8a0:	4628      	mov	r0, r5
    f8a2:	2109      	movs	r1, #9
    f8a4:	f012 f9d9 	bl	21c5a <atomic_set_bit>
		bt_auth->passkey_entry(conn);
    f8a8:	4b2f      	ldr	r3, [pc, #188]	; (f968 <smp_pairing_rsp+0x368>)
    f8aa:	681b      	ldr	r3, [r3, #0]
    f8ac:	4630      	mov	r0, r6
    f8ae:	685b      	ldr	r3, [r3, #4]
    f8b0:	4798      	blx	r3
	if (ret) {
    f8b2:	e7bb      	b.n	f82c <smp_pairing_rsp+0x22c>
    f8b4:	4b2f      	ldr	r3, [pc, #188]	; (f974 <smp_pairing_rsp+0x374>)
    f8b6:	4a2e      	ldr	r2, [pc, #184]	; (f970 <smp_pairing_rsp+0x370>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
    f8b8:	4831      	ldr	r0, [pc, #196]	; (f980 <smp_pairing_rsp+0x380>)
    f8ba:	1ad2      	subs	r2, r2, r3
    f8bc:	08d2      	lsrs	r2, r2, #3
    f8be:	0192      	lsls	r2, r2, #6
    f8c0:	f042 0201 	orr.w	r2, r2, #1
    f8c4:	f00e fe12 	bl	1e4ec <log_1>
	if (ret) {
    f8c8:	e793      	b.n	f7f2 <smp_pairing_rsp+0x1f2>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
    f8ca:	2702      	movs	r7, #2
    f8cc:	e6a1      	b.n	f612 <smp_pairing_rsp+0x12>
	atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    f8ce:	2100      	movs	r1, #0
    f8d0:	4628      	mov	r0, r5
    f8d2:	f012 f9c2 	bl	21c5a <atomic_set_bit>
	return 0;
    f8d6:	2700      	movs	r7, #0
    f8d8:	e69b      	b.n	f612 <smp_pairing_rsp+0x12>
	if ((IS_ENABLED(CONFIG_BT_SMP_SC_ONLY) ||
    f8da:	7ab2      	ldrb	r2, [r6, #10]
    f8dc:	2a04      	cmp	r2, #4
    f8de:	461f      	mov	r7, r3
    f8e0:	d10c      	bne.n	f8fc <smp_pairing_rsp+0x2fc>
	     conn->required_sec_level == BT_SECURITY_L4) &&
    f8e2:	2b00      	cmp	r3, #0
    f8e4:	f43f af5e 	beq.w	f7a4 <smp_pairing_rsp+0x1a4>
	return MIN(req->max_key_size, rsp->max_key_size);
    f8e8:	f894 20cd 	ldrb.w	r2, [r4, #205]	; 0xcd
    f8ec:	f894 10d4 	ldrb.w	r1, [r4, #212]	; 0xd4
	     conn->required_sec_level == BT_SECURITY_L4) &&
    f8f0:	428a      	cmp	r2, r1
    f8f2:	bf28      	it	cs
    f8f4:	460a      	movcs	r2, r1
    f8f6:	2a10      	cmp	r2, #16
    f8f8:	f47f ae8a 	bne.w	f610 <smp_pairing_rsp+0x10>
	smp->local_dist &= SEND_KEYS_SC;
    f8fc:	2200      	movs	r2, #0
    f8fe:	f884 21a8 	strb.w	r2, [r4, #424]	; 0x1a8
	smp->remote_dist &= RECV_KEYS_SC;
    f902:	f894 21a9 	ldrb.w	r2, [r4, #425]	; 0x1a9
    f906:	f002 0202 	and.w	r2, r2, #2
    f90a:	f884 21a9 	strb.w	r2, [r4, #425]	; 0x1a9
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    f90e:	b95b      	cbnz	r3, f928 <smp_pairing_rsp+0x328>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    f910:	210e      	movs	r1, #14
    f912:	4628      	mov	r0, r5
    f914:	f012 f9af 	bl	21c76 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    f918:	b130      	cbz	r0, f928 <smp_pairing_rsp+0x328>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    f91a:	4e13      	ldr	r6, [pc, #76]	; (f968 <smp_pairing_rsp+0x368>)
    f91c:	6833      	ldr	r3, [r6, #0]
    f91e:	b11b      	cbz	r3, f928 <smp_pairing_rsp+0x328>
	    bt_auth && bt_auth->pairing_confirm) {
    f920:	695b      	ldr	r3, [r3, #20]
    f922:	2b00      	cmp	r3, #0
    f924:	f47f af04 	bne.w	f730 <smp_pairing_rsp+0x130>
	if (!sc_public_key) {
    f928:	4b16      	ldr	r3, [pc, #88]	; (f984 <smp_pairing_rsp+0x384>)
    f92a:	681f      	ldr	r7, [r3, #0]
    f92c:	b927      	cbnz	r7, f938 <smp_pairing_rsp+0x338>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
    f92e:	2106      	movs	r1, #6
    f930:	4628      	mov	r0, r5
    f932:	f012 f992 	bl	21c5a <atomic_set_bit>
		return 0;
    f936:	e66c      	b.n	f612 <smp_pairing_rsp+0x12>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
    f938:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    f93c:	210c      	movs	r1, #12
    f93e:	f012 f98c 	bl	21c5a <atomic_set_bit>
    f942:	f3bf 8f5b 	dmb	ish
    f946:	e850 3f00 	ldrex	r3, [r0]
    f94a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    f94e:	e840 3200 	strex	r2, r3, [r0]
    f952:	2a00      	cmp	r2, #0
    f954:	d1f7      	bne.n	f946 <smp_pairing_rsp+0x346>
    f956:	f3bf 8f5b 	dmb	ish
	return sc_send_public_key(smp);
    f95a:	4620      	mov	r0, r4
    f95c:	f7ff f8ee 	bl	eb3c <sc_send_public_key>
    f960:	e772      	b.n	f848 <smp_pairing_rsp+0x248>
    f962:	bf00      	nop
    f964:	00026c9a 	.word	0x00026c9a
    f968:	20001eec 	.word	0x20001eec
    f96c:	00026cb3 	.word	0x00026cb3
    f970:	000237d8 	.word	0x000237d8
    f974:	000236f0 	.word	0x000236f0
    f978:	00026c0d 	.word	0x00026c0d
    f97c:	000f4240 	.word	0x000f4240
    f980:	00026c3a 	.word	0x00026c3a
    f984:	200020bc 	.word	0x200020bc

0000f988 <smp_pairing_random>:
{
    f988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f98c:	4604      	mov	r4, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    f98e:	f100 07f7 	add.w	r7, r0, #247	; 0xf7
    f992:	6889      	ldr	r1, [r1, #8]
{
    f994:	b09e      	sub	sp, #120	; 0x78
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    f996:	2210      	movs	r2, #16
    f998:	4638      	mov	r0, r7
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    f99a:	f104 06c4 	add.w	r6, r4, #196	; 0xc4
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    f99e:	f010 fa6a 	bl	1fe76 <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    f9a2:	2105      	movs	r1, #5
    f9a4:	4630      	mov	r0, r6
    f9a6:	f012 f966 	bl	21c76 <atomic_test_bit>
    f9aa:	f8d4 9000 	ldr.w	r9, [r4]
    f9ae:	2800      	cmp	r0, #0
    f9b0:	d15d      	bne.n	fa6e <smp_pairing_random+0xe6>
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
    f9b2:	f109 0396 	add.w	r3, r9, #150	; 0x96
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    f9b6:	f204 1a07 	addw	sl, r4, #263	; 0x107
    f9ba:	f10d 0828 	add.w	r8, sp, #40	; 0x28
    f9be:	9301      	str	r3, [sp, #4]
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
    f9c0:	f109 038f 	add.w	r3, r9, #143	; 0x8f
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    f9c4:	9300      	str	r3, [sp, #0]
    f9c6:	f8cd 8008 	str.w	r8, [sp, #8]
    f9ca:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
    f9ce:	f104 02c9 	add.w	r2, r4, #201	; 0xc9
    f9d2:	4639      	mov	r1, r7
    f9d4:	4650      	mov	r0, sl
    f9d6:	f012 fbad 	bl	22134 <smp_c1>
	if (err) {
    f9da:	2800      	cmp	r0, #0
    f9dc:	d140      	bne.n	fa60 <smp_pairing_random+0xd8>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
    f9de:	2210      	movs	r2, #16
    f9e0:	4641      	mov	r1, r8
    f9e2:	f104 00d7 	add.w	r0, r4, #215	; 0xd7
    f9e6:	f010 fa36 	bl	1fe56 <memcmp>
    f9ea:	2800      	cmp	r0, #0
    f9ec:	d179      	bne.n	fae2 <smp_pairing_random+0x15a>
	    conn->role == BT_HCI_ROLE_MASTER) {
    f9ee:	f899 5003 	ldrb.w	r5, [r9, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    f9f2:	2d00      	cmp	r5, #0
    f9f4:	f040 80e1 	bne.w	fbba <smp_pairing_random+0x232>
	memcpy(out, r2, 8);
    f9f8:	2208      	movs	r2, #8
    f9fa:	f104 01e7 	add.w	r1, r4, #231	; 0xe7
    f9fe:	4640      	mov	r0, r8
    fa00:	f010 fa39 	bl	1fe76 <memcpy>
	memcpy(out + 8, r1, 8);
    fa04:	2208      	movs	r2, #8
    fa06:	4639      	mov	r1, r7
    fa08:	a80c      	add	r0, sp, #48	; 0x30
    fa0a:	f010 fa34 	bl	1fe76 <memcpy>
	return bt_encrypt_le(k, out, out);
    fa0e:	4642      	mov	r2, r8
    fa10:	4641      	mov	r1, r8
    fa12:	4650      	mov	r0, sl
    fa14:	f003 fc90 	bl	13338 <bt_encrypt_le>
		if (err) {
    fa18:	bb10      	cbnz	r0, fa60 <smp_pairing_random+0xd8>
		(void)memset(ediv, 0, sizeof(ediv));
    fa1a:	2202      	movs	r2, #2
    fa1c:	4629      	mov	r1, r5
    fa1e:	a805      	add	r0, sp, #20
    fa20:	f010 fa54 	bl	1fecc <memset>
		(void)memset(rand, 0, sizeof(rand));
    fa24:	2208      	movs	r2, #8
    fa26:	4629      	mov	r1, r5
    fa28:	a806      	add	r0, sp, #24
    fa2a:	f010 fa4f 	bl	1fecc <memset>
	return MIN(req->max_key_size, rsp->max_key_size);
    fa2e:	f894 20d4 	ldrb.w	r2, [r4, #212]	; 0xd4
    fa32:	f894 30cd 	ldrb.w	r3, [r4, #205]	; 0xcd
		if (bt_conn_le_start_encryption(conn, rand, ediv, tmp,
    fa36:	429a      	cmp	r2, r3
    fa38:	bf94      	ite	ls
    fa3a:	9200      	strls	r2, [sp, #0]
    fa3c:	9300      	strhi	r3, [sp, #0]
    fa3e:	a906      	add	r1, sp, #24
    fa40:	4643      	mov	r3, r8
    fa42:	aa05      	add	r2, sp, #20
    fa44:	4648      	mov	r0, r9
    fa46:	f010 fd4a 	bl	204de <bt_conn_le_start_encryption>
    fa4a:	b158      	cbz	r0, fa64 <smp_pairing_random+0xdc>
    fa4c:	4962      	ldr	r1, [pc, #392]	; (fbd8 <smp_pairing_random+0x250>)
    fa4e:	4b63      	ldr	r3, [pc, #396]	; (fbdc <smp_pairing_random+0x254>)
			BT_ERR("Failed to start encryption");
    fa50:	4863      	ldr	r0, [pc, #396]	; (fbe0 <smp_pairing_random+0x258>)
    fa52:	1ac9      	subs	r1, r1, r3
    fa54:	08c9      	lsrs	r1, r1, #3
    fa56:	0189      	lsls	r1, r1, #6
    fa58:	f041 0101 	orr.w	r1, r1, #1
    fa5c:	f00e fd39 	bl	1e4d2 <log_0>
				return BT_SMP_ERR_UNSPECIFIED;
    fa60:	2508      	movs	r5, #8
    fa62:	e03f      	b.n	fae4 <smp_pairing_random+0x15c>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    fa64:	2101      	movs	r1, #1
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    fa66:	4630      	mov	r0, r6
    fa68:	f012 f8f7 	bl	21c5a <atomic_set_bit>
			return 0;
    fa6c:	e03a      	b.n	fae4 <smp_pairing_random+0x15c>
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    fa6e:	f899 5003 	ldrb.w	r5, [r9, #3]
    fa72:	2d00      	cmp	r5, #0
    fa74:	f040 80ae 	bne.w	fbd4 <smp_pairing_random+0x24c>
	switch (smp->method) {
    fa78:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    fa7c:	2b05      	cmp	r3, #5
    fa7e:	d8ef      	bhi.n	fa60 <smp_pairing_random+0xd8>
    fa80:	a201      	add	r2, pc, #4	; (adr r2, fa88 <smp_pairing_random+0x100>)
    fa82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    fa86:	bf00      	nop
    fa88:	0000faed 	.word	0x0000faed
    fa8c:	0000faa1 	.word	0x0000faa1
    fa90:	0000faa1 	.word	0x0000faa1
    fa94:	0000faed 	.word	0x0000faed
    fa98:	0000fa61 	.word	0x0000fa61
    fa9c:	0000fbbf 	.word	0x0000fbbf
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    faa0:	f894 219c 	ldrb.w	r2, [r4, #412]	; 0x19c
    faa4:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
    faa8:	40d3      	lsrs	r3, r2
    faaa:	f003 0301 	and.w	r3, r3, #1
		r |= 0x80;
    faae:	f063 037f 	orn	r3, r3, #127	; 0x7f
    fab2:	b2db      	uxtb	r3, r3
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    fab4:	f8df 9134 	ldr.w	r9, [pc, #308]	; fbec <smp_pairing_random+0x264>
    fab8:	f10d 0828 	add.w	r8, sp, #40	; 0x28
    fabc:	f204 1a17 	addw	sl, r4, #279	; 0x117
    fac0:	f8cd 8000 	str.w	r8, [sp]
    fac4:	f8d9 1000 	ldr.w	r1, [r9]
    fac8:	463a      	mov	r2, r7
    faca:	4650      	mov	r0, sl
    facc:	f012 f9f4 	bl	21eb8 <smp_f4>
    fad0:	2800      	cmp	r0, #0
    fad2:	d1c5      	bne.n	fa60 <smp_pairing_random+0xd8>
	if (memcmp(smp->pcnf, cfm, 16)) {
    fad4:	2210      	movs	r2, #16
    fad6:	4641      	mov	r1, r8
    fad8:	f104 00d7 	add.w	r0, r4, #215	; 0xd7
    fadc:	f010 f9bb 	bl	1fe56 <memcmp>
    fae0:	b130      	cbz	r0, faf0 <smp_pairing_random+0x168>
		return BT_SMP_ERR_CONFIRM_FAILED;
    fae2:	2504      	movs	r5, #4
}
    fae4:	4628      	mov	r0, r5
    fae6:	b01e      	add	sp, #120	; 0x78
    fae8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	switch (smp->method) {
    faec:	2300      	movs	r3, #0
    faee:	e7e1      	b.n	fab4 <smp_pairing_random+0x12c>
		switch (smp->method) {
    faf0:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    faf4:	2b05      	cmp	r3, #5
    faf6:	d8b3      	bhi.n	fa60 <smp_pairing_random+0xd8>
    faf8:	a201      	add	r2, pc, #4	; (adr r2, fb00 <smp_pairing_random+0x178>)
    fafa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    fafe:	bf00      	nop
    fb00:	0000fbbf 	.word	0x0000fbbf
    fb04:	0000fb8b 	.word	0x0000fb8b
    fb08:	0000fb8b 	.word	0x0000fb8b
    fb0c:	0000fb19 	.word	0x0000fb19
    fb10:	0000fa61 	.word	0x0000fa61
    fb14:	0000fbbf 	.word	0x0000fbbf
	sys_memcpy_swap(m, u, 32);
    fb18:	f8d9 1000 	ldr.w	r1, [r9]
    fb1c:	2220      	movs	r2, #32
    fb1e:	4640      	mov	r0, r8
    fb20:	f012 f88f 	bl	21c42 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
    fb24:	2220      	movs	r2, #32
    fb26:	4651      	mov	r1, sl
    fb28:	a812      	add	r0, sp, #72	; 0x48
    fb2a:	f012 f88a 	bl	21c42 <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
    fb2e:	2210      	movs	r2, #16
    fb30:	4639      	mov	r1, r7
    fb32:	a81a      	add	r0, sp, #104	; 0x68
    fb34:	f012 f885 	bl	21c42 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
    fb38:	2210      	movs	r2, #16
    fb3a:	f104 01e7 	add.w	r1, r4, #231	; 0xe7
    fb3e:	a806      	add	r0, sp, #24
    fb40:	f012 f87f 	bl	21c42 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
    fb44:	ab06      	add	r3, sp, #24
    fb46:	2250      	movs	r2, #80	; 0x50
    fb48:	4641      	mov	r1, r8
    fb4a:	4618      	mov	r0, r3
    fb4c:	f012 f89c 	bl	21c88 <bt_smp_aes_cmac>
	if (err) {
    fb50:	2800      	cmp	r0, #0
    fb52:	d185      	bne.n	fa60 <smp_pairing_random+0xd8>
	memcpy(passkey, xs + 12, 4);
    fb54:	a909      	add	r1, sp, #36	; 0x24
    fb56:	2204      	movs	r2, #4
    fb58:	a805      	add	r0, sp, #20
    fb5a:	f010 f98c 	bl	1fe76 <memcpy>
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    fb5e:	9b05      	ldr	r3, [sp, #20]
    fb60:	4920      	ldr	r1, [pc, #128]	; (fbe4 <smp_pairing_random+0x25c>)
    fb62:	ba1b      	rev	r3, r3
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    fb64:	4630      	mov	r0, r6
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    fb66:	fbb3 f2f1 	udiv	r2, r3, r1
    fb6a:	fb01 3312 	mls	r3, r1, r2, r3
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    fb6e:	2109      	movs	r1, #9
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    fb70:	9305      	str	r3, [sp, #20]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    fb72:	f012 f872 	bl	21c5a <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    fb76:	2108      	movs	r1, #8
    fb78:	f012 f86f 	bl	21c5a <atomic_set_bit>
			bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
    fb7c:	4b1a      	ldr	r3, [pc, #104]	; (fbe8 <smp_pairing_random+0x260>)
    fb7e:	9905      	ldr	r1, [sp, #20]
    fb80:	681b      	ldr	r3, [r3, #0]
    fb82:	6820      	ldr	r0, [r4, #0]
    fb84:	689b      	ldr	r3, [r3, #8]
    fb86:	4798      	blx	r3
			return 0;
    fb88:	e7ac      	b.n	fae4 <smp_pairing_random+0x15c>
			smp->passkey_round++;
    fb8a:	f894 319c 	ldrb.w	r3, [r4, #412]	; 0x19c
    fb8e:	3301      	adds	r3, #1
    fb90:	b2db      	uxtb	r3, r3
			if (smp->passkey_round == 20U) {
    fb92:	2b14      	cmp	r3, #20
			smp->passkey_round++;
    fb94:	f884 319c 	strb.w	r3, [r4, #412]	; 0x19c
			if (smp->passkey_round == 20U) {
    fb98:	d011      	beq.n	fbbe <smp_pairing_random+0x236>
			if (bt_rand(smp->prnd, 16)) {
    fb9a:	2110      	movs	r1, #16
    fb9c:	f104 00e7 	add.w	r0, r4, #231	; 0xe7
    fba0:	f003 fbc8 	bl	13334 <bt_rand>
    fba4:	2800      	cmp	r0, #0
    fba6:	f47f af5b 	bne.w	fa60 <smp_pairing_random+0xd8>
			atomic_set_bit(&smp->allowed_cmds,
    fbaa:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    fbae:	2103      	movs	r1, #3
    fbb0:	f012 f853 	bl	21c5a <atomic_set_bit>
			return smp_send_pairing_confirm(smp);
    fbb4:	4620      	mov	r0, r4
    fbb6:	f7ff fbfd 	bl	f3b4 <smp_send_pairing_confirm>
		return compute_and_send_master_dhcheck(smp);
    fbba:	4605      	mov	r5, r0
    fbbc:	e792      	b.n	fae4 <smp_pairing_random+0x15c>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
    fbbe:	2107      	movs	r1, #7
    fbc0:	4630      	mov	r0, r6
    fbc2:	f012 f858 	bl	21c76 <atomic_test_bit>
    fbc6:	b108      	cbz	r0, fbcc <smp_pairing_random+0x244>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    fbc8:	2108      	movs	r1, #8
    fbca:	e74c      	b.n	fa66 <smp_pairing_random+0xde>
		return compute_and_send_master_dhcheck(smp);
    fbcc:	4620      	mov	r0, r4
    fbce:	f7fe fefd 	bl	e9cc <compute_and_send_master_dhcheck>
    fbd2:	e7f2      	b.n	fbba <smp_pairing_random+0x232>
	return BT_SMP_ERR_PAIRING_NOTSUPP;
    fbd4:	2505      	movs	r5, #5
    fbd6:	e785      	b.n	fae4 <smp_pairing_random+0x15c>
    fbd8:	000237d8 	.word	0x000237d8
    fbdc:	000236f0 	.word	0x000236f0
    fbe0:	00026c56 	.word	0x00026c56
    fbe4:	000f4240 	.word	0x000f4240
    fbe8:	20001eec 	.word	0x20001eec
    fbec:	200020bc 	.word	0x200020bc

0000fbf0 <smp_ident_addr_info>:
{
    fbf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
    fbf4:	688e      	ldr	r6, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
    fbf6:	6804      	ldr	r4, [r0, #0]
	return BT_ADDR_IS_RPA(&addr->a);
}

static inline bool bt_addr_le_is_identity(const bt_addr_le_t *addr)
{
	if (addr->type == BT_ADDR_LE_PUBLIC) {
    fbf8:	7833      	ldrb	r3, [r6, #0]
{
    fbfa:	4605      	mov	r5, r0
    fbfc:	b31b      	cbz	r3, fc46 <smp_ident_addr_info+0x56>
	if (!bt_addr_le_is_identity(&req->addr)) {
    fbfe:	79b3      	ldrb	r3, [r6, #6]
    fc00:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    fc04:	2bc0      	cmp	r3, #192	; 0xc0
    fc06:	d01e      	beq.n	fc46 <smp_ident_addr_info+0x56>
    fc08:	4b4a      	ldr	r3, [pc, #296]	; (fd34 <smp_ident_addr_info+0x144>)
    fc0a:	4d4b      	ldr	r5, [pc, #300]	; (fd38 <smp_ident_addr_info+0x148>)
		BT_ERR("Invalid identity %s", bt_addr_le_str(&req->addr));
    fc0c:	4630      	mov	r0, r6
    fc0e:	1aed      	subs	r5, r5, r3
    fc10:	f7f8 f8f2 	bl	7df8 <bt_addr_le_str_real>
    fc14:	f7f6 fb8e 	bl	6334 <log_strdup>
    fc18:	08ed      	lsrs	r5, r5, #3
    fc1a:	01ad      	lsls	r5, r5, #6
    fc1c:	f045 0501 	orr.w	r5, r5, #1
    fc20:	4601      	mov	r1, r0
    fc22:	462a      	mov	r2, r5
    fc24:	4845      	ldr	r0, [pc, #276]	; (fd3c <smp_ident_addr_info+0x14c>)
    fc26:	f00e fc61 	bl	1e4ec <log_1>
		BT_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
    fc2a:	f104 0088 	add.w	r0, r4, #136	; 0x88
    fc2e:	f7f8 f8e3 	bl	7df8 <bt_addr_le_str_real>
    fc32:	f7f6 fb7f 	bl	6334 <log_strdup>
    fc36:	462a      	mov	r2, r5
    fc38:	4601      	mov	r1, r0
    fc3a:	4841      	ldr	r0, [pc, #260]	; (fd40 <smp_ident_addr_info+0x150>)
    fc3c:	f00e fc56 	bl	1e4ec <log_1>
		return BT_SMP_ERR_INVALID_PARAMS;
    fc40:	200a      	movs	r0, #10
}
    fc42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    fc46:	210c      	movs	r1, #12
    fc48:	f105 00c4 	add.w	r0, r5, #196	; 0xc4
    fc4c:	f012 f813 	bl	21c76 <atomic_test_bit>
    fc50:	2800      	cmp	r0, #0
    fc52:	d048      	beq.n	fce6 <smp_ident_addr_info+0xf6>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
    fc54:	f104 0788 	add.w	r7, r4, #136	; 0x88
    fc58:	7a21      	ldrb	r1, [r4, #8]
    fc5a:	463a      	mov	r2, r7
    fc5c:	2002      	movs	r0, #2
    fc5e:	f012 fc10 	bl	22482 <bt_keys_get_type>
		if (!keys) {
    fc62:	4680      	mov	r8, r0
    fc64:	b990      	cbnz	r0, fc8c <smp_ident_addr_info+0x9c>
    fc66:	4a33      	ldr	r2, [pc, #204]	; (fd34 <smp_ident_addr_info+0x144>)
    fc68:	4c33      	ldr	r4, [pc, #204]	; (fd38 <smp_ident_addr_info+0x148>)
			BT_ERR("Unable to get keys for %s",
    fc6a:	4638      	mov	r0, r7
    fc6c:	1aa4      	subs	r4, r4, r2
    fc6e:	f7f8 f8c3 	bl	7df8 <bt_addr_le_str_real>
    fc72:	f7f6 fb5f 	bl	6334 <log_strdup>
    fc76:	08e4      	lsrs	r4, r4, #3
    fc78:	01a4      	lsls	r4, r4, #6
    fc7a:	f044 0401 	orr.w	r4, r4, #1
    fc7e:	4601      	mov	r1, r0
    fc80:	4622      	mov	r2, r4
    fc82:	4830      	ldr	r0, [pc, #192]	; (fd44 <smp_ident_addr_info+0x154>)
    fc84:	f00e fc32 	bl	1e4ec <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
    fc88:	2008      	movs	r0, #8
    fc8a:	e7da      	b.n	fc42 <smp_ident_addr_info+0x52>
		if (conn->role == BT_HCI_ROLE_MASTER) {
    fc8c:	78e3      	ldrb	r3, [r4, #3]
    fc8e:	2b00      	cmp	r3, #0
    fc90:	d13d      	bne.n	fd0e <smp_ident_addr_info+0x11e>
			dst = &conn->le.resp_addr;
    fc92:	f104 0196 	add.w	r1, r4, #150	; 0x96
	if (addr->type != BT_ADDR_LE_RANDOM) {
    fc96:	780b      	ldrb	r3, [r1, #0]
    fc98:	2b01      	cmp	r3, #1
    fc9a:	d121      	bne.n	fce0 <smp_ident_addr_info+0xf0>
		if (bt_addr_le_is_rpa(dst)) {
    fc9c:	798b      	ldrb	r3, [r1, #6]
    fc9e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    fca2:	2b40      	cmp	r3, #64	; 0x40
    fca4:	d11c      	bne.n	fce0 <smp_ident_addr_info+0xf0>
	memcpy(dst, src, sizeof(*dst));
    fca6:	2206      	movs	r2, #6
    fca8:	3101      	adds	r1, #1
    fcaa:	f108 003a 	add.w	r0, r8, #58	; 0x3a
    fcae:	f010 f8e2 	bl	1fe76 <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
    fcb2:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
    fcb6:	b19b      	cbz	r3, fce0 <smp_ident_addr_info+0xf0>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
    fcb8:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
    fcbc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    fcc0:	2bc0      	cmp	r3, #192	; 0xc0
    fcc2:	d00d      	beq.n	fce0 <smp_ident_addr_info+0xf0>
	memcpy(dst, src, sizeof(*dst));
    fcc4:	2207      	movs	r2, #7
    fcc6:	4631      	mov	r1, r6
    fcc8:	f108 0001 	add.w	r0, r8, #1
    fccc:	f010 f8d3 	bl	1fe76 <memcpy>
    fcd0:	2207      	movs	r2, #7
    fcd2:	4631      	mov	r1, r6
    fcd4:	4638      	mov	r0, r7
    fcd6:	f010 f8ce 	bl	1fe76 <memcpy>
				bt_conn_identity_resolved(conn);
    fcda:	4620      	mov	r0, r4
    fcdc:	f7fa fd4e 	bl	a77c <bt_conn_identity_resolved>
		bt_id_add(keys);
    fce0:	4640      	mov	r0, r8
    fce2:	f7f9 fb05 	bl	92f0 <bt_id_add>
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
    fce6:	f895 31a9 	ldrb.w	r3, [r5, #425]	; 0x1a9
    fcea:	f023 0202 	bic.w	r2, r3, #2
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    fcee:	075b      	lsls	r3, r3, #29
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
    fcf0:	f885 21a9 	strb.w	r2, [r5, #425]	; 0x1a9
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    fcf4:	d504      	bpl.n	fd00 <smp_ident_addr_info+0x110>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    fcf6:	210a      	movs	r1, #10
    fcf8:	f105 00c0 	add.w	r0, r5, #192	; 0xc0
    fcfc:	f011 ffad 	bl	21c5a <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    fd00:	78e3      	ldrb	r3, [r4, #3]
    fd02:	b13b      	cbz	r3, fd14 <smp_ident_addr_info+0x124>
	if (!smp->local_dist && !smp->remote_dist) {
    fd04:	f8b5 41a8 	ldrh.w	r4, [r5, #424]	; 0x1a8
    fd08:	b174      	cbz	r4, fd28 <smp_ident_addr_info+0x138>
	return 0;
    fd0a:	2000      	movs	r0, #0
    fd0c:	e799      	b.n	fc42 <smp_ident_addr_info+0x52>
			dst = &conn->le.init_addr;
    fd0e:	f104 018f 	add.w	r1, r4, #143	; 0x8f
    fd12:	e7c0      	b.n	fc96 <smp_ident_addr_info+0xa6>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    fd14:	f895 31a9 	ldrb.w	r3, [r5, #425]	; 0x1a9
    fd18:	2b00      	cmp	r3, #0
    fd1a:	d1f3      	bne.n	fd04 <smp_ident_addr_info+0x114>
		err = bt_smp_distribute_keys(smp);
    fd1c:	4628      	mov	r0, r5
    fd1e:	f7ff f887 	bl	ee30 <bt_smp_distribute_keys>
		if (err) {
    fd22:	2800      	cmp	r0, #0
    fd24:	d0ee      	beq.n	fd04 <smp_ident_addr_info+0x114>
    fd26:	e78c      	b.n	fc42 <smp_ident_addr_info+0x52>
		smp_pairing_complete(smp, 0);
    fd28:	4628      	mov	r0, r5
    fd2a:	4621      	mov	r1, r4
    fd2c:	f7ff f926 	bl	ef7c <smp_pairing_complete>
	return 0;
    fd30:	4620      	mov	r0, r4
    fd32:	e786      	b.n	fc42 <smp_ident_addr_info+0x52>
    fd34:	000236f0 	.word	0x000236f0
    fd38:	000237d8 	.word	0x000237d8
    fd3c:	00026c71 	.word	0x00026c71
    fd40:	00026ae4 	.word	0x00026ae4
    fd44:	00026a27 	.word	0x00026a27

0000fd48 <bt_smp_update_keys>:
{
    fd48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fd4a:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
    fd4c:	f7fe fde4 	bl	e918 <smp_chan_get>
	if (!smp) {
    fd50:	4605      	mov	r5, r0
    fd52:	2800      	cmp	r0, #0
    fd54:	f000 8081 	beq.w	fe5a <bt_smp_update_keys+0x112>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    fd58:	f100 06c4 	add.w	r6, r0, #196	; 0xc4
    fd5c:	2103      	movs	r1, #3
    fd5e:	4630      	mov	r0, r6
    fd60:	f011 ff89 	bl	21c76 <atomic_test_bit>
    fd64:	2800      	cmp	r0, #0
    fd66:	d078      	beq.n	fe5a <bt_smp_update_keys+0x112>
	if (conn->le.keys) {
    fd68:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    fd6c:	b108      	cbz	r0, fd72 <bt_smp_update_keys+0x2a>
		bt_keys_clear(conn->le.keys);
    fd6e:	f012 fb9c 	bl	224aa <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    fd72:	f104 0788 	add.w	r7, r4, #136	; 0x88
    fd76:	7a20      	ldrb	r0, [r4, #8]
    fd78:	4639      	mov	r1, r7
    fd7a:	f000 f88b 	bl	fe94 <bt_keys_get_addr>
    fd7e:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys) {
    fd82:	b9b0      	cbnz	r0, fdb2 <bt_smp_update_keys+0x6a>
    fd84:	4a35      	ldr	r2, [pc, #212]	; (fe5c <bt_smp_update_keys+0x114>)
    fd86:	4c36      	ldr	r4, [pc, #216]	; (fe60 <bt_smp_update_keys+0x118>)
		BT_ERR("Unable to get keys for %s",
    fd88:	4638      	mov	r0, r7
    fd8a:	1aa4      	subs	r4, r4, r2
    fd8c:	f7f8 f834 	bl	7df8 <bt_addr_le_str_real>
    fd90:	f7f6 fad0 	bl	6334 <log_strdup>
    fd94:	08e4      	lsrs	r4, r4, #3
    fd96:	01a4      	lsls	r4, r4, #6
    fd98:	f044 0401 	orr.w	r4, r4, #1
    fd9c:	4601      	mov	r1, r0
    fd9e:	4622      	mov	r2, r4
    fda0:	4830      	ldr	r0, [pc, #192]	; (fe64 <bt_smp_update_keys+0x11c>)
    fda2:	f00e fba3 	bl	1e4ec <log_1>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    fda6:	4628      	mov	r0, r5
    fda8:	2108      	movs	r1, #8
}
    fdaa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    fdae:	f012 b92e 	b.w	2200e <smp_error>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
    fdb2:	210d      	movs	r1, #13
    fdb4:	4630      	mov	r0, r6
    fdb6:	f011 ff5e 	bl	21c76 <atomic_test_bit>
    fdba:	b128      	cbz	r0, fdc8 <bt_smp_update_keys+0x80>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
    fdbc:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
    fdc0:	7b53      	ldrb	r3, [r2, #13]
    fdc2:	f043 0302 	orr.w	r3, r3, #2
    fdc6:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
    fdc8:	f895 20c8 	ldrb.w	r2, [r5, #200]	; 0xc8
    fdcc:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
    fdd0:	2a03      	cmp	r2, #3
    fdd2:	7b4b      	ldrb	r3, [r1, #13]
    fdd4:	d838      	bhi.n	fe48 <bt_smp_update_keys+0x100>
    fdd6:	b3d2      	cbz	r2, fe4e <bt_smp_update_keys+0x106>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
    fdd8:	f043 0301 	orr.w	r3, r3, #1
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
    fddc:	734b      	strb	r3, [r1, #13]
	return MIN(req->max_key_size, rsp->max_key_size);
    fdde:	f895 30d4 	ldrb.w	r3, [r5, #212]	; 0xd4
    fde2:	f895 20cd 	ldrb.w	r2, [r5, #205]	; 0xcd
    fde6:	4293      	cmp	r3, r2
    fde8:	bf28      	it	cs
    fdea:	4613      	movcs	r3, r2
	conn->le.keys->enc_size = get_encryption_key_size(smp);
    fdec:	730b      	strb	r3, [r1, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    fdee:	4630      	mov	r0, r6
    fdf0:	2105      	movs	r1, #5
    fdf2:	f011 ff40 	bl	21c76 <atomic_test_bit>
    fdf6:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
		conn->le.keys->flags |= BT_KEYS_SC;
    fdfa:	7b5a      	ldrb	r2, [r3, #13]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    fdfc:	b350      	cbz	r0, fe54 <bt_smp_update_keys+0x10c>
		conn->le.keys->flags |= BT_KEYS_SC;
    fdfe:	f042 0210 	orr.w	r2, r2, #16
    fe02:	735a      	strb	r2, [r3, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    fe04:	210c      	movs	r1, #12
    fe06:	4630      	mov	r0, r6
    fe08:	f011 ff35 	bl	21c76 <atomic_test_bit>
    fe0c:	b328      	cbz	r0, fe5a <bt_smp_update_keys+0x112>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
    fe0e:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    fe12:	2120      	movs	r1, #32
    fe14:	f012 fb45 	bl	224a2 <bt_keys_add_type>
			memcpy(conn->le.keys->ltk.val, smp->tk,
    fe18:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    fe1c:	f205 1107 	addw	r1, r5, #263	; 0x107
    fe20:	2210      	movs	r2, #16
    fe22:	301a      	adds	r0, #26
    fe24:	f010 f827 	bl	1fe76 <memcpy>
			(void)memset(conn->le.keys->ltk.rand, 0,
    fe28:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    fe2c:	2208      	movs	r2, #8
    fe2e:	2100      	movs	r1, #0
    fe30:	3010      	adds	r0, #16
    fe32:	f010 f84b 	bl	1fecc <memset>
			(void)memset(conn->le.keys->ltk.ediv, 0,
    fe36:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    fe3a:	2202      	movs	r2, #2
}
    fe3c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			(void)memset(conn->le.keys->ltk.ediv, 0,
    fe40:	2100      	movs	r1, #0
    fe42:	3018      	adds	r0, #24
    fe44:	f010 b842 	b.w	1fecc <memset>
	switch (smp->method) {
    fe48:	3a05      	subs	r2, #5
    fe4a:	2a01      	cmp	r2, #1
    fe4c:	d9c4      	bls.n	fdd8 <bt_smp_update_keys+0x90>
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
    fe4e:	f023 0301 	bic.w	r3, r3, #1
    fe52:	e7c3      	b.n	fddc <bt_smp_update_keys+0x94>
		conn->le.keys->flags &= ~BT_KEYS_SC;
    fe54:	f022 0210 	bic.w	r2, r2, #16
    fe58:	735a      	strb	r2, [r3, #13]
}
    fe5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fe5c:	000236f0 	.word	0x000236f0
    fe60:	000237d8 	.word	0x000237d8
    fe64:	00026a27 	.word	0x00026a27

0000fe68 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
    fe68:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
    fe6a:	4b07      	ldr	r3, [pc, #28]	; (fe88 <bt_smp_init+0x20>)
	}

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
    fe6c:	4807      	ldr	r0, [pc, #28]	; (fe8c <bt_smp_init+0x24>)
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
    fe6e:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
    fe72:	f003 0306 	and.w	r3, r3, #6
    fe76:	1f9a      	subs	r2, r3, #6
    fe78:	4253      	negs	r3, r2
    fe7a:	4153      	adcs	r3, r2
    fe7c:	4a04      	ldr	r2, [pc, #16]	; (fe90 <bt_smp_init+0x28>)
    fe7e:	7013      	strb	r3, [r2, #0]
		bt_pub_key_gen(&pub_key_cb);
    fe80:	f7fa fa7c 	bl	a37c <bt_pub_key_gen>
	}

	return smp_self_test();
}
    fe84:	2000      	movs	r0, #0
    fe86:	bd08      	pop	{r3, pc}
    fe88:	20000000 	.word	0x20000000
    fe8c:	20000270 	.word	0x20000270
    fe90:	20009c3a 	.word	0x20009c3a

0000fe94 <bt_keys_get_addr>:
static uint32_t aging_counter_val;
static struct bt_keys *last_keys_updated;
#endif /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */

struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
{
    fe94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		keys = &key_pool[i];

		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
    fe96:	4c11      	ldr	r4, [pc, #68]	; (fedc <bt_keys_get_addr+0x48>)
    fe98:	7823      	ldrb	r3, [r4, #0]
    fe9a:	4283      	cmp	r3, r0
{
    fe9c:	4605      	mov	r5, r0
    fe9e:	460e      	mov	r6, r1
    fea0:	4627      	mov	r7, r4
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
    fea2:	d00b      	beq.n	febc <bt_keys_get_addr+0x28>
			return keys;
		}

		if (first_free_slot == ARRAY_SIZE(key_pool) &&
		    !bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
    fea4:	2400      	movs	r4, #0
	return memcmp(a, b, sizeof(*a));
    fea6:	480e      	ldr	r0, [pc, #56]	; (fee0 <bt_keys_get_addr+0x4c>)
    fea8:	9400      	str	r4, [sp, #0]
    feaa:	2207      	movs	r2, #7
    feac:	4669      	mov	r1, sp
    feae:	f8cd 4003 	str.w	r4, [sp, #3]
    feb2:	f00f ffd0 	bl	1fe56 <memcmp>
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
    feb6:	b140      	cbz	r0, feca <bt_keys_get_addr+0x36>
		return keys;
	}

	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
    feb8:	4620      	mov	r0, r4
    feba:	e00d      	b.n	fed8 <bt_keys_get_addr+0x44>
    febc:	2207      	movs	r2, #7
    febe:	1c60      	adds	r0, r4, #1
    fec0:	f00f ffc9 	bl	1fe56 <memcmp>
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
    fec4:	2800      	cmp	r0, #0
    fec6:	d1ed      	bne.n	fea4 <bt_keys_get_addr+0x10>
    fec8:	e7f6      	b.n	feb8 <bt_keys_get_addr+0x24>
	memcpy(dst, src, sizeof(*dst));
    feca:	4805      	ldr	r0, [pc, #20]	; (fee0 <bt_keys_get_addr+0x4c>)
		keys->id = id;
    fecc:	703d      	strb	r5, [r7, #0]
    fece:	2207      	movs	r2, #7
    fed0:	4631      	mov	r1, r6
    fed2:	f00f ffd0 	bl	1fe76 <memcpy>
		return keys;
    fed6:	4801      	ldr	r0, [pc, #4]	; (fedc <bt_keys_get_addr+0x48>)
}
    fed8:	b003      	add	sp, #12
    feda:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fedc:	200020c0 	.word	0x200020c0
    fee0:	200020c1 	.word	0x200020c1

0000fee4 <bt_keys_foreach>:
	}
}

void bt_keys_foreach(int type, void (*func)(struct bt_keys *keys, void *data),
		     void *data)
{
    fee4:	460b      	mov	r3, r1
    fee6:	4611      	mov	r1, r2
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type)) {
    fee8:	4a04      	ldr	r2, [pc, #16]	; (fefc <bt_keys_foreach+0x18>)
{
    feea:	b410      	push	{r4}
		if ((key_pool[i].keys & type)) {
    feec:	89d4      	ldrh	r4, [r2, #14]
    feee:	4204      	tst	r4, r0
    fef0:	d002      	beq.n	fef8 <bt_keys_foreach+0x14>
			func(&key_pool[i], data);
		}
	}
}
    fef2:	bc10      	pop	{r4}
			func(&key_pool[i], data);
    fef4:	4610      	mov	r0, r2
    fef6:	4718      	bx	r3
}
    fef8:	bc10      	pop	{r4}
    fefa:	4770      	bx	lr
    fefc:	200020c0 	.word	0x200020c0

0000ff00 <bt_keys_find>:

struct bt_keys *bt_keys_find(int type, uint8_t id, const bt_addr_le_t *addr)
{
    ff00:	b510      	push	{r4, lr}
	int i;

	BT_DBG("type %d %s", type, bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
    ff02:	4c09      	ldr	r4, [pc, #36]	; (ff28 <bt_keys_find+0x28>)
{
    ff04:	460b      	mov	r3, r1
    ff06:	4611      	mov	r1, r2
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
    ff08:	89e2      	ldrh	r2, [r4, #14]
    ff0a:	4202      	tst	r2, r0
    ff0c:	d007      	beq.n	ff1e <bt_keys_find+0x1e>
    ff0e:	7822      	ldrb	r2, [r4, #0]
    ff10:	429a      	cmp	r2, r3
    ff12:	d104      	bne.n	ff1e <bt_keys_find+0x1e>
	return memcmp(a, b, sizeof(*a));
    ff14:	2207      	movs	r2, #7
    ff16:	1c60      	adds	r0, r4, #1
    ff18:	f00f ff9d 	bl	1fe56 <memcmp>
    ff1c:	b108      	cbz	r0, ff22 <bt_keys_find+0x22>
		    !bt_addr_le_cmp(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
    ff1e:	2000      	movs	r0, #0
}
    ff20:	bd10      	pop	{r4, pc}
			return &key_pool[i];
    ff22:	4620      	mov	r0, r4
    ff24:	e7fc      	b.n	ff20 <bt_keys_find+0x20>
    ff26:	bf00      	nop
    ff28:	200020c0 	.word	0x200020c0

0000ff2c <bt_keys_find_irk>:

	return keys;
}

struct bt_keys *bt_keys_find_irk(uint8_t id, const bt_addr_le_t *addr)
{
    ff2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
    ff2e:	780b      	ldrb	r3, [r1, #0]
    ff30:	2b01      	cmp	r3, #1
    ff32:	4607      	mov	r7, r0
    ff34:	460c      	mov	r4, r1
    ff36:	d001      	beq.n	ff3c <bt_keys_find_irk+0x10>
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	if (!bt_addr_le_is_rpa(addr)) {
		return NULL;
    ff38:	2000      	movs	r0, #0
	}

	BT_DBG("No IRK for %s", bt_addr_le_str(addr));

	return NULL;
}
    ff3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!bt_addr_le_is_rpa(addr)) {
    ff3c:	798b      	ldrb	r3, [r1, #6]
    ff3e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    ff42:	2b40      	cmp	r3, #64	; 0x40
    ff44:	d1f8      	bne.n	ff38 <bt_keys_find_irk+0xc>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
    ff46:	4d13      	ldr	r5, [pc, #76]	; (ff94 <bt_keys_find_irk+0x68>)
    ff48:	89eb      	ldrh	r3, [r5, #14]
    ff4a:	f013 0f02 	tst.w	r3, #2
    ff4e:	462e      	mov	r6, r5
    ff50:	d0f2      	beq.n	ff38 <bt_keys_find_irk+0xc>
		if (key_pool[i].id == id &&
    ff52:	7833      	ldrb	r3, [r6, #0]
    ff54:	42bb      	cmp	r3, r7
    ff56:	d10b      	bne.n	ff70 <bt_keys_find_irk+0x44>
	return memcmp(a, b, sizeof(*a));
    ff58:	2206      	movs	r2, #6
    ff5a:	f106 013a 	add.w	r1, r6, #58	; 0x3a
    ff5e:	1c60      	adds	r0, r4, #1
    ff60:	f00f ff79 	bl	1fe56 <memcmp>
    ff64:	b908      	cbnz	r0, ff6a <bt_keys_find_irk+0x3e>
			return &key_pool[i];
    ff66:	4628      	mov	r0, r5
    ff68:	e7e7      	b.n	ff3a <bt_keys_find_irk+0xe>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
    ff6a:	89f3      	ldrh	r3, [r6, #14]
    ff6c:	079b      	lsls	r3, r3, #30
    ff6e:	d5e3      	bpl.n	ff38 <bt_keys_find_irk+0xc>
		if (key_pool[i].id != id) {
    ff70:	7833      	ldrb	r3, [r6, #0]
    ff72:	42bb      	cmp	r3, r7
    ff74:	d1e0      	bne.n	ff38 <bt_keys_find_irk+0xc>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
    ff76:	3401      	adds	r4, #1
    ff78:	4807      	ldr	r0, [pc, #28]	; (ff98 <bt_keys_find_irk+0x6c>)
    ff7a:	4621      	mov	r1, r4
    ff7c:	f00f ffeb 	bl	1ff56 <bt_rpa_irk_matches>
    ff80:	2800      	cmp	r0, #0
    ff82:	d0d9      	beq.n	ff38 <bt_keys_find_irk+0xc>
	memcpy(dst, src, sizeof(*dst));
    ff84:	4805      	ldr	r0, [pc, #20]	; (ff9c <bt_keys_find_irk+0x70>)
    ff86:	2206      	movs	r2, #6
    ff88:	4621      	mov	r1, r4
    ff8a:	f00f ff74 	bl	1fe76 <memcpy>
			return &key_pool[i];
    ff8e:	4801      	ldr	r0, [pc, #4]	; (ff94 <bt_keys_find_irk+0x68>)
}
    ff90:	e7d3      	b.n	ff3a <bt_keys_find_irk+0xe>
    ff92:	bf00      	nop
    ff94:	200020c0 	.word	0x200020c0
    ff98:	200020ea 	.word	0x200020ea
    ff9c:	200020fa 	.word	0x200020fa

0000ffa0 <bt_keys_find_addr>:

struct bt_keys *bt_keys_find_addr(uint8_t id, const bt_addr_le_t *addr)
{
    ffa0:	b510      	push	{r4, lr}
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if (key_pool[i].id == id &&
    ffa2:	4c06      	ldr	r4, [pc, #24]	; (ffbc <bt_keys_find_addr+0x1c>)
    ffa4:	7823      	ldrb	r3, [r4, #0]
    ffa6:	4283      	cmp	r3, r0
    ffa8:	d104      	bne.n	ffb4 <bt_keys_find_addr+0x14>
	return memcmp(a, b, sizeof(*a));
    ffaa:	2207      	movs	r2, #7
    ffac:	1c60      	adds	r0, r4, #1
    ffae:	f00f ff52 	bl	1fe56 <memcmp>
    ffb2:	b108      	cbz	r0, ffb8 <bt_keys_find_addr+0x18>
		    !bt_addr_le_cmp(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
    ffb4:	2000      	movs	r0, #0
}
    ffb6:	bd10      	pop	{r4, pc}
			return &key_pool[i];
    ffb8:	4620      	mov	r0, r4
    ffba:	e7fc      	b.n	ffb6 <bt_keys_find_addr+0x16>
    ffbc:	200020c0 	.word	0x200020c0

0000ffc0 <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, uint16_t mem_size, uint16_t mem_count,
	      void **mem_head)
{
    ffc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ffc4:	4614      	mov	r4, r2
	*mem_head = mem_pool;

	/* Store free mem_count after the list's next pointer at an 32-bit
	 * aligned memory location to ensure atomic read/write (in ARM for now).
	 */
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    ffc6:	1dc2      	adds	r2, r0, #7
    ffc8:	f022 0203 	bic.w	r2, r2, #3

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    ffcc:	1e67      	subs	r7, r4, #1
    ffce:	b2bf      	uxth	r7, r7
	*mem_head = mem_pool;
    ffd0:	6018      	str	r0, [r3, #0]
{
    ffd2:	b082      	sub	sp, #8
    ffd4:	4605      	mov	r5, r0
    ffd6:	460e      	mov	r6, r1
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    ffd8:	fb01 0007 	mla	r0, r1, r7, r0
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    ffdc:	8014      	strh	r4, [r2, #0]
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    ffde:	2100      	movs	r1, #0
    ffe0:	2204      	movs	r2, #4
    ffe2:	f00f ff73 	bl	1fecc <memset>
		     sizeof(mem_pool));
	while (mem_count--) {
    ffe6:	b1b7      	cbz	r7, 10016 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x17>
    ffe8:	3c02      	subs	r4, #2
    ffea:	b2a4      	uxth	r4, r4
    ffec:	fb04 6306 	mla	r3, r4, r6, r6
    fff0:	fb04 f706 	mul.w	r7, r4, r6
    fff4:	441d      	add	r5, r3
    fff6:	1aff      	subs	r7, r7, r3
    fff8:	f64f 78ff 	movw	r8, #65535	; 0xffff
		uint32_t next;

		next = (uint32_t)((uint8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
    fffc:	2204      	movs	r2, #4
	while (mem_count--) {
    fffe:	3c01      	subs	r4, #1
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
   10000:	19e8      	adds	r0, r5, r7
   10002:	eb0d 0102 	add.w	r1, sp, r2
	while (mem_count--) {
   10006:	b2a4      	uxth	r4, r4
		next = (uint32_t)((uint8_t *) mem_pool +
   10008:	9501      	str	r5, [sp, #4]
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
   1000a:	f00f ff34 	bl	1fe76 <memcpy>
	while (mem_count--) {
   1000e:	4544      	cmp	r4, r8
   10010:	eba5 0506 	sub.w	r5, r5, r6
   10014:	d1f2      	bne.n	fffc <mem_init+0x3c>
		       (void *)&next, sizeof(next));
	}
}
   10016:	b002      	add	sp, #8
   10018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001001c <mem_acquire>:

void *mem_acquire(void **mem_head)
{
   1001c:	b570      	push	{r4, r5, r6, lr}
	if (*mem_head) {
   1001e:	6805      	ldr	r5, [r0, #0]
{
   10020:	b082      	sub	sp, #8
	if (*mem_head) {
   10022:	b195      	cbz	r5, 1004a <mem_acquire+0x2e>
		uint16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   10024:	1deb      	adds	r3, r5, #7
   10026:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
   1002a:	2204      	movs	r2, #4
   1002c:	4604      	mov	r4, r0
   1002e:	4629      	mov	r1, r5
   10030:	eb0d 0002 	add.w	r0, sp, r2
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   10034:	881e      	ldrh	r6, [r3, #0]
		memcpy(&head, mem, sizeof(head));
   10036:	f00f ff1e 	bl	1fe76 <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
   1003a:	9b01      	ldr	r3, [sp, #4]
   1003c:	b123      	cbz	r3, 10048 <mem_acquire+0x2c>
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
   1003e:	1dda      	adds	r2, r3, #7
   10040:	f022 0203 	bic.w	r2, r2, #3
		free_count--;
   10044:	3e01      	subs	r6, #1
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
   10046:	8016      	strh	r6, [r2, #0]
				free_count;
		}

		*mem_head = head;
   10048:	6023      	str	r3, [r4, #0]
		return mem;
	}

	return NULL;
}
   1004a:	4628      	mov	r0, r5
   1004c:	b002      	add	sp, #8
   1004e:	bd70      	pop	{r4, r5, r6, pc}

00010050 <mem_release>:
void mem_release(void *mem, void **mem_head)
{
	uint16_t free_count = 0U;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
   10050:	680b      	ldr	r3, [r1, #0]
{
   10052:	b570      	push	{r4, r5, r6, lr}
   10054:	460c      	mov	r4, r1
   10056:	4605      	mov	r5, r0
	if (*mem_head) {
   10058:	b183      	cbz	r3, 1007c <mem_release+0x2c>
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   1005a:	3307      	adds	r3, #7
   1005c:	f023 0303 	bic.w	r3, r3, #3
   10060:	881e      	ldrh	r6, [r3, #0]
   10062:	3601      	adds	r6, #1
   10064:	b2b6      	uxth	r6, r6
					       sizeof(mem_head)));
	}
	free_count++;

	memcpy(mem, mem_head, sizeof(mem));
   10066:	2204      	movs	r2, #4
   10068:	4621      	mov	r1, r4
   1006a:	4628      	mov	r0, r5
   1006c:	f00f ff03 	bl	1fe76 <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((uint16_t *)MROUND((uint8_t *)mem + sizeof(mem))) = free_count;
   10070:	1deb      	adds	r3, r5, #7
   10072:	f023 0303 	bic.w	r3, r3, #3
   10076:	801e      	strh	r6, [r3, #0]

	*mem_head = mem;
   10078:	6025      	str	r5, [r4, #0]
}
   1007a:	bd70      	pop	{r4, r5, r6, pc}
   1007c:	2601      	movs	r6, #1
   1007e:	e7f2      	b.n	10066 <mem_release+0x16>

00010080 <mem_get>:
}

void *mem_get(void *mem_pool, uint16_t mem_size, uint16_t index)
{
	return ((void *)((uint8_t *)mem_pool + (mem_size * index)));
}
   10080:	fb02 0001 	mla	r0, r2, r1, r0
   10084:	4770      	bx	lr
   10086:	bf00      	nop

00010088 <mem_index_get>:

uint16_t mem_index_get(void *mem, void *mem_pool, uint16_t mem_size)
{
	return ((uint16_t)((uint8_t *)mem - (uint8_t *)mem_pool) / mem_size);
   10088:	1a40      	subs	r0, r0, r1
   1008a:	b280      	uxth	r0, r0
}
   1008c:	fbb0 f0f2 	udiv	r0, r0, r2
   10090:	4770      	bx	lr
   10092:	bf00      	nop

00010094 <mem_rcopy>:
 * @details Example: [ 0x11 0x22 0x33 ] -> [ 0x33 0x22 0x11 ]
 */
void mem_rcopy(uint8_t *dst, uint8_t const *src, uint16_t len)
{
	src += len;
	while (len--) {
   10094:	1e53      	subs	r3, r2, #1
	src += len;
   10096:	4411      	add	r1, r2
	while (len--) {
   10098:	b29b      	uxth	r3, r3
   1009a:	b142      	cbz	r2, 100ae <mem_rcopy+0x1a>
   1009c:	43db      	mvns	r3, r3
   1009e:	18ca      	adds	r2, r1, r3
   100a0:	3801      	subs	r0, #1
		*dst++ = *--src;
   100a2:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
   100a6:	f800 3f01 	strb.w	r3, [r0, #1]!
	while (len--) {
   100aa:	4291      	cmp	r1, r2
   100ac:	d1f9      	bne.n	100a2 <mem_rcopy+0xe>
	}
}
   100ae:	4770      	bx	lr

000100b0 <mem_nz>:
 * @brief Determine if src[0..len-1] contains one or more non-zero bytes
 * @return 0 if all bytes are zero; otherwise 1
 */
uint8_t mem_nz(uint8_t *src, uint16_t len)
{
	while (len--) {
   100b0:	4401      	add	r1, r0
   100b2:	e002      	b.n	100ba <mem_nz+0xa>
		if (*src++) {
   100b4:	f810 3b01 	ldrb.w	r3, [r0], #1
   100b8:	b91b      	cbnz	r3, 100c2 <mem_nz+0x12>
	while (len--) {
   100ba:	4288      	cmp	r0, r1
   100bc:	d1fa      	bne.n	100b4 <mem_nz+0x4>
			return 1;
		}
	}

	return 0;
   100be:	2000      	movs	r0, #0
   100c0:	4770      	bx	lr
			return 1;
   100c2:	2001      	movs	r0, #1
}
   100c4:	4770      	bx	lr
   100c6:	bf00      	nop

000100c8 <memq_init>:
 * @return          Initial link-element
 */
memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* Head and tail pointer to the initial link - forms an empty queue */
	*head = *tail = link;
   100c8:	6010      	str	r0, [r2, #0]
   100ca:	6008      	str	r0, [r1, #0]

	return link;
}
   100cc:	4770      	bx	lr
   100ce:	bf00      	nop

000100d0 <memq_deinit>:
memq_link_t *memq_deinit(memq_link_t **head, memq_link_t **tail)
{
	memq_link_t *old_head;

	/* If head and tail are not equal, then queue is not empty */
	if (*head != *tail) {
   100d0:	680a      	ldr	r2, [r1, #0]
{
   100d2:	4603      	mov	r3, r0
	if (*head != *tail) {
   100d4:	6800      	ldr	r0, [r0, #0]
   100d6:	4290      	cmp	r0, r2
		return NULL;
	}

	old_head = *head;
	*head = *tail = NULL;
   100d8:	bf05      	ittet	eq
   100da:	2200      	moveq	r2, #0
   100dc:	600a      	streq	r2, [r1, #0]
		return NULL;
   100de:	2000      	movne	r0, #0
	*head = *tail = NULL;
   100e0:	601a      	streq	r2, [r3, #0]

	return old_head;
}
   100e2:	4770      	bx	lr

000100e4 <memq_enqueue>:
 * @param mem[in]      The memory payload to be enqueued. Pointed to by old tail
 * @param tail[in,out] Tail of queue. Will be updated to point to link
 * @return             New tail. Note: Does not point to the new mem
 */
memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
   100e4:	b410      	push	{r4}
	/* Let the old tail element point to the new tail element */
	(*tail)->next = link;
   100e6:	6814      	ldr	r4, [r2, #0]
   100e8:	6020      	str	r0, [r4, #0]

	/* Let the old tail element point the the new memory */
	(*tail)->mem = mem;
   100ea:	6814      	ldr	r4, [r2, #0]
   100ec:	6061      	str	r1, [r4, #4]
	 * The new tail-element is not expected to point to anything sensible
	 */
	*tail = link;

	return link;
}
   100ee:	bc10      	pop	{r4}
	*tail = link;
   100f0:	6010      	str	r0, [r2, #0]
}
   100f2:	4770      	bx	lr

000100f4 <memq_peek>:
 * @return         head or NULL if queue is empty
 */
memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* If head and tail are equal, then queue empty */
	if (head == tail) {
   100f4:	4288      	cmp	r0, r1
   100f6:	d003      	beq.n	10100 <memq_peek+0xc>
		return NULL;
	}

	/* Extract the head link-element's memory */
	if (mem) {
   100f8:	b11a      	cbz	r2, 10102 <memq_peek+0xe>
		*mem = head->mem;
   100fa:	6843      	ldr	r3, [r0, #4]
   100fc:	6013      	str	r3, [r2, #0]
   100fe:	4770      	bx	lr
		return NULL;
   10100:	2000      	movs	r0, #0
	}

	return head; /* queue was not empty */
}
   10102:	4770      	bx	lr

00010104 <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *old_head;

	/* Use memq peek to get the old head and its mem */
	old_head = memq_peek(*head, tail, mem);
   10104:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
   10106:	4283      	cmp	r3, r0
   10108:	d009      	beq.n	1011e <memq_dequeue+0x1a>
	if (mem) {
   1010a:	b12a      	cbz	r2, 10118 <memq_dequeue+0x14>
		*mem = head->mem;
   1010c:	6858      	ldr	r0, [r3, #4]
   1010e:	6010      	str	r0, [r2, #0]
	if (old_head == NULL) {
		return NULL; /* queue is empty */
	}

	/* Update the head-pointer to point to the new head element */
	*head = old_head->next;
   10110:	681a      	ldr	r2, [r3, #0]
   10112:	600a      	str	r2, [r1, #0]

	return old_head;
}
   10114:	4618      	mov	r0, r3
   10116:	4770      	bx	lr
	if (old_head == NULL) {
   10118:	2b00      	cmp	r3, #0
   1011a:	d1f9      	bne.n	10110 <memq_dequeue+0xc>
   1011c:	e7fa      	b.n	10114 <memq_dequeue+0x10>
		return NULL; /* queue is empty */
   1011e:	2300      	movs	r3, #0
   10120:	e7f8      	b.n	10114 <memq_dequeue+0x10>
   10122:	bf00      	nop

00010124 <mayfly_init>:
#if defined(MAYFLY_UT)
static uint8_t _state;
#endif /* MAYFLY_UT */

void mayfly_init(void)
{
   10124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10128:	f8df 8034 	ldr.w	r8, [pc, #52]	; 10160 <mayfly_init+0x3c>
   1012c:	4e0b      	ldr	r6, [pc, #44]	; (1015c <mayfly_init+0x38>)
   1012e:	270c      	movs	r7, #12
	callee_id = MAYFLY_CALLEE_COUNT;
	while (callee_id--) {
		uint8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
   10130:	f106 0430 	add.w	r4, r6, #48	; 0x30
{
   10134:	4645      	mov	r5, r8
			memq_init(&mfl[callee_id][caller_id],
   10136:	1d22      	adds	r2, r4, #4
   10138:	4621      	mov	r1, r4
   1013a:	4628      	mov	r0, r5
   1013c:	3c0c      	subs	r4, #12
   1013e:	f7ff ffc3 	bl	100c8 <memq_init>
		while (caller_id--) {
   10142:	42b4      	cmp	r4, r6
   10144:	f1a5 0508 	sub.w	r5, r5, #8
   10148:	d1f5      	bne.n	10136 <mayfly_init+0x12>
	while (callee_id--) {
   1014a:	3f04      	subs	r7, #4
   1014c:	1d3b      	adds	r3, r7, #4
   1014e:	f1a8 0820 	sub.w	r8, r8, #32
   10152:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
   10156:	d1eb      	bne.n	10130 <mayfly_init+0xc>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
   10158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1015c:	20002224 	.word	0x20002224
   10160:	20002194 	.word	0x20002194

00010164 <mayfly_enable>:

void mayfly_enable(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
   10164:	b430      	push	{r4, r5}
   10166:	4603      	mov	r3, r0
   10168:	460c      	mov	r4, r1
	if (enable) {
   1016a:	b19a      	cbz	r2, 10194 <mayfly_enable+0x30>
		if (mft[callee_id][caller_id].enable_req ==
   1016c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   10170:	0108      	lsls	r0, r1, #4
   10172:	4d14      	ldr	r5, [pc, #80]	; (101c4 <mayfly_enable+0x60>)
   10174:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   10178:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   1017c:	4429      	add	r1, r5
   1017e:	7a48      	ldrb	r0, [r1, #9]
   10180:	7a0d      	ldrb	r5, [r1, #8]
   10182:	42a8      	cmp	r0, r5
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
   10184:	bf04      	itt	eq
   10186:	3001      	addeq	r0, #1
   10188:	7208      	strbeq	r0, [r1, #8]
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
   1018a:	4621      	mov	r1, r4
   1018c:	4618      	mov	r0, r3

			/* pend the callee for execution */
			mayfly_pend(caller_id, callee_id);
		}
	}
}
   1018e:	bc30      	pop	{r4, r5}
		mayfly_enable_cb(caller_id, callee_id, enable);
   10190:	f00b ba04 	b.w	1b59c <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
   10194:	eb01 0241 	add.w	r2, r1, r1, lsl #1
   10198:	4d0a      	ldr	r5, [pc, #40]	; (101c4 <mayfly_enable+0x60>)
   1019a:	0112      	lsls	r2, r2, #4
   1019c:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   101a0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   101a4:	442b      	add	r3, r5
   101a6:	7a9d      	ldrb	r5, [r3, #10]
   101a8:	7ada      	ldrb	r2, [r3, #11]
   101aa:	42aa      	cmp	r2, r5
   101ac:	d001      	beq.n	101b2 <mayfly_enable+0x4e>
}
   101ae:	bc30      	pop	{r4, r5}
   101b0:	4770      	bx	lr
			mfp[callee_id] = 1U;
   101b2:	4d05      	ldr	r5, [pc, #20]	; (101c8 <mayfly_enable+0x64>)
			mft[callee_id][caller_id].disable_req++;
   101b4:	3201      	adds	r2, #1
   101b6:	729a      	strb	r2, [r3, #10]
			mfp[callee_id] = 1U;
   101b8:	2301      	movs	r3, #1
   101ba:	546b      	strb	r3, [r5, r1]
}
   101bc:	bc30      	pop	{r4, r5}
			mayfly_pend(caller_id, callee_id);
   101be:	f00b ba4b 	b.w	1b658 <mayfly_pend>
   101c2:	bf00      	nop
   101c4:	200021a0 	.word	0x200021a0
   101c8:	2000219c 	.word	0x2000219c

000101cc <mayfly_enqueue>:

uint32_t mayfly_enqueue(uint8_t caller_id, uint8_t callee_id, uint8_t chain,
			struct mayfly *m)
{
   101cc:	b570      	push	{r4, r5, r6, lr}
   101ce:	461c      	mov	r4, r3
   101d0:	4606      	mov	r6, r0
   101d2:	460d      	mov	r5, r1
	uint8_t state;
	uint8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
   101d4:	b322      	cbz	r2, 10220 <mayfly_enqueue+0x54>
   101d6:	7863      	ldrb	r3, [r4, #1]

	/* shadow the ack */
	ack = m->_ack;

	/* already in queue */
	state = (m->_req - ack) & 0x03;
   101d8:	7822      	ldrb	r2, [r4, #0]
   101da:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
   101dc:	f012 0203 	ands.w	r2, r2, #3
   101e0:	d005      	beq.n	101ee <mayfly_enqueue+0x22>
		if (chain) {
			if (state != 1U) {
   101e2:	2a01      	cmp	r2, #1
   101e4:	d040      	beq.n	10268 <mayfly_enqueue+0x9c>
				/* mark as ready in queue */
				m->_req = ack + 1;
   101e6:	3301      	adds	r3, #1
   101e8:	b2db      	uxtb	r3, r3
   101ea:	7023      	strb	r3, [r4, #0]

				goto mayfly_enqueue_pend;
   101ec:	e00f      	b.n	1020e <mayfly_enqueue+0x42>
		return 0;
	}

	/* new, add as ready in the queue */
	m->_req = ack + 1;
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
   101ee:	2230      	movs	r2, #48	; 0x30
   101f0:	2104      	movs	r1, #4
   101f2:	fb12 1105 	smlabb	r1, r2, r5, r1
   101f6:	220c      	movs	r2, #12
   101f8:	fb12 1206 	smlabb	r2, r2, r6, r1
	m->_req = ack + 1;
   101fc:	3301      	adds	r3, #1
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
   101fe:	491b      	ldr	r1, [pc, #108]	; (1026c <mayfly_enqueue+0xa0>)
   10200:	6860      	ldr	r0, [r4, #4]
	m->_req = ack + 1;
   10202:	b2db      	uxtb	r3, r3
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
   10204:	440a      	add	r2, r1
	m->_req = ack + 1;
   10206:	7023      	strb	r3, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
   10208:	4621      	mov	r1, r4
   1020a:	f7ff ff6b 	bl	100e4 <memq_enqueue>

mayfly_enqueue_pend:
	/* set mayfly callee pending */
	mfp[callee_id] = 1U;
   1020e:	4b18      	ldr	r3, [pc, #96]	; (10270 <mayfly_enqueue+0xa4>)

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
   10210:	4630      	mov	r0, r6
	mfp[callee_id] = 1U;
   10212:	2201      	movs	r2, #1
	mayfly_pend(caller_id, callee_id);
   10214:	4629      	mov	r1, r5
	mfp[callee_id] = 1U;
   10216:	555a      	strb	r2, [r3, r5]
	mayfly_pend(caller_id, callee_id);
   10218:	f00b fa1e 	bl	1b658 <mayfly_pend>

	return 0;
   1021c:	2000      	movs	r0, #0
}
   1021e:	bd70      	pop	{r4, r5, r6, pc}
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
   10220:	f00b f9fc 	bl	1b61c <mayfly_prio_is_equal>
   10224:	2800      	cmp	r0, #0
   10226:	d0d6      	beq.n	101d6 <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
   10228:	4629      	mov	r1, r5
   1022a:	4630      	mov	r0, r6
   1022c:	f00b f9d6 	bl	1b5dc <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
   10230:	2800      	cmp	r0, #0
   10232:	d0d0      	beq.n	101d6 <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
   10234:	eb05 0245 	add.w	r2, r5, r5, lsl #1
   10238:	0111      	lsls	r1, r2, #4
   1023a:	480c      	ldr	r0, [pc, #48]	; (1026c <mayfly_enqueue+0xa0>)
   1023c:	7863      	ldrb	r3, [r4, #1]
   1023e:	eb06 0246 	add.w	r2, r6, r6, lsl #1
   10242:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   10246:	4402      	add	r2, r0
		!mayfly_is_enabled(caller_id, callee_id) ||
   10248:	7a91      	ldrb	r1, [r2, #10]
   1024a:	7ad2      	ldrb	r2, [r2, #11]
   1024c:	4291      	cmp	r1, r2
   1024e:	d1c3      	bne.n	101d8 <mayfly_enqueue+0xc>
	state = (m->_req - ack) & 0x03;
   10250:	7822      	ldrb	r2, [r4, #0]
   10252:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
   10254:	0792      	lsls	r2, r2, #30
   10256:	d002      	beq.n	1025e <mayfly_enqueue+0x92>
		m->_req = ack + 2;
   10258:	3302      	adds	r3, #2
   1025a:	b2db      	uxtb	r3, r3
   1025c:	7023      	strb	r3, [r4, #0]
		m->fp(m->param);
   1025e:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
   10262:	4798      	blx	r3
		return 0;
   10264:	2000      	movs	r0, #0
}
   10266:	bd70      	pop	{r4, r5, r6, pc}
			return 1;
   10268:	4610      	mov	r0, r2
}
   1026a:	bd70      	pop	{r4, r5, r6, pc}
   1026c:	200021a0 	.word	0x200021a0
   10270:	2000219c 	.word	0x2000219c

00010274 <mayfly_run>:
{
	uint8_t disable = 0U;
	uint8_t enable = 0U;
	uint8_t caller_id;

	if (!mfp[callee_id]) {
   10274:	494e      	ldr	r1, [pc, #312]	; (103b0 <mayfly_run+0x13c>)
   10276:	5c0b      	ldrb	r3, [r1, r0]
   10278:	2b00      	cmp	r3, #0
   1027a:	f000 8098 	beq.w	103ae <mayfly_run+0x13a>
{
   1027e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   10282:	4b4c      	ldr	r3, [pc, #304]	; (103b4 <mayfly_run+0x140>)
   10284:	f04f 0b3c 	mov.w	fp, #60	; 0x3c
{
   10288:	b087      	sub	sp, #28
		return;
	}
	mfp[callee_id] = 0U;
   1028a:	2200      	movs	r2, #0
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   1028c:	fb0b 3b00 	mla	fp, fp, r0, r3
	mfp[callee_id] = 0U;
   10290:	540a      	strb	r2, [r1, r0]

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
	while (caller_id--) {
   10292:	eb00 0740 	add.w	r7, r0, r0, lsl #1
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   10296:	f10b 0104 	add.w	r1, fp, #4
	uint8_t enable = 0U;
   1029a:	9203      	str	r2, [sp, #12]
   1029c:	eb03 1707 	add.w	r7, r3, r7, lsl #4
	uint8_t disable = 0U;
   102a0:	9201      	str	r2, [sp, #4]
	while (caller_id--) {
   102a2:	f04f 0903 	mov.w	r9, #3
   102a6:	4688      	mov	r8, r1
   102a8:	9002      	str	r0, [sp, #8]
		memq_link_t *link;
		struct mayfly *m = 0;
   102aa:	2300      	movs	r3, #0

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
   102ac:	e9d7 0109 	ldrd	r0, r1, [r7, #36]	; 0x24
   102b0:	aa05      	add	r2, sp, #20
		struct mayfly *m = 0;
   102b2:	9305      	str	r3, [sp, #20]
		link = memq_peek(mft[callee_id][caller_id].head,
   102b4:	f7ff ff1e 	bl	100f4 <memq_peek>
				 mft[callee_id][caller_id].tail,
				 (void **)&m);
		while (link) {
   102b8:	f107 0624 	add.w	r6, r7, #36	; 0x24
   102bc:	4683      	mov	fp, r0
   102be:	2800      	cmp	r0, #0
   102c0:	d034      	beq.n	1032c <mayfly_run+0xb8>
#if defined(MAYFLY_UT)
			_state = 0U;
#endif /* MAYFLY_UT */

			/* execute work if ready */
			state = (m->_req - m->_ack) & 0x03;
   102c2:	9c05      	ldr	r4, [sp, #20]
   102c4:	7825      	ldrb	r5, [r4, #0]
   102c6:	7863      	ldrb	r3, [r4, #1]
   102c8:	1aed      	subs	r5, r5, r3
   102ca:	f005 0503 	and.w	r5, r5, #3
			if (state == 1U) {
   102ce:	2d01      	cmp	r5, #1
   102d0:	d106      	bne.n	102e0 <mayfly_run+0x6c>
#if defined(MAYFLY_UT)
				_state = 1U;
#endif /* MAYFLY_UT */

				/* mark mayfly as ran */
				m->_ack--;
   102d2:	3b01      	subs	r3, #1
   102d4:	7063      	strb	r3, [r4, #1]

				/* call the mayfly function */
				m->fp(m->param);
   102d6:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
   102da:	4798      	blx	r3
   102dc:	9c05      	ldr	r4, [sp, #20]
   102de:	7863      	ldrb	r3, [r4, #1]
	req = m->_req;
   102e0:	f894 c000 	ldrb.w	ip, [r4]
   102e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
	if (((req - m->_ack) & 0x03) != 1U) {
   102e6:	ebac 0303 	sub.w	r3, ip, r3
   102ea:	f003 0303 	and.w	r3, r3, #3
   102ee:	2b01      	cmp	r3, #1
		memq_dequeue(mft[callee_id][caller_id].tail,
   102f0:	f04f 0200 	mov.w	r2, #0
   102f4:	4631      	mov	r1, r6
	req = m->_req;
   102f6:	fa5f fa8c 	uxtb.w	sl, ip
	if (((req - m->_ack) & 0x03) != 1U) {
   102fa:	d00d      	beq.n	10318 <mayfly_run+0xa4>
		memq_dequeue(mft[callee_id][caller_id].tail,
   102fc:	f7ff ff02 	bl	10104 <memq_dequeue>
		ack = m->_ack;
   10300:	7862      	ldrb	r2, [r4, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
   10302:	7823      	ldrb	r3, [r4, #0]
		m->_link = link;
   10304:	f8c4 b004 	str.w	fp, [r4, #4]
		if (((m->_req - ack) & 0x03) == 1U) {
   10308:	1a9b      	subs	r3, r3, r2
   1030a:	f003 0303 	and.w	r3, r3, #3
   1030e:	2b01      	cmp	r3, #1
		m->_ack = req;
   10310:	f884 a001 	strb.w	sl, [r4, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
   10314:	d044      	beq.n	103a0 <mayfly_run+0x12c>
   10316:	6ab8      	ldr	r0, [r7, #40]	; 0x28

			/* dequeue if not re-pended */
			dequeue(callee_id, caller_id, link, m);

			/* fetch next mayfly in callee queue, if any */
			link = memq_peek(mft[callee_id][caller_id].head,
   10318:	4601      	mov	r1, r0
   1031a:	aa05      	add	r2, sp, #20
   1031c:	6a78      	ldr	r0, [r7, #36]	; 0x24
   1031e:	f7ff fee9 	bl	100f4 <memq_peek>
 */
#if defined(CONFIG_BT_MAYFLY_YIELD_AFTER_CALL)
			/* yield out of mayfly_run if a mayfly function was
			 * called.
			 */
			if (state == 1U) {
   10322:	2d01      	cmp	r5, #1
			link = memq_peek(mft[callee_id][caller_id].head,
   10324:	4683      	mov	fp, r0
			if (state == 1U) {
   10326:	d029      	beq.n	1037c <mayfly_run+0x108>
		while (link) {
   10328:	2800      	cmp	r0, #0
   1032a:	d1ca      	bne.n	102c2 <mayfly_run+0x4e>
				}
			}
#endif
		}

		if (mft[callee_id][caller_id].disable_req !=
   1032c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
   10330:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
   10334:	429a      	cmp	r2, r3
   10336:	d003      	beq.n	10340 <mayfly_run+0xcc>
		    mft[callee_id][caller_id].disable_ack) {
			disable = 1U;

			mft[callee_id][caller_id].disable_ack =
   10338:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			disable = 1U;
   1033c:	2301      	movs	r3, #1
   1033e:	9301      	str	r3, [sp, #4]
				mft[callee_id][caller_id].disable_req;
		}

		if (mft[callee_id][caller_id].enable_req !=
   10340:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   10344:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
   10348:	429a      	cmp	r2, r3
   1034a:	d003      	beq.n	10354 <mayfly_run+0xe0>
		    mft[callee_id][caller_id].enable_ack) {
			enable = 1U;

			mft[callee_id][caller_id].enable_ack =
   1034c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			enable = 1U;
   10350:	2301      	movs	r3, #1
   10352:	9303      	str	r3, [sp, #12]
	while (caller_id--) {
   10354:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   10358:	fa5f f989 	uxtb.w	r9, r9
   1035c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   10360:	f1a7 070c 	sub.w	r7, r7, #12
   10364:	d1a1      	bne.n	102aa <mayfly_run+0x36>
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
   10366:	e9dd 3a01 	ldrd	r3, sl, [sp, #4]
   1036a:	b1b3      	cbz	r3, 1039a <mayfly_run+0x126>
   1036c:	9b03      	ldr	r3, [sp, #12]
   1036e:	b9a3      	cbnz	r3, 1039a <mayfly_run+0x126>
		mayfly_enable_cb(callee_id, callee_id, 0);
   10370:	461a      	mov	r2, r3
   10372:	4651      	mov	r1, sl
   10374:	4650      	mov	r0, sl
   10376:	f00b f911 	bl	1b59c <mayfly_enable_cb>
   1037a:	e00e      	b.n	1039a <mayfly_run+0x126>
				if (caller_id || link) {
   1037c:	f1b9 0f00 	cmp.w	r9, #0
   10380:	d101      	bne.n	10386 <mayfly_run+0x112>
   10382:	2800      	cmp	r0, #0
   10384:	d0d2      	beq.n	1032c <mayfly_run+0xb8>
   10386:	f8dd a008 	ldr.w	sl, [sp, #8]
					mfp[callee_id] = 1U;
   1038a:	4a09      	ldr	r2, [pc, #36]	; (103b0 <mayfly_run+0x13c>)
   1038c:	2301      	movs	r3, #1
					mayfly_pend(callee_id, callee_id);
   1038e:	4651      	mov	r1, sl
   10390:	4650      	mov	r0, sl
					mfp[callee_id] = 1U;
   10392:	f802 300a 	strb.w	r3, [r2, sl]
					mayfly_pend(callee_id, callee_id);
   10396:	f00b f95f 	bl	1b658 <mayfly_pend>
	}
}
   1039a:	b007      	add	sp, #28
   1039c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			m->_ack = ack;
   103a0:	7062      	strb	r2, [r4, #1]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   103a2:	4621      	mov	r1, r4
   103a4:	4658      	mov	r0, fp
   103a6:	4642      	mov	r2, r8
   103a8:	f7ff fe9c 	bl	100e4 <memq_enqueue>
   103ac:	e7b3      	b.n	10316 <mayfly_run+0xa2>
   103ae:	4770      	bx	lr
   103b0:	2000219c 	.word	0x2000219c
   103b4:	200021a0 	.word	0x200021a0

000103b8 <util_ones_count_get>:
 */
uint8_t util_ones_count_get(uint8_t *octets, uint8_t octets_len)
{
	uint8_t one_count = 0U;

	while (octets_len--) {
   103b8:	b1a1      	cbz	r1, 103e4 <util_ones_count_get+0x2c>
   103ba:	1e4b      	subs	r3, r1, #1
   103bc:	b2db      	uxtb	r3, r3
{
   103be:	b410      	push	{r4}
   103c0:	1e41      	subs	r1, r0, #1
   103c2:	18c4      	adds	r4, r0, r3
	uint8_t one_count = 0U;
   103c4:	2000      	movs	r0, #0
		uint8_t bite;

		bite = *octets;
   103c6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		while (bite) {
   103ca:	b13b      	cbz	r3, 103dc <util_ones_count_get+0x24>
			bite &= (bite - 1);
   103cc:	b25b      	sxtb	r3, r3
   103ce:	1e5a      	subs	r2, r3, #1
   103d0:	4013      	ands	r3, r2
			one_count++;
   103d2:	3001      	adds	r0, #1
		while (bite) {
   103d4:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
			one_count++;
   103d8:	b2c0      	uxtb	r0, r0
		while (bite) {
   103da:	d1f7      	bne.n	103cc <util_ones_count_get+0x14>
	while (octets_len--) {
   103dc:	42a1      	cmp	r1, r4
   103de:	d1f2      	bne.n	103c6 <util_ones_count_get+0xe>
		}
		octets++;
	}

	return one_count;
}
   103e0:	bc10      	pop	{r4}
   103e2:	4770      	bx	lr
	uint8_t one_count = 0U;
   103e4:	4608      	mov	r0, r1
}
   103e6:	4770      	bx	lr

000103e8 <util_aa_le32>:
 * - It shall have at least three ones in the least significant 8 bits.
 * - It shall have no more than eleven transitions in the least significant 16
 *   bits.
 */
int util_aa_le32(uint8_t *dst)
{
   103e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	/* It shall not be the advertising channel packets Access Address.
	 * It shall not be a sequence that differs from the advertising channel
	 * packets Access Address by only one bit.
	 */
	adv_aa_check = aa ^ PDU_AC_ACCESS_ADDR;
   103ec:	4dad      	ldr	r5, [pc, #692]	; (106a4 <util_aa_le32+0x2bc>)
{
   103ee:	b083      	sub	sp, #12
   103f0:	4604      	mov	r4, r0
   103f2:	2703      	movs	r7, #3
	consecutive_cnt = 1U;
   103f4:	2601      	movs	r6, #1
	lll_csrand_get(dst, sizeof(uint32_t));
   103f6:	2104      	movs	r1, #4
   103f8:	4620      	mov	r0, r4
   103fa:	f009 f983 	bl	19704 <lll_csrand_get>
	return ((uint16_t)src[1] << 8) | src[0];
   103fe:	7863      	ldrb	r3, [r4, #1]
   10400:	78e2      	ldrb	r2, [r4, #3]
   10402:	f894 c002 	ldrb.w	ip, [r4, #2]
   10406:	7820      	ldrb	r0, [r4, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   10408:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8
   1040c:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
	transitions = 0U;
   10410:	f04f 0800 	mov.w	r8, #0
   10414:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
	ones_count_lsb8 = 0U;
   10418:	46c3      	mov	fp, r8
	consecutive_bit = (aa >> bit_idx) & 0x01;
   1041a:	ea4f 3cdc 	mov.w	ip, ip, lsr #15
	transitions_lsb16 = 0U;
   1041e:	46c1      	mov	r9, r8
	consecutive_bit = (aa >> bit_idx) & 0x01;
   10420:	231e      	movs	r3, #30
	consecutive_cnt = 1U;
   10422:	f04f 0a01 	mov.w	sl, #1
   10426:	e01a      	b.n	1045e <util_aa_le32+0x76>
			transitions++;
   10428:	f108 0101 	add.w	r1, r8, #1
			if (bit_idx < 15) {
   1042c:	2b0e      	cmp	r3, #14
			transitions++;
   1042e:	b2c9      	uxtb	r1, r1
			if (bit_idx < 15) {
   10430:	fa5f fc83 	uxtb.w	ip, r3
   10434:	f240 808a 	bls.w	1054c <util_aa_le32+0x164>
		if ((consecutive_cnt > 6) ||
   10438:	b3ca      	cbz	r2, 104ae <util_aa_le32+0xc6>
   1043a:	4694      	mov	ip, r2
   1043c:	46ce      	mov	lr, r9
		    ((consecutive_cnt < 6) &&
   1043e:	2b1c      	cmp	r3, #28
   10440:	f240 811d 	bls.w	1067e <util_aa_le32+0x296>
		     (((bit_idx < 29) && (transitions < 1)) ||
   10444:	2b1b      	cmp	r3, #27
   10446:	f240 80f0 	bls.w	1062a <util_aa_le32+0x242>
		if ((transitions > 24) ||
   1044a:	2919      	cmp	r1, #25
   1044c:	d039      	beq.n	104c2 <util_aa_le32+0xda>
					   (ones_count_lsb8 < 3)))) ||
   1044e:	4688      	mov	r8, r1
   10450:	4692      	mov	sl, r2
		    (transitions_lsb16 > 11) ||
   10452:	f1be 0f0c 	cmp.w	lr, #12
					   (ones_count_lsb8 < 3)))) ||
   10456:	46f1      	mov	r9, lr
		    (transitions_lsb16 > 11) ||
   10458:	d033      	beq.n	104c2 <util_aa_le32+0xda>
	while (bit_idx--) {
   1045a:	3b01      	subs	r3, #1
   1045c:	d339      	bcc.n	104d2 <util_aa_le32+0xea>
		bit = (aa >> bit_idx) & 0x01;
   1045e:	fa20 f203 	lsr.w	r2, r0, r3
   10462:	f002 0201 	and.w	r2, r2, #1
		if (bit == consecutive_bit) {
   10466:	4562      	cmp	r2, ip
   10468:	d1de      	bne.n	10428 <util_aa_le32+0x40>
			consecutive_cnt++;
   1046a:	f10a 0201 	add.w	r2, sl, #1
		if ((bit_idx < 8) && consecutive_bit) {
   1046e:	2b07      	cmp	r3, #7
			consecutive_cnt++;
   10470:	b2d2      	uxtb	r2, r2
		if ((bit_idx < 8) && consecutive_bit) {
   10472:	f240 80c4 	bls.w	105fe <util_aa_le32+0x216>
		if ((consecutive_cnt > 6) ||
   10476:	2a06      	cmp	r2, #6
   10478:	d977      	bls.n	1056a <util_aa_le32+0x182>
			if (consecutive_bit) {
   1047a:	fa06 f203 	lsl.w	r2, r6, r3
   1047e:	f1bc 0f00 	cmp.w	ip, #0
   10482:	d051      	beq.n	10528 <util_aa_le32+0x140>
				aa &= ~BIT(bit_idx);
   10484:	ea20 0002 	bic.w	r0, r0, r2
   10488:	46ce      	mov	lr, r9
				consecutive_bit = 0U;
   1048a:	f04f 0c00 	mov.w	ip, #0
				transitions++;
   1048e:	f108 0101 	add.w	r1, r8, #1
			if (bit_idx < 15) {
   10492:	2b0e      	cmp	r3, #14
				transitions++;
   10494:	b2c9      	uxtb	r1, r1
				consecutive_cnt = 1U;
   10496:	bf88      	it	hi
   10498:	2201      	movhi	r2, #1
			if (bit_idx < 15) {
   1049a:	d8d6      	bhi.n	1044a <util_aa_le32+0x62>
				if (transitions_lsb16 !=
   1049c:	45f1      	cmp	r9, lr
   1049e:	f000 80a1 	beq.w	105e4 <util_aa_le32+0x1fc>
		if ((transitions > 24) ||
   104a2:	2919      	cmp	r1, #25
   104a4:	d00d      	beq.n	104c2 <util_aa_le32+0xda>
   104a6:	4688      	mov	r8, r1
				consecutive_cnt = 1U;
   104a8:	f04f 0a01 	mov.w	sl, #1
   104ac:	e7d5      	b.n	1045a <util_aa_le32+0x72>
		if ((consecutive_cnt > 6) ||
   104ae:	46ce      	mov	lr, r9
			consecutive_cnt = 1U;
   104b0:	2201      	movs	r2, #1
		    (!consecutive_bit && (((bit_idx < 6) &&
   104b2:	2b05      	cmp	r3, #5
   104b4:	d975      	bls.n	105a2 <util_aa_le32+0x1ba>
					   (ones_count_lsb8 < 3)))) ||
   104b6:	2a06      	cmp	r2, #6
   104b8:	d154      	bne.n	10564 <util_aa_le32+0x17c>
		if ((transitions > 24) ||
   104ba:	2919      	cmp	r1, #25
					   (ones_count_lsb8 < 3)))) ||
   104bc:	f04f 0c00 	mov.w	ip, #0
		if ((transitions > 24) ||
   104c0:	d1c5      	bne.n	1044e <util_aa_le32+0x66>
			if (consecutive_bit) {
   104c2:	3301      	adds	r3, #1
   104c4:	fa06 f303 	lsl.w	r3, r6, r3
   104c8:	f1bc 0f00 	cmp.w	ip, #0
   104cc:	d053      	beq.n	10576 <util_aa_le32+0x18e>
				aa &= ~(BIT(bit_idx + 1) - 1);
   104ce:	425b      	negs	r3, r3
   104d0:	4018      	ands	r0, r3
	adv_aa_check = aa ^ PDU_AC_ACCESS_ADDR;
   104d2:	ea80 0305 	eor.w	r3, r0, r5
   104d6:	9301      	str	r3, [sp, #4]
	while (octets_len--) {
   104d8:	f10d 0c04 	add.w	ip, sp, #4
   104dc:	f10d 0e08 	add.w	lr, sp, #8
	uint8_t one_count = 0U;
   104e0:	2200      	movs	r2, #0
		bite = *octets;
   104e2:	f81c 3b01 	ldrb.w	r3, [ip], #1
		while (bite) {
   104e6:	b13b      	cbz	r3, 104f8 <util_aa_le32+0x110>
			bite &= (bite - 1);
   104e8:	b25b      	sxtb	r3, r3
   104ea:	1e59      	subs	r1, r3, #1
   104ec:	400b      	ands	r3, r1
			one_count++;
   104ee:	3201      	adds	r2, #1
		while (bite) {
   104f0:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
			one_count++;
   104f4:	b2d2      	uxtb	r2, r2
		while (bite) {
   104f6:	d1f7      	bne.n	104e8 <util_aa_le32+0x100>
	while (octets_len--) {
   104f8:	45f4      	cmp	ip, lr
   104fa:	d1f2      	bne.n	104e2 <util_aa_le32+0xfa>
	if (util_ones_count_get((uint8_t *)&adv_aa_check,
   104fc:	2a01      	cmp	r2, #1
   104fe:	d909      	bls.n	10514 <util_aa_le32+0x12c>
				sizeof(adv_aa_check)) <= 1) {
		goto again;
	}

	/* It shall not have all four octets equal. */
	if (!((aa & 0xFFFF) ^ (aa >> 16)) &&
   10500:	b283      	uxth	r3, r0
   10502:	ebb3 4f10 	cmp.w	r3, r0, lsr #16
   10506:	ea4f 4210 	mov.w	r2, r0, lsr #16
   1050a:	d137      	bne.n	1057c <util_aa_le32+0x194>
	    !((aa & 0xFF) ^ (aa >> 24))) {
   1050c:	b2c3      	uxtb	r3, r0
	if (!((aa & 0xFFFF) ^ (aa >> 16)) &&
   1050e:	ebb3 6f10 	cmp.w	r3, r0, lsr #24
   10512:	d133      	bne.n	1057c <util_aa_le32+0x194>
	if (!retry) {
   10514:	3f01      	subs	r7, #1
   10516:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
   1051a:	f47f af6c 	bne.w	103f6 <util_aa_le32+0xe>
		return -EFAULT;
   1051e:	f06f 000d 	mvn.w	r0, #13
	}

	sys_put_le32(aa, dst);

	return 0;
}
   10522:	b003      	add	sp, #12
   10524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				aa |= BIT(bit_idx);
   10528:	4310      	orrs	r0, r2
   1052a:	4641      	mov	r1, r8
   1052c:	46ce      	mov	lr, r9
				consecutive_bit = 1U;
   1052e:	f04f 0c01 	mov.w	ip, #1
			if (transitions != transitions_prev) {
   10532:	4588      	cmp	r8, r1
   10534:	d0ab      	beq.n	1048e <util_aa_le32+0xa6>
			if (bit_idx < 15) {
   10536:	2b0e      	cmp	r3, #14
   10538:	d88b      	bhi.n	10452 <util_aa_le32+0x6a>
				if (transitions_lsb16 !=
   1053a:	45ce      	cmp	lr, r9
   1053c:	d18d      	bne.n	1045a <util_aa_le32+0x72>
   1053e:	4641      	mov	r1, r8
					transitions_lsb16++;
   10540:	f10e 0e01 	add.w	lr, lr, #1
   10544:	fa5f fe8e 	uxtb.w	lr, lr
   10548:	4652      	mov	r2, sl
   1054a:	e77e      	b.n	1044a <util_aa_le32+0x62>
				transitions_lsb16++;
   1054c:	f109 0e01 	add.w	lr, r9, #1
		if ((bit_idx < 8) && consecutive_bit) {
   10550:	f1bc 0f07 	cmp.w	ip, #7
				transitions_lsb16++;
   10554:	fa5f fe8e 	uxtb.w	lr, lr
		if ((bit_idx < 8) && consecutive_bit) {
   10558:	f240 8094 	bls.w	10684 <util_aa_le32+0x29c>
		if ((consecutive_cnt > 6) ||
   1055c:	2a00      	cmp	r2, #0
   1055e:	f040 809a 	bne.w	10696 <util_aa_le32+0x2ae>
			consecutive_cnt = 1U;
   10562:	2201      	movs	r2, #1
   10564:	f04f 0c00 	mov.w	ip, #0
   10568:	e769      	b.n	1043e <util_aa_le32+0x56>
		if ((consecutive_cnt > 6) ||
   1056a:	f1bc 0f00 	cmp.w	ip, #0
   1056e:	d110      	bne.n	10592 <util_aa_le32+0x1aa>
   10570:	4641      	mov	r1, r8
   10572:	46ce      	mov	lr, r9
   10574:	e79f      	b.n	104b6 <util_aa_le32+0xce>
				aa |= (BIT(bit_idx + 1) - 1);
   10576:	3b01      	subs	r3, #1
   10578:	4318      	orrs	r0, r3
   1057a:	e7aa      	b.n	104d2 <util_aa_le32+0xea>
	dst[1] = val >> 8;
   1057c:	f3c0 2107 	ubfx	r1, r0, #8, #8
   10580:	0a13      	lsrs	r3, r2, #8
	dst[0] = val;
   10582:	7020      	strb	r0, [r4, #0]
	return 0;
   10584:	2000      	movs	r0, #0
	dst[1] = val >> 8;
   10586:	7061      	strb	r1, [r4, #1]
	dst[0] = val;
   10588:	70a2      	strb	r2, [r4, #2]
	dst[1] = val >> 8;
   1058a:	70e3      	strb	r3, [r4, #3]
}
   1058c:	b003      	add	sp, #12
   1058e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					   (ones_count_lsb8 < 3)))) ||
   10592:	2a06      	cmp	r2, #6
   10594:	d102      	bne.n	1059c <util_aa_le32+0x1b4>
   10596:	4641      	mov	r1, r8
   10598:	46ce      	mov	lr, r9
   1059a:	e758      	b.n	1044e <util_aa_le32+0x66>
   1059c:	4641      	mov	r1, r8
   1059e:	46ce      	mov	lr, r9
   105a0:	e74d      	b.n	1043e <util_aa_le32+0x56>
		    (!consecutive_bit && (((bit_idx < 6) &&
   105a2:	f1bb 0f00 	cmp.w	fp, #0
   105a6:	d00c      	beq.n	105c2 <util_aa_le32+0x1da>
					   (ones_count_lsb8 < 1)) ||
   105a8:	f1bc 0f04 	cmp.w	ip, #4
   105ac:	d883      	bhi.n	104b6 <util_aa_le32+0xce>
					  ((bit_idx < 5) &&
   105ae:	f1bb 0f01 	cmp.w	fp, #1
   105b2:	d906      	bls.n	105c2 <util_aa_le32+0x1da>
					   (ones_count_lsb8 < 2)) ||
   105b4:	f1bc 0f03 	cmp.w	ip, #3
   105b8:	f63f af7d 	bhi.w	104b6 <util_aa_le32+0xce>
					  ((bit_idx < 4) &&
   105bc:	f1bb 0f02 	cmp.w	fp, #2
   105c0:	d809      	bhi.n	105d6 <util_aa_le32+0x1ee>
				aa |= BIT(bit_idx);
   105c2:	fa06 f203 	lsl.w	r2, r6, r3
   105c6:	4310      	orrs	r0, r2
					ones_count_lsb8++;
   105c8:	f10b 0b01 	add.w	fp, fp, #1
   105cc:	fa5f fb8b 	uxtb.w	fp, fp
				consecutive_bit = 1U;
   105d0:	f04f 0c01 	mov.w	ip, #1
   105d4:	e7ad      	b.n	10532 <util_aa_le32+0x14a>
					   (ones_count_lsb8 < 3)))) ||
   105d6:	2a06      	cmp	r2, #6
   105d8:	f43f af6f 	beq.w	104ba <util_aa_le32+0xd2>
		     (((bit_idx < 29) && (transitions < 1)) ||
   105dc:	b129      	cbz	r1, 105ea <util_aa_le32+0x202>
   105de:	f04f 0c00 	mov.w	ip, #0
   105e2:	e72f      	b.n	10444 <util_aa_le32+0x5c>
				consecutive_cnt = 1U;
   105e4:	f04f 0a01 	mov.w	sl, #1
   105e8:	e7aa      	b.n	10540 <util_aa_le32+0x158>
			if (consecutive_bit) {
   105ea:	fa06 f203 	lsl.w	r2, r6, r3
				if (bit_idx < 8) {
   105ee:	2b07      	cmp	r3, #7
				aa |= BIT(bit_idx);
   105f0:	ea40 0002 	orr.w	r0, r0, r2
				consecutive_bit = 1U;
   105f4:	bf88      	it	hi
   105f6:	f04f 0c01 	movhi.w	ip, #1
				if (bit_idx < 8) {
   105fa:	d89a      	bhi.n	10532 <util_aa_le32+0x14a>
   105fc:	e7e4      	b.n	105c8 <util_aa_le32+0x1e0>
		if ((bit_idx < 8) && consecutive_bit) {
   105fe:	f1bc 0f00 	cmp.w	ip, #0
   10602:	d02a      	beq.n	1065a <util_aa_le32+0x272>
			ones_count_lsb8++;
   10604:	f10b 0b01 	add.w	fp, fp, #1
		if ((consecutive_cnt > 6) ||
   10608:	2a06      	cmp	r2, #6
			ones_count_lsb8++;
   1060a:	fa5f fb8b 	uxtb.w	fp, fp
		if ((consecutive_cnt > 6) ||
   1060e:	d91d      	bls.n	1064c <util_aa_le32+0x264>
				aa &= ~BIT(bit_idx);
   10610:	fa06 f203 	lsl.w	r2, r6, r3
   10614:	ea20 0002 	bic.w	r0, r0, r2
   10618:	4641      	mov	r1, r8
   1061a:	46ce      	mov	lr, r9
					ones_count_lsb8--;
   1061c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   10620:	fa5f fb8b 	uxtb.w	fp, fp
				consecutive_bit = 0U;
   10624:	f04f 0c00 	mov.w	ip, #0
   10628:	e783      	b.n	10532 <util_aa_le32+0x14a>
		      ((bit_idx < 28) && (transitions < 2))))) {
   1062a:	2901      	cmp	r1, #1
   1062c:	f63f af0d 	bhi.w	1044a <util_aa_le32+0x62>
			if (consecutive_bit) {
   10630:	fa06 f203 	lsl.w	r2, r6, r3
   10634:	f1bc 0f00 	cmp.w	ip, #0
   10638:	d0d9      	beq.n	105ee <util_aa_le32+0x206>
				if (bit_idx < 8) {
   1063a:	2b07      	cmp	r3, #7
				aa &= ~BIT(bit_idx);
   1063c:	ea20 0002 	bic.w	r0, r0, r2
				consecutive_bit = 0U;
   10640:	bf88      	it	hi
   10642:	f04f 0c00 	movhi.w	ip, #0
				if (bit_idx < 8) {
   10646:	f63f af74 	bhi.w	10532 <util_aa_le32+0x14a>
   1064a:	e7e7      	b.n	1061c <util_aa_le32+0x234>
					   (ones_count_lsb8 < 3)))) ||
   1064c:	d0a3      	beq.n	10596 <util_aa_le32+0x1ae>
		     (((bit_idx < 29) && (transitions < 1)) ||
   1064e:	f1b8 0f00 	cmp.w	r8, #0
   10652:	d00a      	beq.n	1066a <util_aa_le32+0x282>
   10654:	4641      	mov	r1, r8
   10656:	46ce      	mov	lr, r9
   10658:	e6f4      	b.n	10444 <util_aa_le32+0x5c>
		if ((consecutive_cnt > 6) ||
   1065a:	2a06      	cmp	r2, #6
   1065c:	d90a      	bls.n	10674 <util_aa_le32+0x28c>
				aa |= BIT(bit_idx);
   1065e:	fa06 f203 	lsl.w	r2, r6, r3
   10662:	4310      	orrs	r0, r2
   10664:	4641      	mov	r1, r8
   10666:	46ce      	mov	lr, r9
   10668:	e7ae      	b.n	105c8 <util_aa_le32+0x1e0>
			if (consecutive_bit) {
   1066a:	fa06 f203 	lsl.w	r2, r6, r3
		     (((bit_idx < 29) && (transitions < 1)) ||
   1066e:	4641      	mov	r1, r8
   10670:	46ce      	mov	lr, r9
   10672:	e7e2      	b.n	1063a <util_aa_le32+0x252>
		if ((consecutive_cnt > 6) ||
   10674:	4641      	mov	r1, r8
   10676:	46ce      	mov	lr, r9
   10678:	fa5f fc83 	uxtb.w	ip, r3
   1067c:	e719      	b.n	104b2 <util_aa_le32+0xca>
		     (((bit_idx < 29) && (transitions < 1)) ||
   1067e:	2900      	cmp	r1, #0
   10680:	d0d6      	beq.n	10630 <util_aa_le32+0x248>
   10682:	e6df      	b.n	10444 <util_aa_le32+0x5c>
		if ((bit_idx < 8) && consecutive_bit) {
   10684:	2a00      	cmp	r2, #0
   10686:	f43f af13 	beq.w	104b0 <util_aa_le32+0xc8>
			ones_count_lsb8++;
   1068a:	f10b 0b01 	add.w	fp, fp, #1
   1068e:	fa5f fb8b 	uxtb.w	fp, fp
   10692:	4694      	mov	ip, r2
   10694:	e6d6      	b.n	10444 <util_aa_le32+0x5c>
		      ((bit_idx < 28) && (transitions < 2))))) {
   10696:	2901      	cmp	r1, #1
   10698:	d001      	beq.n	1069e <util_aa_le32+0x2b6>
   1069a:	4694      	mov	ip, r2
   1069c:	e6d5      	b.n	1044a <util_aa_le32+0x62>
			if (consecutive_bit) {
   1069e:	fa01 f203 	lsl.w	r2, r1, r3
   106a2:	e7ca      	b.n	1063a <util_aa_le32+0x252>
   106a4:	8e89bed6 	.word	0x8e89bed6

000106a8 <ticker_worker>:
 *
 * @param param Pointer to ticker instance
 *
 */
void ticker_worker(void *param)
{
   106a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   106ac:	b08d      	sub	sp, #52	; 0x34
   106ae:	4602      	mov	r2, r0
   106b0:	9002      	str	r0, [sp, #8]
	uint32_t ticks_expired;
	uint8_t ticker_id_head;

	/* Defer worker if job running */
	instance->worker_trigger = 1U;
	if (instance->job_guard) {
   106b2:	7f80      	ldrb	r0, [r0, #30]
   106b4:	9008      	str	r0, [sp, #32]
	instance->worker_trigger = 1U;
   106b6:	2301      	movs	r3, #1
   106b8:	77d3      	strb	r3, [r2, #31]
	if (instance->job_guard) {
   106ba:	2800      	cmp	r0, #0
   106bc:	f040 80a2 	bne.w	10804 <ticker_worker+0x15c>
		return;
	}

	/* If no tickers queued (active), do nothing */
	if (instance->ticker_id_head == TICKER_NULL) {
   106c0:	7f53      	ldrb	r3, [r2, #29]
   106c2:	2bff      	cmp	r3, #255	; 0xff
   106c4:	f000 809d 	beq.w	10802 <ticker_worker+0x15a>
		instance->worker_trigger = 0U;
		return;
	}

	/* Get ticks elapsed since last job execution */
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
   106c8:	f00a f9ca 	bl	1aa60 <cntr_cnt_get>
 * @param ticks_now Highest tick count (now)
 * @param ticks_old Tick count to subtract from ticks_now
 */
uint32_t ticker_ticks_diff_get(uint32_t ticks_now, uint32_t ticks_old)
{
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   106cc:	9902      	ldr	r1, [sp, #8]
   106ce:	694a      	ldr	r2, [r1, #20]
	if (instance->ticker_id_slot_previous != TICKER_NULL) {
   106d0:	7f0b      	ldrb	r3, [r1, #28]
	ticker_id_head = instance->ticker_id_head;
   106d2:	f891 b01d 	ldrb.w	fp, [r1, #29]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   106d6:	1a80      	subs	r0, r0, r2
	if (instance->ticker_id_slot_previous != TICKER_NULL) {
   106d8:	2bff      	cmp	r3, #255	; 0xff
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   106da:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
	if (instance->ticker_id_slot_previous != TICKER_NULL) {
   106de:	f000 8120 	beq.w	10922 <ticker_worker+0x27a>
		if (instance->ticks_slot_previous > ticks_elapsed) {
   106e2:	698b      	ldr	r3, [r1, #24]
	uint8_t slot_reserved = 0;
   106e4:	42bb      	cmp	r3, r7
   106e6:	bf94      	ite	ls
   106e8:	2300      	movls	r3, #0
   106ea:	2301      	movhi	r3, #1
   106ec:	9304      	str	r3, [sp, #16]
	node = &instance->nodes[0];
   106ee:	9b02      	ldr	r3, [sp, #8]
	while (ticker_id_head != TICKER_NULL) {
   106f0:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
	node = &instance->nodes[0];
   106f4:	f8d3 8000 	ldr.w	r8, [r3]
	ticks_expired = 0U;
   106f8:	f04f 0300 	mov.w	r3, #0
	while (ticker_id_head != TICKER_NULL) {
   106fc:	f000 8114 	beq.w	10928 <ticker_worker+0x280>
			must_expire_skip = 1U;
   10700:	469a      	mov	sl, r3
		ticker = &node[ticker_id_head];
   10702:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
   10706:	eb08 140b 	add.w	r4, r8, fp, lsl #4
   1070a:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
		ticks_to_expire = ticker->ticks_to_expire;
   1070e:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
   10710:	42bb      	cmp	r3, r7
   10712:	d853      	bhi.n	107bc <ticker_worker+0x114>
		if (ticker->ticks_slot != 0U &&
   10714:	f8d4 c018 	ldr.w	ip, [r4, #24]
		ticker_id_head = ticker->next;
   10718:	f818 b00b 	ldrb.w	fp, [r8, fp]
		ticks_elapsed -= ticks_to_expire;
   1071c:	1aff      	subs	r7, r7, r3
		ticks_expired += ticks_to_expire;
   1071e:	449a      	add	sl, r3
		if (ticker->ticks_slot != 0U &&
   10720:	f1bc 0f00 	cmp.w	ip, #0
   10724:	d076      	beq.n	10814 <ticker_worker+0x16c>
   10726:	9b04      	ldr	r3, [sp, #16]
   10728:	2b00      	cmp	r3, #0
   1072a:	d079      	beq.n	10820 <ticker_worker+0x178>
   1072c:	8be3      	ldrh	r3, [r4, #30]
   1072e:	9303      	str	r3, [sp, #12]
			struct ticker_ext *ext_data = ticker->ext_data;
   10730:	6aa3      	ldr	r3, [r4, #40]	; 0x28
			if (ext_data &&
   10732:	b153      	cbz	r3, 1074a <ticker_worker+0xa2>
   10734:	681a      	ldr	r2, [r3, #0]
   10736:	b132      	cbz	r2, 10746 <ticker_worker+0x9e>
			    ext_data->ticks_slot_window != 0U &&
   10738:	7a1a      	ldrb	r2, [r3, #8]
   1073a:	b922      	cbnz	r2, 10746 <ticker_worker+0x9e>
			    TICKER_RESCHEDULE_STATE_NONE &&
   1073c:	8ba2      	ldrh	r2, [r4, #28]
   1073e:	9903      	ldr	r1, [sp, #12]
   10740:	428a      	cmp	r2, r1
   10742:	f240 80ea 	bls.w	1091a <ticker_worker+0x272>
				ext_data->reschedule_state =
   10746:	2200      	movs	r2, #0
   10748:	721a      	strb	r2, [r3, #8]
			ticker->lazy_current++;
   1074a:	9a03      	ldr	r2, [sp, #12]
			if ((ticker->must_expire == 0U) ||
   1074c:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
			ticker->lazy_current++;
   10750:	3201      	adds	r2, #1
   10752:	b292      	uxth	r2, r2
   10754:	83e2      	strh	r2, [r4, #30]
			if ((ticker->must_expire == 0U) ||
   10756:	2900      	cmp	r1, #0
   10758:	d02d      	beq.n	107b6 <ticker_worker+0x10e>
   1075a:	8ba1      	ldrh	r1, [r4, #28]
   1075c:	4291      	cmp	r1, r2
   1075e:	d22a      	bcs.n	107b6 <ticker_worker+0x10e>
			    (ticker->lazy_periodic >= ticker->lazy_current) ||
   10760:	2b00      	cmp	r3, #0
   10762:	f000 80d8 	beq.w	10916 <ticker_worker+0x26e>
			    TICKER_RESCHEDULE_PENDING(ticker)) {
   10766:	7a1a      	ldrb	r2, [r3, #8]
   10768:	2a01      	cmp	r2, #1
   1076a:	d024      	beq.n	107b6 <ticker_worker+0x10e>
			must_expire_skip = 1U;
   1076c:	2501      	movs	r5, #1
			ticker->ext_data->ticks_drift = 0U;
   1076e:	2200      	movs	r2, #0
   10770:	605a      	str	r2, [r3, #4]
			ticker->ext_data->reschedule_state =
   10772:	721a      	strb	r2, [r3, #8]
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
   10774:	78a2      	ldrb	r2, [r4, #2]
   10776:	7863      	ldrb	r3, [r4, #1]
   10778:	1a9b      	subs	r3, r3, r2
   1077a:	b2db      	uxtb	r3, r3
   1077c:	2b01      	cmp	r3, #1
   1077e:	d11a      	bne.n	107b6 <ticker_worker+0x10e>
		if (ticker->timeout_func) {
   10780:	68e6      	ldr	r6, [r4, #12]
		ticker->ack--;
   10782:	3a01      	subs	r2, #1
   10784:	70a2      	strb	r2, [r4, #2]
		if (ticker->timeout_func) {
   10786:	b1b6      	cbz	r6, 107b6 <ticker_worker+0x10e>
					   ticks_expired -
   10788:	9b02      	ldr	r3, [sp, #8]
   1078a:	6962      	ldr	r2, [r4, #20]
   1078c:	6958      	ldr	r0, [r3, #20]
			ticker->timeout_func(ticks_at_expire,
   1078e:	6a61      	ldr	r1, [r4, #36]	; 0x24
   10790:	6923      	ldr	r3, [r4, #16]
					   ticks_expired -
   10792:	ebaa 0202 	sub.w	r2, sl, r2
   10796:	4410      	add	r0, r2
			ticks_at_expire = (instance->ticks_current +
   10798:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
   1079c:	2d00      	cmp	r5, #0
   1079e:	f040 80ad 	bne.w	108fc <ticker_worker+0x254>
   107a2:	8be2      	ldrh	r2, [r4, #30]
   107a4:	47b0      	blx	r6
				if (ticker->ticks_slot != 0U) {
   107a6:	69a3      	ldr	r3, [r4, #24]
				ticker->lazy_current = 0U;
   107a8:	83e5      	strh	r5, [r4, #30]
					slot_reserved = 1U;
   107aa:	2b00      	cmp	r3, #0
   107ac:	9b04      	ldr	r3, [sp, #16]
				ticker->force = 0U;
   107ae:	70e5      	strb	r5, [r4, #3]
					slot_reserved = 1U;
   107b0:	bf18      	it	ne
   107b2:	2301      	movne	r3, #1
   107b4:	9304      	str	r3, [sp, #16]
	while (ticker_id_head != TICKER_NULL) {
   107b6:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   107ba:	d1a2      	bne.n	10702 <ticker_worker+0x5a>
   107bc:	4650      	mov	r0, sl
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
   107be:	9a02      	ldr	r2, [sp, #8]
   107c0:	7ad3      	ldrb	r3, [r2, #11]
   107c2:	7a92      	ldrb	r2, [r2, #10]
   107c4:	429a      	cmp	r2, r3
   107c6:	d10c      	bne.n	107e2 <ticker_worker+0x13a>
	uint8_t idx = *ticks_elapsed_index + 1;
   107c8:	3201      	adds	r2, #1
   107ca:	b2d2      	uxtb	r2, r2
	if (idx == DOUBLE_BUFFER_SIZE) {
   107cc:	2a02      	cmp	r2, #2
   107ce:	bf18      	it	ne
   107d0:	4613      	movne	r3, r2
	*ticks_elapsed_index = idx;
   107d2:	9a02      	ldr	r2, [sp, #8]
   107d4:	bf18      	it	ne
   107d6:	9308      	strne	r3, [sp, #32]
   107d8:	4611      	mov	r1, r2
   107da:	9a08      	ldr	r2, [sp, #32]
   107dc:	72ca      	strb	r2, [r1, #11]
   107de:	bf08      	it	eq
   107e0:	2300      	moveq	r3, #0
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   107e2:	9902      	ldr	r1, [sp, #8]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   107e4:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   107e6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
	instance->worker_trigger = 0U;
   107ea:	2200      	movs	r2, #0
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   107ec:	60d8      	str	r0, [r3, #12]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   107ee:	46a4      	mov	ip, r4
	instance->worker_trigger = 0U;
   107f0:	77ca      	strb	r2, [r1, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   107f2:	460b      	mov	r3, r1
   107f4:	2201      	movs	r2, #1
   107f6:	2104      	movs	r1, #4
   107f8:	2003      	movs	r0, #3
}
   107fa:	b00d      	add	sp, #52	; 0x34
   107fc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   10800:	4760      	bx	ip
		instance->worker_trigger = 0U;
   10802:	77d0      	strb	r0, [r2, #31]
}
   10804:	b00d      	add	sp, #52	; 0x34
   10806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1080a:	e9dd 7a09 	ldrd	r7, sl, [sp, #36]	; 0x24
   1080e:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   10812:	464c      	mov	r4, r9
		if (ticker->ext_data) {
   10814:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   10816:	b10b      	cbz	r3, 1081c <ticker_worker+0x174>
   10818:	2500      	movs	r5, #0
   1081a:	e7a8      	b.n	1076e <ticker_worker+0xc6>
   1081c:	461d      	mov	r5, r3
   1081e:	e7a9      	b.n	10774 <ticker_worker+0xcc>
	if ((ticker->priority != TICKER_PRIORITY_CRITICAL) &&
   10820:	f994 302d 	ldrsb.w	r3, [r4, #45]	; 0x2d
   10824:	9305      	str	r3, [sp, #20]
   10826:	3380      	adds	r3, #128	; 0x80
   10828:	d0f4      	beq.n	10814 <ticker_worker+0x16c>
   1082a:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   1082e:	d0f1      	beq.n	10814 <ticker_worker+0x16c>
		int32_t lazy_current = ticker->lazy_current;
   10830:	8be3      	ldrh	r3, [r4, #30]
		if (lazy_current >= ticker->lazy_periodic) {
   10832:	8ba2      	ldrh	r2, [r4, #28]
		int32_t lazy_current = ticker->lazy_current;
   10834:	9303      	str	r3, [sp, #12]
		if (lazy_current >= ticker->lazy_periodic) {
   10836:	4293      	cmp	r3, r2
			lazy_current -= ticker->lazy_periodic;
   10838:	bf28      	it	cs
   1083a:	1a9b      	subcs	r3, r3, r2
				(lazy_current - ticker->priority);
   1083c:	9905      	ldr	r1, [sp, #20]
		uint32_t current_age = ticker->ticks_periodic +
   1083e:	6862      	ldr	r2, [r4, #4]
		uint32_t acc_ticks_to_expire = 0U;
   10840:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
				(lazy_current - ticker->priority);
   10844:	1a59      	subs	r1, r3, r1
		uint32_t current_age = ticker->ticks_periodic +
   10846:	fb03 2302 	mla	r3, r3, r2, r2
   1084a:	9306      	str	r3, [sp, #24]
		uint32_t acc_ticks_to_expire = 0U;
   1084c:	e9cd 7a09 	strd	r7, sl, [sp, #36]	; 0x24
				(lazy_current - ticker->priority);
   10850:	9107      	str	r1, [sp, #28]
		uint32_t current_age = ticker->ticks_periodic +
   10852:	465b      	mov	r3, fp
		uint32_t acc_ticks_to_expire = 0U;
   10854:	2000      	movs	r0, #0
   10856:	46a1      	mov	r9, r4
   10858:	9201      	str	r2, [sp, #4]
   1085a:	e02b      	b.n	108b4 <ticker_worker+0x20c>
				(ticker->ticks_periodic == 0U) ||
   1085c:	9c01      	ldr	r4, [sp, #4]
					  0U :
   1085e:	ebaa 0e0e 	sub.w	lr, sl, lr
				(ticker->ticks_periodic == 0U) ||
   10862:	2c00      	cmp	r4, #0
   10864:	d045      	beq.n	108f2 <ticker_worker+0x24a>
   10866:	9c06      	ldr	r4, [sp, #24]
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
   10868:	fb0a ee06 	mla	lr, sl, r6, lr
				(ticker->ticks_periodic == 0U) ||
   1086c:	4574      	cmp	r4, lr
   1086e:	bf8c      	ite	hi
   10870:	f04f 0e01 	movhi.w	lr, #1
   10874:	f04f 0e00 	movls.w	lr, #0
					(ticker->ticks_periodic != 0U) &&
   10878:	bf34      	ite	cc
   1087a:	f04f 0a01 	movcc.w	sl, #1
   1087e:	f04f 0a00 	movcs.w	sl, #0
			if (!lazy_next_periodic_skip &&
   10882:	42a9      	cmp	r1, r5
			uint8_t next_force = (ticker_next->force > ticker->force);
   10884:	f892 b003 	ldrb.w	fp, [r2, #3]
   10888:	f899 2003 	ldrb.w	r2, [r9, #3]
			if (!lazy_next_periodic_skip &&
   1088c:	d30e      	bcc.n	108ac <ticker_worker+0x204>
   1088e:	4593      	cmp	fp, r2
   10890:	d83b      	bhi.n	1090a <ticker_worker+0x262>
			    (next_force ||
   10892:	f117 0f80 	cmn.w	r7, #128	; 0x80
   10896:	d038      	beq.n	1090a <ticker_worker+0x262>
			     next_is_critical ||
   10898:	9a07      	ldr	r2, [sp, #28]
				(lazy_next - ticker_next->priority) >
   1089a:	1bf6      	subs	r6, r6, r7
			     next_is_critical ||
   1089c:	4296      	cmp	r6, r2
   1089e:	dd02      	ble.n	108a6 <ticker_worker+0x1fe>
			     (next_has_priority && !current_is_older) ||
   108a0:	f1be 0f00 	cmp.w	lr, #0
   108a4:	d031      	beq.n	1090a <ticker_worker+0x262>
   108a6:	9a05      	ldr	r2, [sp, #20]
   108a8:	42ba      	cmp	r2, r7
   108aa:	d02b      	beq.n	10904 <ticker_worker+0x25c>
			id_head = ticker_next->next;
   108ac:	f818 3003 	ldrb.w	r3, [r8, r3]
		while (id_head != TICKER_NULL) {
   108b0:	2bff      	cmp	r3, #255	; 0xff
   108b2:	d0aa      	beq.n	1080a <ticker_worker+0x162>
			struct ticker_node *ticker_next = &nodes[id_head];
   108b4:	b21b      	sxth	r3, r3
   108b6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   108ba:	eb08 1203 	add.w	r2, r8, r3, lsl #4
   108be:	011b      	lsls	r3, r3, #4
			acc_ticks_to_expire += ticker_next->ticks_to_expire;
   108c0:	f8d2 e008 	ldr.w	lr, [r2, #8]
   108c4:	4470      	add	r0, lr
			if (acc_ticks_to_expire > ticker->ticks_slot) {
   108c6:	4584      	cmp	ip, r0
   108c8:	d39f      	bcc.n	1080a <ticker_worker+0x162>
			if (ticker_next->ticks_slot == 0U) {
   108ca:	6991      	ldr	r1, [r2, #24]
   108cc:	2900      	cmp	r1, #0
   108ce:	d0ed      	beq.n	108ac <ticker_worker+0x204>
			int32_t lazy_next = ticker_next->lazy_current;
   108d0:	8bd1      	ldrh	r1, [r2, #30]
				ticker_next->lazy_periodic > lazy_next;
   108d2:	8b95      	ldrh	r5, [r2, #28]
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
   108d4:	f8d2 a004 	ldr.w	sl, [r2, #4]
				ticker_next->priority;
   108d8:	f992 702d 	ldrsb.w	r7, [r2, #45]	; 0x2d
			if (!lazy_next_periodic_skip) {
   108dc:	42a9      	cmp	r1, r5
			int32_t lazy_next = ticker_next->lazy_current;
   108de:	460e      	mov	r6, r1
				lazy_next -= ticker_next->lazy_periodic;
   108e0:	bf28      	it	cs
   108e2:	1b4e      	subcs	r6, r1, r5
					  0U :
   108e4:	f1ba 0f00 	cmp.w	sl, #0
   108e8:	d1b8      	bne.n	1085c <ticker_worker+0x1b4>
				(ticker->ticks_periodic == 0U) ||
   108ea:	9c01      	ldr	r4, [sp, #4]
					  0U :
   108ec:	46d6      	mov	lr, sl
				(ticker->ticks_periodic == 0U) ||
   108ee:	2c00      	cmp	r4, #0
   108f0:	d1b9      	bne.n	10866 <ticker_worker+0x1be>
					(ticker->ticks_periodic != 0U) &&
   108f2:	f8dd a004 	ldr.w	sl, [sp, #4]
				(ticker->ticks_periodic == 0U) ||
   108f6:	f04f 0e01 	mov.w	lr, #1
   108fa:	e7c2      	b.n	10882 <ticker_worker+0x1da>
			ticker->timeout_func(ticks_at_expire,
   108fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
   10900:	47b0      	blx	r6
			if (must_expire_skip == 0U) {
   10902:	e758      	b.n	107b6 <ticker_worker+0x10e>
			     (equal_priority && next_is_older))) {
   10904:	f1ba 0f00 	cmp.w	sl, #0
   10908:	d0d0      	beq.n	108ac <ticker_worker+0x204>
   1090a:	e9dd 7a09 	ldrd	r7, sl, [sp, #36]	; 0x24
   1090e:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   10912:	464c      	mov	r4, r9
   10914:	e70c      	b.n	10730 <ticker_worker+0x88>
			must_expire_skip = 1U;
   10916:	2501      	movs	r5, #1
   10918:	e72c      	b.n	10774 <ticker_worker+0xcc>
				ext_data->reschedule_state =
   1091a:	f04f 0201 	mov.w	r2, #1
   1091e:	721a      	strb	r2, [r3, #8]
   10920:	e713      	b.n	1074a <ticker_worker+0xa2>
	uint8_t slot_reserved = 0;
   10922:	9b08      	ldr	r3, [sp, #32]
   10924:	9304      	str	r3, [sp, #16]
   10926:	e6e2      	b.n	106ee <ticker_worker+0x46>
	ticks_expired = 0U;
   10928:	4618      	mov	r0, r3
   1092a:	e748      	b.n	107be <ticker_worker+0x116>

0001092c <ticker_job>:
	if (instance->worker_trigger) {
   1092c:	7fc2      	ldrb	r2, [r0, #31]
   1092e:	2a00      	cmp	r2, #0
   10930:	f040 862f 	bne.w	11592 <ticker_job+0xc66>
{
   10934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   10938:	7a83      	ldrb	r3, [r0, #10]
   1093a:	7ac1      	ldrb	r1, [r0, #11]
{
   1093c:	b08f      	sub	sp, #60	; 0x3c
   1093e:	4683      	mov	fp, r0
	ticks_previous = instance->ticks_current;
   10940:	6940      	ldr	r0, [r0, #20]
   10942:	9005      	str	r0, [sp, #20]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   10944:	4299      	cmp	r1, r3
	instance->job_guard = 1U;
   10946:	f04f 0001 	mov.w	r0, #1
   1094a:	f88b 001e 	strb.w	r0, [fp, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   1094e:	f000 8096 	beq.w	10a7e <ticker_job+0x152>
	uint8_t idx = *ticks_elapsed_index + 1;
   10952:	4403      	add	r3, r0
   10954:	b2db      	uxtb	r3, r3
	if (idx == DOUBLE_BUFFER_SIZE) {
   10956:	2b02      	cmp	r3, #2
		idx = 0U;
   10958:	bf08      	it	eq
   1095a:	4613      	moveq	r3, r2
		ticks_elapsed =
   1095c:	eb0b 0283 	add.w	r2, fp, r3, lsl #2
	*ticks_elapsed_index = idx;
   10960:	f88b 300a 	strb.w	r3, [fp, #10]
		ticks_elapsed =
   10964:	68d3      	ldr	r3, [r2, #12]
		instance->ticks_current += ticks_elapsed;
   10966:	9a05      	ldr	r2, [sp, #20]
		ticks_elapsed =
   10968:	9302      	str	r3, [sp, #8]
		instance->ticks_current += ticks_elapsed;
   1096a:	18d3      	adds	r3, r2, r3
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
   1096c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   10970:	f8cb 3014 	str.w	r3, [fp, #20]
		flag_elapsed = 1U;
   10974:	2301      	movs	r3, #1
   10976:	930d      	str	r3, [sp, #52]	; 0x34
	count_user = instance->count_user;
   10978:	f89b 3009 	ldrb.w	r3, [fp, #9]
	ticker_id_old_head = instance->ticker_id_head;
   1097c:	f89b 201d 	ldrb.w	r2, [fp, #29]
   10980:	9206      	str	r2, [sp, #24]
	node = &instance->nodes[0];
   10982:	f8db 2000 	ldr.w	r2, [fp]
	users = &instance->users[0];
   10986:	f8db 1004 	ldr.w	r1, [fp, #4]
	count_user = instance->count_user;
   1098a:	9307      	str	r3, [sp, #28]
	node = &instance->nodes[0];
   1098c:	9204      	str	r2, [sp, #16]
	while (count_user--) {
   1098e:	461a      	mov	r2, r3
   10990:	3b01      	subs	r3, #1
	users = &instance->users[0];
   10992:	910c      	str	r1, [sp, #48]	; 0x30
	while (count_user--) {
   10994:	b2db      	uxtb	r3, r3
   10996:	2a00      	cmp	r2, #0
   10998:	f000 8321 	beq.w	10fde <ticker_job+0x6b2>
   1099c:	eb01 06c3 	add.w	r6, r1, r3, lsl #3
	pending = 0U;
   109a0:	2300      	movs	r3, #0
   109a2:	9308      	str	r3, [sp, #32]
	insert_head = TICKER_NULL;
   109a4:	23ff      	movs	r3, #255	; 0xff
   109a6:	9301      	str	r3, [sp, #4]
   109a8:	4637      	mov	r7, r6
   109aa:	46d9      	mov	r9, fp
		user_ops = &user->user_op[0];
   109ac:	687b      	ldr	r3, [r7, #4]
   109ae:	9307      	str	r3, [sp, #28]
		while (user->middle != user->last) {
   109b0:	f897 c003 	ldrb.w	ip, [r7, #3]
   109b4:	78bb      	ldrb	r3, [r7, #2]
   109b6:	46ba      	mov	sl, r7
   109b8:	9907      	ldr	r1, [sp, #28]
					ticks_used = 0;
   109ba:	4698      	mov	r8, r3
			user_op = &user_ops[user->middle];
   109bc:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   109c0:	eb03 0282 	add.w	r2, r3, r2, lsl #2
			middle = user->middle + 1;
   109c4:	1c58      	adds	r0, r3, #1
		while (user->middle != user->last) {
   109c6:	4563      	cmp	r3, ip
			user_op = &user_ops[user->middle];
   109c8:	eb01 0582 	add.w	r5, r1, r2, lsl #2
			middle = user->middle + 1;
   109cc:	b2c3      	uxtb	r3, r0
		while (user->middle != user->last) {
   109ce:	f000 8182 	beq.w	10cd6 <ticker_job+0x3aa>
			if (middle == user->count_user_op) {
   109d2:	f89a 0000 	ldrb.w	r0, [sl]
				middle = 0U;
   109d6:	4298      	cmp	r0, r3
   109d8:	bf08      	it	eq
   109da:	2300      	moveq	r3, #0
			user->middle = middle;
   109dc:	f88a 3002 	strb.w	r3, [sl, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
   109e0:	f811 2022 	ldrb.w	r2, [r1, r2, lsl #2]
   109e4:	2a04      	cmp	r2, #4
   109e6:	f240 8174 	bls.w	10cd2 <ticker_job+0x3a6>
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
   109ea:	2a07      	cmp	r2, #7
   109ec:	f200 8086 	bhi.w	10afc <ticker_job+0x1d0>
			ticker = &node[user_op->id];
   109f0:	7869      	ldrb	r1, [r5, #1]
   109f2:	9c04      	ldr	r4, [sp, #16]
   109f4:	eb01 0041 	add.w	r0, r1, r1, lsl #1
   109f8:	eb04 1400 	add.w	r4, r4, r0, lsl #4
   109fc:	0100      	lsls	r0, r0, #4
			state = (ticker->req - ticker->ack) & 0xff;
   109fe:	78a7      	ldrb	r7, [r4, #2]
			ticker = &node[user_op->id];
   10a00:	900a      	str	r0, [sp, #40]	; 0x28
			state = (ticker->req - ticker->ack) & 0xff;
   10a02:	7860      	ldrb	r0, [r4, #1]
   10a04:	1bc0      	subs	r0, r0, r7
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
   10a06:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
   10a0a:	d077      	beq.n	10afc <ticker_job+0x1d0>
			    (state == 0U) ||
   10a0c:	2a05      	cmp	r2, #5
   10a0e:	d065      	beq.n	10adc <ticker_job+0x1b0>
			if (state == 1U) {
   10a10:	2801      	cmp	r0, #1
   10a12:	d137      	bne.n	10a84 <ticker_job+0x158>
	previous = instance->ticker_id_head;
   10a14:	f899 c01d 	ldrb.w	ip, [r9, #29]
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   10a18:	f8d9 6000 	ldr.w	r6, [r9]
	while (current != TICKER_NULL) {
   10a1c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   10a20:	d017      	beq.n	10a52 <ticker_job+0x126>
		ticker_current = &node[current];
   10a22:	eb0c 004c 	add.w	r0, ip, ip, lsl #1
		if (current == id) {
   10a26:	4561      	cmp	r1, ip
		ticker_current = &node[current];
   10a28:	eb06 1000 	add.w	r0, r6, r0, lsl #4
		if (current == id) {
   10a2c:	f000 8090 	beq.w	10b50 <ticker_job+0x224>
	total = 0U;
   10a30:	2300      	movs	r3, #0
   10a32:	e001      	b.n	10a38 <ticker_job+0x10c>
		if (current == id) {
   10a34:	4561      	cmp	r1, ip
   10a36:	d070      	beq.n	10b1a <ticker_job+0x1ee>
		total += ticker_current->ticks_to_expire;
   10a38:	46e6      	mov	lr, ip
		current = ticker_current->next;
   10a3a:	f890 c000 	ldrb.w	ip, [r0]
		total += ticker_current->ticks_to_expire;
   10a3e:	f8d0 8008 	ldr.w	r8, [r0, #8]
	while (current != TICKER_NULL) {
   10a42:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
		ticker_current = &node[current];
   10a46:	eb0c 004c 	add.w	r0, ip, ip, lsl #1
		total += ticker_current->ticks_to_expire;
   10a4a:	4443      	add	r3, r8
		ticker_current = &node[current];
   10a4c:	eb06 1000 	add.w	r0, r6, r0, lsl #4
	while (current != TICKER_NULL) {
   10a50:	d1f0      	bne.n	10a34 <ticker_job+0x108>
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   10a52:	2600      	movs	r6, #0
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
   10a54:	2a05      	cmp	r2, #5
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   10a56:	60a6      	str	r6, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
   10a58:	f000 8126 	beq.w	10ca8 <ticker_job+0x37c>
		ticker->req = ticker->ack;
   10a5c:	7067      	strb	r7, [r4, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
   10a5e:	f899 301c 	ldrb.w	r3, [r9, #28]
   10a62:	428b      	cmp	r3, r1
   10a64:	d022      	beq.n	10aac <ticker_job+0x180>
	if (user_op->fp_op_func) {
   10a66:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   10a68:	2000      	movs	r0, #0
   10a6a:	7028      	strb	r0, [r5, #0]
	user_op->status = status;
   10a6c:	62a8      	str	r0, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
   10a6e:	b10b      	cbz	r3, 10a74 <ticker_job+0x148>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   10a70:	6b29      	ldr	r1, [r5, #48]	; 0x30
   10a72:	4798      	blx	r3
   10a74:	f89a c003 	ldrb.w	ip, [sl, #3]
   10a78:	f89a 3002 	ldrb.w	r3, [sl, #2]
   10a7c:	e79c      	b.n	109b8 <ticker_job+0x8c>
		flag_elapsed = 0U;
   10a7e:	920d      	str	r2, [sp, #52]	; 0x34
		ticks_elapsed = 0U;
   10a80:	9202      	str	r2, [sp, #8]
   10a82:	e779      	b.n	10978 <ticker_job+0x4c>
				instance->sched_cb(TICKER_CALL_ID_JOB,
   10a84:	2104      	movs	r1, #4
   10a86:	464b      	mov	r3, r9
   10a88:	2201      	movs	r2, #1
   10a8a:	f8d9 4024 	ldr.w	r4, [r9, #36]	; 0x24
   10a8e:	4608      	mov	r0, r1
   10a90:	47a0      	blx	r4
	while (count_user--) {
   10a92:	9a0c      	ldr	r2, [sp, #48]	; 0x30
				user->middle = prev;
   10a94:	f88a 8002 	strb.w	r8, [sl, #2]
   10a98:	4657      	mov	r7, sl
				pending = 1U;
   10a9a:	2301      	movs	r3, #1
	while (count_user--) {
   10a9c:	42ba      	cmp	r2, r7
				pending = 1U;
   10a9e:	9308      	str	r3, [sp, #32]
   10aa0:	f1a7 0308 	sub.w	r3, r7, #8
	while (count_user--) {
   10aa4:	f000 811e 	beq.w	10ce4 <ticker_job+0x3b8>
   10aa8:	461f      	mov	r7, r3
   10aaa:	e77f      	b.n	109ac <ticker_job+0x80>
			instance->ticker_id_slot_previous = TICKER_NULL;
   10aac:	23ff      	movs	r3, #255	; 0xff
			if (user_op->op == TICKER_USER_OP_TYPE_STOP_ABS) {
   10aae:	2a07      	cmp	r2, #7
			instance->ticker_id_slot_previous = TICKER_NULL;
   10ab0:	f889 301c 	strb.w	r3, [r9, #28]
			if (user_op->op == TICKER_USER_OP_TYPE_STOP_ABS) {
   10ab4:	f040 81dd 	bne.w	10e72 <ticker_job+0x546>
				ticks_at_stop =
   10ab8:	6868      	ldr	r0, [r5, #4]
			ticks_current = instance->ticks_current;
   10aba:	f8d9 3014 	ldr.w	r3, [r9, #20]
			if (!((ticks_at_stop - ticks_current) &
   10abe:	1ac2      	subs	r2, r0, r3
   10ac0:	0214      	lsls	r4, r2, #8
   10ac2:	f100 81cd 	bmi.w	10e60 <ticker_job+0x534>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   10ac6:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
				ticks_used = ticks_elapsed +
   10aca:	9a02      	ldr	r2, [sp, #8]
   10acc:	4413      	add	r3, r2
			if (instance->ticks_slot_previous > ticks_used) {
   10ace:	f8d9 2018 	ldr.w	r2, [r9, #24]
   10ad2:	429a      	cmp	r2, r3
				instance->ticks_slot_previous = ticks_used;
   10ad4:	bf88      	it	hi
   10ad6:	f8c9 3018 	strhi.w	r3, [r9, #24]
   10ada:	e7c4      	b.n	10a66 <ticker_job+0x13a>
			    ((user_op->op == TICKER_USER_OP_TYPE_UPDATE) &&
   10adc:	686e      	ldr	r6, [r5, #4]
   10ade:	2e00      	cmp	r6, #0
   10ae0:	d196      	bne.n	10a10 <ticker_job+0xe4>
			     (user_op->params.update.ticks_drift_plus == 0U) &&
   10ae2:	68ae      	ldr	r6, [r5, #8]
   10ae4:	2e00      	cmp	r6, #0
   10ae6:	d193      	bne.n	10a10 <ticker_job+0xe4>
			     (user_op->params.update.ticks_drift_minus == 0U) &&
   10ae8:	68ee      	ldr	r6, [r5, #12]
   10aea:	2e00      	cmp	r6, #0
   10aec:	d190      	bne.n	10a10 <ticker_job+0xe4>
			     (user_op->params.update.ticks_slot_plus == 0U) &&
   10aee:	692e      	ldr	r6, [r5, #16]
   10af0:	2e00      	cmp	r6, #0
   10af2:	d18d      	bne.n	10a10 <ticker_job+0xe4>
			     (user_op->params.update.lazy == 0U) &&
   10af4:	696e      	ldr	r6, [r5, #20]
   10af6:	f036 467f 	bics.w	r6, r6, #4278190080	; 0xff000000
   10afa:	d189      	bne.n	10a10 <ticker_job+0xe4>
	if (user_op->fp_op_func) {
   10afc:	6aea      	ldr	r2, [r5, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   10afe:	2100      	movs	r1, #0
	user_op->status = status;
   10b00:	2001      	movs	r0, #1
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   10b02:	7029      	strb	r1, [r5, #0]
	user_op->status = status;
   10b04:	62a8      	str	r0, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
   10b06:	2a00      	cmp	r2, #0
   10b08:	f43f af56 	beq.w	109b8 <ticker_job+0x8c>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   10b0c:	6b29      	ldr	r1, [r5, #48]	; 0x30
   10b0e:	4790      	blx	r2
   10b10:	f89a c003 	ldrb.w	ip, [sl, #3]
   10b14:	f89a 3002 	ldrb.w	r3, [sl, #2]
   10b18:	e74e      	b.n	109b8 <ticker_job+0x8c>
	if (previous == current) {
   10b1a:	eb0e 074e 	add.w	r7, lr, lr, lsl #1
   10b1e:	4571      	cmp	r1, lr
   10b20:	eb06 1707 	add.w	r7, r6, r7, lsl #4
   10b24:	d016      	beq.n	10b54 <ticker_job+0x228>
	node[previous].next = ticker_current->next;
   10b26:	7801      	ldrb	r1, [r0, #0]
	timeout = ticker_current->ticks_to_expire;
   10b28:	f8d0 c008 	ldr.w	ip, [r0, #8]
	node[previous].next = ticker_current->next;
   10b2c:	7039      	strb	r1, [r7, #0]
	if (ticker_current->next != TICKER_NULL) {
   10b2e:	29ff      	cmp	r1, #255	; 0xff
   10b30:	d006      	beq.n	10b40 <ticker_job+0x214>
		node[ticker_current->next].ticks_to_expire += timeout;
   10b32:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   10b36:	eb06 1101 	add.w	r1, r6, r1, lsl #4
   10b3a:	6888      	ldr	r0, [r1, #8]
   10b3c:	4460      	add	r0, ip
   10b3e:	6088      	str	r0, [r1, #8]
	return (total + timeout);
   10b40:	eb0c 0603 	add.w	r6, ip, r3
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
   10b44:	2a05      	cmp	r2, #5
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   10b46:	60a6      	str	r6, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
   10b48:	d009      	beq.n	10b5e <ticker_job+0x232>
   10b4a:	78a7      	ldrb	r7, [r4, #2]
   10b4c:	7869      	ldrb	r1, [r5, #1]
   10b4e:	e785      	b.n	10a5c <ticker_job+0x130>
		if (current == id) {
   10b50:	4607      	mov	r7, r0
	total = 0U;
   10b52:	2300      	movs	r3, #0
		instance->ticker_id_head = ticker_current->next;
   10b54:	7802      	ldrb	r2, [r0, #0]
   10b56:	f889 201d 	strb.w	r2, [r9, #29]
   10b5a:	782a      	ldrb	r2, [r5, #0]
   10b5c:	e7e3      	b.n	10b26 <ticker_job+0x1fa>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
   10b5e:	f8d9 7014 	ldr.w	r7, [r9, #20]
   10b62:	9703      	str	r7, [sp, #12]
	ticks_now = cntr_cnt_get();
   10b64:	f009 ff7c 	bl	1aa60 <cntr_cnt_get>
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   10b68:	9b02      	ldr	r3, [sp, #8]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   10b6a:	eba0 0c07 	sub.w	ip, r0, r7
   10b6e:	f02c 477f 	bic.w	r7, ip, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   10b72:	443b      	add	r3, r7
	if (ticks_to_expire > ticks_elapsed) {
   10b74:	429e      	cmp	r6, r3
	ticks_now = cntr_cnt_get();
   10b76:	4680      	mov	r8, r0
	if (ticks_to_expire > ticks_elapsed) {
   10b78:	f240 80a2 	bls.w	10cc0 <ticker_job+0x394>
		ticks_to_expire -= ticks_elapsed;
   10b7c:	6962      	ldr	r2, [r4, #20]
   10b7e:	1af3      	subs	r3, r6, r3
	if ((ticker->ticks_periodic != 0U) &&
   10b80:	6866      	ldr	r6, [r4, #4]
   10b82:	2e00      	cmp	r6, #0
   10b84:	d053      	beq.n	10c2e <ticker_job+0x302>
	    (user_op->params.update.lazy != 0U)) {
   10b86:	8aa8      	ldrh	r0, [r5, #20]
	if ((ticker->ticks_periodic != 0U) &&
   10b88:	2800      	cmp	r0, #0
   10b8a:	d050      	beq.n	10c2e <ticker_job+0x302>
		user_op->params.update.lazy--;
   10b8c:	3801      	subs	r0, #1
   10b8e:	b280      	uxth	r0, r0
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   10b90:	429e      	cmp	r6, r3
   10b92:	8be1      	ldrh	r1, [r4, #30]
		user_op->params.update.lazy--;
   10b94:	82a8      	strh	r0, [r5, #20]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   10b96:	d225      	bcs.n	10be4 <ticker_job+0x2b8>
   10b98:	f106 0b01 	add.w	fp, r6, #1
   10b9c:	920b      	str	r2, [sp, #44]	; 0x2c
   10b9e:	e011      	b.n	10bc4 <ticker_job+0x298>
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
   10ba0:	f100 70e8 	add.w	r0, r0, #30408704	; 0x1d00000
   10ba4:	f500 30d4 	add.w	r0, r0, #108544	; 0x1a800
   10ba8:	f500 70a5 	add.w	r0, r0, #330	; 0x14a
   10bac:	46de      	mov	lr, fp
	ticker->remainder_current -= ticker->remainder_periodic;
   10bae:	9a09      	ldr	r2, [sp, #36]	; 0x24
			ticker->lazy_current--;
   10bb0:	3901      	subs	r1, #1
			ticks_to_expire -= ticker->ticks_periodic +
   10bb2:	eba3 030e 	sub.w	r3, r3, lr
			ticker->lazy_current--;
   10bb6:	b289      	uxth	r1, r1
	ticker->remainder_current -= ticker->remainder_periodic;
   10bb8:	1a80      	subs	r0, r0, r2
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   10bba:	429e      	cmp	r6, r3
			ticker->lazy_current--;
   10bbc:	83e1      	strh	r1, [r4, #30]
	ticker->remainder_current -= ticker->remainder_periodic;
   10bbe:	6260      	str	r0, [r4, #36]	; 0x24
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   10bc0:	d20e      	bcs.n	10be0 <ticker_job+0x2b4>
   10bc2:	8aa8      	ldrh	r0, [r5, #20]
   10bc4:	4288      	cmp	r0, r1
   10bc6:	f080 81b2 	bcs.w	10f2e <ticker_job+0x602>
					   ticker_remainder_dec(ticker);
   10bca:	e9d4 2008 	ldrd	r2, r0, [r4, #32]
	if ((ticker->remainder_current >= BIT(31)) ||
   10bce:	f8df e2d0 	ldr.w	lr, [pc, #720]	; 10ea0 <ticker_job+0x574>
					   ticker_remainder_dec(ticker);
   10bd2:	9209      	str	r2, [sp, #36]	; 0x24
	if ((ticker->remainder_current >= BIT(31)) ||
   10bd4:	4ab1      	ldr	r2, [pc, #708]	; (10e9c <ticker_job+0x570>)
   10bd6:	4486      	add	lr, r0
   10bd8:	4596      	cmp	lr, r2
   10bda:	d8e1      	bhi.n	10ba0 <ticker_job+0x274>
   10bdc:	46b6      	mov	lr, r6
   10bde:	e7e6      	b.n	10bae <ticker_job+0x282>
   10be0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   10be2:	8aa8      	ldrh	r0, [r5, #20]
		while (ticker->lazy_current < user_op->params.update.lazy) {
   10be4:	4288      	cmp	r0, r1
   10be6:	d921      	bls.n	10c2c <ticker_job+0x300>
					   ticker_remainder_inc(ticker);
   10be8:	6a20      	ldr	r0, [r4, #32]
   10bea:	9009      	str	r0, [sp, #36]	; 0x24
   10bec:	f106 0e01 	add.w	lr, r6, #1
   10bf0:	920b      	str	r2, [sp, #44]	; 0x2c
   10bf2:	e007      	b.n	10c04 <ticker_job+0x2d8>
	ticker->remainder_current += ticker->remainder_periodic;
   10bf4:	6260      	str	r0, [r4, #36]	; 0x24
   10bf6:	46b3      	mov	fp, r6
		while (ticker->lazy_current < user_op->params.update.lazy) {
   10bf8:	8aa8      	ldrh	r0, [r5, #20]
			ticker->lazy_current++;
   10bfa:	3101      	adds	r1, #1
   10bfc:	b289      	uxth	r1, r1
		while (ticker->lazy_current < user_op->params.update.lazy) {
   10bfe:	4281      	cmp	r1, r0
			ticks_to_expire += ticker->ticks_periodic +
   10c00:	445b      	add	r3, fp
		while (ticker->lazy_current < user_op->params.update.lazy) {
   10c02:	d211      	bcs.n	10c28 <ticker_job+0x2fc>
	ticker->remainder_current += ticker->remainder_periodic;
   10c04:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10c06:	6a60      	ldr	r0, [r4, #36]	; 0x24
	if ((ticker->remainder_current < BIT(31)) &&
   10c08:	f8df b294 	ldr.w	fp, [pc, #660]	; 10ea0 <ticker_job+0x574>
	ticker->remainder_current += ticker->remainder_periodic;
   10c0c:	4410      	add	r0, r2
	if ((ticker->remainder_current < BIT(31)) &&
   10c0e:	4aa3      	ldr	r2, [pc, #652]	; (10e9c <ticker_job+0x570>)
   10c10:	4483      	add	fp, r0
   10c12:	4593      	cmp	fp, r2
   10c14:	d8ee      	bhi.n	10bf4 <ticker_job+0x2c8>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   10c16:	f1a0 70e8 	sub.w	r0, r0, #30408704	; 0x1d00000
   10c1a:	f5a0 30d4 	sub.w	r0, r0, #108544	; 0x1a800
   10c1e:	f5a0 70a5 	sub.w	r0, r0, #330	; 0x14a
   10c22:	6260      	str	r0, [r4, #36]	; 0x24
		return 1;
   10c24:	46f3      	mov	fp, lr
   10c26:	e7e7      	b.n	10bf8 <ticker_job+0x2cc>
   10c28:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   10c2a:	83e1      	strh	r1, [r4, #30]
		ticker->lazy_periodic = user_op->params.update.lazy;
   10c2c:	83a0      	strh	r0, [r4, #28]
				user_op->params.update.ticks_drift_minus;
   10c2e:	e9d5 0e01 	ldrd	r0, lr, [r5, #4]
	struct ticker_ext *ext_data = ticker->ext_data;
   10c32:	6aa6      	ldr	r6, [r4, #40]	; 0x28
	ticker->ticks_to_expire = ticks_to_expire +
   10c34:	4403      	add	r3, r0
	ticker->ticks_to_expire_minus +=
   10c36:	4472      	add	r2, lr
	ticker->ticks_to_expire = ticks_to_expire +
   10c38:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus +=
   10c3a:	6162      	str	r2, [r4, #20]
	if (ext_data && ext_data->ticks_slot_window != 0U) {
   10c3c:	b136      	cbz	r6, 10c4c <ticker_job+0x320>
   10c3e:	6831      	ldr	r1, [r6, #0]
   10c40:	b121      	cbz	r1, 10c4c <ticker_job+0x320>
			user_op->params.update.ticks_drift_plus -
   10c42:	eba0 000e 	sub.w	r0, r0, lr
		ext_data->ticks_drift =
   10c46:	6070      	str	r0, [r6, #4]
   10c48:	68a3      	ldr	r3, [r4, #8]
   10c4a:	6962      	ldr	r2, [r4, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   10c4c:	f41c 0f00 	tst.w	ip, #8388608	; 0x800000
   10c50:	d121      	bne.n	10c96 <ticker_job+0x36a>
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
   10c52:	443b      	add	r3, r7
	if (ticks_to_expire > ticks_to_expire_minus) {
   10c54:	4293      	cmp	r3, r2
   10c56:	d91b      	bls.n	10c90 <ticker_job+0x364>
		ticks_to_expire -= ticks_to_expire_minus;
   10c58:	1a9b      	subs	r3, r3, r2
		ticks_to_expire_minus = 0U;
   10c5a:	2200      	movs	r2, #0
	ticker->ticks_to_expire = ticks_to_expire;
   10c5c:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   10c5e:	6162      	str	r2, [r4, #20]
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
   10c60:	68e9      	ldr	r1, [r5, #12]
   10c62:	69a3      	ldr	r3, [r4, #24]
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
   10c64:	692a      	ldr	r2, [r5, #16]
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
   10c66:	440b      	add	r3, r1
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
   10c68:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
   10c6a:	bf88      	it	hi
   10c6c:	1a9b      	subhi	r3, r3, r2
	if (user_op->params.update.force != 0U) {
   10c6e:	7daa      	ldrb	r2, [r5, #22]
		ticker->ticks_slot = 0U;
   10c70:	bf98      	it	ls
   10c72:	2300      	movls	r3, #0
   10c74:	61a3      	str	r3, [r4, #24]
	if (user_op->params.update.force != 0U) {
   10c76:	b102      	cbz	r2, 10c7a <ticker_job+0x34e>
		ticker->force = user_op->params.update.force;
   10c78:	70e2      	strb	r2, [r4, #3]
	ticker->next = *insert_head;
   10c7a:	9b04      	ldr	r3, [sp, #16]
   10c7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   10c7e:	4619      	mov	r1, r3
   10c80:	9b01      	ldr	r3, [sp, #4]
   10c82:	548b      	strb	r3, [r1, r2]
		ticker->req++;
   10c84:	7863      	ldrb	r3, [r4, #1]
	*insert_head = user_op->id;
   10c86:	786a      	ldrb	r2, [r5, #1]
   10c88:	9201      	str	r2, [sp, #4]
		ticker->req++;
   10c8a:	3301      	adds	r3, #1
   10c8c:	7063      	strb	r3, [r4, #1]
   10c8e:	e6ea      	b.n	10a66 <ticker_job+0x13a>
   10c90:	1ad2      	subs	r2, r2, r3
		ticks_to_expire = 0U;
   10c92:	2300      	movs	r3, #0
   10c94:	e7e2      	b.n	10c5c <ticker_job+0x330>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   10c96:	9903      	ldr	r1, [sp, #12]
   10c98:	eba1 0708 	sub.w	r7, r1, r8
   10c9c:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
   10ca0:	429f      	cmp	r7, r3
   10ca2:	d213      	bcs.n	10ccc <ticker_job+0x3a0>
			ticks_to_expire -= delta_current_start;
   10ca4:	1bdb      	subs	r3, r3, r7
   10ca6:	e7d5      	b.n	10c54 <ticker_job+0x328>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
   10ca8:	f8d9 7014 	ldr.w	r7, [r9, #20]
   10cac:	9703      	str	r7, [sp, #12]
	ticks_now = cntr_cnt_get();
   10cae:	f009 fed7 	bl	1aa60 <cntr_cnt_get>
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   10cb2:	9b02      	ldr	r3, [sp, #8]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   10cb4:	eba0 0c07 	sub.w	ip, r0, r7
   10cb8:	f02c 477f 	bic.w	r7, ip, #4278190080	; 0xff000000
	ticks_now = cntr_cnt_get();
   10cbc:	4680      	mov	r8, r0
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   10cbe:	443b      	add	r3, r7
		ticker->ticks_to_expire_minus += ticks_elapsed -
   10cc0:	6961      	ldr	r1, [r4, #20]
   10cc2:	440b      	add	r3, r1
   10cc4:	1b9a      	subs	r2, r3, r6
   10cc6:	6162      	str	r2, [r4, #20]
		ticks_to_expire = 0U;
   10cc8:	2300      	movs	r3, #0
   10cca:	e759      	b.n	10b80 <ticker_job+0x254>
			ticks_to_expire_minus +=
   10ccc:	443a      	add	r2, r7
   10cce:	1ad2      	subs	r2, r2, r3
	if (ticks_to_expire > ticks_to_expire_minus) {
   10cd0:	e7df      	b.n	10c92 <ticker_job+0x366>
   10cd2:	4698      	mov	r8, r3
   10cd4:	e672      	b.n	109bc <ticker_job+0x90>
	while (count_user--) {
   10cd6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   10cd8:	4657      	mov	r7, sl
   10cda:	42ba      	cmp	r2, r7
   10cdc:	f1a7 0308 	sub.w	r3, r7, #8
   10ce0:	f47f aee2 	bne.w	10aa8 <ticker_job+0x17c>
   10ce4:	f899 701d 	ldrb.w	r7, [r9, #29]
   10ce8:	9b06      	ldr	r3, [sp, #24]
   10cea:	1bdb      	subs	r3, r3, r7
   10cec:	bf18      	it	ne
   10cee:	2301      	movne	r3, #1
   10cf0:	9307      	str	r3, [sp, #28]
	if (flag_elapsed) {
   10cf2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10cf4:	46cb      	mov	fp, r9
   10cf6:	2b00      	cmp	r3, #0
   10cf8:	f040 8179 	bne.w	10fee <ticker_job+0x6c2>
	count_user = instance->count_user;
   10cfc:	f899 2009 	ldrb.w	r2, [r9, #9]
	node = &instance->nodes[0];
   10d00:	f8d9 3000 	ldr.w	r3, [r9]
	users = &instance->users[0];
   10d04:	f8d9 1004 	ldr.w	r1, [r9, #4]
	node = &instance->nodes[0];
   10d08:	9304      	str	r3, [sp, #16]
	while (count_user--) {
   10d0a:	1e53      	subs	r3, r2, #1
	users = &instance->users[0];
   10d0c:	9109      	str	r1, [sp, #36]	; 0x24
	while (count_user--) {
   10d0e:	b2db      	uxtb	r3, r3
   10d10:	2a00      	cmp	r2, #0
   10d12:	f000 8110 	beq.w	10f36 <ticker_job+0x60a>
   10d16:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   10d1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10d1c:	9303      	str	r3, [sp, #12]
		user_ops = (void *)&user->user_op[0];
   10d1e:	f8d8 3004 	ldr.w	r3, [r8, #4]
		user_ops_first = user->first;
   10d22:	f898 6001 	ldrb.w	r6, [r8, #1]
		user_ops = (void *)&user->user_op[0];
   10d26:	9305      	str	r3, [sp, #20]
		while ((insert_head != TICKER_NULL) ||
   10d28:	9b01      	ldr	r3, [sp, #4]
   10d2a:	2bff      	cmp	r3, #255	; 0xff
   10d2c:	d05e      	beq.n	10dec <ticker_job+0x4c0>
				ticker = &node[id_insert];
   10d2e:	f8dd a004 	ldr.w	sl, [sp, #4]
   10d32:	9b04      	ldr	r3, [sp, #16]
   10d34:	fa0f f48a 	sxth.w	r4, sl
   10d38:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   10d3c:	ea4f 1c04 	mov.w	ip, r4, lsl #4
   10d40:	eb03 1404 	add.w	r4, r3, r4, lsl #4
				insert_head = ticker->next;
   10d44:	f813 300c 	ldrb.w	r3, [r3, ip]
   10d48:	9301      	str	r3, [sp, #4]
				user_op = NULL;
   10d4a:	2500      	movs	r5, #0
	ticker->next = TICKER_NULL;
   10d4c:	22ff      	movs	r2, #255	; 0xff
   10d4e:	7022      	strb	r2, [r4, #0]
	(void)ticker_enqueue(instance, id_insert);
   10d50:	f8db 7000 	ldr.w	r7, [fp]
	current = instance->ticker_id_head;
   10d54:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticker_new = &node[id];
   10d58:	eb07 000c 	add.w	r0, r7, ip
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   10d5c:	4293      	cmp	r3, r2
	ticks_to_expire = ticker_new->ticks_to_expire;
   10d5e:	6881      	ldr	r1, [r0, #8]
	previous = TICKER_NULL;
   10d60:	bf18      	it	ne
   10d62:	9202      	strne	r2, [sp, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   10d64:	d111      	bne.n	10d8a <ticker_job+0x45e>
   10d66:	e093      	b.n	10e90 <ticker_job+0x564>
		if (ticks_to_expire == 0 && (ticker_new->lazy_current >
   10d68:	ebb1 010c 	subs.w	r1, r1, ip
   10d6c:	d106      	bne.n	10d7c <ticker_job+0x450>
   10d6e:	f8be e01e 	ldrh.w	lr, [lr, #30]
   10d72:	f8b0 901e 	ldrh.w	r9, [r0, #30]
   10d76:	45f1      	cmp	r9, lr
   10d78:	f200 80d6 	bhi.w	10f28 <ticker_job+0x5fc>
		current = ticker_current->next;
   10d7c:	f817 c002 	ldrb.w	ip, [r7, r2]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   10d80:	9302      	str	r3, [sp, #8]
   10d82:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   10d86:	d077      	beq.n	10e78 <ticker_job+0x54c>
   10d88:	4663      	mov	r3, ip
		(ticker_current = &node[current])->ticks_to_expire))) {
   10d8a:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
   10d8e:	eb07 1e0c 	add.w	lr, r7, ip, lsl #4
   10d92:	ea4f 120c 	mov.w	r2, ip, lsl #4
		(ticks_to_expire_current =
   10d96:	f8de c008 	ldr.w	ip, [lr, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   10d9a:	458c      	cmp	ip, r1
   10d9c:	d9e4      	bls.n	10d68 <ticker_job+0x43c>
   10d9e:	9a02      	ldr	r2, [sp, #8]
	ticker_new->ticks_to_expire = ticks_to_expire;
   10da0:	6081      	str	r1, [r0, #8]
	if (previous == TICKER_NULL) {
   10da2:	2aff      	cmp	r2, #255	; 0xff
	ticker_new->next = current;
   10da4:	7003      	strb	r3, [r0, #0]
	if (previous == TICKER_NULL) {
   10da6:	d16c      	bne.n	10e82 <ticker_job+0x556>
		instance->ticker_id_head = id;
   10da8:	f88b a01d 	strb.w	sl, [fp, #29]
	if (current != TICKER_NULL) {
   10dac:	2bff      	cmp	r3, #255	; 0xff
   10dae:	d006      	beq.n	10dbe <ticker_job+0x492>
		node[current].ticks_to_expire -= ticks_to_expire;
   10db0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   10db4:	eb07 1703 	add.w	r7, r7, r3, lsl #4
   10db8:	68bb      	ldr	r3, [r7, #8]
   10dba:	1a59      	subs	r1, r3, r1
   10dbc:	60b9      	str	r1, [r7, #8]
	ticker->req = ticker->ack + 1;
   10dbe:	78a3      	ldrb	r3, [r4, #2]
   10dc0:	3301      	adds	r3, #1
   10dc2:	7063      	strb	r3, [r4, #1]
			if (user_op) {
   10dc4:	2d00      	cmp	r5, #0
   10dc6:	d0af      	beq.n	10d28 <ticker_job+0x3fc>
	if (user_op->fp_op_func) {
   10dc8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   10dca:	9a03      	ldr	r2, [sp, #12]
   10dcc:	702a      	strb	r2, [r5, #0]
	user_op->status = status;
   10dce:	62aa      	str	r2, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
   10dd0:	b113      	cbz	r3, 10dd8 <ticker_job+0x4ac>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   10dd2:	6b29      	ldr	r1, [r5, #48]	; 0x30
   10dd4:	2000      	movs	r0, #0
   10dd6:	4798      	blx	r3
				if ((ticker->ticks_periodic == 0U) &&
   10dd8:	6863      	ldr	r3, [r4, #4]
   10dda:	2b00      	cmp	r3, #0
   10ddc:	d1a4      	bne.n	10d28 <ticker_job+0x3fc>
					ticker->op_context =
   10dde:	e9d5 230b 	ldrd	r2, r3, [r5, #44]	; 0x2c
   10de2:	e9c4 2308 	strd	r2, r3, [r4, #32]
		while ((insert_head != TICKER_NULL) ||
   10de6:	9b01      	ldr	r3, [sp, #4]
   10de8:	2bff      	cmp	r3, #255	; 0xff
   10dea:	d1a0      	bne.n	10d2e <ticker_job+0x402>
   10dec:	f898 3002 	ldrb.w	r3, [r8, #2]
   10df0:	42b3      	cmp	r3, r6
   10df2:	d02e      	beq.n	10e52 <ticker_job+0x526>
   10df4:	9f05      	ldr	r7, [sp, #20]
				if (first == user->count_user_op) {
   10df6:	f898 0000 	ldrb.w	r0, [r8]
				user_op = &user_ops[user_ops_first];
   10dfa:	eb06 0246 	add.w	r2, r6, r6, lsl #1
   10dfe:	eb06 0282 	add.w	r2, r6, r2, lsl #2
				first = user_ops_first + 1;
   10e02:	3601      	adds	r6, #1
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   10e04:	f817 1022 	ldrb.w	r1, [r7, r2, lsl #2]
				first = user_ops_first + 1;
   10e08:	b2f6      	uxtb	r6, r6
					first = 0U;
   10e0a:	42b0      	cmp	r0, r6
   10e0c:	bf08      	it	eq
   10e0e:	2600      	moveq	r6, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   10e10:	2904      	cmp	r1, #4
				user_op = &user_ops[user_ops_first];
   10e12:	eb07 0582 	add.w	r5, r7, r2, lsl #2
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   10e16:	d11a      	bne.n	10e4e <ticker_job+0x522>
				id_insert = user_op->id;
   10e18:	f895 a001 	ldrb.w	sl, [r5, #1]
				ticker = &node[id_insert];
   10e1c:	9b04      	ldr	r3, [sp, #16]
   10e1e:	eb0a 0c4a 	add.w	ip, sl, sl, lsl #1
   10e22:	eb03 140c 	add.w	r4, r3, ip, lsl #4
   10e26:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
				if (((ticker->req -
   10e2a:	7861      	ldrb	r1, [r4, #1]
				      ticker->ack) & 0xff) != 0U) {
   10e2c:	78a3      	ldrb	r3, [r4, #2]
				if (((ticker->req -
   10e2e:	1ac9      	subs	r1, r1, r3
   10e30:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
   10e34:	d036      	beq.n	10ea4 <ticker_job+0x578>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   10e36:	9b03      	ldr	r3, [sp, #12]
   10e38:	f807 3022 	strb.w	r3, [r7, r2, lsl #2]
	if (user_op->fp_op_func) {
   10e3c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->status = status;
   10e3e:	2201      	movs	r2, #1
   10e40:	62aa      	str	r2, [r5, #40]	; 0x28
		user_op->fp_op_func(user_op->status, user_op->op_context);
   10e42:	4610      	mov	r0, r2
	if (user_op->fp_op_func) {
   10e44:	b10b      	cbz	r3, 10e4a <ticker_job+0x51e>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   10e46:	6b29      	ldr	r1, [r5, #48]	; 0x30
   10e48:	4798      	blx	r3
		while ((insert_head != TICKER_NULL) ||
   10e4a:	f898 3002 	ldrb.w	r3, [r8, #2]
   10e4e:	42b3      	cmp	r3, r6
   10e50:	d1d1      	bne.n	10df6 <ticker_job+0x4ca>
	while (count_user--) {
   10e52:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10e54:	4542      	cmp	r2, r8
   10e56:	f1a8 0308 	sub.w	r3, r8, #8
   10e5a:	d06a      	beq.n	10f32 <ticker_job+0x606>
   10e5c:	4698      	mov	r8, r3
   10e5e:	e75e      	b.n	10d1e <ticker_job+0x3f2>
				if (ticks_elapsed > ticks_used) {
   10e60:	9a02      	ldr	r2, [sp, #8]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   10e62:	1a1b      	subs	r3, r3, r0
   10e64:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				if (ticks_elapsed > ticks_used) {
   10e68:	429a      	cmp	r2, r3
					ticks_used = ticks_elapsed -
   10e6a:	bf8c      	ite	hi
   10e6c:	1ad3      	subhi	r3, r2, r3
					ticks_used = 0;
   10e6e:	2300      	movls	r3, #0
   10e70:	e62d      	b.n	10ace <ticker_job+0x1a2>
				ticks_at_stop = cntr_cnt_get();
   10e72:	f009 fdf5 	bl	1aa60 <cntr_cnt_get>
   10e76:	e620      	b.n	10aba <ticker_job+0x18e>
	ticker_new->next = current;
   10e78:	461a      	mov	r2, r3
	ticker_new->ticks_to_expire = ticks_to_expire;
   10e7a:	6081      	str	r1, [r0, #8]
	ticker_new->next = current;
   10e7c:	f880 c000 	strb.w	ip, [r0]
   10e80:	4663      	mov	r3, ip
		node[previous].next = id;
   10e82:	b212      	sxth	r2, r2
   10e84:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   10e88:	0112      	lsls	r2, r2, #4
   10e8a:	f807 a002 	strb.w	sl, [r7, r2]
   10e8e:	e78d      	b.n	10dac <ticker_job+0x480>
	ticker_new->next = current;
   10e90:	f807 300c 	strb.w	r3, [r7, ip]
		instance->ticker_id_head = id;
   10e94:	f88b a01d 	strb.w	sl, [fp, #29]
	if (current != TICKER_NULL) {
   10e98:	e791      	b.n	10dbe <ticker_job+0x492>
   10e9a:	bf00      	nop
   10e9c:	7f172b59 	.word	0x7f172b59
   10ea0:	ff172b5a 	.word	0xff172b5a
	ticker->must_expire = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 1U :
   10ea4:	8aaf      	ldrh	r7, [r5, #20]
				ticker_job_op_start(ticker, user_op,
   10ea6:	f8db e014 	ldr.w	lr, [fp, #20]
	ticker->must_expire = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 1U :
   10eaa:	6a68      	ldr	r0, [r5, #36]	; 0x24
   10eac:	f64f 79ff 	movw	r9, #65535	; 0xffff
   10eb0:	454f      	cmp	r7, r9
   10eb2:	e9d5 2303 	ldrd	r2, r3, [r5, #12]
   10eb6:	d02e      	beq.n	10f16 <ticker_job+0x5ea>
   10eb8:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
	ticker->ext_data = start->ext_data;
   10ebc:	62a0      	str	r0, [r4, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
   10ebe:	6062      	str	r2, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
   10ec0:	6223      	str	r3, [r4, #32]
	ticker->timeout_func = start->fp_timeout_func;
   10ec2:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   10ec6:	6868      	ldr	r0, [r5, #4]
	ticker->ticks_slot = start->ticks_slot;
   10ec8:	61a2      	str	r2, [r4, #24]
	ticker->context = start->context;
   10eca:	6a2a      	ldr	r2, [r5, #32]
	ticker->lazy_periodic = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 0U :
   10ecc:	83a7      	strh	r7, [r4, #28]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   10ece:	eba0 070e 	sub.w	r7, r0, lr
	ticker->context = start->context;
   10ed2:	e9c4 3203 	strd	r3, r2, [r4, #12]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   10ed6:	023a      	lsls	r2, r7, #8
	ticker->ticks_to_expire = start->ticks_first;
   10ed8:	68ab      	ldr	r3, [r5, #8]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   10eda:	d40c      	bmi.n	10ef6 <ticker_job+0x5ca>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   10edc:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
   10ee0:	443b      	add	r3, r7
	if (ticks_to_expire > ticks_to_expire_minus) {
   10ee2:	b18b      	cbz	r3, 10f08 <ticker_job+0x5dc>
	ticker->ticks_to_expire = ticks_to_expire;
   10ee4:	60a3      	str	r3, [r4, #8]
	ticker->remainder_current = 0U;
   10ee6:	9b03      	ldr	r3, [sp, #12]
   10ee8:	6263      	str	r3, [r4, #36]	; 0x24
	ticker->lazy_current = 0U;
   10eea:	83e3      	strh	r3, [r4, #30]
	ticker->force = 1U;
   10eec:	f04f 0301 	mov.w	r3, #1
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   10ef0:	6161      	str	r1, [r4, #20]
	ticker->force = 1U;
   10ef2:	70e3      	strb	r3, [r4, #3]
}
   10ef4:	e72a      	b.n	10d4c <ticker_job+0x420>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   10ef6:	ebae 0200 	sub.w	r2, lr, r0
   10efa:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
   10efe:	4293      	cmp	r3, r2
   10f00:	d905      	bls.n	10f0e <ticker_job+0x5e2>
			ticks_to_expire -= delta_current_start;
   10f02:	1a9b      	subs	r3, r3, r2
	if (ticks_to_expire > ticks_to_expire_minus) {
   10f04:	2b00      	cmp	r3, #0
   10f06:	d1ed      	bne.n	10ee4 <ticker_job+0x5b8>
		ticks_to_expire_minus -= ticks_to_expire;
   10f08:	4619      	mov	r1, r3
		ticks_to_expire = 0U;
   10f0a:	2300      	movs	r3, #0
   10f0c:	e7ea      	b.n	10ee4 <ticker_job+0x5b8>
			    (delta_current_start - ticks_to_expire);
   10f0e:	1ad3      	subs	r3, r2, r3
		ticks_to_expire_minus -= ticks_to_expire;
   10f10:	4619      	mov	r1, r3
		ticks_to_expire = 0U;
   10f12:	2300      	movs	r3, #0
   10f14:	e7e6      	b.n	10ee4 <ticker_job+0x5b8>
	ticker->must_expire = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 1U :
   10f16:	f04f 0701 	mov.w	r7, #1
   10f1a:	f884 702c 	strb.w	r7, [r4, #44]	; 0x2c
	ticker->ext_data = start->ext_data;
   10f1e:	62a0      	str	r0, [r4, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
   10f20:	6062      	str	r2, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
   10f22:	6223      	str	r3, [r4, #32]
	ticker->lazy_periodic = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 0U :
   10f24:	460f      	mov	r7, r1
   10f26:	e7cc      	b.n	10ec2 <ticker_job+0x596>
   10f28:	9a02      	ldr	r2, [sp, #8]
   10f2a:	4661      	mov	r1, ip
   10f2c:	e738      	b.n	10da0 <ticker_job+0x474>
   10f2e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   10f30:	e658      	b.n	10be4 <ticker_job+0x2b8>
   10f32:	f89b 701d 	ldrb.w	r7, [fp, #29]
	if (instance->ticker_id_head != ticker_id_old_head) {
   10f36:	9b06      	ldr	r3, [sp, #24]
   10f38:	42bb      	cmp	r3, r7
   10f3a:	f000 8334 	beq.w	115a6 <ticker_job+0xc7a>
	if (!pending) {
   10f3e:	9b08      	ldr	r3, [sp, #32]
   10f40:	2b00      	cmp	r3, #0
   10f42:	f000 8356 	beq.w	115f2 <ticker_job+0xcc6>
	instance->job_guard = 0U;
   10f46:	2300      	movs	r3, #0
   10f48:	f89b 701d 	ldrb.w	r7, [fp, #29]
   10f4c:	f88b 301e 	strb.w	r3, [fp, #30]
	if (instance->ticker_id_head == TICKER_NULL) {
   10f50:	2fff      	cmp	r7, #255	; 0xff
   10f52:	f000 83dc 	beq.w	1170e <ticker_job+0xde2>
	if (ticker_id_old_head == TICKER_NULL) {
   10f56:	9b06      	ldr	r3, [sp, #24]
   10f58:	2bff      	cmp	r3, #255	; 0xff
   10f5a:	f000 83f6 	beq.w	1174a <ticker_job+0xe1e>
	ticks_to_expire = ticker->ticks_to_expire;
   10f5e:	f8db 3000 	ldr.w	r3, [fp]
		LL_ASSERT(i);
   10f62:	f8df 9300 	ldr.w	r9, [pc, #768]	; 11264 <ticker_job+0x938>
   10f66:	f8df 8300 	ldr.w	r8, [pc, #768]	; 11268 <ticker_job+0x93c>
   10f6a:	4ebd      	ldr	r6, [pc, #756]	; (11260 <ticker_job+0x934>)
	ticker = &instance->nodes[instance->ticker_id_head];
   10f6c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
	ticks_to_expire = ticker->ticks_to_expire;
   10f70:	eb03 1307 	add.w	r3, r3, r7, lsl #4
	i = 10U;
   10f74:	250a      	movs	r5, #10
	ticks_to_expire = ticker->ticks_to_expire;
   10f76:	689f      	ldr	r7, [r3, #8]
		ctr = cntr_cnt_get();
   10f78:	f009 fd72 	bl	1aa60 <cntr_cnt_get>
		cc = instance->ticks_current;
   10f7c:	f8db 3014 	ldr.w	r3, [fp, #20]
		instance->trigger_set_cb(cc);
   10f80:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   10f84:	1ac4      	subs	r4, r0, r3
   10f86:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
   10f8a:	3403      	adds	r4, #3
		cc += MAX(ticks_elapsed, ticks_to_expire);
   10f8c:	42bc      	cmp	r4, r7
   10f8e:	bf2c      	ite	cs
   10f90:	191b      	addcs	r3, r3, r4
   10f92:	19db      	addcc	r3, r3, r7
		cc &= HAL_TICKER_CNTR_MASK;
   10f94:	f023 447f 	bic.w	r4, r3, #4278190080	; 0xff000000
		ctr = cntr_cnt_get();
   10f98:	4682      	mov	sl, r0
		instance->trigger_set_cb(cc);
   10f9a:	4620      	mov	r0, r4
   10f9c:	4790      	blx	r2
		ctr_post = cntr_cnt_get();
   10f9e:	f009 fd5f 	bl	1aa60 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   10fa2:	eba0 000a 	sub.w	r0, r0, sl
   10fa6:	eba4 040a 	sub.w	r4, r4, sl
   10faa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   10fae:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
   10fb2:	3003      	adds	r0, #3
		  ticker_ticks_diff_get(cc, ctr));
   10fb4:	42a0      	cmp	r0, r4
		i--;
   10fb6:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
		  ticker_ticks_diff_get(cc, ctr));
   10fba:	f240 82ff 	bls.w	115bc <ticker_job+0xc90>
		LL_ASSERT(i);
   10fbe:	2d00      	cmp	r5, #0
   10fc0:	d1da      	bne.n	10f78 <ticker_job+0x64c>
   10fc2:	f640 0391 	movw	r3, #2193	; 0x891
   10fc6:	464a      	mov	r2, r9
   10fc8:	4641      	mov	r1, r8
   10fca:	4630      	mov	r0, r6
   10fcc:	f00c ffc1 	bl	1df52 <printk>
   10fd0:	4040      	eors	r0, r0
   10fd2:	f380 8811 	msr	BASEPRI, r0
   10fd6:	f04f 0003 	mov.w	r0, #3
   10fda:	df02      	svc	2
   10fdc:	e7cc      	b.n	10f78 <ticker_job+0x64c>
	if (flag_elapsed) {
   10fde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10fe0:	2b00      	cmp	r3, #0
   10fe2:	f000 82f9 	beq.w	115d8 <ticker_job+0xcac>
	pending = 0U;
   10fe6:	9b07      	ldr	r3, [sp, #28]
   10fe8:	9308      	str	r3, [sp, #32]
	insert_head = TICKER_NULL;
   10fea:	23ff      	movs	r3, #255	; 0xff
   10fec:	9301      	str	r3, [sp, #4]
	ticks_now = cntr_cnt_get();
   10fee:	f009 fd37 	bl	1aa60 <cntr_cnt_get>
	node = &instance->nodes[0];
   10ff2:	f8db 3000 	ldr.w	r3, [fp]
	while (instance->ticker_id_head != TICKER_NULL) {
   10ff6:	f89b 501d 	ldrb.w	r5, [fp, #29]
	node = &instance->nodes[0];
   10ffa:	9303      	str	r3, [sp, #12]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   10ffc:	9b05      	ldr	r3, [sp, #20]
	while (instance->ticker_id_head != TICKER_NULL) {
   10ffe:	2dff      	cmp	r5, #255	; 0xff
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   11000:	eba0 0003 	sub.w	r0, r0, r3
   11004:	f020 487f 	bic.w	r8, r0, #4278190080	; 0xff000000
	while (instance->ticker_id_head != TICKER_NULL) {
   11008:	d054      	beq.n	110b4 <ticker_job+0x788>
   1100a:	f8dd a008 	ldr.w	sl, [sp, #8]
	ticks_expired = 0U;
   1100e:	f04f 0900 	mov.w	r9, #0
			instance->ticker_id_slot_previous = TICKER_NULL;
   11012:	464b      	mov	r3, r9
   11014:	46d1      	mov	r9, sl
   11016:	46c2      	mov	sl, r8
   11018:	4698      	mov	r8, r3
		ticker = &node[id_expired];
   1101a:	9b03      	ldr	r3, [sp, #12]
   1101c:	eb05 0445 	add.w	r4, r5, r5, lsl #1
   11020:	eb03 1404 	add.w	r4, r3, r4, lsl #4
		ticks_to_expire = ticker->ticks_to_expire;
   11024:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
   11026:	454b      	cmp	r3, r9
   11028:	f200 82dc 	bhi.w	115e4 <ticker_job+0xcb8>
		is_must_expire_skip = (ticker->must_expire &&
   1102c:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
		ticks_elapsed -= ticks_to_expire;
   11030:	eba9 0903 	sub.w	r9, r9, r3
		ticks_expired += ticks_to_expire;
   11034:	4498      	add	r8, r3
		ticks_latency -= ticks_to_expire;
   11036:	ebaa 0a03 	sub.w	sl, sl, r3
		is_must_expire_skip = (ticker->must_expire &&
   1103a:	2900      	cmp	r1, #0
   1103c:	f000 8138 	beq.w	112b0 <ticker_job+0x984>
   11040:	8be6      	ldrh	r6, [r4, #30]
   11042:	3e00      	subs	r6, #0
   11044:	bf18      	it	ne
   11046:	2601      	movne	r6, #1
		if (instance->ticks_slot_previous > ticks_to_expire) {
   11048:	f8db 2018 	ldr.w	r2, [fp, #24]
   1104c:	4293      	cmp	r3, r2
			instance->ticker_id_slot_previous = TICKER_NULL;
   1104e:	bf25      	ittet	cs
   11050:	f04f 33ff 	movcs.w	r3, #4294967295	; 0xffffffff
   11054:	f88b 301c 	strbcs.w	r3, [fp, #28]
			instance->ticks_slot_previous -= ticks_to_expire;
   11058:	1ad3      	subcc	r3, r2, r3
			instance->ticks_slot_previous = 0U;
   1105a:	2300      	movcs	r3, #0
		if ((ticker->ticks_slot != 0U) &&
   1105c:	69a7      	ldr	r7, [r4, #24]
			instance->ticks_slot_previous = 0U;
   1105e:	f8cb 3018 	str.w	r3, [fp, #24]
   11062:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   11064:	6860      	ldr	r0, [r4, #4]
   11066:	f894 c000 	ldrb.w	ip, [r4]
		if ((ticker->ticks_slot != 0U) &&
   1106a:	b147      	cbz	r7, 1107e <ticker_job+0x752>
		    (((ticker->req - ticker->ack) & 0xff) == 2U) &&
   1106c:	7863      	ldrb	r3, [r4, #1]
   1106e:	f894 e002 	ldrb.w	lr, [r4, #2]
   11072:	eba3 030e 	sub.w	r3, r3, lr
   11076:	b2db      	uxtb	r3, r3
		if ((ticker->ticks_slot != 0U) &&
   11078:	2b02      	cmp	r3, #2
   1107a:	f000 8147 	beq.w	1130c <ticker_job+0x9e0>
		ticker->ticks_to_expire = 0U;
   1107e:	2300      	movs	r3, #0
   11080:	60a3      	str	r3, [r4, #8]
		instance->ticker_id_head = ticker->next;
   11082:	f88b c01d 	strb.w	ip, [fp, #29]
		if ((ticker->ticks_periodic != 0U) ||
   11086:	2800      	cmp	r0, #0
   11088:	f040 80d6 	bne.w	11238 <ticker_job+0x90c>
   1108c:	b11a      	cbz	r2, 11096 <ticker_job+0x76a>
		    TICKER_RESCHEDULE_PENDING(ticker)) {
   1108e:	7a13      	ldrb	r3, [r2, #8]
   11090:	2b01      	cmp	r3, #1
   11092:	f000 8115 	beq.w	112c0 <ticker_job+0x994>
			if ((((ticker->req - ticker->ack) & 0xff) == 1U) &&
   11096:	78a2      	ldrb	r2, [r4, #2]
   11098:	7860      	ldrb	r0, [r4, #1]
   1109a:	1a80      	subs	r0, r0, r2
   1109c:	b2c0      	uxtb	r0, r0
   1109e:	2801      	cmp	r0, #1
   110a0:	f000 80c2 	beq.w	11228 <ticker_job+0x8fc>
			ticker->req = ticker->ack;
   110a4:	7062      	strb	r2, [r4, #1]
	while (instance->ticker_id_head != TICKER_NULL) {
   110a6:	f89b 501d 	ldrb.w	r5, [fp, #29]
   110aa:	2dff      	cmp	r5, #255	; 0xff
   110ac:	d1b5      	bne.n	1101a <ticker_job+0x6ee>
   110ae:	f8db 3000 	ldr.w	r3, [fp]
   110b2:	9303      	str	r3, [sp, #12]
			flag_compare_update = 1U;
   110b4:	e9dd 4006 	ldrd	r4, r0, [sp, #24]
	count_user = instance->count_user;
   110b8:	f89b 2009 	ldrb.w	r2, [fp, #9]
	users = &instance->users[0];
   110bc:	f8db 1004 	ldr.w	r1, [fp, #4]
   110c0:	9109      	str	r1, [sp, #36]	; 0x24
	while (count_user--) {
   110c2:	1e53      	subs	r3, r2, #1
			flag_compare_update = 1U;
   110c4:	42ac      	cmp	r4, r5
   110c6:	bf18      	it	ne
   110c8:	2001      	movne	r0, #1
   110ca:	9007      	str	r0, [sp, #28]
	while (count_user--) {
   110cc:	b2db      	uxtb	r3, r3
   110ce:	2a00      	cmp	r2, #0
   110d0:	f000 818a 	beq.w	113e8 <ticker_job+0xabc>
   110d4:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
		user_ops = (void *)&user->user_op[0];
   110d8:	f8d8 3004 	ldr.w	r3, [r8, #4]
		user_ops_first = user->first;
   110dc:	f898 6001 	ldrb.w	r6, [r8, #1]
		user_ops = (void *)&user->user_op[0];
   110e0:	9305      	str	r3, [sp, #20]
		while ((insert_head != TICKER_NULL) ||
   110e2:	9b01      	ldr	r3, [sp, #4]
   110e4:	2bff      	cmp	r3, #255	; 0xff
   110e6:	d062      	beq.n	111ae <ticker_job+0x882>
				ticker = &node[id_insert];
   110e8:	f8dd a004 	ldr.w	sl, [sp, #4]
   110ec:	9b03      	ldr	r3, [sp, #12]
   110ee:	fa0f f48a 	sxth.w	r4, sl
   110f2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   110f6:	ea4f 1c04 	mov.w	ip, r4, lsl #4
   110fa:	eb03 1404 	add.w	r4, r3, r4, lsl #4
				insert_head = ticker->next;
   110fe:	f813 300c 	ldrb.w	r3, [r3, ip]
   11102:	9301      	str	r3, [sp, #4]
				user_op = NULL;
   11104:	2500      	movs	r5, #0
	ticker->next = TICKER_NULL;
   11106:	22ff      	movs	r2, #255	; 0xff
   11108:	7022      	strb	r2, [r4, #0]
	(void)ticker_enqueue(instance, id_insert);
   1110a:	f8db 7000 	ldr.w	r7, [fp]
	current = instance->ticker_id_head;
   1110e:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticker_new = &node[id];
   11112:	eb07 000c 	add.w	r0, r7, ip
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   11116:	4293      	cmp	r3, r2
	ticks_to_expire = ticker_new->ticks_to_expire;
   11118:	6881      	ldr	r1, [r0, #8]
	previous = TICKER_NULL;
   1111a:	bf18      	it	ne
   1111c:	9204      	strne	r2, [sp, #16]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   1111e:	d112      	bne.n	11146 <ticker_job+0x81a>
   11120:	e15a      	b.n	113d8 <ticker_job+0xaac>
		if (ticks_to_expire == 0 && (ticker_new->lazy_current >
   11122:	ebb1 010c 	subs.w	r1, r1, ip
   11126:	d106      	bne.n	11136 <ticker_job+0x80a>
   11128:	f8be e01e 	ldrh.w	lr, [lr, #30]
   1112c:	f8b0 901e 	ldrh.w	r9, [r0, #30]
   11130:	45f1      	cmp	r9, lr
   11132:	f200 810c 	bhi.w	1134e <ticker_job+0xa22>
		current = ticker_current->next;
   11136:	f817 c002 	ldrb.w	ip, [r7, r2]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   1113a:	9304      	str	r3, [sp, #16]
   1113c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   11140:	f000 80f9 	beq.w	11336 <ticker_job+0xa0a>
   11144:	4663      	mov	r3, ip
		(ticker_current = &node[current])->ticks_to_expire))) {
   11146:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
   1114a:	eb07 1e0c 	add.w	lr, r7, ip, lsl #4
   1114e:	ea4f 120c 	mov.w	r2, ip, lsl #4
		(ticks_to_expire_current =
   11152:	f8de c008 	ldr.w	ip, [lr, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   11156:	458c      	cmp	ip, r1
   11158:	d9e3      	bls.n	11122 <ticker_job+0x7f6>
   1115a:	9a04      	ldr	r2, [sp, #16]
	ticker_new->ticks_to_expire = ticks_to_expire;
   1115c:	6081      	str	r1, [r0, #8]
	if (previous == TICKER_NULL) {
   1115e:	2aff      	cmp	r2, #255	; 0xff
	ticker_new->next = current;
   11160:	7003      	strb	r3, [r0, #0]
	if (previous == TICKER_NULL) {
   11162:	f040 80ed 	bne.w	11340 <ticker_job+0xa14>
		instance->ticker_id_head = id;
   11166:	f88b a01d 	strb.w	sl, [fp, #29]
	if (current != TICKER_NULL) {
   1116a:	2bff      	cmp	r3, #255	; 0xff
   1116c:	d006      	beq.n	1117c <ticker_job+0x850>
		node[current].ticks_to_expire -= ticks_to_expire;
   1116e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   11172:	eb07 1703 	add.w	r7, r7, r3, lsl #4
   11176:	68bb      	ldr	r3, [r7, #8]
   11178:	1a59      	subs	r1, r3, r1
   1117a:	60b9      	str	r1, [r7, #8]
	ticker->req = ticker->ack + 1;
   1117c:	78a3      	ldrb	r3, [r4, #2]
   1117e:	3301      	adds	r3, #1
   11180:	7063      	strb	r3, [r4, #1]
			if (user_op) {
   11182:	2d00      	cmp	r5, #0
   11184:	d0ad      	beq.n	110e2 <ticker_job+0x7b6>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   11186:	f04f 0200 	mov.w	r2, #0
	if (user_op->fp_op_func) {
   1118a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   1118c:	702a      	strb	r2, [r5, #0]
	user_op->status = status;
   1118e:	2200      	movs	r2, #0
   11190:	62aa      	str	r2, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
   11192:	b113      	cbz	r3, 1119a <ticker_job+0x86e>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   11194:	6b29      	ldr	r1, [r5, #48]	; 0x30
   11196:	4610      	mov	r0, r2
   11198:	4798      	blx	r3
				if ((ticker->ticks_periodic == 0U) &&
   1119a:	6863      	ldr	r3, [r4, #4]
   1119c:	2b00      	cmp	r3, #0
   1119e:	d1a0      	bne.n	110e2 <ticker_job+0x7b6>
					ticker->op_context =
   111a0:	e9d5 230b 	ldrd	r2, r3, [r5, #44]	; 0x2c
   111a4:	e9c4 2308 	strd	r2, r3, [r4, #32]
		while ((insert_head != TICKER_NULL) ||
   111a8:	9b01      	ldr	r3, [sp, #4]
   111aa:	2bff      	cmp	r3, #255	; 0xff
   111ac:	d19c      	bne.n	110e8 <ticker_job+0x7bc>
   111ae:	f898 3002 	ldrb.w	r3, [r8, #2]
   111b2:	42b3      	cmp	r3, r6
   111b4:	d030      	beq.n	11218 <ticker_job+0x8ec>
   111b6:	9f05      	ldr	r7, [sp, #20]
				if (first == user->count_user_op) {
   111b8:	f898 0000 	ldrb.w	r0, [r8]
				user_op = &user_ops[user_ops_first];
   111bc:	eb06 0246 	add.w	r2, r6, r6, lsl #1
   111c0:	eb06 0282 	add.w	r2, r6, r2, lsl #2
				first = user_ops_first + 1;
   111c4:	3601      	adds	r6, #1
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   111c6:	f817 1022 	ldrb.w	r1, [r7, r2, lsl #2]
				first = user_ops_first + 1;
   111ca:	b2f6      	uxtb	r6, r6
					first = 0U;
   111cc:	42b0      	cmp	r0, r6
   111ce:	bf08      	it	eq
   111d0:	2600      	moveq	r6, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   111d2:	2904      	cmp	r1, #4
				user_op = &user_ops[user_ops_first];
   111d4:	eb07 0582 	add.w	r5, r7, r2, lsl #2
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   111d8:	d11c      	bne.n	11214 <ticker_job+0x8e8>
				id_insert = user_op->id;
   111da:	f895 a001 	ldrb.w	sl, [r5, #1]
				ticker = &node[id_insert];
   111de:	9b03      	ldr	r3, [sp, #12]
   111e0:	eb0a 0c4a 	add.w	ip, sl, sl, lsl #1
   111e4:	eb03 140c 	add.w	r4, r3, ip, lsl #4
   111e8:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
				if (((ticker->req -
   111ec:	7861      	ldrb	r1, [r4, #1]
				      ticker->ack) & 0xff) != 0U) {
   111ee:	78a3      	ldrb	r3, [r4, #2]
				if (((ticker->req -
   111f0:	1ac9      	subs	r1, r1, r3
   111f2:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
   111f6:	f000 80ad 	beq.w	11354 <ticker_job+0xa28>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   111fa:	f04f 0300 	mov.w	r3, #0
   111fe:	f807 3022 	strb.w	r3, [r7, r2, lsl #2]
	if (user_op->fp_op_func) {
   11202:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->status = status;
   11204:	2201      	movs	r2, #1
   11206:	62aa      	str	r2, [r5, #40]	; 0x28
		user_op->fp_op_func(user_op->status, user_op->op_context);
   11208:	4610      	mov	r0, r2
	if (user_op->fp_op_func) {
   1120a:	b10b      	cbz	r3, 11210 <ticker_job+0x8e4>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   1120c:	6b29      	ldr	r1, [r5, #48]	; 0x30
   1120e:	4798      	blx	r3
		while ((insert_head != TICKER_NULL) ||
   11210:	f898 3002 	ldrb.w	r3, [r8, #2]
   11214:	42b3      	cmp	r3, r6
   11216:	d1cf      	bne.n	111b8 <ticker_job+0x88c>
	while (count_user--) {
   11218:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1121a:	4542      	cmp	r2, r8
   1121c:	f1a8 0308 	sub.w	r3, r8, #8
   11220:	f000 80df 	beq.w	113e2 <ticker_job+0xab6>
   11224:	4698      	mov	r8, r3
   11226:	e757      	b.n	110d8 <ticker_job+0x7ac>
			    ticker->fp_op_func) {
   11228:	6a23      	ldr	r3, [r4, #32]
			if ((((ticker->req - ticker->ack) & 0xff) == 1U) &&
   1122a:	2b00      	cmp	r3, #0
   1122c:	f43f af3a 	beq.w	110a4 <ticker_job+0x778>
				ticker->fp_op_func(TICKER_STATUS_FAILURE,
   11230:	6a61      	ldr	r1, [r4, #36]	; 0x24
   11232:	4798      	blx	r3
   11234:	78a2      	ldrb	r2, [r4, #2]
   11236:	e735      	b.n	110a4 <ticker_job+0x778>
			if (TICKER_RESCHEDULE_PENDING(ticker)) {
   11238:	b112      	cbz	r2, 11240 <ticker_job+0x914>
   1123a:	7a13      	ldrb	r3, [r2, #8]
   1123c:	2b01      	cmp	r3, #1
   1123e:	d03f      	beq.n	112c0 <ticker_job+0x994>
				if (!ticker->lazy_current) {
   11240:	8be3      	ldrh	r3, [r4, #30]
   11242:	930a      	str	r3, [sp, #40]	; 0x28
   11244:	2b00      	cmp	r3, #0
   11246:	d170      	bne.n	1132a <ticker_job+0x9fe>
					lazy_periodic = ticker->lazy_periodic;
   11248:	8ba3      	ldrh	r3, [r4, #28]
   1124a:	7866      	ldrb	r6, [r4, #1]
   1124c:	9304      	str	r3, [sp, #16]
   1124e:	469e      	mov	lr, r3
				while (count--) {
   11250:	1c47      	adds	r7, r0, #1
   11252:	9709      	str	r7, [sp, #36]	; 0x24
   11254:	e9d4 c208 	ldrd	ip, r2, [r4, #32]
				ticks_to_expire = 0U;
   11258:	2300      	movs	r3, #0
   1125a:	910b      	str	r1, [sp, #44]	; 0x2c
   1125c:	4677      	mov	r7, lr
   1125e:	e00a      	b.n	11276 <ticker_job+0x94a>
   11260:	00023ff4 	.word	0x00023ff4
   11264:	00023fb4 	.word	0x00023fb4
   11268:	000240b8 	.word	0x000240b8
				while (count--) {
   1126c:	3f01      	subs	r7, #1
   1126e:	4686      	mov	lr, r0
   11270:	1c79      	adds	r1, r7, #1
					ticks_to_expire +=
   11272:	4473      	add	r3, lr
				while (count--) {
   11274:	d012      	beq.n	1129c <ticker_job+0x970>
	if ((ticker->remainder_current < BIT(31)) &&
   11276:	f8df e2d8 	ldr.w	lr, [pc, #728]	; 11550 <ticker_job+0xc24>
   1127a:	49b4      	ldr	r1, [pc, #720]	; (1154c <ticker_job+0xc20>)
	ticker->remainder_current += ticker->remainder_periodic;
   1127c:	4462      	add	r2, ip
	if ((ticker->remainder_current < BIT(31)) &&
   1127e:	4496      	add	lr, r2
   11280:	458e      	cmp	lr, r1
   11282:	d8f3      	bhi.n	1126c <ticker_job+0x940>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   11284:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
   11288:	f1a2 72e8 	sub.w	r2, r2, #30408704	; 0x1d00000
				while (count--) {
   1128c:	3f01      	subs	r7, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   1128e:	f5a2 32d4 	sub.w	r2, r2, #108544	; 0x1a800
				while (count--) {
   11292:	1c79      	adds	r1, r7, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   11294:	f5a2 72a5 	sub.w	r2, r2, #330	; 0x14a
					ticks_to_expire +=
   11298:	4473      	add	r3, lr
				while (count--) {
   1129a:	d1ec      	bne.n	11276 <ticker_job+0x94a>
   1129c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1129e:	6262      	str	r2, [r4, #36]	; 0x24
				if (!ticker->must_expire) {
   112a0:	2900      	cmp	r1, #0
   112a2:	f000 814b 	beq.w	1153c <ticker_job+0xc10>
				ticker->lazy_current += (lazy_periodic + lazy);
   112a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   112a8:	9904      	ldr	r1, [sp, #16]
   112aa:	440a      	add	r2, r1
   112ac:	83e2      	strh	r2, [r4, #30]
   112ae:	e009      	b.n	112c4 <ticker_job+0x998>
		is_must_expire_skip = (ticker->must_expire &&
   112b0:	460e      	mov	r6, r1
   112b2:	e6c9      	b.n	11048 <ticker_job+0x71c>
		ticker->ticks_to_expire = 0U;
   112b4:	60a6      	str	r6, [r4, #8]
		instance->ticker_id_head = ticker->next;
   112b6:	f88b c01d 	strb.w	ip, [fp, #29]
		if ((ticker->ticks_periodic != 0U) ||
   112ba:	2800      	cmp	r0, #0
   112bc:	f43f aee7 	beq.w	1108e <ticker_job+0x762>
				ticker->req = ticker->ack;
   112c0:	78a6      	ldrb	r6, [r4, #2]
   112c2:	464b      	mov	r3, r9
			ticks_to_expire_prep(ticker, instance->ticks_current,
   112c4:	9805      	ldr	r0, [sp, #20]
   112c6:	f8db 2014 	ldr.w	r2, [fp, #20]
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
   112ca:	6961      	ldr	r1, [r4, #20]
			ticks_to_expire_prep(ticker, instance->ticks_current,
   112cc:	eb00 0708 	add.w	r7, r0, r8
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   112d0:	1ab8      	subs	r0, r7, r2
   112d2:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   112d6:	d10e      	bne.n	112f6 <ticker_job+0x9ca>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   112d8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
   112dc:	4403      	add	r3, r0
	if (ticks_to_expire > ticks_to_expire_minus) {
   112de:	4299      	cmp	r1, r3
   112e0:	d211      	bcs.n	11306 <ticker_job+0x9da>
		ticks_to_expire -= ticks_to_expire_minus;
   112e2:	1a5b      	subs	r3, r3, r1
		ticks_to_expire_minus = 0U;
   112e4:	2100      	movs	r1, #0
			ticker->next = *insert_head;
   112e6:	9a01      	ldr	r2, [sp, #4]
   112e8:	7022      	strb	r2, [r4, #0]
			ticker->req++;
   112ea:	3601      	adds	r6, #1
   112ec:	7066      	strb	r6, [r4, #1]
	ticker->ticks_to_expire = ticks_to_expire;
   112ee:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   112f0:	6161      	str	r1, [r4, #20]
			ticker->req++;
   112f2:	9501      	str	r5, [sp, #4]
   112f4:	e6d7      	b.n	110a6 <ticker_job+0x77a>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   112f6:	1bd2      	subs	r2, r2, r7
   112f8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
   112fc:	429a      	cmp	r2, r3
   112fe:	d211      	bcs.n	11324 <ticker_job+0x9f8>
			ticks_to_expire -= delta_current_start;
   11300:	1a9b      	subs	r3, r3, r2
	if (ticks_to_expire > ticks_to_expire_minus) {
   11302:	4299      	cmp	r1, r3
   11304:	d3ed      	bcc.n	112e2 <ticker_job+0x9b6>
   11306:	1ac9      	subs	r1, r1, r3
		ticks_to_expire = 0U;
   11308:	2300      	movs	r3, #0
   1130a:	e7ec      	b.n	112e6 <ticker_job+0x9ba>
		    (((ticker->req - ticker->ack) & 0xff) == 2U) &&
   1130c:	2e00      	cmp	r6, #0
   1130e:	f47f aeb6 	bne.w	1107e <ticker_job+0x752>
		    !is_must_expire_skip &&
   11312:	b112      	cbz	r2, 1131a <ticker_job+0x9ee>
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
   11314:	7a13      	ldrb	r3, [r2, #8]
   11316:	2b01      	cmp	r3, #1
   11318:	d0cc      	beq.n	112b4 <ticker_job+0x988>
			instance->ticker_id_slot_previous = id_expired;
   1131a:	f88b 501c 	strb.w	r5, [fp, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
   1131e:	f8cb 7018 	str.w	r7, [fp, #24]
   11322:	e6ac      	b.n	1107e <ticker_job+0x752>
			ticks_to_expire_minus +=
   11324:	4411      	add	r1, r2
   11326:	1ac9      	subs	r1, r1, r3
	if (ticks_to_expire > ticks_to_expire_minus) {
   11328:	e7ee      	b.n	11308 <ticker_job+0x9dc>
					ticker->req = ticker->ack;
   1132a:	f04f 0e00 	mov.w	lr, #0
   1132e:	78a6      	ldrb	r6, [r4, #2]
					lazy_periodic = 0U;
   11330:	f8cd e010 	str.w	lr, [sp, #16]
   11334:	e78c      	b.n	11250 <ticker_job+0x924>
	ticker_new->next = current;
   11336:	461a      	mov	r2, r3
	ticker_new->ticks_to_expire = ticks_to_expire;
   11338:	6081      	str	r1, [r0, #8]
	ticker_new->next = current;
   1133a:	f880 c000 	strb.w	ip, [r0]
   1133e:	4663      	mov	r3, ip
		node[previous].next = id;
   11340:	b212      	sxth	r2, r2
   11342:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   11346:	0112      	lsls	r2, r2, #4
   11348:	f807 a002 	strb.w	sl, [r7, r2]
   1134c:	e70d      	b.n	1116a <ticker_job+0x83e>
   1134e:	9a04      	ldr	r2, [sp, #16]
   11350:	4661      	mov	r1, ip
   11352:	e703      	b.n	1115c <ticker_job+0x830>
	ticker->must_expire = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 1U :
   11354:	8aaf      	ldrh	r7, [r5, #20]
				ticker_job_op_start(ticker, user_op,
   11356:	f8db e014 	ldr.w	lr, [fp, #20]
	ticker->must_expire = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 1U :
   1135a:	6a68      	ldr	r0, [r5, #36]	; 0x24
   1135c:	f64f 79ff 	movw	r9, #65535	; 0xffff
   11360:	454f      	cmp	r7, r9
   11362:	e9d5 2303 	ldrd	r2, r3, [r5, #12]
   11366:	d02e      	beq.n	113c6 <ticker_job+0xa9a>
   11368:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
	ticker->ext_data = start->ext_data;
   1136c:	62a0      	str	r0, [r4, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
   1136e:	6062      	str	r2, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
   11370:	6223      	str	r3, [r4, #32]
	ticker->timeout_func = start->fp_timeout_func;
   11372:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   11376:	6868      	ldr	r0, [r5, #4]
	ticker->ticks_slot = start->ticks_slot;
   11378:	61a2      	str	r2, [r4, #24]
	ticker->context = start->context;
   1137a:	6a2a      	ldr	r2, [r5, #32]
	ticker->lazy_periodic = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 0U :
   1137c:	83a7      	strh	r7, [r4, #28]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   1137e:	eba0 070e 	sub.w	r7, r0, lr
	ticker->context = start->context;
   11382:	e9c4 3203 	strd	r3, r2, [r4, #12]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   11386:	023a      	lsls	r2, r7, #8
	ticker->ticks_to_expire = start->ticks_first;
   11388:	68ab      	ldr	r3, [r5, #8]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   1138a:	d40c      	bmi.n	113a6 <ticker_job+0xa7a>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1138c:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
   11390:	443b      	add	r3, r7
	if (ticks_to_expire > ticks_to_expire_minus) {
   11392:	b18b      	cbz	r3, 113b8 <ticker_job+0xa8c>
	ticker->ticks_to_expire = ticks_to_expire;
   11394:	60a3      	str	r3, [r4, #8]
	ticker->remainder_current = 0U;
   11396:	2300      	movs	r3, #0
   11398:	6263      	str	r3, [r4, #36]	; 0x24
	ticker->lazy_current = 0U;
   1139a:	83e3      	strh	r3, [r4, #30]
	ticker->force = 1U;
   1139c:	f04f 0301 	mov.w	r3, #1
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   113a0:	6161      	str	r1, [r4, #20]
	ticker->force = 1U;
   113a2:	70e3      	strb	r3, [r4, #3]
}
   113a4:	e6af      	b.n	11106 <ticker_job+0x7da>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   113a6:	ebae 0200 	sub.w	r2, lr, r0
   113aa:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
   113ae:	4293      	cmp	r3, r2
   113b0:	d905      	bls.n	113be <ticker_job+0xa92>
			ticks_to_expire -= delta_current_start;
   113b2:	1a9b      	subs	r3, r3, r2
	if (ticks_to_expire > ticks_to_expire_minus) {
   113b4:	2b00      	cmp	r3, #0
   113b6:	d1ed      	bne.n	11394 <ticker_job+0xa68>
		ticks_to_expire_minus -= ticks_to_expire;
   113b8:	4619      	mov	r1, r3
		ticks_to_expire = 0U;
   113ba:	2300      	movs	r3, #0
   113bc:	e7ea      	b.n	11394 <ticker_job+0xa68>
			    (delta_current_start - ticks_to_expire);
   113be:	1ad3      	subs	r3, r2, r3
		ticks_to_expire_minus -= ticks_to_expire;
   113c0:	4619      	mov	r1, r3
		ticks_to_expire = 0U;
   113c2:	2300      	movs	r3, #0
   113c4:	e7e6      	b.n	11394 <ticker_job+0xa68>
	ticker->must_expire = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 1U :
   113c6:	f04f 0701 	mov.w	r7, #1
   113ca:	f884 702c 	strb.w	r7, [r4, #44]	; 0x2c
	ticker->ext_data = start->ext_data;
   113ce:	62a0      	str	r0, [r4, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
   113d0:	6062      	str	r2, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
   113d2:	6223      	str	r3, [r4, #32]
	ticker->lazy_periodic = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 0U :
   113d4:	460f      	mov	r7, r1
   113d6:	e7cc      	b.n	11372 <ticker_job+0xa46>
	ticker_new->next = current;
   113d8:	f807 300c 	strb.w	r3, [r7, ip]
		instance->ticker_id_head = id;
   113dc:	f88b a01d 	strb.w	sl, [fp, #29]
	if (current != TICKER_NULL) {
   113e0:	e6cc      	b.n	1117c <ticker_job+0x850>
   113e2:	f8db 3000 	ldr.w	r3, [fp]
   113e6:	9303      	str	r3, [sp, #12]
	while (rescheduling) {
   113e8:	f89b 701d 	ldrb.w	r7, [fp, #29]
   113ec:	9e03      	ldr	r6, [sp, #12]
	uint8_t  rescheduled = 0U;
   113ee:	2300      	movs	r3, #0
   113f0:	46ba      	mov	sl, r7
		while (ticker_id_head != TICKER_NULL) {
   113f2:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
   113f6:	d010      	beq.n	1141a <ticker_job+0xaee>
   113f8:	46d1      	mov	r9, sl
			ticker = &nodes[ticker_id_head];
   113fa:	fa0f f289 	sxth.w	r2, r9
   113fe:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   11402:	eb06 1202 	add.w	r2, r6, r2, lsl #4
			ext_data = ticker->ext_data;
   11406:	6a97      	ldr	r7, [r2, #40]	; 0x28
			if (ext_data && ext_data->reschedule_state ==
   11408:	b117      	cbz	r7, 11410 <ticker_job+0xae4>
   1140a:	7a39      	ldrb	r1, [r7, #8]
   1140c:	2901      	cmp	r1, #1
   1140e:	d014      	beq.n	1143a <ticker_job+0xb0e>
			ticker_id_head = ticker->next;
   11410:	f892 9000 	ldrb.w	r9, [r2]
		while (ticker_id_head != TICKER_NULL) {
   11414:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   11418:	d1ef      	bne.n	113fa <ticker_job+0xace>
	return rescheduled;
   1141a:	4657      	mov	r7, sl
		if (ticker_job_reschedule_in_window(instance, ticks_elapsed)) {
   1141c:	2b00      	cmp	r3, #0
   1141e:	f43f ad8a 	beq.w	10f36 <ticker_job+0x60a>
	if (instance->ticker_id_head != ticker_id_old_head) {
   11422:	9a06      	ldr	r2, [sp, #24]
   11424:	42ba      	cmp	r2, r7
   11426:	f47f ad8a 	bne.w	10f3e <ticker_job+0x612>
	if (!pending) {
   1142a:	9a08      	ldr	r2, [sp, #32]
   1142c:	2a00      	cmp	r2, #0
   1142e:	f000 817c 	beq.w	1172a <ticker_job+0xdfe>
	instance->job_guard = 0U;
   11432:	2300      	movs	r3, #0
   11434:	f88b 301e 	strb.w	r3, [fp, #30]
	if (flag_compare_update) {
   11438:	e58a      	b.n	10f50 <ticker_job+0x624>
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
   1143a:	f89b 301c 	ldrb.w	r3, [fp, #28]
   1143e:	2bff      	cmp	r3, #255	; 0xff
   11440:	d071      	beq.n	11526 <ticker_job+0xbfa>
			instance->ticks_slot_previous > ticks_elapsed) {
   11442:	f8db 0018 	ldr.w	r0, [fp, #24]
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
   11446:	9b02      	ldr	r3, [sp, #8]
   11448:	4283      	cmp	r3, r0
   1144a:	d26c      	bcs.n	11526 <ticker_job+0xbfa>
			window_start_ticks = instance->ticks_slot_previous -
   1144c:	1ac0      	subs	r0, r0, r3
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   1144e:	e9d7 4300 	ldrd	r4, r3, [r7]
   11452:	42a3      	cmp	r3, r4
		ticker_id_iter = nodes[ticker_id_head].next;
   11454:	f892 c000 	ldrb.w	ip, [r2]
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   11458:	d26d      	bcs.n	11536 <ticker_job+0xc0a>
		while (ticker_id_iter != TICKER_NULL &&
   1145a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
			ticks_slot_window = ext_data->ticks_slot_window -
   1145e:	eba4 0403 	sub.w	r4, r4, r3
		while (ticker_id_iter != TICKER_NULL &&
   11462:	d068      	beq.n	11536 <ticker_job+0xc0a>
		       ticks_start_offset + ticker->ticks_slot <=
   11464:	6995      	ldr	r5, [r2, #24]
		while (ticker_id_iter != TICKER_NULL &&
   11466:	42ac      	cmp	r4, r5
   11468:	f04f 0300 	mov.w	r3, #0
   1146c:	d333      	bcc.n	114d6 <ticker_job+0xbaa>
   1146e:	469e      	mov	lr, r3
   11470:	9501      	str	r5, [sp, #4]
   11472:	4661      	mov	r1, ip
   11474:	9203      	str	r2, [sp, #12]
   11476:	e01d      	b.n	114b4 <ticker_job+0xb88>
			if (node->ticks_to_expire >
   11478:	f8d1 8008 	ldr.w	r8, [r1, #8]
					MIN(ticks_slot_window,
   1147c:	f1a8 0304 	sub.w	r3, r8, #4
			if (node->ticks_to_expire >
   11480:	f1b8 0f04 	cmp.w	r8, #4
					MIN(ticks_slot_window,
   11484:	4473      	add	r3, lr
			if (node->ticks_to_expire >
   11486:	d909      	bls.n	1149c <ticker_job+0xb70>
				window_end_ticks =
   11488:	42a3      	cmp	r3, r4
			if (window_end_ticks > ticks_start_offset +
   1148a:	9a01      	ldr	r2, [sp, #4]
				window_end_ticks =
   1148c:	bf28      	it	cs
   1148e:	4623      	movcs	r3, r4
			if (window_end_ticks > ticks_start_offset +
   11490:	4293      	cmp	r3, r2
   11492:	d903      	bls.n	1149c <ticker_job+0xb70>
			if (ticks_to_expire != 0U &&
   11494:	1b5b      	subs	r3, r3, r5
   11496:	d001      	beq.n	1149c <ticker_job+0xb70>
   11498:	4283      	cmp	r3, r0
   1149a:	d21b      	bcs.n	114d4 <ticker_job+0xba8>
			window_start_ticks  = node->ticks_to_expire +
   1149c:	6988      	ldr	r0, [r1, #24]
			ticker_id_iter = node->next;
   1149e:	7809      	ldrb	r1, [r1, #0]
			ticks_start_offset += node->ticks_to_expire;
   114a0:	44c6      	add	lr, r8
			window_start_ticks  = node->ticks_to_expire +
   114a2:	4440      	add	r0, r8
			ticks_to_expire     = ticks_slot_window -
   114a4:	1b63      	subs	r3, r4, r5
		       ticks_start_offset + ticker->ticks_slot <=
   114a6:	eb0e 0205 	add.w	r2, lr, r5
		while (ticker_id_iter != TICKER_NULL &&
   114aa:	29ff      	cmp	r1, #255	; 0xff
		       ticks_start_offset + ticker->ticks_slot <=
   114ac:	9201      	str	r2, [sp, #4]
		while (ticker_id_iter != TICKER_NULL &&
   114ae:	d011      	beq.n	114d4 <ticker_job+0xba8>
   114b0:	4294      	cmp	r4, r2
   114b2:	d30f      	bcc.n	114d4 <ticker_job+0xba8>
			node = &nodes[ticker_id_iter];
   114b4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   114b8:	eb06 1101 	add.w	r1, r6, r1, lsl #4
			if (node->ext_data &&
   114bc:	f8d1 8028 	ldr.w	r8, [r1, #40]	; 0x28
   114c0:	f1b8 0f00 	cmp.w	r8, #0
   114c4:	d0d8      	beq.n	11478 <ticker_job+0xb4c>
   114c6:	f898 8008 	ldrb.w	r8, [r8, #8]
   114ca:	f1b8 0f01 	cmp.w	r8, #1
   114ce:	d1d3      	bne.n	11478 <ticker_job+0xb4c>
				ticker_id_iter = node->next;
   114d0:	7809      	ldrb	r1, [r1, #0]
				continue;
   114d2:	e7e8      	b.n	114a6 <ticker_job+0xb7a>
   114d4:	9a03      	ldr	r2, [sp, #12]
		ticker->ticks_to_expire = ticks_to_expire;
   114d6:	6093      	str	r3, [r2, #8]
   114d8:	4664      	mov	r4, ip
   114da:	f04f 0eff 	mov.w	lr, #255	; 0xff
   114de:	e000      	b.n	114e2 <ticker_job+0xbb6>
   114e0:	4604      	mov	r4, r0
			node = &nodes[ticker_id_iter];
   114e2:	b221      	sxth	r1, r4
   114e4:	eb01 0041 	add.w	r0, r1, r1, lsl #1
   114e8:	eb06 1800 	add.w	r8, r6, r0, lsl #4
   114ec:	0100      	lsls	r0, r0, #4
			if (ticker->ticks_to_expire > node->ticks_to_expire) {
   114ee:	f8d8 5008 	ldr.w	r5, [r8, #8]
   114f2:	429d      	cmp	r5, r3
   114f4:	d24e      	bcs.n	11594 <ticker_job+0xc68>
				ticker->ticks_to_expire -=
   114f6:	1b5b      	subs	r3, r3, r5
   114f8:	6093      	str	r3, [r2, #8]
			ticker_id_iter = node->next;
   114fa:	5c30      	ldrb	r0, [r6, r0]
		while (ticker_id_iter != TICKER_NULL) {
   114fc:	28ff      	cmp	r0, #255	; 0xff
   114fe:	46a6      	mov	lr, r4
   11500:	d1ee      	bne.n	114e0 <ticker_job+0xbb4>
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
   11502:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   11506:	0109      	lsls	r1, r1, #4
			instance->ticker_id_head = nodes[ticker_id_head].next;
   11508:	f88b c01d 	strb.w	ip, [fp, #29]
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
   1150c:	5c73      	ldrb	r3, [r6, r1]
   1150e:	7013      	strb	r3, [r2, #0]
			nodes[ticker_id_prev].next = ticker_id_head;
   11510:	f806 9001 	strb.w	r9, [r6, r1]
   11514:	46e2      	mov	sl, ip
		ticker->lazy_current--;
   11516:	8bd3      	ldrh	r3, [r2, #30]
   11518:	3b01      	subs	r3, #1
   1151a:	83d3      	strh	r3, [r2, #30]
		ext_data->reschedule_state =
   1151c:	f04f 0202 	mov.w	r2, #2
		rescheduled  = 1U;
   11520:	2301      	movs	r3, #1
		ext_data->reschedule_state =
   11522:	723a      	strb	r2, [r7, #8]
		rescheduled  = 1U;
   11524:	e765      	b.n	113f2 <ticker_job+0xac6>
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   11526:	e9d7 4300 	ldrd	r4, r3, [r7]
   1152a:	42a3      	cmp	r3, r4
		ticker_id_iter = nodes[ticker_id_head].next;
   1152c:	f892 c000 	ldrb.w	ip, [r2]
		window_start_ticks = 0U;
   11530:	f04f 0000 	mov.w	r0, #0
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   11534:	d391      	bcc.n	1145a <ticker_job+0xb2e>
		ticker->ticks_to_expire = ticks_to_expire;
   11536:	2300      	movs	r3, #0
   11538:	6093      	str	r3, [r2, #8]
		while (ticker_id_iter != TICKER_NULL) {
   1153a:	e7ec      	b.n	11516 <ticker_job+0xbea>
					while (ticks_to_expire <
   1153c:	459a      	cmp	sl, r3
   1153e:	f67f aeb2 	bls.w	112a6 <ticker_job+0x97a>
   11542:	f100 0e01 	add.w	lr, r0, #1
   11546:	9409      	str	r4, [sp, #36]	; 0x24
   11548:	e00a      	b.n	11560 <ticker_job+0xc34>
   1154a:	bf00      	nop
   1154c:	7f172b59 	.word	0x7f172b59
   11550:	ff172b5a 	.word	0xff172b5a
   11554:	4607      	mov	r7, r0
						ticks_to_expire +=
   11556:	443b      	add	r3, r7
						lazy++;
   11558:	3101      	adds	r1, #1
					while (ticks_to_expire <
   1155a:	459a      	cmp	sl, r3
						lazy++;
   1155c:	b289      	uxth	r1, r1
					while (ticks_to_expire <
   1155e:	d911      	bls.n	11584 <ticker_job+0xc58>
	if ((ticker->remainder_current < BIT(31)) &&
   11560:	4f81      	ldr	r7, [pc, #516]	; (11768 <ticker_job+0xe3c>)
   11562:	4c82      	ldr	r4, [pc, #520]	; (1176c <ticker_job+0xe40>)
	ticker->remainder_current += ticker->remainder_periodic;
   11564:	4462      	add	r2, ip
	if ((ticker->remainder_current < BIT(31)) &&
   11566:	19d7      	adds	r7, r2, r7
   11568:	42a7      	cmp	r7, r4
   1156a:	d8f3      	bhi.n	11554 <ticker_job+0xc28>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   1156c:	4677      	mov	r7, lr
   1156e:	f1a2 72e8 	sub.w	r2, r2, #30408704	; 0x1d00000
						ticks_to_expire +=
   11572:	443b      	add	r3, r7
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   11574:	f5a2 32d4 	sub.w	r2, r2, #108544	; 0x1a800
						lazy++;
   11578:	3101      	adds	r1, #1
					while (ticks_to_expire <
   1157a:	459a      	cmp	sl, r3
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   1157c:	f5a2 72a5 	sub.w	r2, r2, #330	; 0x14a
						lazy++;
   11580:	b289      	uxth	r1, r1
					while (ticks_to_expire <
   11582:	d8ed      	bhi.n	11560 <ticker_job+0xc34>
   11584:	9804      	ldr	r0, [sp, #16]
   11586:	9c09      	ldr	r4, [sp, #36]	; 0x24
   11588:	4408      	add	r0, r1
   1158a:	b281      	uxth	r1, r0
   1158c:	9104      	str	r1, [sp, #16]
   1158e:	6262      	str	r2, [r4, #36]	; 0x24
   11590:	e689      	b.n	112a6 <ticker_job+0x97a>
   11592:	4770      	bx	lr
				node->ticks_to_expire -=
   11594:	1aeb      	subs	r3, r5, r3
		if (ticker_id_prev != TICKER_NULL) {
   11596:	f1be 0fff 	cmp.w	lr, #255	; 0xff
				node->ticks_to_expire -=
   1159a:	f8c8 3008 	str.w	r3, [r8, #8]
		if (ticker_id_prev != TICKER_NULL) {
   1159e:	d0ba      	beq.n	11516 <ticker_job+0xbea>
   115a0:	fa0f f18e 	sxth.w	r1, lr
   115a4:	e7ad      	b.n	11502 <ticker_job+0xbd6>
	if (!pending) {
   115a6:	9b08      	ldr	r3, [sp, #32]
   115a8:	2b00      	cmp	r3, #0
   115aa:	f000 80a6 	beq.w	116fa <ticker_job+0xdce>
	instance->job_guard = 0U;
   115ae:	2300      	movs	r3, #0
   115b0:	f88b 301e 	strb.w	r3, [fp, #30]
	if (flag_compare_update) {
   115b4:	9b07      	ldr	r3, [sp, #28]
   115b6:	2b00      	cmp	r3, #0
   115b8:	f040 80c4 	bne.w	11744 <ticker_job+0xe18>
   115bc:	f89b 201f 	ldrb.w	r2, [fp, #31]
	if (instance->worker_trigger) {
   115c0:	b16a      	cbz	r2, 115de <ticker_job+0xcb2>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   115c2:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
   115c6:	465b      	mov	r3, fp
   115c8:	2201      	movs	r2, #1
   115ca:	2103      	movs	r1, #3
   115cc:	2004      	movs	r0, #4
   115ce:	46a4      	mov	ip, r4
}
   115d0:	b00f      	add	sp, #60	; 0x3c
   115d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   115d6:	4760      	bx	ip
	instance->job_guard = 0U;
   115d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   115da:	f88b 301e 	strb.w	r3, [fp, #30]
}
   115de:	b00f      	add	sp, #60	; 0x3c
   115e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ticker->ticks_to_expire -= ticks_elapsed;
   115e4:	eba3 0309 	sub.w	r3, r3, r9
   115e8:	60a3      	str	r3, [r4, #8]
			break;
   115ea:	f8db 3000 	ldr.w	r3, [fp]
   115ee:	9303      	str	r3, [sp, #12]
   115f0:	e560      	b.n	110b4 <ticker_job+0x788>
	count_user = instance->count_user;
   115f2:	f89b 3009 	ldrb.w	r3, [fp, #9]
	users = &instance->users[0];
   115f6:	f8db 6004 	ldr.w	r6, [fp, #4]
	while (count_user--) {
   115fa:	1e5c      	subs	r4, r3, #1
   115fc:	b2e4      	uxtb	r4, r4
   115fe:	2b00      	cmp	r3, #0
   11600:	f43f aca1 	beq.w	10f46 <ticker_job+0x61a>
		flag_compare_update = 1U;
   11604:	2301      	movs	r3, #1
   11606:	9307      	str	r3, [sp, #28]
   11608:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
		uop->status = TICKER_STATUS_SUCCESS;
   1160c:	f04f 0900 	mov.w	r9, #0
		while (user->first != user->last) {
   11610:	7863      	ldrb	r3, [r4, #1]
   11612:	78e1      	ldrb	r1, [r4, #3]
		user_op = &user->user_op[0];
   11614:	6865      	ldr	r5, [r4, #4]
		while (user->first != user->last) {
   11616:	4299      	cmp	r1, r3
   11618:	d10c      	bne.n	11634 <ticker_job+0xd08>
   1161a:	e060      	b.n	116de <ticker_job+0xdb2>
	switch (uop->op) {
   1161c:	2b01      	cmp	r3, #1
   1161e:	d05a      	beq.n	116d6 <ticker_job+0xdaa>
			first = user->first + 1;
   11620:	7863      	ldrb	r3, [r4, #1]
			if (first == user->count_user_op) {
   11622:	7822      	ldrb	r2, [r4, #0]
			first = user->first + 1;
   11624:	3301      	adds	r3, #1
   11626:	b2db      	uxtb	r3, r3
				first = 0U;
   11628:	429a      	cmp	r2, r3
   1162a:	bf08      	it	eq
   1162c:	2300      	moveq	r3, #0
		while (user->first != user->last) {
   1162e:	4299      	cmp	r1, r3
			user->first = first;
   11630:	7063      	strb	r3, [r4, #1]
		while (user->first != user->last) {
   11632:	d054      	beq.n	116de <ticker_job+0xdb2>
			ticker_job_op_inquire(instance, &user_op[user->first]);
   11634:	b21b      	sxth	r3, r3
   11636:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   1163a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   1163e:	eb05 0283 	add.w	r2, r5, r3, lsl #2
	switch (uop->op) {
   11642:	f815 3023 	ldrb.w	r3, [r5, r3, lsl #2]
   11646:	2b02      	cmp	r3, #2
   11648:	d01b      	beq.n	11682 <ticker_job+0xd56>
   1164a:	2b03      	cmp	r3, #3
   1164c:	d1e6      	bne.n	1161c <ticker_job+0xcf0>
		if (uop->id < instance->count_node) {
   1164e:	7853      	ldrb	r3, [r2, #1]
   11650:	f89b 1008 	ldrb.w	r1, [fp, #8]
   11654:	4299      	cmp	r1, r3
   11656:	d911      	bls.n	1167c <ticker_job+0xd50>
			node[uop->id].priority =
   11658:	f8db 1000 	ldr.w	r1, [fp]
   1165c:	7910      	ldrb	r0, [r2, #4]
   1165e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   11662:	eb01 1303 	add.w	r3, r1, r3, lsl #4
   11666:	f883 002d 	strb.w	r0, [r3, #45]	; 0x2d
			uop->status = TICKER_STATUS_SUCCESS;
   1166a:	f8c2 9028 	str.w	r9, [r2, #40]	; 0x28
		fp_op_func = uop->fp_op_func;
   1166e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	if (fp_op_func) {
   11670:	b113      	cbz	r3, 11678 <ticker_job+0xd4c>
		fp_op_func(uop->status, uop->op_context);
   11672:	6b11      	ldr	r1, [r2, #48]	; 0x30
   11674:	6a90      	ldr	r0, [r2, #40]	; 0x28
   11676:	4798      	blx	r3
   11678:	78e1      	ldrb	r1, [r4, #3]
   1167a:	e7d1      	b.n	11620 <ticker_job+0xcf4>
			uop->status = TICKER_STATUS_FAILURE;
   1167c:	2301      	movs	r3, #1
   1167e:	6293      	str	r3, [r2, #40]	; 0x28
   11680:	e7f5      	b.n	1166e <ticker_job+0xd42>
		ticker_by_next_slot_get(instance,
   11682:	e9d2 7001 	ldrd	r7, r0, [r2, #4]
	_ticker_id_head = *ticker_id_head;
   11686:	f897 e000 	ldrb.w	lr, [r7]
		ticker_by_next_slot_get(instance,
   1168a:	f8d2 c00c 	ldr.w	ip, [r2, #12]
	node = instance->nodes;
   1168e:	f8db 1000 	ldr.w	r1, [fp]
	if ((_ticker_id_head == TICKER_NULL) ||
   11692:	f8db 8014 	ldr.w	r8, [fp, #20]
   11696:	f1be 0fff 	cmp.w	lr, #255	; 0xff
   1169a:	d002      	beq.n	116a2 <ticker_job+0xd76>
   1169c:	6803      	ldr	r3, [r0, #0]
   1169e:	4543      	cmp	r3, r8
   116a0:	d024      	beq.n	116ec <ticker_job+0xdc0>
		_ticker_id_head = instance->ticker_id_head;
   116a2:	f89b 301d 	ldrb.w	r3, [fp, #29]
		*ticks_current = instance->ticks_current;
   116a6:	f8c0 8000 	str.w	r8, [r0]
		_ticks_to_expire = 0U;
   116aa:	f04f 0e00 	mov.w	lr, #0
   116ae:	e00d      	b.n	116cc <ticker_job+0xda0>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0U)) {
   116b0:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   116b4:	eb01 1800 	add.w	r8, r1, r0, lsl #4
   116b8:	0100      	lsls	r0, r0, #4
   116ba:	f8d8 a008 	ldr.w	sl, [r8, #8]
	while ((_ticker_id_head != TICKER_NULL) &&
   116be:	f8d8 8018 	ldr.w	r8, [r8, #24]
   116c2:	44d6      	add	lr, sl
   116c4:	f1b8 0f00 	cmp.w	r8, #0
   116c8:	d102      	bne.n	116d0 <ticker_job+0xda4>
		_ticker_id_head = ticker->next;
   116ca:	5c0b      	ldrb	r3, [r1, r0]
	while ((_ticker_id_head != TICKER_NULL) &&
   116cc:	2bff      	cmp	r3, #255	; 0xff
   116ce:	d1ef      	bne.n	116b0 <ticker_job+0xd84>
	*ticker_id_head = _ticker_id_head;
   116d0:	703b      	strb	r3, [r7, #0]
	*ticks_to_expire = _ticks_to_expire;
   116d2:	f8cc e000 	str.w	lr, [ip]
		fp_op_func = uop->fp_op_func;
   116d6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
		uop->status = TICKER_STATUS_SUCCESS;
   116d8:	f8c2 9028 	str.w	r9, [r2, #40]	; 0x28
		break;
   116dc:	e7c8      	b.n	11670 <ticker_job+0xd44>
	while (count_user--) {
   116de:	42a6      	cmp	r6, r4
   116e0:	f1a4 0308 	sub.w	r3, r4, #8
   116e4:	f43f af63 	beq.w	115ae <ticker_job+0xc82>
   116e8:	461c      	mov	r4, r3
   116ea:	e791      	b.n	11610 <ticker_job+0xce4>
		ticker = &node[_ticker_id_head];
   116ec:	eb0e 034e 	add.w	r3, lr, lr, lsl #1
   116f0:	011b      	lsls	r3, r3, #4
	_ticks_to_expire = *ticks_to_expire;
   116f2:	f8dc e000 	ldr.w	lr, [ip]
		_ticker_id_head = ticker->next;
   116f6:	5ccb      	ldrb	r3, [r1, r3]
	while ((_ticker_id_head != TICKER_NULL) &&
   116f8:	e7e8      	b.n	116cc <ticker_job+0xda0>
	count_user = instance->count_user;
   116fa:	f89b 3009 	ldrb.w	r3, [fp, #9]
	users = &instance->users[0];
   116fe:	f8db 6004 	ldr.w	r6, [fp, #4]
	while (count_user--) {
   11702:	1e5c      	subs	r4, r3, #1
   11704:	b2e4      	uxtb	r4, r4
   11706:	2b00      	cmp	r3, #0
   11708:	f47f af7e 	bne.w	11608 <ticker_job+0xcdc>
   1170c:	e74f      	b.n	115ae <ticker_job+0xc82>
		if (cntr_stop() == 0) {
   1170e:	f009 f981 	bl	1aa14 <cntr_stop>
   11712:	2800      	cmp	r0, #0
   11714:	f47f af52 	bne.w	115bc <ticker_job+0xc90>
			instance->ticks_slot_previous = 0U;
   11718:	f8cb 0018 	str.w	r0, [fp, #24]
			instance->ticks_current = cntr_cnt_get();
   1171c:	f009 f9a0 	bl	1aa60 <cntr_cnt_get>
   11720:	f89b 201f 	ldrb.w	r2, [fp, #31]
   11724:	f8cb 0014 	str.w	r0, [fp, #20]
   11728:	e74a      	b.n	115c0 <ticker_job+0xc94>
	count_user = instance->count_user;
   1172a:	f89b 2009 	ldrb.w	r2, [fp, #9]
	users = &instance->users[0];
   1172e:	f8db 6004 	ldr.w	r6, [fp, #4]
	while (count_user--) {
   11732:	1e54      	subs	r4, r2, #1
   11734:	b2e4      	uxtb	r4, r4
   11736:	2a00      	cmp	r2, #0
   11738:	f47f af65 	bne.w	11606 <ticker_job+0xcda>
	instance->job_guard = 0U;
   1173c:	9b08      	ldr	r3, [sp, #32]
   1173e:	f88b 301e 	strb.w	r3, [fp, #30]
	if (flag_compare_update) {
   11742:	e405      	b.n	10f50 <ticker_job+0x624>
   11744:	f89b 701d 	ldrb.w	r7, [fp, #29]
   11748:	e402      	b.n	10f50 <ticker_job+0x624>
		ticks_current = cntr_cnt_get();
   1174a:	f009 f989 	bl	1aa60 <cntr_cnt_get>
   1174e:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
   11750:	f009 f950 	bl	1a9f4 <cntr_start>
   11754:	f89b 701d 	ldrb.w	r7, [fp, #29]
   11758:	2800      	cmp	r0, #0
   1175a:	f47f ac00 	bne.w	10f5e <ticker_job+0x632>
			instance->ticks_current = ticks_current;
   1175e:	f8cb 4014 	str.w	r4, [fp, #20]
   11762:	f7ff bbfc 	b.w	10f5e <ticker_job+0x632>
   11766:	bf00      	nop
   11768:	ff172b5a 	.word	0xff172b5a
   1176c:	7f172b59 	.word	0x7f172b59

00011770 <ticker_init>:
{
   11770:	b4f0      	push	{r4, r5, r6, r7}
   11772:	9f04      	ldr	r7, [sp, #16]
   11774:	f89d 4014 	ldrb.w	r4, [sp, #20]
   11778:	9e06      	ldr	r6, [sp, #24]
	if (instance_index >= TICKER_INSTANCE_MAX) {
   1177a:	2800      	cmp	r0, #0
   1177c:	d13e      	bne.n	117fc <ticker_init+0x8c>
	instance->count_node = count_node;
   1177e:	f8df c084 	ldr.w	ip, [pc, #132]	; 11804 <ticker_init+0x94>
	while (count_node--) {
   11782:	1e4d      	subs	r5, r1, #1
	instance->count_node = count_node;
   11784:	f88c 1008 	strb.w	r1, [ip, #8]
	instance->nodes = node;
   11788:	f8cc 2000 	str.w	r2, [ip]
	while (count_node--) {
   1178c:	b2ed      	uxtb	r5, r5
   1178e:	b149      	cbz	r1, 117a4 <ticker_init+0x34>
   11790:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   11794:	eb02 1105 	add.w	r1, r2, r5, lsl #4
   11798:	4291      	cmp	r1, r2
		instance->nodes[count_node].priority = 0;
   1179a:	f881 002d 	strb.w	r0, [r1, #45]	; 0x2d
	while (count_node--) {
   1179e:	f1a1 0130 	sub.w	r1, r1, #48	; 0x30
   117a2:	d1f9      	bne.n	11798 <ticker_init+0x28>
	while (count_user--) {
   117a4:	1e5a      	subs	r2, r3, #1
	instance->count_user = count_user;
   117a6:	f88c 3009 	strb.w	r3, [ip, #9]
	instance->users = user;
   117aa:	f8cc 7004 	str.w	r7, [ip, #4]
	while (count_user--) {
   117ae:	b2d2      	uxtb	r2, r2
   117b0:	b17b      	cbz	r3, 117d2 <ticker_init+0x62>
   117b2:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
		users[count_user].user_op = user_op_;
   117b6:	6056      	str	r6, [r2, #4]
		user_op_ += users[count_user].count_user_op;
   117b8:	4611      	mov	r1, r2
   117ba:	f812 3908 	ldrb.w	r3, [r2], #-8
   117be:	eb03 0043 	add.w	r0, r3, r3, lsl #1
		count_op -= users[count_user].count_user_op;
   117c2:	1ae4      	subs	r4, r4, r3
	while (count_user--) {
   117c4:	428f      	cmp	r7, r1
		user_op_ += users[count_user].count_user_op;
   117c6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
		count_op -= users[count_user].count_user_op;
   117ca:	b2e4      	uxtb	r4, r4
		user_op_ += users[count_user].count_user_op;
   117cc:	eb06 0683 	add.w	r6, r6, r3, lsl #2
	while (count_user--) {
   117d0:	d1f1      	bne.n	117b6 <ticker_init+0x46>
	if (count_op) {
   117d2:	b99c      	cbnz	r4, 117fc <ticker_init+0x8c>
	instance->caller_id_get_cb = caller_id_get_cb;
   117d4:	9a07      	ldr	r2, [sp, #28]
   117d6:	f8cc 2020 	str.w	r2, [ip, #32]
	instance->sched_cb = sched_cb;
   117da:	9a08      	ldr	r2, [sp, #32]
   117dc:	f8cc 2024 	str.w	r2, [ip, #36]	; 0x24
	instance->ticker_id_slot_previous = TICKER_NULL;
   117e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
	instance->trigger_set_cb = trigger_set_cb;
   117e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
	instance->ticks_elapsed_first = 0U;
   117e6:	f8ac 400a 	strh.w	r4, [ip, #10]
	return TICKER_STATUS_SUCCESS;
   117ea:	4620      	mov	r0, r4
	instance->ticks_slot_previous = 0U;
   117ec:	e9cc 4405 	strd	r4, r4, [ip, #20]
}
   117f0:	bcf0      	pop	{r4, r5, r6, r7}
	instance->trigger_set_cb = trigger_set_cb;
   117f2:	f8cc 2028 	str.w	r2, [ip, #40]	; 0x28
	instance->ticker_id_slot_previous = TICKER_NULL;
   117f6:	f8ac 301c 	strh.w	r3, [ip, #28]
}
   117fa:	4770      	bx	lr
		return TICKER_STATUS_FAILURE;
   117fc:	2001      	movs	r0, #1
}
   117fe:	bcf0      	pop	{r4, r5, r6, r7}
   11800:	4770      	bx	lr
   11802:	bf00      	nop
   11804:	20002260 	.word	0x20002260

00011808 <ticker_trigger>:
	if (instance->sched_cb) {
   11808:	4b0a      	ldr	r3, [pc, #40]	; (11834 <ticker_trigger+0x2c>)
   1180a:	222c      	movs	r2, #44	; 0x2c
   1180c:	fb02 3200 	mla	r2, r2, r0, r3
{
   11810:	b410      	push	{r4}
	if (instance->sched_cb) {
   11812:	6a54      	ldr	r4, [r2, #36]	; 0x24
   11814:	b15c      	cbz	r4, 1182e <ticker_trigger+0x26>
	instance = &_instance[instance_index];
   11816:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   1181a:	eb00 0042 	add.w	r0, r0, r2, lsl #1
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
   1181e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   11822:	46a4      	mov	ip, r4
   11824:	2201      	movs	r2, #1
}
   11826:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
   11828:	2103      	movs	r1, #3
   1182a:	2002      	movs	r0, #2
   1182c:	4760      	bx	ip
}
   1182e:	bc10      	pop	{r4}
   11830:	4770      	bx	lr
   11832:	bf00      	nop
   11834:	20002260 	.word	0x20002260

00011838 <ticker_start_ext>:
{
   11838:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   1183c:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 118e0 <ticker_start_ext+0xa8>
{
   11840:	f8bd e02c 	ldrh.w	lr, [sp, #44]	; 0x2c
	user = &instance->users[user_id];
   11844:	272c      	movs	r7, #44	; 0x2c
   11846:	fb07 8700 	mla	r7, r7, r0, r8
{
   1184a:	4604      	mov	r4, r0
	user = &instance->users[user_id];
   1184c:	687d      	ldr	r5, [r7, #4]
   1184e:	eb05 0cc1 	add.w	ip, r5, r1, lsl #3
	if (last >= user->count_user_op) {
   11852:	f815 9031 	ldrb.w	r9, [r5, r1, lsl #3]
	last = user->last + 1;
   11856:	f89c 6003 	ldrb.w	r6, [ip, #3]
	struct ticker_instance *instance = &_instance[instance_index];
   1185a:	eb04 0584 	add.w	r5, r4, r4, lsl #2
   1185e:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	last = user->last + 1;
   11862:	1c75      	adds	r5, r6, #1
{
   11864:	4608      	mov	r0, r1
	last = user->last + 1;
   11866:	b2ed      	uxtb	r5, r5
	if (last == user->first) {
   11868:	f89c 1001 	ldrb.w	r1, [ip, #1]
		last = 0U;
   1186c:	45a9      	cmp	r9, r5
   1186e:	bf98      	it	ls
   11870:	2500      	movls	r5, #0
	if (last == user->first) {
   11872:	42a9      	cmp	r1, r5
	struct ticker_instance *instance = &_instance[instance_index];
   11874:	eb08 0884 	add.w	r8, r8, r4, lsl #2
	if (last == user->first) {
   11878:	d02f      	beq.n	118da <ticker_start_ext+0xa2>
	user_op = &user->user_op[user->last];
   1187a:	f8dc 1004 	ldr.w	r1, [ip, #4]
   1187e:	eb06 0446 	add.w	r4, r6, r6, lsl #1
   11882:	eb06 0684 	add.w	r6, r6, r4, lsl #2
   11886:	eb01 0486 	add.w	r4, r1, r6, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_START;
   1188a:	f04f 0904 	mov.w	r9, #4
   1188e:	f801 9026 	strb.w	r9, [r1, r6, lsl #2]
	user_op->params.start.ticks_at_start = ticks_anchor;
   11892:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
   11894:	9b08      	ldr	r3, [sp, #32]
   11896:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
   11898:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1189a:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
   1189c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1189e:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
   118a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   118a2:	61a3      	str	r3, [r4, #24]
	user_op->params.start.ext_data = ext_data;
   118a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   118a6:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->params.start.fp_timeout_func = fp_timeout_func;
   118a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   118aa:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
   118ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   118ae:	6223      	str	r3, [r4, #32]
	user_op->fp_op_func = fp_op_func;
   118b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   118b2:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->status = TICKER_STATUS_BUSY;
   118b4:	2102      	movs	r1, #2
	user_op->op_context = op_context;
   118b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
	user_op->id = ticker_id;
   118b8:	7062      	strb	r2, [r4, #1]
	user_op->params.start.lazy = lazy;
   118ba:	f8a4 e014 	strh.w	lr, [r4, #20]
	user_op->op_context = op_context;
   118be:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   118c0:	62a1      	str	r1, [r4, #40]	; 0x28
	user->last = last;
   118c2:	f88c 5003 	strb.w	r5, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   118c6:	e9d7 3508 	ldrd	r3, r5, [r7, #32]
   118ca:	4798      	blx	r3
   118cc:	4643      	mov	r3, r8
   118ce:	4649      	mov	r1, r9
   118d0:	2200      	movs	r2, #0
   118d2:	47a8      	blx	r5
	return user_op->status;
   118d4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   118d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return TICKER_STATUS_FAILURE;
   118da:	2001      	movs	r0, #1
}
   118dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   118e0:	20002260 	.word	0x20002260

000118e4 <ticker_start>:
{
   118e4:	b530      	push	{r4, r5, lr}
   118e6:	b08b      	sub	sp, #44	; 0x2c
   118e8:	e9dd 540e 	ldrd	r5, r4, [sp, #56]	; 0x38
	return ticker_start_ext(instance_index, user_id, ticker_id,
   118ec:	9500      	str	r5, [sp, #0]
{
   118ee:	9d10      	ldr	r5, [sp, #64]	; 0x40
	return ticker_start_ext(instance_index, user_id, ticker_id,
   118f0:	9401      	str	r4, [sp, #4]
   118f2:	9502      	str	r5, [sp, #8]
{
   118f4:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
   118f8:	9d12      	ldr	r5, [sp, #72]	; 0x48
	return ticker_start_ext(instance_index, user_id, ticker_id,
   118fa:	9403      	str	r4, [sp, #12]
   118fc:	9504      	str	r5, [sp, #16]
{
   118fe:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   11900:	9d14      	ldr	r5, [sp, #80]	; 0x50
	return ticker_start_ext(instance_index, user_id, ticker_id,
   11902:	9405      	str	r4, [sp, #20]
   11904:	9506      	str	r5, [sp, #24]
{
   11906:	9c15      	ldr	r4, [sp, #84]	; 0x54
   11908:	9d16      	ldr	r5, [sp, #88]	; 0x58
	return ticker_start_ext(instance_index, user_id, ticker_id,
   1190a:	9407      	str	r4, [sp, #28]
   1190c:	2400      	movs	r4, #0
   1190e:	e9cd 5408 	strd	r5, r4, [sp, #32]
   11912:	f7ff ff91 	bl	11838 <ticker_start_ext>
}
   11916:	b00b      	add	sp, #44	; 0x2c
   11918:	bd30      	pop	{r4, r5, pc}
   1191a:	bf00      	nop

0001191c <ticker_update>:
	struct ticker_instance *instance = &_instance[instance_index];
   1191c:	f8df c098 	ldr.w	ip, [pc, #152]	; 119b8 <ticker_update+0x9c>
{
   11920:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->users[user_id];
   11924:	272c      	movs	r7, #44	; 0x2c
   11926:	fb07 c700 	mla	r7, r7, r0, ip
{
   1192a:	4604      	mov	r4, r0
	user = &instance->users[user_id];
   1192c:	687d      	ldr	r5, [r7, #4]
{
   1192e:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   11932:	f89d e030 	ldrb.w	lr, [sp, #48]	; 0x30
   11936:	4608      	mov	r0, r1
	user = &instance->users[user_id];
   11938:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
	if (last >= user->count_user_op) {
   1193c:	f815 a030 	ldrb.w	sl, [r5, r0, lsl #3]
	last = user->last + 1;
   11940:	78ce      	ldrb	r6, [r1, #3]
	if (last == user->first) {
   11942:	f891 9001 	ldrb.w	r9, [r1, #1]
	struct ticker_instance *instance = &_instance[instance_index];
   11946:	eb04 0584 	add.w	r5, r4, r4, lsl #2
   1194a:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	last = user->last + 1;
   1194e:	1c75      	adds	r5, r6, #1
   11950:	b2ed      	uxtb	r5, r5
		last = 0U;
   11952:	45aa      	cmp	sl, r5
   11954:	bf98      	it	ls
   11956:	2500      	movls	r5, #0
	if (last == user->first) {
   11958:	45a9      	cmp	r9, r5
	struct ticker_instance *instance = &_instance[instance_index];
   1195a:	eb0c 0a84 	add.w	sl, ip, r4, lsl #2
	if (last == user->first) {
   1195e:	d028      	beq.n	119b2 <ticker_update+0x96>
	user_op = &user->user_op[user->last];
   11960:	f8d1 c004 	ldr.w	ip, [r1, #4]
   11964:	eb06 0446 	add.w	r4, r6, r6, lsl #1
   11968:	eb06 0684 	add.w	r6, r6, r4, lsl #2
   1196c:	eb0c 0486 	add.w	r4, ip, r6, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
   11970:	f04f 0905 	mov.w	r9, #5
   11974:	f80c 9026 	strb.w	r9, [ip, r6, lsl #2]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
   11978:	6063      	str	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
   1197a:	9b08      	ldr	r3, [sp, #32]
   1197c:	60a3      	str	r3, [r4, #8]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
   1197e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11980:	60e3      	str	r3, [r4, #12]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
   11982:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11984:	6123      	str	r3, [r4, #16]
	user_op->fp_op_func = fp_op_func;
   11986:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   11988:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->status = TICKER_STATUS_BUSY;
   1198a:	2602      	movs	r6, #2
	user_op->op_context = op_context;
   1198c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	user_op->id = ticker_id;
   1198e:	7062      	strb	r2, [r4, #1]
	user_op->params.update.force = force;
   11990:	f884 e016 	strb.w	lr, [r4, #22]
	user_op->op_context = op_context;
   11994:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->params.update.lazy = lazy;
   11996:	f8a4 8014 	strh.w	r8, [r4, #20]
	user_op->status = TICKER_STATUS_BUSY;
   1199a:	62a6      	str	r6, [r4, #40]	; 0x28
	user->last = last;
   1199c:	70cd      	strb	r5, [r1, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   1199e:	e9d7 3508 	ldrd	r3, r5, [r7, #32]
   119a2:	4798      	blx	r3
   119a4:	4653      	mov	r3, sl
   119a6:	2200      	movs	r2, #0
   119a8:	2104      	movs	r1, #4
   119aa:	47a8      	blx	r5
	return user_op->status;
   119ac:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   119ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
   119b2:	2001      	movs	r0, #1
}
   119b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   119b8:	20002260 	.word	0x20002260

000119bc <ticker_stop>:
	struct ticker_instance *instance = &_instance[instance_index];
   119bc:	f8df c084 	ldr.w	ip, [pc, #132]	; 11a44 <ticker_stop+0x88>
{
   119c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	user = &instance->users[user_id];
   119c4:	272c      	movs	r7, #44	; 0x2c
   119c6:	fb07 c700 	mla	r7, r7, r0, ip
{
   119ca:	4604      	mov	r4, r0
	user = &instance->users[user_id];
   119cc:	687d      	ldr	r5, [r7, #4]
{
   119ce:	4608      	mov	r0, r1
	user = &instance->users[user_id];
   119d0:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
	if (last >= user->count_user_op) {
   119d4:	f815 8030 	ldrb.w	r8, [r5, r0, lsl #3]
	last = user->last + 1;
   119d8:	78ce      	ldrb	r6, [r1, #3]
	if (last == user->first) {
   119da:	f891 e001 	ldrb.w	lr, [r1, #1]
	struct ticker_instance *instance = &_instance[instance_index];
   119de:	eb04 0584 	add.w	r5, r4, r4, lsl #2
   119e2:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	last = user->last + 1;
   119e6:	1c75      	adds	r5, r6, #1
   119e8:	b2ed      	uxtb	r5, r5
		last = 0U;
   119ea:	45a8      	cmp	r8, r5
   119ec:	bf98      	it	ls
   119ee:	2500      	movls	r5, #0
	if (last == user->first) {
   119f0:	45ae      	cmp	lr, r5
	struct ticker_instance *instance = &_instance[instance_index];
   119f2:	eb0c 0484 	add.w	r4, ip, r4, lsl #2
	if (last == user->first) {
   119f6:	d021      	beq.n	11a3c <ticker_stop+0x80>
	user_op = &user->user_op[user->last];
   119f8:	f8d1 c004 	ldr.w	ip, [r1, #4]
   119fc:	eb06 0e46 	add.w	lr, r6, r6, lsl #1
   11a00:	eb06 068e 	add.w	r6, r6, lr, lsl #2
   11a04:	eb0c 0886 	add.w	r8, ip, r6, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_STOP;
   11a08:	f04f 0e06 	mov.w	lr, #6
   11a0c:	f80c e026 	strb.w	lr, [ip, r6, lsl #2]
	user_op->fp_op_func = fp_op_func;
   11a10:	f8c8 302c 	str.w	r3, [r8, #44]	; 0x2c
	user_op->status = TICKER_STATUS_BUSY;
   11a14:	2602      	movs	r6, #2
	user_op->op_context = op_context;
   11a16:	9b06      	ldr	r3, [sp, #24]
	user_op->id = ticker_id;
   11a18:	f888 2001 	strb.w	r2, [r8, #1]
	user_op->op_context = op_context;
   11a1c:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   11a20:	f8c8 6028 	str.w	r6, [r8, #40]	; 0x28
	user->last = last;
   11a24:	70cd      	strb	r5, [r1, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   11a26:	e9d7 3508 	ldrd	r3, r5, [r7, #32]
   11a2a:	4798      	blx	r3
   11a2c:	4623      	mov	r3, r4
   11a2e:	2200      	movs	r2, #0
   11a30:	2104      	movs	r1, #4
   11a32:	47a8      	blx	r5
	return user_op->status;
   11a34:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
}
   11a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   11a3c:	2001      	movs	r0, #1
}
   11a3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11a42:	bf00      	nop
   11a44:	20002260 	.word	0x20002260

00011a48 <ticker_ticks_now_get>:
	return cntr_cnt_get();
   11a48:	f009 b80a 	b.w	1aa60 <cntr_cnt_get>

00011a4c <ll_addr_get>:
static uint8_t pub_addr[BDADDR_SIZE];
static uint8_t rnd_addr[BDADDR_SIZE];

uint8_t *ll_addr_get(uint8_t addr_type, uint8_t *bdaddr)
{
	if (addr_type > 1) {
   11a4c:	2801      	cmp	r0, #1
   11a4e:	d813      	bhi.n	11a78 <ll_addr_get+0x2c>
{
   11a50:	b508      	push	{r3, lr}
		return NULL;
	}

	if (addr_type) {
   11a52:	b948      	cbnz	r0, 11a68 <ll_addr_get+0x1c>
		}

		return rnd_addr;
	}

	if (bdaddr) {
   11a54:	b131      	cbz	r1, 11a64 <ll_addr_get+0x18>
		memcpy(bdaddr, pub_addr, BDADDR_SIZE);
   11a56:	4608      	mov	r0, r1
   11a58:	2206      	movs	r2, #6
   11a5a:	4909      	ldr	r1, [pc, #36]	; (11a80 <ll_addr_get+0x34>)
   11a5c:	f00e fa0b 	bl	1fe76 <memcpy>
	}

	return pub_addr;
   11a60:	4807      	ldr	r0, [pc, #28]	; (11a80 <ll_addr_get+0x34>)
}
   11a62:	bd08      	pop	{r3, pc}
	return pub_addr;
   11a64:	4806      	ldr	r0, [pc, #24]	; (11a80 <ll_addr_get+0x34>)
}
   11a66:	bd08      	pop	{r3, pc}
		if (bdaddr) {
   11a68:	b141      	cbz	r1, 11a7c <ll_addr_get+0x30>
			memcpy(bdaddr, rnd_addr, BDADDR_SIZE);
   11a6a:	4608      	mov	r0, r1
   11a6c:	2206      	movs	r2, #6
   11a6e:	4905      	ldr	r1, [pc, #20]	; (11a84 <ll_addr_get+0x38>)
   11a70:	f00e fa01 	bl	1fe76 <memcpy>
		return rnd_addr;
   11a74:	4803      	ldr	r0, [pc, #12]	; (11a84 <ll_addr_get+0x38>)
}
   11a76:	bd08      	pop	{r3, pc}
		return NULL;
   11a78:	2000      	movs	r0, #0
}
   11a7a:	4770      	bx	lr
		return rnd_addr;
   11a7c:	4801      	ldr	r0, [pc, #4]	; (11a84 <ll_addr_get+0x38>)
}
   11a7e:	bd08      	pop	{r3, pc}
   11a80:	2000228c 	.word	0x2000228c
   11a84:	20002294 	.word	0x20002294

00011a88 <ll_addr_set>:

uint32_t ll_addr_set(uint8_t addr_type, uint8_t const *const bdaddr)
{
   11a88:	b570      	push	{r4, r5, r6, lr}
   11a8a:	4606      	mov	r6, r0
			return BT_HCI_ERR_CMD_DISALLOWED;
		}
	}

	if (IS_ENABLED(CONFIG_BT_OBSERVER) &&
	    (ull_scan_is_enabled(0) & (BIT(1) | BIT(2)))) {
   11a8c:	2000      	movs	r0, #0
{
   11a8e:	460d      	mov	r5, r1
	    (ull_scan_is_enabled(0) & (BIT(1) | BIT(2)))) {
   11a90:	f003 f828 	bl	14ae4 <ull_scan_is_enabled>
	if (IS_ENABLED(CONFIG_BT_OBSERVER) &&
   11a94:	f010 0406 	ands.w	r4, r0, #6
   11a98:	d10c      	bne.n	11ab4 <ll_addr_set+0x2c>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	if (addr_type) {
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
   11a9a:	4629      	mov	r1, r5
   11a9c:	2206      	movs	r2, #6
	if (addr_type) {
   11a9e:	b926      	cbnz	r6, 11aaa <ll_addr_set+0x22>
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
   11aa0:	4806      	ldr	r0, [pc, #24]	; (11abc <ll_addr_set+0x34>)
   11aa2:	f00e f9e8 	bl	1fe76 <memcpy>
	}

	return 0;
}
   11aa6:	4620      	mov	r0, r4
   11aa8:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
   11aaa:	4805      	ldr	r0, [pc, #20]	; (11ac0 <ll_addr_set+0x38>)
   11aac:	f00e f9e3 	bl	1fe76 <memcpy>
}
   11ab0:	4620      	mov	r0, r4
   11ab2:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   11ab4:	240c      	movs	r4, #12
}
   11ab6:	4620      	mov	r0, r4
   11ab8:	bd70      	pop	{r4, r5, r6, pc}
   11aba:	bf00      	nop
   11abc:	2000228c 	.word	0x2000228c
   11ac0:	20002294 	.word	0x20002294

00011ac4 <ll_tx_pwr_lvl_get>:
#include "ull_conn_internal.h"

uint8_t ll_tx_pwr_lvl_get(uint8_t handle_type,
		       uint16_t handle, uint8_t type, int8_t *tx_pwr_lvl)
{
	switch (handle_type) {
   11ac4:	2802      	cmp	r0, #2
   11ac6:	d001      	beq.n	11acc <ll_tx_pwr_lvl_get+0x8>
			}
			break;
		}
#endif /* CONFIG_BT_CONN */
		default: {
			return BT_HCI_ERR_UNKNOWN_CMD;
   11ac8:	2001      	movs	r0, #1
		}
	}

	return BT_HCI_ERR_SUCCESS;
}
   11aca:	4770      	bx	lr
{
   11acc:	b538      	push	{r3, r4, r5, lr}
   11ace:	4604      	mov	r4, r0
			conn = ll_connected_get(handle);
   11ad0:	4608      	mov	r0, r1
   11ad2:	461d      	mov	r5, r3
   11ad4:	f003 fc0a 	bl	152ec <ll_connected_get>
			if (!conn) {
   11ad8:	b110      	cbz	r0, 11ae0 <ll_tx_pwr_lvl_get+0x1c>
				*tx_pwr_lvl = RADIO_TXP_DEFAULT;
   11ada:	2000      	movs	r0, #0
   11adc:	7028      	strb	r0, [r5, #0]
}
   11ade:	bd38      	pop	{r3, r4, r5, pc}
				return BT_HCI_ERR_UNKNOWN_CONN_ID;
   11ae0:	4620      	mov	r0, r4
}
   11ae2:	bd38      	pop	{r3, r4, r5, pc}

00011ae4 <ll_tx_pwr_get>:
{
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	*min = lll_radio_tx_pwr_min_get();
	*max = lll_radio_tx_pwr_max_get();
#else
	*min = RADIO_TXP_DEFAULT;
   11ae4:	2300      	movs	r3, #0
   11ae6:	7003      	strb	r3, [r0, #0]
	*max = RADIO_TXP_DEFAULT;
   11ae8:	700b      	strb	r3, [r1, #0]
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */
}
   11aea:	4770      	bx	lr

00011aec <hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int hci_driver_init(struct device *unused)
{
   11aec:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
   11aee:	4802      	ldr	r0, [pc, #8]	; (11af8 <hci_driver_init+0xc>)
   11af0:	f7f8 f93e 	bl	9d70 <bt_hci_driver_register>

	return 0;
}
   11af4:	2000      	movs	r0, #0
   11af6:	bd08      	pop	{r3, pc}
   11af8:	000240e4 	.word	0x000240e4

00011afc <recv_thread>:
{
   11afc:	b5f0      	push	{r4, r5, r6, r7, lr}
	return z_impl_k_queue_get(queue, timeout);
   11afe:	4d37      	ldr	r5, [pc, #220]	; (11bdc <recv_thread+0xe0>)
		LL_ASSERT(0);
   11b00:	4f37      	ldr	r7, [pc, #220]	; (11be0 <recv_thread+0xe4>)
   11b02:	4e38      	ldr	r6, [pc, #224]	; (11be4 <recv_thread+0xe8>)
{
   11b04:	b083      	sub	sp, #12
   11b06:	e015      	b.n	11b34 <recv_thread+0x38>
	switch (class) {
   11b08:	2b00      	cmp	r3, #0
   11b0a:	d13c      	bne.n	11b86 <recv_thread+0x8a>
		LL_ASSERT(0);
   11b0c:	4836      	ldr	r0, [pc, #216]	; (11be8 <recv_thread+0xec>)
   11b0e:	23b4      	movs	r3, #180	; 0xb4
   11b10:	463a      	mov	r2, r7
   11b12:	4631      	mov	r1, r6
   11b14:	f00c fa1d 	bl	1df52 <printk>
   11b18:	4040      	eors	r0, r0
   11b1a:	f380 8811 	msr	BASEPRI, r0
   11b1e:	f04f 0003 	mov.w	r0, #3
   11b22:	df02      	svc	2
	node_rx->hdr.next = NULL;
   11b24:	9b01      	ldr	r3, [sp, #4]
   11b26:	2200      	movs	r2, #0
   11b28:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   11b2a:	a801      	add	r0, sp, #4
   11b2c:	f002 faee 	bl	1410c <ll_rx_mem_release>
	z_impl_k_yield();
   11b30:	f00b fdae 	bl	1d690 <z_impl_k_yield>
	return z_impl_k_queue_get(queue, timeout);
   11b34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   11b38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11b3c:	4628      	mov	r0, r5
   11b3e:	f00b fa97 	bl	1d070 <z_impl_k_queue_get>
		if (node_rx && !buf) {
   11b42:	2800      	cmp	r0, #0
   11b44:	d0f4      	beq.n	11b30 <recv_thread+0x34>
	uint8_t class = node_rx->hdr.user_meta;
   11b46:	7943      	ldrb	r3, [r0, #5]
	buf = encode_node(node_rx, class);
   11b48:	9001      	str	r0, [sp, #4]
	switch (class) {
   11b4a:	2b04      	cmp	r3, #4
   11b4c:	d9dc      	bls.n	11b08 <recv_thread+0xc>
   11b4e:	2b05      	cmp	r3, #5
   11b50:	d1dc      	bne.n	11b0c <recv_thread+0x10>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   11b52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   11b56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11b5a:	2003      	movs	r0, #3
   11b5c:	f7f8 fbae 	bl	a2bc <bt_buf_get_rx>
   11b60:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
   11b62:	4601      	mov	r1, r0
   11b64:	9801      	ldr	r0, [sp, #4]
   11b66:	f000 ff4f 	bl	12a08 <hci_acl_encode>
	node_rx->hdr.next = NULL;
   11b6a:	9b01      	ldr	r3, [sp, #4]
   11b6c:	2200      	movs	r2, #0
   11b6e:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   11b70:	a801      	add	r0, sp, #4
   11b72:	f002 facb 	bl	1410c <ll_rx_mem_release>
		if (buf) {
   11b76:	2c00      	cmp	r4, #0
   11b78:	d0da      	beq.n	11b30 <recv_thread+0x34>
			if (buf->len) {
   11b7a:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
   11b7c:	4620      	mov	r0, r4
			if (buf->len) {
   11b7e:	b1db      	cbz	r3, 11bb8 <recv_thread+0xbc>
				bt_recv(buf);
   11b80:	f7f7 fff6 	bl	9b70 <bt_recv>
   11b84:	e7d4      	b.n	11b30 <recv_thread+0x34>
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
   11b86:	2b02      	cmp	r3, #2
   11b88:	d019      	beq.n	11bbe <recv_thread+0xc2>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   11b8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   11b8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11b92:	2001      	movs	r0, #1
   11b94:	f7f8 fb92 	bl	a2bc <bt_buf_get_rx>
   11b98:	4604      	mov	r4, r0
		if (buf) {
   11b9a:	9801      	ldr	r0, [sp, #4]
   11b9c:	b1cc      	cbz	r4, 11bd2 <recv_thread+0xd6>
			hci_evt_encode(node_rx, buf);
   11b9e:	4621      	mov	r1, r4
   11ba0:	f000 ff6c 	bl	12a7c <hci_evt_encode>
	node_rx->hdr.next = NULL;
   11ba4:	9b01      	ldr	r3, [sp, #4]
   11ba6:	2200      	movs	r2, #0
   11ba8:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   11baa:	a801      	add	r0, sp, #4
   11bac:	f002 faae 	bl	1410c <ll_rx_mem_release>
			if (buf->len) {
   11bb0:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
   11bb2:	4620      	mov	r0, r4
			if (buf->len) {
   11bb4:	2b00      	cmp	r3, #0
   11bb6:	d1e3      	bne.n	11b80 <recv_thread+0x84>
				net_buf_unref(buf);
   11bb8:	f009 ff92 	bl	1bae0 <net_buf_unref>
   11bbc:	e7b8      	b.n	11b30 <recv_thread+0x34>
			buf = bt_buf_get_evt(BT_HCI_EVT_UNKNOWN, true,
   11bbe:	2200      	movs	r2, #0
   11bc0:	2300      	movs	r3, #0
   11bc2:	2101      	movs	r1, #1
   11bc4:	2000      	movs	r0, #0
   11bc6:	f7f8 fbaf 	bl	a328 <bt_buf_get_evt>
   11bca:	4604      	mov	r4, r0
		if (buf) {
   11bcc:	9801      	ldr	r0, [sp, #4]
   11bce:	2c00      	cmp	r4, #0
   11bd0:	d1e5      	bne.n	11b9e <recv_thread+0xa2>
	node_rx->hdr.next = NULL;
   11bd2:	6004      	str	r4, [r0, #0]
	ll_rx_mem_release((void **)&node_rx);
   11bd4:	a801      	add	r0, sp, #4
   11bd6:	f002 fa99 	bl	1410c <ll_rx_mem_release>
		if (buf) {
   11bda:	e7a9      	b.n	11b30 <recv_thread+0x34>
   11bdc:	200008a0 	.word	0x200008a0
   11be0:	00024024 	.word	0x00024024
   11be4:	00024064 	.word	0x00024064
   11be8:	00023ff4 	.word	0x00023ff4

00011bec <prio_recv_thread>:
{
   11bec:	b570      	push	{r4, r5, r6, lr}
	return z_impl_k_sem_take(sem, timeout);
   11bee:	4e1a      	ldr	r6, [pc, #104]	; (11c58 <prio_recv_thread+0x6c>)
				k_fifo_put(&recv_fifo, node_rx);
   11bf0:	4d1a      	ldr	r5, [pc, #104]	; (11c5c <prio_recv_thread+0x70>)
{
   11bf2:	b082      	sub	sp, #8
   11bf4:	e00c      	b.n	11c10 <prio_recv_thread+0x24>
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   11bf6:	f7f8 fb97 	bl	a328 <bt_buf_get_evt>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
   11bfa:	4622      	mov	r2, r4
   11bfc:	f8bd 1002 	ldrh.w	r1, [sp, #2]
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   11c00:	4604      	mov	r4, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
   11c02:	f001 fb49 	bl	13298 <hci_num_cmplt_encode>
			bt_recv_prio(buf);
   11c06:	4620      	mov	r0, r4
   11c08:	f7f8 f85c 	bl	9cc4 <bt_recv_prio>
	z_impl_k_yield();
   11c0c:	f00b fd40 	bl	1d690 <z_impl_k_yield>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   11c10:	f10d 0102 	add.w	r1, sp, #2
   11c14:	a801      	add	r0, sp, #4
   11c16:	f002 f925 	bl	13e64 <ll_rx_get>
   11c1a:	4604      	mov	r4, r0
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   11c1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   11c20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11c24:	2100      	movs	r1, #0
   11c26:	2013      	movs	r0, #19
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   11c28:	2c00      	cmp	r4, #0
   11c2a:	d1e4      	bne.n	11bf6 <prio_recv_thread+0xa>
		if (node_rx) {
   11c2c:	9b01      	ldr	r3, [sp, #4]
   11c2e:	b15b      	cbz	r3, 11c48 <prio_recv_thread+0x5c>
			ll_rx_dequeue();
   11c30:	f002 f9fe 	bl	14030 <ll_rx_dequeue>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   11c34:	9c01      	ldr	r4, [sp, #4]
   11c36:	4620      	mov	r0, r4
   11c38:	f001 fb46 	bl	132c8 <hci_get_class>
				k_fifo_put(&recv_fifo, node_rx);
   11c3c:	9901      	ldr	r1, [sp, #4]
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   11c3e:	7160      	strb	r0, [r4, #5]
				k_fifo_put(&recv_fifo, node_rx);
   11c40:	4628      	mov	r0, r5
   11c42:	f011 f863 	bl	22d0c <k_queue_append>
			continue;
   11c46:	e7e3      	b.n	11c10 <prio_recv_thread+0x24>
	return z_impl_k_sem_take(sem, timeout);
   11c48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   11c4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11c50:	4630      	mov	r0, r6
   11c52:	f00b fdb7 	bl	1d7c4 <z_impl_k_sem_take>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   11c56:	e7db      	b.n	11c10 <prio_recv_thread+0x24>
   11c58:	20000870 	.word	0x20000870
   11c5c:	200008a0 	.word	0x200008a0

00011c60 <hci_driver_send>:
{
   11c60:	b530      	push	{r4, r5, lr}
	if (!buf->len) {
   11c62:	8983      	ldrh	r3, [r0, #12]
{
   11c64:	b083      	sub	sp, #12
	if (!buf->len) {
   11c66:	2b00      	cmp	r3, #0
   11c68:	d03a      	beq.n	11ce0 <hci_driver_send+0x80>
	return (enum bt_buf_type)(*(uint8_t *)net_buf_user_data(buf));
   11c6a:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   11c6c:	4604      	mov	r4, r0
   11c6e:	b31b      	cbz	r3, 11cb8 <hci_driver_send+0x58>
   11c70:	2b02      	cmp	r3, #2
   11c72:	d00f      	beq.n	11c94 <hci_driver_send+0x34>
   11c74:	4921      	ldr	r1, [pc, #132]	; (11cfc <hci_driver_send+0x9c>)
   11c76:	4a22      	ldr	r2, [pc, #136]	; (11d00 <hci_driver_send+0xa0>)
		BT_ERR("Unknown HCI type %u", type);
   11c78:	4822      	ldr	r0, [pc, #136]	; (11d04 <hci_driver_send+0xa4>)
   11c7a:	1a52      	subs	r2, r2, r1
   11c7c:	08d2      	lsrs	r2, r2, #3
   11c7e:	0192      	lsls	r2, r2, #6
   11c80:	4619      	mov	r1, r3
   11c82:	f042 0201 	orr.w	r2, r2, #1
   11c86:	f00c fc31 	bl	1e4ec <log_1>
		return -EINVAL;
   11c8a:	f06f 0515 	mvn.w	r5, #21
}
   11c8e:	4628      	mov	r0, r5
   11c90:	b003      	add	sp, #12
   11c92:	bd30      	pop	{r4, r5, pc}
	err = hci_acl_handle(buf, &evt);
   11c94:	a901      	add	r1, sp, #4
   11c96:	f000 fe1f 	bl	128d8 <hci_acl_handle>
	if (evt) {
   11c9a:	9b01      	ldr	r3, [sp, #4]
	err = hci_acl_handle(buf, &evt);
   11c9c:	4605      	mov	r5, r0
	if (evt) {
   11c9e:	b113      	cbz	r3, 11ca6 <hci_driver_send+0x46>
		bt_recv_prio(evt);
   11ca0:	4618      	mov	r0, r3
   11ca2:	f7f8 f80f 	bl	9cc4 <bt_recv_prio>
	if (!err) {
   11ca6:	2d00      	cmp	r5, #0
   11ca8:	d1f1      	bne.n	11c8e <hci_driver_send+0x2e>
		net_buf_unref(buf);
   11caa:	4620      	mov	r0, r4
   11cac:	f009 ff18 	bl	1bae0 <net_buf_unref>
   11cb0:	2500      	movs	r5, #0
}
   11cb2:	4628      	mov	r0, r5
   11cb4:	b003      	add	sp, #12
   11cb6:	bd30      	pop	{r4, r5, pc}
	evt = hci_cmd_handle(buf, (void **) &node_rx);
   11cb8:	a901      	add	r1, sp, #4
	struct node_rx_pdu *node_rx = NULL;
   11cba:	9301      	str	r3, [sp, #4]
	evt = hci_cmd_handle(buf, (void **) &node_rx);
   11cbc:	f000 f9c8 	bl	12050 <hci_cmd_handle>
	if (evt) {
   11cc0:	2800      	cmp	r0, #0
   11cc2:	d0f2      	beq.n	11caa <hci_driver_send+0x4a>
		bt_recv_prio(evt);
   11cc4:	f7f7 fffe 	bl	9cc4 <bt_recv_prio>
		if (node_rx) {
   11cc8:	9d01      	ldr	r5, [sp, #4]
   11cca:	2d00      	cmp	r5, #0
   11ccc:	d0ed      	beq.n	11caa <hci_driver_send+0x4a>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   11cce:	4628      	mov	r0, r5
   11cd0:	f001 fafa 	bl	132c8 <hci_get_class>
   11cd4:	7168      	strb	r0, [r5, #5]
			k_fifo_put(&recv_fifo, node_rx);
   11cd6:	9901      	ldr	r1, [sp, #4]
   11cd8:	480b      	ldr	r0, [pc, #44]	; (11d08 <hci_driver_send+0xa8>)
   11cda:	f011 f817 	bl	22d0c <k_queue_append>
	if (!err) {
   11cde:	e7e4      	b.n	11caa <hci_driver_send+0x4a>
   11ce0:	4b06      	ldr	r3, [pc, #24]	; (11cfc <hci_driver_send+0x9c>)
   11ce2:	4907      	ldr	r1, [pc, #28]	; (11d00 <hci_driver_send+0xa0>)
		BT_ERR("Empty HCI packet");
   11ce4:	4809      	ldr	r0, [pc, #36]	; (11d0c <hci_driver_send+0xac>)
   11ce6:	1ac9      	subs	r1, r1, r3
   11ce8:	08c9      	lsrs	r1, r1, #3
   11cea:	0189      	lsls	r1, r1, #6
   11cec:	f041 0101 	orr.w	r1, r1, #1
   11cf0:	f00c fbef 	bl	1e4d2 <log_0>
		return -EINVAL;
   11cf4:	f06f 0515 	mvn.w	r5, #21
   11cf8:	e7c9      	b.n	11c8e <hci_driver_send+0x2e>
   11cfa:	bf00      	nop
   11cfc:	000236f0 	.word	0x000236f0
   11d00:	00023730 	.word	0x00023730
   11d04:	0002407c 	.word	0x0002407c
   11d08:	200008a0 	.word	0x200008a0
   11d0c:	00024068 	.word	0x00024068

00011d10 <hci_driver_open>:
{
   11d10:	b5d0      	push	{r4, r6, r7, lr}
	err = ll_init(&sem_prio_recv);
   11d12:	4822      	ldr	r0, [pc, #136]	; (11d9c <hci_driver_open+0x8c>)
{
   11d14:	b088      	sub	sp, #32
	err = ll_init(&sem_prio_recv);
   11d16:	f001 fd9d 	bl	13854 <ll_init>
	if (err) {
   11d1a:	4604      	mov	r4, r0
   11d1c:	2800      	cmp	r0, #0
   11d1e:	d12e      	bne.n	11d7e <hci_driver_open+0x6e>
	hci_init(NULL);
   11d20:	f001 fae8 	bl	132f4 <hci_init>
	k_thread_create(&prio_recv_thread_data, prio_recv_thread_stack,
   11d24:	2600      	movs	r6, #0
   11d26:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   11d28:	f06f 0309 	mvn.w	r3, #9
   11d2c:	9303      	str	r3, [sp, #12]
   11d2e:	e9cd 6706 	strd	r6, r7, [sp, #24]
   11d32:	e9cd 4401 	strd	r4, r4, [sp, #4]
   11d36:	4b1a      	ldr	r3, [pc, #104]	; (11da0 <hci_driver_open+0x90>)
   11d38:	491a      	ldr	r1, [pc, #104]	; (11da4 <hci_driver_open+0x94>)
   11d3a:	9404      	str	r4, [sp, #16]
   11d3c:	9400      	str	r4, [sp, #0]
   11d3e:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
   11d42:	4819      	ldr	r0, [pc, #100]	; (11da8 <hci_driver_open+0x98>)
   11d44:	f00b fda6 	bl	1d894 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   11d48:	4918      	ldr	r1, [pc, #96]	; (11dac <hci_driver_open+0x9c>)
   11d4a:	4817      	ldr	r0, [pc, #92]	; (11da8 <hci_driver_open+0x98>)
   11d4c:	f011 f969 	bl	23022 <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   11d50:	f06f 0307 	mvn.w	r3, #7
   11d54:	9303      	str	r3, [sp, #12]
   11d56:	e9cd 6706 	strd	r6, r7, [sp, #24]
   11d5a:	e9cd 4401 	strd	r4, r4, [sp, #4]
   11d5e:	4b14      	ldr	r3, [pc, #80]	; (11db0 <hci_driver_open+0xa0>)
   11d60:	4914      	ldr	r1, [pc, #80]	; (11db4 <hci_driver_open+0xa4>)
   11d62:	9404      	str	r4, [sp, #16]
   11d64:	9400      	str	r4, [sp, #0]
   11d66:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   11d6a:	4813      	ldr	r0, [pc, #76]	; (11db8 <hci_driver_open+0xa8>)
   11d6c:	f00b fd92 	bl	1d894 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   11d70:	4912      	ldr	r1, [pc, #72]	; (11dbc <hci_driver_open+0xac>)
   11d72:	4811      	ldr	r0, [pc, #68]	; (11db8 <hci_driver_open+0xa8>)
   11d74:	f011 f955 	bl	23022 <z_impl_k_thread_name_set>
}
   11d78:	4620      	mov	r0, r4
   11d7a:	b008      	add	sp, #32
   11d7c:	bdd0      	pop	{r4, r6, r7, pc}
   11d7e:	4b10      	ldr	r3, [pc, #64]	; (11dc0 <hci_driver_open+0xb0>)
   11d80:	4a10      	ldr	r2, [pc, #64]	; (11dc4 <hci_driver_open+0xb4>)
		BT_ERR("LL initialization failed: %d", err);
   11d82:	4811      	ldr	r0, [pc, #68]	; (11dc8 <hci_driver_open+0xb8>)
   11d84:	1ad2      	subs	r2, r2, r3
   11d86:	08d2      	lsrs	r2, r2, #3
   11d88:	0192      	lsls	r2, r2, #6
   11d8a:	f042 0201 	orr.w	r2, r2, #1
   11d8e:	4621      	mov	r1, r4
   11d90:	f00c fbac 	bl	1e4ec <log_1>
}
   11d94:	4620      	mov	r0, r4
   11d96:	b008      	add	sp, #32
   11d98:	bdd0      	pop	{r4, r6, r7, pc}
   11d9a:	bf00      	nop
   11d9c:	20000870 	.word	0x20000870
   11da0:	00011bed 	.word	0x00011bed
   11da4:	2000aed0 	.word	0x2000aed0
   11da8:	20001990 	.word	0x20001990
   11dac:	000240b0 	.word	0x000240b0
   11db0:	00011afd 	.word	0x00011afd
   11db4:	2000b090 	.word	0x2000b090
   11db8:	20001a10 	.word	0x20001a10
   11dbc:	000240bc 	.word	0x000240bc
   11dc0:	000236f0 	.word	0x000236f0
   11dc4:	00023730 	.word	0x00023730
   11dc8:	00024090 	.word	0x00024090

00011dcc <meta_evt>:
{
	return bt_hci_cmd_status_create(_opcode, status);
}

static void *meta_evt(struct net_buf *buf, uint8_t subevt, uint8_t melen)
{
   11dcc:	b570      	push	{r4, r5, r6, lr}
	hdr = net_buf_add(buf, sizeof(*hdr));
   11dce:	f100 0408 	add.w	r4, r0, #8
{
   11dd2:	460e      	mov	r6, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
   11dd4:	4620      	mov	r0, r4
   11dd6:	2102      	movs	r1, #2
{
   11dd8:	4615      	mov	r5, r2
	hdr = net_buf_add(buf, sizeof(*hdr));
   11dda:	f010 fbdd 	bl	22598 <net_buf_simple_add>
	struct bt_hci_evt_le_meta_event *me;

	hci_evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
   11dde:	1c6b      	adds	r3, r5, #1
	hdr->evt = evt;
   11de0:	223e      	movs	r2, #62	; 0x3e
   11de2:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
   11de4:	7043      	strb	r3, [r0, #1]
	me = net_buf_add(buf, sizeof(*me));
   11de6:	2101      	movs	r1, #1
   11de8:	4620      	mov	r0, r4
   11dea:	f010 fbd5 	bl	22598 <net_buf_simple_add>
	me->subevent = subevt;
   11dee:	7006      	strb	r6, [r0, #0]

	return net_buf_add(buf, melen);
   11df0:	4629      	mov	r1, r5
   11df2:	4620      	mov	r0, r4
}
   11df4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return net_buf_add(buf, melen);
   11df8:	f010 bbce 	b.w	22598 <net_buf_simple_add>

00011dfc <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(uint8_t status, struct pdu_data *pdu_data,
				    uint16_t handle, struct net_buf *buf)
{
   11dfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   11e00:	4c17      	ldr	r4, [pc, #92]	; (11e60 <le_remote_feat_complete+0x64>)
   11e02:	6866      	ldr	r6, [r4, #4]
   11e04:	f04f 0900 	mov.w	r9, #0
   11e08:	464c      	mov	r4, r9
   11e0a:	f006 5500 	and.w	r5, r6, #536870912	; 0x20000000
{
   11e0e:	4617      	mov	r7, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   11e10:	ea54 0205 	orrs.w	r2, r4, r5
   11e14:	d009      	beq.n	11e2a <le_remote_feat_complete+0x2e>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
   11e16:	4a13      	ldr	r2, [pc, #76]	; (11e64 <le_remote_feat_complete+0x68>)
   11e18:	6812      	ldr	r2, [r2, #0]
   11e1a:	4606      	mov	r6, r0
   11e1c:	4688      	mov	r8, r1
   11e1e:	f002 0008 	and.w	r0, r2, #8
   11e22:	4649      	mov	r1, r9
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   11e24:	ea50 0201 	orrs.w	r2, r0, r1
   11e28:	d101      	bne.n	11e2e <le_remote_feat_complete+0x32>
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
   11e2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
   11e2e:	4618      	mov	r0, r3
   11e30:	220b      	movs	r2, #11
   11e32:	2104      	movs	r1, #4
   11e34:	f7ff ffca 	bl	11dcc <meta_evt>
	sep->status = status;
   11e38:	7006      	strb	r6, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
   11e3a:	f8a0 7001 	strh.w	r7, [r0, #1]
	if (!status) {
   11e3e:	b93e      	cbnz	r6, 11e50 <le_remote_feat_complete+0x54>
		memcpy(&sep->features[0],
   11e40:	f108 0104 	add.w	r1, r8, #4
   11e44:	3003      	adds	r0, #3
}
   11e46:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		memcpy(&sep->features[0],
   11e4a:	2208      	movs	r2, #8
   11e4c:	f00e b813 	b.w	1fe76 <memcpy>
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
   11e50:	4649      	mov	r1, r9
   11e52:	3003      	adds	r0, #3
}
   11e54:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
   11e58:	2208      	movs	r2, #8
   11e5a:	f00e b837 	b.w	1fecc <memset>
   11e5e:	bf00      	nop
   11e60:	20000108 	.word	0x20000108
   11e64:	20000110 	.word	0x20000110

00011e68 <encrypt_change.part.0>:
static void encrypt_change(uint8_t err, uint16_t handle,
   11e68:	b570      	push	{r4, r5, r6, lr}
	hdr = net_buf_add(buf, sizeof(*hdr));
   11e6a:	f102 0508 	add.w	r5, r2, #8
static void encrypt_change(uint8_t err, uint16_t handle,
   11e6e:	4604      	mov	r4, r0
   11e70:	460e      	mov	r6, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
   11e72:	4628      	mov	r0, r5
   11e74:	2102      	movs	r1, #2
   11e76:	f010 fb8f 	bl	22598 <net_buf_simple_add>
   11e7a:	4603      	mov	r3, r0
	hdr->evt = evt;
   11e7c:	2208      	movs	r2, #8
	hdr->len = len;
   11e7e:	2104      	movs	r1, #4
	hdr->evt = evt;
   11e80:	701a      	strb	r2, [r3, #0]
	hdr->len = len;
   11e82:	7059      	strb	r1, [r3, #1]
	ep = net_buf_add(buf, sizeof(*ep));
   11e84:	4628      	mov	r0, r5
   11e86:	f010 fb87 	bl	22598 <net_buf_simple_add>
	ep->encrypt = !err ? 1 : 0;
   11e8a:	fab4 f384 	clz	r3, r4
   11e8e:	095b      	lsrs	r3, r3, #5
	ep->status = err;
   11e90:	7004      	strb	r4, [r0, #0]
	ep->encrypt = !err ? 1 : 0;
   11e92:	70c3      	strb	r3, [r0, #3]
	ep->handle = sys_cpu_to_le16(handle);
   11e94:	f8a0 6001 	strh.w	r6, [r0, #1]
}
   11e98:	bd70      	pop	{r4, r5, r6, pc}
   11e9a:	bf00      	nop

00011e9c <bt_hci_evt_create>:
{
   11e9c:	b570      	push	{r4, r5, r6, lr}
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   11e9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   11ea2:	460e      	mov	r6, r1
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   11ea4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11ea8:	2100      	movs	r1, #0
{
   11eaa:	4605      	mov	r5, r0
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   11eac:	f7f8 fa3c 	bl	a328 <bt_buf_get_evt>
	hdr = net_buf_add(buf, sizeof(*hdr));
   11eb0:	2102      	movs	r1, #2
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   11eb2:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
   11eb4:	3008      	adds	r0, #8
   11eb6:	f010 fb6f 	bl	22598 <net_buf_simple_add>
   11eba:	4603      	mov	r3, r0
}
   11ebc:	4620      	mov	r0, r4
	hdr->len = len;
   11ebe:	705e      	strb	r6, [r3, #1]
	hdr->evt = evt;
   11ec0:	701d      	strb	r5, [r3, #0]
}
   11ec2:	bd70      	pop	{r4, r5, r6, pc}

00011ec4 <bt_hci_cmd_complete_create>:
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   11ec4:	3103      	adds	r1, #3
{
   11ec6:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   11ec8:	b2c9      	uxtb	r1, r1
{
   11eca:	4605      	mov	r5, r0
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   11ecc:	200e      	movs	r0, #14
   11ece:	f7ff ffe5 	bl	11e9c <bt_hci_evt_create>
	cc = net_buf_add(buf, sizeof(*cc));
   11ed2:	2103      	movs	r1, #3
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   11ed4:	4604      	mov	r4, r0
	cc = net_buf_add(buf, sizeof(*cc));
   11ed6:	3008      	adds	r0, #8
   11ed8:	f010 fb5e 	bl	22598 <net_buf_simple_add>
   11edc:	4603      	mov	r3, r0
	cc->ncmd = 1U;
   11ede:	2201      	movs	r2, #1
	cc->opcode = sys_cpu_to_le16(op);
   11ee0:	f8a0 5001 	strh.w	r5, [r0, #1]
	cc->ncmd = 1U;
   11ee4:	701a      	strb	r2, [r3, #0]
}
   11ee6:	4620      	mov	r0, r4
   11ee8:	bd38      	pop	{r3, r4, r5, pc}
   11eea:	bf00      	nop

00011eec <bt_hci_cmd_status_create>:
{
   11eec:	b570      	push	{r4, r5, r6, lr}
   11eee:	4605      	mov	r5, r0
   11ef0:	460e      	mov	r6, r1
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
   11ef2:	200f      	movs	r0, #15
   11ef4:	2104      	movs	r1, #4
   11ef6:	f7ff ffd1 	bl	11e9c <bt_hci_evt_create>
	cs = net_buf_add(buf, sizeof(*cs));
   11efa:	2104      	movs	r1, #4
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
   11efc:	4604      	mov	r4, r0
	cs = net_buf_add(buf, sizeof(*cs));
   11efe:	3008      	adds	r0, #8
   11f00:	f010 fb4a 	bl	22598 <net_buf_simple_add>
   11f04:	4603      	mov	r3, r0
	cs->ncmd = 1U;
   11f06:	2201      	movs	r2, #1
	cs->status = status;
   11f08:	7006      	strb	r6, [r0, #0]
	cs->opcode = sys_cpu_to_le16(op);
   11f0a:	8045      	strh	r5, [r0, #2]
	cs->ncmd = 1U;
   11f0c:	705a      	strb	r2, [r3, #1]
}
   11f0e:	4620      	mov	r0, r4
   11f10:	bd70      	pop	{r4, r5, r6, pc}
   11f12:	bf00      	nop

00011f14 <hci_cmd_complete>:
{
   11f14:	b538      	push	{r3, r4, r5, lr}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   11f16:	4b06      	ldr	r3, [pc, #24]	; (11f30 <hci_cmd_complete+0x1c>)
{
   11f18:	4605      	mov	r5, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   11f1a:	8818      	ldrh	r0, [r3, #0]
{
   11f1c:	460c      	mov	r4, r1
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   11f1e:	f7ff ffd1 	bl	11ec4 <bt_hci_cmd_complete_create>
	return net_buf_add(*buf, plen);
   11f22:	4621      	mov	r1, r4
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   11f24:	6028      	str	r0, [r5, #0]
}
   11f26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return net_buf_add(*buf, plen);
   11f2a:	3008      	adds	r0, #8
   11f2c:	f010 bb34 	b.w	22598 <net_buf_simple_add>
   11f30:	200096ba 	.word	0x200096ba

00011f34 <hci_vendor_cmd_handle_common>:
{
   11f34:	b570      	push	{r4, r5, r6, lr}
   11f36:	1e43      	subs	r3, r0, #1
   11f38:	b086      	sub	sp, #24
   11f3a:	4614      	mov	r4, r2
   11f3c:	2b09      	cmp	r3, #9
   11f3e:	d806      	bhi.n	11f4e <hci_vendor_cmd_handle_common+0x1a>
   11f40:	e8df f003 	tbb	[pc, r3]
   11f44:	05382109 	.word	0x05382109
   11f48:	53054605 	.word	0x53054605
   11f4c:	7667      	.short	0x7667
	return 0;
   11f4e:	f06f 0015 	mvn.w	r0, #21
}
   11f52:	b006      	add	sp, #24
   11f54:	bd70      	pop	{r4, r5, r6, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp));
   11f56:	4620      	mov	r0, r4
   11f58:	210d      	movs	r1, #13
   11f5a:	f7ff ffdb 	bl	11f14 <hci_cmd_complete>
   11f5e:	4603      	mov	r3, r0
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   11f60:	2202      	movs	r2, #2
	rp->status = 0x00;
   11f62:	2000      	movs	r0, #0
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
   11f64:	2403      	movs	r4, #3
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
   11f66:	2163      	movs	r1, #99	; 0x63
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
   11f68:	71dc      	strb	r4, [r3, #7]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
   11f6a:	7259      	strb	r1, [r3, #9]
	rp->status = 0x00;
   11f6c:	7018      	strb	r0, [r3, #0]
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   11f6e:	7098      	strb	r0, [r3, #2]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
   11f70:	7118      	strb	r0, [r3, #4]
	rp->fw_variant = 0U;
   11f72:	7158      	strb	r0, [r3, #5]
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
   11f74:	7218      	strb	r0, [r3, #8]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
   11f76:	7298      	strb	r0, [r3, #10]
   11f78:	72d8      	strb	r0, [r3, #11]
   11f7a:	7318      	strb	r0, [r3, #12]
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   11f7c:	705a      	strb	r2, [r3, #1]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
   11f7e:	70da      	strb	r2, [r3, #3]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
   11f80:	719a      	strb	r2, [r3, #6]
}
   11f82:	b006      	add	sp, #24
   11f84:	bd70      	pop	{r4, r5, r6, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp));
   11f86:	4620      	mov	r0, r4
   11f88:	2141      	movs	r1, #65	; 0x41
   11f8a:	f7ff ffc3 	bl	11f14 <hci_cmd_complete>
	rp->status = 0x00;
   11f8e:	2400      	movs	r4, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
   11f90:	4605      	mov	r5, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   11f92:	4621      	mov	r1, r4
	rp->status = 0x00;
   11f94:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   11f98:	2240      	movs	r2, #64	; 0x40
   11f9a:	f00d ff97 	bl	1fecc <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
   11f9e:	786a      	ldrb	r2, [r5, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
   11fa0:	78ab      	ldrb	r3, [r5, #2]
	rp->commands[0] |= BIT(5) | BIT(7);
   11fa2:	f062 0258 	orn	r2, r2, #88	; 0x58
	rp->commands[1] |= BIT(0) | BIT(1);
   11fa6:	f043 0303 	orr.w	r3, r3, #3
	return 0;
   11faa:	4620      	mov	r0, r4
	rp->commands[0] |= BIT(5) | BIT(7);
   11fac:	706a      	strb	r2, [r5, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
   11fae:	70ab      	strb	r3, [r5, #2]
}
   11fb0:	b006      	add	sp, #24
   11fb2:	bd70      	pop	{r4, r5, r6, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp));
   11fb4:	4620      	mov	r0, r4
   11fb6:	2109      	movs	r1, #9
   11fb8:	f7ff ffac 	bl	11f14 <hci_cmd_complete>
	rp->status = 0x00;
   11fbc:	2400      	movs	r4, #0
   11fbe:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   11fc2:	4621      	mov	r1, r4
   11fc4:	2208      	movs	r2, #8
   11fc6:	f00d ff81 	bl	1fecc <memset>
	return 0;
   11fca:	4620      	mov	r0, r4
}
   11fcc:	b006      	add	sp, #24
   11fce:	bd70      	pop	{r4, r5, r6, pc}
	ll_addr_set(0, &cmd->bdaddr.val[0]);
   11fd0:	6889      	ldr	r1, [r1, #8]
   11fd2:	2000      	movs	r0, #0
   11fd4:	f7ff fd58 	bl	11a88 <ll_addr_set>
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
   11fd8:	4620      	mov	r0, r4
   11fda:	2101      	movs	r1, #1
   11fdc:	f7ff ff9a 	bl	11f14 <hci_cmd_complete>
   11fe0:	4603      	mov	r3, r0
	ccst->status = 0x00;
   11fe2:	2000      	movs	r0, #0
   11fe4:	7018      	strb	r0, [r3, #0]
}
   11fe6:	b006      	add	sp, #24
   11fe8:	bd70      	pop	{r4, r5, r6, pc}
	const char build_info[] = HCI_VS_BUILD_INFO;
   11fea:	4e18      	ldr	r6, [pc, #96]	; (1204c <hci_vendor_cmd_handle_common+0x118>)
   11fec:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   11fee:	ad01      	add	r5, sp, #4
   11ff0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   11ff2:	6833      	ldr	r3, [r6, #0]
   11ff4:	802b      	strh	r3, [r5, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
   11ff6:	4620      	mov	r0, r4
   11ff8:	2113      	movs	r1, #19
   11ffa:	f7ff ff8b 	bl	11f14 <hci_cmd_complete>
	rp->status = 0x00;
   11ffe:	2400      	movs	r4, #0
   12000:	f800 4b01 	strb.w	r4, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
   12004:	2212      	movs	r2, #18
   12006:	a901      	add	r1, sp, #4
   12008:	f00d ff35 	bl	1fe76 <memcpy>
	return 0;
   1200c:	4620      	mov	r0, r4
}
   1200e:	b006      	add	sp, #24
   12010:	bd70      	pop	{r4, r5, r6, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp) +
   12012:	4620      	mov	r0, r4
   12014:	2118      	movs	r1, #24
   12016:	f7ff ff7d 	bl	11f14 <hci_cmd_complete>
	rp->status = 0x00;
   1201a:	2400      	movs	r4, #0
	rp = hci_cmd_complete(evt, sizeof(*rp) +
   1201c:	4605      	mov	r5, r0
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
   1201e:	2101      	movs	r1, #1
	rp->status = 0x00;
   12020:	f800 4b02 	strb.w	r4, [r0], #2
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
   12024:	f009 fbe6 	bl	1b7f4 <hci_vendor_read_static_addr>
   12028:	7068      	strb	r0, [r5, #1]
	return 0;
   1202a:	4620      	mov	r0, r4
}
   1202c:	b006      	add	sp, #24
   1202e:	bd70      	pop	{r4, r5, r6, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp));
   12030:	4620      	mov	r0, r4
   12032:	2121      	movs	r1, #33	; 0x21
   12034:	f7ff ff6e 	bl	11f14 <hci_cmd_complete>
	rp->status = 0x00;
   12038:	4601      	mov	r1, r0
   1203a:	2400      	movs	r4, #0
   1203c:	f801 4b11 	strb.w	r4, [r1], #17
	hci_vendor_read_key_hierarchy_roots(rp->ir, rp->er);
   12040:	3001      	adds	r0, #1
   12042:	f009 fc49 	bl	1b8d8 <hci_vendor_read_key_hierarchy_roots>
	return 0;
   12046:	4620      	mov	r0, r4
}
   12048:	b006      	add	sp, #24
   1204a:	bd70      	pop	{r4, r5, r6, pc}
   1204c:	000240f8 	.word	0x000240f8

00012050 <hci_cmd_handle>:
{
   12050:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
   12052:	8983      	ldrh	r3, [r0, #12]
{
   12054:	b08f      	sub	sp, #60	; 0x3c
	struct net_buf *evt = NULL;
   12056:	2500      	movs	r5, #0
	if (cmd->len < sizeof(*chdr)) {
   12058:	2b02      	cmp	r3, #2
	struct net_buf *evt = NULL;
   1205a:	9509      	str	r5, [sp, #36]	; 0x24
	if (cmd->len < sizeof(*chdr)) {
   1205c:	f240 80d2 	bls.w	12204 <hci_cmd_handle+0x1b4>
	chdr = net_buf_pull_mem(cmd, sizeof(*chdr));
   12060:	4604      	mov	r4, r0
   12062:	460e      	mov	r6, r1
   12064:	3008      	adds	r0, #8
   12066:	2103      	movs	r1, #3
   12068:	f010 fad3 	bl	22612 <net_buf_simple_pull_mem>
	if (cmd->len < chdr->param_len) {
   1206c:	89a2      	ldrh	r2, [r4, #12]
   1206e:	7883      	ldrb	r3, [r0, #2]
   12070:	429a      	cmp	r2, r3
   12072:	f0c0 80f9 	bcc.w	12268 <hci_cmd_handle+0x218>
	_opcode = sys_le16_to_cpu(chdr->opcode);
   12076:	8805      	ldrh	r5, [r0, #0]
   12078:	4f85      	ldr	r7, [pc, #532]	; (12290 <hci_cmd_handle+0x240>)
	switch (BT_OGF(_opcode)) {
   1207a:	f5b5 5f10 	cmp.w	r5, #9216	; 0x2400
	_opcode = sys_le16_to_cpu(chdr->opcode);
   1207e:	b2a8      	uxth	r0, r5
   12080:	803d      	strh	r5, [r7, #0]
	ocf = BT_OCF(_opcode);
   12082:	f3c5 0309 	ubfx	r3, r5, #0, #10
	switch (BT_OGF(_opcode)) {
   12086:	ea4f 2295 	mov.w	r2, r5, lsr #10
   1208a:	d26b      	bcs.n	12164 <hci_cmd_handle+0x114>
   1208c:	2a00      	cmp	r2, #0
   1208e:	d073      	beq.n	12178 <hci_cmd_handle+0x128>
   12090:	3a01      	subs	r2, #1
   12092:	2a07      	cmp	r2, #7
   12094:	d870      	bhi.n	12178 <hci_cmd_handle+0x128>
   12096:	e8df f002 	tbb	[pc, r2]
   1209a:	6f8b      	.short	0x6f8b
   1209c:	6f745799 	.word	0x6f745799
   120a0:	046f      	.short	0x046f
	switch (ocf) {
   120a2:	3b01      	subs	r3, #1
   120a4:	2b4d      	cmp	r3, #77	; 0x4d
   120a6:	d867      	bhi.n	12178 <hci_cmd_handle+0x128>
   120a8:	e8df f013 	tbh	[pc, r3, lsl #1]
   120ac:	0240024e 	.word	0x0240024e
   120b0:	0066022c 	.word	0x0066022c
   120b4:	00660227 	.word	0x00660227
   120b8:	00660066 	.word	0x00660066
   120bc:	00660066 	.word	0x00660066
   120c0:	01b8021b 	.word	0x01b8021b
   120c4:	01870191 	.word	0x01870191
   120c8:	0205020f 	.word	0x0205020f
   120cc:	01fd0201 	.word	0x01fd0201
   120d0:	01e701eb 	.word	0x01e701eb
   120d4:	01ce01d7 	.word	0x01ce01d7
   120d8:	03a503b1 	.word	0x03a503b1
   120dc:	00660397 	.word	0x00660397
   120e0:	03810066 	.word	0x03810066
   120e4:	00660066 	.word	0x00660066
   120e8:	03720066 	.word	0x03720066
   120ec:	035e0366 	.word	0x035e0366
   120f0:	03420348 	.word	0x03420348
   120f4:	00660066 	.word	0x00660066
   120f8:	03310335 	.word	0x03310335
   120fc:	031b0327 	.word	0x031b0327
   12100:	02f9030a 	.word	0x02f9030a
   12104:	02e102ec 	.word	0x02e102ec
   12108:	029802c0 	.word	0x029802c0
   1210c:	025c0289 	.word	0x025c0289
   12110:	00660066 	.word	0x00660066
   12114:	00660066 	.word	0x00660066
   12118:	00660066 	.word	0x00660066
   1211c:	00660066 	.word	0x00660066
   12120:	00660066 	.word	0x00660066
   12124:	00660066 	.word	0x00660066
   12128:	00660066 	.word	0x00660066
   1212c:	00660066 	.word	0x00660066
   12130:	00660066 	.word	0x00660066
   12134:	00660066 	.word	0x00660066
   12138:	00660066 	.word	0x00660066
   1213c:	00660066 	.word	0x00660066
   12140:	0066017a 	.word	0x0066017a
   12144:	01c90066 	.word	0x01c90066
	switch (ocf) {
   12148:	3b01      	subs	r3, #1
   1214a:	2b08      	cmp	r3, #8
   1214c:	d814      	bhi.n	12178 <hci_cmd_handle+0x128>
   1214e:	e8df f013 	tbh	[pc, r3, lsl #1]
   12152:	0104      	.short	0x0104
   12154:	008f00ab 	.word	0x008f00ab
   12158:	00130013 	.word	0x00130013
   1215c:	00130013 	.word	0x00130013
   12160:	011b0013 	.word	0x011b0013
	switch (BT_OGF(_opcode)) {
   12164:	2a3f      	cmp	r2, #63	; 0x3f
   12166:	d107      	bne.n	12178 <hci_cmd_handle+0x128>

/* Map vendor command handler directly to common implementation */
inline int hci_vendor_cmd_handle(uint16_t ocf, struct net_buf *cmd,
				 struct net_buf **evt)
{
	return hci_vendor_cmd_handle_common(ocf, cmd, evt);
   12168:	4621      	mov	r1, r4
   1216a:	4618      	mov	r0, r3
   1216c:	aa09      	add	r2, sp, #36	; 0x24
   1216e:	f7ff fee1 	bl	11f34 <hci_vendor_cmd_handle_common>
	if (err == -EINVAL) {
   12172:	3016      	adds	r0, #22
   12174:	d176      	bne.n	12264 <hci_cmd_handle+0x214>
   12176:	8838      	ldrh	r0, [r7, #0]
	return bt_hci_cmd_status_create(_opcode, status);
   12178:	2101      	movs	r1, #1
   1217a:	f7ff feb7 	bl	11eec <bt_hci_cmd_status_create>
}
   1217e:	b00f      	add	sp, #60	; 0x3c
   12180:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (ocf) {
   12182:	2b05      	cmp	r3, #5
   12184:	d1f8      	bne.n	12178 <hci_cmd_handle+0x128>
	handle = sys_le16_to_cpu(cmd->handle);
   12186:	68a3      	ldr	r3, [r4, #8]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   12188:	2104      	movs	r1, #4
   1218a:	a809      	add	r0, sp, #36	; 0x24
	handle = sys_le16_to_cpu(cmd->handle);
   1218c:	881d      	ldrh	r5, [r3, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1218e:	f7ff fec1 	bl	11f14 <hci_cmd_complete>
   12192:	4604      	mov	r4, r0
	rp->status = ll_rssi_get(handle, &rp->rssi);
   12194:	1ce1      	adds	r1, r4, #3
	handle = sys_le16_to_cpu(cmd->handle);
   12196:	b2a8      	uxth	r0, r5
	rp->status = ll_rssi_get(handle, &rp->rssi);
   12198:	f003 fb64 	bl	15864 <ll_rssi_get>
	rp->handle = sys_cpu_to_le16(handle);
   1219c:	f8a4 5001 	strh.w	r5, [r4, #1]
	rp->status = ll_rssi_get(handle, &rp->rssi);
   121a0:	7020      	strb	r0, [r4, #0]
	rp->rssi = (!rp->status) ? -rp->rssi : 127;
   121a2:	2800      	cmp	r0, #0
   121a4:	f040 8347 	bne.w	12836 <hci_cmd_handle+0x7e6>
   121a8:	78e3      	ldrb	r3, [r4, #3]
   121aa:	425b      	negs	r3, r3
   121ac:	b25b      	sxtb	r3, r3
   121ae:	e1b9      	b.n	12524 <hci_cmd_handle+0x4d4>
	switch (ocf) {
   121b0:	2b06      	cmp	r3, #6
   121b2:	f000 8342 	beq.w	1283a <hci_cmd_handle+0x7ea>
   121b6:	2b1d      	cmp	r3, #29
   121b8:	d1de      	bne.n	12178 <hci_cmd_handle+0x128>
	handle = sys_le16_to_cpu(cmd->handle);
   121ba:	68a3      	ldr	r3, [r4, #8]
	status = ll_version_ind_send(handle);
   121bc:	8818      	ldrh	r0, [r3, #0]
   121be:	f003 fa49 	bl	15654 <ll_version_ind_send>
   121c2:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   121c4:	8838      	ldrh	r0, [r7, #0]
   121c6:	f7ff fe91 	bl	11eec <bt_hci_cmd_status_create>
}
   121ca:	e7d8      	b.n	1217e <hci_cmd_handle+0x12e>
	switch (ocf) {
   121cc:	2b63      	cmp	r3, #99	; 0x63
   121ce:	f000 836a 	beq.w	128a6 <hci_cmd_handle+0x856>
   121d2:	d834      	bhi.n	1223e <hci_cmd_handle+0x1ee>
   121d4:	2b03      	cmp	r3, #3
   121d6:	f000 834e 	beq.w	12876 <hci_cmd_handle+0x826>
   121da:	2b2d      	cmp	r3, #45	; 0x2d
   121dc:	d11f      	bne.n	1221e <hci_cmd_handle+0x1ce>
		read_tx_power_level(cmd, evt);
   121de:	68a3      	ldr	r3, [r4, #8]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   121e0:	2104      	movs	r1, #4
   121e2:	a809      	add	r0, sp, #36	; 0x24
	handle = sys_le16_to_cpu(cmd->handle);
   121e4:	881d      	ldrh	r5, [r3, #0]
	type = cmd->type;
   121e6:	789e      	ldrb	r6, [r3, #2]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   121e8:	f7ff fe94 	bl	11f14 <hci_cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
   121ec:	b2a9      	uxth	r1, r5
	rp = hci_cmd_complete(evt, sizeof(*rp));
   121ee:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(BT_HCI_VS_LL_HANDLE_TYPE_CONN,
   121f0:	1cc3      	adds	r3, r0, #3
   121f2:	4632      	mov	r2, r6
   121f4:	2002      	movs	r0, #2
   121f6:	f7ff fc65 	bl	11ac4 <ll_tx_pwr_lvl_get>
	rp->status = status;
   121fa:	7020      	strb	r0, [r4, #0]
	rp->handle = sys_cpu_to_le16(handle);
   121fc:	9809      	ldr	r0, [sp, #36]	; 0x24
   121fe:	f8a4 5001 	strh.w	r5, [r4, #1]
}
   12202:	e7bc      	b.n	1217e <hci_cmd_handle+0x12e>
   12204:	4923      	ldr	r1, [pc, #140]	; (12294 <hci_cmd_handle+0x244>)
   12206:	4b24      	ldr	r3, [pc, #144]	; (12298 <hci_cmd_handle+0x248>)
		BT_ERR("No HCI Command header");
   12208:	4824      	ldr	r0, [pc, #144]	; (1229c <hci_cmd_handle+0x24c>)
   1220a:	1ac9      	subs	r1, r1, r3
   1220c:	08c9      	lsrs	r1, r1, #3
		BT_ERR("Invalid HCI CMD packet length");
   1220e:	0189      	lsls	r1, r1, #6
   12210:	f041 0101 	orr.w	r1, r1, #1
   12214:	f00c f95d 	bl	1e4d2 <log_0>
		return NULL;
   12218:	4628      	mov	r0, r5
}
   1221a:	b00f      	add	sp, #60	; 0x3c
   1221c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (ocf) {
   1221e:	2b01      	cmp	r3, #1
   12220:	d1aa      	bne.n	12178 <hci_cmd_handle+0x128>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   12222:	68a1      	ldr	r1, [r4, #8]
	event_mask = sys_get_le64(cmd->events);
   12224:	4a1e      	ldr	r2, [pc, #120]	; (122a0 <hci_cmd_handle+0x250>)
   12226:	6808      	ldr	r0, [r1, #0]
   12228:	684c      	ldr	r4, [r1, #4]
   1222a:	6010      	str	r0, [r2, #0]
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
   1222c:	4619      	mov	r1, r3
   1222e:	a809      	add	r0, sp, #36	; 0x24
	event_mask = sys_get_le64(cmd->events);
   12230:	6054      	str	r4, [r2, #4]
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
   12232:	f7ff fe6f 	bl	11f14 <hci_cmd_complete>
	ccst->status = 0x00;
   12236:	2300      	movs	r3, #0
   12238:	7003      	strb	r3, [r0, #0]
	if (err == -EINVAL) {
   1223a:	9809      	ldr	r0, [sp, #36]	; 0x24
   1223c:	e79f      	b.n	1217e <hci_cmd_handle+0x12e>
	switch (ocf) {
   1223e:	2b7b      	cmp	r3, #123	; 0x7b
   12240:	f000 8305 	beq.w	1284e <hci_cmd_handle+0x7fe>
   12244:	2b7c      	cmp	r3, #124	; 0x7c
   12246:	d197      	bne.n	12178 <hci_cmd_handle+0x128>
		write_auth_payload_timeout(cmd, evt);
   12248:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   1224a:	881d      	ldrh	r5, [r3, #0]
	status = ll_apto_set(handle, auth_payload_timeout);
   1224c:	8859      	ldrh	r1, [r3, #2]
   1224e:	4628      	mov	r0, r5
   12250:	f003 fb48 	bl	158e4 <ll_apto_set>
	status = ll_length_req_send(handle, tx_octets, tx_time);
   12254:	4604      	mov	r4, r0
	rp = hci_cmd_complete(evt, sizeof(*rp));
   12256:	2103      	movs	r1, #3
   12258:	a809      	add	r0, sp, #36	; 0x24
   1225a:	f7ff fe5b 	bl	11f14 <hci_cmd_complete>
	status = ll_length_req_send(handle, tx_octets, tx_time);
   1225e:	7004      	strb	r4, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
   12260:	f8a0 5001 	strh.w	r5, [r0, #1]
	if (err == -EINVAL) {
   12264:	9809      	ldr	r0, [sp, #36]	; 0x24
   12266:	e78a      	b.n	1217e <hci_cmd_handle+0x12e>
   12268:	490a      	ldr	r1, [pc, #40]	; (12294 <hci_cmd_handle+0x244>)
   1226a:	4b0b      	ldr	r3, [pc, #44]	; (12298 <hci_cmd_handle+0x248>)
		BT_ERR("Invalid HCI CMD packet length");
   1226c:	480d      	ldr	r0, [pc, #52]	; (122a4 <hci_cmd_handle+0x254>)
   1226e:	e7cc      	b.n	1220a <hci_cmd_handle+0x1ba>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   12270:	2109      	movs	r1, #9
   12272:	a809      	add	r0, sp, #36	; 0x24
   12274:	f7ff fe4e 	bl	11f14 <hci_cmd_complete>
	rp->status = 0x00;
   12278:	2100      	movs	r1, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1227a:	4604      	mov	r4, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   1227c:	2208      	movs	r2, #8
	rp->status = 0x00;
   1227e:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   12282:	f00d fe23 	bl	1fecc <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
   12286:	2360      	movs	r3, #96	; 0x60
   12288:	9809      	ldr	r0, [sp, #36]	; 0x24
   1228a:	7163      	strb	r3, [r4, #5]
	if (err == -EINVAL) {
   1228c:	e777      	b.n	1217e <hci_cmd_handle+0x12e>
   1228e:	bf00      	nop
   12290:	200096ba 	.word	0x200096ba
   12294:	00023728 	.word	0x00023728
   12298:	000236f0 	.word	0x000236f0
   1229c:	0002410c 	.word	0x0002410c
   122a0:	20000108 	.word	0x20000108
   122a4:	00024124 	.word	0x00024124
	rp = hci_cmd_complete(evt, sizeof(*rp));
   122a8:	2141      	movs	r1, #65	; 0x41
   122aa:	a809      	add	r0, sp, #36	; 0x24
   122ac:	f7ff fe32 	bl	11f14 <hci_cmd_complete>
	rp->status = 0x00;
   122b0:	2100      	movs	r1, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
   122b2:	4604      	mov	r4, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   122b4:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
   122b6:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   122ba:	f00d fe07 	bl	1fecc <memset>
	rp->commands[0] |= BIT(5);
   122be:	7867      	ldrb	r7, [r4, #1]
	rp->commands[5] |= BIT(6) | BIT(7);
   122c0:	79a6      	ldrb	r6, [r4, #6]
	rp->commands[10] |= BIT(2);
   122c2:	7ae5      	ldrb	r5, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
   122c4:	7be0      	ldrb	r0, [r4, #15]
	rp->commands[15] |= BIT(5);
   122c6:	7c21      	ldrb	r1, [r4, #16]
	rp->commands[22] |= BIT(2);
   122c8:	7de2      	ldrb	r2, [r4, #23]
	rp->commands[25] |= BIT(0) | BIT(1) | BIT(2) | BIT(4);
   122ca:	7ea3      	ldrb	r3, [r4, #26]
	rp->commands[26] |= BIT(4) | BIT(5);
   122cc:	f894 c01b 	ldrb.w	ip, [r4, #27]
	rp->commands[0] |= BIT(5);
   122d0:	f047 0720 	orr.w	r7, r7, #32
   122d4:	7067      	strb	r7, [r4, #1]
	rp->commands[5] |= BIT(6) | BIT(7);
   122d6:	f066 063f 	orn	r6, r6, #63	; 0x3f
	rp->commands[28] |= BIT(3);
   122da:	7f67      	ldrb	r7, [r4, #29]
	rp->commands[5] |= BIT(6) | BIT(7);
   122dc:	71a6      	strb	r6, [r4, #6]
	rp->commands[10] |= BIT(2);
   122de:	f045 0504 	orr.w	r5, r5, #4
	rp->commands[14] |= BIT(3) | BIT(5);
   122e2:	f040 0028 	orr.w	r0, r0, #40	; 0x28
	rp->commands[15] |= BIT(5);
   122e6:	f041 0122 	orr.w	r1, r1, #34	; 0x22
	rp->commands[22] |= BIT(2);
   122ea:	f042 0204 	orr.w	r2, r2, #4
	rp->commands[25] |= BIT(0) | BIT(1) | BIT(2) | BIT(4);
   122ee:	f043 0317 	orr.w	r3, r3, #23
	rp->commands[32] |= BIT(4) | BIT(5);
   122f2:	f894 6021 	ldrb.w	r6, [r4, #33]	; 0x21
	rp->commands[10] |= BIT(2);
   122f6:	72e5      	strb	r5, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
   122f8:	73e0      	strb	r0, [r4, #15]
	rp->commands[33] |= BIT(4) | BIT(5);
   122fa:	f894 5022 	ldrb.w	r5, [r4, #34]	; 0x22
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
   122fe:	f894 0023 	ldrb.w	r0, [r4, #35]	; 0x23
	rp->commands[15] |= BIT(5);
   12302:	7421      	strb	r1, [r4, #16]
	rp->commands[22] |= BIT(2);
   12304:	75e2      	strb	r2, [r4, #23]
	rp->commands[35] |= BIT(3);
   12306:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
	rp->commands[39] |= BIT(2);
   1230a:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
	rp->commands[25] |= BIT(0) | BIT(1) | BIT(2) | BIT(4);
   1230e:	76a3      	strb	r3, [r4, #26]
	rp->commands[38] |= BIT(7);
   12310:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
	rp->commands[28] |= BIT(0);
   12314:	f047 0709 	orr.w	r7, r7, #9
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
   12318:	f060 0006 	orn	r0, r0, #6
	rp->commands[26] |= BIT(4) | BIT(5);
   1231c:	f06c 0c03 	orn	ip, ip, #3
	rp->commands[32] |= BIT(4) | BIT(5);
   12320:	f046 0630 	orr.w	r6, r6, #48	; 0x30
	rp->commands[33] |= BIT(6) | BIT(7);
   12324:	f065 050f 	orn	r5, r5, #15
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
   12328:	f041 017f 	orr.w	r1, r1, #127	; 0x7f
	rp->commands[39] |= BIT(2);
   1232c:	f042 0204 	orr.w	r2, r2, #4
	rp->commands[38] |= BIT(7);
   12330:	f063 037f 	orn	r3, r3, #127	; 0x7f
	rp->commands[28] |= BIT(0);
   12334:	7767      	strb	r7, [r4, #29]
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
   12336:	27ff      	movs	r7, #255	; 0xff
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
   12338:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
	rp->commands[26] |= BIT(4) | BIT(5);
   1233c:	f884 c01b 	strb.w	ip, [r4, #27]
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
   12340:	9809      	ldr	r0, [sp, #36]	; 0x24
   12342:	7727      	strb	r7, [r4, #28]
	rp->commands[32] |= BIT(4) | BIT(5);
   12344:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
	rp->commands[33] |= BIT(6) | BIT(7);
   12348:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
   1234c:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
	rp->commands[39] |= BIT(2);
   12350:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	rp->commands[38] |= BIT(7);
   12354:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	if (err == -EINVAL) {
   12358:	e711      	b.n	1217e <hci_cmd_handle+0x12e>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1235a:	2109      	movs	r1, #9
   1235c:	a809      	add	r0, sp, #36	; 0x24
   1235e:	f7ff fdd9 	bl	11f14 <hci_cmd_complete>
   12362:	4603      	mov	r3, r0
	rp->status = 0x00;
   12364:	2200      	movs	r2, #0
	rp->hci_version = LL_VERSION_NUMBER;
   12366:	200b      	movs	r0, #11
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
   12368:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   1236c:	f06f 050e 	mvn.w	r5, #14
   12370:	2405      	movs	r4, #5
	rp->status = 0x00;
   12372:	701a      	strb	r2, [r3, #0]
	rp->hci_version = LL_VERSION_NUMBER;
   12374:	7058      	strb	r0, [r3, #1]
	rp->lmp_version = LL_VERSION_NUMBER;
   12376:	7118      	strb	r0, [r3, #4]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   12378:	715d      	strb	r5, [r3, #5]
   1237a:	9809      	ldr	r0, [sp, #36]	; 0x24
   1237c:	719c      	strb	r4, [r3, #6]
	rp->hci_revision = sys_cpu_to_le16(0);
   1237e:	709a      	strb	r2, [r3, #2]
   12380:	70da      	strb	r2, [r3, #3]
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
   12382:	71d9      	strb	r1, [r3, #7]
   12384:	7219      	strb	r1, [r3, #8]
	if (err == -EINVAL) {
   12386:	e6fa      	b.n	1217e <hci_cmd_handle+0x12e>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   12388:	2107      	movs	r1, #7
   1238a:	a809      	add	r0, sp, #36	; 0x24
   1238c:	f7ff fdc2 	bl	11f14 <hci_cmd_complete>
	rp->status = 0x00;
   12390:	4601      	mov	r1, r0
   12392:	2000      	movs	r0, #0
   12394:	f801 0b01 	strb.w	r0, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
   12398:	f7ff fb58 	bl	11a4c <ll_addr_get>
	if (err == -EINVAL) {
   1239c:	9809      	ldr	r0, [sp, #36]	; 0x24
   1239e:	e6ee      	b.n	1217e <hci_cmd_handle+0x12e>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   123a0:	2103      	movs	r1, #3
   123a2:	a809      	add	r0, sp, #36	; 0x24
   123a4:	f7ff fdb6 	bl	11f14 <hci_cmd_complete>
	rp->status = 0x00;
   123a8:	4601      	mov	r1, r0
   123aa:	2300      	movs	r3, #0
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
   123ac:	3001      	adds	r0, #1
	rp->status = 0x00;
   123ae:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
   123b2:	f7ff fb97 	bl	11ae4 <ll_tx_pwr_get>
	if (err == -EINVAL) {
   123b6:	9809      	ldr	r0, [sp, #36]	; 0x24
   123b8:	e6e1      	b.n	1217e <hci_cmd_handle+0x12e>
	status = ll_connect_disable(node_rx);
   123ba:	4630      	mov	r0, r6
   123bc:	f005 ff04 	bl	181c8 <ll_connect_disable>
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
   123c0:	4604      	mov	r4, r0
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
   123c2:	2101      	movs	r1, #1
   123c4:	a809      	add	r0, sp, #36	; 0x24
   123c6:	f7ff fda5 	bl	11f14 <hci_cmd_complete>
	ccst->status = status;
   123ca:	7004      	strb	r4, [r0, #0]
	if (err == -EINVAL) {
   123cc:	e74a      	b.n	12264 <hci_cmd_handle+0x214>
		le_create_connection(cmd, evt);
   123ce:	68a4      	ldr	r4, [r4, #8]
	scan_interval = sys_le16_to_cpu(cmd->scan_interval);
   123d0:	8820      	ldrh	r0, [r4, #0]
	scan_window = sys_le16_to_cpu(cmd->scan_window);
   123d2:	8861      	ldrh	r1, [r4, #2]
	conn_interval_max = sys_le16_to_cpu(cmd->conn_interval_max);
   123d4:	f8b4 500f 	ldrh.w	r5, [r4, #15]
	conn_latency = sys_le16_to_cpu(cmd->conn_latency);
   123d8:	f8b4 6011 	ldrh.w	r6, [r4, #17]
	supervision_timeout = sys_le16_to_cpu(cmd->supervision_timeout);
   123dc:	f8b4 c013 	ldrh.w	ip, [r4, #19]
	uint16_t conn_interval_min = sys_le16_to_cpu(cmd->conn_interval_min);
   123e0:	f8b4 e00d 	ldrh.w	lr, [r4, #13]
   123e4:	2209      	movs	r2, #9
        uint16_t new_interval = 2048;
   123e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
                if(new_interval<conn_interval_max) break;
   123ea:	429d      	cmp	r5, r3
   123ec:	d803      	bhi.n	123f6 <hci_cmd_handle+0x3a6>
        for (int i = 0; i <9; i ++){
   123ee:	3a01      	subs	r2, #1
                new_interval = new_interval/2;
   123f0:	ea4f 0353 	mov.w	r3, r3, lsr #1
        for (int i = 0; i <9; i ++){
   123f4:	d1f9      	bne.n	123ea <hci_cmd_handle+0x39a>
	status = ll_create_connection(scan_interval, scan_window,
   123f6:	7922      	ldrb	r2, [r4, #4]
	if(new_interval>= conn_interval_min)
   123f8:	459e      	cmp	lr, r3
   123fa:	bf98      	it	ls
   123fc:	461d      	movls	r5, r3
	status = ll_create_connection(scan_interval, scan_window,
   123fe:	7963      	ldrb	r3, [r4, #5]
   12400:	9502      	str	r5, [sp, #8]
   12402:	e9cd 6c03 	strd	r6, ip, [sp, #12]
				      &cmd->peer_addr.a.val[0],
   12406:	3406      	adds	r4, #6
	status = ll_create_connection(scan_interval, scan_window,
   12408:	79a5      	ldrb	r5, [r4, #6]
   1240a:	9501      	str	r5, [sp, #4]
   1240c:	9400      	str	r4, [sp, #0]
   1240e:	f005 fcd5 	bl	17dbc <ll_create_connection>
   12412:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   12414:	8838      	ldrh	r0, [r7, #0]
   12416:	f7ff fd69 	bl	11eec <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
   1241a:	e6b0      	b.n	1217e <hci_cmd_handle+0x12e>
		le_set_scan_enable(cmd, evt);
   1241c:	68a3      	ldr	r3, [r4, #8]
	if (cmd->enable && cmd->filter_dup) {
   1241e:	7818      	ldrb	r0, [r3, #0]
   12420:	2800      	cmp	r0, #0
   12422:	f000 8243 	beq.w	128ac <hci_cmd_handle+0x85c>
   12426:	785b      	ldrb	r3, [r3, #1]
   12428:	2b00      	cmp	r3, #0
   1242a:	f000 823f 	beq.w	128ac <hci_cmd_handle+0x85c>
		dup_count = 0;
   1242e:	49bd      	ldr	r1, [pc, #756]	; (12724 <hci_cmd_handle+0x6d4>)
		dup_curr = 0U;
   12430:	4abd      	ldr	r2, [pc, #756]	; (12728 <hci_cmd_handle+0x6d8>)
		dup_count = 0;
   12432:	2300      	movs	r3, #0
   12434:	600b      	str	r3, [r1, #0]
		dup_curr = 0U;
   12436:	6013      	str	r3, [r2, #0]
	status = ll_scan_enable(cmd->enable);
   12438:	f002 fae2 	bl	14a00 <ll_scan_enable>
   1243c:	e7c0      	b.n	123c0 <hci_cmd_handle+0x370>
		le_set_privacy_mode(cmd, evt);
   1243e:	68a0      	ldr	r0, [r4, #8]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
   12440:	79c1      	ldrb	r1, [r0, #7]
   12442:	f006 fd2f 	bl	18ea4 <ll_priv_mode_set>
   12446:	e7bb      	b.n	123c0 <hci_cmd_handle+0x370>
	handle = sys_le16_to_cpu(cmd->handle);
   12448:	68a3      	ldr	r3, [r4, #8]
	status = ll_feature_req_send(handle);
   1244a:	8818      	ldrh	r0, [r3, #0]
   1244c:	f003 f8e4 	bl	15618 <ll_feature_req_send>
   12450:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   12452:	8838      	ldrh	r0, [r7, #0]
   12454:	f7ff fd4a 	bl	11eec <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
   12458:	e691      	b.n	1217e <hci_cmd_handle+0x12e>
	handle = sys_le16_to_cpu(cmd->handle);
   1245a:	68a3      	ldr	r3, [r4, #8]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1245c:	2108      	movs	r1, #8
   1245e:	a809      	add	r0, sp, #36	; 0x24
	handle = sys_le16_to_cpu(cmd->handle);
   12460:	881d      	ldrh	r5, [r3, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   12462:	f7ff fd57 	bl	11f14 <hci_cmd_complete>
   12466:	4604      	mov	r4, r0
	status = ll_chm_get(handle, rp->ch_map);
   12468:	1ce1      	adds	r1, r4, #3
	handle = sys_le16_to_cpu(cmd->handle);
   1246a:	b2a8      	uxth	r0, r5
	status = ll_chm_get(handle, rp->ch_map);
   1246c:	f003 f892 	bl	15594 <ll_chm_get>
	rp->status = status;
   12470:	7020      	strb	r0, [r4, #0]
	rp->handle = sys_le16_to_cpu(handle);
   12472:	9809      	ldr	r0, [sp, #36]	; 0x24
   12474:	f8a4 5001 	strh.w	r5, [r4, #1]
	if (err == -EINVAL) {
   12478:	e681      	b.n	1217e <hci_cmd_handle+0x12e>
	status = ll_chm_update(&cmd->ch_map[0]);
   1247a:	68a0      	ldr	r0, [r4, #8]
   1247c:	f005 feea 	bl	18254 <ll_chm_update>
   12480:	e79e      	b.n	123c0 <hci_cmd_handle+0x370>
		le_conn_update(cmd, evt);
   12482:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_min,
   12484:	8911      	ldrh	r1, [r2, #8]
   12486:	8853      	ldrh	r3, [r2, #2]
   12488:	8810      	ldrh	r0, [r2, #0]
   1248a:	9102      	str	r1, [sp, #8]
   1248c:	88d1      	ldrh	r1, [r2, #6]
   1248e:	9101      	str	r1, [sp, #4]
   12490:	8892      	ldrh	r2, [r2, #4]
   12492:	9200      	str	r2, [sp, #0]
   12494:	2200      	movs	r2, #0
   12496:	4611      	mov	r1, r2
   12498:	f002 fff4 	bl	15484 <ll_conn_update>
   1249c:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   1249e:	8838      	ldrh	r0, [r7, #0]
   124a0:	f7ff fd24 	bl	11eec <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
   124a4:	e66b      	b.n	1217e <hci_cmd_handle+0x12e>
	status = ll_wl_remove(&cmd->addr);
   124a6:	68a0      	ldr	r0, [r4, #8]
   124a8:	f006 f8bc 	bl	18624 <ll_wl_remove>
   124ac:	e788      	b.n	123c0 <hci_cmd_handle+0x370>
	status = ll_wl_add(&cmd->addr);
   124ae:	68a0      	ldr	r0, [r4, #8]
   124b0:	f006 faf6 	bl	18aa0 <ll_wl_add>
   124b4:	e784      	b.n	123c0 <hci_cmd_handle+0x370>
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
   124b6:	2101      	movs	r1, #1
   124b8:	a809      	add	r0, sp, #36	; 0x24
   124ba:	f7ff fd2b 	bl	11f14 <hci_cmd_complete>
   124be:	4604      	mov	r4, r0
	ccst->status = ll_wl_clear();
   124c0:	f006 f884 	bl	185cc <ll_wl_clear>
   124c4:	7020      	strb	r0, [r4, #0]
	if (err == -EINVAL) {
   124c6:	9809      	ldr	r0, [sp, #36]	; 0x24
   124c8:	e659      	b.n	1217e <hci_cmd_handle+0x12e>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   124ca:	2102      	movs	r1, #2
   124cc:	a809      	add	r0, sp, #36	; 0x24
   124ce:	f7ff fd21 	bl	11f14 <hci_cmd_complete>
	rp->status = 0x00;
   124d2:	2300      	movs	r3, #0
   124d4:	7003      	strb	r3, [r0, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   124d6:	4604      	mov	r4, r0
	rp->wl_size = ll_wl_size_get();
   124d8:	f006 f876 	bl	185c8 <ll_wl_size_get>
   124dc:	7060      	strb	r0, [r4, #1]
	if (err == -EINVAL) {
   124de:	9809      	ldr	r0, [sp, #36]	; 0x24
   124e0:	e64d      	b.n	1217e <hci_cmd_handle+0x12e>
		le_set_scan_param(cmd, evt);
   124e2:	68a4      	ldr	r4, [r4, #8]
	status = ll_scan_params_set(cmd->scan_type, interval, window,
   124e4:	7963      	ldrb	r3, [r4, #5]
   124e6:	f8b4 2003 	ldrh.w	r2, [r4, #3]
   124ea:	f8b4 1001 	ldrh.w	r1, [r4, #1]
   124ee:	7820      	ldrb	r0, [r4, #0]
   124f0:	79a4      	ldrb	r4, [r4, #6]
   124f2:	9400      	str	r4, [sp, #0]
   124f4:	f7ee feb0 	bl	1258 <ll_scan_params_set>
   124f8:	e762      	b.n	123c0 <hci_cmd_handle+0x370>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
   124fa:	68a1      	ldr	r1, [r4, #8]
   124fc:	2001      	movs	r0, #1
   124fe:	f7ff fac3 	bl	11a88 <ll_addr_set>
   12502:	e75d      	b.n	123c0 <hci_cmd_handle+0x370>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   12504:	2109      	movs	r1, #9
   12506:	a809      	add	r0, sp, #36	; 0x24
   12508:	f7ff fd04 	bl	11f14 <hci_cmd_complete>
	rp->status = 0x00;
   1250c:	2100      	movs	r1, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1250e:	4604      	mov	r4, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   12510:	2208      	movs	r2, #8
	rp->status = 0x00;
   12512:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   12516:	f00d fcd9 	bl	1fecc <memset>
	dst[0] = val;
   1251a:	21ff      	movs	r1, #255	; 0xff
	dst[1] = val >> 8;
   1251c:	2208      	movs	r2, #8
	dst[2] = val >> 16;
   1251e:	2301      	movs	r3, #1
	dst[0] = val;
   12520:	7061      	strb	r1, [r4, #1]
	dst[1] = val >> 8;
   12522:	70a2      	strb	r2, [r4, #2]
	dst[2] = val >> 16;
   12524:	70e3      	strb	r3, [r4, #3]
	if (err == -EINVAL) {
   12526:	9809      	ldr	r0, [sp, #36]	; 0x24
}
   12528:	b00f      	add	sp, #60	; 0x3c
   1252a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1252c:	2104      	movs	r1, #4
   1252e:	a809      	add	r0, sp, #36	; 0x24
   12530:	f7ff fcf0 	bl	11f14 <hci_cmd_complete>
	rp->le_max_num = CONFIG_BT_CTLR_TX_BUFFERS;
   12534:	220a      	movs	r2, #10
	rp->status = 0x00;
   12536:	2300      	movs	r3, #0
	rp->le_max_num = CONFIG_BT_CTLR_TX_BUFFERS;
   12538:	70c2      	strb	r2, [r0, #3]
	rp->status = 0x00;
   1253a:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(CONFIG_BT_CTLR_TX_BUFFER_SIZE);
   1253c:	f06f 0204 	mvn.w	r2, #4
   12540:	7042      	strb	r2, [r0, #1]
   12542:	7083      	strb	r3, [r0, #2]
	if (err == -EINVAL) {
   12544:	9809      	ldr	r0, [sp, #36]	; 0x24
   12546:	e61a      	b.n	1217e <hci_cmd_handle+0x12e>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   12548:	68a2      	ldr	r2, [r4, #8]
	le_event_mask = sys_get_le64(cmd->events);
   1254a:	4b78      	ldr	r3, [pc, #480]	; (1272c <hci_cmd_handle+0x6dc>)
   1254c:	6811      	ldr	r1, [r2, #0]
   1254e:	6852      	ldr	r2, [r2, #4]
   12550:	605a      	str	r2, [r3, #4]
   12552:	6019      	str	r1, [r3, #0]
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
   12554:	a809      	add	r0, sp, #36	; 0x24
   12556:	2101      	movs	r1, #1
   12558:	f7ff fcdc 	bl	11f14 <hci_cmd_complete>
	ccst->status = 0x00;
   1255c:	2300      	movs	r3, #0
   1255e:	7003      	strb	r3, [r0, #0]
	if (err == -EINVAL) {
   12560:	9809      	ldr	r0, [sp, #36]	; 0x24
   12562:	e60c      	b.n	1217e <hci_cmd_handle+0x12e>
		le_set_phy(cmd, evt);
   12564:	68a2      	ldr	r2, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   12566:	7895      	ldrb	r5, [r2, #2]
   12568:	78d1      	ldrb	r1, [r2, #3]
	handle = sys_le16_to_cpu(cmd->handle);
   1256a:	8816      	ldrh	r6, [r2, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
   1256c:	f8b2 4005 	ldrh.w	r4, [r2, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   12570:	07eb      	lsls	r3, r5, #31
		cmd->tx_phys |= mask_phys;
   12572:	bf48      	it	mi
   12574:	f041 0105 	orrmi.w	r1, r1, #5
   12578:	7913      	ldrb	r3, [r2, #4]
   1257a:	bf48      	it	mi
   1257c:	70d1      	strbmi	r1, [r2, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
   1257e:	07ad      	lsls	r5, r5, #30
		cmd->rx_phys |= mask_phys;
   12580:	bf44      	itt	mi
   12582:	f043 0305 	orrmi.w	r3, r3, #5
   12586:	7113      	strbmi	r3, [r2, #4]
	if ((cmd->tx_phys | cmd->rx_phys) & ~mask_phys) {
   12588:	ea43 0201 	orr.w	r2, r3, r1
   1258c:	f032 0205 	bics.w	r2, r2, #5
   12590:	f040 8195 	bne.w	128be <hci_cmd_handle+0x86e>
	if (!(cmd->tx_phys & 0x07) ||
   12594:	074d      	lsls	r5, r1, #29
   12596:	f000 818e 	beq.w	128b6 <hci_cmd_handle+0x866>
   1259a:	075a      	lsls	r2, r3, #29
   1259c:	f000 818b 	beq.w	128b6 <hci_cmd_handle+0x866>
	if (phy_opts & 0x03) {
   125a0:	f014 0203 	ands.w	r2, r4, #3
		phy_opts -= 1U;
   125a4:	bf1c      	itt	ne
   125a6:	f104 34ff 	addne.w	r4, r4, #4294967295	; 0xffffffff
		phy_opts &= 1;
   125aa:	f004 0201 	andne.w	r2, r4, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
   125ae:	4630      	mov	r0, r6
   125b0:	f003 f906 	bl	157c0 <ll_phy_req_send>
   125b4:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   125b6:	8838      	ldrh	r0, [r7, #0]
   125b8:	f7ff fc98 	bl	11eec <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
   125bc:	e5df      	b.n	1217e <hci_cmd_handle+0x12e>
		le_set_default_phy(cmd, evt);
   125be:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   125c0:	781a      	ldrb	r2, [r3, #0]
   125c2:	07d1      	lsls	r1, r2, #31
		cmd->tx_phys = 0x07;
   125c4:	bf4a      	itet	mi
   125c6:	2007      	movmi	r0, #7
   125c8:	7858      	ldrbpl	r0, [r3, #1]
   125ca:	7058      	strbmi	r0, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
   125cc:	0792      	lsls	r2, r2, #30
		cmd->rx_phys = 0x07;
   125ce:	bf4a      	itet	mi
   125d0:	2107      	movmi	r1, #7
   125d2:	7899      	ldrbpl	r1, [r3, #2]
   125d4:	7099      	strbmi	r1, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
   125d6:	f003 f8e9 	bl	157ac <ll_phy_default_set>
   125da:	e6f1      	b.n	123c0 <hci_cmd_handle+0x370>
	handle = sys_le16_to_cpu(cmd->handle);
   125dc:	68a3      	ldr	r3, [r4, #8]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   125de:	2105      	movs	r1, #5
   125e0:	a809      	add	r0, sp, #36	; 0x24
	handle = sys_le16_to_cpu(cmd->handle);
   125e2:	881d      	ldrh	r5, [r3, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   125e4:	f7ff fc96 	bl	11f14 <hci_cmd_complete>
   125e8:	4604      	mov	r4, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
   125ea:	1d22      	adds	r2, r4, #4
	handle = sys_le16_to_cpu(cmd->handle);
   125ec:	b2a8      	uxth	r0, r5
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
   125ee:	1ce1      	adds	r1, r4, #3
   125f0:	f003 f8ba 	bl	15768 <ll_phy_get>
 * @return least significant bit set, 0 if @a op is 0
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
	return __builtin_ffs(op);
   125f4:	78e2      	ldrb	r2, [r4, #3]
   125f6:	7923      	ldrb	r3, [r4, #4]
	rp->status = status;
   125f8:	7020      	strb	r0, [r4, #0]
   125fa:	2a00      	cmp	r2, #0
   125fc:	fa92 f2a2 	rbit	r2, r2
   12600:	fab2 f282 	clz	r2, r2
   12604:	bf08      	it	eq
   12606:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
   1260a:	2b00      	cmp	r3, #0
   1260c:	fa93 f3a3 	rbit	r3, r3
   12610:	fab3 f383 	clz	r3, r3
   12614:	f102 0201 	add.w	r2, r2, #1
   12618:	bf08      	it	eq
   1261a:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
	rp->tx_phy = find_lsb_set(rp->tx_phy);
   1261e:	70e2      	strb	r2, [r4, #3]
   12620:	3301      	adds	r3, #1
   12622:	9809      	ldr	r0, [sp, #36]	; 0x24
	rp->handle = sys_cpu_to_le16(handle);
   12624:	f8a4 5001 	strh.w	r5, [r4, #1]
	rp->rx_phy = find_lsb_set(rp->rx_phy);
   12628:	7123      	strb	r3, [r4, #4]
	if (err == -EINVAL) {
   1262a:	e5a8      	b.n	1217e <hci_cmd_handle+0x12e>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1262c:	2109      	movs	r1, #9
   1262e:	a809      	add	r0, sp, #36	; 0x24
   12630:	f7ff fc70 	bl	11f14 <hci_cmd_complete>
	ll_length_max_get(&max_tx_octets, &max_tx_time,
   12634:	ab0a      	add	r3, sp, #40	; 0x28
	rp = hci_cmd_complete(evt, sizeof(*rp));
   12636:	4604      	mov	r4, r0
	ll_length_max_get(&max_tx_octets, &max_tx_time,
   12638:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   1263c:	f10d 001e 	add.w	r0, sp, #30
   12640:	a908      	add	r1, sp, #32
   12642:	f003 f887 	bl	15754 <ll_length_max_get>
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   12646:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
   1264a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   1264e:	f8a4 2001 	strh.w	r2, [r4, #1]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   12652:	f8a4 3003 	strh.w	r3, [r4, #3]
	rp->max_rx_octets = sys_cpu_to_le16(max_rx_octets);
   12656:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
   1265a:	f8a4 3005 	strh.w	r3, [r4, #5]
	rp->status = 0x00;
   1265e:	2200      	movs	r2, #0
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
   12660:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	rp->status = 0x00;
   12664:	7022      	strb	r2, [r4, #0]
   12666:	9809      	ldr	r0, [sp, #36]	; 0x24
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
   12668:	f8a4 3007 	strh.w	r3, [r4, #7]
	if (err == -EINVAL) {
   1266c:	e587      	b.n	1217e <hci_cmd_handle+0x12e>
	uint16_t timeout = sys_le16_to_cpu(cmd->rpa_timeout);
   1266e:	68a3      	ldr	r3, [r4, #8]
	ll_rl_timeout_set(timeout);
   12670:	8818      	ldrh	r0, [r3, #0]
   12672:	f006 f8a9 	bl	187c8 <ll_rl_timeout_set>
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
   12676:	2101      	movs	r1, #1
   12678:	a809      	add	r0, sp, #36	; 0x24
   1267a:	f7ff fc4b 	bl	11f14 <hci_cmd_complete>
	ccst->status = 0x00;
   1267e:	2300      	movs	r3, #0
   12680:	7003      	strb	r3, [r0, #0]
	if (err == -EINVAL) {
   12682:	e5ef      	b.n	12264 <hci_cmd_handle+0x214>
	uint8_t enable = cmd->enable;
   12684:	68a3      	ldr	r3, [r4, #8]
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
   12686:	2101      	movs	r1, #1
   12688:	a809      	add	r0, sp, #36	; 0x24
	uint8_t enable = cmd->enable;
   1268a:	781d      	ldrb	r5, [r3, #0]
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
   1268c:	f7ff fc42 	bl	11f14 <hci_cmd_complete>
   12690:	4604      	mov	r4, r0
	ccst->status = ll_rl_enable(enable);
   12692:	4628      	mov	r0, r5
   12694:	f006 f882 	bl	1879c <ll_rl_enable>
   12698:	7020      	strb	r0, [r4, #0]
	if (err == -EINVAL) {
   1269a:	9809      	ldr	r0, [sp, #36]	; 0x24
   1269c:	e56f      	b.n	1217e <hci_cmd_handle+0x12e>
	memcpy(dst, src, sizeof(*dst));
   1269e:	68a1      	ldr	r1, [r4, #8]
   126a0:	2207      	movs	r2, #7
   126a2:	a80a      	add	r0, sp, #40	; 0x28
   126a4:	f00d fbe7 	bl	1fe76 <memcpy>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   126a8:	2107      	movs	r1, #7
   126aa:	a809      	add	r0, sp, #36	; 0x24
   126ac:	f7ff fc32 	bl	11f14 <hci_cmd_complete>
   126b0:	4604      	mov	r4, r0
	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
   126b2:	1c61      	adds	r1, r4, #1
   126b4:	a80a      	add	r0, sp, #40	; 0x28
   126b6:	f006 fbd9 	bl	18e6c <ll_rl_lrpa_get>
   126ba:	7020      	strb	r0, [r4, #0]
	if (err == -EINVAL) {
   126bc:	9809      	ldr	r0, [sp, #36]	; 0x24
   126be:	e55e      	b.n	1217e <hci_cmd_handle+0x12e>
   126c0:	68a1      	ldr	r1, [r4, #8]
   126c2:	2207      	movs	r2, #7
   126c4:	a80a      	add	r0, sp, #40	; 0x28
   126c6:	f00d fbd6 	bl	1fe76 <memcpy>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   126ca:	2107      	movs	r1, #7
   126cc:	a809      	add	r0, sp, #36	; 0x24
   126ce:	f7ff fc21 	bl	11f14 <hci_cmd_complete>
   126d2:	4604      	mov	r4, r0
	rp->status = ll_rl_crpa_get(&peer_id_addr, &rp->peer_rpa);
   126d4:	1c61      	adds	r1, r4, #1
   126d6:	a80a      	add	r0, sp, #40	; 0x28
   126d8:	f006 fba6 	bl	18e28 <ll_rl_crpa_get>
   126dc:	7020      	strb	r0, [r4, #0]
	if (err == -EINVAL) {
   126de:	9809      	ldr	r0, [sp, #36]	; 0x24
   126e0:	e54d      	b.n	1217e <hci_cmd_handle+0x12e>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   126e2:	2102      	movs	r1, #2
   126e4:	a809      	add	r0, sp, #36	; 0x24
   126e6:	f7ff fc15 	bl	11f14 <hci_cmd_complete>
   126ea:	4604      	mov	r4, r0
	rp->rl_size = ll_rl_size_get();
   126ec:	f006 f814 	bl	18718 <ll_rl_size_get>
	rp->status = 0x00;
   126f0:	2300      	movs	r3, #0
	rp->rl_size = ll_rl_size_get();
   126f2:	7060      	strb	r0, [r4, #1]
	rp->status = 0x00;
   126f4:	7023      	strb	r3, [r4, #0]
	if (err == -EINVAL) {
   126f6:	9809      	ldr	r0, [sp, #36]	; 0x24
   126f8:	e541      	b.n	1217e <hci_cmd_handle+0x12e>
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
   126fa:	2101      	movs	r1, #1
   126fc:	a809      	add	r0, sp, #36	; 0x24
   126fe:	f7ff fc09 	bl	11f14 <hci_cmd_complete>
   12702:	4604      	mov	r4, r0
	ccst->status = ll_rl_clear();
   12704:	f006 f80a 	bl	1871c <ll_rl_clear>
   12708:	7020      	strb	r0, [r4, #0]
	if (err == -EINVAL) {
   1270a:	9809      	ldr	r0, [sp, #36]	; 0x24
   1270c:	e537      	b.n	1217e <hci_cmd_handle+0x12e>
	status = ll_rl_remove(&cmd->peer_id_addr);
   1270e:	68a0      	ldr	r0, [r4, #8]
   12710:	f006 fae6 	bl	18ce0 <ll_rl_remove>
   12714:	e654      	b.n	123c0 <hci_cmd_handle+0x370>
		le_add_dev_to_rl(cmd, evt);
   12716:	68a0      	ldr	r0, [r4, #8]
	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
   12718:	f100 0217 	add.w	r2, r0, #23
   1271c:	1dc1      	adds	r1, r0, #7
   1271e:	f006 fa1f 	bl	18b60 <ll_rl_add>
   12722:	e64d      	b.n	123c0 <hci_cmd_handle+0x370>
   12724:	200022a0 	.word	0x200022a0
   12728:	200022a4 	.word	0x200022a4
   1272c:	20000110 	.word	0x20000110
		le_write_default_data_len(cmd, evt);
   12730:	68a3      	ldr	r3, [r4, #8]
	status = ll_length_default_set(max_tx_octets, max_tx_time);
   12732:	8859      	ldrh	r1, [r3, #2]
   12734:	8818      	ldrh	r0, [r3, #0]
   12736:	f003 f803 	bl	15740 <ll_length_default_set>
   1273a:	e641      	b.n	123c0 <hci_cmd_handle+0x370>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1273c:	2105      	movs	r1, #5
   1273e:	a809      	add	r0, sp, #36	; 0x24
   12740:	f7ff fbe8 	bl	11f14 <hci_cmd_complete>
	ll_length_default_get(&max_tx_octets, &max_tx_time);
   12744:	a90a      	add	r1, sp, #40	; 0x28
	rp = hci_cmd_complete(evt, sizeof(*rp));
   12746:	4604      	mov	r4, r0
	ll_length_default_get(&max_tx_octets, &max_tx_time);
   12748:	f10d 0022 	add.w	r0, sp, #34	; 0x22
   1274c:	f002 ffec 	bl	15728 <ll_length_default_get>
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
   12750:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
   12754:	f8a4 3001 	strh.w	r3, [r4, #1]
	rp->status = 0x00;
   12758:	2200      	movs	r2, #0
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   1275a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	rp->status = 0x00;
   1275e:	7022      	strb	r2, [r4, #0]
   12760:	9809      	ldr	r0, [sp, #36]	; 0x24
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   12762:	f8a4 3003 	strh.w	r3, [r4, #3]
	if (err == -EINVAL) {
   12766:	e50a      	b.n	1217e <hci_cmd_handle+0x12e>
		le_set_data_len(cmd, evt);
   12768:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   1276a:	881d      	ldrh	r5, [r3, #0]
	status = ll_length_req_send(handle, tx_octets, tx_time);
   1276c:	889a      	ldrh	r2, [r3, #4]
   1276e:	8859      	ldrh	r1, [r3, #2]
   12770:	4628      	mov	r0, r5
   12772:	f002 ff8d 	bl	15690 <ll_length_req_send>
   12776:	e56d      	b.n	12254 <hci_cmd_handle+0x204>
		le_conn_param_req_neg_reply(cmd, evt);
   12778:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   1277a:	881d      	ldrh	r5, [r3, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   1277c:	789a      	ldrb	r2, [r3, #2]
   1277e:	2300      	movs	r3, #0
   12780:	e9cd 3301 	strd	r3, r3, [sp, #4]
   12784:	4628      	mov	r0, r5
   12786:	9300      	str	r3, [sp, #0]
   12788:	2102      	movs	r1, #2
   1278a:	f002 fe7b 	bl	15484 <ll_conn_update>
   1278e:	e561      	b.n	12254 <hci_cmd_handle+0x204>
		le_conn_param_req_reply(cmd, evt);
   12790:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
   12792:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   12794:	8815      	ldrh	r5, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
   12796:	8853      	ldrh	r3, [r2, #2]
   12798:	9102      	str	r1, [sp, #8]
   1279a:	88d1      	ldrh	r1, [r2, #6]
   1279c:	9101      	str	r1, [sp, #4]
   1279e:	8892      	ldrh	r2, [r2, #4]
   127a0:	9200      	str	r2, [sp, #0]
   127a2:	4628      	mov	r0, r5
   127a4:	2200      	movs	r2, #0
   127a6:	2102      	movs	r1, #2
   127a8:	f002 fe6c 	bl	15484 <ll_conn_update>
   127ac:	e552      	b.n	12254 <hci_cmd_handle+0x204>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   127ae:	2109      	movs	r1, #9
   127b0:	a809      	add	r0, sp, #36	; 0x24
   127b2:	f7ff fbaf 	bl	11f14 <hci_cmd_complete>
	dst[0] = val;
   127b6:	2470      	movs	r4, #112	; 0x70
	rp->status = 0x00;
   127b8:	2300      	movs	r3, #0
	dst[1] = val >> 8;
   127ba:	2133      	movs	r1, #51	; 0x33
	dst[0] = val;
   127bc:	220f      	movs	r2, #15
   127be:	7044      	strb	r4, [r0, #1]
	dst[1] = val >> 8;
   127c0:	7081      	strb	r1, [r0, #2]
	dst[0] = val;
   127c2:	70c2      	strb	r2, [r0, #3]
	dst[1] = val >> 8;
   127c4:	2413      	movs	r4, #19
	dst[0] = val;
   127c6:	213f      	movs	r1, #63	; 0x3f
	dst[1] = val >> 8;
   127c8:	2202      	movs	r2, #2
   127ca:	7003      	strb	r3, [r0, #0]
   127cc:	7104      	strb	r4, [r0, #4]
	dst[0] = val;
   127ce:	7141      	strb	r1, [r0, #5]
	dst[1] = val >> 8;
   127d0:	7182      	strb	r2, [r0, #6]
	dst[0] = val;
   127d2:	71c3      	strb	r3, [r0, #7]
	dst[1] = val >> 8;
   127d4:	7203      	strb	r3, [r0, #8]
	if (err == -EINVAL) {
   127d6:	9809      	ldr	r0, [sp, #36]	; 0x24
   127d8:	e4d1      	b.n	1217e <hci_cmd_handle+0x12e>
		le_start_encryption(cmd, evt);
   127da:	68a2      	ldr	r2, [r4, #8]
				 (uint8_t *)&cmd->rand,
   127dc:	4611      	mov	r1, r2
	status = ll_enc_req_send(handle,
   127de:	f102 030c 	add.w	r3, r2, #12
   127e2:	f831 0b02 	ldrh.w	r0, [r1], #2
   127e6:	320a      	adds	r2, #10
   127e8:	f005 fd66 	bl	182b8 <ll_enc_req_send>
   127ec:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   127ee:	8838      	ldrh	r0, [r7, #0]
   127f0:	f7ff fb7c 	bl	11eec <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
   127f4:	e4c3      	b.n	1217e <hci_cmd_handle+0x12e>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   127f6:	2109      	movs	r1, #9
   127f8:	a809      	add	r0, sp, #36	; 0x24
   127fa:	f7ff fb8b 	bl	11f14 <hci_cmd_complete>
	rp->status = 0x00;
   127fe:	2300      	movs	r3, #0
   12800:	f800 3b01 	strb.w	r3, [r0], #1
	lll_csrand_get(rp->rand, count);
   12804:	2108      	movs	r1, #8
   12806:	f006 ff7d 	bl	19704 <lll_csrand_get>
	if (err == -EINVAL) {
   1280a:	9809      	ldr	r0, [sp, #36]	; 0x24
   1280c:	e4b7      	b.n	1217e <hci_cmd_handle+0x12e>
		le_encrypt(cmd, evt);
   1280e:	68a0      	ldr	r0, [r4, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
   12810:	aa0a      	add	r2, sp, #40	; 0x28
   12812:	f100 0110 	add.w	r1, r0, #16
   12816:	2300      	movs	r3, #0
   12818:	f008 f95a 	bl	1aad0 <ecb_encrypt>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1281c:	2111      	movs	r1, #17
   1281e:	a809      	add	r0, sp, #36	; 0x24
   12820:	f7ff fb78 	bl	11f14 <hci_cmd_complete>
	rp->status = 0x00;
   12824:	2300      	movs	r3, #0
   12826:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
   1282a:	a90a      	add	r1, sp, #40	; 0x28
   1282c:	2210      	movs	r2, #16
   1282e:	f00d fb22 	bl	1fe76 <memcpy>
	if (err == -EINVAL) {
   12832:	9809      	ldr	r0, [sp, #36]	; 0x24
   12834:	e4a3      	b.n	1217e <hci_cmd_handle+0x12e>
	rp->rssi = (!rp->status) ? -rp->rssi : 127;
   12836:	237f      	movs	r3, #127	; 0x7f
   12838:	e674      	b.n	12524 <hci_cmd_handle+0x4d4>
		disconnect(cmd, evt);
   1283a:	68a3      	ldr	r3, [r4, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
   1283c:	7899      	ldrb	r1, [r3, #2]
   1283e:	8818      	ldrh	r0, [r3, #0]
   12840:	f002 fecc 	bl	155dc <ll_terminate_ind_send>
   12844:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   12846:	8838      	ldrh	r0, [r7, #0]
   12848:	f7ff fb50 	bl	11eec <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
   1284c:	e497      	b.n	1217e <hci_cmd_handle+0x12e>
	handle = sys_le16_to_cpu(cmd->handle);
   1284e:	68a3      	ldr	r3, [r4, #8]
   12850:	881d      	ldrh	r5, [r3, #0]
	status = ll_apto_get(handle, &auth_payload_timeout);
   12852:	a90a      	add	r1, sp, #40	; 0x28
   12854:	4628      	mov	r0, r5
   12856:	f003 f81f 	bl	15898 <ll_apto_get>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1285a:	2105      	movs	r1, #5
	status = ll_apto_get(handle, &auth_payload_timeout);
   1285c:	4604      	mov	r4, r0
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1285e:	a809      	add	r0, sp, #36	; 0x24
   12860:	f7ff fb58 	bl	11f14 <hci_cmd_complete>
	rp->status = status;
   12864:	7004      	strb	r4, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
   12866:	f8a0 5001 	strh.w	r5, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
   1286a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1286e:	f8a0 3003 	strh.w	r3, [r0, #3]
   12872:	9809      	ldr	r0, [sp, #36]	; 0x24
}
   12874:	e483      	b.n	1217e <hci_cmd_handle+0x12e>
	dup_count = -1;
   12876:	4814      	ldr	r0, [pc, #80]	; (128c8 <hci_cmd_handle+0x878>)
	event_mask = DEFAULT_EVENT_MASK;
   12878:	4914      	ldr	r1, [pc, #80]	; (128cc <hci_cmd_handle+0x87c>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   1287a:	4a15      	ldr	r2, [pc, #84]	; (128d0 <hci_cmd_handle+0x880>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   1287c:	4b15      	ldr	r3, [pc, #84]	; (128d4 <hci_cmd_handle+0x884>)
	dup_count = -1;
   1287e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   12882:	6004      	str	r4, [r0, #0]
	event_mask = DEFAULT_EVENT_MASK;
   12884:	f641 75ff 	movw	r5, #8191	; 0x1fff
   12888:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1288c:	e9c1 4500 	strd	r4, r5, [r1]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   12890:	201f      	movs	r0, #31
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   12892:	2400      	movs	r4, #0
   12894:	2500      	movs	r5, #0
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   12896:	2100      	movs	r1, #0
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   12898:	e9c2 4500 	strd	r4, r5, [r2]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   1289c:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
   128a0:	f001 f94a 	bl	13b38 <ll_reset>
		ccst = hci_cmd_complete(evt, sizeof(*ccst));
   128a4:	e6e7      	b.n	12676 <hci_cmd_handle+0x626>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   128a6:	68a2      	ldr	r2, [r4, #8]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
   128a8:	4b09      	ldr	r3, [pc, #36]	; (128d0 <hci_cmd_handle+0x880>)
   128aa:	e64f      	b.n	1254c <hci_cmd_handle+0x4fc>
		dup_count = -1;
   128ac:	4b06      	ldr	r3, [pc, #24]	; (128c8 <hci_cmd_handle+0x878>)
   128ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   128b2:	601a      	str	r2, [r3, #0]
   128b4:	e5c0      	b.n	12438 <hci_cmd_handle+0x3e8>
	return bt_hci_cmd_status_create(_opcode, status);
   128b6:	2112      	movs	r1, #18
   128b8:	f7ff fb18 	bl	11eec <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
   128bc:	e45f      	b.n	1217e <hci_cmd_handle+0x12e>
	return bt_hci_cmd_status_create(_opcode, status);
   128be:	2111      	movs	r1, #17
   128c0:	f7ff fb14 	bl	11eec <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
   128c4:	e45b      	b.n	1217e <hci_cmd_handle+0x12e>
   128c6:	bf00      	nop
   128c8:	200022a0 	.word	0x200022a0
   128cc:	20000108 	.word	0x20000108
   128d0:	20001a90 	.word	0x20001a90
   128d4:	20000110 	.word	0x20000110

000128d8 <hci_acl_handle>:
	if (buf->len < sizeof(*acl)) {
   128d8:	8983      	ldrh	r3, [r0, #12]
	*evt = NULL;
   128da:	2200      	movs	r2, #0
	if (buf->len < sizeof(*acl)) {
   128dc:	2b03      	cmp	r3, #3
{
   128de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	*evt = NULL;
   128e2:	600a      	str	r2, [r1, #0]
	if (buf->len < sizeof(*acl)) {
   128e4:	d942      	bls.n	1296c <hci_acl_handle+0x94>
	acl = net_buf_pull_mem(buf, sizeof(*acl));
   128e6:	4605      	mov	r5, r0
   128e8:	460e      	mov	r6, r1
   128ea:	3008      	adds	r0, #8
   128ec:	2104      	movs	r1, #4
   128ee:	f00f fe90 	bl	22612 <net_buf_simple_pull_mem>
	if (buf->len < len) {
   128f2:	89ab      	ldrh	r3, [r5, #12]
	len = sys_le16_to_cpu(acl->len);
   128f4:	8847      	ldrh	r7, [r0, #2]
	handle = sys_le16_to_cpu(acl->handle);
   128f6:	f8b0 8000 	ldrh.w	r8, [r0]
	if (buf->len < len) {
   128fa:	42bb      	cmp	r3, r7
   128fc:	d343      	bcc.n	12986 <hci_acl_handle+0xae>
	node_tx = ll_tx_mem_acquire();
   128fe:	f002 fd09 	bl	15314 <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
   12902:	ea4f 3318 	mov.w	r3, r8, lsr #12
	if (!node_tx) {
   12906:	4604      	mov	r4, r0
   12908:	2800      	cmp	r0, #0
   1290a:	d040      	beq.n	1298e <hci_acl_handle+0xb6>
	if (bt_acl_flags_bc(flags) != BT_ACL_POINT_TO_POINT) {
   1290c:	089a      	lsrs	r2, r3, #2
   1290e:	d102      	bne.n	12916 <hci_acl_handle+0x3e>
	switch (bt_acl_flags_pb(flags)) {
   12910:	b333      	cbz	r3, 12960 <hci_acl_handle+0x88>
   12912:	2b01      	cmp	r3, #1
   12914:	d003      	beq.n	1291e <hci_acl_handle+0x46>
		return -EINVAL;
   12916:	f06f 0015 	mvn.w	r0, #21
}
   1291a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1291e:	7902      	ldrb	r2, [r0, #4]
   12920:	f363 0201 	bfi	r2, r3, #0, #2
   12924:	7102      	strb	r2, [r0, #4]
	pdu_data->len = len;
   12926:	7167      	strb	r7, [r4, #5]
	memcpy(&pdu_data->lldata[0], buf->data, len);
   12928:	68a9      	ldr	r1, [r5, #8]
   1292a:	463a      	mov	r2, r7
   1292c:	1de0      	adds	r0, r4, #7
   1292e:	f00d faa2 	bl	1fe76 <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
   12932:	4621      	mov	r1, r4
   12934:	f3c8 000b 	ubfx	r0, r8, #0, #12
   12938:	f002 fcf8 	bl	1532c <ll_tx_mem_enqueue>
   1293c:	2800      	cmp	r0, #0
   1293e:	d0ec      	beq.n	1291a <hci_acl_handle+0x42>
   12940:	4b2a      	ldr	r3, [pc, #168]	; (129ec <hci_acl_handle+0x114>)
   12942:	492b      	ldr	r1, [pc, #172]	; (129f0 <hci_acl_handle+0x118>)
		BT_ERR("Invalid Tx Enqueue");
   12944:	482b      	ldr	r0, [pc, #172]	; (129f4 <hci_acl_handle+0x11c>)
   12946:	1ac9      	subs	r1, r1, r3
   12948:	08c9      	lsrs	r1, r1, #3
   1294a:	0189      	lsls	r1, r1, #6
   1294c:	f041 0101 	orr.w	r1, r1, #1
   12950:	f00b fdbf 	bl	1e4d2 <log_0>
		ll_tx_mem_release(node_tx);
   12954:	4620      	mov	r0, r4
   12956:	f002 fce3 	bl	15320 <ll_tx_mem_release>
		return -EINVAL;
   1295a:	f06f 0015 	mvn.w	r0, #21
   1295e:	e7dc      	b.n	1291a <hci_acl_handle+0x42>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
   12960:	7903      	ldrb	r3, [r0, #4]
   12962:	2202      	movs	r2, #2
   12964:	f362 0301 	bfi	r3, r2, #0, #2
   12968:	7103      	strb	r3, [r0, #4]
		break;
   1296a:	e7dc      	b.n	12926 <hci_acl_handle+0x4e>
   1296c:	4920      	ldr	r1, [pc, #128]	; (129f0 <hci_acl_handle+0x118>)
   1296e:	4b1f      	ldr	r3, [pc, #124]	; (129ec <hci_acl_handle+0x114>)
		BT_ERR("No HCI ACL header");
   12970:	4821      	ldr	r0, [pc, #132]	; (129f8 <hci_acl_handle+0x120>)
   12972:	1ac9      	subs	r1, r1, r3
   12974:	08c9      	lsrs	r1, r1, #3
		BT_ERR("Invalid HCI ACL packet length");
   12976:	0189      	lsls	r1, r1, #6
   12978:	f041 0101 	orr.w	r1, r1, #1
   1297c:	f00b fda9 	bl	1e4d2 <log_0>
		return -EINVAL;
   12980:	f06f 0015 	mvn.w	r0, #21
   12984:	e7c9      	b.n	1291a <hci_acl_handle+0x42>
   12986:	491a      	ldr	r1, [pc, #104]	; (129f0 <hci_acl_handle+0x118>)
   12988:	4b18      	ldr	r3, [pc, #96]	; (129ec <hci_acl_handle+0x114>)
		BT_ERR("Invalid HCI ACL packet length");
   1298a:	481c      	ldr	r0, [pc, #112]	; (129fc <hci_acl_handle+0x124>)
   1298c:	e7f1      	b.n	12972 <hci_acl_handle+0x9a>
   1298e:	4b17      	ldr	r3, [pc, #92]	; (129ec <hci_acl_handle+0x114>)
   12990:	4917      	ldr	r1, [pc, #92]	; (129f0 <hci_acl_handle+0x118>)
		BT_ERR("Tx Buffer Overflow");
   12992:	481b      	ldr	r0, [pc, #108]	; (12a00 <hci_acl_handle+0x128>)
   12994:	1ac9      	subs	r1, r1, r3
   12996:	08c9      	lsrs	r1, r1, #3
   12998:	0189      	lsls	r1, r1, #6
   1299a:	f041 0101 	orr.w	r1, r1, #1
   1299e:	f00b fd98 	bl	1e4d2 <log_0>
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
   129a2:	4b18      	ldr	r3, [pc, #96]	; (12a04 <hci_acl_handle+0x12c>)
   129a4:	6819      	ldr	r1, [r3, #0]
   129a6:	4623      	mov	r3, r4
   129a8:	f001 7200 	and.w	r2, r1, #33554432	; 0x2000000
   129ac:	4313      	orrs	r3, r2
   129ae:	d102      	bne.n	129b6 <hci_acl_handle+0xde>
		return -ENOBUFS;
   129b0:	f06f 0036 	mvn.w	r0, #54	; 0x36
   129b4:	e7b1      	b.n	1291a <hci_acl_handle+0x42>
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   129b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   129ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   129be:	2001      	movs	r0, #1
   129c0:	f7f7 fc7c 	bl	a2bc <bt_buf_get_rx>
	hdr = net_buf_add(buf, sizeof(*hdr));
   129c4:	2102      	movs	r1, #2
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   129c6:	6030      	str	r0, [r6, #0]
	hdr = net_buf_add(buf, sizeof(*hdr));
   129c8:	3008      	adds	r0, #8
   129ca:	f00f fde5 	bl	22598 <net_buf_simple_add>
	hdr->len = len;
   129ce:	2401      	movs	r4, #1
	hdr->evt = evt;
   129d0:	221a      	movs	r2, #26
   129d2:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
   129d4:	7044      	strb	r4, [r0, #1]
	ep = net_buf_add(*buf, sizeof(*ep));
   129d6:	6830      	ldr	r0, [r6, #0]
   129d8:	4621      	mov	r1, r4
   129da:	3008      	adds	r0, #8
   129dc:	f00f fddc 	bl	22598 <net_buf_simple_add>
   129e0:	4603      	mov	r3, r0
		return -ENOBUFS;
   129e2:	f06f 0036 	mvn.w	r0, #54	; 0x36
	ep->link_type = BT_OVERFLOW_LINK_ACL;
   129e6:	701c      	strb	r4, [r3, #0]
   129e8:	e797      	b.n	1291a <hci_acl_handle+0x42>
   129ea:	bf00      	nop
   129ec:	000236f0 	.word	0x000236f0
   129f0:	00023728 	.word	0x00023728
   129f4:	0002418c 	.word	0x0002418c
   129f8:	00024144 	.word	0x00024144
   129fc:	00024158 	.word	0x00024158
   12a00:	00024178 	.word	0x00024178
   12a04:	20000108 	.word	0x20000108

00012a08 <hci_acl_encode>:
	uint16_t handle;
	uint8_t *data;

	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
   12a08:	7f03      	ldrb	r3, [r0, #28]
   12a0a:	f003 0303 	and.w	r3, r3, #3
   12a0e:	3b01      	subs	r3, #1
   12a10:	2b01      	cmp	r3, #1
{
   12a12:	b570      	push	{r4, r5, r6, lr}
	switch (pdu_data->ll_id) {
   12a14:	d90d      	bls.n	12a32 <hci_acl_encode+0x2a>
		}
#endif
		break;

	default:
		LL_ASSERT(0);
   12a16:	4a16      	ldr	r2, [pc, #88]	; (12a70 <hci_acl_encode+0x68>)
   12a18:	4916      	ldr	r1, [pc, #88]	; (12a74 <hci_acl_encode+0x6c>)
   12a1a:	4817      	ldr	r0, [pc, #92]	; (12a78 <hci_acl_encode+0x70>)
   12a1c:	f241 038a 	movw	r3, #4234	; 0x108a
   12a20:	f00b fa97 	bl	1df52 <printk>
   12a24:	4040      	eors	r0, r0
   12a26:	f380 8811 	msr	BASEPRI, r0
   12a2a:	f04f 0003 	mov.w	r0, #3
   12a2e:	df02      	svc	2
		break;
	}
}
   12a30:	bd70      	pop	{r4, r5, r6, pc}
   12a32:	4604      	mov	r4, r0
		acl = (void *)net_buf_add(buf, sizeof(*acl));
   12a34:	f101 0508 	add.w	r5, r1, #8
   12a38:	4628      	mov	r0, r5
   12a3a:	2104      	movs	r1, #4
	handle = node_rx->hdr.handle;
   12a3c:	88e6      	ldrh	r6, [r4, #6]
		acl = (void *)net_buf_add(buf, sizeof(*acl));
   12a3e:	f00f fdab 	bl	22598 <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
   12a42:	7f23      	ldrb	r3, [r4, #28]
   12a44:	f003 0303 	and.w	r3, r3, #3
   12a48:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
   12a4a:	bf0c      	ite	eq
   12a4c:	f446 5600 	orreq.w	r6, r6, #8192	; 0x2000
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
   12a50:	f446 5680 	orrne.w	r6, r6, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
   12a54:	8006      	strh	r6, [r0, #0]
		acl->len = sys_cpu_to_le16(pdu_data->len);
   12a56:	7f61      	ldrb	r1, [r4, #29]
   12a58:	8041      	strh	r1, [r0, #2]
		data = (void *)net_buf_add(buf, pdu_data->len);
   12a5a:	4628      	mov	r0, r5
   12a5c:	f00f fd9c 	bl	22598 <net_buf_simple_add>
		memcpy(data, pdu_data->lldata, pdu_data->len);
   12a60:	7f62      	ldrb	r2, [r4, #29]
   12a62:	f104 011f 	add.w	r1, r4, #31
}
   12a66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(data, pdu_data->lldata, pdu_data->len);
   12a6a:	f00d ba04 	b.w	1fe76 <memcpy>
   12a6e:	bf00      	nop
   12a70:	000241a0 	.word	0x000241a0
   12a74:	00024064 	.word	0x00024064
   12a78:	00023ff4 	.word	0x00023ff4

00012a7c <hci_evt_encode>:
#endif /* CONFIG_BT_CONN */

void hci_evt_encode(struct node_rx_pdu *node_rx, struct net_buf *buf)
{
   12a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct pdu_data *pdu_data = PDU_DATA(node_rx);

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   12a80:	7905      	ldrb	r5, [r0, #4]
   12a82:	88c7      	ldrh	r7, [r0, #6]
   12a84:	2d02      	cmp	r5, #2
{
   12a86:	b08b      	sub	sp, #44	; 0x2c
   12a88:	4604      	mov	r4, r0
   12a8a:	460e      	mov	r6, r1
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   12a8c:	d010      	beq.n	12ab0 <hci_evt_encode+0x34>
	switch (node_rx->hdr.type) {
   12a8e:	3d04      	subs	r5, #4
   12a90:	2d0b      	cmp	r5, #11
   12a92:	d860      	bhi.n	12b56 <hci_evt_encode+0xda>
   12a94:	e8df f015 	tbh	[pc, r5, lsl #1]
   12a98:	005f00df 	.word	0x005f00df
   12a9c:	005f005f 	.word	0x005f005f
   12aa0:	01a8005f 	.word	0x01a8005f
   12aa4:	008e006f 	.word	0x008e006f
   12aa8:	00c900b0 	.word	0x00c900b0
   12aac:	0026005f 	.word	0x0026005f
	switch (pdu_data->llctrl.opcode) {
   12ab0:	7fc3      	ldrb	r3, [r0, #31]
   12ab2:	3b03      	subs	r3, #3
   12ab4:	2b12      	cmp	r3, #18
   12ab6:	f200 81e1 	bhi.w	12e7c <hci_evt_encode+0x400>
   12aba:	e8df f013 	tbh	[pc, r3, lsl #1]
   12abe:	0275      	.short	0x0275
   12ac0:	01df01df 	.word	0x01df01df
   12ac4:	02300222 	.word	0x02300222
   12ac8:	024001df 	.word	0x024001df
   12acc:	01df01df 	.word	0x01df01df
   12ad0:	026601df 	.word	0x026601df
   12ad4:	024801df 	.word	0x024801df
   12ad8:	01df01df 	.word	0x01df01df
   12adc:	01df01df 	.word	0x01df01df
   12ae0:	01e201e2 	.word	0x01e201e2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12ae4:	4bb1      	ldr	r3, [pc, #708]	; (12dac <hci_evt_encode+0x330>)
   12ae6:	6858      	ldr	r0, [r3, #4]
   12ae8:	2100      	movs	r1, #0
   12aea:	460a      	mov	r2, r1
   12aec:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
   12af0:	4313      	orrs	r3, r2
   12af2:	d007      	beq.n	12b04 <hci_evt_encode+0x88>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
   12af4:	4bae      	ldr	r3, [pc, #696]	; (12db0 <hci_evt_encode+0x334>)
   12af6:	6818      	ldr	r0, [r3, #0]
   12af8:	460b      	mov	r3, r1
   12afa:	f400 6200 	and.w	r2, r0, #2048	; 0x800
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12afe:	4313      	orrs	r3, r2
   12b00:	f040 81df 	bne.w	12ec2 <hci_evt_encode+0x446>
   12b04:	7f61      	ldrb	r1, [r4, #29]
   12b06:	48ab      	ldr	r0, [pc, #684]	; (12db4 <hci_evt_encode+0x338>)
   12b08:	4bab      	ldr	r3, [pc, #684]	; (12db8 <hci_evt_encode+0x33c>)
   12b0a:	7fa2      	ldrb	r2, [r4, #30]
		BT_WARN("handle: 0x%04x, status: %x, tx: %x, rx: %x.", handle,
   12b0c:	7f25      	ldrb	r5, [r4, #28]
   12b0e:	9706      	str	r7, [sp, #24]
   12b10:	2900      	cmp	r1, #0
   12b12:	eba3 0300 	sub.w	r3, r3, r0
   12b16:	fa91 f1a1 	rbit	r1, r1
   12b1a:	fab1 f181 	clz	r1, r1
   12b1e:	ea4f 03d3 	mov.w	r3, r3, lsr #3
   12b22:	bf08      	it	eq
   12b24:	f04f 31ff 	moveq.w	r1, #4294967295	; 0xffffffff
   12b28:	2a00      	cmp	r2, #0
   12b2a:	fa92 f2a2 	rbit	r2, r2
   12b2e:	fab2 f282 	clz	r2, r2
   12b32:	f101 0001 	add.w	r0, r1, #1
   12b36:	bf08      	it	eq
   12b38:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
   12b3c:	019b      	lsls	r3, r3, #6
   12b3e:	1c54      	adds	r4, r2, #1
   12b40:	9008      	str	r0, [sp, #32]
   12b42:	f043 0302 	orr.w	r3, r3, #2
   12b46:	489d      	ldr	r0, [pc, #628]	; (12dbc <hci_evt_encode+0x340>)
   12b48:	9409      	str	r4, [sp, #36]	; 0x24
   12b4a:	2204      	movs	r2, #4
   12b4c:	a906      	add	r1, sp, #24
   12b4e:	9507      	str	r5, [sp, #28]
   12b50:	f00b fd15 	bl	1e57e <log_n>
		return;
   12b54:	e00c      	b.n	12b70 <hci_evt_encode+0xf4>
		LL_ASSERT(0);
   12b56:	f640 7395 	movw	r3, #3989	; 0xf95
		LL_ASSERT(0);
   12b5a:	4a99      	ldr	r2, [pc, #612]	; (12dc0 <hci_evt_encode+0x344>)
   12b5c:	4999      	ldr	r1, [pc, #612]	; (12dc4 <hci_evt_encode+0x348>)
   12b5e:	489a      	ldr	r0, [pc, #616]	; (12dc8 <hci_evt_encode+0x34c>)
   12b60:	f00b f9f7 	bl	1df52 <printk>
   12b64:	4040      	eors	r0, r0
   12b66:	f380 8811 	msr	BASEPRI, r0
   12b6a:	f04f 0003 	mov.w	r0, #3
   12b6e:	df02      	svc	2
		encode_control(node_rx, pdu_data, buf);
	} else if (IS_ENABLED(CONFIG_BT_CONN)) {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
   12b70:	b00b      	add	sp, #44	; 0x2c
   12b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
   12b76:	4b8d      	ldr	r3, [pc, #564]	; (12dac <hci_evt_encode+0x330>)
   12b78:	6819      	ldr	r1, [r3, #0]
   12b7a:	2500      	movs	r5, #0
   12b7c:	f001 0210 	and.w	r2, r1, #16
   12b80:	462b      	mov	r3, r5
   12b82:	4313      	orrs	r3, r2
   12b84:	d0f4      	beq.n	12b70 <hci_evt_encode+0xf4>
	hdr = net_buf_add(buf, sizeof(*hdr));
   12b86:	3608      	adds	r6, #8
   12b88:	2102      	movs	r1, #2
   12b8a:	4630      	mov	r0, r6
   12b8c:	f00f fd04 	bl	22598 <net_buf_simple_add>
   12b90:	4603      	mov	r3, r0
	hdr->evt = evt;
   12b92:	2205      	movs	r2, #5
	hdr->len = len;
   12b94:	2104      	movs	r1, #4
	hdr->evt = evt;
   12b96:	701a      	strb	r2, [r3, #0]
	hdr->len = len;
   12b98:	7059      	strb	r1, [r3, #1]
	ep = net_buf_add(buf, sizeof(*ep));
   12b9a:	4630      	mov	r0, r6
   12b9c:	f00f fcfc 	bl	22598 <net_buf_simple_add>
	conn_count--;
   12ba0:	4a8a      	ldr	r2, [pc, #552]	; (12dcc <hci_evt_encode+0x350>)
	ep->status = 0x00;
   12ba2:	7005      	strb	r5, [r0, #0]
	conn_count--;
   12ba4:	6813      	ldr	r3, [r2, #0]
	ep->handle = sys_cpu_to_le16(handle);
   12ba6:	f8a0 7001 	strh.w	r7, [r0, #1]
	ep->reason = *((uint8_t *)pdu_data);
   12baa:	7f21      	ldrb	r1, [r4, #28]
   12bac:	70c1      	strb	r1, [r0, #3]
	conn_count--;
   12bae:	3b01      	subs	r3, #1
   12bb0:	6013      	str	r3, [r2, #0]
   12bb2:	e7dd      	b.n	12b70 <hci_evt_encode+0xf4>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12bb4:	4b7d      	ldr	r3, [pc, #500]	; (12dac <hci_evt_encode+0x330>)
   12bb6:	6858      	ldr	r0, [r3, #4]
   12bb8:	2100      	movs	r1, #0
   12bba:	460a      	mov	r2, r1
   12bbc:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
   12bc0:	4313      	orrs	r3, r2
   12bc2:	d0d5      	beq.n	12b70 <hci_evt_encode+0xf4>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
   12bc4:	4b7a      	ldr	r3, [pc, #488]	; (12db0 <hci_evt_encode+0x334>)
   12bc6:	6818      	ldr	r0, [r3, #0]
   12bc8:	460b      	mov	r3, r1
   12bca:	f000 0204 	and.w	r2, r0, #4
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12bce:	4313      	orrs	r3, r2
   12bd0:	d0ce      	beq.n	12b70 <hci_evt_encode+0xf4>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_UPDATE_COMPLETE, sizeof(*sep));
   12bd2:	2209      	movs	r2, #9
   12bd4:	2103      	movs	r1, #3
   12bd6:	4630      	mov	r0, r6
   12bd8:	f7ff f8f8 	bl	11dcc <meta_evt>
	sep->status = cu->status;
   12bdc:	7f23      	ldrb	r3, [r4, #28]
   12bde:	7003      	strb	r3, [r0, #0]
	sep->interval = sys_cpu_to_le16(cu->interval);
   12be0:	8be1      	ldrh	r1, [r4, #30]
	sep->latency = sys_cpu_to_le16(cu->latency);
   12be2:	8c22      	ldrh	r2, [r4, #32]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
   12be4:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   12be6:	f8a0 3007 	strh.w	r3, [r0, #7]
	sep->handle = sys_cpu_to_le16(handle);
   12bea:	f8a0 7001 	strh.w	r7, [r0, #1]
	sep->interval = sys_cpu_to_le16(cu->interval);
   12bee:	f8a0 1003 	strh.w	r1, [r0, #3]
	sep->latency = sys_cpu_to_le16(cu->latency);
   12bf2:	f8a0 2005 	strh.w	r2, [r0, #5]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
   12bf6:	e7bb      	b.n	12b70 <hci_evt_encode+0xf4>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
   12bf8:	4b6c      	ldr	r3, [pc, #432]	; (12dac <hci_evt_encode+0x330>)
   12bfa:	6859      	ldr	r1, [r3, #4]
   12bfc:	2400      	movs	r4, #0
   12bfe:	4622      	mov	r2, r4
   12c00:	f401 4300 	and.w	r3, r1, #32768	; 0x8000
   12c04:	4313      	orrs	r3, r2
   12c06:	d0b3      	beq.n	12b70 <hci_evt_encode+0xf4>
	hdr = net_buf_add(buf, sizeof(*hdr));
   12c08:	3608      	adds	r6, #8
   12c0a:	2102      	movs	r1, #2
   12c0c:	4630      	mov	r0, r6
   12c0e:	f00f fcc3 	bl	22598 <net_buf_simple_add>
   12c12:	4603      	mov	r3, r0
	hdr->evt = evt;
   12c14:	2230      	movs	r2, #48	; 0x30
	hdr->len = len;
   12c16:	2103      	movs	r1, #3
	ep = net_buf_add(buf, sizeof(*ep));
   12c18:	4630      	mov	r0, r6
	hdr->evt = evt;
   12c1a:	701a      	strb	r2, [r3, #0]
	hdr->len = len;
   12c1c:	7059      	strb	r1, [r3, #1]
	ep = net_buf_add(buf, sizeof(*ep));
   12c1e:	f00f fcbb 	bl	22598 <net_buf_simple_add>
	ep->status = 0x00;
   12c22:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   12c24:	f8a0 7001 	strh.w	r7, [r0, #1]
   12c28:	e7a2      	b.n	12b70 <hci_evt_encode+0xf4>
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
   12c2a:	4b69      	ldr	r3, [pc, #420]	; (12dd0 <hci_evt_encode+0x354>)
   12c2c:	6819      	ldr	r1, [r3, #0]
   12c2e:	2300      	movs	r3, #0
   12c30:	f401 0200 	and.w	r2, r1, #8388608	; 0x800000
   12c34:	4313      	orrs	r3, r2
   12c36:	d09b      	beq.n	12b70 <hci_evt_encode+0xf4>
	hdr = net_buf_add(buf, sizeof(*hdr));
   12c38:	3608      	adds	r6, #8
   12c3a:	2102      	movs	r1, #2
   12c3c:	4630      	mov	r0, r6
   12c3e:	f00f fcab 	bl	22598 <net_buf_simple_add>
   12c42:	4603      	mov	r3, r0
	hdr->evt = evt;
   12c44:	2257      	movs	r2, #87	; 0x57
	hdr->len = len;
   12c46:	2102      	movs	r1, #2
	ep = net_buf_add(buf, sizeof(*ep));
   12c48:	4630      	mov	r0, r6
	hdr->evt = evt;
   12c4a:	701a      	strb	r2, [r3, #0]
	hdr->len = len;
   12c4c:	7059      	strb	r1, [r3, #1]
	ep = net_buf_add(buf, sizeof(*ep));
   12c4e:	f00f fca3 	bl	22598 <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
   12c52:	8007      	strh	r7, [r0, #0]
   12c54:	e78c      	b.n	12b70 <hci_evt_encode+0xf4>
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
   12c56:	4a5f      	ldr	r2, [pc, #380]	; (12dd4 <hci_evt_encode+0x358>)
	rssi = -(node_rx->hdr.rx_ftr.rssi);
   12c58:	7e03      	ldrb	r3, [r0, #24]
	if (adv->tx_addr) {
   12c5a:	7f05      	ldrb	r5, [r0, #28]
	rl_idx = node_rx->hdr.rx_ftr.rl_idx;
   12c5c:	f890 901a 	ldrb.w	r9, [r0, #26]
	direct = node_rx->hdr.rx_ftr.direct;
   12c60:	f894 a01b 	ldrb.w	sl, [r4, #27]
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
   12c64:	e892 0003 	ldmia.w	r2, {r0, r1}
	rssi = -(node_rx->hdr.rx_ftr.rssi);
   12c68:	425b      	negs	r3, r3
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
   12c6a:	0c0a      	lsrs	r2, r1, #16
	rssi = -(node_rx->hdr.rx_ftr.rssi);
   12c6c:	b25b      	sxtb	r3, r3
	if (adv->tx_addr) {
   12c6e:	066f      	lsls	r7, r5, #25
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
   12c70:	9006      	str	r0, [sp, #24]
   12c72:	f8ad 101c 	strh.w	r1, [sp, #28]
   12c76:	f88d 201e 	strb.w	r2, [sp, #30]
	rssi = -(node_rx->hdr.rx_ftr.rssi);
   12c7a:	9305      	str	r3, [sp, #20]
	if (adv->tx_addr) {
   12c7c:	f100 81c3 	bmi.w	13006 <hci_evt_encode+0x58a>
	if (direct) {
   12c80:	4b4a      	ldr	r3, [pc, #296]	; (12dac <hci_evt_encode+0x330>)
   12c82:	6858      	ldr	r0, [r3, #4]
   12c84:	2100      	movs	r1, #0
   12c86:	460a      	mov	r2, r1
   12c88:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
   12c8c:	f1ba 0f00 	cmp.w	sl, #0
   12c90:	f040 81e8 	bne.w	13064 <hci_evt_encode+0x5e8>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12c94:	4313      	orrs	r3, r2
   12c96:	f43f af6b 	beq.w	12b70 <hci_evt_encode+0xf4>
	    !(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) {
   12c9a:	4b45      	ldr	r3, [pc, #276]	; (12db0 <hci_evt_encode+0x334>)
   12c9c:	6819      	ldr	r1, [r3, #0]
   12c9e:	4653      	mov	r3, sl
   12ca0:	f001 0202 	and.w	r2, r1, #2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12ca4:	4313      	orrs	r3, r2
   12ca6:	f43f af63 	beq.w	12b70 <hci_evt_encode+0xf4>
	if (dup_count >= 0) {
   12caa:	f8df 8138 	ldr.w	r8, [pc, #312]	; 12de4 <hci_evt_encode+0x368>
   12cae:	f8d8 2000 	ldr.w	r2, [r8]
   12cb2:	2a00      	cmp	r2, #0
   12cb4:	db42      	blt.n	12d3c <hci_evt_encode+0x2c0>
		for (i = 0; i < dup_count; i++) {
   12cb6:	f104 0b1e 	add.w	fp, r4, #30
   12cba:	d016      	beq.n	12cea <hci_evt_encode+0x26e>
   12cbc:	4d46      	ldr	r5, [pc, #280]	; (12dd8 <hci_evt_encode+0x35c>)
   12cbe:	4657      	mov	r7, sl
			if (!memcmp(&adv->adv_ind.addr[0],
   12cc0:	2206      	movs	r2, #6
   12cc2:	4629      	mov	r1, r5
   12cc4:	4658      	mov	r0, fp
   12cc6:	f00d f8c6 	bl	1fe56 <memcmp>
   12cca:	b938      	cbnz	r0, 12cdc <hci_evt_encode+0x260>
			    adv->tx_addr == dup_filter[i].addr.type) {
   12ccc:	7f22      	ldrb	r2, [r4, #28]
   12cce:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   12cd2:	f3c2 1080 	ubfx	r0, r2, #6, #1
				    sizeof(bt_addr_t)) &&
   12cd6:	4288      	cmp	r0, r1
   12cd8:	f000 829d 	beq.w	13216 <hci_evt_encode+0x79a>
		for (i = 0; i < dup_count; i++) {
   12cdc:	f8d8 2000 	ldr.w	r2, [r8]
   12ce0:	3701      	adds	r7, #1
   12ce2:	4297      	cmp	r7, r2
   12ce4:	f105 0508 	add.w	r5, r5, #8
   12ce8:	dbea      	blt.n	12cc0 <hci_evt_encode+0x244>
		memcpy(&dup_filter[dup_curr].addr.a.val[0],
   12cea:	4d3c      	ldr	r5, [pc, #240]	; (12ddc <hci_evt_encode+0x360>)
   12cec:	4f3c      	ldr	r7, [pc, #240]	; (12de0 <hci_evt_encode+0x364>)
   12cee:	682a      	ldr	r2, [r5, #0]
   12cf0:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
   12cf4:	4659      	mov	r1, fp
   12cf6:	1c90      	adds	r0, r2, #2
   12cf8:	2206      	movs	r2, #6
   12cfa:	f00d f8bc 	bl	1fe76 <memcpy>
		dup_filter[dup_curr].addr.type = adv->tx_addr;
   12cfe:	682a      	ldr	r2, [r5, #0]
   12d00:	7f20      	ldrb	r0, [r4, #28]
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   12d02:	f8d8 1000 	ldr.w	r1, [r8]
		dup_filter[dup_curr].addr.type = adv->tx_addr;
   12d06:	eb07 0cc2 	add.w	ip, r7, r2, lsl #3
   12d0a:	f3c0 1080 	ubfx	r0, r0, #6, #1
   12d0e:	f88c 0001 	strb.w	r0, [ip, #1]
		dup_filter[dup_curr].mask = BIT(adv->type);
   12d12:	f894 c01c 	ldrb.w	ip, [r4, #28]
   12d16:	2001      	movs	r0, #1
   12d18:	f00c 0c0f 	and.w	ip, ip, #15
   12d1c:	fa00 f00c 	lsl.w	r0, r0, ip
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   12d20:	290f      	cmp	r1, #15
		dup_filter[dup_curr].mask = BIT(adv->type);
   12d22:	f807 0032 	strb.w	r0, [r7, r2, lsl #3]
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   12d26:	f300 8273 	bgt.w	13210 <hci_evt_encode+0x794>
			dup_count++;
   12d2a:	3101      	adds	r1, #1
			dup_curr = dup_count;
   12d2c:	460a      	mov	r2, r1
			dup_count++;
   12d2e:	f8c8 1000 	str.w	r1, [r8]
			dup_curr = dup_count;
   12d32:	6029      	str	r1, [r5, #0]
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   12d34:	2a10      	cmp	r2, #16
			dup_curr = 0U;
   12d36:	bf04      	itt	eq
   12d38:	2300      	moveq	r3, #0
   12d3a:	602b      	streq	r3, [r5, #0]
	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
   12d3c:	7f23      	ldrb	r3, [r4, #28]
   12d3e:	f003 030f 	and.w	r3, r3, #15
   12d42:	2b01      	cmp	r3, #1
   12d44:	f000 8261 	beq.w	1320a <hci_evt_encode+0x78e>
		data_len = (adv->len - BDADDR_SIZE);
   12d48:	7f63      	ldrb	r3, [r4, #29]
   12d4a:	f1a3 0a06 	sub.w	sl, r3, #6
   12d4e:	fa5f fa8a 	uxtb.w	sl, sl
   12d52:	3305      	adds	r3, #5
   12d54:	b2da      	uxtb	r2, r3
   12d56:	4657      	mov	r7, sl
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
   12d58:	2102      	movs	r1, #2
   12d5a:	4630      	mov	r0, r6
   12d5c:	f7ff f836 	bl	11dcc <meta_evt>
	sep->num_reports = 1U;
   12d60:	2301      	movs	r3, #1
   12d62:	7003      	strb	r3, [r0, #0]
	adv_info->evt_type = c_adv_type[adv->type];
   12d64:	7f23      	ldrb	r3, [r4, #28]
   12d66:	aa0a      	add	r2, sp, #40	; 0x28
   12d68:	f003 030f 	and.w	r3, r3, #15
   12d6c:	4413      	add	r3, r2
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
   12d6e:	4605      	mov	r5, r0
	adv_info->evt_type = c_adv_type[adv->type];
   12d70:	f813 3c10 	ldrb.w	r3, [r3, #-16]
   12d74:	7043      	strb	r3, [r0, #1]
	if (rl_idx < ll_rl_size_get()) {
   12d76:	f005 fccf 	bl	18718 <ll_rl_size_get>
   12d7a:	4581      	cmp	r9, r0
   12d7c:	f080 823a 	bcs.w	131f4 <hci_evt_encode+0x778>
		ll_rl_id_addr_get(rl_idx, &adv_info->addr.type,
   12d80:	4648      	mov	r0, r9
   12d82:	1cea      	adds	r2, r5, #3
   12d84:	1ca9      	adds	r1, r5, #2
   12d86:	f005 fc83 	bl	18690 <ll_rl_id_addr_get>
		adv_info->addr.type += 2U;
   12d8a:	78ab      	ldrb	r3, [r5, #2]
   12d8c:	3302      	adds	r3, #2
   12d8e:	70ab      	strb	r3, [r5, #2]
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
   12d90:	f105 060a 	add.w	r6, r5, #10
	adv_info->length = data_len;
   12d94:	f885 a009 	strb.w	sl, [r5, #9]
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
   12d98:	f104 0124 	add.w	r1, r4, #36	; 0x24
   12d9c:	4630      	mov	r0, r6
   12d9e:	463a      	mov	r2, r7
   12da0:	f00d f869 	bl	1fe76 <memcpy>
	*prssi = rssi;
   12da4:	9b05      	ldr	r3, [sp, #20]
   12da6:	55f3      	strb	r3, [r6, r7]
   12da8:	e6e2      	b.n	12b70 <hci_evt_encode+0xf4>
   12daa:	bf00      	nop
   12dac:	20000108 	.word	0x20000108
   12db0:	20000110 	.word	0x20000110
   12db4:	000236f0 	.word	0x000236f0
   12db8:	00023728 	.word	0x00023728
   12dbc:	00024204 	.word	0x00024204
   12dc0:	000241a0 	.word	0x000241a0
   12dc4:	00024064 	.word	0x00024064
   12dc8:	00023ff4 	.word	0x00023ff4
   12dcc:	2000229c 	.word	0x2000229c
   12dd0:	20001a90 	.word	0x20001a90
   12dd4:	000238c4 	.word	0x000238c4
   12dd8:	200022aa 	.word	0x200022aa
   12ddc:	200022a4 	.word	0x200022a4
   12de0:	200022a8 	.word	0x200022a8
   12de4:	200022a0 	.word	0x200022a0
	uint8_t status = node_rx->status;
   12de8:	7f05      	ldrb	r5, [r0, #28]
	if (!status) {
   12dea:	2d00      	cmp	r5, #0
   12dec:	f000 8102 	beq.w	12ff4 <hci_evt_encode+0x578>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12df0:	4b96      	ldr	r3, [pc, #600]	; (1304c <hci_evt_encode+0x5d0>)
   12df2:	6859      	ldr	r1, [r3, #4]
   12df4:	f04f 0800 	mov.w	r8, #0
   12df8:	4642      	mov	r2, r8
   12dfa:	f001 5300 	and.w	r3, r1, #536870912	; 0x20000000
   12dfe:	4313      	orrs	r3, r2
   12e00:	f43f aeb6 	beq.w	12b70 <hci_evt_encode+0xf4>
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
   12e04:	4b92      	ldr	r3, [pc, #584]	; (13050 <hci_evt_encode+0x5d4>)
   12e06:	f8d3 c000 	ldr.w	ip, [r3]
   12e0a:	f240 2101 	movw	r1, #513	; 0x201
   12e0e:	ea0c 0201 	and.w	r2, ip, r1
   12e12:	4643      	mov	r3, r8
   12e14:	4313      	orrs	r3, r2
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
   12e16:	f40c 7000 	and.w	r0, ip, #512	; 0x200
   12e1a:	4641      	mov	r1, r8
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
   12e1c:	f43f aea8 	beq.w	12b70 <hci_evt_encode+0xf4>
	if (!status) {
   12e20:	2d00      	cmp	r5, #0
   12e22:	f040 8102 	bne.w	1302a <hci_evt_encode+0x5ae>
		conn_count++;
   12e26:	4a8b      	ldr	r2, [pc, #556]	; (13054 <hci_evt_encode+0x5d8>)
   12e28:	6813      	ldr	r3, [r2, #0]
   12e2a:	3301      	adds	r3, #1
   12e2c:	6013      	str	r3, [r2, #0]
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
   12e2e:	ea50 0301 	orrs.w	r3, r0, r1
   12e32:	f104 081f 	add.w	r8, r4, #31
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
   12e36:	4630      	mov	r0, r6
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
   12e38:	f040 81a4 	bne.w	13184 <hci_evt_encode+0x708>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
   12e3c:	2212      	movs	r2, #18
   12e3e:	2101      	movs	r1, #1
   12e40:	f7fe ffc4 	bl	11dcc <meta_evt>
	lecc->status = 0x00;
   12e44:	7005      	strb	r5, [r0, #0]
	lecc->handle = sys_cpu_to_le16(handle);
   12e46:	f8a0 7001 	strh.w	r7, [r0, #1]
	lecc->role = node_rx->role;
   12e4a:	7f63      	ldrb	r3, [r4, #29]
   12e4c:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = node_rx->peer_addr_type & 0x1;
   12e4e:	7fa3      	ldrb	r3, [r4, #30]
   12e50:	f003 0301 	and.w	r3, r3, #1
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
   12e54:	4606      	mov	r6, r0
	lecc->peer_addr.type = node_rx->peer_addr_type & 0x1;
   12e56:	7103      	strb	r3, [r0, #4]
	memcpy(&lecc->peer_addr.a.val[0], &node_rx->peer_addr[0], BDADDR_SIZE);
   12e58:	4641      	mov	r1, r8
   12e5a:	2206      	movs	r2, #6
   12e5c:	3005      	adds	r0, #5
   12e5e:	f00d f80a 	bl	1fe76 <memcpy>
	lecc->supv_timeout = sys_cpu_to_le16(node_rx->timeout);
   12e62:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
	lecc->interval = sys_cpu_to_le16(node_rx->interval);
   12e64:	8e61      	ldrh	r1, [r4, #50]	; 0x32
	lecc->latency = sys_cpu_to_le16(node_rx->latency);
   12e66:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   12e68:	f8a6 200d 	strh.w	r2, [r6, #13]
	lecc->interval = sys_cpu_to_le16(node_rx->interval);
   12e6c:	f8a6 100b 	strh.w	r1, [r6, #11]
	lecc->supv_timeout = sys_cpu_to_le16(node_rx->timeout);
   12e70:	f8a6 300f 	strh.w	r3, [r6, #15]
	lecc->clock_accuracy = node_rx->sca;
   12e74:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   12e78:	7473      	strb	r3, [r6, #17]
   12e7a:	e679      	b.n	12b70 <hci_evt_encode+0xf4>
		LL_ASSERT(0);
   12e7c:	f241 035e 	movw	r3, #4190	; 0x105e
   12e80:	e66b      	b.n	12b5a <hci_evt_encode+0xde>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12e82:	4b72      	ldr	r3, [pc, #456]	; (1304c <hci_evt_encode+0x5d0>)
   12e84:	6858      	ldr	r0, [r3, #4]
   12e86:	2100      	movs	r1, #0
   12e88:	460a      	mov	r2, r1
   12e8a:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
   12e8e:	4313      	orrs	r3, r2
   12e90:	f43f ae6e 	beq.w	12b70 <hci_evt_encode+0xf4>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
   12e94:	4b6e      	ldr	r3, [pc, #440]	; (13050 <hci_evt_encode+0x5d4>)
   12e96:	6818      	ldr	r0, [r3, #0]
   12e98:	460b      	mov	r3, r1
   12e9a:	f000 0240 	and.w	r2, r0, #64	; 0x40
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12e9e:	4313      	orrs	r3, r2
   12ea0:	f43f ae66 	beq.w	12b70 <hci_evt_encode+0xf4>
	sep = meta_evt(buf, BT_HCI_EVT_LE_DATA_LEN_CHANGE, sizeof(*sep));
   12ea4:	4630      	mov	r0, r6
   12ea6:	220a      	movs	r2, #10
   12ea8:	2107      	movs	r1, #7
   12eaa:	f7fe ff8f 	bl	11dcc <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
   12eae:	8007      	strh	r7, [r0, #0]
	sep->max_tx_octets = pdu_data->llctrl.length_rsp.max_tx_octets;
   12eb0:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   12eb2:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time = pdu_data->llctrl.length_rsp.max_tx_time;
   12eb4:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   12eb6:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets = pdu_data->llctrl.length_rsp.max_rx_octets;
   12eb8:	8c23      	ldrh	r3, [r4, #32]
   12eba:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
   12ebc:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   12ebe:	8103      	strh	r3, [r0, #8]
   12ec0:	e656      	b.n	12b70 <hci_evt_encode+0xf4>
	sep = meta_evt(buf, BT_HCI_EVT_LE_PHY_UPDATE_COMPLETE, sizeof(*sep));
   12ec2:	2205      	movs	r2, #5
   12ec4:	4630      	mov	r0, r6
   12ec6:	210c      	movs	r1, #12
   12ec8:	f7fe ff80 	bl	11dcc <meta_evt>
	sep->status = pu->status;
   12ecc:	7f23      	ldrb	r3, [r4, #28]
   12ece:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
   12ed0:	f8a0 7001 	strh.w	r7, [r0, #1]
   12ed4:	7f62      	ldrb	r2, [r4, #29]
   12ed6:	2a00      	cmp	r2, #0
   12ed8:	fa92 f3a2 	rbit	r3, r2
   12edc:	fab3 f383 	clz	r3, r3
   12ee0:	bf08      	it	eq
   12ee2:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   12ee6:	3301      	adds	r3, #1
	sep->tx_phy = find_lsb_set(pu->tx);
   12ee8:	70c3      	strb	r3, [r0, #3]
   12eea:	7fa2      	ldrb	r2, [r4, #30]
   12eec:	fa92 f3a2 	rbit	r3, r2
   12ef0:	2a00      	cmp	r2, #0
   12ef2:	fab3 f383 	clz	r3, r3
   12ef6:	bf08      	it	eq
   12ef8:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   12efc:	3301      	adds	r3, #1
	sep->rx_phy = find_lsb_set(pu->rx);
   12efe:	7103      	strb	r3, [r0, #4]
   12f00:	e636      	b.n	12b70 <hci_evt_encode+0xf4>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
   12f02:	4b52      	ldr	r3, [pc, #328]	; (1304c <hci_evt_encode+0x5d0>)
   12f04:	6819      	ldr	r1, [r3, #0]
   12f06:	2000      	movs	r0, #0
   12f08:	f001 0280 	and.w	r2, r1, #128	; 0x80
   12f0c:	4603      	mov	r3, r0
   12f0e:	4313      	orrs	r3, r2
   12f10:	f43f ae2e 	beq.w	12b70 <hci_evt_encode+0xf4>
   12f14:	4632      	mov	r2, r6
   12f16:	4639      	mov	r1, r7
   12f18:	f7fe ffa6 	bl	11e68 <encrypt_change.part.0>
   12f1c:	e628      	b.n	12b70 <hci_evt_encode+0xf4>
		le_unknown_rsp(pdu_data, handle, buf);
   12f1e:	f890 1020 	ldrb.w	r1, [r0, #32]
	switch (pdu_data->llctrl.unknown_rsp.type) {
   12f22:	290e      	cmp	r1, #14
   12f24:	f000 8127 	beq.w	13176 <hci_evt_encode+0x6fa>
   12f28:	4b4b      	ldr	r3, [pc, #300]	; (13058 <hci_evt_encode+0x5dc>)
   12f2a:	4a4c      	ldr	r2, [pc, #304]	; (1305c <hci_evt_encode+0x5e0>)
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
   12f2c:	484c      	ldr	r0, [pc, #304]	; (13060 <hci_evt_encode+0x5e4>)
   12f2e:	1ad2      	subs	r2, r2, r3
   12f30:	08d2      	lsrs	r2, r2, #3
   12f32:	0192      	lsls	r2, r2, #6
   12f34:	f042 0202 	orr.w	r2, r2, #2
   12f38:	f00b fad8 	bl	1e4ec <log_1>
   12f3c:	e618      	b.n	12b70 <hci_evt_encode+0xf4>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
   12f3e:	460b      	mov	r3, r1
   12f40:	463a      	mov	r2, r7
   12f42:	f100 011c 	add.w	r1, r0, #28
   12f46:	2000      	movs	r0, #0
   12f48:	f7fe ff58 	bl	11dfc <le_remote_feat_complete>
		break;
   12f4c:	e610      	b.n	12b70 <hci_evt_encode+0xf4>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12f4e:	4b3f      	ldr	r3, [pc, #252]	; (1304c <hci_evt_encode+0x5d0>)
   12f50:	6858      	ldr	r0, [r3, #4]
   12f52:	2100      	movs	r1, #0
   12f54:	460a      	mov	r2, r1
   12f56:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
   12f5a:	4313      	orrs	r3, r2
   12f5c:	d05b      	beq.n	13016 <hci_evt_encode+0x59a>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
   12f5e:	4b3c      	ldr	r3, [pc, #240]	; (13050 <hci_evt_encode+0x5d4>)
   12f60:	6818      	ldr	r0, [r3, #0]
   12f62:	460b      	mov	r3, r1
   12f64:	f000 0220 	and.w	r2, r0, #32
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12f68:	4313      	orrs	r3, r2
   12f6a:	d054      	beq.n	13016 <hci_evt_encode+0x59a>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));
   12f6c:	4630      	mov	r0, r6
   12f6e:	220a      	movs	r2, #10
   12f70:	2106      	movs	r1, #6
   12f72:	f7fe ff2b 	bl	11dcc <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
   12f76:	8007      	strh	r7, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
   12f78:	8c23      	ldrh	r3, [r4, #32]
   12f7a:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
   12f7c:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   12f7e:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
   12f80:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   12f82:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
   12f84:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   12f86:	8103      	strh	r3, [r0, #8]
   12f88:	e5f2      	b.n	12b70 <hci_evt_encode+0xf4>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
   12f8a:	4b30      	ldr	r3, [pc, #192]	; (1304c <hci_evt_encode+0x5d0>)
   12f8c:	6819      	ldr	r1, [r3, #0]
   12f8e:	2300      	movs	r3, #0
   12f90:	f001 0280 	and.w	r2, r1, #128	; 0x80
   12f94:	4313      	orrs	r3, r2
   12f96:	f43f adeb 	beq.w	12b70 <hci_evt_encode+0xf4>
   12f9a:	f890 0020 	ldrb.w	r0, [r0, #32]
   12f9e:	4632      	mov	r2, r6
   12fa0:	4639      	mov	r1, r7
   12fa2:	f7fe ff61 	bl	11e68 <encrypt_change.part.0>
   12fa6:	e5e3      	b.n	12b70 <hci_evt_encode+0xf4>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12fa8:	4b28      	ldr	r3, [pc, #160]	; (1304c <hci_evt_encode+0x5d0>)
   12faa:	6858      	ldr	r0, [r3, #4]
   12fac:	2100      	movs	r1, #0
   12fae:	460a      	mov	r2, r1
   12fb0:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
   12fb4:	4313      	orrs	r3, r2
   12fb6:	f43f addb 	beq.w	12b70 <hci_evt_encode+0xf4>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
   12fba:	4b25      	ldr	r3, [pc, #148]	; (13050 <hci_evt_encode+0x5d4>)
   12fbc:	6818      	ldr	r0, [r3, #0]
   12fbe:	460b      	mov	r3, r1
   12fc0:	f000 0210 	and.w	r2, r0, #16
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12fc4:	4313      	orrs	r3, r2
   12fc6:	f43f add3 	beq.w	12b70 <hci_evt_encode+0xf4>
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
   12fca:	4630      	mov	r0, r6
   12fcc:	220c      	movs	r2, #12
   12fce:	2105      	movs	r1, #5
   12fd0:	f7fe fefc 	bl	11dcc <meta_evt>
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
   12fd4:	f104 0120 	add.w	r1, r4, #32
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
   12fd8:	4605      	mov	r5, r0
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
   12fda:	2208      	movs	r2, #8
	sep->handle = sys_cpu_to_le16(handle);
   12fdc:	f820 7b02 	strh.w	r7, [r0], #2
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
   12fe0:	f00c ff49 	bl	1fe76 <memcpy>
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(uint16_t));
   12fe4:	f105 000a 	add.w	r0, r5, #10
   12fe8:	f104 0128 	add.w	r1, r4, #40	; 0x28
   12fec:	2202      	movs	r2, #2
   12fee:	f00c ff42 	bl	1fe76 <memcpy>
   12ff2:	e5bd      	b.n	12b70 <hci_evt_encode+0xf4>
		ll_rl_crpa_set(node_rx->peer_addr_type,
   12ff4:	f100 0325 	add.w	r3, r0, #37	; 0x25
   12ff8:	f100 011f 	add.w	r1, r0, #31
   12ffc:	22ff      	movs	r2, #255	; 0xff
   12ffe:	7f80      	ldrb	r0, [r0, #30]
   13000:	f005 feee 	bl	18de0 <ll_rl_crpa_set>
   13004:	e6f4      	b.n	12df0 <hci_evt_encode+0x374>
		ll_rl_crpa_set(0x00, NULL, rl_idx, &adv->adv_ind.addr[0]);
   13006:	2100      	movs	r1, #0
   13008:	4608      	mov	r0, r1
   1300a:	f104 031e 	add.w	r3, r4, #30
   1300e:	464a      	mov	r2, r9
   13010:	f005 fee6 	bl	18de0 <ll_rl_crpa_set>
   13014:	e634      	b.n	12c80 <hci_evt_encode+0x204>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE, 0,
   13016:	2300      	movs	r3, #0
   13018:	e9cd 3301 	strd	r3, r3, [sp, #4]
   1301c:	4638      	mov	r0, r7
   1301e:	9300      	str	r3, [sp, #0]
   13020:	221a      	movs	r2, #26
   13022:	2102      	movs	r1, #2
   13024:	f002 fa2e 	bl	15484 <ll_conn_update>
		return;
   13028:	e5a2      	b.n	12b70 <hci_evt_encode+0xf4>
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
   1302a:	ea50 0301 	orrs.w	r3, r0, r1
   1302e:	f040 80d5 	bne.w	131dc <hci_evt_encode+0x760>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
   13032:	2212      	movs	r2, #18
   13034:	2101      	movs	r1, #1
   13036:	4630      	mov	r0, r6
   13038:	f7fe fec8 	bl	11dcc <meta_evt>
   1303c:	4604      	mov	r4, r0
		(void)memset(lecc, 0x00, sizeof(*lecc));
   1303e:	4641      	mov	r1, r8
   13040:	2212      	movs	r2, #18
   13042:	f00c ff43 	bl	1fecc <memset>
		lecc->status = status;
   13046:	7025      	strb	r5, [r4, #0]
		return;
   13048:	e592      	b.n	12b70 <hci_evt_encode+0xf4>
   1304a:	bf00      	nop
   1304c:	20000108 	.word	0x20000108
   13050:	20000110 	.word	0x20000110
   13054:	2000229c 	.word	0x2000229c
   13058:	000236f0 	.word	0x000236f0
   1305c:	00023728 	.word	0x00023728
   13060:	00024230 	.word	0x00024230
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   13064:	4313      	orrs	r3, r2
   13066:	f43f ad83 	beq.w	12b70 <hci_evt_encode+0xf4>
	    !(le_event_mask & BT_EVT_MASK_LE_DIRECT_ADV_REPORT)) {
   1306a:	4b83      	ldr	r3, [pc, #524]	; (13278 <hci_evt_encode+0x7fc>)
   1306c:	6818      	ldr	r0, [r3, #0]
   1306e:	460b      	mov	r3, r1
   13070:	f400 6280 	and.w	r2, r0, #1024	; 0x400
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   13074:	4313      	orrs	r3, r2
   13076:	f43f ad7b 	beq.w	12b70 <hci_evt_encode+0xf4>
	LL_ASSERT(adv->type == PDU_ADV_TYPE_DIRECT_IND);
   1307a:	7f23      	ldrb	r3, [r4, #28]
   1307c:	f003 030f 	and.w	r3, r3, #15
   13080:	2b01      	cmp	r3, #1
   13082:	d00c      	beq.n	1309e <hci_evt_encode+0x622>
   13084:	4a7d      	ldr	r2, [pc, #500]	; (1327c <hci_evt_encode+0x800>)
   13086:	497e      	ldr	r1, [pc, #504]	; (13280 <hci_evt_encode+0x804>)
   13088:	487e      	ldr	r0, [pc, #504]	; (13284 <hci_evt_encode+0x808>)
   1308a:	f640 3348 	movw	r3, #2888	; 0xb48
   1308e:	f00a ff60 	bl	1df52 <printk>
   13092:	4040      	eors	r0, r0
   13094:	f380 8811 	msr	BASEPRI, r0
   13098:	f04f 0003 	mov.w	r0, #3
   1309c:	df02      	svc	2
	if (dup_count >= 0) {
   1309e:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 13294 <hci_evt_encode+0x818>
   130a2:	f8d8 2000 	ldr.w	r2, [r8]
   130a6:	2a00      	cmp	r2, #0
   130a8:	db42      	blt.n	13130 <hci_evt_encode+0x6b4>
		for (i = 0; i < dup_count; i++) {
   130aa:	f104 0a1e 	add.w	sl, r4, #30
   130ae:	d016      	beq.n	130de <hci_evt_encode+0x662>
   130b0:	4d75      	ldr	r5, [pc, #468]	; (13288 <hci_evt_encode+0x80c>)
   130b2:	2700      	movs	r7, #0
			if (!memcmp(&adv->adv_ind.addr[0],
   130b4:	2206      	movs	r2, #6
   130b6:	4629      	mov	r1, r5
   130b8:	4650      	mov	r0, sl
   130ba:	f00c fecc 	bl	1fe56 <memcmp>
   130be:	b938      	cbnz	r0, 130d0 <hci_evt_encode+0x654>
			    adv->tx_addr == dup_filter[i].addr.type) {
   130c0:	7f22      	ldrb	r2, [r4, #28]
   130c2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   130c6:	f3c2 1080 	ubfx	r0, r2, #6, #1
				    sizeof(bt_addr_t)) &&
   130ca:	4288      	cmp	r0, r1
   130cc:	f000 80c2 	beq.w	13254 <hci_evt_encode+0x7d8>
		for (i = 0; i < dup_count; i++) {
   130d0:	f8d8 2000 	ldr.w	r2, [r8]
   130d4:	3701      	adds	r7, #1
   130d6:	4297      	cmp	r7, r2
   130d8:	f105 0508 	add.w	r5, r5, #8
   130dc:	dbea      	blt.n	130b4 <hci_evt_encode+0x638>
		memcpy(&dup_filter[dup_curr].addr.a.val[0],
   130de:	4d6b      	ldr	r5, [pc, #428]	; (1328c <hci_evt_encode+0x810>)
   130e0:	4f6b      	ldr	r7, [pc, #428]	; (13290 <hci_evt_encode+0x814>)
   130e2:	682a      	ldr	r2, [r5, #0]
   130e4:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
   130e8:	4651      	mov	r1, sl
   130ea:	1c90      	adds	r0, r2, #2
   130ec:	2206      	movs	r2, #6
   130ee:	f00c fec2 	bl	1fe76 <memcpy>
		dup_filter[dup_curr].addr.type = adv->tx_addr;
   130f2:	682a      	ldr	r2, [r5, #0]
   130f4:	7f20      	ldrb	r0, [r4, #28]
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   130f6:	f8d8 1000 	ldr.w	r1, [r8]
		dup_filter[dup_curr].addr.type = adv->tx_addr;
   130fa:	eb07 0cc2 	add.w	ip, r7, r2, lsl #3
   130fe:	f3c0 1080 	ubfx	r0, r0, #6, #1
   13102:	f88c 0001 	strb.w	r0, [ip, #1]
		dup_filter[dup_curr].mask = BIT(adv->type);
   13106:	f894 c01c 	ldrb.w	ip, [r4, #28]
   1310a:	2001      	movs	r0, #1
   1310c:	f00c 0c0f 	and.w	ip, ip, #15
   13110:	fa00 f00c 	lsl.w	r0, r0, ip
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   13114:	290f      	cmp	r1, #15
		dup_filter[dup_curr].mask = BIT(adv->type);
   13116:	f807 0032 	strb.w	r0, [r7, r2, lsl #3]
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   1311a:	f300 8098 	bgt.w	1324e <hci_evt_encode+0x7d2>
			dup_count++;
   1311e:	3101      	adds	r1, #1
			dup_curr = dup_count;
   13120:	460a      	mov	r2, r1
			dup_count++;
   13122:	f8c8 1000 	str.w	r1, [r8]
			dup_curr = dup_count;
   13126:	6029      	str	r1, [r5, #0]
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   13128:	2a10      	cmp	r2, #16
			dup_curr = 0U;
   1312a:	bf04      	itt	eq
   1312c:	2300      	moveq	r3, #0
   1312e:	602b      	streq	r3, [r5, #0]
	drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
   13130:	2211      	movs	r2, #17
   13132:	210b      	movs	r1, #11
   13134:	4630      	mov	r0, r6
   13136:	f7fe fe49 	bl	11dcc <meta_evt>
	drp->num_reports = 1U;
   1313a:	2301      	movs	r3, #1
   1313c:	7003      	strb	r3, [r0, #0]
	dir_info->evt_type = BT_HCI_ADV_DIRECT_IND;
   1313e:	7043      	strb	r3, [r0, #1]
	drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
   13140:	4605      	mov	r5, r0
	if (rl_idx < ll_rl_size_get()) {
   13142:	f005 fae9 	bl	18718 <ll_rl_size_get>
   13146:	4581      	cmp	r9, r0
   13148:	d276      	bcs.n	13238 <hci_evt_encode+0x7bc>
		ll_rl_id_addr_get(rl_idx, &dir_info->addr.type,
   1314a:	4648      	mov	r0, r9
   1314c:	1cea      	adds	r2, r5, #3
   1314e:	1ca9      	adds	r1, r5, #2
   13150:	f005 fa9e 	bl	18690 <ll_rl_id_addr_get>
		dir_info->addr.type += 2U;
   13154:	78ab      	ldrb	r3, [r5, #2]
   13156:	3302      	adds	r3, #2
   13158:	70ab      	strb	r3, [r5, #2]
	dir_info->dir_addr.type = adv->rx_addr;
   1315a:	7f23      	ldrb	r3, [r4, #28]
   1315c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
   13160:	726b      	strb	r3, [r5, #9]
	memcpy(&dir_info->dir_addr.a.val[0],
   13162:	f104 0124 	add.w	r1, r4, #36	; 0x24
   13166:	2206      	movs	r2, #6
   13168:	f105 000a 	add.w	r0, r5, #10
   1316c:	f00c fe83 	bl	1fe76 <memcpy>
	dir_info->rssi = rssi;
   13170:	9b05      	ldr	r3, [sp, #20]
   13172:	742b      	strb	r3, [r5, #16]
   13174:	e4fc      	b.n	12b70 <hci_evt_encode+0xf4>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
   13176:	4633      	mov	r3, r6
   13178:	463a      	mov	r2, r7
   1317a:	2100      	movs	r1, #0
   1317c:	201a      	movs	r0, #26
   1317e:	f7fe fe3d 	bl	11dfc <le_remote_feat_complete>
		break;
   13182:	e4f5      	b.n	12b70 <hci_evt_encode+0xf4>
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
   13184:	221e      	movs	r2, #30
   13186:	210a      	movs	r1, #10
   13188:	f7fe fe20 	bl	11dcc <meta_evt>
		leecc->status = 0x00;
   1318c:	7005      	strb	r5, [r0, #0]
		leecc->handle = sys_cpu_to_le16(handle);
   1318e:	f8a0 7001 	strh.w	r7, [r0, #1]
		leecc->role = node_rx->role;
   13192:	7f63      	ldrb	r3, [r4, #29]
   13194:	70c3      	strb	r3, [r0, #3]
		leecc->peer_addr.type = node_rx->peer_addr_type;
   13196:	7fa3      	ldrb	r3, [r4, #30]
   13198:	7103      	strb	r3, [r0, #4]
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
   1319a:	4606      	mov	r6, r0
		memcpy(&leecc->peer_addr.a.val[0], &node_rx->peer_addr[0],
   1319c:	4641      	mov	r1, r8
   1319e:	2206      	movs	r2, #6
   131a0:	3005      	adds	r0, #5
   131a2:	f00c fe68 	bl	1fe76 <memcpy>
		memcpy(&leecc->local_rpa.val[0], &node_rx->local_rpa[0],
   131a6:	2206      	movs	r2, #6
   131a8:	f104 012b 	add.w	r1, r4, #43	; 0x2b
   131ac:	f106 000b 	add.w	r0, r6, #11
   131b0:	f00c fe61 	bl	1fe76 <memcpy>
		memcpy(&leecc->peer_rpa.val[0], &node_rx->peer_rpa[0],
   131b4:	2206      	movs	r2, #6
   131b6:	f104 0125 	add.w	r1, r4, #37	; 0x25
   131ba:	f106 0011 	add.w	r0, r6, #17
   131be:	f00c fe5a 	bl	1fe76 <memcpy>
		leecc->supv_timeout = sys_cpu_to_le16(node_rx->timeout);
   131c2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
		leecc->interval = sys_cpu_to_le16(node_rx->interval);
   131c4:	8e61      	ldrh	r1, [r4, #50]	; 0x32
		leecc->latency = sys_cpu_to_le16(node_rx->latency);
   131c6:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   131c8:	f8a6 2019 	strh.w	r2, [r6, #25]
		leecc->interval = sys_cpu_to_le16(node_rx->interval);
   131cc:	f8a6 1017 	strh.w	r1, [r6, #23]
		leecc->supv_timeout = sys_cpu_to_le16(node_rx->timeout);
   131d0:	f8a6 301b 	strh.w	r3, [r6, #27]
		leecc->clock_accuracy = node_rx->sca;
   131d4:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   131d8:	7773      	strb	r3, [r6, #29]
		return;
   131da:	e4c9      	b.n	12b70 <hci_evt_encode+0xf4>
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
   131dc:	221e      	movs	r2, #30
   131de:	210a      	movs	r1, #10
   131e0:	4630      	mov	r0, r6
   131e2:	f7fe fdf3 	bl	11dcc <meta_evt>
   131e6:	4604      	mov	r4, r0
			(void)memset(leecc, 0x00, sizeof(*leecc));
   131e8:	4641      	mov	r1, r8
   131ea:	221e      	movs	r2, #30
   131ec:	f00c fe6e 	bl	1fecc <memset>
			leecc->status = status;
   131f0:	7025      	strb	r5, [r4, #0]
			return;
   131f2:	e4bd      	b.n	12b70 <hci_evt_encode+0xf4>
		adv_info->addr.type = adv->tx_addr;
   131f4:	7f23      	ldrb	r3, [r4, #28]
   131f6:	f3c3 1380 	ubfx	r3, r3, #6, #1
   131fa:	70ab      	strb	r3, [r5, #2]
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
   131fc:	2206      	movs	r2, #6
   131fe:	f104 011e 	add.w	r1, r4, #30
   13202:	1ce8      	adds	r0, r5, #3
   13204:	f00c fe37 	bl	1fe76 <memcpy>
   13208:	e5c2      	b.n	12d90 <hci_evt_encode+0x314>
   1320a:	2700      	movs	r7, #0
   1320c:	220b      	movs	r2, #11
   1320e:	e5a3      	b.n	12d58 <hci_evt_encode+0x2dc>
			dup_curr++;
   13210:	3201      	adds	r2, #1
   13212:	602a      	str	r2, [r5, #0]
   13214:	e58e      	b.n	12d34 <hci_evt_encode+0x2b8>
				if (dup_filter[i].mask & BIT(adv->type)) {
   13216:	491e      	ldr	r1, [pc, #120]	; (13290 <hci_evt_encode+0x814>)
   13218:	f811 3037 	ldrb.w	r3, [r1, r7, lsl #3]
   1321c:	f002 020f 	and.w	r2, r2, #15
   13220:	fa23 f002 	lsr.w	r0, r3, r2
   13224:	07c0      	lsls	r0, r0, #31
   13226:	f53f aca3 	bmi.w	12b70 <hci_evt_encode+0xf4>
				dup_filter[i].mask |= BIT(adv->type);
   1322a:	2001      	movs	r0, #1
   1322c:	fa00 f202 	lsl.w	r2, r0, r2
   13230:	4313      	orrs	r3, r2
   13232:	f801 3037 	strb.w	r3, [r1, r7, lsl #3]
				return false;
   13236:	e581      	b.n	12d3c <hci_evt_encode+0x2c0>
		dir_info->addr.type = adv->tx_addr;
   13238:	7f23      	ldrb	r3, [r4, #28]
   1323a:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1323e:	70ab      	strb	r3, [r5, #2]
		memcpy(&dir_info->addr.a.val[0], &adv->direct_ind.adv_addr[0],
   13240:	2206      	movs	r2, #6
   13242:	f104 011e 	add.w	r1, r4, #30
   13246:	1ce8      	adds	r0, r5, #3
   13248:	f00c fe15 	bl	1fe76 <memcpy>
   1324c:	e785      	b.n	1315a <hci_evt_encode+0x6de>
			dup_curr++;
   1324e:	3201      	adds	r2, #1
   13250:	602a      	str	r2, [r5, #0]
   13252:	e769      	b.n	13128 <hci_evt_encode+0x6ac>
				if (dup_filter[i].mask & BIT(adv->type)) {
   13254:	480e      	ldr	r0, [pc, #56]	; (13290 <hci_evt_encode+0x814>)
   13256:	f810 3037 	ldrb.w	r3, [r0, r7, lsl #3]
   1325a:	f002 020f 	and.w	r2, r2, #15
   1325e:	fa23 f102 	lsr.w	r1, r3, r2
   13262:	07cd      	lsls	r5, r1, #31
   13264:	f53f ac84 	bmi.w	12b70 <hci_evt_encode+0xf4>
				dup_filter[i].mask |= BIT(adv->type);
   13268:	2101      	movs	r1, #1
   1326a:	fa01 f202 	lsl.w	r2, r1, r2
   1326e:	4313      	orrs	r3, r2
   13270:	f800 3037 	strb.w	r3, [r0, r7, lsl #3]
				return false;
   13274:	e75c      	b.n	13130 <hci_evt_encode+0x6b4>
   13276:	bf00      	nop
   13278:	20000110 	.word	0x20000110
   1327c:	000241a0 	.word	0x000241a0
   13280:	000241dc 	.word	0x000241dc
   13284:	00023ff4 	.word	0x00023ff4
   13288:	200022aa 	.word	0x200022aa
   1328c:	200022a4 	.word	0x200022a4
   13290:	200022a8 	.word	0x200022a8
   13294:	200022a0 	.word	0x200022a0

00013298 <hci_num_cmplt_encode>:

#if defined(CONFIG_BT_CONN)
void hci_num_cmplt_encode(struct net_buf *buf, uint16_t handle, uint8_t num)
{
   13298:	b570      	push	{r4, r5, r6, lr}
	hdr = net_buf_add(buf, sizeof(*hdr));
   1329a:	f100 0408 	add.w	r4, r0, #8
{
   1329e:	460e      	mov	r6, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
   132a0:	4620      	mov	r0, r4
   132a2:	2102      	movs	r1, #2
{
   132a4:	4615      	mov	r5, r2
	hdr = net_buf_add(buf, sizeof(*hdr));
   132a6:	f00f f977 	bl	22598 <net_buf_simple_add>
   132aa:	4603      	mov	r3, r0
	hdr->evt = evt;
   132ac:	2213      	movs	r2, #19
	hdr->len = len;
   132ae:	2105      	movs	r1, #5
	hdr->evt = evt;
   132b0:	701a      	strb	r2, [r3, #0]
	hdr->len = len;
   132b2:	7059      	strb	r1, [r3, #1]
	num_handles = 1U;

	len = (sizeof(*ep) + (sizeof(*hc) * num_handles));
	hci_evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);

	ep = net_buf_add(buf, len);
   132b4:	4620      	mov	r0, r4
   132b6:	f00f f96f 	bl	22598 <net_buf_simple_add>
	ep->num_handles = num_handles;
   132ba:	2301      	movs	r3, #1
   132bc:	7003      	strb	r3, [r0, #0]
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
   132be:	f8a0 6001 	strh.w	r6, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
   132c2:	f8a0 5003 	strh.w	r5, [r0, #3]
}
   132c6:	bd70      	pop	{r4, r5, r6, pc}

000132c8 <hci_get_class>:
{
#if defined(CONFIG_BT_CONN)
	struct pdu_data *pdu_data = PDU_DATA(node_rx);
#endif

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   132c8:	7903      	ldrb	r3, [r0, #4]
   132ca:	2b02      	cmp	r3, #2
   132cc:	d008      	beq.n	132e0 <hci_get_class+0x18>

		switch (node_rx->hdr.type) {
   132ce:	3b04      	subs	r3, #4
   132d0:	b2db      	uxtb	r3, r3
   132d2:	2b0b      	cmp	r3, #11
   132d4:	d901      	bls.n	132da <hci_get_class+0x12>
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   132d6:	2000      	movs	r0, #0
#else
	} else {
		return HCI_CLASS_NONE;
	}
#endif
}
   132d8:	4770      	bx	lr
   132da:	4a05      	ldr	r2, [pc, #20]	; (132f0 <hci_get_class+0x28>)
   132dc:	5cd0      	ldrb	r0, [r2, r3]
   132de:	4770      	bx	lr
	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
   132e0:	7f03      	ldrb	r3, [r0, #28]
   132e2:	f003 0303 	and.w	r3, r3, #3
   132e6:	2b03      	cmp	r3, #3
		return HCI_CLASS_ACL_DATA;
   132e8:	bf0c      	ite	eq
   132ea:	2004      	moveq	r0, #4
   132ec:	2005      	movne	r0, #5
   132ee:	4770      	bx	lr
   132f0:	0002424c 	.word	0x0002424c

000132f4 <hci_init>:

void hci_init(struct k_poll_signal *signal_host_buf)
{
   132f4:	b430      	push	{r4, r5}
	event_mask = DEFAULT_EVENT_MASK;
   132f6:	480b      	ldr	r0, [pc, #44]	; (13324 <hci_init+0x30>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   132f8:	490b      	ldr	r1, [pc, #44]	; (13328 <hci_init+0x34>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   132fa:	4a0c      	ldr	r2, [pc, #48]	; (1332c <hci_init+0x38>)
	dup_count = -1;
   132fc:	4b0c      	ldr	r3, [pc, #48]	; (13330 <hci_init+0x3c>)
	event_mask = DEFAULT_EVENT_MASK;
   132fe:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   13302:	f641 75ff 	movw	r5, #8191	; 0x1fff
   13306:	e9c0 4500 	strd	r4, r5, [r0]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   1330a:	2400      	movs	r4, #0
   1330c:	2500      	movs	r5, #0
   1330e:	e9c1 4500 	strd	r4, r5, [r1]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   13312:	201f      	movs	r0, #31
   13314:	2100      	movs	r1, #0
   13316:	e9c2 0100 	strd	r0, r1, [r2]
	dup_count = -1;
   1331a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
}
   1331e:	bc30      	pop	{r4, r5}
	dup_count = -1;
   13320:	601a      	str	r2, [r3, #0]
}
   13322:	4770      	bx	lr
   13324:	20000108 	.word	0x20000108
   13328:	20001a90 	.word	0x20001a90
   1332c:	20000110 	.word	0x20000110
   13330:	200022a0 	.word	0x200022a0

00013334 <bt_rand>:
#include "hal/ecb.h"
#include "lll.h"

int bt_rand(void *buf, size_t len)
{
	return lll_csrand_get(buf, len);
   13334:	f006 b9e6 	b.w	19704 <lll_csrand_get>

00013338 <bt_encrypt_le>:
}

int bt_encrypt_le(const uint8_t key[16], const uint8_t plaintext[16],
		  uint8_t enc_data[16])
{
   13338:	b508      	push	{r3, lr}
	BT_DBG("key %s", bt_hex(key, 16));
	BT_DBG("plaintext %s", bt_hex(plaintext, 16));

	ecb_encrypt(key, plaintext, enc_data, NULL);
   1333a:	2300      	movs	r3, #0
   1333c:	f007 fbc8 	bl	1aad0 <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
   13340:	2000      	movs	r0, #0
   13342:	bd08      	pop	{r3, pc}

00013344 <perform_lll_reset>:

	return 0;
}

static void perform_lll_reset(void *param)
{
   13344:	b510      	push	{r4, lr}
   13346:	4604      	mov	r4, r0
	int err;

	/* Reset LLL */
	err = lll_reset();
   13348:	f006 f9fc 	bl	19744 <lll_reset>
	LL_ASSERT(!err);
   1334c:	b950      	cbnz	r0, 13364 <perform_lll_reset+0x20>
	LL_ASSERT(!err);
#endif /* CONFIG_BT_BROADCASTER */

#if defined(CONFIG_BT_OBSERVER)
	/* Reset scan state */
	err = lll_scan_reset();
   1334e:	f006 fe91 	bl	1a074 <lll_scan_reset>
	LL_ASSERT(!err);
   13352:	b9c0      	cbnz	r0, 13386 <perform_lll_reset+0x42>
#endif /* CONFIG_BT_OBSERVER */

#if defined(CONFIG_BT_CONN)
	/* Reset conn role */
	err = lll_conn_reset();
   13354:	f006 ff20 	bl	1a198 <lll_conn_reset>
	LL_ASSERT(!err);
   13358:	bb30      	cbnz	r0, 133a8 <perform_lll_reset+0x64>
	z_impl_k_sem_give(sem);
   1335a:	4620      	mov	r0, r4
#endif /* CONFIG_BT_CONN */

#if !defined(CONFIG_BT_CTLR_ZLI)
	k_sem_give(param);
#endif /* !CONFIG_BT_CTLR_ZLI */
}
   1335c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13360:	f00a ba0a 	b.w	1d778 <z_impl_k_sem_give>
	LL_ASSERT(!err);
   13364:	4a19      	ldr	r2, [pc, #100]	; (133cc <perform_lll_reset+0x88>)
   13366:	491a      	ldr	r1, [pc, #104]	; (133d0 <perform_lll_reset+0x8c>)
   13368:	481a      	ldr	r0, [pc, #104]	; (133d4 <perform_lll_reset+0x90>)
   1336a:	f44f 63a0 	mov.w	r3, #1280	; 0x500
   1336e:	f00a fdf0 	bl	1df52 <printk>
   13372:	4040      	eors	r0, r0
   13374:	f380 8811 	msr	BASEPRI, r0
   13378:	f04f 0003 	mov.w	r0, #3
   1337c:	df02      	svc	2
	err = lll_scan_reset();
   1337e:	f006 fe79 	bl	1a074 <lll_scan_reset>
	LL_ASSERT(!err);
   13382:	2800      	cmp	r0, #0
   13384:	d0e6      	beq.n	13354 <perform_lll_reset+0x10>
   13386:	4a11      	ldr	r2, [pc, #68]	; (133cc <perform_lll_reset+0x88>)
   13388:	4911      	ldr	r1, [pc, #68]	; (133d0 <perform_lll_reset+0x8c>)
   1338a:	4812      	ldr	r0, [pc, #72]	; (133d4 <perform_lll_reset+0x90>)
   1338c:	f240 530b 	movw	r3, #1291	; 0x50b
   13390:	f00a fddf 	bl	1df52 <printk>
   13394:	4040      	eors	r0, r0
   13396:	f380 8811 	msr	BASEPRI, r0
   1339a:	f04f 0003 	mov.w	r0, #3
   1339e:	df02      	svc	2
	err = lll_conn_reset();
   133a0:	f006 fefa 	bl	1a198 <lll_conn_reset>
	LL_ASSERT(!err);
   133a4:	2800      	cmp	r0, #0
   133a6:	d0d8      	beq.n	1335a <perform_lll_reset+0x16>
   133a8:	4a08      	ldr	r2, [pc, #32]	; (133cc <perform_lll_reset+0x88>)
   133aa:	4909      	ldr	r1, [pc, #36]	; (133d0 <perform_lll_reset+0x8c>)
   133ac:	4809      	ldr	r0, [pc, #36]	; (133d4 <perform_lll_reset+0x90>)
   133ae:	f240 5311 	movw	r3, #1297	; 0x511
   133b2:	f00a fdce 	bl	1df52 <printk>
   133b6:	4040      	eors	r0, r0
   133b8:	f380 8811 	msr	BASEPRI, r0
   133bc:	f04f 0003 	mov.w	r0, #3
   133c0:	df02      	svc	2
   133c2:	4620      	mov	r0, r4
}
   133c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   133c8:	f00a b9d6 	b.w	1d778 <z_impl_k_sem_give>
   133cc:	00024268 	.word	0x00024268
   133d0:	000242a4 	.word	0x000242a4
   133d4:	00023ff4 	.word	0x00023ff4

000133d8 <disabled_cb>:
   133d8:	f00a b9ce 	b.w	1d778 <z_impl_k_sem_give>

000133dc <tx_cmplt_get>:
	}
}

#if defined(CONFIG_BT_CONN)
static uint8_t tx_cmplt_get(uint16_t *handle, uint8_t *first, uint8_t last)
{
   133dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct lll_tx *tx;
	uint8_t cmplt;

	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   133e0:	4f2f      	ldr	r7, [pc, #188]	; (134a0 <tx_cmplt_get+0xc4>)
					   uint8_t first, uint8_t last, uint8_t *idx)
{
	void *p;
	uint8_t i;

	if (*idx >= count) {
   133e2:	780b      	ldrb	r3, [r1, #0]
   133e4:	783c      	ldrb	r4, [r7, #0]
{
   133e6:	460d      	mov	r5, r1
	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   133e8:	7879      	ldrb	r1, [r7, #1]
   133ea:	4299      	cmp	r1, r3
   133ec:	bf9c      	itt	ls
   133ee:	78bb      	ldrbls	r3, [r7, #2]
		*idx = first;
   133f0:	702b      	strbls	r3, [r5, #0]
	}

	if (*idx == last) {
   133f2:	429a      	cmp	r2, r3
{
   133f4:	4683      	mov	fp, r0
   133f6:	4692      	mov	sl, r2
   133f8:	d045      	beq.n	13486 <tx_cmplt_get+0xaa>
		return NULL;
	}

	i = *idx + 1;
   133fa:	1c5a      	adds	r2, r3, #1
	if (i == count) {
		i = 0U;
	}

	p = (void *)(fifo + (*idx) * size);
   133fc:	4e29      	ldr	r6, [pc, #164]	; (134a4 <tx_cmplt_get+0xc8>)
	i = *idx + 1;
   133fe:	b2d2      	uxtb	r2, r2
	p = (void *)(fifo + (*idx) * size);
   13400:	fb13 f304 	smulbb	r3, r3, r4
		i = 0U;
   13404:	4291      	cmp	r1, r2
   13406:	bf08      	it	eq
   13408:	2200      	moveq	r2, #0
				    mfifo_tx_ack.n, mfifo_tx_ack.f, last,
				    first);
	if (!tx) {
   1340a:	18f1      	adds	r1, r6, r3

	*idx = i;
   1340c:	702a      	strb	r2, [r5, #0]
   1340e:	d03a      	beq.n	13486 <tx_cmplt_get+0xaa>
		return 0;
	}

	*handle = tx->handle;
   13410:	5af3      	ldrh	r3, [r6, r3]
   13412:	8003      	strh	r3, [r0, #0]
	cmplt = 0U;
   13414:	f04f 0800 	mov.w	r8, #0
   13418:	f04f 0901 	mov.w	r9, #1
   1341c:	e022      	b.n	13464 <tx_cmplt_get+0x88>
		struct node_tx *node_tx;
		struct pdu_data *p;

		node_tx = tx->node;
		p = (void *)node_tx->pdu;
		if (!node_tx || (node_tx == (void *)1) ||
   1341e:	b37b      	cbz	r3, 13480 <tx_cmplt_get+0xa4>
		    (((uint32_t)node_tx & ~3) &&
		     (p->ll_id == PDU_DATA_LLID_DATA_START ||
   13420:	7903      	ldrb	r3, [r0, #4]
   13422:	f003 0303 	and.w	r3, r3, #3
		    (((uint32_t)node_tx & ~3) &&
   13426:	3b01      	subs	r3, #1
   13428:	2b01      	cmp	r3, #1
   1342a:	d931      	bls.n	13490 <tx_cmplt_get+0xb4>
   1342c:	2302      	movs	r3, #2
   1342e:	604b      	str	r3, [r1, #4]
			/* ctrl packet or flushed, hence dont count num cmplt */
			tx->node = (void *)2;
		}

		if (((uint32_t)node_tx & ~3)) {
			ll_tx_mem_release(node_tx);
   13430:	f001 ff76 	bl	15320 <ll_tx_mem_release>
	if (*idx >= count) {
   13434:	782b      	ldrb	r3, [r5, #0]
		}

		tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   13436:	7879      	ldrb	r1, [r7, #1]
   13438:	7838      	ldrb	r0, [r7, #0]
   1343a:	4299      	cmp	r1, r3
   1343c:	bf9c      	itt	ls
   1343e:	78bb      	ldrbls	r3, [r7, #2]
		*idx = first;
   13440:	702b      	strbls	r3, [r5, #0]
	if (*idx == last) {
   13442:	459a      	cmp	sl, r3
   13444:	d021      	beq.n	1348a <tx_cmplt_get+0xae>
	i = *idx + 1;
   13446:	1c5c      	adds	r4, r3, #1
   13448:	b2e4      	uxtb	r4, r4
	p = (void *)(fifo + (*idx) * size);
   1344a:	fb13 f300 	smulbb	r3, r3, r0
		i = 0U;
   1344e:	42a1      	cmp	r1, r4
   13450:	bf08      	it	eq
   13452:	2400      	moveq	r4, #0
					    mfifo_tx_ack.n, mfifo_tx_ack.f,
					    last, first);
	} while (tx && tx->handle == *handle);
   13454:	18f1      	adds	r1, r6, r3
	*idx = i;
   13456:	702c      	strb	r4, [r5, #0]
   13458:	d017      	beq.n	1348a <tx_cmplt_get+0xae>
   1345a:	5af0      	ldrh	r0, [r6, r3]
   1345c:	f8bb 3000 	ldrh.w	r3, [fp]
   13460:	4298      	cmp	r0, r3
   13462:	d112      	bne.n	1348a <tx_cmplt_get+0xae>
		node_tx = tx->node;
   13464:	6848      	ldr	r0, [r1, #4]
		if (!node_tx || (node_tx == (void *)1) ||
   13466:	2801      	cmp	r0, #1
   13468:	f020 0303 	bic.w	r3, r0, #3
   1346c:	d8d7      	bhi.n	1341e <tx_cmplt_get+0x42>
			cmplt++;
   1346e:	f108 0801 	add.w	r8, r8, #1
   13472:	fa5f f888 	uxtb.w	r8, r8
   13476:	f8c1 9004 	str.w	r9, [r1, #4]
		if (((uint32_t)node_tx & ~3)) {
   1347a:	2b00      	cmp	r3, #0
   1347c:	d0da      	beq.n	13434 <tx_cmplt_get+0x58>
   1347e:	e7d7      	b.n	13430 <tx_cmplt_get+0x54>
   13480:	2302      	movs	r3, #2
   13482:	604b      	str	r3, [r1, #4]
   13484:	e7d6      	b.n	13434 <tx_cmplt_get+0x58>
		return 0;
   13486:	f04f 0800 	mov.w	r8, #0

	return cmplt;
}
   1348a:	4640      	mov	r0, r8
   1348c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			cmplt++;
   13490:	f108 0801 	add.w	r8, r8, #1
   13494:	fa5f f888 	uxtb.w	r8, r8
   13498:	f8c1 9004 	str.w	r9, [r1, #4]
		if (((uint32_t)node_tx & ~3)) {
   1349c:	e7c8      	b.n	13430 <tx_cmplt_get+0x54>
   1349e:	bf00      	nop
   134a0:	200003e0 	.word	0x200003e0
   134a4:	200003e4 	.word	0x200003e4

000134a8 <rx_demux>:
		}
}
#endif /* CONFIG_BT_CONN */

static void rx_demux(void *param)
{
   134a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   134ac:	4ca7      	ldr	r4, [pc, #668]	; (1374c <rx_demux+0x2a4>)
	k_sem_give(sem_recv);
   134ae:	4ea8      	ldr	r6, [pc, #672]	; (13750 <rx_demux+0x2a8>)
			static memq_link_t link;
			static struct mayfly mfy = {0, 0, &link, NULL,
						    lll_resume};
			uint32_t ret;

			mfy.param = next;
   134b0:	f8df b2c0 	ldr.w	fp, [pc, #704]	; 13774 <rx_demux+0x2cc>
{
   134b4:	b087      	sub	sp, #28
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
   134b6:	e9d4 0100 	ldrd	r0, r1, [r4]
   134ba:	aa03      	add	r2, sp, #12
   134bc:	f7fc fe1a 	bl	100f4 <memq_peek>
		if (link) {
   134c0:	4607      	mov	r7, r0
   134c2:	2800      	cmp	r0, #0
   134c4:	d040      	beq.n	13548 <rx_demux+0xa0>
			LL_ASSERT(rx);
   134c6:	9b03      	ldr	r3, [sp, #12]
   134c8:	2b00      	cmp	r3, #0
   134ca:	f000 812f 	beq.w	1372c <rx_demux+0x284>
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
   134ce:	7818      	ldrb	r0, [r3, #0]
   134d0:	aa04      	add	r2, sp, #16
   134d2:	a902      	add	r1, sp, #8
   134d4:	f004 f8de 	bl	17694 <ull_conn_ack_by_last_peek>
			if (link_tx) {
   134d8:	4605      	mov	r5, r0
   134da:	2800      	cmp	r0, #0
   134dc:	d06a      	beq.n	135b4 <rx_demux+0x10c>
				rx_demux_conn_tx_ack(rx->ack_last, handle,
   134de:	e9dd 1203 	ldrd	r1, r2, [sp, #12]
   134e2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   134e6:	f891 9000 	ldrb.w	r9, [r1]
   134ea:	9205      	str	r2, [sp, #20]
   134ec:	f8ad 300a 	strh.w	r3, [sp, #10]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
   134f0:	f10d 0814 	add.w	r8, sp, #20
   134f4:	f10d 070a 	add.w	r7, sp, #10
		ull_conn_ack_dequeue();
   134f8:	f004 f8e2 	bl	176c0 <ull_conn_ack_dequeue>
		conn = ull_conn_tx_ack(handle, link, node_tx);
   134fc:	4629      	mov	r1, r5
   134fe:	9a05      	ldr	r2, [sp, #20]
   13500:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   13504:	f004 f924 	bl	17750 <ull_conn_tx_ack>
   13508:	4603      	mov	r3, r0
		ull_conn_link_tx_release(link);
   1350a:	4628      	mov	r0, r5
		conn = ull_conn_tx_ack(handle, link, node_tx);
   1350c:	461d      	mov	r5, r3
		ull_conn_link_tx_release(link);
   1350e:	f004 f89b 	bl	17648 <ull_conn_link_tx_release>
		ull_conn_tx_demux(1);
   13512:	2001      	movs	r0, #1
   13514:	f003 fece 	bl	172b4 <ull_conn_tx_demux>
			ull_conn_tx_lll_enqueue(conn, 1);
   13518:	2101      	movs	r1, #1
   1351a:	4628      	mov	r0, r5
		if (conn) {
   1351c:	b10d      	cbz	r5, 13522 <rx_demux+0x7a>
			ull_conn_tx_lll_enqueue(conn, 1);
   1351e:	f003 ff9d 	bl	1745c <ull_conn_tx_lll_enqueue>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
   13522:	4642      	mov	r2, r8
   13524:	4639      	mov	r1, r7
   13526:	4648      	mov	r0, r9
   13528:	f004 f8b4 	bl	17694 <ull_conn_ack_by_last_peek>
	} while (link);
   1352c:	4605      	mov	r5, r0
   1352e:	2800      	cmp	r0, #0
   13530:	d1e2      	bne.n	134f8 <rx_demux+0x50>
	k_sem_give(sem_recv);
   13532:	6830      	ldr	r0, [r6, #0]
   13534:	f00a f920 	bl	1d778 <z_impl_k_sem_give>
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
   13538:	e9d4 0100 	ldrd	r0, r1, [r4]
   1353c:	aa03      	add	r2, sp, #12
   1353e:	f7fc fdd9 	bl	100f4 <memq_peek>
		if (link) {
   13542:	4607      	mov	r7, r0
   13544:	2800      	cmp	r0, #0
   13546:	d1be      	bne.n	134c6 <rx_demux+0x1e>
			link = ull_conn_ack_peek(&ack_last, &handle, &node_tx);
   13548:	aa04      	add	r2, sp, #16
   1354a:	a902      	add	r1, sp, #8
   1354c:	f10d 0007 	add.w	r0, sp, #7
   13550:	f004 f886 	bl	17660 <ull_conn_ack_peek>
			if (link) {
   13554:	4605      	mov	r5, r0
   13556:	2800      	cmp	r0, #0
   13558:	d069      	beq.n	1362e <rx_demux+0x186>
				rx_demux_conn_tx_ack(ack_last, handle,
   1355a:	9a04      	ldr	r2, [sp, #16]
   1355c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   13560:	f89d 9007 	ldrb.w	r9, [sp, #7]
   13564:	9205      	str	r2, [sp, #20]
   13566:	f8ad 300a 	strh.w	r3, [sp, #10]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
   1356a:	f10d 0814 	add.w	r8, sp, #20
   1356e:	f10d 070a 	add.w	r7, sp, #10
		ull_conn_ack_dequeue();
   13572:	f004 f8a5 	bl	176c0 <ull_conn_ack_dequeue>
		conn = ull_conn_tx_ack(handle, link, node_tx);
   13576:	4629      	mov	r1, r5
   13578:	9a05      	ldr	r2, [sp, #20]
   1357a:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   1357e:	f004 f8e7 	bl	17750 <ull_conn_tx_ack>
   13582:	4603      	mov	r3, r0
		ull_conn_link_tx_release(link);
   13584:	4628      	mov	r0, r5
		conn = ull_conn_tx_ack(handle, link, node_tx);
   13586:	461d      	mov	r5, r3
		ull_conn_link_tx_release(link);
   13588:	f004 f85e 	bl	17648 <ull_conn_link_tx_release>
		ull_conn_tx_demux(1);
   1358c:	2001      	movs	r0, #1
   1358e:	f003 fe91 	bl	172b4 <ull_conn_tx_demux>
			ull_conn_tx_lll_enqueue(conn, 1);
   13592:	2101      	movs	r1, #1
   13594:	4628      	mov	r0, r5
		if (conn) {
   13596:	b10d      	cbz	r5, 1359c <rx_demux+0xf4>
			ull_conn_tx_lll_enqueue(conn, 1);
   13598:	f003 ff60 	bl	1745c <ull_conn_tx_lll_enqueue>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
   1359c:	4642      	mov	r2, r8
   1359e:	4639      	mov	r1, r7
   135a0:	4648      	mov	r0, r9
   135a2:	f004 f877 	bl	17694 <ull_conn_ack_by_last_peek>
	} while (link);
   135a6:	4605      	mov	r5, r0
   135a8:	2800      	cmp	r0, #0
   135aa:	d1e2      	bne.n	13572 <rx_demux+0xca>
	k_sem_give(sem_recv);
   135ac:	6830      	ldr	r0, [r6, #0]
   135ae:	f00a f8e3 	bl	1d778 <z_impl_k_sem_give>
			if (nack) {
   135b2:	e7c1      	b.n	13538 <rx_demux+0x90>
				nack = rx_demux_rx(link, rx);
   135b4:	9b03      	ldr	r3, [sp, #12]
   135b6:	9305      	str	r3, [sp, #20]
	switch (rx->type) {
   135b8:	791b      	ldrb	r3, [r3, #4]
   135ba:	3b01      	subs	r3, #1
   135bc:	2b09      	cmp	r3, #9
   135be:	d806      	bhi.n	135ce <rx_demux+0x126>
   135c0:	e8df f003 	tbb	[pc, r3]
   135c4:	13052e38 	.word	0x13052e38
   135c8:	05050505 	.word	0x05050505
   135cc:	1324      	.short	0x1324
		LL_ASSERT(0);
   135ce:	4a61      	ldr	r2, [pc, #388]	; (13754 <rx_demux+0x2ac>)
   135d0:	4961      	ldr	r1, [pc, #388]	; (13758 <rx_demux+0x2b0>)
   135d2:	4862      	ldr	r0, [pc, #392]	; (1375c <rx_demux+0x2b4>)
   135d4:	f44f 63d7 	mov.w	r3, #1720	; 0x6b8
   135d8:	f00a fcbb 	bl	1df52 <printk>
   135dc:	4040      	eors	r0, r0
   135de:	f380 8811 	msr	BASEPRI, r0
   135e2:	f04f 0003 	mov.w	r0, #3
   135e6:	df02      	svc	2
			if (nack) {
   135e8:	e765      	b.n	134b6 <rx_demux+0xe>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   135ea:	4958      	ldr	r1, [pc, #352]	; (1374c <rx_demux+0x2a4>)
   135ec:	6860      	ldr	r0, [r4, #4]
   135ee:	2200      	movs	r2, #0
   135f0:	f7fc fd88 	bl	10104 <memq_dequeue>
	rx_hdr->ack_last = mfifo_tx_ack.l;
   135f4:	4b5a      	ldr	r3, [pc, #360]	; (13760 <rx_demux+0x2b8>)
		ll_rx_put(link, rx);
   135f6:	9905      	ldr	r1, [sp, #20]
	rx_hdr->ack_last = mfifo_tx_ack.l;
   135f8:	78db      	ldrb	r3, [r3, #3]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   135fa:	4a5a      	ldr	r2, [pc, #360]	; (13764 <rx_demux+0x2bc>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
   135fc:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   135fe:	4638      	mov	r0, r7
   13600:	f7fc fd70 	bl	100e4 <memq_enqueue>
	k_sem_give(sem_recv);
   13604:	6830      	ldr	r0, [r6, #0]
   13606:	f00a f8b7 	bl	1d778 <z_impl_k_sem_give>
			if (nack) {
   1360a:	e795      	b.n	13538 <rx_demux+0x90>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   1360c:	494f      	ldr	r1, [pc, #316]	; (1374c <rx_demux+0x2a4>)
   1360e:	6860      	ldr	r0, [r4, #4]
   13610:	2200      	movs	r2, #0
   13612:	f7fc fd77 	bl	10104 <memq_dequeue>
		ull_conn_setup(link, rx);
   13616:	9905      	ldr	r1, [sp, #20]
   13618:	4638      	mov	r0, r7
   1361a:	f002 fa1d 	bl	15a58 <ull_conn_setup>
			if (nack) {
   1361e:	e74a      	b.n	134b6 <rx_demux+0xe>
		nack = ull_conn_rx(link, (void *)&rx);
   13620:	a905      	add	r1, sp, #20
   13622:	4638      	mov	r0, r7
   13624:	f002 fa3a 	bl	15a9c <ull_conn_rx>
		if (nack) {
   13628:	2800      	cmp	r0, #0
   1362a:	f000 80c8 	beq.w	137be <rx_demux+0x316>
}
   1362e:	b007      	add	sp, #28
   13630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   13634:	4945      	ldr	r1, [pc, #276]	; (1374c <rx_demux+0x2a4>)
   13636:	6860      	ldr	r0, [r4, #4]
   13638:	2200      	movs	r2, #0
   1363a:	f7fc fd63 	bl	10104 <memq_dequeue>
		rx_demux_event_done(link, rx);
   1363e:	9d05      	ldr	r5, [sp, #20]
	switch (done->extra.type) {
   13640:	f895 3020 	ldrb.w	r3, [r5, #32]
	ull_hdr = done->param;
   13644:	f8d5 a01c 	ldr.w	sl, [r5, #28]
	switch (done->extra.type) {
   13648:	b17b      	cbz	r3, 1366a <rx_demux+0x1c2>
   1364a:	2b01      	cmp	r3, #1
   1364c:	f000 80b3 	beq.w	137b6 <rx_demux+0x30e>
		LL_ASSERT(0);
   13650:	4a40      	ldr	r2, [pc, #256]	; (13754 <rx_demux+0x2ac>)
   13652:	4941      	ldr	r1, [pc, #260]	; (13758 <rx_demux+0x2b0>)
   13654:	4841      	ldr	r0, [pc, #260]	; (1375c <rx_demux+0x2b4>)
   13656:	f240 63e9 	movw	r3, #1769	; 0x6e9
   1365a:	f00a fc7a 	bl	1df52 <printk>
   1365e:	4040      	eors	r0, r0
   13660:	f380 8811 	msr	BASEPRI, r0
   13664:	f04f 0003 	mov.w	r0, #3
   13668:	df02      	svc	2
	if (!MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
   1366a:	4a3f      	ldr	r2, [pc, #252]	; (13768 <rx_demux+0x2c0>)
   1366c:	78d1      	ldrb	r1, [r2, #3]
	if (last == count) {
   1366e:	f892 c001 	ldrb.w	ip, [r2, #1]
   13672:	7890      	ldrb	r0, [r2, #2]
	last = last + 1;
   13674:	1c4b      	adds	r3, r1, #1
   13676:	b2db      	uxtb	r3, r3
		last = 0U;
   13678:	459c      	cmp	ip, r3
   1367a:	bf08      	it	eq
   1367c:	2300      	moveq	r3, #0
	if (last == first) {
   1367e:	4298      	cmp	r0, r3
	done->extra.type = 0U;
   13680:	f04f 0c00 	mov.w	ip, #0
   13684:	f885 c020 	strb.w	ip, [r5, #32]
   13688:	f000 80ad 	beq.w	137e6 <rx_demux+0x33e>
	done->hdr.link = link;
   1368c:	602f      	str	r7, [r5, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   1368e:	7810      	ldrb	r0, [r2, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   13690:	fb00 2101 	mla	r1, r0, r1, r2
   13694:	604d      	str	r5, [r1, #4]
	*last = idx; /* Commit: Update write index */
   13696:	70d3      	strb	r3, [r2, #3]
	return MFIFO_DEQUEUE_GET(prep);
   13698:	4d34      	ldr	r5, [pc, #208]	; (1376c <rx_demux+0x2c4>)
   1369a:	78ab      	ldrb	r3, [r5, #2]
	if (first == last) {
   1369c:	78ea      	ldrb	r2, [r5, #3]
   1369e:	f895 c000 	ldrb.w	ip, [r5]
   136a2:	429a      	cmp	r2, r3
   136a4:	d02a      	beq.n	136fc <rx_demux+0x254>
	return (void *)(fifo + first * size);
   136a6:	f105 0904 	add.w	r9, r5, #4
   136aa:	fb03 9c0c 	mla	ip, r3, ip, r9
	while (next) {
   136ae:	f1bc 0f00 	cmp.w	ip, #0
   136b2:	d023      	beq.n	136fc <rx_demux+0x254>
		uint8_t is_aborted = next->is_aborted;
   136b4:	f89c 3020 	ldrb.w	r3, [ip, #32]
		if (!is_aborted) {
   136b8:	079a      	lsls	r2, r3, #30
		uint8_t is_aborted = next->is_aborted;
   136ba:	f3c3 0740 	ubfx	r7, r3, #1, #1
		uint8_t is_resume = next->is_resume;
   136be:	f003 0801 	and.w	r8, r3, #1
		if (!is_aborted) {
   136c2:	d559      	bpl.n	13778 <rx_demux+0x2d0>
			ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
					     TICKER_USER_ID_LLL, 0, &mfy);
			LL_ASSERT(!ret);
		}

		MFIFO_DEQUEUE(prep);
   136c4:	78ea      	ldrb	r2, [r5, #3]
 * @return              Head buffer; or NULL if queue was empty
 */
static inline void *mfifo_dequeue(uint8_t *fifo, uint8_t size, uint8_t count,
				  uint8_t last, uint8_t *first)
{
	uint8_t _first = *first; /* Copy read-index */
   136c6:	78ab      	ldrb	r3, [r5, #2]
   136c8:	f895 c000 	ldrb.w	ip, [r5]
   136cc:	7869      	ldrb	r1, [r5, #1]
	void *mem;

	/* Queue is empty if first == last */
	if (_first == last) {
   136ce:	429a      	cmp	r2, r3
   136d0:	d014      	beq.n	136fc <rx_demux+0x254>
	 * API 2: fifo is array of void-ptrs
	 */
	mem = *((void **)(fifo + _first * size));

	/* Circular buffer increment read-index modulo 'count' */
	_first += 1U;
   136d2:	3301      	adds	r3, #1
   136d4:	b2db      	uxtb	r3, r3
	if (_first == count) {
   136d6:	4299      	cmp	r1, r3
   136d8:	d066      	beq.n	137a8 <rx_demux+0x300>
	if (first == last) {
   136da:	429a      	cmp	r2, r3
		_first = 0U;
	}

	*first = _first; /* Write back read-index */
   136dc:	70ab      	strb	r3, [r5, #2]
	if (first == last) {
   136de:	d00d      	beq.n	136fc <rx_demux+0x254>
	return (void *)(fifo + first * size);
   136e0:	fb03 9c0c 	mla	ip, r3, ip, r9

		next = ull_prepare_dequeue_get();

		if (!next || (!is_aborted && (!is_resume || next->is_resume))) {
   136e4:	f1bc 0f00 	cmp.w	ip, #0
   136e8:	d008      	beq.n	136fc <rx_demux+0x254>
   136ea:	2f00      	cmp	r7, #0
   136ec:	d1e2      	bne.n	136b4 <rx_demux+0x20c>
   136ee:	f1b8 0f00 	cmp.w	r8, #0
   136f2:	d003      	beq.n	136fc <rx_demux+0x254>
   136f4:	f89c 3020 	ldrb.w	r3, [ip, #32]
   136f8:	07db      	lsls	r3, r3, #31
   136fa:	d5db      	bpl.n	136b4 <rx_demux+0x20c>
			break;
		}
	}

	/* ull instance will resume, dont decrement ref */
	if (!ull_hdr) {
   136fc:	f1ba 0f00 	cmp.w	sl, #0
   13700:	f43f aed9 	beq.w	134b6 <rx_demux+0xe>
		return;
	}

	/* Decrement prepare reference */
	LL_ASSERT(ull_hdr->ref);
   13704:	f89a 3000 	ldrb.w	r3, [sl]
   13708:	2b00      	cmp	r3, #0
   1370a:	d07a      	beq.n	13802 <rx_demux+0x35a>
	return hdr->ref--;
   1370c:	3b01      	subs	r3, #1
   1370e:	b2db      	uxtb	r3, r3
   13710:	f88a 3000 	strb.w	r3, [sl]
	ull_ref_dec(ull_hdr);

	/* If disable initiated, signal the semaphore */
	if (!ull_hdr->ref && ull_hdr->disabled_cb) {
   13714:	2b00      	cmp	r3, #0
   13716:	f47f aece 	bne.w	134b6 <rx_demux+0xe>
   1371a:	f8da 3004 	ldr.w	r3, [sl, #4]
   1371e:	2b00      	cmp	r3, #0
   13720:	f43f aec9 	beq.w	134b6 <rx_demux+0xe>
		ull_hdr->disabled_cb(ull_hdr->disabled_param);
   13724:	f8da 0008 	ldr.w	r0, [sl, #8]
   13728:	4798      	blx	r3
			if (nack) {
   1372a:	e6c4      	b.n	134b6 <rx_demux+0xe>
			LL_ASSERT(rx);
   1372c:	4a09      	ldr	r2, [pc, #36]	; (13754 <rx_demux+0x2ac>)
   1372e:	4910      	ldr	r1, [pc, #64]	; (13770 <rx_demux+0x2c8>)
   13730:	480a      	ldr	r0, [pc, #40]	; (1375c <rx_demux+0x2b4>)
   13732:	f240 6304 	movw	r3, #1540	; 0x604
   13736:	f00a fc0c 	bl	1df52 <printk>
   1373a:	4040      	eors	r0, r0
   1373c:	f380 8811 	msr	BASEPRI, r0
   13740:	f04f 0003 	mov.w	r0, #3
   13744:	df02      	svc	2
   13746:	9b03      	ldr	r3, [sp, #12]
   13748:	e6c1      	b.n	134ce <rx_demux+0x26>
   1374a:	bf00      	nop
   1374c:	20002e8c 	.word	0x20002e8c
   13750:	20002e94 	.word	0x20002e94
   13754:	00024268 	.word	0x00024268
   13758:	00024064 	.word	0x00024064
   1375c:	00023ff4 	.word	0x00023ff4
   13760:	200003e0 	.word	0x200003e0
   13764:	20002e88 	.word	0x20002e88
   13768:	20000278 	.word	0x20000278
   1376c:	200002bc 	.word	0x200002bc
   13770:	000242ac 	.word	0x000242ac
   13774:	2000046c 	.word	0x2000046c
			ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   13778:	465b      	mov	r3, fp
   1377a:	463a      	mov	r2, r7
   1377c:	4639      	mov	r1, r7
   1377e:	2001      	movs	r0, #1
			mfy.param = next;
   13780:	f8cb c008 	str.w	ip, [fp, #8]
			ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   13784:	f7fc fd22 	bl	101cc <mayfly_enqueue>
			LL_ASSERT(!ret);
   13788:	2800      	cmp	r0, #0
   1378a:	d09b      	beq.n	136c4 <rx_demux+0x21c>
   1378c:	4a28      	ldr	r2, [pc, #160]	; (13830 <rx_demux+0x388>)
   1378e:	4929      	ldr	r1, [pc, #164]	; (13834 <rx_demux+0x38c>)
   13790:	4829      	ldr	r0, [pc, #164]	; (13838 <rx_demux+0x390>)
   13792:	f240 7301 	movw	r3, #1793	; 0x701
   13796:	f00a fbdc 	bl	1df52 <printk>
   1379a:	4040      	eors	r0, r0
   1379c:	f380 8811 	msr	BASEPRI, r0
   137a0:	f04f 0003 	mov.w	r0, #3
   137a4:	df02      	svc	2
   137a6:	e78d      	b.n	136c4 <rx_demux+0x21c>
	*first = _first; /* Write back read-index */
   137a8:	2300      	movs	r3, #0
   137aa:	70ab      	strb	r3, [r5, #2]
	if (first == last) {
   137ac:	2a00      	cmp	r2, #0
   137ae:	d0a5      	beq.n	136fc <rx_demux+0x254>
	return (void *)(fifo + first * size);
   137b0:	f8df c09c 	ldr.w	ip, [pc, #156]	; 13850 <rx_demux+0x3a8>
   137b4:	e799      	b.n	136ea <rx_demux+0x242>
		ull_conn_done(done);
   137b6:	4628      	mov	r0, r5
   137b8:	f7ef fcb6 	bl	3128 <ull_conn_done>
		break;
   137bc:	e755      	b.n	1366a <rx_demux+0x1c2>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   137be:	491f      	ldr	r1, [pc, #124]	; (1383c <rx_demux+0x394>)
   137c0:	4602      	mov	r2, r0
   137c2:	6860      	ldr	r0, [r4, #4]
   137c4:	f7fc fc9e 	bl	10104 <memq_dequeue>
		if (rx) {
   137c8:	9905      	ldr	r1, [sp, #20]
   137ca:	2900      	cmp	r1, #0
   137cc:	f43f ae73 	beq.w	134b6 <rx_demux+0xe>
	rx_hdr->ack_last = mfifo_tx_ack.l;
   137d0:	4b1b      	ldr	r3, [pc, #108]	; (13840 <rx_demux+0x398>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   137d2:	4a1c      	ldr	r2, [pc, #112]	; (13844 <rx_demux+0x39c>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
   137d4:	78db      	ldrb	r3, [r3, #3]
   137d6:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   137d8:	4638      	mov	r0, r7
   137da:	f7fc fc83 	bl	100e4 <memq_enqueue>
	k_sem_give(sem_recv);
   137de:	6830      	ldr	r0, [r6, #0]
   137e0:	f009 ffca 	bl	1d778 <z_impl_k_sem_give>
			if (nack) {
   137e4:	e667      	b.n	134b6 <rx_demux+0xe>
	LL_ASSERT(release == done);
   137e6:	4a12      	ldr	r2, [pc, #72]	; (13830 <rx_demux+0x388>)
   137e8:	4917      	ldr	r1, [pc, #92]	; (13848 <rx_demux+0x3a0>)
   137ea:	4813      	ldr	r0, [pc, #76]	; (13838 <rx_demux+0x390>)
   137ec:	f44f 63de 	mov.w	r3, #1776	; 0x6f0
   137f0:	f00a fbaf 	bl	1df52 <printk>
   137f4:	4040      	eors	r0, r0
   137f6:	f380 8811 	msr	BASEPRI, r0
   137fa:	f04f 0003 	mov.w	r0, #3
   137fe:	df02      	svc	2
   13800:	e74a      	b.n	13698 <rx_demux+0x1f0>
	LL_ASSERT(ull_hdr->ref);
   13802:	4a0b      	ldr	r2, [pc, #44]	; (13830 <rx_demux+0x388>)
   13804:	4911      	ldr	r1, [pc, #68]	; (1384c <rx_demux+0x3a4>)
   13806:	480c      	ldr	r0, [pc, #48]	; (13838 <rx_demux+0x390>)
   13808:	f240 7313 	movw	r3, #1811	; 0x713
   1380c:	f00a fba1 	bl	1df52 <printk>
   13810:	4040      	eors	r0, r0
   13812:	f380 8811 	msr	BASEPRI, r0
   13816:	f04f 0003 	mov.w	r0, #3
   1381a:	df02      	svc	2
   1381c:	f89a 3000 	ldrb.w	r3, [sl]
   13820:	3b01      	subs	r3, #1
   13822:	b2db      	uxtb	r3, r3
   13824:	f88a 3000 	strb.w	r3, [sl]
	if (!ull_hdr->ref && ull_hdr->disabled_cb) {
   13828:	2b00      	cmp	r3, #0
   1382a:	f47f ae44 	bne.w	134b6 <rx_demux+0xe>
   1382e:	e774      	b.n	1371a <rx_demux+0x272>
   13830:	00024268 	.word	0x00024268
   13834:	000242b0 	.word	0x000242b0
   13838:	00023ff4 	.word	0x00023ff4
   1383c:	20002e8c 	.word	0x20002e8c
   13840:	200003e0 	.word	0x200003e0
   13844:	20002e88 	.word	0x20002e88
   13848:	000242c8 	.word	0x000242c8
   1384c:	000242b8 	.word	0x000242b8
   13850:	200002c0 	.word	0x200002c0

00013854 <ll_init>:
{
   13854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sem_recv = sem_rx;
   13858:	4b9f      	ldr	r3, [pc, #636]	; (13ad8 <ll_init+0x284>)
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   1385a:	4da0      	ldr	r5, [pc, #640]	; (13adc <ll_init+0x288>)
	sem_recv = sem_rx;
   1385c:	6018      	str	r0, [r3, #0]
{
   1385e:	b086      	sub	sp, #24
	cntr_init();
   13860:	f007 f8ba 	bl	1a9d8 <cntr_init>
	mayfly_init();
   13864:	f7fc fc5e 	bl	10124 <mayfly_init>
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   13868:	489d      	ldr	r0, [pc, #628]	; (13ae0 <ll_init+0x28c>)
   1386a:	9005      	str	r0, [sp, #20]
   1386c:	489d      	ldr	r0, [pc, #628]	; (13ae4 <ll_init+0x290>)
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   1386e:	4c9e      	ldr	r4, [pc, #632]	; (13ae8 <ll_init+0x294>)
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   13870:	4a9e      	ldr	r2, [pc, #632]	; (13aec <ll_init+0x298>)
   13872:	9204      	str	r2, [sp, #16]
   13874:	e9cd 0502 	strd	r0, r5, [sp, #8]
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   13878:	2103      	movs	r1, #3
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   1387a:	220b      	movs	r2, #11
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
   1387c:	2502      	movs	r5, #2
	ticker_users[MAYFLY_CALL_ID_1][0] = TICKER_USER_ULL_HIGH_OPS;
   1387e:	2304      	movs	r3, #4
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   13880:	9201      	str	r2, [sp, #4]
   13882:	9400      	str	r4, [sp, #0]
   13884:	4a9a      	ldr	r2, [pc, #616]	; (13af0 <ll_init+0x29c>)
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   13886:	7021      	strb	r1, [r4, #0]
	ticker_users[MAYFLY_CALL_ID_1][0] = TICKER_USER_ULL_HIGH_OPS;
   13888:	7223      	strb	r3, [r4, #8]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   1388a:	2107      	movs	r1, #7
   1388c:	2000      	movs	r0, #0
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
   1388e:	7425      	strb	r5, [r4, #16]
	ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
   13890:	7625      	strb	r5, [r4, #24]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   13892:	f7fd ff6d 	bl	11770 <ticker_init>
	LL_ASSERT(!err);
   13896:	2800      	cmp	r0, #0
   13898:	f040 80e7 	bne.w	13a6a <ll_init+0x216>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1389c:	2201      	movs	r2, #1
   1389e:	2100      	movs	r1, #0
   138a0:	4894      	ldr	r0, [pc, #592]	; (13af4 <ll_init+0x2a0>)
   138a2:	f00f fba6 	bl	22ff2 <z_impl_k_sem_init>
	err = lll_init();
   138a6:	f005 fefb 	bl	196a0 <lll_init>
	if (err) {
   138aa:	4604      	mov	r4, r0
   138ac:	b118      	cbz	r0, 138b6 <ll_init+0x62>
}
   138ae:	4620      	mov	r0, r4
   138b0:	b006      	add	sp, #24
   138b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
   138b6:	4b90      	ldr	r3, [pc, #576]	; (13af8 <ll_init+0x2a4>)
		link = mem_acquire(&mem_link_done.free);
   138b8:	f8df 8244 	ldr.w	r8, [pc, #580]	; 13b00 <ll_init+0x2ac>
   138bc:	4d8f      	ldr	r5, [pc, #572]	; (13afc <ll_init+0x2a8>)
		rx = mem_acquire(&mem_done.free);
   138be:	4f8e      	ldr	r7, [pc, #568]	; (13af8 <ll_init+0x2a4>)
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
   138c0:	1d18      	adds	r0, r3, #4
   138c2:	2203      	movs	r2, #3
   138c4:	2134      	movs	r1, #52	; 0x34
   138c6:	f7fc fb7b 	bl	ffc0 <mem_init>
	mem_init(mem_link_done.pool, sizeof(memq_link_t), EVENT_DONE_MAX,
   138ca:	4643      	mov	r3, r8
   138cc:	2203      	movs	r2, #3
   138ce:	1d18      	adds	r0, r3, #4
   138d0:	2108      	movs	r1, #8
   138d2:	f7fc fb75 	bl	ffc0 <mem_init>
	while (MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
   138d6:	78ec      	ldrb	r4, [r5, #3]
	if (last == count) {
   138d8:	786a      	ldrb	r2, [r5, #1]
   138da:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   138dc:	3401      	adds	r4, #1
   138de:	b2e4      	uxtb	r4, r4
		last = 0U;
   138e0:	42a2      	cmp	r2, r4
   138e2:	bf08      	it	eq
   138e4:	2400      	moveq	r4, #0
	if (last == first) {
   138e6:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_done.free);
   138e8:	4640      	mov	r0, r8
   138ea:	d013      	beq.n	13914 <ll_init+0xc0>
   138ec:	f7fc fb96 	bl	1001c <mem_acquire>
   138f0:	4606      	mov	r6, r0
		rx = mem_acquire(&mem_done.free);
   138f2:	4638      	mov	r0, r7
		if (!link) {
   138f4:	b176      	cbz	r6, 13914 <ll_init+0xc0>
		rx = mem_acquire(&mem_done.free);
   138f6:	f7fc fb91 	bl	1001c <mem_acquire>
		if (!rx) {
   138fa:	b138      	cbz	r0, 1390c <ll_init+0xb8>
		rx->link = link;
   138fc:	6006      	str	r6, [r0, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   138fe:	78ea      	ldrb	r2, [r5, #3]
   13900:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   13902:	fb02 5303 	mla	r3, r2, r3, r5
   13906:	6058      	str	r0, [r3, #4]
	*last = idx; /* Commit: Update write index */
   13908:	70ec      	strb	r4, [r5, #3]
}
   1390a:	e7e5      	b.n	138d8 <ll_init+0x84>
			mem_release(link, &mem_link_done.free);
   1390c:	497c      	ldr	r1, [pc, #496]	; (13b00 <ll_init+0x2ac>)
   1390e:	4630      	mov	r0, r6
   13910:	f7fc fb9e 	bl	10050 <mem_release>
	mem_init(mem_pdu_rx.pool, (PDU_RX_NODE_POOL_ELEMENT_SIZE),
   13914:	4b7b      	ldr	r3, [pc, #492]	; (13b04 <ll_init+0x2b0>)
   13916:	2209      	movs	r2, #9
   13918:	1d18      	adds	r0, r3, #4
   1391a:	f44f 718e 	mov.w	r1, #284	; 0x11c
   1391e:	f7fc fb4f 	bl	ffc0 <mem_init>
	mem_init(mem_link_rx.pool, sizeof(memq_link_t),
   13922:	4b79      	ldr	r3, [pc, #484]	; (13b08 <ll_init+0x2b4>)
   13924:	220e      	movs	r2, #14
   13926:	1d18      	adds	r0, r3, #4
   13928:	2108      	movs	r1, #8
   1392a:	f7fc fb49 	bl	ffc0 <mem_init>
	link = mem_acquire(&mem_link_rx.free);
   1392e:	4876      	ldr	r0, [pc, #472]	; (13b08 <ll_init+0x2b4>)
   13930:	f7fc fb74 	bl	1001c <mem_acquire>
	LL_ASSERT(link);
   13934:	4604      	mov	r4, r0
   13936:	2800      	cmp	r0, #0
   13938:	f000 80b3 	beq.w	13aa2 <ll_init+0x24e>
	MEMQ_INIT(ull_rx, link);
   1393c:	4a73      	ldr	r2, [pc, #460]	; (13b0c <ll_init+0x2b8>)
   1393e:	4620      	mov	r0, r4
   13940:	1f11      	subs	r1, r2, #4
   13942:	f7fc fbc1 	bl	100c8 <memq_init>
	link = mem_acquire(&mem_link_rx.free);
   13946:	4870      	ldr	r0, [pc, #448]	; (13b08 <ll_init+0x2b4>)
   13948:	f7fc fb68 	bl	1001c <mem_acquire>
	LL_ASSERT(link);
   1394c:	4604      	mov	r4, r0
   1394e:	2800      	cmp	r0, #0
   13950:	f000 8099 	beq.w	13a86 <ll_init+0x232>
	MEMQ_INIT(ll_rx, link);
   13954:	4a6e      	ldr	r2, [pc, #440]	; (13b10 <ll_init+0x2bc>)
	mem_link_rx.quota_pdu = RX_CNT;
   13956:	4d6f      	ldr	r5, [pc, #444]	; (13b14 <ll_init+0x2c0>)
   13958:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 13b34 <ll_init+0x2e0>
		rx = mem_acquire(&mem_pdu_rx.free);
   1395c:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 13b04 <ll_init+0x2b0>
	MEMQ_INIT(ll_rx, link);
   13960:	4620      	mov	r0, r4
   13962:	1f11      	subs	r1, r2, #4
	mem_link_rx.quota_pdu = RX_CNT;
   13964:	462e      	mov	r6, r5
	MEMQ_INIT(ll_rx, link);
   13966:	f7fc fbaf 	bl	100c8 <memq_init>
	mem_link_rx.quota_pdu = RX_CNT;
   1396a:	2308      	movs	r3, #8
   1396c:	f806 3b04 	strb.w	r3, [r6], #4
	while (mem_link_rx.quota_pdu &&
   13970:	f899 4003 	ldrb.w	r4, [r9, #3]
		link->mem = NULL;
   13974:	2700      	movs	r7, #0
	if (last == count) {
   13976:	f899 2001 	ldrb.w	r2, [r9, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   1397a:	f899 3002 	ldrb.w	r3, [r9, #2]
	last = last + 1;
   1397e:	3401      	adds	r4, #1
   13980:	b2e4      	uxtb	r4, r4
		last = 0U;
   13982:	42a2      	cmp	r2, r4
   13984:	bf08      	it	eq
   13986:	2400      	moveq	r4, #0
	if (last == first) {
   13988:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
   1398a:	4630      	mov	r0, r6
   1398c:	d03d      	beq.n	13a0a <ll_init+0x1b6>
   1398e:	f7fc fb45 	bl	1001c <mem_acquire>
   13992:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   13994:	4640      	mov	r0, r8
		if (!link) {
   13996:	f1ba 0f00 	cmp.w	sl, #0
   1399a:	d033      	beq.n	13a04 <ll_init+0x1b0>
		rx = mem_acquire(&mem_pdu_rx.free);
   1399c:	f7fc fb3e 	bl	1001c <mem_acquire>
		if (!rx) {
   139a0:	2800      	cmp	r0, #0
   139a2:	f000 808c 	beq.w	13abe <ll_init+0x26a>
		link->mem = NULL;
   139a6:	f8ca 7004 	str.w	r7, [sl, #4]
		rx->link = link;
   139aa:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   139ae:	f899 1003 	ldrb.w	r1, [r9, #3]
   139b2:	f899 2000 	ldrb.w	r2, [r9]
	mem_link_rx.quota_pdu += delta;
   139b6:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   139b8:	fb01 9202 	mla	r2, r1, r2, r9
   139bc:	3b01      	subs	r3, #1
   139be:	b2db      	uxtb	r3, r3
   139c0:	6050      	str	r0, [r2, #4]
   139c2:	702b      	strb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
   139c4:	f889 4003 	strb.w	r4, [r9, #3]
	while (mem_link_rx.quota_pdu &&
   139c8:	2b00      	cmp	r3, #0
   139ca:	d1d4      	bne.n	13976 <ll_init+0x122>
	err = lll_scan_init();
   139cc:	f006 fb50 	bl	1a070 <lll_scan_init>
	if (err) {
   139d0:	4604      	mov	r4, r0
   139d2:	2800      	cmp	r0, #0
   139d4:	f47f af6b 	bne.w	138ae <ll_init+0x5a>
	err = ull_scan_init();
   139d8:	f000 ff80 	bl	148dc <ull_scan_init>
	if (err) {
   139dc:	4604      	mov	r4, r0
   139de:	2800      	cmp	r0, #0
   139e0:	f47f af65 	bne.w	138ae <ll_init+0x5a>
	err = lll_conn_init();
   139e4:	f006 fbd6 	bl	1a194 <lll_conn_init>
	if (err) {
   139e8:	4604      	mov	r4, r0
   139ea:	2800      	cmp	r0, #0
   139ec:	f47f af5f 	bne.w	138ae <ll_init+0x5a>
	err = ull_conn_init();
   139f0:	f001 ff9e 	bl	15930 <ull_conn_init>
	if (err) {
   139f4:	4604      	mov	r4, r0
   139f6:	2800      	cmp	r0, #0
   139f8:	f47f af59 	bne.w	138ae <ll_init+0x5a>
		ull_filter_reset(true);
   139fc:	2001      	movs	r0, #1
   139fe:	f005 fa83 	bl	18f08 <ull_filter_reset>
	return  0;
   13a02:	e754      	b.n	138ae <ll_init+0x5a>
		printk("overflow3");
   13a04:	4844      	ldr	r0, [pc, #272]	; (13b18 <ll_init+0x2c4>)
   13a06:	f00a faa4 	bl	1df52 <printk>
	if (max > mem_link_rx.quota_pdu) {
   13a0a:	782b      	ldrb	r3, [r5, #0]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   13a0c:	1e5f      	subs	r7, r3, #1
   13a0e:	b2ff      	uxtb	r7, r7
   13a10:	2b00      	cmp	r3, #0
   13a12:	d0db      	beq.n	139cc <ll_init+0x178>
   13a14:	4e41      	ldr	r6, [pc, #260]	; (13b1c <ll_init+0x2c8>)
		link = mem_acquire(&mem_link_rx.free);
   13a16:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 13b08 <ll_init+0x2b4>
   13a1a:	78f4      	ldrb	r4, [r6, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
   13a1c:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 13b04 <ll_init+0x2b0>
	if (last == count) {
   13a20:	7872      	ldrb	r2, [r6, #1]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   13a22:	78b3      	ldrb	r3, [r6, #2]
	last = last + 1;
   13a24:	3401      	adds	r4, #1
   13a26:	b2e4      	uxtb	r4, r4
		last = 0U;
   13a28:	42a2      	cmp	r2, r4
   13a2a:	bf08      	it	eq
   13a2c:	2400      	moveq	r4, #0
	if (last == first) {
   13a2e:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
   13a30:	4648      	mov	r0, r9
   13a32:	d0cb      	beq.n	139cc <ll_init+0x178>
   13a34:	f7fc faf2 	bl	1001c <mem_acquire>
   13a38:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   13a3a:	4640      	mov	r0, r8
		if (!link) {
   13a3c:	f1ba 0f00 	cmp.w	sl, #0
   13a40:	d0c4      	beq.n	139cc <ll_init+0x178>
		rx = mem_acquire(&mem_pdu_rx.free);
   13a42:	f7fc faeb 	bl	1001c <mem_acquire>
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   13a46:	3f01      	subs	r7, #1
   13a48:	b2ff      	uxtb	r7, r7
		if (!rx) {
   13a4a:	2800      	cmp	r0, #0
   13a4c:	d03f      	beq.n	13ace <ll_init+0x27a>
		rx->link = link;
   13a4e:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   13a52:	78f1      	ldrb	r1, [r6, #3]
   13a54:	7832      	ldrb	r2, [r6, #0]
	mem_link_rx.quota_pdu += delta;
   13a56:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   13a58:	fb01 6202 	mla	r2, r1, r2, r6
   13a5c:	3b01      	subs	r3, #1
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   13a5e:	2fff      	cmp	r7, #255	; 0xff
   13a60:	6050      	str	r0, [r2, #4]
	mem_link_rx.quota_pdu += delta;
   13a62:	702b      	strb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
   13a64:	70f4      	strb	r4, [r6, #3]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   13a66:	d1db      	bne.n	13a20 <ll_init+0x1cc>
   13a68:	e7b0      	b.n	139cc <ll_init+0x178>
	LL_ASSERT(!err);
   13a6a:	4a2d      	ldr	r2, [pc, #180]	; (13b20 <ll_init+0x2cc>)
   13a6c:	492d      	ldr	r1, [pc, #180]	; (13b24 <ll_init+0x2d0>)
   13a6e:	482e      	ldr	r0, [pc, #184]	; (13b28 <ll_init+0x2d4>)
   13a70:	f44f 7396 	mov.w	r3, #300	; 0x12c
   13a74:	f00a fa6d 	bl	1df52 <printk>
   13a78:	4040      	eors	r0, r0
   13a7a:	f380 8811 	msr	BASEPRI, r0
   13a7e:	f04f 0003 	mov.w	r0, #3
   13a82:	df02      	svc	2
   13a84:	e70a      	b.n	1389c <ll_init+0x48>
	LL_ASSERT(link);
   13a86:	4a26      	ldr	r2, [pc, #152]	; (13b20 <ll_init+0x2cc>)
   13a88:	4928      	ldr	r1, [pc, #160]	; (13b2c <ll_init+0x2d8>)
   13a8a:	4827      	ldr	r0, [pc, #156]	; (13b28 <ll_init+0x2d4>)
   13a8c:	f240 43ee 	movw	r3, #1262	; 0x4ee
   13a90:	f00a fa5f 	bl	1df52 <printk>
   13a94:	4040      	eors	r0, r0
   13a96:	f380 8811 	msr	BASEPRI, r0
   13a9a:	f04f 0003 	mov.w	r0, #3
   13a9e:	df02      	svc	2
   13aa0:	e758      	b.n	13954 <ll_init+0x100>
	LL_ASSERT(link);
   13aa2:	4a1f      	ldr	r2, [pc, #124]	; (13b20 <ll_init+0x2cc>)
   13aa4:	4921      	ldr	r1, [pc, #132]	; (13b2c <ll_init+0x2d8>)
   13aa6:	4820      	ldr	r0, [pc, #128]	; (13b28 <ll_init+0x2d4>)
   13aa8:	f240 43e7 	movw	r3, #1255	; 0x4e7
   13aac:	f00a fa51 	bl	1df52 <printk>
   13ab0:	4040      	eors	r0, r0
   13ab2:	f380 8811 	msr	BASEPRI, r0
   13ab6:	f04f 0003 	mov.w	r0, #3
   13aba:	df02      	svc	2
   13abc:	e73e      	b.n	1393c <ll_init+0xe8>
		printk("overflow4");
   13abe:	481c      	ldr	r0, [pc, #112]	; (13b30 <ll_init+0x2dc>)
   13ac0:	f00a fa47 	bl	1df52 <printk>
			mem_release(link, &mem_link_rx.free);
   13ac4:	4910      	ldr	r1, [pc, #64]	; (13b08 <ll_init+0x2b4>)
   13ac6:	4650      	mov	r0, sl
   13ac8:	f7fc fac2 	bl	10050 <mem_release>
			break;
   13acc:	e79d      	b.n	13a0a <ll_init+0x1b6>
			mem_release(link, &mem_link_rx.free);
   13ace:	490e      	ldr	r1, [pc, #56]	; (13b08 <ll_init+0x2b4>)
   13ad0:	4650      	mov	r0, sl
   13ad2:	f7fc fabd 	bl	10050 <mem_release>
			break;
   13ad6:	e779      	b.n	139cc <ll_init+0x178>
   13ad8:	20002e94 	.word	0x20002e94
   13adc:	0001b6a9 	.word	0x0001b6a9
   13ae0:	0001b7ed 	.word	0x0001b7ed
   13ae4:	20003000 	.word	0x20003000
   13ae8:	2000323c 	.word	0x2000323c
   13aec:	0001b70d 	.word	0x0001b70d
   13af0:	20002eb0 	.word	0x20002eb0
   13af4:	20002e98 	.word	0x20002e98
   13af8:	20002350 	.word	0x20002350
   13afc:	20000278 	.word	0x20000278
   13b00:	200023f0 	.word	0x200023f0
   13b04:	20002484 	.word	0x20002484
   13b08:	20002410 	.word	0x20002410
   13b0c:	20002e90 	.word	0x20002e90
   13b10:	20002e88 	.word	0x20002e88
   13b14:	2000240c 	.word	0x2000240c
   13b18:	000242d8 	.word	0x000242d8
   13b1c:	200002a0 	.word	0x200002a0
   13b20:	00024268 	.word	0x00024268
   13b24:	000242a4 	.word	0x000242a4
   13b28:	00023ff4 	.word	0x00023ff4
   13b2c:	00024490 	.word	0x00024490
   13b30:	000242e4 	.word	0x000242e4
   13b34:	2000028c 	.word	0x2000028c

00013b38 <ll_reset>:
{
   13b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b3c:	b087      	sub	sp, #28
	err = ull_scan_reset();
   13b3e:	f000 ffa3 	bl	14a88 <ull_scan_reset>
	LL_ASSERT(!err);
   13b42:	2800      	cmp	r0, #0
   13b44:	f040 80ec 	bne.w	13d20 <ll_reset+0x1e8>
		err = ll_connect_disable(&rx);
   13b48:	4668      	mov	r0, sp
   13b4a:	f004 fb3d 	bl	181c8 <ll_connect_disable>
		if (!err) {
   13b4e:	2800      	cmp	r0, #0
   13b50:	f000 80f9 	beq.w	13d46 <ll_reset+0x20e>
	err = ull_conn_reset();
   13b54:	f001 feee 	bl	15934 <ull_conn_reset>
	LL_ASSERT(!err);
   13b58:	2800      	cmp	r0, #0
   13b5a:	f040 8106 	bne.w	13d6a <ll_reset+0x232>
	MFIFO_INIT(tx_ack);
   13b5e:	4bac      	ldr	r3, [pc, #688]	; (13e10 <ll_reset+0x2d8>)
	MFIFO_INIT(done);
   13b60:	4eac      	ldr	r6, [pc, #688]	; (13e14 <ll_reset+0x2dc>)
	MFIFO_INIT(pdu_rx_free);
   13b62:	4fad      	ldr	r7, [pc, #692]	; (13e18 <ll_reset+0x2e0>)
	MFIFO_INIT(ll_pdu_rx_free);
   13b64:	4dad      	ldr	r5, [pc, #692]	; (13e1c <ll_reset+0x2e4>)
	MFIFO_INIT(tx_ack);
   13b66:	2400      	movs	r4, #0
   13b68:	805c      	strh	r4, [r3, #2]
		ull_filter_reset(false);
   13b6a:	4620      	mov	r0, r4
   13b6c:	f005 f9cc 	bl	18f08 <ull_filter_reset>
	MFIFO_INIT(prep);
   13b70:	4bab      	ldr	r3, [pc, #684]	; (13e20 <ll_reset+0x2e8>)
	MFIFO_INIT(done);
   13b72:	8074      	strh	r4, [r6, #2]
	MFIFO_INIT(prep);
   13b74:	805c      	strh	r4, [r3, #2]
	MFIFO_INIT(pdu_rx_free);
   13b76:	807c      	strh	r4, [r7, #2]
	MFIFO_INIT(ll_pdu_rx_free);
   13b78:	806c      	strh	r4, [r5, #2]
   13b7a:	2201      	movs	r2, #1
   13b7c:	4621      	mov	r1, r4
   13b7e:	4668      	mov	r0, sp
   13b80:	f00f fa37 	bl	22ff2 <z_impl_k_sem_init>
		mfy.param = &sem;
   13b84:	4ba7      	ldr	r3, [pc, #668]	; (13e24 <ll_reset+0x2ec>)
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
   13b86:	4622      	mov	r2, r4
   13b88:	4621      	mov	r1, r4
   13b8a:	2003      	movs	r0, #3
		mfy.param = &sem;
   13b8c:	f8c3 d008 	str.w	sp, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
   13b90:	f7fc fb1c 	bl	101cc <mayfly_enqueue>
		LL_ASSERT(!retval);
   13b94:	2800      	cmp	r0, #0
   13b96:	f040 80f6 	bne.w	13d86 <ll_reset+0x24e>
	return z_impl_k_sem_take(sem, timeout);
   13b9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13b9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13ba2:	4668      	mov	r0, sp
   13ba4:	f009 fe0e 	bl	1d7c4 <z_impl_k_sem_take>
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
   13ba8:	4b9f      	ldr	r3, [pc, #636]	; (13e28 <ll_reset+0x2f0>)
		link = mem_acquire(&mem_link_done.free);
   13baa:	f8df 9280 	ldr.w	r9, [pc, #640]	; 13e2c <ll_reset+0x2f4>
		rx = mem_acquire(&mem_done.free);
   13bae:	f8df 8278 	ldr.w	r8, [pc, #632]	; 13e28 <ll_reset+0x2f0>
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
   13bb2:	1d18      	adds	r0, r3, #4
   13bb4:	2203      	movs	r2, #3
   13bb6:	2134      	movs	r1, #52	; 0x34
   13bb8:	f7fc fa02 	bl	ffc0 <mem_init>
	mem_init(mem_link_done.pool, sizeof(memq_link_t), EVENT_DONE_MAX,
   13bbc:	464b      	mov	r3, r9
   13bbe:	2203      	movs	r2, #3
   13bc0:	1d18      	adds	r0, r3, #4
   13bc2:	2108      	movs	r1, #8
   13bc4:	f7fc f9fc 	bl	ffc0 <mem_init>
static inline void done_alloc(void)
   13bc8:	78f4      	ldrb	r4, [r6, #3]
	if (last == count) {
   13bca:	7872      	ldrb	r2, [r6, #1]
	while (MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
   13bcc:	78b3      	ldrb	r3, [r6, #2]
	last = last + 1;
   13bce:	3401      	adds	r4, #1
   13bd0:	b2e4      	uxtb	r4, r4
		last = 0U;
   13bd2:	42a2      	cmp	r2, r4
   13bd4:	bf08      	it	eq
   13bd6:	2400      	moveq	r4, #0
	if (last == first) {
   13bd8:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_done.free);
   13bda:	4648      	mov	r0, r9
   13bdc:	d016      	beq.n	13c0c <ll_reset+0xd4>
   13bde:	f7fc fa1d 	bl	1001c <mem_acquire>
   13be2:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_done.free);
   13be4:	4640      	mov	r0, r8
		if (!link) {
   13be6:	f1ba 0f00 	cmp.w	sl, #0
   13bea:	d00f      	beq.n	13c0c <ll_reset+0xd4>
		rx = mem_acquire(&mem_done.free);
   13bec:	f7fc fa16 	bl	1001c <mem_acquire>
		if (!rx) {
   13bf0:	b140      	cbz	r0, 13c04 <ll_reset+0xcc>
		rx->link = link;
   13bf2:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   13bf6:	78f2      	ldrb	r2, [r6, #3]
   13bf8:	7833      	ldrb	r3, [r6, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   13bfa:	fb02 6303 	mla	r3, r2, r3, r6
   13bfe:	6058      	str	r0, [r3, #4]
	*last = idx; /* Commit: Update write index */
   13c00:	70f4      	strb	r4, [r6, #3]
}
   13c02:	e7e2      	b.n	13bca <ll_reset+0x92>
			mem_release(link, &mem_link_done.free);
   13c04:	4989      	ldr	r1, [pc, #548]	; (13e2c <ll_reset+0x2f4>)
   13c06:	4650      	mov	r0, sl
   13c08:	f7fc fa22 	bl	10050 <mem_release>
	mem_init(mem_pdu_rx.pool, (PDU_RX_NODE_POOL_ELEMENT_SIZE),
   13c0c:	4b88      	ldr	r3, [pc, #544]	; (13e30 <ll_reset+0x2f8>)
   13c0e:	2209      	movs	r2, #9
   13c10:	1d18      	adds	r0, r3, #4
   13c12:	f44f 718e 	mov.w	r1, #284	; 0x11c
   13c16:	f7fc f9d3 	bl	ffc0 <mem_init>
	mem_init(mem_link_rx.pool, sizeof(memq_link_t),
   13c1a:	4b86      	ldr	r3, [pc, #536]	; (13e34 <ll_reset+0x2fc>)
   13c1c:	220e      	movs	r2, #14
   13c1e:	1d18      	adds	r0, r3, #4
   13c20:	2108      	movs	r1, #8
   13c22:	f7fc f9cd 	bl	ffc0 <mem_init>
	link = mem_acquire(&mem_link_rx.free);
   13c26:	4883      	ldr	r0, [pc, #524]	; (13e34 <ll_reset+0x2fc>)
   13c28:	f7fc f9f8 	bl	1001c <mem_acquire>
	LL_ASSERT(link);
   13c2c:	4604      	mov	r4, r0
   13c2e:	2800      	cmp	r0, #0
   13c30:	f000 80c5 	beq.w	13dbe <ll_reset+0x286>
	MEMQ_INIT(ull_rx, link);
   13c34:	4a80      	ldr	r2, [pc, #512]	; (13e38 <ll_reset+0x300>)
   13c36:	4620      	mov	r0, r4
   13c38:	1f11      	subs	r1, r2, #4
   13c3a:	f7fc fa45 	bl	100c8 <memq_init>
	link = mem_acquire(&mem_link_rx.free);
   13c3e:	487d      	ldr	r0, [pc, #500]	; (13e34 <ll_reset+0x2fc>)
   13c40:	f7fc f9ec 	bl	1001c <mem_acquire>
	LL_ASSERT(link);
   13c44:	4604      	mov	r4, r0
   13c46:	2800      	cmp	r0, #0
   13c48:	f000 80ab 	beq.w	13da2 <ll_reset+0x26a>
	MEMQ_INIT(ll_rx, link);
   13c4c:	4a7b      	ldr	r2, [pc, #492]	; (13e3c <ll_reset+0x304>)
	mem_link_rx.quota_pdu = RX_CNT;
   13c4e:	4e7c      	ldr	r6, [pc, #496]	; (13e40 <ll_reset+0x308>)
		rx = mem_acquire(&mem_pdu_rx.free);
   13c50:	f8df a1dc 	ldr.w	sl, [pc, #476]	; 13e30 <ll_reset+0x2f8>
	MEMQ_INIT(ll_rx, link);
   13c54:	4620      	mov	r0, r4
   13c56:	1f11      	subs	r1, r2, #4
	mem_link_rx.quota_pdu = RX_CNT;
   13c58:	46b0      	mov	r8, r6
	MEMQ_INIT(ll_rx, link);
   13c5a:	f7fc fa35 	bl	100c8 <memq_init>
	mem_link_rx.quota_pdu = RX_CNT;
   13c5e:	2308      	movs	r3, #8
   13c60:	f808 3b04 	strb.w	r3, [r8], #4
	while (mem_link_rx.quota_pdu &&
   13c64:	78ec      	ldrb	r4, [r5, #3]
		link->mem = NULL;
   13c66:	f04f 0900 	mov.w	r9, #0
	if (last == count) {
   13c6a:	786a      	ldrb	r2, [r5, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   13c6c:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   13c6e:	3401      	adds	r4, #1
   13c70:	b2e4      	uxtb	r4, r4
		last = 0U;
   13c72:	42a2      	cmp	r2, r4
   13c74:	bf08      	it	eq
   13c76:	2400      	moveq	r4, #0
	if (last == first) {
   13c78:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
   13c7a:	4640      	mov	r0, r8
   13c7c:	d021      	beq.n	13cc2 <ll_reset+0x18a>
   13c7e:	f7fc f9cd 	bl	1001c <mem_acquire>
   13c82:	4683      	mov	fp, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   13c84:	4650      	mov	r0, sl
		if (!link) {
   13c86:	f1bb 0f00 	cmp.w	fp, #0
   13c8a:	d017      	beq.n	13cbc <ll_reset+0x184>
		rx = mem_acquire(&mem_pdu_rx.free);
   13c8c:	f7fc f9c6 	bl	1001c <mem_acquire>
		if (!rx) {
   13c90:	2800      	cmp	r0, #0
   13c92:	f000 80a7 	beq.w	13de4 <ll_reset+0x2ac>
		link->mem = NULL;
   13c96:	f8cb 9004 	str.w	r9, [fp, #4]
		rx->link = link;
   13c9a:	f8c0 b000 	str.w	fp, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   13c9e:	78e9      	ldrb	r1, [r5, #3]
   13ca0:	782a      	ldrb	r2, [r5, #0]
	mem_link_rx.quota_pdu += delta;
   13ca2:	7833      	ldrb	r3, [r6, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   13ca4:	fb01 5202 	mla	r2, r1, r2, r5
   13ca8:	3b01      	subs	r3, #1
   13caa:	b2db      	uxtb	r3, r3
   13cac:	6050      	str	r0, [r2, #4]
   13cae:	7033      	strb	r3, [r6, #0]
	*last = idx; /* Commit: Update write index */
   13cb0:	70ec      	strb	r4, [r5, #3]
	while (mem_link_rx.quota_pdu &&
   13cb2:	2b00      	cmp	r3, #0
   13cb4:	d1d9      	bne.n	13c6a <ll_reset+0x132>
}
   13cb6:	b007      	add	sp, #28
   13cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		printk("overflow3");
   13cbc:	4861      	ldr	r0, [pc, #388]	; (13e44 <ll_reset+0x30c>)
   13cbe:	f00a f948 	bl	1df52 <printk>
	if (max > mem_link_rx.quota_pdu) {
   13cc2:	7833      	ldrb	r3, [r6, #0]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   13cc4:	1e5d      	subs	r5, r3, #1
   13cc6:	b2ed      	uxtb	r5, r5
   13cc8:	2b00      	cmp	r3, #0
   13cca:	d0f4      	beq.n	13cb6 <ll_reset+0x17e>
   13ccc:	78fc      	ldrb	r4, [r7, #3]
		link = mem_acquire(&mem_link_rx.free);
   13cce:	f8df 9164 	ldr.w	r9, [pc, #356]	; 13e34 <ll_reset+0x2fc>
		rx = mem_acquire(&mem_pdu_rx.free);
   13cd2:	f8df 815c 	ldr.w	r8, [pc, #348]	; 13e30 <ll_reset+0x2f8>
	if (last == count) {
   13cd6:	787a      	ldrb	r2, [r7, #1]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   13cd8:	78bb      	ldrb	r3, [r7, #2]
	last = last + 1;
   13cda:	3401      	adds	r4, #1
   13cdc:	b2e4      	uxtb	r4, r4
		last = 0U;
   13cde:	42a2      	cmp	r2, r4
   13ce0:	bf08      	it	eq
   13ce2:	2400      	moveq	r4, #0
	if (last == first) {
   13ce4:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
   13ce6:	4648      	mov	r0, r9
   13ce8:	d0e5      	beq.n	13cb6 <ll_reset+0x17e>
   13cea:	f7fc f997 	bl	1001c <mem_acquire>
   13cee:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   13cf0:	4640      	mov	r0, r8
		if (!link) {
   13cf2:	f1ba 0f00 	cmp.w	sl, #0
   13cf6:	d0de      	beq.n	13cb6 <ll_reset+0x17e>
		rx = mem_acquire(&mem_pdu_rx.free);
   13cf8:	f7fc f990 	bl	1001c <mem_acquire>
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   13cfc:	3d01      	subs	r5, #1
   13cfe:	b2ed      	uxtb	r5, r5
		if (!rx) {
   13d00:	2800      	cmp	r0, #0
   13d02:	d06a      	beq.n	13dda <ll_reset+0x2a2>
		rx->link = link;
   13d04:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   13d08:	78f9      	ldrb	r1, [r7, #3]
   13d0a:	783a      	ldrb	r2, [r7, #0]
	mem_link_rx.quota_pdu += delta;
   13d0c:	7833      	ldrb	r3, [r6, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   13d0e:	fb01 7202 	mla	r2, r1, r2, r7
   13d12:	3b01      	subs	r3, #1
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   13d14:	2dff      	cmp	r5, #255	; 0xff
   13d16:	6050      	str	r0, [r2, #4]
	mem_link_rx.quota_pdu += delta;
   13d18:	7033      	strb	r3, [r6, #0]
	*last = idx; /* Commit: Update write index */
   13d1a:	70fc      	strb	r4, [r7, #3]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   13d1c:	d1db      	bne.n	13cd6 <ll_reset+0x19e>
   13d1e:	e7ca      	b.n	13cb6 <ll_reset+0x17e>
	LL_ASSERT(!err);
   13d20:	4a49      	ldr	r2, [pc, #292]	; (13e48 <ll_reset+0x310>)
   13d22:	494a      	ldr	r1, [pc, #296]	; (13e4c <ll_reset+0x314>)
   13d24:	484a      	ldr	r0, [pc, #296]	; (13e50 <ll_reset+0x318>)
   13d26:	f44f 73c0 	mov.w	r3, #384	; 0x180
   13d2a:	f00a f912 	bl	1df52 <printk>
   13d2e:	4040      	eors	r0, r0
   13d30:	f380 8811 	msr	BASEPRI, r0
   13d34:	f04f 0003 	mov.w	r0, #3
   13d38:	df02      	svc	2
		err = ll_connect_disable(&rx);
   13d3a:	4668      	mov	r0, sp
   13d3c:	f004 fa44 	bl	181c8 <ll_connect_disable>
		if (!err) {
   13d40:	2800      	cmp	r0, #0
   13d42:	f47f af07 	bne.w	13b54 <ll_reset+0x1c>
			scan = ull_scan_is_enabled_get(0);
   13d46:	f000 feb3 	bl	14ab0 <ull_scan_is_enabled_get>
			LL_ASSERT(scan);
   13d4a:	4604      	mov	r4, r0
   13d4c:	2800      	cmp	r0, #0
   13d4e:	d051      	beq.n	13df4 <ll_reset+0x2bc>
			scan->is_enabled = 0U;
   13d50:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
			scan->lll.conn = NULL;
   13d54:	2200      	movs	r2, #0
			scan->is_enabled = 0U;
   13d56:	f36f 0300 	bfc	r3, #0, #1
   13d5a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
			scan->lll.conn = NULL;
   13d5e:	6262      	str	r2, [r4, #36]	; 0x24
	err = ull_conn_reset();
   13d60:	f001 fde8 	bl	15934 <ull_conn_reset>
	LL_ASSERT(!err);
   13d64:	2800      	cmp	r0, #0
   13d66:	f43f aefa 	beq.w	13b5e <ll_reset+0x26>
   13d6a:	4a37      	ldr	r2, [pc, #220]	; (13e48 <ll_reset+0x310>)
   13d6c:	4937      	ldr	r1, [pc, #220]	; (13e4c <ll_reset+0x314>)
   13d6e:	4838      	ldr	r0, [pc, #224]	; (13e50 <ll_reset+0x318>)
   13d70:	f44f 73cd 	mov.w	r3, #410	; 0x19a
   13d74:	f00a f8ed 	bl	1df52 <printk>
   13d78:	4040      	eors	r0, r0
   13d7a:	f380 8811 	msr	BASEPRI, r0
   13d7e:	f04f 0003 	mov.w	r0, #3
   13d82:	df02      	svc	2
   13d84:	e6eb      	b.n	13b5e <ll_reset+0x26>
		LL_ASSERT(!retval);
   13d86:	4a30      	ldr	r2, [pc, #192]	; (13e48 <ll_reset+0x310>)
   13d88:	4932      	ldr	r1, [pc, #200]	; (13e54 <ll_reset+0x31c>)
   13d8a:	4831      	ldr	r0, [pc, #196]	; (13e50 <ll_reset+0x318>)
   13d8c:	f44f 73e6 	mov.w	r3, #460	; 0x1cc
   13d90:	f00a f8df 	bl	1df52 <printk>
   13d94:	4040      	eors	r0, r0
   13d96:	f380 8811 	msr	BASEPRI, r0
   13d9a:	f04f 0003 	mov.w	r0, #3
   13d9e:	df02      	svc	2
   13da0:	e6fb      	b.n	13b9a <ll_reset+0x62>
	LL_ASSERT(link);
   13da2:	4a29      	ldr	r2, [pc, #164]	; (13e48 <ll_reset+0x310>)
   13da4:	492c      	ldr	r1, [pc, #176]	; (13e58 <ll_reset+0x320>)
   13da6:	482a      	ldr	r0, [pc, #168]	; (13e50 <ll_reset+0x318>)
   13da8:	f240 43ee 	movw	r3, #1262	; 0x4ee
   13dac:	f00a f8d1 	bl	1df52 <printk>
   13db0:	4040      	eors	r0, r0
   13db2:	f380 8811 	msr	BASEPRI, r0
   13db6:	f04f 0003 	mov.w	r0, #3
   13dba:	df02      	svc	2
   13dbc:	e746      	b.n	13c4c <ll_reset+0x114>
	LL_ASSERT(link);
   13dbe:	4a22      	ldr	r2, [pc, #136]	; (13e48 <ll_reset+0x310>)
   13dc0:	4925      	ldr	r1, [pc, #148]	; (13e58 <ll_reset+0x320>)
   13dc2:	4823      	ldr	r0, [pc, #140]	; (13e50 <ll_reset+0x318>)
   13dc4:	f240 43e7 	movw	r3, #1255	; 0x4e7
   13dc8:	f00a f8c3 	bl	1df52 <printk>
   13dcc:	4040      	eors	r0, r0
   13dce:	f380 8811 	msr	BASEPRI, r0
   13dd2:	f04f 0003 	mov.w	r0, #3
   13dd6:	df02      	svc	2
   13dd8:	e72c      	b.n	13c34 <ll_reset+0xfc>
			mem_release(link, &mem_link_rx.free);
   13dda:	4916      	ldr	r1, [pc, #88]	; (13e34 <ll_reset+0x2fc>)
   13ddc:	4650      	mov	r0, sl
   13dde:	f7fc f937 	bl	10050 <mem_release>
			break;
   13de2:	e768      	b.n	13cb6 <ll_reset+0x17e>
		printk("overflow4");
   13de4:	481d      	ldr	r0, [pc, #116]	; (13e5c <ll_reset+0x324>)
   13de6:	f00a f8b4 	bl	1df52 <printk>
			mem_release(link, &mem_link_rx.free);
   13dea:	4912      	ldr	r1, [pc, #72]	; (13e34 <ll_reset+0x2fc>)
   13dec:	4658      	mov	r0, fp
   13dee:	f7fc f92f 	bl	10050 <mem_release>
			break;
   13df2:	e766      	b.n	13cc2 <ll_reset+0x18a>
			LL_ASSERT(scan);
   13df4:	4a14      	ldr	r2, [pc, #80]	; (13e48 <ll_reset+0x310>)
   13df6:	491a      	ldr	r1, [pc, #104]	; (13e60 <ll_reset+0x328>)
   13df8:	4815      	ldr	r0, [pc, #84]	; (13e50 <ll_reset+0x318>)
   13dfa:	f44f 73c7 	mov.w	r3, #398	; 0x18e
   13dfe:	f00a f8a8 	bl	1df52 <printk>
   13e02:	4040      	eors	r0, r0
   13e04:	f380 8811 	msr	BASEPRI, r0
   13e08:	f04f 0003 	mov.w	r0, #3
   13e0c:	df02      	svc	2
   13e0e:	e79f      	b.n	13d50 <ll_reset+0x218>
   13e10:	200003e0 	.word	0x200003e0
   13e14:	20000278 	.word	0x20000278
   13e18:	200002a0 	.word	0x200002a0
   13e1c:	2000028c 	.word	0x2000028c
   13e20:	200002bc 	.word	0x200002bc
   13e24:	2000043c 	.word	0x2000043c
   13e28:	20002350 	.word	0x20002350
   13e2c:	200023f0 	.word	0x200023f0
   13e30:	20002484 	.word	0x20002484
   13e34:	20002410 	.word	0x20002410
   13e38:	20002e90 	.word	0x20002e90
   13e3c:	20002e88 	.word	0x20002e88
   13e40:	2000240c 	.word	0x2000240c
   13e44:	000242d8 	.word	0x000242d8
   13e48:	00024268 	.word	0x00024268
   13e4c:	000242a4 	.word	0x000242a4
   13e50:	00023ff4 	.word	0x00023ff4
   13e54:	000242f0 	.word	0x000242f0
   13e58:	00024490 	.word	0x00024490
   13e5c:	000242e4 	.word	0x000242e4
   13e60:	0002441c 	.word	0x0002441c

00013e64 <ll_rx_get>:
{
   13e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e68:	b085      	sub	sp, #20
   13e6a:	e9cd 0100 	strd	r0, r1, [sp]
   13e6e:	4c63      	ldr	r4, [pc, #396]	; (13ffc <ll_rx_get+0x198>)
				mem_release(link, &mem_link_rx.free);
   13e70:	4d63      	ldr	r5, [pc, #396]	; (14000 <ll_rx_get+0x19c>)
   13e72:	f8df 9194 	ldr.w	r9, [pc, #404]	; 14008 <ll_rx_get+0x1a4>
	*node_rx = NULL;
   13e76:	9a00      	ldr	r2, [sp, #0]
   13e78:	2300      	movs	r3, #0
   13e7a:	6013      	str	r3, [r2, #0]
	link = memq_peek(memq_ll_rx.head, memq_ll_rx.tail, (void **)&rx);
   13e7c:	e9d9 0100 	ldrd	r0, r1, [r9]
   13e80:	aa03      	add	r2, sp, #12
   13e82:	f7fc f937 	bl	100f4 <memq_peek>
	if (link) {
   13e86:	4607      	mov	r7, r0
   13e88:	2800      	cmp	r0, #0
   13e8a:	f000 80ac 	beq.w	13fe6 <ll_rx_get+0x182>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
   13e8e:	9b03      	ldr	r3, [sp, #12]
   13e90:	495c      	ldr	r1, [pc, #368]	; (14004 <ll_rx_get+0x1a0>)
   13e92:	781a      	ldrb	r2, [r3, #0]
   13e94:	9801      	ldr	r0, [sp, #4]
   13e96:	f7ff faa1 	bl	133dc <tx_cmplt_get>
		if (!cmplt) {
   13e9a:	4603      	mov	r3, r0
   13e9c:	2800      	cmp	r0, #0
   13e9e:	f040 8091 	bne.w	13fc4 <ll_rx_get+0x160>
			f = mfifo_tx_ack.f;
   13ea2:	78a2      	ldrb	r2, [r4, #2]
   13ea4:	f88d 2009 	strb.w	r2, [sp, #9]
				cmplt_curr = tx_cmplt_get(&h, &f,
   13ea8:	78e2      	ldrb	r2, [r4, #3]
   13eaa:	f10d 0109 	add.w	r1, sp, #9
   13eae:	f10d 000a 	add.w	r0, sp, #10
   13eb2:	461e      	mov	r6, r3
   13eb4:	f7ff fa92 	bl	133dc <tx_cmplt_get>
   13eb8:	ea46 0200 	orr.w	r2, r6, r0
			} while ((cmplt_prev != 0U) ||
   13ebc:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
				cmplt_curr = tx_cmplt_get(&h, &f,
   13ec0:	4603      	mov	r3, r0
			} while ((cmplt_prev != 0U) ||
   13ec2:	d1f1      	bne.n	13ea8 <ll_rx_get+0x44>
			if (rx->type == NODE_RX_TYPE_DC_PDU_RELEASE) {
   13ec4:	9b03      	ldr	r3, [sp, #12]
   13ec6:	7919      	ldrb	r1, [r3, #4]
   13ec8:	2903      	cmp	r1, #3
   13eca:	d178      	bne.n	13fbe <ll_rx_get+0x15a>
				(void)memq_dequeue(memq_ll_rx.tail,
   13ecc:	494e      	ldr	r1, [pc, #312]	; (14008 <ll_rx_get+0x1a4>)
   13ece:	f8d9 0004 	ldr.w	r0, [r9, #4]
   13ed2:	f7fc f917 	bl	10104 <memq_dequeue>
				mem_release(link, &mem_link_rx.free);
   13ed6:	494d      	ldr	r1, [pc, #308]	; (1400c <ll_rx_get+0x1a8>)
   13ed8:	4638      	mov	r0, r7
   13eda:	f7fc f8b9 	bl	10050 <mem_release>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   13ede:	782b      	ldrb	r3, [r5, #0]
   13ee0:	2b07      	cmp	r3, #7
   13ee2:	d85d      	bhi.n	13fa0 <ll_rx_get+0x13c>
	mem_link_rx.quota_pdu += delta;
   13ee4:	3301      	adds	r3, #1
				mem_release(rx, &mem_pdu_rx.free);
   13ee6:	494a      	ldr	r1, [pc, #296]	; (14010 <ll_rx_get+0x1ac>)
   13ee8:	9803      	ldr	r0, [sp, #12]
	mem_link_rx.quota_pdu += delta;
   13eea:	702b      	strb	r3, [r5, #0]
				mem_release(rx, &mem_pdu_rx.free);
   13eec:	f7fc f8b0 	bl	10050 <mem_release>
	while (mem_link_rx.quota_pdu &&
   13ef0:	782b      	ldrb	r3, [r5, #0]
   13ef2:	2b00      	cmp	r3, #0
   13ef4:	d0bf      	beq.n	13e76 <ll_rx_get+0x12>
   13ef6:	4f47      	ldr	r7, [pc, #284]	; (14014 <ll_rx_get+0x1b0>)
		link = mem_acquire(&mem_link_rx.free);
   13ef8:	f8df 8110 	ldr.w	r8, [pc, #272]	; 1400c <ll_rx_get+0x1a8>
   13efc:	78fe      	ldrb	r6, [r7, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
   13efe:	f8df a110 	ldr.w	sl, [pc, #272]	; 14010 <ll_rx_get+0x1ac>
	if (last == count) {
   13f02:	787a      	ldrb	r2, [r7, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   13f04:	78bb      	ldrb	r3, [r7, #2]
	last = last + 1;
   13f06:	3601      	adds	r6, #1
   13f08:	b2f6      	uxtb	r6, r6
		last = 0U;
   13f0a:	42b2      	cmp	r2, r6
   13f0c:	bf08      	it	eq
   13f0e:	2600      	moveq	r6, #0
	if (last == first) {
   13f10:	429e      	cmp	r6, r3
		link = mem_acquire(&mem_link_rx.free);
   13f12:	4640      	mov	r0, r8
   13f14:	d01f      	beq.n	13f56 <ll_rx_get+0xf2>
   13f16:	f7fc f881 	bl	1001c <mem_acquire>
   13f1a:	4683      	mov	fp, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   13f1c:	4650      	mov	r0, sl
		if (!link) {
   13f1e:	f1bb 0f00 	cmp.w	fp, #0
   13f22:	d015      	beq.n	13f50 <ll_rx_get+0xec>
		rx = mem_acquire(&mem_pdu_rx.free);
   13f24:	f7fc f87a 	bl	1001c <mem_acquire>
		if (!rx) {
   13f28:	2800      	cmp	r0, #0
   13f2a:	d054      	beq.n	13fd6 <ll_rx_get+0x172>
		link->mem = NULL;
   13f2c:	2300      	movs	r3, #0
   13f2e:	f8cb 3004 	str.w	r3, [fp, #4]
		rx->link = link;
   13f32:	f8c0 b000 	str.w	fp, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   13f36:	78f9      	ldrb	r1, [r7, #3]
   13f38:	783a      	ldrb	r2, [r7, #0]
	mem_link_rx.quota_pdu += delta;
   13f3a:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   13f3c:	fb01 7202 	mla	r2, r1, r2, r7
   13f40:	3b01      	subs	r3, #1
   13f42:	b2db      	uxtb	r3, r3
   13f44:	6050      	str	r0, [r2, #4]
   13f46:	702b      	strb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
   13f48:	70fe      	strb	r6, [r7, #3]
	while (mem_link_rx.quota_pdu &&
   13f4a:	2b00      	cmp	r3, #0
   13f4c:	d1d9      	bne.n	13f02 <ll_rx_get+0x9e>
   13f4e:	e792      	b.n	13e76 <ll_rx_get+0x12>
		printk("overflow3");
   13f50:	4831      	ldr	r0, [pc, #196]	; (14018 <ll_rx_get+0x1b4>)
   13f52:	f009 fffe 	bl	1df52 <printk>
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   13f56:	782b      	ldrb	r3, [r5, #0]
   13f58:	2b00      	cmp	r3, #0
   13f5a:	d08c      	beq.n	13e76 <ll_rx_get+0x12>
   13f5c:	4f2f      	ldr	r7, [pc, #188]	; (1401c <ll_rx_get+0x1b8>)
	last = last + 1;
   13f5e:	78fe      	ldrb	r6, [r7, #3]
	if (last == count) {
   13f60:	787a      	ldrb	r2, [r7, #1]
   13f62:	78bb      	ldrb	r3, [r7, #2]
	last = last + 1;
   13f64:	3601      	adds	r6, #1
   13f66:	b2f6      	uxtb	r6, r6
		last = 0U;
   13f68:	42b2      	cmp	r2, r6
   13f6a:	bf08      	it	eq
   13f6c:	2600      	moveq	r6, #0
	if (last == first) {
   13f6e:	429e      	cmp	r6, r3
   13f70:	d081      	beq.n	13e76 <ll_rx_get+0x12>
		link = mem_acquire(&mem_link_rx.free);
   13f72:	4826      	ldr	r0, [pc, #152]	; (1400c <ll_rx_get+0x1a8>)
   13f74:	f7fc f852 	bl	1001c <mem_acquire>
		if (!link) {
   13f78:	4680      	mov	r8, r0
   13f7a:	2800      	cmp	r0, #0
   13f7c:	f43f af7b 	beq.w	13e76 <ll_rx_get+0x12>
		rx = mem_acquire(&mem_pdu_rx.free);
   13f80:	4823      	ldr	r0, [pc, #140]	; (14010 <ll_rx_get+0x1ac>)
   13f82:	f7fc f84b 	bl	1001c <mem_acquire>
		if (!rx) {
   13f86:	b308      	cbz	r0, 13fcc <ll_rx_get+0x168>
		rx->link = link;
   13f88:	f8c0 8000 	str.w	r8, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   13f8c:	78f9      	ldrb	r1, [r7, #3]
   13f8e:	783a      	ldrb	r2, [r7, #0]
	mem_link_rx.quota_pdu += delta;
   13f90:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   13f92:	fb01 7202 	mla	r2, r1, r2, r7
   13f96:	3b01      	subs	r3, #1
   13f98:	6050      	str	r0, [r2, #4]
   13f9a:	702b      	strb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
   13f9c:	70fe      	strb	r6, [r7, #3]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   13f9e:	e76a      	b.n	13e76 <ll_rx_get+0x12>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   13fa0:	4a1f      	ldr	r2, [pc, #124]	; (14020 <ll_rx_get+0x1bc>)
   13fa2:	4920      	ldr	r1, [pc, #128]	; (14024 <ll_rx_get+0x1c0>)
   13fa4:	4820      	ldr	r0, [pc, #128]	; (14028 <ll_rx_get+0x1c4>)
   13fa6:	f240 3393 	movw	r3, #915	; 0x393
   13faa:	f009 ffd2 	bl	1df52 <printk>
   13fae:	4040      	eors	r0, r0
   13fb0:	f380 8811 	msr	BASEPRI, r0
   13fb4:	f04f 0003 	mov.w	r0, #3
   13fb8:	df02      	svc	2
   13fba:	782b      	ldrb	r3, [r5, #0]
   13fbc:	e792      	b.n	13ee4 <ll_rx_get+0x80>
			*node_rx = rx;
   13fbe:	9900      	ldr	r1, [sp, #0]
   13fc0:	600b      	str	r3, [r1, #0]
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
   13fc2:	4613      	mov	r3, r2
}
   13fc4:	4618      	mov	r0, r3
   13fc6:	b005      	add	sp, #20
   13fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mem_release(link, &mem_link_rx.free);
   13fcc:	490f      	ldr	r1, [pc, #60]	; (1400c <ll_rx_get+0x1a8>)
   13fce:	4640      	mov	r0, r8
   13fd0:	f7fc f83e 	bl	10050 <mem_release>
			break;
   13fd4:	e74f      	b.n	13e76 <ll_rx_get+0x12>
		printk("overflow4");
   13fd6:	4815      	ldr	r0, [pc, #84]	; (1402c <ll_rx_get+0x1c8>)
   13fd8:	f009 ffbb 	bl	1df52 <printk>
			mem_release(link, &mem_link_rx.free);
   13fdc:	490b      	ldr	r1, [pc, #44]	; (1400c <ll_rx_get+0x1a8>)
   13fde:	4658      	mov	r0, fp
   13fe0:	f7fc f836 	bl	10050 <mem_release>
			break;
   13fe4:	e7b7      	b.n	13f56 <ll_rx_get+0xf2>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, mfifo_tx_ack.l);
   13fe6:	78e2      	ldrb	r2, [r4, #3]
   13fe8:	4906      	ldr	r1, [pc, #24]	; (14004 <ll_rx_get+0x1a0>)
   13fea:	9801      	ldr	r0, [sp, #4]
   13fec:	f7ff f9f6 	bl	133dc <tx_cmplt_get>
   13ff0:	4603      	mov	r3, r0
}
   13ff2:	4618      	mov	r0, r3
   13ff4:	b005      	add	sp, #20
   13ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ffa:	bf00      	nop
   13ffc:	200003e0 	.word	0x200003e0
   14000:	2000240c 	.word	0x2000240c
   14004:	200003e2 	.word	0x200003e2
   14008:	20002e84 	.word	0x20002e84
   1400c:	20002410 	.word	0x20002410
   14010:	20002484 	.word	0x20002484
   14014:	2000028c 	.word	0x2000028c
   14018:	000242d8 	.word	0x000242d8
   1401c:	200002a0 	.word	0x200002a0
   14020:	00024268 	.word	0x00024268
   14024:	000242f8 	.word	0x000242f8
   14028:	00023ff4 	.word	0x00023ff4
   1402c:	000242e4 	.word	0x000242e4

00014030 <ll_rx_dequeue>:
{
   14030:	b510      	push	{r4, lr}
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   14032:	492f      	ldr	r1, [pc, #188]	; (140f0 <ll_rx_dequeue+0xc0>)
{
   14034:	b082      	sub	sp, #8
	struct node_rx_hdr *rx = NULL;
   14036:	2300      	movs	r3, #0
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   14038:	6848      	ldr	r0, [r1, #4]
	struct node_rx_hdr *rx = NULL;
   1403a:	9301      	str	r3, [sp, #4]
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   1403c:	aa01      	add	r2, sp, #4
   1403e:	f7fc f861 	bl	10104 <memq_dequeue>
	LL_ASSERT(link);
   14042:	4604      	mov	r4, r0
   14044:	2800      	cmp	r0, #0
   14046:	d035      	beq.n	140b4 <ll_rx_dequeue+0x84>
	mem_release(link, &mem_link_rx.free);
   14048:	492a      	ldr	r1, [pc, #168]	; (140f4 <ll_rx_dequeue+0xc4>)
   1404a:	4620      	mov	r0, r4
   1404c:	f7fc f800 	bl	10050 <mem_release>
	switch (rx->type) {
   14050:	9a01      	ldr	r2, [sp, #4]
   14052:	7913      	ldrb	r3, [r2, #4]
   14054:	2b0f      	cmp	r3, #15
   14056:	d80d      	bhi.n	14074 <ll_rx_dequeue+0x44>
   14058:	e8df f003 	tbb	[pc, r3]
   1405c:	0c080c08 	.word	0x0c080c08
   14060:	0c0c0c08 	.word	0x0c0c0c08
   14064:	08081b0c 	.word	0x08081b0c
   14068:	08080808 	.word	0x08080808
		LL_ASSERT(rx->type != NODE_RX_TYPE_NONE);
   1406c:	2b00      	cmp	r3, #0
   1406e:	d02f      	beq.n	140d0 <ll_rx_dequeue+0xa0>
}
   14070:	b002      	add	sp, #8
   14072:	bd10      	pop	{r4, pc}
		LL_ASSERT(0);
   14074:	4a20      	ldr	r2, [pc, #128]	; (140f8 <ll_rx_dequeue+0xc8>)
   14076:	4921      	ldr	r1, [pc, #132]	; (140fc <ll_rx_dequeue+0xcc>)
   14078:	4821      	ldr	r0, [pc, #132]	; (14100 <ll_rx_dequeue+0xd0>)
   1407a:	f240 23d2 	movw	r3, #722	; 0x2d2
   1407e:	f009 ff68 	bl	1df52 <printk>
   14082:	4040      	eors	r0, r0
   14084:	f380 8811 	msr	BASEPRI, r0
   14088:	f04f 0003 	mov.w	r0, #3
   1408c:	df02      	svc	2
}
   1408e:	b002      	add	sp, #8
   14090:	bd10      	pop	{r4, pc}
			struct ll_scan_set *scan = (void *)HDR_LLL2EVT(lll);
   14092:	6893      	ldr	r3, [r2, #8]
   14094:	681b      	ldr	r3, [r3, #0]
			scan->is_enabled = 0U;
   14096:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
   1409a:	f36f 0200 	bfc	r2, #0, #1
   1409e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
			      ull_scan_is_enabled(0) << 1) |
   140a2:	2000      	movs	r0, #0
   140a4:	f000 fd1e 	bl	14ae4 <ull_scan_is_enabled>
			if (!bm) {
   140a8:	0040      	lsls	r0, r0, #1
   140aa:	d1e1      	bne.n	14070 <ll_rx_dequeue+0x40>
				ull_filter_adv_scan_state_cb(0);
   140ac:	f004 fb96 	bl	187dc <ull_filter_adv_scan_state_cb>
}
   140b0:	b002      	add	sp, #8
   140b2:	bd10      	pop	{r4, pc}
	LL_ASSERT(link);
   140b4:	4a10      	ldr	r2, [pc, #64]	; (140f8 <ll_rx_dequeue+0xc8>)
   140b6:	4913      	ldr	r1, [pc, #76]	; (14104 <ll_rx_dequeue+0xd4>)
   140b8:	4811      	ldr	r0, [pc, #68]	; (14100 <ll_rx_dequeue+0xd0>)
   140ba:	f240 232a 	movw	r3, #554	; 0x22a
   140be:	f009 ff48 	bl	1df52 <printk>
   140c2:	4040      	eors	r0, r0
   140c4:	f380 8811 	msr	BASEPRI, r0
   140c8:	f04f 0003 	mov.w	r0, #3
   140cc:	df02      	svc	2
   140ce:	e7bb      	b.n	14048 <ll_rx_dequeue+0x18>
		LL_ASSERT(rx->type != NODE_RX_TYPE_NONE);
   140d0:	4a09      	ldr	r2, [pc, #36]	; (140f8 <ll_rx_dequeue+0xc8>)
   140d2:	490d      	ldr	r1, [pc, #52]	; (14108 <ll_rx_dequeue+0xd8>)
   140d4:	480a      	ldr	r0, [pc, #40]	; (14100 <ll_rx_dequeue+0xd0>)
   140d6:	f240 23ce 	movw	r3, #718	; 0x2ce
   140da:	f009 ff3a 	bl	1df52 <printk>
   140de:	4040      	eors	r0, r0
   140e0:	f380 8811 	msr	BASEPRI, r0
   140e4:	f04f 0003 	mov.w	r0, #3
   140e8:	df02      	svc	2
}
   140ea:	b002      	add	sp, #8
   140ec:	bd10      	pop	{r4, pc}
   140ee:	bf00      	nop
   140f0:	20002e84 	.word	0x20002e84
   140f4:	20002410 	.word	0x20002410
   140f8:	00024268 	.word	0x00024268
   140fc:	00024064 	.word	0x00024064
   14100:	00023ff4 	.word	0x00023ff4
   14104:	00024490 	.word	0x00024490
   14108:	0002432c 	.word	0x0002432c

0001410c <ll_rx_mem_release>:
{
   1410c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	rx = *node_rx;
   14110:	6804      	ldr	r4, [r0, #0]
	while (rx) {
   14112:	4dad      	ldr	r5, [pc, #692]	; (143c8 <ll_rx_mem_release+0x2bc>)
{
   14114:	b083      	sub	sp, #12
   14116:	4682      	mov	sl, r0
	while (rx) {
   14118:	2c00      	cmp	r4, #0
   1411a:	d044      	beq.n	141a6 <ll_rx_mem_release+0x9a>
			LL_ASSERT(0);
   1411c:	4fab      	ldr	r7, [pc, #684]	; (143cc <ll_rx_mem_release+0x2c0>)
   1411e:	f8df b2e0 	ldr.w	fp, [pc, #736]	; 14400 <ll_rx_mem_release+0x2f4>
   14122:	4eab      	ldr	r6, [pc, #684]	; (143d0 <ll_rx_mem_release+0x2c4>)
   14124:	9001      	str	r0, [sp, #4]
		rx = rx->next;
   14126:	46a0      	mov	r8, r4
   14128:	6824      	ldr	r4, [r4, #0]
		switch (rx_free->type) {
   1412a:	f898 3004 	ldrb.w	r3, [r8, #4]
   1412e:	2b0f      	cmp	r3, #15
   14130:	d86d      	bhi.n	1420e <ll_rx_mem_release+0x102>
   14132:	e8df f003 	tbb	[pc, r3]
   14136:	6c1d      	.short	0x6c1d
   14138:	6c1d6c1d 	.word	0x6c1d6c1d
   1413c:	086c6c6c 	.word	0x086c6c6c
   14140:	1d1d1d7d 	.word	0x1d1d1d7d
   14144:	1d1d      	.short	0x1d1d
			} else if (cc->status == BT_HCI_ERR_UNKNOWN_CONN_ID) {
   14146:	f898 301c 	ldrb.w	r3, [r8, #28]
   1414a:	2b02      	cmp	r3, #2
   1414c:	f000 80da 	beq.w	14304 <ll_rx_mem_release+0x1f8>
				LL_ASSERT(!cc->status);
   14150:	b1e3      	cbz	r3, 1418c <ll_rx_mem_release+0x80>
   14152:	49a0      	ldr	r1, [pc, #640]	; (143d4 <ll_rx_mem_release+0x2c8>)
   14154:	f240 332a 	movw	r3, #810	; 0x32a
   14158:	463a      	mov	r2, r7
   1415a:	4630      	mov	r0, r6
   1415c:	f009 fef9 	bl	1df52 <printk>
   14160:	4040      	eors	r0, r0
   14162:	f380 8811 	msr	BASEPRI, r0
   14166:	f04f 0003 	mov.w	r0, #3
   1416a:	df02      	svc	2
   1416c:	f898 3004 	ldrb.w	r3, [r8, #4]
			LL_ASSERT(rx_free->type != NODE_RX_TYPE_NONE);
   14170:	b963      	cbnz	r3, 1418c <ll_rx_mem_release+0x80>
   14172:	4999      	ldr	r1, [pc, #612]	; (143d8 <ll_rx_mem_release+0x2cc>)
   14174:	f240 336d 	movw	r3, #877	; 0x36d
   14178:	463a      	mov	r2, r7
   1417a:	4630      	mov	r0, r6
   1417c:	f009 fee9 	bl	1df52 <printk>
   14180:	4040      	eors	r0, r0
   14182:	f380 8811 	msr	BASEPRI, r0
   14186:	f04f 0003 	mov.w	r0, #3
   1418a:	df02      	svc	2
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   1418c:	782b      	ldrb	r3, [r5, #0]
   1418e:	2b07      	cmp	r3, #7
   14190:	d875      	bhi.n	1427e <ll_rx_mem_release+0x172>
	mem_link_rx.quota_pdu += delta;
   14192:	3301      	adds	r3, #1
			mem_release(rx_free, &mem_pdu_rx.free);
   14194:	4991      	ldr	r1, [pc, #580]	; (143dc <ll_rx_mem_release+0x2d0>)
	mem_link_rx.quota_pdu += delta;
   14196:	702b      	strb	r3, [r5, #0]
			mem_release(rx_free, &mem_pdu_rx.free);
   14198:	4640      	mov	r0, r8
   1419a:	f7fb ff59 	bl	10050 <mem_release>
	while (rx) {
   1419e:	2c00      	cmp	r4, #0
   141a0:	d1c1      	bne.n	14126 <ll_rx_mem_release+0x1a>
   141a2:	f8dd a004 	ldr.w	sl, [sp, #4]
	*node_rx = rx;
   141a6:	2700      	movs	r7, #0
   141a8:	f8ca 7000 	str.w	r7, [sl]
	while (mem_link_rx.quota_pdu &&
   141ac:	782b      	ldrb	r3, [r5, #0]
   141ae:	b35b      	cbz	r3, 14208 <ll_rx_mem_release+0xfc>
   141b0:	4e8b      	ldr	r6, [pc, #556]	; (143e0 <ll_rx_mem_release+0x2d4>)
		link = mem_acquire(&mem_link_rx.free);
   141b2:	f8df 8250 	ldr.w	r8, [pc, #592]	; 14404 <ll_rx_mem_release+0x2f8>
   141b6:	78f4      	ldrb	r4, [r6, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
   141b8:	f8df 9220 	ldr.w	r9, [pc, #544]	; 143dc <ll_rx_mem_release+0x2d0>
	if (last == count) {
   141bc:	7872      	ldrb	r2, [r6, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   141be:	78b3      	ldrb	r3, [r6, #2]
	last = last + 1;
   141c0:	3401      	adds	r4, #1
   141c2:	b2e4      	uxtb	r4, r4
		last = 0U;
   141c4:	42a2      	cmp	r2, r4
   141c6:	bf08      	it	eq
   141c8:	2400      	moveq	r4, #0
	if (last == first) {
   141ca:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
   141cc:	4640      	mov	r0, r8
   141ce:	d068      	beq.n	142a2 <ll_rx_mem_release+0x196>
   141d0:	f7fb ff24 	bl	1001c <mem_acquire>
   141d4:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   141d6:	4648      	mov	r0, r9
		if (!link) {
   141d8:	f1ba 0f00 	cmp.w	sl, #0
   141dc:	d05e      	beq.n	1429c <ll_rx_mem_release+0x190>
		rx = mem_acquire(&mem_pdu_rx.free);
   141de:	f7fb ff1d 	bl	1001c <mem_acquire>
		if (!rx) {
   141e2:	2800      	cmp	r0, #0
   141e4:	f000 8110 	beq.w	14408 <ll_rx_mem_release+0x2fc>
		link->mem = NULL;
   141e8:	f8ca 7004 	str.w	r7, [sl, #4]
		rx->link = link;
   141ec:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   141f0:	78f1      	ldrb	r1, [r6, #3]
   141f2:	7832      	ldrb	r2, [r6, #0]
	mem_link_rx.quota_pdu += delta;
   141f4:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   141f6:	fb01 6202 	mla	r2, r1, r2, r6
   141fa:	3b01      	subs	r3, #1
   141fc:	b2db      	uxtb	r3, r3
   141fe:	6050      	str	r0, [r2, #4]
   14200:	702b      	strb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
   14202:	70f4      	strb	r4, [r6, #3]
	while (mem_link_rx.quota_pdu &&
   14204:	2b00      	cmp	r3, #0
   14206:	d1d9      	bne.n	141bc <ll_rx_mem_release+0xb0>
}
   14208:	b003      	add	sp, #12
   1420a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LL_ASSERT(0);
   1420e:	f240 3387 	movw	r3, #903	; 0x387
   14212:	463a      	mov	r2, r7
   14214:	4659      	mov	r1, fp
   14216:	4630      	mov	r0, r6
   14218:	f009 fe9b 	bl	1df52 <printk>
   1421c:	4040      	eors	r0, r0
   1421e:	f380 8811 	msr	BASEPRI, r0
   14222:	f04f 0003 	mov.w	r0, #3
   14226:	df02      	svc	2
	while (rx) {
   14228:	2c00      	cmp	r4, #0
   1422a:	f47f af7c 	bne.w	14126 <ll_rx_mem_release+0x1a>
   1422e:	e7b8      	b.n	141a2 <ll_rx_mem_release+0x96>
			conn = ll_conn_get(rx_free->handle);
   14230:	f8b8 0006 	ldrh.w	r0, [r8, #6]
   14234:	f001 f852 	bl	152dc <ll_conn_get>
			LL_ASSERT(!conn->lll.link_tx_free);
   14238:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
			conn = ll_conn_get(rx_free->handle);
   1423a:	4680      	mov	r8, r0
			LL_ASSERT(!conn->lll.link_tx_free);
   1423c:	b163      	cbz	r3, 14258 <ll_rx_mem_release+0x14c>
   1423e:	4969      	ldr	r1, [pc, #420]	; (143e4 <ll_rx_mem_release+0x2d8>)
   14240:	f240 337a 	movw	r3, #890	; 0x37a
   14244:	463a      	mov	r2, r7
   14246:	4630      	mov	r0, r6
   14248:	f009 fe83 	bl	1df52 <printk>
   1424c:	4040      	eors	r0, r0
   1424e:	f380 8811 	msr	BASEPRI, r0
   14252:	f04f 0003 	mov.w	r0, #3
   14256:	df02      	svc	2
			link = memq_deinit(&conn->lll.memq_tx.head,
   14258:	f108 0150 	add.w	r1, r8, #80	; 0x50
   1425c:	f108 004c 	add.w	r0, r8, #76	; 0x4c
   14260:	f7fb ff36 	bl	100d0 <memq_deinit>
			LL_ASSERT(link);
   14264:	4681      	mov	r9, r0
   14266:	2800      	cmp	r0, #0
   14268:	f000 8083 	beq.w	14372 <ll_rx_mem_release+0x266>
			conn->lll.link_tx_free = link;
   1426c:	f8c8 905c 	str.w	r9, [r8, #92]	; 0x5c
			ll_conn_release(conn);
   14270:	4640      	mov	r0, r8
   14272:	f001 f825 	bl	152c0 <ll_conn_release>
	while (rx) {
   14276:	2c00      	cmp	r4, #0
   14278:	f47f af55 	bne.w	14126 <ll_rx_mem_release+0x1a>
   1427c:	e791      	b.n	141a2 <ll_rx_mem_release+0x96>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   1427e:	495a      	ldr	r1, [pc, #360]	; (143e8 <ll_rx_mem_release+0x2dc>)
   14280:	f240 3393 	movw	r3, #915	; 0x393
   14284:	463a      	mov	r2, r7
   14286:	4630      	mov	r0, r6
   14288:	f009 fe63 	bl	1df52 <printk>
   1428c:	4040      	eors	r0, r0
   1428e:	f380 8811 	msr	BASEPRI, r0
   14292:	f04f 0003 	mov.w	r0, #3
   14296:	df02      	svc	2
   14298:	782b      	ldrb	r3, [r5, #0]
   1429a:	e77a      	b.n	14192 <ll_rx_mem_release+0x86>
		printk("overflow3");
   1429c:	4853      	ldr	r0, [pc, #332]	; (143ec <ll_rx_mem_release+0x2e0>)
   1429e:	f009 fe58 	bl	1df52 <printk>
	if (max > mem_link_rx.quota_pdu) {
   142a2:	782b      	ldrb	r3, [r5, #0]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   142a4:	1e5f      	subs	r7, r3, #1
   142a6:	b2ff      	uxtb	r7, r7
   142a8:	2b00      	cmp	r3, #0
   142aa:	d0ad      	beq.n	14208 <ll_rx_mem_release+0xfc>
   142ac:	4e50      	ldr	r6, [pc, #320]	; (143f0 <ll_rx_mem_release+0x2e4>)
		link = mem_acquire(&mem_link_rx.free);
   142ae:	f8df 8154 	ldr.w	r8, [pc, #340]	; 14404 <ll_rx_mem_release+0x2f8>
   142b2:	78f4      	ldrb	r4, [r6, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
   142b4:	f8df 9124 	ldr.w	r9, [pc, #292]	; 143dc <ll_rx_mem_release+0x2d0>
	if (last == count) {
   142b8:	7872      	ldrb	r2, [r6, #1]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   142ba:	78b3      	ldrb	r3, [r6, #2]
	last = last + 1;
   142bc:	3401      	adds	r4, #1
   142be:	b2e4      	uxtb	r4, r4
		last = 0U;
   142c0:	42a2      	cmp	r2, r4
   142c2:	bf08      	it	eq
   142c4:	2400      	moveq	r4, #0
	if (last == first) {
   142c6:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
   142c8:	4640      	mov	r0, r8
   142ca:	d09d      	beq.n	14208 <ll_rx_mem_release+0xfc>
   142cc:	f7fb fea6 	bl	1001c <mem_acquire>
   142d0:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   142d2:	4648      	mov	r0, r9
		if (!link) {
   142d4:	f1ba 0f00 	cmp.w	sl, #0
   142d8:	d096      	beq.n	14208 <ll_rx_mem_release+0xfc>
		rx = mem_acquire(&mem_pdu_rx.free);
   142da:	f7fb fe9f 	bl	1001c <mem_acquire>
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   142de:	3f01      	subs	r7, #1
   142e0:	b2ff      	uxtb	r7, r7
		if (!rx) {
   142e2:	2800      	cmp	r0, #0
   142e4:	f000 8098 	beq.w	14418 <ll_rx_mem_release+0x30c>
		rx->link = link;
   142e8:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   142ec:	78f1      	ldrb	r1, [r6, #3]
   142ee:	7832      	ldrb	r2, [r6, #0]
	mem_link_rx.quota_pdu += delta;
   142f0:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   142f2:	fb01 6202 	mla	r2, r1, r2, r6
   142f6:	3b01      	subs	r3, #1
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   142f8:	2fff      	cmp	r7, #255	; 0xff
   142fa:	6050      	str	r0, [r2, #4]
	mem_link_rx.quota_pdu += delta;
   142fc:	702b      	strb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
   142fe:	70f4      	strb	r4, [r6, #3]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   14300:	d1da      	bne.n	142b8 <ll_rx_mem_release+0x1ac>
   14302:	e781      	b.n	14208 <ll_rx_mem_release+0xfc>
				struct ll_scan_set *scan =
   14304:	f8d8 3008 	ldr.w	r3, [r8, #8]
   14308:	f8d3 a000 	ldr.w	sl, [r3]
				conn_lll = scan->lll.conn;
   1430c:	f8da 8024 	ldr.w	r8, [sl, #36]	; 0x24
				LL_ASSERT(conn_lll);
   14310:	f1b8 0f00 	cmp.w	r8, #0
   14314:	d049      	beq.n	143aa <ll_rx_mem_release+0x29e>
				LL_ASSERT(!conn_lll->link_tx_free);
   14316:	f8d8 3040 	ldr.w	r3, [r8, #64]	; 0x40
				scan->lll.conn = NULL;
   1431a:	2200      	movs	r2, #0
   1431c:	f8ca 2024 	str.w	r2, [sl, #36]	; 0x24
				LL_ASSERT(!conn_lll->link_tx_free);
   14320:	b163      	cbz	r3, 1433c <ll_rx_mem_release+0x230>
   14322:	4934      	ldr	r1, [pc, #208]	; (143f4 <ll_rx_mem_release+0x2e8>)
   14324:	f240 3313 	movw	r3, #787	; 0x313
   14328:	463a      	mov	r2, r7
   1432a:	4630      	mov	r0, r6
   1432c:	f009 fe11 	bl	1df52 <printk>
   14330:	4040      	eors	r0, r0
   14332:	f380 8811 	msr	BASEPRI, r0
   14336:	f04f 0003 	mov.w	r0, #3
   1433a:	df02      	svc	2
				link = memq_deinit(&conn_lll->memq_tx.head,
   1433c:	f108 0134 	add.w	r1, r8, #52	; 0x34
   14340:	f108 0030 	add.w	r0, r8, #48	; 0x30
   14344:	f7fb fec4 	bl	100d0 <memq_deinit>
				LL_ASSERT(link);
   14348:	4681      	mov	r9, r0
   1434a:	b300      	cbz	r0, 1438e <ll_rx_mem_release+0x282>
				ll_conn_release(conn);
   1434c:	f8d8 0000 	ldr.w	r0, [r8]
				conn_lll->link_tx_free = link;
   14350:	f8c8 9040 	str.w	r9, [r8, #64]	; 0x40
				ll_conn_release(conn);
   14354:	f000 ffb4 	bl	152c0 <ll_conn_release>
				scan->is_enabled = 0U;
   14358:	f89a 3048 	ldrb.w	r3, [sl, #72]	; 0x48
   1435c:	f36f 0300 	bfc	r3, #0, #1
   14360:	f88a 3048 	strb.w	r3, [sl, #72]	; 0x48
					ull_filter_adv_scan_state_cb(0);
   14364:	2000      	movs	r0, #0
   14366:	f004 fa39 	bl	187dc <ull_filter_adv_scan_state_cb>
	while (rx) {
   1436a:	2c00      	cmp	r4, #0
   1436c:	f47f aedb 	bne.w	14126 <ll_rx_mem_release+0x1a>
   14370:	e717      	b.n	141a2 <ll_rx_mem_release+0x96>
			LL_ASSERT(link);
   14372:	4921      	ldr	r1, [pc, #132]	; (143f8 <ll_rx_mem_release+0x2ec>)
   14374:	f240 337d 	movw	r3, #893	; 0x37d
   14378:	463a      	mov	r2, r7
   1437a:	4630      	mov	r0, r6
   1437c:	f009 fde9 	bl	1df52 <printk>
   14380:	4040      	eors	r0, r0
   14382:	f380 8811 	msr	BASEPRI, r0
   14386:	f04f 0003 	mov.w	r0, #3
   1438a:	df02      	svc	2
   1438c:	e76e      	b.n	1426c <ll_rx_mem_release+0x160>
				LL_ASSERT(link);
   1438e:	491a      	ldr	r1, [pc, #104]	; (143f8 <ll_rx_mem_release+0x2ec>)
   14390:	f240 3316 	movw	r3, #790	; 0x316
   14394:	463a      	mov	r2, r7
   14396:	4630      	mov	r0, r6
   14398:	f009 fddb 	bl	1df52 <printk>
   1439c:	4040      	eors	r0, r0
   1439e:	f380 8811 	msr	BASEPRI, r0
   143a2:	f04f 0003 	mov.w	r0, #3
   143a6:	df02      	svc	2
   143a8:	e7d0      	b.n	1434c <ll_rx_mem_release+0x240>
				LL_ASSERT(conn_lll);
   143aa:	4914      	ldr	r1, [pc, #80]	; (143fc <ll_rx_mem_release+0x2f0>)
   143ac:	f44f 7344 	mov.w	r3, #784	; 0x310
   143b0:	463a      	mov	r2, r7
   143b2:	4630      	mov	r0, r6
   143b4:	f009 fdcd 	bl	1df52 <printk>
   143b8:	4040      	eors	r0, r0
   143ba:	f380 8811 	msr	BASEPRI, r0
   143be:	f04f 0003 	mov.w	r0, #3
   143c2:	df02      	svc	2
   143c4:	e7a7      	b.n	14316 <ll_rx_mem_release+0x20a>
   143c6:	bf00      	nop
   143c8:	2000240c 	.word	0x2000240c
   143cc:	00024268 	.word	0x00024268
   143d0:	00023ff4 	.word	0x00023ff4
   143d4:	00024370 	.word	0x00024370
   143d8:	0002437c 	.word	0x0002437c
   143dc:	20002484 	.word	0x20002484
   143e0:	2000028c 	.word	0x2000028c
   143e4:	000243a0 	.word	0x000243a0
   143e8:	000242f8 	.word	0x000242f8
   143ec:	000242d8 	.word	0x000242d8
   143f0:	200002a0 	.word	0x200002a0
   143f4:	00024358 	.word	0x00024358
   143f8:	00024490 	.word	0x00024490
   143fc:	0002434c 	.word	0x0002434c
   14400:	00024064 	.word	0x00024064
   14404:	20002410 	.word	0x20002410
		printk("overflow4");
   14408:	4807      	ldr	r0, [pc, #28]	; (14428 <ll_rx_mem_release+0x31c>)
   1440a:	f009 fda2 	bl	1df52 <printk>
			mem_release(link, &mem_link_rx.free);
   1440e:	4907      	ldr	r1, [pc, #28]	; (1442c <ll_rx_mem_release+0x320>)
   14410:	4650      	mov	r0, sl
   14412:	f7fb fe1d 	bl	10050 <mem_release>
			break;
   14416:	e744      	b.n	142a2 <ll_rx_mem_release+0x196>
			mem_release(link, &mem_link_rx.free);
   14418:	4904      	ldr	r1, [pc, #16]	; (1442c <ll_rx_mem_release+0x320>)
   1441a:	4650      	mov	r0, sl
}
   1441c:	b003      	add	sp, #12
   1441e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mem_release(link, &mem_link_rx.free);
   14422:	f7fb be15 	b.w	10050 <mem_release>
   14426:	bf00      	nop
   14428:	000242e4 	.word	0x000242e4
   1442c:	20002410 	.word	0x20002410

00014430 <ll_rx_link_alloc>:
	return mem_acquire(&mem_link_rx.free);
   14430:	4801      	ldr	r0, [pc, #4]	; (14438 <ll_rx_link_alloc+0x8>)
   14432:	f7fb bdf3 	b.w	1001c <mem_acquire>
   14436:	bf00      	nop
   14438:	20002410 	.word	0x20002410

0001443c <ll_rx_link_release>:
	mem_release(link, &mem_link_rx.free);
   1443c:	4901      	ldr	r1, [pc, #4]	; (14444 <ll_rx_link_release+0x8>)
   1443e:	f7fb be07 	b.w	10050 <mem_release>
   14442:	bf00      	nop
   14444:	20002410 	.word	0x20002410

00014448 <ll_rx_put>:
	rx_hdr->ack_last = mfifo_tx_ack.l;
   14448:	4b02      	ldr	r3, [pc, #8]	; (14454 <ll_rx_put+0xc>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   1444a:	4a03      	ldr	r2, [pc, #12]	; (14458 <ll_rx_put+0x10>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
   1444c:	78db      	ldrb	r3, [r3, #3]
   1444e:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   14450:	f7fb be48 	b.w	100e4 <memq_enqueue>
   14454:	200003e0 	.word	0x200003e0
   14458:	20002e88 	.word	0x20002e88

0001445c <ll_rx_sched>:
	k_sem_give(sem_recv);
   1445c:	4b01      	ldr	r3, [pc, #4]	; (14464 <ll_rx_sched+0x8>)
   1445e:	6818      	ldr	r0, [r3, #0]
	z_impl_k_sem_give(sem);
   14460:	f009 b98a 	b.w	1d778 <z_impl_k_sem_give>
   14464:	20002e94 	.word	0x20002e94

00014468 <ll_pdu_rx_alloc_peek>:
{
   14468:	b510      	push	{r4, lr}
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
   1446a:	4b0f      	ldr	r3, [pc, #60]	; (144a8 <ll_pdu_rx_alloc_peek+0x40>)
   1446c:	789a      	ldrb	r2, [r3, #2]
   1446e:	78dc      	ldrb	r4, [r3, #3]
	if (last >= first) {
   14470:	42a2      	cmp	r2, r4
   14472:	d808      	bhi.n	14486 <ll_pdu_rx_alloc_peek+0x1e>
		return last - first;
   14474:	1aa1      	subs	r1, r4, r2
   14476:	b2c9      	uxtb	r1, r1
   14478:	4288      	cmp	r0, r1
   1447a:	d80f      	bhi.n	1449c <ll_pdu_rx_alloc_peek+0x34>
	if (first == last) {
   1447c:	42a2      	cmp	r2, r4
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
   1447e:	7819      	ldrb	r1, [r3, #0]
   14480:	d108      	bne.n	14494 <ll_pdu_rx_alloc_peek+0x2c>
		return NULL; /* Queue is empty */
   14482:	2000      	movs	r0, #0
}
   14484:	bd10      	pop	{r4, pc}
		return count - first + last;
   14486:	7859      	ldrb	r1, [r3, #1]
   14488:	1a89      	subs	r1, r1, r2
   1448a:	4421      	add	r1, r4
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
   1448c:	b2c9      	uxtb	r1, r1
   1448e:	4288      	cmp	r0, r1
   14490:	d804      	bhi.n	1449c <ll_pdu_rx_alloc_peek+0x34>
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
   14492:	7819      	ldrb	r1, [r3, #0]
	return *((void **)(fifo + first * size));
   14494:	fb02 3301 	mla	r3, r2, r1, r3
   14498:	6858      	ldr	r0, [r3, #4]
}
   1449a:	bd10      	pop	{r4, pc}
		printk("overflow1");
   1449c:	4803      	ldr	r0, [pc, #12]	; (144ac <ll_pdu_rx_alloc_peek+0x44>)
   1449e:	f009 fd58 	bl	1df52 <printk>
		return NULL;
   144a2:	2000      	movs	r0, #0
}
   144a4:	bd10      	pop	{r4, pc}
   144a6:	bf00      	nop
   144a8:	2000028c 	.word	0x2000028c
   144ac:	000243b8 	.word	0x000243b8

000144b0 <ll_pdu_rx_alloc>:
{
   144b0:	b410      	push	{r4}
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
   144b2:	4b0a      	ldr	r3, [pc, #40]	; (144dc <ll_pdu_rx_alloc+0x2c>)
	uint8_t _first = *first; /* Copy read-index */
   144b4:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
   144b6:	78da      	ldrb	r2, [r3, #3]
   144b8:	7818      	ldrb	r0, [r3, #0]
   144ba:	785c      	ldrb	r4, [r3, #1]
   144bc:	428a      	cmp	r2, r1
   144be:	d00a      	beq.n	144d6 <ll_pdu_rx_alloc+0x26>
	_first += 1U;
   144c0:	1c4a      	adds	r2, r1, #1
   144c2:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   144c4:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
   144c8:	4294      	cmp	r4, r2
   144ca:	bf08      	it	eq
   144cc:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   144ce:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   144d0:	709a      	strb	r2, [r3, #2]
}
   144d2:	bc10      	pop	{r4}
   144d4:	4770      	bx	lr
		return NULL;
   144d6:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
   144d8:	e7fb      	b.n	144d2 <ll_pdu_rx_alloc+0x22>
   144da:	bf00      	nop
   144dc:	2000028c 	.word	0x2000028c

000144e0 <ll_tx_ack_put>:
{
   144e0:	b570      	push	{r4, r5, r6, lr}
	idx = MFIFO_ENQUEUE_GET(tx_ack, (void **)&tx);
   144e2:	4a13      	ldr	r2, [pc, #76]	; (14530 <ll_tx_ack_put+0x50>)
   144e4:	78d6      	ldrb	r6, [r2, #3]
	if (last == count) {
   144e6:	7855      	ldrb	r5, [r2, #1]
   144e8:	7894      	ldrb	r4, [r2, #2]
	last = last + 1;
   144ea:	1c73      	adds	r3, r6, #1
   144ec:	b2db      	uxtb	r3, r3
		last = 0U;
   144ee:	429d      	cmp	r5, r3
   144f0:	bf08      	it	eq
   144f2:	2300      	moveq	r3, #0
	if (last == first) {
   144f4:	429c      	cmp	r4, r3
   144f6:	d00a      	beq.n	1450e <ll_tx_ack_put+0x2e>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   144f8:	4615      	mov	r5, r2
   144fa:	f815 4b04 	ldrb.w	r4, [r5], #4
   144fe:	fb14 f406 	smulbb	r4, r4, r6
	LL_ASSERT(tx);
   14502:	192e      	adds	r6, r5, r4
   14504:	d003      	beq.n	1450e <ll_tx_ack_put+0x2e>
	tx->handle = handle;
   14506:	5328      	strh	r0, [r5, r4]
	*last = idx; /* Commit: Update write index */
   14508:	70d3      	strb	r3, [r2, #3]
	tx->node = node_tx;
   1450a:	6071      	str	r1, [r6, #4]
}
   1450c:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(tx);
   1450e:	4a09      	ldr	r2, [pc, #36]	; (14534 <ll_tx_ack_put+0x54>)
   14510:	4909      	ldr	r1, [pc, #36]	; (14538 <ll_tx_ack_put+0x58>)
   14512:	480a      	ldr	r0, [pc, #40]	; (1453c <ll_tx_ack_put+0x5c>)
   14514:	f240 33de 	movw	r3, #990	; 0x3de
   14518:	f009 fd1b 	bl	1df52 <printk>
   1451c:	4040      	eors	r0, r0
   1451e:	f380 8811 	msr	BASEPRI, r0
   14522:	f04f 0003 	mov.w	r0, #3
   14526:	df02      	svc	2
	tx->handle = handle;
   14528:	2300      	movs	r3, #0
   1452a:	801b      	strh	r3, [r3, #0]
   1452c:	deff      	udf	#255	; 0xff
   1452e:	bf00      	nop
   14530:	200003e0 	.word	0x200003e0
   14534:	00024268 	.word	0x00024268
   14538:	00024484 	.word	0x00024484
   1453c:	00023ff4 	.word	0x00023ff4

00014540 <ull_ticker_status_give>:
	*((uint32_t volatile *)param) = status;
   14540:	6008      	str	r0, [r1, #0]
   14542:	4801      	ldr	r0, [pc, #4]	; (14548 <ull_ticker_status_give+0x8>)
   14544:	f009 b918 	b.w	1d778 <z_impl_k_sem_give>
   14548:	20002e98 	.word	0x20002e98

0001454c <ull_ticker_status_take>:
{
   1454c:	b510      	push	{r4, lr}
   1454e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   14552:	460c      	mov	r4, r1
   14554:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	return z_impl_k_sem_take(sem, timeout);
   14558:	4802      	ldr	r0, [pc, #8]	; (14564 <ull_ticker_status_take+0x18>)
   1455a:	f009 f933 	bl	1d7c4 <z_impl_k_sem_take>
	return *ret_cb;
   1455e:	6820      	ldr	r0, [r4, #0]
}
   14560:	bd10      	pop	{r4, pc}
   14562:	bf00      	nop
   14564:	20002e98 	.word	0x20002e98

00014568 <ull_disable_mark>:
	if (!*m) {
   14568:	4a04      	ldr	r2, [pc, #16]	; (1457c <ull_disable_mark+0x14>)
   1456a:	6813      	ldr	r3, [r2, #0]
   1456c:	b10b      	cbz	r3, 14572 <ull_disable_mark+0xa>
}
   1456e:	4618      	mov	r0, r3
   14570:	4770      	bx	lr
		*m = param;
   14572:	4603      	mov	r3, r0
   14574:	6010      	str	r0, [r2, #0]
}
   14576:	4618      	mov	r0, r3
   14578:	4770      	bx	lr
   1457a:	bf00      	nop
   1457c:	20002348 	.word	0x20002348

00014580 <ull_disable_unmark>:
	if (*m && *m == param) {
   14580:	4a04      	ldr	r2, [pc, #16]	; (14594 <ull_disable_unmark+0x14>)
   14582:	6813      	ldr	r3, [r2, #0]
   14584:	b123      	cbz	r3, 14590 <ull_disable_unmark+0x10>
   14586:	4298      	cmp	r0, r3
		*m = NULL;
   14588:	bf06      	itte	eq
   1458a:	2100      	moveq	r1, #0
   1458c:	6011      	streq	r1, [r2, #0]
	return NULL;
   1458e:	2300      	movne	r3, #0
}
   14590:	4618      	mov	r0, r3
   14592:	4770      	bx	lr
   14594:	20002348 	.word	0x20002348

00014598 <ull_disable_mark_get>:
	return mark_get(mark_disable);
   14598:	4b01      	ldr	r3, [pc, #4]	; (145a0 <ull_disable_mark_get+0x8>)
}
   1459a:	6818      	ldr	r0, [r3, #0]
   1459c:	4770      	bx	lr
   1459e:	bf00      	nop
   145a0:	20002348 	.word	0x20002348

000145a4 <ull_update_mark>:
	if (!*m) {
   145a4:	4a04      	ldr	r2, [pc, #16]	; (145b8 <ull_update_mark+0x14>)
   145a6:	6813      	ldr	r3, [r2, #0]
   145a8:	b10b      	cbz	r3, 145ae <ull_update_mark+0xa>
}
   145aa:	4618      	mov	r0, r3
   145ac:	4770      	bx	lr
		*m = param;
   145ae:	4603      	mov	r3, r0
   145b0:	6010      	str	r0, [r2, #0]
}
   145b2:	4618      	mov	r0, r3
   145b4:	4770      	bx	lr
   145b6:	bf00      	nop
   145b8:	2000234c 	.word	0x2000234c

000145bc <ull_update_unmark>:
	if (*m && *m == param) {
   145bc:	4a04      	ldr	r2, [pc, #16]	; (145d0 <ull_update_unmark+0x14>)
   145be:	6813      	ldr	r3, [r2, #0]
   145c0:	b123      	cbz	r3, 145cc <ull_update_unmark+0x10>
   145c2:	4298      	cmp	r0, r3
		*m = NULL;
   145c4:	bf06      	itte	eq
   145c6:	2100      	moveq	r1, #0
   145c8:	6011      	streq	r1, [r2, #0]
	return NULL;
   145ca:	2300      	movne	r3, #0
}
   145cc:	4618      	mov	r0, r3
   145ce:	4770      	bx	lr
   145d0:	2000234c 	.word	0x2000234c

000145d4 <ull_update_mark_get>:
	return mark_get(mark_update);
   145d4:	4b01      	ldr	r3, [pc, #4]	; (145dc <ull_update_mark_get+0x8>)
}
   145d6:	6818      	ldr	r0, [r3, #0]
   145d8:	4770      	bx	lr
   145da:	bf00      	nop
   145dc:	2000234c 	.word	0x2000234c

000145e0 <ull_disable>:
{
   145e0:	b530      	push	{r4, r5, lr}
	hdr = HDR_ULL(((struct lll_hdr *)lll)->parent);
   145e2:	6805      	ldr	r5, [r0, #0]
	if (!hdr) {
   145e4:	f115 0f10 	cmn.w	r5, #16
{
   145e8:	b087      	sub	sp, #28
	if (!hdr) {
   145ea:	d00b      	beq.n	14604 <ull_disable+0x24>
	compiler_barrier();
   145ec:	4604      	mov	r4, r0
	return z_impl_k_sem_init(sem, initial_count, limit);
   145ee:	2201      	movs	r2, #1
   145f0:	4668      	mov	r0, sp
   145f2:	2100      	movs	r1, #0
   145f4:	f00e fcfd 	bl	22ff2 <z_impl_k_sem_init>
	if (!hdr->ref) {
   145f8:	7c2b      	ldrb	r3, [r5, #16]
	hdr->disabled_cb = disabled_cb;
   145fa:	4a13      	ldr	r2, [pc, #76]	; (14648 <ull_disable+0x68>)
	hdr->disabled_param = &sem;
   145fc:	f8c5 d018 	str.w	sp, [r5, #24]
	hdr->disabled_cb = disabled_cb;
   14600:	616a      	str	r2, [r5, #20]
	if (!hdr->ref) {
   14602:	b913      	cbnz	r3, 1460a <ull_disable+0x2a>
		return ULL_STATUS_SUCCESS;
   14604:	2000      	movs	r0, #0
}
   14606:	b007      	add	sp, #28
   14608:	bd30      	pop	{r4, r5, pc}
	mfy.param = lll;
   1460a:	4b10      	ldr	r3, [pc, #64]	; (1464c <ull_disable+0x6c>)
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   1460c:	2200      	movs	r2, #0
   1460e:	4611      	mov	r1, r2
   14610:	2003      	movs	r0, #3
	mfy.param = lll;
   14612:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   14614:	f7fb fdda 	bl	101cc <mayfly_enqueue>
	LL_ASSERT(!ret);
   14618:	b940      	cbnz	r0, 1462c <ull_disable+0x4c>
	return z_impl_k_sem_take(sem, timeout);
   1461a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1461e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14622:	4668      	mov	r0, sp
   14624:	f009 f8ce 	bl	1d7c4 <z_impl_k_sem_take>
}
   14628:	b007      	add	sp, #28
   1462a:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!ret);
   1462c:	4a08      	ldr	r2, [pc, #32]	; (14650 <ull_disable+0x70>)
   1462e:	4909      	ldr	r1, [pc, #36]	; (14654 <ull_disable+0x74>)
   14630:	4809      	ldr	r0, [pc, #36]	; (14658 <ull_disable+0x78>)
   14632:	f240 4349 	movw	r3, #1097	; 0x449
   14636:	f009 fc8c 	bl	1df52 <printk>
   1463a:	4040      	eors	r0, r0
   1463c:	f380 8811 	msr	BASEPRI, r0
   14640:	f04f 0003 	mov.w	r0, #3
   14644:	df02      	svc	2
   14646:	e7e8      	b.n	1461a <ull_disable+0x3a>
   14648:	000133d9 	.word	0x000133d9
   1464c:	2000044c 	.word	0x2000044c
   14650:	00024268 	.word	0x00024268
   14654:	000242b0 	.word	0x000242b0
   14658:	00023ff4 	.word	0x00023ff4

0001465c <ull_pdu_rx_alloc_peek>:
{
   1465c:	b410      	push	{r4}
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
   1465e:	4b0d      	ldr	r3, [pc, #52]	; (14694 <ull_pdu_rx_alloc_peek+0x38>)
   14660:	789a      	ldrb	r2, [r3, #2]
   14662:	78dc      	ldrb	r4, [r3, #3]
	if (last >= first) {
   14664:	42a2      	cmp	r2, r4
   14666:	d809      	bhi.n	1467c <ull_pdu_rx_alloc_peek+0x20>
		return last - first;
   14668:	1aa1      	subs	r1, r4, r2
   1466a:	b2c9      	uxtb	r1, r1
   1466c:	4288      	cmp	r0, r1
   1466e:	d802      	bhi.n	14676 <ull_pdu_rx_alloc_peek+0x1a>
	if (first == last) {
   14670:	42a2      	cmp	r2, r4
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
   14672:	7819      	ldrb	r1, [r3, #0]
   14674:	d109      	bne.n	1468a <ull_pdu_rx_alloc_peek+0x2e>
		return NULL;
   14676:	2000      	movs	r0, #0
}
   14678:	bc10      	pop	{r4}
   1467a:	4770      	bx	lr
		return count - first + last;
   1467c:	7859      	ldrb	r1, [r3, #1]
   1467e:	1a89      	subs	r1, r1, r2
   14680:	4421      	add	r1, r4
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
   14682:	b2c9      	uxtb	r1, r1
   14684:	4288      	cmp	r0, r1
   14686:	d8f6      	bhi.n	14676 <ull_pdu_rx_alloc_peek+0x1a>
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
   14688:	7819      	ldrb	r1, [r3, #0]
}
   1468a:	bc10      	pop	{r4}
	return *((void **)(fifo + first * size));
   1468c:	fb02 3301 	mla	r3, r2, r1, r3
   14690:	6858      	ldr	r0, [r3, #4]
   14692:	4770      	bx	lr
   14694:	200002a0 	.word	0x200002a0

00014698 <ull_pdu_rx_alloc>:
{
   14698:	b410      	push	{r4}
	return MFIFO_DEQUEUE(pdu_rx_free);
   1469a:	4b0a      	ldr	r3, [pc, #40]	; (146c4 <ull_pdu_rx_alloc+0x2c>)
	uint8_t _first = *first; /* Copy read-index */
   1469c:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
   1469e:	78da      	ldrb	r2, [r3, #3]
   146a0:	7818      	ldrb	r0, [r3, #0]
   146a2:	785c      	ldrb	r4, [r3, #1]
   146a4:	428a      	cmp	r2, r1
   146a6:	d00a      	beq.n	146be <ull_pdu_rx_alloc+0x26>
	_first += 1U;
   146a8:	1c4a      	adds	r2, r1, #1
   146aa:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   146ac:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
   146b0:	4294      	cmp	r4, r2
   146b2:	bf08      	it	eq
   146b4:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   146b6:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   146b8:	709a      	strb	r2, [r3, #2]
}
   146ba:	bc10      	pop	{r4}
   146bc:	4770      	bx	lr
		return NULL;
   146be:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE(pdu_rx_free);
   146c0:	e7fb      	b.n	146ba <ull_pdu_rx_alloc+0x22>
   146c2:	bf00      	nop
   146c4:	200002a0 	.word	0x200002a0

000146c8 <ull_rx_put>:
{
   146c8:	b538      	push	{r3, r4, r5, lr}
   146ca:	460c      	mov	r4, r1
   146cc:	4605      	mov	r5, r0
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   146ce:	f002 ffc1 	bl	17654 <ull_conn_ack_last_idx_get>
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   146d2:	4621      	mov	r1, r4
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   146d4:	7020      	strb	r0, [r4, #0]
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   146d6:	4a03      	ldr	r2, [pc, #12]	; (146e4 <ull_rx_put+0x1c>)
   146d8:	4628      	mov	r0, r5
}
   146da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   146de:	f7fb bd01 	b.w	100e4 <memq_enqueue>
   146e2:	bf00      	nop
   146e4:	20002e90 	.word	0x20002e90

000146e8 <ull_rx_sched>:
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
   146e8:	2201      	movs	r2, #1
   146ea:	4b02      	ldr	r3, [pc, #8]	; (146f4 <ull_rx_sched+0xc>)
   146ec:	4611      	mov	r1, r2
   146ee:	2000      	movs	r0, #0
   146f0:	f7fb bd6c 	b.w	101cc <mayfly_enqueue>
   146f4:	2000045c 	.word	0x2000045c

000146f8 <ull_prepare_enqueue>:
{
   146f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   146fc:	4e19      	ldr	r6, [pc, #100]	; (14764 <ull_prepare_enqueue+0x6c>)
{
   146fe:	f89d a024 	ldrb.w	sl, [sp, #36]	; 0x24
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   14702:	78f4      	ldrb	r4, [r6, #3]
	if (last == count) {
   14704:	7877      	ldrb	r7, [r6, #1]
   14706:	f896 c002 	ldrb.w	ip, [r6, #2]
	last = last + 1;
   1470a:	1c65      	adds	r5, r4, #1
   1470c:	b2ed      	uxtb	r5, r5
		last = 0U;
   1470e:	42af      	cmp	r7, r5
   14710:	bf08      	it	eq
   14712:	2500      	moveq	r5, #0
	if (last == first) {
   14714:	45ac      	cmp	ip, r5
   14716:	d021      	beq.n	1475c <ull_prepare_enqueue+0x64>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   14718:	4699      	mov	r9, r3
   1471a:	4633      	mov	r3, r6
   1471c:	460f      	mov	r7, r1
   1471e:	4611      	mov	r1, r2
   14720:	f813 2b04 	ldrb.w	r2, [r3], #4
   14724:	fb02 3404 	mla	r4, r2, r4, r3
	if (!e) {
   14728:	b1c4      	cbz	r4, 1475c <ull_prepare_enqueue+0x64>
   1472a:	4680      	mov	r8, r0
	memcpy(&e->prepare_param, prepare_param, sizeof(e->prepare_param));
   1472c:	2210      	movs	r2, #16
   1472e:	4620      	mov	r0, r4
   14730:	f00b fba1 	bl	1fe76 <memcpy>
	e->is_resume = is_resume;
   14734:	f894 2020 	ldrb.w	r2, [r4, #32]
	e->prepare_cb = prepare_cb;
   14738:	f8c4 9010 	str.w	r9, [r4, #16]
	e->is_resume = is_resume;
   1473c:	f00a 0a01 	and.w	sl, sl, #1
   14740:	f022 0303 	bic.w	r3, r2, #3
   14744:	ea43 030a 	orr.w	r3, r3, sl
	e->prio = prio;
   14748:	9a08      	ldr	r2, [sp, #32]
   1474a:	61e2      	str	r2, [r4, #28]
	e->abort_cb = abort_cb;
   1474c:	e9c4 8705 	strd	r8, r7, [r4, #20]
	*last = idx; /* Commit: Update write index */
   14750:	70f5      	strb	r5, [r6, #3]
	e->is_resume = is_resume;
   14752:	f884 3020 	strb.w	r3, [r4, #32]
	return 0;
   14756:	2000      	movs	r0, #0
}
   14758:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENOBUFS;
   1475c:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
   14760:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14764:	200002bc 	.word	0x200002bc

00014768 <ull_prepare_dequeue_get>:
	return MFIFO_DEQUEUE_GET(prep);
   14768:	4b05      	ldr	r3, [pc, #20]	; (14780 <ull_prepare_dequeue_get+0x18>)
   1476a:	789a      	ldrb	r2, [r3, #2]
	if (first == last) {
   1476c:	78d9      	ldrb	r1, [r3, #3]
   1476e:	7818      	ldrb	r0, [r3, #0]
   14770:	4291      	cmp	r1, r2
	return (void *)(fifo + first * size);
   14772:	bf1a      	itte	ne
   14774:	3304      	addne	r3, #4
   14776:	fb02 3000 	mlane	r0, r2, r0, r3
		return NULL;
   1477a:	2000      	moveq	r0, #0
}
   1477c:	4770      	bx	lr
   1477e:	bf00      	nop
   14780:	200002bc 	.word	0x200002bc

00014784 <ull_prepare_dequeue_iter>:
{
   14784:	b430      	push	{r4, r5}
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   14786:	4b0c      	ldr	r3, [pc, #48]	; (147b8 <ull_prepare_dequeue_iter+0x34>)
	if (*idx >= count) {
   14788:	7802      	ldrb	r2, [r0, #0]
   1478a:	785c      	ldrb	r4, [r3, #1]
   1478c:	78dd      	ldrb	r5, [r3, #3]
   1478e:	7819      	ldrb	r1, [r3, #0]
   14790:	4294      	cmp	r4, r2
   14792:	bf9c      	itt	ls
   14794:	789a      	ldrbls	r2, [r3, #2]
		*idx = first;
   14796:	7002      	strbls	r2, [r0, #0]
	if (*idx == last) {
   14798:	4295      	cmp	r5, r2
   1479a:	d00a      	beq.n	147b2 <ull_prepare_dequeue_iter+0x2e>
	i = *idx + 1;
   1479c:	1c53      	adds	r3, r2, #1
	p = (void *)(fifo + (*idx) * size);
   1479e:	4d07      	ldr	r5, [pc, #28]	; (147bc <ull_prepare_dequeue_iter+0x38>)
	i = *idx + 1;
   147a0:	b2db      	uxtb	r3, r3
		i = 0U;
   147a2:	429c      	cmp	r4, r3
   147a4:	bf08      	it	eq
   147a6:	2300      	moveq	r3, #0
	*idx = i;
   147a8:	7003      	strb	r3, [r0, #0]
	p = (void *)(fifo + (*idx) * size);
   147aa:	fb02 5001 	mla	r0, r2, r1, r5
}
   147ae:	bc30      	pop	{r4, r5}
   147b0:	4770      	bx	lr
		return NULL;
   147b2:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   147b4:	e7fb      	b.n	147ae <ull_prepare_dequeue_iter+0x2a>
   147b6:	bf00      	nop
   147b8:	200002bc 	.word	0x200002bc
   147bc:	200002c0 	.word	0x200002c0

000147c0 <ull_event_done_extra_get>:
	evdone = MFIFO_DEQUEUE_PEEK(done);
   147c0:	4b06      	ldr	r3, [pc, #24]	; (147dc <ull_event_done_extra_get+0x1c>)
   147c2:	7899      	ldrb	r1, [r3, #2]
	if (first == last) {
   147c4:	78d8      	ldrb	r0, [r3, #3]
   147c6:	781a      	ldrb	r2, [r3, #0]
   147c8:	4288      	cmp	r0, r1
   147ca:	d005      	beq.n	147d8 <ull_event_done_extra_get+0x18>
	return *((void **)(fifo + first * size));
   147cc:	fb01 3302 	mla	r3, r1, r2, r3
   147d0:	6858      	ldr	r0, [r3, #4]
	if (!evdone) {
   147d2:	b110      	cbz	r0, 147da <ull_event_done_extra_get+0x1a>
	return &evdone->extra;
   147d4:	3020      	adds	r0, #32
   147d6:	4770      	bx	lr
		return NULL;
   147d8:	2000      	movs	r0, #0
}
   147da:	4770      	bx	lr
   147dc:	20000278 	.word	0x20000278

000147e0 <ull_event_done>:
{
   147e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	evdone = MFIFO_DEQUEUE(done);
   147e2:	4a14      	ldr	r2, [pc, #80]	; (14834 <ull_event_done+0x54>)
	uint8_t _first = *first; /* Copy read-index */
   147e4:	7893      	ldrb	r3, [r2, #2]
	if (_first == last) {
   147e6:	78d4      	ldrb	r4, [r2, #3]
   147e8:	7811      	ldrb	r1, [r2, #0]
   147ea:	7855      	ldrb	r5, [r2, #1]
   147ec:	429c      	cmp	r4, r3
   147ee:	d01f      	beq.n	14830 <ull_event_done+0x50>
	mem = *((void **)(fifo + _first * size));
   147f0:	fb03 2101 	mla	r1, r3, r1, r2
	_first += 1U;
   147f4:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
   147f6:	684c      	ldr	r4, [r1, #4]
	_first += 1U;
   147f8:	b2db      	uxtb	r3, r3
		_first = 0U;
   147fa:	429d      	cmp	r5, r3
   147fc:	bf08      	it	eq
   147fe:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   14800:	7093      	strb	r3, [r2, #2]
	if (!evdone) {
   14802:	b19c      	cbz	r4, 1482c <ull_event_done+0x4c>
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
   14804:	2501      	movs	r5, #1
	evdone->hdr.link = NULL;
   14806:	2600      	movs	r6, #0
	link = evdone->hdr.link;
   14808:	6827      	ldr	r7, [r4, #0]
	evdone->param = param;
   1480a:	61e0      	str	r0, [r4, #28]
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
   1480c:	7125      	strb	r5, [r4, #4]
	evdone->hdr.link = NULL;
   1480e:	6026      	str	r6, [r4, #0]
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   14810:	f002 ff20 	bl	17654 <ull_conn_ack_last_idx_get>
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   14814:	4a08      	ldr	r2, [pc, #32]	; (14838 <ull_event_done+0x58>)
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   14816:	7020      	strb	r0, [r4, #0]
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   14818:	4621      	mov	r1, r4
   1481a:	4638      	mov	r0, r7
   1481c:	f7fb fc62 	bl	100e4 <memq_enqueue>
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
   14820:	4b06      	ldr	r3, [pc, #24]	; (1483c <ull_event_done+0x5c>)
   14822:	4630      	mov	r0, r6
   14824:	462a      	mov	r2, r5
   14826:	4629      	mov	r1, r5
   14828:	f7fb fcd0 	bl	101cc <mayfly_enqueue>
}
   1482c:	4620      	mov	r0, r4
   1482e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return NULL;
   14830:	2400      	movs	r4, #0
   14832:	e7fb      	b.n	1482c <ull_event_done+0x4c>
   14834:	20000278 	.word	0x20000278
   14838:	20002e90 	.word	0x20002e90
   1483c:	2000045c 	.word	0x2000045c

00014840 <ticker_cb>:
	return 0;
}

static void ticker_cb(uint32_t ticks_at_expire, uint32_t remainder, uint16_t lazy,
		      void *param)
{
   14840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	static int cnt = 0;
	cnt ++;
   14844:	f8df c090 	ldr.w	ip, [pc, #144]	; 148d8 <ticker_cb+0x98>
{
   14848:	461c      	mov	r4, r3
	return ++hdr->ref;
   1484a:	7c1b      	ldrb	r3, [r3, #16]
	cnt ++;
   1484c:	f8dc 5000 	ldr.w	r5, [ip]
   14850:	3301      	adds	r3, #1
   14852:	b2db      	uxtb	r3, r3
   14854:	3501      	adds	r5, #1
{
   14856:	4680      	mov	r8, r0
   14858:	460f      	mov	r7, r1
   1485a:	4616      	mov	r6, r2
   1485c:	7423      	strb	r3, [r4, #16]
	cnt ++;
   1485e:	f8cc 5000 	str.w	r5, [ip]

	DEBUG_RADIO_PREPARE_O(1);

	/* Increment prepare reference count */
	ref = ull_ref_inc(&scan->ull);
	LL_ASSERT(ref);
   14862:	b183      	cbz	r3, 14886 <ticker_cb+0x46>

	/* Append timing parameters */
	p.ticks_at_expire = ticks_at_expire;
   14864:	4d16      	ldr	r5, [pc, #88]	; (148c0 <ticker_cb+0x80>)
	p.remainder = remainder;
	p.lazy = lazy;
	p.param = &scan->lll;
	mfy.param = &p;
   14866:	4b17      	ldr	r3, [pc, #92]	; (148c4 <ticker_cb+0x84>)
	p.ticks_at_expire = ticks_at_expire;
   14868:	f8c5 8000 	str.w	r8, [r5]

	/* Kick LLL prepare */
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1486c:	2200      	movs	r2, #0
	p.param = &scan->lll;
   1486e:	341c      	adds	r4, #28
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   14870:	4611      	mov	r1, r2
   14872:	2001      	movs	r0, #1
	mfy.param = &p;
   14874:	609d      	str	r5, [r3, #8]
	p.param = &scan->lll;
   14876:	60ec      	str	r4, [r5, #12]
	p.remainder = remainder;
   14878:	606f      	str	r7, [r5, #4]
	p.lazy = lazy;
   1487a:	812e      	strh	r6, [r5, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1487c:	f7fb fca6 	bl	101cc <mayfly_enqueue>
			     0, &mfy);
	LL_ASSERT(!ret);
   14880:	b978      	cbnz	r0, 148a2 <ticker_cb+0x62>

	DEBUG_RADIO_PREPARE_O(1);
}
   14882:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LL_ASSERT(ref);
   14886:	4a10      	ldr	r2, [pc, #64]	; (148c8 <ticker_cb+0x88>)
   14888:	4910      	ldr	r1, [pc, #64]	; (148cc <ticker_cb+0x8c>)
   1488a:	4811      	ldr	r0, [pc, #68]	; (148d0 <ticker_cb+0x90>)
   1488c:	f44f 73f6 	mov.w	r3, #492	; 0x1ec
   14890:	f009 fb5f 	bl	1df52 <printk>
   14894:	4040      	eors	r0, r0
   14896:	f380 8811 	msr	BASEPRI, r0
   1489a:	f04f 0003 	mov.w	r0, #3
   1489e:	df02      	svc	2
   148a0:	e7e0      	b.n	14864 <ticker_cb+0x24>
	LL_ASSERT(!ret);
   148a2:	4a09      	ldr	r2, [pc, #36]	; (148c8 <ticker_cb+0x88>)
   148a4:	490b      	ldr	r1, [pc, #44]	; (148d4 <ticker_cb+0x94>)
   148a6:	480a      	ldr	r0, [pc, #40]	; (148d0 <ticker_cb+0x90>)
   148a8:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
   148ac:	f009 fb51 	bl	1df52 <printk>
   148b0:	4040      	eors	r0, r0
   148b2:	f380 8811 	msr	BASEPRI, r0
   148b6:	f04f 0003 	mov.w	r0, #3
   148ba:	df02      	svc	2
}
   148bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   148c0:	200032b4 	.word	0x200032b4
   148c4:	2000047c 	.word	0x2000047c
   148c8:	000243d0 	.word	0x000243d0
   148cc:	00024410 	.word	0x00024410
   148d0:	00023ff4 	.word	0x00023ff4
   148d4:	000242b0 	.word	0x000242b0
   148d8:	2000325c 	.word	0x2000325c

000148dc <ull_scan_init>:
}
   148dc:	2000      	movs	r0, #0
   148de:	4770      	bx	lr

000148e0 <ull_scan_disable>:
{
   148e0:	b530      	push	{r4, r5, lr}
   148e2:	b085      	sub	sp, #20
	volatile uint32_t ret_cb = TICKER_STATUS_BUSY;
   148e4:	2302      	movs	r3, #2
{
   148e6:	4605      	mov	r5, r0
	mark = ull_disable_mark(scan);
   148e8:	4608      	mov	r0, r1
{
   148ea:	460c      	mov	r4, r1
	volatile uint32_t ret_cb = TICKER_STATUS_BUSY;
   148ec:	9303      	str	r3, [sp, #12]
	mark = ull_disable_mark(scan);
   148ee:	f7ff fe3b 	bl	14568 <ull_disable_mark>
	LL_ASSERT(mark == scan);
   148f2:	4284      	cmp	r4, r0
   148f4:	d00c      	beq.n	14910 <ull_scan_disable+0x30>
   148f6:	4a2e      	ldr	r2, [pc, #184]	; (149b0 <ull_scan_disable+0xd0>)
   148f8:	492e      	ldr	r1, [pc, #184]	; (149b4 <ull_scan_disable+0xd4>)
   148fa:	482f      	ldr	r0, [pc, #188]	; (149b8 <ull_scan_disable+0xd8>)
   148fc:	f240 1375 	movw	r3, #373	; 0x175
   14900:	f009 fb27 	bl	1df52 <printk>
   14904:	4040      	eors	r0, r0
   14906:	f380 8811 	msr	BASEPRI, r0
   1490a:	f04f 0003 	mov.w	r0, #3
   1490e:	df02      	svc	2
			  TICKER_ID_SCAN_BASE + handle,
   14910:	1caa      	adds	r2, r5, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   14912:	ad03      	add	r5, sp, #12
   14914:	2103      	movs	r1, #3
   14916:	4b29      	ldr	r3, [pc, #164]	; (149bc <ull_scan_disable+0xdc>)
   14918:	9500      	str	r5, [sp, #0]
   1491a:	b2d2      	uxtb	r2, r2
   1491c:	2000      	movs	r0, #0
   1491e:	f7fd f84d 	bl	119bc <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   14922:	4629      	mov	r1, r5
   14924:	f7ff fe12 	bl	1454c <ull_ticker_status_take>
	if (ret) {
   14928:	bb50      	cbnz	r0, 14980 <ull_scan_disable+0xa0>
	ret = ull_disable(&scan->lll);
   1492a:	f104 001c 	add.w	r0, r4, #28
   1492e:	f7ff fe57 	bl	145e0 <ull_disable>
	LL_ASSERT(!ret);
   14932:	b9b8      	cbnz	r0, 14964 <ull_scan_disable+0x84>
	mark = ull_disable_unmark(scan);
   14934:	4620      	mov	r0, r4
   14936:	f7ff fe23 	bl	14580 <ull_disable_unmark>
	LL_ASSERT(mark == scan);
   1493a:	4284      	cmp	r4, r0
   1493c:	d00f      	beq.n	1495e <ull_scan_disable+0x7e>
   1493e:	4a1c      	ldr	r2, [pc, #112]	; (149b0 <ull_scan_disable+0xd0>)
   14940:	491c      	ldr	r1, [pc, #112]	; (149b4 <ull_scan_disable+0xd4>)
   14942:	481d      	ldr	r0, [pc, #116]	; (149b8 <ull_scan_disable+0xd8>)
   14944:	f240 1387 	movw	r3, #391	; 0x187
   14948:	f009 fb03 	bl	1df52 <printk>
   1494c:	4040      	eors	r0, r0
   1494e:	f380 8811 	msr	BASEPRI, r0
   14952:	f04f 0003 	mov.w	r0, #3
   14956:	df02      	svc	2
	return 0;
   14958:	2000      	movs	r0, #0
}
   1495a:	b005      	add	sp, #20
   1495c:	bd30      	pop	{r4, r5, pc}
	return 0;
   1495e:	2000      	movs	r0, #0
}
   14960:	b005      	add	sp, #20
   14962:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!ret);
   14964:	4a12      	ldr	r2, [pc, #72]	; (149b0 <ull_scan_disable+0xd0>)
   14966:	4916      	ldr	r1, [pc, #88]	; (149c0 <ull_scan_disable+0xe0>)
   14968:	4813      	ldr	r0, [pc, #76]	; (149b8 <ull_scan_disable+0xd8>)
   1496a:	f44f 73c2 	mov.w	r3, #388	; 0x184
   1496e:	f009 faf0 	bl	1df52 <printk>
   14972:	4040      	eors	r0, r0
   14974:	f380 8811 	msr	BASEPRI, r0
   14978:	f04f 0003 	mov.w	r0, #3
   1497c:	df02      	svc	2
   1497e:	e7d9      	b.n	14934 <ull_scan_disable+0x54>
		mark = ull_disable_unmark(scan);
   14980:	4620      	mov	r0, r4
   14982:	f7ff fdfd 	bl	14580 <ull_disable_unmark>
		LL_ASSERT(mark == scan);
   14986:	4284      	cmp	r4, r0
   14988:	d00f      	beq.n	149aa <ull_scan_disable+0xca>
   1498a:	4a09      	ldr	r2, [pc, #36]	; (149b0 <ull_scan_disable+0xd0>)
   1498c:	4909      	ldr	r1, [pc, #36]	; (149b4 <ull_scan_disable+0xd4>)
   1498e:	480a      	ldr	r0, [pc, #40]	; (149b8 <ull_scan_disable+0xd8>)
   14990:	f44f 73bf 	mov.w	r3, #382	; 0x17e
   14994:	f009 fadd 	bl	1df52 <printk>
   14998:	4040      	eors	r0, r0
   1499a:	f380 8811 	msr	BASEPRI, r0
   1499e:	f04f 0003 	mov.w	r0, #3
   149a2:	df02      	svc	2
		return BT_HCI_ERR_CMD_DISALLOWED;
   149a4:	200c      	movs	r0, #12
}
   149a6:	b005      	add	sp, #20
   149a8:	bd30      	pop	{r4, r5, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   149aa:	200c      	movs	r0, #12
}
   149ac:	b005      	add	sp, #20
   149ae:	bd30      	pop	{r4, r5, pc}
   149b0:	000243d0 	.word	0x000243d0
   149b4:	00024414 	.word	0x00024414
   149b8:	00023ff4 	.word	0x00023ff4
   149bc:	00014541 	.word	0x00014541
   149c0:	000242b0 	.word	0x000242b0

000149c4 <disable.constprop.0>:

static uint8_t disable(uint8_t handle)
   149c4:	b538      	push	{r3, r4, r5, lr}
	if (!scan || !scan->is_enabled) {
   149c6:	4c0d      	ldr	r4, [pc, #52]	; (149fc <disable.constprop.0+0x38>)
   149c8:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
   149cc:	07db      	lsls	r3, r3, #31
   149ce:	d501      	bpl.n	149d4 <disable.constprop.0+0x10>
	if (!scan) {
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

#if defined(CONFIG_BT_CENTRAL)
	if (scan->lll.conn) {
   149d0:	6a60      	ldr	r0, [r4, #36]	; 0x24
   149d2:	b110      	cbz	r0, 149da <disable.constprop.0+0x16>
		return BT_HCI_ERR_CMD_DISALLOWED;
   149d4:	250c      	movs	r5, #12
		ull_filter_adv_scan_state_cb(0);
	}
#endif

	return 0;
}
   149d6:	4628      	mov	r0, r5
   149d8:	bd38      	pop	{r3, r4, r5, pc}
	ret = ull_scan_disable(handle, scan);
   149da:	4621      	mov	r1, r4
   149dc:	f7ff ff80 	bl	148e0 <ull_scan_disable>
	if (ret) {
   149e0:	4605      	mov	r5, r0
   149e2:	2800      	cmp	r0, #0
   149e4:	d1f7      	bne.n	149d6 <disable.constprop.0+0x12>
	scan->is_enabled = 0U;
   149e6:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
   149ea:	f360 0300 	bfi	r3, r0, #0, #1
   149ee:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
		ull_filter_adv_scan_state_cb(0);
   149f2:	f003 fef3 	bl	187dc <ull_filter_adv_scan_state_cb>
}
   149f6:	4628      	mov	r0, r5
   149f8:	bd38      	pop	{r3, r4, r5, pc}
   149fa:	bf00      	nop
   149fc:	20003268 	.word	0x20003268

00014a00 <ll_scan_enable>:
	if (!enable) {
   14a00:	b380      	cbz	r0, 14a64 <ll_scan_enable+0x64>
{
   14a02:	b538      	push	{r3, r4, r5, lr}
	if (!scan || scan->is_enabled) {
   14a04:	4c1f      	ldr	r4, [pc, #124]	; (14a84 <ll_scan_enable+0x84>)
   14a06:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
   14a0a:	f013 0101 	ands.w	r1, r3, #1
   14a0e:	d135      	bne.n	14a7c <ll_scan_enable+0x7c>
	    (scan->own_addr_type & 0x1)) {
   14a10:	f3c3 0541 	ubfx	r5, r3, #1, #2
	if ((IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT) && is_coded_phy &&
   14a14:	079b      	lsls	r3, r3, #30
   14a16:	d50a      	bpl.n	14a2e <ll_scan_enable+0x2e>
		if (!mem_nz(ll_addr_get(1, NULL), BDADDR_SIZE)) {
   14a18:	2001      	movs	r0, #1
   14a1a:	f7fd f817 	bl	11a4c <ll_addr_get>
   14a1e:	2106      	movs	r1, #6
   14a20:	f7fb fb46 	bl	100b0 <mem_nz>
   14a24:	b360      	cbz	r0, 14a80 <ll_scan_enable+0x80>
   14a26:	f894 5048 	ldrb.w	r5, [r4, #72]	; 0x48
   14a2a:	f3c5 0541 	ubfx	r5, r5, #1, #2
	ull_filter_scan_update(lll->filter_policy);
   14a2e:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
   14a32:	f3c0 00c1 	ubfx	r0, r0, #3, #2
   14a36:	f003 fef3 	bl	18820 <ull_filter_scan_update>
	lll->rpa_gen = 0;
   14a3a:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
	if ((lll->type & 0x1) &&
   14a3e:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
	lll->rpa_gen = 0;
   14a42:	f36f 0300 	bfc	r3, #0, #1
	lll->rl_idx = FILTER_IDX_NONE;
   14a46:	21ff      	movs	r1, #255	; 0xff
	lll->rpa_gen = 0;
   14a48:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	if ((lll->type & 0x1) &&
   14a4c:	09d3      	lsrs	r3, r2, #7
	lll->rl_idx = FILTER_IDX_NONE;
   14a4e:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
	if ((lll->type & 0x1) &&
   14a52:	d002      	beq.n	14a5a <ll_scan_enable+0x5a>
   14a54:	3d02      	subs	r5, #2
   14a56:	2d01      	cmp	r5, #1
   14a58:	d906      	bls.n	14a68 <ll_scan_enable+0x68>
}
   14a5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		err = ull_scan_enable(scan);
   14a5e:	4809      	ldr	r0, [pc, #36]	; (14a84 <ll_scan_enable+0x84>)
   14a60:	f7ec bc5a 	b.w	1318 <ull_scan_enable>
		err = disable(SCAN_HANDLE_1M);
   14a64:	f7ff bfae 	b.w	149c4 <disable.constprop.0>
		ull_filter_rpa_update(false);
   14a68:	2000      	movs	r0, #0
   14a6a:	f003 fef3 	bl	18854 <ull_filter_rpa_update>
		lll->rpa_gen = 1;
   14a6e:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
   14a72:	f043 0301 	orr.w	r3, r3, #1
   14a76:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   14a7a:	e7ee      	b.n	14a5a <ll_scan_enable+0x5a>
		return BT_HCI_ERR_CMD_DISALLOWED;
   14a7c:	200c      	movs	r0, #12
}
   14a7e:	bd38      	pop	{r3, r4, r5, pc}
			return BT_HCI_ERR_INVALID_PARAM;
   14a80:	2012      	movs	r0, #18
}
   14a82:	bd38      	pop	{r3, r4, r5, pc}
   14a84:	20003268 	.word	0x20003268

00014a88 <ull_scan_reset>:
{
   14a88:	b508      	push	{r3, lr}
		(void)disable(handle);
   14a8a:	f7ff ff9b 	bl	149c4 <disable.constprop.0>
}
   14a8e:	2000      	movs	r0, #0
   14a90:	bd08      	pop	{r3, pc}
   14a92:	bf00      	nop

00014a94 <ull_scan_handle_get>:
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
   14a94:	4a04      	ldr	r2, [pc, #16]	; (14aa8 <ull_scan_handle_get+0x14>)
   14a96:	4b05      	ldr	r3, [pc, #20]	; (14aac <ull_scan_handle_get+0x18>)
   14a98:	1a80      	subs	r0, r0, r2
   14a9a:	0880      	lsrs	r0, r0, #2
   14a9c:	fba3 3000 	umull	r3, r0, r3, r0
}
   14aa0:	f3c0 0047 	ubfx	r0, r0, #1, #8
   14aa4:	4770      	bx	lr
   14aa6:	bf00      	nop
   14aa8:	20003268 	.word	0x20003268
   14aac:	1af286bd 	.word	0x1af286bd

00014ab0 <ull_scan_is_enabled_get>:
	if (handle >= BT_CTLR_SCAN_SET) {
   14ab0:	b938      	cbnz	r0, 14ac2 <ull_scan_is_enabled_get+0x12>
	if (!scan || !scan->is_enabled) {
   14ab2:	4805      	ldr	r0, [pc, #20]	; (14ac8 <ull_scan_is_enabled_get+0x18>)
   14ab4:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
	return &ll_scan[handle];
   14ab8:	f013 0f01 	tst.w	r3, #1
   14abc:	bf08      	it	eq
   14abe:	2000      	moveq	r0, #0
   14ac0:	4770      	bx	lr
		return NULL;
   14ac2:	2000      	movs	r0, #0
}
   14ac4:	4770      	bx	lr
   14ac6:	bf00      	nop
   14ac8:	20003268 	.word	0x20003268

00014acc <ull_scan_is_disabled_get>:
	if (!scan || scan->is_enabled) {
   14acc:	4a04      	ldr	r2, [pc, #16]	; (14ae0 <ull_scan_is_disabled_get+0x14>)
   14ace:	f892 3048 	ldrb.w	r3, [r2, #72]	; 0x48
   14ad2:	f003 0301 	and.w	r3, r3, #1
   14ad6:	4303      	orrs	r3, r0
}
   14ad8:	bf0c      	ite	eq
   14ada:	4610      	moveq	r0, r2
   14adc:	2000      	movne	r0, #0
   14ade:	4770      	bx	lr
   14ae0:	20003268 	.word	0x20003268

00014ae4 <ull_scan_is_enabled>:
	if (handle >= BT_CTLR_SCAN_SET) {
   14ae4:	b988      	cbnz	r0, 14b0a <ull_scan_is_enabled+0x26>
	if (!scan || !scan->is_enabled) {
   14ae6:	4a0a      	ldr	r2, [pc, #40]	; (14b10 <ull_scan_is_enabled+0x2c>)
   14ae8:	f892 3048 	ldrb.w	r3, [r2, #72]	; 0x48
   14aec:	f013 0001 	ands.w	r0, r3, #1
   14af0:	d00c      	beq.n	14b0c <ull_scan_is_enabled+0x28>
	return (((uint32_t)scan->is_enabled << scan->lll.type) |
   14af2:	f892 0032 	ldrb.w	r0, [r2, #50]	; 0x32
		(scan->lll.conn ? BIT(2) : 0) |
   14af6:	6a52      	ldr	r2, [r2, #36]	; 0x24
	return (((uint32_t)scan->is_enabled << scan->lll.type) |
   14af8:	f003 0301 	and.w	r3, r3, #1
   14afc:	09c0      	lsrs	r0, r0, #7
   14afe:	fa03 f000 	lsl.w	r0, r3, r0
		(scan->lll.conn ? BIT(2) : 0) |
   14b02:	b11a      	cbz	r2, 14b0c <ull_scan_is_enabled+0x28>
   14b04:	f040 0004 	orr.w	r0, r0, #4
   14b08:	4770      	bx	lr
		return 0;
   14b0a:	2000      	movs	r0, #0
}
   14b0c:	4770      	bx	lr
   14b0e:	bf00      	nop
   14b10:	20003268 	.word	0x20003268

00014b14 <ull_scan_filter_pol_get>:
	if (handle >= BT_CTLR_SCAN_SET) {
   14b14:	b950      	cbnz	r0, 14b2c <ull_scan_filter_pol_get+0x18>
	if (!scan || !scan->is_enabled) {
   14b16:	4b06      	ldr	r3, [pc, #24]	; (14b30 <ull_scan_filter_pol_get+0x1c>)
   14b18:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
   14b1c:	f010 0001 	ands.w	r0, r0, #1
   14b20:	d005      	beq.n	14b2e <ull_scan_filter_pol_get+0x1a>
	return scan->lll.filter_policy;
   14b22:	f893 0032 	ldrb.w	r0, [r3, #50]	; 0x32
   14b26:	f3c0 00c1 	ubfx	r0, r0, #3, #2
   14b2a:	4770      	bx	lr
		return 0;
   14b2c:	2000      	movs	r0, #0
}
   14b2e:	4770      	bx	lr
   14b30:	20003268 	.word	0x20003268

00014b34 <tx_ull_dequeue>:
{
   14b34:	b410      	push	{r4}
   14b36:	e9d0 2462 	ldrd	r2, r4, [r0, #392]	; 0x188
   14b3a:	4603      	mov	r3, r0
   14b3c:	4608      	mov	r0, r1
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   14b3e:	b164      	cbz	r4, 14b5a <tx_ull_dequeue+0x26>
	if (conn->tx_head == conn->tx_ctrl) {
   14b40:	4294      	cmp	r4, r2
   14b42:	d027      	beq.n	14b94 <tx_ull_dequeue+0x60>
		if (conn->tx_head == conn->tx_data) {
   14b44:	f8d3 1194 	ldr.w	r1, [r3, #404]	; 0x194
   14b48:	4291      	cmp	r1, r2
   14b4a:	d018      	beq.n	14b7e <tx_ull_dequeue+0x4a>
		conn->tx_head = conn->tx_head->next;
   14b4c:	6812      	ldr	r2, [r2, #0]
   14b4e:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
		tx->next = NULL;
   14b52:	2300      	movs	r3, #0
}
   14b54:	bc10      	pop	{r4}
		tx->next = NULL;
   14b56:	6003      	str	r3, [r0, #0]
}
   14b58:	4770      	bx	lr
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   14b5a:	f8d3 1194 	ldr.w	r1, [r3, #404]	; 0x194
   14b5e:	4291      	cmp	r1, r2
   14b60:	d023      	beq.n	14baa <tx_ull_dequeue+0x76>
		if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   14b62:	7911      	ldrb	r1, [r2, #4]
   14b64:	f001 0103 	and.w	r1, r1, #3
   14b68:	2903      	cmp	r1, #3
   14b6a:	d00d      	beq.n	14b88 <tx_ull_dequeue+0x54>
		conn->tx_head = conn->tx_head->next;
   14b6c:	6812      	ldr	r2, [r2, #0]
   14b6e:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
			conn->tx_ctrl = NULL;
   14b72:	2200      	movs	r2, #0
			conn->tx_ctrl_last = NULL;
   14b74:	e9c3 2263 	strd	r2, r2, [r3, #396]	; 0x18c
}
   14b78:	bc10      	pop	{r4}
		tx->next = tx;
   14b7a:	6000      	str	r0, [r0, #0]
}
   14b7c:	4770      	bx	lr
   14b7e:	4611      	mov	r1, r2
			conn->tx_data = conn->tx_data->next;
   14b80:	6809      	ldr	r1, [r1, #0]
   14b82:	f8c3 1194 	str.w	r1, [r3, #404]	; 0x194
   14b86:	e7e1      	b.n	14b4c <tx_ull_dequeue+0x18>
				((pdu_data_tx->llctrl.opcode !=
   14b88:	79d1      	ldrb	r1, [r2, #7]
		if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   14b8a:	2903      	cmp	r1, #3
   14b8c:	d0de      	beq.n	14b4c <tx_ull_dequeue+0x18>
				  PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   14b8e:	290a      	cmp	r1, #10
   14b90:	d1ec      	bne.n	14b6c <tx_ull_dequeue+0x38>
   14b92:	e7db      	b.n	14b4c <tx_ull_dequeue+0x18>
   14b94:	f8d3 1190 	ldr.w	r1, [r3, #400]	; 0x190
		conn->tx_head = conn->tx_head->next;
   14b98:	6812      	ldr	r2, [r2, #0]
   14b9a:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   14b9e:	42a1      	cmp	r1, r4
			conn->tx_ctrl = conn->tx_head;
   14ba0:	bf18      	it	ne
   14ba2:	f8c3 218c 	strne.w	r2, [r3, #396]	; 0x18c
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   14ba6:	d1e7      	bne.n	14b78 <tx_ull_dequeue+0x44>
   14ba8:	e7e3      	b.n	14b72 <tx_ull_dequeue+0x3e>
	if (conn->tx_head == conn->tx_ctrl) {
   14baa:	2a00      	cmp	r2, #0
   14bac:	d1e8      	bne.n	14b80 <tx_ull_dequeue+0x4c>
   14bae:	f8d3 1190 	ldr.w	r1, [r3, #400]	; 0x190
   14bb2:	4614      	mov	r4, r2
   14bb4:	e7f0      	b.n	14b98 <tx_ull_dequeue+0x64>
   14bb6:	bf00      	nop

00014bb8 <calc_eff_time>:
		uint16_t time = PKT_US(max_octets, phy);
   14bb8:	074b      	lsls	r3, r1, #29
   14bba:	d50c      	bpl.n	14bd6 <calc_eff_time+0x1e>
   14bbc:	0181      	lsls	r1, r0, #6
		eff_time = MIN(eff_time, default_time);
   14bbe:	f501 7074 	add.w	r0, r1, #976	; 0x3d0
   14bc2:	4290      	cmp	r0, r2
   14bc4:	bf28      	it	cs
   14bc6:	4610      	movcs	r0, r2
		eff_time = MAX(eff_time, PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, phy));
   14bc8:	f44f 6129 	mov.w	r1, #2704	; 0xa90
   14bcc:	4288      	cmp	r0, r1
   14bce:	bf38      	it	cc
   14bd0:	4608      	movcc	r0, r1
	}
   14bd2:	b280      	uxth	r0, r0
   14bd4:	4770      	bx	lr
	{
   14bd6:	b410      	push	{r4}
		uint16_t time = PKT_US(max_octets, phy);
   14bd8:	f100 040d 	add.w	r4, r0, #13
   14bdc:	f001 0003 	and.w	r0, r1, #3
   14be0:	4404      	add	r4, r0
   14be2:	f3c1 0140 	ubfx	r1, r1, #1, #1
   14be6:	00e4      	lsls	r4, r4, #3
   14be8:	40cc      	lsrs	r4, r1
		eff_time = MAX(PDU_DC_PAYLOAD_TIME_MIN, time);
   14bea:	b2a3      	uxth	r3, r4
   14bec:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
		eff_time = MAX(eff_time, PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, phy));
   14bf0:	f100 0028 	add.w	r0, r0, #40	; 0x28
		eff_time = MAX(PDU_DC_PAYLOAD_TIME_MIN, time);
   14bf4:	bf38      	it	cc
   14bf6:	f44f 73a4 	movcc.w	r3, #328	; 0x148
		eff_time = MAX(eff_time, PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, phy));
   14bfa:	00c4      	lsls	r4, r0, #3
		eff_time = MIN(eff_time, default_time);
   14bfc:	429a      	cmp	r2, r3
		eff_time = MAX(eff_time, PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, phy));
   14bfe:	fa24 f101 	lsr.w	r1, r4, r1
		eff_time = MIN(eff_time, default_time);
   14c02:	bf28      	it	cs
   14c04:	461a      	movcs	r2, r3
		eff_time = MAX(eff_time, PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, phy));
   14c06:	428a      	cmp	r2, r1
		eff_time = MIN(eff_time, default_time);
   14c08:	4610      	mov	r0, r2
		eff_time = MAX(eff_time, PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, phy));
   14c0a:	bf38      	it	cc
   14c0c:	4608      	movcc	r0, r1
	}
   14c0e:	b280      	uxth	r0, r0
   14c10:	bc10      	pop	{r4}
   14c12:	4770      	bx	lr

00014c14 <init_reset>:
{
   14c14:	b538      	push	{r3, r4, r5, lr}
	mem_init(conn_pool, sizeof(struct ll_conn),
   14c16:	4814      	ldr	r0, [pc, #80]	; (14c68 <init_reset+0x54>)
   14c18:	4b14      	ldr	r3, [pc, #80]	; (14c6c <init_reset+0x58>)
   14c1a:	2204      	movs	r2, #4
   14c1c:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   14c20:	f7fb f9ce 	bl	ffc0 <mem_init>
	mem_init(mem_conn_tx.pool, CONN_TX_BUF_SIZE, CONFIG_BT_CTLR_TX_BUFFERS,
   14c24:	4b12      	ldr	r3, [pc, #72]	; (14c70 <init_reset+0x5c>)
   14c26:	220a      	movs	r2, #10
   14c28:	1d18      	adds	r0, r3, #4
   14c2a:	f44f 7182 	mov.w	r1, #260	; 0x104
   14c2e:	f7fb f9c7 	bl	ffc0 <mem_init>
	mem_init(mem_conn_tx_ctrl.pool, CONN_TX_CTRL_BUF_SIZE,
   14c32:	4b10      	ldr	r3, [pc, #64]	; (14c74 <init_reset+0x60>)
   14c34:	2210      	movs	r2, #16
   14c36:	1d18      	adds	r0, r3, #4
   14c38:	2120      	movs	r1, #32
   14c3a:	f7fb f9c1 	bl	ffc0 <mem_init>
	mem_init(mem_link_tx.pool, sizeof(memq_link_t),
   14c3e:	4b0e      	ldr	r3, [pc, #56]	; (14c78 <init_reset+0x64>)
   14c40:	221a      	movs	r2, #26
   14c42:	1d18      	adds	r0, r3, #4
   14c44:	2108      	movs	r1, #8
   14c46:	f7fb f9bb 	bl	ffc0 <mem_init>
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   14c4a:	4b0c      	ldr	r3, [pc, #48]	; (14c7c <init_reset+0x68>)
	default_phy_tx |= BIT(2);
   14c4c:	490c      	ldr	r1, [pc, #48]	; (14c80 <init_reset+0x6c>)
	default_phy_rx |= BIT(2);
   14c4e:	4a0d      	ldr	r2, [pc, #52]	; (14c84 <init_reset+0x70>)
	default_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   14c50:	480d      	ldr	r0, [pc, #52]	; (14c88 <init_reset+0x74>)
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   14c52:	251b      	movs	r5, #27
   14c54:	801d      	strh	r5, [r3, #0]
	default_phy_tx |= BIT(2);
   14c56:	2305      	movs	r3, #5
	default_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   14c58:	f44f 74a4 	mov.w	r4, #328	; 0x148
	default_phy_tx |= BIT(2);
   14c5c:	700b      	strb	r3, [r1, #0]
	default_phy_rx |= BIT(2);
   14c5e:	7013      	strb	r3, [r2, #0]
	default_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   14c60:	8004      	strh	r4, [r0, #0]
}
   14c62:	2000      	movs	r0, #0
   14c64:	bd38      	pop	{r3, r4, r5, pc}
   14c66:	bf00      	nop
   14c68:	20006300 	.word	0x20006300
   14c6c:	200052fc 	.word	0x200052fc
   14c70:	200069dc 	.word	0x200069dc
   14c74:	20007408 	.word	0x20007408
   14c78:	2000760c 	.word	0x2000760c
   14c7c:	200096bc 	.word	0x200096bc
   14c80:	20009c3c 	.word	0x20009c3c
   14c84:	20009c3b 	.word	0x20009c3b
   14c88:	200096be 	.word	0x200096be

00014c8c <ctrl_tx_pause_enqueue>:
{
   14c8c:	b538      	push	{r3, r4, r5, lr}
			conn->tx_head &&
   14c8e:	f8d0 3188 	ldr.w	r3, [r0, #392]	; 0x188
{
   14c92:	4604      	mov	r4, r0
   14c94:	460d      	mov	r5, r1
	if (
   14c96:	b11b      	cbz	r3, 14ca0 <ctrl_tx_pause_enqueue+0x14>
			!conn->llcp_enc.pause_tx &&
   14c98:	f890 112a 	ldrb.w	r1, [r0, #298]	; 0x12a
			conn->tx_head &&
   14c9c:	0788      	lsls	r0, r1, #30
   14c9e:	d50d      	bpl.n	14cbc <ctrl_tx_pause_enqueue+0x30>
		if (!conn->tx_ctrl) {
   14ca0:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
   14ca4:	b301      	cbz	r1, 14ce8 <ctrl_tx_pause_enqueue+0x5c>
			LL_ASSERT(!pause);
   14ca6:	bb4a      	cbnz	r2, 14cfc <ctrl_tx_pause_enqueue+0x70>
	tx->next = conn->tx_ctrl_last->next;
   14ca8:	f8d4 3190 	ldr.w	r3, [r4, #400]	; 0x190
   14cac:	681a      	ldr	r2, [r3, #0]
   14cae:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
   14cb0:	601d      	str	r5, [r3, #0]
	conn->tx_ctrl_last = tx;
   14cb2:	f8c4 5190 	str.w	r5, [r4, #400]	; 0x190
   14cb6:	682b      	ldr	r3, [r5, #0]
	if (!tx->next) {
   14cb8:	b19b      	cbz	r3, 14ce2 <ctrl_tx_pause_enqueue+0x56>
}
   14cba:	bd38      	pop	{r3, r4, r5, pc}
			!conn->llcp_phy.pause_tx &&
   14cbc:	f894 1183 	ldrb.w	r1, [r4, #387]	; 0x183
   14cc0:	07c9      	lsls	r1, r1, #31
   14cc2:	d4ed      	bmi.n	14ca0 <ctrl_tx_pause_enqueue+0x14>
		if (conn->tx_head == conn->tx_data) {
   14cc4:	f8d4 1194 	ldr.w	r1, [r4, #404]	; 0x194
   14cc8:	428b      	cmp	r3, r1
			conn->tx_data = conn->tx_data->next;
   14cca:	bf04      	itt	eq
   14ccc:	6819      	ldreq	r1, [r3, #0]
   14cce:	f8c4 1194 	streq.w	r1, [r4, #404]	; 0x194
		if (!conn->tx_ctrl) {
   14cd2:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
   14cd6:	b1f9      	cbz	r1, 14d18 <ctrl_tx_pause_enqueue+0x8c>
			LL_ASSERT(!pause);
   14cd8:	2a00      	cmp	r2, #0
   14cda:	d0e5      	beq.n	14ca8 <ctrl_tx_pause_enqueue+0x1c>
   14cdc:	f640 3339 	movw	r3, #2873	; 0xb39
   14ce0:	e00e      	b.n	14d00 <ctrl_tx_pause_enqueue+0x74>
		conn->tx_data_last = tx;
   14ce2:	f8c4 5198 	str.w	r5, [r4, #408]	; 0x198
}
   14ce6:	bd38      	pop	{r3, r4, r5, pc}
			tx->next = conn->tx_head;
   14ce8:	602b      	str	r3, [r5, #0]
			conn->tx_head = tx;
   14cea:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
			if (!pause) {
   14cee:	2a00      	cmp	r2, #0
   14cf0:	d1e2      	bne.n	14cb8 <ctrl_tx_pause_enqueue+0x2c>
				conn->tx_ctrl_last = tx;
   14cf2:	e9c4 5563 	strd	r5, r5, [r4, #396]	; 0x18c
	if (!tx->next) {
   14cf6:	2b00      	cmp	r3, #0
   14cf8:	d1df      	bne.n	14cba <ctrl_tx_pause_enqueue+0x2e>
   14cfa:	e7f2      	b.n	14ce2 <ctrl_tx_pause_enqueue+0x56>
			LL_ASSERT(!pause);
   14cfc:	f640 334b 	movw	r3, #2891	; 0xb4b
   14d00:	4a0b      	ldr	r2, [pc, #44]	; (14d30 <ctrl_tx_pause_enqueue+0xa4>)
   14d02:	490c      	ldr	r1, [pc, #48]	; (14d34 <ctrl_tx_pause_enqueue+0xa8>)
   14d04:	480c      	ldr	r0, [pc, #48]	; (14d38 <ctrl_tx_pause_enqueue+0xac>)
   14d06:	f009 f924 	bl	1df52 <printk>
   14d0a:	4040      	eors	r0, r0
   14d0c:	f380 8811 	msr	BASEPRI, r0
   14d10:	f04f 0003 	mov.w	r0, #3
   14d14:	df02      	svc	2
   14d16:	e7c7      	b.n	14ca8 <ctrl_tx_pause_enqueue+0x1c>
			tx->next = conn->tx_head->next;
   14d18:	6819      	ldr	r1, [r3, #0]
   14d1a:	6029      	str	r1, [r5, #0]
			conn->tx_head->next = tx;
   14d1c:	601d      	str	r5, [r3, #0]
			if (!pause) {
   14d1e:	2a00      	cmp	r2, #0
   14d20:	d1c9      	bne.n	14cb6 <ctrl_tx_pause_enqueue+0x2a>
				conn->tx_ctrl_last = tx;
   14d22:	e9c4 5563 	strd	r5, r5, [r4, #396]	; 0x18c
   14d26:	682b      	ldr	r3, [r5, #0]
	if (!tx->next) {
   14d28:	2b00      	cmp	r3, #0
   14d2a:	d1c6      	bne.n	14cba <ctrl_tx_pause_enqueue+0x2e>
   14d2c:	e7d9      	b.n	14ce2 <ctrl_tx_pause_enqueue+0x56>
   14d2e:	bf00      	nop
   14d30:	00024438 	.word	0x00024438
   14d34:	00024478 	.word	0x00024478
   14d38:	00023ff4 	.word	0x00023ff4

00014d3c <tx_lll_flush>:
{
   14d3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct ll_conn *conn = (void *)HDR_LLL2EVT(param);
   14d40:	f8d0 8000 	ldr.w	r8, [r0]
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   14d44:	4935      	ldr	r1, [pc, #212]	; (14e1c <tx_lll_flush+0xe0>)
{
   14d46:	b083      	sub	sp, #12
   14d48:	4605      	mov	r5, r0
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   14d4a:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   14d4e:	4640      	mov	r0, r8
   14d50:	f7fb f99a 	bl	10088 <mem_index_get>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   14d54:	f105 0630 	add.w	r6, r5, #48	; 0x30
	lll_conn_flush(handle, lll);
   14d58:	4629      	mov	r1, r5
   14d5a:	f005 fd65 	bl	1a828 <lll_conn_flush>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   14d5e:	6b68      	ldr	r0, [r5, #52]	; 0x34
   14d60:	4631      	mov	r1, r6
   14d62:	aa01      	add	r2, sp, #4
   14d64:	f7fb f9ce 	bl	10104 <memq_dequeue>
	while (link) {
   14d68:	b340      	cbz	r0, 14dbc <tx_lll_flush+0x80>
   14d6a:	4c2d      	ldr	r4, [pc, #180]	; (14e20 <tx_lll_flush+0xe4>)
		lll_tx->handle = 0xFFFF;
   14d6c:	f64f 77ff 	movw	r7, #65535	; 0xffff
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   14d70:	f104 0904 	add.w	r9, r4, #4
		idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   14d74:	78e1      	ldrb	r1, [r4, #3]
	if (last == count) {
   14d76:	f894 c001 	ldrb.w	ip, [r4, #1]
   14d7a:	78a2      	ldrb	r2, [r4, #2]
	last = last + 1;
   14d7c:	1c4b      	adds	r3, r1, #1
   14d7e:	b2db      	uxtb	r3, r3
		last = 0U;
   14d80:	459c      	cmp	ip, r3
   14d82:	bf08      	it	eq
   14d84:	2300      	moveq	r3, #0
	if (last == first) {
   14d86:	429a      	cmp	r2, r3
   14d88:	d038      	beq.n	14dfc <tx_lll_flush+0xc0>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   14d8a:	7822      	ldrb	r2, [r4, #0]
   14d8c:	fb12 f201 	smulbb	r2, r2, r1
		LL_ASSERT(lll_tx);
   14d90:	eb19 0e02 	adds.w	lr, r9, r2
   14d94:	d032      	beq.n	14dfc <tx_lll_flush+0xc0>
		lll_tx->node = tx;
   14d96:	f8dd c004 	ldr.w	ip, [sp, #4]
		lll_tx->handle = 0xFFFF;
   14d9a:	f829 7002 	strh.w	r7, [r9, r2]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
   14d9e:	f8dc 1000 	ldr.w	r1, [ip]
		lll_tx->node = tx;
   14da2:	f8ce c004 	str.w	ip, [lr, #4]
		link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   14da6:	aa01      	add	r2, sp, #4
		link->next = tx->next; /* Indicates ctrl pool or data pool */
   14da8:	6001      	str	r1, [r0, #0]
		tx->next = link;
   14daa:	f8cc 0000 	str.w	r0, [ip]
		link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   14dae:	4631      	mov	r1, r6
   14db0:	6b68      	ldr	r0, [r5, #52]	; 0x34
	*last = idx; /* Commit: Update write index */
   14db2:	70e3      	strb	r3, [r4, #3]
   14db4:	f7fb f9a6 	bl	10104 <memq_dequeue>
	while (link) {
   14db8:	2800      	cmp	r0, #0
   14dba:	d1db      	bne.n	14d74 <tx_lll_flush+0x38>
	LL_ASSERT(rx->hdr.link);
   14dbc:	f8d8 0108 	ldr.w	r0, [r8, #264]	; 0x108
	rx = (void *)&conn->llcp_terminate.node_rx;
   14dc0:	f508 7484 	add.w	r4, r8, #264	; 0x108
	LL_ASSERT(rx->hdr.link);
   14dc4:	b150      	cbz	r0, 14ddc <tx_lll_flush+0xa0>
	rx->hdr.link = NULL;
   14dc6:	2300      	movs	r3, #0
	ull_rx_put(link, rx);
   14dc8:	4621      	mov	r1, r4
	rx->hdr.link = NULL;
   14dca:	f8c8 3108 	str.w	r3, [r8, #264]	; 0x108
	ull_rx_put(link, rx);
   14dce:	f7ff fc7b 	bl	146c8 <ull_rx_put>
	ull_rx_sched();
   14dd2:	f7ff fc89 	bl	146e8 <ull_rx_sched>
}
   14dd6:	b003      	add	sp, #12
   14dd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(rx->hdr.link);
   14ddc:	4a11      	ldr	r2, [pc, #68]	; (14e24 <tx_lll_flush+0xe8>)
   14dde:	4912      	ldr	r1, [pc, #72]	; (14e28 <tx_lll_flush+0xec>)
   14de0:	4812      	ldr	r0, [pc, #72]	; (14e2c <tx_lll_flush+0xf0>)
   14de2:	f640 23de 	movw	r3, #2782	; 0xade
   14de6:	f009 f8b4 	bl	1df52 <printk>
   14dea:	4040      	eors	r0, r0
   14dec:	f380 8811 	msr	BASEPRI, r0
   14df0:	f04f 0003 	mov.w	r0, #3
   14df4:	df02      	svc	2
   14df6:	f8d8 0108 	ldr.w	r0, [r8, #264]	; 0x108
   14dfa:	e7e4      	b.n	14dc6 <tx_lll_flush+0x8a>
		LL_ASSERT(lll_tx);
   14dfc:	4a09      	ldr	r2, [pc, #36]	; (14e24 <tx_lll_flush+0xe8>)
   14dfe:	490c      	ldr	r1, [pc, #48]	; (14e30 <tx_lll_flush+0xf4>)
   14e00:	480a      	ldr	r0, [pc, #40]	; (14e2c <tx_lll_flush+0xf0>)
   14e02:	f640 23ca 	movw	r3, #2762	; 0xaca
   14e06:	f009 f8a4 	bl	1df52 <printk>
   14e0a:	4040      	eors	r0, r0
   14e0c:	f380 8811 	msr	BASEPRI, r0
   14e10:	f04f 0003 	mov.w	r0, #3
   14e14:	df02      	svc	2
		lll_tx->handle = 0xFFFF;
   14e16:	2300      	movs	r3, #0
   14e18:	801b      	strh	r3, [r3, #0]
   14e1a:	deff      	udf	#255	; 0xff
   14e1c:	20006300 	.word	0x20006300
   14e20:	200004a0 	.word	0x200004a0
   14e24:	00024438 	.word	0x00024438
   14e28:	00024488 	.word	0x00024488
   14e2c:	00023ff4 	.word	0x00023ff4
   14e30:	00024480 	.word	0x00024480

00014e34 <ticker_start_conn_op_cb>:
{
   14e34:	b510      	push	{r4, lr}
   14e36:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   14e38:	b990      	cbnz	r0, 14e60 <ticker_start_conn_op_cb+0x2c>
	void *p = ull_update_unmark(param);
   14e3a:	4620      	mov	r0, r4
   14e3c:	f7ff fbbe 	bl	145bc <ull_update_unmark>
	LL_ASSERT(p == param);
   14e40:	4284      	cmp	r4, r0
   14e42:	d00c      	beq.n	14e5e <ticker_start_conn_op_cb+0x2a>
   14e44:	4a0d      	ldr	r2, [pc, #52]	; (14e7c <ticker_start_conn_op_cb+0x48>)
   14e46:	490e      	ldr	r1, [pc, #56]	; (14e80 <ticker_start_conn_op_cb+0x4c>)
   14e48:	480e      	ldr	r0, [pc, #56]	; (14e84 <ticker_start_conn_op_cb+0x50>)
   14e4a:	f640 2347 	movw	r3, #2631	; 0xa47
   14e4e:	f009 f880 	bl	1df52 <printk>
   14e52:	4040      	eors	r0, r0
   14e54:	f380 8811 	msr	BASEPRI, r0
   14e58:	f04f 0003 	mov.w	r0, #3
   14e5c:	df02      	svc	2
}
   14e5e:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   14e60:	4a06      	ldr	r2, [pc, #24]	; (14e7c <ticker_start_conn_op_cb+0x48>)
   14e62:	4909      	ldr	r1, [pc, #36]	; (14e88 <ticker_start_conn_op_cb+0x54>)
   14e64:	4807      	ldr	r0, [pc, #28]	; (14e84 <ticker_start_conn_op_cb+0x50>)
   14e66:	f640 2343 	movw	r3, #2627	; 0xa43
   14e6a:	f009 f872 	bl	1df52 <printk>
   14e6e:	4040      	eors	r0, r0
   14e70:	f380 8811 	msr	BASEPRI, r0
   14e74:	f04f 0003 	mov.w	r0, #3
   14e78:	df02      	svc	2
   14e7a:	e7de      	b.n	14e3a <ticker_start_conn_op_cb+0x6>
   14e7c:	00024438 	.word	0x00024438
   14e80:	000244a4 	.word	0x000244a4
   14e84:	00023ff4 	.word	0x00023ff4
   14e88:	00024498 	.word	0x00024498

00014e8c <ticker_stop_conn_op_cb>:
{
   14e8c:	b510      	push	{r4, lr}
   14e8e:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   14e90:	b990      	cbnz	r0, 14eb8 <ticker_stop_conn_op_cb+0x2c>
	void *p = ull_update_mark(param);
   14e92:	4620      	mov	r0, r4
   14e94:	f7ff fb86 	bl	145a4 <ull_update_mark>
	LL_ASSERT(p == param);
   14e98:	4284      	cmp	r4, r0
   14e9a:	d00c      	beq.n	14eb6 <ticker_stop_conn_op_cb+0x2a>
   14e9c:	4a0d      	ldr	r2, [pc, #52]	; (14ed4 <ticker_stop_conn_op_cb+0x48>)
   14e9e:	490e      	ldr	r1, [pc, #56]	; (14ed8 <ticker_stop_conn_op_cb+0x4c>)
   14ea0:	480e      	ldr	r0, [pc, #56]	; (14edc <ticker_stop_conn_op_cb+0x50>)
   14ea2:	f640 233e 	movw	r3, #2622	; 0xa3e
   14ea6:	f009 f854 	bl	1df52 <printk>
   14eaa:	4040      	eors	r0, r0
   14eac:	f380 8811 	msr	BASEPRI, r0
   14eb0:	f04f 0003 	mov.w	r0, #3
   14eb4:	df02      	svc	2
}
   14eb6:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   14eb8:	4a06      	ldr	r2, [pc, #24]	; (14ed4 <ticker_stop_conn_op_cb+0x48>)
   14eba:	4909      	ldr	r1, [pc, #36]	; (14ee0 <ticker_stop_conn_op_cb+0x54>)
   14ebc:	4807      	ldr	r0, [pc, #28]	; (14edc <ticker_stop_conn_op_cb+0x50>)
   14ebe:	f640 233a 	movw	r3, #2618	; 0xa3a
   14ec2:	f009 f846 	bl	1df52 <printk>
   14ec6:	4040      	eors	r0, r0
   14ec8:	f380 8811 	msr	BASEPRI, r0
   14ecc:	f04f 0003 	mov.w	r0, #3
   14ed0:	df02      	svc	2
   14ed2:	e7de      	b.n	14e92 <ticker_stop_conn_op_cb+0x6>
   14ed4:	00024438 	.word	0x00024438
   14ed8:	000244a4 	.word	0x000244a4
   14edc:	00023ff4 	.word	0x00023ff4
   14ee0:	00024498 	.word	0x00024498

00014ee4 <ticker_update_conn_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   14ee4:	b900      	cbnz	r0, 14ee8 <ticker_update_conn_op_cb+0x4>
   14ee6:	4770      	bx	lr
{
   14ee8:	b510      	push	{r4, lr}
   14eea:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   14eec:	f7ff fb72 	bl	145d4 <ull_update_mark_get>
   14ef0:	4284      	cmp	r4, r0
   14ef2:	d010      	beq.n	14f16 <ticker_update_conn_op_cb+0x32>
   14ef4:	f7ff fb50 	bl	14598 <ull_disable_mark_get>
   14ef8:	4284      	cmp	r4, r0
   14efa:	d00c      	beq.n	14f16 <ticker_update_conn_op_cb+0x32>
   14efc:	4a06      	ldr	r2, [pc, #24]	; (14f18 <ticker_update_conn_op_cb+0x34>)
   14efe:	4907      	ldr	r1, [pc, #28]	; (14f1c <ticker_update_conn_op_cb+0x38>)
   14f00:	4807      	ldr	r0, [pc, #28]	; (14f20 <ticker_update_conn_op_cb+0x3c>)
   14f02:	f640 2333 	movw	r3, #2611	; 0xa33
   14f06:	f009 f824 	bl	1df52 <printk>
   14f0a:	4040      	eors	r0, r0
   14f0c:	f380 8811 	msr	BASEPRI, r0
   14f10:	f04f 0003 	mov.w	r0, #3
   14f14:	df02      	svc	2
}
   14f16:	bd10      	pop	{r4, pc}
   14f18:	00024438 	.word	0x00024438
   14f1c:	000244b0 	.word	0x000244b0
   14f20:	00023ff4 	.word	0x00023ff4

00014f24 <ticker_op_stop_cb>:
{
   14f24:	b510      	push	{r4, lr}
   14f26:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   14f28:	b9b0      	cbnz	r0, 14f58 <ticker_op_stop_cb+0x34>
	mfy.param = param;
   14f2a:	4b12      	ldr	r3, [pc, #72]	; (14f74 <ticker_op_stop_cb+0x50>)
	retval = mayfly_enqueue(TICKER_USER_ID_ULL_LOW, TICKER_USER_ID_LLL, 0,
   14f2c:	2200      	movs	r2, #0
   14f2e:	4611      	mov	r1, r2
   14f30:	2002      	movs	r0, #2
	mfy.param = param;
   14f32:	609c      	str	r4, [r3, #8]
	retval = mayfly_enqueue(TICKER_USER_ID_ULL_LOW, TICKER_USER_ID_LLL, 0,
   14f34:	f7fb f94a 	bl	101cc <mayfly_enqueue>
	LL_ASSERT(!retval);
   14f38:	b900      	cbnz	r0, 14f3c <ticker_op_stop_cb+0x18>
}
   14f3a:	bd10      	pop	{r4, pc}
	LL_ASSERT(!retval);
   14f3c:	4a0e      	ldr	r2, [pc, #56]	; (14f78 <ticker_op_stop_cb+0x54>)
   14f3e:	490f      	ldr	r1, [pc, #60]	; (14f7c <ticker_op_stop_cb+0x58>)
   14f40:	480f      	ldr	r0, [pc, #60]	; (14f80 <ticker_op_stop_cb+0x5c>)
   14f42:	f640 2357 	movw	r3, #2647	; 0xa57
   14f46:	f009 f804 	bl	1df52 <printk>
   14f4a:	4040      	eors	r0, r0
   14f4c:	f380 8811 	msr	BASEPRI, r0
   14f50:	f04f 0003 	mov.w	r0, #3
   14f54:	df02      	svc	2
}
   14f56:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   14f58:	4a07      	ldr	r2, [pc, #28]	; (14f78 <ticker_op_stop_cb+0x54>)
   14f5a:	490a      	ldr	r1, [pc, #40]	; (14f84 <ticker_op_stop_cb+0x60>)
   14f5c:	4808      	ldr	r0, [pc, #32]	; (14f80 <ticker_op_stop_cb+0x5c>)
   14f5e:	f44f 6325 	mov.w	r3, #2640	; 0xa50
   14f62:	f008 fff6 	bl	1df52 <printk>
   14f66:	4040      	eors	r0, r0
   14f68:	f380 8811 	msr	BASEPRI, r0
   14f6c:	f04f 0003 	mov.w	r0, #3
   14f70:	df02      	svc	2
   14f72:	e7da      	b.n	14f2a <ticker_op_stop_cb+0x6>
   14f74:	200005d8 	.word	0x200005d8
   14f78:	00024438 	.word	0x00024438
   14f7c:	000242f0 	.word	0x000242f0
   14f80:	00023ff4 	.word	0x00023ff4
   14f84:	00024498 	.word	0x00024498

00014f88 <reject_ext_ind_send.isra.0>:

		return 0;
	}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ) || defined(CONFIG_BT_CTLR_PHY)
	static int reject_ext_ind_send(struct ll_conn *conn, struct node_rx_pdu *rx,
   14f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14f8c:	4605      	mov	r5, r0
	{
		struct pdu_data *pdu_ctrl_tx;
		struct node_tx *tx;

		/* acquire tx mem */
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   14f8e:	4826      	ldr	r0, [pc, #152]	; (15028 <reject_ext_ind_send.isra.0+0xa0>)
	static int reject_ext_ind_send(struct ll_conn *conn, struct node_rx_pdu *rx,
   14f90:	460e      	mov	r6, r1
   14f92:	4690      	mov	r8, r2
   14f94:	461f      	mov	r7, r3
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   14f96:	f7fb f841 	bl	1001c <mem_acquire>
		if (!tx) {
   14f9a:	2800      	cmp	r0, #0
   14f9c:	d041      	beq.n	15022 <reject_ext_ind_send.isra.0+0x9a>
			return -ENOBUFS;
		}

		pdu_ctrl_tx = (void *)tx->pdu;
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   14f9e:	2303      	movs	r3, #3
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   14fa0:	7904      	ldrb	r4, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   14fa2:	7143      	strb	r3, [r0, #5]
			conn->tx_head &&
   14fa4:	f8d5 2188 	ldr.w	r2, [r5, #392]	; 0x188
			sizeof(struct pdu_data_llctrl_reject_ext_ind);
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
		pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
   14fa8:	f880 8008 	strb.w	r8, [r0, #8]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   14fac:	4323      	orrs	r3, r4
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   14fae:	2111      	movs	r1, #17
		pdu_ctrl_tx->llctrl.reject_ext_ind.error_code = error_code;
   14fb0:	7247      	strb	r7, [r0, #9]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   14fb2:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   14fb4:	71c1      	strb	r1, [r0, #7]
	if (
   14fb6:	b11a      	cbz	r2, 14fc0 <reject_ext_ind_send.isra.0+0x38>
			!conn->llcp_enc.pause_tx &&
   14fb8:	f895 312a 	ldrb.w	r3, [r5, #298]	; 0x12a
			conn->tx_head &&
   14fbc:	0799      	lsls	r1, r3, #30
   14fbe:	d510      	bpl.n	14fe2 <reject_ext_ind_send.isra.0+0x5a>
		if (!conn->tx_ctrl) {
   14fc0:	f8d5 318c 	ldr.w	r3, [r5, #396]	; 0x18c
   14fc4:	b33b      	cbz	r3, 15016 <reject_ext_ind_send.isra.0+0x8e>
	tx->next = conn->tx_ctrl_last->next;
   14fc6:	f8d5 3190 	ldr.w	r3, [r5, #400]	; 0x190
   14fca:	681a      	ldr	r2, [r3, #0]
   14fcc:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   14fce:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   14fd0:	f8c5 0190 	str.w	r0, [r5, #400]	; 0x190
   14fd4:	6802      	ldr	r2, [r0, #0]
	if (!tx->next) {
   14fd6:	b1da      	cbz	r2, 15010 <reject_ext_ind_send.isra.0+0x88>

		ctrl_tx_enqueue(conn, tx);

		/* Mark for buffer for release */
		rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   14fd8:	2303      	movs	r3, #3
   14fda:	7033      	strb	r3, [r6, #0]

		return 0;
   14fdc:	2000      	movs	r0, #0
	}
   14fde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			!conn->llcp_phy.pause_tx &&
   14fe2:	f895 3183 	ldrb.w	r3, [r5, #387]	; 0x183
   14fe6:	07db      	lsls	r3, r3, #31
   14fe8:	d4ea      	bmi.n	14fc0 <reject_ext_ind_send.isra.0+0x38>
		if (conn->tx_head == conn->tx_data) {
   14fea:	f8d5 3194 	ldr.w	r3, [r5, #404]	; 0x194
   14fee:	429a      	cmp	r2, r3
			conn->tx_data = conn->tx_data->next;
   14ff0:	bf04      	itt	eq
   14ff2:	6813      	ldreq	r3, [r2, #0]
   14ff4:	f8c5 3194 	streq.w	r3, [r5, #404]	; 0x194
		if (!conn->tx_ctrl) {
   14ff8:	f8d5 318c 	ldr.w	r3, [r5, #396]	; 0x18c
   14ffc:	2b00      	cmp	r3, #0
   14ffe:	d1e2      	bne.n	14fc6 <reject_ext_ind_send.isra.0+0x3e>
			tx->next = conn->tx_head->next;
   15000:	6813      	ldr	r3, [r2, #0]
   15002:	6003      	str	r3, [r0, #0]
			conn->tx_head->next = tx;
   15004:	6010      	str	r0, [r2, #0]
				conn->tx_ctrl = tx;
   15006:	6802      	ldr	r2, [r0, #0]
				conn->tx_ctrl_last = tx;
   15008:	e9c5 0063 	strd	r0, r0, [r5, #396]	; 0x18c
	if (!tx->next) {
   1500c:	2a00      	cmp	r2, #0
   1500e:	d1e3      	bne.n	14fd8 <reject_ext_ind_send.isra.0+0x50>
		conn->tx_data_last = tx;
   15010:	f8c5 0198 	str.w	r0, [r5, #408]	; 0x198
   15014:	e7e0      	b.n	14fd8 <reject_ext_ind_send.isra.0+0x50>
			tx->next = conn->tx_head;
   15016:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
   15018:	e9c5 0062 	strd	r0, r0, [r5, #392]	; 0x188
				conn->tx_ctrl_last = tx;
   1501c:	f8c5 0190 	str.w	r0, [r5, #400]	; 0x190
   15020:	e7d9      	b.n	14fd6 <reject_ext_ind_send.isra.0+0x4e>
			return -ENOBUFS;
   15022:	f06f 0036 	mvn.w	r0, #54	; 0x36
   15026:	e7da      	b.n	14fde <reject_ext_ind_send.isra.0+0x56>
   15028:	20007408 	.word	0x20007408

0001502c <start_enc_rsp_send>:
	{
   1502c:	b570      	push	{r4, r5, r6, lr}
   1502e:	4604      	mov	r4, r0
		if (!pdu_ctrl_tx) {
   15030:	b179      	cbz	r1, 15052 <start_enc_rsp_send+0x26>
		conn->lll.enc_tx = 1;
   15032:	f890 2062 	ldrb.w	r2, [r0, #98]	; 0x62
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15036:	780b      	ldrb	r3, [r1, #0]
		conn->lll.enc_tx = 1;
   15038:	f042 0210 	orr.w	r2, r2, #16
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   1503c:	2601      	movs	r6, #1
		conn->lll.enc_tx = 1;
   1503e:	f880 2062 	strb.w	r2, [r0, #98]	; 0x62
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15042:	f043 0303 	orr.w	r3, r3, #3
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   15046:	2506      	movs	r5, #6
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   15048:	704e      	strb	r6, [r1, #1]
		return 0;
   1504a:	2000      	movs	r0, #0
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1504c:	700b      	strb	r3, [r1, #0]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   1504e:	70cd      	strb	r5, [r1, #3]
	}
   15050:	bd70      	pop	{r4, r5, r6, pc}
			tx = mem_acquire(&mem_conn_tx_ctrl.free);
   15052:	4826      	ldr	r0, [pc, #152]	; (150ec <start_enc_rsp_send+0xc0>)
   15054:	f7fa ffe2 	bl	1001c <mem_acquire>
			if (!tx) {
   15058:	2800      	cmp	r0, #0
   1505a:	d043      	beq.n	150e4 <start_enc_rsp_send+0xb8>
		conn->lll.enc_tx = 1;
   1505c:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15060:	7902      	ldrb	r2, [r0, #4]
		conn->lll.enc_tx = 1;
   15062:	f043 0310 	orr.w	r3, r3, #16
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   15066:	2101      	movs	r1, #1
		conn->lll.enc_tx = 1;
   15068:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   1506c:	7141      	strb	r1, [r0, #5]
			conn->tx_head &&
   1506e:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15072:	f042 0203 	orr.w	r2, r2, #3
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   15076:	2106      	movs	r1, #6
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15078:	7102      	strb	r2, [r0, #4]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   1507a:	71c1      	strb	r1, [r0, #7]
	if (
   1507c:	b1e3      	cbz	r3, 150b8 <start_enc_rsp_send+0x8c>
			!conn->llcp_enc.pause_tx &&
   1507e:	f894 212a 	ldrb.w	r2, [r4, #298]	; 0x12a
			conn->tx_head &&
   15082:	0791      	lsls	r1, r2, #30
   15084:	d418      	bmi.n	150b8 <start_enc_rsp_send+0x8c>
			!conn->llcp_phy.pause_tx &&
   15086:	f894 2183 	ldrb.w	r2, [r4, #387]	; 0x183
   1508a:	07d2      	lsls	r2, r2, #31
   1508c:	d414      	bmi.n	150b8 <start_enc_rsp_send+0x8c>
		if (conn->tx_head == conn->tx_data) {
   1508e:	f8d4 2194 	ldr.w	r2, [r4, #404]	; 0x194
   15092:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   15094:	bf04      	itt	eq
   15096:	681a      	ldreq	r2, [r3, #0]
   15098:	f8c4 2194 	streq.w	r2, [r4, #404]	; 0x194
		if (!conn->tx_ctrl) {
   1509c:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
   150a0:	b1ca      	cbz	r2, 150d6 <start_enc_rsp_send+0xaa>
	tx->next = conn->tx_ctrl_last->next;
   150a2:	f8d4 3190 	ldr.w	r3, [r4, #400]	; 0x190
   150a6:	681a      	ldr	r2, [r3, #0]
   150a8:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   150aa:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   150ac:	f8c4 0190 	str.w	r0, [r4, #400]	; 0x190
   150b0:	6803      	ldr	r3, [r0, #0]
	if (!tx->next) {
   150b2:	b163      	cbz	r3, 150ce <start_enc_rsp_send+0xa2>
		return 0;
   150b4:	2000      	movs	r0, #0
	}
   150b6:	bd70      	pop	{r4, r5, r6, pc}
		if (!conn->tx_ctrl) {
   150b8:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
   150bc:	2a00      	cmp	r2, #0
   150be:	d1f0      	bne.n	150a2 <start_enc_rsp_send+0x76>
			tx->next = conn->tx_head;
   150c0:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   150c2:	e9c4 0062 	strd	r0, r0, [r4, #392]	; 0x188
				conn->tx_ctrl_last = tx;
   150c6:	f8c4 0190 	str.w	r0, [r4, #400]	; 0x190
	if (!tx->next) {
   150ca:	2b00      	cmp	r3, #0
   150cc:	d1f2      	bne.n	150b4 <start_enc_rsp_send+0x88>
		conn->tx_data_last = tx;
   150ce:	f8c4 0198 	str.w	r0, [r4, #408]	; 0x198
		return 0;
   150d2:	4618      	mov	r0, r3
	}
   150d4:	bd70      	pop	{r4, r5, r6, pc}
			tx->next = conn->tx_head->next;
   150d6:	681a      	ldr	r2, [r3, #0]
   150d8:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   150da:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl = tx;
   150dc:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   150de:	e9c4 0063 	strd	r0, r0, [r4, #396]	; 0x18c
   150e2:	e7e6      	b.n	150b2 <start_enc_rsp_send+0x86>
				return -ENOBUFS;
   150e4:	f06f 0036 	mvn.w	r0, #54	; 0x36
	}
   150e8:	bd70      	pop	{r4, r5, r6, pc}
   150ea:	bf00      	nop
   150ec:	20007408 	.word	0x20007408

000150f0 <ctrl_tx_sec_enqueue>:
	if (conn->llcp_enc.pause_tx) {
   150f0:	f890 312a 	ldrb.w	r3, [r0, #298]	; 0x12a
   150f4:	f8d0 218c 	ldr.w	r2, [r0, #396]	; 0x18c
   150f8:	079b      	lsls	r3, r3, #30
{
   150fa:	b570      	push	{r4, r5, r6, lr}
   150fc:	4604      	mov	r4, r0
   150fe:	460d      	mov	r5, r1
	if (conn->llcp_enc.pause_tx) {
   15100:	d509      	bpl.n	15116 <ctrl_tx_sec_enqueue+0x26>
		if (!conn->tx_ctrl) {
   15102:	2a00      	cmp	r2, #0
   15104:	d03d      	beq.n	15182 <ctrl_tx_sec_enqueue+0x92>
			tx->next = conn->tx_ctrl_last->next;
   15106:	f8d0 3190 	ldr.w	r3, [r0, #400]	; 0x190
   1510a:	681a      	ldr	r2, [r3, #0]
   1510c:	600a      	str	r2, [r1, #0]
			conn->tx_ctrl_last->next = tx;
   1510e:	6019      	str	r1, [r3, #0]
		if (!tx->next) {
   15110:	682b      	ldr	r3, [r5, #0]
   15112:	b333      	cbz	r3, 15162 <ctrl_tx_sec_enqueue+0x72>
}
   15114:	bd70      	pop	{r4, r5, r6, pc}
		if (conn->tx_head) {
   15116:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
   1511a:	b1e1      	cbz	r1, 15156 <ctrl_tx_sec_enqueue+0x66>
			if ((conn->llcp_req != conn->llcp_ack) &&
   1511c:	f890 3183 	ldrb.w	r3, [r0, #387]	; 0x183
   15120:	f890 60bf 	ldrb.w	r6, [r0, #191]	; 0xbf
   15124:	f890 00c0 	ldrb.w	r0, [r0, #192]	; 0xc0
   15128:	4286      	cmp	r6, r0
   1512a:	f003 0301 	and.w	r3, r3, #1
   1512e:	d003      	beq.n	15138 <ctrl_tx_sec_enqueue+0x48>
   15130:	f894 00c1 	ldrb.w	r0, [r4, #193]	; 0xc1
   15134:	2803      	cmp	r0, #3
   15136:	d02c      	beq.n	15192 <ctrl_tx_sec_enqueue+0xa2>
			!conn->llcp_phy.pause_tx &&
   15138:	b9b3      	cbnz	r3, 15168 <ctrl_tx_sec_enqueue+0x78>
		if (conn->tx_head == conn->tx_data) {
   1513a:	f8d4 3194 	ldr.w	r3, [r4, #404]	; 0x194
   1513e:	4299      	cmp	r1, r3
   15140:	d045      	beq.n	151ce <ctrl_tx_sec_enqueue+0xde>
		if (!conn->tx_ctrl) {
   15142:	b99a      	cbnz	r2, 1516c <ctrl_tx_sec_enqueue+0x7c>
			tx->next = conn->tx_head->next;
   15144:	680b      	ldr	r3, [r1, #0]
   15146:	602b      	str	r3, [r5, #0]
			conn->tx_head->next = tx;
   15148:	600d      	str	r5, [r1, #0]
				conn->tx_ctrl_last = tx;
   1514a:	e9c4 5563 	strd	r5, r5, [r4, #396]	; 0x18c
   1514e:	682b      	ldr	r3, [r5, #0]
		if (!tx->next) {
   15150:	2b00      	cmp	r3, #0
   15152:	d1df      	bne.n	15114 <ctrl_tx_sec_enqueue+0x24>
   15154:	e005      	b.n	15162 <ctrl_tx_sec_enqueue+0x72>
		if (!conn->tx_ctrl) {
   15156:	b94a      	cbnz	r2, 1516c <ctrl_tx_sec_enqueue+0x7c>
			tx->next = conn->tx_head;
   15158:	602a      	str	r2, [r5, #0]
				conn->tx_ctrl = tx;
   1515a:	e9c0 5562 	strd	r5, r5, [r0, #392]	; 0x188
				conn->tx_ctrl_last = tx;
   1515e:	f8c0 5190 	str.w	r5, [r0, #400]	; 0x190
			conn->tx_data_last = tx;
   15162:	f8c4 5198 	str.w	r5, [r4, #408]	; 0x198
}
   15166:	bd70      	pop	{r4, r5, r6, pc}
		if (!conn->tx_ctrl) {
   15168:	2a00      	cmp	r2, #0
   1516a:	d036      	beq.n	151da <ctrl_tx_sec_enqueue+0xea>
	tx->next = conn->tx_ctrl_last->next;
   1516c:	f8d4 3190 	ldr.w	r3, [r4, #400]	; 0x190
   15170:	681a      	ldr	r2, [r3, #0]
   15172:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
   15174:	601d      	str	r5, [r3, #0]
	conn->tx_ctrl_last = tx;
   15176:	f8c4 5190 	str.w	r5, [r4, #400]	; 0x190
   1517a:	682b      	ldr	r3, [r5, #0]
		if (!tx->next) {
   1517c:	2b00      	cmp	r3, #0
   1517e:	d1c9      	bne.n	15114 <ctrl_tx_sec_enqueue+0x24>
   15180:	e7ef      	b.n	15162 <ctrl_tx_sec_enqueue+0x72>
			tx->next = conn->tx_head;
   15182:	f8d0 3188 	ldr.w	r3, [r0, #392]	; 0x188
   15186:	600b      	str	r3, [r1, #0]
			conn->tx_head = tx;
   15188:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
		if (!tx->next) {
   1518c:	2b00      	cmp	r3, #0
   1518e:	d1c1      	bne.n	15114 <ctrl_tx_sec_enqueue+0x24>
   15190:	e7e7      	b.n	15162 <ctrl_tx_sec_enqueue+0x72>
					(pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   15192:	7908      	ldrb	r0, [r1, #4]
					(conn->llcp_type == LLCP_ENCRYPTION) &&
   15194:	f000 0003 	and.w	r0, r0, #3
   15198:	2803      	cmp	r0, #3
   1519a:	d1cd      	bne.n	15138 <ctrl_tx_sec_enqueue+0x48>
					((pdu_data_tx->llctrl.opcode ==
   1519c:	79c8      	ldrb	r0, [r1, #7]
					(pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   1519e:	2803      	cmp	r0, #3
   151a0:	d001      	beq.n	151a6 <ctrl_tx_sec_enqueue+0xb6>
					  PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
   151a2:	280a      	cmp	r0, #10
   151a4:	d1c8      	bne.n	15138 <ctrl_tx_sec_enqueue+0x48>
			!conn->llcp_phy.pause_tx &&
   151a6:	b9f3      	cbnz	r3, 151e6 <ctrl_tx_sec_enqueue+0xf6>
		if (conn->tx_head == conn->tx_data) {
   151a8:	f8d4 3194 	ldr.w	r3, [r4, #404]	; 0x194
   151ac:	428b      	cmp	r3, r1
   151ae:	d022      	beq.n	151f6 <ctrl_tx_sec_enqueue+0x106>
		if (!conn->tx_ctrl) {
   151b0:	b332      	cbz	r2, 15200 <ctrl_tx_sec_enqueue+0x110>
			LL_ASSERT(!pause);
   151b2:	f640 3339 	movw	r3, #2873	; 0xb39
			LL_ASSERT(!pause);
   151b6:	4a14      	ldr	r2, [pc, #80]	; (15208 <ctrl_tx_sec_enqueue+0x118>)
   151b8:	4914      	ldr	r1, [pc, #80]	; (1520c <ctrl_tx_sec_enqueue+0x11c>)
   151ba:	4815      	ldr	r0, [pc, #84]	; (15210 <ctrl_tx_sec_enqueue+0x120>)
   151bc:	f008 fec9 	bl	1df52 <printk>
   151c0:	4040      	eors	r0, r0
   151c2:	f380 8811 	msr	BASEPRI, r0
   151c6:	f04f 0003 	mov.w	r0, #3
   151ca:	df02      	svc	2
   151cc:	e7ce      	b.n	1516c <ctrl_tx_sec_enqueue+0x7c>
			conn->tx_data = conn->tx_data->next;
   151ce:	680b      	ldr	r3, [r1, #0]
   151d0:	f8c4 3194 	str.w	r3, [r4, #404]	; 0x194
		if (!conn->tx_ctrl) {
   151d4:	2a00      	cmp	r2, #0
   151d6:	d1c9      	bne.n	1516c <ctrl_tx_sec_enqueue+0x7c>
   151d8:	e7b4      	b.n	15144 <ctrl_tx_sec_enqueue+0x54>
			tx->next = conn->tx_head;
   151da:	6029      	str	r1, [r5, #0]
				conn->tx_ctrl = tx;
   151dc:	e9c4 5562 	strd	r5, r5, [r4, #392]	; 0x188
				conn->tx_ctrl_last = tx;
   151e0:	f8c4 5190 	str.w	r5, [r4, #400]	; 0x190
}
   151e4:	bd70      	pop	{r4, r5, r6, pc}
		if (!conn->tx_ctrl) {
   151e6:	b112      	cbz	r2, 151ee <ctrl_tx_sec_enqueue+0xfe>
			LL_ASSERT(!pause);
   151e8:	f640 334b 	movw	r3, #2891	; 0xb4b
   151ec:	e7e3      	b.n	151b6 <ctrl_tx_sec_enqueue+0xc6>
			tx->next = conn->tx_head;
   151ee:	6029      	str	r1, [r5, #0]
			conn->tx_head = tx;
   151f0:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
}
   151f4:	bd70      	pop	{r4, r5, r6, pc}
			conn->tx_data = conn->tx_data->next;
   151f6:	680b      	ldr	r3, [r1, #0]
   151f8:	f8c4 3194 	str.w	r3, [r4, #404]	; 0x194
		if (!conn->tx_ctrl) {
   151fc:	2a00      	cmp	r2, #0
   151fe:	d1d8      	bne.n	151b2 <ctrl_tx_sec_enqueue+0xc2>
			tx->next = conn->tx_head->next;
   15200:	680b      	ldr	r3, [r1, #0]
   15202:	602b      	str	r3, [r5, #0]
			conn->tx_head->next = tx;
   15204:	600d      	str	r5, [r1, #0]
			if (!pause) {
   15206:	e783      	b.n	15110 <ctrl_tx_sec_enqueue+0x20>
   15208:	00024438 	.word	0x00024438
   1520c:	00024478 	.word	0x00024478
   15210:	00023ff4 	.word	0x00023ff4

00015214 <feature_rsp_send.isra.0>:
	static int feature_rsp_send(struct ll_conn *conn, struct node_rx_pdu *rx,
   15214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15216:	4606      	mov	r6, r0
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   15218:	4824      	ldr	r0, [pc, #144]	; (152ac <feature_rsp_send.isra.0+0x98>)
	static int feature_rsp_send(struct ll_conn *conn, struct node_rx_pdu *rx,
   1521a:	460d      	mov	r5, r1
   1521c:	4617      	mov	r7, r2
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1521e:	f7fa fefd 	bl	1001c <mem_acquire>
		if (!tx) {
   15222:	2800      	cmp	r0, #0
   15224:	d03e      	beq.n	152a4 <feature_rsp_send.isra.0+0x90>
			(features[1] << 8) | (features[2] << 16);
   15226:	79bb      	ldrb	r3, [r7, #6]
		feat = ~LL_FEAT_BIT_MASK_VALID | features[0] |
   15228:	7939      	ldrb	r1, [r7, #4]
			(features[1] << 8) | (features[2] << 16);
   1522a:	4a21      	ldr	r2, [pc, #132]	; (152b0 <feature_rsp_send.isra.0+0x9c>)
   1522c:	4604      	mov	r4, r0
   1522e:	7978      	ldrb	r0, [r7, #5]
   15230:	041b      	lsls	r3, r3, #16
   15232:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   15236:	430b      	orrs	r3, r1
		conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   15238:	f8d6 10f4 	ldr.w	r1, [r6, #244]	; 0xf4
		conn->common.fex_valid = 1U;
   1523c:	f896 00be 	ldrb.w	r0, [r6, #190]	; 0xbe
			(features[1] << 8) | (features[2] << 16);
   15240:	4313      	orrs	r3, r2
		conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   15242:	400b      	ands	r3, r1
   15244:	f3c3 0310 	ubfx	r3, r3, #0, #17
   15248:	f8c6 30f4 	str.w	r3, [r6, #244]	; 0xf4
			(features[1] << 8) | (features[2] << 16);
   1524c:	79bb      	ldrb	r3, [r7, #6]
   1524e:	f897 c005 	ldrb.w	ip, [r7, #5]
		feat = ~LL_FEAT_BIT_MASK_VALID | features[0] |
   15252:	7939      	ldrb	r1, [r7, #4]
			(features[1] << 8) | (features[2] << 16);
   15254:	041b      	lsls	r3, r3, #16
   15256:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
   1525a:	430b      	orrs	r3, r1
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1525c:	7921      	ldrb	r1, [r4, #4]
			(features[1] << 8) | (features[2] << 16);
   1525e:	4313      	orrs	r3, r2
		feat &= LL_FEAT_BIT_MASK;
   15260:	f3c3 0310 	ubfx	r3, r3, #0, #17
		pdu_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   15264:	2709      	movs	r7, #9
		(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   15266:	2208      	movs	r2, #8
		conn->common.fex_valid = 1U;
   15268:	f040 0001 	orr.w	r0, r0, #1
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1526c:	f041 0103 	orr.w	r1, r1, #3
		conn->llcp_feature.features_peer =
   15270:	f8c6 30f8 	str.w	r3, [r6, #248]	; 0xf8
		conn->common.fex_valid = 1U;
   15274:	f886 00be 	strb.w	r0, [r6, #190]	; 0xbe
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   15278:	7121      	strb	r1, [r4, #4]
		(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   1527a:	18a0      	adds	r0, r4, r2
		pdu_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   1527c:	7167      	strb	r7, [r4, #5]
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   1527e:	71e7      	strb	r7, [r4, #7]
		(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   15280:	2100      	movs	r1, #0
   15282:	f00a fe23 	bl	1fecc <memset>
		feat_result &= 0xFF;
   15286:	f896 30f4 	ldrb.w	r3, [r6, #244]	; 0xf4
	dst[0] = val;
   1528a:	7223      	strb	r3, [r4, #8]
	dst[1] = val >> 8;
   1528c:	2208      	movs	r2, #8
	dst[2] = val >> 16;
   1528e:	2301      	movs	r3, #1
		ctrl_tx_sec_enqueue(conn, tx);
   15290:	4630      	mov	r0, r6
   15292:	72a3      	strb	r3, [r4, #10]
	dst[1] = val >> 8;
   15294:	7262      	strb	r2, [r4, #9]
   15296:	4621      	mov	r1, r4
   15298:	f7ff ff2a 	bl	150f0 <ctrl_tx_sec_enqueue>
		rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   1529c:	2303      	movs	r3, #3
   1529e:	702b      	strb	r3, [r5, #0]
		return 0;
   152a0:	2000      	movs	r0, #0
	}
   152a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -ENOBUFS;
   152a4:	f06f 0036 	mvn.w	r0, #54	; 0x36
	}
   152a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   152aa:	bf00      	nop
   152ac:	20007408 	.word	0x20007408
   152b0:	fffe30d0 	.word	0xfffe30d0

000152b4 <ll_conn_acquire>:
	return mem_acquire(&conn_free);
   152b4:	4801      	ldr	r0, [pc, #4]	; (152bc <ll_conn_acquire+0x8>)
   152b6:	f7fa beb1 	b.w	1001c <mem_acquire>
   152ba:	bf00      	nop
   152bc:	200052fc 	.word	0x200052fc

000152c0 <ll_conn_release>:
	mem_release(conn, &conn_free);
   152c0:	4901      	ldr	r1, [pc, #4]	; (152c8 <ll_conn_release+0x8>)
   152c2:	f7fa bec5 	b.w	10050 <mem_release>
   152c6:	bf00      	nop
   152c8:	200052fc 	.word	0x200052fc

000152cc <ll_conn_handle_get>:
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   152cc:	4902      	ldr	r1, [pc, #8]	; (152d8 <ll_conn_handle_get+0xc>)
   152ce:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   152d2:	f7fa bed9 	b.w	10088 <mem_index_get>
   152d6:	bf00      	nop
   152d8:	20006300 	.word	0x20006300

000152dc <ll_conn_get>:
{
   152dc:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   152de:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   152e2:	4801      	ldr	r0, [pc, #4]	; (152e8 <ll_conn_get+0xc>)
   152e4:	f7fa becc 	b.w	10080 <mem_get>
   152e8:	20006300 	.word	0x20006300

000152ec <ll_connected_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   152ec:	2803      	cmp	r0, #3
   152ee:	d80c      	bhi.n	1530a <ll_connected_get+0x1e>
{
   152f0:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   152f2:	4602      	mov	r2, r0
   152f4:	4604      	mov	r4, r0
   152f6:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   152fa:	4805      	ldr	r0, [pc, #20]	; (15310 <ll_connected_get+0x24>)
   152fc:	f7fa fec0 	bl	10080 <mem_get>
	if (conn->lll.handle != handle) {
   15300:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   15302:	42a3      	cmp	r3, r4
		return NULL;
   15304:	bf18      	it	ne
   15306:	2000      	movne	r0, #0
}
   15308:	bd10      	pop	{r4, pc}
		return NULL;
   1530a:	2000      	movs	r0, #0
}
   1530c:	4770      	bx	lr
   1530e:	bf00      	nop
   15310:	20006300 	.word	0x20006300

00015314 <ll_tx_mem_acquire>:
	return mem_acquire(&mem_conn_tx.free);
   15314:	4801      	ldr	r0, [pc, #4]	; (1531c <ll_tx_mem_acquire+0x8>)
   15316:	f7fa be81 	b.w	1001c <mem_acquire>
   1531a:	bf00      	nop
   1531c:	200069dc 	.word	0x200069dc

00015320 <ll_tx_mem_release>:
	mem_release(tx, &mem_conn_tx.free);
   15320:	4901      	ldr	r1, [pc, #4]	; (15328 <ll_tx_mem_release+0x8>)
   15322:	f7fa be95 	b.w	10050 <mem_release>
   15326:	bf00      	nop
   15328:	200069dc 	.word	0x200069dc

0001532c <ll_tx_mem_enqueue>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   1532c:	2803      	cmp	r0, #3
   1532e:	d825      	bhi.n	1537c <ll_tx_mem_enqueue+0x50>
{
   15330:	b570      	push	{r4, r5, r6, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   15332:	4602      	mov	r2, r0
   15334:	4604      	mov	r4, r0
   15336:	460d      	mov	r5, r1
   15338:	4813      	ldr	r0, [pc, #76]	; (15388 <ll_tx_mem_enqueue+0x5c>)
   1533a:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   1533e:	f7fa fe9f 	bl	10080 <mem_get>
	if (conn->lll.handle != handle) {
   15342:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
   15344:	42a1      	cmp	r1, r4
   15346:	d116      	bne.n	15376 <ll_tx_mem_enqueue+0x4a>
	idx = MFIFO_ENQUEUE_GET(conn_tx, (void **) &lll_tx);
   15348:	4a10      	ldr	r2, [pc, #64]	; (1538c <ll_tx_mem_enqueue+0x60>)
   1534a:	78d6      	ldrb	r6, [r2, #3]
	if (last == count) {
   1534c:	7854      	ldrb	r4, [r2, #1]
   1534e:	7890      	ldrb	r0, [r2, #2]
	last = last + 1;
   15350:	1c73      	adds	r3, r6, #1
   15352:	b2db      	uxtb	r3, r3
		last = 0U;
   15354:	429c      	cmp	r4, r3
   15356:	bf08      	it	eq
   15358:	2300      	moveq	r3, #0
	if (last == first) {
   1535a:	4298      	cmp	r0, r3
   1535c:	d011      	beq.n	15382 <ll_tx_mem_enqueue+0x56>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   1535e:	4614      	mov	r4, r2
   15360:	f814 0b04 	ldrb.w	r0, [r4], #4
   15364:	fb10 f006 	smulbb	r0, r0, r6
	if (!lll_tx) {
   15368:	1826      	adds	r6, r4, r0
   1536a:	d00a      	beq.n	15382 <ll_tx_mem_enqueue+0x56>
	lll_tx->handle = handle;
   1536c:	5221      	strh	r1, [r4, r0]
	*last = idx; /* Commit: Update write index */
   1536e:	70d3      	strb	r3, [r2, #3]
	return 0;
   15370:	2000      	movs	r0, #0
	lll_tx->node = tx;
   15372:	6075      	str	r5, [r6, #4]
}
   15374:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   15376:	f06f 0015 	mvn.w	r0, #21
}
   1537a:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   1537c:	f06f 0015 	mvn.w	r0, #21
}
   15380:	4770      	bx	lr
		return -ENOBUFS;
   15382:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
   15386:	bd70      	pop	{r4, r5, r6, pc}
   15388:	20006300 	.word	0x20006300
   1538c:	2000057c 	.word	0x2000057c

00015390 <ll_conn_update_BLEX>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   15390:	2803      	cmp	r0, #3
   15392:	d83b      	bhi.n	1540c <ll_conn_update_BLEX+0x7c>
{
   15394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15396:	4604      	mov	r4, r0
   15398:	460d      	mov	r5, r1
   1539a:	4616      	mov	r6, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1539c:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   153a0:	4602      	mov	r2, r0
   153a2:	4837      	ldr	r0, [pc, #220]	; (15480 <ll_conn_update_BLEX+0xf0>)
   153a4:	461f      	mov	r7, r3
   153a6:	f7fa fe6b 	bl	10080 <mem_get>
	if (conn->lll.handle != handle) {
   153aa:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   153ac:	42a3      	cmp	r3, r4
   153ae:	d12b      	bne.n	15408 <ll_conn_update_BLEX+0x78>
	if (!cmd) {
   153b0:	bb05      	cbnz	r5, 153f4 <ll_conn_update_BLEX+0x64>
		if (!conn->llcp_conn_param.disabled &&
   153b2:	f890 314a 	ldrb.w	r3, [r0, #330]	; 0x14a
   153b6:	06d9      	lsls	r1, r3, #27
   153b8:	d52a      	bpl.n	15410 <ll_conn_update_BLEX+0x80>
		} else if (conn->lll.role) {
   153ba:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
   153be:	2b00      	cmp	r3, #0
   153c0:	db5b      	blt.n	1547a <ll_conn_update_BLEX+0xea>
		if (conn->llcp_cu.req != conn->llcp_cu.ack) {
   153c2:	f890 20dc 	ldrb.w	r2, [r0, #220]	; 0xdc
   153c6:	f890 30dd 	ldrb.w	r3, [r0, #221]	; 0xdd
   153ca:	4293      	cmp	r3, r2
   153cc:	d11c      	bne.n	15408 <ll_conn_update_BLEX+0x78>
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   153ce:	f890 10de 	ldrb.w	r1, [r0, #222]	; 0xde
		conn->llcp_cu.req++;
   153d2:	1c5a      	adds	r2, r3, #1
		conn->llcp_cu.win_size = 1U;
   153d4:	2401      	movs	r4, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   153d6:	f021 0107 	bic.w	r1, r1, #7
		conn->llcp_cu.win_offset_us = 0U;
   153da:	2300      	movs	r3, #0
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   153dc:	f041 0105 	orr.w	r1, r1, #5
		conn->llcp_cu.req++;
   153e0:	f880 20dc 	strb.w	r2, [r0, #220]	; 0xdc
		conn->llcp_cu.win_size = 1U;
   153e4:	f880 40ec 	strb.w	r4, [r0, #236]	; 0xec
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   153e8:	f880 10de 	strb.w	r1, [r0, #222]	; 0xde
		conn->llcp_cu.win_offset_us = 0U;
   153ec:	f8c0 30e8 	str.w	r3, [r0, #232]	; 0xe8
	return 0;
   153f0:	4618      	mov	r0, r3
}
   153f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		cmd--;
   153f4:	1e69      	subs	r1, r5, #1
		if (cmd) {
   153f6:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
   153fa:	f890 3148 	ldrb.w	r3, [r0, #328]	; 0x148
   153fe:	f890 2149 	ldrb.w	r2, [r0, #329]	; 0x149
   15402:	d011      	beq.n	15428 <ll_conn_update_BLEX+0x98>
			if ((conn->llcp_conn_param.req ==
   15404:	4293      	cmp	r3, r2
   15406:	d125      	bne.n	15454 <ll_conn_update_BLEX+0xc4>
		return BT_HCI_ERR_CMD_DISALLOWED;
   15408:	200c      	movs	r0, #12
}
   1540a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1540c:	200c      	movs	r0, #12
}
   1540e:	4770      	bx	lr
				(!conn->common.fex_valid ||
   15410:	f890 30be 	ldrb.w	r3, [r0, #190]	; 0xbe
		if (!conn->llcp_conn_param.disabled &&
   15414:	07da      	lsls	r2, r3, #31
   15416:	d503      	bpl.n	15420 <ll_conn_update_BLEX+0x90>
				 (conn->llcp_feature.features_conn &
   15418:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
				(!conn->common.fex_valid ||
   1541c:	079b      	lsls	r3, r3, #30
   1541e:	d5cc      	bpl.n	153ba <ll_conn_update_BLEX+0x2a>
   15420:	f890 3148 	ldrb.w	r3, [r0, #328]	; 0x148
   15424:	f890 2149 	ldrb.w	r2, [r0, #329]	; 0x149
			if (conn->llcp_conn_param.req !=
   15428:	4293      	cmp	r3, r2
   1542a:	d1ed      	bne.n	15408 <ll_conn_update_BLEX+0x78>
			conn->llcp_conn_param.state = cmd;
   1542c:	f8b0 214a 	ldrh.w	r2, [r0, #330]	; 0x14a
			conn->llcp_conn_param.interval_min = conn->lll.interval;
   15430:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
			conn->llcp_conn_param.offset0 = offset;
   15432:	f8a0 7158 	strh.w	r7, [r0, #344]	; 0x158
			conn->llcp_conn_param.state = cmd;
   15436:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
			conn->llcp_conn_param.req++;
   1543a:	3301      	adds	r3, #1
			conn->llcp_conn_param.state = cmd;
   1543c:	f042 0208 	orr.w	r2, r2, #8
			conn->llcp_conn_param.req++;
   15440:	f880 3148 	strb.w	r3, [r0, #328]	; 0x148
			conn->llcp_conn_param.state = cmd;
   15444:	f8a0 214a 	strh.w	r2, [r0, #330]	; 0x14a
			conn->llcp_conn_param.interval_min = conn->lll.interval;
   15448:	f8a0 114c 	strh.w	r1, [r0, #332]	; 0x14c
			conn->llcp_conn_param.interval_max = conn->lll.interval;
   1544c:	f8a0 114e 	strh.w	r1, [r0, #334]	; 0x14e
	return 0;
   15450:	2000      	movs	r0, #0
}
   15452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					(conn->llcp_conn_param.state !=
   15454:	f890 314a 	ldrb.w	r3, [r0, #330]	; 0x14a
						conn->llcp_conn_param.ack) ||
   15458:	f003 0207 	and.w	r2, r3, #7
   1545c:	2a03      	cmp	r2, #3
   1545e:	d1d3      	bne.n	15408 <ll_conn_update_BLEX+0x78>
			conn->llcp_conn_param.state = cmd;
   15460:	f001 0107 	and.w	r1, r1, #7
   15464:	f023 030f 	bic.w	r3, r3, #15
   15468:	f041 0108 	orr.w	r1, r1, #8
   1546c:	4319      	orrs	r1, r3
			conn->llcp_conn_param.status = status;
   1546e:	f880 614b 	strb.w	r6, [r0, #331]	; 0x14b
			conn->llcp_conn_param.state = cmd;
   15472:	f880 114a 	strb.w	r1, [r0, #330]	; 0x14a
	return 0;
   15476:	2000      	movs	r0, #0
}
   15478:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   1547a:	201a      	movs	r0, #26
}
   1547c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1547e:	bf00      	nop
   15480:	20006300 	.word	0x20006300

00015484 <ll_conn_update>:
{
   15484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (handle >= CONFIG_BT_MAX_CONN) {
   15488:	2803      	cmp	r0, #3
{
   1548a:	f8bd a020 	ldrh.w	sl, [sp, #32]
   1548e:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
   15492:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
	if (handle >= CONFIG_BT_MAX_CONN) {
   15496:	d83f      	bhi.n	15518 <ll_conn_update+0x94>
   15498:	4604      	mov	r4, r0
   1549a:	460d      	mov	r5, r1
   1549c:	4617      	mov	r7, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1549e:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   154a2:	4602      	mov	r2, r0
   154a4:	483a      	ldr	r0, [pc, #232]	; (15590 <ll_conn_update+0x10c>)
   154a6:	461e      	mov	r6, r3
   154a8:	f7fa fdea 	bl	10080 <mem_get>
	if (conn->lll.handle != handle) {
   154ac:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   154ae:	42a3      	cmp	r3, r4
   154b0:	d132      	bne.n	15518 <ll_conn_update+0x94>
	if (!cmd) {
   154b2:	bb3d      	cbnz	r5, 15504 <ll_conn_update+0x80>
		if (!conn->llcp_conn_param.disabled &&
   154b4:	f890 314a 	ldrb.w	r3, [r0, #330]	; 0x14a
   154b8:	06d9      	lsls	r1, r3, #27
   154ba:	d530      	bpl.n	1551e <ll_conn_update+0x9a>
		} else if (conn->lll.role) {
   154bc:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
   154c0:	2b00      	cmp	r3, #0
   154c2:	db62      	blt.n	1558a <ll_conn_update+0x106>
		if (conn->llcp_cu.req != conn->llcp_cu.ack) {
   154c4:	f890 20dc 	ldrb.w	r2, [r0, #220]	; 0xdc
   154c8:	f890 30dd 	ldrb.w	r3, [r0, #221]	; 0xdd
   154cc:	4293      	cmp	r3, r2
   154ce:	d123      	bne.n	15518 <ll_conn_update+0x94>
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   154d0:	f890 20de 	ldrb.w	r2, [r0, #222]	; 0xde
		conn->llcp_cu.interval = interval_max;
   154d4:	f8a0 a0e0 	strh.w	sl, [r0, #224]	; 0xe0
		conn->llcp_cu.req++;
   154d8:	3301      	adds	r3, #1
		conn->llcp_cu.win_size = 1U;
   154da:	2101      	movs	r1, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   154dc:	f022 0207 	bic.w	r2, r2, #7
		conn->llcp_cu.req++;
   154e0:	f880 30dc 	strb.w	r3, [r0, #220]	; 0xdc
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   154e4:	f042 0205 	orr.w	r2, r2, #5
		conn->llcp_cu.win_offset_us = 0U;
   154e8:	2300      	movs	r3, #0
		conn->llcp_cu.win_size = 1U;
   154ea:	f880 10ec 	strb.w	r1, [r0, #236]	; 0xec
		conn->llcp_cu.latency = latency;
   154ee:	f8a0 90e2 	strh.w	r9, [r0, #226]	; 0xe2
		conn->llcp_cu.timeout = timeout;
   154f2:	f8a0 80e4 	strh.w	r8, [r0, #228]	; 0xe4
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   154f6:	f880 20de 	strb.w	r2, [r0, #222]	; 0xde
		conn->llcp_cu.win_offset_us = 0U;
   154fa:	f8c0 30e8 	str.w	r3, [r0, #232]	; 0xe8
	return 0;
   154fe:	4618      	mov	r0, r3
}
   15500:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		cmd--;
   15504:	3d01      	subs	r5, #1
		if (cmd) {
   15506:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   1550a:	f890 3148 	ldrb.w	r3, [r0, #328]	; 0x148
   1550e:	f890 2149 	ldrb.w	r2, [r0, #329]	; 0x149
   15512:	d010      	beq.n	15536 <ll_conn_update+0xb2>
			if ((conn->llcp_conn_param.req ==
   15514:	4293      	cmp	r3, r2
   15516:	d125      	bne.n	15564 <ll_conn_update+0xe0>
		return BT_HCI_ERR_CMD_DISALLOWED;
   15518:	200c      	movs	r0, #12
}
   1551a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				(!conn->common.fex_valid ||
   1551e:	f890 30be 	ldrb.w	r3, [r0, #190]	; 0xbe
		if (!conn->llcp_conn_param.disabled &&
   15522:	07da      	lsls	r2, r3, #31
   15524:	d503      	bpl.n	1552e <ll_conn_update+0xaa>
				 (conn->llcp_feature.features_conn &
   15526:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
				(!conn->common.fex_valid ||
   1552a:	079b      	lsls	r3, r3, #30
   1552c:	d5c6      	bpl.n	154bc <ll_conn_update+0x38>
   1552e:	f890 3148 	ldrb.w	r3, [r0, #328]	; 0x148
   15532:	f890 2149 	ldrb.w	r2, [r0, #329]	; 0x149
			if (conn->llcp_conn_param.req !=
   15536:	4293      	cmp	r3, r2
   15538:	d1ee      	bne.n	15518 <ll_conn_update+0x94>
			conn->llcp_conn_param.state = cmd;
   1553a:	f8b0 214a 	ldrh.w	r2, [r0, #330]	; 0x14a
			conn->llcp_conn_param.interval_min = interval_min;
   1553e:	f8a0 614c 	strh.w	r6, [r0, #332]	; 0x14c
			conn->llcp_conn_param.state = cmd;
   15542:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
			conn->llcp_conn_param.req++;
   15546:	3301      	adds	r3, #1
			conn->llcp_conn_param.state = cmd;
   15548:	f042 0208 	orr.w	r2, r2, #8
			conn->llcp_conn_param.req++;
   1554c:	f880 3148 	strb.w	r3, [r0, #328]	; 0x148
			conn->llcp_conn_param.interval_max = interval_max;
   15550:	f8a0 a14e 	strh.w	sl, [r0, #334]	; 0x14e
			conn->llcp_conn_param.latency = latency;
   15554:	f8a0 9150 	strh.w	r9, [r0, #336]	; 0x150
			conn->llcp_conn_param.timeout = timeout;
   15558:	f8a0 8152 	strh.w	r8, [r0, #338]	; 0x152
			conn->llcp_conn_param.state = cmd;
   1555c:	f8a0 214a 	strh.w	r2, [r0, #330]	; 0x14a
	return 0;
   15560:	2000      	movs	r0, #0
   15562:	e7da      	b.n	1551a <ll_conn_update+0x96>
					(conn->llcp_conn_param.state !=
   15564:	f890 314a 	ldrb.w	r3, [r0, #330]	; 0x14a
						conn->llcp_conn_param.ack) ||
   15568:	f003 0207 	and.w	r2, r3, #7
   1556c:	2a03      	cmp	r2, #3
   1556e:	d1d3      	bne.n	15518 <ll_conn_update+0x94>
			conn->llcp_conn_param.state = cmd;
   15570:	f005 0507 	and.w	r5, r5, #7
   15574:	f045 0508 	orr.w	r5, r5, #8
   15578:	f023 030f 	bic.w	r3, r3, #15
   1557c:	431d      	orrs	r5, r3
   1557e:	f880 514a 	strb.w	r5, [r0, #330]	; 0x14a
			conn->llcp_conn_param.status = status;
   15582:	f880 714b 	strb.w	r7, [r0, #331]	; 0x14b
	return 0;
   15586:	2000      	movs	r0, #0
   15588:	e7c7      	b.n	1551a <ll_conn_update+0x96>
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   1558a:	201a      	movs	r0, #26
   1558c:	e7c5      	b.n	1551a <ll_conn_update+0x96>
   1558e:	bf00      	nop
   15590:	20006300 	.word	0x20006300

00015594 <ll_chm_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   15594:	2803      	cmp	r0, #3
   15596:	d81d      	bhi.n	155d4 <ll_chm_get+0x40>
{
   15598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1559a:	4602      	mov	r2, r0
   1559c:	4606      	mov	r6, r0
   1559e:	460d      	mov	r5, r1
   155a0:	480d      	ldr	r0, [pc, #52]	; (155d8 <ll_chm_get+0x44>)
   155a2:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   155a6:	f7fa fd6b 	bl	10080 <mem_get>
	if (conn->lll.handle != handle) {
   155aa:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   155ac:	42b3      	cmp	r3, r6
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   155ae:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
   155b0:	d10e      	bne.n	155d0 <ll_chm_get+0x3c>
   155b2:	f100 0738 	add.w	r7, r0, #56	; 0x38
		conn->chm_updated = 0U;
   155b6:	2600      	movs	r6, #0
   155b8:	f884 619c 	strb.w	r6, [r4, #412]	; 0x19c
		memcpy(chm, conn->lll.data_chan_map,
   155bc:	2205      	movs	r2, #5
   155be:	4639      	mov	r1, r7
   155c0:	4628      	mov	r0, r5
   155c2:	f00a fc58 	bl	1fe76 <memcpy>
	} while (conn->chm_updated);
   155c6:	f894 019c 	ldrb.w	r0, [r4, #412]	; 0x19c
   155ca:	2800      	cmp	r0, #0
   155cc:	d1f4      	bne.n	155b8 <ll_chm_get+0x24>
}
   155ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   155d0:	200c      	movs	r0, #12
}
   155d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   155d4:	200c      	movs	r0, #12
}
   155d6:	4770      	bx	lr
   155d8:	20006300 	.word	0x20006300

000155dc <ll_terminate_ind_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   155dc:	2803      	cmp	r0, #3
   155de:	d816      	bhi.n	1560e <ll_terminate_ind_send+0x32>
{
   155e0:	b538      	push	{r3, r4, r5, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   155e2:	4602      	mov	r2, r0
   155e4:	4604      	mov	r4, r0
   155e6:	460d      	mov	r5, r1
   155e8:	480a      	ldr	r0, [pc, #40]	; (15614 <ll_terminate_ind_send+0x38>)
   155ea:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   155ee:	f7fa fd47 	bl	10080 <mem_get>
	if (conn->lll.handle != handle) {
   155f2:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   155f4:	42a3      	cmp	r3, r4
   155f6:	d108      	bne.n	1560a <ll_terminate_ind_send+0x2e>
	conn->llcp_terminate.req++;
   155f8:	f890 3104 	ldrb.w	r3, [r0, #260]	; 0x104
	conn->llcp_terminate.reason_own = reason;
   155fc:	f880 5106 	strb.w	r5, [r0, #262]	; 0x106
	conn->llcp_terminate.req++;
   15600:	3301      	adds	r3, #1
   15602:	f880 3104 	strb.w	r3, [r0, #260]	; 0x104
	return 0;
   15606:	2000      	movs	r0, #0
}
   15608:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1560a:	200c      	movs	r0, #12
}
   1560c:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1560e:	200c      	movs	r0, #12
}
   15610:	4770      	bx	lr
   15612:	bf00      	nop
   15614:	20006300 	.word	0x20006300

00015618 <ll_feature_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   15618:	2803      	cmp	r0, #3
   1561a:	d817      	bhi.n	1564c <ll_feature_req_send+0x34>
{
   1561c:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1561e:	4602      	mov	r2, r0
   15620:	4604      	mov	r4, r0
   15622:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   15626:	480a      	ldr	r0, [pc, #40]	; (15650 <ll_feature_req_send+0x38>)
   15628:	f7fa fd2a 	bl	10080 <mem_get>
	if (conn->lll.handle != handle) {
   1562c:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   1562e:	42a3      	cmp	r3, r4
   15630:	d10a      	bne.n	15648 <ll_feature_req_send+0x30>
	if (conn->llcp_feature.req != conn->llcp_feature.ack) {
   15632:	f890 20f0 	ldrb.w	r2, [r0, #240]	; 0xf0
   15636:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   1563a:	4293      	cmp	r3, r2
   1563c:	d104      	bne.n	15648 <ll_feature_req_send+0x30>
	conn->llcp_feature.req++;
   1563e:	3301      	adds	r3, #1
   15640:	f880 30f0 	strb.w	r3, [r0, #240]	; 0xf0
	return 0;
   15644:	2000      	movs	r0, #0
}
   15646:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   15648:	200c      	movs	r0, #12
}
   1564a:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1564c:	200c      	movs	r0, #12
}
   1564e:	4770      	bx	lr
   15650:	20006300 	.word	0x20006300

00015654 <ll_version_ind_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   15654:	2803      	cmp	r0, #3
   15656:	d817      	bhi.n	15688 <ll_version_ind_send+0x34>
{
   15658:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1565a:	4602      	mov	r2, r0
   1565c:	4604      	mov	r4, r0
   1565e:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   15662:	480a      	ldr	r0, [pc, #40]	; (1568c <ll_version_ind_send+0x38>)
   15664:	f7fa fd0c 	bl	10080 <mem_get>
	if (conn->lll.handle != handle) {
   15668:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   1566a:	42a3      	cmp	r3, r4
   1566c:	d10a      	bne.n	15684 <ll_version_ind_send+0x30>
	if (conn->llcp_version.req != conn->llcp_version.ack) {
   1566e:	f890 20fc 	ldrb.w	r2, [r0, #252]	; 0xfc
   15672:	f890 30fd 	ldrb.w	r3, [r0, #253]	; 0xfd
   15676:	4293      	cmp	r3, r2
   15678:	d104      	bne.n	15684 <ll_version_ind_send+0x30>
	conn->llcp_version.req++;
   1567a:	3301      	adds	r3, #1
   1567c:	f880 30fc 	strb.w	r3, [r0, #252]	; 0xfc
	return 0;
   15680:	2000      	movs	r0, #0
}
   15682:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   15684:	200c      	movs	r0, #12
}
   15686:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   15688:	200c      	movs	r0, #12
}
   1568a:	4770      	bx	lr
   1568c:	20006300 	.word	0x20006300

00015690 <ll_length_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   15690:	2803      	cmp	r0, #3
   15692:	d836      	bhi.n	15702 <ll_length_req_send+0x72>
{
   15694:	b570      	push	{r4, r5, r6, lr}
   15696:	4604      	mov	r4, r0
   15698:	460e      	mov	r6, r1
   1569a:	4615      	mov	r5, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1569c:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   156a0:	4602      	mov	r2, r0
   156a2:	4820      	ldr	r0, [pc, #128]	; (15724 <ll_length_req_send+0x94>)
   156a4:	f7fa fcec 	bl	10080 <mem_get>
	if (conn->lll.handle != handle) {
   156a8:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   156aa:	42a3      	cmp	r3, r4
   156ac:	d11f      	bne.n	156ee <ll_length_req_send+0x5e>
	if (conn->llcp_length.disabled ||
   156ae:	f890 3172 	ldrb.w	r3, [r0, #370]	; 0x172
   156b2:	071c      	lsls	r4, r3, #28
   156b4:	d421      	bmi.n	156fa <ll_length_req_send+0x6a>
			(conn->common.fex_valid &&
   156b6:	f890 20be 	ldrb.w	r2, [r0, #190]	; 0xbe
	if (conn->llcp_length.disabled ||
   156ba:	07d1      	lsls	r1, r2, #31
   156bc:	d419      	bmi.n	156f2 <ll_length_req_send+0x62>
	if (conn->llcp_length.req != conn->llcp_length.ack) {
   156be:	f890 1170 	ldrb.w	r1, [r0, #368]	; 0x170
   156c2:	f890 2171 	ldrb.w	r2, [r0, #369]	; 0x171
   156c6:	428a      	cmp	r2, r1
   156c8:	d01d      	beq.n	15706 <ll_length_req_send+0x76>
		switch (conn->llcp_length.state) {
   156ca:	f003 0307 	and.w	r3, r3, #7
   156ce:	2b03      	cmp	r3, #3
   156d0:	d004      	beq.n	156dc <ll_length_req_send+0x4c>
   156d2:	3303      	adds	r3, #3
   156d4:	f003 0307 	and.w	r3, r3, #7
   156d8:	2b01      	cmp	r3, #1
   156da:	d810      	bhi.n	156fe <ll_length_req_send+0x6e>
				if (!conn->llcp_length.cache.tx_octets) {
   156dc:	f8b0 317c 	ldrh.w	r3, [r0, #380]	; 0x17c
   156e0:	b96b      	cbnz	r3, 156fe <ll_length_req_send+0x6e>
					conn->llcp_length.cache.tx_octets = tx_octets;
   156e2:	f8a0 617c 	strh.w	r6, [r0, #380]	; 0x17c
					conn->llcp_length.cache.tx_time = tx_time;
   156e6:	f8a0 517e 	strh.w	r5, [r0, #382]	; 0x17e
					return 0;
   156ea:	4618      	mov	r0, r3
}
   156ec:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   156ee:	2002      	movs	r0, #2
}
   156f0:	bd70      	pop	{r4, r5, r6, pc}
			 !(conn->llcp_feature.features_conn & BIT(BT_LE_FEAT_BIT_DLE)))) {
   156f2:	f8d0 20f4 	ldr.w	r2, [r0, #244]	; 0xf4
			(conn->common.fex_valid &&
   156f6:	0692      	lsls	r2, r2, #26
   156f8:	d4e1      	bmi.n	156be <ll_length_req_send+0x2e>
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   156fa:	201a      	movs	r0, #26
}
   156fc:	bd70      	pop	{r4, r5, r6, pc}
				return BT_HCI_ERR_CMD_DISALLOWED;
   156fe:	200c      	movs	r0, #12
}
   15700:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15702:	2002      	movs	r0, #2
}
   15704:	4770      	bx	lr
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   15706:	f890 3172 	ldrb.w	r3, [r0, #370]	; 0x172
	conn->llcp_length.tx_octets = tx_octets;
   1570a:	f8a0 6176 	strh.w	r6, [r0, #374]	; 0x176
	conn->llcp_length.req++;
   1570e:	3201      	adds	r2, #1
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   15710:	f36f 0302 	bfc	r3, #0, #3
	conn->llcp_length.req++;
   15714:	f880 2170 	strb.w	r2, [r0, #368]	; 0x170
	conn->llcp_length.tx_time = tx_time;
   15718:	f8a0 517a 	strh.w	r5, [r0, #378]	; 0x17a
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   1571c:	f880 3172 	strb.w	r3, [r0, #370]	; 0x172
	return 0;
   15720:	2000      	movs	r0, #0
}
   15722:	bd70      	pop	{r4, r5, r6, pc}
   15724:	20006300 	.word	0x20006300

00015728 <ll_length_default_get>:
	*max_tx_octets = default_tx_octets;
   15728:	4a03      	ldr	r2, [pc, #12]	; (15738 <ll_length_default_get+0x10>)
	*max_tx_time = default_tx_time;
   1572a:	4b04      	ldr	r3, [pc, #16]	; (1573c <ll_length_default_get+0x14>)
	*max_tx_octets = default_tx_octets;
   1572c:	8812      	ldrh	r2, [r2, #0]
	*max_tx_time = default_tx_time;
   1572e:	881b      	ldrh	r3, [r3, #0]
	*max_tx_octets = default_tx_octets;
   15730:	8002      	strh	r2, [r0, #0]
	*max_tx_time = default_tx_time;
   15732:	800b      	strh	r3, [r1, #0]
}
   15734:	4770      	bx	lr
   15736:	bf00      	nop
   15738:	200096bc 	.word	0x200096bc
   1573c:	200096be 	.word	0x200096be

00015740 <ll_length_default_set>:
	default_tx_octets = max_tx_octets;
   15740:	4a02      	ldr	r2, [pc, #8]	; (1574c <ll_length_default_set+0xc>)
	default_tx_time = max_tx_time;
   15742:	4b03      	ldr	r3, [pc, #12]	; (15750 <ll_length_default_set+0x10>)
	default_tx_octets = max_tx_octets;
   15744:	8010      	strh	r0, [r2, #0]
	default_tx_time = max_tx_time;
   15746:	8019      	strh	r1, [r3, #0]
}
   15748:	2000      	movs	r0, #0
   1574a:	4770      	bx	lr
   1574c:	200096bc 	.word	0x200096bc
   15750:	200096be 	.word	0x200096be

00015754 <ll_length_max_get>:
{
   15754:	b430      	push	{r4, r5}
	*max_tx_octets = LL_LENGTH_OCTETS_RX_MAX;
   15756:	25fb      	movs	r5, #251	; 0xfb
	*max_tx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED);
   15758:	f244 2490 	movw	r4, #17040	; 0x4290
	*max_tx_octets = LL_LENGTH_OCTETS_RX_MAX;
   1575c:	8005      	strh	r5, [r0, #0]
	*max_rx_octets = LL_LENGTH_OCTETS_RX_MAX;
   1575e:	8015      	strh	r5, [r2, #0]
	*max_tx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED);
   15760:	800c      	strh	r4, [r1, #0]
	*max_rx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED);
   15762:	801c      	strh	r4, [r3, #0]
}
   15764:	bc30      	pop	{r4, r5}
   15766:	4770      	bx	lr

00015768 <ll_phy_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   15768:	2803      	cmp	r0, #3
   1576a:	d81a      	bhi.n	157a2 <ll_phy_get+0x3a>
{
   1576c:	b570      	push	{r4, r5, r6, lr}
   1576e:	4604      	mov	r4, r0
   15770:	460d      	mov	r5, r1
   15772:	4616      	mov	r6, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   15774:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   15778:	4602      	mov	r2, r0
   1577a:	480b      	ldr	r0, [pc, #44]	; (157a8 <ll_phy_get+0x40>)
   1577c:	f7fa fc80 	bl	10080 <mem_get>
	if (conn->lll.handle != handle) {
   15780:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   15782:	42a3      	cmp	r3, r4
   15784:	d10b      	bne.n	1579e <ll_phy_get+0x36>
	*tx = conn->lll.phy_tx;
   15786:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
   1578a:	f3c3 0302 	ubfx	r3, r3, #0, #3
   1578e:	702b      	strb	r3, [r5, #0]
	*rx = conn->lll.phy_rx;
   15790:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
   15794:	f3c3 0302 	ubfx	r3, r3, #0, #3
   15798:	7033      	strb	r3, [r6, #0]
	return 0;
   1579a:	2000      	movs	r0, #0
}
   1579c:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1579e:	2002      	movs	r0, #2
}
   157a0:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   157a2:	2002      	movs	r0, #2
}
   157a4:	4770      	bx	lr
   157a6:	bf00      	nop
   157a8:	20006300 	.word	0x20006300

000157ac <ll_phy_default_set>:
	default_phy_tx = tx;
   157ac:	4a02      	ldr	r2, [pc, #8]	; (157b8 <ll_phy_default_set+0xc>)
	default_phy_rx = rx;
   157ae:	4b03      	ldr	r3, [pc, #12]	; (157bc <ll_phy_default_set+0x10>)
	default_phy_tx = tx;
   157b0:	7010      	strb	r0, [r2, #0]
	default_phy_rx = rx;
   157b2:	7019      	strb	r1, [r3, #0]
}
   157b4:	2000      	movs	r0, #0
   157b6:	4770      	bx	lr
   157b8:	20009c3c 	.word	0x20009c3c
   157bc:	20009c3b 	.word	0x20009c3b

000157c0 <ll_phy_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   157c0:	2803      	cmp	r0, #3
   157c2:	d84b      	bhi.n	1585c <ll_phy_req_send+0x9c>
{
   157c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   157c8:	4605      	mov	r5, r0
   157ca:	4688      	mov	r8, r1
   157cc:	4616      	mov	r6, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   157ce:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   157d2:	4602      	mov	r2, r0
   157d4:	4822      	ldr	r0, [pc, #136]	; (15860 <ll_phy_req_send+0xa0>)
   157d6:	461f      	mov	r7, r3
   157d8:	f7fa fc52 	bl	10080 <mem_get>
	if (conn->lll.handle != handle) {
   157dc:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   157de:	42ab      	cmp	r3, r5
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   157e0:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
   157e2:	d12d      	bne.n	15840 <ll_phy_req_send+0x80>
	if (conn->llcp_phy.disabled ||
   157e4:	f890 0183 	ldrb.w	r0, [r0, #387]	; 0x183
   157e8:	f010 0008 	ands.w	r0, r0, #8
   157ec:	d133      	bne.n	15856 <ll_phy_req_send+0x96>
			(conn->common.fex_valid &&
   157ee:	f894 30be 	ldrb.w	r3, [r4, #190]	; 0xbe
	if (conn->llcp_phy.disabled ||
   157f2:	07db      	lsls	r3, r3, #31
   157f4:	d42a      	bmi.n	1584c <ll_phy_req_send+0x8c>
	if ((conn->llcp_req != conn->llcp_ack) ||
   157f6:	f894 20bf 	ldrb.w	r2, [r4, #191]	; 0xbf
   157fa:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
   157fe:	429a      	cmp	r2, r3
   15800:	d121      	bne.n	15846 <ll_phy_req_send+0x86>
			(conn->llcp_phy.req != conn->llcp_phy.ack)) {
   15802:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
	if ((conn->llcp_req != conn->llcp_ack) ||
   15806:	f894 2181 	ldrb.w	r2, [r4, #385]	; 0x181
   1580a:	429a      	cmp	r2, r3
   1580c:	d11b      	bne.n	15846 <ll_phy_req_send+0x86>
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   1580e:	f008 0107 	and.w	r1, r8, #7
   15812:	0089      	lsls	r1, r1, #2
   15814:	f8b4 5182 	ldrh.w	r5, [r4, #386]	; 0x182
   15818:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
   1581c:	f007 0307 	and.w	r3, r7, #7
   15820:	ea41 1343 	orr.w	r3, r1, r3, lsl #5
   15824:	f006 0601 	and.w	r6, r6, #1
   15828:	ea43 2346 	orr.w	r3, r3, r6, lsl #9
   1582c:	f405 4179 	and.w	r1, r5, #63744	; 0xf900
	conn->llcp_phy.req++;
   15830:	3201      	adds	r2, #1
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   15832:	430b      	orrs	r3, r1
	conn->llcp_phy.req++;
   15834:	f884 2180 	strb.w	r2, [r4, #384]	; 0x180
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   15838:	f8a4 3182 	strh.w	r3, [r4, #386]	; 0x182
}
   1583c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15840:	2002      	movs	r0, #2
}
   15842:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   15846:	200c      	movs	r0, #12
}
   15848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			 !(conn->llcp_feature.features_conn & BIT(BT_LE_FEAT_BIT_PHY_2M)) &&
   1584c:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   15850:	f413 6f10 	tst.w	r3, #2304	; 0x900
   15854:	d1cf      	bne.n	157f6 <ll_phy_req_send+0x36>
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   15856:	201a      	movs	r0, #26
}
   15858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1585c:	2002      	movs	r0, #2
}
   1585e:	4770      	bx	lr
   15860:	20006300 	.word	0x20006300

00015864 <ll_rssi_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   15864:	2803      	cmp	r0, #3
   15866:	d812      	bhi.n	1588e <ll_rssi_get+0x2a>
{
   15868:	b538      	push	{r3, r4, r5, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1586a:	4602      	mov	r2, r0
   1586c:	4604      	mov	r4, r0
   1586e:	460d      	mov	r5, r1
   15870:	4808      	ldr	r0, [pc, #32]	; (15894 <ll_rssi_get+0x30>)
   15872:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   15876:	f7fa fc03 	bl	10080 <mem_get>
	if (conn->lll.handle != handle) {
   1587a:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   1587c:	42a3      	cmp	r3, r4
   1587e:	d104      	bne.n	1588a <ll_rssi_get+0x26>
	*rssi = conn->lll.rssi_latest;
   15880:	f890 30a5 	ldrb.w	r3, [r0, #165]	; 0xa5
   15884:	702b      	strb	r3, [r5, #0]
	return 0;
   15886:	2000      	movs	r0, #0
}
   15888:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1588a:	200c      	movs	r0, #12
}
   1588c:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1588e:	200c      	movs	r0, #12
}
   15890:	4770      	bx	lr
   15892:	bf00      	nop
   15894:	20006300 	.word	0x20006300

00015898 <ll_apto_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   15898:	2803      	cmp	r0, #3
   1589a:	d81d      	bhi.n	158d8 <ll_apto_get+0x40>
{
   1589c:	b538      	push	{r3, r4, r5, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1589e:	4602      	mov	r2, r0
   158a0:	4604      	mov	r4, r0
   158a2:	460d      	mov	r5, r1
   158a4:	480d      	ldr	r0, [pc, #52]	; (158dc <ll_apto_get+0x44>)
   158a6:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   158aa:	f7fa fbe9 	bl	10080 <mem_get>
	if (conn->lll.handle != handle) {
   158ae:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   158b0:	42a3      	cmp	r3, r4
   158b2:	d10f      	bne.n	158d4 <ll_apto_get+0x3c>
	*apto = conn->apto_reload * conn->lll.interval * 125U / 1000;
   158b4:	f8b0 10b6 	ldrh.w	r1, [r0, #182]	; 0xb6
   158b8:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
   158ba:	4a09      	ldr	r2, [pc, #36]	; (158e0 <ll_apto_get+0x48>)
   158bc:	fb03 f301 	mul.w	r3, r3, r1
   158c0:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
   158c4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   158c8:	fba2 2303 	umull	r2, r3, r2, r3
   158cc:	099b      	lsrs	r3, r3, #6
   158ce:	802b      	strh	r3, [r5, #0]
	return 0;
   158d0:	2000      	movs	r0, #0
}
   158d2:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   158d4:	2002      	movs	r0, #2
}
   158d6:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   158d8:	2002      	movs	r0, #2
}
   158da:	4770      	bx	lr
   158dc:	20006300 	.word	0x20006300
   158e0:	10624dd3 	.word	0x10624dd3

000158e4 <ll_apto_set>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   158e4:	2803      	cmp	r0, #3
   158e6:	d81e      	bhi.n	15926 <ll_apto_set+0x42>
{
   158e8:	b538      	push	{r3, r4, r5, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   158ea:	4602      	mov	r2, r0
   158ec:	4605      	mov	r5, r0
   158ee:	460c      	mov	r4, r1
   158f0:	480e      	ldr	r0, [pc, #56]	; (1592c <ll_apto_set+0x48>)
   158f2:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   158f6:	f7fa fbc3 	bl	10080 <mem_get>
	if (conn->lll.handle != handle) {
   158fa:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
   158fc:	42aa      	cmp	r2, r5
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   158fe:	4603      	mov	r3, r0
	if (conn->lll.handle != handle) {
   15900:	d10f      	bne.n	15922 <ll_apto_set+0x3e>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10U * 1000U,
   15902:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
   15904:	f240 41e2 	movw	r1, #1250	; 0x4e2
   15908:	fb01 f202 	mul.w	r2, r1, r2
   1590c:	f242 7110 	movw	r1, #10000	; 0x2710
   15910:	fb01 2104 	mla	r1, r1, r4, r2
   15914:	3901      	subs	r1, #1
	return 0;
   15916:	2000      	movs	r0, #0
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10U * 1000U,
   15918:	fbb1 f1f2 	udiv	r1, r1, r2
   1591c:	f8a3 10b6 	strh.w	r1, [r3, #182]	; 0xb6
}
   15920:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15922:	2002      	movs	r0, #2
}
   15924:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15926:	2002      	movs	r0, #2
}
   15928:	4770      	bx	lr
   1592a:	bf00      	nop
   1592c:	20006300 	.word	0x20006300

00015930 <ull_conn_init>:
	err = init_reset();
   15930:	f7ff b970 	b.w	14c14 <init_reset>

00015934 <ull_conn_reset>:
{
   15934:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   15938:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 15a20 <ull_conn_reset+0xec>
	LL_ASSERT(mark == conn);
   1593c:	4f31      	ldr	r7, [pc, #196]	; (15a04 <ull_conn_reset+0xd0>)
   1593e:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 15a24 <ull_conn_reset+0xf0>
{
   15942:	b085      	sub	sp, #20
   15944:	2500      	movs	r5, #0
   15946:	ae03      	add	r6, sp, #12
	volatile uint32_t ret_cb = TICKER_STATUS_BUSY;
   15948:	2302      	movs	r3, #2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1594a:	b2aa      	uxth	r2, r5
   1594c:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   15950:	4648      	mov	r0, r9
	volatile uint32_t ret_cb = TICKER_STATUS_BUSY;
   15952:	9303      	str	r3, [sp, #12]
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   15954:	f7fa fb94 	bl	10080 <mem_get>
   15958:	4604      	mov	r4, r0
	mark = ull_disable_mark(conn);
   1595a:	f7fe fe05 	bl	14568 <ull_disable_mark>
	LL_ASSERT(mark == conn);
   1595e:	4284      	cmp	r4, r0
   15960:	d00c      	beq.n	1597c <ull_conn_reset+0x48>
   15962:	4829      	ldr	r0, [pc, #164]	; (15a08 <ull_conn_reset+0xd4>)
   15964:	f640 2364 	movw	r3, #2660	; 0xa64
   15968:	463a      	mov	r2, r7
   1596a:	4641      	mov	r1, r8
   1596c:	f008 faf1 	bl	1df52 <printk>
   15970:	4040      	eors	r0, r0
   15972:	f380 8811 	msr	BASEPRI, r0
   15976:	f04f 0003 	mov.w	r0, #3
   1597a:	df02      	svc	2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   1597c:	1cea      	adds	r2, r5, #3
   1597e:	2103      	movs	r1, #3
   15980:	4b22      	ldr	r3, [pc, #136]	; (15a0c <ull_conn_reset+0xd8>)
   15982:	9600      	str	r6, [sp, #0]
   15984:	b2d2      	uxtb	r2, r2
   15986:	2000      	movs	r0, #0
   15988:	f7fc f818 	bl	119bc <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   1598c:	4631      	mov	r1, r6
   1598e:	f7fe fddd 	bl	1454c <ull_ticker_status_take>
	if (!ret) {
   15992:	b310      	cbz	r0, 159da <ull_conn_reset+0xa6>
	conn->lll.link_tx_free = NULL;
   15994:	2300      	movs	r3, #0
   15996:	65e3      	str	r3, [r4, #92]	; 0x5c
	mark = ull_disable_unmark(conn);
   15998:	4620      	mov	r0, r4
   1599a:	f7fe fdf1 	bl	14580 <ull_disable_unmark>
	LL_ASSERT(mark == conn);
   1599e:	4284      	cmp	r4, r0
   159a0:	d00c      	beq.n	159bc <ull_conn_reset+0x88>
   159a2:	4819      	ldr	r0, [pc, #100]	; (15a08 <ull_conn_reset+0xd4>)
   159a4:	f640 2373 	movw	r3, #2675	; 0xa73
   159a8:	463a      	mov	r2, r7
   159aa:	4641      	mov	r1, r8
   159ac:	f008 fad1 	bl	1df52 <printk>
   159b0:	4040      	eors	r0, r0
   159b2:	f380 8811 	msr	BASEPRI, r0
   159b6:	f04f 0003 	mov.w	r0, #3
   159ba:	df02      	svc	2
	for (handle = 0U; handle < CONFIG_BT_MAX_CONN; handle++) {
   159bc:	3501      	adds	r5, #1
   159be:	2d04      	cmp	r5, #4
   159c0:	d1c2      	bne.n	15948 <ull_conn_reset+0x14>
	MFIFO_INIT(conn_ack);
   159c2:	4913      	ldr	r1, [pc, #76]	; (15a10 <ull_conn_reset+0xdc>)
	MFIFO_INIT(conn_tx);
   159c4:	4813      	ldr	r0, [pc, #76]	; (15a14 <ull_conn_reset+0xe0>)
	conn_upd_curr = NULL;
   159c6:	4a14      	ldr	r2, [pc, #80]	; (15a18 <ull_conn_reset+0xe4>)
	MFIFO_INIT(conn_tx);
   159c8:	2300      	movs	r3, #0
   159ca:	8043      	strh	r3, [r0, #2]
	MFIFO_INIT(conn_ack);
   159cc:	804b      	strh	r3, [r1, #2]
	conn_upd_curr = NULL;
   159ce:	6013      	str	r3, [r2, #0]
	err = init_reset();
   159d0:	f7ff f920 	bl	14c14 <init_reset>
}
   159d4:	b005      	add	sp, #20
   159d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		ret = ull_disable(&conn->lll);
   159da:	f104 001c 	add.w	r0, r4, #28
   159de:	f7fe fdff 	bl	145e0 <ull_disable>
		LL_ASSERT(!ret);
   159e2:	2800      	cmp	r0, #0
   159e4:	d0d6      	beq.n	15994 <ull_conn_reset+0x60>
   159e6:	490d      	ldr	r1, [pc, #52]	; (15a1c <ull_conn_reset+0xe8>)
   159e8:	4807      	ldr	r0, [pc, #28]	; (15a08 <ull_conn_reset+0xd4>)
   159ea:	f640 236d 	movw	r3, #2669	; 0xa6d
   159ee:	463a      	mov	r2, r7
   159f0:	f008 faaf 	bl	1df52 <printk>
   159f4:	4040      	eors	r0, r0
   159f6:	f380 8811 	msr	BASEPRI, r0
   159fa:	f04f 0003 	mov.w	r0, #3
   159fe:	df02      	svc	2
   15a00:	e7c8      	b.n	15994 <ull_conn_reset+0x60>
   15a02:	bf00      	nop
   15a04:	00024438 	.word	0x00024438
   15a08:	00023ff4 	.word	0x00023ff4
   15a0c:	00014541 	.word	0x00014541
   15a10:	200004a0 	.word	0x200004a0
   15a14:	2000057c 	.word	0x2000057c
   15a18:	20006980 	.word	0x20006980
   15a1c:	000242b0 	.word	0x000242b0
   15a20:	20006300 	.word	0x20006300
   15a24:	00024504 	.word	0x00024504

00015a28 <ull_conn_default_tx_octets_get>:
	return default_tx_octets;
   15a28:	4b01      	ldr	r3, [pc, #4]	; (15a30 <ull_conn_default_tx_octets_get+0x8>)
}
   15a2a:	8818      	ldrh	r0, [r3, #0]
   15a2c:	4770      	bx	lr
   15a2e:	bf00      	nop
   15a30:	200096bc 	.word	0x200096bc

00015a34 <ull_conn_default_tx_time_get>:
	return default_tx_time;
   15a34:	4b01      	ldr	r3, [pc, #4]	; (15a3c <ull_conn_default_tx_time_get+0x8>)
}
   15a36:	8818      	ldrh	r0, [r3, #0]
   15a38:	4770      	bx	lr
   15a3a:	bf00      	nop
   15a3c:	200096be 	.word	0x200096be

00015a40 <ull_conn_default_phy_tx_get>:
	return default_phy_tx;
   15a40:	4b01      	ldr	r3, [pc, #4]	; (15a48 <ull_conn_default_phy_tx_get+0x8>)
}
   15a42:	7818      	ldrb	r0, [r3, #0]
   15a44:	4770      	bx	lr
   15a46:	bf00      	nop
   15a48:	20009c3c 	.word	0x20009c3c

00015a4c <ull_conn_default_phy_rx_get>:
	return default_phy_rx;
   15a4c:	4b01      	ldr	r3, [pc, #4]	; (15a54 <ull_conn_default_phy_rx_get+0x8>)
}
   15a4e:	7818      	ldrb	r0, [r3, #0]
   15a50:	4770      	bx	lr
   15a52:	bf00      	nop
   15a54:	20009c3b 	.word	0x20009c3b

00015a58 <ull_conn_setup>:
	lll = *((struct lll_conn **)((uint8_t *)ftr->param +
   15a58:	688b      	ldr	r3, [r1, #8]
   15a5a:	689b      	ldr	r3, [r3, #8]
{
   15a5c:	b510      	push	{r4, lr}
	switch (lll->role) {
   15a5e:	f893 4021 	ldrb.w	r4, [r3, #33]	; 0x21
   15a62:	09e4      	lsrs	r4, r4, #7
   15a64:	d105      	bne.n	15a72 <ull_conn_setup+0x1a>
			ull_master_setup(link, rx, ftr, lll);
   15a66:	460a      	mov	r2, r1
}
   15a68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			ull_master_setup(link, rx, ftr, lll);
   15a6c:	3208      	adds	r2, #8
   15a6e:	f7ef bb17 	b.w	50a0 <ull_master_setup>
			LL_ASSERT(0);
   15a72:	4a07      	ldr	r2, [pc, #28]	; (15a90 <ull_conn_setup+0x38>)
   15a74:	4907      	ldr	r1, [pc, #28]	; (15a94 <ull_conn_setup+0x3c>)
   15a76:	4808      	ldr	r0, [pc, #32]	; (15a98 <ull_conn_setup+0x40>)
   15a78:	f44f 734c 	mov.w	r3, #816	; 0x330
   15a7c:	f008 fa69 	bl	1df52 <printk>
   15a80:	4040      	eors	r0, r0
   15a82:	f380 8811 	msr	BASEPRI, r0
   15a86:	f04f 0003 	mov.w	r0, #3
   15a8a:	df02      	svc	2
}
   15a8c:	bd10      	pop	{r4, pc}
   15a8e:	bf00      	nop
   15a90:	00024438 	.word	0x00024438
   15a94:	00024064 	.word	0x00024064
   15a98:	00023ff4 	.word	0x00023ff4

00015a9c <ull_conn_rx>:
{
   15a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	conn = ll_connected_get((*rx)->hdr.handle);
   15aa0:	680b      	ldr	r3, [r1, #0]
   15aa2:	88de      	ldrh	r6, [r3, #6]
	if (handle >= CONFIG_BT_MAX_CONN) {
   15aa4:	2e03      	cmp	r6, #3
{
   15aa6:	b085      	sub	sp, #20
	if (handle >= CONFIG_BT_MAX_CONN) {
   15aa8:	f200 80a5 	bhi.w	15bf6 <ull_conn_rx+0x15a>
   15aac:	460c      	mov	r4, r1
   15aae:	4607      	mov	r7, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   15ab0:	4632      	mov	r2, r6
   15ab2:	48bc      	ldr	r0, [pc, #752]	; (15da4 <ull_conn_rx+0x308>)
   15ab4:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   15ab8:	f7fa fae2 	bl	10080 <mem_get>
	if (conn->lll.handle != handle) {
   15abc:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   15abe:	42b3      	cmp	r3, r6
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   15ac0:	4605      	mov	r5, r0
	if (conn->lll.handle != handle) {
   15ac2:	f040 8097 	bne.w	15bf4 <ull_conn_rx+0x158>
	pdu_rx = (void *)(*rx)->pdu;
   15ac6:	6822      	ldr	r2, [r4, #0]
   15ac8:	f890 112a 	ldrb.w	r1, [r0, #298]	; 0x12a
	switch (pdu_rx->ll_id) {
   15acc:	7f13      	ldrb	r3, [r2, #28]
   15ace:	f003 0303 	and.w	r3, r3, #3
   15ad2:	2b03      	cmp	r3, #3
	pdu_rx = (void *)(*rx)->pdu;
   15ad4:	4616      	mov	r6, r2
	switch (pdu_rx->ll_id) {
   15ad6:	f001 0001 	and.w	r0, r1, #1
   15ada:	f040 8092 	bne.w	15c02 <ull_conn_rx+0x166>
			struct pdu_data *pdu_rx, struct ll_conn *conn)
	{
		int nack = 0;
		uint8_t opcode;

		opcode = pdu_rx->llctrl.opcode;
   15ade:	f892 801f 	ldrb.w	r8, [r2, #31]

#if defined(CONFIG_BT_CTLR_LE_ENC)
		/* FIXME: do check in individual case to reduce CPU time */
		if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   15ae2:	2800      	cmp	r0, #0
   15ae4:	f000 8097 	beq.w	15c16 <ull_conn_rx+0x17a>
				  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   15ae8:	f995 303d 	ldrsb.w	r3, [r5, #61]	; 0x3d
   15aec:	2b00      	cmp	r3, #0
   15aee:	f001 0204 	and.w	r2, r1, #4
   15af2:	f2c0 8122 	blt.w	15d3a <ull_conn_rx+0x29e>
		return (!conn->lll.role &&
   15af6:	2a00      	cmp	r2, #0
   15af8:	f000 864b 	beq.w	16792 <ull_conn_rx+0xcf6>
				 (conn->llcp_enc.refresh &&
   15afc:	f1b8 0f02 	cmp.w	r8, #2
   15b00:	f000 831a 	beq.w	16138 <ull_conn_rx+0x69c>
				  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   15b04:	f1b8 0f0b 	cmp.w	r8, #11
   15b08:	f000 864f 	beq.w	167aa <ull_conn_rx+0xd0e>
				  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   15b0c:	f1b8 0f04 	cmp.w	r8, #4
   15b10:	f000 8531 	beq.w	16576 <ull_conn_rx+0xada>
				  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   15b14:	f1b8 0f05 	cmp.w	r8, #5
   15b18:	f000 8550 	beq.w	165bc <ull_conn_rx+0xb20>
   15b1c:	f1b8 0f06 	cmp.w	r8, #6
   15b20:	f000 865e 	beq.w	167e0 <ull_conn_rx+0xd44>
			   (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   15b24:	f1b8 0f0d 	cmp.w	r8, #13
   15b28:	f000 845e 	beq.w	163e8 <ull_conn_rx+0x94c>
   15b2c:	f1b8 0f11 	cmp.w	r8, #17
   15b30:	f040 80b3 	bne.w	15c9a <ull_conn_rx+0x1fe>

				break;
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

			case PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND:
				if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND,
   15b34:	7f73      	ldrb	r3, [r6, #29]
   15b36:	2b03      	cmp	r3, #3
   15b38:	f040 80bd 	bne.w	15cb6 <ull_conn_rx+0x21a>
		switch (rej_ext_ind->reject_opcode) {
   15b3c:	f896 3020 	ldrb.w	r3, [r6, #32]
   15b40:	3b03      	subs	r3, #3
   15b42:	2b13      	cmp	r3, #19
   15b44:	f200 80e5 	bhi.w	15d12 <ull_conn_rx+0x276>
   15b48:	e8df f013 	tbh	[pc, r3, lsl #1]
   15b4c:	00e305e0 	.word	0x00e305e0
   15b50:	00e300e3 	.word	0x00e300e3
   15b54:	00e300e3 	.word	0x00e300e3
   15b58:	00e300e3 	.word	0x00e300e3
   15b5c:	00e300e3 	.word	0x00e300e3
   15b60:	00e300e3 	.word	0x00e300e3
   15b64:	00e305a7 	.word	0x00e305a7
   15b68:	00e300e3 	.word	0x00e300e3
   15b6c:	060000e3 	.word	0x060000e3
   15b70:	057400e3 	.word	0x057400e3
					} else {
						struct pdu_data_llctrl *c = &pdu_rx->llctrl;
						struct pdu_data_llctrl_phy_req *p =
							&c->phy_req;

						conn->llcp_phy.state =
   15b74:	f895 3182 	ldrb.w	r3, [r5, #386]	; 0x182
							LLCP_PHY_STATE_UPD;

						if (conn->llcp_phy.ack ==
   15b78:	428a      	cmp	r2, r1
						conn->llcp_phy.state =
   15b7a:	f043 0303 	orr.w	r3, r3, #3
   15b7e:	f885 3182 	strb.w	r3, [r5, #386]	; 0x182
						if (conn->llcp_phy.ack ==
   15b82:	d112      	bne.n	15baa <ull_conn_rx+0x10e>
								conn->llcp_phy.req) {
							conn->llcp_phy.ack--;

							conn->llcp_phy.cmd = 0U;

							conn->llcp_phy.tx =
   15b84:	f8b5 3182 	ldrh.w	r3, [r5, #386]	; 0x182
								conn->phy_pref_tx;
							conn->llcp_phy.rx =
								conn->phy_pref_rx;
   15b88:	f895 1184 	ldrb.w	r1, [r5, #388]	; 0x184
							conn->llcp_phy.tx =
   15b8c:	4886      	ldr	r0, [pc, #536]	; (15da8 <ull_conn_rx+0x30c>)
   15b8e:	4018      	ands	r0, r3
   15b90:	f001 0307 	and.w	r3, r1, #7
   15b94:	009b      	lsls	r3, r3, #2
   15b96:	f3c1 1102 	ubfx	r1, r1, #4, #3
   15b9a:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
							conn->llcp_phy.ack--;
   15b9e:	3a01      	subs	r2, #1
							conn->llcp_phy.tx =
   15ba0:	4303      	orrs	r3, r0
							conn->llcp_phy.ack--;
   15ba2:	f885 2181 	strb.w	r2, [r5, #385]	; 0x181
							conn->llcp_phy.tx =
   15ba6:	f8a5 3182 	strh.w	r3, [r5, #386]	; 0x182
						}

						conn->llcp_phy.tx &= p->rx_phys;
						conn->llcp_phy.rx &= p->tx_phys;
   15baa:	f895 2182 	ldrb.w	r2, [r5, #386]	; 0x182
						conn->llcp_phy.tx &= p->rx_phys;
   15bae:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
						conn->llcp_phy.rx &= p->tx_phys;
   15bb2:	f896 1020 	ldrb.w	r1, [r6, #32]
						conn->llcp_phy.tx &= p->rx_phys;
   15bb6:	f3c2 0082 	ubfx	r0, r2, #2, #3
   15bba:	4003      	ands	r3, r0
						conn->llcp_phy.rx &= p->tx_phys;
   15bbc:	ea01 1152 	and.w	r1, r1, r2, lsr #5
						conn->llcp_phy.tx &= p->rx_phys;
   15bc0:	009b      	lsls	r3, r3, #2
   15bc2:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   15bc6:	f002 0203 	and.w	r2, r2, #3
   15bca:	4313      	orrs	r3, r2

						if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   15bcc:	f013 0f1c 	tst.w	r3, #28
						conn->llcp_phy.tx &= p->rx_phys;
   15bd0:	f885 3182 	strb.w	r3, [r5, #386]	; 0x182
						if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   15bd4:	d002      	beq.n	15bdc <ull_conn_rx+0x140>
   15bd6:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   15bda:	d105      	bne.n	15be8 <ull_conn_rx+0x14c>
							conn->llcp_phy.tx = 0;
   15bdc:	f895 3182 	ldrb.w	r3, [r5, #386]	; 0x182
   15be0:	f003 0303 	and.w	r3, r3, #3
   15be4:	f885 3182 	strb.w	r3, [r5, #386]	; 0x182
							conn->llcp_phy.rx = 0;
						}

						/* pause data packet tx */
						conn->llcp_phy.pause_tx = 1U;
   15be8:	f895 3183 	ldrb.w	r3, [r5, #387]	; 0x183
   15bec:	f043 0301 	orr.w	r3, r3, #1
   15bf0:	f885 3183 	strb.w	r3, [r5, #387]	; 0x183

						/* Mark for buffer for release */
						(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   15bf4:	6823      	ldr	r3, [r4, #0]
   15bf6:	2203      	movs	r2, #3
   15bf8:	711a      	strb	r2, [r3, #4]
		int nack = 0;
   15bfa:	2000      	movs	r0, #0
}
   15bfc:	b005      	add	sp, #20
   15bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (pdu_rx->ll_id) {
   15c02:	2b00      	cmp	r3, #0
   15c04:	d147      	bne.n	15c96 <ull_conn_rx+0x1fa>
			if (conn->llcp_enc.pause_rx) {
   15c06:	2800      	cmp	r0, #0
   15c08:	d140      	bne.n	15c8c <ull_conn_rx+0x1f0>
			(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   15c0a:	2303      	movs	r3, #3
   15c0c:	7113      	strb	r3, [r2, #4]
	return 0;
   15c0e:	2000      	movs	r0, #0
}
   15c10:	b005      	add	sp, #20
   15c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	pdu_rx = (void *)(*rx)->pdu;
   15c16:	321c      	adds	r2, #28
		switch (opcode) {
   15c18:	f1b8 0f19 	cmp.w	r8, #25
   15c1c:	d84b      	bhi.n	15cb6 <ull_conn_rx+0x21a>
   15c1e:	a301      	add	r3, pc, #4	; (adr r3, 15c24 <ull_conn_rx+0x188>)
   15c20:	f853 f028 	ldr.w	pc, [r3, r8, lsl #2]
   15c24:	000161c3 	.word	0x000161c3
   15c28:	00016159 	.word	0x00016159
   15c2c:	00016139 	.word	0x00016139
   15c30:	000164df 	.word	0x000164df
   15c34:	0001656d 	.word	0x0001656d
   15c38:	000165b3 	.word	0x000165b3
   15c3c:	000165f1 	.word	0x000165f1
   15c40:	00016493 	.word	0x00016493
   15c44:	000163bf 	.word	0x000163bf
   15c48:	00015fa9 	.word	0x00015fa9
   15c4c:	00015f0d 	.word	0x00015f0d
   15c50:	00016613 	.word	0x00016613
   15c54:	00016411 	.word	0x00016411
   15c58:	000163e9 	.word	0x000163e9
   15c5c:	000163df 	.word	0x000163df
   15c60:	00016471 	.word	0x00016471
   15c64:	0001629d 	.word	0x0001629d
   15c68:	00015b35 	.word	0x00015b35
   15c6c:	000160f7 	.word	0x000160f7
   15c70:	00015e1b 	.word	0x00015e1b
   15c74:	00015db1 	.word	0x00015db1
   15c78:	00015db1 	.word	0x00015db1
   15c7c:	00015eab 	.word	0x00015eab
   15c80:	00015e31 	.word	0x00015e31
   15c84:	0001607d 	.word	0x0001607d
   15c88:	00016013 	.word	0x00016013
				conn->llcp_terminate.reason_peer =
   15c8c:	233d      	movs	r3, #61	; 0x3d
   15c8e:	f885 3107 	strb.w	r3, [r5, #263]	; 0x107
   15c92:	6822      	ldr	r2, [r4, #0]
   15c94:	e7b9      	b.n	15c0a <ull_conn_rx+0x16e>
			if (conn->llcp_enc.pause_rx) {
   15c96:	2800      	cmp	r0, #0
   15c98:	d0b9      	beq.n	15c0e <ull_conn_rx+0x172>
			conn->llcp_terminate.reason_peer =
   15c9a:	233d      	movs	r3, #61	; 0x3d
   15c9c:	f885 3107 	strb.w	r3, [r5, #263]	; 0x107
			(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   15ca0:	6823      	ldr	r3, [r4, #0]
   15ca2:	2203      	movs	r2, #3
			return 0;
   15ca4:	2000      	movs	r0, #0
			(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   15ca6:	711a      	strb	r2, [r3, #4]
}
   15ca8:	b005      	add	sp, #20
   15caa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP,
   15cae:	7f73      	ldrb	r3, [r6, #29]
   15cb0:	2b01      	cmp	r3, #1
   15cb2:	f000 84b7 	beq.w	16624 <ull_conn_rx+0xb88>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   15cb6:	483d      	ldr	r0, [pc, #244]	; (15dac <ull_conn_rx+0x310>)
   15cb8:	f7fa f9b0 	bl	1001c <mem_acquire>
		if (!tx) {
   15cbc:	2800      	cmp	r0, #0
   15cbe:	f000 85cf 	beq.w	16860 <ull_conn_rx+0xdc4>
		pdu->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
   15cc2:	2302      	movs	r3, #2
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   15cc4:	7902      	ldrb	r2, [r0, #4]
		pdu->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
   15cc6:	7143      	strb	r3, [r0, #5]
			conn->tx_head &&
   15cc8:	f8d5 3188 	ldr.w	r3, [r5, #392]	; 0x188
		pdu->llctrl.unknown_rsp.type = type;
   15ccc:	f880 8008 	strb.w	r8, [r0, #8]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   15cd0:	f042 0203 	orr.w	r2, r2, #3
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   15cd4:	2107      	movs	r1, #7
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   15cd6:	7102      	strb	r2, [r0, #4]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   15cd8:	71c1      	strb	r1, [r0, #7]
	if (
   15cda:	b303      	cbz	r3, 15d1e <ull_conn_rx+0x282>
			!conn->llcp_enc.pause_tx &&
   15cdc:	f895 212a 	ldrb.w	r2, [r5, #298]	; 0x12a
			conn->tx_head &&
   15ce0:	0791      	lsls	r1, r2, #30
   15ce2:	d41c      	bmi.n	15d1e <ull_conn_rx+0x282>
			!conn->llcp_phy.pause_tx &&
   15ce4:	f895 2183 	ldrb.w	r2, [r5, #387]	; 0x183
   15ce8:	07d2      	lsls	r2, r2, #31
   15cea:	d418      	bmi.n	15d1e <ull_conn_rx+0x282>
		if (conn->tx_head == conn->tx_data) {
   15cec:	f8d5 2194 	ldr.w	r2, [r5, #404]	; 0x194
   15cf0:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   15cf2:	bf04      	itt	eq
   15cf4:	681a      	ldreq	r2, [r3, #0]
   15cf6:	f8c5 2194 	streq.w	r2, [r5, #404]	; 0x194
		if (!conn->tx_ctrl) {
   15cfa:	f8d5 218c 	ldr.w	r2, [r5, #396]	; 0x18c
   15cfe:	b99a      	cbnz	r2, 15d28 <ull_conn_rx+0x28c>
			tx->next = conn->tx_head->next;
   15d00:	681a      	ldr	r2, [r3, #0]
   15d02:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   15d04:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl = tx;
   15d06:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   15d08:	e9c5 0063 	strd	r0, r0, [r5, #396]	; 0x18c
	if (!tx->next) {
   15d0c:	2b00      	cmp	r3, #0
   15d0e:	f000 853c 	beq.w	1678a <ull_conn_rx+0xcee>
		rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   15d12:	2303      	movs	r3, #3
		return 0;
   15d14:	2000      	movs	r0, #0
		rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   15d16:	7133      	strb	r3, [r6, #4]
}
   15d18:	b005      	add	sp, #20
   15d1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!conn->tx_ctrl) {
   15d1e:	f8d5 218c 	ldr.w	r2, [r5, #396]	; 0x18c
   15d22:	2a00      	cmp	r2, #0
   15d24:	f000 853a 	beq.w	1679c <ull_conn_rx+0xd00>
	tx->next = conn->tx_ctrl_last->next;
   15d28:	f8d5 3190 	ldr.w	r3, [r5, #400]	; 0x190
   15d2c:	681a      	ldr	r2, [r3, #0]
   15d2e:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   15d30:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   15d32:	f8c5 0190 	str.w	r0, [r5, #400]	; 0x190
   15d36:	6803      	ldr	r3, [r0, #0]
}
   15d38:	e7e8      	b.n	15d0c <ull_conn_rx+0x270>
			(conn->lll.role &&
   15d3a:	2a00      	cmp	r2, #0
   15d3c:	f000 81f4 	beq.w	16128 <ull_conn_rx+0x68c>
			  (conn->llcp_enc.refresh &&
   15d40:	f1b8 0f02 	cmp.w	r8, #2
   15d44:	f000 81f8 	beq.w	16138 <ull_conn_rx+0x69c>
			   (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   15d48:	f1b8 0f0b 	cmp.w	r8, #11
   15d4c:	d0af      	beq.n	15cae <ull_conn_rx+0x212>
			   (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   15d4e:	f1b8 0f03 	cmp.w	r8, #3
   15d52:	f000 83c9 	beq.w	164e8 <ull_conn_rx+0xa4c>
			   (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   15d56:	f1b8 0f06 	cmp.w	r8, #6
   15d5a:	f47f aee3 	bne.w	15b24 <ull_conn_rx+0x88>
				if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_RSP,
   15d5e:	7f73      	ldrb	r3, [r6, #29]
   15d60:	2b01      	cmp	r3, #1
   15d62:	d1a8      	bne.n	15cb6 <ull_conn_rx+0x21a>
					if ((conn->llcp_req != conn->llcp_ack) &&
   15d64:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
   15d68:	f895 30bf 	ldrb.w	r3, [r5, #191]	; 0xbf
   15d6c:	4293      	cmp	r3, r2
   15d6e:	f001 80d7 	beq.w	16f20 <ull_conn_rx+0x1484>
   15d72:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
   15d76:	2b03      	cmp	r3, #3
   15d78:	d19d      	bne.n	15cb6 <ull_conn_rx+0x21a>
					conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   15d7a:	f895 30c4 	ldrb.w	r3, [r5, #196]	; 0xc4
   15d7e:	f36f 0301 	bfc	r3, #0, #2
   15d82:	f885 30c4 	strb.w	r3, [r5, #196]	; 0xc4
				if (conn->llcp_enc.refresh) {
   15d86:	074e      	lsls	r6, r1, #29
   15d88:	d506      	bpl.n	15d98 <ull_conn_rx+0x2fc>
					(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   15d8a:	6823      	ldr	r3, [r4, #0]
					conn->llcp_enc.refresh = 0U;
   15d8c:	f36f 0182 	bfc	r1, #2, #1
					(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   15d90:	220c      	movs	r2, #12
					conn->llcp_enc.refresh = 0U;
   15d92:	f885 112a 	strb.w	r1, [r5, #298]	; 0x12a
					(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   15d96:	711a      	strb	r2, [r3, #4]
				conn->procedure_expire = 0U;
   15d98:	2300      	movs	r3, #0
   15d9a:	f8a5 30b0 	strh.w	r3, [r5, #176]	; 0xb0
		int nack = 0;
   15d9e:	4618      	mov	r0, r3
				break;
   15da0:	e72c      	b.n	15bfc <ull_conn_rx+0x160>
   15da2:	bf00      	nop
   15da4:	20006300 	.word	0x20006300
   15da8:	fffffb03 	.word	0xfffffb03
   15dac:	20007408 	.word	0x20007408
				if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_LENGTH_REQ,
   15db0:	7f73      	ldrb	r3, [r6, #29]
   15db2:	2b09      	cmp	r3, #9
   15db4:	f47f af7f 	bne.w	15cb6 <ull_conn_rx+0x21a>
		if (pdu_rx->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
   15db8:	f1b8 0f14 	cmp.w	r8, #20
   15dbc:	f000 8554 	beq.w	16868 <ull_conn_rx+0xdcc>
				((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   15dc0:	f895 1170 	ldrb.w	r1, [r5, #368]	; 0x170
		if (/* Local idle, and Peer request then complete the Peer procedure
   15dc4:	f895 3171 	ldrb.w	r3, [r5, #369]	; 0x171
		eff_rx_octets = conn->lll.max_rx_octets;
   15dc8:	f8b5 2042 	ldrh.w	r2, [r5, #66]	; 0x42
		eff_tx_octets = conn->lll.max_tx_octets;
   15dcc:	f8b5 9040 	ldrh.w	r9, [r5, #64]	; 0x40
		eff_rx_time = conn->lll.max_rx_time;
   15dd0:	f8b5 a046 	ldrh.w	sl, [r5, #70]	; 0x46
		eff_tx_time = conn->lll.max_tx_time;
   15dd4:	f8b5 b044 	ldrh.w	fp, [r5, #68]	; 0x44
				((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   15dd8:	9100      	str	r1, [sp, #0]
		if (/* Local idle, and Peer request then complete the Peer procedure
   15dda:	428b      	cmp	r3, r1
		eff_rx_octets = conn->lll.max_rx_octets;
   15ddc:	9201      	str	r2, [sp, #4]
		if (/* Local idle, and Peer request then complete the Peer procedure
   15dde:	f001 80f4 	beq.w	16fca <ull_conn_rx+0x152e>
				 ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
   15de2:	f895 3172 	ldrb.w	r3, [r5, #370]	; 0x172
		struct node_tx *tx = NULL;
   15de6:	2100      	movs	r1, #0
				   tx) ||
   15de8:	f003 0307 	and.w	r3, r3, #7
   15dec:	2b02      	cmp	r3, #2
   15dee:	f000 8552 	beq.w	16896 <ull_conn_rx+0xdfa>
   15df2:	f896 801f 	ldrb.w	r8, [r6, #31]
			if (pdu_rx->llctrl.opcode != PDU_DATA_LLCTRL_TYPE_LENGTH_RSP) {
   15df6:	f1b8 0f15 	cmp.w	r8, #21
   15dfa:	f43f af08 	beq.w	15c0e <ull_conn_rx+0x172>
				mem_release(tx, &mem_conn_tx_ctrl.free);
   15dfe:	4608      	mov	r0, r1
   15e00:	49d3      	ldr	r1, [pc, #844]	; (16150 <ull_conn_rx+0x6b4>)
   15e02:	f7fa f925 	bl	10050 <mem_release>
				if (conn->llcp_length.state ==
   15e06:	f895 3172 	ldrb.w	r3, [r5, #370]	; 0x172
   15e0a:	f003 0307 	and.w	r3, r3, #7
   15e0e:	2b04      	cmp	r3, #4
   15e10:	f47f aefd 	bne.w	15c0e <ull_conn_rx+0x172>
					return -EBUSY;
   15e14:	f06f 000f 	mvn.w	r0, #15
   15e18:	e6f0      	b.n	15bfc <ull_conn_rx+0x160>
				if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_RSP, pdu_rx->len)) {
   15e1a:	7f73      	ldrb	r3, [r6, #29]
   15e1c:	2b01      	cmp	r3, #1
   15e1e:	f47f af4a 	bne.w	15cb6 <ull_conn_rx+0x21a>
				conn->procedure_expire = 0U;
   15e22:	2300      	movs	r3, #0
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   15e24:	2203      	movs	r2, #3
				conn->procedure_expire = 0U;
   15e26:	f8a5 30b0 	strh.w	r3, [r5, #176]	; 0xb0
		int nack = 0;
   15e2a:	4618      	mov	r0, r3
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   15e2c:	7132      	strb	r2, [r6, #4]
				break;
   15e2e:	e6e5      	b.n	15bfc <ull_conn_rx+0x160>
					nack = phy_rsp_send(conn, *rx, pdu_rx);
				}
				break;

			case PDU_DATA_LLCTRL_TYPE_PHY_RSP:
				if (conn->lll.role ||
   15e30:	f995 303d 	ldrsb.w	r3, [r5, #61]	; 0x3d
   15e34:	2b00      	cmp	r3, #0
   15e36:	f6ff af3e 	blt.w	15cb6 <ull_conn_rx+0x21a>
   15e3a:	7f73      	ldrb	r3, [r6, #29]
   15e3c:	2b03      	cmp	r3, #3
   15e3e:	f47f af3a 	bne.w	15cb6 <ull_conn_rx+0x21a>
						!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_RSP, pdu_rx->len)) {
					goto ull_conn_rx_unknown_rsp_send;
				}

				if (!conn->lll.role &&
   15e42:	f895 2181 	ldrb.w	r2, [r5, #385]	; 0x181
   15e46:	f895 3180 	ldrb.w	r3, [r5, #384]	; 0x180
   15e4a:	429a      	cmp	r2, r3
   15e4c:	f43f af61 	beq.w	15d12 <ull_conn_rx+0x276>
						(conn->llcp_phy.ack != conn->llcp_phy.req) &&
						(conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
   15e50:	f895 1182 	ldrb.w	r1, [r5, #386]	; 0x182
						(conn->llcp_phy.ack != conn->llcp_phy.req) &&
   15e54:	f001 0303 	and.w	r3, r1, #3
   15e58:	2b02      	cmp	r3, #2
   15e5a:	f47f af5a 	bne.w	15d12 <ull_conn_rx+0x276>
					struct pdu_data_llctrl_phy_rsp *p =
						&pdu_rx->llctrl.phy_rsp;

					conn->llcp_phy.state = LLCP_PHY_STATE_UPD;

					conn->llcp_phy.tx &= p->rx_phys;
   15e5e:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
					conn->llcp_phy.rx &= p->tx_phys;
   15e62:	f896 2020 	ldrb.w	r2, [r6, #32]
					conn->llcp_phy.tx &= p->rx_phys;
   15e66:	f3c1 0082 	ubfx	r0, r1, #2, #3
   15e6a:	4003      	ands	r3, r0
					conn->llcp_phy.state = LLCP_PHY_STATE_UPD;
   15e6c:	009b      	lsls	r3, r3, #2
   15e6e:	f043 0303 	orr.w	r3, r3, #3
					conn->llcp_phy.rx &= p->tx_phys;
   15e72:	ea02 1251 	and.w	r2, r2, r1, lsr #5
					conn->llcp_phy.state = LLCP_PHY_STATE_UPD;
   15e76:	ea43 1342 	orr.w	r3, r3, r2, lsl #5

					if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   15e7a:	f013 0f1c 	tst.w	r3, #28
					conn->llcp_phy.state = LLCP_PHY_STATE_UPD;
   15e7e:	f885 3182 	strb.w	r3, [r5, #386]	; 0x182
					if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   15e82:	d002      	beq.n	15e8a <ull_conn_rx+0x3ee>
   15e84:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   15e88:	d105      	bne.n	15e96 <ull_conn_rx+0x3fa>
						conn->llcp_phy.tx = 0;
   15e8a:	f895 3182 	ldrb.w	r3, [r5, #386]	; 0x182
   15e8e:	f003 0303 	and.w	r3, r3, #3
   15e92:	f885 3182 	strb.w	r3, [r5, #386]	; 0x182
						conn->llcp_phy.rx = 0;
					}

					/* pause data packet tx */
					conn->llcp_phy.pause_tx = 1U;
   15e96:	f895 3183 	ldrb.w	r3, [r5, #387]	; 0x183

					/* Procedure timeout is stopped */
					conn->procedure_expire = 0U;
   15e9a:	2200      	movs	r2, #0
					conn->llcp_phy.pause_tx = 1U;
   15e9c:	f043 0301 	orr.w	r3, r3, #1
   15ea0:	f885 3183 	strb.w	r3, [r5, #387]	; 0x183
					conn->procedure_expire = 0U;
   15ea4:	f8a5 20b0 	strh.w	r2, [r5, #176]	; 0xb0
				}

				/* Mark for buffer for release */
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   15ea8:	e733      	b.n	15d12 <ull_conn_rx+0x276>
				if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_REQ, pdu_rx->len)) {
   15eaa:	7f73      	ldrb	r3, [r6, #29]
   15eac:	2b03      	cmp	r3, #3
   15eae:	f47f af02 	bne.w	15cb6 <ull_conn_rx+0x21a>
				if (!conn->lll.role) {
   15eb2:	f995 303d 	ldrsb.w	r3, [r5, #61]	; 0x3d
   15eb6:	2b00      	cmp	r3, #0
   15eb8:	f2c0 85b8 	blt.w	16a2c <ull_conn_rx+0xf90>
					if ((conn->llcp_phy.ack !=
   15ebc:	f895 2181 	ldrb.w	r2, [r5, #385]	; 0x181
								conn->llcp_phy.req) &&
   15ec0:	f895 1180 	ldrb.w	r1, [r5, #384]	; 0x180
					if ((conn->llcp_phy.ack !=
   15ec4:	428a      	cmp	r2, r1
   15ec6:	d007      	beq.n	15ed8 <ull_conn_rx+0x43c>
							  LLCP_PHY_STATE_RSP_WAIT) ||
   15ec8:	f895 3182 	ldrb.w	r3, [r5, #386]	; 0x182
   15ecc:	f003 0303 	and.w	r3, r3, #3
								conn->llcp_phy.req) &&
   15ed0:	3b01      	subs	r3, #1
   15ed2:	2b02      	cmp	r3, #2
   15ed4:	f240 87be 	bls.w	16e54 <ull_conn_rx+0x13b8>
					} else if (((((conn->llcp_req - conn->llcp_ack) &
   15ed8:	f895 30bf 	ldrb.w	r3, [r5, #191]	; 0xbf
   15edc:	f895 00c0 	ldrb.w	r0, [r5, #192]	; 0xc0
   15ee0:	1a1b      	subs	r3, r3, r0
   15ee2:	f003 0303 	and.w	r3, r3, #3
   15ee6:	2b02      	cmp	r3, #2
   15ee8:	f000 8796 	beq.w	16e18 <ull_conn_rx+0x137c>
								 LLCP_ENCRYPTION)) ||
   15eec:	f895 0148 	ldrb.w	r0, [r5, #328]	; 0x148
   15ef0:	f895 3149 	ldrb.w	r3, [r5, #329]	; 0x149
   15ef4:	4298      	cmp	r0, r3
   15ef6:	f43f ae3d 	beq.w	15b74 <ull_conn_rx+0xd8>
						nack = reject_ext_ind_send(conn, *rx,
   15efa:	1d31      	adds	r1, r6, #4
   15efc:	4628      	mov	r0, r5
   15efe:	232a      	movs	r3, #42	; 0x2a
   15f00:	2216      	movs	r2, #22
}
   15f02:	b005      	add	sp, #20
   15f04:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
						nack = reject_ext_ind_send(conn, *rx,
   15f08:	f7ff b83e 	b.w	14f88 <reject_ext_ind_send.isra.0>
				if (!conn->lll.role ||
   15f0c:	f995 303d 	ldrsb.w	r3, [r5, #61]	; 0x3d
   15f10:	2b00      	cmp	r3, #0
   15f12:	f6bf aed0 	bge.w	15cb6 <ull_conn_rx+0x21a>
   15f16:	7f74      	ldrb	r4, [r6, #29]
   15f18:	2c01      	cmp	r4, #1
   15f1a:	f47f aecc 	bne.w	15cb6 <ull_conn_rx+0x21a>
			tx = mem_acquire(&mem_conn_tx_ctrl.free);
   15f1e:	488c      	ldr	r0, [pc, #560]	; (16150 <ull_conn_rx+0x6b4>)
   15f20:	f7fa f87c 	bl	1001c <mem_acquire>
			if (!tx) {
   15f24:	4603      	mov	r3, r0
   15f26:	2800      	cmp	r0, #0
   15f28:	f000 849a 	beq.w	16860 <ull_conn_rx+0xdc4>
		conn->llcp_enc.pause_rx = 1U;
   15f2c:	f895 212a 	ldrb.w	r2, [r5, #298]	; 0x12a
		conn->lll.enc_rx = 0;
   15f30:	f895 1062 	ldrb.w	r1, [r5, #98]	; 0x62
		conn->llcp_enc.pause_rx = 1U;
   15f34:	f022 0205 	bic.w	r2, r2, #5
		conn->lll.enc_rx = 0;
   15f38:	f36f 01c3 	bfc	r1, #3, #1
   15f3c:	f885 1062 	strb.w	r1, [r5, #98]	; 0x62
		conn->llcp_enc.pause_rx = 1U;
   15f40:	f042 0205 	orr.w	r2, r2, #5
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15f44:	7901      	ldrb	r1, [r0, #4]
		conn->llcp_enc.pause_rx = 1U;
   15f46:	f885 212a 	strb.w	r2, [r5, #298]	; 0x12a
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   15f4a:	7144      	strb	r4, [r0, #5]
			conn->tx_head &&
   15f4c:	f8d5 2188 	ldr.w	r2, [r5, #392]	; 0x188
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15f50:	f041 0103 	orr.w	r1, r1, #3
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
   15f54:	200b      	movs	r0, #11
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15f56:	7119      	strb	r1, [r3, #4]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
   15f58:	71d8      	strb	r0, [r3, #7]
	if (
   15f5a:	2a00      	cmp	r2, #0
   15f5c:	f000 8474 	beq.w	16848 <ull_conn_rx+0xdac>
			!conn->llcp_enc.pause_tx &&
   15f60:	f895 112a 	ldrb.w	r1, [r5, #298]	; 0x12a
			conn->tx_head &&
   15f64:	0788      	lsls	r0, r1, #30
   15f66:	f100 846f 	bmi.w	16848 <ull_conn_rx+0xdac>
			!conn->llcp_phy.pause_tx &&
   15f6a:	f895 1183 	ldrb.w	r1, [r5, #387]	; 0x183
   15f6e:	07c9      	lsls	r1, r1, #31
   15f70:	f100 846a 	bmi.w	16848 <ull_conn_rx+0xdac>
		if (conn->tx_head == conn->tx_data) {
   15f74:	f8d5 1194 	ldr.w	r1, [r5, #404]	; 0x194
   15f78:	428a      	cmp	r2, r1
			conn->tx_data = conn->tx_data->next;
   15f7a:	bf04      	itt	eq
   15f7c:	6811      	ldreq	r1, [r2, #0]
   15f7e:	f8c5 1194 	streq.w	r1, [r5, #404]	; 0x194
		if (!conn->tx_ctrl) {
   15f82:	f8d5 118c 	ldr.w	r1, [r5, #396]	; 0x18c
   15f86:	2900      	cmp	r1, #0
   15f88:	f001 80c4 	beq.w	17114 <ull_conn_rx+0x1678>
	tx->next = conn->tx_ctrl_last->next;
   15f8c:	f8d5 2190 	ldr.w	r2, [r5, #400]	; 0x190
   15f90:	6811      	ldr	r1, [r2, #0]
   15f92:	6019      	str	r1, [r3, #0]
	conn->tx_ctrl_last->next = tx;
   15f94:	6013      	str	r3, [r2, #0]
	conn->tx_ctrl_last = tx;
   15f96:	f8c5 3190 	str.w	r3, [r5, #400]	; 0x190
	if (!tx->next) {
   15f9a:	681a      	ldr	r2, [r3, #0]
   15f9c:	2a00      	cmp	r2, #0
   15f9e:	f47f aeb8 	bne.w	15d12 <ull_conn_rx+0x276>
		conn->tx_data_last = tx;
   15fa2:	f8c5 3198 	str.w	r3, [r5, #408]	; 0x198
   15fa6:	e6b4      	b.n	15d12 <ull_conn_rx+0x276>
				if ((!IS_ENABLED(CONFIG_BT_CTLR_SLAVE_FEAT_REQ) &&
   15fa8:	7f73      	ldrb	r3, [r6, #29]
   15faa:	2b09      	cmp	r3, #9
   15fac:	f47f ae83 	bne.w	15cb6 <ull_conn_rx+0x21a>
			(features[1] << 8) | (features[2] << 16);
   15fb0:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
   15fb4:	f896 0021 	ldrb.w	r0, [r6, #33]	; 0x21
		feat = ~LL_FEAT_BIT_MASK_VALID | features[0] |
   15fb8:	f896 2020 	ldrb.w	r2, [r6, #32]
			(features[1] << 8) | (features[2] << 16);
   15fbc:	4965      	ldr	r1, [pc, #404]	; (16154 <ull_conn_rx+0x6b8>)
   15fbe:	041b      	lsls	r3, r3, #16
   15fc0:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   15fc4:	4313      	orrs	r3, r2
		conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   15fc6:	f8d5 00f4 	ldr.w	r0, [r5, #244]	; 0xf4
		conn->common.fex_valid = 1U;
   15fca:	f895 20be 	ldrb.w	r2, [r5, #190]	; 0xbe
			(features[1] << 8) | (features[2] << 16);
   15fce:	430b      	orrs	r3, r1
		conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   15fd0:	4003      	ands	r3, r0
   15fd2:	f3c3 0310 	ubfx	r3, r3, #0, #17
   15fd6:	f8c5 30f4 	str.w	r3, [r5, #244]	; 0xf4
			(features[1] << 8) | (features[2] << 16);
   15fda:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
   15fde:	f896 4021 	ldrb.w	r4, [r6, #33]	; 0x21
		feat = ~LL_FEAT_BIT_MASK_VALID | features[0] |
   15fe2:	f896 0020 	ldrb.w	r0, [r6, #32]
			(features[1] << 8) | (features[2] << 16);
   15fe6:	041b      	lsls	r3, r3, #16
   15fe8:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
   15fec:	4303      	orrs	r3, r0
   15fee:	430b      	orrs	r3, r1
		feat &= LL_FEAT_BIT_MASK;
   15ff0:	f3c3 0310 	ubfx	r3, r3, #0, #17
		conn->llcp_feature.ack = conn->llcp_feature.req;
   15ff4:	f895 10f0 	ldrb.w	r1, [r5, #240]	; 0xf0
		conn->llcp_feature.features_peer =
   15ff8:	f8c5 30f8 	str.w	r3, [r5, #248]	; 0xf8
		conn->common.fex_valid = 1U;
   15ffc:	f042 0201 	orr.w	r2, r2, #1
		conn->procedure_expire = 0U;
   16000:	2300      	movs	r3, #0
		conn->common.fex_valid = 1U;
   16002:	f885 20be 	strb.w	r2, [r5, #190]	; 0xbe
		conn->llcp_feature.ack = conn->llcp_feature.req;
   16006:	f885 10f1 	strb.w	r1, [r5, #241]	; 0xf1
		conn->procedure_expire = 0U;
   1600a:	f8a5 30b0 	strh.w	r3, [r5, #176]	; 0xb0
		int nack = 0;
   1600e:	4618      	mov	r0, r3
	}
   16010:	e5f4      	b.n	15bfc <ull_conn_rx+0x160>
				break;
#endif /* CONFIG_BT_CTLR_PHY */

#if defined(CONFIG_BT_CTLR_MIN_USED_CHAN)
			case PDU_DATA_LLCTRL_TYPE_MIN_USED_CHAN_IND:
				if (conn->lll.role ||
   16012:	f995 303d 	ldrsb.w	r3, [r5, #61]	; 0x3d
   16016:	2b00      	cmp	r3, #0
   16018:	f6ff ae4d 	blt.w	15cb6 <ull_conn_rx+0x21a>
   1601c:	7f77      	ldrb	r7, [r6, #29]
   1601e:	2f03      	cmp	r7, #3
   16020:	f47f ae49 	bne.w	15cb6 <ull_conn_rx+0x21a>
				if (!conn->lll.role) {
					struct pdu_data_llctrl_min_used_chans_ind *p =
						&pdu_rx->llctrl.min_used_chans_ind;

#if defined(CONFIG_BT_CTLR_PHY)
					if (!(p->phys & (conn->lll.phy_tx |
   16024:	f895 1048 	ldrb.w	r1, [r5, #72]	; 0x48
									conn->lll.phy_rx))) {
   16028:	f895 3049 	ldrb.w	r3, [r5, #73]	; 0x49
					if (!(p->phys & (conn->lll.phy_tx |
   1602c:	f896 2020 	ldrb.w	r2, [r6, #32]
   16030:	430b      	orrs	r3, r1
   16032:	f003 0307 	and.w	r3, r3, #7
   16036:	4213      	tst	r3, r2
   16038:	f43f ade9 	beq.w	15c0e <ull_conn_rx+0x172>
						if (!(p->phys & 0x01)) {
#endif /* !CONFIG_BT_CTLR_PHY */
							break;
						}

						if (((conn->llcp_req - conn->llcp_ack) & 0x03) ==
   1603c:	f895 30bf 	ldrb.w	r3, [r5, #191]	; 0xbf
   16040:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
   16044:	1a9b      	subs	r3, r3, r2
   16046:	f003 0303 	and.w	r3, r3, #3
   1604a:	2b02      	cmp	r3, #2
   1604c:	f43f addf 	beq.w	15c0e <ull_conn_rx+0x172>
								0x02) {
							break;
						}

						ull_chan_map_get(conn->llcp.chan_map.chm);
   16050:	f105 00c5 	add.w	r0, r5, #197	; 0xc5
   16054:	f002 f9a2 	bl	1839c <ull_chan_map_get>
						/* conn->llcp.chan_map.instant     = 0; */
						conn->llcp.chan_map.initiate = 1U;

						conn->llcp_type = LLCP_CHAN_MAP;
						conn->llcp_ack -= 2U;
   16058:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
						conn->llcp.chan_map.initiate = 1U;
   1605c:	f895 30c4 	ldrb.w	r3, [r5, #196]	; 0xc4
						conn->llcp_ack -= 2U;
   16060:	3a02      	subs	r2, #2
						conn->llcp_type = LLCP_CHAN_MAP;
   16062:	2102      	movs	r1, #2
						conn->llcp_ack -= 2U;
   16064:	f885 20c0 	strb.w	r2, [r5, #192]	; 0xc0
						conn->llcp_type = LLCP_CHAN_MAP;
   16068:	f885 10c1 	strb.w	r1, [r5, #193]	; 0xc1
					}

					/* Mark for buffer for release */
					(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   1606c:	6822      	ldr	r2, [r4, #0]
						conn->llcp.chan_map.initiate = 1U;
   1606e:	f043 0301 	orr.w	r3, r3, #1
   16072:	f885 30c4 	strb.w	r3, [r5, #196]	; 0xc4
		int nack = 0;
   16076:	2000      	movs	r0, #0
					(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   16078:	7117      	strb	r7, [r2, #4]

					break;
   1607a:	e5bf      	b.n	15bfc <ull_conn_rx+0x160>
					if (!conn->lll.role ||
   1607c:	f995 303d 	ldrsb.w	r3, [r5, #61]	; 0x3d
   16080:	2b00      	cmp	r3, #0
   16082:	f6bf ae18 	bge.w	15cb6 <ull_conn_rx+0x21a>
   16086:	7f73      	ldrb	r3, [r6, #29]
   16088:	2b05      	cmp	r3, #5
   1608a:	f47f ae14 	bne.w	15cb6 <ull_conn_rx+0x21a>
		if (!((ind->m_to_s_phy | ind->s_to_m_phy) & 0x07)) {
   1608e:	f896 1020 	ldrb.w	r1, [r6, #32]
   16092:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
   16096:	ea41 0003 	orr.w	r0, r1, r3
   1609a:	f010 0007 	ands.w	r0, r0, #7
   1609e:	f040 864b 	bne.w	16d38 <ull_conn_rx+0x129c>
			if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   160a2:	f895 1180 	ldrb.w	r1, [r5, #384]	; 0x180
   160a6:	f895 3181 	ldrb.w	r3, [r5, #385]	; 0x181
   160aa:	428b      	cmp	r3, r1
   160ac:	f43f ae31 	beq.w	15d12 <ull_conn_rx+0x276>
					(conn->llcp_phy.state != LLCP_PHY_STATE_RSP_WAIT)) {
   160b0:	f895 3182 	ldrb.w	r3, [r5, #386]	; 0x182
			if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   160b4:	f003 0303 	and.w	r3, r3, #3
   160b8:	2b02      	cmp	r3, #2
   160ba:	f47f ae2a 	bne.w	15d12 <ull_conn_rx+0x276>
			conn->lll.phy_tx_time = conn->lll.phy_tx;
   160be:	f895 2048 	ldrb.w	r2, [r5, #72]	; 0x48
			conn->llcp_phy.pause_tx = 0U;
   160c2:	f895 3183 	ldrb.w	r3, [r5, #387]	; 0x183
			conn->llcp_phy.ack = conn->llcp_phy.req;
   160c6:	f885 1181 	strb.w	r1, [r5, #385]	; 0x181
			conn->llcp_phy.pause_tx = 0U;
   160ca:	f360 0300 	bfi	r3, r0, #0, #1
			conn->lll.phy_tx_time = conn->lll.phy_tx;
   160ce:	4611      	mov	r1, r2
   160d0:	f362 1106 	bfi	r1, r2, #4, #3
			conn->llcp_phy.pause_tx = 0U;
   160d4:	f885 3183 	strb.w	r3, [r5, #387]	; 0x183
			if (!conn->llcp_phy.cmd) {
   160d8:	f013 0304 	ands.w	r3, r3, #4
			conn->procedure_expire = 0U;
   160dc:	f8a5 00b0 	strh.w	r0, [r5, #176]	; 0xb0
			conn->lll.phy_tx_time = conn->lll.phy_tx;
   160e0:	f885 1048 	strb.w	r1, [r5, #72]	; 0x48
   160e4:	f3c2 0202 	ubfx	r2, r2, #0, #3
			if (!conn->llcp_phy.cmd) {
   160e8:	f041 8047 	bne.w	1717a <ull_conn_rx+0x16de>
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   160ec:	6822      	ldr	r2, [r4, #0]
   160ee:	2103      	movs	r1, #3
		int nack = 0;
   160f0:	4618      	mov	r0, r3
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   160f2:	7111      	strb	r1, [r2, #4]
					if (err) {
   160f4:	e582      	b.n	15bfc <ull_conn_rx+0x160>
				if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_REQ, pdu_rx->len)) {
   160f6:	7f74      	ldrb	r4, [r6, #29]
   160f8:	2c01      	cmp	r4, #1
   160fa:	f47f addc 	bne.w	15cb6 <ull_conn_rx+0x21a>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   160fe:	4814      	ldr	r0, [pc, #80]	; (16150 <ull_conn_rx+0x6b4>)
   16100:	f7f9 ff8c 	bl	1001c <mem_acquire>
		if (!tx) {
   16104:	4601      	mov	r1, r0
   16106:	2800      	cmp	r0, #0
   16108:	f000 83aa 	beq.w	16860 <ull_conn_rx+0xdc4>
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1610c:	7903      	ldrb	r3, [r0, #4]
		pdu_tx->len = offsetof(struct pdu_data_llctrl, ping_rsp) +
   1610e:	7144      	strb	r4, [r0, #5]
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   16110:	f043 0303 	orr.w	r3, r3, #3
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   16114:	2213      	movs	r2, #19
		ctrl_tx_sec_enqueue(conn, tx);
   16116:	4628      	mov	r0, r5
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   16118:	710b      	strb	r3, [r1, #4]
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   1611a:	71ca      	strb	r2, [r1, #7]
		ctrl_tx_sec_enqueue(conn, tx);
   1611c:	f7fe ffe8 	bl	150f0 <ctrl_tx_sec_enqueue>
		rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   16120:	2303      	movs	r3, #3
   16122:	7133      	strb	r3, [r6, #4]
		return 0;
   16124:	2000      	movs	r0, #0
   16126:	e569      	b.n	15bfc <ull_conn_rx+0x160>
			 ((!conn->llcp_enc.refresh &&
   16128:	f1b8 0f07 	cmp.w	r8, #7
   1612c:	f000 81b1 	beq.w	16492 <ull_conn_rx+0x9f6>
			   (opcode != PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP) &&
   16130:	f1b8 0f02 	cmp.w	r8, #2
   16134:	f47f ae0f 	bne.w	15d56 <ull_conn_rx+0x2ba>
				if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_TERMINATE_IND,
   16138:	7f73      	ldrb	r3, [r6, #29]
   1613a:	2b02      	cmp	r3, #2
   1613c:	f47f adbb 	bne.w	15cb6 <ull_conn_rx+0x21a>
				terminate_ind_recv(conn, *rx, pdu_rx);
   16140:	f896 3020 	ldrb.w	r3, [r6, #32]
		conn->llcp_terminate.reason_peer = pdu->llctrl.terminate_ind.error_code;
   16144:	f885 3107 	strb.w	r3, [r5, #263]	; 0x107
		rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   16148:	2303      	movs	r3, #3
   1614a:	7133      	strb	r3, [r6, #4]
		int nack = 0;
   1614c:	2000      	movs	r0, #0
	}
   1614e:	e555      	b.n	15bfc <ull_conn_rx+0x160>
   16150:	20007408 	.word	0x20007408
   16154:	fffe30d0 	.word	0xfffe30d0
					if (!conn->lll.role ||
   16158:	f995 303d 	ldrsb.w	r3, [r5, #61]	; 0x3d
   1615c:	2b00      	cmp	r3, #0
   1615e:	f6bf adaa 	bge.w	15cb6 <ull_conn_rx+0x21a>
   16162:	7f73      	ldrb	r3, [r6, #29]
   16164:	2b08      	cmp	r3, #8
   16166:	f47f ada6 	bne.w	15cb6 <ull_conn_rx+0x21a>
		instant = sys_le16_to_cpu(pdu->llctrl.chan_map_ind.instant);
   1616a:	f8b6 4025 	ldrh.w	r4, [r6, #37]	; 0x25
		if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
   1616e:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
   16170:	1ae3      	subs	r3, r4, r3
   16172:	041f      	lsls	r7, r3, #16
   16174:	f100 8679 	bmi.w	16e6a <ull_conn_rx+0x13ce>
		if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   16178:	f895 30bf 	ldrb.w	r3, [r5, #191]	; 0xbf
   1617c:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
   16180:	1a9b      	subs	r3, r3, r2
   16182:	f003 0303 	and.w	r3, r3, #3
   16186:	2b02      	cmp	r3, #2
   16188:	f000 8699 	beq.w	16ebe <ull_conn_rx+0x1422>
		memcpy(&conn->llcp.chan_map.chm[0], &pdu->llctrl.chan_map_ind.chm[0],
   1618c:	2205      	movs	r2, #5
   1618e:	f106 0120 	add.w	r1, r6, #32
   16192:	f105 00c5 	add.w	r0, r5, #197	; 0xc5
   16196:	f009 fe6e 	bl	1fe76 <memcpy>
		conn->llcp.chan_map.initiate = 0U;
   1619a:	f895 20c4 	ldrb.w	r2, [r5, #196]	; 0xc4
		conn->llcp_ack -= 2U;
   1619e:	f895 30c0 	ldrb.w	r3, [r5, #192]	; 0xc0
		conn->llcp.chan_map.instant = instant;
   161a2:	f8a5 40ca 	strh.w	r4, [r5, #202]	; 0xca
		conn->llcp_type = LLCP_CHAN_MAP;
   161a6:	2002      	movs	r0, #2
		conn->llcp.chan_map.initiate = 0U;
   161a8:	f36f 0200 	bfc	r2, #0, #1
		conn->llcp_ack -= 2U;
   161ac:	3b02      	subs	r3, #2
		rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   161ae:	2103      	movs	r1, #3
		conn->llcp_type = LLCP_CHAN_MAP;
   161b0:	f885 00c1 	strb.w	r0, [r5, #193]	; 0xc1
		conn->llcp.chan_map.initiate = 0U;
   161b4:	f885 20c4 	strb.w	r2, [r5, #196]	; 0xc4
		conn->llcp_ack -= 2U;
   161b8:	f885 30c0 	strb.w	r3, [r5, #192]	; 0xc0
		int nack = 0;
   161bc:	2000      	movs	r0, #0
		rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   161be:	7131      	strb	r1, [r6, #4]
					if (err) {
   161c0:	e51c      	b.n	15bfc <ull_conn_rx+0x160>
					if (!conn->lll.role ||
   161c2:	f995 303d 	ldrsb.w	r3, [r5, #61]	; 0x3d
   161c6:	2b00      	cmp	r3, #0
   161c8:	f6bf ad75 	bge.w	15cb6 <ull_conn_rx+0x21a>
   161cc:	7f73      	ldrb	r3, [r6, #29]
   161ce:	2b0c      	cmp	r3, #12
   161d0:	f47f ad71 	bne.w	15cb6 <ull_conn_rx+0x21a>
		instant = sys_le16_to_cpu(pdu->llctrl.conn_update_ind.instant);
   161d4:	f8b6 0029 	ldrh.w	r0, [r6, #41]	; 0x29
		if (((instant - conn->lll.event_counter) & 0xFFFF) > 0x7FFF) {
   161d8:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
   161da:	1ac3      	subs	r3, r0, r3
   161dc:	041b      	lsls	r3, r3, #16
   161de:	f100 8644 	bmi.w	16e6a <ull_conn_rx+0x13ce>
		if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   161e2:	f895 30bf 	ldrb.w	r3, [r5, #191]	; 0xbf
   161e6:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
   161ea:	1a9b      	subs	r3, r3, r2
   161ec:	f003 0303 	and.w	r3, r3, #3
   161f0:	2b02      	cmp	r3, #2
   161f2:	f000 8664 	beq.w	16ebe <ull_conn_rx+0x1422>
		if (!conn_upd_curr) {
   161f6:	4bdc      	ldr	r3, [pc, #880]	; (16568 <ull_conn_rx+0xacc>)
   161f8:	681a      	ldr	r2, [r3, #0]
   161fa:	2a00      	cmp	r2, #0
   161fc:	f000 86e2 	beq.w	16fc4 <ull_conn_rx+0x1528>
		conn->llcp_cu.win_size = pdu->llctrl.conn_update_ind.win_size;
   16200:	f896 3020 	ldrb.w	r3, [r6, #32]
   16204:	f885 30ec 	strb.w	r3, [r5, #236]	; 0xec
			sys_le16_to_cpu(pdu->llctrl.conn_update_ind.win_offset) * 1250;
   16208:	f8b6 1021 	ldrh.w	r1, [r6, #33]	; 0x21
		conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   1620c:	f895 30de 	ldrb.w	r3, [r5, #222]	; 0xde
			sys_le16_to_cpu(pdu->llctrl.conn_update_ind.win_offset) * 1250;
   16210:	f240 42e2 	movw	r2, #1250	; 0x4e2
   16214:	fb02 f201 	mul.w	r2, r2, r1
		conn->llcp_cu.win_offset_us =
   16218:	f8c5 20e8 	str.w	r2, [r5, #232]	; 0xe8
			sys_le16_to_cpu(pdu->llctrl.conn_update_ind.interval);
   1621c:	f896 1024 	ldrb.w	r1, [r6, #36]	; 0x24
   16220:	f896 2023 	ldrb.w	r2, [r6, #35]	; 0x23
   16224:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
		conn->llcp_cu.interval =
   16228:	f8a5 20e0 	strh.w	r2, [r5, #224]	; 0xe0
			sys_le16_to_cpu(pdu->llctrl.conn_update_ind.latency);
   1622c:	f896 1026 	ldrb.w	r1, [r6, #38]	; 0x26
   16230:	f896 2025 	ldrb.w	r2, [r6, #37]	; 0x25
   16234:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
		conn->llcp_cu.latency =
   16238:	f8a5 20e2 	strh.w	r2, [r5, #226]	; 0xe2
			sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   1623c:	f896 1027 	ldrb.w	r1, [r6, #39]	; 0x27
		conn->llcp_cu.ack--;
   16240:	f895 20dd 	ldrb.w	r2, [r5, #221]	; 0xdd
			sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   16244:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
		conn->llcp.conn_upd.instant = instant;
   16248:	f8a5 00c4 	strh.w	r0, [r5, #196]	; 0xc4
		conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   1624c:	f023 0307 	bic.w	r3, r3, #7
		link->mem = conn->llcp_rx;
   16250:	f8d5 00d8 	ldr.w	r0, [r5, #216]	; 0xd8
		conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   16254:	f043 0304 	orr.w	r3, r3, #4
		conn->llcp_cu.ack--;
   16258:	3a01      	subs	r2, #1
			sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   1625a:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
		conn->llcp_cu.ack--;
   1625e:	f885 20dd 	strb.w	r2, [r5, #221]	; 0xdd
		conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   16262:	f885 30de 	strb.w	r3, [r5, #222]	; 0xde
		conn->llcp_cu.timeout =
   16266:	f8a5 10e4 	strh.w	r1, [r5, #228]	; 0xe4
		link->mem = conn->llcp_rx;
   1626a:	6078      	str	r0, [r7, #4]
		(*rx)->hdr.link = link;
   1626c:	6823      	ldr	r3, [r4, #0]
   1626e:	601f      	str	r7, [r3, #0]
		conn->llcp_rx = *rx;
   16270:	6823      	ldr	r3, [r4, #0]
   16272:	f8c5 30d8 	str.w	r3, [r5, #216]	; 0xd8
		*rx = NULL;
   16276:	2300      	movs	r3, #0
   16278:	6023      	str	r3, [r4, #0]
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   1627a:	f895 2148 	ldrb.w	r2, [r5, #328]	; 0x148
   1627e:	f895 3149 	ldrb.w	r3, [r5, #329]	; 0x149
   16282:	4293      	cmp	r3, r2
   16284:	f43f ad88 	beq.w	15d98 <ull_conn_rx+0x2fc>
				(conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT)) {
   16288:	f895 314a 	ldrb.w	r3, [r5, #330]	; 0x14a
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   1628c:	f003 0307 	and.w	r3, r3, #7
   16290:	2b04      	cmp	r3, #4
   16292:	f47f ad81 	bne.w	15d98 <ull_conn_rx+0x2fc>
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   16296:	f885 2149 	strb.w	r2, [r5, #329]	; 0x149
					if (err) {
   1629a:	e57d      	b.n	15d98 <ull_conn_rx+0x2fc>
				if (conn->lll.role ||
   1629c:	f995 303d 	ldrsb.w	r3, [r5, #61]	; 0x3d
   162a0:	2b00      	cmp	r3, #0
   162a2:	f6ff ad08 	blt.w	15cb6 <ull_conn_rx+0x21a>
   162a6:	7f73      	ldrb	r3, [r6, #29]
   162a8:	2b18      	cmp	r3, #24
   162aa:	f47f ad04 	bne.w	15cb6 <ull_conn_rx+0x21a>
				if (!conn->lll.role &&
   162ae:	f895 2148 	ldrb.w	r2, [r5, #328]	; 0x148
   162b2:	f895 3149 	ldrb.w	r3, [r5, #329]	; 0x149
   162b6:	429a      	cmp	r2, r3
   162b8:	f43f ad2b 	beq.w	15d12 <ull_conn_rx+0x276>
						(conn->llcp_conn_param.state ==
   162bc:	f895 314a 	ldrb.w	r3, [r5, #330]	; 0x14a
						 conn->llcp_conn_param.ack) &&
   162c0:	f003 0307 	and.w	r3, r3, #7
   162c4:	2b04      	cmp	r3, #4
   162c6:	f47f ad24 	bne.w	15d12 <ull_conn_rx+0x276>
					uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   162ca:	8c37      	ldrh	r7, [r6, #32]
					if ((interval_min < 6) ||
   162cc:	2f05      	cmp	r7, #5
					uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   162ce:	b2ba      	uxth	r2, r7
					if ((interval_min < 6) ||
   162d0:	f240 85c5 	bls.w	16e5e <ull_conn_rx+0x13c2>
					uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   162d4:	8c70      	ldrh	r0, [r6, #34]	; 0x22
					if ((interval_min < 6) ||
   162d6:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
					uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   162da:	b283      	uxth	r3, r0
					if ((interval_min < 6) ||
   162dc:	f200 85bf 	bhi.w	16e5e <ull_conn_rx+0x13c2>
							(interval_max > 3200) ||
   162e0:	429a      	cmp	r2, r3
   162e2:	f200 85bc 	bhi.w	16e5e <ull_conn_rx+0x13c2>
					uint16_t latency = sys_le16_to_cpu(cpr->latency);
   162e6:	8cb1      	ldrh	r1, [r6, #36]	; 0x24
							(interval_min > interval_max) ||
   162e8:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
					uint16_t latency = sys_le16_to_cpu(cpr->latency);
   162ec:	fa1f fc81 	uxth.w	ip, r1
							(interval_min > interval_max) ||
   162f0:	f080 85b5 	bcs.w	16e5e <ull_conn_rx+0x13c2>
					uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
   162f4:	8cf2      	ldrh	r2, [r6, #38]	; 0x26
							(latency > 499) ||
   162f6:	f1a2 0e0a 	sub.w	lr, r2, #10
   162fa:	fa1f fe8e 	uxth.w	lr, lr
   162fe:	f640 4976 	movw	r9, #3190	; 0xc76
   16302:	45ce      	cmp	lr, r9
					uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
   16304:	fa1f f882 	uxth.w	r8, r2
							(latency > 499) ||
   16308:	f200 85a9 	bhi.w	16e5e <ull_conn_rx+0x13c2>
							 ((latency + 1) * interval_max)) ||
   1630c:	fb0c 3c03 	mla	ip, ip, r3, r3
							(timeout < 10) || (timeout > 3200) ||
   16310:	ebbc 0f88 	cmp.w	ip, r8, lsl #2
   16314:	f080 85a3 	bcs.w	16e5e <ull_conn_rx+0x13c2>
							 ((latency + 1) * interval_max)) ||
   16318:	f896 e028 	ldrb.w	lr, [r6, #40]	; 0x28
   1631c:	4573      	cmp	r3, lr
   1631e:	f0c0 859e 	bcc.w	16e5e <ull_conn_rx+0x13c2>
					conn->procedure_expire = 0U;
   16322:	2300      	movs	r3, #0
					conn->llcp_conn_param.timeout =	timeout;
   16324:	f8a5 2152 	strh.w	r2, [r5, #338]	; 0x152
					conn->llcp_conn_param.preferred_periodicity =
   16328:	f885 e154 	strb.w	lr, [r5, #340]	; 0x154
					conn->llcp_conn_param.interval_min = interval_min;
   1632c:	f8a5 714c 	strh.w	r7, [r5, #332]	; 0x14c
					conn->llcp_conn_param.interval_max = interval_max;
   16330:	f8a5 014e 	strh.w	r0, [r5, #334]	; 0x14e
					conn->llcp_conn_param.latency =	latency;
   16334:	f8a5 1150 	strh.w	r1, [r5, #336]	; 0x150
					conn->procedure_expire = 0U;
   16338:	f8a5 30b0 	strh.w	r3, [r5, #176]	; 0xb0
						sys_le16_to_cpu(cpr->reference_conn_event_count);
   1633c:	f896 102a 	ldrb.w	r1, [r6, #42]	; 0x2a
   16340:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
					conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   16344:	f895 214a 	ldrb.w	r2, [r5, #330]	; 0x14a
						sys_le16_to_cpu(cpr->reference_conn_event_count);
   16348:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
					conn->llcp_conn_param.reference_conn_event_count =
   1634c:	f8a5 3156 	strh.w	r3, [r5, #342]	; 0x156
						sys_le16_to_cpu(cpr->offset0);
   16350:	f896 102c 	ldrb.w	r1, [r6, #44]	; 0x2c
   16354:	f896 302b 	ldrb.w	r3, [r6, #43]	; 0x2b
   16358:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
					conn->llcp_conn_param.offset0 =
   1635c:	f8a5 3158 	strh.w	r3, [r5, #344]	; 0x158
						sys_le16_to_cpu(cpr->offset1);
   16360:	f896 102e 	ldrb.w	r1, [r6, #46]	; 0x2e
   16364:	f896 302d 	ldrb.w	r3, [r6, #45]	; 0x2d
   16368:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
					conn->llcp_conn_param.offset1 =
   1636c:	f8a5 315a 	strh.w	r3, [r5, #346]	; 0x15a
						sys_le16_to_cpu(cpr->offset2);
   16370:	f896 1030 	ldrb.w	r1, [r6, #48]	; 0x30
   16374:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
   16378:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
					conn->llcp_conn_param.offset2 =
   1637c:	f8a5 315c 	strh.w	r3, [r5, #348]	; 0x15c
						sys_le16_to_cpu(cpr->offset3);
   16380:	f896 1032 	ldrb.w	r1, [r6, #50]	; 0x32
   16384:	f896 3031 	ldrb.w	r3, [r6, #49]	; 0x31
   16388:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
					conn->llcp_conn_param.offset3 =
   1638c:	f8a5 315e 	strh.w	r3, [r5, #350]	; 0x15e
						sys_le16_to_cpu(cpr->offset4);
   16390:	f896 1034 	ldrb.w	r1, [r6, #52]	; 0x34
   16394:	f896 3033 	ldrb.w	r3, [r6, #51]	; 0x33
   16398:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
					conn->llcp_conn_param.offset4 =
   1639c:	f8a5 3160 	strh.w	r3, [r5, #352]	; 0x160
						sys_le16_to_cpu(cpr->offset5);
   163a0:	f896 3035 	ldrb.w	r3, [r6, #53]	; 0x35
   163a4:	f896 0036 	ldrb.w	r0, [r6, #54]	; 0x36
   163a8:	6826      	ldr	r6, [r4, #0]
					conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   163aa:	2101      	movs	r1, #1
						sys_le16_to_cpu(cpr->offset5);
   163ac:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
					conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   163b0:	f361 0202 	bfi	r2, r1, #0, #3
					conn->llcp_conn_param.offset5 =
   163b4:	f8a5 3162 	strh.w	r3, [r5, #354]	; 0x162
					conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   163b8:	f885 214a 	strb.w	r2, [r5, #330]	; 0x14a
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   163bc:	e4a9      	b.n	15d12 <ull_conn_rx+0x276>
				if (!conn->lll.role ||
   163be:	f995 303d 	ldrsb.w	r3, [r5, #61]	; 0x3d
   163c2:	2b00      	cmp	r3, #0
   163c4:	f6bf ac77 	bge.w	15cb6 <ull_conn_rx+0x21a>
				if (conn->lll.role ||
   163c8:	7f73      	ldrb	r3, [r6, #29]
   163ca:	2b09      	cmp	r3, #9
   163cc:	f47f ac73 	bne.w	15cb6 <ull_conn_rx+0x21a>
				nack = feature_rsp_send(conn, *rx, pdu_rx);
   163d0:	1d31      	adds	r1, r6, #4
   163d2:	4628      	mov	r0, r5
}
   163d4:	b005      	add	sp, #20
   163d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				nack = feature_rsp_send(conn, *rx, pdu_rx);
   163da:	f7fe bf1b 	b.w	15214 <feature_rsp_send.isra.0>
				if (conn->lll.role ||
   163de:	f995 303d 	ldrsb.w	r3, [r5, #61]	; 0x3d
   163e2:	2b00      	cmp	r3, #0
   163e4:	daf0      	bge.n	163c8 <ull_conn_rx+0x92c>
   163e6:	e466      	b.n	15cb6 <ull_conn_rx+0x21a>
				if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_IND, pdu_rx->len)) {
   163e8:	7f73      	ldrb	r3, [r6, #29]
   163ea:	2b02      	cmp	r3, #2
   163ec:	f47f ac63 	bne.w	15cb6 <ull_conn_rx+0x21a>
				conn->llcp_enc.pause_rx = 0U;
   163f0:	f895 212a 	ldrb.w	r2, [r5, #298]	; 0x12a
				conn->llcp_ack = conn->llcp_req;
   163f4:	f895 30bf 	ldrb.w	r3, [r5, #191]	; 0xbf
   163f8:	f885 30c0 	strb.w	r3, [r5, #192]	; 0xc0
				conn->llcp_enc.pause_rx = 0U;
   163fc:	f022 0203 	bic.w	r2, r2, #3
				conn->procedure_expire = 0U;
   16400:	2300      	movs	r3, #0
				conn->llcp_enc.pause_rx = 0U;
   16402:	f885 212a 	strb.w	r2, [r5, #298]	; 0x12a
				conn->procedure_expire = 0U;
   16406:	f8a5 30b0 	strh.w	r3, [r5, #176]	; 0xb0
		int nack = 0;
   1640a:	4618      	mov	r0, r3
				break;
   1640c:	f7ff bbf6 	b.w	15bfc <ull_conn_rx+0x160>
				if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_VERSION_IND,
   16410:	7f74      	ldrb	r4, [r6, #29]
   16412:	2c06      	cmp	r4, #6
   16414:	f47f ac4f 	bne.w	15cb6 <ull_conn_rx+0x21a>
		if (!conn->llcp_version.tx) {
   16418:	f895 30fe 	ldrb.w	r3, [r5, #254]	; 0xfe
   1641c:	07df      	lsls	r7, r3, #31
   1641e:	f140 83c9 	bpl.w	16bb4 <ull_conn_rx+0x1118>
		} else if (!conn->llcp_version.rx) {
   16422:	f013 0302 	ands.w	r3, r3, #2
   16426:	f47f ac74 	bne.w	15d12 <ull_conn_rx+0x276>
			conn->llcp_version.ack = conn->llcp_version.req;
   1642a:	f895 20fc 	ldrb.w	r2, [r5, #252]	; 0xfc
			conn->procedure_expire = 0U;
   1642e:	f8a5 30b0 	strh.w	r3, [r5, #176]	; 0xb0
			conn->llcp_version.ack = conn->llcp_version.req;
   16432:	f885 20fd 	strb.w	r2, [r5, #253]	; 0xfd
		conn->llcp_version.version_number = v->version_number;
   16436:	f896 3020 	ldrb.w	r3, [r6, #32]
   1643a:	f885 30ff 	strb.w	r3, [r5, #255]	; 0xff
		conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
   1643e:	f896 1022 	ldrb.w	r1, [r6, #34]	; 0x22
   16442:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
		conn->llcp_version.rx = 1U;
   16446:	f895 30fe 	ldrb.w	r3, [r5, #254]	; 0xfe
		conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
   1644a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1644e:	f8a5 2100 	strh.w	r2, [r5, #256]	; 0x100
			sys_le16_to_cpu(v->sub_version_number);
   16452:	f896 2023 	ldrb.w	r2, [r6, #35]	; 0x23
   16456:	f896 1024 	ldrb.w	r1, [r6, #36]	; 0x24
		conn->llcp_version.rx = 1U;
   1645a:	f043 0302 	orr.w	r3, r3, #2
			sys_le16_to_cpu(v->sub_version_number);
   1645e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
		conn->llcp_version.sub_version_number =
   16462:	f8a5 2102 	strh.w	r2, [r5, #258]	; 0x102
		conn->llcp_version.rx = 1U;
   16466:	f885 30fe 	strb.w	r3, [r5, #254]	; 0xfe
		return 0;
   1646a:	2000      	movs	r0, #0
   1646c:	f7ff bbc6 	b.w	15bfc <ull_conn_rx+0x160>
				if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ,
   16470:	7f73      	ldrb	r3, [r6, #29]
   16472:	2b18      	cmp	r3, #24
   16474:	f47f ac1f 	bne.w	15cb6 <ull_conn_rx+0x21a>
				if (conn_upd_curr && (conn_upd_curr != conn)) {
   16478:	4f3b      	ldr	r7, [pc, #236]	; (16568 <ull_conn_rx+0xacc>)
   1647a:	683b      	ldr	r3, [r7, #0]
   1647c:	2b00      	cmp	r3, #0
   1647e:	f000 81b5 	beq.w	167ec <ull_conn_rx+0xd50>
   16482:	429d      	cmp	r5, r3
   16484:	f000 81b2 	beq.w	167ec <ull_conn_rx+0xd50>
					nack = reject_ext_ind_send(conn, *rx,
   16488:	1d31      	adds	r1, r6, #4
   1648a:	4628      	mov	r0, r5
   1648c:	2320      	movs	r3, #32
   1648e:	220f      	movs	r2, #15
   16490:	e537      	b.n	15f02 <ull_conn_rx+0x466>
				if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP,
   16492:	7f73      	ldrb	r3, [r6, #29]
   16494:	2b02      	cmp	r3, #2
   16496:	f47f ac0e 	bne.w	15cb6 <ull_conn_rx+0x21a>
				} else if ((conn->llcp_conn_param.ack !=
   1649a:	f895 1149 	ldrb.w	r1, [r5, #329]	; 0x149
   1649e:	f895 3148 	ldrb.w	r3, [r5, #328]	; 0x148
   164a2:	f896 2020 	ldrb.w	r2, [r6, #32]
   164a6:	4299      	cmp	r1, r3
   164a8:	d002      	beq.n	164b0 <ull_conn_rx+0xa14>
							conn->llcp_conn_param.req) &&
   164aa:	2a0f      	cmp	r2, #15
   164ac:	f000 8336 	beq.w	16b1c <ull_conn_rx+0x1080>
				} else if ((conn->llcp_length.req != conn->llcp_length.ack) &&
   164b0:	f895 3170 	ldrb.w	r3, [r5, #368]	; 0x170
   164b4:	f895 1171 	ldrb.w	r1, [r5, #369]	; 0x171
   164b8:	4299      	cmp	r1, r3
   164ba:	d002      	beq.n	164c2 <ull_conn_rx+0xa26>
   164bc:	2a14      	cmp	r2, #20
   164be:	f000 84b8 	beq.w	16e32 <ull_conn_rx+0x1396>
				} else if ((conn->llcp_phy.req != conn->llcp_phy.ack) &&
   164c2:	f895 1180 	ldrb.w	r1, [r5, #384]	; 0x180
   164c6:	f895 3181 	ldrb.w	r3, [r5, #385]	; 0x181
   164ca:	428b      	cmp	r3, r1
   164cc:	d002      	beq.n	164d4 <ull_conn_rx+0xa38>
   164ce:	2a16      	cmp	r2, #22
   164d0:	f000 84d3 	beq.w	16e7a <ull_conn_rx+0x13de>
					switch (llctrl->unknown_rsp.type) {
   164d4:	2a12      	cmp	r2, #18
							(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   164d6:	bf04      	itt	eq
   164d8:	2303      	moveq	r3, #3
   164da:	7133      	strbeq	r3, [r6, #4]
							break;
   164dc:	e45c      	b.n	15d98 <ull_conn_rx+0x2fc>
				if (!conn->lll.role ||
   164de:	f995 303d 	ldrsb.w	r3, [r5, #61]	; 0x3d
   164e2:	2b00      	cmp	r3, #0
   164e4:	f6bf abe7 	bge.w	15cb6 <ull_conn_rx+0x21a>
   164e8:	7f73      	ldrb	r3, [r6, #29]
   164ea:	2b17      	cmp	r3, #23
   164ec:	f47f abe3 	bne.w	15cb6 <ull_conn_rx+0x21a>
				memcpy(&conn->llcp_enc.rand[0],
   164f0:	2208      	movs	r2, #8
   164f2:	f106 0120 	add.w	r1, r6, #32
   164f6:	f205 102d 	addw	r0, r5, #301	; 0x12d
   164fa:	f009 fcbc 	bl	1fe76 <memcpy>
				conn->llcp_enc.ediv[0] = pdu_rx->llctrl.enc_req.ediv[0];
   164fe:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
   16502:	f885 312b 	strb.w	r3, [r5, #299]	; 0x12b
				conn->llcp_enc.ediv[1] = pdu_rx->llctrl.enc_req.ediv[1];
   16506:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
   1650a:	f885 312c 	strb.w	r3, [r5, #300]	; 0x12c
				conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   1650e:	f895 30c4 	ldrb.w	r3, [r5, #196]	; 0xc4
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   16512:	6821      	ldr	r1, [r4, #0]
				conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   16514:	2201      	movs	r2, #1
   16516:	f362 0301 	bfi	r3, r2, #0, #2
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   1651a:	2203      	movs	r2, #3
				conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   1651c:	f885 30c4 	strb.w	r3, [r5, #196]	; 0xc4
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   16520:	710a      	strb	r2, [r1, #4]
				conn->llcp_ack -= 2U;
   16522:	f895 30c0 	ldrb.w	r3, [r5, #192]	; 0xc0
				conn->llcp_type = LLCP_ENCRYPTION;
   16526:	f885 20c1 	strb.w	r2, [r5, #193]	; 0xc1
				conn->llcp_ack -= 2U;
   1652a:	3b02      	subs	r3, #2
   1652c:	f885 30c0 	strb.w	r3, [r5, #192]	; 0xc0
				memcpy(&conn->llcp.encryption.skd[0],
   16530:	2208      	movs	r2, #8
   16532:	f106 012a 	add.w	r1, r6, #42	; 0x2a
   16536:	f105 00c6 	add.w	r0, r5, #198	; 0xc6
   1653a:	f009 fc9c 	bl	1fe76 <memcpy>
				memcpy(&conn->lll.ccm_rx.iv[0],
   1653e:	2204      	movs	r2, #4
   16540:	f106 0132 	add.w	r1, r6, #50	; 0x32
   16544:	f105 007c 	add.w	r0, r5, #124	; 0x7c
   16548:	f009 fc95 	bl	1fe76 <memcpy>
				conn->llcp_enc.pause_rx = 1U;
   1654c:	f895 312a 	ldrb.w	r3, [r5, #298]	; 0x12a
				conn->procedure_expire = conn->procedure_reload;
   16550:	f8b5 20ae 	ldrh.w	r2, [r5, #174]	; 0xae
   16554:	f8a5 20b0 	strh.w	r2, [r5, #176]	; 0xb0
				conn->llcp_enc.pause_rx = 1U;
   16558:	f043 0301 	orr.w	r3, r3, #1
   1655c:	f885 312a 	strb.w	r3, [r5, #298]	; 0x12a
		int nack = 0;
   16560:	2000      	movs	r0, #0
				break;
   16562:	f7ff bb4b 	b.w	15bfc <ull_conn_rx+0x160>
   16566:	bf00      	nop
   16568:	20006980 	.word	0x20006980
				if (conn->lll.role ||
   1656c:	f995 303d 	ldrsb.w	r3, [r5, #61]	; 0x3d
   16570:	2b00      	cmp	r3, #0
   16572:	f6ff aba0 	blt.w	15cb6 <ull_conn_rx+0x21a>
   16576:	7f73      	ldrb	r3, [r6, #29]
   16578:	2b0d      	cmp	r3, #13
   1657a:	f47f ab9c 	bne.w	15cb6 <ull_conn_rx+0x21a>
				memcpy(&conn->llcp.encryption.skd[8],
   1657e:	2208      	movs	r2, #8
   16580:	f106 0120 	add.w	r1, r6, #32
   16584:	f105 00ce 	add.w	r0, r5, #206	; 0xce
   16588:	f009 fc75 	bl	1fe76 <memcpy>
				memcpy(&conn->lll.ccm_rx.iv[4],
   1658c:	f106 0128 	add.w	r1, r6, #40	; 0x28
   16590:	2204      	movs	r2, #4
   16592:	f105 0080 	add.w	r0, r5, #128	; 0x80
   16596:	f009 fc6e 	bl	1fe76 <memcpy>
				conn->llcp_enc.pause_rx = 1U;
   1659a:	f895 312a 	ldrb.w	r3, [r5, #298]	; 0x12a
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   1659e:	6822      	ldr	r2, [r4, #0]
				conn->llcp_enc.pause_rx = 1U;
   165a0:	f043 0301 	orr.w	r3, r3, #1
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   165a4:	2103      	movs	r1, #3
				conn->llcp_enc.pause_rx = 1U;
   165a6:	f885 312a 	strb.w	r3, [r5, #298]	; 0x12a
		int nack = 0;
   165aa:	2000      	movs	r0, #0
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   165ac:	7111      	strb	r1, [r2, #4]
				break;
   165ae:	f7ff bb25 	b.w	15bfc <ull_conn_rx+0x160>
				if (conn->lll.role || (conn->llcp_req == conn->llcp_ack) ||
   165b2:	f995 303d 	ldrsb.w	r3, [r5, #61]	; 0x3d
   165b6:	2b00      	cmp	r3, #0
   165b8:	f6ff ab7d 	blt.w	15cb6 <ull_conn_rx+0x21a>
   165bc:	f895 20bf 	ldrb.w	r2, [r5, #191]	; 0xbf
   165c0:	f895 30c0 	ldrb.w	r3, [r5, #192]	; 0xc0
   165c4:	429a      	cmp	r2, r3
   165c6:	f43f ab76 	beq.w	15cb6 <ull_conn_rx+0x21a>
   165ca:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
   165ce:	2b03      	cmp	r3, #3
   165d0:	f47f ab71 	bne.w	15cb6 <ull_conn_rx+0x21a>
						(conn->llcp_type != LLCP_ENCRYPTION) ||
   165d4:	7f72      	ldrb	r2, [r6, #29]
   165d6:	2a01      	cmp	r2, #1
   165d8:	f47f ab6d 	bne.w	15cb6 <ull_conn_rx+0x21a>
				conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   165dc:	f895 20c4 	ldrb.w	r2, [r5, #196]	; 0xc4
   165e0:	f36f 0201 	bfc	r2, #0, #2
   165e4:	f885 20c4 	strb.w	r2, [r5, #196]	; 0xc4
		int nack = 0;
   165e8:	2000      	movs	r0, #0
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   165ea:	7133      	strb	r3, [r6, #4]
				break;
   165ec:	f7ff bb06 	b.w	15bfc <ull_conn_rx+0x160>
				if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_RSP,
   165f0:	7f73      	ldrb	r3, [r6, #29]
   165f2:	2b01      	cmp	r3, #1
   165f4:	f47f ab5f 	bne.w	15cb6 <ull_conn_rx+0x21a>
				if (conn->lll.role) {
   165f8:	f995 303d 	ldrsb.w	r3, [r5, #61]	; 0x3d
   165fc:	2b00      	cmp	r3, #0
   165fe:	f6ff abb1 	blt.w	15d64 <ull_conn_rx+0x2c8>
					conn->llcp_enc.pause_rx = 0U;
   16602:	f895 112a 	ldrb.w	r1, [r5, #298]	; 0x12a
   16606:	f021 0103 	bic.w	r1, r1, #3
   1660a:	f885 112a 	strb.w	r1, [r5, #298]	; 0x12a
   1660e:	f7ff bbba 	b.w	15d86 <ull_conn_rx+0x2ea>
				if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP,
   16612:	7f73      	ldrb	r3, [r6, #29]
   16614:	2b01      	cmp	r3, #1
   16616:	f47f ab4e 	bne.w	15cb6 <ull_conn_rx+0x21a>
		} else if (!conn->lll.role) {
   1661a:	f995 303d 	ldrsb.w	r3, [r5, #61]	; 0x3d
   1661e:	2b00      	cmp	r3, #0
   16620:	f280 80c7 	bge.w	167b2 <ull_conn_rx+0xd16>
			conn->lll.enc_tx = 0;
   16624:	f895 3062 	ldrb.w	r3, [r5, #98]	; 0x62
   16628:	f36f 1304 	bfc	r3, #4, #1
   1662c:	f885 3062 	strb.w	r3, [r5, #98]	; 0x62
			goto pause_enc_rsp_send_exit;
   16630:	f7ff bb6f 	b.w	15d12 <ull_conn_rx+0x276>
				if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   16634:	f895 0180 	ldrb.w	r0, [r5, #384]	; 0x180
   16638:	f895 3181 	ldrb.w	r3, [r5, #385]	; 0x181
   1663c:	4283      	cmp	r3, r0
   1663e:	f43f ab68 	beq.w	15d12 <ull_conn_rx+0x276>
		if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   16642:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
   16646:	2a23      	cmp	r2, #35	; 0x23
   16648:	d012      	beq.n	16670 <ull_conn_rx+0xbd4>
			conn->lll.phy_tx_time = conn->lll.phy_tx;
   1664a:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
			conn->llcp_phy.pause_tx = 0U;
   1664e:	f895 1183 	ldrb.w	r1, [r5, #387]	; 0x183
			conn->llcp_phy.ack = conn->llcp_phy.req;
   16652:	f885 0181 	strb.w	r0, [r5, #385]	; 0x181
			conn->lll.phy_tx_time = conn->lll.phy_tx;
   16656:	f3c3 0002 	ubfx	r0, r3, #0, #3
   1665a:	f360 1306 	bfi	r3, r0, #4, #3
			conn->llcp_phy.pause_tx = 0U;
   1665e:	f36f 0100 	bfc	r1, #0, #1
			conn->procedure_expire = 0U;
   16662:	2000      	movs	r0, #0
			conn->lll.phy_tx_time = conn->lll.phy_tx;
   16664:	f885 3048 	strb.w	r3, [r5, #72]	; 0x48
			conn->llcp_phy.pause_tx = 0U;
   16668:	f885 1183 	strb.w	r1, [r5, #387]	; 0x183
			conn->procedure_expire = 0U;
   1666c:	f8a5 00b0 	strh.w	r0, [r5, #176]	; 0xb0
		if (!conn->llcp_phy.cmd) {
   16670:	f895 3183 	ldrb.w	r3, [r5, #387]	; 0x183
   16674:	0759      	lsls	r1, r3, #29
   16676:	f57f ab4c 	bpl.w	15d12 <ull_conn_rx+0x276>
		rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   1667a:	230f      	movs	r3, #15
		p->status = rej_ext_ind->error_code;
   1667c:	7732      	strb	r2, [r6, #28]
		rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   1667e:	7133      	strb	r3, [r6, #4]
		p->tx = conn->lll.phy_tx;
   16680:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
   16684:	f3c3 0302 	ubfx	r3, r3, #0, #3
   16688:	7773      	strb	r3, [r6, #29]
		p->rx = conn->lll.phy_rx;
   1668a:	f895 3049 	ldrb.w	r3, [r5, #73]	; 0x49
   1668e:	f3c3 0302 	ubfx	r3, r3, #0, #3
   16692:	77b3      	strb	r3, [r6, #30]
		int nack = 0;
   16694:	2000      	movs	r0, #0
   16696:	f7ff bab1 	b.w	15bfc <ull_conn_rx+0x160>
				if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   1669a:	f895 2149 	ldrb.w	r2, [r5, #329]	; 0x149
   1669e:	f895 3148 	ldrb.w	r3, [r5, #328]	; 0x148
   166a2:	429a      	cmp	r2, r3
   166a4:	f43f ab35 	beq.w	15d12 <ull_conn_rx+0x276>
		need_schedule_update = need_schedule_cnt;
   166a8:	48d9      	ldr	r0, [pc, #868]	; (16a10 <ull_conn_rx+0xf74>)
   166aa:	4ada      	ldr	r2, [pc, #872]	; (16a14 <ull_conn_rx+0xf78>)
   166ac:	6800      	ldr	r0, [r0, #0]
   166ae:	6010      	str	r0, [r2, #0]
		if (!lll->role && (rej_ext_ind->error_code ==
   166b0:	f995 203d 	ldrsb.w	r2, [r5, #61]	; 0x3d
		need_conn_update = false;
   166b4:	49d8      	ldr	r1, [pc, #864]	; (16a18 <ull_conn_rx+0xf7c>)
   166b6:	2000      	movs	r0, #0
		if (!lll->role && (rej_ext_ind->error_code ==
   166b8:	4282      	cmp	r2, r0
		need_conn_update = false;
   166ba:	7008      	strb	r0, [r1, #0]
		if (!lll->role && (rej_ext_ind->error_code ==
   166bc:	db04      	blt.n	166c8 <ull_conn_rx+0xc2c>
   166be:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
   166c2:	2a1a      	cmp	r2, #26
   166c4:	f000 85ab 	beq.w	1721e <ull_conn_rx+0x1782>
		if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
   166c8:	f895 214a 	ldrb.w	r2, [r5, #330]	; 0x14a
   166cc:	f002 0107 	and.w	r1, r2, #7
   166d0:	2904      	cmp	r1, #4
   166d2:	f000 8535 	beq.w	17140 <ull_conn_rx+0x16a4>
		if (!conn->llcp_conn_param.cmd) {
   166d6:	0713      	lsls	r3, r2, #28
   166d8:	f57f ab1b 	bpl.w	15d12 <ull_conn_rx+0x276>
		cu->status = rej_ext_ind->error_code;
   166dc:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
   166e0:	7733      	strb	r3, [r6, #28]
		rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   166e2:	220b      	movs	r2, #11
   166e4:	7132      	strb	r2, [r6, #4]
		cu->interval = lll->interval;
   166e6:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
		cu->timeout = conn->supervision_reload *
   166e8:	f8b5 20aa 	ldrh.w	r2, [r5, #170]	; 0xaa
		cu->latency = lll->latency;
   166ec:	8e29      	ldrh	r1, [r5, #48]	; 0x30
		cu->interval = lll->interval;
   166ee:	83f3      	strh	r3, [r6, #30]
		cu->timeout = conn->supervision_reload *
   166f0:	fb03 f202 	mul.w	r2, r3, r2
			lll->interval * 125U / 1000;
   166f4:	237d      	movs	r3, #125	; 0x7d
   166f6:	fb03 f302 	mul.w	r3, r3, r2
		cu->latency = lll->latency;
   166fa:	8431      	strh	r1, [r6, #32]
			lll->interval * 125U / 1000;
   166fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
		int nack = 0;
   16700:	2000      	movs	r0, #0
			lll->interval * 125U / 1000;
   16702:	fbb3 f3f2 	udiv	r3, r3, r2
		cu->timeout = conn->supervision_reload *
   16706:	8473      	strh	r3, [r6, #34]	; 0x22
		if (err) {
   16708:	f7ff ba78 	b.w	15bfc <ull_conn_rx+0x160>
				if ((conn->llcp_ack != conn->llcp_req) &&
   1670c:	f895 30bf 	ldrb.w	r3, [r5, #191]	; 0xbf
   16710:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
   16714:	429a      	cmp	r2, r3
   16716:	f43f aafc 	beq.w	15d12 <ull_conn_rx+0x276>
   1671a:	f895 20c1 	ldrb.w	r2, [r5, #193]	; 0xc1
   1671e:	2a03      	cmp	r2, #3
   16720:	f47f aaf7 	bne.w	15d12 <ull_conn_rx+0x276>
		conn->llcp_enc.pause_rx = 0U;
   16724:	f895 212a 	ldrb.w	r2, [r5, #298]	; 0x12a
		conn->llcp_ack = conn->llcp_req;
   16728:	f885 30c0 	strb.w	r3, [r5, #192]	; 0xc0
		conn->llcp_enc.pause_rx = 0U;
   1672c:	f022 0203 	bic.w	r2, r2, #3
		conn->procedure_expire = 0U;
   16730:	2300      	movs	r3, #0
		conn->llcp_enc.pause_rx = 0U;
   16732:	f885 212a 	strb.w	r2, [r5, #298]	; 0x12a
		conn->procedure_expire = 0U;
   16736:	f8a5 30b0 	strh.w	r3, [r5, #176]	; 0xb0
		pdu_rx->llctrl.reject_ind.error_code = rej_ext_ind->error_code;
   1673a:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
   1673e:	f886 2020 	strb.w	r2, [r6, #32]
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   16742:	220d      	movs	r2, #13
		int nack = 0;
   16744:	4618      	mov	r0, r3
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   16746:	77f2      	strb	r2, [r6, #31]
		if (err) {
   16748:	f7ff ba58 	b.w	15bfc <ull_conn_rx+0x160>
				if (conn->llcp_length.ack != conn->llcp_length.req) {
   1674c:	f895 2170 	ldrb.w	r2, [r5, #368]	; 0x170
   16750:	f895 3171 	ldrb.w	r3, [r5, #369]	; 0x171
   16754:	4293      	cmp	r3, r2
   16756:	f43f aadc 	beq.w	15d12 <ull_conn_rx+0x276>
		conn->procedure_expire = 0U;
   1675a:	2300      	movs	r3, #0
		pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   1675c:	2109      	movs	r1, #9
		conn->llcp_length.ack = conn->llcp_length.req;
   1675e:	f885 2171 	strb.w	r2, [r5, #369]	; 0x171
		conn->procedure_expire = 0U;
   16762:	f8a5 30b0 	strh.w	r3, [r5, #176]	; 0xb0
		pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   16766:	7771      	strb	r1, [r6, #29]
		lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
   16768:	f8b5 2042 	ldrh.w	r2, [r5, #66]	; 0x42
		lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
   1676c:	f8b5 7040 	ldrh.w	r7, [r5, #64]	; 0x40
		lr->max_rx_time = sys_cpu_to_le16(conn->lll.max_rx_time);
   16770:	f8b5 4046 	ldrh.w	r4, [r5, #70]	; 0x46
		lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
   16774:	f8b5 1044 	ldrh.w	r1, [r5, #68]	; 0x44
		lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
   16778:	8432      	strh	r2, [r6, #32]
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   1677a:	2215      	movs	r2, #21
		int nack = 0;
   1677c:	4618      	mov	r0, r3
		lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
   1677e:	84b7      	strh	r7, [r6, #36]	; 0x24
		lr->max_rx_time = sys_cpu_to_le16(conn->lll.max_rx_time);
   16780:	8474      	strh	r4, [r6, #34]	; 0x22
		lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
   16782:	84f1      	strh	r1, [r6, #38]	; 0x26
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   16784:	77f2      	strb	r2, [r6, #31]
		if (err) {
   16786:	f7ff ba39 	b.w	15bfc <ull_conn_rx+0x160>
		conn->tx_data_last = tx;
   1678a:	f8c5 0198 	str.w	r0, [r5, #408]	; 0x198
   1678e:	f7ff bac0 	b.w	15d12 <ull_conn_rx+0x276>
				((!conn->llcp_enc.refresh &&
   16792:	f1b8 0f02 	cmp.w	r8, #2
   16796:	f47f a9bd 	bne.w	15b14 <ull_conn_rx+0x78>
   1679a:	e4cd      	b.n	16138 <ull_conn_rx+0x69c>
			tx->next = conn->tx_head;
   1679c:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   1679e:	e9c5 0062 	strd	r0, r0, [r5, #392]	; 0x188
				conn->tx_ctrl_last = tx;
   167a2:	f8c5 0190 	str.w	r0, [r5, #400]	; 0x190
   167a6:	f7ff bab1 	b.w	15d0c <ull_conn_rx+0x270>
				if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP,
   167aa:	7f73      	ldrb	r3, [r6, #29]
   167ac:	2b01      	cmp	r3, #1
   167ae:	f47f aa82 	bne.w	15cb6 <ull_conn_rx+0x21a>
			tx = mem_acquire(&mem_conn_tx_ctrl.free);
   167b2:	489a      	ldr	r0, [pc, #616]	; (16a1c <ull_conn_rx+0xf80>)
   167b4:	f7f9 fc32 	bl	1001c <mem_acquire>
			if (!tx) {
   167b8:	4603      	mov	r3, r0
   167ba:	2800      	cmp	r0, #0
   167bc:	d050      	beq.n	16860 <ull_conn_rx+0xdc4>
		conn->llcp_enc.pause_rx = 1U;
   167be:	f895 012a 	ldrb.w	r0, [r5, #298]	; 0x12a
		conn->lll.enc_rx = 0;
   167c2:	f895 2062 	ldrb.w	r2, [r5, #98]	; 0x62
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   167c6:	7919      	ldrb	r1, [r3, #4]
		conn->llcp_enc.pause_rx = 1U;
   167c8:	f040 0001 	orr.w	r0, r0, #1
   167cc:	f885 012a 	strb.w	r0, [r5, #298]	; 0x12a
		conn->lll.enc_rx = 0;
   167d0:	f022 0218 	bic.w	r2, r2, #24
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   167d4:	2001      	movs	r0, #1
		conn->lll.enc_rx = 0;
   167d6:	f885 2062 	strb.w	r2, [r5, #98]	; 0x62
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   167da:	7158      	strb	r0, [r3, #5]
   167dc:	f7ff bbb6 	b.w	15f4c <ull_conn_rx+0x4b0>
				if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_RSP,
   167e0:	7f73      	ldrb	r3, [r6, #29]
   167e2:	2b01      	cmp	r3, #1
   167e4:	f43f af0d 	beq.w	16602 <ull_conn_rx+0xb66>
   167e8:	f7ff ba65 	b.w	15cb6 <ull_conn_rx+0x21a>
				if (!conn->lll.role) {
   167ec:	f995 c03d 	ldrsb.w	ip, [r5, #61]	; 0x3d
   167f0:	f895 0149 	ldrb.w	r0, [r5, #329]	; 0x149
   167f4:	f895 2148 	ldrb.w	r2, [r5, #328]	; 0x148
   167f8:	9000      	str	r0, [sp, #0]
   167fa:	f1bc 0f00 	cmp.w	ip, #0
   167fe:	f2c0 80ed 	blt.w	169dc <ull_conn_rx+0xf40>
					if ((conn->llcp_conn_param.req !=
   16802:	4282      	cmp	r2, r0
   16804:	d009      	beq.n	1681a <ull_conn_rx+0xd7e>
							((conn->llcp_conn_param.state ==
   16806:	f895 214a 	ldrb.w	r2, [r5, #330]	; 0x14a
								conn->llcp_conn_param.ack) &&
   1680a:	f012 0207 	ands.w	r2, r2, #7
   1680e:	f000 830a 	beq.w	16e26 <ull_conn_rx+0x138a>
							  LLCP_CPR_STATE_REQ) ||
   16812:	3a04      	subs	r2, #4
   16814:	2a01      	cmp	r2, #1
   16816:	f240 8306 	bls.w	16e26 <ull_conn_rx+0x138a>
					} else if (((((conn->llcp_req - conn->llcp_ack) &
   1681a:	f895 20bf 	ldrb.w	r2, [r5, #191]	; 0xbf
   1681e:	f895 00c0 	ldrb.w	r0, [r5, #192]	; 0xc0
   16822:	1a12      	subs	r2, r2, r0
   16824:	f002 0203 	and.w	r2, r2, #3
   16828:	2a02      	cmp	r2, #2
   1682a:	f000 83d1 	beq.w	16fd0 <ull_conn_rx+0x1534>
								(conn->llcp_type != LLCP_ENCRYPTION)) ||
   1682e:	f895 0180 	ldrb.w	r0, [r5, #384]	; 0x180
   16832:	f895 2181 	ldrb.w	r2, [r5, #385]	; 0x181
   16836:	4290      	cmp	r0, r2
   16838:	f000 83d0 	beq.w	16fdc <ull_conn_rx+0x1540>
						nack = reject_ext_ind_send(conn, *rx,
   1683c:	1d31      	adds	r1, r6, #4
   1683e:	4628      	mov	r0, r5
   16840:	232a      	movs	r3, #42	; 0x2a
   16842:	220f      	movs	r2, #15
   16844:	f7ff bb5d 	b.w	15f02 <ull_conn_rx+0x466>
		if (!conn->tx_ctrl) {
   16848:	f8d5 118c 	ldr.w	r1, [r5, #396]	; 0x18c
   1684c:	2900      	cmp	r1, #0
   1684e:	f47f ab9d 	bne.w	15f8c <ull_conn_rx+0x4f0>
			tx->next = conn->tx_head;
   16852:	601a      	str	r2, [r3, #0]
				conn->tx_ctrl = tx;
   16854:	e9c5 3362 	strd	r3, r3, [r5, #392]	; 0x188
				conn->tx_ctrl_last = tx;
   16858:	f8c5 3190 	str.w	r3, [r5, #400]	; 0x190
   1685c:	f7ff bb9d 	b.w	15f9a <ull_conn_rx+0x4fe>
				return -ENOBUFS;
   16860:	f06f 0036 	mvn.w	r0, #54	; 0x36
   16864:	f7ff b9ca 	b.w	15bfc <ull_conn_rx+0x160>
			tx = mem_acquire(&mem_conn_tx_ctrl.free);
   16868:	486c      	ldr	r0, [pc, #432]	; (16a1c <ull_conn_rx+0xf80>)
   1686a:	f7f9 fbd7 	bl	1001c <mem_acquire>
			if (!tx) {
   1686e:	4601      	mov	r1, r0
   16870:	2800      	cmp	r0, #0
   16872:	d0f5      	beq.n	16860 <ull_conn_rx+0xdc4>
				((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   16874:	f895 0170 	ldrb.w	r0, [r5, #368]	; 0x170
   16878:	f895 3171 	ldrb.w	r3, [r5, #369]	; 0x171
		eff_rx_octets = conn->lll.max_rx_octets;
   1687c:	f8b5 2042 	ldrh.w	r2, [r5, #66]	; 0x42
		eff_tx_octets = conn->lll.max_tx_octets;
   16880:	f8b5 9040 	ldrh.w	r9, [r5, #64]	; 0x40
		eff_rx_time = conn->lll.max_rx_time;
   16884:	f8b5 a046 	ldrh.w	sl, [r5, #70]	; 0x46
		eff_tx_time = conn->lll.max_tx_time;
   16888:	f8b5 b044 	ldrh.w	fp, [r5, #68]	; 0x44
				((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   1688c:	9000      	str	r0, [sp, #0]
		if (/* Local idle, and Peer request then complete the Peer procedure
   1688e:	4298      	cmp	r0, r3
		eff_rx_octets = conn->lll.max_rx_octets;
   16890:	9201      	str	r2, [sp, #4]
		if (/* Local idle, and Peer request then complete the Peer procedure
   16892:	f040 8484 	bne.w	1719e <ull_conn_rx+0x1702>
			max_rx_octets = sys_le16_to_cpu(lr->max_rx_octets);
   16896:	8c33      	ldrh	r3, [r6, #32]
			if (max_rx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   16898:	2b1a      	cmp	r3, #26
   1689a:	f240 82d9 	bls.w	16e50 <ull_conn_rx+0x13b4>
				eff_tx_octets = MIN(max_rx_octets,
   1689e:	f8b5 c0ba 	ldrh.w	ip, [r5, #186]	; 0xba
   168a2:	459c      	cmp	ip, r3
   168a4:	bf28      	it	cs
   168a6:	469c      	movcs	ip, r3
			max_tx_octets = sys_le16_to_cpu(lr->max_tx_octets);
   168a8:	f8b6 e024 	ldrh.w	lr, [r6, #36]	; 0x24
			if (max_tx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   168ac:	f1be 0f1a 	cmp.w	lr, #26
   168b0:	f240 82cb 	bls.w	16e4a <ull_conn_rx+0x13ae>
				eff_rx_octets = MIN(max_tx_octets,
   168b4:	f1be 0ffb 	cmp.w	lr, #251	; 0xfb
   168b8:	bf28      	it	cs
   168ba:	f04f 0efb 	movcs.w	lr, #251	; 0xfb
		if (!conn->common.fex_valid ||
   168be:	f895 80be 	ldrb.w	r8, [r5, #190]	; 0xbe
		feature_coded_phy = (conn->llcp_feature.features_conn &
   168c2:	f8d5 20f4 	ldr.w	r2, [r5, #244]	; 0xf4
		if (!conn->common.fex_valid ||
   168c6:	f8b5 30bc 	ldrh.w	r3, [r5, #188]	; 0xbc
   168ca:	f018 0f01 	tst.w	r8, #1
   168ce:	f000 8082 	beq.w	169d6 <ull_conn_rx+0xf3a>
   168d2:	0510      	lsls	r0, r2, #20
   168d4:	d57f      	bpl.n	169d6 <ull_conn_rx+0xf3a>
			tx_time = MIN(PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED),
   168d6:	f244 2290 	movw	r2, #17040	; 0x4290
   168da:	4293      	cmp	r3, r2
			rx_time = MAX(PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED),
   168dc:	9202      	str	r2, [sp, #8]
			tx_time = MIN(PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED),
   168de:	bf28      	it	cs
   168e0:	4613      	movcs	r3, r2
			lr_rx_time = sys_le16_to_cpu(lr->max_rx_time);
   168e2:	f8b6 8022 	ldrh.w	r8, [r6, #34]	; 0x22
			lr_tx_time = sys_le16_to_cpu(lr->max_tx_time);
   168e6:	8cf2      	ldrh	r2, [r6, #38]	; 0x26
			tx_time = MAX(PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M), tx_time);
   168e8:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   168ec:	bf38      	it	cc
   168ee:	f44f 73a4 	movcc.w	r3, #328	; 0x148
			if (lr_rx_time >= PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M)) {
   168f2:	f5b8 7fa4 	cmp.w	r8, #328	; 0x148
			lr_tx_time = sys_le16_to_cpu(lr->max_tx_time);
   168f6:	4610      	mov	r0, r2
			if (lr_rx_time >= PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M)) {
   168f8:	f0c0 828c 	bcc.w	16e14 <ull_conn_rx+0x1378>
				eff_tx_time = MAX(eff_tx_time,
   168fc:	f895 2048 	ldrb.w	r2, [r5, #72]	; 0x48
				eff_tx_time = MIN(lr_rx_time, max_tx_time);
   16900:	4598      	cmp	r8, r3
   16902:	bf28      	it	cs
   16904:	4698      	movcs	r8, r3
				eff_tx_time = MAX(eff_tx_time,
   16906:	f002 0307 	and.w	r3, r2, #7
   1690a:	0752      	lsls	r2, r2, #29
   1690c:	f100 8319 	bmi.w	16f42 <ull_conn_rx+0x14a6>
   16910:	f103 0228 	add.w	r2, r3, #40	; 0x28
   16914:	00d2      	lsls	r2, r2, #3
   16916:	105b      	asrs	r3, r3, #1
   16918:	fa22 f303 	lsr.w	r3, r2, r3
   1691c:	4543      	cmp	r3, r8
   1691e:	bf38      	it	cc
   16920:	4643      	movcc	r3, r8
   16922:	b29b      	uxth	r3, r3
			if (lr_tx_time >= PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M)) {
   16924:	f5b0 7fa4 	cmp.w	r0, #328	; 0x148
   16928:	f0c0 828d 	bcc.w	16e46 <ull_conn_rx+0x13aa>
				eff_rx_time = MAX(eff_rx_time,
   1692c:	f895 2049 	ldrb.w	r2, [r5, #73]	; 0x49
   16930:	4690      	mov	r8, r2
				eff_rx_time = MIN(lr_tx_time, max_rx_time);
   16932:	9a02      	ldr	r2, [sp, #8]
   16934:	4290      	cmp	r0, r2
   16936:	bf28      	it	cs
   16938:	4610      	movcs	r0, r2
				eff_rx_time = MAX(eff_rx_time,
   1693a:	4642      	mov	r2, r8
   1693c:	0752      	lsls	r2, r2, #29
				eff_rx_time = MIN(lr_tx_time, max_rx_time);
   1693e:	9002      	str	r0, [sp, #8]
				eff_rx_time = MAX(eff_rx_time,
   16940:	f008 0807 	and.w	r8, r8, #7
   16944:	f100 82fa 	bmi.w	16f3c <ull_conn_rx+0x14a0>
   16948:	f108 0228 	add.w	r2, r8, #40	; 0x28
   1694c:	00d2      	lsls	r2, r2, #3
   1694e:	ea4f 0868 	mov.w	r8, r8, asr #1
   16952:	fa22 f808 	lsr.w	r8, r2, r8
   16956:	9a02      	ldr	r2, [sp, #8]
   16958:	4542      	cmp	r2, r8
   1695a:	bf38      	it	cc
   1695c:	4642      	movcc	r2, r8
   1695e:	b292      	uxth	r2, r2
			if (eff_rx_octets != conn->lll.max_rx_octets) {
   16960:	9801      	ldr	r0, [sp, #4]
   16962:	4586      	cmp	lr, r0
   16964:	f000 82af 	beq.w	16ec6 <ull_conn_rx+0x142a>
				conn->llcp_length.ack = conn->llcp_length.req - 1;
   16968:	9800      	ldr	r0, [sp, #0]
				conn->llcp_length.rx_octets = eff_rx_octets;
   1696a:	f8a5 e174 	strh.w	lr, [r5, #372]	; 0x174
				conn->llcp_length.ack = conn->llcp_length.req - 1;
   1696e:	3801      	subs	r0, #1
   16970:	f885 0171 	strb.w	r0, [r5, #369]	; 0x171
				conn->llcp_length.tx_octets = eff_tx_octets;
   16974:	f8a5 c176 	strh.w	ip, [r5, #374]	; 0x176
					conn->llcp_length.state =
   16978:	f895 0172 	ldrb.w	r0, [r5, #370]	; 0x172
				conn->llcp_length.rx_time = eff_rx_time;
   1697c:	f8a5 2178 	strh.w	r2, [r5, #376]	; 0x178
				conn->llcp_length.tx_time = eff_tx_time;
   16980:	f8a5 317a 	strh.w	r3, [r5, #378]	; 0x17a
				if (tx) {
   16984:	2900      	cmp	r1, #0
   16986:	f000 82df 	beq.w	16f48 <ull_conn_rx+0x14ac>
					conn->llcp_length.state =
   1698a:	2605      	movs	r6, #5
   1698c:	f366 0002 	bfi	r0, r6, #0, #3
   16990:	f885 0172 	strb.w	r0, [r5, #370]	; 0x172
				link->mem = conn->llcp_rx;
   16994:	f8d5 00d8 	ldr.w	r0, [r5, #216]	; 0xd8
   16998:	6078      	str	r0, [r7, #4]
				(*rx)->hdr.link = link;
   1699a:	6820      	ldr	r0, [r4, #0]
   1699c:	6007      	str	r7, [r0, #0]
				conn->llcp_rx = *rx;
   1699e:	6820      	ldr	r0, [r4, #0]
   169a0:	f8c5 00d8 	str.w	r0, [r5, #216]	; 0xd8
				*rx = NULL;
   169a4:	2000      	movs	r0, #0
   169a6:	6020      	str	r0, [r4, #0]
		if (tx) {
   169a8:	2900      	cmp	r1, #0
   169aa:	f43f a930 	beq.w	15c0e <ull_conn_rx+0x172>
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   169ae:	790c      	ldrb	r4, [r1, #4]
			pdu_tx->llctrl.length_rsp.max_rx_octets =
   169b0:	f8a1 e008 	strh.w	lr, [r1, #8]
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   169b4:	f044 0403 	orr.w	r4, r4, #3
			pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   169b8:	2709      	movs	r7, #9
			pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   169ba:	2615      	movs	r6, #21
			ctrl_tx_sec_enqueue(conn, tx);
   169bc:	4628      	mov	r0, r5
			pdu_tx->llctrl.length_rsp.max_tx_octets =
   169be:	f8a1 c00c 	strh.w	ip, [r1, #12]
			pdu_tx->llctrl.length_rsp.max_rx_time = sys_cpu_to_le16(eff_rx_time);
   169c2:	814a      	strh	r2, [r1, #10]
			pdu_tx->llctrl.length_rsp.max_tx_time = sys_cpu_to_le16(eff_tx_time);
   169c4:	81cb      	strh	r3, [r1, #14]
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   169c6:	710c      	strb	r4, [r1, #4]
			pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   169c8:	714f      	strb	r7, [r1, #5]
			pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   169ca:	71ce      	strb	r6, [r1, #7]
			ctrl_tx_sec_enqueue(conn, tx);
   169cc:	f7fe fb90 	bl	150f0 <ctrl_tx_sec_enqueue>
		return 0;
   169d0:	2000      	movs	r0, #0
		}
   169d2:	f7ff b913 	b.w	15bfc <ull_conn_rx+0x160>
			tx_time = MAX(MIN(PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_1M),
   169d6:	f640 0248 	movw	r2, #2120	; 0x848
   169da:	e77e      	b.n	168da <ull_conn_rx+0xe3e>
				} else if ((conn->llcp_conn_param.req ==
   169dc:	9900      	ldr	r1, [sp, #0]
   169de:	428a      	cmp	r2, r1
   169e0:	f000 810d 	beq.w	16bfe <ull_conn_rx+0x1162>
							conn->llcp_conn_param.ack) ||
   169e4:	f895 214a 	ldrb.w	r2, [r5, #330]	; 0x14a
   169e8:	0790      	lsls	r0, r2, #30
   169ea:	f000 8108 	beq.w	16bfe <ull_conn_rx+0x1162>
					LL_ASSERT(0);
   169ee:	4a0c      	ldr	r2, [pc, #48]	; (16a20 <ull_conn_rx+0xf84>)
   169f0:	490c      	ldr	r1, [pc, #48]	; (16a24 <ull_conn_rx+0xf88>)
   169f2:	480d      	ldr	r0, [pc, #52]	; (16a28 <ull_conn_rx+0xf8c>)
   169f4:	f641 234c 	movw	r3, #6732	; 0x1a4c
   169f8:	f007 faab 	bl	1df52 <printk>
   169fc:	4040      	eors	r0, r0
   169fe:	f380 8811 	msr	BASEPRI, r0
   16a02:	f04f 0003 	mov.w	r0, #3
   16a06:	df02      	svc	2
		int nack = 0;
   16a08:	2000      	movs	r0, #0
   16a0a:	f7ff b8f7 	b.w	15bfc <ull_conn_rx+0x160>
   16a0e:	bf00      	nop
   16a10:	200005e8 	.word	0x200005e8
   16a14:	200005ec 	.word	0x200005ec
   16a18:	20009c3e 	.word	0x20009c3e
   16a1c:	20007408 	.word	0x20007408
   16a20:	00024438 	.word	0x00024438
   16a24:	00024064 	.word	0x00024064
   16a28:	00023ff4 	.word	0x00023ff4
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   16a2c:	48be      	ldr	r0, [pc, #760]	; (16d28 <ull_conn_rx+0x128c>)
   16a2e:	f7f9 faf5 	bl	1001c <mem_acquire>
		if (!tx) {
   16a32:	4602      	mov	r2, r0
   16a34:	2800      	cmp	r0, #0
   16a36:	f43f af13 	beq.w	16860 <ull_conn_rx+0xdc4>
		conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   16a3a:	f895 1182 	ldrb.w	r1, [r5, #386]	; 0x182
		if (conn->llcp_phy.ack ==
   16a3e:	f895 e181 	ldrb.w	lr, [r5, #385]	; 0x181
   16a42:	f895 7180 	ldrb.w	r7, [r5, #384]	; 0x180
   16a46:	f895 3184 	ldrb.w	r3, [r5, #388]	; 0x184
		conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   16a4a:	2002      	movs	r0, #2
   16a4c:	f360 0101 	bfi	r1, r0, #0, #2
		if (conn->llcp_phy.ack ==
   16a50:	4577      	cmp	r7, lr
		conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   16a52:	f885 1182 	strb.w	r1, [r5, #386]	; 0x182
		if (conn->llcp_phy.ack ==
   16a56:	f3c3 0402 	ubfx	r4, r3, #0, #3
   16a5a:	f003 0c07 	and.w	ip, r3, #7
   16a5e:	f3c3 1002 	ubfx	r0, r3, #4, #3
   16a62:	d113      	bne.n	16a8c <ull_conn_rx+0xff0>
			conn->llcp_phy.tx =
   16a64:	b2c9      	uxtb	r1, r1
   16a66:	f36c 0184 	bfi	r1, ip, #2, #3
			conn->llcp_phy.cmd = 0U;
   16a6a:	f895 c183 	ldrb.w	ip, [r5, #387]	; 0x183
			conn->procedure_expire =
   16a6e:	f8b5 30ae 	ldrh.w	r3, [r5, #174]	; 0xae
   16a72:	f8a5 30b0 	strh.w	r3, [r5, #176]	; 0xb0
			conn->llcp_phy.ack--;
   16a76:	3f01      	subs	r7, #1
			conn->llcp_phy.rx =
   16a78:	f360 1147 	bfi	r1, r0, #5, #3
			conn->llcp_phy.cmd = 0U;
   16a7c:	f36f 0c82 	bfc	ip, #2, #1
			conn->llcp_phy.ack--;
   16a80:	f885 7181 	strb.w	r7, [r5, #385]	; 0x181
			conn->llcp_phy.rx =
   16a84:	f885 1182 	strb.w	r1, [r5, #386]	; 0x182
			conn->llcp_phy.cmd = 0U;
   16a88:	f885 c183 	strb.w	ip, [r5, #387]	; 0x183
		conn->llcp_phy.rx &= p->tx_phys;
   16a8c:	f895 1182 	ldrb.w	r1, [r5, #386]	; 0x182
		conn->llcp_phy.tx &= p->rx_phys;
   16a90:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
		conn->llcp_phy.rx &= p->tx_phys;
   16a94:	f896 7020 	ldrb.w	r7, [r6, #32]
		conn->llcp_phy.tx &= p->rx_phys;
   16a98:	f3c1 0c82 	ubfx	ip, r1, #2, #3
   16a9c:	ea03 030c 	and.w	r3, r3, ip
		conn->llcp_phy.rx &= p->tx_phys;
   16aa0:	ea07 1751 	and.w	r7, r7, r1, lsr #5
		conn->llcp_phy.tx &= p->rx_phys;
   16aa4:	009b      	lsls	r3, r3, #2
   16aa6:	f001 0103 	and.w	r1, r1, #3
   16aaa:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
   16aae:	430b      	orrs	r3, r1
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
   16ab0:	2103      	movs	r1, #3
		conn->llcp_phy.tx &= p->rx_phys;
   16ab2:	f885 3182 	strb.w	r3, [r5, #386]	; 0x182
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   16ab6:	7913      	ldrb	r3, [r2, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
   16ab8:	7151      	strb	r1, [r2, #5]
			conn->tx_head &&
   16aba:	f8d5 1188 	ldr.w	r1, [r5, #392]	; 0x188
		pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
   16abe:	7214      	strb	r4, [r2, #8]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   16ac0:	f043 0303 	orr.w	r3, r3, #3
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   16ac4:	2417      	movs	r4, #23
		pdu_ctrl_tx->llctrl.phy_rsp.rx_phys = conn->phy_pref_rx;
   16ac6:	7250      	strb	r0, [r2, #9]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   16ac8:	7113      	strb	r3, [r2, #4]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   16aca:	71d4      	strb	r4, [r2, #7]
	if (
   16acc:	2900      	cmp	r1, #0
   16ace:	f000 811f 	beq.w	16d10 <ull_conn_rx+0x1274>
			!conn->llcp_enc.pause_tx &&
   16ad2:	f895 312a 	ldrb.w	r3, [r5, #298]	; 0x12a
			conn->tx_head &&
   16ad6:	079c      	lsls	r4, r3, #30
   16ad8:	f100 811a 	bmi.w	16d10 <ull_conn_rx+0x1274>
			!conn->llcp_phy.pause_tx &&
   16adc:	f895 3183 	ldrb.w	r3, [r5, #387]	; 0x183
   16ae0:	07d8      	lsls	r0, r3, #31
   16ae2:	f100 8115 	bmi.w	16d10 <ull_conn_rx+0x1274>
		if (conn->tx_head == conn->tx_data) {
   16ae6:	f8d5 3194 	ldr.w	r3, [r5, #404]	; 0x194
   16aea:	4299      	cmp	r1, r3
			conn->tx_data = conn->tx_data->next;
   16aec:	bf04      	itt	eq
   16aee:	680b      	ldreq	r3, [r1, #0]
   16af0:	f8c5 3194 	streq.w	r3, [r5, #404]	; 0x194
		if (!conn->tx_ctrl) {
   16af4:	f8d5 318c 	ldr.w	r3, [r5, #396]	; 0x18c
   16af8:	2b00      	cmp	r3, #0
   16afa:	f000 834a 	beq.w	17192 <ull_conn_rx+0x16f6>
	tx->next = conn->tx_ctrl_last->next;
   16afe:	f8d5 3190 	ldr.w	r3, [r5, #400]	; 0x190
   16b02:	6819      	ldr	r1, [r3, #0]
   16b04:	6011      	str	r1, [r2, #0]
	conn->tx_ctrl_last->next = tx;
   16b06:	601a      	str	r2, [r3, #0]
	conn->tx_ctrl_last = tx;
   16b08:	f8c5 2190 	str.w	r2, [r5, #400]	; 0x190
	if (!tx->next) {
   16b0c:	6813      	ldr	r3, [r2, #0]
   16b0e:	2b00      	cmp	r3, #0
   16b10:	f47f a8ff 	bne.w	15d12 <ull_conn_rx+0x276>
		conn->tx_data_last = tx;
   16b14:	f8c5 2198 	str.w	r2, [r5, #408]	; 0x198
		rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   16b18:	f7ff b8fb 	b.w	15d12 <ull_conn_rx+0x276>
					conn->llcp_conn_param.disabled = 1U;
   16b1c:	f895 214a 	ldrb.w	r2, [r5, #330]	; 0x14a
					if (!conn->lll.role) {
   16b20:	f995 103d 	ldrsb.w	r1, [r5, #61]	; 0x3d
					conn->llcp_conn_param.disabled = 1U;
   16b24:	f042 0210 	orr.w	r2, r2, #16
					if (!conn->lll.role) {
   16b28:	2900      	cmp	r1, #0
					conn->llcp_conn_param.disabled = 1U;
   16b2a:	f885 214a 	strb.w	r2, [r5, #330]	; 0x14a
					if (!conn->lll.role) {
   16b2e:	f2c0 8215 	blt.w	16f5c <ull_conn_rx+0x14c0>
						LL_ASSERT(conn->llcp_cu.req ==
   16b32:	f895 20dc 	ldrb.w	r2, [r5, #220]	; 0xdc
   16b36:	f895 30dd 	ldrb.w	r3, [r5, #221]	; 0xdd
   16b3a:	429a      	cmp	r2, r3
   16b3c:	d00e      	beq.n	16b5c <ull_conn_rx+0x10c0>
   16b3e:	4a7b      	ldr	r2, [pc, #492]	; (16d2c <ull_conn_rx+0x1290>)
   16b40:	497b      	ldr	r1, [pc, #492]	; (16d30 <ull_conn_rx+0x1294>)
   16b42:	487c      	ldr	r0, [pc, #496]	; (16d34 <ull_conn_rx+0x1298>)
   16b44:	f641 23d0 	movw	r3, #6864	; 0x1ad0
   16b48:	f007 fa03 	bl	1df52 <printk>
   16b4c:	4040      	eors	r0, r0
   16b4e:	f380 8811 	msr	BASEPRI, r0
   16b52:	f04f 0003 	mov.w	r0, #3
   16b56:	df02      	svc	2
   16b58:	f895 30dd 	ldrb.w	r3, [r5, #221]	; 0xdd
						conn->llcp_conn_param.state =
   16b5c:	f895 014a 	ldrb.w	r0, [r5, #330]	; 0x14a
						conn->llcp_cu.interval =
   16b60:	f8b5 214e 	ldrh.w	r2, [r5, #334]	; 0x14e
   16b64:	f8a5 20e0 	strh.w	r2, [r5, #224]	; 0xe0
						conn->llcp_conn_param.state =
   16b68:	2205      	movs	r2, #5
   16b6a:	f362 0002 	bfi	r0, r2, #0, #3
						conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   16b6e:	f895 10de 	ldrb.w	r1, [r5, #222]	; 0xde
						conn->llcp_cu.latency =
   16b72:	f8b5 6150 	ldrh.w	r6, [r5, #336]	; 0x150
						conn->llcp_cu.ack--;
   16b76:	3b01      	subs	r3, #1
						conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   16b78:	f3c0 02c0 	ubfx	r2, r0, #3, #1
						conn->llcp_cu.ack--;
   16b7c:	f885 30dd 	strb.w	r3, [r5, #221]	; 0xdd
						conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   16b80:	0092      	lsls	r2, r2, #2
						conn->llcp_cu.win_size = 1U;
   16b82:	2301      	movs	r3, #1
   16b84:	f885 30ec 	strb.w	r3, [r5, #236]	; 0xec
						conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   16b88:	431a      	orrs	r2, r3
   16b8a:	f021 0307 	bic.w	r3, r1, #7
   16b8e:	431a      	orrs	r2, r3
						(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   16b90:	6821      	ldr	r1, [r4, #0]
						conn->llcp_cu.timeout =
   16b92:	f8b5 4152 	ldrh.w	r4, [r5, #338]	; 0x152
						conn->llcp_conn_param.state =
   16b96:	f885 014a 	strb.w	r0, [r5, #330]	; 0x14a
						conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   16b9a:	f885 20de 	strb.w	r2, [r5, #222]	; 0xde
						conn->llcp_cu.win_offset_us = 0U;
   16b9e:	2000      	movs	r0, #0
						(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   16ba0:	2203      	movs	r2, #3
						conn->llcp_cu.win_offset_us = 0U;
   16ba2:	f8c5 00e8 	str.w	r0, [r5, #232]	; 0xe8
						conn->llcp_cu.latency =
   16ba6:	f8a5 60e2 	strh.w	r6, [r5, #226]	; 0xe2
						conn->llcp_cu.timeout =
   16baa:	f8a5 40e4 	strh.w	r4, [r5, #228]	; 0xe4
						(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   16bae:	710a      	strb	r2, [r1, #4]
						break;
   16bb0:	f7ff b824 	b.w	15bfc <ull_conn_rx+0x160>
			tx = mem_acquire(&mem_conn_tx_ctrl.free);
   16bb4:	485c      	ldr	r0, [pc, #368]	; (16d28 <ull_conn_rx+0x128c>)
   16bb6:	f7f9 fa31 	bl	1001c <mem_acquire>
			if (!tx) {
   16bba:	4601      	mov	r1, r0
   16bbc:	2800      	cmp	r0, #0
   16bbe:	f43f ae4f 	beq.w	16860 <ull_conn_rx+0xdc4>
			conn->llcp_version.tx = 1U;
   16bc2:	f895 20fe 	ldrb.w	r2, [r5, #254]	; 0xfe
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   16bc6:	7903      	ldrb	r3, [r0, #4]
			conn->llcp_version.tx = 1U;
   16bc8:	f042 0201 	orr.w	r2, r2, #1
   16bcc:	f885 20fe 	strb.w	r2, [r5, #254]	; 0xfe
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   16bd0:	f043 0303 	orr.w	r3, r3, #3
			pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   16bd4:	220c      	movs	r2, #12
			pdu_tx->len =
   16bd6:	7144      	strb	r4, [r0, #5]
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   16bd8:	7103      	strb	r3, [r0, #4]
			v->version_number = LL_VERSION_NUMBER;
   16bda:	240b      	movs	r4, #11
			v->sub_version_number =
   16bdc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
			v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   16be0:	f06f 000e 	mvn.w	r0, #14
			pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   16be4:	71ca      	strb	r2, [r1, #7]
			v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   16be6:	2205      	movs	r2, #5
   16be8:	7248      	strb	r0, [r1, #9]
			v->sub_version_number =
   16bea:	72cb      	strb	r3, [r1, #11]
   16bec:	730b      	strb	r3, [r1, #12]
			v->version_number = LL_VERSION_NUMBER;
   16bee:	720c      	strb	r4, [r1, #8]
			v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   16bf0:	728a      	strb	r2, [r1, #10]
			ctrl_tx_sec_enqueue(conn, tx);
   16bf2:	4628      	mov	r0, r5
   16bf4:	f7fe fa7c 	bl	150f0 <ctrl_tx_sec_enqueue>
			rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   16bf8:	2303      	movs	r3, #3
   16bfa:	7133      	strb	r3, [r6, #4]
   16bfc:	e41b      	b.n	16436 <ull_conn_rx+0x99a>
					uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   16bfe:	f8b6 8020 	ldrh.w	r8, [r6, #32]
					if ((interval_min < 6) ||
   16c02:	f1b8 0f05 	cmp.w	r8, #5
					uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   16c06:	fa1f f288 	uxth.w	r2, r8
					if ((interval_min < 6) ||
   16c0a:	d97b      	bls.n	16d04 <ull_conn_rx+0x1268>
					uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   16c0c:	f8b6 e022 	ldrh.w	lr, [r6, #34]	; 0x22
					if ((interval_min < 6) ||
   16c10:	f5be 6f48 	cmp.w	lr, #3200	; 0xc80
					uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   16c14:	fa1f f18e 	uxth.w	r1, lr
					if ((interval_min < 6) ||
   16c18:	d874      	bhi.n	16d04 <ull_conn_rx+0x1268>
							(interval_max > 3200) ||
   16c1a:	428a      	cmp	r2, r1
   16c1c:	d872      	bhi.n	16d04 <ull_conn_rx+0x1268>
					uint16_t latency = sys_le16_to_cpu(cpr->latency);
   16c1e:	f8b6 c024 	ldrh.w	ip, [r6, #36]	; 0x24
							(interval_min > interval_max) ||
   16c22:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
					uint16_t latency = sys_le16_to_cpu(cpr->latency);
   16c26:	fa1f fa8c 	uxth.w	sl, ip
							(interval_min > interval_max) ||
   16c2a:	d26b      	bcs.n	16d04 <ull_conn_rx+0x1268>
					uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
   16c2c:	8cf0      	ldrh	r0, [r6, #38]	; 0x26
							(latency > 499) ||
   16c2e:	f1a0 090a 	sub.w	r9, r0, #10
   16c32:	fa1f f989 	uxth.w	r9, r9
   16c36:	f640 4b76 	movw	fp, #3190	; 0xc76
   16c3a:	45d9      	cmp	r9, fp
					uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
   16c3c:	b282      	uxth	r2, r0
							(latency > 499) ||
   16c3e:	d861      	bhi.n	16d04 <ull_conn_rx+0x1268>
							 ((latency + 1) * interval_max)) ||
   16c40:	fb0a 1901 	mla	r9, sl, r1, r1
							(timeout < 10) || (timeout > 3200) ||
   16c44:	ebb9 0f82 	cmp.w	r9, r2, lsl #2
   16c48:	d25c      	bcs.n	16d04 <ull_conn_rx+0x1268>
							 ((latency + 1) * interval_max)) ||
   16c4a:	f896 b028 	ldrb.w	fp, [r6, #40]	; 0x28
   16c4e:	4559      	cmp	r1, fp
   16c50:	d358      	bcc.n	16d04 <ull_conn_rx+0x1268>
					conn->llcp_conn_param.latency =	latency;
   16c52:	f8a5 c150 	strh.w	ip, [r5, #336]	; 0x150
					conn->llcp_conn_param.interval_min = interval_min;
   16c56:	f8a5 814c 	strh.w	r8, [r5, #332]	; 0x14c
					conn->llcp_conn_param.interval_max = interval_max;
   16c5a:	f8a5 e14e 	strh.w	lr, [r5, #334]	; 0x14e
					conn->llcp_conn_param.timeout =	timeout;
   16c5e:	f8a5 0152 	strh.w	r0, [r5, #338]	; 0x152
					conn->llcp_conn_param.preferred_periodicity =
   16c62:	f885 b154 	strb.w	fp, [r5, #340]	; 0x154
						sys_le16_to_cpu(cpr->reference_conn_event_count);
   16c66:	f896 e02a 	ldrb.w	lr, [r6, #42]	; 0x2a
   16c6a:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
								lll->interval) ||
   16c6e:	f8b5 c02e 	ldrh.w	ip, [r5, #46]	; 0x2e
						sys_le16_to_cpu(cpr->reference_conn_event_count);
   16c72:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
					conn->llcp_conn_param.reference_conn_event_count =
   16c76:	f8a5 0156 	strh.w	r0, [r5, #342]	; 0x156
						sys_le16_to_cpu(cpr->offset0);
   16c7a:	f896 e02c 	ldrb.w	lr, [r6, #44]	; 0x2c
   16c7e:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
   16c82:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
					conn->llcp_conn_param.offset0 =
   16c86:	f8a5 0158 	strh.w	r0, [r5, #344]	; 0x158
						sys_le16_to_cpu(cpr->offset1);
   16c8a:	f896 e02e 	ldrb.w	lr, [r6, #46]	; 0x2e
   16c8e:	f896 002d 	ldrb.w	r0, [r6, #45]	; 0x2d
   16c92:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
					conn->llcp_conn_param.offset1 =
   16c96:	f8a5 015a 	strh.w	r0, [r5, #346]	; 0x15a
						sys_le16_to_cpu(cpr->offset2);
   16c9a:	f896 e030 	ldrb.w	lr, [r6, #48]	; 0x30
   16c9e:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
   16ca2:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
					conn->llcp_conn_param.offset2 =
   16ca6:	f8a5 015c 	strh.w	r0, [r5, #348]	; 0x15c
						sys_le16_to_cpu(cpr->offset3);
   16caa:	f896 e032 	ldrb.w	lr, [r6, #50]	; 0x32
   16cae:	f896 0031 	ldrb.w	r0, [r6, #49]	; 0x31
   16cb2:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
					conn->llcp_conn_param.offset3 =
   16cb6:	f8a5 015e 	strh.w	r0, [r5, #350]	; 0x15e
						sys_le16_to_cpu(cpr->offset4);
   16cba:	f896 0033 	ldrb.w	r0, [r6, #51]	; 0x33
   16cbe:	f896 e034 	ldrb.w	lr, [r6, #52]	; 0x34
   16cc2:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
					conn->llcp_conn_param.offset4 =
   16cc6:	f8a5 0160 	strh.w	r0, [r5, #352]	; 0x160
						sys_le16_to_cpu(cpr->offset5);
   16cca:	f896 0035 	ldrb.w	r0, [r6, #53]	; 0x35
   16cce:	f896 6036 	ldrb.w	r6, [r6, #54]	; 0x36
					if ((conn->llcp_conn_param.interval_max !=
   16cd2:	4561      	cmp	r1, ip
						sys_le16_to_cpu(cpr->offset5);
   16cd4:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
					conn->llcp_conn_param.offset5 =
   16cd8:	f8a5 0162 	strh.w	r0, [r5, #354]	; 0x162
					if ((conn->llcp_conn_param.interval_max !=
   16cdc:	f000 8267 	beq.w	171ae <ull_conn_rx+0x1712>
						conn->llcp_conn_param.state =
   16ce0:	f895 214a 	ldrb.w	r2, [r5, #330]	; 0x14a
   16ce4:	2103      	movs	r1, #3
   16ce6:	f361 0202 	bfi	r2, r1, #0, #3
   16cea:	f885 214a 	strb.w	r2, [r5, #330]	; 0x14a
					conn->llcp_conn_param.ack--;
   16cee:	9a00      	ldr	r2, [sp, #0]
   16cf0:	3a01      	subs	r2, #1
   16cf2:	f885 2149 	strb.w	r2, [r5, #329]	; 0x149
					if (!conn_upd_curr) {
   16cf6:	2b00      	cmp	r3, #0
   16cf8:	f47e af89 	bne.w	15c0e <ull_conn_rx+0x172>
						conn_upd_curr = conn;
   16cfc:	603d      	str	r5, [r7, #0]
		int nack = 0;
   16cfe:	4618      	mov	r0, r3
   16d00:	f7fe bf7c 	b.w	15bfc <ull_conn_rx+0x160>
						nack = reject_ext_ind_send(conn, *rx,
   16d04:	1d31      	adds	r1, r6, #4
   16d06:	4628      	mov	r0, r5
   16d08:	231e      	movs	r3, #30
   16d0a:	220f      	movs	r2, #15
   16d0c:	f7ff b8f9 	b.w	15f02 <ull_conn_rx+0x466>
		if (!conn->tx_ctrl) {
   16d10:	f8d5 318c 	ldr.w	r3, [r5, #396]	; 0x18c
   16d14:	2b00      	cmp	r3, #0
   16d16:	f47f aef2 	bne.w	16afe <ull_conn_rx+0x1062>
			tx->next = conn->tx_head;
   16d1a:	6011      	str	r1, [r2, #0]
				conn->tx_ctrl = tx;
   16d1c:	e9c5 2262 	strd	r2, r2, [r5, #392]	; 0x188
				conn->tx_ctrl_last = tx;
   16d20:	f8c5 2190 	str.w	r2, [r5, #400]	; 0x190
   16d24:	e6f2      	b.n	16b0c <ull_conn_rx+0x1070>
   16d26:	bf00      	nop
   16d28:	20007408 	.word	0x20007408
   16d2c:	00024438 	.word	0x00024438
   16d30:	00024514 	.word	0x00024514
   16d34:	00023ff4 	.word	0x00023ff4
		instant = sys_le16_to_cpu(ind->instant);
   16d38:	8c70      	ldrh	r0, [r6, #34]	; 0x22
		if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
   16d3a:	8eea      	ldrh	r2, [r5, #54]	; 0x36
   16d3c:	1a82      	subs	r2, r0, r2
   16d3e:	0412      	lsls	r2, r2, #16
   16d40:	f100 8093 	bmi.w	16e6a <ull_conn_rx+0x13ce>
		if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   16d44:	f895 20bf 	ldrb.w	r2, [r5, #191]	; 0xbf
   16d48:	f895 c0c0 	ldrb.w	ip, [r5, #192]	; 0xc0
   16d4c:	eba2 020c 	sub.w	r2, r2, ip
   16d50:	f002 0203 	and.w	r2, r2, #3
   16d54:	2a02      	cmp	r2, #2
   16d56:	f000 80b2 	beq.w	16ebe <ull_conn_rx+0x1422>
		if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   16d5a:	f895 c180 	ldrb.w	ip, [r5, #384]	; 0x180
   16d5e:	f895 2181 	ldrb.w	r2, [r5, #385]	; 0x181
   16d62:	4562      	cmp	r2, ip
   16d64:	d019      	beq.n	16d9a <ull_conn_rx+0x12fe>
				(conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
   16d66:	f895 2182 	ldrb.w	r2, [r5, #386]	; 0x182
		if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   16d6a:	f002 0203 	and.w	r2, r2, #3
   16d6e:	2a02      	cmp	r2, #2
   16d70:	d113      	bne.n	16d9a <ull_conn_rx+0x12fe>
			conn->llcp_phy.pause_tx = 0U;
   16d72:	f895 2183 	ldrb.w	r2, [r5, #387]	; 0x183
			conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   16d76:	f895 60c4 	ldrb.w	r6, [r5, #196]	; 0xc4
			conn->llcp_phy.ack = conn->llcp_phy.req;
   16d7a:	f885 c181 	strb.w	ip, [r5, #385]	; 0x181
			conn->llcp_phy.pause_tx = 0U;
   16d7e:	f36f 0200 	bfc	r2, #0, #1
			conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   16d82:	f3c2 0c80 	ubfx	ip, r2, #2, #1
   16d86:	f36c 0641 	bfi	r6, ip, #1, #1
			conn->procedure_expire = 0U;
   16d8a:	f04f 0c00 	mov.w	ip, #0
			conn->llcp_phy.pause_tx = 0U;
   16d8e:	f885 2183 	strb.w	r2, [r5, #387]	; 0x183
			conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   16d92:	f885 60c4 	strb.w	r6, [r5, #196]	; 0xc4
			conn->procedure_expire = 0U;
   16d96:	f8a5 c0b0 	strh.w	ip, [r5, #176]	; 0xb0
		conn->llcp.phy_upd_ind.initiate = 0U;
   16d9a:	f895 20c4 	ldrb.w	r2, [r5, #196]	; 0xc4
		conn->llcp.phy_upd_ind.instant = instant;
   16d9e:	f8a5 00c6 	strh.w	r0, [r5, #198]	; 0xc6
		conn->llcp.phy_upd_ind.initiate = 0U;
   16da2:	009b      	lsls	r3, r3, #2
   16da4:	f003 031c 	and.w	r3, r3, #28
   16da8:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   16dac:	f002 0202 	and.w	r2, r2, #2
   16db0:	4313      	orrs	r3, r2
		link->mem = conn->llcp_rx;
   16db2:	f8d5 20d8 	ldr.w	r2, [r5, #216]	; 0xd8
		conn->llcp.phy_upd_ind.initiate = 0U;
   16db6:	f885 30c4 	strb.w	r3, [r5, #196]	; 0xc4
		link->mem = conn->llcp_rx;
   16dba:	607a      	str	r2, [r7, #4]
		(*rx)->hdr.link = link;
   16dbc:	6823      	ldr	r3, [r4, #0]
   16dbe:	601f      	str	r7, [r3, #0]
		conn->llcp_rx = *rx;
   16dc0:	6823      	ldr	r3, [r4, #0]
   16dc2:	f8c5 30d8 	str.w	r3, [r5, #216]	; 0xd8
		*rx = NULL;
   16dc6:	2300      	movs	r3, #0
   16dc8:	6023      	str	r3, [r4, #0]
		struct node_rx_pdu *rx_dle = ll_pdu_rx_alloc();
   16dca:	f7fd fb71 	bl	144b0 <ll_pdu_rx_alloc>
		LL_ASSERT(rx_dle);
   16dce:	4604      	mov	r4, r0
   16dd0:	2800      	cmp	r0, #0
   16dd2:	f000 8191 	beq.w	170f8 <ull_conn_rx+0x165c>
		rx_dle->hdr.link->mem = conn->llcp_rx;
   16dd6:	6823      	ldr	r3, [r4, #0]
   16dd8:	f8d5 20d8 	ldr.w	r2, [r5, #216]	; 0xd8
   16ddc:	605a      	str	r2, [r3, #4]
		conn->llcp_ack -= 2U;
   16dde:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
		if (conn->llcp.phy_upd_ind.tx) {
   16de2:	f895 30c4 	ldrb.w	r3, [r5, #196]	; 0xc4
		conn->llcp_rx = rx_dle;
   16de6:	f8c5 40d8 	str.w	r4, [r5, #216]	; 0xd8
		conn->llcp_ack -= 2U;
   16dea:	3a02      	subs	r2, #2
		conn->llcp_type = LLCP_PHY_UPD;
   16dec:	2106      	movs	r1, #6
		if (conn->llcp.phy_upd_ind.tx) {
   16dee:	f013 0f1c 	tst.w	r3, #28
		conn->llcp_ack -= 2U;
   16df2:	f885 20c0 	strb.w	r2, [r5, #192]	; 0xc0
		conn->llcp_type = LLCP_PHY_UPD;
   16df6:	f885 10c1 	strb.w	r1, [r5, #193]	; 0xc1
		if (conn->llcp.phy_upd_ind.tx) {
   16dfa:	f43e af08 	beq.w	15c0e <ull_conn_rx+0x172>
			conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   16dfe:	f895 2048 	ldrb.w	r2, [r5, #72]	; 0x48
   16e02:	f3c3 0382 	ubfx	r3, r3, #2, #3
   16e06:	f363 1206 	bfi	r2, r3, #4, #3
   16e0a:	f885 2048 	strb.w	r2, [r5, #72]	; 0x48
		int nack = 0;
   16e0e:	2000      	movs	r0, #0
   16e10:	f7fe bef4 	b.w	15bfc <ull_conn_rx+0x160>
   16e14:	465b      	mov	r3, fp
   16e16:	e585      	b.n	16924 <ull_conn_rx+0xe88>
										0x03) == 0x02) &&
   16e18:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
   16e1c:	2b03      	cmp	r3, #3
   16e1e:	f47f a86c 	bne.w	15efa <ull_conn_rx+0x45e>
   16e22:	f7ff b863 	b.w	15eec <ull_conn_rx+0x450>
						nack = reject_ext_ind_send(conn, *rx,
   16e26:	1d31      	adds	r1, r6, #4
   16e28:	4628      	mov	r0, r5
   16e2a:	2323      	movs	r3, #35	; 0x23
   16e2c:	220f      	movs	r2, #15
   16e2e:	f7ff b868 	b.w	15f02 <ull_conn_rx+0x466>
					conn->llcp_length.disabled = 1U;
   16e32:	f895 2172 	ldrb.w	r2, [r5, #370]	; 0x172
					conn->llcp_length.ack = conn->llcp_length.req;
   16e36:	f885 3171 	strb.w	r3, [r5, #369]	; 0x171
					conn->llcp_length.disabled = 1U;
   16e3a:	f042 0308 	orr.w	r3, r2, #8
   16e3e:	f885 3172 	strb.w	r3, [r5, #370]	; 0x172
					conn->llcp_length.ack = conn->llcp_length.req;
   16e42:	f7fe bfa9 	b.w	15d98 <ull_conn_rx+0x2fc>
   16e46:	4652      	mov	r2, sl
   16e48:	e58a      	b.n	16960 <ull_conn_rx+0xec4>
   16e4a:	f8dd e004 	ldr.w	lr, [sp, #4]
   16e4e:	e536      	b.n	168be <ull_conn_rx+0xe22>
   16e50:	46cc      	mov	ip, r9
   16e52:	e529      	b.n	168a8 <ull_conn_rx+0xe0c>
						nack = reject_ext_ind_send(conn, *rx,
   16e54:	1d31      	adds	r1, r6, #4
   16e56:	4628      	mov	r0, r5
   16e58:	2323      	movs	r3, #35	; 0x23
   16e5a:	f7ff b851 	b.w	15f00 <ull_conn_rx+0x464>
						nack = reject_ext_ind_send(conn, *rx,
   16e5e:	1d31      	adds	r1, r6, #4
   16e60:	4628      	mov	r0, r5
   16e62:	231e      	movs	r3, #30
   16e64:	2210      	movs	r2, #16
   16e66:	f7ff b84c 	b.w	15f02 <ull_conn_rx+0x466>
			(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   16e6a:	2303      	movs	r3, #3
   16e6c:	7133      	strb	r3, [r6, #4]
			return BT_HCI_ERR_INSTANT_PASSED;
   16e6e:	2328      	movs	r3, #40	; 0x28
						conn->llcp_terminate.reason_peer = err;
   16e70:	f885 3107 	strb.w	r3, [r5, #263]	; 0x107
		int nack = 0;
   16e74:	2000      	movs	r0, #0
   16e76:	f7fe bec1 	b.w	15bfc <ull_conn_rx+0x160>
					conn->llcp_phy.pause_tx = 0U;
   16e7a:	f895 3183 	ldrb.w	r3, [r5, #387]	; 0x183
					lll->phy_tx_time = lll->phy_tx;
   16e7e:	f895 2048 	ldrb.w	r2, [r5, #72]	; 0x48
					conn->llcp_phy.ack = conn->llcp_phy.req;
   16e82:	f885 1181 	strb.w	r1, [r5, #385]	; 0x181
					conn->llcp_phy.pause_tx = 0U;
   16e86:	f023 0309 	bic.w	r3, r3, #9
					lll->phy_tx_time = lll->phy_tx;
   16e8a:	4611      	mov	r1, r2
					conn->llcp_phy.pause_tx = 0U;
   16e8c:	f043 0308 	orr.w	r3, r3, #8
					lll->phy_tx_time = lll->phy_tx;
   16e90:	f362 1106 	bfi	r1, r2, #4, #3
					if (conn->llcp_phy.cmd) {
   16e94:	075f      	lsls	r7, r3, #29
					conn->llcp_phy.pause_tx = 0U;
   16e96:	f885 3183 	strb.w	r3, [r5, #387]	; 0x183
					lll->phy_tx_time = lll->phy_tx;
   16e9a:	f885 1048 	strb.w	r1, [r5, #72]	; 0x48
   16e9e:	f3c2 0202 	ubfx	r2, r2, #0, #3
					if (conn->llcp_phy.cmd) {
   16ea2:	d538      	bpl.n	16f16 <ull_conn_rx+0x147a>
						(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   16ea4:	6821      	ldr	r1, [r4, #0]
						p->status = 0U;
   16ea6:	2300      	movs	r3, #0
						(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   16ea8:	200f      	movs	r0, #15
   16eaa:	7108      	strb	r0, [r1, #4]
						p->tx = lll->phy_tx;
   16eac:	7772      	strb	r2, [r6, #29]
						p->status = 0U;
   16eae:	7733      	strb	r3, [r6, #28]
						p->rx = lll->phy_rx;
   16eb0:	f895 3049 	ldrb.w	r3, [r5, #73]	; 0x49
   16eb4:	f3c3 0302 	ubfx	r3, r3, #0, #3
   16eb8:	77b3      	strb	r3, [r6, #30]
   16eba:	f7fe bf6d 	b.w	15d98 <ull_conn_rx+0x2fc>
			(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   16ebe:	2303      	movs	r3, #3
   16ec0:	7133      	strb	r3, [r6, #4]
			return BT_HCI_ERR_DIFF_TRANS_COLLISION;
   16ec2:	232a      	movs	r3, #42	; 0x2a
   16ec4:	e7d4      	b.n	16e70 <ull_conn_rx+0x13d4>
				conn->llcp_length.ack = conn->llcp_length.req;
   16ec6:	9800      	ldr	r0, [sp, #0]
   16ec8:	f885 0171 	strb.w	r0, [r5, #369]	; 0x171
				conn->procedure_expire = 0U;
   16ecc:	2700      	movs	r7, #0
				if (eff_tx_octets == conn->lll.max_tx_octets &&
   16ece:	45cc      	cmp	ip, r9
				conn->procedure_expire = 0U;
   16ed0:	f8a5 70b0 	strh.w	r7, [r5, #176]	; 0xb0
				if (eff_tx_octets == conn->lll.max_tx_octets &&
   16ed4:	f000 812a 	beq.w	1712c <ull_conn_rx+0x1690>
				conn->lll.max_rx_time = eff_rx_time;
   16ed8:	f8a5 2046 	strh.w	r2, [r5, #70]	; 0x46
				if (tx) {
   16edc:	2900      	cmp	r1, #0
   16ede:	f000 8120 	beq.w	17122 <ull_conn_rx+0x1686>
					conn->llcp_length.state =
   16ee2:	f895 4172 	ldrb.w	r4, [r5, #370]	; 0x172
						(conn->llcp_length.req - 1);
   16ee6:	9800      	ldr	r0, [sp, #0]
					conn->llcp_length.rx_octets = eff_rx_octets;
   16ee8:	f8a5 e174 	strh.w	lr, [r5, #372]	; 0x174
					conn->llcp_length.state =
   16eec:	2703      	movs	r7, #3
						(conn->llcp_length.req - 1);
   16eee:	3801      	subs	r0, #1
					conn->llcp_length.state =
   16ef0:	f367 0402 	bfi	r4, r7, #0, #3
					conn->llcp_length.ack =
   16ef4:	f885 0171 	strb.w	r0, [r5, #369]	; 0x171
					conn->llcp_length.tx_octets = eff_tx_octets;
   16ef8:	f8a5 c176 	strh.w	ip, [r5, #374]	; 0x176
					conn->llcp_length.rx_time = eff_rx_time;
   16efc:	f8a5 2178 	strh.w	r2, [r5, #376]	; 0x178
					conn->llcp_length.tx_time = eff_tx_time;
   16f00:	f8a5 317a 	strh.w	r3, [r5, #378]	; 0x17a
					conn->llcp_length.state =
   16f04:	f885 4172 	strb.w	r4, [r5, #370]	; 0x172
				lr->max_rx_octets = sys_cpu_to_le16(eff_rx_octets);
   16f08:	f8a6 e020 	strh.w	lr, [r6, #32]
				lr->max_tx_octets = sys_cpu_to_le16(eff_tx_octets);
   16f0c:	f8a6 c024 	strh.w	ip, [r6, #36]	; 0x24
				lr->max_rx_time = sys_cpu_to_le16(eff_rx_time);
   16f10:	8472      	strh	r2, [r6, #34]	; 0x22
				lr->max_tx_time = sys_cpu_to_le16(eff_tx_time);
   16f12:	84f3      	strh	r3, [r6, #38]	; 0x26
   16f14:	e548      	b.n	169a8 <ull_conn_rx+0xf0c>
						(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   16f16:	6823      	ldr	r3, [r4, #0]
   16f18:	2203      	movs	r2, #3
   16f1a:	711a      	strb	r2, [r3, #4]
   16f1c:	f7fe bf3c 	b.w	15d98 <ull_conn_rx+0x2fc>
					conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   16f20:	f895 20c4 	ldrb.w	r2, [r5, #196]	; 0xc4
						conn->llcp_ack -= 2U;
   16f24:	3b02      	subs	r3, #2
					conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   16f26:	f36f 0201 	bfc	r2, #0, #2
						conn->llcp_type = LLCP_ENCRYPTION;
   16f2a:	2003      	movs	r0, #3
						conn->llcp_ack -= 2U;
   16f2c:	f885 30c0 	strb.w	r3, [r5, #192]	; 0xc0
					conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   16f30:	f885 20c4 	strb.w	r2, [r5, #196]	; 0xc4
						conn->llcp_type = LLCP_ENCRYPTION;
   16f34:	f885 00c1 	strb.w	r0, [r5, #193]	; 0xc1
						conn->llcp_ack -= 2U;
   16f38:	f7fe bf25 	b.w	15d86 <ull_conn_rx+0x2ea>
				eff_rx_time = MAX(eff_rx_time,
   16f3c:	f44f 6829 	mov.w	r8, #2704	; 0xa90
   16f40:	e509      	b.n	16956 <ull_conn_rx+0xeba>
				eff_tx_time = MAX(eff_tx_time,
   16f42:	f44f 6329 	mov.w	r3, #2704	; 0xa90
   16f46:	e4e9      	b.n	1691c <ull_conn_rx+0xe80>
					conn->llcp_length.state =
   16f48:	2604      	movs	r6, #4
   16f4a:	f366 0002 	bfi	r0, r6, #0, #3
					conn->lll.max_tx_octets = eff_tx_octets;
   16f4e:	f8a5 c040 	strh.w	ip, [r5, #64]	; 0x40
					conn->lll.max_tx_time = eff_tx_time;
   16f52:	f8a5 3044 	strh.w	r3, [r5, #68]	; 0x44
					conn->llcp_length.state =
   16f56:	f885 0172 	strb.w	r0, [r5, #370]	; 0x172
   16f5a:	e51b      	b.n	16994 <ull_conn_rx+0xef8>
					LL_ASSERT(conn_upd_curr == conn);
   16f5c:	4fcf      	ldr	r7, [pc, #828]	; (1729c <ull_conn_rx+0x1800>)
   16f5e:	683a      	ldr	r2, [r7, #0]
   16f60:	4295      	cmp	r5, r2
   16f62:	d00e      	beq.n	16f82 <ull_conn_rx+0x14e6>
   16f64:	4ace      	ldr	r2, [pc, #824]	; (172a0 <ull_conn_rx+0x1804>)
   16f66:	49cf      	ldr	r1, [pc, #828]	; (172a4 <ull_conn_rx+0x1808>)
   16f68:	48cf      	ldr	r0, [pc, #828]	; (172a8 <ull_conn_rx+0x180c>)
   16f6a:	f641 23e8 	movw	r3, #6888	; 0x1ae8
   16f6e:	f006 fff0 	bl	1df52 <printk>
   16f72:	4040      	eors	r0, r0
   16f74:	f380 8811 	msr	BASEPRI, r0
   16f78:	f04f 0003 	mov.w	r0, #3
   16f7c:	df02      	svc	2
   16f7e:	f895 3148 	ldrb.w	r3, [r5, #328]	; 0x148
					if (!conn->llcp_conn_param.cmd) {
   16f82:	f895 214a 	ldrb.w	r2, [r5, #330]	; 0x14a
					conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   16f86:	f885 3149 	strb.w	r3, [r5, #329]	; 0x149
	conn_upd_curr = NULL;
   16f8a:	2300      	movs	r3, #0
   16f8c:	603b      	str	r3, [r7, #0]
					if (!conn->llcp_conn_param.cmd) {
   16f8e:	f012 0308 	ands.w	r3, r2, #8
						(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   16f92:	6822      	ldr	r2, [r4, #0]
					if (!conn->llcp_conn_param.cmd) {
   16f94:	f43f a8ab 	beq.w	160ee <ull_conn_rx+0x652>
					(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   16f98:	210b      	movs	r1, #11
					cu->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   16f9a:	231a      	movs	r3, #26
					(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   16f9c:	7111      	strb	r1, [r2, #4]
					cu->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   16f9e:	7733      	strb	r3, [r6, #28]
					cu->interval = lll->interval;
   16fa0:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
					cu->timeout = conn->supervision_reload *
   16fa2:	f8b5 20aa 	ldrh.w	r2, [r5, #170]	; 0xaa
					cu->latency = lll->latency;
   16fa6:	8e29      	ldrh	r1, [r5, #48]	; 0x30
					cu->interval = lll->interval;
   16fa8:	83f3      	strh	r3, [r6, #30]
					cu->timeout = conn->supervision_reload *
   16faa:	fb03 f202 	mul.w	r2, r3, r2
						lll->interval * 125U / 1000;
   16fae:	237d      	movs	r3, #125	; 0x7d
   16fb0:	fb03 f302 	mul.w	r3, r3, r2
					cu->latency = lll->latency;
   16fb4:	8431      	strh	r1, [r6, #32]
						lll->interval * 125U / 1000;
   16fb6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   16fba:	fbb3 f3f2 	udiv	r3, r3, r2
					cu->timeout = conn->supervision_reload *
   16fbe:	8473      	strh	r3, [r6, #34]	; 0x22
						 PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ)) {
   16fc0:	f7fe beea 	b.w	15d98 <ull_conn_rx+0x2fc>
			conn_upd_curr = conn;
   16fc4:	601d      	str	r5, [r3, #0]
   16fc6:	f7ff b91b 	b.w	16200 <ull_conn_rx+0x764>
		struct node_tx *tx = NULL;
   16fca:	2100      	movs	r1, #0
   16fcc:	f7fe bf13 	b.w	15df6 <ull_conn_rx+0x35a>
										0x03) == 0x02) &&
   16fd0:	f895 20c1 	ldrb.w	r2, [r5, #193]	; 0xc1
   16fd4:	2a03      	cmp	r2, #3
   16fd6:	f47f ac31 	bne.w	1683c <ull_conn_rx+0xda0>
   16fda:	e428      	b.n	1682e <ull_conn_rx+0xd92>
						uint16_t interval_min =
   16fdc:	f8b6 8020 	ldrh.w	r8, [r6, #32]
						if ((interval_min < 6) ||
   16fe0:	f1b8 0f05 	cmp.w	r8, #5
						uint16_t interval_min =
   16fe4:	fa1f f088 	uxth.w	r0, r8
						if ((interval_min < 6) ||
   16fe8:	f67f ae8c 	bls.w	16d04 <ull_conn_rx+0x1268>
						uint16_t interval_max =
   16fec:	f8b6 e022 	ldrh.w	lr, [r6, #34]	; 0x22
						if ((interval_min < 6) ||
   16ff0:	f5be 6f48 	cmp.w	lr, #3200	; 0xc80
						uint16_t interval_max =
   16ff4:	fa1f f28e 	uxth.w	r2, lr
						if ((interval_min < 6) ||
   16ff8:	f63f ae84 	bhi.w	16d04 <ull_conn_rx+0x1268>
								(interval_max > 3200) ||
   16ffc:	4290      	cmp	r0, r2
   16ffe:	f63f ae81 	bhi.w	16d04 <ull_conn_rx+0x1268>
						uint16_t latency =
   17002:	f8b6 c024 	ldrh.w	ip, [r6, #36]	; 0x24
   17006:	fa1f f08c 	uxth.w	r0, ip
								(interval_min > interval_max) ||
   1700a:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
						uint16_t latency =
   1700e:	e9cd 0001 	strd	r0, r0, [sp, #4]
								(interval_min > interval_max) ||
   17012:	f4bf ae77 	bcs.w	16d04 <ull_conn_rx+0x1268>
						uint16_t timeout =
   17016:	8cf0      	ldrh	r0, [r6, #38]	; 0x26
   17018:	f8ad 000e 	strh.w	r0, [sp, #14]
								(latency > 499) ||
   1701c:	f1a0 090a 	sub.w	r9, r0, #10
   17020:	fa1f f989 	uxth.w	r9, r9
   17024:	f640 4a76 	movw	sl, #3190	; 0xc76
   17028:	45d1      	cmp	r9, sl
						uint16_t timeout =
   1702a:	fa1f fb80 	uxth.w	fp, r0
								(latency > 499) ||
   1702e:	f63f ae69 	bhi.w	16d04 <ull_conn_rx+0x1268>
								 ((latency + 1) * interval_max)) ||
   17032:	9801      	ldr	r0, [sp, #4]
   17034:	fb00 2902 	mla	r9, r0, r2, r2
								(timeout > 3200) ||
   17038:	ebb9 0f8b 	cmp.w	r9, fp, lsl #2
   1703c:	f4bf ae62 	bcs.w	16d04 <ull_conn_rx+0x1268>
								 ((latency + 1) * interval_max)) ||
   17040:	f896 a028 	ldrb.w	sl, [r6, #40]	; 0x28
   17044:	4552      	cmp	r2, sl
   17046:	f4ff ae5d 	bcc.w	16d04 <ull_conn_rx+0x1268>
						conn->llcp_conn_param.timeout =	timeout;
   1704a:	f8bd 000e 	ldrh.w	r0, [sp, #14]
						conn->llcp_conn_param.latency =	latency;
   1704e:	f8a5 c150 	strh.w	ip, [r5, #336]	; 0x150
						conn->llcp_conn_param.interval_min =
   17052:	f8a5 814c 	strh.w	r8, [r5, #332]	; 0x14c
						conn->llcp_conn_param.interval_max =
   17056:	f8a5 e14e 	strh.w	lr, [r5, #334]	; 0x14e
						conn->llcp_conn_param.timeout =	timeout;
   1705a:	f8a5 0152 	strh.w	r0, [r5, #338]	; 0x152
						conn->llcp_conn_param.preferred_periodicity =
   1705e:	f885 a154 	strb.w	sl, [r5, #340]	; 0x154
							sys_le16_to_cpu(cpr->reference_conn_event_count);
   17062:	f896 e02a 	ldrb.w	lr, [r6, #42]	; 0x2a
   17066:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
									lll->interval) ||
   1706a:	f8b5 c02e 	ldrh.w	ip, [r5, #46]	; 0x2e
							sys_le16_to_cpu(cpr->reference_conn_event_count);
   1706e:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
						conn->llcp_conn_param.reference_conn_event_count =
   17072:	f8a5 0156 	strh.w	r0, [r5, #342]	; 0x156
							sys_le16_to_cpu(cpr->offset0);
   17076:	f896 e02c 	ldrb.w	lr, [r6, #44]	; 0x2c
   1707a:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
   1707e:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
						conn->llcp_conn_param.offset0 =
   17082:	f8a5 0158 	strh.w	r0, [r5, #344]	; 0x158
							sys_le16_to_cpu(cpr->offset1);
   17086:	f896 e02e 	ldrb.w	lr, [r6, #46]	; 0x2e
   1708a:	f896 002d 	ldrb.w	r0, [r6, #45]	; 0x2d
   1708e:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
						conn->llcp_conn_param.offset1 =
   17092:	f8a5 015a 	strh.w	r0, [r5, #346]	; 0x15a
							sys_le16_to_cpu(cpr->offset2);
   17096:	f896 e030 	ldrb.w	lr, [r6, #48]	; 0x30
   1709a:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
   1709e:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
						conn->llcp_conn_param.offset2 =
   170a2:	f8a5 015c 	strh.w	r0, [r5, #348]	; 0x15c
							sys_le16_to_cpu(cpr->offset3);
   170a6:	f896 e032 	ldrb.w	lr, [r6, #50]	; 0x32
   170aa:	f896 0031 	ldrb.w	r0, [r6, #49]	; 0x31
   170ae:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
						conn->llcp_conn_param.offset3 =
   170b2:	f8a5 015e 	strh.w	r0, [r5, #350]	; 0x15e
							sys_le16_to_cpu(cpr->offset4);
   170b6:	f896 0033 	ldrb.w	r0, [r6, #51]	; 0x33
   170ba:	f896 e034 	ldrb.w	lr, [r6, #52]	; 0x34
   170be:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
						conn->llcp_conn_param.offset4 =
   170c2:	f8a5 0160 	strh.w	r0, [r5, #352]	; 0x160
							sys_le16_to_cpu(cpr->offset5);
   170c6:	f896 0035 	ldrb.w	r0, [r6, #53]	; 0x35
   170ca:	f896 6036 	ldrb.w	r6, [r6, #54]	; 0x36
						if ((conn->llcp_conn_param.interval_max !=
   170ce:	4562      	cmp	r2, ip
							sys_le16_to_cpu(cpr->offset5);
   170d0:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
						conn->llcp_conn_param.offset5 =
   170d4:	f8a5 0162 	strh.w	r0, [r5, #354]	; 0x162
						if ((conn->llcp_conn_param.interval_max !=
   170d8:	f000 808a 	beq.w	171f0 <ull_conn_rx+0x1754>
							if (conn->llcp_enc.pause_tx) {
   170dc:	078e      	lsls	r6, r1, #30
								conn->llcp_conn_param.state =
   170de:	f895 214a 	ldrb.w	r2, [r5, #330]	; 0x14a
							if (conn->llcp_enc.pause_tx) {
   170e2:	f57f adff 	bpl.w	16ce4 <ull_conn_rx+0x1248>
								(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   170e6:	6821      	ldr	r1, [r4, #0]
								conn->llcp_conn_param.state =
   170e8:	2002      	movs	r0, #2
   170ea:	f360 0202 	bfi	r2, r0, #0, #3
								(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   170ee:	2003      	movs	r0, #3
								conn->llcp_conn_param.state =
   170f0:	f885 214a 	strb.w	r2, [r5, #330]	; 0x14a
								(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   170f4:	7108      	strb	r0, [r1, #4]
   170f6:	e5fa      	b.n	16cee <ull_conn_rx+0x1252>
		LL_ASSERT(rx_dle);
   170f8:	4a69      	ldr	r2, [pc, #420]	; (172a0 <ull_conn_rx+0x1804>)
   170fa:	496c      	ldr	r1, [pc, #432]	; (172ac <ull_conn_rx+0x1810>)
   170fc:	486a      	ldr	r0, [pc, #424]	; (172a8 <ull_conn_rx+0x180c>)
   170fe:	f241 730b 	movw	r3, #5899	; 0x170b
   17102:	f006 ff26 	bl	1df52 <printk>
   17106:	4040      	eors	r0, r0
   17108:	f380 8811 	msr	BASEPRI, r0
   1710c:	f04f 0003 	mov.w	r0, #3
   17110:	df02      	svc	2
   17112:	e660      	b.n	16dd6 <ull_conn_rx+0x133a>
			tx->next = conn->tx_head->next;
   17114:	6811      	ldr	r1, [r2, #0]
   17116:	6019      	str	r1, [r3, #0]
			conn->tx_head->next = tx;
   17118:	6013      	str	r3, [r2, #0]
				conn->tx_ctrl_last = tx;
   1711a:	e9c5 3363 	strd	r3, r3, [r5, #396]	; 0x18c
   1711e:	f7fe bf3c 	b.w	15f9a <ull_conn_rx+0x4fe>
					conn->lll.max_tx_octets = eff_tx_octets;
   17122:	f8a5 c040 	strh.w	ip, [r5, #64]	; 0x40
					conn->lll.max_tx_time = eff_tx_time;
   17126:	f8a5 3044 	strh.w	r3, [r5, #68]	; 0x44
   1712a:	e6ed      	b.n	16f08 <ull_conn_rx+0x146c>
				if (eff_tx_octets == conn->lll.max_tx_octets &&
   1712c:	455b      	cmp	r3, fp
   1712e:	f47f aed3 	bne.w	16ed8 <ull_conn_rx+0x143c>
						eff_rx_time == conn->lll.max_rx_time &&
   17132:	4552      	cmp	r2, sl
   17134:	f47f aed0 	bne.w	16ed8 <ull_conn_rx+0x143c>
					(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   17138:	6820      	ldr	r0, [r4, #0]
   1713a:	2403      	movs	r4, #3
   1713c:	7104      	strb	r4, [r0, #4]
					goto send_length_resp;
   1713e:	e433      	b.n	169a8 <ull_conn_rx+0xf0c>
			LL_ASSERT(conn_upd_curr == conn);
   17140:	4f56      	ldr	r7, [pc, #344]	; (1729c <ull_conn_rx+0x1800>)
   17142:	6839      	ldr	r1, [r7, #0]
   17144:	428d      	cmp	r5, r1
   17146:	d010      	beq.n	1716a <ull_conn_rx+0x16ce>
   17148:	4a55      	ldr	r2, [pc, #340]	; (172a0 <ull_conn_rx+0x1804>)
   1714a:	4956      	ldr	r1, [pc, #344]	; (172a4 <ull_conn_rx+0x1808>)
   1714c:	4856      	ldr	r0, [pc, #344]	; (172a8 <ull_conn_rx+0x180c>)
   1714e:	f241 4393 	movw	r3, #5267	; 0x1493
   17152:	f006 fefe 	bl	1df52 <printk>
   17156:	4040      	eors	r0, r0
   17158:	f380 8811 	msr	BASEPRI, r0
   1715c:	f04f 0003 	mov.w	r0, #3
   17160:	df02      	svc	2
   17162:	f895 3148 	ldrb.w	r3, [r5, #328]	; 0x148
   17166:	f895 214a 	ldrb.w	r2, [r5, #330]	; 0x14a
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   1716a:	f885 3149 	strb.w	r3, [r5, #329]	; 0x149
	conn_upd_curr = NULL;
   1716e:	2300      	movs	r3, #0
   17170:	603b      	str	r3, [r7, #0]
			conn->procedure_expire = 0U;
   17172:	f8a5 30b0 	strh.w	r3, [r5, #176]	; 0xb0
   17176:	f7ff baae 	b.w	166d6 <ull_conn_rx+0xc3a>
			(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   1717a:	6823      	ldr	r3, [r4, #0]
   1717c:	210f      	movs	r1, #15
   1717e:	7119      	strb	r1, [r3, #4]
			p->status = 0U;
   17180:	7730      	strb	r0, [r6, #28]
			p->tx = conn->lll.phy_tx;
   17182:	7772      	strb	r2, [r6, #29]
			p->rx = conn->lll.phy_rx;
   17184:	f895 3049 	ldrb.w	r3, [r5, #73]	; 0x49
   17188:	f3c3 0302 	ubfx	r3, r3, #0, #3
   1718c:	77b3      	strb	r3, [r6, #30]
					if (err) {
   1718e:	f7fe bd35 	b.w	15bfc <ull_conn_rx+0x160>
			tx->next = conn->tx_head->next;
   17192:	680b      	ldr	r3, [r1, #0]
   17194:	6013      	str	r3, [r2, #0]
			conn->tx_head->next = tx;
   17196:	600a      	str	r2, [r1, #0]
				conn->tx_ctrl_last = tx;
   17198:	e9c5 2263 	strd	r2, r2, [r5, #396]	; 0x18c
   1719c:	e4b6      	b.n	16b0c <ull_conn_rx+0x1070>
				 ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
   1719e:	f895 3172 	ldrb.w	r3, [r5, #370]	; 0x172
				((conn->llcp_length.req != conn->llcp_length.ack) &&
   171a2:	f013 0f06 	tst.w	r3, #6
   171a6:	f43f ab76 	beq.w	16896 <ull_conn_rx+0xdfa>
   171aa:	f7fe be1d 	b.w	15de8 <ull_conn_rx+0x34c>
								lll->interval) ||
   171ae:	8e28      	ldrh	r0, [r5, #48]	; 0x30
   171b0:	4550      	cmp	r0, sl
   171b2:	f47f ad95 	bne.w	16ce0 <ull_conn_rx+0x1244>
							(RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   171b6:	f240 40e2 	movw	r0, #1250	; 0x4e2
   171ba:	fb00 f101 	mul.w	r1, r0, r1
   171be:	f242 7010 	movw	r0, #10000	; 0x2710
   171c2:	fb00 1202 	mla	r2, r0, r2, r1
							(conn->llcp_conn_param.latency != lll->latency) ||
   171c6:	f8b5 00aa 	ldrh.w	r0, [r5, #170]	; 0xaa
							(RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   171ca:	3a01      	subs	r2, #1
   171cc:	fbb2 f2f1 	udiv	r2, r2, r1
							(conn->llcp_conn_param.latency != lll->latency) ||
   171d0:	b292      	uxth	r2, r2
   171d2:	4290      	cmp	r0, r2
   171d4:	f47f ad84 	bne.w	16ce0 <ull_conn_rx+0x1244>
						conn->llcp_conn_param.state =
   171d8:	f8b5 214a 	ldrh.w	r2, [r5, #330]	; 0x14a
   171dc:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
   171e0:	f042 0201 	orr.w	r2, r2, #1
   171e4:	f8a5 214a 	strh.w	r2, [r5, #330]	; 0x14a
						(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   171e8:	6822      	ldr	r2, [r4, #0]
   171ea:	2103      	movs	r1, #3
   171ec:	7111      	strb	r1, [r2, #4]
   171ee:	e57e      	b.n	16cee <ull_conn_rx+0x1252>
									lll->interval) ||
   171f0:	8e2a      	ldrh	r2, [r5, #48]	; 0x30
   171f2:	9802      	ldr	r0, [sp, #8]
   171f4:	4282      	cmp	r2, r0
   171f6:	f47f af71 	bne.w	170dc <ull_conn_rx+0x1640>
								(RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   171fa:	f240 42e2 	movw	r2, #1250	; 0x4e2
   171fe:	fb02 f00c 	mul.w	r0, r2, ip
   17202:	f242 7210 	movw	r2, #10000	; 0x2710
								 lll->latency) ||
   17206:	f8b5 60aa 	ldrh.w	r6, [r5, #170]	; 0xaa
								(RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   1720a:	fb02 020b 	mla	r2, r2, fp, r0
   1720e:	3a01      	subs	r2, #1
   17210:	fbb2 f2f0 	udiv	r2, r2, r0
								 lll->latency) ||
   17214:	b292      	uxth	r2, r2
   17216:	4296      	cmp	r6, r2
   17218:	f47f af60 	bne.w	170dc <ull_conn_rx+0x1640>
   1721c:	e7dc      	b.n	171d8 <ull_conn_rx+0x173c>
			LL_ASSERT(conn->llcp_cu.req == conn->llcp_cu.ack);
   1721e:	f895 20dc 	ldrb.w	r2, [r5, #220]	; 0xdc
   17222:	f895 30dd 	ldrb.w	r3, [r5, #221]	; 0xdd
   17226:	429a      	cmp	r2, r3
   17228:	d00e      	beq.n	17248 <ull_conn_rx+0x17ac>
   1722a:	4a1d      	ldr	r2, [pc, #116]	; (172a0 <ull_conn_rx+0x1804>)
   1722c:	4920      	ldr	r1, [pc, #128]	; (172b0 <ull_conn_rx+0x1814>)
   1722e:	481e      	ldr	r0, [pc, #120]	; (172a8 <ull_conn_rx+0x180c>)
   17230:	f241 4378 	movw	r3, #5240	; 0x1478
   17234:	f006 fe8d 	bl	1df52 <printk>
   17238:	4040      	eors	r0, r0
   1723a:	f380 8811 	msr	BASEPRI, r0
   1723e:	f04f 0003 	mov.w	r0, #3
   17242:	df02      	svc	2
   17244:	f895 30dd 	ldrb.w	r3, [r5, #221]	; 0xdd
			conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   17248:	f895 114a 	ldrb.w	r1, [r5, #330]	; 0x14a
			conn->llcp_cu.interval = conn->llcp_conn_param.interval_max;
   1724c:	f8b5 214e 	ldrh.w	r2, [r5, #334]	; 0x14e
   17250:	f8a5 20e0 	strh.w	r2, [r5, #224]	; 0xe0
			conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   17254:	2205      	movs	r2, #5
   17256:	f362 0102 	bfi	r1, r2, #0, #3
			conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1725a:	f895 00de 	ldrb.w	r0, [r5, #222]	; 0xde
			conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   1725e:	f885 114a 	strb.w	r1, [r5, #330]	; 0x14a
			conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   17262:	f3c1 02c0 	ubfx	r2, r1, #3, #1
			conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   17266:	0092      	lsls	r2, r2, #2
   17268:	f020 0007 	bic.w	r0, r0, #7
			conn->llcp_cu.ack--;
   1726c:	3b01      	subs	r3, #1
			conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1726e:	f042 0201 	orr.w	r2, r2, #1
   17272:	4302      	orrs	r2, r0
			conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   17274:	f8b5 1150 	ldrh.w	r1, [r5, #336]	; 0x150
			conn->llcp_cu.ack--;
   17278:	f885 30dd 	strb.w	r3, [r5, #221]	; 0xdd
			conn->llcp_cu.win_size = 1U;
   1727c:	2401      	movs	r4, #1
			conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   1727e:	f8b5 3152 	ldrh.w	r3, [r5, #338]	; 0x152
			conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   17282:	f885 20de 	strb.w	r2, [r5, #222]	; 0xde
			conn->llcp_cu.win_offset_us = 0U;
   17286:	2000      	movs	r0, #0
			conn->llcp_cu.win_size = 1U;
   17288:	f885 40ec 	strb.w	r4, [r5, #236]	; 0xec
			conn->llcp_cu.win_offset_us = 0U;
   1728c:	f8c5 00e8 	str.w	r0, [r5, #232]	; 0xe8
			conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   17290:	f8a5 10e2 	strh.w	r1, [r5, #226]	; 0xe2
			conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   17294:	f8a5 30e4 	strh.w	r3, [r5, #228]	; 0xe4
		if (err) {
   17298:	f7fe bd3b 	b.w	15d12 <ull_conn_rx+0x276>
   1729c:	20006980 	.word	0x20006980
   172a0:	00024438 	.word	0x00024438
   172a4:	0002453c 	.word	0x0002453c
   172a8:	00023ff4 	.word	0x00023ff4
   172ac:	00024554 	.word	0x00024554
   172b0:	00024514 	.word	0x00024514

000172b4 <ull_conn_tx_demux>:
{
   172b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   172b8:	4f27      	ldr	r7, [pc, #156]	; (17358 <ull_conn_tx_demux+0xa4>)
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   172ba:	4e28      	ldr	r6, [pc, #160]	; (1735c <ull_conn_tx_demux+0xa8>)
   172bc:	78fa      	ldrb	r2, [r7, #3]
{
   172be:	4604      	mov	r4, r0
	return (void *)(fifo + first * size);
   172c0:	1d3d      	adds	r5, r7, #4
   172c2:	e024      	b.n	1730e <ull_conn_tx_demux+0x5a>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   172c4:	4642      	mov	r2, r8
   172c6:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   172ca:	4630      	mov	r0, r6
   172cc:	f7f8 fed8 	bl	10080 <mem_get>
	if (conn->lll.handle != handle) {
   172d0:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   172d2:	4543      	cmp	r3, r8
   172d4:	d129      	bne.n	1732a <ull_conn_tx_demux+0x76>
			struct node_tx *tx = lll_tx->node;
   172d6:	f8d9 3004 	ldr.w	r3, [r9, #4]
			if (!conn->tx_data) {
   172da:	f8d0 2194 	ldr.w	r2, [r0, #404]	; 0x194
			tx->next = NULL;
   172de:	2100      	movs	r1, #0
   172e0:	6019      	str	r1, [r3, #0]
			if (!conn->tx_data) {
   172e2:	b37a      	cbz	r2, 17344 <ull_conn_tx_demux+0x90>
			if (conn->tx_data_last) {
   172e4:	f8d0 2198 	ldr.w	r2, [r0, #408]	; 0x198
   172e8:	b102      	cbz	r2, 172ec <ull_conn_tx_demux+0x38>
				conn->tx_data_last->next = tx;
   172ea:	6013      	str	r3, [r2, #0]
			conn->tx_data_last = tx;
   172ec:	f8c0 3198 	str.w	r3, [r0, #408]	; 0x198
		MFIFO_DEQUEUE(conn_tx);
   172f0:	78fa      	ldrb	r2, [r7, #3]
	uint8_t _first = *first; /* Copy read-index */
   172f2:	78bb      	ldrb	r3, [r7, #2]
   172f4:	7879      	ldrb	r1, [r7, #1]
	if (_first == last) {
   172f6:	429a      	cmp	r2, r3
   172f8:	d005      	beq.n	17306 <ull_conn_tx_demux+0x52>
	_first += 1U;
   172fa:	3301      	adds	r3, #1
   172fc:	b2db      	uxtb	r3, r3
		_first = 0U;
   172fe:	4299      	cmp	r1, r3
   17300:	bf08      	it	eq
   17302:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   17304:	70bb      	strb	r3, [r7, #2]
	} while (--count);
   17306:	3c01      	subs	r4, #1
   17308:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   1730c:	d018      	beq.n	17340 <ull_conn_tx_demux+0x8c>
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   1730e:	78bb      	ldrb	r3, [r7, #2]
   17310:	7839      	ldrb	r1, [r7, #0]
	if (first == last) {
   17312:	4293      	cmp	r3, r2
   17314:	d014      	beq.n	17340 <ull_conn_tx_demux+0x8c>
	return (void *)(fifo + first * size);
   17316:	fb13 f301 	smulbb	r3, r3, r1
		if (!lll_tx) {
   1731a:	eb15 0903 	adds.w	r9, r5, r3
   1731e:	d00f      	beq.n	17340 <ull_conn_tx_demux+0x8c>
		conn = ll_connected_get(lll_tx->handle);
   17320:	f835 8003 	ldrh.w	r8, [r5, r3]
	if (handle >= CONFIG_BT_MAX_CONN) {
   17324:	f1b8 0f03 	cmp.w	r8, #3
   17328:	d9cc      	bls.n	172c4 <ull_conn_tx_demux+0x10>
			struct node_tx *tx = lll_tx->node;
   1732a:	f8d9 1004 	ldr.w	r1, [r9, #4]
			p->ll_id = PDU_DATA_LLID_RESV;
   1732e:	790b      	ldrb	r3, [r1, #4]
   17330:	f36f 0301 	bfc	r3, #0, #2
   17334:	710b      	strb	r3, [r1, #4]
			ll_tx_ack_put(0xFFFF, tx);
   17336:	f64f 70ff 	movw	r0, #65535	; 0xffff
   1733a:	f7fd f8d1 	bl	144e0 <ll_tx_ack_put>
   1733e:	e7d7      	b.n	172f0 <ull_conn_tx_demux+0x3c>
}
   17340:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (!conn->tx_head) {
   17344:	f8d0 2188 	ldr.w	r2, [r0, #392]	; 0x188
				conn->tx_data = tx;
   17348:	f8c0 3194 	str.w	r3, [r0, #404]	; 0x194
				if (!conn->tx_head) {
   1734c:	2a00      	cmp	r2, #0
   1734e:	d1c9      	bne.n	172e4 <ull_conn_tx_demux+0x30>
					conn->tx_head = tx;
   17350:	f8c0 3188 	str.w	r3, [r0, #392]	; 0x188
			if (conn->tx_data_last) {
   17354:	e7ca      	b.n	172ec <ull_conn_tx_demux+0x38>
   17356:	bf00      	nop
   17358:	2000057c 	.word	0x2000057c
   1735c:	20006300 	.word	0x20006300

00017360 <conn_cleanup>:
{
   17360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	rx = conn->llcp_rx;
   17364:	f8d0 40d8 	ldr.w	r4, [r0, #216]	; 0xd8
	rx->hdr.handle = conn->lll.handle;
   17368:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
	*((uint8_t *)rx->pdu) = reason;
   1736a:	f880 1124 	strb.w	r1, [r0, #292]	; 0x124
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   1736e:	230a      	movs	r3, #10
{
   17370:	b083      	sub	sp, #12
   17372:	4606      	mov	r6, r0
	rx->hdr.handle = conn->lll.handle;
   17374:	f8a0 210e 	strh.w	r2, [r0, #270]	; 0x10e
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   17378:	f880 310c 	strb.w	r3, [r0, #268]	; 0x10c
	struct lll_conn *lll = &conn->lll;
   1737c:	f100 0b1c 	add.w	fp, r0, #28
	while (rx) {
   17380:	b144      	cbz	r4, 17394 <conn_cleanup+0x34>
		hdr->type = NODE_RX_TYPE_DC_PDU_RELEASE;
   17382:	2503      	movs	r5, #3
		rx = hdr->link->mem;
   17384:	6820      	ldr	r0, [r4, #0]
		hdr = &rx->hdr;
   17386:	4621      	mov	r1, r4
		rx = hdr->link->mem;
   17388:	6844      	ldr	r4, [r0, #4]
		hdr->type = NODE_RX_TYPE_DC_PDU_RELEASE;
   1738a:	710d      	strb	r5, [r1, #4]
		ll_rx_put(hdr->link, hdr);
   1738c:	f7fd f85c 	bl	14448 <ll_rx_put>
	while (rx) {
   17390:	2c00      	cmp	r4, #0
   17392:	d1f7      	bne.n	17384 <conn_cleanup+0x24>
	while (conn->tx_head) {
   17394:	f8d6 1188 	ldr.w	r1, [r6, #392]	; 0x188
   17398:	b381      	cbz	r1, 173fc <conn_cleanup+0x9c>
		link = mem_acquire(&mem_link_tx.free);
   1739a:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 17454 <conn_cleanup+0xf4>
		LL_ASSERT(link);
   1739e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 1744c <conn_cleanup+0xec>
   173a2:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 17458 <conn_cleanup+0xf8>
   173a6:	f106 0750 	add.w	r7, r6, #80	; 0x50
   173aa:	e007      	b.n	173bc <conn_cleanup+0x5c>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   173ac:	4629      	mov	r1, r5
   173ae:	4620      	mov	r0, r4
   173b0:	463a      	mov	r2, r7
   173b2:	f7f8 fe97 	bl	100e4 <memq_enqueue>
	while (conn->tx_head) {
   173b6:	f8d6 1188 	ldr.w	r1, [r6, #392]	; 0x188
   173ba:	b1f9      	cbz	r1, 173fc <conn_cleanup+0x9c>
		tx = tx_ull_dequeue(conn, conn->tx_head);
   173bc:	4630      	mov	r0, r6
   173be:	f7fd fbb9 	bl	14b34 <tx_ull_dequeue>
   173c2:	4605      	mov	r5, r0
		link = mem_acquire(&mem_link_tx.free);
   173c4:	4640      	mov	r0, r8
   173c6:	f7f8 fe29 	bl	1001c <mem_acquire>
		LL_ASSERT(link);
   173ca:	4604      	mov	r4, r0
   173cc:	2800      	cmp	r0, #0
   173ce:	d1ed      	bne.n	173ac <conn_cleanup+0x4c>
   173d0:	481c      	ldr	r0, [pc, #112]	; (17444 <conn_cleanup+0xe4>)
   173d2:	f640 23b2 	movw	r3, #2738	; 0xab2
   173d6:	4652      	mov	r2, sl
   173d8:	4649      	mov	r1, r9
   173da:	f006 fdba 	bl	1df52 <printk>
   173de:	4040      	eors	r0, r0
   173e0:	f380 8811 	msr	BASEPRI, r0
   173e4:	f04f 0003 	mov.w	r0, #3
   173e8:	df02      	svc	2
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   173ea:	4629      	mov	r1, r5
   173ec:	4620      	mov	r0, r4
   173ee:	463a      	mov	r2, r7
   173f0:	f7f8 fe78 	bl	100e4 <memq_enqueue>
	while (conn->tx_head) {
   173f4:	f8d6 1188 	ldr.w	r1, [r6, #392]	; 0x188
   173f8:	2900      	cmp	r1, #0
   173fa:	d1df      	bne.n	173bc <conn_cleanup+0x5c>
			TICKER_ID_CONN_BASE + lll->handle,
   173fc:	f896 202c 	ldrb.w	r2, [r6, #44]	; 0x2c
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   17400:	4b11      	ldr	r3, [pc, #68]	; (17448 <conn_cleanup+0xe8>)
   17402:	f8cd b000 	str.w	fp, [sp]
			TICKER_ID_CONN_BASE + lll->handle,
   17406:	3203      	adds	r2, #3
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   17408:	b2d2      	uxtb	r2, r2
   1740a:	2101      	movs	r1, #1
   1740c:	2000      	movs	r0, #0
   1740e:	f7fa fad5 	bl	119bc <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   17412:	f030 0302 	bics.w	r3, r0, #2
   17416:	d00c      	beq.n	17432 <conn_cleanup+0xd2>
   17418:	4a0c      	ldr	r2, [pc, #48]	; (1744c <conn_cleanup+0xec>)
   1741a:	490d      	ldr	r1, [pc, #52]	; (17450 <conn_cleanup+0xf0>)
   1741c:	4809      	ldr	r0, [pc, #36]	; (17444 <conn_cleanup+0xe4>)
   1741e:	f640 239f 	movw	r3, #2719	; 0xa9f
   17422:	f006 fd96 	bl	1df52 <printk>
   17426:	4040      	eors	r0, r0
   17428:	f380 8811 	msr	BASEPRI, r0
   1742c:	f04f 0003 	mov.w	r0, #3
   17430:	df02      	svc	2
	lll->handle = 0xFFFF;
   17432:	f64f 73ff 	movw	r3, #65535	; 0xffff
	ull_conn_tx_demux(UINT8_MAX);
   17436:	20ff      	movs	r0, #255	; 0xff
	lll->handle = 0xFFFF;
   17438:	85b3      	strh	r3, [r6, #44]	; 0x2c
}
   1743a:	b003      	add	sp, #12
   1743c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ull_conn_tx_demux(UINT8_MAX);
   17440:	f7ff bf38 	b.w	172b4 <ull_conn_tx_demux>
   17444:	00023ff4 	.word	0x00023ff4
   17448:	00014f25 	.word	0x00014f25
   1744c:	00024438 	.word	0x00024438
   17450:	0002458c 	.word	0x0002458c
   17454:	2000760c 	.word	0x2000760c
   17458:	00024490 	.word	0x00024490

0001745c <ull_conn_tx_lll_enqueue>:
	while (conn->tx_head &&
   1745c:	f8d0 3188 	ldr.w	r3, [r0, #392]	; 0x188
   17460:	2b00      	cmp	r3, #0
   17462:	f000 80e7 	beq.w	17634 <ull_conn_tx_lll_enqueue+0x1d8>
   17466:	3901      	subs	r1, #1
{
   17468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		link = mem_acquire(&mem_link_tx.free);
   1746c:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 1763c <ull_conn_tx_lll_enqueue+0x1e0>
		LL_ASSERT(link);
   17470:	f8df a1cc 	ldr.w	sl, [pc, #460]	; 17640 <ull_conn_tx_lll_enqueue+0x1e4>
   17474:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 17644 <ull_conn_tx_lll_enqueue+0x1e8>
   17478:	4604      	mov	r4, r0
   1747a:	b2cd      	uxtb	r5, r1
   1747c:	e012      	b.n	174a4 <ull_conn_tx_lll_enqueue+0x48>
		link = mem_acquire(&mem_link_tx.free);
   1747e:	4640      	mov	r0, r8
   17480:	f7f8 fdcc 	bl	1001c <mem_acquire>
		LL_ASSERT(link);
   17484:	4607      	mov	r7, r0
   17486:	2800      	cmp	r0, #0
   17488:	d066      	beq.n	17558 <ull_conn_tx_lll_enqueue+0xfc>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   1748a:	4631      	mov	r1, r6
   1748c:	4638      	mov	r0, r7
   1748e:	f104 0250 	add.w	r2, r4, #80	; 0x50
   17492:	f7f8 fe27 	bl	100e4 <memq_enqueue>
	while (conn->tx_head &&
   17496:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
   1749a:	3d01      	subs	r5, #1
   1749c:	b2ed      	uxtb	r5, r5
   1749e:	2b00      	cmp	r3, #0
   174a0:	f000 8089 	beq.w	175b6 <ull_conn_tx_lll_enqueue+0x15a>
			  !conn->llcp_phy.pause_tx &&
   174a4:	f894 2183 	ldrb.w	r2, [r4, #387]	; 0x183
	while (conn->tx_head &&
   174a8:	07d1      	lsls	r1, r2, #31
   174aa:	d403      	bmi.n	174b4 <ull_conn_tx_lll_enqueue+0x58>
			  !conn->llcp_enc.pause_tx &&
   174ac:	f894 212a 	ldrb.w	r2, [r4, #298]	; 0x12a
			  !conn->llcp_phy.pause_tx &&
   174b0:	0792      	lsls	r2, r2, #30
   174b2:	d566      	bpl.n	17582 <ull_conn_tx_lll_enqueue+0x126>
			 (!pause_tx && (conn->tx_head == conn->tx_ctrl))) && count--) {
   174b4:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
   174b8:	4293      	cmp	r3, r2
   174ba:	d17c      	bne.n	175b6 <ull_conn_tx_lll_enqueue+0x15a>
   174bc:	2dff      	cmp	r5, #255	; 0xff
   174be:	d07a      	beq.n	175b6 <ull_conn_tx_lll_enqueue+0x15a>
		tx = tx_ull_dequeue(conn, conn->tx_head);
   174c0:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
   174c4:	4620      	mov	r0, r4
   174c6:	f7fd fb35 	bl	14b34 <tx_ull_dequeue>
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   174ca:	7903      	ldrb	r3, [r0, #4]
   174cc:	f003 0303 	and.w	r3, r3, #3
   174d0:	2b03      	cmp	r3, #3
		tx = tx_ull_dequeue(conn, conn->tx_head);
   174d2:	4606      	mov	r6, r0
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   174d4:	d1d3      	bne.n	1747e <ull_conn_tx_lll_enqueue+0x22>
		switch (pdu_tx->llctrl.opcode) {
   174d6:	79c3      	ldrb	r3, [r0, #7]
   174d8:	3b03      	subs	r3, #3
   174da:	2b14      	cmp	r3, #20
   174dc:	d8cf      	bhi.n	1747e <ull_conn_tx_lll_enqueue+0x22>
   174de:	a201      	add	r2, pc, #4	; (adr r2, 174e4 <ull_conn_tx_lll_enqueue+0x88>)
   174e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   174e4:	00017541 	.word	0x00017541
   174e8:	00017541 	.word	0x00017541
   174ec:	0001747f 	.word	0x0001747f
   174f0:	0001747f 	.word	0x0001747f
   174f4:	0001747f 	.word	0x0001747f
   174f8:	0001747f 	.word	0x0001747f
   174fc:	0001747f 	.word	0x0001747f
   17500:	00017541 	.word	0x00017541
   17504:	00017539 	.word	0x00017539
   17508:	0001747f 	.word	0x0001747f
   1750c:	0001747f 	.word	0x0001747f
   17510:	0001747f 	.word	0x0001747f
   17514:	0001747f 	.word	0x0001747f
   17518:	0001747f 	.word	0x0001747f
   1751c:	0001747f 	.word	0x0001747f
   17520:	0001747f 	.word	0x0001747f
   17524:	0001747f 	.word	0x0001747f
   17528:	0001747f 	.word	0x0001747f
   1752c:	0001747f 	.word	0x0001747f
   17530:	00017575 	.word	0x00017575
   17534:	00017575 	.word	0x00017575
				if (!conn->lll.role) {
   17538:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   1753c:	2b00      	cmp	r3, #0
   1753e:	da9e      	bge.n	1747e <ull_conn_tx_lll_enqueue+0x22>
				conn->llcp_enc.pause_tx = 1U;
   17540:	f894 312a 	ldrb.w	r3, [r4, #298]	; 0x12a
   17544:	f043 0302 	orr.w	r3, r3, #2
   17548:	f884 312a 	strb.w	r3, [r4, #298]	; 0x12a
		link = mem_acquire(&mem_link_tx.free);
   1754c:	4640      	mov	r0, r8
   1754e:	f7f8 fd65 	bl	1001c <mem_acquire>
		LL_ASSERT(link);
   17552:	4607      	mov	r7, r0
   17554:	2800      	cmp	r0, #0
   17556:	d198      	bne.n	1748a <ull_conn_tx_lll_enqueue+0x2e>
   17558:	4837      	ldr	r0, [pc, #220]	; (17638 <ull_conn_tx_lll_enqueue+0x1dc>)
   1755a:	f640 0332 	movw	r3, #2098	; 0x832
   1755e:	4652      	mov	r2, sl
   17560:	4649      	mov	r1, r9
   17562:	f006 fcf6 	bl	1df52 <printk>
   17566:	4040      	eors	r0, r0
   17568:	f380 8811 	msr	BASEPRI, r0
   1756c:	f04f 0003 	mov.w	r0, #3
   17570:	df02      	svc	2
   17572:	e78a      	b.n	1748a <ull_conn_tx_lll_enqueue+0x2e>
				conn->llcp_phy.pause_tx = 1U;
   17574:	f894 3183 	ldrb.w	r3, [r4, #387]	; 0x183
   17578:	f043 0301 	orr.w	r3, r3, #1
   1757c:	f884 3183 	strb.w	r3, [r4, #387]	; 0x183
				break;
   17580:	e77d      	b.n	1747e <ull_conn_tx_lll_enqueue+0x22>
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   17582:	791a      	ldrb	r2, [r3, #4]
   17584:	f002 0203 	and.w	r2, r2, #3
   17588:	2a03      	cmp	r2, #3
   1758a:	d197      	bne.n	174bc <ull_conn_tx_lll_enqueue+0x60>
			((pdu_data_tx->llctrl.opcode ==
   1758c:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   1758e:	2a03      	cmp	r2, #3
   17590:	d001      	beq.n	17596 <ull_conn_tx_lll_enqueue+0x13a>
			  PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
   17592:	2a0a      	cmp	r2, #10
   17594:	d192      	bne.n	174bc <ull_conn_tx_lll_enqueue+0x60>
		if (((conn->llcp_req != conn->llcp_ack) &&
   17596:	f894 10c0 	ldrb.w	r1, [r4, #192]	; 0xc0
   1759a:	f894 20bf 	ldrb.w	r2, [r4, #191]	; 0xbf
   1759e:	428a      	cmp	r2, r1
   175a0:	d00b      	beq.n	175ba <ull_conn_tx_lll_enqueue+0x15e>
   175a2:	f894 20c1 	ldrb.w	r2, [r4, #193]	; 0xc1
   175a6:	2a03      	cmp	r2, #3
   175a8:	d088      	beq.n	174bc <ull_conn_tx_lll_enqueue+0x60>
			if ((tx->next != NULL) &&
   175aa:	681a      	ldr	r2, [r3, #0]
   175ac:	b11a      	cbz	r2, 175b6 <ull_conn_tx_lll_enqueue+0x15a>
   175ae:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
   175b2:	428a      	cmp	r2, r1
   175b4:	d02d      	beq.n	17612 <ull_conn_tx_lll_enqueue+0x1b6>
}
   175b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				((conn->llcp_req == conn->llcp_ack) &&
   175ba:	f894 00f1 	ldrb.w	r0, [r4, #241]	; 0xf1
   175be:	f894 10f0 	ldrb.w	r1, [r4, #240]	; 0xf0
   175c2:	4288      	cmp	r0, r1
   175c4:	d1f1      	bne.n	175aa <ull_conn_tx_lll_enqueue+0x14e>
				 ((conn->llcp_feature.ack != conn->llcp_feature.req) ||
   175c6:	f894 00fd 	ldrb.w	r0, [r4, #253]	; 0xfd
   175ca:	f894 10fc 	ldrb.w	r1, [r4, #252]	; 0xfc
   175ce:	4288      	cmp	r0, r1
   175d0:	d1eb      	bne.n	175aa <ull_conn_tx_lll_enqueue+0x14e>
				  (conn->llcp_version.ack != conn->llcp_version.req) ||
   175d2:	f894 0149 	ldrb.w	r0, [r4, #329]	; 0x149
   175d6:	f894 1148 	ldrb.w	r1, [r4, #328]	; 0x148
   175da:	4288      	cmp	r0, r1
   175dc:	d1e5      	bne.n	175aa <ull_conn_tx_lll_enqueue+0x14e>
				   conn->llcp_conn_param.req) ||
   175de:	f894 0171 	ldrb.w	r0, [r4, #369]	; 0x171
   175e2:	f894 1170 	ldrb.w	r1, [r4, #368]	; 0x170
   175e6:	4288      	cmp	r0, r1
   175e8:	d1df      	bne.n	175aa <ull_conn_tx_lll_enqueue+0x14e>
				  (conn->llcp_phy.ack != conn->llcp_phy.req) ||
   175ea:	f894 0181 	ldrb.w	r0, [r4, #385]	; 0x181
   175ee:	f894 1180 	ldrb.w	r1, [r4, #384]	; 0x180
   175f2:	4288      	cmp	r0, r1
   175f4:	d1d9      	bne.n	175aa <ull_conn_tx_lll_enqueue+0x14e>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   175f6:	f894 30c4 	ldrb.w	r3, [r4, #196]	; 0xc4
   175fa:	2101      	movs	r1, #1
   175fc:	f361 0301 	bfi	r3, r1, #0, #2
			conn->llcp_ack -= 2U;
   17600:	3a02      	subs	r2, #2
			conn->llcp_type = LLCP_ENCRYPTION;
   17602:	2103      	movs	r1, #3
			conn->llcp_ack -= 2U;
   17604:	f884 20c0 	strb.w	r2, [r4, #192]	; 0xc0
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   17608:	f884 30c4 	strb.w	r3, [r4, #196]	; 0xc4
			conn->llcp_type = LLCP_ENCRYPTION;
   1760c:	f884 10c1 	strb.w	r1, [r4, #193]	; 0xc1
			conn->llcp_ack -= 2U;
   17610:	e754      	b.n	174bc <ull_conn_tx_lll_enqueue+0x60>
				tx->next = conn->tx_ctrl_last->next;
   17612:	f8d4 1190 	ldr.w	r1, [r4, #400]	; 0x190
				if (!conn->tx_data_last) {
   17616:	f8d4 0198 	ldr.w	r0, [r4, #408]	; 0x198
				conn->tx_head = tx->next;
   1761a:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
				tx->next = conn->tx_ctrl_last->next;
   1761e:	680a      	ldr	r2, [r1, #0]
   17620:	601a      	str	r2, [r3, #0]
				conn->tx_ctrl_last->next = tx;
   17622:	600b      	str	r3, [r1, #0]
				conn->tx_data = tx;
   17624:	f8c4 3194 	str.w	r3, [r4, #404]	; 0x194
				if (!conn->tx_data_last) {
   17628:	2800      	cmp	r0, #0
   1762a:	f47f af47 	bne.w	174bc <ull_conn_tx_lll_enqueue+0x60>
					conn->tx_data_last = tx;
   1762e:	f8c4 3198 	str.w	r3, [r4, #408]	; 0x198
   17632:	e743      	b.n	174bc <ull_conn_tx_lll_enqueue+0x60>
   17634:	4770      	bx	lr
   17636:	bf00      	nop
   17638:	00023ff4 	.word	0x00023ff4
   1763c:	2000760c 	.word	0x2000760c
   17640:	00024438 	.word	0x00024438
   17644:	00024490 	.word	0x00024490

00017648 <ull_conn_link_tx_release>:
	mem_release(link, &mem_link_tx.free);
   17648:	4901      	ldr	r1, [pc, #4]	; (17650 <ull_conn_link_tx_release+0x8>)
   1764a:	f7f8 bd01 	b.w	10050 <mem_release>
   1764e:	bf00      	nop
   17650:	2000760c 	.word	0x2000760c

00017654 <ull_conn_ack_last_idx_get>:
	return mfifo_conn_ack.l;
   17654:	4b01      	ldr	r3, [pc, #4]	; (1765c <ull_conn_ack_last_idx_get+0x8>)
}
   17656:	78d8      	ldrb	r0, [r3, #3]
   17658:	4770      	bx	lr
   1765a:	bf00      	nop
   1765c:	200004a0 	.word	0x200004a0

00017660 <ull_conn_ack_peek>:
{
   17660:	b4f0      	push	{r4, r5, r6, r7}
	lll_tx = MFIFO_DEQUEUE_GET(conn_ack);
   17662:	4b0b      	ldr	r3, [pc, #44]	; (17690 <ull_conn_ack_peek+0x30>)
   17664:	789c      	ldrb	r4, [r3, #2]
   17666:	78de      	ldrb	r6, [r3, #3]
   17668:	781f      	ldrb	r7, [r3, #0]
	if (first == last) {
   1766a:	42b4      	cmp	r4, r6
   1766c:	d00d      	beq.n	1768a <ull_conn_ack_peek+0x2a>
	return (void *)(fifo + first * size);
   1766e:	3304      	adds	r3, #4
   17670:	fb14 f407 	smulbb	r4, r4, r7
	if (!lll_tx) {
   17674:	4605      	mov	r5, r0
   17676:	1918      	adds	r0, r3, r4
   17678:	d005      	beq.n	17686 <ull_conn_ack_peek+0x26>
	*ack_last = mfifo_conn_ack.l;
   1767a:	702e      	strb	r6, [r5, #0]
	*handle = lll_tx->handle;
   1767c:	5b1c      	ldrh	r4, [r3, r4]
	*tx = lll_tx->node;
   1767e:	6843      	ldr	r3, [r0, #4]
	*handle = lll_tx->handle;
   17680:	800c      	strh	r4, [r1, #0]
	*tx = lll_tx->node;
   17682:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   17684:	6818      	ldr	r0, [r3, #0]
}
   17686:	bcf0      	pop	{r4, r5, r6, r7}
   17688:	4770      	bx	lr
		return NULL;
   1768a:	2000      	movs	r0, #0
   1768c:	e7fb      	b.n	17686 <ull_conn_ack_peek+0x26>
   1768e:	bf00      	nop
   17690:	200004a0 	.word	0x200004a0

00017694 <ull_conn_ack_by_last_peek>:
{
   17694:	b430      	push	{r4, r5}
	lll_tx = mfifo_dequeue_get(mfifo_conn_ack.m, mfifo_conn_ack.s,
   17696:	4b09      	ldr	r3, [pc, #36]	; (176bc <ull_conn_ack_by_last_peek+0x28>)
   17698:	789c      	ldrb	r4, [r3, #2]
   1769a:	781d      	ldrb	r5, [r3, #0]
	if (first == last) {
   1769c:	4284      	cmp	r4, r0
   1769e:	d00b      	beq.n	176b8 <ull_conn_ack_by_last_peek+0x24>
	return (void *)(fifo + first * size);
   176a0:	3304      	adds	r3, #4
   176a2:	fb14 f405 	smulbb	r4, r4, r5
	if (!lll_tx) {
   176a6:	1918      	adds	r0, r3, r4
   176a8:	d004      	beq.n	176b4 <ull_conn_ack_by_last_peek+0x20>
	*handle = lll_tx->handle;
   176aa:	5b1c      	ldrh	r4, [r3, r4]
	*tx = lll_tx->node;
   176ac:	6843      	ldr	r3, [r0, #4]
	*handle = lll_tx->handle;
   176ae:	800c      	strh	r4, [r1, #0]
	*tx = lll_tx->node;
   176b0:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   176b2:	6818      	ldr	r0, [r3, #0]
}
   176b4:	bc30      	pop	{r4, r5}
   176b6:	4770      	bx	lr
		return NULL;
   176b8:	2000      	movs	r0, #0
   176ba:	e7fb      	b.n	176b4 <ull_conn_ack_by_last_peek+0x20>
   176bc:	200004a0 	.word	0x200004a0

000176c0 <ull_conn_ack_dequeue>:
{
   176c0:	b410      	push	{r4}
	return MFIFO_DEQUEUE(conn_ack);
   176c2:	4b0a      	ldr	r3, [pc, #40]	; (176ec <ull_conn_ack_dequeue+0x2c>)
	uint8_t _first = *first; /* Copy read-index */
   176c4:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
   176c6:	78da      	ldrb	r2, [r3, #3]
   176c8:	7818      	ldrb	r0, [r3, #0]
   176ca:	785c      	ldrb	r4, [r3, #1]
   176cc:	428a      	cmp	r2, r1
   176ce:	d00a      	beq.n	176e6 <ull_conn_ack_dequeue+0x26>
	_first += 1U;
   176d0:	1c4a      	adds	r2, r1, #1
   176d2:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   176d4:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
   176d8:	4294      	cmp	r4, r2
   176da:	bf08      	it	eq
   176dc:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   176de:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   176e0:	709a      	strb	r2, [r3, #2]
}
   176e2:	bc10      	pop	{r4}
   176e4:	4770      	bx	lr
		return NULL;
   176e6:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE(conn_ack);
   176e8:	e7fb      	b.n	176e2 <ull_conn_ack_dequeue+0x22>
   176ea:	bf00      	nop
   176ec:	200004a0 	.word	0x200004a0

000176f0 <ull_conn_lll_ack_enqueue>:
{
   176f0:	b570      	push	{r4, r5, r6, lr}
	idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   176f2:	4a13      	ldr	r2, [pc, #76]	; (17740 <ull_conn_lll_ack_enqueue+0x50>)
   176f4:	78d6      	ldrb	r6, [r2, #3]
	if (last == count) {
   176f6:	7855      	ldrb	r5, [r2, #1]
   176f8:	7894      	ldrb	r4, [r2, #2]
	last = last + 1;
   176fa:	1c73      	adds	r3, r6, #1
   176fc:	b2db      	uxtb	r3, r3
		last = 0U;
   176fe:	429d      	cmp	r5, r3
   17700:	bf08      	it	eq
   17702:	2300      	moveq	r3, #0
	if (last == first) {
   17704:	429c      	cmp	r4, r3
   17706:	d00a      	beq.n	1771e <ull_conn_lll_ack_enqueue+0x2e>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   17708:	4615      	mov	r5, r2
   1770a:	f815 4b04 	ldrb.w	r4, [r5], #4
   1770e:	fb14 f406 	smulbb	r4, r4, r6
	LL_ASSERT(lll_tx);
   17712:	192e      	adds	r6, r5, r4
   17714:	d003      	beq.n	1771e <ull_conn_lll_ack_enqueue+0x2e>
	lll_tx->handle = handle;
   17716:	5328      	strh	r0, [r5, r4]
	*last = idx; /* Commit: Update write index */
   17718:	70d3      	strb	r3, [r2, #3]
	lll_tx->node = tx;
   1771a:	6071      	str	r1, [r6, #4]
}
   1771c:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(lll_tx);
   1771e:	4a09      	ldr	r2, [pc, #36]	; (17744 <ull_conn_lll_ack_enqueue+0x54>)
   17720:	4909      	ldr	r1, [pc, #36]	; (17748 <ull_conn_lll_ack_enqueue+0x58>)
   17722:	480a      	ldr	r0, [pc, #40]	; (1774c <ull_conn_lll_ack_enqueue+0x5c>)
   17724:	f44f 6307 	mov.w	r3, #2160	; 0x870
   17728:	f006 fc13 	bl	1df52 <printk>
   1772c:	4040      	eors	r0, r0
   1772e:	f380 8811 	msr	BASEPRI, r0
   17732:	f04f 0003 	mov.w	r0, #3
   17736:	df02      	svc	2
	lll_tx->handle = handle;
   17738:	2300      	movs	r3, #0
   1773a:	801b      	strh	r3, [r3, #0]
   1773c:	deff      	udf	#255	; 0xff
   1773e:	bf00      	nop
   17740:	200004a0 	.word	0x200004a0
   17744:	00024438 	.word	0x00024438
   17748:	00024480 	.word	0x00024480
   1774c:	00023ff4 	.word	0x00023ff4

00017750 <ull_conn_tx_ack>:
{
   17750:	b5f0      	push	{r4, r5, r6, r7, lr}
	LL_ASSERT(pdu_tx->len);
   17752:	7953      	ldrb	r3, [r2, #5]
{
   17754:	b083      	sub	sp, #12
   17756:	4614      	mov	r4, r2
   17758:	4605      	mov	r5, r0
   1775a:	460f      	mov	r7, r1
	LL_ASSERT(pdu_tx->len);
   1775c:	2b00      	cmp	r3, #0
   1775e:	d033      	beq.n	177c8 <ull_conn_tx_ack+0x78>
	if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   17760:	7923      	ldrb	r3, [r4, #4]
   17762:	f003 0203 	and.w	r2, r3, #3
   17766:	2a03      	cmp	r2, #3
   17768:	d016      	beq.n	17798 <ull_conn_tx_ack+0x48>
	} else if (handle != 0xFFFF) {
   1776a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1776e:	4295      	cmp	r5, r2
   17770:	d10a      	bne.n	17788 <ull_conn_tx_ack+0x38>
		pdu_tx->ll_id = PDU_DATA_LLID_RESV;
   17772:	f36f 0301 	bfc	r3, #0, #2
   17776:	7123      	strb	r3, [r4, #4]
	struct ll_conn *conn = NULL;
   17778:	2600      	movs	r6, #0
	ll_tx_ack_put(handle, tx);
   1777a:	4621      	mov	r1, r4
   1777c:	4628      	mov	r0, r5
   1777e:	f7fc feaf 	bl	144e0 <ll_tx_ack_put>
}
   17782:	4630      	mov	r0, r6
   17784:	b003      	add	sp, #12
   17786:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   17788:	48c4      	ldr	r0, [pc, #784]	; (17a9c <ull_conn_tx_ack+0x34c>)
   1778a:	462a      	mov	r2, r5
   1778c:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   17790:	f7f8 fc76 	bl	10080 <mem_get>
   17794:	4606      	mov	r6, r0
   17796:	e7f0      	b.n	1777a <ull_conn_tx_ack+0x2a>
		if (handle != 0xFFFF) {
   17798:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1779c:	429d      	cmp	r5, r3
   1779e:	d121      	bne.n	177e4 <ull_conn_tx_ack+0x94>
	struct ll_conn *conn = NULL;
   177a0:	2600      	movs	r6, #0
		if (link->next == (void *)tx) {
   177a2:	6838      	ldr	r0, [r7, #0]
   177a4:	4284      	cmp	r4, r0
   177a6:	d045      	beq.n	17834 <ull_conn_tx_ack+0xe4>
			LL_ASSERT(!link->next);
   177a8:	2800      	cmp	r0, #0
   177aa:	d0e6      	beq.n	1777a <ull_conn_tx_ack+0x2a>
   177ac:	4abc      	ldr	r2, [pc, #752]	; (17aa0 <ull_conn_tx_ack+0x350>)
   177ae:	49bd      	ldr	r1, [pc, #756]	; (17aa4 <ull_conn_tx_ack+0x354>)
   177b0:	48bd      	ldr	r0, [pc, #756]	; (17aa8 <ull_conn_tx_ack+0x358>)
   177b2:	f640 0392 	movw	r3, #2194	; 0x892
   177b6:	f006 fbcc 	bl	1df52 <printk>
   177ba:	4040      	eors	r0, r0
   177bc:	f380 8811 	msr	BASEPRI, r0
   177c0:	f04f 0003 	mov.w	r0, #3
   177c4:	df02      	svc	2
   177c6:	e7d8      	b.n	1777a <ull_conn_tx_ack+0x2a>
	LL_ASSERT(pdu_tx->len);
   177c8:	4ab5      	ldr	r2, [pc, #724]	; (17aa0 <ull_conn_tx_ack+0x350>)
   177ca:	49b8      	ldr	r1, [pc, #736]	; (17aac <ull_conn_tx_ack+0x35c>)
   177cc:	48b6      	ldr	r0, [pc, #728]	; (17aa8 <ull_conn_tx_ack+0x358>)
   177ce:	f640 037f 	movw	r3, #2175	; 0x87f
   177d2:	f006 fbbe 	bl	1df52 <printk>
   177d6:	4040      	eors	r0, r0
   177d8:	f380 8811 	msr	BASEPRI, r0
   177dc:	f04f 0003 	mov.w	r0, #3
   177e0:	df02      	svc	2
   177e2:	e7bd      	b.n	17760 <ull_conn_tx_ack+0x10>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   177e4:	48ad      	ldr	r0, [pc, #692]	; (17a9c <ull_conn_tx_ack+0x34c>)
   177e6:	462a      	mov	r2, r5
   177e8:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   177ec:	f7f8 fc48 	bl	10080 <mem_get>
   177f0:	79e3      	ldrb	r3, [r4, #7]
   177f2:	3b02      	subs	r3, #2
   177f4:	4606      	mov	r6, r0
		switch (pdu_tx->llctrl.opcode) {
   177f6:	2b16      	cmp	r3, #22
   177f8:	d818      	bhi.n	1782c <ull_conn_tx_ack+0xdc>
   177fa:	e8df f013 	tbh	[pc, r3, lsl #1]
   177fe:	011e      	.short	0x011e
   17800:	00460102 	.word	0x00460102
   17804:	00170017 	.word	0x00170017
   17808:	00170017 	.word	0x00170017
   1780c:	00f10017 	.word	0x00f10017
   17810:	0017005a 	.word	0x0017005a
   17814:	00170050 	.word	0x00170050
   17818:	00170017 	.word	0x00170017
   1781c:	0017004d 	.word	0x0017004d
   17820:	00d80017 	.word	0x00d80017
   17824:	001f00b0 	.word	0x001f00b0
   17828:	00e00026 	.word	0x00e00026
		if (link->next == (void *)tx) {
   1782c:	6838      	ldr	r0, [r7, #0]
   1782e:	42a0      	cmp	r0, r4
   17830:	d1ba      	bne.n	177a8 <ull_conn_tx_ack+0x58>
   17832:	4620      	mov	r0, r4
			mem_release(tx, &mem_conn_tx_ctrl.free);
   17834:	499e      	ldr	r1, [pc, #632]	; (17ab0 <ull_conn_tx_ack+0x360>)
   17836:	f7f8 fc0b 	bl	10050 <mem_release>
			return conn;
   1783a:	e7a2      	b.n	17782 <ull_conn_tx_ack+0x32>
				conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   1783c:	f890 3182 	ldrb.w	r3, [r0, #386]	; 0x182
   17840:	2202      	movs	r2, #2
   17842:	f362 0301 	bfi	r3, r2, #0, #2
   17846:	f880 3182 	strb.w	r3, [r0, #386]	; 0x182
				if (conn->lll.role) {
   1784a:	f996 303d 	ldrsb.w	r3, [r6, #61]	; 0x3d
   1784e:	2b00      	cmp	r3, #0
   17850:	da14      	bge.n	1787c <ull_conn_tx_ack+0x12c>
					uint8_t phy_tx_time[8] = {BIT(0), BIT(0), BIT(1), BIT(0),
   17852:	4998      	ldr	r1, [pc, #608]	; (17ab4 <ull_conn_tx_ack+0x364>)
					phys = conn->llcp_phy.tx | lll->phy_tx;
   17854:	f896 2048 	ldrb.w	r2, [r6, #72]	; 0x48
   17858:	f896 3182 	ldrb.w	r3, [r6, #386]	; 0x182
					uint8_t phy_tx_time[8] = {BIT(0), BIT(0), BIT(1), BIT(0),
   1785c:	c903      	ldmia	r1, {r0, r1}
					phys = conn->llcp_phy.tx | lll->phy_tx;
   1785e:	ea42 0393 	orr.w	r3, r2, r3, lsr #2
					uint8_t phy_tx_time[8] = {BIT(0), BIT(0), BIT(1), BIT(0),
   17862:	f10d 0c08 	add.w	ip, sp, #8
   17866:	e90c 0003 	stmdb	ip, {r0, r1}
					lll->phy_tx_time = phy_tx_time[phys];
   1786a:	f003 0307 	and.w	r3, r3, #7
   1786e:	4463      	add	r3, ip
   17870:	f813 3c08 	ldrb.w	r3, [r3, #-8]
   17874:	f363 1206 	bfi	r2, r3, #4, #3
   17878:	f886 2048 	strb.w	r2, [r6, #72]	; 0x48
				conn->llcp_phy.pause_tx = 0U;
   1787c:	f896 3183 	ldrb.w	r3, [r6, #387]	; 0x183
   17880:	f36f 0300 	bfc	r3, #0, #1
   17884:	f886 3183 	strb.w	r3, [r6, #387]	; 0x183
				break;
   17888:	e78b      	b.n	177a2 <ull_conn_tx_ack+0x52>
					conn->llcp_enc.pause_tx = 1U;
   1788a:	f896 312a 	ldrb.w	r3, [r6, #298]	; 0x12a
   1788e:	f043 0302 	orr.w	r3, r3, #2
   17892:	f886 312a 	strb.w	r3, [r6, #298]	; 0x12a
   17896:	e784      	b.n	177a2 <ull_conn_tx_ack+0x52>
				if (pdu_tx->llctrl.reject_ext_ind.reject_opcode !=
   17898:	7a23      	ldrb	r3, [r4, #8]
   1789a:	2b03      	cmp	r3, #3
   1789c:	d181      	bne.n	177a2 <ull_conn_tx_ack+0x52>
				conn->llcp_enc.pause_rx = 0U;
   1789e:	f896 312a 	ldrb.w	r3, [r6, #298]	; 0x12a
				conn->procedure_expire = 0U;
   178a2:	2200      	movs	r2, #0
				conn->llcp_enc.pause_rx = 0U;
   178a4:	f023 0303 	bic.w	r3, r3, #3
   178a8:	f886 312a 	strb.w	r3, [r6, #298]	; 0x12a
				conn->procedure_expire = 0U;
   178ac:	f8a6 20b0 	strh.w	r2, [r6, #176]	; 0xb0
				break;
   178b0:	e777      	b.n	177a2 <ull_conn_tx_ack+0x52>
				if (!conn->lll.role) {
   178b2:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
   178b6:	2b00      	cmp	r3, #0
   178b8:	dbe7      	blt.n	1788a <ull_conn_tx_ack+0x13a>
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   178ba:	7923      	ldrb	r3, [r4, #4]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   178bc:	2203      	movs	r2, #3
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   178be:	f043 0303 	orr.w	r3, r3, #3
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_req) +
   178c2:	2117      	movs	r1, #23
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   178c4:	71e2      	strb	r2, [r4, #7]
		memcpy(&pdu_ctrl_tx->llctrl.enc_req.rand[0], &conn->llcp_enc.rand[0],
   178c6:	2208      	movs	r2, #8
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   178c8:	7123      	strb	r3, [r4, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_req) +
   178ca:	7161      	strb	r1, [r4, #5]
		memcpy(&pdu_ctrl_tx->llctrl.enc_req.rand[0], &conn->llcp_enc.rand[0],
   178cc:	f200 112d 	addw	r1, r0, #301	; 0x12d
   178d0:	18a0      	adds	r0, r4, r2
   178d2:	f008 fad0 	bl	1fe76 <memcpy>
		pdu_ctrl_tx->llctrl.enc_req.ediv[0] = conn->llcp_enc.ediv[0];
   178d6:	f896 312b 	ldrb.w	r3, [r6, #299]	; 0x12b
   178da:	7423      	strb	r3, [r4, #16]
		pdu_ctrl_tx->llctrl.enc_req.ediv[1] = conn->llcp_enc.ediv[1];
   178dc:	f896 312c 	ldrb.w	r3, [r6, #300]	; 0x12c
   178e0:	7463      	strb	r3, [r4, #17]
		lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_req.skdm,
   178e2:	210c      	movs	r1, #12
   178e4:	f104 0012 	add.w	r0, r4, #18
   178e8:	f001 ff18 	bl	1971c <lll_csrand_isr_get>
			conn->tx_head &&
   178ec:	f8d6 3188 	ldr.w	r3, [r6, #392]	; 0x188
	if (
   178f0:	2b00      	cmp	r3, #0
   178f2:	f000 80ac 	beq.w	17a4e <ull_conn_tx_ack+0x2fe>
			!conn->llcp_enc.pause_tx &&
   178f6:	f896 212a 	ldrb.w	r2, [r6, #298]	; 0x12a
			conn->tx_head &&
   178fa:	0791      	lsls	r1, r2, #30
   178fc:	f100 80a7 	bmi.w	17a4e <ull_conn_tx_ack+0x2fe>
			!conn->llcp_phy.pause_tx &&
   17900:	f896 2183 	ldrb.w	r2, [r6, #387]	; 0x183
   17904:	07d2      	lsls	r2, r2, #31
   17906:	f100 80a2 	bmi.w	17a4e <ull_conn_tx_ack+0x2fe>
		if (conn->tx_head == conn->tx_data) {
   1790a:	f8d6 2194 	ldr.w	r2, [r6, #404]	; 0x194
   1790e:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   17910:	bf04      	itt	eq
   17912:	681a      	ldreq	r2, [r3, #0]
   17914:	f8c6 2194 	streq.w	r2, [r6, #404]	; 0x194
		if (!conn->tx_ctrl) {
   17918:	f8d6 218c 	ldr.w	r2, [r6, #396]	; 0x18c
   1791c:	2a00      	cmp	r2, #0
   1791e:	f000 80b5 	beq.w	17a8c <ull_conn_tx_ack+0x33c>
	tx->next = conn->tx_ctrl_last->next;
   17922:	f8d6 3190 	ldr.w	r3, [r6, #400]	; 0x190
   17926:	681a      	ldr	r2, [r3, #0]
   17928:	6022      	str	r2, [r4, #0]
	conn->tx_ctrl_last->next = tx;
   1792a:	601c      	str	r4, [r3, #0]
	conn->tx_ctrl_last = tx;
   1792c:	f8c6 4190 	str.w	r4, [r6, #400]	; 0x190
   17930:	6823      	ldr	r3, [r4, #0]
	if (!tx->next) {
   17932:	683a      	ldr	r2, [r7, #0]
   17934:	2b00      	cmp	r3, #0
   17936:	f000 8087 	beq.w	17a48 <ull_conn_tx_ack+0x2f8>
		if (link->next == (void *)tx) {
   1793a:	2a00      	cmp	r2, #0
   1793c:	f47f af21 	bne.w	17782 <ull_conn_tx_ack+0x32>
			LL_ASSERT(link->next);
   17940:	4a57      	ldr	r2, [pc, #348]	; (17aa0 <ull_conn_tx_ack+0x350>)
   17942:	495d      	ldr	r1, [pc, #372]	; (17ab8 <ull_conn_tx_ack+0x368>)
   17944:	4858      	ldr	r0, [pc, #352]	; (17aa8 <ull_conn_tx_ack+0x358>)
   17946:	f640 038b 	movw	r3, #2187	; 0x88b
   1794a:	f006 fb02 	bl	1df52 <printk>
   1794e:	4040      	eors	r0, r0
   17950:	f380 8811 	msr	BASEPRI, r0
   17954:	f04f 0003 	mov.w	r0, #3
   17958:	df02      	svc	2
   1795a:	2000      	movs	r0, #0
   1795c:	e76a      	b.n	17834 <ull_conn_tx_ack+0xe4>
				if (conn->llcp_length.req != conn->llcp_length.ack) {
   1795e:	f890 1170 	ldrb.w	r1, [r0, #368]	; 0x170
   17962:	f890 3171 	ldrb.w	r3, [r0, #369]	; 0x171
   17966:	428b      	cmp	r3, r1
   17968:	f43f af1b 	beq.w	177a2 <ull_conn_tx_ack+0x52>
					switch (conn->llcp_length.state) {
   1796c:	f890 2172 	ldrb.w	r2, [r0, #370]	; 0x172
   17970:	f002 0307 	and.w	r3, r2, #7
   17974:	2b03      	cmp	r3, #3
   17976:	d005      	beq.n	17984 <ull_conn_tx_ack+0x234>
   17978:	3303      	adds	r3, #3
   1797a:	f003 0307 	and.w	r3, r3, #7
   1797e:	2b01      	cmp	r3, #1
   17980:	f63f af54 	bhi.w	1782c <ull_conn_tx_ack+0xdc>
							conn->lll.max_tx_octets =
   17984:	f8b6 3176 	ldrh.w	r3, [r6, #374]	; 0x176
   17988:	f8a6 3040 	strh.w	r3, [r6, #64]	; 0x40
							if (conn->llcp_length.state ==
   1798c:	f002 0307 	and.w	r3, r2, #7
							conn->lll.max_tx_time =
   17990:	f8b6 017a 	ldrh.w	r0, [r6, #378]	; 0x17a
   17994:	f8a6 0044 	strh.w	r0, [r6, #68]	; 0x44
							if (conn->llcp_length.state ==
   17998:	2b05      	cmp	r3, #5
   1799a:	d071      	beq.n	17a80 <ull_conn_tx_ack+0x330>
							if (!conn->llcp_length.cache.tx_octets) {
   1799c:	f8b6 317c 	ldrh.w	r3, [r6, #380]	; 0x17c
   179a0:	2b00      	cmp	r3, #0
   179a2:	d15f      	bne.n	17a64 <ull_conn_tx_ack+0x314>
								conn->llcp_length.ack =
   179a4:	f886 1171 	strb.w	r1, [r6, #369]	; 0x171
								conn->procedure_expire = 0U;
   179a8:	f8a6 30b0 	strh.w	r3, [r6, #176]	; 0xb0
								break;
   179ac:	e6f9      	b.n	177a2 <ull_conn_tx_ack+0x52>
				conn->llcp_length.state = LLCP_LENGTH_STATE_RSP_WAIT;
   179ae:	f890 3172 	ldrb.w	r3, [r0, #370]	; 0x172
   179b2:	2202      	movs	r2, #2
   179b4:	f362 0302 	bfi	r3, r2, #0, #3
   179b8:	f880 3172 	strb.w	r3, [r0, #370]	; 0x172
				break;
   179bc:	e6f1      	b.n	177a2 <ull_conn_tx_ack+0x52>
				conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   179be:	f890 30c4 	ldrb.w	r3, [r0, #196]	; 0xc4
   179c2:	f890 1048 	ldrb.w	r1, [r0, #72]	; 0x48
				conn->llcp_phy.pause_tx = 0U;
   179c6:	f890 2183 	ldrb.w	r2, [r0, #387]	; 0x183
				conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   179ca:	f3c3 0382 	ubfx	r3, r3, #2, #3
   179ce:	f363 1106 	bfi	r1, r3, #4, #3
				conn->llcp_phy.pause_tx = 0U;
   179d2:	f36f 0200 	bfc	r2, #0, #1
				conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   179d6:	f880 1048 	strb.w	r1, [r0, #72]	; 0x48
				conn->llcp_phy.pause_tx = 0U;
   179da:	f880 2183 	strb.w	r2, [r0, #387]	; 0x183
				break;
   179de:	e6e0      	b.n	177a2 <ull_conn_tx_ack+0x52>
				conn->llcp_enc.pause_tx = 1U;
   179e0:	f890 312a 	ldrb.w	r3, [r0, #298]	; 0x12a
				conn->procedure_expire = conn->procedure_reload;
   179e4:	f8b0 20ae 	ldrh.w	r2, [r0, #174]	; 0xae
   179e8:	f8a0 20b0 	strh.w	r2, [r0, #176]	; 0xb0
				conn->llcp_enc.pause_tx = 1U;
   179ec:	f023 0306 	bic.w	r3, r3, #6
				conn->llcp_enc.ack = conn->llcp_enc.req;
   179f0:	f890 2128 	ldrb.w	r2, [r0, #296]	; 0x128
   179f4:	f880 2129 	strb.w	r2, [r0, #297]	; 0x129
				conn->llcp_enc.pause_tx = 1U;
   179f8:	f043 0306 	orr.w	r3, r3, #6
   179fc:	f880 312a 	strb.w	r3, [r0, #298]	; 0x12a
				break;
   17a00:	e6cf      	b.n	177a2 <ull_conn_tx_ack+0x52>
				memcpy(&conn->llcp.encryption.skd[0],
   17a02:	2208      	movs	r2, #8
   17a04:	f104 0112 	add.w	r1, r4, #18
   17a08:	30c6      	adds	r0, #198	; 0xc6
   17a0a:	f008 fa34 	bl	1fe76 <memcpy>
				memcpy(&conn->lll.ccm_rx.iv[0],
   17a0e:	2204      	movs	r2, #4
   17a10:	f104 011a 	add.w	r1, r4, #26
   17a14:	f106 007c 	add.w	r0, r6, #124	; 0x7c
   17a18:	f008 fa2d 	bl	1fe76 <memcpy>
				conn->llcp_enc.pause_tx = 1U;
   17a1c:	f896 312a 	ldrb.w	r3, [r6, #298]	; 0x12a
				conn->procedure_expire = conn->procedure_reload;
   17a20:	f8b6 10ae 	ldrh.w	r1, [r6, #174]	; 0xae
				conn->llcp_enc.ack = conn->llcp_enc.req;
   17a24:	f896 2128 	ldrb.w	r2, [r6, #296]	; 0x128
				conn->procedure_expire = conn->procedure_reload;
   17a28:	f8a6 10b0 	strh.w	r1, [r6, #176]	; 0xb0
				conn->llcp_enc.pause_tx = 1U;
   17a2c:	f043 0302 	orr.w	r3, r3, #2
   17a30:	f886 312a 	strb.w	r3, [r6, #298]	; 0x12a
				conn->llcp_enc.ack = conn->llcp_enc.req;
   17a34:	f886 2129 	strb.w	r2, [r6, #297]	; 0x129
				break;
   17a38:	e6b3      	b.n	177a2 <ull_conn_tx_ack+0x52>
					uint8_t reason = (pdu_tx->llctrl.terminate_ind.error_code ==
   17a3a:	7a21      	ldrb	r1, [r4, #8]
   17a3c:	2913      	cmp	r1, #19
					conn_cleanup(conn, reason);
   17a3e:	bf08      	it	eq
   17a40:	2116      	moveq	r1, #22
   17a42:	f7ff fc8d 	bl	17360 <conn_cleanup>
				break;
   17a46:	e6ac      	b.n	177a2 <ull_conn_tx_ack+0x52>
		conn->tx_data_last = tx;
   17a48:	f8c6 4198 	str.w	r4, [r6, #408]	; 0x198
   17a4c:	e775      	b.n	1793a <ull_conn_tx_ack+0x1ea>
		if (!conn->tx_ctrl) {
   17a4e:	f8d6 218c 	ldr.w	r2, [r6, #396]	; 0x18c
   17a52:	2a00      	cmp	r2, #0
   17a54:	f47f af65 	bne.w	17922 <ull_conn_tx_ack+0x1d2>
			tx->next = conn->tx_head;
   17a58:	6023      	str	r3, [r4, #0]
				conn->tx_ctrl = tx;
   17a5a:	e9c6 4462 	strd	r4, r4, [r6, #392]	; 0x188
				conn->tx_ctrl_last = tx;
   17a5e:	f8c6 4190 	str.w	r4, [r6, #400]	; 0x190
   17a62:	e766      	b.n	17932 <ull_conn_tx_ack+0x1e2>
							conn->llcp_length.cache.tx_octets = 0;
   17a64:	2100      	movs	r1, #0
							conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   17a66:	f361 0202 	bfi	r2, r1, #0, #3
							conn->llcp_length.tx_octets =
   17a6a:	f8a6 3176 	strh.w	r3, [r6, #374]	; 0x176
							conn->llcp_length.tx_time =
   17a6e:	f8b6 317e 	ldrh.w	r3, [r6, #382]	; 0x17e
							conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   17a72:	f886 2172 	strb.w	r2, [r6, #370]	; 0x172
							conn->llcp_length.cache.tx_octets = 0;
   17a76:	f8a6 117c 	strh.w	r1, [r6, #380]	; 0x17c
							conn->llcp_length.tx_time =
   17a7a:	f8a6 317a 	strh.w	r3, [r6, #378]	; 0x17a
							break;
   17a7e:	e690      	b.n	177a2 <ull_conn_tx_ack+0x52>
								conn->llcp_length.state =
   17a80:	2304      	movs	r3, #4
   17a82:	f363 0202 	bfi	r2, r3, #0, #3
   17a86:	f886 2172 	strb.w	r2, [r6, #370]	; 0x172
								break;
   17a8a:	e68a      	b.n	177a2 <ull_conn_tx_ack+0x52>
			tx->next = conn->tx_head->next;
   17a8c:	681a      	ldr	r2, [r3, #0]
   17a8e:	6022      	str	r2, [r4, #0]
			conn->tx_head->next = tx;
   17a90:	601c      	str	r4, [r3, #0]
				conn->tx_ctrl = tx;
   17a92:	6823      	ldr	r3, [r4, #0]
				conn->tx_ctrl_last = tx;
   17a94:	e9c6 4463 	strd	r4, r4, [r6, #396]	; 0x18c
   17a98:	e74b      	b.n	17932 <ull_conn_tx_ack+0x1e2>
   17a9a:	bf00      	nop
   17a9c:	20006300 	.word	0x20006300
   17aa0:	00024438 	.word	0x00024438
   17aa4:	00024624 	.word	0x00024624
   17aa8:	00023ff4 	.word	0x00023ff4
   17aac:	00024618 	.word	0x00024618
   17ab0:	20007408 	.word	0x20007408
   17ab4:	0002463c 	.word	0x0002463c
   17ab8:	00024630 	.word	0x00024630

00017abc <ull_conn_llcp_req>:
	if (conn_hdr->llcp_req != conn_hdr->llcp_ack) {
   17abc:	f890 30c0 	ldrb.w	r3, [r0, #192]	; 0xc0
   17ac0:	f890 20bf 	ldrb.w	r2, [r0, #191]	; 0xbf
   17ac4:	4293      	cmp	r3, r2
	conn_hdr->llcp_req++;
   17ac6:	bf03      	ittte	eq
   17ac8:	3301      	addeq	r3, #1
   17aca:	f880 30bf 	strbeq.w	r3, [r0, #191]	; 0xbf
	return 0;
   17ace:	2000      	moveq	r0, #0
		return BT_HCI_ERR_CMD_DISALLOWED;
   17ad0:	200c      	movne	r0, #12
}
   17ad2:	4770      	bx	lr

00017ad4 <ull_conn_lll_max_tx_octets_get>:
	switch (lll->phy_tx_time) {
   17ad4:	f890 102c 	ldrb.w	r1, [r0, #44]	; 0x2c
   17ad8:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   17ada:	f3c1 1202 	ubfx	r2, r1, #4, #3
   17ade:	2a02      	cmp	r2, #2
   17ae0:	d00f      	beq.n	17b02 <ull_conn_lll_max_tx_octets_get+0x2e>
   17ae2:	2a04      	cmp	r2, #4
   17ae4:	d011      	beq.n	17b0a <ull_conn_lll_max_tx_octets_get+0x36>
			max_tx_octets = (lll->max_tx_time >> 3) - 10;
   17ae6:	08db      	lsrs	r3, r3, #3
   17ae8:	3b0a      	subs	r3, #10
   17aea:	b29b      	uxth	r3, r3
	if (lll->enc_tx) {
   17aec:	f890 2046 	ldrb.w	r2, [r0, #70]	; 0x46
	return max_tx_octets;
   17af0:	8c80      	ldrh	r0, [r0, #36]	; 0x24
	if (lll->enc_tx) {
   17af2:	06d2      	lsls	r2, r2, #27
		max_tx_octets -= 4U;
   17af4:	bf44      	itt	mi
   17af6:	3b04      	submi	r3, #4
   17af8:	b29b      	uxthmi	r3, r3
}
   17afa:	4298      	cmp	r0, r3
   17afc:	bf28      	it	cs
   17afe:	4618      	movcs	r0, r3
   17b00:	4770      	bx	lr
			max_tx_octets = (lll->max_tx_time >> 2) - 11;
   17b02:	089b      	lsrs	r3, r3, #2
   17b04:	3b0b      	subs	r3, #11
   17b06:	b29b      	uxth	r3, r3
			break;
   17b08:	e7f0      	b.n	17aec <ull_conn_lll_max_tx_octets_get+0x18>
			if (lll->phy_flags & 0x01) {
   17b0a:	0709      	lsls	r1, r1, #28
				max_tx_octets = ((lll->max_tx_time - 592) >>
   17b0c:	bf4b      	itete	mi
   17b0e:	f5a3 7314 	submi.w	r3, r3, #592	; 0x250
				max_tx_octets = ((lll->max_tx_time - 430) >>
   17b12:	f5a3 73d7 	subpl.w	r3, r3, #430	; 0x1ae
				max_tx_octets = ((lll->max_tx_time - 592) >>
   17b16:	119b      	asrmi	r3, r3, #6
				max_tx_octets = ((lll->max_tx_time - 430) >>
   17b18:	111b      	asrpl	r3, r3, #4
						4) - 2;
   17b1a:	3b02      	subs	r3, #2
				max_tx_octets = ((lll->max_tx_time - 430) >>
   17b1c:	b29b      	uxth	r3, r3
   17b1e:	e7e5      	b.n	17aec <ull_conn_lll_max_tx_octets_get+0x18>

00017b20 <set_winoffset>:
uint16_t set_winoffset(struct lll_conn *lll){ 
   17b20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if(scheduled_handle_cnt == 0&& need_update_dummy == false && need_conn_update == false){
   17b24:	4b5a      	ldr	r3, [pc, #360]	; (17c90 <set_winoffset+0x170>)
   17b26:	4e5b      	ldr	r6, [pc, #364]	; (17c94 <set_winoffset+0x174>)
   17b28:	681b      	ldr	r3, [r3, #0]
   17b2a:	7832      	ldrb	r2, [r6, #0]
uint16_t set_winoffset(struct lll_conn *lll){ 
   17b2c:	4605      	mov	r5, r0
	if(scheduled_handle_cnt == 0&& need_update_dummy == false && need_conn_update == false){
   17b2e:	b92b      	cbnz	r3, 17b3c <set_winoffset+0x1c>
   17b30:	2a00      	cmp	r2, #0
   17b32:	d07b      	beq.n	17c2c <set_winoffset+0x10c>
	return -1;
   17b34:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
   17b38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	else if(need_update_dummy == false){
   17b3c:	2a00      	cmp	r2, #0
   17b3e:	d1f9      	bne.n	17b34 <set_winoffset+0x14>
		int need_cell_cnt_now = (int)(max_conn_int/(lll->interval));
   17b40:	4f55      	ldr	r7, [pc, #340]	; (17c98 <set_winoffset+0x178>)
   17b42:	8a6a      	ldrh	r2, [r5, #18]
   17b44:	683b      	ldr	r3, [r7, #0]
   17b46:	fb93 f3f2 	sdiv	r3, r3, r2
		if(need_cell_cnt_now <1) need_cell_cnt_now = 1;
   17b4a:	2b01      	cmp	r3, #1
   17b4c:	461a      	mov	r2, r3
   17b4e:	bfb8      	it	lt
   17b50:	2201      	movlt	r2, #1
		for(int temp = 1; temp<need_cell_cnt_now;  temp *= 2)
   17b52:	2b01      	cmp	r3, #1
   17b54:	f340 8099 	ble.w	17c8a <set_winoffset+0x16a>
   17b58:	2301      	movs	r3, #1
		int i=0;
   17b5a:	2400      	movs	r4, #0
		for(int temp = 1; temp<need_cell_cnt_now;  temp *= 2)
   17b5c:	005b      	lsls	r3, r3, #1
   17b5e:	429a      	cmp	r2, r3
			i++;
   17b60:	f104 0401 	add.w	r4, r4, #1
		for(int temp = 1; temp<need_cell_cnt_now;  temp *= 2)
   17b64:	dcfa      	bgt.n	17b5c <set_winoffset+0x3c>
		if(temp_max_empty_cell_size[i] < gap || temp_max_empty_cell_size[i] > conn_int_table[first_handle]*1.25 ){
   17b66:	4a4d      	ldr	r2, [pc, #308]	; (17c9c <set_winoffset+0x17c>)
   17b68:	4b4d      	ldr	r3, [pc, #308]	; (17ca0 <set_winoffset+0x180>)
   17b6a:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
   17b6e:	681b      	ldr	r3, [r3, #0]
   17b70:	4298      	cmp	r0, r3
   17b72:	d3df      	bcc.n	17b34 <set_winoffset+0x14>
   17b74:	f7e8 fc06 	bl	384 <__aeabi_ui2d>
   17b78:	4a4a      	ldr	r2, [pc, #296]	; (17ca4 <set_winoffset+0x184>)
   17b7a:	4b4b      	ldr	r3, [pc, #300]	; (17ca8 <set_winoffset+0x188>)
   17b7c:	6812      	ldr	r2, [r2, #0]
   17b7e:	4680      	mov	r8, r0
   17b80:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   17b84:	4689      	mov	r9, r1
   17b86:	f7e8 fbfd 	bl	384 <__aeabi_ui2d>
   17b8a:	4b48      	ldr	r3, [pc, #288]	; (17cac <set_winoffset+0x18c>)
   17b8c:	2200      	movs	r2, #0
   17b8e:	f7e8 fc73 	bl	478 <__aeabi_dmul>
   17b92:	4602      	mov	r2, r0
   17b94:	460b      	mov	r3, r1
   17b96:	4640      	mov	r0, r8
   17b98:	4649      	mov	r1, r9
   17b9a:	f7e8 fefd 	bl	998 <__aeabi_dcmpgt>
   17b9e:	2800      	cmp	r0, #0
   17ba0:	d1c8      	bne.n	17b34 <set_winoffset+0x14>
		need_conn_update = true;
   17ba2:	4943      	ldr	r1, [pc, #268]	; (17cb0 <set_winoffset+0x190>)
		update_is_possible = false;
   17ba4:	4a43      	ldr	r2, [pc, #268]	; (17cb4 <set_winoffset+0x194>)
		now = (uint32_t)k_cyc_to_ns_floor64(k_cycle_get_32())/NSEC_PER_USEC/USEC_PER_MSEC;
   17ba6:	f8df 8124 	ldr.w	r8, [pc, #292]	; 17ccc <set_winoffset+0x1ac>
		update_is_possible = false;
   17baa:	7010      	strb	r0, [r2, #0]
		need_conn_update = true;
   17bac:	2301      	movs	r3, #1
   17bae:	700b      	strb	r3, [r1, #0]
		need_update_dummy = true;
   17bb0:	7033      	strb	r3, [r6, #0]
   17bb2:	f7ef f9f5 	bl	6fa0 <z_timer_cycle_get_32>
		uint32_t origin = array1[max_empty_cell[i]];
   17bb6:	4a40      	ldr	r2, [pc, #256]	; (17cb8 <set_winoffset+0x198>)
   17bb8:	4b40      	ldr	r3, [pc, #256]	; (17cbc <set_winoffset+0x19c>)
   17bba:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
   17bbe:	4a40      	ldr	r2, [pc, #256]	; (17cc0 <set_winoffset+0x1a0>)
		if(array1[max_empty_cell[i]]-array1[max_empty_cell[i]-1]<3) temp_time += (3-array1[max_empty_cell[i]]+array1[max_empty_cell[i]-1]);
   17bc0:	1e66      	subs	r6, r4, #1
   17bc2:	fba0 9a03 	umull	r9, sl, r0, r3
   17bc6:	ea4f 33d9 	mov.w	r3, r9, lsr #15
   17bca:	f852 0026 	ldr.w	r0, [r2, r6, lsl #2]
		uint32_t origin = array1[max_empty_cell[i]];
   17bce:	f852 6024 	ldr.w	r6, [r2, r4, lsl #2]
   17bd2:	ea43 434a 	orr.w	r3, r3, sl, lsl #17
		now = (uint32_t)k_cyc_to_ns_floor64(k_cycle_get_32())/NSEC_PER_USEC/USEC_PER_MSEC;
   17bd6:	fba8 2303 	umull	r2, r3, r8, r3
		if(array1[max_empty_cell[i]]-array1[max_empty_cell[i]-1]<3) temp_time += (3-array1[max_empty_cell[i]]+array1[max_empty_cell[i]-1]);
   17bda:	1a32      	subs	r2, r6, r0
   17bdc:	2a02      	cmp	r2, #2
   17bde:	bf98      	it	ls
   17be0:	1cc6      	addls	r6, r0, #3
		int interval = lll->interval*1.25;
   17be2:	8a68      	ldrh	r0, [r5, #18]
		now = (uint32_t)k_cyc_to_ns_floor64(k_cycle_get_32())/NSEC_PER_USEC/USEC_PER_MSEC;
   17be4:	ea4f 4893 	mov.w	r8, r3, lsr #18
		int interval = lll->interval*1.25;
   17be8:	f7e8 fbdc 	bl	3a4 <__aeabi_i2d>
   17bec:	4b2f      	ldr	r3, [pc, #188]	; (17cac <set_winoffset+0x18c>)
   17bee:	2200      	movs	r2, #0
   17bf0:	f7e8 fc42 	bl	478 <__aeabi_dmul>
   17bf4:	f7e8 feda 	bl	9ac <__aeabi_d2iz>
		if(temp_time < now) temp_time = temp_time+max_conn_int*1.25*M - now;
   17bf8:	4546      	cmp	r6, r8
		int interval = lll->interval*1.25;
   17bfa:	4604      	mov	r4, r0
		if(temp_time < now) temp_time = temp_time+max_conn_int*1.25*M - now;
   17bfc:	d321      	bcc.n	17c42 <set_winoffset+0x122>
			temp_time = (-now+interval*M +temp_time-295);
   17bfe:	2364      	movs	r3, #100	; 0x64
   17c00:	fb03 f300 	mul.w	r3, r3, r0
   17c04:	f46f 7293 	mvn.w	r2, #294	; 0x126
   17c08:	4413      	add	r3, r2
   17c0a:	eba3 0308 	sub.w	r3, r3, r8
   17c0e:	1998      	adds	r0, r3, r6
		temp_time = (temp_time)%interval;
   17c10:	fbb0 f3f4 	udiv	r3, r0, r4
   17c14:	fb04 0013 	mls	r0, r4, r3, r0
		temp_time = (temp_time*4+4)/5;
   17c18:	3001      	adds	r0, #1
   17c1a:	4b2a      	ldr	r3, [pc, #168]	; (17cc4 <set_winoffset+0x1a4>)
   17c1c:	0080      	lsls	r0, r0, #2
   17c1e:	fba3 3000 	umull	r3, r0, r3, r0
   17c22:	0880      	lsrs	r0, r0, #2
		temp_time -= 1;
   17c24:	3801      	subs	r0, #1
		return temp_time;
   17c26:	b280      	uxth	r0, r0
}
   17c28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if(scheduled_handle_cnt == 0&& need_update_dummy == false && need_conn_update == false){
   17c2c:	4a20      	ldr	r2, [pc, #128]	; (17cb0 <set_winoffset+0x190>)
   17c2e:	7813      	ldrb	r3, [r2, #0]
   17c30:	2b00      	cmp	r3, #0
   17c32:	d185      	bne.n	17b40 <set_winoffset+0x20>
		update_is_possible = false;
   17c34:	481f      	ldr	r0, [pc, #124]	; (17cb4 <set_winoffset+0x194>)
		need_update_dummy = true;
   17c36:	2101      	movs	r1, #1
		update_is_possible = false;
   17c38:	7003      	strb	r3, [r0, #0]
		need_update_dummy = true;
   17c3a:	7031      	strb	r1, [r6, #0]
		return 0;
   17c3c:	4618      	mov	r0, r3
		need_conn_update = true;
   17c3e:	7011      	strb	r1, [r2, #0]
		return 0;
   17c40:	e77a      	b.n	17b38 <set_winoffset+0x18>
		if(temp_time < now) temp_time = temp_time+max_conn_int*1.25*M - now;
   17c42:	6838      	ldr	r0, [r7, #0]
   17c44:	f7e8 fbae 	bl	3a4 <__aeabi_i2d>
   17c48:	4b18      	ldr	r3, [pc, #96]	; (17cac <set_winoffset+0x18c>)
   17c4a:	2200      	movs	r2, #0
   17c4c:	f7e8 fc14 	bl	478 <__aeabi_dmul>
   17c50:	4b1d      	ldr	r3, [pc, #116]	; (17cc8 <set_winoffset+0x1a8>)
   17c52:	2200      	movs	r2, #0
   17c54:	f7e8 fc10 	bl	478 <__aeabi_dmul>
   17c58:	4682      	mov	sl, r0
   17c5a:	4630      	mov	r0, r6
   17c5c:	468b      	mov	fp, r1
   17c5e:	f7e8 fb91 	bl	384 <__aeabi_ui2d>
   17c62:	4602      	mov	r2, r0
   17c64:	460b      	mov	r3, r1
   17c66:	4650      	mov	r0, sl
   17c68:	4659      	mov	r1, fp
   17c6a:	f7e8 fa4f 	bl	10c <__adddf3>
   17c6e:	4606      	mov	r6, r0
   17c70:	4640      	mov	r0, r8
   17c72:	460f      	mov	r7, r1
   17c74:	f7e8 fb86 	bl	384 <__aeabi_ui2d>
   17c78:	4602      	mov	r2, r0
   17c7a:	460b      	mov	r3, r1
   17c7c:	4630      	mov	r0, r6
   17c7e:	4639      	mov	r1, r7
   17c80:	f7e8 fa42 	bl	108 <__aeabi_dsub>
   17c84:	f7e8 feba 	bl	9fc <__aeabi_d2uiz>
   17c88:	e7c2      	b.n	17c10 <set_winoffset+0xf0>
		int i=0;
   17c8a:	2400      	movs	r4, #0
   17c8c:	e76b      	b.n	17b66 <set_winoffset+0x46>
   17c8e:	bf00      	nop
   17c90:	200076f4 	.word	0x200076f4
   17c94:	20009c3f 	.word	0x20009c3f
   17c98:	200069b4 	.word	0x200069b4
   17c9c:	20008710 	.word	0x20008710
   17ca0:	20000498 	.word	0x20000498
   17ca4:	20006994 	.word	0x20006994
   17ca8:	20005300 	.word	0x20005300
   17cac:	3ff40000 	.word	0x3ff40000
   17cb0:	20009c3e 	.word	0x20009c3e
   17cb4:	20009c40 	.word	0x20009c40
   17cb8:	200069b8 	.word	0x200069b8
   17cbc:	3b9aca00 	.word	0x3b9aca00
   17cc0:	200042dc 	.word	0x200042dc
   17cc4:	cccccccd 	.word	0xcccccccd
   17cc8:	40590000 	.word	0x40590000
   17ccc:	431bde83 	.word	0x431bde83

00017cd0 <ticker_op_stop_scan_cb>:
}

static void ticker_op_stop_scan_cb(uint32_t status, void *params)
{
	/* TODO: */
}
   17cd0:	4770      	bx	lr
   17cd2:	bf00      	nop

00017cd4 <ticker_op_cb>:

static void ticker_op_cb(uint32_t status, void *params)
{
	ARG_UNUSED(params);

	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   17cd4:	b900      	cbnz	r0, 17cd8 <ticker_op_cb+0x4>
   17cd6:	4770      	bx	lr
{
   17cd8:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   17cda:	4a07      	ldr	r2, [pc, #28]	; (17cf8 <ticker_op_cb+0x24>)
   17cdc:	4907      	ldr	r1, [pc, #28]	; (17cfc <ticker_op_cb+0x28>)
   17cde:	4808      	ldr	r0, [pc, #32]	; (17d00 <ticker_op_cb+0x2c>)
   17ce0:	f44f 7346 	mov.w	r3, #792	; 0x318
   17ce4:	f006 f935 	bl	1df52 <printk>
   17ce8:	4040      	eors	r0, r0
   17cea:	f380 8811 	msr	BASEPRI, r0
   17cee:	f04f 0003 	mov.w	r0, #3
   17cf2:	df02      	svc	2
}
   17cf4:	bd08      	pop	{r3, pc}
   17cf6:	bf00      	nop
   17cf8:	0002465c 	.word	0x0002465c
   17cfc:	00024498 	.word	0x00024498
   17d00:	00023ff4 	.word	0x00023ff4

00017d04 <ull_master_ticker_cb>:
{
   17d04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17d08:	4605      	mov	r5, r0
   17d0a:	4688      	mov	r8, r1
		ret = ull_conn_llcp(conn, ticks_at_expire, lazy);
   17d0c:	4618      	mov	r0, r3
   17d0e:	4629      	mov	r1, r5
{
   17d10:	461c      	mov	r4, r3
   17d12:	4617      	mov	r7, r2
		ret = ull_conn_llcp(conn, ticks_at_expire, lazy);
   17d14:	f7e9 fba0 	bl	1458 <ull_conn_llcp>
		if (ret) {
   17d18:	2800      	cmp	r0, #0
   17d1a:	d141      	bne.n	17da0 <ull_master_ticker_cb+0x9c>
   17d1c:	7c23      	ldrb	r3, [r4, #16]
   17d1e:	3301      	adds	r3, #1
   17d20:	b2db      	uxtb	r3, r3
   17d22:	7423      	strb	r3, [r4, #16]
	LL_ASSERT(ref);
   17d24:	b373      	cbz	r3, 17d84 <ull_master_ticker_cb+0x80>
	ull_conn_tx_demux(1);
   17d26:	2001      	movs	r0, #1
   17d28:	f7ff fac4 	bl	172b4 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, 1);
   17d2c:	2101      	movs	r1, #1
   17d2e:	4620      	mov	r0, r4
   17d30:	f7ff fb94 	bl	1745c <ull_conn_tx_lll_enqueue>
	p.ticks_at_expire = ticks_at_expire;
   17d34:	4e1b      	ldr	r6, [pc, #108]	; (17da4 <ull_master_ticker_cb+0xa0>)
	mfy.param = &p;
   17d36:	4b1c      	ldr	r3, [pc, #112]	; (17da8 <ull_master_ticker_cb+0xa4>)
	p.ticks_at_expire = ticks_at_expire;
   17d38:	6035      	str	r5, [r6, #0]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   17d3a:	2200      	movs	r2, #0
	p.param = &conn->lll;
   17d3c:	f104 0c1c 	add.w	ip, r4, #28
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   17d40:	4611      	mov	r1, r2
   17d42:	2001      	movs	r0, #1
	mfy.param = &p;
   17d44:	609e      	str	r6, [r3, #8]
	p.remainder = remainder;
   17d46:	f8c6 8004 	str.w	r8, [r6, #4]
	p.lazy = lazy;
   17d4a:	8137      	strh	r7, [r6, #8]
	p.param = &conn->lll;
   17d4c:	f8c6 c00c 	str.w	ip, [r6, #12]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   17d50:	f7f8 fa3c 	bl	101cc <mayfly_enqueue>
	LL_ASSERT(!err);
   17d54:	b940      	cbnz	r0, 17d68 <ull_master_ticker_cb+0x64>
	ull_conn_tx_demux(UINT8_MAX);
   17d56:	20ff      	movs	r0, #255	; 0xff
   17d58:	f7ff faac 	bl	172b4 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   17d5c:	4620      	mov	r0, r4
   17d5e:	21ff      	movs	r1, #255	; 0xff
}
   17d60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   17d64:	f7ff bb7a 	b.w	1745c <ull_conn_tx_lll_enqueue>
	LL_ASSERT(!err);
   17d68:	4a10      	ldr	r2, [pc, #64]	; (17dac <ull_master_ticker_cb+0xa8>)
   17d6a:	4911      	ldr	r1, [pc, #68]	; (17db0 <ull_master_ticker_cb+0xac>)
   17d6c:	4811      	ldr	r0, [pc, #68]	; (17db4 <ull_master_ticker_cb+0xb0>)
   17d6e:	f44f 7341 	mov.w	r3, #772	; 0x304
   17d72:	f006 f8ee 	bl	1df52 <printk>
   17d76:	4040      	eors	r0, r0
   17d78:	f380 8811 	msr	BASEPRI, r0
   17d7c:	f04f 0003 	mov.w	r0, #3
   17d80:	df02      	svc	2
   17d82:	e7e8      	b.n	17d56 <ull_master_ticker_cb+0x52>
	LL_ASSERT(ref);
   17d84:	4a09      	ldr	r2, [pc, #36]	; (17dac <ull_master_ticker_cb+0xa8>)
   17d86:	490c      	ldr	r1, [pc, #48]	; (17db8 <ull_master_ticker_cb+0xb4>)
   17d88:	480a      	ldr	r0, [pc, #40]	; (17db4 <ull_master_ticker_cb+0xb0>)
   17d8a:	f240 23f2 	movw	r3, #754	; 0x2f2
   17d8e:	f006 f8e0 	bl	1df52 <printk>
   17d92:	4040      	eors	r0, r0
   17d94:	f380 8811 	msr	BASEPRI, r0
   17d98:	f04f 0003 	mov.w	r0, #3
   17d9c:	df02      	svc	2
   17d9e:	e7c2      	b.n	17d26 <ull_master_ticker_cb+0x22>
}
   17da0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17da4:	20008740 	.word	0x20008740
   17da8:	200005f0 	.word	0x200005f0
   17dac:	0002465c 	.word	0x0002465c
   17db0:	000242a4 	.word	0x000242a4
   17db4:	00023ff4 	.word	0x00023ff4
   17db8:	00024410 	.word	0x00024410

00017dbc <ll_create_connection>:
{
   17dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17dc0:	b089      	sub	sp, #36	; 0x24
   17dc2:	4680      	mov	r8, r0
   17dc4:	9303      	str	r3, [sp, #12]
   17dc6:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
   17dca:	9302      	str	r3, [sp, #8]
	scan = ull_scan_is_disabled_get(SCAN_HANDLE_1M);
   17dcc:	2000      	movs	r0, #0
{
   17dce:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
   17dd2:	f89d a04c 	ldrb.w	sl, [sp, #76]	; 0x4c
   17dd6:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
   17dda:	9304      	str	r3, [sp, #16]
   17ddc:	4689      	mov	r9, r1
   17dde:	4616      	mov	r6, r2
	scan = ull_scan_is_disabled_get(SCAN_HANDLE_1M);
   17de0:	f7fc fe74 	bl	14acc <ull_scan_is_disabled_get>
	if (!scan) {
   17de4:	2800      	cmp	r0, #0
   17de6:	f000 819f 	beq.w	18128 <ll_create_connection+0x36c>
	if (lll->conn) {
   17dea:	f8d0 b024 	ldr.w	fp, [r0, #36]	; 0x24
   17dee:	4605      	mov	r5, r0
   17df0:	f1bb 0f00 	cmp.w	fp, #0
   17df4:	d02e      	beq.n	17e54 <ll_create_connection+0x98>
	ull_filter_scan_update(filter_policy);
   17df6:	4630      	mov	r0, r6
   17df8:	f000 fd12 	bl	18820 <ull_filter_scan_update>
	lll->rpa_gen = 0;
   17dfc:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
	lll->rl_idx = FILTER_IDX_NONE;
   17e00:	22ff      	movs	r2, #255	; 0xff
	lll->rpa_gen = 0;
   17e02:	f36f 0300 	bfc	r3, #0, #1
   17e06:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
	lll->rl_idx = FILTER_IDX_NONE;
   17e0a:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
	if (!filter_policy && ull_filter_lll_rl_enabled()) {
   17e0e:	b1ae      	cbz	r6, 17e3c <ll_create_connection+0x80>
	if (own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   17e10:	f1aa 0302 	sub.w	r3, sl, #2
   17e14:	2b01      	cmp	r3, #1
   17e16:	f240 8151 	bls.w	180bc <ll_create_connection+0x300>
	scan->own_addr_type = own_addr_type;
   17e1a:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
   17e1e:	f36a 0342 	bfi	r3, sl, #1, #2
   17e22:	f885 3048 	strb.w	r3, [r5, #72]	; 0x48
	err = lll_clock_wait();
   17e26:	f001 fe31 	bl	19a8c <lll_clock_wait>
	if (err) {
   17e2a:	2800      	cmp	r0, #0
   17e2c:	f040 8152 	bne.w	180d4 <ll_create_connection+0x318>
	return ull_scan_enable(scan);
   17e30:	4628      	mov	r0, r5
   17e32:	f7e9 fa71 	bl	1318 <ull_scan_enable>
}
   17e36:	b009      	add	sp, #36	; 0x24
   17e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!filter_policy && ull_filter_lll_rl_enabled()) {
   17e3c:	f001 fa48 	bl	192d0 <ull_filter_lll_rl_enabled>
   17e40:	2800      	cmp	r0, #0
   17e42:	d0e5      	beq.n	17e10 <ll_create_connection+0x54>
		lll->rl_idx = ull_filter_rl_find(peer_addr_type, peer_addr,
   17e44:	9803      	ldr	r0, [sp, #12]
   17e46:	9912      	ldr	r1, [sp, #72]	; 0x48
   17e48:	4632      	mov	r2, r6
   17e4a:	f000 fded 	bl	18a28 <ull_filter_rl_find>
   17e4e:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
   17e52:	e7dd      	b.n	17e10 <ll_create_connection+0x54>
	link = ll_rx_link_alloc();
   17e54:	f7fc faec 	bl	14430 <ll_rx_link_alloc>
	if (!link) {
   17e58:	9005      	str	r0, [sp, #20]
   17e5a:	2800      	cmp	r0, #0
   17e5c:	f000 8179 	beq.w	18152 <ll_create_connection+0x396>
	conn = ll_conn_acquire();
   17e60:	f7fd fa28 	bl	152b4 <ll_conn_acquire>
	if (!conn) {
   17e64:	4604      	mov	r4, r0
   17e66:	2800      	cmp	r0, #0
   17e68:	f000 8175 	beq.w	18156 <ll_create_connection+0x39a>
	ull_scan_params_set(lll, 0, scan_interval, scan_window, filter_policy);
   17e6c:	4642      	mov	r2, r8
   17e6e:	464b      	mov	r3, r9
   17e70:	4659      	mov	r1, fp
   17e72:	f105 001c 	add.w	r0, r5, #28
   17e76:	9600      	str	r6, [sp, #0]
   17e78:	f7e9 fa26 	bl	12c8 <ull_scan_params_set>
	lll->adv_addr_type = peer_addr_type;
   17e7c:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
   17e80:	9a03      	ldr	r2, [sp, #12]
	memcpy(lll->adv_addr, peer_addr, BDADDR_SIZE);
   17e82:	9912      	ldr	r1, [sp, #72]	; 0x48
	lll->adv_addr_type = peer_addr_type;
   17e84:	f362 1345 	bfi	r3, r2, #5, #1
   17e88:	f885 3032 	strb.w	r3, [r5, #50]	; 0x32
	memcpy(lll->adv_addr, peer_addr, BDADDR_SIZE);
   17e8c:	2206      	movs	r2, #6
   17e8e:	f105 003b 	add.w	r0, r5, #59	; 0x3b
   17e92:	f007 fff0 	bl	1fe76 <memcpy>
	lll->conn_timeout = timeout;
   17e96:	862f      	strh	r7, [r5, #48]	; 0x30
	lll->conn_ticks_slot = 0; /* TODO: */
   17e98:	f8c5 b028 	str.w	fp, [r5, #40]	; 0x28
	err = util_aa_le32(conn_lll->access_addr);
   17e9c:	f104 0024 	add.w	r0, r4, #36	; 0x24
   17ea0:	f7f8 faa2 	bl	103e8 <util_aa_le32>
	conn_lll = &conn->lll;
   17ea4:	f104 081c 	add.w	r8, r4, #28
	LL_ASSERT(!err);
   17ea8:	2800      	cmp	r0, #0
   17eaa:	f040 8141 	bne.w	18130 <ll_create_connection+0x374>
	lll_csrand_get(conn_lll->crc_init, sizeof(conn_lll->crc_init));
   17eae:	2103      	movs	r1, #3
   17eb0:	f104 0028 	add.w	r0, r4, #40	; 0x28
   17eb4:	f001 fc26 	bl	19704 <lll_csrand_get>
	conn_lll->interval = interval;
   17eb8:	9b02      	ldr	r3, [sp, #8]
	if (!conn_lll->link_tx_free) {
   17eba:	6de0      	ldr	r0, [r4, #92]	; 0x5c
	conn_lll->latency = latency;
   17ebc:	9a04      	ldr	r2, [sp, #16]
	conn_lll->interval = interval;
   17ebe:	85e3      	strh	r3, [r4, #46]	; 0x2e
	conn_lll->handle = 0xFFFF;
   17ec0:	f64f 73ff 	movw	r3, #65535	; 0xffff
	conn_lll->latency = latency;
   17ec4:	8622      	strh	r2, [r4, #48]	; 0x30
	conn_lll->handle = 0xFFFF;
   17ec6:	85a3      	strh	r3, [r4, #44]	; 0x2c
	if (!conn_lll->link_tx_free) {
   17ec8:	2800      	cmp	r0, #0
   17eca:	f000 813e 	beq.w	1814a <ll_create_connection+0x38e>
	memq_init(conn_lll->link_tx_free, &conn_lll->memq_tx.head,
   17ece:	f104 0250 	add.w	r2, r4, #80	; 0x50
   17ed2:	f104 014c 	add.w	r1, r4, #76	; 0x4c
   17ed6:	f7f8 f8f7 	bl	100c8 <memq_init>
	conn_lll->phy_tx = BIT(0);
   17eda:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
   17ede:	49ae      	ldr	r1, [pc, #696]	; (18198 <ll_create_connection+0x3dc>)
	conn_lll->sn = 0;
   17ee0:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
	conn_lll->max_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   17ee4:	48ad      	ldr	r0, [pc, #692]	; (1819c <ll_create_connection+0x3e0>)
   17ee6:	6460      	str	r0, [r4, #68]	; 0x44
	conn_lll->phy_tx = BIT(0);
   17ee8:	400b      	ands	r3, r1
   17eea:	f443 7388 	orr.w	r3, r3, #272	; 0x110
   17eee:	f043 0301 	orr.w	r3, r3, #1
	conn_lll->link_tx_free = NULL;
   17ef2:	f04f 0900 	mov.w	r9, #0
	conn_lll->sn = 0;
   17ef6:	f022 0207 	bic.w	r2, r2, #7
	conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   17efa:	f04f 111b 	mov.w	r1, #1769499	; 0x1b001b
	conn_lll->phy_tx = BIT(0);
   17efe:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	conn_lll->rssi_latest = 0x7F;
   17f02:	237f      	movs	r3, #127	; 0x7f
	conn_lll->sn = 0;
   17f04:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
	conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   17f08:	6421      	str	r1, [r4, #64]	; 0x40
	conn_lll->rssi_latest = 0x7F;
   17f0a:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
	conn_lll->link_tx_free = NULL;
   17f0e:	f8c4 905c 	str.w	r9, [r4, #92]	; 0x5c
	conn_lll->packet_tx_head_len = 0;
   17f12:	f8a4 9060 	strh.w	r9, [r4, #96]	; 0x60
	conn_lll->latency_prepare = 0;
   17f16:	f8a4 9032 	strh.w	r9, [r4, #50]	; 0x32
	conn_lll->latency_event = 0;
   17f1a:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
	conn_lll->data_chan_count = ull_chan_map_get(conn_lll->data_chan_map);
   17f1e:	f104 0038 	add.w	r0, r4, #56	; 0x38
   17f22:	f000 fa3b 	bl	1839c <ull_chan_map_get>
   17f26:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
   17f2a:	f360 0305 	bfi	r3, r0, #0, #6
   17f2e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	lll_csrand_get(&hop, sizeof(uint8_t));
   17f32:	2101      	movs	r1, #1
   17f34:	f10d 001f 	add.w	r0, sp, #31
   17f38:	f001 fbe4 	bl	19704 <lll_csrand_get>
	conn_lll->data_chan_hop = 5 + (hop % 12);
   17f3c:	f89d e01f 	ldrb.w	lr, [sp, #31]
   17f40:	4b97      	ldr	r3, [pc, #604]	; (181a0 <ll_create_connection+0x3e4>)
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
   17f42:	8e20      	ldrh	r0, [r4, #48]	; 0x30
	conn_lll->data_chan_sel = 0;
   17f44:	f894 c03d 	ldrb.w	ip, [r4, #61]	; 0x3d
	conn_lll->data_chan_use = 0;
   17f48:	f884 903f 	strb.w	r9, [r4, #63]	; 0x3f
	conn_lll->data_chan_hop = 5 + (hop % 12);
   17f4c:	fba3 230e 	umull	r2, r3, r3, lr
   17f50:	08db      	lsrs	r3, r3, #3
   17f52:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   17f56:	ebae 0e83 	sub.w	lr, lr, r3, lsl #2
	conn_interval_us = (uint32_t)interval * 1250U;
   17f5a:	9b02      	ldr	r3, [sp, #8]
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
   17f5c:	4a91      	ldr	r2, [pc, #580]	; (181a4 <ll_create_connection+0x3e8>)
	conn->supervision_expire = 0U;
   17f5e:	f8a4 90ac 	strh.w	r9, [r4, #172]	; 0xac
	conn_interval_us = (uint32_t)interval * 1250U;
   17f62:	f240 41e2 	movw	r1, #1250	; 0x4e2
   17f66:	fb01 f103 	mul.w	r1, r1, r3
	conn_lll->data_chan_hop = 5 + (hop % 12);
   17f6a:	f10e 0e05 	add.w	lr, lr, #5
	conn->supervision_reload = RADIO_CONN_EVENTS(timeout * 10000U,
   17f6e:	1e4b      	subs	r3, r1, #1
	conn_lll->data_chan_hop = 5 + (hop % 12);
   17f70:	f884 e03e 	strb.w	lr, [r4, #62]	; 0x3e
	conn->supervision_reload = RADIO_CONN_EVENTS(timeout * 10000U,
   17f74:	f242 7e10 	movw	lr, #10000	; 0x2710
   17f78:	fb0e 3307 	mla	r3, lr, r7, r3
	conn->procedure_reload = RADIO_CONN_EVENTS(40000000,
   17f7c:	f8df e244 	ldr.w	lr, [pc, #580]	; 181c4 <ll_create_connection+0x408>
	conn->supervision_reload = RADIO_CONN_EVENTS(timeout * 10000U,
   17f80:	fbb3 f3f1 	udiv	r3, r3, r1
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
   17f84:	440a      	add	r2, r1
	conn->procedure_reload = RADIO_CONN_EVENTS(40000000,
   17f86:	448e      	add	lr, r1
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
   17f88:	fbb2 f2f1 	udiv	r2, r2, r1
	conn->supervision_reload = RADIO_CONN_EVENTS(timeout * 10000U,
   17f8c:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
	conn->procedure_reload = RADIO_CONN_EVENTS(40000000,
   17f90:	fbbe f1f1 	udiv	r1, lr, r1
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
   17f94:	b293      	uxth	r3, r2
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
   17f96:	f100 0e06 	add.w	lr, r0, #6
	conn_lll->data_chan_sel = 0;
   17f9a:	f00c 0c3f 	and.w	ip, ip, #63	; 0x3f
	conn->procedure_reload = RADIO_CONN_EVENTS(40000000,
   17f9e:	f8a4 10ae 	strh.w	r1, [r4, #174]	; 0xae
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
   17fa2:	4573      	cmp	r3, lr
	conn->connect_expire = 6U;
   17fa4:	f04f 0106 	mov.w	r1, #6
	conn->procedure_expire = 0U;
   17fa8:	f8a4 90b0 	strh.w	r9, [r4, #176]	; 0xb0
	conn->apto_expire = 0U;
   17fac:	f8a4 90b8 	strh.w	r9, [r4, #184]	; 0xb8
	conn->appto_expire = 0U;
   17fb0:	f8a4 90b4 	strh.w	r9, [r4, #180]	; 0xb4
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
   17fb4:	f8a4 30b6 	strh.w	r3, [r4, #182]	; 0xb6
	conn_lll->data_chan_sel = 0;
   17fb8:	f884 c03d 	strb.w	ip, [r4, #61]	; 0x3d
	conn->connect_expire = 6U;
   17fbc:	f8a4 10a8 	strh.w	r1, [r4, #168]	; 0xa8
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
   17fc0:	dd02      	ble.n	17fc8 <ll_create_connection+0x20c>
			     (conn->apto_reload - (conn_lll->latency + 6)) :
   17fc2:	1a18      	subs	r0, r3, r0
   17fc4:	3806      	subs	r0, #6
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
   17fc6:	b283      	uxth	r3, r0
	conn->llcp_terminate.node_rx.hdr.link = link;
   17fc8:	9805      	ldr	r0, [sp, #20]
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
   17fca:	f8a4 30b2 	strh.w	r3, [r4, #178]	; 0xb2
	conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
   17fce:	f894 312a 	ldrb.w	r3, [r4, #298]	; 0x12a
	conn->common.fex_valid = 0U;
   17fd2:	f8b4 e0be 	ldrh.w	lr, [r4, #190]	; 0xbe
	conn->llcp_version.tx = conn->llcp_version.rx = 0U;
   17fd6:	f894 10fe 	ldrb.w	r1, [r4, #254]	; 0xfe
	conn_lll->enc_rx = conn_lll->enc_tx = 0U;
   17fda:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
	conn->llcp_conn_param.disabled = 0U;
   17fde:	f894 c14a 	ldrb.w	ip, [r4, #330]	; 0x14a
	conn->llcp_terminate.node_rx.hdr.link = link;
   17fe2:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
	conn->llcp_length.disabled = 0U;
   17fe6:	f894 0172 	ldrb.w	r0, [r4, #370]	; 0x172
	conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0U;
   17fea:	f04f 0900 	mov.w	r9, #0
	conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
   17fee:	f023 0307 	bic.w	r3, r3, #7
	conn->common.fex_valid = 0U;
   17ff2:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
	conn->llcp_version.tx = conn->llcp_version.rx = 0U;
   17ff6:	f021 0103 	bic.w	r1, r1, #3
	conn->llcp_conn_param.disabled = 0U;
   17ffa:	f369 1c04 	bfi	ip, r9, #4, #1
	conn_lll->enc_rx = conn_lll->enc_tx = 0U;
   17ffe:	f022 0218 	bic.w	r2, r2, #24
	conn->llcp_length.disabled = 0U;
   18002:	f369 00c3 	bfi	r0, r9, #3, #1
	conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
   18006:	f884 312a 	strb.w	r3, [r4, #298]	; 0x12a
	conn->llcp_feature.features_conn = LL_FEAT;
   1800a:	4b67      	ldr	r3, [pc, #412]	; (181a8 <ll_create_connection+0x3ec>)
	conn->common.fex_valid = 0U;
   1800c:	f8a4 e0be 	strh.w	lr, [r4, #190]	; 0xbe
	conn->llcp_version.tx = conn->llcp_version.rx = 0U;
   18010:	f884 10fe 	strb.w	r1, [r4, #254]	; 0xfe
	conn->llcp_conn_param.disabled = 0U;
   18014:	f884 c14a 	strb.w	ip, [r4, #330]	; 0x14a
	conn_lll->enc_rx = conn_lll->enc_tx = 0U;
   18018:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
	conn->llcp_feature.features_conn = LL_FEAT;
   1801c:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
	conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0U;
   18020:	f8a4 90c0 	strh.w	r9, [r4, #192]	; 0xc0
	conn->llcp_rx = NULL;
   18024:	f8c4 90d8 	str.w	r9, [r4, #216]	; 0xd8
	conn->llcp_cu.req = conn->llcp_cu.ack = 0;
   18028:	f8a4 90dc 	strh.w	r9, [r4, #220]	; 0xdc
	conn->llcp_feature.req = conn->llcp_feature.ack = 0;
   1802c:	f8a4 90f0 	strh.w	r9, [r4, #240]	; 0xf0
	conn->llcp_feature.features_peer = 0;
   18030:	f8c4 90f8 	str.w	r9, [r4, #248]	; 0xf8
	conn->llcp_version.req = conn->llcp_version.ack = 0;
   18034:	f8a4 90fc 	strh.w	r9, [r4, #252]	; 0xfc
	conn->llcp_terminate.reason_peer = 0U;
   18038:	f884 9107 	strb.w	r9, [r4, #263]	; 0x107
	conn->llcp_enc.req = conn->llcp_enc.ack = 0U;
   1803c:	f8a4 9128 	strh.w	r9, [r4, #296]	; 0x128
	conn->llcp_conn_param.req = 0U;
   18040:	f8a4 9148 	strh.w	r9, [r4, #328]	; 0x148
	conn->llcp_length.req = conn->llcp_length.ack = 0U;
   18044:	f8a4 9170 	strh.w	r9, [r4, #368]	; 0x170
	conn->llcp_length.cache.tx_octets = 0U;
   18048:	f8a4 917c 	strh.w	r9, [r4, #380]	; 0x17c
	conn->llcp_length.disabled = 0U;
   1804c:	f884 0172 	strb.w	r0, [r4, #370]	; 0x172
	conn->default_tx_octets = ull_conn_default_tx_octets_get();
   18050:	f7fd fcea 	bl	15a28 <ull_conn_default_tx_octets_get>
   18054:	f8a4 00ba 	strh.w	r0, [r4, #186]	; 0xba
	conn->default_tx_time = ull_conn_default_tx_time_get();
   18058:	f7fd fcec 	bl	15a34 <ull_conn_default_tx_time_get>
	conn->llcp_phy.req = conn->llcp_phy.ack = 0U;
   1805c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
   18060:	4b52      	ldr	r3, [pc, #328]	; (181ac <ll_create_connection+0x3f0>)
	conn->default_tx_time = ull_conn_default_tx_time_get();
   18062:	f8a4 00bc 	strh.w	r0, [r4, #188]	; 0xbc
	conn->llcp_phy.req = conn->llcp_phy.ack = 0U;
   18066:	4013      	ands	r3, r2
   18068:	f8c4 3180 	str.w	r3, [r4, #384]	; 0x180
	conn->phy_pref_tx = ull_conn_default_phy_tx_get();
   1806c:	f7fd fce8 	bl	15a40 <ull_conn_default_phy_tx_get>
   18070:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
   18074:	f360 0302 	bfi	r3, r0, #0, #3
   18078:	f884 3184 	strb.w	r3, [r4, #388]	; 0x184
	conn->phy_pref_rx = ull_conn_default_phy_rx_get();
   1807c:	f7fd fce6 	bl	15a4c <ull_conn_default_phy_rx_get>
	conn->phy_pref_flags = 0U;
   18080:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
	conn->tx_data = conn->tx_data_last = 0;
   18084:	f8c4 9198 	str.w	r9, [r4, #408]	; 0x198
	conn->phy_pref_flags = 0U;
   18088:	0103      	lsls	r3, r0, #4
   1808a:	f003 0370 	and.w	r3, r3, #112	; 0x70
   1808e:	f022 0278 	bic.w	r2, r2, #120	; 0x78
   18092:	4313      	orrs	r3, r2
   18094:	f884 3184 	strb.w	r3, [r4, #388]	; 0x184
	conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
   18098:	e9c4 9964 	strd	r9, r9, [r4, #400]	; 0x190
   1809c:	e9c4 9962 	strd	r9, r9, [r4, #392]	; 0x188
	lll->conn = conn_lll;
   180a0:	f8c5 8024 	str.w	r8, [r5, #36]	; 0x24
   180a4:	f894 3020 	ldrb.w	r3, [r4, #32]
	hdr->disabled_cb = hdr->disabled_param = NULL;
   180a8:	f8c4 9018 	str.w	r9, [r4, #24]
   180ac:	f369 0300 	bfi	r3, r9, #0, #1
   180b0:	f8c4 9014 	str.w	r9, [r4, #20]
	hdr->parent = parent;
   180b4:	61e4      	str	r4, [r4, #28]
	hdr->is_stop = 0U;
   180b6:	f884 3020 	strb.w	r3, [r4, #32]
}
   180ba:	e69c      	b.n	17df6 <ll_create_connection+0x3a>
		ull_filter_rpa_update(false);
   180bc:	2000      	movs	r0, #0
   180be:	f000 fbc9 	bl	18854 <ull_filter_rpa_update>
		lll->rpa_gen = 1;
   180c2:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
   180c6:	f043 0301 	orr.w	r3, r3, #1
		own_addr_type &= 0x1;
   180ca:	f00a 0a01 	and.w	sl, sl, #1
		lll->rpa_gen = 1;
   180ce:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
   180d2:	e6a2      	b.n	17e1a <ll_create_connection+0x5e>

static inline void conn_release(struct ll_scan_set *scan)
{
	struct lll_conn *lll = scan->lll.conn;
   180d4:	6a6c      	ldr	r4, [r5, #36]	; 0x24
	struct node_rx_pdu *cc;
	struct ll_conn *conn;
	memq_link_t *link;

	LL_ASSERT(!lll->link_tx_free);
   180d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
   180d8:	b163      	cbz	r3, 180f4 <ll_create_connection+0x338>
   180da:	4a35      	ldr	r2, [pc, #212]	; (181b0 <ll_create_connection+0x3f4>)
   180dc:	4935      	ldr	r1, [pc, #212]	; (181b4 <ll_create_connection+0x3f8>)
   180de:	4836      	ldr	r0, [pc, #216]	; (181b8 <ll_create_connection+0x3fc>)
   180e0:	f240 3322 	movw	r3, #802	; 0x322
   180e4:	f005 ff35 	bl	1df52 <printk>
   180e8:	4040      	eors	r0, r0
   180ea:	f380 8811 	msr	BASEPRI, r0
   180ee:	f04f 0003 	mov.w	r0, #3
   180f2:	df02      	svc	2
	link = memq_deinit(&lll->memq_tx.head, &lll->memq_tx.tail);
   180f4:	f104 0134 	add.w	r1, r4, #52	; 0x34
   180f8:	f104 0030 	add.w	r0, r4, #48	; 0x30
   180fc:	f7f7 ffe8 	bl	100d0 <memq_deinit>
	LL_ASSERT(link);
   18100:	4606      	mov	r6, r0
   18102:	2800      	cmp	r0, #0
   18104:	d03a      	beq.n	1817c <ll_create_connection+0x3c0>
	lll->link_tx_free = link;

	conn = (void *)HDR_LLL2EVT(lll);
   18106:	6827      	ldr	r7, [r4, #0]
	lll->link_tx_free = link;
   18108:	6426      	str	r6, [r4, #64]	; 0x40

	cc = (void *)&conn->llcp_terminate.node_rx;
	link = cc->hdr.link;
   1810a:	f8d7 4108 	ldr.w	r4, [r7, #264]	; 0x108
	LL_ASSERT(link);
   1810e:	b33c      	cbz	r4, 18160 <ll_create_connection+0x3a4>

	ll_rx_link_release(link);
   18110:	4620      	mov	r0, r4
   18112:	f7fc f993 	bl	1443c <ll_rx_link_release>

	ll_conn_release(conn);
   18116:	4638      	mov	r0, r7
   18118:	f7fd f8d2 	bl	152c0 <ll_conn_release>
	scan->lll.conn = NULL;
   1811c:	2300      	movs	r3, #0
		return BT_HCI_ERR_HW_FAILURE;
   1811e:	2003      	movs	r0, #3
	scan->lll.conn = NULL;
   18120:	626b      	str	r3, [r5, #36]	; 0x24
}
   18122:	b009      	add	sp, #36	; 0x24
   18124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   18128:	200c      	movs	r0, #12
}
   1812a:	b009      	add	sp, #36	; 0x24
   1812c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	LL_ASSERT(!err);
   18130:	4a1f      	ldr	r2, [pc, #124]	; (181b0 <ll_create_connection+0x3f4>)
   18132:	4922      	ldr	r1, [pc, #136]	; (181bc <ll_create_connection+0x400>)
   18134:	4820      	ldr	r0, [pc, #128]	; (181b8 <ll_create_connection+0x3fc>)
   18136:	2396      	movs	r3, #150	; 0x96
   18138:	f005 ff0b 	bl	1df52 <printk>
   1813c:	4040      	eors	r0, r0
   1813e:	f380 8811 	msr	BASEPRI, r0
   18142:	f04f 0003 	mov.w	r0, #3
   18146:	df02      	svc	2
   18148:	e6b1      	b.n	17eae <ll_create_connection+0xf2>
		conn_lll->link_tx_free = &conn_lll->link_tx;
   1814a:	f104 0054 	add.w	r0, r4, #84	; 0x54
   1814e:	65e0      	str	r0, [r4, #92]	; 0x5c
   18150:	e6bd      	b.n	17ece <ll_create_connection+0x112>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   18152:	2007      	movs	r0, #7
   18154:	e66f      	b.n	17e36 <ll_create_connection+0x7a>
		ll_rx_link_release(link);
   18156:	9805      	ldr	r0, [sp, #20]
   18158:	f7fc f970 	bl	1443c <ll_rx_link_release>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   1815c:	2007      	movs	r0, #7
   1815e:	e66a      	b.n	17e36 <ll_create_connection+0x7a>
	LL_ASSERT(link);
   18160:	4a13      	ldr	r2, [pc, #76]	; (181b0 <ll_create_connection+0x3f4>)
   18162:	4917      	ldr	r1, [pc, #92]	; (181c0 <ll_create_connection+0x404>)
   18164:	4814      	ldr	r0, [pc, #80]	; (181b8 <ll_create_connection+0x3fc>)
   18166:	f240 332b 	movw	r3, #811	; 0x32b
   1816a:	f005 fef2 	bl	1df52 <printk>
   1816e:	4040      	eors	r0, r0
   18170:	f380 8811 	msr	BASEPRI, r0
   18174:	f04f 0003 	mov.w	r0, #3
   18178:	df02      	svc	2
   1817a:	e7c9      	b.n	18110 <ll_create_connection+0x354>
	LL_ASSERT(link);
   1817c:	4a0c      	ldr	r2, [pc, #48]	; (181b0 <ll_create_connection+0x3f4>)
   1817e:	4910      	ldr	r1, [pc, #64]	; (181c0 <ll_create_connection+0x404>)
   18180:	480d      	ldr	r0, [pc, #52]	; (181b8 <ll_create_connection+0x3fc>)
   18182:	f44f 7349 	mov.w	r3, #804	; 0x324
   18186:	f005 fee4 	bl	1df52 <printk>
   1818a:	4040      	eors	r0, r0
   1818c:	f380 8811 	msr	BASEPRI, r0
   18190:	f04f 0003 	mov.w	r0, #3
   18194:	df02      	svc	2
   18196:	e7b6      	b.n	18106 <ll_create_connection+0x34a>
   18198:	fffff880 	.word	0xfffff880
   1819c:	01480148 	.word	0x01480148
   181a0:	aaaaaaab 	.word	0xaaaaaaab
   181a4:	01c9c37f 	.word	0x01c9c37f
   181a8:	000108ff 	.word	0x000108ff
   181ac:	f6ff0000 	.word	0xf6ff0000
   181b0:	0002465c 	.word	0x0002465c
   181b4:	000246a0 	.word	0x000246a0
   181b8:	00023ff4 	.word	0x00023ff4
   181bc:	000242a4 	.word	0x000242a4
   181c0:	00024490 	.word	0x00024490
   181c4:	026259ff 	.word	0x026259ff

000181c8 <ll_connect_disable>:
{
   181c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   181cc:	4607      	mov	r7, r0
	scan = ull_scan_is_enabled_get(0);
   181ce:	2000      	movs	r0, #0
   181d0:	f7fc fc6e 	bl	14ab0 <ull_scan_is_enabled_get>
	if (!scan) {
   181d4:	b328      	cbz	r0, 18222 <ll_connect_disable+0x5a>
	conn_lll = scan->lll.conn;
   181d6:	6a46      	ldr	r6, [r0, #36]	; 0x24
	if (!conn_lll) {
   181d8:	4604      	mov	r4, r0
   181da:	b316      	cbz	r6, 18222 <ll_connect_disable+0x5a>
	status = ull_scan_disable(0, scan);
   181dc:	4601      	mov	r1, r0
   181de:	2000      	movs	r0, #0
   181e0:	f7fc fb7e 	bl	148e0 <ull_scan_disable>
	if (!status) {
   181e4:	4605      	mov	r5, r0
   181e6:	b9c8      	cbnz	r0, 1821c <ll_connect_disable+0x54>
		struct ll_conn *conn = (void *)HDR_LLL2EVT(conn_lll);
   181e8:	6836      	ldr	r6, [r6, #0]
		link = cc->hdr.link;
   181ea:	f8d6 8108 	ldr.w	r8, [r6, #264]	; 0x108
		cc = (void *)&conn->llcp_terminate.node_rx;
   181ee:	f506 7984 	add.w	r9, r6, #264	; 0x108
		LL_ASSERT(link);
   181f2:	f1b8 0f00 	cmp.w	r8, #0
   181f6:	d018      	beq.n	1822a <ll_connect_disable+0x62>
		ll_rx_link_release(link);
   181f8:	4640      	mov	r0, r8
   181fa:	f7fc f91f 	bl	1443c <ll_rx_link_release>
		ftr->param = &scan->lll;
   181fe:	341c      	adds	r4, #28
		cc->hdr.type = NODE_RX_TYPE_CONNECTION;
   18200:	2109      	movs	r1, #9
		cc->hdr.handle = 0xffff;
   18202:	f64f 72ff 	movw	r2, #65535	; 0xffff
		*((uint8_t *)cc->pdu) = BT_HCI_ERR_UNKNOWN_CONN_ID;
   18206:	2302      	movs	r3, #2
		ftr->param = &scan->lll;
   18208:	f8c6 4110 	str.w	r4, [r6, #272]	; 0x110
		cc->hdr.type = NODE_RX_TYPE_CONNECTION;
   1820c:	f886 110c 	strb.w	r1, [r6, #268]	; 0x10c
		cc->hdr.handle = 0xffff;
   18210:	f8a6 210e 	strh.w	r2, [r6, #270]	; 0x10e
		*((uint8_t *)cc->pdu) = BT_HCI_ERR_UNKNOWN_CONN_ID;
   18214:	f886 3124 	strb.w	r3, [r6, #292]	; 0x124
		*rx = cc;
   18218:	f8c7 9000 	str.w	r9, [r7]
}
   1821c:	4628      	mov	r0, r5
   1821e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   18222:	250c      	movs	r5, #12
}
   18224:	4628      	mov	r0, r5
   18226:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		LL_ASSERT(link);
   1822a:	4a07      	ldr	r2, [pc, #28]	; (18248 <ll_connect_disable+0x80>)
   1822c:	4907      	ldr	r1, [pc, #28]	; (1824c <ll_connect_disable+0x84>)
   1822e:	4808      	ldr	r0, [pc, #32]	; (18250 <ll_connect_disable+0x88>)
   18230:	f44f 73c7 	mov.w	r3, #398	; 0x18e
   18234:	f005 fe8d 	bl	1df52 <printk>
   18238:	4040      	eors	r0, r0
   1823a:	f380 8811 	msr	BASEPRI, r0
   1823e:	f04f 0003 	mov.w	r0, #3
   18242:	df02      	svc	2
   18244:	e7d8      	b.n	181f8 <ll_connect_disable+0x30>
   18246:	bf00      	nop
   18248:	0002465c 	.word	0x0002465c
   1824c:	00024490 	.word	0x00024490
   18250:	00023ff4 	.word	0x00023ff4

00018254 <ll_chm_update>:
{
   18254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18258:	4606      	mov	r6, r0
	ull_chan_map_set(chm);
   1825a:	f000 f8ab 	bl	183b4 <ull_chan_map_set>
	while (handle--) {
   1825e:	2503      	movs	r5, #3
		conn->llcp_type = LLCP_CHAN_MAP;
   18260:	f04f 0802 	mov.w	r8, #2
	while (handle--) {
   18264:	f64f 77ff 	movw	r7, #65535	; 0xffff
		conn = ll_connected_get(handle);
   18268:	4628      	mov	r0, r5
   1826a:	f7fd f83f 	bl	152ec <ll_connected_get>
		if (!conn || conn->lll.role) {
   1826e:	4604      	mov	r4, r0
   18270:	b1d0      	cbz	r0, 182a8 <ll_chm_update+0x54>
   18272:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
   18276:	2b00      	cmp	r3, #0
   18278:	db16      	blt.n	182a8 <ll_chm_update+0x54>
		ret = ull_conn_llcp_req(conn);
   1827a:	f7ff fc1f 	bl	17abc <ull_conn_llcp_req>
   1827e:	4603      	mov	r3, r0
		memcpy(conn->llcp.chan_map.chm, chm,
   18280:	2205      	movs	r2, #5
   18282:	4631      	mov	r1, r6
   18284:	f104 00c5 	add.w	r0, r4, #197	; 0xc5
		if (ret) {
   18288:	b99b      	cbnz	r3, 182b2 <ll_chm_update+0x5e>
		memcpy(conn->llcp.chan_map.chm, chm,
   1828a:	f007 fdf4 	bl	1fe76 <memcpy>
		conn->llcp.chan_map.initiate = 1U;
   1828e:	f894 20c4 	ldrb.w	r2, [r4, #196]	; 0xc4
		conn->llcp_req++;
   18292:	f894 30bf 	ldrb.w	r3, [r4, #191]	; 0xbf
		conn->llcp_type = LLCP_CHAN_MAP;
   18296:	f884 80c1 	strb.w	r8, [r4, #193]	; 0xc1
		conn->llcp.chan_map.initiate = 1U;
   1829a:	f042 0201 	orr.w	r2, r2, #1
		conn->llcp_req++;
   1829e:	3301      	adds	r3, #1
		conn->llcp.chan_map.initiate = 1U;
   182a0:	f884 20c4 	strb.w	r2, [r4, #196]	; 0xc4
		conn->llcp_req++;
   182a4:	f884 30bf 	strb.w	r3, [r4, #191]	; 0xbf
	while (handle--) {
   182a8:	3d01      	subs	r5, #1
   182aa:	b2ad      	uxth	r5, r5
   182ac:	42bd      	cmp	r5, r7
   182ae:	d1db      	bne.n	18268 <ll_chm_update+0x14>
	return 0;
   182b0:	2300      	movs	r3, #0
}
   182b2:	4618      	mov	r0, r3
   182b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000182b8 <ll_enc_req_send>:
{
   182b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   182bc:	4688      	mov	r8, r1
   182be:	4616      	mov	r6, r2
   182c0:	4699      	mov	r9, r3
   182c2:	4607      	mov	r7, r0
	conn = ll_connected_get(handle);
   182c4:	f7fd f812 	bl	152ec <ll_connected_get>
	if (!conn) {
   182c8:	2800      	cmp	r0, #0
   182ca:	d063      	beq.n	18394 <ll_enc_req_send+0xdc>
	if ((conn->llcp_enc.req != conn->llcp_enc.ack) ||
   182cc:	f890 2128 	ldrb.w	r2, [r0, #296]	; 0x128
   182d0:	f890 3129 	ldrb.w	r3, [r0, #297]	; 0x129
   182d4:	429a      	cmp	r2, r3
   182d6:	4604      	mov	r4, r0
   182d8:	d13d      	bne.n	18356 <ll_enc_req_send+0x9e>
   182da:	f890 20bf 	ldrb.w	r2, [r0, #191]	; 0xbf
   182de:	f890 30c0 	ldrb.w	r3, [r0, #192]	; 0xc0
   182e2:	429a      	cmp	r2, r3
   182e4:	d003      	beq.n	182ee <ll_enc_req_send+0x36>
	    ((conn->llcp_req != conn->llcp_ack) &&
   182e6:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
   182ea:	2b03      	cmp	r3, #3
   182ec:	d033      	beq.n	18356 <ll_enc_req_send+0x9e>
	tx = ll_tx_mem_acquire();
   182ee:	f7fd f811 	bl	15314 <ll_tx_mem_acquire>
	if (tx) {
   182f2:	4605      	mov	r5, r0
   182f4:	b378      	cbz	r0, 18356 <ll_enc_req_send+0x9e>
		memcpy(&conn->llcp_enc.ltk[0], ltk, sizeof(conn->llcp_enc.ltk));
   182f6:	4649      	mov	r1, r9
   182f8:	2210      	movs	r2, #16
   182fa:	f204 1035 	addw	r0, r4, #309	; 0x135
   182fe:	f007 fdba 	bl	1fe76 <memcpy>
		if (!conn->lll.enc_rx && !conn->lll.enc_tx) {
   18302:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   18306:	f013 0318 	ands.w	r3, r3, #24
   1830a:	d027      	beq.n	1835c <ll_enc_req_send+0xa4>
		} else if (conn->lll.enc_rx && conn->lll.enc_tx) {
   1830c:	2b18      	cmp	r3, #24
   1830e:	d11f      	bne.n	18350 <ll_enc_req_send+0x98>
			memcpy(&conn->llcp_enc.rand[0], rand,
   18310:	4641      	mov	r1, r8
   18312:	2208      	movs	r2, #8
   18314:	f204 102d 	addw	r0, r4, #301	; 0x12d
   18318:	f007 fdad 	bl	1fe76 <memcpy>
			conn->llcp_enc.ediv[0] = ediv[0];
   1831c:	7833      	ldrb	r3, [r6, #0]
   1831e:	f884 312b 	strb.w	r3, [r4, #299]	; 0x12b
			conn->llcp_enc.ediv[1] = ediv[1];
   18322:	7873      	ldrb	r3, [r6, #1]
   18324:	f884 312c 	strb.w	r3, [r4, #300]	; 0x12c
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   18328:	792b      	ldrb	r3, [r5, #4]
			pdu_data_tx->len = offsetof(struct pdu_data_llctrl,
   1832a:	2101      	movs	r1, #1
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   1832c:	f043 0303 	orr.w	r3, r3, #3
			pdu_data_tx->llctrl.opcode =
   18330:	220a      	movs	r2, #10
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   18332:	712b      	strb	r3, [r5, #4]
			pdu_data_tx->len = offsetof(struct pdu_data_llctrl,
   18334:	7169      	strb	r1, [r5, #5]
			pdu_data_tx->llctrl.opcode =
   18336:	71ea      	strb	r2, [r5, #7]
		if (ll_tx_mem_enqueue(handle, tx)) {
   18338:	4638      	mov	r0, r7
   1833a:	4629      	mov	r1, r5
   1833c:	f7fc fff6 	bl	1532c <ll_tx_mem_enqueue>
   18340:	b930      	cbnz	r0, 18350 <ll_enc_req_send+0x98>
		conn->llcp_enc.req++;
   18342:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
   18346:	3301      	adds	r3, #1
   18348:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
}
   1834c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			ll_tx_mem_release(tx);
   18350:	4628      	mov	r0, r5
   18352:	f7fc ffe5 	bl	15320 <ll_tx_mem_release>
			return BT_HCI_ERR_CMD_DISALLOWED;
   18356:	200c      	movs	r0, #12
}
   18358:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   1835c:	792b      	ldrb	r3, [r5, #4]
			pdu_data_tx->llctrl.opcode =
   1835e:	2203      	movs	r2, #3
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   18360:	f043 0303 	orr.w	r3, r3, #3
			pdu_data_tx->llctrl.opcode =
   18364:	71ea      	strb	r2, [r5, #7]
			pdu_data_tx->len =
   18366:	2017      	movs	r0, #23
			memcpy(enc_req->rand, rand, sizeof(enc_req->rand));
   18368:	2208      	movs	r2, #8
   1836a:	4641      	mov	r1, r8
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   1836c:	712b      	strb	r3, [r5, #4]
			pdu_data_tx->len =
   1836e:	7168      	strb	r0, [r5, #5]
			memcpy(enc_req->rand, rand, sizeof(enc_req->rand));
   18370:	18a8      	adds	r0, r5, r2
   18372:	f007 fd80 	bl	1fe76 <memcpy>
			enc_req->ediv[0] = ediv[0];
   18376:	7833      	ldrb	r3, [r6, #0]
   18378:	742b      	strb	r3, [r5, #16]
			enc_req->ediv[1] = ediv[1];
   1837a:	7873      	ldrb	r3, [r6, #1]
   1837c:	746b      	strb	r3, [r5, #17]
			lll_csrand_get(enc_req->skdm, sizeof(enc_req->skdm));
   1837e:	2108      	movs	r1, #8
   18380:	f105 0012 	add.w	r0, r5, #18
   18384:	f001 f9be 	bl	19704 <lll_csrand_get>
			lll_csrand_get(enc_req->ivm, sizeof(enc_req->ivm));
   18388:	2104      	movs	r1, #4
   1838a:	f105 001a 	add.w	r0, r5, #26
   1838e:	f001 f9b9 	bl	19704 <lll_csrand_get>
   18392:	e7d1      	b.n	18338 <ll_enc_req_send+0x80>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   18394:	2002      	movs	r0, #2
}
   18396:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1839a:	bf00      	nop

0001839c <ull_chan_map_get>:

	return 0;
}

uint8_t ull_chan_map_get(uint8_t *const chan_map)
{
   1839c:	b508      	push	{r3, lr}
	memcpy(chan_map, map, sizeof(map));
   1839e:	4903      	ldr	r1, [pc, #12]	; (183ac <ull_chan_map_get+0x10>)
   183a0:	2205      	movs	r2, #5
   183a2:	f007 fd68 	bl	1fe76 <memcpy>

	return count;
   183a6:	4b02      	ldr	r3, [pc, #8]	; (183b0 <ull_chan_map_get+0x14>)
}
   183a8:	7818      	ldrb	r0, [r3, #0]
   183aa:	bd08      	pop	{r3, pc}
   183ac:	20000600 	.word	0x20000600
   183b0:	20000727 	.word	0x20000727

000183b4 <ull_chan_map_set>:

void ull_chan_map_set(uint8_t const *const chan_map)
{
   183b4:	b510      	push	{r4, lr}
	memcpy(map, chan_map, sizeof(map));
   183b6:	4c06      	ldr	r4, [pc, #24]	; (183d0 <ull_chan_map_set+0x1c>)
{
   183b8:	4601      	mov	r1, r0
	memcpy(map, chan_map, sizeof(map));
   183ba:	2205      	movs	r2, #5
   183bc:	4620      	mov	r0, r4
   183be:	f007 fd5a 	bl	1fe76 <memcpy>
	count = util_ones_count_get(map, sizeof(map));
   183c2:	4620      	mov	r0, r4
   183c4:	2105      	movs	r1, #5
   183c6:	f7f7 fff7 	bl	103b8 <util_ones_count_get>
   183ca:	4b02      	ldr	r3, [pc, #8]	; (183d4 <ull_chan_map_set+0x20>)
   183cc:	7018      	strb	r0, [r3, #0]
}
   183ce:	bd10      	pop	{r4, pc}
   183d0:	20000600 	.word	0x20000600
   183d4:	20000727 	.word	0x20000727

000183d8 <lll_chan_sel_1>:
#endif /* CONFIG_BT_CTLR_CHAN_SEL_2 */

#if defined(CONFIG_BT_CONN)
uint8_t lll_chan_sel_1(uint8_t *chan_use, uint8_t hop, uint16_t latency, uint8_t *chan_map,
		    uint8_t chan_count)
{
   183d8:	b470      	push	{r4, r5, r6}
   183da:	4605      	mov	r5, r0
	uint8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   183dc:	7800      	ldrb	r0, [r0, #0]
   183de:	4c1b      	ldr	r4, [pc, #108]	; (1844c <lll_chan_sel_1+0x74>)
   183e0:	fb02 1101 	mla	r1, r2, r1, r1
   183e4:	180a      	adds	r2, r1, r0
   183e6:	fb84 0102 	smull	r0, r1, r4, r2
   183ea:	4411      	add	r1, r2
   183ec:	1149      	asrs	r1, r1, #5
   183ee:	eb01 04c1 	add.w	r4, r1, r1, lsl #3
   183f2:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   183f6:	1a51      	subs	r1, r2, r1
   183f8:	b2c8      	uxtb	r0, r1
	*chan_use = chan_next;

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   183fa:	08c2      	lsrs	r2, r0, #3
	*chan_use = chan_next;
   183fc:	7028      	strb	r0, [r5, #0]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   183fe:	5c9c      	ldrb	r4, [r3, r2]
{
   18400:	f89d 500c 	ldrb.w	r5, [sp, #12]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   18404:	f001 0107 	and.w	r1, r1, #7
   18408:	410c      	asrs	r4, r1
   1840a:	f014 0401 	ands.w	r4, r4, #1
   1840e:	d11b      	bne.n	18448 <lll_chan_sel_1+0x70>
		uint8_t chan_index;

		chan_index = chan_next % chan_count;
   18410:	fbb0 f2f5 	udiv	r2, r0, r5
   18414:	fb05 0212 	mls	r2, r5, r2, r0
   18418:	b2d2      	uxtb	r2, r2
	uint8_t chan_next;
	uint8_t byte_count;

	chan_next = 0U;
	byte_count = 5U;
	while (byte_count--) {
   1841a:	1e5d      	subs	r5, r3, #1
   1841c:	1d1e      	adds	r6, r3, #4
		uint8_t bite;
		uint8_t bit_count;

		bite = *chan_map;
   1841e:	f104 0108 	add.w	r1, r4, #8
   18422:	f815 3f01 	ldrb.w	r3, [r5, #1]!
		bit_count = 8U;
		while (bit_count--) {
   18426:	4620      	mov	r0, r4
   18428:	b2cc      	uxtb	r4, r1
			if (bite & 0x01) {
   1842a:	f013 0f01 	tst.w	r3, #1
				if (chan_index == 0U) {
					break;
				}
				chan_index--;
			}
			chan_next++;
   1842e:	f100 0101 	add.w	r1, r0, #1
			bite >>= 1;
   18432:	ea4f 0353 	mov.w	r3, r3, lsr #1
			if (bite & 0x01) {
   18436:	d002      	beq.n	1843e <lll_chan_sel_1+0x66>
				if (chan_index == 0U) {
   18438:	b132      	cbz	r2, 18448 <lll_chan_sel_1+0x70>
				chan_index--;
   1843a:	3a01      	subs	r2, #1
   1843c:	b2d2      	uxtb	r2, r2
			chan_next++;
   1843e:	b2c8      	uxtb	r0, r1
		while (bit_count--) {
   18440:	4284      	cmp	r4, r0
   18442:	d1f2      	bne.n	1842a <lll_chan_sel_1+0x52>
	while (byte_count--) {
   18444:	42b5      	cmp	r5, r6
   18446:	d1ea      	bne.n	1841e <lll_chan_sel_1+0x46>
}
   18448:	bc70      	pop	{r4, r5, r6}
   1844a:	4770      	bx	lr
   1844c:	dd67c8a7 	.word	0xdd67c8a7

00018450 <wl_find>:
		wl[i].taken = 0U;
	}
}

static uint8_t wl_find(uint8_t addr_type, uint8_t *addr, uint8_t *free)
{
   18450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   18454:	4688      	mov	r8, r1
	int i;

	if (free) {
   18456:	4615      	mov	r5, r2
   18458:	b10a      	cbz	r2, 1845e <wl_find+0xe>
		*free = FILTER_IDX_NONE;
   1845a:	23ff      	movs	r3, #255	; 0xff
   1845c:	7013      	strb	r3, [r2, #0]
   1845e:	4e17      	ldr	r6, [pc, #92]	; (184bc <wl_find+0x6c>)
	}

	for (i = 0; i < WL_SIZE; i++) {
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   18460:	f000 0701 	and.w	r7, r0, #1
   18464:	f106 0902 	add.w	r9, r6, #2
{
   18468:	2400      	movs	r4, #0
   1846a:	e004      	b.n	18476 <wl_find+0x26>
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   1846c:	42ba      	cmp	r2, r7
   1846e:	d014      	beq.n	1849a <wl_find+0x4a>
	for (i = 0; i < WL_SIZE; i++) {
   18470:	3401      	adds	r4, #1
   18472:	2c08      	cmp	r4, #8
   18474:	d00e      	beq.n	18494 <wl_find+0x44>
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   18476:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   1847a:	07d9      	lsls	r1, r3, #31
   1847c:	f3c3 0240 	ubfx	r2, r3, #1, #1
   18480:	d4f4      	bmi.n	1846c <wl_find+0x1c>
			return i;
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   18482:	2d00      	cmp	r5, #0
   18484:	d0f4      	beq.n	18470 <wl_find+0x20>
   18486:	782b      	ldrb	r3, [r5, #0]
   18488:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   1848a:	bf08      	it	eq
   1848c:	702c      	strbeq	r4, [r5, #0]
	for (i = 0; i < WL_SIZE; i++) {
   1848e:	3401      	adds	r4, #1
   18490:	2c08      	cmp	r4, #8
   18492:	d1f0      	bne.n	18476 <wl_find+0x26>
		}
	}

	return FILTER_IDX_NONE;
   18494:	20ff      	movs	r0, #255	; 0xff
}
   18496:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   1849a:	2206      	movs	r2, #6
   1849c:	4641      	mov	r1, r8
   1849e:	eb09 00c4 	add.w	r0, r9, r4, lsl #3
   184a2:	f007 fcd8 	bl	1fe56 <memcmp>
   184a6:	b130      	cbz	r0, 184b6 <wl_find+0x66>
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   184a8:	2d00      	cmp	r5, #0
   184aa:	d0e1      	beq.n	18470 <wl_find+0x20>
   184ac:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   184b0:	07db      	lsls	r3, r3, #31
   184b2:	d4dd      	bmi.n	18470 <wl_find+0x20>
   184b4:	e7e7      	b.n	18486 <wl_find+0x36>
			return i;
   184b6:	b2e0      	uxtb	r0, r4
   184b8:	e7ed      	b.n	18496 <wl_find+0x46>
   184ba:	bf00      	nop
   184bc:	20008980 	.word	0x20008980

000184c0 <wl_update>:

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
}

static void wl_update(void)
{
   184c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   184c4:	4f21      	ldr	r7, [pc, #132]	; (1854c <wl_update+0x8c>)
   184c6:	4d22      	ldr	r5, [pc, #136]	; (18550 <wl_update+0x90>)
			continue;
		}

		j = wl[i].rl_idx;

		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   184c8:	f8df 9088 	ldr.w	r9, [pc, #136]	; 18554 <wl_update+0x94>
   184cc:	f8df a088 	ldr.w	sl, [pc, #136]	; 18558 <wl_update+0x98>
#endif /* !CONFIG_BT_CTLR_PRIVACY */

static void filter_insert(struct lll_filter *filter, int index, uint8_t addr_type,
			   uint8_t *bdaddr)
{
	filter->enable_bitmask |= BIT(index);
   184d0:	f1a7 0802 	sub.w	r8, r7, #2
   184d4:	f1a5 0b02 	sub.w	fp, r5, #2
{
   184d8:	2400      	movs	r4, #0
		if (!wl[i].taken) {
   184da:	f81b 3034 	ldrb.w	r3, [fp, r4, lsl #3]
	filter->enable_bitmask |= BIT(index);
   184de:	2601      	movs	r6, #1
		if (!wl[i].taken) {
   184e0:	f013 0f01 	tst.w	r3, #1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   184e4:	4638      	mov	r0, r7
	filter->enable_bitmask |= BIT(index);
   184e6:	fa06 f604 	lsl.w	r6, r6, r4
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   184ea:	4629      	mov	r1, r5
   184ec:	f107 0706 	add.w	r7, r7, #6
   184f0:	f04f 0206 	mov.w	r2, #6
		if (!wl[i].taken) {
   184f4:	d022      	beq.n	1853c <wl_update+0x7c>
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   184f6:	f899 3000 	ldrb.w	r3, [r9]
   184fa:	b163      	cbz	r3, 18516 <wl_update+0x56>
		j = wl[i].rl_idx;
   184fc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   18500:	2b07      	cmp	r3, #7
   18502:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
   18506:	d806      	bhi.n	18516 <wl_update+0x56>
   18508:	f81a 303c 	ldrb.w	r3, [sl, ip, lsl #3]
   1850c:	f013 0f04 	tst.w	r3, #4
   18510:	d001      	beq.n	18516 <wl_update+0x56>
   18512:	06db      	lsls	r3, r3, #27
   18514:	d512      	bpl.n	1853c <wl_update+0x7c>
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   18516:	f81b 3034 	ldrb.w	r3, [fp, r4, lsl #3]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1851a:	f898 e001 	ldrb.w	lr, [r8, #1]
	filter->enable_bitmask |= BIT(index);
   1851e:	f898 c000 	ldrb.w	ip, [r8]
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   18522:	f3c3 0340 	ubfx	r3, r3, #1, #1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   18526:	40a3      	lsls	r3, r4
   18528:	ea4e 0303 	orr.w	r3, lr, r3
	filter->enable_bitmask |= BIT(index);
   1852c:	ea4c 0606 	orr.w	r6, ip, r6
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   18530:	f888 3001 	strb.w	r3, [r8, #1]
	filter->enable_bitmask |= BIT(index);
   18534:	f888 6000 	strb.w	r6, [r8]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   18538:	f007 fc9d 	bl	1fe76 <memcpy>
	for (i = 0U; i < WL_SIZE; i++) {
   1853c:	3401      	adds	r4, #1
   1853e:	2c08      	cmp	r4, #8
   18540:	f105 0508 	add.w	r5, r5, #8
   18544:	d1c9      	bne.n	184da <wl_update+0x1a>
}
   18546:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1854a:	bf00      	nop
   1854c:	200089c2 	.word	0x200089c2
   18550:	20008982 	.word	0x20008982
   18554:	20009c43 	.word	0x20009c43
   18558:	20008808 	.word	0x20008808

0001855c <rl_update>:
{
   1855c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18560:	f8df 8060 	ldr.w	r8, [pc, #96]	; 185c4 <rl_update+0x68>
	filter->enable_bitmask |= BIT(index);
   18564:	4d16      	ldr	r5, [pc, #88]	; (185c0 <rl_update+0x64>)
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   18566:	f108 0701 	add.w	r7, r8, #1
   1856a:	1cae      	adds	r6, r5, #2
{
   1856c:	2400      	movs	r4, #0
   1856e:	e002      	b.n	18576 <rl_update+0x1a>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   18570:	3401      	adds	r4, #1
   18572:	2c08      	cmp	r4, #8
   18574:	d021      	beq.n	185ba <rl_update+0x5e>
		if (rl[i].taken) {
   18576:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1857a:	00d9      	lsls	r1, r3, #3
   1857c:	f818 3033 	ldrb.w	r3, [r8, r3, lsl #3]
   18580:	07da      	lsls	r2, r3, #31
   18582:	d5f5      	bpl.n	18570 <rl_update+0x14>
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   18584:	786a      	ldrb	r2, [r5, #1]
	filter->enable_bitmask |= BIT(index);
   18586:	f895 c000 	ldrb.w	ip, [r5]
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
   1858a:	f3c3 1380 	ubfx	r3, r3, #6, #1
	filter->enable_bitmask |= BIT(index);
   1858e:	f04f 0e01 	mov.w	lr, #1
   18592:	fa0e fe04 	lsl.w	lr, lr, r4
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   18596:	40a3      	lsls	r3, r4
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   18598:	eb04 0044 	add.w	r0, r4, r4, lsl #1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1859c:	4313      	orrs	r3, r2
	filter->enable_bitmask |= BIT(index);
   1859e:	ea4c 0c0e 	orr.w	ip, ip, lr
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   185a2:	4439      	add	r1, r7
   185a4:	eb06 0040 	add.w	r0, r6, r0, lsl #1
   185a8:	2206      	movs	r2, #6
   185aa:	3401      	adds	r4, #1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   185ac:	706b      	strb	r3, [r5, #1]
	filter->enable_bitmask |= BIT(index);
   185ae:	f885 c000 	strb.w	ip, [r5]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   185b2:	f007 fc60 	bl	1fe76 <memcpy>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   185b6:	2c08      	cmp	r4, #8
   185b8:	d1dd      	bne.n	18576 <rl_update+0x1a>
}
   185ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   185be:	bf00      	nop
   185c0:	20008948 	.word	0x20008948
   185c4:	20008808 	.word	0x20008808

000185c8 <ll_wl_size_get>:
}
   185c8:	2008      	movs	r0, #8
   185ca:	4770      	bx	lr

000185cc <ll_wl_clear>:
{
   185cc:	b510      	push	{r4, lr}
	if (ull_scan_filter_pol_get(0) & 0x1) {
   185ce:	2000      	movs	r0, #0
   185d0:	f7fc faa0 	bl	14b14 <ull_scan_filter_pol_get>
   185d4:	f010 0001 	ands.w	r0, r0, #1
   185d8:	d11b      	bne.n	18612 <ll_wl_clear+0x46>
   185da:	4a0f      	ldr	r2, [pc, #60]	; (18618 <ll_wl_clear+0x4c>)
			rl[j].wl = 0U;
   185dc:	4c0f      	ldr	r4, [pc, #60]	; (1861c <ll_wl_clear+0x50>)
		uint8_t j = wl[i].rl_idx;
   185de:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
   185e2:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   185e4:	2b07      	cmp	r3, #7
			rl[j].wl = 0U;
   185e6:	eb03 0183 	add.w	r1, r3, r3, lsl #2
		if (j < ARRAY_SIZE(rl)) {
   185ea:	d805      	bhi.n	185f8 <ll_wl_clear+0x2c>
			rl[j].wl = 0U;
   185ec:	f814 3031 	ldrb.w	r3, [r4, r1, lsl #3]
   185f0:	f36f 1345 	bfc	r3, #5, #1
   185f4:	f804 3031 	strb.w	r3, [r4, r1, lsl #3]
		wl[i].taken = 0U;
   185f8:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
   185fc:	f36f 0300 	bfc	r3, #0, #1
   18600:	f802 3030 	strb.w	r3, [r2, r0, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   18604:	3001      	adds	r0, #1
   18606:	2808      	cmp	r0, #8
   18608:	d1e9      	bne.n	185de <ll_wl_clear+0x12>
	wl_anon = 0U;
   1860a:	4b05      	ldr	r3, [pc, #20]	; (18620 <ll_wl_clear+0x54>)
   1860c:	2000      	movs	r0, #0
   1860e:	7018      	strb	r0, [r3, #0]
}
   18610:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   18612:	200c      	movs	r0, #12
}
   18614:	bd10      	pop	{r4, pc}
   18616:	bf00      	nop
   18618:	20008980 	.word	0x20008980
   1861c:	20008808 	.word	0x20008808
   18620:	20009c44 	.word	0x20009c44

00018624 <ll_wl_remove>:
{
   18624:	b538      	push	{r3, r4, r5, lr}
   18626:	4604      	mov	r4, r0
	if (ull_scan_filter_pol_get(0) & 0x1) {
   18628:	2000      	movs	r0, #0
   1862a:	f7fc fa73 	bl	14b14 <ull_scan_filter_pol_get>
   1862e:	f010 0501 	ands.w	r5, r0, #1
   18632:	d125      	bne.n	18680 <ll_wl_remove+0x5c>
	if (addr->type == ADDR_TYPE_ANON) {
   18634:	7820      	ldrb	r0, [r4, #0]
   18636:	28ff      	cmp	r0, #255	; 0xff
   18638:	d01e      	beq.n	18678 <ll_wl_remove+0x54>
	uint8_t i = wl_find(id_addr->type, id_addr->a.val, NULL);
   1863a:	1c61      	adds	r1, r4, #1
   1863c:	462a      	mov	r2, r5
   1863e:	f7ff ff07 	bl	18450 <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   18642:	2807      	cmp	r0, #7
   18644:	d901      	bls.n	1864a <ll_wl_remove+0x26>
   18646:	2002      	movs	r0, #2
}
   18648:	bd38      	pop	{r3, r4, r5, pc}
		uint8_t j = wl[i].rl_idx;
   1864a:	4a0e      	ldr	r2, [pc, #56]	; (18684 <ll_wl_remove+0x60>)
   1864c:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
   18650:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   18652:	2b07      	cmp	r3, #7
   18654:	d808      	bhi.n	18668 <ll_wl_remove+0x44>
			rl[j].wl = 0U;
   18656:	490c      	ldr	r1, [pc, #48]	; (18688 <ll_wl_remove+0x64>)
   18658:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   1865c:	f811 4033 	ldrb.w	r4, [r1, r3, lsl #3]
   18660:	f365 1445 	bfi	r4, r5, #5, #1
   18664:	f801 4033 	strb.w	r4, [r1, r3, lsl #3]
		wl[i].taken = 0U;
   18668:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
   1866c:	f36f 0300 	bfc	r3, #0, #1
   18670:	f802 3030 	strb.w	r3, [r2, r0, lsl #3]
		return 0;
   18674:	2000      	movs	r0, #0
}
   18676:	bd38      	pop	{r3, r4, r5, pc}
		wl_anon = 0U;
   18678:	4b04      	ldr	r3, [pc, #16]	; (1868c <ll_wl_remove+0x68>)
   1867a:	701d      	strb	r5, [r3, #0]
		return 0;
   1867c:	4628      	mov	r0, r5
}
   1867e:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   18680:	200c      	movs	r0, #12
}
   18682:	bd38      	pop	{r3, r4, r5, pc}
   18684:	20008980 	.word	0x20008980
   18688:	20008808 	.word	0x20008808
   1868c:	20009c44 	.word	0x20009c44

00018690 <ll_rl_id_addr_get>:
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   18690:	2807      	cmp	r0, #7
{
   18692:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18696:	4604      	mov	r4, r0
   18698:	460d      	mov	r5, r1
   1869a:	4690      	mov	r8, r2
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   1869c:	d817      	bhi.n	186ce <ll_rl_id_addr_get+0x3e>
	LL_ASSERT(rl[rl_idx].taken);
   1869e:	4e19      	ldr	r6, [pc, #100]	; (18704 <ll_rl_id_addr_get+0x74>)
   186a0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   186a4:	00a7      	lsls	r7, r4, #2
   186a6:	f816 3033 	ldrb.w	r3, [r6, r3, lsl #3]
   186aa:	07db      	lsls	r3, r3, #31
   186ac:	d51c      	bpl.n	186e8 <ll_rl_id_addr_get+0x58>
	*id_addr_type = rl[rl_idx].id_addr_type;
   186ae:	4427      	add	r7, r4
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   186b0:	2128      	movs	r1, #40	; 0x28
	*id_addr_type = rl[rl_idx].id_addr_type;
   186b2:	f816 3037 	ldrb.w	r3, [r6, r7, lsl #3]
   186b6:	f3c3 1380 	ubfx	r3, r3, #6, #1
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   186ba:	fb01 6104 	mla	r1, r1, r4, r6
	*id_addr_type = rl[rl_idx].id_addr_type;
   186be:	702b      	strb	r3, [r5, #0]
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   186c0:	4640      	mov	r0, r8
   186c2:	3101      	adds	r1, #1
}
   186c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   186c8:	2206      	movs	r2, #6
   186ca:	f007 bbd4 	b.w	1fe76 <memcpy>
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   186ce:	4a0e      	ldr	r2, [pc, #56]	; (18708 <ll_rl_id_addr_get+0x78>)
   186d0:	490e      	ldr	r1, [pc, #56]	; (1870c <ll_rl_id_addr_get+0x7c>)
   186d2:	480f      	ldr	r0, [pc, #60]	; (18710 <ll_rl_id_addr_get+0x80>)
   186d4:	23e7      	movs	r3, #231	; 0xe7
   186d6:	f005 fc3c 	bl	1df52 <printk>
   186da:	4040      	eors	r0, r0
   186dc:	f380 8811 	msr	BASEPRI, r0
   186e0:	f04f 0003 	mov.w	r0, #3
   186e4:	df02      	svc	2
   186e6:	e7da      	b.n	1869e <ll_rl_id_addr_get+0xe>
	LL_ASSERT(rl[rl_idx].taken);
   186e8:	4a07      	ldr	r2, [pc, #28]	; (18708 <ll_rl_id_addr_get+0x78>)
   186ea:	490a      	ldr	r1, [pc, #40]	; (18714 <ll_rl_id_addr_get+0x84>)
   186ec:	4808      	ldr	r0, [pc, #32]	; (18710 <ll_rl_id_addr_get+0x80>)
   186ee:	23e8      	movs	r3, #232	; 0xe8
   186f0:	f005 fc2f 	bl	1df52 <printk>
   186f4:	4040      	eors	r0, r0
   186f6:	f380 8811 	msr	BASEPRI, r0
   186fa:	f04f 0003 	mov.w	r0, #3
   186fe:	df02      	svc	2
   18700:	e7d5      	b.n	186ae <ll_rl_id_addr_get+0x1e>
   18702:	bf00      	nop
   18704:	20008808 	.word	0x20008808
   18708:	000246dc 	.word	0x000246dc
   1870c:	00024720 	.word	0x00024720
   18710:	00023ff4 	.word	0x00023ff4
   18714:	0002472c 	.word	0x0002472c

00018718 <ll_rl_size_get>:
   18718:	2008      	movs	r0, #8
   1871a:	4770      	bx	lr

0001871c <ll_rl_clear>:
{
   1871c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		(IS_ENABLED(CONFIG_BT_OBSERVER) && ull_scan_is_enabled(0)))
   1871e:	2000      	movs	r0, #0
   18720:	f7fc f9e0 	bl	14ae4 <ull_scan_is_enabled>
	if (!rl_access_check(false)) {
   18724:	bb98      	cbnz	r0, 1878e <ll_rl_clear+0x72>
		rl[i].taken = 0U;
   18726:	4b1b      	ldr	r3, [pc, #108]	; (18794 <ll_rl_clear+0x78>)
	peer_irk_count = 0U;
   18728:	491b      	ldr	r1, [pc, #108]	; (18798 <ll_rl_clear+0x7c>)
		rl[i].taken = 0U;
   1872a:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
   1872e:	f893 c000 	ldrb.w	ip, [r3]
   18732:	f893 7028 	ldrb.w	r7, [r3, #40]	; 0x28
   18736:	f893 6078 	ldrb.w	r6, [r3, #120]	; 0x78
   1873a:	f893 50a0 	ldrb.w	r5, [r3, #160]	; 0xa0
   1873e:	f893 40c8 	ldrb.w	r4, [r3, #200]	; 0xc8
	peer_irk_count = 0U;
   18742:	7008      	strb	r0, [r1, #0]
		rl[i].taken = 0U;
   18744:	f360 0200 	bfi	r2, r0, #0, #1
   18748:	f893 10f0 	ldrb.w	r1, [r3, #240]	; 0xf0
   1874c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
   18750:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
   18754:	f360 0c00 	bfi	ip, r0, #0, #1
   18758:	f360 0700 	bfi	r7, r0, #0, #1
   1875c:	f360 0600 	bfi	r6, r0, #0, #1
   18760:	f360 0500 	bfi	r5, r0, #0, #1
   18764:	f360 0400 	bfi	r4, r0, #0, #1
   18768:	f360 0100 	bfi	r1, r0, #0, #1
   1876c:	f360 0200 	bfi	r2, r0, #0, #1
   18770:	f883 c000 	strb.w	ip, [r3]
   18774:	f883 7028 	strb.w	r7, [r3, #40]	; 0x28
   18778:	f883 6078 	strb.w	r6, [r3, #120]	; 0x78
   1877c:	f883 50a0 	strb.w	r5, [r3, #160]	; 0xa0
   18780:	f883 40c8 	strb.w	r4, [r3, #200]	; 0xc8
   18784:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
   18788:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
}
   1878c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1878e:	200c      	movs	r0, #12
}
   18790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18792:	bf00      	nop
   18794:	20008808 	.word	0x20008808
   18798:	20009c42 	.word	0x20009c42

0001879c <ll_rl_enable>:
{
   1879c:	b510      	push	{r4, lr}
   1879e:	4604      	mov	r4, r0
		(IS_ENABLED(CONFIG_BT_OBSERVER) && ull_scan_is_enabled(0)))
   187a0:	2000      	movs	r0, #0
   187a2:	f7fc f99f 	bl	14ae4 <ull_scan_is_enabled>
	if (!rl_access_check(false)) {
   187a6:	b958      	cbnz	r0, 187c0 <ll_rl_enable+0x24>
	switch (enable) {
   187a8:	b134      	cbz	r4, 187b8 <ll_rl_enable+0x1c>
   187aa:	2c01      	cmp	r4, #1
   187ac:	d001      	beq.n	187b2 <ll_rl_enable+0x16>
   187ae:	2012      	movs	r0, #18
}
   187b0:	bd10      	pop	{r4, pc}
		rl_enable = 1U;
   187b2:	4b04      	ldr	r3, [pc, #16]	; (187c4 <ll_rl_enable+0x28>)
   187b4:	701c      	strb	r4, [r3, #0]
}
   187b6:	bd10      	pop	{r4, pc}
		rl_enable = 0U;
   187b8:	4b02      	ldr	r3, [pc, #8]	; (187c4 <ll_rl_enable+0x28>)
   187ba:	701c      	strb	r4, [r3, #0]
	return 0;
   187bc:	4620      	mov	r0, r4
}
   187be:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   187c0:	200c      	movs	r0, #12
}
   187c2:	bd10      	pop	{r4, pc}
   187c4:	20009c43 	.word	0x20009c43

000187c8 <ll_rl_timeout_set>:
	rpa_timeout_ms = timeout * 1000U;
   187c8:	4a03      	ldr	r2, [pc, #12]	; (187d8 <ll_rl_timeout_set+0x10>)
   187ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   187ce:	fb03 f300 	mul.w	r3, r3, r0
   187d2:	6013      	str	r3, [r2, #0]
}
   187d4:	4770      	bx	lr
   187d6:	bf00      	nop
   187d8:	2000897c 	.word	0x2000897c

000187dc <ull_filter_adv_scan_state_cb>:
	if (bm) {
   187dc:	b1b0      	cbz	r0, 1880c <ull_filter_adv_scan_state_cb+0x30>
	k_delayed_work_submit(&rpa_work, K_MSEC(rpa_timeout_ms));
   187de:	4b0d      	ldr	r3, [pc, #52]	; (18814 <ull_filter_adv_scan_state_cb+0x38>)
   187e0:	681a      	ldr	r2, [r3, #0]
{
   187e2:	b510      	push	{r4, lr}
   187e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   187e8:	f240 30e7 	movw	r0, #999	; 0x3e7
   187ec:	2100      	movs	r1, #0
   187ee:	fbe3 0102 	umlal	r0, r1, r3, r2
   187f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   187f6:	2300      	movs	r3, #0
   187f8:	f7e8 f920 	bl	a3c <__aeabi_uldivmod>
}
   187fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   18800:	4602      	mov	r2, r0
   18802:	460b      	mov	r3, r1
   18804:	4804      	ldr	r0, [pc, #16]	; (18818 <ull_filter_adv_scan_state_cb+0x3c>)
   18806:	4905      	ldr	r1, [pc, #20]	; (1881c <ull_filter_adv_scan_state_cb+0x40>)
   18808:	f005 b8f4 	b.w	1d9f4 <k_delayed_work_submit_to_queue>
	k_delayed_work_cancel(&rpa_work);
   1880c:	4803      	ldr	r0, [pc, #12]	; (1881c <ull_filter_adv_scan_state_cb+0x40>)
   1880e:	f00a bc7b 	b.w	23108 <k_delayed_work_cancel>
   18812:	bf00      	nop
   18814:	2000897c 	.word	0x2000897c
   18818:	20001c30 	.word	0x20001c30
   1881c:	20001b00 	.word	0x20001b00

00018820 <ull_filter_scan_update>:
{
   18820:	b508      	push	{r3, lr}
}

static void filter_clear(struct lll_filter *filter)
{
	filter->enable_bitmask = 0;
   18822:	4b09      	ldr	r3, [pc, #36]	; (18848 <ull_filter_scan_update+0x28>)
   18824:	2200      	movs	r2, #0
   18826:	801a      	strh	r2, [r3, #0]
	if ((scan_fp & 0x1) &&
   18828:	07c3      	lsls	r3, r0, #31
   1882a:	d406      	bmi.n	1883a <ull_filter_scan_update+0x1a>
	if (rl_enable &&
   1882c:	4b07      	ldr	r3, [pc, #28]	; (1884c <ull_filter_scan_update+0x2c>)
	filter->enable_bitmask = 0;
   1882e:	4a08      	ldr	r2, [pc, #32]	; (18850 <ull_filter_scan_update+0x30>)
	if (rl_enable &&
   18830:	781b      	ldrb	r3, [r3, #0]
	filter->enable_bitmask = 0;
   18832:	2100      	movs	r1, #0
   18834:	8011      	strh	r1, [r2, #0]
	if (rl_enable &&
   18836:	b91b      	cbnz	r3, 18840 <ull_filter_scan_update+0x20>
}
   18838:	bd08      	pop	{r3, pc}
		wl_update();
   1883a:	f7ff fe41 	bl	184c0 <wl_update>
   1883e:	e7f5      	b.n	1882c <ull_filter_scan_update+0xc>
}
   18840:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		rl_update();
   18844:	f7ff be8a 	b.w	1855c <rl_update>
   18848:	200089c0 	.word	0x200089c0
   1884c:	20009c43 	.word	0x20009c43
   18850:	20008948 	.word	0x20008948

00018854 <ull_filter_rpa_update>:
{
   18854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18858:	4606      	mov	r6, r0
   1885a:	b087      	sub	sp, #28
	return z_impl_k_uptime_ticks();
   1885c:	f00a fcad 	bl	231ba <z_impl_k_uptime_ticks>
   18860:	0142      	lsls	r2, r0, #5
   18862:	014b      	lsls	r3, r1, #5
   18864:	ebb2 0800 	subs.w	r8, r2, r0
   18868:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
   1886c:	eb63 0301 	sbc.w	r3, r3, r1
   18870:	009b      	lsls	r3, r3, #2
   18872:	ea4f 0288 	mov.w	r2, r8, lsl #2
   18876:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
   1887a:	eb12 0800 	adds.w	r8, r2, r0
   1887e:	eb43 0101 	adc.w	r1, r3, r1
   18882:	00c9      	lsls	r1, r1, #3
   18884:	ea41 7158 	orr.w	r1, r1, r8, lsr #29
   18888:	ea4f 03c8 	mov.w	r3, r8, lsl #3
   1888c:	ea4f 38d3 	mov.w	r8, r3, lsr #15
   18890:	0bc8      	lsrs	r0, r1, #15
   18892:	ea48 4841 	orr.w	r8, r8, r1, lsl #17
   18896:	9001      	str	r0, [sp, #4]
	bool all = timeout || (rpa_last_ms == -1) ||
   18898:	b9be      	cbnz	r6, 188ca <ull_filter_rpa_update+0x76>
   1889a:	4b4b      	ldr	r3, [pc, #300]	; (189c8 <ull_filter_rpa_update+0x174>)
   1889c:	e9d3 2300 	ldrd	r2, r3, [r3]
   188a0:	1c5c      	adds	r4, r3, #1
   188a2:	bf08      	it	eq
   188a4:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   188a8:	d00f      	beq.n	188ca <ull_filter_rpa_update+0x76>
		   (now - rpa_last_ms >= rpa_timeout_ms);
   188aa:	4948      	ldr	r1, [pc, #288]	; (189cc <ull_filter_rpa_update+0x178>)
   188ac:	6809      	ldr	r1, [r1, #0]
   188ae:	ebb8 0402 	subs.w	r4, r8, r2
   188b2:	eb60 0503 	sbc.w	r5, r0, r3
   188b6:	2300      	movs	r3, #0
	bool all = timeout || (rpa_last_ms == -1) ||
   188b8:	428c      	cmp	r4, r1
   188ba:	eb75 0303 	sbcs.w	r3, r5, r3
   188be:	bfac      	ite	ge
   188c0:	f04f 0901 	movge.w	r9, #1
   188c4:	f04f 0900 	movlt.w	r9, #0
   188c8:	e001      	b.n	188ce <ull_filter_rpa_update+0x7a>
   188ca:	f04f 0901 	mov.w	r9, #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   188ce:	4e40      	ldr	r6, [pc, #256]	; (189d0 <ull_filter_rpa_update+0x17c>)
				LL_ASSERT(!err);
   188d0:	f8df b10c 	ldr.w	fp, [pc, #268]	; 189e0 <ull_filter_rpa_update+0x18c>
   188d4:	f8df a10c 	ldr.w	sl, [pc, #268]	; 189e4 <ull_filter_rpa_update+0x190>
   188d8:	f1a6 0724 	sub.w	r7, r6, #36	; 0x24
	bool all = timeout || (rpa_last_ms == -1) ||
   188dc:	2400      	movs	r4, #0
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   188de:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   188e2:	00a5      	lsls	r5, r4, #2
   188e4:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   188e8:	07d8      	lsls	r0, r3, #31
   188ea:	d515      	bpl.n	18918 <ull_filter_rpa_update+0xc4>
   188ec:	f1b9 0f00 	cmp.w	r9, #0
   188f0:	d101      	bne.n	188f6 <ull_filter_rpa_update+0xa2>
   188f2:	0799      	lsls	r1, r3, #30
   188f4:	d410      	bmi.n	18918 <ull_filter_rpa_update+0xc4>
			if (rl[i].pirk) {
   188f6:	192b      	adds	r3, r5, r4
   188f8:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   188fc:	075a      	lsls	r2, r3, #29
   188fe:	d431      	bmi.n	18964 <ull_filter_rpa_update+0x110>
			if (rl[i].lirk) {
   18900:	192b      	adds	r3, r5, r4
   18902:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   18906:	071b      	lsls	r3, r3, #28
   18908:	d416      	bmi.n	18938 <ull_filter_rpa_update+0xe4>
			rl[i].rpas_ready = 1U;
   1890a:	4425      	add	r5, r4
   1890c:	f817 3035 	ldrb.w	r3, [r7, r5, lsl #3]
   18910:	f043 0302 	orr.w	r3, r3, #2
   18914:	f807 3035 	strb.w	r3, [r7, r5, lsl #3]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   18918:	3401      	adds	r4, #1
   1891a:	2c08      	cmp	r4, #8
   1891c:	f106 0628 	add.w	r6, r6, #40	; 0x28
   18920:	d1dd      	bne.n	188de <ull_filter_rpa_update+0x8a>
	if (all) {
   18922:	f1b9 0f00 	cmp.w	r9, #0
   18926:	d004      	beq.n	18932 <ull_filter_rpa_update+0xde>
		rpa_last_ms = now;
   18928:	4b27      	ldr	r3, [pc, #156]	; (189c8 <ull_filter_rpa_update+0x174>)
   1892a:	9a01      	ldr	r2, [sp, #4]
   1892c:	f8c3 8000 	str.w	r8, [r3]
   18930:	605a      	str	r2, [r3, #4]
}
   18932:	b007      	add	sp, #28
   18934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				err = bt_rpa_create(rl[i].local_irk, &rpa);
   18938:	a902      	add	r1, sp, #8
   1893a:	f1a6 001d 	sub.w	r0, r6, #29
   1893e:	f007 fb1d 	bl	1ff7c <bt_rpa_create>
				LL_ASSERT(!err);
   18942:	2800      	cmp	r0, #0
   18944:	d132      	bne.n	189ac <ull_filter_rpa_update+0x158>
				rl[i].local_rpa = &rpa;
   18946:	4a23      	ldr	r2, [pc, #140]	; (189d4 <ull_filter_rpa_update+0x180>)
   18948:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1894c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
	memcpy(dst, src, sizeof(*dst));
   18950:	a902      	add	r1, sp, #8
   18952:	4618      	mov	r0, r3
   18954:	2206      	movs	r2, #6
   18956:	6031      	str	r1, [r6, #0]
   18958:	9300      	str	r3, [sp, #0]
   1895a:	f007 fa8c 	bl	1fe76 <memcpy>
				rl[i].local_rpa = &local_rpas[i];
   1895e:	9b00      	ldr	r3, [sp, #0]
   18960:	6033      	str	r3, [r6, #0]
   18962:	e7d2      	b.n	1890a <ull_filter_rpa_update+0xb6>
	psrc += length - 1;
   18964:	f816 3c0d 	ldrb.w	r3, [r6, #-13]
   18968:	4a1b      	ldr	r2, [pc, #108]	; (189d8 <ull_filter_rpa_update+0x184>)
   1896a:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   1896e:	320f      	adds	r2, #15
	for (; length > 0; length--) {
   18970:	f10d 0307 	add.w	r3, sp, #7
   18974:	f10d 0017 	add.w	r0, sp, #23
		*pdst++ = *psrc--;
   18978:	f812 1901 	ldrb.w	r1, [r2], #-1
   1897c:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
   18980:	4283      	cmp	r3, r0
   18982:	d1f9      	bne.n	18978 <ull_filter_rpa_update+0x124>
				err = bt_rpa_create(irk, &rl[i].peer_rpa);
   18984:	1fb1      	subs	r1, r6, #6
   18986:	a802      	add	r0, sp, #8
   18988:	f007 faf8 	bl	1ff7c <bt_rpa_create>
				LL_ASSERT(!err);
   1898c:	2800      	cmp	r0, #0
   1898e:	d0b7      	beq.n	18900 <ull_filter_rpa_update+0xac>
   18990:	4812      	ldr	r0, [pc, #72]	; (189dc <ull_filter_rpa_update+0x188>)
   18992:	f44f 7305 	mov.w	r3, #532	; 0x214
   18996:	465a      	mov	r2, fp
   18998:	4651      	mov	r1, sl
   1899a:	f005 fada 	bl	1df52 <printk>
   1899e:	4040      	eors	r0, r0
   189a0:	f380 8811 	msr	BASEPRI, r0
   189a4:	f04f 0003 	mov.w	r0, #3
   189a8:	df02      	svc	2
   189aa:	e7a9      	b.n	18900 <ull_filter_rpa_update+0xac>
				LL_ASSERT(!err);
   189ac:	480b      	ldr	r0, [pc, #44]	; (189dc <ull_filter_rpa_update+0x188>)
   189ae:	f240 2321 	movw	r3, #545	; 0x221
   189b2:	465a      	mov	r2, fp
   189b4:	4651      	mov	r1, sl
   189b6:	f005 facc 	bl	1df52 <printk>
   189ba:	4040      	eors	r0, r0
   189bc:	f380 8811 	msr	BASEPRI, r0
   189c0:	f04f 0003 	mov.w	r0, #3
   189c4:	df02      	svc	2
   189c6:	e7be      	b.n	18946 <ull_filter_rpa_update+0xf2>
   189c8:	20001af8 	.word	0x20001af8
   189cc:	2000897c 	.word	0x2000897c
   189d0:	2000882c 	.word	0x2000882c
   189d4:	20008750 	.word	0x20008750
   189d8:	20008788 	.word	0x20008788
   189dc:	00023ff4 	.word	0x00023ff4
   189e0:	000246dc 	.word	0x000246dc
   189e4:	000242a4 	.word	0x000242a4

000189e8 <rpa_timeout>:
{
   189e8:	b510      	push	{r4, lr}
	ull_filter_rpa_update(true);
   189ea:	2001      	movs	r0, #1
   189ec:	f7ff ff32 	bl	18854 <ull_filter_rpa_update>
	k_delayed_work_submit(&rpa_work, K_MSEC(rpa_timeout_ms));
   189f0:	4b0a      	ldr	r3, [pc, #40]	; (18a1c <rpa_timeout+0x34>)
   189f2:	681a      	ldr	r2, [r3, #0]
   189f4:	f240 30e7 	movw	r0, #999	; 0x3e7
   189f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   189fc:	2100      	movs	r1, #0
   189fe:	fbe3 0102 	umlal	r0, r1, r3, r2
   18a02:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   18a06:	2300      	movs	r3, #0
   18a08:	f7e8 f818 	bl	a3c <__aeabi_uldivmod>
}
   18a0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   18a10:	4602      	mov	r2, r0
   18a12:	460b      	mov	r3, r1
   18a14:	4802      	ldr	r0, [pc, #8]	; (18a20 <rpa_timeout+0x38>)
   18a16:	4903      	ldr	r1, [pc, #12]	; (18a24 <rpa_timeout+0x3c>)
   18a18:	f004 bfec 	b.w	1d9f4 <k_delayed_work_submit_to_queue>
   18a1c:	2000897c 	.word	0x2000897c
   18a20:	20001c30 	.word	0x20001c30
   18a24:	20001b00 	.word	0x20001b00

00018a28 <ull_filter_rl_find>:
{
   18a28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18a2c:	468b      	mov	fp, r1
	if (free) {
   18a2e:	4616      	mov	r6, r2
   18a30:	b10a      	cbz	r2, 18a36 <ull_filter_rl_find+0xe>
		*free = FILTER_IDX_NONE;
   18a32:	23ff      	movs	r3, #255	; 0xff
   18a34:	7013      	strb	r3, [r2, #0]
   18a36:	f8df 8064 	ldr.w	r8, [pc, #100]	; 18a9c <ull_filter_rl_find+0x74>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   18a3a:	f000 0901 	and.w	r9, r0, #1
   18a3e:	f108 0a01 	add.w	sl, r8, #1
{
   18a42:	2400      	movs	r4, #0
   18a44:	e004      	b.n	18a50 <ull_filter_rl_find+0x28>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   18a46:	454a      	cmp	r2, r9
   18a48:	d019      	beq.n	18a7e <ull_filter_rl_find+0x56>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   18a4a:	3401      	adds	r4, #1
   18a4c:	2c08      	cmp	r4, #8
   18a4e:	d012      	beq.n	18a76 <ull_filter_rl_find+0x4e>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   18a50:	eb04 0584 	add.w	r5, r4, r4, lsl #2
   18a54:	00e8      	lsls	r0, r5, #3
   18a56:	f818 3035 	ldrb.w	r3, [r8, r5, lsl #3]
   18a5a:	07d9      	lsls	r1, r3, #31
   18a5c:	f3c3 1280 	ubfx	r2, r3, #6, #1
   18a60:	b2e7      	uxtb	r7, r4
   18a62:	d4f0      	bmi.n	18a46 <ull_filter_rl_find+0x1e>
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   18a64:	2e00      	cmp	r6, #0
   18a66:	d0f0      	beq.n	18a4a <ull_filter_rl_find+0x22>
   18a68:	7833      	ldrb	r3, [r6, #0]
   18a6a:	3401      	adds	r4, #1
   18a6c:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   18a6e:	bf08      	it	eq
   18a70:	7037      	strbeq	r7, [r6, #0]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   18a72:	2c08      	cmp	r4, #8
   18a74:	d1ec      	bne.n	18a50 <ull_filter_rl_find+0x28>
	return FILTER_IDX_NONE;
   18a76:	27ff      	movs	r7, #255	; 0xff
}
   18a78:	4638      	mov	r0, r7
   18a7a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   18a7e:	4450      	add	r0, sl
   18a80:	2206      	movs	r2, #6
   18a82:	4659      	mov	r1, fp
   18a84:	f007 f9e7 	bl	1fe56 <memcmp>
   18a88:	2800      	cmp	r0, #0
   18a8a:	d0f5      	beq.n	18a78 <ull_filter_rl_find+0x50>
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   18a8c:	2e00      	cmp	r6, #0
   18a8e:	d0dc      	beq.n	18a4a <ull_filter_rl_find+0x22>
   18a90:	f818 3035 	ldrb.w	r3, [r8, r5, lsl #3]
   18a94:	07db      	lsls	r3, r3, #31
   18a96:	d4d8      	bmi.n	18a4a <ull_filter_rl_find+0x22>
   18a98:	e7e6      	b.n	18a68 <ull_filter_rl_find+0x40>
   18a9a:	bf00      	nop
   18a9c:	20008808 	.word	0x20008808

00018aa0 <ll_wl_add>:
{
   18aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18aa4:	4605      	mov	r5, r0
   18aa6:	b082      	sub	sp, #8
	if (ull_scan_filter_pol_get(0) & 0x1) {
   18aa8:	2000      	movs	r0, #0
   18aaa:	f7fc f833 	bl	14b14 <ull_scan_filter_pol_get>
   18aae:	f010 0401 	ands.w	r4, r0, #1
   18ab2:	d13a      	bne.n	18b2a <ll_wl_add+0x8a>
	if (addr->type == ADDR_TYPE_ANON) {
   18ab4:	7828      	ldrb	r0, [r5, #0]
   18ab6:	28ff      	cmp	r0, #255	; 0xff
   18ab8:	d030      	beq.n	18b1c <ll_wl_add+0x7c>
	i = wl_find(id_addr->type, id_addr->a.val, &j);
   18aba:	f105 0801 	add.w	r8, r5, #1
   18abe:	4641      	mov	r1, r8
   18ac0:	f10d 0207 	add.w	r2, sp, #7
   18ac4:	f7ff fcc4 	bl	18450 <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   18ac8:	2807      	cmp	r0, #7
   18aca:	d923      	bls.n	18b14 <ll_wl_add+0x74>
	} else if (j >= ARRAY_SIZE(wl)) {
   18acc:	f89d 6007 	ldrb.w	r6, [sp, #7]
   18ad0:	2e07      	cmp	r6, #7
   18ad2:	d83b      	bhi.n	18b4c <ll_wl_add+0xac>
	wl[i].id_addr_type = id_addr->type & 0x1;
   18ad4:	4f1f      	ldr	r7, [pc, #124]	; (18b54 <ll_wl_add+0xb4>)
   18ad6:	782a      	ldrb	r2, [r5, #0]
   18ad8:	f817 3036 	ldrb.w	r3, [r7, r6, lsl #3]
	bt_addr_copy(&wl[i].id_addr, &id_addr->a);
   18adc:	eb07 00c6 	add.w	r0, r7, r6, lsl #3
	wl[i].id_addr_type = id_addr->type & 0x1;
   18ae0:	f362 0341 	bfi	r3, r2, #1, #1
   18ae4:	4641      	mov	r1, r8
   18ae6:	2206      	movs	r2, #6
   18ae8:	3002      	adds	r0, #2
   18aea:	f807 3036 	strb.w	r3, [r7, r6, lsl #3]
   18aee:	f007 f9c2 	bl	1fe76 <memcpy>
	j = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   18af2:	7828      	ldrb	r0, [r5, #0]
   18af4:	4622      	mov	r2, r4
   18af6:	4641      	mov	r1, r8
   18af8:	f7ff ff96 	bl	18a28 <ull_filter_rl_find>
	if (j < ARRAY_SIZE(rl)) {
   18afc:	2807      	cmp	r0, #7
   18afe:	d918      	bls.n	18b32 <ll_wl_add+0x92>
		wl[i].rl_idx = FILTER_IDX_NONE;
   18b00:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
   18b04:	22ff      	movs	r2, #255	; 0xff
   18b06:	705a      	strb	r2, [r3, #1]
	wl[i].taken = 1U;
   18b08:	f817 3036 	ldrb.w	r3, [r7, r6, lsl #3]
   18b0c:	f043 0301 	orr.w	r3, r3, #1
   18b10:	f807 3036 	strb.w	r3, [r7, r6, lsl #3]
	return 0;
   18b14:	2000      	movs	r0, #0
}
   18b16:	b002      	add	sp, #8
   18b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		wl_anon = 1U;
   18b1c:	4b0e      	ldr	r3, [pc, #56]	; (18b58 <ll_wl_add+0xb8>)
   18b1e:	2201      	movs	r2, #1
		return 0;
   18b20:	4620      	mov	r0, r4
		wl_anon = 1U;
   18b22:	701a      	strb	r2, [r3, #0]
}
   18b24:	b002      	add	sp, #8
   18b26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   18b2a:	200c      	movs	r0, #12
}
   18b2c:	b002      	add	sp, #8
   18b2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rl[j].wl = 1U;
   18b32:	490a      	ldr	r1, [pc, #40]	; (18b5c <ll_wl_add+0xbc>)
   18b34:	eb00 0480 	add.w	r4, r0, r0, lsl #2
		wl[i].rl_idx = j;
   18b38:	eb07 02c6 	add.w	r2, r7, r6, lsl #3
		rl[j].wl = 1U;
   18b3c:	f811 3034 	ldrb.w	r3, [r1, r4, lsl #3]
		wl[i].rl_idx = j;
   18b40:	7050      	strb	r0, [r2, #1]
		rl[j].wl = 1U;
   18b42:	f043 0320 	orr.w	r3, r3, #32
   18b46:	f801 3034 	strb.w	r3, [r1, r4, lsl #3]
   18b4a:	e7dd      	b.n	18b08 <ll_wl_add+0x68>
   18b4c:	2007      	movs	r0, #7
}
   18b4e:	b002      	add	sp, #8
   18b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18b54:	20008980 	.word	0x20008980
   18b58:	20009c44 	.word	0x20009c44
   18b5c:	20008808 	.word	0x20008808

00018b60 <ll_rl_add>:
{
   18b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18b64:	4606      	mov	r6, r0
   18b66:	b085      	sub	sp, #20
		(IS_ENABLED(CONFIG_BT_OBSERVER) && ull_scan_is_enabled(0)))
   18b68:	2000      	movs	r0, #0
{
   18b6a:	460d      	mov	r5, r1
   18b6c:	4690      	mov	r8, r2
		(IS_ENABLED(CONFIG_BT_OBSERVER) && ull_scan_is_enabled(0)))
   18b6e:	f7fb ffb9 	bl	14ae4 <ull_scan_is_enabled>
	if (!rl_access_check(false)) {
   18b72:	2800      	cmp	r0, #0
   18b74:	f040 8085 	bne.w	18c82 <ll_rl_add+0x122>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, &j);
   18b78:	46b1      	mov	r9, r6
   18b7a:	f10d 020f 	add.w	r2, sp, #15
   18b7e:	f819 0b01 	ldrb.w	r0, [r9], #1
   18b82:	4649      	mov	r1, r9
   18b84:	f7ff ff50 	bl	18a28 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   18b88:	2807      	cmp	r0, #7
   18b8a:	f240 808b 	bls.w	18ca4 <ll_rl_add+0x144>
	} else if (j >= ARRAY_SIZE(rl)) {
   18b8e:	f89d 700f 	ldrb.w	r7, [sp, #15]
   18b92:	2f07      	cmp	r7, #7
   18b94:	d879      	bhi.n	18c8a <ll_rl_add+0x12a>
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   18b96:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   18b9a:	4c4c      	ldr	r4, [pc, #304]	; (18ccc <ll_rl_add+0x16c>)
   18b9c:	00db      	lsls	r3, r3, #3
   18b9e:	1c58      	adds	r0, r3, #1
	rl[i].id_addr_type = id_addr->type & 0x1;
   18ba0:	eb07 0a87 	add.w	sl, r7, r7, lsl #2
   18ba4:	2206      	movs	r2, #6
   18ba6:	4649      	mov	r1, r9
   18ba8:	4420      	add	r0, r4
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   18baa:	9301      	str	r3, [sp, #4]
   18bac:	f007 f963 	bl	1fe76 <memcpy>
	rl[i].id_addr_type = id_addr->type & 0x1;
   18bb0:	7831      	ldrb	r1, [r6, #0]
   18bb2:	f814 203a 	ldrb.w	r2, [r4, sl, lsl #3]
   18bb6:	ea4f 0bca 	mov.w	fp, sl, lsl #3
   18bba:	f361 1286 	bfi	r2, r1, #6, #1
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   18bbe:	4628      	mov	r0, r5
   18bc0:	2110      	movs	r1, #16
	rl[i].id_addr_type = id_addr->type & 0x1;
   18bc2:	f804 200b 	strb.w	r2, [r4, fp]
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   18bc6:	f7f7 fa73 	bl	100b0 <mem_nz>
   18bca:	f814 200b 	ldrb.w	r2, [r4, fp]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   18bce:	2110      	movs	r1, #16
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   18bd0:	f360 0282 	bfi	r2, r0, #2, #1
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   18bd4:	4640      	mov	r0, r8
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   18bd6:	f804 200b 	strb.w	r2, [r4, fp]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   18bda:	f7f7 fa69 	bl	100b0 <mem_nz>
   18bde:	f814 200b 	ldrb.w	r2, [r4, fp]
	if (rl[i].pirk) {
   18be2:	9b01      	ldr	r3, [sp, #4]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   18be4:	f000 0001 	and.w	r0, r0, #1
   18be8:	f360 02c3 	bfi	r2, r0, #3, #1
	if (rl[i].pirk) {
   18bec:	f012 0f04 	tst.w	r2, #4
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   18bf0:	f804 200b 	strb.w	r2, [r4, fp]
	rl[i].id_addr_type = id_addr->type & 0x1;
   18bf4:	eb04 0aca 	add.w	sl, r4, sl, lsl #3
   18bf8:	ea4f 0b87 	mov.w	fp, r7, lsl #2
	if (rl[i].pirk) {
   18bfc:	d01a      	beq.n	18c34 <ll_rl_add+0xd4>
		rl[i].pirk_idx = peer_irk_count;
   18bfe:	f8df e0d8 	ldr.w	lr, [pc, #216]	; 18cd8 <ll_rl_add+0x178>
		peer_irk_rl_ids[peer_irk_count] = i;
   18c02:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 18cdc <ll_rl_add+0x17c>
		rl[i].pirk_idx = peer_irk_count;
   18c06:	f89e 1000 	ldrb.w	r1, [lr]
   18c0a:	4a31      	ldr	r2, [pc, #196]	; (18cd0 <ll_rl_add+0x170>)
		peer_irk_rl_ids[peer_irk_count] = i;
   18c0c:	f80c 7001 	strb.w	r7, [ip, r1]
		rl[i].pirk_idx = peer_irk_count;
   18c10:	f88a 1017 	strb.w	r1, [sl, #23]
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, IRK_SIZE);
   18c14:	eb02 1c01 	add.w	ip, r2, r1, lsl #4
   18c18:	3101      	adds	r1, #1
	psrc += length - 1;
   18c1a:	f105 020f 	add.w	r2, r5, #15
   18c1e:	f88e 1000 	strb.w	r1, [lr]
	for (; length > 0; length--) {
   18c22:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   18c26:	3d01      	subs	r5, #1
		*pdst++ = *psrc--;
   18c28:	f812 1901 	ldrb.w	r1, [r2], #-1
   18c2c:	f80c 1f01 	strb.w	r1, [ip, #1]!
	for (; length > 0; length--) {
   18c30:	42aa      	cmp	r2, r5
   18c32:	d1f9      	bne.n	18c28 <ll_rl_add+0xc8>
	if (rl[i].lirk) {
   18c34:	2800      	cmp	r0, #0
   18c36:	d139      	bne.n	18cac <ll_rl_add+0x14c>
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
   18c38:	f103 0018 	add.w	r0, r3, #24
   18c3c:	2206      	movs	r2, #6
   18c3e:	2100      	movs	r1, #0
   18c40:	4420      	add	r0, r4
   18c42:	f007 f943 	bl	1fecc <memset>
	rl[i].dev = 0U;
   18c46:	eb0b 0307 	add.w	r3, fp, r7
   18c4a:	00dd      	lsls	r5, r3, #3
	rl[i].rpas_ready = 0U;
   18c4c:	f814 3033 	ldrb.w	r3, [r4, r3, lsl #3]
   18c50:	f023 0312 	bic.w	r3, r3, #18
   18c54:	5563      	strb	r3, [r4, r5]
	j = wl_find(id_addr->type, id_addr->a.val, NULL);
   18c56:	4649      	mov	r1, r9
   18c58:	7830      	ldrb	r0, [r6, #0]
   18c5a:	2200      	movs	r2, #0
   18c5c:	f7ff fbf8 	bl	18450 <wl_find>
	if (j < ARRAY_SIZE(wl)) {
   18c60:	2807      	cmp	r0, #7
   18c62:	d916      	bls.n	18c92 <ll_rl_add+0x132>
		rl[i].wl = 0U;
   18c64:	5d63      	ldrb	r3, [r4, r5]
   18c66:	f36f 1345 	bfc	r3, #5, #1
   18c6a:	5563      	strb	r3, [r4, r5]
	rl[i].taken = 1U;
   18c6c:	445f      	add	r7, fp
	return 0;
   18c6e:	2000      	movs	r0, #0
	rl[i].taken = 1U;
   18c70:	f814 3037 	ldrb.w	r3, [r4, r7, lsl #3]
   18c74:	f043 0301 	orr.w	r3, r3, #1
   18c78:	f804 3037 	strb.w	r3, [r4, r7, lsl #3]
}
   18c7c:	b005      	add	sp, #20
   18c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   18c82:	200c      	movs	r0, #12
}
   18c84:	b005      	add	sp, #20
   18c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   18c8a:	2007      	movs	r0, #7
}
   18c8c:	b005      	add	sp, #20
   18c8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		wl[j].rl_idx = i;
   18c92:	4a10      	ldr	r2, [pc, #64]	; (18cd4 <ll_rl_add+0x174>)
		rl[i].wl = 1U;
   18c94:	5d63      	ldrb	r3, [r4, r5]
		wl[j].rl_idx = i;
   18c96:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
		rl[i].wl = 1U;
   18c9a:	f043 0320 	orr.w	r3, r3, #32
   18c9e:	5563      	strb	r3, [r4, r5]
		wl[j].rl_idx = i;
   18ca0:	7047      	strb	r7, [r0, #1]
		rl[i].wl = 1U;
   18ca2:	e7e3      	b.n	18c6c <ll_rl_add+0x10c>
		return BT_HCI_ERR_INVALID_PARAM;
   18ca4:	2012      	movs	r0, #18
}
   18ca6:	b005      	add	sp, #20
   18ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memcpy(rl[i].local_irk, lirk, IRK_SIZE);
   18cac:	1dd8      	adds	r0, r3, #7
   18cae:	4641      	mov	r1, r8
   18cb0:	2210      	movs	r2, #16
   18cb2:	4420      	add	r0, r4
   18cb4:	9301      	str	r3, [sp, #4]
   18cb6:	f007 f8de 	bl	1fe76 <memcpy>
		rl[i].local_rpa = NULL;
   18cba:	eb0b 0207 	add.w	r2, fp, r7
   18cbe:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
   18cc2:	2100      	movs	r1, #0
   18cc4:	9b01      	ldr	r3, [sp, #4]
   18cc6:	6251      	str	r1, [r2, #36]	; 0x24
   18cc8:	e7b6      	b.n	18c38 <ll_rl_add+0xd8>
   18cca:	bf00      	nop
   18ccc:	20008808 	.word	0x20008808
   18cd0:	20008788 	.word	0x20008788
   18cd4:	20008980 	.word	0x20008980
   18cd8:	20009c42 	.word	0x20009c42
   18cdc:	20008780 	.word	0x20008780

00018ce0 <ll_rl_remove>:
{
   18ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18ce4:	4606      	mov	r6, r0
   18ce6:	b083      	sub	sp, #12
		(IS_ENABLED(CONFIG_BT_OBSERVER) && ull_scan_is_enabled(0)))
   18ce8:	2000      	movs	r0, #0
   18cea:	f7fb fefb 	bl	14ae4 <ull_scan_is_enabled>
	if (!rl_access_check(false)) {
   18cee:	2800      	cmp	r0, #0
   18cf0:	d13e      	bne.n	18d70 <ll_rl_remove+0x90>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   18cf2:	4637      	mov	r7, r6
   18cf4:	4602      	mov	r2, r0
   18cf6:	4604      	mov	r4, r0
   18cf8:	f817 0b01 	ldrb.w	r0, [r7], #1
   18cfc:	4639      	mov	r1, r7
   18cfe:	f7ff fe93 	bl	18a28 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   18d02:	2807      	cmp	r0, #7
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   18d04:	4605      	mov	r5, r0
	if (i < ARRAY_SIZE(rl)) {
   18d06:	d903      	bls.n	18d10 <ll_rl_remove+0x30>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   18d08:	2002      	movs	r0, #2
}
   18d0a:	b003      	add	sp, #12
   18d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (rl[i].pirk) {
   18d10:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 18dd8 <ll_rl_remove+0xf8>
   18d14:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   18d18:	eb08 01c3 	add.w	r1, r8, r3, lsl #3
   18d1c:	f818 3033 	ldrb.w	r3, [r8, r3, lsl #3]
   18d20:	075b      	lsls	r3, r3, #29
   18d22:	ea4f 0980 	mov.w	r9, r0, lsl #2
   18d26:	d50c      	bpl.n	18d42 <ll_rl_remove+0x62>
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   18d28:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 18ddc <ll_rl_remove+0xfc>
   18d2c:	f89a 2000 	ldrb.w	r2, [sl]
   18d30:	3a01      	subs	r2, #1
			if (pj && pi != pj) {
   18d32:	f012 0bff 	ands.w	fp, r2, #255	; 0xff
   18d36:	d01f      	beq.n	18d78 <ll_rl_remove+0x98>
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   18d38:	7dcb      	ldrb	r3, [r1, #23]
			if (pj && pi != pj) {
   18d3a:	455b      	cmp	r3, fp
   18d3c:	d11e      	bne.n	18d7c <ll_rl_remove+0x9c>
			peer_irk_count--;
   18d3e:	f88a 2000 	strb.w	r2, [sl]
		j = wl_find(id_addr->type, id_addr->a.val, NULL);
   18d42:	7830      	ldrb	r0, [r6, #0]
   18d44:	4639      	mov	r1, r7
   18d46:	2200      	movs	r2, #0
   18d48:	f7ff fb82 	bl	18450 <wl_find>
		if (j < ARRAY_SIZE(wl)) {
   18d4c:	2807      	cmp	r0, #7
   18d4e:	d804      	bhi.n	18d5a <ll_rl_remove+0x7a>
			wl[j].rl_idx = FILTER_IDX_NONE;
   18d50:	4b1e      	ldr	r3, [pc, #120]	; (18dcc <ll_rl_remove+0xec>)
   18d52:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   18d56:	23ff      	movs	r3, #255	; 0xff
   18d58:	7043      	strb	r3, [r0, #1]
		rl[i].taken = 0U;
   18d5a:	444d      	add	r5, r9
		return 0;
   18d5c:	2000      	movs	r0, #0
		rl[i].taken = 0U;
   18d5e:	f818 3035 	ldrb.w	r3, [r8, r5, lsl #3]
   18d62:	f36f 0300 	bfc	r3, #0, #1
   18d66:	f808 3035 	strb.w	r3, [r8, r5, lsl #3]
}
   18d6a:	b003      	add	sp, #12
   18d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   18d70:	200c      	movs	r0, #12
}
   18d72:	b003      	add	sp, #12
   18d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18d78:	465a      	mov	r2, fp
   18d7a:	e7e0      	b.n	18d3e <ll_rl_remove+0x5e>
				memcpy(peer_irks[pi], peer_irks[pj], IRK_SIZE);
   18d7c:	4814      	ldr	r0, [pc, #80]	; (18dd0 <ll_rl_remove+0xf0>)
   18d7e:	9301      	str	r3, [sp, #4]
   18d80:	eb00 110b 	add.w	r1, r0, fp, lsl #4
   18d84:	2210      	movs	r2, #16
   18d86:	eb00 1003 	add.w	r0, r0, r3, lsl #4
   18d8a:	f007 f874 	bl	1fe76 <memcpy>
   18d8e:	9b01      	ldr	r3, [sp, #4]
					if (rl[k].taken && rl[k].pirk &&
   18d90:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   18d94:	eb08 01c2 	add.w	r1, r8, r2, lsl #3
   18d98:	f818 2032 	ldrb.w	r2, [r8, r2, lsl #3]
   18d9c:	f012 0f01 	tst.w	r2, #1
   18da0:	b2e0      	uxtb	r0, r4
   18da2:	f104 0401 	add.w	r4, r4, #1
   18da6:	d004      	beq.n	18db2 <ll_rl_remove+0xd2>
   18da8:	0752      	lsls	r2, r2, #29
   18daa:	d502      	bpl.n	18db2 <ll_rl_remove+0xd2>
   18dac:	7dca      	ldrb	r2, [r1, #23]
   18dae:	455a      	cmp	r2, fp
   18db0:	d005      	beq.n	18dbe <ll_rl_remove+0xde>
				for (k = 0U;
   18db2:	2c08      	cmp	r4, #8
   18db4:	d1ec      	bne.n	18d90 <ll_rl_remove+0xb0>
   18db6:	f89a 2000 	ldrb.w	r2, [sl]
   18dba:	3a01      	subs	r2, #1
   18dbc:	e7bf      	b.n	18d3e <ll_rl_remove+0x5e>
						peer_irk_rl_ids[pi] = k;
   18dbe:	4c05      	ldr	r4, [pc, #20]	; (18dd4 <ll_rl_remove+0xf4>)
   18dc0:	f89a 2000 	ldrb.w	r2, [sl]
   18dc4:	54e0      	strb	r0, [r4, r3]
						rl[k].pirk_idx = pi;
   18dc6:	75cb      	strb	r3, [r1, #23]
						break;
   18dc8:	3a01      	subs	r2, #1
   18dca:	e7b8      	b.n	18d3e <ll_rl_remove+0x5e>
   18dcc:	20008980 	.word	0x20008980
   18dd0:	20008788 	.word	0x20008788
   18dd4:	20008780 	.word	0x20008780
   18dd8:	20008808 	.word	0x20008808
   18ddc:	20009c42 	.word	0x20009c42

00018de0 <ll_rl_crpa_set>:
{
   18de0:	b538      	push	{r3, r4, r5, lr}
   18de2:	461c      	mov	r4, r3
	if ((crpa[5] & 0xc0) == 0x40) {
   18de4:	795b      	ldrb	r3, [r3, #5]
   18de6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   18dea:	2b40      	cmp	r3, #64	; 0x40
   18dec:	d000      	beq.n	18df0 <ll_rl_crpa_set+0x10>
}
   18dee:	bd38      	pop	{r3, r4, r5, pc}
		if (id_addr) {
   18df0:	b119      	cbz	r1, 18dfa <ll_rl_crpa_set+0x1a>
			rl_idx = ull_filter_rl_find(id_addr_type, id_addr, NULL);
   18df2:	2200      	movs	r2, #0
   18df4:	f7ff fe18 	bl	18a28 <ull_filter_rl_find>
   18df8:	4602      	mov	r2, r0
		if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].taken) {
   18dfa:	2a07      	cmp	r2, #7
   18dfc:	d8f7      	bhi.n	18dee <ll_rl_crpa_set+0xe>
   18dfe:	4b09      	ldr	r3, [pc, #36]	; (18e24 <ll_rl_crpa_set+0x44>)
   18e00:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   18e04:	f813 1031 	ldrb.w	r1, [r3, r1, lsl #3]
   18e08:	07c9      	lsls	r1, r1, #31
   18e0a:	d5f0      	bpl.n	18dee <ll_rl_crpa_set+0xe>
			memcpy(rl[rl_idx].curr_rpa.val, crpa,
   18e0c:	2118      	movs	r1, #24
   18e0e:	2028      	movs	r0, #40	; 0x28
   18e10:	fb10 1002 	smlabb	r0, r0, r2, r1
   18e14:	4418      	add	r0, r3
   18e16:	4621      	mov	r1, r4
   18e18:	2206      	movs	r2, #6
}
   18e1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			memcpy(rl[rl_idx].curr_rpa.val, crpa,
   18e1e:	f007 b82a 	b.w	1fe76 <memcpy>
   18e22:	bf00      	nop
   18e24:	20008808 	.word	0x20008808

00018e28 <ll_rl_crpa_get>:
{
   18e28:	b538      	push	{r3, r4, r5, lr}
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   18e2a:	4603      	mov	r3, r0
{
   18e2c:	460d      	mov	r5, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   18e2e:	f813 0b01 	ldrb.w	r0, [r3], #1
   18e32:	2200      	movs	r2, #0
   18e34:	4619      	mov	r1, r3
   18e36:	f7ff fdf7 	bl	18a28 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl) &&
   18e3a:	2807      	cmp	r0, #7
   18e3c:	d901      	bls.n	18e42 <ll_rl_crpa_get+0x1a>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   18e3e:	2002      	movs	r0, #2
}
   18e40:	bd38      	pop	{r3, r4, r5, pc}
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
   18e42:	4c09      	ldr	r4, [pc, #36]	; (18e68 <ll_rl_crpa_get+0x40>)
   18e44:	2328      	movs	r3, #40	; 0x28
   18e46:	2218      	movs	r2, #24
   18e48:	fb13 2000 	smlabb	r0, r3, r0, r2
   18e4c:	4404      	add	r4, r0
   18e4e:	4620      	mov	r0, r4
   18e50:	2106      	movs	r1, #6
   18e52:	f7f7 f92d 	bl	100b0 <mem_nz>
	if (i < ARRAY_SIZE(rl) &&
   18e56:	2800      	cmp	r0, #0
   18e58:	d0f1      	beq.n	18e3e <ll_rl_crpa_get+0x16>
   18e5a:	4621      	mov	r1, r4
   18e5c:	4628      	mov	r0, r5
   18e5e:	2206      	movs	r2, #6
   18e60:	f007 f809 	bl	1fe76 <memcpy>
		return 0;
   18e64:	2000      	movs	r0, #0
}
   18e66:	bd38      	pop	{r3, r4, r5, pc}
   18e68:	20008808 	.word	0x20008808

00018e6c <ll_rl_lrpa_get>:
{
   18e6c:	b510      	push	{r4, lr}
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   18e6e:	4603      	mov	r3, r0
{
   18e70:	460c      	mov	r4, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   18e72:	f813 0b01 	ldrb.w	r0, [r3], #1
   18e76:	2200      	movs	r2, #0
   18e78:	4619      	mov	r1, r3
   18e7a:	f7ff fdd5 	bl	18a28 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   18e7e:	2807      	cmp	r0, #7
   18e80:	d901      	bls.n	18e86 <ll_rl_lrpa_get+0x1a>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   18e82:	2002      	movs	r0, #2
}
   18e84:	bd10      	pop	{r4, pc}
		bt_addr_copy(lrpa, rl[i].local_rpa);
   18e86:	4b06      	ldr	r3, [pc, #24]	; (18ea0 <ll_rl_lrpa_get+0x34>)
   18e88:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   18e8c:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
   18e90:	2206      	movs	r2, #6
   18e92:	6a59      	ldr	r1, [r3, #36]	; 0x24
   18e94:	4620      	mov	r0, r4
   18e96:	f006 ffee 	bl	1fe76 <memcpy>
		return 0;
   18e9a:	2000      	movs	r0, #0
}
   18e9c:	bd10      	pop	{r4, pc}
   18e9e:	bf00      	nop
   18ea0:	20008808 	.word	0x20008808

00018ea4 <ll_priv_mode_set>:
{
   18ea4:	b570      	push	{r4, r5, r6, lr}
   18ea6:	4605      	mov	r5, r0
		(IS_ENABLED(CONFIG_BT_OBSERVER) && ull_scan_is_enabled(0)))
   18ea8:	2000      	movs	r0, #0
{
   18eaa:	460e      	mov	r6, r1
		(IS_ENABLED(CONFIG_BT_OBSERVER) && ull_scan_is_enabled(0)))
   18eac:	f7fb fe1a 	bl	14ae4 <ull_scan_is_enabled>
	if (!rl_access_check(false)) {
   18eb0:	b968      	cbnz	r0, 18ece <ll_priv_mode_set+0x2a>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   18eb2:	4629      	mov	r1, r5
   18eb4:	4602      	mov	r2, r0
   18eb6:	4604      	mov	r4, r0
   18eb8:	f811 0b01 	ldrb.w	r0, [r1], #1
   18ebc:	f7ff fdb4 	bl	18a28 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   18ec0:	2807      	cmp	r0, #7
   18ec2:	d81c      	bhi.n	18efe <ll_priv_mode_set+0x5a>
		switch (mode) {
   18ec4:	b186      	cbz	r6, 18ee8 <ll_priv_mode_set+0x44>
   18ec6:	2e01      	cmp	r6, #1
   18ec8:	d003      	beq.n	18ed2 <ll_priv_mode_set+0x2e>
   18eca:	2012      	movs	r0, #18
}
   18ecc:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   18ece:	200c      	movs	r0, #12
}
   18ed0:	bd70      	pop	{r4, r5, r6, pc}
			rl[i].dev = 1U;
   18ed2:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   18ed6:	490b      	ldr	r1, [pc, #44]	; (18f04 <ll_priv_mode_set+0x60>)
   18ed8:	f811 2033 	ldrb.w	r2, [r1, r3, lsl #3]
   18edc:	f042 0210 	orr.w	r2, r2, #16
   18ee0:	f801 2033 	strb.w	r2, [r1, r3, lsl #3]
	return 0;
   18ee4:	4620      	mov	r0, r4
}
   18ee6:	bd70      	pop	{r4, r5, r6, pc}
			rl[i].dev = 0U;
   18ee8:	4b06      	ldr	r3, [pc, #24]	; (18f04 <ll_priv_mode_set+0x60>)
   18eea:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   18eee:	f813 2030 	ldrb.w	r2, [r3, r0, lsl #3]
   18ef2:	f366 1204 	bfi	r2, r6, #4, #1
   18ef6:	f803 2030 	strb.w	r2, [r3, r0, lsl #3]
	return 0;
   18efa:	4630      	mov	r0, r6
}
   18efc:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   18efe:	2002      	movs	r0, #2
}
   18f00:	bd70      	pop	{r4, r5, r6, pc}
   18f02:	bf00      	nop
   18f04:	20008808 	.word	0x20008808

00018f08 <ull_filter_reset>:
	wl_anon = 0U;
   18f08:	4a31      	ldr	r2, [pc, #196]	; (18fd0 <ull_filter_reset+0xc8>)
   18f0a:	4932      	ldr	r1, [pc, #200]	; (18fd4 <ull_filter_reset+0xcc>)
{
   18f0c:	b4f0      	push	{r4, r5, r6, r7}
	wl_anon = 0U;
   18f0e:	2300      	movs	r3, #0
   18f10:	4c31      	ldr	r4, [pc, #196]	; (18fd8 <ull_filter_reset+0xd0>)
   18f12:	7013      	strb	r3, [r2, #0]
		uint8_t j = wl[i].rl_idx;
   18f14:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   18f18:	7852      	ldrb	r2, [r2, #1]
		if (j < ARRAY_SIZE(rl)) {
   18f1a:	2a07      	cmp	r2, #7
			rl[j].wl = 0U;
   18f1c:	eb02 0582 	add.w	r5, r2, r2, lsl #2
		if (j < ARRAY_SIZE(rl)) {
   18f20:	d805      	bhi.n	18f2e <ull_filter_reset+0x26>
			rl[j].wl = 0U;
   18f22:	f811 2035 	ldrb.w	r2, [r1, r5, lsl #3]
   18f26:	f36f 1245 	bfc	r2, #5, #1
   18f2a:	f801 2035 	strb.w	r2, [r1, r5, lsl #3]
		wl[i].taken = 0U;
   18f2e:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   18f32:	f36f 0200 	bfc	r2, #0, #1
   18f36:	f804 2033 	strb.w	r2, [r4, r3, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   18f3a:	3301      	adds	r3, #1
   18f3c:	2b08      	cmp	r3, #8
   18f3e:	d1e9      	bne.n	18f14 <ull_filter_reset+0xc>
		rl[i].taken = 0U;
   18f40:	780f      	ldrb	r7, [r1, #0]
   18f42:	f891 5028 	ldrb.w	r5, [r1, #40]	; 0x28
   18f46:	f891 4050 	ldrb.w	r4, [r1, #80]	; 0x50
   18f4a:	f891 2078 	ldrb.w	r2, [r1, #120]	; 0x78
   18f4e:	f891 60a0 	ldrb.w	r6, [r1, #160]	; 0xa0
	rl_enable = 0U;
   18f52:	2300      	movs	r3, #0
		rl[i].taken = 0U;
   18f54:	f363 0700 	bfi	r7, r3, #0, #1
   18f58:	700f      	strb	r7, [r1, #0]
	rl_enable = 0U;
   18f5a:	4f20      	ldr	r7, [pc, #128]	; (18fdc <ull_filter_reset+0xd4>)
		rl[i].taken = 0U;
   18f5c:	f363 0500 	bfi	r5, r3, #0, #1
   18f60:	f363 0400 	bfi	r4, r3, #0, #1
   18f64:	f363 0200 	bfi	r2, r3, #0, #1
	rl_enable = 0U;
   18f68:	703b      	strb	r3, [r7, #0]
		rl[i].taken = 0U;
   18f6a:	f881 5028 	strb.w	r5, [r1, #40]	; 0x28
	peer_irk_count = 0U;
   18f6e:	4f1c      	ldr	r7, [pc, #112]	; (18fe0 <ull_filter_reset+0xd8>)
		rl[i].taken = 0U;
   18f70:	f891 50c8 	ldrb.w	r5, [r1, #200]	; 0xc8
   18f74:	f881 4050 	strb.w	r4, [r1, #80]	; 0x50
   18f78:	f881 2078 	strb.w	r2, [r1, #120]	; 0x78
   18f7c:	f891 40f0 	ldrb.w	r4, [r1, #240]	; 0xf0
   18f80:	f891 2118 	ldrb.w	r2, [r1, #280]	; 0x118
	peer_irk_count = 0U;
   18f84:	703b      	strb	r3, [r7, #0]
		rl[i].taken = 0U;
   18f86:	f363 0600 	bfi	r6, r3, #0, #1
   18f8a:	f363 0500 	bfi	r5, r3, #0, #1
   18f8e:	f363 0400 	bfi	r4, r3, #0, #1
   18f92:	f363 0200 	bfi	r2, r3, #0, #1
   18f96:	f881 60a0 	strb.w	r6, [r1, #160]	; 0xa0
	rpa_last_ms = -1;
   18f9a:	4b12      	ldr	r3, [pc, #72]	; (18fe4 <ull_filter_reset+0xdc>)
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   18f9c:	4e12      	ldr	r6, [pc, #72]	; (18fe8 <ull_filter_reset+0xe0>)
   18f9e:	4f13      	ldr	r7, [pc, #76]	; (18fec <ull_filter_reset+0xe4>)
		rl[i].taken = 0U;
   18fa0:	f881 50c8 	strb.w	r5, [r1, #200]	; 0xc8
   18fa4:	f881 40f0 	strb.w	r4, [r1, #240]	; 0xf0
	rpa_last_ms = -1;
   18fa8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   18fac:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   18fb0:	e9c3 4500 	strd	r4, r5, [r3]
		rl[i].taken = 0U;
   18fb4:	f881 2118 	strb.w	r2, [r1, #280]	; 0x118
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   18fb8:	6037      	str	r7, [r6, #0]
	if (init) {
   18fba:	b120      	cbz	r0, 18fc6 <ull_filter_reset+0xbe>
}
   18fbc:	bcf0      	pop	{r4, r5, r6, r7}
		k_delayed_work_init(&rpa_work, rpa_timeout);
   18fbe:	490c      	ldr	r1, [pc, #48]	; (18ff0 <ull_filter_reset+0xe8>)
   18fc0:	480c      	ldr	r0, [pc, #48]	; (18ff4 <ull_filter_reset+0xec>)
   18fc2:	f00a b899 	b.w	230f8 <k_delayed_work_init>
}
   18fc6:	bcf0      	pop	{r4, r5, r6, r7}
		k_delayed_work_cancel(&rpa_work);
   18fc8:	480a      	ldr	r0, [pc, #40]	; (18ff4 <ull_filter_reset+0xec>)
   18fca:	f00a b89d 	b.w	23108 <k_delayed_work_cancel>
   18fce:	bf00      	nop
   18fd0:	20009c44 	.word	0x20009c44
   18fd4:	20008808 	.word	0x20008808
   18fd8:	20008980 	.word	0x20008980
   18fdc:	20009c43 	.word	0x20009c43
   18fe0:	20009c42 	.word	0x20009c42
   18fe4:	20001af8 	.word	0x20001af8
   18fe8:	2000897c 	.word	0x2000897c
   18fec:	000dbba0 	.word	0x000dbba0
   18ff0:	000189e9 	.word	0x000189e9
   18ff4:	20001b00 	.word	0x20001b00

00018ff8 <ull_filter_lll_lrpa_get>:
	if ((rl_idx >= ARRAY_SIZE(rl)) || !rl[rl_idx].lirk ||
   18ff8:	2807      	cmp	r0, #7
   18ffa:	d80d      	bhi.n	19018 <ull_filter_lll_lrpa_get+0x20>
   18ffc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   19000:	4906      	ldr	r1, [pc, #24]	; (1901c <ull_filter_lll_lrpa_get+0x24>)
   19002:	f811 3030 	ldrb.w	r3, [r1, r0, lsl #3]
   19006:	071a      	lsls	r2, r3, #28
   19008:	ea4f 00c0 	mov.w	r0, r0, lsl #3
   1900c:	d504      	bpl.n	19018 <ull_filter_lll_lrpa_get+0x20>
   1900e:	079b      	lsls	r3, r3, #30
   19010:	d502      	bpl.n	19018 <ull_filter_lll_lrpa_get+0x20>
	return rl[rl_idx].local_rpa;
   19012:	4408      	add	r0, r1
   19014:	6a40      	ldr	r0, [r0, #36]	; 0x24
   19016:	4770      	bx	lr
		return NULL;
   19018:	2000      	movs	r0, #0
   1901a:	4770      	bx	lr
   1901c:	20008808 	.word	0x20008808

00019020 <ull_filter_lll_irks_get>:
	*count = peer_irk_count;
   19020:	4b02      	ldr	r3, [pc, #8]	; (1902c <ull_filter_lll_irks_get+0xc>)
   19022:	781b      	ldrb	r3, [r3, #0]
   19024:	7003      	strb	r3, [r0, #0]
}
   19026:	4802      	ldr	r0, [pc, #8]	; (19030 <ull_filter_lll_irks_get+0x10>)
   19028:	4770      	bx	lr
   1902a:	bf00      	nop
   1902c:	20009c42 	.word	0x20009c42
   19030:	20008788 	.word	0x20008788

00019034 <ull_filter_lll_rl_idx>:
{
   19034:	b538      	push	{r3, r4, r5, lr}
   19036:	460c      	mov	r4, r1
	if (whitelist) {
   19038:	b150      	cbz	r0, 19050 <ull_filter_lll_rl_idx+0x1c>
		LL_ASSERT(devmatch_id < ARRAY_SIZE(wl));
   1903a:	2907      	cmp	r1, #7
   1903c:	d822      	bhi.n	19084 <ull_filter_lll_rl_idx+0x50>
		LL_ASSERT(wl[devmatch_id].taken);
   1903e:	4d2a      	ldr	r5, [pc, #168]	; (190e8 <ull_filter_lll_rl_idx+0xb4>)
   19040:	f815 3034 	ldrb.w	r3, [r5, r4, lsl #3]
   19044:	07da      	lsls	r2, r3, #31
   19046:	d52f      	bpl.n	190a8 <ull_filter_lll_rl_idx+0x74>
		i = wl[devmatch_id].rl_idx;
   19048:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
   1904c:	7860      	ldrb	r0, [r4, #1]
}
   1904e:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
   19050:	2907      	cmp	r1, #7
   19052:	d83a      	bhi.n	190ca <ull_filter_lll_rl_idx+0x96>
		LL_ASSERT(rl[i].taken);
   19054:	4b25      	ldr	r3, [pc, #148]	; (190ec <ull_filter_lll_rl_idx+0xb8>)
   19056:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1905a:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
   1905e:	07db      	lsls	r3, r3, #31
   19060:	d501      	bpl.n	19066 <ull_filter_lll_rl_idx+0x32>
   19062:	4620      	mov	r0, r4
}
   19064:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(rl[i].taken);
   19066:	4a22      	ldr	r2, [pc, #136]	; (190f0 <ull_filter_lll_rl_idx+0xbc>)
   19068:	4922      	ldr	r1, [pc, #136]	; (190f4 <ull_filter_lll_rl_idx+0xc0>)
   1906a:	4823      	ldr	r0, [pc, #140]	; (190f8 <ull_filter_lll_rl_idx+0xc4>)
   1906c:	f240 23bb 	movw	r3, #699	; 0x2bb
   19070:	f004 ff6f 	bl	1df52 <printk>
   19074:	4040      	eors	r0, r0
   19076:	f380 8811 	msr	BASEPRI, r0
   1907a:	f04f 0003 	mov.w	r0, #3
   1907e:	df02      	svc	2
   19080:	4620      	mov	r0, r4
}
   19082:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(devmatch_id < ARRAY_SIZE(wl));
   19084:	4a1a      	ldr	r2, [pc, #104]	; (190f0 <ull_filter_lll_rl_idx+0xbc>)
   19086:	491d      	ldr	r1, [pc, #116]	; (190fc <ull_filter_lll_rl_idx+0xc8>)
   19088:	481b      	ldr	r0, [pc, #108]	; (190f8 <ull_filter_lll_rl_idx+0xc4>)
   1908a:	f240 23b5 	movw	r3, #693	; 0x2b5
   1908e:	f004 ff60 	bl	1df52 <printk>
   19092:	4040      	eors	r0, r0
   19094:	f380 8811 	msr	BASEPRI, r0
   19098:	f04f 0003 	mov.w	r0, #3
   1909c:	df02      	svc	2
		LL_ASSERT(wl[devmatch_id].taken);
   1909e:	4d12      	ldr	r5, [pc, #72]	; (190e8 <ull_filter_lll_rl_idx+0xb4>)
   190a0:	f815 3034 	ldrb.w	r3, [r5, r4, lsl #3]
   190a4:	07da      	lsls	r2, r3, #31
   190a6:	d4cf      	bmi.n	19048 <ull_filter_lll_rl_idx+0x14>
   190a8:	4a11      	ldr	r2, [pc, #68]	; (190f0 <ull_filter_lll_rl_idx+0xbc>)
   190aa:	4915      	ldr	r1, [pc, #84]	; (19100 <ull_filter_lll_rl_idx+0xcc>)
   190ac:	4812      	ldr	r0, [pc, #72]	; (190f8 <ull_filter_lll_rl_idx+0xc4>)
   190ae:	f240 23b6 	movw	r3, #694	; 0x2b6
   190b2:	f004 ff4e 	bl	1df52 <printk>
   190b6:	4040      	eors	r0, r0
   190b8:	f380 8811 	msr	BASEPRI, r0
   190bc:	f04f 0003 	mov.w	r0, #3
   190c0:	df02      	svc	2
		i = wl[devmatch_id].rl_idx;
   190c2:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
   190c6:	7860      	ldrb	r0, [r4, #1]
   190c8:	e7c1      	b.n	1904e <ull_filter_lll_rl_idx+0x1a>
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
   190ca:	4a09      	ldr	r2, [pc, #36]	; (190f0 <ull_filter_lll_rl_idx+0xbc>)
   190cc:	490d      	ldr	r1, [pc, #52]	; (19104 <ull_filter_lll_rl_idx+0xd0>)
   190ce:	480a      	ldr	r0, [pc, #40]	; (190f8 <ull_filter_lll_rl_idx+0xc4>)
   190d0:	f240 23b9 	movw	r3, #697	; 0x2b9
   190d4:	f004 ff3d 	bl	1df52 <printk>
   190d8:	4040      	eors	r0, r0
   190da:	f380 8811 	msr	BASEPRI, r0
   190de:	f04f 0003 	mov.w	r0, #3
   190e2:	df02      	svc	2
   190e4:	e7b6      	b.n	19054 <ull_filter_lll_rl_idx+0x20>
   190e6:	bf00      	nop
   190e8:	20008980 	.word	0x20008980
   190ec:	20008808 	.word	0x20008808
   190f0:	000246dc 	.word	0x000246dc
   190f4:	000248a0 	.word	0x000248a0
   190f8:	00023ff4 	.word	0x00023ff4
   190fc:	00024740 	.word	0x00024740
   19100:	000247e4 	.word	0x000247e4
   19104:	000247fc 	.word	0x000247fc

00019108 <ull_filter_lll_rl_irk_idx>:
{
   19108:	b510      	push	{r4, lr}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   1910a:	4b20      	ldr	r3, [pc, #128]	; (1918c <ull_filter_lll_rl_irk_idx+0x84>)
   1910c:	781b      	ldrb	r3, [r3, #0]
   1910e:	4283      	cmp	r3, r0
{
   19110:	4604      	mov	r4, r0
	LL_ASSERT(irkmatch_id < peer_irk_count);
   19112:	d90c      	bls.n	1912e <ull_filter_lll_rl_irk_idx+0x26>
	i = peer_irk_rl_ids[irkmatch_id];
   19114:	4b1e      	ldr	r3, [pc, #120]	; (19190 <ull_filter_lll_rl_irk_idx+0x88>)
   19116:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   19118:	2c07      	cmp	r4, #7
   1911a:	d819      	bhi.n	19150 <ull_filter_lll_rl_irk_idx+0x48>
	LL_ASSERT(rl[i].taken);
   1911c:	4b1d      	ldr	r3, [pc, #116]	; (19194 <ull_filter_lll_rl_irk_idx+0x8c>)
   1911e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   19122:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
   19126:	07db      	lsls	r3, r3, #31
   19128:	d520      	bpl.n	1916c <ull_filter_lll_rl_irk_idx+0x64>
}
   1912a:	4620      	mov	r0, r4
   1912c:	bd10      	pop	{r4, pc}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   1912e:	4a1a      	ldr	r2, [pc, #104]	; (19198 <ull_filter_lll_rl_irk_idx+0x90>)
   19130:	491a      	ldr	r1, [pc, #104]	; (1919c <ull_filter_lll_rl_irk_idx+0x94>)
   19132:	481b      	ldr	r0, [pc, #108]	; (191a0 <ull_filter_lll_rl_irk_idx+0x98>)
   19134:	f240 23c5 	movw	r3, #709	; 0x2c5
   19138:	f004 ff0b 	bl	1df52 <printk>
   1913c:	4040      	eors	r0, r0
   1913e:	f380 8811 	msr	BASEPRI, r0
   19142:	f04f 0003 	mov.w	r0, #3
   19146:	df02      	svc	2
	i = peer_irk_rl_ids[irkmatch_id];
   19148:	4b11      	ldr	r3, [pc, #68]	; (19190 <ull_filter_lll_rl_irk_idx+0x88>)
   1914a:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   1914c:	2c07      	cmp	r4, #7
   1914e:	d9e5      	bls.n	1911c <ull_filter_lll_rl_irk_idx+0x14>
   19150:	4a11      	ldr	r2, [pc, #68]	; (19198 <ull_filter_lll_rl_irk_idx+0x90>)
   19152:	4914      	ldr	r1, [pc, #80]	; (191a4 <ull_filter_lll_rl_irk_idx+0x9c>)
   19154:	4812      	ldr	r0, [pc, #72]	; (191a0 <ull_filter_lll_rl_irk_idx+0x98>)
   19156:	f240 23c7 	movw	r3, #711	; 0x2c7
   1915a:	f004 fefa 	bl	1df52 <printk>
   1915e:	4040      	eors	r0, r0
   19160:	f380 8811 	msr	BASEPRI, r0
   19164:	f04f 0003 	mov.w	r0, #3
   19168:	df02      	svc	2
   1916a:	e7d7      	b.n	1911c <ull_filter_lll_rl_irk_idx+0x14>
	LL_ASSERT(rl[i].taken);
   1916c:	4a0a      	ldr	r2, [pc, #40]	; (19198 <ull_filter_lll_rl_irk_idx+0x90>)
   1916e:	490e      	ldr	r1, [pc, #56]	; (191a8 <ull_filter_lll_rl_irk_idx+0xa0>)
   19170:	480b      	ldr	r0, [pc, #44]	; (191a0 <ull_filter_lll_rl_irk_idx+0x98>)
   19172:	f44f 7332 	mov.w	r3, #712	; 0x2c8
   19176:	f004 feec 	bl	1df52 <printk>
   1917a:	4040      	eors	r0, r0
   1917c:	f380 8811 	msr	BASEPRI, r0
   19180:	f04f 0003 	mov.w	r0, #3
   19184:	df02      	svc	2
}
   19186:	4620      	mov	r0, r4
   19188:	bd10      	pop	{r4, pc}
   1918a:	bf00      	nop
   1918c:	20009c42 	.word	0x20009c42
   19190:	20008780 	.word	0x20008780
   19194:	20008808 	.word	0x20008808
   19198:	000246dc 	.word	0x000246dc
   1919c:	000248ac 	.word	0x000248ac
   191a0:	00023ff4 	.word	0x00023ff4
   191a4:	000248cc 	.word	0x000248cc
   191a8:	000248a0 	.word	0x000248a0

000191ac <ull_filter_lll_irk_whitelisted>:
	if (rl_idx >= ARRAY_SIZE(rl)) {
   191ac:	2807      	cmp	r0, #7
   191ae:	d823      	bhi.n	191f8 <ull_filter_lll_irk_whitelisted+0x4c>
{
   191b0:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(rl[rl_idx].taken);
   191b2:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   191b6:	4e11      	ldr	r6, [pc, #68]	; (191fc <ull_filter_lll_irk_whitelisted+0x50>)
   191b8:	f816 3033 	ldrb.w	r3, [r6, r3, lsl #3]
   191bc:	07db      	lsls	r3, r3, #31
   191be:	4604      	mov	r4, r0
   191c0:	ea4f 0580 	mov.w	r5, r0, lsl #2
   191c4:	d505      	bpl.n	191d2 <ull_filter_lll_irk_whitelisted+0x26>
	return rl[rl_idx].wl;
   191c6:	442c      	add	r4, r5
   191c8:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   191cc:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   191d0:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(rl[rl_idx].taken);
   191d2:	4a0b      	ldr	r2, [pc, #44]	; (19200 <ull_filter_lll_irk_whitelisted+0x54>)
   191d4:	490b      	ldr	r1, [pc, #44]	; (19204 <ull_filter_lll_irk_whitelisted+0x58>)
   191d6:	480c      	ldr	r0, [pc, #48]	; (19208 <ull_filter_lll_irk_whitelisted+0x5c>)
   191d8:	f240 23d3 	movw	r3, #723	; 0x2d3
   191dc:	f004 feb9 	bl	1df52 <printk>
   191e0:	4040      	eors	r0, r0
   191e2:	f380 8811 	msr	BASEPRI, r0
   191e6:	f04f 0003 	mov.w	r0, #3
   191ea:	df02      	svc	2
	return rl[rl_idx].wl;
   191ec:	442c      	add	r4, r5
   191ee:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   191f2:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   191f6:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   191f8:	2000      	movs	r0, #0
}
   191fa:	4770      	bx	lr
   191fc:	20008808 	.word	0x20008808
   19200:	000246dc 	.word	0x000246dc
   19204:	0002472c 	.word	0x0002472c
   19208:	00023ff4 	.word	0x00023ff4

0001920c <ull_filter_lll_get>:
		return &wl_filter;
   1920c:	4a03      	ldr	r2, [pc, #12]	; (1921c <ull_filter_lll_get+0x10>)
   1920e:	4b04      	ldr	r3, [pc, #16]	; (19220 <ull_filter_lll_get+0x14>)
}
   19210:	2800      	cmp	r0, #0
   19212:	bf0c      	ite	eq
   19214:	4610      	moveq	r0, r2
   19216:	4618      	movne	r0, r3
   19218:	4770      	bx	lr
   1921a:	bf00      	nop
   1921c:	20008948 	.word	0x20008948
   19220:	200089c0 	.word	0x200089c0

00019224 <ull_filter_lll_rl_idx_allowed>:
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || irkmatch_ok) {
   19224:	4b14      	ldr	r3, [pc, #80]	; (19278 <ull_filter_lll_rl_idx_allowed+0x54>)
   19226:	781b      	ldrb	r3, [r3, #0]
   19228:	b19b      	cbz	r3, 19252 <ull_filter_lll_rl_idx_allowed+0x2e>
   1922a:	2907      	cmp	r1, #7
{
   1922c:	b570      	push	{r4, r5, r6, lr}
   1922e:	460c      	mov	r4, r1
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || irkmatch_ok) {
   19230:	d80d      	bhi.n	1924e <ull_filter_lll_rl_idx_allowed+0x2a>
   19232:	b960      	cbnz	r0, 1924e <ull_filter_lll_rl_idx_allowed+0x2a>
	LL_ASSERT(rl[rl_idx].taken);
   19234:	4e11      	ldr	r6, [pc, #68]	; (1927c <ull_filter_lll_rl_idx_allowed+0x58>)
   19236:	eb01 0381 	add.w	r3, r1, r1, lsl #2
   1923a:	008d      	lsls	r5, r1, #2
   1923c:	f816 3033 	ldrb.w	r3, [r6, r3, lsl #3]
   19240:	07da      	lsls	r2, r3, #31
   19242:	d50b      	bpl.n	1925c <ull_filter_lll_rl_idx_allowed+0x38>
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
   19244:	442c      	add	r4, r5
   19246:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   1924a:	0743      	lsls	r3, r0, #29
   1924c:	d403      	bmi.n	19256 <ull_filter_lll_rl_idx_allowed+0x32>
		return true;
   1924e:	2001      	movs	r0, #1
}
   19250:	bd70      	pop	{r4, r5, r6, pc}
		return true;
   19252:	2001      	movs	r0, #1
}
   19254:	4770      	bx	lr
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
   19256:	f3c0 1000 	ubfx	r0, r0, #4, #1
}
   1925a:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(rl[rl_idx].taken);
   1925c:	4a08      	ldr	r2, [pc, #32]	; (19280 <ull_filter_lll_rl_idx_allowed+0x5c>)
   1925e:	4909      	ldr	r1, [pc, #36]	; (19284 <ull_filter_lll_rl_idx_allowed+0x60>)
   19260:	4809      	ldr	r0, [pc, #36]	; (19288 <ull_filter_lll_rl_idx_allowed+0x64>)
   19262:	f240 23fb 	movw	r3, #763	; 0x2fb
   19266:	f004 fe74 	bl	1df52 <printk>
   1926a:	4040      	eors	r0, r0
   1926c:	f380 8811 	msr	BASEPRI, r0
   19270:	f04f 0003 	mov.w	r0, #3
   19274:	df02      	svc	2
   19276:	e7e5      	b.n	19244 <ull_filter_lll_rl_idx_allowed+0x20>
   19278:	20009c43 	.word	0x20009c43
   1927c:	20008808 	.word	0x20008808
   19280:	000246dc 	.word	0x000246dc
   19284:	0002472c 	.word	0x0002472c
   19288:	00023ff4 	.word	0x00023ff4

0001928c <ull_filter_lll_rl_addr_resolve>:
{
   1928c:	b430      	push	{r4, r5}
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || !rl[rl_idx].lirk) {
   1928e:	4b0e      	ldr	r3, [pc, #56]	; (192c8 <ull_filter_lll_rl_addr_resolve+0x3c>)
   19290:	781c      	ldrb	r4, [r3, #0]
   19292:	b174      	cbz	r4, 192b2 <ull_filter_lll_rl_addr_resolve+0x26>
   19294:	2a07      	cmp	r2, #7
   19296:	d80c      	bhi.n	192b2 <ull_filter_lll_rl_addr_resolve+0x26>
   19298:	4c0c      	ldr	r4, [pc, #48]	; (192cc <ull_filter_lll_rl_addr_resolve+0x40>)
   1929a:	eb02 0582 	add.w	r5, r2, r2, lsl #2
   1929e:	f814 5035 	ldrb.w	r5, [r4, r5, lsl #3]
   192a2:	072b      	lsls	r3, r5, #28
   192a4:	d505      	bpl.n	192b2 <ull_filter_lll_rl_addr_resolve+0x26>
	if ((id_addr_type != 0U) && ((id_addr[5] & 0xc0) == 0x40)) {
   192a6:	b120      	cbz	r0, 192b2 <ull_filter_lll_rl_addr_resolve+0x26>
   192a8:	794b      	ldrb	r3, [r1, #5]
   192aa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   192ae:	2b40      	cmp	r3, #64	; 0x40
   192b0:	d002      	beq.n	192b8 <ull_filter_lll_rl_addr_resolve+0x2c>
}
   192b2:	2000      	movs	r0, #0
   192b4:	bc30      	pop	{r4, r5}
   192b6:	4770      	bx	lr
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   192b8:	2028      	movs	r0, #40	; 0x28
   192ba:	fb00 4002 	mla	r0, r0, r2, r4
   192be:	3007      	adds	r0, #7
}
   192c0:	bc30      	pop	{r4, r5}
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   192c2:	f006 be48 	b.w	1ff56 <bt_rpa_irk_matches>
   192c6:	bf00      	nop
   192c8:	20009c43 	.word	0x20009c43
   192cc:	20008808 	.word	0x20008808

000192d0 <ull_filter_lll_rl_enabled>:
	return rl_enable;
   192d0:	4b02      	ldr	r3, [pc, #8]	; (192dc <ull_filter_lll_rl_enabled+0xc>)
   192d2:	7818      	ldrb	r0, [r3, #0]
}
   192d4:	3800      	subs	r0, #0
   192d6:	bf18      	it	ne
   192d8:	2001      	movne	r0, #1
   192da:	4770      	bx	lr
   192dc:	20009c43 	.word	0x20009c43

000192e0 <radio_nrf5_isr>:
static void mfy_ticker_job_idle_get(void *param);
static void ticker_op_job_disable(uint32_t status, void *op_context);
#endif
#endif /* CONFIG_BT_CTLR_LOW_LAT */

ISR_DIRECT_DECLARE(radio_nrf5_isr)
   192e0:	4668      	mov	r0, sp
   192e2:	f020 0107 	bic.w	r1, r0, #7
   192e6:	468d      	mov	sp, r1
   192e8:	b501      	push	{r0, lr}
{
	DEBUG_RADIO_ISR(1);

	isr_radio();
   192ea:	f001 fd43 	bl	1ad74 <isr_radio>

	ISR_DIRECT_PM();
   192ee:	f7ee f921 	bl	7534 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		z_arm_int_exit();
   192f2:	f7ee fc2f 	bl	7b54 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   192f6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   192fa:	4685      	mov	sp, r0
   192fc:	4770      	bx	lr
   192fe:	bf00      	nop

00019300 <rtc0_nrf5_isr>:
	DEBUG_RADIO_ISR(0);
	return 1;
}

static void rtc0_nrf5_isr(void *arg)
{
   19300:	b508      	push	{r3, lr}
	DEBUG_TICKER_ISR(1);

	/* On compare0 run ticker worker instance0 */
	if (NRF_RTC0->EVENTS_COMPARE[0]) {
   19302:	4b09      	ldr	r3, [pc, #36]	; (19328 <rtc0_nrf5_isr+0x28>)
   19304:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   19308:	b93a      	cbnz	r2, 1931a <rtc0_nrf5_isr+0x1a>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;

		ticker_trigger(0);
	}

	mayfly_run(TICKER_USER_ID_ULL_HIGH);
   1930a:	2001      	movs	r0, #1
   1930c:	f7f6 ffb2 	bl	10274 <mayfly_run>
	(CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	mayfly_run(TICKER_USER_ID_ULL_LOW);
#endif

	DEBUG_TICKER_ISR(0);
}
   19310:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	mayfly_run(TICKER_USER_ID_ULL_LOW);
   19314:	2002      	movs	r0, #2
   19316:	f7f6 bfad 	b.w	10274 <mayfly_run>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   1931a:	2000      	movs	r0, #0
   1931c:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		ticker_trigger(0);
   19320:	f7f8 fa72 	bl	11808 <ticker_trigger>
   19324:	e7f1      	b.n	1930a <rtc0_nrf5_isr+0xa>
   19326:	bf00      	nop
   19328:	4000b000 	.word	0x4000b000

0001932c <swi_lll_nrf5_isr>:

static void swi_lll_nrf5_isr(void *arg)
{
	DEBUG_RADIO_ISR(1);

	mayfly_run(TICKER_USER_ID_LLL);
   1932c:	2000      	movs	r0, #0
   1932e:	f7f6 bfa1 	b.w	10274 <mayfly_run>
   19332:	bf00      	nop

00019334 <isr_race>:
}

static void isr_race(void *param)
{
	/* NOTE: lll_disable could have a race with ... */
	radio_status_reset();
   19334:	f001 be52 	b.w	1afdc <radio_status_reset>

00019338 <ticker_stop_op_cb>:
	/* NOTE: this callback is present only for addition of debug messages
	 * when needed, else can be dispensed with.
	 */
	ARG_UNUSED(param);

	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   19338:	2801      	cmp	r0, #1
   1933a:	d800      	bhi.n	1933e <ticker_stop_op_cb+0x6>
   1933c:	4770      	bx	lr
{
   1933e:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   19340:	4a06      	ldr	r2, [pc, #24]	; (1935c <ticker_stop_op_cb+0x24>)
   19342:	4907      	ldr	r1, [pc, #28]	; (19360 <ticker_stop_op_cb+0x28>)
   19344:	4807      	ldr	r0, [pc, #28]	; (19364 <ticker_stop_op_cb+0x2c>)
   19346:	f44f 731b 	mov.w	r3, #620	; 0x26c
   1934a:	f004 fe02 	bl	1df52 <printk>
   1934e:	4040      	eors	r0, r0
   19350:	f380 8811 	msr	BASEPRI, r0
   19354:	f04f 0003 	mov.w	r0, #3
   19358:	df02      	svc	2
		  (status == TICKER_STATUS_FAILURE));
}
   1935a:	bd08      	pop	{r3, pc}
   1935c:	000248e8 	.word	0x000248e8
   19360:	00024930 	.word	0x00024930
   19364:	00023ff4 	.word	0x00023ff4

00019368 <ticker_start_op_cb>:
	/* NOTE: this callback is present only for addition of debug messages
	 * when needed, else can be dispensed with.
	 */
	ARG_UNUSED(param);

	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   19368:	2801      	cmp	r0, #1
   1936a:	d800      	bhi.n	1936e <ticker_start_op_cb+0x6>
   1936c:	4770      	bx	lr
{
   1936e:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   19370:	4a06      	ldr	r2, [pc, #24]	; (1938c <ticker_start_op_cb+0x24>)
   19372:	4907      	ldr	r1, [pc, #28]	; (19390 <ticker_start_op_cb+0x28>)
   19374:	4807      	ldr	r0, [pc, #28]	; (19394 <ticker_start_op_cb+0x2c>)
   19376:	f240 2377 	movw	r3, #631	; 0x277
   1937a:	f004 fdea 	bl	1df52 <printk>
   1937e:	4040      	eors	r0, r0
   19380:	f380 8811 	msr	BASEPRI, r0
   19384:	f04f 0003 	mov.w	r0, #3
   19388:	df02      	svc	2
		  (status == TICKER_STATUS_FAILURE));
}
   1938a:	bd08      	pop	{r3, pc}
   1938c:	000248e8 	.word	0x000248e8
   19390:	00024930 	.word	0x00024930
   19394:	00023ff4 	.word	0x00023ff4

00019398 <preempt_ticker_start.isra.0>:

static void preempt_ticker_start(struct lll_prepare_param *prepare_param)
   19398:	b530      	push	{r4, r5, lr}
	preempt_to = MAX(evt->ticks_active_to_start,
			 evt->ticks_xtal_to_start) -
			 evt->ticks_preempt_to_start;

	/* Setup pre empt timeout */
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1939a:	2200      	movs	r2, #0
static void preempt_ticker_start(struct lll_prepare_param *prepare_param)
   1939c:	b08b      	sub	sp, #44	; 0x2c
	evt = HDR_LLL2EVT(prepare_param->param);
   1939e:	680b      	ldr	r3, [r1, #0]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   193a0:	4c15      	ldr	r4, [pc, #84]	; (193f8 <preempt_ticker_start.isra.0+0x60>)
   193a2:	4916      	ldr	r1, [pc, #88]	; (193fc <preempt_ticker_start.isra.0+0x64>)
   193a4:	9208      	str	r2, [sp, #32]
   193a6:	e9cd 2203 	strd	r2, r2, [sp, #12]
   193aa:	e9cd 2201 	strd	r2, r2, [sp, #4]
   193ae:	9206      	str	r2, [sp, #24]
   193b0:	9407      	str	r4, [sp, #28]
   193b2:	9105      	str	r1, [sp, #20]
	preempt_to = MAX(evt->ticks_active_to_start,
   193b4:	e9d3 5400 	ldrd	r5, r4, [r3]
   193b8:	6899      	ldr	r1, [r3, #8]
   193ba:	42a5      	cmp	r5, r4
   193bc:	bf2c      	ite	cs
   193be:	ebc1 0105 	rsbcs	r1, r1, r5
   193c2:	ebc1 0104 	rsbcc	r1, r1, r4
static void preempt_ticker_start(struct lll_prepare_param *prepare_param)
   193c6:	4603      	mov	r3, r0
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   193c8:	9100      	str	r1, [sp, #0]
   193ca:	4610      	mov	r0, r2
   193cc:	4611      	mov	r1, r2
   193ce:	f7f8 fa89 	bl	118e4 <ticker_start>
			   TICKER_NULL_REMAINDER,
			   TICKER_NULL_LAZY,
			   TICKER_NULL_SLOT,
			   preempt_ticker_cb, NULL,
			   ticker_start_op_cb, NULL);
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   193d2:	2802      	cmp	r0, #2
   193d4:	d801      	bhi.n	193da <preempt_ticker_start.isra.0+0x42>
		  (ret == TICKER_STATUS_FAILURE) ||
		  (ret == TICKER_STATUS_BUSY));
}
   193d6:	b00b      	add	sp, #44	; 0x2c
   193d8:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   193da:	4a09      	ldr	r2, [pc, #36]	; (19400 <preempt_ticker_start.isra.0+0x68>)
   193dc:	4909      	ldr	r1, [pc, #36]	; (19404 <preempt_ticker_start.isra.0+0x6c>)
   193de:	480a      	ldr	r0, [pc, #40]	; (19408 <preempt_ticker_start.isra.0+0x70>)
   193e0:	f240 2395 	movw	r3, #661	; 0x295
   193e4:	f004 fdb5 	bl	1df52 <printk>
   193e8:	4040      	eors	r0, r0
   193ea:	f380 8811 	msr	BASEPRI, r0
   193ee:	f04f 0003 	mov.w	r0, #3
   193f2:	df02      	svc	2
}
   193f4:	b00b      	add	sp, #44	; 0x2c
   193f6:	bd30      	pop	{r4, r5, pc}
   193f8:	00019369 	.word	0x00019369
   193fc:	00019661 	.word	0x00019661
   19400:	000248e8 	.word	0x000248e8
   19404:	00024950 	.word	0x00024950
   19408:	00023ff4 	.word	0x00023ff4

0001940c <prepare>:
{
   1940c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19410:	b085      	sub	sp, #20
   19412:	4604      	mov	r4, r0
	uint8_t idx = UINT8_MAX;
   19414:	f04f 0cff 	mov.w	ip, #255	; 0xff
	p = ull_prepare_dequeue_iter(&idx);
   19418:	f10d 000f 	add.w	r0, sp, #15
{
   1941c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   19420:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
	uint8_t idx = UINT8_MAX;
   19424:	f88d c00f 	strb.w	ip, [sp, #15]
{
   19428:	460d      	mov	r5, r1
   1942a:	4616      	mov	r6, r2
   1942c:	461f      	mov	r7, r3
	p = ull_prepare_dequeue_iter(&idx);
   1942e:	f7fb f9a9 	bl	14784 <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   19432:	b918      	cbnz	r0, 1943c <prepare+0x30>
   19434:	e01e      	b.n	19474 <prepare+0x68>
		p = ull_prepare_dequeue_iter(&idx);
   19436:	f7fb f9a5 	bl	14784 <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   1943a:	b1d8      	cbz	r0, 19474 <prepare+0x68>
   1943c:	f890 3020 	ldrb.w	r3, [r0, #32]
   19440:	079b      	lsls	r3, r3, #30
		p = ull_prepare_dequeue_iter(&idx);
   19442:	f10d 000f 	add.w	r0, sp, #15
	while (p && (p->is_aborted || p->is_resume)) {
   19446:	d1f6      	bne.n	19436 <prepare+0x2a>
	if (event.curr.abort_cb || (p && is_resume)) {
   19448:	4b2d      	ldr	r3, [pc, #180]	; (19500 <prepare+0xf4>)
   1944a:	689a      	ldr	r2, [r3, #8]
   1944c:	b9aa      	cbnz	r2, 1947a <prepare+0x6e>
   1944e:	f1b9 0f00 	cmp.w	r9, #0
   19452:	d036      	beq.n	194c2 <prepare+0xb6>
		err = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   19454:	2201      	movs	r2, #1
   19456:	9201      	str	r2, [sp, #4]
   19458:	9700      	str	r7, [sp, #0]
   1945a:	4633      	mov	r3, r6
   1945c:	4629      	mov	r1, r5
   1945e:	4620      	mov	r0, r4
   19460:	4642      	mov	r2, r8
   19462:	f7fb f949 	bl	146f8 <ull_prepare_enqueue>
		LL_ASSERT(!err);
   19466:	b9d8      	cbnz	r0, 194a0 <prepare+0x94>
		return -EINPROGRESS;
   19468:	f06f 0443 	mvn.w	r4, #67	; 0x43
}
   1946c:	4620      	mov	r0, r4
   1946e:	b005      	add	sp, #20
   19470:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (event.curr.abort_cb || (p && is_resume)) {
   19474:	4b22      	ldr	r3, [pc, #136]	; (19500 <prepare+0xf4>)
   19476:	689a      	ldr	r2, [r3, #8]
   19478:	b31a      	cbz	r2, 194c2 <prepare+0xb6>
		err = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   1947a:	e9cd 7900 	strd	r7, r9, [sp]
   1947e:	4633      	mov	r3, r6
   19480:	4629      	mov	r1, r5
   19482:	4620      	mov	r0, r4
   19484:	4642      	mov	r2, r8
   19486:	f7fb f937 	bl	146f8 <ull_prepare_enqueue>
		LL_ASSERT(!err);
   1948a:	b948      	cbnz	r0, 194a0 <prepare+0x94>
		if (is_resume) {
   1948c:	f1b9 0f00 	cmp.w	r9, #0
   19490:	d1ea      	bne.n	19468 <prepare+0x5c>
		preempt_ticker_start(prepare_param);
   19492:	f8d8 100c 	ldr.w	r1, [r8, #12]
   19496:	f8d8 0000 	ldr.w	r0, [r8]
   1949a:	f7ff ff7d 	bl	19398 <preempt_ticker_start.isra.0>
   1949e:	e7e3      	b.n	19468 <prepare+0x5c>
		LL_ASSERT(!err);
   194a0:	4a18      	ldr	r2, [pc, #96]	; (19504 <prepare+0xf8>)
   194a2:	4919      	ldr	r1, [pc, #100]	; (19508 <prepare+0xfc>)
   194a4:	4819      	ldr	r0, [pc, #100]	; (1950c <prepare+0x100>)
   194a6:	f240 2311 	movw	r3, #529	; 0x211
   194aa:	f004 fd52 	bl	1df52 <printk>
   194ae:	4040      	eors	r0, r0
   194b0:	f380 8811 	msr	BASEPRI, r0
   194b4:	f04f 0003 	mov.w	r0, #3
   194b8:	df02      	svc	2
		if (is_resume) {
   194ba:	f1b9 0f00 	cmp.w	r9, #0
   194be:	d1d3      	bne.n	19468 <prepare+0x5c>
   194c0:	e7e7      	b.n	19492 <prepare+0x86>
	event.curr.param = prepare_param->param;
   194c2:	f8d8 200c 	ldr.w	r2, [r8, #12]
   194c6:	601a      	str	r2, [r3, #0]
	event.curr.abort_cb = abort_cb;
   194c8:	e9c3 4501 	strd	r4, r5, [r3, #4]
	err = prepare_cb(prepare_param);
   194cc:	4640      	mov	r0, r8
   194ce:	47b0      	blx	r6
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   194d0:	2200      	movs	r2, #0
   194d2:	4b0f      	ldr	r3, [pc, #60]	; (19510 <prepare+0x104>)
   194d4:	9200      	str	r2, [sp, #0]
	err = prepare_cb(prepare_param);
   194d6:	4604      	mov	r4, r0
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   194d8:	4611      	mov	r1, r2
   194da:	4610      	mov	r0, r2
   194dc:	f7f8 fa6e 	bl	119bc <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   194e0:	2802      	cmp	r0, #2
   194e2:	d9c3      	bls.n	1946c <prepare+0x60>
   194e4:	4a07      	ldr	r2, [pc, #28]	; (19504 <prepare+0xf8>)
   194e6:	490b      	ldr	r1, [pc, #44]	; (19514 <prepare+0x108>)
   194e8:	4808      	ldr	r0, [pc, #32]	; (1950c <prepare+0x100>)
   194ea:	f240 234b 	movw	r3, #587	; 0x24b
   194ee:	f004 fd30 	bl	1df52 <printk>
   194f2:	4040      	eors	r0, r0
   194f4:	f380 8811 	msr	BASEPRI, r0
   194f8:	f04f 0003 	mov.w	r0, #3
   194fc:	df02      	svc	2
   194fe:	e7b5      	b.n	1946c <prepare+0x60>
   19500:	200089f8 	.word	0x200089f8
   19504:	000248e8 	.word	0x000248e8
   19508:	000242a4 	.word	0x000242a4
   1950c:	00023ff4 	.word	0x00023ff4
   19510:	00019339 	.word	0x00019339
   19514:	00024950 	.word	0x00024950

00019518 <preempt>:
			     0, &mfy);
	LL_ASSERT(!ret);
}

static void preempt(void *param)
{
   19518:	b5f0      	push	{r4, r5, r6, r7, lr}
	lll_prepare_cb_t resume_cb;
	uint8_t idx = UINT8_MAX;
	int resume_prio;
	int ret;

	if (!event.curr.abort_cb || !event.curr.param) {
   1951a:	4e4c      	ldr	r6, [pc, #304]	; (1964c <preempt+0x134>)
{
   1951c:	b08b      	sub	sp, #44	; 0x2c
	struct lll_event *next = ull_prepare_dequeue_get();
   1951e:	f7fb f923 	bl	14768 <ull_prepare_dequeue_get>
	if (!event.curr.abort_cb || !event.curr.param) {
   19522:	68b3      	ldr	r3, [r6, #8]
	uint8_t idx = UINT8_MAX;
   19524:	22ff      	movs	r2, #255	; 0xff
   19526:	f88d 200e 	strb.w	r2, [sp, #14]
	if (!event.curr.abort_cb || !event.curr.param) {
   1952a:	b19b      	cbz	r3, 19554 <preempt+0x3c>
   1952c:	6833      	ldr	r3, [r6, #0]
   1952e:	b18b      	cbz	r3, 19554 <preempt+0x3c>
		return;
	}

	next = ull_prepare_dequeue_iter(&idx);
   19530:	f10d 000e 	add.w	r0, sp, #14
   19534:	f7fb f926 	bl	14784 <ull_prepare_dequeue_iter>
	if (!next) {
   19538:	4604      	mov	r4, r0
   1953a:	b158      	cbz	r0, 19554 <preempt+0x3c>
		return;
	}

	while (next && (next->is_aborted || next->is_resume)) {
   1953c:	f894 3020 	ldrb.w	r3, [r4, #32]
   19540:	f013 0503 	ands.w	r5, r3, #3
		next = ull_prepare_dequeue_iter(&idx);
   19544:	f10d 000e 	add.w	r0, sp, #14
	while (next && (next->is_aborted || next->is_resume)) {
   19548:	d006      	beq.n	19558 <preempt+0x40>
		next = ull_prepare_dequeue_iter(&idx);
   1954a:	f7fb f91b 	bl	14784 <ull_prepare_dequeue_iter>
	while (next && (next->is_aborted || next->is_resume)) {
   1954e:	4604      	mov	r4, r0
   19550:	2800      	cmp	r0, #0
   19552:	d1f3      	bne.n	1953c <preempt+0x24>
			return;
		}
	} while (next->is_aborted || next->is_resume);

	preempt_ticker_start(&next->prepare_param);
}
   19554:	b00b      	add	sp, #44	; 0x2c
   19556:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = event.curr.is_abort_cb(next->prepare_param.param, next->prio,
   19558:	ab05      	add	r3, sp, #20
   1955a:	e9d6 2700 	ldrd	r2, r7, [r6]
   1955e:	69e1      	ldr	r1, [r4, #28]
   19560:	68e0      	ldr	r0, [r4, #12]
   19562:	9300      	str	r3, [sp, #0]
   19564:	ab04      	add	r3, sp, #16
   19566:	47b8      	blx	r7
	if (!ret) {
   19568:	4607      	mov	r7, r0
   1956a:	2800      	cmp	r0, #0
   1956c:	d062      	beq.n	19634 <preempt+0x11c>
	event.curr.abort_cb(NULL, event.curr.param);
   1956e:	68b3      	ldr	r3, [r6, #8]
   19570:	6831      	ldr	r1, [r6, #0]
   19572:	4628      	mov	r0, r5
   19574:	4798      	blx	r3
	if (ret == -EAGAIN) {
   19576:	f117 0f0b 	cmn.w	r7, #11
   1957a:	d01a      	beq.n	195b2 <preempt+0x9a>
		LL_ASSERT(ret == -ECANCELED);
   1957c:	3748      	adds	r7, #72	; 0x48
   1957e:	d011      	beq.n	195a4 <preempt+0x8c>
   19580:	4a33      	ldr	r2, [pc, #204]	; (19650 <preempt+0x138>)
   19582:	4934      	ldr	r1, [pc, #208]	; (19654 <preempt+0x13c>)
   19584:	4834      	ldr	r0, [pc, #208]	; (19658 <preempt+0x140>)
   19586:	f240 23df 	movw	r3, #735	; 0x2df
   1958a:	f004 fce2 	bl	1df52 <printk>
   1958e:	4040      	eors	r0, r0
   19590:	f380 8811 	msr	BASEPRI, r0
   19594:	f04f 0003 	mov.w	r0, #3
   19598:	df02      	svc	2
   1959a:	e003      	b.n	195a4 <preempt+0x8c>
	} while (next->is_aborted || next->is_resume);
   1959c:	f890 3020 	ldrb.w	r3, [r0, #32]
   195a0:	079b      	lsls	r3, r3, #30
   195a2:	d041      	beq.n	19628 <preempt+0x110>
		next = ull_prepare_dequeue_iter(&idx);
   195a4:	f10d 000e 	add.w	r0, sp, #14
   195a8:	f7fb f8ec 	bl	14784 <ull_prepare_dequeue_iter>
		if (!next) {
   195ac:	2800      	cmp	r0, #0
   195ae:	d1f5      	bne.n	1959c <preempt+0x84>
   195b0:	e7d0      	b.n	19554 <preempt+0x3c>
		uint8_t iter_idx = UINT8_MAX;
   195b2:	23ff      	movs	r3, #255	; 0xff
		iter = ull_prepare_dequeue_iter(&iter_idx);
   195b4:	f10d 000f 	add.w	r0, sp, #15
		uint8_t iter_idx = UINT8_MAX;
   195b8:	f88d 300f 	strb.w	r3, [sp, #15]
		iter = ull_prepare_dequeue_iter(&iter_idx);
   195bc:	f7fb f8e2 	bl	14784 <ull_prepare_dequeue_iter>
		while (iter) {
   195c0:	bb48      	cbnz	r0, 19616 <preempt+0xfe>
	prepare_param.param = event.curr.param;
   195c2:	6832      	ldr	r2, [r6, #0]
		ret = resume_enqueue(resume_cb, resume_prio);
   195c4:	9b05      	ldr	r3, [sp, #20]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   195c6:	9300      	str	r3, [sp, #0]
	prepare_param.param = event.curr.param;
   195c8:	9209      	str	r2, [sp, #36]	; 0x24
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   195ca:	2301      	movs	r3, #1
	event.curr.param = NULL;
   195cc:	2200      	movs	r2, #0
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   195ce:	9301      	str	r3, [sp, #4]
	event.curr.param = NULL;
   195d0:	6032      	str	r2, [r6, #0]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   195d2:	e9d6 0101 	ldrd	r0, r1, [r6, #4]
   195d6:	9b04      	ldr	r3, [sp, #16]
   195d8:	aa06      	add	r2, sp, #24
   195da:	f7fb f88d 	bl	146f8 <ull_prepare_enqueue>
		LL_ASSERT(!ret);
   195de:	2800      	cmp	r0, #0
   195e0:	d0e0      	beq.n	195a4 <preempt+0x8c>
   195e2:	4a1b      	ldr	r2, [pc, #108]	; (19650 <preempt+0x138>)
   195e4:	491d      	ldr	r1, [pc, #116]	; (1965c <preempt+0x144>)
   195e6:	481c      	ldr	r0, [pc, #112]	; (19658 <preempt+0x140>)
   195e8:	f240 23dd 	movw	r3, #733	; 0x2dd
   195ec:	f004 fcb1 	bl	1df52 <printk>
   195f0:	4040      	eors	r0, r0
   195f2:	f380 8811 	msr	BASEPRI, r0
   195f6:	f04f 0003 	mov.w	r0, #3
   195fa:	df02      	svc	2
   195fc:	e7d2      	b.n	195a4 <preempt+0x8c>
				iter->is_aborted = 1;
   195fe:	f043 0302 	orr.w	r3, r3, #2
   19602:	f880 3020 	strb.w	r3, [r0, #32]
				iter->abort_cb(&iter->prepare_param,
   19606:	6983      	ldr	r3, [r0, #24]
   19608:	4798      	blx	r3
			iter = ull_prepare_dequeue_iter(&iter_idx);
   1960a:	f10d 000f 	add.w	r0, sp, #15
   1960e:	f7fb f8b9 	bl	14784 <ull_prepare_dequeue_iter>
		while (iter) {
   19612:	2800      	cmp	r0, #0
   19614:	d0d5      	beq.n	195c2 <preempt+0xaa>
			if (!iter->is_aborted &&
   19616:	f890 3020 	ldrb.w	r3, [r0, #32]
   1961a:	079a      	lsls	r2, r3, #30
   1961c:	d4f5      	bmi.n	1960a <preempt+0xf2>
			    event.curr.param == iter->prepare_param.param) {
   1961e:	68c2      	ldr	r2, [r0, #12]
			if (!iter->is_aborted &&
   19620:	6831      	ldr	r1, [r6, #0]
   19622:	4291      	cmp	r1, r2
   19624:	d1f1      	bne.n	1960a <preempt+0xf2>
   19626:	e7ea      	b.n	195fe <preempt+0xe6>
	preempt_ticker_start(&next->prepare_param);
   19628:	68c1      	ldr	r1, [r0, #12]
   1962a:	6800      	ldr	r0, [r0, #0]
   1962c:	f7ff feb4 	bl	19398 <preempt_ticker_start.isra.0>
}
   19630:	b00b      	add	sp, #44	; 0x2c
   19632:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next->is_aborted = 1;
   19634:	f894 3020 	ldrb.w	r3, [r4, #32]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   19638:	69a2      	ldr	r2, [r4, #24]
   1963a:	68e1      	ldr	r1, [r4, #12]
		next->is_aborted = 1;
   1963c:	f043 0302 	orr.w	r3, r3, #2
   19640:	f884 3020 	strb.w	r3, [r4, #32]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   19644:	4620      	mov	r0, r4
   19646:	4790      	blx	r2
		goto preempt_next;
   19648:	e7ac      	b.n	195a4 <preempt+0x8c>
   1964a:	bf00      	nop
   1964c:	200089f8 	.word	0x200089f8
   19650:	000248e8 	.word	0x000248e8
   19654:	00024978 	.word	0x00024978
   19658:	00023ff4 	.word	0x00023ff4
   1965c:	000242b0 	.word	0x000242b0

00019660 <preempt_ticker_cb>:
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   19660:	2200      	movs	r2, #0
{
   19662:	b508      	push	{r3, lr}
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   19664:	4611      	mov	r1, r2
   19666:	4b0a      	ldr	r3, [pc, #40]	; (19690 <preempt_ticker_cb+0x30>)
   19668:	2001      	movs	r0, #1
   1966a:	f7f6 fdaf 	bl	101cc <mayfly_enqueue>
	LL_ASSERT(!ret);
   1966e:	b900      	cbnz	r0, 19672 <preempt_ticker_cb+0x12>
}
   19670:	bd08      	pop	{r3, pc}
	LL_ASSERT(!ret);
   19672:	4a08      	ldr	r2, [pc, #32]	; (19694 <preempt_ticker_cb+0x34>)
   19674:	4908      	ldr	r1, [pc, #32]	; (19698 <preempt_ticker_cb+0x38>)
   19676:	4809      	ldr	r0, [pc, #36]	; (1969c <preempt_ticker_cb+0x3c>)
   19678:	f240 23a3 	movw	r3, #675	; 0x2a3
   1967c:	f004 fc69 	bl	1df52 <printk>
   19680:	4040      	eors	r0, r0
   19682:	f380 8811 	msr	BASEPRI, r0
   19686:	f04f 0003 	mov.w	r0, #3
   1968a:	df02      	svc	2
}
   1968c:	bd08      	pop	{r3, pc}
   1968e:	bf00      	nop
   19690:	20000608 	.word	0x20000608
   19694:	000248e8 	.word	0x000248e8
   19698:	000242b0 	.word	0x000242b0
   1969c:	00023ff4 	.word	0x00023ff4

000196a0 <lll_init>:
{
   196a0:	b510      	push	{r4, lr}
   196a2:	4815      	ldr	r0, [pc, #84]	; (196f8 <lll_init+0x58>)
   196a4:	f003 f9fa 	bl	1ca9c <z_impl_device_get_binding>
	dev_entropy = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   196a8:	4b14      	ldr	r3, [pc, #80]	; (196fc <lll_init+0x5c>)
   196aa:	6018      	str	r0, [r3, #0]
	if (!dev_entropy) {
   196ac:	b300      	cbz	r0, 196f0 <lll_init+0x50>
	event.curr.abort_cb = NULL;
   196ae:	4b14      	ldr	r3, [pc, #80]	; (19700 <lll_init+0x60>)
   196b0:	2200      	movs	r2, #0
   196b2:	609a      	str	r2, [r3, #8]
	err = lll_clock_init();
   196b4:	f000 f9d6 	bl	19a64 <lll_clock_init>
	if (err) {
   196b8:	4604      	mov	r4, r0
   196ba:	b9b8      	cbnz	r0, 196ec <lll_init+0x4c>
	IRQ_DIRECT_CONNECT(RADIO_IRQn, CONFIG_BT_CTLR_LLL_PRIO,
   196bc:	4602      	mov	r2, r0
   196be:	4601      	mov	r1, r0
   196c0:	2001      	movs	r0, #1
   196c2:	f7ed ff1f 	bl	7504 <z_arm_irq_priority_set>
	IRQ_CONNECT(RTC0_IRQn, CONFIG_BT_CTLR_ULL_HIGH_PRIO,
   196c6:	4622      	mov	r2, r4
   196c8:	4621      	mov	r1, r4
   196ca:	200b      	movs	r0, #11
   196cc:	f7ed ff1a 	bl	7504 <z_arm_irq_priority_set>
	IRQ_CONNECT(HAL_SWI_RADIO_IRQ, CONFIG_BT_CTLR_LLL_PRIO,
   196d0:	4622      	mov	r2, r4
   196d2:	4621      	mov	r1, r4
   196d4:	2018      	movs	r0, #24
   196d6:	f7ed ff15 	bl	7504 <z_arm_irq_priority_set>
	irq_enable(RADIO_IRQn);
   196da:	2001      	movs	r0, #1
   196dc:	f7ed fee0 	bl	74a0 <arch_irq_enable>
	irq_enable(RTC0_IRQn);
   196e0:	200b      	movs	r0, #11
   196e2:	f7ed fedd 	bl	74a0 <arch_irq_enable>
	irq_enable(HAL_SWI_RADIO_IRQ);
   196e6:	2018      	movs	r0, #24
   196e8:	f7ed feda 	bl	74a0 <arch_irq_enable>
}
   196ec:	4620      	mov	r0, r4
   196ee:	bd10      	pop	{r4, pc}
		return -ENODEV;
   196f0:	f06f 0412 	mvn.w	r4, #18
   196f4:	e7fa      	b.n	196ec <lll_init+0x4c>
   196f6:	bf00      	nop
   196f8:	00024984 	.word	0x00024984
   196fc:	200089f4 	.word	0x200089f4
   19700:	200089f8 	.word	0x200089f8

00019704 <lll_csrand_get>:
	return entropy_get_entropy(dev_entropy, buf, len);
   19704:	4a04      	ldr	r2, [pc, #16]	; (19718 <lll_csrand_get+0x14>)
{
   19706:	b410      	push	{r4}
   19708:	4603      	mov	r3, r0
	return entropy_get_entropy(dev_entropy, buf, len);
   1970a:	6810      	ldr	r0, [r2, #0]
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->driver_api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   1970c:	6884      	ldr	r4, [r0, #8]
   1970e:	b28a      	uxth	r2, r1
   19710:	4619      	mov	r1, r3
   19712:	6823      	ldr	r3, [r4, #0]
}
   19714:	bc10      	pop	{r4}
   19716:	4718      	bx	r3
   19718:	200089f4 	.word	0x200089f4

0001971c <lll_csrand_isr_get>:
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
   1971c:	4b08      	ldr	r3, [pc, #32]	; (19740 <lll_csrand_isr_get+0x24>)
   1971e:	681b      	ldr	r3, [r3, #0]
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->driver_api;

	if (unlikely(!api->get_entropy_isr)) {
   19720:	689a      	ldr	r2, [r3, #8]
{
   19722:	b410      	push	{r4}
   19724:	6854      	ldr	r4, [r2, #4]
   19726:	b134      	cbz	r4, 19736 <lll_csrand_isr_get+0x1a>
   19728:	b28a      	uxth	r2, r1
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   1972a:	46a4      	mov	ip, r4
   1972c:	4601      	mov	r1, r0
}
   1972e:	bc10      	pop	{r4}
   19730:	4618      	mov	r0, r3
   19732:	2300      	movs	r3, #0
   19734:	4760      	bx	ip
   19736:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1973a:	bc10      	pop	{r4}
   1973c:	4770      	bx	lr
   1973e:	bf00      	nop
   19740:	200089f4 	.word	0x200089f4

00019744 <lll_reset>:
}
   19744:	2000      	movs	r0, #0
   19746:	4770      	bx	lr

00019748 <lll_prepare>:
{
   19748:	b510      	push	{r4, lr}
   1974a:	b082      	sub	sp, #8
   1974c:	9c04      	ldr	r4, [sp, #16]
	return prepare(is_abort_cb, abort_cb, prepare_cb, prio, prepare_param,
   1974e:	9400      	str	r4, [sp, #0]
   19750:	2400      	movs	r4, #0
   19752:	9401      	str	r4, [sp, #4]
   19754:	f7ff fe5a 	bl	1940c <prepare>
}
   19758:	b002      	add	sp, #8
   1975a:	bd10      	pop	{r4, pc}

0001975c <lll_resume>:
{
   1975c:	b510      	push	{r4, lr}
   1975e:	b082      	sub	sp, #8
	ret = prepare(next->is_abort_cb, next->abort_cb, next->prepare_cb,
   19760:	9000      	str	r0, [sp, #0]
		      next->prio, &next->prepare_param, next->is_resume);
   19762:	f890 4020 	ldrb.w	r4, [r0, #32]
	ret = prepare(next->is_abort_cb, next->abort_cb, next->prepare_cb,
   19766:	69c3      	ldr	r3, [r0, #28]
   19768:	6902      	ldr	r2, [r0, #16]
   1976a:	f004 0401 	and.w	r4, r4, #1
   1976e:	e9d0 0105 	ldrd	r0, r1, [r0, #20]
   19772:	9401      	str	r4, [sp, #4]
   19774:	f7ff fe4a 	bl	1940c <prepare>
	LL_ASSERT(!ret || ret == -EINPROGRESS);
   19778:	b108      	cbz	r0, 1977e <lll_resume+0x22>
   1977a:	3044      	adds	r0, #68	; 0x44
   1977c:	d101      	bne.n	19782 <lll_resume+0x26>
}
   1977e:	b002      	add	sp, #8
   19780:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret || ret == -EINPROGRESS);
   19782:	4a07      	ldr	r2, [pc, #28]	; (197a0 <lll_resume+0x44>)
   19784:	4907      	ldr	r1, [pc, #28]	; (197a4 <lll_resume+0x48>)
   19786:	4808      	ldr	r0, [pc, #32]	; (197a8 <lll_resume+0x4c>)
   19788:	23e4      	movs	r3, #228	; 0xe4
   1978a:	f004 fbe2 	bl	1df52 <printk>
   1978e:	4040      	eors	r0, r0
   19790:	f380 8811 	msr	BASEPRI, r0
   19794:	f04f 0003 	mov.w	r0, #3
   19798:	df02      	svc	2
}
   1979a:	b002      	add	sp, #8
   1979c:	bd10      	pop	{r4, pc}
   1979e:	bf00      	nop
   197a0:	000248e8 	.word	0x000248e8
   197a4:	00024988 	.word	0x00024988
   197a8:	00023ff4 	.word	0x00023ff4

000197ac <lll_disable>:
{
   197ac:	b530      	push	{r4, r5, lr}
	if (!param || (param == event.curr.param)) {
   197ae:	4604      	mov	r4, r0
{
   197b0:	b083      	sub	sp, #12
	if (!param || (param == event.curr.param)) {
   197b2:	2800      	cmp	r0, #0
   197b4:	d035      	beq.n	19822 <lll_disable+0x76>
   197b6:	4b26      	ldr	r3, [pc, #152]	; (19850 <lll_disable+0xa4>)
   197b8:	681a      	ldr	r2, [r3, #0]
   197ba:	4282      	cmp	r2, r0
   197bc:	d02b      	beq.n	19816 <lll_disable+0x6a>
		uint8_t idx = UINT8_MAX;
   197be:	23ff      	movs	r3, #255	; 0xff
		next = ull_prepare_dequeue_iter(&idx);
   197c0:	f10d 0007 	add.w	r0, sp, #7
		uint8_t idx = UINT8_MAX;
   197c4:	f88d 3007 	strb.w	r3, [sp, #7]
		next = ull_prepare_dequeue_iter(&idx);
   197c8:	f7fa ffdc 	bl	14784 <ull_prepare_dequeue_iter>
		while (next) {
   197cc:	4603      	mov	r3, r0
   197ce:	b940      	cbnz	r0, 197e2 <lll_disable+0x36>
   197d0:	e01f      	b.n	19812 <lll_disable+0x66>
			    (!param || (param == next->prepare_param.param))) {
   197d2:	4294      	cmp	r4, r2
   197d4:	d00e      	beq.n	197f4 <lll_disable+0x48>
			next = ull_prepare_dequeue_iter(&idx);
   197d6:	f10d 0007 	add.w	r0, sp, #7
   197da:	f7fa ffd3 	bl	14784 <ull_prepare_dequeue_iter>
		while (next) {
   197de:	4603      	mov	r3, r0
   197e0:	b1b8      	cbz	r0, 19812 <lll_disable+0x66>
			if (!next->is_aborted &&
   197e2:	f893 2020 	ldrb.w	r2, [r3, #32]
   197e6:	0792      	lsls	r2, r2, #30
   197e8:	d4f5      	bmi.n	197d6 <lll_disable+0x2a>
				next->is_aborted = 1;
   197ea:	68da      	ldr	r2, [r3, #12]
				next->abort_cb(&next->prepare_param,
   197ec:	4618      	mov	r0, r3
   197ee:	4611      	mov	r1, r2
			if (!next->is_aborted &&
   197f0:	2c00      	cmp	r4, #0
   197f2:	d1ee      	bne.n	197d2 <lll_disable+0x26>
				next->is_aborted = 1;
   197f4:	f893 2020 	ldrb.w	r2, [r3, #32]
				next->abort_cb(&next->prepare_param,
   197f8:	699d      	ldr	r5, [r3, #24]
				next->is_aborted = 1;
   197fa:	f042 0202 	orr.w	r2, r2, #2
   197fe:	f883 2020 	strb.w	r2, [r3, #32]
				next->abort_cb(&next->prepare_param,
   19802:	47a8      	blx	r5
			next = ull_prepare_dequeue_iter(&idx);
   19804:	f10d 0007 	add.w	r0, sp, #7
   19808:	f7fa ffbc 	bl	14784 <ull_prepare_dequeue_iter>
		while (next) {
   1980c:	4603      	mov	r3, r0
   1980e:	2800      	cmp	r0, #0
   19810:	d1e7      	bne.n	197e2 <lll_disable+0x36>
}
   19812:	b003      	add	sp, #12
   19814:	bd30      	pop	{r4, r5, pc}
		if (event.curr.abort_cb && event.curr.param) {
   19816:	689b      	ldr	r3, [r3, #8]
   19818:	b16b      	cbz	r3, 19836 <lll_disable+0x8a>
   1981a:	4621      	mov	r1, r4
			event.curr.abort_cb(NULL, event.curr.param);
   1981c:	2000      	movs	r0, #0
   1981e:	4798      	blx	r3
   19820:	e7cd      	b.n	197be <lll_disable+0x12>
		if (event.curr.abort_cb && event.curr.param) {
   19822:	4a0b      	ldr	r2, [pc, #44]	; (19850 <lll_disable+0xa4>)
   19824:	6893      	ldr	r3, [r2, #8]
   19826:	2b00      	cmp	r3, #0
   19828:	d0c9      	beq.n	197be <lll_disable+0x12>
   1982a:	6811      	ldr	r1, [r2, #0]
   1982c:	2900      	cmp	r1, #0
   1982e:	d0c6      	beq.n	197be <lll_disable+0x12>
			event.curr.abort_cb(NULL, event.curr.param);
   19830:	2000      	movs	r0, #0
   19832:	4798      	blx	r3
   19834:	e7c3      	b.n	197be <lll_disable+0x12>
			LL_ASSERT(!param);
   19836:	4a07      	ldr	r2, [pc, #28]	; (19854 <lll_disable+0xa8>)
   19838:	4907      	ldr	r1, [pc, #28]	; (19858 <lll_disable+0xac>)
   1983a:	4808      	ldr	r0, [pc, #32]	; (1985c <lll_disable+0xb0>)
   1983c:	23ee      	movs	r3, #238	; 0xee
   1983e:	f004 fb88 	bl	1df52 <printk>
   19842:	4040      	eors	r0, r0
   19844:	f380 8811 	msr	BASEPRI, r0
   19848:	f04f 0003 	mov.w	r0, #3
   1984c:	df02      	svc	2
   1984e:	e7b6      	b.n	197be <lll_disable+0x12>
   19850:	200089f8 	.word	0x200089f8
   19854:	000248e8 	.word	0x000248e8
   19858:	0002499c 	.word	0x0002499c
   1985c:	00023ff4 	.word	0x00023ff4

00019860 <lll_prepare_done>:
}
   19860:	2000      	movs	r0, #0
   19862:	4770      	bx	lr

00019864 <lll_done>:
{
   19864:	b510      	push	{r4, lr}
   19866:	4604      	mov	r4, r0
	struct lll_event *next = ull_prepare_dequeue_get();
   19868:	f7fa ff7e 	bl	14768 <ull_prepare_dequeue_get>
	LL_ASSERT(!param || next);
   1986c:	b13c      	cbz	r4, 1987e <lll_done+0x1a>
   1986e:	b320      	cbz	r0, 198ba <lll_done+0x56>
		ull = HDR_ULL(((struct lll_hdr *)param)->parent);
   19870:	6820      	ldr	r0, [r4, #0]
   19872:	3010      	adds	r0, #16
	evdone = ull_event_done(ull);
   19874:	f7fa ffb4 	bl	147e0 <ull_event_done>
	LL_ASSERT(evdone);
   19878:	b180      	cbz	r0, 1989c <lll_done+0x38>
}
   1987a:	2000      	movs	r0, #0
   1987c:	bd10      	pop	{r4, pc}
		LL_ASSERT(event.curr.abort_cb);
   1987e:	4c1d      	ldr	r4, [pc, #116]	; (198f4 <lll_done+0x90>)
   19880:	68a3      	ldr	r3, [r4, #8]
   19882:	b343      	cbz	r3, 198d6 <lll_done+0x72>
		param = event.curr.param;
   19884:	6820      	ldr	r0, [r4, #0]
		event.curr.abort_cb = NULL;
   19886:	2300      	movs	r3, #0
   19888:	60a3      	str	r3, [r4, #8]
		event.curr.param = NULL;
   1988a:	6023      	str	r3, [r4, #0]
		if (param) {
   1988c:	2800      	cmp	r0, #0
   1988e:	d0f1      	beq.n	19874 <lll_done+0x10>
			ull = HDR_ULL(((struct lll_hdr *)param)->parent);
   19890:	6800      	ldr	r0, [r0, #0]
   19892:	3010      	adds	r0, #16
	evdone = ull_event_done(ull);
   19894:	f7fa ffa4 	bl	147e0 <ull_event_done>
	LL_ASSERT(evdone);
   19898:	2800      	cmp	r0, #0
   1989a:	d1ee      	bne.n	1987a <lll_done+0x16>
   1989c:	4a16      	ldr	r2, [pc, #88]	; (198f8 <lll_done+0x94>)
   1989e:	4917      	ldr	r1, [pc, #92]	; (198fc <lll_done+0x98>)
   198a0:	4817      	ldr	r0, [pc, #92]	; (19900 <lll_done+0x9c>)
   198a2:	f44f 739e 	mov.w	r3, #316	; 0x13c
   198a6:	f004 fb54 	bl	1df52 <printk>
   198aa:	4040      	eors	r0, r0
   198ac:	f380 8811 	msr	BASEPRI, r0
   198b0:	f04f 0003 	mov.w	r0, #3
   198b4:	df02      	svc	2
}
   198b6:	2000      	movs	r0, #0
   198b8:	bd10      	pop	{r4, pc}
	LL_ASSERT(!param || next);
   198ba:	4a0f      	ldr	r2, [pc, #60]	; (198f8 <lll_done+0x94>)
   198bc:	4911      	ldr	r1, [pc, #68]	; (19904 <lll_done+0xa0>)
   198be:	4810      	ldr	r0, [pc, #64]	; (19900 <lll_done+0x9c>)
   198c0:	f240 131f 	movw	r3, #287	; 0x11f
   198c4:	f004 fb45 	bl	1df52 <printk>
   198c8:	4040      	eors	r0, r0
   198ca:	f380 8811 	msr	BASEPRI, r0
   198ce:	f04f 0003 	mov.w	r0, #3
   198d2:	df02      	svc	2
   198d4:	e7cc      	b.n	19870 <lll_done+0xc>
		LL_ASSERT(event.curr.abort_cb);
   198d6:	4a08      	ldr	r2, [pc, #32]	; (198f8 <lll_done+0x94>)
   198d8:	490b      	ldr	r1, [pc, #44]	; (19908 <lll_done+0xa4>)
   198da:	4809      	ldr	r0, [pc, #36]	; (19900 <lll_done+0x9c>)
   198dc:	f44f 7392 	mov.w	r3, #292	; 0x124
   198e0:	f004 fb37 	bl	1df52 <printk>
   198e4:	4040      	eors	r0, r0
   198e6:	f380 8811 	msr	BASEPRI, r0
   198ea:	f04f 0003 	mov.w	r0, #3
   198ee:	df02      	svc	2
   198f0:	e7c8      	b.n	19884 <lll_done+0x20>
   198f2:	bf00      	nop
   198f4:	200089f8 	.word	0x200089f8
   198f8:	000248e8 	.word	0x000248e8
   198fc:	000249c8 	.word	0x000249c8
   19900:	00023ff4 	.word	0x00023ff4
   19904:	000249a4 	.word	0x000249a4
   19908:	000249b4 	.word	0x000249b4

0001990c <lll_is_done>:
	return !event.curr.abort_cb;
   1990c:	4b02      	ldr	r3, [pc, #8]	; (19918 <lll_is_done+0xc>)
   1990e:	6898      	ldr	r0, [r3, #8]
}
   19910:	fab0 f080 	clz	r0, r0
   19914:	0940      	lsrs	r0, r0, #5
   19916:	4770      	bx	lr
   19918:	200089f8 	.word	0x200089f8

0001991c <lll_is_abort_cb>:
}
   1991c:	f06f 0047 	mvn.w	r0, #71	; 0x47
   19920:	4770      	bx	lr
   19922:	bf00      	nop

00019924 <lll_evt_offset_get>:
		return MAX(evt->ticks_active_to_start,
   19924:	e9d0 0300 	ldrd	r0, r3, [r0]
}
   19928:	4298      	cmp	r0, r3
   1992a:	bf38      	it	cc
   1992c:	4618      	movcc	r0, r3
   1992e:	4770      	bx	lr

00019930 <lll_chan_set>:
	switch (chan) {
   19930:	2826      	cmp	r0, #38	; 0x26
{
   19932:	b510      	push	{r4, lr}
   19934:	4604      	mov	r4, r0
	switch (chan) {
   19936:	d01c      	beq.n	19972 <lll_chan_set+0x42>
   19938:	2827      	cmp	r0, #39	; 0x27
   1993a:	d012      	beq.n	19962 <lll_chan_set+0x32>
   1993c:	2825      	cmp	r0, #37	; 0x25
   1993e:	d008      	beq.n	19952 <lll_chan_set+0x22>
		if (chan < 11) {
   19940:	280a      	cmp	r0, #10
   19942:	d91e      	bls.n	19982 <lll_chan_set+0x52>
		} else if (chan < 40) {
   19944:	2827      	cmp	r0, #39	; 0x27
   19946:	d821      	bhi.n	1998c <lll_chan_set+0x5c>
			radio_freq_chan_set(28 + ((chan - 11) * 2U));
   19948:	3003      	adds	r0, #3
   1994a:	0040      	lsls	r0, r0, #1
   1994c:	f001 fa9a 	bl	1ae84 <radio_freq_chan_set>
   19950:	e002      	b.n	19958 <lll_chan_set+0x28>
		radio_freq_chan_set(2);
   19952:	2002      	movs	r0, #2
   19954:	f001 fa96 	bl	1ae84 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   19958:	4620      	mov	r0, r4
}
   1995a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   1995e:	f001 ba97 	b.w	1ae90 <radio_whiten_iv_set>
		radio_freq_chan_set(80);
   19962:	2050      	movs	r0, #80	; 0x50
   19964:	f001 fa8e 	bl	1ae84 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   19968:	4620      	mov	r0, r4
}
   1996a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   1996e:	f001 ba8f 	b.w	1ae90 <radio_whiten_iv_set>
		radio_freq_chan_set(26);
   19972:	201a      	movs	r0, #26
   19974:	f001 fa86 	bl	1ae84 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   19978:	4620      	mov	r0, r4
}
   1997a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   1997e:	f001 ba87 	b.w	1ae90 <radio_whiten_iv_set>
			radio_freq_chan_set(4 + (chan * 2U));
   19982:	3002      	adds	r0, #2
   19984:	0040      	lsls	r0, r0, #1
   19986:	f001 fa7d 	bl	1ae84 <radio_freq_chan_set>
   1998a:	e7e5      	b.n	19958 <lll_chan_set+0x28>
			LL_ASSERT(0);
   1998c:	4a06      	ldr	r2, [pc, #24]	; (199a8 <lll_chan_set+0x78>)
   1998e:	4907      	ldr	r1, [pc, #28]	; (199ac <lll_chan_set+0x7c>)
   19990:	4807      	ldr	r0, [pc, #28]	; (199b0 <lll_chan_set+0x80>)
   19992:	f44f 73c3 	mov.w	r3, #390	; 0x186
   19996:	f004 fadc 	bl	1df52 <printk>
   1999a:	4040      	eors	r0, r0
   1999c:	f380 8811 	msr	BASEPRI, r0
   199a0:	f04f 0003 	mov.w	r0, #3
   199a4:	df02      	svc	2
   199a6:	e7d7      	b.n	19958 <lll_chan_set+0x28>
   199a8:	000248e8 	.word	0x000248e8
   199ac:	00024064 	.word	0x00024064
   199b0:	00023ff4 	.word	0x00023ff4

000199b4 <lll_radio_tx_ready_delay_get>:
	return radio_tx_ready_delay_get(phy, flags);
   199b4:	f001 bada 	b.w	1af6c <radio_tx_ready_delay_get>

000199b8 <lll_isr_tx_status_reset>:
{
   199b8:	b508      	push	{r3, lr}
	radio_status_reset();
   199ba:	f001 fb0f 	bl	1afdc <radio_status_reset>
}
   199be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_status_reset();
   199c2:	f001 bbdb 	b.w	1b17c <radio_tmr_status_reset>
   199c6:	bf00      	nop

000199c8 <lll_isr_rx_status_reset>:
{
   199c8:	b508      	push	{r3, lr}
	radio_status_reset();
   199ca:	f001 fb07 	bl	1afdc <radio_status_reset>
	radio_tmr_status_reset();
   199ce:	f001 fbd5 	bl	1b17c <radio_tmr_status_reset>
}
   199d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   199d6:	f001 bb81 	b.w	1b0dc <radio_rssi_status_reset>
   199da:	bf00      	nop

000199dc <lll_isr_status_reset>:
{
   199dc:	b508      	push	{r3, lr}
	radio_status_reset();
   199de:	f001 fafd 	bl	1afdc <radio_status_reset>
	radio_tmr_status_reset();
   199e2:	f001 fbcb 	bl	1b17c <radio_tmr_status_reset>
	radio_filter_status_reset();
   199e6:	f001 fbb1 	bl	1b14c <radio_filter_status_reset>
	radio_ar_status_reset();
   199ea:	f001 fdb7 	bl	1b55c <radio_ar_status_reset>
}
   199ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   199f2:	f001 bb73 	b.w	1b0dc <radio_rssi_status_reset>
   199f6:	bf00      	nop

000199f8 <lll_isr_cleanup>:
{
   199f8:	b508      	push	{r3, lr}
   199fa:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   199fc:	4813      	ldr	r0, [pc, #76]	; (19a4c <lll_isr_cleanup+0x54>)
   199fe:	f001 f9c9 	bl	1ad94 <radio_isr_set>
	if (!radio_is_idle()) {
   19a02:	f001 fb0b 	bl	1b01c <radio_is_idle>
   19a06:	b1e8      	cbz	r0, 19a44 <lll_isr_cleanup+0x4c>
	radio_tmr_stop();
   19a08:	f001 fc80 	bl	1b30c <radio_tmr_stop>
	err = lll_hfclock_off();
   19a0c:	f000 f872 	bl	19af4 <lll_hfclock_off>
	LL_ASSERT(!err || err == -EBUSY);
   19a10:	b108      	cbz	r0, 19a16 <lll_isr_cleanup+0x1e>
   19a12:	3010      	adds	r0, #16
   19a14:	d104      	bne.n	19a20 <lll_isr_cleanup+0x28>
}
   19a16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   19a1a:	2000      	movs	r0, #0
   19a1c:	f7ff bf22 	b.w	19864 <lll_done>
	LL_ASSERT(!err || err == -EBUSY);
   19a20:	4a0b      	ldr	r2, [pc, #44]	; (19a50 <lll_isr_cleanup+0x58>)
   19a22:	490c      	ldr	r1, [pc, #48]	; (19a54 <lll_isr_cleanup+0x5c>)
   19a24:	480c      	ldr	r0, [pc, #48]	; (19a58 <lll_isr_cleanup+0x60>)
   19a26:	f240 13e9 	movw	r3, #489	; 0x1e9
   19a2a:	f004 fa92 	bl	1df52 <printk>
   19a2e:	4040      	eors	r0, r0
   19a30:	f380 8811 	msr	BASEPRI, r0
   19a34:	f04f 0003 	mov.w	r0, #3
   19a38:	df02      	svc	2
	lll_done(NULL);
   19a3a:	2000      	movs	r0, #0
}
   19a3c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   19a40:	f7ff bf10 	b.w	19864 <lll_done>
		radio_disable();
   19a44:	f001 fab2 	bl	1afac <radio_disable>
   19a48:	e7de      	b.n	19a08 <lll_isr_cleanup+0x10>
   19a4a:	bf00      	nop
   19a4c:	00019335 	.word	0x00019335
   19a50:	000248e8 	.word	0x000248e8
   19a54:	000249d0 	.word	0x000249d0
   19a58:	00023ff4 	.word	0x00023ff4

00019a5c <clock_ready>:
	return err;
}

static void clock_ready(struct device *dev, clock_control_subsys_t subsys,
			void *user_data)
{
   19a5c:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   19a5e:	f003 be8b 	b.w	1d778 <z_impl_k_sem_give>
   19a62:	bf00      	nop

00019a64 <lll_clock_init>:
{
   19a64:	b510      	push	{r4, lr}
   19a66:	4807      	ldr	r0, [pc, #28]	; (19a84 <lll_clock_init+0x20>)
   19a68:	f003 f818 	bl	1ca9c <z_impl_device_get_binding>
	dev = device_get_binding(DT_LABEL(DT_INST(0, nordic_nrf_clock)));
   19a6c:	4a06      	ldr	r2, [pc, #24]	; (19a88 <lll_clock_init+0x24>)
   19a6e:	6010      	str	r0, [r2, #0]
	if (!dev) {
   19a70:	b128      	cbz	r0, 19a7e <lll_clock_init+0x1a>
   19a72:	6883      	ldr	r3, [r0, #8]
}
   19a74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   19a78:	681b      	ldr	r3, [r3, #0]
   19a7a:	2101      	movs	r1, #1
   19a7c:	4718      	bx	r3
   19a7e:	f06f 0012 	mvn.w	r0, #18
   19a82:	bd10      	pop	{r4, pc}
   19a84:	000249f0 	.word	0x000249f0
   19a88:	20008a0c 	.word	0x20008a0c

00019a8c <lll_clock_wait>:
	if (done) {
   19a8c:	4b12      	ldr	r3, [pc, #72]	; (19ad8 <lll_clock_wait+0x4c>)
   19a8e:	7819      	ldrb	r1, [r3, #0]
   19a90:	b109      	cbz	r1, 19a96 <lll_clock_wait+0xa>
		return 0;
   19a92:	2000      	movs	r0, #0
}
   19a94:	4770      	bx	lr
{
   19a96:	b530      	push	{r4, r5, lr}
	struct clock_control_async_data async_data = {
   19a98:	4a10      	ldr	r2, [pc, #64]	; (19adc <lll_clock_wait+0x50>)
{
   19a9a:	b08b      	sub	sp, #44	; 0x2c
	done = true;
   19a9c:	2401      	movs	r4, #1
	struct clock_control_async_data async_data = {
   19a9e:	ad04      	add	r5, sp, #16
   19aa0:	e9cd 2502 	strd	r2, r5, [sp, #8]
   19aa4:	9101      	str	r1, [sp, #4]
	done = true;
   19aa6:	701c      	strb	r4, [r3, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   19aa8:	4622      	mov	r2, r4
   19aaa:	4628      	mov	r0, r5
   19aac:	f009 faa1 	bl	22ff2 <z_impl_k_sem_init>
	err = clock_control_async_on(dev, CLOCK_CONTROL_NRF_SUBSYS_LF,
   19ab0:	4b0b      	ldr	r3, [pc, #44]	; (19ae0 <lll_clock_wait+0x54>)
   19ab2:	6818      	ldr	r0, [r3, #0]
					 struct clock_control_async_data *data)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	if (!api->async_on) {
   19ab4:	6883      	ldr	r3, [r0, #8]
   19ab6:	689b      	ldr	r3, [r3, #8]
   19ab8:	b15b      	cbz	r3, 19ad2 <lll_clock_wait+0x46>
		return -ENOTSUP;
	}

	return api->async_on(dev, sys, data);
   19aba:	4621      	mov	r1, r4
   19abc:	aa01      	add	r2, sp, #4
   19abe:	4798      	blx	r3
	if (err) {
   19ac0:	b928      	cbnz	r0, 19ace <lll_clock_wait+0x42>
	return z_impl_k_sem_take(sem, timeout);
   19ac2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   19ac6:	2300      	movs	r3, #0
   19ac8:	4628      	mov	r0, r5
   19aca:	f003 fe7b 	bl	1d7c4 <z_impl_k_sem_take>
}
   19ace:	b00b      	add	sp, #44	; 0x2c
   19ad0:	bd30      	pop	{r4, r5, pc}
		return -ENOTSUP;
   19ad2:	f06f 0022 	mvn.w	r0, #34	; 0x22
   19ad6:	e7fa      	b.n	19ace <lll_clock_wait+0x42>
   19ad8:	20009c45 	.word	0x20009c45
   19adc:	00019a5d 	.word	0x00019a5d
   19ae0:	20008a0c 	.word	0x20008a0c

00019ae4 <lll_hfclock_on>:
	err = clock_control_on(dev, CLOCK_CONTROL_NRF_SUBSYS_HF);
   19ae4:	4b02      	ldr	r3, [pc, #8]	; (19af0 <lll_hfclock_on+0xc>)
   19ae6:	6818      	ldr	r0, [r3, #0]
	return api->on(dev, sys);
   19ae8:	6883      	ldr	r3, [r0, #8]
   19aea:	2100      	movs	r1, #0
   19aec:	681b      	ldr	r3, [r3, #0]
   19aee:	4718      	bx	r3
   19af0:	20008a0c 	.word	0x20008a0c

00019af4 <lll_hfclock_off>:
	err = clock_control_off(dev, CLOCK_CONTROL_NRF_SUBSYS_HF);
   19af4:	4b02      	ldr	r3, [pc, #8]	; (19b00 <lll_hfclock_off+0xc>)
   19af6:	6818      	ldr	r0, [r3, #0]
	return api->off(dev, sys);
   19af8:	6883      	ldr	r3, [r0, #8]
   19afa:	2100      	movs	r1, #0
   19afc:	685b      	ldr	r3, [r3, #4]
   19afe:	4718      	bx	r3
   19b00:	20008a0c 	.word	0x20008a0c

00019b04 <prepare_cb>:
{
   19b04:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct lll_scan *lll = p->param;
   19b06:	68c4      	ldr	r4, [r0, #12]
	uint32_t aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   19b08:	4b6b      	ldr	r3, [pc, #428]	; (19cb8 <prepare_cb+0x1b4>)

static inline int lll_is_stop(void *lll)
{
	struct lll_hdr *hdr = lll;

	return !!hdr->is_stop;
   19b0a:	7925      	ldrb	r5, [r4, #4]
{
   19b0c:	b08d      	sub	sp, #52	; 0x34
	if (lll_is_stop(lll)) {
   19b0e:	f015 0501 	ands.w	r5, r5, #1
	uint32_t aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   19b12:	930b      	str	r3, [sp, #44]	; 0x2c
	if (lll_is_stop(lll)) {
   19b14:	d16e      	bne.n	19bf4 <prepare_cb+0xf0>
	lll->state = 0U;
   19b16:	7da3      	ldrb	r3, [r4, #22]
   19b18:	f365 0300 	bfi	r3, r5, #0, #1
   19b1c:	75a3      	strb	r3, [r4, #22]
	radio_reset();
   19b1e:	4606      	mov	r6, r0
   19b20:	f001 f958 	bl	1add4 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   19b24:	4628      	mov	r0, r5
   19b26:	f001 f9a7 	bl	1ae78 <radio_tx_power_set>
	radio_phy_set(0, 0);
   19b2a:	4629      	mov	r1, r5
   19b2c:	4628      	mov	r0, r5
   19b2e:	f001 f977 	bl	1ae20 <radio_phy_set>
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, 0);
   19b32:	462a      	mov	r2, r5
   19b34:	2125      	movs	r1, #37	; 0x25
   19b36:	2008      	movs	r0, #8
   19b38:	f001 f9d6 	bl	1aee8 <radio_pkt_configure>
	node_rx = ull_pdu_rx_alloc_peek(1);
   19b3c:	2001      	movs	r0, #1
   19b3e:	f7fa fd8d 	bl	1465c <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   19b42:	4605      	mov	r5, r0
   19b44:	2800      	cmp	r0, #0
   19b46:	f000 80a9 	beq.w	19c9c <prepare_cb+0x198>
	radio_pkt_rx_set(node_rx->pdu);
   19b4a:	f105 001c 	add.w	r0, r5, #28
   19b4e:	f001 fa01 	bl	1af54 <radio_pkt_rx_set>
	radio_aa_set((uint8_t *)&aa);
   19b52:	a80b      	add	r0, sp, #44	; 0x2c
   19b54:	f001 f9ae 	bl	1aeb4 <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   19b58:	4958      	ldr	r1, [pc, #352]	; (19cbc <prepare_cb+0x1b8>)
   19b5a:	f240 605b 	movw	r0, #1627	; 0x65b
   19b5e:	f001 fa67 	bl	1b030 <radio_crc_configure>
	lll_chan_set(37 + lll->chan);
   19b62:	7da0      	ldrb	r0, [r4, #22]
   19b64:	f3c0 0041 	ubfx	r0, r0, #1, #2
   19b68:	3025      	adds	r0, #37	; 0x25
   19b6a:	f7ff fee1 	bl	19930 <lll_chan_set>
	radio_isr_set(isr_rx, lll);
   19b6e:	4621      	mov	r1, r4
   19b70:	4853      	ldr	r0, [pc, #332]	; (19cc0 <prepare_cb+0x1bc>)
   19b72:	f001 f90f 	bl	1ad94 <radio_isr_set>
	radio_tmr_tifs_set(EVENT_IFS_US);
   19b76:	2096      	movs	r0, #150	; 0x96
   19b78:	f001 fb10 	bl	1b19c <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
   19b7c:	2300      	movs	r3, #0
   19b7e:	461a      	mov	r2, r3
   19b80:	4619      	mov	r1, r3
   19b82:	4618      	mov	r0, r3
   19b84:	f001 fa80 	bl	1b088 <radio_switch_complete_and_tx>
	if (ull_filter_lll_rl_enabled()) {
   19b88:	f7ff fba2 	bl	192d0 <ull_filter_lll_rl_enabled>
   19b8c:	b9e0      	cbnz	r0, 19bc8 <prepare_cb+0xc4>
	if (IS_ENABLED(CONFIG_BT_CTLR_FILTER) && lll->filter_policy) {
   19b8e:	7da3      	ldrb	r3, [r4, #22]
   19b90:	f013 0f18 	tst.w	r3, #24
   19b94:	d179      	bne.n	19c8a <prepare_cb+0x186>
	ticks_at_event += lll_evt_offset_get(evt);
   19b96:	6820      	ldr	r0, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   19b98:	6835      	ldr	r5, [r6, #0]
	ticks_at_event += lll_evt_offset_get(evt);
   19b9a:	f7ff fec3 	bl	19924 <lll_evt_offset_get>
   19b9e:	4405      	add	r5, r0
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
   19ba0:	6872      	ldr	r2, [r6, #4]
   19ba2:	f105 0109 	add.w	r1, r5, #9
   19ba6:	2000      	movs	r0, #0
   19ba8:	f001 fb04 	bl	1b1b4 <radio_tmr_start>
	radio_tmr_end_capture();
   19bac:	f001 fbe2 	bl	1b374 <radio_tmr_end_capture>
	radio_rssi_measure();
   19bb0:	f001 fa84 	bl	1b0bc <radio_rssi_measure>
		if (lll->ticks_window) {
   19bb4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   19bb6:	2b00      	cmp	r3, #0
   19bb8:	d143      	bne.n	19c42 <prepare_cb+0x13e>
		ret = lll_prepare_done(lll);
   19bba:	4620      	mov	r0, r4
   19bbc:	f7ff fe50 	bl	19860 <lll_prepare_done>
		LL_ASSERT(!ret);
   19bc0:	bb78      	cbnz	r0, 19c22 <prepare_cb+0x11e>
}
   19bc2:	2000      	movs	r0, #0
   19bc4:	b00d      	add	sp, #52	; 0x34
   19bc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			ull_filter_lll_get(!!(lll->filter_policy & 0x1));
   19bc8:	7da0      	ldrb	r0, [r4, #22]
   19bca:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   19bce:	f7ff fb1d 	bl	1920c <ull_filter_lll_get>
   19bd2:	4605      	mov	r5, r0
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   19bd4:	f10d 002b 	add.w	r0, sp, #43	; 0x2b
   19bd8:	f7ff fa22 	bl	19020 <ull_filter_lll_irks_get>
		radio_filter_configure(filter->enable_bitmask,
   19bdc:	7869      	ldrb	r1, [r5, #1]
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   19bde:	4607      	mov	r7, r0
		radio_filter_configure(filter->enable_bitmask,
   19be0:	1caa      	adds	r2, r5, #2
   19be2:	7828      	ldrb	r0, [r5, #0]
   19be4:	f001 fa8c 	bl	1b100 <radio_filter_configure>
		radio_ar_configure(count, irks);
   19be8:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
   19bec:	4639      	mov	r1, r7
   19bee:	f001 fc7b 	bl	1b4e8 <radio_ar_configure>
   19bf2:	e7d0      	b.n	19b96 <prepare_cb+0x92>
		err = lll_hfclock_off();
   19bf4:	f7ff ff7e 	bl	19af4 <lll_hfclock_off>
		LL_ASSERT(!err || err == -EBUSY);
   19bf8:	b168      	cbz	r0, 19c16 <prepare_cb+0x112>
   19bfa:	3010      	adds	r0, #16
   19bfc:	d00b      	beq.n	19c16 <prepare_cb+0x112>
   19bfe:	4a31      	ldr	r2, [pc, #196]	; (19cc4 <prepare_cb+0x1c0>)
   19c00:	4931      	ldr	r1, [pc, #196]	; (19cc8 <prepare_cb+0x1c4>)
   19c02:	4832      	ldr	r0, [pc, #200]	; (19ccc <prepare_cb+0x1c8>)
   19c04:	238a      	movs	r3, #138	; 0x8a
   19c06:	f004 f9a4 	bl	1df52 <printk>
   19c0a:	4040      	eors	r0, r0
   19c0c:	f380 8811 	msr	BASEPRI, r0
   19c10:	f04f 0003 	mov.w	r0, #3
   19c14:	df02      	svc	2
		lll_done(NULL);
   19c16:	2000      	movs	r0, #0
   19c18:	f7ff fe24 	bl	19864 <lll_done>
}
   19c1c:	2000      	movs	r0, #0
   19c1e:	b00d      	add	sp, #52	; 0x34
   19c20:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LL_ASSERT(!ret);
   19c22:	4a28      	ldr	r2, [pc, #160]	; (19cc4 <prepare_cb+0x1c0>)
   19c24:	492a      	ldr	r1, [pc, #168]	; (19cd0 <prepare_cb+0x1cc>)
   19c26:	4829      	ldr	r0, [pc, #164]	; (19ccc <prepare_cb+0x1c8>)
   19c28:	f240 131d 	movw	r3, #285	; 0x11d
   19c2c:	f004 f991 	bl	1df52 <printk>
   19c30:	4040      	eors	r0, r0
   19c32:	f380 8811 	msr	BASEPRI, r0
   19c36:	f04f 0003 	mov.w	r0, #3
   19c3a:	df02      	svc	2
}
   19c3c:	2000      	movs	r0, #0
   19c3e:	b00d      	add	sp, #52	; 0x34
   19c40:	bdf0      	pop	{r4, r5, r6, r7, pc}
			ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   19c42:	4824      	ldr	r0, [pc, #144]	; (19cd4 <prepare_cb+0x1d0>)
   19c44:	4a24      	ldr	r2, [pc, #144]	; (19cd8 <prepare_cb+0x1d4>)
   19c46:	9300      	str	r3, [sp, #0]
   19c48:	2100      	movs	r1, #0
   19c4a:	f240 1603 	movw	r6, #259	; 0x103
   19c4e:	e9cd 0607 	strd	r0, r6, [sp, #28]
   19c52:	e9cd 1204 	strd	r1, r2, [sp, #16]
   19c56:	462b      	mov	r3, r5
   19c58:	e9cd 1102 	strd	r1, r1, [sp, #8]
   19c5c:	9406      	str	r4, [sp, #24]
   19c5e:	9101      	str	r1, [sp, #4]
   19c60:	4608      	mov	r0, r1
   19c62:	2201      	movs	r2, #1
   19c64:	f7f7 fe3e 	bl	118e4 <ticker_start>
			LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   19c68:	f030 0302 	bics.w	r3, r0, #2
   19c6c:	d0a5      	beq.n	19bba <prepare_cb+0xb6>
   19c6e:	4a15      	ldr	r2, [pc, #84]	; (19cc4 <prepare_cb+0x1c0>)
   19c70:	491a      	ldr	r1, [pc, #104]	; (19cdc <prepare_cb+0x1d8>)
   19c72:	4816      	ldr	r0, [pc, #88]	; (19ccc <prepare_cb+0x1c8>)
   19c74:	f44f 7382 	mov.w	r3, #260	; 0x104
   19c78:	f004 f96b 	bl	1df52 <printk>
   19c7c:	4040      	eors	r0, r0
   19c7e:	f380 8811 	msr	BASEPRI, r0
   19c82:	f04f 0003 	mov.w	r0, #3
   19c86:	df02      	svc	2
   19c88:	e797      	b.n	19bba <prepare_cb+0xb6>
		struct lll_filter *wl = ull_filter_lll_get(true);
   19c8a:	2001      	movs	r0, #1
   19c8c:	f7ff fabe 	bl	1920c <ull_filter_lll_get>
		radio_filter_configure(wl->enable_bitmask,
   19c90:	7841      	ldrb	r1, [r0, #1]
   19c92:	1c82      	adds	r2, r0, #2
   19c94:	7800      	ldrb	r0, [r0, #0]
   19c96:	f001 fa33 	bl	1b100 <radio_filter_configure>
   19c9a:	e77c      	b.n	19b96 <prepare_cb+0x92>
	LL_ASSERT(node_rx);
   19c9c:	4a09      	ldr	r2, [pc, #36]	; (19cc4 <prepare_cb+0x1c0>)
   19c9e:	4910      	ldr	r1, [pc, #64]	; (19ce0 <prepare_cb+0x1dc>)
   19ca0:	480a      	ldr	r0, [pc, #40]	; (19ccc <prepare_cb+0x1c8>)
   19ca2:	23a8      	movs	r3, #168	; 0xa8
   19ca4:	f004 f955 	bl	1df52 <printk>
   19ca8:	4040      	eors	r0, r0
   19caa:	f380 8811 	msr	BASEPRI, r0
   19cae:	f04f 0003 	mov.w	r0, #3
   19cb2:	df02      	svc	2
   19cb4:	e749      	b.n	19b4a <prepare_cb+0x46>
   19cb6:	bf00      	nop
   19cb8:	8e89bed6 	.word	0x8e89bed6
   19cbc:	00555555 	.word	0x00555555
   19cc0:	000052e9 	.word	0x000052e9
   19cc4:	00024a0c 	.word	0x00024a0c
   19cc8:	000249d0 	.word	0x000249d0
   19ccc:	00023ff4 	.word	0x00023ff4
   19cd0:	000242b0 	.word	0x000242b0
   19cd4:	00019eb5 	.word	0x00019eb5
   19cd8:	00019ce5 	.word	0x00019ce5
   19cdc:	00024a60 	.word	0x00024a60
   19ce0:	00024a58 	.word	0x00024a58

00019ce4 <ticker_stop_cb>:
{
   19ce4:	b508      	push	{r3, lr}
	radio_isr_set(isr_cleanup, param);
   19ce6:	4619      	mov	r1, r3
   19ce8:	4803      	ldr	r0, [pc, #12]	; (19cf8 <ticker_stop_cb+0x14>)
   19cea:	f001 f853 	bl	1ad94 <radio_isr_set>
}
   19cee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_disable();
   19cf2:	f001 b95b 	b.w	1afac <radio_disable>
   19cf6:	bf00      	nop
   19cf8:	00019fc5 	.word	0x00019fc5

00019cfc <isr_common_done>:
{
   19cfc:	b530      	push	{r4, r5, lr}
   19cfe:	b083      	sub	sp, #12
   19d00:	4605      	mov	r5, r0
	lll_isr_status_reset();
   19d02:	f7ff fe6b 	bl	199dc <lll_isr_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   19d06:	2096      	movs	r0, #150	; 0x96
   19d08:	f001 fa48 	bl	1b19c <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
   19d0c:	2300      	movs	r3, #0
   19d0e:	4618      	mov	r0, r3
   19d10:	461a      	mov	r2, r3
   19d12:	4619      	mov	r1, r3
   19d14:	f001 f9b8 	bl	1b088 <radio_switch_complete_and_tx>
	node_rx = ull_pdu_rx_alloc_peek(1);
   19d18:	2001      	movs	r0, #1
   19d1a:	f7fa fc9f 	bl	1465c <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   19d1e:	4604      	mov	r4, r0
   19d20:	b1c0      	cbz	r0, 19d54 <isr_common_done+0x58>
	radio_pkt_rx_set(node_rx->pdu);
   19d22:	f104 001c 	add.w	r0, r4, #28
   19d26:	f001 f915 	bl	1af54 <radio_pkt_rx_set>
	if (ull_filter_lll_rl_enabled()) {
   19d2a:	f7ff fad1 	bl	192d0 <ull_filter_lll_rl_enabled>
   19d2e:	b938      	cbnz	r0, 19d40 <isr_common_done+0x44>
	radio_rssi_measure();
   19d30:	f001 f9c4 	bl	1b0bc <radio_rssi_measure>
	radio_isr_set(isr_rx, param);
   19d34:	480e      	ldr	r0, [pc, #56]	; (19d70 <isr_common_done+0x74>)
   19d36:	4629      	mov	r1, r5
   19d38:	f001 f82c 	bl	1ad94 <radio_isr_set>
}
   19d3c:	b003      	add	sp, #12
   19d3e:	bd30      	pop	{r4, r5, pc}
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   19d40:	f10d 0007 	add.w	r0, sp, #7
   19d44:	f7ff f96c 	bl	19020 <ull_filter_lll_irks_get>
   19d48:	4601      	mov	r1, r0
		radio_ar_configure(count, irks);
   19d4a:	f89d 0007 	ldrb.w	r0, [sp, #7]
   19d4e:	f001 fbcb 	bl	1b4e8 <radio_ar_configure>
   19d52:	e7ed      	b.n	19d30 <isr_common_done+0x34>
	LL_ASSERT(node_rx);
   19d54:	4a07      	ldr	r2, [pc, #28]	; (19d74 <isr_common_done+0x78>)
   19d56:	4908      	ldr	r1, [pc, #32]	; (19d78 <isr_common_done+0x7c>)
   19d58:	4808      	ldr	r0, [pc, #32]	; (19d7c <isr_common_done+0x80>)
   19d5a:	f44f 73fd 	mov.w	r3, #506	; 0x1fa
   19d5e:	f004 f8f8 	bl	1df52 <printk>
   19d62:	4040      	eors	r0, r0
   19d64:	f380 8811 	msr	BASEPRI, r0
   19d68:	f04f 0003 	mov.w	r0, #3
   19d6c:	df02      	svc	2
   19d6e:	e7d8      	b.n	19d22 <isr_common_done+0x26>
   19d70:	000052e9 	.word	0x000052e9
   19d74:	00024a0c 	.word	0x00024a0c
   19d78:	00024a58 	.word	0x00024a58
   19d7c:	00023ff4 	.word	0x00023ff4

00019d80 <isr_done>:
{
   19d80:	b510      	push	{r4, lr}
   19d82:	4604      	mov	r4, r0
	isr_common_done(param);
   19d84:	f7ff ffba 	bl	19cfc <isr_common_done>
	lll->state = 0U;
   19d88:	7da3      	ldrb	r3, [r4, #22]
   19d8a:	f36f 0300 	bfc	r3, #0, #1
   19d8e:	75a3      	strb	r3, [r4, #22]
	radio_rx_enable();
   19d90:	f001 f906 	bl	1afa0 <radio_rx_enable>
}
   19d94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_tmr_end_capture();
   19d98:	f001 baec 	b.w	1b374 <radio_tmr_end_capture>

00019d9c <isr_tx>:
{
   19d9c:	b570      	push	{r4, r5, r6, lr}
   19d9e:	b082      	sub	sp, #8
   19da0:	4605      	mov	r5, r0
	lll_isr_tx_status_reset();
   19da2:	f7ff fe09 	bl	199b8 <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   19da6:	2096      	movs	r0, #150	; 0x96
   19da8:	f001 f9f8 	bl	1b19c <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
   19dac:	2300      	movs	r3, #0
   19dae:	4618      	mov	r0, r3
   19db0:	461a      	mov	r2, r3
   19db2:	4619      	mov	r1, r3
   19db4:	f001 f968 	bl	1b088 <radio_switch_complete_and_tx>
	node_rx = ull_pdu_rx_alloc_peek(1);
   19db8:	2001      	movs	r0, #1
   19dba:	f7fa fc4f 	bl	1465c <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   19dbe:	4604      	mov	r4, r0
   19dc0:	2800      	cmp	r0, #0
   19dc2:	d03d      	beq.n	19e40 <isr_tx+0xa4>
	radio_pkt_rx_set(node_rx->pdu);
   19dc4:	f104 001c 	add.w	r0, r4, #28
   19dc8:	f001 f8c4 	bl	1af54 <radio_pkt_rx_set>
	LL_ASSERT(!radio_is_ready());
   19dcc:	f001 f912 	bl	1aff4 <radio_is_ready>
   19dd0:	b9d8      	cbnz	r0, 19e0a <isr_tx+0x6e>
	if (ull_filter_lll_rl_enabled()) {
   19dd2:	f7ff fa7d 	bl	192d0 <ull_filter_lll_rl_enabled>
   19dd6:	bb48      	cbnz	r0, 19e2c <isr_tx+0x90>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   19dd8:	f001 fada 	bl	1b390 <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(0, 0);
   19ddc:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   19dde:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(0, 0);
   19de0:	4608      	mov	r0, r1
   19de2:	f001 f8cf 	bl	1af84 <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(0, 0);
   19de6:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(0, 0);
   19de8:	4606      	mov	r6, r0
	hcto -= radio_tx_chain_delay_get(0, 0);
   19dea:	4608      	mov	r0, r1
   19dec:	f001 f8c8 	bl	1af80 <radio_tx_chain_delay_get>
   19df0:	4434      	add	r4, r6
   19df2:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
   19df4:	1a20      	subs	r0, r4, r0
   19df6:	f001 fa9d 	bl	1b334 <radio_tmr_hcto_configure>
	radio_rssi_measure();
   19dfa:	f001 f95f 	bl	1b0bc <radio_rssi_measure>
	radio_isr_set(isr_rx, param);
   19dfe:	4817      	ldr	r0, [pc, #92]	; (19e5c <isr_tx+0xc0>)
   19e00:	4629      	mov	r1, r5
   19e02:	f000 ffc7 	bl	1ad94 <radio_isr_set>
}
   19e06:	b002      	add	sp, #8
   19e08:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(!radio_is_ready());
   19e0a:	4a15      	ldr	r2, [pc, #84]	; (19e60 <isr_tx+0xc4>)
   19e0c:	4915      	ldr	r1, [pc, #84]	; (19e64 <isr_tx+0xc8>)
   19e0e:	4816      	ldr	r0, [pc, #88]	; (19e68 <isr_tx+0xcc>)
   19e10:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
   19e14:	f004 f89d 	bl	1df52 <printk>
   19e18:	4040      	eors	r0, r0
   19e1a:	f380 8811 	msr	BASEPRI, r0
   19e1e:	f04f 0003 	mov.w	r0, #3
   19e22:	df02      	svc	2
	if (ull_filter_lll_rl_enabled()) {
   19e24:	f7ff fa54 	bl	192d0 <ull_filter_lll_rl_enabled>
   19e28:	2800      	cmp	r0, #0
   19e2a:	d0d5      	beq.n	19dd8 <isr_tx+0x3c>
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   19e2c:	f10d 0007 	add.w	r0, sp, #7
   19e30:	f7ff f8f6 	bl	19020 <ull_filter_lll_irks_get>
   19e34:	4601      	mov	r1, r0
		radio_ar_configure(count, irks);
   19e36:	f89d 0007 	ldrb.w	r0, [sp, #7]
   19e3a:	f001 fb55 	bl	1b4e8 <radio_ar_configure>
   19e3e:	e7cb      	b.n	19dd8 <isr_tx+0x3c>
	LL_ASSERT(node_rx);
   19e40:	4a07      	ldr	r2, [pc, #28]	; (19e60 <isr_tx+0xc4>)
   19e42:	490a      	ldr	r1, [pc, #40]	; (19e6c <isr_tx+0xd0>)
   19e44:	4808      	ldr	r0, [pc, #32]	; (19e68 <isr_tx+0xcc>)
   19e46:	f44f 73e6 	mov.w	r3, #460	; 0x1cc
   19e4a:	f004 f882 	bl	1df52 <printk>
   19e4e:	4040      	eors	r0, r0
   19e50:	f380 8811 	msr	BASEPRI, r0
   19e54:	f04f 0003 	mov.w	r0, #3
   19e58:	df02      	svc	2
   19e5a:	e7b3      	b.n	19dc4 <isr_tx+0x28>
   19e5c:	000052e9 	.word	0x000052e9
   19e60:	00024a0c 	.word	0x00024a0c
   19e64:	00024a7c 	.word	0x00024a7c
   19e68:	00023ff4 	.word	0x00023ff4
   19e6c:	00024a58 	.word	0x00024a58

00019e70 <resume_prepare_cb>:
	struct evt_hdr *evt = HDR_LLL2EVT(p->param);
   19e70:	68c3      	ldr	r3, [r0, #12]
{
   19e72:	b570      	push	{r4, r5, r6, lr}
	struct evt_hdr *evt = HDR_LLL2EVT(p->param);
   19e74:	681e      	ldr	r6, [r3, #0]
{
   19e76:	4604      	mov	r4, r0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_evt_offset_get(evt);
   19e78:	f7f7 fde6 	bl	11a48 <ticker_ticks_now_get>
   19e7c:	4605      	mov	r5, r0
   19e7e:	4630      	mov	r0, r6
   19e80:	f7ff fd50 	bl	19924 <lll_evt_offset_get>
	p->remainder = 0;
   19e84:	2300      	movs	r3, #0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_evt_offset_get(evt);
   19e86:	1a2d      	subs	r5, r5, r0
	p->remainder = 0;
   19e88:	e9c4 5300 	strd	r5, r3, [r4]
	p->lazy = 0;
   19e8c:	8123      	strh	r3, [r4, #8]
	return prepare_cb(p);
   19e8e:	4620      	mov	r0, r4
}
   19e90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return prepare_cb(p);
   19e94:	f7ff be36 	b.w	19b04 <prepare_cb>

00019e98 <isr_window>:
{
   19e98:	b508      	push	{r3, lr}
	isr_common_done(param);
   19e9a:	f7ff ff2f 	bl	19cfc <isr_common_done>
	ticks_at_start = ticker_ticks_now_get() +
   19e9e:	f7f7 fdd3 	bl	11a48 <ticker_ticks_now_get>
	remainder_us = radio_tmr_start_tick(0, ticks_at_start);
   19ea2:	1cc1      	adds	r1, r0, #3
   19ea4:	2000      	movs	r0, #0
   19ea6:	f001 f9f1 	bl	1b28c <radio_tmr_start_tick>
}
   19eaa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_end_capture();
   19eae:	f001 ba61 	b.w	1b374 <radio_tmr_end_capture>
   19eb2:	bf00      	nop

00019eb4 <ticker_op_start_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   19eb4:	b900      	cbnz	r0, 19eb8 <ticker_op_start_cb+0x4>
   19eb6:	4770      	bx	lr
{
   19eb8:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   19eba:	4a07      	ldr	r2, [pc, #28]	; (19ed8 <ticker_op_start_cb+0x24>)
   19ebc:	4907      	ldr	r1, [pc, #28]	; (19edc <ticker_op_start_cb+0x28>)
   19ebe:	4808      	ldr	r0, [pc, #32]	; (19ee0 <ticker_op_start_cb+0x2c>)
   19ec0:	f240 1379 	movw	r3, #377	; 0x179
   19ec4:	f004 f845 	bl	1df52 <printk>
   19ec8:	4040      	eors	r0, r0
   19eca:	f380 8811 	msr	BASEPRI, r0
   19ece:	f04f 0003 	mov.w	r0, #3
   19ed2:	df02      	svc	2
}
   19ed4:	bd08      	pop	{r3, pc}
   19ed6:	bf00      	nop
   19ed8:	00024a0c 	.word	0x00024a0c
   19edc:	00024498 	.word	0x00024498
   19ee0:	00023ff4 	.word	0x00023ff4

00019ee4 <abort_cb>:
{
   19ee4:	b510      	push	{r4, lr}
	if (!prepare_param) {
   19ee6:	b1b8      	cbz	r0, 19f18 <abort_cb+0x34>
	err = lll_hfclock_off();
   19ee8:	460c      	mov	r4, r1
   19eea:	f7ff fe03 	bl	19af4 <lll_hfclock_off>
	LL_ASSERT(!err || err == -EBUSY);
   19eee:	b170      	cbz	r0, 19f0e <abort_cb+0x2a>
   19ef0:	3010      	adds	r0, #16
   19ef2:	d00c      	beq.n	19f0e <abort_cb+0x2a>
   19ef4:	4a0c      	ldr	r2, [pc, #48]	; (19f28 <abort_cb+0x44>)
   19ef6:	490d      	ldr	r1, [pc, #52]	; (19f2c <abort_cb+0x48>)
   19ef8:	480d      	ldr	r0, [pc, #52]	; (19f30 <abort_cb+0x4c>)
   19efa:	f240 1369 	movw	r3, #361	; 0x169
   19efe:	f004 f828 	bl	1df52 <printk>
   19f02:	4040      	eors	r0, r0
   19f04:	f380 8811 	msr	BASEPRI, r0
   19f08:	f04f 0003 	mov.w	r0, #3
   19f0c:	df02      	svc	2
	lll_done(param);
   19f0e:	4620      	mov	r0, r4
}
   19f10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   19f14:	f7ff bca6 	b.w	19864 <lll_done>
			radio_isr_set(isr_abort, param);
   19f18:	4806      	ldr	r0, [pc, #24]	; (19f34 <abort_cb+0x50>)
   19f1a:	f000 ff3b 	bl	1ad94 <radio_isr_set>
}
   19f1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			radio_disable();
   19f22:	f001 b843 	b.w	1afac <radio_disable>
   19f26:	bf00      	nop
   19f28:	00024a0c 	.word	0x00024a0c
   19f2c:	000249d0 	.word	0x000249d0
   19f30:	00023ff4 	.word	0x00023ff4
   19f34:	00019ffd 	.word	0x00019ffd

00019f38 <is_abort_cb>:
	if (next != curr) {
   19f38:	4282      	cmp	r2, r0
{
   19f3a:	b510      	push	{r4, lr}
	if (next != curr) {
   19f3c:	d11b      	bne.n	19f76 <is_abort_cb+0x3e>
	radio_isr_set(isr_window, lll);
   19f3e:	4614      	mov	r4, r2
   19f40:	481b      	ldr	r0, [pc, #108]	; (19fb0 <is_abort_cb+0x78>)
   19f42:	4611      	mov	r1, r2
   19f44:	f000 ff26 	bl	1ad94 <radio_isr_set>
	radio_disable();
   19f48:	f001 f830 	bl	1afac <radio_disable>
	if (++lll->chan == 3U) {
   19f4c:	7da3      	ldrb	r3, [r4, #22]
   19f4e:	f3c3 0041 	ubfx	r0, r3, #1, #2
   19f52:	3001      	adds	r0, #1
   19f54:	f000 0003 	and.w	r0, r0, #3
   19f58:	2803      	cmp	r0, #3
   19f5a:	d007      	beq.n	19f6c <is_abort_cb+0x34>
   19f5c:	f360 0342 	bfi	r3, r0, #1, #2
   19f60:	75a3      	strb	r3, [r4, #22]
   19f62:	3025      	adds	r0, #37	; 0x25
	lll_chan_set(37 + lll->chan);
   19f64:	f7ff fce4 	bl	19930 <lll_chan_set>
	return 0;
   19f68:	2000      	movs	r0, #0
}
   19f6a:	bd10      	pop	{r4, pc}
		lll->chan = 0U;
   19f6c:	f36f 0342 	bfc	r3, #1, #2
   19f70:	75a3      	strb	r3, [r4, #22]
   19f72:	2025      	movs	r0, #37	; 0x25
   19f74:	e7f6      	b.n	19f64 <is_abort_cb+0x2c>
		*resume_cb = resume_prepare_cb;
   19f76:	4a0f      	ldr	r2, [pc, #60]	; (19fb4 <is_abort_cb+0x7c>)
   19f78:	601a      	str	r2, [r3, #0]
		*resume_prio = 0; /* TODO: */
   19f7a:	9a02      	ldr	r2, [sp, #8]
   19f7c:	2300      	movs	r3, #0
   19f7e:	6013      	str	r3, [r2, #0]
		err = lll_hfclock_on();
   19f80:	f7ff fdb0 	bl	19ae4 <lll_hfclock_on>
		LL_ASSERT(!err || err == -EINPROGRESS);
   19f84:	b188      	cbz	r0, 19faa <is_abort_cb+0x72>
   19f86:	3044      	adds	r0, #68	; 0x44
   19f88:	d00f      	beq.n	19faa <is_abort_cb+0x72>
   19f8a:	4a0b      	ldr	r2, [pc, #44]	; (19fb8 <is_abort_cb+0x80>)
   19f8c:	490b      	ldr	r1, [pc, #44]	; (19fbc <is_abort_cb+0x84>)
   19f8e:	480c      	ldr	r0, [pc, #48]	; (19fc0 <is_abort_cb+0x88>)
   19f90:	f240 133f 	movw	r3, #319	; 0x13f
   19f94:	f003 ffdd 	bl	1df52 <printk>
   19f98:	4040      	eors	r0, r0
   19f9a:	f380 8811 	msr	BASEPRI, r0
   19f9e:	f04f 0003 	mov.w	r0, #3
   19fa2:	df02      	svc	2
   19fa4:	f06f 000a 	mvn.w	r0, #10
}
   19fa8:	bd10      	pop	{r4, pc}
   19faa:	f06f 000a 	mvn.w	r0, #10
   19fae:	bd10      	pop	{r4, pc}
   19fb0:	00019e99 	.word	0x00019e99
   19fb4:	00019e71 	.word	0x00019e71
   19fb8:	00024a0c 	.word	0x00024a0c
   19fbc:	00024a90 	.word	0x00024a90
   19fc0:	00023ff4 	.word	0x00023ff4

00019fc4 <isr_cleanup>:
{
   19fc4:	b538      	push	{r3, r4, r5, lr}
   19fc6:	4604      	mov	r4, r0
	if (lll_is_done(param)) {
   19fc8:	f7ff fca0 	bl	1990c <lll_is_done>
   19fcc:	b100      	cbz	r0, 19fd0 <isr_cleanup+0xc>
}
   19fce:	bd38      	pop	{r3, r4, r5, pc}
	radio_filter_disable();
   19fd0:	4605      	mov	r5, r0
   19fd2:	f001 f8b1 	bl	1b138 <radio_filter_disable>
	if (++lll->chan == 3U) {
   19fd6:	7da2      	ldrb	r2, [r4, #22]
   19fd8:	f3c2 0341 	ubfx	r3, r2, #1, #2
   19fdc:	3301      	adds	r3, #1
   19fde:	f003 0303 	and.w	r3, r3, #3
   19fe2:	2b03      	cmp	r3, #3
   19fe4:	bf14      	ite	ne
   19fe6:	f363 0242 	bfine	r2, r3, #1, #2
		lll->chan = 0U;
   19fea:	f365 0242 	bfieq	r2, r5, #1, #2
   19fee:	75a2      	strb	r2, [r4, #22]
	lll_isr_cleanup(param);
   19ff0:	4620      	mov	r0, r4
}
   19ff2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lll_isr_cleanup(param);
   19ff6:	f7ff bcff 	b.w	199f8 <lll_isr_cleanup>
   19ffa:	bf00      	nop

00019ffc <isr_abort>:
{
   19ffc:	b510      	push	{r4, lr}
   19ffe:	b082      	sub	sp, #8
   1a000:	4604      	mov	r4, r0
	lll_isr_status_reset();
   1a002:	f7ff fceb 	bl	199dc <lll_isr_status_reset>
	ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_LLL,
   1a006:	2300      	movs	r3, #0
   1a008:	9300      	str	r3, [sp, #0]
   1a00a:	4619      	mov	r1, r3
   1a00c:	4618      	mov	r0, r3
   1a00e:	2201      	movs	r2, #1
   1a010:	f7f7 fcd4 	bl	119bc <ticker_stop>
	radio_disable();
   1a014:	f000 ffca 	bl	1afac <radio_disable>
	isr_cleanup(param);
   1a018:	4620      	mov	r0, r4
}
   1a01a:	b002      	add	sp, #8
   1a01c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	isr_cleanup(param);
   1a020:	f7ff bfd0 	b.w	19fc4 <isr_cleanup>

0001a024 <isr_rx_scan_report.isra.0>:
			&srsp->scan_rsp.addr[0], BDADDR_SIZE) == 0));
}

static int isr_rx_scan_report(struct lll_scan *lll, uint8_t rssi_ready,
   1a024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a026:	4607      	mov	r7, r0
				uint8_t rl_idx, bool dir_report)
{
	struct node_rx_pdu *node_rx;

	node_rx = ull_pdu_rx_alloc_peek(3);
   1a028:	2003      	movs	r0, #3
static int isr_rx_scan_report(struct lll_scan *lll, uint8_t rssi_ready,
   1a02a:	460e      	mov	r6, r1
   1a02c:	4615      	mov	r5, r2
	node_rx = ull_pdu_rx_alloc_peek(3);
   1a02e:	f7fa fb15 	bl	1465c <ull_pdu_rx_alloc_peek>
	if (!node_rx) {
   1a032:	b1c8      	cbz	r0, 1a068 <isr_rx_scan_report.isra.0+0x44>
		return -ENOBUFS;
	}
	ull_pdu_rx_alloc();
   1a034:	4604      	mov	r4, r0
   1a036:	f7fa fb2f 	bl	14698 <ull_pdu_rx_alloc>

	/* Prepare the report (adv or scan resp) */
	node_rx->hdr.handle = 0xffff;
   1a03a:	f64f 72ff 	movw	r2, #65535	; 0xffff
			}
			break;
		}
#endif /* CONFIG_BT_CTLR_ADV_EXT */
	} else {
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
   1a03e:	2304      	movs	r3, #4
	node_rx->hdr.handle = 0xffff;
   1a040:	80e2      	strh	r2, [r4, #6]
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
   1a042:	7123      	strb	r3, [r4, #4]
	}

	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ?
   1a044:	b95f      	cbnz	r7, 1a05e <isr_rx_scan_report.isra.0+0x3a>
   1a046:	207f      	movs	r0, #127	; 0x7f
   1a048:	7620      	strb	r0, [r4, #24]
		node_rx->hdr.rx_ftr.chan = _radio.scanner.chan - 1;
		node_rx->hdr.rx_ftr.ticks_anchor = _radio.ticks_anchor;
	}
#endif /* CONFIG_BT_CTLR_EXT_SCAN_FP */

	ull_rx_put(node_rx->hdr.link, node_rx);
   1a04a:	4621      	mov	r1, r4
   1a04c:	6820      	ldr	r0, [r4, #0]
	node_rx->hdr.rx_ftr.rl_idx = rl_idx;
   1a04e:	76a6      	strb	r6, [r4, #26]
	node_rx->hdr.rx_ftr.direct = dir_report;
   1a050:	76e5      	strb	r5, [r4, #27]
	ull_rx_put(node_rx->hdr.link, node_rx);
   1a052:	f7fa fb39 	bl	146c8 <ull_rx_put>
	ull_rx_sched();
   1a056:	f7fa fb47 	bl	146e8 <ull_rx_sched>

	return 0;
   1a05a:	2000      	movs	r0, #0
}
   1a05c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				   (radio_rssi_get() & 0x7f)
   1a05e:	f001 f837 	bl	1b0d0 <radio_rssi_get>
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ?
   1a062:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   1a066:	e7ef      	b.n	1a048 <isr_rx_scan_report.isra.0+0x24>
		return -ENOBUFS;
   1a068:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
   1a06c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a06e:	bf00      	nop

0001a070 <lll_scan_init>:
}
   1a070:	2000      	movs	r0, #0
   1a072:	4770      	bx	lr

0001a074 <lll_scan_reset>:
   1a074:	2000      	movs	r0, #0
   1a076:	4770      	bx	lr

0001a078 <lll_scan_prepare>:
{
   1a078:	b510      	push	{r4, lr}
   1a07a:	b082      	sub	sp, #8
   1a07c:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   1a07e:	f7ff fd31 	bl	19ae4 <lll_hfclock_on>
	LL_ASSERT(!err || err == -EINPROGRESS);
   1a082:	b108      	cbz	r0, 1a088 <lll_scan_prepare+0x10>
   1a084:	3044      	adds	r0, #68	; 0x44
   1a086:	d119      	bne.n	1a0bc <lll_scan_prepare+0x44>
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, p);
   1a088:	4a13      	ldr	r2, [pc, #76]	; (1a0d8 <lll_scan_prepare+0x60>)
   1a08a:	4914      	ldr	r1, [pc, #80]	; (1a0dc <lll_scan_prepare+0x64>)
   1a08c:	4814      	ldr	r0, [pc, #80]	; (1a0e0 <lll_scan_prepare+0x68>)
   1a08e:	9400      	str	r4, [sp, #0]
   1a090:	2300      	movs	r3, #0
   1a092:	f7ff fb59 	bl	19748 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   1a096:	b108      	cbz	r0, 1a09c <lll_scan_prepare+0x24>
   1a098:	3044      	adds	r0, #68	; 0x44
   1a09a:	d101      	bne.n	1a0a0 <lll_scan_prepare+0x28>
}
   1a09c:	b002      	add	sp, #8
   1a09e:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   1a0a0:	4a10      	ldr	r2, [pc, #64]	; (1a0e4 <lll_scan_prepare+0x6c>)
   1a0a2:	4911      	ldr	r1, [pc, #68]	; (1a0e8 <lll_scan_prepare+0x70>)
   1a0a4:	4811      	ldr	r0, [pc, #68]	; (1a0ec <lll_scan_prepare+0x74>)
   1a0a6:	236f      	movs	r3, #111	; 0x6f
   1a0a8:	f003 ff53 	bl	1df52 <printk>
   1a0ac:	4040      	eors	r0, r0
   1a0ae:	f380 8811 	msr	BASEPRI, r0
   1a0b2:	f04f 0003 	mov.w	r0, #3
   1a0b6:	df02      	svc	2
}
   1a0b8:	b002      	add	sp, #8
   1a0ba:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   1a0bc:	4a09      	ldr	r2, [pc, #36]	; (1a0e4 <lll_scan_prepare+0x6c>)
   1a0be:	490a      	ldr	r1, [pc, #40]	; (1a0e8 <lll_scan_prepare+0x70>)
   1a0c0:	480a      	ldr	r0, [pc, #40]	; (1a0ec <lll_scan_prepare+0x74>)
   1a0c2:	236c      	movs	r3, #108	; 0x6c
   1a0c4:	f003 ff45 	bl	1df52 <printk>
   1a0c8:	4040      	eors	r0, r0
   1a0ca:	f380 8811 	msr	BASEPRI, r0
   1a0ce:	f04f 0003 	mov.w	r0, #3
   1a0d2:	df02      	svc	2
   1a0d4:	e7d8      	b.n	1a088 <lll_scan_prepare+0x10>
   1a0d6:	bf00      	nop
   1a0d8:	00019b05 	.word	0x00019b05
   1a0dc:	00019ee5 	.word	0x00019ee5
   1a0e0:	00019f39 	.word	0x00019f39
   1a0e4:	00024a0c 	.word	0x00024a0c
   1a0e8:	00024a90 	.word	0x00024a90
   1a0ec:	00023ff4 	.word	0x00023ff4

0001a0f0 <isr_done>:
{
	return 0;
}

static void isr_done(void *param)
{
   1a0f0:	b538      	push	{r3, r4, r5, lr}
   1a0f2:	4605      	mov	r5, r0
	struct event_done_extra *e;

	lll_isr_status_reset();
   1a0f4:	f7ff fc72 	bl	199dc <lll_isr_status_reset>

	e = ull_event_done_extra_get();
   1a0f8:	f7fa fb62 	bl	147c0 <ull_event_done_extra_get>
	LL_ASSERT(e);
   1a0fc:	4604      	mov	r4, r0
   1a0fe:	b178      	cbz	r0, 1a120 <isr_done+0x30>

	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
	e->trx_cnt = trx_cnt;
   1a100:	4b0e      	ldr	r3, [pc, #56]	; (1a13c <isr_done+0x4c>)
	e->crc_valid = crc_valid;
   1a102:	490f      	ldr	r1, [pc, #60]	; (1a140 <isr_done+0x50>)
	e->trx_cnt = trx_cnt;
   1a104:	881b      	ldrh	r3, [r3, #0]

#if defined(CONFIG_BT_CTLR_LE_ENC)
	e->mic_state = mic_state;
   1a106:	4a0f      	ldr	r2, [pc, #60]	; (1a144 <isr_done+0x54>)
	e->trx_cnt = trx_cnt;
   1a108:	80a3      	strh	r3, [r4, #4]
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   1a10a:	2301      	movs	r3, #1
	e->crc_valid = crc_valid;
   1a10c:	7809      	ldrb	r1, [r1, #0]
	e->mic_state = mic_state;
   1a10e:	7812      	ldrb	r2, [r2, #0]
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   1a110:	7023      	strb	r3, [r4, #0]
			lll->slave.window_size_event_us = 0;
		}
	}
#endif /* CONFIG_BT_PERIPHERAL */

	lll_isr_cleanup(param);
   1a112:	4628      	mov	r0, r5
	e->crc_valid = crc_valid;
   1a114:	71a1      	strb	r1, [r4, #6]
	e->mic_state = mic_state;
   1a116:	71e2      	strb	r2, [r4, #7]
}
   1a118:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lll_isr_cleanup(param);
   1a11c:	f7ff bc6c 	b.w	199f8 <lll_isr_cleanup>
	LL_ASSERT(e);
   1a120:	4a09      	ldr	r2, [pc, #36]	; (1a148 <isr_done+0x58>)
   1a122:	490a      	ldr	r1, [pc, #40]	; (1a14c <isr_done+0x5c>)
   1a124:	480a      	ldr	r0, [pc, #40]	; (1a150 <isr_done+0x60>)
   1a126:	f240 2331 	movw	r3, #561	; 0x231
   1a12a:	f003 ff12 	bl	1df52 <printk>
   1a12e:	4040      	eors	r0, r0
   1a130:	f380 8811 	msr	BASEPRI, r0
   1a134:	f04f 0003 	mov.w	r0, #3
   1a138:	df02      	svc	2
   1a13a:	e7e1      	b.n	1a100 <isr_done+0x10>
   1a13c:	200096c0 	.word	0x200096c0
   1a140:	20009c47 	.word	0x20009c47
   1a144:	20009c48 	.word	0x20009c48
   1a148:	00024ab8 	.word	0x00024ab8
   1a14c:	00024b04 	.word	0x00024b04
   1a150:	00023ff4 	.word	0x00023ff4

0001a154 <empty_tx_enqueue>:

	return 0;
}

static struct pdu_data *empty_tx_enqueue(struct lll_conn *lll)
{
   1a154:	b538      	push	{r3, r4, r5, lr}
	struct pdu_data *p;

	lll->empty = 1;
   1a156:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
   1a15a:	f043 0304 	orr.w	r3, r3, #4
   1a15e:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
{
   1a162:	4605      	mov	r5, r0

	p = (void *)radio_pkt_empty_get();
   1a164:	f000 ff7a 	bl	1b05c <radio_pkt_empty_get>
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1a168:	7803      	ldrb	r3, [r0, #0]
	p->len = 0;
   1a16a:	2200      	movs	r2, #0
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1a16c:	2101      	movs	r1, #1
   1a16e:	f361 0301 	bfi	r3, r1, #0, #2
	p->len = 0;
   1a172:	7042      	strb	r2, [r0, #1]
	p = (void *)radio_pkt_empty_get();
   1a174:	4604      	mov	r4, r0
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1a176:	7003      	strb	r3, [r0, #0]
	if (memq_peek(lll->memq_tx.head, lll->memq_tx.tail, NULL)) {
   1a178:	e9d5 010c 	ldrd	r0, r1, [r5, #48]	; 0x30
   1a17c:	f7f5 ffba 	bl	100f4 <memq_peek>
   1a180:	7823      	ldrb	r3, [r4, #0]
   1a182:	3800      	subs	r0, #0
   1a184:	bf18      	it	ne
   1a186:	2001      	movne	r0, #1
   1a188:	f360 1304 	bfi	r3, r0, #4, #1
   1a18c:	7023      	strb	r3, [r4, #0]
	} else {
		p->md = 0;
	}

	return p;
}
   1a18e:	4620      	mov	r0, r4
   1a190:	bd38      	pop	{r3, r4, r5, pc}
   1a192:	bf00      	nop

0001a194 <lll_conn_init>:
}
   1a194:	2000      	movs	r0, #0
   1a196:	4770      	bx	lr

0001a198 <lll_conn_reset>:
   1a198:	2000      	movs	r0, #0
   1a19a:	4770      	bx	lr

0001a19c <lll_conn_sca_local_get>:
}
   1a19c:	2007      	movs	r0, #7
   1a19e:	4770      	bx	lr

0001a1a0 <lll_conn_prepare_reset>:
	crc_expire = 0U;
   1a1a0:	4805      	ldr	r0, [pc, #20]	; (1a1b8 <lll_conn_prepare_reset+0x18>)
	crc_valid = 0U;
   1a1a2:	4906      	ldr	r1, [pc, #24]	; (1a1bc <lll_conn_prepare_reset+0x1c>)
	mic_state = LLL_CONN_MIC_NONE;
   1a1a4:	4a06      	ldr	r2, [pc, #24]	; (1a1c0 <lll_conn_prepare_reset+0x20>)
{
   1a1a6:	b410      	push	{r4}
	trx_cnt = 0U;
   1a1a8:	2300      	movs	r3, #0
   1a1aa:	4c06      	ldr	r4, [pc, #24]	; (1a1c4 <lll_conn_prepare_reset+0x24>)
	crc_expire = 0U;
   1a1ac:	7003      	strb	r3, [r0, #0]
	crc_valid = 0U;
   1a1ae:	700b      	strb	r3, [r1, #0]
	mic_state = LLL_CONN_MIC_NONE;
   1a1b0:	7013      	strb	r3, [r2, #0]
	trx_cnt = 0U;
   1a1b2:	8023      	strh	r3, [r4, #0]
}
   1a1b4:	bc10      	pop	{r4}
   1a1b6:	4770      	bx	lr
   1a1b8:	20009c46 	.word	0x20009c46
   1a1bc:	20009c47 	.word	0x20009c47
   1a1c0:	20009c48 	.word	0x20009c48
   1a1c4:	200096c0 	.word	0x200096c0

0001a1c8 <lll_conn_abort_cb>:
{
   1a1c8:	b510      	push	{r4, lr}
	if (!prepare_param) {
   1a1ca:	b1b0      	cbz	r0, 1a1fa <lll_conn_abort_cb+0x32>
	err = lll_hfclock_off();
   1a1cc:	460c      	mov	r4, r1
   1a1ce:	f7ff fc91 	bl	19af4 <lll_hfclock_off>
	LL_ASSERT(!err || err == -EBUSY);
   1a1d2:	b168      	cbz	r0, 1a1f0 <lll_conn_abort_cb+0x28>
   1a1d4:	3010      	adds	r0, #16
   1a1d6:	d00b      	beq.n	1a1f0 <lll_conn_abort_cb+0x28>
   1a1d8:	4a0b      	ldr	r2, [pc, #44]	; (1a208 <lll_conn_abort_cb+0x40>)
   1a1da:	490c      	ldr	r1, [pc, #48]	; (1a20c <lll_conn_abort_cb+0x44>)
   1a1dc:	480c      	ldr	r0, [pc, #48]	; (1a210 <lll_conn_abort_cb+0x48>)
   1a1de:	237a      	movs	r3, #122	; 0x7a
   1a1e0:	f003 feb7 	bl	1df52 <printk>
   1a1e4:	4040      	eors	r0, r0
   1a1e6:	f380 8811 	msr	BASEPRI, r0
   1a1ea:	f04f 0003 	mov.w	r0, #3
   1a1ee:	df02      	svc	2
	lll_done(param);
   1a1f0:	4620      	mov	r0, r4
}
   1a1f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   1a1f6:	f7ff bb35 	b.w	19864 <lll_done>
		radio_isr_set(isr_done, param);
   1a1fa:	4806      	ldr	r0, [pc, #24]	; (1a214 <lll_conn_abort_cb+0x4c>)
   1a1fc:	f000 fdca 	bl	1ad94 <radio_isr_set>
}
   1a200:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
   1a204:	f000 bed2 	b.w	1afac <radio_disable>
   1a208:	00024ab8 	.word	0x00024ab8
   1a20c:	000249d0 	.word	0x000249d0
   1a210:	00023ff4 	.word	0x00023ff4
   1a214:	0001a0f1 	.word	0x0001a0f1

0001a218 <lll_conn_rx_pkt_set>:
{
   1a218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a21a:	4605      	mov	r5, r0
	node_rx = ull_pdu_rx_alloc_peek(1);
   1a21c:	2001      	movs	r0, #1
   1a21e:	f7fa fa1d 	bl	1465c <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1a222:	4604      	mov	r4, r0
   1a224:	b348      	cbz	r0, 1a27a <lll_conn_rx_pkt_set+0x62>
	phy = lll->phy_rx;
   1a226:	f895 602d 	ldrb.w	r6, [r5, #45]	; 0x2d
	max_rx_octets = lll->max_rx_octets;
   1a22a:	8cef      	ldrh	r7, [r5, #38]	; 0x26
	phy = lll->phy_rx;
   1a22c:	f006 0607 	and.w	r6, r6, #7
	radio_phy_set(phy, 0);
   1a230:	4630      	mov	r0, r6
   1a232:	2100      	movs	r1, #0
   1a234:	f000 fdf4 	bl	1ae20 <radio_phy_set>
	} else if (lll->enc_rx) {
   1a238:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
   1a23c:	0072      	lsls	r2, r6, #1
   1a23e:	071b      	lsls	r3, r3, #28
   1a240:	f104 041c 	add.w	r4, r4, #28
   1a244:	f042 0201 	orr.w	r2, r2, #1
   1a248:	d50e      	bpl.n	1a268 <lll_conn_rx_pkt_set+0x50>
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
   1a24a:	1d39      	adds	r1, r7, #4
   1a24c:	b2c9      	uxtb	r1, r1
   1a24e:	2008      	movs	r0, #8
   1a250:	f000 fe4a 	bl	1aee8 <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   1a254:	4622      	mov	r2, r4
   1a256:	4631      	mov	r1, r6
   1a258:	f105 0047 	add.w	r0, r5, #71	; 0x47
   1a25c:	f001 f89e 	bl	1b39c <radio_ccm_rx_pkt_set>
}
   1a260:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   1a264:	f000 be76 	b.w	1af54 <radio_pkt_rx_set>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
   1a268:	b2f9      	uxtb	r1, r7
   1a26a:	2008      	movs	r0, #8
   1a26c:	f000 fe3c 	bl	1aee8 <radio_pkt_configure>
		radio_pkt_rx_set(node_rx->pdu);
   1a270:	4620      	mov	r0, r4
}
   1a272:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(node_rx->pdu);
   1a276:	f000 be6d 	b.w	1af54 <radio_pkt_rx_set>
	LL_ASSERT(node_rx);
   1a27a:	4a07      	ldr	r2, [pc, #28]	; (1a298 <lll_conn_rx_pkt_set+0x80>)
   1a27c:	4907      	ldr	r1, [pc, #28]	; (1a29c <lll_conn_rx_pkt_set+0x84>)
   1a27e:	4808      	ldr	r0, [pc, #32]	; (1a2a0 <lll_conn_rx_pkt_set+0x88>)
   1a280:	f240 13a7 	movw	r3, #423	; 0x1a7
   1a284:	f003 fe65 	bl	1df52 <printk>
   1a288:	4040      	eors	r0, r0
   1a28a:	f380 8811 	msr	BASEPRI, r0
   1a28e:	f04f 0003 	mov.w	r0, #3
   1a292:	df02      	svc	2
   1a294:	e7c7      	b.n	1a226 <lll_conn_rx_pkt_set+0xe>
   1a296:	bf00      	nop
   1a298:	00024ab8 	.word	0x00024ab8
   1a29c:	00024a58 	.word	0x00024a58
   1a2a0:	00023ff4 	.word	0x00023ff4

0001a2a4 <lll_conn_isr_tx>:
{
   1a2a4:	b538      	push	{r3, r4, r5, lr}
   1a2a6:	4604      	mov	r4, r0
	lll_isr_tx_status_reset();
   1a2a8:	f7ff fb86 	bl	199b8 <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   1a2ac:	2096      	movs	r0, #150	; 0x96
   1a2ae:	f000 ff75 	bl	1b19c <radio_tmr_tifs_set>
				     lll->phy_flags);
   1a2b2:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
	radio_switch_complete_and_tx(lll->phy_rx, 0,
   1a2b6:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   1a2ba:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   1a2be:	f000 0007 	and.w	r0, r0, #7
   1a2c2:	f002 0207 	and.w	r2, r2, #7
   1a2c6:	2100      	movs	r1, #0
   1a2c8:	f000 fede 	bl	1b088 <radio_switch_complete_and_tx>
	lll_conn_rx_pkt_set(lll);
   1a2cc:	4620      	mov	r0, r4
   1a2ce:	f7ff ffa3 	bl	1a218 <lll_conn_rx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   1a2d2:	f000 fe8f 	bl	1aff4 <radio_is_ready>
   1a2d6:	bba0      	cbnz	r0, 1a342 <lll_conn_isr_tx+0x9e>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 +
   1a2d8:	f001 f85a 	bl	1b390 <radio_tmr_tifs_base_get>
   1a2dc:	4605      	mov	r5, r0
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   1a2de:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   1a2e2:	2101      	movs	r1, #1
   1a2e4:	f000 0007 	and.w	r0, r0, #7
   1a2e8:	f000 fe4c 	bl	1af84 <radio_rx_chain_delay_get>
	hcto += addr_us_get(lll->phy_rx);
   1a2ec:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   1a2f0:	f003 0307 	and.w	r3, r3, #7
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   1a2f4:	4405      	add	r5, r0
#define RANGE_DISTANCE 1000 /* meters */
#define RANGE_DELAY_US (2 * RANGE_DISTANCE * 4 / 1000)

static inline uint32_t addr_us_get(uint8_t phy)
{
	switch (phy) {
   1a2f6:	2b02      	cmp	r3, #2
   1a2f8:	f105 05a3 	add.w	r5, r5, #163	; 0xa3
   1a2fc:	d01f      	beq.n	1a33e <lll_conn_isr_tx+0x9a>
	case BIT(0):
		return 40;
	case BIT(1):
		return 24;
	case BIT(2):
		return 376;
   1a2fe:	2b04      	cmp	r3, #4
   1a300:	bf14      	ite	ne
   1a302:	2328      	movne	r3, #40	; 0x28
   1a304:	f44f 73bc 	moveq.w	r3, #376	; 0x178
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   1a308:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
   1a30c:	f3c0 01c0 	ubfx	r1, r0, #3, #1
   1a310:	f000 0007 	and.w	r0, r0, #7
	hcto += addr_us_get(lll->phy_rx);
   1a314:	441d      	add	r5, r3
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   1a316:	f000 fe33 	bl	1af80 <radio_tx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
   1a31a:	1a28      	subs	r0, r5, r0
   1a31c:	f001 f80a 	bl	1b334 <radio_tmr_hcto_configure>
	if (!trx_cnt && !lll->role) {
   1a320:	4b0f      	ldr	r3, [pc, #60]	; (1a360 <lll_conn_isr_tx+0xbc>)
   1a322:	881b      	ldrh	r3, [r3, #0]
   1a324:	b92b      	cbnz	r3, 1a332 <lll_conn_isr_tx+0x8e>
   1a326:	f994 3021 	ldrsb.w	r3, [r4, #33]	; 0x21
   1a32a:	2b00      	cmp	r3, #0
   1a32c:	db01      	blt.n	1a332 <lll_conn_isr_tx+0x8e>
		radio_rssi_measure();
   1a32e:	f000 fec5 	bl	1b0bc <radio_rssi_measure>
	radio_isr_set(lll_conn_isr_rx, param);
   1a332:	4621      	mov	r1, r4
   1a334:	480b      	ldr	r0, [pc, #44]	; (1a364 <lll_conn_isr_tx+0xc0>)
}
   1a336:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_isr_set(lll_conn_isr_rx, param);
   1a33a:	f000 bd2b 	b.w	1ad94 <radio_isr_set>
	switch (phy) {
   1a33e:	2318      	movs	r3, #24
   1a340:	e7e2      	b.n	1a308 <lll_conn_isr_tx+0x64>
	LL_ASSERT(!radio_is_ready());
   1a342:	4a09      	ldr	r2, [pc, #36]	; (1a368 <lll_conn_isr_tx+0xc4>)
   1a344:	4909      	ldr	r1, [pc, #36]	; (1a36c <lll_conn_isr_tx+0xc8>)
   1a346:	480a      	ldr	r0, [pc, #40]	; (1a370 <lll_conn_isr_tx+0xcc>)
   1a348:	f240 1373 	movw	r3, #371	; 0x173
   1a34c:	f003 fe01 	bl	1df52 <printk>
   1a350:	4040      	eors	r0, r0
   1a352:	f380 8811 	msr	BASEPRI, r0
   1a356:	f04f 0003 	mov.w	r0, #3
   1a35a:	df02      	svc	2
   1a35c:	e7bc      	b.n	1a2d8 <lll_conn_isr_tx+0x34>
   1a35e:	bf00      	nop
   1a360:	200096c0 	.word	0x200096c0
   1a364:	0001a475 	.word	0x0001a475
   1a368:	00024ab8 	.word	0x00024ab8
   1a36c:	00024a7c 	.word	0x00024a7c
   1a370:	00023ff4 	.word	0x00023ff4

0001a374 <lll_conn_tx_pkt_set>:
{
   1a374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a376:	460f      	mov	r7, r1
	phy = lll->phy_tx;
   1a378:	f890 102c 	ldrb.w	r1, [r0, #44]	; 0x2c
	max_tx_octets = lll->max_tx_octets;
   1a37c:	8c86      	ldrh	r6, [r0, #36]	; 0x24
	phy = lll->phy_tx;
   1a37e:	f001 0407 	and.w	r4, r1, #7
{
   1a382:	4605      	mov	r5, r0
	radio_phy_set(phy, flags);
   1a384:	f3c1 01c0 	ubfx	r1, r1, #3, #1
   1a388:	4620      	mov	r0, r4
   1a38a:	f000 fd49 	bl	1ae20 <radio_phy_set>
	} else if (lll->enc_tx) {
   1a38e:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
   1a392:	0062      	lsls	r2, r4, #1
   1a394:	06db      	lsls	r3, r3, #27
   1a396:	f042 0201 	orr.w	r2, r2, #1
   1a39a:	b2f1      	uxtb	r1, r6
   1a39c:	d50d      	bpl.n	1a3ba <lll_conn_tx_pkt_set+0x46>
		radio_pkt_configure(8, (max_tx_octets + 4U),
   1a39e:	3104      	adds	r1, #4
   1a3a0:	b2c9      	uxtb	r1, r1
   1a3a2:	2008      	movs	r0, #8
   1a3a4:	f000 fda0 	bl	1aee8 <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx,
   1a3a8:	4639      	mov	r1, r7
   1a3aa:	f105 0068 	add.w	r0, r5, #104	; 0x68
   1a3ae:	f001 f845 	bl	1b43c <radio_ccm_tx_pkt_set>
}
   1a3b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx,
   1a3b6:	f000 bdd3 	b.w	1af60 <radio_pkt_tx_set>
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
   1a3ba:	2008      	movs	r0, #8
   1a3bc:	f000 fd94 	bl	1aee8 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
   1a3c0:	4638      	mov	r0, r7
}
   1a3c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(pdu_data_tx);
   1a3c6:	f000 bdcb 	b.w	1af60 <radio_pkt_tx_set>
   1a3ca:	bf00      	nop

0001a3cc <lll_conn_pdu_tx_prep>:
{
   1a3cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (lll->empty) {
   1a3d0:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
   1a3d4:	075b      	lsls	r3, r3, #29
{
   1a3d6:	b083      	sub	sp, #12
   1a3d8:	4688      	mov	r8, r1
	if (lll->empty) {
   1a3da:	d43e      	bmi.n	1a45a <lll_conn_pdu_tx_prep+0x8e>
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   1a3dc:	4604      	mov	r4, r0
   1a3de:	aa01      	add	r2, sp, #4
   1a3e0:	e9d0 010c 	ldrd	r0, r1, [r0, #48]	; 0x30
   1a3e4:	f7f5 fe86 	bl	100f4 <memq_peek>
	if (!link) {
   1a3e8:	4681      	mov	r9, r0
   1a3ea:	2800      	cmp	r0, #0
   1a3ec:	d03c      	beq.n	1a468 <lll_conn_pdu_tx_prep+0x9c>
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   1a3ee:	9f01      	ldr	r7, [sp, #4]
   1a3f0:	f894 6045 	ldrb.w	r6, [r4, #69]	; 0x45
		if (!lll->packet_tx_head_len) {
   1a3f4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   1a3f8:	3704      	adds	r7, #4
   1a3fa:	19bd      	adds	r5, r7, r6
		if (!lll->packet_tx_head_len) {
   1a3fc:	b913      	cbnz	r3, 1a404 <lll_conn_pdu_tx_prep+0x38>
			lll->packet_tx_head_len = p->len;
   1a3fe:	786b      	ldrb	r3, [r5, #1]
   1a400:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		if (lll->packet_tx_head_offset) {
   1a404:	b126      	cbz	r6, 1a410 <lll_conn_pdu_tx_prep+0x44>
			p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1a406:	5dba      	ldrb	r2, [r7, r6]
   1a408:	2101      	movs	r1, #1
   1a40a:	f361 0201 	bfi	r2, r1, #0, #2
   1a40e:	55ba      	strb	r2, [r7, r6]
		p->len = lll->packet_tx_head_len - lll->packet_tx_head_offset;
   1a410:	1b9b      	subs	r3, r3, r6
   1a412:	706b      	strb	r3, [r5, #1]
		p->md = 0;
   1a414:	5dbb      	ldrb	r3, [r7, r6]
   1a416:	f36f 1304 	bfc	r3, #4, #1
   1a41a:	55bb      	strb	r3, [r7, r6]
		max_tx_octets = ull_conn_lll_max_tx_octets_get(lll);
   1a41c:	4620      	mov	r0, r4
   1a41e:	f7fd fb59 	bl	17ad4 <ull_conn_lll_max_tx_octets_get>
		if (p->len > max_tx_octets) {
   1a422:	786b      	ldrb	r3, [r5, #1]
   1a424:	4283      	cmp	r3, r0
   1a426:	d904      	bls.n	1a432 <lll_conn_pdu_tx_prep+0x66>
			p->len = max_tx_octets;
   1a428:	7068      	strb	r0, [r5, #1]
			p->md = 1;
   1a42a:	5dbb      	ldrb	r3, [r7, r6]
   1a42c:	f043 0310 	orr.w	r3, r3, #16
   1a430:	55bb      	strb	r3, [r7, r6]
		if (link->next != lll->memq_tx.tail) {
   1a432:	f8d9 2000 	ldr.w	r2, [r9]
   1a436:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1a438:	429a      	cmp	r2, r3
   1a43a:	d003      	beq.n	1a444 <lll_conn_pdu_tx_prep+0x78>
			p->md = 1;
   1a43c:	5dbb      	ldrb	r3, [r7, r6]
   1a43e:	f043 0310 	orr.w	r3, r3, #16
   1a442:	55bb      	strb	r3, [r7, r6]
	p->rfu = 0U;
   1a444:	782b      	ldrb	r3, [r5, #0]
	p->resv = 0U;
   1a446:	2200      	movs	r2, #0
	p->rfu = 0U;
   1a448:	f36f 1347 	bfc	r3, #5, #3
   1a44c:	702b      	strb	r3, [r5, #0]
	p->resv = 0U;
   1a44e:	70aa      	strb	r2, [r5, #2]
	*pdu_data_tx = p;
   1a450:	f8c8 5000 	str.w	r5, [r8]
}
   1a454:	b003      	add	sp, #12
   1a456:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		*pdu_data_tx = empty_tx_enqueue(lll);
   1a45a:	f7ff fe7b 	bl	1a154 <empty_tx_enqueue>
   1a45e:	f8c8 0000 	str.w	r0, [r8]
}
   1a462:	b003      	add	sp, #12
   1a464:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		p = empty_tx_enqueue(lll);
   1a468:	4620      	mov	r0, r4
   1a46a:	f7ff fe73 	bl	1a154 <empty_tx_enqueue>
   1a46e:	4605      	mov	r5, r0
   1a470:	e7e8      	b.n	1a444 <lll_conn_pdu_tx_prep+0x78>
   1a472:	bf00      	nop

0001a474 <lll_conn_isr_rx>:
{
   1a474:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a478:	b083      	sub	sp, #12
   1a47a:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   1a47c:	f000 fdc4 	bl	1b008 <radio_is_done>
	if (trx_done) {
   1a480:	f010 0fff 	tst.w	r0, #255	; 0xff
   1a484:	d10a      	bne.n	1a49c <lll_conn_isr_rx+0x28>
	lll_isr_rx_status_reset();
   1a486:	f7ff fa9f 	bl	199c8 <lll_isr_rx_status_reset>
		radio_isr_set(isr_done, param);
   1a48a:	48b1      	ldr	r0, [pc, #708]	; (1a750 <lll_conn_isr_rx+0x2dc>)
   1a48c:	4621      	mov	r1, r4
   1a48e:	f000 fc81 	bl	1ad94 <radio_isr_set>
		radio_disable();
   1a492:	f000 fd8b 	bl	1afac <radio_disable>
}
   1a496:	b003      	add	sp, #12
   1a498:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		crc_ok = radio_crc_is_valid();
   1a49c:	f000 fdd4 	bl	1b048 <radio_crc_is_valid>
   1a4a0:	b2c5      	uxtb	r5, r0
		rssi_ready = radio_rssi_is_ready();
   1a4a2:	f000 fe23 	bl	1b0ec <radio_rssi_is_ready>
   1a4a6:	fa5f f880 	uxtb.w	r8, r0
	lll_isr_rx_status_reset();
   1a4aa:	f7ff fa8d 	bl	199c8 <lll_isr_rx_status_reset>
	trx_cnt++;
   1a4ae:	4aa9      	ldr	r2, [pc, #676]	; (1a754 <lll_conn_isr_rx+0x2e0>)
   1a4b0:	8813      	ldrh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   1a4b2:	2001      	movs	r0, #1
	trx_cnt++;
   1a4b4:	3301      	adds	r3, #1
   1a4b6:	8013      	strh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   1a4b8:	f7fa f8d0 	bl	1465c <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1a4bc:	4607      	mov	r7, r0
   1a4be:	2800      	cmp	r0, #0
   1a4c0:	f000 80b9 	beq.w	1a636 <lll_conn_isr_rx+0x1c2>
	if (crc_ok) {
   1a4c4:	2d00      	cmp	r5, #0
   1a4c6:	d15d      	bne.n	1a584 <lll_conn_isr_rx+0x110>
		if (crc_expire == 0U) {
   1a4c8:	4aa3      	ldr	r2, [pc, #652]	; (1a758 <lll_conn_isr_rx+0x2e4>)
   1a4ca:	7816      	ldrb	r6, [r2, #0]
   1a4cc:	2e00      	cmp	r6, #0
   1a4ce:	f040 808e 	bne.w	1a5ee <lll_conn_isr_rx+0x17a>
		crc_expire--;
   1a4d2:	2301      	movs	r3, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1a4d4:	a901      	add	r1, sp, #4
   1a4d6:	4620      	mov	r0, r4
		crc_expire--;
   1a4d8:	7013      	strb	r3, [r2, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1a4da:	f7ff ff77 	bl	1a3cc <lll_conn_pdu_tx_prep>
		radio_tmr_tifs_set(EVENT_IFS_US);
   1a4de:	2096      	movs	r0, #150	; 0x96
   1a4e0:	f000 fe5c 	bl	1b19c <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(lll->phy_rx);
   1a4e4:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   1a4e8:	f000 0007 	and.w	r0, r0, #7
   1a4ec:	f000 fdbe 	bl	1b06c <radio_switch_complete_and_rx>
		radio_isr_set(lll_conn_isr_tx, param);
   1a4f0:	489a      	ldr	r0, [pc, #616]	; (1a75c <lll_conn_isr_rx+0x2e8>)
   1a4f2:	4621      	mov	r1, r4
   1a4f4:	f000 fc4e 	bl	1ad94 <radio_isr_set>
		radio_tmr_end_capture();
   1a4f8:	f000 ff3c 	bl	1b374 <radio_tmr_end_capture>
	pdu_data_tx->sn = lll->sn;
   1a4fc:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
   1a500:	9901      	ldr	r1, [sp, #4]
	pdu_data_tx->nesn = lll->nesn;
   1a502:	f3c2 0340 	ubfx	r3, r2, #1, #1
   1a506:	7808      	ldrb	r0, [r1, #0]
	pdu_data_tx->sn = lll->sn;
   1a508:	f3c2 0200 	ubfx	r2, r2, #0, #1
	pdu_data_tx->nesn = lll->nesn;
   1a50c:	009b      	lsls	r3, r3, #2
   1a50e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
   1a512:	f020 020c 	bic.w	r2, r0, #12
   1a516:	4313      	orrs	r3, r2
   1a518:	700b      	strb	r3, [r1, #0]
	lll_conn_tx_pkt_set(lll, pdu_data_tx);
   1a51a:	4620      	mov	r0, r4
   1a51c:	f7ff ff2a 	bl	1a374 <lll_conn_tx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   1a520:	f000 fd68 	bl	1aff4 <radio_is_ready>
   1a524:	2800      	cmp	r0, #0
   1a526:	f040 8098 	bne.w	1a65a <lll_conn_isr_rx+0x1e6>
	if (!radio_tmr_aa_restore()) {
   1a52a:	f000 ff1d 	bl	1b368 <radio_tmr_aa_restore>
   1a52e:	b1b0      	cbz	r0, 1a55e <lll_conn_isr_rx+0xea>
	if (tx_release) {
   1a530:	b1dd      	cbz	r5, 1a56a <lll_conn_isr_rx+0xf6>
		LL_ASSERT(lll->handle != 0xFFFF);
   1a532:	8a20      	ldrh	r0, [r4, #16]
   1a534:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1a538:	4298      	cmp	r0, r3
   1a53a:	f000 809c 	beq.w	1a676 <lll_conn_isr_rx+0x202>
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   1a53e:	4629      	mov	r1, r5
   1a540:	f7fd f8d6 	bl	176f0 <ull_conn_lll_ack_enqueue>
	if (is_rx_enqueue) {
   1a544:	b99e      	cbnz	r6, 1a56e <lll_conn_isr_rx+0xfa>
		ull_rx_sched();
   1a546:	f7fa f8cf 	bl	146e8 <ull_rx_sched>
	if (rssi_ready) {
   1a54a:	f1b8 0f00 	cmp.w	r8, #0
   1a54e:	d0a2      	beq.n	1a496 <lll_conn_isr_rx+0x22>
		uint8_t rssi = radio_rssi_get();
   1a550:	f000 fdbe 	bl	1b0d0 <radio_rssi_get>
   1a554:	f884 0089 	strb.w	r0, [r4, #137]	; 0x89
}
   1a558:	b003      	add	sp, #12
   1a55a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		radio_tmr_aa_save(radio_tmr_aa_get());
   1a55e:	f000 fef7 	bl	1b350 <radio_tmr_aa_get>
   1a562:	f000 fefb 	bl	1b35c <radio_tmr_aa_save>
	if (tx_release) {
   1a566:	2d00      	cmp	r5, #0
   1a568:	d1e3      	bne.n	1a532 <lll_conn_isr_rx+0xbe>
	if (is_rx_enqueue) {
   1a56a:	2e00      	cmp	r6, #0
   1a56c:	d0ed      	beq.n	1a54a <lll_conn_isr_rx+0xd6>
		ull_pdu_rx_alloc();
   1a56e:	f7fa f893 	bl	14698 <ull_pdu_rx_alloc>
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   1a572:	2302      	movs	r3, #2
   1a574:	713b      	strb	r3, [r7, #4]
		node_rx->hdr.handle = lll->handle;
   1a576:	8a23      	ldrh	r3, [r4, #16]
		ull_rx_put(node_rx->hdr.link, node_rx);
   1a578:	6838      	ldr	r0, [r7, #0]
		node_rx->hdr.handle = lll->handle;
   1a57a:	80fb      	strh	r3, [r7, #6]
		ull_rx_put(node_rx->hdr.link, node_rx);
   1a57c:	4639      	mov	r1, r7
   1a57e:	f7fa f8a3 	bl	146c8 <ull_rx_put>
	if (is_ull_rx) {
   1a582:	e7e0      	b.n	1a546 <lll_conn_isr_rx+0xd2>
	if (pdu_data_rx->nesn != lll->sn) {
   1a584:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
   1a588:	7f3a      	ldrb	r2, [r7, #28]
   1a58a:	f003 0101 	and.w	r1, r3, #1
   1a58e:	f3c2 0080 	ubfx	r0, r2, #2, #1
   1a592:	4288      	cmp	r0, r1
   1a594:	d05f      	beq.n	1a656 <lll_conn_isr_rx+0x1e2>
		lll->sn++;
   1a596:	f081 0101 	eor.w	r1, r1, #1
   1a59a:	f361 0300 	bfi	r3, r1, #0, #1
		if (!lll->empty) {
   1a59e:	075d      	lsls	r5, r3, #29
		lll->sn++;
   1a5a0:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
		if (!lll->empty) {
   1a5a4:	b2d9      	uxtb	r1, r3
   1a5a6:	d575      	bpl.n	1a694 <lll_conn_isr_rx+0x220>
			lll->empty = 0;
   1a5a8:	460b      	mov	r3, r1
   1a5aa:	f36f 0382 	bfc	r3, #2, #1
   1a5ae:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	struct node_tx *tx_release = NULL;
   1a5b2:	2500      	movs	r5, #0
   1a5b4:	b2db      	uxtb	r3, r3
	if ((pdu_data_rx->sn == lll->nesn) &&
   1a5b6:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   1a5ba:	f3c3 0140 	ubfx	r1, r3, #1, #1
   1a5be:	428a      	cmp	r2, r1
   1a5c0:	f000 808d 	beq.w	1a6de <lll_conn_isr_rx+0x26a>
	uint8_t is_rx_enqueue = 0U;
   1a5c4:	2600      	movs	r6, #0
		crc_expire = 0U;
   1a5c6:	4964      	ldr	r1, [pc, #400]	; (1a758 <lll_conn_isr_rx+0x2e4>)
		crc_valid = 1U;
   1a5c8:	4a65      	ldr	r2, [pc, #404]	; (1a760 <lll_conn_isr_rx+0x2ec>)
		crc_expire = 0U;
   1a5ca:	2000      	movs	r0, #0
   1a5cc:	7008      	strb	r0, [r1, #0]
	is_empty_pdu_tx_retry = lll->empty;
   1a5ce:	f3c3 0980 	ubfx	r9, r3, #2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1a5d2:	a901      	add	r1, sp, #4
		crc_valid = 1U;
   1a5d4:	2301      	movs	r3, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1a5d6:	4620      	mov	r0, r4
		crc_valid = 1U;
   1a5d8:	7013      	strb	r3, [r2, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1a5da:	f7ff fef7 	bl	1a3cc <lll_conn_pdu_tx_prep>
	is_done = is_crc_backoff || ((crc_ok) && (pdu_data_rx->md == 0) &&
   1a5de:	7f3b      	ldrb	r3, [r7, #28]
   1a5e0:	06db      	lsls	r3, r3, #27
   1a5e2:	f53f af7c 	bmi.w	1a4de <lll_conn_isr_rx+0x6a>
				     (pdu_data_tx->len == 0));
   1a5e6:	9b01      	ldr	r3, [sp, #4]
	is_done = is_crc_backoff || ((crc_ok) && (pdu_data_rx->md == 0) &&
   1a5e8:	785b      	ldrb	r3, [r3, #1]
   1a5ea:	b173      	cbz	r3, 1a60a <lll_conn_isr_rx+0x196>
   1a5ec:	e777      	b.n	1a4de <lll_conn_isr_rx+0x6a>
	is_empty_pdu_tx_retry = lll->empty;
   1a5ee:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
		crc_expire--;
   1a5f2:	3e01      	subs	r6, #1
   1a5f4:	b2f6      	uxtb	r6, r6
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1a5f6:	a901      	add	r1, sp, #4
   1a5f8:	4620      	mov	r0, r4
		crc_expire--;
   1a5fa:	7016      	strb	r6, [r2, #0]
	is_empty_pdu_tx_retry = lll->empty;
   1a5fc:	f3c3 0980 	ubfx	r9, r3, #2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1a600:	f7ff fee4 	bl	1a3cc <lll_conn_pdu_tx_prep>
	is_done = is_crc_backoff || ((crc_ok) && (pdu_data_rx->md == 0) &&
   1a604:	2e00      	cmp	r6, #0
   1a606:	f040 8105 	bne.w	1a814 <lll_conn_isr_rx+0x3a0>
		radio_isr_set(isr_done, param);
   1a60a:	4851      	ldr	r0, [pc, #324]	; (1a750 <lll_conn_isr_rx+0x2dc>)
   1a60c:	4621      	mov	r1, r4
   1a60e:	f000 fbc1 	bl	1ad94 <radio_isr_set>
		} else if (!lll->role) {
   1a612:	f994 3021 	ldrsb.w	r3, [r4, #33]	; 0x21
   1a616:	2b00      	cmp	r3, #0
   1a618:	f6ff af70 	blt.w	1a4fc <lll_conn_isr_rx+0x88>
			radio_disable();
   1a61c:	f000 fcc6 	bl	1afac <radio_disable>
			LL_ASSERT(!radio_is_ready());
   1a620:	f000 fce8 	bl	1aff4 <radio_is_ready>
   1a624:	2800      	cmp	r0, #0
   1a626:	d174      	bne.n	1a712 <lll_conn_isr_rx+0x29e>
			lll->empty = is_empty_pdu_tx_retry;
   1a628:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
   1a62c:	f369 0382 	bfi	r3, r9, #2, #1
   1a630:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			goto lll_conn_isr_rx_exit;
   1a634:	e779      	b.n	1a52a <lll_conn_isr_rx+0xb6>
	LL_ASSERT(node_rx);
   1a636:	4a4b      	ldr	r2, [pc, #300]	; (1a764 <lll_conn_isr_rx+0x2f0>)
   1a638:	494b      	ldr	r1, [pc, #300]	; (1a768 <lll_conn_isr_rx+0x2f4>)
   1a63a:	484c      	ldr	r0, [pc, #304]	; (1a76c <lll_conn_isr_rx+0x2f8>)
   1a63c:	23aa      	movs	r3, #170	; 0xaa
   1a63e:	f003 fc88 	bl	1df52 <printk>
   1a642:	4040      	eors	r0, r0
   1a644:	f380 8811 	msr	BASEPRI, r0
   1a648:	f04f 0003 	mov.w	r0, #3
   1a64c:	df02      	svc	2
	if (crc_ok) {
   1a64e:	2d00      	cmp	r5, #0
   1a650:	f43f af3a 	beq.w	1a4c8 <lll_conn_isr_rx+0x54>
   1a654:	e796      	b.n	1a584 <lll_conn_isr_rx+0x110>
	struct node_tx *tx_release = NULL;
   1a656:	2500      	movs	r5, #0
   1a658:	e7ad      	b.n	1a5b6 <lll_conn_isr_rx+0x142>
	LL_ASSERT(!radio_is_ready());
   1a65a:	4a42      	ldr	r2, [pc, #264]	; (1a764 <lll_conn_isr_rx+0x2f0>)
   1a65c:	4944      	ldr	r1, [pc, #272]	; (1a770 <lll_conn_isr_rx+0x2fc>)
   1a65e:	4843      	ldr	r0, [pc, #268]	; (1a76c <lll_conn_isr_rx+0x2f8>)
   1a660:	f44f 738a 	mov.w	r3, #276	; 0x114
   1a664:	f003 fc75 	bl	1df52 <printk>
   1a668:	4040      	eors	r0, r0
   1a66a:	f380 8811 	msr	BASEPRI, r0
   1a66e:	f04f 0003 	mov.w	r0, #3
   1a672:	df02      	svc	2
   1a674:	e759      	b.n	1a52a <lll_conn_isr_rx+0xb6>
		LL_ASSERT(lll->handle != 0xFFFF);
   1a676:	4a3b      	ldr	r2, [pc, #236]	; (1a764 <lll_conn_isr_rx+0x2f0>)
   1a678:	493e      	ldr	r1, [pc, #248]	; (1a774 <lll_conn_isr_rx+0x300>)
   1a67a:	483c      	ldr	r0, [pc, #240]	; (1a76c <lll_conn_isr_rx+0x2f8>)
   1a67c:	f240 1321 	movw	r3, #289	; 0x121
   1a680:	f003 fc67 	bl	1df52 <printk>
   1a684:	4040      	eors	r0, r0
   1a686:	f380 8811 	msr	BASEPRI, r0
   1a68a:	f04f 0003 	mov.w	r0, #3
   1a68e:	df02      	svc	2
   1a690:	8a20      	ldrh	r0, [r4, #16]
   1a692:	e754      	b.n	1a53e <lll_conn_isr_rx+0xca>
			link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail,
   1a694:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
   1a698:	aa01      	add	r2, sp, #4
   1a69a:	f7f5 fd2b 	bl	100f4 <memq_peek>
		if (link) {
   1a69e:	4606      	mov	r6, r0
   1a6a0:	b390      	cbz	r0, 1a708 <lll_conn_isr_rx+0x294>
					       lll->packet_tx_head_offset);
   1a6a2:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
			pdu_data_tx_len = pdu_data_tx->len;
   1a6a6:	9b01      	ldr	r3, [sp, #4]
   1a6a8:	4413      	add	r3, r2
   1a6aa:	7959      	ldrb	r1, [r3, #5]
			if (pdu_data_tx_len != 0U) {
   1a6ac:	b151      	cbz	r1, 1a6c4 <lll_conn_isr_rx+0x250>
				if (lll->enc_tx) {
   1a6ae:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
   1a6b2:	06d8      	lsls	r0, r3, #27
   1a6b4:	d506      	bpl.n	1a6c4 <lll_conn_isr_rx+0x250>
					lll->ccm_tx.counter++;
   1a6b6:	e9d4 301e 	ldrd	r3, r0, [r4, #120]	; 0x78
   1a6ba:	3301      	adds	r3, #1
   1a6bc:	f140 0000 	adc.w	r0, r0, #0
   1a6c0:	e9c4 301e 	strd	r3, r0, [r4, #120]	; 0x78
			if (offset < lll->packet_tx_head_len) {
   1a6c4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
			offset = lll->packet_tx_head_offset + pdu_data_tx_len;
   1a6c8:	440a      	add	r2, r1
   1a6ca:	b2d2      	uxtb	r2, r2
			if (offset < lll->packet_tx_head_len) {
   1a6cc:	429a      	cmp	r2, r3
   1a6ce:	d22d      	bcs.n	1a72c <lll_conn_isr_rx+0x2b8>
				lll->packet_tx_head_offset = offset;
   1a6d0:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
   1a6d4:	7f3a      	ldrb	r2, [r7, #28]
   1a6d6:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
	struct node_tx *tx_release = NULL;
   1a6da:	2500      	movs	r5, #0
   1a6dc:	e76b      	b.n	1a5b6 <lll_conn_isr_rx+0x142>
	    (ull_pdu_rx_alloc_peek(3) != 0)) {
   1a6de:	2003      	movs	r0, #3
   1a6e0:	f7f9 ffbc 	bl	1465c <ull_pdu_rx_alloc_peek>
	if ((pdu_data_rx->sn == lll->nesn) &&
   1a6e4:	b168      	cbz	r0, 1a702 <lll_conn_isr_rx+0x28e>
		lll->nesn++;
   1a6e6:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
   1a6ea:	f083 0302 	eor.w	r3, r3, #2
   1a6ee:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
		if (pdu_data_rx->len != 0) {
   1a6f2:	7f7b      	ldrb	r3, [r7, #29]
   1a6f4:	b12b      	cbz	r3, 1a702 <lll_conn_isr_rx+0x28e>
			if (lll->enc_rx) {
   1a6f6:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
   1a6fa:	071a      	lsls	r2, r3, #28
   1a6fc:	d43c      	bmi.n	1a778 <lll_conn_isr_rx+0x304>
			*is_rx_enqueue = 1U;
   1a6fe:	2601      	movs	r6, #1
   1a700:	e761      	b.n	1a5c6 <lll_conn_isr_rx+0x152>
   1a702:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
   1a706:	e75d      	b.n	1a5c4 <lll_conn_isr_rx+0x150>
   1a708:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
   1a70c:	7f3a      	ldrb	r2, [r7, #28]
	struct node_tx *tx_release = NULL;
   1a70e:	2500      	movs	r5, #0
   1a710:	e751      	b.n	1a5b6 <lll_conn_isr_rx+0x142>
			LL_ASSERT(!radio_is_ready());
   1a712:	4a14      	ldr	r2, [pc, #80]	; (1a764 <lll_conn_isr_rx+0x2f0>)
   1a714:	4916      	ldr	r1, [pc, #88]	; (1a770 <lll_conn_isr_rx+0x2fc>)
   1a716:	4815      	ldr	r0, [pc, #84]	; (1a76c <lll_conn_isr_rx+0x2f8>)
   1a718:	23da      	movs	r3, #218	; 0xda
   1a71a:	f003 fc1a 	bl	1df52 <printk>
   1a71e:	4040      	eors	r0, r0
   1a720:	f380 8811 	msr	BASEPRI, r0
   1a724:	f04f 0003 	mov.w	r0, #3
   1a728:	df02      	svc	2
   1a72a:	e77d      	b.n	1a628 <lll_conn_isr_rx+0x1b4>
			} else if (offset == lll->packet_tx_head_len) {
   1a72c:	d1ec      	bne.n	1a708 <lll_conn_isr_rx+0x294>
				lll->packet_tx_head_len = 0;
   1a72e:	2200      	movs	r2, #0
   1a730:	f8a4 2044 	strh.w	r2, [r4, #68]	; 0x44
				memq_dequeue(lll->memq_tx.tail,
   1a734:	6b60      	ldr	r0, [r4, #52]	; 0x34
   1a736:	f104 0130 	add.w	r1, r4, #48	; 0x30
   1a73a:	f7f5 fce3 	bl	10104 <memq_dequeue>
				link->next = tx->next; /* Indicates ctrl or data
   1a73e:	9d01      	ldr	r5, [sp, #4]
   1a740:	7f3a      	ldrb	r2, [r7, #28]
   1a742:	682b      	ldr	r3, [r5, #0]
   1a744:	6033      	str	r3, [r6, #0]
				tx->next = link;
   1a746:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
   1a74a:	602e      	str	r6, [r5, #0]
				*tx_release = tx;
   1a74c:	e733      	b.n	1a5b6 <lll_conn_isr_rx+0x142>
   1a74e:	bf00      	nop
   1a750:	0001a0f1 	.word	0x0001a0f1
   1a754:	200096c0 	.word	0x200096c0
   1a758:	20009c46 	.word	0x20009c46
   1a75c:	0001a2a5 	.word	0x0001a2a5
   1a760:	20009c47 	.word	0x20009c47
   1a764:	00024ab8 	.word	0x00024ab8
   1a768:	00024a58 	.word	0x00024a58
   1a76c:	00023ff4 	.word	0x00023ff4
   1a770:	00024a7c 	.word	0x00024a7c
   1a774:	00024b10 	.word	0x00024b10
				done = radio_ccm_is_done();
   1a778:	f000 fe8a 	bl	1b490 <radio_ccm_is_done>
				LL_ASSERT(done);
   1a77c:	2800      	cmp	r0, #0
   1a77e:	d03b      	beq.n	1a7f8 <lll_conn_isr_rx+0x384>
				bool mic_failure = !radio_ccm_mic_is_valid();
   1a780:	f000 fea8 	bl	1b4d4 <radio_ccm_mic_is_valid>
				if (mic_failure &&
   1a784:	bb30      	cbnz	r0, 1a7d4 <lll_conn_isr_rx+0x360>
				    lll->ccm_rx.counter == 0 &&
   1a786:	f8d4 2057 	ldr.w	r2, [r4, #87]	; 0x57
   1a78a:	f8d4 305b 	ldr.w	r3, [r4, #91]	; 0x5b
				if (mic_failure &&
   1a78e:	4313      	orrs	r3, r2
   1a790:	d104      	bne.n	1a79c <lll_conn_isr_rx+0x328>
				    (pdu_data_rx->ll_id ==
   1a792:	7f3b      	ldrb	r3, [r7, #28]
				    lll->ccm_rx.counter == 0 &&
   1a794:	f003 0303 	and.w	r3, r3, #3
   1a798:	2b03      	cmp	r3, #3
   1a79a:	d004      	beq.n	1a7a6 <lll_conn_isr_rx+0x332>
					mic_state = LLL_CONN_MIC_FAIL;
   1a79c:	4b1e      	ldr	r3, [pc, #120]	; (1a818 <lll_conn_isr_rx+0x3a4>)
   1a79e:	2202      	movs	r2, #2
   1a7a0:	701a      	strb	r2, [r3, #0]
	uint8_t is_rx_enqueue = 0U;
   1a7a2:	2600      	movs	r6, #0
   1a7a4:	e6c1      	b.n	1a52a <lll_conn_isr_rx+0xb6>
						radio_pkt_scratch_get();
   1a7a6:	f000 fc5d 	bl	1b064 <radio_pkt_scratch_get>
					if (ctrl_pdu_len_check(
   1a7aa:	7842      	ldrb	r2, [r0, #1]
   1a7ac:	2a1b      	cmp	r2, #27
						radio_pkt_scratch_get();
   1a7ae:	4601      	mov	r1, r0
					if (ctrl_pdu_len_check(
   1a7b0:	d8f4      	bhi.n	1a79c <lll_conn_isr_rx+0x328>
						memcpy(pdu_data_rx,
   1a7b2:	3203      	adds	r2, #3
   1a7b4:	f107 001c 	add.w	r0, r7, #28
   1a7b8:	f005 fb5d 	bl	1fe76 <memcpy>
						lll->ccm_rx.counter--;
   1a7bc:	f8d4 3057 	ldr.w	r3, [r4, #87]	; 0x57
   1a7c0:	f8d4 205b 	ldr.w	r2, [r4, #91]	; 0x5b
   1a7c4:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
   1a7c8:	f142 32ff 	adc.w	r2, r2, #4294967295	; 0xffffffff
   1a7cc:	f8c4 3057 	str.w	r3, [r4, #87]	; 0x57
   1a7d0:	f8c4 205b 	str.w	r2, [r4, #91]	; 0x5b
				lll->ccm_rx.counter++;
   1a7d4:	f8d4 3057 	ldr.w	r3, [r4, #87]	; 0x57
   1a7d8:	f8d4 205b 	ldr.w	r2, [r4, #91]	; 0x5b
				mic_state = LLL_CONN_MIC_PASS;
   1a7dc:	490e      	ldr	r1, [pc, #56]	; (1a818 <lll_conn_isr_rx+0x3a4>)
				lll->ccm_rx.counter++;
   1a7de:	3301      	adds	r3, #1
						lll->ccm_rx.counter--;
   1a7e0:	f104 0057 	add.w	r0, r4, #87	; 0x57
				lll->ccm_rx.counter++;
   1a7e4:	f142 0200 	adc.w	r2, r2, #0
   1a7e8:	f8c4 3057 	str.w	r3, [r4, #87]	; 0x57
				mic_state = LLL_CONN_MIC_PASS;
   1a7ec:	2601      	movs	r6, #1
				lll->ccm_rx.counter++;
   1a7ee:	6042      	str	r2, [r0, #4]
				mic_state = LLL_CONN_MIC_PASS;
   1a7f0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
   1a7f4:	700e      	strb	r6, [r1, #0]
		if (err) {
   1a7f6:	e6e6      	b.n	1a5c6 <lll_conn_isr_rx+0x152>
				LL_ASSERT(done);
   1a7f8:	4a08      	ldr	r2, [pc, #32]	; (1a81c <lll_conn_isr_rx+0x3a8>)
   1a7fa:	4909      	ldr	r1, [pc, #36]	; (1a820 <lll_conn_isr_rx+0x3ac>)
   1a7fc:	4809      	ldr	r0, [pc, #36]	; (1a824 <lll_conn_isr_rx+0x3b0>)
   1a7fe:	f240 23c2 	movw	r3, #706	; 0x2c2
   1a802:	f003 fba6 	bl	1df52 <printk>
   1a806:	4040      	eors	r0, r0
   1a808:	f380 8811 	msr	BASEPRI, r0
   1a80c:	f04f 0003 	mov.w	r0, #3
   1a810:	df02      	svc	2
   1a812:	e7b5      	b.n	1a780 <lll_conn_isr_rx+0x30c>
	uint8_t is_rx_enqueue = 0U;
   1a814:	462e      	mov	r6, r5
   1a816:	e662      	b.n	1a4de <lll_conn_isr_rx+0x6a>
   1a818:	20009c48 	.word	0x20009c48
   1a81c:	00024ab8 	.word	0x00024ab8
   1a820:	00024b08 	.word	0x00024b08
   1a824:	00023ff4 	.word	0x00023ff4

0001a828 <lll_conn_flush>:

void lll_conn_flush(uint16_t handle, struct lll_conn *lll)
{
	/* Nothing to be flushed */
}
   1a828:	4770      	bx	lr
   1a82a:	bf00      	nop

0001a82c <prepare_cb>:
{
	return 0;
}

static int prepare_cb(struct lll_prepare_param *prepare_param)
{
   1a82c:	b570      	push	{r4, r5, r6, lr}
	struct lll_conn *lll = prepare_param->param;
   1a82e:	68c4      	ldr	r4, [r0, #12]
{
   1a830:	b084      	sub	sp, #16
   1a832:	4605      	mov	r5, r0
	uint8_t data_chan_use;
	uint32_t remainder;
	DEBUG_RADIO_START_M(1);

	/* Reset connection event global variables */
	lll_conn_prepare_reset();
   1a834:	f7ff fcb4 	bl	1a1a0 <lll_conn_prepare_reset>

	/* Deduce the latency */
	lll->latency_event = lll->latency_prepare - 1;
   1a838:	8ae2      	ldrh	r2, [r4, #22]

	/* Calculate the current event counter value */
	event_counter = lll->event_counter + lll->latency_event;

	/* Update event counter to next value */
	lll->event_counter = lll->event_counter + lll->latency_prepare;
   1a83a:	8b63      	ldrh	r3, [r4, #26]

	/* Reset accumulated latencies */
	lll->latency_prepare = 0;

	if (lll->data_chan_sel) {
   1a83c:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
	lll->event_counter = lll->event_counter + lll->latency_prepare;
   1a840:	4413      	add	r3, r2
	lll->latency_event = lll->latency_prepare - 1;
   1a842:	3a01      	subs	r2, #1
	lll->latency_prepare = 0;
   1a844:	2600      	movs	r6, #0
	lll->latency_event = lll->latency_prepare - 1;
   1a846:	b292      	uxth	r2, r2
	lll->event_counter = lll->event_counter + lll->latency_prepare;
   1a848:	8363      	strh	r3, [r4, #26]
	if (lll->data_chan_sel) {
   1a84a:	0643      	lsls	r3, r0, #25
	lll->latency_prepare = 0;
   1a84c:	82e6      	strh	r6, [r4, #22]
	lll->latency_event = lll->latency_prepare - 1;
   1a84e:	8322      	strh	r2, [r4, #24]
	if (lll->data_chan_sel) {
   1a850:	d559      	bpl.n	1a906 <prepare_cb+0xda>
		data_chan_use = lll_chan_sel_2(event_counter, lll->data_chan_id,
					       &lll->data_chan_map[0],
					       lll->data_chan_count);
#else /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
		data_chan_use = 0;
		LL_ASSERT(0);
   1a852:	4a3b      	ldr	r2, [pc, #236]	; (1a940 <prepare_cb+0x114>)
   1a854:	493b      	ldr	r1, [pc, #236]	; (1a944 <prepare_cb+0x118>)
   1a856:	483c      	ldr	r0, [pc, #240]	; (1a948 <prepare_cb+0x11c>)
   1a858:	237c      	movs	r3, #124	; 0x7c
   1a85a:	f003 fb7a 	bl	1df52 <printk>
   1a85e:	4040      	eors	r0, r0
   1a860:	f380 8811 	msr	BASEPRI, r0
   1a864:	f04f 0003 	mov.w	r0, #3
   1a868:	df02      	svc	2
					       &lll->data_chan_map[0],
					       lll->data_chan_count);
	}

	/* Prepare the Tx PDU */
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1a86a:	a903      	add	r1, sp, #12
   1a86c:	4620      	mov	r0, r4
   1a86e:	f7ff fdad 	bl	1a3cc <lll_conn_pdu_tx_prep>
	pdu_data_tx->sn = lll->sn;
   1a872:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
   1a876:	9803      	ldr	r0, [sp, #12]
	pdu_data_tx->nesn = lll->nesn;
   1a878:	f3c2 0340 	ubfx	r3, r2, #1, #1
   1a87c:	7801      	ldrb	r1, [r0, #0]
	pdu_data_tx->sn = lll->sn;
   1a87e:	f3c2 0200 	ubfx	r2, r2, #0, #1
	pdu_data_tx->nesn = lll->nesn;
   1a882:	009b      	lsls	r3, r3, #2
   1a884:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
   1a888:	f021 020c 	bic.w	r2, r1, #12
   1a88c:	4313      	orrs	r3, r2
   1a88e:	7003      	strb	r3, [r0, #0]

	/* Start setting up of Radio h/w */
	radio_reset();
   1a890:	f000 faa0 	bl	1add4 <radio_reset>
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	radio_tx_power_set(lll->tx_pwr_lvl);
#else
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   1a894:	2000      	movs	r0, #0
   1a896:	f000 faef 	bl	1ae78 <radio_tx_power_set>
#endif

	radio_aa_set(lll->access_addr);
   1a89a:	f104 0008 	add.w	r0, r4, #8
   1a89e:	f000 fb09 	bl	1aeb4 <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
			    (((uint32_t)lll->crc_init[2] << 16) |
			     ((uint32_t)lll->crc_init[1] << 8) |
   1a8a2:	7b63      	ldrb	r3, [r4, #13]
			    (((uint32_t)lll->crc_init[2] << 16) |
   1a8a4:	7ba2      	ldrb	r2, [r4, #14]
			     ((uint32_t)lll->crc_init[0])));
   1a8a6:	7b21      	ldrb	r1, [r4, #12]
			     ((uint32_t)lll->crc_init[1] << 8) |
   1a8a8:	021b      	lsls	r3, r3, #8
			    (((uint32_t)lll->crc_init[2] << 16) |
   1a8aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   1a8ae:	4319      	orrs	r1, r3
   1a8b0:	f240 605b 	movw	r0, #1627	; 0x65b
   1a8b4:	f000 fbbc 	bl	1b030 <radio_crc_configure>
	lll_chan_set(data_chan_use);
   1a8b8:	4630      	mov	r0, r6
   1a8ba:	f7ff f839 	bl	19930 <lll_chan_set>

	/* setup the radio tx packet buffer */
	lll_conn_tx_pkt_set(lll, pdu_data_tx);
   1a8be:	9903      	ldr	r1, [sp, #12]
   1a8c0:	4620      	mov	r0, r4
   1a8c2:	f7ff fd57 	bl	1a374 <lll_conn_tx_pkt_set>

	radio_isr_set(lll_conn_isr_tx, lll);
   1a8c6:	4621      	mov	r1, r4
   1a8c8:	4820      	ldr	r0, [pc, #128]	; (1a94c <prepare_cb+0x120>)
   1a8ca:	f000 fa63 	bl	1ad94 <radio_isr_set>

	radio_tmr_tifs_set(EVENT_IFS_US);
   1a8ce:	2096      	movs	r0, #150	; 0x96
   1a8d0:	f000 fc64 	bl	1b19c <radio_tmr_tifs_set>

#if defined(CONFIG_BT_CTLR_PHY)
	radio_switch_complete_and_rx(lll->phy_rx);
   1a8d4:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   1a8d8:	f000 0007 	and.w	r0, r0, #7
   1a8dc:	f000 fbc6 	bl	1b06c <radio_switch_complete_and_rx>
	radio_switch_complete_and_rx(0);
#endif /* !CONFIG_BT_CTLR_PHY */

	ticks_at_event = prepare_param->ticks_at_expire;
	evt = HDR_LLL2EVT(lll);
	ticks_at_event += lll_evt_offset_get(evt);
   1a8e0:	6820      	ldr	r0, [r4, #0]
	ticks_at_event = prepare_param->ticks_at_expire;
   1a8e2:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_evt_offset_get(evt);
   1a8e4:	f7ff f81e 	bl	19924 <lll_evt_offset_get>

	ticks_at_start = ticks_at_event;
	ticks_at_start += HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US);
   1a8e8:	3609      	adds	r6, #9

	remainder = prepare_param->remainder;
	remainder_us = radio_tmr_start(1, ticks_at_start, remainder);
   1a8ea:	1831      	adds	r1, r6, r0
   1a8ec:	686a      	ldr	r2, [r5, #4]
   1a8ee:	2001      	movs	r0, #1
   1a8f0:	f000 fc60 	bl	1b1b4 <radio_tmr_start>

	/* capture end of Tx-ed PDU, used to calculate HCTO. */
	radio_tmr_end_capture();
   1a8f4:	f000 fd3e 	bl	1b374 <radio_tmr_end_capture>
	} else
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */
	{
		uint32_t ret;

		ret = lll_prepare_done(lll);
   1a8f8:	4620      	mov	r0, r4
   1a8fa:	f7fe ffb1 	bl	19860 <lll_prepare_done>
		LL_ASSERT(!ret);
   1a8fe:	b978      	cbnz	r0, 1a920 <prepare_cb+0xf4>
	}

	DEBUG_RADIO_START_M(1);

	return 0;
}
   1a900:	2000      	movs	r0, #0
   1a902:	b004      	add	sp, #16
   1a904:	bd70      	pop	{r4, r5, r6, pc}
		data_chan_use = lll_chan_sel_1(&lll->data_chan_use,
   1a906:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   1a90a:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
   1a90e:	9000      	str	r0, [sp, #0]
   1a910:	f104 031c 	add.w	r3, r4, #28
   1a914:	f104 0023 	add.w	r0, r4, #35	; 0x23
   1a918:	f7fd fd5e 	bl	183d8 <lll_chan_sel_1>
   1a91c:	4606      	mov	r6, r0
   1a91e:	e7a4      	b.n	1a86a <prepare_cb+0x3e>
		LL_ASSERT(!ret);
   1a920:	4a07      	ldr	r2, [pc, #28]	; (1a940 <prepare_cb+0x114>)
   1a922:	490b      	ldr	r1, [pc, #44]	; (1a950 <prepare_cb+0x124>)
   1a924:	4808      	ldr	r0, [pc, #32]	; (1a948 <prepare_cb+0x11c>)
   1a926:	23d3      	movs	r3, #211	; 0xd3
   1a928:	f003 fb13 	bl	1df52 <printk>
   1a92c:	4040      	eors	r0, r0
   1a92e:	f380 8811 	msr	BASEPRI, r0
   1a932:	f04f 0003 	mov.w	r0, #3
   1a936:	df02      	svc	2
}
   1a938:	2000      	movs	r0, #0
   1a93a:	b004      	add	sp, #16
   1a93c:	bd70      	pop	{r4, r5, r6, pc}
   1a93e:	bf00      	nop
   1a940:	00024b3c 	.word	0x00024b3c
   1a944:	00024064 	.word	0x00024064
   1a948:	00023ff4 	.word	0x00023ff4
   1a94c:	0001a2a5 	.word	0x0001a2a5
   1a950:	000242b0 	.word	0x000242b0

0001a954 <lll_master_prepare>:
{
   1a954:	b530      	push	{r4, r5, lr}
   1a956:	b083      	sub	sp, #12
	struct lll_conn *lll = p->param;
   1a958:	68c5      	ldr	r5, [r0, #12]
{
   1a95a:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   1a95c:	f7ff f8c2 	bl	19ae4 <lll_hfclock_on>
	LL_ASSERT(!err || err == -EINPROGRESS);
   1a960:	b108      	cbz	r0, 1a966 <lll_master_prepare+0x12>
   1a962:	3044      	adds	r0, #68	; 0x44
   1a964:	d11e      	bne.n	1a9a4 <lll_master_prepare+0x50>
	elapsed = p->lazy + 1;
   1a966:	8923      	ldrh	r3, [r4, #8]
	lll->latency_prepare += elapsed;
   1a968:	8ae8      	ldrh	r0, [r5, #22]
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0, p);
   1a96a:	4a15      	ldr	r2, [pc, #84]	; (1a9c0 <lll_master_prepare+0x6c>)
   1a96c:	4915      	ldr	r1, [pc, #84]	; (1a9c4 <lll_master_prepare+0x70>)
	elapsed = p->lazy + 1;
   1a96e:	3301      	adds	r3, #1
	lll->latency_prepare += elapsed;
   1a970:	4403      	add	r3, r0
   1a972:	82eb      	strh	r3, [r5, #22]
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0, p);
   1a974:	4814      	ldr	r0, [pc, #80]	; (1a9c8 <lll_master_prepare+0x74>)
   1a976:	9400      	str	r4, [sp, #0]
   1a978:	2300      	movs	r3, #0
   1a97a:	f7fe fee5 	bl	19748 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   1a97e:	b108      	cbz	r0, 1a984 <lll_master_prepare+0x30>
   1a980:	3044      	adds	r0, #68	; 0x44
   1a982:	d101      	bne.n	1a988 <lll_master_prepare+0x34>
}
   1a984:	b003      	add	sp, #12
   1a986:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   1a988:	4a10      	ldr	r2, [pc, #64]	; (1a9cc <lll_master_prepare+0x78>)
   1a98a:	4911      	ldr	r1, [pc, #68]	; (1a9d0 <lll_master_prepare+0x7c>)
   1a98c:	4811      	ldr	r0, [pc, #68]	; (1a9d4 <lll_master_prepare+0x80>)
   1a98e:	2352      	movs	r3, #82	; 0x52
   1a990:	f003 fadf 	bl	1df52 <printk>
   1a994:	4040      	eors	r0, r0
   1a996:	f380 8811 	msr	BASEPRI, r0
   1a99a:	f04f 0003 	mov.w	r0, #3
   1a99e:	df02      	svc	2
}
   1a9a0:	b003      	add	sp, #12
   1a9a2:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   1a9a4:	4a09      	ldr	r2, [pc, #36]	; (1a9cc <lll_master_prepare+0x78>)
   1a9a6:	490a      	ldr	r1, [pc, #40]	; (1a9d0 <lll_master_prepare+0x7c>)
   1a9a8:	480a      	ldr	r0, [pc, #40]	; (1a9d4 <lll_master_prepare+0x80>)
   1a9aa:	2348      	movs	r3, #72	; 0x48
   1a9ac:	f003 fad1 	bl	1df52 <printk>
   1a9b0:	4040      	eors	r0, r0
   1a9b2:	f380 8811 	msr	BASEPRI, r0
   1a9b6:	f04f 0003 	mov.w	r0, #3
   1a9ba:	df02      	svc	2
   1a9bc:	e7d3      	b.n	1a966 <lll_master_prepare+0x12>
   1a9be:	bf00      	nop
   1a9c0:	0001a82d 	.word	0x0001a82d
   1a9c4:	0001a1c9 	.word	0x0001a1c9
   1a9c8:	0001991d 	.word	0x0001991d
   1a9cc:	00024b3c 	.word	0x00024b3c
   1a9d0:	00024a90 	.word	0x00024a90
   1a9d4:	00023ff4 	.word	0x00023ff4

0001a9d8 <cntr_init>:

static uint8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   1a9d8:	4b05      	ldr	r3, [pc, #20]	; (1a9f0 <cntr_init+0x18>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   1a9da:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1a9de:	2100      	movs	r1, #0
   1a9e0:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   1a9e4:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    p_reg->INTENSET = mask;
   1a9e8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_rtc_event_enable(NRF_RTC, RTC_EVTENSET_COMPARE0_Msk);
	nrf_rtc_int_enable(NRF_RTC, RTC_INTENSET_COMPARE0_Msk);
}
   1a9ec:	4770      	bx	lr
   1a9ee:	bf00      	nop
   1a9f0:	4000b000 	.word	0x4000b000

0001a9f4 <cntr_start>:

uint32_t cntr_start(void)
{
	if (_refcount++) {
   1a9f4:	4b05      	ldr	r3, [pc, #20]	; (1aa0c <cntr_start+0x18>)
   1a9f6:	7818      	ldrb	r0, [r3, #0]
   1a9f8:	1c42      	adds	r2, r0, #1
   1a9fa:	701a      	strb	r2, [r3, #0]
   1a9fc:	b918      	cbnz	r0, 1aa06 <cntr_start+0x12>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1a9fe:	4b04      	ldr	r3, [pc, #16]	; (1aa10 <cntr_start+0x1c>)
   1aa00:	2201      	movs	r2, #1
   1aa02:	601a      	str	r2, [r3, #0]
		return 1;
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_START);

	return 0;
   1aa04:	4770      	bx	lr
		return 1;
   1aa06:	2001      	movs	r0, #1
}
   1aa08:	4770      	bx	lr
   1aa0a:	bf00      	nop
   1aa0c:	20009c49 	.word	0x20009c49
   1aa10:	4000b000 	.word	0x4000b000

0001aa14 <cntr_stop>:

uint32_t cntr_stop(void)
{
   1aa14:	b510      	push	{r4, lr}
	LL_ASSERT(_refcount);
   1aa16:	4c0d      	ldr	r4, [pc, #52]	; (1aa4c <cntr_stop+0x38>)
   1aa18:	7820      	ldrb	r0, [r4, #0]
   1aa1a:	b148      	cbz	r0, 1aa30 <cntr_stop+0x1c>

	if (--_refcount) {
   1aa1c:	3801      	subs	r0, #1
   1aa1e:	b2c0      	uxtb	r0, r0
   1aa20:	7020      	strb	r0, [r4, #0]
   1aa22:	b918      	cbnz	r0, 1aa2c <cntr_stop+0x18>
   1aa24:	4b0a      	ldr	r3, [pc, #40]	; (1aa50 <cntr_stop+0x3c>)
   1aa26:	2201      	movs	r2, #1
   1aa28:	601a      	str	r2, [r3, #0]
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_STOP);

	return 0;
}
   1aa2a:	bd10      	pop	{r4, pc}
		return 1;
   1aa2c:	2001      	movs	r0, #1
}
   1aa2e:	bd10      	pop	{r4, pc}
	LL_ASSERT(_refcount);
   1aa30:	4a08      	ldr	r2, [pc, #32]	; (1aa54 <cntr_stop+0x40>)
   1aa32:	4909      	ldr	r1, [pc, #36]	; (1aa58 <cntr_stop+0x44>)
   1aa34:	4809      	ldr	r0, [pc, #36]	; (1aa5c <cntr_stop+0x48>)
   1aa36:	232e      	movs	r3, #46	; 0x2e
   1aa38:	f003 fa8b 	bl	1df52 <printk>
   1aa3c:	4040      	eors	r0, r0
   1aa3e:	f380 8811 	msr	BASEPRI, r0
   1aa42:	f04f 0003 	mov.w	r0, #3
   1aa46:	df02      	svc	2
   1aa48:	7820      	ldrb	r0, [r4, #0]
   1aa4a:	e7e7      	b.n	1aa1c <cntr_stop+0x8>
   1aa4c:	20009c49 	.word	0x20009c49
   1aa50:	4000b004 	.word	0x4000b004
   1aa54:	00024ba0 	.word	0x00024ba0
   1aa58:	00024bec 	.word	0x00024bec
   1aa5c:	00023ff4 	.word	0x00023ff4

0001aa60 <cntr_cnt_get>:
     return p_reg->COUNTER;
   1aa60:	4b01      	ldr	r3, [pc, #4]	; (1aa68 <cntr_cnt_get+0x8>)
   1aa62:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

uint32_t cntr_cnt_get(void)
{
	return nrf_rtc_counter_get(NRF_RTC);
}
   1aa66:	4770      	bx	lr
   1aa68:	4000b000 	.word	0x4000b000

0001aa6c <cntr_cmp_set>:
    p_reg->CC[ch] = cc_val;
   1aa6c:	4b02      	ldr	r3, [pc, #8]	; (1aa78 <cntr_cmp_set+0xc>)
   1aa6e:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   1aa72:	f843 1020 	str.w	r1, [r3, r0, lsl #2]

void cntr_cmp_set(uint8_t cmp, uint32_t value)
{
	nrf_rtc_cc_set(NRF_RTC, cmp, value);
}
   1aa76:	4770      	bx	lr
   1aa78:	4000b000 	.word	0x4000b000

0001aa7c <do_ecb>:
	uint8_t clear_text[16];
	uint8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
   1aa7c:	b4f0      	push	{r4, r5, r6, r7}
	do {
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
   1aa7e:	4b12      	ldr	r3, [pc, #72]	; (1aac8 <do_ecb+0x4c>)

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ecb_task_trigger(NRF_ECB_Type * p_reg, nrf_ecb_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1aa80:	4d12      	ldr	r5, [pc, #72]	; (1aacc <do_ecb+0x50>)
   1aa82:	2601      	movs	r6, #1
   1aa84:	4634      	mov	r4, r6
		NRF_ECB->EVENTS_ENDECB = 0;
   1aa86:	2100      	movs	r1, #0
   1aa88:	602c      	str	r4, [r5, #0]
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
   1aa8a:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   1aa8e:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   1aa92:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
   1aa96:	601c      	str	r4, [r3, #0]
}
   1aa98:	e005      	b.n	1aaa6 <do_ecb+0x2a>
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STARTECB);
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   1aa9a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   1aa9e:	b932      	cbnz	r2, 1aaae <do_ecb+0x32>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   1aaa0:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   1aaa4:	b11a      	cbz	r2, 1aaae <do_ecb+0x32>
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   1aaa6:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   1aaaa:	2a00      	cmp	r2, #0
   1aaac:	d0f5      	beq.n	1aa9a <do_ecb+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1aaae:	602e      	str	r6, [r5, #0]
#else
			/*__WFE();*/
#endif
		}
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   1aab0:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   1aab4:	2a00      	cmp	r2, #0
   1aab6:	d1e7      	bne.n	1aa88 <do_ecb+0xc>
   1aab8:	f8d3 7504 	ldr.w	r7, [r3, #1284]	; 0x504
   1aabc:	2f00      	cmp	r7, #0
   1aabe:	d0e3      	beq.n	1aa88 <do_ecb+0xc>

	NRF_ECB->ECBDATAPTR = 0;
}
   1aac0:	bcf0      	pop	{r4, r5, r6, r7}
	NRF_ECB->ECBDATAPTR = 0;
   1aac2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   1aac6:	4770      	bx	lr
   1aac8:	4000e000 	.word	0x4000e000
   1aacc:	4000e004 	.word	0x4000e004

0001aad0 <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(uint8_t const *const key_le, uint8_t const *const clear_text_le,
		 uint8_t * const cipher_text_le, uint8_t * const cipher_text_be)
{
   1aad0:	b570      	push	{r4, r5, r6, lr}
   1aad2:	b08c      	sub	sp, #48	; 0x30
   1aad4:	460e      	mov	r6, r1
   1aad6:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   1aad8:	4601      	mov	r1, r0
   1aada:	2210      	movs	r2, #16
   1aadc:	4668      	mov	r0, sp
{
   1aade:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   1aae0:	f7f5 fad8 	bl	10094 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   1aae4:	2210      	movs	r2, #16
   1aae6:	eb0d 0002 	add.w	r0, sp, r2
   1aaea:	4631      	mov	r1, r6
   1aaec:	f7f5 fad2 	bl	10094 <mem_rcopy>

	do_ecb(&ecb);
   1aaf0:	4668      	mov	r0, sp
   1aaf2:	f7ff ffc3 	bl	1aa7c <do_ecb>

	if (cipher_text_le) {
   1aaf6:	b125      	cbz	r5, 1ab02 <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   1aaf8:	4628      	mov	r0, r5
   1aafa:	2210      	movs	r2, #16
   1aafc:	a908      	add	r1, sp, #32
   1aafe:	f7f5 fac9 	bl	10094 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   1ab02:	b124      	cbz	r4, 1ab0e <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
   1ab04:	4620      	mov	r0, r4
   1ab06:	2210      	movs	r2, #16
   1ab08:	a908      	add	r1, sp, #32
   1ab0a:	f005 f9b4 	bl	1fe76 <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
   1ab0e:	b00c      	add	sp, #48	; 0x30
   1ab10:	bd70      	pop	{r4, r5, r6, pc}
   1ab12:	bf00      	nop

0001ab14 <sw_switch.isra.0>:
#endif

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
static uint8_t sw_tifs_toggle;

static void sw_switch(uint8_t dir, uint8_t phy_curr, uint8_t flags_curr, uint8_t phy_next,
   1ab14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		      uint8_t flags_next)
{
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   1ab18:	f8df 824c 	ldr.w	r8, [pc, #588]	; 1ad68 <sw_switch.isra.0+0x254>
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1ab1c:	f8df a23c 	ldr.w	sl, [pc, #572]	; 1ad5c <sw_switch.isra.0+0x248>
   1ab20:	f998 7000 	ldrsb.w	r7, [r8]
   1ab24:	4b88      	ldr	r3, [pc, #544]	; (1ad48 <sw_switch.isra.0+0x234>)
   1ab26:	f898 6000 	ldrb.w	r6, [r8]
   1ab2a:	f8ca 3560 	str.w	r3, [sl, #1376]	; 0x560
   1ab2e:	f107 030b 	add.w	r3, r7, #11
   1ab32:	b2db      	uxtb	r3, r3
   1ab34:	00db      	lsls	r3, r3, #3
	 * (TX/RX).
	 */
	nrf_ppi_event_endpoint_setup(
		NRF_PPI,
		radio_enable_ppi,
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   1ab36:	4c85      	ldr	r4, [pc, #532]	; (1ad4c <sw_switch.isra.0+0x238>)
   1ab38:	f8df e230 	ldr.w	lr, [pc, #560]	; 1ad6c <sw_switch.isra.0+0x258>
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   1ab3c:	ea4f 09c6 	mov.w	r9, r6, lsl #3
   1ab40:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1ab44:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
   1ab48:	f109 4c80 	add.w	ip, r9, #1073741824	; 0x40000000
   1ab4c:	f50c 3cf8 	add.w	ip, ip, #126976	; 0x1f000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   1ab50:	eb04 0b86 	add.w	fp, r4, r6, lsl #2
   1ab54:	f107 0508 	add.w	r5, r7, #8
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1ab58:	f107 0410 	add.w	r4, r7, #16
   1ab5c:	f8ca c564 	str.w	ip, [sl, #1380]	; 0x564

NRF_STATIC_INLINE void nrf_ppi_event_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                    nrf_ppi_channel_t channel,
                                                    uint32_t          eep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1ab60:	44ce      	add	lr, r9
   1ab62:	f8c3 b510 	str.w	fp, [r3, #1296]	; 0x510
	uint8_t cc = SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle);
	uint32_t delay;

	hal_radio_sw_switch_setup(cc, ppi, sw_tifs_toggle);

	if (dir) {
   1ab66:	b2e4      	uxtb	r4, r4
   1ab68:	b2ed      	uxtb	r5, r5
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   1ab6a:	fa0f fc86 	sxth.w	ip, r6
   1ab6e:	b1e8      	cbz	r0, 1abac <sw_switch.isra.0+0x98>
	}
}

static inline uint32_t hal_radio_tx_ready_delay_ns_get(uint8_t phy, uint8_t flags)
{
	switch (phy) {
   1ab70:	2a02      	cmp	r2, #2
   1ab72:	ea4f 0a86 	mov.w	sl, r6, lsl #2
   1ab76:	d04d      	beq.n	1ac14 <sw_switch.isra.0+0x100>
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_TXEN_TXIDLE_TX_1M_NS;
   1ab78:	f24a 593c 	movw	r9, #42300	; 0xa53c
   1ab7c:	f649 70c4 	movw	r0, #40900	; 0x9fc4
   1ab80:	2a04      	cmp	r2, #4
   1ab82:	bf18      	it	ne
   1ab84:	4681      	movne	r9, r0
	}
}

static inline uint32_t hal_radio_rx_chain_delay_ns_get(uint8_t phy, uint8_t flags)
{
	switch (phy) {
   1ab86:	2902      	cmp	r1, #2
   1ab88:	f000 80b1 	beq.w	1acee <sw_switch.isra.0+0x1da>
   1ab8c:	2904      	cmp	r1, #4
   1ab8e:	f040 80a4 	bne.w	1acda <sw_switch.isra.0+0x1c6>
   1ab92:	486f      	ldr	r0, [pc, #444]	; (1ad50 <sw_switch.isra.0+0x23c>)
   1ab94:	f509 49eb 	add.w	r9, r9, #30080	; 0x7580
   1ab98:	f109 0914 	add.w	r9, r9, #20
   1ab9c:	fba0 0909 	umull	r0, r9, r0, r9
   1aba0:	ea4f 1999 	mov.w	r9, r9, lsr #6

NRF_STATIC_INLINE void nrf_ppi_task_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                   nrf_ppi_channel_t channel,
                                                   uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1aba4:	486b      	ldr	r0, [pc, #428]	; (1ad54 <sw_switch.isra.0+0x240>)
   1aba6:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
		    HAL_SW_SWITCH_RADIO_ENABLE_S2_PPI(sw_tifs_toggle);
		uint8_t ppi_dis =
			HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(
			    sw_tifs_toggle);

		if (phy_curr & BIT(2)) {
   1abaa:	e040      	b.n	1ac2e <sw_switch.isra.0+0x11a>
   1abac:	00e4      	lsls	r4, r4, #3
   1abae:	00ed      	lsls	r5, r5, #3
   1abb0:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   1abb4:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
   1abb8:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
   1abbc:	f505 35f8 	add.w	r5, r5, #126976	; 0x1f000
   1abc0:	4a65      	ldr	r2, [pc, #404]	; (1ad58 <sw_switch.isra.0+0x244>)
   1abc2:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
		}
#endif /* CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	} else {
		/* RX */
		delay = HAL_RADIO_NS2US_CEIL(
   1abc6:	f04f 0928 	mov.w	r9, #40	; 0x28
static inline void hal_radio_sw_switch_coded_config_clear(uint8_t ppi_en,
	uint8_t ppi_dis, uint8_t cc_reg, uint8_t group_index)
{
	/* Invalidate PPI used when RXing on LE Coded PHY. */
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(
		ppi_en) = 0;
   1abca:	f8c4 0510 	str.w	r0, [r4, #1296]	; 0x510
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(
		ppi_en) = 0;
   1abce:	f8c4 0514 	str.w	r0, [r4, #1300]	; 0x514

	/* Wire the Group task disable to the default EVENTS_COMPARE. */
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_EVT(
		ppi_dis) =
   1abd2:	f8c5 b510 	str.w	fp, [r5, #1296]	; 0x510
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_EVT(cc_reg);
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_TASK(
		ppi_dis) =
   1abd6:	f8c5 e514 	str.w	lr, [r5, #1300]	; 0x514
		}
#endif /* CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}

	if (delay <
   1abda:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
   1abde:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
   1abe2:	f50c 4c10 	add.w	ip, ip, #36864	; 0x9000
	 * always need to capture the PDU END time-stamp.
	 */
	radio_tmr_end_capture();
#endif /* CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	sw_tifs_toggle += 1U;
   1abe6:	3601      	adds	r6, #1
		SW_SWITCH_TIMER->CC[cc]) {
   1abe8:	f8dc 3540 	ldr.w	r3, [ip, #1344]	; 0x540
	if (delay <
   1abec:	454b      	cmp	r3, r9
				 SW_SWITCH_TIMER->CC[cc] - delay);
   1abee:	bf8a      	itet	hi
   1abf0:	f8dc 3540 	ldrhi.w	r3, [ip, #1344]	; 0x540

NRF_STATIC_INLINE void nrf_timer_cc_set(NRF_TIMER_Type *       p_reg,
                                        nrf_timer_cc_channel_t cc_channel,
                                        uint32_t               cc_value)
{
    p_reg->CC[cc_channel] = cc_value;
   1abf4:	2301      	movls	r3, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   1abf6:	eba3 0309 	subhi.w	r3, r3, r9
   1abfa:	f8cc 3540 	str.w	r3, [ip, #1344]	; 0x540
    p_reg->CHENSET = mask;
   1abfe:	4b57      	ldr	r3, [pc, #348]	; (1ad5c <sw_switch.isra.0+0x248>)
	sw_tifs_toggle &= 1;
   1ac00:	f006 0601 	and.w	r6, r6, #1
   1ac04:	f44f 6290 	mov.w	r2, #1152	; 0x480
   1ac08:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   1ac0c:	f888 6000 	strb.w	r6, [r8]
}
   1ac10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ac14:	2902      	cmp	r1, #2
   1ac16:	f000 8090 	beq.w	1ad3a <sw_switch.isra.0+0x226>
   1ac1a:	2904      	cmp	r1, #4
   1ac1c:	f000 808a 	beq.w	1ad34 <sw_switch.isra.0+0x220>
   1ac20:	f04f 0931 	mov.w	r9, #49	; 0x31
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1ac24:	484b      	ldr	r0, [pc, #300]	; (1ad54 <sw_switch.isra.0+0x240>)
   1ac26:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
		if (phy_curr & BIT(2)) {
   1ac2a:	074b      	lsls	r3, r1, #29
   1ac2c:	d56b      	bpl.n	1ad06 <sw_switch.isra.0+0x1f2>
	switch (phy) {
   1ac2e:	2a02      	cmp	r2, #2
   1ac30:	d07d      	beq.n	1ad2e <sw_switch.isra.0+0x21a>
   1ac32:	f24a 10b8 	movw	r0, #41400	; 0xa1b8
   1ac36:	f24a 7330 	movw	r3, #42800	; 0xa730
   1ac3a:	2a04      	cmp	r2, #4
   1ac3c:	bf14      	ite	ne
   1ac3e:	4602      	movne	r2, r0
   1ac40:	461a      	moveq	r2, r3
			    SW_SWITCH_TIMER_S2_EVTS_COMP(sw_tifs_toggle);
   1ac42:	3702      	adds	r7, #2
   1ac44:	b2ff      	uxtb	r7, r7
   1ac46:	00b8      	lsls	r0, r7, #2
				SW_SWITCH_TIMER->CC[cc];
   1ac48:	f8df b124 	ldr.w	fp, [pc, #292]	; 1ad70 <sw_switch.isra.0+0x25c>
   1ac4c:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   1ac50:	f506 73a8 	add.w	r3, r6, #336	; 0x150
   1ac54:	f500 4010 	add.w	r0, r0, #36864	; 0x9000
   1ac58:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
			SW_SWITCH_TIMER->CC[cc_s2] =
   1ac5c:	f8c0 3540 	str.w	r3, [r0, #1344]	; 0x540
#if defined(CONFIG_BT_CTLR_PHY_CODED)
	case BIT(2):
		if (flags & 0x01) {
			return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_S8_NS;
		} else {
			return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_S2_NS;
   1ac60:	f246 0b18 	movw	fp, #24600	; 0x6018
   1ac64:	f242 43b8 	movw	r3, #9400	; 0x24b8
   1ac68:	2904      	cmp	r1, #4
   1ac6a:	bf14      	ite	ne
   1ac6c:	4619      	movne	r1, r3
   1ac6e:	4659      	moveq	r1, fp
			delay_s2 = HAL_RADIO_NS2US_ROUND(
   1ac70:	440a      	add	r2, r1
   1ac72:	4937      	ldr	r1, [pc, #220]	; (1ad50 <sw_switch.isra.0+0x23c>)
			if (delay_s2 < SW_SWITCH_TIMER->CC[cc_s2]) {
   1ac74:	f8d0 3540 	ldr.w	r3, [r0, #1344]	; 0x540
			delay_s2 = HAL_RADIO_NS2US_ROUND(
   1ac78:	fba1 1202 	umull	r1, r2, r1, r2
			if (delay_s2 < SW_SWITCH_TIMER->CC[cc_s2]) {
   1ac7c:	ebb3 1f92 	cmp.w	r3, r2, lsr #6
				SW_SWITCH_TIMER->CC[cc_s2] -= delay_s2;
   1ac80:	bf88      	it	hi
   1ac82:	f8d0 3540 	ldrhi.w	r3, [r0, #1344]	; 0x540
			delay_s2 = HAL_RADIO_NS2US_ROUND(
   1ac86:	ea4f 1192 	mov.w	r1, r2, lsr #6
				SW_SWITCH_TIMER->CC[cc_s2] -= delay_s2;
   1ac8a:	bf8c      	ite	hi
   1ac8c:	1a5b      	subhi	r3, r3, r1
				SW_SWITCH_TIMER->CC[cc_s2] = 1;
   1ac8e:	2301      	movls	r3, #1
   1ac90:	00e4      	lsls	r4, r4, #3
   1ac92:	f8c0 3540 	str.w	r3, [r0, #1344]	; 0x540
   1ac96:	00ed      	lsls	r5, r5, #3
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(cc_s2);
   1ac98:	4b2c      	ldr	r3, [pc, #176]	; (1ad4c <sw_switch.isra.0+0x238>)
		HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI_TASK(
   1ac9a:	4931      	ldr	r1, [pc, #196]	; (1ad60 <sw_switch.isra.0+0x24c>)
	HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI_REGISTER_EVT =
   1ac9c:	4a2f      	ldr	r2, [pc, #188]	; (1ad5c <sw_switch.isra.0+0x248>)
   1ac9e:	4831      	ldr	r0, [pc, #196]	; (1ad64 <sw_switch.isra.0+0x250>)
   1aca0:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   1aca4:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
   1aca8:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(cc_s2);
   1acac:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   1acb0:	f505 35f8 	add.w	r5, r5, #126976	; 0x1f000
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi_en) =
   1acb4:	4b27      	ldr	r3, [pc, #156]	; (1ad54 <sw_switch.isra.0+0x240>)
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi_en) =
   1acb6:	f8c4 7510 	str.w	r7, [r4, #1296]	; 0x510
		HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI_TASK(
   1acba:	4451      	add	r1, sl
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi_en) =
   1acbc:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
    p_reg->CHENSET = mask;
   1acc0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
	    ppi_dis)	=
   1acc4:	f8c5 7510 	str.w	r7, [r5, #1296]	; 0x510
	    ppi_dis) =
   1acc8:	f8c5 e514 	str.w	lr, [r5, #1300]	; 0x514
	HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI_REGISTER_EVT =
   1accc:	f8c2 05a0 	str.w	r0, [r2, #1440]	; 0x5a0
	HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI_REGISTER_TASK =
   1acd0:	f8c2 15a4 	str.w	r1, [r2, #1444]	; 0x5a4
   1acd4:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   1acd8:	e77f      	b.n	1abda <sw_switch.isra.0+0xc6>
   1acda:	481d      	ldr	r0, [pc, #116]	; (1ad50 <sw_switch.isra.0+0x23c>)
   1acdc:	f509 591a 	add.w	r9, r9, #9856	; 0x2680
   1ace0:	f109 092c 	add.w	r9, r9, #44	; 0x2c
   1ace4:	fba0 0909 	umull	r0, r9, r0, r9
   1ace8:	ea4f 1999 	mov.w	r9, r9, lsr #6
   1acec:	e79a      	b.n	1ac24 <sw_switch.isra.0+0x110>
		delay = HAL_RADIO_NS2US_ROUND(
   1acee:	4a18      	ldr	r2, [pc, #96]	; (1ad50 <sw_switch.isra.0+0x23c>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1acf0:	4918      	ldr	r1, [pc, #96]	; (1ad54 <sw_switch.isra.0+0x240>)
   1acf2:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
   1acf6:	f509 59ab 	add.w	r9, r9, #5472	; 0x1560
   1acfa:	f109 091c 	add.w	r9, r9, #28
   1acfe:	fba2 3909 	umull	r3, r9, r2, r9
   1ad02:	ea4f 1999 	mov.w	r9, r9, lsr #6
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(
   1ad06:	00e4      	lsls	r4, r4, #3
   1ad08:	00ed      	lsls	r5, r5, #3
   1ad0a:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   1ad0e:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
   1ad12:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
   1ad16:	f505 35f8 	add.w	r5, r5, #126976	; 0x1f000
		ppi_en) = 0;
   1ad1a:	2300      	movs	r3, #0
   1ad1c:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
		ppi_en) = 0;
   1ad20:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
		ppi_dis) =
   1ad24:	f8c5 b510 	str.w	fp, [r5, #1296]	; 0x510
		ppi_dis) =
   1ad28:	f8c5 e514 	str.w	lr, [r5, #1300]	; 0x514
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(
			group_index);
}
   1ad2c:	e755      	b.n	1abda <sw_switch.isra.0+0xc6>
	switch (phy) {
   1ad2e:	f649 6234 	movw	r2, #40500	; 0x9e34
   1ad32:	e786      	b.n	1ac42 <sw_switch.isra.0+0x12e>
	switch (phy) {
   1ad34:	f04f 0946 	mov.w	r9, #70	; 0x46
   1ad38:	e734      	b.n	1aba4 <sw_switch.isra.0+0x90>
   1ad3a:	4a06      	ldr	r2, [pc, #24]	; (1ad54 <sw_switch.isra.0+0x240>)
   1ad3c:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
   1ad40:	f04f 092d 	mov.w	r9, #45	; 0x2d
   1ad44:	e7df      	b.n	1ad06 <sw_switch.isra.0+0x1f2>
   1ad46:	bf00      	nop
   1ad48:	4000110c 	.word	0x4000110c
   1ad4c:	40009140 	.word	0x40009140
   1ad50:	10624dd3 	.word	0x10624dd3
   1ad54:	40001000 	.word	0x40001000
   1ad58:	40001004 	.word	0x40001004
   1ad5c:	4001f000 	.word	0x4001f000
   1ad60:	40009040 	.word	0x40009040
   1ad64:	40001150 	.word	0x40001150
   1ad68:	20009c4a 	.word	0x20009c4a
   1ad6c:	4001f004 	.word	0x4001f004
   1ad70:	40009000 	.word	0x40009000

0001ad74 <isr_radio>:
	return (NRF_RADIO->EVENTS_DISABLED != 0);
   1ad74:	4b04      	ldr	r3, [pc, #16]	; (1ad88 <isr_radio+0x14>)
   1ad76:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	if (radio_has_disabled()) {
   1ad7a:	b123      	cbz	r3, 1ad86 <isr_radio+0x12>
		isr_cb(isr_cb_param);
   1ad7c:	4a03      	ldr	r2, [pc, #12]	; (1ad8c <isr_radio+0x18>)
   1ad7e:	4b04      	ldr	r3, [pc, #16]	; (1ad90 <isr_radio+0x1c>)
   1ad80:	6810      	ldr	r0, [r2, #0]
   1ad82:	681b      	ldr	r3, [r3, #0]
   1ad84:	4718      	bx	r3
}
   1ad86:	4770      	bx	lr
   1ad88:	40001000 	.word	0x40001000
   1ad8c:	20008c2c 	.word	0x20008c2c
   1ad90:	20008c28 	.word	0x20008c28

0001ad94 <radio_isr_set>:
{
   1ad94:	b538      	push	{r3, r4, r5, lr}
   1ad96:	4604      	mov	r4, r0
	irq_disable(RADIO_IRQn);
   1ad98:	2001      	movs	r0, #1
{
   1ad9a:	460d      	mov	r5, r1
	irq_disable(RADIO_IRQn);
   1ad9c:	f7ec fb90 	bl	74c0 <arch_irq_disable>
	isr_cb_param = param;
   1ada0:	4a08      	ldr	r2, [pc, #32]	; (1adc4 <radio_isr_set+0x30>)
	isr_cb = cb;
   1ada2:	4809      	ldr	r0, [pc, #36]	; (1adc8 <radio_isr_set+0x34>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1ada4:	4b09      	ldr	r3, [pc, #36]	; (1adcc <radio_isr_set+0x38>)
    return p_reg->SHORTS;
}

NRF_STATIC_INLINE void nrf_radio_int_enable(NRF_RADIO_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1ada6:	490a      	ldr	r1, [pc, #40]	; (1add0 <radio_isr_set+0x3c>)
	isr_cb_param = param;
   1ada8:	6015      	str	r5, [r2, #0]
   1adaa:	2510      	movs	r5, #16
   1adac:	2202      	movs	r2, #2
	isr_cb = cb;
   1adae:	6004      	str	r4, [r0, #0]
   1adb0:	f8c1 5304 	str.w	r5, [r1, #772]	; 0x304
	irq_enable(RADIO_IRQn);
   1adb4:	2001      	movs	r0, #1
   1adb6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   1adba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	irq_enable(RADIO_IRQn);
   1adbe:	f7ec bb6f 	b.w	74a0 <arch_irq_enable>
   1adc2:	bf00      	nop
   1adc4:	20008c2c 	.word	0x20008c2c
   1adc8:	20008c28 	.word	0x20008c28
   1adcc:	e000e100 	.word	0xe000e100
   1add0:	40001000 	.word	0x40001000

0001add4 <radio_reset>:
{
   1add4:	b538      	push	{r3, r4, r5, lr}
	irq_disable(RADIO_IRQn);
   1add6:	2001      	movs	r0, #1
   1add8:	f7ec fb72 	bl	74c0 <arch_irq_disable>
}
#endif

NRF_STATIC_INLINE void nrf_radio_power_set(NRF_RADIO_Type * p_reg, bool radio_power)
{
    p_reg->POWER = (uint32_t) radio_power;
   1addc:	4b0b      	ldr	r3, [pc, #44]	; (1ae0c <radio_reset+0x38>)
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   1adde:	490c      	ldr	r1, [pc, #48]	; (1ae10 <radio_reset+0x3c>)
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_0_INCLUDE;
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_1_INCLUDE |
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_1_INCLUDE;
#else
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   1ade0:	4a0c      	ldr	r2, [pc, #48]	; (1ae14 <radio_reset+0x40>)
   1ade2:	4c0d      	ldr	r4, [pc, #52]	; (1ae18 <radio_reset+0x44>)
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_0_INCLUDE |
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_0_INCLUDE |
		HAL_SW_SWITCH_RADIO_ENABLE_S2_PPI_0_INCLUDE;
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   1ade4:	480d      	ldr	r0, [pc, #52]	; (1ae1c <radio_reset+0x48>)
   1ade6:	2500      	movs	r5, #0
   1ade8:	f8c3 5ffc 	str.w	r5, [r3, #4092]	; 0xffc
   1adec:	2501      	movs	r5, #1
   1adee:	f8c3 5ffc 	str.w	r5, [r3, #4092]	; 0xffc
   1adf2:	680b      	ldr	r3, [r1, #0]
					 0xfffffffe) | 0x01000000;
   1adf4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   1adf8:	f023 0301 	bic.w	r3, r3, #1
   1adfc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   1ae00:	600b      	str	r3, [r1, #0]
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   1ae02:	f8c2 4800 	str.w	r4, [r2, #2048]	; 0x800
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   1ae06:	f8c2 0804 	str.w	r0, [r2, #2052]	; 0x804
}
   1ae0a:	bd38      	pop	{r3, r4, r5, pc}
   1ae0c:	40001000 	.word	0x40001000
   1ae10:	40001774 	.word	0x40001774
   1ae14:	4001f000 	.word	0x4001f000
   1ae18:	00010900 	.word	0x00010900
   1ae1c:	00021200 	.word	0x00021200

0001ae20 <radio_phy_set>:
		*(volatile uint32_t *)0x4000173c &= ~0x80000000;
   1ae20:	4a13      	ldr	r2, [pc, #76]	; (1ae70 <radio_phy_set+0x50>)
	switch (phy) {
   1ae22:	2802      	cmp	r0, #2
		*(volatile uint32_t *)0x4000173c &= ~0x80000000;
   1ae24:	6813      	ldr	r3, [r2, #0]
	switch (phy) {
   1ae26:	d00f      	beq.n	1ae48 <radio_phy_set+0x28>
   1ae28:	2804      	cmp	r0, #4
   1ae2a:	d012      	beq.n	1ae52 <radio_phy_set+0x32>
		*(volatile uint32_t *)0x4000173c &= ~0x80000000;
   1ae2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   1ae30:	6013      	str	r3, [r2, #0]
		mode = RADIO_MODE_MODE_Ble_1Mbit;
   1ae32:	2103      	movs	r1, #3
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   1ae34:	4b0f      	ldr	r3, [pc, #60]	; (1ae74 <radio_phy_set+0x54>)
   1ae36:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
   1ae3a:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   1ae3e:	f042 0201 	orr.w	r2, r2, #1
   1ae42:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
}
   1ae46:	4770      	bx	lr
		*(volatile uint32_t *)0x4000173c &= ~0x80000000;
   1ae48:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   1ae4c:	6013      	str	r3, [r2, #0]
		mode = RADIO_MODE_MODE_Ble_2Mbit;
   1ae4e:	2104      	movs	r1, #4
		break;
   1ae50:	e7f0      	b.n	1ae34 <radio_phy_set+0x14>
		*(volatile uint32_t *)0x4000173c |= 0x80000000;
   1ae52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1ae56:	6013      	str	r3, [r2, #0]
				((*(volatile uint32_t *)0x4000173c) & 0xFFFFFF00) |
   1ae58:	6813      	ldr	r3, [r2, #0]
   1ae5a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
		if (flags & 0x01) {
   1ae5e:	f001 0101 	and.w	r1, r1, #1
				((*(volatile uint32_t *)0x4000173c) & 0xFFFFFF00) |
   1ae62:	f043 035c 	orr.w	r3, r3, #92	; 0x5c
		if (flags & 0x01) {
   1ae66:	f1c1 0106 	rsb	r1, r1, #6
		*(volatile uint32_t *)0x4000173c =
   1ae6a:	6013      	str	r3, [r2, #0]
		break;
   1ae6c:	e7e2      	b.n	1ae34 <radio_phy_set+0x14>
   1ae6e:	bf00      	nop
   1ae70:	4000173c 	.word	0x4000173c
   1ae74:	40001000 	.word	0x40001000

0001ae78 <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = (uint32_t)power;
   1ae78:	4b01      	ldr	r3, [pc, #4]	; (1ae80 <radio_tx_power_set+0x8>)
   1ae7a:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
   1ae7e:	4770      	bx	lr
   1ae80:	40001000 	.word	0x40001000

0001ae84 <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   1ae84:	4b01      	ldr	r3, [pc, #4]	; (1ae8c <radio_freq_chan_set+0x8>)
   1ae86:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
}
   1ae8a:	4770      	bx	lr
   1ae8c:	40001000 	.word	0x40001000

0001ae90 <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   1ae90:	4b07      	ldr	r3, [pc, #28]	; (1aeb0 <radio_whiten_iv_set+0x20>)
   1ae92:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   1ae96:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   1ae9a:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   1ae9e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   1aea2:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   1aea6:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   1aeaa:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   1aeae:	4770      	bx	lr
   1aeb0:	40001000 	.word	0x40001000

0001aeb4 <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   1aeb4:	4a0b      	ldr	r2, [pc, #44]	; (1aee4 <radio_aa_set+0x30>)
   1aeb6:	2100      	movs	r1, #0
	NRF_RADIO->RXADDRESSES =
   1aeb8:	2301      	movs	r3, #1
{
   1aeba:	b410      	push	{r4}
	NRF_RADIO->TXADDRESS =
   1aebc:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   1aec0:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   1aec4:	78c3      	ldrb	r3, [r0, #3]
   1aec6:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   1aeca:	7843      	ldrb	r3, [r0, #1]
   1aecc:	7884      	ldrb	r4, [r0, #2]
   1aece:	7801      	ldrb	r1, [r0, #0]
   1aed0:	041b      	lsls	r3, r3, #16
   1aed2:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
   1aed6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
}
   1aeda:	bc10      	pop	{r4}
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   1aedc:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
}
   1aee0:	4770      	bx	lr
   1aee2:	bf00      	nop
   1aee4:	40001000 	.word	0x40001000

0001aee8 <radio_pkt_configure>:
	phy = (flags >> 1) & 0x07; /* phy */
   1aee8:	f3c2 0342 	ubfx	r3, r2, #1, #3
	switch (phy) {
   1aeec:	2b02      	cmp	r3, #2
{
   1aeee:	b410      	push	{r4}
	uint8_t dc = flags & 0x01; /* Adv or Data channel */
   1aef0:	f002 0201 	and.w	r2, r2, #1
	switch (phy) {
   1aef4:	d024      	beq.n	1af40 <radio_pkt_configure+0x58>
		extra |= (3UL << RADIO_PCNF0_TERMLEN_Pos) &
   1aef6:	2b04      	cmp	r3, #4
   1aef8:	bf14      	ite	ne
   1aefa:	2400      	movne	r4, #0
   1aefc:	f04f 44c7 	moveq.w	r4, #1669332992	; 0x63800000
	if (dc) {
   1af00:	b10a      	cbz	r2, 1af06 <radio_pkt_configure+0x1e>
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   1af02:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
			   ((((uint32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   1af06:	f1c0 0308 	rsb	r3, r0, #8
   1af0a:	041b      	lsls	r3, r3, #16
			   ((((uint32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
   1af0c:	f000 000f 	and.w	r0, r0, #15
			    RADIO_PCNF0_S1LEN_Msk) |
   1af10:	4320      	orrs	r0, r4
			   ((((uint32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   1af12:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   1af16:	4a0d      	ldr	r2, [pc, #52]	; (1af4c <radio_pkt_configure+0x64>)
}
   1af18:	bc10      	pop	{r4}
			    RADIO_PCNF0_S1LEN_Msk) |
   1af1a:	4303      	orrs	r3, r0
   1af1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   1af20:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   1af24:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
   1af28:	4809      	ldr	r0, [pc, #36]	; (1af50 <radio_pkt_configure+0x68>)
   1af2a:	4018      	ands	r0, r3
   1af2c:	f8c2 0518 	str.w	r0, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((((uint32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
   1af30:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
   1af34:	4319      	orrs	r1, r3
   1af36:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
   1af3a:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
}
   1af3e:	4770      	bx	lr
	switch (phy) {
   1af40:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
	if (dc) {
   1af44:	2a00      	cmp	r2, #0
   1af46:	d0de      	beq.n	1af06 <radio_pkt_configure+0x1e>
   1af48:	e7db      	b.n	1af02 <radio_pkt_configure+0x1a>
   1af4a:	bf00      	nop
   1af4c:	40001000 	.word	0x40001000
   1af50:	fef80000 	.word	0xfef80000

0001af54 <radio_pkt_rx_set>:
	NRF_RADIO->PACKETPTR = (uint32_t)rx_packet;
   1af54:	4b01      	ldr	r3, [pc, #4]	; (1af5c <radio_pkt_rx_set+0x8>)
   1af56:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
}
   1af5a:	4770      	bx	lr
   1af5c:	40001000 	.word	0x40001000

0001af60 <radio_pkt_tx_set>:
   1af60:	4b01      	ldr	r3, [pc, #4]	; (1af68 <radio_pkt_tx_set+0x8>)
   1af62:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   1af66:	4770      	bx	lr
   1af68:	40001000 	.word	0x40001000

0001af6c <radio_tx_ready_delay_get>:
	switch (phy) {
   1af6c:	2802      	cmp	r0, #2
   1af6e:	d004      	beq.n	1af7a <radio_tx_ready_delay_get+0xe>
   1af70:	2804      	cmp	r0, #4
			return HAL_RADIO_NRF52840_TXEN_TXIDLE_TX_S8_US;
   1af72:	bf14      	ite	ne
   1af74:	2029      	movne	r0, #41	; 0x29
   1af76:	202a      	moveq	r0, #42	; 0x2a
   1af78:	4770      	bx	lr
	switch (phy) {
   1af7a:	2028      	movs	r0, #40	; 0x28
}
   1af7c:	4770      	bx	lr
   1af7e:	bf00      	nop

0001af80 <radio_tx_chain_delay_get>:
}
   1af80:	2001      	movs	r0, #1
   1af82:	4770      	bx	lr

0001af84 <radio_rx_chain_delay_get>:
	switch (phy) {
   1af84:	2802      	cmp	r0, #2
   1af86:	d009      	beq.n	1af9c <radio_rx_chain_delay_get+0x18>
   1af88:	2804      	cmp	r0, #4
   1af8a:	d105      	bne.n	1af98 <radio_rx_chain_delay_get+0x14>
		if (flags & 0x01) {
   1af8c:	f011 0f01 	tst.w	r1, #1
			return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_S2_US;
   1af90:	bf14      	ite	ne
   1af92:	201e      	movne	r0, #30
   1af94:	2019      	moveq	r0, #25
   1af96:	4770      	bx	lr
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_US;
   1af98:	200a      	movs	r0, #10
}
   1af9a:	4770      	bx	lr
	switch (phy) {
   1af9c:	2005      	movs	r0, #5
   1af9e:	4770      	bx	lr

0001afa0 <radio_rx_enable>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1afa0:	4b01      	ldr	r3, [pc, #4]	; (1afa8 <radio_rx_enable+0x8>)
   1afa2:	2201      	movs	r2, #1
   1afa4:	601a      	str	r2, [r3, #0]
}
   1afa6:	4770      	bx	lr
   1afa8:	40001004 	.word	0x40001004

0001afac <radio_disable>:
{
   1afac:	b430      	push	{r4, r5}
    p_reg->CHENCLR = mask;
   1afae:	4a08      	ldr	r2, [pc, #32]	; (1afd0 <radio_disable+0x24>)
	NRF_RADIO->SHORTS = 0;
   1afb0:	4808      	ldr	r0, [pc, #32]	; (1afd4 <radio_disable+0x28>)
   1afb2:	4909      	ldr	r1, [pc, #36]	; (1afd8 <radio_disable+0x2c>)
    p_reg->TASKS_CHG[(uint32_t) group].EN = 1UL;
}

NRF_STATIC_INLINE void nrf_ppi_group_disable(NRF_PPI_Type * p_reg, nrf_ppi_channel_group_t group)
{
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   1afb4:	2301      	movs	r3, #1
    p_reg->CHENCLR = mask;
   1afb6:	f44f 6590 	mov.w	r5, #1152	; 0x480
   1afba:	2400      	movs	r4, #0
   1afbc:	f8c2 5508 	str.w	r5, [r2, #1288]	; 0x508
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   1afc0:	6053      	str	r3, [r2, #4]
   1afc2:	60d3      	str	r3, [r2, #12]
   1afc4:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
}
   1afc8:	bc30      	pop	{r4, r5}
   1afca:	600b      	str	r3, [r1, #0]
   1afcc:	4770      	bx	lr
   1afce:	bf00      	nop
   1afd0:	4001f000 	.word	0x4001f000
   1afd4:	40001000 	.word	0x40001000
   1afd8:	40001010 	.word	0x40001010

0001afdc <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   1afdc:	4b04      	ldr	r3, [pc, #16]	; (1aff0 <radio_status_reset+0x14>)
   1afde:	2200      	movs	r2, #0
   1afe0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   1afe4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   1afe8:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
   1afec:	4770      	bx	lr
   1afee:	bf00      	nop
   1aff0:	40001000 	.word	0x40001000

0001aff4 <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   1aff4:	4b03      	ldr	r3, [pc, #12]	; (1b004 <radio_is_ready+0x10>)
   1aff6:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   1affa:	3800      	subs	r0, #0
   1affc:	bf18      	it	ne
   1affe:	2001      	movne	r0, #1
   1b000:	4770      	bx	lr
   1b002:	bf00      	nop
   1b004:	40001000 	.word	0x40001000

0001b008 <radio_is_done>:
	return (NRF_RADIO->EVENTS_END != 0);
   1b008:	4b03      	ldr	r3, [pc, #12]	; (1b018 <radio_is_done+0x10>)
   1b00a:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   1b00e:	3800      	subs	r0, #0
   1b010:	bf18      	it	ne
   1b012:	2001      	movne	r0, #1
   1b014:	4770      	bx	lr
   1b016:	bf00      	nop
   1b018:	40001000 	.word	0x40001000

0001b01c <radio_is_idle>:
	return (NRF_RADIO->STATE == 0);
   1b01c:	4b03      	ldr	r3, [pc, #12]	; (1b02c <radio_is_idle+0x10>)
   1b01e:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
   1b022:	fab0 f080 	clz	r0, r0
   1b026:	0940      	lsrs	r0, r0, #5
   1b028:	4770      	bx	lr
   1b02a:	bf00      	nop
   1b02c:	40001000 	.word	0x40001000

0001b030 <radio_crc_configure>:
	NRF_RADIO->CRCCNF =
   1b030:	4b04      	ldr	r3, [pc, #16]	; (1b044 <radio_crc_configure+0x14>)
   1b032:	f240 1203 	movw	r2, #259	; 0x103
   1b036:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	NRF_RADIO->CRCPOLY = polynomial;
   1b03a:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   1b03e:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
}
   1b042:	4770      	bx	lr
   1b044:	40001000 	.word	0x40001000

0001b048 <radio_crc_is_valid>:
	return (NRF_RADIO->CRCSTATUS != 0);
   1b048:	4b03      	ldr	r3, [pc, #12]	; (1b058 <radio_crc_is_valid+0x10>)
   1b04a:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1b04e:	3800      	subs	r0, #0
   1b050:	bf18      	it	ne
   1b052:	2001      	movne	r0, #1
   1b054:	4770      	bx	lr
   1b056:	bf00      	nop
   1b058:	40001000 	.word	0x40001000

0001b05c <radio_pkt_empty_get>:
}
   1b05c:	4800      	ldr	r0, [pc, #0]	; (1b060 <radio_pkt_empty_get+0x4>)
   1b05e:	4770      	bx	lr
   1b060:	20008b20 	.word	0x20008b20

0001b064 <radio_pkt_scratch_get>:
}
   1b064:	4800      	ldr	r0, [pc, #0]	; (1b068 <radio_pkt_scratch_get+0x4>)
   1b066:	4770      	bx	lr
   1b068:	20008b24 	.word	0x20008b24

0001b06c <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1b06c:	4b05      	ldr	r3, [pc, #20]	; (1b084 <radio_switch_complete_and_rx+0x18>)
{
   1b06e:	b410      	push	{r4}
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(0, 0, 0, phy_rx, 0);
   1b070:	2100      	movs	r1, #0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1b072:	2403      	movs	r4, #3
{
   1b074:	4602      	mov	r2, r0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1b076:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	sw_switch(0, 0, 0, phy_rx, 0);
   1b07a:	4608      	mov	r0, r1
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1b07c:	bc10      	pop	{r4}
	sw_switch(0, 0, 0, phy_rx, 0);
   1b07e:	f7ff bd49 	b.w	1ab14 <sw_switch.isra.0>
   1b082:	bf00      	nop
   1b084:	40001000 	.word	0x40001000

0001b088 <radio_switch_complete_and_tx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1b088:	4b04      	ldr	r3, [pc, #16]	; (1b09c <radio_switch_complete_and_tx+0x14>)
{
   1b08a:	b410      	push	{r4}
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1b08c:	2403      	movs	r4, #3
{
   1b08e:	4601      	mov	r1, r0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1b090:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
   1b094:	2001      	movs	r0, #1
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1b096:	bc10      	pop	{r4}
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
   1b098:	f7ff bd3c 	b.w	1ab14 <sw_switch.isra.0>
   1b09c:	40001000 	.word	0x40001000

0001b0a0 <radio_switch_complete_and_disable>:

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
   1b0a0:	4904      	ldr	r1, [pc, #16]	; (1b0b4 <radio_switch_complete_and_disable+0x14>)
    p_reg->CHENCLR = mask;
   1b0a2:	4b05      	ldr	r3, [pc, #20]	; (1b0b8 <radio_switch_complete_and_disable+0x18>)
   1b0a4:	2003      	movs	r0, #3
   1b0a6:	f44f 6290 	mov.w	r2, #1152	; 0x480
   1b0aa:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   1b0ae:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	    (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	hal_radio_sw_switch_disable();
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1b0b2:	4770      	bx	lr
   1b0b4:	40001000 	.word	0x40001000
   1b0b8:	4001f000 	.word	0x4001f000

0001b0bc <radio_rssi_measure>:

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
   1b0bc:	4a03      	ldr	r2, [pc, #12]	; (1b0cc <radio_rssi_measure+0x10>)
   1b0be:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   1b0c2:	f443 7388 	orr.w	r3, r3, #272	; 0x110
   1b0c6:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	    (RADIO_SHORTS_ADDRESS_RSSISTART_Msk |
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}
   1b0ca:	4770      	bx	lr
   1b0cc:	40001000 	.word	0x40001000

0001b0d0 <radio_rssi_get>:

uint32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
   1b0d0:	4b01      	ldr	r3, [pc, #4]	; (1b0d8 <radio_rssi_get+0x8>)
   1b0d2:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
   1b0d6:	4770      	bx	lr
   1b0d8:	40001000 	.word	0x40001000

0001b0dc <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   1b0dc:	4b02      	ldr	r3, [pc, #8]	; (1b0e8 <radio_rssi_status_reset+0xc>)
   1b0de:	2200      	movs	r2, #0
   1b0e0:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
}
   1b0e4:	4770      	bx	lr
   1b0e6:	bf00      	nop
   1b0e8:	40001000 	.word	0x40001000

0001b0ec <radio_rssi_is_ready>:

uint32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   1b0ec:	4b03      	ldr	r3, [pc, #12]	; (1b0fc <radio_rssi_is_ready+0x10>)
   1b0ee:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   1b0f2:	3800      	subs	r0, #0
   1b0f4:	bf18      	it	ne
   1b0f6:	2001      	movne	r0, #1
   1b0f8:	4770      	bx	lr
   1b0fa:	bf00      	nop
   1b0fc:	40001000 	.word	0x40001000

0001b100 <radio_filter_configure>:

void radio_filter_configure(uint8_t bitmask_enable, uint8_t bitmask_addr_type,
			    uint8_t *bdaddr)
{
   1b100:	b430      	push	{r4, r5}
   1b102:	2400      	movs	r4, #0
	uint8_t index;

	for (index = 0U; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   1b104:	00a3      	lsls	r3, r4, #2
   1b106:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1b10a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
			((uint32_t)bdaddr[2] << 16) |
			((uint32_t)bdaddr[1] << 8) |
   1b10e:	6815      	ldr	r5, [r2, #0]
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   1b110:	f8c3 5600 	str.w	r5, [r3, #1536]	; 0x600
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((uint32_t)bdaddr[5] << 8) | bdaddr[4];
   1b114:	3401      	adds	r4, #1
   1b116:	8895      	ldrh	r5, [r2, #4]
   1b118:	f8c3 5620 	str.w	r5, [r3, #1568]	; 0x620
	for (index = 0U; index < 8; index++) {
   1b11c:	2c08      	cmp	r4, #8
		bdaddr += 6;
   1b11e:	f102 0206 	add.w	r2, r2, #6
	for (index = 0U; index < 8; index++) {
   1b122:	d1ef      	bne.n	1b104 <radio_filter_configure+0x4>
	}

	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   1b124:	4b03      	ldr	r3, [pc, #12]	; (1b134 <radio_filter_configure+0x34>)
   1b126:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
}
   1b12a:	bc30      	pop	{r4, r5}
	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   1b12c:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
}
   1b130:	4770      	bx	lr
   1b132:	bf00      	nop
   1b134:	40001000 	.word	0x40001000

0001b138 <radio_filter_disable>:

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   1b138:	4a03      	ldr	r2, [pc, #12]	; (1b148 <radio_filter_disable+0x10>)
   1b13a:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   1b13e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1b142:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
}
   1b146:	4770      	bx	lr
   1b148:	40001000 	.word	0x40001000

0001b14c <radio_filter_status_reset>:

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   1b14c:	4b02      	ldr	r3, [pc, #8]	; (1b158 <radio_filter_status_reset+0xc>)
   1b14e:	2200      	movs	r2, #0
   1b150:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   1b154:	4770      	bx	lr
   1b156:	bf00      	nop
   1b158:	40001000 	.word	0x40001000

0001b15c <radio_filter_has_match>:

uint32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   1b15c:	4b03      	ldr	r3, [pc, #12]	; (1b16c <radio_filter_has_match+0x10>)
   1b15e:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   1b162:	3800      	subs	r0, #0
   1b164:	bf18      	it	ne
   1b166:	2001      	movne	r0, #1
   1b168:	4770      	bx	lr
   1b16a:	bf00      	nop
   1b16c:	40001000 	.word	0x40001000

0001b170 <radio_filter_match_get>:

uint32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   1b170:	4b01      	ldr	r3, [pc, #4]	; (1b178 <radio_filter_match_get+0x8>)
   1b172:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   1b176:	4770      	bx	lr
   1b178:	40001000 	.word	0x40001000

0001b17c <radio_tmr_status_reset>:
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   1b17c:	4904      	ldr	r1, [pc, #16]	; (1b190 <radio_tmr_status_reset+0x14>)
   1b17e:	4b05      	ldr	r3, [pc, #20]	; (1b194 <radio_tmr_status_reset+0x18>)
   1b180:	4a05      	ldr	r2, [pc, #20]	; (1b198 <radio_tmr_status_reset+0x1c>)
   1b182:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   1b186:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
   1b18a:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
			BIT(HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI) |
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
#endif /* CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
			BIT(HAL_TRIGGER_CRYPT_PPI));
}
   1b18e:	4770      	bx	lr
   1b190:	4000b000 	.word	0x4000b000
   1b194:	4001f000 	.word	0x4001f000
   1b198:	0e742060 	.word	0x0e742060

0001b19c <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(uint32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	nrf_timer_cc_set(SW_SWITCH_TIMER,
   1b19c:	4b03      	ldr	r3, [pc, #12]	; (1b1ac <radio_tmr_tifs_set+0x10>)
   1b19e:	4a04      	ldr	r2, [pc, #16]	; (1b1b0 <radio_tmr_tifs_set+0x14>)
   1b1a0:	781b      	ldrb	r3, [r3, #0]
   1b1a2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   1b1a6:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
			 SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle), tifs);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1b1aa:	4770      	bx	lr
   1b1ac:	20009c4a 	.word	0x20009c4a
   1b1b0:	40009000 	.word	0x40009000

0001b1b4 <radio_tmr_start>:

uint32_t radio_tmr_start(uint8_t trx, uint32_t ticks_start, uint32_t remainder)
{
   1b1b4:	b4f0      	push	{r4, r5, r6, r7}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   1b1b6:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   1b1ba:	4d2a      	ldr	r5, [pc, #168]	; (1b264 <radio_tmr_start+0xb0>)
   1b1bc:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   1b1c0:	42ab      	cmp	r3, r5
{
   1b1c2:	4604      	mov	r4, r0
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   1b1c4:	d906      	bls.n	1b1d4 <radio_tmr_start+0x20>
		ticks_start--;
		remainder += 30517578UL;
   1b1c6:	f102 72e8 	add.w	r2, r2, #30408704	; 0x1d00000
   1b1ca:	f502 32d4 	add.w	r2, r2, #108544	; 0x1a800
   1b1ce:	f502 72a5 	add.w	r2, r2, #330	; 0x14a
		ticks_start--;
   1b1d2:	3901      	subs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b1d4:	4d24      	ldr	r5, [pc, #144]	; (1b268 <radio_tmr_start+0xb4>)
	}
	remainder /= 1000000UL;

	nrf_timer_task_trigger(EVENT_TIMER, NRF_TIMER_TASK_CLEAR);
	EVENT_TIMER->MODE = 0;
   1b1d6:	4b25      	ldr	r3, [pc, #148]	; (1b26c <radio_tmr_start+0xb8>)
	remainder /= 1000000UL;
   1b1d8:	4825      	ldr	r0, [pc, #148]	; (1b270 <radio_tmr_start+0xbc>)
   1b1da:	2601      	movs	r6, #1
   1b1dc:	602e      	str	r6, [r5, #0]
	EVENT_TIMER->MODE = 0;
   1b1de:	2600      	movs	r6, #0
   1b1e0:	f8c3 6504 	str.w	r6, [r3, #1284]	; 0x504
    p_reg->CC[ch] = cc_val;
   1b1e4:	4d23      	ldr	r5, [pc, #140]	; (1b274 <radio_tmr_start+0xc0>)
	remainder /= 1000000UL;
   1b1e6:	fba0 0202 	umull	r0, r2, r0, r2
	EVENT_TIMER->PRESCALER = 4;
   1b1ea:	2604      	movs	r6, #4
   1b1ec:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
	remainder /= 1000000UL;
   1b1f0:	0c90      	lsrs	r0, r2, #18
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   1b1f2:	2602      	movs	r6, #2
   1b1f4:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1b1f8:	4a1f      	ldr	r2, [pc, #124]	; (1b278 <radio_tmr_start+0xc4>)
    p_reg->CC[cc_channel] = cc_value;
   1b1fa:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
   1b1fe:	f8c5 1548 	str.w	r1, [r5, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   1b202:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   1b206:	f8c5 1344 	str.w	r1, [r5, #836]	; 0x344
   1b20a:	491c      	ldr	r1, [pc, #112]	; (1b27c <radio_tmr_start+0xc8>)
   1b20c:	f8c2 1538 	str.w	r1, [r2, #1336]	; 0x538
    p_reg->CHENSET = mask;
   1b210:	2120      	movs	r1, #32
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1b212:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
    p_reg->CHENSET = mask;
   1b216:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
	nrf_ppi_channels_disable(
   1b21a:	b1e4      	cbz	r4, 1b256 <radio_tmr_start+0xa2>
    p_reg->CHENCLR = mask;
   1b21c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
   1b220:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	nrf_ppi_channels_enable(
   1b224:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
    p_reg->CHENSET = mask;
   1b228:	4a13      	ldr	r2, [pc, #76]	; (1b278 <radio_tmr_start+0xc4>)
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0U;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_CLEAR);
	SW_SWITCH_TIMER->MODE = 0;
   1b22a:	4b15      	ldr	r3, [pc, #84]	; (1b280 <radio_tmr_start+0xcc>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b22c:	4915      	ldr	r1, [pc, #84]	; (1b284 <radio_tmr_start+0xd0>)
   1b22e:	f8c2 4504 	str.w	r4, [r2, #1284]	; 0x504
   1b232:	2500      	movs	r5, #0
   1b234:	2401      	movs	r4, #1
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1b236:	4e14      	ldr	r6, [pc, #80]	; (1b288 <radio_tmr_start+0xd4>)
   1b238:	600c      	str	r4, [r1, #0]
	SW_SWITCH_TIMER->PRESCALER = 4;
   1b23a:	2704      	movs	r7, #4
	SW_SWITCH_TIMER->MODE = 0;
   1b23c:	f8c3 5504 	str.w	r5, [r3, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   1b240:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   1b244:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
   1b248:	601c      	str	r4, [r3, #0]
   1b24a:	f8c2 6548 	str.w	r6, [r2, #1352]	; 0x548
	 */
#endif /* CONFIG_BT_CTLR_PHY_CODED && CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder;
}
   1b24e:	bcf0      	pop	{r4, r5, r6, r7}
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1b250:	f8c2 154c 	str.w	r1, [r2, #1356]	; 0x54c
   1b254:	4770      	bx	lr
    p_reg->CHENCLR = mask;
   1b256:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   1b25a:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
   1b25e:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
   1b262:	e7e1      	b.n	1b228 <radio_tmr_start+0x74>
   1b264:	7ff0bdbf 	.word	0x7ff0bdbf
   1b268:	4000800c 	.word	0x4000800c
   1b26c:	40008000 	.word	0x40008000
   1b270:	431bde83 	.word	0x431bde83
   1b274:	4000b000 	.word	0x4000b000
   1b278:	4001f000 	.word	0x4001f000
   1b27c:	4000b148 	.word	0x4000b148
   1b280:	40009000 	.word	0x40009000
   1b284:	4000900c 	.word	0x4000900c
   1b288:	4000110c 	.word	0x4000110c

0001b28c <radio_tmr_start_tick>:

uint32_t radio_tmr_start_tick(uint8_t trx, uint32_t tick)
{
   1b28c:	b4f0      	push	{r4, r5, r6, r7}
    p_reg->CC[cc_channel] = cc_value;
   1b28e:	4c16      	ldr	r4, [pc, #88]	; (1b2e8 <radio_tmr_start_tick+0x5c>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b290:	4f16      	ldr	r7, [pc, #88]	; (1b2ec <radio_tmr_start_tick+0x60>)
   1b292:	4e17      	ldr	r6, [pc, #92]	; (1b2f0 <radio_tmr_start_tick+0x64>)
    p_reg->CC[ch] = cc_val;
   1b294:	4d17      	ldr	r5, [pc, #92]	; (1b2f4 <radio_tmr_start_tick+0x68>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1b296:	4b18      	ldr	r3, [pc, #96]	; (1b2f8 <radio_tmr_start_tick+0x6c>)
   1b298:	2201      	movs	r2, #1
   1b29a:	603a      	str	r2, [r7, #0]
   1b29c:	6032      	str	r2, [r6, #0]
    p_reg->CC[cc_channel] = cc_value;
   1b29e:	f8c4 2540 	str.w	r2, [r4, #1344]	; 0x540
    p_reg->EVTENSET = mask;
   1b2a2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    p_reg->CC[ch] = cc_val;
   1b2a6:	f8c5 1548 	str.w	r1, [r5, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   1b2aa:	f8c5 2344 	str.w	r2, [r5, #836]	; 0x344
   1b2ae:	4913      	ldr	r1, [pc, #76]	; (1b2fc <radio_tmr_start_tick+0x70>)
   1b2b0:	f8c3 1538 	str.w	r1, [r3, #1336]	; 0x538
    p_reg->CHENSET = mask;
   1b2b4:	2220      	movs	r2, #32
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1b2b6:	f8c3 453c 	str.w	r4, [r3, #1340]	; 0x53c
    p_reg->CHENSET = mask;
   1b2ba:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	nrf_ppi_channels_disable(
   1b2be:	b158      	cbz	r0, 1b2d8 <radio_tmr_start_tick+0x4c>
    p_reg->CHENCLR = mask;
   1b2c0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   1b2c4:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	nrf_ppi_channels_enable(
   1b2c8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    p_reg->CHENSET = mask;
   1b2cc:	4a0a      	ldr	r2, [pc, #40]	; (1b2f8 <radio_tmr_start_tick+0x6c>)
	last_pdu_end_us = 0U;
#endif /* CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder_us;
}
   1b2ce:	2001      	movs	r0, #1
   1b2d0:	bcf0      	pop	{r4, r5, r6, r7}
   1b2d2:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
   1b2d6:	4770      	bx	lr
    p_reg->CHENCLR = mask;
   1b2d8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   1b2dc:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
   1b2e0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
   1b2e4:	e7f2      	b.n	1b2cc <radio_tmr_start_tick+0x40>
   1b2e6:	bf00      	nop
   1b2e8:	40008000 	.word	0x40008000
   1b2ec:	40008004 	.word	0x40008004
   1b2f0:	4000800c 	.word	0x4000800c
   1b2f4:	4000b000 	.word	0x4000b000
   1b2f8:	4001f000 	.word	0x4001f000
   1b2fc:	4000b148 	.word	0x4000b148

0001b300 <radio_tmr_start_get>:
    return p_reg->CC[ch];
   1b300:	4b01      	ldr	r3, [pc, #4]	; (1b308 <radio_tmr_start_get+0x8>)
   1b302:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

uint32_t radio_tmr_start_get(void)
{
	return nrf_rtc_cc_get(NRF_RTC0, 2);
}
   1b306:	4770      	bx	lr
   1b308:	4000b000 	.word	0x4000b000

0001b30c <radio_tmr_stop>:

void radio_tmr_stop(void)
{
   1b30c:	b410      	push	{r4}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b30e:	4805      	ldr	r0, [pc, #20]	; (1b324 <radio_tmr_stop+0x18>)
   1b310:	4c05      	ldr	r4, [pc, #20]	; (1b328 <radio_tmr_stop+0x1c>)
   1b312:	4906      	ldr	r1, [pc, #24]	; (1b32c <radio_tmr_stop+0x20>)
   1b314:	4a06      	ldr	r2, [pc, #24]	; (1b330 <radio_tmr_stop+0x24>)
   1b316:	2301      	movs	r3, #1
   1b318:	6023      	str	r3, [r4, #0]
   1b31a:	6003      	str	r3, [r0, #0]

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_STOP);
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_SHUTDOWN);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1b31c:	bc10      	pop	{r4}
   1b31e:	600b      	str	r3, [r1, #0]
   1b320:	6013      	str	r3, [r2, #0]
   1b322:	4770      	bx	lr
   1b324:	40008010 	.word	0x40008010
   1b328:	40008004 	.word	0x40008004
   1b32c:	40009004 	.word	0x40009004
   1b330:	40009010 	.word	0x40009010

0001b334 <radio_tmr_hcto_configure>:
    p_reg->CC[cc_channel] = cc_value;
   1b334:	4904      	ldr	r1, [pc, #16]	; (1b348 <radio_tmr_hcto_configure+0x14>)
    p_reg->CHENSET = mask;
   1b336:	4b05      	ldr	r3, [pc, #20]	; (1b34c <radio_tmr_hcto_configure+0x18>)
   1b338:	f8c1 0544 	str.w	r0, [r1, #1348]	; 0x544
   1b33c:	f04f 6288 	mov.w	r2, #71303168	; 0x4400000
   1b340:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_disable_on_hcto_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI) |
		BIT(HAL_RADIO_DISABLE_ON_HCTO_PPI));
}
   1b344:	4770      	bx	lr
   1b346:	bf00      	nop
   1b348:	40008000 	.word	0x40008000
   1b34c:	4001f000 	.word	0x4001f000

0001b350 <radio_tmr_aa_get>:
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI));
}

uint32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   1b350:	4b01      	ldr	r3, [pc, #4]	; (1b358 <radio_tmr_aa_get+0x8>)
   1b352:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   1b356:	4770      	bx	lr
   1b358:	40008000 	.word	0x40008000

0001b35c <radio_tmr_aa_save>:

static uint32_t radio_tmr_aa;

void radio_tmr_aa_save(uint32_t aa)
{
	radio_tmr_aa = aa;
   1b35c:	4b01      	ldr	r3, [pc, #4]	; (1b364 <radio_tmr_aa_save+0x8>)
   1b35e:	6018      	str	r0, [r3, #0]
}
   1b360:	4770      	bx	lr
   1b362:	bf00      	nop
   1b364:	20008c30 	.word	0x20008c30

0001b368 <radio_tmr_aa_restore>:

uint32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
   1b368:	4b01      	ldr	r3, [pc, #4]	; (1b370 <radio_tmr_aa_restore+0x8>)
}
   1b36a:	6818      	ldr	r0, [r3, #0]
   1b36c:	4770      	bx	lr
   1b36e:	bf00      	nop
   1b370:	20008c30 	.word	0x20008c30

0001b374 <radio_tmr_end_capture>:
   1b374:	4b02      	ldr	r3, [pc, #8]	; (1b380 <radio_tmr_end_capture+0xc>)
   1b376:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   1b37a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504

void radio_tmr_end_capture(void)
{
	hal_radio_end_time_capture_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_RADIO_END_TIME_CAPTURE_PPI));
}
   1b37e:	4770      	bx	lr
   1b380:	4001f000 	.word	0x4001f000

0001b384 <radio_tmr_end_get>:
uint32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   1b384:	4b01      	ldr	r3, [pc, #4]	; (1b38c <radio_tmr_end_get+0x8>)
   1b386:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
}
   1b38a:	4770      	bx	lr
   1b38c:	40008000 	.word	0x40008000

0001b390 <radio_tmr_tifs_base_get>:
   1b390:	4b01      	ldr	r3, [pc, #4]	; (1b398 <radio_tmr_tifs_base_get+0x8>)
   1b392:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   1b396:	4770      	bx	lr
   1b398:	40008000 	.word	0x40008000

0001b39c <radio_ccm_rx_pkt_set>:
#endif /* CONFIG_BT_CTLR_GPIO_PA_PIN || CONFIG_BT_CTLR_GPIO_LNA_PIN */

static uint8_t MALIGN(4) _ccm_scratch[(HAL_RADIO_PDU_LEN_MAX - 4) + 16];

void *radio_ccm_rx_pkt_set(struct ccm *ccm, uint8_t phy, void *pkt)
{
   1b39c:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1b39e:	4b1e      	ldr	r3, [pc, #120]	; (1b418 <radio_ccm_rx_pkt_set+0x7c>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1b3a0:	2402      	movs	r4, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1b3a2:	2500      	movs	r5, #0
	/* Enable CCM support for 8-bit length field PDUs. */
	mode |= (CCM_MODE_LENGTH_Extended << CCM_MODE_LENGTH_Pos) &
		CCM_MODE_LENGTH_Msk;

	/* Select CCM data rate based on current PHY in use. */
	switch (phy) {
   1b3a4:	42a1      	cmp	r1, r4
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1b3a6:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
{
   1b3aa:	4606      	mov	r6, r0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1b3ac:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	switch (phy) {
   1b3b0:	d02f      	beq.n	1b412 <radio_ccm_rx_pkt_set+0x76>
   1b3b2:	2904      	cmp	r1, #4
   1b3b4:	d12b      	bne.n	1b40e <radio_ccm_rx_pkt_set+0x72>
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1b3b6:	4819      	ldr	r0, [pc, #100]	; (1b41c <radio_ccm_rx_pkt_set+0x80>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1b3b8:	4919      	ldr	r1, [pc, #100]	; (1b420 <radio_ccm_rx_pkt_set+0x84>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1b3ba:	4c1a      	ldr	r4, [pc, #104]	; (1b424 <radio_ccm_rx_pkt_set+0x88>)
	case BIT(2):
		mode |= (CCM_MODE_DATARATE_125Kbps <<
			 CCM_MODE_DATARATE_Pos) &
			CCM_MODE_DATARATE_Msk;

		NRF_CCM->RATEOVERRIDE =
   1b3bc:	2503      	movs	r5, #3
   1b3be:	f8c3 551c 	str.w	r5, [r3, #1308]	; 0x51c
   1b3c2:	f8c0 4578 	str.w	r4, [r0, #1400]	; 0x578
    p_reg->CHENSET = mask;
   1b3c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1b3ca:	f8c0 157c 	str.w	r1, [r0, #1404]	; 0x57c
		mode |= (CCM_MODE_DATARATE_125Kbps <<
   1b3ce:	4916      	ldr	r1, [pc, #88]	; (1b428 <radio_ccm_rx_pkt_set+0x8c>)
    p_reg->CHENSET = mask;
   1b3d0:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504

	NRF_CCM->MAXPACKETSIZE = max_len;
#endif
#endif /* !CONFIG_SOC_SERIES_NRF51X */

	NRF_CCM->MODE = mode;
   1b3d4:	4b10      	ldr	r3, [pc, #64]	; (1b418 <radio_ccm_rx_pkt_set+0x7c>)
	NRF_CCM->CNFPTR = (uint32_t)ccm;
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   1b3d6:	4815      	ldr	r0, [pc, #84]	; (1b42c <radio_ccm_rx_pkt_set+0x90>)
   1b3d8:	4c10      	ldr	r4, [pc, #64]	; (1b41c <radio_ccm_rx_pkt_set+0x80>)
	NRF_CCM->MODE = mode;
   1b3da:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	NRF_CCM->OUTPTR = (uint32_t)pkt;
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   1b3de:	4f14      	ldr	r7, [pc, #80]	; (1b430 <radio_ccm_rx_pkt_set+0x94>)
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   1b3e0:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
	NRF_CCM->SHORTS = 0;
   1b3e4:	2100      	movs	r1, #0
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   1b3e6:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
   1b3ea:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
	NRF_CCM->OUTPTR = (uint32_t)pkt;
   1b3ee:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ccm_task_trigger(NRF_CCM_Type * p_reg,
                                            nrf_ccm_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b3f2:	2201      	movs	r2, #1
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   1b3f4:	f8c3 7514 	str.w	r7, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = 0;
   1b3f8:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   1b3fc:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   1b400:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
   1b404:	f8c4 5504 	str.w	r5, [r4, #1284]	; 0x504
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_CRYPT_PPI));

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   1b408:	bcf0      	pop	{r4, r5, r6, r7}
   1b40a:	601a      	str	r2, [r3, #0]
   1b40c:	4770      	bx	lr
		mode |= (CCM_MODE_DATARATE_1Mbit <<
   1b40e:	4909      	ldr	r1, [pc, #36]	; (1b434 <radio_ccm_rx_pkt_set+0x98>)
   1b410:	e7e0      	b.n	1b3d4 <radio_ccm_rx_pkt_set+0x38>
	switch (phy) {
   1b412:	4909      	ldr	r1, [pc, #36]	; (1b438 <radio_ccm_rx_pkt_set+0x9c>)
   1b414:	e7de      	b.n	1b3d4 <radio_ccm_rx_pkt_set+0x38>
   1b416:	bf00      	nop
   1b418:	4000f000 	.word	0x4000f000
   1b41c:	4001f000 	.word	0x4001f000
   1b420:	4000f00c 	.word	0x4000f00c
   1b424:	40001150 	.word	0x40001150
   1b428:	01020001 	.word	0x01020001
   1b42c:	20008b24 	.word	0x20008b24
   1b430:	20008a14 	.word	0x20008a14
   1b434:	01000001 	.word	0x01000001
   1b438:	01010001 	.word	0x01010001

0001b43c <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
   1b43c:	b470      	push	{r4, r5, r6}
	uint32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1b43e:	4b10      	ldr	r3, [pc, #64]	; (1b480 <radio_ccm_tx_pkt_set+0x44>)
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
	NRF_CCM->CNFPTR = (uint32_t)ccm;
	NRF_CCM->INPTR = (uint32_t)pkt;
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   1b440:	4d10      	ldr	r5, [pc, #64]	; (1b484 <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->MODE = mode;
   1b442:	4e11      	ldr	r6, [pc, #68]	; (1b488 <radio_ccm_tx_pkt_set+0x4c>)
{
   1b444:	4604      	mov	r4, r0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1b446:	2200      	movs	r2, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1b448:	2002      	movs	r0, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1b44a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1b44e:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
	NRF_CCM->MODE = mode;
   1b452:	f8c3 6504 	str.w	r6, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   1b456:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   1b45a:	4e0c      	ldr	r6, [pc, #48]	; (1b48c <radio_ccm_tx_pkt_set+0x50>)
	NRF_CCM->INPTR = (uint32_t)pkt;
   1b45c:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   1b460:	2401      	movs	r4, #1
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   1b462:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
	NRF_CCM->EVENTS_ERROR = 0;

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   1b466:	4628      	mov	r0, r5
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   1b468:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   1b46c:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   1b470:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   1b474:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   1b478:	601c      	str	r4, [r3, #0]
}
   1b47a:	bc70      	pop	{r4, r5, r6}
   1b47c:	4770      	bx	lr
   1b47e:	bf00      	nop
   1b480:	4000f000 	.word	0x4000f000
   1b484:	20008b24 	.word	0x20008b24
   1b488:	01010000 	.word	0x01010000
   1b48c:	20008a14 	.word	0x20008a14

0001b490 <radio_ccm_is_done>:
    return ((uint32_t)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_ccm_int_enable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1b490:	4a0e      	ldr	r2, [pc, #56]	; (1b4cc <radio_ccm_is_done+0x3c>)
   1b492:	2302      	movs	r3, #2
   1b494:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304

uint32_t radio_ccm_is_done(void)
{
	nrf_ccm_int_enable(NRF_CCM, CCM_INTENSET_ENDCRYPT_Msk);
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   1b498:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   1b49c:	b933      	cbnz	r3, 1b4ac <radio_ccm_is_done+0x1c>
		__WFE();
   1b49e:	bf20      	wfe
		__SEV();
   1b4a0:	bf40      	sev
		__WFE();
   1b4a2:	bf20      	wfe
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   1b4a4:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   1b4a8:	2b00      	cmp	r3, #0
   1b4aa:	d0f8      	beq.n	1b49e <radio_ccm_is_done+0xe>
}

NRF_STATIC_INLINE void nrf_ccm_int_disable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   1b4ac:	4b07      	ldr	r3, [pc, #28]	; (1b4cc <radio_ccm_is_done+0x3c>)
   1b4ae:	4a08      	ldr	r2, [pc, #32]	; (1b4d0 <radio_ccm_is_done+0x40>)
   1b4b0:	2002      	movs	r0, #2
   1b4b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1b4b6:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   1b4ba:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
	}
	nrf_ccm_int_disable(NRF_CCM, CCM_INTENCLR_ENDCRYPT_Msk);
	NVIC_ClearPendingIRQ(nrfx_get_irq_number(NRF_CCM));

	return (NRF_CCM->EVENTS_ERROR == 0);
   1b4be:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
   1b4c2:	fab0 f080 	clz	r0, r0
   1b4c6:	0940      	lsrs	r0, r0, #5
   1b4c8:	4770      	bx	lr
   1b4ca:	bf00      	nop
   1b4cc:	4000f000 	.word	0x4000f000
   1b4d0:	e000e100 	.word	0xe000e100

0001b4d4 <radio_ccm_mic_is_valid>:

uint32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
   1b4d4:	4b03      	ldr	r3, [pc, #12]	; (1b4e4 <radio_ccm_mic_is_valid+0x10>)
   1b4d6:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1b4da:	3800      	subs	r0, #0
   1b4dc:	bf18      	it	ne
   1b4de:	2001      	movne	r0, #1
   1b4e0:	4770      	bx	lr
   1b4e2:	bf00      	nop
   1b4e4:	4000f000 	.word	0x4000f000

0001b4e8 <radio_ar_configure>:

static uint8_t MALIGN(4) _aar_scratch[3];

void radio_ar_configure(uint32_t nirk, void *irk)
{
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   1b4e8:	4b15      	ldr	r3, [pc, #84]	; (1b540 <radio_ar_configure+0x58>)
			  AAR_ENABLE_ENABLE_Msk;
	NRF_AAR->NIRK = nirk;
	NRF_AAR->IRKPTR = (uint32_t)irk;
	NRF_AAR->ADDRPTR = (uint32_t)NRF_RADIO->PACKETPTR - 1;
   1b4ea:	4a16      	ldr	r2, [pc, #88]	; (1b544 <radio_ar_configure+0x5c>)
{
   1b4ec:	b430      	push	{r4, r5}
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   1b4ee:	2403      	movs	r4, #3
   1b4f0:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	NRF_AAR->NIRK = nirk;
   1b4f4:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
	NRF_AAR->IRKPTR = (uint32_t)irk;
   1b4f8:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
	NRF_AAR->ADDRPTR = (uint32_t)NRF_RADIO->PACKETPTR - 1;
   1b4fc:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	NRF_AAR->SCRATCHPTR = (uint32_t)&_aar_scratch[0];
   1b500:	4d11      	ldr	r5, [pc, #68]	; (1b548 <radio_ar_configure+0x60>)
   1b502:	4c12      	ldr	r4, [pc, #72]	; (1b54c <radio_ar_configure+0x64>)
	NRF_AAR->ADDRPTR = (uint32_t)NRF_RADIO->PACKETPTR - 1;
   1b504:	3801      	subs	r0, #1
   1b506:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510

	NRF_AAR->EVENTS_END = 0;
   1b50a:	2100      	movs	r1, #0
    p_reg->BCC = radio_bcc;
   1b50c:	2040      	movs	r0, #64	; 0x40
	NRF_AAR->SCRATCHPTR = (uint32_t)&_aar_scratch[0];
   1b50e:	f8c3 5514 	str.w	r5, [r3, #1300]	; 0x514
	NRF_AAR->EVENTS_END = 0;
   1b512:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
	NRF_AAR->EVENTS_RESOLVED = 0;
   1b516:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	NRF_AAR->EVENTS_NOTRESOLVED = 0;
   1b51a:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
   1b51e:	f8c2 0560 	str.w	r0, [r2, #1376]	; 0x560
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
   1b522:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   1b526:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   1b52a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1b52e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	NRF_RADIO->EVENTS_BCMATCH = 0;
   1b532:	f8c2 1128 	str.w	r1, [r2, #296]	; 0x128
   1b536:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
	radio_bc_configure(64);
	radio_bc_status_reset();

	hal_trigger_aar_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_AAR_PPI));
}
   1b53a:	bc30      	pop	{r4, r5}
   1b53c:	4770      	bx	lr
   1b53e:	bf00      	nop
   1b540:	4000f000 	.word	0x4000f000
   1b544:	40001000 	.word	0x40001000
   1b548:	20008a10 	.word	0x20008a10
   1b54c:	4001f000 	.word	0x4001f000

0001b550 <radio_ar_match_get>:

uint32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
   1b550:	4b01      	ldr	r3, [pc, #4]	; (1b558 <radio_ar_match_get+0x8>)
   1b552:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1b556:	4770      	bx	lr
   1b558:	4000f000 	.word	0x4000f000

0001b55c <radio_ar_status_reset>:
	NRF_RADIO->EVENTS_BCMATCH = 0;
   1b55c:	4903      	ldr	r1, [pc, #12]	; (1b56c <radio_ar_status_reset+0x10>)

void radio_ar_status_reset(void)
{
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   1b55e:	4a04      	ldr	r2, [pc, #16]	; (1b570 <radio_ar_status_reset+0x14>)
	NRF_RADIO->EVENTS_BCMATCH = 0;
   1b560:	2300      	movs	r3, #0
   1b562:	f8c1 3128 	str.w	r3, [r1, #296]	; 0x128
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   1b566:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
			  AAR_ENABLE_ENABLE_Msk;
}
   1b56a:	4770      	bx	lr
   1b56c:	40001000 	.word	0x40001000
   1b570:	4000f000 	.word	0x4000f000

0001b574 <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
   1b574:	4b08      	ldr	r3, [pc, #32]	; (1b598 <radio_ar_has_match+0x24>)
   1b576:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

uint32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
   1b57a:	b160      	cbz	r0, 1b596 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
   1b57c:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   1b580:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
   1b584:	b138      	cbz	r0, 1b596 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
   1b586:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
   1b58a:	b120      	cbz	r0, 1b596 <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
   1b58c:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
   1b590:	fab0 f080 	clz	r0, r0
   1b594:	0940      	lsrs	r0, r0, #5
}
   1b596:	4770      	bx	lr
   1b598:	40001000 	.word	0x40001000

0001b59c <mayfly_enable_cb>:

void mayfly_enable_cb(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   1b59c:	2902      	cmp	r1, #2
{
   1b59e:	b510      	push	{r4, lr}
   1b5a0:	4614      	mov	r4, r2
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   1b5a2:	d00b      	beq.n	1b5bc <mayfly_enable_cb+0x20>
   1b5a4:	4a0a      	ldr	r2, [pc, #40]	; (1b5d0 <mayfly_enable_cb+0x34>)
   1b5a6:	490b      	ldr	r1, [pc, #44]	; (1b5d4 <mayfly_enable_cb+0x38>)
   1b5a8:	480b      	ldr	r0, [pc, #44]	; (1b5d8 <mayfly_enable_cb+0x3c>)
   1b5aa:	2322      	movs	r3, #34	; 0x22
   1b5ac:	f002 fcd1 	bl	1df52 <printk>
   1b5b0:	4040      	eors	r0, r0
   1b5b2:	f380 8811 	msr	BASEPRI, r0
   1b5b6:	f04f 0003 	mov.w	r0, #3
   1b5ba:	df02      	svc	2

	if (enable) {
		irq_enable(HAL_SWI_JOB_IRQ);
   1b5bc:	200b      	movs	r0, #11
	if (enable) {
   1b5be:	b11c      	cbz	r4, 1b5c8 <mayfly_enable_cb+0x2c>
	} else {
		irq_disable(HAL_SWI_JOB_IRQ);
	}
}
   1b5c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_enable(HAL_SWI_JOB_IRQ);
   1b5c4:	f7eb bf6c 	b.w	74a0 <arch_irq_enable>
}
   1b5c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_disable(HAL_SWI_JOB_IRQ);
   1b5cc:	f7eb bf78 	b.w	74c0 <arch_irq_disable>
   1b5d0:	00024c1c 	.word	0x00024c1c
   1b5d4:	00024c6c 	.word	0x00024c6c
   1b5d8:	00023ff4 	.word	0x00023ff4

0001b5dc <mayfly_is_enabled>:

uint32_t mayfly_is_enabled(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   1b5dc:	b129      	cbz	r1, 1b5ea <mayfly_is_enabled+0xe>
   1b5de:	3901      	subs	r1, #1
   1b5e0:	2901      	cmp	r1, #1
   1b5e2:	d805      	bhi.n	1b5f0 <mayfly_is_enabled+0x14>
	case MAYFLY_CALL_ID_LLL:
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);
#endif /* CONFIG_BT_LL_SW_SPLIT */

	case MAYFLY_CALL_ID_WORKER:
		return irq_is_enabled(HAL_SWI_WORKER_IRQ);
   1b5e4:	200b      	movs	r0, #11
   1b5e6:	f7eb bf7f 	b.w	74e8 <arch_irq_is_enabled>
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);
   1b5ea:	2018      	movs	r0, #24
   1b5ec:	f7eb bf7c 	b.w	74e8 <arch_irq_is_enabled>
{
   1b5f0:	b508      	push	{r3, lr}

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(HAL_SWI_JOB_IRQ);

	default:
		LL_ASSERT(0);
   1b5f2:	4a07      	ldr	r2, [pc, #28]	; (1b610 <mayfly_is_enabled+0x34>)
   1b5f4:	4907      	ldr	r1, [pc, #28]	; (1b614 <mayfly_is_enabled+0x38>)
   1b5f6:	4808      	ldr	r0, [pc, #32]	; (1b618 <mayfly_is_enabled+0x3c>)
   1b5f8:	233c      	movs	r3, #60	; 0x3c
   1b5fa:	f002 fcaa 	bl	1df52 <printk>
   1b5fe:	4040      	eors	r0, r0
   1b600:	f380 8811 	msr	BASEPRI, r0
   1b604:	f04f 0003 	mov.w	r0, #3
   1b608:	df02      	svc	2
		break;
	}

	return 0;
}
   1b60a:	2000      	movs	r0, #0
   1b60c:	bd08      	pop	{r3, pc}
   1b60e:	bf00      	nop
   1b610:	00024c1c 	.word	0x00024c1c
   1b614:	00024064 	.word	0x00024064
   1b618:	00023ff4 	.word	0x00023ff4

0001b61c <mayfly_prio_is_equal>:
#endif
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   1b61c:	4288      	cmp	r0, r1
   1b61e:	d013      	beq.n	1b648 <mayfly_prio_is_equal+0x2c>
	return (caller_id == callee_id) ||
   1b620:	b928      	cbnz	r0, 1b62e <mayfly_prio_is_equal+0x12>
	       ((caller_id == MAYFLY_CALL_ID_LLL) &&
   1b622:	1e48      	subs	r0, r1, #1
   1b624:	2801      	cmp	r0, #1
   1b626:	bf8c      	ite	hi
   1b628:	2000      	movhi	r0, #0
   1b62a:	2001      	movls	r0, #1
   1b62c:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   1b62e:	2801      	cmp	r0, #1
   1b630:	d106      	bne.n	1b640 <mayfly_prio_is_equal+0x24>
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   1b632:	b159      	cbz	r1, 1b64c <mayfly_prio_is_equal+0x30>
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   1b634:	f1a1 0002 	sub.w	r0, r1, #2
   1b638:	fab0 f080 	clz	r0, r0
   1b63c:	0940      	lsrs	r0, r0, #5
   1b63e:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   1b640:	2802      	cmp	r0, #2
   1b642:	d004      	beq.n	1b64e <mayfly_prio_is_equal+0x32>
   1b644:	2000      	movs	r0, #0
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   1b646:	4770      	bx	lr
   1b648:	2001      	movs	r0, #1
   1b64a:	4770      	bx	lr
#endif
#endif
	       0;
}
   1b64c:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   1b64e:	2901      	cmp	r1, #1
   1b650:	bf8c      	ite	hi
   1b652:	2000      	movhi	r0, #0
   1b654:	2001      	movls	r0, #1
   1b656:	4770      	bx	lr

0001b658 <mayfly_pend>:

void mayfly_pend(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   1b658:	2901      	cmp	r1, #1
{
   1b65a:	b508      	push	{r3, lr}
	switch (callee_id) {
   1b65c:	d00f      	beq.n	1b67e <mayfly_pend+0x26>
   1b65e:	2902      	cmp	r1, #2
   1b660:	d00d      	beq.n	1b67e <mayfly_pend+0x26>
   1b662:	b191      	cbz	r1, 1b68a <mayfly_pend+0x32>
	case MAYFLY_CALL_ID_JOB:
		hal_swi_job_pend();
		break;

	default:
		LL_ASSERT(0);
   1b664:	4a0c      	ldr	r2, [pc, #48]	; (1b698 <mayfly_pend+0x40>)
   1b666:	490d      	ldr	r1, [pc, #52]	; (1b69c <mayfly_pend+0x44>)
   1b668:	480d      	ldr	r0, [pc, #52]	; (1b6a0 <mayfly_pend+0x48>)
   1b66a:	2371      	movs	r3, #113	; 0x71
   1b66c:	f002 fc71 	bl	1df52 <printk>
   1b670:	4040      	eors	r0, r0
   1b672:	f380 8811 	msr	BASEPRI, r0
   1b676:	f04f 0003 	mov.w	r0, #3
   1b67a:	df02      	svc	2
		break;
	}
}
   1b67c:	bd08      	pop	{r3, pc}
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1b67e:	4b09      	ldr	r3, [pc, #36]	; (1b6a4 <mayfly_pend+0x4c>)
   1b680:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1b684:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1b688:	bd08      	pop	{r3, pc}
   1b68a:	4b06      	ldr	r3, [pc, #24]	; (1b6a4 <mayfly_pend+0x4c>)
   1b68c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   1b690:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1b694:	bd08      	pop	{r3, pc}
   1b696:	bf00      	nop
   1b698:	00024c1c 	.word	0x00024c1c
   1b69c:	00024064 	.word	0x00024064
   1b6a0:	00023ff4 	.word	0x00023ff4
   1b6a4:	e000e100 	.word	0xe000e100

0001b6a8 <hal_ticker_instance0_caller_id_get>:

uint8_t hal_ticker_instance0_caller_id_get(uint8_t user_id)
{
	uint8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   1b6a8:	2803      	cmp	r0, #3
{
   1b6aa:	b510      	push	{r4, lr}
   1b6ac:	4604      	mov	r4, r0
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   1b6ae:	d804      	bhi.n	1b6ba <hal_ticker_instance0_caller_id_get+0x12>

	caller_id = caller_id_lut[user_id];
   1b6b0:	4b11      	ldr	r3, [pc, #68]	; (1b6f8 <hal_ticker_instance0_caller_id_get+0x50>)
   1b6b2:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   1b6b4:	b18c      	cbz	r4, 1b6da <hal_ticker_instance0_caller_id_get+0x32>

	return caller_id;
}
   1b6b6:	4620      	mov	r0, r4
   1b6b8:	bd10      	pop	{r4, pc}
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   1b6ba:	4a10      	ldr	r2, [pc, #64]	; (1b6fc <hal_ticker_instance0_caller_id_get+0x54>)
   1b6bc:	4910      	ldr	r1, [pc, #64]	; (1b700 <hal_ticker_instance0_caller_id_get+0x58>)
   1b6be:	4811      	ldr	r0, [pc, #68]	; (1b704 <hal_ticker_instance0_caller_id_get+0x5c>)
   1b6c0:	232d      	movs	r3, #45	; 0x2d
   1b6c2:	f002 fc46 	bl	1df52 <printk>
   1b6c6:	4040      	eors	r0, r0
   1b6c8:	f380 8811 	msr	BASEPRI, r0
   1b6cc:	f04f 0003 	mov.w	r0, #3
   1b6d0:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
   1b6d2:	4b09      	ldr	r3, [pc, #36]	; (1b6f8 <hal_ticker_instance0_caller_id_get+0x50>)
   1b6d4:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   1b6d6:	2c00      	cmp	r4, #0
   1b6d8:	d1ed      	bne.n	1b6b6 <hal_ticker_instance0_caller_id_get+0xe>
   1b6da:	4a08      	ldr	r2, [pc, #32]	; (1b6fc <hal_ticker_instance0_caller_id_get+0x54>)
   1b6dc:	490a      	ldr	r1, [pc, #40]	; (1b708 <hal_ticker_instance0_caller_id_get+0x60>)
   1b6de:	4809      	ldr	r0, [pc, #36]	; (1b704 <hal_ticker_instance0_caller_id_get+0x5c>)
   1b6e0:	2330      	movs	r3, #48	; 0x30
   1b6e2:	f002 fc36 	bl	1df52 <printk>
   1b6e6:	4040      	eors	r0, r0
   1b6e8:	f380 8811 	msr	BASEPRI, r0
   1b6ec:	f04f 0003 	mov.w	r0, #3
   1b6f0:	df02      	svc	2
}
   1b6f2:	4620      	mov	r0, r4
   1b6f4:	bd10      	pop	{r4, pc}
   1b6f6:	bf00      	nop
   1b6f8:	00024d24 	.word	0x00024d24
   1b6fc:	00024c90 	.word	0x00024c90
   1b700:	00024ce0 	.word	0x00024ce0
   1b704:	00023ff4 	.word	0x00023ff4
   1b708:	00024d00 	.word	0x00024d00

0001b70c <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   1b70c:	3801      	subs	r0, #1
{
   1b70e:	b510      	push	{r4, lr}
   1b710:	461c      	mov	r4, r3
   1b712:	2804      	cmp	r0, #4
   1b714:	d855      	bhi.n	1b7c2 <hal_ticker_instance0_sched+0xb6>
   1b716:	e8df f000 	tbb	[pc, r0]
   1b71a:	1a12      	.short	0x1a12
   1b71c:	1e16      	.short	0x1e16
   1b71e:	03          	.byte	0x03
   1b71f:	00          	.byte	0x00
			break;
		}
		break;

	case TICKER_CALL_ID_PROGRAM:
		switch (callee_id) {
   1b720:	2904      	cmp	r1, #4
   1b722:	d01e      	beq.n	1b762 <hal_ticker_instance0_sched+0x56>
				       &m);
		}
		break;

		default:
			LL_ASSERT(0);
   1b724:	23be      	movs	r3, #190	; 0xbe
			break;
		}
		break;

	default:
		LL_ASSERT(0);
   1b726:	4a28      	ldr	r2, [pc, #160]	; (1b7c8 <hal_ticker_instance0_sched+0xbc>)
   1b728:	4928      	ldr	r1, [pc, #160]	; (1b7cc <hal_ticker_instance0_sched+0xc0>)
   1b72a:	4829      	ldr	r0, [pc, #164]	; (1b7d0 <hal_ticker_instance0_sched+0xc4>)
   1b72c:	f002 fc11 	bl	1df52 <printk>
   1b730:	4040      	eors	r0, r0
   1b732:	f380 8811 	msr	BASEPRI, r0
   1b736:	f04f 0003 	mov.w	r0, #3
   1b73a:	df02      	svc	2
		break;
	}
}
   1b73c:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   1b73e:	2904      	cmp	r1, #4
   1b740:	d01f      	beq.n	1b782 <hal_ticker_instance0_sched+0x76>
			LL_ASSERT(0);
   1b742:	2351      	movs	r3, #81	; 0x51
   1b744:	e7ef      	b.n	1b726 <hal_ticker_instance0_sched+0x1a>
		switch (callee_id) {
   1b746:	2904      	cmp	r1, #4
   1b748:	d013      	beq.n	1b772 <hal_ticker_instance0_sched+0x66>
			LL_ASSERT(0);
   1b74a:	2380      	movs	r3, #128	; 0x80
   1b74c:	e7eb      	b.n	1b726 <hal_ticker_instance0_sched+0x1a>
		switch (callee_id) {
   1b74e:	2903      	cmp	r1, #3
   1b750:	d01f      	beq.n	1b792 <hal_ticker_instance0_sched+0x86>
			LL_ASSERT(0);
   1b752:	2369      	movs	r3, #105	; 0x69
   1b754:	e7e7      	b.n	1b726 <hal_ticker_instance0_sched+0x1a>
		switch (callee_id) {
   1b756:	2903      	cmp	r1, #3
   1b758:	d02b      	beq.n	1b7b2 <hal_ticker_instance0_sched+0xa6>
   1b75a:	2904      	cmp	r1, #4
   1b75c:	d021      	beq.n	1b7a2 <hal_ticker_instance0_sched+0x96>
			LL_ASSERT(0);
   1b75e:	23a6      	movs	r3, #166	; 0xa6
   1b760:	e7e1      	b.n	1b726 <hal_ticker_instance0_sched+0x1a>
			m.param = instance;
   1b762:	4b1c      	ldr	r3, [pc, #112]	; (1b7d4 <hal_ticker_instance0_sched+0xc8>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1b764:	2102      	movs	r1, #2
			m.param = instance;
   1b766:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1b768:	2003      	movs	r0, #3
}
   1b76a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1b76e:	f7f4 bd2d 	b.w	101cc <mayfly_enqueue>
			m.param = instance;
   1b772:	4b19      	ldr	r3, [pc, #100]	; (1b7d8 <hal_ticker_instance0_sched+0xcc>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   1b774:	2102      	movs	r1, #2
			m.param = instance;
   1b776:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   1b778:	2001      	movs	r0, #1
}
   1b77a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   1b77e:	f7f4 bd25 	b.w	101cc <mayfly_enqueue>
			m.param = instance;
   1b782:	4b16      	ldr	r3, [pc, #88]	; (1b7dc <hal_ticker_instance0_sched+0xd0>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   1b784:	2102      	movs	r1, #2
			m.param = instance;
   1b786:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   1b788:	2000      	movs	r0, #0
}
   1b78a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   1b78e:	f7f4 bd1d 	b.w	101cc <mayfly_enqueue>
			m.param = instance;
   1b792:	4b13      	ldr	r3, [pc, #76]	; (1b7e0 <hal_ticker_instance0_sched+0xd4>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   1b794:	2101      	movs	r1, #1
			m.param = instance;
   1b796:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   1b798:	4608      	mov	r0, r1
}
   1b79a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   1b79e:	f7f4 bd15 	b.w	101cc <mayfly_enqueue>
			m.param = instance;
   1b7a2:	4b10      	ldr	r3, [pc, #64]	; (1b7e4 <hal_ticker_instance0_sched+0xd8>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1b7a4:	2102      	movs	r1, #2
			m.param = instance;
   1b7a6:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1b7a8:	4608      	mov	r0, r1
}
   1b7aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1b7ae:	f7f4 bd0d 	b.w	101cc <mayfly_enqueue>
			m.param = instance;
   1b7b2:	4b0d      	ldr	r3, [pc, #52]	; (1b7e8 <hal_ticker_instance0_sched+0xdc>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1b7b4:	2101      	movs	r1, #1
			m.param = instance;
   1b7b6:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1b7b8:	2002      	movs	r0, #2
}
   1b7ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1b7be:	f7f4 bd05 	b.w	101cc <mayfly_enqueue>
		LL_ASSERT(0);
   1b7c2:	23c4      	movs	r3, #196	; 0xc4
   1b7c4:	e7af      	b.n	1b726 <hal_ticker_instance0_sched+0x1a>
   1b7c6:	bf00      	nop
   1b7c8:	00024c90 	.word	0x00024c90
   1b7cc:	00024064 	.word	0x00024064
   1b7d0:	00023ff4 	.word	0x00023ff4
   1b7d4:	20000668 	.word	0x20000668
   1b7d8:	20000638 	.word	0x20000638
   1b7dc:	20000618 	.word	0x20000618
   1b7e0:	20000628 	.word	0x20000628
   1b7e4:	20000658 	.word	0x20000658
   1b7e8:	20000648 	.word	0x20000648

0001b7ec <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(uint32_t value)
{
   1b7ec:	4601      	mov	r1, r0
	cntr_cmp_set(0, value);
   1b7ee:	2000      	movs	r0, #0
   1b7f0:	f7ff b93c 	b.w	1aa6c <cntr_cmp_set>

0001b7f4 <hci_vendor_read_static_addr>:
				 uint8_t size)
{
	/* only one supported */
	ARG_UNUSED(size);

	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   1b7f4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1b7f8:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
   1b7fc:	3201      	adds	r2, #1
   1b7fe:	d008      	beq.n	1b812 <hci_vendor_read_static_addr+0x1e>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
	     (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
   1b800:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1b804:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   1b808:	f013 0301 	ands.w	r3, r3, #1
   1b80c:	d10f      	bne.n	1b82e <hci_vendor_read_static_addr+0x3a>
		}

		return 1;
	}

	return 0;
   1b80e:	2000      	movs	r0, #0
   1b810:	4770      	bx	lr
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   1b812:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   1b816:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1b81a:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   1b81c:	4293      	cmp	r3, r2
   1b81e:	d0f6      	beq.n	1b80e <hci_vendor_read_static_addr+0x1a>
	     (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
   1b820:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1b824:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   1b828:	f013 0301 	ands.w	r3, r3, #1
   1b82c:	d0ef      	beq.n	1b80e <hci_vendor_read_static_addr+0x1a>
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addrs[0].bdaddr.val[0]);
   1b82e:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
	sys_put_le16(val >> 16, &dst[2]);
   1b832:	0c19      	lsrs	r1, r3, #16
{
   1b834:	b510      	push	{r4, lr}
	dst[0] = val;
   1b836:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   1b838:	0a0c      	lsrs	r4, r1, #8
   1b83a:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1b83e:	7081      	strb	r1, [r0, #2]
	dst[1] = val >> 8;
   1b840:	70c4      	strb	r4, [r0, #3]
   1b842:	7043      	strb	r3, [r0, #1]
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addrs[0].bdaddr.val[4]);
   1b844:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
	dst[0] = val;
   1b848:	7103      	strb	r3, [r0, #4]
	dst[1] = val >> 8;
   1b84a:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addrs[0].bdaddr);
   1b84e:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1b852:	7143      	strb	r3, [r0, #5]
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   1b854:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   1b858:	3301      	adds	r3, #1
   1b85a:	d035      	beq.n	1b8c8 <hci_vendor_read_static_addr+0xd4>
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   1b85c:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   1b860:	3301      	adds	r3, #1
   1b862:	d031      	beq.n	1b8c8 <hci_vendor_read_static_addr+0xd4>
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   1b864:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   1b868:	3301      	adds	r3, #1
   1b86a:	d02d      	beq.n	1b8c8 <hci_vendor_read_static_addr+0xd4>
		    (NRF_FICR->IR[3] != UINT32_MAX)) {
   1b86c:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   1b870:	3301      	adds	r3, #1
   1b872:	d029      	beq.n	1b8c8 <hci_vendor_read_static_addr+0xd4>
			sys_put_le32(NRF_FICR->IR[0], &addrs[0].ir[0]);
   1b874:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
	dst[0] = val;
   1b878:	7183      	strb	r3, [r0, #6]
	sys_put_le16(val >> 16, &dst[2]);
   1b87a:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   1b87c:	0a0c      	lsrs	r4, r1, #8
   1b87e:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1b882:	7201      	strb	r1, [r0, #8]
	dst[1] = val >> 8;
   1b884:	7244      	strb	r4, [r0, #9]
   1b886:	71c3      	strb	r3, [r0, #7]
			sys_put_le32(NRF_FICR->IR[1], &addrs[0].ir[4]);
   1b888:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
	dst[0] = val;
   1b88c:	7283      	strb	r3, [r0, #10]
	sys_put_le16(val >> 16, &dst[2]);
   1b88e:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   1b890:	0a0c      	lsrs	r4, r1, #8
   1b892:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1b896:	7301      	strb	r1, [r0, #12]
	dst[1] = val >> 8;
   1b898:	7344      	strb	r4, [r0, #13]
   1b89a:	72c3      	strb	r3, [r0, #11]
			sys_put_le32(NRF_FICR->IR[2], &addrs[0].ir[8]);
   1b89c:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
	dst[0] = val;
   1b8a0:	7383      	strb	r3, [r0, #14]
	sys_put_le16(val >> 16, &dst[2]);
   1b8a2:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   1b8a4:	0a0c      	lsrs	r4, r1, #8
   1b8a6:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1b8aa:	7401      	strb	r1, [r0, #16]
	dst[1] = val >> 8;
   1b8ac:	7444      	strb	r4, [r0, #17]
   1b8ae:	73c3      	strb	r3, [r0, #15]
			sys_put_le32(NRF_FICR->IR[3], &addrs[0].ir[12]);
   1b8b0:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
	dst[0] = val;
   1b8b4:	7483      	strb	r3, [r0, #18]
	sys_put_le16(val >> 16, &dst[2]);
   1b8b6:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val >> 8;
   1b8b8:	0a11      	lsrs	r1, r2, #8
   1b8ba:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1b8be:	7502      	strb	r2, [r0, #20]
	dst[1] = val >> 8;
   1b8c0:	7541      	strb	r1, [r0, #21]
   1b8c2:	74c3      	strb	r3, [r0, #19]
		return 1;
   1b8c4:	2001      	movs	r0, #1
}
   1b8c6:	bd10      	pop	{r4, pc}
			(void)memset(addrs[0].ir, 0x00, sizeof(addrs[0].ir));
   1b8c8:	2210      	movs	r2, #16
   1b8ca:	2100      	movs	r1, #0
   1b8cc:	3006      	adds	r0, #6
   1b8ce:	f004 fafd 	bl	1fecc <memset>
		return 1;
   1b8d2:	2001      	movs	r0, #1
}
   1b8d4:	bd10      	pop	{r4, pc}
   1b8d6:	bf00      	nop

0001b8d8 <hci_vendor_read_key_hierarchy_roots>:

void hci_vendor_read_key_hierarchy_roots(uint8_t ir[16], uint8_t er[16])
{
   1b8d8:	b510      	push	{r4, lr}
	/* Mark IR as invalid.
	 * No public address is available, and static address IR should be read
	 * using Read Static Addresses command.
	 */
	(void)memset(ir, 0x00, 16);
   1b8da:	2210      	movs	r2, #16
{
   1b8dc:	460c      	mov	r4, r1
	(void)memset(ir, 0x00, 16);
   1b8de:	2100      	movs	r1, #0
   1b8e0:	f004 faf4 	bl	1fecc <memset>

	/* Fill in ER if present */
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   1b8e4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1b8e8:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
   1b8ec:	3201      	adds	r2, #1
   1b8ee:	d034      	beq.n	1b95a <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   1b8f0:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   1b8f4:	3201      	adds	r2, #1
   1b8f6:	d030      	beq.n	1b95a <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   1b8f8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   1b8fc:	3201      	adds	r2, #1
   1b8fe:	d02c      	beq.n	1b95a <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
   1b900:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   1b904:	3201      	adds	r2, #1
   1b906:	d028      	beq.n	1b95a <hci_vendor_read_key_hierarchy_roots+0x82>
		sys_put_le32(NRF_FICR->ER[0], &er[0]);
   1b908:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
	dst[0] = val;
   1b90c:	7022      	strb	r2, [r4, #0]
	sys_put_le16(val >> 16, &dst[2]);
   1b90e:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   1b910:	0a08      	lsrs	r0, r1, #8
   1b912:	f3c2 2207 	ubfx	r2, r2, #8, #8
	dst[0] = val;
   1b916:	70a1      	strb	r1, [r4, #2]
	dst[1] = val >> 8;
   1b918:	70e0      	strb	r0, [r4, #3]
   1b91a:	7062      	strb	r2, [r4, #1]
		sys_put_le32(NRF_FICR->ER[1], &er[4]);
   1b91c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
	dst[0] = val;
   1b920:	7122      	strb	r2, [r4, #4]
	sys_put_le16(val >> 16, &dst[2]);
   1b922:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   1b924:	0a08      	lsrs	r0, r1, #8
   1b926:	f3c2 2207 	ubfx	r2, r2, #8, #8
	dst[0] = val;
   1b92a:	71a1      	strb	r1, [r4, #6]
	dst[1] = val >> 8;
   1b92c:	71e0      	strb	r0, [r4, #7]
   1b92e:	7162      	strb	r2, [r4, #5]
		sys_put_le32(NRF_FICR->ER[2], &er[8]);
   1b930:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	dst[0] = val;
   1b934:	7222      	strb	r2, [r4, #8]
	sys_put_le16(val >> 16, &dst[2]);
   1b936:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   1b938:	0a08      	lsrs	r0, r1, #8
   1b93a:	f3c2 2207 	ubfx	r2, r2, #8, #8
	dst[0] = val;
   1b93e:	72a1      	strb	r1, [r4, #10]
	dst[1] = val >> 8;
   1b940:	7262      	strb	r2, [r4, #9]
   1b942:	72e0      	strb	r0, [r4, #11]
		sys_put_le32(NRF_FICR->ER[3], &er[12]);
   1b944:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
	dst[0] = val;
   1b948:	7323      	strb	r3, [r4, #12]
	sys_put_le16(val >> 16, &dst[2]);
   1b94a:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val >> 8;
   1b94c:	0a11      	lsrs	r1, r2, #8
   1b94e:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1b952:	73a2      	strb	r2, [r4, #14]
	dst[1] = val >> 8;
   1b954:	73e1      	strb	r1, [r4, #15]
   1b956:	7363      	strb	r3, [r4, #13]
	} else {
		/* Mark ER as invalid */
		(void)memset(er, 0x00, 16);
	}
}
   1b958:	bd10      	pop	{r4, pc}
		(void)memset(er, 0x00, 16);
   1b95a:	4620      	mov	r0, r4
   1b95c:	2210      	movs	r2, #16
}
   1b95e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		(void)memset(er, 0x00, 16);
   1b962:	2100      	movs	r1, #0
   1b964:	f004 bab2 	b.w	1fecc <memset>

0001b968 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   1b968:	4b02      	ldr	r3, [pc, #8]	; (1b974 <net_buf_pool_get+0xc>)
   1b96a:	2228      	movs	r2, #40	; 0x28
   1b96c:	fb02 3000 	mla	r0, r2, r0, r3
   1b970:	4770      	bx	lr
   1b972:	bf00      	nop
   1b974:	200008b8 	.word	0x200008b8

0001b978 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1b978:	7983      	ldrb	r3, [r0, #6]

	return buf - pool->__bufs;
   1b97a:	4a05      	ldr	r2, [pc, #20]	; (1b990 <net_buf_id+0x18>)
   1b97c:	2128      	movs	r1, #40	; 0x28
   1b97e:	fb01 2303 	mla	r3, r1, r3, r2
   1b982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1b984:	1ac0      	subs	r0, r0, r3
}
   1b986:	4b03      	ldr	r3, [pc, #12]	; (1b994 <net_buf_id+0x1c>)
	return buf - pool->__bufs;
   1b988:	10c0      	asrs	r0, r0, #3
}
   1b98a:	4358      	muls	r0, r3
   1b98c:	4770      	bx	lr
   1b98e:	bf00      	nop
   1b990:	200008b8 	.word	0x200008b8
   1b994:	aaaaaaab 	.word	0xaaaaaaab

0001b998 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   1b998:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1b99a:	4a0a      	ldr	r2, [pc, #40]	; (1b9c4 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1b99c:	7983      	ldrb	r3, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1b99e:	2428      	movs	r4, #40	; 0x28
   1b9a0:	fb04 2303 	mla	r3, r4, r3, r2

	*size = MIN(fixed->data_size, *size);
   1b9a4:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1b9a6:	6a1b      	ldr	r3, [r3, #32]
   1b9a8:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1b9aa:	6823      	ldr	r3, [r4, #0]
   1b9ac:	429a      	cmp	r2, r3
   1b9ae:	bf94      	ite	ls
   1b9b0:	600a      	strls	r2, [r1, #0]
   1b9b2:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   1b9b4:	f7ff ffe0 	bl	1b978 <net_buf_id>
   1b9b8:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   1b9bc:	fb02 3000 	mla	r0, r2, r0, r3
   1b9c0:	bd10      	pop	{r4, pc}
   1b9c2:	bf00      	nop
   1b9c4:	200008b8 	.word	0x200008b8

0001b9c8 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   1b9c8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1b9cc:	4605      	mov	r5, r0
   1b9ce:	9101      	str	r1, [sp, #4]
	uint64_t end = z_timeout_end_calc(timeout);
   1b9d0:	4610      	mov	r0, r2
   1b9d2:	4619      	mov	r1, r3
{
   1b9d4:	4616      	mov	r6, r2
   1b9d6:	461f      	mov	r7, r3
	uint64_t end = z_timeout_end_calc(timeout);
   1b9d8:	f007 fbf1 	bl	231be <z_timeout_end_calc>
   1b9dc:	4680      	mov	r8, r0
   1b9de:	4689      	mov	r9, r1
	__asm__ volatile(
   1b9e0:	f04f 0320 	mov.w	r3, #32
   1b9e4:	f3ef 8a11 	mrs	sl, BASEPRI
   1b9e8:	f383 8811 	msr	BASEPRI, r3
   1b9ec:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   1b9f0:	8b6b      	ldrh	r3, [r5, #26]
   1b9f2:	2b00      	cmp	r3, #0
   1b9f4:	d054      	beq.n	1baa0 <net_buf_alloc_len+0xd8>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1b9f6:	8b2a      	ldrh	r2, [r5, #24]
   1b9f8:	429a      	cmp	r2, r3
   1b9fa:	d93d      	bls.n	1ba78 <net_buf_alloc_len+0xb0>
	return z_impl_k_queue_get(queue, timeout);
   1b9fc:	2200      	movs	r2, #0
   1b9fe:	2300      	movs	r3, #0
   1ba00:	4628      	mov	r0, r5
   1ba02:	f001 fb35 	bl	1d070 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   1ba06:	4604      	mov	r4, r0
   1ba08:	2800      	cmp	r0, #0
   1ba0a:	d035      	beq.n	1ba78 <net_buf_alloc_len+0xb0>
	__asm__ volatile(
   1ba0c:	f38a 8811 	msr	BASEPRI, sl
   1ba10:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   1ba14:	9b01      	ldr	r3, [sp, #4]
   1ba16:	2b00      	cmp	r3, #0
   1ba18:	d052      	beq.n	1bac0 <net_buf_alloc_len+0xf8>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1ba1a:	ea56 0307 	orrs.w	r3, r6, r7
   1ba1e:	d010      	beq.n	1ba42 <net_buf_alloc_len+0x7a>
   1ba20:	1c7b      	adds	r3, r7, #1
   1ba22:	bf08      	it	eq
   1ba24:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   1ba28:	d00b      	beq.n	1ba42 <net_buf_alloc_len+0x7a>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - z_tick_get();
   1ba2a:	f002 f957 	bl	1dcdc <z_tick_get>
   1ba2e:	ebb8 0600 	subs.w	r6, r8, r0
   1ba32:	eb69 0701 	sbc.w	r7, r9, r1
   1ba36:	2e00      	cmp	r6, #0
   1ba38:	f177 0300 	sbcs.w	r3, r7, #0
   1ba3c:	bfbc      	itt	lt
   1ba3e:	2600      	movlt	r6, #0
   1ba40:	2700      	movlt	r7, #0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1ba42:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   1ba44:	f8df 8090 	ldr.w	r8, [pc, #144]	; 1bad8 <net_buf_alloc_len+0x110>
   1ba48:	2228      	movs	r2, #40	; 0x28
   1ba4a:	fb02 8303 	mla	r3, r2, r3, r8
   1ba4e:	a901      	add	r1, sp, #4
   1ba50:	6a1b      	ldr	r3, [r3, #32]
   1ba52:	681b      	ldr	r3, [r3, #0]
   1ba54:	4632      	mov	r2, r6
   1ba56:	681d      	ldr	r5, [r3, #0]
   1ba58:	4620      	mov	r0, r4
   1ba5a:	463b      	mov	r3, r7
   1ba5c:	47a8      	blx	r5
   1ba5e:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   1ba60:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   1ba62:	bb70      	cbnz	r0, 1bac2 <net_buf_alloc_len+0xfa>
	k_lifo_put(&pool->free, buf);
   1ba64:	79a0      	ldrb	r0, [r4, #6]
   1ba66:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1ba6a:	4621      	mov	r1, r4
   1ba6c:	eb08 00c0 	add.w	r0, r8, r0, lsl #3
   1ba70:	f007 f951 	bl	22d16 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   1ba74:	462c      	mov	r4, r5
}
   1ba76:	e01f      	b.n	1bab8 <net_buf_alloc_len+0xf0>
		uninit_count = pool->uninit_count--;
   1ba78:	8b68      	ldrh	r0, [r5, #26]
   1ba7a:	1e43      	subs	r3, r0, #1
   1ba7c:	836b      	strh	r3, [r5, #26]
   1ba7e:	f38a 8811 	msr	BASEPRI, sl
   1ba82:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   1ba86:	8b2c      	ldrh	r4, [r5, #24]
   1ba88:	1a24      	subs	r4, r4, r0
   1ba8a:	6a68      	ldr	r0, [r5, #36]	; 0x24
   1ba8c:	2318      	movs	r3, #24
   1ba8e:	fb03 0404 	mla	r4, r3, r4, r0
	return pool - _net_buf_pool_list;
   1ba92:	4811      	ldr	r0, [pc, #68]	; (1bad8 <net_buf_alloc_len+0x110>)
   1ba94:	4b11      	ldr	r3, [pc, #68]	; (1badc <net_buf_alloc_len+0x114>)
   1ba96:	1a2d      	subs	r5, r5, r0
   1ba98:	10ed      	asrs	r5, r5, #3
   1ba9a:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   1ba9c:	71a5      	strb	r5, [r4, #6]
		goto success;
   1ba9e:	e7b9      	b.n	1ba14 <net_buf_alloc_len+0x4c>
   1baa0:	f38a 8811 	msr	BASEPRI, sl
   1baa4:	f3bf 8f6f 	isb	sy
   1baa8:	4632      	mov	r2, r6
   1baaa:	463b      	mov	r3, r7
   1baac:	4628      	mov	r0, r5
   1baae:	f001 fadf 	bl	1d070 <z_impl_k_queue_get>
	if (!buf) {
   1bab2:	4604      	mov	r4, r0
   1bab4:	2800      	cmp	r0, #0
   1bab6:	d1ad      	bne.n	1ba14 <net_buf_alloc_len+0x4c>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	pool->avail_count--;
	__ASSERT_NO_MSG(pool->avail_count >= 0);
#endif
	return buf;
}
   1bab8:	4620      	mov	r0, r4
   1baba:	b002      	add	sp, #8
   1babc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		buf->__buf = NULL;
   1bac0:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
   1bac2:	2300      	movs	r3, #0
	buf->ref   = 1U;
   1bac4:	2201      	movs	r2, #1
	buf->frags = NULL;
   1bac6:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   1bac8:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   1baca:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   1bacc:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   1bace:	6923      	ldr	r3, [r4, #16]
   1bad0:	81e2      	strh	r2, [r4, #14]
   1bad2:	60a3      	str	r3, [r4, #8]
	return buf;
   1bad4:	e7f0      	b.n	1bab8 <net_buf_alloc_len+0xf0>
   1bad6:	bf00      	nop
   1bad8:	200008b8 	.word	0x200008b8
   1badc:	cccccccd 	.word	0xcccccccd

0001bae0 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1bae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bae4:	4d17      	ldr	r5, [pc, #92]	; (1bb44 <net_buf_unref+0x64>)
   1bae6:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   1bae8:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   1baea:	2728      	movs	r7, #40	; 0x28
	while (buf) {
   1baec:	b90c      	cbnz	r4, 1baf2 <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1baee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   1baf2:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   1baf4:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   1baf8:	3b01      	subs	r3, #1
   1bafa:	b2db      	uxtb	r3, r3
   1bafc:	7123      	strb	r3, [r4, #4]
   1bafe:	2b00      	cmp	r3, #0
   1bb00:	d1f5      	bne.n	1baee <net_buf_unref+0xe>
		if (buf->__buf) {
   1bb02:	6921      	ldr	r1, [r4, #16]
   1bb04:	b159      	cbz	r1, 1bb1e <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1bb06:	7963      	ldrb	r3, [r4, #5]
   1bb08:	079b      	lsls	r3, r3, #30
   1bb0a:	d407      	bmi.n	1bb1c <net_buf_unref+0x3c>
	pool->alloc->cb->unref(buf, data);
   1bb0c:	79a3      	ldrb	r3, [r4, #6]
   1bb0e:	fb07 5303 	mla	r3, r7, r3, r5
   1bb12:	4620      	mov	r0, r4
   1bb14:	6a1b      	ldr	r3, [r3, #32]
   1bb16:	681b      	ldr	r3, [r3, #0]
   1bb18:	689b      	ldr	r3, [r3, #8]
   1bb1a:	4798      	blx	r3
			buf->__buf = NULL;
   1bb1c:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
   1bb1e:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   1bb20:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
   1bb22:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   1bb26:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   1bb28:	69db      	ldr	r3, [r3, #28]
   1bb2a:	b11b      	cbz	r3, 1bb34 <net_buf_unref+0x54>
			pool->destroy(buf);
   1bb2c:	4620      	mov	r0, r4
   1bb2e:	4798      	blx	r3
{
   1bb30:	4644      	mov	r4, r8
   1bb32:	e7db      	b.n	1baec <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   1bb34:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1bb38:	4621      	mov	r1, r4
   1bb3a:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
   1bb3e:	f007 f8ea 	bl	22d16 <k_queue_prepend>
}
   1bb42:	e7f5      	b.n	1bb30 <net_buf_unref+0x50>
   1bb44:	200008b8 	.word	0x200008b8

0001bb48 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(struct device *port)
{
   1bb48:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   1bb4a:	4b09      	ldr	r3, [pc, #36]	; (1bb70 <gpio_nrfx_init+0x28>)
   1bb4c:	781a      	ldrb	r2, [r3, #0]
   1bb4e:	b96a      	cbnz	r2, 1bb6c <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   1bb50:	2101      	movs	r1, #1
   1bb52:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1bb54:	2006      	movs	r0, #6
   1bb56:	2105      	movs	r1, #5
   1bb58:	f7eb fcd4 	bl	7504 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   1bb5c:	2006      	movs	r0, #6
   1bb5e:	f7eb fc9f 	bl	74a0 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1bb62:	4b04      	ldr	r3, [pc, #16]	; (1bb74 <gpio_nrfx_init+0x2c>)
   1bb64:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1bb68:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   1bb6c:	2000      	movs	r0, #0
   1bb6e:	bd08      	pop	{r3, pc}
   1bb70:	20009c4b 	.word	0x20009c4b
   1bb74:	40006000 	.word	0x40006000

0001bb78 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1bb78:	4b2d      	ldr	r3, [pc, #180]	; (1bc30 <gpio_nrfx_config+0xb8>)
{
   1bb7a:	b5f0      	push	{r4, r5, r6, r7, lr}
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1bb7c:	6846      	ldr	r6, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1bb7e:	482d      	ldr	r0, [pc, #180]	; (1bc34 <gpio_nrfx_config+0xbc>)
   1bb80:	4013      	ands	r3, r2
   1bb82:	4283      	cmp	r3, r0
   1bb84:	d045      	beq.n	1bc12 <gpio_nrfx_config+0x9a>
   1bb86:	d80d      	bhi.n	1bba4 <gpio_nrfx_config+0x2c>
   1bb88:	2b06      	cmp	r3, #6
   1bb8a:	d015      	beq.n	1bbb8 <gpio_nrfx_config+0x40>
   1bb8c:	d805      	bhi.n	1bb9a <gpio_nrfx_config+0x22>
   1bb8e:	b19b      	cbz	r3, 1bbb8 <gpio_nrfx_config+0x40>
   1bb90:	2b02      	cmp	r3, #2
   1bb92:	d040      	beq.n	1bc16 <gpio_nrfx_config+0x9e>
   1bb94:	f06f 0015 	mvn.w	r0, #21
   1bb98:	e03a      	b.n	1bc10 <gpio_nrfx_config+0x98>
   1bb9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1bb9e:	d1f9      	bne.n	1bb94 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
   1bba0:	2301      	movs	r3, #1
   1bba2:	e009      	b.n	1bbb8 <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1bba4:	4824      	ldr	r0, [pc, #144]	; (1bc38 <gpio_nrfx_config+0xc0>)
   1bba6:	4283      	cmp	r3, r0
   1bba8:	d037      	beq.n	1bc1a <gpio_nrfx_config+0xa2>
   1bbaa:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   1bbae:	d036      	beq.n	1bc1e <gpio_nrfx_config+0xa6>
   1bbb0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   1bbb4:	d1ee      	bne.n	1bb94 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
   1bbb6:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
   1bbb8:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_NOPULL;
   1bbba:	bf54      	ite	pl
   1bbbc:	f3c2 1540 	ubfxpl	r5, r2, #5, #1
		pull = NRF_GPIO_PIN_PULLUP;
   1bbc0:	2503      	movmi	r5, #3
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   1bbc2:	f482 7480 	eor.w	r4, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
   1bbc6:	0597      	lsls	r7, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
   1bbc8:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   1bbcc:	f3c4 2400 	ubfx	r4, r4, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   1bbd0:	d507      	bpl.n	1bbe2 <gpio_nrfx_config+0x6a>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   1bbd2:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1bbd6:	6877      	ldr	r7, [r6, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   1bbd8:	d023      	beq.n	1bc22 <gpio_nrfx_config+0xaa>
			nrf_gpio_port_out_set(reg, BIT(pin));
   1bbda:	2201      	movs	r2, #1
   1bbdc:	408a      	lsls	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   1bbde:	f8c7 2508 	str.w	r2, [r7, #1288]	; 0x508
	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
   1bbe2:	7a32      	ldrb	r2, [r6, #8]
   1bbe4:	f001 011f 	and.w	r1, r1, #31
   1bbe8:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
    if (*p_pin < P0_PIN_NUM)
   1bbec:	291f      	cmp	r1, #31
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   1bbee:	ea40 0244 	orr.w	r2, r0, r4, lsl #1
        *p_pin = *p_pin & 0x1F;
   1bbf2:	bfc6      	itte	gt
   1bbf4:	f001 011f 	andgt.w	r1, r1, #31
        return NRF_P1;
   1bbf8:	4e10      	ldrgt	r6, [pc, #64]	; (1bc3c <gpio_nrfx_config+0xc4>)
        return NRF_P0;
   1bbfa:	f04f 46a0 	movle.w	r6, #1342177280	; 0x50000000
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   1bbfe:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1bc02:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   1bc06:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1bc0a:	f846 3021 	str.w	r3, [r6, r1, lsl #2]
	return 0;
   1bc0e:	2000      	movs	r0, #0
}
   1bc10:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
   1bc12:	2307      	movs	r3, #7
   1bc14:	e7d0      	b.n	1bbb8 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
   1bc16:	2304      	movs	r3, #4
   1bc18:	e7ce      	b.n	1bbb8 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
   1bc1a:	2305      	movs	r3, #5
   1bc1c:	e7cc      	b.n	1bbb8 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
   1bc1e:	2303      	movs	r3, #3
   1bc20:	e7ca      	b.n	1bbb8 <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   1bc22:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   1bc24:	bf42      	ittt	mi
   1bc26:	2201      	movmi	r2, #1
   1bc28:	408a      	lslmi	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   1bc2a:	f8c7 250c 	strmi.w	r2, [r7, #1292]	; 0x50c
}
   1bc2e:	e7d8      	b.n	1bbe2 <gpio_nrfx_config+0x6a>
   1bc30:	00f00006 	.word	0x00f00006
   1bc34:	00100006 	.word	0x00100006
   1bc38:	00400002 	.word	0x00400002
   1bc3c:	50000300 	.word	0x50000300

0001bc40 <nrf_gpio_cfg_sense_set>:
    if (*p_pin < P0_PIN_NUM)
   1bc40:	281f      	cmp	r0, #31
        return NRF_P1;
   1bc42:	bf8a      	itet	hi
   1bc44:	4b07      	ldrhi	r3, [pc, #28]	; (1bc64 <nrf_gpio_cfg_sense_set+0x24>)
        return NRF_P0;
   1bc46:	f04f 43a0 	movls.w	r3, #1342177280	; 0x50000000
        *p_pin = *p_pin & 0x1F;
   1bc4a:	f000 001f 	andhi.w	r0, r0, #31
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   1bc4e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   1bc52:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
   1bc56:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   1bc5a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   1bc5e:	f8c0 1700 	str.w	r1, [r0, #1792]	; 0x700
}
   1bc62:	4770      	bx	lr
   1bc64:	50000300 	.word	0x50000300

0001bc68 <gpio_nrfx_pin_interrupt_configure>:
{
   1bc68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1bc6a:	460c      	mov	r4, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1bc6c:	6841      	ldr	r1, [r0, #4]
	struct gpio_nrfx_data *data = get_port_data(port);
   1bc6e:	68c6      	ldr	r6, [r0, #12]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1bc70:	7a08      	ldrb	r0, [r1, #8]
   1bc72:	f004 051f 	and.w	r5, r4, #31
	if ((mode == GPIO_INT_MODE_EDGE) &&
   1bc76:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   1bc7a:	ea45 1540 	orr.w	r5, r5, r0, lsl #5
   1bc7e:	d110      	bne.n	1bca2 <gpio_nrfx_pin_interrupt_configure+0x3a>
    if (*p_pin < P0_PIN_NUM)
   1bc80:	2d1f      	cmp	r5, #31
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1bc82:	4629      	mov	r1, r5
        *p_pin = *p_pin & 0x1F;
   1bc84:	bfc6      	itte	gt
   1bc86:	f005 011f 	andgt.w	r1, r5, #31
        return NRF_P1;
   1bc8a:	486d      	ldrgt	r0, [pc, #436]	; (1be40 <gpio_nrfx_pin_interrupt_configure+0x1d8>)
        return NRF_P0;
   1bc8c:	f04f 40a0 	movle.w	r0, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1bc90:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
   1bc94:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
	if ((mode == GPIO_INT_MODE_EDGE) &&
   1bc98:	07cf      	lsls	r7, r1, #31
   1bc9a:	d507      	bpl.n	1bcac <gpio_nrfx_pin_interrupt_configure+0x44>
		return -ENOTSUP;
   1bc9c:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1bca0:	e0c0      	b.n	1be24 <gpio_nrfx_pin_interrupt_configure+0x1bc>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   1bca2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   1bca6:	68f1      	ldr	r1, [r6, #12]
   1bca8:	f000 80ad 	beq.w	1be06 <gpio_nrfx_pin_interrupt_configure+0x19e>
   1bcac:	68f0      	ldr	r0, [r6, #12]
   1bcae:	2101      	movs	r1, #1
   1bcb0:	40a1      	lsls	r1, r4
   1bcb2:	4301      	orrs	r1, r0
   1bcb4:	6970      	ldr	r0, [r6, #20]
   1bcb6:	60f1      	str	r1, [r6, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   1bcb8:	2101      	movs	r1, #1
   1bcba:	40a1      	lsls	r1, r4
   1bcbc:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   1bcc0:	69b2      	ldr	r2, [r6, #24]
   1bcc2:	bf0c      	ite	eq
   1bcc4:	4308      	orreq	r0, r1
   1bcc6:	4388      	bicne	r0, r1
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   1bcc8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   1bccc:	bf0c      	ite	eq
   1bcce:	430a      	orreq	r2, r1
   1bcd0:	438a      	bicne	r2, r1
   1bcd2:	61b2      	str	r2, [r6, #24]
   1bcd4:	6932      	ldr	r2, [r6, #16]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   1bcd6:	6170      	str	r0, [r6, #20]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   1bcd8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
   1bcdc:	bf0c      	ite	eq
   1bcde:	4311      	orreq	r1, r2
   1bce0:	ea22 0101 	bicne.w	r1, r2, r1
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   1bce4:	4a57      	ldr	r2, [pc, #348]	; (1be44 <gpio_nrfx_pin_interrupt_configure+0x1dc>)
   1bce6:	6131      	str	r1, [r6, #16]
   1bce8:	f8d2 1304 	ldr.w	r1, [r2, #772]	; 0x304
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1bcec:	2300      	movs	r3, #0
   1bcee:	b2c9      	uxtb	r1, r1
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1bcf0:	f503 70a2 	add.w	r0, r3, #324	; 0x144
   1bcf4:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
   1bcf8:	f3c0 2005 	ubfx	r0, r0, #8, #6
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   1bcfc:	4285      	cmp	r5, r0
   1bcfe:	f040 8087 	bne.w	1be10 <gpio_nrfx_pin_interrupt_configure+0x1a8>
		    && (intenset & BIT(i))) {
   1bd02:	fa21 f003 	lsr.w	r0, r1, r3
   1bd06:	07c0      	lsls	r0, r0, #31
   1bd08:	f140 8082 	bpl.w	1be10 <gpio_nrfx_pin_interrupt_configure+0x1a8>
 *
 * @return N/A
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   1bd0c:	2101      	movs	r1, #1
   1bd0e:	4099      	lsls	r1, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1bd10:	484d      	ldr	r0, [pc, #308]	; (1be48 <gpio_nrfx_pin_interrupt_configure+0x1e0>)
   1bd12:	f3bf 8f5b 	dmb	ish

	if (val) {
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1bd16:	43cf      	mvns	r7, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1bd18:	e850 cf00 	ldrex	ip, [r0]
   1bd1c:	ea0c 0c07 	and.w	ip, ip, r7
   1bd20:	e840 ce00 	strex	lr, ip, [r0]
   1bd24:	f1be 0f00 	cmp.w	lr, #0
   1bd28:	d1f6      	bne.n	1bd18 <gpio_nrfx_pin_interrupt_configure+0xb0>
   1bd2a:	f3bf 8f5b 	dmb	ish
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   1bd2e:	009b      	lsls	r3, r3, #2
   1bd30:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1bd34:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1bd38:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
   1bd3c:	f020 0001 	bic.w	r0, r0, #1
   1bd40:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
    p_reg->INTENCLR = mask;
   1bd44:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   1bd48:	2100      	movs	r1, #0
   1bd4a:	4628      	mov	r0, r5
   1bd4c:	f7ff ff78 	bl	1bc40 <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
   1bd50:	68f3      	ldr	r3, [r6, #12]
   1bd52:	40e3      	lsrs	r3, r4
   1bd54:	f013 0301 	ands.w	r3, r3, #1
   1bd58:	d053      	beq.n	1be02 <gpio_nrfx_pin_interrupt_configure+0x19a>
		if (data->trig_edge & BIT(pin)) {
   1bd5a:	6973      	ldr	r3, [r6, #20]
   1bd5c:	40e3      	lsrs	r3, r4
   1bd5e:	f013 0201 	ands.w	r2, r3, #1
   1bd62:	d061      	beq.n	1be28 <gpio_nrfx_pin_interrupt_configure+0x1c0>
			if (data->double_edge & BIT(pin)) {
   1bd64:	69b3      	ldr	r3, [r6, #24]
   1bd66:	40e3      	lsrs	r3, r4
   1bd68:	07db      	lsls	r3, r3, #31
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   1bd6a:	bf5f      	itttt	pl
   1bd6c:	6931      	ldrpl	r1, [r6, #16]
   1bd6e:	fa21 f404 	lsrpl.w	r4, r1, r4
   1bd72:	f004 0401 	andpl.w	r4, r4, #1
   1bd76:	f1c4 0402 	rsbpl	r4, r4, #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1bd7a:	4933      	ldr	r1, [pc, #204]	; (1be48 <gpio_nrfx_pin_interrupt_configure+0x1e0>)
   1bd7c:	bf54      	ite	pl
   1bd7e:	b2e4      	uxtbpl	r4, r4
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   1bd80:	2403      	movmi	r4, #3
   1bd82:	2200      	movs	r2, #0
		atomic_val_t prev = atomic_or(mask, BIT(channel));
   1bd84:	2701      	movs	r7, #1
   1bd86:	fa07 f602 	lsl.w	r6, r7, r2
   1bd8a:	f3bf 8f5b 	dmb	ish
   1bd8e:	e851 0f00 	ldrex	r0, [r1]
   1bd92:	ea40 0306 	orr.w	r3, r0, r6
   1bd96:	e841 3c00 	strex	ip, r3, [r1]
   1bd9a:	f1bc 0f00 	cmp.w	ip, #0
   1bd9e:	d1f6      	bne.n	1bd8e <gpio_nrfx_pin_interrupt_configure+0x126>
   1bda0:	f3bf 8f5b 	dmb	ish
		if ((prev & BIT(channel)) == 0) {
   1bda4:	40d0      	lsrs	r0, r2
   1bda6:	f010 0301 	ands.w	r3, r0, #1
   1bdaa:	d136      	bne.n	1be1a <gpio_nrfx_pin_interrupt_configure+0x1b2>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1bdac:	0091      	lsls	r1, r2, #2
   1bdae:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   1bdb2:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
			nrf_gpiote_event_t evt =
   1bdb6:	3240      	adds	r2, #64	; 0x40
   1bdb8:	f8d1 0510 	ldr.w	r0, [r1, #1296]	; 0x510
   1bdbc:	f420 304f 	bic.w	r0, r0, #211968	; 0x33c00
   1bdc0:	f420 7040 	bic.w	r0, r0, #768	; 0x300
   1bdc4:	0092      	lsls	r2, r2, #2
   1bdc6:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1bdca:	022d      	lsls	r5, r5, #8
    return ((uint32_t)p_reg + event);
   1bdcc:	b292      	uxth	r2, r2
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1bdce:	f8d1 0510 	ldr.w	r0, [r1, #1296]	; 0x510
   1bdd2:	f405 557c 	and.w	r5, r5, #16128	; 0x3f00
    return ((uint32_t)p_reg + event);
   1bdd6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1bdda:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1bdde:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
   1bde2:	4305      	orrs	r5, r0
   1bde4:	f8c1 5510 	str.w	r5, [r1, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1bde8:	6013      	str	r3, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event));
   1bdea:	6812      	ldr	r2, [r2, #0]
   1bdec:	9201      	str	r2, [sp, #4]
    (void)dummy;
   1bdee:	9a01      	ldr	r2, [sp, #4]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   1bdf0:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
   1bdf4:	f042 0201 	orr.w	r2, r2, #1
   1bdf8:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510
    p_reg->INTENSET = mask;
   1bdfc:	4a11      	ldr	r2, [pc, #68]	; (1be44 <gpio_nrfx_pin_interrupt_configure+0x1dc>)
   1bdfe:	f8c2 6304 	str.w	r6, [r2, #772]	; 0x304
	int res = 0;
   1be02:	4618      	mov	r0, r3
   1be04:	e00e      	b.n	1be24 <gpio_nrfx_pin_interrupt_configure+0x1bc>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   1be06:	2001      	movs	r0, #1
   1be08:	40a0      	lsls	r0, r4
   1be0a:	ea21 0100 	bic.w	r1, r1, r0
   1be0e:	e751      	b.n	1bcb4 <gpio_nrfx_pin_interrupt_configure+0x4c>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1be10:	3301      	adds	r3, #1
   1be12:	2b08      	cmp	r3, #8
   1be14:	f47f af6c 	bne.w	1bcf0 <gpio_nrfx_pin_interrupt_configure+0x88>
   1be18:	e796      	b.n	1bd48 <gpio_nrfx_pin_interrupt_configure+0xe0>
	for (uint8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
   1be1a:	3201      	adds	r2, #1
   1be1c:	2a08      	cmp	r2, #8
   1be1e:	d1b2      	bne.n	1bd86 <gpio_nrfx_pin_interrupt_configure+0x11e>
	return -ENODEV;
   1be20:	f06f 0012 	mvn.w	r0, #18
}
   1be24:	b003      	add	sp, #12
   1be26:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1be28:	6931      	ldr	r1, [r6, #16]
   1be2a:	40e1      	lsrs	r1, r4
   1be2c:	f001 0101 	and.w	r1, r1, #1
   1be30:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   1be34:	4628      	mov	r0, r5
   1be36:	b2c9      	uxtb	r1, r1
   1be38:	f7ff ff02 	bl	1bc40 <nrf_gpio_cfg_sense_set>
	int res = 0;
   1be3c:	4610      	mov	r0, r2
   1be3e:	e7f1      	b.n	1be24 <gpio_nrfx_pin_interrupt_configure+0x1bc>
   1be40:	50000300 	.word	0x50000300
   1be44:	40006000 	.word	0x40006000
   1be48:	20008c9c 	.word	0x20008c9c

0001be4c <gpiote_event_handler>:
{
   1be4c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   1be4e:	2600      	movs	r6, #0
{
   1be50:	b085      	sub	sp, #20
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   1be52:	e9cd 6602 	strd	r6, r6, [sp, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1be56:	4d2a      	ldr	r5, [pc, #168]	; (1bf00 <gpiote_event_handler+0xb4>)
   1be58:	682c      	ldr	r4, [r5, #0]
	if (port_event) {
   1be5a:	b15c      	cbz	r4, 1be74 <gpiote_event_handler+0x28>
			check_level_trigger_pins(DEVICE_GET(gpio_nrfx_p0));
   1be5c:	4829      	ldr	r0, [pc, #164]	; (1bf04 <gpiote_event_handler+0xb8>)
   1be5e:	f006 fc90 	bl	22782 <check_level_trigger_pins>
		fired_triggers[0] =
   1be62:	9002      	str	r0, [sp, #8]
			check_level_trigger_pins(DEVICE_GET(gpio_nrfx_p1));
   1be64:	4828      	ldr	r0, [pc, #160]	; (1bf08 <gpiote_event_handler+0xbc>)
   1be66:	f006 fc8c 	bl	22782 <check_level_trigger_pins>
		fired_triggers[1] =
   1be6a:	9003      	str	r0, [sp, #12]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1be6c:	602e      	str	r6, [r5, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event));
   1be6e:	682b      	ldr	r3, [r5, #0]
   1be70:	9300      	str	r3, [sp, #0]
    (void)dummy;
   1be72:	9b00      	ldr	r3, [sp, #0]
    return p_reg->INTENSET & mask;
   1be74:	4d25      	ldr	r5, [pc, #148]	; (1bf0c <gpiote_event_handler+0xc0>)
{
   1be76:	2200      	movs	r2, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   1be78:	2601      	movs	r6, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1be7a:	4694      	mov	ip, r2
    return p_reg->INTENSET & mask;
   1be7c:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
   1be80:	fa06 f102 	lsl.w	r1, r6, r2
   1be84:	4219      	tst	r1, r3
   1be86:	d01d      	beq.n	1bec4 <gpiote_event_handler+0x78>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1be88:	0091      	lsls	r1, r2, #2
   1be8a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   1be8e:	f501 41c2 	add.w	r1, r1, #24832	; 0x6100
   1be92:	680b      	ldr	r3, [r1, #0]
   1be94:	b1b3      	cbz	r3, 1bec4 <gpiote_event_handler+0x78>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1be96:	f502 73a2 	add.w	r3, r2, #324	; 0x144
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   1be9a:	af04      	add	r7, sp, #16
   1be9c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1bea0:	f8c1 c000 	str.w	ip, [r1]
   1bea4:	f3c3 3040 	ubfx	r0, r3, #13, #1
   1bea8:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   1beac:	f3c3 2304 	ubfx	r3, r3, #8, #5
   1beb0:	f850 7c08 	ldr.w	r7, [r0, #-8]
   1beb4:	fa06 f303 	lsl.w	r3, r6, r3
   1beb8:	433b      	orrs	r3, r7
   1beba:	f840 3c08 	str.w	r3, [r0, #-8]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event));
   1bebe:	680b      	ldr	r3, [r1, #0]
   1bec0:	9301      	str	r3, [sp, #4]
    (void)dummy;
   1bec2:	9b01      	ldr	r3, [sp, #4]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1bec4:	3201      	adds	r2, #1
   1bec6:	2a08      	cmp	r2, #8
   1bec8:	d1d8      	bne.n	1be7c <gpiote_event_handler+0x30>
	if (fired_triggers[0]) {
   1beca:	9a02      	ldr	r2, [sp, #8]
   1becc:	b122      	cbz	r2, 1bed8 <gpiote_event_handler+0x8c>
	gpio_fire_callbacks(list, port, pins);
   1bece:	490d      	ldr	r1, [pc, #52]	; (1bf04 <gpiote_event_handler+0xb8>)
	sys_slist_t *list = &data->callbacks;
   1bed0:	68c8      	ldr	r0, [r1, #12]
	gpio_fire_callbacks(list, port, pins);
   1bed2:	3004      	adds	r0, #4
   1bed4:	f006 fbeb 	bl	226ae <gpio_fire_callbacks>
	if (fired_triggers[1]) {
   1bed8:	9a03      	ldr	r2, [sp, #12]
   1beda:	b12a      	cbz	r2, 1bee8 <gpiote_event_handler+0x9c>
	gpio_fire_callbacks(list, port, pins);
   1bedc:	4909      	ldr	r1, [pc, #36]	; (1bf04 <gpiote_event_handler+0xb8>)
	sys_slist_t *list = &data->callbacks;
   1bede:	69c8      	ldr	r0, [r1, #28]
	gpio_fire_callbacks(list, port, pins);
   1bee0:	3110      	adds	r1, #16
   1bee2:	3004      	adds	r0, #4
   1bee4:	f006 fbe3 	bl	226ae <gpio_fire_callbacks>
	if (port_event) {
   1bee8:	b144      	cbz	r4, 1befc <gpiote_event_handler+0xb0>
		cfg_level_pins(DEVICE_GET(gpio_nrfx_p0));
   1beea:	4806      	ldr	r0, [pc, #24]	; (1bf04 <gpiote_event_handler+0xb8>)
   1beec:	f006 fc6d 	bl	227ca <cfg_level_pins>
		cfg_level_pins(DEVICE_GET(gpio_nrfx_p1));
   1bef0:	4805      	ldr	r0, [pc, #20]	; (1bf08 <gpiote_event_handler+0xbc>)
}
   1bef2:	b005      	add	sp, #20
   1bef4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		cfg_level_pins(DEVICE_GET(gpio_nrfx_p1));
   1bef8:	f006 bc67 	b.w	227ca <cfg_level_pins>
}
   1befc:	b005      	add	sp, #20
   1befe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1bf00:	4000617c 	.word	0x4000617c
   1bf04:	20000778 	.word	0x20000778
   1bf08:	20000788 	.word	0x20000788
   1bf0c:	40006000 	.word	0x40006000

0001bf10 <event_txdrdy_check>:
#endif
}

NRF_STATIC_INLINE bool nrf_uart_event_check(NRF_UART_Type const * p_reg, nrf_uart_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1bf10:	4b05      	ldr	r3, [pc, #20]	; (1bf28 <event_txdrdy_check+0x18>)
   1bf12:	681b      	ldr	r3, [r3, #0]

static bool event_txdrdy_check(void)
{
	return (nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_TXDRDY)
#ifdef CONFIG_UART_0_INTERRUPT_DRIVEN
		|| uart_sw_event_txdrdy
   1bf14:	b92b      	cbnz	r3, 1bf22 <event_txdrdy_check+0x12>
   1bf16:	4b05      	ldr	r3, [pc, #20]	; (1bf2c <event_txdrdy_check+0x1c>)
   1bf18:	7818      	ldrb	r0, [r3, #0]
   1bf1a:	3800      	subs	r0, #0
   1bf1c:	bf18      	it	ne
   1bf1e:	2001      	movne	r0, #1
   1bf20:	4770      	bx	lr
   1bf22:	2001      	movs	r0, #1
#endif
	       );
}
   1bf24:	4770      	bx	lr
   1bf26:	bf00      	nop
   1bf28:	4000211c 	.word	0x4000211c
   1bf2c:	20009c4c 	.word	0x20009c4c

0001bf30 <uart_nrfx_err_check>:
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_uart_errorsrc_get_and_clear(NRF_UART_Type * p_reg)
{
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1bf30:	4b02      	ldr	r3, [pc, #8]	; (1bf3c <uart_nrfx_err_check+0xc>)
   1bf32:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1bf36:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
/** Console I/O function */
static int uart_nrfx_err_check(struct device *dev)
{
	/* register bitfields maps to the defines in uart.h */
	return nrf_uart_errorsrc_get_and_clear(uart0_addr);
}
   1bf3a:	4770      	bx	lr
   1bf3c:	40002000 	.word	0x40002000

0001bf40 <uart_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
   1bf40:	4b02      	ldr	r3, [pc, #8]	; (1bf4c <uart_nrfx_irq_rx_enable+0xc>)
   1bf42:	2204      	movs	r2, #4
   1bf44:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

/** Interrupt driven receiver enabling function */
static void uart_nrfx_irq_rx_enable(struct device *dev)
{
	nrf_uart_int_enable(uart0_addr, NRF_UART_INT_MASK_RXDRDY);
}
   1bf48:	4770      	bx	lr
   1bf4a:	bf00      	nop
   1bf4c:	40002000 	.word	0x40002000

0001bf50 <uart_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
   1bf50:	4b02      	ldr	r3, [pc, #8]	; (1bf5c <uart_nrfx_irq_rx_disable+0xc>)
   1bf52:	2204      	movs	r2, #4
   1bf54:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

/** Interrupt driven receiver disabling function */
static void uart_nrfx_irq_rx_disable(struct device *dev)
{
	nrf_uart_int_disable(uart0_addr, NRF_UART_INT_MASK_RXDRDY);
}
   1bf58:	4770      	bx	lr
   1bf5a:	bf00      	nop
   1bf5c:	40002000 	.word	0x40002000

0001bf60 <uart_nrfx_irq_rx_ready>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1bf60:	4b02      	ldr	r3, [pc, #8]	; (1bf6c <uart_nrfx_irq_rx_ready+0xc>)
   1bf62:	6818      	ldr	r0, [r3, #0]

/** Interrupt driven receiver ready function */
static int uart_nrfx_irq_rx_ready(struct device *dev)
{
	return nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_RXDRDY);
}
   1bf64:	3800      	subs	r0, #0
   1bf66:	bf18      	it	ne
   1bf68:	2001      	movne	r0, #1
   1bf6a:	4770      	bx	lr
   1bf6c:	40002108 	.word	0x40002108

0001bf70 <uart_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
   1bf70:	4b02      	ldr	r3, [pc, #8]	; (1bf7c <uart_nrfx_irq_err_enable+0xc>)
   1bf72:	f44f 7200 	mov.w	r2, #512	; 0x200
   1bf76:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

/** Interrupt driven error enabling function */
static void uart_nrfx_irq_err_enable(struct device *dev)
{
	nrf_uart_int_enable(uart0_addr, NRF_UART_INT_MASK_ERROR);
}
   1bf7a:	4770      	bx	lr
   1bf7c:	40002000 	.word	0x40002000

0001bf80 <uart_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
   1bf80:	4b02      	ldr	r3, [pc, #8]	; (1bf8c <uart_nrfx_irq_err_disable+0xc>)
   1bf82:	f44f 7200 	mov.w	r2, #512	; 0x200
   1bf86:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

/** Interrupt driven error disabling function */
static void uart_nrfx_irq_err_disable(struct device *dev)
{
	nrf_uart_int_disable(uart0_addr, NRF_UART_INT_MASK_ERROR);
}
   1bf8a:	4770      	bx	lr
   1bf8c:	40002000 	.word	0x40002000

0001bf90 <uart_nrfx_irq_callback_set>:
static void uart_nrfx_irq_callback_set(struct device *dev,
				       uart_irq_callback_user_data_t cb,
				       void *cb_data)
{
	(void)dev;
	irq_callback = cb;
   1bf90:	4b02      	ldr	r3, [pc, #8]	; (1bf9c <uart_nrfx_irq_callback_set+0xc>)
   1bf92:	6019      	str	r1, [r3, #0]
	irq_cb_data = cb_data;
   1bf94:	4b02      	ldr	r3, [pc, #8]	; (1bfa0 <uart_nrfx_irq_callback_set+0x10>)
   1bf96:	601a      	str	r2, [r3, #0]
}
   1bf98:	4770      	bx	lr
   1bf9a:	bf00      	nop
   1bf9c:	20008ca0 	.word	0x20008ca0
   1bfa0:	20008ca4 	.word	0x20008ca4

0001bfa4 <uart_nrfx_irq_tx_disable>:
   1bfa4:	4b03      	ldr	r3, [pc, #12]	; (1bfb4 <uart_nrfx_irq_tx_disable+0x10>)
   1bfa6:	2280      	movs	r2, #128	; 0x80
   1bfa8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->TXD = txd;
}

NRF_STATIC_INLINE void nrf_uart_task_trigger(NRF_UART_Type * p_reg, nrf_uart_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1bfac:	2201      	movs	r2, #1
   1bfae:	60da      	str	r2, [r3, #12]
	device_busy_clear(dev);
   1bfb0:	f006 bd6b 	b.w	22a8a <device_busy_clear>
   1bfb4:	40002000 	.word	0x40002000

0001bfb8 <uart_nrfx_irq_tx_enable>:
{
   1bfb8:	b508      	push	{r3, lr}
	device_busy_set(dev);
   1bfba:	f006 fd65 	bl	22a88 <device_busy_set>
   1bfbe:	4b0d      	ldr	r3, [pc, #52]	; (1bff4 <uart_nrfx_irq_tx_enable+0x3c>)
   1bfc0:	2201      	movs	r2, #1
   1bfc2:	601a      	str	r2, [r3, #0]
    p_reg->INTENSET = mask;
   1bfc4:	2280      	movs	r2, #128	; 0x80
   1bfc6:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
	__asm__ volatile(
   1bfca:	f04f 0220 	mov.w	r2, #32
   1bfce:	f3ef 8311 	mrs	r3, BASEPRI
   1bfd2:	f382 8811 	msr	BASEPRI, r2
   1bfd6:	f3bf 8f6f 	isb	sy
	if (uart_sw_event_txdrdy) {
   1bfda:	4a07      	ldr	r2, [pc, #28]	; (1bff8 <uart_nrfx_irq_tx_enable+0x40>)
   1bfdc:	7812      	ldrb	r2, [r2, #0]
   1bfde:	b11a      	cbz	r2, 1bfe8 <uart_nrfx_irq_tx_enable+0x30>
   1bfe0:	4a06      	ldr	r2, [pc, #24]	; (1bffc <uart_nrfx_irq_tx_enable+0x44>)
   1bfe2:	2104      	movs	r1, #4
   1bfe4:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
	__asm__ volatile(
   1bfe8:	f383 8811 	msr	BASEPRI, r3
   1bfec:	f3bf 8f6f 	isb	sy
}
   1bff0:	bd08      	pop	{r3, pc}
   1bff2:	bf00      	nop
   1bff4:	40002008 	.word	0x40002008
   1bff8:	20009c4c 	.word	0x20009c4c
   1bffc:	e000e100 	.word	0xe000e100

0001c000 <uart_nrfx_irq_is_pending>:
{
   1c000:	b508      	push	{r3, lr}
    return p_reg->INTENSET & mask;
   1c002:	4b0c      	ldr	r3, [pc, #48]	; (1c034 <uart_nrfx_irq_is_pending+0x34>)
   1c004:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
		||
   1c008:	f012 0f80 	tst.w	r2, #128	; 0x80
   1c00c:	461a      	mov	r2, r3
   1c00e:	d105      	bne.n	1c01c <uart_nrfx_irq_is_pending+0x1c>
   1c010:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
   1c014:	f010 0004 	ands.w	r0, r0, #4
   1c018:	d106      	bne.n	1c028 <uart_nrfx_irq_is_pending+0x28>
}
   1c01a:	bd08      	pop	{r3, pc}
		 event_txdrdy_check())
   1c01c:	f7ff ff78 	bl	1bf10 <event_txdrdy_check>
					   NRF_UART_INT_MASK_TXDRDY) &&
   1c020:	2800      	cmp	r0, #0
   1c022:	d0f5      	beq.n	1c010 <uart_nrfx_irq_is_pending+0x10>
		||
   1c024:	2001      	movs	r0, #1
   1c026:	e7f8      	b.n	1c01a <uart_nrfx_irq_is_pending+0x1a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c028:	4b03      	ldr	r3, [pc, #12]	; (1c038 <uart_nrfx_irq_is_pending+0x38>)
   1c02a:	6818      	ldr	r0, [r3, #0]
					   NRF_UART_INT_MASK_RXDRDY) &&
   1c02c:	3800      	subs	r0, #0
   1c02e:	bf18      	it	ne
   1c030:	2001      	movne	r0, #1
   1c032:	e7f2      	b.n	1c01a <uart_nrfx_irq_is_pending+0x1a>
   1c034:	40002000 	.word	0x40002000
   1c038:	40002108 	.word	0x40002108

0001c03c <uart_nrfx_configure>:
{
   1c03c:	b570      	push	{r4, r5, r6, lr}
	switch (cfg->stop_bits) {
   1c03e:	794b      	ldrb	r3, [r1, #5]
   1c040:	2b01      	cmp	r3, #1
   1c042:	d024      	beq.n	1c08e <uart_nrfx_configure+0x52>
   1c044:	2b03      	cmp	r3, #3
   1c046:	d11f      	bne.n	1c088 <uart_nrfx_configure+0x4c>
		uart_cfg.stop = NRF_UART_STOP_TWO;
   1c048:	2610      	movs	r6, #16
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1c04a:	798b      	ldrb	r3, [r1, #6]
   1c04c:	2b03      	cmp	r3, #3
   1c04e:	d11b      	bne.n	1c088 <uart_nrfx_configure+0x4c>
	switch (cfg->flow_ctrl) {
   1c050:	79cc      	ldrb	r4, [r1, #7]
   1c052:	b10c      	cbz	r4, 1c058 <uart_nrfx_configure+0x1c>
   1c054:	2c01      	cmp	r4, #1
   1c056:	d117      	bne.n	1c088 <uart_nrfx_configure+0x4c>
	switch (cfg->parity) {
   1c058:	790a      	ldrb	r2, [r1, #4]
   1c05a:	b112      	cbz	r2, 1c062 <uart_nrfx_configure+0x26>
   1c05c:	2a02      	cmp	r2, #2
   1c05e:	d113      	bne.n	1c088 <uart_nrfx_configure+0x4c>
		uart_cfg.parity = NRF_UART_PARITY_INCLUDED;
   1c060:	220e      	movs	r2, #14
	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1c062:	680b      	ldr	r3, [r1, #0]
	switch (baudrate) {
   1c064:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
   1c068:	d062      	beq.n	1c130 <uart_nrfx_configure+0xf4>
   1c06a:	d82d      	bhi.n	1c0c8 <uart_nrfx_configure+0x8c>
   1c06c:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1c070:	d060      	beq.n	1c134 <uart_nrfx_configure+0xf8>
   1c072:	d816      	bhi.n	1c0a2 <uart_nrfx_configure+0x66>
   1c074:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   1c078:	d05e      	beq.n	1c138 <uart_nrfx_configure+0xfc>
   1c07a:	d80a      	bhi.n	1c092 <uart_nrfx_configure+0x56>
   1c07c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1c080:	d05d      	beq.n	1c13e <uart_nrfx_configure+0x102>
   1c082:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   1c086:	d05d      	beq.n	1c144 <uart_nrfx_configure+0x108>
   1c088:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1c08c:	e04f      	b.n	1c12e <uart_nrfx_configure+0xf2>
	switch (cfg->stop_bits) {
   1c08e:	2600      	movs	r6, #0
   1c090:	e7db      	b.n	1c04a <uart_nrfx_configure+0xe>
	switch (baudrate) {
   1c092:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1c096:	d058      	beq.n	1c14a <uart_nrfx_configure+0x10e>
   1c098:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   1c09c:	d1f4      	bne.n	1c088 <uart_nrfx_configure+0x4c>
		nrf_baudrate = NRF_UART_BAUDRATE_4800;
   1c09e:	4b35      	ldr	r3, [pc, #212]	; (1c174 <uart_nrfx_configure+0x138>)
   1c0a0:	e039      	b.n	1c116 <uart_nrfx_configure+0xda>
	switch (baudrate) {
   1c0a2:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   1c0a6:	d053      	beq.n	1c150 <uart_nrfx_configure+0x114>
   1c0a8:	d807      	bhi.n	1c0ba <uart_nrfx_configure+0x7e>
   1c0aa:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   1c0ae:	d051      	beq.n	1c154 <uart_nrfx_configure+0x118>
   1c0b0:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1c0b4:	d1e8      	bne.n	1c088 <uart_nrfx_configure+0x4c>
		nrf_baudrate = NRF_UART_BAUDRATE_19200;
   1c0b6:	4b30      	ldr	r3, [pc, #192]	; (1c178 <uart_nrfx_configure+0x13c>)
   1c0b8:	e02d      	b.n	1c116 <uart_nrfx_configure+0xda>
	switch (baudrate) {
   1c0ba:	f647 2512 	movw	r5, #31250	; 0x7a12
   1c0be:	42ab      	cmp	r3, r5
   1c0c0:	d1e2      	bne.n	1c088 <uart_nrfx_configure+0x4c>
		nrf_baudrate = NRF_UART_BAUDRATE_31250;
   1c0c2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1c0c6:	e026      	b.n	1c116 <uart_nrfx_configure+0xda>
	switch (baudrate) {
   1c0c8:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   1c0cc:	d045      	beq.n	1c15a <uart_nrfx_configure+0x11e>
   1c0ce:	d811      	bhi.n	1c0f4 <uart_nrfx_configure+0xb8>
   1c0d0:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1c0d4:	d043      	beq.n	1c15e <uart_nrfx_configure+0x122>
   1c0d6:	d808      	bhi.n	1c0ea <uart_nrfx_configure+0xae>
   1c0d8:	f64d 25c0 	movw	r5, #56000	; 0xdac0
   1c0dc:	42ab      	cmp	r3, r5
   1c0de:	d040      	beq.n	1c162 <uart_nrfx_configure+0x126>
   1c0e0:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1c0e4:	d1d0      	bne.n	1c088 <uart_nrfx_configure+0x4c>
		nrf_baudrate = NRF_UART_BAUDRATE_57600;
   1c0e6:	4b25      	ldr	r3, [pc, #148]	; (1c17c <uart_nrfx_configure+0x140>)
   1c0e8:	e015      	b.n	1c116 <uart_nrfx_configure+0xda>
	switch (baudrate) {
   1c0ea:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   1c0ee:	d1cb      	bne.n	1c088 <uart_nrfx_configure+0x4c>
		nrf_baudrate = NRF_UART_BAUDRATE_115200;
   1c0f0:	4b23      	ldr	r3, [pc, #140]	; (1c180 <uart_nrfx_configure+0x144>)
   1c0f2:	e010      	b.n	1c116 <uart_nrfx_configure+0xda>
	switch (baudrate) {
   1c0f4:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   1c0f8:	d036      	beq.n	1c168 <uart_nrfx_configure+0x12c>
   1c0fa:	d807      	bhi.n	1c10c <uart_nrfx_configure+0xd0>
   1c0fc:	4d21      	ldr	r5, [pc, #132]	; (1c184 <uart_nrfx_configure+0x148>)
   1c0fe:	42ab      	cmp	r3, r5
   1c100:	d034      	beq.n	1c16c <uart_nrfx_configure+0x130>
   1c102:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   1c106:	d1bf      	bne.n	1c088 <uart_nrfx_configure+0x4c>
		nrf_baudrate = NRF_UART_BAUDRATE_460800;
   1c108:	4b1f      	ldr	r3, [pc, #124]	; (1c188 <uart_nrfx_configure+0x14c>)
   1c10a:	e004      	b.n	1c116 <uart_nrfx_configure+0xda>
	switch (baudrate) {
   1c10c:	4d1f      	ldr	r5, [pc, #124]	; (1c18c <uart_nrfx_configure+0x150>)
   1c10e:	42ab      	cmp	r3, r5
   1c110:	d1ba      	bne.n	1c088 <uart_nrfx_configure+0x4c>
		nrf_baudrate = NRF_UART_BAUDRATE_1000000;
   1c112:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uart_baudrate_set(NRF_UART_Type * p_reg, nrf_uart_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1c116:	4d1e      	ldr	r5, [pc, #120]	; (1c190 <uart_nrfx_configure+0x154>)
                    | (uint32_t)p_cfg->hwfc;
   1c118:	4334      	orrs	r4, r6
   1c11a:	4322      	orrs	r2, r4
    p_reg->BAUDRATE = baudrate;
   1c11c:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1c120:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
	get_dev_data(dev)->uart_config = *cfg;
   1c124:	68c3      	ldr	r3, [r0, #12]
   1c126:	c903      	ldmia	r1, {r0, r1}
   1c128:	e883 0003 	stmia.w	r3, {r0, r1}
	return 0;
   1c12c:	2000      	movs	r0, #0
}
   1c12e:	bd70      	pop	{r4, r5, r6, pc}
		nrf_baudrate = NRF_UART_BAUDRATE_38400;
   1c130:	4b18      	ldr	r3, [pc, #96]	; (1c194 <uart_nrfx_configure+0x158>)
   1c132:	e7f0      	b.n	1c116 <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_9600;
   1c134:	4b18      	ldr	r3, [pc, #96]	; (1c198 <uart_nrfx_configure+0x15c>)
   1c136:	e7ee      	b.n	1c116 <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_1200;
   1c138:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1c13c:	e7eb      	b.n	1c116 <uart_nrfx_configure+0xda>
		nrf_baudrate = 0x00014000;
   1c13e:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1c142:	e7e8      	b.n	1c116 <uart_nrfx_configure+0xda>
	switch (baudrate) {
   1c144:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   1c148:	e7e5      	b.n	1c116 <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_2400;
   1c14a:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1c14e:	e7e2      	b.n	1c116 <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_28800;
   1c150:	4b12      	ldr	r3, [pc, #72]	; (1c19c <uart_nrfx_configure+0x160>)
   1c152:	e7e0      	b.n	1c116 <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_14400;
   1c154:	f44f 136c 	mov.w	r3, #3866624	; 0x3b0000
   1c158:	e7dd      	b.n	1c116 <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_230400;
   1c15a:	4b11      	ldr	r3, [pc, #68]	; (1c1a0 <uart_nrfx_configure+0x164>)
   1c15c:	e7db      	b.n	1c116 <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_76800;
   1c15e:	4b11      	ldr	r3, [pc, #68]	; (1c1a4 <uart_nrfx_configure+0x168>)
   1c160:	e7d9      	b.n	1c116 <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_56000;
   1c162:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1c166:	e7d6      	b.n	1c116 <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_921600;
   1c168:	4b0f      	ldr	r3, [pc, #60]	; (1c1a8 <uart_nrfx_configure+0x16c>)
   1c16a:	e7d4      	b.n	1c116 <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_250000;
   1c16c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1c170:	e7d1      	b.n	1c116 <uart_nrfx_configure+0xda>
   1c172:	bf00      	nop
   1c174:	0013b000 	.word	0x0013b000
   1c178:	004ea000 	.word	0x004ea000
   1c17c:	00ebf000 	.word	0x00ebf000
   1c180:	01d7e000 	.word	0x01d7e000
   1c184:	0003d090 	.word	0x0003d090
   1c188:	075f7000 	.word	0x075f7000
   1c18c:	000f4240 	.word	0x000f4240
   1c190:	40002000 	.word	0x40002000
   1c194:	009d5000 	.word	0x009d5000
   1c198:	00275000 	.word	0x00275000
   1c19c:	0075f000 	.word	0x0075f000
   1c1a0:	03afb000 	.word	0x03afb000
   1c1a4:	013a9000 	.word	0x013a9000
   1c1a8:	0ebed000 	.word	0x0ebed000

0001c1ac <uart_nrfx_isr>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c1ac:	4b08      	ldr	r3, [pc, #32]	; (1c1d0 <uart_nrfx_isr+0x24>)
   1c1ae:	681a      	ldr	r2, [r3, #0]
 * @param arg Argument to ISR.
 *
 * @return N/A
 */
static void uart_nrfx_isr(void *arg)
{
   1c1b0:	b082      	sub	sp, #8
	ARG_UNUSED(arg);

	if (nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_ERROR)) {
   1c1b2:	b122      	cbz	r2, 1c1be <uart_nrfx_isr+0x12>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c1b4:	2200      	movs	r2, #0
   1c1b6:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   1c1b8:	681b      	ldr	r3, [r3, #0]
   1c1ba:	9301      	str	r3, [sp, #4]
    (void)dummy;
   1c1bc:	9b01      	ldr	r3, [sp, #4]
		nrf_uart_event_clear(uart0_addr, NRF_UART_EVENT_ERROR);
	}

	if (irq_callback) {
   1c1be:	4b05      	ldr	r3, [pc, #20]	; (1c1d4 <uart_nrfx_isr+0x28>)
   1c1c0:	681b      	ldr	r3, [r3, #0]
   1c1c2:	b11b      	cbz	r3, 1c1cc <uart_nrfx_isr+0x20>
		irq_callback(irq_cb_data);
   1c1c4:	4a04      	ldr	r2, [pc, #16]	; (1c1d8 <uart_nrfx_isr+0x2c>)
   1c1c6:	6810      	ldr	r0, [r2, #0]
	}
}
   1c1c8:	b002      	add	sp, #8
		irq_callback(irq_cb_data);
   1c1ca:	4718      	bx	r3
}
   1c1cc:	b002      	add	sp, #8
   1c1ce:	4770      	bx	lr
   1c1d0:	40002124 	.word	0x40002124
   1c1d4:	20008ca0 	.word	0x20008ca0
   1c1d8:	20008ca4 	.word	0x20008ca4

0001c1dc <uart_nrfx_fifo_read>:
{
   1c1dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	while ((size - num_rx > 0) &&
   1c1de:	2300      	movs	r3, #0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c1e0:	4c09      	ldr	r4, [pc, #36]	; (1c208 <uart_nrfx_fifo_read+0x2c>)
    return p_reg->RXD;
   1c1e2:	4f0a      	ldr	r7, [pc, #40]	; (1c20c <uart_nrfx_fifo_read+0x30>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c1e4:	461e      	mov	r6, r3
   1c1e6:	b2d8      	uxtb	r0, r3
   1c1e8:	1a15      	subs	r5, r2, r0
   1c1ea:	2d00      	cmp	r5, #0
   1c1ec:	dd02      	ble.n	1c1f4 <uart_nrfx_fifo_read+0x18>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c1ee:	6825      	ldr	r5, [r4, #0]
   1c1f0:	3301      	adds	r3, #1
   1c1f2:	b90d      	cbnz	r5, 1c1f8 <uart_nrfx_fifo_read+0x1c>
}
   1c1f4:	b003      	add	sp, #12
   1c1f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c1f8:	6026      	str	r6, [r4, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   1c1fa:	6825      	ldr	r5, [r4, #0]
   1c1fc:	9501      	str	r5, [sp, #4]
    (void)dummy;
   1c1fe:	9d01      	ldr	r5, [sp, #4]
    return p_reg->RXD;
   1c200:	f8d7 5518 	ldr.w	r5, [r7, #1304]	; 0x518
   1c204:	540d      	strb	r5, [r1, r0]
   1c206:	e7ee      	b.n	1c1e6 <uart_nrfx_fifo_read+0xa>
   1c208:	40002108 	.word	0x40002108
   1c20c:	40002000 	.word	0x40002000

0001c210 <uart_nrfx_poll_out>:
{
   1c210:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1c212:	460e      	mov	r6, r1
	if (!k_is_in_isr()) {
   1c214:	f006 fefd 	bl	23012 <k_is_in_isr>
   1c218:	4d1d      	ldr	r5, [pc, #116]	; (1c290 <uart_nrfx_poll_out+0x80>)
   1c21a:	2800      	cmp	r0, #0
   1c21c:	d134      	bne.n	1c288 <uart_nrfx_poll_out+0x78>
   1c21e:	2464      	movs	r4, #100	; 0x64
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1c220:	2701      	movs	r7, #1
   1c222:	f3bf 8f5b 	dmb	ish
   1c226:	e855 3f00 	ldrex	r3, [r5]
   1c22a:	2b00      	cmp	r3, #0
   1c22c:	d103      	bne.n	1c236 <uart_nrfx_poll_out+0x26>
   1c22e:	e845 7200 	strex	r2, r7, [r5]
   1c232:	2a00      	cmp	r2, #0
   1c234:	d1f7      	bne.n	1c226 <uart_nrfx_poll_out+0x16>
   1c236:	f3bf 8f5b 	dmb	ish
		while (atomic_cas((atomic_t *) lock,
   1c23a:	d007      	beq.n	1c24c <uart_nrfx_poll_out+0x3c>
	return z_impl_k_sleep(timeout);
   1c23c:	2021      	movs	r0, #33	; 0x21
   1c23e:	2100      	movs	r1, #0
   1c240:	3c01      	subs	r4, #1
   1c242:	f001 fa73 	bl	1d72c <z_impl_k_sleep>
			if (--safety_cnt == 0) {
   1c246:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   1c24a:	d1ea      	bne.n	1c222 <uart_nrfx_poll_out+0x12>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c24c:	4a11      	ldr	r2, [pc, #68]	; (1c294 <uart_nrfx_poll_out+0x84>)
   1c24e:	2300      	movs	r3, #0
   1c250:	6013      	str	r3, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   1c252:	6812      	ldr	r2, [r2, #0]
   1c254:	9201      	str	r2, [sp, #4]
    (void)dummy;
   1c256:	9a01      	ldr	r2, [sp, #4]
	uart_sw_event_txdrdy = 0U;
   1c258:	4a0f      	ldr	r2, [pc, #60]	; (1c298 <uart_nrfx_poll_out+0x88>)
   1c25a:	7013      	strb	r3, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c25c:	4b0f      	ldr	r3, [pc, #60]	; (1c29c <uart_nrfx_poll_out+0x8c>)
   1c25e:	2201      	movs	r2, #1
   1c260:	601a      	str	r2, [r3, #0]
    p_reg->TXD = txd;
   1c262:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   1c266:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
	NRFX_WAIT_FOR(event_txdrdy_check(), 1000, 1, res);
   1c26a:	f7ff fe51 	bl	1bf10 <event_txdrdy_check>
   1c26e:	b920      	cbnz	r0, 1c27a <uart_nrfx_poll_out+0x6a>
   1c270:	2001      	movs	r0, #1
   1c272:	f006 fc07 	bl	22a84 <nrfx_busy_wait>
   1c276:	3c01      	subs	r4, #1
   1c278:	d1f7      	bne.n	1c26a <uart_nrfx_poll_out+0x5a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c27a:	4b09      	ldr	r3, [pc, #36]	; (1c2a0 <uart_nrfx_poll_out+0x90>)
   1c27c:	2201      	movs	r2, #1
   1c27e:	601a      	str	r2, [r3, #0]
	*lock = 0;
   1c280:	2300      	movs	r3, #0
   1c282:	602b      	str	r3, [r5, #0]
}
   1c284:	b003      	add	sp, #12
   1c286:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*lock = 1;
   1c288:	2301      	movs	r3, #1
   1c28a:	602b      	str	r3, [r5, #0]
   1c28c:	e7de      	b.n	1c24c <uart_nrfx_poll_out+0x3c>
   1c28e:	bf00      	nop
   1c290:	20008ca8 	.word	0x20008ca8
   1c294:	4000211c 	.word	0x4000211c
   1c298:	20009c4c 	.word	0x20009c4c
   1c29c:	40002008 	.word	0x40002008
   1c2a0:	4000200c 	.word	0x4000200c

0001c2a4 <uart_nrfx_poll_in>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c2a4:	4b08      	ldr	r3, [pc, #32]	; (1c2c8 <uart_nrfx_poll_in+0x24>)
   1c2a6:	681a      	ldr	r2, [r3, #0]
{
   1c2a8:	b082      	sub	sp, #8
	if (!nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_RXDRDY)) {
   1c2aa:	b152      	cbz	r2, 1c2c2 <uart_nrfx_poll_in+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c2ac:	2000      	movs	r0, #0
   1c2ae:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   1c2b0:	681b      	ldr	r3, [r3, #0]
   1c2b2:	9301      	str	r3, [sp, #4]
    (void)dummy;
   1c2b4:	9b01      	ldr	r3, [sp, #4]
    return p_reg->RXD;
   1c2b6:	4b05      	ldr	r3, [pc, #20]	; (1c2cc <uart_nrfx_poll_in+0x28>)
   1c2b8:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
   1c2bc:	700b      	strb	r3, [r1, #0]
}
   1c2be:	b002      	add	sp, #8
   1c2c0:	4770      	bx	lr
		return -1;
   1c2c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c2c6:	e7fa      	b.n	1c2be <uart_nrfx_poll_in+0x1a>
   1c2c8:	40002108 	.word	0x40002108
   1c2cc:	40002000 	.word	0x40002000

0001c2d0 <uart_nrfx_fifo_fill>:
{
   1c2d0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c2d4:	4e0d      	ldr	r6, [pc, #52]	; (1c30c <uart_nrfx_fifo_fill+0x3c>)
	uart_sw_event_txdrdy = 0U;
   1c2d6:	4f0e      	ldr	r7, [pc, #56]	; (1c310 <uart_nrfx_fifo_fill+0x40>)
    p_reg->TXD = txd;
   1c2d8:	f8df 8038 	ldr.w	r8, [pc, #56]	; 1c314 <uart_nrfx_fifo_fill+0x44>
	while ((len - num_tx > 0) &&
   1c2dc:	2400      	movs	r4, #0
   1c2de:	b2e5      	uxtb	r5, r4
   1c2e0:	1b53      	subs	r3, r2, r5
   1c2e2:	2b00      	cmp	r3, #0
   1c2e4:	dd03      	ble.n	1c2ee <uart_nrfx_fifo_fill+0x1e>
	       event_txdrdy_check()) {
   1c2e6:	f7ff fe13 	bl	1bf10 <event_txdrdy_check>
   1c2ea:	3401      	adds	r4, #1
	while ((len - num_tx > 0) &&
   1c2ec:	b918      	cbnz	r0, 1c2f6 <uart_nrfx_fifo_fill+0x26>
}
   1c2ee:	4628      	mov	r0, r5
   1c2f0:	b002      	add	sp, #8
   1c2f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c2f6:	2300      	movs	r3, #0
   1c2f8:	6033      	str	r3, [r6, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   1c2fa:	6830      	ldr	r0, [r6, #0]
   1c2fc:	9001      	str	r0, [sp, #4]
    (void)dummy;
   1c2fe:	9801      	ldr	r0, [sp, #4]
	uart_sw_event_txdrdy = 0U;
   1c300:	703b      	strb	r3, [r7, #0]
    p_reg->TXD = txd;
   1c302:	5d4b      	ldrb	r3, [r1, r5]
   1c304:	f8c8 351c 	str.w	r3, [r8, #1308]	; 0x51c
}
   1c308:	e7e9      	b.n	1c2de <uart_nrfx_fifo_fill+0xe>
   1c30a:	bf00      	nop
   1c30c:	4000211c 	.word	0x4000211c
   1c310:	20009c4c 	.word	0x20009c4c
   1c314:	40002000 	.word	0x40002000

0001c318 <uart_nrfx_init>:
    p_reg->OUTSET = set_mask;
   1c318:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrfx_init(struct device *dev)
{
   1c31c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    p_reg->PSEL.RXD = pselrxd;
   1c31e:	4d1c      	ldr	r5, [pc, #112]	; (1c390 <uart_nrfx_init+0x78>)
   1c320:	2240      	movs	r2, #64	; 0x40
   1c322:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1c326:	2103      	movs	r1, #3
   1c328:	2200      	movs	r2, #0
   1c32a:	2408      	movs	r4, #8
   1c32c:	f8c3 1718 	str.w	r1, [r3, #1816]	; 0x718
   1c330:	f8c3 2720 	str.w	r2, [r3, #1824]	; 0x720
   1c334:	f8c5 4514 	str.w	r4, [r5, #1300]	; 0x514
    p_reg->PSEL.TXD = pseltxd;
   1c338:	2406      	movs	r4, #6
   1c33a:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
    p_reg->OUTSET = set_mask;
   1c33e:	2420      	movs	r4, #32
   1c340:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1c344:	f8c3 1714 	str.w	r1, [r3, #1812]	; 0x714
   1c348:	f8c3 271c 	str.w	r2, [r3, #1820]	; 0x71c
    p_reg->PSEL.RTS = pselrts;
   1c34c:	2305      	movs	r3, #5
   1c34e:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   1c352:	2307      	movs	r3, #7
	}

	nrf_uart_hwfc_pins_set(uart0_addr, RTS_PIN, CTS_PIN);

	/* Set initial configuration */
	err = uart_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   1c354:	68c1      	ldr	r1, [r0, #12]
   1c356:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
   1c35a:	f7ff fe6f 	bl	1c03c <uart_nrfx_configure>
	if (err) {
   1c35e:	4604      	mov	r4, r0
   1c360:	b990      	cbnz	r0, 1c388 <uart_nrfx_init+0x70>
    p_reg->ENABLE = UART_ENABLE_ENABLE_Enabled;
   1c362:	2304      	movs	r3, #4
   1c364:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c368:	4b0a      	ldr	r3, [pc, #40]	; (1c394 <uart_nrfx_init+0x7c>)
   1c36a:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   1c36c:	681b      	ldr	r3, [r3, #0]
   1c36e:	9301      	str	r3, [sp, #4]
    (void)dummy;
   1c370:	9b01      	ldr	r3, [sp, #4]

#ifdef CONFIG_UART_0_INTERRUPT_DRIVEN
	/* Simulate that the TXDRDY event is set, so that the transmitter status
	 * is indicated correctly.
	 */
	uart_sw_event_txdrdy = 1U;
   1c372:	4b09      	ldr	r3, [pc, #36]	; (1c398 <uart_nrfx_init+0x80>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c374:	2101      	movs	r1, #1
   1c376:	6029      	str	r1, [r5, #0]
#endif

#if defined(CONFIG_UART_0_ASYNC) || defined(CONFIG_UART_0_INTERRUPT_DRIVEN)

	IRQ_CONNECT(IRQN,
   1c378:	4602      	mov	r2, r0
   1c37a:	2002      	movs	r0, #2
	uart_sw_event_txdrdy = 1U;
   1c37c:	7019      	strb	r1, [r3, #0]
	IRQ_CONNECT(IRQN,
   1c37e:	f7eb f8c1 	bl	7504 <z_arm_irq_priority_set>
		    IRQ_PRIO,
		    uart_nrfx_isr,
		    DEVICE_GET(uart_nrfx_uart0),
		    0);
	irq_enable(IRQN);
   1c382:	2002      	movs	r0, #2
   1c384:	f7eb f88c 	bl	74a0 <arch_irq_enable>
#if HW_FLOW_CONTROL_AVAILABLE
	k_delayed_work_init(&uart0_cb.tx_timeout_work, tx_timeout);
#endif
#endif
	return 0;
}
   1c388:	4620      	mov	r0, r4
   1c38a:	b003      	add	sp, #12
   1c38c:	bd30      	pop	{r4, r5, pc}
   1c38e:	bf00      	nop
   1c390:	40002000 	.word	0x40002000
   1c394:	40002108 	.word	0x40002108
   1c398:	20009c4c 	.word	0x20009c4c

0001c39c <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(struct device *dev,
				const struct uart_config *cfg)
{
   1c39c:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   1c39e:	794b      	ldrb	r3, [r1, #5]
   1c3a0:	2b01      	cmp	r3, #1
   1c3a2:	d029      	beq.n	1c3f8 <uarte_nrfx_configure+0x5c>
   1c3a4:	2b03      	cmp	r3, #3
   1c3a6:	d124      	bne.n	1c3f2 <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   1c3a8:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1c3aa:	798b      	ldrb	r3, [r1, #6]
   1c3ac:	2b03      	cmp	r3, #3
   1c3ae:	d120      	bne.n	1c3f2 <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   1c3b0:	79cc      	ldrb	r4, [r1, #7]
   1c3b2:	b124      	cbz	r4, 1c3be <uarte_nrfx_configure+0x22>
   1c3b4:	2c01      	cmp	r4, #1
   1c3b6:	d11c      	bne.n	1c3f2 <uarte_nrfx_configure+0x56>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
   1c3b8:	6843      	ldr	r3, [r0, #4]
   1c3ba:	791b      	ldrb	r3, [r3, #4]
   1c3bc:	b1cb      	cbz	r3, 1c3f2 <uarte_nrfx_configure+0x56>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   1c3be:	790a      	ldrb	r2, [r1, #4]
   1c3c0:	b112      	cbz	r2, 1c3c8 <uarte_nrfx_configure+0x2c>
   1c3c2:	2a02      	cmp	r2, #2
   1c3c4:	d115      	bne.n	1c3f2 <uarte_nrfx_configure+0x56>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   1c3c6:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1c3c8:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   1c3ca:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   1c3cc:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   1c3d0:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   1c3d2:	d064      	beq.n	1c49e <uarte_nrfx_configure+0x102>
   1c3d4:	d82d      	bhi.n	1c432 <uarte_nrfx_configure+0x96>
   1c3d6:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1c3da:	d063      	beq.n	1c4a4 <uarte_nrfx_configure+0x108>
   1c3dc:	d816      	bhi.n	1c40c <uarte_nrfx_configure+0x70>
   1c3de:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   1c3e2:	d061      	beq.n	1c4a8 <uarte_nrfx_configure+0x10c>
   1c3e4:	d80a      	bhi.n	1c3fc <uarte_nrfx_configure+0x60>
   1c3e6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1c3ea:	d060      	beq.n	1c4ae <uarte_nrfx_configure+0x112>
   1c3ec:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   1c3f0:	d060      	beq.n	1c4b4 <uarte_nrfx_configure+0x118>
   1c3f2:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1c3f6:	e051      	b.n	1c49c <uarte_nrfx_configure+0x100>
	switch (cfg->stop_bits) {
   1c3f8:	2600      	movs	r6, #0
   1c3fa:	e7d6      	b.n	1c3aa <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   1c3fc:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1c400:	d05b      	beq.n	1c4ba <uarte_nrfx_configure+0x11e>
   1c402:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   1c406:	d1f4      	bne.n	1c3f2 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   1c408:	4b36      	ldr	r3, [pc, #216]	; (1c4e4 <uarte_nrfx_configure+0x148>)
   1c40a:	e03c      	b.n	1c486 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1c40c:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   1c410:	d056      	beq.n	1c4c0 <uarte_nrfx_configure+0x124>
   1c412:	d807      	bhi.n	1c424 <uarte_nrfx_configure+0x88>
   1c414:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   1c418:	d054      	beq.n	1c4c4 <uarte_nrfx_configure+0x128>
   1c41a:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1c41e:	d1e8      	bne.n	1c3f2 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   1c420:	4b31      	ldr	r3, [pc, #196]	; (1c4e8 <uarte_nrfx_configure+0x14c>)
   1c422:	e030      	b.n	1c486 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1c424:	f647 2712 	movw	r7, #31250	; 0x7a12
   1c428:	42bb      	cmp	r3, r7
   1c42a:	d1e2      	bne.n	1c3f2 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   1c42c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1c430:	e029      	b.n	1c486 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1c432:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   1c436:	d047      	beq.n	1c4c8 <uarte_nrfx_configure+0x12c>
   1c438:	d813      	bhi.n	1c462 <uarte_nrfx_configure+0xc6>
   1c43a:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1c43e:	d046      	beq.n	1c4ce <uarte_nrfx_configure+0x132>
   1c440:	d809      	bhi.n	1c456 <uarte_nrfx_configure+0xba>
   1c442:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   1c446:	42bb      	cmp	r3, r7
   1c448:	d043      	beq.n	1c4d2 <uarte_nrfx_configure+0x136>
   1c44a:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1c44e:	d1d0      	bne.n	1c3f2 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   1c450:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   1c454:	e017      	b.n	1c486 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1c456:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   1c45a:	d1ca      	bne.n	1c3f2 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   1c45c:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   1c460:	e011      	b.n	1c486 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1c462:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   1c466:	d037      	beq.n	1c4d8 <uarte_nrfx_configure+0x13c>
   1c468:	d808      	bhi.n	1c47c <uarte_nrfx_configure+0xe0>
   1c46a:	4f20      	ldr	r7, [pc, #128]	; (1c4ec <uarte_nrfx_configure+0x150>)
   1c46c:	42bb      	cmp	r3, r7
   1c46e:	d036      	beq.n	1c4de <uarte_nrfx_configure+0x142>
   1c470:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   1c474:	d1bd      	bne.n	1c3f2 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   1c476:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   1c47a:	e004      	b.n	1c486 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1c47c:	4f1c      	ldr	r7, [pc, #112]	; (1c4f0 <uarte_nrfx_configure+0x154>)
   1c47e:	42bb      	cmp	r3, r7
   1c480:	d1b7      	bne.n	1c3f2 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   1c482:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1c486:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   1c48a:	68c3      	ldr	r3, [r0, #12]
   1c48c:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
   1c48e:	4334      	orrs	r4, r6
   1c490:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1c492:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   1c496:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   1c49a:	2000      	movs	r0, #0
}
   1c49c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   1c49e:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   1c4a2:	e7f0      	b.n	1c486 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   1c4a4:	4b13      	ldr	r3, [pc, #76]	; (1c4f4 <uarte_nrfx_configure+0x158>)
   1c4a6:	e7ee      	b.n	1c486 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   1c4a8:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1c4ac:	e7eb      	b.n	1c486 <uarte_nrfx_configure+0xea>
		nrf_baudrate = 0x00014000;
   1c4ae:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1c4b2:	e7e8      	b.n	1c486 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1c4b4:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   1c4b8:	e7e5      	b.n	1c486 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   1c4ba:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1c4be:	e7e2      	b.n	1c486 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   1c4c0:	4b0d      	ldr	r3, [pc, #52]	; (1c4f8 <uarte_nrfx_configure+0x15c>)
   1c4c2:	e7e0      	b.n	1c486 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   1c4c4:	4b0d      	ldr	r3, [pc, #52]	; (1c4fc <uarte_nrfx_configure+0x160>)
   1c4c6:	e7de      	b.n	1c486 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   1c4c8:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   1c4cc:	e7db      	b.n	1c486 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   1c4ce:	4b0c      	ldr	r3, [pc, #48]	; (1c500 <uarte_nrfx_configure+0x164>)
   1c4d0:	e7d9      	b.n	1c486 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   1c4d2:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1c4d6:	e7d6      	b.n	1c486 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   1c4d8:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1c4dc:	e7d3      	b.n	1c486 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   1c4de:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1c4e2:	e7d0      	b.n	1c486 <uarte_nrfx_configure+0xea>
   1c4e4:	0013b000 	.word	0x0013b000
   1c4e8:	004ea000 	.word	0x004ea000
   1c4ec:	0003d090 	.word	0x0003d090
   1c4f0:	000f4240 	.word	0x000f4240
   1c4f4:	00275000 	.word	0x00275000
   1c4f8:	0075c000 	.word	0x0075c000
   1c4fc:	003af000 	.word	0x003af000
   1c500:	013a9000 	.word	0x013a9000

0001c504 <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   1c504:	b570      	push	{r4, r5, r6, lr}
   1c506:	2200      	movs	r2, #0
   1c508:	4605      	mov	r5, r0
   1c50a:	2101      	movs	r1, #1
   1c50c:	2028      	movs	r0, #40	; 0x28
   1c50e:	f7ea fff9 	bl	7504 <z_arm_irq_priority_set>
   1c512:	2028      	movs	r0, #40	; 0x28
   1c514:	f7ea ffc4 	bl	74a0 <arch_irq_enable>
	return config->uarte_regs;
   1c518:	686b      	ldr	r3, [r5, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1c51a:	68ee      	ldr	r6, [r5, #12]
	return config->uarte_regs;
   1c51c:	681c      	ldr	r4, [r3, #0]
    p_reg->OUTSET = set_mask;
   1c51e:	4b1b      	ldr	r3, [pc, #108]	; (1c58c <uarte_1_init+0x88>)
   1c520:	2204      	movs	r2, #4
   1c522:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1c526:	2203      	movs	r2, #3
   1c528:	f8c3 2708 	str.w	r2, [r3, #1800]	; 0x708
   1c52c:	2200      	movs	r2, #0
   1c52e:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
    p_reg->PSEL.TXD = pseltxd;
   1c532:	2322      	movs	r3, #34	; 0x22
   1c534:	f8c4 350c 	str.w	r3, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   1c538:	2321      	movs	r3, #33	; 0x21
   1c53a:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
    p_reg->PSEL.RTS = pselrts;
   1c53e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c542:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   1c546:	4631      	mov	r1, r6
    p_reg->PSEL.CTS = pselcts;
   1c548:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
   1c54c:	4628      	mov	r0, r5
   1c54e:	f7ff ff25 	bl	1c39c <uarte_nrfx_configure>
	if (err) {
   1c552:	4602      	mov	r2, r0
   1c554:	b9b8      	cbnz	r0, 1c586 <uarte_1_init+0x82>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1c556:	2308      	movs	r3, #8
   1c558:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);
   1c55c:	f44f 7188 	mov.w	r1, #272	; 0x110
   1c560:	4620      	mov	r0, r4
   1c562:	f006 f962 	bl	2282a <nrf_uarte_event_clear>
		nrf_uarte_tx_buffer_set(uarte, data->int_driven->tx_buffer, 0);
   1c566:	68b1      	ldr	r1, [r6, #8]
		nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   1c568:	f106 0310 	add.w	r3, r6, #16

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1c56c:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1c570:	6889      	ldr	r1, [r1, #8]
    p_reg->RXD.MAXCNT = length;
   1c572:	2301      	movs	r3, #1
   1c574:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c578:	6023      	str	r3, [r4, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1c57a:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1c57e:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c582:	60a3      	str	r3, [r4, #8]
   1c584:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(1);
   1c586:	4610      	mov	r0, r2
   1c588:	bd70      	pop	{r4, r5, r6, pc}
   1c58a:	bf00      	nop
   1c58c:	50000300 	.word	0x50000300

0001c590 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   1c590:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c592:	4603      	mov	r3, r0
	uint32_t last  = rngp->last;
   1c594:	7884      	ldrb	r4, [r0, #2]
	uint32_t mask  = rngp->mask;
   1c596:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   1c598:	f04f 0520 	mov.w	r5, #32
   1c59c:	f3ef 8011 	mrs	r0, BASEPRI
   1c5a0:	f385 8811 	msr	BASEPRI, r5
   1c5a4:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   1c5a8:	781e      	ldrb	r6, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   1c5aa:	f893 e001 	ldrb.w	lr, [r3, #1]

	available = (last - first) & mask;
   1c5ae:	1ba4      	subs	r4, r4, r6
   1c5b0:	403c      	ands	r4, r7
	if (available < len) {
   1c5b2:	42a2      	cmp	r2, r4
		len = available;
   1c5b4:	bf88      	it	hi
   1c5b6:	b2a2      	uxthhi	r2, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   1c5b8:	eb06 0c02 	add.w	ip, r6, r2
   1c5bc:	ea07 0c0c 	and.w	ip, r7, ip
	first = rngp->first_alloc;
   1c5c0:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   1c5c2:	f883 c000 	strb.w	ip, [r3]
	__asm__ volatile(
   1c5c6:	f380 8811 	msr	BASEPRI, r0
   1c5ca:	f3bf 8f6f 	isb	sy
   1c5ce:	440a      	add	r2, r1
	uint8_t *dst   = buf;
   1c5d0:	4608      	mov	r0, r1
	irq_unlock(key);

	while (likely(len--)) {
   1c5d2:	4282      	cmp	r2, r0
   1c5d4:	d119      	bne.n	1c60a <rng_pool_get+0x7a>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   1c5d6:	4576      	cmp	r6, lr
   1c5d8:	d10d      	bne.n	1c5f6 <rng_pool_get+0x66>
	__asm__ volatile(
   1c5da:	f04f 0520 	mov.w	r5, #32
   1c5de:	f3ef 8211 	mrs	r2, BASEPRI
   1c5e2:	f385 8811 	msr	BASEPRI, r5
   1c5e6:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   1c5ea:	781d      	ldrb	r5, [r3, #0]
   1c5ec:	705d      	strb	r5, [r3, #1]
	__asm__ volatile(
   1c5ee:	f382 8811 	msr	BASEPRI, r2
   1c5f2:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   1c5f6:	1a41      	subs	r1, r0, r1
	available = available - len;
	if (available <= rngp->threshold) {
   1c5f8:	791b      	ldrb	r3, [r3, #4]
	len = dst - buf;
   1c5fa:	b288      	uxth	r0, r1
	available = available - len;
   1c5fc:	1a21      	subs	r1, r4, r0
	if (available <= rngp->threshold) {
   1c5fe:	428b      	cmp	r3, r1
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)rng_task);
}

NRF_STATIC_INLINE void nrf_rng_task_trigger(NRF_RNG_Type * p_reg, nrf_rng_task_t rng_task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1c600:	bf22      	ittt	cs
   1c602:	4b06      	ldrcs	r3, [pc, #24]	; (1c61c <rng_pool_get+0x8c>)
   1c604:	2201      	movcs	r2, #1
   1c606:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   1c608:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   1c60a:	eb03 0c05 	add.w	ip, r3, r5
		first = (first + 1) & mask;
   1c60e:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   1c610:	f89c c005 	ldrb.w	ip, [ip, #5]
   1c614:	f800 cb01 	strb.w	ip, [r0], #1
		first = (first + 1) & mask;
   1c618:	403d      	ands	r5, r7
   1c61a:	e7da      	b.n	1c5d2 <rng_pool_get+0x42>
   1c61c:	4000d000 	.word	0x4000d000

0001c620 <entropy_nrf5_get_entropy>:
		k_sem_give(&entropy_nrf5_data.sem_sync);
	}
}

static int entropy_nrf5_get_entropy(struct device *device, uint8_t *buf, uint16_t len)
{
   1c620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_sem_take(sem, timeout);
   1c624:	4f13      	ldr	r7, [pc, #76]	; (1c674 <entropy_nrf5_get_entropy+0x54>)
   1c626:	460d      	mov	r5, r1
   1c628:	4614      	mov	r4, r2

	while (len) {
		uint16_t bytes;

		k_sem_take(&entropy_nrf5_data.sem_lock, K_FOREVER);
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1c62a:	f107 0845 	add.w	r8, r7, #69	; 0x45
   1c62e:	f107 0918 	add.w	r9, r7, #24
	while (len) {
   1c632:	b914      	cbnz	r4, 1c63a <entropy_nrf5_get_entropy+0x1a>
		len -= bytes;
		buf += bytes;
	}

	return 0;
}
   1c634:	4620      	mov	r0, r4
   1c636:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1c63a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c63e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1c642:	4638      	mov	r0, r7
   1c644:	f001 f8be 	bl	1d7c4 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1c648:	4622      	mov	r2, r4
   1c64a:	4629      	mov	r1, r5
   1c64c:	4640      	mov	r0, r8
   1c64e:	f7ff ff9f 	bl	1c590 <rng_pool_get>
   1c652:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   1c654:	4638      	mov	r0, r7
   1c656:	f001 f88f 	bl	1d778 <z_impl_k_sem_give>
		if (bytes == 0U) {
   1c65a:	b93e      	cbnz	r6, 1c66c <entropy_nrf5_get_entropy+0x4c>
	return z_impl_k_sem_take(sem, timeout);
   1c65c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1c660:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c664:	4648      	mov	r0, r9
   1c666:	f001 f8ad 	bl	1d7c4 <z_impl_k_sem_take>
			continue;
   1c66a:	e7e2      	b.n	1c632 <entropy_nrf5_get_entropy+0x12>
		len -= bytes;
   1c66c:	1ba4      	subs	r4, r4, r6
   1c66e:	b2a4      	uxth	r4, r4
		buf += bytes;
   1c670:	4435      	add	r5, r6
   1c672:	e7de      	b.n	1c632 <entropy_nrf5_get_entropy+0x12>
   1c674:	20008cac 	.word	0x20008cac

0001c678 <random_byte_get>:
{
   1c678:	b082      	sub	sp, #8
	__asm__ volatile(
   1c67a:	f04f 0320 	mov.w	r3, #32
   1c67e:	f3ef 8211 	mrs	r2, BASEPRI
   1c682:	f383 8811 	msr	BASEPRI, r3
   1c686:	f3bf 8f6f 	isb	sy
#endif
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1c68a:	4b0a      	ldr	r3, [pc, #40]	; (1c6b4 <random_byte_get+0x3c>)
   1c68c:	6819      	ldr	r1, [r3, #0]
	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   1c68e:	b171      	cbz	r1, 1c6ae <random_byte_get+0x36>
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   1c690:	4909      	ldr	r1, [pc, #36]	; (1c6b8 <random_byte_get+0x40>)
   1c692:	f8d1 0508 	ldr.w	r0, [r1, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1c696:	2100      	movs	r1, #0
   1c698:	6019      	str	r1, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1c69a:	681b      	ldr	r3, [r3, #0]
   1c69c:	9301      	str	r3, [sp, #4]
    (void)dummy;
   1c69e:	9b01      	ldr	r3, [sp, #4]
		retval = nrf_rng_random_value_get(NRF_RNG);
   1c6a0:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   1c6a2:	f382 8811 	msr	BASEPRI, r2
   1c6a6:	f3bf 8f6f 	isb	sy
}
   1c6aa:	b002      	add	sp, #8
   1c6ac:	4770      	bx	lr
	int retval = -EAGAIN;
   1c6ae:	f06f 000a 	mvn.w	r0, #10
   1c6b2:	e7f6      	b.n	1c6a2 <random_byte_get+0x2a>
   1c6b4:	4000d100 	.word	0x4000d100
   1c6b8:	4000d000 	.word	0x4000d000

0001c6bc <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1c6bc:	43db      	mvns	r3, r3
{
   1c6be:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1c6c2:	f013 0501 	ands.w	r5, r3, #1
{
   1c6c6:	460e      	mov	r6, r1
   1c6c8:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1c6ca:	d005      	beq.n	1c6d8 <entropy_nrf5_get_entropy_isr+0x1c>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   1c6cc:	4822      	ldr	r0, [pc, #136]	; (1c758 <entropy_nrf5_get_entropy_isr+0x9c>)
   1c6ce:	f7ff ff5f 	bl	1c590 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   1c6d2:	b002      	add	sp, #8
   1c6d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   1c6d8:	2a00      	cmp	r2, #0
   1c6da:	d035      	beq.n	1c748 <entropy_nrf5_get_entropy_isr+0x8c>
	__asm__ volatile(
   1c6dc:	f04f 0320 	mov.w	r3, #32
   1c6e0:	f3ef 8811 	mrs	r8, BASEPRI
   1c6e4:	f383 8811 	msr	BASEPRI, r3
   1c6e8:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   1c6ec:	200d      	movs	r0, #13
   1c6ee:	f7ea fefb 	bl	74e8 <arch_irq_is_enabled>
   1c6f2:	4607      	mov	r7, r0
		irq_disable(IRQN);
   1c6f4:	200d      	movs	r0, #13
   1c6f6:	f7ea fee3 	bl	74c0 <arch_irq_disable>
	__asm__ volatile(
   1c6fa:	f388 8811 	msr	BASEPRI, r8
   1c6fe:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1c702:	4a16      	ldr	r2, [pc, #88]	; (1c75c <entropy_nrf5_get_entropy_isr+0xa0>)
   1c704:	6015      	str	r5, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1c706:	6813      	ldr	r3, [r2, #0]
   1c708:	9301      	str	r3, [sp, #4]
    (void)dummy;
   1c70a:	9b01      	ldr	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1c70c:	4b14      	ldr	r3, [pc, #80]	; (1c760 <entropy_nrf5_get_entropy_isr+0xa4>)
   1c70e:	2101      	movs	r1, #1
   1c710:	6019      	str	r1, [r3, #0]
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1c712:	4914      	ldr	r1, [pc, #80]	; (1c764 <entropy_nrf5_get_entropy_isr+0xa8>)
   1c714:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   1c718:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
   1c71c:	4625      	mov	r5, r4
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1c71e:	4691      	mov	r9, r2
   1c720:	468a      	mov	sl, r1
   1c722:	4698      	mov	r8, r3
   1c724:	f8d9 3000 	ldr.w	r3, [r9]
			while (!nrf_rng_event_check(NRF_RNG,
   1c728:	b183      	cbz	r3, 1c74c <entropy_nrf5_get_entropy_isr+0x90>
			byte = random_byte_get();
   1c72a:	f7ff ffa5 	bl	1c678 <random_byte_get>
			if (byte < 0) {
   1c72e:	1e03      	subs	r3, r0, #0
   1c730:	f8ca 8180 	str.w	r8, [sl, #384]	; 0x180
   1c734:	dbf6      	blt.n	1c724 <entropy_nrf5_get_entropy_isr+0x68>
   1c736:	3d01      	subs	r5, #1
   1c738:	b2ad      	uxth	r5, r5
			buf[--len] = byte;
   1c73a:	5573      	strb	r3, [r6, r5]
		} while (len);
   1c73c:	2d00      	cmp	r5, #0
   1c73e:	d1f1      	bne.n	1c724 <entropy_nrf5_get_entropy_isr+0x68>
		if (irq_enabled) {
   1c740:	b117      	cbz	r7, 1c748 <entropy_nrf5_get_entropy_isr+0x8c>
			irq_enable(IRQN);
   1c742:	200d      	movs	r0, #13
   1c744:	f7ea feac 	bl	74a0 <arch_irq_enable>
	return cnt;
   1c748:	4620      	mov	r0, r4
   1c74a:	e7c2      	b.n	1c6d2 <entropy_nrf5_get_entropy_isr+0x16>
  __ASM volatile ("dsb 0xF":::"memory");
   1c74c:	f3bf 8f4f 	dsb	sy
				__WFE();
   1c750:	bf20      	wfe
				__SEV();
   1c752:	bf40      	sev
				__WFE();
   1c754:	bf20      	wfe
   1c756:	e7e5      	b.n	1c724 <entropy_nrf5_get_entropy_isr+0x68>
   1c758:	20008cdc 	.word	0x20008cdc
   1c75c:	4000d100 	.word	0x4000d100
   1c760:	4000d000 	.word	0x4000d000
   1c764:	e000e100 	.word	0xe000e100

0001c768 <entropy_nrf5_init>:
		    entropy_nrf5_init, &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(struct device *device)
{
   1c768:	b537      	push	{r0, r1, r2, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1c76a:	4c1a      	ldr	r4, [pc, #104]	; (1c7d4 <entropy_nrf5_init+0x6c>)
   1c76c:	2201      	movs	r2, #1
   1c76e:	4611      	mov	r1, r2
   1c770:	4620      	mov	r0, r4
   1c772:	f006 fc3e 	bl	22ff2 <z_impl_k_sem_init>
   1c776:	2201      	movs	r2, #1
   1c778:	2100      	movs	r1, #0
   1c77a:	f104 0018 	add.w	r0, r4, #24
   1c77e:	f006 fc38 	bl	22ff2 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   1c782:	f240 4307 	movw	r3, #1031	; 0x407
   1c786:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   1c78a:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1c78e:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   1c790:	230c      	movs	r3, #12
   1c792:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   1c796:	2500      	movs	r5, #0
}

NRF_STATIC_INLINE void nrf_rng_error_correction_enable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   1c798:	4b0f      	ldr	r3, [pc, #60]	; (1c7d8 <entropy_nrf5_init+0x70>)
   1c79a:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   1c79e:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   1c7a2:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   1c7a6:	f042 0201 	orr.w	r2, r2, #1
   1c7aa:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1c7ae:	4a0b      	ldr	r2, [pc, #44]	; (1c7dc <entropy_nrf5_init+0x74>)
   1c7b0:	6015      	str	r5, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1c7b2:	6812      	ldr	r2, [r2, #0]
   1c7b4:	9201      	str	r2, [sp, #4]
    p_reg->INTENSET = mask;
   1c7b6:	2101      	movs	r1, #1
    (void)dummy;
   1c7b8:	9a01      	ldr	r2, [sp, #4]
    p_reg->INTENSET = mask;
   1c7ba:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   1c7be:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1c7c0:	6019      	str	r1, [r3, #0]
   1c7c2:	200d      	movs	r0, #13
   1c7c4:	f7ea fe9e 	bl	7504 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   1c7c8:	200d      	movs	r0, #13
   1c7ca:	f7ea fe69 	bl	74a0 <arch_irq_enable>

	return 0;
}
   1c7ce:	4628      	mov	r0, r5
   1c7d0:	b003      	add	sp, #12
   1c7d2:	bd30      	pop	{r4, r5, pc}
   1c7d4:	20008cac 	.word	0x20008cac
   1c7d8:	4000d000 	.word	0x4000d000
   1c7dc:	4000d100 	.word	0x4000d100

0001c7e0 <isr>:
{
   1c7e0:	b510      	push	{r4, lr}
	byte = random_byte_get();
   1c7e2:	f7ff ff49 	bl	1c678 <random_byte_get>
	if (byte < 0) {
   1c7e6:	2800      	cmp	r0, #0
   1c7e8:	db20      	blt.n	1c82c <isr+0x4c>
	uint8_t last  = rngp->last;
   1c7ea:	4b17      	ldr	r3, [pc, #92]	; (1c848 <isr+0x68>)
   1c7ec:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   1c7f0:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   1c7f4:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   1c7f8:	1a51      	subs	r1, r2, r1
   1c7fa:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   1c7fe:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   1c800:	d10d      	bne.n	1c81e <isr+0x3e>
	uint8_t last  = rngp->last;
   1c802:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   1c806:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   1c80a:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   1c80e:	1a51      	subs	r1, r2, r1
   1c810:	ea34 0101 	bics.w	r1, r4, r1
   1c814:	d10b      	bne.n	1c82e <isr+0x4e>
   1c816:	4b0d      	ldr	r3, [pc, #52]	; (1c84c <isr+0x6c>)
   1c818:	2201      	movs	r2, #1
   1c81a:	601a      	str	r2, [r3, #0]
}
   1c81c:	e00e      	b.n	1c83c <isr+0x5c>
	rngp->buffer[last] = byte;
   1c81e:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   1c820:	3201      	adds	r2, #1
   1c822:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   1c824:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   1c828:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   1c82c:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   1c82e:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   1c830:	3201      	adds	r2, #1
   1c832:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   1c834:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   1c838:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   1c83c:	4804      	ldr	r0, [pc, #16]	; (1c850 <isr+0x70>)
}
   1c83e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1c842:	f000 bf99 	b.w	1d778 <z_impl_k_sem_give>
   1c846:	bf00      	nop
   1c848:	20008cac 	.word	0x20008cac
   1c84c:	4000d004 	.word	0x4000d004
   1c850:	20008cc4 	.word	0x20008cc4

0001c854 <nrf52_errata_136>:
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   1c854:	4b0a      	ldr	r3, [pc, #40]	; (1c880 <nrf52_errata_136+0x2c>)
   1c856:	681b      	ldr	r3, [r3, #0]
   1c858:	1c5a      	adds	r2, r3, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1c85a:	bf05      	ittet	eq
   1c85c:	4b09      	ldreq	r3, [pc, #36]	; (1c884 <nrf52_errata_136+0x30>)
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   1c85e:	4a0a      	ldreq	r2, [pc, #40]	; (1c888 <nrf52_errata_136+0x34>)
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
   1c860:	4a0a      	ldrne	r2, [pc, #40]	; (1c88c <nrf52_errata_136+0x38>)
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   1c862:	6810      	ldreq	r0, [r2, #0]
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1c864:	bf0a      	itet	eq
   1c866:	781b      	ldrbeq	r3, [r3, #0]
                var2 = *(uint32_t *)0x10000134ul;
   1c868:	6810      	ldrne	r0, [r2, #0]
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   1c86a:	f3c0 1003 	ubfxeq	r0, r0, #4, #4
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1c86e:	2b08      	cmp	r3, #8
   1c870:	d104      	bne.n	1c87c <nrf52_errata_136+0x28>
            {
                switch(var2)
   1c872:	2803      	cmp	r0, #3
   1c874:	bf8c      	ite	hi
   1c876:	2000      	movhi	r0, #0
   1c878:	2001      	movls	r0, #1
   1c87a:	4770      	bx	lr
                    case 0x01ul:
                        return true;
                }
            }
        #endif
        return false;
   1c87c:	2000      	movs	r0, #0
    #endif
}
   1c87e:	4770      	bx	lr
   1c880:	10000130 	.word	0x10000130
   1c884:	f0000fe0 	.word	0xf0000fe0
   1c888:	f0000fe8 	.word	0xf0000fe8
   1c88c:	10000134 	.word	0x10000134

0001c890 <nrf52_errata_103>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1c890:	4b06      	ldr	r3, [pc, #24]	; (1c8ac <nrf52_errata_103+0x1c>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1c892:	681b      	ldr	r3, [r3, #0]
   1c894:	2b08      	cmp	r3, #8
   1c896:	d106      	bne.n	1c8a6 <nrf52_errata_103+0x16>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1c898:	4b05      	ldr	r3, [pc, #20]	; (1c8b0 <nrf52_errata_103+0x20>)
   1c89a:	681b      	ldr	r3, [r3, #0]
            {
                switch(var2)
   1c89c:	2b03      	cmp	r3, #3
   1c89e:	d802      	bhi.n	1c8a6 <nrf52_errata_103+0x16>
   1c8a0:	4a04      	ldr	r2, [pc, #16]	; (1c8b4 <nrf52_errata_103+0x24>)
   1c8a2:	5cd0      	ldrb	r0, [r2, r3]
   1c8a4:	4770      	bx	lr
                    case 0x03ul:
                        return false;
                }
            }
        #endif
        return false;
   1c8a6:	2000      	movs	r0, #0
    #endif
}
   1c8a8:	4770      	bx	lr
   1c8aa:	bf00      	nop
   1c8ac:	10000130 	.word	0x10000130
   1c8b0:	10000134 	.word	0x10000134
   1c8b4:	00026d55 	.word	0x00026d55

0001c8b8 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   1c8b8:	b508      	push	{r3, lr}
        NRF_P1->PIN_CNF[9]  = (GPIO_PIN_CNF_DRIVE_H0H1 << GPIO_PIN_CNF_DRIVE_Pos) | (GPIO_PIN_CNF_INPUT_Connect << GPIO_PIN_CNF_INPUT_Pos) | (GPIO_PIN_CNF_DIR_Output << GPIO_PIN_CNF_DIR_Pos);
    #endif
    
    /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_36()){
   1c8ba:	f7ff ffcb 	bl	1c854 <nrf52_errata_136>
   1c8be:	b140      	cbz	r0, 1c8d2 <SystemInit+0x1a>
        NRF_CLOCK->EVENTS_DONE = 0;
   1c8c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1c8c4:	2200      	movs	r2, #0
   1c8c6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
   1c8ca:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
   1c8ce:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    }
    
    /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_66()){
   1c8d2:	f7ff ffbf 	bl	1c854 <nrf52_errata_136>
   1c8d6:	2800      	cmp	r0, #0
   1c8d8:	d046      	beq.n	1c968 <SystemInit+0xb0>
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   1c8da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1c8de:	4b58      	ldr	r3, [pc, #352]	; (1ca40 <SystemInit+0x188>)
   1c8e0:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   1c8e4:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   1c8e8:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   1c8ec:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   1c8f0:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   1c8f4:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   1c8f8:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   1c8fc:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   1c900:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   1c904:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   1c908:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   1c90c:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   1c910:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   1c914:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   1c918:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   1c91c:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   1c920:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   1c924:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   1c928:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   1c92c:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   1c930:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   1c934:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   1c938:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   1c93c:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   1c940:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   1c944:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   1c948:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   1c94c:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   1c950:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   1c954:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   1c958:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   1c95c:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   1c960:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   1c964:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    }
    
    /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_98()){
   1c968:	f7ff ff92 	bl	1c890 <nrf52_errata_103>
   1c96c:	b110      	cbz	r0, 1c974 <SystemInit+0xbc>
        *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   1c96e:	4b35      	ldr	r3, [pc, #212]	; (1ca44 <SystemInit+0x18c>)
   1c970:	4a35      	ldr	r2, [pc, #212]	; (1ca48 <SystemInit+0x190>)
   1c972:	601a      	str	r2, [r3, #0]
    }
    
    /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_103()){
   1c974:	f7ff ff8c 	bl	1c890 <nrf52_errata_103>
   1c978:	b118      	cbz	r0, 1c982 <SystemInit+0xca>
        NRF_CCM->MAXPACKETSIZE = 0xFBul;
   1c97a:	4b34      	ldr	r3, [pc, #208]	; (1ca4c <SystemInit+0x194>)
   1c97c:	22fb      	movs	r2, #251	; 0xfb
   1c97e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    }
    
    /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_115()){
   1c982:	f7ff ff85 	bl	1c890 <nrf52_errata_103>
   1c986:	b148      	cbz	r0, 1c99c <SystemInit+0xe4>
        *(volatile uint32_t *)0x40000EE4ul = (*(volatile uint32_t *)0x40000EE4ul & 0xFFFFFFF0ul) | (*(uint32_t *)0x10000258ul & 0x0000000Ful);
   1c988:	4931      	ldr	r1, [pc, #196]	; (1ca50 <SystemInit+0x198>)
   1c98a:	4b32      	ldr	r3, [pc, #200]	; (1ca54 <SystemInit+0x19c>)
   1c98c:	680a      	ldr	r2, [r1, #0]
   1c98e:	681b      	ldr	r3, [r3, #0]
   1c990:	f022 020f 	bic.w	r2, r2, #15
   1c994:	f003 030f 	and.w	r3, r3, #15
   1c998:	4313      	orrs	r3, r2
   1c99a:	600b      	str	r3, [r1, #0]
    }
    
    /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_120()){
   1c99c:	f7ff ff78 	bl	1c890 <nrf52_errata_103>
   1c9a0:	b118      	cbz	r0, 1c9aa <SystemInit+0xf2>
        *(volatile uint32_t *)0x40029640ul = 0x200ul;
   1c9a2:	4b2d      	ldr	r3, [pc, #180]	; (1ca58 <SystemInit+0x1a0>)
   1c9a4:	f44f 7200 	mov.w	r2, #512	; 0x200
   1c9a8:	601a      	str	r2, [r3, #0]
    }
    
    /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_136()){
   1c9aa:	f7ff ff53 	bl	1c854 <nrf52_errata_136>
   1c9ae:	b148      	cbz	r0, 1c9c4 <SystemInit+0x10c>
        if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   1c9b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1c9b4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   1c9b8:	07d2      	lsls	r2, r2, #31
            NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   1c9ba:	bf44      	itt	mi
   1c9bc:	f06f 0201 	mvnmi.w	r2, #1
   1c9c0:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1c9c4:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1c9c8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   1c9cc:	2a00      	cmp	r2, #0
   1c9ce:	db03      	blt.n	1c9d8 <SystemInit+0x120>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   1c9d0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1c9d4:	2b00      	cmp	r3, #0
   1c9d6:	da2f      	bge.n	1ca38 <SystemInit+0x180>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
   1c9d8:	4b20      	ldr	r3, [pc, #128]	; (1ca5c <SystemInit+0x1a4>)
   1c9da:	2201      	movs	r2, #1
   1c9dc:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   1c9e0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   1c9e4:	2a00      	cmp	r2, #0
   1c9e6:	d0fb      	beq.n	1c9e0 <SystemInit+0x128>
            NRF_UICR->PSELRESET[0] = 18;
   1c9e8:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
   1c9ec:	2112      	movs	r1, #18
   1c9ee:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   1c9f2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   1c9f6:	2a00      	cmp	r2, #0
   1c9f8:	d0fb      	beq.n	1c9f2 <SystemInit+0x13a>
            NRF_UICR->PSELRESET[1] = 18;
   1c9fa:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1c9fe:	2212      	movs	r2, #18
   1ca00:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   1ca04:	4b15      	ldr	r3, [pc, #84]	; (1ca5c <SystemInit+0x1a4>)
   1ca06:	461a      	mov	r2, r3
   1ca08:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
   1ca0c:	2900      	cmp	r1, #0
   1ca0e:	d0fb      	beq.n	1ca08 <SystemInit+0x150>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
   1ca10:	2100      	movs	r1, #0
   1ca12:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   1ca16:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   1ca1a:	2b00      	cmp	r3, #0
   1ca1c:	d0fb      	beq.n	1ca16 <SystemInit+0x15e>
   1ca1e:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1ca22:	490f      	ldr	r1, [pc, #60]	; (1ca60 <SystemInit+0x1a8>)
   1ca24:	4b0f      	ldr	r3, [pc, #60]	; (1ca64 <SystemInit+0x1ac>)
   1ca26:	68ca      	ldr	r2, [r1, #12]
   1ca28:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1ca2c:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1ca2e:	60cb      	str	r3, [r1, #12]
   1ca30:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   1ca34:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   1ca36:	e7fd      	b.n	1ca34 <SystemInit+0x17c>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   1ca38:	4b0b      	ldr	r3, [pc, #44]	; (1ca68 <SystemInit+0x1b0>)
   1ca3a:	4a0c      	ldr	r2, [pc, #48]	; (1ca6c <SystemInit+0x1b4>)
   1ca3c:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   1ca3e:	bd08      	pop	{r3, pc}
   1ca40:	4000c000 	.word	0x4000c000
   1ca44:	4000568c 	.word	0x4000568c
   1ca48:	00038148 	.word	0x00038148
   1ca4c:	4000f000 	.word	0x4000f000
   1ca50:	40000ee4 	.word	0x40000ee4
   1ca54:	10000258 	.word	0x10000258
   1ca58:	40029640 	.word	0x40029640
   1ca5c:	4001e000 	.word	0x4001e000
   1ca60:	e000ed00 	.word	0xe000ed00
   1ca64:	05fa0004 	.word	0x05fa0004
   1ca68:	200006a4 	.word	0x200006a4
   1ca6c:	03d09000 	.word	0x03d09000

0001ca70 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
   1ca70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1ca72:	4b09      	ldr	r3, [pc, #36]	; (1ca98 <z_sys_init_run_level+0x28>)
   1ca74:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1ca78:	3001      	adds	r0, #1
			if (dev) {
				/* Initialization failed. Clear the API struct
				 * so that device_get_binding() will not succeed
				 * for it.
				 */
				dev->driver_api = NULL;
   1ca7a:	2700      	movs	r7, #0
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1ca7c:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   1ca80:	42a6      	cmp	r6, r4
   1ca82:	d800      	bhi.n	1ca86 <z_sys_init_run_level+0x16>
			}
		}
	}
}
   1ca84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		retval = entry->init(dev);
   1ca86:	e9d4 3500 	ldrd	r3, r5, [r4]
   1ca8a:	4628      	mov	r0, r5
   1ca8c:	4798      	blx	r3
		if (retval != 0) {
   1ca8e:	b108      	cbz	r0, 1ca94 <z_sys_init_run_level+0x24>
			if (dev) {
   1ca90:	b105      	cbz	r5, 1ca94 <z_sys_init_run_level+0x24>
				dev->driver_api = NULL;
   1ca92:	60af      	str	r7, [r5, #8]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1ca94:	3408      	adds	r4, #8
   1ca96:	e7f3      	b.n	1ca80 <z_sys_init_run_level+0x10>
   1ca98:	00024e18 	.word	0x00024e18

0001ca9c <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
   1ca9c:	4b0f      	ldr	r3, [pc, #60]	; (1cadc <z_impl_device_get_binding+0x40>)
{
   1ca9e:	b570      	push	{r4, r5, r6, lr}
	for (dev = __device_start; dev != __device_end; dev++) {
   1caa0:	4c0f      	ldr	r4, [pc, #60]	; (1cae0 <z_impl_device_get_binding+0x44>)
{
   1caa2:	4605      	mov	r5, r0
   1caa4:	461e      	mov	r6, r3
	for (dev = __device_start; dev != __device_end; dev++) {
   1caa6:	429c      	cmp	r4, r3
   1caa8:	d104      	bne.n	1cab4 <z_impl_device_get_binding+0x18>
		if (z_device_ready(dev) && (dev->name == name)) {
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
   1caaa:	4c0d      	ldr	r4, [pc, #52]	; (1cae0 <z_impl_device_get_binding+0x44>)
   1caac:	42b4      	cmp	r4, r6
   1caae:	d108      	bne.n	1cac2 <z_impl_device_get_binding+0x26>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
			return dev;
		}
	}

	return NULL;
   1cab0:	2400      	movs	r4, #0
   1cab2:	e010      	b.n	1cad6 <z_impl_device_get_binding+0x3a>
		if (z_device_ready(dev) && (dev->name == name)) {
   1cab4:	68a2      	ldr	r2, [r4, #8]
   1cab6:	b112      	cbz	r2, 1cabe <z_impl_device_get_binding+0x22>
   1cab8:	6822      	ldr	r2, [r4, #0]
   1caba:	42aa      	cmp	r2, r5
   1cabc:	d00b      	beq.n	1cad6 <z_impl_device_get_binding+0x3a>
	for (dev = __device_start; dev != __device_end; dev++) {
   1cabe:	3410      	adds	r4, #16
   1cac0:	e7f1      	b.n	1caa6 <z_impl_device_get_binding+0xa>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1cac2:	68a3      	ldr	r3, [r4, #8]
   1cac4:	b90b      	cbnz	r3, 1caca <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
   1cac6:	3410      	adds	r4, #16
   1cac8:	e7f0      	b.n	1caac <z_impl_device_get_binding+0x10>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1caca:	6821      	ldr	r1, [r4, #0]
   1cacc:	4628      	mov	r0, r5
   1cace:	f003 f9b6 	bl	1fe3e <strcmp>
   1cad2:	2800      	cmp	r0, #0
   1cad4:	d1f7      	bne.n	1cac6 <z_impl_device_get_binding+0x2a>
}
   1cad6:	4620      	mov	r0, r4
   1cad8:	bd70      	pop	{r4, r5, r6, pc}
   1cada:	bf00      	nop
   1cadc:	20000798 	.word	0x20000798
   1cae0:	20000728 	.word	0x20000728

0001cae4 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
   1cae4:	b510      	push	{r4, lr}
   1cae6:	4604      	mov	r4, r0
	z_impl_log_panic();
   1cae8:	f7e9 fda6 	bl	6638 <z_impl_log_panic>
   1caec:	4b06      	ldr	r3, [pc, #24]	; (1cb08 <k_sys_fatal_error_handler+0x24>)
   1caee:	4907      	ldr	r1, [pc, #28]	; (1cb0c <k_sys_fatal_error_handler+0x28>)
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
   1caf0:	4807      	ldr	r0, [pc, #28]	; (1cb10 <k_sys_fatal_error_handler+0x2c>)
   1caf2:	1ac9      	subs	r1, r1, r3
   1caf4:	08c9      	lsrs	r1, r1, #3
   1caf6:	0189      	lsls	r1, r1, #6
   1caf8:	f041 0101 	orr.w	r1, r1, #1
   1cafc:	f001 fce9 	bl	1e4d2 <log_0>
	arch_system_halt(reason);
   1cb00:	4620      	mov	r0, r4
   1cb02:	f005 ffc3 	bl	22a8c <arch_system_halt>
   1cb06:	bf00      	nop
   1cb08:	000236f0 	.word	0x000236f0
   1cb0c:	00023800 	.word	0x00023800
   1cb10:	00026d59 	.word	0x00026d59

0001cb14 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1cb14:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1cb18:	4605      	mov	r5, r0
   1cb1a:	460f      	mov	r7, r1
	__asm__ volatile(
   1cb1c:	f04f 0320 	mov.w	r3, #32
   1cb20:	f3ef 8811 	mrs	r8, BASEPRI
   1cb24:	f383 8811 	msr	BASEPRI, r3
   1cb28:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   1cb2c:	f000 fe1e 	bl	1d76c <z_impl_k_current_get>
   1cb30:	4c21      	ldr	r4, [pc, #132]	; (1cbb8 <z_fatal_error+0xa4>)
   1cb32:	4b22      	ldr	r3, [pc, #136]	; (1cbbc <z_fatal_error+0xa8>)
   1cb34:	1ae4      	subs	r4, r4, r3
   1cb36:	2d04      	cmp	r5, #4
   1cb38:	ea4f 04d4 	mov.w	r4, r4, lsr #3
   1cb3c:	bf96      	itet	ls
   1cb3e:	4a20      	ldrls	r2, [pc, #128]	; (1cbc0 <z_fatal_error+0xac>)
	struct k_thread *thread = k_current_get();

	/* sanitycheck looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating sanitycheck
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   1cb40:	4a20      	ldrhi	r2, [pc, #128]	; (1cbc4 <z_fatal_error+0xb0>)
   1cb42:	f852 2025 	ldrls.w	r2, [r2, r5, lsl #2]
   1cb46:	01a4      	lsls	r4, r4, #6
   1cb48:	f044 0301 	orr.w	r3, r4, #1
   1cb4c:	4606      	mov	r6, r0
   1cb4e:	f8ad 3000 	strh.w	r3, [sp]
   1cb52:	481d      	ldr	r0, [pc, #116]	; (1cbc8 <z_fatal_error+0xb4>)
   1cb54:	2300      	movs	r3, #0
   1cb56:	4629      	mov	r1, r5
   1cb58:	f001 fcf5 	bl	1e546 <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   1cb5c:	b147      	cbz	r7, 1cb70 <z_fatal_error+0x5c>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   1cb5e:	69fb      	ldr	r3, [r7, #28]
   1cb60:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1cb64:	b123      	cbz	r3, 1cb70 <z_fatal_error+0x5c>
		LOG_ERR("Fault during interrupt handling\n");
   1cb66:	4819      	ldr	r0, [pc, #100]	; (1cbcc <z_fatal_error+0xb8>)
   1cb68:	f044 0101 	orr.w	r1, r4, #1
   1cb6c:	f001 fcb1 	bl	1e4d2 <log_0>
	const char *thread_name = k_thread_name_get(thread);
   1cb70:	4630      	mov	r0, r6
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   1cb72:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = k_thread_name_get(thread);
   1cb76:	f006 fa57 	bl	23028 <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
   1cb7a:	b1d0      	cbz	r0, 1cbb2 <z_fatal_error+0x9e>
   1cb7c:	7802      	ldrb	r2, [r0, #0]
		thread_name = "unknown";
   1cb7e:	4b14      	ldr	r3, [pc, #80]	; (1cbd0 <z_fatal_error+0xbc>)
   1cb80:	2a00      	cmp	r2, #0
   1cb82:	bf08      	it	eq
   1cb84:	4618      	moveq	r0, r3
	LOG_ERR("Current thread: %p (%s)", thread,
   1cb86:	f7e9 fbd5 	bl	6334 <log_strdup>
   1cb8a:	4623      	mov	r3, r4
   1cb8c:	4602      	mov	r2, r0
   1cb8e:	4631      	mov	r1, r6
   1cb90:	4810      	ldr	r0, [pc, #64]	; (1cbd4 <z_fatal_error+0xc0>)
   1cb92:	f001 fcbf 	bl	1e514 <log_2>
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
   1cb96:	4639      	mov	r1, r7
   1cb98:	4628      	mov	r0, r5
   1cb9a:	f7ff ffa3 	bl	1cae4 <k_sys_fatal_error_handler>
	__asm__ volatile(
   1cb9e:	f388 8811 	msr	BASEPRI, r8
   1cba2:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   1cba6:	4630      	mov	r0, r6
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
   1cba8:	b002      	add	sp, #8
   1cbaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1cbae:	f7ea bfeb 	b.w	7b88 <z_impl_k_thread_abort>
		thread_name = "unknown";
   1cbb2:	4807      	ldr	r0, [pc, #28]	; (1cbd0 <z_fatal_error+0xbc>)
   1cbb4:	e7e7      	b.n	1cb86 <z_fatal_error+0x72>
   1cbb6:	bf00      	nop
   1cbb8:	00023800 	.word	0x00023800
   1cbbc:	000236f0 	.word	0x000236f0
   1cbc0:	00024e30 	.word	0x00024e30
   1cbc4:	00026d68 	.word	0x00026d68
   1cbc8:	00026d76 	.word	0x00026d76
   1cbcc:	00026d9e 	.word	0x00026d9e
   1cbd0:	000257ba 	.word	0x000257ba
   1cbd4:	00026dbf 	.word	0x00026dbf

0001cbd8 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   1cbd8:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   1cbda:	4d0b      	ldr	r5, [pc, #44]	; (1cc08 <idle+0x30>)
	__asm__ volatile(
   1cbdc:	f04f 0220 	mov.w	r2, #32
   1cbe0:	f3ef 8311 	mrs	r3, BASEPRI
   1cbe4:	f382 8811 	msr	BASEPRI, r2
   1cbe8:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
   1cbec:	f006 fab7 	bl	2315e <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   1cbf0:	2101      	movs	r1, #1
   1cbf2:	2802      	cmp	r0, #2
	int32_t ticks = z_get_next_timeout_expiry();
   1cbf4:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   1cbf6:	bfd8      	it	le
   1cbf8:	4608      	movle	r0, r1
   1cbfa:	f006 fac0 	bl	2317e <z_set_timeout_expiry>
	_kernel.idle = ticks;
   1cbfe:	622c      	str	r4, [r5, #32]
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   1cc00:	f7ea fcf0 	bl	75e4 <arch_cpu_idle>
}
   1cc04:	e7ea      	b.n	1cbdc <idle+0x4>
   1cc06:	bf00      	nop
   1cc08:	2000963c 	.word	0x2000963c

0001cc0c <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   1cc0c:	4802      	ldr	r0, [pc, #8]	; (1cc18 <z_bss_zero+0xc>)
   1cc0e:	4a03      	ldr	r2, [pc, #12]	; (1cc1c <z_bss_zero+0x10>)
   1cc10:	2100      	movs	r1, #0
   1cc12:	1a12      	subs	r2, r2, r0
   1cc14:	f003 b95a 	b.w	1fecc <memset>
   1cc18:	200009f8 	.word	0x200009f8
   1cc1c:	20009c70 	.word	0x20009c70

0001cc20 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   1cc20:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   1cc22:	4806      	ldr	r0, [pc, #24]	; (1cc3c <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   1cc24:	4a06      	ldr	r2, [pc, #24]	; (1cc40 <z_data_copy+0x20>)
   1cc26:	4907      	ldr	r1, [pc, #28]	; (1cc44 <z_data_copy+0x24>)
   1cc28:	1a12      	subs	r2, r2, r0
   1cc2a:	f003 f924 	bl	1fe76 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1cc2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   1cc32:	4a05      	ldr	r2, [pc, #20]	; (1cc48 <z_data_copy+0x28>)
   1cc34:	4905      	ldr	r1, [pc, #20]	; (1cc4c <z_data_copy+0x2c>)
   1cc36:	4806      	ldr	r0, [pc, #24]	; (1cc50 <z_data_copy+0x30>)
   1cc38:	f003 b91d 	b.w	1fe76 <memcpy>
   1cc3c:	20000000 	.word	0x20000000
   1cc40:	200009f8 	.word	0x200009f8
   1cc44:	00026e6c 	.word	0x00026e6c
   1cc48:	00000000 	.word	0x00000000
   1cc4c:	00026e6c 	.word	0x00026e6c
   1cc50:	20000000 	.word	0x20000000

0001cc54 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   1cc54:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
   1cc56:	4b0c      	ldr	r3, [pc, #48]	; (1cc88 <bg_thread_main+0x34>)
   1cc58:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1cc5a:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   1cc5c:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1cc5e:	f7ff ff07 	bl	1ca70 <z_sys_init_run_level>
#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
			STRINGIFY(BUILD_VERSION), BOOT_DELAY_BANNER);
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
   1cc62:	4a0a      	ldr	r2, [pc, #40]	; (1cc8c <bg_thread_main+0x38>)
   1cc64:	490a      	ldr	r1, [pc, #40]	; (1cc90 <bg_thread_main+0x3c>)
   1cc66:	480b      	ldr	r0, [pc, #44]	; (1cc94 <bg_thread_main+0x40>)
   1cc68:	f001 f973 	bl	1df52 <printk>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   1cc6c:	2003      	movs	r0, #3
   1cc6e:	f7ff feff 	bl	1ca70 <z_sys_init_run_level>

	z_init_static_threads();
   1cc72:	f000 fe3b 	bl	1d8ec <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   1cc76:	f7e9 f825 	bl	5cc4 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1cc7a:	4a07      	ldr	r2, [pc, #28]	; (1cc98 <bg_thread_main+0x44>)
   1cc7c:	7b13      	ldrb	r3, [r2, #12]
   1cc7e:	f023 0301 	bic.w	r3, r3, #1
   1cc82:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1cc84:	bd08      	pop	{r3, pc}
   1cc86:	bf00      	nop
   1cc88:	20009c6d 	.word	0x20009c6d
   1cc8c:	00025063 	.word	0x00025063
   1cc90:	00026e21 	.word	0x00026e21
   1cc94:	00026e28 	.word	0x00026e28
   1cc98:	20001bb0 	.word	0x20001bb0

0001cc9c <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   1cc9c:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
   1cca0:	b0a7      	sub	sp, #156	; 0x9c
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   1cca2:	f7e9 fa9f 	bl	61e4 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp = (uint32_t)(Z_THREAD_STACK_BUFFER(z_interrupt_stacks[0])) +
   1cca6:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 1cd9c <z_cstart+0x100>
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1ccaa:	f389 8808 	msr	MSP, r9
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   1ccae:	4d34      	ldr	r5, [pc, #208]	; (1cd80 <z_cstart+0xe4>)
	_kernel.ready_q.cache = &z_main_thread;
   1ccb0:	4e34      	ldr	r6, [pc, #208]	; (1cd84 <z_cstart+0xe8>)
   1ccb2:	696b      	ldr	r3, [r5, #20]
	z_setup_new_thread(&z_main_thread, z_main_stack,
   1ccb4:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 1cda0 <z_cstart+0x104>
   1ccb8:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 1cda4 <z_cstart+0x108>
	z_setup_new_thread(thread, stack,
   1ccbc:	4f32      	ldr	r7, [pc, #200]	; (1cd88 <z_cstart+0xec>)
   1ccbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1ccc2:	2400      	movs	r4, #0
   1ccc4:	616b      	str	r3, [r5, #20]
   1ccc6:	23e0      	movs	r3, #224	; 0xe0
   1ccc8:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   1cccc:	77ec      	strb	r4, [r5, #31]
   1ccce:	762c      	strb	r4, [r5, #24]
   1ccd0:	766c      	strb	r4, [r5, #25]
   1ccd2:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1ccd4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1ccd6:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1ccda:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1ccdc:	f7ea ff32 	bl	7b44 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1cce0:	f7ea fc7a 	bl	75d8 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1cce4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1cce8:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1ccea:	62eb      	str	r3, [r5, #44]	; 0x2c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = 0;
#endif

	_current_cpu->current = dummy_thread;
   1ccec:	4d27      	ldr	r5, [pc, #156]	; (1cd8c <z_cstart+0xf0>)
	dummy_thread->base.user_options = K_ESSENTIAL;
   1ccee:	f240 1301 	movw	r3, #257	; 0x101
   1ccf2:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   1ccf6:	ab06      	add	r3, sp, #24
   1ccf8:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1ccfa:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
   1ccfc:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
   1cd00:	f7ff feb6 	bl	1ca70 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1cd04:	2001      	movs	r0, #1
   1cd06:	f7ff feb3 	bl	1ca70 <z_sys_init_run_level>
	z_setup_new_thread(&z_main_thread, z_main_stack,
   1cd0a:	f04f 0b01 	mov.w	fp, #1
	z_sched_init();
   1cd0e:	f000 fcb3 	bl	1d678 <z_sched_init>
	z_setup_new_thread(&z_main_thread, z_main_stack,
   1cd12:	4b1f      	ldr	r3, [pc, #124]	; (1cd90 <z_cstart+0xf4>)
	_kernel.ready_q.cache = &z_main_thread;
   1cd14:	626e      	str	r6, [r5, #36]	; 0x24
	z_setup_new_thread(&z_main_thread, z_main_stack,
   1cd16:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1cd1a:	4641      	mov	r1, r8
   1cd1c:	9305      	str	r3, [sp, #20]
   1cd1e:	4630      	mov	r0, r6
   1cd20:	4653      	mov	r3, sl
   1cd22:	e9cd 4b03 	strd	r4, fp, [sp, #12]
   1cd26:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1cd2a:	9400      	str	r4, [sp, #0]
   1cd2c:	f000 fd8c 	bl	1d848 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1cd30:	7b73      	ldrb	r3, [r6, #13]
	z_ready_thread(&z_main_thread);
   1cd32:	4630      	mov	r0, r6
   1cd34:	f023 0304 	bic.w	r3, r3, #4
   1cd38:	7373      	strb	r3, [r6, #13]
   1cd3a:	f006 f8a7 	bl	22e8c <z_ready_thread>
	z_setup_new_thread(thread, stack,
   1cd3e:	230f      	movs	r3, #15
   1cd40:	e9cd 4302 	strd	r4, r3, [sp, #8]
   1cd44:	4913      	ldr	r1, [pc, #76]	; (1cd94 <z_cstart+0xf8>)
   1cd46:	4b14      	ldr	r3, [pc, #80]	; (1cd98 <z_cstart+0xfc>)
   1cd48:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1cd4c:	4638      	mov	r0, r7
   1cd4e:	e9cd b404 	strd	fp, r4, [sp, #16]
   1cd52:	e9cd 4400 	strd	r4, r4, [sp]
   1cd56:	f000 fd77 	bl	1d848 <z_setup_new_thread>
   1cd5a:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   1cd5c:	60ef      	str	r7, [r5, #12]
   1cd5e:	f023 0304 	bic.w	r3, r3, #4
   1cd62:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   1cd64:	f105 0318 	add.w	r3, r5, #24
	list->tail = (sys_dnode_t *)list;
   1cd68:	e9c5 3306 	strd	r3, r3, [r5, #24]
		_kernel.cpus[i].id = i;
   1cd6c:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
   1cd6e:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
   1cd72:	4653      	mov	r3, sl
   1cd74:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1cd78:	4641      	mov	r1, r8
   1cd7a:	4630      	mov	r0, r6
   1cd7c:	f7ea fc10 	bl	75a0 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1cd80:	e000ed00 	.word	0xe000ed00
   1cd84:	20001bb0 	.word	0x20001bb0
   1cd88:	20001b30 	.word	0x20001b30
   1cd8c:	2000963c 	.word	0x2000963c
   1cd90:	00026e51 	.word	0x00026e51
   1cd94:	2000c890 	.word	0x2000c890
   1cd98:	0001cbd9 	.word	0x0001cbd9
   1cd9c:	2000d1d0 	.word	0x2000d1d0
   1cda0:	0001cc55 	.word	0x0001cc55
   1cda4:	2000c090 	.word	0x2000c090

0001cda8 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(struct device *unused)
{
   1cda8:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   1cdaa:	4c06      	ldr	r4, [pc, #24]	; (1cdc4 <statics_init+0x1c>)
   1cdac:	4d06      	ldr	r5, [pc, #24]	; (1cdc8 <statics_init+0x20>)
   1cdae:	42ac      	cmp	r4, r5
   1cdb0:	d301      	bcc.n	1cdb6 <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   1cdb2:	2000      	movs	r0, #0
   1cdb4:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   1cdb6:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   1cdba:	4620      	mov	r0, r4
   1cdbc:	f005 fe71 	bl	22aa2 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   1cdc0:	3414      	adds	r4, #20
   1cdc2:	e7f4      	b.n	1cdae <statics_init+0x6>
   1cdc4:	200007ec 	.word	0x200007ec
   1cdc8:	20000800 	.word	0x20000800

0001cdcc <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(struct device *dev)
{
   1cdcc:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1cdce:	4b0e      	ldr	r3, [pc, #56]	; (1ce08 <init_mem_slab_module+0x3c>)
   1cdd0:	4c0e      	ldr	r4, [pc, #56]	; (1ce0c <init_mem_slab_module+0x40>)
   1cdd2:	42a3      	cmp	r3, r4
   1cdd4:	d301      	bcc.n	1cdda <init_mem_slab_module+0xe>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
   1cdd6:	2000      	movs	r0, #0
	return rc;
}
   1cdd8:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1cdda:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   1cdde:	ea41 0200 	orr.w	r2, r1, r0
   1cde2:	f012 0203 	ands.w	r2, r2, #3
   1cde6:	d10b      	bne.n	1ce00 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   1cde8:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   1cdea:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1cdec:	42aa      	cmp	r2, r5
   1cdee:	d101      	bne.n	1cdf4 <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1cdf0:	331c      	adds	r3, #28
   1cdf2:	e7ee      	b.n	1cdd2 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   1cdf4:	695e      	ldr	r6, [r3, #20]
   1cdf6:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   1cdf8:	3201      	adds	r2, #1
		slab->free_list = p;
   1cdfa:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   1cdfc:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   1cdfe:	e7f5      	b.n	1cdec <init_mem_slab_module+0x20>
		return -EINVAL;
   1ce00:	f06f 0015 	mvn.w	r0, #21
	return rc;
   1ce04:	e7e8      	b.n	1cdd8 <init_mem_slab_module+0xc>
   1ce06:	bf00      	nop
   1ce08:	20000798 	.word	0x20000798
   1ce0c:	200007ec 	.word	0x200007ec

0001ce10 <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   1ce10:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   1ce12:	460c      	mov	r4, r1
   1ce14:	4616      	mov	r6, r2
   1ce16:	461f      	mov	r7, r3
   1ce18:	f04f 0320 	mov.w	r3, #32
   1ce1c:	f3ef 8111 	mrs	r1, BASEPRI
   1ce20:	f383 8811 	msr	BASEPRI, r3
   1ce24:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   1ce28:	6943      	ldr	r3, [r0, #20]
   1ce2a:	b15b      	cbz	r3, 1ce44 <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
   1ce2c:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   1ce2e:	681b      	ldr	r3, [r3, #0]
   1ce30:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   1ce32:	6983      	ldr	r3, [r0, #24]
   1ce34:	3301      	adds	r3, #1
   1ce36:	6183      	str	r3, [r0, #24]
		result = 0;
   1ce38:	2000      	movs	r0, #0
	__asm__ volatile(
   1ce3a:	f381 8811 	msr	BASEPRI, r1
   1ce3e:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   1ce42:	e011      	b.n	1ce68 <k_mem_slab_alloc+0x58>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1ce44:	ea56 0207 	orrs.w	r2, r6, r7
   1ce48:	d103      	bne.n	1ce52 <k_mem_slab_alloc+0x42>
		*mem = NULL;
   1ce4a:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   1ce4c:	f06f 000b 	mvn.w	r0, #11
   1ce50:	e7f3      	b.n	1ce3a <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   1ce52:	4602      	mov	r2, r0
   1ce54:	e9cd 6700 	strd	r6, r7, [sp]
   1ce58:	4804      	ldr	r0, [pc, #16]	; (1ce6c <k_mem_slab_alloc+0x5c>)
   1ce5a:	f000 fbb5 	bl	1d5c8 <z_pend_curr>
		if (result == 0) {
   1ce5e:	b918      	cbnz	r0, 1ce68 <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
   1ce60:	4b03      	ldr	r3, [pc, #12]	; (1ce70 <k_mem_slab_alloc+0x60>)
   1ce62:	689b      	ldr	r3, [r3, #8]
   1ce64:	695b      	ldr	r3, [r3, #20]
   1ce66:	6023      	str	r3, [r4, #0]
}
   1ce68:	b002      	add	sp, #8
   1ce6a:	bdd0      	pop	{r4, r6, r7, pc}
   1ce6c:	20009c6e 	.word	0x20009c6e
   1ce70:	2000963c 	.word	0x2000963c

0001ce74 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   1ce74:	b570      	push	{r4, r5, r6, lr}
   1ce76:	4604      	mov	r4, r0
   1ce78:	460d      	mov	r5, r1
	__asm__ volatile(
   1ce7a:	f04f 0320 	mov.w	r3, #32
   1ce7e:	f3ef 8611 	mrs	r6, BASEPRI
   1ce82:	f383 8811 	msr	BASEPRI, r3
   1ce86:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   1ce8a:	f006 f875 	bl	22f78 <z_unpend_first_thread>

	if (pending_thread != NULL) {
   1ce8e:	b158      	cbz	r0, 1cea8 <k_mem_slab_free+0x34>
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   1ce90:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   1ce92:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1ce94:	2100      	movs	r1, #0
   1ce96:	6781      	str	r1, [r0, #120]	; 0x78
		z_ready_thread(pending_thread);
   1ce98:	f005 fff8 	bl	22e8c <z_ready_thread>
		z_reschedule(&lock, key);
   1ce9c:	4631      	mov	r1, r6
   1ce9e:	4809      	ldr	r0, [pc, #36]	; (1cec4 <k_mem_slab_free+0x50>)
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
   1cea0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   1cea4:	f005 bfaa 	b.w	22dfc <z_reschedule>
		**(char ***)mem = slab->free_list;
   1cea8:	682b      	ldr	r3, [r5, #0]
   1ceaa:	6962      	ldr	r2, [r4, #20]
   1ceac:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
   1ceae:	682b      	ldr	r3, [r5, #0]
   1ceb0:	6163      	str	r3, [r4, #20]
		slab->num_used--;
   1ceb2:	69a3      	ldr	r3, [r4, #24]
   1ceb4:	3b01      	subs	r3, #1
   1ceb6:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   1ceb8:	f386 8811 	msr	BASEPRI, r6
   1cebc:	f3bf 8f6f 	isb	sy
}
   1cec0:	bd70      	pop	{r4, r5, r6, pc}
   1cec2:	bf00      	nop
   1cec4:	20009c6e 	.word	0x20009c6e

0001cec8 <z_thread_malloc>:
#else
#define _HEAP_MEM_POOL	NULL
#endif

void *z_thread_malloc(size_t size)
{
   1cec8:	b510      	push	{r4, lr}
   1ceca:	4604      	mov	r4, r0
	void *ret;
	struct k_mem_pool *pool;

	if (k_is_in_isr()) {
   1cecc:	f006 f8a1 	bl	23012 <k_is_in_isr>
   1ced0:	b948      	cbnz	r0, 1cee6 <z_thread_malloc+0x1e>
		pool = _HEAP_MEM_POOL;
	} else {
		pool = _current->resource_pool;
   1ced2:	4b06      	ldr	r3, [pc, #24]	; (1ceec <z_thread_malloc+0x24>)
   1ced4:	689b      	ldr	r3, [r3, #8]
   1ced6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	}

	if (pool) {
   1ced8:	b13b      	cbz	r3, 1ceea <z_thread_malloc+0x22>
		ret = k_mem_pool_malloc(pool, size);
   1ceda:	4621      	mov	r1, r4
   1cedc:	4618      	mov	r0, r3
	} else {
		ret = NULL;
	}

	return ret;
}
   1cede:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ret = k_mem_pool_malloc(pool, size);
   1cee2:	f005 be7e 	b.w	22be2 <k_mem_pool_malloc>
		pool = _HEAP_MEM_POOL;
   1cee6:	4b02      	ldr	r3, [pc, #8]	; (1cef0 <z_thread_malloc+0x28>)
   1cee8:	e7f7      	b.n	1ceda <z_thread_malloc+0x12>
}
   1ceea:	bd10      	pop	{r4, pc}
   1ceec:	2000963c 	.word	0x2000963c
   1cef0:	200006a8 	.word	0x200006a8

0001cef4 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   1cef4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1cef8:	4604      	mov	r4, r0
   1cefa:	4616      	mov	r6, r2
   1cefc:	461f      	mov	r7, r3
	__asm__ volatile(
   1cefe:	f04f 0320 	mov.w	r3, #32
   1cf02:	f3ef 8811 	mrs	r8, BASEPRI
   1cf06:	f383 8811 	msr	BASEPRI, r3
   1cf0a:	f3bf 8f6f 	isb	sy
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	sys_trace_void(SYS_TRACE_ID_MUTEX_LOCK);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1cf0e:	68c3      	ldr	r3, [r0, #12]
   1cf10:	4a32      	ldr	r2, [pc, #200]	; (1cfdc <z_impl_k_mutex_lock+0xe8>)
   1cf12:	b16b      	cbz	r3, 1cf30 <z_impl_k_mutex_lock+0x3c>
   1cf14:	6880      	ldr	r0, [r0, #8]
   1cf16:	6891      	ldr	r1, [r2, #8]
   1cf18:	4288      	cmp	r0, r1
   1cf1a:	d019      	beq.n	1cf50 <z_impl_k_mutex_lock+0x5c>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   1cf1c:	ea56 0307 	orrs.w	r3, r6, r7
   1cf20:	d118      	bne.n	1cf54 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   1cf22:	f388 8811 	msr	BASEPRI, r8
   1cf26:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   1cf2a:	f06f 000f 	mvn.w	r0, #15
   1cf2e:	e00c      	b.n	1cf4a <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   1cf30:	6891      	ldr	r1, [r2, #8]
   1cf32:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1cf36:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   1cf38:	3301      	adds	r3, #1
   1cf3a:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   1cf3c:	6893      	ldr	r3, [r2, #8]
   1cf3e:	60a3      	str	r3, [r4, #8]
   1cf40:	f388 8811 	msr	BASEPRI, r8
   1cf44:	f3bf 8f6f 	isb	sy
		return 0;
   1cf48:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   1cf4a:	b002      	add	sp, #8
   1cf4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   1cf50:	6921      	ldr	r1, [r4, #16]
   1cf52:	e7f0      	b.n	1cf36 <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1cf54:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1cf58:	f991 100e 	ldrsb.w	r1, [r1, #14]
   1cf5c:	4299      	cmp	r1, r3
   1cf5e:	bfa8      	it	ge
   1cf60:	4619      	movge	r1, r3
   1cf62:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1cf66:	4299      	cmp	r1, r3
   1cf68:	da2c      	bge.n	1cfc4 <z_impl_k_mutex_lock+0xd0>
		return z_set_prio(mutex->owner, new_prio);
   1cf6a:	f000 fb41 	bl	1d5f0 <z_set_prio>
   1cf6e:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1cf70:	e9cd 6700 	strd	r6, r7, [sp]
   1cf74:	481a      	ldr	r0, [pc, #104]	; (1cfe0 <z_impl_k_mutex_lock+0xec>)
   1cf76:	4622      	mov	r2, r4
   1cf78:	4641      	mov	r1, r8
   1cf7a:	f000 fb25 	bl	1d5c8 <z_pend_curr>
	if (got_mutex == 0) {
   1cf7e:	2800      	cmp	r0, #0
   1cf80:	d0e3      	beq.n	1cf4a <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   1cf82:	f04f 0320 	mov.w	r3, #32
   1cf86:	f3ef 8611 	mrs	r6, BASEPRI
   1cf8a:	f383 8811 	msr	BASEPRI, r3
   1cf8e:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1cf92:	6823      	ldr	r3, [r4, #0]
   1cf94:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1cf96:	42a3      	cmp	r3, r4
   1cf98:	d007      	beq.n	1cfaa <z_impl_k_mutex_lock+0xb6>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1cf9a:	b133      	cbz	r3, 1cfaa <z_impl_k_mutex_lock+0xb6>
   1cf9c:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1cfa0:	4299      	cmp	r1, r3
   1cfa2:	bfa8      	it	ge
   1cfa4:	4619      	movge	r1, r3
   1cfa6:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1cfaa:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   1cfac:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1cfb0:	4299      	cmp	r1, r3
   1cfb2:	d109      	bne.n	1cfc8 <z_impl_k_mutex_lock+0xd4>
	if (resched) {
   1cfb4:	b16d      	cbz	r5, 1cfd2 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   1cfb6:	480a      	ldr	r0, [pc, #40]	; (1cfe0 <z_impl_k_mutex_lock+0xec>)
   1cfb8:	4631      	mov	r1, r6
   1cfba:	f005 ff1f 	bl	22dfc <z_reschedule>
	return -EAGAIN;
   1cfbe:	f06f 000a 	mvn.w	r0, #10
   1cfc2:	e7c2      	b.n	1cf4a <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   1cfc4:	2500      	movs	r5, #0
   1cfc6:	e7d3      	b.n	1cf70 <z_impl_k_mutex_lock+0x7c>
		return z_set_prio(mutex->owner, new_prio);
   1cfc8:	f000 fb12 	bl	1d5f0 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1cfcc:	2800      	cmp	r0, #0
   1cfce:	d1f2      	bne.n	1cfb6 <z_impl_k_mutex_lock+0xc2>
   1cfd0:	e7f0      	b.n	1cfb4 <z_impl_k_mutex_lock+0xc0>
	__asm__ volatile(
   1cfd2:	f386 8811 	msr	BASEPRI, r6
   1cfd6:	f3bf 8f6f 	isb	sy
   1cfda:	e7f0      	b.n	1cfbe <z_impl_k_mutex_lock+0xca>
   1cfdc:	2000963c 	.word	0x2000963c
   1cfe0:	20009c6e 	.word	0x20009c6e

0001cfe4 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   1cfe4:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	CHECKIF(mutex->owner == NULL) {
   1cfe6:	6883      	ldr	r3, [r0, #8]
{
   1cfe8:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   1cfea:	2b00      	cmp	r3, #0
   1cfec:	d036      	beq.n	1d05c <z_impl_k_mutex_unlock+0x78>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   1cfee:	4a1e      	ldr	r2, [pc, #120]	; (1d068 <z_impl_k_mutex_unlock+0x84>)
   1cff0:	6892      	ldr	r2, [r2, #8]
   1cff2:	4293      	cmp	r3, r2
   1cff4:	d135      	bne.n	1d062 <z_impl_k_mutex_unlock+0x7e>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
   1cff6:	7bda      	ldrb	r2, [r3, #15]
   1cff8:	3a01      	subs	r2, #1
   1cffa:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   1cffc:	68c3      	ldr	r3, [r0, #12]
   1cffe:	2b01      	cmp	r3, #1
   1d000:	d005      	beq.n	1d00e <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   1d002:	3b01      	subs	r3, #1
   1d004:	60c3      	str	r3, [r0, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   1d006:	f000 f8f7 	bl	1d1f8 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
   1d00a:	2000      	movs	r0, #0
}
   1d00c:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1d00e:	f04f 0320 	mov.w	r3, #32
   1d012:	f3ef 8511 	mrs	r5, BASEPRI
   1d016:	f383 8811 	msr	BASEPRI, r3
   1d01a:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1d01e:	6901      	ldr	r1, [r0, #16]
   1d020:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
   1d022:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1d026:	4299      	cmp	r1, r3
   1d028:	d001      	beq.n	1d02e <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
   1d02a:	f000 fae1 	bl	1d5f0 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1d02e:	4620      	mov	r0, r4
   1d030:	f005 ffa2 	bl	22f78 <z_unpend_first_thread>
	mutex->owner = new_owner;
   1d034:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1d036:	b158      	cbz	r0, 1d050 <z_impl_k_mutex_unlock+0x6c>
		mutex->owner_orig_prio = new_owner->base.prio;
   1d038:	f990 200e 	ldrsb.w	r2, [r0, #14]
   1d03c:	6122      	str	r2, [r4, #16]
   1d03e:	2200      	movs	r2, #0
   1d040:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
   1d042:	f005 ff23 	bl	22e8c <z_ready_thread>
		z_reschedule(&lock, key);
   1d046:	4809      	ldr	r0, [pc, #36]	; (1d06c <z_impl_k_mutex_unlock+0x88>)
   1d048:	4629      	mov	r1, r5
   1d04a:	f005 fed7 	bl	22dfc <z_reschedule>
   1d04e:	e7da      	b.n	1d006 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   1d050:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   1d052:	f385 8811 	msr	BASEPRI, r5
   1d056:	f3bf 8f6f 	isb	sy
   1d05a:	e7d4      	b.n	1d006 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   1d05c:	f06f 0015 	mvn.w	r0, #21
   1d060:	e7d4      	b.n	1d00c <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   1d062:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d066:	e7d1      	b.n	1d00c <z_impl_k_mutex_unlock+0x28>
   1d068:	2000963c 	.word	0x2000963c
   1d06c:	20009c6e 	.word	0x20009c6e

0001d070 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   1d070:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1d072:	4616      	mov	r6, r2
   1d074:	461f      	mov	r7, r3
	__asm__ volatile(
   1d076:	f04f 0320 	mov.w	r3, #32
   1d07a:	f3ef 8511 	mrs	r5, BASEPRI
   1d07e:	f383 8811 	msr	BASEPRI, r3
   1d082:	f3bf 8f6f 	isb	sy
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_sflist_is_empty(sys_sflist_t *list);

Z_GENLIST_IS_EMPTY(sflist)
   1d086:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1d088:	b19c      	cbz	r4, 1d0b2 <z_impl_k_queue_get+0x42>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1d08a:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1d08c:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1d08e:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1d092:	4294      	cmp	r4, r2
	list->head = node;
   1d094:	6003      	str	r3, [r0, #0]
	list->tail = node;
   1d096:	bf08      	it	eq
   1d098:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1d09a:	2101      	movs	r1, #1
   1d09c:	4620      	mov	r0, r4
   1d09e:	f005 fe1d 	bl	22cdc <z_queue_node_peek>
   1d0a2:	4604      	mov	r4, r0
	__asm__ volatile(
   1d0a4:	f385 8811 	msr	BASEPRI, r5
   1d0a8:	f3bf 8f6f 	isb	sy
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   1d0ac:	4620      	mov	r0, r4
   1d0ae:	b003      	add	sp, #12
   1d0b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1d0b2:	ea56 0307 	orrs.w	r3, r6, r7
   1d0b6:	d0f5      	beq.n	1d0a4 <z_impl_k_queue_get+0x34>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1d0b8:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   1d0bc:	e9cd 6700 	strd	r6, r7, [sp]
   1d0c0:	4629      	mov	r1, r5
   1d0c2:	4610      	mov	r0, r2
   1d0c4:	f000 fa80 	bl	1d5c8 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   1d0c8:	2800      	cmp	r0, #0
   1d0ca:	d1ef      	bne.n	1d0ac <z_impl_k_queue_get+0x3c>
   1d0cc:	4b01      	ldr	r3, [pc, #4]	; (1d0d4 <z_impl_k_queue_get+0x64>)
   1d0ce:	689b      	ldr	r3, [r3, #8]
   1d0d0:	695c      	ldr	r4, [r3, #20]
   1d0d2:	e7eb      	b.n	1d0ac <z_impl_k_queue_get+0x3c>
   1d0d4:	2000963c 	.word	0x2000963c

0001d0d8 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   1d0d8:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   1d0da:	4c08      	ldr	r4, [pc, #32]	; (1d0fc <z_reset_time_slice+0x24>)
   1d0dc:	6823      	ldr	r3, [r4, #0]
   1d0de:	b15b      	cbz	r3, 1d0f8 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   1d0e0:	f7e9 ff44 	bl	6f6c <z_clock_elapsed>
   1d0e4:	4603      	mov	r3, r0
   1d0e6:	6820      	ldr	r0, [r4, #0]
   1d0e8:	4a05      	ldr	r2, [pc, #20]	; (1d100 <z_reset_time_slice+0x28>)
   1d0ea:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
   1d0ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   1d0f0:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   1d0f2:	2100      	movs	r1, #0
   1d0f4:	f006 b843 	b.w	2317e <z_set_timeout_expiry>
}
   1d0f8:	bd10      	pop	{r4, pc}
   1d0fa:	bf00      	nop
   1d0fc:	20009674 	.word	0x20009674
   1d100:	2000963c 	.word	0x2000963c

0001d104 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   1d104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d106:	4605      	mov	r5, r0
   1d108:	460c      	mov	r4, r1
	__asm__ volatile(
   1d10a:	f04f 0320 	mov.w	r3, #32
   1d10e:	f3ef 8611 	mrs	r6, BASEPRI
   1d112:	f383 8811 	msr	BASEPRI, r3
   1d116:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   1d11a:	4b0d      	ldr	r3, [pc, #52]	; (1d150 <k_sched_time_slice_set+0x4c>)
   1d11c:	2200      	movs	r2, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   1d11e:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   1d122:	f240 30e7 	movw	r0, #999	; 0x3e7
   1d126:	2100      	movs	r1, #0
   1d128:	611a      	str	r2, [r3, #16]
   1d12a:	fbe7 0105 	umlal	r0, r1, r7, r5
   1d12e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1d132:	2300      	movs	r3, #0
   1d134:	f7e3 fc82 	bl	a3c <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   1d138:	4b06      	ldr	r3, [pc, #24]	; (1d154 <k_sched_time_slice_set+0x50>)
   1d13a:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   1d13c:	4b06      	ldr	r3, [pc, #24]	; (1d158 <k_sched_time_slice_set+0x54>)
   1d13e:	601c      	str	r4, [r3, #0]
		z_reset_time_slice();
   1d140:	f7ff ffca 	bl	1d0d8 <z_reset_time_slice>
	__asm__ volatile(
   1d144:	f386 8811 	msr	BASEPRI, r6
   1d148:	f3bf 8f6f 	isb	sy
	}
}
   1d14c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d14e:	bf00      	nop
   1d150:	2000963c 	.word	0x2000963c
   1d154:	20009674 	.word	0x20009674
   1d158:	20009670 	.word	0x20009670

0001d15c <k_sched_lock>:
	__asm__ volatile(
   1d15c:	f04f 0320 	mov.w	r3, #32
   1d160:	f3ef 8111 	mrs	r1, BASEPRI
   1d164:	f383 8811 	msr	BASEPRI, r3
   1d168:	f3bf 8f6f 	isb	sy
   1d16c:	4b04      	ldr	r3, [pc, #16]	; (1d180 <k_sched_lock+0x24>)
   1d16e:	689a      	ldr	r2, [r3, #8]
   1d170:	7bd3      	ldrb	r3, [r2, #15]
   1d172:	3b01      	subs	r3, #1
   1d174:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   1d176:	f381 8811 	msr	BASEPRI, r1
   1d17a:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   1d17e:	4770      	bx	lr
   1d180:	2000963c 	.word	0x2000963c

0001d184 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   1d184:	4b09      	ldr	r3, [pc, #36]	; (1d1ac <z_priq_dumb_remove+0x28>)
   1d186:	f103 0228 	add.w	r2, r3, #40	; 0x28
   1d18a:	4282      	cmp	r2, r0
   1d18c:	d105      	bne.n	1d19a <z_priq_dumb_remove+0x16>
   1d18e:	689b      	ldr	r3, [r3, #8]
   1d190:	428b      	cmp	r3, r1
   1d192:	d102      	bne.n	1d19a <z_priq_dumb_remove+0x16>
   1d194:	7b4b      	ldrb	r3, [r1, #13]
   1d196:	06db      	lsls	r3, r3, #27
   1d198:	d106      	bne.n	1d1a8 <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   1d19a:	e9d1 3200 	ldrd	r3, r2, [r1]
   1d19e:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1d1a0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1d1a2:	2300      	movs	r3, #0
	node->prev = NULL;
   1d1a4:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   1d1a8:	4770      	bx	lr
   1d1aa:	bf00      	nop
   1d1ac:	2000963c 	.word	0x2000963c

0001d1b0 <update_cache>:
{
   1d1b0:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   1d1b2:	4c10      	ldr	r4, [pc, #64]	; (1d1f4 <update_cache+0x44>)
{
   1d1b4:	4606      	mov	r6, r0
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   1d1b6:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1d1ba:	f005 fe5d 	bl	22e78 <z_priq_dumb_best>
	if (_current->base.thread_state & _THREAD_ABORTING) {
   1d1be:	68a3      	ldr	r3, [r4, #8]
   1d1c0:	7b59      	ldrb	r1, [r3, #13]
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   1d1c2:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
   1d1c4:	0688      	lsls	r0, r1, #26
		_current->base.thread_state |= _THREAD_DEAD;
   1d1c6:	bf44      	itt	mi
   1d1c8:	f041 0108 	orrmi.w	r1, r1, #8
   1d1cc:	7359      	strbmi	r1, [r3, #13]
	return thread ? thread : _current_cpu->idle_thread;
   1d1ce:	b905      	cbnz	r5, 1d1d2 <update_cache+0x22>
   1d1d0:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   1d1d2:	b94e      	cbnz	r6, 1d1e8 <update_cache+0x38>
	if (z_is_thread_prevented_from_running(_current)) {
   1d1d4:	7b5a      	ldrb	r2, [r3, #13]
   1d1d6:	06d2      	lsls	r2, r2, #27
   1d1d8:	d106      	bne.n	1d1e8 <update_cache+0x38>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1d1da:	69aa      	ldr	r2, [r5, #24]
   1d1dc:	b922      	cbnz	r2, 1d1e8 <update_cache+0x38>
	if (is_preempt(_current) || is_metairq(thread)) {
   1d1de:	89da      	ldrh	r2, [r3, #14]
   1d1e0:	2a7f      	cmp	r2, #127	; 0x7f
   1d1e2:	d901      	bls.n	1d1e8 <update_cache+0x38>
		_kernel.ready_q.cache = _current;
   1d1e4:	6263      	str	r3, [r4, #36]	; 0x24
}
   1d1e6:	bd70      	pop	{r4, r5, r6, pc}
		if (thread != _current) {
   1d1e8:	42ab      	cmp	r3, r5
   1d1ea:	d001      	beq.n	1d1f0 <update_cache+0x40>
			z_reset_time_slice();
   1d1ec:	f7ff ff74 	bl	1d0d8 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   1d1f0:	6265      	str	r5, [r4, #36]	; 0x24
}
   1d1f2:	e7f8      	b.n	1d1e6 <update_cache+0x36>
   1d1f4:	2000963c 	.word	0x2000963c

0001d1f8 <k_sched_unlock>:
{
   1d1f8:	b510      	push	{r4, lr}
	__asm__ volatile(
   1d1fa:	f04f 0320 	mov.w	r3, #32
   1d1fe:	f3ef 8411 	mrs	r4, BASEPRI
   1d202:	f383 8811 	msr	BASEPRI, r3
   1d206:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   1d20a:	4b08      	ldr	r3, [pc, #32]	; (1d22c <k_sched_unlock+0x34>)
   1d20c:	689a      	ldr	r2, [r3, #8]
   1d20e:	7bd3      	ldrb	r3, [r2, #15]
   1d210:	3301      	adds	r3, #1
   1d212:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   1d214:	2000      	movs	r0, #0
   1d216:	f7ff ffcb 	bl	1d1b0 <update_cache>
	__asm__ volatile(
   1d21a:	f384 8811 	msr	BASEPRI, r4
   1d21e:	f3bf 8f6f 	isb	sy
}
   1d222:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   1d226:	f005 be00 	b.w	22e2a <z_reschedule_unlocked>
   1d22a:	bf00      	nop
   1d22c:	2000963c 	.word	0x2000963c

0001d230 <ready_thread>:
{
   1d230:	b470      	push	{r4, r5, r6}
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1d232:	7b43      	ldrb	r3, [r0, #13]
   1d234:	06db      	lsls	r3, r3, #27
   1d236:	d12a      	bne.n	1d28e <ready_thread+0x5e>

int z_abort_timeout(struct _timeout *to);

static inline bool z_is_inactive_timeout(struct _timeout *t)
{
	return !sys_dnode_is_linked(&t->node);
   1d238:	6983      	ldr	r3, [r0, #24]
	if (z_is_thread_ready(thread)) {
   1d23a:	bb43      	cbnz	r3, 1d28e <ready_thread+0x5e>
	return list->head == list;
   1d23c:	4a15      	ldr	r2, [pc, #84]	; (1d294 <ready_thread+0x64>)
   1d23e:	4611      	mov	r1, r2
   1d240:	f851 4f28 	ldr.w	r4, [r1, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d244:	428c      	cmp	r4, r1
   1d246:	bf18      	it	ne
   1d248:	4623      	movne	r3, r4
   1d24a:	2b00      	cmp	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1d24c:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
   1d24e:	bf38      	it	cc
   1d250:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1d252:	b1b3      	cbz	r3, 1d282 <ready_thread+0x52>
	if (thread_1->base.prio < thread_2->base.prio) {
   1d254:	f990 600e 	ldrsb.w	r6, [r0, #14]
   1d258:	f993 500e 	ldrsb.w	r5, [r3, #14]
   1d25c:	42ae      	cmp	r6, r5
   1d25e:	db03      	blt.n	1d268 <ready_thread+0x38>
	return (node == list->tail) ? NULL : node->next;
   1d260:	42a3      	cmp	r3, r4
   1d262:	d00e      	beq.n	1d282 <ready_thread+0x52>
   1d264:	681b      	ldr	r3, [r3, #0]
   1d266:	e7f4      	b.n	1d252 <ready_thread+0x22>
	node->prev = successor->prev;
   1d268:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1d26a:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
   1d26e:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   1d270:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
   1d272:	7b43      	ldrb	r3, [r0, #13]
   1d274:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1d278:	7343      	strb	r3, [r0, #13]
}
   1d27a:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   1d27c:	2000      	movs	r0, #0
   1d27e:	f7ff bf97 	b.w	1d1b0 <update_cache>
	node->prev = list->tail;
   1d282:	e9c0 1400 	strd	r1, r4, [r0]
	list->tail->next = node;
   1d286:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   1d288:	6018      	str	r0, [r3, #0]
	list->tail = node;
   1d28a:	62d0      	str	r0, [r2, #44]	; 0x2c
}
   1d28c:	e7f1      	b.n	1d272 <ready_thread+0x42>
}
   1d28e:	bc70      	pop	{r4, r5, r6}
   1d290:	4770      	bx	lr
   1d292:	bf00      	nop
   1d294:	2000963c 	.word	0x2000963c

0001d298 <z_sched_start>:
{
   1d298:	b510      	push	{r4, lr}
	__asm__ volatile(
   1d29a:	f04f 0220 	mov.w	r2, #32
   1d29e:	f3ef 8411 	mrs	r4, BASEPRI
   1d2a2:	f382 8811 	msr	BASEPRI, r2
   1d2a6:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
   1d2aa:	7b42      	ldrb	r2, [r0, #13]
   1d2ac:	0751      	lsls	r1, r2, #29
   1d2ae:	d404      	bmi.n	1d2ba <z_sched_start+0x22>
	__asm__ volatile(
   1d2b0:	f384 8811 	msr	BASEPRI, r4
   1d2b4:	f3bf 8f6f 	isb	sy
}
   1d2b8:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1d2ba:	f022 0204 	bic.w	r2, r2, #4
   1d2be:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   1d2c0:	f7ff ffb6 	bl	1d230 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   1d2c4:	4621      	mov	r1, r4
   1d2c6:	4802      	ldr	r0, [pc, #8]	; (1d2d0 <z_sched_start+0x38>)
}
   1d2c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   1d2cc:	f005 bd96 	b.w	22dfc <z_reschedule>
   1d2d0:	20009c6e 	.word	0x20009c6e

0001d2d4 <z_move_thread_to_end_of_prio_q>:
{
   1d2d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d2d6:	4601      	mov	r1, r0
	__asm__ volatile(
   1d2d8:	f04f 0320 	mov.w	r3, #32
   1d2dc:	f3ef 8411 	mrs	r4, BASEPRI
   1d2e0:	f383 8811 	msr	BASEPRI, r3
   1d2e4:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   1d2e8:	f990 300d 	ldrsb.w	r3, [r0, #13]
   1d2ec:	2b00      	cmp	r3, #0
   1d2ee:	da02      	bge.n	1d2f6 <z_move_thread_to_end_of_prio_q+0x22>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   1d2f0:	4819      	ldr	r0, [pc, #100]	; (1d358 <z_move_thread_to_end_of_prio_q+0x84>)
   1d2f2:	f7ff ff47 	bl	1d184 <z_priq_dumb_remove>
	return list->head == list;
   1d2f6:	4a19      	ldr	r2, [pc, #100]	; (1d35c <z_move_thread_to_end_of_prio_q+0x88>)
   1d2f8:	4610      	mov	r0, r2
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1d2fa:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
	return list->head == list;
   1d2fc:	f850 3f28 	ldr.w	r3, [r0, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d300:	4283      	cmp	r3, r0
   1d302:	bf08      	it	eq
   1d304:	2300      	moveq	r3, #0
   1d306:	2b00      	cmp	r3, #0
   1d308:	bf38      	it	cc
   1d30a:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1d30c:	b1eb      	cbz	r3, 1d34a <z_move_thread_to_end_of_prio_q+0x76>
	if (thread_1->base.prio < thread_2->base.prio) {
   1d30e:	f991 700e 	ldrsb.w	r7, [r1, #14]
   1d312:	f993 600e 	ldrsb.w	r6, [r3, #14]
   1d316:	42b7      	cmp	r7, r6
   1d318:	db03      	blt.n	1d322 <z_move_thread_to_end_of_prio_q+0x4e>
	return (node == list->tail) ? NULL : node->next;
   1d31a:	429d      	cmp	r5, r3
   1d31c:	d015      	beq.n	1d34a <z_move_thread_to_end_of_prio_q+0x76>
   1d31e:	681b      	ldr	r3, [r3, #0]
   1d320:	e7f4      	b.n	1d30c <z_move_thread_to_end_of_prio_q+0x38>
	node->prev = successor->prev;
   1d322:	6858      	ldr	r0, [r3, #4]
	node->next = successor;
   1d324:	e9c1 3000 	strd	r3, r0, [r1]
	successor->prev->next = node;
   1d328:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   1d32a:	6059      	str	r1, [r3, #4]
	thread->base.thread_state |= states;
   1d32c:	7b4b      	ldrb	r3, [r1, #13]
		update_cache(thread == _current);
   1d32e:	6890      	ldr	r0, [r2, #8]
   1d330:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1d334:	734b      	strb	r3, [r1, #13]
   1d336:	1a43      	subs	r3, r0, r1
   1d338:	4258      	negs	r0, r3
   1d33a:	4158      	adcs	r0, r3
   1d33c:	f7ff ff38 	bl	1d1b0 <update_cache>
	__asm__ volatile(
   1d340:	f384 8811 	msr	BASEPRI, r4
   1d344:	f3bf 8f6f 	isb	sy
}
   1d348:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	node->prev = list->tail;
   1d34a:	e9c1 0500 	strd	r0, r5, [r1]
	list->tail->next = node;
   1d34e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   1d350:	6019      	str	r1, [r3, #0]
	list->tail = node;
   1d352:	62d1      	str	r1, [r2, #44]	; 0x2c
}
   1d354:	e7ea      	b.n	1d32c <z_move_thread_to_end_of_prio_q+0x58>
   1d356:	bf00      	nop
   1d358:	20009664 	.word	0x20009664
   1d35c:	2000963c 	.word	0x2000963c

0001d360 <z_time_slice>:
{
   1d360:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
   1d362:	4a15      	ldr	r2, [pc, #84]	; (1d3b8 <z_time_slice+0x58>)
   1d364:	4b15      	ldr	r3, [pc, #84]	; (1d3bc <z_time_slice+0x5c>)
   1d366:	6814      	ldr	r4, [r2, #0]
{
   1d368:	4601      	mov	r1, r0
	if (pending_current == _current) {
   1d36a:	6898      	ldr	r0, [r3, #8]
   1d36c:	42a0      	cmp	r0, r4
   1d36e:	461c      	mov	r4, r3
   1d370:	d103      	bne.n	1d37a <z_time_slice+0x1a>
}
   1d372:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			z_reset_time_slice();
   1d376:	f7ff beaf 	b.w	1d0d8 <z_reset_time_slice>
	pending_current = NULL;
   1d37a:	2500      	movs	r5, #0
   1d37c:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
   1d37e:	4a10      	ldr	r2, [pc, #64]	; (1d3c0 <z_time_slice+0x60>)
   1d380:	6812      	ldr	r2, [r2, #0]
   1d382:	b1b2      	cbz	r2, 1d3b2 <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
   1d384:	89c2      	ldrh	r2, [r0, #14]
   1d386:	2a7f      	cmp	r2, #127	; 0x7f
   1d388:	d813      	bhi.n	1d3b2 <z_time_slice+0x52>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   1d38a:	4a0e      	ldr	r2, [pc, #56]	; (1d3c4 <z_time_slice+0x64>)
   1d38c:	f990 500e 	ldrsb.w	r5, [r0, #14]
   1d390:	6812      	ldr	r2, [r2, #0]
   1d392:	4295      	cmp	r5, r2
   1d394:	db0d      	blt.n	1d3b2 <z_time_slice+0x52>
		&& !z_is_idle_thread_object(thread)
   1d396:	4a0c      	ldr	r2, [pc, #48]	; (1d3c8 <z_time_slice+0x68>)
   1d398:	4290      	cmp	r0, r2
   1d39a:	d00a      	beq.n	1d3b2 <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
   1d39c:	6982      	ldr	r2, [r0, #24]
   1d39e:	b942      	cbnz	r2, 1d3b2 <z_time_slice+0x52>
		if (ticks >= _current_cpu->slice_ticks) {
   1d3a0:	691a      	ldr	r2, [r3, #16]
   1d3a2:	428a      	cmp	r2, r1
   1d3a4:	dc02      	bgt.n	1d3ac <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
   1d3a6:	f7ff ff95 	bl	1d2d4 <z_move_thread_to_end_of_prio_q>
   1d3aa:	e7e2      	b.n	1d372 <z_time_slice+0x12>
			_current_cpu->slice_ticks -= ticks;
   1d3ac:	1a52      	subs	r2, r2, r1
   1d3ae:	611a      	str	r2, [r3, #16]
}
   1d3b0:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
   1d3b2:	2300      	movs	r3, #0
   1d3b4:	6123      	str	r3, [r4, #16]
   1d3b6:	e7fb      	b.n	1d3b0 <z_time_slice+0x50>
   1d3b8:	2000966c 	.word	0x2000966c
   1d3bc:	2000963c 	.word	0x2000963c
   1d3c0:	20009674 	.word	0x20009674
   1d3c4:	20009670 	.word	0x20009670
   1d3c8:	20001b30 	.word	0x20001b30

0001d3cc <z_impl_k_thread_suspend>:
{
   1d3cc:	b570      	push	{r4, r5, r6, lr}
   1d3ce:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1d3d0:	3018      	adds	r0, #24
   1d3d2:	f005 feae 	bl	23132 <z_abort_timeout>
	__asm__ volatile(
   1d3d6:	f04f 0320 	mov.w	r3, #32
   1d3da:	f3ef 8611 	mrs	r6, BASEPRI
   1d3de:	f383 8811 	msr	BASEPRI, r3
   1d3e2:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   1d3e6:	f994 300d 	ldrsb.w	r3, [r4, #13]
   1d3ea:	2b00      	cmp	r3, #0
   1d3ec:	da07      	bge.n	1d3fe <z_impl_k_thread_suspend+0x32>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   1d3ee:	480f      	ldr	r0, [pc, #60]	; (1d42c <z_impl_k_thread_suspend+0x60>)
   1d3f0:	4621      	mov	r1, r4
   1d3f2:	f7ff fec7 	bl	1d184 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1d3f6:	7b63      	ldrb	r3, [r4, #13]
   1d3f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1d3fc:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   1d3fe:	4d0c      	ldr	r5, [pc, #48]	; (1d430 <z_impl_k_thread_suspend+0x64>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1d400:	7b63      	ldrb	r3, [r4, #13]
   1d402:	68a8      	ldr	r0, [r5, #8]
   1d404:	f043 0310 	orr.w	r3, r3, #16
   1d408:	7363      	strb	r3, [r4, #13]
   1d40a:	1b03      	subs	r3, r0, r4
   1d40c:	4258      	negs	r0, r3
   1d40e:	4158      	adcs	r0, r3
   1d410:	f7ff fece 	bl	1d1b0 <update_cache>
	__asm__ volatile(
   1d414:	f386 8811 	msr	BASEPRI, r6
   1d418:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   1d41c:	68ab      	ldr	r3, [r5, #8]
   1d41e:	42a3      	cmp	r3, r4
   1d420:	d103      	bne.n	1d42a <z_impl_k_thread_suspend+0x5e>
}
   1d422:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   1d426:	f005 bd00 	b.w	22e2a <z_reschedule_unlocked>
}
   1d42a:	bd70      	pop	{r4, r5, r6, pc}
   1d42c:	20009664 	.word	0x20009664
   1d430:	2000963c 	.word	0x2000963c

0001d434 <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
   1d434:	6e03      	ldr	r3, [r0, #96]	; 0x60
{
   1d436:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d43a:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   1d43c:	b103      	cbz	r3, 1d440 <z_thread_single_abort+0xc>
		thread->fn_abort();
   1d43e:	4798      	blx	r3
   1d440:	f104 0018 	add.w	r0, r4, #24
   1d444:	f005 fe75 	bl	23132 <z_abort_timeout>
	__asm__ volatile(
   1d448:	f04f 0320 	mov.w	r3, #32
   1d44c:	f3ef 8611 	mrs	r6, BASEPRI
   1d450:	f383 8811 	msr	BASEPRI, r3
   1d454:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1d458:	7b63      	ldrb	r3, [r4, #13]
   1d45a:	06d8      	lsls	r0, r3, #27
   1d45c:	d123      	bne.n	1d4a6 <z_thread_single_abort+0x72>
		if (z_is_thread_ready(thread)) {
   1d45e:	69a2      	ldr	r2, [r4, #24]
   1d460:	bb0a      	cbnz	r2, 1d4a6 <z_thread_single_abort+0x72>
			if (z_is_thread_queued(thread)) {
   1d462:	0619      	lsls	r1, r3, #24
   1d464:	d507      	bpl.n	1d476 <z_thread_single_abort+0x42>
				_priq_run_remove(&_kernel.ready_q.runq,
   1d466:	481f      	ldr	r0, [pc, #124]	; (1d4e4 <z_thread_single_abort+0xb0>)
   1d468:	4621      	mov	r1, r4
   1d46a:	f7ff fe8b 	bl	1d184 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1d46e:	7b63      	ldrb	r3, [r4, #13]
   1d470:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1d474:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   1d476:	4b1c      	ldr	r3, [pc, #112]	; (1d4e8 <z_thread_single_abort+0xb4>)
   1d478:	6898      	ldr	r0, [r3, #8]
   1d47a:	1b02      	subs	r2, r0, r4
   1d47c:	4250      	negs	r0, r2
   1d47e:	4150      	adcs	r0, r2
   1d480:	f7ff fe96 	bl	1d1b0 <update_cache>
		thread->base.thread_state |= mask;
   1d484:	7b63      	ldrb	r3, [r4, #13]
   1d486:	f043 0308 	orr.w	r3, r3, #8
   1d48a:	7363      	strb	r3, [r4, #13]
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   1d48c:	f104 0830 	add.w	r8, r4, #48	; 0x30
			waiter->base.pended_on = NULL;
   1d490:	2700      	movs	r7, #0
	return list->head == list;
   1d492:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d494:	4545      	cmp	r5, r8
   1d496:	d000      	beq.n	1d49a <z_thread_single_abort+0x66>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
   1d498:	b995      	cbnz	r5, 1d4c0 <z_thread_single_abort+0x8c>
	__asm__ volatile(
   1d49a:	f386 8811 	msr	BASEPRI, r6
   1d49e:	f3bf 8f6f 	isb	sy
}
   1d4a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (z_is_thread_pending(thread)) {
   1d4a6:	079b      	lsls	r3, r3, #30
   1d4a8:	d5ec      	bpl.n	1d484 <z_thread_single_abort+0x50>
				_priq_wait_remove(&pended_on(thread)->waitq,
   1d4aa:	68a0      	ldr	r0, [r4, #8]
   1d4ac:	4621      	mov	r1, r4
   1d4ae:	f7ff fe69 	bl	1d184 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1d4b2:	7b63      	ldrb	r3, [r4, #13]
   1d4b4:	f023 0302 	bic.w	r3, r3, #2
   1d4b8:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   1d4ba:	2300      	movs	r3, #0
   1d4bc:	60a3      	str	r3, [r4, #8]
   1d4be:	e7e1      	b.n	1d484 <z_thread_single_abort+0x50>
   1d4c0:	f105 0018 	add.w	r0, r5, #24
   1d4c4:	f005 fe35 	bl	23132 <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
   1d4c8:	68a8      	ldr	r0, [r5, #8]
   1d4ca:	4629      	mov	r1, r5
   1d4cc:	f7ff fe5a 	bl	1d184 <z_priq_dumb_remove>
   1d4d0:	7b6b      	ldrb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
   1d4d2:	60af      	str	r7, [r5, #8]
   1d4d4:	f023 0302 	bic.w	r3, r3, #2
   1d4d8:	736b      	strb	r3, [r5, #13]
   1d4da:	67af      	str	r7, [r5, #120]	; 0x78
			ready_thread(waiter);
   1d4dc:	4628      	mov	r0, r5
   1d4de:	f7ff fea7 	bl	1d230 <ready_thread>
   1d4e2:	e7d6      	b.n	1d492 <z_thread_single_abort+0x5e>
   1d4e4:	20009664 	.word	0x20009664
   1d4e8:	2000963c 	.word	0x2000963c

0001d4ec <unready_thread>:
{
   1d4ec:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   1d4ee:	f990 300d 	ldrsb.w	r3, [r0, #13]
   1d4f2:	2b00      	cmp	r3, #0
{
   1d4f4:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1d4f6:	da06      	bge.n	1d506 <unready_thread+0x1a>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   1d4f8:	4807      	ldr	r0, [pc, #28]	; (1d518 <unready_thread+0x2c>)
   1d4fa:	f7ff fe43 	bl	1d184 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1d4fe:	7b4b      	ldrb	r3, [r1, #13]
   1d500:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1d504:	734b      	strb	r3, [r1, #13]
	update_cache(thread == _current);
   1d506:	4b05      	ldr	r3, [pc, #20]	; (1d51c <unready_thread+0x30>)
   1d508:	6898      	ldr	r0, [r3, #8]
   1d50a:	1a43      	subs	r3, r0, r1
   1d50c:	4258      	negs	r0, r3
   1d50e:	4158      	adcs	r0, r3
}
   1d510:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   1d514:	f7ff be4c 	b.w	1d1b0 <update_cache>
   1d518:	20009664 	.word	0x20009664
   1d51c:	2000963c 	.word	0x2000963c

0001d520 <z_tick_sleep.part.0>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(int32_t ticks)
   1d520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d522:	4605      	mov	r5, r0
#else
	ticks += _TICK_ALIGN;
	timeout = (k_ticks_t) ticks;
#endif

	expected_wakeup_time = ticks + z_tick_get_32();
   1d524:	f005 fe45 	bl	231b2 <z_tick_get_32>
   1d528:	182c      	adds	r4, r5, r0
	__asm__ volatile(
   1d52a:	f04f 0320 	mov.w	r3, #32
   1d52e:	f3ef 8711 	mrs	r7, BASEPRI
   1d532:	f383 8811 	msr	BASEPRI, r3
   1d536:	f3bf 8f6f 	isb	sy
	 */
	struct k_spinlock local_lock = {};
	k_spinlock_key_t key = k_spin_lock(&local_lock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   1d53a:	4e0d      	ldr	r6, [pc, #52]	; (1d570 <z_tick_sleep.part.0+0x50>)
   1d53c:	4b0d      	ldr	r3, [pc, #52]	; (1d574 <z_tick_sleep.part.0+0x54>)
   1d53e:	68b0      	ldr	r0, [r6, #8]
   1d540:	6018      	str	r0, [r3, #0]
#endif
	z_remove_thread_from_ready_q(_current);
   1d542:	f005 fcde 	bl	22f02 <z_remove_thread_from_ready_q>
	z_add_thread_timeout(_current, timeout);
   1d546:	68b0      	ldr	r0, [r6, #8]
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   1d548:	490b      	ldr	r1, [pc, #44]	; (1d578 <z_tick_sleep.part.0+0x58>)
   1d54a:	462a      	mov	r2, r5
   1d54c:	17eb      	asrs	r3, r5, #31
   1d54e:	3018      	adds	r0, #24
   1d550:	f000 face 	bl	1daf0 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   1d554:	68b2      	ldr	r2, [r6, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1d556:	7b53      	ldrb	r3, [r2, #13]
   1d558:	f043 0310 	orr.w	r3, r3, #16
   1d55c:	7353      	strb	r3, [r2, #13]
	ret = arch_swap(key);
   1d55e:	4638      	mov	r0, r7
   1d560:	f7e9 ff50 	bl	7404 <arch_swap>

	(void)z_swap(&local_lock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
   1d564:	f005 fe25 	bl	231b2 <z_tick_get_32>
   1d568:	1a20      	subs	r0, r4, r0
		return ticks;
	}
#endif

	return 0;
}
   1d56a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   1d56e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d570:	2000963c 	.word	0x2000963c
   1d574:	2000966c 	.word	0x2000966c
   1d578:	00022ead 	.word	0x00022ead

0001d57c <pend>:
{
   1d57c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d580:	4606      	mov	r6, r0
   1d582:	4614      	mov	r4, r2
   1d584:	461d      	mov	r5, r3
   1d586:	f04f 0320 	mov.w	r3, #32
   1d58a:	f3ef 8711 	mrs	r7, BASEPRI
   1d58e:	f383 8811 	msr	BASEPRI, r3
   1d592:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   1d596:	f005 fcc4 	bl	22f22 <add_to_waitq_locked>
	__asm__ volatile(
   1d59a:	f387 8811 	msr	BASEPRI, r7
   1d59e:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1d5a2:	1c6b      	adds	r3, r5, #1
   1d5a4:	bf08      	it	eq
   1d5a6:	f1b4 3fff 	cmpeq.w	r4, #4294967295	; 0xffffffff
   1d5aa:	d008      	beq.n	1d5be <pend+0x42>
   1d5ac:	4622      	mov	r2, r4
   1d5ae:	462b      	mov	r3, r5
   1d5b0:	f106 0018 	add.w	r0, r6, #24
   1d5b4:	4903      	ldr	r1, [pc, #12]	; (1d5c4 <pend+0x48>)
}
   1d5b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1d5ba:	f000 ba99 	b.w	1daf0 <z_add_timeout>
   1d5be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d5c2:	bf00      	nop
   1d5c4:	00022ead 	.word	0x00022ead

0001d5c8 <z_pend_curr>:
{
   1d5c8:	b510      	push	{r4, lr}
	pending_current = _current;
   1d5ca:	4b07      	ldr	r3, [pc, #28]	; (1d5e8 <z_pend_curr+0x20>)
   1d5cc:	6898      	ldr	r0, [r3, #8]
   1d5ce:	4b07      	ldr	r3, [pc, #28]	; (1d5ec <z_pend_curr+0x24>)
{
   1d5d0:	460c      	mov	r4, r1
	pending_current = _current;
   1d5d2:	6018      	str	r0, [r3, #0]
{
   1d5d4:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   1d5d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1d5da:	f7ff ffcf 	bl	1d57c <pend>
   1d5de:	4620      	mov	r0, r4
}
   1d5e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1d5e4:	f7e9 bf0e 	b.w	7404 <arch_swap>
   1d5e8:	2000963c 	.word	0x2000963c
   1d5ec:	2000966c 	.word	0x2000966c

0001d5f0 <z_set_prio>:
{
   1d5f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d5f4:	4604      	mov	r4, r0
	__asm__ volatile(
   1d5f6:	f04f 0320 	mov.w	r3, #32
   1d5fa:	f3ef 8811 	mrs	r8, BASEPRI
   1d5fe:	f383 8811 	msr	BASEPRI, r3
   1d602:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1d606:	7b43      	ldrb	r3, [r0, #13]
   1d608:	06db      	lsls	r3, r3, #27
   1d60a:	b24e      	sxtb	r6, r1
   1d60c:	d12e      	bne.n	1d66c <z_set_prio+0x7c>
	return !sys_dnode_is_linked(&t->node);
   1d60e:	6985      	ldr	r5, [r0, #24]
		if (need_sched) {
   1d610:	bb65      	cbnz	r5, 1d66c <z_set_prio+0x7c>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   1d612:	4f18      	ldr	r7, [pc, #96]	; (1d674 <z_set_prio+0x84>)
   1d614:	4621      	mov	r1, r4
   1d616:	f107 0028 	add.w	r0, r7, #40	; 0x28
   1d61a:	f7ff fdb3 	bl	1d184 <z_priq_dumb_remove>
	return list->head == list;
   1d61e:	6abb      	ldr	r3, [r7, #40]	; 0x28
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1d620:	6afa      	ldr	r2, [r7, #44]	; 0x2c
				thread->base.prio = prio;
   1d622:	73a6      	strb	r6, [r4, #14]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d624:	4283      	cmp	r3, r0
   1d626:	bf18      	it	ne
   1d628:	461d      	movne	r5, r3
   1d62a:	2d00      	cmp	r5, #0
   1d62c:	bf38      	it	cc
   1d62e:	2500      	movcc	r5, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1d630:	b1b5      	cbz	r5, 1d660 <z_set_prio+0x70>
	if (thread_1->base.prio < thread_2->base.prio) {
   1d632:	f995 100e 	ldrsb.w	r1, [r5, #14]
   1d636:	42b1      	cmp	r1, r6
   1d638:	dc03      	bgt.n	1d642 <z_set_prio+0x52>
	return (node == list->tail) ? NULL : node->next;
   1d63a:	42aa      	cmp	r2, r5
   1d63c:	d010      	beq.n	1d660 <z_set_prio+0x70>
   1d63e:	682d      	ldr	r5, [r5, #0]
   1d640:	e7f6      	b.n	1d630 <z_set_prio+0x40>
	node->prev = successor->prev;
   1d642:	686a      	ldr	r2, [r5, #4]
	node->next = successor;
   1d644:	e9c4 5200 	strd	r5, r2, [r4]
	successor->prev->next = node;
   1d648:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1d64a:	606c      	str	r4, [r5, #4]
			update_cache(1);
   1d64c:	2001      	movs	r0, #1
   1d64e:	f7ff fdaf 	bl	1d1b0 <update_cache>
   1d652:	2001      	movs	r0, #1
	__asm__ volatile(
   1d654:	f388 8811 	msr	BASEPRI, r8
   1d658:	f3bf 8f6f 	isb	sy
}
   1d65c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	node->prev = list->tail;
   1d660:	e9c4 0200 	strd	r0, r2, [r4]
	list->tail->next = node;
   1d664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1d666:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1d668:	62fc      	str	r4, [r7, #44]	; 0x2c
}
   1d66a:	e7ef      	b.n	1d64c <z_set_prio+0x5c>
			thread->base.prio = prio;
   1d66c:	73a6      	strb	r6, [r4, #14]
   1d66e:	2000      	movs	r0, #0
   1d670:	e7f0      	b.n	1d654 <z_set_prio+0x64>
   1d672:	bf00      	nop
   1d674:	2000963c 	.word	0x2000963c

0001d678 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   1d678:	4b04      	ldr	r3, [pc, #16]	; (1d68c <z_sched_init+0x14>)
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   1d67a:	2100      	movs	r1, #0
   1d67c:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   1d680:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   1d684:	4608      	mov	r0, r1
   1d686:	f7ff bd3d 	b.w	1d104 <k_sched_time_slice_set>
   1d68a:	bf00      	nop
   1d68c:	2000963c 	.word	0x2000963c

0001d690 <z_impl_k_yield>:
{
   1d690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
   1d692:	4c24      	ldr	r4, [pc, #144]	; (1d724 <z_impl_k_yield+0x94>)
   1d694:	4b24      	ldr	r3, [pc, #144]	; (1d728 <z_impl_k_yield+0x98>)
   1d696:	68a2      	ldr	r2, [r4, #8]
   1d698:	429a      	cmp	r2, r3
   1d69a:	d030      	beq.n	1d6fe <z_impl_k_yield+0x6e>
	__asm__ volatile(
   1d69c:	f04f 0320 	mov.w	r3, #32
   1d6a0:	f3ef 8511 	mrs	r5, BASEPRI
   1d6a4:	f383 8811 	msr	BASEPRI, r3
   1d6a8:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
   1d6ac:	68a1      	ldr	r1, [r4, #8]
   1d6ae:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1d6b2:	f7ff fd67 	bl	1d184 <z_priq_dumb_remove>
	return list->head == list;
   1d6b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
			_priq_run_add(&_kernel.ready_q.runq, _current);
   1d6b8:	68a2      	ldr	r2, [r4, #8]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1d6ba:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d6bc:	4283      	cmp	r3, r0
   1d6be:	bf08      	it	eq
   1d6c0:	2300      	moveq	r3, #0
   1d6c2:	2b00      	cmp	r3, #0
   1d6c4:	bf38      	it	cc
   1d6c6:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1d6c8:	b32b      	cbz	r3, 1d716 <z_impl_k_yield+0x86>
	if (thread_1->base.prio < thread_2->base.prio) {
   1d6ca:	f992 700e 	ldrsb.w	r7, [r2, #14]
   1d6ce:	f993 600e 	ldrsb.w	r6, [r3, #14]
   1d6d2:	42b7      	cmp	r7, r6
   1d6d4:	db03      	blt.n	1d6de <z_impl_k_yield+0x4e>
	return (node == list->tail) ? NULL : node->next;
   1d6d6:	428b      	cmp	r3, r1
   1d6d8:	d01d      	beq.n	1d716 <z_impl_k_yield+0x86>
   1d6da:	681b      	ldr	r3, [r3, #0]
   1d6dc:	e7f4      	b.n	1d6c8 <z_impl_k_yield+0x38>
	node->prev = successor->prev;
   1d6de:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   1d6e0:	e9c2 3100 	strd	r3, r1, [r2]
	successor->prev->next = node;
   1d6e4:	600a      	str	r2, [r1, #0]
	successor->prev = node;
   1d6e6:	605a      	str	r2, [r3, #4]
	thread->base.thread_state |= states;
   1d6e8:	7b53      	ldrb	r3, [r2, #13]
   1d6ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1d6ee:	7353      	strb	r3, [r2, #13]
			update_cache(1);
   1d6f0:	2001      	movs	r0, #1
   1d6f2:	f7ff fd5d 	bl	1d1b0 <update_cache>
	__asm__ volatile(
   1d6f6:	f385 8811 	msr	BASEPRI, r5
   1d6fa:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1d6fe:	f04f 0320 	mov.w	r3, #32
   1d702:	f3ef 8011 	mrs	r0, BASEPRI
   1d706:	f383 8811 	msr	BASEPRI, r3
   1d70a:	f3bf 8f6f 	isb	sy
}
   1d70e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1d712:	f7e9 be77 	b.w	7404 <arch_swap>
	node->prev = list->tail;
   1d716:	e9c2 0100 	strd	r0, r1, [r2]
	list->tail->next = node;
   1d71a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1d71c:	601a      	str	r2, [r3, #0]
	list->tail = node;
   1d71e:	62e2      	str	r2, [r4, #44]	; 0x2c
}
   1d720:	e7e2      	b.n	1d6e8 <z_impl_k_yield+0x58>
   1d722:	bf00      	nop
   1d724:	2000963c 	.word	0x2000963c
   1d728:	20001b30 	.word	0x20001b30

0001d72c <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   1d72c:	460b      	mov	r3, r1
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1d72e:	3301      	adds	r3, #1
   1d730:	bf08      	it	eq
   1d732:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   1d736:	b510      	push	{r4, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1d738:	d106      	bne.n	1d748 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   1d73a:	4b0b      	ldr	r3, [pc, #44]	; (1d768 <z_impl_k_sleep+0x3c>)
   1d73c:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1d73e:	f7ff fe45 	bl	1d3cc <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   1d742:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	ticks = timeout.ticks;
#endif

	ticks = z_tick_sleep(ticks);
	return k_ticks_to_ms_floor64(ticks);
}
   1d746:	bd10      	pop	{r4, pc}
	ticks = z_tick_sleep(ticks);
   1d748:	4604      	mov	r4, r0
	if (ticks == 0) {
   1d74a:	b948      	cbnz	r0, 1d760 <z_impl_k_sleep+0x34>
	z_impl_k_yield();
   1d74c:	f7ff ffa0 	bl	1d690 <z_impl_k_yield>
			return (t * to_hz + off) / from_hz;
   1d750:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   1d754:	fb84 3400 	smull	r3, r4, r4, r0
   1d758:	0bd8      	lsrs	r0, r3, #15
   1d75a:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   1d75e:	e7f2      	b.n	1d746 <z_impl_k_sleep+0x1a>
   1d760:	f7ff fede 	bl	1d520 <z_tick_sleep.part.0>
   1d764:	4604      	mov	r4, r0
   1d766:	e7f3      	b.n	1d750 <z_impl_k_sleep+0x24>
   1d768:	2000963c 	.word	0x2000963c

0001d76c <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   1d76c:	4b01      	ldr	r3, [pc, #4]	; (1d774 <z_impl_k_current_get+0x8>)
   1d76e:	6898      	ldr	r0, [r3, #8]
   1d770:	4770      	bx	lr
   1d772:	bf00      	nop
   1d774:	2000963c 	.word	0x2000963c

0001d778 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1d778:	b538      	push	{r3, r4, r5, lr}
   1d77a:	4604      	mov	r4, r0
   1d77c:	f04f 0320 	mov.w	r3, #32
   1d780:	f3ef 8511 	mrs	r5, BASEPRI
   1d784:	f383 8811 	msr	BASEPRI, r3
   1d788:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread = z_unpend_first_thread(&sem->wait_q);
   1d78c:	f005 fbf4 	bl	22f78 <z_unpend_first_thread>

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);

	if (thread != NULL) {
   1d790:	b148      	cbz	r0, 1d7a6 <z_impl_k_sem_give+0x2e>
   1d792:	2200      	movs	r2, #0
   1d794:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   1d796:	f005 fb79 	bl	22e8c <z_ready_thread>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	z_reschedule(&lock, key);
   1d79a:	4629      	mov	r1, r5
   1d79c:	4808      	ldr	r0, [pc, #32]	; (1d7c0 <z_impl_k_sem_give+0x48>)
}
   1d79e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   1d7a2:	f005 bb2b 	b.w	22dfc <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1d7a6:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   1d7aa:	429a      	cmp	r2, r3
   1d7ac:	bf18      	it	ne
   1d7ae:	3301      	addne	r3, #1
   1d7b0:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1d7b2:	2102      	movs	r1, #2
   1d7b4:	f104 0010 	add.w	r0, r4, #16
   1d7b8:	f005 fe68 	bl	2348c <z_handle_obj_poll_events>
}
   1d7bc:	e7ed      	b.n	1d79a <z_impl_k_sem_give+0x22>
   1d7be:	bf00      	nop
   1d7c0:	20009c6e 	.word	0x20009c6e

0001d7c4 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   1d7c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1d7c6:	4614      	mov	r4, r2
   1d7c8:	461d      	mov	r5, r3
   1d7ca:	f04f 0320 	mov.w	r3, #32
   1d7ce:	f3ef 8111 	mrs	r1, BASEPRI
   1d7d2:	f383 8811 	msr	BASEPRI, r3
   1d7d6:	f3bf 8f6f 	isb	sy
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (likely(sem->count > 0U)) {
   1d7da:	6883      	ldr	r3, [r0, #8]
   1d7dc:	b143      	cbz	r3, 1d7f0 <z_impl_k_sem_take+0x2c>
		sem->count--;
   1d7de:	3b01      	subs	r3, #1
   1d7e0:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
   1d7e2:	f381 8811 	msr	BASEPRI, r1
   1d7e6:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   1d7ea:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   1d7ec:	b003      	add	sp, #12
   1d7ee:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1d7f0:	ea54 0305 	orrs.w	r3, r4, r5
   1d7f4:	d106      	bne.n	1d804 <z_impl_k_sem_take+0x40>
   1d7f6:	f381 8811 	msr	BASEPRI, r1
   1d7fa:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   1d7fe:	f06f 000f 	mvn.w	r0, #15
   1d802:	e7f3      	b.n	1d7ec <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1d804:	4602      	mov	r2, r0
   1d806:	e9cd 4500 	strd	r4, r5, [sp]
   1d80a:	4802      	ldr	r0, [pc, #8]	; (1d814 <z_impl_k_sem_take+0x50>)
   1d80c:	f7ff fedc 	bl	1d5c8 <z_pend_curr>
	return ret;
   1d810:	e7ec      	b.n	1d7ec <z_impl_k_sem_take+0x28>
   1d812:	bf00      	nop
   1d814:	20009c6e 	.word	0x20009c6e

0001d818 <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   1d818:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   1d81a:	4c08      	ldr	r4, [pc, #32]	; (1d83c <k_sys_work_q_init+0x24>)
   1d81c:	4908      	ldr	r1, [pc, #32]	; (1d840 <k_sys_work_q_init+0x28>)
   1d81e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1d822:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1d826:	4620      	mov	r0, r4
   1d828:	f000 f8be 	bl	1d9a8 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   1d82c:	4905      	ldr	r1, [pc, #20]	; (1d844 <k_sys_work_q_init+0x2c>)
   1d82e:	f104 0018 	add.w	r0, r4, #24
   1d832:	f005 fbf6 	bl	23022 <z_impl_k_thread_name_set>
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   1d836:	2000      	movs	r0, #0
   1d838:	bd10      	pop	{r4, pc}
   1d83a:	bf00      	nop
   1d83c:	20001c30 	.word	0x20001c30
   1d840:	2000d1d0 	.word	0x2000d1d0
   1d844:	00026e59 	.word	0x00026e59

0001d848 <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, uint32_t options, const char *name)
{
   1d848:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d84a:	b087      	sub	sp, #28
   1d84c:	e9dd 670f 	ldrd	r6, r7, [sp, #60]	; 0x3c
	sys_dlist_init(&w->waitq);
   1d850:	f100 0530 	add.w	r5, r0, #48	; 0x30
#endif
#endif
	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);

	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1d854:	e9cd 6703 	strd	r6, r7, [sp, #12]
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
	thread_base->thread_state = (uint8_t)initial_state;

	thread_base->prio = priority;
   1d858:	7386      	strb	r6, [r0, #14]
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1d85a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   1d85c:	9602      	str	r6, [sp, #8]
	list->tail = (sys_dnode_t *)list;
   1d85e:	e9c0 550c 	strd	r5, r5, [r0, #48]	; 0x30
   1d862:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   1d864:	9601      	str	r6, [sp, #4]
	thread_base->thread_state = (uint8_t)initial_state;
   1d866:	2504      	movs	r5, #4
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1d868:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	thread_base->thread_state = (uint8_t)initial_state;
   1d86a:	7345      	strb	r5, [r0, #13]

	thread_base->sched_locked = 0U;
   1d86c:	2500      	movs	r5, #0
	node->prev = NULL;
   1d86e:	e9c0 5506 	strd	r5, r5, [r0, #24]
	thread_base->user_options = (uint8_t)options;
   1d872:	7307      	strb	r7, [r0, #12]
	thread_base->sched_locked = 0U;
   1d874:	73c5      	strb	r5, [r0, #15]
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1d876:	9600      	str	r6, [sp, #0]
{
   1d878:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1d87a:	f7e9 fe69 	bl	7550 <arch_new_thread>
	if (!_current) {
   1d87e:	4b04      	ldr	r3, [pc, #16]	; (1d890 <z_setup_new_thread+0x48>)
   1d880:	689b      	ldr	r3, [r3, #8]
	new_thread->fn_abort = NULL;
   1d882:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
	if (!_current) {
   1d886:	b103      	cbz	r3, 1d88a <z_setup_new_thread+0x42>
	new_thread->resource_pool = _current->resource_pool;
   1d888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   1d88a:	6723      	str	r3, [r4, #112]	; 0x70
}
   1d88c:	b007      	add	sp, #28
   1d88e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d890:	2000963c 	.word	0x2000963c

0001d894 <z_impl_k_thread_create>:
{
   1d894:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d896:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1d898:	2500      	movs	r5, #0
   1d89a:	9505      	str	r5, [sp, #20]
   1d89c:	9d10      	ldr	r5, [sp, #64]	; 0x40
   1d89e:	9504      	str	r5, [sp, #16]
   1d8a0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   1d8a2:	9503      	str	r5, [sp, #12]
   1d8a4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1d8a6:	9502      	str	r5, [sp, #8]
{
   1d8a8:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1d8ac:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1d8ae:	9501      	str	r5, [sp, #4]
   1d8b0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1d8b2:	9500      	str	r5, [sp, #0]
{
   1d8b4:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1d8b6:	f7ff ffc7 	bl	1d848 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   1d8ba:	1c7b      	adds	r3, r7, #1
   1d8bc:	bf08      	it	eq
   1d8be:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   1d8c2:	d005      	beq.n	1d8d0 <z_impl_k_thread_create+0x3c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1d8c4:	ea56 0307 	orrs.w	r3, r6, r7
   1d8c8:	d105      	bne.n	1d8d6 <z_impl_k_thread_create+0x42>
	z_sched_start(thread);
   1d8ca:	4620      	mov	r0, r4
   1d8cc:	f7ff fce4 	bl	1d298 <z_sched_start>
}
   1d8d0:	4620      	mov	r0, r4
   1d8d2:	b007      	add	sp, #28
   1d8d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   1d8d6:	4904      	ldr	r1, [pc, #16]	; (1d8e8 <z_impl_k_thread_create+0x54>)
   1d8d8:	4632      	mov	r2, r6
   1d8da:	463b      	mov	r3, r7
   1d8dc:	f104 0018 	add.w	r0, r4, #24
   1d8e0:	f000 f906 	bl	1daf0 <z_add_timeout>
   1d8e4:	e7f4      	b.n	1d8d0 <z_impl_k_thread_create+0x3c>
   1d8e6:	bf00      	nop
   1d8e8:	00022ead 	.word	0x00022ead

0001d8ec <z_init_static_threads>:
{
   1d8ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   1d8f0:	4e2a      	ldr	r6, [pc, #168]	; (1d99c <z_init_static_threads+0xb0>)
   1d8f2:	4d2b      	ldr	r5, [pc, #172]	; (1d9a0 <z_init_static_threads+0xb4>)
{
   1d8f4:	b086      	sub	sp, #24
   1d8f6:	46b0      	mov	r8, r6
	_FOREACH_STATIC_THREAD(thread_data) {
   1d8f8:	42b5      	cmp	r5, r6
   1d8fa:	f105 0430 	add.w	r4, r5, #48	; 0x30
   1d8fe:	d310      	bcc.n	1d922 <z_init_static_threads+0x36>
	k_sched_lock();
   1d900:	f7ff fc2c 	bl	1d15c <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   1d904:	4c26      	ldr	r4, [pc, #152]	; (1d9a0 <z_init_static_threads+0xb4>)
   1d906:	f8df a09c 	ldr.w	sl, [pc, #156]	; 1d9a4 <z_init_static_threads+0xb8>
   1d90a:	f44f 4900 	mov.w	r9, #32768	; 0x8000
   1d90e:	f240 36e7 	movw	r6, #999	; 0x3e7
   1d912:	2700      	movs	r7, #0
   1d914:	4544      	cmp	r4, r8
   1d916:	d321      	bcc.n	1d95c <z_init_static_threads+0x70>
}
   1d918:	b006      	add	sp, #24
   1d91a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
   1d91e:	f7ff bc6b 	b.w	1d1f8 <k_sched_unlock>
		z_setup_new_thread(
   1d922:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1d926:	9305      	str	r3, [sp, #20]
   1d928:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1d92c:	9304      	str	r3, [sp, #16]
   1d92e:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1d932:	9303      	str	r3, [sp, #12]
   1d934:	f854 3c18 	ldr.w	r3, [r4, #-24]
   1d938:	9302      	str	r3, [sp, #8]
   1d93a:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   1d93e:	9301      	str	r3, [sp, #4]
   1d940:	f854 3c20 	ldr.w	r3, [r4, #-32]
   1d944:	9300      	str	r3, [sp, #0]
   1d946:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   1d94a:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   1d94e:	f7ff ff7b 	bl	1d848 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   1d952:	f854 3c30 	ldr.w	r3, [r4, #-48]
   1d956:	65dd      	str	r5, [r3, #92]	; 0x5c
   1d958:	4625      	mov	r5, r4
   1d95a:	e7cd      	b.n	1d8f8 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   1d95c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1d95e:	1c5a      	adds	r2, r3, #1
   1d960:	d00d      	beq.n	1d97e <z_init_static_threads+0x92>
					    K_MSEC(thread_data->init_delay));
   1d962:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1d966:	4630      	mov	r0, r6
   1d968:	4639      	mov	r1, r7
   1d96a:	fbc9 0103 	smlal	r0, r1, r9, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1d96e:	42b9      	cmp	r1, r7
   1d970:	bf08      	it	eq
   1d972:	42b0      	cmpeq	r0, r6
			schedule_new_thread(thread_data->init_thread,
   1d974:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1d976:	d104      	bne.n	1d982 <z_init_static_threads+0x96>
	z_sched_start(thread);
   1d978:	4628      	mov	r0, r5
   1d97a:	f7ff fc8d 	bl	1d298 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   1d97e:	3430      	adds	r4, #48	; 0x30
   1d980:	e7c8      	b.n	1d914 <z_init_static_threads+0x28>
   1d982:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1d986:	2300      	movs	r3, #0
   1d988:	f7e3 f858 	bl	a3c <__aeabi_uldivmod>
   1d98c:	4602      	mov	r2, r0
   1d98e:	460b      	mov	r3, r1
   1d990:	f105 0018 	add.w	r0, r5, #24
   1d994:	4651      	mov	r1, sl
   1d996:	f000 f8ab 	bl	1daf0 <z_add_timeout>
   1d99a:	e7f0      	b.n	1d97e <z_init_static_threads+0x92>
   1d99c:	20000798 	.word	0x20000798
   1d9a0:	20000798 	.word	0x20000798
   1d9a4:	00022ead 	.word	0x00022ead

0001d9a8 <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   1d9a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d9ac:	4604      	mov	r4, r0
   1d9ae:	b088      	sub	sp, #32
   1d9b0:	460d      	mov	r5, r1
   1d9b2:	4616      	mov	r6, r2
   1d9b4:	461f      	mov	r7, r3
	z_impl_k_queue_init(queue);
   1d9b6:	f005 f99d 	bl	22cf4 <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   1d9ba:	f104 0818 	add.w	r8, r4, #24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1d9be:	2200      	movs	r2, #0
   1d9c0:	2300      	movs	r3, #0
   1d9c2:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1d9c6:	e9cd 7203 	strd	r7, r2, [sp, #12]
   1d9ca:	e9cd 2201 	strd	r2, r2, [sp, #4]
   1d9ce:	4b07      	ldr	r3, [pc, #28]	; (1d9ec <k_work_q_start+0x44>)
   1d9d0:	9400      	str	r4, [sp, #0]
   1d9d2:	4632      	mov	r2, r6
   1d9d4:	4629      	mov	r1, r5
   1d9d6:	4640      	mov	r0, r8
   1d9d8:	f7ff ff5c 	bl	1d894 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   1d9dc:	4904      	ldr	r1, [pc, #16]	; (1d9f0 <k_work_q_start+0x48>)
   1d9de:	4640      	mov	r0, r8
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   1d9e0:	b008      	add	sp, #32
   1d9e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1d9e6:	f005 bb1c 	b.w	23022 <z_impl_k_thread_name_set>
   1d9ea:	bf00      	nop
   1d9ec:	0001df9b 	.word	0x0001df9b
   1d9f0:	00026e62 	.word	0x00026e62

0001d9f4 <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   k_timeout_t delay)
{
   1d9f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1d9f8:	4606      	mov	r6, r0
   1d9fa:	460d      	mov	r5, r1
   1d9fc:	4690      	mov	r8, r2
   1d9fe:	4699      	mov	r9, r3
	__asm__ volatile(
   1da00:	f04f 0320 	mov.w	r3, #32
   1da04:	f3ef 8711 	mrs	r7, BASEPRI
   1da08:	f383 8811 	msr	BASEPRI, r3
   1da0c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q != NULL && work->work_q != work_q) {
   1da10:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   1da12:	b17b      	cbz	r3, 1da34 <k_delayed_work_submit_to_queue+0x40>
   1da14:	4283      	cmp	r3, r0
   1da16:	d128      	bne.n	1da6a <k_delayed_work_submit_to_queue+0x76>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = work_cancel(work);
   1da18:	4628      	mov	r0, r5
   1da1a:	f005 fb24 	bl	23066 <work_cancel>
		/* -EALREADY indicates the work has already completed so this
		 * is likely a recurring work.
		 */
		if (err == -EALREADY) {
   1da1e:	f110 0f45 	cmn.w	r0, #69	; 0x45
		err = work_cancel(work);
   1da22:	4604      	mov	r4, r0
		if (err == -EALREADY) {
   1da24:	d008      	beq.n	1da38 <k_delayed_work_submit_to_queue+0x44>
			err = 0;
		} else if (err < 0) {
   1da26:	2800      	cmp	r0, #0
   1da28:	da07      	bge.n	1da3a <k_delayed_work_submit_to_queue+0x46>
	__asm__ volatile(
   1da2a:	f387 8811 	msr	BASEPRI, r7
   1da2e:	f3bf 8f6f 	isb	sy
	/* Add timeout */
	z_add_timeout(&work->timeout, work_timeout, delay);

done:
	k_spin_unlock(&lock, key);
	return err;
   1da32:	e00f      	b.n	1da54 <k_delayed_work_submit_to_queue+0x60>
	if (work->work_q == work_q) {
   1da34:	2800      	cmp	r0, #0
   1da36:	d0ef      	beq.n	1da18 <k_delayed_work_submit_to_queue+0x24>
	int err = 0;
   1da38:	2400      	movs	r4, #0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1da3a:	ea58 0309 	orrs.w	r3, r8, r9
	work->work_q = work_q;
   1da3e:	62ae      	str	r6, [r5, #40]	; 0x28
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1da40:	d10b      	bne.n	1da5a <k_delayed_work_submit_to_queue+0x66>
   1da42:	f387 8811 	msr	BASEPRI, r7
   1da46:	f3bf 8f6f 	isb	sy
		k_work_submit_to_queue(work_q, &work->work);
   1da4a:	4629      	mov	r1, r5
   1da4c:	4630      	mov	r0, r6
   1da4e:	f005 faed 	bl	2302c <k_work_submit_to_queue>
		return 0;
   1da52:	2400      	movs	r4, #0
}
   1da54:	4620      	mov	r0, r4
   1da56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_add_timeout(&work->timeout, work_timeout, delay);
   1da5a:	4905      	ldr	r1, [pc, #20]	; (1da70 <k_delayed_work_submit_to_queue+0x7c>)
   1da5c:	4642      	mov	r2, r8
   1da5e:	464b      	mov	r3, r9
   1da60:	f105 0010 	add.w	r0, r5, #16
   1da64:	f000 f844 	bl	1daf0 <z_add_timeout>
   1da68:	e7df      	b.n	1da2a <k_delayed_work_submit_to_queue+0x36>
		err = -EADDRINUSE;
   1da6a:	f06f 042f 	mvn.w	r4, #47	; 0x2f
   1da6e:	e7dc      	b.n	1da2a <k_delayed_work_submit_to_queue+0x36>
   1da70:	0002305d 	.word	0x0002305d

0001da74 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
   1da74:	4b03      	ldr	r3, [pc, #12]	; (1da84 <elapsed+0x10>)
   1da76:	681b      	ldr	r3, [r3, #0]
   1da78:	b90b      	cbnz	r3, 1da7e <elapsed+0xa>
   1da7a:	f7e9 ba77 	b.w	6f6c <z_clock_elapsed>
}
   1da7e:	2000      	movs	r0, #0
   1da80:	4770      	bx	lr
   1da82:	bf00      	nop
   1da84:	20009678 	.word	0x20009678

0001da88 <remove_timeout>:
{
   1da88:	b530      	push	{r4, r5, lr}
   1da8a:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1da8c:	b168      	cbz	r0, 1daaa <remove_timeout+0x22>
   1da8e:	4a0a      	ldr	r2, [pc, #40]	; (1dab8 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
   1da90:	6852      	ldr	r2, [r2, #4]
   1da92:	4290      	cmp	r0, r2
   1da94:	d009      	beq.n	1daaa <remove_timeout+0x22>
	if (next(t) != NULL) {
   1da96:	b143      	cbz	r3, 1daaa <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   1da98:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   1da9c:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   1daa0:	1912      	adds	r2, r2, r4
   1daa2:	eb45 0101 	adc.w	r1, r5, r1
   1daa6:	e9c3 2104 	strd	r2, r1, [r3, #16]
	node->prev->next = node->next;
   1daaa:	6842      	ldr	r2, [r0, #4]
   1daac:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1daae:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1dab0:	2300      	movs	r3, #0
	node->prev = NULL;
   1dab2:	e9c0 3300 	strd	r3, r3, [r0]
}
   1dab6:	bd30      	pop	{r4, r5, pc}
   1dab8:	200006ac 	.word	0x200006ac

0001dabc <next_timeout>:
	return list->head == list;
   1dabc:	4b0a      	ldr	r3, [pc, #40]	; (1dae8 <next_timeout+0x2c>)

static int32_t next_timeout(void)
{
   1dabe:	b510      	push	{r4, lr}
   1dac0:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1dac2:	429c      	cmp	r4, r3
   1dac4:	bf08      	it	eq
   1dac6:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   1dac8:	f7ff ffd4 	bl	1da74 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   1dacc:	b144      	cbz	r4, 1dae0 <next_timeout+0x24>
   1dace:	6923      	ldr	r3, [r4, #16]
   1dad0:	1a18      	subs	r0, r3, r0

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1dad2:	4b06      	ldr	r3, [pc, #24]	; (1daec <next_timeout+0x30>)
   1dad4:	691b      	ldr	r3, [r3, #16]
   1dad6:	b113      	cbz	r3, 1dade <next_timeout+0x22>
   1dad8:	4298      	cmp	r0, r3
   1dada:	bfa8      	it	ge
   1dadc:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   1dade:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   1dae0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1dae4:	e7f5      	b.n	1dad2 <next_timeout+0x16>
   1dae6:	bf00      	nop
   1dae8:	200006ac 	.word	0x200006ac
   1daec:	2000963c 	.word	0x2000963c

0001daf0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   1daf0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1daf4:	9101      	str	r1, [sp, #4]
   1daf6:	4619      	mov	r1, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1daf8:	1c4b      	adds	r3, r1, #1
   1dafa:	bf08      	it	eq
   1dafc:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   1db00:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1db02:	d06c      	beq.n	1dbde <z_add_timeout+0xee>
	}

#ifdef CONFIG_LEGACY_TIMEOUT_API
	k_ticks_t ticks = timeout;
#else
	k_ticks_t ticks = timeout.ticks + 1;
   1db04:	1c54      	adds	r4, r2, #1

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   1db06:	f06f 0301 	mvn.w	r3, #1
	k_ticks_t ticks = timeout.ticks + 1;
   1db0a:	f141 0500 	adc.w	r5, r1, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   1db0e:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   1db12:	ebb3 0804 	subs.w	r8, r3, r4
   1db16:	eb6b 0905 	sbc.w	r9, fp, r5
   1db1a:	f1b8 0f00 	cmp.w	r8, #0
   1db1e:	f179 0300 	sbcs.w	r3, r9, #0
   1db22:	db0f      	blt.n	1db44 <z_add_timeout+0x54>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
   1db24:	f7ff ffa6 	bl	1da74 <elapsed>
   1db28:	4a33      	ldr	r2, [pc, #204]	; (1dbf8 <z_add_timeout+0x108>)
   1db2a:	e9d2 1c00 	ldrd	r1, ip, [r2]
   1db2e:	f06f 0301 	mvn.w	r3, #1
   1db32:	1a5b      	subs	r3, r3, r1
   1db34:	eb6b 020c 	sbc.w	r2, fp, ip
   1db38:	1b1e      	subs	r6, r3, r4
   1db3a:	eb62 0705 	sbc.w	r7, r2, r5
   1db3e:	1a34      	subs	r4, r6, r0
   1db40:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	}
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   1db44:	9b01      	ldr	r3, [sp, #4]
   1db46:	f8ca 3008 	str.w	r3, [sl, #8]
	__asm__ volatile(
   1db4a:	f04f 0320 	mov.w	r3, #32
   1db4e:	f3ef 8611 	mrs	r6, BASEPRI
   1db52:	f383 8811 	msr	BASEPRI, r3
   1db56:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   1db5a:	f7ff ff8b 	bl	1da74 <elapsed>
	ticks = MAX(1, ticks);
   1db5e:	2c01      	cmp	r4, #1
   1db60:	f175 0300 	sbcs.w	r3, r5, #0
	return list->head == list;
   1db64:	4b25      	ldr	r3, [pc, #148]	; (1dbfc <z_add_timeout+0x10c>)
   1db66:	bfb8      	it	lt
   1db68:	2401      	movlt	r4, #1
   1db6a:	681a      	ldr	r2, [r3, #0]
   1db6c:	bfb8      	it	lt
   1db6e:	2500      	movlt	r5, #0
		to->dticks = ticks + elapsed();
   1db70:	1824      	adds	r4, r4, r0
   1db72:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1db76:	429a      	cmp	r2, r3
   1db78:	e9ca 4504 	strd	r4, r5, [sl, #16]
   1db7c:	d001      	beq.n	1db82 <z_add_timeout+0x92>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1db7e:	685f      	ldr	r7, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
   1db80:	b952      	cbnz	r2, 1db98 <z_add_timeout+0xa8>
	node->prev = list->tail;
   1db82:	685a      	ldr	r2, [r3, #4]
   1db84:	f8ca 2004 	str.w	r2, [sl, #4]
	list->tail->next = node;
   1db88:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   1db8a:	f8ca 3000 	str.w	r3, [sl]
	list->tail->next = node;
   1db8e:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   1db92:	f8c3 a004 	str.w	sl, [r3, #4]
}
   1db96:	e014      	b.n	1dbc2 <z_add_timeout+0xd2>
			__ASSERT(t->dticks >= 0, "");

			if (t->dticks > to->dticks) {
   1db98:	e9d2 8904 	ldrd	r8, r9, [r2, #16]
   1db9c:	e9da 4504 	ldrd	r4, r5, [sl, #16]
   1dba0:	454d      	cmp	r5, r9
   1dba2:	bf08      	it	eq
   1dba4:	4544      	cmpeq	r4, r8
   1dba6:	d21d      	bcs.n	1dbe4 <z_add_timeout+0xf4>
				t->dticks -= to->dticks;
   1dba8:	ebb8 0004 	subs.w	r0, r8, r4
   1dbac:	eb69 0105 	sbc.w	r1, r9, r5
   1dbb0:	e9c2 0104 	strd	r0, r1, [r2, #16]
	node->prev = successor->prev;
   1dbb4:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   1dbb6:	e9ca 2100 	strd	r2, r1, [sl]
	successor->prev->next = node;
   1dbba:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
   1dbbe:	f8c2 a004 	str.w	sl, [r2, #4]
	return list->head == list;
   1dbc2:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1dbc4:	429a      	cmp	r2, r3
   1dbc6:	d006      	beq.n	1dbd6 <z_add_timeout+0xe6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   1dbc8:	4592      	cmp	sl, r2
   1dbca:	d104      	bne.n	1dbd6 <z_add_timeout+0xe6>
			z_clock_set_timeout(next_timeout(), false);
   1dbcc:	f7ff ff76 	bl	1dabc <next_timeout>
   1dbd0:	2100      	movs	r1, #0
   1dbd2:	f7e9 f96d 	bl	6eb0 <z_clock_set_timeout>
	__asm__ volatile(
   1dbd6:	f386 8811 	msr	BASEPRI, r6
   1dbda:	f3bf 8f6f 	isb	sy
		}
	}
}
   1dbde:	b003      	add	sp, #12
   1dbe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
   1dbe4:	ebb4 0008 	subs.w	r0, r4, r8
   1dbe8:	eb65 0109 	sbc.w	r1, r5, r9
	return (node == list->tail) ? NULL : node->next;
   1dbec:	42ba      	cmp	r2, r7
   1dbee:	e9ca 0104 	strd	r0, r1, [sl, #16]
   1dbf2:	d0c6      	beq.n	1db82 <z_add_timeout+0x92>
   1dbf4:	6812      	ldr	r2, [r2, #0]
   1dbf6:	e7c3      	b.n	1db80 <z_add_timeout+0x90>
   1dbf8:	20001cc8 	.word	0x20001cc8
   1dbfc:	200006ac 	.word	0x200006ac

0001dc00 <z_clock_announce>:
		}
	}
}

void z_clock_announce(int32_t ticks)
{
   1dc00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dc04:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   1dc06:	f7ff fbab 	bl	1d360 <z_time_slice>
	__asm__ volatile(
   1dc0a:	f04f 0320 	mov.w	r3, #32
   1dc0e:	f3ef 8411 	mrs	r4, BASEPRI
   1dc12:	f383 8811 	msr	BASEPRI, r3
   1dc16:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   1dc1a:	4d2d      	ldr	r5, [pc, #180]	; (1dcd0 <z_clock_announce+0xd0>)
   1dc1c:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 1dcd4 <z_clock_announce+0xd4>
	return list->head == list;
   1dc20:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 1dcd8 <z_clock_announce+0xd8>
   1dc24:	602e      	str	r6, [r5, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
   1dc26:	4651      	mov	r1, sl
   1dc28:	f8d5 c000 	ldr.w	ip, [r5]
   1dc2c:	f8db 0000 	ldr.w	r0, [fp]
   1dc30:	4662      	mov	r2, ip
   1dc32:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1dc34:	4558      	cmp	r0, fp
   1dc36:	e9cd 2300 	strd	r2, r3, [sp]
   1dc3a:	e9da 8900 	ldrd	r8, r9, [sl]
   1dc3e:	d00e      	beq.n	1dc5e <z_clock_announce+0x5e>
   1dc40:	b168      	cbz	r0, 1dc5e <z_clock_announce+0x5e>
   1dc42:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
   1dc46:	42bb      	cmp	r3, r7
   1dc48:	bf08      	it	eq
   1dc4a:	45b4      	cmpeq	ip, r6
   1dc4c:	d21e      	bcs.n	1dc8c <z_clock_announce+0x8c>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   1dc4e:	9b00      	ldr	r3, [sp, #0]
   1dc50:	ebb6 0c03 	subs.w	ip, r6, r3
   1dc54:	9b01      	ldr	r3, [sp, #4]
   1dc56:	eb67 0603 	sbc.w	r6, r7, r3
   1dc5a:	e9c0 c604 	strd	ip, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
   1dc5e:	9b00      	ldr	r3, [sp, #0]
   1dc60:	eb13 0208 	adds.w	r2, r3, r8
   1dc64:	9b01      	ldr	r3, [sp, #4]
	announce_remaining = 0;
   1dc66:	f04f 0600 	mov.w	r6, #0
	curr_tick += announce_remaining;
   1dc6a:	eb43 0309 	adc.w	r3, r3, r9
   1dc6e:	e9c1 2300 	strd	r2, r3, [r1]
	announce_remaining = 0;
   1dc72:	602e      	str	r6, [r5, #0]

	z_clock_set_timeout(next_timeout(), false);
   1dc74:	f7ff ff22 	bl	1dabc <next_timeout>
   1dc78:	4631      	mov	r1, r6
   1dc7a:	f7e9 f919 	bl	6eb0 <z_clock_set_timeout>
	__asm__ volatile(
   1dc7e:	f384 8811 	msr	BASEPRI, r4
   1dc82:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1dc86:	b003      	add	sp, #12
   1dc88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
   1dc8c:	eb18 0806 	adds.w	r8, r8, r6
		t->dticks = 0;
   1dc90:	f04f 0200 	mov.w	r2, #0
   1dc94:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
   1dc98:	eb49 79e6 	adc.w	r9, r9, r6, asr #31
		t->dticks = 0;
   1dc9c:	e9c0 2304 	strd	r2, r3, [r0, #16]
		announce_remaining -= dt;
   1dca0:	ebac 0606 	sub.w	r6, ip, r6
		curr_tick += dt;
   1dca4:	e9ca 8900 	strd	r8, r9, [sl]
		announce_remaining -= dt;
   1dca8:	602e      	str	r6, [r5, #0]
		remove_timeout(t);
   1dcaa:	f7ff feed 	bl	1da88 <remove_timeout>
   1dcae:	f384 8811 	msr	BASEPRI, r4
   1dcb2:	f3bf 8f6f 	isb	sy
		t->fn(t);
   1dcb6:	6883      	ldr	r3, [r0, #8]
   1dcb8:	4798      	blx	r3
	__asm__ volatile(
   1dcba:	f04f 0320 	mov.w	r3, #32
   1dcbe:	f3ef 8411 	mrs	r4, BASEPRI
   1dcc2:	f383 8811 	msr	BASEPRI, r3
   1dcc6:	f3bf 8f6f 	isb	sy

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
   1dcca:	4902      	ldr	r1, [pc, #8]	; (1dcd4 <z_clock_announce+0xd4>)
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   1dccc:	e7ac      	b.n	1dc28 <z_clock_announce+0x28>
   1dcce:	bf00      	nop
   1dcd0:	20009678 	.word	0x20009678
   1dcd4:	20001cc8 	.word	0x20001cc8
   1dcd8:	200006ac 	.word	0x200006ac

0001dcdc <z_tick_get>:

int64_t z_tick_get(void)
{
   1dcdc:	b510      	push	{r4, lr}
   1dcde:	f04f 0320 	mov.w	r3, #32
   1dce2:	f3ef 8411 	mrs	r4, BASEPRI
   1dce6:	f383 8811 	msr	BASEPRI, r3
   1dcea:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   1dcee:	f7e9 f93d 	bl	6f6c <z_clock_elapsed>
   1dcf2:	4b06      	ldr	r3, [pc, #24]	; (1dd0c <z_tick_get+0x30>)
   1dcf4:	e9d3 2300 	ldrd	r2, r3, [r3]
   1dcf8:	1812      	adds	r2, r2, r0
   1dcfa:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
   1dcfe:	f384 8811 	msr	BASEPRI, r4
   1dd02:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   1dd06:	4610      	mov	r0, r2
   1dd08:	4619      	mov	r1, r3
   1dd0a:	bd10      	pop	{r4, pc}
   1dd0c:	20001cc8 	.word	0x20001cc8

0001dd10 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   1dd10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   1dd12:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   1dd16:	1c56      	adds	r6, r2, #1
   1dd18:	f143 0700 	adc.w	r7, r3, #0
   1dd1c:	2f00      	cmp	r7, #0
   1dd1e:	bf08      	it	eq
   1dd20:	2e02      	cmpeq	r6, #2
{
   1dd22:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   1dd24:	d302      	bcc.n	1dd2c <z_timer_expiration_handler+0x1c>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1dd26:	490c      	ldr	r1, [pc, #48]	; (1dd58 <z_timer_expiration_handler+0x48>)
   1dd28:	f7ff fee2 	bl	1daf0 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   1dd2c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1dd2e:	3301      	adds	r3, #1
   1dd30:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   1dd32:	6a23      	ldr	r3, [r4, #32]
   1dd34:	b10b      	cbz	r3, 1dd3a <z_timer_expiration_handler+0x2a>
		timer->expiry_fn(timer);
   1dd36:	4620      	mov	r0, r4
   1dd38:	4798      	blx	r3
	return list->head == list;
   1dd3a:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1dd3e:	42a5      	cmp	r5, r4
   1dd40:	d008      	beq.n	1dd54 <z_timer_expiration_handler+0x44>
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   1dd42:	b13d      	cbz	r5, 1dd54 <z_timer_expiration_handler+0x44>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
   1dd44:	4628      	mov	r0, r5
   1dd46:	f005 f840 	bl	22dca <z_unpend_thread_no_timeout>

	z_ready_thread(thread);
   1dd4a:	4628      	mov	r0, r5
   1dd4c:	f005 f89e 	bl	22e8c <z_ready_thread>
   1dd50:	2300      	movs	r3, #0
   1dd52:	67ab      	str	r3, [r5, #120]	; 0x78

	arch_thread_return_value_set(thread, 0);
}
   1dd54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1dd56:	bf00      	nop
   1dd58:	0001dd11 	.word	0x0001dd11

0001dd5c <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   1dd5c:	e92d 4f73 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, lr}
   1dd60:	4619      	mov	r1, r3
   1dd62:	4606      	mov	r6, r0
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1dd64:	1c4c      	adds	r4, r1, #1
{
   1dd66:	4610      	mov	r0, r2
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1dd68:	bf08      	it	eq
   1dd6a:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   1dd6e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   1dd72:	4680      	mov	r8, r0
   1dd74:	4689      	mov	r9, r1
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1dd76:	d047      	beq.n	1de08 <z_impl_k_timer_start+0xac>
   1dd78:	4614      	mov	r4, r2
   1dd7a:	461d      	mov	r5, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (period.ticks != 0 && Z_TICK_ABS(period.ticks) < 0) {
   1dd7c:	ea54 0305 	orrs.w	r3, r4, r5
   1dd80:	d016      	beq.n	1ddb0 <z_impl_k_timer_start+0x54>
   1dd82:	f06f 0301 	mvn.w	r3, #1
   1dd86:	ebb3 0a02 	subs.w	sl, r3, r2
   1dd8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1dd8e:	eb63 0b05 	sbc.w	fp, r3, r5
   1dd92:	f1ba 0f00 	cmp.w	sl, #0
   1dd96:	f17b 0300 	sbcs.w	r3, fp, #0
   1dd9a:	da09      	bge.n	1ddb0 <z_impl_k_timer_start+0x54>
		period.ticks = MAX(period.ticks - 1, 1);
   1dd9c:	f112 34ff 	adds.w	r4, r2, #4294967295	; 0xffffffff
   1dda0:	f145 35ff 	adc.w	r5, r5, #4294967295	; 0xffffffff
   1dda4:	2c01      	cmp	r4, #1
   1dda6:	f175 0300 	sbcs.w	r3, r5, #0
   1ddaa:	bfbc      	itt	lt
   1ddac:	2401      	movlt	r4, #1
   1ddae:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   1ddb0:	f06f 0301 	mvn.w	r3, #1
   1ddb4:	1a1b      	subs	r3, r3, r0
   1ddb6:	9300      	str	r3, [sp, #0]
   1ddb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ddbc:	eb63 0301 	sbc.w	r3, r3, r1
   1ddc0:	9301      	str	r3, [sp, #4]
   1ddc2:	e9dd 2300 	ldrd	r2, r3, [sp]
   1ddc6:	2a00      	cmp	r2, #0
   1ddc8:	f173 0300 	sbcs.w	r3, r3, #0
   1ddcc:	da0c      	bge.n	1dde8 <z_impl_k_timer_start+0x8c>
		duration.ticks = MAX(duration.ticks - 1, 0);
   1ddce:	f110 38ff 	adds.w	r8, r0, #4294967295	; 0xffffffff
   1ddd2:	f141 39ff 	adc.w	r9, r1, #4294967295	; 0xffffffff
   1ddd6:	f1b8 0f00 	cmp.w	r8, #0
   1ddda:	f179 0300 	sbcs.w	r3, r9, #0
   1ddde:	bfbc      	itt	lt
   1dde0:	f04f 0800 	movlt.w	r8, #0
   1dde4:	f04f 0900 	movlt.w	r9, #0
	}
#endif

	(void)z_abort_timeout(&timer->timeout);
   1dde8:	4630      	mov	r0, r6
   1ddea:	f005 f9a2 	bl	23132 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   1ddee:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1ddf0:	4907      	ldr	r1, [pc, #28]	; (1de10 <z_impl_k_timer_start+0xb4>)
	timer->status = 0U;
   1ddf2:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1ddf4:	4642      	mov	r2, r8
   1ddf6:	464b      	mov	r3, r9
   1ddf8:	4630      	mov	r0, r6
	timer->period = period;
   1ddfa:	e9c6 450a 	strd	r4, r5, [r6, #40]	; 0x28
		     duration);
}
   1ddfe:	b002      	add	sp, #8
   1de00:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1de04:	f7ff be74 	b.w	1daf0 <z_add_timeout>
}
   1de08:	b002      	add	sp, #8
   1de0a:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
   1de0e:	bf00      	nop
   1de10:	0001dd11 	.word	0x0001dd11

0001de14 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   1de14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1de18:	b089      	sub	sp, #36	; 0x24
   1de1a:	461f      	mov	r7, r3
	int events_registered;
	k_spinlock_key_t key;
	struct _poller poller = { .is_polling = true,
   1de1c:	2301      	movs	r3, #1
   1de1e:	f88d 3014 	strb.w	r3, [sp, #20]
				  .thread     = _current,
   1de22:	4b29      	ldr	r3, [pc, #164]	; (1dec8 <z_impl_k_poll+0xb4>)
	struct _poller poller = { .is_polling = true,
   1de24:	689b      	ldr	r3, [r3, #8]
   1de26:	9306      	str	r3, [sp, #24]
   1de28:	4b28      	ldr	r3, [pc, #160]	; (1decc <z_impl_k_poll+0xb8>)
   1de2a:	9307      	str	r3, [sp, #28]

	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	events_registered = register_events(events, num_events, &poller,
   1de2c:	ea52 0307 	orrs.w	r3, r2, r7
{
   1de30:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, &poller,
   1de32:	bf0c      	ite	eq
   1de34:	2301      	moveq	r3, #1
   1de36:	2300      	movne	r3, #0
   1de38:	aa05      	add	r2, sp, #20
{
   1de3a:	4605      	mov	r5, r0
	events_registered = register_events(events, num_events, &poller,
   1de3c:	f005 fab6 	bl	233ac <register_events>
   1de40:	4680      	mov	r8, r0
	__asm__ volatile(
   1de42:	f04f 0320 	mov.w	r3, #32
   1de46:	f3ef 8911 	mrs	r9, BASEPRI
   1de4a:	f383 8811 	msr	BASEPRI, r3
   1de4e:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller.is_polling) {
   1de52:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1de56:	f003 04ff 	and.w	r4, r3, #255	; 0xff
   1de5a:	b963      	cbnz	r3, 1de76 <z_impl_k_poll+0x62>
		clear_event_registrations(events, events_registered, key);
   1de5c:	4601      	mov	r1, r0
   1de5e:	464a      	mov	r2, r9
   1de60:	4628      	mov	r0, r5
   1de62:	f005 fa03 	bl	2326c <clear_event_registrations>
	__asm__ volatile(
   1de66:	f389 8811 	msr	BASEPRI, r9
   1de6a:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
	k_spin_unlock(&lock, key);

	return swap_rc;
}
   1de6e:	4620      	mov	r0, r4
   1de70:	b009      	add	sp, #36	; 0x24
   1de72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	poller.is_polling = false;
   1de76:	2300      	movs	r3, #0
   1de78:	f88d 3014 	strb.w	r3, [sp, #20]
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1de7c:	ea56 0307 	orrs.w	r3, r6, r7
   1de80:	d106      	bne.n	1de90 <z_impl_k_poll+0x7c>
   1de82:	f389 8811 	msr	BASEPRI, r9
   1de86:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   1de8a:	f06f 040a 	mvn.w	r4, #10
   1de8e:	e7ee      	b.n	1de6e <z_impl_k_poll+0x5a>
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   1de90:	aa03      	add	r2, sp, #12
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1de92:	e9cd 6700 	strd	r6, r7, [sp]
   1de96:	4649      	mov	r1, r9
   1de98:	480d      	ldr	r0, [pc, #52]	; (1ded0 <z_impl_k_poll+0xbc>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   1de9a:	e9cd 2203 	strd	r2, r2, [sp, #12]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1de9e:	f7ff fb93 	bl	1d5c8 <z_pend_curr>
   1dea2:	4604      	mov	r4, r0
	__asm__ volatile(
   1dea4:	f04f 0320 	mov.w	r3, #32
   1dea8:	f3ef 8611 	mrs	r6, BASEPRI
   1deac:	f383 8811 	msr	BASEPRI, r3
   1deb0:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   1deb4:	4632      	mov	r2, r6
   1deb6:	4641      	mov	r1, r8
   1deb8:	4628      	mov	r0, r5
   1deba:	f005 f9d7 	bl	2326c <clear_event_registrations>
	__asm__ volatile(
   1debe:	f386 8811 	msr	BASEPRI, r6
   1dec2:	f3bf 8f6f 	isb	sy
	return swap_rc;
   1dec6:	e7d2      	b.n	1de6e <z_impl_k_poll+0x5a>
   1dec8:	2000963c 	.word	0x2000963c
   1decc:	000232f9 	.word	0x000232f9
   1ded0:	20009c6e 	.word	0x20009c6e

0001ded4 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *signal, int result)
{
   1ded4:	b538      	push	{r3, r4, r5, lr}
   1ded6:	4603      	mov	r3, r0
	__asm__ volatile(
   1ded8:	f04f 0220 	mov.w	r2, #32
   1dedc:	f3ef 8511 	mrs	r5, BASEPRI
   1dee0:	f382 8811 	msr	BASEPRI, r2
   1dee4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	signal->result = result;
   1dee8:	60c1      	str	r1, [r0, #12]
	signal->signaled = 1U;
   1deea:	2101      	movs	r1, #1
   1deec:	6081      	str	r1, [r0, #8]
	return list->head == list;
   1deee:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   1def0:	4283      	cmp	r3, r0
   1def2:	d106      	bne.n	1df02 <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   1def4:	f385 8811 	msr	BASEPRI, r5
   1def8:	f3bf 8f6f 	isb	sy

	poll_event = (struct k_poll_event *)sys_dlist_get(&signal->poll_events);
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);
		return 0;
   1defc:	2400      	movs	r4, #0

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);

	z_reschedule(&lock, key);
	return rc;
}
   1defe:	4620      	mov	r0, r4
   1df00:	bd38      	pop	{r3, r4, r5, pc}
	node->prev->next = node->next;
   1df02:	e9d0 3200 	ldrd	r3, r2, [r0]
   1df06:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1df08:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1df0a:	2300      	movs	r3, #0
	node->prev = NULL;
   1df0c:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1df10:	f005 f9d7 	bl	232c2 <signal_poll_event>
	z_reschedule(&lock, key);
   1df14:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1df16:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   1df18:	4801      	ldr	r0, [pc, #4]	; (1df20 <z_impl_k_poll_signal_raise+0x4c>)
   1df1a:	f004 ff6f 	bl	22dfc <z_reschedule>
	return rc;
   1df1e:	e7ee      	b.n	1defe <z_impl_k_poll_signal_raise+0x2a>
   1df20:	20009c6e 	.word	0x20009c6e

0001df24 <le_param_req>:
}
   1df24:	2000      	movs	r0, #0
   1df26:	4770      	bx	lr

0001df28 <arch_printk_char_out>:
}
   1df28:	2000      	movs	r0, #0
   1df2a:	4770      	bx	lr

0001df2c <str_out>:
{
   1df2c:	b530      	push	{r4, r5, lr}
   1df2e:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1df30:	680c      	ldr	r4, [r1, #0]
   1df32:	1c55      	adds	r5, r2, #1
   1df34:	b114      	cbz	r4, 1df3c <str_out+0x10>
   1df36:	684b      	ldr	r3, [r1, #4]
   1df38:	4293      	cmp	r3, r2
   1df3a:	dc01      	bgt.n	1df40 <str_out+0x14>
		ctx->count++;
   1df3c:	608d      	str	r5, [r1, #8]
}
   1df3e:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   1df40:	3b01      	subs	r3, #1
   1df42:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   1df44:	bf08      	it	eq
   1df46:	2200      	moveq	r2, #0
   1df48:	608d      	str	r5, [r1, #8]
   1df4a:	bf0c      	ite	eq
   1df4c:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   1df4e:	54a0      	strbne	r0, [r4, r2]
   1df50:	e7f5      	b.n	1df3e <str_out+0x12>

0001df52 <printk>:
{
   1df52:	b40f      	push	{r0, r1, r2, r3}
   1df54:	b507      	push	{r0, r1, r2, lr}
   1df56:	a904      	add	r1, sp, #16
   1df58:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   1df5c:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   1df5e:	f7e8 f8eb 	bl	6138 <vprintk>
}
   1df62:	b003      	add	sp, #12
   1df64:	f85d eb04 	ldr.w	lr, [sp], #4
   1df68:	b004      	add	sp, #16
   1df6a:	4770      	bx	lr

0001df6c <snprintk>:
{
   1df6c:	b40c      	push	{r2, r3}
   1df6e:	b507      	push	{r0, r1, r2, lr}
   1df70:	ab04      	add	r3, sp, #16
   1df72:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   1df76:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   1df78:	f7e8 f8ec 	bl	6154 <vsnprintk>
}
   1df7c:	b003      	add	sp, #12
   1df7e:	f85d eb04 	ldr.w	lr, [sp], #4
   1df82:	b002      	add	sp, #8
   1df84:	4770      	bx	lr

0001df86 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1df86:	4604      	mov	r4, r0
   1df88:	b508      	push	{r3, lr}
   1df8a:	4608      	mov	r0, r1
   1df8c:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   1df8e:	461a      	mov	r2, r3
   1df90:	47a0      	blx	r4
	return z_impl_k_current_get();
   1df92:	f7ff fbeb 	bl	1d76c <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   1df96:	f7e9 fdf7 	bl	7b88 <z_impl_k_thread_abort>

0001df9a <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   1df9a:	b510      	push	{r4, lr}
   1df9c:	4604      	mov	r4, r0
	return z_impl_k_queue_get(queue, timeout);
   1df9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1dfa2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1dfa6:	4620      	mov	r0, r4
   1dfa8:	f7ff f862 	bl	1d070 <z_impl_k_queue_get>
   1dfac:	4603      	mov	r3, r0
	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (work == NULL) {
   1dfae:	2800      	cmp	r0, #0
   1dfb0:	d0f5      	beq.n	1df9e <z_work_q_main+0x4>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1dfb2:	3308      	adds	r3, #8
			continue;
		}

		handler = work->handler;
   1dfb4:	6842      	ldr	r2, [r0, #4]
   1dfb6:	f3bf 8f5b 	dmb	ish
   1dfba:	e853 1f00 	ldrex	r1, [r3]
   1dfbe:	f021 0c01 	bic.w	ip, r1, #1
   1dfc2:	e843 ce00 	strex	lr, ip, [r3]
   1dfc6:	f1be 0f00 	cmp.w	lr, #0
   1dfca:	d1f6      	bne.n	1dfba <z_work_q_main+0x20>
   1dfcc:	f3bf 8f5b 	dmb	ish

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   1dfd0:	07cb      	lsls	r3, r1, #31
   1dfd2:	d500      	bpl.n	1dfd6 <z_work_q_main+0x3c>
					      K_WORK_STATE_PENDING)) {
			handler(work);
   1dfd4:	4790      	blx	r2
	z_impl_k_yield();
   1dfd6:	f7ff fb5b 	bl	1d690 <z_impl_k_yield>
   1dfda:	e7e0      	b.n	1df9e <z_work_q_main+0x4>

0001dfdc <chunk_field>:
				 enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   1dfdc:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   1dfde:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1dfe2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   1dfe6:	bf2c      	ite	cs
   1dfe8:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
   1dfec:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
   1dff0:	4770      	bx	lr

0001dff2 <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->len);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   1dff2:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
   1dff6:	6880      	ldr	r0, [r0, #8]
   1dff8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
   1dffc:	bf2c      	ite	cs
   1dffe:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   1e002:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
   1e006:	4770      	bx	lr

0001e008 <chunk_size>:
{
	return chunk_field(h, c, SIZE_AND_USED) & 1;
}

static inline size_t chunk_size(struct z_heap *h, chunkid_t c)
{
   1e008:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1e00a:	2201      	movs	r2, #1
   1e00c:	f7ff ffe6 	bl	1dfdc <chunk_field>
}
   1e010:	0840      	lsrs	r0, r0, #1
   1e012:	bd08      	pop	{r3, pc}

0001e014 <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   1e014:	6883      	ldr	r3, [r0, #8]
   1e016:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
	void *cmem = &buf[c];
   1e01a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1e01e:	d308      	bcc.n	1e032 <set_chunk_used+0x1e>
		if (used) {
   1e020:	684b      	ldr	r3, [r1, #4]
   1e022:	b11a      	cbz	r2, 1e02c <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1;
   1e024:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1;
   1e028:	604b      	str	r3, [r1, #4]
   1e02a:	4770      	bx	lr
   1e02c:	f023 0301 	bic.w	r3, r3, #1
   1e030:	e7fa      	b.n	1e028 <set_chunk_used+0x14>
		}
	} else {
		if (used) {
   1e032:	884b      	ldrh	r3, [r1, #2]
   1e034:	b11a      	cbz	r2, 1e03e <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1;
   1e036:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1;
   1e03a:	804b      	strh	r3, [r1, #2]
		}
	}
}
   1e03c:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1;
   1e03e:	f023 0301 	bic.w	r3, r3, #1
   1e042:	e7fa      	b.n	1e03a <set_chunk_used+0x26>

0001e044 <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, size_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1e044:	0053      	lsls	r3, r2, #1
   1e046:	2201      	movs	r2, #1
   1e048:	f7ff bfd3 	b.w	1dff2 <chunk_set>

0001e04c <bucket_idx>:
	chunk_set(h, c, LEFT_SIZE, size);
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   1e04c:	6880      	ldr	r0, [r0, #8]
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
{
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   1e04e:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   1e050:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   1e054:	bf2c      	ite	cs
   1e056:	2002      	movcs	r0, #2
   1e058:	2001      	movcc	r0, #1
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   1e05a:	1a08      	subs	r0, r1, r0
	return 31 - __builtin_clz(usable_sz);
   1e05c:	fab0 f080 	clz	r0, r0
}
   1e060:	f1c0 001f 	rsb	r0, r0, #31
   1e064:	4770      	bx	lr

0001e066 <merge_chunks>:
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}

/* Does not modify free list */
static void merge_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   1e066:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e06a:	4616      	mov	r6, r2
   1e06c:	4604      	mov	r4, r0
   1e06e:	460f      	mov	r7, r1
	size_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1e070:	f7ff ffca 	bl	1e008 <chunk_size>
   1e074:	4631      	mov	r1, r6
   1e076:	4605      	mov	r5, r0
   1e078:	4620      	mov	r0, r4
   1e07a:	f7ff ffc5 	bl	1e008 <chunk_size>
   1e07e:	4405      	add	r5, r0

	set_chunk_size(h, lc, newsz);
   1e080:	462a      	mov	r2, r5
   1e082:	4639      	mov	r1, r7
   1e084:	4620      	mov	r0, r4
   1e086:	f7ff ffdd 	bl	1e044 <set_chunk_size>
	return c + chunk_size(h, c);
   1e08a:	4631      	mov	r1, r6
   1e08c:	4620      	mov	r0, r4
   1e08e:	f7ff ffbb 	bl	1e008 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1e092:	462b      	mov	r3, r5
   1e094:	1831      	adds	r1, r6, r0
   1e096:	2200      	movs	r2, #0
   1e098:	4620      	mov	r0, r4
	set_left_chunk_size(h, right_chunk(h, rc), newsz);
}
   1e09a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1e09e:	f7ff bfa8 	b.w	1dff2 <chunk_set>

0001e0a2 <split_chunks>:
{
   1e0a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e0a6:	4614      	mov	r4, r2
   1e0a8:	4605      	mov	r5, r0
   1e0aa:	460e      	mov	r6, r1
	size_t sz0 = chunk_size(h, lc);
   1e0ac:	f7ff ffac 	bl	1e008 <chunk_size>
	size_t lsz = rc - lc;
   1e0b0:	eba4 0806 	sub.w	r8, r4, r6
	size_t rsz = sz0 - lsz;
   1e0b4:	1b37      	subs	r7, r6, r4
   1e0b6:	4407      	add	r7, r0
	set_chunk_size(h, lc, lsz);
   1e0b8:	4642      	mov	r2, r8
   1e0ba:	4631      	mov	r1, r6
   1e0bc:	4628      	mov	r0, r5
   1e0be:	f7ff ffc1 	bl	1e044 <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   1e0c2:	463a      	mov	r2, r7
   1e0c4:	4621      	mov	r1, r4
   1e0c6:	4628      	mov	r0, r5
   1e0c8:	f7ff ffbc 	bl	1e044 <set_chunk_size>
   1e0cc:	4643      	mov	r3, r8
   1e0ce:	2200      	movs	r2, #0
   1e0d0:	4621      	mov	r1, r4
   1e0d2:	4628      	mov	r0, r5
   1e0d4:	f7ff ff8d 	bl	1dff2 <chunk_set>
	return c + chunk_size(h, c);
   1e0d8:	4621      	mov	r1, r4
   1e0da:	4628      	mov	r0, r5
   1e0dc:	f7ff ff94 	bl	1e008 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1e0e0:	463b      	mov	r3, r7
   1e0e2:	1821      	adds	r1, r4, r0
   1e0e4:	2200      	movs	r2, #0
   1e0e6:	4628      	mov	r0, r5
}
   1e0e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1e0ec:	f7ff bf81 	b.w	1dff2 <chunk_set>

0001e0f0 <free_list_remove>:
{
   1e0f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e0f4:	4616      	mov	r6, r2
   1e0f6:	460f      	mov	r7, r1
	return chunk_field(h, c, FREE_NEXT);
   1e0f8:	2203      	movs	r2, #3
   1e0fa:	4631      	mov	r1, r6
   1e0fc:	4604      	mov	r4, r0
   1e0fe:	f7ff ff6d 	bl	1dfdc <chunk_field>
	if (next_free_chunk(h, c) == c) {
   1e102:	4286      	cmp	r6, r0
   1e104:	4605      	mov	r5, r0
   1e106:	f107 0804 	add.w	r8, r7, #4
   1e10a:	d10b      	bne.n	1e124 <free_list_remove+0x34>
		h->avail_buckets &= ~(1 << bidx);
   1e10c:	2301      	movs	r3, #1
   1e10e:	fa03 f707 	lsl.w	r7, r3, r7
   1e112:	68e3      	ldr	r3, [r4, #12]
   1e114:	ea23 0307 	bic.w	r3, r3, r7
   1e118:	60e3      	str	r3, [r4, #12]
		b->next = 0;
   1e11a:	2300      	movs	r3, #0
   1e11c:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
}
   1e120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   1e124:	4631      	mov	r1, r6
   1e126:	2202      	movs	r2, #2
   1e128:	4620      	mov	r0, r4
   1e12a:	f7ff ff57 	bl	1dfdc <chunk_field>
	chunk_set(h, c, FREE_NEXT, next);
   1e12e:	462b      	mov	r3, r5
	return chunk_field(h, c, FREE_PREV);
   1e130:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
   1e132:	4601      	mov	r1, r0
		b->next = second;
   1e134:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
   1e138:	4620      	mov	r0, r4
   1e13a:	2203      	movs	r2, #3
   1e13c:	f7ff ff59 	bl	1dff2 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   1e140:	4633      	mov	r3, r6
   1e142:	4629      	mov	r1, r5
   1e144:	4620      	mov	r0, r4
   1e146:	2202      	movs	r2, #2
}
   1e148:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1e14c:	f7ff bf51 	b.w	1dff2 <chunk_set>

0001e150 <free_list_add>:
{
   1e150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e154:	4604      	mov	r4, r0
   1e156:	460d      	mov	r5, r1
	int bi = bucket_idx(h, chunk_size(h, c));
   1e158:	f7ff ff56 	bl	1e008 <chunk_size>
   1e15c:	4601      	mov	r1, r0
   1e15e:	4620      	mov	r0, r4
   1e160:	f7ff ff74 	bl	1e04c <bucket_idx>
	if (h->buckets[bi].next == 0) {
   1e164:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   1e168:	6916      	ldr	r6, [r2, #16]
   1e16a:	b99e      	cbnz	r6, 1e194 <free_list_add+0x44>
		h->avail_buckets |= (1 << bi);
   1e16c:	2301      	movs	r3, #1
   1e16e:	fa03 f000 	lsl.w	r0, r3, r0
   1e172:	68e3      	ldr	r3, [r4, #12]
   1e174:	4303      	orrs	r3, r0
   1e176:	60e3      	str	r3, [r4, #12]
   1e178:	4629      	mov	r1, r5
		h->buckets[bi].next = c;
   1e17a:	6115      	str	r5, [r2, #16]
   1e17c:	462b      	mov	r3, r5
   1e17e:	2202      	movs	r2, #2
   1e180:	4620      	mov	r0, r4
   1e182:	f7ff ff36 	bl	1dff2 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   1e186:	2203      	movs	r2, #3
   1e188:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   1e18a:	4620      	mov	r0, r4
}
   1e18c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1e190:	f7ff bf2f 	b.w	1dff2 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   1e194:	2202      	movs	r2, #2
   1e196:	4631      	mov	r1, r6
   1e198:	4620      	mov	r0, r4
   1e19a:	f7ff ff1f 	bl	1dfdc <chunk_field>
	chunk_set(h, c, FREE_PREV, prev);
   1e19e:	2202      	movs	r2, #2
   1e1a0:	4603      	mov	r3, r0
	return chunk_field(h, c, FREE_PREV);
   1e1a2:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   1e1a4:	4629      	mov	r1, r5
   1e1a6:	4620      	mov	r0, r4
   1e1a8:	f7ff ff23 	bl	1dff2 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   1e1ac:	4633      	mov	r3, r6
   1e1ae:	2203      	movs	r2, #3
   1e1b0:	4629      	mov	r1, r5
   1e1b2:	4620      	mov	r0, r4
   1e1b4:	f7ff ff1d 	bl	1dff2 <chunk_set>
   1e1b8:	2203      	movs	r2, #3
   1e1ba:	4639      	mov	r1, r7
   1e1bc:	462b      	mov	r3, r5
   1e1be:	4620      	mov	r0, r4
   1e1c0:	f7ff ff17 	bl	1dff2 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   1e1c4:	2202      	movs	r2, #2
   1e1c6:	4631      	mov	r1, r6
   1e1c8:	e7df      	b.n	1e18a <free_list_add+0x3a>

0001e1ca <split_alloc>:
static chunkid_t split_alloc(struct z_heap *h, int bidx, size_t sz)
{
	CHECK(h->buckets[bidx].next != 0
	      && sz <= chunk_size(h, h->buckets[bidx].next));

	chunkid_t c = h->buckets[bidx].next;
   1e1ca:	1d0b      	adds	r3, r1, #4
{
   1e1cc:	b570      	push	{r4, r5, r6, lr}
	chunkid_t c = h->buckets[bidx].next;
   1e1ce:	f850 6023 	ldr.w	r6, [r0, r3, lsl #2]
{
   1e1d2:	4604      	mov	r4, r0
   1e1d4:	4615      	mov	r5, r2

	free_list_remove(h, bidx, c);
   1e1d6:	4632      	mov	r2, r6
   1e1d8:	f7ff ff8a 	bl	1e0f0 <free_list_remove>

	/* Split off remainder if it's usefully large */
	if ((chunk_size(h, c) - sz) >= (big_heap(h) ? 2 : 1)) {
   1e1dc:	4631      	mov	r1, r6
   1e1de:	4620      	mov	r0, r4
   1e1e0:	f7ff ff12 	bl	1e008 <chunk_size>
   1e1e4:	68a3      	ldr	r3, [r4, #8]
   1e1e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1e1ea:	eba0 0005 	sub.w	r0, r0, r5
   1e1ee:	bf2c      	ite	cs
   1e1f0:	2302      	movcs	r3, #2
   1e1f2:	2301      	movcc	r3, #1
   1e1f4:	4298      	cmp	r0, r3
   1e1f6:	d309      	bcc.n	1e20c <split_alloc+0x42>
		split_chunks(h, c, c + sz);
   1e1f8:	4435      	add	r5, r6
   1e1fa:	4631      	mov	r1, r6
   1e1fc:	4620      	mov	r0, r4
   1e1fe:	462a      	mov	r2, r5
   1e200:	f7ff ff4f 	bl	1e0a2 <split_chunks>
		free_list_add(h, c + sz);
   1e204:	4629      	mov	r1, r5
   1e206:	4620      	mov	r0, r4
   1e208:	f7ff ffa2 	bl	1e150 <free_list_add>
	}

	set_chunk_used(h, c, true);
   1e20c:	4620      	mov	r0, r4
   1e20e:	2201      	movs	r2, #1
   1e210:	4631      	mov	r1, r6
   1e212:	f7ff feff 	bl	1e014 <set_chunk_used>
	return c;
}
   1e216:	4630      	mov	r0, r6
   1e218:	bd70      	pop	{r4, r5, r6, pc}

0001e21a <alloc_chunks>:

	free_chunks(h, c);
}

static chunkid_t alloc_chunks(struct z_heap *h, size_t sz)
{
   1e21a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1e21e:	4604      	mov	r4, r0
   1e220:	460e      	mov	r6, r1
	int bi = bucket_idx(h, sz);
   1e222:	f7ff ff13 	bl	1e04c <bucket_idx>
	struct z_heap_bucket *b = &h->buckets[bi];

	if (bi > bucket_idx(h, h->len)) {
   1e226:	68a1      	ldr	r1, [r4, #8]
	int bi = bucket_idx(h, sz);
   1e228:	4605      	mov	r5, r0
	if (bi > bucket_idx(h, h->len)) {
   1e22a:	4620      	mov	r0, r4
   1e22c:	f7ff ff0e 	bl	1e04c <bucket_idx>
   1e230:	42a8      	cmp	r0, r5
   1e232:	db2f      	blt.n	1e294 <alloc_chunks+0x7a>
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   1e234:	eb04 0885 	add.w	r8, r4, r5, lsl #2
   1e238:	f8d8 9010 	ldr.w	r9, [r8, #16]
   1e23c:	f1b9 0f00 	cmp.w	r9, #0
   1e240:	d01a      	beq.n	1e278 <alloc_chunks+0x5e>
   1e242:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			if (chunk_size(h, b->next) >= sz) {
   1e244:	f8d8 a010 	ldr.w	sl, [r8, #16]
   1e248:	4620      	mov	r0, r4
   1e24a:	4651      	mov	r1, sl
   1e24c:	f7ff fedc 	bl	1e008 <chunk_size>
   1e250:	42b0      	cmp	r0, r6
   1e252:	d306      	bcc.n	1e262 <alloc_chunks+0x48>
				return split_alloc(h, bi, sz);
   1e254:	4632      	mov	r2, r6
   1e256:	4629      	mov	r1, r5
	size_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);

	if ((bmask & h->avail_buckets) != 0) {
		int minbucket = __builtin_ctz(bmask & h->avail_buckets);

		return split_alloc(h, minbucket, sz);
   1e258:	4620      	mov	r0, r4
	}

	return 0;
}
   1e25a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		return split_alloc(h, minbucket, sz);
   1e25e:	f7ff bfb4 	b.w	1e1ca <split_alloc>
	return chunk_field(h, c, FREE_NEXT);
   1e262:	2203      	movs	r2, #3
   1e264:	4651      	mov	r1, sl
   1e266:	4620      	mov	r0, r4
   1e268:	f7ff feb8 	bl	1dfdc <chunk_field>
		} while (--i && b->next != first);
   1e26c:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, b->next);
   1e26e:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
   1e272:	d001      	beq.n	1e278 <alloc_chunks+0x5e>
   1e274:	4581      	cmp	r9, r0
   1e276:	d1e5      	bne.n	1e244 <alloc_chunks+0x2a>
	size_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   1e278:	68e1      	ldr	r1, [r4, #12]
   1e27a:	3501      	adds	r5, #1
   1e27c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e280:	fa03 f505 	lsl.w	r5, r3, r5
	if ((bmask & h->avail_buckets) != 0) {
   1e284:	4029      	ands	r1, r5
   1e286:	d005      	beq.n	1e294 <alloc_chunks+0x7a>
		return split_alloc(h, minbucket, sz);
   1e288:	fa91 f1a1 	rbit	r1, r1
   1e28c:	4632      	mov	r2, r6
   1e28e:	fab1 f181 	clz	r1, r1
   1e292:	e7e1      	b.n	1e258 <alloc_chunks+0x3e>
}
   1e294:	2000      	movs	r0, #0
   1e296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001e29a <free_chunks>:
{
   1e29a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	set_chunk_used(h, c, false);
   1e29c:	2200      	movs	r2, #0
{
   1e29e:	460d      	mov	r5, r1
   1e2a0:	4604      	mov	r4, r0
	set_chunk_used(h, c, false);
   1e2a2:	f7ff feb7 	bl	1e014 <set_chunk_used>
	return c + chunk_size(h, c);
   1e2a6:	4629      	mov	r1, r5
   1e2a8:	f7ff feae 	bl	1e008 <chunk_size>
   1e2ac:	182e      	adds	r6, r5, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1;
   1e2ae:	2201      	movs	r2, #1
   1e2b0:	4631      	mov	r1, r6
   1e2b2:	4620      	mov	r0, r4
   1e2b4:	f7ff fe92 	bl	1dfdc <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
   1e2b8:	07c3      	lsls	r3, r0, #31
   1e2ba:	d415      	bmi.n	1e2e8 <free_chunks+0x4e>
		int bi = bucket_idx(h, chunk_size(h, right_chunk(h, c)));
   1e2bc:	4631      	mov	r1, r6
   1e2be:	4620      	mov	r0, r4
   1e2c0:	f7ff fea2 	bl	1e008 <chunk_size>
   1e2c4:	4601      	mov	r1, r0
   1e2c6:	4620      	mov	r0, r4
   1e2c8:	f7ff fec0 	bl	1e04c <bucket_idx>
		free_list_remove(h, bi, right_chunk(h, c));
   1e2cc:	4632      	mov	r2, r6
		int bi = bucket_idx(h, chunk_size(h, right_chunk(h, c)));
   1e2ce:	4601      	mov	r1, r0
		free_list_remove(h, bi, right_chunk(h, c));
   1e2d0:	4620      	mov	r0, r4
   1e2d2:	f7ff ff0d 	bl	1e0f0 <free_list_remove>
	return c + chunk_size(h, c);
   1e2d6:	4629      	mov	r1, r5
   1e2d8:	4620      	mov	r0, r4
   1e2da:	f7ff fe95 	bl	1e008 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   1e2de:	4629      	mov	r1, r5
   1e2e0:	182a      	adds	r2, r5, r0
   1e2e2:	4620      	mov	r0, r4
   1e2e4:	f7ff febf 	bl	1e066 <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
   1e2e8:	2200      	movs	r2, #0
   1e2ea:	4629      	mov	r1, r5
   1e2ec:	4620      	mov	r0, r4
   1e2ee:	f7ff fe75 	bl	1dfdc <chunk_field>
   1e2f2:	1a2f      	subs	r7, r5, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1;
   1e2f4:	2201      	movs	r2, #1
   1e2f6:	4639      	mov	r1, r7
   1e2f8:	4620      	mov	r0, r4
   1e2fa:	f7ff fe6f 	bl	1dfdc <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
   1e2fe:	f010 0601 	ands.w	r6, r0, #1
   1e302:	d11c      	bne.n	1e33e <free_chunks+0xa4>
		int bi = bucket_idx(h, chunk_size(h, left_chunk(h, c)));
   1e304:	4639      	mov	r1, r7
   1e306:	4620      	mov	r0, r4
   1e308:	f7ff fe7e 	bl	1e008 <chunk_size>
   1e30c:	4601      	mov	r1, r0
   1e30e:	4620      	mov	r0, r4
   1e310:	f7ff fe9c 	bl	1e04c <bucket_idx>
		free_list_remove(h, bi, left_chunk(h, c));
   1e314:	463a      	mov	r2, r7
		int bi = bucket_idx(h, chunk_size(h, left_chunk(h, c)));
   1e316:	4601      	mov	r1, r0
		free_list_remove(h, bi, left_chunk(h, c));
   1e318:	4620      	mov	r0, r4
   1e31a:	f7ff fee9 	bl	1e0f0 <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
   1e31e:	4629      	mov	r1, r5
   1e320:	4632      	mov	r2, r6
   1e322:	4620      	mov	r0, r4
   1e324:	f7ff fe5a 	bl	1dfdc <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
   1e328:	462a      	mov	r2, r5
   1e32a:	1a29      	subs	r1, r5, r0
   1e32c:	4620      	mov	r0, r4
   1e32e:	f7ff fe9a 	bl	1e066 <merge_chunks>
   1e332:	4629      	mov	r1, r5
   1e334:	4632      	mov	r2, r6
   1e336:	4620      	mov	r0, r4
   1e338:	f7ff fe50 	bl	1dfdc <chunk_field>
   1e33c:	1a2d      	subs	r5, r5, r0
	free_list_add(h, c);
   1e33e:	4629      	mov	r1, r5
   1e340:	4620      	mov	r0, r4
}
   1e342:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, c);
   1e346:	f7ff bf03 	b.w	1e150 <free_list_add>

0001e34a <sys_heap_free>:
	if (mem == NULL) {
   1e34a:	b169      	cbz	r1, 1e368 <sys_heap_free+0x1e>
	struct z_heap *h = heap->heap;
   1e34c:	6800      	ldr	r0, [r0, #0]
	return big_heap(h) ? 8 : 4;
   1e34e:	6883      	ldr	r3, [r0, #8]
   1e350:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1e354:	bf2c      	ite	cs
   1e356:	2308      	movcs	r3, #8
   1e358:	2304      	movcc	r3, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1e35a:	1ac9      	subs	r1, r1, r3
   1e35c:	1a09      	subs	r1, r1, r0
   1e35e:	bf48      	it	mi
   1e360:	3107      	addmi	r1, #7
	free_chunks(h, c);
   1e362:	10c9      	asrs	r1, r1, #3
   1e364:	f7ff bf99 	b.w	1e29a <free_chunks>
}
   1e368:	4770      	bx	lr

0001e36a <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   1e36a:	b510      	push	{r4, lr}
   1e36c:	4604      	mov	r4, r0
	if (bytes == 0) {
   1e36e:	b909      	cbnz	r1, 1e374 <sys_heap_alloc+0xa>
		return NULL;
   1e370:	2000      	movs	r0, #0
	}
	size_t chunksz = bytes_to_chunksz(heap->heap, bytes);
	chunkid_t c = alloc_chunks(heap->heap, chunksz);

	return chunk_mem(heap->heap, c);
}
   1e372:	bd10      	pop	{r4, pc}
	size_t chunksz = bytes_to_chunksz(heap->heap, bytes);
   1e374:	6800      	ldr	r0, [r0, #0]
   1e376:	6883      	ldr	r3, [r0, #8]
   1e378:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1e37c:	bf2c      	ite	cs
   1e37e:	2308      	movcs	r3, #8
   1e380:	2304      	movcc	r3, #4
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   1e382:	3107      	adds	r1, #7
   1e384:	4419      	add	r1, r3
	chunkid_t c = alloc_chunks(heap->heap, chunksz);
   1e386:	08c9      	lsrs	r1, r1, #3
   1e388:	f7ff ff47 	bl	1e21a <alloc_chunks>
	return chunk_mem(heap->heap, c);
   1e38c:	6823      	ldr	r3, [r4, #0]
	if (c == 0) {
   1e38e:	2800      	cmp	r0, #0
   1e390:	d0ee      	beq.n	1e370 <sys_heap_alloc+0x6>
	return big_heap(h) ? 8 : 4;
   1e392:	689a      	ldr	r2, [r3, #8]
   1e394:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   1e398:	bf2c      	ite	cs
   1e39a:	2208      	movcs	r2, #8
   1e39c:	2204      	movcc	r2, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   1e39e:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
   1e3a2:	4418      	add	r0, r3
	return ret;
   1e3a4:	e7e5      	b.n	1e372 <sys_heap_alloc+0x8>

0001e3a6 <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
   1e3a6:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000

	return mem;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   1e3aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e3ac:	bf2c      	ite	cs
   1e3ae:	2508      	movcs	r5, #8
   1e3b0:	2504      	movcc	r5, #4
	/* Must fit in a 32 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0xffffffffU, "heap size is too big");

	/* Reserve the final marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   1e3b2:	1b55      	subs	r5, r2, r5

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1e3b4:	1dcc      	adds	r4, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1e3b6:	440d      	add	r5, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1e3b8:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1e3bc:	f025 0507 	bic.w	r5, r5, #7
	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
   1e3c0:	2200      	movs	r2, #0
   1e3c2:	2300      	movs	r3, #0
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   1e3c4:	1b2d      	subs	r5, r5, r4
	heap->heap = h;
   1e3c6:	6004      	str	r4, [r0, #0]
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   1e3c8:	08ed      	lsrs	r5, r5, #3
	h->chunk0_hdr_area = 0;
   1e3ca:	e9c4 2300 	strd	r2, r3, [r4]
	h->len = buf_sz;
	h->avail_buckets = 0;
   1e3ce:	2300      	movs	r3, #0

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   1e3d0:	4629      	mov	r1, r5
	h->len = buf_sz;
   1e3d2:	60a5      	str	r5, [r4, #8]
	h->avail_buckets = 0;
   1e3d4:	60e3      	str	r3, [r4, #12]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   1e3d6:	4620      	mov	r0, r4
   1e3d8:	f7ff fe38 	bl	1e04c <bucket_idx>
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
   1e3dc:	0086      	lsls	r6, r0, #2
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   1e3de:	361b      	adds	r6, #27
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   1e3e0:	1c41      	adds	r1, r0, #1
   1e3e2:	08f6      	lsrs	r6, r6, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   1e3e4:	f104 0210 	add.w	r2, r4, #16
		h->buckets[i].next = 0;
   1e3e8:	4618      	mov	r0, r3
	for (int i = 0; i < nb_buckets; i++) {
   1e3ea:	428b      	cmp	r3, r1
   1e3ec:	db29      	blt.n	1e442 <sys_heap_init+0x9c>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
   1e3ee:	4632      	mov	r2, r6
   1e3f0:	4620      	mov	r0, r4
   1e3f2:	2100      	movs	r1, #0
   1e3f4:	f7ff fe26 	bl	1e044 <set_chunk_size>
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   1e3f8:	1baf      	subs	r7, r5, r6
	set_chunk_used(h, 0, true);
   1e3fa:	4620      	mov	r0, r4
   1e3fc:	2201      	movs	r2, #1
   1e3fe:	2100      	movs	r1, #0
   1e400:	f7ff fe08 	bl	1e014 <set_chunk_used>
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   1e404:	463a      	mov	r2, r7
   1e406:	4631      	mov	r1, r6
   1e408:	f7ff fe1c 	bl	1e044 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1e40c:	4633      	mov	r3, r6
   1e40e:	4631      	mov	r1, r6
   1e410:	4620      	mov	r0, r4
   1e412:	2200      	movs	r2, #0
   1e414:	f7ff fded 	bl	1dff2 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
   1e418:	4629      	mov	r1, r5
   1e41a:	4620      	mov	r0, r4
   1e41c:	2200      	movs	r2, #0
   1e41e:	f7ff fe11 	bl	1e044 <set_chunk_size>
   1e422:	463b      	mov	r3, r7
   1e424:	4629      	mov	r1, r5
   1e426:	4620      	mov	r0, r4
   1e428:	2200      	movs	r2, #0
   1e42a:	f7ff fde2 	bl	1dff2 <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
   1e42e:	4629      	mov	r1, r5
   1e430:	4620      	mov	r0, r4
   1e432:	2201      	movs	r2, #1
   1e434:	f7ff fdee 	bl	1e014 <set_chunk_used>

	free_list_add(h, chunk0_size);
   1e438:	4631      	mov	r1, r6
}
   1e43a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   1e43e:	f7ff be87 	b.w	1e150 <free_list_add>
		h->buckets[i].next = 0;
   1e442:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
   1e446:	3301      	adds	r3, #1
   1e448:	e7cf      	b.n	1e3ea <sys_heap_init+0x44>

0001e44a <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   1e44a:	4770      	bx	lr

0001e44c <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   1e44c:	2300      	movs	r3, #0
	list->head = NULL;
   1e44e:	e9c0 3300 	strd	r3, r3, [r0]
}
   1e452:	4770      	bx	lr

0001e454 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   1e454:	6803      	ldr	r3, [r0, #0]
   1e456:	b923      	cbnz	r3, 1e462 <log_list_add_tail+0xe>
		list->head = msg;
   1e458:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   1e45a:	2300      	movs	r3, #0
	list->tail = msg;
   1e45c:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   1e45e:	600b      	str	r3, [r1, #0]
}
   1e460:	4770      	bx	lr
		list->tail->next = msg;
   1e462:	6843      	ldr	r3, [r0, #4]
   1e464:	6019      	str	r1, [r3, #0]
   1e466:	e7f8      	b.n	1e45a <log_list_add_tail+0x6>

0001e468 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   1e468:	6800      	ldr	r0, [r0, #0]
   1e46a:	4770      	bx	lr

0001e46c <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
   1e46c:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
   1e46e:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
   1e470:	b108      	cbz	r0, 1e476 <log_list_head_get+0xa>
		list->head = list->head->next;
   1e472:	6802      	ldr	r2, [r0, #0]
   1e474:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
   1e476:	4770      	bx	lr

0001e478 <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
   1e478:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   1e47a:	f7e8 f93d 	bl	66f8 <log_msg_chunk_alloc>

	if (msg != NULL) {
   1e47e:	b118      	cbz	r0, 1e488 <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   1e480:	2301      	movs	r3, #1
   1e482:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   1e484:	2300      	movs	r3, #0
   1e486:	8103      	strh	r3, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
	}

	return msg;
}
   1e488:	bd08      	pop	{r3, pc}

0001e48a <k_cycle_get_32_wrapper>:
   1e48a:	f7e8 bd89 	b.w	6fa0 <z_timer_cycle_get_32>

0001e48e <dummy_timestamp>:
   1e48e:	2000      	movs	r0, #0
   1e490:	4770      	bx	lr

0001e492 <z_log_get_s_mask>:
{
   1e492:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e494:	4605      	mov	r5, r0
	uint32_t mask = 0;
   1e496:	2000      	movs	r0, #0
	uint32_t arg = 0;
   1e498:	4603      	mov	r3, r0
	bool arm = false;
   1e49a:	4602      	mov	r2, r0
				mask |= BIT(arg);
   1e49c:	2701      	movs	r7, #1
	while ((curr = *str++) && arg < nargs) {
   1e49e:	f815 4b01 	ldrb.w	r4, [r5], #1
   1e4a2:	b10c      	cbz	r4, 1e4a8 <z_log_get_s_mask+0x16>
   1e4a4:	428b      	cmp	r3, r1
   1e4a6:	d300      	bcc.n	1e4aa <z_log_get_s_mask+0x18>
}
   1e4a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (curr == '%') {
   1e4aa:	2c25      	cmp	r4, #37	; 0x25
   1e4ac:	d102      	bne.n	1e4b4 <z_log_get_s_mask+0x22>
			arm = !arm;
   1e4ae:	f082 0201 	eor.w	r2, r2, #1
   1e4b2:	e7f4      	b.n	1e49e <z_log_get_s_mask+0xc>
		} else if (arm && isalpha((int)curr)) {
   1e4b4:	2a00      	cmp	r2, #0
   1e4b6:	d0f2      	beq.n	1e49e <z_log_get_s_mask+0xc>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   1e4b8:	f044 0620 	orr.w	r6, r4, #32
   1e4bc:	3e61      	subs	r6, #97	; 0x61
   1e4be:	2e19      	cmp	r6, #25
   1e4c0:	d8ed      	bhi.n	1e49e <z_log_get_s_mask+0xc>
			if (curr == 's') {
   1e4c2:	2c73      	cmp	r4, #115	; 0x73
				mask |= BIT(arg);
   1e4c4:	bf04      	itt	eq
   1e4c6:	fa07 f203 	lsleq.w	r2, r7, r3
   1e4ca:	4310      	orreq	r0, r2
			arg++;
   1e4cc:	3301      	adds	r3, #1
			arm = false;
   1e4ce:	2200      	movs	r2, #0
   1e4d0:	e7e5      	b.n	1e49e <z_log_get_s_mask+0xc>

0001e4d2 <log_0>:
{
   1e4d2:	b538      	push	{r3, r4, r5, lr}
   1e4d4:	4605      	mov	r5, r0
   1e4d6:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   1e4d8:	f7ff ffce 	bl	1e478 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1e4dc:	b128      	cbz	r0, 1e4ea <log_0+0x18>
		msg->str = str;
   1e4de:	6105      	str	r5, [r0, #16]
		msg_finalize(msg, src_level);
   1e4e0:	4621      	mov	r1, r4
}
   1e4e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		msg_finalize(msg, src_level);
   1e4e6:	f7e8 b821 	b.w	652c <msg_finalize>
}
   1e4ea:	bd38      	pop	{r3, r4, r5, pc}

0001e4ec <log_1>:
{
   1e4ec:	b570      	push	{r4, r5, r6, lr}
   1e4ee:	4606      	mov	r6, r0
   1e4f0:	460d      	mov	r5, r1
   1e4f2:	4614      	mov	r4, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1e4f4:	f7ff ffc0 	bl	1e478 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1e4f8:	b158      	cbz	r0, 1e512 <log_1+0x26>
		msg->str = str;
		msg->hdr.params.std.nargs = 1U;
   1e4fa:	7a42      	ldrb	r2, [r0, #9]
		msg->str = str;
   1e4fc:	6106      	str	r6, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
   1e4fe:	2101      	movs	r1, #1
   1e500:	f361 1207 	bfi	r2, r1, #4, #4
   1e504:	7242      	strb	r2, [r0, #9]
		msg->payload.single.args[0] = arg1;
   1e506:	6145      	str	r5, [r0, #20]
		msg_finalize(msg, src_level);
   1e508:	4621      	mov	r1, r4
}
   1e50a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		msg_finalize(msg, src_level);
   1e50e:	f7e8 b80d 	b.w	652c <msg_finalize>
}
   1e512:	bd70      	pop	{r4, r5, r6, pc}

0001e514 <log_2>:
{
   1e514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e518:	4680      	mov	r8, r0
   1e51a:	460f      	mov	r7, r1
   1e51c:	4616      	mov	r6, r2
   1e51e:	461d      	mov	r5, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1e520:	f7ff ffaa 	bl	1e478 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1e524:	b168      	cbz	r0, 1e542 <log_2+0x2e>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
   1e526:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   1e528:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 2U;
   1e52c:	2202      	movs	r2, #2
   1e52e:	f362 1307 	bfi	r3, r2, #4, #4
   1e532:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   1e534:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg_finalize(msg, src_level);
   1e538:	4629      	mov	r1, r5
}
   1e53a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
   1e53e:	f7e7 bff5 	b.w	652c <msg_finalize>
}
   1e542:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001e546 <log_3>:
{
   1e546:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e54a:	4680      	mov	r8, r0
   1e54c:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   1e550:	460f      	mov	r7, r1
   1e552:	4616      	mov	r6, r2
   1e554:	461d      	mov	r5, r3
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1e556:	f7ff ff8f 	bl	1e478 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1e55a:	b170      	cbz	r0, 1e57a <log_3+0x34>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
   1e55c:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   1e55e:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 3U;
   1e562:	2203      	movs	r2, #3
   1e564:	f362 1307 	bfi	r3, r2, #4, #4
   1e568:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   1e56a:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->payload.single.args[2] = arg3;
   1e56e:	61c5      	str	r5, [r0, #28]
		msg_finalize(msg, src_level);
   1e570:	4649      	mov	r1, r9
}
   1e572:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		msg_finalize(msg, src_level);
   1e576:	f7e7 bfd9 	b.w	652c <msg_finalize>
}
   1e57a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001e57e <log_n>:
{
   1e57e:	b510      	push	{r4, lr}
   1e580:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
   1e582:	f000 f89f 	bl	1e6c4 <log_msg_create_n>
		if (msg == NULL) {
   1e586:	b120      	cbz	r0, 1e592 <log_n+0x14>
		msg_finalize(msg, src_level);
   1e588:	4621      	mov	r1, r4
}
   1e58a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   1e58e:	f7e7 bfcd 	b.w	652c <msg_finalize>
}
   1e592:	bd10      	pop	{r4, pc}

0001e594 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   1e594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e598:	461c      	mov	r4, r3
	uint32_t available_len = msg->hdr.params.hexdump.length;
   1e59a:	8903      	ldrh	r3, [r0, #8]
{
   1e59c:	f89d 8020 	ldrb.w	r8, [sp, #32]
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
   1e5a0:	ebb4 0f93 	cmp.w	r4, r3, lsr #2
{
   1e5a4:	460e      	mov	r6, r1
   1e5a6:	4611      	mov	r1, r2
	uint32_t available_len = msg->hdr.params.hexdump.length;
   1e5a8:	ea4f 0293 	mov.w	r2, r3, lsr #2
	if (offset >= available_len) {
   1e5ac:	d303      	bcc.n	1e5b6 <log_msg_hexdump_data_op+0x22>
		*length = 0;
   1e5ae:	2300      	movs	r3, #0
   1e5b0:	600b      	str	r3, [r1, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   1e5b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
   1e5b6:	680b      	ldr	r3, [r1, #0]
   1e5b8:	4423      	add	r3, r4
   1e5ba:	4293      	cmp	r3, r2
		*length = available_len - offset;
   1e5bc:	bf84      	itt	hi
   1e5be:	1b13      	subhi	r3, r2, r4
   1e5c0:	600b      	strhi	r3, [r1, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   1e5c2:	2a0c      	cmp	r2, #12
	req_len = *length;
   1e5c4:	f8d1 9000 	ldr.w	r9, [r1]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   1e5c8:	d929      	bls.n	1e61e <log_msg_hexdump_data_op+0x8a>
	if (offset < chunk_len) {
   1e5ca:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
   1e5cc:	6947      	ldr	r7, [r0, #20]
	if (offset < chunk_len) {
   1e5ce:	d82c      	bhi.n	1e62a <log_msg_hexdump_data_op+0x96>
		head_data = msg->payload.ext.data.bytes;
   1e5d0:	3018      	adds	r0, #24
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   1e5d2:	2208      	movs	r2, #8
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   1e5d4:	454a      	cmp	r2, r9
   1e5d6:	bf28      	it	cs
   1e5d8:	464a      	movcs	r2, r9
   1e5da:	4615      	mov	r5, r2
		if (put_op) {
   1e5dc:	4420      	add	r0, r4
   1e5de:	f1b8 0f00 	cmp.w	r8, #0
   1e5e2:	d01f      	beq.n	1e624 <log_msg_hexdump_data_op+0x90>
			(void)memcpy(&head_data[offset], data, cpy_len);
   1e5e4:	4631      	mov	r1, r6
			(void)memcpy(data, &head_data[offset], cpy_len);
   1e5e6:	f001 fc46 	bl	1fe76 <memcpy>
		req_len -= cpy_len;
   1e5ea:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   1e5ee:	442e      	add	r6, r5
	while (req_len > 0) {
   1e5f0:	f1b9 0f00 	cmp.w	r9, #0
   1e5f4:	d0dd      	beq.n	1e5b2 <log_msg_hexdump_data_op+0x1e>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   1e5f6:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   1e5fa:	454d      	cmp	r5, r9
   1e5fc:	bf28      	it	cs
   1e5fe:	464d      	movcs	r5, r9
		if (put_op) {
   1e600:	1d20      	adds	r0, r4, #4
   1e602:	4438      	add	r0, r7
			(void)memcpy(&cont->payload.bytes[offset],
   1e604:	462a      	mov	r2, r5
		if (put_op) {
   1e606:	f1b8 0f00 	cmp.w	r8, #0
   1e60a:	d014      	beq.n	1e636 <log_msg_hexdump_data_op+0xa2>
			(void)memcpy(&cont->payload.bytes[offset],
   1e60c:	4631      	mov	r1, r6
			(void)memcpy(data, &cont->payload.bytes[offset],
   1e60e:	f001 fc32 	bl	1fe76 <memcpy>
		req_len -= cpy_len;
   1e612:	eba9 0905 	sub.w	r9, r9, r5
		cont = cont->next;
   1e616:	683f      	ldr	r7, [r7, #0]
		data += cpy_len;
   1e618:	442e      	add	r6, r5
		offset = 0;
   1e61a:	2400      	movs	r4, #0
   1e61c:	e7e8      	b.n	1e5f0 <log_msg_hexdump_data_op+0x5c>
		head_data = msg->payload.single.bytes;
   1e61e:	3014      	adds	r0, #20
	struct log_msg_cont *cont = NULL;
   1e620:	2700      	movs	r7, #0
   1e622:	e7d7      	b.n	1e5d4 <log_msg_hexdump_data_op+0x40>
			(void)memcpy(data, &head_data[offset], cpy_len);
   1e624:	4601      	mov	r1, r0
   1e626:	4630      	mov	r0, r6
   1e628:	e7dd      	b.n	1e5e6 <log_msg_hexdump_data_op+0x52>
		offset -= chunk_len;
   1e62a:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
   1e62c:	2c1b      	cmp	r4, #27
   1e62e:	d9df      	bls.n	1e5f0 <log_msg_hexdump_data_op+0x5c>
			cont = cont->next;
   1e630:	683f      	ldr	r7, [r7, #0]
			offset -= chunk_len;
   1e632:	3c1c      	subs	r4, #28
   1e634:	e7fa      	b.n	1e62c <log_msg_hexdump_data_op+0x98>
			(void)memcpy(data, &cont->payload.bytes[offset],
   1e636:	4601      	mov	r1, r0
   1e638:	4630      	mov	r0, r6
   1e63a:	e7e8      	b.n	1e60e <log_msg_hexdump_data_op+0x7a>

0001e63c <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1e63c:	3004      	adds	r0, #4
   1e63e:	f3bf 8f5b 	dmb	ish
   1e642:	e850 3f00 	ldrex	r3, [r0]
   1e646:	3301      	adds	r3, #1
   1e648:	e840 3200 	strex	r2, r3, [r0]
   1e64c:	2a00      	cmp	r2, #0
   1e64e:	d1f8      	bne.n	1e642 <log_msg_get+0x6>
   1e650:	f3bf 8f5b 	dmb	ish
}
   1e654:	4770      	bx	lr

0001e656 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   1e656:	7a40      	ldrb	r0, [r0, #9]
}
   1e658:	0900      	lsrs	r0, r0, #4
   1e65a:	4770      	bx	lr

0001e65c <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
   1e65c:	7a43      	ldrb	r3, [r0, #9]
   1e65e:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
   1e662:	ea4f 1213 	mov.w	r2, r3, lsr #4
   1e666:	d216      	bcs.n	1e696 <log_msg_arg_get+0x3a>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   1e668:	2a03      	cmp	r2, #3
   1e66a:	d803      	bhi.n	1e674 <log_msg_arg_get+0x18>
		arg = msg->payload.single.args[arg_idx];
   1e66c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   1e670:	6948      	ldr	r0, [r1, #20]
   1e672:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   1e674:	2901      	cmp	r1, #1
   1e676:	d803      	bhi.n	1e680 <log_msg_arg_get+0x24>
		return msg->payload.ext.data.args[arg_idx];
   1e678:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   1e67c:	6988      	ldr	r0, [r1, #24]
   1e67e:	4770      	bx	lr
	cont = msg->payload.ext.next;
   1e680:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   1e682:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   1e684:	2906      	cmp	r1, #6
   1e686:	d803      	bhi.n	1e690 <log_msg_arg_get+0x34>
	return cont->payload.args[arg_idx];
   1e688:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   1e68c:	6848      	ldr	r0, [r1, #4]
   1e68e:	4770      	bx	lr
		cont = cont->next;
   1e690:	681b      	ldr	r3, [r3, #0]
		arg_idx -= ARGS_CONT_MSG;
   1e692:	3907      	subs	r1, #7
		cont = cont->next;
   1e694:	e7f6      	b.n	1e684 <log_msg_arg_get+0x28>
		return 0;
   1e696:	2000      	movs	r0, #0
}
   1e698:	4770      	bx	lr

0001e69a <log_msg_put>:
{
   1e69a:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1e69c:	1d02      	adds	r2, r0, #4
   1e69e:	f3bf 8f5b 	dmb	ish
   1e6a2:	e852 1f00 	ldrex	r1, [r2]
   1e6a6:	3901      	subs	r1, #1
   1e6a8:	e842 1c00 	strex	ip, r1, [r2]
   1e6ac:	f1bc 0f00 	cmp.w	ip, #0
   1e6b0:	d1f7      	bne.n	1e6a2 <log_msg_put+0x8>
   1e6b2:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
   1e6b6:	685b      	ldr	r3, [r3, #4]
   1e6b8:	b90b      	cbnz	r3, 1e6be <log_msg_put+0x24>
		msg_free(msg);
   1e6ba:	f7e8 b831 	b.w	6720 <msg_free>
}
   1e6be:	4770      	bx	lr

0001e6c0 <log_msg_str_get>:
}
   1e6c0:	6900      	ldr	r0, [r0, #16]
   1e6c2:	4770      	bx	lr

0001e6c4 <log_msg_create_n>:
{
   1e6c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e6c8:	4681      	mov	r9, r0
   1e6ca:	4688      	mov	r8, r1
   1e6cc:	4615      	mov	r5, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   1e6ce:	f7e8 f813 	bl	66f8 <log_msg_chunk_alloc>
	if (msg != NULL) {
   1e6d2:	4604      	mov	r4, r0
   1e6d4:	b330      	cbz	r0, 1e724 <log_msg_create_n+0x60>
		msg->hdr.ref_cnt = 1;
   1e6d6:	2301      	movs	r3, #1
		msg->hdr.params.raw = 0U;
   1e6d8:	2700      	movs	r7, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   1e6da:	2d03      	cmp	r5, #3
		msg->hdr.ref_cnt = 1;
   1e6dc:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   1e6de:	8107      	strh	r7, [r0, #8]
   1e6e0:	d909      	bls.n	1e6f6 <log_msg_create_n+0x32>
	msg->hdr.params.generic.ext = 1;
   1e6e2:	2202      	movs	r2, #2
   1e6e4:	8102      	strh	r2, [r0, #8]
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   1e6e6:	f1a5 0a02 	sub.w	sl, r5, #2
	next = &msg->payload.ext.next;
   1e6ea:	f100 0b14 	add.w	fp, r0, #20
	*next = NULL;
   1e6ee:	6147      	str	r7, [r0, #20]
	while (n > 0) {
   1e6f0:	f1ba 0f00 	cmp.w	sl, #0
   1e6f4:	dc0e      	bgt.n	1e714 <log_msg_create_n+0x50>
		msg->hdr.params.std.nargs = nargs;
   1e6f6:	7a63      	ldrb	r3, [r4, #9]
		msg->str = str;
   1e6f8:	f8c4 9010 	str.w	r9, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
   1e6fc:	f365 1307 	bfi	r3, r5, #4, #4
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   1e700:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
   1e702:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   1e704:	d818      	bhi.n	1e738 <log_msg_create_n+0x74>
		(void)memcpy(msg->payload.single.args, args,
   1e706:	00aa      	lsls	r2, r5, #2
   1e708:	4641      	mov	r1, r8
   1e70a:	f104 0014 	add.w	r0, r4, #20
   1e70e:	f001 fbb2 	bl	1fe76 <memcpy>
	while (nargs != 0U) {
   1e712:	e007      	b.n	1e724 <log_msg_create_n+0x60>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   1e714:	f7e7 fff0 	bl	66f8 <log_msg_chunk_alloc>
		if (cont == NULL) {
   1e718:	4606      	mov	r6, r0
   1e71a:	b930      	cbnz	r0, 1e72a <log_msg_create_n+0x66>
			msg_free(msg);
   1e71c:	4620      	mov	r0, r4
   1e71e:	f7e7 ffff 	bl	6720 <msg_free>
			return NULL;
   1e722:	4634      	mov	r4, r6
}
   1e724:	4620      	mov	r0, r4
   1e726:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
   1e72a:	f8cb 0000 	str.w	r0, [fp]
		cont->next = NULL;
   1e72e:	f1aa 0a07 	sub.w	sl, sl, #7
   1e732:	6007      	str	r7, [r0, #0]
		next = &cont->next;
   1e734:	4683      	mov	fp, r0
		n -= ARGS_CONT_MSG;
   1e736:	e7db      	b.n	1e6f0 <log_msg_create_n+0x2c>
		(void)memcpy(msg->payload.ext.data.args, args,
   1e738:	4641      	mov	r1, r8
   1e73a:	2208      	movs	r2, #8
   1e73c:	f104 0018 	add.w	r0, r4, #24
	struct log_msg_cont *cont = msg->payload.ext.next;
   1e740:	6967      	ldr	r7, [r4, #20]
		(void)memcpy(msg->payload.ext.data.args, args,
   1e742:	f001 fb98 	bl	1fe76 <memcpy>
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   1e746:	3d02      	subs	r5, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   1e748:	f108 0808 	add.w	r8, r8, #8
		uint32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   1e74c:	2d07      	cmp	r5, #7
   1e74e:	462e      	mov	r6, r5
   1e750:	bf28      	it	cs
   1e752:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
   1e754:	ea4f 0986 	mov.w	r9, r6, lsl #2
   1e758:	4641      	mov	r1, r8
   1e75a:	1d38      	adds	r0, r7, #4
   1e75c:	464a      	mov	r2, r9
   1e75e:	f001 fb8a 	bl	1fe76 <memcpy>
	while (nargs != 0U) {
   1e762:	1bad      	subs	r5, r5, r6
		cont = cont->next;
   1e764:	683f      	ldr	r7, [r7, #0]
		args += cpy_args;
   1e766:	44c8      	add	r8, r9
	while (nargs != 0U) {
   1e768:	d1f0      	bne.n	1e74c <log_msg_create_n+0x88>
   1e76a:	e7db      	b.n	1e724 <log_msg_create_n+0x60>

0001e76c <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
   1e76c:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   1e76e:	2400      	movs	r4, #0
   1e770:	9400      	str	r4, [sp, #0]
   1e772:	f7ff ff0f 	bl	1e594 <log_msg_hexdump_data_op>
}
   1e776:	b002      	add	sp, #8
   1e778:	bd10      	pop	{r4, pc}

0001e77a <buffer_write>:
{
   1e77a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e77c:	4606      	mov	r6, r0
   1e77e:	460d      	mov	r5, r1
   1e780:	4614      	mov	r4, r2
   1e782:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   1e784:	4621      	mov	r1, r4
   1e786:	4628      	mov	r0, r5
   1e788:	463a      	mov	r2, r7
   1e78a:	47b0      	blx	r6
	} while (len != 0);
   1e78c:	1a24      	subs	r4, r4, r0
		buf += processed;
   1e78e:	4405      	add	r5, r0
	} while (len != 0);
   1e790:	d1f8      	bne.n	1e784 <buffer_write+0xa>
}
   1e792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001e794 <std_print>:
{
   1e794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1e798:	b08e      	sub	sp, #56	; 0x38
   1e79a:	af0e      	add	r7, sp, #56	; 0x38
   1e79c:	4680      	mov	r8, r0
   1e79e:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
   1e7a0:	f7ff ff8e 	bl	1e6c0 <log_msg_str_get>
   1e7a4:	4606      	mov	r6, r0
	uint32_t nargs = log_msg_nargs_get(msg);
   1e7a6:	4640      	mov	r0, r8
   1e7a8:	f7ff ff55 	bl	1e656 <log_msg_nargs_get>
	uint32_t *args = alloca(sizeof(uint32_t)*nargs);
   1e7ac:	0083      	lsls	r3, r0, #2
   1e7ae:	3307      	adds	r3, #7
   1e7b0:	f023 0307 	bic.w	r3, r3, #7
   1e7b4:	ebad 0d03 	sub.w	sp, sp, r3
	uint32_t nargs = log_msg_nargs_get(msg);
   1e7b8:	4682      	mov	sl, r0
	uint32_t *args = alloca(sizeof(uint32_t)*nargs);
   1e7ba:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   1e7bc:	f04f 0900 	mov.w	r9, #0
   1e7c0:	45d1      	cmp	r9, sl
   1e7c2:	d116      	bne.n	1e7f2 <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
   1e7c4:	4640      	mov	r0, r8
   1e7c6:	f7ff ff46 	bl	1e656 <log_msg_nargs_get>
   1e7ca:	280f      	cmp	r0, #15
   1e7cc:	d81e      	bhi.n	1e80c <std_print+0x78>
   1e7ce:	e8df f010 	tbh	[pc, r0, lsl #1]
   1e7d2:	0019      	.short	0x0019
   1e7d4:	00260020 	.word	0x00260020
   1e7d8:	0036002d 	.word	0x0036002d
   1e7dc:	004e0041 	.word	0x004e0041
   1e7e0:	006e005d 	.word	0x006e005d
   1e7e4:	00960081 	.word	0x00960081
   1e7e8:	00c600ad 	.word	0x00c600ad
   1e7ec:	00fe00e1 	.word	0x00fe00e1
   1e7f0:	011d      	.short	0x011d
		args[i] = log_msg_arg_get(msg, i);
   1e7f2:	4649      	mov	r1, r9
   1e7f4:	4640      	mov	r0, r8
   1e7f6:	f7ff ff31 	bl	1e65c <log_msg_arg_get>
   1e7fa:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
	for (i = 0; i < nargs; i++) {
   1e7fe:	f109 0901 	add.w	r9, r9, #1
   1e802:	e7dd      	b.n	1e7c0 <std_print+0x2c>
		print_formatted(log_output, str);
   1e804:	4631      	mov	r1, r6
   1e806:	4628      	mov	r0, r5
   1e808:	f7e7 ffc8 	bl	679c <print_formatted>
}
   1e80c:	46bd      	mov	sp, r7
   1e80e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, str, args[0]);
   1e812:	6822      	ldr	r2, [r4, #0]
   1e814:	4631      	mov	r1, r6
   1e816:	4628      	mov	r0, r5
   1e818:	f7e7 ffc0 	bl	679c <print_formatted>
		break;
   1e81c:	e7f6      	b.n	1e80c <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1]);
   1e81e:	e9d4 2300 	ldrd	r2, r3, [r4]
   1e822:	4631      	mov	r1, r6
   1e824:	4628      	mov	r0, r5
   1e826:	f7e7 ffb9 	bl	679c <print_formatted>
		break;
   1e82a:	e7ef      	b.n	1e80c <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2]);
   1e82c:	68a3      	ldr	r3, [r4, #8]
   1e82e:	9300      	str	r3, [sp, #0]
   1e830:	e9d4 2300 	ldrd	r2, r3, [r4]
   1e834:	4631      	mov	r1, r6
   1e836:	4628      	mov	r0, r5
   1e838:	f7e7 ffb0 	bl	679c <print_formatted>
		break;
   1e83c:	e7e6      	b.n	1e80c <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1e83e:	68e3      	ldr	r3, [r4, #12]
   1e840:	9301      	str	r3, [sp, #4]
   1e842:	68a3      	ldr	r3, [r4, #8]
   1e844:	9300      	str	r3, [sp, #0]
   1e846:	e9d4 2300 	ldrd	r2, r3, [r4]
   1e84a:	4631      	mov	r1, r6
   1e84c:	4628      	mov	r0, r5
   1e84e:	f7e7 ffa5 	bl	679c <print_formatted>
		break;
   1e852:	e7db      	b.n	1e80c <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1e854:	6923      	ldr	r3, [r4, #16]
   1e856:	9302      	str	r3, [sp, #8]
   1e858:	68e3      	ldr	r3, [r4, #12]
   1e85a:	9301      	str	r3, [sp, #4]
   1e85c:	68a3      	ldr	r3, [r4, #8]
   1e85e:	9300      	str	r3, [sp, #0]
   1e860:	e9d4 2300 	ldrd	r2, r3, [r4]
   1e864:	4631      	mov	r1, r6
   1e866:	4628      	mov	r0, r5
   1e868:	f7e7 ff98 	bl	679c <print_formatted>
		break;
   1e86c:	e7ce      	b.n	1e80c <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1e86e:	6963      	ldr	r3, [r4, #20]
   1e870:	9303      	str	r3, [sp, #12]
   1e872:	6923      	ldr	r3, [r4, #16]
   1e874:	9302      	str	r3, [sp, #8]
   1e876:	68e3      	ldr	r3, [r4, #12]
   1e878:	9301      	str	r3, [sp, #4]
   1e87a:	68a3      	ldr	r3, [r4, #8]
   1e87c:	9300      	str	r3, [sp, #0]
   1e87e:	e9d4 2300 	ldrd	r2, r3, [r4]
   1e882:	4631      	mov	r1, r6
   1e884:	4628      	mov	r0, r5
   1e886:	f7e7 ff89 	bl	679c <print_formatted>
		break;
   1e88a:	e7bf      	b.n	1e80c <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1e88c:	69a3      	ldr	r3, [r4, #24]
   1e88e:	9304      	str	r3, [sp, #16]
   1e890:	6963      	ldr	r3, [r4, #20]
   1e892:	9303      	str	r3, [sp, #12]
   1e894:	6923      	ldr	r3, [r4, #16]
   1e896:	9302      	str	r3, [sp, #8]
   1e898:	68e3      	ldr	r3, [r4, #12]
   1e89a:	9301      	str	r3, [sp, #4]
   1e89c:	68a3      	ldr	r3, [r4, #8]
   1e89e:	9300      	str	r3, [sp, #0]
   1e8a0:	e9d4 2300 	ldrd	r2, r3, [r4]
   1e8a4:	4631      	mov	r1, r6
   1e8a6:	4628      	mov	r0, r5
   1e8a8:	f7e7 ff78 	bl	679c <print_formatted>
		break;
   1e8ac:	e7ae      	b.n	1e80c <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1e8ae:	69e3      	ldr	r3, [r4, #28]
   1e8b0:	9305      	str	r3, [sp, #20]
   1e8b2:	69a3      	ldr	r3, [r4, #24]
   1e8b4:	9304      	str	r3, [sp, #16]
   1e8b6:	6963      	ldr	r3, [r4, #20]
   1e8b8:	9303      	str	r3, [sp, #12]
   1e8ba:	6923      	ldr	r3, [r4, #16]
   1e8bc:	9302      	str	r3, [sp, #8]
   1e8be:	68e3      	ldr	r3, [r4, #12]
   1e8c0:	9301      	str	r3, [sp, #4]
   1e8c2:	68a3      	ldr	r3, [r4, #8]
   1e8c4:	9300      	str	r3, [sp, #0]
   1e8c6:	e9d4 2300 	ldrd	r2, r3, [r4]
   1e8ca:	4631      	mov	r1, r6
   1e8cc:	4628      	mov	r0, r5
   1e8ce:	f7e7 ff65 	bl	679c <print_formatted>
		break;
   1e8d2:	e79b      	b.n	1e80c <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1e8d4:	6a23      	ldr	r3, [r4, #32]
   1e8d6:	9306      	str	r3, [sp, #24]
   1e8d8:	69e3      	ldr	r3, [r4, #28]
   1e8da:	9305      	str	r3, [sp, #20]
   1e8dc:	69a3      	ldr	r3, [r4, #24]
   1e8de:	9304      	str	r3, [sp, #16]
   1e8e0:	6963      	ldr	r3, [r4, #20]
   1e8e2:	9303      	str	r3, [sp, #12]
   1e8e4:	6923      	ldr	r3, [r4, #16]
   1e8e6:	9302      	str	r3, [sp, #8]
   1e8e8:	68e3      	ldr	r3, [r4, #12]
   1e8ea:	9301      	str	r3, [sp, #4]
   1e8ec:	68a3      	ldr	r3, [r4, #8]
   1e8ee:	9300      	str	r3, [sp, #0]
   1e8f0:	e9d4 2300 	ldrd	r2, r3, [r4]
   1e8f4:	4631      	mov	r1, r6
   1e8f6:	4628      	mov	r0, r5
   1e8f8:	f7e7 ff50 	bl	679c <print_formatted>
		break;
   1e8fc:	e786      	b.n	1e80c <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1e8fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1e900:	9307      	str	r3, [sp, #28]
   1e902:	6a23      	ldr	r3, [r4, #32]
   1e904:	9306      	str	r3, [sp, #24]
   1e906:	69e3      	ldr	r3, [r4, #28]
   1e908:	9305      	str	r3, [sp, #20]
   1e90a:	69a3      	ldr	r3, [r4, #24]
   1e90c:	9304      	str	r3, [sp, #16]
   1e90e:	6963      	ldr	r3, [r4, #20]
   1e910:	9303      	str	r3, [sp, #12]
   1e912:	6923      	ldr	r3, [r4, #16]
   1e914:	9302      	str	r3, [sp, #8]
   1e916:	68e3      	ldr	r3, [r4, #12]
   1e918:	9301      	str	r3, [sp, #4]
   1e91a:	68a3      	ldr	r3, [r4, #8]
   1e91c:	9300      	str	r3, [sp, #0]
   1e91e:	e9d4 2300 	ldrd	r2, r3, [r4]
   1e922:	4631      	mov	r1, r6
   1e924:	4628      	mov	r0, r5
   1e926:	f7e7 ff39 	bl	679c <print_formatted>
		break;
   1e92a:	e76f      	b.n	1e80c <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1e92c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1e92e:	9308      	str	r3, [sp, #32]
   1e930:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1e932:	9307      	str	r3, [sp, #28]
   1e934:	6a23      	ldr	r3, [r4, #32]
   1e936:	9306      	str	r3, [sp, #24]
   1e938:	69e3      	ldr	r3, [r4, #28]
   1e93a:	9305      	str	r3, [sp, #20]
   1e93c:	69a3      	ldr	r3, [r4, #24]
   1e93e:	9304      	str	r3, [sp, #16]
   1e940:	6963      	ldr	r3, [r4, #20]
   1e942:	9303      	str	r3, [sp, #12]
   1e944:	6923      	ldr	r3, [r4, #16]
   1e946:	9302      	str	r3, [sp, #8]
   1e948:	68e3      	ldr	r3, [r4, #12]
   1e94a:	9301      	str	r3, [sp, #4]
   1e94c:	68a3      	ldr	r3, [r4, #8]
   1e94e:	9300      	str	r3, [sp, #0]
   1e950:	e9d4 2300 	ldrd	r2, r3, [r4]
   1e954:	4631      	mov	r1, r6
   1e956:	4628      	mov	r0, r5
   1e958:	f7e7 ff20 	bl	679c <print_formatted>
		break;
   1e95c:	e756      	b.n	1e80c <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1e95e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1e960:	9309      	str	r3, [sp, #36]	; 0x24
   1e962:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1e964:	9308      	str	r3, [sp, #32]
   1e966:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1e968:	9307      	str	r3, [sp, #28]
   1e96a:	6a23      	ldr	r3, [r4, #32]
   1e96c:	9306      	str	r3, [sp, #24]
   1e96e:	69e3      	ldr	r3, [r4, #28]
   1e970:	9305      	str	r3, [sp, #20]
   1e972:	69a3      	ldr	r3, [r4, #24]
   1e974:	9304      	str	r3, [sp, #16]
   1e976:	6963      	ldr	r3, [r4, #20]
   1e978:	9303      	str	r3, [sp, #12]
   1e97a:	6923      	ldr	r3, [r4, #16]
   1e97c:	9302      	str	r3, [sp, #8]
   1e97e:	68e3      	ldr	r3, [r4, #12]
   1e980:	9301      	str	r3, [sp, #4]
   1e982:	68a3      	ldr	r3, [r4, #8]
   1e984:	9300      	str	r3, [sp, #0]
   1e986:	e9d4 2300 	ldrd	r2, r3, [r4]
   1e98a:	4631      	mov	r1, r6
   1e98c:	4628      	mov	r0, r5
   1e98e:	f7e7 ff05 	bl	679c <print_formatted>
		break;
   1e992:	e73b      	b.n	1e80c <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1e994:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1e996:	930a      	str	r3, [sp, #40]	; 0x28
   1e998:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1e99a:	9309      	str	r3, [sp, #36]	; 0x24
   1e99c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1e99e:	9308      	str	r3, [sp, #32]
   1e9a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1e9a2:	9307      	str	r3, [sp, #28]
   1e9a4:	6a23      	ldr	r3, [r4, #32]
   1e9a6:	9306      	str	r3, [sp, #24]
   1e9a8:	69e3      	ldr	r3, [r4, #28]
   1e9aa:	9305      	str	r3, [sp, #20]
   1e9ac:	69a3      	ldr	r3, [r4, #24]
   1e9ae:	9304      	str	r3, [sp, #16]
   1e9b0:	6963      	ldr	r3, [r4, #20]
   1e9b2:	9303      	str	r3, [sp, #12]
   1e9b4:	6923      	ldr	r3, [r4, #16]
   1e9b6:	9302      	str	r3, [sp, #8]
   1e9b8:	68e3      	ldr	r3, [r4, #12]
   1e9ba:	9301      	str	r3, [sp, #4]
   1e9bc:	68a3      	ldr	r3, [r4, #8]
   1e9be:	9300      	str	r3, [sp, #0]
   1e9c0:	e9d4 2300 	ldrd	r2, r3, [r4]
   1e9c4:	4631      	mov	r1, r6
   1e9c6:	4628      	mov	r0, r5
   1e9c8:	f7e7 fee8 	bl	679c <print_formatted>
		break;
   1e9cc:	e71e      	b.n	1e80c <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1e9ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1e9d0:	930b      	str	r3, [sp, #44]	; 0x2c
   1e9d2:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1e9d4:	930a      	str	r3, [sp, #40]	; 0x28
   1e9d6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1e9d8:	9309      	str	r3, [sp, #36]	; 0x24
   1e9da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1e9dc:	9308      	str	r3, [sp, #32]
   1e9de:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1e9e0:	9307      	str	r3, [sp, #28]
   1e9e2:	6a23      	ldr	r3, [r4, #32]
   1e9e4:	9306      	str	r3, [sp, #24]
   1e9e6:	69e3      	ldr	r3, [r4, #28]
   1e9e8:	9305      	str	r3, [sp, #20]
   1e9ea:	69a3      	ldr	r3, [r4, #24]
   1e9ec:	9304      	str	r3, [sp, #16]
   1e9ee:	6963      	ldr	r3, [r4, #20]
   1e9f0:	9303      	str	r3, [sp, #12]
   1e9f2:	6923      	ldr	r3, [r4, #16]
   1e9f4:	9302      	str	r3, [sp, #8]
   1e9f6:	68e3      	ldr	r3, [r4, #12]
   1e9f8:	9301      	str	r3, [sp, #4]
   1e9fa:	68a3      	ldr	r3, [r4, #8]
   1e9fc:	9300      	str	r3, [sp, #0]
   1e9fe:	e9d4 2300 	ldrd	r2, r3, [r4]
   1ea02:	4631      	mov	r1, r6
   1ea04:	4628      	mov	r0, r5
   1ea06:	f7e7 fec9 	bl	679c <print_formatted>
		break;
   1ea0a:	e6ff      	b.n	1e80c <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1ea0c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1ea0e:	930c      	str	r3, [sp, #48]	; 0x30
   1ea10:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1ea12:	930b      	str	r3, [sp, #44]	; 0x2c
   1ea14:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1ea16:	930a      	str	r3, [sp, #40]	; 0x28
   1ea18:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1ea1a:	9309      	str	r3, [sp, #36]	; 0x24
   1ea1c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1ea1e:	9308      	str	r3, [sp, #32]
   1ea20:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1ea22:	9307      	str	r3, [sp, #28]
   1ea24:	6a23      	ldr	r3, [r4, #32]
   1ea26:	9306      	str	r3, [sp, #24]
   1ea28:	69e3      	ldr	r3, [r4, #28]
   1ea2a:	9305      	str	r3, [sp, #20]
   1ea2c:	69a3      	ldr	r3, [r4, #24]
   1ea2e:	9304      	str	r3, [sp, #16]
   1ea30:	6963      	ldr	r3, [r4, #20]
   1ea32:	9303      	str	r3, [sp, #12]
   1ea34:	6923      	ldr	r3, [r4, #16]
   1ea36:	9302      	str	r3, [sp, #8]
   1ea38:	68e3      	ldr	r3, [r4, #12]
   1ea3a:	9301      	str	r3, [sp, #4]
   1ea3c:	68a3      	ldr	r3, [r4, #8]
   1ea3e:	9300      	str	r3, [sp, #0]
   1ea40:	e9d4 2300 	ldrd	r2, r3, [r4]
   1ea44:	4631      	mov	r1, r6
   1ea46:	4628      	mov	r0, r5
   1ea48:	f7e7 fea8 	bl	679c <print_formatted>
}
   1ea4c:	e6de      	b.n	1e80c <std_print+0x78>

0001ea4e <log_output_flush>:
		     log_output->control_block->offset,
   1ea4e:	6842      	ldr	r2, [r0, #4]
	buffer_write(log_output->func, log_output->buf,
   1ea50:	6881      	ldr	r1, [r0, #8]
{
   1ea52:	b510      	push	{r4, lr}
   1ea54:	4604      	mov	r4, r0
	buffer_write(log_output->func, log_output->buf,
   1ea56:	e9d2 2300 	ldrd	r2, r3, [r2]
   1ea5a:	6800      	ldr	r0, [r0, #0]
   1ea5c:	f7ff fe8d 	bl	1e77a <buffer_write>
	log_output->control_block->offset = 0;
   1ea60:	6863      	ldr	r3, [r4, #4]
   1ea62:	2200      	movs	r2, #0
   1ea64:	601a      	str	r2, [r3, #0]
}
   1ea66:	bd10      	pop	{r4, pc}

0001ea68 <out_func>:
{
   1ea68:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   1ea6a:	684b      	ldr	r3, [r1, #4]
   1ea6c:	681a      	ldr	r2, [r3, #0]
   1ea6e:	68cb      	ldr	r3, [r1, #12]
   1ea70:	429a      	cmp	r2, r3
{
   1ea72:	4605      	mov	r5, r0
   1ea74:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   1ea76:	d102      	bne.n	1ea7e <out_func+0x16>
		log_output_flush(out_ctx);
   1ea78:	4608      	mov	r0, r1
   1ea7a:	f7ff ffe8 	bl	1ea4e <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1ea7e:	6863      	ldr	r3, [r4, #4]
   1ea80:	f3bf 8f5b 	dmb	ish
   1ea84:	e853 2f00 	ldrex	r2, [r3]
   1ea88:	1c51      	adds	r1, r2, #1
   1ea8a:	e843 1000 	strex	r0, r1, [r3]
   1ea8e:	2800      	cmp	r0, #0
   1ea90:	d1f8      	bne.n	1ea84 <out_func+0x1c>
   1ea92:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
   1ea96:	68a3      	ldr	r3, [r4, #8]
   1ea98:	549d      	strb	r5, [r3, r2]
}
   1ea9a:	2000      	movs	r0, #0
   1ea9c:	bd38      	pop	{r3, r4, r5, pc}

0001ea9e <char_out>:
{
   1ea9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1eaa0:	460d      	mov	r5, r1
   1eaa2:	4616      	mov	r6, r2
	for (size_t i = 0; i < length; i++) {
   1eaa4:	4604      	mov	r4, r0
   1eaa6:	1847      	adds	r7, r0, r1
   1eaa8:	42bc      	cmp	r4, r7
   1eaaa:	d101      	bne.n	1eab0 <char_out+0x12>
}
   1eaac:	4628      	mov	r0, r5
   1eaae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uart_poll_out(dev, data[i]);
   1eab0:	f814 1b01 	ldrb.w	r1, [r4], #1
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	api->poll_out(dev, out_char);
   1eab4:	68b3      	ldr	r3, [r6, #8]
   1eab6:	4630      	mov	r0, r6
   1eab8:	685b      	ldr	r3, [r3, #4]
   1eaba:	4798      	blx	r3
	for (size_t i = 0; i < length; i++) {
   1eabc:	e7f4      	b.n	1eaa8 <char_out+0xa>

0001eabe <uart_poll_out>:
   1eabe:	6883      	ldr	r3, [r0, #8]
   1eac0:	685b      	ldr	r3, [r3, #4]
   1eac2:	4718      	bx	r3

0001eac4 <debug_hook_out_nop>:
}
   1eac4:	2000      	movs	r0, #0
   1eac6:	4770      	bx	lr

0001eac8 <get_status>:
	data = get_sub_data(dev, type);
   1eac8:	68c3      	ldr	r3, [r0, #12]
	return &data->subsys[type];
   1eaca:	b2c9      	uxtb	r1, r1
	if (data->started) {
   1eacc:	220c      	movs	r2, #12
   1eace:	fb02 3101 	mla	r1, r2, r1, r3
   1ead2:	7a4b      	ldrb	r3, [r1, #9]
   1ead4:	b923      	cbnz	r3, 1eae0 <get_status+0x18>
	if (data->ref > 0) {
   1ead6:	7a08      	ldrb	r0, [r1, #8]
		return CLOCK_CONTROL_STATUS_ON;
   1ead8:	fab0 f080 	clz	r0, r0
   1eadc:	0940      	lsrs	r0, r0, #5
   1eade:	4770      	bx	lr
   1eae0:	2002      	movs	r0, #2
}
   1eae2:	4770      	bx	lr

0001eae4 <clock_stop>:
{
   1eae4:	b570      	push	{r4, r5, r6, lr}
   1eae6:	b2c9      	uxtb	r1, r1
	config = get_sub_config(dev, type);
   1eae8:	6844      	ldr	r4, [r0, #4]
	data = get_sub_data(dev, type);
   1eaea:	68c5      	ldr	r5, [r0, #12]
	__asm__ volatile(
   1eaec:	f04f 0320 	mov.w	r3, #32
   1eaf0:	f3ef 8611 	mrs	r6, BASEPRI
   1eaf4:	f383 8811 	msr	BASEPRI, r3
   1eaf8:	f3bf 8f6f 	isb	sy
	if (data->ref == 0) {
   1eafc:	220c      	movs	r2, #12
   1eafe:	434a      	muls	r2, r1
   1eb00:	18ab      	adds	r3, r5, r2
   1eb02:	7a18      	ldrb	r0, [r3, #8]
   1eb04:	b190      	cbz	r0, 1eb2c <clock_stop+0x48>
	data->ref--;
   1eb06:	3801      	subs	r0, #1
   1eb08:	b2c0      	uxtb	r0, r0
   1eb0a:	7218      	strb	r0, [r3, #8]
	if (data->ref == 0) {
   1eb0c:	b988      	cbnz	r0, 1eb32 <clock_stop+0x4e>
		nrf_clock_task_trigger(NRF_CLOCK, config->stop_tsk);
   1eb0e:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	list->head = NULL;
   1eb12:	50a8      	str	r0, [r5, r2]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1eb14:	78ca      	ldrb	r2, [r1, #3]
	list->tail = NULL;
   1eb16:	6058      	str	r0, [r3, #4]
   1eb18:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1eb1c:	2101      	movs	r1, #1
   1eb1e:	6011      	str	r1, [r2, #0]
		data->started = false;
   1eb20:	7258      	strb	r0, [r3, #9]
	__asm__ volatile(
   1eb22:	f386 8811 	msr	BASEPRI, r6
   1eb26:	f3bf 8f6f 	isb	sy
}
   1eb2a:	bd70      	pop	{r4, r5, r6, pc}
		err = -EALREADY;
   1eb2c:	f06f 0044 	mvn.w	r0, #68	; 0x44
   1eb30:	e7f7      	b.n	1eb22 <clock_stop+0x3e>
	int err = 0;
   1eb32:	2000      	movs	r0, #0
   1eb34:	e7f5      	b.n	1eb22 <clock_stop+0x3e>

0001eb36 <clock_async_start>:
{
   1eb36:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	config = get_sub_config(dev, type);
   1eb3a:	6846      	ldr	r6, [r0, #4]
	clk_data = get_sub_data(dev, type);
   1eb3c:	f8d0 e00c 	ldr.w	lr, [r0, #12]
   1eb40:	b2cf      	uxtb	r7, r1
	if ((data != NULL)
   1eb42:	b14a      	cbz	r2, 1eb58 <clock_async_start+0x22>
	sys_snode_t *item = sys_slist_peek_head(list);
   1eb44:	230c      	movs	r3, #12
   1eb46:	437b      	muls	r3, r7
   1eb48:	f85e 3003 	ldr.w	r3, [lr, r3]
		if (item == node) {
   1eb4c:	429a      	cmp	r2, r3
   1eb4e:	d052      	beq.n	1ebf6 <clock_async_start+0xc0>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1eb50:	b113      	cbz	r3, 1eb58 <clock_async_start+0x22>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1eb52:	681b      	ldr	r3, [r3, #0]
	} while (item);
   1eb54:	2b00      	cmp	r3, #0
   1eb56:	d1f9      	bne.n	1eb4c <clock_async_start+0x16>
	__asm__ volatile(
   1eb58:	f04f 0320 	mov.w	r3, #32
   1eb5c:	f3ef 8c11 	mrs	ip, BASEPRI
   1eb60:	f383 8811 	msr	BASEPRI, r3
   1eb64:	f3bf 8f6f 	isb	sy
	ref = ++clk_data->ref;
   1eb68:	250c      	movs	r5, #12
   1eb6a:	437d      	muls	r5, r7
   1eb6c:	eb0e 0305 	add.w	r3, lr, r5
   1eb70:	7a1c      	ldrb	r4, [r3, #8]
   1eb72:	3401      	adds	r4, #1
   1eb74:	b2e4      	uxtb	r4, r4
   1eb76:	721c      	strb	r4, [r3, #8]
	__asm__ volatile(
   1eb78:	f38c 8811 	msr	BASEPRI, ip
   1eb7c:	f3bf 8f6f 	isb	sy
	if (data) {
   1eb80:	b35a      	cbz	r2, 1ebda <clock_async_start+0xa4>
    p_reg->INTENCLR = mask;
   1eb82:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
   1eb86:	f04f 0803 	mov.w	r8, #3
   1eb8a:	f8cc 8308 	str.w	r8, [ip, #776]	; 0x308
		already_started = clk_data->started;
   1eb8e:	f893 c009 	ldrb.w	ip, [r3, #9]
		if (!already_started) {
   1eb92:	f1bc 0f00 	cmp.w	ip, #0
   1eb96:	d115      	bne.n	1ebc4 <clock_async_start+0x8e>
	__asm__ volatile(
   1eb98:	f04f 0820 	mov.w	r8, #32
   1eb9c:	f3ef 8911 	mrs	r9, BASEPRI
   1eba0:	f388 8811 	msr	BASEPRI, r8
   1eba4:	f3bf 8f6f 	isb	sy
	parent->next = child;
   1eba8:	f8c2 c000 	str.w	ip, [r2]
Z_GENLIST_APPEND(slist, snode)
   1ebac:	f8d3 8004 	ldr.w	r8, [r3, #4]
   1ebb0:	f1b8 0f00 	cmp.w	r8, #0
   1ebb4:	d11b      	bne.n	1ebee <clock_async_start+0xb8>
	list->tail = node;
   1ebb6:	605a      	str	r2, [r3, #4]
	list->head = node;
   1ebb8:	f84e 2005 	str.w	r2, [lr, r5]
	__asm__ volatile(
   1ebbc:	f389 8811 	msr	BASEPRI, r9
   1ebc0:	f3bf 8f6f 	isb	sy
    p_reg->INTENSET = mask;
   1ebc4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1ebc8:	2503      	movs	r5, #3
   1ebca:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
		if (already_started) {
   1ebce:	f1bc 0f00 	cmp.w	ip, #0
   1ebd2:	d002      	beq.n	1ebda <clock_async_start+0xa4>
			data->cb(dev, subsys, data->user_data);
   1ebd4:	e9d2 3201 	ldrd	r3, r2, [r2, #4]
   1ebd8:	4798      	blx	r3
	if (ref == 1) {
   1ebda:	2c01      	cmp	r4, #1
   1ebdc:	d105      	bne.n	1ebea <clock_async_start+0xb4>
		nrf_clock_task_trigger(NRF_CLOCK, config->start_tsk);
   1ebde:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ebe2:	78b3      	ldrb	r3, [r6, #2]
   1ebe4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1ebe8:	601c      	str	r4, [r3, #0]
	return 0;
   1ebea:	2000      	movs	r0, #0
   1ebec:	e005      	b.n	1ebfa <clock_async_start+0xc4>
	parent->next = child;
   1ebee:	f8c8 2000 	str.w	r2, [r8]
	list->tail = node;
   1ebf2:	605a      	str	r2, [r3, #4]
}
   1ebf4:	e7e2      	b.n	1ebbc <clock_async_start+0x86>
		return -EBUSY;
   1ebf6:	f06f 000f 	mvn.w	r0, #15
}
   1ebfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001ebfe <clock_start>:
	return clock_async_start(dev, sub_system, NULL);
   1ebfe:	2200      	movs	r2, #0
   1ec00:	f7ff bf99 	b.w	1eb36 <clock_async_start>

0001ec04 <clk_init>:
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1ec04:	2200      	movs	r2, #0
{
   1ec06:	b510      	push	{r4, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1ec08:	2101      	movs	r1, #1
{
   1ec0a:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1ec0c:	4610      	mov	r0, r2
   1ec0e:	f7e8 fc79 	bl	7504 <z_arm_irq_priority_set>
	irq_enable(DT_INST_IRQN(0));
   1ec12:	2000      	movs	r0, #0
   1ec14:	f7e8 fc44 	bl	74a0 <arch_irq_enable>
    return false;
}

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
   1ec18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1ec1c:	2201      	movs	r2, #1
   1ec1e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->INTENSET = mask;
   1ec22:	2203      	movs	r2, #3
   1ec24:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		sys_slist_init(&(get_sub_data(dev, i)->list));
   1ec28:	68e3      	ldr	r3, [r4, #12]
	list->head = NULL;
   1ec2a:	2000      	movs	r0, #0
	list->tail = NULL;
   1ec2c:	e9c3 0000 	strd	r0, r0, [r3]
   1ec30:	68e3      	ldr	r3, [r4, #12]
   1ec32:	e9c3 0003 	strd	r0, r0, [r3, #12]
}
   1ec36:	bd10      	pop	{r4, pc}

0001ec38 <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   1ec38:	4770      	bx	lr

0001ec3a <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   1ec3a:	4770      	bx	lr

0001ec3c <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   1ec3c:	f7e8 b9ca 	b.w	6fd4 <_DoInit>

0001ec40 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(struct device *unused)
{
   1ec40:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   1ec42:	f7ff fffb 	bl	1ec3c <SEGGER_RTT_Init>

	return 0;
}
   1ec46:	2000      	movs	r0, #0
   1ec48:	bd08      	pop	{r3, pc}

0001ec4a <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   1ec4a:	b538      	push	{r3, r4, r5, lr}
   1ec4c:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   1ec4e:	42ab      	cmp	r3, r5
{
   1ec50:	4611      	mov	r1, r2
   1ec52:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   1ec54:	d804      	bhi.n	1ec60 <_copy+0x16>
		(void)memcpy(to, from, from_len);
   1ec56:	461a      	mov	r2, r3
   1ec58:	f001 f90d 	bl	1fe76 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   1ec5c:	4620      	mov	r0, r4
   1ec5e:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   1ec60:	2400      	movs	r4, #0
   1ec62:	e7fb      	b.n	1ec5c <_copy+0x12>

0001ec64 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   1ec64:	f001 b932 	b.w	1fecc <memset>

0001ec68 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   1ec68:	09c3      	lsrs	r3, r0, #7
   1ec6a:	005a      	lsls	r2, r3, #1
   1ec6c:	4413      	add	r3, r2
   1ec6e:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   1ec72:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   1ec76:	b2c0      	uxtb	r0, r0
   1ec78:	4770      	bx	lr

0001ec7a <uECC_make_key>:
	}
	return 0;
}

int uECC_make_key(uint8_t *public_key, uint8_t *private_key, uECC_Curve curve)
{
   1ec7a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ec7e:	4606      	mov	r6, r0
   1ec80:	b0a9      	sub	sp, #164	; 0xa4
   1ec82:	4688      	mov	r8, r1
   1ec84:	4614      	mov	r4, r2
   1ec86:	2740      	movs	r7, #64	; 0x40
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
        		return 0;
		}

		/* computing modular reduction of _random (see FIPS 186.4 B.4.1): */
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   1ec88:	f102 0924 	add.w	r9, r2, #36	; 0x24
		uECC_RNG_Function rng_function = uECC_get_rng();
   1ec8c:	f7e8 fa28 	bl	70e0 <uECC_get_rng>
		if (!rng_function ||
   1ec90:	4603      	mov	r3, r0
   1ec92:	2800      	cmp	r0, #0
   1ec94:	d03e      	beq.n	1ed14 <uECC_make_key+0x9a>
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
   1ec96:	2140      	movs	r1, #64	; 0x40
   1ec98:	a808      	add	r0, sp, #32
   1ec9a:	4798      	blx	r3
		if (!rng_function ||
   1ec9c:	b3d0      	cbz	r0, 1ed14 <uECC_make_key+0x9a>
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   1ec9e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
   1eca2:	f112 031f 	adds.w	r3, r2, #31
   1eca6:	bf48      	it	mi
   1eca8:	f102 033e 	addmi.w	r3, r2, #62	; 0x3e
   1ecac:	466d      	mov	r5, sp
   1ecae:	464a      	mov	r2, r9
   1ecb0:	a908      	add	r1, sp, #32
   1ecb2:	4628      	mov	r0, r5
   1ecb4:	f343 1347 	sbfx	r3, r3, #5, #8
   1ecb8:	f000 fa03 	bl	1f0c2 <uECC_vli_mmod>

		/* Computing public-key from private: */
		if (EccPoint_compute_public_key(_public, _private, curve)) {
   1ecbc:	4622      	mov	r2, r4
   1ecbe:	4629      	mov	r1, r5
   1ecc0:	a818      	add	r0, sp, #96	; 0x60
   1ecc2:	f000 fe19 	bl	1f8f8 <EccPoint_compute_public_key>
   1ecc6:	b318      	cbz	r0, 1ed10 <uECC_make_key+0x96>

			/* Converting buffers to correct bit order: */
			uECC_vli_nativeToBytes(private_key,
					       BITS_TO_BYTES(curve->num_n_bits),
   1ecc8:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
			uECC_vli_nativeToBytes(private_key,
   1eccc:	1dd9      	adds	r1, r3, #7
   1ecce:	bf48      	it	mi
   1ecd0:	f103 010e 	addmi.w	r1, r3, #14
   1ecd4:	462a      	mov	r2, r5
   1ecd6:	4640      	mov	r0, r8
   1ecd8:	10c9      	asrs	r1, r1, #3
   1ecda:	f000 fe35 	bl	1f948 <uECC_vli_nativeToBytes>
					       _private);
			uECC_vli_nativeToBytes(public_key,
   1ecde:	f994 1001 	ldrsb.w	r1, [r4, #1]
   1ece2:	aa18      	add	r2, sp, #96	; 0x60
   1ece4:	4630      	mov	r0, r6
   1ece6:	f000 fe2f 	bl	1f948 <uECC_vli_nativeToBytes>
					       curve->num_bytes,
					       _public);
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   1ecea:	f994 1001 	ldrsb.w	r1, [r4, #1]
 					       curve->num_bytes,
					       _public + curve->num_words);
   1ecee:	f994 2000 	ldrsb.w	r2, [r4]
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   1ecf2:	ab18      	add	r3, sp, #96	; 0x60
   1ecf4:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   1ecf8:	1870      	adds	r0, r6, r1
   1ecfa:	f000 fe25 	bl	1f948 <uECC_vli_nativeToBytes>
#ifdef TINYCRYPT_ARCH_HAS_SET_SECURE
extern void _set_secure(void *to, uint8_t val, unsigned int len);
#else /* ! TINYCRYPT_ARCH_HAS_SET_SECURE */
static inline void _set_secure(void *to, uint8_t val, unsigned int len)
{
  (void) memset(to, val, len);
   1ecfe:	2220      	movs	r2, #32
   1ed00:	2100      	movs	r1, #0
   1ed02:	4628      	mov	r0, r5
   1ed04:	f001 f8e2 	bl	1fecc <memset>

			/* erasing temporary buffer that stored secret: */
			_set_secure(_private, 0, NUM_ECC_BYTES);

      			return 1;
   1ed08:	2001      	movs	r0, #1
    		}
  	}
	return 0;
}
   1ed0a:	b029      	add	sp, #164	; 0xa4
   1ed0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
   1ed10:	3f01      	subs	r7, #1
   1ed12:	d1bb      	bne.n	1ec8c <uECC_make_key+0x12>
        		return 0;
   1ed14:	2000      	movs	r0, #0
   1ed16:	e7f8      	b.n	1ed0a <uECC_make_key+0x90>

0001ed18 <uECC_shared_secret>:

int uECC_shared_secret(const uint8_t *public_key, const uint8_t *private_key,
		       uint8_t *secret, uECC_Curve curve)
{
   1ed18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ed1c:	461c      	mov	r4, r3
	uECC_word_t tmp[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {_private, tmp};
	uECC_word_t *initial_Z = 0;
	uECC_word_t carry;
	wordcount_t num_words = curve->num_words;
	wordcount_t num_bytes = curve->num_bytes;
   1ed1e:	f993 7001 	ldrsb.w	r7, [r3, #1]
	wordcount_t num_words = curve->num_words;
   1ed22:	f993 a000 	ldrsb.w	sl, [r3]
	int r;

	/* Converting buffers to correct bit order: */
	uECC_vli_bytesToNative(_private,
      			       private_key,
			       BITS_TO_BYTES(curve->num_n_bits));
   1ed26:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
{
   1ed2a:	b0a4      	sub	sp, #144	; 0x90
   1ed2c:	4690      	mov	r8, r2
	uECC_vli_bytesToNative(_private,
   1ed2e:	1dda      	adds	r2, r3, #7
   1ed30:	bf48      	it	mi
   1ed32:	f103 020e 	addmi.w	r2, r3, #14
	uECC_word_t *p2[2] = {_private, tmp};
   1ed36:	ad04      	add	r5, sp, #16
{
   1ed38:	4681      	mov	r9, r0
	uECC_word_t *p2[2] = {_private, tmp};
   1ed3a:	ae0c      	add	r6, sp, #48	; 0x30
	uECC_vli_bytesToNative(_private,
   1ed3c:	4628      	mov	r0, r5
   1ed3e:	10d2      	asrs	r2, r2, #3
	uECC_word_t *p2[2] = {_private, tmp};
   1ed40:	9502      	str	r5, [sp, #8]
   1ed42:	9603      	str	r6, [sp, #12]
	uECC_vli_bytesToNative(_private,
   1ed44:	f000 fe14 	bl	1f970 <uECC_vli_bytesToNative>
	uECC_vli_bytesToNative(_public,
   1ed48:	463a      	mov	r2, r7
   1ed4a:	4649      	mov	r1, r9
   1ed4c:	a814      	add	r0, sp, #80	; 0x50
   1ed4e:	f000 fe0f 	bl	1f970 <uECC_vli_bytesToNative>
      			       public_key,
			       num_bytes);
	uECC_vli_bytesToNative(_public + num_words,
   1ed52:	ab14      	add	r3, sp, #80	; 0x50
   1ed54:	eb09 0107 	add.w	r1, r9, r7
   1ed58:	eb03 008a 	add.w	r0, r3, sl, lsl #2
   1ed5c:	463a      	mov	r2, r7
   1ed5e:	f000 fe07 	bl	1f970 <uECC_vli_bytesToNative>
			       public_key + num_bytes,
			       num_bytes);

	/* Regularize the bitcount for the private key so that attackers cannot use a
	 * side channel attack to learn the number of leading zeros. */
	carry = regularize_k(_private, _private, tmp, curve);
   1ed62:	4623      	mov	r3, r4
   1ed64:	4632      	mov	r2, r6
   1ed66:	4629      	mov	r1, r5
   1ed68:	4628      	mov	r0, r5
   1ed6a:	f000 fd99 	bl	1f8a0 <regularize_k>
			goto clear_and_out;
    		}
    		initial_Z = p2[carry];
  	}

	EccPoint_mult(_public, _public, p2[!carry], initial_Z, curve->num_n_bits + 1,
   1ed6e:	fab0 f080 	clz	r0, r0
   1ed72:	9401      	str	r4, [sp, #4]
   1ed74:	ab24      	add	r3, sp, #144	; 0x90
   1ed76:	0940      	lsrs	r0, r0, #5
   1ed78:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   1ed7c:	8863      	ldrh	r3, [r4, #2]
   1ed7e:	3301      	adds	r3, #1
   1ed80:	b21b      	sxth	r3, r3
   1ed82:	9300      	str	r3, [sp, #0]
   1ed84:	a914      	add	r1, sp, #80	; 0x50
   1ed86:	2300      	movs	r3, #0
   1ed88:	f850 2c88 	ldr.w	r2, [r0, #-136]
   1ed8c:	4608      	mov	r0, r1
   1ed8e:	f000 fcb8 	bl	1f702 <EccPoint_mult>
		      curve);

	uECC_vli_nativeToBytes(secret, num_bytes, _public);
   1ed92:	aa14      	add	r2, sp, #80	; 0x50
   1ed94:	4639      	mov	r1, r7
   1ed96:	4640      	mov	r0, r8
   1ed98:	f000 fdd6 	bl	1f948 <uECC_vli_nativeToBytes>
	r = !EccPoint_isZero(_public, curve);
   1ed9c:	4621      	mov	r1, r4
   1ed9e:	a814      	add	r0, sp, #80	; 0x50
   1eda0:	f000 fc24 	bl	1f5ec <EccPoint_isZero>
   1eda4:	af02      	add	r7, sp, #8
   1eda6:	4604      	mov	r4, r0
   1eda8:	2208      	movs	r2, #8
   1edaa:	2100      	movs	r1, #0
   1edac:	4638      	mov	r0, r7
   1edae:	f001 f88d 	bl	1fecc <memset>
   1edb2:	2220      	movs	r2, #32
   1edb4:	2100      	movs	r1, #0
   1edb6:	4630      	mov	r0, r6
   1edb8:	f001 f888 	bl	1fecc <memset>
   1edbc:	2220      	movs	r2, #32
   1edbe:	2100      	movs	r1, #0
   1edc0:	4628      	mov	r0, r5
   1edc2:	f001 f883 	bl	1fecc <memset>
	_set_secure(p2, 0, sizeof(p2));
	_set_secure(tmp, 0, sizeof(tmp));
	_set_secure(_private, 0, sizeof(_private));

	return r;
}
   1edc6:	fab4 f084 	clz	r0, r4
   1edca:	0940      	lsrs	r0, r0, #5
   1edcc:	b024      	add	sp, #144	; 0x90
   1edce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001edd2 <uECC_vli_add>:
{
   1edd2:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   1edd4:	2400      	movs	r4, #0
{
   1edd6:	4606      	mov	r6, r0
	uECC_word_t carry = 0;
   1edd8:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   1edda:	b265      	sxtb	r5, r4
   1eddc:	42ab      	cmp	r3, r5
   1edde:	dc00      	bgt.n	1ede2 <uECC_vli_add+0x10>
}
   1ede0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t sum = left[i] + right[i] + carry;
   1ede2:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   1ede6:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
   1edea:	443d      	add	r5, r7
   1edec:	4405      	add	r5, r0
		carry = cond_set(val, carry, (sum != left[i]));
   1edee:	42af      	cmp	r7, r5
		uECC_word_t val = (sum < left[i]);
   1edf0:	bf8c      	ite	hi
   1edf2:	2701      	movhi	r7, #1
   1edf4:	2700      	movls	r7, #0
		result[i] = sum;
   1edf6:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   1edfa:	bf18      	it	ne
   1edfc:	4638      	movne	r0, r7
	for (i = 0; i < num_words; ++i) {
   1edfe:	3401      	adds	r4, #1
   1ee00:	e7eb      	b.n	1edda <uECC_vli_add+0x8>

0001ee02 <uECC_vli_rshift1>:
	vli += num_words;
   1ee02:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	uECC_word_t carry = 0;
   1ee06:	2300      	movs	r3, #0
	while (vli-- > end) {
   1ee08:	4288      	cmp	r0, r1
   1ee0a:	d300      	bcc.n	1ee0e <uECC_vli_rshift1+0xc>
}
   1ee0c:	4770      	bx	lr
		uECC_word_t temp = *vli;
   1ee0e:	f851 2d04 	ldr.w	r2, [r1, #-4]!
		*vli = (temp >> 1) | carry;
   1ee12:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
   1ee16:	600b      	str	r3, [r1, #0]
		carry = temp << (uECC_WORD_BITS - 1);
   1ee18:	07d3      	lsls	r3, r2, #31
   1ee1a:	e7f5      	b.n	1ee08 <uECC_vli_rshift1+0x6>

0001ee1c <vli_modInv_update>:
	if (!EVEN(uv)) {
   1ee1c:	6803      	ldr	r3, [r0, #0]
{
   1ee1e:	b570      	push	{r4, r5, r6, lr}
	if (!EVEN(uv)) {
   1ee20:	f013 0601 	ands.w	r6, r3, #1
{
   1ee24:	4605      	mov	r5, r0
   1ee26:	4614      	mov	r4, r2
	if (!EVEN(uv)) {
   1ee28:	d005      	beq.n	1ee36 <vli_modInv_update+0x1a>
		carry = uECC_vli_add(uv, uv, mod, num_words);
   1ee2a:	4613      	mov	r3, r2
   1ee2c:	460a      	mov	r2, r1
   1ee2e:	4601      	mov	r1, r0
   1ee30:	f7ff ffcf 	bl	1edd2 <uECC_vli_add>
   1ee34:	4606      	mov	r6, r0
	uECC_vli_rshift1(uv, num_words);
   1ee36:	4621      	mov	r1, r4
   1ee38:	4628      	mov	r0, r5
   1ee3a:	f7ff ffe2 	bl	1ee02 <uECC_vli_rshift1>
	if (carry) {
   1ee3e:	b146      	cbz	r6, 1ee52 <vli_modInv_update+0x36>
		uv[num_words - 1] |= HIGH_BIT_SET;
   1ee40:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
   1ee44:	3a01      	subs	r2, #1
   1ee46:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
   1ee4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1ee4e:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
}
   1ee52:	bd70      	pop	{r4, r5, r6, pc}

0001ee54 <uECC_vli_mult>:
{
   1ee54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (k = 0; k < num_words; ++k) {
   1ee58:	2500      	movs	r5, #0
{
   1ee5a:	b087      	sub	sp, #28
   1ee5c:	e9cd 1200 	strd	r1, r2, [sp]
	uECC_word_t r1 = 0;
   1ee60:	462c      	mov	r4, r5
	uECC_word_t r0 = 0;
   1ee62:	462a      	mov	r2, r5
	for (k = 0; k < num_words; ++k) {
   1ee64:	fa4f f885 	sxtb.w	r8, r5
   1ee68:	4543      	cmp	r3, r8
   1ee6a:	dc16      	bgt.n	1ee9a <uECC_vli_mult+0x46>
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   1ee6c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1ee70:	eb05 0543 	add.w	r5, r5, r3, lsl #1
   1ee74:	9502      	str	r5, [sp, #8]
   1ee76:	f04f 0a00 	mov.w	sl, #0
   1ee7a:	9e02      	ldr	r6, [sp, #8]
   1ee7c:	fa53 fe8a 	uxtab	lr, r3, sl
   1ee80:	fa4f fe8e 	sxtb.w	lr, lr
   1ee84:	45b6      	cmp	lr, r6
   1ee86:	fa5f f58a 	uxtb.w	r5, sl
   1ee8a:	db2d      	blt.n	1eee8 <uECC_vli_mult+0x94>
	result[num_words * 2 - 1] = r0;
   1ee8c:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   1ee90:	f840 2c04 	str.w	r2, [r0, #-4]
}
   1ee94:	b007      	add	sp, #28
   1ee96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ee9a:	9e01      	ldr	r6, [sp, #4]
	for (k = 0; k < num_words; ++k) {
   1ee9c:	f04f 0c00 	mov.w	ip, #0
   1eea0:	eb06 0985 	add.w	r9, r6, r5, lsl #2
   1eea4:	46e6      	mov	lr, ip
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
   1eea6:	e9cd 2402 	strd	r2, r4, [sp, #8]
	uECC_dword_t p = (uECC_dword_t)a * b;
   1eeaa:	9900      	ldr	r1, [sp, #0]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   1eeac:	f859 7904 	ldr.w	r7, [r9], #-4
	uECC_dword_t p = (uECC_dword_t)a * b;
   1eeb0:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
   1eeb4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   1eeb8:	fba7 ab06 	umull	sl, fp, r7, r6
   1eebc:	eb1a 0601 	adds.w	r6, sl, r1
   1eec0:	f10c 0c01 	add.w	ip, ip, #1
   1eec4:	eb5b 0702 	adcs.w	r7, fp, r2
		for (i = 0; i <= k; ++i) {
   1eec8:	fa4f fa8c 	sxtb.w	sl, ip
   1eecc:	bf2c      	ite	cs
   1eece:	2201      	movcs	r2, #1
   1eed0:	2200      	movcc	r2, #0
   1eed2:	45c2      	cmp	sl, r8
	*r2 += (r01 < p);
   1eed4:	4496      	add	lr, r2
	*r1 = r01 >> uECC_WORD_BITS;
   1eed6:	463c      	mov	r4, r7
	*r0 = (uECC_word_t)r01;
   1eed8:	4632      	mov	r2, r6
		for (i = 0; i <= k; ++i) {
   1eeda:	dde4      	ble.n	1eea6 <uECC_vli_mult+0x52>
		result[k] = r0;
   1eedc:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
	*r1 = r01 >> uECC_WORD_BITS;
   1eee0:	463a      	mov	r2, r7
   1eee2:	3501      	adds	r5, #1
	*r2 += (r01 < p);
   1eee4:	4674      	mov	r4, lr
   1eee6:	e7bd      	b.n	1ee64 <uECC_vli_mult+0x10>
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   1eee8:	3501      	adds	r5, #1
   1eeea:	9900      	ldr	r1, [sp, #0]
   1eeec:	9e01      	ldr	r6, [sp, #4]
   1eeee:	fa4f fc85 	sxtb.w	ip, r5
   1eef2:	ebae 0b0c 	sub.w	fp, lr, ip
   1eef6:	eb01 058c 	add.w	r5, r1, ip, lsl #2
   1eefa:	eb06 0b8b 	add.w	fp, r6, fp, lsl #2
   1eefe:	4621      	mov	r1, r4
   1ef00:	2400      	movs	r4, #0
   1ef02:	459c      	cmp	ip, r3
   1ef04:	db05      	blt.n	1ef12 <uECC_vli_mult+0xbe>
		result[k] = r0;
   1ef06:	f840 202e 	str.w	r2, [r0, lr, lsl #2]
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   1ef0a:	f10a 0a01 	add.w	sl, sl, #1
		result[k] = r0;
   1ef0e:	460a      	mov	r2, r1
   1ef10:	e7b3      	b.n	1ee7a <uECC_vli_mult+0x26>
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
   1ef12:	e9cd 2104 	strd	r2, r1, [sp, #16]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   1ef16:	f855 7b04 	ldr.w	r7, [r5], #4
   1ef1a:	f85b 6904 	ldr.w	r6, [fp], #-4
	r01 += p;
   1ef1e:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
	uECC_dword_t p = (uECC_dword_t)a * b;
   1ef22:	fba7 6706 	umull	r6, r7, r7, r6
   1ef26:	eb16 0801 	adds.w	r8, r6, r1
   1ef2a:	eb57 0902 	adcs.w	r9, r7, r2
   1ef2e:	bf2c      	ite	cs
   1ef30:	2201      	movcs	r2, #1
   1ef32:	2200      	movcc	r2, #0
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   1ef34:	f10c 0c01 	add.w	ip, ip, #1
	*r2 += (r01 < p);
   1ef38:	4414      	add	r4, r2
	*r1 = r01 >> uECC_WORD_BITS;
   1ef3a:	4649      	mov	r1, r9
	*r0 = (uECC_word_t)r01;
   1ef3c:	4642      	mov	r2, r8
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   1ef3e:	fa4f fc8c 	sxtb.w	ip, ip
   1ef42:	e7de      	b.n	1ef02 <uECC_vli_mult+0xae>

0001ef44 <uECC_vli_clear>:
	for (i = 0; i < num_words; ++i) {
   1ef44:	2300      	movs	r3, #0
{
   1ef46:	b510      	push	{r4, lr}
		 vli[i] = 0;
   1ef48:	461c      	mov	r4, r3
	for (i = 0; i < num_words; ++i) {
   1ef4a:	b25a      	sxtb	r2, r3
   1ef4c:	4291      	cmp	r1, r2
   1ef4e:	dc00      	bgt.n	1ef52 <uECC_vli_clear+0xe>
}
   1ef50:	bd10      	pop	{r4, pc}
		 vli[i] = 0;
   1ef52:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   1ef56:	3301      	adds	r3, #1
   1ef58:	e7f7      	b.n	1ef4a <uECC_vli_clear+0x6>

0001ef5a <uECC_vli_isZero>:
{
   1ef5a:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   1ef5c:	2300      	movs	r3, #0
	uECC_word_t bits = 0;
   1ef5e:	461a      	mov	r2, r3
	for (i = 0; i < num_words; ++i) {
   1ef60:	b25c      	sxtb	r4, r3
   1ef62:	42a1      	cmp	r1, r4
   1ef64:	dc03      	bgt.n	1ef6e <uECC_vli_isZero+0x14>
}
   1ef66:	fab2 f082 	clz	r0, r2
   1ef6a:	0940      	lsrs	r0, r0, #5
   1ef6c:	bd10      	pop	{r4, pc}
		bits |= vli[i];
   1ef6e:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   1ef72:	3301      	adds	r3, #1
   1ef74:	4322      	orrs	r2, r4
	for (i = 0; i < num_words; ++i) {
   1ef76:	e7f3      	b.n	1ef60 <uECC_vli_isZero+0x6>

0001ef78 <uECC_vli_testBit>:
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   1ef78:	114a      	asrs	r2, r1, #5
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   1ef7a:	2301      	movs	r3, #1
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   1ef7c:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   1ef80:	f001 011f 	and.w	r1, r1, #31
   1ef84:	fa03 f101 	lsl.w	r1, r3, r1
}
   1ef88:	4008      	ands	r0, r1
   1ef8a:	4770      	bx	lr

0001ef8c <uECC_vli_numBits>:
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   1ef8c:	3901      	subs	r1, #1
   1ef8e:	b24b      	sxtb	r3, r1
{
   1ef90:	4602      	mov	r2, r0
   1ef92:	eb00 0183 	add.w	r1, r0, r3, lsl #2
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   1ef96:	2b00      	cmp	r3, #0
   1ef98:	da03      	bge.n	1efa2 <uECC_vli_numBits+0x16>
	return (i + 1);
   1ef9a:	3301      	adds	r3, #1
   1ef9c:	b258      	sxtb	r0, r3
	if (num_digits == 0) {
   1ef9e:	b938      	cbnz	r0, 1efb0 <uECC_vli_numBits+0x24>
   1efa0:	4770      	bx	lr
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   1efa2:	f851 0904 	ldr.w	r0, [r1], #-4
   1efa6:	2800      	cmp	r0, #0
   1efa8:	d1f7      	bne.n	1ef9a <uECC_vli_numBits+0xe>
   1efaa:	3b01      	subs	r3, #1
   1efac:	b25b      	sxtb	r3, r3
   1efae:	e7f2      	b.n	1ef96 <uECC_vli_numBits+0xa>
	digit = vli[num_digits - 1];
   1efb0:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   1efb4:	3b01      	subs	r3, #1
   1efb6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
	for (i = 0; digit; ++i) {
   1efba:	2300      	movs	r3, #0
   1efbc:	b922      	cbnz	r2, 1efc8 <uECC_vli_numBits+0x3c>
	return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
   1efbe:	3801      	subs	r0, #1
   1efc0:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   1efc4:	b200      	sxth	r0, r0
}
   1efc6:	4770      	bx	lr
		digit >>= 1;
   1efc8:	0852      	lsrs	r2, r2, #1
	for (i = 0; digit; ++i) {
   1efca:	3301      	adds	r3, #1
   1efcc:	e7f6      	b.n	1efbc <uECC_vli_numBits+0x30>

0001efce <uECC_vli_set>:
{
   1efce:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   1efd0:	2300      	movs	r3, #0
   1efd2:	b25c      	sxtb	r4, r3
   1efd4:	42a2      	cmp	r2, r4
   1efd6:	dc00      	bgt.n	1efda <uECC_vli_set+0xc>
}
   1efd8:	bd10      	pop	{r4, pc}
		dest[i] = src[i];
   1efda:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
   1efde:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   1efe2:	3301      	adds	r3, #1
   1efe4:	e7f5      	b.n	1efd2 <uECC_vli_set+0x4>

0001efe6 <uECC_vli_cmp_unsafe>:
{
   1efe6:	b530      	push	{r4, r5, lr}
	for (i = num_words - 1; i >= 0; --i) {
   1efe8:	3a01      	subs	r2, #1
   1efea:	b253      	sxtb	r3, r2
   1efec:	009a      	lsls	r2, r3, #2
   1efee:	2b00      	cmp	r3, #0
   1eff0:	da01      	bge.n	1eff6 <uECC_vli_cmp_unsafe+0x10>
	return 0;
   1eff2:	2000      	movs	r0, #0
}
   1eff4:	bd30      	pop	{r4, r5, pc}
		if (left[i] > right[i]) {
   1eff6:	5885      	ldr	r5, [r0, r2]
   1eff8:	588c      	ldr	r4, [r1, r2]
   1effa:	42a5      	cmp	r5, r4
   1effc:	d805      	bhi.n	1f00a <uECC_vli_cmp_unsafe+0x24>
		} else if (left[i] < right[i]) {
   1effe:	f1a2 0204 	sub.w	r2, r2, #4
   1f002:	d304      	bcc.n	1f00e <uECC_vli_cmp_unsafe+0x28>
	for (i = num_words - 1; i >= 0; --i) {
   1f004:	3b01      	subs	r3, #1
   1f006:	b25b      	sxtb	r3, r3
   1f008:	e7f1      	b.n	1efee <uECC_vli_cmp_unsafe+0x8>
			return 1;
   1f00a:	2001      	movs	r0, #1
   1f00c:	e7f2      	b.n	1eff4 <uECC_vli_cmp_unsafe+0xe>
			return -1;
   1f00e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1f012:	e7ef      	b.n	1eff4 <uECC_vli_cmp_unsafe+0xe>

0001f014 <uECC_vli_equal>:
	for (i = num_words - 1; i >= 0; --i) {
   1f014:	3a01      	subs	r2, #1
   1f016:	b253      	sxtb	r3, r2
{
   1f018:	b570      	push	{r4, r5, r6, lr}
   1f01a:	009a      	lsls	r2, r3, #2
	uECC_word_t diff = 0;
   1f01c:	2400      	movs	r4, #0
	for (i = num_words - 1; i >= 0; --i) {
   1f01e:	2b00      	cmp	r3, #0
   1f020:	da03      	bge.n	1f02a <uECC_vli_equal+0x16>
}
   1f022:	1e20      	subs	r0, r4, #0
   1f024:	bf18      	it	ne
   1f026:	2001      	movne	r0, #1
   1f028:	bd70      	pop	{r4, r5, r6, pc}
		diff |= (left[i] ^ right[i]);
   1f02a:	5885      	ldr	r5, [r0, r2]
   1f02c:	588e      	ldr	r6, [r1, r2]
	for (i = num_words - 1; i >= 0; --i) {
   1f02e:	3b01      	subs	r3, #1
		diff |= (left[i] ^ right[i]);
   1f030:	4075      	eors	r5, r6
   1f032:	432c      	orrs	r4, r5
	for (i = num_words - 1; i >= 0; --i) {
   1f034:	b25b      	sxtb	r3, r3
   1f036:	3a04      	subs	r2, #4
   1f038:	e7f1      	b.n	1f01e <uECC_vli_equal+0xa>

0001f03a <uECC_vli_sub>:
{
   1f03a:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   1f03c:	2400      	movs	r4, #0
{
   1f03e:	4606      	mov	r6, r0
   1f040:	469c      	mov	ip, r3
	uECC_word_t borrow = 0;
   1f042:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   1f044:	b265      	sxtb	r5, r4
   1f046:	45ac      	cmp	ip, r5
   1f048:	dc00      	bgt.n	1f04c <uECC_vli_sub+0x12>
}
   1f04a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t diff = left[i] - right[i] - borrow;
   1f04c:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   1f050:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
   1f054:	1a3d      	subs	r5, r7, r0
   1f056:	1aed      	subs	r5, r5, r3
		borrow = cond_set(val, borrow, (diff != left[i]));
   1f058:	42af      	cmp	r7, r5
		uECC_word_t val = (diff > left[i]);
   1f05a:	bf34      	ite	cc
   1f05c:	2701      	movcc	r7, #1
   1f05e:	2700      	movcs	r7, #0
		result[i] = diff;
   1f060:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   1f064:	bf18      	it	ne
   1f066:	4638      	movne	r0, r7
	for (i = 0; i < num_words; ++i) {
   1f068:	3401      	adds	r4, #1
   1f06a:	e7eb      	b.n	1f044 <uECC_vli_sub+0xa>

0001f06c <uECC_vli_modAdd>:
{
   1f06c:	b570      	push	{r4, r5, r6, lr}
   1f06e:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   1f072:	461d      	mov	r5, r3
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   1f074:	4633      	mov	r3, r6
{
   1f076:	4604      	mov	r4, r0
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   1f078:	f7ff feab 	bl	1edd2 <uECC_vli_add>
	if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
   1f07c:	b930      	cbnz	r0, 1f08c <uECC_vli_modAdd+0x20>
   1f07e:	4632      	mov	r2, r6
   1f080:	4621      	mov	r1, r4
   1f082:	4628      	mov	r0, r5
   1f084:	f7ff ffaf 	bl	1efe6 <uECC_vli_cmp_unsafe>
   1f088:	2801      	cmp	r0, #1
   1f08a:	d007      	beq.n	1f09c <uECC_vli_modAdd+0x30>
		uECC_vli_sub(result, result, mod, num_words);
   1f08c:	4633      	mov	r3, r6
   1f08e:	462a      	mov	r2, r5
   1f090:	4621      	mov	r1, r4
   1f092:	4620      	mov	r0, r4
}
   1f094:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_sub(result, result, mod, num_words);
   1f098:	f7ff bfcf 	b.w	1f03a <uECC_vli_sub>
}
   1f09c:	bd70      	pop	{r4, r5, r6, pc}

0001f09e <uECC_vli_modSub>:
{
   1f09e:	b570      	push	{r4, r5, r6, lr}
   1f0a0:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   1f0a4:	461d      	mov	r5, r3
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   1f0a6:	4633      	mov	r3, r6
{
   1f0a8:	4604      	mov	r4, r0
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   1f0aa:	f7ff ffc6 	bl	1f03a <uECC_vli_sub>
	if (l_borrow) {
   1f0ae:	b138      	cbz	r0, 1f0c0 <uECC_vli_modSub+0x22>
		uECC_vli_add(result, result, mod, num_words);
   1f0b0:	4633      	mov	r3, r6
   1f0b2:	462a      	mov	r2, r5
   1f0b4:	4621      	mov	r1, r4
   1f0b6:	4620      	mov	r0, r4
}
   1f0b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_add(result, result, mod, num_words);
   1f0bc:	f7ff be89 	b.w	1edd2 <uECC_vli_add>
}
   1f0c0:	bd70      	pop	{r4, r5, r6, pc}

0001f0c2 <uECC_vli_mmod>:
{
   1f0c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f0c6:	b0a5      	sub	sp, #148	; 0x94
   1f0c8:	461d      	mov	r5, r3
	uECC_word_t *v[2] = {tmp, product};
   1f0ca:	ab14      	add	r3, sp, #80	; 0x50
   1f0cc:	e9cd 3102 	strd	r3, r1, [sp, #8]
{
   1f0d0:	4680      	mov	r8, r0
			   uECC_vli_numBits(mod, num_words);
   1f0d2:	4629      	mov	r1, r5
   1f0d4:	4610      	mov	r0, r2
{
   1f0d6:	4616      	mov	r6, r2
			   uECC_vli_numBits(mod, num_words);
   1f0d8:	f7ff ff58 	bl	1ef8c <uECC_vli_numBits>
	bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) -
   1f0dc:	ebc0 1485 	rsb	r4, r0, r5, lsl #6
   1f0e0:	b224      	sxth	r4, r4
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   1f0e2:	2c00      	cmp	r4, #0
   1f0e4:	4621      	mov	r1, r4
   1f0e6:	bfb8      	it	lt
   1f0e8:	f104 011f 	addlt.w	r1, r4, #31
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   1f0ec:	4263      	negs	r3, r4
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   1f0ee:	f341 1147 	sbfx	r1, r1, #5, #8
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   1f0f2:	f003 031f 	and.w	r3, r3, #31
	uECC_vli_clear(mod_multiple, word_shift);
   1f0f6:	a804      	add	r0, sp, #16
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   1f0f8:	f004 071f 	and.w	r7, r4, #31
   1f0fc:	bf58      	it	pl
   1f0fe:	425f      	negpl	r7, r3
	uECC_vli_clear(mod_multiple, word_shift);
   1f100:	f7ff ff20 	bl	1ef44 <uECC_vli_clear>
	if (bit_shift > 0) {
   1f104:	2f00      	cmp	r7, #0
   1f106:	b208      	sxth	r0, r1
   1f108:	dd2b      	ble.n	1f162 <uECC_vli_mmod+0xa0>
   1f10a:	ab04      	add	r3, sp, #16
	uECC_word_t carry = 0;
   1f10c:	2200      	movs	r2, #0
   1f10e:	eb03 0180 	add.w	r1, r3, r0, lsl #2
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   1f112:	f1c7 0e20 	rsb	lr, r7, #32
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   1f116:	4613      	mov	r3, r2
   1f118:	429d      	cmp	r5, r3
   1f11a:	d817      	bhi.n	1f14c <uECC_vli_mmod+0x8a>
		for (i = 0; i < num_words * 2; ++i) {
   1f11c:	006b      	lsls	r3, r5, #1
   1f11e:	9301      	str	r3, [sp, #4]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1f120:	ab04      	add	r3, sp, #16
   1f122:	eb03 0985 	add.w	r9, r3, r5, lsl #2
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1f126:	1e6f      	subs	r7, r5, #1
   1f128:	ab24      	add	r3, sp, #144	; 0x90
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1f12a:	2601      	movs	r6, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1f12c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
	for (index = 1; shift >= 0; --shift) {
   1f130:	2c00      	cmp	r4, #0
   1f132:	da54      	bge.n	1f1de <uECC_vli_mmod+0x11c>
	uECC_vli_set(result, v[index], num_words);
   1f134:	ab24      	add	r3, sp, #144	; 0x90
   1f136:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   1f13a:	462a      	mov	r2, r5
   1f13c:	f856 1c88 	ldr.w	r1, [r6, #-136]
   1f140:	4640      	mov	r0, r8
   1f142:	f7ff ff44 	bl	1efce <uECC_vli_set>
}
   1f146:	b025      	add	sp, #148	; 0x94
   1f148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
   1f14c:	f856 c023 	ldr.w	ip, [r6, r3, lsl #2]
   1f150:	fa0c f007 	lsl.w	r0, ip, r7
   1f154:	4302      	orrs	r2, r0
   1f156:	f841 2b04 	str.w	r2, [r1], #4
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   1f15a:	3301      	adds	r3, #1
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   1f15c:	fa2c f20e 	lsr.w	r2, ip, lr
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   1f160:	e7da      	b.n	1f118 <uECC_vli_mmod+0x56>
		uECC_vli_set(mod_multiple + word_shift, mod, num_words);
   1f162:	ab04      	add	r3, sp, #16
   1f164:	462a      	mov	r2, r5
   1f166:	4631      	mov	r1, r6
   1f168:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   1f16c:	f7ff ff2f 	bl	1efce <uECC_vli_set>
   1f170:	e7d4      	b.n	1f11c <uECC_vli_mmod+0x5a>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   1f172:	fa0f fe82 	sxth.w	lr, r2
   1f176:	f85a 3c88 	ldr.w	r3, [sl, #-136]
   1f17a:	f853 b02e 	ldr.w	fp, [r3, lr, lsl #2]
   1f17e:	ab24      	add	r3, sp, #144	; 0x90
   1f180:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   1f184:	3001      	adds	r0, #1
   1f186:	f852 3c80 	ldr.w	r3, [r2, #-128]
   1f18a:	440b      	add	r3, r1
   1f18c:	ebbb 0303 	subs.w	r3, fp, r3
   1f190:	bf34      	ite	cc
   1f192:	2201      	movcc	r2, #1
   1f194:	2200      	movcs	r2, #0
			if (diff != v[index][i]) {
   1f196:	459b      	cmp	fp, r3
				borrow = (diff > v[index][i]);
   1f198:	bf18      	it	ne
   1f19a:	4611      	movne	r1, r2
			v[1 - index][i] = diff;
   1f19c:	f85c 2c88 	ldr.w	r2, [ip, #-136]
   1f1a0:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
		for (i = 0; i < num_words * 2; ++i) {
   1f1a4:	9b01      	ldr	r3, [sp, #4]
   1f1a6:	b242      	sxtb	r2, r0
   1f1a8:	429a      	cmp	r2, r3
   1f1aa:	dbe2      	blt.n	1f172 <uECC_vli_mmod+0xb0>
		index = !(index ^ borrow);
   1f1ac:	1a73      	subs	r3, r6, r1
   1f1ae:	425e      	negs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   1f1b0:	4629      	mov	r1, r5
   1f1b2:	a804      	add	r0, sp, #16
		index = !(index ^ borrow);
   1f1b4:	415e      	adcs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   1f1b6:	f7ff fe24 	bl	1ee02 <uECC_vli_rshift1>
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1f1ba:	ab24      	add	r3, sp, #144	; 0x90
   1f1bc:	eb03 0385 	add.w	r3, r3, r5, lsl #2
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1f1c0:	4629      	mov	r1, r5
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1f1c2:	f853 2c80 	ldr.w	r2, [r3, #-128]
   1f1c6:	f857 3c80 	ldr.w	r3, [r7, #-128]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1f1ca:	4648      	mov	r0, r9
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1f1cc:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
	for (index = 1; shift >= 0; --shift) {
   1f1d0:	3c01      	subs	r4, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1f1d2:	f847 3c80 	str.w	r3, [r7, #-128]
	for (index = 1; shift >= 0; --shift) {
   1f1d6:	b224      	sxth	r4, r4
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1f1d8:	f7ff fe13 	bl	1ee02 <uECC_vli_rshift1>
	for (index = 1; shift >= 0; --shift) {
   1f1dc:	e7a8      	b.n	1f130 <uECC_vli_mmod+0x6e>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   1f1de:	ab24      	add	r3, sp, #144	; 0x90
   1f1e0:	2000      	movs	r0, #0
			v[1 - index][i] = diff;
   1f1e2:	f1c6 0c01 	rsb	ip, r6, #1
		uECC_word_t borrow = 0;
   1f1e6:	4601      	mov	r1, r0
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   1f1e8:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
			v[1 - index][i] = diff;
   1f1ec:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
   1f1f0:	e7d8      	b.n	1f1a4 <uECC_vli_mmod+0xe2>

0001f1f2 <uECC_vli_modMult_fast>:
{
   1f1f2:	b530      	push	{r4, r5, lr}
   1f1f4:	461c      	mov	r4, r3
   1f1f6:	b091      	sub	sp, #68	; 0x44
   1f1f8:	4605      	mov	r5, r0
	uECC_vli_mult(product, left, right, curve->num_words);
   1f1fa:	f993 3000 	ldrsb.w	r3, [r3]
   1f1fe:	4668      	mov	r0, sp
   1f200:	f7ff fe28 	bl	1ee54 <uECC_vli_mult>
	curve->mmod_fast(result, product);
   1f204:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   1f208:	4669      	mov	r1, sp
   1f20a:	4628      	mov	r0, r5
   1f20c:	4798      	blx	r3
}
   1f20e:	b011      	add	sp, #68	; 0x44
   1f210:	bd30      	pop	{r4, r5, pc}

0001f212 <uECC_vli_modSquare_fast>:
{
   1f212:	4613      	mov	r3, r2
	uECC_vli_modMult_fast(result, left, left, curve);
   1f214:	460a      	mov	r2, r1
   1f216:	f7ff bfec 	b.w	1f1f2 <uECC_vli_modMult_fast>

0001f21a <double_jacobian_default>:
{
   1f21a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	wordcount_t num_words = curve->num_words;
   1f21e:	f993 6000 	ldrsb.w	r6, [r3]
{
   1f222:	b092      	sub	sp, #72	; 0x48
   1f224:	4604      	mov	r4, r0
   1f226:	4689      	mov	r9, r1
	if (uECC_vli_isZero(Z1, num_words)) {
   1f228:	4610      	mov	r0, r2
   1f22a:	4631      	mov	r1, r6
{
   1f22c:	4615      	mov	r5, r2
   1f22e:	461f      	mov	r7, r3
	if (uECC_vli_isZero(Z1, num_words)) {
   1f230:	f7ff fe93 	bl	1ef5a <uECC_vli_isZero>
   1f234:	2800      	cmp	r0, #0
   1f236:	f040 8091 	bne.w	1f35c <double_jacobian_default+0x142>
	uECC_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
   1f23a:	463a      	mov	r2, r7
   1f23c:	4649      	mov	r1, r9
   1f23e:	a802      	add	r0, sp, #8
   1f240:	f7ff ffe7 	bl	1f212 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
   1f244:	463b      	mov	r3, r7
   1f246:	aa02      	add	r2, sp, #8
   1f248:	4621      	mov	r1, r4
   1f24a:	a80a      	add	r0, sp, #40	; 0x28
   1f24c:	f7ff ffd1 	bl	1f1f2 <uECC_vli_modMult_fast>
	uECC_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
   1f250:	a902      	add	r1, sp, #8
   1f252:	4608      	mov	r0, r1
   1f254:	463a      	mov	r2, r7
   1f256:	f7ff ffdc 	bl	1f212 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
   1f25a:	463b      	mov	r3, r7
   1f25c:	462a      	mov	r2, r5
   1f25e:	4649      	mov	r1, r9
   1f260:	4648      	mov	r0, r9
   1f262:	f7ff ffc6 	bl	1f1f2 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   1f266:	f107 0804 	add.w	r8, r7, #4
	uECC_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
   1f26a:	463a      	mov	r2, r7
   1f26c:	4629      	mov	r1, r5
   1f26e:	4628      	mov	r0, r5
   1f270:	f7ff ffcf 	bl	1f212 <uECC_vli_modSquare_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   1f274:	4643      	mov	r3, r8
   1f276:	462a      	mov	r2, r5
   1f278:	4621      	mov	r1, r4
   1f27a:	4620      	mov	r0, r4
   1f27c:	9600      	str	r6, [sp, #0]
   1f27e:	f7ff fef5 	bl	1f06c <uECC_vli_modAdd>
	uECC_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
   1f282:	4643      	mov	r3, r8
   1f284:	462a      	mov	r2, r5
   1f286:	4629      	mov	r1, r5
   1f288:	4628      	mov	r0, r5
   1f28a:	9600      	str	r6, [sp, #0]
   1f28c:	f7ff feee 	bl	1f06c <uECC_vli_modAdd>
	uECC_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
   1f290:	4643      	mov	r3, r8
   1f292:	462a      	mov	r2, r5
   1f294:	4621      	mov	r1, r4
   1f296:	4628      	mov	r0, r5
   1f298:	9600      	str	r6, [sp, #0]
   1f29a:	f7ff ff00 	bl	1f09e <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, Z1, curve); /* t1 = x1^2 - z1^4 */
   1f29e:	463b      	mov	r3, r7
   1f2a0:	462a      	mov	r2, r5
   1f2a2:	4621      	mov	r1, r4
   1f2a4:	4620      	mov	r0, r4
   1f2a6:	f7ff ffa4 	bl	1f1f2 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(Z1, X1, X1, curve->p, num_words); /* t3 = 2*(x1^2 - z1^4) */
   1f2aa:	4643      	mov	r3, r8
   1f2ac:	4622      	mov	r2, r4
   1f2ae:	4621      	mov	r1, r4
   1f2b0:	4628      	mov	r0, r5
   1f2b2:	9600      	str	r6, [sp, #0]
   1f2b4:	f7ff feda 	bl	1f06c <uECC_vli_modAdd>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = 3*(x1^2 - z1^4) */
   1f2b8:	4643      	mov	r3, r8
   1f2ba:	9600      	str	r6, [sp, #0]
   1f2bc:	462a      	mov	r2, r5
   1f2be:	4621      	mov	r1, r4
   1f2c0:	4620      	mov	r0, r4
   1f2c2:	f7ff fed3 	bl	1f06c <uECC_vli_modAdd>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   1f2c6:	6823      	ldr	r3, [r4, #0]
	if (uECC_vli_testBit(X1, 0)) {
   1f2c8:	07db      	lsls	r3, r3, #31
   1f2ca:	d54a      	bpl.n	1f362 <double_jacobian_default+0x148>
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   1f2cc:	4633      	mov	r3, r6
   1f2ce:	4642      	mov	r2, r8
   1f2d0:	4621      	mov	r1, r4
   1f2d2:	4620      	mov	r0, r4
   1f2d4:	f7ff fd7d 	bl	1edd2 <uECC_vli_add>
		uECC_vli_rshift1(X1, num_words);
   1f2d8:	4631      	mov	r1, r6
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   1f2da:	4682      	mov	sl, r0
		uECC_vli_rshift1(X1, num_words);
   1f2dc:	4620      	mov	r0, r4
   1f2de:	f7ff fd90 	bl	1ee02 <uECC_vli_rshift1>
		X1[num_words - 1] |= l_carry << (uECC_WORD_BITS - 1);
   1f2e2:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
   1f2e6:	3b01      	subs	r3, #1
   1f2e8:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
   1f2ec:	ea42 72ca 	orr.w	r2, r2, sl, lsl #31
   1f2f0:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
	uECC_vli_modSquare_fast(Z1, X1, curve); /* t3 = B^2 */
   1f2f4:	463a      	mov	r2, r7
   1f2f6:	4621      	mov	r1, r4
   1f2f8:	4628      	mov	r0, r5
   1f2fa:	f7ff ff8a 	bl	1f212 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
   1f2fe:	4643      	mov	r3, r8
   1f300:	aa0a      	add	r2, sp, #40	; 0x28
   1f302:	4629      	mov	r1, r5
   1f304:	4628      	mov	r0, r5
   1f306:	9600      	str	r6, [sp, #0]
   1f308:	f7ff fec9 	bl	1f09e <uECC_vli_modSub>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
   1f30c:	4643      	mov	r3, r8
   1f30e:	aa0a      	add	r2, sp, #40	; 0x28
   1f310:	4629      	mov	r1, r5
   1f312:	4628      	mov	r0, r5
   1f314:	9600      	str	r6, [sp, #0]
   1f316:	f7ff fec2 	bl	1f09e <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
   1f31a:	a90a      	add	r1, sp, #40	; 0x28
   1f31c:	4608      	mov	r0, r1
   1f31e:	4643      	mov	r3, r8
   1f320:	462a      	mov	r2, r5
   1f322:	9600      	str	r6, [sp, #0]
   1f324:	f7ff febb 	bl	1f09e <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = B * (A - x3) */
   1f328:	463b      	mov	r3, r7
   1f32a:	aa0a      	add	r2, sp, #40	; 0x28
   1f32c:	4621      	mov	r1, r4
   1f32e:	4620      	mov	r0, r4
   1f330:	f7ff ff5f 	bl	1f1f2 <uECC_vli_modMult_fast>
	uECC_vli_modSub(t4, X1, t4, curve->p, num_words);
   1f334:	aa02      	add	r2, sp, #8
   1f336:	4643      	mov	r3, r8
   1f338:	4610      	mov	r0, r2
   1f33a:	4621      	mov	r1, r4
   1f33c:	9600      	str	r6, [sp, #0]
   1f33e:	f7ff feae 	bl	1f09e <uECC_vli_modSub>
	uECC_vli_set(X1, Z1, num_words);
   1f342:	4632      	mov	r2, r6
   1f344:	4629      	mov	r1, r5
   1f346:	4620      	mov	r0, r4
   1f348:	f7ff fe41 	bl	1efce <uECC_vli_set>
	uECC_vli_set(Z1, Y1, num_words);
   1f34c:	4649      	mov	r1, r9
   1f34e:	4628      	mov	r0, r5
   1f350:	f7ff fe3d 	bl	1efce <uECC_vli_set>
	uECC_vli_set(Y1, t4, num_words);
   1f354:	a902      	add	r1, sp, #8
   1f356:	4648      	mov	r0, r9
   1f358:	f7ff fe39 	bl	1efce <uECC_vli_set>
}
   1f35c:	b012      	add	sp, #72	; 0x48
   1f35e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uECC_vli_rshift1(X1, num_words);
   1f362:	4631      	mov	r1, r6
   1f364:	4620      	mov	r0, r4
   1f366:	f7ff fd4c 	bl	1ee02 <uECC_vli_rshift1>
   1f36a:	e7c3      	b.n	1f2f4 <double_jacobian_default+0xda>

0001f36c <x_side_default>:
{
   1f36c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f370:	4615      	mov	r5, r2
   1f372:	b08a      	sub	sp, #40	; 0x28
   1f374:	4604      	mov	r4, r0
   1f376:	460e      	mov	r6, r1
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   1f378:	221c      	movs	r2, #28
   1f37a:	2100      	movs	r1, #0
   1f37c:	a803      	add	r0, sp, #12
   1f37e:	f000 fda5 	bl	1fecc <memset>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   1f382:	1d2f      	adds	r7, r5, #4
	wordcount_t num_words = curve->num_words;
   1f384:	f995 8000 	ldrsb.w	r8, [r5]
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   1f388:	2303      	movs	r3, #3
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   1f38a:	462a      	mov	r2, r5
   1f38c:	4631      	mov	r1, r6
   1f38e:	4620      	mov	r0, r4
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   1f390:	9302      	str	r3, [sp, #8]
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   1f392:	f7ff ff3e 	bl	1f212 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   1f396:	463b      	mov	r3, r7
   1f398:	aa02      	add	r2, sp, #8
   1f39a:	4621      	mov	r1, r4
   1f39c:	4620      	mov	r0, r4
   1f39e:	f8cd 8000 	str.w	r8, [sp]
   1f3a2:	f7ff fe7c 	bl	1f09e <uECC_vli_modSub>
	uECC_vli_modMult_fast(result, result, x, curve); /* r = x^3 - 3x */
   1f3a6:	462b      	mov	r3, r5
   1f3a8:	4632      	mov	r2, r6
   1f3aa:	4621      	mov	r1, r4
   1f3ac:	4620      	mov	r0, r4
   1f3ae:	f7ff ff20 	bl	1f1f2 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(result, result, curve->b, curve->p, num_words);
   1f3b2:	f8cd 8000 	str.w	r8, [sp]
   1f3b6:	463b      	mov	r3, r7
   1f3b8:	f105 0284 	add.w	r2, r5, #132	; 0x84
   1f3bc:	4621      	mov	r1, r4
   1f3be:	4620      	mov	r0, r4
   1f3c0:	f7ff fe54 	bl	1f06c <uECC_vli_modAdd>
}
   1f3c4:	b00a      	add	sp, #40	; 0x28
   1f3c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001f3ca <XYcZ_addC>:
   or P => P - Q, Q => P + Q
 */
static void XYcZ_addC(uECC_word_t * X1, uECC_word_t * Y1,
		      uECC_word_t * X2, uECC_word_t * Y2,
		      uECC_Curve curve)
{
   1f3ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1f3ce:	b09a      	sub	sp, #104	; 0x68
   1f3d0:	4616      	mov	r6, r2
   1f3d2:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
	/* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
	uECC_word_t t5[NUM_ECC_WORDS];
	uECC_word_t t6[NUM_ECC_WORDS];
	uECC_word_t t7[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   1f3d6:	4644      	mov	r4, r8
{
   1f3d8:	4699      	mov	r9, r3
	wordcount_t num_words = curve->num_words;
   1f3da:	f914 5b04 	ldrsb.w	r5, [r4], #4

	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   1f3de:	9500      	str	r5, [sp, #0]
{
   1f3e0:	4607      	mov	r7, r0
   1f3e2:	468a      	mov	sl, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   1f3e4:	4623      	mov	r3, r4
   1f3e6:	4602      	mov	r2, r0
   1f3e8:	4631      	mov	r1, r6
   1f3ea:	a802      	add	r0, sp, #8
   1f3ec:	f7ff fe57 	bl	1f09e <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   1f3f0:	a902      	add	r1, sp, #8
   1f3f2:	4642      	mov	r2, r8
   1f3f4:	4608      	mov	r0, r1
   1f3f6:	f7ff ff0c 	bl	1f212 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   1f3fa:	4643      	mov	r3, r8
   1f3fc:	aa02      	add	r2, sp, #8
   1f3fe:	4639      	mov	r1, r7
   1f400:	4638      	mov	r0, r7
   1f402:	f7ff fef6 	bl	1f1f2 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   1f406:	4643      	mov	r3, r8
   1f408:	aa02      	add	r2, sp, #8
   1f40a:	4631      	mov	r1, r6
   1f40c:	4630      	mov	r0, r6
   1f40e:	f7ff fef0 	bl	1f1f2 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
   1f412:	4623      	mov	r3, r4
   1f414:	4652      	mov	r2, sl
   1f416:	4649      	mov	r1, r9
   1f418:	a802      	add	r0, sp, #8
   1f41a:	9500      	str	r5, [sp, #0]
   1f41c:	f7ff fe26 	bl	1f06c <uECC_vli_modAdd>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   1f420:	4623      	mov	r3, r4
   1f422:	4652      	mov	r2, sl
   1f424:	4649      	mov	r1, r9
   1f426:	4648      	mov	r0, r9
   1f428:	9500      	str	r5, [sp, #0]
   1f42a:	f7ff fe38 	bl	1f09e <uECC_vli_modSub>

	uECC_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
   1f42e:	4623      	mov	r3, r4
   1f430:	463a      	mov	r2, r7
   1f432:	4631      	mov	r1, r6
   1f434:	a80a      	add	r0, sp, #40	; 0x28
   1f436:	9500      	str	r5, [sp, #0]
   1f438:	f7ff fe31 	bl	1f09e <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, t6, curve); /* t2 = y1 * (C - B) = E */
   1f43c:	4643      	mov	r3, r8
   1f43e:	aa0a      	add	r2, sp, #40	; 0x28
   1f440:	4651      	mov	r1, sl
   1f442:	4650      	mov	r0, sl
   1f444:	f7ff fed5 	bl	1f1f2 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
   1f448:	4623      	mov	r3, r4
   1f44a:	4632      	mov	r2, r6
   1f44c:	4639      	mov	r1, r7
   1f44e:	a80a      	add	r0, sp, #40	; 0x28
   1f450:	9500      	str	r5, [sp, #0]
   1f452:	f7ff fe0b 	bl	1f06c <uECC_vli_modAdd>
	uECC_vli_modSquare_fast(X2, Y2, curve); /* t3 = (y2 - y1)^2 = D */
   1f456:	4642      	mov	r2, r8
   1f458:	4649      	mov	r1, r9
   1f45a:	4630      	mov	r0, r6
   1f45c:	f7ff fed9 	bl	1f212 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(X2, X2, t6, curve->p, num_words); /* t3 = D - (B + C) = x3 */
   1f460:	4623      	mov	r3, r4
   1f462:	aa0a      	add	r2, sp, #40	; 0x28
   1f464:	4631      	mov	r1, r6
   1f466:	4630      	mov	r0, r6
   1f468:	9500      	str	r5, [sp, #0]
   1f46a:	f7ff fe18 	bl	1f09e <uECC_vli_modSub>

	uECC_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
   1f46e:	4623      	mov	r3, r4
   1f470:	4632      	mov	r2, r6
   1f472:	4639      	mov	r1, r7
   1f474:	a812      	add	r0, sp, #72	; 0x48
   1f476:	9500      	str	r5, [sp, #0]
   1f478:	f7ff fe11 	bl	1f09e <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, t7, curve); /* t4 = (y2 - y1)*(B - x3) */
   1f47c:	4643      	mov	r3, r8
   1f47e:	aa12      	add	r2, sp, #72	; 0x48
   1f480:	4649      	mov	r1, r9
   1f482:	4648      	mov	r0, r9
   1f484:	f7ff feb5 	bl	1f1f2 <uECC_vli_modMult_fast>
	/* t4 = (y2 - y1)*(B - x3) - E = y3: */
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words);
   1f488:	4623      	mov	r3, r4
   1f48a:	4652      	mov	r2, sl
   1f48c:	4649      	mov	r1, r9
   1f48e:	4648      	mov	r0, r9
   1f490:	9500      	str	r5, [sp, #0]
   1f492:	f7ff fe04 	bl	1f09e <uECC_vli_modSub>

	uECC_vli_modSquare_fast(t7, t5, curve); /* t7 = (y2 + y1)^2 = F */
   1f496:	4642      	mov	r2, r8
   1f498:	a902      	add	r1, sp, #8
   1f49a:	a812      	add	r0, sp, #72	; 0x48
   1f49c:	f7ff feb9 	bl	1f212 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t7, t7, t6, curve->p, num_words); /* t7 = F - (B + C) = x3' */
   1f4a0:	a912      	add	r1, sp, #72	; 0x48
   1f4a2:	4623      	mov	r3, r4
   1f4a4:	aa0a      	add	r2, sp, #40	; 0x28
   1f4a6:	4608      	mov	r0, r1
   1f4a8:	9500      	str	r5, [sp, #0]
   1f4aa:	f7ff fdf8 	bl	1f09e <uECC_vli_modSub>
	uECC_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
   1f4ae:	4623      	mov	r3, r4
   1f4b0:	463a      	mov	r2, r7
   1f4b2:	a912      	add	r1, sp, #72	; 0x48
   1f4b4:	a80a      	add	r0, sp, #40	; 0x28
   1f4b6:	9500      	str	r5, [sp, #0]
   1f4b8:	f7ff fdf1 	bl	1f09e <uECC_vli_modSub>
	uECC_vli_modMult_fast(t6, t6, t5, curve); /* t6 = (y2+y1)*(x3' - B) */
   1f4bc:	a90a      	add	r1, sp, #40	; 0x28
   1f4be:	4643      	mov	r3, r8
   1f4c0:	aa02      	add	r2, sp, #8
   1f4c2:	4608      	mov	r0, r1
   1f4c4:	f7ff fe95 	bl	1f1f2 <uECC_vli_modMult_fast>
	/* t2 = (y2+y1)*(x3' - B) - E = y3': */
	uECC_vli_modSub(Y1, t6, Y1, curve->p, num_words);
   1f4c8:	4623      	mov	r3, r4
   1f4ca:	4652      	mov	r2, sl
   1f4cc:	a90a      	add	r1, sp, #40	; 0x28
   1f4ce:	4650      	mov	r0, sl
   1f4d0:	9500      	str	r5, [sp, #0]
   1f4d2:	f7ff fde4 	bl	1f09e <uECC_vli_modSub>

	uECC_vli_set(X1, t7, num_words);
   1f4d6:	462a      	mov	r2, r5
   1f4d8:	a912      	add	r1, sp, #72	; 0x48
   1f4da:	4638      	mov	r0, r7
   1f4dc:	f7ff fd77 	bl	1efce <uECC_vli_set>
}
   1f4e0:	b01a      	add	sp, #104	; 0x68
   1f4e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001f4e6 <uECC_vli_modInv>:
{
   1f4e6:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f4e8:	460f      	mov	r7, r1
   1f4ea:	b0a1      	sub	sp, #132	; 0x84
   1f4ec:	4606      	mov	r6, r0
	if (uECC_vli_isZero(input, num_words)) {
   1f4ee:	4619      	mov	r1, r3
   1f4f0:	4638      	mov	r0, r7
{
   1f4f2:	4615      	mov	r5, r2
   1f4f4:	461c      	mov	r4, r3
	if (uECC_vli_isZero(input, num_words)) {
   1f4f6:	f7ff fd30 	bl	1ef5a <uECC_vli_isZero>
   1f4fa:	b120      	cbz	r0, 1f506 <uECC_vli_modInv+0x20>
		uECC_vli_clear(result, num_words);
   1f4fc:	4630      	mov	r0, r6
   1f4fe:	f7ff fd21 	bl	1ef44 <uECC_vli_clear>
}
   1f502:	b021      	add	sp, #132	; 0x84
   1f504:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uECC_vli_set(a, input, num_words);
   1f506:	4622      	mov	r2, r4
   1f508:	4639      	mov	r1, r7
   1f50a:	4668      	mov	r0, sp
   1f50c:	f7ff fd5f 	bl	1efce <uECC_vli_set>
	uECC_vli_set(b, mod, num_words);
   1f510:	4629      	mov	r1, r5
   1f512:	a808      	add	r0, sp, #32
   1f514:	f7ff fd5b 	bl	1efce <uECC_vli_set>
	uECC_vli_clear(u, num_words);
   1f518:	a810      	add	r0, sp, #64	; 0x40
   1f51a:	4621      	mov	r1, r4
   1f51c:	f7ff fd12 	bl	1ef44 <uECC_vli_clear>
	u[0] = 1;
   1f520:	2301      	movs	r3, #1
	uECC_vli_clear(v, num_words);
   1f522:	a818      	add	r0, sp, #96	; 0x60
	u[0] = 1;
   1f524:	9310      	str	r3, [sp, #64]	; 0x40
	uECC_vli_clear(v, num_words);
   1f526:	f7ff fd0d 	bl	1ef44 <uECC_vli_clear>
	while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
   1f52a:	4622      	mov	r2, r4
   1f52c:	a908      	add	r1, sp, #32
   1f52e:	4668      	mov	r0, sp
   1f530:	f7ff fd59 	bl	1efe6 <uECC_vli_cmp_unsafe>
   1f534:	b928      	cbnz	r0, 1f542 <uECC_vli_modInv+0x5c>
  	uECC_vli_set(result, u, num_words);
   1f536:	4622      	mov	r2, r4
   1f538:	a910      	add	r1, sp, #64	; 0x40
   1f53a:	4630      	mov	r0, r6
   1f53c:	f7ff fd47 	bl	1efce <uECC_vli_set>
   1f540:	e7df      	b.n	1f502 <uECC_vli_modInv+0x1c>
		if (EVEN(a)) {
   1f542:	9b00      	ldr	r3, [sp, #0]
   1f544:	07da      	lsls	r2, r3, #31
   1f546:	d409      	bmi.n	1f55c <uECC_vli_modInv+0x76>
			uECC_vli_rshift1(a, num_words);
   1f548:	4621      	mov	r1, r4
   1f54a:	4668      	mov	r0, sp
   1f54c:	f7ff fc59 	bl	1ee02 <uECC_vli_rshift1>
      			vli_modInv_update(u, mod, num_words);
   1f550:	4622      	mov	r2, r4
   1f552:	4629      	mov	r1, r5
   1f554:	a810      	add	r0, sp, #64	; 0x40
      			vli_modInv_update(v, mod, num_words);
   1f556:	f7ff fc61 	bl	1ee1c <vli_modInv_update>
   1f55a:	e7e6      	b.n	1f52a <uECC_vli_modInv+0x44>
    		} else if (EVEN(b)) {
   1f55c:	9b08      	ldr	r3, [sp, #32]
   1f55e:	07db      	lsls	r3, r3, #31
   1f560:	d407      	bmi.n	1f572 <uECC_vli_modInv+0x8c>
			uECC_vli_rshift1(b, num_words);
   1f562:	4621      	mov	r1, r4
   1f564:	a808      	add	r0, sp, #32
   1f566:	f7ff fc4c 	bl	1ee02 <uECC_vli_rshift1>
      			vli_modInv_update(v, mod, num_words);
   1f56a:	4622      	mov	r2, r4
   1f56c:	4629      	mov	r1, r5
   1f56e:	a818      	add	r0, sp, #96	; 0x60
   1f570:	e7f1      	b.n	1f556 <uECC_vli_modInv+0x70>
		} else if (cmpResult > 0) {
   1f572:	2800      	cmp	r0, #0
			uECC_vli_sub(a, a, b, num_words);
   1f574:	4623      	mov	r3, r4
		} else if (cmpResult > 0) {
   1f576:	dd1c      	ble.n	1f5b2 <uECC_vli_modInv+0xcc>
			uECC_vli_sub(a, a, b, num_words);
   1f578:	aa08      	add	r2, sp, #32
   1f57a:	4669      	mov	r1, sp
   1f57c:	4668      	mov	r0, sp
   1f57e:	f7ff fd5c 	bl	1f03a <uECC_vli_sub>
			uECC_vli_rshift1(a, num_words);
   1f582:	4621      	mov	r1, r4
   1f584:	4668      	mov	r0, sp
   1f586:	f7ff fc3c 	bl	1ee02 <uECC_vli_rshift1>
			if (uECC_vli_cmp_unsafe(u, v, num_words) < 0) {
   1f58a:	4622      	mov	r2, r4
   1f58c:	a918      	add	r1, sp, #96	; 0x60
   1f58e:	a810      	add	r0, sp, #64	; 0x40
   1f590:	f7ff fd29 	bl	1efe6 <uECC_vli_cmp_unsafe>
   1f594:	2800      	cmp	r0, #0
   1f596:	da05      	bge.n	1f5a4 <uECC_vli_modInv+0xbe>
        			uECC_vli_add(u, u, mod, num_words);
   1f598:	a910      	add	r1, sp, #64	; 0x40
   1f59a:	4623      	mov	r3, r4
   1f59c:	462a      	mov	r2, r5
   1f59e:	4608      	mov	r0, r1
   1f5a0:	f7ff fc17 	bl	1edd2 <uECC_vli_add>
      			uECC_vli_sub(u, u, v, num_words);
   1f5a4:	a910      	add	r1, sp, #64	; 0x40
   1f5a6:	4623      	mov	r3, r4
   1f5a8:	aa18      	add	r2, sp, #96	; 0x60
   1f5aa:	4608      	mov	r0, r1
   1f5ac:	f7ff fd45 	bl	1f03a <uECC_vli_sub>
   1f5b0:	e7ce      	b.n	1f550 <uECC_vli_modInv+0x6a>
      			uECC_vli_sub(b, b, a, num_words);
   1f5b2:	a908      	add	r1, sp, #32
   1f5b4:	466a      	mov	r2, sp
   1f5b6:	4608      	mov	r0, r1
   1f5b8:	f7ff fd3f 	bl	1f03a <uECC_vli_sub>
      			uECC_vli_rshift1(b, num_words);
   1f5bc:	4621      	mov	r1, r4
   1f5be:	a808      	add	r0, sp, #32
   1f5c0:	f7ff fc1f 	bl	1ee02 <uECC_vli_rshift1>
      			if (uECC_vli_cmp_unsafe(v, u, num_words) < 0) {
   1f5c4:	4622      	mov	r2, r4
   1f5c6:	a910      	add	r1, sp, #64	; 0x40
   1f5c8:	a818      	add	r0, sp, #96	; 0x60
   1f5ca:	f7ff fd0c 	bl	1efe6 <uECC_vli_cmp_unsafe>
   1f5ce:	2800      	cmp	r0, #0
   1f5d0:	da05      	bge.n	1f5de <uECC_vli_modInv+0xf8>
        			uECC_vli_add(v, v, mod, num_words);
   1f5d2:	a918      	add	r1, sp, #96	; 0x60
   1f5d4:	4623      	mov	r3, r4
   1f5d6:	462a      	mov	r2, r5
   1f5d8:	4608      	mov	r0, r1
   1f5da:	f7ff fbfa 	bl	1edd2 <uECC_vli_add>
      			uECC_vli_sub(v, v, u, num_words);
   1f5de:	a918      	add	r1, sp, #96	; 0x60
   1f5e0:	4623      	mov	r3, r4
   1f5e2:	aa10      	add	r2, sp, #64	; 0x40
   1f5e4:	4608      	mov	r0, r1
   1f5e6:	f7ff fd28 	bl	1f03a <uECC_vli_sub>
   1f5ea:	e7be      	b.n	1f56a <uECC_vli_modInv+0x84>

0001f5ec <EccPoint_isZero>:
	return uECC_vli_isZero(point, curve->num_words * 2);
   1f5ec:	7809      	ldrb	r1, [r1, #0]
   1f5ee:	0049      	lsls	r1, r1, #1
   1f5f0:	b249      	sxtb	r1, r1
   1f5f2:	f7ff bcb2 	b.w	1ef5a <uECC_vli_isZero>

0001f5f6 <apply_z>:
{
   1f5f6:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f5f8:	4615      	mov	r5, r2
   1f5fa:	b089      	sub	sp, #36	; 0x24
   1f5fc:	461c      	mov	r4, r3
   1f5fe:	4607      	mov	r7, r0
   1f600:	460e      	mov	r6, r1
	uECC_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
   1f602:	461a      	mov	r2, r3
   1f604:	4629      	mov	r1, r5
   1f606:	4668      	mov	r0, sp
   1f608:	f7ff fe03 	bl	1f212 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
   1f60c:	4623      	mov	r3, r4
   1f60e:	466a      	mov	r2, sp
   1f610:	4639      	mov	r1, r7
   1f612:	4638      	mov	r0, r7
   1f614:	f7ff fded 	bl	1f1f2 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
   1f618:	4623      	mov	r3, r4
   1f61a:	462a      	mov	r2, r5
   1f61c:	4669      	mov	r1, sp
   1f61e:	4668      	mov	r0, sp
   1f620:	f7ff fde7 	bl	1f1f2 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
   1f624:	4623      	mov	r3, r4
   1f626:	466a      	mov	r2, sp
   1f628:	4631      	mov	r1, r6
   1f62a:	4630      	mov	r0, r6
   1f62c:	f7ff fde1 	bl	1f1f2 <uECC_vli_modMult_fast>
}
   1f630:	b009      	add	sp, #36	; 0x24
   1f632:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001f634 <XYcZ_add>:
{
   1f634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1f638:	b08a      	sub	sp, #40	; 0x28
   1f63a:	4614      	mov	r4, r2
   1f63c:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
	wordcount_t num_words = curve->num_words;
   1f640:	4655      	mov	r5, sl
{
   1f642:	461f      	mov	r7, r3
	wordcount_t num_words = curve->num_words;
   1f644:	f915 6b04 	ldrsb.w	r6, [r5], #4
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   1f648:	9600      	str	r6, [sp, #0]
{
   1f64a:	4680      	mov	r8, r0
   1f64c:	4689      	mov	r9, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   1f64e:	462b      	mov	r3, r5
   1f650:	4602      	mov	r2, r0
   1f652:	4621      	mov	r1, r4
   1f654:	a802      	add	r0, sp, #8
   1f656:	f7ff fd22 	bl	1f09e <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   1f65a:	a902      	add	r1, sp, #8
   1f65c:	4652      	mov	r2, sl
   1f65e:	4608      	mov	r0, r1
   1f660:	f7ff fdd7 	bl	1f212 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   1f664:	4653      	mov	r3, sl
   1f666:	aa02      	add	r2, sp, #8
   1f668:	4641      	mov	r1, r8
   1f66a:	4640      	mov	r0, r8
   1f66c:	f7ff fdc1 	bl	1f1f2 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   1f670:	4653      	mov	r3, sl
   1f672:	aa02      	add	r2, sp, #8
   1f674:	4621      	mov	r1, r4
   1f676:	4620      	mov	r0, r4
   1f678:	f7ff fdbb 	bl	1f1f2 <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   1f67c:	462b      	mov	r3, r5
   1f67e:	464a      	mov	r2, r9
   1f680:	4639      	mov	r1, r7
   1f682:	4638      	mov	r0, r7
   1f684:	9600      	str	r6, [sp, #0]
   1f686:	f7ff fd0a 	bl	1f09e <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, Y2, curve); /* t5 = (y2 - y1)^2 = D */
   1f68a:	4652      	mov	r2, sl
   1f68c:	4639      	mov	r1, r7
   1f68e:	a802      	add	r0, sp, #8
   1f690:	f7ff fdbf 	bl	1f212 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
   1f694:	a902      	add	r1, sp, #8
   1f696:	462b      	mov	r3, r5
   1f698:	4642      	mov	r2, r8
   1f69a:	4608      	mov	r0, r1
   1f69c:	9600      	str	r6, [sp, #0]
   1f69e:	f7ff fcfe 	bl	1f09e <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
   1f6a2:	a902      	add	r1, sp, #8
   1f6a4:	462b      	mov	r3, r5
   1f6a6:	4622      	mov	r2, r4
   1f6a8:	4608      	mov	r0, r1
   1f6aa:	9600      	str	r6, [sp, #0]
   1f6ac:	f7ff fcf7 	bl	1f09e <uECC_vli_modSub>
	uECC_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
   1f6b0:	462b      	mov	r3, r5
   1f6b2:	4642      	mov	r2, r8
   1f6b4:	4621      	mov	r1, r4
   1f6b6:	4620      	mov	r0, r4
   1f6b8:	9600      	str	r6, [sp, #0]
   1f6ba:	f7ff fcf0 	bl	1f09e <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, X2, curve); /* t2 = y1*(C - B) */
   1f6be:	4653      	mov	r3, sl
   1f6c0:	4622      	mov	r2, r4
   1f6c2:	4649      	mov	r1, r9
   1f6c4:	4648      	mov	r0, r9
   1f6c6:	f7ff fd94 	bl	1f1f2 <uECC_vli_modMult_fast>
	uECC_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
   1f6ca:	462b      	mov	r3, r5
   1f6cc:	aa02      	add	r2, sp, #8
   1f6ce:	4641      	mov	r1, r8
   1f6d0:	4620      	mov	r0, r4
   1f6d2:	9600      	str	r6, [sp, #0]
   1f6d4:	f7ff fce3 	bl	1f09e <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, X2, curve); /* t4 = (y2 - y1)*(B - x3) */
   1f6d8:	4653      	mov	r3, sl
   1f6da:	4622      	mov	r2, r4
   1f6dc:	4639      	mov	r1, r7
   1f6de:	4638      	mov	r0, r7
   1f6e0:	f7ff fd87 	bl	1f1f2 <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
   1f6e4:	462b      	mov	r3, r5
   1f6e6:	464a      	mov	r2, r9
   1f6e8:	4639      	mov	r1, r7
   1f6ea:	4638      	mov	r0, r7
   1f6ec:	9600      	str	r6, [sp, #0]
   1f6ee:	f7ff fcd6 	bl	1f09e <uECC_vli_modSub>
	uECC_vli_set(X2, t5, num_words);
   1f6f2:	4632      	mov	r2, r6
   1f6f4:	a902      	add	r1, sp, #8
   1f6f6:	4620      	mov	r0, r4
   1f6f8:	f7ff fc69 	bl	1efce <uECC_vli_set>
}
   1f6fc:	b00a      	add	sp, #40	; 0x28
   1f6fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001f702 <EccPoint_mult>:

void EccPoint_mult(uECC_word_t * result, const uECC_word_t * point,
		   const uECC_word_t * scalar,
		   const uECC_word_t * initial_Z,
		   bitcount_t num_bits, uECC_Curve curve) 
{
   1f702:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f706:	b0b1      	sub	sp, #196	; 0xc4
   1f708:	e9cd 0103 	strd	r0, r1, [sp, #12]
   1f70c:	9c3b      	ldr	r4, [sp, #236]	; 0xec
	uECC_word_t Rx[2][NUM_ECC_WORDS];
	uECC_word_t Ry[2][NUM_ECC_WORDS];
	uECC_word_t z[NUM_ECC_WORDS];
	bitcount_t i;
	uECC_word_t nb;
	wordcount_t num_words = curve->num_words;
   1f70e:	f994 7000 	ldrsb.w	r7, [r4]

	uECC_vli_set(Rx[1], point, num_words);
   1f712:	a818      	add	r0, sp, #96	; 0x60
{
   1f714:	4692      	mov	sl, r2
	uECC_vli_set(Rx[1], point, num_words);
   1f716:	463a      	mov	r2, r7
{
   1f718:	461e      	mov	r6, r3
	uECC_vli_set(Rx[1], point, num_words);
   1f71a:	f7ff fc58 	bl	1efce <uECC_vli_set>
  	uECC_vli_set(Ry[1], point + num_words, num_words);
   1f71e:	00bb      	lsls	r3, r7, #2
   1f720:	9305      	str	r3, [sp, #20]
   1f722:	9b04      	ldr	r3, [sp, #16]
   1f724:	eb03 0387 	add.w	r3, r3, r7, lsl #2
   1f728:	4619      	mov	r1, r3
   1f72a:	a828      	add	r0, sp, #160	; 0xa0
   1f72c:	9302      	str	r3, [sp, #8]
   1f72e:	f7ff fc4e 	bl	1efce <uECC_vli_set>
	wordcount_t num_words = curve->num_words;
   1f732:	f994 5000 	ldrsb.w	r5, [r4]
	if (initial_Z) {
   1f736:	2e00      	cmp	r6, #0
   1f738:	f000 8088 	beq.w	1f84c <EccPoint_mult+0x14a>
		uECC_vli_set(z, initial_Z, num_words);
   1f73c:	462a      	mov	r2, r5
   1f73e:	4631      	mov	r1, r6
   1f740:	a808      	add	r0, sp, #32
   1f742:	f7ff fc44 	bl	1efce <uECC_vli_set>
	uECC_vli_set(X2, X1, num_words);
   1f746:	f10d 0840 	add.w	r8, sp, #64	; 0x40
   1f74a:	462a      	mov	r2, r5
   1f74c:	a918      	add	r1, sp, #96	; 0x60
   1f74e:	4640      	mov	r0, r8
	uECC_vli_set(Y2, Y1, num_words);
   1f750:	f10d 0980 	add.w	r9, sp, #128	; 0x80
	uECC_vli_set(X2, X1, num_words);
   1f754:	f7ff fc3b 	bl	1efce <uECC_vli_set>
	uECC_vli_set(Y2, Y1, num_words);
   1f758:	a928      	add	r1, sp, #160	; 0xa0
   1f75a:	4648      	mov	r0, r9
   1f75c:	f7ff fc37 	bl	1efce <uECC_vli_set>
	apply_z(X1, Y1, z, curve);
   1f760:	4623      	mov	r3, r4
   1f762:	aa08      	add	r2, sp, #32
   1f764:	a928      	add	r1, sp, #160	; 0xa0
   1f766:	a818      	add	r0, sp, #96	; 0x60
   1f768:	f7ff ff45 	bl	1f5f6 <apply_z>
	curve->double_jacobian(X1, Y1, z, curve);
   1f76c:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
   1f770:	4623      	mov	r3, r4
   1f772:	aa08      	add	r2, sp, #32
   1f774:	a928      	add	r1, sp, #160	; 0xa0
   1f776:	a818      	add	r0, sp, #96	; 0x60
   1f778:	47a8      	blx	r5
	apply_z(X2, Y2, z, curve);
   1f77a:	4623      	mov	r3, r4
   1f77c:	aa08      	add	r2, sp, #32
   1f77e:	4649      	mov	r1, r9
   1f780:	4640      	mov	r0, r8
   1f782:	f7ff ff38 	bl	1f5f6 <apply_z>

	XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initial_Z, curve);

	for (i = num_bits - 2; i > 0; --i) {
   1f786:	f9bd 50e8 	ldrsh.w	r5, [sp, #232]	; 0xe8
   1f78a:	3d02      	subs	r5, #2
   1f78c:	b22d      	sxth	r5, r5
   1f78e:	2d00      	cmp	r5, #0
   1f790:	dc63      	bgt.n	1f85a <EccPoint_mult+0x158>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   1f792:	f8da 5000 	ldr.w	r5, [sl]
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
	}

	nb = !uECC_vli_testBit(scalar, 0);
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   1f796:	9400      	str	r4, [sp, #0]
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   1f798:	f005 0601 	and.w	r6, r5, #1
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   1f79c:	ab10      	add	r3, sp, #64	; 0x40
   1f79e:	eb03 1846 	add.w	r8, r3, r6, lsl #5
   1f7a2:	43ed      	mvns	r5, r5
   1f7a4:	ab20      	add	r3, sp, #128	; 0x80
   1f7a6:	eb03 1646 	add.w	r6, r3, r6, lsl #5
   1f7aa:	f005 0501 	and.w	r5, r5, #1
   1f7ae:	ab10      	add	r3, sp, #64	; 0x40
   1f7b0:	eb03 1945 	add.w	r9, r3, r5, lsl #5
   1f7b4:	ab20      	add	r3, sp, #128	; 0x80
   1f7b6:	eb03 1545 	add.w	r5, r3, r5, lsl #5

	/* Find final 1/Z value. */
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   1f7ba:	f104 0a04 	add.w	sl, r4, #4
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   1f7be:	462b      	mov	r3, r5
   1f7c0:	464a      	mov	r2, r9
   1f7c2:	4631      	mov	r1, r6
   1f7c4:	4640      	mov	r0, r8
   1f7c6:	f7ff fe00 	bl	1f3ca <XYcZ_addC>
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   1f7ca:	4653      	mov	r3, sl
   1f7cc:	aa10      	add	r2, sp, #64	; 0x40
   1f7ce:	a918      	add	r1, sp, #96	; 0x60
   1f7d0:	a808      	add	r0, sp, #32
   1f7d2:	9700      	str	r7, [sp, #0]
   1f7d4:	f7ff fc63 	bl	1f09e <uECC_vli_modSub>
	uECC_vli_modMult_fast(z, z, Ry[1 - nb], curve); /* Yb * (X1 - X0) */
   1f7d8:	a908      	add	r1, sp, #32
   1f7da:	4623      	mov	r3, r4
   1f7dc:	4632      	mov	r2, r6
   1f7de:	4608      	mov	r0, r1
   1f7e0:	f7ff fd07 	bl	1f1f2 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(z, z, point, curve); /* xP * Yb * (X1 - X0) */
   1f7e4:	a908      	add	r1, sp, #32
   1f7e6:	9a04      	ldr	r2, [sp, #16]
   1f7e8:	4623      	mov	r3, r4
   1f7ea:	4608      	mov	r0, r1
   1f7ec:	f7ff fd01 	bl	1f1f2 <uECC_vli_modMult_fast>
	uECC_vli_modInv(z, z, curve->p, num_words); /* 1 / (xP * Yb * (X1 - X0))*/
   1f7f0:	a908      	add	r1, sp, #32
   1f7f2:	463b      	mov	r3, r7
   1f7f4:	4652      	mov	r2, sl
   1f7f6:	4608      	mov	r0, r1
   1f7f8:	f7ff fe75 	bl	1f4e6 <uECC_vli_modInv>
	/* yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, point + num_words, curve);
   1f7fc:	a908      	add	r1, sp, #32
   1f7fe:	9a02      	ldr	r2, [sp, #8]
   1f800:	4623      	mov	r3, r4
   1f802:	4608      	mov	r0, r1
   1f804:	f7ff fcf5 	bl	1f1f2 <uECC_vli_modMult_fast>
	/* Xb * yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, Rx[1 - nb], curve);
   1f808:	a908      	add	r1, sp, #32
   1f80a:	4623      	mov	r3, r4
   1f80c:	4642      	mov	r2, r8
   1f80e:	4608      	mov	r0, r1
   1f810:	f7ff fcef 	bl	1f1f2 <uECC_vli_modMult_fast>
	/* End 1/Z calculation */

	XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   1f814:	9400      	str	r4, [sp, #0]
   1f816:	4633      	mov	r3, r6
   1f818:	4642      	mov	r2, r8
   1f81a:	4629      	mov	r1, r5
   1f81c:	4648      	mov	r0, r9
   1f81e:	f7ff ff09 	bl	1f634 <XYcZ_add>
	apply_z(Rx[0], Ry[0], z, curve);
   1f822:	4623      	mov	r3, r4
   1f824:	aa08      	add	r2, sp, #32
   1f826:	a920      	add	r1, sp, #128	; 0x80
   1f828:	a810      	add	r0, sp, #64	; 0x40
   1f82a:	f7ff fee4 	bl	1f5f6 <apply_z>

	uECC_vli_set(result, Rx[0], num_words);
   1f82e:	9803      	ldr	r0, [sp, #12]
   1f830:	463a      	mov	r2, r7
   1f832:	a910      	add	r1, sp, #64	; 0x40
   1f834:	f7ff fbcb 	bl	1efce <uECC_vli_set>
	uECC_vli_set(result + num_words, Ry[0], num_words);
   1f838:	9b03      	ldr	r3, [sp, #12]
   1f83a:	9c05      	ldr	r4, [sp, #20]
   1f83c:	4423      	add	r3, r4
   1f83e:	a920      	add	r1, sp, #128	; 0x80
   1f840:	4618      	mov	r0, r3
   1f842:	f7ff fbc4 	bl	1efce <uECC_vli_set>
}
   1f846:	b031      	add	sp, #196	; 0xc4
   1f848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uECC_vli_clear(z, num_words);
   1f84c:	4629      	mov	r1, r5
   1f84e:	a808      	add	r0, sp, #32
   1f850:	f7ff fb78 	bl	1ef44 <uECC_vli_clear>
		z[0] = 1;
   1f854:	2301      	movs	r3, #1
   1f856:	9308      	str	r3, [sp, #32]
   1f858:	e775      	b.n	1f746 <EccPoint_mult+0x44>
		nb = !uECC_vli_testBit(scalar, i);
   1f85a:	4629      	mov	r1, r5
   1f85c:	4650      	mov	r0, sl
   1f85e:	f7ff fb8b 	bl	1ef78 <uECC_vli_testBit>
   1f862:	fab0 f680 	clz	r6, r0
   1f866:	0976      	lsrs	r6, r6, #5
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   1f868:	f1c6 0101 	rsb	r1, r6, #1
   1f86c:	eb08 1b46 	add.w	fp, r8, r6, lsl #5
   1f870:	eb09 1646 	add.w	r6, r9, r6, lsl #5
   1f874:	eb08 1041 	add.w	r0, r8, r1, lsl #5
   1f878:	4633      	mov	r3, r6
   1f87a:	eb09 1141 	add.w	r1, r9, r1, lsl #5
   1f87e:	465a      	mov	r2, fp
   1f880:	9400      	str	r4, [sp, #0]
   1f882:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1f886:	f7ff fda0 	bl	1f3ca <XYcZ_addC>
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   1f88a:	9907      	ldr	r1, [sp, #28]
   1f88c:	9806      	ldr	r0, [sp, #24]
   1f88e:	9400      	str	r4, [sp, #0]
   1f890:	460b      	mov	r3, r1
   1f892:	4602      	mov	r2, r0
   1f894:	4631      	mov	r1, r6
   1f896:	4658      	mov	r0, fp
   1f898:	f7ff fecc 	bl	1f634 <XYcZ_add>
	for (i = num_bits - 2; i > 0; --i) {
   1f89c:	3d01      	subs	r5, #1
   1f89e:	e775      	b.n	1f78c <EccPoint_mult+0x8a>

0001f8a0 <regularize_k>:

uECC_word_t regularize_k(const uECC_word_t * const k, uECC_word_t *k0,
			 uECC_word_t *k1, uECC_Curve curve)
{
   1f8a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   1f8a4:	f9b3 9002 	ldrsh.w	r9, [r3, #2]
   1f8a8:	f119 081f 	adds.w	r8, r9, #31
{
   1f8ac:	461d      	mov	r5, r3
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   1f8ae:	bf48      	it	mi
   1f8b0:	f109 083e 	addmi.w	r8, r9, #62	; 0x3e
{
   1f8b4:	460e      	mov	r6, r1
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   1f8b6:	f348 1847 	sbfx	r8, r8, #5, #8

	bitcount_t num_n_bits = curve->num_n_bits;

	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   1f8ba:	3524      	adds	r5, #36	; 0x24
   1f8bc:	4601      	mov	r1, r0
{
   1f8be:	4617      	mov	r7, r2
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   1f8c0:	4643      	mov	r3, r8
   1f8c2:	462a      	mov	r2, r5
   1f8c4:	4630      	mov	r0, r6
   1f8c6:	f7ff fa84 	bl	1edd2 <uECC_vli_add>
   1f8ca:	4604      	mov	r4, r0
   1f8cc:	b990      	cbnz	r0, 1f8f4 <regularize_k+0x54>
   1f8ce:	ebb9 1f48 	cmp.w	r9, r8, lsl #5
   1f8d2:	da06      	bge.n	1f8e2 <regularize_k+0x42>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
			     uECC_vli_testBit(k0, num_n_bits));
   1f8d4:	4649      	mov	r1, r9
   1f8d6:	4630      	mov	r0, r6
   1f8d8:	f7ff fb4e 	bl	1ef78 <uECC_vli_testBit>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
   1f8dc:	1e04      	subs	r4, r0, #0
   1f8de:	bf18      	it	ne
   1f8e0:	2401      	movne	r4, #1

	uECC_vli_add(k1, k0, curve->n, num_n_words);
   1f8e2:	4643      	mov	r3, r8
   1f8e4:	462a      	mov	r2, r5
   1f8e6:	4631      	mov	r1, r6
   1f8e8:	4638      	mov	r0, r7
   1f8ea:	f7ff fa72 	bl	1edd2 <uECC_vli_add>

	return carry;
}
   1f8ee:	4620      	mov	r0, r4
   1f8f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   1f8f4:	2401      	movs	r4, #1
   1f8f6:	e7f4      	b.n	1f8e2 <regularize_k+0x42>

0001f8f8 <EccPoint_compute_public_key>:

uECC_word_t EccPoint_compute_public_key(uECC_word_t *result,
					uECC_word_t *private_key,
					uECC_Curve curve)
{
   1f8f8:	b530      	push	{r4, r5, lr}
   1f8fa:	4614      	mov	r4, r2
   1f8fc:	b095      	sub	sp, #84	; 0x54
   1f8fe:	4605      	mov	r5, r0

	uECC_word_t tmp1[NUM_ECC_WORDS];
 	uECC_word_t tmp2[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {tmp1, tmp2};
   1f900:	aa0c      	add	r2, sp, #48	; 0x30
	uECC_word_t carry;

	/* Regularize the bitcount for the private key so that attackers cannot
	 * use a side channel attack to learn the number of leading zeros. */
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   1f902:	4623      	mov	r3, r4
{
   1f904:	4608      	mov	r0, r1
	uECC_word_t *p2[2] = {tmp1, tmp2};
   1f906:	a904      	add	r1, sp, #16
   1f908:	9102      	str	r1, [sp, #8]
   1f90a:	9203      	str	r2, [sp, #12]
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   1f90c:	f7ff ffc8 	bl	1f8a0 <regularize_k>

	EccPoint_mult(result, curve->G, p2[!carry], 0, curve->num_n_bits + 1, curve);
   1f910:	fab0 f380 	clz	r3, r0
   1f914:	095b      	lsrs	r3, r3, #5
   1f916:	aa14      	add	r2, sp, #80	; 0x50
   1f918:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   1f91c:	8863      	ldrh	r3, [r4, #2]
   1f91e:	9401      	str	r4, [sp, #4]
   1f920:	3301      	adds	r3, #1
   1f922:	b21b      	sxth	r3, r3
   1f924:	9300      	str	r3, [sp, #0]
   1f926:	f852 2c48 	ldr.w	r2, [r2, #-72]
   1f92a:	2300      	movs	r3, #0
   1f92c:	f104 0144 	add.w	r1, r4, #68	; 0x44
   1f930:	4628      	mov	r0, r5
   1f932:	f7ff fee6 	bl	1f702 <EccPoint_mult>

	if (EccPoint_isZero(result, curve)) {
   1f936:	4621      	mov	r1, r4
   1f938:	4628      	mov	r0, r5
   1f93a:	f7ff fe57 	bl	1f5ec <EccPoint_isZero>
		return 0;
	}
	return 1;
}
   1f93e:	fab0 f080 	clz	r0, r0
   1f942:	0940      	lsrs	r0, r0, #5
   1f944:	b015      	add	sp, #84	; 0x54
   1f946:	bd30      	pop	{r4, r5, pc}

0001f948 <uECC_vli_nativeToBytes>:

/* Converts an integer in uECC native format to big-endian bytes. */
void uECC_vli_nativeToBytes(uint8_t *bytes, int num_bytes,
			    const unsigned int *native)
{
   1f948:	b5f0      	push	{r4, r5, r6, r7, lr}
	wordcount_t i;
	for (i = 0; i < num_bytes; ++i) {
   1f94a:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   1f94c:	1e4f      	subs	r7, r1, #1
   1f94e:	b26c      	sxtb	r4, r5
	for (i = 0; i < num_bytes; ++i) {
   1f950:	428c      	cmp	r4, r1
   1f952:	f105 0501 	add.w	r5, r5, #1
   1f956:	db00      	blt.n	1f95a <uECC_vli_nativeToBytes+0x12>
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
	}
}
   1f958:	bdf0      	pop	{r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   1f95a:	1b3b      	subs	r3, r7, r4
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
   1f95c:	f023 0603 	bic.w	r6, r3, #3
   1f960:	f003 0303 	and.w	r3, r3, #3
   1f964:	5996      	ldr	r6, [r2, r6]
   1f966:	00db      	lsls	r3, r3, #3
   1f968:	fa26 f303 	lsr.w	r3, r6, r3
   1f96c:	5503      	strb	r3, [r0, r4]
	for (i = 0; i < num_bytes; ++i) {
   1f96e:	e7ee      	b.n	1f94e <uECC_vli_nativeToBytes+0x6>

0001f970 <uECC_vli_bytesToNative>:

/* Converts big-endian bytes to an integer in uECC native format. */
void uECC_vli_bytesToNative(unsigned int *native, const uint8_t *bytes,
			    int num_bytes)
{
   1f970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f972:	460e      	mov	r6, r1
	wordcount_t i;
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   1f974:	1cd1      	adds	r1, r2, #3
   1f976:	bf48      	it	mi
   1f978:	1d91      	addmi	r1, r2, #6
   1f97a:	f341 0187 	sbfx	r1, r1, #2, #8
{
   1f97e:	4614      	mov	r4, r2
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   1f980:	f7ff fae0 	bl	1ef44 <uECC_vli_clear>
	for (i = 0; i < num_bytes; ++i) {
   1f984:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   1f986:	1e67      	subs	r7, r4, #1
   1f988:	b26a      	sxtb	r2, r5
	for (i = 0; i < num_bytes; ++i) {
   1f98a:	42a2      	cmp	r2, r4
   1f98c:	f105 0501 	add.w	r5, r5, #1
   1f990:	db00      	blt.n	1f994 <uECC_vli_bytesToNative+0x24>
		native[b / uECC_WORD_SIZE] |=
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
  	}
}
   1f992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   1f994:	1abb      	subs	r3, r7, r2
		native[b / uECC_WORD_SIZE] |=
   1f996:	f023 0103 	bic.w	r1, r3, #3
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
   1f99a:	5cb2      	ldrb	r2, [r6, r2]
   1f99c:	f003 0303 	and.w	r3, r3, #3
   1f9a0:	00db      	lsls	r3, r3, #3
   1f9a2:	fa02 f303 	lsl.w	r3, r2, r3
		native[b / uECC_WORD_SIZE] |=
   1f9a6:	5842      	ldr	r2, [r0, r1]
   1f9a8:	431a      	orrs	r2, r3
   1f9aa:	5042      	str	r2, [r0, r1]
	for (i = 0; i < num_bytes; ++i) {
   1f9ac:	e7ec      	b.n	1f988 <uECC_vli_bytesToNative+0x18>

0001f9ae <uECC_valid_point>:
	return 0;
}


int uECC_valid_point(const uECC_word_t *point, uECC_Curve curve)
{
   1f9ae:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f9b0:	b091      	sub	sp, #68	; 0x44
	uECC_word_t tmp1[NUM_ECC_WORDS];
	uECC_word_t tmp2[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   1f9b2:	f991 6000 	ldrsb.w	r6, [r1]
{
   1f9b6:	4605      	mov	r5, r0
   1f9b8:	460c      	mov	r4, r1

	/* The point at infinity is invalid. */
	if (EccPoint_isZero(point, curve)) {
   1f9ba:	f7ff fe17 	bl	1f5ec <EccPoint_isZero>
   1f9be:	bb28      	cbnz	r0, 1fa0c <uECC_valid_point+0x5e>
		return -1;
	}

	/* x and y must be smaller than p. */
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   1f9c0:	1d27      	adds	r7, r4, #4
   1f9c2:	4632      	mov	r2, r6
   1f9c4:	4629      	mov	r1, r5
   1f9c6:	4638      	mov	r0, r7
   1f9c8:	f7ff fb0d 	bl	1efe6 <uECC_vli_cmp_unsafe>
   1f9cc:	2801      	cmp	r0, #1
   1f9ce:	d120      	bne.n	1fa12 <uECC_valid_point+0x64>
		uECC_vli_cmp_unsafe(curve->p, point + num_words, num_words) != 1) {
   1f9d0:	eb05 0186 	add.w	r1, r5, r6, lsl #2
   1f9d4:	4632      	mov	r2, r6
   1f9d6:	4638      	mov	r0, r7
   1f9d8:	f7ff fb05 	bl	1efe6 <uECC_vli_cmp_unsafe>
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   1f9dc:	2801      	cmp	r0, #1
   1f9de:	d118      	bne.n	1fa12 <uECC_valid_point+0x64>
		return -2;
	}

	uECC_vli_modSquare_fast(tmp1, point + num_words, curve);
   1f9e0:	4622      	mov	r2, r4
   1f9e2:	4668      	mov	r0, sp
   1f9e4:	f7ff fc15 	bl	1f212 <uECC_vli_modSquare_fast>
	curve->x_side(tmp2, point, curve); /* tmp2 = x^3 + ax + b */
   1f9e8:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   1f9ec:	4622      	mov	r2, r4
   1f9ee:	4629      	mov	r1, r5
   1f9f0:	a808      	add	r0, sp, #32
   1f9f2:	4798      	blx	r3

	/* Make sure that y^2 == x^3 + ax + b */
	if (uECC_vli_equal(tmp1, tmp2, num_words) != 0)
   1f9f4:	4632      	mov	r2, r6
   1f9f6:	a908      	add	r1, sp, #32
   1f9f8:	4668      	mov	r0, sp
   1f9fa:	f7ff fb0b 	bl	1f014 <uECC_vli_equal>
   1f9fe:	2800      	cmp	r0, #0
		return -3;
   1fa00:	bf0c      	ite	eq
   1fa02:	2000      	moveq	r0, #0
   1fa04:	f06f 0002 	mvnne.w	r0, #2

	return 0;
}
   1fa08:	b011      	add	sp, #68	; 0x44
   1fa0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
   1fa0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1fa10:	e7fa      	b.n	1fa08 <uECC_valid_point+0x5a>
		return -2;
   1fa12:	f06f 0001 	mvn.w	r0, #1
   1fa16:	e7f7      	b.n	1fa08 <uECC_valid_point+0x5a>

0001fa18 <uECC_valid_public_key>:

int uECC_valid_public_key(const uint8_t *public_key, uECC_Curve curve)
{
   1fa18:	b570      	push	{r4, r5, r6, lr}
   1fa1a:	460c      	mov	r4, r1
   1fa1c:	b090      	sub	sp, #64	; 0x40

	uECC_word_t _public[NUM_ECC_WORDS * 2];

	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
	uECC_vli_bytesToNative(
	_public + curve->num_words,
   1fa1e:	4626      	mov	r6, r4
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   1fa20:	f991 2001 	ldrsb.w	r2, [r1, #1]
{
   1fa24:	4605      	mov	r5, r0
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   1fa26:	4601      	mov	r1, r0
   1fa28:	4668      	mov	r0, sp
   1fa2a:	f7ff ffa1 	bl	1f970 <uECC_vli_bytesToNative>
	public_key + curve->num_bytes,
   1fa2e:	f994 2001 	ldrsb.w	r2, [r4, #1]
	_public + curve->num_words,
   1fa32:	f916 0b44 	ldrsb.w	r0, [r6], #68
	uECC_vli_bytesToNative(
   1fa36:	18a9      	adds	r1, r5, r2
   1fa38:	eb0d 0080 	add.w	r0, sp, r0, lsl #2
   1fa3c:	f7ff ff98 	bl	1f970 <uECC_vli_bytesToNative>
	curve->num_bytes);

	if (uECC_vli_cmp_unsafe(_public, curve->G, NUM_ECC_WORDS * 2) == 0) {
   1fa40:	2210      	movs	r2, #16
   1fa42:	4631      	mov	r1, r6
   1fa44:	4668      	mov	r0, sp
   1fa46:	f7ff face 	bl	1efe6 <uECC_vli_cmp_unsafe>
   1fa4a:	b128      	cbz	r0, 1fa58 <uECC_valid_public_key+0x40>
		return -4;
	}

	return uECC_valid_point(_public, curve);
   1fa4c:	4621      	mov	r1, r4
   1fa4e:	4668      	mov	r0, sp
   1fa50:	f7ff ffad 	bl	1f9ae <uECC_valid_point>
}
   1fa54:	b010      	add	sp, #64	; 0x40
   1fa56:	bd70      	pop	{r4, r5, r6, pc}
		return -4;
   1fa58:	f06f 0003 	mvn.w	r0, #3
   1fa5c:	e7fa      	b.n	1fa54 <uECC_valid_public_key+0x3c>

0001fa5e <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   1fa5e:	78cb      	ldrb	r3, [r1, #3]
   1fa60:	7802      	ldrb	r2, [r0, #0]
   1fa62:	4053      	eors	r3, r2
   1fa64:	7003      	strb	r3, [r0, #0]
   1fa66:	884b      	ldrh	r3, [r1, #2]
   1fa68:	7842      	ldrb	r2, [r0, #1]
   1fa6a:	4053      	eors	r3, r2
   1fa6c:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   1fa6e:	680a      	ldr	r2, [r1, #0]
   1fa70:	7883      	ldrb	r3, [r0, #2]
   1fa72:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1fa76:	7083      	strb	r3, [r0, #2]
   1fa78:	680a      	ldr	r2, [r1, #0]
   1fa7a:	78c3      	ldrb	r3, [r0, #3]
   1fa7c:	4053      	eors	r3, r2
   1fa7e:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   1fa80:	79cb      	ldrb	r3, [r1, #7]
   1fa82:	7902      	ldrb	r2, [r0, #4]
   1fa84:	4053      	eors	r3, r2
   1fa86:	7103      	strb	r3, [r0, #4]
   1fa88:	88cb      	ldrh	r3, [r1, #6]
   1fa8a:	7942      	ldrb	r2, [r0, #5]
   1fa8c:	4053      	eors	r3, r2
   1fa8e:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   1fa90:	684a      	ldr	r2, [r1, #4]
   1fa92:	7983      	ldrb	r3, [r0, #6]
   1fa94:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1fa98:	7183      	strb	r3, [r0, #6]
   1fa9a:	684a      	ldr	r2, [r1, #4]
   1fa9c:	79c3      	ldrb	r3, [r0, #7]
   1fa9e:	4053      	eors	r3, r2
   1faa0:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   1faa2:	7acb      	ldrb	r3, [r1, #11]
   1faa4:	7a02      	ldrb	r2, [r0, #8]
   1faa6:	4053      	eors	r3, r2
   1faa8:	7203      	strb	r3, [r0, #8]
   1faaa:	7a42      	ldrb	r2, [r0, #9]
   1faac:	894b      	ldrh	r3, [r1, #10]
   1faae:	4053      	eors	r3, r2
   1fab0:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   1fab2:	688a      	ldr	r2, [r1, #8]
   1fab4:	7a83      	ldrb	r3, [r0, #10]
   1fab6:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1faba:	7283      	strb	r3, [r0, #10]
   1fabc:	688a      	ldr	r2, [r1, #8]
   1fabe:	7ac3      	ldrb	r3, [r0, #11]
   1fac0:	4053      	eors	r3, r2
   1fac2:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   1fac4:	7bcb      	ldrb	r3, [r1, #15]
   1fac6:	7b02      	ldrb	r2, [r0, #12]
   1fac8:	4053      	eors	r3, r2
   1faca:	7303      	strb	r3, [r0, #12]
   1facc:	89cb      	ldrh	r3, [r1, #14]
   1face:	7b42      	ldrb	r2, [r0, #13]
   1fad0:	4053      	eors	r3, r2
   1fad2:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   1fad4:	68ca      	ldr	r2, [r1, #12]
   1fad6:	7b83      	ldrb	r3, [r0, #14]
   1fad8:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1fadc:	7383      	strb	r3, [r0, #14]
   1fade:	68ca      	ldr	r2, [r1, #12]
   1fae0:	7bc3      	ldrb	r3, [r0, #15]
   1fae2:	4053      	eors	r3, r2
   1fae4:	73c3      	strb	r3, [r0, #15]
}
   1fae6:	4770      	bx	lr

0001fae8 <shift_rows>:
{
   1fae8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   1faea:	7802      	ldrb	r2, [r0, #0]
   1faec:	f88d 2000 	strb.w	r2, [sp]
   1faf0:	7942      	ldrb	r2, [r0, #5]
   1faf2:	f88d 2001 	strb.w	r2, [sp, #1]
   1faf6:	7a82      	ldrb	r2, [r0, #10]
   1faf8:	f88d 2002 	strb.w	r2, [sp, #2]
   1fafc:	7bc2      	ldrb	r2, [r0, #15]
   1fafe:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   1fb02:	7902      	ldrb	r2, [r0, #4]
   1fb04:	f88d 2004 	strb.w	r2, [sp, #4]
   1fb08:	7a42      	ldrb	r2, [r0, #9]
   1fb0a:	f88d 2005 	strb.w	r2, [sp, #5]
   1fb0e:	7b82      	ldrb	r2, [r0, #14]
   1fb10:	f88d 2006 	strb.w	r2, [sp, #6]
   1fb14:	78c2      	ldrb	r2, [r0, #3]
   1fb16:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   1fb1a:	7a02      	ldrb	r2, [r0, #8]
   1fb1c:	f88d 2008 	strb.w	r2, [sp, #8]
   1fb20:	7b42      	ldrb	r2, [r0, #13]
   1fb22:	f88d 2009 	strb.w	r2, [sp, #9]
   1fb26:	7882      	ldrb	r2, [r0, #2]
   1fb28:	f88d 200a 	strb.w	r2, [sp, #10]
   1fb2c:	79c2      	ldrb	r2, [r0, #7]
   1fb2e:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   1fb32:	7b02      	ldrb	r2, [r0, #12]
   1fb34:	f88d 200c 	strb.w	r2, [sp, #12]
   1fb38:	7842      	ldrb	r2, [r0, #1]
   1fb3a:	7ac3      	ldrb	r3, [r0, #11]
   1fb3c:	f88d 200d 	strb.w	r2, [sp, #13]
   1fb40:	7982      	ldrb	r2, [r0, #6]
   1fb42:	f88d 200e 	strb.w	r2, [sp, #14]
   1fb46:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1fb4a:	2310      	movs	r3, #16
   1fb4c:	466a      	mov	r2, sp
   1fb4e:	4619      	mov	r1, r3
   1fb50:	f7ff f87b 	bl	1ec4a <_copy>
}
   1fb54:	b005      	add	sp, #20
   1fb56:	f85d fb04 	ldr.w	pc, [sp], #4

0001fb5a <mult_row_column>:
{
   1fb5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fb5c:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1fb5e:	7808      	ldrb	r0, [r1, #0]
{
   1fb60:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1fb62:	f7ff f881 	bl	1ec68 <_double_byte>
   1fb66:	4605      	mov	r5, r0
   1fb68:	7860      	ldrb	r0, [r4, #1]
   1fb6a:	f7ff f87d 	bl	1ec68 <_double_byte>
   1fb6e:	78a2      	ldrb	r2, [r4, #2]
   1fb70:	7863      	ldrb	r3, [r4, #1]
   1fb72:	4053      	eors	r3, r2
   1fb74:	78e2      	ldrb	r2, [r4, #3]
   1fb76:	4053      	eors	r3, r2
   1fb78:	405d      	eors	r5, r3
   1fb7a:	4045      	eors	r5, r0
   1fb7c:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   1fb7e:	7860      	ldrb	r0, [r4, #1]
   1fb80:	7827      	ldrb	r7, [r4, #0]
   1fb82:	f7ff f871 	bl	1ec68 <_double_byte>
   1fb86:	4605      	mov	r5, r0
   1fb88:	78a0      	ldrb	r0, [r4, #2]
   1fb8a:	f7ff f86d 	bl	1ec68 <_double_byte>
   1fb8e:	78a3      	ldrb	r3, [r4, #2]
   1fb90:	405f      	eors	r7, r3
   1fb92:	78e3      	ldrb	r3, [r4, #3]
   1fb94:	405f      	eors	r7, r3
   1fb96:	407d      	eors	r5, r7
   1fb98:	4045      	eors	r5, r0
   1fb9a:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   1fb9c:	78a0      	ldrb	r0, [r4, #2]
   1fb9e:	7865      	ldrb	r5, [r4, #1]
   1fba0:	7827      	ldrb	r7, [r4, #0]
   1fba2:	f7ff f861 	bl	1ec68 <_double_byte>
   1fba6:	406f      	eors	r7, r5
   1fba8:	4605      	mov	r5, r0
   1fbaa:	78e0      	ldrb	r0, [r4, #3]
   1fbac:	f7ff f85c 	bl	1ec68 <_double_byte>
   1fbb0:	78e3      	ldrb	r3, [r4, #3]
   1fbb2:	405f      	eors	r7, r3
   1fbb4:	407d      	eors	r5, r7
   1fbb6:	4045      	eors	r5, r0
   1fbb8:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   1fbba:	7820      	ldrb	r0, [r4, #0]
   1fbbc:	f7ff f854 	bl	1ec68 <_double_byte>
   1fbc0:	7863      	ldrb	r3, [r4, #1]
   1fbc2:	7825      	ldrb	r5, [r4, #0]
   1fbc4:	405d      	eors	r5, r3
   1fbc6:	78a3      	ldrb	r3, [r4, #2]
   1fbc8:	405d      	eors	r5, r3
   1fbca:	4045      	eors	r5, r0
   1fbcc:	78e0      	ldrb	r0, [r4, #3]
   1fbce:	f7ff f84b 	bl	1ec68 <_double_byte>
   1fbd2:	b2ed      	uxtb	r5, r5
   1fbd4:	4045      	eors	r5, r0
   1fbd6:	70f5      	strb	r5, [r6, #3]
}
   1fbd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001fbda <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   1fbda:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1fbdc:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   1fbde:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1fbe0:	f912 3b10 	ldrsb.w	r3, [r2], #16
   1fbe4:	2b00      	cmp	r3, #0
   1fbe6:	bfb4      	ite	lt
   1fbe8:	2387      	movlt	r3, #135	; 0x87
   1fbea:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   1fbec:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   1fbf0:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   1fbf4:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   1fbf6:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   1fbfa:	d002      	beq.n	1fc02 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   1fbfc:	7813      	ldrb	r3, [r2, #0]
   1fbfe:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   1fc00:	e7f4      	b.n	1fbec <gf_double+0x12>
	}
}
   1fc02:	bd10      	pop	{r4, pc}

0001fc04 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   1fc04:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   1fc06:	b120      	cbz	r0, 1fc12 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   1fc08:	2258      	movs	r2, #88	; 0x58
   1fc0a:	2100      	movs	r1, #0
   1fc0c:	f7ff f82a 	bl	1ec64 <_set>
   1fc10:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   1fc12:	bd08      	pop	{r3, pc}

0001fc14 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   1fc14:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1fc16:	4604      	mov	r4, r0
   1fc18:	b188      	cbz	r0, 1fc3e <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1fc1a:	2210      	movs	r2, #16
   1fc1c:	2100      	movs	r1, #0
   1fc1e:	f7ff f821 	bl	1ec64 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   1fc22:	2210      	movs	r2, #16
   1fc24:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1fc28:	2100      	movs	r1, #0
   1fc2a:	f7ff f81b 	bl	1ec64 <_set>
	s->leftover_offset = 0;
   1fc2e:	2300      	movs	r3, #0
   1fc30:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   1fc32:	2200      	movs	r2, #0
   1fc34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1fc38:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   1fc3c:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   1fc3e:	bd10      	pop	{r4, pc}

0001fc40 <tc_cmac_setup>:
{
   1fc40:	b570      	push	{r4, r5, r6, lr}
   1fc42:	460d      	mov	r5, r1
   1fc44:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   1fc46:	4604      	mov	r4, r0
   1fc48:	b310      	cbz	r0, 1fc90 <tc_cmac_setup+0x50>
   1fc4a:	b311      	cbz	r1, 1fc92 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   1fc4c:	2258      	movs	r2, #88	; 0x58
   1fc4e:	2100      	movs	r1, #0
   1fc50:	f7ff f808 	bl	1ec64 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   1fc54:	4629      	mov	r1, r5
	s->sched = sched;
   1fc56:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   1fc58:	4630      	mov	r0, r6
   1fc5a:	f7e7 fb17 	bl	728c <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1fc5e:	2210      	movs	r2, #16
   1fc60:	2100      	movs	r1, #0
   1fc62:	4620      	mov	r0, r4
   1fc64:	f7fe fffe 	bl	1ec64 <_set>
	gf_double (s->K1, s->iv);
   1fc68:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   1fc6c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1fc6e:	4621      	mov	r1, r4
   1fc70:	4620      	mov	r0, r4
   1fc72:	f7e7 fb5d 	bl	7330 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   1fc76:	4621      	mov	r1, r4
   1fc78:	4628      	mov	r0, r5
   1fc7a:	f7ff ffae 	bl	1fbda <gf_double>
	gf_double (s->K2, s->K1);
   1fc7e:	4629      	mov	r1, r5
   1fc80:	f104 0020 	add.w	r0, r4, #32
   1fc84:	f7ff ffa9 	bl	1fbda <gf_double>
	tc_cmac_init(s);
   1fc88:	4620      	mov	r0, r4
   1fc8a:	f7ff ffc3 	bl	1fc14 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   1fc8e:	2001      	movs	r0, #1
}
   1fc90:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1fc92:	4608      	mov	r0, r1
   1fc94:	e7fc      	b.n	1fc90 <tc_cmac_setup+0x50>

0001fc96 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   1fc96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fc9a:	460d      	mov	r5, r1
   1fc9c:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1fc9e:	4604      	mov	r4, r0
   1fca0:	2800      	cmp	r0, #0
   1fca2:	d062      	beq.n	1fd6a <tc_cmac_update+0xd4>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   1fca4:	b912      	cbnz	r2, 1fcac <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   1fca6:	2001      	movs	r0, #1
}
   1fca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   1fcac:	2900      	cmp	r1, #0
   1fcae:	d05c      	beq.n	1fd6a <tc_cmac_update+0xd4>
	if (s->countdown == 0) {
   1fcb0:	e9d0 0114 	ldrd	r0, r1, [r0, #80]	; 0x50
   1fcb4:	ea50 0301 	orrs.w	r3, r0, r1
   1fcb8:	d057      	beq.n	1fd6a <tc_cmac_update+0xd4>
	s->countdown--;
   1fcba:	f110 32ff 	adds.w	r2, r0, #4294967295	; 0xffffffff
	if (s->leftover_offset > 0) {
   1fcbe:	f8d4 8044 	ldr.w	r8, [r4, #68]	; 0x44
	s->countdown--;
   1fcc2:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
   1fcc6:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
	if (s->leftover_offset > 0) {
   1fcca:	f1b8 0f00 	cmp.w	r8, #0
   1fcce:	d02a      	beq.n	1fd26 <tc_cmac_update+0x90>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   1fcd0:	f1c8 0710 	rsb	r7, r8, #16
		if (data_length < remaining_space) {
   1fcd4:	f108 0030 	add.w	r0, r8, #48	; 0x30
   1fcd8:	42be      	cmp	r6, r7
   1fcda:	4420      	add	r0, r4
   1fcdc:	d208      	bcs.n	1fcf0 <tc_cmac_update+0x5a>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1fcde:	462a      	mov	r2, r5
   1fce0:	4633      	mov	r3, r6
   1fce2:	4631      	mov	r1, r6
   1fce4:	f7fe ffb1 	bl	1ec4a <_copy>
			s->leftover_offset += data_length;
   1fce8:	6c62      	ldr	r2, [r4, #68]	; 0x44
   1fcea:	4432      	add	r2, r6
   1fcec:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   1fcee:	e7da      	b.n	1fca6 <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   1fcf0:	463b      	mov	r3, r7
   1fcf2:	462a      	mov	r2, r5
   1fcf4:	4639      	mov	r1, r7
   1fcf6:	f7fe ffa8 	bl	1ec4a <_copy>
		data_length -= remaining_space;
   1fcfa:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   1fcfc:	2300      	movs	r3, #0
   1fcfe:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   1fd00:	4446      	add	r6, r8
		data += remaining_space;
   1fd02:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1fd04:	1e63      	subs	r3, r4, #1
   1fd06:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   1fd0a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1fd0e:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1fd12:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   1fd14:	ea82 0200 	eor.w	r2, r2, r0
   1fd18:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1fd1a:	d1f6      	bne.n	1fd0a <tc_cmac_update+0x74>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1fd1c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1fd1e:	4621      	mov	r1, r4
   1fd20:	4620      	mov	r0, r4
   1fd22:	f7e7 fb05 	bl	7330 <tc_aes_encrypt>
   1fd26:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   1fd2a:	2e10      	cmp	r6, #16
   1fd2c:	d80a      	bhi.n	1fd44 <tc_cmac_update+0xae>
	if (data_length > 0) {
   1fd2e:	2e00      	cmp	r6, #0
   1fd30:	d0b9      	beq.n	1fca6 <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   1fd32:	4633      	mov	r3, r6
   1fd34:	462a      	mov	r2, r5
   1fd36:	4631      	mov	r1, r6
   1fd38:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1fd3c:	f7fe ff85 	bl	1ec4a <_copy>
		s->leftover_offset = data_length;
   1fd40:	6466      	str	r6, [r4, #68]	; 0x44
   1fd42:	e7b0      	b.n	1fca6 <tc_cmac_update+0x10>
   1fd44:	1e63      	subs	r3, r4, #1
   1fd46:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   1fd48:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1fd4c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1fd50:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   1fd52:	ea82 0200 	eor.w	r2, r2, r0
   1fd56:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1fd58:	d1f6      	bne.n	1fd48 <tc_cmac_update+0xb2>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1fd5a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1fd5c:	4621      	mov	r1, r4
   1fd5e:	4620      	mov	r0, r4
   1fd60:	f7e7 fae6 	bl	7330 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   1fd64:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   1fd66:	3e10      	subs	r6, #16
   1fd68:	e7df      	b.n	1fd2a <tc_cmac_update+0x94>
		return TC_CRYPTO_FAIL;
   1fd6a:	2000      	movs	r0, #0
   1fd6c:	e79c      	b.n	1fca8 <tc_cmac_update+0x12>

0001fd6e <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   1fd6e:	b570      	push	{r4, r5, r6, lr}
   1fd70:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   1fd72:	4605      	mov	r5, r0
   1fd74:	b1e8      	cbz	r0, 1fdb2 <tc_cmac_final+0x44>
   1fd76:	b369      	cbz	r1, 1fdd4 <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   1fd78:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   1fd7a:	2a10      	cmp	r2, #16
   1fd7c:	d11a      	bne.n	1fdb4 <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   1fd7e:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1fd80:	1e63      	subs	r3, r4, #1
   1fd82:	3901      	subs	r1, #1
   1fd84:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1fd88:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1fd8c:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   1fd90:	4072      	eors	r2, r6
   1fd92:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1fd96:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1fd98:	ea82 0206 	eor.w	r2, r2, r6
   1fd9c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1fd9e:	d1f3      	bne.n	1fd88 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   1fda0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1fda2:	4621      	mov	r1, r4
   1fda4:	4628      	mov	r0, r5
   1fda6:	f7e7 fac3 	bl	7330 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   1fdaa:	4620      	mov	r0, r4
   1fdac:	f7ff ff2a 	bl	1fc04 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   1fdb0:	2001      	movs	r0, #1
}
   1fdb2:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   1fdb4:	f102 0030 	add.w	r0, r2, #48	; 0x30
   1fdb8:	2100      	movs	r1, #0
   1fdba:	f1c2 0210 	rsb	r2, r2, #16
   1fdbe:	4420      	add	r0, r4
   1fdc0:	f7fe ff50 	bl	1ec64 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   1fdc4:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1fdc6:	4423      	add	r3, r4
   1fdc8:	2280      	movs	r2, #128	; 0x80
   1fdca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   1fdce:	f104 0120 	add.w	r1, r4, #32
   1fdd2:	e7d5      	b.n	1fd80 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   1fdd4:	4608      	mov	r0, r1
   1fdd6:	e7ec      	b.n	1fdb2 <tc_cmac_final+0x44>

0001fdd8 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   1fdd8:	2100      	movs	r1, #0
   1fdda:	2001      	movs	r0, #1
   1fddc:	f7e7 bc10 	b.w	7600 <z_arm_fatal_error>

0001fde0 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   1fde0:	4601      	mov	r1, r0
			reason = K_ERR_KERNEL_OOPS;
		}
	}

#endif /* CONFIG_USERSPACE */
	z_arm_fatal_error(reason, esf);
   1fde2:	6800      	ldr	r0, [r0, #0]
   1fde4:	f7e7 bc0c 	b.w	7600 <z_arm_fatal_error>

0001fde8 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   1fde8:	b508      	push	{r3, lr}
	handler();
   1fdea:	f7e7 fc41 	bl	7670 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   1fdee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   1fdf2:	f7e7 beaf 	b.w	7b54 <z_arm_exc_exit>

0001fdf6 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   1fdf6:	3901      	subs	r1, #1
   1fdf8:	4603      	mov	r3, r0
   1fdfa:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1fdfe:	b90a      	cbnz	r2, 1fe04 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   1fe00:	701a      	strb	r2, [r3, #0]

	return dest;
}
   1fe02:	4770      	bx	lr
		*d = *s;
   1fe04:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   1fe08:	e7f7      	b.n	1fdfa <strcpy+0x4>

0001fe0a <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
   1fe0a:	b570      	push	{r4, r5, r6, lr}
   1fe0c:	3901      	subs	r1, #1
   1fe0e:	4605      	mov	r5, r0
   1fe10:	462c      	mov	r4, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   1fe12:	b142      	cbz	r2, 1fe26 <strncpy+0x1c>
   1fe14:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   1fe18:	1e56      	subs	r6, r2, #1
   1fe1a:	b92b      	cbnz	r3, 1fe28 <strncpy+0x1e>
   1fe1c:	442a      	add	r2, r5
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
   1fe1e:	f804 3b01 	strb.w	r3, [r4], #1
	while (n > 0) {
   1fe22:	42a2      	cmp	r2, r4
   1fe24:	d1fb      	bne.n	1fe1e <strncpy+0x14>
		d++;
		n--;
	}

	return dest;
}
   1fe26:	bd70      	pop	{r4, r5, r6, pc}
		*d = *s;
   1fe28:	f805 3b01 	strb.w	r3, [r5], #1
		n--;
   1fe2c:	4632      	mov	r2, r6
   1fe2e:	e7ef      	b.n	1fe10 <strncpy+0x6>

0001fe30 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   1fe30:	4603      	mov	r3, r0
	size_t n = 0;
   1fe32:	2000      	movs	r0, #0

	while (*s != '\0') {
   1fe34:	5c1a      	ldrb	r2, [r3, r0]
   1fe36:	b902      	cbnz	r2, 1fe3a <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   1fe38:	4770      	bx	lr
		n++;
   1fe3a:	3001      	adds	r0, #1
   1fe3c:	e7fa      	b.n	1fe34 <strlen+0x4>

0001fe3e <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   1fe3e:	1e43      	subs	r3, r0, #1
   1fe40:	3901      	subs	r1, #1
   1fe42:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1fe46:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   1fe4a:	4282      	cmp	r2, r0
   1fe4c:	d101      	bne.n	1fe52 <strcmp+0x14>
   1fe4e:	2a00      	cmp	r2, #0
   1fe50:	d1f7      	bne.n	1fe42 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   1fe52:	1a10      	subs	r0, r2, r0
   1fe54:	4770      	bx	lr

0001fe56 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   1fe56:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   1fe58:	b15a      	cbz	r2, 1fe72 <memcmp+0x1c>
   1fe5a:	3901      	subs	r1, #1
   1fe5c:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   1fe5e:	f810 2b01 	ldrb.w	r2, [r0], #1
   1fe62:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   1fe66:	42a0      	cmp	r0, r4
   1fe68:	d001      	beq.n	1fe6e <memcmp+0x18>
   1fe6a:	429a      	cmp	r2, r3
   1fe6c:	d0f7      	beq.n	1fe5e <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   1fe6e:	1ad0      	subs	r0, r2, r3
}
   1fe70:	bd10      	pop	{r4, pc}
		return 0;
   1fe72:	4610      	mov	r0, r2
   1fe74:	e7fc      	b.n	1fe70 <memcmp+0x1a>

0001fe76 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   1fe76:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   1fe78:	ea81 0400 	eor.w	r4, r1, r0
   1fe7c:	07a5      	lsls	r5, r4, #30
   1fe7e:	4603      	mov	r3, r0
   1fe80:	d00b      	beq.n	1fe9a <memcpy+0x24>
   1fe82:	3b01      	subs	r3, #1
   1fe84:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   1fe86:	4291      	cmp	r1, r2
   1fe88:	d11b      	bne.n	1fec2 <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   1fe8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   1fe8c:	2a00      	cmp	r2, #0
   1fe8e:	d0fc      	beq.n	1fe8a <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   1fe90:	f811 4b01 	ldrb.w	r4, [r1], #1
   1fe94:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
   1fe98:	3a01      	subs	r2, #1
		while (((uintptr_t)d_byte) & mask) {
   1fe9a:	079c      	lsls	r4, r3, #30
   1fe9c:	d1f6      	bne.n	1fe8c <memcpy+0x16>
   1fe9e:	f022 0403 	bic.w	r4, r2, #3
   1fea2:	1f1d      	subs	r5, r3, #4
   1fea4:	0896      	lsrs	r6, r2, #2
   1fea6:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
   1fea8:	42b9      	cmp	r1, r7
   1feaa:	d105      	bne.n	1feb8 <memcpy+0x42>
   1feac:	f06f 0503 	mvn.w	r5, #3
   1feb0:	fb05 2206 	mla	r2, r5, r6, r2
   1feb4:	4423      	add	r3, r4
   1feb6:	e7e4      	b.n	1fe82 <memcpy+0xc>
			*(d_word++) = *(s_word++);
   1feb8:	f851 cb04 	ldr.w	ip, [r1], #4
   1febc:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
   1fec0:	e7f2      	b.n	1fea8 <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
   1fec2:	f811 4b01 	ldrb.w	r4, [r1], #1
   1fec6:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   1feca:	e7dc      	b.n	1fe86 <memcpy+0x10>

0001fecc <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
   1fecc:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   1fece:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
   1fed0:	4603      	mov	r3, r0

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   1fed2:	079c      	lsls	r4, r3, #30
   1fed4:	d111      	bne.n	1fefa <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
   1fed6:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
   1feda:	f022 0603 	bic.w	r6, r2, #3
   1fede:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   1fee2:	441e      	add	r6, r3
   1fee4:	0894      	lsrs	r4, r2, #2
   1fee6:	42b3      	cmp	r3, r6
   1fee8:	d10d      	bne.n	1ff06 <memset+0x3a>
   1feea:	f06f 0503 	mvn.w	r5, #3
   1feee:	fb05 2204 	mla	r2, r5, r4, r2
   1fef2:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   1fef4:	4293      	cmp	r3, r2
   1fef6:	d109      	bne.n	1ff0c <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   1fef8:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
   1fefa:	2a00      	cmp	r2, #0
   1fefc:	d0fc      	beq.n	1fef8 <memset+0x2c>
		*(d_byte++) = c_byte;
   1fefe:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1ff02:	3a01      	subs	r2, #1
   1ff04:	e7e5      	b.n	1fed2 <memset+0x6>
		*(d_word++) = c_word;
   1ff06:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
   1ff0a:	e7ec      	b.n	1fee6 <memset+0x1a>
		*(d_byte++) = c_byte;
   1ff0c:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1ff10:	e7f0      	b.n	1fef4 <memset+0x28>

0001ff12 <_stdout_hook_default>:
}
   1ff12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ff16:	4770      	bx	lr

0001ff18 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   1ff18:	f7fc bcce 	b.w	1c8b8 <SystemInit>

0001ff1c <ah>:
	return bt_encrypt_le(key, plaintext, enc_data);
#endif
}

static int ah(const uint8_t irk[16], const uint8_t r[3], uint8_t out[3])
{
   1ff1c:	b530      	push	{r4, r5, lr}
   1ff1e:	b085      	sub	sp, #20
   1ff20:	4604      	mov	r4, r0
   1ff22:	4615      	mov	r5, r2

	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   1ff24:	4668      	mov	r0, sp
   1ff26:	2203      	movs	r2, #3
   1ff28:	f7ff ffa5 	bl	1fe76 <memcpy>
	(void)memset(res + 3, 0, 13);
   1ff2c:	220d      	movs	r2, #13
   1ff2e:	2100      	movs	r1, #0
   1ff30:	f10d 0003 	add.w	r0, sp, #3
   1ff34:	f7ff ffca 	bl	1fecc <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   1ff38:	4620      	mov	r0, r4
   1ff3a:	466a      	mov	r2, sp
   1ff3c:	4669      	mov	r1, sp
   1ff3e:	f7f3 f9fb 	bl	13338 <bt_encrypt_le>

	err = internal_encrypt_le(irk, res, res);
	if (err) {
   1ff42:	4604      	mov	r4, r0
   1ff44:	b920      	cbnz	r0, 1ff50 <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
   1ff46:	2203      	movs	r2, #3
   1ff48:	4669      	mov	r1, sp
   1ff4a:	4628      	mov	r0, r5
   1ff4c:	f7ff ff93 	bl	1fe76 <memcpy>

	return 0;
}
   1ff50:	4620      	mov	r0, r4
   1ff52:	b005      	add	sp, #20
   1ff54:	bd30      	pop	{r4, r5, pc}

0001ff56 <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   1ff56:	b513      	push	{r0, r1, r4, lr}
   1ff58:	460c      	mov	r4, r1
	uint8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
   1ff5a:	aa01      	add	r2, sp, #4
   1ff5c:	3103      	adds	r1, #3
   1ff5e:	f7ff ffdd 	bl	1ff1c <ah>
	if (err) {
   1ff62:	b948      	cbnz	r0, 1ff78 <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
   1ff64:	2203      	movs	r2, #3
   1ff66:	a901      	add	r1, sp, #4
   1ff68:	4620      	mov	r0, r4
   1ff6a:	f7ff ff74 	bl	1fe56 <memcmp>
   1ff6e:	fab0 f080 	clz	r0, r0
   1ff72:	0940      	lsrs	r0, r0, #5
}
   1ff74:	b002      	add	sp, #8
   1ff76:	bd10      	pop	{r4, pc}
		return false;
   1ff78:	2000      	movs	r0, #0
   1ff7a:	e7fb      	b.n	1ff74 <bt_rpa_irk_matches+0x1e>

0001ff7c <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const uint8_t irk[16], bt_addr_t *rpa)
{
   1ff7c:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = internal_rand(rpa->val + 3, 3);
   1ff7e:	1cce      	adds	r6, r1, #3
{
   1ff80:	4605      	mov	r5, r0
   1ff82:	460c      	mov	r4, r1
	return bt_rand(buf, len);
   1ff84:	4630      	mov	r0, r6
   1ff86:	2103      	movs	r1, #3
   1ff88:	f7f3 f9d4 	bl	13334 <bt_rand>
	if (err) {
   1ff8c:	b960      	cbnz	r0, 1ffa8 <bt_rpa_create+0x2c>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
   1ff8e:	7963      	ldrb	r3, [r4, #5]
   1ff90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1ff94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1ff98:	7163      	strb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
   1ff9a:	4622      	mov	r2, r4
   1ff9c:	4631      	mov	r1, r6
   1ff9e:	4628      	mov	r0, r5
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
   1ffa0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = ah(irk, rpa->val + 3, rpa->val);
   1ffa4:	f7ff bfba 	b.w	1ff1c <ah>
}
   1ffa8:	bd70      	pop	{r4, r5, r6, pc}

0001ffaa <send_cmd_status>:
{
   1ffaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   1ffae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   1ffb2:	4606      	mov	r6, r0
   1ffb4:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   1ffb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ffba:	2100      	movs	r1, #0
   1ffbc:	200f      	movs	r0, #15
   1ffbe:	f7ea f9b3 	bl	a328 <bt_buf_get_evt>
	*(uint8_t *)net_buf_user_data(buf) = type;
   1ffc2:	2701      	movs	r7, #1
	hdr = net_buf_add(buf, sizeof(*hdr));
   1ffc4:	f100 0808 	add.w	r8, r0, #8
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   1ffc8:	4604      	mov	r4, r0
   1ffca:	7507      	strb	r7, [r0, #20]
	hdr = net_buf_add(buf, sizeof(*hdr));
   1ffcc:	2102      	movs	r1, #2
   1ffce:	4640      	mov	r0, r8
   1ffd0:	f002 fae2 	bl	22598 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1ffd4:	230f      	movs	r3, #15
	hdr->len = sizeof(*evt);
   1ffd6:	2104      	movs	r1, #4
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1ffd8:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*evt);
   1ffda:	7041      	strb	r1, [r0, #1]
	evt = net_buf_add(buf, sizeof(*evt));
   1ffdc:	4640      	mov	r0, r8
   1ffde:	f002 fadb 	bl	22598 <net_buf_simple_add>
	evt->ncmd = 1U;
   1ffe2:	7047      	strb	r7, [r0, #1]
	evt->status = status;
   1ffe4:	7005      	strb	r5, [r0, #0]
	evt->opcode = sys_cpu_to_le16(opcode);
   1ffe6:	8046      	strh	r6, [r0, #2]
	bt_recv_prio(buf);
   1ffe8:	4620      	mov	r0, r4
}
   1ffea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_recv_prio(buf);
   1ffee:	f7e9 be69 	b.w	9cc4 <bt_recv_prio>

0001fff2 <sys_memcpy_swap.constprop.0>:
	for (; length > 0; length--) {
   1fff2:	f101 0320 	add.w	r3, r1, #32
   1fff6:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   1fff8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   1fffc:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   20000:	428b      	cmp	r3, r1
   20002:	d1f9      	bne.n	1fff8 <sys_memcpy_swap.constprop.0+0x6>
}
   20004:	4770      	bx	lr

00020006 <default_CSPRNG>:
{
   20006:	b508      	push	{r3, lr}
	return !bt_rand(dst, len);
   20008:	f7f3 f994 	bl	13334 <bt_rand>
}
   2000c:	fab0 f080 	clz	r0, r0
   20010:	0940      	lsrs	r0, r0, #5
   20012:	bd08      	pop	{r3, pc}

00020014 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   20014:	b510      	push	{r4, lr}
   20016:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   20018:	7801      	ldrb	r1, [r0, #0]
   2001a:	7822      	ldrb	r2, [r4, #0]
   2001c:	428a      	cmp	r2, r1
{
   2001e:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   20020:	d00e      	beq.n	20040 <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
   20022:	4669      	mov	r1, sp
   20024:	f7e8 f8b4 	bl	8190 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   20028:	a905      	add	r1, sp, #20
   2002a:	4620      	mov	r0, r4
   2002c:	f7e8 f8b0 	bl	8190 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   20030:	2210      	movs	r2, #16
   20032:	f10d 0115 	add.w	r1, sp, #21
   20036:	f10d 0001 	add.w	r0, sp, #1
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   2003a:	f7ff ff0c 	bl	1fe56 <memcmp>
   2003e:	e007      	b.n	20050 <bt_uuid_cmp+0x3c>
	switch (u1->type) {
   20040:	2a01      	cmp	r2, #1
   20042:	d007      	beq.n	20054 <bt_uuid_cmp+0x40>
   20044:	2a02      	cmp	r2, #2
   20046:	d008      	beq.n	2005a <bt_uuid_cmp+0x46>
   20048:	b95a      	cbnz	r2, 20062 <bt_uuid_cmp+0x4e>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   2004a:	8840      	ldrh	r0, [r0, #2]
   2004c:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   2004e:	1ac0      	subs	r0, r0, r3
	}

	return -EINVAL;
}
   20050:	b00a      	add	sp, #40	; 0x28
   20052:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   20054:	6840      	ldr	r0, [r0, #4]
   20056:	6863      	ldr	r3, [r4, #4]
   20058:	e7f9      	b.n	2004e <bt_uuid_cmp+0x3a>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   2005a:	2210      	movs	r2, #16
   2005c:	1c61      	adds	r1, r4, #1
   2005e:	3001      	adds	r0, #1
   20060:	e7eb      	b.n	2003a <bt_uuid_cmp+0x26>
	switch (u1->type) {
   20062:	f06f 0015 	mvn.w	r0, #21
   20066:	e7f3      	b.n	20050 <bt_uuid_cmp+0x3c>

00020068 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   20068:	2a04      	cmp	r2, #4
{
   2006a:	b538      	push	{r3, r4, r5, lr}
   2006c:	460c      	mov	r4, r1
	switch (data_len) {
   2006e:	d00d      	beq.n	2008c <bt_uuid_create+0x24>
   20070:	2a10      	cmp	r2, #16
   20072:	d019      	beq.n	200a8 <bt_uuid_create+0x40>
   20074:	2a02      	cmp	r2, #2
   20076:	f04f 0300 	mov.w	r3, #0
   2007a:	d11b      	bne.n	200b4 <bt_uuid_create+0x4c>
	case 2:
		uuid->type = BT_UUID_TYPE_16;
   2007c:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   2007e:	784a      	ldrb	r2, [r1, #1]
   20080:	780b      	ldrb	r3, [r1, #0]
   20082:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   20086:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   20088:	2001      	movs	r0, #1
}
   2008a:	bd38      	pop	{r3, r4, r5, pc}
		uuid->type = BT_UUID_TYPE_32;
   2008c:	2301      	movs	r3, #1
   2008e:	7003      	strb	r3, [r0, #0]
   20090:	78a2      	ldrb	r2, [r4, #2]
   20092:	78c9      	ldrb	r1, [r1, #3]
   20094:	7865      	ldrb	r5, [r4, #1]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   20096:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
	return ((uint16_t)src[1] << 8) | src[0];
   2009a:	7822      	ldrb	r2, [r4, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   2009c:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
   200a0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   200a4:	6042      	str	r2, [r0, #4]
		break;
   200a6:	e7ef      	b.n	20088 <bt_uuid_create+0x20>
		uuid->type = BT_UUID_TYPE_128;
   200a8:	2302      	movs	r3, #2
   200aa:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   200ae:	f7ff fee2 	bl	1fe76 <memcpy>
		break;
   200b2:	e7e9      	b.n	20088 <bt_uuid_create+0x20>
	switch (data_len) {
   200b4:	4618      	mov	r0, r3
   200b6:	e7e8      	b.n	2008a <bt_uuid_create+0x22>

000200b8 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   200b8:	f3bf 8f5b 	dmb	ish
   200bc:	6800      	ldr	r0, [r0, #0]
   200be:	f3bf 8f5b 	dmb	ish
}
   200c2:	4770      	bx	lr

000200c4 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   200c4:	2207      	movs	r2, #7
   200c6:	f7ff bed6 	b.w	1fe76 <memcpy>

000200ca <atomic_and>:
{
   200ca:	4603      	mov	r3, r0
}
   200cc:	f3bf 8f5b 	dmb	ish
   200d0:	e853 0f00 	ldrex	r0, [r3]
   200d4:	ea00 0201 	and.w	r2, r0, r1
   200d8:	e843 2c00 	strex	ip, r2, [r3]
   200dc:	f1bc 0f00 	cmp.w	ip, #0
   200e0:	d1f6      	bne.n	200d0 <atomic_and+0x6>
   200e2:	f3bf 8f5b 	dmb	ish
   200e6:	4770      	bx	lr

000200e8 <atomic_or>:
{
   200e8:	4603      	mov	r3, r0
}
   200ea:	f3bf 8f5b 	dmb	ish
   200ee:	e853 0f00 	ldrex	r0, [r3]
   200f2:	ea40 0201 	orr.w	r2, r0, r1
   200f6:	e843 2c00 	strex	ip, r2, [r3]
   200fa:	f1bc 0f00 	cmp.w	ip, #0
   200fe:	d1f6      	bne.n	200ee <atomic_or+0x6>
   20100:	f3bf 8f5b 	dmb	ish
   20104:	4770      	bx	lr

00020106 <atomic_set_bit_to>:
{
   20106:	460b      	mov	r3, r1
   20108:	b410      	push	{r4}
   2010a:	095b      	lsrs	r3, r3, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
   2010c:	f001 041f 	and.w	r4, r1, #31
   20110:	2101      	movs	r1, #1
   20112:	40a1      	lsls	r1, r4
	if (val) {
   20114:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   20118:	b112      	cbz	r2, 20120 <atomic_set_bit_to+0x1a>
	}
}
   2011a:	bc10      	pop	{r4}
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2011c:	f7ff bfe4 	b.w	200e8 <atomic_or>
}
   20120:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   20122:	43c9      	mvns	r1, r1
   20124:	f7ff bfd1 	b.w	200ca <atomic_and>

00020128 <atomic_test_and_set_bit>:
{
   20128:	b508      	push	{r3, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   2012a:	2301      	movs	r3, #1
   2012c:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   20130:	f7ff ffda 	bl	200e8 <atomic_or>
	return (old & mask) != 0;
   20134:	4201      	tst	r1, r0
}
   20136:	bf14      	ite	ne
   20138:	2001      	movne	r0, #1
   2013a:	2000      	moveq	r0, #0
   2013c:	bd08      	pop	{r3, pc}

0002013e <sys_put_le64>:
	dst[1] = val >> 8;
   2013e:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   20142:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   20144:	0e00      	lsrs	r0, r0, #24
   20146:	7053      	strb	r3, [r2, #1]
   20148:	70d0      	strb	r0, [r2, #3]
	dst[0] = val;
   2014a:	2300      	movs	r3, #0
	dst[1] = val >> 8;
   2014c:	f3c1 2007 	ubfx	r0, r1, #8, #8
   20150:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   20152:	7093      	strb	r3, [r2, #2]
   20154:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   20156:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   20158:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   2015a:	71d1      	strb	r1, [r2, #7]
}
   2015c:	4770      	bx	lr

0002015e <le_adv_set_private_addr.isra.0>:
static int le_set_private_addr(uint8_t id)
   2015e:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   20160:	2106      	movs	r1, #6
   20162:	4668      	mov	r0, sp
   20164:	f7f3 f8e6 	bl	13334 <bt_rand>
	if (err) {
   20168:	b940      	cbnz	r0, 2017c <le_adv_set_private_addr.isra.0+0x1e>
	nrpa.val[5] &= 0x3f;
   2016a:	f89d 3005 	ldrb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
   2016e:	4668      	mov	r0, sp
	nrpa.val[5] &= 0x3f;
   20170:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   20174:	f88d 3005 	strb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
   20178:	f7e8 fe5e 	bl	8e38 <set_random_address>
}
   2017c:	b003      	add	sp, #12
   2017e:	f85d fb04 	ldr.w	pc, [sp], #4

00020182 <adv_pause_enabled>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   20182:	f100 0314 	add.w	r3, r0, #20
{
   20186:	b510      	push	{r4, lr}
   20188:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2018a:	4618      	mov	r0, r3
   2018c:	f7ff ff94 	bl	200b8 <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   20190:	0642      	lsls	r2, r0, #25
   20192:	d50a      	bpl.n	201aa <adv_pause_enabled+0x28>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   20194:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   20198:	4618      	mov	r0, r3
   2019a:	f7ff ffa5 	bl	200e8 <atomic_or>
	return set_le_adv_enable_legacy(adv, enable);
   2019e:	4620      	mov	r0, r4
   201a0:	2100      	movs	r1, #0
}
   201a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return set_le_adv_enable_legacy(adv, enable);
   201a6:	f7e8 be87 	b.w	8eb8 <set_le_adv_enable_legacy>
}
   201aa:	bd10      	pop	{r4, pc}

000201ac <adv_unpause_enabled>:
{
   201ac:	b510      	push	{r4, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   201ae:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   201b2:	4604      	mov	r4, r0
   201b4:	3014      	adds	r0, #20
   201b6:	f7ff ff88 	bl	200ca <atomic_and>
	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_PAUSED)) {
   201ba:	04c3      	lsls	r3, r0, #19
   201bc:	d505      	bpl.n	201ca <adv_unpause_enabled+0x1e>
	return set_le_adv_enable_legacy(adv, enable);
   201be:	4620      	mov	r0, r4
   201c0:	2101      	movs	r1, #1
}
   201c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return set_le_adv_enable_legacy(adv, enable);
   201c6:	f7e8 be77 	b.w	8eb8 <set_le_adv_enable_legacy>
}
   201ca:	bd10      	pop	{r4, pc}

000201cc <hci_id_add.isra.0>:
static int hci_id_add(uint8_t id, const bt_addr_le_t *addr, uint8_t peer_irk[16])
   201cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   201ce:	4607      	mov	r7, r0
   201d0:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   201d2:	f242 0027 	movw	r0, #8231	; 0x2027
   201d6:	2127      	movs	r1, #39	; 0x27
   201d8:	f7e8 fc30 	bl	8a3c <bt_hci_cmd_create>
	if (!buf) {
   201dc:	4604      	mov	r4, r0
   201de:	b1d0      	cbz	r0, 20216 <hci_id_add.isra.0+0x4a>
	cp = net_buf_add(buf, sizeof(*cp));
   201e0:	2127      	movs	r1, #39	; 0x27
   201e2:	3008      	adds	r0, #8
   201e4:	f002 f9d8 	bl	22598 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   201e8:	4639      	mov	r1, r7
	cp = net_buf_add(buf, sizeof(*cp));
   201ea:	4605      	mov	r5, r0
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   201ec:	f7ff ff6a 	bl	200c4 <bt_addr_le_copy>
	memcpy(cp->peer_irk, peer_irk, 16);
   201f0:	4631      	mov	r1, r6
   201f2:	2210      	movs	r2, #16
   201f4:	1de8      	adds	r0, r5, #7
   201f6:	f7ff fe3e 	bl	1fe76 <memcpy>
	(void)memset(cp->local_irk, 0, 16);
   201fa:	2210      	movs	r2, #16
   201fc:	2100      	movs	r1, #0
   201fe:	f105 0017 	add.w	r0, r5, #23
   20202:	f7ff fe63 	bl	1fecc <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   20206:	4621      	mov	r1, r4
   20208:	2200      	movs	r2, #0
}
   2020a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   2020e:	f242 0027 	movw	r0, #8231	; 0x2027
   20212:	f7e8 bd6f 	b.w	8cf4 <bt_hci_cmd_send_sync>
}
   20216:	f06f 0036 	mvn.w	r0, #54	; 0x36
   2021a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002021c <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
   2021c:	7a03      	ldrb	r3, [r0, #8]
   2021e:	075b      	lsls	r3, r3, #29
   20220:	d504      	bpl.n	2022c <keys_add_id+0x10>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   20222:	f100 012a 	add.w	r1, r0, #42	; 0x2a
   20226:	3001      	adds	r0, #1
   20228:	f7ff bfd0 	b.w	201cc <hci_id_add.isra.0>
}
   2022c:	4770      	bx	lr

0002022e <addr_res_enable>:
{
   2022e:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   20230:	2101      	movs	r1, #1
{
   20232:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   20234:	f242 002d 	movw	r0, #8237	; 0x202d
   20238:	f7e8 fc00 	bl	8a3c <bt_hci_cmd_create>
	if (!buf) {
   2023c:	4604      	mov	r4, r0
   2023e:	b158      	cbz	r0, 20258 <addr_res_enable+0x2a>
	net_buf_add_u8(buf, enable);
   20240:	4629      	mov	r1, r5
   20242:	3008      	adds	r0, #8
   20244:	f002 f9b7 	bl	225b6 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   20248:	4621      	mov	r1, r4
   2024a:	2200      	movs	r2, #0
}
   2024c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   20250:	f242 002d 	movw	r0, #8237	; 0x202d
   20254:	f7e8 bd4e 	b.w	8cf4 <bt_hci_cmd_send_sync>
}
   20258:	f06f 0036 	mvn.w	r0, #54	; 0x36
   2025c:	bd38      	pop	{r3, r4, r5, pc}

0002025e <set_le_scan_enable>:
	return set_le_scan_enable_legacy(enable);
   2025e:	f7e8 be59 	b.w	8f14 <set_le_scan_enable_legacy>

00020262 <bt_lookup_id_addr>:
{
   20262:	b510      	push	{r4, lr}
   20264:	460c      	mov	r4, r1
		keys = bt_keys_find_irk(id, addr);
   20266:	f7ef fe61 	bl	ff2c <bt_keys_find_irk>
		if (keys) {
   2026a:	b100      	cbz	r0, 2026e <bt_lookup_id_addr+0xc>
			return &keys->addr;
   2026c:	1c44      	adds	r4, r0, #1
}
   2026e:	4620      	mov	r0, r4
   20270:	bd10      	pop	{r4, pc}

00020272 <bt_le_scan_random_addr_check>:
}
   20272:	2001      	movs	r0, #1
   20274:	4770      	bx	lr

00020276 <bt_le_create_conn>:
	return bt_le_create_conn_legacy(conn);
   20276:	f7e8 bed5 	b.w	9024 <bt_le_create_conn_legacy>

0002027a <bt_hci_disconnect>:
{
   2027a:	b570      	push	{r4, r5, r6, lr}
   2027c:	4606      	mov	r6, r0
   2027e:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   20280:	f240 4006 	movw	r0, #1030	; 0x406
   20284:	2103      	movs	r1, #3
   20286:	f7e8 fbd9 	bl	8a3c <bt_hci_cmd_create>
	if (!buf) {
   2028a:	4604      	mov	r4, r0
   2028c:	b160      	cbz	r0, 202a8 <bt_hci_disconnect+0x2e>
	disconn = net_buf_add(buf, sizeof(*disconn));
   2028e:	2103      	movs	r1, #3
   20290:	3008      	adds	r0, #8
   20292:	f002 f981 	bl	22598 <net_buf_simple_add>
	disconn->reason = reason;
   20296:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   20298:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send(BT_HCI_OP_DISCONNECT, buf);
   2029a:	4621      	mov	r1, r4
   2029c:	f240 4006 	movw	r0, #1030	; 0x406
}
   202a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send(BT_HCI_OP_DISCONNECT, buf);
   202a4:	f7e8 bc02 	b.w	8aac <bt_hci_cmd_send>
}
   202a8:	f06f 0036 	mvn.w	r0, #54	; 0x36
   202ac:	bd70      	pop	{r4, r5, r6, pc}

000202ae <bt_le_set_data_len>:
{
   202ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   202b0:	4607      	mov	r7, r0
   202b2:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   202b4:	f242 0022 	movw	r0, #8226	; 0x2022
   202b8:	2106      	movs	r1, #6
{
   202ba:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   202bc:	f7e8 fbbe 	bl	8a3c <bt_hci_cmd_create>
	if (!buf) {
   202c0:	4604      	mov	r4, r0
   202c2:	b170      	cbz	r0, 202e2 <bt_le_set_data_len+0x34>
	cp = net_buf_add(buf, sizeof(*cp));
   202c4:	2106      	movs	r1, #6
   202c6:	3008      	adds	r0, #8
   202c8:	f002 f966 	bl	22598 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   202cc:	883b      	ldrh	r3, [r7, #0]
   202ce:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   202d0:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   202d2:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   202d4:	4621      	mov	r1, r4
   202d6:	f242 0022 	movw	r0, #8226	; 0x2022
}
   202da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   202de:	f7e8 bbe5 	b.w	8aac <bt_hci_cmd_send>
}
   202e2:	f06f 0036 	mvn.w	r0, #54	; 0x36
   202e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000202e8 <bt_le_set_phy>:
{
   202e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   202ec:	4680      	mov	r8, r0
   202ee:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   202f0:	f242 0032 	movw	r0, #8242	; 0x2032
   202f4:	2107      	movs	r1, #7
{
   202f6:	f89d 9020 	ldrb.w	r9, [sp, #32]
   202fa:	4616      	mov	r6, r2
   202fc:	461d      	mov	r5, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   202fe:	f7e8 fb9d 	bl	8a3c <bt_hci_cmd_create>
	if (!buf) {
   20302:	4604      	mov	r4, r0
   20304:	b190      	cbz	r0, 2032c <bt_le_set_phy+0x44>
	cp = net_buf_add(buf, sizeof(*cp));
   20306:	2107      	movs	r1, #7
   20308:	3008      	adds	r0, #8
   2030a:	f002 f945 	bl	22598 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   2030e:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   20312:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   20314:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   20316:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   20318:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   2031a:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   2031e:	4621      	mov	r1, r4
   20320:	f242 0032 	movw	r0, #8242	; 0x2032
}
   20324:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   20328:	f7e8 bbc0 	b.w	8aac <bt_hci_cmd_send>
}
   2032c:	f06f 0036 	mvn.w	r0, #54	; 0x36
   20330:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00020334 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   20334:	8802      	ldrh	r2, [r0, #0]
   20336:	8843      	ldrh	r3, [r0, #2]
   20338:	429a      	cmp	r2, r3
{
   2033a:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   2033c:	d818      	bhi.n	20370 <bt_le_conn_params_valid+0x3c>
   2033e:	2a05      	cmp	r2, #5
   20340:	d916      	bls.n	20370 <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
   20342:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   20346:	d813      	bhi.n	20370 <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
   20348:	8884      	ldrh	r4, [r0, #4]
   2034a:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   2034e:	d20f      	bcs.n	20370 <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
   20350:	88c1      	ldrh	r1, [r0, #6]
   20352:	f1a1 020a 	sub.w	r2, r1, #10
   20356:	b292      	uxth	r2, r2
   20358:	f640 4076 	movw	r0, #3190	; 0xc76
   2035c:	4282      	cmp	r2, r0
   2035e:	d807      	bhi.n	20370 <bt_le_conn_params_valid+0x3c>
	     ((1U + param->latency) * param->interval_max))) {
   20360:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
   20364:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
   20368:	bf34      	ite	cc
   2036a:	2001      	movcc	r0, #1
   2036c:	2000      	movcs	r0, #0
}
   2036e:	bd10      	pop	{r4, pc}
		return false;
   20370:	2000      	movs	r0, #0
   20372:	e7fc      	b.n	2036e <bt_le_conn_params_valid+0x3a>

00020374 <pending_id_update>:
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   20374:	7a03      	ldrb	r3, [r0, #8]
   20376:	07d9      	lsls	r1, r3, #31
   20378:	d504      	bpl.n	20384 <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   2037a:	f023 0301 	bic.w	r3, r3, #1
   2037e:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   20380:	f7e8 bfb6 	b.w	92f0 <bt_id_add>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   20384:	0799      	lsls	r1, r3, #30
   20386:	d504      	bpl.n	20392 <pending_id_update+0x1e>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   20388:	f023 0302 	bic.w	r3, r3, #2
   2038c:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   2038e:	f7e9 b88d 	b.w	94ac <bt_id_del>
}
   20392:	4770      	bx	lr

00020394 <le_enh_conn_complete>:
	enh_conn_complete((void *)buf->data);
   20394:	6880      	ldr	r0, [r0, #8]
   20396:	f7e9 baa9 	b.w	98ec <enh_conn_complete>

0002039a <le_legacy_conn_complete>:
{
   2039a:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   2039c:	6881      	ldr	r1, [r0, #8]
{
   2039e:	b08a      	sub	sp, #40	; 0x28
	enh.status         = evt->status;
   203a0:	780b      	ldrb	r3, [r1, #0]
   203a2:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   203a6:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   203aa:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   203ae:	78cb      	ldrb	r3, [r1, #3]
   203b0:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   203b4:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   203b8:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   203bc:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   203c0:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   203c4:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   203c8:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   203cc:	7c4b      	ldrb	r3, [r1, #17]
   203ce:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   203d2:	a803      	add	r0, sp, #12
   203d4:	3104      	adds	r1, #4
   203d6:	f7ff fe75 	bl	200c4 <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   203da:	2400      	movs	r4, #0
	memcpy(dst, src, sizeof(*dst));
   203dc:	4669      	mov	r1, sp
   203de:	2206      	movs	r2, #6
   203e0:	f10d 0013 	add.w	r0, sp, #19
   203e4:	9400      	str	r4, [sp, #0]
   203e6:	f8ad 4004 	strh.w	r4, [sp, #4]
   203ea:	f7ff fd44 	bl	1fe76 <memcpy>
   203ee:	2206      	movs	r2, #6
   203f0:	4669      	mov	r1, sp
   203f2:	f10d 0019 	add.w	r0, sp, #25
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   203f6:	9400      	str	r4, [sp, #0]
   203f8:	f8ad 4004 	strh.w	r4, [sp, #4]
   203fc:	f7ff fd3b 	bl	1fe76 <memcpy>
	enh_conn_complete(&enh);
   20400:	a802      	add	r0, sp, #8
   20402:	f7e9 fa73 	bl	98ec <enh_conn_complete>
}
   20406:	b00a      	add	sp, #40	; 0x28
   20408:	bd10      	pop	{r4, pc}

0002040a <bt_addr_le_create_static>:
	addr->type = BT_ADDR_LE_RANDOM;
   2040a:	2301      	movs	r3, #1
{
   2040c:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   2040e:	2106      	movs	r1, #6
{
   20410:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   20412:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   20416:	f7f2 ff8d 	bl	13334 <bt_rand>
	if (err) {
   2041a:	b918      	cbnz	r0, 20424 <bt_addr_le_create_static+0x1a>
	BT_ADDR_SET_STATIC(&addr->a);
   2041c:	79a3      	ldrb	r3, [r4, #6]
   2041e:	f063 033f 	orn	r3, r3, #63	; 0x3f
   20422:	71a3      	strb	r3, [r4, #6]
}
   20424:	bd10      	pop	{r4, pc}

00020426 <bt_send>:
		return bt_hci_ecc_send(buf);
   20426:	f7e7 be07 	b.w	8038 <bt_hci_ecc_send>

0002042a <bt_addr_le_is_bonded>:
{
   2042a:	b508      	push	{r3, lr}
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   2042c:	f7ef fdb8 	bl	ffa0 <bt_keys_find_addr>
		return keys && keys->keys;
   20430:	b118      	cbz	r0, 2043a <bt_addr_le_is_bonded+0x10>
   20432:	89c0      	ldrh	r0, [r0, #14]
   20434:	3800      	subs	r0, #0
   20436:	bf18      	it	ne
   20438:	2001      	movne	r0, #1
}
   2043a:	bd08      	pop	{r3, pc}

0002043c <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2043c:	f3bf 8f5b 	dmb	ish
   20440:	6800      	ldr	r0, [r0, #0]
   20442:	f3bf 8f5b 	dmb	ish
}
   20446:	4770      	bx	lr

00020448 <bt_conn_reset_rx_state>:
	if (!conn->rx_len) {
   20448:	89c3      	ldrh	r3, [r0, #14]
{
   2044a:	b510      	push	{r4, lr}
   2044c:	4604      	mov	r4, r0
	if (!conn->rx_len) {
   2044e:	b12b      	cbz	r3, 2045c <bt_conn_reset_rx_state+0x14>
	net_buf_unref(conn->rx);
   20450:	6900      	ldr	r0, [r0, #16]
   20452:	f7fb fb45 	bl	1bae0 <net_buf_unref>
	conn->rx = NULL;
   20456:	2300      	movs	r3, #0
   20458:	6123      	str	r3, [r4, #16]
	conn->rx_len = 0U;
   2045a:	81e3      	strh	r3, [r4, #14]
}
   2045c:	bd10      	pop	{r4, pc}

0002045e <atomic_dec>:
{
   2045e:	4603      	mov	r3, r0
}
   20460:	f3bf 8f5b 	dmb	ish
   20464:	e853 0f00 	ldrex	r0, [r3]
   20468:	1e42      	subs	r2, r0, #1
   2046a:	e843 2100 	strex	r1, r2, [r3]
   2046e:	2900      	cmp	r1, #0
   20470:	d1f8      	bne.n	20464 <atomic_dec+0x6>
   20472:	f3bf 8f5b 	dmb	ish
   20476:	4770      	bx	lr

00020478 <atomic_inc>:
{
   20478:	4603      	mov	r3, r0
}
   2047a:	f3bf 8f5b 	dmb	ish
   2047e:	e853 0f00 	ldrex	r0, [r3]
   20482:	1c42      	adds	r2, r0, #1
   20484:	e843 2100 	strex	r1, r2, [r3]
   20488:	2900      	cmp	r1, #0
   2048a:	d1f8      	bne.n	2047e <atomic_inc+0x6>
   2048c:	f3bf 8f5b 	dmb	ish
   20490:	4770      	bx	lr

00020492 <tx_notify>:
{
   20492:	b570      	push	{r4, r5, r6, lr}
   20494:	4604      	mov	r4, r0
	__asm__ volatile(
   20496:	f04f 0220 	mov.w	r2, #32
   2049a:	f3ef 8311 	mrs	r3, BASEPRI
   2049e:	f382 8811 	msr	BASEPRI, r2
   204a2:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   204a6:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   204a8:	b920      	cbnz	r0, 204b4 <tx_notify+0x22>
	__asm__ volatile(
   204aa:	f383 8811 	msr	BASEPRI, r3
   204ae:	f3bf 8f6f 	isb	sy
}
   204b2:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   204b4:	6a61      	ldr	r1, [r4, #36]	; 0x24
   204b6:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   204b8:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   204ba:	4288      	cmp	r0, r1
	list->tail = node;
   204bc:	bf08      	it	eq
   204be:	6262      	streq	r2, [r4, #36]	; 0x24
   204c0:	f383 8811 	msr	BASEPRI, r3
   204c4:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   204c8:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   204cc:	f7e9 ffee 	bl	a4ac <tx_free>
		cb(conn, user_data);
   204d0:	4631      	mov	r1, r6
   204d2:	4620      	mov	r0, r4
   204d4:	47a8      	blx	r5
	while (1) {
   204d6:	e7de      	b.n	20496 <tx_notify+0x4>

000204d8 <tx_complete_work>:
	tx_notify(conn);
   204d8:	3828      	subs	r0, #40	; 0x28
   204da:	f7ff bfda 	b.w	20492 <tx_notify>

000204de <bt_conn_le_start_encryption>:
{
   204de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   204e2:	4682      	mov	sl, r0
   204e4:	4689      	mov	r9, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_START_ENCRYPTION, sizeof(*cp));
   204e6:	f242 0019 	movw	r0, #8217	; 0x2019
   204ea:	211c      	movs	r1, #28
{
   204ec:	9e08      	ldr	r6, [sp, #32]
   204ee:	4690      	mov	r8, r2
   204f0:	461f      	mov	r7, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_START_ENCRYPTION, sizeof(*cp));
   204f2:	f7e8 faa3 	bl	8a3c <bt_hci_cmd_create>
	if (!buf) {
   204f6:	4605      	mov	r5, r0
   204f8:	b340      	cbz	r0, 2054c <bt_conn_le_start_encryption+0x6e>
	cp = net_buf_add(buf, sizeof(*cp));
   204fa:	211c      	movs	r1, #28
   204fc:	3008      	adds	r0, #8
   204fe:	f002 f84b 	bl	22598 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   20502:	f8ba 3000 	ldrh.w	r3, [sl]
	cp = net_buf_add(buf, sizeof(*cp));
   20506:	4604      	mov	r4, r0
	memcpy(&cp->rand, rand, sizeof(cp->rand));
   20508:	2208      	movs	r2, #8
	cp->handle = sys_cpu_to_le16(conn->handle);
   2050a:	f820 3b02 	strh.w	r3, [r0], #2
	memcpy(&cp->rand, rand, sizeof(cp->rand));
   2050e:	4649      	mov	r1, r9
   20510:	f7ff fcb1 	bl	1fe76 <memcpy>
	memcpy(&cp->ediv, ediv, sizeof(cp->ediv));
   20514:	2202      	movs	r2, #2
   20516:	4641      	mov	r1, r8
   20518:	f104 000a 	add.w	r0, r4, #10
	memcpy(cp->ltk, ltk, len);
   2051c:	340c      	adds	r4, #12
	memcpy(&cp->ediv, ediv, sizeof(cp->ediv));
   2051e:	f7ff fcaa 	bl	1fe76 <memcpy>
	memcpy(cp->ltk, ltk, len);
   20522:	4632      	mov	r2, r6
   20524:	4639      	mov	r1, r7
   20526:	4620      	mov	r0, r4
   20528:	f7ff fca5 	bl	1fe76 <memcpy>
	if (len < sizeof(cp->ltk)) {
   2052c:	2e0f      	cmp	r6, #15
   2052e:	d805      	bhi.n	2053c <bt_conn_le_start_encryption+0x5e>
		(void)memset(cp->ltk + len, 0, sizeof(cp->ltk) - len);
   20530:	f1c6 0210 	rsb	r2, r6, #16
   20534:	2100      	movs	r1, #0
   20536:	19a0      	adds	r0, r4, r6
   20538:	f7ff fcc8 	bl	1fecc <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_START_ENCRYPTION, buf, NULL);
   2053c:	4629      	mov	r1, r5
   2053e:	2200      	movs	r2, #0
}
   20540:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_START_ENCRYPTION, buf, NULL);
   20544:	f242 0019 	movw	r0, #8217	; 0x2019
   20548:	f7e8 bbd4 	b.w	8cf4 <bt_hci_cmd_send_sync>
}
   2054c:	f06f 0036 	mvn.w	r0, #54	; 0x36
   20550:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00020554 <bt_conn_set_security>:
{
   20554:	b510      	push	{r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   20556:	7b43      	ldrb	r3, [r0, #13]
   20558:	2b06      	cmp	r3, #6
{
   2055a:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   2055c:	d128      	bne.n	205b0 <bt_conn_set_security+0x5c>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   2055e:	7a43      	ldrb	r3, [r0, #9]
   20560:	428b      	cmp	r3, r1
   20562:	d228      	bcs.n	205b6 <bt_conn_set_security+0x62>
   20564:	7a83      	ldrb	r3, [r0, #10]
   20566:	428b      	cmp	r3, r1
   20568:	d225      	bcs.n	205b6 <bt_conn_set_security+0x62>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2056a:	f3bf 8f5b 	dmb	ish
	if (val) {
   2056e:	060a      	lsls	r2, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   20570:	f100 0304 	add.w	r3, r0, #4
   20574:	d513      	bpl.n	2059e <bt_conn_set_security+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   20576:	e853 2f00 	ldrex	r2, [r3]
   2057a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   2057e:	e843 2000 	strex	r0, r2, [r3]
   20582:	2800      	cmp	r0, #0
   20584:	d1f7      	bne.n	20576 <bt_conn_set_security+0x22>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   20586:	f3bf 8f5b 	dmb	ish
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   2058a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
   2058e:	72a1      	strb	r1, [r4, #10]
		return bt_smp_start_security(conn);
   20590:	4620      	mov	r0, r4
   20592:	f001 ff0f 	bl	223b4 <bt_smp_start_security>
	if (err) {
   20596:	b108      	cbz	r0, 2059c <bt_conn_set_security+0x48>
		conn->required_sec_level = conn->sec_level;
   20598:	7a63      	ldrb	r3, [r4, #9]
   2059a:	72a3      	strb	r3, [r4, #10]
}
   2059c:	bd10      	pop	{r4, pc}
   2059e:	e853 2f00 	ldrex	r2, [r3]
   205a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   205a6:	e843 2000 	strex	r0, r2, [r3]
   205aa:	2800      	cmp	r0, #0
   205ac:	d0eb      	beq.n	20586 <bt_conn_set_security+0x32>
   205ae:	e7f6      	b.n	2059e <bt_conn_set_security+0x4a>
		return -ENOTCONN;
   205b0:	f06f 0038 	mvn.w	r0, #56	; 0x38
   205b4:	e7f2      	b.n	2059c <bt_conn_set_security+0x48>
		return 0;
   205b6:	2000      	movs	r0, #0
   205b8:	e7f0      	b.n	2059c <bt_conn_set_security+0x48>

000205ba <bt_conn_get_security>:
}
   205ba:	7a40      	ldrb	r0, [r0, #9]
   205bc:	4770      	bx	lr

000205be <bt_conn_is_peer_addr_le>:
{
   205be:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   205c0:	7a03      	ldrb	r3, [r0, #8]
   205c2:	428b      	cmp	r3, r1
{
   205c4:	4604      	mov	r4, r0
   205c6:	4615      	mov	r5, r2
	if (id != conn->id) {
   205c8:	d115      	bne.n	205f6 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   205ca:	f100 0188 	add.w	r1, r0, #136	; 0x88
   205ce:	2207      	movs	r2, #7
   205d0:	4628      	mov	r0, r5
   205d2:	f7ff fc40 	bl	1fe56 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   205d6:	b180      	cbz	r0, 205fa <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_MASTER) {
   205d8:	78e3      	ldrb	r3, [r4, #3]
   205da:	2207      	movs	r2, #7
   205dc:	b943      	cbnz	r3, 205f0 <bt_conn_is_peer_addr_le+0x32>
   205de:	f104 0196 	add.w	r1, r4, #150	; 0x96
   205e2:	4628      	mov	r0, r5
   205e4:	f7ff fc37 	bl	1fe56 <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   205e8:	fab0 f080 	clz	r0, r0
   205ec:	0940      	lsrs	r0, r0, #5
}
   205ee:	bd38      	pop	{r3, r4, r5, pc}
   205f0:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   205f4:	e7f5      	b.n	205e2 <bt_conn_is_peer_addr_le+0x24>
		return false;
   205f6:	2000      	movs	r0, #0
   205f8:	e7f9      	b.n	205ee <bt_conn_is_peer_addr_le+0x30>
		return true;
   205fa:	2001      	movs	r0, #1
   205fc:	e7f7      	b.n	205ee <bt_conn_is_peer_addr_le+0x30>

000205fe <bt_conn_unref>:
	atomic_val_t old = atomic_dec(&conn->ref);
   205fe:	3054      	adds	r0, #84	; 0x54
   20600:	f7ff bf2d 	b.w	2045e <atomic_dec>

00020604 <bt_conn_get_dst>:
}
   20604:	3088      	adds	r0, #136	; 0x88
   20606:	4770      	bx	lr

00020608 <bt_conn_le_conn_update>:
{
   20608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2060a:	4607      	mov	r7, r0
   2060c:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   2060e:	f242 0013 	movw	r0, #8211	; 0x2013
   20612:	210e      	movs	r1, #14
   20614:	f7e8 fa12 	bl	8a3c <bt_hci_cmd_create>
	if (!buf) {
   20618:	4606      	mov	r6, r0
   2061a:	b1d0      	cbz	r0, 20652 <bt_conn_le_conn_update+0x4a>
	conn_update = net_buf_add(buf, sizeof(*conn_update));
   2061c:	210e      	movs	r1, #14
   2061e:	3008      	adds	r0, #8
   20620:	f001 ffba 	bl	22598 <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   20624:	220e      	movs	r2, #14
	conn_update = net_buf_add(buf, sizeof(*conn_update));
   20626:	4604      	mov	r4, r0
	(void)memset(conn_update, 0, sizeof(*conn_update));
   20628:	2100      	movs	r1, #0
   2062a:	f7ff fc4f 	bl	1fecc <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   2062e:	883b      	ldrh	r3, [r7, #0]
   20630:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   20632:	882b      	ldrh	r3, [r5, #0]
   20634:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   20636:	886b      	ldrh	r3, [r5, #2]
   20638:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   2063a:	88ab      	ldrh	r3, [r5, #4]
   2063c:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   2063e:	88eb      	ldrh	r3, [r5, #6]
   20640:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   20642:	4631      	mov	r1, r6
   20644:	2200      	movs	r2, #0
}
   20646:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2064a:	f242 0013 	movw	r0, #8211	; 0x2013
   2064e:	f7e8 bb51 	b.w	8cf4 <bt_hci_cmd_send_sync>
}
   20652:	f06f 0036 	mvn.w	r0, #54	; 0x36
   20656:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00020658 <sys_slist_remove>:
Z_GENLIST_REMOVE(slist, snode)
   20658:	6813      	ldr	r3, [r2, #0]
   2065a:	b939      	cbnz	r1, 2066c <sys_slist_remove+0x14>
   2065c:	6841      	ldr	r1, [r0, #4]
	list->head = node;
   2065e:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   20660:	428a      	cmp	r2, r1
   20662:	d100      	bne.n	20666 <sys_slist_remove+0xe>
	list->tail = node;
   20664:	6043      	str	r3, [r0, #4]
	parent->next = child;
   20666:	2300      	movs	r3, #0
   20668:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2066a:	4770      	bx	lr
	parent->next = child;
   2066c:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   2066e:	6843      	ldr	r3, [r0, #4]
   20670:	429a      	cmp	r2, r3
	list->tail = node;
   20672:	bf08      	it	eq
   20674:	6041      	streq	r1, [r0, #4]
}
   20676:	e7f6      	b.n	20666 <sys_slist_remove+0xe>

00020678 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   20678:	4603      	mov	r3, r0
	size_t bytes = 0;
   2067a:	2000      	movs	r0, #0

	while (buf) {
   2067c:	b903      	cbnz	r3, 20680 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   2067e:	4770      	bx	lr
		bytes += buf->len;
   20680:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   20682:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   20684:	4410      	add	r0, r2
		buf = buf->frags;
   20686:	e7f9      	b.n	2067c <net_buf_frags_len+0x4>

00020688 <__l2cap_lookup_ident>:
{
   20688:	b538      	push	{r3, r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2068a:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
{
   2068c:	460b      	mov	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2068e:	b164      	cbz	r4, 206aa <__l2cap_lookup_ident+0x22>
   20690:	3c08      	subs	r4, #8
   20692:	2100      	movs	r1, #0
   20694:	b14c      	cbz	r4, 206aa <__l2cap_lookup_ident+0x22>
		if (chan->ident == ident) {
   20696:	f894 5048 	ldrb.w	r5, [r4, #72]	; 0x48
   2069a:	429d      	cmp	r5, r3
   2069c:	d107      	bne.n	206ae <__l2cap_lookup_ident+0x26>
			if (remove) {
   2069e:	b122      	cbz	r2, 206aa <__l2cap_lookup_ident+0x22>
				sys_slist_remove(&conn->channels, prev,
   206a0:	f104 0208 	add.w	r2, r4, #8
   206a4:	304c      	adds	r0, #76	; 0x4c
   206a6:	f7ff ffd7 	bl	20658 <sys_slist_remove>
}
   206aa:	4620      	mov	r0, r4
   206ac:	bd38      	pop	{r3, r4, r5, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
   206ae:	f114 0108 	adds.w	r1, r4, #8
   206b2:	d004      	beq.n	206be <__l2cap_lookup_ident+0x36>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   206b4:	68a4      	ldr	r4, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   206b6:	2c00      	cmp	r4, #0
   206b8:	d0f7      	beq.n	206aa <__l2cap_lookup_ident+0x22>
   206ba:	3c08      	subs	r4, #8
   206bc:	e7ea      	b.n	20694 <__l2cap_lookup_ident+0xc>
	return NULL;
   206be:	460c      	mov	r4, r1
   206c0:	e7f3      	b.n	206aa <__l2cap_lookup_ident+0x22>

000206c2 <l2cap_remove_rx_cid>:
	if (!L2CAP_LE_CID_IS_DYN(cid)) {
   206c2:	f1a1 0240 	sub.w	r2, r1, #64	; 0x40
   206c6:	2a3f      	cmp	r2, #63	; 0x3f
{
   206c8:	b538      	push	{r3, r4, r5, lr}
   206ca:	460b      	mov	r3, r1
	if (!L2CAP_LE_CID_IS_DYN(cid)) {
   206cc:	d816      	bhi.n	206fc <l2cap_remove_rx_cid+0x3a>
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   206ce:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
   206d0:	b15c      	cbz	r4, 206ea <l2cap_remove_rx_cid+0x28>
   206d2:	3c08      	subs	r4, #8
   206d4:	2100      	movs	r1, #0
   206d6:	b144      	cbz	r4, 206ea <l2cap_remove_rx_cid+0x28>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   206d8:	f8b4 5050 	ldrh.w	r5, [r4, #80]	; 0x50
   206dc:	429d      	cmp	r5, r3
   206de:	f104 0208 	add.w	r2, r4, #8
   206e2:	d104      	bne.n	206ee <l2cap_remove_rx_cid+0x2c>
			sys_slist_remove(&conn->channels, prev, &chan->node);
   206e4:	304c      	adds	r0, #76	; 0x4c
   206e6:	f7ff ffb7 	bl	20658 <sys_slist_remove>
}
   206ea:	4620      	mov	r0, r4
   206ec:	bd38      	pop	{r3, r4, r5, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
   206ee:	b13a      	cbz	r2, 20700 <l2cap_remove_rx_cid+0x3e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   206f0:	68a4      	ldr	r4, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   206f2:	2c00      	cmp	r4, #0
   206f4:	d0f9      	beq.n	206ea <l2cap_remove_rx_cid+0x28>
   206f6:	3c08      	subs	r4, #8
   206f8:	4611      	mov	r1, r2
   206fa:	e7ec      	b.n	206d6 <l2cap_remove_rx_cid+0x14>
		return NULL;
   206fc:	2400      	movs	r4, #0
   206fe:	e7f4      	b.n	206ea <l2cap_remove_rx_cid+0x28>
   20700:	4614      	mov	r4, r2
   20702:	e7f2      	b.n	206ea <l2cap_remove_rx_cid+0x28>

00020704 <l2cap_alloc_frag>:
{
   20704:	b508      	push	{r3, lr}
	frag = chan->chan.ops->alloc_buf(&chan->chan);
   20706:	6853      	ldr	r3, [r2, #4]
{
   20708:	4610      	mov	r0, r2
	frag = chan->chan.ops->alloc_buf(&chan->chan);
   2070a:	68db      	ldr	r3, [r3, #12]
   2070c:	4798      	blx	r3
}
   2070e:	2800      	cmp	r0, #0
   20710:	bf38      	it	cc
   20712:	2000      	movcc	r0, #0
   20714:	bd08      	pop	{r3, pc}

00020716 <l2cap_connected>:
}
   20716:	4770      	bx	lr

00020718 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   20718:	f3bf 8f5b 	dmb	ish
   2071c:	6800      	ldr	r0, [r0, #0]
   2071e:	f3bf 8f5b 	dmb	ish
}
   20722:	4770      	bx	lr

00020724 <atomic_add>:
{
   20724:	4603      	mov	r3, r0
}
   20726:	f3bf 8f5b 	dmb	ish
   2072a:	e853 0f00 	ldrex	r0, [r3]
   2072e:	1842      	adds	r2, r0, r1
   20730:	e843 2c00 	strex	ip, r2, [r3]
   20734:	f1bc 0f00 	cmp.w	ip, #0
   20738:	d1f7      	bne.n	2072a <atomic_add+0x6>
   2073a:	f3bf 8f5b 	dmb	ish
   2073e:	4770      	bx	lr

00020740 <l2cap_chan_destroy>:
{
   20740:	b570      	push	{r4, r5, r6, lr}
   20742:	4604      	mov	r4, r0
	k_delayed_work_cancel(&chan->rtx_work);
   20744:	3010      	adds	r0, #16
   20746:	f002 fcdf 	bl	23108 <k_delayed_work_cancel>
	if (ch->tx_buf) {
   2074a:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
   2074e:	b120      	cbz	r0, 2075a <l2cap_chan_destroy+0x1a>
		net_buf_unref(ch->tx_buf);
   20750:	f7fb f9c6 	bl	1bae0 <net_buf_unref>
		ch->tx_buf = NULL;
   20754:	2300      	movs	r3, #0
   20756:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	while ((buf = net_buf_get(&ch->tx_queue, K_NO_WAIT))) {
   2075a:	f104 0568 	add.w	r5, r4, #104	; 0x68
   2075e:	2200      	movs	r2, #0
   20760:	2300      	movs	r3, #0
   20762:	4628      	mov	r0, r5
   20764:	f001 feb5 	bl	224d2 <net_buf_get>
   20768:	b990      	cbnz	r0, 20790 <l2cap_chan_destroy+0x50>
	while ((buf = net_buf_get(&ch->rx_queue, K_NO_WAIT))) {
   2076a:	f104 06a4 	add.w	r6, r4, #164	; 0xa4
   2076e:	2200      	movs	r2, #0
   20770:	2300      	movs	r3, #0
   20772:	4630      	mov	r0, r6
   20774:	f001 fead 	bl	224d2 <net_buf_get>
   20778:	4605      	mov	r5, r0
   2077a:	b960      	cbnz	r0, 20796 <l2cap_chan_destroy+0x56>
	if (ch->_sdu) {
   2077c:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
   20780:	b128      	cbz	r0, 2078e <l2cap_chan_destroy+0x4e>
		net_buf_unref(ch->_sdu);
   20782:	f7fb f9ad 	bl	1bae0 <net_buf_unref>
		ch->_sdu = NULL;
   20786:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
		ch->_sdu_len = 0U;
   2078a:	f8a4 5094 	strh.w	r5, [r4, #148]	; 0x94
}
   2078e:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
   20790:	f7fb f9a6 	bl	1bae0 <net_buf_unref>
   20794:	e7e3      	b.n	2075e <l2cap_chan_destroy+0x1e>
		net_buf_unref(buf);
   20796:	f7fb f9a3 	bl	1bae0 <net_buf_unref>
   2079a:	e7e8      	b.n	2076e <l2cap_chan_destroy+0x2e>

0002079c <l2cap_chan_rx_init>:
	if (!chan->rx.mtu) {
   2079c:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
   207a0:	b913      	cbnz	r3, 207a8 <l2cap_chan_rx_init+0xc>
		chan->rx.mtu = L2CAP_MAX_LE_MTU;
   207a2:	23f8      	movs	r3, #248	; 0xf8
   207a4:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
	if (!chan->rx.init_credits) {
   207a8:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
   207ac:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
   207b0:	b94a      	cbnz	r2, 207c6 <l2cap_chan_rx_init+0x2a>
		if (chan->chan.ops->alloc_buf) {
   207b2:	6842      	ldr	r2, [r0, #4]
   207b4:	68d2      	ldr	r2, [r2, #12]
   207b6:	b1ca      	cbz	r2, 207ec <l2cap_chan_rx_init+0x50>
			chan->rx.init_credits = (chan->rx.mtu +
   207b8:	f103 02f9 	add.w	r2, r3, #249	; 0xf9
						 (L2CAP_MAX_LE_MPS - 1)) /
   207bc:	21fa      	movs	r1, #250	; 0xfa
   207be:	fbb2 f2f1 	udiv	r2, r2, r1
			chan->rx.init_credits = L2CAP_LE_MAX_CREDITS;
   207c2:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
	chan->rx.mps = MIN(chan->rx.mtu + 2, L2CAP_MAX_LE_MPS);
   207c6:	3302      	adds	r3, #2
   207c8:	2bfa      	cmp	r3, #250	; 0xfa
   207ca:	bfa8      	it	ge
   207cc:	23fa      	movge	r3, #250	; 0xfa
   207ce:	f8a0 3054 	strh.w	r3, [r0, #84]	; 0x54
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   207d2:	3058      	adds	r0, #88	; 0x58
   207d4:	2300      	movs	r3, #0
   207d6:	f3bf 8f5b 	dmb	ish
   207da:	e850 2f00 	ldrex	r2, [r0]
   207de:	e840 3100 	strex	r1, r3, [r0]
   207e2:	2900      	cmp	r1, #0
   207e4:	d1f9      	bne.n	207da <l2cap_chan_rx_init+0x3e>
   207e6:	f3bf 8f5b 	dmb	ish
}
   207ea:	4770      	bx	lr
			chan->rx.init_credits = L2CAP_LE_MAX_CREDITS;
   207ec:	2202      	movs	r2, #2
   207ee:	e7e8      	b.n	207c2 <l2cap_chan_rx_init+0x26>

000207f0 <l2cap_disconnected>:
   207f0:	4770      	bx	lr

000207f2 <l2cap_chan_tx_give_credits>:
{
   207f2:	b510      	push	{r4, lr}
   207f4:	4604      	mov	r4, r0
	atomic_add(&chan->tx.credits, credits);
   207f6:	3064      	adds	r0, #100	; 0x64
   207f8:	f7ff ff94 	bl	20724 <atomic_add>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   207fc:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(chan->chan.status, BT_L2CAP_STATUS_OUT) &&
   20800:	f104 0140 	add.w	r1, r4, #64	; 0x40
   20804:	e851 3f00 	ldrex	r3, [r1]
   20808:	f043 0201 	orr.w	r2, r3, #1
   2080c:	e841 2000 	strex	r0, r2, [r1]
   20810:	2800      	cmp	r0, #0
   20812:	d1f7      	bne.n	20804 <l2cap_chan_tx_give_credits+0x12>
   20814:	f3bf 8f5b 	dmb	ish
   20818:	07db      	lsls	r3, r3, #31
   2081a:	d406      	bmi.n	2082a <l2cap_chan_tx_give_credits+0x38>
	    chan->chan.ops->status) {
   2081c:	6863      	ldr	r3, [r4, #4]
   2081e:	699b      	ldr	r3, [r3, #24]
	if (!atomic_test_and_set_bit(chan->chan.status, BT_L2CAP_STATUS_OUT) &&
   20820:	b11b      	cbz	r3, 2082a <l2cap_chan_tx_give_credits+0x38>
		chan->chan.ops->status(&chan->chan, chan->chan.status);
   20822:	4620      	mov	r0, r4
}
   20824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		chan->chan.ops->status(&chan->chan, chan->chan.status);
   20828:	4718      	bx	r3
}
   2082a:	bd10      	pop	{r4, pc}

0002082c <l2cap_change_security>:
{
   2082c:	b510      	push	{r4, lr}
	if (atomic_test_bit(chan->chan.status,
   2082e:	f100 0440 	add.w	r4, r0, #64	; 0x40
{
   20832:	4603      	mov	r3, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   20834:	4620      	mov	r0, r4
   20836:	f7ff ff6f 	bl	20718 <atomic_get>
	if (atomic_test_bit(chan->chan.status,
   2083a:	0742      	lsls	r2, r0, #29
   2083c:	d42b      	bmi.n	20896 <l2cap_change_security+0x6a>
	switch (err) {
   2083e:	2905      	cmp	r1, #5
   20840:	d01d      	beq.n	2087e <l2cap_change_security+0x52>
   20842:	2908      	cmp	r1, #8
   20844:	d12a      	bne.n	2089c <l2cap_change_security+0x70>
		if (chan->chan.required_sec_level >= BT_SECURITY_L2) {
   20846:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
   2084a:	2a01      	cmp	r2, #1
   2084c:	d829      	bhi.n	208a2 <l2cap_change_security+0x76>
		chan->chan.required_sec_level = BT_SECURITY_L2;
   2084e:	2202      	movs	r2, #2
			chan->chan.required_sec_level = BT_SECURITY_L4;
   20850:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	ret = bt_conn_set_security(chan->chan.conn,
   20854:	f893 1049 	ldrb.w	r1, [r3, #73]	; 0x49
   20858:	6818      	ldr	r0, [r3, #0]
   2085a:	f7ff fe7b 	bl	20554 <bt_conn_set_security>
	if (ret < 0) {
   2085e:	2800      	cmp	r0, #0
   20860:	db0c      	blt.n	2087c <l2cap_change_security+0x50>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   20862:	f3bf 8f5b 	dmb	ish
   20866:	e854 3f00 	ldrex	r3, [r4]
   2086a:	f043 0304 	orr.w	r3, r3, #4
   2086e:	e844 3200 	strex	r2, r3, [r4]
   20872:	2a00      	cmp	r2, #0
   20874:	d1f7      	bne.n	20866 <l2cap_change_security+0x3a>
   20876:	f3bf 8f5b 	dmb	ish
	return 0;
   2087a:	2000      	movs	r0, #0
}
   2087c:	bd10      	pop	{r4, pc}
		if (chan->chan.required_sec_level < BT_SECURITY_L2) {
   2087e:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
   20882:	2a01      	cmp	r2, #1
   20884:	d9e3      	bls.n	2084e <l2cap_change_security+0x22>
		} else if (chan->chan.required_sec_level < BT_SECURITY_L3) {
   20886:	2a02      	cmp	r2, #2
   20888:	d101      	bne.n	2088e <l2cap_change_security+0x62>
			chan->chan.required_sec_level = BT_SECURITY_L3;
   2088a:	2203      	movs	r2, #3
   2088c:	e7e0      	b.n	20850 <l2cap_change_security+0x24>
		} else if (chan->chan.required_sec_level < BT_SECURITY_L4) {
   2088e:	2a03      	cmp	r2, #3
   20890:	d107      	bne.n	208a2 <l2cap_change_security+0x76>
			chan->chan.required_sec_level = BT_SECURITY_L4;
   20892:	2204      	movs	r2, #4
   20894:	e7dc      	b.n	20850 <l2cap_change_security+0x24>
		return -EINPROGRESS;
   20896:	f06f 0043 	mvn.w	r0, #67	; 0x43
   2089a:	e7ef      	b.n	2087c <l2cap_change_security+0x50>
	switch (err) {
   2089c:	f06f 0015 	mvn.w	r0, #21
   208a0:	e7ec      	b.n	2087c <l2cap_change_security+0x50>
			return -EALREADY;
   208a2:	f06f 0044 	mvn.w	r0, #68	; 0x44
   208a6:	e7e9      	b.n	2087c <l2cap_change_security+0x50>

000208a8 <l2cap_chan_tx_resume>:
{
   208a8:	b508      	push	{r3, lr}
   208aa:	4603      	mov	r3, r0
	if (!atomic_get(&ch->tx.credits) ||
   208ac:	3064      	adds	r0, #100	; 0x64
   208ae:	f7ff ff33 	bl	20718 <atomic_get>
   208b2:	b150      	cbz	r0, 208ca <l2cap_chan_tx_resume+0x22>
   208b4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   208b6:	b912      	cbnz	r2, 208be <l2cap_chan_tx_resume+0x16>
	    (k_fifo_is_empty(&ch->tx_queue) && !ch->tx_buf)) {
   208b8:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
   208bc:	b12a      	cbz	r2, 208ca <l2cap_chan_tx_resume+0x22>
	k_work_submit_to_queue(&k_sys_work_q, work);
   208be:	f103 0084 	add.w	r0, r3, #132	; 0x84
}
   208c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   208c6:	f7ea be4b 	b.w	b560 <k_work_submit_to_queue.constprop.0>
   208ca:	bd08      	pop	{r3, pc}

000208cc <l2cap_chan_seg_sent>:
	l2cap_chan_tx_resume(BT_L2CAP_LE_CHAN(chan));
   208cc:	4608      	mov	r0, r1
   208ce:	f7ff bfeb 	b.w	208a8 <l2cap_chan_tx_resume>

000208d2 <l2cap_chan_sdu_sent>:
	if (chan->ops->sent) {
   208d2:	684b      	ldr	r3, [r1, #4]
   208d4:	695b      	ldr	r3, [r3, #20]
{
   208d6:	b510      	push	{r4, lr}
   208d8:	460c      	mov	r4, r1
	if (chan->ops->sent) {
   208da:	b10b      	cbz	r3, 208e0 <l2cap_chan_sdu_sent+0xe>
		chan->ops->sent(chan);
   208dc:	4608      	mov	r0, r1
   208de:	4798      	blx	r3
	l2cap_chan_tx_resume(BT_L2CAP_LE_CHAN(chan));
   208e0:	4620      	mov	r0, r4
}
   208e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	l2cap_chan_tx_resume(BT_L2CAP_LE_CHAN(chan));
   208e6:	f7ff bfdf 	b.w	208a8 <l2cap_chan_tx_resume>

000208ea <bt_l2cap_chan_remove>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   208ea:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
{
   208ec:	b410      	push	{r4}
   208ee:	460c      	mov	r4, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   208f0:	b113      	cbz	r3, 208f8 <bt_l2cap_chan_remove+0xe>
   208f2:	3b08      	subs	r3, #8
   208f4:	2100      	movs	r1, #0
   208f6:	b90b      	cbnz	r3, 208fc <bt_l2cap_chan_remove+0x12>
}
   208f8:	bc10      	pop	{r4}
   208fa:	4770      	bx	lr
		if (chan == ch) {
   208fc:	42a3      	cmp	r3, r4
   208fe:	f103 0208 	add.w	r2, r3, #8
   20902:	d103      	bne.n	2090c <bt_l2cap_chan_remove+0x22>
}
   20904:	bc10      	pop	{r4}
			sys_slist_remove(&conn->channels, prev, &chan->node);
   20906:	304c      	adds	r0, #76	; 0x4c
   20908:	f7ff bea6 	b.w	20658 <sys_slist_remove>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2090c:	2a00      	cmp	r2, #0
   2090e:	d0f3      	beq.n	208f8 <bt_l2cap_chan_remove+0xe>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   20910:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   20912:	2b00      	cmp	r3, #0
   20914:	d0f0      	beq.n	208f8 <bt_l2cap_chan_remove+0xe>
   20916:	3b08      	subs	r3, #8
   20918:	4611      	mov	r1, r2
   2091a:	e7ec      	b.n	208f6 <bt_l2cap_chan_remove+0xc>

0002091c <bt_l2cap_chan_del>:
{
   2091c:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   2091e:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   20922:	4604      	mov	r4, r0
	if (!chan->conn) {
   20924:	b123      	cbz	r3, 20930 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   20926:	686b      	ldr	r3, [r5, #4]
   20928:	b103      	cbz	r3, 2092c <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   2092a:	4798      	blx	r3
	chan->conn = NULL;
   2092c:	2300      	movs	r3, #0
   2092e:	6023      	str	r3, [r4, #0]
	chan->state = state;
   20930:	2300      	movs	r3, #0
   20932:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	chan->psm = 0U;
   20936:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
	if (chan->destroy) {
   2093a:	68e3      	ldr	r3, [r4, #12]
   2093c:	b10b      	cbz	r3, 20942 <bt_l2cap_chan_del+0x26>
		chan->destroy(chan);
   2093e:	4620      	mov	r0, r4
   20940:	4798      	blx	r3
	if (ops->released) {
   20942:	69eb      	ldr	r3, [r5, #28]
   20944:	b11b      	cbz	r3, 2094e <bt_l2cap_chan_del+0x32>
		ops->released(chan);
   20946:	4620      	mov	r0, r4
}
   20948:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   2094c:	4718      	bx	r3
}
   2094e:	bd70      	pop	{r4, r5, r6, pc}

00020950 <bt_l2cap_disconnected>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   20950:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
{
   20952:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   20954:	b18b      	cbz	r3, 2097a <bt_l2cap_disconnected+0x2a>
   20956:	f1b3 0008 	subs.w	r0, r3, #8
   2095a:	d00e      	beq.n	2097a <bt_l2cap_disconnected+0x2a>
   2095c:	681c      	ldr	r4, [r3, #0]
   2095e:	b104      	cbz	r4, 20962 <bt_l2cap_disconnected+0x12>
   20960:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   20962:	f7ff ffdb 	bl	2091c <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   20966:	b144      	cbz	r4, 2097a <bt_l2cap_disconnected+0x2a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   20968:	f114 0308 	adds.w	r3, r4, #8
   2096c:	d002      	beq.n	20974 <bt_l2cap_disconnected+0x24>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2096e:	68a3      	ldr	r3, [r4, #8]
   20970:	b103      	cbz	r3, 20974 <bt_l2cap_disconnected+0x24>
   20972:	3b08      	subs	r3, #8
{
   20974:	4620      	mov	r0, r4
   20976:	461c      	mov	r4, r3
   20978:	e7f3      	b.n	20962 <bt_l2cap_disconnected+0x12>
}
   2097a:	bd10      	pop	{r4, pc}

0002097c <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   2097c:	3104      	adds	r1, #4
   2097e:	f7ea bc31 	b.w	b1e4 <bt_conn_create_pdu_timeout>

00020982 <bt_l2cap_send_cb>:
{
   20982:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20986:	4614      	mov	r4, r2
   20988:	4605      	mov	r5, r0
   2098a:	460f      	mov	r7, r1
	hdr = net_buf_push(buf, sizeof(*hdr));
   2098c:	f102 0008 	add.w	r0, r2, #8
   20990:	2104      	movs	r1, #4
{
   20992:	461e      	mov	r6, r3
   20994:	f8dd 8018 	ldr.w	r8, [sp, #24]
	hdr = net_buf_push(buf, sizeof(*hdr));
   20998:	f001 fe1f 	bl	225da <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2099c:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   2099e:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   209a0:	3a04      	subs	r2, #4
   209a2:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   209a4:	4643      	mov	r3, r8
   209a6:	4632      	mov	r2, r6
   209a8:	4621      	mov	r1, r4
   209aa:	4628      	mov	r0, r5
}
   209ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   209b0:	f7e9 bfb2 	b.w	a918 <bt_conn_send_cb>

000209b4 <l2cap_chan_le_send_sdu>:
{
   209b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	total_len = net_buf_frags_len(*buf) + sent;
   209b8:	680c      	ldr	r4, [r1, #0]
{
   209ba:	4607      	mov	r7, r0
	total_len = net_buf_frags_len(*buf) + sent;
   209bc:	4620      	mov	r0, r4
{
   209be:	4616      	mov	r6, r2
   209c0:	4688      	mov	r8, r1
	total_len = net_buf_frags_len(*buf) + sent;
   209c2:	f7ff fe59 	bl	20678 <net_buf_frags_len>
	if (total_len > ch->tx.mtu) {
   209c6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
	total_len = net_buf_frags_len(*buf) + sent;
   209ca:	eb06 0900 	add.w	r9, r6, r0
	if (total_len > ch->tx.mtu) {
   209ce:	454b      	cmp	r3, r9
   209d0:	db2e      	blt.n	20a30 <l2cap_chan_le_send_sdu+0x7c>
	if (!frag->len && frag->frags) {
   209d2:	89a3      	ldrh	r3, [r4, #12]
   209d4:	b91b      	cbnz	r3, 209de <l2cap_chan_le_send_sdu+0x2a>
   209d6:	6823      	ldr	r3, [r4, #0]
   209d8:	2b00      	cmp	r3, #0
   209da:	bf18      	it	ne
   209dc:	461c      	movne	r4, r3
	if (!sent) {
   209de:	b986      	cbnz	r6, 20a02 <l2cap_chan_le_send_sdu+0x4e>
		ret = l2cap_chan_le_send(ch, frag, BT_L2CAP_SDU_HDR_LEN);
   209e0:	2202      	movs	r2, #2
   209e2:	4621      	mov	r1, r4
   209e4:	4638      	mov	r0, r7
   209e6:	f7ea fdfb 	bl	b5e0 <l2cap_chan_le_send>
		if (ret < 0) {
   209ea:	1e05      	subs	r5, r0, #0
   209ec:	da08      	bge.n	20a00 <l2cap_chan_le_send_sdu+0x4c>
			if (ret == -EAGAIN) {
   209ee:	f115 0f0b 	cmn.w	r5, #11
				data_sent(frag)->len = sent;
   209f2:	bf08      	it	eq
   209f4:	82a6      	strheq	r6, [r4, #20]
			*buf = frag;
   209f6:	f8c8 4000 	str.w	r4, [r8]
}
   209fa:	4628      	mov	r0, r5
   209fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		sent = ret;
   20a00:	b2ae      	uxth	r6, r5
	if (!frag->len && frag->frags) {
   20a02:	2500      	movs	r5, #0
	for (ret = 0; sent < total_len; sent += ret) {
   20a04:	454e      	cmp	r6, r9
   20a06:	db03      	blt.n	20a10 <l2cap_chan_le_send_sdu+0x5c>
	net_buf_unref(frag);
   20a08:	4620      	mov	r0, r4
   20a0a:	f7fb f869 	bl	1bae0 <net_buf_unref>
	return ret;
   20a0e:	e7f4      	b.n	209fa <l2cap_chan_le_send_sdu+0x46>
		if (!frag->len) {
   20a10:	89a0      	ldrh	r0, [r4, #12]
   20a12:	b918      	cbnz	r0, 20a1c <l2cap_chan_le_send_sdu+0x68>
			frag = net_buf_frag_del(NULL, frag);
   20a14:	4621      	mov	r1, r4
   20a16:	f001 fdb3 	bl	22580 <net_buf_frag_del>
   20a1a:	4604      	mov	r4, r0
		ret = l2cap_chan_le_send(ch, frag, 0);
   20a1c:	2200      	movs	r2, #0
   20a1e:	4621      	mov	r1, r4
   20a20:	4638      	mov	r0, r7
   20a22:	f7ea fddd 	bl	b5e0 <l2cap_chan_le_send>
		if (ret < 0) {
   20a26:	1e05      	subs	r5, r0, #0
   20a28:	dbe1      	blt.n	209ee <l2cap_chan_le_send_sdu+0x3a>
	for (ret = 0; sent < total_len; sent += ret) {
   20a2a:	442e      	add	r6, r5
   20a2c:	b2b6      	uxth	r6, r6
   20a2e:	e7e9      	b.n	20a04 <l2cap_chan_le_send_sdu+0x50>
		return -EMSGSIZE;
   20a30:	f06f 0523 	mvn.w	r5, #35	; 0x23
   20a34:	e7e1      	b.n	209fa <l2cap_chan_le_send_sdu+0x46>

00020a36 <l2cap_chan_tx_process>:
{
   20a36:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   20a38:	4604      	mov	r4, r0
	ch = CONTAINER_OF(work, struct bt_l2cap_le_chan, tx_work);
   20a3a:	f1a0 0584 	sub.w	r5, r0, #132	; 0x84
	return net_buf_get(&ch->tx_queue, K_NO_WAIT);
   20a3e:	f1a0 061c 	sub.w	r6, r0, #28
		ch->tx_buf = NULL;
   20a42:	2700      	movs	r7, #0
	if (ch->tx_buf) {
   20a44:	f854 0c04 	ldr.w	r0, [r4, #-4]
   20a48:	b188      	cbz	r0, 20a6e <l2cap_chan_tx_process+0x38>
		ch->tx_buf = NULL;
   20a4a:	f844 7c04 	str.w	r7, [r4, #-4]
	while ((buf = l2cap_chan_le_get_tx_buf(ch))) {
   20a4e:	9001      	str	r0, [sp, #4]
   20a50:	b158      	cbz	r0, 20a6a <l2cap_chan_tx_process+0x34>
		sent = l2cap_chan_le_send_sdu(ch, &buf, sent);
   20a52:	8a82      	ldrh	r2, [r0, #20]
   20a54:	a901      	add	r1, sp, #4
   20a56:	4628      	mov	r0, r5
   20a58:	f7ff ffac 	bl	209b4 <l2cap_chan_le_send_sdu>
		if (sent < 0) {
   20a5c:	2800      	cmp	r0, #0
   20a5e:	daf1      	bge.n	20a44 <l2cap_chan_tx_process+0xe>
			if (sent == -EAGAIN) {
   20a60:	300b      	adds	r0, #11
   20a62:	d102      	bne.n	20a6a <l2cap_chan_tx_process+0x34>
				ch->tx_buf = buf;
   20a64:	9b01      	ldr	r3, [sp, #4]
   20a66:	f844 3c04 	str.w	r3, [r4, #-4]
}
   20a6a:	b003      	add	sp, #12
   20a6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return net_buf_get(&ch->tx_queue, K_NO_WAIT);
   20a6e:	2200      	movs	r2, #0
   20a70:	2300      	movs	r3, #0
   20a72:	4630      	mov	r0, r6
   20a74:	f001 fd2d 	bl	224d2 <net_buf_get>
   20a78:	e7e9      	b.n	20a4e <l2cap_chan_tx_process+0x18>

00020a7a <bt_l2cap_send.constprop.0>:
 * ignored.
 */
int bt_l2cap_send_cb(struct bt_conn *conn, uint16_t cid, struct net_buf *buf,
		     bt_conn_tx_cb_t cb, void *user_data);

static inline void bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
   20a7a:	b507      	push	{r0, r1, r2, lr}
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   20a7c:	2300      	movs	r3, #0
static inline void bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
   20a7e:	460a      	mov	r2, r1
	bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   20a80:	9300      	str	r3, [sp, #0]
   20a82:	2105      	movs	r1, #5
   20a84:	f7ff ff7d 	bl	20982 <bt_l2cap_send_cb>
}
   20a88:	b003      	add	sp, #12
   20a8a:	f85d fb04 	ldr.w	pc, [sp], #4

00020a8e <l2cap_send_reject>:
{
   20a8e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   20a92:	f89d 9020 	ldrb.w	r9, [sp, #32]
   20a96:	4606      	mov	r6, r0
   20a98:	4617      	mov	r7, r2
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   20a9a:	2001      	movs	r0, #1
   20a9c:	f109 0202 	add.w	r2, r9, #2
{
   20aa0:	461d      	mov	r5, r3
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   20aa2:	f7ea fd0d 	bl	b4c0 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
   20aa6:	4604      	mov	r4, r0
   20aa8:	b190      	cbz	r0, 20ad0 <l2cap_send_reject+0x42>
	rej = net_buf_add(buf, sizeof(*rej));
   20aaa:	f100 0808 	add.w	r8, r0, #8
   20aae:	2102      	movs	r1, #2
   20ab0:	4640      	mov	r0, r8
   20ab2:	f001 fd71 	bl	22598 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   20ab6:	8007      	strh	r7, [r0, #0]
	if (data) {
   20ab8:	b125      	cbz	r5, 20ac4 <l2cap_send_reject+0x36>
		net_buf_add_mem(buf, data, data_len);
   20aba:	464a      	mov	r2, r9
   20abc:	4629      	mov	r1, r5
   20abe:	4640      	mov	r0, r8
   20ac0:	f001 fd70 	bl	225a4 <net_buf_simple_add_mem>
	bt_l2cap_send(conn, BT_L2CAP_CID_LE_SIG, buf);
   20ac4:	4621      	mov	r1, r4
   20ac6:	4630      	mov	r0, r6
}
   20ac8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	bt_l2cap_send(conn, BT_L2CAP_CID_LE_SIG, buf);
   20acc:	f7ff bfd5 	b.w	20a7a <bt_l2cap_send.constprop.0>
}
   20ad0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00020ad4 <l2cap_ecred_conn_req>:
{
   20ad4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   20ad8:	460d      	mov	r5, r1
	if (!chan || !channels) {
   20ada:	4604      	mov	r4, r0
   20adc:	b3b0      	cbz	r0, 20b4c <l2cap_ecred_conn_req+0x78>
   20ade:	b3a9      	cbz	r1, 20b4c <l2cap_ecred_conn_req+0x78>
	ident = get_ident();
   20ae0:	f7ea fca4 	bl	b42c <get_ident>
				      sizeof(*req) +
   20ae4:	1d0a      	adds	r2, r1, #4
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_ECRED_CONN_REQ, ident,
   20ae6:	0052      	lsls	r2, r2, #1
   20ae8:	b292      	uxth	r2, r2
   20aea:	4601      	mov	r1, r0
	ident = get_ident();
   20aec:	4606      	mov	r6, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_ECRED_CONN_REQ, ident,
   20aee:	2017      	movs	r0, #23
   20af0:	f7ea fce6 	bl	b4c0 <l2cap_create_le_sig_pdu.isra.0>
	req = net_buf_add(buf, sizeof(*req));
   20af4:	f100 0908 	add.w	r9, r0, #8
   20af8:	2108      	movs	r1, #8
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_ECRED_CONN_REQ, ident,
   20afa:	4607      	mov	r7, r0
	req = net_buf_add(buf, sizeof(*req));
   20afc:	4648      	mov	r0, r9
   20afe:	f001 fd4b 	bl	22598 <net_buf_simple_add>
	ch = BT_L2CAP_LE_CHAN(chan[0]);
   20b02:	6822      	ldr	r2, [r4, #0]
	req->psm = sys_cpu_to_le16(ch->chan.psm);
   20b04:	f8b2 1046 	ldrh.w	r1, [r2, #70]	; 0x46
   20b08:	8001      	strh	r1, [r0, #0]
	req->mtu = sys_cpu_to_le16(ch->rx.mtu);
   20b0a:	f8b2 1052 	ldrh.w	r1, [r2, #82]	; 0x52
   20b0e:	8041      	strh	r1, [r0, #2]
	req->mps = sys_cpu_to_le16(ch->rx.mps);
   20b10:	f8b2 1054 	ldrh.w	r1, [r2, #84]	; 0x54
	req->credits = sys_cpu_to_le16(ch->rx.init_credits);
   20b14:	f8b2 2056 	ldrh.w	r2, [r2, #86]	; 0x56
	req->mps = sys_cpu_to_le16(ch->rx.mps);
   20b18:	8081      	strh	r1, [r0, #4]
	req->credits = sys_cpu_to_le16(ch->rx.init_credits);
   20b1a:	80c2      	strh	r2, [r0, #6]
	for (i = 0; i < channels; i++) {
   20b1c:	46a0      	mov	r8, r4
   20b1e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
		ch = BT_L2CAP_LE_CHAN(chan[i]);
   20b22:	f858 3b04 	ldr.w	r3, [r8], #4
		net_buf_add_le16(buf, ch->rx.cid);
   20b26:	4648      	mov	r0, r9
   20b28:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
		ch->chan.ident = ident;
   20b2c:	f883 6048 	strb.w	r6, [r3, #72]	; 0x48
		net_buf_add_le16(buf, ch->rx.cid);
   20b30:	f001 fd49 	bl	225c6 <net_buf_simple_add_le16>
	for (i = 0; i < channels; i++) {
   20b34:	4545      	cmp	r5, r8
   20b36:	d1f4      	bne.n	20b22 <l2cap_ecred_conn_req+0x4e>
	l2cap_chan_send_req(*chan, buf, L2CAP_CONN_TIMEOUT);
   20b38:	6820      	ldr	r0, [r4, #0]
   20b3a:	f44f 12a0 	mov.w	r2, #1310720	; 0x140000
   20b3e:	2300      	movs	r3, #0
   20b40:	4639      	mov	r1, r7
   20b42:	f7ea fe39 	bl	b7b8 <l2cap_chan_send_req>
	return 0;
   20b46:	2000      	movs	r0, #0
}
   20b48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EINVAL;
   20b4c:	f06f 0015 	mvn.w	r0, #21
   20b50:	e7fa      	b.n	20b48 <l2cap_ecred_conn_req+0x74>

00020b52 <l2cap_le_conn_req>:
{
   20b52:	b538      	push	{r3, r4, r5, lr}
   20b54:	4604      	mov	r4, r0
	ch->chan.ident = get_ident();
   20b56:	f7ea fc69 	bl	b42c <get_ident>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_LE_CONN_REQ,
   20b5a:	220a      	movs	r2, #10
	ch->chan.ident = get_ident();
   20b5c:	4601      	mov	r1, r0
   20b5e:	f884 0048 	strb.w	r0, [r4, #72]	; 0x48
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_LE_CONN_REQ,
   20b62:	2014      	movs	r0, #20
   20b64:	f7ea fcac 	bl	b4c0 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
   20b68:	4605      	mov	r5, r0
   20b6a:	b1d8      	cbz	r0, 20ba4 <l2cap_le_conn_req+0x52>
	req = net_buf_add(buf, sizeof(*req));
   20b6c:	210a      	movs	r1, #10
   20b6e:	3008      	adds	r0, #8
   20b70:	f001 fd12 	bl	22598 <net_buf_simple_add>
	req->psm = sys_cpu_to_le16(ch->chan.psm);
   20b74:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
   20b78:	8003      	strh	r3, [r0, #0]
	req->scid = sys_cpu_to_le16(ch->rx.cid);
   20b7a:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
   20b7e:	8043      	strh	r3, [r0, #2]
	req->mtu = sys_cpu_to_le16(ch->rx.mtu);
   20b80:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
   20b84:	8083      	strh	r3, [r0, #4]
	req->mps = sys_cpu_to_le16(ch->rx.mps);
   20b86:	f8b4 3054 	ldrh.w	r3, [r4, #84]	; 0x54
   20b8a:	80c3      	strh	r3, [r0, #6]
	req->credits = sys_cpu_to_le16(ch->rx.init_credits);
   20b8c:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
   20b90:	8103      	strh	r3, [r0, #8]
	l2cap_chan_send_req(&ch->chan, buf, L2CAP_CONN_TIMEOUT);
   20b92:	f44f 12a0 	mov.w	r2, #1310720	; 0x140000
   20b96:	4620      	mov	r0, r4
   20b98:	2300      	movs	r3, #0
   20b9a:	4629      	mov	r1, r5
   20b9c:	f7ea fe0c 	bl	b7b8 <l2cap_chan_send_req>
	return 0;
   20ba0:	2000      	movs	r0, #0
}
   20ba2:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOMEM;
   20ba4:	f06f 000b 	mvn.w	r0, #11
   20ba8:	e7fb      	b.n	20ba2 <l2cap_le_conn_req+0x50>

00020baa <bt_l2cap_encrypt_change>:
{
   20baa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   20bae:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
{
   20bb0:	b086      	sub	sp, #24
   20bb2:	460f      	mov	r7, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   20bb4:	b10c      	cbz	r4, 20bba <bt_l2cap_encrypt_change+0x10>
   20bb6:	3c08      	subs	r4, #8
   20bb8:	b914      	cbnz	r4, 20bc0 <bt_l2cap_encrypt_change+0x16>
}
   20bba:	b006      	add	sp, #24
   20bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   20bc0:	f104 0340 	add.w	r3, r4, #64	; 0x40
   20bc4:	f3bf 8f5b 	dmb	ish
   20bc8:	e853 2f00 	ldrex	r2, [r3]
   20bcc:	f022 0104 	bic.w	r1, r2, #4
   20bd0:	e843 1000 	strex	r0, r1, [r3]
   20bd4:	2800      	cmp	r0, #0
   20bd6:	d1f7      	bne.n	20bc8 <bt_l2cap_encrypt_change+0x1e>
   20bd8:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_clear_bit(chan->status,
   20bdc:	0753      	lsls	r3, r2, #29
   20bde:	d507      	bpl.n	20bf0 <bt_l2cap_encrypt_change+0x46>
	if (status) {
   20be0:	b18f      	cbz	r7, 20c06 <bt_l2cap_encrypt_change+0x5c>
		bt_l2cap_chan_remove(chan->conn, chan);
   20be2:	6820      	ldr	r0, [r4, #0]
   20be4:	4621      	mov	r1, r4
   20be6:	f7ff fe80 	bl	208ea <bt_l2cap_chan_remove>
		bt_l2cap_chan_del(chan);
   20bea:	4620      	mov	r0, r4
   20bec:	f7ff fe96 	bl	2091c <bt_l2cap_chan_del>
		if (chan->ops->encrypt_change) {
   20bf0:	6863      	ldr	r3, [r4, #4]
   20bf2:	689b      	ldr	r3, [r3, #8]
   20bf4:	b113      	cbz	r3, 20bfc <bt_l2cap_encrypt_change+0x52>
			chan->ops->encrypt_change(chan, hci_status);
   20bf6:	4639      	mov	r1, r7
   20bf8:	4620      	mov	r0, r4
   20bfa:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   20bfc:	f114 0f08 	cmn.w	r4, #8
   20c00:	d0db      	beq.n	20bba <bt_l2cap_encrypt_change+0x10>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   20c02:	68a4      	ldr	r4, [r4, #8]
   20c04:	e7d6      	b.n	20bb4 <bt_l2cap_encrypt_change+0xa>
	if (chan->ident) {
   20c06:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
   20c0a:	b193      	cbz	r3, 20c32 <bt_l2cap_encrypt_change+0x88>
   20c0c:	ae01      	add	r6, sp, #4
		int i = 0;
   20c0e:	463d      	mov	r5, r7
   20c10:	46b0      	mov	r8, r6
		while ((ch = l2cap_remove_ident(chan->conn, chan->ident))) {
   20c12:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
   20c16:	6820      	ldr	r0, [r4, #0]
   20c18:	2201      	movs	r2, #1
   20c1a:	f7ff fd35 	bl	20688 <__l2cap_lookup_ident>
   20c1e:	b920      	cbnz	r0, 20c2a <bt_l2cap_encrypt_change+0x80>
		l2cap_ecred_conn_req(echan, i);
   20c20:	4629      	mov	r1, r5
   20c22:	4640      	mov	r0, r8
   20c24:	f7ff ff56 	bl	20ad4 <l2cap_ecred_conn_req>
		return;
   20c28:	e7e2      	b.n	20bf0 <bt_l2cap_encrypt_change+0x46>
			echan[i++] = &ch->chan;
   20c2a:	f846 0b04 	str.w	r0, [r6], #4
   20c2e:	3501      	adds	r5, #1
   20c30:	e7ef      	b.n	20c12 <bt_l2cap_encrypt_change+0x68>
	l2cap_le_conn_req(BT_L2CAP_LE_CHAN(chan));
   20c32:	4620      	mov	r0, r4
   20c34:	f7ff ff8d 	bl	20b52 <l2cap_le_conn_req>
   20c38:	e7da      	b.n	20bf0 <bt_l2cap_encrypt_change+0x46>

00020c3a <bt_l2cap_le_lookup_tx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   20c3a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   20c3c:	b160      	cbz	r0, 20c58 <bt_l2cap_le_lookup_tx_cid+0x1e>
   20c3e:	3808      	subs	r0, #8
   20c40:	b900      	cbnz	r0, 20c44 <bt_l2cap_le_lookup_tx_cid+0xa>
   20c42:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   20c44:	f8b0 305c 	ldrh.w	r3, [r0, #92]	; 0x5c
   20c48:	428b      	cmp	r3, r1
   20c4a:	d005      	beq.n	20c58 <bt_l2cap_le_lookup_tx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   20c4c:	f110 0308 	adds.w	r3, r0, #8
   20c50:	d001      	beq.n	20c56 <bt_l2cap_le_lookup_tx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   20c52:	6880      	ldr	r0, [r0, #8]
   20c54:	e7f2      	b.n	20c3c <bt_l2cap_le_lookup_tx_cid+0x2>
	return NULL;
   20c56:	4618      	mov	r0, r3
}
   20c58:	4770      	bx	lr

00020c5a <bt_l2cap_le_lookup_rx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   20c5a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   20c5c:	b160      	cbz	r0, 20c78 <bt_l2cap_le_lookup_rx_cid+0x1e>
   20c5e:	3808      	subs	r0, #8
   20c60:	b900      	cbnz	r0, 20c64 <bt_l2cap_le_lookup_rx_cid+0xa>
   20c62:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   20c64:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
   20c68:	428b      	cmp	r3, r1
   20c6a:	d005      	beq.n	20c78 <bt_l2cap_le_lookup_rx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   20c6c:	f110 0308 	adds.w	r3, r0, #8
   20c70:	d001      	beq.n	20c76 <bt_l2cap_le_lookup_rx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   20c72:	6880      	ldr	r0, [r0, #8]
   20c74:	e7f2      	b.n	20c5c <bt_l2cap_le_lookup_rx_cid+0x2>
	return NULL;
   20c76:	4618      	mov	r0, r3
}
   20c78:	4770      	bx	lr

00020c7a <bt_l2cap_update_conn_param>:
{
   20c7a:	b570      	push	{r4, r5, r6, lr}
   20c7c:	460c      	mov	r4, r1
   20c7e:	4606      	mov	r6, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   20c80:	f7ea fbd4 	bl	b42c <get_ident>
   20c84:	2208      	movs	r2, #8
   20c86:	4601      	mov	r1, r0
   20c88:	2012      	movs	r0, #18
   20c8a:	f7ea fc19 	bl	b4c0 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
   20c8e:	4605      	mov	r5, r0
   20c90:	b188      	cbz	r0, 20cb6 <bt_l2cap_update_conn_param+0x3c>
	req = net_buf_add(buf, sizeof(*req));
   20c92:	2108      	movs	r1, #8
   20c94:	4408      	add	r0, r1
   20c96:	f001 fc7f 	bl	22598 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   20c9a:	8822      	ldrh	r2, [r4, #0]
   20c9c:	8002      	strh	r2, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   20c9e:	8862      	ldrh	r2, [r4, #2]
   20ca0:	8042      	strh	r2, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   20ca2:	88a2      	ldrh	r2, [r4, #4]
   20ca4:	8082      	strh	r2, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   20ca6:	88e2      	ldrh	r2, [r4, #6]
   20ca8:	80c2      	strh	r2, [r0, #6]
	bt_l2cap_send(conn, BT_L2CAP_CID_LE_SIG, buf);
   20caa:	4629      	mov	r1, r5
   20cac:	4630      	mov	r0, r6
   20cae:	f7ff fee4 	bl	20a7a <bt_l2cap_send.constprop.0>
	return 0;
   20cb2:	2000      	movs	r0, #0
}
   20cb4:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   20cb6:	f06f 000b 	mvn.w	r0, #11
   20cba:	e7fb      	b.n	20cb4 <bt_l2cap_update_conn_param+0x3a>

00020cbc <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   20cbc:	4770      	bx	lr

00020cbe <bt_l2cap_chan_disconnect>:

	return l2cap_le_connect(conn, BT_L2CAP_LE_CHAN(chan), psm);
}

int bt_l2cap_chan_disconnect(struct bt_l2cap_chan *chan)
{
   20cbe:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn *conn = chan->conn;
	struct net_buf *buf;
	struct bt_l2cap_disconn_req *req;
	struct bt_l2cap_le_chan *ch;

	if (!conn) {
   20cc0:	6803      	ldr	r3, [r0, #0]
{
   20cc2:	4604      	mov	r4, r0
	if (!conn) {
   20cc4:	b303      	cbz	r3, 20d08 <bt_l2cap_chan_disconnect+0x4a>
	ch = BT_L2CAP_LE_CHAN(chan);

	BT_DBG("chan %p scid 0x%04x dcid 0x%04x", chan, ch->rx.cid,
	       ch->tx.cid);

	ch->chan.ident = get_ident();
   20cc6:	f7ea fbb1 	bl	b42c <get_ident>

	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_DISCONN_REQ,
   20cca:	2204      	movs	r2, #4
	ch->chan.ident = get_ident();
   20ccc:	4601      	mov	r1, r0
   20cce:	f884 0048 	strb.w	r0, [r4, #72]	; 0x48
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_DISCONN_REQ,
   20cd2:	2006      	movs	r0, #6
   20cd4:	f7ea fbf4 	bl	b4c0 <l2cap_create_le_sig_pdu.isra.0>
				      ch->chan.ident, sizeof(*req));
	if (!buf) {
   20cd8:	4605      	mov	r5, r0
   20cda:	b1c0      	cbz	r0, 20d0e <bt_l2cap_chan_disconnect+0x50>
		return -ENOMEM;
	}

	req = net_buf_add(buf, sizeof(*req));
   20cdc:	2104      	movs	r1, #4
   20cde:	3008      	adds	r0, #8
   20ce0:	f001 fc5a 	bl	22598 <net_buf_simple_add>
	req->dcid = sys_cpu_to_le16(ch->rx.cid);
   20ce4:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
   20ce8:	8003      	strh	r3, [r0, #0]
	req->scid = sys_cpu_to_le16(ch->tx.cid);
   20cea:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
   20cee:	8043      	strh	r3, [r0, #2]

	l2cap_chan_send_req(chan, buf, L2CAP_DISC_TIMEOUT);
   20cf0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   20cf4:	2300      	movs	r3, #0
   20cf6:	4620      	mov	r0, r4
   20cf8:	4629      	mov	r1, r5
   20cfa:	f7ea fd5d 	bl	b7b8 <l2cap_chan_send_req>
	chan->state = state;
   20cfe:	2304      	movs	r3, #4
   20d00:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	bt_l2cap_chan_set_state(chan, BT_L2CAP_DISCONNECT);

	return 0;
   20d04:	2000      	movs	r0, #0
}
   20d06:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTCONN;
   20d08:	f06f 0038 	mvn.w	r0, #56	; 0x38
   20d0c:	e7fb      	b.n	20d06 <bt_l2cap_chan_disconnect+0x48>
		return -ENOMEM;
   20d0e:	f06f 000b 	mvn.w	r0, #11
   20d12:	e7f8      	b.n	20d06 <bt_l2cap_chan_disconnect+0x48>

00020d14 <l2cap_rx_process>:
{
   20d14:	b570      	push	{r4, r5, r6, lr}
	struct bt_l2cap_le_chan *ch = CHAN_RX(work);
   20d16:	f1a0 0698 	sub.w	r6, r0, #152	; 0x98
	while ((buf = net_buf_get(&ch->rx_queue, K_NO_WAIT))) {
   20d1a:	f100 040c 	add.w	r4, r0, #12
   20d1e:	2200      	movs	r2, #0
   20d20:	2300      	movs	r3, #0
   20d22:	4620      	mov	r0, r4
   20d24:	f001 fbd5 	bl	224d2 <net_buf_get>
   20d28:	4605      	mov	r5, r0
   20d2a:	b900      	cbnz	r0, 20d2e <l2cap_rx_process+0x1a>
}
   20d2c:	bd70      	pop	{r4, r5, r6, pc}
		l2cap_chan_le_recv(ch, buf);
   20d2e:	4630      	mov	r0, r6
   20d30:	4629      	mov	r1, r5
   20d32:	f7ea ff7d 	bl	bc30 <l2cap_chan_le_recv>
		net_buf_unref(buf);
   20d36:	4628      	mov	r0, r5
   20d38:	f7fa fed2 	bl	1bae0 <net_buf_unref>
   20d3c:	e7ef      	b.n	20d1e <l2cap_rx_process+0xa>

00020d3e <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   20d3e:	4603      	mov	r3, r0
Z_GENLIST_IS_EMPTY(slist)
   20d40:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   20d42:	b128      	cbz	r0, 20d50 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   20d44:	6859      	ldr	r1, [r3, #4]
   20d46:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   20d48:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   20d4a:	4288      	cmp	r0, r1
	list->tail = node;
   20d4c:	bf08      	it	eq
   20d4e:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   20d50:	4770      	bx	lr

00020d52 <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   20d52:	4603      	mov	r3, r0
   20d54:	6800      	ldr	r0, [r0, #0]
   20d56:	2200      	movs	r2, #0
   20d58:	b900      	cbnz	r0, 20d5c <sys_slist_find_and_remove+0xa>
   20d5a:	4770      	bx	lr
   20d5c:	4288      	cmp	r0, r1
   20d5e:	d110      	bne.n	20d82 <sys_slist_find_and_remove+0x30>
Z_GENLIST_REMOVE(slist, snode)
   20d60:	6808      	ldr	r0, [r1, #0]
   20d62:	b942      	cbnz	r2, 20d76 <sys_slist_find_and_remove+0x24>
   20d64:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   20d66:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   20d68:	4291      	cmp	r1, r2
   20d6a:	d100      	bne.n	20d6e <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   20d6c:	6058      	str	r0, [r3, #4]
	parent->next = child;
   20d6e:	2300      	movs	r3, #0
   20d70:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   20d72:	2001      	movs	r0, #1
Z_GENLIST_REMOVE(slist, snode)
   20d74:	4770      	bx	lr
	parent->next = child;
   20d76:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   20d78:	6858      	ldr	r0, [r3, #4]
   20d7a:	4281      	cmp	r1, r0
	list->tail = node;
   20d7c:	bf08      	it	eq
   20d7e:	605a      	streq	r2, [r3, #4]
}
   20d80:	e7f5      	b.n	20d6e <sys_slist_find_and_remove+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   20d82:	4602      	mov	r2, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   20d84:	6800      	ldr	r0, [r0, #0]
   20d86:	e7e7      	b.n	20d58 <sys_slist_find_and_remove+0x6>

00020d88 <net_buf_frags_len>:
{
   20d88:	4603      	mov	r3, r0
	size_t bytes = 0;
   20d8a:	2000      	movs	r0, #0
	while (buf) {
   20d8c:	b903      	cbnz	r3, 20d90 <net_buf_frags_len+0x8>
}
   20d8e:	4770      	bx	lr
		bytes += buf->len;
   20d90:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   20d92:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   20d94:	4410      	add	r0, r2
		buf = buf->frags;
   20d96:	e7f9      	b.n	20d8c <net_buf_frags_len+0x4>

00020d98 <att_sent>:
	if (chan->ops->sent) {
   20d98:	684b      	ldr	r3, [r1, #4]
   20d9a:	695b      	ldr	r3, [r3, #20]
{
   20d9c:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   20d9e:	b103      	cbz	r3, 20da2 <att_sent+0xa>
		chan->ops->sent(chan);
   20da0:	4718      	bx	r3
}
   20da2:	4770      	bx	lr

00020da4 <attr_read_type_cb>:
{
   20da4:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   20da6:	68d4      	ldr	r4, [r2, #12]
   20da8:	7823      	ldrb	r3, [r4, #0]
   20daa:	3102      	adds	r1, #2
   20dac:	b913      	cbnz	r3, 20db4 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   20dae:	7021      	strb	r1, [r4, #0]
	return true;
   20db0:	2001      	movs	r0, #1
   20db2:	e006      	b.n	20dc2 <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   20db4:	428b      	cmp	r3, r1
   20db6:	d0fb      	beq.n	20db0 <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   20db8:	8983      	ldrh	r3, [r0, #12]
   20dba:	3b02      	subs	r3, #2
   20dbc:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   20dbe:	2000      	movs	r0, #0
   20dc0:	6110      	str	r0, [r2, #16]
}
   20dc2:	bd10      	pop	{r4, pc}

00020dc4 <att_op_get_type>:
	switch (op) {
   20dc4:	281e      	cmp	r0, #30
   20dc6:	d816      	bhi.n	20df6 <att_op_get_type+0x32>
   20dc8:	b308      	cbz	r0, 20e0e <att_op_get_type+0x4a>
   20dca:	1e43      	subs	r3, r0, #1
   20dcc:	2b1d      	cmp	r3, #29
   20dce:	d81e      	bhi.n	20e0e <att_op_get_type+0x4a>
   20dd0:	e8df f003 	tbb	[pc, r3]
   20dd4:	23172317 	.word	0x23172317
   20dd8:	23172317 	.word	0x23172317
   20ddc:	23172317 	.word	0x23172317
   20de0:	23172317 	.word	0x23172317
   20de4:	1d172317 	.word	0x1d172317
   20de8:	2317231d 	.word	0x2317231d
   20dec:	1d191d17 	.word	0x1d191d17
   20df0:	0f1b      	.short	0x0f1b
   20df2:	2004      	movs	r0, #4
   20df4:	4770      	bx	lr
   20df6:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   20dfa:	2b52      	cmp	r3, #82	; 0x52
   20dfc:	d107      	bne.n	20e0e <att_op_get_type+0x4a>
		return ATT_COMMAND;
   20dfe:	2000      	movs	r0, #0
}
   20e00:	4770      	bx	lr
		return ATT_RESPONSE;
   20e02:	2002      	movs	r0, #2
   20e04:	4770      	bx	lr
		return ATT_NOTIFICATION;
   20e06:	2003      	movs	r0, #3
   20e08:	4770      	bx	lr
		return ATT_INDICATION;
   20e0a:	2005      	movs	r0, #5
   20e0c:	4770      	bx	lr
		return ATT_COMMAND;
   20e0e:	f010 0f40 	tst.w	r0, #64	; 0x40
   20e12:	bf0c      	ite	eq
   20e14:	2006      	moveq	r0, #6
   20e16:	2000      	movne	r0, #0
   20e18:	4770      	bx	lr
		return ATT_REQUEST;
   20e1a:	2001      	movs	r0, #1
   20e1c:	4770      	bx	lr

00020e1e <att_notify_mult>:
{
   20e1e:	b508      	push	{r3, lr}
	bt_gatt_mult_notification(chan->att->conn, buf->data, buf->len);
   20e20:	6803      	ldr	r3, [r0, #0]
   20e22:	898a      	ldrh	r2, [r1, #12]
   20e24:	6818      	ldr	r0, [r3, #0]
   20e26:	6889      	ldr	r1, [r1, #8]
   20e28:	f7ed fb9e 	bl	e568 <bt_gatt_mult_notification>
}
   20e2c:	2000      	movs	r0, #0
   20e2e:	bd08      	pop	{r3, pc}

00020e30 <att_notify>:
{
   20e30:	b538      	push	{r3, r4, r5, lr}
   20e32:	4605      	mov	r5, r0
	handle = net_buf_pull_le16(buf);
   20e34:	f101 0008 	add.w	r0, r1, #8
{
   20e38:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
   20e3a:	f001 fbfa 	bl	22632 <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   20e3e:	682d      	ldr	r5, [r5, #0]
   20e40:	89a3      	ldrh	r3, [r4, #12]
   20e42:	68a2      	ldr	r2, [r4, #8]
	handle = net_buf_pull_le16(buf);
   20e44:	4601      	mov	r1, r0
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   20e46:	6828      	ldr	r0, [r5, #0]
   20e48:	f000 fe9d 	bl	21b86 <bt_gatt_notification>
}
   20e4c:	2000      	movs	r0, #0
   20e4e:	bd38      	pop	{r3, r4, r5, pc}

00020e50 <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   20e50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   20e52:	e9cd 2301 	strd	r2, r3, [sp, #4]
   20e56:	2300      	movs	r3, #0
   20e58:	9300      	str	r3, [sp, #0]
   20e5a:	461a      	mov	r2, r3
   20e5c:	f7ed f994 	bl	e188 <bt_gatt_foreach_attr_type>
				  user_data);
}
   20e60:	b005      	add	sp, #20
   20e62:	f85d fb04 	ldr.w	pc, [sp], #4

00020e66 <find_info_cb>:
	if (!data->rsp) {
   20e66:	688b      	ldr	r3, [r1, #8]
{
   20e68:	b570      	push	{r4, r5, r6, lr}
	struct bt_att_chan *chan = data->chan;
   20e6a:	680e      	ldr	r6, [r1, #0]
{
   20e6c:	4605      	mov	r5, r0
   20e6e:	460c      	mov	r4, r1
	if (!data->rsp) {
   20e70:	b963      	cbnz	r3, 20e8c <find_info_cb+0x26>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   20e72:	6848      	ldr	r0, [r1, #4]
   20e74:	2101      	movs	r1, #1
   20e76:	3008      	adds	r0, #8
   20e78:	f001 fb8e 	bl	22598 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   20e7c:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   20e7e:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   20e80:	781b      	ldrb	r3, [r3, #0]
   20e82:	2b00      	cmp	r3, #0
   20e84:	bf0c      	ite	eq
   20e86:	2301      	moveq	r3, #1
   20e88:	2302      	movne	r3, #2
   20e8a:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   20e8c:	68a3      	ldr	r3, [r4, #8]
   20e8e:	781b      	ldrb	r3, [r3, #0]
   20e90:	2b01      	cmp	r3, #1
   20e92:	d003      	beq.n	20e9c <find_info_cb+0x36>
   20e94:	2b02      	cmp	r3, #2
   20e96:	d01a      	beq.n	20ece <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   20e98:	2000      	movs	r0, #0
   20e9a:	e017      	b.n	20ecc <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   20e9c:	682b      	ldr	r3, [r5, #0]
   20e9e:	781b      	ldrb	r3, [r3, #0]
   20ea0:	2b00      	cmp	r3, #0
   20ea2:	d1f9      	bne.n	20e98 <find_info_cb+0x32>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   20ea4:	6860      	ldr	r0, [r4, #4]
   20ea6:	2104      	movs	r1, #4
   20ea8:	3008      	adds	r0, #8
   20eaa:	f001 fb75 	bl	22598 <net_buf_simple_add>
		data->info16->handle = sys_cpu_to_le16(attr->handle);
   20eae:	8a2b      	ldrh	r3, [r5, #16]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   20eb0:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(attr->handle);
   20eb2:	8003      	strh	r3, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   20eb4:	682b      	ldr	r3, [r5, #0]
   20eb6:	885b      	ldrh	r3, [r3, #2]
   20eb8:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   20eba:	6863      	ldr	r3, [r4, #4]
   20ebc:	f8b6 0066 	ldrh.w	r0, [r6, #102]	; 0x66
   20ec0:	899b      	ldrh	r3, [r3, #12]
   20ec2:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   20ec4:	2804      	cmp	r0, #4
   20ec6:	bf94      	ite	ls
   20ec8:	2000      	movls	r0, #0
   20eca:	2001      	movhi	r0, #1
}
   20ecc:	bd70      	pop	{r4, r5, r6, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   20ece:	682b      	ldr	r3, [r5, #0]
   20ed0:	781b      	ldrb	r3, [r3, #0]
   20ed2:	2b02      	cmp	r3, #2
   20ed4:	d1e0      	bne.n	20e98 <find_info_cb+0x32>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   20ed6:	6860      	ldr	r0, [r4, #4]
   20ed8:	2112      	movs	r1, #18
   20eda:	3008      	adds	r0, #8
   20edc:	f001 fb5c 	bl	22598 <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   20ee0:	6829      	ldr	r1, [r5, #0]
		data->info128->handle = sys_cpu_to_le16(attr->handle);
   20ee2:	8a2b      	ldrh	r3, [r5, #16]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   20ee4:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   20ee6:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(attr->handle);
   20ee8:	f820 3b02 	strh.w	r3, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   20eec:	3101      	adds	r1, #1
   20eee:	f7fe ffc2 	bl	1fe76 <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   20ef2:	6863      	ldr	r3, [r4, #4]
   20ef4:	f8b6 0066 	ldrh.w	r0, [r6, #102]	; 0x66
   20ef8:	899b      	ldrh	r3, [r3, #12]
   20efa:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   20efc:	2812      	cmp	r0, #18
   20efe:	e7e2      	b.n	20ec6 <find_info_cb+0x60>

00020f00 <att_chan_read>:
{
   20f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20f04:	4680      	mov	r8, r0
   20f06:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   20f08:	4610      	mov	r0, r2
{
   20f0a:	4699      	mov	r9, r3
   20f0c:	468b      	mov	fp, r1
   20f0e:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   20f10:	f7ff ff3a 	bl	20d88 <net_buf_frags_len>
   20f14:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
   20f18:	4283      	cmp	r3, r0
   20f1a:	d97a      	bls.n	21012 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   20f1c:	f8d8 3008 	ldr.w	r3, [r8, #8]
   20f20:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   20f22:	4630      	mov	r0, r6
   20f24:	f001 fb0a 	bl	2253c <net_buf_frag_last>
	size_t len, total = 0;
   20f28:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   20f2c:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   20f2e:	4630      	mov	r0, r6
   20f30:	f7ff ff2a 	bl	20d88 <net_buf_frags_len>
   20f34:	f8b8 4066 	ldrh.w	r4, [r8, #102]	; 0x66
   20f38:	f105 0708 	add.w	r7, r5, #8
   20f3c:	1a24      	subs	r4, r4, r0
   20f3e:	4638      	mov	r0, r7
   20f40:	f001 fb83 	bl	2264a <net_buf_simple_tailroom>
   20f44:	4284      	cmp	r4, r0
   20f46:	d211      	bcs.n	20f6c <att_chan_read+0x6c>
   20f48:	4630      	mov	r0, r6
   20f4a:	f7ff ff1d 	bl	20d88 <net_buf_frags_len>
   20f4e:	f8b8 4066 	ldrh.w	r4, [r8, #102]	; 0x66
   20f52:	1a24      	subs	r4, r4, r0
		if (!len) {
   20f54:	bb34      	cbnz	r4, 20fa4 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   20f56:	79b0      	ldrb	r0, [r6, #6]
   20f58:	f7fa fd06 	bl	1b968 <net_buf_pool_get>
   20f5c:	2200      	movs	r2, #0
   20f5e:	2300      	movs	r3, #0
   20f60:	f001 fab2 	bl	224c8 <net_buf_alloc_fixed>
			if (!frag) {
   20f64:	4605      	mov	r5, r0
   20f66:	b930      	cbnz	r0, 20f76 <att_chan_read+0x76>
	return total;
   20f68:	4657      	mov	r7, sl
   20f6a:	e02c      	b.n	20fc6 <att_chan_read+0xc6>
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   20f6c:	4638      	mov	r0, r7
   20f6e:	f001 fb6c 	bl	2264a <net_buf_simple_tailroom>
   20f72:	4604      	mov	r4, r0
   20f74:	e7ee      	b.n	20f54 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   20f76:	4601      	mov	r1, r0
   20f78:	4630      	mov	r0, r6
   20f7a:	f001 faf0 	bl	2255e <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   20f7e:	4630      	mov	r0, r6
   20f80:	f7ff ff02 	bl	20d88 <net_buf_frags_len>
   20f84:	f8b8 4066 	ldrh.w	r4, [r8, #102]	; 0x66
   20f88:	f105 0708 	add.w	r7, r5, #8
   20f8c:	1a24      	subs	r4, r4, r0
   20f8e:	4638      	mov	r0, r7
   20f90:	f001 fb5b 	bl	2264a <net_buf_simple_tailroom>
   20f94:	4284      	cmp	r4, r0
   20f96:	d21a      	bcs.n	20fce <att_chan_read+0xce>
   20f98:	4630      	mov	r0, r6
   20f9a:	f7ff fef5 	bl	20d88 <net_buf_frags_len>
   20f9e:	f8b8 4066 	ldrh.w	r4, [r8, #102]	; 0x66
   20fa2:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   20fa4:	68a9      	ldr	r1, [r5, #8]
   20fa6:	89aa      	ldrh	r2, [r5, #12]
   20fa8:	f8db 7004 	ldr.w	r7, [fp, #4]
   20fac:	9803      	ldr	r0, [sp, #12]
   20fae:	f8cd 9000 	str.w	r9, [sp]
   20fb2:	440a      	add	r2, r1
   20fb4:	b2a3      	uxth	r3, r4
   20fb6:	4659      	mov	r1, fp
   20fb8:	47b8      	blx	r7
		if (read < 0) {
   20fba:	1e07      	subs	r7, r0, #0
   20fbc:	da0c      	bge.n	20fd8 <att_chan_read+0xd8>
				return total;
   20fbe:	f1ba 0f00 	cmp.w	sl, #0
   20fc2:	bf18      	it	ne
   20fc4:	4657      	movne	r7, sl
}
   20fc6:	4638      	mov	r0, r7
   20fc8:	b005      	add	sp, #20
   20fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   20fce:	4638      	mov	r0, r7
   20fd0:	f001 fb3b 	bl	2264a <net_buf_simple_tailroom>
   20fd4:	4604      	mov	r4, r0
   20fd6:	e7e5      	b.n	20fa4 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   20fd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   20fda:	b993      	cbnz	r3, 21002 <att_chan_read+0x102>
		net_buf_add(frag, read);
   20fdc:	4639      	mov	r1, r7
   20fde:	f105 0008 	add.w	r0, r5, #8
   20fe2:	f001 fad9 	bl	22598 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   20fe6:	4630      	mov	r0, r6
   20fe8:	f7ff fece 	bl	20d88 <net_buf_frags_len>
   20fec:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
		offset += read;
   20ff0:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   20ff2:	4283      	cmp	r3, r0
		total += read;
   20ff4:	44ba      	add	sl, r7
		offset += read;
   20ff6:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   20ffa:	d9b5      	bls.n	20f68 <att_chan_read+0x68>
   20ffc:	42a7      	cmp	r7, r4
   20ffe:	d096      	beq.n	20f2e <att_chan_read+0x2e>
   21000:	e7b2      	b.n	20f68 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   21002:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   21004:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   21006:	4639      	mov	r1, r7
   21008:	4628      	mov	r0, r5
   2100a:	4798      	blx	r3
   2100c:	2800      	cmp	r0, #0
   2100e:	d1e5      	bne.n	20fdc <att_chan_read+0xdc>
   21010:	e7aa      	b.n	20f68 <att_chan_read+0x68>
		return 0;
   21012:	2700      	movs	r7, #0
   21014:	e7d7      	b.n	20fc6 <att_chan_read+0xc6>

00021016 <attr_read_group_cb>:
	if (!data->rsp->len) {
   21016:	68d0      	ldr	r0, [r2, #12]
   21018:	7803      	ldrb	r3, [r0, #0]
   2101a:	3104      	adds	r1, #4
   2101c:	b913      	cbnz	r3, 21024 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   2101e:	7001      	strb	r1, [r0, #0]
	return true;
   21020:	2001      	movs	r0, #1
}
   21022:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   21024:	428b      	cmp	r3, r1
   21026:	d0fb      	beq.n	21020 <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   21028:	6891      	ldr	r1, [r2, #8]
   2102a:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   2102c:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   2102e:	3b04      	subs	r3, #4
   21030:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   21032:	6110      	str	r0, [r2, #16]
		return false;
   21034:	4770      	bx	lr

00021036 <chan_cfm_sent>:
   21036:	30c8      	adds	r0, #200	; 0xc8
   21038:	f3bf 8f5b 	dmb	ish
   2103c:	e850 3f00 	ldrex	r3, [r0]
   21040:	f023 0302 	bic.w	r3, r3, #2
   21044:	e840 3200 	strex	r2, r3, [r0]
   21048:	2a00      	cmp	r2, #0
   2104a:	d1f7      	bne.n	2103c <chan_cfm_sent+0x6>
   2104c:	f3bf 8f5b 	dmb	ish
}
   21050:	4770      	bx	lr

00021052 <chan_rsp_sent>:
   21052:	30c8      	adds	r0, #200	; 0xc8
   21054:	f3bf 8f5b 	dmb	ish
   21058:	e850 3f00 	ldrex	r3, [r0]
   2105c:	f023 0301 	bic.w	r3, r3, #1
   21060:	e840 3200 	strex	r2, r3, [r0]
   21064:	2a00      	cmp	r2, #0
   21066:	d1f7      	bne.n	21058 <chan_rsp_sent+0x6>
   21068:	f3bf 8f5b 	dmb	ish
}
   2106c:	4770      	bx	lr

0002106e <write_cb>:
{
   2106e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   21070:	460c      	mov	r4, r1
   21072:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   21074:	4601      	mov	r1, r0
   21076:	222a      	movs	r2, #42	; 0x2a
   21078:	6820      	ldr	r0, [r4, #0]
   2107a:	f000 fcdf 	bl	21a3c <bt_gatt_check_perm>
   2107e:	4605      	mov	r5, r0
   21080:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   21082:	bb00      	cbnz	r0, 210c6 <write_cb+0x58>
	if (!data->req) {
   21084:	7a23      	ldrb	r3, [r4, #8]
	write = attr->write(data->conn, attr, data->value, data->len,
   21086:	68b7      	ldr	r7, [r6, #8]
   21088:	68e2      	ldr	r2, [r4, #12]
   2108a:	6820      	ldr	r0, [r4, #0]
	if (!data->req) {
   2108c:	2b00      	cmp	r3, #0
		flags |= BT_GATT_WRITE_FLAG_CMD;
   2108e:	bf14      	ite	ne
   21090:	2300      	movne	r3, #0
   21092:	2302      	moveq	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   21094:	9301      	str	r3, [sp, #4]
   21096:	8a63      	ldrh	r3, [r4, #18]
   21098:	9300      	str	r3, [sp, #0]
   2109a:	4631      	mov	r1, r6
   2109c:	8a23      	ldrh	r3, [r4, #16]
   2109e:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   210a0:	1e03      	subs	r3, r0, #0
   210a2:	db05      	blt.n	210b0 <write_cb+0x42>
   210a4:	8a22      	ldrh	r2, [r4, #16]
   210a6:	4293      	cmp	r3, r2
   210a8:	d10b      	bne.n	210c2 <write_cb+0x54>
	data->err = 0U;
   210aa:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   210ac:	2501      	movs	r5, #1
   210ae:	e005      	b.n	210bc <write_cb+0x4e>
	if (err < 0 && err >= -0xff) {
   210b0:	f113 0fff 	cmn.w	r3, #255	; 0xff
   210b4:	d305      	bcc.n	210c2 <write_cb+0x54>
		return -err;
   210b6:	425b      	negs	r3, r3
   210b8:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   210ba:	7523      	strb	r3, [r4, #20]
}
   210bc:	4628      	mov	r0, r5
   210be:	b003      	add	sp, #12
   210c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   210c2:	230e      	movs	r3, #14
   210c4:	e7f9      	b.n	210ba <write_cb+0x4c>
		return BT_GATT_ITER_STOP;
   210c6:	2500      	movs	r5, #0
   210c8:	e7f8      	b.n	210bc <write_cb+0x4e>

000210ca <read_cb>:
{
   210ca:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   210ce:	4606      	mov	r6, r0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   210d0:	6888      	ldr	r0, [r1, #8]
	struct bt_att_chan *chan = data->chan;
   210d2:	f8d1 8000 	ldr.w	r8, [r1]
{
   210d6:	460c      	mov	r4, r1
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   210d8:	3008      	adds	r0, #8
   210da:	2100      	movs	r1, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   210dc:	f8d8 5008 	ldr.w	r5, [r8, #8]
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   210e0:	f001 fa5a 	bl	22598 <net_buf_simple_add>
	data->err = 0x00;
   210e4:	2700      	movs	r7, #0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   210e6:	60e0      	str	r0, [r4, #12]
	data->err = 0x00;
   210e8:	7427      	strb	r7, [r4, #16]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   210ea:	4628      	mov	r0, r5
   210ec:	2215      	movs	r2, #21
   210ee:	4631      	mov	r1, r6
   210f0:	f000 fca4 	bl	21a3c <bt_gatt_check_perm>
   210f4:	4605      	mov	r5, r0
   210f6:	7420      	strb	r0, [r4, #16]
	if (data->err) {
   210f8:	b9a0      	cbnz	r0, 21124 <read_cb+0x5a>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   210fa:	e9cd 0000 	strd	r0, r0, [sp]
   210fe:	88a3      	ldrh	r3, [r4, #4]
   21100:	68a2      	ldr	r2, [r4, #8]
   21102:	4631      	mov	r1, r6
   21104:	4640      	mov	r0, r8
   21106:	f7ff fefb 	bl	20f00 <att_chan_read>
	if (ret < 0) {
   2110a:	1e03      	subs	r3, r0, #0
   2110c:	da0c      	bge.n	21128 <read_cb+0x5e>
	if (err < 0 && err >= -0xff) {
   2110e:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   21112:	bf26      	itte	cs
   21114:	425b      	negcs	r3, r3
   21116:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   21118:	230e      	movcc	r3, #14
		data->err = err_to_att(ret);
   2111a:	7423      	strb	r3, [r4, #16]
}
   2111c:	4628      	mov	r0, r5
   2111e:	b002      	add	sp, #8
   21120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   21124:	463d      	mov	r5, r7
   21126:	e7f9      	b.n	2111c <read_cb+0x52>
	return BT_GATT_ITER_CONTINUE;
   21128:	2501      	movs	r5, #1
   2112a:	e7f7      	b.n	2111c <read_cb+0x52>

0002112c <chan_req_send>:
{
   2112c:	b570      	push	{r4, r5, r6, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2112e:	690e      	ldr	r6, [r1, #16]
{
   21130:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   21132:	4630      	mov	r0, r6
{
   21134:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   21136:	f7ff fe27 	bl	20d88 <net_buf_frags_len>
   2113a:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
   2113e:	4283      	cmp	r3, r0
   21140:	d31a      	bcc.n	21178 <chan_req_send+0x4c>
	chan->req = req;
   21142:	f8c5 10cc 	str.w	r1, [r5, #204]	; 0xcc
	state->offset = net_buf_simple_headroom(buf);
   21146:	f106 0008 	add.w	r0, r6, #8
   2114a:	f001 fa7a 	bl	22642 <net_buf_simple_headroom>
	state->len = buf->len;
   2114e:	89b3      	ldrh	r3, [r6, #12]
	state->offset = net_buf_simple_headroom(buf);
   21150:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
   21152:	81e3      	strh	r3, [r4, #14]
	err = chan_send(chan, net_buf_ref(req->buf), NULL);
   21154:	6920      	ldr	r0, [r4, #16]
   21156:	f001 f9ed 	bl	22534 <net_buf_ref>
   2115a:	2200      	movs	r2, #0
   2115c:	4601      	mov	r1, r0
   2115e:	4628      	mov	r0, r5
   21160:	f7eb fcd4 	bl	cb0c <chan_send>
	if (err < 0) {
   21164:	1e06      	subs	r6, r0, #0
   21166:	da05      	bge.n	21174 <chan_req_send+0x48>
		net_buf_unref(req->buf);
   21168:	6920      	ldr	r0, [r4, #16]
   2116a:	f7fa fcb9 	bl	1bae0 <net_buf_unref>
		chan->req = NULL;
   2116e:	2300      	movs	r3, #0
   21170:	f8c5 30cc 	str.w	r3, [r5, #204]	; 0xcc
}
   21174:	4630      	mov	r0, r6
   21176:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   21178:	f06f 0623 	mvn.w	r6, #35	; 0x23
   2117c:	e7fa      	b.n	21174 <chan_req_send+0x48>

0002117e <bt_att_chan_req_send>:
{
   2117e:	b570      	push	{r4, r5, r6, lr}
   21180:	4604      	mov	r4, r0
   21182:	460d      	mov	r5, r1
	if (k_sem_take(&chan->tx_sem, K_NO_WAIT) < 0) {
   21184:	f500 768c 	add.w	r6, r0, #280	; 0x118
	return z_impl_k_sem_take(sem, timeout);
   21188:	2200      	movs	r2, #0
   2118a:	2300      	movs	r3, #0
   2118c:	4630      	mov	r0, r6
   2118e:	f7fc fb19 	bl	1d7c4 <z_impl_k_sem_take>
   21192:	2800      	cmp	r0, #0
   21194:	db0a      	blt.n	211ac <bt_att_chan_req_send+0x2e>
	err = chan_req_send(chan, req);
   21196:	4620      	mov	r0, r4
   21198:	4629      	mov	r1, r5
   2119a:	f7ff ffc7 	bl	2112c <chan_req_send>
	if (err < 0) {
   2119e:	1e04      	subs	r4, r0, #0
   211a0:	da02      	bge.n	211a8 <bt_att_chan_req_send+0x2a>
	z_impl_k_sem_give(sem);
   211a2:	4630      	mov	r0, r6
   211a4:	f7fc fae8 	bl	1d778 <z_impl_k_sem_give>
}
   211a8:	4620      	mov	r0, r4
   211aa:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
   211ac:	f06f 040a 	mvn.w	r4, #10
   211b0:	e7fa      	b.n	211a8 <bt_att_chan_req_send+0x2a>

000211b2 <bt_att_status>:
{
   211b2:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   211b4:	f3bf 8f5b 	dmb	ish
   211b8:	680b      	ldr	r3, [r1, #0]
   211ba:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   211be:	07db      	lsls	r3, r3, #31
{
   211c0:	4605      	mov	r5, r0
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   211c2:	d518      	bpl.n	211f6 <bt_att_status+0x44>
	if (chan->req) {
   211c4:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
   211c8:	b9ab      	cbnz	r3, 211f6 <bt_att_status+0x44>
	node = sys_slist_get(&chan->att->reqs);
   211ca:	f850 0c08 	ldr.w	r0, [r0, #-8]
   211ce:	3004      	adds	r0, #4
   211d0:	f7ff fdb5 	bl	20d3e <sys_slist_get>
	if (!node) {
   211d4:	4604      	mov	r4, r0
   211d6:	b170      	cbz	r0, 211f6 <bt_att_status+0x44>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   211d8:	4601      	mov	r1, r0
   211da:	f1a5 0008 	sub.w	r0, r5, #8
   211de:	f7ff ffce 	bl	2117e <bt_att_chan_req_send>
   211e2:	2800      	cmp	r0, #0
   211e4:	da07      	bge.n	211f6 <bt_att_status+0x44>
	sys_slist_prepend(&chan->att->reqs, node);
   211e6:	f855 3c08 	ldr.w	r3, [r5, #-8]
Z_GENLIST_PREPEND(slist, snode)
   211ea:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   211ec:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   211ee:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   211f0:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   211f2:	b902      	cbnz	r2, 211f6 <bt_att_status+0x44>
	list->tail = node;
   211f4:	609c      	str	r4, [r3, #8]
}
   211f6:	bd38      	pop	{r3, r4, r5, pc}

000211f8 <bt_att_chan_send>:
{
   211f8:	b570      	push	{r4, r5, r6, lr}
   211fa:	4604      	mov	r4, r0
   211fc:	460e      	mov	r6, r1
	if (!cb) {
   211fe:	4615      	mov	r5, r2
   21200:	b132      	cbz	r2, 21210 <bt_att_chan_send+0x18>
	return chan_send(chan, buf, cb);
   21202:	462a      	mov	r2, r5
   21204:	4631      	mov	r1, r6
   21206:	4620      	mov	r0, r4
}
   21208:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return chan_send(chan, buf, cb);
   2120c:	f7eb bc7e 	b.w	cb0c <chan_send>
	return z_impl_k_sem_take(sem, timeout);
   21210:	2200      	movs	r2, #0
   21212:	2300      	movs	r3, #0
   21214:	f500 708c 	add.w	r0, r0, #280	; 0x118
   21218:	f7fc fad4 	bl	1d7c4 <z_impl_k_sem_take>
		if (k_sem_take(&chan->tx_sem, K_NO_WAIT) < 0) {
   2121c:	2800      	cmp	r0, #0
   2121e:	daf0      	bge.n	21202 <bt_att_chan_send+0xa>
}
   21220:	f06f 000a 	mvn.w	r0, #10
   21224:	bd70      	pop	{r4, r5, r6, pc}

00021226 <bt_att_chan_send_rsp>:
{
   21226:	b538      	push	{r3, r4, r5, lr}
   21228:	4604      	mov	r4, r0
   2122a:	460d      	mov	r5, r1
	err = bt_att_chan_send(chan, buf, cb);
   2122c:	f7ff ffe4 	bl	211f8 <bt_att_chan_send>
	if (err) {
   21230:	b130      	cbz	r0, 21240 <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   21232:	4629      	mov	r1, r5
   21234:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
}
   21238:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   2123c:	f001 b96d 	b.w	2251a <net_buf_put>
}
   21240:	bd38      	pop	{r3, r4, r5, pc}

00021242 <process_queue>:
{
   21242:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   21244:	2200      	movs	r2, #0
{
   21246:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   21248:	2300      	movs	r3, #0
   2124a:	4608      	mov	r0, r1
{
   2124c:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   2124e:	f001 f940 	bl	224d2 <net_buf_get>
	if (buf) {
   21252:	4605      	mov	r5, r0
   21254:	b160      	cbz	r0, 21270 <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   21256:	4601      	mov	r1, r0
   21258:	2200      	movs	r2, #0
   2125a:	4620      	mov	r0, r4
   2125c:	f7eb fc56 	bl	cb0c <chan_send>
		if (err) {
   21260:	4604      	mov	r4, r0
   21262:	b118      	cbz	r0, 2126c <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   21264:	4629      	mov	r1, r5
   21266:	4630      	mov	r0, r6
   21268:	f001 fd55 	bl	22d16 <k_queue_prepend>
}
   2126c:	4620      	mov	r0, r4
   2126e:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   21270:	f06f 0401 	mvn.w	r4, #1
   21274:	e7fa      	b.n	2126c <process_queue+0x2a>

00021276 <bt_att_sent>:
{
   21276:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   21278:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
	struct bt_att *att = chan->att;
   2127c:	f850 5c08 	ldr.w	r5, [r0, #-8]
{
   21280:	4604      	mov	r4, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   21282:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   21286:	b10b      	cbz	r3, 2128c <bt_att_sent+0x16>
		chan->sent(chan);
   21288:	4638      	mov	r0, r7
   2128a:	4798      	blx	r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2128c:	f3bf 8f5b 	dmb	ish
   21290:	f104 03c0 	add.w	r3, r4, #192	; 0xc0
   21294:	e853 2f00 	ldrex	r2, [r3]
   21298:	f022 0210 	bic.w	r2, r2, #16
   2129c:	e843 2100 	strex	r1, r2, [r3]
   212a0:	2900      	cmp	r1, #0
   212a2:	d1f7      	bne.n	21294 <bt_att_sent+0x1e>
   212a4:	f3bf 8f5b 	dmb	ish
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   212a8:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
   212ac:	b98b      	cbnz	r3, 212d2 <bt_att_sent+0x5c>
   212ae:	686b      	ldr	r3, [r5, #4]
   212b0:	b17b      	cbz	r3, 212d2 <bt_att_sent+0x5c>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   212b2:	1d28      	adds	r0, r5, #4
   212b4:	f7ff fd43 	bl	20d3e <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   212b8:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   212ba:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   212bc:	4638      	mov	r0, r7
   212be:	f7ff ff35 	bl	2112c <chan_req_send>
   212c2:	2800      	cmp	r0, #0
   212c4:	da17      	bge.n	212f6 <bt_att_sent+0x80>
Z_GENLIST_PREPEND(slist, snode)
   212c6:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   212c8:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   212ca:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
   212cc:	606e      	str	r6, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   212ce:	b903      	cbnz	r3, 212d2 <bt_att_sent+0x5c>
	list->tail = node;
   212d0:	60ae      	str	r6, [r5, #8]
	err = process_queue(chan, &chan->tx_queue);
   212d2:	f104 01c8 	add.w	r1, r4, #200	; 0xc8
   212d6:	4638      	mov	r0, r7
   212d8:	f7ff ffb3 	bl	21242 <process_queue>
	if (!err) {
   212dc:	b158      	cbz	r0, 212f6 <bt_att_sent+0x80>
	err = process_queue(chan, &att->tx_queue);
   212de:	f105 010c 	add.w	r1, r5, #12
   212e2:	4638      	mov	r0, r7
   212e4:	f7ff ffad 	bl	21242 <process_queue>
	if (!err) {
   212e8:	b128      	cbz	r0, 212f6 <bt_att_sent+0x80>
	z_impl_k_sem_give(sem);
   212ea:	f504 7088 	add.w	r0, r4, #272	; 0x110
}
   212ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   212f2:	f7fc ba41 	b.w	1d778 <z_impl_k_sem_give>
   212f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000212f8 <att_write_cmd>:
{
   212f8:	b530      	push	{r4, r5, lr}
   212fa:	460c      	mov	r4, r1
   212fc:	b085      	sub	sp, #20
   212fe:	4605      	mov	r5, r0
	handle = net_buf_pull_le16(buf);
   21300:	f101 0008 	add.w	r0, r1, #8
   21304:	f001 f995 	bl	22632 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   21308:	89a2      	ldrh	r2, [r4, #12]
   2130a:	9202      	str	r2, [sp, #8]
   2130c:	68a2      	ldr	r2, [r4, #8]
   2130e:	9201      	str	r2, [sp, #4]
   21310:	2200      	movs	r2, #0
	handle = net_buf_pull_le16(buf);
   21312:	4603      	mov	r3, r0
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   21314:	9200      	str	r2, [sp, #0]
   21316:	4611      	mov	r1, r2
   21318:	4628      	mov	r0, r5
   2131a:	f7eb fd81 	bl	ce20 <att_write_rsp>
}
   2131e:	b005      	add	sp, #20
   21320:	bd30      	pop	{r4, r5, pc}

00021322 <att_write_req>:
{
   21322:	b530      	push	{r4, r5, lr}
   21324:	460c      	mov	r4, r1
   21326:	b085      	sub	sp, #20
   21328:	4605      	mov	r5, r0
	handle = net_buf_pull_le16(buf);
   2132a:	f101 0008 	add.w	r0, r1, #8
   2132e:	f001 f980 	bl	22632 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   21332:	89a2      	ldrh	r2, [r4, #12]
   21334:	9202      	str	r2, [sp, #8]
   21336:	68a2      	ldr	r2, [r4, #8]
   21338:	9201      	str	r2, [sp, #4]
   2133a:	2200      	movs	r2, #0
	handle = net_buf_pull_le16(buf);
   2133c:	4603      	mov	r3, r0
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   2133e:	9200      	str	r2, [sp, #0]
   21340:	2112      	movs	r1, #18
   21342:	2213      	movs	r2, #19
   21344:	4628      	mov	r0, r5
   21346:	f7eb fd6b 	bl	ce20 <att_write_rsp>
}
   2134a:	b005      	add	sp, #20
   2134c:	bd30      	pop	{r4, r5, pc}

0002134e <att_read_blob_req>:
{
   2134e:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   21350:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   21352:	8813      	ldrh	r3, [r2, #0]
   21354:	8852      	ldrh	r2, [r2, #2]
   21356:	9200      	str	r2, [sp, #0]
   21358:	210c      	movs	r1, #12
   2135a:	220d      	movs	r2, #13
   2135c:	f7eb ff7e 	bl	d25c <att_read_rsp>
}
   21360:	b003      	add	sp, #12
   21362:	f85d fb04 	ldr.w	pc, [sp], #4

00021366 <att_read_req>:
{
   21366:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   21368:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   2136a:	2200      	movs	r2, #0
   2136c:	881b      	ldrh	r3, [r3, #0]
   2136e:	9200      	str	r2, [sp, #0]
   21370:	210a      	movs	r1, #10
   21372:	220b      	movs	r2, #11
   21374:	f7eb ff72 	bl	d25c <att_read_rsp>
}
   21378:	b003      	add	sp, #12
   2137a:	f85d fb04 	ldr.w	pc, [sp], #4

0002137e <bt_att_init>:
	bt_gatt_init();
   2137e:	f7ec bea7 	b.w	e0d0 <bt_gatt_init>

00021382 <att_req_destroy>:
{
   21382:	b510      	push	{r4, lr}
   21384:	4604      	mov	r4, r0
	if (req->buf) {
   21386:	6900      	ldr	r0, [r0, #16]
   21388:	b108      	cbz	r0, 2138e <att_req_destroy+0xc>
		net_buf_unref(req->buf);
   2138a:	f7fa fba9 	bl	1bae0 <net_buf_unref>
	if (req->destroy) {
   2138e:	68a3      	ldr	r3, [r4, #8]
   21390:	b10b      	cbz	r3, 21396 <att_req_destroy+0x14>
		req->destroy(req);
   21392:	4620      	mov	r0, r4
   21394:	4798      	blx	r3
	bt_att_req_free(req);
   21396:	4620      	mov	r0, r4
}
   21398:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_req_free(req);
   2139c:	f7ec b904 	b.w	d5a8 <bt_att_req_free>

000213a0 <att_handle_find_info_rsp>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   213a0:	898a      	ldrh	r2, [r1, #12]
   213a2:	6889      	ldr	r1, [r1, #8]
   213a4:	2300      	movs	r3, #0
   213a6:	f7ec b90b 	b.w	d5c0 <att_handle_rsp>

000213aa <att_handle_find_type_rsp>:
   213aa:	f7ff bff9 	b.w	213a0 <att_handle_find_info_rsp>

000213ae <att_handle_read_type_rsp>:
   213ae:	f7ff bff7 	b.w	213a0 <att_handle_find_info_rsp>

000213b2 <att_handle_read_rsp>:
   213b2:	f7ff bff5 	b.w	213a0 <att_handle_find_info_rsp>

000213b6 <att_handle_read_blob_rsp>:
   213b6:	f7ff bff3 	b.w	213a0 <att_handle_find_info_rsp>

000213ba <att_handle_read_mult_rsp>:
   213ba:	f7ff bff1 	b.w	213a0 <att_handle_find_info_rsp>

000213be <att_handle_read_group_rsp>:
   213be:	f7ff bfef 	b.w	213a0 <att_handle_find_info_rsp>

000213c2 <att_handle_write_rsp>:
   213c2:	f7ff bfed 	b.w	213a0 <att_handle_find_info_rsp>

000213c6 <att_handle_prepare_write_rsp>:
   213c6:	f7ff bfeb 	b.w	213a0 <att_handle_find_info_rsp>

000213ca <att_handle_exec_write_rsp>:
   213ca:	f7ff bfe9 	b.w	213a0 <att_handle_find_info_rsp>

000213ce <att_confirm>:
   213ce:	f7ff bfe7 	b.w	213a0 <att_handle_find_info_rsp>

000213d2 <att_mtu_rsp>:
{
   213d2:	460a      	mov	r2, r1
	rsp = (void *)buf->data;
   213d4:	6889      	ldr	r1, [r1, #8]
	mtu = sys_le16_to_cpu(rsp->mtu);
   213d6:	880b      	ldrh	r3, [r1, #0]
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   213d8:	2b16      	cmp	r3, #22
{
   213da:	b410      	push	{r4}
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   213dc:	d805      	bhi.n	213ea <att_mtu_rsp+0x18>
		return att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_INVALID_PDU);
   213de:	2200      	movs	r2, #0
   213e0:	2304      	movs	r3, #4
   213e2:	4611      	mov	r1, r2
}
   213e4:	bc10      	pop	{r4}
	return att_handle_rsp(chan, rsp, buf->len, 0);
   213e6:	f7ec b8eb 	b.w	d5c0 <att_handle_rsp>
	chan->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
   213ea:	2bf7      	cmp	r3, #247	; 0xf7
   213ec:	bf28      	it	cs
   213ee:	23f7      	movcs	r3, #247	; 0xf7
   213f0:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   213f4:	f8a0 3066 	strh.w	r3, [r0, #102]	; 0x66
	return att_handle_rsp(chan, rsp, buf->len, 0);
   213f8:	8992      	ldrh	r2, [r2, #12]
   213fa:	2300      	movs	r3, #0
   213fc:	e7f2      	b.n	213e4 <att_mtu_rsp+0x12>

000213fe <att_chan_detach>:
{
   213fe:	b570      	push	{r4, r5, r6, lr}
   21400:	4604      	mov	r4, r0
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   21402:	6800      	ldr	r0, [r0, #0]
   21404:	f504 719a 	add.w	r1, r4, #308	; 0x134
   21408:	303c      	adds	r0, #60	; 0x3c
   2140a:	f7ff fca2 	bl	20d52 <sys_slist_find_and_remove>
   2140e:	250a      	movs	r5, #10
		k_sem_give(&chan->tx_sem);
   21410:	f504 768c 	add.w	r6, r4, #280	; 0x118
   21414:	4630      	mov	r0, r6
   21416:	f7fc f9af 	bl	1d778 <z_impl_k_sem_give>
	for (i = 0; i < CONFIG_BT_ATT_TX_MAX; i++) {
   2141a:	3d01      	subs	r5, #1
   2141c:	d1fa      	bne.n	21414 <att_chan_detach+0x16>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   2141e:	f104 05d0 	add.w	r5, r4, #208	; 0xd0
   21422:	2200      	movs	r2, #0
   21424:	2300      	movs	r3, #0
   21426:	4628      	mov	r0, r5
   21428:	f001 f853 	bl	224d2 <net_buf_get>
   2142c:	4602      	mov	r2, r0
   2142e:	b950      	cbnz	r0, 21446 <att_chan_detach+0x48>
	if (chan->req) {
   21430:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   21434:	b123      	cbz	r3, 21440 <att_chan_detach+0x42>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   21436:	4601      	mov	r1, r0
   21438:	230e      	movs	r3, #14
   2143a:	4620      	mov	r0, r4
   2143c:	f7ec f8c0 	bl	d5c0 <att_handle_rsp>
	chan->att = NULL;
   21440:	2300      	movs	r3, #0
   21442:	6023      	str	r3, [r4, #0]
}
   21444:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
   21446:	f7fa fb4b 	bl	1bae0 <net_buf_unref>
   2144a:	e7ea      	b.n	21422 <att_chan_detach+0x24>

0002144c <bt_att_disconnected>:
{
   2144c:	b538      	push	{r3, r4, r5, lr}
   2144e:	4604      	mov	r4, r0
	struct bt_att *att = att_chan->att;
   21450:	f850 5d08 	ldr.w	r5, [r0, #-8]!
	att_chan_detach(att_chan);
   21454:	f7ff ffd3 	bl	213fe <att_chan_detach>
	if (!sys_slist_is_empty(&att->chans)) {
   21458:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   2145a:	b93b      	cbnz	r3, 2146c <bt_att_disconnected+0x20>
	att_reset(att);
   2145c:	4628      	mov	r0, r5
   2145e:	f7ec f999 	bl	d794 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
   21462:	6820      	ldr	r0, [r4, #0]
}
   21464:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_disconnected(ch->chan.conn);
   21468:	f7ed b954 	b.w	e714 <bt_gatt_disconnected>
}
   2146c:	bd38      	pop	{r3, r4, r5, pc}

0002146e <bt_att_send>:
{
   2146e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   21472:	4605      	mov	r5, r0
   21474:	460e      	mov	r6, r1
   21476:	4614      	mov	r4, r2
   21478:	4698      	mov	r8, r3
	att = att_get(conn);
   2147a:	f7eb fa1d 	bl	c8b8 <att_get>
	if (!att) {
   2147e:	4607      	mov	r7, r0
   21480:	b938      	cbnz	r0, 21492 <bt_att_send+0x24>
		net_buf_unref(buf);
   21482:	4630      	mov	r0, r6
   21484:	f7fa fb2c 	bl	1bae0 <net_buf_unref>
		return -ENOTCONN;
   21488:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
   2148c:	b002      	add	sp, #8
   2148e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   21492:	b144      	cbz	r4, 214a6 <bt_att_send+0x38>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   21494:	f8cd 8000 	str.w	r8, [sp]
   21498:	4623      	mov	r3, r4
   2149a:	4632      	mov	r2, r6
   2149c:	2104      	movs	r1, #4
   2149e:	4628      	mov	r0, r5
   214a0:	f7ff fa6f 	bl	20982 <bt_l2cap_send_cb>
   214a4:	e7f2      	b.n	2148c <bt_att_send+0x1e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   214a6:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
   214a8:	b184      	cbz	r4, 214cc <bt_att_send+0x5e>
   214aa:	f5b4 759a 	subs.w	r5, r4, #308	; 0x134
   214ae:	d00f      	beq.n	214d0 <bt_att_send+0x62>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   214b0:	6824      	ldr	r4, [r4, #0]
   214b2:	b10c      	cbz	r4, 214b8 <bt_att_send+0x4a>
   214b4:	f5a4 749a 	sub.w	r4, r4, #308	; 0x134
   214b8:	2000      	movs	r0, #0
   214ba:	b95d      	cbnz	r5, 214d4 <bt_att_send+0x66>
	if (ret < 0) {
   214bc:	b188      	cbz	r0, 214e2 <bt_att_send+0x74>
		net_buf_put(&att->tx_queue, buf);
   214be:	f107 000c 	add.w	r0, r7, #12
   214c2:	4631      	mov	r1, r6
   214c4:	f001 f829 	bl	2251a <net_buf_put>
	return 0;
   214c8:	4628      	mov	r0, r5
   214ca:	e7df      	b.n	2148c <bt_att_send+0x1e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   214cc:	4625      	mov	r5, r4
   214ce:	e7f3      	b.n	214b8 <bt_att_send+0x4a>
   214d0:	462c      	mov	r4, r5
   214d2:	e7f1      	b.n	214b8 <bt_att_send+0x4a>
		ret = bt_att_chan_send(chan, buf, NULL);
   214d4:	2200      	movs	r2, #0
   214d6:	4631      	mov	r1, r6
   214d8:	4628      	mov	r0, r5
   214da:	f7ff fe8d 	bl	211f8 <bt_att_chan_send>
		if (ret >= 0) {
   214de:	2800      	cmp	r0, #0
   214e0:	db01      	blt.n	214e6 <bt_att_send+0x78>
	return 0;
   214e2:	2000      	movs	r0, #0
   214e4:	e7d2      	b.n	2148c <bt_att_send+0x1e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   214e6:	b154      	cbz	r4, 214fe <bt_att_send+0x90>
Z_GENLIST_PEEK_NEXT(slist, snode)
   214e8:	f514 739a 	adds.w	r3, r4, #308	; 0x134
   214ec:	d004      	beq.n	214f8 <bt_att_send+0x8a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   214ee:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
   214f2:	b10b      	cbz	r3, 214f8 <bt_att_send+0x8a>
   214f4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
   214f8:	4625      	mov	r5, r4
   214fa:	461c      	mov	r4, r3
   214fc:	e7dd      	b.n	214ba <bt_att_send+0x4c>
   214fe:	4623      	mov	r3, r4
   21500:	e7fa      	b.n	214f8 <bt_att_send+0x8a>

00021502 <bt_att_req_send>:
{
   21502:	b570      	push	{r4, r5, r6, lr}
   21504:	460c      	mov	r4, r1
	att = att_get(conn);
   21506:	f7eb f9d7 	bl	c8b8 <att_get>
	if (!att) {
   2150a:	4605      	mov	r5, r0
   2150c:	b930      	cbnz	r0, 2151c <bt_att_req_send+0x1a>
		net_buf_unref(req->buf);
   2150e:	6920      	ldr	r0, [r4, #16]
   21510:	f7fa fae6 	bl	1bae0 <net_buf_unref>
		req->buf = NULL;
   21514:	6125      	str	r5, [r4, #16]
		return -ENOTCONN;
   21516:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
   2151a:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2151c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   2151e:	b153      	cbz	r3, 21536 <bt_att_req_send+0x34>
   21520:	f5b3 709a 	subs.w	r0, r3, #308	; 0x134
   21524:	d007      	beq.n	21536 <bt_att_req_send+0x34>
   21526:	681e      	ldr	r6, [r3, #0]
   21528:	b10e      	cbz	r6, 2152e <bt_att_req_send+0x2c>
   2152a:	f5a6 769a 	sub.w	r6, r6, #308	; 0x134
		if (!chan->req) {
   2152e:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
   21532:	b143      	cbz	r3, 21546 <bt_att_req_send+0x44>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   21534:	b96e      	cbnz	r6, 21552 <bt_att_req_send+0x50>
	parent->next = child;
   21536:	2000      	movs	r0, #0
   21538:	6020      	str	r0, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   2153a:	68ab      	ldr	r3, [r5, #8]
   2153c:	b9a3      	cbnz	r3, 21568 <bt_att_req_send+0x66>
	list->head = node;
   2153e:	e9c5 4401 	strd	r4, r4, [r5, #4]
	return 0;
   21542:	4618      	mov	r0, r3
}
   21544:	e7e9      	b.n	2151a <bt_att_req_send+0x18>
			ret = bt_att_chan_req_send(chan, req);
   21546:	4621      	mov	r1, r4
   21548:	f7ff fe19 	bl	2117e <bt_att_chan_req_send>
			if (ret >= 0) {
   2154c:	2800      	cmp	r0, #0
   2154e:	dbf1      	blt.n	21534 <bt_att_req_send+0x32>
   21550:	e7e3      	b.n	2151a <bt_att_req_send+0x18>
Z_GENLIST_PEEK_NEXT(slist, snode)
   21552:	f516 739a 	adds.w	r3, r6, #308	; 0x134
   21556:	d004      	beq.n	21562 <bt_att_req_send+0x60>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   21558:	f8d6 3134 	ldr.w	r3, [r6, #308]	; 0x134
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2155c:	b10b      	cbz	r3, 21562 <bt_att_req_send+0x60>
   2155e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
{
   21562:	4630      	mov	r0, r6
   21564:	461e      	mov	r6, r3
   21566:	e7e2      	b.n	2152e <bt_att_req_send+0x2c>
	parent->next = child;
   21568:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2156a:	60ac      	str	r4, [r5, #8]
}
   2156c:	e7d5      	b.n	2151a <bt_att_req_send+0x18>

0002156e <gatt_ccc_changed>:
{
   2156e:	460b      	mov	r3, r1
   21570:	8a49      	ldrh	r1, [r1, #18]
   21572:	8b9a      	ldrh	r2, [r3, #28]
   21574:	4291      	cmp	r1, r2
   21576:	bf38      	it	cc
   21578:	4611      	movcc	r1, r2
   2157a:	8cda      	ldrh	r2, [r3, #38]	; 0x26
   2157c:	4291      	cmp	r1, r2
   2157e:	bf38      	it	cc
   21580:	4611      	movcc	r1, r2
   21582:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
   21584:	4291      	cmp	r1, r2
   21586:	bf38      	it	cc
   21588:	4611      	movcc	r1, r2
   2158a:	891a      	ldrh	r2, [r3, #8]
   2158c:	4291      	cmp	r1, r2
   2158e:	bf38      	it	cc
   21590:	4611      	movcc	r1, r2
	if (value != ccc->value) {
   21592:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
   21594:	428a      	cmp	r2, r1
   21596:	d003      	beq.n	215a0 <gatt_ccc_changed+0x32>
		ccc->value = value;
   21598:	8659      	strh	r1, [r3, #50]	; 0x32
		if (ccc->cfg_changed) {
   2159a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   2159c:	b103      	cbz	r3, 215a0 <gatt_ccc_changed+0x32>
			ccc->cfg_changed(attr, value);
   2159e:	4718      	bx	r3
}
   215a0:	4770      	bx	lr

000215a2 <gatt_indicate_rsp>:
{
   215a2:	b410      	push	{r4}
   215a4:	9b01      	ldr	r3, [sp, #4]
   215a6:	460a      	mov	r2, r1
	params->func(conn, params->attr, err);
   215a8:	e9d3 1401 	ldrd	r1, r4, [r3, #4]
   215ac:	4623      	mov	r3, r4
}
   215ae:	bc10      	pop	{r4}
	params->func(conn, params->attr, err);
   215b0:	4718      	bx	r3

000215b2 <gen_hash_m>:
{
   215b2:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   215b4:	6807      	ldr	r7, [r0, #0]
   215b6:	783e      	ldrb	r6, [r7, #0]
{
   215b8:	b089      	sub	sp, #36	; 0x24
   215ba:	4605      	mov	r5, r0
   215bc:	460c      	mov	r4, r1
	if (attr->uuid->type != BT_UUID_TYPE_16)
   215be:	b10e      	cbz	r6, 215c4 <gen_hash_m+0x12>
	switch (u16->val) {
   215c0:	2601      	movs	r6, #1
   215c2:	e015      	b.n	215f0 <gen_hash_m+0x3e>
   215c4:	887b      	ldrh	r3, [r7, #2]
   215c6:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   215ca:	d004      	beq.n	215d6 <gen_hash_m+0x24>
   215cc:	d813      	bhi.n	215f6 <gen_hash_m+0x44>
   215ce:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   215d2:	2b03      	cmp	r3, #3
   215d4:	d8f4      	bhi.n	215c0 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(attr->handle);
   215d6:	8a2b      	ldrh	r3, [r5, #16]
   215d8:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   215dc:	2202      	movs	r2, #2
   215de:	f10d 010e 	add.w	r1, sp, #14
   215e2:	4620      	mov	r0, r4
   215e4:	f7fe fb57 	bl	1fc96 <tc_cmac_update>
   215e8:	b9e8      	cbnz	r0, 21626 <gen_hash_m+0x74>
			state->err = -EINVAL;
   215ea:	f06f 0315 	mvn.w	r3, #21
   215ee:	65a3      	str	r3, [r4, #88]	; 0x58
}
   215f0:	4630      	mov	r0, r6
   215f2:	b009      	add	sp, #36	; 0x24
   215f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   215f6:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   215fa:	33ff      	adds	r3, #255	; 0xff
   215fc:	b29b      	uxth	r3, r3
   215fe:	2b04      	cmp	r3, #4
   21600:	d8de      	bhi.n	215c0 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(attr->handle);
   21602:	8a03      	ldrh	r3, [r0, #16]
   21604:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   21608:	2202      	movs	r2, #2
   2160a:	f10d 010e 	add.w	r1, sp, #14
   2160e:	4620      	mov	r0, r4
   21610:	f7fe fb41 	bl	1fc96 <tc_cmac_update>
   21614:	2800      	cmp	r0, #0
   21616:	d0e8      	beq.n	215ea <gen_hash_m+0x38>
		value = sys_cpu_to_le16(u16->val);
   21618:	887b      	ldrh	r3, [r7, #2]
   2161a:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2161e:	2202      	movs	r2, #2
   21620:	f10d 010e 	add.w	r1, sp, #14
   21624:	e017      	b.n	21656 <gen_hash_m+0xa4>
		value = sys_cpu_to_le16(u16->val);
   21626:	887b      	ldrh	r3, [r7, #2]
   21628:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2162c:	2202      	movs	r2, #2
   2162e:	f10d 010e 	add.w	r1, sp, #14
   21632:	4620      	mov	r0, r4
   21634:	f7fe fb2f 	bl	1fc96 <tc_cmac_update>
   21638:	2800      	cmp	r0, #0
   2163a:	d0d6      	beq.n	215ea <gen_hash_m+0x38>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   2163c:	2000      	movs	r0, #0
   2163e:	2310      	movs	r3, #16
   21640:	eb0d 0203 	add.w	r2, sp, r3
   21644:	686f      	ldr	r7, [r5, #4]
   21646:	9000      	str	r0, [sp, #0]
   21648:	4629      	mov	r1, r5
   2164a:	47b8      	blx	r7
		if (len < 0) {
   2164c:	1e02      	subs	r2, r0, #0
   2164e:	da01      	bge.n	21654 <gen_hash_m+0xa2>
			state->err = len;
   21650:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   21652:	e7cd      	b.n	215f0 <gen_hash_m+0x3e>
		if (tc_cmac_update(&state->state, data, len) ==
   21654:	a904      	add	r1, sp, #16
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   21656:	4620      	mov	r0, r4
   21658:	f7fe fb1d 	bl	1fc96 <tc_cmac_update>
   2165c:	2800      	cmp	r0, #0
   2165e:	d1af      	bne.n	215c0 <gen_hash_m+0xe>
   21660:	e7c3      	b.n	215ea <gen_hash_m+0x38>

00021662 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   21662:	2207      	movs	r2, #7
   21664:	f7fe bc07 	b.w	1fe76 <memcpy>

00021668 <gatt_notify_mult_send>:
{
   21668:	b538      	push	{r3, r4, r5, lr}
   2166a:	460c      	mov	r4, r1
	struct nfy_mult_data *data = nfy_mult_user_data(*buf);
   2166c:	6809      	ldr	r1, [r1, #0]
	ret = bt_att_send(conn, *buf, data->func, data->user_data);
   2166e:	e9d1 2305 	ldrd	r2, r3, [r1, #20]
   21672:	f7ff fefc 	bl	2146e <bt_att_send>
	if (ret < 0) {
   21676:	1e05      	subs	r5, r0, #0
   21678:	da02      	bge.n	21680 <gatt_notify_mult_send+0x18>
		net_buf_unref(*buf);
   2167a:	6820      	ldr	r0, [r4, #0]
   2167c:	f7fa fa30 	bl	1bae0 <net_buf_unref>
	*buf = NULL;
   21680:	2300      	movs	r3, #0
   21682:	6023      	str	r3, [r4, #0]
}
   21684:	4628      	mov	r0, r5
   21686:	bd38      	pop	{r3, r4, r5, pc}

00021688 <gatt_sub_remove.part.0>:
static void gatt_sub_remove(struct bt_conn *conn, struct gatt_sub *sub,
   21688:	b507      	push	{r0, r1, r2, lr}
		bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
   2168a:	2300      	movs	r3, #0
   2168c:	4669      	mov	r1, sp
   2168e:	3001      	adds	r0, #1
   21690:	9300      	str	r3, [sp, #0]
   21692:	f8cd 3003 	str.w	r3, [sp, #3]
   21696:	f7ff ffe4 	bl	21662 <bt_addr_le_copy>
}
   2169a:	b003      	add	sp, #12
   2169c:	f85d fb04 	ldr.w	pc, [sp], #4

000216a0 <clear_cf_cfg>:
{
   216a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   216a2:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   216a4:	2500      	movs	r5, #0
   216a6:	4669      	mov	r1, sp
   216a8:	3001      	adds	r0, #1
   216aa:	9500      	str	r5, [sp, #0]
   216ac:	f8cd 5003 	str.w	r5, [sp, #3]
   216b0:	f7ff ffd7 	bl	21662 <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   216b4:	f104 0008 	add.w	r0, r4, #8
   216b8:	2201      	movs	r2, #1
   216ba:	4629      	mov	r1, r5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   216bc:	340c      	adds	r4, #12
   216be:	f7fe fc05 	bl	1fecc <memset>
   216c2:	f3bf 8f5b 	dmb	ish
   216c6:	e854 3f00 	ldrex	r3, [r4]
   216ca:	e844 5200 	strex	r2, r5, [r4]
   216ce:	2a00      	cmp	r2, #0
   216d0:	d1f9      	bne.n	216c6 <clear_cf_cfg+0x26>
   216d2:	f3bf 8f5b 	dmb	ish
}
   216d6:	b003      	add	sp, #12
   216d8:	bd30      	pop	{r4, r5, pc}

000216da <match_uuid>:
   216da:	6008      	str	r0, [r1, #0]
   216dc:	2000      	movs	r0, #0
   216de:	4770      	bx	lr

000216e0 <find_ccc_cfg>:
{
   216e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   216e2:	4606      	mov	r6, r0
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   216e4:	1c4c      	adds	r4, r1, #1
   216e6:	f101 0533 	add.w	r5, r1, #51	; 0x33
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   216ea:	1e67      	subs	r7, r4, #1
		if (conn) {
   216ec:	b14e      	cbz	r6, 21702 <find_ccc_cfg+0x22>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   216ee:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   216f2:	4622      	mov	r2, r4
   216f4:	4630      	mov	r0, r6
   216f6:	f7fe ff62 	bl	205be <bt_conn_is_peer_addr_le>
   216fa:	b160      	cbz	r0, 21716 <find_ccc_cfg+0x36>
}
   216fc:	4638      	mov	r0, r7
   216fe:	b003      	add	sp, #12
   21700:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return memcmp(a, b, sizeof(*a));
   21702:	2207      	movs	r2, #7
   21704:	4669      	mov	r1, sp
   21706:	4620      	mov	r0, r4
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   21708:	9600      	str	r6, [sp, #0]
   2170a:	f8cd 6003 	str.w	r6, [sp, #3]
   2170e:	f7fe fba2 	bl	1fe56 <memcmp>
   21712:	2800      	cmp	r0, #0
   21714:	d0f2      	beq.n	216fc <find_ccc_cfg+0x1c>
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   21716:	340a      	adds	r4, #10
   21718:	42ac      	cmp	r4, r5
   2171a:	d1e6      	bne.n	216ea <find_ccc_cfg+0xa>
	return NULL;
   2171c:	2700      	movs	r7, #0
   2171e:	e7ed      	b.n	216fc <find_ccc_cfg+0x1c>

00021720 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   21720:	2301      	movs	r3, #1
   21722:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   21724:	f3bf 8f5b 	dmb	ish
   21728:	e850 2f00 	ldrex	r2, [r0]
   2172c:	431a      	orrs	r2, r3
   2172e:	e840 2100 	strex	r1, r2, [r0]
   21732:	2900      	cmp	r1, #0
   21734:	d1f8      	bne.n	21728 <atomic_set_bit+0x8>
   21736:	f3bf 8f5b 	dmb	ish
}
   2173a:	4770      	bx	lr

0002173c <sc_restore_rsp>:
{
   2173c:	b508      	push	{r3, lr}
	cfg = find_cf_cfg(conn);
   2173e:	f7ec f9f5 	bl	db2c <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   21742:	b140      	cbz	r0, 21756 <sc_restore_rsp+0x1a>
   21744:	7a03      	ldrb	r3, [r0, #8]
   21746:	07db      	lsls	r3, r3, #31
   21748:	d505      	bpl.n	21756 <sc_restore_rsp+0x1a>
}
   2174a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   2174e:	2100      	movs	r1, #0
   21750:	300c      	adds	r0, #12
   21752:	f7ff bfe5 	b.w	21720 <atomic_set_bit>
}
   21756:	bd08      	pop	{r3, pc}

00021758 <read_appearance>:
{
   21758:	b513      	push	{r0, r1, r4, lr}
   2175a:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   2175e:	4610      	mov	r0, r2
	if (offset > value_len) {
   21760:	2902      	cmp	r1, #2
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   21762:	f04f 0200 	mov.w	r2, #0
   21766:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   2176a:	d80d      	bhi.n	21788 <read_appearance+0x30>
	len = MIN(buf_len, value_len - offset);
   2176c:	f1c1 0402 	rsb	r4, r1, #2
   21770:	429c      	cmp	r4, r3
   21772:	bfa8      	it	ge
   21774:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   21776:	f10d 0306 	add.w	r3, sp, #6
   2177a:	4622      	mov	r2, r4
   2177c:	4419      	add	r1, r3
   2177e:	f7fe fb7a 	bl	1fe76 <memcpy>
}
   21782:	4620      	mov	r0, r4
   21784:	b002      	add	sp, #8
   21786:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   21788:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   2178c:	e7f9      	b.n	21782 <read_appearance+0x2a>

0002178e <read_name>:
{
   2178e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21792:	4698      	mov	r8, r3
   21794:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   21798:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   2179a:	f7e8 fb6d 	bl	9e78 <bt_get_name>
   2179e:	4607      	mov	r7, r0
				 strlen(name));
   217a0:	f7fe fb46 	bl	1fe30 <strlen>
	if (offset > value_len) {
   217a4:	b283      	uxth	r3, r0
   217a6:	42b3      	cmp	r3, r6
   217a8:	d30c      	bcc.n	217c4 <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   217aa:	1b9c      	subs	r4, r3, r6
   217ac:	4544      	cmp	r4, r8
   217ae:	bfa8      	it	ge
   217b0:	4644      	movge	r4, r8
   217b2:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   217b4:	4622      	mov	r2, r4
   217b6:	19b9      	adds	r1, r7, r6
   217b8:	4628      	mov	r0, r5
   217ba:	f7fe fb5c 	bl	1fe76 <memcpy>
}
   217be:	4620      	mov	r0, r4
   217c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   217c4:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   217c8:	e7f9      	b.n	217be <read_name+0x30>

000217ca <bt_gatt_attr_read_ccc>:
{
   217ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   217cc:	68c9      	ldr	r1, [r1, #12]
{
   217ce:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   217d2:	4615      	mov	r5, r2
   217d4:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   217d6:	f7ff ff83 	bl	216e0 <find_ccc_cfg>
	if (cfg) {
   217da:	b100      	cbz	r0, 217de <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   217dc:	8900      	ldrh	r0, [r0, #8]
   217de:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   217e2:	2e02      	cmp	r6, #2
   217e4:	d80e      	bhi.n	21804 <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   217e6:	f1c6 0402 	rsb	r4, r6, #2
   217ea:	42bc      	cmp	r4, r7
   217ec:	bfa8      	it	ge
   217ee:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   217f0:	f10d 0306 	add.w	r3, sp, #6
   217f4:	4622      	mov	r2, r4
   217f6:	1999      	adds	r1, r3, r6
   217f8:	4628      	mov	r0, r5
   217fa:	f7fe fb3c 	bl	1fe76 <memcpy>
}
   217fe:	4620      	mov	r0, r4
   21800:	b003      	add	sp, #12
   21802:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   21804:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   21808:	e7f9      	b.n	217fe <bt_gatt_attr_read_ccc+0x34>

0002180a <cf_read>:
{
   2180a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2180c:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   2180e:	2300      	movs	r3, #0
{
   21810:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   21814:	f88d 3004 	strb.w	r3, [sp, #4]
{
   21818:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   2181a:	f7ec f987 	bl	db2c <find_cf_cfg>
	if (cfg) {
   2181e:	b128      	cbz	r0, 2182c <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   21820:	f100 0108 	add.w	r1, r0, #8
   21824:	2201      	movs	r2, #1
   21826:	a801      	add	r0, sp, #4
   21828:	f7fe fb25 	bl	1fe76 <memcpy>
	if (offset > value_len) {
   2182c:	2e01      	cmp	r6, #1
   2182e:	d80d      	bhi.n	2184c <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   21830:	f1c6 0401 	rsb	r4, r6, #1
   21834:	42bc      	cmp	r4, r7
   21836:	bfa8      	it	ge
   21838:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   2183a:	ab01      	add	r3, sp, #4
   2183c:	4622      	mov	r2, r4
   2183e:	1999      	adds	r1, r3, r6
   21840:	4628      	mov	r0, r5
   21842:	f7fe fb18 	bl	1fe76 <memcpy>
}
   21846:	4620      	mov	r0, r4
   21848:	b003      	add	sp, #12
   2184a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2184c:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   21850:	e7f9      	b.n	21846 <cf_read+0x3c>

00021852 <bt_gatt_attr_read_service>:
{
   21852:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
   21854:	68c9      	ldr	r1, [r1, #12]
{
   21856:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   2185a:	461c      	mov	r4, r3
	if (uuid->type == BT_UUID_TYPE_16) {
   2185c:	780b      	ldrb	r3, [r1, #0]
{
   2185e:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   21860:	b993      	cbnz	r3, 21888 <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   21862:	884b      	ldrh	r3, [r1, #2]
   21864:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (offset > value_len) {
   21868:	2d02      	cmp	r5, #2
   2186a:	d819      	bhi.n	218a0 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   2186c:	f1c5 0202 	rsb	r2, r5, #2
   21870:	4294      	cmp	r4, r2
   21872:	bfa8      	it	ge
   21874:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   21876:	f10d 0306 	add.w	r3, sp, #6
   2187a:	4622      	mov	r2, r4
   2187c:	1959      	adds	r1, r3, r5
   2187e:	f7fe fafa 	bl	1fe76 <memcpy>
}
   21882:	4620      	mov	r0, r4
   21884:	b003      	add	sp, #12
   21886:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
   21888:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
   2188a:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   2188e:	d807      	bhi.n	218a0 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   21890:	f1c5 0210 	rsb	r2, r5, #16
   21894:	4294      	cmp	r4, r2
   21896:	bfa8      	it	ge
   21898:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   2189a:	4622      	mov	r2, r4
   2189c:	4429      	add	r1, r5
   2189e:	e7ee      	b.n	2187e <bt_gatt_attr_read_service+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   218a0:	f06f 0406 	mvn.w	r4, #6
   218a4:	e7ed      	b.n	21882 <bt_gatt_attr_read_service+0x30>

000218a6 <gatt_sub_remove>:
{
   218a6:	b538      	push	{r3, r4, r5, lr}
   218a8:	460c      	mov	r4, r1
	if (params) {
   218aa:	4619      	mov	r1, r3
   218ac:	b16b      	cbz	r3, 218ca <gatt_sub_remove+0x24>
		sys_slist_remove(&sub->list, prev, &params->node);
   218ae:	f103 0510 	add.w	r5, r3, #16
Z_GENLIST_REMOVE(slist, snode)
   218b2:	691b      	ldr	r3, [r3, #16]
   218b4:	b982      	cbnz	r2, 218d8 <gatt_sub_remove+0x32>
   218b6:	68e2      	ldr	r2, [r4, #12]
	list->head = node;
   218b8:	60a3      	str	r3, [r4, #8]
Z_GENLIST_REMOVE(slist, snode)
   218ba:	4295      	cmp	r5, r2
   218bc:	d100      	bne.n	218c0 <gatt_sub_remove+0x1a>
	list->tail = node;
   218be:	60e3      	str	r3, [r4, #12]
	parent->next = child;
   218c0:	2300      	movs	r3, #0
		params->notify(conn, params, NULL, 0);
   218c2:	680d      	ldr	r5, [r1, #0]
   218c4:	610b      	str	r3, [r1, #16]
   218c6:	461a      	mov	r2, r3
   218c8:	47a8      	blx	r5
	if (sys_slist_is_empty(&sub->list)) {
   218ca:	68a3      	ldr	r3, [r4, #8]
   218cc:	b953      	cbnz	r3, 218e4 <gatt_sub_remove+0x3e>
   218ce:	4620      	mov	r0, r4
}
   218d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   218d4:	f7ff bed8 	b.w	21688 <gatt_sub_remove.part.0>
   218d8:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   218da:	68e3      	ldr	r3, [r4, #12]
   218dc:	429d      	cmp	r5, r3
	list->tail = node;
   218de:	bf08      	it	eq
   218e0:	60e2      	streq	r2, [r4, #12]
}
   218e2:	e7ed      	b.n	218c0 <gatt_sub_remove+0x1a>
   218e4:	bd38      	pop	{r3, r4, r5, pc}

000218e6 <gatt_write_ccc_rsp>:
{
   218e6:	b570      	push	{r4, r5, r6, lr}
   218e8:	9c04      	ldr	r4, [sp, #16]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   218ea:	f3bf 8f5b 	dmb	ish
   218ee:	4605      	mov	r5, r0
   218f0:	f104 030c 	add.w	r3, r4, #12
   218f4:	e853 2f00 	ldrex	r2, [r3]
   218f8:	f022 0204 	bic.w	r2, r2, #4
   218fc:	e843 2c00 	strex	ip, r2, [r3]
   21900:	f1bc 0f00 	cmp.w	ip, #0
   21904:	d1f6      	bne.n	218f4 <gatt_write_ccc_rsp+0xe>
   21906:	f3bf 8f5b 	dmb	ish
	if (err) {
   2190a:	b1a9      	cbz	r1, 21938 <gatt_write_ccc_rsp+0x52>
		sub = gatt_sub_find(conn);
   2190c:	2100      	movs	r1, #0
   2190e:	f7ec f889 	bl	da24 <gatt_sub_find_free>
		if (!sub) {
   21912:	4601      	mov	r1, r0
   21914:	b1c8      	cbz	r0, 2194a <gatt_write_ccc_rsp+0x64>
		SYS_SLIST_FOR_EACH_NODE_SAFE(&sub->list, node, tmp) {
   21916:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_PEEK_NEXT(slist, snode)
   21918:	b1bb      	cbz	r3, 2194a <gatt_write_ccc_rsp+0x64>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2191a:	681a      	ldr	r2, [r3, #0]
			if (node == &params->node) {
   2191c:	f104 0010 	add.w	r0, r4, #16
   21920:	4283      	cmp	r3, r0
   21922:	d105      	bne.n	21930 <gatt_write_ccc_rsp+0x4a>
				gatt_sub_remove(conn, sub, tmp, params);
   21924:	4623      	mov	r3, r4
   21926:	4628      	mov	r0, r5
}
   21928:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				gatt_sub_remove(conn, sub, tmp, params);
   2192c:	f7ff bfbb 	b.w	218a6 <gatt_sub_remove>
Z_GENLIST_PEEK_NEXT(slist, snode)
   21930:	b15a      	cbz	r2, 2194a <gatt_write_ccc_rsp+0x64>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   21932:	4613      	mov	r3, r2
Z_GENLIST_PEEK_NEXT(slist, snode)
   21934:	6812      	ldr	r2, [r2, #0]
   21936:	e7f3      	b.n	21920 <gatt_write_ccc_rsp+0x3a>
	} else if (!params->value) {
   21938:	8923      	ldrh	r3, [r4, #8]
   2193a:	b933      	cbnz	r3, 2194a <gatt_write_ccc_rsp+0x64>
		params->notify(conn, params, NULL, 0);
   2193c:	6825      	ldr	r5, [r4, #0]
   2193e:	4621      	mov	r1, r4
   21940:	46ac      	mov	ip, r5
   21942:	461a      	mov	r2, r3
}
   21944:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		params->notify(conn, params, NULL, 0);
   21948:	4760      	bx	ip
}
   2194a:	bd70      	pop	{r4, r5, r6, pc}

0002194c <sc_clear>:
{
   2194c:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2194e:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   21952:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   21954:	4631      	mov	r1, r6
   21956:	7a00      	ldrb	r0, [r0, #8]
   21958:	f7fe fd67 	bl	2042a <bt_addr_le_is_bonded>
   2195c:	7a20      	ldrb	r0, [r4, #8]
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   2195e:	4631      	mov	r1, r6
   21960:	f7ec f88a 	bl	da78 <find_sc_cfg>
	if (!cfg) {
   21964:	b128      	cbz	r0, 21972 <sc_clear+0x26>
}
   21966:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   2196a:	220c      	movs	r2, #12
   2196c:	2100      	movs	r1, #0
   2196e:	f7fe baad 	b.w	1fecc <memset>
}
   21972:	bd70      	pop	{r4, r5, r6, pc}

00021974 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   21974:	2a02      	cmp	r2, #2
{
   21976:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   21978:	d108      	bne.n	2198c <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   2197a:	2300      	movs	r3, #0
   2197c:	f100 0188 	add.w	r1, r0, #136	; 0x88
   21980:	461a      	mov	r2, r3
   21982:	7a00      	ldrb	r0, [r0, #8]
   21984:	f7ec f89a 	bl	dabc <sc_save>
}
   21988:	2002      	movs	r0, #2
   2198a:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   2198c:	f7ff ffde 	bl	2194c <sc_clear>
   21990:	e7fa      	b.n	21988 <sc_ccc_cfg_write+0x14>

00021992 <bt_gatt_attr_read>:
{
   21992:	b538      	push	{r3, r4, r5, lr}
   21994:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   21998:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	if (offset > value_len) {
   2199c:	42a9      	cmp	r1, r5
{
   2199e:	4610      	mov	r0, r2
	if (offset > value_len) {
   219a0:	d80b      	bhi.n	219ba <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   219a2:	1a6d      	subs	r5, r5, r1
   219a4:	429d      	cmp	r5, r3
   219a6:	bfa8      	it	ge
   219a8:	461d      	movge	r5, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   219aa:	9b05      	ldr	r3, [sp, #20]
   219ac:	b2ad      	uxth	r5, r5
   219ae:	462a      	mov	r2, r5
   219b0:	4419      	add	r1, r3
   219b2:	f7fe fa60 	bl	1fe76 <memcpy>
}
   219b6:	4628      	mov	r0, r5
   219b8:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   219ba:	f06f 0506 	mvn.w	r5, #6
   219be:	e7fa      	b.n	219b6 <bt_gatt_attr_read+0x24>

000219c0 <bt_gatt_attr_read_chrc>:
{
   219c0:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   219c2:	68cf      	ldr	r7, [r1, #12]
{
   219c4:	b087      	sub	sp, #28
   219c6:	4608      	mov	r0, r1
   219c8:	461c      	mov	r4, r3
	pdu.properties = chrc->properties;
   219ca:	79bb      	ldrb	r3, [r7, #6]
   219cc:	f88d 3004 	strb.w	r3, [sp, #4]
{
   219d0:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   219d2:	f7ec fbc1 	bl	e158 <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   219d6:	6839      	ldr	r1, [r7, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   219d8:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   219dc:	780b      	ldrb	r3, [r1, #0]
{
   219de:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   219e2:	b99b      	cbnz	r3, 21a0c <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   219e4:	884b      	ldrh	r3, [r1, #2]
   219e6:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   219ea:	2105      	movs	r1, #5
	if (offset > value_len) {
   219ec:	42b1      	cmp	r1, r6
   219ee:	d315      	bcc.n	21a1c <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   219f0:	1b89      	subs	r1, r1, r6
   219f2:	42a1      	cmp	r1, r4
   219f4:	bfa8      	it	ge
   219f6:	4621      	movge	r1, r4
   219f8:	b28c      	uxth	r4, r1
	memcpy(buf, (uint8_t *)value + offset, len);
   219fa:	ab01      	add	r3, sp, #4
   219fc:	4622      	mov	r2, r4
   219fe:	1999      	adds	r1, r3, r6
   21a00:	4628      	mov	r0, r5
   21a02:	f7fe fa38 	bl	1fe76 <memcpy>
}
   21a06:	4620      	mov	r0, r4
   21a08:	b007      	add	sp, #28
   21a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   21a0c:	3101      	adds	r1, #1
   21a0e:	2210      	movs	r2, #16
   21a10:	f10d 0007 	add.w	r0, sp, #7
   21a14:	f7fe fa2f 	bl	1fe76 <memcpy>
		value_len += 16U;
   21a18:	2113      	movs	r1, #19
   21a1a:	e7e7      	b.n	219ec <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   21a1c:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   21a20:	e7f1      	b.n	21a06 <bt_gatt_attr_read_chrc+0x46>

00021a22 <bt_gatt_foreach_attr>:
{
   21a22:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   21a24:	e9cd 2301 	strd	r2, r3, [sp, #4]
   21a28:	2300      	movs	r3, #0
   21a2a:	9300      	str	r3, [sp, #0]
   21a2c:	461a      	mov	r2, r3
   21a2e:	f7ec fbab 	bl	e188 <bt_gatt_foreach_attr_type>
}
   21a32:	b005      	add	sp, #20
   21a34:	f85d fb04 	ldr.w	pc, [sp], #4

00021a38 <db_hash_process>:
	db_hash_gen(true);
   21a38:	f7ec bc06 	b.w	e248 <db_hash_gen.isra.0>

00021a3c <bt_gatt_check_perm>:
{
   21a3c:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   21a3e:	07d4      	lsls	r4, r2, #31
{
   21a40:	4605      	mov	r5, r0
   21a42:	7c88      	ldrb	r0, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   21a44:	d504      	bpl.n	21a50 <bt_gatt_check_perm+0x14>
   21a46:	f010 0f15 	tst.w	r0, #21
   21a4a:	d01e      	beq.n	21a8a <bt_gatt_check_perm+0x4e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   21a4c:	684b      	ldr	r3, [r1, #4]
   21a4e:	b1e3      	cbz	r3, 21a8a <bt_gatt_check_perm+0x4e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   21a50:	0793      	lsls	r3, r2, #30
   21a52:	d504      	bpl.n	21a5e <bt_gatt_check_perm+0x22>
   21a54:	f010 0f2a 	tst.w	r0, #42	; 0x2a
   21a58:	d019      	beq.n	21a8e <bt_gatt_check_perm+0x52>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   21a5a:	688b      	ldr	r3, [r1, #8]
   21a5c:	b1bb      	cbz	r3, 21a8e <bt_gatt_check_perm+0x52>
	mask &= attr->perm;
   21a5e:	ea02 0400 	and.w	r4, r2, r0
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   21a62:	f014 0f30 	tst.w	r4, #48	; 0x30
   21a66:	d103      	bne.n	21a70 <bt_gatt_check_perm+0x34>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   21a68:	f014 000c 	ands.w	r0, r4, #12
   21a6c:	d107      	bne.n	21a7e <bt_gatt_check_perm+0x42>
}
   21a6e:	bd38      	pop	{r3, r4, r5, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   21a70:	4628      	mov	r0, r5
   21a72:	f7fe fda2 	bl	205ba <bt_conn_get_security>
   21a76:	2802      	cmp	r0, #2
   21a78:	d8f6      	bhi.n	21a68 <bt_gatt_check_perm+0x2c>
			return BT_ATT_ERR_AUTHENTICATION;
   21a7a:	2005      	movs	r0, #5
   21a7c:	e7f7      	b.n	21a6e <bt_gatt_check_perm+0x32>
		if (!conn->encrypt) {
   21a7e:	7aeb      	ldrb	r3, [r5, #11]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   21a80:	2b00      	cmp	r3, #0
   21a82:	bf14      	ite	ne
   21a84:	2000      	movne	r0, #0
   21a86:	200f      	moveq	r0, #15
   21a88:	e7f1      	b.n	21a6e <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   21a8a:	2002      	movs	r0, #2
   21a8c:	e7ef      	b.n	21a6e <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   21a8e:	2003      	movs	r0, #3
   21a90:	e7ed      	b.n	21a6e <bt_gatt_check_perm+0x32>

00021a92 <bt_gatt_unsubscribe>:
{
   21a92:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   21a96:	7b43      	ldrb	r3, [r0, #13]
   21a98:	2b06      	cmp	r3, #6
{
   21a9a:	4681      	mov	r9, r0
   21a9c:	460e      	mov	r6, r1
	if (conn->state != BT_CONN_CONNECTED) {
   21a9e:	d16f      	bne.n	21b80 <bt_gatt_unsubscribe+0xee>
	sub = gatt_sub_find(conn);
   21aa0:	2100      	movs	r1, #0
   21aa2:	f7eb ffbf 	bl	da24 <gatt_sub_find_free>
	if (!sub) {
   21aa6:	4607      	mov	r7, r0
   21aa8:	b920      	cbnz	r0, 21ab4 <bt_gatt_unsubscribe+0x22>
		return -EINVAL;
   21aaa:	f06f 0015 	mvn.w	r0, #21
}
   21aae:	b001      	add	sp, #4
   21ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   21ab4:	6884      	ldr	r4, [r0, #8]
   21ab6:	b1cc      	cbz	r4, 21aec <bt_gatt_unsubscribe+0x5a>
   21ab8:	f1b4 0510 	subs.w	r5, r4, #16
   21abc:	d018      	beq.n	21af0 <bt_gatt_unsubscribe+0x5e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   21abe:	6824      	ldr	r4, [r4, #0]
   21ac0:	b104      	cbz	r4, 21ac4 <bt_gatt_unsubscribe+0x32>
   21ac2:	3c10      	subs	r4, #16
   21ac4:	f04f 0800 	mov.w	r8, #0
   21ac8:	46c3      	mov	fp, r8
   21aca:	46c2      	mov	sl, r8
	parent->next = child;
   21acc:	4642      	mov	r2, r8
   21ace:	b98d      	cbnz	r5, 21af4 <bt_gatt_unsubscribe+0x62>
	if (!found) {
   21ad0:	f1bb 0f00 	cmp.w	fp, #0
   21ad4:	d0e9      	beq.n	21aaa <bt_gatt_unsubscribe+0x18>
	if (has_subscription) {
   21ad6:	f1ba 0f00 	cmp.w	sl, #0
   21ada:	d046      	beq.n	21b6a <bt_gatt_unsubscribe+0xd8>
		params->notify(conn, params, NULL, 0);
   21adc:	6834      	ldr	r4, [r6, #0]
   21ade:	462b      	mov	r3, r5
   21ae0:	462a      	mov	r2, r5
   21ae2:	4631      	mov	r1, r6
   21ae4:	4648      	mov	r0, r9
   21ae6:	47a0      	blx	r4
		return 0;
   21ae8:	4628      	mov	r0, r5
   21aea:	e7e0      	b.n	21aae <bt_gatt_unsubscribe+0x1c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   21aec:	4625      	mov	r5, r4
   21aee:	e7e9      	b.n	21ac4 <bt_gatt_unsubscribe+0x32>
   21af0:	462c      	mov	r4, r5
   21af2:	e7e7      	b.n	21ac4 <bt_gatt_unsubscribe+0x32>
		if (params == tmp) {
   21af4:	42b5      	cmp	r5, r6
   21af6:	f105 0310 	add.w	r3, r5, #16
   21afa:	d129      	bne.n	21b50 <bt_gatt_unsubscribe+0xbe>
Z_GENLIST_REMOVE(slist, snode)
   21afc:	6928      	ldr	r0, [r5, #16]
   21afe:	f1b8 0f00 	cmp.w	r8, #0
   21b02:	d11d      	bne.n	21b40 <bt_gatt_unsubscribe+0xae>
   21b04:	68f9      	ldr	r1, [r7, #12]
	list->head = node;
   21b06:	60b8      	str	r0, [r7, #8]
Z_GENLIST_REMOVE(slist, snode)
   21b08:	428b      	cmp	r3, r1
   21b0a:	d100      	bne.n	21b0e <bt_gatt_unsubscribe+0x7c>
	list->tail = node;
   21b0c:	60f8      	str	r0, [r7, #12]
	parent->next = child;
   21b0e:	612a      	str	r2, [r5, #16]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   21b10:	f3bf 8f5b 	dmb	ish
   21b14:	68f3      	ldr	r3, [r6, #12]
   21b16:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   21b1a:	f3c3 0b80 	ubfx	fp, r3, #2, #1
			if (atomic_test_bit(params->flags,
   21b1e:	075b      	lsls	r3, r3, #29
   21b20:	d51e      	bpl.n	21b60 <bt_gatt_unsubscribe+0xce>
	bt_att_req_cancel(conn, params);
   21b22:	4631      	mov	r1, r6
   21b24:	4648      	mov	r0, r9
   21b26:	f7eb fe95 	bl	d854 <bt_att_req_cancel>
}
   21b2a:	2200      	movs	r2, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   21b2c:	b1dc      	cbz	r4, 21b66 <bt_gatt_unsubscribe+0xd4>
Z_GENLIST_PEEK_NEXT(slist, snode)
   21b2e:	f114 0310 	adds.w	r3, r4, #16
   21b32:	d002      	beq.n	21b3a <bt_gatt_unsubscribe+0xa8>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   21b34:	6923      	ldr	r3, [r4, #16]
   21b36:	b103      	cbz	r3, 21b3a <bt_gatt_unsubscribe+0xa8>
   21b38:	3b10      	subs	r3, #16
   21b3a:	4625      	mov	r5, r4
   21b3c:	461c      	mov	r4, r3
   21b3e:	e7c6      	b.n	21ace <bt_gatt_unsubscribe+0x3c>
	parent->next = child;
   21b40:	f8c8 0000 	str.w	r0, [r8]
Z_GENLIST_REMOVE(slist, snode)
   21b44:	68f9      	ldr	r1, [r7, #12]
   21b46:	428b      	cmp	r3, r1
	list->tail = node;
   21b48:	bf08      	it	eq
   21b4a:	f8c7 800c 	streq.w	r8, [r7, #12]
}
   21b4e:	e7de      	b.n	21b0e <bt_gatt_unsubscribe+0x7c>
		if (tmp->value_handle == params->value_handle) {
   21b50:	88a8      	ldrh	r0, [r5, #4]
   21b52:	88b1      	ldrh	r1, [r6, #4]
   21b54:	4698      	mov	r8, r3
   21b56:	4288      	cmp	r0, r1
   21b58:	bf08      	it	eq
   21b5a:	f04f 0a01 	moveq.w	sl, #1
   21b5e:	e7e5      	b.n	21b2c <bt_gatt_unsubscribe+0x9a>
			found = true;
   21b60:	f04f 0b01 	mov.w	fp, #1
   21b64:	e7e2      	b.n	21b2c <bt_gatt_unsubscribe+0x9a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   21b66:	4623      	mov	r3, r4
   21b68:	e7e7      	b.n	21b3a <bt_gatt_unsubscribe+0xa8>
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
   21b6a:	88f1      	ldrh	r1, [r6, #6]
	params->value = 0x0000;
   21b6c:	f8a6 a008 	strh.w	sl, [r6, #8]
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
   21b70:	4633      	mov	r3, r6
   21b72:	4652      	mov	r2, sl
   21b74:	4648      	mov	r0, r9
}
   21b76:	b001      	add	sp, #4
   21b78:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
   21b7c:	f7ec b986 	b.w	de8c <gatt_write_ccc.constprop.0>
		return -ENOTCONN;
   21b80:	f06f 0038 	mvn.w	r0, #56	; 0x38
   21b84:	e793      	b.n	21aae <bt_gatt_unsubscribe+0x1c>

00021b86 <bt_gatt_notification>:
{
   21b86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21b8a:	4688      	mov	r8, r1
	sub = gatt_sub_find(conn);
   21b8c:	2100      	movs	r1, #0
{
   21b8e:	4607      	mov	r7, r0
   21b90:	4691      	mov	r9, r2
   21b92:	469a      	mov	sl, r3
	sub = gatt_sub_find(conn);
   21b94:	f7eb ff46 	bl	da24 <gatt_sub_find_free>
	if (!sub) {
   21b98:	b1f8      	cbz	r0, 21bda <bt_gatt_notification+0x54>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   21b9a:	6883      	ldr	r3, [r0, #8]
   21b9c:	b1eb      	cbz	r3, 21bda <bt_gatt_notification+0x54>
   21b9e:	f1b3 0610 	subs.w	r6, r3, #16
   21ba2:	d01a      	beq.n	21bda <bt_gatt_notification+0x54>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   21ba4:	681c      	ldr	r4, [r3, #0]
   21ba6:	b104      	cbz	r4, 21baa <bt_gatt_notification+0x24>
   21ba8:	3c10      	subs	r4, #16
		if (handle != params->value_handle) {
   21baa:	88b3      	ldrh	r3, [r6, #4]
   21bac:	4543      	cmp	r3, r8
   21bae:	d10a      	bne.n	21bc6 <bt_gatt_notification+0x40>
		if (params->notify(conn, params, data, length) ==
   21bb0:	6835      	ldr	r5, [r6, #0]
   21bb2:	4653      	mov	r3, sl
   21bb4:	464a      	mov	r2, r9
   21bb6:	4631      	mov	r1, r6
   21bb8:	4638      	mov	r0, r7
   21bba:	47a8      	blx	r5
   21bbc:	b918      	cbnz	r0, 21bc6 <bt_gatt_notification+0x40>
			bt_gatt_unsubscribe(conn, params);
   21bbe:	4631      	mov	r1, r6
   21bc0:	4638      	mov	r0, r7
   21bc2:	f7ff ff66 	bl	21a92 <bt_gatt_unsubscribe>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   21bc6:	b144      	cbz	r4, 21bda <bt_gatt_notification+0x54>
Z_GENLIST_PEEK_NEXT(slist, snode)
   21bc8:	f114 0510 	adds.w	r5, r4, #16
   21bcc:	d002      	beq.n	21bd4 <bt_gatt_notification+0x4e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   21bce:	6925      	ldr	r5, [r4, #16]
   21bd0:	b105      	cbz	r5, 21bd4 <bt_gatt_notification+0x4e>
   21bd2:	3d10      	subs	r5, #16
{
   21bd4:	4626      	mov	r6, r4
   21bd6:	462c      	mov	r4, r5
   21bd8:	e7e7      	b.n	21baa <bt_gatt_notification+0x24>
}
   21bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00021bde <bt_gatt_change_aware>:
{
   21bde:	b510      	push	{r4, lr}
   21be0:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   21be2:	f7eb ffa3 	bl	db2c <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   21be6:	4603      	mov	r3, r0
   21be8:	b910      	cbnz	r0, 21bf0 <bt_gatt_change_aware+0x12>
		return true;
   21bea:	2401      	movs	r4, #1
}
   21bec:	4620      	mov	r0, r4
   21bee:	bd10      	pop	{r4, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   21bf0:	7a02      	ldrb	r2, [r0, #8]
   21bf2:	07d2      	lsls	r2, r2, #31
   21bf4:	d5f9      	bpl.n	21bea <bt_gatt_change_aware+0xc>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   21bf6:	f3bf 8f5b 	dmb	ish
   21bfa:	68d9      	ldr	r1, [r3, #12]
   21bfc:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   21c00:	f011 0101 	ands.w	r1, r1, #1
   21c04:	f100 000c 	add.w	r0, r0, #12
   21c08:	d1ef      	bne.n	21bea <bt_gatt_change_aware+0xc>
	if (!req) {
   21c0a:	2c00      	cmp	r4, #0
   21c0c:	d0ee      	beq.n	21bec <bt_gatt_change_aware+0xe>
   21c0e:	f3bf 8f5b 	dmb	ish
   21c12:	68db      	ldr	r3, [r3, #12]
   21c14:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   21c18:	f3c3 0440 	ubfx	r4, r3, #1, #1
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   21c1c:	079b      	lsls	r3, r3, #30
   21c1e:	d50e      	bpl.n	21c3e <bt_gatt_change_aware+0x60>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   21c20:	f3bf 8f5b 	dmb	ish
   21c24:	e850 3f00 	ldrex	r3, [r0]
   21c28:	f023 0302 	bic.w	r3, r3, #2
   21c2c:	e840 3200 	strex	r2, r3, [r0]
   21c30:	2a00      	cmp	r2, #0
   21c32:	d1f7      	bne.n	21c24 <bt_gatt_change_aware+0x46>
   21c34:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   21c38:	f7ff fd72 	bl	21720 <atomic_set_bit>
	return false;
   21c3c:	e7d6      	b.n	21bec <bt_gatt_change_aware+0xe>
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   21c3e:	2101      	movs	r1, #1
   21c40:	e7fa      	b.n	21c38 <bt_gatt_change_aware+0x5a>

00021c42 <sys_memcpy_swap>:
	psrc += length - 1;
   21c42:	1e53      	subs	r3, r2, #1
   21c44:	4419      	add	r1, r3
	for (; length > 0; length--) {
   21c46:	4402      	add	r2, r0
		*pdst++ = *psrc--;
   21c48:	f811 3901 	ldrb.w	r3, [r1], #-1
   21c4c:	f800 3b01 	strb.w	r3, [r0], #1
	for (; length > 0; length--) {
   21c50:	4290      	cmp	r0, r2
   21c52:	d1f9      	bne.n	21c48 <sys_memcpy_swap+0x6>
}
   21c54:	4770      	bx	lr

00021c56 <smp_pairing_req>:
}
   21c56:	2007      	movs	r0, #7
   21c58:	4770      	bx	lr

00021c5a <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   21c5a:	2301      	movs	r3, #1
   21c5c:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   21c5e:	f3bf 8f5b 	dmb	ish
   21c62:	e850 2f00 	ldrex	r2, [r0]
   21c66:	431a      	orrs	r2, r3
   21c68:	e840 2100 	strex	r1, r2, [r0]
   21c6c:	2900      	cmp	r1, #0
   21c6e:	d1f8      	bne.n	21c62 <atomic_set_bit+0x8>
   21c70:	f3bf 8f5b 	dmb	ish
}
   21c74:	4770      	bx	lr

00021c76 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   21c76:	f3bf 8f5b 	dmb	ish
   21c7a:	6800      	ldr	r0, [r0, #0]
   21c7c:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   21c80:	4108      	asrs	r0, r1
}
   21c82:	f000 0001 	and.w	r0, r0, #1
   21c86:	4770      	bx	lr

00021c88 <bt_smp_aes_cmac>:
{
   21c88:	b570      	push	{r4, r5, r6, lr}
   21c8a:	b0c2      	sub	sp, #264	; 0x108
   21c8c:	460d      	mov	r5, r1
   21c8e:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   21c90:	4601      	mov	r1, r0
   21c92:	aa16      	add	r2, sp, #88	; 0x58
   21c94:	4668      	mov	r0, sp
{
   21c96:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   21c98:	f7fd ffd2 	bl	1fc40 <tc_cmac_setup>
   21c9c:	b150      	cbz	r0, 21cb4 <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   21c9e:	4632      	mov	r2, r6
   21ca0:	4629      	mov	r1, r5
   21ca2:	4668      	mov	r0, sp
   21ca4:	f7fd fff7 	bl	1fc96 <tc_cmac_update>
   21ca8:	b120      	cbz	r0, 21cb4 <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   21caa:	4669      	mov	r1, sp
   21cac:	4620      	mov	r0, r4
   21cae:	f7fe f85e 	bl	1fd6e <tc_cmac_final>
   21cb2:	b918      	cbnz	r0, 21cbc <bt_smp_aes_cmac+0x34>
		return -EIO;
   21cb4:	f06f 0004 	mvn.w	r0, #4
}
   21cb8:	b042      	add	sp, #264	; 0x108
   21cba:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   21cbc:	2000      	movs	r0, #0
   21cbe:	e7fb      	b.n	21cb8 <bt_smp_aes_cmac+0x30>

00021cc0 <bt_smp_disconnected>:
{
   21cc0:	b538      	push	{r3, r4, r5, lr}
	struct bt_keys *keys = chan->conn->le.keys;
   21cc2:	6803      	ldr	r3, [r0, #0]
   21cc4:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
{
   21cc8:	4604      	mov	r4, r0
	k_delayed_work_cancel(&smp->work);
   21cca:	f500 70d8 	add.w	r0, r0, #432	; 0x1b0
   21cce:	f001 fa1b 	bl	23108 <k_delayed_work_cancel>
	if (keys) {
   21cd2:	b13d      	cbz	r5, 21ce4 <bt_smp_disconnected+0x24>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   21cd4:	89eb      	ldrh	r3, [r5, #14]
   21cd6:	b113      	cbz	r3, 21cde <bt_smp_disconnected+0x1e>
   21cd8:	7b6b      	ldrb	r3, [r5, #13]
   21cda:	079b      	lsls	r3, r3, #30
   21cdc:	d502      	bpl.n	21ce4 <bt_smp_disconnected+0x24>
			bt_keys_clear(keys);
   21cde:	4628      	mov	r0, r5
   21ce0:	f000 fbe3 	bl	224aa <bt_keys_clear>
	(void)memset(smp, 0, sizeof(*smp));
   21ce4:	4620      	mov	r0, r4
   21ce6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
}
   21cea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	(void)memset(smp, 0, sizeof(*smp));
   21cee:	2100      	movs	r1, #0
   21cf0:	f7fe b8ec 	b.w	1fecc <memset>

00021cf4 <smp_create_pdu.isra.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   21cf4:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   21cf6:	f100 05c4 	add.w	r5, r0, #196	; 0xc4
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   21cfa:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   21cfc:	4628      	mov	r0, r5
   21cfe:	2104      	movs	r1, #4
   21d00:	f7ff ffb9 	bl	21c76 <atomic_test_bit>
   21d04:	b168      	cbz	r0, 21d22 <smp_create_pdu.isra.0+0x2e>
		timeout = K_NO_WAIT;
   21d06:	2200      	movs	r2, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   21d08:	2100      	movs	r1, #0
		timeout = SMP_TIMEOUT;
   21d0a:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   21d0c:	4608      	mov	r0, r1
   21d0e:	f7fe fe35 	bl	2097c <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   21d12:	4604      	mov	r4, r0
   21d14:	b940      	cbnz	r0, 21d28 <smp_create_pdu.isra.0+0x34>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   21d16:	2104      	movs	r1, #4
   21d18:	4628      	mov	r0, r5
   21d1a:	f7ff ff9e 	bl	21c5a <atomic_set_bit>
}
   21d1e:	4620      	mov	r0, r4
   21d20:	bd70      	pop	{r4, r5, r6, pc}
		timeout = SMP_TIMEOUT;
   21d22:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   21d26:	e7ef      	b.n	21d08 <smp_create_pdu.isra.0+0x14>
	hdr = net_buf_add(buf, sizeof(*hdr));
   21d28:	2101      	movs	r1, #1
   21d2a:	3008      	adds	r0, #8
   21d2c:	f000 fc34 	bl	22598 <net_buf_simple_add>
	hdr->code = op;
   21d30:	7006      	strb	r6, [r0, #0]
	return buf;
   21d32:	e7f4      	b.n	21d1e <smp_create_pdu.isra.0+0x2a>

00021d34 <sys_mem_swap.constprop.0>:
static inline void sys_mem_swap(void *buf, size_t length)
   21d34:	b510      	push	{r4, lr}
   21d36:	1e43      	subs	r3, r0, #1
   21d38:	f100 0210 	add.w	r2, r0, #16
   21d3c:	3007      	adds	r0, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   21d3e:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   21d42:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   21d46:	701c      	strb	r4, [r3, #0]
	for (i = 0; i < (length/2); i++) {
   21d48:	4283      	cmp	r3, r0
		((uint8_t *)buf)[length - 1 - i] = tmp;
   21d4a:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   21d4c:	d1f7      	bne.n	21d3e <sys_mem_swap.constprop.0+0xa>
	}
}
   21d4e:	bd10      	pop	{r4, pc}

00021d50 <smp_f6>:
{
   21d50:	b5f0      	push	{r4, r5, r6, r7, lr}
   21d52:	b097      	sub	sp, #92	; 0x5c
   21d54:	4605      	mov	r5, r0
   21d56:	4616      	mov	r6, r2
	sys_memcpy_swap(m, n1, 16);
   21d58:	a805      	add	r0, sp, #20
   21d5a:	2210      	movs	r2, #16
{
   21d5c:	461c      	mov	r4, r3
   21d5e:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
	sys_memcpy_swap(m, n1, 16);
   21d60:	f7ff ff6f 	bl	21c42 <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   21d64:	2210      	movs	r2, #16
   21d66:	4631      	mov	r1, r6
   21d68:	a809      	add	r0, sp, #36	; 0x24
   21d6a:	f7ff ff6a 	bl	21c42 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   21d6e:	4621      	mov	r1, r4
   21d70:	2210      	movs	r2, #16
   21d72:	a80d      	add	r0, sp, #52	; 0x34
   21d74:	f7ff ff65 	bl	21c42 <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   21d78:	991c      	ldr	r1, [sp, #112]	; 0x70
   21d7a:	2203      	movs	r2, #3
   21d7c:	a811      	add	r0, sp, #68	; 0x44
   21d7e:	f7ff ff60 	bl	21c42 <sys_memcpy_swap>
	m[51] = a1->type;
   21d82:	9c1d      	ldr	r4, [sp, #116]	; 0x74
   21d84:	f814 3b01 	ldrb.w	r3, [r4], #1
   21d88:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   21d8c:	4621      	mov	r1, r4
   21d8e:	2206      	movs	r2, #6
   21d90:	a812      	add	r0, sp, #72	; 0x48
   21d92:	f7fe f870 	bl	1fe76 <memcpy>
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   21d96:	4621      	mov	r1, r4
   21d98:	2206      	movs	r2, #6
   21d9a:	a812      	add	r0, sp, #72	; 0x48
   21d9c:	f7ff ff51 	bl	21c42 <sys_memcpy_swap>
	m[58] = a2->type;
   21da0:	9c1e      	ldr	r4, [sp, #120]	; 0x78
   21da2:	f814 3b01 	ldrb.w	r3, [r4], #1
   21da6:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   21daa:	4621      	mov	r1, r4
   21dac:	2206      	movs	r2, #6
   21dae:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   21db2:	f7fe f860 	bl	1fe76 <memcpy>
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   21db6:	4621      	mov	r1, r4
   21db8:	2206      	movs	r2, #6
   21dba:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   21dbe:	f7ff ff40 	bl	21c42 <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   21dc2:	2210      	movs	r2, #16
   21dc4:	4629      	mov	r1, r5
   21dc6:	a801      	add	r0, sp, #4
   21dc8:	f7ff ff3b 	bl	21c42 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
   21dcc:	463b      	mov	r3, r7
   21dce:	2241      	movs	r2, #65	; 0x41
   21dd0:	a905      	add	r1, sp, #20
   21dd2:	a801      	add	r0, sp, #4
   21dd4:	f7ff ff58 	bl	21c88 <bt_smp_aes_cmac>
	if (err) {
   21dd8:	4604      	mov	r4, r0
   21dda:	b910      	cbnz	r0, 21de2 <smp_f6+0x92>
	sys_mem_swap(check, 16);
   21ddc:	4638      	mov	r0, r7
   21dde:	f7ff ffa9 	bl	21d34 <sys_mem_swap.constprop.0>
}
   21de2:	4620      	mov	r0, r4
   21de4:	b017      	add	sp, #92	; 0x5c
   21de6:	bdf0      	pop	{r4, r5, r6, r7, pc}

00021de8 <smp_dhkey_check>:
{
   21de8:	b5f0      	push	{r4, r5, r6, r7, lr}
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
   21dea:	6803      	ldr	r3, [r0, #0]
   21dec:	78dd      	ldrb	r5, [r3, #3]
{
   21dee:	b091      	sub	sp, #68	; 0x44
   21df0:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   21df2:	2d00      	cmp	r5, #0
   21df4:	d15e      	bne.n	21eb4 <smp_dhkey_check+0xcc>
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   21df6:	688f      	ldr	r7, [r1, #8]
		(void)memset(r, 0, sizeof(r));
   21df8:	2210      	movs	r2, #16
   21dfa:	4629      	mov	r1, r5
   21dfc:	a80c      	add	r0, sp, #48	; 0x30
   21dfe:	f7fe f865 	bl	1fecc <memset>
		switch (smp->method) {
   21e02:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
   21e06:	2b05      	cmp	r3, #5
   21e08:	d81f      	bhi.n	21e4a <smp_dhkey_check+0x62>
   21e0a:	e8df f003 	tbb	[pc, r3]
   21e0e:	0309      	.short	0x0309
   21e10:	201e0903 	.word	0x201e0903
			memcpy(r, &smp->passkey, sizeof(smp->passkey));
   21e14:	2204      	movs	r2, #4
   21e16:	f504 71cc 	add.w	r1, r4, #408	; 0x198
				memcpy(r, smp->oobd_local->r, sizeof(r));
   21e1a:	a80c      	add	r0, sp, #48	; 0x30
   21e1c:	f7fe f82b 	bl	1fe76 <memcpy>
			   &smp->chan.chan.conn->le.resp_addr,
   21e20:	4622      	mov	r2, r4
		if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
   21e22:	ae08      	add	r6, sp, #32
			   &smp->chan.chan.conn->le.resp_addr,
   21e24:	f852 3be7 	ldr.w	r3, [r2], #231
		if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
   21e28:	9603      	str	r6, [sp, #12]
			   &smp->chan.chan.conn->le.init_addr, e)) {
   21e2a:	f103 018f 	add.w	r1, r3, #143	; 0x8f
			   &smp->chan.chan.conn->le.resp_addr,
   21e2e:	3396      	adds	r3, #150	; 0x96
		if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
   21e30:	9301      	str	r3, [sp, #4]
   21e32:	f104 03d1 	add.w	r3, r4, #209	; 0xd1
   21e36:	9102      	str	r1, [sp, #8]
   21e38:	9300      	str	r3, [sp, #0]
   21e3a:	f104 01f7 	add.w	r1, r4, #247	; 0xf7
   21e3e:	ab0c      	add	r3, sp, #48	; 0x30
   21e40:	f204 1087 	addw	r0, r4, #391	; 0x187
   21e44:	f7ff ff84 	bl	21d50 <smp_f6>
   21e48:	b138      	cbz	r0, 21e5a <smp_dhkey_check+0x72>
		switch (smp->method) {
   21e4a:	2508      	movs	r5, #8
   21e4c:	e02d      	b.n	21eaa <smp_dhkey_check+0xc2>
			if (smp->oobd_local) {
   21e4e:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
   21e52:	2900      	cmp	r1, #0
   21e54:	d0e4      	beq.n	21e20 <smp_dhkey_check+0x38>
				memcpy(r, smp->oobd_local->r, sizeof(r));
   21e56:	2210      	movs	r2, #16
   21e58:	e7df      	b.n	21e1a <smp_dhkey_check+0x32>
		if (memcmp(e, req->e, 16)) {
   21e5a:	4630      	mov	r0, r6
   21e5c:	2210      	movs	r2, #16
   21e5e:	4639      	mov	r1, r7
   21e60:	f7fd fff9 	bl	1fe56 <memcmp>
   21e64:	4606      	mov	r6, r0
   21e66:	bb18      	cbnz	r0, 21eb0 <smp_dhkey_check+0xc8>
	return MIN(req->max_key_size, rsp->max_key_size);
   21e68:	f894 30d4 	ldrb.w	r3, [r4, #212]	; 0xd4
   21e6c:	f894 70cd 	ldrb.w	r7, [r4, #205]	; 0xcd
		(void)memset(ediv, 0, sizeof(ediv));
   21e70:	4601      	mov	r1, r0
	return MIN(req->max_key_size, rsp->max_key_size);
   21e72:	429f      	cmp	r7, r3
		(void)memset(ediv, 0, sizeof(ediv));
   21e74:	f04f 0202 	mov.w	r2, #2
   21e78:	a805      	add	r0, sp, #20
	return MIN(req->max_key_size, rsp->max_key_size);
   21e7a:	bf28      	it	cs
   21e7c:	461f      	movcs	r7, r3
		(void)memset(ediv, 0, sizeof(ediv));
   21e7e:	f7fe f825 	bl	1fecc <memset>
		(void)memset(rand, 0, sizeof(rand));
   21e82:	2208      	movs	r2, #8
   21e84:	4631      	mov	r1, r6
   21e86:	a806      	add	r0, sp, #24
   21e88:	f7fe f820 	bl	1fecc <memset>
		if (bt_conn_le_start_encryption(smp->chan.chan.conn, rand, ediv,
   21e8c:	6820      	ldr	r0, [r4, #0]
   21e8e:	9700      	str	r7, [sp, #0]
   21e90:	f204 1307 	addw	r3, r4, #263	; 0x107
   21e94:	aa05      	add	r2, sp, #20
   21e96:	a906      	add	r1, sp, #24
   21e98:	f7fe fb21 	bl	204de <bt_conn_le_start_encryption>
   21e9c:	2800      	cmp	r0, #0
   21e9e:	dbd4      	blt.n	21e4a <smp_dhkey_check+0x62>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   21ea0:	2101      	movs	r1, #1
   21ea2:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
   21ea6:	f7ff fed8 	bl	21c5a <atomic_set_bit>
}
   21eaa:	4628      	mov	r0, r5
   21eac:	b011      	add	sp, #68	; 0x44
   21eae:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   21eb0:	250b      	movs	r5, #11
   21eb2:	e7fa      	b.n	21eaa <smp_dhkey_check+0xc2>
	return 0;
   21eb4:	2500      	movs	r5, #0
   21eb6:	e7f8      	b.n	21eaa <smp_dhkey_check+0xc2>

00021eb8 <smp_f4>:
{
   21eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
   21eba:	b097      	sub	sp, #92	; 0x5c
   21ebc:	4614      	mov	r4, r2
   21ebe:	460e      	mov	r6, r1
	sys_memcpy_swap(m, u, 32);
   21ec0:	2220      	movs	r2, #32
   21ec2:	4601      	mov	r1, r0
   21ec4:	a805      	add	r0, sp, #20
{
   21ec6:	461d      	mov	r5, r3
   21ec8:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   21eca:	f7ff feba 	bl	21c42 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   21ece:	2220      	movs	r2, #32
   21ed0:	4631      	mov	r1, r6
   21ed2:	a80d      	add	r0, sp, #52	; 0x34
   21ed4:	f7ff feb5 	bl	21c42 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   21ed8:	4621      	mov	r1, r4
   21eda:	2210      	movs	r2, #16
   21edc:	a801      	add	r0, sp, #4
	m[64] = z;
   21ede:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   21ee2:	f7ff feae 	bl	21c42 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
   21ee6:	463b      	mov	r3, r7
   21ee8:	2241      	movs	r2, #65	; 0x41
   21eea:	a905      	add	r1, sp, #20
   21eec:	a801      	add	r0, sp, #4
   21eee:	f7ff fecb 	bl	21c88 <bt_smp_aes_cmac>
	if (err) {
   21ef2:	4604      	mov	r4, r0
   21ef4:	b910      	cbnz	r0, 21efc <smp_f4+0x44>
	sys_mem_swap(res, 16);
   21ef6:	4638      	mov	r0, r7
   21ef8:	f7ff ff1c 	bl	21d34 <sys_mem_swap.constprop.0>
}
   21efc:	4620      	mov	r0, r4
   21efe:	b017      	add	sp, #92	; 0x5c
   21f00:	bdf0      	pop	{r4, r5, r6, r7, pc}

00021f02 <smp_send_pairing_random>:
{
   21f02:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   21f04:	2104      	movs	r1, #4
{
   21f06:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   21f08:	f7ff fef4 	bl	21cf4 <smp_create_pdu.isra.0>
	if (!rsp_buf) {
   21f0c:	4604      	mov	r4, r0
   21f0e:	b178      	cbz	r0, 21f30 <smp_send_pairing_random+0x2e>
	req = net_buf_add(rsp_buf, sizeof(*req));
   21f10:	2110      	movs	r1, #16
   21f12:	3008      	adds	r0, #8
   21f14:	f000 fb40 	bl	22598 <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
   21f18:	2210      	movs	r2, #16
   21f1a:	f105 01e7 	add.w	r1, r5, #231	; 0xe7
   21f1e:	f7fd ffaa 	bl	1fe76 <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   21f22:	4628      	mov	r0, r5
   21f24:	2200      	movs	r2, #0
   21f26:	4621      	mov	r1, r4
   21f28:	f7ec fd38 	bl	e99c <smp_send.isra.0>
	return 0;
   21f2c:	2000      	movs	r0, #0
}
   21f2e:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   21f30:	2008      	movs	r0, #8
   21f32:	e7fc      	b.n	21f2e <smp_send_pairing_random+0x2c>

00021f34 <smp_signing_info>:
   21f34:	2007      	movs	r0, #7
   21f36:	4770      	bx	lr

00021f38 <smp_pairing_confirm>:
{
   21f38:	b510      	push	{r4, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   21f3a:	f100 03c4 	add.w	r3, r0, #196	; 0xc4
   21f3e:	4604      	mov	r4, r0
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
   21f40:	6889      	ldr	r1, [r1, #8]
   21f42:	f3bf 8f5b 	dmb	ish
   21f46:	e853 2f00 	ldrex	r2, [r3]
   21f4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
   21f4e:	e843 2000 	strex	r0, r2, [r3]
   21f52:	2800      	cmp	r0, #0
   21f54:	d1f7      	bne.n	21f46 <smp_pairing_confirm+0xe>
   21f56:	f3bf 8f5b 	dmb	ish
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
   21f5a:	2210      	movs	r2, #16
   21f5c:	f104 00d7 	add.w	r0, r4, #215	; 0xd7
   21f60:	f7fd ff89 	bl	1fe76 <memcpy>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
   21f64:	6823      	ldr	r3, [r4, #0]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   21f66:	78db      	ldrb	r3, [r3, #3]
   21f68:	b94b      	cbnz	r3, 21f7e <smp_pairing_confirm+0x46>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   21f6a:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   21f6e:	2104      	movs	r1, #4
   21f70:	f7ff fe73 	bl	21c5a <atomic_set_bit>
		return smp_send_pairing_random(smp);
   21f74:	4620      	mov	r0, r4
}
   21f76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return smp_send_pairing_random(smp);
   21f7a:	f7ff bfc2 	b.w	21f02 <smp_send_pairing_random>
}
   21f7e:	2000      	movs	r0, #0
   21f80:	bd10      	pop	{r4, pc}

00021f82 <atomic_test_and_clear_bit>:
{
   21f82:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   21f84:	2301      	movs	r3, #1
   21f86:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   21f8a:	43ca      	mvns	r2, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   21f8c:	f3bf 8f5b 	dmb	ish
   21f90:	e850 3f00 	ldrex	r3, [r0]
   21f94:	ea03 0c02 	and.w	ip, r3, r2
   21f98:	e840 ce00 	strex	lr, ip, [r0]
   21f9c:	f1be 0f00 	cmp.w	lr, #0
   21fa0:	d1f6      	bne.n	21f90 <atomic_test_and_clear_bit+0xe>
   21fa2:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   21fa6:	420b      	tst	r3, r1
}
   21fa8:	bf14      	ite	ne
   21faa:	2001      	movne	r0, #1
   21fac:	2000      	moveq	r0, #0
   21fae:	f85d fb04 	ldr.w	pc, [sp], #4

00021fb2 <smp_reset>:
{
   21fb2:	b538      	push	{r3, r4, r5, lr}
   21fb4:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   21fb6:	6805      	ldr	r5, [r0, #0]
	k_delayed_work_cancel(&smp->work);
   21fb8:	f500 70d8 	add.w	r0, r0, #432	; 0x1b0
   21fbc:	f001 f8a4 	bl	23108 <k_delayed_work_cancel>
	smp->method = JUST_WORKS;
   21fc0:	2300      	movs	r3, #0
   21fc2:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
	atomic_set(&smp->allowed_cmds, 0);
   21fc6:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   21fca:	f3bf 8f5b 	dmb	ish
   21fce:	e850 2f00 	ldrex	r2, [r0]
   21fd2:	e840 3100 	strex	r1, r3, [r0]
   21fd6:	2900      	cmp	r1, #0
   21fd8:	d1f9      	bne.n	21fce <smp_reset+0x1c>
   21fda:	f3bf 8f5b 	dmb	ish
   21fde:	f3bf 8f5b 	dmb	ish
   21fe2:	34c4      	adds	r4, #196	; 0xc4
   21fe4:	e854 2f00 	ldrex	r2, [r4]
   21fe8:	e844 3100 	strex	r1, r3, [r4]
   21fec:	2900      	cmp	r1, #0
   21fee:	d1f9      	bne.n	21fe4 <smp_reset+0x32>
   21ff0:	f3bf 8f5b 	dmb	ish
	if (conn->required_sec_level != conn->sec_level) {
   21ff4:	7a6b      	ldrb	r3, [r5, #9]
   21ff6:	7aaa      	ldrb	r2, [r5, #10]
   21ff8:	429a      	cmp	r2, r3
		conn->required_sec_level = conn->sec_level;
   21ffa:	bf18      	it	ne
   21ffc:	72ab      	strbne	r3, [r5, #10]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   21ffe:	78eb      	ldrb	r3, [r5, #3]
   22000:	b923      	cbnz	r3, 2200c <smp_reset+0x5a>
}
   22002:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   22006:	210b      	movs	r1, #11
   22008:	f7ff be27 	b.w	21c5a <atomic_set_bit>
}
   2200c:	bd38      	pop	{r3, r4, r5, pc}

0002200e <smp_error>:
{
   2200e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   22010:	4606      	mov	r6, r0
   22012:	460c      	mov	r4, r1
	smp_pairing_complete(smp, reason);
   22014:	f7ec ffb2 	bl	ef7c <smp_pairing_complete>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   22018:	2105      	movs	r1, #5
   2201a:	4630      	mov	r0, r6
   2201c:	f7ff fe6a 	bl	21cf4 <smp_create_pdu.isra.0>
	if (!buf) {
   22020:	4605      	mov	r5, r0
   22022:	b178      	cbz	r0, 22044 <smp_error+0x36>
	rsp = net_buf_add(buf, sizeof(*rsp));
   22024:	2101      	movs	r1, #1
   22026:	3008      	adds	r0, #8
   22028:	f000 fab6 	bl	22598 <net_buf_simple_add>
	rsp->reason = reason;
   2202c:	7004      	strb	r4, [r0, #0]
	bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   2202e:	2400      	movs	r4, #0
   22030:	6830      	ldr	r0, [r6, #0]
   22032:	9400      	str	r4, [sp, #0]
   22034:	4623      	mov	r3, r4
   22036:	462a      	mov	r2, r5
   22038:	2106      	movs	r1, #6
   2203a:	f7fe fca2 	bl	20982 <bt_l2cap_send_cb>
	return 0;
   2203e:	4620      	mov	r0, r4
}
   22040:	b002      	add	sp, #8
   22042:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   22044:	f06f 0036 	mvn.w	r0, #54	; 0x36
   22048:	e7fa      	b.n	22040 <smp_error+0x32>

0002204a <smp_ident_sent>:
{
   2204a:	b508      	push	{r3, lr}
	if (conn->type == BT_CONN_TYPE_LE) {
   2204c:	7883      	ldrb	r3, [r0, #2]
   2204e:	2b01      	cmp	r3, #1
   22050:	d10f      	bne.n	22072 <smp_ident_sent+0x28>
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
   22052:	2106      	movs	r1, #6
   22054:	f7fe fdf1 	bl	20c3a <bt_l2cap_le_lookup_tx_cid>
		smp->local_dist &= ~dist_complete;
   22058:	f890 21a8 	ldrb.w	r2, [r0, #424]	; 0x1a8
   2205c:	f022 0201 	bic.w	r2, r2, #1
   22060:	f880 21a8 	strb.w	r2, [r0, #424]	; 0x1a8
		if (!smp->local_dist && !smp->remote_dist) {
   22064:	f8b0 11a8 	ldrh.w	r1, [r0, #424]	; 0x1a8
   22068:	b919      	cbnz	r1, 22072 <smp_ident_sent+0x28>
}
   2206a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			smp_pairing_complete(smp, 0);
   2206e:	f7ec bf85 	b.w	ef7c <smp_pairing_complete>
}
   22072:	bd08      	pop	{r3, pc}

00022074 <bt_smp_encrypt_change>:
{
   22074:	b570      	push	{r4, r5, r6, lr}
	struct bt_conn *conn = chan->conn;
   22076:	4605      	mov	r5, r0
{
   22078:	4604      	mov	r4, r0
	struct bt_conn *conn = chan->conn;
   2207a:	f855 6bc4 	ldr.w	r6, [r5], #196
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2207e:	f3bf 8f5b 	dmb	ish
   22082:	e855 3f00 	ldrex	r3, [r5]
   22086:	f023 0302 	bic.w	r3, r3, #2
   2208a:	e845 3200 	strex	r2, r3, [r5]
   2208e:	2a00      	cmp	r2, #0
   22090:	d1f7      	bne.n	22082 <bt_smp_encrypt_change+0xe>
   22092:	f3bf 8f5b 	dmb	ish
	if (hci_status) {
   22096:	2900      	cmp	r1, #0
   22098:	d14b      	bne.n	22132 <bt_smp_encrypt_change+0xbe>
	if (!conn->encrypt) {
   2209a:	7af3      	ldrb	r3, [r6, #11]
   2209c:	2b00      	cmp	r3, #0
   2209e:	d048      	beq.n	22132 <bt_smp_encrypt_change+0xbe>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   220a0:	2103      	movs	r1, #3
   220a2:	4628      	mov	r0, r5
   220a4:	f7ff fde7 	bl	21c76 <atomic_test_bit>
   220a8:	b920      	cbnz	r0, 220b4 <bt_smp_encrypt_change+0x40>
		smp_reset(smp);
   220aa:	4620      	mov	r0, r4
}
   220ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		smp_reset(smp);
   220b0:	f7ff bf7f 	b.w	21fb2 <smp_reset>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   220b4:	2105      	movs	r1, #5
   220b6:	4628      	mov	r0, r5
   220b8:	f7ff fddd 	bl	21c76 <atomic_test_bit>
   220bc:	b198      	cbz	r0, 220e6 <bt_smp_encrypt_change+0x72>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
   220be:	f894 31a8 	ldrb.w	r3, [r4, #424]	; 0x1a8
   220c2:	071b      	lsls	r3, r3, #28
   220c4:	d507      	bpl.n	220d6 <bt_smp_encrypt_change+0x62>
   220c6:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
   220ca:	0718      	lsls	r0, r3, #28
   220cc:	d503      	bpl.n	220d6 <bt_smp_encrypt_change+0x62>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
   220ce:	2110      	movs	r1, #16
   220d0:	4628      	mov	r0, r5
   220d2:	f7ff fdc2 	bl	21c5a <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
   220d6:	f8b4 31a8 	ldrh.w	r3, [r4, #424]	; 0x1a8
   220da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   220de:	f023 0308 	bic.w	r3, r3, #8
   220e2:	f8a4 31a8 	strh.w	r3, [r4, #424]	; 0x1a8
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
   220e6:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
   220ea:	07d9      	lsls	r1, r3, #31
   220ec:	d519      	bpl.n	22122 <bt_smp_encrypt_change+0xae>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
   220ee:	2106      	movs	r1, #6
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   220f0:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   220f4:	f7ff fdb1 	bl	21c5a <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   220f8:	2102      	movs	r1, #2
   220fa:	4628      	mov	r0, r5
   220fc:	f7ff fdad 	bl	21c5a <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   22100:	78f3      	ldrb	r3, [r6, #3]
   22102:	b913      	cbnz	r3, 2210a <bt_smp_encrypt_change+0x96>
	    conn->role == BT_HCI_ROLE_MASTER && smp->remote_dist) {
   22104:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
   22108:	b99b      	cbnz	r3, 22132 <bt_smp_encrypt_change+0xbe>
	if (bt_smp_distribute_keys(smp)) {
   2210a:	4620      	mov	r0, r4
   2210c:	f7ec fe90 	bl	ee30 <bt_smp_distribute_keys>
   22110:	b978      	cbnz	r0, 22132 <bt_smp_encrypt_change+0xbe>
	if (!smp->local_dist && !smp->remote_dist) {
   22112:	f8b4 11a8 	ldrh.w	r1, [r4, #424]	; 0x1a8
   22116:	b961      	cbnz	r1, 22132 <bt_smp_encrypt_change+0xbe>
		smp_pairing_complete(smp, 0);
   22118:	4620      	mov	r0, r4
}
   2211a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		smp_pairing_complete(smp, 0);
   2211e:	f7ec bf2d 	b.w	ef7c <smp_pairing_complete>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   22122:	079a      	lsls	r2, r3, #30
   22124:	d501      	bpl.n	2212a <bt_smp_encrypt_change+0xb6>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   22126:	2108      	movs	r1, #8
   22128:	e7e2      	b.n	220f0 <bt_smp_encrypt_change+0x7c>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   2212a:	075b      	lsls	r3, r3, #29
   2212c:	d5e4      	bpl.n	220f8 <bt_smp_encrypt_change+0x84>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   2212e:	210a      	movs	r1, #10
   22130:	e7de      	b.n	220f0 <bt_smp_encrypt_change+0x7c>
}
   22132:	bd70      	pop	{r4, r5, r6, pc}

00022134 <smp_c1>:
{
   22134:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   22138:	b089      	sub	sp, #36	; 0x24
   2213a:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   2213e:	4699      	mov	r9, r3
	p1[0] = ia->type;
   22140:	783b      	ldrb	r3, [r7, #0]
{
   22142:	9d12      	ldr	r5, [sp, #72]	; 0x48
	p1[0] = ia->type;
   22144:	f88d 3000 	strb.w	r3, [sp]
{
   22148:	460c      	mov	r4, r1
	p1[1] = ra->type;
   2214a:	f898 3000 	ldrb.w	r3, [r8]
   2214e:	f88d 3001 	strb.w	r3, [sp, #1]
{
   22152:	4611      	mov	r1, r2
   22154:	4606      	mov	r6, r0
	memcpy(p1 + 2, preq, 7);
   22156:	2207      	movs	r2, #7
   22158:	f10d 0002 	add.w	r0, sp, #2
   2215c:	f7fd fe8b 	bl	1fe76 <memcpy>
	memcpy(p1 + 9, pres, 7);
   22160:	2207      	movs	r2, #7
   22162:	4649      	mov	r1, r9
   22164:	f10d 0009 	add.w	r0, sp, #9
   22168:	f7fd fe85 	bl	1fe76 <memcpy>
	while (len--) {
   2216c:	f104 0010 	add.w	r0, r4, #16
   22170:	4629      	mov	r1, r5
   22172:	466a      	mov	r2, sp
   22174:	4284      	cmp	r4, r0
   22176:	d127      	bne.n	221c8 <smp_c1+0x94>
	err = bt_encrypt_le(k, enc_data, enc_data);
   22178:	462a      	mov	r2, r5
   2217a:	4629      	mov	r1, r5
   2217c:	4630      	mov	r0, r6
   2217e:	f7f1 f8db 	bl	13338 <bt_encrypt_le>
	if (err) {
   22182:	4604      	mov	r4, r0
   22184:	b9e0      	cbnz	r0, 221c0 <smp_c1+0x8c>
	memcpy(p2, ra->a.val, 6);
   22186:	2206      	movs	r2, #6
   22188:	f108 0101 	add.w	r1, r8, #1
   2218c:	a804      	add	r0, sp, #16
   2218e:	f7fd fe72 	bl	1fe76 <memcpy>
	memcpy(p2 + 6, ia->a.val, 6);
   22192:	2206      	movs	r2, #6
   22194:	1c79      	adds	r1, r7, #1
   22196:	f10d 0016 	add.w	r0, sp, #22
   2219a:	f7fd fe6c 	bl	1fe76 <memcpy>
	(void)memset(p2 + 12, 0, 4);
   2219e:	2204      	movs	r2, #4
   221a0:	4621      	mov	r1, r4
   221a2:	a807      	add	r0, sp, #28
   221a4:	f7fd fe92 	bl	1fecc <memset>
	while (len--) {
   221a8:	f105 0010 	add.w	r0, r5, #16
   221ac:	462a      	mov	r2, r5
   221ae:	ab04      	add	r3, sp, #16
   221b0:	4282      	cmp	r2, r0
   221b2:	d112      	bne.n	221da <smp_c1+0xa6>
	return bt_encrypt_le(k, enc_data, enc_data);
   221b4:	462a      	mov	r2, r5
   221b6:	4629      	mov	r1, r5
   221b8:	4630      	mov	r0, r6
   221ba:	f7f1 f8bd 	bl	13338 <bt_encrypt_le>
   221be:	4604      	mov	r4, r0
}
   221c0:	4620      	mov	r0, r4
   221c2:	b009      	add	sp, #36	; 0x24
   221c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		*r++ = *p++ ^ *q++;
   221c8:	f814 3b01 	ldrb.w	r3, [r4], #1
   221cc:	f812 cb01 	ldrb.w	ip, [r2], #1
   221d0:	ea83 030c 	eor.w	r3, r3, ip
   221d4:	f801 3b01 	strb.w	r3, [r1], #1
   221d8:	e7cc      	b.n	22174 <smp_c1+0x40>
   221da:	f812 1b01 	ldrb.w	r1, [r2], #1
   221de:	f813 4b01 	ldrb.w	r4, [r3], #1
   221e2:	4061      	eors	r1, r4
   221e4:	f802 1c01 	strb.w	r1, [r2, #-1]
   221e8:	e7e2      	b.n	221b0 <smp_c1+0x7c>

000221ea <legacy_send_pairing_confirm>:
{
   221ea:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   221ec:	2103      	movs	r1, #3
	struct bt_conn *conn = smp->chan.chan.conn;
   221ee:	6805      	ldr	r5, [r0, #0]
{
   221f0:	4604      	mov	r4, r0
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   221f2:	f7ff fd7f 	bl	21cf4 <smp_create_pdu.isra.0>
	if (!buf) {
   221f6:	4606      	mov	r6, r0
   221f8:	b1c0      	cbz	r0, 2222c <legacy_send_pairing_confirm+0x42>
	req = net_buf_add(buf, sizeof(*req));
   221fa:	2110      	movs	r1, #16
   221fc:	3008      	adds	r0, #8
   221fe:	f000 f9cb 	bl	22598 <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
   22202:	f105 0396 	add.w	r3, r5, #150	; 0x96
   22206:	358f      	adds	r5, #143	; 0x8f
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
   22208:	9002      	str	r0, [sp, #8]
   2220a:	9301      	str	r3, [sp, #4]
   2220c:	9500      	str	r5, [sp, #0]
   2220e:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
   22212:	f104 02c9 	add.w	r2, r4, #201	; 0xc9
   22216:	f104 01e7 	add.w	r1, r4, #231	; 0xe7
   2221a:	f204 1007 	addw	r0, r4, #263	; 0x107
   2221e:	f7ff ff89 	bl	22134 <smp_c1>
   22222:	4605      	mov	r5, r0
   22224:	b120      	cbz	r0, 22230 <legacy_send_pairing_confirm+0x46>
		net_buf_unref(buf);
   22226:	4630      	mov	r0, r6
   22228:	f7f9 fc5a 	bl	1bae0 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   2222c:	2008      	movs	r0, #8
   2222e:	e012      	b.n	22256 <legacy_send_pairing_confirm+0x6c>
	smp_send(smp, buf, NULL, NULL);
   22230:	4602      	mov	r2, r0
   22232:	4631      	mov	r1, r6
   22234:	4620      	mov	r0, r4
   22236:	34c4      	adds	r4, #196	; 0xc4
   22238:	f7ec fbb0 	bl	e99c <smp_send.isra.0>
   2223c:	f3bf 8f5b 	dmb	ish
   22240:	e854 3f00 	ldrex	r3, [r4]
   22244:	f023 0301 	bic.w	r3, r3, #1
   22248:	e844 3200 	strex	r2, r3, [r4]
   2224c:	2a00      	cmp	r2, #0
   2224e:	d1f7      	bne.n	22240 <legacy_send_pairing_confirm+0x56>
   22250:	f3bf 8f5b 	dmb	ish
	return 0;
   22254:	4628      	mov	r0, r5
}
   22256:	b004      	add	sp, #16
   22258:	bd70      	pop	{r4, r5, r6, pc}

0002225a <bt_smp_request_ltk>:
{
   2225a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2225e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   22260:	e9cd 2300 	strd	r2, r3, [sp]
   22264:	4605      	mov	r5, r0
	smp = smp_chan_get(conn);
   22266:	f7ec fb57 	bl	e918 <smp_chan_get>
	if (!smp) {
   2226a:	4604      	mov	r4, r0
   2226c:	2800      	cmp	r0, #0
   2226e:	f000 809c 	beq.w	223aa <bt_smp_request_ltk+0x150>
	if (ediv == 0U && rand == 0U &&
   22272:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
   22276:	f1b9 0f00 	cmp.w	r9, #0
   2227a:	d12d      	bne.n	222d8 <bt_smp_request_ltk+0x7e>
   2227c:	e9dd 2300 	ldrd	r2, r3, [sp]
   22280:	4313      	orrs	r3, r2
   22282:	d129      	bne.n	222d8 <bt_smp_request_ltk+0x7e>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   22284:	f100 08c4 	add.w	r8, r0, #196	; 0xc4
   22288:	2103      	movs	r1, #3
   2228a:	4640      	mov	r0, r8
   2228c:	f7ff fcf3 	bl	21c76 <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   22290:	b310      	cbz	r0, 222d8 <bt_smp_request_ltk+0x7e>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   22292:	2101      	movs	r1, #1
   22294:	4640      	mov	r0, r8
   22296:	f7ff fcee 	bl	21c76 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   2229a:	4606      	mov	r6, r0
   2229c:	b1e0      	cbz	r0, 222d8 <bt_smp_request_ltk+0x7e>
	return MIN(req->max_key_size, rsp->max_key_size);
   2229e:	f894 50d4 	ldrb.w	r5, [r4, #212]	; 0xd4
   222a2:	f894 30cd 	ldrb.w	r3, [r4, #205]	; 0xcd
   222a6:	429d      	cmp	r5, r3
   222a8:	bf28      	it	cs
   222aa:	461d      	movcs	r5, r3
		memcpy(ltk, smp->tk, enc_size);
   222ac:	462a      	mov	r2, r5
   222ae:	f204 1107 	addw	r1, r4, #263	; 0x107
   222b2:	4638      	mov	r0, r7
   222b4:	f7fd fddf 	bl	1fe76 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   222b8:	2d0f      	cmp	r5, #15
   222ba:	d805      	bhi.n	222c8 <bt_smp_request_ltk+0x6e>
			(void)memset(ltk + enc_size, 0,
   222bc:	f1c5 0210 	rsb	r2, r5, #16
   222c0:	4649      	mov	r1, r9
   222c2:	1978      	adds	r0, r7, r5
   222c4:	f7fd fe02 	bl	1fecc <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   222c8:	2101      	movs	r1, #1
   222ca:	4640      	mov	r0, r8
   222cc:	f7ff fcc5 	bl	21c5a <atomic_set_bit>
}
   222d0:	4630      	mov	r0, r6
   222d2:	b003      	add	sp, #12
   222d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!conn->le.keys) {
   222d8:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   222dc:	b983      	cbnz	r3, 22300 <bt_smp_request_ltk+0xa6>
					     &conn->le.dst);
   222de:	f105 0688 	add.w	r6, r5, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   222e2:	7a29      	ldrb	r1, [r5, #8]
   222e4:	4632      	mov	r2, r6
   222e6:	2020      	movs	r0, #32
   222e8:	f7ed fe0a 	bl	ff00 <bt_keys_find>
   222ec:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
   222f0:	b930      	cbnz	r0, 22300 <bt_smp_request_ltk+0xa6>
			conn->le.keys = bt_keys_find(BT_KEYS_SLAVE_LTK,
   222f2:	7a29      	ldrb	r1, [r5, #8]
   222f4:	4632      	mov	r2, r6
   222f6:	2001      	movs	r0, #1
   222f8:	f7ed fe02 	bl	ff00 <bt_keys_find>
   222fc:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   22300:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
   22304:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
   22308:	b9ce      	cbnz	r6, 2233e <bt_smp_request_ltk+0xe4>
   2230a:	e9dd 2300 	ldrd	r2, r3, [sp]
   2230e:	4313      	orrs	r3, r2
   22310:	d115      	bne.n	2233e <bt_smp_request_ltk+0xe4>
   22312:	2800      	cmp	r0, #0
   22314:	d03c      	beq.n	22390 <bt_smp_request_ltk+0x136>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   22316:	89c3      	ldrh	r3, [r0, #14]
   22318:	069a      	lsls	r2, r3, #26
   2231a:	d511      	bpl.n	22340 <bt_smp_request_ltk+0xe6>
		enc_size = conn->le.keys->enc_size;
   2231c:	7b04      	ldrb	r4, [r0, #12]
		memcpy(ltk, conn->le.keys->ltk.val, enc_size);
   2231e:	f100 011a 	add.w	r1, r0, #26
   22322:	4622      	mov	r2, r4
   22324:	4638      	mov	r0, r7
   22326:	f7fd fda6 	bl	1fe76 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   2232a:	2c0f      	cmp	r4, #15
   2232c:	d805      	bhi.n	2233a <bt_smp_request_ltk+0xe0>
			(void)memset(ltk + enc_size, 0,
   2232e:	f1c4 0210 	rsb	r2, r4, #16
   22332:	4631      	mov	r1, r6
   22334:	1938      	adds	r0, r7, r4
   22336:	f7fd fdc9 	bl	1fecc <memset>
		return true;
   2233a:	2601      	movs	r6, #1
   2233c:	e7c8      	b.n	222d0 <bt_smp_request_ltk+0x76>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
   2233e:	b338      	cbz	r0, 22390 <bt_smp_request_ltk+0x136>
   22340:	89c3      	ldrh	r3, [r0, #14]
   22342:	07db      	lsls	r3, r3, #31
   22344:	d524      	bpl.n	22390 <bt_smp_request_ltk+0x136>
	    !memcmp(conn->le.keys->slave_ltk.rand, &rand, 8) &&
   22346:	2208      	movs	r2, #8
   22348:	4669      	mov	r1, sp
   2234a:	3040      	adds	r0, #64	; 0x40
   2234c:	f7fd fd83 	bl	1fe56 <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
   22350:	b9f0      	cbnz	r0, 22390 <bt_smp_request_ltk+0x136>
	    !memcmp(conn->le.keys->slave_ltk.ediv, &ediv, 2)) {
   22352:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
   22356:	2202      	movs	r2, #2
   22358:	a90a      	add	r1, sp, #40	; 0x28
   2235a:	3048      	adds	r0, #72	; 0x48
   2235c:	f7fd fd7b 	bl	1fe56 <memcmp>
	    !memcmp(conn->le.keys->slave_ltk.rand, &rand, 8) &&
   22360:	4606      	mov	r6, r0
   22362:	b9a8      	cbnz	r0, 22390 <bt_smp_request_ltk+0x136>
		enc_size = conn->le.keys->enc_size;
   22364:	f8d5 10b4 	ldr.w	r1, [r5, #180]	; 0xb4
   22368:	7b0d      	ldrb	r5, [r1, #12]
		memcpy(ltk, conn->le.keys->slave_ltk.val, enc_size);
   2236a:	4638      	mov	r0, r7
   2236c:	462a      	mov	r2, r5
   2236e:	314a      	adds	r1, #74	; 0x4a
   22370:	f7fd fd81 	bl	1fe76 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   22374:	2d0f      	cmp	r5, #15
   22376:	d805      	bhi.n	22384 <bt_smp_request_ltk+0x12a>
			(void)memset(ltk + enc_size, 0,
   22378:	f1c5 0210 	rsb	r2, r5, #16
   2237c:	4631      	mov	r1, r6
   2237e:	1978      	adds	r0, r7, r5
   22380:	f7fd fda4 	bl	1fecc <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   22384:	2101      	movs	r1, #1
   22386:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
   2238a:	f7ff fc66 	bl	21c5a <atomic_set_bit>
		return true;
   2238e:	e7d4      	b.n	2233a <bt_smp_request_ltk+0xe0>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   22390:	210e      	movs	r1, #14
   22392:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
   22396:	f7ff fc6e 	bl	21c76 <atomic_test_bit>
   2239a:	b118      	cbz	r0, 223a4 <bt_smp_request_ltk+0x14a>
		bt_conn_security_changed(smp->chan.chan.conn,
   2239c:	6820      	ldr	r0, [r4, #0]
   2239e:	2102      	movs	r1, #2
   223a0:	f7e8 fa06 	bl	a7b0 <bt_conn_security_changed>
	smp_reset(smp);
   223a4:	4620      	mov	r0, r4
   223a6:	f7ff fe04 	bl	21fb2 <smp_reset>
	return false;
   223aa:	2600      	movs	r6, #0
   223ac:	e790      	b.n	222d0 <bt_smp_request_ltk+0x76>

000223ae <bt_smp_sign>:
   223ae:	f06f 0022 	mvn.w	r0, #34	; 0x22
   223b2:	4770      	bx	lr

000223b4 <bt_smp_start_security>:
{
   223b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	switch (conn->role) {
   223b6:	78c3      	ldrb	r3, [r0, #3]
{
   223b8:	4604      	mov	r4, r0
	switch (conn->role) {
   223ba:	2b00      	cmp	r3, #0
   223bc:	d15b      	bne.n	22476 <bt_smp_start_security+0xc2>
		smp = smp_chan_get(conn);
   223be:	f7ec faab 	bl	e918 <smp_chan_get>
		if (!smp) {
   223c2:	4605      	mov	r5, r0
   223c4:	2800      	cmp	r0, #0
   223c6:	d059      	beq.n	2247c <bt_smp_start_security+0xc8>
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   223c8:	210b      	movs	r1, #11
   223ca:	1d20      	adds	r0, r4, #4
   223cc:	f7ff fc53 	bl	21c76 <atomic_test_bit>
   223d0:	bb00      	cbnz	r0, 22414 <bt_smp_start_security+0x60>
	if (!conn->le.keys) {
   223d2:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   223d6:	b983      	cbnz	r3, 223fa <bt_smp_start_security+0x46>
						     conn->id, &conn->le.dst);
   223d8:	f104 0688 	add.w	r6, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
   223dc:	7a21      	ldrb	r1, [r4, #8]
   223de:	4632      	mov	r2, r6
   223e0:	2020      	movs	r0, #32
   223e2:	f7ed fd8d 	bl	ff00 <bt_keys_find>
   223e6:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   223ea:	b930      	cbnz	r0, 223fa <bt_smp_start_security+0x46>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
   223ec:	7a21      	ldrb	r1, [r4, #8]
   223ee:	4632      	mov	r2, r6
   223f0:	2004      	movs	r0, #4
   223f2:	f7ed fd85 	bl	ff00 <bt_keys_find>
   223f6:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys ||
   223fa:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   223fe:	b14b      	cbz	r3, 22414 <bt_smp_start_security+0x60>
   22400:	89da      	ldrh	r2, [r3, #14]
   22402:	f002 0224 	and.w	r2, r2, #36	; 0x24
   22406:	b12a      	cbz	r2, 22414 <bt_smp_start_security+0x60>
	if (conn->required_sec_level > BT_SECURITY_L2 &&
   22408:	7aa2      	ldrb	r2, [r4, #10]
   2240a:	2a02      	cmp	r2, #2
   2240c:	d908      	bls.n	22420 <bt_smp_start_security+0x6c>
   2240e:	7b5b      	ldrb	r3, [r3, #13]
   22410:	07db      	lsls	r3, r3, #31
   22412:	d405      	bmi.n	22420 <bt_smp_start_security+0x6c>
			return smp_send_pairing_req(conn);
   22414:	4620      	mov	r0, r4
}
   22416:	b002      	add	sp, #8
   22418:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			return smp_send_pairing_req(conn);
   2241c:	f7ec bbb0 	b.w	eb80 <smp_send_pairing_req>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   22420:	f105 06c4 	add.w	r6, r5, #196	; 0xc4
   22424:	2103      	movs	r1, #3
   22426:	4630      	mov	r0, r6
   22428:	f7ff fc25 	bl	21c76 <atomic_test_bit>
   2242c:	b120      	cbz	r0, 22438 <bt_smp_start_security+0x84>
			return -EBUSY;
   2242e:	f06f 040f 	mvn.w	r4, #15
}
   22432:	4620      	mov	r0, r4
   22434:	b002      	add	sp, #8
   22436:	bd70      	pop	{r4, r5, r6, pc}
		if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   22438:	2101      	movs	r1, #1
   2243a:	4630      	mov	r0, r6
   2243c:	f7ff fc1b 	bl	21c76 <atomic_test_bit>
   22440:	2800      	cmp	r0, #0
   22442:	d1f4      	bne.n	2242e <bt_smp_start_security+0x7a>
						  conn->le.keys->ltk.rand,
   22444:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
		err = bt_conn_le_start_encryption(conn,
   22448:	7b0b      	ldrb	r3, [r1, #12]
   2244a:	9300      	str	r3, [sp, #0]
   2244c:	f101 0218 	add.w	r2, r1, #24
   22450:	f101 031a 	add.w	r3, r1, #26
   22454:	4620      	mov	r0, r4
   22456:	3110      	adds	r1, #16
   22458:	f7fe f841 	bl	204de <bt_conn_le_start_encryption>
		if (err) {
   2245c:	4604      	mov	r4, r0
   2245e:	2800      	cmp	r0, #0
   22460:	d1e7      	bne.n	22432 <bt_smp_start_security+0x7e>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   22462:	f105 00c0 	add.w	r0, r5, #192	; 0xc0
   22466:	210b      	movs	r1, #11
   22468:	f7ff fbf7 	bl	21c5a <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   2246c:	2101      	movs	r1, #1
   2246e:	4630      	mov	r0, r6
   22470:	f7ff fbf3 	bl	21c5a <atomic_set_bit>
		return 0;
   22474:	e7dd      	b.n	22432 <bt_smp_start_security+0x7e>
		return -EINVAL;
   22476:	f06f 0415 	mvn.w	r4, #21
   2247a:	e7da      	b.n	22432 <bt_smp_start_security+0x7e>
			return -ENOTCONN;
   2247c:	f06f 0438 	mvn.w	r4, #56	; 0x38
   22480:	e7d7      	b.n	22432 <bt_smp_start_security+0x7e>

00022482 <bt_keys_get_type>:
{
   22482:	b570      	push	{r4, r5, r6, lr}
   22484:	4604      	mov	r4, r0
   22486:	460d      	mov	r5, r1
   22488:	4616      	mov	r6, r2
	keys = bt_keys_find(type, id, addr);
   2248a:	f7ed fd39 	bl	ff00 <bt_keys_find>
	if (keys) {
   2248e:	b938      	cbnz	r0, 224a0 <bt_keys_get_type+0x1e>
	keys = bt_keys_get_addr(id, addr);
   22490:	4631      	mov	r1, r6
   22492:	4628      	mov	r0, r5
   22494:	f7ed fcfe 	bl	fe94 <bt_keys_get_addr>
	if (!keys) {
   22498:	b110      	cbz	r0, 224a0 <bt_keys_get_type+0x1e>

void bt_keys_add_type(struct bt_keys *keys, int type)
{
	keys->keys |= type;
   2249a:	89c3      	ldrh	r3, [r0, #14]
   2249c:	431c      	orrs	r4, r3
   2249e:	81c4      	strh	r4, [r0, #14]
}
   224a0:	bd70      	pop	{r4, r5, r6, pc}

000224a2 <bt_keys_add_type>:
	keys->keys |= type;
   224a2:	89c3      	ldrh	r3, [r0, #14]
   224a4:	4319      	orrs	r1, r3
   224a6:	81c1      	strh	r1, [r0, #14]
}
   224a8:	4770      	bx	lr

000224aa <bt_keys_clear>:

void bt_keys_clear(struct bt_keys *keys)
{
   224aa:	b510      	push	{r4, lr}
	BT_DBG("%s (keys 0x%04x)", bt_addr_le_str(&keys->addr), keys->keys);

	if (keys->state & BT_KEYS_ID_ADDED) {
   224ac:	7a03      	ldrb	r3, [r0, #8]
   224ae:	075b      	lsls	r3, r3, #29
{
   224b0:	4604      	mov	r4, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   224b2:	d501      	bpl.n	224b8 <bt_keys_clear+0xe>
		bt_id_del(keys);
   224b4:	f7e6 fffa 	bl	94ac <bt_id_del>

		BT_DBG("Deleting key %s", log_strdup(key));
		settings_delete(key);
	}

	(void)memset(keys, 0, sizeof(*keys));
   224b8:	4620      	mov	r0, r4
   224ba:	225c      	movs	r2, #92	; 0x5c
}
   224bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)memset(keys, 0, sizeof(*keys));
   224c0:	2100      	movs	r1, #0
   224c2:	f7fd bd03 	b.w	1fecc <memset>

000224c6 <fixed_data_unref>:
}
   224c6:	4770      	bx	lr

000224c8 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   224c8:	6a01      	ldr	r1, [r0, #32]
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   224ca:	6849      	ldr	r1, [r1, #4]
   224cc:	6809      	ldr	r1, [r1, #0]
   224ce:	f7f9 ba7b 	b.w	1b9c8 <net_buf_alloc_len>

000224d2 <net_buf_get>:
{
   224d2:	b570      	push	{r4, r5, r6, lr}
   224d4:	4606      	mov	r6, r0
	return z_impl_k_queue_get(queue, timeout);
   224d6:	f7fa fdcb 	bl	1d070 <z_impl_k_queue_get>
	if (!buf) {
   224da:	4605      	mov	r5, r0
   224dc:	b128      	cbz	r0, 224ea <net_buf_get+0x18>
   224de:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   224e0:	7963      	ldrb	r3, [r4, #5]
   224e2:	f013 0301 	ands.w	r3, r3, #1
   224e6:	d102      	bne.n	224ee <net_buf_get+0x1c>
	frag->frags = NULL;
   224e8:	6023      	str	r3, [r4, #0]
}
   224ea:	4628      	mov	r0, r5
   224ec:	bd70      	pop	{r4, r5, r6, pc}
   224ee:	2300      	movs	r3, #0
   224f0:	2200      	movs	r2, #0
   224f2:	4630      	mov	r0, r6
   224f4:	f7fa fdbc 	bl	1d070 <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   224f8:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   224fa:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   224fc:	f023 0301 	bic.w	r3, r3, #1
   22500:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   22502:	4604      	mov	r4, r0
   22504:	e7ec      	b.n	224e0 <net_buf_get+0xe>

00022506 <net_buf_simple_init_with_data>:
	buf->size  = size;
   22506:	b292      	uxth	r2, r2
	buf->__buf = data;
   22508:	6081      	str	r1, [r0, #8]
	buf->data  = data;
   2250a:	6001      	str	r1, [r0, #0]
	buf->size  = size;
   2250c:	80c2      	strh	r2, [r0, #6]
	buf->len   = size;
   2250e:	8082      	strh	r2, [r0, #4]
}
   22510:	4770      	bx	lr

00022512 <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   22512:	6883      	ldr	r3, [r0, #8]
   22514:	440b      	add	r3, r1
   22516:	6003      	str	r3, [r0, #0]
}
   22518:	4770      	bx	lr

0002251a <net_buf_put>:
{
   2251a:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   2251c:	460a      	mov	r2, r1
   2251e:	6814      	ldr	r4, [r2, #0]
   22520:	b914      	cbnz	r4, 22528 <net_buf_put+0xe>
}
   22522:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   22524:	f000 bbfc 	b.w	22d20 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   22528:	7953      	ldrb	r3, [r2, #5]
   2252a:	f043 0301 	orr.w	r3, r3, #1
   2252e:	7153      	strb	r3, [r2, #5]
   22530:	4622      	mov	r2, r4
   22532:	e7f4      	b.n	2251e <net_buf_put+0x4>

00022534 <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   22534:	7902      	ldrb	r2, [r0, #4]
   22536:	3201      	adds	r2, #1
   22538:	7102      	strb	r2, [r0, #4]
	return buf;
}
   2253a:	4770      	bx	lr

0002253c <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   2253c:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   2253e:	4618      	mov	r0, r3
   22540:	681b      	ldr	r3, [r3, #0]
   22542:	2b00      	cmp	r3, #0
   22544:	d1fb      	bne.n	2253e <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   22546:	4770      	bx	lr

00022548 <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   22548:	6802      	ldr	r2, [r0, #0]
{
   2254a:	b510      	push	{r4, lr}
	if (parent->frags) {
   2254c:	b12a      	cbz	r2, 2255a <net_buf_frag_insert+0x12>
   2254e:	460b      	mov	r3, r1
	while (buf->frags) {
   22550:	461c      	mov	r4, r3
   22552:	681b      	ldr	r3, [r3, #0]
   22554:	2b00      	cmp	r3, #0
   22556:	d1fb      	bne.n	22550 <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   22558:	6022      	str	r2, [r4, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   2255a:	6001      	str	r1, [r0, #0]
}
   2255c:	bd10      	pop	{r4, pc}

0002255e <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   2255e:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
   22560:	4604      	mov	r4, r0
   22562:	b920      	cbnz	r0, 2256e <net_buf_frag_add+0x10>
	buf->ref++;
   22564:	790b      	ldrb	r3, [r1, #4]
   22566:	3301      	adds	r3, #1
   22568:	710b      	strb	r3, [r1, #4]
		return net_buf_ref(frag);
   2256a:	4608      	mov	r0, r1
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   2256c:	bd10      	pop	{r4, pc}
   2256e:	4603      	mov	r3, r0
	while (buf->frags) {
   22570:	4618      	mov	r0, r3
   22572:	681b      	ldr	r3, [r3, #0]
   22574:	2b00      	cmp	r3, #0
   22576:	d1fb      	bne.n	22570 <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   22578:	f7ff ffe6 	bl	22548 <net_buf_frag_insert>
   2257c:	4620      	mov	r0, r4
   2257e:	e7f5      	b.n	2256c <net_buf_frag_add+0xe>

00022580 <net_buf_frag_del>:
				       struct net_buf *frag,
				       const char *func, int line)
#else
struct net_buf *net_buf_frag_del(struct net_buf *parent, struct net_buf *frag)
#endif
{
   22580:	b510      	push	{r4, lr}
	struct net_buf *next_frag;

	__ASSERT_NO_MSG(frag);

	if (parent) {
   22582:	b108      	cbz	r0, 22588 <net_buf_frag_del+0x8>
   22584:	680b      	ldr	r3, [r1, #0]
		__ASSERT_NO_MSG(parent->frags);
		__ASSERT_NO_MSG(parent->frags == frag);
		parent->frags = frag->frags;
   22586:	6003      	str	r3, [r0, #0]
	}

	next_frag = frag->frags;
   22588:	680c      	ldr	r4, [r1, #0]

	frag->frags = NULL;
   2258a:	2300      	movs	r3, #0

#if defined(CONFIG_NET_BUF_LOG)
	net_buf_unref_debug(frag, func, line);
#else
	net_buf_unref(frag);
   2258c:	4608      	mov	r0, r1
	frag->frags = NULL;
   2258e:	600b      	str	r3, [r1, #0]
	net_buf_unref(frag);
   22590:	f7f9 faa6 	bl	1bae0 <net_buf_unref>
#endif

	return next_frag;
}
   22594:	4620      	mov	r0, r4
   22596:	bd10      	pop	{r4, pc}

00022598 <net_buf_simple_add>:
	return buf->data + buf->len;
   22598:	8883      	ldrh	r3, [r0, #4]
   2259a:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   2259c:	4419      	add	r1, r3
   2259e:	8081      	strh	r1, [r0, #4]
	return tail;
}
   225a0:	18d0      	adds	r0, r2, r3
   225a2:	4770      	bx	lr

000225a4 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   225a4:	b430      	push	{r4, r5}
   225a6:	8884      	ldrh	r4, [r0, #4]
   225a8:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   225aa:	18a3      	adds	r3, r4, r2
   225ac:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   225ae:	1928      	adds	r0, r5, r4
}
   225b0:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   225b2:	f7fd bc60 	b.w	1fe76 <memcpy>

000225b6 <net_buf_simple_add_u8>:
   225b6:	8883      	ldrh	r3, [r0, #4]
   225b8:	6802      	ldr	r2, [r0, #0]

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   225ba:	b510      	push	{r4, lr}
	buf->len += len;
   225bc:	1c5c      	adds	r4, r3, #1
   225be:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   225c0:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   225c2:	18d0      	adds	r0, r2, r3
   225c4:	bd10      	pop	{r4, pc}

000225c6 <net_buf_simple_add_le16>:
   225c6:	8883      	ldrh	r3, [r0, #4]
   225c8:	6802      	ldr	r2, [r0, #0]

void net_buf_simple_add_le16(struct net_buf_simple *buf, uint16_t val)
{
   225ca:	b530      	push	{r4, r5, lr}
   225cc:	18d4      	adds	r4, r2, r3
	buf->len += len;
   225ce:	1c9d      	adds	r5, r3, #2
   225d0:	8085      	strh	r5, [r0, #4]
	dst[0] = val;
   225d2:	54d1      	strb	r1, [r2, r3]
	dst[1] = val >> 8;
   225d4:	0a09      	lsrs	r1, r1, #8
   225d6:	7061      	strb	r1, [r4, #1]
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	sys_put_le16(val, net_buf_simple_add(buf, sizeof(val)));
}
   225d8:	bd30      	pop	{r4, r5, pc}

000225da <net_buf_simple_push>:

	sys_put_be64(val, net_buf_simple_add(buf, sizeof(val)));
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   225da:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   225dc:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   225de:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   225e0:	1a40      	subs	r0, r0, r1
	buf->len += len;
   225e2:	4411      	add	r1, r2
	buf->data -= len;
   225e4:	6018      	str	r0, [r3, #0]
	buf->len += len;
   225e6:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   225e8:	4770      	bx	lr

000225ea <net_buf_simple_push_le16>:
	buf->data -= len;
   225ea:	6803      	ldr	r3, [r0, #0]
   225ec:	1e9a      	subs	r2, r3, #2
   225ee:	6002      	str	r2, [r0, #0]
	buf->len += len;
   225f0:	8882      	ldrh	r2, [r0, #4]
   225f2:	3202      	adds	r2, #2
   225f4:	8082      	strh	r2, [r0, #4]
	dst[0] = val;
   225f6:	f803 1c02 	strb.w	r1, [r3, #-2]
	dst[1] = val >> 8;
   225fa:	0a09      	lsrs	r1, r1, #8
   225fc:	f803 1c01 	strb.w	r1, [r3, #-1]
void net_buf_simple_push_le16(struct net_buf_simple *buf, uint16_t val)
{
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	sys_put_le16(val, net_buf_simple_push(buf, sizeof(val)));
}
   22600:	4770      	bx	lr

00022602 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   22602:	8882      	ldrh	r2, [r0, #4]
   22604:	1a52      	subs	r2, r2, r1
{
   22606:	4603      	mov	r3, r0
	buf->len -= len;
   22608:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   2260a:	6800      	ldr	r0, [r0, #0]
   2260c:	4408      	add	r0, r1
   2260e:	6018      	str	r0, [r3, #0]
}
   22610:	4770      	bx	lr

00022612 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   22612:	4603      	mov	r3, r0
	void *data = buf->data;
   22614:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   22616:	889a      	ldrh	r2, [r3, #4]
   22618:	1a52      	subs	r2, r2, r1
	buf->data += len;
   2261a:	4401      	add	r1, r0
	buf->len -= len;
   2261c:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   2261e:	6019      	str	r1, [r3, #0]

	return data;
}
   22620:	4770      	bx	lr

00022622 <net_buf_simple_pull_u8>:

uint8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   22622:	b510      	push	{r4, lr}
	uint8_t val;

	val = buf->data[0];
   22624:	6803      	ldr	r3, [r0, #0]
   22626:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   22628:	2101      	movs	r1, #1
   2262a:	f7ff ffea 	bl	22602 <net_buf_simple_pull>

	return val;
}
   2262e:	4620      	mov	r0, r4
   22630:	bd10      	pop	{r4, pc}

00022632 <net_buf_simple_pull_le16>:

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   22632:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   22634:	6803      	ldr	r3, [r0, #0]
   22636:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   22638:	2102      	movs	r1, #2
   2263a:	f7ff ffe2 	bl	22602 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   2263e:	4620      	mov	r0, r4
   22640:	bd10      	pop	{r4, pc}

00022642 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   22642:	6802      	ldr	r2, [r0, #0]
   22644:	6880      	ldr	r0, [r0, #8]
}
   22646:	1a10      	subs	r0, r2, r0
   22648:	4770      	bx	lr

0002264a <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   2264a:	8883      	ldrh	r3, [r0, #4]
   2264c:	88c2      	ldrh	r2, [r0, #6]
   2264e:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   22650:	6803      	ldr	r3, [r0, #0]
   22652:	6880      	ldr	r0, [r0, #8]
   22654:	1a18      	subs	r0, r3, r0
}
   22656:	1a10      	subs	r0, r2, r0
   22658:	4770      	bx	lr

0002265a <net_buf_append_bytes>:
{
   2265a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2265e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   22660:	4681      	mov	r9, r0
   22662:	460f      	mov	r7, r1
   22664:	4690      	mov	r8, r2
	while (buf->frags) {
   22666:	4606      	mov	r6, r0
   22668:	4631      	mov	r1, r6
   2266a:	6836      	ldr	r6, [r6, #0]
   2266c:	2e00      	cmp	r6, #0
   2266e:	d1fb      	bne.n	22668 <net_buf_append_bytes+0xe>
		uint16_t count = MIN(len, net_buf_tailroom(frag));
   22670:	f101 0a08 	add.w	sl, r1, #8
   22674:	4650      	mov	r0, sl
   22676:	f7ff ffe8 	bl	2264a <net_buf_simple_tailroom>
   2267a:	42b8      	cmp	r0, r7
   2267c:	bf94      	ite	ls
   2267e:	b284      	uxthls	r4, r0
   22680:	b2bc      	uxthhi	r4, r7
		net_buf_add_mem(frag, value8, count);
   22682:	4641      	mov	r1, r8
   22684:	4622      	mov	r2, r4
   22686:	4650      	mov	r0, sl
   22688:	f7ff ff8c 	bl	225a4 <net_buf_simple_add_mem>
		if (len == 0) {
   2268c:	1b3f      	subs	r7, r7, r4
		added_len += count;
   2268e:	4426      	add	r6, r4
		value8 += count;
   22690:	44a0      	add	r8, r4
		if (len == 0) {
   22692:	d009      	beq.n	226a8 <net_buf_append_bytes+0x4e>
		frag = allocate_cb(timeout, user_data);
   22694:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   22698:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2269a:	47a8      	blx	r5
		if (!frag) {
   2269c:	4601      	mov	r1, r0
   2269e:	b118      	cbz	r0, 226a8 <net_buf_append_bytes+0x4e>
		net_buf_frag_add(buf, frag);
   226a0:	4648      	mov	r0, r9
   226a2:	f7ff ff5c 	bl	2255e <net_buf_frag_add>
	do {
   226a6:	e7e3      	b.n	22670 <net_buf_append_bytes+0x16>
}
   226a8:	4630      	mov	r0, r6
   226aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000226ae <gpio_fire_callbacks>:
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
					struct device *port,
					uint32_t pins)
{
   226ae:	b570      	push	{r4, r5, r6, lr}
   226b0:	460e      	mov	r6, r1
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   226b2:	6801      	ldr	r1, [r0, #0]
{
   226b4:	4615      	mov	r5, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   226b6:	b189      	cbz	r1, 226dc <gpio_fire_callbacks+0x2e>
	return node->next;
   226b8:	680c      	ldr	r4, [r1, #0]
   226ba:	2c00      	cmp	r4, #0
   226bc:	bf38      	it	cc
   226be:	2400      	movcc	r4, #0
		if (cb->pin_mask & pins) {
   226c0:	688a      	ldr	r2, [r1, #8]
   226c2:	402a      	ands	r2, r5
   226c4:	d002      	beq.n	226cc <gpio_fire_callbacks+0x1e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   226c6:	684b      	ldr	r3, [r1, #4]
   226c8:	4630      	mov	r0, r6
   226ca:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   226cc:	b134      	cbz	r4, 226dc <gpio_fire_callbacks+0x2e>
   226ce:	6823      	ldr	r3, [r4, #0]
   226d0:	2b00      	cmp	r3, #0
   226d2:	bf38      	it	cc
   226d4:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   226d6:	4621      	mov	r1, r4
   226d8:	461c      	mov	r4, r3
   226da:	e7f1      	b.n	226c0 <gpio_fire_callbacks+0x12>
		}
	}
}
   226dc:	bd70      	pop	{r4, r5, r6, pc}

000226de <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   226de:	6843      	ldr	r3, [r0, #4]
   226e0:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   226e2:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   226e6:	600b      	str	r3, [r1, #0]
}
   226e8:	2000      	movs	r0, #0
   226ea:	4770      	bx	lr

000226ec <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   226ec:	6843      	ldr	r3, [r0, #4]
   226ee:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   226f0:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   226f4:	4042      	eors	r2, r0
   226f6:	400a      	ands	r2, r1
   226f8:	4042      	eors	r2, r0
    p_reg->OUT = value;
   226fa:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   226fe:	2000      	movs	r0, #0
   22700:	4770      	bx	lr

00022702 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   22702:	6843      	ldr	r3, [r0, #4]
   22704:	685b      	ldr	r3, [r3, #4]
}
   22706:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   22708:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   2270c:	4770      	bx	lr

0002270e <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2270e:	6843      	ldr	r3, [r0, #4]
   22710:	685b      	ldr	r3, [r3, #4]
}
   22712:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   22714:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   22718:	4770      	bx	lr

0002271a <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2271a:	6843      	ldr	r3, [r0, #4]
   2271c:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   2271e:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   22722:	404b      	eors	r3, r1
    p_reg->OUT = value;
   22724:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   22728:	2000      	movs	r0, #0
   2272a:	4770      	bx	lr

0002272c <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   2272c:	68c3      	ldr	r3, [r0, #12]
Z_GENLIST_IS_EMPTY(slist)
   2272e:	6858      	ldr	r0, [r3, #4]
{
   22730:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
   22732:	b158      	cbz	r0, 2274c <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   22734:	2400      	movs	r4, #0
   22736:	4281      	cmp	r1, r0
   22738:	d113      	bne.n	22762 <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
   2273a:	6808      	ldr	r0, [r1, #0]
   2273c:	b95c      	cbnz	r4, 22756 <gpio_nrfx_manage_callback+0x2a>
   2273e:	689c      	ldr	r4, [r3, #8]
	list->head = node;
   22740:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   22742:	42a1      	cmp	r1, r4
   22744:	d100      	bne.n	22748 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   22746:	6098      	str	r0, [r3, #8]
	parent->next = child;
   22748:	2000      	movs	r0, #0
   2274a:	6008      	str	r0, [r1, #0]
	if (set) {
   2274c:	b972      	cbnz	r2, 2276c <gpio_nrfx_manage_callback+0x40>
	return 0;
   2274e:	2000      	movs	r0, #0
}
   22750:	bd30      	pop	{r4, r5, pc}
   22752:	4628      	mov	r0, r5
   22754:	e7ef      	b.n	22736 <gpio_nrfx_manage_callback+0xa>
   22756:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   22758:	6898      	ldr	r0, [r3, #8]
   2275a:	4281      	cmp	r1, r0
	list->tail = node;
   2275c:	bf08      	it	eq
   2275e:	609c      	streq	r4, [r3, #8]
}
   22760:	e7f2      	b.n	22748 <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   22762:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   22764:	4604      	mov	r4, r0
   22766:	2d00      	cmp	r5, #0
   22768:	d1f3      	bne.n	22752 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   2276a:	b13a      	cbz	r2, 2277c <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
   2276c:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   2276e:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   22770:	6898      	ldr	r0, [r3, #8]
	list->head = node;
   22772:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   22774:	2800      	cmp	r0, #0
   22776:	d1ea      	bne.n	2274e <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   22778:	6099      	str	r1, [r3, #8]
}
   2277a:	e7e9      	b.n	22750 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   2277c:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   22780:	e7e6      	b.n	22750 <gpio_nrfx_manage_callback+0x24>

00022782 <check_level_trigger_pins>:
{
   22782:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct gpio_nrfx_data *data = get_port_data(port);
   22784:	68c3      	ldr	r3, [r0, #12]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   22786:	6847      	ldr	r7, [r0, #4]
	uint32_t out = data->pin_int_en;
   22788:	68da      	ldr	r2, [r3, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   2278a:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
   2278e:	4301      	orrs	r1, r0
   22790:	ea22 0201 	bic.w	r2, r2, r1
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
   22794:	6879      	ldr	r1, [r7, #4]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   22796:	691b      	ldr	r3, [r3, #16]
    return p_reg->IN;
   22798:	f8d1 4510 	ldr.w	r4, [r1, #1296]	; 0x510
   2279c:	405c      	eors	r4, r3
	uint32_t out = pin_states & level_pins;
   2279e:	ea22 0404 	bic.w	r4, r2, r4
	uint32_t bit = 1U << pin;
   227a2:	2501      	movs	r5, #1
	uint32_t pin = 0U;
   227a4:	2600      	movs	r6, #0
	while (level_pins) {
   227a6:	b90a      	cbnz	r2, 227ac <check_level_trigger_pins+0x2a>
}
   227a8:	4620      	mov	r0, r4
   227aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (level_pins & bit) {
   227ac:	422a      	tst	r2, r5
   227ae:	d009      	beq.n	227c4 <check_level_trigger_pins+0x42>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   227b0:	7a3b      	ldrb	r3, [r7, #8]
   227b2:	f006 001f 	and.w	r0, r6, #31
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   227b6:	2100      	movs	r1, #0
   227b8:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   227bc:	f7f9 fa40 	bl	1bc40 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   227c0:	ea22 0205 	bic.w	r2, r2, r5
		++pin;
   227c4:	3601      	adds	r6, #1
		bit <<= 1;
   227c6:	006d      	lsls	r5, r5, #1
   227c8:	e7ed      	b.n	227a6 <check_level_trigger_pins+0x24>

000227ca <cfg_level_pins>:
{
   227ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const struct gpio_nrfx_data *data = get_port_data(port);
   227cc:	68c6      	ldr	r6, [r0, #12]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   227ce:	6847      	ldr	r7, [r0, #4]
	uint32_t out = data->pin_int_en;
   227d0:	68f2      	ldr	r2, [r6, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   227d2:	e9d6 3105 	ldrd	r3, r1, [r6, #20]
   227d6:	430b      	orrs	r3, r1
   227d8:	ea22 0203 	bic.w	r2, r2, r3
	uint32_t bit = 1U << pin;
   227dc:	2501      	movs	r5, #1
	uint32_t pin = 0U;
   227de:	2400      	movs	r4, #0
	while (level_pins) {
   227e0:	b902      	cbnz	r2, 227e4 <cfg_level_pins+0x1a>
}
   227e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (level_pins & bit) {
   227e4:	4215      	tst	r5, r2
   227e6:	d00f      	beq.n	22808 <cfg_level_pins+0x3e>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   227e8:	6931      	ldr	r1, [r6, #16]
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   227ea:	7a3b      	ldrb	r3, [r7, #8]
	if ((BIT(pin) & data->int_active_level) != 0U) {
   227ec:	40e1      	lsrs	r1, r4
   227ee:	f001 0101 	and.w	r1, r1, #1
   227f2:	f1c1 0103 	rsb	r1, r1, #3
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   227f6:	f004 001f 	and.w	r0, r4, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   227fa:	b2c9      	uxtb	r1, r1
   227fc:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   22800:	f7f9 fa1e 	bl	1bc40 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   22804:	ea22 0205 	bic.w	r2, r2, r5
		++pin;
   22808:	3401      	adds	r4, #1
		bit <<= 1;
   2280a:	006d      	lsls	r5, r5, #1
   2280c:	e7e8      	b.n	227e0 <cfg_level_pins+0x16>

0002280e <uart_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
   2280e:	68c2      	ldr	r2, [r0, #12]
{
   22810:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   22812:	e892 0003 	ldmia.w	r2, {r0, r1}
   22816:	e883 0003 	stmia.w	r3, {r0, r1}
}
   2281a:	2000      	movs	r0, #0
   2281c:	4770      	bx	lr

0002281e <uart_nrfx_irq_tx_ready_complete>:
{
   2281e:	b508      	push	{r3, lr}
	return event_txdrdy_check();
   22820:	f7f9 fb76 	bl	1bf10 <event_txdrdy_check>
}
   22824:	bd08      	pop	{r3, pc}

00022826 <uart_nrfx_irq_update>:
}
   22826:	2001      	movs	r0, #1
   22828:	4770      	bx	lr

0002282a <nrf_uarte_event_clear>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2282a:	2300      	movs	r3, #0
   2282c:	5043      	str	r3, [r0, r1]
{
   2282e:	b082      	sub	sp, #8
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   22830:	5843      	ldr	r3, [r0, r1]
   22832:	9301      	str	r3, [sp, #4]
    (void)dummy;
   22834:	9b01      	ldr	r3, [sp, #4]
}
   22836:	b002      	add	sp, #8
   22838:	4770      	bx	lr

0002283a <uarte_nrfx_isr_int>:
	struct uarte_nrfx_data *data = get_dev_data(dev);
   2283a:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   2283c:	6843      	ldr	r3, [r0, #4]
   2283e:	6818      	ldr	r0, [r3, #0]
	if (data->int_driven->disable_tx_irq &&
   22840:	6893      	ldr	r3, [r2, #8]
   22842:	7b99      	ldrb	r1, [r3, #14]
{
   22844:	b510      	push	{r4, lr}
	if (data->int_driven->disable_tx_irq &&
   22846:	b159      	cbz	r1, 22860 <uarte_nrfx_isr_int+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22848:	f8d0 1120 	ldr.w	r1, [r0, #288]	; 0x120
   2284c:	b141      	cbz	r1, 22860 <uarte_nrfx_isr_int+0x26>
    p_reg->INTENCLR = mask;
   2284e:	f44f 7280 	mov.w	r2, #256	; 0x100
   22852:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22856:	2201      	movs	r2, #1
   22858:	60c2      	str	r2, [r0, #12]
		data->int_driven->disable_tx_irq = false;
   2285a:	2200      	movs	r2, #0
   2285c:	739a      	strb	r2, [r3, #14]
}
   2285e:	bd10      	pop	{r4, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22860:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   22864:	b11b      	cbz	r3, 2286e <uarte_nrfx_isr_int+0x34>
		nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ERROR);
   22866:	f44f 7192 	mov.w	r1, #292	; 0x124
   2286a:	f7ff ffde 	bl	2282a <nrf_uarte_event_clear>
	if (data->int_driven->cb) {
   2286e:	6892      	ldr	r2, [r2, #8]
   22870:	6813      	ldr	r3, [r2, #0]
   22872:	2b00      	cmp	r3, #0
   22874:	d0f3      	beq.n	2285e <uarte_nrfx_isr_int+0x24>
}
   22876:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		data->int_driven->cb(data->int_driven->cb_data);
   2287a:	6850      	ldr	r0, [r2, #4]
   2287c:	4718      	bx	r3

0002287e <uarte_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
   2287e:	68c2      	ldr	r2, [r0, #12]
{
   22880:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   22882:	e892 0003 	ldmia.w	r2, {r0, r1}
   22886:	e883 0003 	stmia.w	r3, {r0, r1}
}
   2288a:	2000      	movs	r0, #0
   2288c:	4770      	bx	lr

0002288e <uarte_nrfx_err_check>:
	return config->uarte_regs;
   2288e:	6843      	ldr	r3, [r0, #4]
   22890:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   22892:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   22896:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   2289a:	4770      	bx	lr

0002289c <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   2289c:	6842      	ldr	r2, [r0, #4]
{
   2289e:	b508      	push	{r3, lr}
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   228a0:	68c3      	ldr	r3, [r0, #12]
	return config->uarte_regs;
   228a2:	6810      	ldr	r0, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   228a4:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   228a8:	b14a      	cbz	r2, 228be <uarte_nrfx_poll_in+0x22>
	*c = data->rx_data;
   228aa:	7c1b      	ldrb	r3, [r3, #16]
   228ac:	700b      	strb	r3, [r1, #0]
	nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);
   228ae:	f44f 7188 	mov.w	r1, #272	; 0x110
   228b2:	f7ff ffba 	bl	2282a <nrf_uarte_event_clear>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   228b6:	2301      	movs	r3, #1
   228b8:	6003      	str	r3, [r0, #0]
	return 0;
   228ba:	2000      	movs	r0, #0
}
   228bc:	bd08      	pop	{r3, pc}
		return -1;
   228be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   228c2:	e7fb      	b.n	228bc <uarte_nrfx_poll_in+0x20>

000228c4 <uarte_nrfx_fifo_fill>:
{
   228c4:	b570      	push	{r4, r5, r6, lr}
   228c6:	460c      	mov	r4, r1
   228c8:	4611      	mov	r1, r2
	return config->uarte_regs;
   228ca:	6842      	ldr	r2, [r0, #4]
{
   228cc:	4603      	mov	r3, r0
	return config->uarte_regs;
   228ce:	6810      	ldr	r0, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   228d0:	f8d0 2120 	ldr.w	r2, [r0, #288]	; 0x120
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   228d4:	b1a2      	cbz	r2, 22900 <uarte_nrfx_fifo_fill+0x3c>
	struct uarte_nrfx_data *data = get_dev_data(dev);
   228d6:	68dd      	ldr	r5, [r3, #12]
	if (len > data->int_driven->tx_buff_size) {
   228d8:	68ab      	ldr	r3, [r5, #8]
   228da:	899a      	ldrh	r2, [r3, #12]
   228dc:	428a      	cmp	r2, r1
   228de:	bfa8      	it	ge
   228e0:	460a      	movge	r2, r1
	nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDTX);
   228e2:	f44f 7190 	mov.w	r1, #288	; 0x120
   228e6:	f7ff ffa0 	bl	2282a <nrf_uarte_event_clear>
	for (int i = 0; i < len; i++) {
   228ea:	2300      	movs	r3, #0
   228ec:	68a9      	ldr	r1, [r5, #8]
   228ee:	4293      	cmp	r3, r2
   228f0:	6889      	ldr	r1, [r1, #8]
   228f2:	db07      	blt.n	22904 <uarte_nrfx_fifo_fill+0x40>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   228f4:	2301      	movs	r3, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   228f6:	f8c0 1544 	str.w	r1, [r0, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   228fa:	f8c0 2548 	str.w	r2, [r0, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   228fe:	6083      	str	r3, [r0, #8]
}
   22900:	4610      	mov	r0, r2
   22902:	bd70      	pop	{r4, r5, r6, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
   22904:	5ce6      	ldrb	r6, [r4, r3]
   22906:	54ce      	strb	r6, [r1, r3]
	for (int i = 0; i < len; i++) {
   22908:	3301      	adds	r3, #1
   2290a:	e7ef      	b.n	228ec <uarte_nrfx_fifo_fill+0x28>

0002290c <uarte_nrfx_fifo_read>:
	return config->uarte_regs;
   2290c:	6843      	ldr	r3, [r0, #4]
{
   2290e:	4602      	mov	r2, r0
	return config->uarte_regs;
   22910:	6818      	ldr	r0, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22912:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
{
   22916:	b510      	push	{r4, lr}
   22918:	460c      	mov	r4, r1
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2291a:	b143      	cbz	r3, 2292e <uarte_nrfx_fifo_read+0x22>
		nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);
   2291c:	f44f 7188 	mov.w	r1, #272	; 0x110
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   22920:	68d2      	ldr	r2, [r2, #12]
		nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);
   22922:	f7ff ff82 	bl	2282a <nrf_uarte_event_clear>
		rx_data[num_rx++] = (uint8_t)data->rx_data;
   22926:	7c13      	ldrb	r3, [r2, #16]
   22928:	7023      	strb	r3, [r4, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2292a:	2301      	movs	r3, #1
   2292c:	6003      	str	r3, [r0, #0]
	int num_rx = 0;
   2292e:	4618      	mov	r0, r3
}
   22930:	bd10      	pop	{r4, pc}

00022932 <uarte_nrfx_irq_tx_enable>:
	data->int_driven->disable_tx_irq = false;
   22932:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   22934:	6843      	ldr	r3, [r0, #4]
	data->int_driven->disable_tx_irq = false;
   22936:	6892      	ldr	r2, [r2, #8]
	return config->uarte_regs;
   22938:	681b      	ldr	r3, [r3, #0]
	data->int_driven->disable_tx_irq = false;
   2293a:	2100      	movs	r1, #0
   2293c:	7391      	strb	r1, [r2, #14]
    p_reg->INTENSET = mask;
   2293e:	f44f 7280 	mov.w	r2, #256	; 0x100
   22942:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   22946:	4770      	bx	lr

00022948 <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   22948:	68c3      	ldr	r3, [r0, #12]
   2294a:	689b      	ldr	r3, [r3, #8]
   2294c:	2201      	movs	r2, #1
   2294e:	739a      	strb	r2, [r3, #14]
}
   22950:	4770      	bx	lr

00022952 <uarte_nrfx_irq_tx_ready_complete>:
	return !data->int_driven->disable_tx_irq &&
   22952:	68c3      	ldr	r3, [r0, #12]
   22954:	689b      	ldr	r3, [r3, #8]
   22956:	7b9b      	ldrb	r3, [r3, #14]
	       nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX) &&
   22958:	b94b      	cbnz	r3, 2296e <uarte_nrfx_irq_tx_ready_complete+0x1c>
	return config->uarte_regs;
   2295a:	6843      	ldr	r3, [r0, #4]
   2295c:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2295e:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	return !data->int_driven->disable_tx_irq &&
   22962:	b128      	cbz	r0, 22970 <uarte_nrfx_irq_tx_ready_complete+0x1e>
    return p_reg->INTENSET & mask;
   22964:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
	       nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX) &&
   22968:	f3c0 2000 	ubfx	r0, r0, #8, #1
   2296c:	4770      	bx	lr
   2296e:	2000      	movs	r0, #0
}
   22970:	4770      	bx	lr

00022972 <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
   22972:	6843      	ldr	r3, [r0, #4]
   22974:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22976:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   2297a:	3800      	subs	r0, #0
   2297c:	bf18      	it	ne
   2297e:	2001      	movne	r0, #1
   22980:	4770      	bx	lr

00022982 <uarte_nrfx_irq_rx_enable>:
	return config->uarte_regs;
   22982:	6843      	ldr	r3, [r0, #4]
   22984:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   22986:	2210      	movs	r2, #16
   22988:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2298c:	4770      	bx	lr

0002298e <uarte_nrfx_irq_rx_disable>:
	return config->uarte_regs;
   2298e:	6843      	ldr	r3, [r0, #4]
   22990:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   22992:	2210      	movs	r2, #16
   22994:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   22998:	4770      	bx	lr

0002299a <uarte_nrfx_irq_err_enable>:
	return config->uarte_regs;
   2299a:	6843      	ldr	r3, [r0, #4]
   2299c:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   2299e:	f44f 7200 	mov.w	r2, #512	; 0x200
   229a2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   229a6:	4770      	bx	lr

000229a8 <uarte_nrfx_irq_err_disable>:
	return config->uarte_regs;
   229a8:	6843      	ldr	r3, [r0, #4]
   229aa:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   229ac:	f44f 7200 	mov.w	r2, #512	; 0x200
   229b0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   229b4:	4770      	bx	lr

000229b6 <uarte_nrfx_irq_update>:
}
   229b6:	2001      	movs	r0, #1
   229b8:	4770      	bx	lr

000229ba <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
   229ba:	68c3      	ldr	r3, [r0, #12]
   229bc:	689b      	ldr	r3, [r3, #8]
	data->int_driven->cb_data = cb_data;
   229be:	e9c3 1200 	strd	r1, r2, [r3]
}
   229c2:	4770      	bx	lr

000229c4 <uarte_nrfx_irq_is_pending>:
{
   229c4:	b508      	push	{r3, lr}
	return config->uarte_regs;
   229c6:	6843      	ldr	r3, [r0, #4]
   229c8:	6819      	ldr	r1, [r3, #0]
    return p_reg->INTENSET & mask;
   229ca:	f8d1 3304 	ldr.w	r3, [r1, #772]	; 0x304
		||
   229ce:	05db      	lsls	r3, r3, #23
{
   229d0:	4602      	mov	r2, r0
		||
   229d2:	d405      	bmi.n	229e0 <uarte_nrfx_irq_is_pending+0x1c>
   229d4:	f8d1 0304 	ldr.w	r0, [r1, #772]	; 0x304
   229d8:	f010 0010 	ands.w	r0, r0, #16
   229dc:	d106      	bne.n	229ec <uarte_nrfx_irq_is_pending+0x28>
}
   229de:	bd08      	pop	{r3, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   229e0:	f7ff ffb7 	bl	22952 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_ENDTX_MASK) &&
   229e4:	2800      	cmp	r0, #0
   229e6:	d0f5      	beq.n	229d4 <uarte_nrfx_irq_is_pending+0x10>
		||
   229e8:	2001      	movs	r0, #1
   229ea:	e7f8      	b.n	229de <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
   229ec:	4610      	mov	r0, r2
   229ee:	f7ff ffc0 	bl	22972 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   229f2:	3800      	subs	r0, #0
   229f4:	bf18      	it	ne
   229f6:	2001      	movne	r0, #1
   229f8:	e7f1      	b.n	229de <uarte_nrfx_irq_is_pending+0x1a>

000229fa <uarte_nrfx_poll_out>:
{
   229fa:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return config->uarte_regs;
   229fe:	6843      	ldr	r3, [r0, #4]
{
   22a00:	f88d 1007 	strb.w	r1, [sp, #7]
	return config->uarte_regs;
   22a04:	681c      	ldr	r4, [r3, #0]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   22a06:	68c6      	ldr	r6, [r0, #12]
	if (!k_is_in_isr()) {
   22a08:	f000 fb03 	bl	23012 <k_is_in_isr>
   22a0c:	bbb8      	cbnz	r0, 22a7e <uarte_nrfx_poll_out+0x84>
   22a0e:	2564      	movs	r5, #100	; 0x64
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   22a10:	f106 070c 	add.w	r7, r6, #12
   22a14:	f04f 0801 	mov.w	r8, #1
   22a18:	f3bf 8f5b 	dmb	ish
   22a1c:	e857 3f00 	ldrex	r3, [r7]
   22a20:	2b00      	cmp	r3, #0
   22a22:	d103      	bne.n	22a2c <uarte_nrfx_poll_out+0x32>
   22a24:	e847 8200 	strex	r2, r8, [r7]
   22a28:	2a00      	cmp	r2, #0
   22a2a:	d1f7      	bne.n	22a1c <uarte_nrfx_poll_out+0x22>
   22a2c:	f3bf 8f5b 	dmb	ish
		while (atomic_cas((atomic_t *) lock,
   22a30:	d007      	beq.n	22a42 <uarte_nrfx_poll_out+0x48>
	return z_impl_k_sleep(timeout);
   22a32:	2021      	movs	r0, #33	; 0x21
   22a34:	2100      	movs	r1, #0
   22a36:	3d01      	subs	r5, #1
   22a38:	f7fa fe78 	bl	1d72c <z_impl_k_sleep>
			if (--safety_cnt == 0) {
   22a3c:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   22a40:	d1ea      	bne.n	22a18 <uarte_nrfx_poll_out+0x1e>
	nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDTX);
   22a42:	f44f 7190 	mov.w	r1, #288	; 0x120
   22a46:	4620      	mov	r0, r4
   22a48:	f7ff feef 	bl	2282a <nrf_uarte_event_clear>
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   22a4c:	f10d 0307 	add.w	r3, sp, #7
   22a50:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   22a54:	2301      	movs	r3, #1
   22a56:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22a5a:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   22a5e:	60a3      	str	r3, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22a60:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
	NRFX_WAIT_FOR(nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX),
   22a64:	b923      	cbnz	r3, 22a70 <uarte_nrfx_poll_out+0x76>
   22a66:	2001      	movs	r0, #1
   22a68:	f000 f80c 	bl	22a84 <nrfx_busy_wait>
   22a6c:	3d01      	subs	r5, #1
   22a6e:	d1f7      	bne.n	22a60 <uarte_nrfx_poll_out+0x66>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22a70:	2301      	movs	r3, #1
   22a72:	60e3      	str	r3, [r4, #12]
	*lock = 0;
   22a74:	2300      	movs	r3, #0
   22a76:	60f3      	str	r3, [r6, #12]
}
   22a78:	b002      	add	sp, #8
   22a7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*lock = 1;
   22a7e:	2301      	movs	r3, #1
   22a80:	60f3      	str	r3, [r6, #12]
   22a82:	e7de      	b.n	22a42 <uarte_nrfx_poll_out+0x48>

00022a84 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   22a84:	f000 bacb 	b.w	2301e <z_impl_k_busy_wait>

00022a88 <device_busy_set>:
	atomic_set_bit((atomic_t *) __device_busy_start,
		       (busy_dev - __device_start));
#else
	ARG_UNUSED(busy_dev);
#endif
}
   22a88:	4770      	bx	lr

00022a8a <device_busy_clear>:
   22a8a:	4770      	bx	lr

00022a8c <arch_system_halt>:
	__asm__ volatile(
   22a8c:	f04f 0220 	mov.w	r2, #32
   22a90:	f3ef 8311 	mrs	r3, BASEPRI
   22a94:	f382 8811 	msr	BASEPRI, r2
   22a98:	f3bf 8f6f 	isb	sy
	for (;;) {
   22a9c:	e7fe      	b.n	22a9c <arch_system_halt+0x10>

00022a9e <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   22a9e:	f7fc b8cc 	b.w	1ec3a <z_clock_idle_exit>

00022aa2 <k_heap_init>:
{
   22aa2:	b410      	push	{r4}
   22aa4:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   22aa8:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   22aac:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   22aae:	f7fb bc7a 	b.w	1e3a6 <sys_heap_init>

00022ab2 <k_heap_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_alloc(struct k_heap *h, size_t bytes, k_timeout_t timeout)
{
   22ab2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22ab6:	4604      	mov	r4, r0
   22ab8:	b085      	sub	sp, #20
   22aba:	460e      	mov	r6, r1
	int64_t now, end = z_timeout_end_calc(timeout);
   22abc:	4610      	mov	r0, r2
   22abe:	4619      	mov	r1, r3
   22ac0:	f000 fb7d 	bl	231be <z_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   22ac4:	f104 0a14 	add.w	sl, r4, #20
	int64_t now, end = z_timeout_end_calc(timeout);
   22ac8:	4605      	mov	r5, r0
   22aca:	460f      	mov	r7, r1
   22acc:	f04f 0220 	mov.w	r2, #32
   22ad0:	f3ef 8311 	mrs	r3, BASEPRI
   22ad4:	f382 8811 	msr	BASEPRI, r2
   22ad8:	f3bf 8f6f 	isb	sy
		now = z_tick_get();
		if ((ret != NULL) || ((end - now) <= 0)) {
			break;
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   22adc:	f104 0b0c 	add.w	fp, r4, #12
		ret = sys_heap_alloc(&h->heap, bytes);
   22ae0:	4631      	mov	r1, r6
   22ae2:	4620      	mov	r0, r4
   22ae4:	9303      	str	r3, [sp, #12]
   22ae6:	f7fb fc40 	bl	1e36a <sys_heap_alloc>
   22aea:	9002      	str	r0, [sp, #8]
		now = z_tick_get();
   22aec:	f7fb f8f6 	bl	1dcdc <z_tick_get>
		if ((ret != NULL) || ((end - now) <= 0)) {
   22af0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   22af4:	b13a      	cbz	r2, 22b06 <k_heap_alloc+0x54>
	__asm__ volatile(
   22af6:	f383 8811 	msr	BASEPRI, r3
   22afa:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&h->lock);
	}

	k_spin_unlock(&h->lock, key);
	return ret;
}
   22afe:	4610      	mov	r0, r2
   22b00:	b005      	add	sp, #20
   22b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((ret != NULL) || ((end - now) <= 0)) {
   22b06:	ebb5 0800 	subs.w	r8, r5, r0
   22b0a:	eb67 0901 	sbc.w	r9, r7, r1
   22b0e:	f1b8 0f01 	cmp.w	r8, #1
   22b12:	f179 0100 	sbcs.w	r1, r9, #0
   22b16:	dbee      	blt.n	22af6 <k_heap_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   22b18:	e9cd 8900 	strd	r8, r9, [sp]
   22b1c:	465a      	mov	r2, fp
   22b1e:	4619      	mov	r1, r3
   22b20:	4650      	mov	r0, sl
   22b22:	f7fa fd51 	bl	1d5c8 <z_pend_curr>
	__asm__ volatile(
   22b26:	f04f 0220 	mov.w	r2, #32
   22b2a:	f3ef 8311 	mrs	r3, BASEPRI
   22b2e:	f382 8811 	msr	BASEPRI, r2
   22b32:	f3bf 8f6f 	isb	sy
   22b36:	e7d3      	b.n	22ae0 <k_heap_alloc+0x2e>

00022b38 <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   22b38:	b538      	push	{r3, r4, r5, lr}
   22b3a:	4604      	mov	r4, r0
   22b3c:	f04f 0320 	mov.w	r3, #32
   22b40:	f3ef 8511 	mrs	r5, BASEPRI
   22b44:	f383 8811 	msr	BASEPRI, r3
   22b48:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   22b4c:	f7fb fbfd 	bl	1e34a <sys_heap_free>

	if (z_unpend_all(&h->wait_q) != 0) {
   22b50:	f104 000c 	add.w	r0, r4, #12
   22b54:	f000 fa3d 	bl	22fd2 <z_unpend_all>
   22b58:	b130      	cbz	r0, 22b68 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   22b5a:	4629      	mov	r1, r5
   22b5c:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   22b60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   22b64:	f000 b94a 	b.w	22dfc <z_reschedule>
	__asm__ volatile(
   22b68:	f385 8811 	msr	BASEPRI, r5
   22b6c:	f3bf 8f6f 	isb	sy
}
   22b70:	bd38      	pop	{r3, r4, r5, pc}

00022b72 <k_mem_pool_alloc>:
 * backend.
 */

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, k_timeout_t timeout)
{
   22b72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22b74:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
	block->id.heap = p->heap;
   22b78:	6800      	ldr	r0, [r0, #0]
   22b7a:	6048      	str	r0, [r1, #4]
{
   22b7c:	4614      	mov	r4, r2
   22b7e:	460d      	mov	r5, r1
	block->data = k_heap_alloc(p->heap, size, timeout);
   22b80:	4632      	mov	r2, r6
   22b82:	463b      	mov	r3, r7
   22b84:	4621      	mov	r1, r4
   22b86:	f7ff ff94 	bl	22ab2 <k_heap_alloc>
   22b8a:	6028      	str	r0, [r5, #0]

	/* The legacy API returns -EAGAIN on timeout expiration, but
	 * -ENOMEM if the timeout was K_NO_WAIT. Don't ask.
	 */
	if (size != 0 && block->data == NULL) {
   22b8c:	b144      	cbz	r4, 22ba0 <k_mem_pool_alloc+0x2e>
   22b8e:	b938      	cbnz	r0, 22ba0 <k_mem_pool_alloc+0x2e>
		return K_TIMEOUT_EQ(timeout, K_NO_WAIT) ? -ENOMEM : -EAGAIN;
   22b90:	ea56 0307 	orrs.w	r3, r6, r7
   22b94:	bf0c      	ite	eq
   22b96:	f06f 000b 	mvneq.w	r0, #11
   22b9a:	f06f 000a 	mvnne.w	r0, #10
	} else {
		return 0;
	}
}
   22b9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 0;
   22ba0:	2000      	movs	r0, #0
   22ba2:	e7fc      	b.n	22b9e <k_mem_pool_alloc+0x2c>

00022ba4 <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
	k_heap_free(id->heap, id->data);
   22ba4:	e9d0 1000 	ldrd	r1, r0, [r0]
   22ba8:	f7ff bfc6 	b.w	22b38 <k_heap_free>

00022bac <k_mem_slab_init>:
{
   22bac:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   22bae:	2400      	movs	r4, #0
   22bb0:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   22bb2:	ea41 0402 	orr.w	r4, r1, r2
   22bb6:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   22bba:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
   22bbe:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   22bc0:	d10c      	bne.n	22bdc <k_mem_slab_init+0x30>
	slab->free_list = NULL;
   22bc2:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   22bc4:	42a3      	cmp	r3, r4
   22bc6:	d103      	bne.n	22bd0 <k_mem_slab_init+0x24>
   22bc8:	e9c0 0000 	strd	r0, r0, [r0]
}
   22bcc:	2000      	movs	r0, #0
}
   22bce:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   22bd0:	6945      	ldr	r5, [r0, #20]
   22bd2:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   22bd4:	3401      	adds	r4, #1
		slab->free_list = p;
   22bd6:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   22bd8:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   22bda:	e7f3      	b.n	22bc4 <k_mem_slab_init+0x18>
		return -EINVAL;
   22bdc:	f06f 0015 	mvn.w	r0, #21
	return rc;
   22be0:	e7f5      	b.n	22bce <k_mem_slab_init+0x22>

00022be2 <k_mem_pool_malloc>:
{
   22be2:	b5df      	push	{r0, r1, r2, r3, r4, r6, r7, lr}
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   22be4:	2408      	movs	r4, #8
   22be6:	190a      	adds	r2, r1, r4
   22be8:	d208      	bcs.n	22bfc <k_mem_pool_malloc+0x1a>
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   22bea:	2600      	movs	r6, #0
   22bec:	2700      	movs	r7, #0
   22bee:	e9cd 6700 	strd	r6, r7, [sp]
   22bf2:	eb0d 0104 	add.w	r1, sp, r4
   22bf6:	f7ff ffbc 	bl	22b72 <k_mem_pool_alloc>
   22bfa:	b110      	cbz	r0, 22c02 <k_mem_pool_malloc+0x20>
		return NULL;
   22bfc:	2000      	movs	r0, #0
}
   22bfe:	b004      	add	sp, #16
   22c00:	bdd0      	pop	{r4, r6, r7, pc}
	(void)memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));
   22c02:	9802      	ldr	r0, [sp, #8]
   22c04:	4622      	mov	r2, r4
   22c06:	a902      	add	r1, sp, #8
   22c08:	f7fd f935 	bl	1fe76 <memcpy>
	return (char *)block.data + WB_UP(sizeof(struct k_mem_block_id));
   22c0c:	9802      	ldr	r0, [sp, #8]
   22c0e:	3008      	adds	r0, #8
   22c10:	e7f5      	b.n	22bfe <k_mem_pool_malloc+0x1c>

00022c12 <k_free>:
	if (ptr != NULL) {
   22c12:	b110      	cbz	r0, 22c1a <k_free+0x8>
		k_mem_pool_free_id(ptr);
   22c14:	3808      	subs	r0, #8
   22c16:	f7ff bfc5 	b.w	22ba4 <k_mem_pool_free_id>
}
   22c1a:	4770      	bx	lr

00022c1c <queue_insert>:
{
   22c1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22c20:	4604      	mov	r4, r0
   22c22:	460d      	mov	r5, r1
   22c24:	4690      	mov	r8, r2
   22c26:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   22c28:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   22c2c:	f04f 0320 	mov.w	r3, #32
   22c30:	f3ef 8711 	mrs	r7, BASEPRI
   22c34:	f383 8811 	msr	BASEPRI, r3
   22c38:	f3bf 8f6f 	isb	sy
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   22c3c:	4630      	mov	r0, r6
   22c3e:	f000 f99b 	bl	22f78 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   22c42:	b158      	cbz	r0, 22c5c <queue_insert+0x40>
   22c44:	2400      	movs	r4, #0
   22c46:	6784      	str	r4, [r0, #120]	; 0x78
   22c48:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   22c4c:	f000 f91e 	bl	22e8c <z_ready_thread>
	z_reschedule(&queue->lock, key);
   22c50:	4630      	mov	r0, r6
   22c52:	4639      	mov	r1, r7
   22c54:	f000 f8d2 	bl	22dfc <z_reschedule>
	return 0;
   22c58:	2000      	movs	r0, #0
   22c5a:	e00c      	b.n	22c76 <queue_insert+0x5a>
	if (alloc) {
   22c5c:	f1b9 0f00 	cmp.w	r9, #0
   22c60:	d01b      	beq.n	22c9a <queue_insert+0x7e>
		anode = z_thread_malloc(sizeof(*anode));
   22c62:	2008      	movs	r0, #8
   22c64:	f7fa f930 	bl	1cec8 <z_thread_malloc>
		if (anode == NULL) {
   22c68:	b938      	cbnz	r0, 22c7a <queue_insert+0x5e>
	__asm__ volatile(
   22c6a:	f387 8811 	msr	BASEPRI, r7
   22c6e:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   22c72:	f06f 000b 	mvn.w	r0, #11
}
   22c76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   22c7a:	2301      	movs	r3, #1
		anode->data = data;
   22c7c:	f8c0 8004 	str.w	r8, [r0, #4]
   22c80:	6003      	str	r3, [r0, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   22c82:	6803      	ldr	r3, [r0, #0]
   22c84:	f003 0203 	and.w	r2, r3, #3
   22c88:	b95d      	cbnz	r5, 22ca2 <queue_insert+0x86>
	parent->next_and_flags = cur_flags | (unative_t)child;
   22c8a:	6823      	ldr	r3, [r4, #0]
   22c8c:	4313      	orrs	r3, r2
   22c8e:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   22c90:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   22c92:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   22c94:	b973      	cbnz	r3, 22cb4 <queue_insert+0x98>
	list->tail = node;
   22c96:	6060      	str	r0, [r4, #4]
}
   22c98:	e00c      	b.n	22cb4 <queue_insert+0x98>
	node->next_and_flags = flags;
   22c9a:	f8c8 9000 	str.w	r9, [r8]
}
   22c9e:	4640      	mov	r0, r8
   22ca0:	e7ef      	b.n	22c82 <queue_insert+0x66>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   22ca2:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   22ca4:	f033 0303 	bics.w	r3, r3, #3
   22ca8:	d110      	bne.n	22ccc <queue_insert+0xb0>
	parent->next_and_flags = cur_flags | (unative_t)child;
   22caa:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   22cac:	6862      	ldr	r2, [r4, #4]
   22cae:	b93a      	cbnz	r2, 22cc0 <queue_insert+0xa4>
	list->head = node;
   22cb0:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   22cb4:	2104      	movs	r1, #4
   22cb6:	f104 0010 	add.w	r0, r4, #16
   22cba:	f000 fbe7 	bl	2348c <z_handle_obj_poll_events>
   22cbe:	e7c7      	b.n	22c50 <queue_insert+0x34>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   22cc0:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   22cc2:	f003 0303 	and.w	r3, r3, #3
   22cc6:	4303      	orrs	r3, r0
   22cc8:	6013      	str	r3, [r2, #0]
   22cca:	e7e4      	b.n	22c96 <queue_insert+0x7a>
   22ccc:	4313      	orrs	r3, r2
   22cce:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   22cd0:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   22cd2:	f003 0303 	and.w	r3, r3, #3
   22cd6:	4303      	orrs	r3, r0
   22cd8:	602b      	str	r3, [r5, #0]
}
   22cda:	e7eb      	b.n	22cb4 <queue_insert+0x98>

00022cdc <z_queue_node_peek>:
{
   22cdc:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   22cde:	4604      	mov	r4, r0
   22ce0:	b130      	cbz	r0, 22cf0 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   22ce2:	6802      	ldr	r2, [r0, #0]
   22ce4:	0793      	lsls	r3, r2, #30
   22ce6:	d003      	beq.n	22cf0 <z_queue_node_peek+0x14>
		ret = anode->data;
   22ce8:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   22cea:	b109      	cbz	r1, 22cf0 <z_queue_node_peek+0x14>
			k_free(anode);
   22cec:	f7ff ff91 	bl	22c12 <k_free>
}
   22cf0:	4620      	mov	r0, r4
   22cf2:	bd10      	pop	{r4, pc}

00022cf4 <z_impl_k_queue_init>:
	list->head = NULL;
   22cf4:	2300      	movs	r3, #0
	list->tail = NULL;
   22cf6:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dlist_init(&w->waitq);
   22cfa:	f100 0308 	add.w	r3, r0, #8
   22cfe:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   22d02:	f100 0310 	add.w	r3, r0, #16
   22d06:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   22d0a:	4770      	bx	lr

00022d0c <k_queue_append>:
{
   22d0c:	460a      	mov	r2, r1
	(void)queue_insert(queue, sys_sflist_peek_tail(&queue->data_q),
   22d0e:	2300      	movs	r3, #0
   22d10:	6841      	ldr	r1, [r0, #4]
   22d12:	f7ff bf83 	b.w	22c1c <queue_insert>

00022d16 <k_queue_prepend>:
	(void)queue_insert(queue, NULL, data, false);
   22d16:	2300      	movs	r3, #0
{
   22d18:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false);
   22d1a:	4619      	mov	r1, r3
   22d1c:	f7ff bf7e 	b.w	22c1c <queue_insert>

00022d20 <k_queue_append_list>:
{
   22d20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22d24:	4605      	mov	r5, r0
   22d26:	4616      	mov	r6, r2
	CHECKIF(head == NULL || tail == NULL) {
   22d28:	460c      	mov	r4, r1
   22d2a:	b391      	cbz	r1, 22d92 <k_queue_append_list+0x72>
   22d2c:	b38a      	cbz	r2, 22d92 <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   22d2e:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   22d32:	f04f 0320 	mov.w	r3, #32
   22d36:	f3ef 8811 	mrs	r8, BASEPRI
   22d3a:	f383 8811 	msr	BASEPRI, r3
   22d3e:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   22d42:	4638      	mov	r0, r7
   22d44:	f000 f918 	bl	22f78 <z_unpend_first_thread>
   22d48:	f04f 0900 	mov.w	r9, #0
	while ((head != NULL) && (thread != NULL)) {
   22d4c:	b920      	cbnz	r0, 22d58 <k_queue_append_list+0x38>
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   22d4e:	686b      	ldr	r3, [r5, #4]
   22d50:	b9cb      	cbnz	r3, 22d86 <k_queue_append_list+0x66>
	list->head = node;
   22d52:	602c      	str	r4, [r5, #0]
	list->tail = node;
   22d54:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   22d56:	e00a      	b.n	22d6e <k_queue_append_list+0x4e>
   22d58:	6144      	str	r4, [r0, #20]
   22d5a:	f8c0 9078 	str.w	r9, [r0, #120]	; 0x78
	z_ready_thread(thread);
   22d5e:	f000 f895 	bl	22e8c <z_ready_thread>
		head = *(void **)head;
   22d62:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   22d64:	4638      	mov	r0, r7
   22d66:	f000 f907 	bl	22f78 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   22d6a:	2c00      	cmp	r4, #0
   22d6c:	d1ee      	bne.n	22d4c <k_queue_append_list+0x2c>
	z_handle_obj_poll_events(&queue->poll_events, state);
   22d6e:	2104      	movs	r1, #4
   22d70:	f105 0010 	add.w	r0, r5, #16
   22d74:	f000 fb8a 	bl	2348c <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   22d78:	4638      	mov	r0, r7
   22d7a:	4641      	mov	r1, r8
   22d7c:	f000 f83e 	bl	22dfc <z_reschedule>
	return 0;
   22d80:	2000      	movs	r0, #0
}
   22d82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   22d86:	6819      	ldr	r1, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   22d88:	f001 0103 	and.w	r1, r1, #3
   22d8c:	430c      	orrs	r4, r1
   22d8e:	601c      	str	r4, [r3, #0]
}
   22d90:	e7e0      	b.n	22d54 <k_queue_append_list+0x34>
		return -EINVAL;
   22d92:	f06f 0015 	mvn.w	r0, #21
   22d96:	e7f4      	b.n	22d82 <k_queue_append_list+0x62>

00022d98 <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
   22d98:	f990 000e 	ldrsb.w	r0, [r0, #14]
   22d9c:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   22da0:	4298      	cmp	r0, r3
   22da2:	bfac      	ite	ge
   22da4:	2000      	movge	r0, #0
   22da6:	2001      	movlt	r0, #1
   22da8:	4770      	bx	lr

00022daa <z_find_first_thread_to_unpend>:
{
   22daa:	b510      	push	{r4, lr}
   22dac:	f04f 0320 	mov.w	r3, #32
   22db0:	f3ef 8411 	mrs	r4, BASEPRI
   22db4:	f383 8811 	msr	BASEPRI, r3
   22db8:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   22dbc:	f000 f85c 	bl	22e78 <z_priq_dumb_best>
	__asm__ volatile(
   22dc0:	f384 8811 	msr	BASEPRI, r4
   22dc4:	f3bf 8f6f 	isb	sy
}
   22dc8:	bd10      	pop	{r4, pc}

00022dca <z_unpend_thread_no_timeout>:
{
   22dca:	b538      	push	{r3, r4, r5, lr}
   22dcc:	4604      	mov	r4, r0
	__asm__ volatile(
   22dce:	f04f 0320 	mov.w	r3, #32
   22dd2:	f3ef 8511 	mrs	r5, BASEPRI
   22dd6:	f383 8811 	msr	BASEPRI, r3
   22dda:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   22dde:	4601      	mov	r1, r0
   22de0:	6880      	ldr	r0, [r0, #8]
   22de2:	f7fa f9cf 	bl	1d184 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   22de6:	7b63      	ldrb	r3, [r4, #13]
   22de8:	f023 0302 	bic.w	r3, r3, #2
   22dec:	7363      	strb	r3, [r4, #13]
		thread->base.pended_on = NULL;
   22dee:	2300      	movs	r3, #0
   22df0:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   22df2:	f385 8811 	msr	BASEPRI, r5
   22df6:	f3bf 8f6f 	isb	sy
}
   22dfa:	bd38      	pop	{r3, r4, r5, pc}

00022dfc <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   22dfc:	b921      	cbnz	r1, 22e08 <z_reschedule+0xc>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   22dfe:	f3ef 8005 	mrs	r0, IPSR
   22e02:	b908      	cbnz	r0, 22e08 <z_reschedule+0xc>
   22e04:	f7e4 bafe 	b.w	7404 <arch_swap>
   22e08:	f381 8811 	msr	BASEPRI, r1
   22e0c:	f3bf 8f6f 	isb	sy
}
   22e10:	4770      	bx	lr

00022e12 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   22e12:	4603      	mov	r3, r0
   22e14:	b920      	cbnz	r0, 22e20 <z_reschedule_irqlock+0xe>
   22e16:	f3ef 8205 	mrs	r2, IPSR
   22e1a:	b90a      	cbnz	r2, 22e20 <z_reschedule_irqlock+0xe>
   22e1c:	f7e4 baf2 	b.w	7404 <arch_swap>
   22e20:	f383 8811 	msr	BASEPRI, r3
   22e24:	f3bf 8f6f 	isb	sy
}
   22e28:	4770      	bx	lr

00022e2a <z_reschedule_unlocked>:
	__asm__ volatile(
   22e2a:	f04f 0320 	mov.w	r3, #32
   22e2e:	f3ef 8011 	mrs	r0, BASEPRI
   22e32:	f383 8811 	msr	BASEPRI, r3
   22e36:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   22e3a:	f7ff bfea 	b.w	22e12 <z_reschedule_irqlock>

00022e3e <z_unpend_thread>:
{
   22e3e:	b510      	push	{r4, lr}
   22e40:	4601      	mov	r1, r0
   22e42:	f04f 0320 	mov.w	r3, #32
   22e46:	f3ef 8411 	mrs	r4, BASEPRI
   22e4a:	f383 8811 	msr	BASEPRI, r3
   22e4e:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   22e52:	6880      	ldr	r0, [r0, #8]
   22e54:	f7fa f996 	bl	1d184 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   22e58:	7b4b      	ldrb	r3, [r1, #13]
   22e5a:	f023 0302 	bic.w	r3, r3, #2
   22e5e:	734b      	strb	r3, [r1, #13]
		thread->base.pended_on = NULL;
   22e60:	2300      	movs	r3, #0
   22e62:	608b      	str	r3, [r1, #8]
	__asm__ volatile(
   22e64:	f384 8811 	msr	BASEPRI, r4
   22e68:	f3bf 8f6f 	isb	sy
}
   22e6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return z_abort_timeout(&thread->base.timeout);
   22e70:	f101 0018 	add.w	r0, r1, #24
   22e74:	f000 b95d 	b.w	23132 <z_abort_timeout>

00022e78 <z_priq_dumb_best>:
{
   22e78:	4603      	mov	r3, r0
	return list->head == list;
   22e7a:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22e7c:	4283      	cmp	r3, r0
   22e7e:	d003      	beq.n	22e88 <z_priq_dumb_best+0x10>
	if (n != NULL) {
   22e80:	2800      	cmp	r0, #0
   22e82:	bf38      	it	cc
   22e84:	2000      	movcc	r0, #0
   22e86:	4770      	bx	lr
	struct k_thread *thread = NULL;
   22e88:	2000      	movs	r0, #0
}
   22e8a:	4770      	bx	lr

00022e8c <z_ready_thread>:
{
   22e8c:	b510      	push	{r4, lr}
	__asm__ volatile(
   22e8e:	f04f 0320 	mov.w	r3, #32
   22e92:	f3ef 8411 	mrs	r4, BASEPRI
   22e96:	f383 8811 	msr	BASEPRI, r3
   22e9a:	f3bf 8f6f 	isb	sy
		ready_thread(thread);
   22e9e:	f7fa f9c7 	bl	1d230 <ready_thread>
	__asm__ volatile(
   22ea2:	f384 8811 	msr	BASEPRI, r4
   22ea6:	f3bf 8f6f 	isb	sy
}
   22eaa:	bd10      	pop	{r4, pc}

00022eac <z_thread_timeout>:
{
   22eac:	b538      	push	{r3, r4, r5, lr}
	if (thread->base.pended_on != NULL) {
   22eae:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
   22eb2:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
   22eb4:	f1a0 0118 	sub.w	r1, r0, #24
	if (thread->base.pended_on != NULL) {
   22eb8:	b1c3      	cbz	r3, 22eec <z_thread_timeout+0x40>
	__asm__ volatile(
   22eba:	f04f 0320 	mov.w	r3, #32
   22ebe:	f3ef 8511 	mrs	r5, BASEPRI
   22ec2:	f383 8811 	msr	BASEPRI, r3
   22ec6:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   22eca:	f850 0c10 	ldr.w	r0, [r0, #-16]
   22ece:	f7fa f959 	bl	1d184 <z_priq_dumb_remove>
   22ed2:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   22ed6:	f023 0302 	bic.w	r3, r3, #2
   22eda:	f804 3c0b 	strb.w	r3, [r4, #-11]
		thread->base.pended_on = NULL;
   22ede:	2300      	movs	r3, #0
   22ee0:	f844 3c10 	str.w	r3, [r4, #-16]
	__asm__ volatile(
   22ee4:	f385 8811 	msr	BASEPRI, r5
   22ee8:	f3bf 8f6f 	isb	sy
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   22eec:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   22ef0:	f023 0314 	bic.w	r3, r3, #20
   22ef4:	f804 3c0b 	strb.w	r3, [r4, #-11]
	z_ready_thread(thread);
   22ef8:	4608      	mov	r0, r1
}
   22efa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_ready_thread(thread);
   22efe:	f7ff bfc5 	b.w	22e8c <z_ready_thread>

00022f02 <z_remove_thread_from_ready_q>:
{
   22f02:	b510      	push	{r4, lr}
	__asm__ volatile(
   22f04:	f04f 0320 	mov.w	r3, #32
   22f08:	f3ef 8411 	mrs	r4, BASEPRI
   22f0c:	f383 8811 	msr	BASEPRI, r3
   22f10:	f3bf 8f6f 	isb	sy
		unready_thread(thread);
   22f14:	f7fa faea 	bl	1d4ec <unready_thread>
	__asm__ volatile(
   22f18:	f384 8811 	msr	BASEPRI, r4
   22f1c:	f3bf 8f6f 	isb	sy
}
   22f20:	bd10      	pop	{r4, pc}

00022f22 <add_to_waitq_locked>:
{
   22f22:	b538      	push	{r3, r4, r5, lr}
   22f24:	4604      	mov	r4, r0
   22f26:	460d      	mov	r5, r1
	unready_thread(thread);
   22f28:	f7fa fae0 	bl	1d4ec <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   22f2c:	7b63      	ldrb	r3, [r4, #13]
   22f2e:	f043 0302 	orr.w	r3, r3, #2
   22f32:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   22f34:	b1c5      	cbz	r5, 22f68 <add_to_waitq_locked+0x46>
	return list->head == list;
   22f36:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   22f38:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22f3a:	429d      	cmp	r5, r3
   22f3c:	bf08      	it	eq
   22f3e:	2300      	moveq	r3, #0
   22f40:	2b00      	cmp	r3, #0
   22f42:	bf38      	it	cc
   22f44:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   22f46:	b183      	cbz	r3, 22f6a <add_to_waitq_locked+0x48>
	if (thread_1->base.prio < thread_2->base.prio) {
   22f48:	f994 100e 	ldrsb.w	r1, [r4, #14]
   22f4c:	f993 200e 	ldrsb.w	r2, [r3, #14]
   22f50:	4291      	cmp	r1, r2
   22f52:	db04      	blt.n	22f5e <add_to_waitq_locked+0x3c>
	return (node == list->tail) ? NULL : node->next;
   22f54:	686a      	ldr	r2, [r5, #4]
   22f56:	429a      	cmp	r2, r3
   22f58:	d007      	beq.n	22f6a <add_to_waitq_locked+0x48>
   22f5a:	681b      	ldr	r3, [r3, #0]
   22f5c:	e7f3      	b.n	22f46 <add_to_waitq_locked+0x24>
	node->prev = successor->prev;
   22f5e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   22f60:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   22f64:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   22f66:	605c      	str	r4, [r3, #4]
}
   22f68:	bd38      	pop	{r3, r4, r5, pc}
	node->prev = list->tail;
   22f6a:	686b      	ldr	r3, [r5, #4]
   22f6c:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   22f6e:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   22f70:	6025      	str	r5, [r4, #0]
	list->tail->next = node;
   22f72:	601c      	str	r4, [r3, #0]
	list->tail = node;
   22f74:	606c      	str	r4, [r5, #4]
   22f76:	e7f7      	b.n	22f68 <add_to_waitq_locked+0x46>

00022f78 <z_unpend_first_thread>:
{
   22f78:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   22f7a:	f04f 0320 	mov.w	r3, #32
   22f7e:	f3ef 8211 	mrs	r2, BASEPRI
   22f82:	f383 8811 	msr	BASEPRI, r3
   22f86:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   22f8a:	f7ff ff75 	bl	22e78 <z_priq_dumb_best>
   22f8e:	4604      	mov	r4, r0
	__asm__ volatile(
   22f90:	f382 8811 	msr	BASEPRI, r2
   22f94:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   22f98:	b1c8      	cbz	r0, 22fce <z_unpend_first_thread+0x56>
	__asm__ volatile(
   22f9a:	f04f 0320 	mov.w	r3, #32
   22f9e:	f3ef 8511 	mrs	r5, BASEPRI
   22fa2:	f383 8811 	msr	BASEPRI, r3
   22fa6:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   22faa:	4601      	mov	r1, r0
   22fac:	6880      	ldr	r0, [r0, #8]
   22fae:	f7fa f8e9 	bl	1d184 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   22fb2:	7b63      	ldrb	r3, [r4, #13]
   22fb4:	f023 0302 	bic.w	r3, r3, #2
   22fb8:	7363      	strb	r3, [r4, #13]
		thread->base.pended_on = NULL;
   22fba:	2300      	movs	r3, #0
   22fbc:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   22fbe:	f385 8811 	msr	BASEPRI, r5
   22fc2:	f3bf 8f6f 	isb	sy
   22fc6:	f104 0018 	add.w	r0, r4, #24
   22fca:	f000 f8b2 	bl	23132 <z_abort_timeout>
}
   22fce:	4620      	mov	r0, r4
   22fd0:	bd38      	pop	{r3, r4, r5, pc}

00022fd2 <z_unpend_all>:
{
   22fd2:	b538      	push	{r3, r4, r5, lr}
   22fd4:	4605      	mov	r5, r0
	int need_sched = 0;
   22fd6:	2000      	movs	r0, #0
	return list->head == list;
   22fd8:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22fda:	42a5      	cmp	r5, r4
   22fdc:	d000      	beq.n	22fe0 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   22fde:	b904      	cbnz	r4, 22fe2 <z_unpend_all+0x10>
}
   22fe0:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   22fe2:	4620      	mov	r0, r4
   22fe4:	f7ff ff2b 	bl	22e3e <z_unpend_thread>
		z_ready_thread(thread);
   22fe8:	4620      	mov	r0, r4
   22fea:	f7ff ff4f 	bl	22e8c <z_ready_thread>
		need_sched = 1;
   22fee:	2001      	movs	r0, #1
   22ff0:	e7f2      	b.n	22fd8 <z_unpend_all+0x6>

00022ff2 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
   22ff2:	b15a      	cbz	r2, 2300c <z_impl_k_sem_init+0x1a>
   22ff4:	428a      	cmp	r2, r1
   22ff6:	d309      	bcc.n	2300c <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   22ff8:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   22ffc:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   23000:	e9c0 0000 	strd	r0, r0, [r0]
   23004:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   23008:	2000      	movs	r0, #0
   2300a:	4770      	bx	lr
		return -EINVAL;
   2300c:	f06f 0015 	mvn.w	r0, #21
}
   23010:	4770      	bx	lr

00023012 <k_is_in_isr>:
   23012:	f3ef 8005 	mrs	r0, IPSR
}
   23016:	3800      	subs	r0, #0
   23018:	bf18      	it	ne
   2301a:	2001      	movne	r0, #1
   2301c:	4770      	bx	lr

0002301e <z_impl_k_busy_wait>:
	arch_busy_wait(usec_to_wait);
   2301e:	f7e4 bebf 	b.w	7da0 <arch_busy_wait>

00023022 <z_impl_k_thread_name_set>:
}
   23022:	f06f 0046 	mvn.w	r0, #70	; 0x46
   23026:	4770      	bx	lr

00023028 <k_thread_name_get>:
}
   23028:	2000      	movs	r0, #0
   2302a:	4770      	bx	lr

0002302c <k_work_submit_to_queue>:
{
   2302c:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2302e:	f101 0308 	add.w	r3, r1, #8
   23032:	f3bf 8f5b 	dmb	ish
   23036:	e853 2f00 	ldrex	r2, [r3]
   2303a:	f042 0c01 	orr.w	ip, r2, #1
   2303e:	e843 ce00 	strex	lr, ip, [r3]
   23042:	f1be 0f00 	cmp.w	lr, #0
   23046:	d1f6      	bne.n	23036 <k_work_submit_to_queue+0xa>
   23048:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   2304c:	07d3      	lsls	r3, r2, #31
   2304e:	d403      	bmi.n	23058 <k_work_submit_to_queue+0x2c>
}
   23050:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   23054:	f7ff be5a 	b.w	22d0c <k_queue_append>
}
   23058:	f85d fb04 	ldr.w	pc, [sp], #4

0002305c <work_timeout>:
	k_work_submit_to_queue(w->work_q, &w->work);
   2305c:	f1a0 0110 	sub.w	r1, r0, #16
   23060:	6980      	ldr	r0, [r0, #24]
   23062:	f7ff bfe3 	b.w	2302c <k_work_submit_to_queue>

00023066 <work_cancel>:
	CHECKIF(work->work_q == NULL) {
   23066:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
   23068:	b570      	push	{r4, r5, r6, lr}
   2306a:	4604      	mov	r4, r0
	CHECKIF(work->work_q == NULL) {
   2306c:	b913      	cbnz	r3, 23074 <work_cancel+0xe>
		return -EALREADY;
   2306e:	f06f 0044 	mvn.w	r0, #68	; 0x44
}
   23072:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   23074:	f3bf 8f5b 	dmb	ish
   23078:	6883      	ldr	r3, [r0, #8]
   2307a:	f3bf 8f5b 	dmb	ish
	if (k_work_pending(&work->work)) {
   2307e:	07db      	lsls	r3, r3, #31
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   23080:	f100 0508 	add.w	r5, r0, #8
   23084:	d532      	bpl.n	230ec <work_cancel+0x86>
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   23086:	6a82      	ldr	r2, [r0, #40]	; 0x28
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   23088:	6813      	ldr	r3, [r2, #0]
   2308a:	2100      	movs	r1, #0
   2308c:	b913      	cbnz	r3, 23094 <work_cancel+0x2e>
			return -EINVAL;
   2308e:	f06f 0015 	mvn.w	r0, #21
   23092:	e7ee      	b.n	23072 <work_cancel+0xc>
   23094:	429c      	cmp	r4, r3
   23096:	d124      	bne.n	230e2 <work_cancel+0x7c>
Z_GENLIST_REMOVE(sflist, sfnode)
   23098:	6823      	ldr	r3, [r4, #0]
   2309a:	6856      	ldr	r6, [r2, #4]
   2309c:	f023 0003 	bic.w	r0, r3, #3
   230a0:	b9b1      	cbnz	r1, 230d0 <work_cancel+0x6a>
   230a2:	42b4      	cmp	r4, r6
	list->head = node;
   230a4:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   230a6:	d100      	bne.n	230aa <work_cancel+0x44>
	list->tail = node;
   230a8:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   230aa:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   230ac:	f003 0303 	and.w	r3, r3, #3
   230b0:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
   230b2:	2000      	movs	r0, #0
   230b4:	62a0      	str	r0, [r4, #40]	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   230b6:	f3bf 8f5b 	dmb	ish
   230ba:	e855 3f00 	ldrex	r3, [r5]
   230be:	f023 0301 	bic.w	r3, r3, #1
   230c2:	e845 3200 	strex	r2, r3, [r5]
   230c6:	2a00      	cmp	r2, #0
   230c8:	d1f7      	bne.n	230ba <work_cancel+0x54>
   230ca:	f3bf 8f5b 	dmb	ish
   230ce:	e7d0      	b.n	23072 <work_cancel+0xc>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   230d0:	680b      	ldr	r3, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   230d2:	f003 0303 	and.w	r3, r3, #3
   230d6:	4303      	orrs	r3, r0
Z_GENLIST_REMOVE(sflist, sfnode)
   230d8:	42b4      	cmp	r4, r6
	parent->next_and_flags = cur_flags | (unative_t)child;
   230da:	600b      	str	r3, [r1, #0]
	list->tail = node;
   230dc:	bf08      	it	eq
   230de:	6051      	streq	r1, [r2, #4]
}
   230e0:	e7e3      	b.n	230aa <work_cancel+0x44>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   230e2:	6818      	ldr	r0, [r3, #0]
   230e4:	4619      	mov	r1, r3
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   230e6:	f020 0303 	bic.w	r3, r0, #3
   230ea:	e7cf      	b.n	2308c <work_cancel+0x26>
		int err = z_abort_timeout(&work->timeout);
   230ec:	3010      	adds	r0, #16
   230ee:	f000 f820 	bl	23132 <z_abort_timeout>
		if (err) {
   230f2:	2800      	cmp	r0, #0
   230f4:	d0dd      	beq.n	230b2 <work_cancel+0x4c>
   230f6:	e7ba      	b.n	2306e <work_cancel+0x8>

000230f8 <k_delayed_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   230f8:	2300      	movs	r3, #0
   230fa:	e9c0 3100 	strd	r3, r1, [r0]
	node->prev = NULL;
   230fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
   23102:	6083      	str	r3, [r0, #8]
	work->work_q = NULL;
   23104:	6283      	str	r3, [r0, #40]	; 0x28
}
   23106:	4770      	bx	lr

00023108 <k_delayed_work_cancel>:

int k_delayed_work_cancel(struct k_delayed_work *work)
{
	if (!work->work_q) {
   23108:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
   2310a:	b510      	push	{r4, lr}
	if (!work->work_q) {
   2310c:	b173      	cbz	r3, 2312c <k_delayed_work_cancel+0x24>
	__asm__ volatile(
   2310e:	f04f 0320 	mov.w	r3, #32
   23112:	f3ef 8411 	mrs	r4, BASEPRI
   23116:	f383 8811 	msr	BASEPRI, r3
   2311a:	f3bf 8f6f 	isb	sy
		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = work_cancel(work);
   2311e:	f7ff ffa2 	bl	23066 <work_cancel>
	__asm__ volatile(
   23122:	f384 8811 	msr	BASEPRI, r4
   23126:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   2312a:	bd10      	pop	{r4, pc}
		return -EINVAL;
   2312c:	f06f 0015 	mvn.w	r0, #21
   23130:	e7fb      	b.n	2312a <k_delayed_work_cancel+0x22>

00023132 <z_abort_timeout>:
{
   23132:	b510      	push	{r4, lr}
	__asm__ volatile(
   23134:	f04f 0220 	mov.w	r2, #32
   23138:	f3ef 8411 	mrs	r4, BASEPRI
   2313c:	f382 8811 	msr	BASEPRI, r2
   23140:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   23144:	6803      	ldr	r3, [r0, #0]
   23146:	b13b      	cbz	r3, 23158 <z_abort_timeout+0x26>
			remove_timeout(to);
   23148:	f7fa fc9e 	bl	1da88 <remove_timeout>
			ret = 0;
   2314c:	2000      	movs	r0, #0
	__asm__ volatile(
   2314e:	f384 8811 	msr	BASEPRI, r4
   23152:	f3bf 8f6f 	isb	sy
}
   23156:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   23158:	f06f 0015 	mvn.w	r0, #21
   2315c:	e7f7      	b.n	2314e <z_abort_timeout+0x1c>

0002315e <z_get_next_timeout_expiry>:
{
   2315e:	b510      	push	{r4, lr}
	__asm__ volatile(
   23160:	f04f 0320 	mov.w	r3, #32
   23164:	f3ef 8411 	mrs	r4, BASEPRI
   23168:	f383 8811 	msr	BASEPRI, r3
   2316c:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   23170:	f7fa fca4 	bl	1dabc <next_timeout>
	__asm__ volatile(
   23174:	f384 8811 	msr	BASEPRI, r4
   23178:	f3bf 8f6f 	isb	sy
}
   2317c:	bd10      	pop	{r4, pc}

0002317e <z_set_timeout_expiry>:
{
   2317e:	b570      	push	{r4, r5, r6, lr}
   23180:	4604      	mov	r4, r0
   23182:	460d      	mov	r5, r1
	__asm__ volatile(
   23184:	f04f 0320 	mov.w	r3, #32
   23188:	f3ef 8611 	mrs	r6, BASEPRI
   2318c:	f383 8811 	msr	BASEPRI, r3
   23190:	f3bf 8f6f 	isb	sy
		int next = next_timeout();
   23194:	f7fa fc92 	bl	1dabc <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   23198:	2801      	cmp	r0, #1
   2319a:	dd05      	ble.n	231a8 <z_set_timeout_expiry+0x2a>
   2319c:	42a0      	cmp	r0, r4
   2319e:	dd03      	ble.n	231a8 <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, idle);
   231a0:	4629      	mov	r1, r5
   231a2:	4620      	mov	r0, r4
   231a4:	f7e3 fe84 	bl	6eb0 <z_clock_set_timeout>
	__asm__ volatile(
   231a8:	f386 8811 	msr	BASEPRI, r6
   231ac:	f3bf 8f6f 	isb	sy
}
   231b0:	bd70      	pop	{r4, r5, r6, pc}

000231b2 <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
   231b2:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
   231b4:	f7fa fd92 	bl	1dcdc <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   231b8:	bd08      	pop	{r3, pc}

000231ba <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return z_tick_get();
   231ba:	f7fa bd8f 	b.w	1dcdc <z_tick_get>

000231be <z_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t z_timeout_end_calc(k_timeout_t timeout)
{
   231be:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   231c0:	1c4b      	adds	r3, r1, #1
   231c2:	bf08      	it	eq
   231c4:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   231c8:	4604      	mov	r4, r0
   231ca:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   231cc:	d013      	beq.n	231f6 <z_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   231ce:	ea54 0105 	orrs.w	r1, r4, r5
   231d2:	d103      	bne.n	231dc <z_timeout_end_calc+0x1e>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
		return Z_TICK_ABS(dt);
	}
#endif
	return z_tick_get() + MAX(1, dt);
}
   231d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return z_tick_get();
   231d8:	f7fa bd80 	b.w	1dcdc <z_tick_get>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   231dc:	f06f 0101 	mvn.w	r1, #1
   231e0:	1a0a      	subs	r2, r1, r0
   231e2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   231e6:	eb61 0305 	sbc.w	r3, r1, r5
   231ea:	2a00      	cmp	r2, #0
   231ec:	f173 0100 	sbcs.w	r1, r3, #0
   231f0:	db02      	blt.n	231f8 <z_timeout_end_calc+0x3a>
		return Z_TICK_ABS(dt);
   231f2:	4610      	mov	r0, r2
   231f4:	4619      	mov	r1, r3
}
   231f6:	bd38      	pop	{r3, r4, r5, pc}
	return z_tick_get() + MAX(1, dt);
   231f8:	f7fa fd70 	bl	1dcdc <z_tick_get>
   231fc:	2c01      	cmp	r4, #1
   231fe:	f175 0300 	sbcs.w	r3, r5, #0
   23202:	bfbc      	itt	lt
   23204:	2401      	movlt	r4, #1
   23206:	2500      	movlt	r5, #0
   23208:	1820      	adds	r0, r4, r0
   2320a:	eb45 0101 	adc.w	r1, r5, r1
   2320e:	e7f2      	b.n	231f6 <z_timeout_end_calc+0x38>

00023210 <k_timer_init>:
	timer->status = 0U;
   23210:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   23212:	e9c0 1208 	strd	r1, r2, [r0, #32]
   23216:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   2321a:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   2321e:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   23222:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   23224:	6343      	str	r3, [r0, #52]	; 0x34
}
   23226:	4770      	bx	lr

00023228 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   23228:	b510      	push	{r4, lr}
   2322a:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
   2322c:	f7ff ff81 	bl	23132 <z_abort_timeout>

	if (inactive) {
   23230:	b9d8      	cbnz	r0, 2326a <z_impl_k_timer_stop+0x42>
		return;
	}

	if (timer->stop_fn != NULL) {
   23232:	6a63      	ldr	r3, [r4, #36]	; 0x24
   23234:	b10b      	cbz	r3, 2323a <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   23236:	4620      	mov	r0, r4
   23238:	4798      	blx	r3
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);
   2323a:	f104 0018 	add.w	r0, r4, #24
   2323e:	2100      	movs	r1, #0
   23240:	f7ff fdb3 	bl	22daa <z_find_first_thread_to_unpend>
	if (thread != NULL) {
   23244:	4604      	mov	r4, r0
   23246:	b180      	cbz	r0, 2326a <z_impl_k_timer_stop+0x42>
		z_unpend_thread_no_timeout(thread);
   23248:	f7ff fdbf 	bl	22dca <z_unpend_thread_no_timeout>
	}

	struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);

	if (pending_thread != NULL) {
		z_ready_thread(pending_thread);
   2324c:	4620      	mov	r0, r4
   2324e:	f7ff fe1d 	bl	22e8c <z_ready_thread>
	__asm__ volatile(
   23252:	f04f 0320 	mov.w	r3, #32
   23256:	f3ef 8011 	mrs	r0, BASEPRI
   2325a:	f383 8811 	msr	BASEPRI, r3
   2325e:	f3bf 8f6f 	isb	sy
		z_reschedule_unlocked();
	}
}
   23262:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   23266:	f7ff bdd4 	b.w	22e12 <z_reschedule_irqlock>
   2326a:	bd10      	pop	{r4, pc}

0002326c <clear_event_registrations>:
	while (num_events--) {
   2326c:	2314      	movs	r3, #20
{
   2326e:	b530      	push	{r4, r5, lr}
   23270:	fb03 0101 	mla	r1, r3, r1, r0
	event->poller = NULL;
   23274:	2400      	movs	r4, #0
	while (num_events--) {
   23276:	4281      	cmp	r1, r0
   23278:	d100      	bne.n	2327c <clear_event_registrations+0x10>
}
   2327a:	bd30      	pop	{r4, r5, pc}
	switch (event->type) {
   2327c:	f811 3c07 	ldrb.w	r3, [r1, #-7]
	event->poller = NULL;
   23280:	f841 4c0c 	str.w	r4, [r1, #-12]
	switch (event->type) {
   23284:	f003 030f 	and.w	r3, r3, #15
   23288:	2b02      	cmp	r3, #2
   2328a:	d80a      	bhi.n	232a2 <clear_event_registrations+0x36>
   2328c:	b15b      	cbz	r3, 232a6 <clear_event_registrations+0x3a>
	if (remove && sys_dnode_is_linked(&event->_node)) {
   2328e:	f851 3c14 	ldr.w	r3, [r1, #-20]
   23292:	b143      	cbz	r3, 232a6 <clear_event_registrations+0x3a>
	node->prev->next = node->next;
   23294:	f851 5c10 	ldr.w	r5, [r1, #-16]
   23298:	602b      	str	r3, [r5, #0]
	node->next->prev = node->prev;
   2329a:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   2329c:	e941 4405 	strd	r4, r4, [r1, #-20]
}
   232a0:	e001      	b.n	232a6 <clear_event_registrations+0x3a>
	switch (event->type) {
   232a2:	2b04      	cmp	r3, #4
   232a4:	d0f3      	beq.n	2328e <clear_event_registrations+0x22>
	__asm__ volatile(
   232a6:	f382 8811 	msr	BASEPRI, r2
   232aa:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   232ae:	f04f 0320 	mov.w	r3, #32
   232b2:	f3ef 8211 	mrs	r2, BASEPRI
   232b6:	f383 8811 	msr	BASEPRI, r3
   232ba:	f3bf 8f6f 	isb	sy
   232be:	3914      	subs	r1, #20
   232c0:	e7d9      	b.n	23276 <clear_event_registrations+0xa>

000232c2 <signal_poll_event>:
{
   232c2:	b570      	push	{r4, r5, r6, lr}
	struct _poller *poller = event->poller;
   232c4:	6884      	ldr	r4, [r0, #8]
{
   232c6:	4605      	mov	r5, r0
   232c8:	460e      	mov	r6, r1
	if (poller) {
   232ca:	b19c      	cbz	r4, 232f4 <signal_poll_event+0x32>
		if (poller->cb != NULL) {
   232cc:	68a3      	ldr	r3, [r4, #8]
   232ce:	b95b      	cbnz	r3, 232e8 <signal_poll_event+0x26>
		poller->is_polling = false;
   232d0:	7023      	strb	r3, [r4, #0]
	int retcode = 0;
   232d2:	4618      	mov	r0, r3
	event->poller = NULL;
   232d4:	2300      	movs	r3, #0
   232d6:	60ab      	str	r3, [r5, #8]
	event->state |= state;
   232d8:	68eb      	ldr	r3, [r5, #12]
   232da:	f3c3 3104 	ubfx	r1, r3, #12, #5
   232de:	430e      	orrs	r6, r1
   232e0:	f366 3310 	bfi	r3, r6, #12, #5
   232e4:	60eb      	str	r3, [r5, #12]
	return retcode;
   232e6:	e004      	b.n	232f2 <signal_poll_event+0x30>
			retcode = poller->cb(event, state);
   232e8:	4798      	blx	r3
		poller->is_polling = false;
   232ea:	2300      	movs	r3, #0
		if (retcode < 0) {
   232ec:	2800      	cmp	r0, #0
		poller->is_polling = false;
   232ee:	7023      	strb	r3, [r4, #0]
		if (retcode < 0) {
   232f0:	daf0      	bge.n	232d4 <signal_poll_event+0x12>
}
   232f2:	bd70      	pop	{r4, r5, r6, pc}
	int retcode = 0;
   232f4:	4620      	mov	r0, r4
   232f6:	e7ed      	b.n	232d4 <signal_poll_event+0x12>

000232f8 <k_poll_poller_cb>:
{
   232f8:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *thread = event->poller->thread;
   232fa:	6883      	ldr	r3, [r0, #8]
   232fc:	685c      	ldr	r4, [r3, #4]
	if (!z_is_thread_pending(thread)) {
   232fe:	7b63      	ldrb	r3, [r4, #13]
   23300:	079a      	lsls	r2, r3, #30
{
   23302:	460d      	mov	r5, r1
	if (!z_is_thread_pending(thread)) {
   23304:	d515      	bpl.n	23332 <k_poll_poller_cb+0x3a>
	if (z_is_thread_timeout_expired(thread)) {
   23306:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
   2330a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2330e:	f06f 0001 	mvn.w	r0, #1
   23312:	428b      	cmp	r3, r1
   23314:	bf08      	it	eq
   23316:	4282      	cmpeq	r2, r0
   23318:	d014      	beq.n	23344 <k_poll_poller_cb+0x4c>
	z_unpend_thread(thread);
   2331a:	4620      	mov	r0, r4
   2331c:	f7ff fd8f 	bl	22e3e <z_unpend_thread>
	arch_thread_return_value_set(thread,
   23320:	2d08      	cmp	r5, #8
   23322:	bf0c      	ite	eq
   23324:	f06f 0303 	mvneq.w	r3, #3
   23328:	2300      	movne	r3, #0
   2332a:	67a3      	str	r3, [r4, #120]	; 0x78
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   2332c:	7b63      	ldrb	r3, [r4, #13]
   2332e:	06db      	lsls	r3, r3, #27
   23330:	d001      	beq.n	23336 <k_poll_poller_cb+0x3e>
		return 0;
   23332:	2000      	movs	r0, #0
}
   23334:	bd38      	pop	{r3, r4, r5, pc}
	if (!z_is_thread_ready(thread)) {
   23336:	69a5      	ldr	r5, [r4, #24]
   23338:	2d00      	cmp	r5, #0
   2333a:	d1fa      	bne.n	23332 <k_poll_poller_cb+0x3a>
	z_ready_thread(thread);
   2333c:	4620      	mov	r0, r4
   2333e:	f7ff fda5 	bl	22e8c <z_ready_thread>
	return 0;
   23342:	e7f6      	b.n	23332 <k_poll_poller_cb+0x3a>
		return -EAGAIN;
   23344:	f06f 000a 	mvn.w	r0, #10
   23348:	e7f4      	b.n	23334 <k_poll_poller_cb+0x3c>

0002334a <add_event>:
{
   2334a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2334c:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   2334e:	e9d0 2300 	ldrd	r2, r3, [r0]
   23352:	4290      	cmp	r0, r2
   23354:	4604      	mov	r4, r0
   23356:	460d      	mov	r5, r1
   23358:	d106      	bne.n	23368 <add_event+0x1e>
	node->prev = list->tail;
   2335a:	6863      	ldr	r3, [r4, #4]
   2335c:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   2335e:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   23360:	602c      	str	r4, [r5, #0]
	list->tail->next = node;
   23362:	601d      	str	r5, [r3, #0]
	list->tail = node;
   23364:	6065      	str	r5, [r4, #4]
}
   23366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   23368:	2b00      	cmp	r3, #0
   2336a:	d0f6      	beq.n	2335a <add_event+0x10>
		z_is_t1_higher_prio_than_t2(pending->poller->thread,
   2336c:	689b      	ldr	r3, [r3, #8]
   2336e:	6879      	ldr	r1, [r7, #4]
   23370:	6858      	ldr	r0, [r3, #4]
   23372:	f7ff fd11 	bl	22d98 <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   23376:	2800      	cmp	r0, #0
   23378:	d1ef      	bne.n	2335a <add_event+0x10>
	return list->head == list;
   2337a:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2337c:	42b4      	cmp	r4, r6
   2337e:	d0ec      	beq.n	2335a <add_event+0x10>
   23380:	2e00      	cmp	r6, #0
   23382:	bf38      	it	cc
   23384:	2600      	movcc	r6, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   23386:	2e00      	cmp	r6, #0
   23388:	d0e7      	beq.n	2335a <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller->thread,
   2338a:	68b3      	ldr	r3, [r6, #8]
   2338c:	6878      	ldr	r0, [r7, #4]
   2338e:	6859      	ldr	r1, [r3, #4]
   23390:	f7ff fd02 	bl	22d98 <z_is_t1_higher_prio_than_t2>
   23394:	b128      	cbz	r0, 233a2 <add_event+0x58>
	node->prev = successor->prev;
   23396:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   23398:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   2339c:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   2339e:	6075      	str	r5, [r6, #4]
			return;
   233a0:	e7e1      	b.n	23366 <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   233a2:	6863      	ldr	r3, [r4, #4]
   233a4:	42b3      	cmp	r3, r6
   233a6:	d0d8      	beq.n	2335a <add_event+0x10>
   233a8:	6836      	ldr	r6, [r6, #0]
   233aa:	e7ec      	b.n	23386 <add_event+0x3c>

000233ac <register_events>:
{
   233ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   233b0:	f04f 0a00 	mov.w	sl, #0
{
   233b4:	460e      	mov	r6, r1
   233b6:	4614      	mov	r4, r2
   233b8:	461f      	mov	r7, r3
   233ba:	4683      	mov	fp, r0
	int events_registered = 0;
   233bc:	4655      	mov	r5, sl
	event->poller = NULL;
   233be:	46d0      	mov	r8, sl
	for (int ii = 0; ii < num_events; ii++) {
   233c0:	45b2      	cmp	sl, r6
   233c2:	db02      	blt.n	233ca <register_events+0x1e>
}
   233c4:	4628      	mov	r0, r5
   233c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   233ca:	f04f 0320 	mov.w	r3, #32
   233ce:	f3ef 8911 	mrs	r9, BASEPRI
   233d2:	f383 8811 	msr	BASEPRI, r3
   233d6:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   233da:	f89b 200d 	ldrb.w	r2, [fp, #13]
   233de:	f002 020f 	and.w	r2, r2, #15
   233e2:	2a02      	cmp	r2, #2
   233e4:	d006      	beq.n	233f4 <register_events+0x48>
   233e6:	2a04      	cmp	r2, #4
   233e8:	d008      	beq.n	233fc <register_events+0x50>
   233ea:	2a01      	cmp	r2, #1
   233ec:	d120      	bne.n	23430 <register_events+0x84>
		if (event->signal->signaled != 0U) {
   233ee:	f8db 3010 	ldr.w	r3, [fp, #16]
   233f2:	e001      	b.n	233f8 <register_events+0x4c>
		if (k_sem_count_get(event->sem) > 0) {
   233f4:	f8db 3010 	ldr.w	r3, [fp, #16]
		if (event->signal->signaled != 0U) {
   233f8:	689b      	ldr	r3, [r3, #8]
   233fa:	e002      	b.n	23402 <register_events+0x56>
		if (!k_queue_is_empty(event->queue)) {
   233fc:	f8db 3010 	ldr.w	r3, [fp, #16]
   23400:	681b      	ldr	r3, [r3, #0]
		if (event->signal->signaled != 0U) {
   23402:	b1ab      	cbz	r3, 23430 <register_events+0x84>
	event->state |= state;
   23404:	f8db 300c 	ldr.w	r3, [fp, #12]
	event->poller = NULL;
   23408:	f8cb 8008 	str.w	r8, [fp, #8]
	event->state |= state;
   2340c:	f3c3 3104 	ubfx	r1, r3, #12, #5
   23410:	430a      	orrs	r2, r1
   23412:	f362 3310 	bfi	r3, r2, #12, #5
   23416:	f8cb 300c 	str.w	r3, [fp, #12]
			poller->is_polling = false;
   2341a:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   2341e:	f389 8811 	msr	BASEPRI, r9
   23422:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   23426:	f10a 0a01 	add.w	sl, sl, #1
   2342a:	f10b 0b14 	add.w	fp, fp, #20
   2342e:	e7c7      	b.n	233c0 <register_events+0x14>
		} else if (!just_check && poller->is_polling) {
   23430:	2f00      	cmp	r7, #0
   23432:	d1f4      	bne.n	2341e <register_events+0x72>
   23434:	7823      	ldrb	r3, [r4, #0]
   23436:	2b00      	cmp	r3, #0
   23438:	d0f1      	beq.n	2341e <register_events+0x72>
	switch (event->type) {
   2343a:	f89b 300d 	ldrb.w	r3, [fp, #13]
   2343e:	f003 030f 	and.w	r3, r3, #15
   23442:	2b02      	cmp	r3, #2
   23444:	d008      	beq.n	23458 <register_events+0xac>
   23446:	2b04      	cmp	r3, #4
   23448:	d006      	beq.n	23458 <register_events+0xac>
   2344a:	2b01      	cmp	r3, #1
   2344c:	d10b      	bne.n	23466 <register_events+0xba>
		add_event(&event->signal->poll_events, event, poller);
   2344e:	f8db 0010 	ldr.w	r0, [fp, #16]
   23452:	4622      	mov	r2, r4
   23454:	4659      	mov	r1, fp
   23456:	e004      	b.n	23462 <register_events+0xb6>
		add_event(&event->queue->poll_events, event, poller);
   23458:	f8db 0010 	ldr.w	r0, [fp, #16]
   2345c:	4622      	mov	r2, r4
   2345e:	4659      	mov	r1, fp
   23460:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
   23462:	f7ff ff72 	bl	2334a <add_event>
	event->poller = poller;
   23466:	f8cb 4008 	str.w	r4, [fp, #8]
				events_registered += 1;
   2346a:	3501      	adds	r5, #1
   2346c:	e7d7      	b.n	2341e <register_events+0x72>

0002346e <k_poll_event_init>:
{
   2346e:	b510      	push	{r4, lr}
	event->type = type;
   23470:	0452      	lsls	r2, r2, #17
   23472:	0209      	lsls	r1, r1, #8
   23474:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
   23478:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
   2347c:	430a      	orrs	r2, r1
   2347e:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   23480:	2400      	movs	r4, #0
	event->type = type;
   23482:	430a      	orrs	r2, r1
	event->obj = obj;
   23484:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
   23488:	6084      	str	r4, [r0, #8]
}
   2348a:	bd10      	pop	{r4, pc}

0002348c <z_handle_obj_poll_events>:
{
   2348c:	4603      	mov	r3, r0
	return list->head == list;
   2348e:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   23490:	4283      	cmp	r3, r0
   23492:	d008      	beq.n	234a6 <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   23494:	e9d0 3200 	ldrd	r3, r2, [r0]
   23498:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   2349a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2349c:	2300      	movs	r3, #0
	node->prev = NULL;
   2349e:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   234a2:	f7ff bf0e 	b.w	232c2 <signal_poll_event>
}
   234a6:	4770      	bx	lr

000234a8 <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
   234a8:	4770      	bx	lr
